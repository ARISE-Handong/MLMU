[BigFraction, >, LEGENDRE_COEFFICIENTS, ;, private, static, final, Map, <, JacobiKey, ,, List, <, BigFraction, >, >, JACOBI_COEFFICIENTS, ;, static, {]
[LEGENDRE_COEFFICIENTS, ;, private, static, final, Map, <, JacobiKey, ,, List, <, BigFraction, >, >, JACOBI_COEFFICIENTS, ;, static, {, CHEBYSHEV_COEFFICIENTS, =]
[,, List, <, BigFraction, >, >, JACOBI_COEFFICIENTS, ;, static, {, CHEBYSHEV_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[,, List, <, BigFraction, >, >, JACOBI_COEFFICIENTS, ;, static, {, CHEBYSHEV_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[>, >, JACOBI_COEFFICIENTS, ;, static, {, CHEBYSHEV_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (]
[>, >, JACOBI_COEFFICIENTS, ;, static, {, CHEBYSHEV_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (]
[{, CHEBYSHEV_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[{, CHEBYSHEV_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[ArrayList, <, BigFraction, >, (, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (]
[ArrayList, <, BigFraction, >, (, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (]
[), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;]
[), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;]
[add, (, BigFraction, ., ONE, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (]
[add, (, BigFraction, ., ONE, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (]
[), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, =]
[;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[(, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, HERMITE_COEFFICIENTS, ., add, (]
[(, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, HERMITE_COEFFICIENTS, ., add, (]
[;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[ArrayList, <, BigFraction, >, (, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, ., add, (]
[ArrayList, <, BigFraction, >, (, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, ., add, (]
[), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;]
[), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;]
[add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, HERMITE_COEFFICIENTS, ., add, (]
[add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, HERMITE_COEFFICIENTS, ., add, (]
[), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO, ), ;]
[HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO, ), ;, LAGUERRE_COEFFICIENTS, =]
[;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO, ), ;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO, ), ;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[(, BigFraction, ., TWO, ), ;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LAGUERRE_COEFFICIENTS, ., add, (]
[(, BigFraction, ., TWO, ), ;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LAGUERRE_COEFFICIENTS, ., add, (]
[;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[ArrayList, <, BigFraction, >, (, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (]
[ArrayList, <, BigFraction, >, (, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (]
[), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (]
[add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (]
[), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE, ), ;]
[LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS, =]
[;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[(, BigFraction, ., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LEGENDRE_COEFFICIENTS, ., add, (]
[(, BigFraction, ., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LEGENDRE_COEFFICIENTS, ., add, (]
[;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[ArrayList, <, BigFraction, >, (, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LEGENDRE_COEFFICIENTS, ., add, (]
[ArrayList, <, BigFraction, >, (, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LEGENDRE_COEFFICIENTS, ., add, (]
[), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;]
[), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;]
[add, (, BigFraction, ., ONE, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, LEGENDRE_COEFFICIENTS, ., add, (]
[add, (, BigFraction, ., ONE, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, LEGENDRE_COEFFICIENTS, ., add, (]
[), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, JACOBI_COEFFICIENTS, =]
[), ;, }, private, PolynomialsUtils, (, ), {, }, public, static, PolynomialFunction, createChebyshevPolynomial, (, final, int, degree, ), {, return]
[}, private, PolynomialsUtils, (, ), {, }, public, static, PolynomialFunction, createChebyshevPolynomial, (, final, int, degree, ), {, return, buildPolynomial, (]
[PolynomialsUtils, (, ), {, }, public, static, PolynomialFunction, createChebyshevPolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,]
[), {, }, public, static, PolynomialFunction, createChebyshevPolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,, CHEBYSHEV_COEFFICIENTS, ,]
[{, return, buildPolynomial, (, degree, ,, CHEBYSHEV_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, private, final, BigFraction, [, ], coeffs, =]
[return, buildPolynomial, (, degree, ,, CHEBYSHEV_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, private, final, BigFraction, [, ], coeffs, =, {]
[return, buildPolynomial, (, degree, ,, CHEBYSHEV_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, private, final, BigFraction, [, ], coeffs, =, {]
[,, CHEBYSHEV_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, private, final, BigFraction, [, ], coeffs, =, {, BigFraction, ., ZERO, ,]
[,, CHEBYSHEV_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, private, final, BigFraction, [, ], coeffs, =, {, BigFraction, ., ZERO, ,]
[RecurrenceCoefficientsGenerator, (, ), {, private, final, BigFraction, [, ], coeffs, =, {, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,]
[RecurrenceCoefficientsGenerator, (, ), {, private, final, BigFraction, [, ], coeffs, =, {, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,]
[BigFraction, ., TWO, ,, BigFraction, ., ONE, }, ;, public, BigFraction, [, ], generate, (, int, k, ), {, return]
[{, return, coeffs, ;, }, }, ), ;, }, public, static, PolynomialFunction, createHermitePolynomial, (, final, int, degree, ), {, return]
[coeffs, ;, }, }, ), ;, }, public, static, PolynomialFunction, createHermitePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (]
[}, }, ), ;, }, public, static, PolynomialFunction, createHermitePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,]
[), ;, }, public, static, PolynomialFunction, createHermitePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,, HERMITE_COEFFICIENTS, ,]
[degree, ,, HERMITE_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, return]
[new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, return, new, BigFraction, [, ]]
[RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, return, new, BigFraction, [, ], {]
[RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, return, new, BigFraction, [, ], {]
[public, BigFraction, [, ], generate, (, int, k, ), {, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,]
[public, BigFraction, [, ], generate, (, int, k, ), {, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,]
[generate, (, int, k, ), {, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,]
[k, ), {, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,, new, BigFraction, (]
[k, ), {, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,, new, BigFraction, (]
[{, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,, new, BigFraction, (, 2, *]
[k, ), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {, return]
[}, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (]
[}, }, ), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,]
[), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,, LAGUERRE_COEFFICIENTS, ,]
[,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =]
[,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =]
[RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =, k, +]
[{, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =, k, +, 1, ;, return]
[], generate, (, int, k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ]]
[generate, (, int, k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {]
[k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, new, BigFraction, (]
[k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, new, BigFraction, (]
[k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, new, BigFraction, (]
[{, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, 2, *]
[int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, 2, *, k, +]
[=, k, +, 1, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, 2, *, k, +, 1, ,]
[1, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, 2, *, k, +, 1, ,, kP1, ), ,]
[new, BigFraction, [, ], {, new, BigFraction, (, 2, *, k, +, 1, ,, kP1, ), ,, new, BigFraction, (]
[BigFraction, [, ], {, new, BigFraction, (, 2, *, k, +, 1, ,, kP1, ), ,, new, BigFraction, (, -]
[], {, new, BigFraction, (, 2, *, k, +, 1, ,, kP1, ), ,, new, BigFraction, (, -, 1, ,]
[BigFraction, (, 2, *, k, +, 1, ,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,]
[*, k, +, 1, ,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (]
[+, 1, ,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (, k, ,]
[kP1, ), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLegendrePolynomial, (, final, int, degree, ), {, return]
[}, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLegendrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (]
[}, }, ), ;, }, public, static, PolynomialFunction, createLegendrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,]
[), ;, }, public, static, PolynomialFunction, createLegendrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,, LEGENDRE_COEFFICIENTS, ,]
[,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =]
[,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =]
[RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =, k, +]
[{, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =, k, +, 1, ;, return]
[], generate, (, int, k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ]]
[generate, (, int, k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {]
[generate, (, int, k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {]
[), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,]
[int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (]
[int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (]
[=, k, +, 1, ;, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +]
[+, 1, ;, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +, kP1, ,]
[return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +, kP1, ,, kP1, ), ,]
[[, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +, kP1, ,, kP1, ), ,, new, BigFraction, (]
[{, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +, kP1, ,, kP1, ), ,, new, BigFraction, (, k, ,]
[PolynomialFunction, createJacobiPolynomial, (, final, int, degree, ,, final, int, v, ,, final, int, w, ), {, final, JacobiKey, key, =]
[final, int, degree, ,, final, int, v, ,, final, int, w, ), {, final, JacobiKey, key, =, new, JacobiKey, (]
[degree, ,, final, int, v, ,, final, int, w, ), {, final, JacobiKey, key, =, new, JacobiKey, (, v, ,]
[,, final, int, w, ), {, final, JacobiKey, key, =, new, JacobiKey, (, v, ,, w, ), ;, if, (]
[final, int, w, ), {, final, JacobiKey, key, =, new, JacobiKey, (, v, ,, w, ), ;, if, (, !]
[final, int, w, ), {, final, JacobiKey, key, =, new, JacobiKey, (, v, ,, w, ), ;, if, (, !]
[{, final, JacobiKey, key, =, new, JacobiKey, (, v, ,, w, ), ;, if, (, !, JACOBI_COEFFICIENTS, ., containsKey, (]
[), ;, if, (, !, JACOBI_COEFFICIENTS, ., containsKey, (, key, ), ), {, final, List, <, BigFraction, >, list, =]
[(, key, ), ), {, final, List, <, BigFraction, >, list, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[(, key, ), ), {, final, List, <, BigFraction, >, list, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[{, final, List, <, BigFraction, >, list, =, new, ArrayList, <, BigFraction, >, (, ), ;, JACOBI_COEFFICIENTS, ., put, (]
[List, <, BigFraction, >, list, =, new, ArrayList, <, BigFraction, >, (, ), ;, JACOBI_COEFFICIENTS, ., put, (, key, ,]
[>, list, =, new, ArrayList, <, BigFraction, >, (, ), ;, JACOBI_COEFFICIENTS, ., put, (, key, ,, list, ), ;]
[>, list, =, new, ArrayList, <, BigFraction, >, (, ), ;, JACOBI_COEFFICIENTS, ., put, (, key, ,, list, ), ;]
[ArrayList, <, BigFraction, >, (, ), ;, JACOBI_COEFFICIENTS, ., put, (, key, ,, list, ), ;, list, ., add, (]
[ArrayList, <, BigFraction, >, (, ), ;, JACOBI_COEFFICIENTS, ., put, (, key, ,, list, ), ;, list, ., add, (]
[), ;, JACOBI_COEFFICIENTS, ., put, (, key, ,, list, ), ;, list, ., add, (, BigFraction, ., ONE, ), ;]
[), ;, JACOBI_COEFFICIENTS, ., put, (, key, ,, list, ), ;, list, ., add, (, BigFraction, ., ONE, ), ;]
[put, (, key, ,, list, ), ;, list, ., add, (, BigFraction, ., ONE, ), ;, list, ., add, (]
[,, list, ), ;, list, ., add, (, BigFraction, ., ONE, ), ;, list, ., add, (, new, BigFraction, (]
[,, list, ), ;, list, ., add, (, BigFraction, ., ONE, ), ;, list, ., add, (, new, BigFraction, (]
[), ;, list, ., add, (, BigFraction, ., ONE, ), ;, list, ., add, (, new, BigFraction, (, v, -]
[list, ., add, (, BigFraction, ., ONE, ), ;, list, ., add, (, new, BigFraction, (, v, -, w, ,]
[BigFraction, ., ONE, ), ;, list, ., add, (, new, BigFraction, (, v, -, w, ,, 2, ), ), ;]
[BigFraction, ., ONE, ), ;, list, ., add, (, new, BigFraction, (, v, -, w, ,, 2, ), ), ;]
[;, list, ., add, (, new, BigFraction, (, v, -, w, ,, 2, ), ), ;, list, ., add, (]
[add, (, new, BigFraction, (, v, -, w, ,, 2, ), ), ;, list, ., add, (, new, BigFraction, (]
[add, (, new, BigFraction, (, v, -, w, ,, 2, ), ), ;, list, ., add, (, new, BigFraction, (]
[add, (, new, BigFraction, (, v, -, w, ,, 2, ), ), ;, list, ., add, (, new, BigFraction, (]
[new, BigFraction, (, v, -, w, ,, 2, ), ), ;, list, ., add, (, new, BigFraction, (, 2, +]
[(, v, -, w, ,, 2, ), ), ;, list, ., add, (, new, BigFraction, (, 2, +, v, +]
[-, w, ,, 2, ), ), ;, list, ., add, (, new, BigFraction, (, 2, +, v, +, w, ,]
[;, list, ., add, (, new, BigFraction, (, 2, +, v, +, w, ,, 2, ), ), ;, }, return]
[., add, (, new, BigFraction, (, 2, +, v, +, w, ,, 2, ), ), ;, }, return, buildPolynomial, (]
[(, new, BigFraction, (, 2, +, v, +, w, ,, 2, ), ), ;, }, return, buildPolynomial, (, degree, ,]
[(, new, BigFraction, (, 2, +, v, +, w, ,, 2, ), ), ;, }, return, buildPolynomial, (, degree, ,]
[2, +, v, +, w, ,, 2, ), ), ;, }, return, buildPolynomial, (, degree, ,, JACOBI_COEFFICIENTS, ., get, (]
[+, w, ,, 2, ), ), ;, }, return, buildPolynomial, (, degree, ,, JACOBI_COEFFICIENTS, ., get, (, key, ), ,]
[get, (, key, ), ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {]
[get, (, key, ), ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {]
[(, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, k, ++, ;, final, int, kvw, =]
[(, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, k, ++, ;, final, int, kvw, =]
[(, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, k, ++, ;, final, int, kvw, =]
[{, public, BigFraction, [, ], generate, (, int, k, ), {, k, ++, ;, final, int, kvw, =, k, +]
[BigFraction, [, ], generate, (, int, k, ), {, k, ++, ;, final, int, kvw, =, k, +, v, +]
[k, ), {, k, ++, ;, final, int, kvw, =, k, +, v, +, w, ;, final, int, twoKvw, =]
[k, ), {, k, ++, ;, final, int, kvw, =, k, +, v, +, w, ;, final, int, twoKvw, =]
[{, k, ++, ;, final, int, kvw, =, k, +, v, +, w, ;, final, int, twoKvw, =, kvw, +]
[kvw, =, k, +, v, +, w, ;, final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =]
[kvw, =, k, +, v, +, w, ;, final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =]
[k, +, v, +, w, ;, final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =, twoKvw, -]
[final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =]
[final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =]
[twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -]
[final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =]
[final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =]
[final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =]
[final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =]
[twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =, 2, *]
[twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =, 2, *, k, *]
[1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =, 2, *, k, *, kvw, *]
[int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =, 2, *, k, *, kvw, *, twoKvwM2, ;, return]
[-, 2, ;, final, int, den, =, 2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ]]
[2, ;, final, int, den, =, 2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {]
[int, den, =, 2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (]
[int, den, =, 2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (]
[=, 2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *]
[2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (]
[2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (]
[2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (]
[k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *]
[kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -]
[kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -]
[twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *]
[new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w, ), ,]
[], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w, ), ,, den, ), ,]
[BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (]
[BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (]
[BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (]
[twoKvwM1, *, (, v, *, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *]
[(, v, *, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *]
[*, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,]
[w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,]
[), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (]
[), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (]
[), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (]
[), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (]
[den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *]
[), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (]
[), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (]
[), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (]
[new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +]
[(, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -]
[twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *]
[*, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (]
[*, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (]
[*, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (]
[,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +]
[), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -]
[BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -, 1, ), *]
[2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -, 1, ), *, twoKvw, ,]
[int, v, ;, private, final, int, w, ;, public, JacobiKey, (, final, int, v, ,, final, int, w, ), {]
[int, v, ;, private, final, int, w, ;, public, JacobiKey, (, final, int, v, ,, final, int, w, ), {]
[final, int, w, ;, public, JacobiKey, (, final, int, v, ,, final, int, w, ), {, this, ., v, =]
[w, ;, public, JacobiKey, (, final, int, v, ,, final, int, w, ), {, this, ., v, =, v, ;]
[w, ;, public, JacobiKey, (, final, int, v, ,, final, int, w, ), {, this, ., v, =, v, ;]
[(, final, int, v, ,, final, int, w, ), {, this, ., v, =, v, ;, this, ., w, =]
[v, =, v, ;, this, ., w, =, w, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[v, =, v, ;, this, ., w, =, w, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[=, v, ;, this, ., w, =, w, ;, }, @, Override, public, int, hashCode, (, ), {, return, (]
[=, v, ;, this, ., w, =, w, ;, }, @, Override, public, int, hashCode, (, ), {, return, (]
[;, this, ., w, =, w, ;, }, @, Override, public, int, hashCode, (, ), {, return, (, v, <<]
[w, =, w, ;, }, @, Override, public, int, hashCode, (, ), {, return, (, v, <<, 16, ), ^]
[<<, 16, ), ^, w, ;, }, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (]
[<<, 16, ), ^, w, ;, }, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (]
[16, ), ^, w, ;, }, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (]
[16, ), ^, w, ;, }, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (]
[^, w, ;, }, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (, key, ==]
[}, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (, key, ==, null, ), ||]
[@, Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (, key, ==, null, ), ||, !]
[Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (, key, ==, null, ), ||, !, (]
[Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (, key, ==, null, ), ||, !, (]
[key, ), {, if, (, (, key, ==, null, ), ||, !, (, key, instanceof, JacobiKey, ), ), {, return]
[==, null, ), ||, !, (, key, instanceof, JacobiKey, ), ), {, return, false, ;, }, final, JacobiKey, otherK, =]
[||, !, (, key, instanceof, JacobiKey, ), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, )]
[key, instanceof, JacobiKey, ), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return]
[key, instanceof, JacobiKey, ), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return]
[instanceof, JacobiKey, ), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (]
[instanceof, JacobiKey, ), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (]
[), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==]
[), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==]
[;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==, otherK, ., v, ), &&]
[}, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==, otherK, ., v, ), &&, (]
[}, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==, otherK, ., v, ), &&, (]
[JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==, otherK, ., v, ), &&, (, w, ==]
[JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==, otherK, ., v, ), &&, (, w, ==]
[double, [, ], shift, (, final, double, [, ], coefficients, ,, final, double, shift, ), {, final, int, dp1, =]
[double, [, ], shift, (, final, double, [, ], coefficients, ,, final, double, shift, ), {, final, int, dp1, =]
[,, final, double, shift, ), {, final, int, dp1, =, coefficients, ., length, ;, final, double, [, ], newCoefficients, =]
[shift, ), {, final, int, dp1, =, coefficients, ., length, ;, final, double, [, ], newCoefficients, =, new, double, []
[final, double, [, ], newCoefficients, =, new, double, [, dp1, ], ;, final, int, [, ], [, ], coeff, =]
[], newCoefficients, =, new, double, [, dp1, ], ;, final, int, [, ], [, ], coeff, =, new, int, []
[new, double, [, dp1, ], ;, final, int, [, ], [, ], coeff, =, new, int, [, dp1, ], []
[[, ], [, ], coeff, =, new, int, [, dp1, ], [, dp1, ], ;, for, (, int, i, =]
[[, ], coeff, =, new, int, [, dp1, ], [, dp1, ], ;, for, (, int, i, =, 0, ;]
[[, ], coeff, =, new, int, [, dp1, ], [, dp1, ], ;, for, (, int, i, =, 0, ;]
[coeff, =, new, int, [, dp1, ], [, dp1, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, int, [, dp1, ], [, dp1, ], ;, for, (, int, i, =, 0, ;, i, <, dp1, ;]
[new, int, [, dp1, ], [, dp1, ], ;, for, (, int, i, =, 0, ;, i, <, dp1, ;]
[for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, dp1, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <=]
[;, i, <, dp1, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <=, i, ;]
[;, i, <, dp1, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <=, i, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {]
[++, ), {, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, coeff, []
[for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, coeff, [, i, ], []
[j, =, 0, ;, j, <=, i, ;, j, ++, ), {, coeff, [, i, ], [, j, ], =]
[;, j, <=, i, ;, j, ++, ), {, coeff, [, i, ], [, j, ], =, (, int, )]
[;, j, <=, i, ;, j, ++, ), {, coeff, [, i, ], [, j, ], =, (, int, )]
[;, j, ++, ), {, coeff, [, i, ], [, j, ], =, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (]
[++, ), {, coeff, [, i, ], [, j, ], =, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,]
[=, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j, ), ;, }, }, for, (, int, i, =]
[int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j, ), ;, }, }, for, (, int, i, =, 0, ;]
[int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j, ), ;, }, }, for, (, int, i, =, 0, ;]
[CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j, ), ;, }, }, for, (, int, i, =, 0, ;, i, <]
[binomialCoefficient, (, i, ,, j, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, dp1, ;]
[binomialCoefficient, (, i, ,, j, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, dp1, ;]
[j, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {]
[j, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {]
[;, }, }, for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, newCoefficients, []
[for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, newCoefficients, [, 0, ], +=]
[for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, newCoefficients, [, 0, ], +=]
[for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, newCoefficients, [, 0, ], +=]
[int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, newCoefficients, [, 0, ], +=, coefficients, []
[0, ;, i, <, dp1, ;, i, ++, ), {, newCoefficients, [, 0, ], +=, coefficients, [, i, ], *]
[0, ;, i, <, dp1, ;, i, ++, ), {, newCoefficients, [, 0, ], +=, coefficients, [, i, ], *]
[dp1, ;, i, ++, ), {, newCoefficients, [, 0, ], +=, coefficients, [, i, ], *, FastMath, ., pow, (]
[i, ++, ), {, newCoefficients, [, 0, ], +=, coefficients, [, i, ], *, FastMath, ., pow, (, shift, ,]
[+=, coefficients, [, i, ], *, FastMath, ., pow, (, shift, ,, i, ), ;, }, final, int, d, =]
[+=, coefficients, [, i, ], *, FastMath, ., pow, (, shift, ,, i, ), ;, }, final, int, d, =]
[[, i, ], *, FastMath, ., pow, (, shift, ,, i, ), ;, }, final, int, d, =, dp1, -]
[(, shift, ,, i, ), ;, }, final, int, d, =, dp1, -, 1, ;, for, (, int, i, =]
[,, i, ), ;, }, final, int, d, =, dp1, -, 1, ;, for, (, int, i, =, 0, ;]
[,, i, ), ;, }, final, int, d, =, dp1, -, 1, ;, for, (, int, i, =, 0, ;]
[), ;, }, final, int, d, =, dp1, -, 1, ;, for, (, int, i, =, 0, ;, i, <]
[}, final, int, d, =, dp1, -, 1, ;, for, (, int, i, =, 0, ;, i, <, d, ;]
[}, final, int, d, =, dp1, -, 1, ;, for, (, int, i, =, 0, ;, i, <, d, ;]
[for, (, int, i, =, 0, ;, i, <, d, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, d, ;, i, ++, ), {, for, (, int, j, =, i, ;]
[int, i, =, 0, ;, i, <, d, ;, i, ++, ), {, for, (, int, j, =, i, ;]
[=, 0, ;, i, <, d, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <]
[;, i, <, d, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, d, ;]
[;, i, <, d, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, d, ;]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, d, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, d, ;, j, ++, ), {]
[++, ), {, for, (, int, j, =, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, []
[++, ), {, for, (, int, j, =, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, []
[{, for, (, int, j, =, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, [, i, +]
[int, j, =, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=]
[int, j, =, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=]
[int, j, =, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=]
[int, j, =, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=]
[int, j, =, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=]
[=, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=, coeff, []
[=, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=, coeff, []
[;, j, <, d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +]
[d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +, 1, ], []
[d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +, 1, ], []
[j, ++, ), {, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +, 1, ], [, j, -]
[{, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +, 1, ], [, j, -, i, ], *]
[{, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +, 1, ], [, j, -, i, ], *]
[[, i, +, 1, ], +=, coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, []
[[, i, +, 1, ], +=, coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, []
[+, 1, ], +=, coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, [, j, +]
[+=, coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, [, j, +, 1, ], *]
[+=, coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, [, j, +, 1, ], *]
[+, 1, ], [, j, -, i, ], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (]
[], [, j, -, i, ], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (, shift, ,]
[], [, j, -, i, ], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (, shift, ,]
[j, -, i, ], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (, shift, ,, j, -]
[[, j, +, 1, ], *, FastMath, ., pow, (, shift, ,, j, -, i, ), ;, }, }, return]
[final, int, degree, ,, final, List, <, BigFraction, >, coefficients, ,, final, RecurrenceCoefficientsGenerator, generator, ), {, final, int, maxDegree, =]
[final, int, degree, ,, final, List, <, BigFraction, >, coefficients, ,, final, RecurrenceCoefficientsGenerator, generator, ), {, final, int, maxDegree, =]
[,, final, List, <, BigFraction, >, coefficients, ,, final, RecurrenceCoefficientsGenerator, generator, ), {, final, int, maxDegree, =, (, int, )]
[,, final, List, <, BigFraction, >, coefficients, ,, final, RecurrenceCoefficientsGenerator, generator, ), {, final, int, maxDegree, =, (, int, )]
[BigFraction, >, coefficients, ,, final, RecurrenceCoefficientsGenerator, generator, ), {, final, int, maxDegree, =, (, int, ), FastMath, ., floor, (]
[BigFraction, >, coefficients, ,, final, RecurrenceCoefficientsGenerator, generator, ), {, final, int, maxDegree, =, (, int, ), FastMath, ., floor, (]
[final, RecurrenceCoefficientsGenerator, generator, ), {, final, int, maxDegree, =, (, int, ), FastMath, ., floor, (, FastMath, ., sqrt, (]
[final, RecurrenceCoefficientsGenerator, generator, ), {, final, int, maxDegree, =, (, int, ), FastMath, ., floor, (, FastMath, ., sqrt, (]
[generator, ), {, final, int, maxDegree, =, (, int, ), FastMath, ., floor, (, FastMath, ., sqrt, (, 2, *]
[generator, ), {, final, int, maxDegree, =, (, int, ), FastMath, ., floor, (, FastMath, ., sqrt, (, 2, *]
[int, ), FastMath, ., floor, (, FastMath, ., sqrt, (, 2, *, coefficients, ., size, (, ), ), ), -]
[floor, (, FastMath, ., sqrt, (, 2, *, coefficients, ., size, (, ), ), ), -, 1, ;, synchronized, (]
[*, coefficients, ., size, (, ), ), ), -, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (]
[*, coefficients, ., size, (, ), ), ), -, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (]
[., size, (, ), ), ), -, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >]
[), ), ), -, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {]
[), -, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree, (]
[1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree, (, degree, ,]
[synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree, (, degree, ,, maxDegree, ,]
[PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,]
[maxDegree, ), {, computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,, coefficients, ), ;, }, }, final, int, start, =]
[maxDegree, ), {, computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,, coefficients, ), ;, }, }, final, int, start, =]
[maxDegree, ), {, computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,, coefficients, ), ;, }, }, final, int, start, =]
[{, computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,, coefficients, ), ;, }, }, final, int, start, =, degree, *]
[computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,, coefficients, ), ;, }, }, final, int, start, =, degree, *, (]
[computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,, coefficients, ), ;, }, }, final, int, start, =, degree, *, (]
[degree, ,, maxDegree, ,, generator, ,, coefficients, ), ;, }, }, final, int, start, =, degree, *, (, degree, +]
[,, generator, ,, coefficients, ), ;, }, }, final, int, start, =, degree, *, (, degree, +, 1, ), /]
[final, int, start, =, degree, *, (, degree, +, 1, ), /, 2, ;, final, double, [, ], a, =]
[=, degree, *, (, degree, +, 1, ), /, 2, ;, final, double, [, ], a, =, new, double, []
[=, degree, *, (, degree, +, 1, ), /, 2, ;, final, double, [, ], a, =, new, double, []
[*, (, degree, +, 1, ), /, 2, ;, final, double, [, ], a, =, new, double, [, degree, +]
[;, final, double, [, ], a, =, new, double, [, degree, +, 1, ], ;, for, (, int, i, =]
[double, [, ], a, =, new, double, [, degree, +, 1, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], a, =, new, double, [, degree, +, 1, ], ;, for, (, int, i, =, 0, ;]
[], a, =, new, double, [, degree, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=]
[=, new, double, [, degree, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, degree, ;]
[new, double, [, degree, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, degree, ;, ++]
[degree, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, degree, ;, ++, i, ), {]
[degree, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, degree, ;, ++, i, ), {]
[1, ], ;, for, (, int, i, =, 0, ;, i, <=, degree, ;, ++, i, ), {, a, []
[for, (, int, i, =, 0, ;, i, <=, degree, ;, ++, i, ), {, a, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <=, degree, ;, ++, i, ), {, a, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <=, degree, ;, ++, i, ), {, a, [, i, ], =]
[=, 0, ;, i, <=, degree, ;, ++, i, ), {, a, [, i, ], =, coefficients, ., get, (]
[=, 0, ;, i, <=, degree, ;, ++, i, ), {, a, [, i, ], =, coefficients, ., get, (]
[;, i, <=, degree, ;, ++, i, ), {, a, [, i, ], =, coefficients, ., get, (, start, +]
[a, [, i, ], =, coefficients, ., get, (, start, +, i, ), ., doubleValue, (, ), ;, }, return]
[], =, coefficients, ., get, (, start, +, i, ), ., doubleValue, (, ), ;, }, return, new, PolynomialFunction, (]
[,, final, int, maxDegree, ,, final, RecurrenceCoefficientsGenerator, generator, ,, final, List, <, BigFraction, >, coefficients, ), {, int, startK, =]
[,, final, int, maxDegree, ,, final, RecurrenceCoefficientsGenerator, generator, ,, final, List, <, BigFraction, >, coefficients, ), {, int, startK, =]
[,, final, int, maxDegree, ,, final, RecurrenceCoefficientsGenerator, generator, ,, final, List, <, BigFraction, >, coefficients, ), {, int, startK, =]
[final, int, maxDegree, ,, final, RecurrenceCoefficientsGenerator, generator, ,, final, List, <, BigFraction, >, coefficients, ), {, int, startK, =, (]
[final, int, maxDegree, ,, final, RecurrenceCoefficientsGenerator, generator, ,, final, List, <, BigFraction, >, coefficients, ), {, int, startK, =, (]
[maxDegree, ,, final, RecurrenceCoefficientsGenerator, generator, ,, final, List, <, BigFraction, >, coefficients, ), {, int, startK, =, (, maxDegree, -]
[RecurrenceCoefficientsGenerator, generator, ,, final, List, <, BigFraction, >, coefficients, ), {, int, startK, =, (, maxDegree, -, 1, ), *]
[,, final, List, <, BigFraction, >, coefficients, ), {, int, startK, =, (, maxDegree, -, 1, ), *, maxDegree, /]
[), {, int, startK, =, (, maxDegree, -, 1, ), *, maxDegree, /, 2, ;, for, (, int, k, =]
[int, startK, =, (, maxDegree, -, 1, ), *, maxDegree, /, 2, ;, for, (, int, k, =, maxDegree, ;]
[int, startK, =, (, maxDegree, -, 1, ), *, maxDegree, /, 2, ;, for, (, int, k, =, maxDegree, ;]
[=, (, maxDegree, -, 1, ), *, maxDegree, /, 2, ;, for, (, int, k, =, maxDegree, ;, k, <]
[maxDegree, -, 1, ), *, maxDegree, /, 2, ;, for, (, int, k, =, maxDegree, ;, k, <, degree, ;]
[-, 1, ), *, maxDegree, /, 2, ;, for, (, int, k, =, maxDegree, ;, k, <, degree, ;, ++]
[2, ;, for, (, int, k, =, maxDegree, ;, k, <, degree, ;, ++, k, ), {, int, startKm1, =]
[for, (, int, k, =, maxDegree, ;, k, <, degree, ;, ++, k, ), {, int, startKm1, =, startK, ;]
[int, k, =, maxDegree, ;, k, <, degree, ;, ++, k, ), {, int, startKm1, =, startK, ;, startK, +=]
[degree, ;, ++, k, ), {, int, startKm1, =, startK, ;, startK, +=, k, ;, BigFraction, [, ], ai, =]
[degree, ;, ++, k, ), {, int, startKm1, =, startK, ;, startK, +=, k, ;, BigFraction, [, ], ai, =]
[), {, int, startKm1, =, startK, ;, startK, +=, k, ;, BigFraction, [, ], ai, =, generator, ., generate, (]
[;, startK, +=, k, ;, BigFraction, [, ], ai, =, generator, ., generate, (, k, ), ;, BigFraction, ck, =]
[;, startK, +=, k, ;, BigFraction, [, ], ai, =, generator, ., generate, (, k, ), ;, BigFraction, ck, =]
[;, BigFraction, [, ], ai, =, generator, ., generate, (, k, ), ;, BigFraction, ck, =, coefficients, ., get, (]
[generator, ., generate, (, k, ), ;, BigFraction, ck, =, coefficients, ., get, (, startK, ), ;, BigFraction, ckm1, =]
[generator, ., generate, (, k, ), ;, BigFraction, ck, =, coefficients, ., get, (, startK, ), ;, BigFraction, ckm1, =]
[k, ), ;, BigFraction, ck, =, coefficients, ., get, (, startK, ), ;, BigFraction, ckm1, =, coefficients, ., get, (]
[BigFraction, ck, =, coefficients, ., get, (, startK, ), ;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1, ), ;]
[BigFraction, ck, =, coefficients, ., get, (, startK, ), ;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1, ), ;]
[., get, (, startK, ), ;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1, ), ;, coefficients, ., add, (]
[., get, (, startK, ), ;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1, ), ;, coefficients, ., add, (]
[., get, (, startK, ), ;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1, ), ;, coefficients, ., add, (]
[), ;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1, ), ;, coefficients, ., add, (, ck, ., multiply, (]
[), ;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1, ), ;, coefficients, ., add, (, ck, ., multiply, (]
[BigFraction, ckm1, =, coefficients, ., get, (, startKm1, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, []
[(, startKm1, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., subtract, (]
[(, startKm1, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., subtract, (]
[coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., subtract, (, ckm1, ., multiply, (]
[coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., subtract, (, ckm1, ., multiply, (]
[add, (, ck, ., multiply, (, ai, [, 0, ], ), ., subtract, (, ckm1, ., multiply, (, ai, []
[., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, for, (, int, i, =]
[(, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, for, (, int, i, =, 1, ;]
[(, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, for, (, int, i, =, 1, ;]
[., multiply, (, ai, [, 2, ], ), ), ), ;, for, (, int, i, =, 1, ;, i, <]
[(, ai, [, 2, ], ), ), ), ;, for, (, int, i, =, 1, ;, i, <, k, ;]
[ai, [, 2, ], ), ), ), ;, for, (, int, i, =, 1, ;, i, <, k, ;, ++]
[;, for, (, int, i, =, 1, ;, i, <, k, ;, ++, i, ), {, final, BigFraction, ckPrev, =]
[(, int, i, =, 1, ;, i, <, k, ;, ++, i, ), {, final, BigFraction, ckPrev, =, ck, ;]
[i, =, 1, ;, i, <, k, ;, ++, i, ), {, final, BigFraction, ckPrev, =, ck, ;, ck, =]
[i, =, 1, ;, i, <, k, ;, ++, i, ), {, final, BigFraction, ckPrev, =, ck, ;, ck, =]
[i, <, k, ;, ++, i, ), {, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (]
[i, <, k, ;, ++, i, ), {, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (]
[k, ;, ++, i, ), {, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +]
[i, ), {, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, i, ), ;]
[{, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, i, ), ;, ckm1, =]
[{, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, i, ), ;, ckm1, =]
[=, ck, ;, ck, =, coefficients, ., get, (, startK, +, i, ), ;, ckm1, =, coefficients, ., get, (]
[=, ck, ;, ck, =, coefficients, ., get, (, startK, +, i, ), ;, ckm1, =, coefficients, ., get, (]
[;, ck, =, coefficients, ., get, (, startK, +, i, ), ;, ckm1, =, coefficients, ., get, (, startKm1, +]
[coefficients, ., get, (, startK, +, i, ), ;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;]
[coefficients, ., get, (, startK, +, i, ), ;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;]
[startK, +, i, ), ;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (]
[startK, +, i, ), ;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (]
[startK, +, i, ), ;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (]
[startK, +, i, ), ;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (]
[;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (, ck, ., multiply, (]
[;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (, ck, ., multiply, (]
[=, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, []
[+, i, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (]
[+, i, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (]
[coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (]
[coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (]
[add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, []
[[, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ., subtract, (]
[[, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ., subtract, (]
[., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ., subtract, (, ckm1, ., multiply, (]
[., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ., subtract, (, ckm1, ., multiply, (]
[(, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ., subtract, (, ckm1, ., multiply, (, ai, []
[., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, }, final, BigFraction, ckPrev, =]
[(, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, }, final, BigFraction, ckPrev, =, ck, ;]
[., multiply, (, ai, [, 2, ], ), ), ), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =]
[., multiply, (, ai, [, 2, ], ), ), ), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =]
[[, 2, ], ), ), ), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (]
[[, 2, ], ), ), ), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (]
[], ), ), ), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +]
[), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, k, ), ;]
[), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, k, ), ;]
[BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, k, ), ;, coefficients, ., add, (]
[BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, k, ), ;, coefficients, ., add, (]
[BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, k, ), ;, coefficients, ., add, (]
[;, ck, =, coefficients, ., get, (, startK, +, k, ), ;, coefficients, ., add, (, ck, ., multiply, (]
[;, ck, =, coefficients, ., get, (, startK, +, k, ), ;, coefficients, ., add, (, ck, ., multiply, (]
[=, coefficients, ., get, (, startK, +, k, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, []
[+, k, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (]
[+, k, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (]
[coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (]
[coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (]
[add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, []
[ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ), ;]
[ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ), ;]
[), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ), ;, coefficients, ., add, (]
[), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ), ;, coefficients, ., add, (]
[ckPrev, ., multiply, (, ai, [, 1, ], ), ), ), ;, coefficients, ., add, (, ck, ., multiply, (]
[ckPrev, ., multiply, (, ai, [, 1, ], ), ), ), ;, coefficients, ., add, (, ck, ., multiply, (]
[multiply, (, ai, [, 1, ], ), ), ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, []
