[;, public, DeadAssignmentsElimination, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process]
[;, }, }, ;, public, DeadAssignmentsElimination, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override]
[||, n, ., isDec, (, ), ;, }, }, ;, public, DeadAssignmentsElimination, (, AbstractCompiler, compiler, ), {, this, ., compiler]
[||, n, ., isInc, (, ), ||, n, ., isDec, (, ), ;, }, }, ;, public, DeadAssignmentsElimination, (, AbstractCompiler]
[), ||, n, ., isInc, (, ), ||, n, ., isDec, (, ), ;, }, }, ;, public, DeadAssignmentsElimination, (]
[&&, n, ., getFirstChild, (, ), ., isName, (, ), ), ||, n, ., isInc, (, ), ||, n, .]
[., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), ||, n, ., isInc]
[), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), ||, n, ., isInc, (, ), ||, n]
[), ||, n, ., isInc, (, ), ||, n, ., isDec, (, ), ;, }, }, ;, public, DeadAssignmentsElimination, (]
[., isName, (, ), ), ||, n, ., isInc, (, ), ||, n, ., isDec, (, ), ;, }, }]
[., getFirstChild, (, ), ., isName, (, ), ), ||, n, ., isInc, (, ), ||, n, ., isDec, (]
[||, n, ., isDec, (, ), ;, }, }, ;, public, DeadAssignmentsElimination, (, AbstractCompiler, compiler, ), {, this, ., compiler]
[., isInc, (, ), ||, n, ., isDec, (, ), ;, }, }, ;, public, DeadAssignmentsElimination, (, AbstractCompiler, compiler, )]
[;, }, }, ;, public, DeadAssignmentsElimination, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override]
[., isDec, (, ), ;, }, }, ;, public, DeadAssignmentsElimination, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, externs]
[;, Preconditions, ., checkNotNull, (, root, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }]
[., checkNotNull, (, externs, ), ;, Preconditions, ., checkNotNull, (, root, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[), ;, Preconditions, ., checkNotNull, (, root, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal]
[., checkNotNull, (, root, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, enterScope, (]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Scope, scope, =, t, ., getScope, (, )]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, )]
[,, root, ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Scope, scope, =]
[,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Scope, scope, =, t, .]
[), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Scope, scope, =, t, ., getScope, (]
[;, if, (, scope, ., isGlobal, (, ), ), {, return, ;, }, if, (, LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <, t]
[., getScope, (, ), ;, if, (, scope, ., isGlobal, (, ), ), {, return, ;, }, if, (, LiveVariablesAnalysis]
[), {, return, ;, }, if, (, LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <, t, ., getScope, (, ), ., getVarCount, (, )]
[., isGlobal, (, ), ), {, return, ;, }, if, (, LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <, t, ., getScope, (, )]
[), {, return, ;, }, Node, fnBlock, =, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ;, if, (]
[<, t, ., getScope, (, ), ., getVarCount, (, ), ), {, return, ;, }, Node, fnBlock, =, t, .]
[., MAX_VARIABLES_TO_ANALYZE, <, t, ., getScope, (, ), ., getVarCount, (, ), ), {, return, ;, }, Node, fnBlock, =]
[), {, return, ;, }, Node, fnBlock, =, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ;, if, (]
[., getVarCount, (, ), ), {, return, ;, }, Node, fnBlock, =, t, ., getScopeRoot, (, ), ., getLastChild, (]
[., getScope, (, ), ., getVarCount, (, ), ), {, return, ;, }, Node, fnBlock, =, t, ., getScopeRoot, (]
[;, if, (, NodeUtil, ., containsFunction, (, fnBlock, ), ), {, return, ;, }, if, (, !, NodeUtil, ., has]
[., getLastChild, (, ), ;, if, (, NodeUtil, ., containsFunction, (, fnBlock, ), ), {, return, ;, }, if, (]
[., getScopeRoot, (, ), ., getLastChild, (, ), ;, if, (, NodeUtil, ., containsFunction, (, fnBlock, ), ), {, return]
[), {, return, ;, }, if, (, !, NodeUtil, ., has, (, fnBlock, ,, matchRemovableAssigns, ,, Predicates, ., <, Node]
[., containsFunction, (, fnBlock, ), ), {, return, ;, }, if, (, !, NodeUtil, ., has, (, fnBlock, ,, matchRemovableAssigns]
[), ), {, return, ;, }, if, (, !, NodeUtil, ., has, (, fnBlock, ,, matchRemovableAssigns, ,, Predicates, ., <]
[), {, return, ;, }, ControlFlowGraph, <, Node, >, cfg, =, t, ., getControlFlowGraph, (, ), ;, liveness, =, new]
[), {, return, ;, }, ControlFlowGraph, <, Node, >, cfg, =, t, ., getControlFlowGraph, (, ), ;, liveness, =, new]
[., has, (, fnBlock, ,, matchRemovableAssigns, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), ), ), {, return, ;]
[,, matchRemovableAssigns, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), ), ), {, return, ;, }, ControlFlowGraph, <, Node]
[,, Predicates, ., <, Node, >, alwaysTrue, (, ), ), ), {, return, ;, }, ControlFlowGraph, <, Node, >, cfg]
[), ), {, return, ;, }, ControlFlowGraph, <, Node, >, cfg, =, t, ., getControlFlowGraph, (, ), ;, liveness, =]
[., <, Node, >, alwaysTrue, (, ), ), ), {, return, ;, }, ControlFlowGraph, <, Node, >, cfg, =, t]
[;, liveness, =, new, LiveVariablesAnalysis, (, cfg, ,, scope, ,, compiler, ), ;, liveness, ., analyze, (, ), ;, tryRemoveDeadAssignments]
[., getControlFlowGraph, (, ), ;, liveness, =, new, LiveVariablesAnalysis, (, cfg, ,, scope, ,, compiler, ), ;, liveness, ., analyze]
[=, new, LiveVariablesAnalysis, (, cfg, ,, scope, ,, compiler, ), ;, liveness, ., analyze, (, ), ;, tryRemoveDeadAssignments, (, t]
[;, liveness, ., analyze, (, ), ;, tryRemoveDeadAssignments, (, t, ,, cfg, ), ;, }, @, Override, public, void, exitScope]
[,, scope, ,, compiler, ), ;, liveness, ., analyze, (, ), ;, tryRemoveDeadAssignments, (, t, ,, cfg, ), ;, }]
[,, compiler, ), ;, liveness, ., analyze, (, ), ;, tryRemoveDeadAssignments, (, t, ,, cfg, ), ;, }, @, Override]
[), ;, liveness, ., analyze, (, ), ;, tryRemoveDeadAssignments, (, t, ,, cfg, ), ;, }, @, Override, public, void]
[;, tryRemoveDeadAssignments, (, t, ,, cfg, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }]
[., analyze, (, ), ;, tryRemoveDeadAssignments, (, t, ,, cfg, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, void, visit, (, NodeTraversal]
[,, cfg, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, void]
[), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, void, visit, (]
[;, for, (, DiGraphNode, <, Node, ,, Branch, >, cfgNode, :, nodes, ), {, FlowState, <, LiveVariableLattice, >, state, =]
[., getDirectedGraphNodes, (, ), ;, for, (, DiGraphNode, <, Node, ,, Branch, >, cfgNode, :, nodes, ), {, FlowState, <]
[), {, FlowState, <, LiveVariableLattice, >, state, =, cfgNode, ., getAnnotation, (, ), ;, Node, n, =, cfgNode, ., getValue]
[;, Node, n, =, cfgNode, ., getValue, (, ), ;, if, (, n, ==, null, ), {, continue, ;, }]
[., getAnnotation, (, ), ;, Node, n, =, cfgNode, ., getValue, (, ), ;, if, (, n, ==, null, )]
[;, if, (, n, ==, null, ), {, continue, ;, }, switch, (, n, ., getType, (, ), ), {]
[., getValue, (, ), ;, if, (, n, ==, null, ), {, continue, ;, }, switch, (, n, ., getType]
[), {, continue, ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., IF, :, case]
[==, null, ), {, continue, ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., IF]
[), {, continue, ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., IF, :, case]
[), {, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, tryRemoveAssignment, (, t]
[., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO]
[:, case, Token, ., WHILE, :, case, Token, ., DO, :, tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (, n]
[., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression]
[:, case, Token, ., DO, :, tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (, n, ), ,, state, ), ;]
[., WHILE, :, case, Token, ., DO, :, tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (, n, ), ,, state]
[:, tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (, n, ), ,, state, ), ;, continue, ;, case, Token, .]
[., DO, :, tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (, n, ), ,, state, ), ;, continue, ;, case]
[;, continue, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, tryRemoveAssignment]
[,, NodeUtil, ., getConditionExpression, (, n, ), ,, state, ), ;, continue, ;, case, Token, ., FOR, :, if, (]
[,, state, ), ;, continue, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, )]
[., getConditionExpression, (, n, ), ,, state, ), ;, continue, ;, case, Token, ., FOR, :, if, (, !, NodeUtil]
[), ,, state, ), ;, continue, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n]
[), ;, continue, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {]
[:, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (]
[., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, tryRemoveAssignment, (, t, ,, NodeUtil, .]
[), {, tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (, n, ), ,, state, ), ;, }, continue, ;, case]
[), {, tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (, n, ), ,, state, ), ;, }, continue, ;, case]
[., isForIn, (, n, ), ), {, tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (, n, ), ,, state, )]
[), ), {, tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (, n, ), ,, state, ), ;, }, continue, ;]
[;, }, continue, ;, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., RETURN, :, if]
[,, NodeUtil, ., getConditionExpression, (, n, ), ,, state, ), ;, }, continue, ;, case, Token, ., SWITCH, :, case]
[,, state, ), ;, }, continue, ;, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, .]
[., getConditionExpression, (, n, ), ,, state, ), ;, }, continue, ;, case, Token, ., SWITCH, :, case, Token, .]
[), ,, state, ), ;, }, continue, ;, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token]
[), ;, }, continue, ;, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., RETURN, :]
[:, case, Token, ., CASE, :, case, Token, ., RETURN, :, if, (, n, ., hasChildren, (, ), ), {]
[., SWITCH, :, case, Token, ., CASE, :, case, Token, ., RETURN, :, if, (, n, ., hasChildren, (, )]
[:, case, Token, ., RETURN, :, if, (, n, ., hasChildren, (, ), ), {, tryRemoveAssignment, (, t, ,, n]
[., CASE, :, case, Token, ., RETURN, :, if, (, n, ., hasChildren, (, ), ), {, tryRemoveAssignment, (, t]
[:, if, (, n, ., hasChildren, (, ), ), {, tryRemoveAssignment, (, t, ,, n, ., getFirstChild, (, ), ,]
[., RETURN, :, if, (, n, ., hasChildren, (, ), ), {, tryRemoveAssignment, (, t, ,, n, ., getFirstChild, (]
[), {, tryRemoveAssignment, (, t, ,, n, ., getFirstChild, (, ), ,, state, ), ;, }, continue, ;, }, tryRemoveAssignment]
[., hasChildren, (, ), ), {, tryRemoveAssignment, (, t, ,, n, ., getFirstChild, (, ), ,, state, ), ;, }]
[;, }, continue, ;, }, tryRemoveAssignment, (, t, ,, n, ,, state, ), ;, }, }, private, void, tryRemoveAssignment, (]
[,, n, ., getFirstChild, (, ), ,, state, ), ;, }, continue, ;, }, tryRemoveAssignment, (, t, ,, n, ,]
[,, state, ), ;, }, continue, ;, }, tryRemoveAssignment, (, t, ,, n, ,, state, ), ;, }, }, private]
[., getFirstChild, (, ), ,, state, ), ;, }, continue, ;, }, tryRemoveAssignment, (, t, ,, n, ,, state, )]
[), ;, }, continue, ;, }, tryRemoveAssignment, (, t, ,, n, ,, state, ), ;, }, }, private, void, tryRemoveAssignment]
[;, }, }, private, void, tryRemoveAssignment, (, NodeTraversal, t, ,, Node, n, ,, FlowState, <, LiveVariableLattice, >, state, ), {]
[,, n, ,, state, ), ;, }, }, private, void, tryRemoveAssignment, (, NodeTraversal, t, ,, Node, n, ,, FlowState, <]
[,, state, ), ;, }, }, private, void, tryRemoveAssignment, (, NodeTraversal, t, ,, Node, n, ,, FlowState, <, LiveVariableLattice, >]
[), ;, }, }, private, void, tryRemoveAssignment, (, NodeTraversal, t, ,, Node, n, ,, FlowState, <, LiveVariableLattice, >, state, )]
[;, }, private, void, tryRemoveAssignment, (, NodeTraversal, t, ,, Node, n, ,, Node, exprRoot, ,, FlowState, <, LiveVariableLattice, >, state]
[,, n, ,, n, ,, state, ), ;, }, private, void, tryRemoveAssignment, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, n, ,, state, ), ;, }, private, void, tryRemoveAssignment, (, NodeTraversal, t, ,, Node, n, ,, Node, exprRoot, ,]
[,, state, ), ;, }, private, void, tryRemoveAssignment, (, NodeTraversal, t, ,, Node, n, ,, Node, exprRoot, ,, FlowState, <]
[), ;, }, private, void, tryRemoveAssignment, (, NodeTraversal, t, ,, Node, n, ,, Node, exprRoot, ,, FlowState, <, LiveVariableLattice, >]
[;, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ||, n, ., isInc, (, ), ||, n, ., isDec, (]
[., getParent, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ||, n, ., isInc, (, ), ||]
[), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;]
[||, n, ., isDec, (, ), ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[||, n, ., isInc, (, ), ||, n, ., isDec, (, ), ), {, Node, lhs, =, n, ., getFirstChild]
[., isAssignmentOp, (, n, ), ||, n, ., isInc, (, ), ||, n, ., isDec, (, ), ), {, Node]
[), ||, n, ., isInc, (, ), ||, n, ., isDec, (, ), ), {, Node, lhs, =, n, .]
[||, n, ., isDec, (, ), ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[., isInc, (, ), ||, n, ., isDec, (, ), ), {, Node, lhs, =, n, ., getFirstChild, (, )]
[), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;]
[., isDec, (, ), ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, .]
[;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, rhs, !=, null, ), {, tryRemoveAssignment, (, t]
[., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, rhs, !=, null, )]
[;, if, (, rhs, !=, null, ), {, tryRemoveAssignment, (, t, ,, rhs, ,, exprRoot, ,, state, ), ;, rhs]
[., getNext, (, ), ;, if, (, rhs, !=, null, ), {, tryRemoveAssignment, (, t, ,, rhs, ,, exprRoot, ,]
[), {, tryRemoveAssignment, (, t, ,, rhs, ,, exprRoot, ,, state, ), ;, rhs, =, lhs, ., getNext, (, )]
[!=, null, ), {, tryRemoveAssignment, (, t, ,, rhs, ,, exprRoot, ,, state, ), ;, rhs, =, lhs, ., getNext]
[), {, tryRemoveAssignment, (, t, ,, rhs, ,, exprRoot, ,, state, ), ;, rhs, =, lhs, ., getNext, (, )]
[;, rhs, =, lhs, ., getNext, (, ), ;, }, Scope, scope, =, t, ., getScope, (, ), ;, if]
[,, rhs, ,, exprRoot, ,, state, ), ;, rhs, =, lhs, ., getNext, (, ), ;, }, Scope, scope, =]
[,, exprRoot, ,, state, ), ;, rhs, =, lhs, ., getNext, (, ), ;, }, Scope, scope, =, t, .]
[,, state, ), ;, rhs, =, lhs, ., getNext, (, ), ;, }, Scope, scope, =, t, ., getScope, (]
[), ;, rhs, =, lhs, ., getNext, (, ), ;, }, Scope, scope, =, t, ., getScope, (, ), ;]
[=, lhs, ., getNext, (, ), ;, }, Scope, scope, =, t, ., getScope, (, ), ;, if, (, !]
[;, }, Scope, scope, =, t, ., getScope, (, ), ;, if, (, !, lhs, ., isName, (, ), )]
[., getNext, (, ), ;, }, Scope, scope, =, t, ., getScope, (, ), ;, if, (, !, lhs, .]
[;, if, (, !, lhs, ., isName, (, ), ), {, return, ;, }, String, name, =, lhs, ., getString]
[., getScope, (, ), ;, if, (, !, lhs, ., isName, (, ), ), {, return, ;, }, String, name]
[), {, return, ;, }, String, name, =, lhs, ., getString, (, ), ;, if, (, !, scope, ., isDeclared]
[), {, return, ;, }, String, name, =, lhs, ., getString, (, ), ;, if, (, !, scope, ., isDeclared]
[., isName, (, ), ), {, return, ;, }, String, name, =, lhs, ., getString, (, ), ;, if, (]
[;, if, (, !, scope, ., isDeclared, (, name, ,, false, ), ), {, return, ;, }, Var, var, =]
[., getString, (, ), ;, if, (, !, scope, ., isDeclared, (, name, ,, false, ), ), {, return, ;]
[), {, return, ;, }, Var, var, =, scope, ., getVar, (, name, ), ;, if, (, liveness, ., getEscapedLocals]
[), {, return, ;, }, Var, var, =, scope, ., getVar, (, name, ), ;, if, (, liveness, ., getEscapedLocals]
[., isDeclared, (, name, ,, false, ), ), {, return, ;, }, Var, var, =, scope, ., getVar, (, name]
[,, false, ), ), {, return, ;, }, Var, var, =, scope, ., getVar, (, name, ), ;, if, (]
[), ), {, return, ;, }, Var, var, =, scope, ., getVar, (, name, ), ;, if, (, liveness, .]
[;, if, (, liveness, ., getEscapedLocals, (, ), ., contains, (, var, ), ), {, return, ;, }, if, (]
[., getVar, (, name, ), ;, if, (, liveness, ., getEscapedLocals, (, ), ., contains, (, var, ), ), {]
[), ;, if, (, liveness, ., getEscapedLocals, (, ), ., contains, (, var, ), ), {, return, ;, }, if]
[), {, return, ;, }, if, (, rhs, !=, null, &&, rhs, ., isName, (, ), &&, rhs, ., getString]
[., contains, (, var, ), ), {, return, ;, }, if, (, rhs, !=, null, &&, rhs, ., isName, (]
[., getEscapedLocals, (, ), ., contains, (, var, ), ), {, return, ;, }, if, (, rhs, !=, null, &&]
[), ), {, return, ;, }, if, (, rhs, !=, null, &&, rhs, ., isName, (, ), &&, rhs, .]
[), {, n, ., removeChild, (, rhs, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, rhs]
[&&, n, ., isAssign, (, ), ), {, n, ., removeChild, (, rhs, ), ;, n, ., getParent, (, )]
[&&, rhs, ., getString, (, ), ., equals, (, var, ., name, ), &&, n, ., isAssign, (, ), )]
[&&, rhs, ., isName, (, ), &&, rhs, ., getString, (, ), ., equals, (, var, ., name, ), &&]
[!=, null, &&, rhs, ., isName, (, ), &&, rhs, ., getString, (, ), ., equals, (, var, ., name]
[&&, rhs, ., isName, (, ), &&, rhs, ., getString, (, ), ., equals, (, var, ., name, ), &&]
[&&, rhs, ., getString, (, ), ., equals, (, var, ., name, ), &&, n, ., isAssign, (, ), )]
[., isName, (, ), &&, rhs, ., getString, (, ), ., equals, (, var, ., name, ), &&, n, .]
[&&, n, ., isAssign, (, ), ), {, n, ., removeChild, (, rhs, ), ;, n, ., getParent, (, )]
[., equals, (, var, ., name, ), &&, n, ., isAssign, (, ), ), {, n, ., removeChild, (, rhs]
[., getString, (, ), ., equals, (, var, ., name, ), &&, n, ., isAssign, (, ), ), {, n]
[), &&, n, ., isAssign, (, ), ), {, n, ., removeChild, (, rhs, ), ;, n, ., getParent, (]
[., name, ), &&, n, ., isAssign, (, ), ), {, n, ., removeChild, (, rhs, ), ;, n, .]
[), {, n, ., removeChild, (, rhs, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, rhs]
[., isAssign, (, ), ), {, n, ., removeChild, (, rhs, ), ;, n, ., getParent, (, ), ., replaceChild]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, rhs, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., removeChild, (, rhs, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, rhs, ), ;, compiler]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, rhs, ), ;, compiler, ., reportCodeChange, (, )]
[;, compiler, ., reportCodeChange, (, ), ;, return, ;, }, if, (, state, ., getOut, (, ), ., isLive, (]
[., replaceChild, (, n, ,, rhs, ), ;, compiler, ., reportCodeChange, (, ), ;, return, ;, }, if, (, state]
[., getParent, (, ), ., replaceChild, (, n, ,, rhs, ), ;, compiler, ., reportCodeChange, (, ), ;, return, ;]
[,, rhs, ), ;, compiler, ., reportCodeChange, (, ), ;, return, ;, }, if, (, state, ., getOut, (, )]
[), ;, compiler, ., reportCodeChange, (, ), ;, return, ;, }, if, (, state, ., getOut, (, ), ., isLive]
[;, return, ;, }, if, (, state, ., getOut, (, ), ., isLive, (, var, ), ), {, return, ;]
[., reportCodeChange, (, ), ;, return, ;, }, if, (, state, ., getOut, (, ), ., isLive, (, var, )]
[), {, return, ;, }, if, (, state, ., getIn, (, ), ., isLive, (, var, ), &&, isVariableStillLiveWithinExpression, (]
[., isLive, (, var, ), ), {, return, ;, }, if, (, state, ., getIn, (, ), ., isLive, (]
[., getOut, (, ), ., isLive, (, var, ), ), {, return, ;, }, if, (, state, ., getIn, (]
[), ), {, return, ;, }, if, (, state, ., getIn, (, ), ., isLive, (, var, ), &&, isVariableStillLiveWithinExpression]
[), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {, n, ., removeChild, (, rhs, )]
[&&, isVariableStillLiveWithinExpression, (, n, ,, exprRoot, ,, var, ., name, ), ), {, return, ;, }, if, (, n, .]
[., isLive, (, var, ), &&, isVariableStillLiveWithinExpression, (, n, ,, exprRoot, ,, var, ., name, ), ), {, return, ;]
[., getIn, (, ), ., isLive, (, var, ), &&, isVariableStillLiveWithinExpression, (, n, ,, exprRoot, ,, var, ., name, )]
[), &&, isVariableStillLiveWithinExpression, (, n, ,, exprRoot, ,, var, ., name, ), ), {, return, ;, }, if, (, n]
[), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {, n, ., removeChild, (, rhs, )]
[,, exprRoot, ,, var, ., name, ), ), {, return, ;, }, if, (, n, ., isAssign, (, ), )]
[,, var, ., name, ), ), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {, n]
[), ), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {, n, ., removeChild, (, rhs]
[., name, ), ), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {, n, ., removeChild]
[), {, n, ., removeChild, (, rhs, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, rhs]
[., isAssign, (, ), ), {, n, ., removeChild, (, rhs, ), ;, n, ., getParent, (, ), ., replaceChild]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, rhs, ), ;, }, else, if, (, NodeUtil, .]
[., removeChild, (, rhs, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, rhs, ), ;, }]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, rhs, ), ;, }, else, if, (, NodeUtil]
[;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ), {, n, ., removeChild, (, rhs, ), ;]
[., replaceChild, (, n, ,, rhs, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ), {]
[., getParent, (, ), ., replaceChild, (, n, ,, rhs, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (]
[,, rhs, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ), {, n, ., removeChild, (]
[), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ), {, n, ., removeChild, (, rhs, )]
[), {, n, ., removeChild, (, rhs, ), ;, n, ., removeChild, (, lhs, ), ;, Node, op, =, new]
[., isAssignmentOp, (, n, ), ), {, n, ., removeChild, (, rhs, ), ;, n, ., removeChild, (, lhs, )]
[), ), {, n, ., removeChild, (, rhs, ), ;, n, ., removeChild, (, lhs, ), ;, Node, op, =]
[;, n, ., removeChild, (, lhs, ), ;, Node, op, =, new, Node, (, NodeUtil, ., getOpFromAssignmentOp, (, n, )]
[., removeChild, (, rhs, ), ;, n, ., removeChild, (, lhs, ), ;, Node, op, =, new, Node, (, NodeUtil]
[), ;, n, ., removeChild, (, lhs, ), ;, Node, op, =, new, Node, (, NodeUtil, ., getOpFromAssignmentOp, (, n]
[;, Node, op, =, new, Node, (, NodeUtil, ., getOpFromAssignmentOp, (, n, ), ,, lhs, ,, rhs, ), ;, parent]
[., removeChild, (, lhs, ), ;, Node, op, =, new, Node, (, NodeUtil, ., getOpFromAssignmentOp, (, n, ), ,, lhs]
[), ;, Node, op, =, new, Node, (, NodeUtil, ., getOpFromAssignmentOp, (, n, ), ,, lhs, ,, rhs, ), ;]
[;, parent, ., replaceChild, (, n, ,, op, ), ;, }, else, if, (, n, ., isInc, (, ), ||]
[,, lhs, ,, rhs, ), ;, parent, ., replaceChild, (, n, ,, op, ), ;, }, else, if, (, n]
[., getOpFromAssignmentOp, (, n, ), ,, lhs, ,, rhs, ), ;, parent, ., replaceChild, (, n, ,, op, ), ;]
[), ,, lhs, ,, rhs, ), ;, parent, ., replaceChild, (, n, ,, op, ), ;, }, else, if, (]
[,, rhs, ), ;, parent, ., replaceChild, (, n, ,, op, ), ;, }, else, if, (, n, ., isInc]
[), ;, parent, ., replaceChild, (, n, ,, op, ), ;, }, else, if, (, n, ., isInc, (, )]
[;, }, else, if, (, n, ., isInc, (, ), ||, n, ., isDec, (, ), ), {, if, (]
[., replaceChild, (, n, ,, op, ), ;, }, else, if, (, n, ., isInc, (, ), ||, n, .]
[,, op, ), ;, }, else, if, (, n, ., isInc, (, ), ||, n, ., isDec, (, ), )]
[), ;, }, else, if, (, n, ., isInc, (, ), ||, n, ., isDec, (, ), ), {, if]
[), {, if, (, parent, ., isExprResult, (, ), ), {, parent, ., replaceChild, (, n, ,, IR, ., voidNode]
[||, n, ., isDec, (, ), ), {, if, (, parent, ., isExprResult, (, ), ), {, parent, ., replaceChild]
[., isInc, (, ), ||, n, ., isDec, (, ), ), {, if, (, parent, ., isExprResult, (, ), )]
[), {, if, (, parent, ., isExprResult, (, ), ), {, parent, ., replaceChild, (, n, ,, IR, ., voidNode]
[., isDec, (, ), ), {, if, (, parent, ., isExprResult, (, ), ), {, parent, ., replaceChild, (, n]
[), {, parent, ., replaceChild, (, n, ,, IR, ., voidNode, (, IR, ., number, (, 0, ), ., srcref]
[., isExprResult, (, ), ), {, parent, ., replaceChild, (, n, ,, IR, ., voidNode, (, IR, ., number, (]
[;, }, else, if, (, n, ., isComma, (, ), &&, n, !=, parent, ., getLastChild, (, ), ), {]
[., replaceChild, (, n, ,, IR, ., voidNode, (, IR, ., number, (, 0, ), ., srcref, (, n, )]
[,, IR, ., voidNode, (, IR, ., number, (, 0, ), ., srcref, (, n, ), ), ), ;, }]
[), ;, }, else, if, (, n, ., isComma, (, ), &&, n, !=, parent, ., getLastChild, (, ), )]
[., voidNode, (, IR, ., number, (, 0, ), ., srcref, (, n, ), ), ), ;, }, else, if]
[), ), ;, }, else, if, (, n, ., isComma, (, ), &&, n, !=, parent, ., getLastChild, (, )]
[., srcref, (, n, ), ), ), ;, }, else, if, (, n, ., isComma, (, ), &&, n, !=]
[., number, (, 0, ), ., srcref, (, n, ), ), ), ;, }, else, if, (, n, ., isComma]
[), ., srcref, (, n, ), ), ), ;, }, else, if, (, n, ., isComma, (, ), &&, n]
[), ), ), ;, }, else, if, (, n, ., isComma, (, ), &&, n, !=, parent, ., getLastChild, (]
[), {, parent, ., removeChild, (, n, ), ;, }, else, if, (, parent, ., isFor, (, ), &&, !]
[&&, n, !=, parent, ., getLastChild, (, ), ), {, parent, ., removeChild, (, n, ), ;, }, else, if]
[., isComma, (, ), &&, n, !=, parent, ., getLastChild, (, ), ), {, parent, ., removeChild, (, n, )]
[), {, parent, ., removeChild, (, n, ), ;, }, else, if, (, parent, ., isFor, (, ), &&, !]
[!=, parent, ., getLastChild, (, ), ), {, parent, ., removeChild, (, n, ), ;, }, else, if, (, parent]
[), {, parent, ., removeChild, (, n, ), ;, }, else, if, (, parent, ., isFor, (, ), &&, !]
[., getLastChild, (, ), ), {, parent, ., removeChild, (, n, ), ;, }, else, if, (, parent, ., isFor]
[;, }, else, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), &&, NodeUtil]
[., removeChild, (, n, ), ;, }, else, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn]
[), ;, }, else, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), &&]
[), {, parent, ., replaceChild, (, n, ,, IR, ., empty, (, ), ), ;, }, else, {, return, ;]
[&&, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ), {, parent, ., replaceChild, (, n, ,, IR, ., empty]
[&&, !, NodeUtil, ., isForIn, (, parent, ), &&, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ), {, parent]
[., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), &&, NodeUtil, ., getConditionExpression, (, parent, ), !=]
[&&, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ), {, parent, ., replaceChild, (, n, ,, IR, ., empty]
[&&, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ), {, parent, ., replaceChild, (, n, ,, IR, ., empty]
[., isForIn, (, parent, ), &&, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ), {, parent, ., replaceChild, (]
[), &&, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ), {, parent, ., replaceChild, (, n, ,, IR, .]
[), {, parent, ., replaceChild, (, n, ,, IR, ., empty, (, ), ), ;, }, else, {, return, ;]
[!=, n, ), {, parent, ., replaceChild, (, n, ,, IR, ., empty, (, ), ), ;, }, else, {]
[., getConditionExpression, (, parent, ), !=, n, ), {, parent, ., replaceChild, (, n, ,, IR, ., empty, (, )]
[), !=, n, ), {, parent, ., replaceChild, (, n, ,, IR, ., empty, (, ), ), ;, }, else]
[), {, parent, ., replaceChild, (, n, ,, IR, ., empty, (, ), ), ;, }, else, {, return, ;]
[;, }, else, {, return, ;, }, }, else, {, Preconditions, ., checkState, (, false, ,, "Unknown statement", ), ;, }]
[., replaceChild, (, n, ,, IR, ., empty, (, ), ), ;, }, else, {, return, ;, }, }, else]
[,, IR, ., empty, (, ), ), ;, }, else, {, return, ;, }, }, else, {, Preconditions, ., checkState]
[), ;, }, else, {, return, ;, }, }, else, {, Preconditions, ., checkState, (, false, ,, "Unknown statement", ), ;]
[., empty, (, ), ), ;, }, else, {, return, ;, }, }, else, {, Preconditions, ., checkState, (, false]
[;, }, compiler, ., reportCodeChange, (, ), ;, return, ;, }, else, {, for, (, Node, c, =, n, .]
[., checkState, (, false, ,, "Unknown statement", ), ;, }, compiler, ., reportCodeChange, (, ), ;, return, ;, }, else, {]
[,, "Unknown statement", ), ;, }, compiler, ., reportCodeChange, (, ), ;, return, ;, }, else, {, for, (, Node, c]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, return, ;, }, else, {, for, (, Node, c, =, n]
[;, return, ;, }, else, {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[., reportCodeChange, (, ), ;, return, ;, }, else, {, for, (, Node, c, =, n, ., getFirstChild, (, )]
[;, c, !=, null, ;, ), {, Node, next, =, c, ., getNext, (, ), ;, if, (, !, ControlFlowGraph]
[., getFirstChild, (, ), ;, c, !=, null, ;, ), {, Node, next, =, c, ., getNext, (, ), ;]
[;, ), {, Node, next, =, c, ., getNext, (, ), ;, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c]
[!=, null, ;, ), {, Node, next, =, c, ., getNext, (, ), ;, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode]
[;, ), {, Node, next, =, c, ., getNext, (, ), ;, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c]
[;, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), ), {, tryRemoveAssignment, (, t, ,, c, ,, exprRoot, ,]
[., getNext, (, ), ;, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), ), {, tryRemoveAssignment, (, t, ,]
[), {, tryRemoveAssignment, (, t, ,, c, ,, exprRoot, ,, state, ), ;, }, c, =, next, ;, }, return]
[), {, tryRemoveAssignment, (, t, ,, c, ,, exprRoot, ,, state, ), ;, }, c, =, next, ;, }, return]
[., isEnteringNewCfgNode, (, c, ), ), {, tryRemoveAssignment, (, t, ,, c, ,, exprRoot, ,, state, ), ;, }, c]
[), ), {, tryRemoveAssignment, (, t, ,, c, ,, exprRoot, ,, state, ), ;, }, c, =, next, ;, }]
[;, }, c, =, next, ;, }, return, ;, }, }, private, boolean, isVariableStillLiveWithinExpression, (, Node, n, ,, Node, exprRoot]
[,, c, ,, exprRoot, ,, state, ), ;, }, c, =, next, ;, }, return, ;, }, }, private, boolean]
[,, exprRoot, ,, state, ), ;, }, c, =, next, ;, }, return, ;, }, }, private, boolean, isVariableStillLiveWithinExpression, (]
[,, state, ), ;, }, c, =, next, ;, }, return, ;, }, }, private, boolean, isVariableStillLiveWithinExpression, (, Node, n]
[), ;, }, c, =, next, ;, }, return, ;, }, }, private, boolean, isVariableStillLiveWithinExpression, (, Node, n, ,, Node]
[=, next, ;, }, return, ;, }, }, private, boolean, isVariableStillLiveWithinExpression, (, Node, n, ,, Node, exprRoot, ,, String, variable]
[;, }, return, ;, }, }, private, boolean, isVariableStillLiveWithinExpression, (, Node, n, ,, Node, exprRoot, ,, String, variable, ), {]
[), {, VariableLiveness, state, =, VariableLiveness, ., MAYBE_LIVE, ;, switch, (, n, ., getParent, (, ), ., getType, (, )]
[!=, exprRoot, ), {, VariableLiveness, state, =, VariableLiveness, ., MAYBE_LIVE, ;, switch, (, n, ., getParent, (, ), ., getType]
[), {, VariableLiveness, state, =, VariableLiveness, ., MAYBE_LIVE, ;, switch, (, n, ., getParent, (, ), ., getType, (, )]
[;, switch, (, n, ., getParent, (, ), ., getType, (, ), ), {, case, Token, ., OR, :, case]
[., MAYBE_LIVE, ;, switch, (, n, ., getParent, (, ), ., getType, (, ), ), {, case, Token, ., OR]
[), {, case, Token, ., OR, :, case, Token, ., AND, :, if, (, n, ., getNext, (, ), !=]
[., getType, (, ), ), {, case, Token, ., OR, :, case, Token, ., AND, :, if, (, n, .]
[., getParent, (, ), ., getType, (, ), ), {, case, Token, ., OR, :, case, Token, ., AND, :]
[:, case, Token, ., AND, :, if, (, n, ., getNext, (, ), !=, null, ), {, state, =, isVariableReadBeforeKill]
[., OR, :, case, Token, ., AND, :, if, (, n, ., getNext, (, ), !=, null, ), {, state]
[:, if, (, n, ., getNext, (, ), !=, null, ), {, state, =, isVariableReadBeforeKill, (, n, ., getNext, (]
[., AND, :, if, (, n, ., getNext, (, ), !=, null, ), {, state, =, isVariableReadBeforeKill, (, n, .]
[), {, state, =, isVariableReadBeforeKill, (, n, ., getNext, (, ), ,, variable, ), ;, if, (, state, ==, VariableLiveness]
[!=, null, ), {, state, =, isVariableReadBeforeKill, (, n, ., getNext, (, ), ,, variable, ), ;, if, (, state]
[., getNext, (, ), !=, null, ), {, state, =, isVariableReadBeforeKill, (, n, ., getNext, (, ), ,, variable, )]
[), {, state, =, isVariableReadBeforeKill, (, n, ., getNext, (, ), ,, variable, ), ;, if, (, state, ==, VariableLiveness]
[=, isVariableReadBeforeKill, (, n, ., getNext, (, ), ,, variable, ), ;, if, (, state, ==, VariableLiveness, ., KILL, )]
[;, if, (, state, ==, VariableLiveness, ., KILL, ), {, state, =, VariableLiveness, ., MAYBE_LIVE, ;, }, }, break, ;]
[,, variable, ), ;, if, (, state, ==, VariableLiveness, ., KILL, ), {, state, =, VariableLiveness, ., MAYBE_LIVE, ;, }]
[., getNext, (, ), ,, variable, ), ;, if, (, state, ==, VariableLiveness, ., KILL, ), {, state, =, VariableLiveness]
[), ;, if, (, state, ==, VariableLiveness, ., KILL, ), {, state, =, VariableLiveness, ., MAYBE_LIVE, ;, }, }, break]
[), {, state, =, VariableLiveness, ., MAYBE_LIVE, ;, }, }, break, ;, case, Token, ., HOOK, :, if, (, n]
[==, VariableLiveness, ., KILL, ), {, state, =, VariableLiveness, ., MAYBE_LIVE, ;, }, }, break, ;, case, Token, ., HOOK]
[), {, state, =, VariableLiveness, ., MAYBE_LIVE, ;, }, }, break, ;, case, Token, ., HOOK, :, if, (, n]
[., KILL, ), {, state, =, VariableLiveness, ., MAYBE_LIVE, ;, }, }, break, ;, case, Token, ., HOOK, :, if]
[=, VariableLiveness, ., MAYBE_LIVE, ;, }, }, break, ;, case, Token, ., HOOK, :, if, (, n, ., getNext, (]
[;, }, }, break, ;, case, Token, ., HOOK, :, if, (, n, ., getNext, (, ), !=, null, &&]
[., MAYBE_LIVE, ;, }, }, break, ;, case, Token, ., HOOK, :, if, (, n, ., getNext, (, ), !=]
[:, if, (, n, ., getNext, (, ), !=, null, &&, n, ., getNext, (, ), ., getNext, (, )]
[., HOOK, :, if, (, n, ., getNext, (, ), !=, null, &&, n, ., getNext, (, ), ., getNext]
[), {, state, =, checkHookBranchReadBeforeKill, (, n, ., getNext, (, ), ,, n, ., getNext, (, ), ., getNext, (]
[&&, n, ., getNext, (, ), ., getNext, (, ), !=, null, ), {, state, =, checkHookBranchReadBeforeKill, (, n, .]
[!=, null, &&, n, ., getNext, (, ), ., getNext, (, ), !=, null, ), {, state, =, checkHookBranchReadBeforeKill, (]
[., getNext, (, ), !=, null, &&, n, ., getNext, (, ), ., getNext, (, ), !=, null, ), {]
[&&, n, ., getNext, (, ), ., getNext, (, ), !=, null, ), {, state, =, checkHookBranchReadBeforeKill, (, n, .]
[), {, state, =, checkHookBranchReadBeforeKill, (, n, ., getNext, (, ), ,, n, ., getNext, (, ), ., getNext, (]
[!=, null, ), {, state, =, checkHookBranchReadBeforeKill, (, n, ., getNext, (, ), ,, n, ., getNext, (, ), .]
[., getNext, (, ), !=, null, ), {, state, =, checkHookBranchReadBeforeKill, (, n, ., getNext, (, ), ,, n, .]
[., getNext, (, ), ., getNext, (, ), !=, null, ), {, state, =, checkHookBranchReadBeforeKill, (, n, ., getNext, (]
[), {, state, =, checkHookBranchReadBeforeKill, (, n, ., getNext, (, ), ,, n, ., getNext, (, ), ., getNext, (]
[=, checkHookBranchReadBeforeKill, (, n, ., getNext, (, ), ,, n, ., getNext, (, ), ., getNext, (, ), ,, variable]
[;, }, break, ;, default, :, for, (, Node, sibling, =, n, ., getNext, (, ), ;, sibling, !=, null]
[,, n, ., getNext, (, ), ., getNext, (, ), ,, variable, ), ;, }, break, ;, default, :, for]
[., getNext, (, ), ,, n, ., getNext, (, ), ., getNext, (, ), ,, variable, ), ;, }, break]
[,, variable, ), ;, }, break, ;, default, :, for, (, Node, sibling, =, n, ., getNext, (, ), ;]
[., getNext, (, ), ,, variable, ), ;, }, break, ;, default, :, for, (, Node, sibling, =, n, .]
[., getNext, (, ), ., getNext, (, ), ,, variable, ), ;, }, break, ;, default, :, for, (, Node]
[), ;, }, break, ;, default, :, for, (, Node, sibling, =, n, ., getNext, (, ), ;, sibling, !=]
[;, sibling, !=, null, ;, sibling, =, sibling, ., getNext, (, ), ), {, state, =, isVariableReadBeforeKill, (, sibling, ,]
[., getNext, (, ), ;, sibling, !=, null, ;, sibling, =, sibling, ., getNext, (, ), ), {, state, =]
[;, sibling, =, sibling, ., getNext, (, ), ), {, state, =, isVariableReadBeforeKill, (, sibling, ,, variable, ), ;, if]
[!=, null, ;, sibling, =, sibling, ., getNext, (, ), ), {, state, =, isVariableReadBeforeKill, (, sibling, ,, variable, )]
[;, sibling, =, sibling, ., getNext, (, ), ), {, state, =, isVariableReadBeforeKill, (, sibling, ,, variable, ), ;, if]
[=, sibling, ., getNext, (, ), ), {, state, =, isVariableReadBeforeKill, (, sibling, ,, variable, ), ;, if, (, state]
[), {, state, =, isVariableReadBeforeKill, (, sibling, ,, variable, ), ;, if, (, state, !=, VariableLiveness, ., MAYBE_LIVE, ), {]
[., getNext, (, ), ), {, state, =, isVariableReadBeforeKill, (, sibling, ,, variable, ), ;, if, (, state, !=, VariableLiveness]
[=, isVariableReadBeforeKill, (, sibling, ,, variable, ), ;, if, (, state, !=, VariableLiveness, ., MAYBE_LIVE, ), {, break, ;, }]
[;, if, (, state, !=, VariableLiveness, ., MAYBE_LIVE, ), {, break, ;, }, }, }, if, (, state, ==, VariableLiveness]
[,, variable, ), ;, if, (, state, !=, VariableLiveness, ., MAYBE_LIVE, ), {, break, ;, }, }, }, if, (]
[), ;, if, (, state, !=, VariableLiveness, ., MAYBE_LIVE, ), {, break, ;, }, }, }, if, (, state, ==]
[), {, break, ;, }, }, }, if, (, state, ==, VariableLiveness, ., READ, ), {, return, true, ;, }]
[!=, VariableLiveness, ., MAYBE_LIVE, ), {, break, ;, }, }, }, if, (, state, ==, VariableLiveness, ., READ, ), {]
[), {, break, ;, }, }, }, if, (, state, ==, VariableLiveness, ., READ, ), {, return, true, ;, }]
[., MAYBE_LIVE, ), {, break, ;, }, }, }, if, (, state, ==, VariableLiveness, ., READ, ), {, return, true]
[), {, return, true, ;, }, else, if, (, state, ==, VariableLiveness, ., KILL, ), {, return, false, ;, }]
[==, VariableLiveness, ., READ, ), {, return, true, ;, }, else, if, (, state, ==, VariableLiveness, ., KILL, ), {]
[), {, return, true, ;, }, else, if, (, state, ==, VariableLiveness, ., KILL, ), {, return, false, ;, }]
[., READ, ), {, return, true, ;, }, else, if, (, state, ==, VariableLiveness, ., KILL, ), {, return, false]
[;, }, else, if, (, state, ==, VariableLiveness, ., KILL, ), {, return, false, ;, }, n, =, n, .]
[), {, return, false, ;, }, n, =, n, ., getParent, (, ), ;, }, return, false, ;, }, private]
[==, VariableLiveness, ., KILL, ), {, return, false, ;, }, n, =, n, ., getParent, (, ), ;, }, return]
[), {, return, false, ;, }, n, =, n, ., getParent, (, ), ;, }, return, false, ;, }, private]
[., KILL, ), {, return, false, ;, }, n, =, n, ., getParent, (, ), ;, }, return, false, ;]
[;, }, n, =, n, ., getParent, (, ), ;, }, return, false, ;, }, private, enum, VariableLiveness, {, MAYBE_LIVE]
[=, n, ., getParent, (, ), ;, }, return, false, ;, }, private, enum, VariableLiveness, {, MAYBE_LIVE, ,, READ, ,]
[;, }, return, false, ;, }, private, enum, VariableLiveness, {, MAYBE_LIVE, ,, READ, ,, KILL, ,, }, private, VariableLiveness, isVariableReadBeforeKill]
[., getParent, (, ), ;, }, return, false, ;, }, private, enum, VariableLiveness, {, MAYBE_LIVE, ,, READ, ,, KILL, ,]
[;, }, private, enum, VariableLiveness, {, MAYBE_LIVE, ,, READ, ,, KILL, ,, }, private, VariableLiveness, isVariableReadBeforeKill, (, Node, n, ,]
[), {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, if, (, n, ., isName, (, ), &&, variable, ., equals, (]
[., isEnteringNewCfgNode, (, n, ), ), {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, if, (, n, ., isName, (, )]
[), ), {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, if, (, n, ., isName, (, ), &&, variable, ., equals]
[;, }, if, (, n, ., isName, (, ), &&, variable, ., equals, (, n, ., getString, (, ), )]
[., MAYBE_LIVE, ;, }, if, (, n, ., isName, (, ), &&, variable, ., equals, (, n, ., getString, (]
[), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, n, ., getParent, (, ), ), ), {, Preconditions, .]
[&&, variable, ., equals, (, n, ., getString, (, ), ), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n]
[., isName, (, ), &&, variable, ., equals, (, n, ., getString, (, ), ), ), {, if, (, NodeUtil]
[), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, n, ., getParent, (, ), ), ), {, Preconditions, .]
[., equals, (, n, ., getString, (, ), ), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, n]
[), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, n, ., getParent, (, ), ), ), {, Preconditions]
[., getString, (, ), ), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, n, ., getParent, (, )]
[), {, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isAssign, (, ), ), ;, Node, rhs, =]
[., isVarOrSimpleAssignLhs, (, n, ,, n, ., getParent, (, ), ), ), {, Preconditions, ., checkState, (, n, ., getParent]
[,, n, ., getParent, (, ), ), ), {, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isAssign]
[), ), {, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isAssign, (, ), ), ;, Node, rhs]
[., getParent, (, ), ), ), {, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isAssign, (, )]
[;, Node, rhs, =, n, ., getNext, (, ), ;, VariableLiveness, state, =, isVariableReadBeforeKill, (, rhs, ,, variable, ), ;]
[., checkState, (, n, ., getParent, (, ), ., isAssign, (, ), ), ;, Node, rhs, =, n, ., getNext]
[), ;, Node, rhs, =, n, ., getNext, (, ), ;, VariableLiveness, state, =, isVariableReadBeforeKill, (, rhs, ,, variable, )]
[., isAssign, (, ), ), ;, Node, rhs, =, n, ., getNext, (, ), ;, VariableLiveness, state, =, isVariableReadBeforeKill, (]
[., getParent, (, ), ., isAssign, (, ), ), ;, Node, rhs, =, n, ., getNext, (, ), ;, VariableLiveness]
[;, VariableLiveness, state, =, isVariableReadBeforeKill, (, rhs, ,, variable, ), ;, if, (, state, ==, VariableLiveness, ., READ, ), {]
[., getNext, (, ), ;, VariableLiveness, state, =, isVariableReadBeforeKill, (, rhs, ,, variable, ), ;, if, (, state, ==, VariableLiveness]
[;, if, (, state, ==, VariableLiveness, ., READ, ), {, return, state, ;, }, return, VariableLiveness, ., KILL, ;, }]
[,, variable, ), ;, if, (, state, ==, VariableLiveness, ., READ, ), {, return, state, ;, }, return, VariableLiveness, .]
[), ;, if, (, state, ==, VariableLiveness, ., READ, ), {, return, state, ;, }, return, VariableLiveness, ., KILL, ;]
[), {, return, state, ;, }, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness, ., READ, ;, }]
[==, VariableLiveness, ., READ, ), {, return, state, ;, }, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness]
[), {, return, state, ;, }, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness, ., READ, ;, }]
[., READ, ), {, return, state, ;, }, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness, ., READ]
[;, }, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness, ., READ, ;, }, }, switch, (, n]
[;, }, else, {, return, VariableLiveness, ., READ, ;, }, }, switch, (, n, ., getType, (, ), ), {]
[., KILL, ;, }, else, {, return, VariableLiveness, ., READ, ;, }, }, switch, (, n, ., getType, (, )]
[;, }, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., OR, :, case, Token, .]
[., READ, ;, }, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., OR, :, case]
[), {, case, Token, ., OR, :, case, Token, ., AND, :, VariableLiveness, v1, =, isVariableReadBeforeKill, (, n, ., getFirstChild]
[., getType, (, ), ), {, case, Token, ., OR, :, case, Token, ., AND, :, VariableLiveness, v1, =, isVariableReadBeforeKill]
[:, case, Token, ., AND, :, VariableLiveness, v1, =, isVariableReadBeforeKill, (, n, ., getFirstChild, (, ), ,, variable, ), ;]
[., OR, :, case, Token, ., AND, :, VariableLiveness, v1, =, isVariableReadBeforeKill, (, n, ., getFirstChild, (, ), ,, variable]
[:, VariableLiveness, v1, =, isVariableReadBeforeKill, (, n, ., getFirstChild, (, ), ,, variable, ), ;, VariableLiveness, v2, =, isVariableReadBeforeKill, (]
[., AND, :, VariableLiveness, v1, =, isVariableReadBeforeKill, (, n, ., getFirstChild, (, ), ,, variable, ), ;, VariableLiveness, v2, =]
[;, VariableLiveness, v2, =, isVariableReadBeforeKill, (, n, ., getLastChild, (, ), ,, variable, ), ;, if, (, v1, !=, VariableLiveness]
[,, variable, ), ;, VariableLiveness, v2, =, isVariableReadBeforeKill, (, n, ., getLastChild, (, ), ,, variable, ), ;, if, (]
[., getFirstChild, (, ), ,, variable, ), ;, VariableLiveness, v2, =, isVariableReadBeforeKill, (, n, ., getLastChild, (, ), ,, variable]
[), ;, VariableLiveness, v2, =, isVariableReadBeforeKill, (, n, ., getLastChild, (, ), ,, variable, ), ;, if, (, v1, !=]
[;, if, (, v1, !=, VariableLiveness, ., MAYBE_LIVE, ), {, return, v1, ;, }, else, if, (, v2, ==, VariableLiveness]
[,, variable, ), ;, if, (, v1, !=, VariableLiveness, ., MAYBE_LIVE, ), {, return, v1, ;, }, else, if, (]
[., getLastChild, (, ), ,, variable, ), ;, if, (, v1, !=, VariableLiveness, ., MAYBE_LIVE, ), {, return, v1, ;]
[), ;, if, (, v1, !=, VariableLiveness, ., MAYBE_LIVE, ), {, return, v1, ;, }, else, if, (, v2, ==]
[), {, return, v1, ;, }, else, if, (, v2, ==, VariableLiveness, ., READ, ), {, return, VariableLiveness, ., READ]
[!=, VariableLiveness, ., MAYBE_LIVE, ), {, return, v1, ;, }, else, if, (, v2, ==, VariableLiveness, ., READ, ), {]
[), {, return, v1, ;, }, else, if, (, v2, ==, VariableLiveness, ., READ, ), {, return, VariableLiveness, ., READ]
[., MAYBE_LIVE, ), {, return, v1, ;, }, else, if, (, v2, ==, VariableLiveness, ., READ, ), {, return, VariableLiveness]
[;, }, else, if, (, v2, ==, VariableLiveness, ., READ, ), {, return, VariableLiveness, ., READ, ;, }, else, {]
[), {, return, VariableLiveness, ., READ, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, case, Token, ., HOOK]
[==, VariableLiveness, ., READ, ), {, return, VariableLiveness, ., READ, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }]
[), {, return, VariableLiveness, ., READ, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, case, Token, ., HOOK]
[., READ, ), {, return, VariableLiveness, ., READ, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, case, Token]
[;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, case, Token, ., HOOK, :, VariableLiveness, first, =, isVariableReadBeforeKill, (]
[., READ, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, case, Token, ., HOOK, :, VariableLiveness, first, =]
[;, }, case, Token, ., HOOK, :, VariableLiveness, first, =, isVariableReadBeforeKill, (, n, ., getFirstChild, (, ), ,, variable, )]
[., MAYBE_LIVE, ;, }, case, Token, ., HOOK, :, VariableLiveness, first, =, isVariableReadBeforeKill, (, n, ., getFirstChild, (, ), ,]
[:, VariableLiveness, first, =, isVariableReadBeforeKill, (, n, ., getFirstChild, (, ), ,, variable, ), ;, if, (, first, !=, VariableLiveness]
[., HOOK, :, VariableLiveness, first, =, isVariableReadBeforeKill, (, n, ., getFirstChild, (, ), ,, variable, ), ;, if, (, first]
[;, if, (, first, !=, VariableLiveness, ., MAYBE_LIVE, ), {, return, first, ;, }, return, checkHookBranchReadBeforeKill, (, n, ., getFirstChild]
[,, variable, ), ;, if, (, first, !=, VariableLiveness, ., MAYBE_LIVE, ), {, return, first, ;, }, return, checkHookBranchReadBeforeKill, (]
[., getFirstChild, (, ), ,, variable, ), ;, if, (, first, !=, VariableLiveness, ., MAYBE_LIVE, ), {, return, first, ;]
[), ;, if, (, first, !=, VariableLiveness, ., MAYBE_LIVE, ), {, return, first, ;, }, return, checkHookBranchReadBeforeKill, (, n, .]
[), {, return, first, ;, }, return, checkHookBranchReadBeforeKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, n]
[!=, VariableLiveness, ., MAYBE_LIVE, ), {, return, first, ;, }, return, checkHookBranchReadBeforeKill, (, n, ., getFirstChild, (, ), ., getNext]
[), {, return, first, ;, }, return, checkHookBranchReadBeforeKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, n]
[., MAYBE_LIVE, ), {, return, first, ;, }, return, checkHookBranchReadBeforeKill, (, n, ., getFirstChild, (, ), ., getNext, (, )]
[;, }, return, checkHookBranchReadBeforeKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, n, ., getLastChild, (, )]
[;, default, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[,, n, ., getLastChild, (, ), ,, variable, ), ;, default, :, for, (, Node, child, =, n, ., getFirstChild]
[., getNext, (, ), ,, n, ., getLastChild, (, ), ,, variable, ), ;, default, :, for, (, Node, child]
[., getFirstChild, (, ), ., getNext, (, ), ,, n, ., getLastChild, (, ), ,, variable, ), ;, default, :]
[,, variable, ), ;, default, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null]
[., getLastChild, (, ), ,, variable, ), ;, default, :, for, (, Node, child, =, n, ., getFirstChild, (, )]
[), ;, default, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, VariableLiveness, state, =, isVariableReadBeforeKill, (, child]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, VariableLiveness, state]
[;, child, =, child, ., getNext, (, ), ), {, VariableLiveness, state, =, isVariableReadBeforeKill, (, child, ,, variable, ), ;]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, VariableLiveness, state, =, isVariableReadBeforeKill, (, child, ,, variable]
[;, child, =, child, ., getNext, (, ), ), {, VariableLiveness, state, =, isVariableReadBeforeKill, (, child, ,, variable, ), ;]
[=, child, ., getNext, (, ), ), {, VariableLiveness, state, =, isVariableReadBeforeKill, (, child, ,, variable, ), ;, if, (]
[), {, VariableLiveness, state, =, isVariableReadBeforeKill, (, child, ,, variable, ), ;, if, (, state, !=, VariableLiveness, ., MAYBE_LIVE, )]
[., getNext, (, ), ), {, VariableLiveness, state, =, isVariableReadBeforeKill, (, child, ,, variable, ), ;, if, (, state, !=]
[;, if, (, state, !=, VariableLiveness, ., MAYBE_LIVE, ), {, return, state, ;, }, }, }, return, VariableLiveness, ., MAYBE_LIVE]
[,, variable, ), ;, if, (, state, !=, VariableLiveness, ., MAYBE_LIVE, ), {, return, state, ;, }, }, }, return]
[), ;, if, (, state, !=, VariableLiveness, ., MAYBE_LIVE, ), {, return, state, ;, }, }, }, return, VariableLiveness, .]
[), {, return, state, ;, }, }, }, return, VariableLiveness, ., MAYBE_LIVE, ;, }, private, VariableLiveness, checkHookBranchReadBeforeKill, (, Node, trueCase]
[!=, VariableLiveness, ., MAYBE_LIVE, ), {, return, state, ;, }, }, }, return, VariableLiveness, ., MAYBE_LIVE, ;, }, private, VariableLiveness]
[), {, return, state, ;, }, }, }, return, VariableLiveness, ., MAYBE_LIVE, ;, }, private, VariableLiveness, checkHookBranchReadBeforeKill, (, Node, trueCase]
[., MAYBE_LIVE, ), {, return, state, ;, }, }, }, return, VariableLiveness, ., MAYBE_LIVE, ;, }, private, VariableLiveness, checkHookBranchReadBeforeKill, (]
[;, }, }, }, return, VariableLiveness, ., MAYBE_LIVE, ;, }, private, VariableLiveness, checkHookBranchReadBeforeKill, (, Node, trueCase, ,, Node, falseCase, ,]
[;, }, private, VariableLiveness, checkHookBranchReadBeforeKill, (, Node, trueCase, ,, Node, falseCase, ,, String, variable, ), {, VariableLiveness, v1, =, isVariableReadBeforeKill]
[., MAYBE_LIVE, ;, }, private, VariableLiveness, checkHookBranchReadBeforeKill, (, Node, trueCase, ,, Node, falseCase, ,, String, variable, ), {, VariableLiveness, v1]
[;, VariableLiveness, v2, =, isVariableReadBeforeKill, (, falseCase, ,, variable, ), ;, if, (, v1, ==, VariableLiveness, ., READ, ||, v2]
[,, variable, ), ;, VariableLiveness, v2, =, isVariableReadBeforeKill, (, falseCase, ,, variable, ), ;, if, (, v1, ==, VariableLiveness, .]
[), ;, VariableLiveness, v2, =, isVariableReadBeforeKill, (, falseCase, ,, variable, ), ;, if, (, v1, ==, VariableLiveness, ., READ, ||]
[;, if, (, v1, ==, VariableLiveness, ., READ, ||, v2, ==, VariableLiveness, ., READ, ), {, return, VariableLiveness, ., READ]
[,, variable, ), ;, if, (, v1, ==, VariableLiveness, ., READ, ||, v2, ==, VariableLiveness, ., READ, ), {, return]
[), ;, if, (, v1, ==, VariableLiveness, ., READ, ||, v2, ==, VariableLiveness, ., READ, ), {, return, VariableLiveness, .]
[), {, return, VariableLiveness, ., READ, ;, }, else, if, (, v1, ==, VariableLiveness, ., KILL, &&, v2, ==, VariableLiveness]
[||, v2, ==, VariableLiveness, ., READ, ), {, return, VariableLiveness, ., READ, ;, }, else, if, (, v1, ==, VariableLiveness]
[==, VariableLiveness, ., READ, ||, v2, ==, VariableLiveness, ., READ, ), {, return, VariableLiveness, ., READ, ;, }, else, if]
[||, v2, ==, VariableLiveness, ., READ, ), {, return, VariableLiveness, ., READ, ;, }, else, if, (, v1, ==, VariableLiveness]
[., READ, ||, v2, ==, VariableLiveness, ., READ, ), {, return, VariableLiveness, ., READ, ;, }, else, if, (, v1]
[), {, return, VariableLiveness, ., READ, ;, }, else, if, (, v1, ==, VariableLiveness, ., KILL, &&, v2, ==, VariableLiveness]
[==, VariableLiveness, ., READ, ), {, return, VariableLiveness, ., READ, ;, }, else, if, (, v1, ==, VariableLiveness, ., KILL]
[), {, return, VariableLiveness, ., READ, ;, }, else, if, (, v1, ==, VariableLiveness, ., KILL, &&, v2, ==, VariableLiveness]
[., READ, ), {, return, VariableLiveness, ., READ, ;, }, else, if, (, v1, ==, VariableLiveness, ., KILL, &&, v2]
[;, }, else, if, (, v1, ==, VariableLiveness, ., KILL, &&, v2, ==, VariableLiveness, ., KILL, ), {, return, VariableLiveness]
[., READ, ;, }, else, if, (, v1, ==, VariableLiveness, ., KILL, &&, v2, ==, VariableLiveness, ., KILL, ), {]
[), {, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, }, }]
[&&, v2, ==, VariableLiveness, ., KILL, ), {, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE]
[==, VariableLiveness, ., KILL, &&, v2, ==, VariableLiveness, ., KILL, ), {, return, VariableLiveness, ., KILL, ;, }, else, {]
[&&, v2, ==, VariableLiveness, ., KILL, ), {, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE]
[., KILL, &&, v2, ==, VariableLiveness, ., KILL, ), {, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness]
[), {, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, }, }]
[==, VariableLiveness, ., KILL, ), {, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }]
[), {, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, }, }]
[., KILL, ), {, return, VariableLiveness, ., KILL, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, }, }]
[;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, }, }]
[., KILL, ;, }, else, {, return, VariableLiveness, ., MAYBE_LIVE, ;, }, }, }]
[;, }, }, }]
[., MAYBE_LIVE, ;, }, }, }]
