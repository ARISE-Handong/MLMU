[;, private, final, Set, <, String, >, whitelist, ;, private, static, final, Pattern, LINE_NUMBER, =, Pattern, ., compile, (, ":-?\\d+"]
[., on, (, "\n", ), ;, private, final, Set, <, String, >, whitelist, ;, private, static, final, Pattern, LINE_NUMBER, =]
[), ;, private, final, Set, <, String, >, whitelist, ;, private, static, final, Pattern, LINE_NUMBER, =, Pattern, ., compile, (]
[;, public, WhitelistWarningsGuard, (, Set, <, String, >, whitelist, ), {, Preconditions, ., checkNotNull, (, whitelist, ), ;, this, .]
[., compile, (, ":-?\\d+", ), ;, public, WhitelistWarningsGuard, (, Set, <, String, >, whitelist, ), {, Preconditions, ., checkNotNull, (]
[), ;, public, WhitelistWarningsGuard, (, Set, <, String, >, whitelist, ), {, Preconditions, ., checkNotNull, (, whitelist, ), ;, this]
[;, this, ., whitelist, =, normalizeWhitelist, (, whitelist, ), ;, }, private, static, Set, <, String, >, normalizeWhitelist, (, Set]
[., checkNotNull, (, whitelist, ), ;, this, ., whitelist, =, normalizeWhitelist, (, whitelist, ), ;, }, private, static, Set, <]
[), ;, this, ., whitelist, =, normalizeWhitelist, (, whitelist, ), ;, }, private, static, Set, <, String, >, normalizeWhitelist, (]
[=, normalizeWhitelist, (, whitelist, ), ;, }, private, static, Set, <, String, >, normalizeWhitelist, (, Set, <, String, >, whitelist]
[., whitelist, =, normalizeWhitelist, (, whitelist, ), ;, }, private, static, Set, <, String, >, normalizeWhitelist, (, Set, <, String]
[;, }, private, static, Set, <, String, >, normalizeWhitelist, (, Set, <, String, >, whitelist, ), {, Set, <, String]
[), ;, }, private, static, Set, <, String, >, normalizeWhitelist, (, Set, <, String, >, whitelist, ), {, Set, <]
[;, for, (, String, line, :, whitelist, ), {, String, trimmed, =, line, ., trim, (, ), ;, if, (]
[., newHashSet, (, ), ;, for, (, String, line, :, whitelist, ), {, String, trimmed, =, line, ., trim, (]
[), {, String, trimmed, =, line, ., trim, (, ), ;, if, (, trimmed, ., isEmpty, (, ), ||, trimmed]
[;, if, (, trimmed, ., isEmpty, (, ), ||, trimmed, ., charAt, (, 0, ), ==, '#', ), {, continue]
[., trim, (, ), ;, if, (, trimmed, ., isEmpty, (, ), ||, trimmed, ., charAt, (, 0, ), ==]
[), {, continue, ;, }, result, ., add, (, LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst, (, ":", )]
[||, trimmed, ., charAt, (, 0, ), ==, '#', ), {, continue, ;, }, result, ., add, (, LINE_NUMBER, .]
[., isEmpty, (, ), ||, trimmed, ., charAt, (, 0, ), ==, '#', ), {, continue, ;, }, result, .]
[), {, continue, ;, }, result, ., add, (, LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst, (, ":", )]
[==, '#', ), {, continue, ;, }, result, ., add, (, LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst, (]
[., charAt, (, 0, ), ==, '#', ), {, continue, ;, }, result, ., add, (, LINE_NUMBER, ., matcher, (]
[), ==, '#', ), {, continue, ;, }, result, ., add, (, LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst]
[), {, continue, ;, }, result, ., add, (, LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst, (, ":", )]
[;, }, return, ImmutableSet, ., copyOf, (, result, ), ;, }, @, Override, public, CheckLevel, level, (, JSError, error, )]
[., add, (, LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst, (, ":", ), ), ;, }, return, ImmutableSet, .]
[), ;, }, return, ImmutableSet, ., copyOf, (, result, ), ;, }, @, Override, public, CheckLevel, level, (, JSError, error]
[., replaceFirst, (, ":", ), ), ;, }, return, ImmutableSet, ., copyOf, (, result, ), ;, }, @, Override, public]
[., matcher, (, trimmed, ), ., replaceFirst, (, ":", ), ), ;, }, return, ImmutableSet, ., copyOf, (, result, )]
[), ., replaceFirst, (, ":", ), ), ;, }, return, ImmutableSet, ., copyOf, (, result, ), ;, }, @, Override]
[), ), ;, }, return, ImmutableSet, ., copyOf, (, result, ), ;, }, @, Override, public, CheckLevel, level, (, JSError]
[;, }, @, Override, public, CheckLevel, level, (, JSError, error, ), {, if, (, containWarning, (, formatWarning, (, error, )]
[., copyOf, (, result, ), ;, }, @, Override, public, CheckLevel, level, (, JSError, error, ), {, if, (, containWarning]
[), ;, }, @, Override, public, CheckLevel, level, (, JSError, error, ), {, if, (, containWarning, (, formatWarning, (, error]
[), {, return, CheckLevel, ., WARNING, ;, }, return, null, ;, }, protected, boolean, containWarning, (, String, formattedWarning, ), {]
[), ), {, return, CheckLevel, ., WARNING, ;, }, return, null, ;, }, protected, boolean, containWarning, (, String, formattedWarning, )]
[), ), ), {, return, CheckLevel, ., WARNING, ;, }, return, null, ;, }, protected, boolean, containWarning, (, String, formattedWarning]
[;, }, return, null, ;, }, protected, boolean, containWarning, (, String, formattedWarning, ), {, return, whitelist, ., contains, (, formattedWarning]
[., WARNING, ;, }, return, null, ;, }, protected, boolean, containWarning, (, String, formattedWarning, ), {, return, whitelist, ., contains]
[;, }, protected, boolean, containWarning, (, String, formattedWarning, ), {, return, whitelist, ., contains, (, formattedWarning, ), ;, }, @]
[;, }, @, Override, public, int, getPriority, (, ), {, return, WarningsGuard, ., Priority, ., SUPPRESS_BY_WHITELIST, ., getValue, (, )]
[., contains, (, formattedWarning, ), ;, }, @, Override, public, int, getPriority, (, ), {, return, WarningsGuard, ., Priority, .]
[), ;, }, @, Override, public, int, getPriority, (, ), {, return, WarningsGuard, ., Priority, ., SUPPRESS_BY_WHITELIST, ., getValue, (]
[;, }, public, static, WhitelistWarningsGuard, fromFile, (, File, file, ), {, return, new, WhitelistWarningsGuard, (, loadWhitelistedJsWarnings, (, file, ), )]
[., getValue, (, ), ;, }, public, static, WhitelistWarningsGuard, fromFile, (, File, file, ), {, return, new, WhitelistWarningsGuard, (, loadWhitelistedJsWarnings]
[., SUPPRESS_BY_WHITELIST, ., getValue, (, ), ;, }, public, static, WhitelistWarningsGuard, fromFile, (, File, file, ), {, return, new, WhitelistWarningsGuard]
[., Priority, ., SUPPRESS_BY_WHITELIST, ., getValue, (, ), ;, }, public, static, WhitelistWarningsGuard, fromFile, (, File, file, ), {, return]
[;, }, public, static, Set, <, String, >, loadWhitelistedJsWarnings, (, File, file, ), {, return, loadWhitelistedJsWarnings, (, Files, ., newReaderSupplier]
[), ;, }, public, static, Set, <, String, >, loadWhitelistedJsWarnings, (, File, file, ), {, return, loadWhitelistedJsWarnings, (, Files, .]
[), ), ;, }, public, static, Set, <, String, >, loadWhitelistedJsWarnings, (, File, file, ), {, return, loadWhitelistedJsWarnings, (, Files]
[;, }, protected, static, Set, <, String, >, loadWhitelistedJsWarnings, (, InputSupplier, <, ?, extends, Reader, >, supplier, ), {, try]
[), ;, }, protected, static, Set, <, String, >, loadWhitelistedJsWarnings, (, InputSupplier, <, ?, extends, Reader, >, supplier, ), {]
[., newReaderSupplier, (, file, ,, Charsets, ., UTF_8, ), ), ;, }, protected, static, Set, <, String, >, loadWhitelistedJsWarnings, (]
[,, Charsets, ., UTF_8, ), ), ;, }, protected, static, Set, <, String, >, loadWhitelistedJsWarnings, (, InputSupplier, <, ?, extends]
[), ), ;, }, protected, static, Set, <, String, >, loadWhitelistedJsWarnings, (, InputSupplier, <, ?, extends, Reader, >, supplier, )]
[., UTF_8, ), ), ;, }, protected, static, Set, <, String, >, loadWhitelistedJsWarnings, (, InputSupplier, <, ?, extends, Reader, >]
[;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, }, static, Set, <]
[), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, }, static, Set]
[., getInput, (, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;]
[;, }, }, static, Set, <, String, >, loadWhitelistedJsWarnings, (, Reader, reader, ), throws, IOException, {, Preconditions, ., checkNotNull, (]
[), ;, }, }, static, Set, <, String, >, loadWhitelistedJsWarnings, (, Reader, reader, ), throws, IOException, {, Preconditions, ., checkNotNull]
[;, Set, <, String, >, result, =, Sets, ., newHashSet, (, ), ;, for, (, String, line, :, CharStreams, .]
[., checkNotNull, (, reader, ), ;, Set, <, String, >, result, =, Sets, ., newHashSet, (, ), ;, for, (]
[), ;, Set, <, String, >, result, =, Sets, ., newHashSet, (, ), ;, for, (, String, line, :, CharStreams]
[;, for, (, String, line, :, CharStreams, ., readLines, (, reader, ), ), {, result, ., add, (, line, )]
[., newHashSet, (, ), ;, for, (, String, line, :, CharStreams, ., readLines, (, reader, ), ), {, result, .]
[), {, result, ., add, (, line, ), ;, }, return, result, ;, }, public, static, String, formatWarning, (, JSError]
[., readLines, (, reader, ), ), {, result, ., add, (, line, ), ;, }, return, result, ;, }, public]
[), ), {, result, ., add, (, line, ), ;, }, return, result, ;, }, public, static, String, formatWarning, (]
[;, }, return, result, ;, }, public, static, String, formatWarning, (, JSError, error, ), {, return, formatWarning, (, error, ,]
[., add, (, line, ), ;, }, return, result, ;, }, public, static, String, formatWarning, (, JSError, error, ), {]
[), ;, }, return, result, ;, }, public, static, String, formatWarning, (, JSError, error, ), {, return, formatWarning, (, error]
[;, }, public, static, String, formatWarning, (, JSError, error, ), {, return, formatWarning, (, error, ,, false, ), ;, }]
[;, }, public, static, String, formatWarning, (, JSError, error, ,, boolean, withMetaData, ), {, StringBuilder, sb, =, new, StringBuilder, (]
[,, false, ), ;, }, public, static, String, formatWarning, (, JSError, error, ,, boolean, withMetaData, ), {, StringBuilder, sb, =]
[), ;, }, public, static, String, formatWarning, (, JSError, error, ,, boolean, withMetaData, ), {, StringBuilder, sb, =, new, StringBuilder]
[;, sb, ., append, (, error, ., sourceName, ), ., append, (, ":", ), ;, if, (, withMetaData, ), {]
[;, if, (, withMetaData, ), {, sb, ., append, (, error, ., lineNumber, ), ;, }, List, <, String, >]
[., append, (, ":", ), ;, if, (, withMetaData, ), {, sb, ., append, (, error, ., lineNumber, ), ;]
[., append, (, error, ., sourceName, ), ., append, (, ":", ), ;, if, (, withMetaData, ), {, sb, .]
[), ., append, (, ":", ), ;, if, (, withMetaData, ), {, sb, ., append, (, error, ., lineNumber, )]
[., sourceName, ), ., append, (, ":", ), ;, if, (, withMetaData, ), {, sb, ., append, (, error, .]
[), ;, if, (, withMetaData, ), {, sb, ., append, (, error, ., lineNumber, ), ;, }, List, <, String]
[), {, sb, ., append, (, error, ., lineNumber, ), ;, }, List, <, String, >, lines, =, ImmutableList, .]
[;, }, List, <, String, >, lines, =, ImmutableList, ., copyOf, (, LINE_SPLITTER, ., split, (, error, ., description, )]
[., append, (, error, ., lineNumber, ), ;, }, List, <, String, >, lines, =, ImmutableList, ., copyOf, (, LINE_SPLITTER]
[), ;, }, List, <, String, >, lines, =, ImmutableList, ., copyOf, (, LINE_SPLITTER, ., split, (, error, ., description]
[., lineNumber, ), ;, }, List, <, String, >, lines, =, ImmutableList, ., copyOf, (, LINE_SPLITTER, ., split, (, error]
[;, sb, ., append, (, "  ", ), ., append, (, lines, ., get, (, 0, ), ), ;, if, (]
[., copyOf, (, LINE_SPLITTER, ., split, (, error, ., description, ), ), ;, sb, ., append, (, "  ", ), .]
[), ;, sb, ., append, (, "  ", ), ., append, (, lines, ., get, (, 0, ), ), ;, if]
[., split, (, error, ., description, ), ), ;, sb, ., append, (, "  ", ), ., append, (, lines, .]
[), ), ;, sb, ., append, (, "  ", ), ., append, (, lines, ., get, (, 0, ), ), ;]
[., description, ), ), ;, sb, ., append, (, "  ", ), ., append, (, lines, ., get, (, 0, )]
[;, if, (, withMetaData, ), {, for, (, int, i, =, 1, ;, i, <, lines, ., size, (, )]
[., append, (, lines, ., get, (, 0, ), ), ;, if, (, withMetaData, ), {, for, (, int, i]
[., append, (, "  ", ), ., append, (, lines, ., get, (, 0, ), ), ;, if, (, withMetaData, )]
[), ., append, (, lines, ., get, (, 0, ), ), ;, if, (, withMetaData, ), {, for, (, int]
[), ;, if, (, withMetaData, ), {, for, (, int, i, =, 1, ;, i, <, lines, ., size, (]
[., get, (, 0, ), ), ;, if, (, withMetaData, ), {, for, (, int, i, =, 1, ;, i]
[), ), ;, if, (, withMetaData, ), {, for, (, int, i, =, 1, ;, i, <, lines, ., size]
[), {, for, (, int, i, =, 1, ;, i, <, lines, ., size, (, ), ;, i, ++, )]
[;, i, <, lines, ., size, (, ), ;, i, ++, ), {, sb, ., append, (, "\n# ", ), .]
[;, i, ++, ), {, sb, ., append, (, "\n# ", ), ., append, (, lines, ., get, (, i, )]
[<, lines, ., size, (, ), ;, i, ++, ), {, sb, ., append, (, "\n# ", ), ., append, (]
[;, i, ++, ), {, sb, ., append, (, "\n# ", ), ., append, (, lines, ., get, (, i, )]
[., size, (, ), ;, i, ++, ), {, sb, ., append, (, "\n# ", ), ., append, (, lines, .]
[), {, sb, ., append, (, "\n# ", ), ., append, (, lines, ., get, (, i, ), ), ;, }]
[++, ), {, sb, ., append, (, "\n# ", ), ., append, (, lines, ., get, (, i, ), ), ;]
[;, }, sb, ., append, (, "\n", ), ;, }, return, sb, ., toString, (, ), ;, }, public, static]
[., append, (, lines, ., get, (, i, ), ), ;, }, sb, ., append, (, "\n", ), ;, }]
[., append, (, "\n# ", ), ., append, (, lines, ., get, (, i, ), ), ;, }, sb, ., append]
[), ., append, (, lines, ., get, (, i, ), ), ;, }, sb, ., append, (, "\n", ), ;]
[), ;, }, sb, ., append, (, "\n", ), ;, }, return, sb, ., toString, (, ), ;, }, public]
[., get, (, i, ), ), ;, }, sb, ., append, (, "\n", ), ;, }, return, sb, ., toString]
[), ), ;, }, sb, ., append, (, "\n", ), ;, }, return, sb, ., toString, (, ), ;, }]
[;, }, return, sb, ., toString, (, ), ;, }, public, static, String, getFirstLine, (, String, warning, ), {, int]
[., append, (, "\n", ), ;, }, return, sb, ., toString, (, ), ;, }, public, static, String, getFirstLine, (]
[), ;, }, return, sb, ., toString, (, ), ;, }, public, static, String, getFirstLine, (, String, warning, ), {]
[;, }, public, static, String, getFirstLine, (, String, warning, ), {, int, lineLength, =, warning, ., indexOf, (, '\n', )]
[., toString, (, ), ;, }, public, static, String, getFirstLine, (, String, warning, ), {, int, lineLength, =, warning, .]
[;, if, (, lineLength, >, 0, ), {, warning, =, warning, ., substring, (, 0, ,, lineLength, ), ;, }]
[., indexOf, (, '\n', ), ;, if, (, lineLength, >, 0, ), {, warning, =, warning, ., substring, (, 0]
[), ;, if, (, lineLength, >, 0, ), {, warning, =, warning, ., substring, (, 0, ,, lineLength, ), ;]
[), {, warning, =, warning, ., substring, (, 0, ,, lineLength, ), ;, }, return, warning, ;, }, public, static]
[>, 0, ), {, warning, =, warning, ., substring, (, 0, ,, lineLength, ), ;, }, return, warning, ;, }]
[), {, warning, =, warning, ., substring, (, 0, ,, lineLength, ), ;, }, return, warning, ;, }, public, static]
[=, warning, ., substring, (, 0, ,, lineLength, ), ;, }, return, warning, ;, }, public, static, class, WhitelistBuilder, implements]
[;, }, return, warning, ;, }, public, static, class, WhitelistBuilder, implements, ErrorHandler, {, private, final, Set, <, JSError, >, warnings]
[., substring, (, 0, ,, lineLength, ), ;, }, return, warning, ;, }, public, static, class, WhitelistBuilder, implements, ErrorHandler, {]
[,, lineLength, ), ;, }, return, warning, ;, }, public, static, class, WhitelistBuilder, implements, ErrorHandler, {, private, final, Set, <]
[), ;, }, return, warning, ;, }, public, static, class, WhitelistBuilder, implements, ErrorHandler, {, private, final, Set, <, JSError, >]
[;, }, public, static, class, WhitelistBuilder, implements, ErrorHandler, {, private, final, Set, <, JSError, >, warnings, =, Sets, ., newLinkedHashSet]
[;, private, String, productName, =, null, ;, private, String, generatorTarget, =, null, ;, private, String, headerNote, =, null, ;, public]
[., newLinkedHashSet, (, ), ;, private, String, productName, =, null, ;, private, String, generatorTarget, =, null, ;, private, String, headerNote]
[;, private, String, generatorTarget, =, null, ;, private, String, headerNote, =, null, ;, public, WhitelistBuilder, setProductName, (, String, name, )]
[;, private, String, headerNote, =, null, ;, public, WhitelistBuilder, setProductName, (, String, name, ), {, this, ., productName, =, name]
[;, public, WhitelistBuilder, setProductName, (, String, name, ), {, this, ., productName, =, name, ;, return, this, ;, }, public]
[=, name, ;, return, this, ;, }, public, WhitelistBuilder, setGeneratorTarget, (, String, name, ), {, this, ., generatorTarget, =, name]
[., productName, =, name, ;, return, this, ;, }, public, WhitelistBuilder, setGeneratorTarget, (, String, name, ), {, this, ., generatorTarget]
[;, return, this, ;, }, public, WhitelistBuilder, setGeneratorTarget, (, String, name, ), {, this, ., generatorTarget, =, name, ;, return]
[;, }, public, WhitelistBuilder, setGeneratorTarget, (, String, name, ), {, this, ., generatorTarget, =, name, ;, return, this, ;, }]
[=, name, ;, return, this, ;, }, public, WhitelistBuilder, setNote, (, String, note, ), {, this, ., headerNote, =, note]
[., generatorTarget, =, name, ;, return, this, ;, }, public, WhitelistBuilder, setNote, (, String, note, ), {, this, ., headerNote]
[;, return, this, ;, }, public, WhitelistBuilder, setNote, (, String, note, ), {, this, ., headerNote, =, note, ;, return]
[;, }, public, WhitelistBuilder, setNote, (, String, note, ), {, this, ., headerNote, =, note, ;, return, this, ;, }]
[=, note, ;, return, this, ;, }, @, Deprecated, public, WhitelistBuilder, setWithLineNumber, (, boolean, line, ), {, return, this, ;]
[., headerNote, =, note, ;, return, this, ;, }, @, Deprecated, public, WhitelistBuilder, setWithLineNumber, (, boolean, line, ), {, return]
[;, return, this, ;, }, @, Deprecated, public, WhitelistBuilder, setWithLineNumber, (, boolean, line, ), {, return, this, ;, }, @]
[;, }, @, Deprecated, public, WhitelistBuilder, setWithLineNumber, (, boolean, line, ), {, return, this, ;, }, @, Override, public, void]
[;, }, @, Override, public, void, report, (, CheckLevel, level, ,, JSError, error, ), {, warnings, ., add, (, error]
[;, }, public, void, writeWhitelist, (, File, out, ), throws, IOException, {, PrintStream, stream, =, new, PrintStream, (, out, )]
[., add, (, error, ), ;, }, public, void, writeWhitelist, (, File, out, ), throws, IOException, {, PrintStream, stream, =]
[), ;, }, public, void, writeWhitelist, (, File, out, ), throws, IOException, {, PrintStream, stream, =, new, PrintStream, (, out]
[;, appendWhitelist, (, stream, ), ;, stream, ., close, (, ), ;, }, public, void, appendWhitelist, (, PrintStream, out, )]
[), ;, appendWhitelist, (, stream, ), ;, stream, ., close, (, ), ;, }, public, void, appendWhitelist, (, PrintStream, out]
[;, stream, ., close, (, ), ;, }, public, void, appendWhitelist, (, PrintStream, out, ), {, out, ., append, (]
[), ;, stream, ., close, (, ), ;, }, public, void, appendWhitelist, (, PrintStream, out, ), {, out, ., append]
[;, }, public, void, appendWhitelist, (, PrintStream, out, ), {, out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName]
[., close, (, ), ;, }, public, void, appendWhitelist, (, PrintStream, out, ), {, out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", )]
[;, if, (, productName, !=, null, ), {, out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n", )]
[., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName, !=, null, ), {, out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for "]
[), ;, if, (, productName, !=, null, ), {, out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n"]
[), {, out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=]
[!=, null, ), {, out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (]
[), {, out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=]
[;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;]
[., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {]
[), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", )]
[+, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +]
[+, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +]
[+, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (]
[+, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +]
[+, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +]
[), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", )]
[), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, )]
[!=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=]
[), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, )]
[;, }, if, (, headerNote, !=, null, ), {, out, ., append, (, "#", +, Joiner, ., on, (, "\n# "]
[., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {, out, .]
[), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (, "#", +, Joiner, ., on, (]
[+, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (, "#", +, Joiner, .]
[+, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (, "#", +]
[+, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (, "#", +, Joiner, .]
[), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (, "#", +, Joiner, ., on, (]
[), {, out, ., append, (, "#", +, Joiner, ., on, (, "\n# ", ), ., join, (, Splitter, ., on]
[!=, null, ), {, out, ., append, (, "#", +, Joiner, ., on, (, "\n# ", ), ., join, (, Splitter]
[), {, out, ., append, (, "#", +, Joiner, ., on, (, "\n# ", ), ., join, (, Splitter, ., on]
[;, }, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =, TreeMultimap, ., create, (, ), ;, for, (, JSError, warning]
[., append, (, "#", +, Joiner, ., on, (, "\n# ", ), ., join, (, Splitter, ., on, (, "\n", )]
[), ;, }, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =, TreeMultimap, ., create, (, ), ;, for, (, JSError]
[+, "\n", ), ;, }, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =, TreeMultimap, ., create, (, ), ;, for]
[+, Joiner, ., on, (, "\n# ", ), ., join, (, Splitter, ., on, (, "\n", ), ., split, (, headerNote]
[+, "\n", ), ;, }, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =, TreeMultimap, ., create, (, ), ;, for]
[., join, (, Splitter, ., on, (, "\n", ), ., split, (, headerNote, ), ), +, "\n", ), ;, }]
[., on, (, "\n# ", ), ., join, (, Splitter, ., on, (, "\n", ), ., split, (, headerNote, ), )]
[), ., join, (, Splitter, ., on, (, "\n", ), ., split, (, headerNote, ), ), +, "\n", ), ;]
[), +, "\n", ), ;, }, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =, TreeMultimap, ., create, (, ), ;]
[., split, (, headerNote, ), ), +, "\n", ), ;, }, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =, TreeMultimap]
[., on, (, "\n", ), ., split, (, headerNote, ), ), +, "\n", ), ;, }, Multimap, <, DiagnosticType, ,]
[), ., split, (, headerNote, ), ), +, "\n", ), ;, }, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =]
[), ), +, "\n", ), ;, }, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =, TreeMultimap, ., create, (, )]
[), ;, }, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =, TreeMultimap, ., create, (, ), ;, for, (, JSError]
[;, for, (, JSError, warning, :, warnings, ), {, warningsByType, ., put, (, warning, ., getType, (, ), ,, formatWarning]
[., create, (, ), ;, for, (, JSError, warning, :, warnings, ), {, warningsByType, ., put, (, warning, ., getType]
[), {, warningsByType, ., put, (, warning, ., getType, (, ), ,, formatWarning, (, warning, ,, true, ), ), ;]
[;, }, for, (, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {, out, ., append, (, "\n# Warning ", )]
[., put, (, warning, ., getType, (, ), ,, formatWarning, (, warning, ,, true, ), ), ;, }, for, (]
[,, formatWarning, (, warning, ,, true, ), ), ;, }, for, (, DiagnosticType, type, :, warningsByType, ., keySet, (, )]
[., getType, (, ), ,, formatWarning, (, warning, ,, true, ), ), ;, }, for, (, DiagnosticType, type, :, warningsByType]
[), ;, }, for, (, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {, out, ., append, (, "\n# Warning "]
[,, true, ), ), ;, }, for, (, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {, out, .]
[), ), ;, }, for, (, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {, out, ., append, (]
[), {, out, ., append, (, "\n# Warning ", ), ., append, (, type, ., key, ), ., append, (, ": ", )]
[., keySet, (, ), ), {, out, ., append, (, "\n# Warning ", ), ., append, (, type, ., key, ), .]
[;, for, (, String, warning, :, warningsByType, ., get, (, type, ), ), {, out, ., println, (, warning, )]
[., println, (, Iterables, ., get, (, LINE_SPLITTER, ., split, (, type, ., format, ., toPattern, (, ), ), ,]
[., append, (, ": ", ), ., println, (, Iterables, ., get, (, LINE_SPLITTER, ., split, (, type, ., format, .]
[., append, (, type, ., key, ), ., append, (, ": ", ), ., println, (, Iterables, ., get, (, LINE_SPLITTER]
[., append, (, "\n# Warning ", ), ., append, (, type, ., key, ), ., append, (, ": ", ), ., println, (]
[), ., append, (, type, ., key, ), ., append, (, ": ", ), ., println, (, Iterables, ., get, (]
[), ., append, (, ": ", ), ., println, (, Iterables, ., get, (, LINE_SPLITTER, ., split, (, type, ., format]
[., key, ), ., append, (, ": ", ), ., println, (, Iterables, ., get, (, LINE_SPLITTER, ., split, (, type]
[), ., println, (, Iterables, ., get, (, LINE_SPLITTER, ., split, (, type, ., format, ., toPattern, (, ), )]
[), ;, for, (, String, warning, :, warningsByType, ., get, (, type, ), ), {, out, ., println, (, warning]
[., get, (, LINE_SPLITTER, ., split, (, type, ., format, ., toPattern, (, ), ), ,, 0, ), ), ;]
[,, 0, ), ), ;, for, (, String, warning, :, warningsByType, ., get, (, type, ), ), {, out, .]
[., split, (, type, ., format, ., toPattern, (, ), ), ,, 0, ), ), ;, for, (, String, warning]
[), ,, 0, ), ), ;, for, (, String, warning, :, warningsByType, ., get, (, type, ), ), {, out]
[., toPattern, (, ), ), ,, 0, ), ), ;, for, (, String, warning, :, warningsByType, ., get, (, type]
[., format, ., toPattern, (, ), ), ,, 0, ), ), ;, for, (, String, warning, :, warningsByType, ., get]
[), ), ;, for, (, String, warning, :, warningsByType, ., get, (, type, ), ), {, out, ., println, (]
[), {, out, ., println, (, warning, ), ;, }, }, out, ., flush, (, ), ;, }, }, }]
[., get, (, type, ), ), {, out, ., println, (, warning, ), ;, }, }, out, ., flush, (]
[), ), {, out, ., println, (, warning, ), ;, }, }, out, ., flush, (, ), ;, }, }]
[;, }, }, out, ., flush, (, ), ;, }, }, }]
[., println, (, warning, ), ;, }, }, out, ., flush, (, ), ;, }, }, }]
[), ;, }, }, out, ., flush, (, ), ;, }, }, }]
[;, }, }, }]
[., flush, (, ), ;, }, }, }]
