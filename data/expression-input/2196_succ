[), {, try, {, return, (, Shape, ), ObjectUtilities, ., clone, (, shape, ), ;, }, catch, (, CloneNotSupportedException, cnse]
[instanceof, Cloneable, ), {, try, {, return, (, Shape, ), ObjectUtilities, ., clone, (, shape, ), ;, }, catch, (]
[;, }, catch, (, CloneNotSupportedException, cnse, ), {, }, }, Shape, result, =, null, ;, return, result, ;, }, public]
[;, }, catch, (, CloneNotSupportedException, cnse, ), {, }, }, Shape, result, =, null, ;, return, result, ;, }, public]
[., clone, (, shape, ), ;, }, catch, (, CloneNotSupportedException, cnse, ), {, }, }, Shape, result, =, null, ;]
[), ;, }, catch, (, CloneNotSupportedException, cnse, ), {, }, }, Shape, result, =, null, ;, return, result, ;, }]
[;, return, result, ;, }, public, static, boolean, equal, (, Shape, s1, ,, Shape, s2, ), {, if, (, s1]
[;, }, public, static, boolean, equal, (, Shape, s1, ,, Shape, s2, ), {, if, (, s1, instanceof, Line2D, &&]
[), {, return, equal, (, (, Line2D, ), s1, ,, (, Line2D, ), s2, ), ;, }, else, if, (]
[&&, s2, instanceof, Line2D, ), {, return, equal, (, (, Line2D, ), s1, ,, (, Line2D, ), s2, ), ;]
[instanceof, Line2D, &&, s2, instanceof, Line2D, ), {, return, equal, (, (, Line2D, ), s1, ,, (, Line2D, ), s2]
[), {, return, equal, (, (, Line2D, ), s1, ,, (, Line2D, ), s2, ), ;, }, else, if, (]
[instanceof, Line2D, ), {, return, equal, (, (, Line2D, ), s1, ,, (, Line2D, ), s2, ), ;, }, else]
[;, }, else, if, (, s1, instanceof, Ellipse2D, &&, s2, instanceof, Ellipse2D, ), {, return, equal, (, (, Ellipse2D, )]
[,, (, Line2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Ellipse2D, &&, s2, instanceof, Ellipse2D, ), {]
[,, (, Line2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Ellipse2D, &&, s2, instanceof, Ellipse2D, ), {]
[), ;, }, else, if, (, s1, instanceof, Ellipse2D, &&, s2, instanceof, Ellipse2D, ), {, return, equal, (, (, Ellipse2D]
[), ;, }, else, if, (, s1, instanceof, Ellipse2D, &&, s2, instanceof, Ellipse2D, ), {, return, equal, (, (, Ellipse2D]
[), {, return, equal, (, (, Ellipse2D, ), s1, ,, (, Ellipse2D, ), s2, ), ;, }, else, if, (]
[&&, s2, instanceof, Ellipse2D, ), {, return, equal, (, (, Ellipse2D, ), s1, ,, (, Ellipse2D, ), s2, ), ;]
[instanceof, Ellipse2D, &&, s2, instanceof, Ellipse2D, ), {, return, equal, (, (, Ellipse2D, ), s1, ,, (, Ellipse2D, ), s2]
[), {, return, equal, (, (, Ellipse2D, ), s1, ,, (, Ellipse2D, ), s2, ), ;, }, else, if, (]
[instanceof, Ellipse2D, ), {, return, equal, (, (, Ellipse2D, ), s1, ,, (, Ellipse2D, ), s2, ), ;, }, else]
[;, }, else, if, (, s1, instanceof, Arc2D, &&, s2, instanceof, Arc2D, ), {, return, equal, (, (, Arc2D, )]
[,, (, Ellipse2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Arc2D, &&, s2, instanceof, Arc2D, ), {]
[,, (, Ellipse2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Arc2D, &&, s2, instanceof, Arc2D, ), {]
[), ;, }, else, if, (, s1, instanceof, Arc2D, &&, s2, instanceof, Arc2D, ), {, return, equal, (, (, Arc2D]
[), ;, }, else, if, (, s1, instanceof, Arc2D, &&, s2, instanceof, Arc2D, ), {, return, equal, (, (, Arc2D]
[), {, return, equal, (, (, Arc2D, ), s1, ,, (, Arc2D, ), s2, ), ;, }, else, if, (]
[&&, s2, instanceof, Arc2D, ), {, return, equal, (, (, Arc2D, ), s1, ,, (, Arc2D, ), s2, ), ;]
[instanceof, Arc2D, &&, s2, instanceof, Arc2D, ), {, return, equal, (, (, Arc2D, ), s1, ,, (, Arc2D, ), s2]
[), {, return, equal, (, (, Arc2D, ), s1, ,, (, Arc2D, ), s2, ), ;, }, else, if, (]
[instanceof, Arc2D, ), {, return, equal, (, (, Arc2D, ), s1, ,, (, Arc2D, ), s2, ), ;, }, else]
[;, }, else, if, (, s1, instanceof, Polygon, &&, s2, instanceof, Polygon, ), {, return, equal, (, (, Polygon, )]
[,, (, Arc2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Polygon, &&, s2, instanceof, Polygon, ), {]
[,, (, Arc2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Polygon, &&, s2, instanceof, Polygon, ), {]
[), ;, }, else, if, (, s1, instanceof, Polygon, &&, s2, instanceof, Polygon, ), {, return, equal, (, (, Polygon]
[), ;, }, else, if, (, s1, instanceof, Polygon, &&, s2, instanceof, Polygon, ), {, return, equal, (, (, Polygon]
[), {, return, equal, (, (, Polygon, ), s1, ,, (, Polygon, ), s2, ), ;, }, else, if, (]
[&&, s2, instanceof, Polygon, ), {, return, equal, (, (, Polygon, ), s1, ,, (, Polygon, ), s2, ), ;]
[instanceof, Polygon, &&, s2, instanceof, Polygon, ), {, return, equal, (, (, Polygon, ), s1, ,, (, Polygon, ), s2]
[), {, return, equal, (, (, Polygon, ), s1, ,, (, Polygon, ), s2, ), ;, }, else, if, (]
[instanceof, Polygon, ), {, return, equal, (, (, Polygon, ), s1, ,, (, Polygon, ), s2, ), ;, }, else]
[;, }, else, if, (, s1, instanceof, GeneralPath, &&, s2, instanceof, GeneralPath, ), {, return, equal, (, (, GeneralPath, )]
[,, (, Polygon, ), s2, ), ;, }, else, if, (, s1, instanceof, GeneralPath, &&, s2, instanceof, GeneralPath, ), {]
[,, (, Polygon, ), s2, ), ;, }, else, if, (, s1, instanceof, GeneralPath, &&, s2, instanceof, GeneralPath, ), {]
[), ;, }, else, if, (, s1, instanceof, GeneralPath, &&, s2, instanceof, GeneralPath, ), {, return, equal, (, (, GeneralPath]
[), ;, }, else, if, (, s1, instanceof, GeneralPath, &&, s2, instanceof, GeneralPath, ), {, return, equal, (, (, GeneralPath]
[), {, return, equal, (, (, GeneralPath, ), s1, ,, (, GeneralPath, ), s2, ), ;, }, else, {, return]
[&&, s2, instanceof, GeneralPath, ), {, return, equal, (, (, GeneralPath, ), s1, ,, (, GeneralPath, ), s2, ), ;]
[instanceof, GeneralPath, &&, s2, instanceof, GeneralPath, ), {, return, equal, (, (, GeneralPath, ), s1, ,, (, GeneralPath, ), s2]
[), {, return, equal, (, (, GeneralPath, ), s1, ,, (, GeneralPath, ), s2, ), ;, }, else, {, return]
[instanceof, GeneralPath, ), {, return, equal, (, (, GeneralPath, ), s1, ,, (, GeneralPath, ), s2, ), ;, }, else]
[;, }, else, {, return, ObjectUtilities, ., equal, (, s1, ,, s2, ), ;, }, }, public, static, boolean, equal]
[,, (, GeneralPath, ), s2, ), ;, }, else, {, return, ObjectUtilities, ., equal, (, s1, ,, s2, ), ;]
[,, (, GeneralPath, ), s2, ), ;, }, else, {, return, ObjectUtilities, ., equal, (, s1, ,, s2, ), ;]
[), ;, }, else, {, return, ObjectUtilities, ., equal, (, s1, ,, s2, ), ;, }, }, public, static, boolean]
[), ;, }, else, {, return, ObjectUtilities, ., equal, (, s1, ,, s2, ), ;, }, }, public, static, boolean]
[;, }, }, public, static, boolean, equal, (, Line2D, l1, ,, Line2D, l2, ), {, if, (, l1, ==, null]
[., equal, (, s1, ,, s2, ), ;, }, }, public, static, boolean, equal, (, Line2D, l1, ,, Line2D, l2]
[,, s2, ), ;, }, }, public, static, boolean, equal, (, Line2D, l1, ,, Line2D, l2, ), {, if, (]
[), ;, }, }, public, static, boolean, equal, (, Line2D, l1, ,, Line2D, l2, ), {, if, (, l1, ==]
[), {, return, (, l2, ==, null, ), ;, }, if, (, l2, ==, null, ), {, return, false, ;]
[==, null, ), {, return, (, l2, ==, null, ), ;, }, if, (, l2, ==, null, ), {, return]
[), {, return, (, l2, ==, null, ), ;, }, if, (, l2, ==, null, ), {, return, false, ;]
[;, }, if, (, l2, ==, null, ), {, return, false, ;, }, if, (, !, l1, ., getP1, (]
[), ;, }, if, (, l2, ==, null, ), {, return, false, ;, }, if, (, !, l1, ., getP1]
[==, null, ), ;, }, if, (, l2, ==, null, ), {, return, false, ;, }, if, (, !, l1]
[), ;, }, if, (, l2, ==, null, ), {, return, false, ;, }, if, (, !, l1, ., getP1]
[), {, return, false, ;, }, if, (, !, l1, ., getP1, (, ), ., equals, (, l2, ., getP1]
[==, null, ), {, return, false, ;, }, if, (, !, l1, ., getP1, (, ), ., equals, (, l2]
[), {, return, false, ;, }, if, (, !, l1, ., getP1, (, ), ., equals, (, l2, ., getP1]
[;, }, if, (, !, l1, ., getP1, (, ), ., equals, (, l2, ., getP1, (, ), ), )]
[), {, return, false, ;, }, if, (, !, l1, ., getP2, (, ), ., equals, (, l2, ., getP2]
[), {, return, false, ;, }, if, (, !, l1, ., getP2, (, ), ., equals, (, l2, ., getP2]
[., equals, (, l2, ., getP1, (, ), ), ), {, return, false, ;, }, if, (, !, l1, .]
[., getP1, (, ), ., equals, (, l2, ., getP1, (, ), ), ), {, return, false, ;, }, if]
[), ), {, return, false, ;, }, if, (, !, l1, ., getP2, (, ), ., equals, (, l2, .]
[., getP1, (, ), ), ), {, return, false, ;, }, if, (, !, l1, ., getP2, (, ), .]
[;, }, if, (, !, l1, ., getP2, (, ), ., equals, (, l2, ., getP2, (, ), ), )]
[), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, Ellipse2D, e1, ,, Ellipse2D, e2]
[), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, Ellipse2D, e1, ,, Ellipse2D, e2]
[., equals, (, l2, ., getP2, (, ), ), ), {, return, false, ;, }, return, true, ;, }, public]
[., getP2, (, ), ., equals, (, l2, ., getP2, (, ), ), ), {, return, false, ;, }, return]
[), ), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, Ellipse2D, e1, ,, Ellipse2D]
[., getP2, (, ), ), ), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (]
[;, }, return, true, ;, }, public, static, boolean, equal, (, Ellipse2D, e1, ,, Ellipse2D, e2, ), {, if, (]
[;, }, public, static, boolean, equal, (, Ellipse2D, e1, ,, Ellipse2D, e2, ), {, if, (, e1, ==, null, )]
[), {, return, (, e2, ==, null, ), ;, }, if, (, e2, ==, null, ), {, return, false, ;]
[==, null, ), {, return, (, e2, ==, null, ), ;, }, if, (, e2, ==, null, ), {, return]
[), {, return, (, e2, ==, null, ), ;, }, if, (, e2, ==, null, ), {, return, false, ;]
[;, }, if, (, e2, ==, null, ), {, return, false, ;, }, if, (, !, e1, ., getFrame, (]
[), ;, }, if, (, e2, ==, null, ), {, return, false, ;, }, if, (, !, e1, ., getFrame]
[==, null, ), ;, }, if, (, e2, ==, null, ), {, return, false, ;, }, if, (, !, e1]
[), ;, }, if, (, e2, ==, null, ), {, return, false, ;, }, if, (, !, e1, ., getFrame]
[), {, return, false, ;, }, if, (, !, e1, ., getFrame, (, ), ., equals, (, e2, ., getFrame]
[==, null, ), {, return, false, ;, }, if, (, !, e1, ., getFrame, (, ), ., equals, (, e2]
[), {, return, false, ;, }, if, (, !, e1, ., getFrame, (, ), ., equals, (, e2, ., getFrame]
[;, }, if, (, !, e1, ., getFrame, (, ), ., equals, (, e2, ., getFrame, (, ), ), )]
[), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, Arc2D, a1, ,, Arc2D, a2]
[), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, Arc2D, a1, ,, Arc2D, a2]
[., equals, (, e2, ., getFrame, (, ), ), ), {, return, false, ;, }, return, true, ;, }, public]
[., getFrame, (, ), ., equals, (, e2, ., getFrame, (, ), ), ), {, return, false, ;, }, return]
[), ), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, Arc2D, a1, ,, Arc2D]
[., getFrame, (, ), ), ), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (]
[;, }, return, true, ;, }, public, static, boolean, equal, (, Arc2D, a1, ,, Arc2D, a2, ), {, if, (]
[;, }, public, static, boolean, equal, (, Arc2D, a1, ,, Arc2D, a2, ), {, if, (, a1, ==, null, )]
[), {, return, (, a2, ==, null, ), ;, }, if, (, a2, ==, null, ), {, return, false, ;]
[==, null, ), {, return, (, a2, ==, null, ), ;, }, if, (, a2, ==, null, ), {, return]
[), {, return, (, a2, ==, null, ), ;, }, if, (, a2, ==, null, ), {, return, false, ;]
[;, }, if, (, a2, ==, null, ), {, return, false, ;, }, if, (, !, a1, ., getFrame, (]
[), ;, }, if, (, a2, ==, null, ), {, return, false, ;, }, if, (, !, a1, ., getFrame]
[==, null, ), ;, }, if, (, a2, ==, null, ), {, return, false, ;, }, if, (, !, a1]
[), ;, }, if, (, a2, ==, null, ), {, return, false, ;, }, if, (, !, a1, ., getFrame]
[), {, return, false, ;, }, if, (, !, a1, ., getFrame, (, ), ., equals, (, a2, ., getFrame]
[==, null, ), {, return, false, ;, }, if, (, !, a1, ., getFrame, (, ), ., equals, (, a2]
[), {, return, false, ;, }, if, (, !, a1, ., getFrame, (, ), ., equals, (, a2, ., getFrame]
[;, }, if, (, !, a1, ., getFrame, (, ), ., equals, (, a2, ., getFrame, (, ), ), )]
[), {, return, false, ;, }, if, (, a1, ., getAngleStart, (, ), !=, a2, ., getAngleStart, (, ), )]
[), {, return, false, ;, }, if, (, a1, ., getAngleStart, (, ), !=, a2, ., getAngleStart, (, ), )]
[., equals, (, a2, ., getFrame, (, ), ), ), {, return, false, ;, }, if, (, a1, ., getAngleStart]
[., getFrame, (, ), ., equals, (, a2, ., getFrame, (, ), ), ), {, return, false, ;, }, if]
[), ), {, return, false, ;, }, if, (, a1, ., getAngleStart, (, ), !=, a2, ., getAngleStart, (, )]
[., getFrame, (, ), ), ), {, return, false, ;, }, if, (, a1, ., getAngleStart, (, ), !=, a2]
[;, }, if, (, a1, ., getAngleStart, (, ), !=, a2, ., getAngleStart, (, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, a1, ., getAngleExtent, (, ), !=, a2, ., getAngleExtent, (, ), )]
[!=, a2, ., getAngleStart, (, ), ), {, return, false, ;, }, if, (, a1, ., getAngleExtent, (, ), !=]
[., getAngleStart, (, ), !=, a2, ., getAngleStart, (, ), ), {, return, false, ;, }, if, (, a1, .]
[), {, return, false, ;, }, if, (, a1, ., getAngleExtent, (, ), !=, a2, ., getAngleExtent, (, ), )]
[., getAngleStart, (, ), ), {, return, false, ;, }, if, (, a1, ., getAngleExtent, (, ), !=, a2, .]
[;, }, if, (, a1, ., getAngleExtent, (, ), !=, a2, ., getAngleExtent, (, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, a1, ., getArcType, (, ), !=, a2, ., getArcType, (, ), )]
[!=, a2, ., getAngleExtent, (, ), ), {, return, false, ;, }, if, (, a1, ., getArcType, (, ), !=]
[., getAngleExtent, (, ), !=, a2, ., getAngleExtent, (, ), ), {, return, false, ;, }, if, (, a1, .]
[), {, return, false, ;, }, if, (, a1, ., getArcType, (, ), !=, a2, ., getArcType, (, ), )]
[., getAngleExtent, (, ), ), {, return, false, ;, }, if, (, a1, ., getArcType, (, ), !=, a2, .]
[;, }, if, (, a1, ., getArcType, (, ), !=, a2, ., getArcType, (, ), ), {, return, false, ;]
[), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, Polygon, p1, ,, Polygon, p2]
[!=, a2, ., getArcType, (, ), ), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal]
[., getArcType, (, ), !=, a2, ., getArcType, (, ), ), {, return, false, ;, }, return, true, ;, }]
[), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, Polygon, p1, ,, Polygon, p2]
[., getArcType, (, ), ), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, Polygon]
[;, }, return, true, ;, }, public, static, boolean, equal, (, Polygon, p1, ,, Polygon, p2, ), {, if, (]
[;, }, public, static, boolean, equal, (, Polygon, p1, ,, Polygon, p2, ), {, if, (, p1, ==, null, )]
[), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;]
[==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return]
[), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;]
[;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, ., npoints, !=, p2]
[), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, ., npoints, !=]
[==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, .]
[), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, ., npoints, !=]
[), {, return, false, ;, }, if, (, p1, ., npoints, !=, p2, ., npoints, ), {, return, false, ;]
[==, null, ), {, return, false, ;, }, if, (, p1, ., npoints, !=, p2, ., npoints, ), {, return]
[), {, return, false, ;, }, if, (, p1, ., npoints, !=, p2, ., npoints, ), {, return, false, ;]
[;, }, if, (, p1, ., npoints, !=, p2, ., npoints, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., xpoints, ,, p2, ., xpoints]
[!=, p2, ., npoints, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., xpoints]
[., npoints, !=, p2, ., npoints, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1]
[), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., xpoints, ,, p2, ., xpoints]
[., npoints, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., xpoints, ,, p2]
[;, }, if, (, !, Arrays, ., equals, (, p1, ., xpoints, ,, p2, ., xpoints, ), ), {, return]
[), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., ypoints, ,, p2, ., ypoints]
[), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., ypoints, ,, p2, ., ypoints]
[., equals, (, p1, ., xpoints, ,, p2, ., xpoints, ), ), {, return, false, ;, }, if, (, !]
[,, p2, ., xpoints, ), ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, .]
[., xpoints, ,, p2, ., xpoints, ), ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (]
[), ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., ypoints, ,, p2, .]
[., xpoints, ), ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., ypoints, ,]
[;, }, if, (, !, Arrays, ., equals, (, p1, ., ypoints, ,, p2, ., ypoints, ), ), {, return]
[), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, GeneralPath, p1, ,, GeneralPath, p2]
[), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, GeneralPath, p1, ,, GeneralPath, p2]
[., equals, (, p1, ., ypoints, ,, p2, ., ypoints, ), ), {, return, false, ;, }, return, true, ;]
[,, p2, ., ypoints, ), ), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (]
[., ypoints, ,, p2, ., ypoints, ), ), {, return, false, ;, }, return, true, ;, }, public, static, boolean]
[), ), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, GeneralPath, p1, ,, GeneralPath]
[., ypoints, ), ), {, return, false, ;, }, return, true, ;, }, public, static, boolean, equal, (, GeneralPath, p1]
[;, }, return, true, ;, }, public, static, boolean, equal, (, GeneralPath, p1, ,, GeneralPath, p2, ), {, if, (]
[;, }, public, static, boolean, equal, (, GeneralPath, p1, ,, GeneralPath, p2, ), {, if, (, p1, ==, null, )]
[), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;]
[==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return]
[), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;]
[;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, ., getWindingRule, (, )]
[), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, ., getWindingRule, (]
[==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, .]
[), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, ., getWindingRule, (]
[), {, return, false, ;, }, if, (, p1, ., getWindingRule, (, ), !=, p2, ., getWindingRule, (, ), )]
[==, null, ), {, return, false, ;, }, if, (, p1, ., getWindingRule, (, ), !=, p2, ., getWindingRule, (]
[), {, return, false, ;, }, if, (, p1, ., getWindingRule, (, ), !=, p2, ., getWindingRule, (, ), )]
[;, }, if, (, p1, ., getWindingRule, (, ), !=, p2, ., getWindingRule, (, ), ), {, return, false, ;]
[), {, return, false, ;, }, PathIterator, iterator1, =, p1, ., getPathIterator, (, null, ), ;, PathIterator, iterator2, =, p2]
[!=, p2, ., getWindingRule, (, ), ), {, return, false, ;, }, PathIterator, iterator1, =, p1, ., getPathIterator, (, null]
[., getWindingRule, (, ), !=, p2, ., getWindingRule, (, ), ), {, return, false, ;, }, PathIterator, iterator1, =, p1]
[), {, return, false, ;, }, PathIterator, iterator1, =, p1, ., getPathIterator, (, null, ), ;, PathIterator, iterator2, =, p2]
[., getWindingRule, (, ), ), {, return, false, ;, }, PathIterator, iterator1, =, p1, ., getPathIterator, (, null, ), ;]
[;, }, PathIterator, iterator1, =, p1, ., getPathIterator, (, null, ), ;, PathIterator, iterator2, =, p2, ., getPathIterator, (, null]
[;, PathIterator, iterator2, =, p2, ., getPathIterator, (, null, ), ;, double, [, ], d1, =, new, double, [, 6]
[., getPathIterator, (, null, ), ;, PathIterator, iterator2, =, p2, ., getPathIterator, (, null, ), ;, double, [, ], d1]
[), ;, PathIterator, iterator2, =, p2, ., getPathIterator, (, null, ), ;, double, [, ], d1, =, new, double, []
[;, double, [, ], d1, =, new, double, [, 6, ], ;, double, [, ], d2, =, new, double, []
[., getPathIterator, (, null, ), ;, double, [, ], d1, =, new, double, [, 6, ], ;, double, [, ]]
[), ;, double, [, ], d1, =, new, double, [, 6, ], ;, double, [, ], d2, =, new, double]
[;, double, [, ], d2, =, new, double, [, 6, ], ;, boolean, done, =, iterator1, ., isDone, (, )]
[], ;, double, [, ], d2, =, new, double, [, 6, ], ;, boolean, done, =, iterator1, ., isDone, (]
[;, boolean, done, =, iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, while, (, !, done]
[], ;, boolean, done, =, iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, while, (, !]
[;, while, (, !, done, ), {, if, (, iterator1, ., isDone, (, ), !=, iterator2, ., isDone, (, )]
[&&, iterator2, ., isDone, (, ), ;, while, (, !, done, ), {, if, (, iterator1, ., isDone, (, )]
[., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, while, (, !, done, ), {, if, (, iterator1]
[;, while, (, !, done, ), {, if, (, iterator1, ., isDone, (, ), !=, iterator2, ., isDone, (, )]
[., isDone, (, ), ;, while, (, !, done, ), {, if, (, iterator1, ., isDone, (, ), !=, iterator2]
[), {, if, (, iterator1, ., isDone, (, ), !=, iterator2, ., isDone, (, ), ), {, return, false, ;]
[), {, if, (, iterator1, ., isDone, (, ), !=, iterator2, ., isDone, (, ), ), {, return, false, ;]
[), {, return, false, ;, }, int, seg1, =, iterator1, ., currentSegment, (, d1, ), ;, int, seg2, =, iterator2]
[!=, iterator2, ., isDone, (, ), ), {, return, false, ;, }, int, seg1, =, iterator1, ., currentSegment, (, d1]
[., isDone, (, ), !=, iterator2, ., isDone, (, ), ), {, return, false, ;, }, int, seg1, =, iterator1]
[), {, return, false, ;, }, int, seg1, =, iterator1, ., currentSegment, (, d1, ), ;, int, seg2, =, iterator2]
[., isDone, (, ), ), {, return, false, ;, }, int, seg1, =, iterator1, ., currentSegment, (, d1, ), ;]
[;, }, int, seg1, =, iterator1, ., currentSegment, (, d1, ), ;, int, seg2, =, iterator2, ., currentSegment, (, d2]
[;, int, seg2, =, iterator2, ., currentSegment, (, d2, ), ;, if, (, seg1, !=, seg2, ), {, return, false]
[., currentSegment, (, d1, ), ;, int, seg2, =, iterator2, ., currentSegment, (, d2, ), ;, if, (, seg1, !=]
[), ;, int, seg2, =, iterator2, ., currentSegment, (, d2, ), ;, if, (, seg1, !=, seg2, ), {, return]
[;, if, (, seg1, !=, seg2, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, d1]
[., currentSegment, (, d2, ), ;, if, (, seg1, !=, seg2, ), {, return, false, ;, }, if, (, !]
[), ;, if, (, seg1, !=, seg2, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (]
[), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, d1, ,, d2, ), ), {, return]
[!=, seg2, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, d1, ,, d2, ), )]
[), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, d1, ,, d2, ), ), {, return]
[;, }, if, (, !, Arrays, ., equals, (, d1, ,, d2, ), ), {, return, false, ;, }, iterator1]
[), {, return, false, ;, }, iterator1, ., next, (, ), ;, iterator2, ., next, (, ), ;, done, =]
[), {, return, false, ;, }, iterator1, ., next, (, ), ;, iterator2, ., next, (, ), ;, done, =]
[., equals, (, d1, ,, d2, ), ), {, return, false, ;, }, iterator1, ., next, (, ), ;, iterator2]
[,, d2, ), ), {, return, false, ;, }, iterator1, ., next, (, ), ;, iterator2, ., next, (, )]
[), ), {, return, false, ;, }, iterator1, ., next, (, ), ;, iterator2, ., next, (, ), ;, done]
[;, }, iterator1, ., next, (, ), ;, iterator2, ., next, (, ), ;, done, =, iterator1, ., isDone, (]
[;, iterator2, ., next, (, ), ;, done, =, iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, )]
[., next, (, ), ;, iterator2, ., next, (, ), ;, done, =, iterator1, ., isDone, (, ), &&, iterator2]
[;, done, =, iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, }, return, true, ;, }]
[., next, (, ), ;, done, =, iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, }]
[=, iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, }, return, true, ;, }, public, static]
[;, }, return, true, ;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, double, transX, ,, double, transY, )]
[&&, iterator2, ., isDone, (, ), ;, }, return, true, ;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,]
[., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, }, return, true, ;, }, public, static, Shape, createTranslatedShape]
[;, }, return, true, ;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, double, transX, ,, double, transY, )]
[., isDone, (, ), ;, }, return, true, ;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, double, transX]
[;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, double, transX, ,, double, transY, ), {, if, (, shape]
[), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, transX, ,, transY]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, transX]
[), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, transX, ,, transY]
[;, }, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, transX, ,, transY, ), ;, return, transform, ., createTransformedShape, (, shape]
[), ;, }, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, transX, ,, transY, ), ;, return, transform, ., createTransformedShape, (]
[;, return, transform, ., createTransformedShape, (, shape, ), ;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, RectangleAnchor, anchor]
[., getTranslateInstance, (, transX, ,, transY, ), ;, return, transform, ., createTransformedShape, (, shape, ), ;, }, public, static, Shape]
[,, transY, ), ;, return, transform, ., createTransformedShape, (, shape, ), ;, }, public, static, Shape, createTranslatedShape, (, Shape, shape]
[), ;, return, transform, ., createTransformedShape, (, shape, ), ;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, RectangleAnchor]
[;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, RectangleAnchor, anchor, ,, double, locationX, ,, double, locationY, ), {]
[., createTransformedShape, (, shape, ), ;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, RectangleAnchor, anchor, ,, double, locationX]
[), ;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, RectangleAnchor, anchor, ,, double, locationX, ,, double, locationY, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, if, (, anchor, ==, null, ), {, throw, new, IllegalArgumentException]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, if, (, anchor, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, if, (, anchor, ==, null, ), {, throw, new, IllegalArgumentException]
[;, }, if, (, anchor, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'anchor' argument.", ), ;, }, Point2D, anchorPoint, =]
[), ;, }, if, (, anchor, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'anchor' argument.", ), ;, }, Point2D, anchorPoint]
[), {, throw, new, IllegalArgumentException, (, "Null 'anchor' argument.", ), ;, }, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, shape, ., getBounds2D]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'anchor' argument.", ), ;, }, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, shape]
[), {, throw, new, IllegalArgumentException, (, "Null 'anchor' argument.", ), ;, }, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, shape, ., getBounds2D]
[;, }, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, shape, ., getBounds2D, (, ), ,, anchor, ), ;, AffineTransform, transform]
[), ;, }, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, shape, ., getBounds2D, (, ), ,, anchor, ), ;, AffineTransform]
[;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, locationX, -, anchorPoint, ., getX, (, ), ,, locationY, -, anchorPoint, .]
[., coordinates, (, shape, ., getBounds2D, (, ), ,, anchor, ), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, locationX]
[,, anchor, ), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, locationX, -, anchorPoint, ., getX, (, ), ,, locationY]
[., getBounds2D, (, ), ,, anchor, ), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, locationX, -, anchorPoint, ., getX]
[), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, locationX, -, anchorPoint, ., getX, (, ), ,, locationY, -, anchorPoint]
[;, return, transform, ., createTransformedShape, (, shape, ), ;, }, public, static, Shape, rotateShape, (, Shape, base, ,, double, angle]
[., getTranslateInstance, (, locationX, -, anchorPoint, ., getX, (, ), ,, locationY, -, anchorPoint, ., getY, (, ), ), ;]
[,, locationY, -, anchorPoint, ., getY, (, ), ), ;, return, transform, ., createTransformedShape, (, shape, ), ;, }, public]
[-, anchorPoint, ., getX, (, ), ,, locationY, -, anchorPoint, ., getY, (, ), ), ;, return, transform, ., createTransformedShape]
[,, locationY, -, anchorPoint, ., getY, (, ), ), ;, return, transform, ., createTransformedShape, (, shape, ), ;, }, public]
[., getX, (, ), ,, locationY, -, anchorPoint, ., getY, (, ), ), ;, return, transform, ., createTransformedShape, (, shape]
[), ;, return, transform, ., createTransformedShape, (, shape, ), ;, }, public, static, Shape, rotateShape, (, Shape, base, ,, double]
[-, anchorPoint, ., getY, (, ), ), ;, return, transform, ., createTransformedShape, (, shape, ), ;, }, public, static, Shape]
[), ;, return, transform, ., createTransformedShape, (, shape, ), ;, }, public, static, Shape, rotateShape, (, Shape, base, ,, double]
[., getY, (, ), ), ;, return, transform, ., createTransformedShape, (, shape, ), ;, }, public, static, Shape, rotateShape, (]
[;, }, public, static, Shape, rotateShape, (, Shape, base, ,, double, angle, ,, float, x, ,, float, y, ), {]
[., createTransformedShape, (, shape, ), ;, }, public, static, Shape, rotateShape, (, Shape, base, ,, double, angle, ,, float, x]
[), ;, }, public, static, Shape, rotateShape, (, Shape, base, ,, double, angle, ,, float, x, ,, float, y, )]
[), {, return, null, ;, }, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;]
[==, null, ), {, return, null, ;, }, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y]
[), {, return, null, ;, }, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;]
[;, }, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;, Shape, result, =, rotate]
[;, Shape, result, =, rotate, ., createTransformedShape, (, base, ), ;, return, result, ;, }, public, static, void, drawRotatedShape, (]
[., getRotateInstance, (, angle, ,, x, ,, y, ), ;, Shape, result, =, rotate, ., createTransformedShape, (, base, ), ;]
[,, x, ,, y, ), ;, Shape, result, =, rotate, ., createTransformedShape, (, base, ), ;, return, result, ;, }]
[,, y, ), ;, Shape, result, =, rotate, ., createTransformedShape, (, base, ), ;, return, result, ;, }, public, static]
[), ;, Shape, result, =, rotate, ., createTransformedShape, (, base, ), ;, return, result, ;, }, public, static, void, drawRotatedShape]
[;, return, result, ;, }, public, static, void, drawRotatedShape, (, Graphics2D, g2, ,, Shape, shape, ,, double, angle, ,, float]
[., createTransformedShape, (, base, ), ;, return, result, ;, }, public, static, void, drawRotatedShape, (, Graphics2D, g2, ,, Shape, shape]
[), ;, return, result, ;, }, public, static, void, drawRotatedShape, (, Graphics2D, g2, ,, Shape, shape, ,, double, angle, ,]
[;, }, public, static, void, drawRotatedShape, (, Graphics2D, g2, ,, Shape, shape, ,, double, angle, ,, float, x, ,, float]
[;, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;, g2, ., transform, (, rotate]
[., getTransform, (, ), ;, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;, g2]
[;, g2, ., transform, (, rotate, ), ;, g2, ., draw, (, shape, ), ;, g2, ., setTransform, (, saved]
[., getRotateInstance, (, angle, ,, x, ,, y, ), ;, g2, ., transform, (, rotate, ), ;, g2, ., draw]
[,, x, ,, y, ), ;, g2, ., transform, (, rotate, ), ;, g2, ., draw, (, shape, ), ;]
[,, y, ), ;, g2, ., transform, (, rotate, ), ;, g2, ., draw, (, shape, ), ;, g2, .]
[), ;, g2, ., transform, (, rotate, ), ;, g2, ., draw, (, shape, ), ;, g2, ., setTransform, (]
[;, g2, ., draw, (, shape, ), ;, g2, ., setTransform, (, saved, ), ;, }, private, static, final, float]
[., transform, (, rotate, ), ;, g2, ., draw, (, shape, ), ;, g2, ., setTransform, (, saved, ), ;]
[), ;, g2, ., draw, (, shape, ), ;, g2, ., setTransform, (, saved, ), ;, }, private, static, final]
[;, g2, ., setTransform, (, saved, ), ;, }, private, static, final, float, SQRT2, =, (, float, ), Math, .]
[., draw, (, shape, ), ;, g2, ., setTransform, (, saved, ), ;, }, private, static, final, float, SQRT2, =]
[), ;, g2, ., setTransform, (, saved, ), ;, }, private, static, final, float, SQRT2, =, (, float, ), Math]
[;, }, private, static, final, float, SQRT2, =, (, float, ), Math, ., pow, (, 2.0, ,, 0.5, ), ;]
[., setTransform, (, saved, ), ;, }, private, static, final, float, SQRT2, =, (, float, ), Math, ., pow, (]
[), ;, }, private, static, final, float, SQRT2, =, (, float, ), Math, ., pow, (, 2.0, ,, 0.5, )]
[;, public, static, Shape, createDiagonalCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, )]
[;, public, static, Shape, createDiagonalCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, )]
[., pow, (, 2.0, ,, 0.5, ), ;, public, static, Shape, createDiagonalCross, (, float, l, ,, float, t, ), {]
[,, 0.5, ), ;, public, static, Shape, createDiagonalCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =, new]
[), ;, public, static, Shape, createDiagonalCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (]
[;, p0, ., moveTo, (, -, l, -, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (]
[;, p0, ., lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (]
[., moveTo, (, -, l, -, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, -, l]
[,, -, l, +, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,, -, l, -, t]
[-, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,, -, l]
[-, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,, -, l]
[,, -, l, +, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,, -, l, -, t]
[), ;, p0, ., lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;, p0, ., lineTo]
[+, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;, p0]
[+, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;, p0]
[), ;, p0, ., lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;, p0, ., lineTo]
[;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -, t]
[., lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, 0.0f, ,]
[,, -, l, -, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0]
[+, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, )]
[+, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, )]
[,, -, l, -, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0]
[), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -]
[-, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (]
[-, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (]
[), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -]
[;, p0, ., lineTo, (, l, -, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, l]
[., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -, t, ,, -]
[,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -, t, ,, -, l, -, t, )]
[), ;, p0, ., lineTo, (, l, -, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (]
[*, SQRT2, ), ;, p0, ., lineTo, (, l, -, t, ,, -, l, -, t, ), ;, p0, .]
[*, SQRT2, ), ;, p0, ., lineTo, (, l, -, t, ,, -, l, -, t, ), ;, p0, .]
[), ;, p0, ., lineTo, (, l, -, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (]
[;, p0, ., lineTo, (, l, +, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, t]
[., lineTo, (, l, -, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, l, +, t]
[,, -, l, -, t, ), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +, t, )]
[-, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +]
[,, -, l, -, t, ), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +, t, )]
[), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (]
[-, t, ), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +, t, ), ;, p0, .]
[-, t, ), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +, t, ), ;, p0, .]
[), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (]
[;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,]
[., lineTo, (, l, +, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, t, *, SQRT2]
[,, -, l, +, t, ), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, .]
[+, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;]
[,, -, l, +, t, ), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, .]
[), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t]
[+, t, ), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l]
[+, t, ), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l]
[), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t]
[;, p0, ., lineTo, (, l, +, t, ,, l, -, t, ), ;, p0, ., lineTo, (, l, -]
[., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,, l, -]
[,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,, l, -, t, ), ;, p0, ., lineTo]
[*, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,, l, -, t, ), ;, p0]
[,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,, l, -, t, ), ;, p0, ., lineTo]
[), ;, p0, ., lineTo, (, l, +, t, ,, l, -, t, ), ;, p0, ., lineTo, (, l]
[;, p0, ., lineTo, (, l, -, t, ,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,]
[., lineTo, (, l, +, t, ,, l, -, t, ), ;, p0, ., lineTo, (, l, -, t, ,]
[,, l, -, t, ), ;, p0, ., lineTo, (, l, -, t, ,, l, +, t, ), ;, p0]
[+, t, ,, l, -, t, ), ;, p0, ., lineTo, (, l, -, t, ,, l, +, t, )]
[,, l, -, t, ), ;, p0, ., lineTo, (, l, -, t, ,, l, +, t, ), ;, p0]
[), ;, p0, ., lineTo, (, l, -, t, ,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f]
[-, t, ), ;, p0, ., lineTo, (, l, -, t, ,, l, +, t, ), ;, p0, ., lineTo]
[), ;, p0, ., lineTo, (, l, -, t, ,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f]
[;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -, l, +, t]
[., lineTo, (, l, -, t, ,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,, t, *]
[,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo]
[-, t, ,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0]
[,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo]
[), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -, l, +]
[+, t, ), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -]
[), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -, l, +]
[;, p0, ., lineTo, (, -, l, +, t, ,, l, +, t, ), ;, p0, ., lineTo, (, -]
[., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -, l, +, t, ,, l]
[,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -, l, +, t, ,, l, +, t, ), ;]
[), ;, p0, ., lineTo, (, -, l, +, t, ,, l, +, t, ), ;, p0, ., lineTo, (]
[*, SQRT2, ), ;, p0, ., lineTo, (, -, l, +, t, ,, l, +, t, ), ;, p0, .]
[), ;, p0, ., lineTo, (, -, l, +, t, ,, l, +, t, ), ;, p0, ., lineTo, (]
[;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t, ), ;, p0, ., lineTo, (, -]
[., lineTo, (, -, l, +, t, ,, l, +, t, ), ;, p0, ., lineTo, (, -, l, -]
[,, l, +, t, ), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t, ), ;]
[+, t, ,, l, +, t, ), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t]
[+, t, ,, l, +, t, ), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t]
[,, l, +, t, ), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t, ), ;]
[), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t, ), ;, p0, ., lineTo, (]
[+, t, ), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t, ), ;, p0, .]
[), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t, ), ;, p0, ., lineTo, (]
[;, p0, ., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return]
[., lineTo, (, -, l, -, t, ,, l, -, t, ), ;, p0, ., lineTo, (, -, t, *]
[,, l, -, t, ), ;, p0, ., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;, p0, .]
[-, t, ,, l, -, t, ), ;, p0, ., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;]
[-, t, ,, l, -, t, ), ;, p0, ., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;]
[,, l, -, t, ), ;, p0, ., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;, p0, .]
[), ;, p0, ., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;]
[-, t, ), ;, p0, ., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., closePath, (]
[), ;, p0, ., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;]
[;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createRegularCross, (, float, l, ,, float]
[., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return, p0, ;]
[,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createRegularCross, (, float]
[*, SQRT2, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createRegularCross]
[*, SQRT2, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createRegularCross]
[,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createRegularCross, (, float]
[), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createRegularCross, (, float, l, ,]
[;, return, p0, ;, }, public, static, Shape, createRegularCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =]
[., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createRegularCross, (, float, l, ,, float, t, )]
[;, }, public, static, Shape, createRegularCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (]
[;, p0, ., moveTo, (, -, l, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, t, )]
[;, p0, ., lineTo, (, -, t, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, l, )]
[., moveTo, (, -, l, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, t, ), ;, p0]
[,, t, ), ;, p0, ., lineTo, (, -, t, ,, t, ), ;, p0, ., lineTo, (, -, t]
[,, t, ), ;, p0, ., lineTo, (, -, t, ,, t, ), ;, p0, ., lineTo, (, -, t]
[), ;, p0, ., lineTo, (, -, t, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, l]
[;, p0, ., lineTo, (, -, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, l, ), ;]
[., lineTo, (, -, t, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, l, ), ;, p0]
[,, t, ), ;, p0, ., lineTo, (, -, t, ,, l, ), ;, p0, ., lineTo, (, t, ,]
[,, t, ), ;, p0, ., lineTo, (, -, t, ,, l, ), ;, p0, ., lineTo, (, t, ,]
[), ;, p0, ., lineTo, (, -, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, l, )]
[;, p0, ., lineTo, (, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, t, ), ;, p0]
[., lineTo, (, -, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, l, ), ;, p0, .]
[,, l, ), ;, p0, ., lineTo, (, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, t]
[,, l, ), ;, p0, ., lineTo, (, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, t]
[), ;, p0, ., lineTo, (, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, t, ), ;]
[;, p0, ., lineTo, (, t, ,, t, ), ;, p0, ., lineTo, (, l, ,, t, ), ;, p0]
[., lineTo, (, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, t, ), ;, p0, ., lineTo]
[,, l, ), ;, p0, ., lineTo, (, t, ,, t, ), ;, p0, ., lineTo, (, l, ,, t]
[), ;, p0, ., lineTo, (, t, ,, t, ), ;, p0, ., lineTo, (, l, ,, t, ), ;]
[;, p0, ., lineTo, (, l, ,, t, ), ;, p0, ., lineTo, (, l, ,, -, t, ), ;]
[., lineTo, (, t, ,, t, ), ;, p0, ., lineTo, (, l, ,, t, ), ;, p0, ., lineTo]
[,, t, ), ;, p0, ., lineTo, (, l, ,, t, ), ;, p0, ., lineTo, (, l, ,, -]
[), ;, p0, ., lineTo, (, l, ,, t, ), ;, p0, ., lineTo, (, l, ,, -, t, )]
[;, p0, ., lineTo, (, l, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, t, )]
[., lineTo, (, l, ,, t, ), ;, p0, ., lineTo, (, l, ,, -, t, ), ;, p0, .]
[,, t, ), ;, p0, ., lineTo, (, l, ,, -, t, ), ;, p0, ., lineTo, (, t, ,]
[), ;, p0, ., lineTo, (, l, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, t]
[;, p0, ., lineTo, (, t, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, l, )]
[., lineTo, (, l, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, t, ), ;, p0]
[,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, t, ), ;, p0, ., lineTo, (, t]
[), ;, p0, ., lineTo, (, t, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, l]
[), ;, p0, ., lineTo, (, t, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, l]
[;, p0, ., lineTo, (, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, l]
[., lineTo, (, t, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, l, ), ;, p0]
[,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, l, ), ;, p0, ., lineTo, (, -]
[), ;, p0, ., lineTo, (, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -]
[), ;, p0, ., lineTo, (, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -]
[;, p0, ., lineTo, (, -, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -]
[., lineTo, (, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, l, ), ;]
[,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, l, ), ;, p0, ., lineTo, (]
[), ;, p0, ., lineTo, (, -, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,]
[), ;, p0, ., lineTo, (, -, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,]
[;, p0, ., lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (, -, l, ,, -]
[., lineTo, (, -, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, t, )]
[,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (]
[,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (]
[), ;, p0, ., lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (, -, l, ,]
[), ;, p0, ., lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (, -, l, ,]
[;, p0, ., lineTo, (, -, l, ,, -, t, ), ;, p0, ., closePath, (, ), ;, return, p0]
[., lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (, -, l, ,, -, t, )]
[,, -, t, ), ;, p0, ., lineTo, (, -, l, ,, -, t, ), ;, p0, ., closePath, (]
[,, -, t, ), ;, p0, ., lineTo, (, -, l, ,, -, t, ), ;, p0, ., closePath, (]
[), ;, p0, ., lineTo, (, -, l, ,, -, t, ), ;, p0, ., closePath, (, ), ;, return]
[), ;, p0, ., lineTo, (, -, l, ,, -, t, ), ;, p0, ., closePath, (, ), ;, return]
[;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDiamond, (, float, s, ), {]
[., lineTo, (, -, l, ,, -, t, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }]
[,, -, t, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDiamond, (]
[,, -, t, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDiamond, (]
[), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDiamond, (, float, s, )]
[), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDiamond, (, float, s, )]
[;, return, p0, ;, }, public, static, Shape, createDiamond, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (]
[., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDiamond, (, float, s, ), {, GeneralPath, p0]
[;, }, public, static, Shape, createDiamond, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0]
[;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,, 0.0f, ), ;]
[;, p0, ., lineTo, (, s, ,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,, s, ), ;, p0]
[., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,, 0.0f, ), ;, p0, .]
[,, -, s, ), ;, p0, ., lineTo, (, s, ,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,]
[), ;, p0, ., lineTo, (, s, ,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,, s, ), ;]
[), ;, p0, ., lineTo, (, s, ,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,, s, ), ;]
[;, p0, ., lineTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, -, s, ,, 0.0f, ), ;]
[., lineTo, (, s, ,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo]
[,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, -, s, ,]
[), ;, p0, ., lineTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, -, s, ,, 0.0f, )]
[;, p0, ., lineTo, (, -, s, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return, p0, ;]
[., lineTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, -, s, ,, 0.0f, ), ;, p0, .]
[,, s, ), ;, p0, ., lineTo, (, -, s, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;]
[), ;, p0, ., lineTo, (, -, s, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return, p0]
[;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createUpTriangle, (, float, s, ), {]
[., lineTo, (, -, s, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public]
[,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createUpTriangle, (, float]
[,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createUpTriangle, (, float]
[), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createUpTriangle, (, float, s, )]
[;, return, p0, ;, }, public, static, Shape, createUpTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (]
[., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createUpTriangle, (, float, s, ), {, GeneralPath, p0]
[;, }, public, static, Shape, createUpTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0]
[;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,, s, ), ;]
[;, p0, ., lineTo, (, s, ,, s, ), ;, p0, ., lineTo, (, -, s, ,, s, ), ;]
[., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,, s, ), ;, p0, .]
[,, -, s, ), ;, p0, ., lineTo, (, s, ,, s, ), ;, p0, ., lineTo, (, -, s]
[), ;, p0, ., lineTo, (, s, ,, s, ), ;, p0, ., lineTo, (, -, s, ,, s, )]
[), ;, p0, ., lineTo, (, s, ,, s, ), ;, p0, ., lineTo, (, -, s, ,, s, )]
[;, p0, ., lineTo, (, -, s, ,, s, ), ;, p0, ., closePath, (, ), ;, return, p0, ;]
[., lineTo, (, s, ,, s, ), ;, p0, ., lineTo, (, -, s, ,, s, ), ;, p0, .]
[,, s, ), ;, p0, ., lineTo, (, -, s, ,, s, ), ;, p0, ., closePath, (, ), ;]
[), ;, p0, ., lineTo, (, -, s, ,, s, ), ;, p0, ., closePath, (, ), ;, return, p0]
[;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDownTriangle, (, float, s, ), {]
[., lineTo, (, -, s, ,, s, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public]
[,, s, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDownTriangle, (, float]
[,, s, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDownTriangle, (, float]
[), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDownTriangle, (, float, s, )]
[;, return, p0, ;, }, public, static, Shape, createDownTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (]
[., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDownTriangle, (, float, s, ), {, GeneralPath, p0]
[;, }, public, static, Shape, createDownTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0]
[;, p0, ., moveTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, s, ,, -, s, ), ;]
[;, p0, ., lineTo, (, s, ,, -, s, ), ;, p0, ., lineTo, (, -, s, ,, -, s]
[., moveTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, s, ,, -, s, ), ;, p0, .]
[,, s, ), ;, p0, ., lineTo, (, s, ,, -, s, ), ;, p0, ., lineTo, (, -, s]
[), ;, p0, ., lineTo, (, s, ,, -, s, ), ;, p0, ., lineTo, (, -, s, ,, -]
[;, p0, ., lineTo, (, -, s, ,, -, s, ), ;, p0, ., closePath, (, ), ;, return, p0]
[., lineTo, (, s, ,, -, s, ), ;, p0, ., lineTo, (, -, s, ,, -, s, ), ;]
[,, -, s, ), ;, p0, ., lineTo, (, -, s, ,, -, s, ), ;, p0, ., closePath, (]
[), ;, p0, ., lineTo, (, -, s, ,, -, s, ), ;, p0, ., closePath, (, ), ;, return]
[), ;, p0, ., lineTo, (, -, s, ,, -, s, ), ;, p0, ., closePath, (, ), ;, return]
[;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createLineRegion, (, Line2D, line, ,, float]
[., lineTo, (, -, s, ,, -, s, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }]
[,, -, s, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createLineRegion, (]
[,, -, s, ), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createLineRegion, (]
[), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createLineRegion, (, Line2D, line, ,]
[), ;, p0, ., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createLineRegion, (, Line2D, line, ,]
[;, return, p0, ;, }, public, static, Shape, createLineRegion, (, Line2D, line, ,, float, width, ), {, GeneralPath, result, =]
[., closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createLineRegion, (, Line2D, line, ,, float, width, )]
[;, }, public, static, Shape, createLineRegion, (, Line2D, line, ,, float, width, ), {, GeneralPath, result, =, new, GeneralPath, (]
[;, float, x1, =, (, float, ), line, ., getX1, (, ), ;, float, x2, =, (, float, ), line]
[;, float, x2, =, (, float, ), line, ., getX2, (, ), ;, float, y1, =, (, float, ), line]
[;, float, x2, =, (, float, ), line, ., getX2, (, ), ;, float, y1, =, (, float, ), line]
[., getX1, (, ), ;, float, x2, =, (, float, ), line, ., getX2, (, ), ;, float, y1, =]
[;, float, y1, =, (, float, ), line, ., getY1, (, ), ;, float, y2, =, (, float, ), line]
[;, float, y1, =, (, float, ), line, ., getY1, (, ), ;, float, y2, =, (, float, ), line]
[., getX2, (, ), ;, float, y1, =, (, float, ), line, ., getY1, (, ), ;, float, y2, =]
[;, float, y2, =, (, float, ), line, ., getY2, (, ), ;, if, (, (, x2, -, x1, )]
[;, float, y2, =, (, float, ), line, ., getY2, (, ), ;, if, (, (, x2, -, x1, )]
[., getY1, (, ), ;, float, y2, =, (, float, ), line, ., getY2, (, ), ;, if, (, (]
[;, if, (, (, x2, -, x1, ), !=, 0.0, ), {, double, theta, =, Math, ., atan, (, (]
[;, if, (, (, x2, -, x1, ), !=, 0.0, ), {, double, theta, =, Math, ., atan, (, (]
[., getY2, (, ), ;, if, (, (, x2, -, x1, ), !=, 0.0, ), {, double, theta, =, Math]
[), {, double, theta, =, Math, ., atan, (, (, y2, -, y1, ), /, (, x2, -, x1, )]
[!=, 0.0, ), {, double, theta, =, Math, ., atan, (, (, y2, -, y1, ), /, (, x2, -]
[), !=, 0.0, ), {, double, theta, =, Math, ., atan, (, (, y2, -, y1, ), /, (, x2]
[-, x1, ), !=, 0.0, ), {, double, theta, =, Math, ., atan, (, (, y2, -, y1, ), /]
[), !=, 0.0, ), {, double, theta, =, Math, ., atan, (, (, y2, -, y1, ), /, (, x2]
[), {, double, theta, =, Math, ., atan, (, (, y2, -, y1, ), /, (, x2, -, x1, )]
[;, float, dx, =, (, float, ), Math, ., sin, (, theta, ), *, width, ;, float, dy, =, (]
[., atan, (, (, y2, -, y1, ), /, (, x2, -, x1, ), ), ;, float, dx, =, (]
[), ;, float, dx, =, (, float, ), Math, ., sin, (, theta, ), *, width, ;, float, dy, =]
[/, (, x2, -, x1, ), ), ;, float, dx, =, (, float, ), Math, ., sin, (, theta, )]
[), /, (, x2, -, x1, ), ), ;, float, dx, =, (, float, ), Math, ., sin, (, theta]
[-, y1, ), /, (, x2, -, x1, ), ), ;, float, dx, =, (, float, ), Math, ., sin]
[), /, (, x2, -, x1, ), ), ;, float, dx, =, (, float, ), Math, ., sin, (, theta]
[), ;, float, dx, =, (, float, ), Math, ., sin, (, theta, ), *, width, ;, float, dy, =]
[), ), ;, float, dx, =, (, float, ), Math, ., sin, (, theta, ), *, width, ;, float, dy]
[-, x1, ), ), ;, float, dx, =, (, float, ), Math, ., sin, (, theta, ), *, width, ;]
[), ), ;, float, dx, =, (, float, ), Math, ., sin, (, theta, ), *, width, ;, float, dy]
[;, float, dy, =, (, float, ), Math, ., cos, (, theta, ), *, width, ;, result, ., moveTo, (]
[*, width, ;, float, dy, =, (, float, ), Math, ., cos, (, theta, ), *, width, ;, result, .]
[*, width, ;, float, dy, =, (, float, ), Math, ., cos, (, theta, ), *, width, ;, result, .]
[., sin, (, theta, ), *, width, ;, float, dy, =, (, float, ), Math, ., cos, (, theta, )]
[), *, width, ;, float, dy, =, (, float, ), Math, ., cos, (, theta, ), *, width, ;, result]
[;, float, dy, =, (, float, ), Math, ., cos, (, theta, ), *, width, ;, result, ., moveTo, (]
[;, result, ., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +]
[*, width, ;, result, ., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (]
[*, width, ;, result, ., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (]
[., cos, (, theta, ), *, width, ;, result, ., moveTo, (, x1, -, dx, ,, y1, +, dy, )]
[), *, width, ;, result, ., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo]
[;, result, ., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +]
[;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result, ., lineTo, (, x2, +]
[., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +, dx, ,]
[,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result]
[-, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, )]
[,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result]
[), ;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result, ., lineTo, (, x2]
[+, dy, ), ;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result, ., lineTo]
[), ;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result, ., lineTo, (, x2]
[;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result, ., lineTo, (, x2, -]
[., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result, ., lineTo, (, x2, +, dx, ,]
[,, y1, -, dy, ), ;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result]
[+, dx, ,, y1, -, dy, ), ;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, )]
[,, y1, -, dy, ), ;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result]
[), ;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result, ., lineTo, (, x2]
[-, dy, ), ;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result, ., lineTo]
[), ;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result, ., lineTo, (, x2]
[;, result, ., lineTo, (, x2, -, dx, ,, y2, +, dy, ), ;, result, ., closePath, (, ), ;]
[., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result, ., lineTo, (, x2, -, dx, ,]
[,, y2, -, dy, ), ;, result, ., lineTo, (, x2, -, dx, ,, y2, +, dy, ), ;, result]
[+, dx, ,, y2, -, dy, ), ;, result, ., lineTo, (, x2, -, dx, ,, y2, +, dy, )]
[,, y2, -, dy, ), ;, result, ., lineTo, (, x2, -, dx, ,, y2, +, dy, ), ;, result]
[), ;, result, ., lineTo, (, x2, -, dx, ,, y2, +, dy, ), ;, result, ., closePath, (, )]
[-, dy, ), ;, result, ., lineTo, (, x2, -, dx, ,, y2, +, dy, ), ;, result, ., closePath]
[), ;, result, ., lineTo, (, x2, -, dx, ,, y2, +, dy, ), ;, result, ., closePath, (, )]
[;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1, -, width, /, 2.0f, ,]
[., lineTo, (, x2, -, dx, ,, y2, +, dy, ), ;, result, ., closePath, (, ), ;, }, else]
[,, y2, +, dy, ), ;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1]
[-, dx, ,, y2, +, dy, ), ;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo]
[,, y2, +, dy, ), ;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1]
[), ;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1, -, width, /, 2.0f]
[+, dy, ), ;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1, -, width]
[), ;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1, -, width, /, 2.0f]
[;, }, else, {, result, ., moveTo, (, x1, -, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo]
[., closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1, -, width, /, 2.0f, ,, y1, )]
[;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x2, +]
[., moveTo, (, x1, -, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x1, +, width, /]
[,, y1, ), ;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo]
[-, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, )]
[,, y1, ), ;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo]
[/, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result]
[,, y1, ), ;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo]
[), ;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x2]
[;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (, x2, -]
[., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x2, +, width, /]
[,, y1, ), ;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo]
[+, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, )]
[,, y1, ), ;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo]
[/, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result]
[,, y1, ), ;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo]
[), ;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (, x2]
[;, result, ., lineTo, (, x2, -, width, /, 2.0f, ,, y2, ), ;, result, ., closePath, (, ), ;]
[., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (, x2, -, width, /]
[,, y2, ), ;, result, ., lineTo, (, x2, -, width, /, 2.0f, ,, y2, ), ;, result, ., closePath]
[+, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (, x2, -, width, /, 2.0f, ,, y2, )]
[,, y2, ), ;, result, ., lineTo, (, x2, -, width, /, 2.0f, ,, y2, ), ;, result, ., closePath]
[/, 2.0f, ,, y2, ), ;, result, ., lineTo, (, x2, -, width, /, 2.0f, ,, y2, ), ;, result]
[,, y2, ), ;, result, ., lineTo, (, x2, -, width, /, 2.0f, ,, y2, ), ;, result, ., closePath]
[), ;, result, ., lineTo, (, x2, -, width, /, 2.0f, ,, y2, ), ;, result, ., closePath, (, )]
[;, result, ., closePath, (, ), ;, }, return, result, ;, }, public, static, Point2D, getPointInRectangle, (, double, x, ,]
[., lineTo, (, x2, -, width, /, 2.0f, ,, y2, ), ;, result, ., closePath, (, ), ;, }, return]
[,, y2, ), ;, result, ., closePath, (, ), ;, }, return, result, ;, }, public, static, Point2D, getPointInRectangle, (]
[-, width, /, 2.0f, ,, y2, ), ;, result, ., closePath, (, ), ;, }, return, result, ;, }, public]
[,, y2, ), ;, result, ., closePath, (, ), ;, }, return, result, ;, }, public, static, Point2D, getPointInRectangle, (]
[/, 2.0f, ,, y2, ), ;, result, ., closePath, (, ), ;, }, return, result, ;, }, public, static, Point2D]
[,, y2, ), ;, result, ., closePath, (, ), ;, }, return, result, ;, }, public, static, Point2D, getPointInRectangle, (]
[), ;, result, ., closePath, (, ), ;, }, return, result, ;, }, public, static, Point2D, getPointInRectangle, (, double, x]
[;, }, return, result, ;, }, public, static, Point2D, getPointInRectangle, (, double, x, ,, double, y, ,, Rectangle2D, area, )]
[., closePath, (, ), ;, }, return, result, ;, }, public, static, Point2D, getPointInRectangle, (, double, x, ,, double, y]
[;, }, public, static, Point2D, getPointInRectangle, (, double, x, ,, double, y, ,, Rectangle2D, area, ), {, x, =, Math]
[=, Math, ., max, (, area, ., getMinX, (, ), ,, Math, ., min, (, x, ,, area, ., getMaxX]
[;, y, =, Math, ., max, (, area, ., getMinY, (, ), ,, Math, ., min, (, y, ,, area]
[., max, (, area, ., getMinX, (, ), ,, Math, ., min, (, x, ,, area, ., getMaxX, (, )]
[,, Math, ., min, (, x, ,, area, ., getMaxX, (, ), ), ), ;, y, =, Math, ., max]
[., getMinX, (, ), ,, Math, ., min, (, x, ,, area, ., getMaxX, (, ), ), ), ;, y]
[), ;, y, =, Math, ., max, (, area, ., getMinY, (, ), ,, Math, ., min, (, y, ,]
[., min, (, x, ,, area, ., getMaxX, (, ), ), ), ;, y, =, Math, ., max, (, area]
[,, area, ., getMaxX, (, ), ), ), ;, y, =, Math, ., max, (, area, ., getMinY, (, )]
[), ), ;, y, =, Math, ., max, (, area, ., getMinY, (, ), ,, Math, ., min, (, y]
[., getMaxX, (, ), ), ), ;, y, =, Math, ., max, (, area, ., getMinY, (, ), ,, Math]
[=, Math, ., max, (, area, ., getMinY, (, ), ,, Math, ., min, (, y, ,, area, ., getMaxY]
[;, return, new, Point2D, ., Double, (, x, ,, y, ), ;, }, public, static, boolean, contains, (, Rectangle2D, rect1]
[., max, (, area, ., getMinY, (, ), ,, Math, ., min, (, y, ,, area, ., getMaxY, (, )]
[,, Math, ., min, (, y, ,, area, ., getMaxY, (, ), ), ), ;, return, new, Point2D, ., Double]
[., getMinY, (, ), ,, Math, ., min, (, y, ,, area, ., getMaxY, (, ), ), ), ;, return]
[), ;, return, new, Point2D, ., Double, (, x, ,, y, ), ;, }, public, static, boolean, contains, (, Rectangle2D]
[., min, (, y, ,, area, ., getMaxY, (, ), ), ), ;, return, new, Point2D, ., Double, (, x]
[,, area, ., getMaxY, (, ), ), ), ;, return, new, Point2D, ., Double, (, x, ,, y, ), ;]
[), ), ;, return, new, Point2D, ., Double, (, x, ,, y, ), ;, }, public, static, boolean, contains, (]
[., getMaxY, (, ), ), ), ;, return, new, Point2D, ., Double, (, x, ,, y, ), ;, }, public]
[;, }, public, static, boolean, contains, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =, rect1, ., getX]
[,, y, ), ;, }, public, static, boolean, contains, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =]
[), ;, }, public, static, boolean, contains, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =, rect1, .]
[;, double, y0, =, rect1, ., getY, (, ), ;, double, x, =, rect2, ., getX, (, ), ;, double]
[., getX, (, ), ;, double, y0, =, rect1, ., getY, (, ), ;, double, x, =, rect2, ., getX]
[;, double, x, =, rect2, ., getX, (, ), ;, double, y, =, rect2, ., getY, (, ), ;, double]
[., getY, (, ), ;, double, x, =, rect2, ., getX, (, ), ;, double, y, =, rect2, ., getY]
[;, double, y, =, rect2, ., getY, (, ), ;, double, w, =, rect2, ., getWidth, (, ), ;, double]
[., getX, (, ), ;, double, y, =, rect2, ., getY, (, ), ;, double, w, =, rect2, ., getWidth]
[;, double, w, =, rect2, ., getWidth, (, ), ;, double, h, =, rect2, ., getHeight, (, ), ;, return]
[., getY, (, ), ;, double, w, =, rect2, ., getWidth, (, ), ;, double, h, =, rect2, ., getHeight]
[;, double, h, =, rect2, ., getHeight, (, ), ;, return, (, (, x, >=, x0, ), &&, (, y]
[., getWidth, (, ), ;, double, h, =, rect2, ., getHeight, (, ), ;, return, (, (, x, >=, x0]
[;, return, (, (, x, >=, x0, ), &&, (, y, >=, y0, ), &&, (, (, x, +, w]
[., getHeight, (, ), ;, return, (, (, x, >=, x0, ), &&, (, y, >=, y0, ), &&, (]
[;, }, public, static, boolean, intersects, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =, rect1, ., getX]
[), ;, }, public, static, boolean, intersects, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =, rect1, .]
[&&, (, (, y, +, h, ), <=, (, y0, +, rect1, ., getHeight, (, ), ), ), ), ;]
[&&, (, (, x, +, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (]
[&&, (, y, >=, y0, ), &&, (, (, x, +, w, ), <=, (, x0, +, rect1, ., getWidth]
[), &&, (, y, >=, y0, ), &&, (, (, x, +, w, ), <=, (, x0, +, rect1, .]
[>=, x0, ), &&, (, y, >=, y0, ), &&, (, (, x, +, w, ), <=, (, x0, +]
[), &&, (, y, >=, y0, ), &&, (, (, x, +, w, ), <=, (, x0, +, rect1, .]
[&&, (, (, x, +, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (]
[), &&, (, (, x, +, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&]
[>=, y0, ), &&, (, (, x, +, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), )]
[), &&, (, (, x, +, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&]
[&&, (, (, y, +, h, ), <=, (, y0, +, rect1, ., getHeight, (, ), ), ), ), ;]
[), &&, (, (, y, +, h, ), <=, (, y0, +, rect1, ., getHeight, (, ), ), ), )]
[<=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (, y, +, h, ), <=, (]
[), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (, y, +, h, ), <=]
[+, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (, y, +, h]
[), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (, y, +, h, ), <=]
[), &&, (, (, y, +, h, ), <=, (, y0, +, rect1, ., getHeight, (, ), ), ), )]
[), ), &&, (, (, y, +, h, ), <=, (, y0, +, rect1, ., getHeight, (, ), ), )]
[+, rect1, ., getWidth, (, ), ), ), &&, (, (, y, +, h, ), <=, (, y0, +, rect1]
[), ), &&, (, (, y, +, h, ), <=, (, y0, +, rect1, ., getHeight, (, ), ), )]
[., getWidth, (, ), ), ), &&, (, (, y, +, h, ), <=, (, y0, +, rect1, ., getHeight]
[), ;, }, public, static, boolean, intersects, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =, rect1, .]
[), ), ;, }, public, static, boolean, intersects, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =, rect1]
[<=, (, y0, +, rect1, ., getHeight, (, ), ), ), ), ;, }, public, static, boolean, intersects, (, Rectangle2D]
[), <=, (, y0, +, rect1, ., getHeight, (, ), ), ), ), ;, }, public, static, boolean, intersects, (]
[+, h, ), <=, (, y0, +, rect1, ., getHeight, (, ), ), ), ), ;, }, public, static, boolean]
[), <=, (, y0, +, rect1, ., getHeight, (, ), ), ), ), ;, }, public, static, boolean, intersects, (]
[), ), ;, }, public, static, boolean, intersects, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =, rect1]
[), ), ), ;, }, public, static, boolean, intersects, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =]
[+, rect1, ., getHeight, (, ), ), ), ), ;, }, public, static, boolean, intersects, (, Rectangle2D, rect1, ,, Rectangle2D]
[), ), ), ;, }, public, static, boolean, intersects, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =]
[., getHeight, (, ), ), ), ), ;, }, public, static, boolean, intersects, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, )]
[;, double, y0, =, rect1, ., getY, (, ), ;, double, x, =, rect2, ., getX, (, ), ;, double]
[., getX, (, ), ;, double, y0, =, rect1, ., getY, (, ), ;, double, x, =, rect2, ., getX]
[;, double, x, =, rect2, ., getX, (, ), ;, double, width, =, rect2, ., getWidth, (, ), ;, double]
[., getY, (, ), ;, double, x, =, rect2, ., getX, (, ), ;, double, width, =, rect2, ., getWidth]
[;, double, width, =, rect2, ., getWidth, (, ), ;, double, y, =, rect2, ., getY, (, ), ;, double]
[., getX, (, ), ;, double, width, =, rect2, ., getWidth, (, ), ;, double, y, =, rect2, ., getY]
[;, double, y, =, rect2, ., getY, (, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return]
[., getWidth, (, ), ;, double, y, =, rect2, ., getY, (, ), ;, double, height, =, rect2, ., getHeight]
[;, double, height, =, rect2, ., getHeight, (, ), ;, return, (, x, +, width, >=, x0, &&, y, +]
[., getY, (, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (, x, +, width, >=]
[;, return, (, x, +, width, >=, x0, &&, y, +, height, >=, y0, &&, x, <=, x0, +, rect1]
[., getHeight, (, ), ;, return, (, x, +, width, >=, x0, &&, y, +, height, >=, y0, &&, x]
[;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (, x]
[), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (]
[&&, y, <=, y0, +, rect1, ., getHeight, (, ), ), ;, }, public, static, boolean, isPointInRect, (, double, x]
[&&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=, y0, +, rect1, ., getHeight, (, )]
[&&, y, +, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=, y0]
[>=, x0, &&, y, +, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y]
[+, width, >=, x0, &&, y, +, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, )]
[>=, x0, &&, y, +, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y]
[&&, y, +, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=, y0]
[&&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=, y0, +, rect1, ., getHeight, (, )]
[>=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=, y0, +, rect1, ., getHeight]
[+, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=, y0, +, rect1]
[>=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=, y0, +, rect1, ., getHeight]
[&&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=, y0, +, rect1, ., getHeight, (, )]
[&&, y, <=, y0, +, rect1, ., getHeight, (, ), ), ;, }, public, static, boolean, isPointInRect, (, double, x]
[<=, x0, +, rect1, ., getWidth, (, ), &&, y, <=, y0, +, rect1, ., getHeight, (, ), ), ;]
[&&, y, <=, y0, +, rect1, ., getHeight, (, ), ), ;, }, public, static, boolean, isPointInRect, (, double, x]
[+, rect1, ., getWidth, (, ), &&, y, <=, y0, +, rect1, ., getHeight, (, ), ), ;, }, public]
[&&, y, <=, y0, +, rect1, ., getHeight, (, ), ), ;, }, public, static, boolean, isPointInRect, (, double, x]
[., getWidth, (, ), &&, y, <=, y0, +, rect1, ., getHeight, (, ), ), ;, }, public, static, boolean]
[), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (]
[<=, y0, +, rect1, ., getHeight, (, ), ), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double]
[), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (]
[+, rect1, ., getHeight, (, ), ), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,]
[), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (]
[., getHeight, (, ), ), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect]
[;, }, public, static, boolean, clipLine, (, Line2D, line, ,, Rectangle2D, rect, ), {, double, x1, =, line, ., getX1]
[), ;, }, public, static, boolean, clipLine, (, Line2D, line, ,, Rectangle2D, rect, ), {, double, x1, =, line, .]
[&&, y, <=, rect, ., getMaxY, (, ), ), ;, }, public, static, boolean, clipLine, (, Line2D, line, ,, Rectangle2D]
[&&, y, >=, rect, ., getMinY, (, ), &&, y, <=, rect, ., getMaxY, (, ), ), ;, }, public]
[&&, x, <=, rect, ., getMaxX, (, ), &&, y, >=, rect, ., getMinY, (, ), &&, y, <=, rect]
[>=, rect, ., getMinX, (, ), &&, x, <=, rect, ., getMaxX, (, ), &&, y, >=, rect, ., getMinY]
[&&, x, <=, rect, ., getMaxX, (, ), &&, y, >=, rect, ., getMinY, (, ), &&, y, <=, rect]
[., getMinX, (, ), &&, x, <=, rect, ., getMaxX, (, ), &&, y, >=, rect, ., getMinY, (, )]
[&&, y, >=, rect, ., getMinY, (, ), &&, y, <=, rect, ., getMaxY, (, ), ), ;, }, public]
[<=, rect, ., getMaxX, (, ), &&, y, >=, rect, ., getMinY, (, ), &&, y, <=, rect, ., getMaxY]
[&&, y, >=, rect, ., getMinY, (, ), &&, y, <=, rect, ., getMaxY, (, ), ), ;, }, public]
[., getMaxX, (, ), &&, y, >=, rect, ., getMinY, (, ), &&, y, <=, rect, ., getMaxY, (, )]
[&&, y, <=, rect, ., getMaxY, (, ), ), ;, }, public, static, boolean, clipLine, (, Line2D, line, ,, Rectangle2D]
[>=, rect, ., getMinY, (, ), &&, y, <=, rect, ., getMaxY, (, ), ), ;, }, public, static, boolean]
[&&, y, <=, rect, ., getMaxY, (, ), ), ;, }, public, static, boolean, clipLine, (, Line2D, line, ,, Rectangle2D]
[., getMinY, (, ), &&, y, <=, rect, ., getMaxY, (, ), ), ;, }, public, static, boolean, clipLine, (]
[), ;, }, public, static, boolean, clipLine, (, Line2D, line, ,, Rectangle2D, rect, ), {, double, x1, =, line, .]
[<=, rect, ., getMaxY, (, ), ), ;, }, public, static, boolean, clipLine, (, Line2D, line, ,, Rectangle2D, rect, )]
[), ;, }, public, static, boolean, clipLine, (, Line2D, line, ,, Rectangle2D, rect, ), {, double, x1, =, line, .]
[., getMaxY, (, ), ), ;, }, public, static, boolean, clipLine, (, Line2D, line, ,, Rectangle2D, rect, ), {, double]
[;, double, y1, =, line, ., getY1, (, ), ;, double, x2, =, line, ., getX2, (, ), ;, double]
[., getX1, (, ), ;, double, y1, =, line, ., getY1, (, ), ;, double, x2, =, line, ., getX2]
[;, double, x2, =, line, ., getX2, (, ), ;, double, y2, =, line, ., getY2, (, ), ;, double]
[., getY1, (, ), ;, double, x2, =, line, ., getX2, (, ), ;, double, y2, =, line, ., getY2]
[;, double, y2, =, line, ., getY2, (, ), ;, double, minX, =, rect, ., getMinX, (, ), ;, double]
[., getX2, (, ), ;, double, y2, =, line, ., getY2, (, ), ;, double, minX, =, rect, ., getMinX]
[;, double, minX, =, rect, ., getMinX, (, ), ;, double, maxX, =, rect, ., getMaxX, (, ), ;, double]
[., getY2, (, ), ;, double, minX, =, rect, ., getMinX, (, ), ;, double, maxX, =, rect, ., getMaxX]
[;, double, maxX, =, rect, ., getMaxX, (, ), ;, double, minY, =, rect, ., getMinY, (, ), ;, double]
[., getMinX, (, ), ;, double, maxX, =, rect, ., getMaxX, (, ), ;, double, minY, =, rect, ., getMinY]
[;, double, minY, =, rect, ., getMinY, (, ), ;, double, maxY, =, rect, ., getMaxY, (, ), ;, int]
[., getMaxX, (, ), ;, double, minY, =, rect, ., getMinY, (, ), ;, double, maxY, =, rect, ., getMaxY]
[;, double, maxY, =, rect, ., getMaxY, (, ), ;, int, f1, =, rect, ., outcode, (, x1, ,, y1]
[., getMinY, (, ), ;, double, maxY, =, rect, ., getMaxY, (, ), ;, int, f1, =, rect, ., outcode]
[;, int, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, int, f2, =, rect, ., outcode, (]
[., getMaxY, (, ), ;, int, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, int, f2, =]
[;, int, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, while, (, (, f1, |, f2, )]
[., outcode, (, x1, ,, y1, ), ;, int, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;]
[,, y1, ), ;, int, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, while, (, (, f1]
[), ;, int, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, while, (, (, f1, |, f2]
[;, while, (, (, f1, |, f2, ), !=, 0, ), {, if, (, (, f1, &, f2, ), !=]
[., outcode, (, x2, ,, y2, ), ;, while, (, (, f1, |, f2, ), !=, 0, ), {, if]
[,, y2, ), ;, while, (, (, f1, |, f2, ), !=, 0, ), {, if, (, (, f1, &]
[), ;, while, (, (, f1, |, f2, ), !=, 0, ), {, if, (, (, f1, &, f2, )]
[), {, if, (, (, f1, &, f2, ), !=, 0, ), {, return, false, ;, }, double, dx, =]
[!=, 0, ), {, if, (, (, f1, &, f2, ), !=, 0, ), {, return, false, ;, }, double]
[), !=, 0, ), {, if, (, (, f1, &, f2, ), !=, 0, ), {, return, false, ;, }]
[|, f2, ), !=, 0, ), {, if, (, (, f1, &, f2, ), !=, 0, ), {, return, false]
[), !=, 0, ), {, if, (, (, f1, &, f2, ), !=, 0, ), {, return, false, ;, }]
[), {, if, (, (, f1, &, f2, ), !=, 0, ), {, return, false, ;, }, double, dx, =]
[), {, return, false, ;, }, double, dx, =, (, x2, -, x1, ), ;, double, dy, =, (, y2]
[!=, 0, ), {, return, false, ;, }, double, dx, =, (, x2, -, x1, ), ;, double, dy, =]
[), !=, 0, ), {, return, false, ;, }, double, dx, =, (, x2, -, x1, ), ;, double, dy]
[&, f2, ), !=, 0, ), {, return, false, ;, }, double, dx, =, (, x2, -, x1, ), ;]
[), !=, 0, ), {, return, false, ;, }, double, dx, =, (, x2, -, x1, ), ;, double, dy]
[), {, return, false, ;, }, double, dx, =, (, x2, -, x1, ), ;, double, dy, =, (, y2]
[;, }, double, dx, =, (, x2, -, x1, ), ;, double, dy, =, (, y2, -, y1, ), ;]
[;, double, dy, =, (, y2, -, y1, ), ;, if, (, f1, !=, 0, ), {, if, (, (]
[), ;, double, dy, =, (, y2, -, y1, ), ;, if, (, f1, !=, 0, ), {, if, (]
[-, x1, ), ;, double, dy, =, (, y2, -, y1, ), ;, if, (, f1, !=, 0, ), {]
[), ;, double, dy, =, (, y2, -, y1, ), ;, if, (, f1, !=, 0, ), {, if, (]
[;, if, (, f1, !=, 0, ), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, .]
[), ;, if, (, f1, !=, 0, ), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D]
[-, y1, ), ;, if, (, f1, !=, 0, ), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, )]
[), ;, if, (, f1, !=, 0, ), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D]
[), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, )]
[!=, 0, ), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=]
[), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, )]
[), {, y1, =, y1, +, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;]
[&&, dx, !=, 0.0, ), {, y1, =, y1, +, (, minX, -, x1, ), *, dy, /, dx, ;]
[==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, minX, -, x1, ), *]
[), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, minX, -, x1, )]
[&, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (]
[), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, minX, -, x1, )]
[., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, minX, -]
[&&, dx, !=, 0.0, ), {, y1, =, y1, +, (, minX, -, x1, ), *, dy, /, dx, ;]
[., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, minX, -, x1, ), *, dy, /]
[), {, y1, =, y1, +, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;]
[!=, 0.0, ), {, y1, =, y1, +, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =]
[), {, y1, =, y1, +, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;]
[=, y1, +, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if]
[;, x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT]
[+, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (, (]
[;, x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT]
[/, dx, ;, x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D]
[*, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, )]
[), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT]
[-, x1, ), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D]
[), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT]
[/, dx, ;, x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D]
[;, x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT]
[=, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx]
[;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0]
[), {, y1, =, y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;]
[&&, dx, !=, 0.0, ), {, y1, =, y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;]
[==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, maxX, -, x1, ), *]
[), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, maxX, -, x1, )]
[&, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (]
[), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, maxX, -, x1, )]
[., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, maxX, -]
[&&, dx, !=, 0.0, ), {, y1, =, y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;]
[., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, maxX, -, x1, ), *, dy, /]
[), {, y1, =, y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;]
[!=, 0.0, ), {, y1, =, y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =]
[), {, y1, =, y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;]
[=, y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if]
[;, x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM]
[+, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (, (]
[;, x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM]
[/, dx, ;, x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D]
[*, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, )]
[), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM]
[-, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D]
[), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM]
[/, dx, ;, x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D]
[;, x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM]
[=, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy]
[;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0]
[), {, x1, =, x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;]
[&&, dy, !=, 0.0, ), {, x1, =, x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;]
[==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, maxY, -, y1, ), *]
[), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, maxY, -, y1, )]
[&, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (]
[), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, maxY, -, y1, )]
[., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, maxY, -]
[&&, dy, !=, 0.0, ), {, x1, =, x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;]
[., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, maxY, -, y1, ), *, dx, /]
[), {, x1, =, x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;]
[!=, 0.0, ), {, x1, =, x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =]
[), {, x1, =, x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;]
[=, x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if]
[;, y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP]
[+, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (, (]
[;, y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP]
[/, dy, ;, y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D]
[*, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, )]
[), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP]
[-, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D]
[), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP]
[/, dy, ;, y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D]
[;, y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP]
[=, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy]
[;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0]
[), {, x1, =, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;, y1, =, minY, ;]
[&&, dy, !=, 0.0, ), {, x1, =, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;]
[==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, minY, -, y1, ), *]
[), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, minY, -, y1, )]
[&, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (]
[), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, minY, -, y1, )]
[., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, minY, -]
[&&, dy, !=, 0.0, ), {, x1, =, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;]
[., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, minY, -, y1, ), *, dx, /]
[), {, x1, =, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;, y1, =, minY, ;]
[!=, 0.0, ), {, x1, =, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;, y1, =]
[), {, x1, =, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;, y1, =, minY, ;]
[=, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;, y1, =, minY, ;, }, f1, =]
[;, y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if]
[+, (, minY, -, y1, ), *, dx, /, dy, ;, y1, =, minY, ;, }, f1, =, rect, .]
[;, y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if]
[/, dy, ;, y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, }]
[*, dx, /, dy, ;, y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1, )]
[), *, dx, /, dy, ;, y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1]
[-, y1, ), *, dx, /, dy, ;, y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1]
[), *, dx, /, dy, ;, y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1]
[/, dy, ;, y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, }]
[;, y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if]
[=, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if, (, f2]
[;, }, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if, (, f2, !=, 0]
[=, rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if, (, f2, !=, 0, ), {, if]
[;, }, else, if, (, f2, !=, 0, ), {, if, (, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==]
[., outcode, (, x1, ,, y1, ), ;, }, else, if, (, f2, !=, 0, ), {, if, (, (]
[,, y1, ), ;, }, else, if, (, f2, !=, 0, ), {, if, (, (, f2, &, Rectangle2D, .]
[), ;, }, else, if, (, f2, !=, 0, ), {, if, (, (, f2, &, Rectangle2D, ., OUT_LEFT, )]
[), {, if, (, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, )]
[!=, 0, ), {, if, (, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=]
[), {, if, (, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, )]
[), {, y2, =, y2, +, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;]
[&&, dx, !=, 0.0, ), {, y2, =, y2, +, (, minX, -, x2, ), *, dy, /, dx, ;]
[==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, minX, -, x2, ), *]
[), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, minX, -, x2, )]
[&, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (]
[), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, minX, -, x2, )]
[., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, minX, -]
[&&, dx, !=, 0.0, ), {, y2, =, y2, +, (, minX, -, x2, ), *, dy, /, dx, ;]
[., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, minX, -, x2, ), *, dy, /]
[), {, y2, =, y2, +, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;]
[!=, 0.0, ), {, y2, =, y2, +, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =]
[), {, y2, =, y2, +, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;]
[=, y2, +, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if]
[;, x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT]
[+, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (, (]
[;, x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT]
[/, dx, ;, x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D]
[*, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, )]
[), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT]
[-, x2, ), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D]
[), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT]
[/, dx, ;, x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D]
[;, x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT]
[=, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx]
[;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0]
[), {, y2, =, y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;]
[&&, dx, !=, 0.0, ), {, y2, =, y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;]
[==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, maxX, -, x2, ), *]
[), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, maxX, -, x2, )]
[&, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (]
[), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, maxX, -, x2, )]
[., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, maxX, -]
[&&, dx, !=, 0.0, ), {, y2, =, y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;]
[., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, maxX, -, x2, ), *, dy, /]
[), {, y2, =, y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;]
[!=, 0.0, ), {, y2, =, y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =]
[), {, y2, =, y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;]
[=, y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if]
[;, x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM]
[+, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (, (]
[;, x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM]
[/, dx, ;, x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D]
[*, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, )]
[), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM]
[-, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D]
[), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM]
[/, dx, ;, x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D]
[;, x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM]
[=, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy]
[;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0]
[), {, x2, =, x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;]
[&&, dy, !=, 0.0, ), {, x2, =, x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;]
[==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, maxY, -, y2, ), *]
[), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, maxY, -, y2, )]
[&, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (]
[), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, maxY, -, y2, )]
[., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, maxY, -]
[&&, dy, !=, 0.0, ), {, x2, =, x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;]
[., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, maxY, -, y2, ), *, dx, /]
[), {, x2, =, x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;]
[!=, 0.0, ), {, x2, =, x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =]
[), {, x2, =, x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;]
[=, x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if]
[;, y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP]
[+, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (, (]
[;, y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP]
[/, dy, ;, y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D]
[*, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, )]
[), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP]
[-, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D]
[), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP]
[/, dy, ;, y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D]
[;, y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP]
[=, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy]
[;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0]
[), {, x2, =, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;, y2, =, minY, ;]
[&&, dy, !=, 0.0, ), {, x2, =, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;]
[==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, minY, -, y2, ), *]
[), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, minY, -, y2, )]
[&, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (]
[), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, minY, -, y2, )]
[., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, minY, -]
[&&, dy, !=, 0.0, ), {, x2, =, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;]
[., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, minY, -, y2, ), *, dx, /]
[), {, x2, =, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;, y2, =, minY, ;]
[!=, 0.0, ), {, x2, =, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;, y2, =]
[), {, x2, =, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;, y2, =, minY, ;]
[=, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;, y2, =, minY, ;, }, f2, =]
[;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, }, }, line]
[+, (, minY, -, y2, ), *, dx, /, dy, ;, y2, =, minY, ;, }, f2, =, rect, .]
[;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, }, }, line]
[/, dy, ;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, }]
[*, dx, /, dy, ;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2, )]
[), *, dx, /, dy, ;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2]
[-, y2, ), *, dx, /, dy, ;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2]
[), *, dx, /, dy, ;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2]
[/, dy, ;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, }]
[;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, }, }, line]
[=, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, }, }, line, ., setLine]
[;, }, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, }, }, line, ., setLine, (, x1]
[=, rect, ., outcode, (, x2, ,, y2, ), ;, }, }, line, ., setLine, (, x1, ,, y1, ,]
[;, }, }, line, ., setLine, (, x1, ,, y1, ,, x2, ,, y2, ), ;, return, true, ;, }]
[., outcode, (, x2, ,, y2, ), ;, }, }, line, ., setLine, (, x1, ,, y1, ,, x2, ,]
[,, y2, ), ;, }, }, line, ., setLine, (, x1, ,, y1, ,, x2, ,, y2, ), ;, return]
[), ;, }, }, line, ., setLine, (, x1, ,, y1, ,, x2, ,, y2, ), ;, return, true, ;]
[;, return, true, ;, }, }]
[., setLine, (, x1, ,, y1, ,, x2, ,, y2, ), ;, return, true, ;, }, }]
[,, y1, ,, x2, ,, y2, ), ;, return, true, ;, }, }]
[,, x2, ,, y2, ), ;, return, true, ;, }, }]
[,, y2, ), ;, return, true, ;, }, }]
[), ;, return, true, ;, }, }]
[;, }, }]
