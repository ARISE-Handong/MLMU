[;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,, "jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings ", +, "literal.", ), ;, static]
[., getLogger, (, ExpandJqueryAliases, ., class, ., getName, (, ), ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning]
[), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,, "jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings ", +, "literal.", ), ;]
[., getName, (, ), ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,, "jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings "]
[;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,, "jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings ", +, "literal.", ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error]
[,, "jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings ", +, "literal.", ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid "]
[), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;, static, final]
[+, "literal.", ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;]
[+, "argument must be an object literal or an array of strings ", +, "literal.", ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\"."]
[+, "literal.", ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;]
[), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;, static, final]
[;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =, DiagnosticType, ., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION", ,, "jQuery.expandedEach was not expanded as no valid property ", +, "assignments were encountered. Consider using jQuery.each instead.", ), ;, private, static, final]
[., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =, DiagnosticType, ., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION"]
[,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =, DiagnosticType, ., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION", ,, "jQuery.expandedEach was not expanded as no valid property ", +, "assignments were encountered. Consider using jQuery.each instead."]
[), ;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =, DiagnosticType, ., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION", ,, "jQuery.expandedEach was not expanded as no valid property ", +, "assignments were encountered. Consider using jQuery.each instead.", ), ;, private, static]
[+, "property name \"{0}\".", ), ;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =, DiagnosticType, ., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION", ,, "jQuery.expandedEach was not expanded as no valid property ", +, "assignments were encountered. Consider using jQuery.each instead.", ), ;]
[), ;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =, DiagnosticType, ., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION", ,, "jQuery.expandedEach was not expanded as no valid property ", +, "assignments were encountered. Consider using jQuery.each instead.", ), ;, private, static]
[;, private, static, final, Set, <, String, >, JQUERY_EXTEND_NAMES, =, ImmutableSet, ., of, (, "jQuery.extend", ,, "jQuery.fn.extend", ,, "jQuery.prototype.extend", )]
[., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION", ,, "jQuery.expandedEach was not expanded as no valid property ", +, "assignments were encountered. Consider using jQuery.each instead.", ), ;, private, static, final, Set, <, String, >, JQUERY_EXTEND_NAMES, =, ImmutableSet]
[,, "jQuery.expandedEach was not expanded as no valid property ", +, "assignments were encountered. Consider using jQuery.each instead.", ), ;, private, static, final, Set, <, String, >, JQUERY_EXTEND_NAMES, =, ImmutableSet, ., of, (, "jQuery.extend"]
[), ;, private, static, final, Set, <, String, >, JQUERY_EXTEND_NAMES, =, ImmutableSet, ., of, (, "jQuery.extend", ,, "jQuery.fn.extend", ,, "jQuery.prototype.extend"]
[+, "assignments were encountered. Consider using jQuery.each instead.", ), ;, private, static, final, Set, <, String, >, JQUERY_EXTEND_NAMES, =, ImmutableSet, ., of, (, "jQuery.extend", ,, "jQuery.fn.extend"]
[), ;, private, static, final, Set, <, String, >, JQUERY_EXTEND_NAMES, =, ImmutableSet, ., of, (, "jQuery.extend", ,, "jQuery.fn.extend", ,, "jQuery.prototype.extend"]
[;, private, static, final, String, JQUERY_EXPANDED_EACH_NAME, =, "jQuery.expandedEach", ;, private, final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases, (, AbstractCompiler, compiler, ), {]
[., of, (, "jQuery.extend", ,, "jQuery.fn.extend", ,, "jQuery.prototype.extend", ), ;, private, static, final, String, JQUERY_EXPANDED_EACH_NAME, =, "jQuery.expandedEach", ;, private, final]
[,, "jQuery.fn.extend", ,, "jQuery.prototype.extend", ), ;, private, static, final, String, JQUERY_EXPANDED_EACH_NAME, =, "jQuery.expandedEach", ;, private, final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases]
[,, "jQuery.prototype.extend", ), ;, private, static, final, String, JQUERY_EXPANDED_EACH_NAME, =, "jQuery.expandedEach", ;, private, final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases, (, AbstractCompiler]
[), ;, private, static, final, String, JQUERY_EXPANDED_EACH_NAME, =, "jQuery.expandedEach", ;, private, final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases, (, AbstractCompiler, compiler, )]
[;, private, final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, .]
[=, compiler, ;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;, final, boolean, late, =, false, ;, this]
[., compiler, =, compiler, ;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;, final, boolean, late, =, false]
[;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;, final, boolean, late, =, false, ;, this, ., peepholePasses]
[=, compiler, ., getCodingConvention, (, ), ;, final, boolean, late, =, false, ;, this, ., peepholePasses, =, new, PeepholeOptimizationsPass, (]
[., convention, =, compiler, ., getCodingConvention, (, ), ;, final, boolean, late, =, false, ;, this, ., peepholePasses, =, new]
[;, final, boolean, late, =, false, ;, this, ., peepholePasses, =, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late]
[., getCodingConvention, (, ), ;, final, boolean, late, =, false, ;, this, ., peepholePasses, =, new, PeepholeOptimizationsPass, (, compiler, ,]
[;, this, ., peepholePasses, =, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late]
[=, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode]
[., peepholePasses, =, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,]
[;, }, public, static, boolean, isJqueryExtendCall, (, Node, n, ,, String, qname, ,, AbstractCompiler, compiler, ), {, if, (, JQUERY_EXTEND_NAMES]
[,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants]
[,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, PeepholeCollectPropertyAssignments]
[), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new]
[,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, public]
[), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }]
[,, new, PeepholeFoldConstants, (, late, ), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, public, static, boolean, isJqueryExtendCall, (, Node]
[,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, public, static, boolean, isJqueryExtendCall, (, Node, n, ,, String, qname, ,, AbstractCompiler]
[), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, public, static, boolean, isJqueryExtendCall, (, Node, n, ,, String, qname, ,]
[), ;, }, public, static, boolean, isJqueryExtendCall, (, Node, n, ,, String, qname, ,, AbstractCompiler, compiler, ), {, if, (]
[), {, Node, firstArgument, =, n, ., getNext, (, ), ;, if, (, firstArgument, ==, null, ), {, return, false]
[., contains, (, qname, ), ), {, Node, firstArgument, =, n, ., getNext, (, ), ;, if, (, firstArgument, ==]
[), ), {, Node, firstArgument, =, n, ., getNext, (, ), ;, if, (, firstArgument, ==, null, ), {, return]
[;, if, (, firstArgument, ==, null, ), {, return, false, ;, }, Node, secondArgument, =, firstArgument, ., getNext, (, )]
[., getNext, (, ), ;, if, (, firstArgument, ==, null, ), {, return, false, ;, }, Node, secondArgument, =, firstArgument]
[), {, return, false, ;, }, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (, (, firstArgument, .]
[==, null, ), {, return, false, ;, }, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (, (]
[), {, return, false, ;, }, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (, (, firstArgument, .]
[;, }, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (, (, firstArgument, ., isObjectLit, (, ), &&]
[;, if, (, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (]
[., getNext, (, ), ;, if, (, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (]
[), {, return, true, ;, }, }, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String, qName]
[||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects, (]
[), ||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects]
[&&, secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&]
[., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet]
[), ||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects]
[==, null, ), ||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil]
[), ||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects]
[), {, return, true, ;, }, }, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String, qName]
[), ), {, return, true, ;, }, }, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String]
[||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&, secondArgument, !=]
[., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler]
[), ), {, return, true, ;, }, }, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String]
[&&, secondArgument, ., getNext, (, ), ==, null, ), ), {, return, true, ;, }, }, return, false, ;, }]
[&&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==, null, ), ), {, return, true, ;]
[&&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==, null, ), )]
[&&, !, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (, )]
[., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&, secondArgument, !=, null, &&]
[), &&, !, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (]
[&&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==, null, ), )]
[&&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==, null, ), )]
[., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, .]
[,, compiler, ), &&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==]
[), &&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==, null, )]
[&&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==, null, ), ), {, return, true, ;]
[!=, null, &&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==, null, ), ), {, return]
[&&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==, null, ), ), {, return, true, ;]
[&&, secondArgument, ., getNext, (, ), ==, null, ), ), {, return, true, ;, }, }, return, false, ;, }]
[., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==, null, ), ), {, return, true, ;, }, }]
[), ), {, return, true, ;, }, }, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String]
[==, null, ), ), {, return, true, ;, }, }, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call]
[., getNext, (, ), ==, null, ), ), {, return, true, ;, }, }, return, false, ;, }, public, boolean]
[), ), {, return, true, ;, }, }, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String]
[;, }, }, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String, qName, ), {, Preconditions, .]
[;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String, qName, ), {, Preconditions, ., checkArgument, (, call, ., isCall]
[;, if, (, call, ., getFirstChild, (, ), !=, null, &&, JQUERY_EXPANDED_EACH_NAME, ., equals, (, qName, ), ), {, return]
[., checkArgument, (, call, ., isCall, (, ), ), ;, if, (, call, ., getFirstChild, (, ), !=, null, &&]
[), ;, if, (, call, ., getFirstChild, (, ), !=, null, &&, JQUERY_EXPANDED_EACH_NAME, ., equals, (, qName, ), ), {]
[., isCall, (, ), ), ;, if, (, call, ., getFirstChild, (, ), !=, null, &&, JQUERY_EXPANDED_EACH_NAME, ., equals, (]
[), {, return, true, ;, }, return, false, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[&&, JQUERY_EXPANDED_EACH_NAME, ., equals, (, qName, ), ), {, return, true, ;, }, return, false, ;, }, @, Override, public]
[!=, null, &&, JQUERY_EXPANDED_EACH_NAME, ., equals, (, qName, ), ), {, return, true, ;, }, return, false, ;, }, @]
[., getFirstChild, (, ), !=, null, &&, JQUERY_EXPANDED_EACH_NAME, ., equals, (, qName, ), ), {, return, true, ;, }, return]
[&&, JQUERY_EXPANDED_EACH_NAME, ., equals, (, qName, ), ), {, return, true, ;, }, return, false, ;, }, @, Override, public]
[), {, return, true, ;, }, return, false, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[., equals, (, qName, ), ), {, return, true, ;, }, return, false, ;, }, @, Override, public, void, visit]
[), ), {, return, true, ;, }, return, false, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[;, }, return, false, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, maybeReplaceJqueryPrototypeAlias, (, n, ), ;, }, else, if, (, n, ., isCall, (, ), ), {, Node, callTarget]
[&&, convention, ., isPrototypeAlias, (, n, ), ), {, maybeReplaceJqueryPrototypeAlias, (, n, ), ;, }, else, if, (, n, .]
[., isGetProp, (, ), &&, convention, ., isPrototypeAlias, (, n, ), ), {, maybeReplaceJqueryPrototypeAlias, (, n, ), ;, }, else]
[), {, maybeReplaceJqueryPrototypeAlias, (, n, ), ;, }, else, if, (, n, ., isCall, (, ), ), {, Node, callTarget]
[., isPrototypeAlias, (, n, ), ), {, maybeReplaceJqueryPrototypeAlias, (, n, ), ;, }, else, if, (, n, ., isCall, (]
[), ), {, maybeReplaceJqueryPrototypeAlias, (, n, ), ;, }, else, if, (, n, ., isCall, (, ), ), {, Node]
[;, }, else, if, (, n, ., isCall, (, ), ), {, Node, callTarget, =, n, ., getFirstChild, (, )]
[), ;, }, else, if, (, n, ., isCall, (, ), ), {, Node, callTarget, =, n, ., getFirstChild, (]
[), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, qName, =, callTarget, ., getQualifiedName, (, ), ;]
[., isCall, (, ), ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, qName, =, callTarget, .]
[;, String, qName, =, callTarget, ., getQualifiedName, (, ), ;, if, (, isJqueryExtendCall, (, callTarget, ,, qName, ,, this, .]
[., getFirstChild, (, ), ;, String, qName, =, callTarget, ., getQualifiedName, (, ), ;, if, (, isJqueryExtendCall, (, callTarget, ,]
[;, if, (, isJqueryExtendCall, (, callTarget, ,, qName, ,, this, ., compiler, ), ), {, maybeExpandJqueryExtendCall, (, n, ), ;]
[., getQualifiedName, (, ), ;, if, (, isJqueryExtendCall, (, callTarget, ,, qName, ,, this, ., compiler, ), ), {, maybeExpandJqueryExtendCall]
[), {, maybeExpandJqueryExtendCall, (, n, ), ;, }, else, if, (, isJqueryExpandedEachCall, (, n, ,, qName, ), ), {, maybeExpandJqueryEachCall]
[,, qName, ,, this, ., compiler, ), ), {, maybeExpandJqueryExtendCall, (, n, ), ;, }, else, if, (, isJqueryExpandedEachCall, (]
[,, this, ., compiler, ), ), {, maybeExpandJqueryExtendCall, (, n, ), ;, }, else, if, (, isJqueryExpandedEachCall, (, n, ,]
[), ), {, maybeExpandJqueryExtendCall, (, n, ), ;, }, else, if, (, isJqueryExpandedEachCall, (, n, ,, qName, ), ), {]
[., compiler, ), ), {, maybeExpandJqueryExtendCall, (, n, ), ;, }, else, if, (, isJqueryExpandedEachCall, (, n, ,, qName, )]
[;, }, else, if, (, isJqueryExpandedEachCall, (, n, ,, qName, ), ), {, maybeExpandJqueryEachCall, (, t, ,, n, ), ;]
[), ;, }, else, if, (, isJqueryExpandedEachCall, (, n, ,, qName, ), ), {, maybeExpandJqueryEachCall, (, t, ,, n, )]
[), {, maybeExpandJqueryEachCall, (, t, ,, n, ), ;, }, }, }, @, Override, public, void, process, (, Node, externs]
[,, qName, ), ), {, maybeExpandJqueryEachCall, (, t, ,, n, ), ;, }, }, }, @, Override, public, void, process]
[), ), {, maybeExpandJqueryEachCall, (, t, ,, n, ), ;, }, }, }, @, Override, public, void, process, (, Node]
[;, }, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine]
[,, n, ), ;, }, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, .]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, private, void, maybeReplaceJqueryPrototypeAlias, (, Node, n, )]
[., fine, (, "Expanding Jquery Aliases", ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, private, void]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, private, void, maybeReplaceJqueryPrototypeAlias, (, Node, n]
[;, }, private, void, maybeReplaceJqueryPrototypeAlias, (, Node, n, ), {, if, (, NodeUtil, ., isLValue, (, n, ), ), {]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, private, void, maybeReplaceJqueryPrototypeAlias, (, Node, n, ), {, if]
[,, root, ,, this, ), ;, }, private, void, maybeReplaceJqueryPrototypeAlias, (, Node, n, ), {, if, (, NodeUtil, ., isLValue]
[,, this, ), ;, }, private, void, maybeReplaceJqueryPrototypeAlias, (, Node, n, ), {, if, (, NodeUtil, ., isLValue, (, n]
[), ;, }, private, void, maybeReplaceJqueryPrototypeAlias, (, Node, n, ), {, if, (, NodeUtil, ., isLValue, (, n, ), )]
[), {, Node, maybeAssign, =, n, ., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatement, (, maybeAssign, )]
[., isLValue, (, n, ), ), {, Node, maybeAssign, =, n, ., getParent, (, ), ;, while, (, !, NodeUtil]
[), ), {, Node, maybeAssign, =, n, ., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatement, (, maybeAssign]
[;, while, (, !, NodeUtil, ., isStatement, (, maybeAssign, ), &&, !, maybeAssign, ., isAssign, (, ), ), {, maybeAssign]
[., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatement, (, maybeAssign, ), &&, !, maybeAssign, ., isAssign, (]
[), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if, (, maybeAssign, ., isAssign, (, ), ), {]
[&&, !, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if, (]
[&&, !, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if, (]
[., isStatement, (, maybeAssign, ), &&, !, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (]
[), &&, !, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if]
[), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if, (, maybeAssign, ., isAssign, (, ), ), {]
[), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if, (, maybeAssign, ., isAssign, (, ), ), {]
[., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if, (, maybeAssign, ., isAssign]
[=, maybeAssign, ., getParent, (, ), ;, }, if, (, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign]
[;, }, if, (, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, if]
[., getParent, (, ), ;, }, if, (, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent]
[), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, if, (, maybeAssign, ., isBlock, (, ), ||, maybeAssign, .]
[., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, if, (, maybeAssign, ., isBlock, (]
[=, maybeAssign, ., getParent, (, ), ;, if, (, maybeAssign, ., isBlock, (, ), ||, maybeAssign, ., isScript, (, )]
[;, if, (, maybeAssign, ., isBlock, (, ), ||, maybeAssign, ., isScript, (, ), ||, NodeUtil, ., isStatement, (, maybeAssign]
[., getParent, (, ), ;, if, (, maybeAssign, ., isBlock, (, ), ||, maybeAssign, ., isScript, (, ), ||, NodeUtil]
[), {, return, ;, }, }, }, Node, fn, =, n, ., getLastChild, (, ), ;, if, (, fn, !=]
[||, NodeUtil, ., isStatement, (, maybeAssign, ), ), {, return, ;, }, }, }, Node, fn, =, n, ., getLastChild]
[||, maybeAssign, ., isScript, (, ), ||, NodeUtil, ., isStatement, (, maybeAssign, ), ), {, return, ;, }, }, }]
[., isBlock, (, ), ||, maybeAssign, ., isScript, (, ), ||, NodeUtil, ., isStatement, (, maybeAssign, ), ), {, return]
[||, NodeUtil, ., isStatement, (, maybeAssign, ), ), {, return, ;, }, }, }, Node, fn, =, n, ., getLastChild]
[., isScript, (, ), ||, NodeUtil, ., isStatement, (, maybeAssign, ), ), {, return, ;, }, }, }, Node, fn]
[), {, return, ;, }, }, }, Node, fn, =, n, ., getLastChild, (, ), ;, if, (, fn, !=]
[., isStatement, (, maybeAssign, ), ), {, return, ;, }, }, }, Node, fn, =, n, ., getLastChild, (, )]
[), ), {, return, ;, }, }, }, Node, fn, =, n, ., getLastChild, (, ), ;, if, (, fn]
[;, if, (, fn, !=, null, ), {, n, ., replaceChild, (, fn, ,, IR, ., string, (, "prototype", )]
[., getLastChild, (, ), ;, if, (, fn, !=, null, ), {, n, ., replaceChild, (, fn, ,, IR, .]
[), {, n, ., replaceChild, (, fn, ,, IR, ., string, (, "prototype", ), ), ;, compiler, ., reportCodeChange, (]
[!=, null, ), {, n, ., replaceChild, (, fn, ,, IR, ., string, (, "prototype", ), ), ;, compiler, .]
[), {, n, ., replaceChild, (, fn, ,, IR, ., string, (, "prototype", ), ), ;, compiler, ., reportCodeChange, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, maybeExpandJqueryExtendCall, (, Node, n, ), {, Node, callTarget, =]
[., replaceChild, (, fn, ,, IR, ., string, (, "prototype", ), ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[,, IR, ., string, (, "prototype", ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, maybeExpandJqueryExtendCall]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, maybeExpandJqueryExtendCall, (, Node, n, ), {, Node, callTarget]
[., string, (, "prototype", ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, maybeExpandJqueryExtendCall, (, Node]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, maybeExpandJqueryExtendCall, (, Node, n, ), {, Node]
[;, }, }, private, void, maybeExpandJqueryExtendCall, (, Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;]
[., reportCodeChange, (, ), ;, }, }, private, void, maybeExpandJqueryExtendCall, (, Node, n, ), {, Node, callTarget, =, n, .]
[;, Node, objectToExtend, =, callTarget, ., getNext, (, ), ;, Node, extendArg, =, objectToExtend, ., getNext, (, ), ;, boolean]
[., getFirstChild, (, ), ;, Node, objectToExtend, =, callTarget, ., getNext, (, ), ;, Node, extendArg, =, objectToExtend, ., getNext]
[;, Node, extendArg, =, objectToExtend, ., getNext, (, ), ;, boolean, ensureObjectDefined, =, true, ;, if, (, extendArg, ==, null]
[., getNext, (, ), ;, Node, extendArg, =, objectToExtend, ., getNext, (, ), ;, boolean, ensureObjectDefined, =, true, ;, if]
[;, boolean, ensureObjectDefined, =, true, ;, if, (, extendArg, ==, null, ), {, extendArg, =, objectToExtend, ;, objectToExtend, =, callTarget]
[., getNext, (, ), ;, boolean, ensureObjectDefined, =, true, ;, if, (, extendArg, ==, null, ), {, extendArg, =, objectToExtend]
[;, if, (, extendArg, ==, null, ), {, extendArg, =, objectToExtend, ;, objectToExtend, =, callTarget, ., getFirstChild, (, ), ;]
[), {, extendArg, =, objectToExtend, ;, objectToExtend, =, callTarget, ., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else]
[==, null, ), {, extendArg, =, objectToExtend, ;, objectToExtend, =, callTarget, ., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;]
[), {, extendArg, =, objectToExtend, ;, objectToExtend, =, callTarget, ., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else]
[=, objectToExtend, ;, objectToExtend, =, callTarget, ., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (, objectToExtend]
[;, objectToExtend, =, callTarget, ., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (, objectToExtend, ., isGetProp]
[=, callTarget, ., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (, objectToExtend, ., isGetProp, (, )]
[;, ensureObjectDefined, =, false, ;, }, else, if, (, objectToExtend, ., isGetProp, (, ), &&, (, objectToExtend, ., getLastChild, (]
[., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (, objectToExtend, ., isGetProp, (, ), &&, (]
[=, false, ;, }, else, if, (, objectToExtend, ., isGetProp, (, ), &&, (, objectToExtend, ., getLastChild, (, ), .]
[;, }, else, if, (, objectToExtend, ., isGetProp, (, ), &&, (, objectToExtend, ., getLastChild, (, ), ., getString, (]
[), {, ensureObjectDefined, =, false, ;, }, if, (, !, extendArg, ., hasChildren, (, ), ), {, return, ;, }]
[&&, (, objectToExtend, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ||, convention, ., isPrototypeAlias]
[., isGetProp, (, ), &&, (, objectToExtend, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", )]
[), {, ensureObjectDefined, =, false, ;, }, if, (, !, extendArg, ., hasChildren, (, ), ), {, return, ;, }]
[), ), {, ensureObjectDefined, =, false, ;, }, if, (, !, extendArg, ., hasChildren, (, ), ), {, return, ;]
[||, convention, ., isPrototypeAlias, (, objectToExtend, ), ), ), {, ensureObjectDefined, =, false, ;, }, if, (, !, extendArg, .]
[., equals, (, "prototype", ), ||, convention, ., isPrototypeAlias, (, objectToExtend, ), ), ), {, ensureObjectDefined, =, false, ;, }]
[., getString, (, ), ., equals, (, "prototype", ), ||, convention, ., isPrototypeAlias, (, objectToExtend, ), ), ), {, ensureObjectDefined]
[., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ||, convention, ., isPrototypeAlias, (, objectToExtend, )]
[), ||, convention, ., isPrototypeAlias, (, objectToExtend, ), ), ), {, ensureObjectDefined, =, false, ;, }, if, (, !, extendArg]
[), ), {, ensureObjectDefined, =, false, ;, }, if, (, !, extendArg, ., hasChildren, (, ), ), {, return, ;]
[., isPrototypeAlias, (, objectToExtend, ), ), ), {, ensureObjectDefined, =, false, ;, }, if, (, !, extendArg, ., hasChildren, (]
[), ), ), {, ensureObjectDefined, =, false, ;, }, if, (, !, extendArg, ., hasChildren, (, ), ), {, return]
[=, false, ;, }, if, (, !, extendArg, ., hasChildren, (, ), ), {, return, ;, }, Node, fncBlock, =]
[;, }, if, (, !, extendArg, ., hasChildren, (, ), ), {, return, ;, }, Node, fncBlock, =, IR, .]
[), {, return, ;, }, Node, fncBlock, =, IR, ., block, (, ), ., srcref, (, n, ), ;, if]
[), {, return, ;, }, Node, fncBlock, =, IR, ., block, (, ), ., srcref, (, n, ), ;, if]
[., hasChildren, (, ), ), {, return, ;, }, Node, fncBlock, =, IR, ., block, (, ), ., srcref, (]
[;, if, (, ensureObjectDefined, ), {, Node, assignVal, =, IR, ., or, (, objectToExtend, ., cloneTree, (, ), ,, IR]
[., srcref, (, n, ), ;, if, (, ensureObjectDefined, ), {, Node, assignVal, =, IR, ., or, (, objectToExtend, .]
[., block, (, ), ., srcref, (, n, ), ;, if, (, ensureObjectDefined, ), {, Node, assignVal, =, IR, .]
[), ;, if, (, ensureObjectDefined, ), {, Node, assignVal, =, IR, ., or, (, objectToExtend, ., cloneTree, (, ), ,]
[), {, Node, assignVal, =, IR, ., or, (, objectToExtend, ., cloneTree, (, ), ,, IR, ., objectlit, (, )]
[;, Node, assign, =, IR, ., assign, (, objectToExtend, ., cloneTree, (, ), ,, assignVal, ), ., srcref, (, n]
[., srcref, (, n, ), ;, Node, assign, =, IR, ., assign, (, objectToExtend, ., cloneTree, (, ), ,, assignVal]
[., or, (, objectToExtend, ., cloneTree, (, ), ,, IR, ., objectlit, (, ), ., srcref, (, n, ), )]
[,, IR, ., objectlit, (, ), ., srcref, (, n, ), ), ., srcref, (, n, ), ;, Node, assign]
[., cloneTree, (, ), ,, IR, ., objectlit, (, ), ., srcref, (, n, ), ), ., srcref, (, n]
[), ., srcref, (, n, ), ;, Node, assign, =, IR, ., assign, (, objectToExtend, ., cloneTree, (, ), ,]
[., srcref, (, n, ), ), ., srcref, (, n, ), ;, Node, assign, =, IR, ., assign, (, objectToExtend]
[., objectlit, (, ), ., srcref, (, n, ), ), ., srcref, (, n, ), ;, Node, assign, =, IR]
[), ), ., srcref, (, n, ), ;, Node, assign, =, IR, ., assign, (, objectToExtend, ., cloneTree, (, )]
[), ;, Node, assign, =, IR, ., assign, (, objectToExtend, ., cloneTree, (, ), ,, assignVal, ), ., srcref, (]
[;, fncBlock, ., addChildrenToFront, (, IR, ., exprResult, (, assign, ), ., srcref, (, n, ), ), ;, }, while]
[., srcref, (, n, ), ;, fncBlock, ., addChildrenToFront, (, IR, ., exprResult, (, assign, ), ., srcref, (, n]
[., assign, (, objectToExtend, ., cloneTree, (, ), ,, assignVal, ), ., srcref, (, n, ), ;, fncBlock, ., addChildrenToFront]
[,, assignVal, ), ., srcref, (, n, ), ;, fncBlock, ., addChildrenToFront, (, IR, ., exprResult, (, assign, ), .]
[., cloneTree, (, ), ,, assignVal, ), ., srcref, (, n, ), ;, fncBlock, ., addChildrenToFront, (, IR, ., exprResult]
[), ., srcref, (, n, ), ;, fncBlock, ., addChildrenToFront, (, IR, ., exprResult, (, assign, ), ., srcref, (]
[), ;, fncBlock, ., addChildrenToFront, (, IR, ., exprResult, (, assign, ), ., srcref, (, n, ), ), ;, }]
[;, }, while, (, extendArg, ., hasChildren, (, ), ), {, Node, currentProp, =, extendArg, ., removeFirstChild, (, ), ;]
[., addChildrenToFront, (, IR, ., exprResult, (, assign, ), ., srcref, (, n, ), ), ;, }, while, (, extendArg]
[), ;, }, while, (, extendArg, ., hasChildren, (, ), ), {, Node, currentProp, =, extendArg, ., removeFirstChild, (, )]
[., srcref, (, n, ), ), ;, }, while, (, extendArg, ., hasChildren, (, ), ), {, Node, currentProp, =]
[., exprResult, (, assign, ), ., srcref, (, n, ), ), ;, }, while, (, extendArg, ., hasChildren, (, )]
[), ., srcref, (, n, ), ), ;, }, while, (, extendArg, ., hasChildren, (, ), ), {, Node, currentProp]
[), ), ;, }, while, (, extendArg, ., hasChildren, (, ), ), {, Node, currentProp, =, extendArg, ., removeFirstChild, (]
[), {, Node, currentProp, =, extendArg, ., removeFirstChild, (, ), ;, currentProp, ., setType, (, Token, ., STRING, ), ;]
[., hasChildren, (, ), ), {, Node, currentProp, =, extendArg, ., removeFirstChild, (, ), ;, currentProp, ., setType, (, Token]
[;, currentProp, ., setType, (, Token, ., STRING, ), ;, Node, propValue, =, currentProp, ., removeFirstChild, (, ), ;, Node]
[., removeFirstChild, (, ), ;, currentProp, ., setType, (, Token, ., STRING, ), ;, Node, propValue, =, currentProp, ., removeFirstChild]
[;, Node, propValue, =, currentProp, ., removeFirstChild, (, ), ;, Node, newProp, ;, if, (, currentProp, ., isQuotedString, (, )]
[., setType, (, Token, ., STRING, ), ;, Node, propValue, =, currentProp, ., removeFirstChild, (, ), ;, Node, newProp, ;]
[), ;, Node, propValue, =, currentProp, ., removeFirstChild, (, ), ;, Node, newProp, ;, if, (, currentProp, ., isQuotedString, (]
[., STRING, ), ;, Node, propValue, =, currentProp, ., removeFirstChild, (, ), ;, Node, newProp, ;, if, (, currentProp, .]
[;, Node, newProp, ;, if, (, currentProp, ., isQuotedString, (, ), ), {, newProp, =, IR, ., getelem, (, objectToExtend]
[., removeFirstChild, (, ), ;, Node, newProp, ;, if, (, currentProp, ., isQuotedString, (, ), ), {, newProp, =, IR]
[), {, newProp, =, IR, ., getelem, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp]
[., isQuotedString, (, ), ), {, newProp, =, IR, ., getelem, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, )]
[=, IR, ., getelem, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }]
[;, }, else, {, newProp, =, IR, ., getprop, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref]
[., srcref, (, currentProp, ), ;, }, else, {, newProp, =, IR, ., getprop, (, objectToExtend, ., cloneTree, (, )]
[., getelem, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, else, {]
[,, currentProp, ), ., srcref, (, currentProp, ), ;, }, else, {, newProp, =, IR, ., getprop, (, objectToExtend, .]
[., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, else, {, newProp, =, IR, .]
[), ., srcref, (, currentProp, ), ;, }, else, {, newProp, =, IR, ., getprop, (, objectToExtend, ., cloneTree, (]
[), ;, }, else, {, newProp, =, IR, ., getprop, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), .]
[=, IR, ., getprop, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }]
[;, }, Node, assignNode, =, IR, ., assign, (, newProp, ,, propValue, ), ., srcref, (, currentProp, ), ;, fncBlock]
[., srcref, (, currentProp, ), ;, }, Node, assignNode, =, IR, ., assign, (, newProp, ,, propValue, ), ., srcref]
[., getprop, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, Node, assignNode]
[,, currentProp, ), ., srcref, (, currentProp, ), ;, }, Node, assignNode, =, IR, ., assign, (, newProp, ,, propValue]
[., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, Node, assignNode, =, IR, ., assign]
[), ., srcref, (, currentProp, ), ;, }, Node, assignNode, =, IR, ., assign, (, newProp, ,, propValue, ), .]
[), ;, }, Node, assignNode, =, IR, ., assign, (, newProp, ,, propValue, ), ., srcref, (, currentProp, ), ;]
[;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, assignNode, ), ., srcref, (, currentProp, ), ), ;, }, if]
[., srcref, (, currentProp, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, assignNode, ), ., srcref, (, currentProp]
[., assign, (, newProp, ,, propValue, ), ., srcref, (, currentProp, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult]
[,, propValue, ), ., srcref, (, currentProp, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, assignNode, ), .]
[), ., srcref, (, currentProp, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, assignNode, ), ., srcref, (]
[), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, assignNode, ), ., srcref, (, currentProp, ), ), ;, }]
[;, }, if, (, n, ., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =, n, .]
[., addChildToBack, (, IR, ., exprResult, (, assignNode, ), ., srcref, (, currentProp, ), ), ;, }, if, (, n]
[), ;, }, if, (, n, ., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =, n]
[., srcref, (, currentProp, ), ), ;, }, if, (, n, ., getParent, (, ), ., isExprResult, (, ), )]
[., exprResult, (, assignNode, ), ., srcref, (, currentProp, ), ), ;, }, if, (, n, ., getParent, (, )]
[), ., srcref, (, currentProp, ), ), ;, }, if, (, n, ., getParent, (, ), ., isExprResult, (, )]
[), ), ;, }, if, (, n, ., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =]
[), {, Node, parent, =, n, ., getParent, (, ), ;, parent, ., getParent, (, ), ., replaceChild, (, parent]
[., isExprResult, (, ), ), {, Node, parent, =, n, ., getParent, (, ), ;, parent, ., getParent, (, )]
[., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =, n, ., getParent, (, ), ;, parent]
[;, parent, ., getParent, (, ), ., replaceChild, (, parent, ,, fncBlock, ), ;, }, else, {, Node, targetVal, ;]
[., getParent, (, ), ;, parent, ., getParent, (, ), ., replaceChild, (, parent, ,, fncBlock, ), ;, }, else]
[;, }, else, {, Node, targetVal, ;, if, (, "jQuery.prototype", ., equals, (, objectToExtend, ., getQualifiedName, (, ), ), )]
[., replaceChild, (, parent, ,, fncBlock, ), ;, }, else, {, Node, targetVal, ;, if, (, "jQuery.prototype", ., equals, (]
[., getParent, (, ), ., replaceChild, (, parent, ,, fncBlock, ), ;, }, else, {, Node, targetVal, ;, if, (]
[,, fncBlock, ), ;, }, else, {, Node, targetVal, ;, if, (, "jQuery.prototype", ., equals, (, objectToExtend, ., getQualifiedName, (]
[), ;, }, else, {, Node, targetVal, ;, if, (, "jQuery.prototype", ., equals, (, objectToExtend, ., getQualifiedName, (, ), )]
[), {, targetVal, =, objectToExtend, ., removeFirstChild, (, ), ;, }, else, {, targetVal, =, objectToExtend, ., detachFromParent, (, )]
[., equals, (, objectToExtend, ., getQualifiedName, (, ), ), ), {, targetVal, =, objectToExtend, ., removeFirstChild, (, ), ;, }]
[), ), {, targetVal, =, objectToExtend, ., removeFirstChild, (, ), ;, }, else, {, targetVal, =, objectToExtend, ., detachFromParent, (]
[., getQualifiedName, (, ), ), ), {, targetVal, =, objectToExtend, ., removeFirstChild, (, ), ;, }, else, {, targetVal, =]
[=, objectToExtend, ., removeFirstChild, (, ), ;, }, else, {, targetVal, =, objectToExtend, ., detachFromParent, (, ), ;, }, fncBlock]
[;, }, else, {, targetVal, =, objectToExtend, ., detachFromParent, (, ), ;, }, fncBlock, ., addChildToBack, (, IR, ., returnNode]
[., removeFirstChild, (, ), ;, }, else, {, targetVal, =, objectToExtend, ., detachFromParent, (, ), ;, }, fncBlock, ., addChildToBack]
[=, objectToExtend, ., detachFromParent, (, ), ;, }, fncBlock, ., addChildToBack, (, IR, ., returnNode, (, targetVal, ), ., srcref]
[;, }, fncBlock, ., addChildToBack, (, IR, ., returnNode, (, targetVal, ), ., srcref, (, targetVal, ), ), ;, Node]
[., detachFromParent, (, ), ;, }, fncBlock, ., addChildToBack, (, IR, ., returnNode, (, targetVal, ), ., srcref, (, targetVal]
[;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, n, ), ,]
[., addChildToBack, (, IR, ., returnNode, (, targetVal, ), ., srcref, (, targetVal, ), ), ;, Node, fnc, =, IR]
[), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, n, )]
[., srcref, (, targetVal, ), ), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", )]
[., returnNode, (, targetVal, ), ., srcref, (, targetVal, ), ), ;, Node, fnc, =, IR, ., function, (, IR]
[), ., srcref, (, targetVal, ), ), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (, ""]
[), ), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, n]
[;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[., function, (, IR, ., name, (, "", ), ., srcref, (, n, ), ,, IR, ., paramList, (, )]
[,, IR, ., paramList, (, ), ., srcref, (, n, ), ,, fncBlock, ), ;, n, ., replaceChild, (, callTarget]
[., srcref, (, n, ), ,, IR, ., paramList, (, ), ., srcref, (, n, ), ,, fncBlock, ), ;]
[., name, (, "", ), ., srcref, (, n, ), ,, IR, ., paramList, (, ), ., srcref, (, n]
[), ., srcref, (, n, ), ,, IR, ., paramList, (, ), ., srcref, (, n, ), ,, fncBlock, )]
[), ,, IR, ., paramList, (, ), ., srcref, (, n, ), ,, fncBlock, ), ;, n, ., replaceChild, (]
[,, fncBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL]
[., srcref, (, n, ), ,, fncBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, .]
[., paramList, (, ), ., srcref, (, n, ), ,, fncBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc]
[), ,, fncBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, .]
[), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true]
[;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=]
[., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while]
[,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext]
[), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, )]
[;, while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;, }]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, )]
[,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc]
[., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter]
[), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;]
[), {, n, ., removeChildAfter, (, fnc, ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, private, void]
[!=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }]
[., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;, }, }, compiler, ., reportCodeChange]
[), {, n, ., removeChildAfter, (, fnc, ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, private, void]
[;, }, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, maybeExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n, )]
[., removeChildAfter, (, fnc, ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, maybeExpandJqueryEachCall, (, NodeTraversal]
[), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, maybeExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n]
[;, }, private, void, maybeExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, objectToLoopOver, =, n, ., getChildAtIndex, (]
[., reportCodeChange, (, ), ;, }, private, void, maybeExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, objectToLoopOver, =]
[;, if, (, objectToLoopOver, ==, null, ), {, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, ), ;]
[., getChildAtIndex, (, 1, ), ;, if, (, objectToLoopOver, ==, null, ), {, return, ;, }, Node, callbackFunction, =, objectToLoopOver]
[), ;, if, (, objectToLoopOver, ==, null, ), {, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, )]
[), {, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, ), ;, if, (, callbackFunction, ==, null, ||]
[==, null, ), {, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, ), ;, if, (, callbackFunction, ==]
[), {, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, ), ;, if, (, callbackFunction, ==, null, ||]
[;, if, (, callbackFunction, ==, null, ||, !, callbackFunction, ., isFunction, (, ), ), {, return, ;, }, peepholePasses, .]
[., getNext, (, ), ;, if, (, callbackFunction, ==, null, ||, !, callbackFunction, ., isFunction, (, ), ), {, return]
[), {, return, ;, }, peepholePasses, ., process, (, null, ,, n, ., getChildAtIndex, (, 1, ), ), ;, Node]
[||, !, callbackFunction, ., isFunction, (, ), ), {, return, ;, }, peepholePasses, ., process, (, null, ,, n, .]
[==, null, ||, !, callbackFunction, ., isFunction, (, ), ), {, return, ;, }, peepholePasses, ., process, (, null, ,]
[||, !, callbackFunction, ., isFunction, (, ), ), {, return, ;, }, peepholePasses, ., process, (, null, ,, n, .]
[), {, return, ;, }, peepholePasses, ., process, (, null, ,, n, ., getChildAtIndex, (, 1, ), ), ;, Node]
[), {, return, ;, }, peepholePasses, ., process, (, null, ,, n, ., getChildAtIndex, (, 1, ), ), ;, Node]
[., isFunction, (, ), ), {, return, ;, }, peepholePasses, ., process, (, null, ,, n, ., getChildAtIndex, (, 1]
[;, Node, nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if]
[., process, (, null, ,, n, ., getChildAtIndex, (, 1, ), ), ;, Node, nClone, =, n, ., cloneTree, (]
[,, n, ., getChildAtIndex, (, 1, ), ), ;, Node, nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =]
[), ;, Node, nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;]
[., getChildAtIndex, (, 1, ), ), ;, Node, nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =, nClone, .]
[), ), ;, Node, nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, )]
[;, objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&, !]
[., cloneTree, (, ), ;, objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if, (, !, objectToLoopOver, ., isObjectLit]
[=, nClone, ., getChildAtIndex, (, 1, ), ;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&, !, (, objectToLoopOver]
[;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&, !, (, objectToLoopOver, ., isArrayLit, (, ), &&, isArrayLitValidForExpansion, (]
[., getChildAtIndex, (, 1, ), ;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&, !, (, objectToLoopOver, ., isArrayLit]
[), ;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&, !, (, objectToLoopOver, ., isArrayLit, (, ), &&, isArrayLitValidForExpansion]
[), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, ), null, ), ;, return, ;, }, List]
[&&, !, (, objectToLoopOver, ., isArrayLit, (, ), &&, isArrayLitValidForExpansion, (, objectToLoopOver, ), ), ), {, t, ., report, (]
[&&, !, (, objectToLoopOver, ., isArrayLit, (, ), &&, isArrayLitValidForExpansion, (, objectToLoopOver, ), ), ), {, t, ., report, (]
[., isObjectLit, (, ), &&, !, (, objectToLoopOver, ., isArrayLit, (, ), &&, isArrayLitValidForExpansion, (, objectToLoopOver, ), ), ), {]
[), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, ), null, ), ;, return, ;, }, List]
[), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, ), null, ), ;, return, ;, }, List]
[), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, ), null, ), ;, return, ;, }]
[&&, isArrayLitValidForExpansion, (, objectToLoopOver, ), ), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, ), null]
[., isArrayLit, (, ), &&, isArrayLitValidForExpansion, (, objectToLoopOver, ), ), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,]
[), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, ), null, ), ;, return, ;, }]
[), ), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, ), null, ), ;, return, ;]
[;, return, ;, }, List, <, Node, >, keyNodeReferences, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >]
[., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, ), null, ), ;, return, ;, }, List, <, Node, >]
[,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, ), null, ), ;, return, ;, }, List, <, Node, >, keyNodeReferences, =, Lists, .]
[,, (, String, ), null, ), ;, return, ;, }, List, <, Node, >, keyNodeReferences, =, Lists, ., newArrayList, (]
[), ;, return, ;, }, List, <, Node, >, keyNodeReferences, =, Lists, ., newArrayList, (, ), ;, List, <, Node]
[), ;, return, ;, }, List, <, Node, >, keyNodeReferences, =, Lists, ., newArrayList, (, ), ;, List, <, Node]
[;, List, <, Node, >, valueNodeReferences, =, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, NodeUtil]
[., newArrayList, (, ), ;, List, <, Node, >, valueNodeReferences, =, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse]
[;, NodeTraversal, ., traverse, (, compiler, ,, NodeUtil, ., getFunctionBody, (, callbackFunction, ), ,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences]
[., newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, NodeUtil, ., getFunctionBody, (, callbackFunction, ), ,, new, FindCallbackArgumentReferences]
[;, if, (, keyNodeReferences, ., size, (, ), ==, 0, ), {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,]
[., traverse, (, compiler, ,, NodeUtil, ., getFunctionBody, (, callbackFunction, ), ,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences]
[,, NodeUtil, ., getFunctionBody, (, callbackFunction, ), ,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ,, objectToLoopOver, ., isArrayLit]
[,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ,, objectToLoopOver, ., isArrayLit, (, ), ), ), ;, if, (]
[., getFunctionBody, (, callbackFunction, ), ,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ,, objectToLoopOver, ., isArrayLit, (, )]
[), ,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ,, objectToLoopOver, ., isArrayLit, (, ), ), ), ;, if]
[), ;, if, (, keyNodeReferences, ., size, (, ), ==, 0, ), {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION]
[,, keyNodeReferences, ,, valueNodeReferences, ,, objectToLoopOver, ., isArrayLit, (, ), ), ), ;, if, (, keyNodeReferences, ., size, (, )]
[,, valueNodeReferences, ,, objectToLoopOver, ., isArrayLit, (, ), ), ), ;, if, (, keyNodeReferences, ., size, (, ), ==, 0]
[,, objectToLoopOver, ., isArrayLit, (, ), ), ), ;, if, (, keyNodeReferences, ., size, (, ), ==, 0, ), {]
[), ), ;, if, (, keyNodeReferences, ., size, (, ), ==, 0, ), {, t, ., report, (, n, ,]
[., isArrayLit, (, ), ), ), ;, if, (, keyNodeReferences, ., size, (, ), ==, 0, ), {, t, .]
[), {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, return, ;, }, Node]
[==, 0, ), {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, return, ;]
[., size, (, ), ==, 0, ), {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null]
[), {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, return, ;, }, Node]
[;, return, ;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ), ;]
[., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, return, ;, }, Node, fncBlock, =, tryExpandJqueryEachCall]
[,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, return, ;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone]
[,, (, String, ), null, ), ;, return, ;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction]
[), ;, return, ;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, )]
[), ;, return, ;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, )]
[;, if, (, fncBlock, !=, null, &&, fncBlock, ., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, )]
[,, nClone, ,, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ), ;, if, (, fncBlock, !=, null, &&, fncBlock, ., hasChildren, (]
[,, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ), ;, if, (, fncBlock, !=, null, &&, fncBlock, ., hasChildren, (, ), )]
[,, keyNodeReferences, ,, valueNodeReferences, ), ;, if, (, fncBlock, !=, null, &&, fncBlock, ., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall]
[,, valueNodeReferences, ), ;, if, (, fncBlock, !=, null, &&, fncBlock, ., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (, n]
[), ;, if, (, fncBlock, !=, null, &&, fncBlock, ., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock]
[), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, ), ;, }, else, {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,]
[&&, fncBlock, ., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, ), ;, }, else, {, t, .]
[!=, null, &&, fncBlock, ., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, ), ;, }, else, {]
[&&, fncBlock, ., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, ), ;, }, else, {, t, .]
[), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, ), ;, }, else, {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,]
[., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, ), ;, }, else, {, t, ., report, (]
[;, }, else, {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, }, }]
[,, fncBlock, ), ;, }, else, {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, )]
[), ;, }, else, {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, }]
[;, }, }, private, Node, tryExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n, ,, Node, callbackFunction, ,, List, <, Node, >]
[., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, }, }, private, Node, tryExpandJqueryEachCall, (, NodeTraversal]
[,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, }, }, private, Node, tryExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n]
[,, (, String, ), null, ), ;, }, }, private, Node, tryExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n, ,, Node]
[), ;, }, }, private, Node, tryExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n, ,, Node, callbackFunction, ,, List, <, Node]
[), ;, }, }, private, Node, tryExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n, ,, Node, callbackFunction, ,, List, <, Node]
[;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;, Node, fncBlock, =, IR, ., block, (, ), ., srcref]
[., getFirstChild, (, ), ;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;, Node, fncBlock, =, IR, ., block]
[;, Node, fncBlock, =, IR, ., block, (, ), ., srcref, (, callTarget, ), ;, boolean, isValidExpansion, =, true, ;]
[., getNext, (, ), ;, Node, fncBlock, =, IR, ., block, (, ), ., srcref, (, callTarget, ), ;, boolean]
[;, boolean, isValidExpansion, =, true, ;, Node, key, =, objectToLoopOver, ., getFirstChild, (, ), ,, val, =, null, ;, for]
[., srcref, (, callTarget, ), ;, boolean, isValidExpansion, =, true, ;, Node, key, =, objectToLoopOver, ., getFirstChild, (, ), ,]
[., block, (, ), ., srcref, (, callTarget, ), ;, boolean, isValidExpansion, =, true, ;, Node, key, =, objectToLoopOver, .]
[), ;, boolean, isValidExpansion, =, true, ;, Node, key, =, objectToLoopOver, ., getFirstChild, (, ), ,, val, =, null, ;]
[;, Node, key, =, objectToLoopOver, ., getFirstChild, (, ), ,, val, =, null, ;, for, (, int, i, =, 0]
[,, val, =, null, ;, for, (, int, i, =, 0, ;, key, !=, null, ;, key, =, key, .]
[., getFirstChild, (, ), ,, val, =, null, ;, for, (, int, i, =, 0, ;, key, !=, null, ;]
[;, for, (, int, i, =, 0, ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ,]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ,, i, ++, ), {, if, (, key]
[;, key, =, key, ., getNext, (, ), ,, i, ++, ), {, if, (, key, !=, null, ), {]
[!=, null, ;, key, =, key, ., getNext, (, ), ,, i, ++, ), {, if, (, key, !=, null]
[;, key, =, key, ., getNext, (, ), ,, i, ++, ), {, if, (, key, !=, null, ), {]
[=, key, ., getNext, (, ), ,, i, ++, ), {, if, (, key, !=, null, ), {, if, (]
[,, i, ++, ), {, if, (, key, !=, null, ), {, if, (, objectToLoopOver, ., isArrayLit, (, ), )]
[., getNext, (, ), ,, i, ++, ), {, if, (, key, !=, null, ), {, if, (, objectToLoopOver, .]
[), {, if, (, key, !=, null, ), {, if, (, objectToLoopOver, ., isArrayLit, (, ), ), {, val, =]
[++, ), {, if, (, key, !=, null, ), {, if, (, objectToLoopOver, ., isArrayLit, (, ), ), {, val]
[), {, if, (, objectToLoopOver, ., isArrayLit, (, ), ), {, val, =, IR, ., number, (, i, ), .]
[!=, null, ), {, if, (, objectToLoopOver, ., isArrayLit, (, ), ), {, val, =, IR, ., number, (, i]
[), {, if, (, objectToLoopOver, ., isArrayLit, (, ), ), {, val, =, IR, ., number, (, i, ), .]
[), {, val, =, IR, ., number, (, i, ), ., srcref, (, key, ), ;, }, else, {, val]
[., isArrayLit, (, ), ), {, val, =, IR, ., number, (, i, ), ., srcref, (, key, ), ;]
[=, IR, ., number, (, i, ), ., srcref, (, key, ), ;, }, else, {, val, =, key, .]
[;, }, else, {, val, =, key, ., getFirstChild, (, ), ;, }, }, List, <, Node, >, newKeys, =]
[., srcref, (, key, ), ;, }, else, {, val, =, key, ., getFirstChild, (, ), ;, }, }, List]
[., number, (, i, ), ., srcref, (, key, ), ;, }, else, {, val, =, key, ., getFirstChild, (]
[), ., srcref, (, key, ), ;, }, else, {, val, =, key, ., getFirstChild, (, ), ;, }, }]
[), ;, }, else, {, val, =, key, ., getFirstChild, (, ), ;, }, }, List, <, Node, >, newKeys]
[=, key, ., getFirstChild, (, ), ;, }, }, List, <, Node, >, newKeys, =, Lists, ., newArrayList, (, )]
[;, }, }, List, <, Node, >, newKeys, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, newValues]
[., getFirstChild, (, ), ;, }, }, List, <, Node, >, newKeys, =, Lists, ., newArrayList, (, ), ;, List]
[;, List, <, Node, >, newValues, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, origGetElems, =, Lists]
[., newArrayList, (, ), ;, List, <, Node, >, newValues, =, Lists, ., newArrayList, (, ), ;, List, <, Node]
[;, List, <, Node, >, origGetElems, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, newGetProps, =, Lists]
[., newArrayList, (, ), ;, List, <, Node, >, origGetElems, =, Lists, ., newArrayList, (, ), ;, List, <, Node]
[;, List, <, Node, >, newGetProps, =, Lists, ., newArrayList, (, ), ;, for, (, int, j, =, 0, ;]
[., newArrayList, (, ), ;, List, <, Node, >, newGetProps, =, Lists, ., newArrayList, (, ), ;, for, (, int]
[;, for, (, int, j, =, 0, ;, j, <, keyNodes, ., size, (, ), ;, j, ++, ), {]
[., newArrayList, (, ), ;, for, (, int, j, =, 0, ;, j, <, keyNodes, ., size, (, ), ;]
[;, j, <, keyNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =, keyNodes, ., get, (]
[;, j, ++, ), {, Node, origNode, =, keyNodes, ., get, (, j, ), ;, Node, ancestor, =, origNode, .]
[<, keyNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =, keyNodes, ., get, (, j, )]
[;, j, ++, ), {, Node, origNode, =, keyNodes, ., get, (, j, ), ;, Node, ancestor, =, origNode, .]
[., size, (, ), ;, j, ++, ), {, Node, origNode, =, keyNodes, ., get, (, j, ), ;, Node]
[), {, Node, origNode, =, keyNodes, ., get, (, j, ), ;, Node, ancestor, =, origNode, ., getParent, (, )]
[++, ), {, Node, origNode, =, keyNodes, ., get, (, j, ), ;, Node, ancestor, =, origNode, ., getParent, (]
[;, Node, ancestor, =, origNode, ., getParent, (, ), ;, Node, newNode, =, IR, ., string, (, key, ., getString]
[., get, (, j, ), ;, Node, ancestor, =, origNode, ., getParent, (, ), ;, Node, newNode, =, IR, .]
[), ;, Node, ancestor, =, origNode, ., getParent, (, ), ;, Node, newNode, =, IR, ., string, (, key, .]
[;, Node, newNode, =, IR, ., string, (, key, ., getString, (, ), ), ., srcref, (, key, ), ;]
[., getParent, (, ), ;, Node, newNode, =, IR, ., string, (, key, ., getString, (, ), ), ., srcref]
[;, newKeys, ., add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (, ancestor]
[., srcref, (, key, ), ;, newKeys, ., add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode]
[., string, (, key, ., getString, (, ), ), ., srcref, (, key, ), ;, newKeys, ., add, (, newNode]
[), ., srcref, (, key, ), ;, newKeys, ., add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,]
[., getString, (, ), ), ., srcref, (, key, ), ;, newKeys, ., add, (, newNode, ), ;, ancestor, .]
[), ;, newKeys, ., add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (]
[;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (, ancestor, !=, null, &&, !, NodeUtil, ., isStatement]
[., add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (, ancestor, !=, null]
[), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (, ancestor, !=, null, &&, !, NodeUtil, .]
[;, while, (, ancestor, !=, null, &&, !, NodeUtil, ., isStatement, (, ancestor, ), &&, !, ancestor, ., isGetElem, (]
[., replaceChild, (, origNode, ,, newNode, ), ;, while, (, ancestor, !=, null, &&, !, NodeUtil, ., isStatement, (, ancestor]
[,, newNode, ), ;, while, (, ancestor, !=, null, &&, !, NodeUtil, ., isStatement, (, ancestor, ), &&, !, ancestor]
[), ;, while, (, ancestor, !=, null, &&, !, NodeUtil, ., isStatement, (, ancestor, ), &&, !, ancestor, ., isGetElem]
[), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (, ancestor, !=, null, &&, ancestor, ., isGetElem]
[&&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (]
[&&, !, NodeUtil, ., isStatement, (, ancestor, ), &&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =, ancestor]
[!=, null, &&, !, NodeUtil, ., isStatement, (, ancestor, ), &&, !, ancestor, ., isGetElem, (, ), ), {, ancestor]
[&&, !, NodeUtil, ., isStatement, (, ancestor, ), &&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =, ancestor]
[&&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (]
[&&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (]
[., isStatement, (, ancestor, ), &&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (]
[), &&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if]
[), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (, ancestor, !=, null, &&, ancestor, ., isGetElem]
[), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (, ancestor, !=, null, &&, ancestor, ., isGetElem]
[., isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (, ancestor, !=, null]
[=, ancestor, ., getParent, (, ), ;, }, if, (, ancestor, !=, null, &&, ancestor, ., isGetElem, (, ), )]
[;, }, if, (, ancestor, !=, null, &&, ancestor, ., isGetElem, (, ), ), {, Node, propObject, =, ancestor, ;]
[., getParent, (, ), ;, }, if, (, ancestor, !=, null, &&, ancestor, ., isGetElem, (, ), ), {, Node]
[), {, Node, propObject, =, ancestor, ;, while, (, propObject, ., isGetProp, (, ), ||, propObject, ., isGetElem, (, )]
[&&, ancestor, ., isGetElem, (, ), ), {, Node, propObject, =, ancestor, ;, while, (, propObject, ., isGetProp, (, )]
[!=, null, &&, ancestor, ., isGetElem, (, ), ), {, Node, propObject, =, ancestor, ;, while, (, propObject, ., isGetProp]
[&&, ancestor, ., isGetElem, (, ), ), {, Node, propObject, =, ancestor, ;, while, (, propObject, ., isGetProp, (, )]
[), {, Node, propObject, =, ancestor, ;, while, (, propObject, ., isGetProp, (, ), ||, propObject, ., isGetElem, (, )]
[., isGetElem, (, ), ), {, Node, propObject, =, ancestor, ;, while, (, propObject, ., isGetProp, (, ), ||, propObject]
[;, while, (, propObject, ., isGetProp, (, ), ||, propObject, ., isGetElem, (, ), ), {, propObject, =, propObject, .]
[), {, propObject, =, propObject, ., getFirstChild, (, ), ;, }, Node, ancestorClone, =, ancestor, ., cloneTree, (, ), ;]
[||, propObject, ., isGetElem, (, ), ), {, propObject, =, propObject, ., getFirstChild, (, ), ;, }, Node, ancestorClone, =]
[., isGetProp, (, ), ||, propObject, ., isGetElem, (, ), ), {, propObject, =, propObject, ., getFirstChild, (, ), ;]
[), {, propObject, =, propObject, ., getFirstChild, (, ), ;, }, Node, ancestorClone, =, ancestor, ., cloneTree, (, ), ;]
[., isGetElem, (, ), ), {, propObject, =, propObject, ., getFirstChild, (, ), ;, }, Node, ancestorClone, =, ancestor, .]
[=, propObject, ., getFirstChild, (, ), ;, }, Node, ancestorClone, =, ancestor, ., cloneTree, (, ), ;, peepholePasses, ., process]
[;, }, Node, ancestorClone, =, ancestor, ., cloneTree, (, ), ;, peepholePasses, ., process, (, null, ,, ancestorClone, ., getChildAtIndex]
[., getFirstChild, (, ), ;, }, Node, ancestorClone, =, ancestor, ., cloneTree, (, ), ;, peepholePasses, ., process, (, null]
[;, peepholePasses, ., process, (, null, ,, ancestorClone, ., getChildAtIndex, (, 1, ), ), ;, Node, prop, =, ancestorClone, .]
[., cloneTree, (, ), ;, peepholePasses, ., process, (, null, ,, ancestorClone, ., getChildAtIndex, (, 1, ), ), ;, Node]
[;, Node, prop, =, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if, (, prop, ., isString, (, ), &&, NodeUtil]
[., process, (, null, ,, ancestorClone, ., getChildAtIndex, (, 1, ), ), ;, Node, prop, =, ancestorClone, ., getChildAtIndex, (]
[,, ancestorClone, ., getChildAtIndex, (, 1, ), ), ;, Node, prop, =, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if]
[), ;, Node, prop, =, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if, (, prop, ., isString, (, ), &&]
[., getChildAtIndex, (, 1, ), ), ;, Node, prop, =, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if, (, prop]
[), ), ;, Node, prop, =, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if, (, prop, ., isString, (, )]
[;, if, (, prop, ., isString, (, ), &&, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), )]
[., getChildAtIndex, (, 1, ), ;, if, (, prop, ., isString, (, ), &&, NodeUtil, ., isValidPropertyName, (, prop, .]
[), ;, if, (, prop, ., isString, (, ), &&, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), )]
[), {, Node, target, =, ancestorClone, ., getFirstChild, (, ), ;, Node, newGetProp, =, IR, ., getprop, (, target, .]
[&&, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, Node, target, =, ancestorClone, ., getFirstChild, (]
[., isString, (, ), &&, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, Node, target, =]
[), {, Node, target, =, ancestorClone, ., getFirstChild, (, ), ;, Node, newGetProp, =, IR, ., getprop, (, target, .]
[., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, Node, target, =, ancestorClone, ., getFirstChild, (, ), ;]
[), ), {, Node, target, =, ancestorClone, ., getFirstChild, (, ), ;, Node, newGetProp, =, IR, ., getprop, (, target]
[., getString, (, ), ), ), {, Node, target, =, ancestorClone, ., getFirstChild, (, ), ;, Node, newGetProp, =, IR]
[;, Node, newGetProp, =, IR, ., getprop, (, target, ., detachFromParent, (, ), ,, prop, ., detachFromParent, (, ), )]
[., getFirstChild, (, ), ;, Node, newGetProp, =, IR, ., getprop, (, target, ., detachFromParent, (, ), ,, prop, .]
[;, newGetProps, ., add, (, newGetProp, ), ;, origGetElems, ., add, (, ancestor, ), ;, ancestor, ., getParent, (, )]
[., getprop, (, target, ., detachFromParent, (, ), ,, prop, ., detachFromParent, (, ), ), ;, newGetProps, ., add, (]
[,, prop, ., detachFromParent, (, ), ), ;, newGetProps, ., add, (, newGetProp, ), ;, origGetElems, ., add, (, ancestor]
[., detachFromParent, (, ), ,, prop, ., detachFromParent, (, ), ), ;, newGetProps, ., add, (, newGetProp, ), ;, origGetElems]
[), ;, newGetProps, ., add, (, newGetProp, ), ;, origGetElems, ., add, (, ancestor, ), ;, ancestor, ., getParent, (]
[., detachFromParent, (, ), ), ;, newGetProps, ., add, (, newGetProp, ), ;, origGetElems, ., add, (, ancestor, ), ;]
[;, origGetElems, ., add, (, ancestor, ), ;, ancestor, ., getParent, (, ), ., replaceChild, (, ancestor, ,, newGetProp, )]
[., add, (, newGetProp, ), ;, origGetElems, ., add, (, ancestor, ), ;, ancestor, ., getParent, (, ), ., replaceChild]
[), ;, origGetElems, ., add, (, ancestor, ), ;, ancestor, ., getParent, (, ), ., replaceChild, (, ancestor, ,, newGetProp]
[;, ancestor, ., getParent, (, ), ., replaceChild, (, ancestor, ,, newGetProp, ), ;, }, else, {, if, (, prop]
[., add, (, ancestor, ), ;, ancestor, ., getParent, (, ), ., replaceChild, (, ancestor, ,, newGetProp, ), ;, }]
[), ;, ancestor, ., getParent, (, ), ., replaceChild, (, ancestor, ,, newGetProp, ), ;, }, else, {, if, (]
[;, }, else, {, if, (, prop, ., isString, (, ), &&, !, NodeUtil, ., isValidPropertyName, (, prop, ., getString]
[., replaceChild, (, ancestor, ,, newGetProp, ), ;, }, else, {, if, (, prop, ., isString, (, ), &&, !]
[., getParent, (, ), ., replaceChild, (, ancestor, ,, newGetProp, ), ;, }, else, {, if, (, prop, ., isString]
[,, newGetProp, ), ;, }, else, {, if, (, prop, ., isString, (, ), &&, !, NodeUtil, ., isValidPropertyName, (]
[), ;, }, else, {, if, (, prop, ., isString, (, ), &&, !, NodeUtil, ., isValidPropertyName, (, prop, .]
[), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,, prop, ., getString, (, ), ), ;, }, isValidExpansion, =]
[&&, !, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, t, ., report, (, n, ,]
[., isString, (, ), &&, !, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, t, .]
[), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,, prop, ., getString, (, ), ), ;, }, isValidExpansion, =]
[), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,, prop, ., getString, (, ), ), ;, }, isValidExpansion, =]
[., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,, prop]
[), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,, prop, ., getString, (, ), ), ;, }, isValidExpansion]
[., getString, (, ), ), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,, prop, ., getString, (, )]
[;, }, isValidExpansion, =, false, ;, }, }, }, if, (, isValidExpansion, ), {, for, (, int, j, =, 0]
[., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,, prop, ., getString, (, ), ), ;, }, isValidExpansion, =, false, ;, }]
[,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,, prop, ., getString, (, ), ), ;, }, isValidExpansion, =, false, ;, }, }, }, if, (]
[,, prop, ., getString, (, ), ), ;, }, isValidExpansion, =, false, ;, }, }, }, if, (, isValidExpansion, )]
[), ;, }, isValidExpansion, =, false, ;, }, }, }, if, (, isValidExpansion, ), {, for, (, int, j, =]
[., getString, (, ), ), ;, }, isValidExpansion, =, false, ;, }, }, }, if, (, isValidExpansion, ), {, for]
[=, false, ;, }, }, }, if, (, isValidExpansion, ), {, for, (, int, j, =, 0, ;, val, !=]
[;, }, }, }, if, (, isValidExpansion, ), {, for, (, int, j, =, 0, ;, val, !=, null, &&]
[), {, for, (, int, j, =, 0, ;, val, !=, null, &&, j, <, valueNodes, ., size, (, )]
[;, val, !=, null, &&, j, <, valueNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =]
[;, j, ++, ), {, Node, origNode, =, valueNodes, ., get, (, j, ), ;, Node, newNode, =, val, .]
[&&, j, <, valueNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =, valueNodes, ., get, (]
[!=, null, &&, j, <, valueNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =, valueNodes, .]
[&&, j, <, valueNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =, valueNodes, ., get, (]
[;, j, ++, ), {, Node, origNode, =, valueNodes, ., get, (, j, ), ;, Node, newNode, =, val, .]
[<, valueNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =, valueNodes, ., get, (, j, )]
[;, j, ++, ), {, Node, origNode, =, valueNodes, ., get, (, j, ), ;, Node, newNode, =, val, .]
[., size, (, ), ;, j, ++, ), {, Node, origNode, =, valueNodes, ., get, (, j, ), ;, Node]
[), {, Node, origNode, =, valueNodes, ., get, (, j, ), ;, Node, newNode, =, val, ., cloneTree, (, )]
[++, ), {, Node, origNode, =, valueNodes, ., get, (, j, ), ;, Node, newNode, =, val, ., cloneTree, (]
[;, Node, newNode, =, val, ., cloneTree, (, ), ;, newValues, ., add, (, newNode, ), ;, origNode, ., getParent]
[., get, (, j, ), ;, Node, newNode, =, val, ., cloneTree, (, ), ;, newValues, ., add, (, newNode]
[), ;, Node, newNode, =, val, ., cloneTree, (, ), ;, newValues, ., add, (, newNode, ), ;, origNode, .]
[;, newValues, ., add, (, newNode, ), ;, origNode, ., getParent, (, ), ., replaceChild, (, origNode, ,, newNode, )]
[., cloneTree, (, ), ;, newValues, ., add, (, newNode, ), ;, origNode, ., getParent, (, ), ., replaceChild, (]
[;, origNode, ., getParent, (, ), ., replaceChild, (, origNode, ,, newNode, ), ;, }, Node, fnc, =, IR, .]
[., add, (, newNode, ), ;, origNode, ., getParent, (, ), ., replaceChild, (, origNode, ,, newNode, ), ;, }]
[), ;, origNode, ., getParent, (, ), ., replaceChild, (, origNode, ,, newNode, ), ;, }, Node, fnc, =, IR]
[;, }, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, key, )]
[., replaceChild, (, origNode, ,, newNode, ), ;, }, Node, fnc, =, IR, ., function, (, IR, ., name, (]
[., getParent, (, ), ., replaceChild, (, origNode, ,, newNode, ), ;, }, Node, fnc, =, IR, ., function, (]
[,, newNode, ), ;, }, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref]
[), ;, }, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, key]
[;, Node, call, =, IR, ., call, (, fnc, ), ., srcref, (, key, ), ;, call, ., putBooleanProp, (]
[., srcref, (, key, ), ;, Node, call, =, IR, ., call, (, fnc, ), ., srcref, (, key, )]
[., function, (, IR, ., name, (, "", ), ., srcref, (, key, ), ,, IR, ., paramList, (, )]
[,, IR, ., paramList, (, ), ., srcref, (, key, ), ,, callbackFunction, ., getChildAtIndex, (, 2, ), ., cloneTree]
[., srcref, (, key, ), ,, IR, ., paramList, (, ), ., srcref, (, key, ), ,, callbackFunction, ., getChildAtIndex]
[., name, (, "", ), ., srcref, (, key, ), ,, IR, ., paramList, (, ), ., srcref, (, key]
[), ., srcref, (, key, ), ,, IR, ., paramList, (, ), ., srcref, (, key, ), ,, callbackFunction, .]
[), ,, IR, ., paramList, (, ), ., srcref, (, key, ), ,, callbackFunction, ., getChildAtIndex, (, 2, ), .]
[,, callbackFunction, ., getChildAtIndex, (, 2, ), ., cloneTree, (, ), ), ., srcref, (, key, ), ;, Node, call]
[., srcref, (, key, ), ,, callbackFunction, ., getChildAtIndex, (, 2, ), ., cloneTree, (, ), ), ., srcref, (]
[., paramList, (, ), ., srcref, (, key, ), ,, callbackFunction, ., getChildAtIndex, (, 2, ), ., cloneTree, (, )]
[), ,, callbackFunction, ., getChildAtIndex, (, 2, ), ., cloneTree, (, ), ), ., srcref, (, key, ), ;, Node]
[), ., srcref, (, key, ), ;, Node, call, =, IR, ., call, (, fnc, ), ., srcref, (, key]
[., cloneTree, (, ), ), ., srcref, (, key, ), ;, Node, call, =, IR, ., call, (, fnc, )]
[., getChildAtIndex, (, 2, ), ., cloneTree, (, ), ), ., srcref, (, key, ), ;, Node, call, =, IR]
[), ., cloneTree, (, ), ), ., srcref, (, key, ), ;, Node, call, =, IR, ., call, (, fnc]
[), ;, Node, call, =, IR, ., call, (, fnc, ), ., srcref, (, key, ), ;, call, ., putBooleanProp]
[;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (]
[., srcref, (, key, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, fncBlock, ., addChildToBack]
[., call, (, fnc, ), ., srcref, (, key, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true]
[), ., srcref, (, key, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, fncBlock, .]
[), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult]
[;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, call, ), ., srcref, (, call, ), ), ;, }, for]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, call, )]
[,, true, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, call, ), ., srcref, (, call, ), )]
[., FREE_CALL, ,, true, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, call, ), ., srcref, (, call]
[), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, call, ), ., srcref, (, call, ), ), ;, }]
[;, }, for, (, int, j, =, 0, ;, j, <, newGetProps, ., size, (, ), ;, j, ++, )]
[., addChildToBack, (, IR, ., exprResult, (, call, ), ., srcref, (, call, ), ), ;, }, for, (, int]
[), ;, }, for, (, int, j, =, 0, ;, j, <, newGetProps, ., size, (, ), ;, j, ++]
[., srcref, (, call, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newGetProps, ., size]
[., exprResult, (, call, ), ., srcref, (, call, ), ), ;, }, for, (, int, j, =, 0, ;]
[), ., srcref, (, call, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newGetProps, .]
[), ), ;, }, for, (, int, j, =, 0, ;, j, <, newGetProps, ., size, (, ), ;, j]
[;, j, <, newGetProps, ., size, (, ), ;, j, ++, ), {, newGetProps, ., get, (, j, ), .]
[;, j, ++, ), {, newGetProps, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newGetProps, .]
[<, newGetProps, ., size, (, ), ;, j, ++, ), {, newGetProps, ., get, (, j, ), ., getParent, (]
[;, j, ++, ), {, newGetProps, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newGetProps, .]
[., size, (, ), ;, j, ++, ), {, newGetProps, ., get, (, j, ), ., getParent, (, ), .]
[), {, newGetProps, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newGetProps, ., get, (, j]
[++, ), {, newGetProps, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newGetProps, ., get, (]
[;, }, for, (, int, j, =, 0, ;, j, <, newKeys, ., size, (, ), ;, j, ++, )]
[., replaceChild, (, newGetProps, ., get, (, j, ), ,, origGetElems, ., get, (, j, ), ), ;, }, for]
[., getParent, (, ), ., replaceChild, (, newGetProps, ., get, (, j, ), ,, origGetElems, ., get, (, j, )]
[., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newGetProps, ., get, (, j, ), ,, origGetElems]
[), ., getParent, (, ), ., replaceChild, (, newGetProps, ., get, (, j, ), ,, origGetElems, ., get, (, j]
[,, origGetElems, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newKeys]
[., get, (, j, ), ,, origGetElems, ., get, (, j, ), ), ;, }, for, (, int, j, =]
[), ,, origGetElems, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <]
[), ;, }, for, (, int, j, =, 0, ;, j, <, newKeys, ., size, (, ), ;, j, ++]
[., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newKeys, ., size]
[), ), ;, }, for, (, int, j, =, 0, ;, j, <, newKeys, ., size, (, ), ;, j]
[;, j, <, newKeys, ., size, (, ), ;, j, ++, ), {, newKeys, ., get, (, j, ), .]
[;, j, ++, ), {, newKeys, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newKeys, .]
[<, newKeys, ., size, (, ), ;, j, ++, ), {, newKeys, ., get, (, j, ), ., getParent, (]
[;, j, ++, ), {, newKeys, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newKeys, .]
[., size, (, ), ;, j, ++, ), {, newKeys, ., get, (, j, ), ., getParent, (, ), .]
[), {, newKeys, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newKeys, ., get, (, j]
[++, ), {, newKeys, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newKeys, ., get, (]
[;, }, for, (, int, j, =, 0, ;, j, <, newValues, ., size, (, ), ;, j, ++, )]
[., replaceChild, (, newKeys, ., get, (, j, ), ,, keyNodes, ., get, (, j, ), ), ;, }, for]
[., getParent, (, ), ., replaceChild, (, newKeys, ., get, (, j, ), ,, keyNodes, ., get, (, j, )]
[., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newKeys, ., get, (, j, ), ,, keyNodes]
[), ., getParent, (, ), ., replaceChild, (, newKeys, ., get, (, j, ), ,, keyNodes, ., get, (, j]
[,, keyNodes, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newValues]
[., get, (, j, ), ,, keyNodes, ., get, (, j, ), ), ;, }, for, (, int, j, =]
[), ,, keyNodes, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <]
[), ;, }, for, (, int, j, =, 0, ;, j, <, newValues, ., size, (, ), ;, j, ++]
[., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newValues, ., size]
[), ), ;, }, for, (, int, j, =, 0, ;, j, <, newValues, ., size, (, ), ;, j]
[;, j, <, newValues, ., size, (, ), ;, j, ++, ), {, newValues, ., get, (, j, ), .]
[;, j, ++, ), {, newValues, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newValues, .]
[<, newValues, ., size, (, ), ;, j, ++, ), {, newValues, ., get, (, j, ), ., getParent, (]
[;, j, ++, ), {, newValues, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newValues, .]
[., size, (, ), ;, j, ++, ), {, newValues, ., get, (, j, ), ., getParent, (, ), .]
[), {, newValues, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newValues, ., get, (, j]
[++, ), {, newValues, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newValues, ., get, (]
[;, }, if, (, !, isValidExpansion, ), {, return, null, ;, }, }, return, fncBlock, ;, }, private, void, replaceOriginalJqueryEachCall]
[., replaceChild, (, newValues, ., get, (, j, ), ,, valueNodes, ., get, (, j, ), ), ;, }, if]
[., getParent, (, ), ., replaceChild, (, newValues, ., get, (, j, ), ,, valueNodes, ., get, (, j, )]
[., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newValues, ., get, (, j, ), ,, valueNodes]
[), ., getParent, (, ), ., replaceChild, (, newValues, ., get, (, j, ), ,, valueNodes, ., get, (, j]
[,, valueNodes, ., get, (, j, ), ), ;, }, if, (, !, isValidExpansion, ), {, return, null, ;, }]
[., get, (, j, ), ,, valueNodes, ., get, (, j, ), ), ;, }, if, (, !, isValidExpansion, )]
[), ,, valueNodes, ., get, (, j, ), ), ;, }, if, (, !, isValidExpansion, ), {, return, null, ;]
[), ;, }, if, (, !, isValidExpansion, ), {, return, null, ;, }, }, return, fncBlock, ;, }, private, void]
[., get, (, j, ), ), ;, }, if, (, !, isValidExpansion, ), {, return, null, ;, }, }, return]
[), ), ;, }, if, (, !, isValidExpansion, ), {, return, null, ;, }, }, return, fncBlock, ;, }, private]
[), {, return, null, ;, }, }, return, fncBlock, ;, }, private, void, replaceOriginalJqueryEachCall, (, Node, n, ,, Node, expandedBlock]
[), {, return, null, ;, }, }, return, fncBlock, ;, }, private, void, replaceOriginalJqueryEachCall, (, Node, n, ,, Node, expandedBlock]
[;, }, }, return, fncBlock, ;, }, private, void, replaceOriginalJqueryEachCall, (, Node, n, ,, Node, expandedBlock, ), {, if, (]
[;, }, private, void, replaceOriginalJqueryEachCall, (, Node, n, ,, Node, expandedBlock, ), {, if, (, n, ., getParent, (, )]
[), {, Node, parent, =, n, ., getParent, (, ), ;, Node, grandparent, =, parent, ., getParent, (, ), ;]
[., isExprResult, (, ), ), {, Node, parent, =, n, ., getParent, (, ), ;, Node, grandparent, =, parent, .]
[., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =, n, ., getParent, (, ), ;, Node]
[;, Node, grandparent, =, parent, ., getParent, (, ), ;, Node, insertAfter, =, parent, ;, while, (, expandedBlock, ., hasChildren]
[., getParent, (, ), ;, Node, grandparent, =, parent, ., getParent, (, ), ;, Node, insertAfter, =, parent, ;, while]
[;, Node, insertAfter, =, parent, ;, while, (, expandedBlock, ., hasChildren, (, ), ), {, Node, child, =, expandedBlock, .]
[., getParent, (, ), ;, Node, insertAfter, =, parent, ;, while, (, expandedBlock, ., hasChildren, (, ), ), {, Node]
[;, while, (, expandedBlock, ., hasChildren, (, ), ), {, Node, child, =, expandedBlock, ., getFirstChild, (, ), ., detachFromParent]
[), {, Node, child, =, expandedBlock, ., getFirstChild, (, ), ., detachFromParent, (, ), ;, grandparent, ., addChildAfter, (, child]
[., hasChildren, (, ), ), {, Node, child, =, expandedBlock, ., getFirstChild, (, ), ., detachFromParent, (, ), ;, grandparent]
[;, grandparent, ., addChildAfter, (, child, ,, insertAfter, ), ;, insertAfter, =, child, ;, }, grandparent, ., removeChild, (, parent]
[., detachFromParent, (, ), ;, grandparent, ., addChildAfter, (, child, ,, insertAfter, ), ;, insertAfter, =, child, ;, }, grandparent]
[., getFirstChild, (, ), ., detachFromParent, (, ), ;, grandparent, ., addChildAfter, (, child, ,, insertAfter, ), ;, insertAfter, =]
[;, insertAfter, =, child, ;, }, grandparent, ., removeChild, (, parent, ), ;, }, else, {, Node, callTarget, =, n]
[., addChildAfter, (, child, ,, insertAfter, ), ;, insertAfter, =, child, ;, }, grandparent, ., removeChild, (, parent, ), ;]
[,, insertAfter, ), ;, insertAfter, =, child, ;, }, grandparent, ., removeChild, (, parent, ), ;, }, else, {, Node]
[), ;, insertAfter, =, child, ;, }, grandparent, ., removeChild, (, parent, ), ;, }, else, {, Node, callTarget, =]
[=, child, ;, }, grandparent, ., removeChild, (, parent, ), ;, }, else, {, Node, callTarget, =, n, ., getFirstChild]
[;, }, grandparent, ., removeChild, (, parent, ), ;, }, else, {, Node, callTarget, =, n, ., getFirstChild, (, )]
[;, }, else, {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver, =, callTarget, ., getNext, (]
[., removeChild, (, parent, ), ;, }, else, {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver]
[), ;, }, else, {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver, =, callTarget, ., getNext]
[;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;, objectToLoopOver, ., detachFromParent, (, ), ;, Node, ret, =, IR]
[., getFirstChild, (, ), ;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;, objectToLoopOver, ., detachFromParent, (, ), ;]
[;, objectToLoopOver, ., detachFromParent, (, ), ;, Node, ret, =, IR, ., returnNode, (, objectToLoopOver, ), ., srcref, (, callTarget]
[., getNext, (, ), ;, objectToLoopOver, ., detachFromParent, (, ), ;, Node, ret, =, IR, ., returnNode, (, objectToLoopOver, )]
[;, Node, ret, =, IR, ., returnNode, (, objectToLoopOver, ), ., srcref, (, callTarget, ), ;, expandedBlock, ., addChildToBack, (]
[., detachFromParent, (, ), ;, Node, ret, =, IR, ., returnNode, (, objectToLoopOver, ), ., srcref, (, callTarget, ), ;]
[;, expandedBlock, ., addChildToBack, (, ret, ), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (, ""]
[., srcref, (, callTarget, ), ;, expandedBlock, ., addChildToBack, (, ret, ), ;, Node, fnc, =, IR, ., function, (]
[., returnNode, (, objectToLoopOver, ), ., srcref, (, callTarget, ), ;, expandedBlock, ., addChildToBack, (, ret, ), ;, Node, fnc]
[), ., srcref, (, callTarget, ), ;, expandedBlock, ., addChildToBack, (, ret, ), ;, Node, fnc, =, IR, ., function]
[), ;, expandedBlock, ., addChildToBack, (, ret, ), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (]
[;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, callTarget, ), ,]
[., addChildToBack, (, ret, ), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), .]
[), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, callTarget, )]
[;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[., function, (, IR, ., name, (, "", ), ., srcref, (, callTarget, ), ,, IR, ., paramList, (, )]
[,, IR, ., paramList, (, ), ., srcref, (, callTarget, ), ,, expandedBlock, ), ;, n, ., replaceChild, (, callTarget]
[., srcref, (, callTarget, ), ,, IR, ., paramList, (, ), ., srcref, (, callTarget, ), ,, expandedBlock, ), ;]
[., name, (, "", ), ., srcref, (, callTarget, ), ,, IR, ., paramList, (, ), ., srcref, (, callTarget]
[), ., srcref, (, callTarget, ), ,, IR, ., paramList, (, ), ., srcref, (, callTarget, ), ,, expandedBlock, )]
[), ,, IR, ., paramList, (, ), ., srcref, (, callTarget, ), ,, expandedBlock, ), ;, n, ., replaceChild, (]
[,, expandedBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL]
[., srcref, (, callTarget, ), ,, expandedBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, .]
[., paramList, (, ), ., srcref, (, callTarget, ), ,, expandedBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc]
[), ,, expandedBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, .]
[), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true]
[;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=]
[., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while]
[,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext]
[), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, )]
[;, while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;, }]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, )]
[,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc]
[., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter]
[), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;]
[), {, n, ., removeChildAfter, (, fnc, ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, private, boolean]
[!=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }]
[., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;, }, }, compiler, ., reportCodeChange]
[), {, n, ., removeChildAfter, (, fnc, ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, private, boolean]
[;, }, }, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, isArrayLitValidForExpansion, (, Node, n, ), {, Iterator, <]
[., removeChildAfter, (, fnc, ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, isArrayLitValidForExpansion, (, Node]
[), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, isArrayLitValidForExpansion, (, Node, n, ), {, Iterator]
[;, }, private, boolean, isArrayLitValidForExpansion, (, Node, n, ), {, Iterator, <, Node, >, iter, =, n, ., children, (]
[., reportCodeChange, (, ), ;, }, private, boolean, isArrayLitValidForExpansion, (, Node, n, ), {, Iterator, <, Node, >, iter, =]
[;, while, (, iter, ., hasNext, (, ), ), {, Node, child, =, iter, ., next, (, ), ;, if]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, Node, child, =, iter, ., next]
[., children, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, Node, child]
[), {, Node, child, =, iter, ., next, (, ), ;, if, (, !, child, ., isString, (, ), )]
[., hasNext, (, ), ), {, Node, child, =, iter, ., next, (, ), ;, if, (, !, child, .]
[;, if, (, !, child, ., isString, (, ), ), {, return, false, ;, }, }, return, true, ;, }]
[., next, (, ), ;, if, (, !, child, ., isString, (, ), ), {, return, false, ;, }, }]
[), {, return, false, ;, }, }, return, true, ;, }, class, FindCallbackArgumentReferences, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, final]
[), {, return, false, ;, }, }, return, true, ;, }, class, FindCallbackArgumentReferences, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, final]
[., isString, (, ), ), {, return, false, ;, }, }, return, true, ;, }, class, FindCallbackArgumentReferences, extends, AbstractPostOrderCallback, implements]
[;, }, }, return, true, ;, }, class, FindCallbackArgumentReferences, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, final, String, keyName, ;, private]
[;, }, class, FindCallbackArgumentReferences, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, final, String, keyName, ;, private, final, String, valueName, ;, private]
[;, String, keyString, =, null, ,, valueString, =, null, ;, Node, callbackParams, =, NodeUtil, ., getFunctionParameters, (, functionRoot, ), ;]
[., checkState, (, functionRoot, ., isFunction, (, ), ), ;, String, keyString, =, null, ,, valueString, =, null, ;, Node]
[), ;, String, keyString, =, null, ,, valueString, =, null, ;, Node, callbackParams, =, NodeUtil, ., getFunctionParameters, (, functionRoot, )]
[., isFunction, (, ), ), ;, String, keyString, =, null, ,, valueString, =, null, ;, Node, callbackParams, =, NodeUtil, .]
[,, valueString, =, null, ;, Node, callbackParams, =, NodeUtil, ., getFunctionParameters, (, functionRoot, ), ;, Node, param, =, callbackParams, .]
[;, Node, callbackParams, =, NodeUtil, ., getFunctionParameters, (, functionRoot, ), ;, Node, param, =, callbackParams, ., getFirstChild, (, ), ;]
[;, Node, param, =, callbackParams, ., getFirstChild, (, ), ;, if, (, param, !=, null, ), {, Preconditions, ., checkState]
[., getFunctionParameters, (, functionRoot, ), ;, Node, param, =, callbackParams, ., getFirstChild, (, ), ;, if, (, param, !=, null]
[), ;, Node, param, =, callbackParams, ., getFirstChild, (, ), ;, if, (, param, !=, null, ), {, Preconditions, .]
[;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, keyString]
[., getFirstChild, (, ), ;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (]
[), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, keyString, =, param, ., getString, (, )]
[!=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, keyString, =, param, ., getString]
[), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, keyString, =, param, ., getString, (, )]
[;, keyString, =, param, ., getString, (, ), ;, param, =, param, ., getNext, (, ), ;, if, (, param]
[., checkState, (, param, ., isName, (, ), ), ;, keyString, =, param, ., getString, (, ), ;, param, =]
[), ;, keyString, =, param, ., getString, (, ), ;, param, =, param, ., getNext, (, ), ;, if, (]
[., isName, (, ), ), ;, keyString, =, param, ., getString, (, ), ;, param, =, param, ., getNext, (]
[=, param, ., getString, (, ), ;, param, =, param, ., getNext, (, ), ;, if, (, param, !=, null]
[;, param, =, param, ., getNext, (, ), ;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (]
[., getString, (, ), ;, param, =, param, ., getNext, (, ), ;, if, (, param, !=, null, ), {]
[=, param, ., getNext, (, ), ;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (, param, .]
[;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, valueString]
[., getNext, (, ), ;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (]
[), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, valueString, =, param, ., getString, (, )]
[!=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, valueString, =, param, ., getString]
[), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, valueString, =, param, ., getString, (, )]
[;, valueString, =, param, ., getString, (, ), ;, }, }, this, ., keyName, =, keyString, ;, this, ., valueName]
[., checkState, (, param, ., isName, (, ), ), ;, valueString, =, param, ., getString, (, ), ;, }, }]
[), ;, valueString, =, param, ., getString, (, ), ;, }, }, this, ., keyName, =, keyString, ;, this, .]
[., isName, (, ), ), ;, valueString, =, param, ., getString, (, ), ;, }, }, this, ., keyName, =]
[=, param, ., getString, (, ), ;, }, }, this, ., keyName, =, keyString, ;, this, ., valueName, =, valueString]
[;, }, }, this, ., keyName, =, keyString, ;, this, ., valueName, =, valueString, ;, if, (, useArrayMode, ), {]
[., getString, (, ), ;, }, }, this, ., keyName, =, keyString, ;, this, ., valueName, =, valueString, ;, if]
[=, keyString, ;, this, ., valueName, =, valueString, ;, if, (, useArrayMode, ), {, this, ., keyReferences, =, valueReferences, ;]
[., keyName, =, keyString, ;, this, ., valueName, =, valueString, ;, if, (, useArrayMode, ), {, this, ., keyReferences, =]
[;, this, ., valueName, =, valueString, ;, if, (, useArrayMode, ), {, this, ., keyReferences, =, valueReferences, ;, this, .]
[=, valueString, ;, if, (, useArrayMode, ), {, this, ., keyReferences, =, valueReferences, ;, this, ., valueReferences, =, keyReferences, ;]
[., valueName, =, valueString, ;, if, (, useArrayMode, ), {, this, ., keyReferences, =, valueReferences, ;, this, ., valueReferences, =]
[;, if, (, useArrayMode, ), {, this, ., keyReferences, =, valueReferences, ;, this, ., valueReferences, =, keyReferences, ;, }, else]
[), {, this, ., keyReferences, =, valueReferences, ;, this, ., valueReferences, =, keyReferences, ;, }, else, {, this, ., keyReferences]
[=, valueReferences, ;, this, ., valueReferences, =, keyReferences, ;, }, else, {, this, ., keyReferences, =, keyReferences, ;, this, .]
[., keyReferences, =, valueReferences, ;, this, ., valueReferences, =, keyReferences, ;, }, else, {, this, ., keyReferences, =, keyReferences, ;]
[;, this, ., valueReferences, =, keyReferences, ;, }, else, {, this, ., keyReferences, =, keyReferences, ;, this, ., valueReferences, =]
[=, keyReferences, ;, }, else, {, this, ., keyReferences, =, keyReferences, ;, this, ., valueReferences, =, valueReferences, ;, }, this]
[., valueReferences, =, keyReferences, ;, }, else, {, this, ., keyReferences, =, keyReferences, ;, this, ., valueReferences, =, valueReferences, ;]
[;, }, else, {, this, ., keyReferences, =, keyReferences, ;, this, ., valueReferences, =, valueReferences, ;, }, this, ., startingScope]
[=, keyReferences, ;, this, ., valueReferences, =, valueReferences, ;, }, this, ., startingScope, =, null, ;, }, private, boolean, isShadowed]
[., keyReferences, =, keyReferences, ;, this, ., valueReferences, =, valueReferences, ;, }, this, ., startingScope, =, null, ;, }, private]
[;, this, ., valueReferences, =, valueReferences, ;, }, this, ., startingScope, =, null, ;, }, private, boolean, isShadowed, (, String]
[=, valueReferences, ;, }, this, ., startingScope, =, null, ;, }, private, boolean, isShadowed, (, String, name, ,, Scope, scope]
[., valueReferences, =, valueReferences, ;, }, this, ., startingScope, =, null, ;, }, private, boolean, isShadowed, (, String, name, ,]
[;, }, this, ., startingScope, =, null, ;, }, private, boolean, isShadowed, (, String, name, ,, Scope, scope, ), {]
[=, null, ;, }, private, boolean, isShadowed, (, String, name, ,, Scope, scope, ), {, Var, nameVar, =, scope, .]
[., startingScope, =, null, ;, }, private, boolean, isShadowed, (, String, name, ,, Scope, scope, ), {, Var, nameVar, =]
[;, }, private, boolean, isShadowed, (, String, name, ,, Scope, scope, ), {, Var, nameVar, =, scope, ., getVar, (]
[;, return, nameVar, !=, null, &&, nameVar, ., getScope, (, ), !=, this, ., startingScope, ;, }, @, Override, public]
[., getVar, (, name, ), ;, return, nameVar, !=, null, &&, nameVar, ., getScope, (, ), !=, this, ., startingScope]
[), ;, return, nameVar, !=, null, &&, nameVar, ., getScope, (, ), !=, this, ., startingScope, ;, }, @, Override]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, boolean, isThis]
[&&, nameVar, ., getScope, (, ), !=, this, ., startingScope, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[!=, null, &&, nameVar, ., getScope, (, ), !=, this, ., startingScope, ;, }, @, Override, public, void, visit, (]
[&&, nameVar, ., getScope, (, ), !=, this, ., startingScope, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, boolean, isThis]
[!=, this, ., startingScope, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[., getScope, (, ), !=, this, ., startingScope, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, boolean, isThis]
[., startingScope, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[;, if, (, t, ., getScope, (, ), ==, this, ., startingScope, ), {, isThis, =, n, ., isThis, (]
[), {, isThis, =, n, ., isThis, (, ), ;, }, if, (, isThis, ||, n, ., isName, (, )]
[==, this, ., startingScope, ), {, isThis, =, n, ., isThis, (, ), ;, }, if, (, isThis, ||, n]
[., getScope, (, ), ==, this, ., startingScope, ), {, isThis, =, n, ., isThis, (, ), ;, }, if]
[), {, isThis, =, n, ., isThis, (, ), ;, }, if, (, isThis, ||, n, ., isName, (, )]
[., startingScope, ), {, isThis, =, n, ., isThis, (, ), ;, }, if, (, isThis, ||, n, ., isName]
[=, n, ., isThis, (, ), ;, }, if, (, isThis, ||, n, ., isName, (, ), &&, !, isShadowed]
[;, }, if, (, isThis, ||, n, ., isName, (, ), &&, !, isShadowed, (, n, ., getString, (, )]
[., isThis, (, ), ;, }, if, (, isThis, ||, n, ., isName, (, ), &&, !, isShadowed, (, n]
[), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (, !, isThis, &&]
[||, n, ., isName, (, ), &&, !, isShadowed, (, n, ., getString, (, ), ,, t, ., getScope, (]
[), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (, !, isThis, &&]
[&&, !, isShadowed, (, n, ., getString, (, ), ,, t, ., getScope, (, ), ), ), {, String, nodeValue]
[., isName, (, ), &&, !, isShadowed, (, n, ., getString, (, ), ,, t, ., getScope, (, ), )]
[), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (, !, isThis, &&]
[), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (, !, isThis, &&]
[,, t, ., getScope, (, ), ), ), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (]
[., getString, (, ), ,, t, ., getScope, (, ), ), ), {, String, nodeValue, =, isThis, ?, null, :]
[), ), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (, !, isThis]
[., getScope, (, ), ), ), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;]
[;, if, (, !, isThis, &&, keyName, !=, null, &&, nodeValue, ., equals, (, keyName, ), ), {, keyReferences, .]
[?, null, :, n, ., getString, (, ), ;, if, (, !, isThis, &&, keyName, !=, null, &&, nodeValue, .]
[:, n, ., getString, (, ), ;, if, (, !, isThis, &&, keyName, !=, null, &&, nodeValue, ., equals, (]
[;, if, (, !, isThis, &&, keyName, !=, null, &&, nodeValue, ., equals, (, keyName, ), ), {, keyReferences, .]
[., getString, (, ), ;, if, (, !, isThis, &&, keyName, !=, null, &&, nodeValue, ., equals, (, keyName, )]
[), {, keyReferences, ., add, (, n, ), ;, }, else, if, (, isThis, ||, (, valueName, !=, null, &&]
[&&, nodeValue, ., equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (]
[&&, keyName, !=, null, &&, nodeValue, ., equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;]
[&&, keyName, !=, null, &&, nodeValue, ., equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;]
[&&, nodeValue, ., equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (]
[!=, null, &&, nodeValue, ., equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else]
[&&, nodeValue, ., equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (]
[), {, keyReferences, ., add, (, n, ), ;, }, else, if, (, isThis, ||, (, valueName, !=, null, &&]
[., equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (, isThis, ||]
[), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (, isThis, ||, (, valueName, !=, null]
[;, }, else, if, (, isThis, ||, (, valueName, !=, null, &&, nodeValue, ., equals, (, valueName, ), ), )]
[., add, (, n, ), ;, }, else, if, (, isThis, ||, (, valueName, !=, null, &&, nodeValue, ., equals]
[), ;, }, else, if, (, isThis, ||, (, valueName, !=, null, &&, nodeValue, ., equals, (, valueName, ), )]
[), {, valueReferences, ., add, (, n, ), ;, }, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t]
[||, (, valueName, !=, null, &&, nodeValue, ., equals, (, valueName, ), ), ), {, valueReferences, ., add, (, n]
[), {, valueReferences, ., add, (, n, ), ;, }, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t]
[), ), {, valueReferences, ., add, (, n, ), ;, }, }, }, @, Override, public, void, enterScope, (, NodeTraversal]
[&&, nodeValue, ., equals, (, valueName, ), ), ), {, valueReferences, ., add, (, n, ), ;, }, }, }]
[!=, null, &&, nodeValue, ., equals, (, valueName, ), ), ), {, valueReferences, ., add, (, n, ), ;, }]
[&&, nodeValue, ., equals, (, valueName, ), ), ), {, valueReferences, ., add, (, n, ), ;, }, }, }]
[), ), {, valueReferences, ., add, (, n, ), ;, }, }, }, @, Override, public, void, enterScope, (, NodeTraversal]
[., equals, (, valueName, ), ), ), {, valueReferences, ., add, (, n, ), ;, }, }, }, @, Override]
[), ), ), {, valueReferences, ., add, (, n, ), ;, }, }, }, @, Override, public, void, enterScope, (]
[;, }, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, this, ., startingScope, ==]
[., add, (, n, ), ;, }, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if]
[), ;, }, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, this, ., startingScope]
[), {, this, ., startingScope, =, t, ., getScope, (, ), ;, }, }, @, Override, public, void, exitScope, (]
[==, null, ), {, this, ., startingScope, =, t, ., getScope, (, ), ;, }, }, @, Override, public, void]
[., startingScope, ==, null, ), {, this, ., startingScope, =, t, ., getScope, (, ), ;, }, }, @, Override]
[), {, this, ., startingScope, =, t, ., getScope, (, ), ;, }, }, @, Override, public, void, exitScope, (]
[=, t, ., getScope, (, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }]
[., startingScope, =, t, ., getScope, (, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, )]
[;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, }, }]
[., getScope, (, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, }, }]
