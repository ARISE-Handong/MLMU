[;, private, final, int, serial, ;, private, final, int, day, ;, private, final, int, month, ;, private, final, int, year]
[;, private, final, int, serial, ;, private, final, int, day, ;, private, final, int, month, ;, private, final, int, year]
[), {, this, ., year, =, year, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'year' argument must be in range 1900 to 9999.", ), ;, }, if]
[&&, (, year, <=, 9999, ), ), {, this, ., year, =, year, ;, }, else, {, throw, new, IllegalArgumentException]
[), &&, (, year, <=, 9999, ), ), {, this, ., year, =, year, ;, }, else, {, throw, new]
[>=, 1900, ), &&, (, year, <=, 9999, ), ), {, this, ., year, =, year, ;, }, else, {]
[), &&, (, year, <=, 9999, ), ), {, this, ., year, =, year, ;, }, else, {, throw, new]
[), {, this, ., year, =, year, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'year' argument must be in range 1900 to 9999.", ), ;, }, if]
[), ), {, this, ., year, =, year, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'year' argument must be in range 1900 to 9999.", ), ;, }]
[<=, 9999, ), ), {, this, ., year, =, year, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'year' argument must be in range 1900 to 9999.", )]
[), ), {, this, ., year, =, year, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'year' argument must be in range 1900 to 9999.", ), ;, }]
[=, year, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'year' argument must be in range 1900 to 9999.", ), ;, }, if, (, (, month, >=, MonthConstants]
[., year, =, year, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'year' argument must be in range 1900 to 9999.", ), ;, }, if, (, (, month]
[;, }, else, {, throw, new, IllegalArgumentException, (, "The 'year' argument must be in range 1900 to 9999.", ), ;, }, if, (, (, month, >=, MonthConstants, ., JANUARY]
[;, }, if, (, (, month, >=, MonthConstants, ., JANUARY, ), &&, (, month, <=, MonthConstants, ., DECEMBER, ), )]
[), ;, }, if, (, (, month, >=, MonthConstants, ., JANUARY, ), &&, (, month, <=, MonthConstants, ., DECEMBER, )]
[), {, this, ., month, =, month, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'month' argument must be in the range 1 to 12.", ), ;, }, if]
[&&, (, month, <=, MonthConstants, ., DECEMBER, ), ), {, this, ., month, =, month, ;, }, else, {, throw]
[), &&, (, month, <=, MonthConstants, ., DECEMBER, ), ), {, this, ., month, =, month, ;, }, else, {]
[>=, MonthConstants, ., JANUARY, ), &&, (, month, <=, MonthConstants, ., DECEMBER, ), ), {, this, ., month, =, month]
[), &&, (, month, <=, MonthConstants, ., DECEMBER, ), ), {, this, ., month, =, month, ;, }, else, {]
[., JANUARY, ), &&, (, month, <=, MonthConstants, ., DECEMBER, ), ), {, this, ., month, =, month, ;, }]
[), {, this, ., month, =, month, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'month' argument must be in the range 1 to 12.", ), ;, }, if]
[), ), {, this, ., month, =, month, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'month' argument must be in the range 1 to 12.", ), ;, }]
[<=, MonthConstants, ., DECEMBER, ), ), {, this, ., month, =, month, ;, }, else, {, throw, new, IllegalArgumentException, (]
[), ), {, this, ., month, =, month, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'month' argument must be in the range 1 to 12.", ), ;, }]
[., DECEMBER, ), ), {, this, ., month, =, month, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'month' argument must be in the range 1 to 12.", )]
[=, month, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'month' argument must be in the range 1 to 12.", ), ;, }, if, (, (, day, >=, 1]
[., month, =, month, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'month' argument must be in the range 1 to 12.", ), ;, }, if, (, (, day]
[;, }, else, {, throw, new, IllegalArgumentException, (, "The 'month' argument must be in the range 1 to 12.", ), ;, }, if, (, (, day, >=, 1, ), &&]
[;, }, if, (, (, day, >=, 1, ), &&, (, day, <=, SerialDate, ., lastDayOfMonth, (, month, ,, year]
[), ;, }, if, (, (, day, >=, 1, ), &&, (, day, <=, SerialDate, ., lastDayOfMonth, (, month, ,]
[), {, this, ., day, =, day, ;, }, else, {, throw, new, IllegalArgumentException, (, "Invalid 'day' argument.", ), ;, }, this]
[&&, (, day, <=, SerialDate, ., lastDayOfMonth, (, month, ,, year, ), ), ), {, this, ., day, =, day]
[), &&, (, day, <=, SerialDate, ., lastDayOfMonth, (, month, ,, year, ), ), ), {, this, ., day, =]
[>=, 1, ), &&, (, day, <=, SerialDate, ., lastDayOfMonth, (, month, ,, year, ), ), ), {, this, .]
[), &&, (, day, <=, SerialDate, ., lastDayOfMonth, (, month, ,, year, ), ), ), {, this, ., day, =]
[), {, this, ., day, =, day, ;, }, else, {, throw, new, IllegalArgumentException, (, "Invalid 'day' argument.", ), ;, }, this]
[), ), {, this, ., day, =, day, ;, }, else, {, throw, new, IllegalArgumentException, (, "Invalid 'day' argument.", ), ;, }]
[<=, SerialDate, ., lastDayOfMonth, (, month, ,, year, ), ), ), {, this, ., day, =, day, ;, }, else]
[), ), {, this, ., day, =, day, ;, }, else, {, throw, new, IllegalArgumentException, (, "Invalid 'day' argument.", ), ;, }]
[., lastDayOfMonth, (, month, ,, year, ), ), ), {, this, ., day, =, day, ;, }, else, {, throw]
[,, year, ), ), ), {, this, ., day, =, day, ;, }, else, {, throw, new, IllegalArgumentException, (, "Invalid 'day' argument."]
[), ), ), {, this, ., day, =, day, ;, }, else, {, throw, new, IllegalArgumentException, (, "Invalid 'day' argument.", ), ;]
[=, day, ;, }, else, {, throw, new, IllegalArgumentException, (, "Invalid 'day' argument.", ), ;, }, this, ., serial, =, calcSerial, (]
[., day, =, day, ;, }, else, {, throw, new, IllegalArgumentException, (, "Invalid 'day' argument.", ), ;, }, this, ., serial, =]
[;, }, else, {, throw, new, IllegalArgumentException, (, "Invalid 'day' argument.", ), ;, }, this, ., serial, =, calcSerial, (, day, ,]
[;, }, this, ., serial, =, calcSerial, (, day, ,, month, ,, year, ), ;, }, public, SpreadsheetDate, (, final]
[), ;, }, this, ., serial, =, calcSerial, (, day, ,, month, ,, year, ), ;, }, public, SpreadsheetDate, (]
[=, calcSerial, (, day, ,, month, ,, year, ), ;, }, public, SpreadsheetDate, (, final, int, serial, ), {, if]
[., serial, =, calcSerial, (, day, ,, month, ,, year, ), ;, }, public, SpreadsheetDate, (, final, int, serial, )]
[;, }, public, SpreadsheetDate, (, final, int, serial, ), {, if, (, (, serial, >=, SERIAL_LOWER_BOUND, ), &&, (, serial]
[,, month, ,, year, ), ;, }, public, SpreadsheetDate, (, final, int, serial, ), {, if, (, (, serial, >=]
[,, year, ), ;, }, public, SpreadsheetDate, (, final, int, serial, ), {, if, (, (, serial, >=, SERIAL_LOWER_BOUND, )]
[), ;, }, public, SpreadsheetDate, (, final, int, serial, ), {, if, (, (, serial, >=, SERIAL_LOWER_BOUND, ), &&, (]
[), {, this, ., serial, =, serial, ;, }, else, {, throw, new, IllegalArgumentException, (, "SpreadsheetDate: Serial must be in range 2 to 2958465.", ), ;, }, final]
[&&, (, serial, <=, SERIAL_UPPER_BOUND, ), ), {, this, ., serial, =, serial, ;, }, else, {, throw, new, IllegalArgumentException]
[), &&, (, serial, <=, SERIAL_UPPER_BOUND, ), ), {, this, ., serial, =, serial, ;, }, else, {, throw, new]
[>=, SERIAL_LOWER_BOUND, ), &&, (, serial, <=, SERIAL_UPPER_BOUND, ), ), {, this, ., serial, =, serial, ;, }, else, {]
[), &&, (, serial, <=, SERIAL_UPPER_BOUND, ), ), {, this, ., serial, =, serial, ;, }, else, {, throw, new]
[), {, this, ., serial, =, serial, ;, }, else, {, throw, new, IllegalArgumentException, (, "SpreadsheetDate: Serial must be in range 2 to 2958465.", ), ;, }, final]
[), ), {, this, ., serial, =, serial, ;, }, else, {, throw, new, IllegalArgumentException, (, "SpreadsheetDate: Serial must be in range 2 to 2958465.", ), ;, }]
[<=, SERIAL_UPPER_BOUND, ), ), {, this, ., serial, =, serial, ;, }, else, {, throw, new, IllegalArgumentException, (, "SpreadsheetDate: Serial must be in range 2 to 2958465.", )]
[), ), {, this, ., serial, =, serial, ;, }, else, {, throw, new, IllegalArgumentException, (, "SpreadsheetDate: Serial must be in range 2 to 2958465.", ), ;, }]
[=, serial, ;, }, else, {, throw, new, IllegalArgumentException, (, "SpreadsheetDate: Serial must be in range 2 to 2958465.", ), ;, }, final, int, days, =, this, .]
[., serial, =, serial, ;, }, else, {, throw, new, IllegalArgumentException, (, "SpreadsheetDate: Serial must be in range 2 to 2958465.", ), ;, }, final, int, days, =]
[;, }, else, {, throw, new, IllegalArgumentException, (, "SpreadsheetDate: Serial must be in range 2 to 2958465.", ), ;, }, final, int, days, =, this, ., serial, -]
[;, }, final, int, days, =, this, ., serial, -, SERIAL_LOWER_BOUND, ;, final, int, overestimatedYYYY, =, 1900, +, (, days]
[), ;, }, final, int, days, =, this, ., serial, -, SERIAL_LOWER_BOUND, ;, final, int, overestimatedYYYY, =, 1900, +, (]
[;, final, int, overestimatedYYYY, =, 1900, +, (, days, /, 365, ), ;, final, int, leaps, =, SerialDate, ., leapYearCount]
[-, SERIAL_LOWER_BOUND, ;, final, int, overestimatedYYYY, =, 1900, +, (, days, /, 365, ), ;, final, int, leaps, =, SerialDate]
[., serial, -, SERIAL_LOWER_BOUND, ;, final, int, overestimatedYYYY, =, 1900, +, (, days, /, 365, ), ;, final, int, leaps]
[;, final, int, overestimatedYYYY, =, 1900, +, (, days, /, 365, ), ;, final, int, leaps, =, SerialDate, ., leapYearCount]
[;, final, int, leaps, =, SerialDate, ., leapYearCount, (, overestimatedYYYY, ), ;, final, int, nonleapdays, =, days, -, leaps, ;]
[+, (, days, /, 365, ), ;, final, int, leaps, =, SerialDate, ., leapYearCount, (, overestimatedYYYY, ), ;, final, int]
[;, final, int, leaps, =, SerialDate, ., leapYearCount, (, overestimatedYYYY, ), ;, final, int, nonleapdays, =, days, -, leaps, ;]
[), ;, final, int, leaps, =, SerialDate, ., leapYearCount, (, overestimatedYYYY, ), ;, final, int, nonleapdays, =, days, -, leaps]
[/, 365, ), ;, final, int, leaps, =, SerialDate, ., leapYearCount, (, overestimatedYYYY, ), ;, final, int, nonleapdays, =, days]
[), ;, final, int, leaps, =, SerialDate, ., leapYearCount, (, overestimatedYYYY, ), ;, final, int, nonleapdays, =, days, -, leaps]
[;, final, int, nonleapdays, =, days, -, leaps, ;, int, underestimatedYYYY, =, 1900, +, (, nonleapdays, /, 365, ), ;]
[., leapYearCount, (, overestimatedYYYY, ), ;, final, int, nonleapdays, =, days, -, leaps, ;, int, underestimatedYYYY, =, 1900, +, (]
[), ;, final, int, nonleapdays, =, days, -, leaps, ;, int, underestimatedYYYY, =, 1900, +, (, nonleapdays, /, 365, )]
[;, int, underestimatedYYYY, =, 1900, +, (, nonleapdays, /, 365, ), ;, if, (, underestimatedYYYY, ==, overestimatedYYYY, ), {, this]
[-, leaps, ;, int, underestimatedYYYY, =, 1900, +, (, nonleapdays, /, 365, ), ;, if, (, underestimatedYYYY, ==, overestimatedYYYY, )]
[;, int, underestimatedYYYY, =, 1900, +, (, nonleapdays, /, 365, ), ;, if, (, underestimatedYYYY, ==, overestimatedYYYY, ), {, this]
[;, if, (, underestimatedYYYY, ==, overestimatedYYYY, ), {, this, ., year, =, underestimatedYYYY, ;, }, else, {, int, ss1, =]
[+, (, nonleapdays, /, 365, ), ;, if, (, underestimatedYYYY, ==, overestimatedYYYY, ), {, this, ., year, =, underestimatedYYYY, ;]
[;, if, (, underestimatedYYYY, ==, overestimatedYYYY, ), {, this, ., year, =, underestimatedYYYY, ;, }, else, {, int, ss1, =]
[), ;, if, (, underestimatedYYYY, ==, overestimatedYYYY, ), {, this, ., year, =, underestimatedYYYY, ;, }, else, {, int, ss1]
[/, 365, ), ;, if, (, underestimatedYYYY, ==, overestimatedYYYY, ), {, this, ., year, =, underestimatedYYYY, ;, }, else, {]
[), ;, if, (, underestimatedYYYY, ==, overestimatedYYYY, ), {, this, ., year, =, underestimatedYYYY, ;, }, else, {, int, ss1]
[), {, this, ., year, =, underestimatedYYYY, ;, }, else, {, int, ss1, =, calcSerial, (, 1, ,, 1, ,]
[==, overestimatedYYYY, ), {, this, ., year, =, underestimatedYYYY, ;, }, else, {, int, ss1, =, calcSerial, (, 1, ,]
[), {, this, ., year, =, underestimatedYYYY, ;, }, else, {, int, ss1, =, calcSerial, (, 1, ,, 1, ,]
[=, underestimatedYYYY, ;, }, else, {, int, ss1, =, calcSerial, (, 1, ,, 1, ,, underestimatedYYYY, ), ;, while, (]
[., year, =, underestimatedYYYY, ;, }, else, {, int, ss1, =, calcSerial, (, 1, ,, 1, ,, underestimatedYYYY, ), ;]
[;, }, else, {, int, ss1, =, calcSerial, (, 1, ,, 1, ,, underestimatedYYYY, ), ;, while, (, ss1, <=]
[;, while, (, ss1, <=, this, ., serial, ), {, underestimatedYYYY, =, underestimatedYYYY, +, 1, ;, ss1, =, calcSerial, (]
[,, 1, ,, underestimatedYYYY, ), ;, while, (, ss1, <=, this, ., serial, ), {, underestimatedYYYY, =, underestimatedYYYY, +, 1]
[,, underestimatedYYYY, ), ;, while, (, ss1, <=, this, ., serial, ), {, underestimatedYYYY, =, underestimatedYYYY, +, 1, ;, ss1]
[), ;, while, (, ss1, <=, this, ., serial, ), {, underestimatedYYYY, =, underestimatedYYYY, +, 1, ;, ss1, =, calcSerial]
[), {, underestimatedYYYY, =, underestimatedYYYY, +, 1, ;, ss1, =, calcSerial, (, 1, ,, 1, ,, underestimatedYYYY, ), ;, }]
[<=, this, ., serial, ), {, underestimatedYYYY, =, underestimatedYYYY, +, 1, ;, ss1, =, calcSerial, (, 1, ,, 1, ,]
[), {, underestimatedYYYY, =, underestimatedYYYY, +, 1, ;, ss1, =, calcSerial, (, 1, ,, 1, ,, underestimatedYYYY, ), ;, }]
[., serial, ), {, underestimatedYYYY, =, underestimatedYYYY, +, 1, ;, ss1, =, calcSerial, (, 1, ,, 1, ,, underestimatedYYYY, )]
[=, underestimatedYYYY, +, 1, ;, ss1, =, calcSerial, (, 1, ,, 1, ,, underestimatedYYYY, ), ;, }, this, ., year]
[;, ss1, =, calcSerial, (, 1, ,, 1, ,, underestimatedYYYY, ), ;, }, this, ., year, =, underestimatedYYYY, -, 1]
[+, 1, ;, ss1, =, calcSerial, (, 1, ,, 1, ,, underestimatedYYYY, ), ;, }, this, ., year, =, underestimatedYYYY]
[;, ss1, =, calcSerial, (, 1, ,, 1, ,, underestimatedYYYY, ), ;, }, this, ., year, =, underestimatedYYYY, -, 1]
[=, calcSerial, (, 1, ,, 1, ,, underestimatedYYYY, ), ;, }, this, ., year, =, underestimatedYYYY, -, 1, ;, }]
[;, }, this, ., year, =, underestimatedYYYY, -, 1, ;, }, final, int, ss2, =, calcSerial, (, 1, ,, 1]
[,, 1, ,, underestimatedYYYY, ), ;, }, this, ., year, =, underestimatedYYYY, -, 1, ;, }, final, int, ss2, =]
[,, underestimatedYYYY, ), ;, }, this, ., year, =, underestimatedYYYY, -, 1, ;, }, final, int, ss2, =, calcSerial, (]
[), ;, }, this, ., year, =, underestimatedYYYY, -, 1, ;, }, final, int, ss2, =, calcSerial, (, 1, ,]
[=, underestimatedYYYY, -, 1, ;, }, final, int, ss2, =, calcSerial, (, 1, ,, 1, ,, this, ., year, )]
[., year, =, underestimatedYYYY, -, 1, ;, }, final, int, ss2, =, calcSerial, (, 1, ,, 1, ,, this, .]
[;, }, final, int, ss2, =, calcSerial, (, 1, ,, 1, ,, this, ., year, ), ;, int, [, ]]
[-, 1, ;, }, final, int, ss2, =, calcSerial, (, 1, ,, 1, ,, this, ., year, ), ;, int]
[;, }, final, int, ss2, =, calcSerial, (, 1, ,, 1, ,, this, ., year, ), ;, int, [, ]]
[;, int, [, ], daysToEndOfPrecedingMonth, =, AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, ;, if, (, isLeapYear, (, this, ., year, ), ), {, daysToEndOfPrecedingMonth, =]
[,, 1, ,, this, ., year, ), ;, int, [, ], daysToEndOfPrecedingMonth, =, AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, ;, if, (, isLeapYear, (, this]
[,, this, ., year, ), ;, int, [, ], daysToEndOfPrecedingMonth, =, AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, ;, if, (, isLeapYear, (, this, ., year]
[), ;, int, [, ], daysToEndOfPrecedingMonth, =, AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, ;, if, (, isLeapYear, (, this, ., year, ), ), {, daysToEndOfPrecedingMonth]
[., year, ), ;, int, [, ], daysToEndOfPrecedingMonth, =, AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, ;, if, (, isLeapYear, (, this, ., year, ), )]
[;, if, (, isLeapYear, (, this, ., year, ), ), {, daysToEndOfPrecedingMonth, =, LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, ;, }, int, mm, =, 1]
[), {, daysToEndOfPrecedingMonth, =, LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, ;, }, int, mm, =, 1, ;, int, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm]
[), ), {, daysToEndOfPrecedingMonth, =, LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, ;, }, int, mm, =, 1, ;, int, sss, =, ss2, +, daysToEndOfPrecedingMonth, []
[., year, ), ), {, daysToEndOfPrecedingMonth, =, LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, ;, }, int, mm, =, 1, ;, int, sss, =, ss2, +]
[=, LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, ;, }, int, mm, =, 1, ;, int, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm, ], -, 1]
[;, }, int, mm, =, 1, ;, int, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm, ], -, 1, ;, while]
[;, int, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm, ], -, 1, ;, while, (, sss, <, this, ., serial]
[;, while, (, sss, <, this, ., serial, ), {, mm, =, mm, +, 1, ;, sss, =, ss2, +]
[-, 1, ;, while, (, sss, <, this, ., serial, ), {, mm, =, mm, +, 1, ;, sss, =]
[+, daysToEndOfPrecedingMonth, [, mm, ], -, 1, ;, while, (, sss, <, this, ., serial, ), {, mm, =, mm]
[-, 1, ;, while, (, sss, <, this, ., serial, ), {, mm, =, mm, +, 1, ;, sss, =]
[[, mm, ], -, 1, ;, while, (, sss, <, this, ., serial, ), {, mm, =, mm, +, 1]
[], -, 1, ;, while, (, sss, <, this, ., serial, ), {, mm, =, mm, +, 1, ;, sss]
[;, while, (, sss, <, this, ., serial, ), {, mm, =, mm, +, 1, ;, sss, =, ss2, +]
[), {, mm, =, mm, +, 1, ;, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm, ], -, 1, ;, }]
[<, this, ., serial, ), {, mm, =, mm, +, 1, ;, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm, ]]
[), {, mm, =, mm, +, 1, ;, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm, ], -, 1, ;, }]
[., serial, ), {, mm, =, mm, +, 1, ;, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm, ], -, 1]
[=, mm, +, 1, ;, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm, ], -, 1, ;, }, this, ., month]
[;, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm, ], -, 1, ;, }, this, ., month, =, mm, -, 1]
[+, 1, ;, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm, ], -, 1, ;, }, this, ., month, =, mm]
[;, sss, =, ss2, +, daysToEndOfPrecedingMonth, [, mm, ], -, 1, ;, }, this, ., month, =, mm, -, 1]
[=, ss2, +, daysToEndOfPrecedingMonth, [, mm, ], -, 1, ;, }, this, ., month, =, mm, -, 1, ;, this]
[;, }, this, ., month, =, mm, -, 1, ;, this, ., day, =, this, ., serial, -, ss2, -]
[-, 1, ;, }, this, ., month, =, mm, -, 1, ;, this, ., day, =, this, ., serial, -]
[+, daysToEndOfPrecedingMonth, [, mm, ], -, 1, ;, }, this, ., month, =, mm, -, 1, ;, this, ., day]
[-, 1, ;, }, this, ., month, =, mm, -, 1, ;, this, ., day, =, this, ., serial, -]
[[, mm, ], -, 1, ;, }, this, ., month, =, mm, -, 1, ;, this, ., day, =, this]
[], -, 1, ;, }, this, ., month, =, mm, -, 1, ;, this, ., day, =, this, ., serial]
[;, }, this, ., month, =, mm, -, 1, ;, this, ., day, =, this, ., serial, -, ss2, -]
[=, mm, -, 1, ;, this, ., day, =, this, ., serial, -, ss2, -, daysToEndOfPrecedingMonth, [, this, ., month]
[., month, =, mm, -, 1, ;, this, ., day, =, this, ., serial, -, ss2, -, daysToEndOfPrecedingMonth, [, this]
[;, this, ., day, =, this, ., serial, -, ss2, -, daysToEndOfPrecedingMonth, [, this, ., month, ], +, 1, ;]
[-, 1, ;, this, ., day, =, this, ., serial, -, ss2, -, daysToEndOfPrecedingMonth, [, this, ., month, ], +]
[;, this, ., day, =, this, ., serial, -, ss2, -, daysToEndOfPrecedingMonth, [, this, ., month, ], +, 1, ;]
[=, this, ., serial, -, ss2, -, daysToEndOfPrecedingMonth, [, this, ., month, ], +, 1, ;, }, public, int, toSerial]
[., day, =, this, ., serial, -, ss2, -, daysToEndOfPrecedingMonth, [, this, ., month, ], +, 1, ;, }, public]
[;, }, public, int, toSerial, (, ), {, return, this, ., serial, ;, }, public, Date, toDate, (, ), {]
[+, 1, ;, }, public, int, toSerial, (, ), {, return, this, ., serial, ;, }, public, Date, toDate, (]
[-, daysToEndOfPrecedingMonth, [, this, ., month, ], +, 1, ;, }, public, int, toSerial, (, ), {, return, this, .]
[-, ss2, -, daysToEndOfPrecedingMonth, [, this, ., month, ], +, 1, ;, }, public, int, toSerial, (, ), {, return]
[., serial, -, ss2, -, daysToEndOfPrecedingMonth, [, this, ., month, ], +, 1, ;, }, public, int, toSerial, (, )]
[-, daysToEndOfPrecedingMonth, [, this, ., month, ], +, 1, ;, }, public, int, toSerial, (, ), {, return, this, .]
[+, 1, ;, }, public, int, toSerial, (, ), {, return, this, ., serial, ;, }, public, Date, toDate, (]
[[, this, ., month, ], +, 1, ;, }, public, int, toSerial, (, ), {, return, this, ., serial, ;]
[], +, 1, ;, }, public, int, toSerial, (, ), {, return, this, ., serial, ;, }, public, Date, toDate]
[., month, ], +, 1, ;, }, public, int, toSerial, (, ), {, return, this, ., serial, ;, }, public]
[;, }, public, int, toSerial, (, ), {, return, this, ., serial, ;, }, public, Date, toDate, (, ), {]
[;, }, public, Date, toDate, (, ), {, final, Calendar, calendar, =, Calendar, ., getInstance, (, ), ;, calendar, .]
[., serial, ;, }, public, Date, toDate, (, ), {, final, Calendar, calendar, =, Calendar, ., getInstance, (, ), ;]
[;, calendar, ., set, (, getYYYY, (, ), ,, getMonth, (, ), -, 1, ,, getDayOfMonth, (, ), ,, 0]
[., getInstance, (, ), ;, calendar, ., set, (, getYYYY, (, ), ,, getMonth, (, ), -, 1, ,, getDayOfMonth]
[;, return, calendar, ., getTime, (, ), ;, }, public, int, getYYYY, (, ), {, return, this, ., year, ;]
[., set, (, getYYYY, (, ), ,, getMonth, (, ), -, 1, ,, getDayOfMonth, (, ), ,, 0, ,, 0]
[,, getMonth, (, ), -, 1, ,, getDayOfMonth, (, ), ,, 0, ,, 0, ,, 0, ), ;, return, calendar]
[,, getDayOfMonth, (, ), ,, 0, ,, 0, ,, 0, ), ;, return, calendar, ., getTime, (, ), ;, }]
[-, 1, ,, getDayOfMonth, (, ), ,, 0, ,, 0, ,, 0, ), ;, return, calendar, ., getTime, (, )]
[,, getDayOfMonth, (, ), ,, 0, ,, 0, ,, 0, ), ;, return, calendar, ., getTime, (, ), ;, }]
[,, 0, ,, 0, ,, 0, ), ;, return, calendar, ., getTime, (, ), ;, }, public, int, getYYYY, (]
[,, 0, ,, 0, ), ;, return, calendar, ., getTime, (, ), ;, }, public, int, getYYYY, (, ), {]
[,, 0, ), ;, return, calendar, ., getTime, (, ), ;, }, public, int, getYYYY, (, ), {, return, this]
[), ;, return, calendar, ., getTime, (, ), ;, }, public, int, getYYYY, (, ), {, return, this, ., year]
[;, }, public, int, getYYYY, (, ), {, return, this, ., year, ;, }, public, int, getMonth, (, ), {]
[., getTime, (, ), ;, }, public, int, getYYYY, (, ), {, return, this, ., year, ;, }, public, int]
[;, }, public, int, getMonth, (, ), {, return, this, ., month, ;, }, public, int, getDayOfMonth, (, ), {]
[., year, ;, }, public, int, getMonth, (, ), {, return, this, ., month, ;, }, public, int, getDayOfMonth, (]
[;, }, public, int, getDayOfMonth, (, ), {, return, this, ., day, ;, }, public, int, getDayOfWeek, (, ), {]
[., month, ;, }, public, int, getDayOfMonth, (, ), {, return, this, ., day, ;, }, public, int, getDayOfWeek, (]
[;, }, public, int, getDayOfWeek, (, ), {, return, (, this, ., serial, +, 6, ), %, 7, +, 1]
[., day, ;, }, public, int, getDayOfWeek, (, ), {, return, (, this, ., serial, +, 6, ), %, 7]
[;, }, public, boolean, equals, (, final, Object, object, ), {, if, (, object, instanceof, SerialDate, ), {, final, SerialDate]
[+, 1, ;, }, public, boolean, equals, (, final, Object, object, ), {, if, (, object, instanceof, SerialDate, ), {]
[%, 7, +, 1, ;, }, public, boolean, equals, (, final, Object, object, ), {, if, (, object, instanceof, SerialDate]
[), %, 7, +, 1, ;, }, public, boolean, equals, (, final, Object, object, ), {, if, (, object, instanceof]
[+, 6, ), %, 7, +, 1, ;, }, public, boolean, equals, (, final, Object, object, ), {, if, (]
[., serial, +, 6, ), %, 7, +, 1, ;, }, public, boolean, equals, (, final, Object, object, ), {]
[), %, 7, +, 1, ;, }, public, boolean, equals, (, final, Object, object, ), {, if, (, object, instanceof]
[+, 1, ;, }, public, boolean, equals, (, final, Object, object, ), {, if, (, object, instanceof, SerialDate, ), {]
[;, }, public, boolean, equals, (, final, Object, object, ), {, if, (, object, instanceof, SerialDate, ), {, final, SerialDate]
[), {, final, SerialDate, s, =, (, SerialDate, ), object, ;, return, (, s, ., toSerial, (, ), ==, this]
[instanceof, SerialDate, ), {, final, SerialDate, s, =, (, SerialDate, ), object, ;, return, (, s, ., toSerial, (, )]
[;, return, (, s, ., toSerial, (, ), ==, this, ., toSerial, (, ), ), ;, }, else, {, return]
[;, return, (, s, ., toSerial, (, ), ==, this, ., toSerial, (, ), ), ;, }, else, {, return]
[;, }, else, {, return, false, ;, }, }, public, int, hashCode, (, ), {, return, toSerial, (, ), ;]
[), ;, }, else, {, return, false, ;, }, }, public, int, hashCode, (, ), {, return, toSerial, (, )]
[==, this, ., toSerial, (, ), ), ;, }, else, {, return, false, ;, }, }, public, int, hashCode, (]
[., toSerial, (, ), ==, this, ., toSerial, (, ), ), ;, }, else, {, return, false, ;, }, }]
[), ;, }, else, {, return, false, ;, }, }, public, int, hashCode, (, ), {, return, toSerial, (, )]
[., toSerial, (, ), ), ;, }, else, {, return, false, ;, }, }, public, int, hashCode, (, ), {]
[;, }, }, public, int, hashCode, (, ), {, return, toSerial, (, ), ;, }, public, int, compare, (, final]
[;, }, public, int, compare, (, final, SerialDate, other, ), {, return, this, ., serial, -, other, ., toSerial, (]
[;, }, public, int, compareTo, (, final, Object, other, ), {, return, compare, (, (, SerialDate, ), other, ), ;]
[-, other, ., toSerial, (, ), ;, }, public, int, compareTo, (, final, Object, other, ), {, return, compare, (]
[., serial, -, other, ., toSerial, (, ), ;, }, public, int, compareTo, (, final, Object, other, ), {, return]
[;, }, public, int, compareTo, (, final, Object, other, ), {, return, compare, (, (, SerialDate, ), other, ), ;]
[., toSerial, (, ), ;, }, public, int, compareTo, (, final, Object, other, ), {, return, compare, (, (, SerialDate]
[;, }, public, boolean, isOn, (, final, SerialDate, other, ), {, return, (, this, ., serial, ==, other, ., toSerial]
[), ;, }, public, boolean, isOn, (, final, SerialDate, other, ), {, return, (, this, ., serial, ==, other, .]
[), ;, }, public, boolean, isOn, (, final, SerialDate, other, ), {, return, (, this, ., serial, ==, other, .]
[;, }, public, boolean, isBefore, (, final, SerialDate, other, ), {, return, (, this, ., serial, <, other, ., toSerial]
[), ;, }, public, boolean, isBefore, (, final, SerialDate, other, ), {, return, (, this, ., serial, <, other, .]
[==, other, ., toSerial, (, ), ), ;, }, public, boolean, isBefore, (, final, SerialDate, other, ), {, return, (]
[., serial, ==, other, ., toSerial, (, ), ), ;, }, public, boolean, isBefore, (, final, SerialDate, other, ), {]
[), ;, }, public, boolean, isBefore, (, final, SerialDate, other, ), {, return, (, this, ., serial, <, other, .]
[., toSerial, (, ), ), ;, }, public, boolean, isBefore, (, final, SerialDate, other, ), {, return, (, this, .]
[;, }, public, boolean, isOnOrBefore, (, final, SerialDate, other, ), {, return, (, this, ., serial, <=, other, ., toSerial]
[), ;, }, public, boolean, isOnOrBefore, (, final, SerialDate, other, ), {, return, (, this, ., serial, <=, other, .]
[<, other, ., toSerial, (, ), ), ;, }, public, boolean, isOnOrBefore, (, final, SerialDate, other, ), {, return, (]
[., serial, <, other, ., toSerial, (, ), ), ;, }, public, boolean, isOnOrBefore, (, final, SerialDate, other, ), {]
[), ;, }, public, boolean, isOnOrBefore, (, final, SerialDate, other, ), {, return, (, this, ., serial, <=, other, .]
[., toSerial, (, ), ), ;, }, public, boolean, isOnOrBefore, (, final, SerialDate, other, ), {, return, (, this, .]
[;, }, public, boolean, isAfter, (, final, SerialDate, other, ), {, return, (, this, ., serial, >, other, ., toSerial]
[), ;, }, public, boolean, isAfter, (, final, SerialDate, other, ), {, return, (, this, ., serial, >, other, .]
[<=, other, ., toSerial, (, ), ), ;, }, public, boolean, isAfter, (, final, SerialDate, other, ), {, return, (]
[., serial, <=, other, ., toSerial, (, ), ), ;, }, public, boolean, isAfter, (, final, SerialDate, other, ), {]
[), ;, }, public, boolean, isAfter, (, final, SerialDate, other, ), {, return, (, this, ., serial, >, other, .]
[., toSerial, (, ), ), ;, }, public, boolean, isAfter, (, final, SerialDate, other, ), {, return, (, this, .]
[;, }, public, boolean, isOnOrAfter, (, final, SerialDate, other, ), {, return, (, this, ., serial, >=, other, ., toSerial]
[), ;, }, public, boolean, isOnOrAfter, (, final, SerialDate, other, ), {, return, (, this, ., serial, >=, other, .]
[>, other, ., toSerial, (, ), ), ;, }, public, boolean, isOnOrAfter, (, final, SerialDate, other, ), {, return, (]
[., serial, >, other, ., toSerial, (, ), ), ;, }, public, boolean, isOnOrAfter, (, final, SerialDate, other, ), {]
[), ;, }, public, boolean, isOnOrAfter, (, final, SerialDate, other, ), {, return, (, this, ., serial, >=, other, .]
[., toSerial, (, ), ), ;, }, public, boolean, isOnOrAfter, (, final, SerialDate, other, ), {, return, (, this, .]
[;, }, public, boolean, isInRange, (, final, SerialDate, d1, ,, final, SerialDate, d2, ), {, return, isInRange, (, d1, ,]
[), ;, }, public, boolean, isInRange, (, final, SerialDate, d1, ,, final, SerialDate, d2, ), {, return, isInRange, (, d1]
[>=, other, ., toSerial, (, ), ), ;, }, public, boolean, isInRange, (, final, SerialDate, d1, ,, final, SerialDate, d2]
[., serial, >=, other, ., toSerial, (, ), ), ;, }, public, boolean, isInRange, (, final, SerialDate, d1, ,, final]
[), ;, }, public, boolean, isInRange, (, final, SerialDate, d1, ,, final, SerialDate, d2, ), {, return, isInRange, (, d1]
[., toSerial, (, ), ), ;, }, public, boolean, isInRange, (, final, SerialDate, d1, ,, final, SerialDate, d2, ), {]
[;, }, public, boolean, isInRange, (, final, SerialDate, d1, ,, final, SerialDate, d2, ,, final, int, include, ), {, final]
[,, d2, ,, SerialDate, ., INCLUDE_BOTH, ), ;, }, public, boolean, isInRange, (, final, SerialDate, d1, ,, final, SerialDate, d2]
[,, SerialDate, ., INCLUDE_BOTH, ), ;, }, public, boolean, isInRange, (, final, SerialDate, d1, ,, final, SerialDate, d2, ,, final]
[), ;, }, public, boolean, isInRange, (, final, SerialDate, d1, ,, final, SerialDate, d2, ,, final, int, include, ), {]
[., INCLUDE_BOTH, ), ;, }, public, boolean, isInRange, (, final, SerialDate, d1, ,, final, SerialDate, d2, ,, final, int, include]
[;, final, int, s2, =, d2, ., toSerial, (, ), ;, final, int, start, =, Math, ., min, (, s1]
[., toSerial, (, ), ;, final, int, s2, =, d2, ., toSerial, (, ), ;, final, int, start, =, Math]
[;, final, int, start, =, Math, ., min, (, s1, ,, s2, ), ;, final, int, end, =, Math, .]
[., toSerial, (, ), ;, final, int, start, =, Math, ., min, (, s1, ,, s2, ), ;, final, int]
[;, final, int, end, =, Math, ., max, (, s1, ,, s2, ), ;, final, int, s, =, toSerial, (]
[., min, (, s1, ,, s2, ), ;, final, int, end, =, Math, ., max, (, s1, ,, s2, )]
[,, s2, ), ;, final, int, end, =, Math, ., max, (, s1, ,, s2, ), ;, final, int, s]
[), ;, final, int, end, =, Math, ., max, (, s1, ,, s2, ), ;, final, int, s, =, toSerial]
[;, final, int, s, =, toSerial, (, ), ;, if, (, include, ==, SerialDate, ., INCLUDE_BOTH, ), {, return, (]
[., max, (, s1, ,, s2, ), ;, final, int, s, =, toSerial, (, ), ;, if, (, include, ==]
[,, s2, ), ;, final, int, s, =, toSerial, (, ), ;, if, (, include, ==, SerialDate, ., INCLUDE_BOTH, )]
[), ;, final, int, s, =, toSerial, (, ), ;, if, (, include, ==, SerialDate, ., INCLUDE_BOTH, ), {, return]
[;, if, (, include, ==, SerialDate, ., INCLUDE_BOTH, ), {, return, (, s, >=, start, &&, s, <=, end, )]
[), {, return, (, s, >=, start, &&, s, <=, end, ), ;, }, else, if, (, include, ==, SerialDate]
[==, SerialDate, ., INCLUDE_BOTH, ), {, return, (, s, >=, start, &&, s, <=, end, ), ;, }, else, if]
[), {, return, (, s, >=, start, &&, s, <=, end, ), ;, }, else, if, (, include, ==, SerialDate]
[., INCLUDE_BOTH, ), {, return, (, s, >=, start, &&, s, <=, end, ), ;, }, else, if, (, include]
[;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_FIRST, ), {, return, (, s, >=, start, &&, s, <]
[), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_FIRST, ), {, return, (, s, >=, start, &&, s]
[&&, s, <=, end, ), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_FIRST, ), {, return, (, s]
[>=, start, &&, s, <=, end, ), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_FIRST, ), {, return]
[&&, s, <=, end, ), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_FIRST, ), {, return, (, s]
[), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_FIRST, ), {, return, (, s, >=, start, &&, s]
[<=, end, ), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_FIRST, ), {, return, (, s, >=, start]
[), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_FIRST, ), {, return, (, s, >=, start, &&, s]
[), {, return, (, s, >=, start, &&, s, <, end, ), ;, }, else, if, (, include, ==, SerialDate]
[==, SerialDate, ., INCLUDE_FIRST, ), {, return, (, s, >=, start, &&, s, <, end, ), ;, }, else, if]
[), {, return, (, s, >=, start, &&, s, <, end, ), ;, }, else, if, (, include, ==, SerialDate]
[., INCLUDE_FIRST, ), {, return, (, s, >=, start, &&, s, <, end, ), ;, }, else, if, (, include]
[;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_SECOND, ), {, return, (, s, >, start, &&, s, <=]
[), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_SECOND, ), {, return, (, s, >, start, &&, s]
[&&, s, <, end, ), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_SECOND, ), {, return, (, s]
[>=, start, &&, s, <, end, ), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_SECOND, ), {, return]
[&&, s, <, end, ), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_SECOND, ), {, return, (, s]
[), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_SECOND, ), {, return, (, s, >, start, &&, s]
[<, end, ), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_SECOND, ), {, return, (, s, >, start]
[), ;, }, else, if, (, include, ==, SerialDate, ., INCLUDE_SECOND, ), {, return, (, s, >, start, &&, s]
[), {, return, (, s, >, start, &&, s, <=, end, ), ;, }, else, {, return, (, s, >]
[==, SerialDate, ., INCLUDE_SECOND, ), {, return, (, s, >, start, &&, s, <=, end, ), ;, }, else, {]
[), {, return, (, s, >, start, &&, s, <=, end, ), ;, }, else, {, return, (, s, >]
[., INCLUDE_SECOND, ), {, return, (, s, >, start, &&, s, <=, end, ), ;, }, else, {, return, (]
[;, }, else, {, return, (, s, >, start, &&, s, <, end, ), ;, }, }, private, int, calcSerial]
[), ;, }, else, {, return, (, s, >, start, &&, s, <, end, ), ;, }, }, private, int]
[&&, s, <=, end, ), ;, }, else, {, return, (, s, >, start, &&, s, <, end, ), ;]
[>, start, &&, s, <=, end, ), ;, }, else, {, return, (, s, >, start, &&, s, <, end]
[&&, s, <=, end, ), ;, }, else, {, return, (, s, >, start, &&, s, <, end, ), ;]
[), ;, }, else, {, return, (, s, >, start, &&, s, <, end, ), ;, }, }, private, int]
[<=, end, ), ;, }, else, {, return, (, s, >, start, &&, s, <, end, ), ;, }, }]
[), ;, }, else, {, return, (, s, >, start, &&, s, <, end, ), ;, }, }, private, int]
[;, }, }, private, int, calcSerial, (, final, int, d, ,, final, int, m, ,, final, int, y, ), {]
[), ;, }, }, private, int, calcSerial, (, final, int, d, ,, final, int, m, ,, final, int, y, )]
[&&, s, <, end, ), ;, }, }, private, int, calcSerial, (, final, int, d, ,, final, int, m, ,]
[>, start, &&, s, <, end, ), ;, }, }, private, int, calcSerial, (, final, int, d, ,, final, int]
[&&, s, <, end, ), ;, }, }, private, int, calcSerial, (, final, int, d, ,, final, int, m, ,]
[), ;, }, }, private, int, calcSerial, (, final, int, d, ,, final, int, m, ,, final, int, y, )]
[<, end, ), ;, }, }, private, int, calcSerial, (, final, int, d, ,, final, int, m, ,, final, int]
[), ;, }, }, private, int, calcSerial, (, final, int, d, ,, final, int, m, ,, final, int, y, )]
[;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, [, m, ], ;, if, (, m, >, MonthConstants, ., FEBRUARY, ), {]
[+, SerialDate, ., leapYearCount, (, y, -, 1, ), ;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, [, m, ], ;]
[), +, SerialDate, ., leapYearCount, (, y, -, 1, ), ;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, [, m, ]]
[*, 365, ), +, SerialDate, ., leapYearCount, (, y, -, 1, ), ;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, []
[), *, 365, ), +, SerialDate, ., leapYearCount, (, y, -, 1, ), ;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH]
[-, 1900, ), *, 365, ), +, SerialDate, ., leapYearCount, (, y, -, 1, ), ;, int, mm, =, SerialDate]
[), *, 365, ), +, SerialDate, ., leapYearCount, (, y, -, 1, ), ;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH]
[), +, SerialDate, ., leapYearCount, (, y, -, 1, ), ;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, [, m, ]]
[;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, [, m, ], ;, if, (, m, >, MonthConstants, ., FEBRUARY, ), {]
[., leapYearCount, (, y, -, 1, ), ;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, [, m, ], ;, if, (]
[), ;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, [, m, ], ;, if, (, m, >, MonthConstants, ., FEBRUARY, )]
[-, 1, ), ;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, [, m, ], ;, if, (, m, >, MonthConstants, .]
[), ;, int, mm, =, SerialDate, ., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, [, m, ], ;, if, (, m, >, MonthConstants, ., FEBRUARY, )]
[;, if, (, m, >, MonthConstants, ., FEBRUARY, ), {, if, (, SerialDate, ., isLeapYear, (, y, ), ), {]
[[, m, ], ;, if, (, m, >, MonthConstants, ., FEBRUARY, ), {, if, (, SerialDate, ., isLeapYear, (, y]
[., AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, [, m, ], ;, if, (, m, >, MonthConstants, ., FEBRUARY, ), {, if, (, SerialDate, ., isLeapYear]
[], ;, if, (, m, >, MonthConstants, ., FEBRUARY, ), {, if, (, SerialDate, ., isLeapYear, (, y, ), )]
[), {, if, (, SerialDate, ., isLeapYear, (, y, ), ), {, mm, =, mm, +, 1, ;, }, }]
[>, MonthConstants, ., FEBRUARY, ), {, if, (, SerialDate, ., isLeapYear, (, y, ), ), {, mm, =, mm, +]
[), {, if, (, SerialDate, ., isLeapYear, (, y, ), ), {, mm, =, mm, +, 1, ;, }, }]
[., FEBRUARY, ), {, if, (, SerialDate, ., isLeapYear, (, y, ), ), {, mm, =, mm, +, 1, ;]
[), {, mm, =, mm, +, 1, ;, }, }, final, int, dd, =, d, ;, return, yy, +, mm]
[., isLeapYear, (, y, ), ), {, mm, =, mm, +, 1, ;, }, }, final, int, dd, =, d]
[), ), {, mm, =, mm, +, 1, ;, }, }, final, int, dd, =, d, ;, return, yy, +]
[=, mm, +, 1, ;, }, }, final, int, dd, =, d, ;, return, yy, +, mm, +, dd, +]
[;, }, }, final, int, dd, =, d, ;, return, yy, +, mm, +, dd, +, 1, ;, }, }]
[+, 1, ;, }, }, final, int, dd, =, d, ;, return, yy, +, mm, +, dd, +, 1, ;]
[;, }, }, final, int, dd, =, d, ;, return, yy, +, mm, +, dd, +, 1, ;, }, }]
[;, return, yy, +, mm, +, dd, +, 1, ;, }, }]
[;, }, }]
[+, 1, ;, }, }]
[+, dd, +, 1, ;, }, }]
[+, mm, +, dd, +, 1, ;, }, }]
[+, dd, +, 1, ;, }, }]
[+, 1, ;, }, }]
[;, }, }]
