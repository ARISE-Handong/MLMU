[extends, FieldElement, <, T, >, >, extends, AbstractFieldMatrix, <, T, >, implements, Serializable, {, public, static, final, int, BLOCK_SIZE, =]
[<, T, >, implements, Serializable, {, public, static, final, int, BLOCK_SIZE, =, 36, ;, private, static, final, long, serialVersionUID, =]
[T, >, implements, Serializable, {, public, static, final, int, BLOCK_SIZE, =, 36, ;, private, static, final, long, serialVersionUID, =, -]
[final, Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), throws, NotStrictlyPositiveException, {, super, (]
[<, T, >, field, ,, final, int, rows, ,, final, int, columns, ), throws, NotStrictlyPositiveException, {, super, (, field, ,]
[>, field, ,, final, int, rows, ,, final, int, columns, ), throws, NotStrictlyPositiveException, {, super, (, field, ,, rows, ,]
[final, int, rows, ,, final, int, columns, ), throws, NotStrictlyPositiveException, {, super, (, field, ,, rows, ,, columns, ), ;]
[final, int, rows, ,, final, int, columns, ), throws, NotStrictlyPositiveException, {, super, (, field, ,, rows, ,, columns, ), ;]
[final, int, columns, ), throws, NotStrictlyPositiveException, {, super, (, field, ,, rows, ,, columns, ), ;, this, ., rows, =]
[columns, ), throws, NotStrictlyPositiveException, {, super, (, field, ,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;]
[columns, ), throws, NotStrictlyPositiveException, {, super, (, field, ,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;]
[{, super, (, field, ,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =]
[(, field, ,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;]
[,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =]
[,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =]
[rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (]
[rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (]
[rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (]
[columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +]
[;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -]
[rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /]
[rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;]
[this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =]
[this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =]
[., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (]
[., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (]
[., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (]
[=, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +]
[;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -]
[(, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;]
[-, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =]
[), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (]
[BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field, ,]
[blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field, ,, rows, ,]
[columns, ), ;, }, public, BlockFieldMatrix, (, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException, {, this, (]
[columns, ), ;, }, public, BlockFieldMatrix, (, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException, {, this, (]
[public, BlockFieldMatrix, (, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException, {, this, (, rawData, ., length, ,]
[public, BlockFieldMatrix, (, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException, {, this, (, rawData, ., length, ,]
[public, BlockFieldMatrix, (, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException, {, this, (, rawData, ., length, ,]
[(, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException, {, this, (, rawData, ., length, ,, rawData, []
[[, ], rawData, ), throws, DimensionMismatchException, {, this, (, rawData, ., length, ,, rawData, [, 0, ], ., length, ,]
[rawData, ), throws, DimensionMismatchException, {, this, (, rawData, ., length, ,, rawData, [, 0, ], ., length, ,, toBlocksLayout, (]
[DimensionMismatchException, {, this, (, rawData, ., length, ,, rawData, [, 0, ], ., length, ,, toBlocksLayout, (, rawData, ), ,]
[,, final, T, [, ], [, ], blockData, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NotStrictlyPositiveException, {, super, (]
[T, [, ], [, ], blockData, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NotStrictlyPositiveException, {, super, (, extractField, (]
[[, ], blockData, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NotStrictlyPositiveException, {, super, (, extractField, (, blockData, ), ,]
[blockData, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NotStrictlyPositiveException, {, super, (, extractField, (, blockData, ), ,, rows, ,]
[boolean, copyArray, ), throws, DimensionMismatchException, ,, NotStrictlyPositiveException, {, super, (, extractField, (, blockData, ), ,, rows, ,, columns, ), ;]
[boolean, copyArray, ), throws, DimensionMismatchException, ,, NotStrictlyPositiveException, {, super, (, extractField, (, blockData, ), ,, rows, ,, columns, ), ;]
[DimensionMismatchException, ,, NotStrictlyPositiveException, {, super, (, extractField, (, blockData, ), ,, rows, ,, columns, ), ;, this, ., rows, =]
[NotStrictlyPositiveException, {, super, (, extractField, (, blockData, ), ,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;]
[NotStrictlyPositiveException, {, super, (, extractField, (, blockData, ), ,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;]
[extractField, (, blockData, ), ,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =]
[blockData, ), ,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;]
[,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =]
[,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =]
[rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (]
[rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (]
[rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (]
[columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +]
[;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -]
[rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /]
[rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;]
[this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =]
[this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =]
[., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (]
[., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (]
[., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (]
[=, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +]
[;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -]
[(, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /]
[-, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (]
[/, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {]
[;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =]
[;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =]
[columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (]
[1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[/, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, ), ,, blockRows, *]
[;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, ), ,, blockRows, *, blockColumns, ,]
[if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, ), ,, blockRows, *, blockColumns, ,, -]
[=, MathArrays, ., buildArray, (, getField, (, ), ,, blockRows, *, blockColumns, ,, -, 1, ), ;, }, else, {]
[., buildArray, (, getField, (, ), ,, blockRows, *, blockColumns, ,, -, 1, ), ;, }, else, {, blocks, =]
[,, blockRows, *, blockColumns, ,, -, 1, ), ;, }, else, {, blocks, =, blockData, ;, }, int, index, =]
[), ;, }, else, {, blocks, =, blockData, ;, }, int, index, =, 0, ;, for, (, int, iBlock, =]
[}, else, {, blocks, =, blockData, ;, }, int, index, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[}, else, {, blocks, =, blockData, ;, }, int, index, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[{, blocks, =, blockData, ;, }, int, index, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[=, blockData, ;, }, int, index, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[blockData, ;, }, int, index, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (]
[blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =]
[++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =, 0, ;]
[++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =, 0, ;]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[final, int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[=, blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ,]
[blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ,, ++]
[for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ,, ++, index, ), {, if, (]
[for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ,, ++, index, ), {, if, (]
[for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ,, ++, index, ), {, if, (]
[for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ,, ++, index, ), {, if, (]
[int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ,, ++, index, ), {, if, (, blockData, []
[jBlock, <, blockColumns, ;, ++, jBlock, ,, ++, index, ), {, if, (, blockData, [, index, ], ., length, !=]
[jBlock, <, blockColumns, ;, ++, jBlock, ,, ++, index, ), {, if, (, blockData, [, index, ], ., length, !=]
[blockColumns, ;, ++, jBlock, ,, ++, index, ), {, if, (, blockData, [, index, ], ., length, !=, iHeight, *]
[++, jBlock, ,, ++, index, ), {, if, (, blockData, [, index, ], ., length, !=, iHeight, *, blockWidth, (]
[), {, if, (, blockData, [, index, ], ., length, !=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw]
[(, blockData, [, index, ], ., length, !=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (]
[(, blockData, [, index, ], ., length, !=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (]
[(, blockData, [, index, ], ., length, !=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (]
[[, index, ], ., length, !=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (, blockData, []
[!=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (, blockData, [, index, ], ., length, ,]
[!=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (, blockData, [, index, ], ., length, ,]
[*, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (, blockData, [, index, ], ., length, ,, iHeight, *]
[(, jBlock, ), ), {, throw, new, DimensionMismatchException, (, blockData, [, index, ], ., length, ,, iHeight, *, blockWidth, (]
[DimensionMismatchException, (, blockData, [, index, ], ., length, ,, iHeight, *, blockWidth, (, jBlock, ), ), ;, }, if, (]
[[, index, ], ., length, ,, iHeight, *, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {]
[[, index, ], ., length, ,, iHeight, *, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {]
[], ., length, ,, iHeight, *, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {, blocks, []
[,, iHeight, *, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {, blocks, [, index, ], =]
[,, iHeight, *, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {, blocks, [, index, ], =]
[,, iHeight, *, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {, blocks, [, index, ], =]
[*, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {, blocks, [, index, ], =, blockData, []
[], [, ], toBlocksLayout, (, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException, {, final, int, rows, =]
[], [, ], toBlocksLayout, (, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException, {, final, int, rows, =]
[], [, ], rawData, ), throws, DimensionMismatchException, {, final, int, rows, =, rawData, ., length, ;, final, int, columns, =]
[], [, ], rawData, ), throws, DimensionMismatchException, {, final, int, rows, =, rawData, ., length, ;, final, int, columns, =]
[], [, ], rawData, ), throws, DimensionMismatchException, {, final, int, rows, =, rawData, ., length, ;, final, int, columns, =]
[], rawData, ), throws, DimensionMismatchException, {, final, int, rows, =, rawData, ., length, ;, final, int, columns, =, rawData, []
[=, rawData, ., length, ;, final, int, columns, =, rawData, [, 0, ], ., length, ;, final, int, blockRows, =]
[=, rawData, ., length, ;, final, int, columns, =, rawData, [, 0, ], ., length, ;, final, int, blockRows, =]
[rawData, ., length, ;, final, int, columns, =, rawData, [, 0, ], ., length, ;, final, int, blockRows, =, (]
[rawData, ., length, ;, final, int, columns, =, rawData, [, 0, ], ., length, ;, final, int, blockRows, =, (]
[rawData, ., length, ;, final, int, columns, =, rawData, [, 0, ], ., length, ;, final, int, blockRows, =, (]
[length, ;, final, int, columns, =, rawData, [, 0, ], ., length, ;, final, int, blockRows, =, (, rows, +]
[final, int, columns, =, rawData, [, 0, ], ., length, ;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -]
[=, rawData, [, 0, ], ., length, ;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /]
[length, ;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =]
[length, ;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =]
[;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (]
[;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (]
[;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (]
[int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +]
[=, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /]
[;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =]
[int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;]
[int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;]
[=, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;, i, <]
[=, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;, i, <]
[BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;, i, <, rawData, ., length, ;]
[-, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;, i, <, rawData, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, rawData, ., length, ;, ++, i, ), {, final, int, length, =]
[(, int, i, =, 0, ;, i, <, rawData, ., length, ;, ++, i, ), {, final, int, length, =]
[(, int, i, =, 0, ;, i, <, rawData, ., length, ;, ++, i, ), {, final, int, length, =]
[i, =, 0, ;, i, <, rawData, ., length, ;, ++, i, ), {, final, int, length, =, rawData, []
[., length, ;, ++, i, ), {, final, int, length, =, rawData, [, i, ], ., length, ;, if, (]
[., length, ;, ++, i, ), {, final, int, length, =, rawData, [, i, ], ., length, ;, if, (]
[;, ++, i, ), {, final, int, length, =, rawData, [, i, ], ., length, ;, if, (, length, !=]
[{, final, int, length, =, rawData, [, i, ], ., length, ;, if, (, length, !=, columns, ), {, throw]
[length, =, rawData, [, i, ], ., length, ;, if, (, length, !=, columns, ), {, throw, new, DimensionMismatchException, (]
[rawData, [, i, ], ., length, ;, if, (, length, !=, columns, ), {, throw, new, DimensionMismatchException, (, columns, ,]
[), {, throw, new, DimensionMismatchException, (, columns, ,, length, ), ;, }, }, final, Field, <, T, >, field, =]
[throw, new, DimensionMismatchException, (, columns, ,, length, ), ;, }, }, final, Field, <, T, >, field, =, extractField, (]
[final, Field, <, T, >, field, =, extractField, (, rawData, ), ;, final, T, [, ], [, ], blocks, =]
[final, Field, <, T, >, field, =, extractField, (, rawData, ), ;, final, T, [, ], [, ], blocks, =]
[>, field, =, extractField, (, rawData, ), ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (]
[=, extractField, (, rawData, ), ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,]
[=, extractField, (, rawData, ), ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,]
[(, rawData, ), ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *]
[), ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *, blockColumns, ,]
[;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *, blockColumns, ,, -]
[], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =]
[field, ,, blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =]
[blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[-, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =]
[int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -]
[pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =]
[BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;]
[BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;]
[rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *]
[jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =]
[int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -]
[+, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, final, T, [, ], block, =]
[+, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, final, T, [, ], block, =]
[), ;, final, int, jWidth, =, qEnd, -, qStart, ;, final, T, [, ], block, =, MathArrays, ., buildArray, (]
[final, int, jWidth, =, qEnd, -, qStart, ;, final, T, [, ], block, =, MathArrays, ., buildArray, (, field, ,]
[final, int, jWidth, =, qEnd, -, qStart, ;, final, T, [, ], block, =, MathArrays, ., buildArray, (, field, ,]
[jWidth, =, qEnd, -, qStart, ;, final, T, [, ], block, =, MathArrays, ., buildArray, (, field, ,, iHeight, *]
[-, qStart, ;, final, T, [, ], block, =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;]
[-, qStart, ;, final, T, [, ], block, =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;]
[;, final, T, [, ], block, =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, blocks, []
[[, ], block, =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, blocks, [, blockIndex, ], =]
[., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, blocks, [, blockIndex, ], =, block, ;, int, index, =]
[jWidth, ), ;, blocks, [, blockIndex, ], =, block, ;, int, index, =, 0, ;, for, (, int, p, =]
[;, blocks, [, blockIndex, ], =, block, ;, int, index, =, 0, ;, for, (, int, p, =, pStart, ;]
[;, blocks, [, blockIndex, ], =, block, ;, int, index, =, 0, ;, for, (, int, p, =, pStart, ;]
[[, blockIndex, ], =, block, ;, int, index, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[], =, block, ;, int, index, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[=, block, ;, int, index, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[int, index, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {]
[int, index, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, System, ., arraycopy, (]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, System, ., arraycopy, (]
[(, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, System, ., arraycopy, (, rawData, []
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, System, ., arraycopy, (, rawData, [, p, ], ,]
[;, p, <, pEnd, ;, ++, p, ), {, System, ., arraycopy, (, rawData, [, p, ], ,, qStart, ,]
[<, pEnd, ;, ++, p, ), {, System, ., arraycopy, (, rawData, [, p, ], ,, qStart, ,, block, ,]
[;, ++, p, ), {, System, ., arraycopy, (, rawData, [, p, ], ,, qStart, ,, block, ,, index, ,]
[), {, System, ., arraycopy, (, rawData, [, p, ], ,, qStart, ,, block, ,, index, ,, jWidth, ), ;]
[System, ., arraycopy, (, rawData, [, p, ], ,, qStart, ,, block, ,, index, ,, jWidth, ), ;, index, +=]
[(, rawData, [, p, ], ,, qStart, ,, block, ,, index, ,, jWidth, ), ;, index, +=, jWidth, ;, }]
[rawData, [, p, ], ,, qStart, ,, block, ,, index, ,, jWidth, ), ;, index, +=, jWidth, ;, }, ++]
[qStart, ,, block, ,, index, ,, jWidth, ), ;, index, +=, jWidth, ;, }, ++, blockIndex, ;, }, }, return]
[final, Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, final, int, blockRows, =]
[final, Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, final, int, blockRows, =]
[Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, final, int, blockRows, =, (]
[Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, final, int, blockRows, =, (]
[Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, final, int, blockRows, =, (]
[T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, final, int, blockRows, =, (, rows, +]
[field, ,, final, int, rows, ,, final, int, columns, ), {, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -]
[int, rows, ,, final, int, columns, ), {, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /]
[), {, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =]
[), {, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =]
[{, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (]
[{, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (]
[{, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (]
[int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +]
[=, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /]
[blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =]
[blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (]
[-, 1, ), /, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,]
[-, 1, ), /, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,]
[), /, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *]
[BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *, blockColumns, ,]
[;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *, blockColumns, ,, -]
[], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =]
[field, ,, blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =]
[blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[-, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =]
[int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -]
[pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =]
[BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;]
[BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;]
[rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *]
[jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =]
[int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -]
[=, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;]
[=, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, []
[qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, [, blockIndex, ], =]
[qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, [, blockIndex, ], =]
[columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray, (]
[;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray, (, field, ,]
[;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray, (, field, ,]
[int, jWidth, =, qEnd, -, qStart, ;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray, (, field, ,, iHeight, *]
[qEnd, -, qStart, ;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;]
[-, qStart, ;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, ++]
[blockIndex, ], =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, ++, blockIndex, ;, }, }, return]
[Override, public, FieldMatrix, <, T, >, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, return]
[createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, return, new, BlockFieldMatrix, <, T, >, (]
[rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, return, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, return, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rowDimension, ,]
[), ;, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, BlockFieldMatrix, <, T, >, copied, =]
[FieldMatrix, <, T, >, copy, (, ), {, BlockFieldMatrix, <, T, >, copied, =, new, BlockFieldMatrix, <, T, >, (]
[copy, (, ), {, BlockFieldMatrix, <, T, >, copied, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[), {, BlockFieldMatrix, <, T, >, copied, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, i, =]
[<, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, i, =, 0, ;]
[<, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, i, =, 0, ;]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, i, =, 0, ;, i, <]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ,, rows, ,, columns, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, ., length, ;]
[,, rows, ,, columns, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, ., length, ;, ++]
[columns, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, ., length, ;, ++, i, ), {]
[columns, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, ., length, ;, ++, i, ), {]
[(, int, i, =, 0, ;, i, <, blocks, ., length, ;, ++, i, ), {, System, ., arraycopy, (]
[(, int, i, =, 0, ;, i, <, blocks, ., length, ;, ++, i, ), {, System, ., arraycopy, (]
[i, =, 0, ;, i, <, blocks, ., length, ;, ++, i, ), {, System, ., arraycopy, (, blocks, []
[;, i, <, blocks, ., length, ;, ++, i, ), {, System, ., arraycopy, (, blocks, [, i, ], ,]
[<, blocks, ., length, ;, ++, i, ), {, System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,]
[<, blocks, ., length, ;, ++, i, ), {, System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,]
[<, blocks, ., length, ;, ++, i, ), {, System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,]
[;, ++, i, ), {, System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, ., blocks, []
[), {, System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, ., blocks, [, i, ], ,]
[System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, ., blocks, [, i, ], ,, 0, ,]
[System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, ., blocks, [, i, ], ,, 0, ,]
[System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, ., blocks, [, i, ], ,, 0, ,]
[arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, ., blocks, [, i, ], ,, 0, ,, blocks, []
[,, copied, ., blocks, [, i, ], ,, 0, ,, blocks, [, i, ], ., length, ), ;, }, return]
[public, FieldMatrix, <, T, >, add, (, final, FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, try, {, return]
[<, T, >, add, (, final, FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, try, {, return, add, (]
[FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, try, {, return, add, (, (, BlockFieldMatrix, <, T, >, )]
[{, return, add, (, (, BlockFieldMatrix, <, T, >, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {]
[add, (, (, BlockFieldMatrix, <, T, >, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {, checkAdditionCompatible, (]
[;, }, catch, (, ClassCastException, cce, ), {, checkAdditionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[), {, checkAdditionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, int, blockIndex, =]
[(, getField, (, ), ,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =]
[(, ), ,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[(, ), ,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++]
[int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =]
[=, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;]
[=, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;]
[;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <]
[;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <]
[., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;]
[blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++]
[jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =]
[jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =]
[jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =]
[jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, []
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, []
[blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =]
[blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =]
[blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock, *]
[], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[[, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[[, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =]
[int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =, jBlock, *]
[(, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[(, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =]
[(, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[(, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[+, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, []
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =]
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =]
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =]
[int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, []
[q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (]
[q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (]
[++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, m, ., getEntry, (]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, m, ., getEntry, (, p, ,]
[k, ], =, tBlock, [, k, ], ., add, (, m, ., getEntry, (, p, ,, q, ), ), ;]
[], =, tBlock, [, k, ], ., add, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++]
[k, ], ., add, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }]
[], ., add, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }, ++]
[., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return]
[;, }, }, public, BlockFieldMatrix, <, T, >, add, (, final, BlockFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {]
[}, public, BlockFieldMatrix, <, T, >, add, (, final, BlockFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, checkAdditionCompatible, (]
[<, T, >, m, ), throws, MatrixDimensionMismatchException, {, checkAdditionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[MatrixDimensionMismatchException, {, checkAdditionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =]
[<, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;]
[<, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;]
[,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, []
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, []
[blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =]
[blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =]
[blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =]
[T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =, m, ., blocks, []
[], ;, final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =]
[final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;]
[final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;]
[[, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <]
[[, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <]
[m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;]
[., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++]
[blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {]
[blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {]
[;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, []
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[=, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, []
[outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (]
[outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (]
[length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, mBlock, []
[[, k, ], =, tBlock, [, k, ], ., add, (, mBlock, [, k, ], ), ;, }, }, return]
[public, FieldMatrix, <, T, >, subtract, (, final, FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, try, {, return]
[<, T, >, subtract, (, final, FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, try, {, return, subtract, (]
[FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, try, {, return, subtract, (, (, BlockFieldMatrix, <, T, >, )]
[{, return, subtract, (, (, BlockFieldMatrix, <, T, >, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {]
[subtract, (, (, BlockFieldMatrix, <, T, >, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {, checkSubtractionCompatible, (]
[;, }, catch, (, ClassCastException, cce, ), {, checkSubtractionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[), {, checkSubtractionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, int, blockIndex, =]
[(, getField, (, ), ,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =]
[(, ), ,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[(, ), ,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++]
[int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =]
[=, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;]
[=, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;]
[;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <]
[;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <]
[., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;]
[blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++]
[jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =]
[jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =]
[jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =]
[jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, []
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, []
[blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =]
[blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =]
[blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock, *]
[], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[[, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[[, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =]
[int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =, jBlock, *]
[(, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[(, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =]
[(, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[(, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[+, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, []
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =]
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =]
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =]
[int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, []
[q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (]
[q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (]
[++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, m, ., getEntry, (]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, m, ., getEntry, (, p, ,]
[k, ], =, tBlock, [, k, ], ., subtract, (, m, ., getEntry, (, p, ,, q, ), ), ;]
[], =, tBlock, [, k, ], ., subtract, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++]
[k, ], ., subtract, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }]
[], ., subtract, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }, ++]
[., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return]
[;, }, }, public, BlockFieldMatrix, <, T, >, subtract, (, final, BlockFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {]
[}, public, BlockFieldMatrix, <, T, >, subtract, (, final, BlockFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, checkSubtractionCompatible, (]
[<, T, >, m, ), throws, MatrixDimensionMismatchException, {, checkSubtractionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[MatrixDimensionMismatchException, {, checkSubtractionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =]
[<, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;]
[<, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;]
[,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, []
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, []
[blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =]
[blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =]
[blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =]
[T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =, m, ., blocks, []
[], ;, final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =]
[final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;]
[final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;]
[[, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <]
[[, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <]
[m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;]
[., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++]
[blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {]
[blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {]
[;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, []
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[=, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, []
[outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (]
[outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (]
[length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, mBlock, []
[[, k, ], =, tBlock, [, k, ], ., subtract, (, mBlock, [, k, ], ), ;, }, }, return]
[Override, public, FieldMatrix, <, T, >, scalarAdd, (, final, T, d, ), {, final, BlockFieldMatrix, <, T, >, out, =]
[scalarAdd, (, final, T, d, ), {, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[d, ), {, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[{, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =]
[<, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;]
[<, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;]
[,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, []
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, []
[[, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =]
[], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;]
[], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;]
[final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <]
[final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <]
[tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;]
[=, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++]
[blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {]
[blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {]
[;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, []
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[=, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, []
[outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, d, ), ;, }, }, return]
[Override, public, FieldMatrix, <, T, >, scalarMultiply, (, final, T, d, ), {, final, BlockFieldMatrix, <, T, >, out, =]
[scalarMultiply, (, final, T, d, ), {, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[d, ), {, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[{, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =]
[<, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;]
[<, T, >, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[>, (, getField, (, ), ,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <]
[rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;]
[,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =]
[out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, []
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, []
[[, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =]
[], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;]
[], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;]
[final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <]
[final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <]
[tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;]
[=, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++]
[blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {]
[blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {]
[;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, []
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =]
[=, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, []
[outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., multiply, (]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., multiply, (, d, ), ;, }, }, return]
[public, FieldMatrix, <, T, >, multiply, (, final, FieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, try, {, return]
[<, T, >, multiply, (, final, FieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, try, {, return, multiply, (]
[FieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, try, {, return, multiply, (, (, BlockFieldMatrix, <, T, >, )]
[{, return, multiply, (, (, BlockFieldMatrix, <, T, >, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {]
[multiply, (, (, BlockFieldMatrix, <, T, >, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {, checkMultiplicationCompatible, (]
[;, }, catch, (, ClassCastException, cce, ), {, checkMultiplicationCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[), {, checkMultiplicationCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[T, >, (, getField, (, ), ,, rows, ,, m, ., getColumnDimension, (, ), ), ;, final, T, zero, =]
[T, >, (, getField, (, ), ,, rows, ,, m, ., getColumnDimension, (, ), ), ;, final, T, zero, =]
[getColumnDimension, (, ), ), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, int, blockIndex, =]
[zero, =, getField, (, ), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =]
[getField, (, ), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[getField, (, ), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++]
[(, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[(, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *]
[out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;]
[FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;]
[+, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++]
[(, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[(, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *]
[out, ., blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[out, ., blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[., min, (, qStart, +, BLOCK_SIZE, ,, m, ., getColumnDimension, (, ), ), ;, final, T, [, ], outBlock, =]
[., min, (, qStart, +, BLOCK_SIZE, ,, m, ., getColumnDimension, (, ), ), ;, final, T, [, ], outBlock, =]
[., min, (, qStart, +, BLOCK_SIZE, ,, m, ., getColumnDimension, (, ), ), ;, final, T, [, ], outBlock, =]
[+, BLOCK_SIZE, ,, m, ., getColumnDimension, (, ), ), ;, final, T, [, ], outBlock, =, out, ., blocks, []
[), ;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =]
[final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;]
[final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;]
[[, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <]
[outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;]
[=, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++]
[;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth, =]
[(, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (]
[;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =]
[;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =]
[kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, []
[kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, []
[kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, []
[{, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, [, iBlock, *]
[int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +]
[;, final, T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, int, rStart, =]
[;, final, T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, int, rStart, =]
[T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, int, rStart, =, kBlock, *]
[blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, int, rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =]
[], ;, final, int, rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int, p, =]
[final, int, rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[final, int, rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[kBlock, *, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[*, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =, (]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =, (]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =, (, p, -]
[pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *]
[++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =]
[++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =]
[), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +]
[p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =]
[pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =, qStart, ;]
[pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =, qStart, ;]
[*, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =, qStart, ;, q, <]
[;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[kWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, T, sum, =]
[q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, T, sum, =, zero, ;, int, r, =]
[;, ++, q, ), {, T, sum, =, zero, ;, int, r, =, rStart, ;, for, (, int, l, =]
[q, ), {, T, sum, =, zero, ;, int, r, =, rStart, ;, for, (, int, l, =, lStart, ;]
[q, ), {, T, sum, =, zero, ;, int, r, =, rStart, ;, for, (, int, l, =, lStart, ;]
[{, T, sum, =, zero, ;, int, r, =, rStart, ;, for, (, int, l, =, lStart, ;, l, <]
[sum, =, zero, ;, int, r, =, rStart, ;, for, (, int, l, =, lStart, ;, l, <, lEnd, ;]
[=, zero, ;, int, r, =, rStart, ;, for, (, int, l, =, lStart, ;, l, <, lEnd, ;, ++]
[int, r, =, rStart, ;, for, (, int, l, =, lStart, ;, l, <, lEnd, ;, ++, l, ), {]
[=, rStart, ;, for, (, int, l, =, lStart, ;, l, <, lEnd, ;, ++, l, ), {, sum, =]
[=, rStart, ;, for, (, int, l, =, lStart, ;, l, <, lEnd, ;, ++, l, ), {, sum, =]
[(, int, l, =, lStart, ;, l, <, lEnd, ;, ++, l, ), {, sum, =, sum, ., add, (]
[(, int, l, =, lStart, ;, l, <, lEnd, ;, ++, l, ), {, sum, =, sum, ., add, (]
[(, int, l, =, lStart, ;, l, <, lEnd, ;, ++, l, ), {, sum, =, sum, ., add, (]
[l, =, lStart, ;, l, <, lEnd, ;, ++, l, ), {, sum, =, sum, ., add, (, tBlock, []
[<, lEnd, ;, ++, l, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (]
[<, lEnd, ;, ++, l, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (]
[l, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, m, ., getEntry, (]
[{, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, m, ., getEntry, (, r, ,]
[add, (, tBlock, [, l, ], ., multiply, (, m, ., getEntry, (, r, ,, q, ), ), ), ;]
[(, tBlock, [, l, ], ., multiply, (, m, ., getEntry, (, r, ,, q, ), ), ), ;, ++]
[l, ], ., multiply, (, m, ., getEntry, (, r, ,, q, ), ), ), ;, ++, r, ;, }]
[l, ], ., multiply, (, m, ., getEntry, (, r, ,, q, ), ), ), ;, ++, r, ;, }]
[., multiply, (, m, ., getEntry, (, r, ,, q, ), ), ), ;, ++, r, ;, }, outBlock, []
[m, ., getEntry, (, r, ,, q, ), ), ), ;, ++, r, ;, }, outBlock, [, k, ], =]
[m, ., getEntry, (, r, ,, q, ), ), ), ;, ++, r, ;, }, outBlock, [, k, ], =]
[m, ., getEntry, (, r, ,, q, ), ), ), ;, ++, r, ;, }, outBlock, [, k, ], =]
[getEntry, (, r, ,, q, ), ), ), ;, ++, r, ;, }, outBlock, [, k, ], =, outBlock, []
[), ), ), ;, ++, r, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (]
[;, ++, r, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;]
[++, r, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++]
[[, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }]
[k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++]
[k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }, return]
[out, ;, }, }, public, BlockFieldMatrix, <, T, >, multiply, (, BlockFieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {]
[}, }, public, BlockFieldMatrix, <, T, >, multiply, (, BlockFieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, checkMultiplicationCompatible, (]
[<, T, >, m, ), throws, DimensionMismatchException, {, checkMultiplicationCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[DimensionMismatchException, {, checkMultiplicationCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[m, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, m, ., columns, ), ;, final, T, zero, =]
[BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, m, ., columns, ), ;, final, T, zero, =]
[m, ., columns, ), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, int, blockIndex, =]
[zero, =, getField, (, ), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =]
[getField, (, ), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[getField, (, ), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++]
[(, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[(, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *]
[out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;]
[FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;]
[+, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++]
[(, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[(, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (]
[;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, jWidth2, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, jWidth2, =]
[jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +]
[=, out, ., blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =]
[=, out, ., blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =]
[., blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +]
[final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =]
[final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =]
[jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +]
[jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, T, [, ], outBlock, =]
[jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, T, [, ], outBlock, =]
[jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, T, [, ], outBlock, =]
[jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, T, [, ], outBlock, =, out, ., blocks, []
[jWidth, ;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =]
[final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;]
[final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;]
[[, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <]
[outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;]
[=, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++]
[;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth, =]
[(, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (]
[;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =]
[;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =]
[kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, []
[kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, []
[kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, []
[{, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, [, iBlock, *]
[int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +]
[T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, T, [, ], mBlock, =]
[T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, T, [, ], mBlock, =]
[T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, T, [, ], mBlock, =]
[=, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, T, [, ], mBlock, =, m, ., blocks, []
[=, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, T, [, ], mBlock, =, m, ., blocks, []
[=, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, T, [, ], mBlock, =, m, ., blocks, []
[[, iBlock, *, blockColumns, +, kBlock, ], ;, final, T, [, ], mBlock, =, m, ., blocks, [, kBlock, *]
[[, iBlock, *, blockColumns, +, kBlock, ], ;, final, T, [, ], mBlock, =, m, ., blocks, [, kBlock, *]
[+, kBlock, ], ;, final, T, [, ], mBlock, =, m, ., blocks, [, kBlock, *, m, ., blockColumns, +]
[[, ], mBlock, =, m, ., blocks, [, kBlock, *, m, ., blockColumns, +, jBlock, ], ;, int, k, =]
[[, kBlock, *, m, ., blockColumns, +, jBlock, ], ;, int, k, =, 0, ;, for, (, int, p, =]
[*, m, ., blockColumns, +, jBlock, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[*, m, ., blockColumns, +, jBlock, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[., blockColumns, +, jBlock, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[+, jBlock, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[jBlock, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =, (]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =, (]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =, (, p, -]
[pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *]
[++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =]
[++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =]
[), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +]
[p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =]
[pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =, 0, ;]
[pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =, 0, ;]
[*, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =, 0, ;, nStart, <]
[;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =, 0, ;, nStart, <, jWidth, ;]
[final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =, 0, ;, nStart, <, jWidth, ;, ++]
[kWidth, ;, for, (, int, nStart, =, 0, ;, nStart, <, jWidth, ;, ++, nStart, ), {, T, sum, =]
[nStart, =, 0, ;, nStart, <, jWidth, ;, ++, nStart, ), {, T, sum, =, zero, ;, int, l, =]
[<, jWidth, ;, ++, nStart, ), {, T, sum, =, zero, ;, int, l, =, lStart, ;, int, n, =]
[nStart, ), {, T, sum, =, zero, ;, int, l, =, lStart, ;, int, n, =, nStart, ;, while, (]
[nStart, ), {, T, sum, =, zero, ;, int, l, =, lStart, ;, int, n, =, nStart, ;, while, (]
[{, T, sum, =, zero, ;, int, l, =, lStart, ;, int, n, =, nStart, ;, while, (, l, <]
[{, T, sum, =, zero, ;, int, l, =, lStart, ;, int, n, =, nStart, ;, while, (, l, <]
[sum, =, zero, ;, int, l, =, lStart, ;, int, n, =, nStart, ;, while, (, l, <, lEnd, -]
[;, int, l, =, lStart, ;, int, n, =, nStart, ;, while, (, l, <, lEnd, -, 3, ), {]
[l, =, lStart, ;, int, n, =, nStart, ;, while, (, l, <, lEnd, -, 3, ), {, sum, =]
[l, =, lStart, ;, int, n, =, nStart, ;, while, (, l, <, lEnd, -, 3, ), {, sum, =]
[l, =, lStart, ;, int, n, =, nStart, ;, while, (, l, <, lEnd, -, 3, ), {, sum, =]
[l, =, lStart, ;, int, n, =, nStart, ;, while, (, l, <, lEnd, -, 3, ), {, sum, =]
[l, =, lStart, ;, int, n, =, nStart, ;, while, (, l, <, lEnd, -, 3, ), {, sum, =]
[int, n, =, nStart, ;, while, (, l, <, lEnd, -, 3, ), {, sum, =, sum, ., add, (]
[int, n, =, nStart, ;, while, (, l, <, lEnd, -, 3, ), {, sum, =, sum, ., add, (]
[int, n, =, nStart, ;, while, (, l, <, lEnd, -, 3, ), {, sum, =, sum, ., add, (]
[=, nStart, ;, while, (, l, <, lEnd, -, 3, ), {, sum, =, sum, ., add, (, tBlock, []
[l, <, lEnd, -, 3, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (]
[l, <, lEnd, -, 3, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (]
[lEnd, -, 3, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, mBlock, []
[sum, ., add, (, tBlock, [, l, ], ., multiply, (, mBlock, [, n, ], ), ), ., add, (]
[sum, ., add, (, tBlock, [, l, ], ., multiply, (, mBlock, [, n, ], ), ), ., add, (]
[sum, ., add, (, tBlock, [, l, ], ., multiply, (, mBlock, [, n, ], ), ), ., add, (]
[add, (, tBlock, [, l, ], ., multiply, (, mBlock, [, n, ], ), ), ., add, (, tBlock, []
[add, (, tBlock, [, l, ], ., multiply, (, mBlock, [, n, ], ), ), ., add, (, tBlock, []
[tBlock, [, l, ], ., multiply, (, mBlock, [, n, ], ), ), ., add, (, tBlock, [, l, +]
[multiply, (, mBlock, [, n, ], ), ), ., add, (, tBlock, [, l, +, 1, ], ., multiply, (]
[multiply, (, mBlock, [, n, ], ), ), ., add, (, tBlock, [, l, +, 1, ], ., multiply, (]
[mBlock, [, n, ], ), ), ., add, (, tBlock, [, l, +, 1, ], ., multiply, (, mBlock, []
[mBlock, [, n, ], ), ), ., add, (, tBlock, [, l, +, 1, ], ., multiply, (, mBlock, []
[n, ], ), ), ., add, (, tBlock, [, l, +, 1, ], ., multiply, (, mBlock, [, n, +]
[tBlock, [, l, +, 1, ], ., multiply, (, mBlock, [, n, +, jWidth, ], ), ), ., add, (]
[tBlock, [, l, +, 1, ], ., multiply, (, mBlock, [, n, +, jWidth, ], ), ), ., add, (]
[tBlock, [, l, +, 1, ], ., multiply, (, mBlock, [, n, +, jWidth, ], ), ), ., add, (]
[l, +, 1, ], ., multiply, (, mBlock, [, n, +, jWidth, ], ), ), ., add, (, tBlock, []
[l, +, 1, ], ., multiply, (, mBlock, [, n, +, jWidth, ], ), ), ., add, (, tBlock, []
[1, ], ., multiply, (, mBlock, [, n, +, jWidth, ], ), ), ., add, (, tBlock, [, l, +]
[mBlock, [, n, +, jWidth, ], ), ), ., add, (, tBlock, [, l, +, 2, ], ., multiply, (]
[mBlock, [, n, +, jWidth, ], ), ), ., add, (, tBlock, [, l, +, 2, ], ., multiply, (]
[n, +, jWidth, ], ), ), ., add, (, tBlock, [, l, +, 2, ], ., multiply, (, mBlock, []
[n, +, jWidth, ], ), ), ., add, (, tBlock, [, l, +, 2, ], ., multiply, (, mBlock, []
[jWidth, ], ), ), ., add, (, tBlock, [, l, +, 2, ], ., multiply, (, mBlock, [, n, +]
[tBlock, [, l, +, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2, ], ), ), ., add, (]
[tBlock, [, l, +, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2, ], ), ), ., add, (]
[tBlock, [, l, +, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2, ], ), ), ., add, (]
[l, +, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2, ], ), ), ., add, (, tBlock, []
[l, +, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2, ], ), ), ., add, (, tBlock, []
[2, ], ., multiply, (, mBlock, [, n, +, jWidth2, ], ), ), ., add, (, tBlock, [, l, +]
[mBlock, [, n, +, jWidth2, ], ), ), ., add, (, tBlock, [, l, +, 3, ], ., multiply, (]
[mBlock, [, n, +, jWidth2, ], ), ), ., add, (, tBlock, [, l, +, 3, ], ., multiply, (]
[n, +, jWidth2, ], ), ), ., add, (, tBlock, [, l, +, 3, ], ., multiply, (, mBlock, []
[n, +, jWidth2, ], ), ), ., add, (, tBlock, [, l, +, 3, ], ., multiply, (, mBlock, []
[jWidth2, ], ), ), ., add, (, tBlock, [, l, +, 3, ], ., multiply, (, mBlock, [, n, +]
[add, (, tBlock, [, l, +, 3, ], ., multiply, (, mBlock, [, n, +, jWidth3, ], ), ), ;]
[tBlock, [, l, +, 3, ], ., multiply, (, mBlock, [, n, +, jWidth3, ], ), ), ;, l, +=]
[l, +, 3, ], ., multiply, (, mBlock, [, n, +, jWidth3, ], ), ), ;, l, +=, 4, ;]
[3, ], ., multiply, (, mBlock, [, n, +, jWidth3, ], ), ), ;, l, +=, 4, ;, n, +=]
[mBlock, [, n, +, jWidth3, ], ), ), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (]
[mBlock, [, n, +, jWidth3, ], ), ), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (]
[n, +, jWidth3, ], ), ), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (, l, <]
[], ), ), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {]
[), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =]
[), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =]
[4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =, sum, ., add, (]
[4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =, sum, ., add, (]
[4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =, sum, ., add, (]
[n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =, sum, ., add, (, tBlock, []
[n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =, sum, ., add, (, tBlock, []
[(, l, <, lEnd, ), {, sum, =, sum, ., add, (, tBlock, [, l, ++, ], ., multiply, (]
[(, l, <, lEnd, ), {, sum, =, sum, ., add, (, tBlock, [, l, ++, ], ., multiply, (]
[<, lEnd, ), {, sum, =, sum, ., add, (, tBlock, [, l, ++, ], ., multiply, (, mBlock, []
[=, sum, ., add, (, tBlock, [, l, ++, ], ., multiply, (, mBlock, [, n, ], ), ), ;]
[., add, (, tBlock, [, l, ++, ], ., multiply, (, mBlock, [, n, ], ), ), ;, n, +=]
[tBlock, [, l, ++, ], ., multiply, (, mBlock, [, n, ], ), ), ;, n, +=, jWidth, ;, }]
[tBlock, [, l, ++, ], ., multiply, (, mBlock, [, n, ], ), ), ;, n, +=, jWidth, ;, }]
[l, ++, ], ., multiply, (, mBlock, [, n, ], ), ), ;, n, +=, jWidth, ;, }, outBlock, []
[., multiply, (, mBlock, [, n, ], ), ), ;, n, +=, jWidth, ;, }, outBlock, [, k, ], =]
[., multiply, (, mBlock, [, n, ], ), ), ;, n, +=, jWidth, ;, }, outBlock, [, k, ], =]
[., multiply, (, mBlock, [, n, ], ), ), ;, n, +=, jWidth, ;, }, outBlock, [, k, ], =]
[(, mBlock, [, n, ], ), ), ;, n, +=, jWidth, ;, }, outBlock, [, k, ], =, outBlock, []
[), ), ;, n, +=, jWidth, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (]
[n, +=, jWidth, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;]
[+=, jWidth, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++]
[[, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }]
[k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++]
[k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }, return]
[@, Override, public, T, [, ], [, ], getData, (, ), {, final, T, [, ], [, ], data, =]
[@, Override, public, T, [, ], [, ], getData, (, ), {, final, T, [, ], [, ], data, =]
[[, ], [, ], getData, (, ), {, final, T, [, ], [, ], data, =, MathArrays, ., buildArray, (]
[getData, (, ), {, final, T, [, ], [, ], data, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[final, T, [, ], [, ], data, =, MathArrays, ., buildArray, (, getField, (, ), ,, getRowDimension, (, ), ,]
[., buildArray, (, getField, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, final, int, lastColumns, =]
[., buildArray, (, getField, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, final, int, lastColumns, =]
[(, getField, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, final, int, lastColumns, =, columns, -]
[(, getField, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, final, int, lastColumns, =, columns, -]
[getField, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, final, int, lastColumns, =, columns, -, (]
[getField, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, final, int, lastColumns, =, columns, -, (]
[), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, final, int, lastColumns, =, columns, -, (, blockColumns, -]
[(, ), ,, getColumnDimension, (, ), ), ;, final, int, lastColumns, =, columns, -, (, blockColumns, -, 1, ), *]
[;, final, int, lastColumns, =, columns, -, (, blockColumns, -, 1, ), *, BLOCK_SIZE, ;, for, (, int, iBlock, =]
[int, lastColumns, =, columns, -, (, blockColumns, -, 1, ), *, BLOCK_SIZE, ;, for, (, int, iBlock, =, 0, ;]
[int, lastColumns, =, columns, -, (, blockColumns, -, 1, ), *, BLOCK_SIZE, ;, for, (, int, iBlock, =, 0, ;]
[=, columns, -, (, blockColumns, -, 1, ), *, BLOCK_SIZE, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[-, (, blockColumns, -, 1, ), *, BLOCK_SIZE, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[(, blockColumns, -, 1, ), *, BLOCK_SIZE, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, int, regularPos, =]
[=, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, int, regularPos, =, 0, ;, int, lastPos, =]
[BLOCK_SIZE, ,, rows, ), ;, int, regularPos, =, 0, ;, int, lastPos, =, 0, ;, for, (, int, p, =]
[rows, ), ;, int, regularPos, =, 0, ;, int, lastPos, =, 0, ;, for, (, int, p, =, pStart, ;]
[rows, ), ;, int, regularPos, =, 0, ;, int, lastPos, =, 0, ;, for, (, int, p, =, pStart, ;]
[;, int, regularPos, =, 0, ;, int, lastPos, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[regularPos, =, 0, ;, int, lastPos, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[=, 0, ;, int, lastPos, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[(, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, T, [, ], dataP, =]
[(, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, T, [, ], dataP, =]
[p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, T, [, ], dataP, =, data, []
[pEnd, ;, ++, p, ), {, final, T, [, ], dataP, =, data, [, p, ], ;, int, blockIndex, =]
[pEnd, ;, ++, p, ), {, final, T, [, ], dataP, =, data, [, p, ], ;, int, blockIndex, =]
[++, p, ), {, final, T, [, ], dataP, =, data, [, p, ], ;, int, blockIndex, =, iBlock, *]
[T, [, ], dataP, =, data, [, p, ], ;, int, blockIndex, =, iBlock, *, blockColumns, ;, int, dataPos, =]
[p, ], ;, int, blockIndex, =, iBlock, *, blockColumns, ;, int, dataPos, =, 0, ;, for, (, int, jBlock, =]
[;, int, blockIndex, =, iBlock, *, blockColumns, ;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0, ;]
[;, int, blockIndex, =, iBlock, *, blockColumns, ;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0, ;]
[blockIndex, =, iBlock, *, blockColumns, ;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[blockIndex, =, iBlock, *, blockColumns, ;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[iBlock, *, blockColumns, ;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, -]
[blockColumns, ;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1, ;]
[;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1, ;, ++]
[=, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1, ;, ++, jBlock, ), {]
[=, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1, ;, ++, jBlock, ), {]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1, ;, ++, jBlock, ), {, System, ., arraycopy, (]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1, ;, ++, jBlock, ), {, System, ., arraycopy, (]
[jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1, ;, ++, jBlock, ), {, System, ., arraycopy, (, blocks, []
[jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1, ;, ++, jBlock, ), {, System, ., arraycopy, (, blocks, []
[jBlock, <, blockColumns, -, 1, ;, ++, jBlock, ), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,]
[blockColumns, -, 1, ;, ++, jBlock, ), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,]
[1, ;, ++, jBlock, ), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,]
[++, jBlock, ), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos, ,]
[{, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;]
[., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=]
[blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }]
[blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }]
[], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (]
[], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (]
[regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks, []
[,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks, [, blockIndex, ], ,]
[,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,]
[), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,, dataP, ,]
[dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,, dataP, ,, dataPos, ,]
[;, }, System, ., arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,, dataP, ,, dataPos, ,, lastColumns, ), ;]
[System, ., arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,, dataP, ,, dataPos, ,, lastColumns, ), ;, regularPos, +=]
[arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,, dataP, ,, dataPos, ,, lastColumns, ), ;, regularPos, +=, BLOCK_SIZE, ;]
[blocks, [, blockIndex, ], ,, lastPos, ,, dataP, ,, dataPos, ,, lastColumns, ), ;, regularPos, +=, BLOCK_SIZE, ;, lastPos, +=]
[lastPos, ,, dataP, ,, dataPos, ,, lastColumns, ), ;, regularPos, +=, BLOCK_SIZE, ;, lastPos, +=, lastColumns, ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,]
[NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[endRow, ,, startColumn, ,, endColumn, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[endColumn, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[endColumn, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[endColumn, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, endRow, -]
[BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, endRow, -, startRow, +]
[T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, endRow, -, startRow, +, 1, ,]
[T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, endRow, -, startRow, +, 1, ,]
[T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, endRow, -, startRow, +, 1, ,]
[out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, endRow, -, startRow, +, 1, ,, endColumn, -]
[new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +]
[(, ), ,, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;, final, int, blockStartRow, =]
[(, ), ,, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;, final, int, blockStartRow, =]
[,, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;, final, int, blockStartRow, =, startRow, /]
[,, endColumn, -, startColumn, +, 1, ), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =]
[,, endColumn, -, startColumn, +, 1, ), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =]
[-, startColumn, +, 1, ), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =, startRow, %]
[final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int, blockStartColumn, =]
[final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int, blockStartColumn, =]
[blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int, blockStartColumn, =, startColumn, /]
[final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int, blockStartColumn, =, startColumn, /, BLOCK_SIZE, ;, final, int, columnsShift, =]
[final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int, blockStartColumn, =, startColumn, /, BLOCK_SIZE, ;, final, int, columnsShift, =]
[rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int, blockStartColumn, =, startColumn, /, BLOCK_SIZE, ;, final, int, columnsShift, =, startColumn, %]
[;, final, int, blockStartColumn, =, startColumn, /, BLOCK_SIZE, ;, final, int, columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int, pBlock, =]
[BLOCK_SIZE, ;, final, int, columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =]
[final, int, columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =, 0, ;]
[final, int, columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =, 0, ;]
[columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[BLOCK_SIZE, ;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;]
[;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++]
[(, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[(, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, out, ., blockHeight, (]
[blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, out, ., blockHeight, (, iBlock, ), ;, int, qBlock, =]
[int, iHeight, =, out, ., blockHeight, (, iBlock, ), ;, int, qBlock, =, blockStartColumn, ;, for, (, int, jBlock, =]
[=, out, ., blockHeight, (, iBlock, ), ;, int, qBlock, =, blockStartColumn, ;, for, (, int, jBlock, =, 0, ;]
[=, out, ., blockHeight, (, iBlock, ), ;, int, qBlock, =, blockStartColumn, ;, for, (, int, jBlock, =, 0, ;]
[., blockHeight, (, iBlock, ), ;, int, qBlock, =, blockStartColumn, ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[., blockHeight, (, iBlock, ), ;, int, qBlock, =, blockStartColumn, ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[), ;, int, qBlock, =, blockStartColumn, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;]
[;, int, qBlock, =, blockStartColumn, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++]
[(, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[(, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (]
[;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, outIndex, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, outIndex, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, outIndex, =]
[jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, outIndex, =, iBlock, *]
[jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, outIndex, =, iBlock, *]
[int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, outIndex, =, iBlock, *, out, ., blockColumns, +]
[), ;, final, int, outIndex, =, iBlock, *, out, ., blockColumns, +, jBlock, ;, final, T, [, ], outBlock, =]
[), ;, final, int, outIndex, =, iBlock, *, out, ., blockColumns, +, jBlock, ;, final, T, [, ], outBlock, =]
[), ;, final, int, outIndex, =, iBlock, *, out, ., blockColumns, +, jBlock, ;, final, T, [, ], outBlock, =]
[outIndex, =, iBlock, *, out, ., blockColumns, +, jBlock, ;, final, T, [, ], outBlock, =, out, ., blocks, []
[+, jBlock, ;, final, T, [, ], outBlock, =, out, ., blocks, [, outIndex, ], ;, final, int, index, =]
[+, jBlock, ;, final, T, [, ], outBlock, =, out, ., blocks, [, outIndex, ], ;, final, int, index, =]
[+, jBlock, ;, final, T, [, ], outBlock, =, out, ., blocks, [, outIndex, ], ;, final, int, index, =]
[;, final, T, [, ], outBlock, =, out, ., blocks, [, outIndex, ], ;, final, int, index, =, pBlock, *]
[T, [, ], outBlock, =, out, ., blocks, [, outIndex, ], ;, final, int, index, =, pBlock, *, blockColumns, +]
[., blocks, [, outIndex, ], ;, final, int, index, =, pBlock, *, blockColumns, +, qBlock, ;, final, int, width, =]
[[, outIndex, ], ;, final, int, index, =, pBlock, *, blockColumns, +, qBlock, ;, final, int, width, =, blockWidth, (]
[=, pBlock, *, blockColumns, +, qBlock, ;, final, int, width, =, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =]
[=, pBlock, *, blockColumns, +, qBlock, ;, final, int, width, =, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =]
[=, pBlock, *, blockColumns, +, qBlock, ;, final, int, width, =, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =]
[*, blockColumns, +, qBlock, ;, final, int, width, =, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =, iHeight, +]
[+, qBlock, ;, final, int, width, =, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =, iHeight, +, rowsShift, -]
[=, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =, iHeight, +, rowsShift, -, BLOCK_SIZE, ;, final, int, widthExcess, =]
[=, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =, iHeight, +, rowsShift, -, BLOCK_SIZE, ;, final, int, widthExcess, =]
[=, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =, iHeight, +, rowsShift, -, BLOCK_SIZE, ;, final, int, widthExcess, =]
[(, qBlock, ), ;, final, int, heightExcess, =, iHeight, +, rowsShift, -, BLOCK_SIZE, ;, final, int, widthExcess, =, jWidth, +]
[), ;, final, int, heightExcess, =, iHeight, +, rowsShift, -, BLOCK_SIZE, ;, final, int, widthExcess, =, jWidth, +, columnsShift, -]
[heightExcess, =, iHeight, +, rowsShift, -, BLOCK_SIZE, ;, final, int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE, ;, if, (]
[heightExcess, =, iHeight, +, rowsShift, -, BLOCK_SIZE, ;, final, int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE, ;, if, (]
[iHeight, +, rowsShift, -, BLOCK_SIZE, ;, final, int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE, ;, if, (, heightExcess, >]
[;, final, int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE, ;, if, (, heightExcess, >, 0, ), {, if, (]
[;, final, int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE, ;, if, (, heightExcess, >, 0, ), {, if, (]
[int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE, ;, if, (, heightExcess, >, 0, ), {, if, (, widthExcess, >]
[BLOCK_SIZE, ;, if, (, heightExcess, >, 0, ), {, if, (, widthExcess, >, 0, ), {, final, int, width2, =]
[if, (, heightExcess, >, 0, ), {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (]
[if, (, heightExcess, >, 0, ), {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (]
[heightExcess, >, 0, ), {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +]
[), {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;]
[if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (]
[if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (]
[widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, []
[), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,]
[final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,]
[width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,]
[blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,]
[qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,]
[1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,]
[;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,]
[(, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,]
[[, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,]
[,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;]
[,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (]
[,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (]
[,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +]
[BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,]
[outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,]
[jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,]
[0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,]
[0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,]
[;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,]
[(, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,]
[[, index, +, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,]
[+, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,]
[+, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,]
[], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -]
[,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;]
[,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (]
[,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (]
[,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, []
[,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, []
[,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +]
[outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,]
[jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,]
[0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,]
[jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,]
[widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,]
[;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,]
[(, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,]
[[, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,]
[[, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,]
[+, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -]
[], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,]
[,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;]
[,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (]
[,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (]
[,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +]
[,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +]
[jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ], ,]
[iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ], ,, width2, ,]
[heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ], ,, width2, ,, 0, ,]
[0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess, ,]
[;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,]
[(, blocks, [, index, +, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,]
[[, index, +, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,]
[+, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,]
[+, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,]
[+, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -]
[], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,]
[], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,]
[width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth, -]
[0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else, {]
[widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (]
[widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (]
[outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, []
[,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,]
[-, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,]
[,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,]
[-, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,]
[), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,]
[), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,]
[}, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +]
[{, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,]
[(, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,]
[[, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,]
[], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,]
[,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;]
[,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (]
[,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (]
[,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +]
[columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,]
[outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,]
[jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,]
[0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,]
[0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,]
[0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,]
[;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +]
[(, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,]
[[, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,]
[+, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,]
[+, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,]
[], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -]
[width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,]
[+, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, }, }, else, {, if, (]
[+, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, }, }, else, {, if, (]
[,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, }, }, else, {, if, (, widthExcess, >]
[heightExcess, ,, 0, ), ;, }, }, else, {, if, (, widthExcess, >, 0, ), {, final, int, width2, =]
[0, ), ;, }, }, else, {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (]
[0, ), ;, }, }, else, {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (]
[;, }, }, else, {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +]
[else, {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;]
[if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (]
[if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (]
[widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, []
[), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,]
[final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,]
[width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,]
[width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,]
[blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +]
[qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,]
[1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,]
[;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,]
[(, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,]
[[, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,]
[], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,]
[,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;]
[,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (]
[,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (]
[+, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, []
[+, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +]
[BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,]
[outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,]
[jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,]
[jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,]
[0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, iHeight, +]
[0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,]
[;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,]
[(, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,]
[[, index, +, 1, ], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,]
[+, 1, ], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,]
[], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,]
[], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,]
[width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -]
[rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {]
[0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (]
[0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (]
[widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, []
[,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,]
[,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,]
[,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,]
[,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,]
[-, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +]
[), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,]
[}, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,]
[}, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,]
[{, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, jWidth, +]
[(, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,]
[[, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,]
[], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,]
[width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,]
[+, rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }]
[rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }, ++]
[,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }, ++, qBlock, ;, }]
[jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }, ++, qBlock, ;, }, ++]
[outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }, ++, qBlock, ;, }, ++, pBlock, ;, }, return]
[], dstBlock, ,, final, int, dstWidth, ,, final, int, dstStartRow, ,, final, int, dstStartColumn, ), {, final, int, length, =]
[], dstBlock, ,, final, int, dstWidth, ,, final, int, dstStartRow, ,, final, int, dstStartColumn, ), {, final, int, length, =]
[,, final, int, dstWidth, ,, final, int, dstStartRow, ,, final, int, dstStartColumn, ), {, final, int, length, =, srcEndColumn, -]
[final, int, dstStartRow, ,, final, int, dstStartColumn, ), {, final, int, length, =, srcEndColumn, -, srcStartColumn, ;, int, srcPos, =]
[final, int, dstStartRow, ,, final, int, dstStartColumn, ), {, final, int, length, =, srcEndColumn, -, srcStartColumn, ;, int, srcPos, =]
[final, int, dstStartRow, ,, final, int, dstStartColumn, ), {, final, int, length, =, srcEndColumn, -, srcStartColumn, ;, int, srcPos, =]
[dstStartRow, ,, final, int, dstStartColumn, ), {, final, int, length, =, srcEndColumn, -, srcStartColumn, ;, int, srcPos, =, srcStartRow, *]
[final, int, dstStartColumn, ), {, final, int, length, =, srcEndColumn, -, srcStartColumn, ;, int, srcPos, =, srcStartRow, *, srcWidth, +]
[final, int, length, =, srcEndColumn, -, srcStartColumn, ;, int, srcPos, =, srcStartRow, *, srcWidth, +, srcStartColumn, ;, int, dstPos, =]
[final, int, length, =, srcEndColumn, -, srcStartColumn, ;, int, srcPos, =, srcStartRow, *, srcWidth, +, srcStartColumn, ;, int, dstPos, =]
[final, int, length, =, srcEndColumn, -, srcStartColumn, ;, int, srcPos, =, srcStartRow, *, srcWidth, +, srcStartColumn, ;, int, dstPos, =]
[length, =, srcEndColumn, -, srcStartColumn, ;, int, srcPos, =, srcStartRow, *, srcWidth, +, srcStartColumn, ;, int, dstPos, =, dstStartRow, *]
[srcEndColumn, -, srcStartColumn, ;, int, srcPos, =, srcStartRow, *, srcWidth, +, srcStartColumn, ;, int, dstPos, =, dstStartRow, *, dstWidth, +]
[srcStartRow, *, srcWidth, +, srcStartColumn, ;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =]
[srcWidth, +, srcStartColumn, ;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;]
[srcWidth, +, srcStartColumn, ;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;]
[srcStartColumn, ;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <]
[int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;]
[dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;, ++]
[*, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {]
[*, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {]
[;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {, System, ., arraycopy, (]
[(, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {, System, ., arraycopy, (, srcBlock, ,]
[srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {, System, ., arraycopy, (, srcBlock, ,, srcPos, ,]
[srcStartRow, ;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {, System, ., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,]
[srcRow, <, srcEndRow, ;, ++, srcRow, ), {, System, ., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos, ,]
[;, ++, srcRow, ), {, System, ., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos, ,, length, ), ;]
[srcRow, ), {, System, ., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos, ,, length, ), ;, srcPos, +=]
[{, System, ., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos, ,, length, ), ;, srcPos, +=, srcWidth, ;]
[., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos, ,, length, ), ;, srcPos, +=, srcWidth, ;, dstPos, +=]
[], subMatrix, ,, final, int, row, ,, final, int, column, ), throws, DimensionMismatchException, ,, OutOfRangeException, ,, NoDataException, ,, NullArgumentException, {]
[], subMatrix, ,, final, int, row, ,, final, int, column, ), throws, DimensionMismatchException, ,, OutOfRangeException, ,, NoDataException, ,, NullArgumentException, {]
[int, row, ,, final, int, column, ), throws, DimensionMismatchException, ,, OutOfRangeException, ,, NoDataException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[throws, DimensionMismatchException, ,, OutOfRangeException, ,, NoDataException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, refLength, =]
[throws, DimensionMismatchException, ,, OutOfRangeException, ,, NoDataException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, refLength, =]
[throws, DimensionMismatchException, ,, OutOfRangeException, ,, NoDataException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, refLength, =]
[,, OutOfRangeException, ,, NoDataException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, refLength, =, subMatrix, []
[MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, refLength, =, subMatrix, [, 0, ], ., length, ;, if, (]
[MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, refLength, =, subMatrix, [, 0, ], ., length, ;, if, (]
[checkNotNull, (, subMatrix, ), ;, final, int, refLength, =, subMatrix, [, 0, ], ., length, ;, if, (, refLength, ==]
[;, final, int, refLength, =, subMatrix, [, 0, ], ., length, ;, if, (, refLength, ==, 0, ), {, throw]
[refLength, =, subMatrix, [, 0, ], ., length, ;, if, (, refLength, ==, 0, ), {, throw, new, NoDataException, (]
[refLength, =, subMatrix, [, 0, ], ., length, ;, if, (, refLength, ==, 0, ), {, throw, new, NoDataException, (]
[(, refLength, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =]
[(, refLength, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =]
[(, refLength, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =, row, +]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =, row, +]
[throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =, row, +, subMatrix, ., length, -]
[AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =, row, +, subMatrix, ., length, -, 1, ;, final, int, endColumn, =]
[AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =, row, +, subMatrix, ., length, -, 1, ;, final, int, endColumn, =]
[AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =, row, +, subMatrix, ., length, -, 1, ;, final, int, endColumn, =]
[;, }, final, int, endRow, =, row, +, subMatrix, ., length, -, 1, ;, final, int, endColumn, =, column, +]
[final, int, endRow, =, row, +, subMatrix, ., length, -, 1, ;, final, int, endColumn, =, column, +, refLength, -]
[endRow, =, row, +, subMatrix, ., length, -, 1, ;, final, int, endColumn, =, column, +, refLength, -, 1, ;]
[row, +, subMatrix, ., length, -, 1, ;, final, int, endColumn, =, column, +, refLength, -, 1, ;, checkSubMatrixIndex, (]
[subMatrix, ., length, -, 1, ;, final, int, endColumn, =, column, +, refLength, -, 1, ;, checkSubMatrixIndex, (, row, ,]
[length, -, 1, ;, final, int, endColumn, =, column, +, refLength, -, 1, ;, checkSubMatrixIndex, (, row, ,, endRow, ,]
[1, ;, final, int, endColumn, =, column, +, refLength, -, 1, ;, checkSubMatrixIndex, (, row, ,, endRow, ,, column, ,]
[;, checkSubMatrixIndex, (, row, ,, endRow, ,, column, ,, endColumn, ), ;, for, (, final, T, [, ], subRow, :]
[endRow, ,, column, ,, endColumn, ), ;, for, (, final, T, [, ], subRow, :, subMatrix, ), {, if, (]
[endRow, ,, column, ,, endColumn, ), ;, for, (, final, T, [, ], subRow, :, subMatrix, ), {, if, (]
[endRow, ,, column, ,, endColumn, ), ;, for, (, final, T, [, ], subRow, :, subMatrix, ), {, if, (]
[endColumn, ), ;, for, (, final, T, [, ], subRow, :, subMatrix, ), {, if, (, subRow, ., length, !=]
[(, final, T, [, ], subRow, :, subMatrix, ), {, if, (, subRow, ., length, !=, refLength, ), {, throw]
[[, ], subRow, :, subMatrix, ), {, if, (, subRow, ., length, !=, refLength, ), {, throw, new, DimensionMismatchException, (]
[subRow, :, subMatrix, ), {, if, (, subRow, ., length, !=, refLength, ), {, throw, new, DimensionMismatchException, (, refLength, ,]
[subRow, :, subMatrix, ), {, if, (, subRow, ., length, !=, refLength, ), {, throw, new, DimensionMismatchException, (, refLength, ,]
[refLength, ), {, throw, new, DimensionMismatchException, (, refLength, ,, subRow, ., length, ), ;, }, }, final, int, blockStartRow, =]
[refLength, ), {, throw, new, DimensionMismatchException, (, refLength, ,, subRow, ., length, ), ;, }, }, final, int, blockStartRow, =]
[{, throw, new, DimensionMismatchException, (, refLength, ,, subRow, ., length, ), ;, }, }, final, int, blockStartRow, =, row, /]
[,, subRow, ., length, ), ;, }, }, final, int, blockStartRow, =, row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =]
[,, subRow, ., length, ), ;, }, }, final, int, blockStartRow, =, row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =]
[subRow, ., length, ), ;, }, }, final, int, blockStartRow, =, row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =, (]
[subRow, ., length, ), ;, }, }, final, int, blockStartRow, =, row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =, (]
[length, ), ;, }, }, final, int, blockStartRow, =, row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =, (, endRow, +]
[}, }, final, int, blockStartRow, =, row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =, (, endRow, +, BLOCK_SIZE, ), /]
[row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =, (, endRow, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =]
[row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =, (, endRow, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =]
[BLOCK_SIZE, ;, final, int, blockEndRow, =, (, endRow, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /]
[(, endRow, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =]
[(, endRow, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =]
[endRow, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (]
[endRow, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (]
[BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (, endColumn, +]
[BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE, ), /]
[/, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, for, (, int, iBlock, =]
[;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, for, (, int, iBlock, =, blockStartRow, ;]
[;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, for, (, int, iBlock, =, blockStartRow, ;]
[int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, for, (, int, iBlock, =, blockStartRow, ;, iBlock, <]
[=, (, endColumn, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, for, (, int, iBlock, =, blockStartRow, ;, iBlock, <, blockEndRow, ;]
[(, endColumn, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, for, (, int, iBlock, =, blockStartRow, ;, iBlock, <, blockEndRow, ;, ++]
[;, for, (, int, iBlock, =, blockStartRow, ;, iBlock, <, blockEndRow, ;, ++, iBlock, ), {, final, int, iHeight, =]
[(, int, iBlock, =, blockStartRow, ;, iBlock, <, blockEndRow, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (]
[<, blockEndRow, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, int, firstRow, =]
[<, blockEndRow, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, int, firstRow, =]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, int, firstRow, =, iBlock, *]
[int, iHeight, =, blockHeight, (, iBlock, ), ;, final, int, firstRow, =, iBlock, *, BLOCK_SIZE, ;, final, int, iStart, =]
[int, iHeight, =, blockHeight, (, iBlock, ), ;, final, int, firstRow, =, iBlock, *, BLOCK_SIZE, ;, final, int, iStart, =]
[(, iBlock, ), ;, final, int, firstRow, =, iBlock, *, BLOCK_SIZE, ;, final, int, iStart, =, FastMath, ., max, (]
[), ;, final, int, firstRow, =, iBlock, *, BLOCK_SIZE, ;, final, int, iStart, =, FastMath, ., max, (, row, ,]
[*, BLOCK_SIZE, ;, final, int, iStart, =, FastMath, ., max, (, row, ,, firstRow, ), ;, final, int, iEnd, =]
[*, BLOCK_SIZE, ;, final, int, iStart, =, FastMath, ., max, (, row, ,, firstRow, ), ;, final, int, iEnd, =]
[int, iStart, =, FastMath, ., max, (, row, ,, firstRow, ), ;, final, int, iEnd, =, FastMath, ., min, (]
[int, iStart, =, FastMath, ., max, (, row, ,, firstRow, ), ;, final, int, iEnd, =, FastMath, ., min, (]
[=, FastMath, ., max, (, row, ,, firstRow, ), ;, final, int, iEnd, =, FastMath, ., min, (, endRow, +]
[., max, (, row, ,, firstRow, ), ;, final, int, iEnd, =, FastMath, ., min, (, endRow, +, 1, ,]
[., max, (, row, ,, firstRow, ), ;, final, int, iEnd, =, FastMath, ., min, (, endRow, +, 1, ,]
[(, row, ,, firstRow, ), ;, final, int, iEnd, =, FastMath, ., min, (, endRow, +, 1, ,, firstRow, +]
[iEnd, =, FastMath, ., min, (, endRow, +, 1, ,, firstRow, +, iHeight, ), ;, for, (, int, jBlock, =]
[FastMath, ., min, (, endRow, +, 1, ,, firstRow, +, iHeight, ), ;, for, (, int, jBlock, =, blockStartColumn, ;]
[FastMath, ., min, (, endRow, +, 1, ,, firstRow, +, iHeight, ), ;, for, (, int, jBlock, =, blockStartColumn, ;]
[min, (, endRow, +, 1, ,, firstRow, +, iHeight, ), ;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock, <]
[endRow, +, 1, ,, firstRow, +, iHeight, ), ;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock, <, blockEndColumn, ;]
[+, 1, ,, firstRow, +, iHeight, ), ;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock, <, blockEndColumn, ;, ++]
[;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock, <, blockEndColumn, ;, ++, jBlock, ), {, final, int, jWidth, =]
[(, int, jBlock, =, blockStartColumn, ;, jBlock, <, blockEndColumn, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[<, blockEndColumn, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, firstColumn, =]
[<, blockEndColumn, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, firstColumn, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, firstColumn, =, jBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, firstColumn, =, jBlock, *, BLOCK_SIZE, ;, final, int, jStart, =]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, firstColumn, =, jBlock, *, BLOCK_SIZE, ;, final, int, jStart, =]
[(, jBlock, ), ;, final, int, firstColumn, =, jBlock, *, BLOCK_SIZE, ;, final, int, jStart, =, FastMath, ., max, (]
[), ;, final, int, firstColumn, =, jBlock, *, BLOCK_SIZE, ;, final, int, jStart, =, FastMath, ., max, (, column, ,]
[*, BLOCK_SIZE, ;, final, int, jStart, =, FastMath, ., max, (, column, ,, firstColumn, ), ;, final, int, jEnd, =]
[*, BLOCK_SIZE, ;, final, int, jStart, =, FastMath, ., max, (, column, ,, firstColumn, ), ;, final, int, jEnd, =]
[int, jStart, =, FastMath, ., max, (, column, ,, firstColumn, ), ;, final, int, jEnd, =, FastMath, ., min, (]
[int, jStart, =, FastMath, ., max, (, column, ,, firstColumn, ), ;, final, int, jEnd, =, FastMath, ., min, (]
[=, FastMath, ., max, (, column, ,, firstColumn, ), ;, final, int, jEnd, =, FastMath, ., min, (, endColumn, +]
[., max, (, column, ,, firstColumn, ), ;, final, int, jEnd, =, FastMath, ., min, (, endColumn, +, 1, ,]
[., max, (, column, ,, firstColumn, ), ;, final, int, jEnd, =, FastMath, ., min, (, endColumn, +, 1, ,]
[(, column, ,, firstColumn, ), ;, final, int, jEnd, =, FastMath, ., min, (, endColumn, +, 1, ,, firstColumn, +]
[int, jEnd, =, FastMath, ., min, (, endColumn, +, 1, ,, firstColumn, +, jWidth, ), ;, final, int, jLength, =]
[int, jEnd, =, FastMath, ., min, (, endColumn, +, 1, ,, firstColumn, +, jWidth, ), ;, final, int, jLength, =]
[=, FastMath, ., min, (, endColumn, +, 1, ,, firstColumn, +, jWidth, ), ;, final, int, jLength, =, jEnd, -]
[,, firstColumn, +, jWidth, ), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =]
[,, firstColumn, +, jWidth, ), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =]
[+, jWidth, ), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =, blocks, []
[+, jWidth, ), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =, blocks, []
[+, jWidth, ), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =, blocks, []
[), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, iStart, ;]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, iStart, ;]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, iStart, ;, i, <]
[blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++]
[blockColumns, +, jBlock, ], ;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {]
[blockColumns, +, jBlock, ], ;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {]
[;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {, System, ., arraycopy, (]
[;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {, System, ., arraycopy, (]
[(, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {, System, ., arraycopy, (, subMatrix, []
[(, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {, System, ., arraycopy, (, subMatrix, []
[i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {, System, ., arraycopy, (, subMatrix, [, i, -]
[;, i, <, iEnd, ;, ++, i, ), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,]
[;, i, <, iEnd, ;, ++, i, ), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,]
[<, iEnd, ;, ++, i, ), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -]
[;, ++, i, ), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,]
[i, ), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,, block, ,]
[i, ), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,, block, ,]
[i, ), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,, block, ,]
[), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,, block, ,, (]
[), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,, block, ,, (]
[System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,, block, ,, (, i, -]
[(, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,, block, ,, (, i, -, firstRow, ), *]
[[, i, -, row, ], ,, jStart, -, column, ,, block, ,, (, i, -, firstRow, ), *, jWidth, +]
[i, -, row, ], ,, jStart, -, column, ,, block, ,, (, i, -, firstRow, ), *, jWidth, +, (]
[i, -, row, ], ,, jStart, -, column, ,, block, ,, (, i, -, firstRow, ), *, jWidth, +, (]
[row, ], ,, jStart, -, column, ,, block, ,, (, i, -, firstRow, ), *, jWidth, +, (, jStart, -]
[jStart, -, column, ,, block, ,, (, i, -, firstRow, ), *, jWidth, +, (, jStart, -, firstColumn, ), ,]
[}, }, }, }, @, Override, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {]
[}, }, @, Override, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (]
[(, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[row, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, 1, ,]
[=, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, 1, ,, columns, ), ;, final, int, iBlock, =]
[=, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, 1, ,, columns, ), ;, final, int, iBlock, =]
[BlockFieldMatrix, <, T, >, (, getField, (, ), ,, 1, ,, columns, ), ;, final, int, iBlock, =, row, /]
[(, ), ,, 1, ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =]
[(, ), ,, 1, ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =]
[,, 1, ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -]
[,, 1, ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -]
[,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outBlockIndex, =]
[BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outBlockIndex, =, 0, ;, int, outIndex, =]
[-, iBlock, *, BLOCK_SIZE, ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =]
[-, iBlock, *, BLOCK_SIZE, ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =]
[-, iBlock, *, BLOCK_SIZE, ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =]
[;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =, out, ., blocks, []
[=, 0, ;, T, [, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, jBlock, =]
[;, T, [, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;]
[;, T, [, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;]
[[, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[=, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[{, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =]
[], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =, outBlock, ., length, -]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (]
[*, blockColumns, +, jBlock, ], ;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >]
[jBlock, ], ;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >, available, ), {]
[jBlock, ], ;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >, available, ), {]
[int, available, =, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (]
[=, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, block, ,]
[=, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, block, ,]
[., length, -, outIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, block, ,, iRow, *]
[-, outIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,]
[;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,]
[(, jWidth, >, available, ), {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,]
[available, ), {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;]
[{, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =]
[{, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =]
[{, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =]
[(, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =, out, ., blocks, []
[block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =, out, ., blocks, [, ++]
[*, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;]
[*, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;]
[,, outIndex, ,, available, ), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (]
[,, available, ), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,]
[,, available, ), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,]
[), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,, iRow, *]
[outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,]
[out, ., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,]
[blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,]
[blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,]
[++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,, jWidth, -]
[;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, ), ;]
[., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, ), ;, outIndex, =]
[., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, ), ;, outIndex, =]
[(, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, ), ;, outIndex, =, jWidth, -]
[jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, ), ;, outIndex, =, jWidth, -, available, ;, }, else, {]
[jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, ), ;, outIndex, =, jWidth, -, available, ;, }, else, {]
[0, ,, jWidth, -, available, ), ;, outIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (]
[jWidth, -, available, ), ;, outIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, block, ,]
[jWidth, -, available, ), ;, outIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, block, ,]
[available, ), ;, outIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, block, ,, iRow, *]
[;, outIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,]
[=, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,]
[-, available, ;, }, else, {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,]
[}, else, {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, jWidth, ), ;]
[{, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, jWidth, ), ;, outIndex, +=]
[block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, return]
[setRowMatrix, (, final, int, row, ,, final, FieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {]
[final, int, row, ,, final, FieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {, setRowMatrix, (]
[row, ,, final, FieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {, setRowMatrix, (, row, ,]
[>, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {, setRowMatrix, (, row, ,, (, BlockFieldMatrix, <, T, >, )]
[setRowMatrix, (, row, ,, (, BlockFieldMatrix, <, T, >, ), matrix, ), ;, }, catch, (, ClassCastException, cce, ), {]
[setRowMatrix, (, row, ,, (, BlockFieldMatrix, <, T, >, ), matrix, ), ;, }, catch, (, ClassCastException, cce, ), {]
[(, BlockFieldMatrix, <, T, >, ), matrix, ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowMatrix, (]
[<, T, >, ), matrix, ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowMatrix, (, row, ,]
[public, void, setRowMatrix, (, final, int, row, ,, final, BlockFieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {]
[setRowMatrix, (, final, int, row, ,, final, BlockFieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkRowIndex, (]
[BlockFieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, int, nCols, =]
[throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (]
[MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (]
[MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (]
[row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=]
[final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||, (]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||, (]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||, (]
[;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=]
[., getRowDimension, (, ), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw]
[), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,]
[matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,]
[nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,]
[getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =]
[getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =]
[), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /]
[), ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =]
[), ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =]
[1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -]
[1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -]
[nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, mBlockIndex, =]
[BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, mBlockIndex, =, 0, ;, int, mIndex, =]
[-, iBlock, *, BLOCK_SIZE, ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =]
[-, iBlock, *, BLOCK_SIZE, ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =]
[-, iBlock, *, BLOCK_SIZE, ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =]
[;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =, matrix, ., blocks, []
[=, 0, ;, T, [, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, jBlock, =]
[;, T, [, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;]
[;, T, [, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;]
[[, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[=, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[{, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =]
[], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =, mBlock, ., length, -]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (]
[*, blockColumns, +, jBlock, ], ;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (, jWidth, >]
[jBlock, ], ;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (, jWidth, >, available, ), {]
[jBlock, ], ;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (, jWidth, >, available, ), {]
[int, available, =, mBlock, ., length, -, mIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (]
[=, mBlock, ., length, -, mIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, mBlock, ,]
[., length, -, mIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,]
[-, mIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,]
[-, mIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,]
[;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *]
[(, jWidth, >, available, ), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,]
[available, ), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, available, ), ;]
[{, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock, =]
[{, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock, =]
[{, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock, =]
[(, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock, =, matrix, ., blocks, []
[mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock, =, matrix, ., blocks, [, ++]
[,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;]
[,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;]
[*, jWidth, ,, available, ), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (]
[,, available, ), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,]
[), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,]
[mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,]
[mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,]
[matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *]
[blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,]
[blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,]
[++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,, jWidth, -]
[;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,, jWidth, -, available, ), ;]
[., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,, jWidth, -, available, ), ;, mIndex, =]
[., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,, jWidth, -, available, ), ;, mIndex, =]
[(, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,, jWidth, -, available, ), ;, mIndex, =, jWidth, -]
[block, ,, iRow, *, jWidth, ,, jWidth, -, available, ), ;, mIndex, =, jWidth, -, available, ;, }, else, {]
[block, ,, iRow, *, jWidth, ,, jWidth, -, available, ), ;, mIndex, =, jWidth, -, available, ;, }, else, {]
[jWidth, ,, jWidth, -, available, ), ;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (]
[jWidth, -, available, ), ;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,]
[available, ), ;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,]
[;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,]
[;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,]
[=, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *]
[-, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,]
[}, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;]
[{, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;, mIndex, +=]
[;, }, }, }, @, Override, public, FieldMatrix, <, T, >, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {]
[}, }, @, Override, public, FieldMatrix, <, T, >, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (]
[(, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[column, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[=, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, 1, ), ;, final, int, jBlock, =]
[=, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, 1, ), ;, final, int, jBlock, =]
[BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,, 1, ), ;, final, int, jBlock, =, column, /]
[(, ), ,, rows, ,, 1, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =]
[(, ), ,, rows, ,, 1, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =]
[,, rows, ,, 1, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -]
[,, rows, ,, 1, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -]
[,, 1, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *]
[jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =]
[column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (]
[jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outBlockIndex, =]
[*, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outBlockIndex, =, 0, ;, int, outIndex, =]
[blockWidth, (, jBlock, ), ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =]
[blockWidth, (, jBlock, ), ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =]
[blockWidth, (, jBlock, ), ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =]
[;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =, out, ., blocks, []
[=, 0, ;, T, [, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, iBlock, =]
[;, T, [, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;]
[;, T, [, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;]
[[, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[=, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[{, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <]
[blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++]
[jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (]
[jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, outIndex, >=]
[;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, outIndex, >=]
[=, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, outIndex, >=, outBlock, ., length, ), {]
[;, i, <, iHeight, ;, ++, i, ), {, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =]
[;, i, <, iHeight, ;, ++, i, ), {, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =]
[;, i, <, iHeight, ;, ++, i, ), {, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =]
[;, ++, i, ), {, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =, out, ., blocks, []
[++, i, ), {, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =, out, ., blocks, [, ++]
[{, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;]
[(, outIndex, >=, outBlock, ., length, ), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =]
[outBlock, ., length, ), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }]
[outBlock, ., length, ), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }]
[length, ), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, []
[length, ), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, []
[=, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =]
[=, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =]
[., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =, block, []
[., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =, block, []
[., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =, block, []
[[, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =, block, [, i, *]
[outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =, block, [, i, *, jWidth, +]
[;, }, outBlock, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return]
[setColumnMatrix, (, final, int, column, ,, final, FieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {]
[final, int, column, ,, final, FieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {, setColumnMatrix, (]
[column, ,, final, FieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {, setColumnMatrix, (, column, ,]
[>, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {, setColumnMatrix, (, column, ,, (, BlockFieldMatrix, <, T, >, )]
[setColumnMatrix, (, column, ,, (, BlockFieldMatrix, <, T, >, ), matrix, ), ;, }, catch, (, ClassCastException, cce, ), {]
[setColumnMatrix, (, column, ,, (, BlockFieldMatrix, <, T, >, ), matrix, ), ;, }, catch, (, ClassCastException, cce, ), {]
[(, BlockFieldMatrix, <, T, >, ), matrix, ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnMatrix, (]
[<, T, >, ), matrix, ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnMatrix, (, column, ,]
[}, void, setColumnMatrix, (, final, int, column, ,, final, BlockFieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {]
[setColumnMatrix, (, final, int, column, ,, final, BlockFieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (]
[BlockFieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, int, nRows, =]
[throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (]
[MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (]
[MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (]
[column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=]
[final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||]
[int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||, (]
[int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||, (]
[int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||, (]
[;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=]
[., getRowDimension, (, ), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw]
[), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,]
[matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,]
[1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,]
[getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =]
[getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =]
[), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /]
[), ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =]
[), ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =]
[nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -]
[nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -]
[1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *]
[jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =]
[column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (]
[jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, mBlockIndex, =]
[*, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, mBlockIndex, =, 0, ;, int, mIndex, =]
[blockWidth, (, jBlock, ), ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =]
[blockWidth, (, jBlock, ), ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =]
[blockWidth, (, jBlock, ), ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =]
[;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =, matrix, ., blocks, []
[=, 0, ;, T, [, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, iBlock, =]
[;, T, [, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;]
[;, T, [, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;]
[[, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[=, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[{, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <]
[blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++]
[jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (]
[jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, mIndex, >=]
[;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, mIndex, >=]
[=, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, mIndex, >=, mBlock, ., length, ), {]
[;, i, <, iHeight, ;, ++, i, ), {, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =]
[;, i, <, iHeight, ;, ++, i, ), {, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =]
[;, i, <, iHeight, ;, ++, i, ), {, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =]
[;, ++, i, ), {, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =, matrix, ., blocks, []
[++, i, ), {, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =, matrix, ., blocks, [, ++]
[{, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;]
[(, mIndex, >=, mBlock, ., length, ), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =]
[mBlock, ., length, ), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }]
[mBlock, ., length, ), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }]
[length, ), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, []
[length, ), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, []
[length, ), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, []
[{, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, [, i, *]
[=, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, [, i, *, jWidth, +]
[blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, [, i, *, jWidth, +, jColumn, ], =]
[blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, [, i, *, jWidth, +, jColumn, ], =]
[++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, [, i, *, jWidth, +, jColumn, ], =, mBlock, []
[++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, [, i, *, jWidth, +, jColumn, ], =, mBlock, []
[;, }, }, }, @, Override, public, FieldVector, <, T, >, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {]
[}, }, @, Override, public, FieldVector, <, T, >, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (]
[getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, T, [, ], outData, =]
[getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, T, [, ], outData, =]
[row, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, T, [, ], outData, =, MathArrays, ., buildArray, (]
[{, checkRowIndex, (, row, ), ;, final, T, [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[T, [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final, int, iBlock, =]
[T, [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final, int, iBlock, =]
[], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final, int, iBlock, =, row, /]
[(, getField, (, ), ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =]
[(, getField, (, ), ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =]
[(, ), ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -]
[(, ), ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -]
[,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =]
[final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =]
[iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;]
[iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;]
[row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[*, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[{, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (]
[T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,]
[T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,]
[], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *]
[=, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,]
[*, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,, outIndex, ,]
[jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,, outIndex, ,, jWidth, ), ;]
[;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,, outIndex, ,, jWidth, ), ;, outIndex, +=]
[(, block, ,, iRow, *, jWidth, ,, outData, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return]
[,, outData, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, new, ArrayFieldVector, <, T, >, (]
[,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,]
[), ;, outIndex, +=, jWidth, ;, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData, ,]
[setRowVector, (, final, int, row, ,, final, FieldVector, <, T, >, vector, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {]
[final, int, row, ,, final, FieldVector, <, T, >, vector, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {, setRow, (]
[row, ,, final, FieldVector, <, T, >, vector, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {, setRow, (, row, ,]
[row, ,, final, FieldVector, <, T, >, vector, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {, setRow, (, row, ,]
[,, final, FieldVector, <, T, >, vector, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {, setRow, (, row, ,, (]
[vector, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, try, {, setRow, (, row, ,, (, (, ArrayFieldVector, <, T, >, )]
[ArrayFieldVector, <, T, >, ), vector, ), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {]
[ArrayFieldVector, <, T, >, ), vector, ), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {]
[), vector, ), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowVector, (]
[), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowVector, (, row, ,]
[), ;, }, }, @, Override, public, FieldVector, <, T, >, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {]
[}, }, @, Override, public, FieldVector, <, T, >, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (]
[getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, T, [, ], outData, =]
[getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, T, [, ], outData, =]
[column, ), throws, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, T, [, ], outData, =, MathArrays, ., buildArray, (]
[{, checkColumnIndex, (, column, ), ;, final, T, [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[T, [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final, int, jBlock, =]
[T, [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final, int, jBlock, =]
[], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final, int, jBlock, =, column, /]
[(, getField, (, ), ,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =]
[(, getField, (, ), ,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =]
[(, ), ,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -]
[(, ), ,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -]
[,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *]
[jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =]
[column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (]
[jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[=, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[(, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[{, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <]
[blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++]
[blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {]
[blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {]
[jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData, []
[jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData, []
[(, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData, [, outIndex, ++, ], =]
[(, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData, [, outIndex, ++, ], =]
[i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData, [, outIndex, ++, ], =, block, []
[i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData, [, outIndex, ++, ], =, block, []
[i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData, [, outIndex, ++, ], =, block, []
[0, ;, i, <, iHeight, ;, ++, i, ), {, outData, [, outIndex, ++, ], =, block, [, i, *]
[i, <, iHeight, ;, ++, i, ), {, outData, [, outIndex, ++, ], =, block, [, i, *, jWidth, +]
[), {, outData, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return]
[], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, new, ArrayFieldVector, <, T, >, (]
[i, *, jWidth, +, jColumn, ], ;, }, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,]
[jWidth, +, jColumn, ], ;, }, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData, ,]
[setColumnVector, (, final, int, column, ,, final, FieldVector, <, T, >, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, try, {]
[final, int, column, ,, final, FieldVector, <, T, >, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, try, {, setColumn, (]
[column, ,, final, FieldVector, <, T, >, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, try, {, setColumn, (, column, ,]
[column, ,, final, FieldVector, <, T, >, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, try, {, setColumn, (, column, ,]
[,, final, FieldVector, <, T, >, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, try, {, setColumn, (, column, ,, (]
[vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, try, {, setColumn, (, column, ,, (, (, ArrayFieldVector, <, T, >, )]
[ArrayFieldVector, <, T, >, ), vector, ), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {]
[ArrayFieldVector, <, T, >, ), vector, ), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {]
[), vector, ), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnVector, (]
[), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnVector, (, column, ,]
[vector, ), ;, }, }, @, Override, public, T, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {]
[;, }, }, @, Override, public, T, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (]
[getRow, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, T, [, ], out, =]
[getRow, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, T, [, ], out, =]
[row, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, final, T, [, ], out, =, MathArrays, ., buildArray, (]
[{, checkRowIndex, (, row, ), ;, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final, int, iBlock, =]
[T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final, int, iBlock, =]
[], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final, int, iBlock, =, row, /]
[(, getField, (, ), ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =]
[(, getField, (, ), ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =]
[(, ), ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -]
[(, ), ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -]
[,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =]
[final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =]
[iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;]
[iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;]
[row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[*, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[{, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (]
[T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,]
[T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,]
[], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *]
[=, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,]
[*, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,, outIndex, ,]
[jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,, outIndex, ,, jWidth, ), ;]
[;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,, outIndex, ,, jWidth, ), ;, outIndex, +=]
[(, block, ,, iRow, *, jWidth, ,, out, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return]
[Override, public, void, setRow, (, final, int, row, ,, final, T, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[void, setRow, (, final, int, row, ,, final, T, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, checkRowIndex, (]
[final, T, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, checkRowIndex, (, row, ), ;, final, int, nCols, =]
[throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, checkRowIndex, (, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, checkRowIndex, (, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, checkRowIndex, (, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[{, checkRowIndex, (, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (]
[=, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,]
[=, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,]
[;, if, (, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,]
[(, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,]
[throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =]
[throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =]
[MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /]
[length, ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =]
[length, ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =]
[1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -]
[1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -]
[nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =]
[final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =]
[iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;]
[iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;]
[row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[*, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, []
[{, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (]
[T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, array, ,]
[], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, array, ,, outIndex, ,]
[=, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,]
[=, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *]
[*, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *, jWidth, ,]
[jBlock, ], ;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;]
[;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;, outIndex, +=]
[+=, jWidth, ;, }, }, @, Override, public, T, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {]
[;, }, }, @, Override, public, T, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (]
[getColumn, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, T, [, ], out, =]
[getColumn, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, T, [, ], out, =]
[column, ), throws, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, T, [, ], out, =, MathArrays, ., buildArray, (]
[{, checkColumnIndex, (, column, ), ;, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final, int, jBlock, =]
[T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final, int, jBlock, =]
[], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final, int, jBlock, =, column, /]
[(, getField, (, ), ,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =]
[(, getField, (, ), ,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =]
[(, ), ,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -]
[(, ), ,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -]
[,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *]
[jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =]
[column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (]
[jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[=, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[(, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[{, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <]
[blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++]
[blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {]
[blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {]
[jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out, []
[jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out, []
[(, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out, [, outIndex, ++, ], =]
[(, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out, [, outIndex, ++, ], =]
[i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out, [, outIndex, ++, ], =, block, []
[i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out, [, outIndex, ++, ], =, block, []
[i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out, [, outIndex, ++, ], =, block, []
[0, ;, i, <, iHeight, ;, ++, i, ), {, out, [, outIndex, ++, ], =, block, [, i, *]
[i, <, iHeight, ;, ++, i, ), {, out, [, outIndex, ++, ], =, block, [, i, *, jWidth, +]
[), {, out, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return]
[Override, public, void, setColumn, (, final, int, column, ,, final, T, [, ], array, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {]
[void, setColumn, (, final, int, column, ,, final, T, [, ], array, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (]
[final, T, [, ], array, ), throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, int, nRows, =]
[throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[throws, MatrixDimensionMismatchException, ,, OutOfRangeException, {, checkColumnIndex, (, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[{, checkColumnIndex, (, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw]
[int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (]
[int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (]
[(, ), ;, if, (, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,]
[;, if, (, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,]
[(, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,]
[throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =]
[throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =]
[MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /]
[1, ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =]
[1, ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =]
[nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -]
[nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -]
[1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *]
[jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =]
[column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (]
[jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[=, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[(, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, []
[{, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <]
[blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++]
[blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {]
[blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {]
[jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, block, []
[jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, block, []
[jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, block, []
[;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, block, [, i, *]
[(, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, block, [, i, *, jWidth, +]
[=, 0, ;, i, <, iHeight, ;, ++, i, ), {, block, [, i, *, jWidth, +, jColumn, ], =]
[=, 0, ;, i, <, iHeight, ;, ++, i, ), {, block, [, i, *, jWidth, +, jColumn, ], =]
[;, i, <, iHeight, ;, ++, i, ), {, block, [, i, *, jWidth, +, jColumn, ], =, array, []
[;, i, <, iHeight, ;, ++, i, ), {, block, [, i, *, jWidth, +, jColumn, ], =, array, []
[}, }, }, @, Override, public, T, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {]
[}, @, Override, public, T, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (]
[public, T, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;]
[getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =]
[int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =]
[), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /]
[row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =]
[row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =]
[;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (]
[=, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -]
[=, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -]
[/, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *]
[final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *]
[jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (]
[/, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +]
[BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (]
[BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (]
[final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -]
[final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -]
[k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *]
[-, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return]
[-, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return]
[-, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return]
[*, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, []
[*, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, []
[*, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, []
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *]
[blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *, blockColumns, +]
[), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *, blockColumns, +, jBlock, ], []
[Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, T, value, ), throws, OutOfRangeException, {]
[void, setEntry, (, final, int, row, ,, final, int, column, ,, final, T, value, ), throws, OutOfRangeException, {, checkRowIndex, (]
[final, int, row, ,, final, int, column, ,, final, T, value, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;]
[row, ,, final, int, column, ,, final, T, value, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[T, value, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =]
[T, value, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =]
[), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /]
[row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =]
[row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =]
[;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (]
[=, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -]
[=, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -]
[/, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *]
[final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *]
[jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (]
[/, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +]
[BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (]
[BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (]
[final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -]
[final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -]
[k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *]
[row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;]
[row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;]
[row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;]
[iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, []
[iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, []
[iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, []
[BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *]
[*, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns, +]
[jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], []
[(, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], =]
[Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, T, increment, ), throws, OutOfRangeException, {]
[void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (]
[final, int, row, ,, final, int, column, ,, final, T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;]
[row, ,, final, int, column, ,, final, T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =]
[T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =]
[), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /]
[row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =]
[row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =]
[;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (]
[=, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -]
[=, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -]
[/, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *]
[final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *]
[jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (]
[/, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +]
[BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (]
[BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (]
[final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -]
[final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -]
[k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *]
[*, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =]
[*, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =]
[(, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, []
[(, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, []
[(, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, []
[), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *]
[(, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +]
[jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, []
[final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =]
[final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =]
[final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =]
[[, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, []
[[, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., add, (]
[Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, T, factor, ), throws, OutOfRangeException, {]
[void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (]
[final, int, row, ,, final, int, column, ,, final, T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;]
[row, ,, final, int, column, ,, final, T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =]
[T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =]
[), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /]
[row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =]
[row, ), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =]
[;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (]
[int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (]
[=, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -]
[=, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -]
[/, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *]
[final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *]
[jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (]
[/, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +]
[BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (]
[BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (]
[final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -]
[final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -]
[k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *]
[*, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =]
[*, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =]
[(, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, []
[(, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, []
[(, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, []
[), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *]
[(, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +]
[jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, []
[final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =]
[final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =]
[final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =]
[[, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, []
[[, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., multiply, (]
[(, factor, ), ;, }, @, Override, public, FieldMatrix, <, T, >, transpose, (, ), {, final, int, nRows, =]
[FieldMatrix, <, T, >, transpose, (, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[=, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[int, nCols, =, getColumnDimension, (, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (]
[(, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, nCols, ,]
[out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, nCols, ,, nRows, ), ;, int, blockIndex, =]
[(, getField, (, ), ,, nCols, ,, nRows, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =]
[(, ), ,, nCols, ,, nRows, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[(, ), ,, nCols, ,, nRows, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[,, nCols, ,, nRows, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[,, nRows, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockColumns, ;]
[nRows, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockColumns, ;, ++]
[for, (, int, iBlock, =, 0, ;, iBlock, <, blockColumns, ;, ++, iBlock, ), {, for, (, int, jBlock, =]
[int, iBlock, =, 0, ;, iBlock, <, blockColumns, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;]
[int, iBlock, =, 0, ;, iBlock, <, blockColumns, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;]
[=, 0, ;, iBlock, <, blockColumns, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <]
[;, iBlock, <, blockColumns, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockRows, ;]
[iBlock, <, blockColumns, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockRows, ;, ++]
[(, int, jBlock, =, 0, ;, jBlock, <, blockRows, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockRows, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockRows, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =]
[0, ;, jBlock, <, blockRows, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, []
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[{, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =]
[T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, []
[T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, []
[T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, []
[], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, jBlock, *]
[=, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, jBlock, *, blockColumns, +]
[;, final, T, [, ], tBlock, =, blocks, [, jBlock, *, blockColumns, +, iBlock, ], ;, final, int, pStart, =]
[;, final, T, [, ], tBlock, =, blocks, [, jBlock, *, blockColumns, +, iBlock, ], ;, final, int, pStart, =]
[T, [, ], tBlock, =, blocks, [, jBlock, *, blockColumns, +, iBlock, ], ;, final, int, pStart, =, iBlock, *]
[[, jBlock, *, blockColumns, +, iBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[[, jBlock, *, blockColumns, +, iBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[+, iBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[+, iBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, qStart, =]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, qStart, =]
[int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, qStart, =, jBlock, *]
[(, pStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[(, pStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[,, columns, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[,, columns, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, rows, ), ;, int, k, =]
[., min, (, qStart, +, BLOCK_SIZE, ,, rows, ), ;, int, k, =, 0, ;, for, (, int, p, =]
[(, qStart, +, BLOCK_SIZE, ,, rows, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[(, qStart, +, BLOCK_SIZE, ,, rows, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[+, BLOCK_SIZE, ,, rows, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[,, rows, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[rows, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lInc, =]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lInc, =]
[(, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lInc, =, pEnd, -]
[;, p, <, pEnd, ;, ++, p, ), {, final, int, lInc, =, pEnd, -, pStart, ;, int, l, =]
[;, p, <, pEnd, ;, ++, p, ), {, final, int, lInc, =, pEnd, -, pStart, ;, int, l, =]
[<, pEnd, ;, ++, p, ), {, final, int, lInc, =, pEnd, -, pStart, ;, int, l, =, p, -]
[final, int, lInc, =, pEnd, -, pStart, ;, int, l, =, p, -, pStart, ;, for, (, int, q, =]
[lInc, =, pEnd, -, pStart, ;, int, l, =, p, -, pStart, ;, for, (, int, q, =, qStart, ;]
[lInc, =, pEnd, -, pStart, ;, int, l, =, p, -, pStart, ;, for, (, int, q, =, qStart, ;]
[pEnd, -, pStart, ;, int, l, =, p, -, pStart, ;, for, (, int, q, =, qStart, ;, q, <]
[pStart, ;, int, l, =, p, -, pStart, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[;, int, l, =, p, -, pStart, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[=, p, -, pStart, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[=, p, -, pStart, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[-, pStart, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, []
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =]
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =]
[int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, []
[qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, l, ], ;]
[;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, l, ], ;, ++]
[<, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, l, ], ;, ++, k, ;]
[;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, l, ], ;, ++, k, ;, l, +=]
[{, outBlock, [, k, ], =, tBlock, [, l, ], ;, ++, k, ;, l, +=, lInc, ;, }, }]
[outBlock, [, k, ], =, tBlock, [, l, ], ;, ++, k, ;, l, +=, lInc, ;, }, }, ++]
[tBlock, [, l, ], ;, ++, k, ;, l, +=, lInc, ;, }, }, ++, blockIndex, ;, }, }, return]
[}, }, ++, blockIndex, ;, }, }, return, out, ;, }, @, Override, public, int, getRowDimension, (, ), {, return]
[Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[}, @, Override, public, T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[}, @, Override, public, T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[}, @, Override, public, T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=]
[(, final, T, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, columns, ), {, throw]
[[, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, columns, ), {, throw, new, DimensionMismatchException, (]
[[, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, columns, ), {, throw, new, DimensionMismatchException, (]
[throws, DimensionMismatchException, {, if, (, v, ., length, !=, columns, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, columns, ), ;, }, final, T, [, ], out, =]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, columns, ), ;, }, final, T, [, ], out, =]
[DimensionMismatchException, (, v, ., length, ,, columns, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (]
[length, ,, columns, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final, T, zero, =]
[T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final, T, zero, =]
[rows, ), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, iBlock, =]
[;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, iBlock, =, 0, ;]
[;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, iBlock, =, 0, ;]
[T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[=, getField, (, ), ., getZero, (, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[getField, (, ), ., getZero, (, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;]
[FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[(, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, T, [, ], block, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, T, [, ], block, =]
[jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, T, [, ], block, =, blocks, []
[jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, T, [, ], block, =, blocks, []
[jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, T, [, ], block, =, blocks, []
[0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *]
[jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[{, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, qStart, =]
[{, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, qStart, =]
[T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, qStart, =, jBlock, *]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[+, jBlock, ], ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[+, jBlock, ], ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[], ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =]
[(, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[(, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[+, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, T, sum, =]
[p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, T, sum, =, zero, ;, int, q, =]
[p, <, pEnd, ;, ++, p, ), {, T, sum, =, zero, ;, int, q, =, qStart, ;, while, (]
[p, <, pEnd, ;, ++, p, ), {, T, sum, =, zero, ;, int, q, =, qStart, ;, while, (]
[pEnd, ;, ++, p, ), {, T, sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <]
[pEnd, ;, ++, p, ), {, T, sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <]
[++, p, ), {, T, sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <, qEnd, -]
[{, T, sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, ), {]
[sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, ), {, sum, =]
[sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, ), {, sum, =]
[sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, ), {, sum, =]
[sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, ), {, sum, =]
[sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, ), {, sum, =]
[int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, ), {, sum, =, sum, ., add, (]
[int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, ), {, sum, =, sum, ., add, (]
[int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, ), {, sum, =, sum, ., add, (]
[=, qStart, ;, while, (, q, <, qEnd, -, 3, ), {, sum, =, sum, ., add, (, block, []
[q, <, qEnd, -, 3, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (]
[q, <, qEnd, -, 3, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (]
[qEnd, -, 3, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, []
[sum, ., add, (, block, [, k, ], ., multiply, (, v, [, q, ], ), ), ., add, (]
[sum, ., add, (, block, [, k, ], ., multiply, (, v, [, q, ], ), ), ., add, (]
[sum, ., add, (, block, [, k, ], ., multiply, (, v, [, q, ], ), ), ., add, (]
[add, (, block, [, k, ], ., multiply, (, v, [, q, ], ), ), ., add, (, block, []
[add, (, block, [, k, ], ., multiply, (, v, [, q, ], ), ), ., add, (, block, []
[block, [, k, ], ., multiply, (, v, [, q, ], ), ), ., add, (, block, [, k, +]
[multiply, (, v, [, q, ], ), ), ., add, (, block, [, k, +, 1, ], ., multiply, (]
[multiply, (, v, [, q, ], ), ), ., add, (, block, [, k, +, 1, ], ., multiply, (]
[v, [, q, ], ), ), ., add, (, block, [, k, +, 1, ], ., multiply, (, v, []
[v, [, q, ], ), ), ., add, (, block, [, k, +, 1, ], ., multiply, (, v, []
[q, ], ), ), ., add, (, block, [, k, +, 1, ], ., multiply, (, v, [, q, +]
[block, [, k, +, 1, ], ., multiply, (, v, [, q, +, 1, ], ), ), ., add, (]
[block, [, k, +, 1, ], ., multiply, (, v, [, q, +, 1, ], ), ), ., add, (]
[block, [, k, +, 1, ], ., multiply, (, v, [, q, +, 1, ], ), ), ., add, (]
[k, +, 1, ], ., multiply, (, v, [, q, +, 1, ], ), ), ., add, (, block, []
[k, +, 1, ], ., multiply, (, v, [, q, +, 1, ], ), ), ., add, (, block, []
[1, ], ., multiply, (, v, [, q, +, 1, ], ), ), ., add, (, block, [, k, +]
[v, [, q, +, 1, ], ), ), ., add, (, block, [, k, +, 2, ], ., multiply, (]
[v, [, q, +, 1, ], ), ), ., add, (, block, [, k, +, 2, ], ., multiply, (]
[q, +, 1, ], ), ), ., add, (, block, [, k, +, 2, ], ., multiply, (, v, []
[q, +, 1, ], ), ), ., add, (, block, [, k, +, 2, ], ., multiply, (, v, []
[1, ], ), ), ., add, (, block, [, k, +, 2, ], ., multiply, (, v, [, q, +]
[block, [, k, +, 2, ], ., multiply, (, v, [, q, +, 2, ], ), ), ., add, (]
[block, [, k, +, 2, ], ., multiply, (, v, [, q, +, 2, ], ), ), ., add, (]
[block, [, k, +, 2, ], ., multiply, (, v, [, q, +, 2, ], ), ), ., add, (]
[k, +, 2, ], ., multiply, (, v, [, q, +, 2, ], ), ), ., add, (, block, []
[k, +, 2, ], ., multiply, (, v, [, q, +, 2, ], ), ), ., add, (, block, []
[2, ], ., multiply, (, v, [, q, +, 2, ], ), ), ., add, (, block, [, k, +]
[v, [, q, +, 2, ], ), ), ., add, (, block, [, k, +, 3, ], ., multiply, (]
[v, [, q, +, 2, ], ), ), ., add, (, block, [, k, +, 3, ], ., multiply, (]
[q, +, 2, ], ), ), ., add, (, block, [, k, +, 3, ], ., multiply, (, v, []
[q, +, 2, ], ), ), ., add, (, block, [, k, +, 3, ], ., multiply, (, v, []
[2, ], ), ), ., add, (, block, [, k, +, 3, ], ., multiply, (, v, [, q, +]
[add, (, block, [, k, +, 3, ], ., multiply, (, v, [, q, +, 3, ], ), ), ;]
[block, [, k, +, 3, ], ., multiply, (, v, [, q, +, 3, ], ), ), ;, k, +=]
[k, +, 3, ], ., multiply, (, v, [, q, +, 3, ], ), ), ;, k, +=, 4, ;]
[3, ], ., multiply, (, v, [, q, +, 3, ], ), ), ;, k, +=, 4, ;, q, +=]
[v, [, q, +, 3, ], ), ), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (]
[v, [, q, +, 3, ], ), ), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (]
[q, +, 3, ], ), ), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (, q, <]
[], ), ), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {]
[), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =]
[), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =]
[4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =, sum, ., add, (]
[4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =, sum, ., add, (]
[4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =, sum, ., add, (]
[q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =, sum, ., add, (, block, []
[q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =, sum, ., add, (, block, []
[(, q, <, qEnd, ), {, sum, =, sum, ., add, (, block, [, k, ++, ], ., multiply, (]
[(, q, <, qEnd, ), {, sum, =, sum, ., add, (, block, [, k, ++, ], ., multiply, (]
[<, qEnd, ), {, sum, =, sum, ., add, (, block, [, k, ++, ], ., multiply, (, v, []
[<, qEnd, ), {, sum, =, sum, ., add, (, block, [, k, ++, ], ., multiply, (, v, []
[., add, (, block, [, k, ++, ], ., multiply, (, v, [, q, ++, ], ), ), ;, }]
[., add, (, block, [, k, ++, ], ., multiply, (, v, [, q, ++, ], ), ), ;, }]
[(, block, [, k, ++, ], ., multiply, (, v, [, q, ++, ], ), ), ;, }, out, []
[k, ++, ], ., multiply, (, v, [, q, ++, ], ), ), ;, }, out, [, p, ], =]
[k, ++, ], ., multiply, (, v, [, q, ++, ], ), ), ;, }, out, [, p, ], =]
[k, ++, ], ., multiply, (, v, [, q, ++, ], ), ), ;, }, out, [, p, ], =]
[], ., multiply, (, v, [, q, ++, ], ), ), ;, }, out, [, p, ], =, out, []
[[, q, ++, ], ), ), ;, }, out, [, p, ], =, out, [, p, ], ., add, (]
[}, out, [, p, ], =, out, [, p, ], ., add, (, sum, ), ;, }, }, }, return]
[}, @, Override, public, T, [, ], preMultiply, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[}, @, Override, public, T, [, ], preMultiply, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[}, @, Override, public, T, [, ], preMultiply, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[T, [, ], preMultiply, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=]
[(, final, T, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, rows, ), {, throw]
[[, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, rows, ), {, throw, new, DimensionMismatchException, (]
[[, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, rows, ), {, throw, new, DimensionMismatchException, (]
[throws, DimensionMismatchException, {, if, (, v, ., length, !=, rows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, rows, ), ;, }, final, T, [, ], out, =]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, rows, ), ;, }, final, T, [, ], out, =]
[DimensionMismatchException, (, v, ., length, ,, rows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (]
[length, ,, rows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final, T, zero, =]
[T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final, T, zero, =]
[columns, ), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, jBlock, =]
[;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, jBlock, =, 0, ;]
[;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, jBlock, =, 0, ;]
[T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[=, getField, (, ), ., getZero, (, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[getField, (, ), ., getZero, (, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, jWidth2, =]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, jWidth2, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =]
[=, blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +]
[final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =]
[final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =]
[jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +]
[final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, int, qStart, =]
[final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, int, qStart, =]
[jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, int, qStart, =, jBlock, *]
[final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[jWidth3, +, jWidth, ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[jWidth3, +, jWidth, ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[jWidth, ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, for, (, int, iBlock, =]
[qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, for, (, int, iBlock, =, 0, ;]
[qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, for, (, int, iBlock, =, 0, ;]
[FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[(, qStart, +, BLOCK_SIZE, ,, columns, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, T, [, ], block, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, T, [, ], block, =]
[iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, T, [, ], block, =, blocks, []
[iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, T, [, ], block, =, blocks, []
[iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, T, [, ], block, =, blocks, []
[0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[{, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, pStart, =]
[{, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, pStart, =]
[T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, pStart, =, iBlock, *]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[+, jBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[+, jBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, q, =]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, q, =, qStart, ;]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, q, =, qStart, ;]
[FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, q, =, qStart, ;, q, <]
[min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[(, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[), ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, int, k, =]
[), ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, int, k, =]
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, int, k, =, q, -]
[qStart, ;, q, <, qEnd, ;, ++, q, ), {, int, k, =, q, -, qStart, ;, T, sum, =]
[;, ++, q, ), {, int, k, =, q, -, qStart, ;, T, sum, =, zero, ;, int, p, =]
[{, int, k, =, q, -, qStart, ;, T, sum, =, zero, ;, int, p, =, pStart, ;, while, (]
[{, int, k, =, q, -, qStart, ;, T, sum, =, zero, ;, int, p, =, pStart, ;, while, (]
[k, =, q, -, qStart, ;, T, sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <]
[k, =, q, -, qStart, ;, T, sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <]
[q, -, qStart, ;, T, sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <, pEnd, -]
[;, T, sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {]
[sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {, sum, =]
[sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {, sum, =]
[sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {, sum, =]
[sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {, sum, =]
[sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {, sum, =]
[int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {, sum, =, sum, ., add, (]
[int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {, sum, =, sum, ., add, (]
[int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {, sum, =, sum, ., add, (]
[=, pStart, ;, while, (, p, <, pEnd, -, 3, ), {, sum, =, sum, ., add, (, block, []
[p, <, pEnd, -, 3, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (]
[p, <, pEnd, -, 3, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (]
[pEnd, -, 3, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, []
[sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p, ], ), ), ., add, (]
[sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p, ], ), ), ., add, (]
[sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p, ], ), ), ., add, (]
[add, (, block, [, k, ], ., multiply, (, v, [, p, ], ), ), ., add, (, block, []
[add, (, block, [, k, ], ., multiply, (, v, [, p, ], ), ), ., add, (, block, []
[block, [, k, ], ., multiply, (, v, [, p, ], ), ), ., add, (, block, [, k, +]
[multiply, (, v, [, p, ], ), ), ., add, (, block, [, k, +, jWidth, ], ., multiply, (]
[multiply, (, v, [, p, ], ), ), ., add, (, block, [, k, +, jWidth, ], ., multiply, (]
[v, [, p, ], ), ), ., add, (, block, [, k, +, jWidth, ], ., multiply, (, v, []
[v, [, p, ], ), ), ., add, (, block, [, k, +, jWidth, ], ., multiply, (, v, []
[p, ], ), ), ., add, (, block, [, k, +, jWidth, ], ., multiply, (, v, [, p, +]
[block, [, k, +, jWidth, ], ., multiply, (, v, [, p, +, 1, ], ), ), ., add, (]
[block, [, k, +, jWidth, ], ., multiply, (, v, [, p, +, 1, ], ), ), ., add, (]
[block, [, k, +, jWidth, ], ., multiply, (, v, [, p, +, 1, ], ), ), ., add, (]
[k, +, jWidth, ], ., multiply, (, v, [, p, +, 1, ], ), ), ., add, (, block, []
[k, +, jWidth, ], ., multiply, (, v, [, p, +, 1, ], ), ), ., add, (, block, []
[jWidth, ], ., multiply, (, v, [, p, +, 1, ], ), ), ., add, (, block, [, k, +]
[v, [, p, +, 1, ], ), ), ., add, (, block, [, k, +, jWidth2, ], ., multiply, (]
[v, [, p, +, 1, ], ), ), ., add, (, block, [, k, +, jWidth2, ], ., multiply, (]
[p, +, 1, ], ), ), ., add, (, block, [, k, +, jWidth2, ], ., multiply, (, v, []
[p, +, 1, ], ), ), ., add, (, block, [, k, +, jWidth2, ], ., multiply, (, v, []
[1, ], ), ), ., add, (, block, [, k, +, jWidth2, ], ., multiply, (, v, [, p, +]
[block, [, k, +, jWidth2, ], ., multiply, (, v, [, p, +, 2, ], ), ), ., add, (]
[block, [, k, +, jWidth2, ], ., multiply, (, v, [, p, +, 2, ], ), ), ., add, (]
[block, [, k, +, jWidth2, ], ., multiply, (, v, [, p, +, 2, ], ), ), ., add, (]
[k, +, jWidth2, ], ., multiply, (, v, [, p, +, 2, ], ), ), ., add, (, block, []
[k, +, jWidth2, ], ., multiply, (, v, [, p, +, 2, ], ), ), ., add, (, block, []
[jWidth2, ], ., multiply, (, v, [, p, +, 2, ], ), ), ., add, (, block, [, k, +]
[v, [, p, +, 2, ], ), ), ., add, (, block, [, k, +, jWidth3, ], ., multiply, (]
[v, [, p, +, 2, ], ), ), ., add, (, block, [, k, +, jWidth3, ], ., multiply, (]
[p, +, 2, ], ), ), ., add, (, block, [, k, +, jWidth3, ], ., multiply, (, v, []
[p, +, 2, ], ), ), ., add, (, block, [, k, +, jWidth3, ], ., multiply, (, v, []
[2, ], ), ), ., add, (, block, [, k, +, jWidth3, ], ., multiply, (, v, [, p, +]
[add, (, block, [, k, +, jWidth3, ], ., multiply, (, v, [, p, +, 3, ], ), ), ;]
[block, [, k, +, jWidth3, ], ., multiply, (, v, [, p, +, 3, ], ), ), ;, k, +=]
[k, +, jWidth3, ], ., multiply, (, v, [, p, +, 3, ], ), ), ;, k, +=, jWidth4, ;]
[jWidth3, ], ., multiply, (, v, [, p, +, 3, ], ), ), ;, k, +=, jWidth4, ;, p, +=]
[v, [, p, +, 3, ], ), ), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (]
[v, [, p, +, 3, ], ), ), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (]
[p, +, 3, ], ), ), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (, p, <]
[], ), ), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {]
[), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {, sum, =]
[), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {, sum, =]
[jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {, sum, =, sum, ., add, (]
[jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {, sum, =, sum, ., add, (]
[jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {, sum, =, sum, ., add, (]
[p, +=, 4, ;, }, while, (, p, <, pEnd, ), {, sum, =, sum, ., add, (, block, []
[while, (, p, <, pEnd, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (]
[while, (, p, <, pEnd, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (]
[p, <, pEnd, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, []
[p, <, pEnd, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, []
[=, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p, ++, ], ), ), ;]
[., add, (, block, [, k, ], ., multiply, (, v, [, p, ++, ], ), ), ;, k, +=]
[block, [, k, ], ., multiply, (, v, [, p, ++, ], ), ), ;, k, +=, jWidth, ;, }]
[block, [, k, ], ., multiply, (, v, [, p, ++, ], ), ), ;, k, +=, jWidth, ;, }]
[k, ], ., multiply, (, v, [, p, ++, ], ), ), ;, k, +=, jWidth, ;, }, out, []
[multiply, (, v, [, p, ++, ], ), ), ;, k, +=, jWidth, ;, }, out, [, q, ], =]
[multiply, (, v, [, p, ++, ], ), ), ;, k, +=, jWidth, ;, }, out, [, q, ], =]
[multiply, (, v, [, p, ++, ], ), ), ;, k, +=, jWidth, ;, }, out, [, q, ], =]
[v, [, p, ++, ], ), ), ;, k, +=, jWidth, ;, }, out, [, q, ], =, out, []
[), ), ;, k, +=, jWidth, ;, }, out, [, q, ], =, out, [, q, ], ., add, (]
[}, out, [, q, ], =, out, [, q, ], ., add, (, sum, ), ;, }, }, }, return]
[}, }, return, out, ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {]
[}, }, return, out, ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (]
[@, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,]
[public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,]
[walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[<, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[>, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[>, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;]
[FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <]
[min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[(, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[{, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[(, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[(, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =]
[int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =]
[=, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, []
[=, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, []
[=, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, []
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[(, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *]
[+, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =]
[], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;]
[], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;]
[int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <]
[=, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[(, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[*, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, []
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =]
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =]
[=, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (]
[;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,]
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[{, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;]
[block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {]
[., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (]
[@, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,]
[public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,]
[walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[<, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[>, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[>, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;]
[FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <]
[min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[(, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[{, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[(, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[(, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =]
[int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =]
[=, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, []
[=, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, []
[=, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, []
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[(, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *]
[+, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =]
[], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;]
[], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;]
[int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <]
[=, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[(, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (]
[(, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,]
[q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,]
[q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,]
[qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, []
[qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,]
[{, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[(, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,]
[start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =]
[start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =]
[rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /]
[columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;]
[columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <]
[endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +]
[endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +]
[startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /]
[endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;]
[), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++]
[startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =]
[startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =]
[BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *]
[endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =]
[endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =]
[++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (]
[int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (]
[pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (]
[pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (]
[FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +]
[(, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =]
[(, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;]
[(, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[*, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[<, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +]
[<, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +]
[;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /]
[p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;]
[), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =]
[BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =]
[(, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (]
[), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (]
[int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (]
[qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (]
[qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (]
[FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +]
[(, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[(, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =]
[(, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =]
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[*, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, p0, ), *]
[blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +]
[iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -]
[int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =]
[=, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;]
[=, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;]
[p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <]
[p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[-, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, []
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =]
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =]
[=, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (]
[;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,]
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[{, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;]
[block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,]
[{, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[(, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,]
[start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =]
[start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =]
[rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /]
[columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;]
[columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <]
[endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +]
[endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +]
[startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /]
[endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;]
[), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++]
[startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =]
[startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =]
[BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *]
[endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =]
[endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =]
[++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (]
[int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (]
[pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (]
[pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (]
[FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +]
[(, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =]
[(, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;]
[(, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[*, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[<, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +]
[<, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +]
[;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /]
[p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;]
[), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =]
[BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =]
[(, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (]
[), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (]
[int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (]
[qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (]
[qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (]
[FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +]
[(, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[(, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =]
[(, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =]
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[*, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, p0, ), *]
[blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +]
[iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -]
[int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =]
[=, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;]
[=, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;]
[p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <]
[p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (]
[(, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,]
[q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,]
[q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,]
[qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, []
[qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {]
[., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {]
[;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (]
[@, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,]
[public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,]
[walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[<, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[>, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[>, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =]
[,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[-, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;]
[FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[(, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *]
[jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =]
[int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =]
[=, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, []
[+, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =]
[T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =]
[], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[=, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[[, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, []
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =]
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =]
[=, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (]
[;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,]
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[{, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;]
[block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[=, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }]
[visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, ++]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return]
[., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {]
[., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {]
[;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (]
[@, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,]
[public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,]
[walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[<, T, >, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[>, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[>, visitor, ), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), {, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =]
[,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[-, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[(, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,]
[final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;]
[pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;]
[FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[(, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[(, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *]
[jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,]
[int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =]
[int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =]
[=, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, []
[+, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =]
[T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =]
[], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[=, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[[, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;]
[int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[{, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (]
[(, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,]
[q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,]
[q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,]
[qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, []
[qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[{, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }]
[visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, ++]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,]
[{, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[(, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,]
[start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =]
[start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =]
[rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /]
[columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;]
[columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <]
[endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +]
[endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +]
[startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /]
[endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;]
[), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++]
[startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =]
[startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =]
[BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *]
[endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =]
[endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =]
[++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (]
[int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (]
[pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (]
[pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (]
[FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +]
[(, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =]
[min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =]
[(, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +]
[BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +]
[1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /]
[endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;]
[), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =]
[BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =]
[(, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (]
[), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (]
[int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (]
[qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (]
[qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (]
[FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +]
[(, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[(, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =]
[(, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =]
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[*, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <]
[blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (]
[(, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (, p, -]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (, p, -, p0, ), *]
[;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +]
[<, pEnd, ;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -]
[int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =]
[=, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;]
[=, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;]
[p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <]
[p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[-, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, []
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =]
[for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =]
[=, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (]
[;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,]
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[{, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;]
[block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,]
[{, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[(, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,]
[start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =]
[start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =]
[rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /]
[columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;]
[columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <]
[endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +]
[endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +]
[startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /]
[endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;]
[), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++]
[startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =]
[startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =]
[BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *]
[endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =]
[endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =]
[++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (]
[int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (]
[pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (]
[pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (]
[FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +]
[(, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =]
[min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =]
[(, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +]
[BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +]
[1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /]
[endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;]
[), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =]
[BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =]
[int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =]
[(, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (]
[), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (]
[int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (]
[qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (]
[qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (]
[FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +]
[(, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[(, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =]
[(, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =]
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, []
[1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[*, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;]
[[, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;]
[block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <]
[blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (]
[(, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (, p, -]
[=, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (, p, -, p0, ), *]
[;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +]
[<, pEnd, ;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -]
[int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =]
[=, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;]
[=, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;]
[p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <]
[p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (]
[(, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,]
[q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,]
[q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,]
[qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, []
[qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return]
[}, }, return, visitor, ., end, (, ), ;, }, private, int, blockHeight, (, final, int, blockRow, ), {, return]
[}, }, return, visitor, ., end, (, ), ;, }, private, int, blockHeight, (, final, int, blockRow, ), {, return]
[}, return, visitor, ., end, (, ), ;, }, private, int, blockHeight, (, final, int, blockRow, ), {, return, (]
[}, return, visitor, ., end, (, ), ;, }, private, int, blockHeight, (, final, int, blockRow, ), {, return, (]
[visitor, ., end, (, ), ;, }, private, int, blockHeight, (, final, int, blockRow, ), {, return, (, blockRow, ==]
[visitor, ., end, (, ), ;, }, private, int, blockHeight, (, final, int, blockRow, ), {, return, (, blockRow, ==]
[end, (, ), ;, }, private, int, blockHeight, (, final, int, blockRow, ), {, return, (, blockRow, ==, blockRows, -]
[;, }, private, int, blockHeight, (, final, int, blockRow, ), {, return, (, blockRow, ==, blockRows, -, 1, ), ?]
[;, }, private, int, blockHeight, (, final, int, blockRow, ), {, return, (, blockRow, ==, blockRows, -, 1, ), ?]
[private, int, blockHeight, (, final, int, blockRow, ), {, return, (, blockRow, ==, blockRows, -, 1, ), ?, rows, -]
[private, int, blockHeight, (, final, int, blockRow, ), {, return, (, blockRow, ==, blockRows, -, 1, ), ?, rows, -]
[blockHeight, (, final, int, blockRow, ), {, return, (, blockRow, ==, blockRows, -, 1, ), ?, rows, -, blockRow, *]
[final, int, blockRow, ), {, return, (, blockRow, ==, blockRows, -, 1, ), ?, rows, -, blockRow, *, BLOCK_SIZE, :]
[?, rows, -, blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return]
[?, rows, -, blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return]
[rows, -, blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (]
[rows, -, blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (]
[blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==]
[blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==]
[BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -]
[;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -, 1, ), ?]
[;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -, 1, ), ?]
[private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -, 1, ), ?, columns, -]
[private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -, 1, ), ?, columns, -]
[blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -, 1, ), ?, columns, -, blockColumn, *]
[final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -, 1, ), ?, columns, -, blockColumn, *, BLOCK_SIZE, :]
