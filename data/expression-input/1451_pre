[fnNode, ), ;, String, getCombinedName, (, String, lhs, ,, String, rhs, ), ;, }, AnonymousFunctionNamingCallback, (, FunctionNamer, namer, ), {]
[fnNode, ), ;, String, getCombinedName, (, String, lhs, ,, String, rhs, ), ;, }, AnonymousFunctionNamingCallback, (, FunctionNamer, namer, ), {]
[getCombinedName, (, String, lhs, ,, String, rhs, ), ;, }, AnonymousFunctionNamingCallback, (, FunctionNamer, namer, ), {, this, ., namer, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =]
[), ), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =]
[), ), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =]
[Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (]
[Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (]
[Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (]
[(, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (, functionName, ., length, (, ), ==]
[=, functionNameNode, ., getString, (, ), ;, if, (, functionName, ., length, (, ), ==, 0, ), {, if, (]
[=, functionNameNode, ., getString, (, ), ;, if, (, functionName, ., length, (, ), ==, 0, ), {, if, (]
[., length, (, ), ==, 0, ), {, if, (, parent, ., isAssign, (, ), ), {, Node, lhs, =]
[., length, (, ), ==, 0, ), {, if, (, parent, ., isAssign, (, ), ), {, Node, lhs, =]
[(, parent, ., isAssign, (, ), ), {, Node, lhs, =, parent, ., getFirstChild, (, ), ;, String, name, =]
[(, parent, ., isAssign, (, ), ), {, Node, lhs, =, parent, ., getFirstChild, (, ), ;, String, name, =]
[(, ), ), {, Node, lhs, =, parent, ., getFirstChild, (, ), ;, String, name, =, namer, ., getName, (]
[{, Node, lhs, =, parent, ., getFirstChild, (, ), ;, String, name, =, namer, ., getName, (, lhs, ), ;]
[{, Node, lhs, =, parent, ., getFirstChild, (, ), ;, String, name, =, namer, ., getName, (, lhs, ), ;]
[parent, ., getFirstChild, (, ), ;, String, name, =, namer, ., getName, (, lhs, ), ;, namer, ., setFunctionName, (]
[getFirstChild, (, ), ;, String, name, =, namer, ., getName, (, lhs, ), ;, namer, ., setFunctionName, (, name, ,]
[namer, ., getName, (, lhs, ), ;, namer, ., setFunctionName, (, name, ,, n, ), ;, }, else, if, (]
[namer, ., getName, (, lhs, ), ;, namer, ., setFunctionName, (, name, ,, n, ), ;, }, else, if, (]
[(, name, ,, n, ), ;, }, else, if, (, parent, ., isName, (, ), ), {, String, name, =]
[(, name, ,, n, ), ;, }, else, if, (, parent, ., isName, (, ), ), {, String, name, =]
[), ;, }, else, if, (, parent, ., isName, (, ), ), {, String, name, =, namer, ., getName, (]
[else, if, (, parent, ., isName, (, ), ), {, String, name, =, namer, ., getName, (, parent, ), ;]
[else, if, (, parent, ., isName, (, ), ), {, String, name, =, namer, ., getName, (, parent, ), ;]
[., isName, (, ), ), {, String, name, =, namer, ., getName, (, parent, ), ;, namer, ., setFunctionName, (]
[(, ), ), {, String, name, =, namer, ., getName, (, parent, ), ;, namer, ., setFunctionName, (, name, ,]
[., getName, (, parent, ), ;, namer, ., setFunctionName, (, name, ,, n, ), ;, }, }, break, ;, case]
[., getName, (, parent, ), ;, namer, ., setFunctionName, (, name, ,, n, ), ;, }, }, break, ;, case]
[., setFunctionName, (, name, ,, n, ), ;, }, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =]
[., setFunctionName, (, name, ,, n, ), ;, }, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =]
[}, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[}, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (]
[Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (]
[), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, rhs, ., isObjectLit, (, ), ), {]
[Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, rhs, ., isObjectLit, (, ), ), {, nameObjectLiteralMethods, (]
[=, lhs, ., getNext, (, ), ;, if, (, rhs, ., isObjectLit, (, ), ), {, nameObjectLiteralMethods, (, rhs, ,]
[=, lhs, ., getNext, (, ), ;, if, (, rhs, ., isObjectLit, (, ), ), {, nameObjectLiteralMethods, (, rhs, ,]
[(, ), ;, if, (, rhs, ., isObjectLit, (, ), ), {, nameObjectLiteralMethods, (, rhs, ,, namer, ., getName, (]
[;, }, }, }, private, void, nameObjectLiteralMethods, (, Node, objectLiteral, ,, String, context, ), {, for, (, Node, keyNode, =]
[;, }, }, }, private, void, nameObjectLiteralMethods, (, Node, objectLiteral, ,, String, context, ), {, for, (, Node, keyNode, =]
[nameObjectLiteralMethods, (, Node, objectLiteral, ,, String, context, ), {, for, (, Node, keyNode, =, objectLiteral, ., getFirstChild, (, ), ;]
[nameObjectLiteralMethods, (, Node, objectLiteral, ,, String, context, ), {, for, (, Node, keyNode, =, objectLiteral, ., getFirstChild, (, ), ;]
[Node, objectLiteral, ,, String, context, ), {, for, (, Node, keyNode, =, objectLiteral, ., getFirstChild, (, ), ;, keyNode, !=]
[,, String, context, ), {, for, (, Node, keyNode, =, objectLiteral, ., getFirstChild, (, ), ;, keyNode, !=, null, ;]
[context, ), {, for, (, Node, keyNode, =, objectLiteral, ., getFirstChild, (, ), ;, keyNode, !=, null, ;, keyNode, =]
[context, ), {, for, (, Node, keyNode, =, objectLiteral, ., getFirstChild, (, ), ;, keyNode, !=, null, ;, keyNode, =]
[getFirstChild, (, ), ;, keyNode, !=, null, ;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, valueNode, =]
[getFirstChild, (, ), ;, keyNode, !=, null, ;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, valueNode, =]
[keyNode, =, keyNode, ., getNext, (, ), ), {, Node, valueNode, =, keyNode, ., getFirstChild, (, ), ;, if, (]
[keyNode, =, keyNode, ., getNext, (, ), ), {, Node, valueNode, =, keyNode, ., getFirstChild, (, ), ;, if, (]
[valueNode, =, keyNode, ., getFirstChild, (, ), ;, if, (, keyNode, ., isStringKey, (, ), ), {, String, name, =]
[valueNode, =, keyNode, ., getFirstChild, (, ), ;, if, (, keyNode, ., isStringKey, (, ), ), {, String, name, =]
[getFirstChild, (, ), ;, if, (, keyNode, ., isStringKey, (, ), ), {, String, name, =, namer, ., getCombinedName, (]
[), ;, if, (, keyNode, ., isStringKey, (, ), ), {, String, name, =, namer, ., getCombinedName, (, context, ,]
[), ;, if, (, keyNode, ., isStringKey, (, ), ), {, String, name, =, namer, ., getCombinedName, (, context, ,]
[keyNode, ., isStringKey, (, ), ), {, String, name, =, namer, ., getCombinedName, (, context, ,, namer, ., getName, (]
[String, name, =, namer, ., getCombinedName, (, context, ,, namer, ., getName, (, keyNode, ), ), ;, int, type, =]
[String, name, =, namer, ., getCombinedName, (, context, ,, namer, ., getName, (, keyNode, ), ), ;, int, type, =]
[,, namer, ., getName, (, keyNode, ), ), ;, int, type, =, valueNode, ., getType, (, ), ;, if, (]
[,, namer, ., getName, (, keyNode, ), ), ;, int, type, =, valueNode, ., getType, (, ), ;, if, (]
[., getName, (, keyNode, ), ), ;, int, type, =, valueNode, ., getType, (, ), ;, if, (, type, ==]
[., getName, (, keyNode, ), ), ;, int, type, =, valueNode, ., getType, (, ), ;, if, (, type, ==]
[type, =, valueNode, ., getType, (, ), ;, if, (, type, ==, Token, ., FUNCTION, ), {, Node, functionNameNode, =]
[type, =, valueNode, ., getType, (, ), ;, if, (, type, ==, Token, ., FUNCTION, ), {, Node, functionNameNode, =]
[(, type, ==, Token, ., FUNCTION, ), {, Node, functionNameNode, =, valueNode, ., getFirstChild, (, ), ;, String, functionName, =]
[(, type, ==, Token, ., FUNCTION, ), {, Node, functionNameNode, =, valueNode, ., getFirstChild, (, ), ;, String, functionName, =]
[Node, functionNameNode, =, valueNode, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (]
[Node, functionNameNode, =, valueNode, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (]
[), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (, functionName, ., isEmpty, (, ), ), {]
[), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (, functionName, ., isEmpty, (, ), ), {]
[=, functionNameNode, ., getString, (, ), ;, if, (, functionName, ., isEmpty, (, ), ), {, namer, ., setFunctionName, (]
[., getString, (, ), ;, if, (, functionName, ., isEmpty, (, ), ), {, namer, ., setFunctionName, (, name, ,]
[., isEmpty, (, ), ), {, namer, ., setFunctionName, (, name, ,, valueNode, ), ;, }, }, else, if, (]
[., isEmpty, (, ), ), {, namer, ., setFunctionName, (, name, ,, valueNode, ), ;, }, }, else, if, (]
[(, ), ), {, namer, ., setFunctionName, (, name, ,, valueNode, ), ;, }, }, else, if, (, type, ==]
[(, ), ), {, namer, ., setFunctionName, (, name, ,, valueNode, ), ;, }, }, else, if, (, type, ==]
[., setFunctionName, (, name, ,, valueNode, ), ;, }, }, else, if, (, type, ==, Token, ., OBJECTLIT, ), {]
[(, name, ,, valueNode, ), ;, }, }, else, if, (, type, ==, Token, ., OBJECTLIT, ), {, nameObjectLiteralMethods, (]
[,, valueNode, ), ;, }, }, else, if, (, type, ==, Token, ., OBJECTLIT, ), {, nameObjectLiteralMethods, (, valueNode, ,]
