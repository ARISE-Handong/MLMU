[long, instant, ,, long, value, ), ;, public, long, subtract, (, long, instant, ,, int, value, ), {, if, (]
[long, instant, ,, long, value, ), ;, public, long, subtract, (, long, instant, ,, int, value, ), {, if, (]
[,, long, value, ), ;, public, long, subtract, (, long, instant, ,, int, value, ), {, if, (, value, ==]
[,, long, value, ), ;, public, long, subtract, (, long, instant, ,, int, value, ), {, if, (, value, ==]
[long, subtract, (, long, instant, ,, int, value, ), {, if, (, value, ==, Integer, ., MIN_VALUE, ), {, return]
[(, long, instant, ,, int, value, ), {, if, (, value, ==, Integer, ., MIN_VALUE, ), {, return, subtract, (]
[instant, ,, int, value, ), {, if, (, value, ==, Integer, ., MIN_VALUE, ), {, return, subtract, (, instant, ,]
[value, ), {, if, (, value, ==, Integer, ., MIN_VALUE, ), {, return, subtract, (, instant, ,, (, long, )]
[value, ==, Integer, ., MIN_VALUE, ), {, return, subtract, (, instant, ,, (, long, ), value, ), ;, }, return]
[Integer, ., MIN_VALUE, ), {, return, subtract, (, instant, ,, (, long, ), value, ), ;, }, return, add, (]
[MIN_VALUE, ), {, return, subtract, (, instant, ,, (, long, ), value, ), ;, }, return, add, (, instant, ,]
[), {, return, subtract, (, instant, ,, (, long, ), value, ), ;, }, return, add, (, instant, ,, -]
[instant, ,, -, value, ), ;, }, public, long, subtract, (, long, instant, ,, long, value, ), {, if, (]
[instant, ,, -, value, ), ;, }, public, long, subtract, (, long, instant, ,, long, value, ), {, if, (]
[-, value, ), ;, }, public, long, subtract, (, long, instant, ,, long, value, ), {, if, (, value, ==]
[-, value, ), ;, }, public, long, subtract, (, long, instant, ,, long, value, ), {, if, (, value, ==]
[long, subtract, (, long, instant, ,, long, value, ), {, if, (, value, ==, Long, ., MIN_VALUE, ), {, throw]
[long, instant, ,, long, value, ), {, if, (, value, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (]
[), {, if, (, value, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Long.MIN_VALUE cannot be negated", ), ;, }, return]
[if, (, value, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Long.MIN_VALUE cannot be negated", ), ;, }, return, add, (]
[value, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Long.MIN_VALUE cannot be negated", ), ;, }, return, add, (, instant, ,]
[==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Long.MIN_VALUE cannot be negated", ), ;, }, return, add, (, instant, ,, -]
