[;, private, static, final, long, serialVersionUID, =, 8589540077390120676L, ;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (, 2]
[;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (, 2, *, FastMath, ., PI, ), ;, private, static]
[;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (, 2.0, ), ;, private, final, double, mean, ;, private]
[., sqrt, (, 2, *, FastMath, ., PI, ), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (]
[), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (, 2.0, ), ;, private, final, double, mean, ;]
[*, FastMath, ., PI, ), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (, 2.0, ), ;, private]
[), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (, 2.0, ), ;, private, final, double, mean, ;]
[., PI, ), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (, 2.0, ), ;, private, final, double]
[;, private, final, double, mean, ;, private, final, double, standardDeviation, ;, private, final, double, solverAbsoluteAccuracy, ;, public, NormalDistribution, (, )]
[., sqrt, (, 2.0, ), ;, private, final, double, mean, ;, private, final, double, standardDeviation, ;, private, final, double, solverAbsoluteAccuracy]
[), ;, private, final, double, mean, ;, private, final, double, standardDeviation, ;, private, final, double, solverAbsoluteAccuracy, ;, public, NormalDistribution, (]
[,, 1, ), ;, }, public, NormalDistribution, (, double, mean, ,, double, sd, ), throws, NotStrictlyPositiveException, {, this, (, mean]
[), ;, }, public, NormalDistribution, (, double, mean, ,, double, sd, ), throws, NotStrictlyPositiveException, {, this, (, mean, ,, sd]
[,, sd, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, NormalDistribution, (, double, mean, ,, double, sd, ,, double, inverseCumAccuracy, ), throws]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, NormalDistribution, (, double, mean, ,, double, sd, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {]
[), ;, }, public, NormalDistribution, (, double, mean, ,, double, sd, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[,, mean, ,, sd, ,, inverseCumAccuracy, ), ;, }, public, NormalDistribution, (, RandomGenerator, rng, ,, double, mean, ,, double, sd]
[,, sd, ,, inverseCumAccuracy, ), ;, }, public, NormalDistribution, (, RandomGenerator, rng, ,, double, mean, ,, double, sd, ,, double]
[,, inverseCumAccuracy, ), ;, }, public, NormalDistribution, (, RandomGenerator, rng, ,, double, mean, ,, double, sd, ,, double, inverseCumAccuracy, )]
[), ;, }, public, NormalDistribution, (, RandomGenerator, rng, ,, double, mean, ,, double, sd, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException]
[), ;, if, (, sd, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sd, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sd, ), ;, }, this, ., mean, =, mean, ;]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sd, ), ;, }, this, ., mean, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sd, ), ;, }, this, ., mean, =, mean, ;]
[;, }, this, ., mean, =, mean, ;, standardDeviation, =, sd, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean]
[,, sd, ), ;, }, this, ., mean, =, mean, ;, standardDeviation, =, sd, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }]
[., STANDARD_DEVIATION, ,, sd, ), ;, }, this, ., mean, =, mean, ;, standardDeviation, =, sd, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy]
[), ;, }, this, ., mean, =, mean, ;, standardDeviation, =, sd, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double]
[=, mean, ;, standardDeviation, =, sd, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return, mean]
[., mean, =, mean, ;, standardDeviation, =, sd, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {]
[;, standardDeviation, =, sd, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return, mean, ;, }]
[=, sd, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return, mean, ;, }, public, double]
[;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return, mean, ;, }, public, double, getStandardDeviation, (]
[=, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return, mean, ;, }, public, double, getStandardDeviation, (, ), {]
[;, }, public, double, getMean, (, ), {, return, mean, ;, }, public, double, getStandardDeviation, (, ), {, return, standardDeviation]
[;, }, public, double, getStandardDeviation, (, ), {, return, standardDeviation, ;, }, public, double, density, (, double, x, ), {]
[;, }, public, double, density, (, double, x, ), {, final, double, x0, =, x, -, mean, ;, final, double]
[;, final, double, x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1]
[-, mean, ;, final, double, x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (, -, 0.5, *, x1]
[;, final, double, x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1]
[;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (, standardDeviation, *, SQRT2PI, ), ;]
[/, standardDeviation, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (, standardDeviation, *, SQRT2PI]
[;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (, standardDeviation, *, SQRT2PI, ), ;]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =, x, -, mean, ;, if, (]
[/, (, standardDeviation, *, SQRT2PI, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =]
[., exp, (, -, 0.5, *, x1, *, x1, ), /, (, standardDeviation, *, SQRT2PI, ), ;, }, public, double]
[), /, (, standardDeviation, *, SQRT2PI, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev]
[*, x1, ), /, (, standardDeviation, *, SQRT2PI, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, final]
[*, x1, *, x1, ), /, (, standardDeviation, *, SQRT2PI, ), ;, }, public, double, cumulativeProbability, (, double, x, )]
[*, x1, *, x1, ), /, (, standardDeviation, *, SQRT2PI, ), ;, }, public, double, cumulativeProbability, (, double, x, )]
[*, x1, ), /, (, standardDeviation, *, SQRT2PI, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, final]
[), /, (, standardDeviation, *, SQRT2PI, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =, x, -, mean, ;, if, (]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =, x, -, mean, ;, if]
[*, SQRT2PI, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =, x, -, mean]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =, x, -, mean, ;, if]
[;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, standardDeviation, ), {, return, dev, <, 0, ?]
[-, mean, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, standardDeviation, ), {, return, dev, <]
[;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, standardDeviation, ), {, return, dev, <, 0, ?]
[), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, .]
[>, 40, *, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (]
[., abs, (, dev, ), >, 40, *, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;]
[), >, 40, *, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *]
[), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, .]
[*, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +]
[), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, .]
[;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (, dev, /, (, standardDeviation, *, SQRT2, ), )]
[?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (, dev, /, (, standardDeviation]
[<, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (, dev, /]
[?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (, dev, /, (, standardDeviation]
[:, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (, dev, /, (, standardDeviation, *, SQRT2]
[;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (, dev, /, (, standardDeviation, *, SQRT2, ), )]
[;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0]
[*, (, 1, +, Erf, ., erf, (, dev, /, (, standardDeviation, *, SQRT2, ), ), ), ;, }, @]
[;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <]
[+, Erf, ., erf, (, dev, /, (, standardDeviation, *, SQRT2, ), ), ), ;, }, @, Override, public, double]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <]
[., erf, (, dev, /, (, standardDeviation, *, SQRT2, ), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (]
[), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p]
[/, (, standardDeviation, *, SQRT2, ), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, )]
[), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p]
[), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[*, SQRT2, ), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {]
[), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean]
[<, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2]
[>, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2]
[;, }, return, mean, +, standardDeviation, *, SQRT2, *, Erf, ., erfInv, (, 2, *, p, -, 1, ), ;]
[,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2, *, Erf, ., erfInv, (, 2, *]
[,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2, *, Erf, ., erfInv, (, 2, *, p, -]
[), ;, }, return, mean, +, standardDeviation, *, SQRT2, *, Erf, ., erfInv, (, 2, *, p, -, 1, )]
[;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[+, standardDeviation, *, SQRT2, *, Erf, ., erfInv, (, 2, *, p, -, 1, ), ;, }, @, Override, @]
[;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[*, Erf, ., erfInv, (, 2, *, p, -, 1, ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability]
[*, SQRT2, *, Erf, ., erfInv, (, 2, *, p, -, 1, ), ;, }, @, Override, @, Deprecated, public]
[*, Erf, ., erfInv, (, 2, *, p, -, 1, ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability]
[;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[., erfInv, (, 2, *, p, -, 1, ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double]
[), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {]
[-, 1, ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws]
[*, p, -, 1, ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1]
[-, 1, ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws]
[), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {]
[;, }, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (, x0]
[,, x1, ), ;, }, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {]
[), ;, }, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, final, double]
[>, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, final, double]
[;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final, double, v0, =, (, x0, -, mean, ), /]
[,, x0, ,, x1, ,, true, ), ;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final, double, v0]
[., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final]
[,, x1, ,, true, ), ;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final, double, v0, =, (]
[,, true, ), ;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final, double, v0, =, (, x0, -]
[), ;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final, double, v0, =, (, x0, -, mean, )]
[;, final, double, v0, =, (, x0, -, mean, ), /, denom, ;, final, double, v1, =, (, x1, -]
[*, SQRT2, ;, final, double, v0, =, (, x0, -, mean, ), /, denom, ;, final, double, v1, =, (]
[;, final, double, v0, =, (, x0, -, mean, ), /, denom, ;, final, double, v1, =, (, x1, -]
[;, final, double, v1, =, (, x1, -, mean, ), /, denom, ;, return, 0.5, *, Erf, ., erf, (]
[/, denom, ;, final, double, v1, =, (, x1, -, mean, ), /, denom, ;, return, 0.5, *, Erf, .]
[), /, denom, ;, final, double, v1, =, (, x1, -, mean, ), /, denom, ;, return, 0.5, *, Erf]
[-, mean, ), /, denom, ;, final, double, v1, =, (, x1, -, mean, ), /, denom, ;, return, 0.5]
[), /, denom, ;, final, double, v1, =, (, x1, -, mean, ), /, denom, ;, return, 0.5, *, Erf]
[;, final, double, v1, =, (, x1, -, mean, ), /, denom, ;, return, 0.5, *, Erf, ., erf, (]
[;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (]
[/, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double]
[), /, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected]
[-, mean, ), /, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @]
[), /, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected]
[;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[*, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;]
[,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean]
[), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, )]
[;, }, public, double, getNumericalMean, (, ), {, return, getMean, (, ), ;, }, public, double, getNumericalVariance, (, ), {]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, getStandardDeviation, (, ), ;, return, s, *, s]
[;, return, s, *, s, ;, }, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public]
[;, }, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {]
[*, s, ;, }, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (]
[;, }, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {]
[;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {]
[., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false]
[., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {]
[;, }, @, Override, public, double, sample, (, ), {, return, standardDeviation, *, random, ., nextGaussian, (, ), +, mean]
[;, }, }]
[+, mean, ;, }, }]
[*, random, ., nextGaussian, (, ), +, mean, ;, }, }]
[+, mean, ;, }, }]
[., nextGaussian, (, ), +, mean, ;, }, }]
[;, }, }]
