[;, private, static, final, int, [, ], WEIGHTS, =, new, int, [, ], {, 1, ,, 2, ,, 3, ,]
[;, private, static, final, int, [, ], WEIGHTS, =, new, int, [, ], {, 1, ,, 2, ,, 3, ,]
[,, 3, ,, 5, ,, 7, ,, 11, ,, 13, ,, 17, ,, 19, ,, 23, ,, 29, ,, 31]
[,, 5, ,, 7, ,, 11, ,, 13, ,, 17, ,, 19, ,, 23, ,, 29, ,, 31, ,, 37]
[,, 7, ,, 11, ,, 13, ,, 17, ,, 19, ,, 23, ,, 29, ,, 31, ,, 37, ,, 41]
[,, 11, ,, 13, ,, 17, ,, 19, ,, 23, ,, 29, ,, 31, ,, 37, ,, 41, ,, 43]
[,, 13, ,, 17, ,, 19, ,, 23, ,, 29, ,, 31, ,, 37, ,, 41, ,, 43, ,, 47]
[,, 17, ,, 19, ,, 23, ,, 29, ,, 31, ,, 37, ,, 41, ,, 43, ,, 47, ,, 53]
[,, 19, ,, 23, ,, 29, ,, 31, ,, 37, ,, 41, ,, 43, ,, 47, ,, 53, ,, 59]
[,, 23, ,, 29, ,, 31, ,, 37, ,, 41, ,, 43, ,, 47, ,, 53, ,, 59, ,, 61]
[,, 29, ,, 31, ,, 37, ,, 41, ,, 43, ,, 47, ,, 53, ,, 59, ,, 61, ,, 67]
[,, 31, ,, 37, ,, 41, ,, 43, ,, 47, ,, 53, ,, 59, ,, 61, ,, 67, ,, 71]
[,, 37, ,, 41, ,, 43, ,, 47, ,, 53, ,, 59, ,, 61, ,, 67, ,, 71, ,, 73]
[,, 41, ,, 43, ,, 47, ,, 53, ,, 59, ,, 61, ,, 67, ,, 71, ,, 73, ,, 79]
[,, 43, ,, 47, ,, 53, ,, 59, ,, 61, ,, 67, ,, 71, ,, 73, ,, 79, ,, 83]
[,, 47, ,, 53, ,, 59, ,, 61, ,, 67, ,, 71, ,, 73, ,, 79, ,, 83, ,, 89]
[,, 53, ,, 59, ,, 61, ,, 67, ,, 71, ,, 73, ,, 79, ,, 83, ,, 89, ,, 97]
[,, 59, ,, 61, ,, 67, ,, 71, ,, 73, ,, 79, ,, 83, ,, 89, ,, 97, ,, 101]
[,, 61, ,, 67, ,, 71, ,, 73, ,, 79, ,, 83, ,, 89, ,, 97, ,, 101, ,, 103]
[,, 67, ,, 71, ,, 73, ,, 79, ,, 83, ,, 89, ,, 97, ,, 101, ,, 103, ,, 107]
[,, 71, ,, 73, ,, 79, ,, 83, ,, 89, ,, 97, ,, 101, ,, 103, ,, 107, ,, 109]
[,, 73, ,, 79, ,, 83, ,, 89, ,, 97, ,, 101, ,, 103, ,, 107, ,, 109, ,, 113]
[,, 79, ,, 83, ,, 89, ,, 97, ,, 101, ,, 103, ,, 107, ,, 109, ,, 113, ,, 127]
[,, 83, ,, 89, ,, 97, ,, 101, ,, 103, ,, 107, ,, 109, ,, 113, ,, 127, ,, 131]
[,, 89, ,, 97, ,, 101, ,, 103, ,, 107, ,, 109, ,, 113, ,, 127, ,, 131, ,, 137]
[,, 97, ,, 101, ,, 103, ,, 107, ,, 109, ,, 113, ,, 127, ,, 131, ,, 137, ,, 139]
[,, 101, ,, 103, ,, 107, ,, 109, ,, 113, ,, 127, ,, 131, ,, 137, ,, 139, ,, 149]
[,, 103, ,, 107, ,, 109, ,, 113, ,, 127, ,, 131, ,, 137, ,, 139, ,, 149, ,, 151]
[,, 107, ,, 109, ,, 113, ,, 127, ,, 131, ,, 137, ,, 139, ,, 149, ,, 151, ,, 157]
[,, 109, ,, 113, ,, 127, ,, 131, ,, 137, ,, 139, ,, 149, ,, 151, ,, 157, ,, 163]
[,, 113, ,, 127, ,, 131, ,, 137, ,, 139, ,, 149, ,, 151, ,, 157, ,, 163, ,, 167]
[,, 127, ,, 131, ,, 137, ,, 139, ,, 149, ,, 151, ,, 157, ,, 163, ,, 167, ,, 173]
[,, 131, ,, 137, ,, 139, ,, 149, ,, 151, ,, 157, ,, 163, ,, 167, ,, 173, }, ;]
[,, 137, ,, 139, ,, 149, ,, 151, ,, 157, ,, 163, ,, 167, ,, 173, }, ;, private, static]
[,, 139, ,, 149, ,, 151, ,, 157, ,, 163, ,, 167, ,, 173, }, ;, private, static, final, int]
[,, 149, ,, 151, ,, 157, ,, 163, ,, 167, ,, 173, }, ;, private, static, final, int, [, ]]
[,, 151, ,, 157, ,, 163, ,, 167, ,, 173, }, ;, private, static, final, int, [, ], WEIGHTS, =]
[,, 157, ,, 163, ,, 167, ,, 173, }, ;, private, static, final, int, [, ], WEIGHTS, =, new, int]
[,, 163, ,, 167, ,, 173, }, ;, private, static, final, int, [, ], WEIGHTS, =, new, int, [, ]]
[,, 167, ,, 173, }, ;, private, static, final, int, [, ], WEIGHTS, =, new, int, [, ], {, 1]
[,, 173, }, ;, private, static, final, int, [, ], WEIGHTS, =, new, int, [, ], {, 1, ,, 2]
[}, ;, private, static, final, int, [, ], WEIGHTS, =, new, int, [, ], {, 1, ,, 2, ,, 3]
[;, private, final, int, dimension, ;, private, int, count, =, 0, ;, private, final, int, [, ], base, ;, private]
[;, private, final, int, dimension, ;, private, int, count, =, 0, ;, private, final, int, [, ], base, ;, private]
[,, 2, ,, 3, ,, 3, ,, 8, ,, 11, ,, 12, ,, 14, ,, 7, ,, 18, ,, 12]
[,, 3, ,, 3, ,, 8, ,, 11, ,, 12, ,, 14, ,, 7, ,, 18, ,, 12, ,, 13]
[,, 3, ,, 8, ,, 11, ,, 12, ,, 14, ,, 7, ,, 18, ,, 12, ,, 13, ,, 17]
[,, 8, ,, 11, ,, 12, ,, 14, ,, 7, ,, 18, ,, 12, ,, 13, ,, 17, ,, 18]
[,, 11, ,, 12, ,, 14, ,, 7, ,, 18, ,, 12, ,, 13, ,, 17, ,, 18, ,, 29]
[,, 12, ,, 14, ,, 7, ,, 18, ,, 12, ,, 13, ,, 17, ,, 18, ,, 29, ,, 14]
[,, 14, ,, 7, ,, 18, ,, 12, ,, 13, ,, 17, ,, 18, ,, 29, ,, 14, ,, 18]
[,, 7, ,, 18, ,, 12, ,, 13, ,, 17, ,, 18, ,, 29, ,, 14, ,, 18, ,, 43]
[,, 18, ,, 12, ,, 13, ,, 17, ,, 18, ,, 29, ,, 14, ,, 18, ,, 43, ,, 41]
[,, 12, ,, 13, ,, 17, ,, 18, ,, 29, ,, 14, ,, 18, ,, 43, ,, 41, ,, 44]
[,, 13, ,, 17, ,, 18, ,, 29, ,, 14, ,, 18, ,, 43, ,, 41, ,, 44, ,, 40]
[,, 17, ,, 18, ,, 29, ,, 14, ,, 18, ,, 43, ,, 41, ,, 44, ,, 40, ,, 30]
[,, 18, ,, 29, ,, 14, ,, 18, ,, 43, ,, 41, ,, 44, ,, 40, ,, 30, ,, 47]
[,, 29, ,, 14, ,, 18, ,, 43, ,, 41, ,, 44, ,, 40, ,, 30, ,, 47, ,, 65]
[,, 14, ,, 18, ,, 43, ,, 41, ,, 44, ,, 40, ,, 30, ,, 47, ,, 65, ,, 71]
[,, 18, ,, 43, ,, 41, ,, 44, ,, 40, ,, 30, ,, 47, ,, 65, ,, 71, ,, 28]
[,, 43, ,, 41, ,, 44, ,, 40, ,, 30, ,, 47, ,, 65, ,, 71, ,, 28, ,, 40]
[,, 41, ,, 44, ,, 40, ,, 30, ,, 47, ,, 65, ,, 71, ,, 28, ,, 40, ,, 60]
[,, 44, ,, 40, ,, 30, ,, 47, ,, 65, ,, 71, ,, 28, ,, 40, ,, 60, ,, 79]
[,, 40, ,, 30, ,, 47, ,, 65, ,, 71, ,, 28, ,, 40, ,, 60, ,, 79, ,, 89]
[,, 30, ,, 47, ,, 65, ,, 71, ,, 28, ,, 40, ,, 60, ,, 79, ,, 89, ,, 56]
[,, 47, ,, 65, ,, 71, ,, 28, ,, 40, ,, 60, ,, 79, ,, 89, ,, 56, ,, 50]
[,, 65, ,, 71, ,, 28, ,, 40, ,, 60, ,, 79, ,, 89, ,, 56, ,, 50, ,, 52]
[,, 71, ,, 28, ,, 40, ,, 60, ,, 79, ,, 89, ,, 56, ,, 50, ,, 52, ,, 61]
[,, 28, ,, 40, ,, 60, ,, 79, ,, 89, ,, 56, ,, 50, ,, 52, ,, 61, ,, 108]
[,, 40, ,, 60, ,, 79, ,, 89, ,, 56, ,, 50, ,, 52, ,, 61, ,, 108, ,, 56]
[,, 60, ,, 79, ,, 89, ,, 56, ,, 50, ,, 52, ,, 61, ,, 108, ,, 56, ,, 66]
[,, 79, ,, 89, ,, 56, ,, 50, ,, 52, ,, 61, ,, 108, ,, 56, ,, 66, ,, 63]
[,, 89, ,, 56, ,, 50, ,, 52, ,, 61, ,, 108, ,, 56, ,, 66, ,, 63, ,, 60]
[,, 56, ,, 50, ,, 52, ,, 61, ,, 108, ,, 56, ,, 66, ,, 63, ,, 60, ,, 66]
[,, 50, ,, 52, ,, 61, ,, 108, ,, 56, ,, 66, ,, 63, ,, 60, ,, 66, }, ;]
[,, 52, ,, 61, ,, 108, ,, 56, ,, 66, ,, 63, ,, 60, ,, 66, }, ;, private, final]
[,, 61, ,, 108, ,, 56, ,, 66, ,, 63, ,, 60, ,, 66, }, ;, private, final, int, dimension]
[,, 108, ,, 56, ,, 66, ,, 63, ,, 60, ,, 66, }, ;, private, final, int, dimension, ;, private]
[,, 56, ,, 66, ,, 63, ,, 60, ,, 66, }, ;, private, final, int, dimension, ;, private, int, count]
[,, 66, ,, 63, ,, 60, ,, 66, }, ;, private, final, int, dimension, ;, private, int, count, =, 0]
[,, 63, ,, 60, ,, 66, }, ;, private, final, int, dimension, ;, private, int, count, =, 0, ;, private]
[,, 60, ,, 66, }, ;, private, final, int, dimension, ;, private, int, count, =, 0, ;, private, final, int]
[,, 66, }, ;, private, final, int, dimension, ;, private, int, count, =, 0, ;, private, final, int, [, ]]
[}, ;, private, final, int, dimension, ;, private, int, count, =, 0, ;, private, final, int, [, ], base, ;]
[;, private, final, int, [, ], base, ;, private, final, int, [, ], weight, ;, public, HaltonSequenceGenerator, (, final, int]
[,, PRIMES, ,, WEIGHTS, ), ;, }, public, HaltonSequenceGenerator, (, final, int, dimension, ,, final, int, [, ], bases, ,]
[,, WEIGHTS, ), ;, }, public, HaltonSequenceGenerator, (, final, int, dimension, ,, final, int, [, ], bases, ,, final, int]
[), ;, }, public, HaltonSequenceGenerator, (, final, int, dimension, ,, final, int, [, ], bases, ,, final, int, [, ]]
[;, if, (, dimension, <, 1, ||, dimension, >, bases, ., length, ), {, throw, new, OutOfRangeException, (, dimension, ,]
[., checkNotNull, (, bases, ), ;, if, (, dimension, <, 1, ||, dimension, >, bases, ., length, ), {, throw]
[), ;, if, (, dimension, <, 1, ||, dimension, >, bases, ., length, ), {, throw, new, OutOfRangeException, (, dimension]
[), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (, weights, !=]
[||, dimension, >, bases, ., length, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, )]
[<, 1, ||, dimension, >, bases, ., length, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, .]
[||, dimension, >, bases, ., length, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, )]
[), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (, weights, !=]
[>, bases, ., length, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }]
[), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (, weights, !=]
[., length, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (]
[;, }, if, (, weights, !=, null, &&, weights, ., length, !=, bases, ., length, ), {, throw, new, DimensionMismatchException]
[,, 1, ,, PRIMES, ., length, ), ;, }, if, (, weights, !=, null, &&, weights, ., length, !=, bases]
[,, PRIMES, ., length, ), ;, }, if, (, weights, !=, null, &&, weights, ., length, !=, bases, ., length]
[), ;, }, if, (, weights, !=, null, &&, weights, ., length, !=, bases, ., length, ), {, throw, new]
[., length, ), ;, }, if, (, weights, !=, null, &&, weights, ., length, !=, bases, ., length, ), {]
[), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, ., length, ), ;, }, this, ., dimension, =]
[&&, weights, ., length, !=, bases, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, .]
[!=, null, &&, weights, ., length, !=, bases, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,]
[&&, weights, ., length, !=, bases, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, .]
[), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, ., length, ), ;, }, this, ., dimension, =]
[!=, bases, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, ., length, ), ;, }]
[., length, !=, bases, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, ., length, )]
[), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, ., length, ), ;, }, this, ., dimension, =]
[., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, ., length, ), ;, }, this, .]
[;, }, this, ., dimension, =, dimension, ;, this, ., base, =, bases, ., clone, (, ), ;, this, .]
[,, bases, ., length, ), ;, }, this, ., dimension, =, dimension, ;, this, ., base, =, bases, ., clone]
[., length, ,, bases, ., length, ), ;, }, this, ., dimension, =, dimension, ;, this, ., base, =, bases]
[), ;, }, this, ., dimension, =, dimension, ;, this, ., base, =, bases, ., clone, (, ), ;, this]
[., length, ), ;, }, this, ., dimension, =, dimension, ;, this, ., base, =, bases, ., clone, (, )]
[=, dimension, ;, this, ., base, =, bases, ., clone, (, ), ;, this, ., weight, =, weights, ==, null]
[., dimension, =, dimension, ;, this, ., base, =, bases, ., clone, (, ), ;, this, ., weight, =, weights]
[;, this, ., base, =, bases, ., clone, (, ), ;, this, ., weight, =, weights, ==, null, ?, null]
[=, bases, ., clone, (, ), ;, this, ., weight, =, weights, ==, null, ?, null, :, weights, ., clone]
[., base, =, bases, ., clone, (, ), ;, this, ., weight, =, weights, ==, null, ?, null, :, weights]
[;, this, ., weight, =, weights, ==, null, ?, null, :, weights, ., clone, (, ), ;, count, =, 0]
[., clone, (, ), ;, this, ., weight, =, weights, ==, null, ?, null, :, weights, ., clone, (, )]
[=, weights, ==, null, ?, null, :, weights, ., clone, (, ), ;, count, =, 0, ;, }, public, double]
[., weight, =, weights, ==, null, ?, null, :, weights, ., clone, (, ), ;, count, =, 0, ;, }]
[;, count, =, 0, ;, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =]
[?, null, :, weights, ., clone, (, ), ;, count, =, 0, ;, }, public, double, [, ], nextVector, (]
[==, null, ?, null, :, weights, ., clone, (, ), ;, count, =, 0, ;, }, public, double, [, ]]
[?, null, :, weights, ., clone, (, ), ;, count, =, 0, ;, }, public, double, [, ], nextVector, (]
[:, weights, ., clone, (, ), ;, count, =, 0, ;, }, public, double, [, ], nextVector, (, ), {]
[;, count, =, 0, ;, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =]
[., clone, (, ), ;, count, =, 0, ;, }, public, double, [, ], nextVector, (, ), {, final, double]
[=, 0, ;, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =, new, double]
[;, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =, new, double, [, dimension]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, int, index, =, count]
[], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, int, index, =]
[;, i, <, dimension, ;, i, ++, ), {, int, index, =, count, ;, double, f, =, 1.0, /, base]
[;, i, ++, ), {, int, index, =, count, ;, double, f, =, 1.0, /, base, [, i, ], ;]
[<, dimension, ;, i, ++, ), {, int, index, =, count, ;, double, f, =, 1.0, /, base, [, i]
[;, i, ++, ), {, int, index, =, count, ;, double, f, =, 1.0, /, base, [, i, ], ;]
[), {, int, index, =, count, ;, double, f, =, 1.0, /, base, [, i, ], ;, int, j, =]
[++, ), {, int, index, =, count, ;, double, f, =, 1.0, /, base, [, i, ], ;, int, j]
[;, double, f, =, 1.0, /, base, [, i, ], ;, int, j, =, 0, ;, while, (, index, >]
[;, int, j, =, 0, ;, while, (, index, >, 0, ), {, final, int, digit, =, scramble, (, i]
[/, base, [, i, ], ;, int, j, =, 0, ;, while, (, index, >, 0, ), {, final, int]
[;, int, j, =, 0, ;, while, (, index, >, 0, ), {, final, int, digit, =, scramble, (, i]
[[, i, ], ;, int, j, =, 0, ;, while, (, index, >, 0, ), {, final, int, digit, =]
[], ;, int, j, =, 0, ;, while, (, index, >, 0, ), {, final, int, digit, =, scramble, (]
[;, while, (, index, >, 0, ), {, final, int, digit, =, scramble, (, i, ,, j, ,, base, []
[), {, final, int, digit, =, scramble, (, i, ,, j, ,, base, [, i, ], ,, index, %, base]
[>, 0, ), {, final, int, digit, =, scramble, (, i, ,, j, ,, base, [, i, ], ,, index]
[), {, final, int, digit, =, scramble, (, i, ,, j, ,, base, [, i, ], ,, index, %, base]
[;, v, [, i, ], +=, f, *, digit, ;, index, /=, base, [, i, ], ;, f, /=, base]
[,, j, ,, base, [, i, ], ,, index, %, base, [, i, ], ), ;, v, [, i, ]]
[,, base, [, i, ], ,, index, %, base, [, i, ], ), ;, v, [, i, ], +=, f]
[,, index, %, base, [, i, ], ), ;, v, [, i, ], +=, f, *, digit, ;, index, /=]
[[, i, ], ,, index, %, base, [, i, ], ), ;, v, [, i, ], +=, f, *, digit]
[], ,, index, %, base, [, i, ], ), ;, v, [, i, ], +=, f, *, digit, ;, index]
[), ;, v, [, i, ], +=, f, *, digit, ;, index, /=, base, [, i, ], ;, f, /=]
[%, base, [, i, ], ), ;, v, [, i, ], +=, f, *, digit, ;, index, /=, base, []
[), ;, v, [, i, ], +=, f, *, digit, ;, index, /=, base, [, i, ], ;, f, /=]
[[, i, ], ), ;, v, [, i, ], +=, f, *, digit, ;, index, /=, base, [, i, ]]
[], ), ;, v, [, i, ], +=, f, *, digit, ;, index, /=, base, [, i, ], ;, f]
[+=, f, *, digit, ;, index, /=, base, [, i, ], ;, f, /=, base, [, i, ], ;, }]
[[, i, ], +=, f, *, digit, ;, index, /=, base, [, i, ], ;, f, /=, base, [, i]
[], +=, f, *, digit, ;, index, /=, base, [, i, ], ;, f, /=, base, [, i, ], ;]
[;, index, /=, base, [, i, ], ;, f, /=, base, [, i, ], ;, }, }, count, ++, ;]
[*, digit, ;, index, /=, base, [, i, ], ;, f, /=, base, [, i, ], ;, }, }, count]
[;, index, /=, base, [, i, ], ;, f, /=, base, [, i, ], ;, }, }, count, ++, ;]
[/=, base, [, i, ], ;, f, /=, base, [, i, ], ;, }, }, count, ++, ;, return, v]
[;, f, /=, base, [, i, ], ;, }, }, count, ++, ;, return, v, ;, }, protected, int, scramble]
[[, i, ], ;, f, /=, base, [, i, ], ;, }, }, count, ++, ;, return, v, ;, }]
[], ;, f, /=, base, [, i, ], ;, }, }, count, ++, ;, return, v, ;, }, protected, int]
[/=, base, [, i, ], ;, }, }, count, ++, ;, return, v, ;, }, protected, int, scramble, (, final]
[;, }, }, count, ++, ;, return, v, ;, }, protected, int, scramble, (, final, int, i, ,, final, int]
[[, i, ], ;, }, }, count, ++, ;, return, v, ;, }, protected, int, scramble, (, final, int, i]
[], ;, }, }, count, ++, ;, return, v, ;, }, protected, int, scramble, (, final, int, i, ,, final]
[;, return, v, ;, }, protected, int, scramble, (, final, int, i, ,, final, int, j, ,, final, int, b]
[++, ;, return, v, ;, }, protected, int, scramble, (, final, int, i, ,, final, int, j, ,, final, int]
[;, }, protected, int, scramble, (, final, int, i, ,, final, int, j, ,, final, int, b, ,, final, int]
[;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, count, =, index, ;, return]
[?, (, weight, [, i, ], *, digit, ), %, b, :, digit, ;, }, public, double, [, ], skipTo]
[!=, null, ?, (, weight, [, i, ], *, digit, ), %, b, :, digit, ;, }, public, double, []
[?, (, weight, [, i, ], *, digit, ), %, b, :, digit, ;, }, public, double, [, ], skipTo]
[:, digit, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, count, =, index]
[%, b, :, digit, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, count]
[), %, b, :, digit, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {]
[*, digit, ), %, b, :, digit, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws]
[[, i, ], *, digit, ), %, b, :, digit, ;, }, public, double, [, ], skipTo, (, final, int]
[], *, digit, ), %, b, :, digit, ;, }, public, double, [, ], skipTo, (, final, int, index, )]
[), %, b, :, digit, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {]
[:, digit, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, count, =, index]
[;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, count, =, index, ;, return]
[=, index, ;, return, nextVector, (, ), ;, }, public, int, getNextIndex, (, ), {, return, count, ;, }, }]
[;, return, nextVector, (, ), ;, }, public, int, getNextIndex, (, ), {, return, count, ;, }, }]
[;, }, public, int, getNextIndex, (, ), {, return, count, ;, }, }]
[;, }, }]
