[;, static, final, AtomicReference, <, long, [, ], [, ], >, STIRLING_S2, =, new, AtomicReference, <, long, [, ], []
[;, static, final, AtomicReference, <, long, [, ], [, ], >, STIRLING_S2, =, new, AtomicReference, <, long, [, ], []
[,, 1l, ,, 2l, ,, 6l, ,, 24l, ,, 120l, ,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l]
[,, 2l, ,, 6l, ,, 24l, ,, 120l, ,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l]
[,, 6l, ,, 24l, ,, 120l, ,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l]
[,, 24l, ,, 120l, ,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l]
[,, 120l, ,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l]
[,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l]
[,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l]
[,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l, ,, 355687428096000l]
[,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l, ,, 355687428096000l, ,, 6402373705728000l]
[,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l, ,, 355687428096000l, ,, 6402373705728000l, ,, 121645100408832000l]
[,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l, ,, 355687428096000l, ,, 6402373705728000l, ,, 121645100408832000l, ,, 2432902008176640000l]
[,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l, ,, 355687428096000l, ,, 6402373705728000l, ,, 121645100408832000l, ,, 2432902008176640000l, }, ;]
[,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l, ,, 355687428096000l, ,, 6402373705728000l, ,, 121645100408832000l, ,, 2432902008176640000l, }, ;, static, final]
[,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l, ,, 355687428096000l, ,, 6402373705728000l, ,, 121645100408832000l, ,, 2432902008176640000l, }, ;, static, final, AtomicReference, <]
[,, 1307674368000l, ,, 20922789888000l, ,, 355687428096000l, ,, 6402373705728000l, ,, 121645100408832000l, ,, 2432902008176640000l, }, ;, static, final, AtomicReference, <, long, []
[,, 20922789888000l, ,, 355687428096000l, ,, 6402373705728000l, ,, 121645100408832000l, ,, 2432902008176640000l, }, ;, static, final, AtomicReference, <, long, [, ], []
[,, 355687428096000l, ,, 6402373705728000l, ,, 121645100408832000l, ,, 2432902008176640000l, }, ;, static, final, AtomicReference, <, long, [, ], [, ], >]
[,, 6402373705728000l, ,, 121645100408832000l, ,, 2432902008176640000l, }, ;, static, final, AtomicReference, <, long, [, ], [, ], >, STIRLING_S2, =]
[,, 121645100408832000l, ,, 2432902008176640000l, }, ;, static, final, AtomicReference, <, long, [, ], [, ], >, STIRLING_S2, =, new, AtomicReference]
[,, 2432902008176640000l, }, ;, static, final, AtomicReference, <, long, [, ], [, ], >, STIRLING_S2, =, new, AtomicReference, <, long]
[}, ;, static, final, AtomicReference, <, long, [, ], [, ], >, STIRLING_S2, =, new, AtomicReference, <, long, [, ]]
[;, private, CombinatoricsUtils, (, ), {, super, (, ), ;, }, public, static, long, binomialCoefficient, (, final, int, n, ,]
[), ;, private, CombinatoricsUtils, (, ), {, super, (, ), ;, }, public, static, long, binomialCoefficient, (, final, int, n]
[;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1, ;, }]
[., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0]
[,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return]
[), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1, ;]
[), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1]
[||, (, k, ==, 0, ), ), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||]
[), ||, (, k, ==, 0, ), ), {, return, 1, ;, }, if, (, (, k, ==, 1, )]
[==, k, ), ||, (, k, ==, 0, ), ), {, return, 1, ;, }, if, (, (, k, ==]
[), ||, (, k, ==, 0, ), ), {, return, 1, ;, }, if, (, (, k, ==, 1, )]
[), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1]
[), ), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -]
[==, 0, ), ), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==]
[), ), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -]
[;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return]
[), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficient, (, n, ,]
[||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n, /]
[), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n]
[==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k]
[), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n]
[), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficient, (, n, ,]
[), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficient, (, n]
[==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {]
[), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficient, (, n]
[-, 1, ), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficient]
[), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficient, (, n]
[;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficient, (, n, ,, n, -, k, )]
[), {, return, binomialCoefficient, (, n, ,, n, -, k, ), ;, }, long, result, =, 1, ;, if, (]
[>, n, /, 2, ), {, return, binomialCoefficient, (, n, ,, n, -, k, ), ;, }, long, result, =]
[), {, return, binomialCoefficient, (, n, ,, n, -, k, ), ;, }, long, result, =, 1, ;, if, (]
[/, 2, ), {, return, binomialCoefficient, (, n, ,, n, -, k, ), ;, }, long, result, =, 1, ;]
[), {, return, binomialCoefficient, (, n, ,, n, -, k, ), ;, }, long, result, =, 1, ;, if, (]
[;, }, long, result, =, 1, ;, if, (, n, <=, 61, ), {, int, i, =, n, -, k]
[,, n, -, k, ), ;, }, long, result, =, 1, ;, if, (, n, <=, 61, ), {, int]
[), ;, }, long, result, =, 1, ;, if, (, n, <=, 61, ), {, int, i, =, n, -]
[-, k, ), ;, }, long, result, =, 1, ;, if, (, n, <=, 61, ), {, int, i, =]
[), ;, }, long, result, =, 1, ;, if, (, n, <=, 61, ), {, int, i, =, n, -]
[;, if, (, n, <=, 61, ), {, int, i, =, n, -, k, +, 1, ;, for, (, int]
[), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=]
[<=, 61, ), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;]
[), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, result, =, result, *]
[+, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, result, =]
[-, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {]
[+, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, result, =]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, result, =, result, *]
[;, j, <=, k, ;, j, ++, ), {, result, =, result, *, i, /, j, ;, i, ++, ;]
[;, j, ++, ), {, result, =, result, *, i, /, j, ;, i, ++, ;, }, }, else, if]
[<=, k, ;, j, ++, ), {, result, =, result, *, i, /, j, ;, i, ++, ;, }, }]
[;, j, ++, ), {, result, =, result, *, i, /, j, ;, i, ++, ;, }, }, else, if]
[), {, result, =, result, *, i, /, j, ;, i, ++, ;, }, }, else, if, (, n, <=]
[++, ), {, result, =, result, *, i, /, j, ;, i, ++, ;, }, }, else, if, (, n]
[=, result, *, i, /, j, ;, i, ++, ;, }, }, else, if, (, n, <=, 66, ), {]
[;, i, ++, ;, }, }, else, if, (, n, <=, 66, ), {, int, i, =, n, -, k]
[/, j, ;, i, ++, ;, }, }, else, if, (, n, <=, 66, ), {, int, i, =, n]
[*, i, /, j, ;, i, ++, ;, }, }, else, if, (, n, <=, 66, ), {, int, i]
[/, j, ;, i, ++, ;, }, }, else, if, (, n, <=, 66, ), {, int, i, =, n]
[;, i, ++, ;, }, }, else, if, (, n, <=, 66, ), {, int, i, =, n, -, k]
[;, }, }, else, if, (, n, <=, 66, ), {, int, i, =, n, -, k, +, 1, ;]
[++, ;, }, }, else, if, (, n, <=, 66, ), {, int, i, =, n, -, k, +, 1]
[), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=]
[<=, 66, ), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;]
[), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =]
[+, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long]
[-, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {]
[+, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =]
[;, j, <=, k, ;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j]
[;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =]
[<=, k, ;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;]
[;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =]
[), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, (, result, /]
[++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, (, result]
[;, result, =, (, result, /, (, j, /, d, ), ), *, (, i, /, d, ), ;, i]
[., gcd, (, i, ,, j, ), ;, result, =, (, result, /, (, j, /, d, ), ), *]
[,, j, ), ;, result, =, (, result, /, (, j, /, d, ), ), *, (, i, /, d]
[), ;, result, =, (, result, /, (, j, /, d, ), ), *, (, i, /, d, ), ;]
[=, (, result, /, (, j, /, d, ), ), *, (, i, /, d, ), ;, i, ++, ;]
[;, i, ++, ;, }, }, else, {, int, i, =, n, -, k, +, 1, ;, for, (, int]
[*, (, i, /, d, ), ;, i, ++, ;, }, }, else, {, int, i, =, n, -, k]
[), *, (, i, /, d, ), ;, i, ++, ;, }, }, else, {, int, i, =, n, -]
[/, (, j, /, d, ), ), *, (, i, /, d, ), ;, i, ++, ;, }, }, else]
[), *, (, i, /, d, ), ;, i, ++, ;, }, }, else, {, int, i, =, n, -]
[), ), *, (, i, /, d, ), ;, i, ++, ;, }, }, else, {, int, i, =, n]
[/, d, ), ), *, (, i, /, d, ), ;, i, ++, ;, }, }, else, {, int, i]
[), ), *, (, i, /, d, ), ;, i, ++, ;, }, }, else, {, int, i, =, n]
[;, i, ++, ;, }, }, else, {, int, i, =, n, -, k, +, 1, ;, for, (, int]
[), ;, i, ++, ;, }, }, else, {, int, i, =, n, -, k, +, 1, ;, for, (]
[/, d, ), ;, i, ++, ;, }, }, else, {, int, i, =, n, -, k, +, 1, ;]
[), ;, i, ++, ;, }, }, else, {, int, i, =, n, -, k, +, 1, ;, for, (]
[;, }, }, else, {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1]
[++, ;, }, }, else, {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =]
[+, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long]
[-, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {]
[+, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =]
[;, j, <=, k, ;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j]
[;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =]
[<=, k, ;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;]
[;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =]
[), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck]
[++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, ArithmeticUtils, .]
[;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (, j, /, d, ), ,, i, /, d, ), ;]
[., gcd, (, i, ,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (, j, /, d]
[,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (, j, /, d, ), ,, i, /]
[), ;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (, j, /, d, ), ,, i, /, d, )]
[=, ArithmeticUtils, ., mulAndCheck, (, result, /, (, j, /, d, ), ,, i, /, d, ), ;, i, ++]
[;, i, ++, ;, }, }, return, result, ;, }, public, static, double, binomialCoefficientDouble, (, final, int, n, ,, final]
[., mulAndCheck, (, result, /, (, j, /, d, ), ,, i, /, d, ), ;, i, ++, ;, }]
[,, i, /, d, ), ;, i, ++, ;, }, }, return, result, ;, }, public, static, double, binomialCoefficientDouble, (]
[/, (, j, /, d, ), ,, i, /, d, ), ;, i, ++, ;, }, }, return, result, ;]
[,, i, /, d, ), ;, i, ++, ;, }, }, return, result, ;, }, public, static, double, binomialCoefficientDouble, (]
[), ,, i, /, d, ), ;, i, ++, ;, }, }, return, result, ;, }, public, static, double, binomialCoefficientDouble]
[/, d, ), ,, i, /, d, ), ;, i, ++, ;, }, }, return, result, ;, }, public, static]
[), ,, i, /, d, ), ;, i, ++, ;, }, }, return, result, ;, }, public, static, double, binomialCoefficientDouble]
[), ;, i, ++, ;, }, }, return, result, ;, }, public, static, double, binomialCoefficientDouble, (, final, int, n, ,]
[/, d, ), ;, i, ++, ;, }, }, return, result, ;, }, public, static, double, binomialCoefficientDouble, (, final, int]
[), ;, i, ++, ;, }, }, return, result, ;, }, public, static, double, binomialCoefficientDouble, (, final, int, n, ,]
[;, }, }, return, result, ;, }, public, static, double, binomialCoefficientDouble, (, final, int, n, ,, final, int, k, )]
[++, ;, }, }, return, result, ;, }, public, static, double, binomialCoefficientDouble, (, final, int, n, ,, final, int, k]
[;, }, public, static, double, binomialCoefficientDouble, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,]
[;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1d, ;, }]
[., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0]
[,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return]
[), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1d, ;]
[), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1]
[||, (, k, ==, 0, ), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||]
[), ||, (, k, ==, 0, ), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, )]
[==, k, ), ||, (, k, ==, 0, ), ), {, return, 1d, ;, }, if, (, (, k, ==]
[), ||, (, k, ==, 0, ), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, )]
[), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1]
[), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -]
[==, 0, ), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==]
[), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -]
[;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return]
[), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (, n, ,]
[||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n, /]
[), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n]
[==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k]
[), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n]
[), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (, n, ,]
[), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (, n]
[==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {]
[), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (, n]
[-, 1, ), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientDouble]
[), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (, n]
[;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (, n, ,, n, -, k, )]
[), {, return, binomialCoefficientDouble, (, n, ,, n, -, k, ), ;, }, if, (, n, <, 67, ), {]
[>, n, /, 2, ), {, return, binomialCoefficientDouble, (, n, ,, n, -, k, ), ;, }, if, (, n]
[), {, return, binomialCoefficientDouble, (, n, ,, n, -, k, ), ;, }, if, (, n, <, 67, ), {]
[/, 2, ), {, return, binomialCoefficientDouble, (, n, ,, n, -, k, ), ;, }, if, (, n, <, 67]
[), {, return, binomialCoefficientDouble, (, n, ,, n, -, k, ), ;, }, if, (, n, <, 67, ), {]
[;, }, if, (, n, <, 67, ), {, return, binomialCoefficient, (, n, ,, k, ), ;, }, double, result]
[,, n, -, k, ), ;, }, if, (, n, <, 67, ), {, return, binomialCoefficient, (, n, ,, k]
[), ;, }, if, (, n, <, 67, ), {, return, binomialCoefficient, (, n, ,, k, ), ;, }, double]
[-, k, ), ;, }, if, (, n, <, 67, ), {, return, binomialCoefficient, (, n, ,, k, ), ;]
[), ;, }, if, (, n, <, 67, ), {, return, binomialCoefficient, (, n, ,, k, ), ;, }, double]
[), {, return, binomialCoefficient, (, n, ,, k, ), ;, }, double, result, =, 1d, ;, for, (, int, i]
[<, 67, ), {, return, binomialCoefficient, (, n, ,, k, ), ;, }, double, result, =, 1d, ;, for, (]
[), {, return, binomialCoefficient, (, n, ,, k, ), ;, }, double, result, =, 1d, ;, for, (, int, i]
[;, }, double, result, =, 1d, ;, for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++]
[,, k, ), ;, }, double, result, =, 1d, ;, for, (, int, i, =, 1, ;, i, <=, k]
[), ;, }, double, result, =, 1d, ;, for, (, int, i, =, 1, ;, i, <=, k, ;, i]
[;, for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, result, *=, (, double]
[;, i, <=, k, ;, i, ++, ), {, result, *=, (, double, ), (, n, -, k, +, i]
[;, i, ++, ), {, result, *=, (, double, ), (, n, -, k, +, i, ), /, (, double]
[<=, k, ;, i, ++, ), {, result, *=, (, double, ), (, n, -, k, +, i, ), /]
[;, i, ++, ), {, result, *=, (, double, ), (, n, -, k, +, i, ), /, (, double]
[), {, result, *=, (, double, ), (, n, -, k, +, i, ), /, (, double, ), i, ;]
[++, ), {, result, *=, (, double, ), (, n, -, k, +, i, ), /, (, double, ), i]
[*=, (, double, ), (, n, -, k, +, i, ), /, (, double, ), i, ;, }, return, FastMath]
[;, }, return, FastMath, ., floor, (, result, +, 0.5, ), ;, }, public, static, double, binomialCoefficientLog, (, final, int]
[/, (, double, ), i, ;, }, return, FastMath, ., floor, (, result, +, 0.5, ), ;, }, public, static]
[/, (, double, ), i, ;, }, return, FastMath, ., floor, (, result, +, 0.5, ), ;, }, public, static]
[), /, (, double, ), i, ;, }, return, FastMath, ., floor, (, result, +, 0.5, ), ;, }, public]
[+, i, ), /, (, double, ), i, ;, }, return, FastMath, ., floor, (, result, +, 0.5, ), ;]
[-, k, +, i, ), /, (, double, ), i, ;, }, return, FastMath, ., floor, (, result, +, 0.5]
[+, i, ), /, (, double, ), i, ;, }, return, FastMath, ., floor, (, result, +, 0.5, ), ;]
[), /, (, double, ), i, ;, }, return, FastMath, ., floor, (, result, +, 0.5, ), ;, }, public]
[;, }, return, FastMath, ., floor, (, result, +, 0.5, ), ;, }, public, static, double, binomialCoefficientLog, (, final, int]
[;, }, return, FastMath, ., floor, (, result, +, 0.5, ), ;, }, public, static, double, binomialCoefficientLog, (, final, int]
[;, }, public, static, double, binomialCoefficientLog, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,]
[., floor, (, result, +, 0.5, ), ;, }, public, static, double, binomialCoefficientLog, (, final, int, n, ,, final, int]
[), ;, }, public, static, double, binomialCoefficientLog, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException]
[+, 0.5, ), ;, }, public, static, double, binomialCoefficientLog, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException]
[), ;, }, public, static, double, binomialCoefficientLog, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException]
[;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 0, ;, }]
[., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0]
[,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return]
[), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 0, ;]
[), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1]
[||, (, k, ==, 0, ), ), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||]
[), ||, (, k, ==, 0, ), ), {, return, 0, ;, }, if, (, (, k, ==, 1, )]
[==, k, ), ||, (, k, ==, 0, ), ), {, return, 0, ;, }, if, (, (, k, ==]
[), ||, (, k, ==, 0, ), ), {, return, 0, ;, }, if, (, (, k, ==, 1, )]
[), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1]
[), ), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -]
[==, 0, ), ), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==]
[), ), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -]
[;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return]
[), {, return, FastMath, ., log, (, n, ), ;, }, if, (, n, <, 67, ), {, return, FastMath]
[||, (, k, ==, n, -, 1, ), ), {, return, FastMath, ., log, (, n, ), ;, }, if]
[), ||, (, k, ==, n, -, 1, ), ), {, return, FastMath, ., log, (, n, ), ;, }]
[==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return, FastMath, ., log, (, n, )]
[), ||, (, k, ==, n, -, 1, ), ), {, return, FastMath, ., log, (, n, ), ;, }]
[), {, return, FastMath, ., log, (, n, ), ;, }, if, (, n, <, 67, ), {, return, FastMath]
[), ), {, return, FastMath, ., log, (, n, ), ;, }, if, (, n, <, 67, ), {, return]
[==, n, -, 1, ), ), {, return, FastMath, ., log, (, n, ), ;, }, if, (, n, <]
[), ), {, return, FastMath, ., log, (, n, ), ;, }, if, (, n, <, 67, ), {, return]
[-, 1, ), ), {, return, FastMath, ., log, (, n, ), ;, }, if, (, n, <, 67, )]
[), ), {, return, FastMath, ., log, (, n, ), ;, }, if, (, n, <, 67, ), {, return]
[;, }, if, (, n, <, 67, ), {, return, FastMath, ., log, (, binomialCoefficient, (, n, ,, k, )]
[., log, (, n, ), ;, }, if, (, n, <, 67, ), {, return, FastMath, ., log, (, binomialCoefficient]
[), ;, }, if, (, n, <, 67, ), {, return, FastMath, ., log, (, binomialCoefficient, (, n, ,, k]
[), {, return, FastMath, ., log, (, binomialCoefficient, (, n, ,, k, ), ), ;, }, if, (, n, <]
[<, 67, ), {, return, FastMath, ., log, (, binomialCoefficient, (, n, ,, k, ), ), ;, }, if, (]
[), {, return, FastMath, ., log, (, binomialCoefficient, (, n, ,, k, ), ), ;, }, if, (, n, <]
[;, }, if, (, n, <, 1030, ), {, return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,, k, )]
[., log, (, binomialCoefficient, (, n, ,, k, ), ), ;, }, if, (, n, <, 1030, ), {, return]
[), ;, }, if, (, n, <, 1030, ), {, return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,, k]
[,, k, ), ), ;, }, if, (, n, <, 1030, ), {, return, FastMath, ., log, (, binomialCoefficientDouble, (]
[), ), ;, }, if, (, n, <, 1030, ), {, return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,]
[), {, return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,, k, ), ), ;, }, if, (, k, >]
[<, 1030, ), {, return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,, k, ), ), ;, }, if, (]
[), {, return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,, k, ), ), ;, }, if, (, k, >]
[;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientLog, (, n, ,, n, -, k, )]
[., log, (, binomialCoefficientDouble, (, n, ,, k, ), ), ;, }, if, (, k, >, n, /, 2, )]
[), ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientLog, (, n, ,, n, -, k]
[,, k, ), ), ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientLog, (, n, ,]
[), ), ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientLog, (, n, ,, n, -]
[), {, return, binomialCoefficientLog, (, n, ,, n, -, k, ), ;, }, double, logSum, =, 0, ;, for, (]
[>, n, /, 2, ), {, return, binomialCoefficientLog, (, n, ,, n, -, k, ), ;, }, double, logSum, =]
[), {, return, binomialCoefficientLog, (, n, ,, n, -, k, ), ;, }, double, logSum, =, 0, ;, for, (]
[/, 2, ), {, return, binomialCoefficientLog, (, n, ,, n, -, k, ), ;, }, double, logSum, =, 0, ;]
[), {, return, binomialCoefficientLog, (, n, ,, n, -, k, ), ;, }, double, logSum, =, 0, ;, for, (]
[;, }, double, logSum, =, 0, ;, for, (, int, i, =, n, -, k, +, 1, ;, i, <=]
[,, n, -, k, ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, n, -, k]
[), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, n, -, k, +, 1, ;, i]
[-, k, ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, n, -, k, +, 1]
[), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, n, -, k, +, 1, ;, i]
[;, for, (, int, i, =, n, -, k, +, 1, ;, i, <=, n, ;, i, ++, ), {]
[;, i, <=, n, ;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, for]
[+, 1, ;, i, <=, n, ;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;]
[-, k, +, 1, ;, i, <=, n, ;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i]
[+, 1, ;, i, <=, n, ;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;]
[;, i, <=, n, ;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, for]
[;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, for, (, int, i, =]
[<=, n, ;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, for, (, int]
[;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, for, (, int, i, =]
[), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, for, (, int, i, =, 2, ;, i]
[++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, for, (, int, i, =, 2, ;]
[+=, FastMath, ., log, (, i, ), ;, }, for, (, int, i, =, 2, ;, i, <=, k, ;]
[;, }, for, (, int, i, =, 2, ;, i, <=, k, ;, i, ++, ), {, logSum, -=, FastMath]
[., log, (, i, ), ;, }, for, (, int, i, =, 2, ;, i, <=, k, ;, i, ++]
[), ;, }, for, (, int, i, =, 2, ;, i, <=, k, ;, i, ++, ), {, logSum, -=]
[;, i, <=, k, ;, i, ++, ), {, logSum, -=, FastMath, ., log, (, i, ), ;, }, return]
[;, i, ++, ), {, logSum, -=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;, }, public]
[<=, k, ;, i, ++, ), {, logSum, -=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;]
[;, i, ++, ), {, logSum, -=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;, }, public]
[), {, logSum, -=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;, }, public, static, long, factorial]
[++, ), {, logSum, -=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;, }, public, static, long]
[-=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;, }, public, static, long, factorial, (, final, int]
[;, }, return, logSum, ;, }, public, static, long, factorial, (, final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException, {]
[., log, (, i, ), ;, }, return, logSum, ;, }, public, static, long, factorial, (, final, int, n, )]
[), ;, }, return, logSum, ;, }, public, static, long, factorial, (, final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException]
[;, }, public, static, long, factorial, (, final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException, {, if, (, n, <]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, >, 20, )]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, >]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, >, 20, )]
[;, }, if, (, n, >, 20, ), {, throw, new, MathArithmeticException, (, ), ;, }, return, FACTORIALS, [, n]
[,, n, ), ;, }, if, (, n, >, 20, ), {, throw, new, MathArithmeticException, (, ), ;, }, return]
[., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, >, 20, ), {, throw, new, MathArithmeticException, (, ), ;]
[), ;, }, if, (, n, >, 20, ), {, throw, new, MathArithmeticException, (, ), ;, }, return, FACTORIALS, []
[), {, throw, new, MathArithmeticException, (, ), ;, }, return, FACTORIALS, [, n, ], ;, }, public, static, double, factorialDouble]
[>, 20, ), {, throw, new, MathArithmeticException, (, ), ;, }, return, FACTORIALS, [, n, ], ;, }, public, static]
[), {, throw, new, MathArithmeticException, (, ), ;, }, return, FACTORIALS, [, n, ], ;, }, public, static, double, factorialDouble]
[;, }, return, FACTORIALS, [, n, ], ;, }, public, static, double, factorialDouble, (, final, int, n, ), throws, NotPositiveException]
[;, }, public, static, double, factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <, 0, )]
[[, n, ], ;, }, public, static, double, factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, if, (, n]
[], ;, }, public, static, double, factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <, 0]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, )]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, )]
[;, }, if, (, n, <, 21, ), {, return, FACTORIALS, [, n, ], ;, }, return, FastMath, ., floor]
[,, n, ), ;, }, if, (, n, <, 21, ), {, return, FACTORIALS, [, n, ], ;, }, return]
[., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, ), {, return, FACTORIALS, [, n, ], ;]
[), ;, }, if, (, n, <, 21, ), {, return, FACTORIALS, [, n, ], ;, }, return, FastMath, .]
[), {, return, FACTORIALS, [, n, ], ;, }, return, FastMath, ., floor, (, FastMath, ., exp, (, CombinatoricsUtils, .]
[<, 21, ), {, return, FACTORIALS, [, n, ], ;, }, return, FastMath, ., floor, (, FastMath, ., exp, (]
[), {, return, FACTORIALS, [, n, ], ;, }, return, FastMath, ., floor, (, FastMath, ., exp, (, CombinatoricsUtils, .]
[;, }, return, FastMath, ., floor, (, FastMath, ., exp, (, CombinatoricsUtils, ., factorialLog, (, n, ), ), +, 0.5]
[[, n, ], ;, }, return, FastMath, ., floor, (, FastMath, ., exp, (, CombinatoricsUtils, ., factorialLog, (, n, )]
[], ;, }, return, FastMath, ., floor, (, FastMath, ., exp, (, CombinatoricsUtils, ., factorialLog, (, n, ), ), +]
[;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <, 0, )]
[., floor, (, FastMath, ., exp, (, CombinatoricsUtils, ., factorialLog, (, n, ), ), +, 0.5, ), ;, }, public]
[), ;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <, 0]
[+, 0.5, ), ;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if, (, n]
[., exp, (, CombinatoricsUtils, ., factorialLog, (, n, ), ), +, 0.5, ), ;, }, public, static, double, factorialLog, (]
[), +, 0.5, ), ;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if, (]
[., factorialLog, (, n, ), ), +, 0.5, ), ;, }, public, static, double, factorialLog, (, final, int, n, )]
[), ), +, 0.5, ), ;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if]
[), ;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <, 0]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, )]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, )]
[;, }, if, (, n, <, 21, ), {, return, FastMath, ., log, (, FACTORIALS, [, n, ], ), ;]
[,, n, ), ;, }, if, (, n, <, 21, ), {, return, FastMath, ., log, (, FACTORIALS, [, n]
[., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, ), {, return, FastMath, ., log, (, FACTORIALS]
[), ;, }, if, (, n, <, 21, ), {, return, FastMath, ., log, (, FACTORIALS, [, n, ], )]
[), {, return, FastMath, ., log, (, FACTORIALS, [, n, ], ), ;, }, double, logSum, =, 0, ;, for]
[<, 21, ), {, return, FastMath, ., log, (, FACTORIALS, [, n, ], ), ;, }, double, logSum, =, 0]
[), {, return, FastMath, ., log, (, FACTORIALS, [, n, ], ), ;, }, double, logSum, =, 0, ;, for]
[;, }, double, logSum, =, 0, ;, for, (, int, i, =, 2, ;, i, <=, n, ;, i, ++]
[., log, (, FACTORIALS, [, n, ], ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =]
[), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, 2, ;, i, <=, n, ;, i]
[[, n, ], ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, 2, ;, i, <=]
[], ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, 2, ;, i, <=, n, ;]
[;, for, (, int, i, =, 2, ;, i, <=, n, ;, i, ++, ), {, logSum, +=, FastMath, .]
[;, i, <=, n, ;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, return]
[;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;, }, public]
[<=, n, ;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;]
[;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;, }, public]
[), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;, }, public, static, long, stirlingS2]
[++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;, }, public, static, long]
[+=, FastMath, ., log, (, i, ), ;, }, return, logSum, ;, }, public, static, long, stirlingS2, (, final, int]
[;, }, return, logSum, ;, }, public, static, long, stirlingS2, (, final, int, n, ,, final, int, k, ), throws]
[., log, (, i, ), ;, }, return, logSum, ;, }, public, static, long, stirlingS2, (, final, int, n, ,]
[), ;, }, return, logSum, ;, }, public, static, long, stirlingS2, (, final, int, n, ,, final, int, k, )]
[;, }, public, static, long, stirlingS2, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,]
[), {, throw, new, NotPositiveException, (, k, ), ;, }, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException]
[<, 0, ), {, throw, new, NotPositiveException, (, k, ), ;, }, if, (, k, >, n, ), {, throw]
[), {, throw, new, NotPositiveException, (, k, ), ;, }, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException]
[;, }, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException, (, k, ,, n, ,, true, ), ;]
[), ;, }, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException, (, k, ,, n, ,, true, )]
[), {, throw, new, NumberIsTooLargeException, (, k, ,, n, ,, true, ), ;, }, long, [, ], [, ], stirlingS2]
[>, n, ), {, throw, new, NumberIsTooLargeException, (, k, ,, n, ,, true, ), ;, }, long, [, ], []
[), {, throw, new, NumberIsTooLargeException, (, k, ,, n, ,, true, ), ;, }, long, [, ], [, ], stirlingS2]
[;, }, long, [, ], [, ], stirlingS2, =, STIRLING_S2, ., get, (, ), ;, if, (, stirlingS2, ==, null]
[,, n, ,, true, ), ;, }, long, [, ], [, ], stirlingS2, =, STIRLING_S2, ., get, (, ), ;]
[,, true, ), ;, }, long, [, ], [, ], stirlingS2, =, STIRLING_S2, ., get, (, ), ;, if, (]
[), ;, }, long, [, ], [, ], stirlingS2, =, STIRLING_S2, ., get, (, ), ;, if, (, stirlingS2, ==]
[;, if, (, stirlingS2, ==, null, ), {, final, int, maxIndex, =, 26, ;, stirlingS2, =, new, long, [, maxIndex]
[., get, (, ), ;, if, (, stirlingS2, ==, null, ), {, final, int, maxIndex, =, 26, ;, stirlingS2, =]
[), {, final, int, maxIndex, =, 26, ;, stirlingS2, =, new, long, [, maxIndex, ], [, ], ;, stirlingS2, []
[==, null, ), {, final, int, maxIndex, =, 26, ;, stirlingS2, =, new, long, [, maxIndex, ], [, ], ;]
[), {, final, int, maxIndex, =, 26, ;, stirlingS2, =, new, long, [, maxIndex, ], [, ], ;, stirlingS2, []
[;, stirlingS2, =, new, long, [, maxIndex, ], [, ], ;, stirlingS2, [, 0, ], =, new, long, [, ]]
[=, new, long, [, maxIndex, ], [, ], ;, stirlingS2, [, 0, ], =, new, long, [, ], {, 1l]
[;, stirlingS2, [, 0, ], =, new, long, [, ], {, 1l, }, ;, for, (, int, i, =, 1]
[], [, ], ;, stirlingS2, [, 0, ], =, new, long, [, ], {, 1l, }, ;, for, (, int]
[=, new, long, [, ], {, 1l, }, ;, for, (, int, i, =, 1, ;, i, <, stirlingS2, .]
[[, 0, ], =, new, long, [, ], {, 1l, }, ;, for, (, int, i, =, 1, ;, i]
[], =, new, long, [, ], {, 1l, }, ;, for, (, int, i, =, 1, ;, i, <, stirlingS2]
[;, for, (, int, i, =, 1, ;, i, <, stirlingS2, ., length, ;, ++, i, ), {, stirlingS2, []
[;, for, (, int, i, =, 1, ;, i, <, stirlingS2, ., length, ;, ++, i, ), {, stirlingS2, []
[}, ;, for, (, int, i, =, 1, ;, i, <, stirlingS2, ., length, ;, ++, i, ), {, stirlingS2]
[;, i, <, stirlingS2, ., length, ;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, [, i]
[;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, [, i, +, 1, ], ;, stirlingS2, []
[<, stirlingS2, ., length, ;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, [, i, +, 1]
[;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, [, i, +, 1, ], ;, stirlingS2, []
[., length, ;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, [, i, +, 1, ], ;]
[), {, stirlingS2, [, i, ], =, new, long, [, i, +, 1, ], ;, stirlingS2, [, i, ], []
[), {, stirlingS2, [, i, ], =, new, long, [, i, +, 1, ], ;, stirlingS2, [, i, ], []
[=, new, long, [, i, +, 1, ], ;, stirlingS2, [, i, ], [, 0, ], =, 0, ;, stirlingS2]
[[, i, ], =, new, long, [, i, +, 1, ], ;, stirlingS2, [, i, ], [, 0, ], =]
[], =, new, long, [, i, +, 1, ], ;, stirlingS2, [, i, ], [, 0, ], =, 0, ;]
[;, stirlingS2, [, i, ], [, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =, 1]
[], ;, stirlingS2, [, i, ], [, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =]
[+, 1, ], ;, stirlingS2, [, i, ], [, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1]
[], ;, stirlingS2, [, i, ], [, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =]
[=, 0, ;, stirlingS2, [, i, ], [, 1, ], =, 1, ;, stirlingS2, [, i, ], [, i, ]]
[[, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =, 1, ;, stirlingS2, [, i, ]]
[[, i, ], [, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =, 1, ;, stirlingS2]
[], [, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =, 1, ;, stirlingS2, [, i]
[], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =, 1, ;, stirlingS2, [, i, ], [, i]
[;, stirlingS2, [, i, ], [, 1, ], =, 1, ;, stirlingS2, [, i, ], [, i, ], =, 1]
[=, 1, ;, stirlingS2, [, i, ], [, i, ], =, 1, ;, for, (, int, j, =, 2, ;]
[[, 1, ], =, 1, ;, stirlingS2, [, i, ], [, i, ], =, 1, ;, for, (, int, j]
[[, i, ], [, 1, ], =, 1, ;, stirlingS2, [, i, ], [, i, ], =, 1, ;, for]
[], [, 1, ], =, 1, ;, stirlingS2, [, i, ], [, i, ], =, 1, ;, for, (, int]
[], =, 1, ;, stirlingS2, [, i, ], [, i, ], =, 1, ;, for, (, int, j, =, 2]
[;, stirlingS2, [, i, ], [, i, ], =, 1, ;, for, (, int, j, =, 2, ;, j, <]
[=, 1, ;, for, (, int, j, =, 2, ;, j, <, i, ;, ++, j, ), {, stirlingS2, []
[[, i, ], =, 1, ;, for, (, int, j, =, 2, ;, j, <, i, ;, ++, j, )]
[[, i, ], [, i, ], =, 1, ;, for, (, int, j, =, 2, ;, j, <, i, ;]
[], [, i, ], =, 1, ;, for, (, int, j, =, 2, ;, j, <, i, ;, ++, j]
[], =, 1, ;, for, (, int, j, =, 2, ;, j, <, i, ;, ++, j, ), {, stirlingS2]
[;, for, (, int, j, =, 2, ;, j, <, i, ;, ++, j, ), {, stirlingS2, [, i, ]]
[;, j, <, i, ;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2]
[;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, [, i, -, 1]
[<, i, ;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, [, i]
[;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, [, i, -, 1]
[), {, stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, [, i, -, 1, ], [, j]
[), {, stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, [, i, -, 1, ], [, j]
[=, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2, [, i, -, 1, ], []
[[, j, ], =, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2, [, i, -]
[[, i, ], [, j, ], =, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2]
[], [, j, ], =, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2, [, i]
[], =, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2, [, i, -, 1, ]]
[;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <, stirlingS2, ., length]
[+, stirlingS2, [, i, -, 1, ], [, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null]
[*, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2, [, i, -, 1, ], [, j, -]
[+, stirlingS2, [, i, -, 1, ], [, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null]
[[, j, ], +, stirlingS2, [, i, -, 1, ], [, j, -, 1, ], ;, }, }, STIRLING_S2, .]
[[, i, -, 1, ], [, j, ], +, stirlingS2, [, i, -, 1, ], [, j, -, 1, ]]
[], [, j, ], +, stirlingS2, [, i, -, 1, ], [, j, -, 1, ], ;, }, }, STIRLING_S2]
[-, 1, ], [, j, ], +, stirlingS2, [, i, -, 1, ], [, j, -, 1, ], ;, }]
[], [, j, ], +, stirlingS2, [, i, -, 1, ], [, j, -, 1, ], ;, }, }, STIRLING_S2]
[], +, stirlingS2, [, i, -, 1, ], [, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (]
[;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <, stirlingS2, ., length]
[[, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (]
[[, i, -, 1, ], [, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2]
[], [, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if]
[-, 1, ], [, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;]
[], [, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if]
[], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <, stirlingS2, .]
[-, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <]
[], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <, stirlingS2, .]
[;, }, if, (, n, <, stirlingS2, ., length, ), {, return, stirlingS2, [, n, ], [, k, ], ;]
[., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <, stirlingS2, ., length, ), {, return, stirlingS2]
[,, stirlingS2, ), ;, }, if, (, n, <, stirlingS2, ., length, ), {, return, stirlingS2, [, n, ], []
[), ;, }, if, (, n, <, stirlingS2, ., length, ), {, return, stirlingS2, [, n, ], [, k, ]]
[), {, return, stirlingS2, [, n, ], [, k, ], ;, }, else, {, if, (, k, ==, 0, )]
[<, stirlingS2, ., length, ), {, return, stirlingS2, [, n, ], [, k, ], ;, }, else, {, if, (]
[), {, return, stirlingS2, [, n, ], [, k, ], ;, }, else, {, if, (, k, ==, 0, )]
[., length, ), {, return, stirlingS2, [, n, ], [, k, ], ;, }, else, {, if, (, k, ==]
[;, }, else, {, if, (, k, ==, 0, ), {, return, 0, ;, }, else, if, (, k, ==]
[[, k, ], ;, }, else, {, if, (, k, ==, 0, ), {, return, 0, ;, }, else, if]
[[, n, ], [, k, ], ;, }, else, {, if, (, k, ==, 0, ), {, return, 0, ;]
[], [, k, ], ;, }, else, {, if, (, k, ==, 0, ), {, return, 0, ;, }, else]
[], ;, }, else, {, if, (, k, ==, 0, ), {, return, 0, ;, }, else, if, (, k]
[), {, return, 0, ;, }, else, if, (, k, ==, 1, ||, k, ==, n, ), {, return, 1]
[==, 0, ), {, return, 0, ;, }, else, if, (, k, ==, 1, ||, k, ==, n, ), {]
[), {, return, 0, ;, }, else, if, (, k, ==, 1, ||, k, ==, n, ), {, return, 1]
[;, }, else, if, (, k, ==, 1, ||, k, ==, n, ), {, return, 1, ;, }, else, if]
[), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (, 1l, <<, (, n]
[||, k, ==, n, ), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (]
[==, 1, ||, k, ==, n, ), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {]
[||, k, ==, n, ), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (]
[), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (, 1l, <<, (, n]
[==, n, ), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (, 1l, <<]
[), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (, 1l, <<, (, n]
[;, }, else, if, (, k, ==, 2, ), {, return, (, 1l, <<, (, n, -, 1, ), )]
[), {, return, (, 1l, <<, (, n, -, 1, ), ), -, 1l, ;, }, else, if, (, k]
[==, 2, ), {, return, (, 1l, <<, (, n, -, 1, ), ), -, 1l, ;, }, else, if]
[), {, return, (, 1l, <<, (, n, -, 1, ), ), -, 1l, ;, }, else, if, (, k]
[;, }, else, if, (, k, ==, n, -, 1, ), {, return, binomialCoefficient, (, n, ,, 2, ), ;]
[-, 1l, ;, }, else, if, (, k, ==, n, -, 1, ), {, return, binomialCoefficient, (, n, ,, 2]
[), -, 1l, ;, }, else, if, (, k, ==, n, -, 1, ), {, return, binomialCoefficient, (, n, ,]
[<<, (, n, -, 1, ), ), -, 1l, ;, }, else, if, (, k, ==, n, -, 1, )]
[), -, 1l, ;, }, else, if, (, k, ==, n, -, 1, ), {, return, binomialCoefficient, (, n, ,]
[), ), -, 1l, ;, }, else, if, (, k, ==, n, -, 1, ), {, return, binomialCoefficient, (, n]
[-, 1, ), ), -, 1l, ;, }, else, if, (, k, ==, n, -, 1, ), {, return, binomialCoefficient]
[), ), -, 1l, ;, }, else, if, (, k, ==, n, -, 1, ), {, return, binomialCoefficient, (, n]
[;, }, else, if, (, k, ==, n, -, 1, ), {, return, binomialCoefficient, (, n, ,, 2, ), ;]
[), {, return, binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =, 0, ;, long, sign]
[==, n, -, 1, ), {, return, binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =]
[), {, return, binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =, 0, ;, long, sign]
[-, 1, ), {, return, binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =, 0, ;]
[), {, return, binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =, 0, ;, long, sign]
[;, }, else, {, long, sum, =, 0, ;, long, sign, =, (, (, k, &, 0x1, ), ==, 0]
[,, 2, ), ;, }, else, {, long, sum, =, 0, ;, long, sign, =, (, (, k, &, 0x1]
[), ;, }, else, {, long, sum, =, 0, ;, long, sign, =, (, (, k, &, 0x1, ), ==]
[;, long, sign, =, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ;, for]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, sign, =, -, sign]
[?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, )]
[), ?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j]
[==, 0, ), ?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;]
[), ==, 0, ), ?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;, j, <=, k]
[&, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;, j]
[), ==, 0, ), ?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;, j, <=, k]
[), ?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j]
[:, -, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, sign]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, sign, =, -, sign]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, sign, =, -, sign]
[;, j, <=, k, ;, ++, j, ), {, sign, =, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (]
[;, ++, j, ), {, sign, =, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (, k, ,, j, )]
[<=, k, ;, ++, j, ), {, sign, =, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (, k, ,]
[;, ++, j, ), {, sign, =, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (, k, ,, j, )]
[), {, sign, =, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, .]
[), {, sign, =, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, .]
[=, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, ., pow, (, j]
[;, sum, +=, sign, *, binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, ., pow, (, j, ,, n, )]
[;, sum, +=, sign, *, binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, ., pow, (, j, ,, n, )]
[+=, sign, *, binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if]
[;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,]
[*, ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException]
[*, binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if, (, sum]
[*, ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException]
[,, j, ), *, ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if, (, sum, <, 0, ), {]
[), *, ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if, (, sum, <, 0, ), {, throw, new]
[;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,]
[., pow, (, j, ,, n, ), ;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats]
[,, n, ), ;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n]
[), ;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,, stirlingS2, ., length, -, 1, )]
[<, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,, stirlingS2, ., length, -]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,, stirlingS2, ., length, -, 1, )]
[;, }, }, return, sum, /, factorial, (, k, ), ;, }, }, }, public, static, Iterator, <, int, []
[,, n, ,, 0, ,, stirlingS2, ., length, -, 1, ), ;, }, }, return, sum, /, factorial, (, k]
[., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,, stirlingS2, ., length, -, 1, ), ;, }, }, return, sum, /, factorial]
[,, 0, ,, stirlingS2, ., length, -, 1, ), ;, }, }, return, sum, /, factorial, (, k, ), ;]
[,, stirlingS2, ., length, -, 1, ), ;, }, }, return, sum, /, factorial, (, k, ), ;, }, }]
[), ;, }, }, return, sum, /, factorial, (, k, ), ;, }, }, }, public, static, Iterator, <, int]
[-, 1, ), ;, }, }, return, sum, /, factorial, (, k, ), ;, }, }, }, public, static, Iterator]
[., length, -, 1, ), ;, }, }, return, sum, /, factorial, (, k, ), ;, }, }, }, public]
[), ;, }, }, return, sum, /, factorial, (, k, ), ;, }, }, }, public, static, Iterator, <, int]
[;, }, }, }, public, static, Iterator, <, int, [, ], >, combinationsIterator, (, int, n, ,, int, k, )]
[/, factorial, (, k, ), ;, }, }, }, public, static, Iterator, <, int, [, ], >, combinationsIterator, (, int]
[;, }, }, }, public, static, Iterator, <, int, [, ], >, combinationsIterator, (, int, n, ,, int, k, )]
[), ;, }, }, }, public, static, Iterator, <, int, [, ], >, combinationsIterator, (, int, n, ,, int, k]
[;, if, (, k, ==, 0, ), {, return, new, SingletonIterator, (, new, int, [, ], {, }, ), ;]
[,, k, ), ;, if, (, k, ==, 0, ), {, return, new, SingletonIterator, (, new, int, [, ], {]
[), ;, if, (, k, ==, 0, ), {, return, new, SingletonIterator, (, new, int, [, ], {, }, )]
[), {, return, new, SingletonIterator, (, new, int, [, ], {, }, ), ;, }, if, (, k, ==, n]
[==, 0, ), {, return, new, SingletonIterator, (, new, int, [, ], {, }, ), ;, }, if, (, k]
[), {, return, new, SingletonIterator, (, new, int, [, ], {, }, ), ;, }, if, (, k, ==, n]
[;, }, if, (, k, ==, n, ), {, final, int, [, ], natural, =, new, int, [, n, ]]
[), ;, }, if, (, k, ==, n, ), {, final, int, [, ], natural, =, new, int, [, n]
[), ;, }, if, (, k, ==, n, ), {, final, int, [, ], natural, =, new, int, [, n]
[), {, final, int, [, ], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0]
[==, n, ), {, final, int, [, ], natural, =, new, int, [, n, ], ;, for, (, int, i]
[), {, final, int, [, ], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, natural, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, natural, [, i]
[;, i, <, n, ;, i, ++, ), {, natural, [, i, ], =, i, ;, }, return, new, SingletonIterator]
[;, i, ++, ), {, natural, [, i, ], =, i, ;, }, return, new, SingletonIterator, (, natural, ), ;]
[<, n, ;, i, ++, ), {, natural, [, i, ], =, i, ;, }, return, new, SingletonIterator, (, natural]
[;, i, ++, ), {, natural, [, i, ], =, i, ;, }, return, new, SingletonIterator, (, natural, ), ;]
[), {, natural, [, i, ], =, i, ;, }, return, new, SingletonIterator, (, natural, ), ;, }, return, new]
[++, ), {, natural, [, i, ], =, i, ;, }, return, new, SingletonIterator, (, natural, ), ;, }, return]
[=, i, ;, }, return, new, SingletonIterator, (, natural, ), ;, }, return, new, LexicographicCombinationIterator, (, n, ,, k, )]
[[, i, ], =, i, ;, }, return, new, SingletonIterator, (, natural, ), ;, }, return, new, LexicographicCombinationIterator, (, n]
[], =, i, ;, }, return, new, SingletonIterator, (, natural, ), ;, }, return, new, LexicographicCombinationIterator, (, n, ,, k]
[;, }, return, new, SingletonIterator, (, natural, ), ;, }, return, new, LexicographicCombinationIterator, (, n, ,, k, ), ;, }]
[;, }, return, new, LexicographicCombinationIterator, (, n, ,, k, ), ;, }, private, static, class, LexicographicCombinationIterator, implements, Iterator, <, int]
[), ;, }, return, new, LexicographicCombinationIterator, (, n, ,, k, ), ;, }, private, static, class, LexicographicCombinationIterator, implements, Iterator, <]
[;, }, private, static, class, LexicographicCombinationIterator, implements, Iterator, <, int, [, ], >, {, private, final, int, k, ;, private]
[,, k, ), ;, }, private, static, class, LexicographicCombinationIterator, implements, Iterator, <, int, [, ], >, {, private, final, int]
[), ;, }, private, static, class, LexicographicCombinationIterator, implements, Iterator, <, int, [, ], >, {, private, final, int, k, ;]
[;, private, int, j, ;, public, LexicographicCombinationIterator, (, int, n, ,, int, k, ), {, this, ., k, =, k]
[=, k, ;, c, =, new, int, [, k, +, 3, ], ;, if, (, k, ==, 0, ||, k]
[., k, =, k, ;, c, =, new, int, [, k, +, 3, ], ;, if, (, k, ==, 0]
[;, c, =, new, int, [, k, +, 3, ], ;, if, (, k, ==, 0, ||, k, >=, n]
[=, new, int, [, k, +, 3, ], ;, if, (, k, ==, 0, ||, k, >=, n, ), {]
[;, if, (, k, ==, 0, ||, k, >=, n, ), {, more, =, false, ;, return, ;, }, for]
[], ;, if, (, k, ==, 0, ||, k, >=, n, ), {, more, =, false, ;, return, ;, }]
[+, 3, ], ;, if, (, k, ==, 0, ||, k, >=, n, ), {, more, =, false, ;, return]
[], ;, if, (, k, ==, 0, ||, k, >=, n, ), {, more, =, false, ;, return, ;, }]
[), {, more, =, false, ;, return, ;, }, for, (, int, i, =, 1, ;, i, <=, k, ;]
[||, k, >=, n, ), {, more, =, false, ;, return, ;, }, for, (, int, i, =, 1, ;]
[==, 0, ||, k, >=, n, ), {, more, =, false, ;, return, ;, }, for, (, int, i, =]
[||, k, >=, n, ), {, more, =, false, ;, return, ;, }, for, (, int, i, =, 1, ;]
[), {, more, =, false, ;, return, ;, }, for, (, int, i, =, 1, ;, i, <=, k, ;]
[>=, n, ), {, more, =, false, ;, return, ;, }, for, (, int, i, =, 1, ;, i, <=]
[), {, more, =, false, ;, return, ;, }, for, (, int, i, =, 1, ;, i, <=, k, ;]
[=, false, ;, return, ;, }, for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, )]
[;, return, ;, }, for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, c]
[;, i, <=, k, ;, i, ++, ), {, c, [, i, ], =, i, -, 1, ;, }, c]
[;, i, ++, ), {, c, [, i, ], =, i, -, 1, ;, }, c, [, k, +, 1]
[<=, k, ;, i, ++, ), {, c, [, i, ], =, i, -, 1, ;, }, c, [, k]
[;, i, ++, ), {, c, [, i, ], =, i, -, 1, ;, }, c, [, k, +, 1]
[), {, c, [, i, ], =, i, -, 1, ;, }, c, [, k, +, 1, ], =, n]
[++, ), {, c, [, i, ], =, i, -, 1, ;, }, c, [, k, +, 1, ], =]
[=, i, -, 1, ;, }, c, [, k, +, 1, ], =, n, ;, c, [, k, +, 2]
[[, i, ], =, i, -, 1, ;, }, c, [, k, +, 1, ], =, n, ;, c, []
[], =, i, -, 1, ;, }, c, [, k, +, 1, ], =, n, ;, c, [, k, +]
[;, }, c, [, k, +, 1, ], =, n, ;, c, [, k, +, 2, ], =, 0, ;]
[-, 1, ;, }, c, [, k, +, 1, ], =, n, ;, c, [, k, +, 2, ], =]
[;, }, c, [, k, +, 1, ], =, n, ;, c, [, k, +, 2, ], =, 0, ;]
[=, n, ;, c, [, k, +, 2, ], =, 0, ;, j, =, k, ;, }, public, boolean, hasNext]
[[, k, +, 1, ], =, n, ;, c, [, k, +, 2, ], =, 0, ;, j, =, k]
[], =, n, ;, c, [, k, +, 2, ], =, 0, ;, j, =, k, ;, }, public, boolean]
[+, 1, ], =, n, ;, c, [, k, +, 2, ], =, 0, ;, j, =, k, ;, }]
[], =, n, ;, c, [, k, +, 2, ], =, 0, ;, j, =, k, ;, }, public, boolean]
[;, c, [, k, +, 2, ], =, 0, ;, j, =, k, ;, }, public, boolean, hasNext, (, )]
[=, 0, ;, j, =, k, ;, }, public, boolean, hasNext, (, ), {, return, more, ;, }, public, int]
[[, k, +, 2, ], =, 0, ;, j, =, k, ;, }, public, boolean, hasNext, (, ), {, return]
[], =, 0, ;, j, =, k, ;, }, public, boolean, hasNext, (, ), {, return, more, ;, }, public]
[+, 2, ], =, 0, ;, j, =, k, ;, }, public, boolean, hasNext, (, ), {, return, more, ;]
[], =, 0, ;, j, =, k, ;, }, public, boolean, hasNext, (, ), {, return, more, ;, }, public]
[;, j, =, k, ;, }, public, boolean, hasNext, (, ), {, return, more, ;, }, public, int, [, ]]
[=, k, ;, }, public, boolean, hasNext, (, ), {, return, more, ;, }, public, int, [, ], next, (]
[;, }, public, boolean, hasNext, (, ), {, return, more, ;, }, public, int, [, ], next, (, ), {]
[;, }, public, int, [, ], next, (, ), {, if, (, !, more, ), {, throw, new, NoSuchElementException, (]
[), {, throw, new, NoSuchElementException, (, ), ;, }, final, int, [, ], ret, =, new, int, [, k, ]]
[), {, throw, new, NoSuchElementException, (, ), ;, }, final, int, [, ], ret, =, new, int, [, k, ]]
[;, }, final, int, [, ], ret, =, new, int, [, k, ], ;, System, ., arraycopy, (, c, ,]
[;, System, ., arraycopy, (, c, ,, 1, ,, ret, ,, 0, ,, k, ), ;, int, x, =, 0]
[], ;, System, ., arraycopy, (, c, ,, 1, ,, ret, ,, 0, ,, k, ), ;, int, x, =]
[;, int, x, =, 0, ;, if, (, j, >, 0, ), {, x, =, j, ;, c, [, j]
[., arraycopy, (, c, ,, 1, ,, ret, ,, 0, ,, k, ), ;, int, x, =, 0, ;, if]
[,, 1, ,, ret, ,, 0, ,, k, ), ;, int, x, =, 0, ;, if, (, j, >, 0]
[,, ret, ,, 0, ,, k, ), ;, int, x, =, 0, ;, if, (, j, >, 0, ), {]
[,, 0, ,, k, ), ;, int, x, =, 0, ;, if, (, j, >, 0, ), {, x, =]
[,, k, ), ;, int, x, =, 0, ;, if, (, j, >, 0, ), {, x, =, j, ;]
[), ;, int, x, =, 0, ;, if, (, j, >, 0, ), {, x, =, j, ;, c, []
[;, if, (, j, >, 0, ), {, x, =, j, ;, c, [, j, ], =, x, ;, j]
[), {, x, =, j, ;, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;, }]
[>, 0, ), {, x, =, j, ;, c, [, j, ], =, x, ;, j, --, ;, return, ret]
[), {, x, =, j, ;, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;, }]
[=, j, ;, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;, }, if, (, c]
[;, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;, }, if, (, c, [, 1]
[=, x, ;, j, --, ;, return, ret, ;, }, if, (, c, [, 1, ], +, 1, <, c]
[[, j, ], =, x, ;, j, --, ;, return, ret, ;, }, if, (, c, [, 1, ], +]
[], =, x, ;, j, --, ;, return, ret, ;, }, if, (, c, [, 1, ], +, 1, <]
[;, j, --, ;, return, ret, ;, }, if, (, c, [, 1, ], +, 1, <, c, [, 2]
[;, return, ret, ;, }, if, (, c, [, 1, ], +, 1, <, c, [, 2, ], ), {]
[--, ;, return, ret, ;, }, if, (, c, [, 1, ], +, 1, <, c, [, 2, ], )]
[;, }, if, (, c, [, 1, ], +, 1, <, c, [, 2, ], ), {, c, [, 1]
[), {, c, [, 1, ], =, c, [, 1, ], +, 1, ;, return, ret, ;, }, else, {]
[<, c, [, 2, ], ), {, c, [, 1, ], =, c, [, 1, ], +, 1, ;, return]
[+, 1, <, c, [, 2, ], ), {, c, [, 1, ], =, c, [, 1, ], +, 1]
[[, 1, ], +, 1, <, c, [, 2, ], ), {, c, [, 1, ], =, c, [, 1]
[], +, 1, <, c, [, 2, ], ), {, c, [, 1, ], =, c, [, 1, ], +]
[<, c, [, 2, ], ), {, c, [, 1, ], =, c, [, 1, ], +, 1, ;, return]
[), {, c, [, 1, ], =, c, [, 1, ], +, 1, ;, return, ret, ;, }, else, {]
[[, 2, ], ), {, c, [, 1, ], =, c, [, 1, ], +, 1, ;, return, ret, ;]
[], ), {, c, [, 1, ], =, c, [, 1, ], +, 1, ;, return, ret, ;, }, else]
[=, c, [, 1, ], +, 1, ;, return, ret, ;, }, else, {, j, =, 2, ;, }, boolean]
[[, 1, ], =, c, [, 1, ], +, 1, ;, return, ret, ;, }, else, {, j, =, 2]
[], =, c, [, 1, ], +, 1, ;, return, ret, ;, }, else, {, j, =, 2, ;, }]
[;, return, ret, ;, }, else, {, j, =, 2, ;, }, boolean, stepDone, =, false, ;, while, (, !]
[+, 1, ;, return, ret, ;, }, else, {, j, =, 2, ;, }, boolean, stepDone, =, false, ;, while]
[[, 1, ], +, 1, ;, return, ret, ;, }, else, {, j, =, 2, ;, }, boolean, stepDone, =]
[], +, 1, ;, return, ret, ;, }, else, {, j, =, 2, ;, }, boolean, stepDone, =, false, ;]
[;, return, ret, ;, }, else, {, j, =, 2, ;, }, boolean, stepDone, =, false, ;, while, (, !]
[;, }, else, {, j, =, 2, ;, }, boolean, stepDone, =, false, ;, while, (, !, stepDone, ), {]
[=, 2, ;, }, boolean, stepDone, =, false, ;, while, (, !, stepDone, ), {, c, [, j, -, 1]
[;, }, boolean, stepDone, =, false, ;, while, (, !, stepDone, ), {, c, [, j, -, 1, ], =]
[;, while, (, !, stepDone, ), {, c, [, j, -, 1, ], =, j, -, 2, ;, x, =]
[), {, c, [, j, -, 1, ], =, j, -, 2, ;, x, =, c, [, j, ], +]
[), {, c, [, j, -, 1, ], =, j, -, 2, ;, x, =, c, [, j, ], +]
[=, j, -, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (, x, ==, c, []
[[, j, -, 1, ], =, j, -, 2, ;, x, =, c, [, j, ], +, 1, ;, if]
[], =, j, -, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (, x, ==, c]
[-, 1, ], =, j, -, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (, x]
[], =, j, -, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (, x, ==, c]
[;, x, =, c, [, j, ], +, 1, ;, if, (, x, ==, c, [, j, +, 1, ]]
[-, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (, x, ==, c, [, j, +]
[;, x, =, c, [, j, ], +, 1, ;, if, (, x, ==, c, [, j, +, 1, ]]
[=, c, [, j, ], +, 1, ;, if, (, x, ==, c, [, j, +, 1, ], ), {]
[;, if, (, x, ==, c, [, j, +, 1, ], ), {, j, ++, ;, }, else, {, stepDone]
[+, 1, ;, if, (, x, ==, c, [, j, +, 1, ], ), {, j, ++, ;, }, else]
[[, j, ], +, 1, ;, if, (, x, ==, c, [, j, +, 1, ], ), {, j, ++]
[], +, 1, ;, if, (, x, ==, c, [, j, +, 1, ], ), {, j, ++, ;, }]
[;, if, (, x, ==, c, [, j, +, 1, ], ), {, j, ++, ;, }, else, {, stepDone]
[), {, j, ++, ;, }, else, {, stepDone, =, true, ;, }, }, if, (, j, >, k, )]
[==, c, [, j, +, 1, ], ), {, j, ++, ;, }, else, {, stepDone, =, true, ;, }]
[), {, j, ++, ;, }, else, {, stepDone, =, true, ;, }, }, if, (, j, >, k, )]
[[, j, +, 1, ], ), {, j, ++, ;, }, else, {, stepDone, =, true, ;, }, }, if]
[], ), {, j, ++, ;, }, else, {, stepDone, =, true, ;, }, }, if, (, j, >, k]
[+, 1, ], ), {, j, ++, ;, }, else, {, stepDone, =, true, ;, }, }, if, (, j]
[], ), {, j, ++, ;, }, else, {, stepDone, =, true, ;, }, }, if, (, j, >, k]
[;, }, else, {, stepDone, =, true, ;, }, }, if, (, j, >, k, ), {, more, =, false]
[++, ;, }, else, {, stepDone, =, true, ;, }, }, if, (, j, >, k, ), {, more, =]
[=, true, ;, }, }, if, (, j, >, k, ), {, more, =, false, ;, return, ret, ;, }]
[;, }, }, if, (, j, >, k, ), {, more, =, false, ;, return, ret, ;, }, c, []
[), {, more, =, false, ;, return, ret, ;, }, c, [, j, ], =, x, ;, j, --, ;]
[>, k, ), {, more, =, false, ;, return, ret, ;, }, c, [, j, ], =, x, ;, j]
[), {, more, =, false, ;, return, ret, ;, }, c, [, j, ], =, x, ;, j, --, ;]
[=, false, ;, return, ret, ;, }, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;]
[;, return, ret, ;, }, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;, }, public]
[;, }, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;, }, public, void, remove, (]
[=, x, ;, j, --, ;, return, ret, ;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (]
[[, j, ], =, x, ;, j, --, ;, return, ret, ;, }, public, void, remove, (, ), {, throw]
[], =, x, ;, j, --, ;, return, ret, ;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException]
[;, j, --, ;, return, ret, ;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;]
[;, return, ret, ;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, private]
[--, ;, return, ret, ;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }]
[;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, private, static, class, SingletonIterator]
[;, }, }, private, static, class, SingletonIterator, implements, Iterator, <, int, [, ], >, {, private, final, int, [, ]]
[;, public, SingletonIterator, (, final, int, [, ], singleton, ), {, this, ., singleton, =, singleton, ;, }, public, boolean]
[=, singleton, ;, }, public, boolean, hasNext, (, ), {, return, more, ;, }, public, int, [, ], next, (]
[., singleton, =, singleton, ;, }, public, boolean, hasNext, (, ), {, return, more, ;, }, public, int, [, ]]
[;, }, public, boolean, hasNext, (, ), {, return, more, ;, }, public, int, [, ], next, (, ), {]
[;, }, public, int, [, ], next, (, ), {, if, (, more, ), {, more, =, false, ;, return]
[), {, more, =, false, ;, return, singleton, ;, }, else, {, throw, new, NoSuchElementException, (, ), ;, }, }]
[=, false, ;, return, singleton, ;, }, else, {, throw, new, NoSuchElementException, (, ), ;, }, }, public, void, remove]
[;, return, singleton, ;, }, else, {, throw, new, NoSuchElementException, (, ), ;, }, }, public, void, remove, (, )]
[;, }, else, {, throw, new, NoSuchElementException, (, ), ;, }, }, public, void, remove, (, ), {, throw, new]
[;, }, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, private, static, void]
[;, }, }, private, static, void, checkBinomial, (, final, int, n, ,, final, int, k, ), throws, NumberIsTooLargeException, ,, NotPositiveException]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., BINOMIAL_INVALID_PARAMETERS_ORDER, ,, k, ,, n, ,, true, ), ;, }, if, (]
[<, k, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., BINOMIAL_INVALID_PARAMETERS_ORDER, ,, k, ,, n, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., BINOMIAL_INVALID_PARAMETERS_ORDER, ,, k, ,, n, ,, true, ), ;, }, if, (]
[;, }, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., BINOMIAL_NEGATIVE_PARAMETER, ,, n, ), ;]
[,, k, ,, n, ,, true, ), ;, }, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[., BINOMIAL_INVALID_PARAMETERS_ORDER, ,, k, ,, n, ,, true, ), ;, }, if, (, n, <, 0, ), {, throw, new]
[,, n, ,, true, ), ;, }, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, .]
[,, true, ), ;, }, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., BINOMIAL_NEGATIVE_PARAMETER, ,]
[), ;, }, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., BINOMIAL_NEGATIVE_PARAMETER, ,, n, )]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., BINOMIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, }, }]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., BINOMIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, }, }]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., BINOMIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, }, }]
[;, }, }, }]
[,, n, ), ;, }, }, }]
[., BINOMIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, }, }]
[), ;, }, }, }]
