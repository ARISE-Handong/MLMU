[), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, [, ], {]
[==, 1, ), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, []
[), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, [, ], {]
[;, }, final, Double, [, ], previousPoints, =, getRuleInternal, (, numberOfPoints, -, 1, ), ., getFirst, (, ), ;, final]
[,, new, Double, [, ], {, 2d, }, ), ;, }, final, Double, [, ], previousPoints, =, getRuleInternal, (, numberOfPoints]
[,, new, Double, [, ], {, 2d, }, ), ;, }, final, Double, [, ], previousPoints, =, getRuleInternal, (, numberOfPoints]
[}, ,, new, Double, [, ], {, 2d, }, ), ;, }, final, Double, [, ], previousPoints, =, getRuleInternal, (]
[), ;, }, final, Double, [, ], previousPoints, =, getRuleInternal, (, numberOfPoints, -, 1, ), ., getFirst, (, ), ;]
[), ;, }, final, Double, [, ], previousPoints, =, getRuleInternal, (, numberOfPoints, -, 1, ), ., getFirst, (, ), ;]
[}, ), ;, }, final, Double, [, ], previousPoints, =, getRuleInternal, (, numberOfPoints, -, 1, ), ., getFirst, (, )]
[;, final, Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;, final, Double, [, ], weights, =, new]
[., getFirst, (, ), ;, final, Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;, final, Double, []
[), ., getFirst, (, ), ;, final, Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;, final, Double]
[-, 1, ), ., getFirst, (, ), ;, final, Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;]
[), ., getFirst, (, ), ;, final, Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;, final, Double]
[;, final, Double, [, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, int, iMax, =, numberOfPoints, /, 2]
[], ;, final, Double, [, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, int, iMax, =, numberOfPoints, /]
[;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;]
[], ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i, <, iMax]
[;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (]
[/, 2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a]
[;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (]
[;, i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, 1]
[;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, 1, :, previousPoints, [, i]
[<, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, 1, :, previousPoints]
[;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, 1, :, previousPoints, [, i]
[), {, double, a, =, (, i, ==, 0, ), ?, -, 1, :, previousPoints, [, i, -, 1, ]]
[++, ), {, double, a, =, (, i, ==, 0, ), ?, -, 1, :, previousPoints, [, i, -, 1]
[;, double, b, =, (, iMax, ==, 1, ), ?, 1, :, previousPoints, [, i, ], ., doubleValue, (, )]
[?, -, 1, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax]
[), ?, -, 1, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (]
[==, 0, ), ?, -, 1, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b]
[), ?, -, 1, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (]
[:, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, )]
[:, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, )]
[;, double, b, =, (, iMax, ==, 1, ), ?, 1, :, previousPoints, [, i, ], ., doubleValue, (, )]
[., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, 1, :, previousPoints, [, i, ]]
[[, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, 1]
[], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, 1, :, previousPoints, [, i]
[-, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, 1, :, previousPoints]
[], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, 1, :, previousPoints, [, i]
[;, double, pma, =, 1, ;, double, pa, =, a, ;, double, pmb, =, 1, ;, double, pb, =, b]
[?, 1, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, pma, =, 1, ;, double, pa, =]
[), ?, 1, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, pma, =, 1, ;, double, pa]
[==, 1, ), ?, 1, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, pma, =, 1, ;]
[), ?, 1, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, pma, =, 1, ;, double, pa]
[:, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, pma, =, 1, ;, double, pa, =, a, ;]
[;, double, pma, =, 1, ;, double, pa, =, a, ;, double, pmb, =, 1, ;, double, pb, =, b]
[., doubleValue, (, ), ;, double, pma, =, 1, ;, double, pa, =, a, ;, double, pmb, =, 1, ;]
[[, i, ], ., doubleValue, (, ), ;, double, pma, =, 1, ;, double, pa, =, a, ;, double, pmb]
[], ., doubleValue, (, ), ;, double, pma, =, 1, ;, double, pa, =, a, ;, double, pmb, =, 1]
[;, double, pa, =, a, ;, double, pmb, =, 1, ;, double, pb, =, b, ;, for, (, int, j]
[;, double, pmb, =, 1, ;, double, pb, =, b, ;, for, (, int, j, =, 1, ;, j, <]
[;, double, pb, =, b, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, )]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, int, two_j_p_1, =]
[;, j, <, numberOfPoints, ;, j, ++, ), {, final, int, two_j_p_1, =, 2, *, j, +, 1, ;, final]
[;, j, ++, ), {, final, int, two_j_p_1, =, 2, *, j, +, 1, ;, final, int, j_p_1, =, j]
[<, numberOfPoints, ;, j, ++, ), {, final, int, two_j_p_1, =, 2, *, j, +, 1, ;, final, int, j_p_1]
[;, j, ++, ), {, final, int, two_j_p_1, =, 2, *, j, +, 1, ;, final, int, j_p_1, =, j]
[), {, final, int, two_j_p_1, =, 2, *, j, +, 1, ;, final, int, j_p_1, =, j, +, 1, ;]
[++, ), {, final, int, two_j_p_1, =, 2, *, j, +, 1, ;, final, int, j_p_1, =, j, +, 1]
[;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (, two_j_p_1, *, a, *, pa, -]
[+, 1, ;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (, two_j_p_1, *, a, *]
[*, j, +, 1, ;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (, two_j_p_1, *]
[+, 1, ;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (, two_j_p_1, *, a, *]
[;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (, two_j_p_1, *, a, *, pa, -]
[;, final, double, ppa, =, (, two_j_p_1, *, a, *, pa, -, j, *, pma, ), /, j_p_1, ;, final]
[+, 1, ;, final, double, ppa, =, (, two_j_p_1, *, a, *, pa, -, j, *, pma, ), /, j_p_1]
[;, final, double, ppa, =, (, two_j_p_1, *, a, *, pa, -, j, *, pma, ), /, j_p_1, ;, final]
[;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *, pmb, ), /, j_p_1, ;, pma]
[/, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *, pmb, ), /, j_p_1]
[), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *, pmb, ), /]
[-, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j]
[*, pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb]
[*, a, *, pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b]
[*, pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb]
[-, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j]
[), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *, pmb, ), /]
[*, pma, ), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *, pmb]
[), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *, pmb, ), /]
[;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *, pmb, ), /, j_p_1, ;, pma]
[;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c]
[/, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }]
[), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;]
[-, j, *, pmb, ), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;]
[*, pb, -, j, *, pmb, ), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =]
[*, b, *, pb, -, j, *, pmb, ), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;]
[*, pb, -, j, *, pmb, ), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =]
[-, j, *, pmb, ), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;]
[), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;]
[*, pmb, ), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =]
[), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;]
[;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c]
[=, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c, =, 0.5]
[;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c, =, 0.5, *, (]
[=, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c, =, 0.5, *, (, a, +]
[;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c, =, 0.5, *, (, a, +, b, )]
[=, pb, ;, pb, =, ppb, ;, }, double, c, =, 0.5, *, (, a, +, b, ), ;, double]
[;, pb, =, ppb, ;, }, double, c, =, 0.5, *, (, a, +, b, ), ;, double, pmc, =]
[=, ppb, ;, }, double, c, =, 0.5, *, (, a, +, b, ), ;, double, pmc, =, 1, ;]
[;, }, double, c, =, 0.5, *, (, a, +, b, ), ;, double, pmc, =, 1, ;, double, pc]
[;, double, pmc, =, 1, ;, double, pc, =, c, ;, boolean, done, =, false, ;, while, (, !, done]
[*, (, a, +, b, ), ;, double, pmc, =, 1, ;, double, pc, =, c, ;, boolean, done, =]
[;, double, pmc, =, 1, ;, double, pc, =, c, ;, boolean, done, =, false, ;, while, (, !, done]
[), ;, double, pmc, =, 1, ;, double, pc, =, c, ;, boolean, done, =, false, ;, while, (, !]
[+, b, ), ;, double, pmc, =, 1, ;, double, pc, =, c, ;, boolean, done, =, false, ;, while]
[), ;, double, pmc, =, 1, ;, double, pc, =, c, ;, boolean, done, =, false, ;, while, (, !]
[;, double, pc, =, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =, b]
[;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =, b, -, a, <=, Math, .]
[;, while, (, !, done, ), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;]
[), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;, pmc, =, 1, ;, pc]
[), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;, pmc, =, 1, ;, pc]
[=, b, -, a, <=, Math, ., ulp, (, c, ), ;, pmc, =, 1, ;, pc, =, c, ;]
[;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[<=, Math, ., ulp, (, c, ), ;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j]
[-, a, <=, Math, ., ulp, (, c, ), ;, pmc, =, 1, ;, pc, =, c, ;, for, (]
[<=, Math, ., ulp, (, c, ), ;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j]
[;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[., ulp, (, c, ), ;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j, =, 1]
[), ;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints]
[=, 1, ;, pc, =, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++]
[;, pc, =, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {]
[=, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =]
[;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (, (, 2, *, j, +, 1]
[;, j, ++, ), {, final, double, ppc, =, (, (, 2, *, j, +, 1, ), *, c, *]
[<, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (, (, 2, *, j, +, 1, ), *]
[;, j, ++, ), {, final, double, ppc, =, (, (, 2, *, j, +, 1, ), *, c, *]
[), {, final, double, ppc, =, (, (, 2, *, j, +, 1, ), *, c, *, pc, -, j]
[++, ), {, final, double, ppc, =, (, (, 2, *, j, +, 1, ), *, c, *, pc, -]
[;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !, done, ), {, if, (, pa, *]
[/, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !, done]
[), /, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !]
[-, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;]
[*, pc, -, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =]
[*, c, *, pc, -, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc, =, pc, ;]
[), *, c, *, pc, -, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc, =, pc]
[+, 1, ), *, c, *, pc, -, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc]
[*, j, +, 1, ), *, c, *, pc, -, j, *, pmc, ), /, (, j, +, 1, )]
[+, 1, ), *, c, *, pc, -, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc]
[), *, c, *, pc, -, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc, =, pc]
[*, pc, -, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =]
[-, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;]
[), /, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !]
[*, pmc, ), /, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if]
[), /, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !]
[;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !, done, ), {, if, (, pa, *]
[), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !, done, ), {, if, (, pa]
[+, 1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !, done, ), {, if]
[), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !, done, ), {, if, (, pa]
[=, pc, ;, pc, =, ppc, ;, }, if, (, !, done, ), {, if, (, pa, *, pc, <=]
[;, pc, =, ppc, ;, }, if, (, !, done, ), {, if, (, pa, *, pc, <=, 0, )]
[=, ppc, ;, }, if, (, !, done, ), {, if, (, pa, *, pc, <=, 0, ), {, b]
[;, }, if, (, !, done, ), {, if, (, pa, *, pc, <=, 0, ), {, b, =, c]
[), {, if, (, pa, *, pc, <=, 0, ), {, b, =, c, ;, pmb, =, pmc, ;, pb]
[), {, if, (, pa, *, pc, <=, 0, ), {, b, =, c, ;, pmb, =, pmc, ;, pb]
[), {, b, =, c, ;, pmb, =, pmc, ;, pb, =, pc, ;, }, else, {, a, =, c]
[<=, 0, ), {, b, =, c, ;, pmb, =, pmc, ;, pb, =, pc, ;, }, else, {, a]
[*, pc, <=, 0, ), {, b, =, c, ;, pmb, =, pmc, ;, pb, =, pc, ;, }, else]
[<=, 0, ), {, b, =, c, ;, pmb, =, pmc, ;, pb, =, pc, ;, }, else, {, a]
[), {, b, =, c, ;, pmb, =, pmc, ;, pb, =, pc, ;, }, else, {, a, =, c]
[=, c, ;, pmb, =, pmc, ;, pb, =, pc, ;, }, else, {, a, =, c, ;, pma, =]
[;, pmb, =, pmc, ;, pb, =, pc, ;, }, else, {, a, =, c, ;, pma, =, pmc, ;]
[=, pmc, ;, pb, =, pc, ;, }, else, {, a, =, c, ;, pma, =, pmc, ;, pa, =]
[;, pb, =, pc, ;, }, else, {, a, =, c, ;, pma, =, pmc, ;, pa, =, pc, ;]
[=, pc, ;, }, else, {, a, =, c, ;, pma, =, pmc, ;, pa, =, pc, ;, }, c]
[;, }, else, {, a, =, c, ;, pma, =, pmc, ;, pa, =, pc, ;, }, c, =, 0.5]
[=, c, ;, pma, =, pmc, ;, pa, =, pc, ;, }, c, =, 0.5, *, (, a, +, b]
[;, pma, =, pmc, ;, pa, =, pc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;]
[=, pmc, ;, pa, =, pc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }]
[;, pa, =, pc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double]
[=, pc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =]
[;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =, numberOfPoints, *]
[=, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =, numberOfPoints, *, (, pmc, -]
[;, }, }, final, double, d, =, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double, w]
[*, (, a, +, b, ), ;, }, }, final, double, d, =, numberOfPoints, *, (, pmc, -, c, *]
[;, }, }, final, double, d, =, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double, w]
[), ;, }, }, final, double, d, =, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double]
[+, b, ), ;, }, }, final, double, d, =, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;]
[), ;, }, }, final, double, d, =, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double]
[;, final, double, w, =, 2, *, (, 1, -, c, *, c, ), /, (, d, *, d, )]
[*, (, pmc, -, c, *, pc, ), ;, final, double, w, =, 2, *, (, 1, -, c, *]
[;, final, double, w, =, 2, *, (, 1, -, c, *, c, ), /, (, d, *, d, )]
[), ;, final, double, w, =, 2, *, (, 1, -, c, *, c, ), /, (, d, *, d]
[-, c, *, pc, ), ;, final, double, w, =, 2, *, (, 1, -, c, *, c, ), /]
[), ;, final, double, w, =, 2, *, (, 1, -, c, *, c, ), /, (, d, *, d]
[*, pc, ), ;, final, double, w, =, 2, *, (, 1, -, c, *, c, ), /, (, d]
[), ;, final, double, w, =, 2, *, (, 1, -, c, *, c, ), /, (, d, *, d]
[;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, numberOfPoints]
[/, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w]
[*, (, 1, -, c, *, c, ), /, (, d, *, d, ), ;, points, [, i, ], =]
[/, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w]
[), /, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights, [, i, ], =]
[-, c, *, c, ), /, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights]
[), /, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights, [, i, ], =]
[*, c, ), /, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights, [, i]
[), /, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights, [, i, ], =]
[;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, numberOfPoints]
[), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =]
[*, d, ), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int]
[), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =]
[=, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;]
[[, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, numberOfPoints, -, i]
[], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1]
[;, weights, [, i, ], =, w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;, points, []
[=, w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;, points, [, idx, ], =, -, c]
[[, i, ], =, w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;, points, [, idx, ]]
[], =, w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;, points, [, idx, ], =, -]
[;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;, points, [, idx, ], =, -, c, ;, weights]
[;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints]
[-, 1, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if]
[-, i, -, 1, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;]
[-, 1, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if]
[;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints]
[=, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, )]
[[, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2]
[], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0]
[;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, pmc]
[;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, pmc]
[=, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, pmc, =, 1, ;, for, (]
[[, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, pmc, =, 1]
[], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, pmc, =, 1, ;, for]
[;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, pmc, =, 1, ;, for, (, int, j]
[), {, double, pmc, =, 1, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=]
[!=, 0, ), {, double, pmc, =, 1, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[%, 2, !=, 0, ), {, double, pmc, =, 1, ;, for, (, int, j, =, 1, ;, j, <]
[!=, 0, ), {, double, pmc, =, 1, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[), {, double, pmc, =, 1, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, pmc, =, -]
[;, j, <, numberOfPoints, ;, j, +=, 2, ), {, pmc, =, -, j, *, pmc, /, (, j, +]
[;, j, +=, 2, ), {, pmc, =, -, j, *, pmc, /, (, j, +, 1, ), ;, }]
[<, numberOfPoints, ;, j, +=, 2, ), {, pmc, =, -, j, *, pmc, /, (, j, +, 1, )]
[;, j, +=, 2, ), {, pmc, =, -, j, *, pmc, /, (, j, +, 1, ), ;, }]
[+=, 2, ), {, pmc, =, -, j, *, pmc, /, (, j, +, 1, ), ;, }, final, double]
[), {, pmc, =, -, j, *, pmc, /, (, j, +, 1, ), ;, }, final, double, d, =]
[=, -, j, *, pmc, /, (, j, +, 1, ), ;, }, final, double, d, =, numberOfPoints, *, pmc]
[;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /, (, d, *, d]
[/, (, j, +, 1, ), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =]
[*, pmc, /, (, j, +, 1, ), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double]
[*, pmc, /, (, j, +, 1, ), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double]
[/, (, j, +, 1, ), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =]
[;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /, (, d, *, d]
[), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /, (, d, *]
[+, 1, ), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /, (]
[), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /, (, d, *]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;]
[*, pmc, ;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;]
[;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <]
[/, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w]
[;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <]
[), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair]
[*, d, ), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return]
[), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair]
[=, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double]
[[, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <, Double, []
[], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <, Double, [, ], ,]
[;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ]]
[=, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, points, ,, weights]
[[, iMax, ], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (]
[], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, points, ,]
[;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, points, ,, weights, ), ;]
[;, }, }]
[,, weights, ), ;, }, }]
[), ;, }, }]
