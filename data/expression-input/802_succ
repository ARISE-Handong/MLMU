[), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentException, (, ex, ., getMessage, (, )]
[||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return]
[==, null, ||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, )]
[||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return]
[), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentException, (, ex, ., getMessage, (, )]
[==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentException, (, ex, ., getMessage]
[., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentException]
[), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentException, (, ex, ., getMessage, (, )]
[;, }, throwCause, (, ex, ), ;, return, new, ConcurrentException, (, ex, ., getMessage, (, ), ,, ex, ., getCause]
[;, return, new, ConcurrentException, (, ex, ., getMessage, (, ), ,, ex, ., getCause, (, ), ), ;, }, public]
[), ;, return, new, ConcurrentException, (, ex, ., getMessage, (, ), ,, ex, ., getCause, (, ), ), ;, }]
[;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if, (, ex, ==, null, ||, ex, .]
[,, ex, ., getCause, (, ), ), ;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if]
[., getMessage, (, ), ,, ex, ., getCause, (, ), ), ;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException]
[), ;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if, (, ex, ==, null, ||, ex]
[., getCause, (, ), ), ;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if, (, ex]
[), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentRuntimeException, (, ex, ., getMessage, (, )]
[||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return]
[==, null, ||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, )]
[||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return]
[), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentRuntimeException, (, ex, ., getMessage, (, )]
[==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentRuntimeException, (, ex, ., getMessage]
[., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentRuntimeException]
[), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentRuntimeException, (, ex, ., getMessage, (, )]
[;, }, throwCause, (, ex, ), ;, return, new, ConcurrentRuntimeException, (, ex, ., getMessage, (, ), ,, ex, ., getCause]
[;, return, new, ConcurrentRuntimeException, (, ex, ., getMessage, (, ), ,, ex, ., getCause, (, ), ), ;, }, public]
[), ;, return, new, ConcurrentRuntimeException, (, ex, ., getMessage, (, ), ,, ex, ., getCause, (, ), ), ;, }]
[;, }, public, static, void, handleCause, (, final, ExecutionException, ex, ), throws, ConcurrentException, {, final, ConcurrentException, cex, =, extractCause, (]
[,, ex, ., getCause, (, ), ), ;, }, public, static, void, handleCause, (, final, ExecutionException, ex, ), throws, ConcurrentException]
[., getMessage, (, ), ,, ex, ., getCause, (, ), ), ;, }, public, static, void, handleCause, (, final, ExecutionException]
[), ;, }, public, static, void, handleCause, (, final, ExecutionException, ex, ), throws, ConcurrentException, {, final, ConcurrentException, cex, =, extractCause]
[., getCause, (, ), ), ;, }, public, static, void, handleCause, (, final, ExecutionException, ex, ), throws, ConcurrentException, {, final]
[;, if, (, cex, !=, null, ), {, throw, cex, ;, }, }, public, static, void, handleCauseUnchecked, (, final, ExecutionException]
[), ;, if, (, cex, !=, null, ), {, throw, cex, ;, }, }, public, static, void, handleCauseUnchecked, (, final]
[), {, throw, cex, ;, }, }, public, static, void, handleCauseUnchecked, (, final, ExecutionException, ex, ), {, final, ConcurrentRuntimeException, crex]
[!=, null, ), {, throw, cex, ;, }, }, public, static, void, handleCauseUnchecked, (, final, ExecutionException, ex, ), {, final]
[), {, throw, cex, ;, }, }, public, static, void, handleCauseUnchecked, (, final, ExecutionException, ex, ), {, final, ConcurrentRuntimeException, crex]
[;, }, }, public, static, void, handleCauseUnchecked, (, final, ExecutionException, ex, ), {, final, ConcurrentRuntimeException, crex, =, extractCauseUnchecked, (, ex]
[;, if, (, crex, !=, null, ), {, throw, crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable, ex]
[), ;, if, (, crex, !=, null, ), {, throw, crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable]
[), {, throw, crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (, ex, !=]
[!=, null, ), {, throw, crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (]
[), {, throw, crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (, ex, !=]
[;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (, ex, !=, null, &&, !, (]
[), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (, "Not a checked exception: ", +, ex, ), ;, }, }, private]
[&&, !, (, ex, instanceof, Error, ), ), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (, "Not a checked exception: "]
[&&, !, (, ex, instanceof, RuntimeException, ), &&, !, (, ex, instanceof, Error, ), ), {, return, ex, ;, }]
[!=, null, &&, !, (, ex, instanceof, RuntimeException, ), &&, !, (, ex, instanceof, Error, ), ), {, return, ex]
[&&, !, (, ex, instanceof, RuntimeException, ), &&, !, (, ex, instanceof, Error, ), ), {, return, ex, ;, }]
[&&, !, (, ex, instanceof, Error, ), ), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (, "Not a checked exception: "]
[&&, !, (, ex, instanceof, Error, ), ), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (, "Not a checked exception: "]
[), &&, !, (, ex, instanceof, Error, ), ), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (]
[instanceof, RuntimeException, ), &&, !, (, ex, instanceof, Error, ), ), {, return, ex, ;, }, else, {, throw, new]
[), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (, "Not a checked exception: ", +, ex, ), ;, }, }, private]
[), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (, "Not a checked exception: ", +, ex, ), ;, }, }, private]
[), ), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (, "Not a checked exception: ", +, ex, ), ;, }, }]
[instanceof, Error, ), ), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (, "Not a checked exception: ", +, ex, ), ;]
[;, }, else, {, throw, new, IllegalArgumentException, (, "Not a checked exception: ", +, ex, ), ;, }, }, private, static, void, throwCause, (]
[;, }, }, private, static, void, throwCause, (, final, ExecutionException, ex, ), {, if, (, ex, ., getCause, (, )]
[), ;, }, }, private, static, void, throwCause, (, final, ExecutionException, ex, ), {, if, (, ex, ., getCause, (]
[+, ex, ), ;, }, }, private, static, void, throwCause, (, final, ExecutionException, ex, ), {, if, (, ex, .]
[), ;, }, }, private, static, void, throwCause, (, final, ExecutionException, ex, ), {, if, (, ex, ., getCause, (]
[), {, throw, (, RuntimeException, ), ex, ., getCause, (, ), ;, }, if, (, ex, ., getCause, (, )]
[instanceof, RuntimeException, ), {, throw, (, RuntimeException, ), ex, ., getCause, (, ), ;, }, if, (, ex, ., getCause]
[., getCause, (, ), instanceof, RuntimeException, ), {, throw, (, RuntimeException, ), ex, ., getCause, (, ), ;, }, if]
[;, }, if, (, ex, ., getCause, (, ), instanceof, Error, ), {, throw, (, Error, ), ex, ., getCause]
[;, }, if, (, ex, ., getCause, (, ), instanceof, Error, ), {, throw, (, Error, ), ex, ., getCause]
[., getCause, (, ), ;, }, if, (, ex, ., getCause, (, ), instanceof, Error, ), {, throw, (, Error]
[), {, throw, (, Error, ), ex, ., getCause, (, ), ;, }, }, public, static, <, T, >, T]
[instanceof, Error, ), {, throw, (, Error, ), ex, ., getCause, (, ), ;, }, }, public, static, <, T]
[., getCause, (, ), instanceof, Error, ), {, throw, (, Error, ), ex, ., getCause, (, ), ;, }, }]
[;, }, }, public, static, <, T, >, T, initialize, (, final, ConcurrentInitializer, <, T, >, initializer, ), throws, ConcurrentException]
[;, }, }, public, static, <, T, >, T, initialize, (, final, ConcurrentInitializer, <, T, >, initializer, ), throws, ConcurrentException]
[., getCause, (, ), ;, }, }, public, static, <, T, >, T, initialize, (, final, ConcurrentInitializer, <, T, >]
[;, }, public, static, <, T, >, T, initializeUnchecked, (, final, ConcurrentInitializer, <, T, >, initializer, ), {, try, {]
[?, initializer, ., get, (, ), :, null, ;, }, public, static, <, T, >, T, initializeUnchecked, (, final, ConcurrentInitializer]
[!=, null, ?, initializer, ., get, (, ), :, null, ;, }, public, static, <, T, >, T, initializeUnchecked, (]
[?, initializer, ., get, (, ), :, null, ;, }, public, static, <, T, >, T, initializeUnchecked, (, final, ConcurrentInitializer]
[:, null, ;, }, public, static, <, T, >, T, initializeUnchecked, (, final, ConcurrentInitializer, <, T, >, initializer, ), {]
[., get, (, ), :, null, ;, }, public, static, <, T, >, T, initializeUnchecked, (, final, ConcurrentInitializer, <, T]
[;, }, public, static, <, T, >, T, initializeUnchecked, (, final, ConcurrentInitializer, <, T, >, initializer, ), {, try, {]
[;, }, catch, (, final, ConcurrentException, cex, ), {, throw, new, ConcurrentRuntimeException, (, cex, ., getCause, (, ), ), ;]
[), ;, }, catch, (, final, ConcurrentException, cex, ), {, throw, new, ConcurrentRuntimeException, (, cex, ., getCause, (, ), )]
[;, }, }, public, static, <, K, ,, V, >, V, putIfAbsent, (, final, ConcurrentMap, <, K, ,, V, >]
[), ;, }, }, public, static, <, K, ,, V, >, V, putIfAbsent, (, final, ConcurrentMap, <, K, ,, V]
[., getCause, (, ), ), ;, }, }, public, static, <, K, ,, V, >, V, putIfAbsent, (, final, ConcurrentMap]
[), {, return, null, ;, }, final, V, result, =, map, ., putIfAbsent, (, key, ,, value, ), ;, return]
[==, null, ), {, return, null, ;, }, final, V, result, =, map, ., putIfAbsent, (, key, ,, value, )]
[), {, return, null, ;, }, final, V, result, =, map, ., putIfAbsent, (, key, ,, value, ), ;, return]
[;, }, final, V, result, =, map, ., putIfAbsent, (, key, ,, value, ), ;, return, result, !=, null, ?]
[;, return, result, !=, null, ?, result, :, value, ;, }, public, static, <, K, ,, V, >, V, createIfAbsent]
[., putIfAbsent, (, key, ,, value, ), ;, return, result, !=, null, ?, result, :, value, ;, }, public, static]
[,, value, ), ;, return, result, !=, null, ?, result, :, value, ;, }, public, static, <, K, ,, V]
[), ;, return, result, !=, null, ?, result, :, value, ;, }, public, static, <, K, ,, V, >, V]
[;, }, public, static, <, K, ,, V, >, V, createIfAbsent, (, final, ConcurrentMap, <, K, ,, V, >, map]
[?, result, :, value, ;, }, public, static, <, K, ,, V, >, V, createIfAbsent, (, final, ConcurrentMap, <, K]
[!=, null, ?, result, :, value, ;, }, public, static, <, K, ,, V, >, V, createIfAbsent, (, final, ConcurrentMap]
[?, result, :, value, ;, }, public, static, <, K, ,, V, >, V, createIfAbsent, (, final, ConcurrentMap, <, K]
[:, value, ;, }, public, static, <, K, ,, V, >, V, createIfAbsent, (, final, ConcurrentMap, <, K, ,, V]
[;, }, public, static, <, K, ,, V, >, V, createIfAbsent, (, final, ConcurrentMap, <, K, ,, V, >, map]
[), {, return, null, ;, }, final, V, value, =, map, ., get, (, key, ), ;, if, (, value]
[||, init, ==, null, ), {, return, null, ;, }, final, V, value, =, map, ., get, (, key, )]
[==, null, ||, init, ==, null, ), {, return, null, ;, }, final, V, value, =, map, ., get, (]
[||, init, ==, null, ), {, return, null, ;, }, final, V, value, =, map, ., get, (, key, )]
[), {, return, null, ;, }, final, V, value, =, map, ., get, (, key, ), ;, if, (, value]
[==, null, ), {, return, null, ;, }, final, V, value, =, map, ., get, (, key, ), ;, if]
[), {, return, null, ;, }, final, V, value, =, map, ., get, (, key, ), ;, if, (, value]
[;, }, final, V, value, =, map, ., get, (, key, ), ;, if, (, value, ==, null, ), {]
[;, if, (, value, ==, null, ), {, return, putIfAbsent, (, map, ,, key, ,, init, ., get, (, )]
[., get, (, key, ), ;, if, (, value, ==, null, ), {, return, putIfAbsent, (, map, ,, key, ,]
[), ;, if, (, value, ==, null, ), {, return, putIfAbsent, (, map, ,, key, ,, init, ., get, (]
[), {, return, putIfAbsent, (, map, ,, key, ,, init, ., get, (, ), ), ;, }, return, value, ;]
[==, null, ), {, return, putIfAbsent, (, map, ,, key, ,, init, ., get, (, ), ), ;, }, return]
[), {, return, putIfAbsent, (, map, ,, key, ,, init, ., get, (, ), ), ;, }, return, value, ;]
[;, }, return, value, ;, }, public, static, <, K, ,, V, >, V, createIfAbsentUnchecked, (, final, ConcurrentMap, <, K]
[,, key, ,, init, ., get, (, ), ), ;, }, return, value, ;, }, public, static, <, K, ,]
[,, init, ., get, (, ), ), ;, }, return, value, ;, }, public, static, <, K, ,, V, >]
[), ;, }, return, value, ;, }, public, static, <, K, ,, V, >, V, createIfAbsentUnchecked, (, final, ConcurrentMap, <]
[., get, (, ), ), ;, }, return, value, ;, }, public, static, <, K, ,, V, >, V, createIfAbsentUnchecked]
[;, }, public, static, <, K, ,, V, >, V, createIfAbsentUnchecked, (, final, ConcurrentMap, <, K, ,, V, >, map]
[;, }, catch, (, final, ConcurrentException, cex, ), {, throw, new, ConcurrentRuntimeException, (, cex, ., getCause, (, ), ), ;]
[,, key, ,, init, ), ;, }, catch, (, final, ConcurrentException, cex, ), {, throw, new, ConcurrentRuntimeException, (, cex, .]
[,, init, ), ;, }, catch, (, final, ConcurrentException, cex, ), {, throw, new, ConcurrentRuntimeException, (, cex, ., getCause, (]
[), ;, }, catch, (, final, ConcurrentException, cex, ), {, throw, new, ConcurrentRuntimeException, (, cex, ., getCause, (, ), )]
[;, }, }, public, static, <, T, >, Future, <, T, >, constantFuture, (, final, T, value, ), {, return]
[), ;, }, }, public, static, <, T, >, Future, <, T, >, constantFuture, (, final, T, value, ), {]
[., getCause, (, ), ), ;, }, }, public, static, <, T, >, Future, <, T, >, constantFuture, (, final]
[;, }, static, final, class, ConstantFuture, <, T, >, implements, Future, <, T, >, {, private, final, T, value, ;]
[), ;, }, static, final, class, ConstantFuture, <, T, >, implements, Future, <, T, >, {, private, final, T, value]
[=, value, ;, }, @, Override, public, boolean, isDone, (, ), {, return, true, ;, }, @, Override, public, T]
[., value, =, value, ;, }, @, Override, public, boolean, isDone, (, ), {, return, true, ;, }, @, Override]
[;, }, @, Override, public, boolean, isDone, (, ), {, return, true, ;, }, @, Override, public, T, get, (]
[;, }, @, Override, public, T, get, (, ), {, return, value, ;, }, @, Override, public, T, get, (]
[;, }, @, Override, public, T, get, (, final, long, timeout, ,, final, TimeUnit, unit, ), {, return, value, ;]
[;, }, @, Override, public, boolean, isCancelled, (, ), {, return, false, ;, }, @, Override, public, boolean, cancel, (]
[;, }, @, Override, public, boolean, cancel, (, final, boolean, mayInterruptIfRunning, ), {, return, false, ;, }, }, }]
[;, }, }, }]
