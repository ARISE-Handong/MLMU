[;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,, "Internal compiler error. Generated bad code.", +, "----------------------------------------\n", +, "Expected:\n{0}\n", +, "----------------------------------------\n", +]
[., error, (, "JSC_CANNOT_PARSE_GENERATED_CODE", ,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,, "Internal compiler error. Generated bad code."]
[,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,, "Internal compiler error. Generated bad code.", +, "----------------------------------------\n", +, "Expected:\n{0}\n"]
[), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,, "Internal compiler error. Generated bad code.", +, "----------------------------------------\n", +, "Expected:\n{0}\n", +, "----------------------------------------\n"]
[;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =, new, AstValidator, (, ), ;, SanityCheck, (, AbstractCompiler, compiler]
[., error, (, "JSC_GENERATED_BAD_CODE", ,, "Internal compiler error. Generated bad code.", +, "----------------------------------------\n", +, "Expected:\n{0}\n", +, "----------------------------------------\n", +, "Actual:\n{1}", ), ;, private, final, AbstractCompiler, compiler]
[,, "Internal compiler error. Generated bad code.", +, "----------------------------------------\n", +, "Expected:\n{0}\n", +, "----------------------------------------\n", +, "Actual:\n{1}", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =, new, AstValidator, (, ), ;, SanityCheck, (, AbstractCompiler]
[+, "Actual:\n{1}", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =, new, AstValidator, (, ), ;, SanityCheck]
[+, "----------------------------------------\n", +, "Actual:\n{1}", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =, new, AstValidator, (, )]
[+, "Expected:\n{0}\n", +, "----------------------------------------\n", +, "Actual:\n{1}", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =, new, AstValidator]
[+, "----------------------------------------\n", +, "Expected:\n{0}\n", +, "----------------------------------------\n", +, "Actual:\n{1}", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =]
[+, "Expected:\n{0}\n", +, "----------------------------------------\n", +, "Actual:\n{1}", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =, new, AstValidator]
[+, "----------------------------------------\n", +, "Actual:\n{1}", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =, new, AstValidator, (, )]
[+, "Actual:\n{1}", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =, new, AstValidator, (, ), ;, SanityCheck]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =, new, AstValidator, (, ), ;, SanityCheck, (, AbstractCompiler]
[;, SanityCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, sanityCheckAst, (, externs]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, sanityCheckAst]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, sanityCheckAst, (, externs, ,, root]
[;, sanityCheckNormalization, (, externs, ,, root, ), ;, sanityCheckCodeGeneration, (, root, ), ;, sanityCheckVars, (, externs, ,, root, ), ;]
[,, root, ), ;, sanityCheckNormalization, (, externs, ,, root, ), ;, sanityCheckCodeGeneration, (, root, ), ;, sanityCheckVars, (, externs, ,]
[), ;, sanityCheckNormalization, (, externs, ,, root, ), ;, sanityCheckCodeGeneration, (, root, ), ;, sanityCheckVars, (, externs, ,, root, )]
[;, sanityCheckCodeGeneration, (, root, ), ;, sanityCheckVars, (, externs, ,, root, ), ;, }, private, void, sanityCheckAst, (, Node, externs]
[,, root, ), ;, sanityCheckCodeGeneration, (, root, ), ;, sanityCheckVars, (, externs, ,, root, ), ;, }, private, void, sanityCheckAst]
[), ;, sanityCheckCodeGeneration, (, root, ), ;, sanityCheckVars, (, externs, ,, root, ), ;, }, private, void, sanityCheckAst, (, Node]
[;, sanityCheckVars, (, externs, ,, root, ), ;, }, private, void, sanityCheckAst, (, Node, externs, ,, Node, root, ), {]
[), ;, sanityCheckVars, (, externs, ,, root, ), ;, }, private, void, sanityCheckAst, (, Node, externs, ,, Node, root, )]
[;, }, private, void, sanityCheckAst, (, Node, externs, ,, Node, root, ), {, astValidator, ., validateCodeRoot, (, externs, ), ;]
[,, root, ), ;, }, private, void, sanityCheckAst, (, Node, externs, ,, Node, root, ), {, astValidator, ., validateCodeRoot, (]
[), ;, }, private, void, sanityCheckAst, (, Node, externs, ,, Node, root, ), {, astValidator, ., validateCodeRoot, (, externs, )]
[;, astValidator, ., validateCodeRoot, (, root, ), ;, }, private, void, sanityCheckVars, (, Node, externs, ,, Node, root, ), {]
[., validateCodeRoot, (, externs, ), ;, astValidator, ., validateCodeRoot, (, root, ), ;, }, private, void, sanityCheckVars, (, Node, externs]
[), ;, astValidator, ., validateCodeRoot, (, root, ), ;, }, private, void, sanityCheckVars, (, Node, externs, ,, Node, root, )]
[;, }, private, void, sanityCheckVars, (, Node, externs, ,, Node, root, ), {, if, (, compiler, ., getLifeCycleStage, (, )]
[., validateCodeRoot, (, root, ), ;, }, private, void, sanityCheckVars, (, Node, externs, ,, Node, root, ), {, if, (]
[), ;, }, private, void, sanityCheckVars, (, Node, externs, ,, Node, root, ), {, if, (, compiler, ., getLifeCycleStage, (]
[), {, (, new, VarCheck, (, compiler, ,, true, ), ), ., process, (, externs, ,, root, ), ;, }]
[., isNormalized, (, ), ), {, (, new, VarCheck, (, compiler, ,, true, ), ), ., process, (, externs, ,]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, (, new, VarCheck, (, compiler, ,, true, ), ), .]
[;, }, }, private, Node, sanityCheckCodeGeneration, (, Node, root, ), {, if, (, compiler, ., hasHaltingErrors, (, ), ), {]
[., process, (, externs, ,, root, ), ;, }, }, private, Node, sanityCheckCodeGeneration, (, Node, root, ), {, if, (]
[), ., process, (, externs, ,, root, ), ;, }, }, private, Node, sanityCheckCodeGeneration, (, Node, root, ), {, if]
[,, true, ), ), ., process, (, externs, ,, root, ), ;, }, }, private, Node, sanityCheckCodeGeneration, (, Node, root]
[), ), ., process, (, externs, ,, root, ), ;, }, }, private, Node, sanityCheckCodeGeneration, (, Node, root, ), {]
[,, root, ), ;, }, }, private, Node, sanityCheckCodeGeneration, (, Node, root, ), {, if, (, compiler, ., hasHaltingErrors, (]
[), ;, }, }, private, Node, sanityCheckCodeGeneration, (, Node, root, ), {, if, (, compiler, ., hasHaltingErrors, (, ), )]
[), {, return, null, ;, }, String, source, =, compiler, ., toSource, (, root, ), ;, Node, root2, =, compiler]
[., hasHaltingErrors, (, ), ), {, return, null, ;, }, String, source, =, compiler, ., toSource, (, root, ), ;]
[;, }, String, source, =, compiler, ., toSource, (, root, ), ;, Node, root2, =, compiler, ., parseSyntheticCode, (, source]
[;, Node, root2, =, compiler, ., parseSyntheticCode, (, source, ), ;, if, (, compiler, ., hasHaltingErrors, (, ), ), {]
[., toSource, (, root, ), ;, Node, root2, =, compiler, ., parseSyntheticCode, (, source, ), ;, if, (, compiler, .]
[), ;, Node, root2, =, compiler, ., parseSyntheticCode, (, source, ), ;, if, (, compiler, ., hasHaltingErrors, (, ), )]
[;, if, (, compiler, ., hasHaltingErrors, (, ), ), {, compiler, ., report, (, JSError, ., make, (, CANNOT_PARSE_GENERATED_CODE, ,]
[., parseSyntheticCode, (, source, ), ;, if, (, compiler, ., hasHaltingErrors, (, ), ), {, compiler, ., report, (, JSError]
[), ;, if, (, compiler, ., hasHaltingErrors, (, ), ), {, compiler, ., report, (, JSError, ., make, (, CANNOT_PARSE_GENERATED_CODE]
[), {, compiler, ., report, (, JSError, ., make, (, CANNOT_PARSE_GENERATED_CODE, ,, Strings, ., truncateAtMaxLength, (, source, ,, 100, ,]
[., hasHaltingErrors, (, ), ), {, compiler, ., report, (, JSError, ., make, (, CANNOT_PARSE_GENERATED_CODE, ,, Strings, ., truncateAtMaxLength, (]
[;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =, compiler, ., toSource, (, root2, ), ;, if]
[., report, (, JSError, ., make, (, CANNOT_PARSE_GENERATED_CODE, ,, Strings, ., truncateAtMaxLength, (, source, ,, 100, ,, true, ), )]
[), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =, compiler, ., toSource, (, root2, ), ;]
[., make, (, CANNOT_PARSE_GENERATED_CODE, ,, Strings, ., truncateAtMaxLength, (, source, ,, 100, ,, true, ), ), ), ;, throw, new]
[,, Strings, ., truncateAtMaxLength, (, source, ,, 100, ,, true, ), ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", )]
[), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =, compiler, ., toSource, (, root2, )]
[., truncateAtMaxLength, (, source, ,, 100, ,, true, ), ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }]
[,, 100, ,, true, ), ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =, compiler]
[,, true, ), ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =, compiler, ., toSource]
[), ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =, compiler, ., toSource, (, root2]
[;, }, String, source2, =, compiler, ., toSource, (, root2, ), ;, if, (, !, source, ., equals, (, source2]
[), ;, }, String, source2, =, compiler, ., toSource, (, root2, ), ;, if, (, !, source, ., equals, (]
[;, if, (, !, source, ., equals, (, source2, ), ), {, compiler, ., report, (, JSError, ., make, (]
[., toSource, (, root2, ), ;, if, (, !, source, ., equals, (, source2, ), ), {, compiler, ., report]
[), ;, if, (, !, source, ., equals, (, source2, ), ), {, compiler, ., report, (, JSError, ., make]
[), {, compiler, ., report, (, JSError, ., make, (, GENERATED_BAD_CODE, ,, source, ,, source2, ), ), ;, throw, new]
[), {, compiler, ., report, (, JSError, ., make, (, GENERATED_BAD_CODE, ,, source, ,, source2, ), ), ;, throw, new]
[., equals, (, source2, ), ), {, compiler, ., report, (, JSError, ., make, (, GENERATED_BAD_CODE, ,, source, ,, source2]
[), ), {, compiler, ., report, (, JSError, ., make, (, GENERATED_BAD_CODE, ,, source, ,, source2, ), ), ;, throw]
[;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, return, root2, ;, }, private, void, sanityCheckNormalization, (, Node, externs, ,]
[., report, (, JSError, ., make, (, GENERATED_BAD_CODE, ,, source, ,, source2, ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed"]
[), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, return, root2, ;, }, private, void, sanityCheckNormalization, (, Node, externs]
[., make, (, GENERATED_BAD_CODE, ,, source, ,, source2, ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, return]
[,, source, ,, source2, ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, return, root2, ;, }, private]
[,, source2, ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, return, root2, ;, }, private, void, sanityCheckNormalization]
[), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, return, root2, ;, }, private, void, sanityCheckNormalization, (, Node]
[;, }, return, root2, ;, }, private, void, sanityCheckNormalization, (, Node, externs, ,, Node, root, ), {, CodeChangeHandler, handler, =]
[), ;, }, return, root2, ;, }, private, void, sanityCheckNormalization, (, Node, externs, ,, Node, root, ), {, CodeChangeHandler, handler]
[;, }, private, void, sanityCheckNormalization, (, Node, externs, ,, Node, root, ), {, CodeChangeHandler, handler, =, new, CodeChangeHandler, ., ForbiddenChange]
[;, compiler, ., addChangeHandler, (, handler, ), ;, new, PrepareAst, (, compiler, ,, true, ), ., process, (, null, ,]
[;, new, PrepareAst, (, compiler, ,, true, ), ., process, (, null, ,, root, ), ;, if, (, compiler, .]
[., addChangeHandler, (, handler, ), ;, new, PrepareAst, (, compiler, ,, true, ), ., process, (, null, ,, root, )]
[), ;, new, PrepareAst, (, compiler, ,, true, ), ., process, (, null, ,, root, ), ;, if, (, compiler]
[;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, (, new, Normalize, (, compiler, ,]
[., process, (, null, ,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), )]
[,, true, ), ., process, (, null, ,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized]
[), ., process, (, null, ,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, (, new, Normalize]
[), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, (, new, Normalize, (, compiler]
[), {, (, new, Normalize, (, compiler, ,, true, ), ), ., process, (, externs, ,, root, ), ;, if]
[., isNormalized, (, ), ), {, (, new, Normalize, (, compiler, ,, true, ), ), ., process, (, externs, ,]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, (, new, Normalize, (, compiler, ,, true, ), ), .]
[;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalizedUnobfuscated, (, ), ), {, boolean, checkUserDeclarations, =, true, ;, CompilerPass]
[., process, (, externs, ,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalizedUnobfuscated, (, ), )]
[), ., process, (, externs, ,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalizedUnobfuscated, (, )]
[,, true, ), ), ., process, (, externs, ,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), .]
[), ), ., process, (, externs, ,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalizedUnobfuscated, (]
[,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalizedUnobfuscated, (, ), ), {, boolean, checkUserDeclarations, =]
[), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalizedUnobfuscated, (, ), ), {, boolean, checkUserDeclarations, =, true, ;]
[), {, boolean, checkUserDeclarations, =, true, ;, CompilerPass, pass, =, new, Normalize, ., VerifyConstants, (, compiler, ,, checkUserDeclarations, ), ;]
[., isNormalizedUnobfuscated, (, ), ), {, boolean, checkUserDeclarations, =, true, ;, CompilerPass, pass, =, new, Normalize, ., VerifyConstants, (, compiler]
[., getLifeCycleStage, (, ), ., isNormalizedUnobfuscated, (, ), ), {, boolean, checkUserDeclarations, =, true, ;, CompilerPass, pass, =, new, Normalize]
[;, CompilerPass, pass, =, new, Normalize, ., VerifyConstants, (, compiler, ,, checkUserDeclarations, ), ;, pass, ., process, (, externs, ,]
[;, pass, ., process, (, externs, ,, root, ), ;, }, }, compiler, ., removeChangeHandler, (, handler, ), ;, }]
[,, checkUserDeclarations, ), ;, pass, ., process, (, externs, ,, root, ), ;, }, }, compiler, ., removeChangeHandler, (, handler]
[), ;, pass, ., process, (, externs, ,, root, ), ;, }, }, compiler, ., removeChangeHandler, (, handler, ), ;]
[;, }, }, compiler, ., removeChangeHandler, (, handler, ), ;, }, }]
[., process, (, externs, ,, root, ), ;, }, }, compiler, ., removeChangeHandler, (, handler, ), ;, }, }]
[,, root, ), ;, }, }, compiler, ., removeChangeHandler, (, handler, ), ;, }, }]
[), ;, }, }, compiler, ., removeChangeHandler, (, handler, ), ;, }, }]
[;, }, }]
[., removeChangeHandler, (, handler, ), ;, }, }]
[), ;, }, }]
