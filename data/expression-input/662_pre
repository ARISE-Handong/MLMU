[Set, ;, class, GroupVariableDeclarations, implements, CompilerPass, ,, ScopedCallback, {, private, final, AbstractCompiler, compiler, ;, GroupVariableDeclarations, (, AbstractCompiler, compiler, ), {]
[Set, ;, class, GroupVariableDeclarations, implements, CompilerPass, ,, ScopedCallback, {, private, final, AbstractCompiler, compiler, ;, GroupVariableDeclarations, (, AbstractCompiler, compiler, ), {]
[implements, CompilerPass, ,, ScopedCallback, {, private, final, AbstractCompiler, compiler, ;, GroupVariableDeclarations, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Set, <, Node, >, varNodes, =]
[this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Set, <, Node, >, varNodes, =]
[), {, Set, <, Node, >, varNodes, =, Sets, ., newLinkedHashSet, (, ), ;, Iterator, <, Var, >, scopeVarIter, =]
[), {, Set, <, Node, >, varNodes, =, Sets, ., newLinkedHashSet, (, ), ;, Iterator, <, Var, >, scopeVarIter, =]
[), {, Set, <, Node, >, varNodes, =, Sets, ., newLinkedHashSet, (, ), ;, Iterator, <, Var, >, scopeVarIter, =]
[), ;, Iterator, <, Var, >, scopeVarIter, =, t, ., getScope, (, ), ., getVars, (, ), ;, while, (]
[), ;, Iterator, <, Var, >, scopeVarIter, =, t, ., getScope, (, ), ., getVars, (, ), ;, while, (]
[getScope, (, ), ., getVars, (, ), ;, while, (, scopeVarIter, ., hasNext, (, ), ), {, Node, parentNode, =]
[getScope, (, ), ., getVars, (, ), ;, while, (, scopeVarIter, ., hasNext, (, ), ), {, Node, parentNode, =]
[getScope, (, ), ., getVars, (, ), ;, while, (, scopeVarIter, ., hasNext, (, ), ), {, Node, parentNode, =]
[hasNext, (, ), ), {, Node, parentNode, =, scopeVarIter, ., next, (, ), ., getParentNode, (, ), ;, if, (]
[hasNext, (, ), ), {, Node, parentNode, =, scopeVarIter, ., next, (, ), ., getParentNode, (, ), ;, if, (]
[=, scopeVarIter, ., next, (, ), ., getParentNode, (, ), ;, if, (, parentNode, ., isVar, (, ), ), {]
[=, scopeVarIter, ., next, (, ), ., getParentNode, (, ), ;, if, (, parentNode, ., isVar, (, ), ), {]
[(, ), ., getParentNode, (, ), ;, if, (, parentNode, ., isVar, (, ), ), {, varNodes, ., add, (]
[if, (, parentNode, ., isVar, (, ), ), {, varNodes, ., add, (, parentNode, ), ;, }, }, if, (]
[if, (, parentNode, ., isVar, (, ), ), {, varNodes, ., add, (, parentNode, ), ;, }, }, if, (]
[if, (, parentNode, ., isVar, (, ), ), {, varNodes, ., add, (, parentNode, ), ;, }, }, if, (]
[), ), {, varNodes, ., add, (, parentNode, ), ;, }, }, if, (, varNodes, ., size, (, ), <=]
[if, (, varNodes, ., size, (, ), <=, 1, ), {, return, ;, }, Iterator, <, Node, >, varNodeIter, =]
[if, (, varNodes, ., size, (, ), <=, 1, ), {, return, ;, }, Iterator, <, Node, >, varNodeIter, =]
[), {, return, ;, }, Iterator, <, Node, >, varNodeIter, =, varNodes, ., iterator, (, ), ;, Node, firstVarNode, =]
[), {, return, ;, }, Iterator, <, Node, >, varNodeIter, =, varNodes, ., iterator, (, ), ;, Node, firstVarNode, =]
[>, varNodeIter, =, varNodes, ., iterator, (, ), ;, Node, firstVarNode, =, varNodeIter, ., next, (, ), ;, while, (]
[>, varNodeIter, =, varNodes, ., iterator, (, ), ;, Node, firstVarNode, =, varNodeIter, ., next, (, ), ;, while, (]
[firstVarNode, =, varNodeIter, ., next, (, ), ;, while, (, varNodeIter, ., hasNext, (, ), ), {, Node, varNode, =]
[firstVarNode, =, varNodeIter, ., next, (, ), ;, while, (, varNodeIter, ., hasNext, (, ), ), {, Node, varNode, =]
[), ;, while, (, varNodeIter, ., hasNext, (, ), ), {, Node, varNode, =, varNodeIter, ., next, (, ), ;]
[while, (, varNodeIter, ., hasNext, (, ), ), {, Node, varNode, =, varNodeIter, ., next, (, ), ;, applyGroupingToVar, (]
[varNodeIter, ., hasNext, (, ), ), {, Node, varNode, =, varNodeIter, ., next, (, ), ;, applyGroupingToVar, (, firstVarNode, ,]
[), {, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[,, Node, parent, ), {, }, private, void, applyGroupingToVar, (, Node, firstVar, ,, Node, groupVar, ), {, Node, child, =]
[,, Node, parent, ), {, }, private, void, applyGroupingToVar, (, Node, firstVar, ,, Node, groupVar, ), {, Node, child, =]
[(, Node, firstVar, ,, Node, groupVar, ), {, Node, child, =, groupVar, ., getFirstChild, (, ), ;, Node, initializedName, =]
[Node, groupVar, ), {, Node, child, =, groupVar, ., getFirstChild, (, ), ;, Node, initializedName, =, null, ;, while, (]
[Node, groupVar, ), {, Node, child, =, groupVar, ., getFirstChild, (, ), ;, Node, initializedName, =, null, ;, while, (]
[), {, Node, child, =, groupVar, ., getFirstChild, (, ), ;, Node, initializedName, =, null, ;, while, (, child, !=]
[groupVar, ., getFirstChild, (, ), ;, Node, initializedName, =, null, ;, while, (, child, !=, null, ), {, if, (]
[groupVar, ., getFirstChild, (, ), ;, Node, initializedName, =, null, ;, while, (, child, !=, null, ), {, if, (]
[null, ;, while, (, child, !=, null, ), {, if, (, child, ., hasChildren, (, ), ), {, if, (]
[null, ;, while, (, child, !=, null, ), {, if, (, child, ., hasChildren, (, ), ), {, if, (]
[while, (, child, !=, null, ), {, if, (, child, ., hasChildren, (, ), ), {, if, (, initializedName, !=]
[{, if, (, child, ., hasChildren, (, ), ), {, if, (, initializedName, !=, null, ), {, return, ;, }]
[(, child, ., hasChildren, (, ), ), {, if, (, initializedName, !=, null, ), {, return, ;, }, initializedName, =]
[hasChildren, (, ), ), {, if, (, initializedName, !=, null, ), {, return, ;, }, initializedName, =, child, ;, }]
[), ), {, if, (, initializedName, !=, null, ), {, return, ;, }, initializedName, =, child, ;, }, child, =]
[), ), {, if, (, initializedName, !=, null, ), {, return, ;, }, initializedName, =, child, ;, }, child, =]
[return, ;, }, initializedName, =, child, ;, }, child, =, child, ., getNext, (, ), ;, }, Node, groupVarParent, =]
[return, ;, }, initializedName, =, child, ;, }, child, =, child, ., getNext, (, ), ;, }, Node, groupVarParent, =]
[child, =, child, ., getNext, (, ), ;, }, Node, groupVarParent, =, groupVar, ., getParent, (, ), ;, if, (]
[child, =, child, ., getNext, (, ), ;, }, Node, groupVarParent, =, groupVar, ., getParent, (, ), ;, if, (]
[child, ., getNext, (, ), ;, }, Node, groupVarParent, =, groupVar, ., getParent, (, ), ;, if, (, initializedName, !=]
[;, }, Node, groupVarParent, =, groupVar, ., getParent, (, ), ;, if, (, initializedName, !=, null, ), {, if, (]
[;, }, Node, groupVarParent, =, groupVar, ., getParent, (, ), ;, if, (, initializedName, !=, null, ), {, if, (]
[=, groupVar, ., getParent, (, ), ;, if, (, initializedName, !=, null, ), {, if, (, NodeUtil, ., isForIn, (]
[!=, null, ), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, ), ), {, return, ;, }, Node, clone, =]
[!=, null, ), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, ), ), {, return, ;, }, Node, clone, =]
[NodeUtil, ., isForIn, (, groupVarParent, ), ), {, return, ;, }, Node, clone, =, initializedName, ., cloneNode, (, ), ;]
[NodeUtil, ., isForIn, (, groupVarParent, ), ), {, return, ;, }, Node, clone, =, initializedName, ., cloneNode, (, ), ;]
[groupVarParent, ), ), {, return, ;, }, Node, clone, =, initializedName, ., cloneNode, (, ), ;, groupVar, ., replaceChild, (]
[), {, return, ;, }, Node, clone, =, initializedName, ., cloneNode, (, ), ;, groupVar, ., replaceChild, (, initializedName, ,]
[clone, =, initializedName, ., cloneNode, (, ), ;, groupVar, ., replaceChild, (, initializedName, ,, clone, ), ;, Node, initializedVal, =]
[clone, =, initializedName, ., cloneNode, (, ), ;, groupVar, ., replaceChild, (, initializedName, ,, clone, ), ;, Node, initializedVal, =]
[., replaceChild, (, initializedName, ,, clone, ), ;, Node, initializedVal, =, initializedName, ., removeFirstChild, (, ), ;, Node, assignmentNode, =]
[., replaceChild, (, initializedName, ,, clone, ), ;, Node, initializedVal, =, initializedName, ., removeFirstChild, (, ), ;, Node, assignmentNode, =]
[,, clone, ), ;, Node, initializedVal, =, initializedName, ., removeFirstChild, (, ), ;, Node, assignmentNode, =, IR, ., assign, (]
[), ;, Node, initializedVal, =, initializedName, ., removeFirstChild, (, ), ;, Node, assignmentNode, =, IR, ., assign, (, initializedName, ,]
[initializedName, ., removeFirstChild, (, ), ;, Node, assignmentNode, =, IR, ., assign, (, initializedName, ,, initializedVal, ), ;, if, (]
[initializedName, ., removeFirstChild, (, ), ;, Node, assignmentNode, =, IR, ., assign, (, initializedName, ,, initializedVal, ), ;, if, (]
[assignmentNode, =, IR, ., assign, (, initializedName, ,, initializedVal, ), ;, if, (, groupVarParent, ., isFor, (, ), ), {]
[assignmentNode, =, IR, ., assign, (, initializedName, ,, initializedVal, ), ;, if, (, groupVarParent, ., isFor, (, ), ), {]
[assign, (, initializedName, ,, initializedVal, ), ;, if, (, groupVarParent, ., isFor, (, ), ), {, groupVarParent, ., replaceChild, (]
[initializedName, ,, initializedVal, ), ;, if, (, groupVarParent, ., isFor, (, ), ), {, groupVarParent, ., replaceChild, (, groupVar, ,]
[isFor, (, ), ), {, groupVarParent, ., replaceChild, (, groupVar, ,, assignmentNode, ), ;, }, else, {, Node, exprNode, =]
[isFor, (, ), ), {, groupVarParent, ., replaceChild, (, groupVar, ,, assignmentNode, ), ;, }, else, {, Node, exprNode, =]
[{, groupVarParent, ., replaceChild, (, groupVar, ,, assignmentNode, ), ;, }, else, {, Node, exprNode, =, NodeUtil, ., newExpr, (]
[replaceChild, (, groupVar, ,, assignmentNode, ), ;, }, else, {, Node, exprNode, =, NodeUtil, ., newExpr, (, assignmentNode, ), ;]
[replaceChild, (, groupVar, ,, assignmentNode, ), ;, }, else, {, Node, exprNode, =, NodeUtil, ., newExpr, (, assignmentNode, ), ;]
[assignmentNode, ), ;, }, else, {, Node, exprNode, =, NodeUtil, ., newExpr, (, assignmentNode, ), ;, groupVarParent, ., replaceChild, (]
[;, }, else, {, Node, exprNode, =, NodeUtil, ., newExpr, (, assignmentNode, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,]
[newExpr, (, assignmentNode, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, exprNode, ), ;, }, }, else, {, if, (]
[newExpr, (, assignmentNode, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, exprNode, ), ;, }, }, else, {, if, (]
[groupVar, ,, exprNode, ), ;, }, }, else, {, if, (, groupVarParent, ., isFor, (, ), ), {, if, (]
[groupVar, ,, exprNode, ), ;, }, }, else, {, if, (, groupVarParent, ., isFor, (, ), ), {, if, (]
[;, }, }, else, {, if, (, groupVarParent, ., isFor, (, ), ), {, if, (, NodeUtil, ., isForIn, (]
[groupVarParent, ., isFor, (, ), ), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, ), ), {, Node, nameNodeClone, =]
[groupVarParent, ., isFor, (, ), ), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, ), ), {, Node, nameNodeClone, =]
[groupVarParent, ., isFor, (, ), ), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, ), ), {, Node, nameNodeClone, =]
[., isForIn, (, groupVarParent, ), ), {, Node, nameNodeClone, =, groupVar, ., getFirstChild, (, ), ., cloneNode, (, ), ;]
[., isForIn, (, groupVarParent, ), ), {, Node, nameNodeClone, =, groupVar, ., getFirstChild, (, ), ., cloneNode, (, ), ;]
[), ), {, Node, nameNodeClone, =, groupVar, ., getFirstChild, (, ), ., cloneNode, (, ), ;, groupVarParent, ., replaceChild, (]
[{, Node, nameNodeClone, =, groupVar, ., getFirstChild, (, ), ., cloneNode, (, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,]
[., cloneNode, (, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, nameNodeClone, ), ;, }, else, {, Node, emptyNode, =]
[., cloneNode, (, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, nameNodeClone, ), ;, }, else, {, Node, emptyNode, =]
[., replaceChild, (, groupVar, ,, nameNodeClone, ), ;, }, else, {, Node, emptyNode, =, IR, ., empty, (, ), ;]
[., replaceChild, (, groupVar, ,, nameNodeClone, ), ;, }, else, {, Node, emptyNode, =, IR, ., empty, (, ), ;]
[,, nameNodeClone, ), ;, }, else, {, Node, emptyNode, =, IR, ., empty, (, ), ;, groupVarParent, ., replaceChild, (]
[), ;, }, else, {, Node, emptyNode, =, IR, ., empty, (, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,]
[=, IR, ., empty, (, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, emptyNode, ), ;, }, }, else, {]
[=, IR, ., empty, (, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, emptyNode, ), ;, }, }, else, {]
[(, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, emptyNode, ), ;, }, }, else, {, groupVarParent, ., removeChild, (]
[,, emptyNode, ), ;, }, }, else, {, groupVarParent, ., removeChild, (, groupVar, ), ;, }, }, Node, children, =]
[,, emptyNode, ), ;, }, }, else, {, groupVarParent, ., removeChild, (, groupVar, ), ;, }, }, Node, children, =]
[else, {, groupVarParent, ., removeChild, (, groupVar, ), ;, }, }, Node, children, =, groupVar, ., removeChildren, (, ), ;]
[else, {, groupVarParent, ., removeChild, (, groupVar, ), ;, }, }, Node, children, =, groupVar, ., removeChildren, (, ), ;]
[removeChild, (, groupVar, ), ;, }, }, Node, children, =, groupVar, ., removeChildren, (, ), ;, firstVar, ., addChildrenToBack, (]
[), ;, }, }, Node, children, =, groupVar, ., removeChildren, (, ), ;, firstVar, ., addChildrenToBack, (, children, ), ;]
[), ;, }, }, Node, children, =, groupVar, ., removeChildren, (, ), ;, firstVar, ., addChildrenToBack, (, children, ), ;]
