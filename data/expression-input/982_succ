[;, private, T, [, ], data, ;, private, final, Field, <, T, >, field, ;, public, ArrayFieldVector, (, final, Field]
[,, 0, ), ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, int, size, ), {, this, .]
[), ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, int, size, ), {, this, ., field, =]
[=, field, ;, this, ., data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, }, public, ArrayFieldVector, (]
[., field, =, field, ;, this, ., data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, }, public]
[;, this, ., data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, }, public, ArrayFieldVector, (, int, size]
[=, MathArrays, ., buildArray, (, field, ,, size, ), ;, }, public, ArrayFieldVector, (, int, size, ,, T, preset, )]
[., data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, }, public, ArrayFieldVector, (, int, size, ,, T]
[;, }, public, ArrayFieldVector, (, int, size, ,, T, preset, ), {, this, (, preset, ., getField, (, ), ,]
[., buildArray, (, field, ,, size, ), ;, }, public, ArrayFieldVector, (, int, size, ,, T, preset, ), {, this]
[,, size, ), ;, }, public, ArrayFieldVector, (, int, size, ,, T, preset, ), {, this, (, preset, ., getField]
[), ;, }, public, ArrayFieldVector, (, int, size, ,, T, preset, ), {, this, (, preset, ., getField, (, )]
[,, size, ), ;, Arrays, ., fill, (, data, ,, preset, ), ;, }, public, ArrayFieldVector, (, T, [, ]]
[., getField, (, ), ,, size, ), ;, Arrays, ., fill, (, data, ,, preset, ), ;, }, public, ArrayFieldVector]
[), ;, Arrays, ., fill, (, data, ,, preset, ), ;, }, public, ArrayFieldVector, (, T, [, ], d, )]
[;, }, public, ArrayFieldVector, (, T, [, ], d, ), throws, NullArgumentException, ,, ZeroException, {, MathUtils, ., checkNotNull, (, d]
[., fill, (, data, ,, preset, ), ;, }, public, ArrayFieldVector, (, T, [, ], d, ), throws, NullArgumentException, ,]
[,, preset, ), ;, }, public, ArrayFieldVector, (, T, [, ], d, ), throws, NullArgumentException, ,, ZeroException, {, MathUtils, .]
[), ;, }, public, ArrayFieldVector, (, T, [, ], d, ), throws, NullArgumentException, ,, ZeroException, {, MathUtils, ., checkNotNull, (]
[;, try, {, field, =, d, [, 0, ], ., getField, (, ), ;, data, =, d, ., clone, (]
[., checkNotNull, (, d, ), ;, try, {, field, =, d, [, 0, ], ., getField, (, ), ;, data]
[), ;, try, {, field, =, d, [, 0, ], ., getField, (, ), ;, data, =, d, ., clone]
[=, d, [, 0, ], ., getField, (, ), ;, data, =, d, ., clone, (, ), ;, }, catch]
[;, data, =, d, ., clone, (, ), ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, ZeroException, (]
[., getField, (, ), ;, data, =, d, ., clone, (, ), ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {]
[[, 0, ], ., getField, (, ), ;, data, =, d, ., clone, (, ), ;, }, catch, (, ArrayIndexOutOfBoundsException]
[], ., getField, (, ), ;, data, =, d, ., clone, (, ), ;, }, catch, (, ArrayIndexOutOfBoundsException, e, )]
[=, d, ., clone, (, ), ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, ZeroException, (, LocalizedFormats, .]
[;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, }, public]
[., clone, (, ), ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, )]
[;, }, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], d, ), throws, NullArgumentException, {]
[), ;, }, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], d, ), throws, NullArgumentException]
[., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], d, )]
[;, this, ., field, =, field, ;, data, =, d, ., clone, (, ), ;, }, public, ArrayFieldVector, (, T]
[., checkNotNull, (, d, ), ;, this, ., field, =, field, ;, data, =, d, ., clone, (, ), ;]
[), ;, this, ., field, =, field, ;, data, =, d, ., clone, (, ), ;, }, public, ArrayFieldVector, (]
[=, field, ;, data, =, d, ., clone, (, ), ;, }, public, ArrayFieldVector, (, T, [, ], d, ,]
[., field, =, field, ;, data, =, d, ., clone, (, ), ;, }, public, ArrayFieldVector, (, T, [, ]]
[;, data, =, d, ., clone, (, ), ;, }, public, ArrayFieldVector, (, T, [, ], d, ,, boolean, copyArray]
[=, d, ., clone, (, ), ;, }, public, ArrayFieldVector, (, T, [, ], d, ,, boolean, copyArray, ), throws]
[;, }, public, ArrayFieldVector, (, T, [, ], d, ,, boolean, copyArray, ), throws, NullArgumentException, ,, ZeroException, {, MathUtils, .]
[., clone, (, ), ;, }, public, ArrayFieldVector, (, T, [, ], d, ,, boolean, copyArray, ), throws, NullArgumentException, ,]
[;, if, (, d, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }]
[., checkNotNull, (, d, ), ;, if, (, d, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats]
[), ;, if, (, d, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, field, =, d, [, 0, ], ., getField]
[==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, field, =, d, [, 0, ]]
[., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, field, =, d, []
[), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, field, =, d, [, 0, ], ., getField]
[;, }, field, =, d, [, 0, ], ., getField, (, ), ;, data, =, copyArray, ?, d, ., clone]
[), ;, }, field, =, d, [, 0, ], ., getField, (, ), ;, data, =, copyArray, ?, d, .]
[., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, field, =, d, [, 0, ], ., getField, (, ), ;, data, =, copyArray, ?]
[=, d, [, 0, ], ., getField, (, ), ;, data, =, copyArray, ?, d, ., clone, (, ), :]
[;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;, }, public, ArrayFieldVector, (, Field, <, T]
[., getField, (, ), ;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;, }, public, ArrayFieldVector]
[[, 0, ], ., getField, (, ), ;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;]
[], ., getField, (, ), ;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;, }, public]
[=, copyArray, ?, d, ., clone, (, ), :, d, ;, }, public, ArrayFieldVector, (, Field, <, T, >, field]
[;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], d, ,, boolean, copyArray, ), throws]
[?, d, ., clone, (, ), :, d, ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T]
[:, d, ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], d, ,, boolean, copyArray]
[., clone, (, ), :, d, ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ]]
[;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], d, ,, boolean, copyArray, ), throws]
[;, this, ., field, =, field, ;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;, }]
[., checkNotNull, (, d, ), ;, this, ., field, =, field, ;, data, =, copyArray, ?, d, ., clone, (]
[), ;, this, ., field, =, field, ;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;]
[=, field, ;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;, }, public, ArrayFieldVector, (, T]
[., field, =, field, ;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;, }, public, ArrayFieldVector]
[;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;, }, public, ArrayFieldVector, (, T, [, ]]
[=, copyArray, ?, d, ., clone, (, ), :, d, ;, }, public, ArrayFieldVector, (, T, [, ], d, ,]
[;, }, public, ArrayFieldVector, (, T, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException]
[?, d, ., clone, (, ), :, d, ;, }, public, ArrayFieldVector, (, T, [, ], d, ,, int, pos]
[:, d, ;, }, public, ArrayFieldVector, (, T, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException]
[., clone, (, ), :, d, ;, }, public, ArrayFieldVector, (, T, [, ], d, ,, int, pos, ,, int]
[;, }, public, ArrayFieldVector, (, T, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException]
[;, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,]
[., checkNotNull, (, d, ), ;, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException]
[), ;, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, field, =]
[<, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, )]
[., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, field, =]
[+, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, field, =]
[;, }, field, =, d, [, 0, ], ., getField, (, ), ;, data, =, MathArrays, ., buildArray, (, field]
[,, d, ., length, ,, true, ), ;, }, field, =, d, [, 0, ], ., getField, (, ), ;]
[+, size, ,, d, ., length, ,, true, ), ;, }, field, =, d, [, 0, ], ., getField, (]
[,, d, ., length, ,, true, ), ;, }, field, =, d, [, 0, ], ., getField, (, ), ;]
[,, true, ), ;, }, field, =, d, [, 0, ], ., getField, (, ), ;, data, =, MathArrays, .]
[., length, ,, true, ), ;, }, field, =, d, [, 0, ], ., getField, (, ), ;, data, =]
[), ;, }, field, =, d, [, 0, ], ., getField, (, ), ;, data, =, MathArrays, ., buildArray, (]
[=, d, [, 0, ], ., getField, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, size, )]
[;, data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, System, ., arraycopy, (, d, ,, pos, ,]
[., getField, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, System, ., arraycopy, (]
[[, 0, ], ., getField, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, System]
[], ., getField, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, System, ., arraycopy]
[=, MathArrays, ., buildArray, (, field, ,, size, ), ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,]
[;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayFieldVector, (]
[., buildArray, (, field, ,, size, ), ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,]
[,, size, ), ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size, ), ;, }]
[), ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayFieldVector]
[;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], d, ,, int, pos, ,, int]
[., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayFieldVector, (, Field, <]
[,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,]
[,, data, ,, 0, ,, size, ), ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, []
[,, 0, ,, size, ), ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], d]
[,, size, ), ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], d, ,, int]
[), ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], d, ,, int, pos, ,]
[;, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,]
[., checkNotNull, (, d, ), ;, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException]
[), ;, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, this, .]
[<, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, )]
[., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, this, .]
[+, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, this, .]
[;, }, this, ., field, =, field, ;, data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, System]
[,, d, ., length, ,, true, ), ;, }, this, ., field, =, field, ;, data, =, MathArrays, ., buildArray]
[+, size, ,, d, ., length, ,, true, ), ;, }, this, ., field, =, field, ;, data, =, MathArrays]
[,, d, ., length, ,, true, ), ;, }, this, ., field, =, field, ;, data, =, MathArrays, ., buildArray]
[,, true, ), ;, }, this, ., field, =, field, ;, data, =, MathArrays, ., buildArray, (, field, ,, size]
[., length, ,, true, ), ;, }, this, ., field, =, field, ;, data, =, MathArrays, ., buildArray, (, field]
[), ;, }, this, ., field, =, field, ;, data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;]
[=, field, ;, data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, System, ., arraycopy, (, d, ,]
[., field, =, field, ;, data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, System, ., arraycopy, (]
[;, data, =, MathArrays, ., buildArray, (, field, ,, size, ), ;, System, ., arraycopy, (, d, ,, pos, ,]
[=, MathArrays, ., buildArray, (, field, ,, size, ), ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,]
[;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayFieldVector, (]
[., buildArray, (, field, ,, size, ), ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,]
[,, size, ), ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size, ), ;, }]
[), ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayFieldVector]
[;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, v, )]
[., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayFieldVector, (, FieldVector, <]
[,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v, )]
[,, data, ,, 0, ,, size, ), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v, ), throws, NullArgumentException]
[,, 0, ,, size, ), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v, ), throws, NullArgumentException, {, MathUtils]
[,, size, ), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull]
[), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, v]
[;, field, =, v, ., getField, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v, ., getDimension]
[., checkNotNull, (, v, ), ;, field, =, v, ., getField, (, ), ;, data, =, MathArrays, ., buildArray, (]
[), ;, field, =, v, ., getField, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v, .]
[=, v, ., getField, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v, ., getDimension, (, )]
[;, data, =, MathArrays, ., buildArray, (, field, ,, v, ., getDimension, (, ), ), ;, for, (, int, i]
[., getField, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v, ., getDimension, (, ), ), ;]
[=, MathArrays, ., buildArray, (, field, ,, v, ., getDimension, (, ), ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, data, []
[., buildArray, (, field, ,, v, ., getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i]
[,, v, ., getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, data]
[., getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[;, i, <, data, ., length, ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (]
[;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, ), ;, }, }, public]
[<, data, ., length, ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, )]
[;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, ), ;, }, }, public]
[., length, ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, ), ;, }]
[), {, data, [, i, ], =, v, ., getEntry, (, i, ), ;, }, }, public, ArrayFieldVector, (, ArrayFieldVector]
[), {, data, [, i, ], =, v, ., getEntry, (, i, ), ;, }, }, public, ArrayFieldVector, (, ArrayFieldVector]
[=, v, ., getEntry, (, i, ), ;, }, }, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v, ), throws]
[[, i, ], =, v, ., getEntry, (, i, ), ;, }, }, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >]
[], =, v, ., getEntry, (, i, ), ;, }, }, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v, )]
[;, }, }, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, v]
[., getEntry, (, i, ), ;, }, }, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v, ), throws, NullArgumentException, {]
[), ;, }, }, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[;, field, =, v, ., getField, (, ), ;, data, =, v, ., data, ., clone, (, ), ;, }]
[., checkNotNull, (, v, ), ;, field, =, v, ., getField, (, ), ;, data, =, v, ., data, .]
[), ;, field, =, v, ., getField, (, ), ;, data, =, v, ., data, ., clone, (, ), ;]
[=, v, ., getField, (, ), ;, data, =, v, ., data, ., clone, (, ), ;, }, public, ArrayFieldVector]
[;, data, =, v, ., data, ., clone, (, ), ;, }, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v]
[., getField, (, ), ;, data, =, v, ., data, ., clone, (, ), ;, }, public, ArrayFieldVector, (, ArrayFieldVector]
[=, v, ., data, ., clone, (, ), ;, }, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v, ,, boolean]
[;, }, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v, ,, boolean, deep, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull]
[., clone, (, ), ;, }, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v, ,, boolean, deep, ), throws, NullArgumentException]
[., data, ., clone, (, ), ;, }, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v, ,, boolean, deep, )]
[;, field, =, v, ., getField, (, ), ;, data, =, deep, ?, v, ., data, ., clone, (, )]
[., checkNotNull, (, v, ), ;, field, =, v, ., getField, (, ), ;, data, =, deep, ?, v, .]
[), ;, field, =, v, ., getField, (, ), ;, data, =, deep, ?, v, ., data, ., clone, (]
[=, v, ., getField, (, ), ;, data, =, deep, ?, v, ., data, ., clone, (, ), :, v]
[;, data, =, deep, ?, v, ., data, ., clone, (, ), :, v, ., data, ;, }, @, Deprecated]
[., getField, (, ), ;, data, =, deep, ?, v, ., data, ., clone, (, ), :, v, ., data]
[=, deep, ?, v, ., data, ., clone, (, ), :, v, ., data, ;, }, @, Deprecated, public, ArrayFieldVector]
[;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v1, ,, ArrayFieldVector, <, T, >, v2, ), throws]
[?, v, ., data, ., clone, (, ), :, v, ., data, ;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector]
[:, v, ., data, ;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v1, ,, ArrayFieldVector, <, T]
[., clone, (, ), :, v, ., data, ;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v1]
[., data, ., clone, (, ), :, v, ., data, ;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T]
[;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v1, ,, ArrayFieldVector, <, T, >, v2, ), throws]
[., data, ;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v1, ,, ArrayFieldVector, <, T, >, v2]
[,, (, FieldVector, <, T, >, ), v2, ), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v1, ,]
[,, (, FieldVector, <, T, >, ), v2, ), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v1, ,]
[), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v1, ,, FieldVector, <, T, >, v2, ), throws, NullArgumentException]
[), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v1, ,, FieldVector, <, T, >, v2, ), throws, NullArgumentException]
[;, MathUtils, ., checkNotNull, (, v2, ), ;, field, =, v1, ., getField, (, ), ;, final, T, [, ]]
[., checkNotNull, (, v1, ), ;, MathUtils, ., checkNotNull, (, v2, ), ;, field, =, v1, ., getField, (, )]
[), ;, MathUtils, ., checkNotNull, (, v2, ), ;, field, =, v1, ., getField, (, ), ;, final, T, []
[;, field, =, v1, ., getField, (, ), ;, final, T, [, ], v1Data, =, (, v1, instanceof, ArrayFieldVector, )]
[., checkNotNull, (, v2, ), ;, field, =, v1, ., getField, (, ), ;, final, T, [, ], v1Data, =]
[), ;, field, =, v1, ., getField, (, ), ;, final, T, [, ], v1Data, =, (, v1, instanceof, ArrayFieldVector]
[=, v1, ., getField, (, ), ;, final, T, [, ], v1Data, =, (, v1, instanceof, ArrayFieldVector, ), ?, (]
[;, final, T, [, ], v1Data, =, (, v1, instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector, <, T, >, )]
[., getField, (, ), ;, final, T, [, ], v1Data, =, (, v1, instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector]
[;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector, <, T, >, )]
[?, (, (, ArrayFieldVector, <, T, >, ), v1, ), ., data, :, v1, ., toArray, (, ), ;, final]
[), ?, (, (, ArrayFieldVector, <, T, >, ), v1, ), ., data, :, v1, ., toArray, (, ), ;]
[instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector, <, T, >, ), v1, ), ., data, :, v1, ., toArray, (]
[:, v1, ., toArray, (, ), ;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector, ), ?, (]
[., data, :, v1, ., toArray, (, ), ;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector, )]
[), ., data, :, v1, ., toArray, (, ), ;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector]
[), ., data, :, v1, ., toArray, (, ), ;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector]
[;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector, <, T, >, )]
[., toArray, (, ), ;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector]
[;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, ., length, +, v2Data, ., length, ), ;, System, .]
[?, (, (, ArrayFieldVector, <, T, >, ), v2, ), ., data, :, v2, ., toArray, (, ), ;, data]
[), ?, (, (, ArrayFieldVector, <, T, >, ), v2, ), ., data, :, v2, ., toArray, (, ), ;]
[instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector, <, T, >, ), v2, ), ., data, :, v2, ., toArray, (]
[:, v2, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, ., length, +, v2Data]
[., data, :, v2, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, ., length]
[), ., data, :, v2, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, .]
[), ., data, :, v2, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, .]
[;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, ., length, +, v2Data, ., length, ), ;, System, .]
[., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, ., length, +, v2Data, ., length]
[=, MathArrays, ., buildArray, (, field, ,, v1Data, ., length, +, v2Data, ., length, ), ;, System, ., arraycopy, (]
[;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, ., length, ), ;, System, .]
[., buildArray, (, field, ,, v1Data, ., length, +, v2Data, ., length, ), ;, System, ., arraycopy, (, v1Data, ,]
[,, v1Data, ., length, +, v2Data, ., length, ), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,]
[), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, ., length, ), ;, System]
[+, v2Data, ., length, ), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, .]
[., length, +, v2Data, ., length, ), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,]
[), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, ., length, ), ;, System]
[., length, ), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, ., length, )]
[;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1Data, ., length, ,, v2Data, ., length, ), ;]
[., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, ., length, ), ;, System, ., arraycopy, (]
[,, 0, ,, data, ,, 0, ,, v1Data, ., length, ), ;, System, ., arraycopy, (, v2Data, ,, 0, ,]
[,, data, ,, 0, ,, v1Data, ., length, ), ;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,]
[,, 0, ,, v1Data, ., length, ), ;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1Data, .]
[,, v1Data, ., length, ), ;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1Data, ., length, ,]
[), ;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1Data, ., length, ,, v2Data, ., length, )]
[., length, ), ;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1Data, ., length, ,, v2Data, .]
[;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v1, ,, T, [, ], v2, ), throws, NullArgumentException]
[., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1Data, ., length, ,, v2Data, ., length, ), ;, }, @]
[,, 0, ,, data, ,, v1Data, ., length, ,, v2Data, ., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (]
[,, data, ,, v1Data, ., length, ,, v2Data, ., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <]
[,, v1Data, ., length, ,, v2Data, ., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >]
[,, v2Data, ., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v1, ,, T, []
[., length, ,, v2Data, ., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v1, ,]
[), ;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v1, ,, T, [, ], v2, ), throws]
[., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (, ArrayFieldVector, <, T, >, v1, ,, T, [, ], v2]
[,, v2, ), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v1, ,, T, [, ], v2, ), throws]
[,, v2, ), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v1, ,, T, [, ], v2, ), throws]
[), ;, }, public, ArrayFieldVector, (, FieldVector, <, T, >, v1, ,, T, [, ], v2, ), throws, NullArgumentException, {]
[;, MathUtils, ., checkNotNull, (, v2, ), ;, field, =, v1, ., getField, (, ), ;, final, T, [, ]]
[., checkNotNull, (, v1, ), ;, MathUtils, ., checkNotNull, (, v2, ), ;, field, =, v1, ., getField, (, )]
[), ;, MathUtils, ., checkNotNull, (, v2, ), ;, field, =, v1, ., getField, (, ), ;, final, T, []
[;, field, =, v1, ., getField, (, ), ;, final, T, [, ], v1Data, =, (, v1, instanceof, ArrayFieldVector, )]
[., checkNotNull, (, v2, ), ;, field, =, v1, ., getField, (, ), ;, final, T, [, ], v1Data, =]
[), ;, field, =, v1, ., getField, (, ), ;, final, T, [, ], v1Data, =, (, v1, instanceof, ArrayFieldVector]
[=, v1, ., getField, (, ), ;, final, T, [, ], v1Data, =, (, v1, instanceof, ArrayFieldVector, ), ?, (]
[;, final, T, [, ], v1Data, =, (, v1, instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector, <, T, >, )]
[., getField, (, ), ;, final, T, [, ], v1Data, =, (, v1, instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector]
[;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, ., length, +, v2, ., length, ), ;, System, .]
[?, (, (, ArrayFieldVector, <, T, >, ), v1, ), ., data, :, v1, ., toArray, (, ), ;, data]
[), ?, (, (, ArrayFieldVector, <, T, >, ), v1, ), ., data, :, v1, ., toArray, (, ), ;]
[instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector, <, T, >, ), v1, ), ., data, :, v1, ., toArray, (]
[:, v1, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, ., length, +, v2]
[., data, :, v1, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, ., length]
[), ., data, :, v1, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, .]
[), ., data, :, v1, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, .]
[;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, ., length, +, v2, ., length, ), ;, System, .]
[., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1Data, ., length, +, v2, ., length]
[=, MathArrays, ., buildArray, (, field, ,, v1Data, ., length, +, v2, ., length, ), ;, System, ., arraycopy, (]
[;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, ., length, ), ;, System, .]
[., buildArray, (, field, ,, v1Data, ., length, +, v2, ., length, ), ;, System, ., arraycopy, (, v1Data, ,]
[,, v1Data, ., length, +, v2, ., length, ), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,]
[), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, ., length, ), ;, System]
[+, v2, ., length, ), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, .]
[., length, +, v2, ., length, ), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,]
[), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, ., length, ), ;, System]
[., length, ), ;, System, ., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, ., length, )]
[;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1Data, ., length, ,, v2, ., length, ), ;]
[., arraycopy, (, v1Data, ,, 0, ,, data, ,, 0, ,, v1Data, ., length, ), ;, System, ., arraycopy, (]
[,, 0, ,, data, ,, 0, ,, v1Data, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,]
[,, data, ,, 0, ,, v1Data, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,]
[,, 0, ,, v1Data, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1Data, .]
[,, v1Data, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1Data, ., length, ,]
[), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1Data, ., length, ,, v2, ., length, )]
[., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1Data, ., length, ,, v2, .]
[;, }, @, Deprecated, public, ArrayFieldVector, (, T, [, ], v1, ,, ArrayFieldVector, <, T, >, v2, ), throws, NullArgumentException]
[., arraycopy, (, v2, ,, 0, ,, data, ,, v1Data, ., length, ,, v2, ., length, ), ;, }, @]
[,, 0, ,, data, ,, v1Data, ., length, ,, v2, ., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (]
[,, data, ,, v1Data, ., length, ,, v2, ., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (, T, []
[,, v1Data, ., length, ,, v2, ., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (, T, [, ], v1]
[,, v2, ., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (, T, [, ], v1, ,, ArrayFieldVector, <, T]
[., length, ,, v2, ., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (, T, [, ], v1, ,, ArrayFieldVector]
[), ;, }, @, Deprecated, public, ArrayFieldVector, (, T, [, ], v1, ,, ArrayFieldVector, <, T, >, v2, ), throws]
[., length, ), ;, }, @, Deprecated, public, ArrayFieldVector, (, T, [, ], v1, ,, ArrayFieldVector, <, T, >, v2]
[,, (, FieldVector, <, T, >, ), v2, ), ;, }, public, ArrayFieldVector, (, T, [, ], v1, ,, FieldVector]
[), ;, }, public, ArrayFieldVector, (, T, [, ], v1, ,, FieldVector, <, T, >, v2, ), throws, NullArgumentException, {]
[), ;, }, public, ArrayFieldVector, (, T, [, ], v1, ,, FieldVector, <, T, >, v2, ), throws, NullArgumentException, {]
[;, MathUtils, ., checkNotNull, (, v2, ), ;, field, =, v2, ., getField, (, ), ;, final, T, [, ]]
[., checkNotNull, (, v1, ), ;, MathUtils, ., checkNotNull, (, v2, ), ;, field, =, v2, ., getField, (, )]
[), ;, MathUtils, ., checkNotNull, (, v2, ), ;, field, =, v2, ., getField, (, ), ;, final, T, []
[;, field, =, v2, ., getField, (, ), ;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector, )]
[., checkNotNull, (, v2, ), ;, field, =, v2, ., getField, (, ), ;, final, T, [, ], v2Data, =]
[), ;, field, =, v2, ., getField, (, ), ;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector]
[=, v2, ., getField, (, ), ;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector, ), ?, (]
[;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector, <, T, >, )]
[., getField, (, ), ;, final, T, [, ], v2Data, =, (, v2, instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector]
[;, data, =, MathArrays, ., buildArray, (, field, ,, v1, ., length, +, v2Data, ., length, ), ;, System, .]
[?, (, (, ArrayFieldVector, <, T, >, ), v2, ), ., data, :, v2, ., toArray, (, ), ;, data]
[), ?, (, (, ArrayFieldVector, <, T, >, ), v2, ), ., data, :, v2, ., toArray, (, ), ;]
[instanceof, ArrayFieldVector, ), ?, (, (, ArrayFieldVector, <, T, >, ), v2, ), ., data, :, v2, ., toArray, (]
[:, v2, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1, ., length, +, v2Data]
[., data, :, v2, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1, ., length]
[), ., data, :, v2, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1, .]
[), ., data, :, v2, ., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1, .]
[;, data, =, MathArrays, ., buildArray, (, field, ,, v1, ., length, +, v2Data, ., length, ), ;, System, .]
[., toArray, (, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, v1, ., length, +, v2Data, ., length]
[=, MathArrays, ., buildArray, (, field, ,, v1, ., length, +, v2Data, ., length, ), ;, System, ., arraycopy, (]
[;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System, .]
[., buildArray, (, field, ,, v1, ., length, +, v2Data, ., length, ), ;, System, ., arraycopy, (, v1, ,]
[,, v1, ., length, +, v2Data, ., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,]
[), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System]
[+, v2Data, ., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, .]
[., length, +, v2Data, ., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,]
[), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System]
[., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, )]
[;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1, ., length, ,, v2Data, ., length, ), ;]
[., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (]
[,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (, v2Data, ,, 0, ,]
[,, data, ,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,]
[,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1, .]
[,, v1, ., length, ), ;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1, ., length, ,]
[), ;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1, ., length, ,, v2Data, ., length, )]
[., length, ), ;, System, ., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1, ., length, ,, v2Data, .]
[;, }, public, ArrayFieldVector, (, T, [, ], v1, ,, T, [, ], v2, ), throws, NullArgumentException, ,, ZeroException, {]
[., arraycopy, (, v2Data, ,, 0, ,, data, ,, v1, ., length, ,, v2Data, ., length, ), ;, }, public]
[,, 0, ,, data, ,, v1, ., length, ,, v2Data, ., length, ), ;, }, public, ArrayFieldVector, (, T, []
[,, data, ,, v1, ., length, ,, v2Data, ., length, ), ;, }, public, ArrayFieldVector, (, T, [, ], v1]
[,, v1, ., length, ,, v2Data, ., length, ), ;, }, public, ArrayFieldVector, (, T, [, ], v1, ,, T]
[,, v2Data, ., length, ), ;, }, public, ArrayFieldVector, (, T, [, ], v1, ,, T, [, ], v2, )]
[., length, ,, v2Data, ., length, ), ;, }, public, ArrayFieldVector, (, T, [, ], v1, ,, T, [, ]]
[), ;, }, public, ArrayFieldVector, (, T, [, ], v1, ,, T, [, ], v2, ), throws, NullArgumentException, ,, ZeroException]
[., length, ), ;, }, public, ArrayFieldVector, (, T, [, ], v1, ,, T, [, ], v2, ), throws, NullArgumentException]
[;, MathUtils, ., checkNotNull, (, v2, ), ;, if, (, v1, ., length, +, v2, ., length, ==, 0, )]
[., checkNotNull, (, v1, ), ;, MathUtils, ., checkNotNull, (, v2, ), ;, if, (, v1, ., length, +, v2]
[), ;, MathUtils, ., checkNotNull, (, v2, ), ;, if, (, v1, ., length, +, v2, ., length, ==, 0]
[;, if, (, v1, ., length, +, v2, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, .]
[., checkNotNull, (, v2, ), ;, if, (, v1, ., length, +, v2, ., length, ==, 0, ), {, throw]
[), ;, if, (, v1, ., length, +, v2, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, ., buildArray, (, v1, []
[==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, ., buildArray, (]
[+, v2, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =]
[., length, +, v2, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }]
[==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, ., buildArray, (]
[., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, .]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, ., buildArray, (, v1, []
[;, }, data, =, MathArrays, ., buildArray, (, v1, [, 0, ], ., getField, (, ), ,, v1, ., length]
[), ;, }, data, =, MathArrays, ., buildArray, (, v1, [, 0, ], ., getField, (, ), ,, v1, .]
[., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, ., buildArray, (, v1, [, 0, ], ., getField, (, ), ,]
[=, MathArrays, ., buildArray, (, v1, [, 0, ], ., getField, (, ), ,, v1, ., length, +, v2, .]
[;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System, .]
[., buildArray, (, v1, [, 0, ], ., getField, (, ), ,, v1, ., length, +, v2, ., length, )]
[,, v1, ., length, +, v2, ., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,]
[., getField, (, ), ,, v1, ., length, +, v2, ., length, ), ;, System, ., arraycopy, (, v1, ,]
[[, 0, ], ., getField, (, ), ,, v1, ., length, +, v2, ., length, ), ;, System, ., arraycopy]
[], ., getField, (, ), ,, v1, ., length, +, v2, ., length, ), ;, System, ., arraycopy, (, v1]
[), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System]
[+, v2, ., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, .]
[., length, +, v2, ., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,]
[), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System]
[., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, )]
[;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1, ., length, ,, v2, ., length, ), ;]
[., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (]
[,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,]
[,, data, ,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,]
[,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1, .]
[,, v1, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1, ., length, ,]
[), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1, ., length, ,, v2, ., length, )]
[., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1, ., length, ,, v2, .]
[;, field, =, data, [, 0, ], ., getField, (, ), ;, }, public, ArrayFieldVector, (, Field, <, T, >]
[., arraycopy, (, v2, ,, 0, ,, data, ,, v1, ., length, ,, v2, ., length, ), ;, field, =]
[,, 0, ,, data, ,, v1, ., length, ,, v2, ., length, ), ;, field, =, data, [, 0, ]]
[,, data, ,, v1, ., length, ,, v2, ., length, ), ;, field, =, data, [, 0, ], ., getField]
[,, v1, ., length, ,, v2, ., length, ), ;, field, =, data, [, 0, ], ., getField, (, )]
[,, v2, ., length, ), ;, field, =, data, [, 0, ], ., getField, (, ), ;, }, public, ArrayFieldVector]
[., length, ,, v2, ., length, ), ;, field, =, data, [, 0, ], ., getField, (, ), ;, }]
[), ;, field, =, data, [, 0, ], ., getField, (, ), ;, }, public, ArrayFieldVector, (, Field, <, T]
[., length, ), ;, field, =, data, [, 0, ], ., getField, (, ), ;, }, public, ArrayFieldVector, (, Field]
[=, data, [, 0, ], ., getField, (, ), ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,]
[;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], v1, ,, T, [, ], v2]
[., getField, (, ), ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], v1, ,]
[[, 0, ], ., getField, (, ), ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, []
[], ., getField, (, ), ;, }, public, ArrayFieldVector, (, Field, <, T, >, field, ,, T, [, ], v1]
[;, MathUtils, ., checkNotNull, (, v2, ), ;, if, (, v1, ., length, +, v2, ., length, ==, 0, )]
[., checkNotNull, (, v1, ), ;, MathUtils, ., checkNotNull, (, v2, ), ;, if, (, v1, ., length, +, v2]
[), ;, MathUtils, ., checkNotNull, (, v2, ), ;, if, (, v1, ., length, +, v2, ., length, ==, 0]
[;, if, (, v1, ., length, +, v2, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, .]
[., checkNotNull, (, v2, ), ;, if, (, v1, ., length, +, v2, ., length, ==, 0, ), {, throw]
[), ;, if, (, v1, ., length, +, v2, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, ., buildArray, (, field, ,]
[==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, ., buildArray, (]
[+, v2, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =]
[., length, +, v2, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }]
[==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, ., buildArray, (]
[., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, .]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, ., buildArray, (, field, ,]
[;, }, data, =, MathArrays, ., buildArray, (, field, ,, v1, ., length, +, v2, ., length, ), ;, System]
[), ;, }, data, =, MathArrays, ., buildArray, (, field, ,, v1, ., length, +, v2, ., length, ), ;]
[., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, data, =, MathArrays, ., buildArray, (, field, ,, v1, ., length, +, v2, ., length]
[=, MathArrays, ., buildArray, (, field, ,, v1, ., length, +, v2, ., length, ), ;, System, ., arraycopy, (]
[;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System, .]
[., buildArray, (, field, ,, v1, ., length, +, v2, ., length, ), ;, System, ., arraycopy, (, v1, ,]
[,, v1, ., length, +, v2, ., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,]
[), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System]
[+, v2, ., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, .]
[., length, +, v2, ., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,]
[), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System]
[., length, ), ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, )]
[;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1, ., length, ,, v2, ., length, ), ;]
[., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (]
[,, 0, ,, data, ,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,]
[,, data, ,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,]
[,, 0, ,, v1, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1, .]
[,, v1, ., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1, ., length, ,]
[), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1, ., length, ,, v2, ., length, )]
[., length, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, v1, ., length, ,, v2, .]
[;, this, ., field, =, field, ;, }, public, Field, <, T, >, getField, (, ), {, return, field, ;]
[., arraycopy, (, v2, ,, 0, ,, data, ,, v1, ., length, ,, v2, ., length, ), ;, this, .]
[,, 0, ,, data, ,, v1, ., length, ,, v2, ., length, ), ;, this, ., field, =, field, ;]
[,, data, ,, v1, ., length, ,, v2, ., length, ), ;, this, ., field, =, field, ;, }, public]
[,, v1, ., length, ,, v2, ., length, ), ;, this, ., field, =, field, ;, }, public, Field, <]
[,, v2, ., length, ), ;, this, ., field, =, field, ;, }, public, Field, <, T, >, getField, (]
[., length, ,, v2, ., length, ), ;, this, ., field, =, field, ;, }, public, Field, <, T, >]
[), ;, this, ., field, =, field, ;, }, public, Field, <, T, >, getField, (, ), {, return, field]
[., length, ), ;, this, ., field, =, field, ;, }, public, Field, <, T, >, getField, (, ), {]
[=, field, ;, }, public, Field, <, T, >, getField, (, ), {, return, field, ;, }, public, FieldVector, <]
[., field, =, field, ;, }, public, Field, <, T, >, getField, (, ), {, return, field, ;, }, public]
[;, }, public, Field, <, T, >, getField, (, ), {, return, field, ;, }, public, FieldVector, <, T, >]
[;, }, public, FieldVector, <, T, >, copy, (, ), {, return, new, ArrayFieldVector, <, T, >, (, this, ,]
[;, }, public, FieldVector, <, T, >, add, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, try, {]
[,, true, ), ;, }, public, FieldVector, <, T, >, add, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException]
[), ;, }, public, FieldVector, <, T, >, add, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, try]
[;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays, .]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays]
[;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (, int]
[), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, v, ., getEntry]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, v, ., getEntry]
[., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, v]
[), {, out, [, i, ], =, data, [, i, ], ., add, (, v, ., getEntry, (, i, )]
[++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, v, ., getEntry, (, i]
[=, data, [, i, ], ., add, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector]
[[, i, ], =, data, [, i, ], ., add, (, v, ., getEntry, (, i, ), ), ;, }]
[], =, data, [, i, ], ., add, (, v, ., getEntry, (, i, ), ), ;, }, return, new]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }, public, ArrayFieldVector]
[., add, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[[, i, ], ., add, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T]
[], ., add, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }, public]
[., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[), ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }]
[;, }, }, public, ArrayFieldVector, <, T, >, add, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[,, out, ,, false, ), ;, }, }, public, ArrayFieldVector, <, T, >, add, (, ArrayFieldVector, <, T, >, v]
[,, false, ), ;, }, }, public, ArrayFieldVector, <, T, >, add, (, ArrayFieldVector, <, T, >, v, ), throws]
[), ;, }, }, public, ArrayFieldVector, <, T, >, add, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {]
[;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (, int]
[), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (]
[., length, ), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;]
[., data, ., length, ), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, v, ., data]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, v, ., data]
[., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, v]
[), {, out, [, i, ], =, data, [, i, ], ., add, (, v, ., data, [, i, ]]
[++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, v, ., data, [, i]
[=, data, [, i, ], ., add, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector]
[[, i, ], =, data, [, i, ], ., add, (, v, ., data, [, i, ], ), ;, }]
[], =, data, [, i, ], ., add, (, v, ., data, [, i, ], ), ;, }, return, new]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector, <]
[., add, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[[, i, ], ., add, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T]
[], ., add, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector]
[[, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;]
[., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public]
[;, }, public, FieldVector, <, T, >, subtract, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, try, {]
[,, out, ,, false, ), ;, }, public, FieldVector, <, T, >, subtract, (, FieldVector, <, T, >, v, )]
[,, false, ), ;, }, public, FieldVector, <, T, >, subtract, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException]
[), ;, }, public, FieldVector, <, T, >, subtract, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, try]
[;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays, .]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays]
[;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (, int]
[), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, v, ., getEntry]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, v, ., getEntry]
[., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, v]
[), {, out, [, i, ], =, data, [, i, ], ., subtract, (, v, ., getEntry, (, i, )]
[++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, v, ., getEntry, (, i]
[=, data, [, i, ], ., subtract, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector]
[[, i, ], =, data, [, i, ], ., subtract, (, v, ., getEntry, (, i, ), ), ;, }]
[], =, data, [, i, ], ., subtract, (, v, ., getEntry, (, i, ), ), ;, }, return, new]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }, public, ArrayFieldVector]
[., subtract, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[[, i, ], ., subtract, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T]
[], ., subtract, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }, public]
[., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[), ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }]
[;, }, }, public, ArrayFieldVector, <, T, >, subtract, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[,, out, ,, false, ), ;, }, }, public, ArrayFieldVector, <, T, >, subtract, (, ArrayFieldVector, <, T, >, v]
[,, false, ), ;, }, }, public, ArrayFieldVector, <, T, >, subtract, (, ArrayFieldVector, <, T, >, v, ), throws]
[), ;, }, }, public, ArrayFieldVector, <, T, >, subtract, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {]
[;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (, int]
[), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (]
[., length, ), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;]
[., data, ., length, ), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, v, ., data]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, v, ., data]
[., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, v]
[), {, out, [, i, ], =, data, [, i, ], ., subtract, (, v, ., data, [, i, ]]
[++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, v, ., data, [, i]
[=, data, [, i, ], ., subtract, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector]
[[, i, ], =, data, [, i, ], ., subtract, (, v, ., data, [, i, ], ), ;, }]
[], =, data, [, i, ], ., subtract, (, v, ., data, [, i, ], ), ;, }, return, new]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector, <]
[., subtract, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[[, i, ], ., subtract, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T]
[], ., subtract, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector]
[[, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;]
[., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public]
[;, }, public, FieldVector, <, T, >, mapAdd, (, T, d, ), throws, NullArgumentException, {, T, [, ], out, =]
[,, out, ,, false, ), ;, }, public, FieldVector, <, T, >, mapAdd, (, T, d, ), throws, NullArgumentException, {]
[,, false, ), ;, }, public, FieldVector, <, T, >, mapAdd, (, T, d, ), throws, NullArgumentException, {, T, []
[), ;, }, public, FieldVector, <, T, >, mapAdd, (, T, d, ), throws, NullArgumentException, {, T, [, ], out]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, d, ), ;]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, d, ), ;]
[., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, d]
[), {, out, [, i, ], =, data, [, i, ], ., add, (, d, ), ;, }, return, new]
[++, ), {, out, [, i, ], =, data, [, i, ], ., add, (, d, ), ;, }, return]
[=, data, [, i, ], ., add, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[[, i, ], =, data, [, i, ], ., add, (, d, ), ;, }, return, new, ArrayFieldVector, <, T]
[], =, data, [, i, ], ., add, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector, <]
[., add, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, )]
[[, i, ], ., add, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out]
[], ., add, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector]
[;, }, public, FieldVector, <, T, >, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i, =]
[,, out, ,, false, ), ;, }, public, FieldVector, <, T, >, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {]
[,, false, ), ;, }, public, FieldVector, <, T, >, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {, for, (]
[), ;, }, public, FieldVector, <, T, >, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., add, (, d, ), ;]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., add]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., add, (, d, ), ;]
[., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., add, (, d]
[), {, data, [, i, ], =, data, [, i, ], ., add, (, d, ), ;, }, return, this]
[++, ), {, data, [, i, ], =, data, [, i, ], ., add, (, d, ), ;, }, return]
[=, data, [, i, ], ., add, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T]
[[, i, ], =, data, [, i, ], ., add, (, d, ), ;, }, return, this, ;, }, public]
[], =, data, [, i, ], ., add, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapSubtract, (, T, d, ), throws, NullArgumentException, {, T]
[., add, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapSubtract, (, T, d]
[[, i, ], ., add, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapSubtract]
[], ., add, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapSubtract, (, T]
[), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapSubtract, (, T, d, ), throws, NullArgumentException, {]
[;, }, public, FieldVector, <, T, >, mapSubtract, (, T, d, ), throws, NullArgumentException, {, T, [, ], out, =]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, d, ), ;]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, d, ), ;]
[., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, d]
[), {, out, [, i, ], =, data, [, i, ], ., subtract, (, d, ), ;, }, return, new]
[++, ), {, out, [, i, ], =, data, [, i, ], ., subtract, (, d, ), ;, }, return]
[=, data, [, i, ], ., subtract, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[[, i, ], =, data, [, i, ], ., subtract, (, d, ), ;, }, return, new, ArrayFieldVector, <, T]
[], =, data, [, i, ], ., subtract, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector, <]
[., subtract, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, )]
[[, i, ], ., subtract, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out]
[], ., subtract, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector]
[;, }, public, FieldVector, <, T, >, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i, =]
[,, out, ,, false, ), ;, }, public, FieldVector, <, T, >, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {]
[,, false, ), ;, }, public, FieldVector, <, T, >, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {, for, (]
[), ;, }, public, FieldVector, <, T, >, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., subtract, (, d, ), ;]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., subtract]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., subtract, (, d, ), ;]
[., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., subtract, (, d]
[), {, data, [, i, ], =, data, [, i, ], ., subtract, (, d, ), ;, }, return, this]
[++, ), {, data, [, i, ], =, data, [, i, ], ., subtract, (, d, ), ;, }, return]
[=, data, [, i, ], ., subtract, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T]
[[, i, ], =, data, [, i, ], ., subtract, (, d, ), ;, }, return, this, ;, }, public]
[], =, data, [, i, ], ., subtract, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapMultiply, (, T, d, ), throws, NullArgumentException, {, T]
[., subtract, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapMultiply, (, T, d]
[[, i, ], ., subtract, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapMultiply]
[], ., subtract, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapMultiply, (, T]
[), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapMultiply, (, T, d, ), throws, NullArgumentException, {]
[;, }, public, FieldVector, <, T, >, mapMultiply, (, T, d, ), throws, NullArgumentException, {, T, [, ], out, =]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, d, ), ;]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, d, ), ;]
[., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, d]
[), {, out, [, i, ], =, data, [, i, ], ., multiply, (, d, ), ;, }, return, new]
[++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, d, ), ;, }, return]
[=, data, [, i, ], ., multiply, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[[, i, ], =, data, [, i, ], ., multiply, (, d, ), ;, }, return, new, ArrayFieldVector, <, T]
[], =, data, [, i, ], ., multiply, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector, <]
[., multiply, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, )]
[[, i, ], ., multiply, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out]
[], ., multiply, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector]
[;, }, public, FieldVector, <, T, >, mapMultiplyToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i, =]
[,, out, ,, false, ), ;, }, public, FieldVector, <, T, >, mapMultiplyToSelf, (, T, d, ), throws, NullArgumentException, {]
[,, false, ), ;, }, public, FieldVector, <, T, >, mapMultiplyToSelf, (, T, d, ), throws, NullArgumentException, {, for, (]
[), ;, }, public, FieldVector, <, T, >, mapMultiplyToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., multiply, (, d, ), ;]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., multiply]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., multiply, (, d, ), ;]
[., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., multiply, (, d]
[), {, data, [, i, ], =, data, [, i, ], ., multiply, (, d, ), ;, }, return, this]
[++, ), {, data, [, i, ], =, data, [, i, ], ., multiply, (, d, ), ;, }, return]
[=, data, [, i, ], ., multiply, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T]
[[, i, ], =, data, [, i, ], ., multiply, (, d, ), ;, }, return, this, ;, }, public]
[], =, data, [, i, ], ., multiply, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapDivide, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException]
[., multiply, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapDivide, (, T, d]
[[, i, ], ., multiply, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapDivide]
[], ., multiply, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapDivide, (, T]
[), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapDivide, (, T, d, ), throws, NullArgumentException, ,]
[;, }, public, FieldVector, <, T, >, mapDivide, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {, MathUtils, ., checkNotNull]
[;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (, int]
[., checkNotNull, (, d, ), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length]
[), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., divide, (, d, ), ;]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., divide]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., divide, (, d, ), ;]
[., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., divide, (, d]
[), {, out, [, i, ], =, data, [, i, ], ., divide, (, d, ), ;, }, return, new]
[++, ), {, out, [, i, ], =, data, [, i, ], ., divide, (, d, ), ;, }, return]
[=, data, [, i, ], ., divide, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[[, i, ], =, data, [, i, ], ., divide, (, d, ), ;, }, return, new, ArrayFieldVector, <, T]
[], =, data, [, i, ], ., divide, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector, <]
[., divide, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, )]
[[, i, ], ., divide, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out]
[], ., divide, (, d, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector]
[;, }, public, FieldVector, <, T, >, mapDivideToSelf, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {, MathUtils, ., checkNotNull]
[,, out, ,, false, ), ;, }, public, FieldVector, <, T, >, mapDivideToSelf, (, T, d, ), throws, NullArgumentException, ,]
[,, false, ), ;, }, public, FieldVector, <, T, >, mapDivideToSelf, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {]
[), ;, }, public, FieldVector, <, T, >, mapDivideToSelf, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {, MathUtils, .]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, []
[., checkNotNull, (, d, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., divide, (, d, ), ;]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., divide]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., divide, (, d, ), ;]
[., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], ., divide, (, d]
[), {, data, [, i, ], =, data, [, i, ], ., divide, (, d, ), ;, }, return, this]
[++, ), {, data, [, i, ], =, data, [, i, ], ., divide, (, d, ), ;, }, return]
[=, data, [, i, ], ., divide, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T]
[[, i, ], =, data, [, i, ], ., divide, (, d, ), ;, }, return, this, ;, }, public]
[], =, data, [, i, ], ., divide, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapInv, (, ), throws, MathArithmeticException, {, T, [, ]]
[., divide, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapInv, (, ), throws]
[[, i, ], ., divide, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapInv]
[], ., divide, (, d, ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapInv, (, )]
[), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapInv, (, ), throws, MathArithmeticException, {, T, []
[;, }, public, FieldVector, <, T, >, mapInv, (, ), throws, MathArithmeticException, {, T, [, ], out, =, MathArrays, .]
[;, final, T, one, =, field, ., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[., buildArray, (, field, ,, data, ., length, ), ;, final, T, one, =, field, ., getOne, (, ), ;]
[,, data, ., length, ), ;, final, T, one, =, field, ., getOne, (, ), ;, for, (, int, i]
[), ;, final, T, one, =, field, ., getOne, (, ), ;, for, (, int, i, =, 0, ;, i]
[., length, ), ;, final, T, one, =, field, ., getOne, (, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, try, {]
[., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++]
[;, i, <, data, ., length, ;, i, ++, ), {, try, {, out, [, i, ], =, one, .]
[;, i, ++, ), {, try, {, out, [, i, ], =, one, ., divide, (, data, [, i, ]]
[<, data, ., length, ;, i, ++, ), {, try, {, out, [, i, ], =, one, ., divide, (]
[;, i, ++, ), {, try, {, out, [, i, ], =, one, ., divide, (, data, [, i, ]]
[., length, ;, i, ++, ), {, try, {, out, [, i, ], =, one, ., divide, (, data, []
[), {, try, {, out, [, i, ], =, one, ., divide, (, data, [, i, ], ), ;, }]
[++, ), {, try, {, out, [, i, ], =, one, ., divide, (, data, [, i, ], ), ;]
[=, one, ., divide, (, data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw]
[[, i, ], =, one, ., divide, (, data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e]
[], =, one, ., divide, (, data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {]
[;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i, ), ;]
[., divide, (, data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException]
[), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i, )]
[[, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX]
[], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i]
[;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector]
[,, i, ), ;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;]
[., INDEX, ,, i, ), ;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[), ;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public]
[;, }, public, FieldVector, <, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, final, T, one, =, field, ., getOne]
[,, out, ,, false, ), ;, }, public, FieldVector, <, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, final, T]
[,, false, ), ;, }, public, FieldVector, <, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, final, T, one, =]
[), ;, }, public, FieldVector, <, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, final, T, one, =, field, .]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, try, {]
[., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++]
[;, i, <, data, ., length, ;, i, ++, ), {, try, {, data, [, i, ], =, one, .]
[;, i, ++, ), {, try, {, data, [, i, ], =, one, ., divide, (, data, [, i, ]]
[<, data, ., length, ;, i, ++, ), {, try, {, data, [, i, ], =, one, ., divide, (]
[;, i, ++, ), {, try, {, data, [, i, ], =, one, ., divide, (, data, [, i, ]]
[., length, ;, i, ++, ), {, try, {, data, [, i, ], =, one, ., divide, (, data, []
[), {, try, {, data, [, i, ], =, one, ., divide, (, data, [, i, ], ), ;, }]
[++, ), {, try, {, data, [, i, ], =, one, ., divide, (, data, [, i, ], ), ;]
[=, one, ., divide, (, data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw]
[[, i, ], =, one, ., divide, (, data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e]
[], =, one, ., divide, (, data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {]
[;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i, ), ;]
[., divide, (, data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException]
[), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i, )]
[[, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX]
[], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i]
[;, }, }, return, this, ;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T, >, v, )]
[,, i, ), ;, }, }, return, this, ;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T]
[., INDEX, ,, i, ), ;, }, }, return, this, ;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector]
[), ;, }, }, return, this, ;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T, >, v]
[;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, try, {]
[;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays, .]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays]
[;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (, int]
[), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, v, ., getEntry]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, v, ., getEntry]
[., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, v]
[), {, out, [, i, ], =, data, [, i, ], ., multiply, (, v, ., getEntry, (, i, )]
[++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, v, ., getEntry, (, i]
[=, data, [, i, ], ., multiply, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector]
[[, i, ], =, data, [, i, ], ., multiply, (, v, ., getEntry, (, i, ), ), ;, }]
[], =, data, [, i, ], ., multiply, (, v, ., getEntry, (, i, ), ), ;, }, return, new]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }, public, ArrayFieldVector]
[., multiply, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[[, i, ], ., multiply, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T]
[], ., multiply, (, v, ., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }, public]
[., getEntry, (, i, ), ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[), ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }]
[;, }, }, public, ArrayFieldVector, <, T, >, ebeMultiply, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[,, out, ,, false, ), ;, }, }, public, ArrayFieldVector, <, T, >, ebeMultiply, (, ArrayFieldVector, <, T, >, v]
[,, false, ), ;, }, }, public, ArrayFieldVector, <, T, >, ebeMultiply, (, ArrayFieldVector, <, T, >, v, ), throws]
[), ;, }, }, public, ArrayFieldVector, <, T, >, ebeMultiply, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {]
[;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (, int]
[), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (]
[., length, ), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;]
[., data, ., length, ), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, v, ., data]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply]
[;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, v, ., data]
[., length, ;, i, ++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, v]
[), {, out, [, i, ], =, data, [, i, ], ., multiply, (, v, ., data, [, i, ]]
[++, ), {, out, [, i, ], =, data, [, i, ], ., multiply, (, v, ., data, [, i]
[=, data, [, i, ], ., multiply, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector]
[[, i, ], =, data, [, i, ], ., multiply, (, v, ., data, [, i, ], ), ;, }]
[], =, data, [, i, ], ., multiply, (, v, ., data, [, i, ], ), ;, }, return, new]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector, <]
[., multiply, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[[, i, ], ., multiply, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T]
[], ., multiply, (, v, ., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector]
[[, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;]
[., data, [, i, ], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[], ), ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public]
[;, }, public, FieldVector, <, T, >, ebeDivide, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {]
[,, out, ,, false, ), ;, }, public, FieldVector, <, T, >, ebeDivide, (, FieldVector, <, T, >, v, )]
[,, false, ), ;, }, public, FieldVector, <, T, >, ebeDivide, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException]
[), ;, }, public, FieldVector, <, T, >, ebeDivide, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException]
[;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays, .]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, [, ], out, =, MathArrays]
[;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (, int]
[), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, try, {]
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, try]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, try, {, out, [, i, ], =, data, []
[;, i, ++, ), {, try, {, out, [, i, ], =, data, [, i, ], ., divide, (, v]
[<, data, ., length, ;, i, ++, ), {, try, {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, try, {, out, [, i, ], =, data, [, i, ], ., divide, (, v]
[., length, ;, i, ++, ), {, try, {, out, [, i, ], =, data, [, i, ], ., divide]
[), {, try, {, out, [, i, ], =, data, [, i, ], ., divide, (, v, ., getEntry, (]
[++, ), {, try, {, out, [, i, ], =, data, [, i, ], ., divide, (, v, ., getEntry]
[=, data, [, i, ], ., divide, (, v, ., getEntry, (, i, ), ), ;, }, catch, (, final]
[[, i, ], =, data, [, i, ], ., divide, (, v, ., getEntry, (, i, ), ), ;, }]
[], =, data, [, i, ], ., divide, (, v, ., getEntry, (, i, ), ), ;, }, catch, (]
[;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i, ), ;]
[., divide, (, v, ., getEntry, (, i, ), ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw]
[[, i, ], ., divide, (, v, ., getEntry, (, i, ), ), ;, }, catch, (, final, MathArithmeticException, e]
[], ., divide, (, v, ., getEntry, (, i, ), ), ;, }, catch, (, final, MathArithmeticException, e, ), {]
[), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i, )]
[., getEntry, (, i, ), ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats]
[), ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i]
[;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }, public]
[,, i, ), ;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;]
[., INDEX, ,, i, ), ;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[), ;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }]
[;, }, }, public, ArrayFieldVector, <, T, >, ebeDivide, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException]
[,, out, ,, false, ), ;, }, }, public, ArrayFieldVector, <, T, >, ebeDivide, (, ArrayFieldVector, <, T, >, v]
[,, false, ), ;, }, }, public, ArrayFieldVector, <, T, >, ebeDivide, (, ArrayFieldVector, <, T, >, v, ), throws]
[), ;, }, }, public, ArrayFieldVector, <, T, >, ebeDivide, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,]
[;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (, int]
[), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;, for, (]
[., length, ), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length, ), ;]
[., data, ., length, ), ;, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, data, ., length]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, try, {]
[., buildArray, (, field, ,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, data, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, try]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[;, i, <, data, ., length, ;, i, ++, ), {, try, {, out, [, i, ], =, data, []
[;, i, ++, ), {, try, {, out, [, i, ], =, data, [, i, ], ., divide, (, v]
[<, data, ., length, ;, i, ++, ), {, try, {, out, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, try, {, out, [, i, ], =, data, [, i, ], ., divide, (, v]
[., length, ;, i, ++, ), {, try, {, out, [, i, ], =, data, [, i, ], ., divide]
[), {, try, {, out, [, i, ], =, data, [, i, ], ., divide, (, v, ., data, []
[++, ), {, try, {, out, [, i, ], =, data, [, i, ], ., divide, (, v, ., data]
[=, data, [, i, ], ., divide, (, v, ., data, [, i, ], ), ;, }, catch, (, final]
[[, i, ], =, data, [, i, ], ., divide, (, v, ., data, [, i, ], ), ;, }]
[], =, data, [, i, ], ., divide, (, v, ., data, [, i, ], ), ;, }, catch, (]
[;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i, ), ;]
[., divide, (, v, ., data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw]
[[, i, ], ., divide, (, v, ., data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e]
[], ., divide, (, v, ., data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {]
[), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i, )]
[[, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX]
[., data, [, i, ], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats]
[], ), ;, }, catch, (, final, MathArithmeticException, e, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., INDEX, ,, i]
[;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, T]
[,, i, ), ;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;]
[., INDEX, ,, i, ), ;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[), ;, }, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public]
[;, }, public, T, [, ], getData, (, ), {, return, data, ., clone, (, ), ;, }, public, T]
[,, out, ,, false, ), ;, }, public, T, [, ], getData, (, ), {, return, data, ., clone, (]
[,, false, ), ;, }, public, T, [, ], getData, (, ), {, return, data, ., clone, (, ), ;]
[), ;, }, public, T, [, ], getData, (, ), {, return, data, ., clone, (, ), ;, }, public]
[;, }, public, T, [, ], getDataRef, (, ), {, return, data, ;, }, public, T, dotProduct, (, FieldVector, <]
[., clone, (, ), ;, }, public, T, [, ], getDataRef, (, ), {, return, data, ;, }, public, T]
[;, }, public, T, dotProduct, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, try, {, return, dotProduct, (]
[;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, dot, =, field, ., getZero, (]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, dot, =, field, ., getZero]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkVectorDimensions, (, v, ), ;, T, dot, =, field, ., getZero]
[;, T, dot, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[), ;, T, dot, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, dot, =]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++]
[;, i, <, data, ., length, ;, i, ++, ), {, dot, =, dot, ., add, (, data, [, i]
[;, i, ++, ), {, dot, =, dot, ., add, (, data, [, i, ], ., multiply, (, v, .]
[<, data, ., length, ;, i, ++, ), {, dot, =, dot, ., add, (, data, [, i, ], .]
[;, i, ++, ), {, dot, =, dot, ., add, (, data, [, i, ], ., multiply, (, v, .]
[., length, ;, i, ++, ), {, dot, =, dot, ., add, (, data, [, i, ], ., multiply, (]
[), {, dot, =, dot, ., add, (, data, [, i, ], ., multiply, (, v, ., getEntry, (, i]
[++, ), {, dot, =, dot, ., add, (, data, [, i, ], ., multiply, (, v, ., getEntry, (]
[=, dot, ., add, (, data, [, i, ], ., multiply, (, v, ., getEntry, (, i, ), ), )]
[;, }, return, dot, ;, }, }, public, T, dotProduct, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {]
[., add, (, data, [, i, ], ., multiply, (, v, ., getEntry, (, i, ), ), ), ;, }]
[), ;, }, return, dot, ;, }, }, public, T, dotProduct, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException]
[., multiply, (, v, ., getEntry, (, i, ), ), ), ;, }, return, dot, ;, }, }, public, T]
[[, i, ], ., multiply, (, v, ., getEntry, (, i, ), ), ), ;, }, return, dot, ;, }]
[], ., multiply, (, v, ., getEntry, (, i, ), ), ), ;, }, return, dot, ;, }, }, public]
[), ), ;, }, return, dot, ;, }, }, public, T, dotProduct, (, ArrayFieldVector, <, T, >, v, ), throws]
[., getEntry, (, i, ), ), ), ;, }, return, dot, ;, }, }, public, T, dotProduct, (, ArrayFieldVector, <]
[), ), ), ;, }, return, dot, ;, }, }, public, T, dotProduct, (, ArrayFieldVector, <, T, >, v, )]
[;, }, }, public, T, dotProduct, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, .]
[;, T, dot, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[), ;, T, dot, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[., length, ), ;, T, dot, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;]
[., data, ., length, ), ;, T, dot, =, field, ., getZero, (, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, dot, =]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++]
[;, i, <, data, ., length, ;, i, ++, ), {, dot, =, dot, ., add, (, data, [, i]
[;, i, ++, ), {, dot, =, dot, ., add, (, data, [, i, ], ., multiply, (, v, .]
[<, data, ., length, ;, i, ++, ), {, dot, =, dot, ., add, (, data, [, i, ], .]
[;, i, ++, ), {, dot, =, dot, ., add, (, data, [, i, ], ., multiply, (, v, .]
[., length, ;, i, ++, ), {, dot, =, dot, ., add, (, data, [, i, ], ., multiply, (]
[), {, dot, =, dot, ., add, (, data, [, i, ], ., multiply, (, v, ., data, [, i]
[++, ), {, dot, =, dot, ., add, (, data, [, i, ], ., multiply, (, v, ., data, []
[=, dot, ., add, (, data, [, i, ], ., multiply, (, v, ., data, [, i, ], ), )]
[;, }, return, dot, ;, }, public, FieldVector, <, T, >, projection, (, FieldVector, <, T, >, v, ), throws]
[., add, (, data, [, i, ], ., multiply, (, v, ., data, [, i, ], ), ), ;, }]
[), ;, }, return, dot, ;, }, public, FieldVector, <, T, >, projection, (, FieldVector, <, T, >, v, )]
[., multiply, (, v, ., data, [, i, ], ), ), ;, }, return, dot, ;, }, public, FieldVector, <]
[[, i, ], ., multiply, (, v, ., data, [, i, ], ), ), ;, }, return, dot, ;, }]
[], ., multiply, (, v, ., data, [, i, ], ), ), ;, }, return, dot, ;, }, public, FieldVector]
[), ), ;, }, return, dot, ;, }, public, FieldVector, <, T, >, projection, (, FieldVector, <, T, >, v]
[[, i, ], ), ), ;, }, return, dot, ;, }, public, FieldVector, <, T, >, projection, (, FieldVector, <]
[., data, [, i, ], ), ), ;, }, return, dot, ;, }, public, FieldVector, <, T, >, projection, (]
[], ), ), ;, }, return, dot, ;, }, public, FieldVector, <, T, >, projection, (, FieldVector, <, T, >]
[;, }, public, FieldVector, <, T, >, projection, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {]
[;, }, public, ArrayFieldVector, <, T, >, projection, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {]
[., mapMultiply, (, dotProduct, (, v, ), ., divide, (, v, ., dotProduct, (, v, ), ), ), ;, }]
[), ;, }, public, ArrayFieldVector, <, T, >, projection, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException]
[., divide, (, v, ., dotProduct, (, v, ), ), ), ;, }, public, ArrayFieldVector, <, T, >, projection, (]
[), ., divide, (, v, ., dotProduct, (, v, ), ), ), ;, }, public, ArrayFieldVector, <, T, >, projection]
[), ), ;, }, public, ArrayFieldVector, <, T, >, projection, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,]
[., dotProduct, (, v, ), ), ), ;, }, public, ArrayFieldVector, <, T, >, projection, (, ArrayFieldVector, <, T, >]
[), ), ), ;, }, public, ArrayFieldVector, <, T, >, projection, (, ArrayFieldVector, <, T, >, v, ), throws, DimensionMismatchException]
[;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >, v, ), {, try, {, return, outerProduct]
[;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >, v, ), {, try, {, return, outerProduct]
[., mapMultiply, (, dotProduct, (, v, ), ., divide, (, v, ., dotProduct, (, v, ), ), ), ;, }]
[), ;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >, v, ), {, try, {, return]
[., divide, (, v, ., dotProduct, (, v, ), ), ), ;, }, public, FieldMatrix, <, T, >, outerProduct, (]
[), ., divide, (, v, ., dotProduct, (, v, ), ), ), ;, }, public, FieldMatrix, <, T, >, outerProduct]
[), ), ;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >, v, ), {, try, {]
[., dotProduct, (, v, ), ), ), ;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >]
[), ), ), ;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >, v, ), {, try]
[;, }, catch, (, ClassCastException, cce, ), {, final, int, m, =, data, ., length, ;, final, int, n, =]
[), ;, }, catch, (, ClassCastException, cce, ), {, final, int, m, =, data, ., length, ;, final, int, n]
[), ;, }, catch, (, ClassCastException, cce, ), {, final, int, m, =, data, ., length, ;, final, int, n]
[;, final, int, n, =, v, ., getDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, new, Array2DRowFieldMatrix]
[., length, ;, final, int, n, =, v, ., getDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =]
[;, final, FieldMatrix, <, T, >, out, =, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, m, ,, n, )]
[., getDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, new, Array2DRowFieldMatrix, <, T, >, (, field, ,]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j]
[,, m, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, )]
[,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for]
[), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int]
[;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[<, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry]
[++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, .]
[;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i]
[;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], ., multiply, (]
[<, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], .]
[;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], ., multiply, (]
[), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], ., multiply, (, v, ., getEntry]
[++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], ., multiply, (, v, .]
[;, }, }, return, out, ;, }, }, public, FieldMatrix, <, T, >, outerProduct, (, ArrayFieldVector, <, T, >, v]
[., setEntry, (, i, ,, j, ,, data, [, i, ], ., multiply, (, v, ., getEntry, (, j, )]
[,, j, ,, data, [, i, ], ., multiply, (, v, ., getEntry, (, j, ), ), ), ;, }]
[,, data, [, i, ], ., multiply, (, v, ., getEntry, (, j, ), ), ), ;, }, }, return]
[), ;, }, }, return, out, ;, }, }, public, FieldMatrix, <, T, >, outerProduct, (, ArrayFieldVector, <, T, >]
[., multiply, (, v, ., getEntry, (, j, ), ), ), ;, }, }, return, out, ;, }, }, public]
[[, i, ], ., multiply, (, v, ., getEntry, (, j, ), ), ), ;, }, }, return, out, ;]
[], ., multiply, (, v, ., getEntry, (, j, ), ), ), ;, }, }, return, out, ;, }, }]
[), ), ;, }, }, return, out, ;, }, }, public, FieldMatrix, <, T, >, outerProduct, (, ArrayFieldVector, <, T]
[., getEntry, (, j, ), ), ), ;, }, }, return, out, ;, }, }, public, FieldMatrix, <, T, >]
[), ), ), ;, }, }, return, out, ;, }, }, public, FieldMatrix, <, T, >, outerProduct, (, ArrayFieldVector, <]
[;, }, }, public, FieldMatrix, <, T, >, outerProduct, (, ArrayFieldVector, <, T, >, v, ), {, final, int, m]
[;, final, int, n, =, v, ., data, ., length, ;, final, FieldMatrix, <, T, >, out, =, new, Array2DRowFieldMatrix]
[., length, ;, final, int, n, =, v, ., data, ., length, ;, final, FieldMatrix, <, T, >, out, =]
[;, final, FieldMatrix, <, T, >, out, =, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, m, ,, n, )]
[., length, ;, final, FieldMatrix, <, T, >, out, =, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, m, ,]
[., data, ., length, ;, final, FieldMatrix, <, T, >, out, =, new, Array2DRowFieldMatrix, <, T, >, (, field, ,]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j]
[,, m, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, )]
[,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for]
[), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int]
[;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[<, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry]
[++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, .]
[;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i]
[;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], ., multiply, (]
[<, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], .]
[;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], ., multiply, (]
[), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], ., multiply, (, v, ., data]
[++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], ., multiply, (, v, .]
[;, }, }, return, out, ;, }, public, T, getEntry, (, int, index, ), {, return, data, [, index, ]]
[., setEntry, (, i, ,, j, ,, data, [, i, ], ., multiply, (, v, ., data, [, j, ]]
[,, j, ,, data, [, i, ], ., multiply, (, v, ., data, [, j, ], ), ), ;, }]
[,, data, [, i, ], ., multiply, (, v, ., data, [, j, ], ), ), ;, }, }, return]
[), ;, }, }, return, out, ;, }, public, T, getEntry, (, int, index, ), {, return, data, [, index]
[., multiply, (, v, ., data, [, j, ], ), ), ;, }, }, return, out, ;, }, public, T]
[[, i, ], ., multiply, (, v, ., data, [, j, ], ), ), ;, }, }, return, out, ;]
[], ., multiply, (, v, ., data, [, j, ], ), ), ;, }, }, return, out, ;, }, public]
[), ), ;, }, }, return, out, ;, }, public, T, getEntry, (, int, index, ), {, return, data, []
[[, j, ], ), ), ;, }, }, return, out, ;, }, public, T, getEntry, (, int, index, ), {]
[., data, [, j, ], ), ), ;, }, }, return, out, ;, }, public, T, getEntry, (, int, index]
[], ), ), ;, }, }, return, out, ;, }, public, T, getEntry, (, int, index, ), {, return, data]
[;, }, public, T, getEntry, (, int, index, ), {, return, data, [, index, ], ;, }, public, int, getDimension]
[;, }, public, int, getDimension, (, ), {, return, data, ., length, ;, }, public, FieldVector, <, T, >, append]
[[, index, ], ;, }, public, int, getDimension, (, ), {, return, data, ., length, ;, }, public, FieldVector, <]
[], ;, }, public, int, getDimension, (, ), {, return, data, ., length, ;, }, public, FieldVector, <, T, >]
[;, }, public, FieldVector, <, T, >, append, (, FieldVector, <, T, >, v, ), {, try, {, return, append]
[., length, ;, }, public, FieldVector, <, T, >, append, (, FieldVector, <, T, >, v, ), {, try, {]
[;, }, catch, (, ClassCastException, cce, ), {, return, new, ArrayFieldVector, <, T, >, (, this, ,, new, ArrayFieldVector, <]
[), ;, }, catch, (, ClassCastException, cce, ), {, return, new, ArrayFieldVector, <, T, >, (, this, ,, new, ArrayFieldVector]
[), ;, }, catch, (, ClassCastException, cce, ), {, return, new, ArrayFieldVector, <, T, >, (, this, ,, new, ArrayFieldVector]
[;, }, }, public, ArrayFieldVector, <, T, >, append, (, ArrayFieldVector, <, T, >, v, ), {, return, new, ArrayFieldVector]
[,, new, ArrayFieldVector, <, T, >, (, v, ), ), ;, }, }, public, ArrayFieldVector, <, T, >, append, (]
[), ;, }, }, public, ArrayFieldVector, <, T, >, append, (, ArrayFieldVector, <, T, >, v, ), {, return, new]
[), ), ;, }, }, public, ArrayFieldVector, <, T, >, append, (, ArrayFieldVector, <, T, >, v, ), {, return]
[;, }, public, FieldVector, <, T, >, append, (, T, in, ), {, final, T, [, ], out, =, MathArrays]
[,, v, ), ;, }, public, FieldVector, <, T, >, append, (, T, in, ), {, final, T, [, ]]
[), ;, }, public, FieldVector, <, T, >, append, (, T, in, ), {, final, T, [, ], out, =]
[;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out, []
[., buildArray, (, field, ,, data, ., length, +, 1, ), ;, System, ., arraycopy, (, data, ,, 0, ,]
[,, data, ., length, +, 1, ), ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,]
[), ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out]
[+, 1, ), ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, )]
[., length, +, 1, ), ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, .]
[), ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out]
[;, out, [, data, ., length, ], =, in, ;, return, new, ArrayFieldVector, <, T, >, (, field, ,, out]
[., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out, [, data, .]
[,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out, [, data, ., length, ], =, in]
[,, out, ,, 0, ,, data, ., length, ), ;, out, [, data, ., length, ], =, in, ;, return]
[,, 0, ,, data, ., length, ), ;, out, [, data, ., length, ], =, in, ;, return, new, ArrayFieldVector]
[,, data, ., length, ), ;, out, [, data, ., length, ], =, in, ;, return, new, ArrayFieldVector, <, T]
[), ;, out, [, data, ., length, ], =, in, ;, return, new, ArrayFieldVector, <, T, >, (, field, ,]
[., length, ), ;, out, [, data, ., length, ], =, in, ;, return, new, ArrayFieldVector, <, T, >, (]
[=, in, ;, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector]
[[, data, ., length, ], =, in, ;, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false]
[], =, in, ;, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public]
[., length, ], =, in, ;, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;]
[;, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, public, FieldVector, <, T]
[;, }, public, FieldVector, <, T, >, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {]
[,, out, ,, false, ), ;, }, public, FieldVector, <, T, >, getSubVector, (, int, index, ,, int, n, )]
[,, false, ), ;, }, public, FieldVector, <, T, >, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException]
[), ;, }, public, FieldVector, <, T, >, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayFieldVector, <, T, >, out, =]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayFieldVector, <, T, >]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayFieldVector, <, T, >, out, =]
[;, }, ArrayFieldVector, <, T, >, out, =, new, ArrayFieldVector, <, T, >, (, field, ,, n, ), ;, try]
[,, n, ), ;, }, ArrayFieldVector, <, T, >, out, =, new, ArrayFieldVector, <, T, >, (, field, ,, n]
[., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayFieldVector, <, T, >, out, =, new, ArrayFieldVector, <, T, >, (, field]
[), ;, }, ArrayFieldVector, <, T, >, out, =, new, ArrayFieldVector, <, T, >, (, field, ,, n, ), ;]
[;, try, {, System, ., arraycopy, (, data, ,, index, ,, out, ., data, ,, 0, ,, n, ), ;]
[,, n, ), ;, try, {, System, ., arraycopy, (, data, ,, index, ,, out, ., data, ,, 0, ,]
[), ;, try, {, System, ., arraycopy, (, data, ,, index, ,, out, ., data, ,, 0, ,, n, )]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -, 1]
[., arraycopy, (, data, ,, index, ,, out, ., data, ,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException]
[,, index, ,, out, ., data, ,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex]
[,, out, ., data, ,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index]
[,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[., data, ,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;]
[,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -]
[;, checkIndex, (, index, +, n, -, 1, ), ;, }, return, out, ;, }, public, void, setEntry, (, int]
[), ;, checkIndex, (, index, +, n, -, 1, ), ;, }, return, out, ;, }, public, void, setEntry, (]
[;, }, return, out, ;, }, public, void, setEntry, (, int, index, ,, T, value, ), {, try, {, data]
[), ;, }, return, out, ;, }, public, void, setEntry, (, int, index, ,, T, value, ), {, try, {]
[-, 1, ), ;, }, return, out, ;, }, public, void, setEntry, (, int, index, ,, T, value, ), {]
[+, n, -, 1, ), ;, }, return, out, ;, }, public, void, setEntry, (, int, index, ,, T, value]
[-, 1, ), ;, }, return, out, ;, }, public, void, setEntry, (, int, index, ,, T, value, ), {]
[), ;, }, return, out, ;, }, public, void, setEntry, (, int, index, ,, T, value, ), {, try, {]
[;, }, public, void, setEntry, (, int, index, ,, T, value, ), {, try, {, data, [, index, ], =]
[=, value, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, }, }, public, void, setSubVector]
[[, index, ], =, value, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, }, }]
[], =, value, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, }, }, public, void]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, }, }, public, void, setSubVector, (, int]
[;, }, }, public, void, setSubVector, (, int, index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {, try]
[), ;, }, }, public, void, setSubVector, (, int, index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {]
[;, }, catch, (, ClassCastException, cce, ), {, for, (, int, i, =, index, ;, i, <, index, +, v]
[,, (, ArrayFieldVector, <, T, >, ), v, ), ;, }, catch, (, ClassCastException, cce, ), {, for, (, int]
[), ;, }, catch, (, ClassCastException, cce, ), {, for, (, int, i, =, index, ;, i, <, index, +]
[), ;, }, catch, (, ClassCastException, cce, ), {, for, (, int, i, =, index, ;, i, <, index, +]
[;, i, <, index, +, v, ., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =]
[;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }]
[<, index, +, v, ., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =, v, .]
[;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }]
[+, v, ., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (]
[;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }]
[., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, -]
[), {, data, [, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }, }, }, catch]
[), {, data, [, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }, }, }, catch]
[=, v, ., getEntry, (, i, -, index, ), ;, }, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex]
[[, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }, }, }, catch, (, IndexOutOfBoundsException, e]
[], =, v, ., getEntry, (, i, -, index, ), ;, }, }, }, catch, (, IndexOutOfBoundsException, e, ), {]
[;, }, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v]
[., getEntry, (, i, -, index, ), ;, }, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index]
[), ;, }, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[-, index, ), ;, }, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[), ;, }, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[;, checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, }, }, public, void, set, (]
[), ;, checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, }, }, public, void, set]
[;, }, }, public, void, set, (, int, index, ,, ArrayFieldVector, <, T, >, v, ), throws, OutOfRangeException, {, try]
[), ;, }, }, public, void, set, (, int, index, ,, ArrayFieldVector, <, T, >, v, ), throws, OutOfRangeException, {]
[-, 1, ), ;, }, }, public, void, set, (, int, index, ,, ArrayFieldVector, <, T, >, v, ), throws]
[+, v, ., getDimension, (, ), -, 1, ), ;, }, }, public, void, set, (, int, index, ,, ArrayFieldVector]
[-, 1, ), ;, }, }, public, void, set, (, int, index, ,, ArrayFieldVector, <, T, >, v, ), throws]
[., getDimension, (, ), -, 1, ), ;, }, }, public, void, set, (, int, index, ,, ArrayFieldVector, <, T]
[), ;, }, }, public, void, set, (, int, index, ,, ArrayFieldVector, <, T, >, v, ), throws, OutOfRangeException, {]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v, ., data]
[., arraycopy, (, v, ., data, ,, 0, ,, data, ,, index, ,, v, ., data, ., length, ), ;]
[,, 0, ,, data, ,, index, ,, v, ., data, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, )]
[., data, ,, 0, ,, data, ,, index, ,, v, ., data, ., length, ), ;, }, catch, (, IndexOutOfBoundsException]
[,, data, ,, index, ,, v, ., data, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex]
[,, index, ,, v, ., data, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index]
[,, v, ., data, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;]
[), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v, .]
[., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[., data, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[;, checkIndex, (, index, +, v, ., data, ., length, -, 1, ), ;, }, }, public, void, set, (]
[), ;, checkIndex, (, index, +, v, ., data, ., length, -, 1, ), ;, }, }, public, void, set]
[;, }, }, public, void, set, (, T, value, ), {, Arrays, ., fill, (, data, ,, value, ), ;]
[), ;, }, }, public, void, set, (, T, value, ), {, Arrays, ., fill, (, data, ,, value, )]
[-, 1, ), ;, }, }, public, void, set, (, T, value, ), {, Arrays, ., fill, (, data, ,]
[+, v, ., data, ., length, -, 1, ), ;, }, }, public, void, set, (, T, value, ), {]
[-, 1, ), ;, }, }, public, void, set, (, T, value, ), {, Arrays, ., fill, (, data, ,]
[., length, -, 1, ), ;, }, }, public, void, set, (, T, value, ), {, Arrays, ., fill, (]
[., data, ., length, -, 1, ), ;, }, }, public, void, set, (, T, value, ), {, Arrays, .]
[), ;, }, }, public, void, set, (, T, value, ), {, Arrays, ., fill, (, data, ,, value, )]
[;, }, public, T, [, ], toArray, (, ), {, return, data, ., clone, (, ), ;, }, protected, void]
[., fill, (, data, ,, value, ), ;, }, public, T, [, ], toArray, (, ), {, return, data, .]
[,, value, ), ;, }, public, T, [, ], toArray, (, ), {, return, data, ., clone, (, ), ;]
[), ;, }, public, T, [, ], toArray, (, ), {, return, data, ., clone, (, ), ;, }, protected]
[;, }, protected, void, checkVectorDimensions, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension]
[., clone, (, ), ;, }, protected, void, checkVectorDimensions, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[;, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, data, ., length, !=, n, )]
[), ;, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, data, ., length, !=, n]
[., getDimension, (, ), ), ;, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, data]
[), {, throw, new, DimensionMismatchException, (, data, ., length, ,, n, ), ;, }, }, @, Override, public, boolean, equals]
[!=, n, ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, n, ), ;, }, }, @, Override, public]
[., length, !=, n, ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, n, ), ;, }, }, @]
[), {, throw, new, DimensionMismatchException, (, data, ., length, ,, n, ), ;, }, }, @, Override, public, boolean, equals]
[;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {]
[,, n, ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==]
[., length, ,, n, ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, )]
[), {, return, true, ;, }, if, (, other, ==, null, ), {, return, false, ;, }, try, {, @]
[==, other, ), {, return, true, ;, }, if, (, other, ==, null, ), {, return, false, ;, }, try]
[), {, return, true, ;, }, if, (, other, ==, null, ), {, return, false, ;, }, try, {, @]
[;, }, if, (, other, ==, null, ), {, return, false, ;, }, try, {, @, SuppressWarnings, (, "unchecked", )]
[), {, return, false, ;, }, try, {, @, SuppressWarnings, (, "unchecked", ), FieldVector, <, T, >, rhs, =, (]
[==, null, ), {, return, false, ;, }, try, {, @, SuppressWarnings, (, "unchecked", ), FieldVector, <, T, >, rhs]
[), {, return, false, ;, }, try, {, @, SuppressWarnings, (, "unchecked", ), FieldVector, <, T, >, rhs, =, (]
[;, }, try, {, @, SuppressWarnings, (, "unchecked", ), FieldVector, <, T, >, rhs, =, (, FieldVector, <, T, >]
[FieldVector, <, T, >, rhs, =, (, FieldVector, <, T, >, ), other, ;, if, (, data, ., length, !=]
[), FieldVector, <, T, >, rhs, =, (, FieldVector, <, T, >, ), other, ;, if, (, data, ., length]
[;, if, (, data, ., length, !=, rhs, ., getDimension, (, ), ), {, return, false, ;, }, for, (]
[;, if, (, data, ., length, !=, rhs, ., getDimension, (, ), ), {, return, false, ;, }, for, (]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[!=, rhs, ., getDimension, (, ), ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i]
[., length, !=, rhs, ., getDimension, (, ), ), {, return, false, ;, }, for, (, int, i, =, 0]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[., getDimension, (, ), ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, data]
[;, }, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if]
[;, i, <, data, ., length, ;, ++, i, ), {, if, (, !, data, [, i, ], ., equals]
[;, ++, i, ), {, if, (, !, data, [, i, ], ., equals, (, rhs, ., getEntry, (, i]
[<, data, ., length, ;, ++, i, ), {, if, (, !, data, [, i, ], ., equals, (, rhs]
[;, ++, i, ), {, if, (, !, data, [, i, ], ., equals, (, rhs, ., getEntry, (, i]
[., length, ;, ++, i, ), {, if, (, !, data, [, i, ], ., equals, (, rhs, ., getEntry]
[), {, if, (, !, data, [, i, ], ., equals, (, rhs, ., getEntry, (, i, ), ), )]
[), {, if, (, !, data, [, i, ], ., equals, (, rhs, ., getEntry, (, i, ), ), )]
[), {, return, false, ;, }, }, return, true, ;, }, catch, (, ClassCastException, ex, ), {, return, false, ;]
[), {, return, false, ;, }, }, return, true, ;, }, catch, (, ClassCastException, ex, ), {, return, false, ;]
[., equals, (, rhs, ., getEntry, (, i, ), ), ), {, return, false, ;, }, }, return, true, ;]
[[, i, ], ., equals, (, rhs, ., getEntry, (, i, ), ), ), {, return, false, ;, }, }]
[], ., equals, (, rhs, ., getEntry, (, i, ), ), ), {, return, false, ;, }, }, return, true]
[), ), {, return, false, ;, }, }, return, true, ;, }, catch, (, ClassCastException, ex, ), {, return, false]
[., getEntry, (, i, ), ), ), {, return, false, ;, }, }, return, true, ;, }, catch, (, ClassCastException]
[), ), ), {, return, false, ;, }, }, return, true, ;, }, catch, (, ClassCastException, ex, ), {, return]
[;, }, }, return, true, ;, }, catch, (, ClassCastException, ex, ), {, return, false, ;, }, }, @, Override]
[;, }, catch, (, ClassCastException, ex, ), {, return, false, ;, }, }, @, Override, public, int, hashCode, (, )]
[;, }, }, @, Override, public, int, hashCode, (, ), {, int, h, =, 3542, ;, for, (, final, T]
[;, for, (, final, T, a, :, data, ), {, h, =, h, ^, a, ., hashCode, (, ), ;]
[), {, h, =, h, ^, a, ., hashCode, (, ), ;, }, return, h, ;, }, private, void, checkIndex]
[=, h, ^, a, ., hashCode, (, ), ;, }, return, h, ;, }, private, void, checkIndex, (, final, int]
[;, }, return, h, ;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index]
[^, a, ., hashCode, (, ), ;, }, return, h, ;, }, private, void, checkIndex, (, final, int, index, )]
[;, }, return, h, ;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index]
[., hashCode, (, ), ;, }, return, h, ;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException]
[;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||, index]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -, 1, )]
[||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[<, 0, ||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,]
[||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -, 1, )]
[>=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, getDimension, (]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -, 1, )]
[;, }, }, }]
[,, index, ,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, }]
[., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, }]
[,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, }]
[,, getDimension, (, ), -, 1, ), ;, }, }, }]
[), ;, }, }, }]
[-, 1, ), ;, }, }, }]
[), ;, }, }, }]
