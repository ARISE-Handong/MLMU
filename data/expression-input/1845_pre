[., math3, ., util, ., MathUtils, ;, class, FirstMoment, extends, AbstractStorelessUnivariateStatistic, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[long, n, ;, protected, double, m1, ;, protected, double, dev, ;, protected, double, nDev, ;, public, FirstMoment, (, ), {]
[;, protected, double, m1, ;, protected, double, dev, ;, protected, double, nDev, ;, public, FirstMoment, (, ), {, n, =]
[double, m1, ;, protected, double, dev, ;, protected, double, nDev, ;, public, FirstMoment, (, ), {, n, =, 0, ;]
[;, protected, double, dev, ;, protected, double, nDev, ;, public, FirstMoment, (, ), {, n, =, 0, ;, m1, =]
[;, protected, double, dev, ;, protected, double, nDev, ;, public, FirstMoment, (, ), {, n, =, 0, ;, m1, =]
[;, protected, double, nDev, ;, public, FirstMoment, (, ), {, n, =, 0, ;, m1, =, Double, ., NaN, ;]
[double, nDev, ;, public, FirstMoment, (, ), {, n, =, 0, ;, m1, =, Double, ., NaN, ;, dev, =]
[double, nDev, ;, public, FirstMoment, (, ), {, n, =, 0, ;, m1, =, Double, ., NaN, ;, dev, =]
[FirstMoment, (, ), {, n, =, 0, ;, m1, =, Double, ., NaN, ;, dev, =, Double, ., NaN, ;]
[), {, n, =, 0, ;, m1, =, Double, ., NaN, ;, dev, =, Double, ., NaN, ;, nDev, =]
[), {, n, =, 0, ;, m1, =, Double, ., NaN, ;, dev, =, Double, ., NaN, ;, nDev, =]
[nDev, =, Double, ., NaN, ;, }, public, FirstMoment, (, FirstMoment, original, ), throws, NullArgumentException, {, super, (, ), ;]
[Double, ., NaN, ;, }, public, FirstMoment, (, FirstMoment, original, ), throws, NullArgumentException, {, super, (, ), ;, copy, (]
[NaN, ;, }, public, FirstMoment, (, FirstMoment, original, ), throws, NullArgumentException, {, super, (, ), ;, copy, (, original, ,]
[(, original, ,, this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (]
[(, original, ,, this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (]
[,, this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (, n, ==]
[;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (, n, ==, 0, ), {]
[@, Override, public, void, increment, (, final, double, d, ), {, if, (, n, ==, 0, ), {, m1, =]
[void, increment, (, final, double, d, ), {, if, (, n, ==, 0, ), {, m1, =, 0.0, ;, }]
[void, increment, (, final, double, d, ), {, if, (, n, ==, 0, ), {, m1, =, 0.0, ;, }]
[), {, if, (, n, ==, 0, ), {, m1, =, 0.0, ;, }, n, ++, ;, double, n0, =]
[if, (, n, ==, 0, ), {, m1, =, 0.0, ;, }, n, ++, ;, double, n0, =, n, ;]
[n, ==, 0, ), {, m1, =, 0.0, ;, }, n, ++, ;, double, n0, =, n, ;, dev, =]
[n, ==, 0, ), {, m1, =, 0.0, ;, }, n, ++, ;, double, n0, =, n, ;, dev, =]
[0, ), {, m1, =, 0.0, ;, }, n, ++, ;, double, n0, =, n, ;, dev, =, d, -]
[{, m1, =, 0.0, ;, }, n, ++, ;, double, n0, =, n, ;, dev, =, d, -, m1, ;]
[=, 0.0, ;, }, n, ++, ;, double, n0, =, n, ;, dev, =, d, -, m1, ;, nDev, =]
[=, 0.0, ;, }, n, ++, ;, double, n0, =, n, ;, dev, =, d, -, m1, ;, nDev, =]
[;, }, n, ++, ;, double, n0, =, n, ;, dev, =, d, -, m1, ;, nDev, =, dev, /]
[n, ++, ;, double, n0, =, n, ;, dev, =, d, -, m1, ;, nDev, =, dev, /, n0, ;]
[;, double, n0, =, n, ;, dev, =, d, -, m1, ;, nDev, =, dev, /, n0, ;, m1, +=]
[;, nDev, =, dev, /, n0, ;, m1, +=, nDev, ;, }, @, Override, public, void, clear, (, ), {]
[=, dev, /, n0, ;, m1, +=, nDev, ;, }, @, Override, public, void, clear, (, ), {, m1, =]
[=, dev, /, n0, ;, m1, +=, nDev, ;, }, @, Override, public, void, clear, (, ), {, m1, =]
[;, m1, +=, nDev, ;, }, @, Override, public, void, clear, (, ), {, m1, =, Double, ., NaN, ;]
[+=, nDev, ;, }, @, Override, public, void, clear, (, ), {, m1, =, Double, ., NaN, ;, n, =]
[;, }, @, Override, public, void, clear, (, ), {, m1, =, Double, ., NaN, ;, n, =, 0, ;]
[@, Override, public, void, clear, (, ), {, m1, =, Double, ., NaN, ;, n, =, 0, ;, dev, =]
[@, Override, public, void, clear, (, ), {, m1, =, Double, ., NaN, ;, n, =, 0, ;, dev, =]
[clear, (, ), {, m1, =, Double, ., NaN, ;, n, =, 0, ;, dev, =, Double, ., NaN, ;]
[), {, m1, =, Double, ., NaN, ;, n, =, 0, ;, dev, =, Double, ., NaN, ;, nDev, =]
[), {, m1, =, Double, ., NaN, ;, n, =, 0, ;, dev, =, Double, ., NaN, ;, nDev, =]
[Double, ., NaN, ;, nDev, =, Double, ., NaN, ;, }, @, Override, public, double, getResult, (, ), {, return]
[}, @, Override, public, double, getResult, (, ), {, return, m1, ;, }, public, long, getN, (, ), {, return]
[long, getN, (, ), {, return, n, ;, }, @, Override, public, FirstMoment, copy, (, ), {, FirstMoment, result, =]
[return, n, ;, }, @, Override, public, FirstMoment, copy, (, ), {, FirstMoment, result, =, new, FirstMoment, (, ), ;]
[;, }, @, Override, public, FirstMoment, copy, (, ), {, FirstMoment, result, =, new, FirstMoment, (, ), ;, copy, (]
[@, Override, public, FirstMoment, copy, (, ), {, FirstMoment, result, =, new, FirstMoment, (, ), ;, copy, (, this, ,]
[copy, (, ), {, FirstMoment, result, =, new, FirstMoment, (, ), ;, copy, (, this, ,, result, ), ;, return]
[), ;, return, result, ;, }, public, static, void, copy, (, FirstMoment, source, ,, FirstMoment, dest, ), throws, NullArgumentException, {]
[), ;, return, result, ;, }, public, static, void, copy, (, FirstMoment, source, ,, FirstMoment, dest, ), throws, NullArgumentException, {]
[;, }, public, static, void, copy, (, FirstMoment, source, ,, FirstMoment, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[static, void, copy, (, FirstMoment, source, ,, FirstMoment, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[static, void, copy, (, FirstMoment, source, ,, FirstMoment, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[FirstMoment, source, ,, FirstMoment, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (]
[FirstMoment, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;]
[FirstMoment, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;]
[NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (]
[NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (]
[), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;]
[), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;]
[checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., n, =]
[checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., n, =]
[;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., n, =, source, ., n, ;]
[;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., n, =, source, ., n, ;]
[(, source, ., getDataRef, (, ), ), ;, dest, ., n, =, source, ., n, ;, dest, ., m1, =]
[(, source, ., getDataRef, (, ), ), ;, dest, ., n, =, source, ., n, ;, dest, ., m1, =]
[(, ), ), ;, dest, ., n, =, source, ., n, ;, dest, ., m1, =, source, ., m1, ;]
[(, ), ), ;, dest, ., n, =, source, ., n, ;, dest, ., m1, =, source, ., m1, ;]
[dest, ., n, =, source, ., n, ;, dest, ., m1, =, source, ., m1, ;, dest, ., dev, =]
[dest, ., n, =, source, ., n, ;, dest, ., m1, =, source, ., m1, ;, dest, ., dev, =]
[source, ., n, ;, dest, ., m1, =, source, ., m1, ;, dest, ., dev, =, source, ., dev, ;]
[source, ., n, ;, dest, ., m1, =, source, ., m1, ;, dest, ., dev, =, source, ., dev, ;]
[dest, ., m1, =, source, ., m1, ;, dest, ., dev, =, source, ., dev, ;, dest, ., nDev, =]
[dest, ., m1, =, source, ., m1, ;, dest, ., dev, =, source, ., dev, ;, dest, ., nDev, =]
