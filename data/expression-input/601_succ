[;, private, final, DstNormalization, normalization, ;, public, FastSineTransformer, (, final, DstNormalization, normalization, ), {, this, ., normalization, =, normalization, ;]
[=, normalization, ;, }, public, double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, )]
[., normalization, =, normalization, ;, }, public, double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType]
[;, }, public, double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {, if]
[), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, f, ., length, ), ;, return, TransformUtils, .]
[==, DstNormalization, ., ORTHOGONAL_DST_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, f, ., length, )]
[), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, f, ., length, ), ;, return, TransformUtils, .]
[., ORTHOGONAL_DST_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, f, ., length, ), ;, return]
[;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, if, (, type, ==, TransformType]
[., sqrt, (, 2.0, /, f, ., length, ), ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,]
[), ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, if, (, type, ==]
[/, f, ., length, ), ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }]
[), ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, if, (, type, ==]
[., length, ), ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, if, (]
[;, }, if, (, type, ==, TransformType, ., FORWARD, ), {, return, fst, (, f, ), ;, }, final, double]
[., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, if, (, type, ==, TransformType, ., FORWARD, )]
[,, s, ), ;, }, if, (, type, ==, TransformType, ., FORWARD, ), {, return, fst, (, f, ), ;]
[), ,, s, ), ;, }, if, (, type, ==, TransformType, ., FORWARD, ), {, return, fst, (, f, )]
[), ;, }, if, (, type, ==, TransformType, ., FORWARD, ), {, return, fst, (, f, ), ;, }, final]
[), {, return, fst, (, f, ), ;, }, final, double, s, =, 2.0, /, f, ., length, ;, return]
[==, TransformType, ., FORWARD, ), {, return, fst, (, f, ), ;, }, final, double, s, =, 2.0, /, f]
[), {, return, fst, (, f, ), ;, }, final, double, s, =, 2.0, /, f, ., length, ;, return]
[., FORWARD, ), {, return, fst, (, f, ), ;, }, final, double, s, =, 2.0, /, f, ., length]
[;, }, final, double, s, =, 2.0, /, f, ., length, ;, return, TransformUtils, ., scaleArray, (, fst, (, f]
[), ;, }, final, double, s, =, 2.0, /, f, ., length, ;, return, TransformUtils, ., scaleArray, (, fst, (]
[;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, public, double, [, ], transform]
[/, f, ., length, ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, public]
[;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, public, double, [, ], transform]
[., length, ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, public, double, []
[;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max, ,]
[., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, public, double, [, ], transform, (, final, UnivariateFunction]
[,, s, ), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final]
[), ,, s, ), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,]
[), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max]
[;, data, [, 0, ], =, 0.0, ;, return, transform, (, data, ,, type, ), ;, }, protected, double, []
[., sample, (, f, ,, min, ,, max, ,, n, ), ;, data, [, 0, ], =, 0.0, ;, return]
[,, min, ,, max, ,, n, ), ;, data, [, 0, ], =, 0.0, ;, return, transform, (, data, ,]
[,, max, ,, n, ), ;, data, [, 0, ], =, 0.0, ;, return, transform, (, data, ,, type, )]
[,, n, ), ;, data, [, 0, ], =, 0.0, ;, return, transform, (, data, ,, type, ), ;, }]
[), ;, data, [, 0, ], =, 0.0, ;, return, transform, (, data, ,, type, ), ;, }, protected, double]
[=, 0.0, ;, return, transform, (, data, ,, type, ), ;, }, protected, double, [, ], fst, (, double, []
[[, 0, ], =, 0.0, ;, return, transform, (, data, ,, type, ), ;, }, protected, double, [, ], fst]
[], =, 0.0, ;, return, transform, (, data, ,, type, ), ;, }, protected, double, [, ], fst, (, double]
[;, return, transform, (, data, ,, type, ), ;, }, protected, double, [, ], fst, (, double, [, ], f]
[;, }, protected, double, [, ], fst, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final, double, [, ]]
[,, type, ), ;, }, protected, double, [, ], fst, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final]
[), ;, }, protected, double, [, ], fst, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final, double, []
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, f, ., length, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[], ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, f, ., length, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[., length, ], ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, f, ., length, ), ), {, throw, new, MathIllegalArgumentException]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, f, ., length, ), ), ;]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, f, ., length, ), ), ;]
[., isPowerOfTwo, (, f, ., length, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf]
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, f, ., length, ), )]
[., length, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, f, ., length]
[;, }, if, (, f, [, 0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,]
[,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (, f, [, 0, ], !=, 0.0]
[., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (, f, [, 0, ]]
[), ;, }, if, (, f, [, 0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO]
[., valueOf, (, f, ., length, ), ), ;, }, if, (, f, [, 0, ], !=, 0.0, ), {]
[), ), ;, }, if, (, f, [, 0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[., length, ), ), ;, }, if, (, f, [, 0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,, Double, ., valueOf, (, f, [, 0, ], ), )]
[!=, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,, Double, ., valueOf, (, f, [, 0, ]]
[[, 0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,, Double, ., valueOf, (, f]
[], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,, Double, ., valueOf, (, f, [, 0]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,, Double, ., valueOf, (, f, [, 0, ], ), )]
[;, }, final, int, n, =, f, ., length, ;, if, (, n, ==, 1, ), {, transformed, [, 0]
[,, Double, ., valueOf, (, f, [, 0, ], ), ), ;, }, final, int, n, =, f, ., length]
[., FIRST_ELEMENT_NOT_ZERO, ,, Double, ., valueOf, (, f, [, 0, ], ), ), ;, }, final, int, n, =, f]
[), ;, }, final, int, n, =, f, ., length, ;, if, (, n, ==, 1, ), {, transformed, []
[., valueOf, (, f, [, 0, ], ), ), ;, }, final, int, n, =, f, ., length, ;, if]
[), ), ;, }, final, int, n, =, f, ., length, ;, if, (, n, ==, 1, ), {, transformed]
[[, 0, ], ), ), ;, }, final, int, n, =, f, ., length, ;, if, (, n, ==, 1]
[], ), ), ;, }, final, int, n, =, f, ., length, ;, if, (, n, ==, 1, ), {]
[;, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.0, ;, return, transformed, ;, }, final]
[., length, ;, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.0, ;, return, transformed, ;]
[), {, transformed, [, 0, ], =, 0.0, ;, return, transformed, ;, }, final, double, [, ], x, =, new]
[==, 1, ), {, transformed, [, 0, ], =, 0.0, ;, return, transformed, ;, }, final, double, [, ], x]
[), {, transformed, [, 0, ], =, 0.0, ;, return, transformed, ;, }, final, double, [, ], x, =, new]
[=, 0.0, ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x]
[[, 0, ], =, 0.0, ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n]
[], =, 0.0, ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;]
[;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0]
[;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.0]
[;, x, [, 0, ], =, 0.0, ;, x, [, n, >, >, 1, ], =, 2.0, *, f, []
[], ;, x, [, 0, ], =, 0.0, ;, x, [, n, >, >, 1, ], =, 2.0, *, f]
[=, 0.0, ;, x, [, n, >, >, 1, ], =, 2.0, *, f, [, n, >, >, 1, ]]
[[, 0, ], =, 0.0, ;, x, [, n, >, >, 1, ], =, 2.0, *, f, [, n, >]
[], =, 0.0, ;, x, [, n, >, >, 1, ], =, 2.0, *, f, [, n, >, >, 1]
[;, x, [, n, >, >, 1, ], =, 2.0, *, f, [, n, >, >, 1, ], ;, for]
[=, 2.0, *, f, [, n, >, >, 1, ], ;, for, (, int, i, =, 1, ;, i, <]
[[, n, >, >, 1, ], =, 2.0, *, f, [, n, >, >, 1, ], ;, for, (, int]
[], =, 2.0, *, f, [, n, >, >, 1, ], ;, for, (, int, i, =, 1, ;, i]
[>, >, 1, ], =, 2.0, *, f, [, n, >, >, 1, ], ;, for, (, int, i, =]
[], =, 2.0, *, f, [, n, >, >, 1, ], ;, for, (, int, i, =, 1, ;, i]
[;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, )]
[*, f, [, n, >, >, 1, ], ;, for, (, int, i, =, 1, ;, i, <, (, n]
[;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, )]
[[, n, >, >, 1, ], ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >]
[], ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++]
[>, >, 1, ], ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, )]
[], ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++]
[;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, FastMath, .]
[;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n]
[<, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (]
[;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n]
[), ;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /]
[>, >, 1, ), ;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath]
[), ;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /]
[), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (]
[++, ), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *]
[;, final, double, b, =, 0.5, *, (, f, [, i, ], -, f, [, n, -, i, ], )]
[*, (, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, 0.5]
[., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], +, f, []
[), *, (, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =]
[/, n, ), *, (, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double]
[*, FastMath, ., PI, /, n, ), *, (, f, [, i, ], +, f, [, n, -, i, ]]
[/, n, ), *, (, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double]
[., PI, /, n, ), *, (, f, [, i, ], +, f, [, n, -, i, ], ), ;]
[), *, (, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =]
[;, final, double, b, =, 0.5, *, (, f, [, i, ], -, f, [, n, -, i, ], )]
[), ;, final, double, b, =, 0.5, *, (, f, [, i, ], -, f, [, n, -, i, ]]
[+, f, [, n, -, i, ], ), ;, final, double, b, =, 0.5, *, (, f, [, i, ]]
[[, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, 0.5, *, (, f]
[], +, f, [, n, -, i, ], ), ;, final, double, b, =, 0.5, *, (, f, [, i]
[), ;, final, double, b, =, 0.5, *, (, f, [, i, ], -, f, [, n, -, i, ]]
[[, n, -, i, ], ), ;, final, double, b, =, 0.5, *, (, f, [, i, ], -, f]
[], ), ;, final, double, b, =, 0.5, *, (, f, [, i, ], -, f, [, n, -, i]
[-, i, ], ), ;, final, double, b, =, 0.5, *, (, f, [, i, ], -, f, [, n]
[], ), ;, final, double, b, =, 0.5, *, (, f, [, i, ], -, f, [, n, -, i]
[;, x, [, i, ], =, a, +, b, ;, x, [, n, -, i, ], =, a, -, b]
[*, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =]
[;, x, [, i, ], =, a, +, b, ;, x, [, n, -, i, ], =, a, -, b]
[), ;, x, [, i, ], =, a, +, b, ;, x, [, n, -, i, ], =, a, -]
[-, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, +, b, ;, x, []
[[, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, +, b]
[], -, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, +, b, ;, x]
[), ;, x, [, i, ], =, a, +, b, ;, x, [, n, -, i, ], =, a, -]
[[, n, -, i, ], ), ;, x, [, i, ], =, a, +, b, ;, x, [, n, -]
[], ), ;, x, [, i, ], =, a, +, b, ;, x, [, n, -, i, ], =, a]
[-, i, ], ), ;, x, [, i, ], =, a, +, b, ;, x, [, n, -, i, ]]
[], ), ;, x, [, i, ], =, a, +, b, ;, x, [, n, -, i, ], =, a]
[=, a, +, b, ;, x, [, n, -, i, ], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;]
[[, i, ], =, a, +, b, ;, x, [, n, -, i, ], =, a, -, b, ;, }]
[], =, a, +, b, ;, x, [, n, -, i, ], =, a, -, b, ;, }, FastFourierTransformer, transformer]
[;, x, [, n, -, i, ], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer]
[+, b, ;, x, [, n, -, i, ], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =]
[;, x, [, n, -, i, ], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer]
[=, a, -, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex]
[[, n, -, i, ], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization]
[], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;]
[-, i, ], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD]
[], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;]
[;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =]
[-, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ]]
[;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =]
[=, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,]
[;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0]
[), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, []
[., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;]
[;, transformed, [, 0, ], =, 0.0, ;, transformed, [, 1, ], =, 0.5, *, y, [, 0, ], .]
[., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;, transformed, [, 1]
[,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;, transformed, [, 1, ], =, 0.5, *]
[), ;, transformed, [, 0, ], =, 0.0, ;, transformed, [, 1, ], =, 0.5, *, y, [, 0, ]]
[., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;, transformed, [, 1, ], =, 0.5, *, y, []
[=, 0.0, ;, transformed, [, 1, ], =, 0.5, *, y, [, 0, ], ., getReal, (, ), ;, for]
[[, 0, ], =, 0.0, ;, transformed, [, 1, ], =, 0.5, *, y, [, 0, ], ., getReal, (]
[], =, 0.0, ;, transformed, [, 1, ], =, 0.5, *, y, [, 0, ], ., getReal, (, ), ;]
[;, transformed, [, 1, ], =, 0.5, *, y, [, 0, ], ., getReal, (, ), ;, for, (, int]
[=, 0.5, *, y, [, 0, ], ., getReal, (, ), ;, for, (, int, i, =, 1, ;, i]
[[, 1, ], =, 0.5, *, y, [, 0, ], ., getReal, (, ), ;, for, (, int, i, =]
[], =, 0.5, *, y, [, 0, ], ., getReal, (, ), ;, for, (, int, i, =, 1, ;]
[;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, )]
[*, y, [, 0, ], ., getReal, (, ), ;, for, (, int, i, =, 1, ;, i, <, (]
[;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, )]
[., getReal, (, ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, )]
[[, 0, ], ., getReal, (, ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >]
[], ., getReal, (, ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1]
[;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ]]
[;, i, ++, ), {, transformed, [, 2, *, i, ], =, -, y, [, i, ], ., getImaginary, (]
[<, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, -]
[;, i, ++, ), {, transformed, [, 2, *, i, ], =, -, y, [, i, ], ., getImaginary, (]
[), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, -, y, [, i, ], ., getImaginary]
[>, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, -, y, [, i]
[), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, -, y, [, i, ], ., getImaginary]
[), {, transformed, [, 2, *, i, ], =, -, y, [, i, ], ., getImaginary, (, ), ;, transformed]
[++, ), {, transformed, [, 2, *, i, ], =, -, y, [, i, ], ., getImaginary, (, ), ;]
[=, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +, 1, ], =]
[[, 2, *, i, ], =, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *]
[], =, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +, 1, ]]
[*, i, ], =, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +]
[], =, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +, 1, ]]
[;, transformed, [, 2, *, i, +, 1, ], =, y, [, i, ], ., getReal, (, ), +, transformed]
[;, transformed, [, 2, *, i, +, 1, ], =, y, [, i, ], ., getReal, (, ), +, transformed]
[., getImaginary, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, y, [, i, ], ., getReal]
[[, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, y, [, i]
[], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, y, [, i, ], .]
[=, y, [, i, ], ., getReal, (, ), +, transformed, [, 2, *, i, -, 1, ], ;, }]
[[, 2, *, i, +, 1, ], =, y, [, i, ], ., getReal, (, ), +, transformed, [, 2]
[], =, y, [, i, ], ., getReal, (, ), +, transformed, [, 2, *, i, -, 1, ], ;]
[+, 1, ], =, y, [, i, ], ., getReal, (, ), +, transformed, [, 2, *, i, -, 1]
[*, i, +, 1, ], =, y, [, i, ], ., getReal, (, ), +, transformed, [, 2, *, i]
[+, 1, ], =, y, [, i, ], ., getReal, (, ), +, transformed, [, 2, *, i, -, 1]
[], =, y, [, i, ], ., getReal, (, ), +, transformed, [, 2, *, i, -, 1, ], ;]
[;, }, return, transformed, ;, }, }]
[+, transformed, [, 2, *, i, -, 1, ], ;, }, return, transformed, ;, }, }]
[., getReal, (, ), +, transformed, [, 2, *, i, -, 1, ], ;, }, return, transformed, ;, }, }]
[[, i, ], ., getReal, (, ), +, transformed, [, 2, *, i, -, 1, ], ;, }, return, transformed]
[], ., getReal, (, ), +, transformed, [, 2, *, i, -, 1, ], ;, }, return, transformed, ;, }]
[;, }, return, transformed, ;, }, }]
[[, 2, *, i, -, 1, ], ;, }, return, transformed, ;, }, }]
[], ;, }, return, transformed, ;, }, }]
[-, 1, ], ;, }, return, transformed, ;, }, }]
[*, i, -, 1, ], ;, }, return, transformed, ;, }, }]
[-, 1, ], ;, }, return, transformed, ;, }, }]
[], ;, }, return, transformed, ;, }, }]
[;, }, }]
