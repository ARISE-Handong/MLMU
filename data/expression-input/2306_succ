[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NEGATIVE_COMPLEX_MODULE, ,, r, ), ;, }, return, new, Complex, (, r, *]
[<, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NEGATIVE_COMPLEX_MODULE, ,, r, ), ;, }, return, new, Complex, (]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NEGATIVE_COMPLEX_MODULE, ,, r, ), ;, }, return, new, Complex, (, r, *]
[;, }, return, new, Complex, (, r, *, FastMath, ., cos, (, theta, ), ,, r, *, FastMath, ., sin]
[,, r, ), ;, }, return, new, Complex, (, r, *, FastMath, ., cos, (, theta, ), ,, r, *]
[., NEGATIVE_COMPLEX_MODULE, ,, r, ), ;, }, return, new, Complex, (, r, *, FastMath, ., cos, (, theta, ), ,]
[), ;, }, return, new, Complex, (, r, *, FastMath, ., cos, (, theta, ), ,, r, *, FastMath, .]
[;, }, public, static, Complex, [, ], convertToComplex, (, double, [, ], real, ), {, final, Complex, c, [, ]]
[,, r, *, FastMath, ., sin, (, theta, ), ), ;, }, public, static, Complex, [, ], convertToComplex, (, double]
[*, FastMath, ., cos, (, theta, ), ,, r, *, FastMath, ., sin, (, theta, ), ), ;, }, public]
[,, r, *, FastMath, ., sin, (, theta, ), ), ;, }, public, static, Complex, [, ], convertToComplex, (, double]
[., cos, (, theta, ), ,, r, *, FastMath, ., sin, (, theta, ), ), ;, }, public, static, Complex]
[), ,, r, *, FastMath, ., sin, (, theta, ), ), ;, }, public, static, Complex, [, ], convertToComplex, (]
[), ;, }, public, static, Complex, [, ], convertToComplex, (, double, [, ], real, ), {, final, Complex, c, []
[*, FastMath, ., sin, (, theta, ), ), ;, }, public, static, Complex, [, ], convertToComplex, (, double, [, ]]
[), ;, }, public, static, Complex, [, ], convertToComplex, (, double, [, ], real, ), {, final, Complex, c, []
[., sin, (, theta, ), ), ;, }, public, static, Complex, [, ], convertToComplex, (, double, [, ], real, )]
[), ), ;, }, public, static, Complex, [, ], convertToComplex, (, double, [, ], real, ), {, final, Complex, c]
[;, for, (, int, i, =, 0, ;, i, <, real, ., length, ;, i, ++, ), {, c, []
[], ;, for, (, int, i, =, 0, ;, i, <, real, ., length, ;, i, ++, ), {, c]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, real, ., length, ;, i, ++, )]
[;, i, <, real, ., length, ;, i, ++, ), {, c, [, i, ], =, new, Complex, (, real]
[;, i, ++, ), {, c, [, i, ], =, new, Complex, (, real, [, i, ], ,, 0, )]
[<, real, ., length, ;, i, ++, ), {, c, [, i, ], =, new, Complex, (, real, [, i]
[;, i, ++, ), {, c, [, i, ], =, new, Complex, (, real, [, i, ], ,, 0, )]
[., length, ;, i, ++, ), {, c, [, i, ], =, new, Complex, (, real, [, i, ], ,]
[), {, c, [, i, ], =, new, Complex, (, real, [, i, ], ,, 0, ), ;, }, return]
[++, ), {, c, [, i, ], =, new, Complex, (, real, [, i, ], ,, 0, ), ;, }]
[=, new, Complex, (, real, [, i, ], ,, 0, ), ;, }, return, c, ;, }, }]
[[, i, ], =, new, Complex, (, real, [, i, ], ,, 0, ), ;, }, return, c, ;, }]
[], =, new, Complex, (, real, [, i, ], ,, 0, ), ;, }, return, c, ;, }, }]
[;, }, return, c, ;, }, }]
[,, 0, ), ;, }, return, c, ;, }, }]
[[, i, ], ,, 0, ), ;, }, return, c, ;, }, }]
[], ,, 0, ), ;, }, return, c, ;, }, }]
[), ;, }, return, c, ;, }, }]
[;, }, }]
