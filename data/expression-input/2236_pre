[;, public, abstract, class, ValueAxis, extends, Axis, implements, Cloneable, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[Cloneable, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =, 3698345477322391456L, ;, public, static, final, Range, DEFAULT_RANGE, =]
[,, Serializable, {, private, static, final, long, serialVersionUID, =, 3698345477322391456L, ;, public, static, final, Range, DEFAULT_RANGE, =, new, Range, (]
[{, private, static, final, long, serialVersionUID, =, 3698345477322391456L, ;, public, static, final, Range, DEFAULT_RANGE, =, new, Range, (, 0.0, ,]
[public, static, final, Range, DEFAULT_RANGE, =, new, Range, (, 0.0, ,, 1.0, ), ;, public, static, final, boolean, DEFAULT_AUTO_RANGE, =]
[(, 0.0, ,, 1.0, ), ;, public, static, final, boolean, DEFAULT_AUTO_RANGE, =, true, ;, public, static, final, boolean, DEFAULT_INVERTED, =]
[final, boolean, DEFAULT_AUTO_RANGE, =, true, ;, public, static, final, boolean, DEFAULT_INVERTED, =, false, ;, public, static, final, double, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, =]
[final, boolean, DEFAULT_INVERTED, =, false, ;, public, static, final, double, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, =, 0.00000001, ;, public, static, final, double, DEFAULT_LOWER_MARGIN, =]
[final, double, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, =, 0.00000001, ;, public, static, final, double, DEFAULT_LOWER_MARGIN, =, 0.05, ;, public, static, final, double, DEFAULT_UPPER_MARGIN, =]
[final, double, DEFAULT_LOWER_MARGIN, =, 0.05, ;, public, static, final, double, DEFAULT_UPPER_MARGIN, =, 0.05, ;, public, static, final, boolean, DEFAULT_AUTO_TICK_UNIT_SELECTION, =]
[final, double, DEFAULT_UPPER_MARGIN, =, 0.05, ;, public, static, final, boolean, DEFAULT_AUTO_TICK_UNIT_SELECTION, =, true, ;, public, static, final, int, MAXIMUM_TICK_COUNT, =]
[private, int, minorTickCount, ;, private, boolean, verticalTickLabels, ;, protected, ValueAxis, (, String, label, ,, TickUnitSource, standardTickUnits, ), {, super, (]
[;, private, boolean, verticalTickLabels, ;, protected, ValueAxis, (, String, label, ,, TickUnitSource, standardTickUnits, ), {, super, (, label, ), ;]
[;, private, boolean, verticalTickLabels, ;, protected, ValueAxis, (, String, label, ,, TickUnitSource, standardTickUnits, ), {, super, (, label, ), ;]
[;, protected, ValueAxis, (, String, label, ,, TickUnitSource, standardTickUnits, ), {, super, (, label, ), ;, this, ., positiveArrowVisible, =]
[ValueAxis, (, String, label, ,, TickUnitSource, standardTickUnits, ), {, super, (, label, ), ;, this, ., positiveArrowVisible, =, false, ;]
[ValueAxis, (, String, label, ,, TickUnitSource, standardTickUnits, ), {, super, (, label, ), ;, this, ., positiveArrowVisible, =, false, ;]
[,, TickUnitSource, standardTickUnits, ), {, super, (, label, ), ;, this, ., positiveArrowVisible, =, false, ;, this, ., negativeArrowVisible, =]
[standardTickUnits, ), {, super, (, label, ), ;, this, ., positiveArrowVisible, =, false, ;, this, ., negativeArrowVisible, =, false, ;]
[standardTickUnits, ), {, super, (, label, ), ;, this, ., positiveArrowVisible, =, false, ;, this, ., negativeArrowVisible, =, false, ;]
[(, label, ), ;, this, ., positiveArrowVisible, =, false, ;, this, ., negativeArrowVisible, =, false, ;, this, ., range, =]
[), ;, this, ., positiveArrowVisible, =, false, ;, this, ., negativeArrowVisible, =, false, ;, this, ., range, =, DEFAULT_RANGE, ;]
[), ;, this, ., positiveArrowVisible, =, false, ;, this, ., negativeArrowVisible, =, false, ;, this, ., range, =, DEFAULT_RANGE, ;]
[positiveArrowVisible, =, false, ;, this, ., negativeArrowVisible, =, false, ;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =]
[false, ;, this, ., negativeArrowVisible, =, false, ;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;]
[false, ;, this, ., negativeArrowVisible, =, false, ;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;]
[negativeArrowVisible, =, false, ;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =]
[false, ;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;]
[false, ;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;]
[range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =]
[DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;]
[DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;]
[autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =]
[DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;]
[DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;]
[defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =]
[DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;]
[DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;]
[inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =]
[DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;]
[DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;]
[autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =]
[DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;]
[DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;]
[lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection, =]
[DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;]
[DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;]
[upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =]
[., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =]
[this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, ), ;]
[this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, ), ;]
[DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, ), ;, p1, ., addPoint, (]
[this, ., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, ), ;, p1, ., addPoint, (, 0, ,]
[=, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, ), ;, p1, ., addPoint, (, 0, ,, 0, ), ;]
[=, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, ), ;, p1, ., addPoint, (, 0, ,, 0, ), ;]
[p1, =, new, Polygon, (, ), ;, p1, ., addPoint, (, 0, ,, 0, ), ;, p1, ., addPoint, (]
[=, new, Polygon, (, ), ;, p1, ., addPoint, (, 0, ,, 0, ), ;, p1, ., addPoint, (, -]
[Polygon, (, ), ;, p1, ., addPoint, (, 0, ,, 0, ), ;, p1, ., addPoint, (, -, 2, ,]
[;, p1, ., addPoint, (, 0, ,, 0, ), ;, p1, ., addPoint, (, -, 2, ,, 2, ), ;]
[;, p1, ., addPoint, (, 0, ,, 0, ), ;, p1, ., addPoint, (, -, 2, ,, 2, ), ;]
[(, 0, ,, 0, ), ;, p1, ., addPoint, (, -, 2, ,, 2, ), ;, p1, ., addPoint, (]
[,, 0, ), ;, p1, ., addPoint, (, -, 2, ,, 2, ), ;, p1, ., addPoint, (, 2, ,]
[;, p1, ., addPoint, (, -, 2, ,, 2, ), ;, p1, ., addPoint, (, 2, ,, 2, ), ;]
[;, p1, ., addPoint, (, -, 2, ,, 2, ), ;, p1, ., addPoint, (, 2, ,, 2, ), ;]
[(, -, 2, ,, 2, ), ;, p1, ., addPoint, (, 2, ,, 2, ), ;, this, ., upArrow, =]
[), ;, p1, ., addPoint, (, 2, ,, 2, ), ;, this, ., upArrow, =, p1, ;, Polygon, p2, =]
[(, 2, ,, 2, ), ;, this, ., upArrow, =, p1, ;, Polygon, p2, =, new, Polygon, (, ), ;]
[(, 2, ,, 2, ), ;, this, ., upArrow, =, p1, ;, Polygon, p2, =, new, Polygon, (, ), ;]
[), ;, this, ., upArrow, =, p1, ;, Polygon, p2, =, new, Polygon, (, ), ;, p2, ., addPoint, (]
[this, ., upArrow, =, p1, ;, Polygon, p2, =, new, Polygon, (, ), ;, p2, ., addPoint, (, 0, ,]
[=, p1, ;, Polygon, p2, =, new, Polygon, (, ), ;, p2, ., addPoint, (, 0, ,, 0, ), ;]
[=, p1, ;, Polygon, p2, =, new, Polygon, (, ), ;, p2, ., addPoint, (, 0, ,, 0, ), ;]
[p2, =, new, Polygon, (, ), ;, p2, ., addPoint, (, 0, ,, 0, ), ;, p2, ., addPoint, (]
[=, new, Polygon, (, ), ;, p2, ., addPoint, (, 0, ,, 0, ), ;, p2, ., addPoint, (, -]
[Polygon, (, ), ;, p2, ., addPoint, (, 0, ,, 0, ), ;, p2, ., addPoint, (, -, 2, ,]
[(, ), ;, p2, ., addPoint, (, 0, ,, 0, ), ;, p2, ., addPoint, (, -, 2, ,, -]
[p2, ., addPoint, (, 0, ,, 0, ), ;, p2, ., addPoint, (, -, 2, ,, -, 2, ), ;]
[p2, ., addPoint, (, 0, ,, 0, ), ;, p2, ., addPoint, (, -, 2, ,, -, 2, ), ;]
[0, ,, 0, ), ;, p2, ., addPoint, (, -, 2, ,, -, 2, ), ;, p2, ., addPoint, (]
[0, ), ;, p2, ., addPoint, (, -, 2, ,, -, 2, ), ;, p2, ., addPoint, (, 2, ,]
[), ;, p2, ., addPoint, (, -, 2, ,, -, 2, ), ;, p2, ., addPoint, (, 2, ,, -]
[., addPoint, (, -, 2, ,, -, 2, ), ;, p2, ., addPoint, (, 2, ,, -, 2, ), ;]
[., addPoint, (, -, 2, ,, -, 2, ), ;, p2, ., addPoint, (, 2, ,, -, 2, ), ;]
[2, ,, -, 2, ), ;, p2, ., addPoint, (, 2, ,, -, 2, ), ;, this, ., downArrow, =]
[;, p2, ., addPoint, (, 2, ,, -, 2, ), ;, this, ., downArrow, =, p2, ;, Polygon, p3, =]
[2, ,, -, 2, ), ;, this, ., downArrow, =, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;]
[2, ,, -, 2, ), ;, this, ., downArrow, =, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;]
[), ;, this, ., downArrow, =, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;, p3, ., addPoint, (]
[this, ., downArrow, =, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;, p3, ., addPoint, (, 0, ,]
[=, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;, p3, ., addPoint, (, 0, ,, 0, ), ;]
[=, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;, p3, ., addPoint, (, 0, ,, 0, ), ;]
[p3, =, new, Polygon, (, ), ;, p3, ., addPoint, (, 0, ,, 0, ), ;, p3, ., addPoint, (]
[=, new, Polygon, (, ), ;, p3, ., addPoint, (, 0, ,, 0, ), ;, p3, ., addPoint, (, -]
[Polygon, (, ), ;, p3, ., addPoint, (, 0, ,, 0, ), ;, p3, ., addPoint, (, -, 2, ,]
[(, ), ;, p3, ., addPoint, (, 0, ,, 0, ), ;, p3, ., addPoint, (, -, 2, ,, -]
[p3, ., addPoint, (, 0, ,, 0, ), ;, p3, ., addPoint, (, -, 2, ,, -, 2, ), ;]
[p3, ., addPoint, (, 0, ,, 0, ), ;, p3, ., addPoint, (, -, 2, ,, -, 2, ), ;]
[0, ,, 0, ), ;, p3, ., addPoint, (, -, 2, ,, -, 2, ), ;, p3, ., addPoint, (]
[,, 0, ), ;, p3, ., addPoint, (, -, 2, ,, -, 2, ), ;, p3, ., addPoint, (, -]
[), ;, p3, ., addPoint, (, -, 2, ,, -, 2, ), ;, p3, ., addPoint, (, -, 2, ,]
[., addPoint, (, -, 2, ,, -, 2, ), ;, p3, ., addPoint, (, -, 2, ,, 2, ), ;]
[., addPoint, (, -, 2, ,, -, 2, ), ;, p3, ., addPoint, (, -, 2, ,, 2, ), ;]
[2, ,, -, 2, ), ;, p3, ., addPoint, (, -, 2, ,, 2, ), ;, this, ., rightArrow, =]
[;, p3, ., addPoint, (, -, 2, ,, 2, ), ;, this, ., rightArrow, =, p3, ;, Polygon, p4, =]
[-, 2, ,, 2, ), ;, this, ., rightArrow, =, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;]
[-, 2, ,, 2, ), ;, this, ., rightArrow, =, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;]
[), ;, this, ., rightArrow, =, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;, p4, ., addPoint, (]
[this, ., rightArrow, =, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;, p4, ., addPoint, (, 0, ,]
[=, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;, p4, ., addPoint, (, 0, ,, 0, ), ;]
[=, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;, p4, ., addPoint, (, 0, ,, 0, ), ;]
[p4, =, new, Polygon, (, ), ;, p4, ., addPoint, (, 0, ,, 0, ), ;, p4, ., addPoint, (]
[new, Polygon, (, ), ;, p4, ., addPoint, (, 0, ,, 0, ), ;, p4, ., addPoint, (, 2, ,]
[Polygon, (, ), ;, p4, ., addPoint, (, 0, ,, 0, ), ;, p4, ., addPoint, (, 2, ,, -]
[;, p4, ., addPoint, (, 0, ,, 0, ), ;, p4, ., addPoint, (, 2, ,, -, 2, ), ;]
[;, p4, ., addPoint, (, 0, ,, 0, ), ;, p4, ., addPoint, (, 2, ,, -, 2, ), ;]
[(, 0, ,, 0, ), ;, p4, ., addPoint, (, 2, ,, -, 2, ), ;, p4, ., addPoint, (]
[,, 0, ), ;, p4, ., addPoint, (, 2, ,, -, 2, ), ;, p4, ., addPoint, (, 2, ,]
[;, p4, ., addPoint, (, 2, ,, -, 2, ), ;, p4, ., addPoint, (, 2, ,, 2, ), ;]
[;, p4, ., addPoint, (, 2, ,, -, 2, ), ;, p4, ., addPoint, (, 2, ,, 2, ), ;]
[(, 2, ,, -, 2, ), ;, p4, ., addPoint, (, 2, ,, 2, ), ;, this, ., leftArrow, =]
[,, -, 2, ), ;, p4, ., addPoint, (, 2, ,, 2, ), ;, this, ., leftArrow, =, p4, ;]
[,, -, 2, ), ;, p4, ., addPoint, (, 2, ,, 2, ), ;, this, ., leftArrow, =, p4, ;]
[;, p4, ., addPoint, (, 2, ,, 2, ), ;, this, ., leftArrow, =, p4, ;, this, ., verticalTickLabels, =]
[., addPoint, (, 2, ,, 2, ), ;, this, ., leftArrow, =, p4, ;, this, ., verticalTickLabels, =, false, ;]
[., addPoint, (, 2, ,, 2, ), ;, this, ., leftArrow, =, p4, ;, this, ., verticalTickLabels, =, false, ;]
[,, 2, ), ;, this, ., leftArrow, =, p4, ;, this, ., verticalTickLabels, =, false, ;, this, ., minorTickCount, =]
[this, ., verticalTickLabels, =, false, ;, this, ., minorTickCount, =, 0, ;, }, public, boolean, isVerticalTickLabels, (, ), {, return]
[this, ., verticalTickLabels, =, false, ;, this, ., minorTickCount, =, 0, ;, }, public, boolean, isVerticalTickLabels, (, ), {, return]
[isVerticalTickLabels, (, ), {, return, this, ., verticalTickLabels, ;, }, public, void, setVerticalTickLabels, (, boolean, flag, ), {, if, (]
[isVerticalTickLabels, (, ), {, return, this, ., verticalTickLabels, ;, }, public, void, setVerticalTickLabels, (, boolean, flag, ), {, if, (]
[isVerticalTickLabels, (, ), {, return, this, ., verticalTickLabels, ;, }, public, void, setVerticalTickLabels, (, boolean, flag, ), {, if, (]
[return, this, ., verticalTickLabels, ;, }, public, void, setVerticalTickLabels, (, boolean, flag, ), {, if, (, this, ., verticalTickLabels, !=]
[verticalTickLabels, ;, }, public, void, setVerticalTickLabels, (, boolean, flag, ), {, if, (, this, ., verticalTickLabels, !=, flag, ), {]
[verticalTickLabels, ;, }, public, void, setVerticalTickLabels, (, boolean, flag, ), {, if, (, this, ., verticalTickLabels, !=, flag, ), {]
[void, setVerticalTickLabels, (, boolean, flag, ), {, if, (, this, ., verticalTickLabels, !=, flag, ), {, this, ., verticalTickLabels, =]
[(, boolean, flag, ), {, if, (, this, ., verticalTickLabels, !=, flag, ), {, this, ., verticalTickLabels, =, flag, ;]
[flag, ), {, if, (, this, ., verticalTickLabels, !=, flag, ), {, this, ., verticalTickLabels, =, flag, ;, notifyListeners, (]
[if, (, this, ., verticalTickLabels, !=, flag, ), {, this, ., verticalTickLabels, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (]
[flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, boolean, isPositiveArrowVisible, (, ), {, return]
[flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, boolean, isPositiveArrowVisible, (, ), {, return]
[public, boolean, isPositiveArrowVisible, (, ), {, return, this, ., positiveArrowVisible, ;, }, public, void, setPositiveArrowVisible, (, boolean, visible, ), {]
[public, boolean, isPositiveArrowVisible, (, ), {, return, this, ., positiveArrowVisible, ;, }, public, void, setPositiveArrowVisible, (, boolean, visible, ), {]
[), {, return, this, ., positiveArrowVisible, ;, }, public, void, setPositiveArrowVisible, (, boolean, visible, ), {, this, ., positiveArrowVisible, =]
[return, this, ., positiveArrowVisible, ;, }, public, void, setPositiveArrowVisible, (, boolean, visible, ), {, this, ., positiveArrowVisible, =, visible, ;]
[., positiveArrowVisible, ;, }, public, void, setPositiveArrowVisible, (, boolean, visible, ), {, this, ., positiveArrowVisible, =, visible, ;, notifyListeners, (]
[}, public, void, setPositiveArrowVisible, (, boolean, visible, ), {, this, ., positiveArrowVisible, =, visible, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, visible, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, boolean, isNegativeArrowVisible, (, ), {, return]
[=, visible, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, boolean, isNegativeArrowVisible, (, ), {, return]
[public, boolean, isNegativeArrowVisible, (, ), {, return, this, ., negativeArrowVisible, ;, }, public, void, setNegativeArrowVisible, (, boolean, visible, ), {]
[public, boolean, isNegativeArrowVisible, (, ), {, return, this, ., negativeArrowVisible, ;, }, public, void, setNegativeArrowVisible, (, boolean, visible, ), {]
[), {, return, this, ., negativeArrowVisible, ;, }, public, void, setNegativeArrowVisible, (, boolean, visible, ), {, this, ., negativeArrowVisible, =]
[return, this, ., negativeArrowVisible, ;, }, public, void, setNegativeArrowVisible, (, boolean, visible, ), {, this, ., negativeArrowVisible, =, visible, ;]
[., negativeArrowVisible, ;, }, public, void, setNegativeArrowVisible, (, boolean, visible, ), {, this, ., negativeArrowVisible, =, visible, ;, notifyListeners, (]
[}, public, void, setNegativeArrowVisible, (, boolean, visible, ), {, this, ., negativeArrowVisible, =, visible, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, visible, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getUpArrow, (, ), {, return]
[=, visible, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getUpArrow, (, ), {, return]
[getUpArrow, (, ), {, return, this, ., upArrow, ;, }, public, void, setUpArrow, (, Shape, arrow, ), {, if, (]
[getUpArrow, (, ), {, return, this, ., upArrow, ;, }, public, void, setUpArrow, (, Shape, arrow, ), {, if, (]
[), {, return, this, ., upArrow, ;, }, public, void, setUpArrow, (, Shape, arrow, ), {, if, (, arrow, ==]
[., upArrow, ;, }, public, void, setUpArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw]
[}, public, void, setUpArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }]
[(, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }]
[{, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., upArrow, =]
[(, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., upArrow, =, arrow, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., upArrow, =, arrow, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., upArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getDownArrow, (, ), {, return]
[=, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getDownArrow, (, ), {, return]
[getDownArrow, (, ), {, return, this, ., downArrow, ;, }, public, void, setDownArrow, (, Shape, arrow, ), {, if, (]
[getDownArrow, (, ), {, return, this, ., downArrow, ;, }, public, void, setDownArrow, (, Shape, arrow, ), {, if, (]
[), {, return, this, ., downArrow, ;, }, public, void, setDownArrow, (, Shape, arrow, ), {, if, (, arrow, ==]
[., downArrow, ;, }, public, void, setDownArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw]
[}, public, void, setDownArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }]
[(, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }]
[{, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., downArrow, =]
[(, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., downArrow, =, arrow, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., downArrow, =, arrow, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., downArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getLeftArrow, (, ), {, return]
[=, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getLeftArrow, (, ), {, return]
[getLeftArrow, (, ), {, return, this, ., leftArrow, ;, }, public, void, setLeftArrow, (, Shape, arrow, ), {, if, (]
[getLeftArrow, (, ), {, return, this, ., leftArrow, ;, }, public, void, setLeftArrow, (, Shape, arrow, ), {, if, (]
[), {, return, this, ., leftArrow, ;, }, public, void, setLeftArrow, (, Shape, arrow, ), {, if, (, arrow, ==]
[., leftArrow, ;, }, public, void, setLeftArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw]
[}, public, void, setLeftArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }]
[(, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }]
[{, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., leftArrow, =]
[(, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., leftArrow, =, arrow, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., leftArrow, =, arrow, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., leftArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getRightArrow, (, ), {, return]
[=, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getRightArrow, (, ), {, return]
[getRightArrow, (, ), {, return, this, ., rightArrow, ;, }, public, void, setRightArrow, (, Shape, arrow, ), {, if, (]
[getRightArrow, (, ), {, return, this, ., rightArrow, ;, }, public, void, setRightArrow, (, Shape, arrow, ), {, if, (]
[), {, return, this, ., rightArrow, ;, }, public, void, setRightArrow, (, Shape, arrow, ), {, if, (, arrow, ==]
[., rightArrow, ;, }, public, void, setRightArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw]
[}, public, void, setRightArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }]
[(, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }]
[{, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., rightArrow, =]
[(, arrow, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., rightArrow, =, arrow, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., rightArrow, =, arrow, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., rightArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (]
[protected, void, drawAxisLine, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Line2D, axisLine, =]
[Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Line2D, axisLine, =, null, ;, if, (]
[Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Line2D, axisLine, =, null, ;, if, (]
[,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Line2D, axisLine, =, null, ;, if, (, edge, ==]
[,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Line2D, axisLine, =, null, ;, if, (, edge, ==]
[dataArea, ,, RectangleEdge, edge, ), {, Line2D, axisLine, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[RectangleEdge, edge, ), {, Line2D, axisLine, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, axisLine, =]
[axisLine, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, axisLine, =, new, Line2D, ., Double, (]
[axisLine, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, axisLine, =, new, Line2D, ., Double, (]
[edge, ==, RectangleEdge, ., TOP, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,]
[RectangleEdge, ., TOP, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,]
[RectangleEdge, ., TOP, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,]
[=, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,]
[., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (]
[., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (]
[(, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==]
[(, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==]
[dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, axisLine, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, axisLine, =, new, Line2D, ., Double, (]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, axisLine, =, new, Line2D, ., Double, (]
[edge, ==, RectangleEdge, ., BOTTOM, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,]
[RectangleEdge, ., BOTTOM, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,]
[RectangleEdge, ., BOTTOM, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,]
[=, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,]
[., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (]
[., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (]
[(, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==]
[(, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==]
[dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, axisLine, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, axisLine, =, new, Line2D, ., Double, (]
[}, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,]
[}, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,]
[RectangleEdge, ., LEFT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,]
[LEFT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,]
[LEFT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,]
[,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, else, if, (]
[,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, else, if, (]
[., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, else, if, (, edge, ==]
[., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, else, if, (, edge, ==]
[cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[dataArea, ., getMaxY, (, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, axisLine, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, axisLine, =, new, Line2D, ., Double, (]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,]
[RectangleEdge, ., RIGHT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,]
[RIGHT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,]
[RIGHT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,]
[Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }]
[Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }]
[dataArea, ., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, g2, ., setPaint, (]
[,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, g2, ., setPaint, (, getAxisLinePaint, (, ), ), ;]
[,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, g2, ., setPaint, (, getAxisLinePaint, (, ), ), ;]
[., getMaxY, (, ), ), ;, }, g2, ., setPaint, (, getAxisLinePaint, (, ), ), ;, g2, ., setStroke, (]
[;, }, g2, ., setPaint, (, getAxisLinePaint, (, ), ), ;, g2, ., setStroke, (, getAxisLineStroke, (, ), ), ;]
[;, }, g2, ., setPaint, (, getAxisLinePaint, (, ), ), ;, g2, ., setStroke, (, getAxisLineStroke, (, ), ), ;]
[setPaint, (, getAxisLinePaint, (, ), ), ;, g2, ., setStroke, (, getAxisLineStroke, (, ), ), ;, g2, ., draw, (]
[;, g2, ., setStroke, (, getAxisLineStroke, (, ), ), ;, g2, ., draw, (, axisLine, ), ;, boolean, drawUpOrRight, =]
[getAxisLineStroke, (, ), ), ;, g2, ., draw, (, axisLine, ), ;, boolean, drawUpOrRight, =, false, ;, boolean, drawDownOrLeft, =]
[;, g2, ., draw, (, axisLine, ), ;, boolean, drawUpOrRight, =, false, ;, boolean, drawDownOrLeft, =, false, ;, if, (]
[;, g2, ., draw, (, axisLine, ), ;, boolean, drawUpOrRight, =, false, ;, boolean, drawDownOrLeft, =, false, ;, if, (]
[;, boolean, drawUpOrRight, =, false, ;, boolean, drawDownOrLeft, =, false, ;, if, (, this, ., positiveArrowVisible, ), {, if, (]
[;, boolean, drawUpOrRight, =, false, ;, boolean, drawDownOrLeft, =, false, ;, if, (, this, ., positiveArrowVisible, ), {, if, (]
[;, boolean, drawDownOrLeft, =, false, ;, if, (, this, ., positiveArrowVisible, ), {, if, (, this, ., inverted, ), {]
[drawDownOrLeft, =, false, ;, if, (, this, ., positiveArrowVisible, ), {, if, (, this, ., inverted, ), {, drawDownOrLeft, =]
[(, this, ., positiveArrowVisible, ), {, if, (, this, ., inverted, ), {, drawDownOrLeft, =, true, ;, }, else, {]
[., positiveArrowVisible, ), {, if, (, this, ., inverted, ), {, drawDownOrLeft, =, true, ;, }, else, {, drawUpOrRight, =]
[this, ., inverted, ), {, drawDownOrLeft, =, true, ;, }, else, {, drawUpOrRight, =, true, ;, }, }, if, (]
[this, ., inverted, ), {, drawDownOrLeft, =, true, ;, }, else, {, drawUpOrRight, =, true, ;, }, }, if, (]
[true, ;, }, else, {, drawUpOrRight, =, true, ;, }, }, if, (, this, ., negativeArrowVisible, ), {, if, (]
[true, ;, }, else, {, drawUpOrRight, =, true, ;, }, }, if, (, this, ., negativeArrowVisible, ), {, if, (]
[drawUpOrRight, =, true, ;, }, }, if, (, this, ., negativeArrowVisible, ), {, if, (, this, ., inverted, ), {]
[true, ;, }, }, if, (, this, ., negativeArrowVisible, ), {, if, (, this, ., inverted, ), {, drawUpOrRight, =]
[(, this, ., negativeArrowVisible, ), {, if, (, this, ., inverted, ), {, drawUpOrRight, =, true, ;, }, else, {]
[., negativeArrowVisible, ), {, if, (, this, ., inverted, ), {, drawUpOrRight, =, true, ;, }, else, {, drawDownOrLeft, =]
[this, ., inverted, ), {, drawUpOrRight, =, true, ;, }, else, {, drawDownOrLeft, =, true, ;, }, }, if, (]
[=, true, ;, }, else, {, drawDownOrLeft, =, true, ;, }, }, if, (, drawUpOrRight, ), {, double, x, =]
[{, drawDownOrLeft, =, true, ;, }, }, if, (, drawUpOrRight, ), {, double, x, =, 0.0, ;, double, y, =]
[}, }, if, (, drawUpOrRight, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =]
[drawUpOrRight, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (]
[drawUpOrRight, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (]
[drawUpOrRight, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (]
[{, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==]
[{, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==]
[0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||]
[0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||]
[double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==]
[double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==]
[Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[=, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =]
[=, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =]
[==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMaxX, (, ), ;]
[., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =]
[||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;]
[==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =]
[==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =]
[dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (]
[dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (]
[dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (]
[getMaxX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (, edge, ==]
[getMaxX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (, edge, ==]
[y, =, cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||]
[y, =, cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||]
[cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==]
[cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==]
[., rightArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =]
[else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;]
[(, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =]
[(, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =]
[||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMinY, (, ), ;]
[==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMinY, (, ), ;, arrow, =]
[==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMinY, (, ), ;, arrow, =]
[cursor, ;, y, =, dataArea, ., getMinY, (, ), ;, arrow, =, this, ., upArrow, ;, }, AffineTransform, transformer, =]
[., getMinY, (, ), ;, arrow, =, this, ., upArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;]
[., getMinY, (, ), ;, arrow, =, this, ., upArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;]
[;, arrow, =, this, ., upArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (]
[=, this, ., upArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,]
[AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =]
[AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =]
[AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (]
[;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;]
[;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;]
[(, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (]
[y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;]
[y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;]
[shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;, g2, ., draw, (]
[arrow, ), ;, g2, ., fill, (, shape, ), ;, g2, ., draw, (, shape, ), ;, }, if, (]
[(, shape, ), ;, g2, ., draw, (, shape, ), ;, }, if, (, drawDownOrLeft, ), {, double, x, =]
[., draw, (, shape, ), ;, }, if, (, drawDownOrLeft, ), {, double, x, =, 0.0, ;, double, y, =]
[;, }, if, (, drawDownOrLeft, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =]
[drawDownOrLeft, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (]
[drawDownOrLeft, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (]
[drawDownOrLeft, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (]
[{, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==]
[{, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==]
[0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||]
[0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||]
[double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==]
[double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==]
[Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[=, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =]
[=, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =]
[==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMinX, (, ), ;]
[., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMinX, (, ), ;, y, =]
[||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMinX, (, ), ;, y, =, cursor, ;]
[==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMinX, (, ), ;, y, =, cursor, ;, arrow, =]
[==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMinX, (, ), ;, y, =, cursor, ;, arrow, =]
[dataArea, ., getMinX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (]
[dataArea, ., getMinX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (]
[dataArea, ., getMinX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (]
[getMinX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (, edge, ==]
[getMinX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (, edge, ==]
[y, =, cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||]
[y, =, cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||]
[cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==]
[cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==]
[., leftArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =]
[else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;]
[(, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =]
[(, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =]
[||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;]
[==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;, arrow, =]
[==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;, arrow, =]
[cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;, arrow, =, this, ., downArrow, ;, }, AffineTransform, transformer, =]
[., getMaxY, (, ), ;, arrow, =, this, ., downArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;]
[., getMaxY, (, ), ;, arrow, =, this, ., downArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;]
[;, arrow, =, this, ., downArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (]
[=, this, ., downArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,]
[AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =]
[AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =]
[AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (]
[;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;]
[;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;]
[(, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (]
[y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;]
[y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;]
[shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;, g2, ., draw, (]
[[, ], calculateAnchorPoint, (, ValueTick, tick, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, RectangleInsets, insets, =]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, float, [, ], result, =]
[,, RectangleEdge, edge, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, float, [, ], result, =, new, float, []
[RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, float, [, ], result, =, new, float, [, 2, ], ;, if, (]
[RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, float, [, ], result, =, new, float, [, 2, ], ;, if, (]
[=, getTickLabelInsets, (, ), ;, float, [, ], result, =, new, float, [, 2, ], ;, if, (, edge, ==]
[=, getTickLabelInsets, (, ), ;, float, [, ], result, =, new, float, [, 2, ], ;, if, (, edge, ==]
[float, [, ], result, =, new, float, [, 2, ], ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[float, [, ], result, =, new, float, [, 2, ], ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[], result, =, new, float, [, 2, ], ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, result, []
[new, float, [, 2, ], ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, result, [, 0, ], =]
[2, ], ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, result, [, 0, ], =, (, float, )]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, result, [, 0, ], =, (, float, ), valueToJava2D, (]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, result, [, 0, ], =, (, float, ), valueToJava2D, (]
[., TOP, ), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,]
[), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[[, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;]
[[, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;]
[], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, []
[float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =]
[(, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, )]
[tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (]
[tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (]
[tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (]
[getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor, -]
[getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor, -]
[edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor, -, insets, ., getBottom, (, ), -]
[=, (, float, ), (, cursor, -, insets, ., getBottom, (, ), -, 2.0, ), ;, }, else, if, (]
[=, (, float, ), (, cursor, -, insets, ., getBottom, (, ), -, 2.0, ), ;, }, else, if, (]
[float, ), (, cursor, -, insets, ., getBottom, (, ), -, 2.0, ), ;, }, else, if, (, edge, ==]
[float, ), (, cursor, -, insets, ., getBottom, (, ), -, 2.0, ), ;, }, else, if, (, edge, ==]
[insets, ., getBottom, (, ), -, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[insets, ., getBottom, (, ), -, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[getBottom, (, ), -, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, []
[-, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, [, 0, ], =]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, [, 0, ], =, (, float, )]
[else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, [, 0, ], =, (, float, ), valueToJava2D, (]
[else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, [, 0, ], =, (, float, ), valueToJava2D, (]
[., BOTTOM, ), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,]
[), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[[, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;]
[[, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;]
[], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, []
[float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =]
[(, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, )]
[tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (]
[tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (]
[tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (]
[getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor, +]
[getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor, +]
[edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor, +, insets, ., getTop, (, ), +]
[=, (, float, ), (, cursor, +, insets, ., getTop, (, ), +, 2.0, ), ;, }, else, if, (]
[=, (, float, ), (, cursor, +, insets, ., getTop, (, ), +, 2.0, ), ;, }, else, if, (]
[float, ), (, cursor, +, insets, ., getTop, (, ), +, 2.0, ), ;, }, else, if, (, edge, ==]
[float, ), (, cursor, +, insets, ., getTop, (, ), +, 2.0, ), ;, }, else, if, (, edge, ==]
[insets, ., getTop, (, ), +, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[insets, ., getTop, (, ), +, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[getTop, (, ), +, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, []
[+, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =, (, float, )]
[}, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =, (, float, ), (]
[}, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =, (, float, ), (]
[}, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =, (, float, ), (]
[if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =, (, float, ), (, cursor, -]
[if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =, (, float, ), (, cursor, -]
[LEFT, ), {, result, [, 0, ], =, (, float, ), (, cursor, -, insets, ., getLeft, (, ), -]
[result, [, 0, ], =, (, float, ), (, cursor, -, insets, ., getLeft, (, ), -, 2.0, ), ;]
[result, [, 0, ], =, (, float, ), (, cursor, -, insets, ., getLeft, (, ), -, 2.0, ), ;]
[0, ], =, (, float, ), (, cursor, -, insets, ., getLeft, (, ), -, 2.0, ), ;, result, []
[(, float, ), (, cursor, -, insets, ., getLeft, (, ), -, 2.0, ), ;, result, [, 1, ], =]
[(, cursor, -, insets, ., getLeft, (, ), -, 2.0, ), ;, result, [, 1, ], =, (, float, )]
[-, insets, ., getLeft, (, ), -, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (]
[-, insets, ., getLeft, (, ), -, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (]
[-, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,]
[), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[(, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, }, else, if, (]
[(, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, }, else, if, (]
[), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, }, else, if, (, edge, ==]
[), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, }, else, if, (, edge, ==]
[getValue, (, ), ,, dataArea, ,, edge, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[getValue, (, ), ,, dataArea, ,, edge, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[), ,, dataArea, ,, edge, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, []
[,, edge, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =, (, float, )]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =, (, float, ), (]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =, (, float, ), (]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =, (, float, ), (]
[if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =, (, float, ), (, cursor, +]
[if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =, (, float, ), (, cursor, +]
[RIGHT, ), {, result, [, 0, ], =, (, float, ), (, cursor, +, insets, ., getRight, (, ), +]
[result, [, 0, ], =, (, float, ), (, cursor, +, insets, ., getRight, (, ), +, 2.0, ), ;]
[result, [, 0, ], =, (, float, ), (, cursor, +, insets, ., getRight, (, ), +, 2.0, ), ;]
[0, ], =, (, float, ), (, cursor, +, insets, ., getRight, (, ), +, 2.0, ), ;, result, []
[(, float, ), (, cursor, +, insets, ., getRight, (, ), +, 2.0, ), ;, result, [, 1, ], =]
[(, cursor, +, insets, ., getRight, (, ), +, 2.0, ), ;, result, [, 1, ], =, (, float, )]
[+, insets, ., getRight, (, ), +, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (]
[+, insets, ., getRight, (, ), +, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (]
[+, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,]
[), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, }, return]
[,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, info, ), {, AxisState, state, =]
[,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, info, ), {, AxisState, state, =, new, AxisState, (]
[dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, info, ), {, AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (]
[PlotRenderingInfo, info, ), {, AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (, isAxisLineVisible, (, ), ), {]
[), {, AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (]
[AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,]
[=, new, AxisState, (, cursor, ), ;, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,]
[AxisState, (, cursor, ), ;, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,]
[isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, List, ticks, =]
[), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, List, ticks, =, refreshTicks, (]
[{, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, List, ticks, =, refreshTicks, (, g2, ,]
[(, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, List, ticks, =, refreshTicks, (, g2, ,, state, ,]
[,, cursor, ,, dataArea, ,, edge, ), ;, }, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,]
[dataArea, ,, edge, ), ;, }, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;]
[dataArea, ,, edge, ), ;, }, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;]
[;, }, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (]
[ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;]
[ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;]
[g2, ,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, g2, ., setFont, (]
[;, state, ., setTicks, (, ticks, ), ;, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, Iterator, iterator, =]
[;, state, ., setTicks, (, ticks, ), ;, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, Iterator, iterator, =]
[g2, ., setFont, (, getTickLabelFont, (, ), ), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (]
[g2, ., setFont, (, getTickLabelFont, (, ), ), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (]
[iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, ValueTick, tick, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, ValueTick, tick, =, (, ValueTick, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, ValueTick, tick, =, (, ValueTick, )]
[., hasNext, (, ), ), {, ValueTick, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, if, (]
[{, ValueTick, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, if, (, isTickLabelsVisible, (, ), ), {]
[{, ValueTick, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, if, (, isTickLabelsVisible, (, ), ), {]
[(, ValueTick, ), iterator, ., next, (, ), ;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setPaint, (]
[(, isTickLabelsVisible, (, ), ), {, g2, ., setPaint, (, getTickLabelPaint, (, ), ), ;, float, [, ], anchorPoint, =]
[(, ), ), {, g2, ., setPaint, (, getTickLabelPaint, (, ), ), ;, float, [, ], anchorPoint, =, calculateAnchorPoint, (]
[), {, g2, ., setPaint, (, getTickLabelPaint, (, ), ), ;, float, [, ], anchorPoint, =, calculateAnchorPoint, (, tick, ,]
[g2, ., setPaint, (, getTickLabelPaint, (, ), ), ;, float, [, ], anchorPoint, =, calculateAnchorPoint, (, tick, ,, cursor, ,]
[setPaint, (, getTickLabelPaint, (, ), ), ;, float, [, ], anchorPoint, =, calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,]
[(, ), ), ;, float, [, ], anchorPoint, =, calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;]
[(, ), ), ;, float, [, ], anchorPoint, =, calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;]
[float, [, ], anchorPoint, =, calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, TextUtilities, ., drawRotatedString, (]
[float, [, ], anchorPoint, =, calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, TextUtilities, ., drawRotatedString, (]
[(, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,]
[,, cursor, ,, dataArea, ,, edge, ), ;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,]
[,, cursor, ,, dataArea, ,, edge, ), ;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,]
[,, dataArea, ,, edge, ), ;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,, anchorPoint, []
[edge, ), ;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,, anchorPoint, [, 0, ], ,]
[edge, ), ;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,, anchorPoint, [, 0, ], ,]
[;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,, anchorPoint, [, 0, ], ,, anchorPoint, []
[drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,, anchorPoint, [, 0, ], ,, anchorPoint, [, 1, ], ,]
[drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,, anchorPoint, [, 0, ], ,, anchorPoint, [, 1, ], ,]
[), ,, g2, ,, anchorPoint, [, 0, ], ,, anchorPoint, [, 1, ], ,, tick, ., getTextAnchor, (, ), ,]
[), ,, g2, ,, anchorPoint, [, 0, ], ,, anchorPoint, [, 1, ], ,, tick, ., getTextAnchor, (, ), ,]
[0, ], ,, anchorPoint, [, 1, ], ,, tick, ., getTextAnchor, (, ), ,, tick, ., getAngle, (, ), ,]
[0, ], ,, anchorPoint, [, 1, ], ,, tick, ., getTextAnchor, (, ), ,, tick, ., getAngle, (, ), ,]
[getTextAnchor, (, ), ,, tick, ., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), ), ;, }, if, (]
[getTextAnchor, (, ), ,, tick, ., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), ), ;, }, if, (]
[(, ), ,, tick, ., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), ), ;, }, if, (, (]
[(, ), ,, tick, ., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), ), ;, }, if, (, (]
[., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), ), ;, }, if, (, (, isTickMarksVisible, (, ), &&]
[., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), ), ;, }, if, (, (, isTickMarksVisible, (, ), &&]
[., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), ), ;, }, if, (, (, isTickMarksVisible, (, ), &&]
[(, ), ), ;, }, if, (, (, isTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (]
[(, ), ), ;, }, if, (, (, isTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (]
[(, (, isTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MAJOR, ), ), ||]
[(, isTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MAJOR, ), ), ||, (]
[(, isTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MAJOR, ), ), ||, (]
[&&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MAJOR, ), ), ||, (, isMinorTickMarksVisible, (, ), &&]
[&&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MAJOR, ), ), ||, (, isMinorTickMarksVisible, (, ), &&]
[&&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MAJOR, ), ), ||, (, isMinorTickMarksVisible, (, ), &&]
[(, TickType, ., MAJOR, ), ), ||, (, isMinorTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (]
[(, TickType, ., MAJOR, ), ), ||, (, isMinorTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (]
[), &&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ), {, double, ol, =]
[), &&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ), {, double, ol, =]
[&&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ), {, double, ol, =, (]
[&&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ), {, double, ol, =, (]
[&&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ), {, double, ol, =, (]
[(, TickType, ., MINOR, ), ), ), {, double, ol, =, (, tick, ., getTickType, (, ), ., equals, (]
[(, TickType, ., MINOR, ), ), ), {, double, ol, =, (, tick, ., getTickType, (, ), ., equals, (]
[), {, double, ol, =, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ?]
[=, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkOutsideLength, (, ), :]
[., equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =]
[., equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =]
[equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =, (]
[equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =, (]
[equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =, (]
[getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =, (, tick, ., getTickType, (, ), ., equals, (]
[getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =, (, tick, ., getTickType, (, ), ., equals, (]
[), ;, double, il, =, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ?]
[=, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkInsideLength, (, ), :]
[., equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkInsideLength, (, ), :, getTickMarkInsideLength, (, ), ;, float, xx, =]
[TickType, ., MINOR, ), ), ?, getMinorTickMarkInsideLength, (, ), :, getTickMarkInsideLength, (, ), ;, float, xx, =, (, float, )]
[MINOR, ), ), ?, getMinorTickMarkInsideLength, (, ), :, getTickMarkInsideLength, (, ), ;, float, xx, =, (, float, ), valueToJava2D, (]
[MINOR, ), ), ?, getMinorTickMarkInsideLength, (, ), :, getTickMarkInsideLength, (, ), ;, float, xx, =, (, float, ), valueToJava2D, (]
[), :, getTickMarkInsideLength, (, ), ;, float, xx, =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,]
[getTickMarkInsideLength, (, ), ;, float, xx, =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[=, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =]
[float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;]
[float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;]
[tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (]
[,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;]
[,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;]
[), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (]
[g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (]
[g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (]
[setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==]
[setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==]
[), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =]
[(, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (]
[(, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (]
[), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -]
[if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,]
[edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,]
[edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,]
[RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +]
[LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,]
[., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (]
[., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (]
[(, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==]
[(, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==]
[xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +]
[if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,]
[edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,]
[edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,]
[RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -]
[RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,]
[., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (]
[., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (]
[(, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==]
[(, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==]
[xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (]
[}, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,]
[}, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -]
[edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,]
[RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,]
[RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,]
[TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +]
[., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (]
[., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (]
[(, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==]
[(, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==]
[ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (]
[}, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,]
[}, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,]
[if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +]
[edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,]
[RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,]
[RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,]
[BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -]
[=, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il, ), ;, }]
[=, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il, ), ;, }]
[Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (]
[xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, }, double, used, =]
[il, ), ;, }, g2, ., draw, (, mark, ), ;, }, }, double, used, =, 0.0, ;, if, (]
[(, mark, ), ;, }, }, double, used, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, if, (]
[(, mark, ), ;, }, }, double, used, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, if, (]
[), ;, }, }, double, used, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, if, (, edge, ==]
[), ;, }, }, double, used, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, if, (, edge, ==]
[used, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, used, +=]
[if, (, isTickLabelsVisible, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, used, +=, findMaximumTickLabelWidth, (]
[isTickLabelsVisible, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, used, +=, findMaximumTickLabelWidth, (, ticks, ,]
[), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, used, +=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,]
[{, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, used, +=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,]
[RectangleEdge, ., LEFT, ), {, used, +=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;]
[RectangleEdge, ., LEFT, ), {, used, +=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;]
[{, used, +=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorLeft, (]
[g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorLeft, (, used, ), ;, }, else, if, (]
[g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorLeft, (, used, ), ;, }, else, if, (]
[plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorLeft, (, used, ), ;, }, else, if, (, edge, ==]
[plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorLeft, (, used, ), ;, }, else, if, (, edge, ==]
[), ;, state, ., cursorLeft, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[state, ., cursorLeft, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, used, =]
[cursorLeft, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, used, =, findMaximumTickLabelWidth, (]
[used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, used, =, findMaximumTickLabelWidth, (, ticks, ,]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, used, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,]
[else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, used, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,]
[RectangleEdge, ., RIGHT, ), {, used, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;]
[RectangleEdge, ., RIGHT, ), {, used, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;]
[{, used, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorRight, (]
[g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorRight, (, used, ), ;, }, else, if, (]
[g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorRight, (, used, ), ;, }, else, if, (]
[plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorRight, (, used, ), ;, }, else, if, (, edge, ==]
[plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorRight, (, used, ), ;, }, else, if, (, edge, ==]
[), ;, state, ., cursorRight, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[state, ., cursorRight, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, used, =]
[cursorRight, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, used, =, findMaximumTickLabelHeight, (]
[used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,]
[;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,]
[else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,]
[RectangleEdge, ., TOP, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;]
[RectangleEdge, ., TOP, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;]
[{, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorUp, (]
[g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorUp, (, used, ), ;, }, else, if, (]
[g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorUp, (, used, ), ;, }, else, if, (]
[plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorUp, (, used, ), ;, }, else, if, (, edge, ==]
[plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorUp, (, used, ), ;, }, else, if, (, edge, ==]
[), ;, state, ., cursorUp, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[state, ., cursorUp, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, used, =]
[cursorUp, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, used, =, findMaximumTickLabelHeight, (]
[used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,]
[else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,]
[RectangleEdge, ., BOTTOM, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;]
[RectangleEdge, ., BOTTOM, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;]
[{, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorDown, (]
[,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorDown, (, used, ), ;, }, }, return]
[reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (]
[reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (]
[Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (, space, ==]
[Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (, space, ==, null, ), {]
[,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (, space, ==, null, ), {, space, =]
[space, ), {, if, (, space, ==, null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (]
[), {, if, (, space, ==, null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !]
[null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return]
[AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }, double, dimension, =]
[(, !, isVisible, (, ), ), {, return, space, ;, }, double, dimension, =, getFixedDimension, (, ), ;, if, (]
[(, !, isVisible, (, ), ), {, return, space, ;, }, double, dimension, =, getFixedDimension, (, ), ;, if, (]
[isVisible, (, ), ), {, return, space, ;, }, double, dimension, =, getFixedDimension, (, ), ;, if, (, dimension, >]
[), {, return, space, ;, }, double, dimension, =, getFixedDimension, (, ), ;, if, (, dimension, >, 0.0, ), {]
[), {, return, space, ;, }, double, dimension, =, getFixedDimension, (, ), ;, if, (, dimension, >, 0.0, ), {]
[;, }, double, dimension, =, getFixedDimension, (, ), ;, if, (, dimension, >, 0.0, ), {, space, ., ensureAtLeast, (]
[double, dimension, =, getFixedDimension, (, ), ;, if, (, dimension, >, 0.0, ), {, space, ., ensureAtLeast, (, dimension, ,]
[if, (, dimension, >, 0.0, ), {, space, ., ensureAtLeast, (, dimension, ,, edge, ), ;, }, double, tickLabelHeight, =]
[), {, space, ., ensureAtLeast, (, dimension, ,, edge, ), ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =]
[ensureAtLeast, (, dimension, ,, edge, ), ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (]
[), ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {]
[), ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {]
[tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setFont, (]
[;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, List, ticks, =]
[(, isTickLabelsVisible, (, ), ), {, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, List, ticks, =, refreshTicks, (]
[(, ), ), {, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, List, ticks, =, refreshTicks, (, g2, ,]
[., setFont, (, getTickLabelFont, (, ), ), ;, List, ticks, =, refreshTicks, (, g2, ,, new, AxisState, (, ), ,]
[(, getTickLabelFont, (, ), ), ;, List, ticks, =, refreshTicks, (, g2, ,, new, AxisState, (, ), ,, plotArea, ,]
[;, List, ticks, =, refreshTicks, (, g2, ,, new, AxisState, (, ), ,, plotArea, ,, edge, ), ;, if, (]
[;, List, ticks, =, refreshTicks, (, g2, ,, new, AxisState, (, ), ,, plotArea, ,, edge, ), ;, if, (]
[refreshTicks, (, g2, ,, new, AxisState, (, ), ,, plotArea, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[new, AxisState, (, ), ,, plotArea, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[(, ), ,, plotArea, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, tickLabelHeight, =]
[,, plotArea, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, tickLabelHeight, =, findMaximumTickLabelHeight, (]
[,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, tickLabelHeight, =, findMaximumTickLabelHeight, (, ticks, ,]
[), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, tickLabelHeight, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, tickLabelHeight, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,]
[{, tickLabelHeight, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, else, if, (]
[{, tickLabelHeight, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, else, if, (]
[(, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[,, isVerticalTickLabels, (, ), ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, tickLabelWidth, =]
[(, ), ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, tickLabelWidth, =, findMaximumTickLabelWidth, (]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, tickLabelWidth, =, findMaximumTickLabelWidth, (, ticks, ,]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, tickLabelWidth, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, tickLabelWidth, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,]
[tickLabelWidth, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, }, Rectangle2D, labelEnclosure, =]
[findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (]
[ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,]
[isVerticalTickLabels, (, ), ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =]
[}, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =]
[=, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (]
[=, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (]
[,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[=, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =]
[=, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;]
[RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (]
[RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (]
[isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +]
[edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, ,]
[., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, ,, edge, ), ;, }, else, if, (]
[., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, ,, edge, ), ;, }, else, if, (]
[;, space, ., add, (, labelHeight, +, tickLabelHeight, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[(, labelHeight, +, tickLabelHeight, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[+, tickLabelHeight, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =]
[+, tickLabelHeight, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;]
[RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (]
[RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (]
[isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +]
[edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, ,]
[=, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, ,, edge, ), ;, }, return]
[protected, double, findMaximumTickLabelHeight, (, List, ticks, ,, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, boolean, vertical, ), {, RectangleInsets, insets, =]
[Graphics2D, g2, ,, Rectangle2D, drawArea, ,, boolean, vertical, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Font, font, =]
[vertical, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Font, font, =, getTickLabelFont, (, ), ;, double, maxHeight, =]
[insets, =, getTickLabelInsets, (, ), ;, Font, font, =, getTickLabelFont, (, ), ;, double, maxHeight, =, 0.0, ;, if, (]
[Font, font, =, getTickLabelFont, (, ), ;, double, maxHeight, =, 0.0, ;, if, (, vertical, ), {, FontMetrics, fm, =]
[Font, font, =, getTickLabelFont, (, ), ;, double, maxHeight, =, 0.0, ;, if, (, vertical, ), {, FontMetrics, fm, =]
[(, ), ;, double, maxHeight, =, 0.0, ;, if, (, vertical, ), {, FontMetrics, fm, =, g2, ., getFontMetrics, (]
[0.0, ;, if, (, vertical, ), {, FontMetrics, fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =]
[0.0, ;, if, (, vertical, ), {, FontMetrics, fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =]
[fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (]
[fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (]
[iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Tick, tick, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Tick, tick, =, (, Tick, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Tick, tick, =, (, Tick, )]
[hasNext, (, ), ), {, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =]
[hasNext, (, ), ), {, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =]
[{, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (]
[{, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (]
[), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,]
[., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,]
[Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[(, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +]
[(, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +]
[,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +]
[,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +]
[if, (, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), >]
[., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), >, maxHeight, ), {]
[(, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), >, maxHeight, ), {, maxHeight, =]
[(, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), >, maxHeight, ), {, maxHeight, =]
[(, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), >, maxHeight, ), {, maxHeight, =]
[(, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), >, maxHeight, ), {, maxHeight, =]
[(, ), +, insets, ., getBottom, (, ), >, maxHeight, ), {, maxHeight, =, labelBounds, ., getWidth, (, ), +]
[(, ), +, insets, ., getBottom, (, ), >, maxHeight, ), {, maxHeight, =, labelBounds, ., getWidth, (, ), +]
[(, ), >, maxHeight, ), {, maxHeight, =, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +]
[(, ), >, maxHeight, ), {, maxHeight, =, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +]
[insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =]
[insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =]
[), +, insets, ., getBottom, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (]
[insets, ., getBottom, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,]
[insets, ., getBottom, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,]
[}, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;]
[else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxHeight, =]
[else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxHeight, =]
[else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxHeight, =]
[else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxHeight, =]
[., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxHeight, =, metrics, ., getHeight, (, ), +]
[., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxHeight, =, metrics, ., getHeight, (, ), +]
[., getFontRenderContext, (, ), ), ;, maxHeight, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +]
[., getFontRenderContext, (, ), ), ;, maxHeight, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +]
[metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, return]
[protected, double, findMaximumTickLabelWidth, (, List, ticks, ,, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, boolean, vertical, ), {, RectangleInsets, insets, =]
[Graphics2D, g2, ,, Rectangle2D, drawArea, ,, boolean, vertical, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Font, font, =]
[vertical, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Font, font, =, getTickLabelFont, (, ), ;, double, maxWidth, =]
[insets, =, getTickLabelInsets, (, ), ;, Font, font, =, getTickLabelFont, (, ), ;, double, maxWidth, =, 0.0, ;, if, (]
[=, getTickLabelInsets, (, ), ;, Font, font, =, getTickLabelFont, (, ), ;, double, maxWidth, =, 0.0, ;, if, (, !]
[font, =, getTickLabelFont, (, ), ;, double, maxWidth, =, 0.0, ;, if, (, !, vertical, ), {, FontMetrics, fm, =]
[font, =, getTickLabelFont, (, ), ;, double, maxWidth, =, 0.0, ;, if, (, !, vertical, ), {, FontMetrics, fm, =]
[), ;, double, maxWidth, =, 0.0, ;, if, (, !, vertical, ), {, FontMetrics, fm, =, g2, ., getFontMetrics, (]
[;, if, (, !, vertical, ), {, FontMetrics, fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =]
[;, if, (, !, vertical, ), {, FontMetrics, fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =]
[fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (]
[fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (]
[iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Tick, tick, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Tick, tick, =, (, Tick, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Tick, tick, =, (, Tick, )]
[hasNext, (, ), ), {, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =]
[hasNext, (, ), ), {, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =]
[{, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (]
[{, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (]
[), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,]
[., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,]
[Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[(, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +]
[(, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +]
[,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +]
[,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +]
[if, (, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), >]
[., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), >, maxWidth, ), {]
[(, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), >, maxWidth, ), {, maxWidth, =]
[(, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), >, maxWidth, ), {, maxWidth, =]
[(, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), >, maxWidth, ), {, maxWidth, =]
[(, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), >, maxWidth, ), {, maxWidth, =]
[(, ), +, insets, ., getRight, (, ), >, maxWidth, ), {, maxWidth, =, labelBounds, ., getWidth, (, ), +]
[(, ), +, insets, ., getRight, (, ), >, maxWidth, ), {, maxWidth, =, labelBounds, ., getWidth, (, ), +]
[(, ), >, maxWidth, ), {, maxWidth, =, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +]
[(, ), >, maxWidth, ), {, maxWidth, =, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +]
[insets, ., getLeft, (, ), +, insets, ., getRight, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =]
[insets, ., getLeft, (, ), +, insets, ., getRight, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =]
[), +, insets, ., getRight, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (]
[insets, ., getRight, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,]
[insets, ., getRight, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,]
[}, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;]
[else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxWidth, =]
[else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxWidth, =]
[else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxWidth, =]
[else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxWidth, =]
[., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxWidth, =, metrics, ., getHeight, (, ), +]
[., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxWidth, =, metrics, ., getHeight, (, ), +]
[., getFontRenderContext, (, ), ), ;, maxWidth, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +]
[., getFontRenderContext, (, ), ), ;, maxWidth, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +]
[metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, return]
[), +, insets, ., getBottom, (, ), ;, }, return, maxWidth, ;, }, public, boolean, isInverted, (, ), {, return]
[), +, insets, ., getBottom, (, ), ;, }, return, maxWidth, ;, }, public, boolean, isInverted, (, ), {, return]
[isInverted, (, ), {, return, this, ., inverted, ;, }, public, void, setInverted, (, boolean, flag, ), {, if, (]
[isInverted, (, ), {, return, this, ., inverted, ;, }, public, void, setInverted, (, boolean, flag, ), {, if, (]
[isInverted, (, ), {, return, this, ., inverted, ;, }, public, void, setInverted, (, boolean, flag, ), {, if, (]
[return, this, ., inverted, ;, }, public, void, setInverted, (, boolean, flag, ), {, if, (, this, ., inverted, !=]
[inverted, ;, }, public, void, setInverted, (, boolean, flag, ), {, if, (, this, ., inverted, !=, flag, ), {]
[inverted, ;, }, public, void, setInverted, (, boolean, flag, ), {, if, (, this, ., inverted, !=, flag, ), {]
[void, setInverted, (, boolean, flag, ), {, if, (, this, ., inverted, !=, flag, ), {, this, ., inverted, =]
[(, boolean, flag, ), {, if, (, this, ., inverted, !=, flag, ), {, this, ., inverted, =, flag, ;]
[flag, ), {, if, (, this, ., inverted, !=, flag, ), {, this, ., inverted, =, flag, ;, notifyListeners, (]
[if, (, this, ., inverted, !=, flag, ), {, this, ., inverted, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (]
[flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, boolean, isAutoRange, (, ), {, return]
[flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, boolean, isAutoRange, (, ), {, return]
[public, boolean, isAutoRange, (, ), {, return, this, ., autoRange, ;, }, public, void, setAutoRange, (, boolean, auto, ), {]
[isAutoRange, (, ), {, return, this, ., autoRange, ;, }, public, void, setAutoRange, (, boolean, auto, ), {, setAutoRange, (]
[), {, return, this, ., autoRange, ;, }, public, void, setAutoRange, (, boolean, auto, ), {, setAutoRange, (, auto, ,]
[(, auto, ,, true, ), ;, }, protected, void, setAutoRange, (, boolean, auto, ,, boolean, notify, ), {, if, (]
[(, auto, ,, true, ), ;, }, protected, void, setAutoRange, (, boolean, auto, ,, boolean, notify, ), {, if, (]
[(, auto, ,, true, ), ;, }, protected, void, setAutoRange, (, boolean, auto, ,, boolean, notify, ), {, if, (]
[), ;, }, protected, void, setAutoRange, (, boolean, auto, ,, boolean, notify, ), {, if, (, this, ., autoRange, !=]
[protected, void, setAutoRange, (, boolean, auto, ,, boolean, notify, ), {, if, (, this, ., autoRange, !=, auto, ), {]
[protected, void, setAutoRange, (, boolean, auto, ,, boolean, notify, ), {, if, (, this, ., autoRange, !=, auto, ), {]
[boolean, auto, ,, boolean, notify, ), {, if, (, this, ., autoRange, !=, auto, ), {, this, ., autoRange, =]
[notify, ), {, if, (, this, ., autoRange, !=, auto, ), {, this, ., autoRange, =, auto, ;, if, (]
[notify, ), {, if, (, this, ., autoRange, !=, auto, ), {, this, ., autoRange, =, auto, ;, if, (]
[this, ., autoRange, !=, auto, ), {, this, ., autoRange, =, auto, ;, if, (, this, ., autoRange, ), {]
[this, ., autoRange, =, auto, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (]
[=, auto, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {]
[;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {, notifyListeners, (]
[this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (]
[{, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public, double, getAutoRangeMinimumSize, (, ), {, return]
[{, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public, double, getAutoRangeMinimumSize, (, ), {, return]
[public, double, getAutoRangeMinimumSize, (, ), {, return, this, ., autoRangeMinimumSize, ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ), {]
[getAutoRangeMinimumSize, (, ), {, return, this, ., autoRangeMinimumSize, ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ), {, setAutoRangeMinimumSize, (]
[), {, return, this, ., autoRangeMinimumSize, ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ), {, setAutoRangeMinimumSize, (, size, ,]
[(, size, ,, true, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (]
[(, size, ,, true, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (]
[,, true, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, <=]
[}, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, <=, 0.0, ), {, throw]
[setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, <=, 0.0, ), {, throw, new, IllegalArgumentException, (]
[notify, ), {, if, (, size, <=, 0.0, ), {, throw, new, IllegalArgumentException, (, "NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", ), ;, }, if, (]
[notify, ), {, if, (, size, <=, 0.0, ), {, throw, new, IllegalArgumentException, (, "NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", ), ;, }, if, (]
[notify, ), {, if, (, size, <=, 0.0, ), {, throw, new, IllegalArgumentException, (, "NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", ), ;, }, if, (]
[(, size, <=, 0.0, ), {, throw, new, IllegalArgumentException, (, "NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", ), ;, }, if, (, this, ., autoRangeMinimumSize, !=]
[0.0, ), {, throw, new, IllegalArgumentException, (, "NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", ), ;, }, if, (, this, ., autoRangeMinimumSize, !=, size, ), {]
[0.0, ), {, throw, new, IllegalArgumentException, (, "NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", ), ;, }, if, (, this, ., autoRangeMinimumSize, !=, size, ), {]
[new, IllegalArgumentException, (, "NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", ), ;, }, if, (, this, ., autoRangeMinimumSize, !=, size, ), {, this, ., autoRangeMinimumSize, =]
[), ;, }, if, (, this, ., autoRangeMinimumSize, !=, size, ), {, this, ., autoRangeMinimumSize, =, size, ;, if, (]
[), ;, }, if, (, this, ., autoRangeMinimumSize, !=, size, ), {, this, ., autoRangeMinimumSize, =, size, ;, if, (]
[this, ., autoRangeMinimumSize, !=, size, ), {, this, ., autoRangeMinimumSize, =, size, ;, if, (, this, ., autoRange, ), {]
[this, ., autoRangeMinimumSize, =, size, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (]
[=, size, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {]
[;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {, notifyListeners, (]
[this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (]
[{, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public, Range, getDefaultAutoRange, (, ), {, return]
[{, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public, Range, getDefaultAutoRange, (, ), {, return]
[getDefaultAutoRange, (, ), {, return, this, ., defaultAutoRange, ;, }, public, void, setDefaultAutoRange, (, Range, range, ), {, if, (]
[getDefaultAutoRange, (, ), {, return, this, ., defaultAutoRange, ;, }, public, void, setDefaultAutoRange, (, Range, range, ), {, if, (]
[), {, return, this, ., defaultAutoRange, ;, }, public, void, setDefaultAutoRange, (, Range, range, ), {, if, (, range, ==]
[., defaultAutoRange, ;, }, public, void, setDefaultAutoRange, (, Range, range, ), {, if, (, range, ==, null, ), {, throw]
[}, public, void, setDefaultAutoRange, (, Range, range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Range, range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }]
[(, Range, range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }]
[{, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, this, ., defaultAutoRange, =]
[(, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, this, ., defaultAutoRange, =, range, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, this, ., defaultAutoRange, =, range, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, this, ., defaultAutoRange, =, range, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, range, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getLowerMargin, (, ), {, return]
[=, range, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getLowerMargin, (, ), {, return]
[public, double, getLowerMargin, (, ), {, return, this, ., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin, ), {]
[public, double, getLowerMargin, (, ), {, return, this, ., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin, ), {]
[), {, return, this, ., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin, ), {, this, ., lowerMargin, =]
[., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin, ), {, this, ., lowerMargin, =, margin, ;, if, (]
[void, setLowerMargin, (, double, margin, ), {, this, ., lowerMargin, =, margin, ;, if, (, isAutoRange, (, ), ), {]
[), {, this, ., lowerMargin, =, margin, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }]
[this, ., lowerMargin, =, margin, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (]
[=, margin, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (]
[), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getUpperMargin, (, ), {, return]
[), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getUpperMargin, (, ), {, return]
[public, double, getUpperMargin, (, ), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin, ), {]
[public, double, getUpperMargin, (, ), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin, ), {]
[), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin, ), {, this, ., upperMargin, =]
[., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin, ), {, this, ., upperMargin, =, margin, ;, if, (]
[void, setUpperMargin, (, double, margin, ), {, this, ., upperMargin, =, margin, ;, if, (, isAutoRange, (, ), ), {]
[), {, this, ., upperMargin, =, margin, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }]
[this, ., upperMargin, =, margin, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (]
[=, margin, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (]
[), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getFixedAutoRange, (, ), {, return]
[), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getFixedAutoRange, (, ), {, return]
[public, double, getFixedAutoRange, (, ), {, return, this, ., fixedAutoRange, ;, }, public, void, setFixedAutoRange, (, double, length, ), {]
[public, double, getFixedAutoRange, (, ), {, return, this, ., fixedAutoRange, ;, }, public, void, setFixedAutoRange, (, double, length, ), {]
[), {, return, this, ., fixedAutoRange, ;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., fixedAutoRange, =]
[., fixedAutoRange, ;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., fixedAutoRange, =, length, ;, if, (]
[void, setFixedAutoRange, (, double, length, ), {, this, ., fixedAutoRange, =, length, ;, if, (, isAutoRange, (, ), ), {]
[), {, this, ., fixedAutoRange, =, length, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }]
[this, ., fixedAutoRange, =, length, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (]
[=, length, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (]
[), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getLowerBound, (, ), {, return]
[), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getLowerBound, (, ), {, return]
[), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getLowerBound, (, ), {, return]
[return, this, ., range, ., getLowerBound, (, ), ;, }, public, void, setLowerBound, (, double, min, ), {, if, (]
[return, this, ., range, ., getLowerBound, (, ), ;, }, public, void, setLowerBound, (, double, min, ), {, if, (]
[return, this, ., range, ., getLowerBound, (, ), ;, }, public, void, setLowerBound, (, double, min, ), {, if, (]
[return, this, ., range, ., getLowerBound, (, ), ;, }, public, void, setLowerBound, (, double, min, ), {, if, (]
[;, }, public, void, setLowerBound, (, double, min, ), {, if, (, this, ., range, ., getUpperBound, (, ), >]
[void, setLowerBound, (, double, min, ), {, if, (, this, ., range, ., getUpperBound, (, ), >, min, ), {]
[(, double, min, ), {, if, (, this, ., range, ., getUpperBound, (, ), >, min, ), {, setRange, (]
[), {, if, (, this, ., range, ., getUpperBound, (, ), >, min, ), {, setRange, (, new, Range, (]
[if, (, this, ., range, ., getUpperBound, (, ), >, min, ), {, setRange, (, new, Range, (, min, ,]
[if, (, this, ., range, ., getUpperBound, (, ), >, min, ), {, setRange, (, new, Range, (, min, ,]
[if, (, this, ., range, ., getUpperBound, (, ), >, min, ), {, setRange, (, new, Range, (, min, ,]
[setRange, (, new, Range, (, min, ,, this, ., range, ., getUpperBound, (, ), ), ), ;, }, else, {]
[new, Range, (, min, ,, this, ., range, ., getUpperBound, (, ), ), ), ;, }, else, {, setRange, (]
[min, ,, this, ., range, ., getUpperBound, (, ), ), ), ;, }, else, {, setRange, (, new, Range, (]
[this, ., range, ., getUpperBound, (, ), ), ), ;, }, else, {, setRange, (, new, Range, (, min, ,]
[this, ., range, ., getUpperBound, (, ), ), ), ;, }, else, {, setRange, (, new, Range, (, min, ,]
[range, ., getUpperBound, (, ), ), ), ;, }, else, {, setRange, (, new, Range, (, min, ,, min, +]
[new, Range, (, min, ,, min, +, 1.0, ), ), ;, }, }, public, double, getUpperBound, (, ), {, return]
[new, Range, (, min, ,, min, +, 1.0, ), ), ;, }, }, public, double, getUpperBound, (, ), {, return]
[new, Range, (, min, ,, min, +, 1.0, ), ), ;, }, }, public, double, getUpperBound, (, ), {, return]
[return, this, ., range, ., getUpperBound, (, ), ;, }, public, void, setUpperBound, (, double, max, ), {, if, (]
[return, this, ., range, ., getUpperBound, (, ), ;, }, public, void, setUpperBound, (, double, max, ), {, if, (]
[return, this, ., range, ., getUpperBound, (, ), ;, }, public, void, setUpperBound, (, double, max, ), {, if, (]
[return, this, ., range, ., getUpperBound, (, ), ;, }, public, void, setUpperBound, (, double, max, ), {, if, (]
[;, }, public, void, setUpperBound, (, double, max, ), {, if, (, this, ., range, ., getLowerBound, (, ), <]
[void, setUpperBound, (, double, max, ), {, if, (, this, ., range, ., getLowerBound, (, ), <, max, ), {]
[(, double, max, ), {, if, (, this, ., range, ., getLowerBound, (, ), <, max, ), {, setRange, (]
[), {, if, (, this, ., range, ., getLowerBound, (, ), <, max, ), {, setRange, (, new, Range, (]
[), {, if, (, this, ., range, ., getLowerBound, (, ), <, max, ), {, setRange, (, new, Range, (]
[), {, if, (, this, ., range, ., getLowerBound, (, ), <, max, ), {, setRange, (, new, Range, (]
[getLowerBound, (, ), <, max, ), {, setRange, (, new, Range, (, this, ., range, ., getLowerBound, (, ), ,]
[setRange, (, new, Range, (, this, ., range, ., getLowerBound, (, ), ,, max, ), ), ;, }, else, {]
[new, Range, (, this, ., range, ., getLowerBound, (, ), ,, max, ), ), ;, }, else, {, setRange, (]
[new, Range, (, this, ., range, ., getLowerBound, (, ), ,, max, ), ), ;, }, else, {, setRange, (]
[(, this, ., range, ., getLowerBound, (, ), ,, max, ), ), ;, }, else, {, setRange, (, max, -]
[., range, ., getLowerBound, (, ), ,, max, ), ), ;, }, else, {, setRange, (, max, -, 1.0, ,]
[else, {, setRange, (, max, -, 1.0, ,, max, ), ;, }, }, public, Range, getRange, (, ), {, return]
[else, {, setRange, (, max, -, 1.0, ,, max, ), ;, }, }, public, Range, getRange, (, ), {, return]
[public, Range, getRange, (, ), {, return, this, ., range, ;, }, public, void, setRange, (, Range, range, ), {]
[getRange, (, ), {, return, this, ., range, ;, }, public, void, setRange, (, Range, range, ), {, setRange, (]
[), {, return, this, ., range, ;, }, public, void, setRange, (, Range, range, ), {, setRange, (, range, ,]
[return, this, ., range, ;, }, public, void, setRange, (, Range, range, ), {, setRange, (, range, ,, true, ,]
[true, ), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (]
[true, ), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (]
[;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (, range, ==]
[setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (, range, ==, null, ), {, throw]
[range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (]
[notify, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (]
[if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, turnOffAutoRange, ), {]
[if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, turnOffAutoRange, ), {]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, turnOffAutoRange, ), {, this, ., autoRange, =]
[throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, turnOffAutoRange, ), {, this, ., autoRange, =, false, ;, }]
[throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, turnOffAutoRange, ), {, this, ., autoRange, =, false, ;, }]
["Null 'range' argument.", ), ;, }, if, (, turnOffAutoRange, ), {, this, ., autoRange, =, false, ;, }, this, ., range, =]
[if, (, turnOffAutoRange, ), {, this, ., autoRange, =, false, ;, }, this, ., range, =, range, ;, if, (]
[), {, this, ., autoRange, =, false, ;, }, this, ., range, =, range, ;, if, (, notify, ), {]
[this, ., autoRange, =, false, ;, }, this, ., range, =, range, ;, if, (, notify, ), {, notifyListeners, (]
[=, false, ;, }, this, ., range, =, range, ;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (]
[new, AxisChangeEvent, (, this, ), ), ;, }, }, public, void, setRange, (, double, lower, ,, double, upper, ), {]
[(, this, ), ), ;, }, }, public, void, setRange, (, double, lower, ,, double, upper, ), {, setRange, (]
[), ;, }, }, public, void, setRange, (, double, lower, ,, double, upper, ), {, setRange, (, new, Range, (]
[}, }, public, void, setRange, (, double, lower, ,, double, upper, ), {, setRange, (, new, Range, (, lower, ,]
[setRange, (, new, Range, (, lower, ,, upper, ), ), ;, }, public, void, setRangeWithMargins, (, Range, range, ), {]
[new, Range, (, lower, ,, upper, ), ), ;, }, public, void, setRangeWithMargins, (, Range, range, ), {, setRangeWithMargins, (]
[(, lower, ,, upper, ), ), ;, }, public, void, setRangeWithMargins, (, Range, range, ), {, setRangeWithMargins, (, range, ,]
[,, upper, ), ), ;, }, public, void, setRangeWithMargins, (, Range, range, ), {, setRangeWithMargins, (, range, ,, true, ,]
[true, ), ;, }, public, void, setRangeWithMargins, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (]
[true, ), ;, }, public, void, setRangeWithMargins, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (]
[;, }, public, void, setRangeWithMargins, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (, range, ==]
[setRangeWithMargins, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (, range, ==, null, ), {, throw]
[range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (]
[,, boolean, notify, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }]
[notify, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, setRange, (]
[notify, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, setRange, (]
[(, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, setRange, (, Range, ., expand, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, setRange, (, Range, ., expand, (, range, ,]
[throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, setRange, (, Range, ., expand, (, range, ,, getLowerMargin, (, ), ,]
[), ;, }, setRange, (, Range, ., expand, (, range, ,, getLowerMargin, (, ), ,, getUpperMargin, (, ), ), ,]
[}, setRange, (, Range, ., expand, (, range, ,, getLowerMargin, (, ), ,, getUpperMargin, (, ), ), ,, turnOffAutoRange, ,]
[), ), ,, turnOffAutoRange, ,, notify, ), ;, }, public, void, setRangeWithMargins, (, double, lower, ,, double, upper, ), {]
[,, turnOffAutoRange, ,, notify, ), ;, }, public, void, setRangeWithMargins, (, double, lower, ,, double, upper, ), {, setRangeWithMargins, (]
[notify, ), ;, }, public, void, setRangeWithMargins, (, double, lower, ,, double, upper, ), {, setRangeWithMargins, (, new, Range, (]
[;, }, public, void, setRangeWithMargins, (, double, lower, ,, double, upper, ), {, setRangeWithMargins, (, new, Range, (, lower, ,]
[Range, (, lower, ,, upper, ), ), ;, }, public, void, setRangeAboutValue, (, double, value, ,, double, length, ), {]
[lower, ,, upper, ), ), ;, }, public, void, setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (]
[), ), ;, }, public, void, setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (, new, Range, (]
[), ), ;, }, public, void, setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (, new, Range, (]
[;, }, public, void, setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (, new, Range, (, value, -]
[;, }, public, void, setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (, new, Range, (, value, -]
[public, void, setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (, new, Range, (, value, -, length, /]
[setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (, new, Range, (, value, -, length, /, 2, ,]
[setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (, new, Range, (, value, -, length, /, 2, ,]
[double, value, ,, double, length, ), {, setRange, (, new, Range, (, value, -, length, /, 2, ,, value, +]
[double, value, ,, double, length, ), {, setRange, (, new, Range, (, value, -, length, /, 2, ,, value, +]
[,, double, length, ), {, setRange, (, new, Range, (, value, -, length, /, 2, ,, value, +, length, /]
[length, /, 2, ,, value, +, length, /, 2, ), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return]
[length, /, 2, ,, value, +, length, /, 2, ), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return]
[public, boolean, isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection, ;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ), {]
[isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection, ;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ), {, setAutoTickUnitSelection, (]
[), {, return, this, ., autoTickUnitSelection, ;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ), {, setAutoTickUnitSelection, (, flag, ,]
[(, flag, ,, true, ), ;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ,, boolean, notify, ), {, if, (]
[(, flag, ,, true, ), ;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ,, boolean, notify, ), {, if, (]
[(, flag, ,, true, ), ;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ,, boolean, notify, ), {, if, (]
[), ;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ,, boolean, notify, ), {, if, (, this, ., autoTickUnitSelection, !=]
[public, void, setAutoTickUnitSelection, (, boolean, flag, ,, boolean, notify, ), {, if, (, this, ., autoTickUnitSelection, !=, flag, ), {]
[public, void, setAutoTickUnitSelection, (, boolean, flag, ,, boolean, notify, ), {, if, (, this, ., autoTickUnitSelection, !=, flag, ), {]
[boolean, flag, ,, boolean, notify, ), {, if, (, this, ., autoTickUnitSelection, !=, flag, ), {, this, ., autoTickUnitSelection, =]
[notify, ), {, if, (, this, ., autoTickUnitSelection, !=, flag, ), {, this, ., autoTickUnitSelection, =, flag, ;, if, (]
[if, (, this, ., autoTickUnitSelection, !=, flag, ), {, this, ., autoTickUnitSelection, =, flag, ;, if, (, notify, ), {]
[this, ., autoTickUnitSelection, !=, flag, ), {, this, ., autoTickUnitSelection, =, flag, ;, if, (, notify, ), {, notifyListeners, (]
[!=, flag, ), {, this, ., autoTickUnitSelection, =, flag, ;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (]
[{, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public, TickUnitSource, getStandardTickUnits, (, ), {, return]
[{, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public, TickUnitSource, getStandardTickUnits, (, ), {, return]
[public, TickUnitSource, getStandardTickUnits, (, ), {, return, this, ., standardTickUnits, ;, }, public, void, setStandardTickUnits, (, TickUnitSource, source, ), {]
[public, TickUnitSource, getStandardTickUnits, (, ), {, return, this, ., standardTickUnits, ;, }, public, void, setStandardTickUnits, (, TickUnitSource, source, ), {]
[), {, return, this, ., standardTickUnits, ;, }, public, void, setStandardTickUnits, (, TickUnitSource, source, ), {, this, ., standardTickUnits, =]
[return, this, ., standardTickUnits, ;, }, public, void, setStandardTickUnits, (, TickUnitSource, source, ), {, this, ., standardTickUnits, =, source, ;]
[., standardTickUnits, ;, }, public, void, setStandardTickUnits, (, TickUnitSource, source, ), {, this, ., standardTickUnits, =, source, ;, notifyListeners, (]
[}, public, void, setStandardTickUnits, (, TickUnitSource, source, ), {, this, ., standardTickUnits, =, source, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, source, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getMinorTickCount, (, ), {, return]
[=, source, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getMinorTickCount, (, ), {, return]
[public, int, getMinorTickCount, (, ), {, return, this, ., minorTickCount, ;, }, public, void, setMinorTickCount, (, int, count, ), {]
[public, int, getMinorTickCount, (, ), {, return, this, ., minorTickCount, ;, }, public, void, setMinorTickCount, (, int, count, ), {]
[), {, return, this, ., minorTickCount, ;, }, public, void, setMinorTickCount, (, int, count, ), {, this, ., minorTickCount, =]
[return, this, ., minorTickCount, ;, }, public, void, setMinorTickCount, (, int, count, ), {, this, ., minorTickCount, =, count, ;]
[., minorTickCount, ;, }, public, void, setMinorTickCount, (, int, count, ), {, this, ., minorTickCount, =, count, ;, notifyListeners, (]
[}, public, void, setMinorTickCount, (, int, count, ), {, this, ., minorTickCount, =, count, ;, notifyListeners, (, new, AxisChangeEvent, (]
[edge, ), ;, public, double, lengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, zero, =]
[;, public, double, lengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, zero, =, valueToJava2D, (]
[double, lengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, zero, =, valueToJava2D, (, 0.0, ,]
[(, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, zero, =, valueToJava2D, (, 0.0, ,, area, ,]
[,, RectangleEdge, edge, ), {, double, zero, =, valueToJava2D, (, 0.0, ,, area, ,, edge, ), ;, double, l, =]
[edge, ), {, double, zero, =, valueToJava2D, (, 0.0, ,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (]
[{, double, zero, =, valueToJava2D, (, 0.0, ,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, length, ,]
[zero, =, valueToJava2D, (, 0.0, ,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, length, ,, area, ,]
[0.0, ,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, length, ,, area, ,, edge, ), ;, return]
[0.0, ,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, length, ,, area, ,, edge, ), ;, return]
[edge, ), ;, double, l, =, valueToJava2D, (, length, ,, area, ,, edge, ), ;, return, Math, ., abs, (]
[edge, ), ;, double, l, =, valueToJava2D, (, length, ,, area, ,, edge, ), ;, return, Math, ., abs, (]
[;, double, l, =, valueToJava2D, (, length, ,, area, ,, edge, ), ;, return, Math, ., abs, (, l, -]
[), ;, protected, abstract, void, autoAdjustRange, (, ), ;, public, void, centerRange, (, double, value, ), {, double, central, =]
[), ;, protected, abstract, void, autoAdjustRange, (, ), ;, public, void, centerRange, (, double, value, ), {, double, central, =]
[), ;, protected, abstract, void, autoAdjustRange, (, ), ;, public, void, centerRange, (, double, value, ), {, double, central, =]
[centerRange, (, double, value, ), {, double, central, =, this, ., range, ., getCentralValue, (, ), ;, Range, adjusted, =]
[value, ), {, double, central, =, this, ., range, ., getCentralValue, (, ), ;, Range, adjusted, =, new, Range, (]
[value, ), {, double, central, =, this, ., range, ., getCentralValue, (, ), ;, Range, adjusted, =, new, Range, (]
[value, ), {, double, central, =, this, ., range, ., getCentralValue, (, ), ;, Range, adjusted, =, new, Range, (]
[value, ), {, double, central, =, this, ., range, ., getCentralValue, (, ), ;, Range, adjusted, =, new, Range, (]
[value, ), {, double, central, =, this, ., range, ., getCentralValue, (, ), ;, Range, adjusted, =, new, Range, (]
[range, ., getCentralValue, (, ), ;, Range, adjusted, =, new, Range, (, this, ., range, ., getLowerBound, (, ), +]
[getCentralValue, (, ), ;, Range, adjusted, =, new, Range, (, this, ., range, ., getLowerBound, (, ), +, value, -]
[), ;, Range, adjusted, =, new, Range, (, this, ., range, ., getLowerBound, (, ), +, value, -, central, ,]
[), ;, Range, adjusted, =, new, Range, (, this, ., range, ., getLowerBound, (, ), +, value, -, central, ,]
[), ;, Range, adjusted, =, new, Range, (, this, ., range, ., getLowerBound, (, ), +, value, -, central, ,]
[), ;, Range, adjusted, =, new, Range, (, this, ., range, ., getLowerBound, (, ), +, value, -, central, ,]
[), ;, Range, adjusted, =, new, Range, (, this, ., range, ., getLowerBound, (, ), +, value, -, central, ,]
[this, ., range, ., getLowerBound, (, ), +, value, -, central, ,, this, ., range, ., getUpperBound, (, ), +]
[range, ., getLowerBound, (, ), +, value, -, central, ,, this, ., range, ., getUpperBound, (, ), +, value, -]
[(, ), +, value, -, central, ,, this, ., range, ., getUpperBound, (, ), +, value, -, central, ), ;]
[+, value, -, central, ,, this, ., range, ., getUpperBound, (, ), +, value, -, central, ), ;, setRange, (]
[+, value, -, central, ), ;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (, double, percent, ), {]
[-, central, ), ;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (]
[), ;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,]
[), ;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,]
[), ;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,]
[., getCentralValue, (, ), ), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (]
[., getCentralValue, (, ), ), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (]
[(, ), ), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >]
[void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, halfLength, =]
[void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, halfLength, =]
[void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, halfLength, =]
[void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, halfLength, =]
[void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, halfLength, =]
[), {, if, (, percent, >, 0.0, ), {, double, halfLength, =, this, ., range, ., getLength, (, ), *]
[if, (, percent, >, 0.0, ), {, double, halfLength, =, this, ., range, ., getLength, (, ), *, percent, /]
[), {, double, halfLength, =, this, ., range, ., getLength, (, ), *, percent, /, 2, ;, Range, adjusted, =]
[halfLength, =, this, ., range, ., getLength, (, ), *, percent, /, 2, ;, Range, adjusted, =, new, Range, (]
[halfLength, =, this, ., range, ., getLength, (, ), *, percent, /, 2, ;, Range, adjusted, =, new, Range, (]
[this, ., range, ., getLength, (, ), *, percent, /, 2, ;, Range, adjusted, =, new, Range, (, anchorValue, -]
[range, ., getLength, (, ), *, percent, /, 2, ;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength, ,]
[range, ., getLength, (, ), *, percent, /, 2, ;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength, ,]
[getLength, (, ), *, percent, /, 2, ;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength, ,, anchorValue, +]
[*, percent, /, 2, ;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;]
[/, 2, ;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, setRange, (]
[new, Range, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, setRange, (, adjusted, ), ;, }, else, {]
[(, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (]
[setAutoRange, (, true, ), ;, }, }, public, void, resizeRange2, (, double, percent, ,, double, anchorValue, ), {, if, (]
[setAutoRange, (, true, ), ;, }, }, public, void, resizeRange2, (, double, percent, ,, double, anchorValue, ), {, if, (]
[true, ), ;, }, }, public, void, resizeRange2, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >]
[void, resizeRange2, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, left, =]
[void, resizeRange2, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, left, =]
[(, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, left, =, anchorValue, -]
[{, if, (, percent, >, 0.0, ), {, double, left, =, anchorValue, -, getLowerBound, (, ), ;, double, right, =]
[{, if, (, percent, >, 0.0, ), {, double, left, =, anchorValue, -, getLowerBound, (, ), ;, double, right, =]
[>, 0.0, ), {, double, left, =, anchorValue, -, getLowerBound, (, ), ;, double, right, =, getUpperBound, (, ), -]
[left, =, anchorValue, -, getLowerBound, (, ), ;, double, right, =, getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =]
[-, getLowerBound, (, ), ;, double, right, =, getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (]
[-, getLowerBound, (, ), ;, double, right, =, getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (]
[(, ), ;, double, right, =, getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (, anchorValue, -]
[(, ), ;, double, right, =, getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (, anchorValue, -]
[;, double, right, =, getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *]
[right, =, getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *, percent, ,]
[right, =, getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *, percent, ,]
[getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *, percent, ,, anchorValue, +]
[getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *, percent, ,, anchorValue, +]
[), -, anchorValue, ;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *, percent, ,, anchorValue, +, right, *]
[;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *, percent, ,, anchorValue, +, right, *, percent, ), ;]
[adjusted, =, new, Range, (, anchorValue, -, left, *, percent, ,, anchorValue, +, right, *, percent, ), ;, setRange, (]
[-, left, *, percent, ,, anchorValue, +, right, *, percent, ), ;, setRange, (, adjusted, ), ;, }, else, {]
[*, percent, ,, anchorValue, +, right, *, percent, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (]
[(, true, ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, start, =]
[(, true, ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, start, =]
[(, true, ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, start, =]
[lowerPercent, ,, double, upperPercent, ), {, double, start, =, this, ., range, ., getLowerBound, (, ), ;, double, length, =]
[lowerPercent, ,, double, upperPercent, ), {, double, start, =, this, ., range, ., getLowerBound, (, ), ;, double, length, =]
[lowerPercent, ,, double, upperPercent, ), {, double, start, =, this, ., range, ., getLowerBound, (, ), ;, double, length, =]
[range, ., getLowerBound, (, ), ;, double, length, =, this, ., range, ., getLength, (, ), ;, Range, adjusted, =]
[), ;, double, length, =, this, ., range, ., getLength, (, ), ;, Range, adjusted, =, null, ;, if, (]
[this, ., range, ., getLength, (, ), ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {]
[range, ., getLength, (, ), ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, adjusted, =]
[(, ), ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (]
[(, ), ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (]
[;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, start, +]
[Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, start, +, (]
[Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, start, +, (]
[=, null, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, start, +, (, length, *]
[null, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, start, +, (, length, *, (]
[null, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, start, +, (, length, *, (]
[if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, start, +, (, length, *, (, 1, -]
[), ), {, adjusted, =, new, Range, (, start, +, (, length, *, (, 1, -, upperPercent, ), ), ,]
[), ), {, adjusted, =, new, Range, (, start, +, (, length, *, (, 1, -, upperPercent, ), ), ,]
[{, adjusted, =, new, Range, (, start, +, (, length, *, (, 1, -, upperPercent, ), ), ,, start, +]
[adjusted, =, new, Range, (, start, +, (, length, *, (, 1, -, upperPercent, ), ), ,, start, +, (]
[adjusted, =, new, Range, (, start, +, (, length, *, (, 1, -, upperPercent, ), ), ,, start, +, (]
[new, Range, (, start, +, (, length, *, (, 1, -, upperPercent, ), ), ,, start, +, (, length, *]
[Range, (, start, +, (, length, *, (, 1, -, upperPercent, ), ), ,, start, +, (, length, *, (]
[Range, (, start, +, (, length, *, (, 1, -, upperPercent, ), ), ,, start, +, (, length, *, (]
[start, +, (, length, *, (, 1, -, upperPercent, ), ), ,, start, +, (, length, *, (, 1, -]
[upperPercent, ), ), ,, start, +, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {]
[), ,, start, +, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =]
[+, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new, Range, (]
[+, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new, Range, (]
[length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new, Range, (, start, +]
[length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new, Range, (, start, +]
[(, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *]
[-, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,]
[-, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,]
[), ), ), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,, start, +]
[), ), ), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,, start, +]
[), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,, start, +, length, *]
[{, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,, start, +, length, *, upperPercent, ), ;, }]
[=, new, Range, (, start, +, length, *, lowerPercent, ,, start, +, length, *, upperPercent, ), ;, }, setRange, (]
[), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent, ), {, Range, range, =]
[;, }, public, void, pan, (, double, percent, ), {, Range, range, =, getRange, (, ), ;, double, length, =]
[;, }, public, void, pan, (, double, percent, ), {, Range, range, =, getRange, (, ), ;, double, length, =]
[{, Range, range, =, getRange, (, ), ;, double, length, =, range, ., getLength, (, ), ;, double, adj, =]
[{, Range, range, =, getRange, (, ), ;, double, length, =, range, ., getLength, (, ), ;, double, adj, =]
[range, =, getRange, (, ), ;, double, length, =, range, ., getLength, (, ), ;, double, adj, =, length, *]
[;, double, length, =, range, ., getLength, (, ), ;, double, adj, =, length, *, percent, ;, double, lower, =]
[;, double, length, =, range, ., getLength, (, ), ;, double, adj, =, length, *, percent, ;, double, lower, =]
[;, double, length, =, range, ., getLength, (, ), ;, double, adj, =, length, *, percent, ;, double, lower, =]
[getLength, (, ), ;, double, adj, =, length, *, percent, ;, double, lower, =, range, ., getLowerBound, (, ), +]
[adj, =, length, *, percent, ;, double, lower, =, range, ., getLowerBound, (, ), +, adj, ;, double, upper, =]
[adj, =, length, *, percent, ;, double, lower, =, range, ., getLowerBound, (, ), +, adj, ;, double, upper, =]
[adj, =, length, *, percent, ;, double, lower, =, range, ., getLowerBound, (, ), +, adj, ;, double, upper, =]
[double, lower, =, range, ., getLowerBound, (, ), +, adj, ;, double, upper, =, range, ., getUpperBound, (, ), +]
[=, range, ., getLowerBound, (, ), +, adj, ;, double, upper, =, range, ., getUpperBound, (, ), +, adj, ;]
[., getLowerBound, (, ), +, adj, ;, double, upper, =, range, ., getUpperBound, (, ), +, adj, ;, setRange, (]
[(, ), +, adj, ;, double, upper, =, range, ., getUpperBound, (, ), +, adj, ;, setRange, (, lower, ,]
[(, ), +, adj, ;, setRange, (, lower, ,, upper, ), ;, }, protected, int, getAutoTickIndex, (, ), {, return]
[(, ), +, adj, ;, setRange, (, lower, ,, upper, ), ;, }, protected, int, getAutoTickIndex, (, ), {, return]
[protected, int, getAutoTickIndex, (, ), {, return, this, ., autoTickIndex, ;, }, protected, void, setAutoTickIndex, (, int, index, ), {]
[protected, int, getAutoTickIndex, (, ), {, return, this, ., autoTickIndex, ;, }, protected, void, setAutoTickIndex, (, int, index, ), {]
[), {, return, this, ., autoTickIndex, ;, }, protected, void, setAutoTickIndex, (, int, index, ), {, this, ., autoTickIndex, =]
[index, ), {, this, ., autoTickIndex, =, index, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[index, ), {, this, ., autoTickIndex, =, index, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[{, this, ., autoTickIndex, =, index, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[=, index, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, ValueAxis, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, ValueAxis, ), ), {, return, false, ;, }, ValueAxis, that, =]
[if, (, !, (, obj, instanceof, ValueAxis, ), ), {, return, false, ;, }, ValueAxis, that, =, (, ValueAxis, )]
[obj, instanceof, ValueAxis, ), ), {, return, false, ;, }, ValueAxis, that, =, (, ValueAxis, ), obj, ;, if, (]
[obj, instanceof, ValueAxis, ), ), {, return, false, ;, }, ValueAxis, that, =, (, ValueAxis, ), obj, ;, if, (]
[obj, instanceof, ValueAxis, ), ), {, return, false, ;, }, ValueAxis, that, =, (, ValueAxis, ), obj, ;, if, (]
[), {, return, false, ;, }, ValueAxis, that, =, (, ValueAxis, ), obj, ;, if, (, this, ., positiveArrowVisible, !=]
[), {, return, false, ;, }, ValueAxis, that, =, (, ValueAxis, ), obj, ;, if, (, this, ., positiveArrowVisible, !=]
[ValueAxis, that, =, (, ValueAxis, ), obj, ;, if, (, this, ., positiveArrowVisible, !=, that, ., positiveArrowVisible, ), {, return]
[), obj, ;, if, (, this, ., positiveArrowVisible, !=, that, ., positiveArrowVisible, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., positiveArrowVisible, !=, that, ., positiveArrowVisible, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., positiveArrowVisible, !=, that, ., positiveArrowVisible, ), {, return, false, ;, }, if, (]
[(, this, ., positiveArrowVisible, !=, that, ., positiveArrowVisible, ), {, return, false, ;, }, if, (, this, ., negativeArrowVisible, !=]
[(, this, ., positiveArrowVisible, !=, that, ., positiveArrowVisible, ), {, return, false, ;, }, if, (, this, ., negativeArrowVisible, !=]
[., positiveArrowVisible, ), {, return, false, ;, }, if, (, this, ., negativeArrowVisible, !=, that, ., negativeArrowVisible, ), {, return]
[false, ;, }, if, (, this, ., negativeArrowVisible, !=, that, ., negativeArrowVisible, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., negativeArrowVisible, !=, that, ., negativeArrowVisible, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., negativeArrowVisible, !=, that, ., negativeArrowVisible, ), {, return, false, ;, }, if, (]
[(, this, ., negativeArrowVisible, !=, that, ., negativeArrowVisible, ), {, return, false, ;, }, if, (, this, ., inverted, !=]
[(, this, ., negativeArrowVisible, !=, that, ., negativeArrowVisible, ), {, return, false, ;, }, if, (, this, ., inverted, !=]
[., negativeArrowVisible, ), {, return, false, ;, }, if, (, this, ., inverted, !=, that, ., inverted, ), {, return]
[false, ;, }, if, (, this, ., inverted, !=, that, ., inverted, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., inverted, !=, that, ., inverted, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., inverted, !=, that, ., inverted, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., inverted, !=, that, ., inverted, ), {, return, false, ;, }, if, (, !]
[this, ., inverted, !=, that, ., inverted, ), {, return, false, ;, }, if, (, !, this, ., autoRange, &&]
[., inverted, !=, that, ., inverted, ), {, return, false, ;, }, if, (, !, this, ., autoRange, &&, !]
[., inverted, !=, that, ., inverted, ), {, return, false, ;, }, if, (, !, this, ., autoRange, &&, !]
[., inverted, ), {, return, false, ;, }, if, (, !, this, ., autoRange, &&, !, ObjectUtilities, ., equal, (]
[., inverted, ), {, return, false, ;, }, if, (, !, this, ., autoRange, &&, !, ObjectUtilities, ., equal, (]
[return, false, ;, }, if, (, !, this, ., autoRange, &&, !, ObjectUtilities, ., equal, (, this, ., range, ,]
[return, false, ;, }, if, (, !, this, ., autoRange, &&, !, ObjectUtilities, ., equal, (, this, ., range, ,]
[this, ., autoRange, &&, !, ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (]
[ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (]
[ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (]
[this, ., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (, this, ., autoRange, !=]
[this, ., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (, this, ., autoRange, !=]
[range, ), ), {, return, false, ;, }, if, (, this, ., autoRange, !=, that, ., autoRange, ), {, return]
[false, ;, }, if, (, this, ., autoRange, !=, that, ., autoRange, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., autoRange, !=, that, ., autoRange, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., autoRange, !=, that, ., autoRange, ), {, return, false, ;, }, if, (]
[(, this, ., autoRange, !=, that, ., autoRange, ), {, return, false, ;, }, if, (, this, ., autoRangeMinimumSize, !=]
[(, this, ., autoRange, !=, that, ., autoRange, ), {, return, false, ;, }, if, (, this, ., autoRangeMinimumSize, !=]
[., autoRange, ), {, return, false, ;, }, if, (, this, ., autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return]
[false, ;, }, if, (, this, ., autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return, false, ;, }, if, (, !]
[autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return, false, ;, }, if, (, !, this, ., defaultAutoRange, ., equals, (]
[autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return, false, ;, }, if, (, !, this, ., defaultAutoRange, ., equals, (]
[return, false, ;, }, if, (, !, this, ., defaultAutoRange, ., equals, (, that, ., defaultAutoRange, ), ), {, return]
[(, !, this, ., defaultAutoRange, ., equals, (, that, ., defaultAutoRange, ), ), {, return, false, ;, }, if, (]
[(, !, this, ., defaultAutoRange, ., equals, (, that, ., defaultAutoRange, ), ), {, return, false, ;, }, if, (]
[(, !, this, ., defaultAutoRange, ., equals, (, that, ., defaultAutoRange, ), ), {, return, false, ;, }, if, (]
[defaultAutoRange, ., equals, (, that, ., defaultAutoRange, ), ), {, return, false, ;, }, if, (, this, ., upperMargin, !=]
[defaultAutoRange, ., equals, (, that, ., defaultAutoRange, ), ), {, return, false, ;, }, if, (, this, ., upperMargin, !=]
[defaultAutoRange, ), ), {, return, false, ;, }, if, (, this, ., upperMargin, !=, that, ., upperMargin, ), {, return]
[false, ;, }, if, (, this, ., upperMargin, !=, that, ., upperMargin, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., upperMargin, !=, that, ., upperMargin, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., upperMargin, !=, that, ., upperMargin, ), {, return, false, ;, }, if, (]
[(, this, ., upperMargin, !=, that, ., upperMargin, ), {, return, false, ;, }, if, (, this, ., lowerMargin, !=]
[(, this, ., upperMargin, !=, that, ., upperMargin, ), {, return, false, ;, }, if, (, this, ., lowerMargin, !=]
[., upperMargin, ), {, return, false, ;, }, if, (, this, ., lowerMargin, !=, that, ., lowerMargin, ), {, return]
[false, ;, }, if, (, this, ., lowerMargin, !=, that, ., lowerMargin, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., lowerMargin, !=, that, ., lowerMargin, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., lowerMargin, !=, that, ., lowerMargin, ), {, return, false, ;, }, if, (]
[(, this, ., lowerMargin, !=, that, ., lowerMargin, ), {, return, false, ;, }, if, (, this, ., fixedAutoRange, !=]
[(, this, ., lowerMargin, !=, that, ., lowerMargin, ), {, return, false, ;, }, if, (, this, ., fixedAutoRange, !=]
[., lowerMargin, ), {, return, false, ;, }, if, (, this, ., fixedAutoRange, !=, that, ., fixedAutoRange, ), {, return]
[false, ;, }, if, (, this, ., fixedAutoRange, !=, that, ., fixedAutoRange, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., fixedAutoRange, !=, that, ., fixedAutoRange, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., fixedAutoRange, !=, that, ., fixedAutoRange, ), {, return, false, ;, }, if, (]
[(, this, ., fixedAutoRange, !=, that, ., fixedAutoRange, ), {, return, false, ;, }, if, (, this, ., autoTickUnitSelection, !=]
[(, this, ., fixedAutoRange, !=, that, ., fixedAutoRange, ), {, return, false, ;, }, if, (, this, ., autoTickUnitSelection, !=]
[., fixedAutoRange, ), {, return, false, ;, }, if, (, this, ., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, ), {, return]
[false, ;, }, if, (, this, ., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, ), {, return, false, ;, }, if, (, !]
[this, ., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[this, ., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[that, ., autoTickUnitSelection, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., standardTickUnits, ,]
[that, ., autoTickUnitSelection, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., standardTickUnits, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., standardTickUnits, ,, that, ., standardTickUnits, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., standardTickUnits, ,, that, ., standardTickUnits, ), ), {, return, false, ;, }, if, (]
[ObjectUtilities, ., equal, (, this, ., standardTickUnits, ,, that, ., standardTickUnits, ), ), {, return, false, ;, }, if, (]
[ObjectUtilities, ., equal, (, this, ., standardTickUnits, ,, that, ., standardTickUnits, ), ), {, return, false, ;, }, if, (]
[this, ., standardTickUnits, ,, that, ., standardTickUnits, ), ), {, return, false, ;, }, if, (, this, ., verticalTickLabels, !=]
[this, ., standardTickUnits, ,, that, ., standardTickUnits, ), ), {, return, false, ;, }, if, (, this, ., verticalTickLabels, !=]
[standardTickUnits, ), ), {, return, false, ;, }, if, (, this, ., verticalTickLabels, !=, that, ., verticalTickLabels, ), {, return]
[false, ;, }, if, (, this, ., verticalTickLabels, !=, that, ., verticalTickLabels, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., verticalTickLabels, !=, that, ., verticalTickLabels, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., verticalTickLabels, !=, that, ., verticalTickLabels, ), {, return, false, ;, }, if, (]
[(, this, ., verticalTickLabels, !=, that, ., verticalTickLabels, ), {, return, false, ;, }, if, (, this, ., minorTickCount, !=]
[(, this, ., verticalTickLabels, !=, that, ., verticalTickLabels, ), {, return, false, ;, }, if, (, this, ., minorTickCount, !=]
[., verticalTickLabels, ), {, return, false, ;, }, if, (, this, ., minorTickCount, !=, that, ., minorTickCount, ), {, return]
[return, false, ;, }, if, (, this, ., minorTickCount, !=, that, ., minorTickCount, ), {, return, false, ;, }, return]
[return, false, ;, }, if, (, this, ., minorTickCount, !=, that, ., minorTickCount, ), {, return, false, ;, }, return]
[if, (, this, ., minorTickCount, !=, that, ., minorTickCount, ), {, return, false, ;, }, return, super, ., equals, (]
[return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, ValueAxis, clone, =]
[equals, (, obj, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, ValueAxis, clone, =, (, ValueAxis, )]
[equals, (, obj, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, ValueAxis, clone, =, (, ValueAxis, )]
[Object, clone, (, ), throws, CloneNotSupportedException, {, ValueAxis, clone, =, (, ValueAxis, ), super, ., clone, (, ), ;, return]
[super, ., clone, (, ), ;, return, clone, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[super, ., clone, (, ), ;, return, clone, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[return, clone, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[return, clone, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writeShape, (]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writeShape, (]
[ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writeShape, (, this, ., upArrow, ,]
[throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writeShape, (, this, ., upArrow, ,, stream, ), ;]
[throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writeShape, (, this, ., upArrow, ,, stream, ), ;]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writeShape, (, this, ., upArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writeShape, (, this, ., upArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (]
[;, SerialUtilities, ., writeShape, (, this, ., upArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,]
[writeShape, (, this, ., upArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,, stream, ), ;]
[writeShape, (, this, ., upArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,, stream, ), ;]
[upArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (]
[upArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (]
[;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,]
[writeShape, (, this, ., downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,, stream, ), ;]
[writeShape, (, this, ., downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,, stream, ), ;]
[downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (]
[downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (]
[;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., rightArrow, ,]
[this, ., rightArrow, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[this, ., rightArrow, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., upArrow, =]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., upArrow, =]
[), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., upArrow, =, SerialUtilities, ., readShape, (]
[,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., upArrow, =, SerialUtilities, ., readShape, (, stream, ), ;]
[,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., upArrow, =, SerialUtilities, ., readShape, (, stream, ), ;]
[., defaultReadObject, (, ), ;, this, ., upArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., downArrow, =]
[., defaultReadObject, (, ), ;, this, ., upArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., downArrow, =]
[;, this, ., upArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., downArrow, =, SerialUtilities, ., readShape, (]
[upArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;]
[upArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;]
[readShape, (, stream, ), ;, this, ., downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., leftArrow, =]
[readShape, (, stream, ), ;, this, ., downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., leftArrow, =]
[;, this, ., downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., leftArrow, =, SerialUtilities, ., readShape, (]
[downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., leftArrow, =, SerialUtilities, ., readShape, (, stream, ), ;]
[downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., leftArrow, =, SerialUtilities, ., readShape, (, stream, ), ;]
[readShape, (, stream, ), ;, this, ., leftArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., rightArrow, =]
[readShape, (, stream, ), ;, this, ., leftArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., rightArrow, =]
[;, this, ., leftArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., rightArrow, =, SerialUtilities, ., readShape, (]
