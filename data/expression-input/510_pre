[., util, ., Deque, ;, import, java, ., util, ., List, ;, class, CodePrinter, {, static, final, int, DEFAULT_LINE_LENGTH_THRESHOLD, =]
[>, allMappings, ;, final, private, boolean, createSrcMap, ;, final, private, SourceMap, ., DetailLevel, sourceMapDetailLevel, ;, protected, final, StringBuilder, code, =]
[final, private, boolean, createSrcMap, ;, final, private, SourceMap, ., DetailLevel, sourceMapDetailLevel, ;, protected, final, StringBuilder, code, =, new, StringBuilder, (]
[protected, final, StringBuilder, code, =, new, StringBuilder, (, 1024, ), ;, protected, final, int, lineLengthThreshold, ;, protected, int, lineLength, =]
[StringBuilder, (, 1024, ), ;, protected, final, int, lineLengthThreshold, ;, protected, int, lineLength, =, 0, ;, protected, int, lineIndex, =]
[protected, int, lineIndex, =, 0, ;, MappedCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {]
[protected, int, lineIndex, =, 0, ;, MappedCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {]
[0, ;, MappedCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, Preconditions, ., checkState, (]
[0, ;, MappedCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, Preconditions, ., checkState, (]
[MappedCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=]
[lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;]
[lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;]
[,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, this, ., lineLengthThreshold, =]
[,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, this, ., lineLengthThreshold, =]
[,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, this, ., lineLengthThreshold, =]
[., DetailLevel, sourceMapDetailLevel, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=]
[sourceMapDetailLevel, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?]
[sourceMapDetailLevel, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?]
[., checkState, (, sourceMapDetailLevel, !=, null, ), ;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :]
[(, sourceMapDetailLevel, !=, null, ), ;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;]
[(, sourceMapDetailLevel, !=, null, ), ;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;]
[), ;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =]
[this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;]
[this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;]
[lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =]
[0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;]
[0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;]
[MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =]
[MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =]
[lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap, ?]
[this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :]
[sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :, null, ;]
[sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :, null, ;]
[this, ., mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :, null, ;, this, ., allMappings, =]
[this, ., mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :, null, ;, this, ., allMappings, =]
[mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :, null, ;, this, ., allMappings, =, createSrcMap, ?]
[>, (, ), :, null, ;, this, ., allMappings, =, createSrcMap, ?, new, ArrayList, <, Mapping, >, (, ), :]
[{, Node, node, ;, FilePosition, start, ;, FilePosition, end, ;, }, @, Override, void, startSourceMapping, (, Node, node, ), {]
[{, Node, node, ;, FilePosition, start, ;, FilePosition, end, ;, }, @, Override, void, startSourceMapping, (, Node, node, ), {]
[FilePosition, start, ;, FilePosition, end, ;, }, @, Override, void, startSourceMapping, (, Node, node, ), {, Preconditions, ., checkState, (]
[FilePosition, start, ;, FilePosition, end, ;, }, @, Override, void, startSourceMapping, (, Node, node, ), {, Preconditions, ., checkState, (]
[;, FilePosition, end, ;, }, @, Override, void, startSourceMapping, (, Node, node, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=]
[;, }, @, Override, void, startSourceMapping, (, Node, node, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;]
[;, }, @, Override, void, startSourceMapping, (, Node, node, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;]
[void, startSourceMapping, (, Node, node, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, Preconditions, ., checkState, (]
[void, startSourceMapping, (, Node, node, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, Preconditions, ., checkState, (]
[(, Node, node, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, Preconditions, ., checkState, (, node, !=]
[Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (]
[Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (]
[Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (]
[Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, ), ;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (]
[checkState, (, sourceMapDetailLevel, !=, null, ), ;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&]
[checkState, (, sourceMapDetailLevel, !=, null, ), ;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&]
[checkState, (, sourceMapDetailLevel, !=, null, ), ;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&]
[;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=]
[., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&]
[., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&]
[., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&]
[), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (, ), >]
[if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (, ), >, 0, &&]
[if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (, ), >, 0, &&]
[node, ., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (, ), >, 0, &&, sourceMapDetailLevel, ., apply, (]
[&&, node, ., getLineno, (, ), >, 0, &&, sourceMapDetailLevel, ., apply, (, node, ), ), {, int, line, =]
[0, &&, sourceMapDetailLevel, ., apply, (, node, ), ), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =]
[apply, (, node, ), ), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;]
[apply, (, node, ), ), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;]
[), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (]
[), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (]
[int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (, line, >=]
[;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (, line, >=, 0, ), ;, Mapping, mapping, =]
[(, ), ;, Preconditions, ., checkState, (, line, >=, 0, ), ;, Mapping, mapping, =, new, Mapping, (, ), ;]
[(, ), ;, Preconditions, ., checkState, (, line, >=, 0, ), ;, Mapping, mapping, =, new, Mapping, (, ), ;]
[., checkState, (, line, >=, 0, ), ;, Mapping, mapping, =, new, Mapping, (, ), ;, mapping, ., node, =]
[(, line, >=, 0, ), ;, Mapping, mapping, =, new, Mapping, (, ), ;, mapping, ., node, =, node, ;]
[(, line, >=, 0, ), ;, Mapping, mapping, =, new, Mapping, (, ), ;, mapping, ., node, =, node, ;]
[), ;, Mapping, mapping, =, new, Mapping, (, ), ;, mapping, ., node, =, node, ;, mapping, ., start, =]
[mapping, =, new, Mapping, (, ), ;, mapping, ., node, =, node, ;, mapping, ., start, =, new, FilePosition, (]
[new, Mapping, (, ), ;, mapping, ., node, =, node, ;, mapping, ., start, =, new, FilePosition, (, line, ,]
[), ;, mapping, ., node, =, node, ;, mapping, ., start, =, new, FilePosition, (, line, ,, index, ), ;]
[), ;, mapping, ., node, =, node, ;, mapping, ., start, =, new, FilePosition, (, line, ,, index, ), ;]
[node, =, node, ;, mapping, ., start, =, new, FilePosition, (, line, ,, index, ), ;, mappings, ., push, (]
[;, mapping, ., start, =, new, FilePosition, (, line, ,, index, ), ;, mappings, ., push, (, mapping, ), ;]
[;, mapping, ., start, =, new, FilePosition, (, line, ,, index, ), ;, mappings, ., push, (, mapping, ), ;]
[=, new, FilePosition, (, line, ,, index, ), ;, mappings, ., push, (, mapping, ), ;, allMappings, ., add, (]
[allMappings, ., add, (, mapping, ), ;, }, }, @, Override, void, endSourceMapping, (, Node, node, ), {, if, (]
[allMappings, ., add, (, mapping, ), ;, }, }, @, Override, void, endSourceMapping, (, Node, node, ), {, if, (]
[allMappings, ., add, (, mapping, ), ;, }, }, @, Override, void, endSourceMapping, (, Node, node, ), {, if, (]
[add, (, mapping, ), ;, }, }, @, Override, void, endSourceMapping, (, Node, node, ), {, if, (, createSrcMap, &&]
[(, mapping, ), ;, }, }, @, Override, void, endSourceMapping, (, Node, node, ), {, if, (, createSrcMap, &&, !]
[(, mapping, ), ;, }, }, @, Override, void, endSourceMapping, (, Node, node, ), {, if, (, createSrcMap, &&, !]
[@, Override, void, endSourceMapping, (, Node, node, ), {, if, (, createSrcMap, &&, !, mappings, ., isEmpty, (, ), &&]
[@, Override, void, endSourceMapping, (, Node, node, ), {, if, (, createSrcMap, &&, !, mappings, ., isEmpty, (, ), &&]
[@, Override, void, endSourceMapping, (, Node, node, ), {, if, (, createSrcMap, &&, !, mappings, ., isEmpty, (, ), &&]
[@, Override, void, endSourceMapping, (, Node, node, ), {, if, (, createSrcMap, &&, !, mappings, ., isEmpty, (, ), &&]
[{, if, (, createSrcMap, &&, !, mappings, ., isEmpty, (, ), &&, mappings, ., peek, (, ), ., node, ==]
[mappings, ., isEmpty, (, ), &&, mappings, ., peek, (, ), ., node, ==, node, ), {, Mapping, mapping, =]
[mappings, ., isEmpty, (, ), &&, mappings, ., peek, (, ), ., node, ==, node, ), {, Mapping, mapping, =]
[(, ), ., node, ==, node, ), {, Mapping, mapping, =, mappings, ., pop, (, ), ;, int, line, =]
[{, Mapping, mapping, =, mappings, ., pop, (, ), ;, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =]
[mappings, ., pop, (, ), ;, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;]
[mappings, ., pop, (, ), ;, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;]
[), ;, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (]
[), ;, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (]
[int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (, line, >=]
[getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (, line, >=, 0, ), ;]
[getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (, line, >=, 0, ), ;]
[int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (, line, >=, 0, ), ;, mapping, ., end, =]
[getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (, line, >=, 0, ), ;, mapping, ., end, =, new, FilePosition, (]
[), ;, Preconditions, ., checkState, (, line, >=, 0, ), ;, mapping, ., end, =, new, FilePosition, (, line, ,]
[=, new, FilePosition, (, line, ,, index, ), ;, }, }, void, generateSourceMap, (, SourceMap, map, ), {, if, (]
[;, }, }, void, generateSourceMap, (, SourceMap, map, ), {, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :]
[void, generateSourceMap, (, SourceMap, map, ), {, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :, allMappings, ), {]
[void, generateSourceMap, (, SourceMap, map, ), {, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :, allMappings, ), {]
[map, ), {, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :, allMappings, ), {, map, ., addMapping, (]
[map, ), {, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :, allMappings, ), {, map, ., addMapping, (]
[(, createSrcMap, ), {, for, (, Mapping, mapping, :, allMappings, ), {, map, ., addMapping, (, mapping, ., node, ,]
[(, createSrcMap, ), {, for, (, Mapping, mapping, :, allMappings, ), {, map, ., addMapping, (, mapping, ., node, ,]
[for, (, Mapping, mapping, :, allMappings, ), {, map, ., addMapping, (, mapping, ., node, ,, mapping, ., start, ,]
[for, (, Mapping, mapping, :, allMappings, ), {, map, ., addMapping, (, mapping, ., node, ,, mapping, ., start, ,]
[), ;, }, }, }, void, reportLineCut, (, int, lineIndex, ,, int, charIndex, ,, boolean, insertion, ), {, if, (]
[int, lineIndex, ,, int, charIndex, ,, boolean, insertion, ), {, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :]
[int, charIndex, ,, boolean, insertion, ), {, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :, allMappings, ), {]
[int, charIndex, ,, boolean, insertion, ), {, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :, allMappings, ), {]
[insertion, ), {, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :, allMappings, ), {, mapping, ., start, =]
[{, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :, allMappings, ), {, mapping, ., start, =, convertPosition, (]
[{, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :, allMappings, ), {, mapping, ., start, =, convertPosition, (]
[), {, for, (, Mapping, mapping, :, allMappings, ), {, mapping, ., start, =, convertPosition, (, mapping, ., start, ,]
[for, (, Mapping, mapping, :, allMappings, ), {, mapping, ., start, =, convertPosition, (, mapping, ., start, ,, lineIndex, ,]
[Mapping, mapping, :, allMappings, ), {, mapping, ., start, =, convertPosition, (, mapping, ., start, ,, lineIndex, ,, charIndex, ,]
[{, mapping, ., start, =, convertPosition, (, mapping, ., start, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, if, (]
[{, mapping, ., start, =, convertPosition, (, mapping, ., start, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, if, (]
[{, mapping, ., start, =, convertPosition, (, mapping, ., start, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, if, (]
[=, convertPosition, (, mapping, ., start, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, if, (, mapping, ., end, !=]
[mapping, ., start, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, if, (, mapping, ., end, !=, null, ), {]
[mapping, ., start, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, if, (, mapping, ., end, !=, null, ), {]
[lineIndex, ,, charIndex, ,, insertion, ), ;, if, (, mapping, ., end, !=, null, ), {, mapping, ., end, =]
[charIndex, ,, insertion, ), ;, if, (, mapping, ., end, !=, null, ), {, mapping, ., end, =, convertPosition, (]
[charIndex, ,, insertion, ), ;, if, (, mapping, ., end, !=, null, ), {, mapping, ., end, =, convertPosition, (]
[;, if, (, mapping, ., end, !=, null, ), {, mapping, ., end, =, convertPosition, (, mapping, ., end, ,]
[(, mapping, ., end, !=, null, ), {, mapping, ., end, =, convertPosition, (, mapping, ., end, ,, lineIndex, ,]
[., end, !=, null, ), {, mapping, ., end, =, convertPosition, (, mapping, ., end, ,, lineIndex, ,, charIndex, ,]
[private, FilePosition, convertPosition, (, FilePosition, position, ,, int, lineIndex, ,, int, characterPosition, ,, boolean, insertion, ), {, int, originalLine, =]
[private, FilePosition, convertPosition, (, FilePosition, position, ,, int, lineIndex, ,, int, characterPosition, ,, boolean, insertion, ), {, int, originalLine, =]
[,, int, characterPosition, ,, boolean, insertion, ), {, int, originalLine, =, position, ., getLine, (, ), ;, int, originalChar, =]
[,, int, characterPosition, ,, boolean, insertion, ), {, int, originalLine, =, position, ., getLine, (, ), ;, int, originalChar, =]
[int, originalLine, =, position, ., getLine, (, ), ;, int, originalChar, =, position, ., getColumn, (, ), ;, if, (]
[getLine, (, ), ;, int, originalChar, =, position, ., getColumn, (, ), ;, if, (, insertion, ), {, if, (]
[getLine, (, ), ;, int, originalChar, =, position, ., getColumn, (, ), ;, if, (, insertion, ), {, if, (]
[getLine, (, ), ;, int, originalChar, =, position, ., getColumn, (, ), ;, if, (, insertion, ), {, if, (]
[), ;, int, originalChar, =, position, ., getColumn, (, ), ;, if, (, insertion, ), {, if, (, originalLine, ==]
[int, originalChar, =, position, ., getColumn, (, ), ;, if, (, insertion, ), {, if, (, originalLine, ==, lineIndex, &&]
[int, originalChar, =, position, ., getColumn, (, ), ;, if, (, insertion, ), {, if, (, originalLine, ==, lineIndex, &&]
[=, position, ., getColumn, (, ), ;, if, (, insertion, ), {, if, (, originalLine, ==, lineIndex, &&, originalChar, >=]
[(, ), ;, if, (, insertion, ), {, if, (, originalLine, ==, lineIndex, &&, originalChar, >=, characterPosition, ), {, return]
[if, (, insertion, ), {, if, (, originalLine, ==, lineIndex, &&, originalChar, >=, characterPosition, ), {, return, new, FilePosition, (]
[if, (, insertion, ), {, if, (, originalLine, ==, lineIndex, &&, originalChar, >=, characterPosition, ), {, return, new, FilePosition, (]
[insertion, ), {, if, (, originalLine, ==, lineIndex, &&, originalChar, >=, characterPosition, ), {, return, new, FilePosition, (, originalLine, +]
[{, if, (, originalLine, ==, lineIndex, &&, originalChar, >=, characterPosition, ), {, return, new, FilePosition, (, originalLine, +, 1, ,]
[{, if, (, originalLine, ==, lineIndex, &&, originalChar, >=, characterPosition, ), {, return, new, FilePosition, (, originalLine, +, 1, ,]
[(, originalLine, ==, lineIndex, &&, originalChar, >=, characterPosition, ), {, return, new, FilePosition, (, originalLine, +, 1, ,, originalChar, -]
[characterPosition, ), {, return, new, FilePosition, (, originalLine, +, 1, ,, originalChar, -, characterPosition, ), ;, }, else, {, return]
[+, 1, ,, originalChar, -, characterPosition, ), ;, }, else, {, return, position, ;, }, }, else, {, if, (]
[+, 1, ,, originalChar, -, characterPosition, ), ;, }, else, {, return, position, ;, }, }, else, {, if, (]
[,, originalChar, -, characterPosition, ), ;, }, else, {, return, position, ;, }, }, else, {, if, (, originalLine, ==]
[), ;, }, else, {, return, position, ;, }, }, else, {, if, (, originalLine, ==, lineIndex, ), {, return]
[else, {, return, position, ;, }, }, else, {, if, (, originalLine, ==, lineIndex, ), {, return, new, FilePosition, (]
[else, {, return, position, ;, }, }, else, {, if, (, originalLine, ==, lineIndex, ), {, return, new, FilePosition, (]
[return, position, ;, }, }, else, {, if, (, originalLine, ==, lineIndex, ), {, return, new, FilePosition, (, originalLine, -]
[;, }, }, else, {, if, (, originalLine, ==, lineIndex, ), {, return, new, FilePosition, (, originalLine, -, 1, ,]
[;, }, }, else, {, if, (, originalLine, ==, lineIndex, ), {, return, new, FilePosition, (, originalLine, -, 1, ,]
[}, else, {, if, (, originalLine, ==, lineIndex, ), {, return, new, FilePosition, (, originalLine, -, 1, ,, originalChar, +]
[lineIndex, ), {, return, new, FilePosition, (, originalLine, -, 1, ,, originalChar, +, characterPosition, ), ;, }, else, if, (]
[lineIndex, ), {, return, new, FilePosition, (, originalLine, -, 1, ,, originalChar, +, characterPosition, ), ;, }, else, if, (]
[{, return, new, FilePosition, (, originalLine, -, 1, ,, originalChar, +, characterPosition, ), ;, }, else, if, (, originalLine, >]
[(, originalLine, -, 1, ,, originalChar, +, characterPosition, ), ;, }, else, if, (, originalLine, >, lineIndex, ), {, throw]
[1, ,, originalChar, +, characterPosition, ), ;, }, else, if, (, originalLine, >, lineIndex, ), {, throw, new, IllegalStateException, (]
[}, else, if, (, originalLine, >, lineIndex, ), {, throw, new, IllegalStateException, (, "Cannot undo line cut on a previous line.", ), ;, }, else, {, return]
[(, "Cannot undo line cut on a previous line.", ), ;, }, else, {, return, position, ;, }, }, }, public, String, getCode, (, ), {, return]
[(, "Cannot undo line cut on a previous line.", ), ;, }, else, {, return, position, ;, }, }, }, public, String, getCode, (, ), {, return]
[getCode, (, ), {, return, code, ., toString, (, ), ;, }, @, Override, char, getLastChar, (, ), {, return]
[getCode, (, ), {, return, code, ., toString, (, ), ;, }, @, Override, char, getLastChar, (, ), {, return]
[(, ), {, return, code, ., toString, (, ), ;, }, @, Override, char, getLastChar, (, ), {, return, (]
[(, ), {, return, code, ., toString, (, ), ;, }, @, Override, char, getLastChar, (, ), {, return, (]
[(, ), {, return, code, ., toString, (, ), ;, }, @, Override, char, getLastChar, (, ), {, return, (]
[toString, (, ), ;, }, @, Override, char, getLastChar, (, ), {, return, (, code, ., length, (, ), >]
[;, }, @, Override, char, getLastChar, (, ), {, return, (, code, ., length, (, ), >, 0, ), ?]
[;, }, @, Override, char, getLastChar, (, ), {, return, (, code, ., length, (, ), >, 0, ), ?]
[char, getLastChar, (, ), {, return, (, code, ., length, (, ), >, 0, ), ?, code, ., charAt, (]
[char, getLastChar, (, ), {, return, (, code, ., length, (, ), >, 0, ), ?, code, ., charAt, (]
[char, getLastChar, (, ), {, return, (, code, ., length, (, ), >, 0, ), ?, code, ., charAt, (]
[(, code, ., length, (, ), >, 0, ), ?, code, ., charAt, (, code, ., length, (, ), -]
[length, (, ), >, 0, ), ?, code, ., charAt, (, code, ., length, (, ), -, 1, ), :]
[code, ., length, (, ), -, 1, ), :, '\0', ;, }, protected, final, int, getCurrentCharIndex, (, ), {, return]
[}, protected, final, int, getCurrentCharIndex, (, ), {, return, lineLength, ;, }, protected, final, int, getCurrentLineIndex, (, ), {, return]
[getCurrentLineIndex, (, ), {, return, lineIndex, ;, }, }, static, class, PrettyCodePrinter, extends, MappedCodePrinter, {, static, final, String, INDENT, =]
[;, }, }, static, class, PrettyCodePrinter, extends, MappedCodePrinter, {, static, final, String, INDENT, =, "  ", ;, private, int, indent, =]
[=, 0, ;, private, PrettyCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSourceMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, super, (]
[;, private, PrettyCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSourceMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, super, (, lineLengthThreshold, ,]
[PrettyCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSourceMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, super, (, lineLengthThreshold, ,, createSourceMap, ,]
[(, lineLengthThreshold, ,, createSourceMap, ,, sourceMapDetailLevel, ), ;, }, @, Override, void, append, (, String, str, ), {, if, (]
[(, lineLengthThreshold, ,, createSourceMap, ,, sourceMapDetailLevel, ), ;, }, @, Override, void, append, (, String, str, ), {, if, (]
[,, createSourceMap, ,, sourceMapDetailLevel, ), ;, }, @, Override, void, append, (, String, str, ), {, if, (, lineLength, ==]
[Override, void, append, (, String, str, ), {, if, (, lineLength, ==, 0, ), {, for, (, int, i, =]
[append, (, String, str, ), {, if, (, lineLength, ==, 0, ), {, for, (, int, i, =, 0, ;]
[append, (, String, str, ), {, if, (, lineLength, ==, 0, ), {, for, (, int, i, =, 0, ;]
[String, str, ), {, if, (, lineLength, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <]
[), {, if, (, lineLength, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, indent, ;]
[), {, if, (, lineLength, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, indent, ;]
[lineLength, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, indent, ;, i, ++, ), {]
[lineLength, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, indent, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, indent, ;, i, ++, ), {, code, ., append, (]
[int, i, =, 0, ;, i, <, indent, ;, i, ++, ), {, code, ., append, (, INDENT, ), ;]
[=, 0, ;, i, <, indent, ;, i, ++, ), {, code, ., append, (, INDENT, ), ;, lineLength, +=]
[=, 0, ;, i, <, indent, ;, i, ++, ), {, code, ., append, (, INDENT, ), ;, lineLength, +=]
[++, ), {, code, ., append, (, INDENT, ), ;, lineLength, +=, INDENT, ., length, (, ), ;, }, }]
[++, ), {, code, ., append, (, INDENT, ), ;, lineLength, +=, INDENT, ., length, (, ), ;, }, }]
[., append, (, INDENT, ), ;, lineLength, +=, INDENT, ., length, (, ), ;, }, }, code, ., append, (]
[INDENT, ), ;, lineLength, +=, INDENT, ., length, (, ), ;, }, }, code, ., append, (, str, ), ;]
[;, lineLength, +=, INDENT, ., length, (, ), ;, }, }, code, ., append, (, str, ), ;, lineLength, +=]
[;, lineLength, +=, INDENT, ., length, (, ), ;, }, }, code, ., append, (, str, ), ;, lineLength, +=]
[), ;, lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (]
[), ;, lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (]
[lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >]
[., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {]
[., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {]
[;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {, code, ., append, (]
[Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {, code, ., append, (, '\n', ), ;]
[Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {, code, ., append, (, '\n', ), ;]
[(, ), {, if, (, lineLength, >, 0, ), {, code, ., append, (, '\n', ), ;, lineIndex, ++, ;]
[{, if, (, lineLength, >, 0, ), {, code, ., append, (, '\n', ), ;, lineIndex, ++, ;, lineLength, =]
[(, '\n', ), ;, lineIndex, ++, ;, lineLength, =, 0, ;, }, }, @, Override, void, maybeLineBreak, (, ), {]
[Override, void, maybeLineBreak, (, ), {, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (]
[Override, void, maybeLineBreak, (, ), {, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (]
[maybeLineBreak, (, ), {, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >]
[{, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold, ), {]
[if, (, lineLength, >, lineLengthThreshold, ), {, startNewLine, (, ), ;, }, }, @, Override, void, endLine, (, ), {]
[}, @, Override, void, endLine, (, ), {, startNewLine, (, ), ;, }, @, Override, void, appendBlockStart, (, ), {]
[Override, void, endLine, (, ), {, startNewLine, (, ), ;, }, @, Override, void, appendBlockStart, (, ), {, append, (]
[(, ), {, startNewLine, (, ), ;, }, @, Override, void, appendBlockStart, (, ), {, append, (, " {", ), ;]
[(, ), {, startNewLine, (, ), ;, }, @, Override, void, appendBlockStart, (, ), {, append, (, " {", ), ;]
[appendBlockStart, (, ), {, append, (, " {", ), ;, indent, ++, ;, }, @, Override, void, appendBlockEnd, (, ), {]
[append, (, " {", ), ;, indent, ++, ;, }, @, Override, void, appendBlockEnd, (, ), {, endLine, (, ), ;]
[append, (, " {", ), ;, indent, ++, ;, }, @, Override, void, appendBlockEnd, (, ), {, endLine, (, ), ;]
[), ;, indent, ++, ;, }, @, Override, void, appendBlockEnd, (, ), {, endLine, (, ), ;, indent, --, ;]
[indent, ++, ;, }, @, Override, void, appendBlockEnd, (, ), {, endLine, (, ), ;, indent, --, ;, append, (]
[endLine, (, ), ;, indent, --, ;, append, (, "}", ), ;, }, @, Override, void, listSeparator, (, ), {]
[), ;, indent, --, ;, append, (, "}", ), ;, }, @, Override, void, listSeparator, (, ), {, add, (]
[--, ;, append, (, "}", ), ;, }, @, Override, void, listSeparator, (, ), {, add, (, ", ", ), ;]
[{, add, (, ", ", ), ;, maybeLineBreak, (, ), ;, }, @, Override, void, endFunction, (, boolean, statementContext, ), {]
[{, add, (, ", ", ), ;, maybeLineBreak, (, ), ;, }, @, Override, void, endFunction, (, boolean, statementContext, ), {]
[), ;, maybeLineBreak, (, ), ;, }, @, Override, void, endFunction, (, boolean, statementContext, ), {, super, ., endFunction, (]
[;, }, @, Override, void, endFunction, (, boolean, statementContext, ), {, super, ., endFunction, (, statementContext, ), ;, if, (]
[Override, void, endFunction, (, boolean, statementContext, ), {, super, ., endFunction, (, statementContext, ), ;, if, (, statementContext, ), {]
[), ;, if, (, statementContext, ), {, startNewLine, (, ), ;, }, }, @, Override, void, beginCaseBody, (, ), {]
[), ;, if, (, statementContext, ), {, startNewLine, (, ), ;, }, }, @, Override, void, beginCaseBody, (, ), {]
[{, startNewLine, (, ), ;, }, }, @, Override, void, beginCaseBody, (, ), {, super, ., beginCaseBody, (, ), ;]
[{, startNewLine, (, ), ;, }, }, @, Override, void, beginCaseBody, (, ), {, super, ., beginCaseBody, (, ), ;]
[), ;, }, }, @, Override, void, beginCaseBody, (, ), {, super, ., beginCaseBody, (, ), ;, indent, ++, ;]
[., beginCaseBody, (, ), ;, indent, ++, ;, endLine, (, ), ;, }, @, Override, void, endCaseBody, (, ), {]
[., beginCaseBody, (, ), ;, indent, ++, ;, endLine, (, ), ;, }, @, Override, void, endCaseBody, (, ), {]
[++, ;, endLine, (, ), ;, }, @, Override, void, endCaseBody, (, ), {, super, ., endCaseBody, (, ), ;]
[++, ;, endLine, (, ), ;, }, @, Override, void, endCaseBody, (, ), {, super, ., endCaseBody, (, ), ;]
[(, ), ;, }, @, Override, void, endCaseBody, (, ), {, super, ., endCaseBody, (, ), ;, indent, --, ;]
[;, endStatement, (, ), ;, }, @, Override, void, appendOp, (, String, op, ,, boolean, binOp, ), {, if, (]
[}, @, Override, void, appendOp, (, String, op, ,, boolean, binOp, ), {, if, (, binOp, ), {, if, (]
[}, @, Override, void, appendOp, (, String, op, ,, boolean, binOp, ), {, if, (, binOp, ), {, if, (]
[}, @, Override, void, appendOp, (, String, op, ,, boolean, binOp, ), {, if, (, binOp, ), {, if, (]
[appendOp, (, String, op, ,, boolean, binOp, ), {, if, (, binOp, ), {, if, (, getLastChar, (, ), !=]
[String, op, ,, boolean, binOp, ), {, if, (, binOp, ), {, if, (, getLastChar, (, ), !=, ' ', &&]
[String, op, ,, boolean, binOp, ), {, if, (, binOp, ), {, if, (, getLastChar, (, ), !=, ' ', &&]
[String, op, ,, boolean, binOp, ), {, if, (, binOp, ), {, if, (, getLastChar, (, ), !=, ' ', &&]
[binOp, ), {, if, (, binOp, ), {, if, (, getLastChar, (, ), !=, ' ', &&, op, ., charAt, (]
[if, (, binOp, ), {, if, (, getLastChar, (, ), !=, ' ', &&, op, ., charAt, (, 0, ), !=]
[), {, if, (, getLastChar, (, ), !=, ' ', &&, op, ., charAt, (, 0, ), !=, ',', ), {]
[if, (, getLastChar, (, ), !=, ' ', &&, op, ., charAt, (, 0, ), !=, ',', ), {, append, (]
[), !=, ' ', &&, op, ., charAt, (, 0, ), !=, ',', ), {, append, (, " ", ), ;, }]
[' ', &&, op, ., charAt, (, 0, ), !=, ',', ), {, append, (, " ", ), ;, }, append, (]
[., charAt, (, 0, ), !=, ',', ), {, append, (, " ", ), ;, }, append, (, op, ), ;]
[(, 0, ), !=, ',', ), {, append, (, " ", ), ;, }, append, (, op, ), ;, append, (]
[{, append, (, " ", ), ;, }, append, (, op, ), ;, append, (, " ", ), ;, }, else, {]
[(, " ", ), ;, }, append, (, op, ), ;, append, (, " ", ), ;, }, else, {, append, (]
[), ;, }, else, {, append, (, op, ), ;, }, }, @, Override, boolean, shouldPreserveExtraBlocks, (, ), {, return]
[@, Override, boolean, shouldPreserveExtraBlocks, (, ), {, return, true, ;, }, private, Node, getTryForCatch, (, Node, n, ), {, return]
[@, Override, boolean, shouldPreserveExtraBlocks, (, ), {, return, true, ;, }, private, Node, getTryForCatch, (, Node, n, ), {, return]
[@, Override, boolean, shouldPreserveExtraBlocks, (, ), {, return, true, ;, }, private, Node, getTryForCatch, (, Node, n, ), {, return]
[(, ), ., getParent, (, ), ;, }, @, Override, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, isStatementContext, ), {]
[(, ), ., getParent, (, ), ;, }, @, Override, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, isStatementContext, ), {]
[(, ), ;, }, @, Override, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, isStatementContext, ), {, Preconditions, ., checkState, (]
[(, ), ;, }, @, Override, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, isStatementContext, ), {, Preconditions, ., checkState, (]
[n, ,, boolean, isStatementContext, ), {, Preconditions, ., checkState, (, n, ., isBlock, (, ), ), ;, Node, parent, =]
[n, ,, boolean, isStatementContext, ), {, Preconditions, ., checkState, (, n, ., isBlock, (, ), ), ;, Node, parent, =]
[checkState, (, n, ., isBlock, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[checkState, (, n, ., isBlock, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[n, ., isBlock, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, !=]
[;, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, !=, null, ), {, int, type, =]
[;, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, !=, null, ), {, int, type, =]
[), ;, if, (, parent, !=, null, ), {, int, type, =, parent, ., getType, (, ), ;, switch, (]
[parent, !=, null, ), {, int, type, =, parent, ., getType, (, ), ;, switch, (, type, ), {, case]
[parent, !=, null, ), {, int, type, =, parent, ., getType, (, ), ;, switch, (, type, ), {, case]
[int, type, =, parent, ., getType, (, ), ;, switch, (, type, ), {, case, Token, ., DO, :, return]
[parent, ., getType, (, ), ;, switch, (, type, ), {, case, Token, ., DO, :, return, false, ;, case]
[parent, ., getType, (, ), ;, switch, (, type, ), {, case, Token, ., DO, :, return, false, ;, case]
[;, switch, (, type, ), {, case, Token, ., DO, :, return, false, ;, case, Token, ., FUNCTION, :, return]
[type, ), {, case, Token, ., DO, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case]
[type, ), {, case, Token, ., DO, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case]
[., DO, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., TRY, :, return]
[., DO, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., TRY, :, return]
[:, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., TRY, :, return, n, !=]
[:, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., TRY, :, return, n, !=]
[FUNCTION, :, return, false, ;, case, Token, ., TRY, :, return, n, !=, parent, ., getFirstChild, (, ), ;, case]
[FUNCTION, :, return, false, ;, case, Token, ., TRY, :, return, n, !=, parent, ., getFirstChild, (, ), ;, case]
[case, Token, ., TRY, :, return, n, !=, parent, ., getFirstChild, (, ), ;, case, Token, ., CATCH, :, return]
[Token, ., TRY, :, return, n, !=, parent, ., getFirstChild, (, ), ;, case, Token, ., CATCH, :, return, !]
[Token, ., TRY, :, return, n, !=, parent, ., getFirstChild, (, ), ;, case, Token, ., CATCH, :, return, !]
[return, n, !=, parent, ., getFirstChild, (, ), ;, case, Token, ., CATCH, :, return, !, NodeUtil, ., hasFinally, (]
[!=, parent, ., getFirstChild, (, ), ;, case, Token, ., CATCH, :, return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (]
[), ;, case, Token, ., CATCH, :, return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), ), ;, case]
[), ;, case, Token, ., CATCH, :, return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), ), ;, case]
[CATCH, :, return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), ), ;, case, Token, ., IF, :, return]
[CATCH, :, return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), ), ;, case, Token, ., IF, :, return]
[return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), ), ;, case, Token, ., IF, :, return, n, ==]
[return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), ), ;, case, Token, ., IF, :, return, n, ==]
[), ), ;, case, Token, ., IF, :, return, n, ==, parent, ., getLastChild, (, ), ;, }, }, return]
[==, parent, ., getLastChild, (, ), ;, }, }, return, true, ;, }, @, Override, void, endFile, (, ), {]
[static, class, CompactCodePrinter, extends, MappedCodePrinter, {, private, final, boolean, lineBreak, ;, private, final, boolean, preferLineBreakAtEndOfFile, ;, private, int, lineStartPosition, =]
[private, final, boolean, lineBreak, ;, private, final, boolean, preferLineBreakAtEndOfFile, ;, private, int, lineStartPosition, =, 0, ;, private, int, preferredBreakPosition, =]
[final, boolean, preferLineBreakAtEndOfFile, ;, private, int, lineStartPosition, =, 0, ;, private, int, preferredBreakPosition, =, 0, ;, private, int, prevCutPosition, =]
[lineStartPosition, =, 0, ;, private, int, preferredBreakPosition, =, 0, ;, private, int, prevCutPosition, =, 0, ;, private, int, prevLineStartPosition, =]
[boolean, lineBreak, ,, boolean, preferLineBreakAtEndOfFile, ,, int, lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, super, (]
[,, boolean, preferLineBreakAtEndOfFile, ,, int, lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, super, (, lineLengthThreshold, ,]
[preferLineBreakAtEndOfFile, ,, int, lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, super, (, lineLengthThreshold, ,, createSrcMap, ,]
[lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, super, (, lineLengthThreshold, ,, createSrcMap, ,, sourceMapDetailLevel, ), ;]
[lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, super, (, lineLengthThreshold, ,, createSrcMap, ,, sourceMapDetailLevel, ), ;]
[,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, super, (, lineLengthThreshold, ,, createSrcMap, ,, sourceMapDetailLevel, ), ;, this, ., lineBreak, =]
[., DetailLevel, sourceMapDetailLevel, ), {, super, (, lineLengthThreshold, ,, createSrcMap, ,, sourceMapDetailLevel, ), ;, this, ., lineBreak, =, lineBreak, ;]
[., DetailLevel, sourceMapDetailLevel, ), {, super, (, lineLengthThreshold, ,, createSrcMap, ,, sourceMapDetailLevel, ), ;, this, ., lineBreak, =, lineBreak, ;]
[{, super, (, lineLengthThreshold, ,, createSrcMap, ,, sourceMapDetailLevel, ), ;, this, ., lineBreak, =, lineBreak, ;, this, ., preferLineBreakAtEndOfFile, =]
[lineBreak, =, lineBreak, ;, this, ., preferLineBreakAtEndOfFile, =, preferLineBreakAtEndOfFile, ;, }, @, Override, void, append, (, String, str, ), {]
[lineBreak, =, lineBreak, ;, this, ., preferLineBreakAtEndOfFile, =, preferLineBreakAtEndOfFile, ;, }, @, Override, void, append, (, String, str, ), {]
[this, ., preferLineBreakAtEndOfFile, =, preferLineBreakAtEndOfFile, ;, }, @, Override, void, append, (, String, str, ), {, code, ., append, (]
[=, preferLineBreakAtEndOfFile, ;, }, @, Override, void, append, (, String, str, ), {, code, ., append, (, str, ), ;]
[;, }, @, Override, void, append, (, String, str, ), {, code, ., append, (, str, ), ;, lineLength, +=]
[;, }, @, Override, void, append, (, String, str, ), {, code, ., append, (, str, ), ;, lineLength, +=]
[), ;, lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (]
[), ;, lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (]
[lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >]
[., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {]
[(, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {, prevCutPosition, =]
[(, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {, prevCutPosition, =]
[void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {, prevCutPosition, =, code, ., length, (, ), ;]
[(, ), {, if, (, lineLength, >, 0, ), {, prevCutPosition, =, code, ., length, (, ), ;, prevLineStartPosition, =]
[{, if, (, lineLength, >, 0, ), {, prevCutPosition, =, code, ., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;]
[{, if, (, lineLength, >, 0, ), {, prevCutPosition, =, code, ., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;]
[>, 0, ), {, prevCutPosition, =, code, ., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (]
[{, prevCutPosition, =, code, ., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', ), ;]
[=, code, ., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', ), ;, lineLength, =]
[., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', ), ;, lineLength, =, 0, ;]
[., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', ), ;, lineLength, =, 0, ;]
[), ;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', ), ;, lineLength, =, 0, ;, lineIndex, ++, ;]
[prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', ), ;, lineLength, =, 0, ;, lineIndex, ++, ;, lineStartPosition, =]
[prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', ), ;, lineLength, =, 0, ;, lineIndex, ++, ;, lineStartPosition, =]
[;, lineStartPosition, =, code, ., length, (, ), ;, }, }, @, Override, void, maybeLineBreak, (, ), {, if, (]
[length, (, ), ;, }, }, @, Override, void, maybeLineBreak, (, ), {, if, (, lineBreak, ), {, if, (]
[;, }, }, @, Override, void, maybeLineBreak, (, ), {, if, (, lineBreak, ), {, if, (, sawFunction, ), {]
[Override, void, maybeLineBreak, (, ), {, if, (, lineBreak, ), {, if, (, sawFunction, ), {, startNewLine, (, ), ;]
[maybeLineBreak, (, ), {, if, (, lineBreak, ), {, if, (, sawFunction, ), {, startNewLine, (, ), ;, sawFunction, =]
[), {, if, (, sawFunction, ), {, startNewLine, (, ), ;, sawFunction, =, false, ;, }, }, int, len, =]
[), {, if, (, sawFunction, ), {, startNewLine, (, ), ;, sawFunction, =, false, ;, }, }, int, len, =]
[(, ), ;, sawFunction, =, false, ;, }, }, int, len, =, code, ., length, (, ), ;, if, (]
[(, ), ;, sawFunction, =, false, ;, }, }, int, len, =, code, ., length, (, ), ;, if, (]
[;, sawFunction, =, false, ;, }, }, int, len, =, code, ., length, (, ), ;, if, (, preferredBreakPosition, ==]
[;, sawFunction, =, false, ;, }, }, int, len, =, code, ., length, (, ), ;, if, (, preferredBreakPosition, ==]
[=, false, ;, }, }, int, len, =, code, ., length, (, ), ;, if, (, preferredBreakPosition, ==, len, -]
[len, =, code, ., length, (, ), ;, if, (, preferredBreakPosition, ==, len, -, 1, ), {, char, ch, =]
[len, =, code, ., length, (, ), ;, if, (, preferredBreakPosition, ==, len, -, 1, ), {, char, ch, =]
[length, (, ), ;, if, (, preferredBreakPosition, ==, len, -, 1, ), {, char, ch, =, code, ., charAt, (]
[length, (, ), ;, if, (, preferredBreakPosition, ==, len, -, 1, ), {, char, ch, =, code, ., charAt, (]
[), ;, if, (, preferredBreakPosition, ==, len, -, 1, ), {, char, ch, =, code, ., charAt, (, len, -]
[==, len, -, 1, ), {, char, ch, =, code, ., charAt, (, len, -, 1, ), ;, if, (]
[==, len, -, 1, ), {, char, ch, =, code, ., charAt, (, len, -, 1, ), ;, if, (]
[-, 1, ), {, char, ch, =, code, ., charAt, (, len, -, 1, ), ;, if, (, ch, ==]
[{, char, ch, =, code, ., charAt, (, len, -, 1, ), ;, if, (, ch, ==, ';', ), {]
[ch, =, code, ., charAt, (, len, -, 1, ), ;, if, (, ch, ==, ';', ), {, preferredBreakPosition, =]
[charAt, (, len, -, 1, ), ;, if, (, ch, ==, ';', ), {, preferredBreakPosition, =, len, ;, }, }]
[preferredBreakPosition, =, len, ;, }, }, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (]
[preferredBreakPosition, =, len, ;, }, }, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (]
[len, ;, }, }, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >]
[(, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold, ), {, if, (]
[(, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold, ), {, if, (]
[(, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold, ), {, if, (]
[;, }, @, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold, ), {, if, (, preferredBreakPosition, >]
[@, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold, ), {, if, (, preferredBreakPosition, >, lineStartPosition, &&]
[@, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold, ), {, if, (, preferredBreakPosition, >, lineStartPosition, &&]
[void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold, ), {, if, (, preferredBreakPosition, >, lineStartPosition, &&, preferredBreakPosition, <]
[void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold, ), {, if, (, preferredBreakPosition, >, lineStartPosition, &&, preferredBreakPosition, <]
[(, ), {, if, (, lineLength, >, lineLengthThreshold, ), {, if, (, preferredBreakPosition, >, lineStartPosition, &&, preferredBreakPosition, <, lineStartPosition, +]
[>, lineLengthThreshold, ), {, if, (, preferredBreakPosition, >, lineStartPosition, &&, preferredBreakPosition, <, lineStartPosition, +, lineLength, ), {, int, position, =]
[), {, if, (, preferredBreakPosition, >, lineStartPosition, &&, preferredBreakPosition, <, lineStartPosition, +, lineLength, ), {, int, position, =, preferredBreakPosition, ;]
[), {, if, (, preferredBreakPosition, >, lineStartPosition, &&, preferredBreakPosition, <, lineStartPosition, +, lineLength, ), {, int, position, =, preferredBreakPosition, ;]
[preferredBreakPosition, >, lineStartPosition, &&, preferredBreakPosition, <, lineStartPosition, +, lineLength, ), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (]
[lineStartPosition, &&, preferredBreakPosition, <, lineStartPosition, +, lineLength, ), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,]
[<, lineStartPosition, +, lineLength, ), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;]
[+, lineLength, ), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =]
[), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;]
[int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;, reportLineCut, (]
[=, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,]
[=, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,]
[;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,, position, -]
[., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,]
[position, ,, '\n', ), ;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;]
[position, ,, '\n', ), ;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;]
[), ;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;]
[prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=]
[=, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (]
[=, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (]
[;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (, position, -]
[lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;]
[position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =]
[position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =]
[lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =, position, +]
[lineIndex, ++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =, position, +, 1, ;, }, else, {]
[+, 1, ;, }, else, {, startNewLine, (, ), ;, }, }, }, @, Override, void, notePreferredLineBreak, (, ), {]
[;, }, else, {, startNewLine, (, ), ;, }, }, }, @, Override, void, notePreferredLineBreak, (, ), {, preferredBreakPosition, =]
[;, }, else, {, startNewLine, (, ), ;, }, }, }, @, Override, void, notePreferredLineBreak, (, ), {, preferredBreakPosition, =]
[notePreferredLineBreak, (, ), {, preferredBreakPosition, =, code, ., length, (, ), ;, }, @, Override, void, endFile, (, ), {]
[notePreferredLineBreak, (, ), {, preferredBreakPosition, =, code, ., length, (, ), ;, }, @, Override, void, endFile, (, ), {]
[length, (, ), ;, }, @, Override, void, endFile, (, ), {, super, ., endFile, (, ), ;, if, (]
[(, ), ;, }, @, Override, void, endFile, (, ), {, super, ., endFile, (, ), ;, if, (, !]
[(, ), {, super, ., endFile, (, ), ;, if, (, !, preferLineBreakAtEndOfFile, ), {, return, ;, }, if, (]
[(, ), {, super, ., endFile, (, ), ;, if, (, !, preferLineBreakAtEndOfFile, ), {, return, ;, }, if, (]
[{, super, ., endFile, (, ), ;, if, (, !, preferLineBreakAtEndOfFile, ), {, return, ;, }, if, (, lineLength, >]
[{, super, ., endFile, (, ), ;, if, (, !, preferLineBreakAtEndOfFile, ), {, return, ;, }, if, (, lineLength, >]
[., endFile, (, ), ;, if, (, !, preferLineBreakAtEndOfFile, ), {, return, ;, }, if, (, lineLength, >, lineLengthThreshold, /]
[), ;, if, (, !, preferLineBreakAtEndOfFile, ), {, return, ;, }, if, (, lineLength, >, lineLengthThreshold, /, 2, ), {]
[if, (, !, preferLineBreakAtEndOfFile, ), {, return, ;, }, if, (, lineLength, >, lineLengthThreshold, /, 2, ), {, append, (]
[preferLineBreakAtEndOfFile, ), {, return, ;, }, if, (, lineLength, >, lineLengthThreshold, /, 2, ), {, append, (, ";", ), ;]
[lineLength, >, lineLengthThreshold, /, 2, ), {, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, if, (]
[lineLength, >, lineLengthThreshold, /, 2, ), {, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, if, (]
[lineLengthThreshold, /, 2, ), {, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition, >]
[), {, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition, >, 0, ), {]
[), {, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition, >, 0, ), {]
[";", ), ;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition, >, 0, ), {, code, ., setCharAt, (]
[;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition, >, 0, ), {, code, ., setCharAt, (, prevCutPosition, ,]
[), ;, }, else, if, (, prevCutPosition, >, 0, ), {, code, ., setCharAt, (, prevCutPosition, ,, ' ', ), ;]
[}, else, if, (, prevCutPosition, >, 0, ), {, code, ., setCharAt, (, prevCutPosition, ,, ' ', ), ;, lineStartPosition, =]
[if, (, prevCutPosition, >, 0, ), {, code, ., setCharAt, (, prevCutPosition, ,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;]
[prevCutPosition, >, 0, ), {, code, ., setCharAt, (, prevCutPosition, ,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =]
[prevCutPosition, >, 0, ), {, code, ., setCharAt, (, prevCutPosition, ,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =]
[prevCutPosition, >, 0, ), {, code, ., setCharAt, (, prevCutPosition, ,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =]
[., setCharAt, (, prevCutPosition, ,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -]
[(, prevCutPosition, ,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -, lineStartPosition, ;]
[,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (]
[), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,]
[), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,]
[lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +]
[prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,]
[=, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;]
[=, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;]
[length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;, lineIndex, --, ;]
[), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;, lineIndex, --, ;, prevCutPosition, =]
[lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;]
[reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition, =]
[lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition, =, 0, ;]
[prevCutPosition, +, 1, ,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition, =, 0, ;, append, (]
[,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition, =, 0, ;, append, (, ";", ), ;]
[;, }, else, {, }, }, }, static, class, Builder, {, private, final, Node, root, ;, private, CompilerOptions, options, =]
[Builder, {, private, final, Node, root, ;, private, CompilerOptions, options, =, new, CompilerOptions, (, ), ;, private, boolean, outputTypes, =]
[;, private, CompilerOptions, options, =, new, CompilerOptions, (, ), ;, private, boolean, outputTypes, =, false, ;, private, SourceMap, sourceMap, =]
[outputTypes, =, false, ;, private, SourceMap, sourceMap, =, null, ;, private, boolean, tagAsStrict, ;, Builder, (, Node, node, ), {]
[false, ;, private, SourceMap, sourceMap, =, null, ;, private, boolean, tagAsStrict, ;, Builder, (, Node, node, ), {, root, =]
[Builder, (, Node, node, ), {, root, =, node, ;, }, Builder, setCompilerOptions, (, CompilerOptions, options, ), {, try, {]
[Builder, (, Node, node, ), {, root, =, node, ;, }, Builder, setCompilerOptions, (, CompilerOptions, options, ), {, try, {]
[), {, root, =, node, ;, }, Builder, setCompilerOptions, (, CompilerOptions, options, ), {, try, {, this, ., options, =]
[=, node, ;, }, Builder, setCompilerOptions, (, CompilerOptions, options, ), {, try, {, this, ., options, =, (, CompilerOptions, )]
[=, node, ;, }, Builder, setCompilerOptions, (, CompilerOptions, options, ), {, try, {, this, ., options, =, (, CompilerOptions, )]
[., options, =, (, CompilerOptions, ), options, ., clone, (, ), ;, }, catch, (, CloneNotSupportedException, e, ), {, throw]
[., options, =, (, CompilerOptions, ), options, ., clone, (, ), ;, }, catch, (, CloneNotSupportedException, e, ), {, throw]
[CompilerOptions, ), options, ., clone, (, ), ;, }, catch, (, CloneNotSupportedException, e, ), {, throw, Throwables, ., propagate, (]
[(, ), ;, }, catch, (, CloneNotSupportedException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, return]
[throw, Throwables, ., propagate, (, e, ), ;, }, return, this, ;, }, Builder, setPrettyPrint, (, boolean, prettyPrint, ), {]
[throw, Throwables, ., propagate, (, e, ), ;, }, return, this, ;, }, Builder, setPrettyPrint, (, boolean, prettyPrint, ), {]
[(, e, ), ;, }, return, this, ;, }, Builder, setPrettyPrint, (, boolean, prettyPrint, ), {, options, ., prettyPrint, =]
[;, }, return, this, ;, }, Builder, setPrettyPrint, (, boolean, prettyPrint, ), {, options, ., prettyPrint, =, prettyPrint, ;, return]
[prettyPrint, ), {, options, ., prettyPrint, =, prettyPrint, ;, return, this, ;, }, Builder, setLineBreak, (, boolean, lineBreak, ), {]
[prettyPrint, ), {, options, ., prettyPrint, =, prettyPrint, ;, return, this, ;, }, Builder, setLineBreak, (, boolean, lineBreak, ), {]
[., prettyPrint, =, prettyPrint, ;, return, this, ;, }, Builder, setLineBreak, (, boolean, lineBreak, ), {, options, ., lineBreak, =]
[prettyPrint, ;, return, this, ;, }, Builder, setLineBreak, (, boolean, lineBreak, ), {, options, ., lineBreak, =, lineBreak, ;, return]
[lineBreak, ), {, options, ., lineBreak, =, lineBreak, ;, return, this, ;, }, Builder, setOutputTypes, (, boolean, outputTypes, ), {]
[lineBreak, ), {, options, ., lineBreak, =, lineBreak, ;, return, this, ;, }, Builder, setOutputTypes, (, boolean, outputTypes, ), {]
[., lineBreak, =, lineBreak, ;, return, this, ;, }, Builder, setOutputTypes, (, boolean, outputTypes, ), {, this, ., outputTypes, =]
[lineBreak, ;, return, this, ;, }, Builder, setOutputTypes, (, boolean, outputTypes, ), {, this, ., outputTypes, =, outputTypes, ;, return]
[outputTypes, ), {, this, ., outputTypes, =, outputTypes, ;, return, this, ;, }, Builder, setSourceMap, (, SourceMap, sourceMap, ), {]
[outputTypes, ), {, this, ., outputTypes, =, outputTypes, ;, return, this, ;, }, Builder, setSourceMap, (, SourceMap, sourceMap, ), {]
[., outputTypes, =, outputTypes, ;, return, this, ;, }, Builder, setSourceMap, (, SourceMap, sourceMap, ), {, this, ., sourceMap, =]
[outputTypes, ;, return, this, ;, }, Builder, setSourceMap, (, SourceMap, sourceMap, ), {, this, ., sourceMap, =, sourceMap, ;, return]
[sourceMap, ), {, this, ., sourceMap, =, sourceMap, ;, return, this, ;, }, Builder, setTagAsStrict, (, boolean, tagAsStrict, ), {]
[sourceMap, ), {, this, ., sourceMap, =, sourceMap, ;, return, this, ;, }, Builder, setTagAsStrict, (, boolean, tagAsStrict, ), {]
[., sourceMap, =, sourceMap, ;, return, this, ;, }, Builder, setTagAsStrict, (, boolean, tagAsStrict, ), {, this, ., tagAsStrict, =]
[sourceMap, ;, return, this, ;, }, Builder, setTagAsStrict, (, boolean, tagAsStrict, ), {, this, ., tagAsStrict, =, tagAsStrict, ;, return]
[tagAsStrict, ), {, this, ., tagAsStrict, =, tagAsStrict, ;, return, this, ;, }, String, build, (, ), {, if, (]
[tagAsStrict, ), {, this, ., tagAsStrict, =, tagAsStrict, ;, return, this, ;, }, String, build, (, ), {, if, (]
[{, this, ., tagAsStrict, =, tagAsStrict, ;, return, this, ;, }, String, build, (, ), {, if, (, root, ==]
[=, tagAsStrict, ;, return, this, ;, }, String, build, (, ), {, if, (, root, ==, null, ), {, throw]
[return, this, ;, }, String, build, (, ), {, if, (, root, ==, null, ), {, throw, new, IllegalStateException, (]
[), {, if, (, root, ==, null, ), {, throw, new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =]
[), {, if, (, root, ==, null, ), {, throw, new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =]
[if, (, root, ==, null, ), {, throw, new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =, outputTypes, ?]
[if, (, root, ==, null, ), {, throw, new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =, outputTypes, ?]
[null, ), {, throw, new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED, :]
[null, ), {, throw, new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED, :]
[null, ), {, throw, new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED, :]
[new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED, :, options, ., prettyPrint, ?]
[new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED, :, options, ., prettyPrint, ?]
[), ;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED, :, options, ., prettyPrint, ?, Format, ., PRETTY, :]
[), ;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED, :, options, ., prettyPrint, ?, Format, ., PRETTY, :]
[=, outputTypes, ?, Format, ., TYPED, :, options, ., prettyPrint, ?, Format, ., PRETTY, :, Format, ., COMPACT, ;, return]
[?, Format, ., TYPED, :, options, ., prettyPrint, ?, Format, ., PRETTY, :, Format, ., COMPACT, ;, return, toSource, (]
[., TYPED, :, options, ., prettyPrint, ?, Format, ., PRETTY, :, Format, ., COMPACT, ;, return, toSource, (, root, ,]
[:, options, ., prettyPrint, ?, Format, ., PRETTY, :, Format, ., COMPACT, ;, return, toSource, (, root, ,, outputFormat, ,]
[., prettyPrint, ?, Format, ., PRETTY, :, Format, ., COMPACT, ;, return, toSource, (, root, ,, outputFormat, ,, options, ,]
[?, Format, ., PRETTY, :, Format, ., COMPACT, ;, return, toSource, (, root, ,, outputFormat, ,, options, ,, sourceMap, ,]
[static, String, toSource, (, Node, root, ,, Format, outputFormat, ,, CompilerOptions, options, ,, SourceMap, sourceMap, ,, boolean, tagAsStrict, ), {]
[static, String, toSource, (, Node, root, ,, Format, outputFormat, ,, CompilerOptions, options, ,, SourceMap, sourceMap, ,, boolean, tagAsStrict, ), {]
[Node, root, ,, Format, outputFormat, ,, CompilerOptions, options, ,, SourceMap, sourceMap, ,, boolean, tagAsStrict, ), {, Preconditions, ., checkState, (]
[Node, root, ,, Format, outputFormat, ,, CompilerOptions, options, ,, SourceMap, sourceMap, ,, boolean, tagAsStrict, ), {, Preconditions, ., checkState, (]
[Node, root, ,, Format, outputFormat, ,, CompilerOptions, options, ,, SourceMap, sourceMap, ,, boolean, tagAsStrict, ), {, Preconditions, ., checkState, (]
[outputFormat, ,, CompilerOptions, options, ,, SourceMap, sourceMap, ,, boolean, tagAsStrict, ), {, Preconditions, ., checkState, (, options, ., sourceMapDetailLevel, !=]
[sourceMap, ,, boolean, tagAsStrict, ), {, Preconditions, ., checkState, (, options, ., sourceMapDetailLevel, !=, null, ), ;, boolean, createSourceMap, =]
[,, boolean, tagAsStrict, ), {, Preconditions, ., checkState, (, options, ., sourceMapDetailLevel, !=, null, ), ;, boolean, createSourceMap, =, (]
[,, boolean, tagAsStrict, ), {, Preconditions, ., checkState, (, options, ., sourceMapDetailLevel, !=, null, ), ;, boolean, createSourceMap, =, (]
[tagAsStrict, ), {, Preconditions, ., checkState, (, options, ., sourceMapDetailLevel, !=, null, ), ;, boolean, createSourceMap, =, (, sourceMap, !=]
[(, options, ., sourceMapDetailLevel, !=, null, ), ;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =]
[(, options, ., sourceMapDetailLevel, !=, null, ), ;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =]
[(, options, ., sourceMapDetailLevel, !=, null, ), ;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =]
[., sourceMapDetailLevel, !=, null, ), ;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==]
[., sourceMapDetailLevel, !=, null, ), ;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==]
[), ;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?]
[createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?, new, CompactCodePrinter, (]
[createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?, new, CompactCodePrinter, (]
[!=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,]
[!=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,]
[MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,]
[MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,]
[==, Format, ., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,]
[., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,]
[., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,]
[(, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :]
[lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (]
[lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (]
[preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,]
[options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,]
[options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,]
[sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =]
[sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =]
[sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =]
[:, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat, ==]
[:, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat, ==]
[options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?]
[,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (]
[,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,]
[sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,, options, ), :]
[CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator, (]
[=, outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator, (, mcp, ,]
[TYPED, ?, new, TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator, (, mcp, ,, options, ), ;, if, (]
[TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator, (, mcp, ,, options, ), ;, if, (, tagAsStrict, ), {]
[TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator, (, mcp, ,, options, ), ;, if, (, tagAsStrict, ), {]
[new, CodeGenerator, (, mcp, ,, options, ), ;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict, (, ), ;, }]
[new, CodeGenerator, (, mcp, ,, options, ), ;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict, (, ), ;, }]
[,, options, ), ;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict, (, ), ;, }, cg, ., add, (]
[;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict, (, ), ;, }, cg, ., add, (, root, ), ;]
[;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict, (, ), ;, }, cg, ., add, (, root, ), ;]
[(, ), ;, }, cg, ., add, (, root, ), ;, mcp, ., endFile, (, ), ;, String, code, =]
[(, ), ;, }, cg, ., add, (, root, ), ;, mcp, ., endFile, (, ), ;, String, code, =]
[root, ), ;, mcp, ., endFile, (, ), ;, String, code, =, mcp, ., getCode, (, ), ;, if, (]
[mcp, ., endFile, (, ), ;, String, code, =, mcp, ., getCode, (, ), ;, if, (, createSourceMap, ), {]
[mcp, ., endFile, (, ), ;, String, code, =, mcp, ., getCode, (, ), ;, if, (, createSourceMap, ), {]
[), ;, String, code, =, mcp, ., getCode, (, ), ;, if, (, createSourceMap, ), {, mcp, ., generateSourceMap, (]
[mcp, ., getCode, (, ), ;, if, (, createSourceMap, ), {, mcp, ., generateSourceMap, (, sourceMap, ), ;, }, return]
