[math3, ., stat, ., descriptive, ., moment, ., SecondMoment, ;, public, class, OLSMultipleLinearRegression, extends, AbstractMultipleLinearRegression, {, private, QRDecomposition, qr, =]
[;, public, void, newSampleData, (, double, [, ], y, ,, double, [, ], [, ], x, ), throws, MathIllegalArgumentException, {]
[void, newSampleData, (, double, [, ], y, ,, double, [, ], [, ], x, ), throws, MathIllegalArgumentException, {, validateSampleData, (]
[(, double, [, ], y, ,, double, [, ], [, ], x, ), throws, MathIllegalArgumentException, {, validateSampleData, (, x, ,]
[], y, ,, double, [, ], [, ], x, ), throws, MathIllegalArgumentException, {, validateSampleData, (, x, ,, y, ), ;]
[,, double, [, ], [, ], x, ), throws, MathIllegalArgumentException, {, validateSampleData, (, x, ,, y, ), ;, newYSampleData, (]
[], [, ], x, ), throws, MathIllegalArgumentException, {, validateSampleData, (, x, ,, y, ), ;, newYSampleData, (, y, ), ;]
[], x, ), throws, MathIllegalArgumentException, {, validateSampleData, (, x, ,, y, ), ;, newYSampleData, (, y, ), ;, newXSampleData, (]
[;, }, @, Override, public, void, newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars, ), {]
[;, }, @, Override, public, void, newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars, ), {]
[public, void, newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars, ), {, super, ., newSampleData, (]
[newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars, ), {, super, ., newSampleData, (, data, ,]
[double, [, ], data, ,, int, nobs, ,, int, nvars, ), {, super, ., newSampleData, (, data, ,, nobs, ,]
[data, ,, int, nobs, ,, int, nvars, ), {, super, ., newSampleData, (, data, ,, nobs, ,, nvars, ), ;]
[int, nobs, ,, int, nvars, ), {, super, ., newSampleData, (, data, ,, nobs, ,, nvars, ), ;, qr, =]
[int, nvars, ), {, super, ., newSampleData, (, data, ,, nobs, ,, nvars, ), ;, qr, =, new, QRDecomposition, (]
[qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, public, RealMatrix, calculateHat, (, ), {, RealMatrix, Q, =]
[qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, public, RealMatrix, calculateHat, (, ), {, RealMatrix, Q, =]
[}, public, RealMatrix, calculateHat, (, ), {, RealMatrix, Q, =, qr, ., getQ, (, ), ;, final, int, p, =]
[}, public, RealMatrix, calculateHat, (, ), {, RealMatrix, Q, =, qr, ., getQ, (, ), ;, final, int, p, =]
[}, public, RealMatrix, calculateHat, (, ), {, RealMatrix, Q, =, qr, ., getQ, (, ), ;, final, int, p, =]
[), ;, final, int, p, =, qr, ., getR, (, ), ., getColumnDimension, (, ), ;, final, int, n, =]
[), ;, final, int, p, =, qr, ., getR, (, ), ., getColumnDimension, (, ), ;, final, int, n, =]
[(, ), ., getColumnDimension, (, ), ;, final, int, n, =, Q, ., getColumnDimension, (, ), ;, Array2DRowRealMatrix, augI, =]
[getColumnDimension, (, ), ;, final, int, n, =, Q, ., getColumnDimension, (, ), ;, Array2DRowRealMatrix, augI, =, new, Array2DRowRealMatrix, (]
[), ;, final, int, n, =, Q, ., getColumnDimension, (, ), ;, Array2DRowRealMatrix, augI, =, new, Array2DRowRealMatrix, (, n, ,]
[), ;, Array2DRowRealMatrix, augI, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;, double, [, ], [, ], augIData, =]
[), ;, Array2DRowRealMatrix, augI, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;, double, [, ], [, ], augIData, =]
[), ;, double, [, ], [, ], augIData, =, augI, ., getDataRef, (, ), ;, for, (, int, i, =]
[double, [, ], [, ], augIData, =, augI, ., getDataRef, (, ), ;, for, (, int, i, =, 0, ;]
[double, [, ], [, ], augIData, =, augI, ., getDataRef, (, ), ;, for, (, int, i, =, 0, ;]
[], [, ], augIData, =, augI, ., getDataRef, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[], augIData, =, augI, ., getDataRef, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], augIData, =, augI, ., getDataRef, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, if, (]
[++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, if, (]
[++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, if, (]
[{, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, if, (, i, ==]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, if, (, i, ==, j, &&]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, if, (, i, ==, j, &&]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, if, (, i, ==, j, &&, i, <]
[;, j, <, n, ;, j, ++, ), {, if, (, i, ==, j, &&, i, <, p, ), {]
[;, j, <, n, ;, j, ++, ), {, if, (, i, ==, j, &&, i, <, p, ), {]
[;, j, <, n, ;, j, ++, ), {, if, (, i, ==, j, &&, i, <, p, ), {]
[<, n, ;, j, ++, ), {, if, (, i, ==, j, &&, i, <, p, ), {, augIData, []
[j, ++, ), {, if, (, i, ==, j, &&, i, <, p, ), {, augIData, [, i, ], []
[{, if, (, i, ==, j, &&, i, <, p, ), {, augIData, [, i, ], [, j, ], =]
[j, &&, i, <, p, ), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else, {]
[j, &&, i, <, p, ), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else, {]
[j, &&, i, <, p, ), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else, {]
[i, <, p, ), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else, {, augIData, []
[), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else, {, augIData, [, i, ], []
[[, i, ], [, j, ], =, 1d, ;, }, else, {, augIData, [, i, ], [, j, ], =]
[=, 1d, ;, }, else, {, augIData, [, i, ], [, j, ], =, 0d, ;, }, }, }, return]
[=, 1d, ;, }, else, {, augIData, [, i, ], [, j, ], =, 0d, ;, }, }, }, return]
[=, 1d, ;, }, else, {, augIData, [, i, ], [, j, ], =, 0d, ;, }, }, }, return]
[else, {, augIData, [, i, ], [, j, ], =, 0d, ;, }, }, }, return, Q, ., multiply, (]
[], [, j, ], =, 0d, ;, }, }, }, return, Q, ., multiply, (, augI, ), ., multiply, (]
[], [, j, ], =, 0d, ;, }, }, }, return, Q, ., multiply, (, augI, ), ., multiply, (]
[multiply, (, Q, ., transpose, (, ), ), ;, }, public, double, calculateTotalSumOfSquares, (, ), throws, MathIllegalArgumentException, {, if, (]
[), ), ;, }, public, double, calculateTotalSumOfSquares, (, ), throws, MathIllegalArgumentException, {, if, (, isNoIntercept, (, ), ), {, return]
[), ), ;, }, public, double, calculateTotalSumOfSquares, (, ), throws, MathIllegalArgumentException, {, if, (, isNoIntercept, (, ), ), {, return]
[public, double, calculateTotalSumOfSquares, (, ), throws, MathIllegalArgumentException, {, if, (, isNoIntercept, (, ), ), {, return, StatUtils, ., sumSq, (]
[public, double, calculateTotalSumOfSquares, (, ), throws, MathIllegalArgumentException, {, if, (, isNoIntercept, (, ), ), {, return, StatUtils, ., sumSq, (]
[), {, return, StatUtils, ., sumSq, (, getY, (, ), ., toArray, (, ), ), ;, }, else, {, return]
[), {, return, StatUtils, ., sumSq, (, getY, (, ), ., toArray, (, ), ), ;, }, else, {, return]
[getY, (, ), ., toArray, (, ), ), ;, }, else, {, return, new, SecondMoment, (, ), ., evaluate, (]
[getY, (, ), ., toArray, (, ), ), ;, }, else, {, return, new, SecondMoment, (, ), ., evaluate, (]
[(, ), ., toArray, (, ), ), ;, }, }, public, double, calculateResidualSumOfSquares, (, ), {, final, RealVector, residuals, =]
[), ), ;, }, }, public, double, calculateResidualSumOfSquares, (, ), {, final, RealVector, residuals, =, calculateResiduals, (, ), ;, return]
[), ), ;, }, }, public, double, calculateResidualSumOfSquares, (, ), {, final, RealVector, residuals, =, calculateResiduals, (, ), ;, return]
[}, public, double, calculateResidualSumOfSquares, (, ), {, final, RealVector, residuals, =, calculateResiduals, (, ), ;, return, residuals, ., dotProduct, (]
[), ;, return, residuals, ., dotProduct, (, residuals, ), ;, }, public, double, calculateRSquared, (, ), throws, MathIllegalArgumentException, {, return]
[), ;, return, residuals, ., dotProduct, (, residuals, ), ;, }, public, double, calculateRSquared, (, ), throws, MathIllegalArgumentException, {, return]
[return, residuals, ., dotProduct, (, residuals, ), ;, }, public, double, calculateRSquared, (, ), throws, MathIllegalArgumentException, {, return, 1, -]
[return, residuals, ., dotProduct, (, residuals, ), ;, }, public, double, calculateRSquared, (, ), throws, MathIllegalArgumentException, {, return, 1, -]
[(, residuals, ), ;, }, public, double, calculateRSquared, (, ), throws, MathIllegalArgumentException, {, return, 1, -, calculateResidualSumOfSquares, (, ), /]
[(, ), /, calculateTotalSumOfSquares, (, ), ;, }, public, double, calculateAdjustedRSquared, (, ), throws, MathIllegalArgumentException, {, final, double, n, =]
[(, ), /, calculateTotalSumOfSquares, (, ), ;, }, public, double, calculateAdjustedRSquared, (, ), throws, MathIllegalArgumentException, {, final, double, n, =]
[calculateAdjustedRSquared, (, ), throws, MathIllegalArgumentException, {, final, double, n, =, getX, (, ), ., getRowDimension, (, ), ;, if, (]
[final, double, n, =, getX, (, ), ., getRowDimension, (, ), ;, if, (, isNoIntercept, (, ), ), {, return]
[final, double, n, =, getX, (, ), ., getRowDimension, (, ), ;, if, (, isNoIntercept, (, ), ), {, return]
[n, =, getX, (, ), ., getRowDimension, (, ), ;, if, (, isNoIntercept, (, ), ), {, return, 1, -]
[n, =, getX, (, ), ., getRowDimension, (, ), ;, if, (, isNoIntercept, (, ), ), {, return, 1, -]
[=, getX, (, ), ., getRowDimension, (, ), ;, if, (, isNoIntercept, (, ), ), {, return, 1, -, (]
[=, getX, (, ), ., getRowDimension, (, ), ;, if, (, isNoIntercept, (, ), ), {, return, 1, -, (]
[(, ), ., getRowDimension, (, ), ;, if, (, isNoIntercept, (, ), ), {, return, 1, -, (, 1, -]
[), ;, if, (, isNoIntercept, (, ), ), {, return, 1, -, (, 1, -, calculateRSquared, (, ), ), *]
[;, if, (, isNoIntercept, (, ), ), {, return, 1, -, (, 1, -, calculateRSquared, (, ), ), *, (]
[;, if, (, isNoIntercept, (, ), ), {, return, 1, -, (, 1, -, calculateRSquared, (, ), ), *, (]
[(, isNoIntercept, (, ), ), {, return, 1, -, (, 1, -, calculateRSquared, (, ), ), *, (, n, /]
[isNoIntercept, (, ), ), {, return, 1, -, (, 1, -, calculateRSquared, (, ), ), *, (, n, /, (]
[isNoIntercept, (, ), ), {, return, 1, -, (, 1, -, calculateRSquared, (, ), ), *, (, n, /, (]
[), ), {, return, 1, -, (, 1, -, calculateRSquared, (, ), ), *, (, n, /, (, n, -]
[), ), {, return, 1, -, (, 1, -, calculateRSquared, (, ), ), *, (, n, /, (, n, -]
[(, n, /, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, else, {, return]
[(, n, /, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, else, {, return]
[/, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, else, {, return, 1, -]
[/, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, else, {, return, 1, -]
[(, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, else, {, return, 1, -, (]
[(, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, else, {, return, 1, -, (]
[(, ), ., getColumnDimension, (, ), ), ), ;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *]
[), ., getColumnDimension, (, ), ), ), ;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (]
[), ., getColumnDimension, (, ), ), ), ;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (]
[getColumnDimension, (, ), ), ), ;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -]
[), ;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /]
[;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /, (]
[;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /, (]
[return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /, (, calculateTotalSumOfSquares, (, ), *]
[1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /, (, calculateTotalSumOfSquares, (, ), *, (]
[1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /, (, calculateTotalSumOfSquares, (, ), *, (]
[(, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /, (, calculateTotalSumOfSquares, (, ), *, (, n, -]
[(, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /, (, calculateTotalSumOfSquares, (, ), *, (, n, -]
[), ), ), ;, }, }, @, Override, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {]
[), ), ), ;, }, }, @, Override, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {]
[}, }, @, Override, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, super, ., newXSampleData, (]
[Override, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, super, ., newXSampleData, (, x, ), ;]
[void, newXSampleData, (, double, [, ], [, ], x, ), {, super, ., newXSampleData, (, x, ), ;, qr, =]
[double, [, ], [, ], x, ), {, super, ., newXSampleData, (, x, ), ;, qr, =, new, QRDecomposition, (]
[qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, @, Override, protected, RealVector, calculateBeta, (, ), {, return]
[qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, @, Override, protected, RealVector, calculateBeta, (, ), {, return]
[qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, @, Override, protected, RealVector, calculateBeta, (, ), {, return]
[), ;, }, @, Override, protected, RealVector, calculateBeta, (, ), {, return, qr, ., getSolver, (, ), ., solve, (]
[., solve, (, getY, (, ), ), ;, }, @, Override, protected, RealMatrix, calculateBetaVariance, (, ), {, int, p, =]
[., solve, (, getY, (, ), ), ;, }, @, Override, protected, RealMatrix, calculateBetaVariance, (, ), {, int, p, =]
[protected, RealMatrix, calculateBetaVariance, (, ), {, int, p, =, getX, (, ), ., getColumnDimension, (, ), ;, RealMatrix, Raug, =]
[protected, RealMatrix, calculateBetaVariance, (, ), {, int, p, =, getX, (, ), ., getColumnDimension, (, ), ;, RealMatrix, Raug, =]
[protected, RealMatrix, calculateBetaVariance, (, ), {, int, p, =, getX, (, ), ., getColumnDimension, (, ), ;, RealMatrix, Raug, =]
[=, getX, (, ), ., getColumnDimension, (, ), ;, RealMatrix, Raug, =, qr, ., getR, (, ), ., getSubMatrix, (]
[(, ), ., getColumnDimension, (, ), ;, RealMatrix, Raug, =, qr, ., getR, (, ), ., getSubMatrix, (, 0, ,]
[(, ), ., getColumnDimension, (, ), ;, RealMatrix, Raug, =, qr, ., getR, (, ), ., getSubMatrix, (, 0, ,]
[., getColumnDimension, (, ), ;, RealMatrix, Raug, =, qr, ., getR, (, ), ., getSubMatrix, (, 0, ,, p, -]
[(, ), ;, RealMatrix, Raug, =, qr, ., getR, (, ), ., getSubMatrix, (, 0, ,, p, -, 1, ,]
[;, RealMatrix, Raug, =, qr, ., getR, (, ), ., getSubMatrix, (, 0, ,, p, -, 1, ,, 0, ,]
[;, RealMatrix, Raug, =, qr, ., getR, (, ), ., getSubMatrix, (, 0, ,, p, -, 1, ,, 0, ,]
[Raug, =, qr, ., getR, (, ), ., getSubMatrix, (, 0, ,, p, -, 1, ,, 0, ,, p, -]
[), ., getSubMatrix, (, 0, ,, p, -, 1, ,, 0, ,, p, -, 1, ), ;, RealMatrix, Rinv, =]
[), ., getSubMatrix, (, 0, ,, p, -, 1, ,, 0, ,, p, -, 1, ), ;, RealMatrix, Rinv, =]
[), ., getSubMatrix, (, 0, ,, p, -, 1, ,, 0, ,, p, -, 1, ), ;, RealMatrix, Rinv, =]
[(, 0, ,, p, -, 1, ,, 0, ,, p, -, 1, ), ;, RealMatrix, Rinv, =, new, LUDecomposition, (]
[), ;, RealMatrix, Rinv, =, new, LUDecomposition, (, Raug, ), ., getSolver, (, ), ., getInverse, (, ), ;, return]
[), ;, RealMatrix, Rinv, =, new, LUDecomposition, (, Raug, ), ., getSolver, (, ), ., getInverse, (, ), ;, return]
[=, new, LUDecomposition, (, Raug, ), ., getSolver, (, ), ., getInverse, (, ), ;, return, Rinv, ., multiply, (]
[=, new, LUDecomposition, (, Raug, ), ., getSolver, (, ), ., getInverse, (, ), ;, return, Rinv, ., multiply, (]
