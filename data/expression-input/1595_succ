[;, private, final, Deque, <, BasicBlock, >, blockStack, =, new, ArrayDeque, <, BasicBlock, >, (, ), ;, private, final, Behavior]
[., newHashMap, (, ), ;, private, final, Deque, <, BasicBlock, >, blockStack, =, new, ArrayDeque, <, BasicBlock, >, (, )]
[;, private, final, Behavior, behavior, ;, private, final, AbstractCompiler, compiler, ;, private, final, Predicate, <, Var, >, varFilter, ;, ReferenceCollectingCallback]
[,, behavior, ,, Predicates, ., <, Var, >, alwaysTrue, (, ), ), ;, }, ReferenceCollectingCallback, (, AbstractCompiler, compiler, ,, Behavior]
[,, Predicates, ., <, Var, >, alwaysTrue, (, ), ), ;, }, ReferenceCollectingCallback, (, AbstractCompiler, compiler, ,, Behavior, behavior, ,]
[), ;, }, ReferenceCollectingCallback, (, AbstractCompiler, compiler, ,, Behavior, behavior, ,, Predicate, <, Var, >, varFilter, ), {, this, .]
[., <, Var, >, alwaysTrue, (, ), ), ;, }, ReferenceCollectingCallback, (, AbstractCompiler, compiler, ,, Behavior, behavior, ,, Predicate, <]
[=, compiler, ;, this, ., behavior, =, behavior, ;, this, ., varFilter, =, varFilter, ;, }, @, Override, public, void]
[., compiler, =, compiler, ;, this, ., behavior, =, behavior, ;, this, ., varFilter, =, varFilter, ;, }, @, Override]
[;, this, ., behavior, =, behavior, ;, this, ., varFilter, =, varFilter, ;, }, @, Override, public, void, process, (]
[=, behavior, ;, this, ., varFilter, =, varFilter, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., behavior, =, behavior, ;, this, ., varFilter, =, varFilter, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., varFilter, =, varFilter, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, varFilter, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots]
[., varFilter, =, varFilter, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler]
[;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (, compiler]
[., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, @, Override]
[,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, @, Override, public, void, hotSwapScript, (]
[,, this, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, .]
[., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot]
[,, root, ), ,, this, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, )]
[), ,, this, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal]
[), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (]
[;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return, referenceMap, ., keySet, (, ), ;]
[., traverse, (, compiler, ,, scriptRoot, ,, this, ), ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (]
[,, scriptRoot, ,, this, ), ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return, referenceMap]
[,, this, ), ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return, referenceMap, ., keySet]
[), ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return, referenceMap, ., keySet, (, )]
[;, }, @, Override, public, Scope, getScope, (, Var, var, ), {, return, var, ., scope, ;, }, @, Override]
[., keySet, (, ), ;, }, @, Override, public, Scope, getScope, (, Var, var, ), {, return, var, ., scope]
[;, }, @, Override, public, ReferenceCollection, getReferences, (, Var, v, ), {, return, referenceMap, ., get, (, v, ), ;]
[., scope, ;, }, @, Override, public, ReferenceCollection, getReferences, (, Var, v, ), {, return, referenceMap, ., get, (, v]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., get, (, v, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), {, Var, v, ;, if, (, n, ., getString, (, ), ., equals, (, "arguments", ), ), {, v]
[., isName, (, ), ), {, Var, v, ;, if, (, n, ., getString, (, ), ., equals, (, "arguments"]
[), {, v, =, t, ., getScope, (, ), ., getArgumentsVar, (, ), ;, }, else, {, v, =, t]
[., equals, (, "arguments", ), ), {, v, =, t, ., getScope, (, ), ., getArgumentsVar, (, ), ;, }]
[., getString, (, ), ., equals, (, "arguments", ), ), {, v, =, t, ., getScope, (, ), ., getArgumentsVar]
[), ), {, v, =, t, ., getScope, (, ), ., getArgumentsVar, (, ), ;, }, else, {, v, =]
[=, t, ., getScope, (, ), ., getArgumentsVar, (, ), ;, }, else, {, v, =, t, ., getScope, (]
[;, }, else, {, v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), )]
[., getArgumentsVar, (, ), ;, }, else, {, v, =, t, ., getScope, (, ), ., getVar, (, n, .]
[., getScope, (, ), ., getArgumentsVar, (, ), ;, }, else, {, v, =, t, ., getScope, (, ), .]
[=, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, }, if, (, v]
[;, }, if, (, v, !=, null, &&, varFilter, ., apply, (, v, ), ), {, addReference, (, t, ,]
[., getVar, (, n, ., getString, (, ), ), ;, }, if, (, v, !=, null, &&, varFilter, ., apply]
[., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, }, if, (, v, !=, null]
[), ;, }, if, (, v, !=, null, &&, varFilter, ., apply, (, v, ), ), {, addReference, (, t]
[., getString, (, ), ), ;, }, if, (, v, !=, null, &&, varFilter, ., apply, (, v, ), )]
[), {, addReference, (, t, ,, v, ,, new, Reference, (, n, ,, t, ,, blockStack, ., peek, (, )]
[&&, varFilter, ., apply, (, v, ), ), {, addReference, (, t, ,, v, ,, new, Reference, (, n, ,]
[!=, null, &&, varFilter, ., apply, (, v, ), ), {, addReference, (, t, ,, v, ,, new, Reference, (]
[&&, varFilter, ., apply, (, v, ), ), {, addReference, (, t, ,, v, ,, new, Reference, (, n, ,]
[), {, addReference, (, t, ,, v, ,, new, Reference, (, n, ,, t, ,, blockStack, ., peek, (, )]
[., apply, (, v, ), ), {, addReference, (, t, ,, v, ,, new, Reference, (, n, ,, t, ,]
[), ), {, addReference, (, t, ,, v, ,, new, Reference, (, n, ,, t, ,, blockStack, ., peek, (]
[;, }, }, if, (, isBlockBoundary, (, n, ,, parent, ), ), {, blockStack, ., pop, (, ), ;, }]
[,, v, ,, new, Reference, (, n, ,, t, ,, blockStack, ., peek, (, ), ), ), ;, }, }]
[,, new, Reference, (, n, ,, t, ,, blockStack, ., peek, (, ), ), ), ;, }, }, if, (]
[), ;, }, }, if, (, isBlockBoundary, (, n, ,, parent, ), ), {, blockStack, ., pop, (, ), ;]
[,, t, ,, blockStack, ., peek, (, ), ), ), ;, }, }, if, (, isBlockBoundary, (, n, ,, parent]
[,, blockStack, ., peek, (, ), ), ), ;, }, }, if, (, isBlockBoundary, (, n, ,, parent, ), )]
[), ), ;, }, }, if, (, isBlockBoundary, (, n, ,, parent, ), ), {, blockStack, ., pop, (, )]
[., peek, (, ), ), ), ;, }, }, if, (, isBlockBoundary, (, n, ,, parent, ), ), {, blockStack]
[), {, blockStack, ., pop, (, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[,, parent, ), ), {, blockStack, ., pop, (, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal]
[), ), {, blockStack, ., pop, (, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, )]
[;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =, t, ., getScope, (]
[., pop, (, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =]
[;, BasicBlock, parent, =, blockStack, ., isEmpty, (, ), ?, null, :, blockStack, ., peek, (, ), ;, blockStack, .]
[., getRootNode, (, ), ;, BasicBlock, parent, =, blockStack, ., isEmpty, (, ), ?, null, :, blockStack, ., peek, (]
[., getScope, (, ), ., getRootNode, (, ), ;, BasicBlock, parent, =, blockStack, ., isEmpty, (, ), ?, null, :]
[;, blockStack, ., push, (, new, BasicBlock, (, parent, ,, n, ), ), ;, }, @, Override, public, void, exitScope]
[?, null, :, blockStack, ., peek, (, ), ;, blockStack, ., push, (, new, BasicBlock, (, parent, ,, n, )]
[., isEmpty, (, ), ?, null, :, blockStack, ., peek, (, ), ;, blockStack, ., push, (, new, BasicBlock, (]
[:, blockStack, ., peek, (, ), ;, blockStack, ., push, (, new, BasicBlock, (, parent, ,, n, ), ), ;]
[;, blockStack, ., push, (, new, BasicBlock, (, parent, ,, n, ), ), ;, }, @, Override, public, void, exitScope]
[., peek, (, ), ;, blockStack, ., push, (, new, BasicBlock, (, parent, ,, n, ), ), ;, }, @]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, blockStack, ., pop, (, ), ;, if, (]
[., push, (, new, BasicBlock, (, parent, ,, n, ), ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal]
[), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, blockStack, ., pop, (, ), ;, if]
[,, n, ), ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, blockStack, ., pop, (]
[), ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, blockStack, ., pop, (, ), ;]
[;, if, (, t, ., getScope, (, ), ., isGlobal, (, ), ), {, compiler, ., updateGlobalVarReferences, (, referenceMap, ,]
[., pop, (, ), ;, if, (, t, ., getScope, (, ), ., isGlobal, (, ), ), {, compiler, .]
[), {, compiler, ., updateGlobalVarReferences, (, referenceMap, ,, t, ., getScopeRoot, (, ), ), ;, behavior, ., afterExitScope, (, t]
[., isGlobal, (, ), ), {, compiler, ., updateGlobalVarReferences, (, referenceMap, ,, t, ., getScopeRoot, (, ), ), ;, behavior]
[., getScope, (, ), ., isGlobal, (, ), ), {, compiler, ., updateGlobalVarReferences, (, referenceMap, ,, t, ., getScopeRoot, (]
[;, behavior, ., afterExitScope, (, t, ,, compiler, ., getGlobalVarReferences, (, ), ), ;, }, else, {, behavior, ., afterExitScope]
[., updateGlobalVarReferences, (, referenceMap, ,, t, ., getScopeRoot, (, ), ), ;, behavior, ., afterExitScope, (, t, ,, compiler, .]
[,, t, ., getScopeRoot, (, ), ), ;, behavior, ., afterExitScope, (, t, ,, compiler, ., getGlobalVarReferences, (, ), )]
[), ;, behavior, ., afterExitScope, (, t, ,, compiler, ., getGlobalVarReferences, (, ), ), ;, }, else, {, behavior, .]
[., getScopeRoot, (, ), ), ;, behavior, ., afterExitScope, (, t, ,, compiler, ., getGlobalVarReferences, (, ), ), ;, }]
[;, }, else, {, behavior, ., afterExitScope, (, t, ,, new, ReferenceMapWrapper, (, referenceMap, ), ), ;, }, }, @]
[., afterExitScope, (, t, ,, compiler, ., getGlobalVarReferences, (, ), ), ;, }, else, {, behavior, ., afterExitScope, (, t]
[,, compiler, ., getGlobalVarReferences, (, ), ), ;, }, else, {, behavior, ., afterExitScope, (, t, ,, new, ReferenceMapWrapper, (]
[), ;, }, else, {, behavior, ., afterExitScope, (, t, ,, new, ReferenceMapWrapper, (, referenceMap, ), ), ;, }, }]
[., getGlobalVarReferences, (, ), ), ;, }, else, {, behavior, ., afterExitScope, (, t, ,, new, ReferenceMapWrapper, (, referenceMap, )]
[;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, if]
[., afterExitScope, (, t, ,, new, ReferenceMapWrapper, (, referenceMap, ), ), ;, }, }, @, Override, public, boolean, shouldTraverse, (]
[,, new, ReferenceMapWrapper, (, referenceMap, ), ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node]
[), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {]
[), ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, )]
[), {, blockStack, ., push, (, new, BasicBlock, (, blockStack, ., peek, (, ), ,, n, ), ), ;, }]
[,, parent, ), ), {, blockStack, ., push, (, new, BasicBlock, (, blockStack, ., peek, (, ), ,, n, )]
[), ), {, blockStack, ., push, (, new, BasicBlock, (, blockStack, ., peek, (, ), ,, n, ), ), ;]
[;, }, return, true, ;, }, private, static, boolean, isBlockBoundary, (, Node, n, ,, Node, parent, ), {, if, (]
[., push, (, new, BasicBlock, (, blockStack, ., peek, (, ), ,, n, ), ), ;, }, return, true, ;]
[), ;, }, return, true, ;, }, private, static, boolean, isBlockBoundary, (, Node, n, ,, Node, parent, ), {, if]
[,, n, ), ), ;, }, return, true, ;, }, private, static, boolean, isBlockBoundary, (, Node, n, ,, Node, parent]
[., peek, (, ), ,, n, ), ), ;, }, return, true, ;, }, private, static, boolean, isBlockBoundary, (, Node]
[), ), ;, }, return, true, ;, }, private, static, boolean, isBlockBoundary, (, Node, n, ,, Node, parent, ), {]
[;, }, private, static, boolean, isBlockBoundary, (, Node, n, ,, Node, parent, ), {, if, (, parent, !=, null, )]
[), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., DO, :, case, Token, ., FOR]
[!=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., DO, :, case, Token]
[), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., DO, :, case, Token, ., FOR]
[), {, case, Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., TRY, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., TRY]
[:, case, Token, ., FOR, :, case, Token, ., TRY, :, case, Token, ., WHILE, :, case, Token, ., WITH]
[., DO, :, case, Token, ., FOR, :, case, Token, ., TRY, :, case, Token, ., WHILE, :, case, Token]
[:, case, Token, ., TRY, :, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true, ;, case]
[., FOR, :, case, Token, ., TRY, :, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true]
[:, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true, ;, case, Token, ., AND, :, case]
[., TRY, :, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true, ;, case, Token, ., AND]
[:, case, Token, ., WITH, :, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case]
[., WHILE, :, case, Token, ., WITH, :, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK]
[:, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case]
[., WITH, :, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case, Token, ., IF]
[;, case, Token, ., AND, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., OR]
[:, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., OR, :, return, n, !=, parent]
[., AND, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., OR, :, return, n]
[:, case, Token, ., IF, :, case, Token, ., OR, :, return, n, !=, parent, ., getFirstChild, (, ), ;]
[., HOOK, :, case, Token, ., IF, :, case, Token, ., OR, :, return, n, !=, parent, ., getFirstChild, (]
[:, case, Token, ., OR, :, return, n, !=, parent, ., getFirstChild, (, ), ;, }, }, return, n, .]
[., IF, :, case, Token, ., OR, :, return, n, !=, parent, ., getFirstChild, (, ), ;, }, }, return]
[:, return, n, !=, parent, ., getFirstChild, (, ), ;, }, }, return, n, ., isCase, (, ), ;, }]
[., OR, :, return, n, !=, parent, ., getFirstChild, (, ), ;, }, }, return, n, ., isCase, (, )]
[;, }, }, return, n, ., isCase, (, ), ;, }, private, void, addReference, (, NodeTraversal, t, ,, Var, v]
[!=, parent, ., getFirstChild, (, ), ;, }, }, return, n, ., isCase, (, ), ;, }, private, void, addReference]
[;, }, }, return, n, ., isCase, (, ), ;, }, private, void, addReference, (, NodeTraversal, t, ,, Var, v]
[., getFirstChild, (, ), ;, }, }, return, n, ., isCase, (, ), ;, }, private, void, addReference, (, NodeTraversal]
[;, }, private, void, addReference, (, NodeTraversal, t, ,, Var, v, ,, Reference, reference, ), {, ReferenceCollection, referenceInfo, =, referenceMap]
[., isCase, (, ), ;, }, private, void, addReference, (, NodeTraversal, t, ,, Var, v, ,, Reference, reference, ), {]
[;, if, (, referenceInfo, ==, null, ), {, referenceInfo, =, new, ReferenceCollection, (, ), ;, referenceMap, ., put, (, v]
[., get, (, v, ), ;, if, (, referenceInfo, ==, null, ), {, referenceInfo, =, new, ReferenceCollection, (, ), ;]
[), ;, if, (, referenceInfo, ==, null, ), {, referenceInfo, =, new, ReferenceCollection, (, ), ;, referenceMap, ., put, (]
[), {, referenceInfo, =, new, ReferenceCollection, (, ), ;, referenceMap, ., put, (, v, ,, referenceInfo, ), ;, }, referenceInfo]
[==, null, ), {, referenceInfo, =, new, ReferenceCollection, (, ), ;, referenceMap, ., put, (, v, ,, referenceInfo, ), ;]
[), {, referenceInfo, =, new, ReferenceCollection, (, ), ;, referenceMap, ., put, (, v, ,, referenceInfo, ), ;, }, referenceInfo]
[=, new, ReferenceCollection, (, ), ;, referenceMap, ., put, (, v, ,, referenceInfo, ), ;, }, referenceInfo, ., add, (]
[;, referenceMap, ., put, (, v, ,, referenceInfo, ), ;, }, referenceInfo, ., add, (, reference, ,, t, ,, v]
[;, }, referenceInfo, ., add, (, reference, ,, t, ,, v, ), ;, }, interface, ReferenceMap, {, ReferenceCollection, getReferences, (]
[., put, (, v, ,, referenceInfo, ), ;, }, referenceInfo, ., add, (, reference, ,, t, ,, v, ), ;]
[,, referenceInfo, ), ;, }, referenceInfo, ., add, (, reference, ,, t, ,, v, ), ;, }, interface, ReferenceMap, {]
[), ;, }, referenceInfo, ., add, (, reference, ,, t, ,, v, ), ;, }, interface, ReferenceMap, {, ReferenceCollection, getReferences]
[;, }, interface, ReferenceMap, {, ReferenceCollection, getReferences, (, Var, var, ), ;, }, private, static, class, ReferenceMapWrapper, implements, ReferenceMap, {]
[., add, (, reference, ,, t, ,, v, ), ;, }, interface, ReferenceMap, {, ReferenceCollection, getReferences, (, Var, var, )]
[,, t, ,, v, ), ;, }, interface, ReferenceMap, {, ReferenceCollection, getReferences, (, Var, var, ), ;, }, private, static]
[,, v, ), ;, }, interface, ReferenceMap, {, ReferenceCollection, getReferences, (, Var, var, ), ;, }, private, static, class, ReferenceMapWrapper]
[), ;, }, interface, ReferenceMap, {, ReferenceCollection, getReferences, (, Var, var, ), ;, }, private, static, class, ReferenceMapWrapper, implements, ReferenceMap]
[=, referenceMap, ;, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, return, referenceMap, ., get, (, var]
[., referenceMap, =, referenceMap, ;, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, return, referenceMap, ., get]
[;, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, return, referenceMap, ., get, (, var, ), ;]
[;, }, }, interface, Behavior, {, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), ;, }, static, Behavior, DO_NOTHING_BEHAVIOR]
[., get, (, var, ), ;, }, }, interface, Behavior, {, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, )]
[), ;, }, }, interface, Behavior, {, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), ;, }, static, Behavior]
[;, static, class, ReferenceCollection, implements, Iterable, <, Reference, >, {, List, <, Reference, >, references, =, Lists, ., newArrayList, (]
[;, @, Override, public, Iterator, <, Reference, >, iterator, (, ), {, return, references, ., iterator, (, ), ;, }]
[., newArrayList, (, ), ;, @, Override, public, Iterator, <, Reference, >, iterator, (, ), {, return, references, ., iterator]
[;, }, void, add, (, Reference, reference, ,, NodeTraversal, t, ,, Var, v, ), {, references, ., add, (, reference]
[., iterator, (, ), ;, }, void, add, (, Reference, reference, ,, NodeTraversal, t, ,, Var, v, ), {, references]
[;, }, protected, boolean, isWellDefined, (, ), {, int, size, =, references, ., size, (, ), ;, if, (, size]
[., add, (, reference, ), ;, }, protected, boolean, isWellDefined, (, ), {, int, size, =, references, ., size, (]
[), ;, }, protected, boolean, isWellDefined, (, ), {, int, size, =, references, ., size, (, ), ;, if, (]
[;, if, (, size, ==, 0, ), {, return, false, ;, }, Reference, init, =, getInitializingReference, (, ), ;, if]
[., size, (, ), ;, if, (, size, ==, 0, ), {, return, false, ;, }, Reference, init, =, getInitializingReference]
[), {, return, false, ;, }, Reference, init, =, getInitializingReference, (, ), ;, if, (, init, ==, null, ), {]
[==, 0, ), {, return, false, ;, }, Reference, init, =, getInitializingReference, (, ), ;, if, (, init, ==, null]
[), {, return, false, ;, }, Reference, init, =, getInitializingReference, (, ), ;, if, (, init, ==, null, ), {]
[;, }, Reference, init, =, getInitializingReference, (, ), ;, if, (, init, ==, null, ), {, return, false, ;, }]
[;, if, (, init, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (, references, ., get, (]
[), {, return, false, ;, }, Preconditions, ., checkState, (, references, ., get, (, 0, ), ., isDeclaration, (, )]
[==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (, references, ., get, (, 0, ), ., isDeclaration]
[), {, return, false, ;, }, Preconditions, ., checkState, (, references, ., get, (, 0, ), ., isDeclaration, (, )]
[;, }, Preconditions, ., checkState, (, references, ., get, (, 0, ), ., isDeclaration, (, ), ), ;, BasicBlock, initBlock]
[;, BasicBlock, initBlock, =, init, ., getBasicBlock, (, ), ;, for, (, int, i, =, 1, ;, i, <, size]
[., checkState, (, references, ., get, (, 0, ), ., isDeclaration, (, ), ), ;, BasicBlock, initBlock, =, init, .]
[), ;, BasicBlock, initBlock, =, init, ., getBasicBlock, (, ), ;, for, (, int, i, =, 1, ;, i, <]
[., isDeclaration, (, ), ), ;, BasicBlock, initBlock, =, init, ., getBasicBlock, (, ), ;, for, (, int, i, =]
[., get, (, 0, ), ., isDeclaration, (, ), ), ;, BasicBlock, initBlock, =, init, ., getBasicBlock, (, ), ;]
[), ., isDeclaration, (, ), ), ;, BasicBlock, initBlock, =, init, ., getBasicBlock, (, ), ;, for, (, int, i]
[;, for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, if, (, !, initBlock]
[., getBasicBlock, (, ), ;, for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {]
[;, i, <, size, ;, i, ++, ), {, if, (, !, initBlock, ., provablyExecutesBefore, (, references, ., get, (]
[;, i, ++, ), {, if, (, !, initBlock, ., provablyExecutesBefore, (, references, ., get, (, i, ), ., getBasicBlock]
[<, size, ;, i, ++, ), {, if, (, !, initBlock, ., provablyExecutesBefore, (, references, ., get, (, i, )]
[;, i, ++, ), {, if, (, !, initBlock, ., provablyExecutesBefore, (, references, ., get, (, i, ), ., getBasicBlock]
[), {, if, (, !, initBlock, ., provablyExecutesBefore, (, references, ., get, (, i, ), ., getBasicBlock, (, ), )]
[++, ), {, if, (, !, initBlock, ., provablyExecutesBefore, (, references, ., get, (, i, ), ., getBasicBlock, (, )]
[), {, return, false, ;, }, }, return, true, ;, }, boolean, isEscaped, (, ), {, Scope, scope, =, null]
[), {, return, false, ;, }, }, return, true, ;, }, boolean, isEscaped, (, ), {, Scope, scope, =, null]
[., provablyExecutesBefore, (, references, ., get, (, i, ), ., getBasicBlock, (, ), ), ), {, return, false, ;, }]
[), ), {, return, false, ;, }, }, return, true, ;, }, boolean, isEscaped, (, ), {, Scope, scope, =]
[., getBasicBlock, (, ), ), ), {, return, false, ;, }, }, return, true, ;, }, boolean, isEscaped, (, )]
[., get, (, i, ), ., getBasicBlock, (, ), ), ), {, return, false, ;, }, }, return, true, ;]
[), ., getBasicBlock, (, ), ), ), {, return, false, ;, }, }, return, true, ;, }, boolean, isEscaped, (]
[;, }, }, return, true, ;, }, boolean, isEscaped, (, ), {, Scope, scope, =, null, ;, for, (, Reference]
[;, }, boolean, isEscaped, (, ), {, Scope, scope, =, null, ;, for, (, Reference, ref, :, references, ), {]
[;, for, (, Reference, ref, :, references, ), {, if, (, scope, ==, null, ), {, scope, =, ref, .]
[), {, if, (, scope, ==, null, ), {, scope, =, ref, ., scope, ;, }, else, if, (, scope]
[), {, scope, =, ref, ., scope, ;, }, else, if, (, scope, !=, ref, ., scope, ), {, return]
[==, null, ), {, scope, =, ref, ., scope, ;, }, else, if, (, scope, !=, ref, ., scope, )]
[), {, scope, =, ref, ., scope, ;, }, else, if, (, scope, !=, ref, ., scope, ), {, return]
[=, ref, ., scope, ;, }, else, if, (, scope, !=, ref, ., scope, ), {, return, true, ;, }]
[;, }, else, if, (, scope, !=, ref, ., scope, ), {, return, true, ;, }, }, return, false, ;]
[., scope, ;, }, else, if, (, scope, !=, ref, ., scope, ), {, return, true, ;, }, }, return]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, isInitializingDeclarationAt, (, int, index, ), {, Reference]
[!=, ref, ., scope, ), {, return, true, ;, }, }, return, false, ;, }, private, boolean, isInitializingDeclarationAt, (, int]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, isInitializingDeclarationAt, (, int, index, ), {, Reference]
[., scope, ), {, return, true, ;, }, }, return, false, ;, }, private, boolean, isInitializingDeclarationAt, (, int, index, )]
[;, }, }, return, false, ;, }, private, boolean, isInitializingDeclarationAt, (, int, index, ), {, Reference, maybeInit, =, references, .]
[;, }, private, boolean, isInitializingDeclarationAt, (, int, index, ), {, Reference, maybeInit, =, references, ., get, (, index, ), ;]
[;, if, (, maybeInit, ., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return, false, ;, }, private, boolean]
[., get, (, index, ), ;, if, (, maybeInit, ., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return]
[), ;, if, (, maybeInit, ., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return, false, ;, }, private]
[), {, return, true, ;, }, return, false, ;, }, private, boolean, isInitializingAssignmentAt, (, int, index, ), {, if, (]
[., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return, false, ;, }, private, boolean, isInitializingAssignmentAt, (, int, index]
[;, }, return, false, ;, }, private, boolean, isInitializingAssignmentAt, (, int, index, ), {, if, (, index, <, references, .]
[;, }, private, boolean, isInitializingAssignmentAt, (, int, index, ), {, if, (, index, <, references, ., size, (, ), &&]
[), {, Reference, maybeDecl, =, references, ., get, (, index, -, 1, ), ;, if, (, maybeDecl, ., isVarDeclaration, (]
[&&, index, >, 0, ), {, Reference, maybeDecl, =, references, ., get, (, index, -, 1, ), ;, if, (]
[<, references, ., size, (, ), &&, index, >, 0, ), {, Reference, maybeDecl, =, references, ., get, (, index]
[&&, index, >, 0, ), {, Reference, maybeDecl, =, references, ., get, (, index, -, 1, ), ;, if, (]
[., size, (, ), &&, index, >, 0, ), {, Reference, maybeDecl, =, references, ., get, (, index, -, 1]
[), {, Reference, maybeDecl, =, references, ., get, (, index, -, 1, ), ;, if, (, maybeDecl, ., isVarDeclaration, (]
[>, 0, ), {, Reference, maybeDecl, =, references, ., get, (, index, -, 1, ), ;, if, (, maybeDecl, .]
[), {, Reference, maybeDecl, =, references, ., get, (, index, -, 1, ), ;, if, (, maybeDecl, ., isVarDeclaration, (]
[;, if, (, maybeDecl, ., isVarDeclaration, (, ), ), {, Preconditions, ., checkState, (, !, maybeDecl, ., isInitializingDeclaration, (, )]
[., get, (, index, -, 1, ), ;, if, (, maybeDecl, ., isVarDeclaration, (, ), ), {, Preconditions, ., checkState]
[), ;, if, (, maybeDecl, ., isVarDeclaration, (, ), ), {, Preconditions, ., checkState, (, !, maybeDecl, ., isInitializingDeclaration, (]
[-, 1, ), ;, if, (, maybeDecl, ., isVarDeclaration, (, ), ), {, Preconditions, ., checkState, (, !, maybeDecl, .]
[), ;, if, (, maybeDecl, ., isVarDeclaration, (, ), ), {, Preconditions, ., checkState, (, !, maybeDecl, ., isInitializingDeclaration, (]
[), {, Preconditions, ., checkState, (, !, maybeDecl, ., isInitializingDeclaration, (, ), ), ;, Reference, maybeInit, =, references, ., get]
[., isVarDeclaration, (, ), ), {, Preconditions, ., checkState, (, !, maybeDecl, ., isInitializingDeclaration, (, ), ), ;, Reference, maybeInit]
[;, Reference, maybeInit, =, references, ., get, (, index, ), ;, if, (, maybeInit, ., isSimpleAssignmentToName, (, ), ), {]
[., checkState, (, !, maybeDecl, ., isInitializingDeclaration, (, ), ), ;, Reference, maybeInit, =, references, ., get, (, index, )]
[), ;, Reference, maybeInit, =, references, ., get, (, index, ), ;, if, (, maybeInit, ., isSimpleAssignmentToName, (, ), )]
[), ;, Reference, maybeInit, =, references, ., get, (, index, ), ;, if, (, maybeInit, ., isSimpleAssignmentToName, (, ), )]
[., isInitializingDeclaration, (, ), ), ;, Reference, maybeInit, =, references, ., get, (, index, ), ;, if, (, maybeInit, .]
[;, if, (, maybeInit, ., isSimpleAssignmentToName, (, ), ), {, return, true, ;, }, }, }, return, false, ;, }]
[., get, (, index, ), ;, if, (, maybeInit, ., isSimpleAssignmentToName, (, ), ), {, return, true, ;, }, }]
[), ;, if, (, maybeInit, ., isSimpleAssignmentToName, (, ), ), {, return, true, ;, }, }, }, return, false, ;]
[), {, return, true, ;, }, }, }, return, false, ;, }, Reference, getInitializingReference, (, ), {, if, (, isInitializingDeclarationAt]
[., isSimpleAssignmentToName, (, ), ), {, return, true, ;, }, }, }, return, false, ;, }, Reference, getInitializingReference, (, )]
[;, }, }, }, return, false, ;, }, Reference, getInitializingReference, (, ), {, if, (, isInitializingDeclarationAt, (, 0, ), )]
[;, }, Reference, getInitializingReference, (, ), {, if, (, isInitializingDeclarationAt, (, 0, ), ), {, return, references, ., get, (]
[), {, return, references, ., get, (, 0, ), ;, }, else, if, (, isInitializingAssignmentAt, (, 1, ), ), {]
[), ), {, return, references, ., get, (, 0, ), ;, }, else, if, (, isInitializingAssignmentAt, (, 1, ), )]
[;, }, else, if, (, isInitializingAssignmentAt, (, 1, ), ), {, return, references, ., get, (, 1, ), ;, }]
[., get, (, 0, ), ;, }, else, if, (, isInitializingAssignmentAt, (, 1, ), ), {, return, references, ., get]
[), ;, }, else, if, (, isInitializingAssignmentAt, (, 1, ), ), {, return, references, ., get, (, 1, ), ;]
[), {, return, references, ., get, (, 1, ), ;, }, return, null, ;, }, Reference, getInitializingReferenceForConstants, (, ), {]
[), ), {, return, references, ., get, (, 1, ), ;, }, return, null, ;, }, Reference, getInitializingReferenceForConstants, (, )]
[;, }, return, null, ;, }, Reference, getInitializingReferenceForConstants, (, ), {, int, size, =, references, ., size, (, ), ;]
[., get, (, 1, ), ;, }, return, null, ;, }, Reference, getInitializingReferenceForConstants, (, ), {, int, size, =, references]
[), ;, }, return, null, ;, }, Reference, getInitializingReferenceForConstants, (, ), {, int, size, =, references, ., size, (, )]
[;, }, Reference, getInitializingReferenceForConstants, (, ), {, int, size, =, references, ., size, (, ), ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, isInitializingDeclarationAt, (]
[., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {]
[;, i, <, size, ;, i, ++, ), {, if, (, isInitializingDeclarationAt, (, i, ), ||, isInitializingAssignmentAt, (, i, )]
[;, i, ++, ), {, if, (, isInitializingDeclarationAt, (, i, ), ||, isInitializingAssignmentAt, (, i, ), ), {, return, references]
[<, size, ;, i, ++, ), {, if, (, isInitializingDeclarationAt, (, i, ), ||, isInitializingAssignmentAt, (, i, ), ), {]
[;, i, ++, ), {, if, (, isInitializingDeclarationAt, (, i, ), ||, isInitializingAssignmentAt, (, i, ), ), {, return, references]
[), {, if, (, isInitializingDeclarationAt, (, i, ), ||, isInitializingAssignmentAt, (, i, ), ), {, return, references, ., get, (]
[++, ), {, if, (, isInitializingDeclarationAt, (, i, ), ||, isInitializingAssignmentAt, (, i, ), ), {, return, references, ., get]
[), {, return, references, ., get, (, i, ), ;, }, }, return, null, ;, }, boolean, isAssignedOnceInLifetime, (, )]
[||, isInitializingAssignmentAt, (, i, ), ), {, return, references, ., get, (, i, ), ;, }, }, return, null, ;]
[), ||, isInitializingAssignmentAt, (, i, ), ), {, return, references, ., get, (, i, ), ;, }, }, return, null]
[), {, return, references, ., get, (, i, ), ;, }, }, return, null, ;, }, boolean, isAssignedOnceInLifetime, (, )]
[), ), {, return, references, ., get, (, i, ), ;, }, }, return, null, ;, }, boolean, isAssignedOnceInLifetime, (]
[;, }, }, return, null, ;, }, boolean, isAssignedOnceInLifetime, (, ), {, Reference, ref, =, getOneAndOnlyAssignment, (, ), ;, if]
[., get, (, i, ), ;, }, }, return, null, ;, }, boolean, isAssignedOnceInLifetime, (, ), {, Reference, ref, =]
[), ;, }, }, return, null, ;, }, boolean, isAssignedOnceInLifetime, (, ), {, Reference, ref, =, getOneAndOnlyAssignment, (, ), ;]
[;, }, boolean, isAssignedOnceInLifetime, (, ), {, Reference, ref, =, getOneAndOnlyAssignment, (, ), ;, if, (, ref, ==, null, )]
[;, if, (, ref, ==, null, ), {, return, false, ;, }, for, (, BasicBlock, block, =, ref, ., getBasicBlock]
[), {, return, false, ;, }, for, (, BasicBlock, block, =, ref, ., getBasicBlock, (, ), ;, block, !=, null]
[==, null, ), {, return, false, ;, }, for, (, BasicBlock, block, =, ref, ., getBasicBlock, (, ), ;, block]
[), {, return, false, ;, }, for, (, BasicBlock, block, =, ref, ., getBasicBlock, (, ), ;, block, !=, null]
[;, }, for, (, BasicBlock, block, =, ref, ., getBasicBlock, (, ), ;, block, !=, null, ;, block, =, block]
[;, block, !=, null, ;, block, =, block, ., getParent, (, ), ), {, if, (, block, ., isFunction, )]
[., getBasicBlock, (, ), ;, block, !=, null, ;, block, =, block, ., getParent, (, ), ), {, if, (]
[;, block, =, block, ., getParent, (, ), ), {, if, (, block, ., isFunction, ), {, break, ;, }]
[!=, null, ;, block, =, block, ., getParent, (, ), ), {, if, (, block, ., isFunction, ), {, break]
[;, block, =, block, ., getParent, (, ), ), {, if, (, block, ., isFunction, ), {, break, ;, }]
[=, block, ., getParent, (, ), ), {, if, (, block, ., isFunction, ), {, break, ;, }, else, if]
[), {, if, (, block, ., isFunction, ), {, break, ;, }, else, if, (, block, ., isLoop, ), {]
[., getParent, (, ), ), {, if, (, block, ., isFunction, ), {, break, ;, }, else, if, (, block]
[), {, break, ;, }, else, if, (, block, ., isLoop, ), {, return, false, ;, }, }, return, true]
[., isFunction, ), {, break, ;, }, else, if, (, block, ., isLoop, ), {, return, false, ;, }, }]
[), {, return, false, ;, }, }, return, true, ;, }, private, Reference, getOneAndOnlyAssignment, (, ), {, Reference, assignment, =]
[., isLoop, ), {, return, false, ;, }, }, return, true, ;, }, private, Reference, getOneAndOnlyAssignment, (, ), {, Reference]
[;, }, }, return, true, ;, }, private, Reference, getOneAndOnlyAssignment, (, ), {, Reference, assignment, =, null, ;, int, size]
[;, }, private, Reference, getOneAndOnlyAssignment, (, ), {, Reference, assignment, =, null, ;, int, size, =, references, ., size, (]
[;, int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size]
[;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, Reference, ref, =, references]
[., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {]
[;, i, <, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if]
[;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue]
[<, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref]
[;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue]
[), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue, (, ), ||]
[++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue, (, )]
[;, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, if, (, assignment, ==]
[., get, (, i, ), ;, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), )]
[), ;, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, if, (, assignment]
[), {, if, (, assignment, ==, null, ), {, assignment, =, ref, ;, }, else, {, return, null, ;, }]
[||, ref, ., isInitializingDeclaration, (, ), ), {, if, (, assignment, ==, null, ), {, assignment, =, ref, ;, }]
[., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, if, (, assignment, ==, null, ), {, assignment]
[), {, if, (, assignment, ==, null, ), {, assignment, =, ref, ;, }, else, {, return, null, ;, }]
[., isInitializingDeclaration, (, ), ), {, if, (, assignment, ==, null, ), {, assignment, =, ref, ;, }, else, {]
[), {, assignment, =, ref, ;, }, else, {, return, null, ;, }, }, }, return, assignment, ;, }, boolean]
[==, null, ), {, assignment, =, ref, ;, }, else, {, return, null, ;, }, }, }, return, assignment, ;]
[), {, assignment, =, ref, ;, }, else, {, return, null, ;, }, }, }, return, assignment, ;, }, boolean]
[=, ref, ;, }, else, {, return, null, ;, }, }, }, return, assignment, ;, }, boolean, isNeverAssigned, (, )]
[;, }, else, {, return, null, ;, }, }, }, return, assignment, ;, }, boolean, isNeverAssigned, (, ), {, int]
[;, }, }, }, return, assignment, ;, }, boolean, isNeverAssigned, (, ), {, int, size, =, references, ., size, (]
[;, }, boolean, isNeverAssigned, (, ), {, int, size, =, references, ., size, (, ), ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, Reference, ref, =, references]
[., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {]
[;, i, <, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if]
[;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue]
[<, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref]
[;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue]
[), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue, (, ), ||]
[++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue, (, )]
[;, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, return, false, ;, }]
[., get, (, i, ), ;, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), )]
[), ;, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, return, false, ;]
[), {, return, false, ;, }, }, return, true, ;, }, boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =, references]
[||, ref, ., isInitializingDeclaration, (, ), ), {, return, false, ;, }, }, return, true, ;, }, boolean, firstReferenceIsAssigningDeclaration, (]
[., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, return, false, ;, }, }, return, true, ;]
[), {, return, false, ;, }, }, return, true, ;, }, boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =, references]
[., isInitializingDeclaration, (, ), ), {, return, false, ;, }, }, return, true, ;, }, boolean, firstReferenceIsAssigningDeclaration, (, ), {]
[;, }, }, return, true, ;, }, boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =, references, ., size, (, )]
[;, }, boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =, references, ., size, (, ), ;, if, (, size, >]
[;, if, (, size, >, 0, &&, references, ., get, (, 0, ), ., isInitializingDeclaration, (, ), ), {, return]
[., size, (, ), ;, if, (, size, >, 0, &&, references, ., get, (, 0, ), ., isInitializingDeclaration, (]
[), {, return, true, ;, }, return, false, ;, }, }, static, final, class, Reference, implements, StaticReference, <, JSType, >]
[&&, references, ., get, (, 0, ), ., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return, false, ;]
[>, 0, &&, references, ., get, (, 0, ), ., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return]
[&&, references, ., get, (, 0, ), ., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return, false, ;]
[), {, return, true, ;, }, return, false, ;, }, }, static, final, class, Reference, implements, StaticReference, <, JSType, >]
[., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return, false, ;, }, }, static, final, class, Reference, implements]
[., get, (, 0, ), ., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return, false, ;, }, }]
[), ., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return, false, ;, }, }, static, final, class, Reference]
[;, }, return, false, ;, }, }, static, final, class, Reference, implements, StaticReference, <, JSType, >, {, private, static, final]
[;, }, }, static, final, class, Reference, implements, StaticReference, <, JSType, >, {, private, static, final, Set, <, Integer, >]
[;, private, final, Node, nameNode, ;, private, final, BasicBlock, basicBlock, ;, private, final, Scope, scope, ;, private, final, InputId, inputId]
[., of, (, Token, ., VAR, ,, Token, ., FUNCTION, ,, Token, ., CATCH, ), ;, private, final, Node, nameNode]
[,, Token, ., FUNCTION, ,, Token, ., CATCH, ), ;, private, final, Node, nameNode, ;, private, final, BasicBlock, basicBlock, ;]
[., VAR, ,, Token, ., FUNCTION, ,, Token, ., CATCH, ), ;, private, final, Node, nameNode, ;, private, final, BasicBlock]
[,, Token, ., CATCH, ), ;, private, final, Node, nameNode, ;, private, final, BasicBlock, basicBlock, ;, private, final, Scope, scope]
[., FUNCTION, ,, Token, ., CATCH, ), ;, private, final, Node, nameNode, ;, private, final, BasicBlock, basicBlock, ;, private, final]
[), ;, private, final, Node, nameNode, ;, private, final, BasicBlock, basicBlock, ;, private, final, Scope, scope, ;, private, final, InputId]
[., CATCH, ), ;, private, final, Node, nameNode, ;, private, final, BasicBlock, basicBlock, ;, private, final, Scope, scope, ;, private]
[,, basicBlock, ,, t, ., getScope, (, ), ,, t, ., getInput, (, ), ., getInputId, (, ), ), ;]
[,, t, ., getScope, (, ), ,, t, ., getInput, (, ), ., getInputId, (, ), ), ;, }, static]
[,, t, ., getInput, (, ), ., getInputId, (, ), ), ;, }, static, Reference, newBleedingFunction, (, NodeTraversal, t, ,]
[., getScope, (, ), ,, t, ., getInput, (, ), ., getInputId, (, ), ), ;, }, static, Reference, newBleedingFunction]
[), ;, }, static, Reference, newBleedingFunction, (, NodeTraversal, t, ,, BasicBlock, basicBlock, ,, Node, func, ), {, return, new, Reference]
[., getInputId, (, ), ), ;, }, static, Reference, newBleedingFunction, (, NodeTraversal, t, ,, BasicBlock, basicBlock, ,, Node, func, )]
[., getInput, (, ), ., getInputId, (, ), ), ;, }, static, Reference, newBleedingFunction, (, NodeTraversal, t, ,, BasicBlock, basicBlock]
[;, }, @, VisibleForTesting, static, Reference, createRefForTest, (, CompilerInput, input, ), {, return, new, Reference, (, new, Node, (, Token]
[,, basicBlock, ,, t, ., getScope, (, ), ,, t, ., getInput, (, ), ., getInputId, (, ), ), ;]
[., getFirstChild, (, ), ,, basicBlock, ,, t, ., getScope, (, ), ,, t, ., getInput, (, ), ., getInputId]
[,, t, ., getScope, (, ), ,, t, ., getInput, (, ), ., getInputId, (, ), ), ;, }, @]
[,, t, ., getInput, (, ), ., getInputId, (, ), ), ;, }, @, VisibleForTesting, static, Reference, createRefForTest, (, CompilerInput]
[., getScope, (, ), ,, t, ., getInput, (, ), ., getInputId, (, ), ), ;, }, @, VisibleForTesting, static]
[), ;, }, @, VisibleForTesting, static, Reference, createRefForTest, (, CompilerInput, input, ), {, return, new, Reference, (, new, Node, (]
[., getInputId, (, ), ), ;, }, @, VisibleForTesting, static, Reference, createRefForTest, (, CompilerInput, input, ), {, return, new, Reference]
[., getInput, (, ), ., getInputId, (, ), ), ;, }, @, VisibleForTesting, static, Reference, createRefForTest, (, CompilerInput, input, )]
[;, }, private, Reference, (, Node, nameNode, ,, BasicBlock, basicBlock, ,, Scope, scope, ,, InputId, inputId, ), {, this, .]
[,, null, ,, null, ,, input, ., getInputId, (, ), ), ;, }, private, Reference, (, Node, nameNode, ,, BasicBlock]
[), ,, null, ,, null, ,, input, ., getInputId, (, ), ), ;, }, private, Reference, (, Node, nameNode, ,]
[., NAME, ), ,, null, ,, null, ,, input, ., getInputId, (, ), ), ;, }, private, Reference, (, Node]
[,, null, ,, input, ., getInputId, (, ), ), ;, }, private, Reference, (, Node, nameNode, ,, BasicBlock, basicBlock, ,]
[,, input, ., getInputId, (, ), ), ;, }, private, Reference, (, Node, nameNode, ,, BasicBlock, basicBlock, ,, Scope, scope]
[), ;, }, private, Reference, (, Node, nameNode, ,, BasicBlock, basicBlock, ,, Scope, scope, ,, InputId, inputId, ), {, this]
[., getInputId, (, ), ), ;, }, private, Reference, (, Node, nameNode, ,, BasicBlock, basicBlock, ,, Scope, scope, ,, InputId]
[=, nameNode, ;, this, ., basicBlock, =, basicBlock, ;, this, ., scope, =, scope, ;, this, ., inputId, =, inputId]
[., nameNode, =, nameNode, ;, this, ., basicBlock, =, basicBlock, ;, this, ., scope, =, scope, ;, this, ., inputId]
[;, this, ., basicBlock, =, basicBlock, ;, this, ., scope, =, scope, ;, this, ., inputId, =, inputId, ;, this]
[=, basicBlock, ;, this, ., scope, =, scope, ;, this, ., inputId, =, inputId, ;, this, ., sourceFile, =, nameNode]
[., basicBlock, =, basicBlock, ;, this, ., scope, =, scope, ;, this, ., inputId, =, inputId, ;, this, ., sourceFile]
[;, this, ., scope, =, scope, ;, this, ., inputId, =, inputId, ;, this, ., sourceFile, =, nameNode, ., getStaticSourceFile]
[=, scope, ;, this, ., inputId, =, inputId, ;, this, ., sourceFile, =, nameNode, ., getStaticSourceFile, (, ), ;, }]
[., scope, =, scope, ;, this, ., inputId, =, inputId, ;, this, ., sourceFile, =, nameNode, ., getStaticSourceFile, (, )]
[;, this, ., inputId, =, inputId, ;, this, ., sourceFile, =, nameNode, ., getStaticSourceFile, (, ), ;, }, Reference, cloneWithNewScope]
[=, inputId, ;, this, ., sourceFile, =, nameNode, ., getStaticSourceFile, (, ), ;, }, Reference, cloneWithNewScope, (, Scope, newScope, )]
[., inputId, =, inputId, ;, this, ., sourceFile, =, nameNode, ., getStaticSourceFile, (, ), ;, }, Reference, cloneWithNewScope, (, Scope]
[;, this, ., sourceFile, =, nameNode, ., getStaticSourceFile, (, ), ;, }, Reference, cloneWithNewScope, (, Scope, newScope, ), {, return]
[=, nameNode, ., getStaticSourceFile, (, ), ;, }, Reference, cloneWithNewScope, (, Scope, newScope, ), {, return, new, Reference, (, nameNode]
[., sourceFile, =, nameNode, ., getStaticSourceFile, (, ), ;, }, Reference, cloneWithNewScope, (, Scope, newScope, ), {, return, new, Reference]
[;, }, Reference, cloneWithNewScope, (, Scope, newScope, ), {, return, new, Reference, (, nameNode, ,, basicBlock, ,, newScope, ,, inputId]
[., getStaticSourceFile, (, ), ;, }, Reference, cloneWithNewScope, (, Scope, newScope, ), {, return, new, Reference, (, nameNode, ,, basicBlock]
[;, }, @, Override, public, Var, getSymbol, (, ), {, return, scope, ., getVar, (, nameNode, ., getString, (, )]
[,, basicBlock, ,, newScope, ,, inputId, ), ;, }, @, Override, public, Var, getSymbol, (, ), {, return, scope, .]
[,, newScope, ,, inputId, ), ;, }, @, Override, public, Var, getSymbol, (, ), {, return, scope, ., getVar, (]
[,, inputId, ), ;, }, @, Override, public, Var, getSymbol, (, ), {, return, scope, ., getVar, (, nameNode, .]
[), ;, }, @, Override, public, Var, getSymbol, (, ), {, return, scope, ., getVar, (, nameNode, ., getString, (]
[;, }, @, Override, public, Node, getNode, (, ), {, return, nameNode, ;, }, public, InputId, getInputId, (, ), {]
[., getVar, (, nameNode, ., getString, (, ), ), ;, }, @, Override, public, Node, getNode, (, ), {, return]
[), ;, }, @, Override, public, Node, getNode, (, ), {, return, nameNode, ;, }, public, InputId, getInputId, (, )]
[., getString, (, ), ), ;, }, @, Override, public, Node, getNode, (, ), {, return, nameNode, ;, }, public]
[;, }, public, InputId, getInputId, (, ), {, return, inputId, ;, }, @, Override, public, StaticSourceFile, getSourceFile, (, ), {]
[;, }, @, Override, public, StaticSourceFile, getSourceFile, (, ), {, return, sourceFile, ;, }, boolean, isDeclaration, (, ), {, Node]
[;, }, boolean, isDeclaration, (, ), {, Node, parent, =, getParent, (, ), ;, Node, grandparent, =, parent, ., getParent]
[;, Node, grandparent, =, parent, ., getParent, (, ), ;, return, DECLARATION_PARENTS, ., contains, (, parent, ., getType, (, )]
[;, return, DECLARATION_PARENTS, ., contains, (, parent, ., getType, (, ), ), ||, parent, ., isParamList, (, ), &&, grandparent]
[., getParent, (, ), ;, return, DECLARATION_PARENTS, ., contains, (, parent, ., getType, (, ), ), ||, parent, ., isParamList]
[;, }, boolean, isVarDeclaration, (, ), {, return, getParent, (, ), ., isVar, (, ), ;, }, boolean, isHoistedFunction, (]
[||, parent, ., isParamList, (, ), &&, grandparent, ., isFunction, (, ), ;, }, boolean, isVarDeclaration, (, ), {, return]
[., contains, (, parent, ., getType, (, ), ), ||, parent, ., isParamList, (, ), &&, grandparent, ., isFunction, (]
[), ||, parent, ., isParamList, (, ), &&, grandparent, ., isFunction, (, ), ;, }, boolean, isVarDeclaration, (, ), {]
[., getType, (, ), ), ||, parent, ., isParamList, (, ), &&, grandparent, ., isFunction, (, ), ;, }, boolean]
[;, }, boolean, isVarDeclaration, (, ), {, return, getParent, (, ), ., isVar, (, ), ;, }, boolean, isHoistedFunction, (]
[&&, grandparent, ., isFunction, (, ), ;, }, boolean, isVarDeclaration, (, ), {, return, getParent, (, ), ., isVar, (]
[., isParamList, (, ), &&, grandparent, ., isFunction, (, ), ;, }, boolean, isVarDeclaration, (, ), {, return, getParent, (]
[;, }, boolean, isVarDeclaration, (, ), {, return, getParent, (, ), ., isVar, (, ), ;, }, boolean, isHoistedFunction, (]
[., isFunction, (, ), ;, }, boolean, isVarDeclaration, (, ), {, return, getParent, (, ), ., isVar, (, ), ;]
[;, }, boolean, isHoistedFunction, (, ), {, return, NodeUtil, ., isHoistedFunctionDeclaration, (, getParent, (, ), ), ;, }, boolean, isInitializingDeclaration]
[., isVar, (, ), ;, }, boolean, isHoistedFunction, (, ), {, return, NodeUtil, ., isHoistedFunctionDeclaration, (, getParent, (, ), )]
[;, }, boolean, isInitializingDeclaration, (, ), {, return, isDeclaration, (, ), &&, !, getParent, (, ), ., isVar, (, )]
[., isHoistedFunctionDeclaration, (, getParent, (, ), ), ;, }, boolean, isInitializingDeclaration, (, ), {, return, isDeclaration, (, ), &&, !]
[), ;, }, boolean, isInitializingDeclaration, (, ), {, return, isDeclaration, (, ), &&, !, getParent, (, ), ., isVar, (]
[;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (, ), ;, return, (, parent, ., isFunction, (]
[||, nameNode, ., getFirstChild, (, ), !=, null, ;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (]
[&&, !, getParent, (, ), ., isVar, (, ), ||, nameNode, ., getFirstChild, (, ), !=, null, ;, }, Node]
[||, nameNode, ., getFirstChild, (, ), !=, null, ;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (]
[||, nameNode, ., getFirstChild, (, ), !=, null, ;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (]
[., isVar, (, ), ||, nameNode, ., getFirstChild, (, ), !=, null, ;, }, Node, getAssignedValue, (, ), {, Node]
[;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (, ), ;, return, (, parent, ., isFunction, (]
[!=, null, ;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (, ), ;, return, (, parent, .]
[., getFirstChild, (, ), !=, null, ;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (, ), ;]
[;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (, ), ;, return, (, parent, ., isFunction, (]
[;, return, (, parent, ., isFunction, (, ), ), ?, parent, :, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, }]
[;, }, BasicBlock, getBasicBlock, (, ), {, return, basicBlock, ;, }, Node, getParent, (, ), {, return, getNode, (, )]
[?, parent, :, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, }, BasicBlock, getBasicBlock, (, ), {, return, basicBlock, ;, }]
[), ?, parent, :, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, }, BasicBlock, getBasicBlock, (, ), {, return, basicBlock, ;]
[., isFunction, (, ), ), ?, parent, :, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, }, BasicBlock, getBasicBlock, (, )]
[:, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, }, BasicBlock, getBasicBlock, (, ), {, return, basicBlock, ;, }, Node, getParent]
[;, }, BasicBlock, getBasicBlock, (, ), {, return, basicBlock, ;, }, Node, getParent, (, ), {, return, getNode, (, )]
[., getAssignedValue, (, nameNode, ), ;, }, BasicBlock, getBasicBlock, (, ), {, return, basicBlock, ;, }, Node, getParent, (, )]
[), ;, }, BasicBlock, getBasicBlock, (, ), {, return, basicBlock, ;, }, Node, getParent, (, ), {, return, getNode, (]
[;, }, Node, getParent, (, ), {, return, getNode, (, ), ., getParent, (, ), ;, }, Node, getGrandparent, (]
[;, }, Node, getGrandparent, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ==, null, ?, null]
[., getParent, (, ), ;, }, Node, getGrandparent, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent]
[;, return, parent, ==, null, ?, null, :, parent, ., getParent, (, ), ;, }, private, static, boolean, isLhsOfForInExpression, (]
[;, }, private, static, boolean, isLhsOfForInExpression, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;]
[?, null, :, parent, ., getParent, (, ), ;, }, private, static, boolean, isLhsOfForInExpression, (, Node, n, ), {, Node]
[==, null, ?, null, :, parent, ., getParent, (, ), ;, }, private, static, boolean, isLhsOfForInExpression, (, Node, n, )]
[?, null, :, parent, ., getParent, (, ), ;, }, private, static, boolean, isLhsOfForInExpression, (, Node, n, ), {, Node]
[:, parent, ., getParent, (, ), ;, }, private, static, boolean, isLhsOfForInExpression, (, Node, n, ), {, Node, parent, =]
[;, }, private, static, boolean, isLhsOfForInExpression, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;]
[., getParent, (, ), ;, }, private, static, boolean, isLhsOfForInExpression, (, Node, n, ), {, Node, parent, =, n, .]
[;, if, (, parent, ., isVar, (, ), ), {, return, isLhsOfForInExpression, (, parent, ), ;, }, return, NodeUtil, .]
[., getParent, (, ), ;, if, (, parent, ., isVar, (, ), ), {, return, isLhsOfForInExpression, (, parent, ), ;]
[), {, return, isLhsOfForInExpression, (, parent, ), ;, }, return, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild]
[., isVar, (, ), ), {, return, isLhsOfForInExpression, (, parent, ), ;, }, return, NodeUtil, ., isForIn, (, parent, )]
[;, }, return, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ;, }, boolean]
[), ;, }, return, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ;, }]
[;, }, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ., isAssign, (, )]
[&&, parent, ., getFirstChild, (, ), ==, n, ;, }, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (]
[., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ;, }, boolean, isSimpleAssignmentToName, (, ), {]
[), &&, parent, ., getFirstChild, (, ), ==, n, ;, }, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent]
[;, }, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ., isAssign, (, )]
[==, n, ;, }, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ., isAssign]
[., getFirstChild, (, ), ==, n, ;, }, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (, ), ;]
[;, }, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ., isAssign, (, )]
[;, return, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, ;, }, boolean, isLvalue, (]
[;, }, boolean, isLvalue, (, ), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType]
[&&, parent, ., getFirstChild, (, ), ==, nameNode, ;, }, boolean, isLvalue, (, ), {, Node, parent, =, getParent, (]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, ;, }, boolean, isLvalue, (, ), {, Node]
[;, }, boolean, isLvalue, (, ), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType]
[==, nameNode, ;, }, boolean, isLvalue, (, ), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent]
[., getFirstChild, (, ), ==, nameNode, ;, }, boolean, isLvalue, (, ), {, Node, parent, =, getParent, (, ), ;]
[;, }, boolean, isLvalue, (, ), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType]
[;, int, parentType, =, parent, ., getType, (, ), ;, return, (, parentType, ==, Token, ., VAR, &&, nameNode, .]
[;, return, (, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==]
[., getType, (, ), ;, return, (, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null]
[;, }, Scope, getScope, (, ), {, return, scope, ;, }, }, static, final, class, BasicBlock, {, private, final, BasicBlock]
[||, isLhsOfForInExpression, (, nameNode, ), ;, }, Scope, getScope, (, ), {, return, scope, ;, }, }, static, final, class]
[||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, ), ||, isLhsOfForInExpression, (]
[||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, )]
[||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, )]
[), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent]
[&&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, .]
[==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||]
[&&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, .]
[., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==]
[), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent]
[!=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp]
[., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||]
[), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent]
[||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, )]
[==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent]
[||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, )]
[., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild]
[||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, ), ||, isLhsOfForInExpression, (]
[==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode]
[||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, ), ||, isLhsOfForInExpression, (]
[., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, ), ||]
[||, isLhsOfForInExpression, (, nameNode, ), ;, }, Scope, getScope, (, ), {, return, scope, ;, }, }, static, final, class]
[), ||, isLhsOfForInExpression, (, nameNode, ), ;, }, Scope, getScope, (, ), {, return, scope, ;, }, }, static, final]
[&&, parent, ., getFirstChild, (, ), ==, nameNode, ), ||, isLhsOfForInExpression, (, nameNode, ), ;, }, Scope, getScope, (, )]
[., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, ), ||, isLhsOfForInExpression, (, nameNode, ), ;]
[), &&, parent, ., getFirstChild, (, ), ==, nameNode, ), ||, isLhsOfForInExpression, (, nameNode, ), ;, }, Scope, getScope, (]
[), ||, isLhsOfForInExpression, (, nameNode, ), ;, }, Scope, getScope, (, ), {, return, scope, ;, }, }, static, final]
[==, nameNode, ), ||, isLhsOfForInExpression, (, nameNode, ), ;, }, Scope, getScope, (, ), {, return, scope, ;, }, }]
[., getFirstChild, (, ), ==, nameNode, ), ||, isLhsOfForInExpression, (, nameNode, ), ;, }, Scope, getScope, (, ), {, return]
[), ||, isLhsOfForInExpression, (, nameNode, ), ;, }, Scope, getScope, (, ), {, return, scope, ;, }, }, static, final]
[;, }, Scope, getScope, (, ), {, return, scope, ;, }, }, static, final, class, BasicBlock, {, private, final, BasicBlock]
[), ;, }, Scope, getScope, (, ), {, return, scope, ;, }, }, static, final, class, BasicBlock, {, private, final]
[;, }, }, static, final, class, BasicBlock, {, private, final, BasicBlock, parent, ;, private, final, boolean, isHoisted, ;, private, final]
[=, parent, ;, this, ., isHoisted, =, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;, this, ., isFunction, =, root, .]
[., parent, =, parent, ;, this, ., isHoisted, =, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;, this, ., isFunction, =]
[;, this, ., isHoisted, =, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;, this, ., isFunction, =, root, ., isFunction, (]
[=, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;, this, ., isFunction, =, root, ., isFunction, (, ), ;, if, (]
[., isHoisted, =, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;, this, ., isFunction, =, root, ., isFunction, (, ), ;]
[;, this, ., isFunction, =, root, ., isFunction, (, ), ;, if, (, root, ., getParent, (, ), !=, null]
[., isHoistedFunctionDeclaration, (, root, ), ;, this, ., isFunction, =, root, ., isFunction, (, ), ;, if, (, root, .]
[), ;, this, ., isFunction, =, root, ., isFunction, (, ), ;, if, (, root, ., getParent, (, ), !=]
[=, root, ., isFunction, (, ), ;, if, (, root, ., getParent, (, ), !=, null, ), {, int, pType]
[., isFunction, =, root, ., isFunction, (, ), ;, if, (, root, ., getParent, (, ), !=, null, ), {]
[;, if, (, root, ., getParent, (, ), !=, null, ), {, int, pType, =, root, ., getParent, (, )]
[., isFunction, (, ), ;, if, (, root, ., getParent, (, ), !=, null, ), {, int, pType, =, root]
[), {, int, pType, =, root, ., getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =, pType]
[!=, null, ), {, int, pType, =, root, ., getParent, (, ), ., getType, (, ), ;, this, ., isLoop]
[., getParent, (, ), !=, null, ), {, int, pType, =, root, ., getParent, (, ), ., getType, (, )]
[), {, int, pType, =, root, ., getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =, pType]
[;, this, ., isLoop, =, pType, ==, Token, ., DO, ||, pType, ==, Token, ., WHILE, ||, pType, ==, Token]
[., getType, (, ), ;, this, ., isLoop, =, pType, ==, Token, ., DO, ||, pType, ==, Token, ., WHILE]
[., getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =, pType, ==, Token, ., DO, ||, pType]
[=, pType, ==, Token, ., DO, ||, pType, ==, Token, ., WHILE, ||, pType, ==, Token, ., FOR, ;, }]
[., isLoop, =, pType, ==, Token, ., DO, ||, pType, ==, Token, ., WHILE, ||, pType, ==, Token, ., FOR]
[;, }, else, {, this, ., isLoop, =, false, ;, }, }, BasicBlock, getParent, (, ), {, return, parent, ;]
[||, pType, ==, Token, ., FOR, ;, }, else, {, this, ., isLoop, =, false, ;, }, }, BasicBlock, getParent]
[||, pType, ==, Token, ., WHILE, ||, pType, ==, Token, ., FOR, ;, }, else, {, this, ., isLoop, =]
[==, Token, ., DO, ||, pType, ==, Token, ., WHILE, ||, pType, ==, Token, ., FOR, ;, }, else, {]
[||, pType, ==, Token, ., WHILE, ||, pType, ==, Token, ., FOR, ;, }, else, {, this, ., isLoop, =]
[., DO, ||, pType, ==, Token, ., WHILE, ||, pType, ==, Token, ., FOR, ;, }, else, {, this, .]
[||, pType, ==, Token, ., FOR, ;, }, else, {, this, ., isLoop, =, false, ;, }, }, BasicBlock, getParent]
[==, Token, ., WHILE, ||, pType, ==, Token, ., FOR, ;, }, else, {, this, ., isLoop, =, false, ;]
[||, pType, ==, Token, ., FOR, ;, }, else, {, this, ., isLoop, =, false, ;, }, }, BasicBlock, getParent]
[., WHILE, ||, pType, ==, Token, ., FOR, ;, }, else, {, this, ., isLoop, =, false, ;, }, }]
[;, }, else, {, this, ., isLoop, =, false, ;, }, }, BasicBlock, getParent, (, ), {, return, parent, ;]
[==, Token, ., FOR, ;, }, else, {, this, ., isLoop, =, false, ;, }, }, BasicBlock, getParent, (, )]
[;, }, else, {, this, ., isLoop, =, false, ;, }, }, BasicBlock, getParent, (, ), {, return, parent, ;]
[., FOR, ;, }, else, {, this, ., isLoop, =, false, ;, }, }, BasicBlock, getParent, (, ), {, return]
[=, false, ;, }, }, BasicBlock, getParent, (, ), {, return, parent, ;, }, boolean, isGlobalScopeBlock, (, ), {, return]
[., isLoop, =, false, ;, }, }, BasicBlock, getParent, (, ), {, return, parent, ;, }, boolean, isGlobalScopeBlock, (, )]
[;, }, }, BasicBlock, getParent, (, ), {, return, parent, ;, }, boolean, isGlobalScopeBlock, (, ), {, return, getParent, (]
[;, }, boolean, isGlobalScopeBlock, (, ), {, return, getParent, (, ), ==, null, ;, }, boolean, provablyExecutesBefore, (, BasicBlock, thatBlock]
[;, }, boolean, provablyExecutesBefore, (, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;, currentBlock, !=]
[==, null, ;, }, boolean, provablyExecutesBefore, (, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;]
[;, }, boolean, provablyExecutesBefore, (, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;, currentBlock, !=]
[=, thatBlock, ;, currentBlock, !=, null, &&, currentBlock, !=, this, ;, currentBlock, =, currentBlock, ., getParent, (, ), ), {]
[;, currentBlock, !=, null, &&, currentBlock, !=, this, ;, currentBlock, =, currentBlock, ., getParent, (, ), ), {, if, (]
[;, currentBlock, =, currentBlock, ., getParent, (, ), ), {, if, (, currentBlock, ., isHoisted, ), {, return, false, ;]
[&&, currentBlock, !=, this, ;, currentBlock, =, currentBlock, ., getParent, (, ), ), {, if, (, currentBlock, ., isHoisted, )]
[!=, null, &&, currentBlock, !=, this, ;, currentBlock, =, currentBlock, ., getParent, (, ), ), {, if, (, currentBlock, .]
[&&, currentBlock, !=, this, ;, currentBlock, =, currentBlock, ., getParent, (, ), ), {, if, (, currentBlock, ., isHoisted, )]
[;, currentBlock, =, currentBlock, ., getParent, (, ), ), {, if, (, currentBlock, ., isHoisted, ), {, return, false, ;]
[!=, this, ;, currentBlock, =, currentBlock, ., getParent, (, ), ), {, if, (, currentBlock, ., isHoisted, ), {, return]
[;, currentBlock, =, currentBlock, ., getParent, (, ), ), {, if, (, currentBlock, ., isHoisted, ), {, return, false, ;]
[=, currentBlock, ., getParent, (, ), ), {, if, (, currentBlock, ., isHoisted, ), {, return, false, ;, }, }]
[), {, if, (, currentBlock, ., isHoisted, ), {, return, false, ;, }, }, if, (, currentBlock, ==, this, )]
[., getParent, (, ), ), {, if, (, currentBlock, ., isHoisted, ), {, return, false, ;, }, }, if, (]
[), {, return, false, ;, }, }, if, (, currentBlock, ==, this, ), {, return, true, ;, }, if, (]
[., isHoisted, ), {, return, false, ;, }, }, if, (, currentBlock, ==, this, ), {, return, true, ;, }]
[;, }, }, if, (, currentBlock, ==, this, ), {, return, true, ;, }, if, (, isGlobalScopeBlock, (, ), &&]
[), {, return, true, ;, }, if, (, isGlobalScopeBlock, (, ), &&, thatBlock, ., isGlobalScopeBlock, (, ), ), {, return]
[==, this, ), {, return, true, ;, }, if, (, isGlobalScopeBlock, (, ), &&, thatBlock, ., isGlobalScopeBlock, (, ), )]
[), {, return, true, ;, }, if, (, isGlobalScopeBlock, (, ), &&, thatBlock, ., isGlobalScopeBlock, (, ), ), {, return]
[;, }, if, (, isGlobalScopeBlock, (, ), &&, thatBlock, ., isGlobalScopeBlock, (, ), ), {, return, true, ;, }, return]
[), {, return, true, ;, }, return, false, ;, }, }, }]
[&&, thatBlock, ., isGlobalScopeBlock, (, ), ), {, return, true, ;, }, return, false, ;, }, }, }]
[), {, return, true, ;, }, return, false, ;, }, }, }]
[., isGlobalScopeBlock, (, ), ), {, return, true, ;, }, return, false, ;, }, }, }]
[;, }, return, false, ;, }, }, }]
[;, }, }, }]
