[,, SpecializationAwareCompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, SpecializeModule, ., SpecializationState, specializationState, ;, DevirtualizePrototypeMethods, (, AbstractCompiler, compiler, ), {]
[,, SpecializationAwareCompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, SpecializeModule, ., SpecializationState, specializationState, ;, DevirtualizePrototypeMethods, (, AbstractCompiler, compiler, ), {]
[final, AbstractCompiler, compiler, ;, private, SpecializeModule, ., SpecializationState, specializationState, ;, DevirtualizePrototypeMethods, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[{, this, ., compiler, =, compiler, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {]
[{, this, ., compiler, =, compiler, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {]
[=, compiler, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {, this, ., specializationState, =]
[=, state, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (]
[public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (]
[,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,]
[), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;]
[SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (]
[=, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,]
[SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, for, (, DefinitionSite, defSite, :]
[Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, for, (, DefinitionSite, defSite, :]
[,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {]
[root, ,, SimpleDefinitionFinder, definitions, ), {, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, rewriteDefinitionIfEligible, (]
[SimpleDefinitionFinder, definitions, ), {, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, rewriteDefinitionIfEligible, (, defSite, ,]
[(, defSite, ,, definitions, ), ;, }, }, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =]
[(, defSite, ,, definitions, ), ;, }, }, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =]
[}, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =, site, ., node, ;, Node, parent, =]
[}, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =, site, ., node, ;, Node, parent, =]
[site, ), {, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return]
[site, ), {, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return]
[), {, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return, (]
[), {, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return, (]
[), {, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return, (]
[., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==]
[Node, parent, =, node, ., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==, node, ), &&]
[Node, parent, =, node, ., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==, node, ), &&]
[&&, parent, ., isCall, (, ), ;, }, private, static, boolean, isPrototypeMethodDefinition, (, Node, node, ), {, Node, parent, =]
[&&, parent, ., isCall, (, ), ;, }, private, static, boolean, isPrototypeMethodDefinition, (, Node, node, ), {, Node, parent, =]
[private, static, boolean, isPrototypeMethodDefinition, (, Node, node, ), {, Node, parent, =, node, ., getParent, (, ), ;, if, (]
[private, static, boolean, isPrototypeMethodDefinition, (, Node, node, ), {, Node, parent, =, node, ., getParent, (, ), ;, if, (]
[boolean, isPrototypeMethodDefinition, (, Node, node, ), {, Node, parent, =, node, ., getParent, (, ), ;, if, (, parent, ==]
[node, ), {, Node, parent, =, node, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return]
[node, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, false, ;, }, Node, gramp, =]
[node, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, false, ;, }, Node, gramp, =]
[parent, ==, null, ), {, return, false, ;, }, Node, gramp, =, parent, ., getParent, (, ), ;, if, (]
[parent, ==, null, ), {, return, false, ;, }, Node, gramp, =, parent, ., getParent, (, ), ;, if, (]
[null, ), {, return, false, ;, }, Node, gramp, =, parent, ., getParent, (, ), ;, if, (, gramp, ==]
[false, ;, }, Node, gramp, =, parent, ., getParent, (, ), ;, if, (, gramp, ==, null, ), {, return]
[=, parent, ., getParent, (, ), ;, if, (, gramp, ==, null, ), {, return, false, ;, }, if, (]
[=, parent, ., getParent, (, ), ;, if, (, gramp, ==, null, ), {, return, false, ;, }, if, (]
[gramp, ==, null, ), {, return, false, ;, }, if, (, node, ., isGetProp, (, ), ), {, if, (]
[gramp, ==, null, ), {, return, false, ;, }, if, (, node, ., isGetProp, (, ), ), {, if, (]
[gramp, ==, null, ), {, return, false, ;, }, if, (, node, ., isGetProp, (, ), ), {, if, (]
[false, ;, }, if, (, node, ., isGetProp, (, ), ), {, if, (, parent, ., getFirstChild, (, ), !=]
[(, node, ., isGetProp, (, ), ), {, if, (, parent, ., getFirstChild, (, ), !=, node, ), {, return]
[), ), {, if, (, parent, ., getFirstChild, (, ), !=, node, ), {, return, false, ;, }, if, (]
[), {, if, (, parent, ., getFirstChild, (, ), !=, node, ), {, return, false, ;, }, if, (, !]
[), {, if, (, parent, ., getFirstChild, (, ), !=, node, ), {, return, false, ;, }, if, (, !]
[parent, ., getFirstChild, (, ), !=, node, ), {, return, false, ;, }, if, (, !, NodeUtil, ., isExprAssign, (]
[!=, node, ), {, return, false, ;, }, if, (, !, NodeUtil, ., isExprAssign, (, gramp, ), ), {, return]
[;, }, if, (, !, NodeUtil, ., isExprAssign, (, gramp, ), ), {, return, false, ;, }, Node, functionNode, =]
[;, }, if, (, !, NodeUtil, ., isExprAssign, (, gramp, ), ), {, return, false, ;, }, Node, functionNode, =]
[(, gramp, ), ), {, return, false, ;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (]
[(, gramp, ), ), {, return, false, ;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (]
[gramp, ), ), {, return, false, ;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (, (]
[gramp, ), ), {, return, false, ;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (, (]
[), {, return, false, ;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (, (, functionNode, ==]
[false, ;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (, (, functionNode, ==, null, ), ||]
[;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (, (, functionNode, ==, null, ), ||, !]
[;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (, (, functionNode, ==, null, ), ||, !]
[(, ), ;, if, (, (, functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, ), ), {, return]
[functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, nameNode, =]
[functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, nameNode, =]
[., isFunction, (, ), ), {, return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return]
[., isFunction, (, ), ), {, return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return]
[., isFunction, (, ), ), {, return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return]
[return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return, nameNode, ., isGetProp, (, ), &&]
[return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return, nameNode, ., isGetProp, (, ), &&]
[return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return, nameNode, ., isGetProp, (, ), &&]
[return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return, nameNode, ., isGetProp, (, ), &&]
[;, return, nameNode, ., isGetProp, (, ), &&, nameNode, ., getLastChild, (, ), ., getString, (, ), ., equals, (]
[&&, nameNode, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ;, }, else, if, (]
[&&, nameNode, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ;, }, else, if, (]
[getString, (, ), ., equals, (, "prototype", ), ;, }, else, if, (, node, ., isStringKey, (, ), ), {]
[getString, (, ), ., equals, (, "prototype", ), ;, }, else, if, (, node, ., isStringKey, (, ), ), {]
[equals, (, "prototype", ), ;, }, else, if, (, node, ., isStringKey, (, ), ), {, Preconditions, ., checkState, (]
[equals, (, "prototype", ), ;, }, else, if, (, node, ., isStringKey, (, ), ), {, Preconditions, ., checkState, (]
[node, ., isStringKey, (, ), ), {, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, if, (]
[., isStringKey, (, ), ), {, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, if, (, !]
[., isStringKey, (, ), ), {, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, if, (, !]
[checkState, (, parent, ., isObjectLit, (, ), ), ;, if, (, !, gramp, ., isAssign, (, ), ), {, return]
[(, ), ), ;, if, (, !, gramp, ., isAssign, (, ), ), {, return, false, ;, }, if, (]
[(, ), ), ;, if, (, !, gramp, ., isAssign, (, ), ), {, return, false, ;, }, if, (]
[(, ), ), ;, if, (, !, gramp, ., isAssign, (, ), ), {, return, false, ;, }, if, (]
[!, gramp, ., isAssign, (, ), ), {, return, false, ;, }, if, (, gramp, ., getLastChild, (, ), !=]
[(, ), ), {, return, false, ;, }, if, (, gramp, ., getLastChild, (, ), !=, parent, ), {, return]
[;, }, if, (, gramp, ., getLastChild, (, ), !=, parent, ), {, return, false, ;, }, Node, greatGramp, =]
[;, }, if, (, gramp, ., getLastChild, (, ), !=, parent, ), {, return, false, ;, }, Node, greatGramp, =]
[), !=, parent, ), {, return, false, ;, }, Node, greatGramp, =, gramp, ., getParent, (, ), ;, if, (]
[), !=, parent, ), {, return, false, ;, }, Node, greatGramp, =, gramp, ., getParent, (, ), ;, if, (]
[), !=, parent, ), {, return, false, ;, }, Node, greatGramp, =, gramp, ., getParent, (, ), ;, if, (]
[parent, ), {, return, false, ;, }, Node, greatGramp, =, gramp, ., getParent, (, ), ;, if, (, greatGramp, ==]
[{, return, false, ;, }, Node, greatGramp, =, gramp, ., getParent, (, ), ;, if, (, greatGramp, ==, null, ||]
[return, false, ;, }, Node, greatGramp, =, gramp, ., getParent, (, ), ;, if, (, greatGramp, ==, null, ||, !]
[return, false, ;, }, Node, greatGramp, =, gramp, ., getParent, (, ), ;, if, (, greatGramp, ==, null, ||, !]
[., getParent, (, ), ;, if, (, greatGramp, ==, null, ||, !, greatGramp, ., isExprResult, (, ), ), {, return]
[(, greatGramp, ==, null, ||, !, greatGramp, ., isExprResult, (, ), ), {, return, false, ;, }, Node, functionNode, =]
[(, greatGramp, ==, null, ||, !, greatGramp, ., isExprResult, (, ), ), {, return, false, ;, }, Node, functionNode, =]
[isExprResult, (, ), ), {, return, false, ;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (]
[isExprResult, (, ), ), {, return, false, ;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (]
[(, ), ), {, return, false, ;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (, (]
[(, ), ), {, return, false, ;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (, (]
[), {, return, false, ;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (, (, functionNode, ==]
[false, ;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (, (, functionNode, ==, null, ), ||]
[;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (, (, functionNode, ==, null, ), ||, !]
[;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (, (, functionNode, ==, null, ), ||, !]
[(, ), ;, if, (, (, functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, ), ), {, return]
[functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, target, =]
[functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, target, =]
[., isFunction, (, ), ), {, return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return]
[., isFunction, (, ), ), {, return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return]
[., isFunction, (, ), ), {, return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return]
[return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return, target, ., isGetProp, (, ), &&]
[return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return, target, ., isGetProp, (, ), &&]
[return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return, target, ., isGetProp, (, ), &&]
[return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return, target, ., isGetProp, (, ), &&]
[;, return, target, ., isGetProp, (, ), &&, target, ., getLastChild, (, ), ., getString, (, ), ., equals, (]
[&&, target, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ;, }, else, {, return]
[), ;, }, else, {, return, false, ;, }, }, private, String, getMethodName, (, Node, node, ), {, if, (]
[), ;, }, else, {, return, false, ;, }, }, private, String, getMethodName, (, Node, node, ), {, if, (]
[}, }, private, String, getMethodName, (, Node, node, ), {, if, (, node, ., isGetProp, (, ), ), {, return]
[}, }, private, String, getMethodName, (, Node, node, ), {, if, (, node, ., isGetProp, (, ), ), {, return]
[}, }, private, String, getMethodName, (, Node, node, ), {, if, (, node, ., isGetProp, (, ), ), {, return]
[isGetProp, (, ), ), {, return, node, ., getLastChild, (, ), ., getString, (, ), ;, }, else, if, (]
[isGetProp, (, ), ), {, return, node, ., getLastChild, (, ), ., getString, (, ), ;, }, else, if, (]
[getLastChild, (, ), ., getString, (, ), ;, }, else, if, (, node, ., isStringKey, (, ), ), {, return]
[getLastChild, (, ), ., getString, (, ), ;, }, else, if, (, node, ., isStringKey, (, ), ), {, return]
[if, (, node, ., isStringKey, (, ), ), {, return, node, ., getString, (, ), ;, }, else, {, throw]
[., isStringKey, (, ), ), {, return, node, ., getString, (, ), ;, }, else, {, throw, new, IllegalStateException, (]
[else, {, throw, new, IllegalStateException, (, "unexpected", ), ;, }, }, private, String, getRewrittenMethodName, (, String, originalMethodName, ), {, return]
[else, {, throw, new, IllegalStateException, (, "unexpected", ), ;, }, }, private, String, getRewrittenMethodName, (, String, originalMethodName, ), {, return]
[throw, new, IllegalStateException, (, "unexpected", ), ;, }, }, private, String, getRewrittenMethodName, (, String, originalMethodName, ), {, return, "JSCompiler_StaticMethods_", +]
[{, return, "JSCompiler_StaticMethods_", +, originalMethodName, ;, }, private, void, rewriteDefinitionIfEligible, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (]
[{, return, "JSCompiler_StaticMethods_", +, originalMethodName, ;, }, private, void, rewriteDefinitionIfEligible, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (]
[{, return, "JSCompiler_StaticMethods_", +, originalMethodName, ;, }, private, void, rewriteDefinitionIfEligible, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (]
[{, return, "JSCompiler_StaticMethods_", +, originalMethodName, ;, }, private, void, rewriteDefinitionIfEligible, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (]
[originalMethodName, ;, }, private, void, rewriteDefinitionIfEligible, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, defSite, ., inExterns, ||]
[;, }, private, void, rewriteDefinitionIfEligible, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, defSite, ., inExterns, ||, !]
[;, }, private, void, rewriteDefinitionIfEligible, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, defSite, ., inExterns, ||, !]
[rewriteDefinitionIfEligible, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, defSite, ., inExterns, ||, !, defSite, ., inGlobalScope, ||]
[(, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, defSite, ., inExterns, ||, !, defSite, ., inGlobalScope, ||, !]
[defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, defSite, ., inExterns, ||, !, defSite, ., inGlobalScope, ||, !, isEligibleDefinition, (]
[SimpleDefinitionFinder, defFinder, ), {, if, (, defSite, ., inExterns, ||, !, defSite, ., inGlobalScope, ||, !, isEligibleDefinition, (, defFinder, ,]
[!, defSite, ., inGlobalScope, ||, !, isEligibleDefinition, (, defFinder, ,, defSite, ), ), {, return, ;, }, Node, node, =]
[!, defSite, ., inGlobalScope, ||, !, isEligibleDefinition, (, defFinder, ,, defSite, ), ), {, return, ;, }, Node, node, =]
[isEligibleDefinition, (, defFinder, ,, defSite, ), ), {, return, ;, }, Node, node, =, defSite, ., node, ;, if, (]
[(, defFinder, ,, defSite, ), ), {, return, ;, }, Node, node, =, defSite, ., node, ;, if, (, !]
[,, defSite, ), ), {, return, ;, }, Node, node, =, defSite, ., node, ;, if, (, !, isPrototypeMethodDefinition, (]
[., node, ;, if, (, !, isPrototypeMethodDefinition, (, node, ), ), {, return, ;, }, for, (, Node, ancestor, =]
[., node, ;, if, (, !, isPrototypeMethodDefinition, (, node, ), ), {, return, ;, }, for, (, Node, ancestor, =]
[isPrototypeMethodDefinition, (, node, ), ), {, return, ;, }, for, (, Node, ancestor, =, node, ., getParent, (, ), ;]
[isPrototypeMethodDefinition, (, node, ), ), {, return, ;, }, for, (, Node, ancestor, =, node, ., getParent, (, ), ;]
[node, ), ), {, return, ;, }, for, (, Node, ancestor, =, node, ., getParent, (, ), ;, ancestor, !=]
[), {, return, ;, }, for, (, Node, ancestor, =, node, ., getParent, (, ), ;, ancestor, !=, null, ;]
[return, ;, }, for, (, Node, ancestor, =, node, ., getParent, (, ), ;, ancestor, !=, null, ;, ancestor, =]
[return, ;, }, for, (, Node, ancestor, =, node, ., getParent, (, ), ;, ancestor, !=, null, ;, ancestor, =]
[., getParent, (, ), ;, ancestor, !=, null, ;, ancestor, =, ancestor, ., getParent, (, ), ), {, if, (]
[., getParent, (, ), ;, ancestor, !=, null, ;, ancestor, =, ancestor, ., getParent, (, ), ), {, if, (]
[;, ancestor, !=, null, ;, ancestor, =, ancestor, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (]
[), ), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, return, ;, }, }, String, newMethodName, =]
[{, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, return, ;, }, }, String, newMethodName, =, getRewrittenMethodName, (]
[(, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, return, ;, }, }, String, newMethodName, =, getRewrittenMethodName, (, getMethodName, (]
[(, ancestor, ), ), {, return, ;, }, }, String, newMethodName, =, getRewrittenMethodName, (, getMethodName, (, node, ), ), ;]
[), ), {, return, ;, }, }, String, newMethodName, =, getRewrittenMethodName, (, getMethodName, (, node, ), ), ;, rewriteDefinition, (]
[{, return, ;, }, }, String, newMethodName, =, getRewrittenMethodName, (, getMethodName, (, node, ), ), ;, rewriteDefinition, (, node, ,]
[}, }, String, newMethodName, =, getRewrittenMethodName, (, getMethodName, (, node, ), ), ;, rewriteDefinition, (, node, ,, newMethodName, ), ;]
[String, newMethodName, =, getRewrittenMethodName, (, getMethodName, (, node, ), ), ;, rewriteDefinition, (, node, ,, newMethodName, ), ;, rewriteCallSites, (]
[=, getRewrittenMethodName, (, getMethodName, (, node, ), ), ;, rewriteDefinition, (, node, ,, newMethodName, ), ;, rewriteCallSites, (, defFinder, ,]
[=, getRewrittenMethodName, (, getMethodName, (, node, ), ), ;, rewriteDefinition, (, node, ,, newMethodName, ), ;, rewriteCallSites, (, defFinder, ,]
[(, node, ), ), ;, rewriteDefinition, (, node, ,, newMethodName, ), ;, rewriteCallSites, (, defFinder, ,, defSite, ., definition, ,]
[definition, ,, newMethodName, ), ;, }, private, boolean, isEligibleDefinition, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =]
[definition, ,, newMethodName, ), ;, }, private, boolean, isEligibleDefinition, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =]
[boolean, isEligibleDefinition, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =, definitionSite, ., definition, ;, JSModule, definitionModule, =]
[boolean, isEligibleDefinition, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =, definitionSite, ., definition, ;, JSModule, definitionModule, =]
[definitionSite, ), {, Definition, definition, =, definitionSite, ., definition, ;, JSModule, definitionModule, =, definitionSite, ., module, ;, Node, rValue, =]
[definitionSite, ), {, Definition, definition, =, definitionSite, ., definition, ;, JSModule, definitionModule, =, definitionSite, ., module, ;, Node, rValue, =]
[definition, ;, JSModule, definitionModule, =, definitionSite, ., module, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[definition, ;, JSModule, definitionModule, =, definitionSite, ., module, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[definition, ;, JSModule, definitionModule, =, definitionSite, ., module, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[definition, ;, JSModule, definitionModule, =, definitionSite, ., module, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[JSModule, definitionModule, =, definitionSite, ., module, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==]
[=, definitionSite, ., module, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||]
[definitionSite, ., module, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !]
[definitionSite, ., module, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !]
[=, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||]
[=, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||]
[(, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (]
[rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return]
[., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, Node, lValue, =]
[., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, Node, lValue, =]
[(, rValue, ), ), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (]
[(, rValue, ), ), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (]
[rValue, ), ), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (, (]
[rValue, ), ), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (, (]
[), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (, (, lValue, ==]
[false, ;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (, (, lValue, ==, null, ), ||]
[;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (, (, lValue, ==, null, ), ||, !]
[;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (, (, lValue, ==, null, ), ||, !]
[(, ), ;, if, (, (, lValue, ==, null, ), ||, !, lValue, ., isGetProp, (, ), ), {, return]
[lValue, ==, null, ), ||, !, lValue, ., isGetProp, (, ), ), {, return, false, ;, }, CodingConvention, codingConvention, =]
[lValue, ==, null, ), ||, !, lValue, ., isGetProp, (, ), ), {, return, false, ;, }, CodingConvention, codingConvention, =]
[isGetProp, (, ), ), {, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[isGetProp, (, ), ), {, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[{, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention, (, ), ;, if, (, codingConvention, ., isExported, (]
[{, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention, (, ), ;, if, (, codingConvention, ., isExported, (]
[{, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention, (, ), ;, if, (, codingConvention, ., isExported, (]
[;, if, (, codingConvention, ., isExported, (, lValue, ., getLastChild, (, ), ., getString, (, ), ), ), {, return]
[getLastChild, (, ), ., getString, (, ), ), ), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =]
[getLastChild, (, ), ., getString, (, ), ), ), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =]
[getString, (, ), ), ), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (]
[{, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, if, (]
[{, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, if, (]
[>, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, if, (, useSites, ., isEmpty, (, ), ), {, return]
[(, definition, ), ;, if, (, useSites, ., isEmpty, (, ), ), {, return, false, ;, }, JSModuleGraph, moduleGraph, =]
[(, definition, ), ;, if, (, useSites, ., isEmpty, (, ), ), {, return, false, ;, }, JSModuleGraph, moduleGraph, =]
[), {, return, false, ;, }, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, UseSite, site, :]
[}, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, UseSite, site, :, useSites, ), {, if, (]
[JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, UseSite, site, :, useSites, ), {, if, (, !]
[=, compiler, ., getModuleGraph, (, ), ;, for, (, UseSite, site, :, useSites, ), {, if, (, !, isCall, (]
[), ;, for, (, UseSite, site, :, useSites, ), {, if, (, !, isCall, (, site, ), ), {, return]
[:, useSites, ), {, if, (, !, isCall, (, site, ), ), {, return, false, ;, }, Node, nameNode, =]
[:, useSites, ), {, if, (, !, isCall, (, site, ), ), {, return, false, ;, }, Node, nameNode, =]
[!, isCall, (, site, ), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, if, (]
[!, isCall, (, site, ), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, if, (]
[!, isCall, (, site, ), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, if, (]
[(, site, ), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, if, (, specializationState, !=]
[), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, if, (, specializationState, !=, null, &&]
[), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, if, (, specializationState, !=, null, &&, !]
[), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, if, (, specializationState, !=, null, &&, !]
[;, }, Node, nameNode, =, site, ., node, ;, if, (, specializationState, !=, null, &&, !, specializationState, ., canFixupSpecializedFunctionContainingNode, (]
[site, ., node, ;, if, (, specializationState, !=, null, &&, !, specializationState, ., canFixupSpecializedFunctionContainingNode, (, nameNode, ), ), {, return]
[&&, !, specializationState, ., canFixupSpecializedFunctionContainingNode, (, nameNode, ), ), {, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =]
[&&, !, specializationState, ., canFixupSpecializedFunctionContainingNode, (, nameNode, ), ), {, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =]
[canFixupSpecializedFunctionContainingNode, (, nameNode, ), ), {, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (]
[{, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (]
[{, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (]
[{, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (]
[<, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size, (, ), >]
[=, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return]
[getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }]
[getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }]
[;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (]
[if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !]
[if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !]
[>, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;]
[>, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;]
[return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (]
[return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (]
[Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (]
[isEmpty, (, ), ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule, =]
[isEmpty, (, ), ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule, =]
[., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule, =, site, ., module, ;, if, (]
[., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule, =, site, ., module, ;, if, (]
[checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule, =, site, ., module, ;, if, (, (]
[checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule, =, site, ., module, ;, if, (, (]
[singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule, =, site, ., module, ;, if, (, (, definitionModule, !=]
[(, definition, ), ), ;, JSModule, callModule, =, site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&]
[definition, ), ), ;, JSModule, callModule, =, site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (]
[definition, ), ), ;, JSModule, callModule, =, site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (]
[), ), ;, JSModule, callModule, =, site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (, (]
[), ), ;, JSModule, callModule, =, site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (, (]
[;, JSModule, callModule, =, site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (, (, callModule, ==]
[=, site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (, (, callModule, ==, null, ), ||]
[site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (, (, callModule, ==, null, ), ||, !]
[site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (, (, callModule, ==, null, ), ||, !]
[if, (, (, definitionModule, !=, callModule, ), &&, (, (, callModule, ==, null, ), ||, !, moduleGraph, ., dependsOn, (]
[(, definitionModule, !=, callModule, ), &&, (, (, callModule, ==, null, ), ||, !, moduleGraph, ., dependsOn, (, callModule, ,]
[(, (, callModule, ==, null, ), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, ), ), ), {, return]
[), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, ), ), ), {, return, false, ;, }, }, return]
[private, void, rewriteCallSites, (, SimpleDefinitionFinder, defFinder, ,, Definition, definition, ,, String, newMethodName, ), {, Collection, <, UseSite, >, useSites, =]
[private, void, rewriteCallSites, (, SimpleDefinitionFinder, defFinder, ,, Definition, definition, ,, String, newMethodName, ), {, Collection, <, UseSite, >, useSites, =]
[SimpleDefinitionFinder, defFinder, ,, Definition, definition, ,, String, newMethodName, ), {, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (]
[), {, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :]
[useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Node, node, =]
[useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Node, node, =]
[), ;, for, (, UseSite, site, :, useSites, ), {, Node, node, =, site, ., node, ;, Node, parent, =]
[), ;, for, (, UseSite, site, :, useSites, ), {, Node, node, =, site, ., node, ;, Node, parent, =]
[{, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, Node, objectNode, =]
[{, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, Node, objectNode, =]
[node, ;, Node, parent, =, node, ., getParent, (, ), ;, Node, objectNode, =, node, ., getFirstChild, (, ), ;]
[node, ;, Node, parent, =, node, ., getParent, (, ), ;, Node, objectNode, =, node, ., getFirstChild, (, ), ;]
[=, node, ., getParent, (, ), ;, Node, objectNode, =, node, ., getFirstChild, (, ), ;, node, ., removeChild, (]
[getParent, (, ), ;, Node, objectNode, =, node, ., getFirstChild, (, ), ;, node, ., removeChild, (, objectNode, ), ;]
[getParent, (, ), ;, Node, objectNode, =, node, ., getFirstChild, (, ), ;, node, ., removeChild, (, objectNode, ), ;]
[Node, objectNode, =, node, ., getFirstChild, (, ), ;, node, ., removeChild, (, objectNode, ), ;, parent, ., replaceChild, (]
[=, node, ., getFirstChild, (, ), ;, node, ., removeChild, (, objectNode, ), ;, parent, ., replaceChild, (, node, ,]
[getFirstChild, (, ), ;, node, ., removeChild, (, objectNode, ), ;, parent, ., replaceChild, (, node, ,, objectNode, ), ;]
[getFirstChild, (, ), ;, node, ., removeChild, (, objectNode, ), ;, parent, ., replaceChild, (, node, ,, objectNode, ), ;]
[node, ., removeChild, (, objectNode, ), ;, parent, ., replaceChild, (, node, ,, objectNode, ), ;, parent, ., addChildToFront, (]
[node, ., removeChild, (, objectNode, ), ;, parent, ., replaceChild, (, node, ,, objectNode, ), ;, parent, ., addChildToFront, (]
[node, ., removeChild, (, objectNode, ), ;, parent, ., replaceChild, (, node, ,, objectNode, ), ;, parent, ., addChildToFront, (]
[objectNode, ), ;, parent, ., replaceChild, (, node, ,, objectNode, ), ;, parent, ., addChildToFront, (, IR, ., name, (]
[replaceChild, (, node, ,, objectNode, ), ;, parent, ., addChildToFront, (, IR, ., name, (, newMethodName, ), ., srcref, (]
[objectNode, ), ;, parent, ., addChildToFront, (, IR, ., name, (, newMethodName, ), ., srcref, (, node, ), ), ;]
[objectNode, ), ;, parent, ., addChildToFront, (, IR, ., name, (, newMethodName, ), ., srcref, (, node, ), ), ;]
[., addChildToFront, (, IR, ., name, (, newMethodName, ), ., srcref, (, node, ), ), ;, Preconditions, ., checkState, (]
[., addChildToFront, (, IR, ., name, (, newMethodName, ), ., srcref, (, node, ), ), ;, Preconditions, ., checkState, (]
[newMethodName, ), ., srcref, (, node, ), ), ;, Preconditions, ., checkState, (, parent, ., isCall, (, ), ), ;]
[newMethodName, ), ., srcref, (, node, ), ), ;, Preconditions, ., checkState, (, parent, ., isCall, (, ), ), ;]
[(, node, ), ), ;, Preconditions, ., checkState, (, parent, ., isCall, (, ), ), ;, parent, ., putBooleanProp, (]
[(, node, ), ), ;, Preconditions, ., checkState, (, parent, ., isCall, (, ), ), ;, parent, ., putBooleanProp, (]
[;, Preconditions, ., checkState, (, parent, ., isCall, (, ), ), ;, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[checkState, (, parent, ., isCall, (, ), ), ;, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[checkState, (, parent, ., isCall, (, ), ), ;, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[;, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (]
[;, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, specializationState, !=]
[Node, ., FREE_CALL, ,, true, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, specializationState, !=, null, ), {]
[Node, ., FREE_CALL, ,, true, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, specializationState, !=, null, ), {]
[true, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportSpecializedFunctionContainingNode, (]
[parent, ), ;, }, }, }, private, void, rewriteDefinition, (, Node, node, ,, String, newMethodName, ), {, boolean, isObjLitDefKey, =]
[parent, ), ;, }, }, }, private, void, rewriteDefinition, (, Node, node, ,, String, newMethodName, ), {, boolean, isObjLitDefKey, =]
[(, Node, node, ,, String, newMethodName, ), {, boolean, isObjLitDefKey, =, node, ., isStringKey, (, ), ;, Node, parent, =]
[(, Node, node, ,, String, newMethodName, ), {, boolean, isObjLitDefKey, =, node, ., isStringKey, (, ), ;, Node, parent, =]
[isObjLitDefKey, =, node, ., isStringKey, (, ), ;, Node, parent, =, node, ., getParent, (, ), ;, Node, refNode, =]
[isObjLitDefKey, =, node, ., isStringKey, (, ), ;, Node, parent, =, node, ., getParent, (, ), ;, Node, refNode, =]
[node, ., isStringKey, (, ), ;, Node, parent, =, node, ., getParent, (, ), ;, Node, refNode, =, isObjLitDefKey, ?]
[isStringKey, (, ), ;, Node, parent, =, node, ., getParent, (, ), ;, Node, refNode, =, isObjLitDefKey, ?, node, :]
[isStringKey, (, ), ;, Node, parent, =, node, ., getParent, (, ), ;, Node, refNode, =, isObjLitDefKey, ?, node, :]
[getParent, (, ), ;, Node, refNode, =, isObjLitDefKey, ?, node, :, parent, ., getFirstChild, (, ), ;, Node, newNameNode, =]
[getParent, (, ), ;, Node, refNode, =, isObjLitDefKey, ?, node, :, parent, ., getFirstChild, (, ), ;, Node, newNameNode, =]
[getParent, (, ), ;, Node, refNode, =, isObjLitDefKey, ?, node, :, parent, ., getFirstChild, (, ), ;, Node, newNameNode, =]
[Node, refNode, =, isObjLitDefKey, ?, node, :, parent, ., getFirstChild, (, ), ;, Node, newNameNode, =, IR, ., name, (]
[node, :, parent, ., getFirstChild, (, ), ;, Node, newNameNode, =, IR, ., name, (, newMethodName, ), ., copyInformationFrom, (]
[), ;, Node, newNameNode, =, IR, ., name, (, newMethodName, ), ., copyInformationFrom, (, refNode, ), ;, Node, newVarNode, =]
[), ;, Node, newNameNode, =, IR, ., name, (, newMethodName, ), ., copyInformationFrom, (, refNode, ), ;, Node, newVarNode, =]
[), ;, Node, newNameNode, =, IR, ., name, (, newMethodName, ), ., copyInformationFrom, (, refNode, ), ;, Node, newVarNode, =]
[=, IR, ., name, (, newMethodName, ), ., copyInformationFrom, (, refNode, ), ;, Node, newVarNode, =, IR, ., var, (]
[newMethodName, ), ., copyInformationFrom, (, refNode, ), ;, Node, newVarNode, =, IR, ., var, (, newNameNode, ), ., copyInformationFrom, (]
[Node, newVarNode, =, IR, ., var, (, newNameNode, ), ., copyInformationFrom, (, refNode, ), ;, Node, functionNode, ;, if, (]
[newVarNode, =, IR, ., var, (, newNameNode, ), ., copyInformationFrom, (, refNode, ), ;, Node, functionNode, ;, if, (, !]
[., var, (, newNameNode, ), ., copyInformationFrom, (, refNode, ), ;, Node, functionNode, ;, if, (, !, isObjLitDefKey, ), {]
[., var, (, newNameNode, ), ., copyInformationFrom, (, refNode, ), ;, Node, functionNode, ;, if, (, !, isObjLitDefKey, ), {]
[), ., copyInformationFrom, (, refNode, ), ;, Node, functionNode, ;, if, (, !, isObjLitDefKey, ), {, Preconditions, ., checkState, (]
[), ., copyInformationFrom, (, refNode, ), ;, Node, functionNode, ;, if, (, !, isObjLitDefKey, ), {, Preconditions, ., checkState, (]
[Node, functionNode, ;, if, (, !, isObjLitDefKey, ), {, Preconditions, ., checkState, (, parent, ., isAssign, (, ), ), ;]
[;, if, (, !, isObjLitDefKey, ), {, Preconditions, ., checkState, (, parent, ., isAssign, (, ), ), ;, functionNode, =]
[;, if, (, !, isObjLitDefKey, ), {, Preconditions, ., checkState, (, parent, ., isAssign, (, ), ), ;, functionNode, =]
[checkState, (, parent, ., isAssign, (, ), ), ;, functionNode, =, parent, ., getLastChild, (, ), ;, Node, expr, =]
[checkState, (, parent, ., isAssign, (, ), ), ;, functionNode, =, parent, ., getLastChild, (, ), ;, Node, expr, =]
[functionNode, =, parent, ., getLastChild, (, ), ;, Node, expr, =, parent, ., getParent, (, ), ;, Node, block, =]
[functionNode, =, parent, ., getLastChild, (, ), ;, Node, expr, =, parent, ., getParent, (, ), ;, Node, block, =]
[), ;, Node, expr, =, parent, ., getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;]
[), ;, Node, expr, =, parent, ., getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;]
[=, parent, ., getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;, parent, ., removeChild, (]
[getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;, parent, ., removeChild, (, functionNode, ), ;]
[getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;, parent, ., removeChild, (, functionNode, ), ;]
[Node, block, =, expr, ., getParent, (, ), ;, parent, ., removeChild, (, functionNode, ), ;, newNameNode, ., addChildToFront, (]
[expr, ., getParent, (, ), ;, parent, ., removeChild, (, functionNode, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;]
[expr, ., getParent, (, ), ;, parent, ., removeChild, (, functionNode, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;]
[), ;, parent, ., removeChild, (, functionNode, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., replaceChild, (]
[parent, ., removeChild, (, functionNode, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., replaceChild, (, expr, ,]
[), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., replaceChild, (, expr, ,, newVarNode, ), ;, if, (]
[), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., replaceChild, (, expr, ,, newVarNode, ), ;, if, (]
[newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., replaceChild, (, expr, ,, newVarNode, ), ;, if, (, specializationState, !=]
[(, functionNode, ), ;, block, ., replaceChild, (, expr, ,, newVarNode, ), ;, if, (, specializationState, !=, null, ), {]
[(, functionNode, ), ;, block, ., replaceChild, (, expr, ,, newVarNode, ), ;, if, (, specializationState, !=, null, ), {]
[block, ., replaceChild, (, expr, ,, newVarNode, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (]
[replaceChild, (, expr, ,, newVarNode, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,]
[if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, else, {]
[if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, else, {]
[null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, else, {, Preconditions, ., checkState, (]
[null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, else, {, Preconditions, ., checkState, (]
[functionNode, ,, block, ), ;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;]
[block, ), ;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, functionNode, =]
[block, ), ;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, functionNode, =]
[checkState, (, parent, ., isObjectLit, (, ), ), ;, functionNode, =, node, ., getFirstChild, (, ), ;, Node, assign, =]
[checkState, (, parent, ., isObjectLit, (, ), ), ;, functionNode, =, node, ., getFirstChild, (, ), ;, Node, assign, =]
[functionNode, =, node, ., getFirstChild, (, ), ;, Node, assign, =, parent, ., getParent, (, ), ;, Node, expr, =]
[functionNode, =, node, ., getFirstChild, (, ), ;, Node, assign, =, parent, ., getParent, (, ), ;, Node, expr, =]
[assign, =, parent, ., getParent, (, ), ;, Node, expr, =, assign, ., getParent, (, ), ;, Node, block, =]
[assign, =, parent, ., getParent, (, ), ;, Node, expr, =, assign, ., getParent, (, ), ;, Node, block, =]
[), ;, Node, expr, =, assign, ., getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;]
[), ;, Node, expr, =, assign, ., getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;]
[=, assign, ., getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;, node, ., removeChild, (]
[getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;, node, ., removeChild, (, functionNode, ), ;]
[getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;, node, ., removeChild, (, functionNode, ), ;]
[Node, block, =, expr, ., getParent, (, ), ;, node, ., removeChild, (, functionNode, ), ;, parent, ., removeChild, (]
[expr, ., getParent, (, ), ;, node, ., removeChild, (, functionNode, ), ;, parent, ., removeChild, (, node, ), ;]
[expr, ., getParent, (, ), ;, node, ., removeChild, (, functionNode, ), ;, parent, ., removeChild, (, node, ), ;]
[), ;, node, ., removeChild, (, functionNode, ), ;, parent, ., removeChild, (, node, ), ;, newNameNode, ., addChildToFront, (]
[., removeChild, (, functionNode, ), ;, parent, ., removeChild, (, node, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;]
[., removeChild, (, functionNode, ), ;, parent, ., removeChild, (, node, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;]
[), ;, parent, ., removeChild, (, node, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., addChildAfter, (]
[parent, ., removeChild, (, node, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., addChildAfter, (, newVarNode, ,]
[), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (]
[), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (]
[newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (, specializationState, !=]
[(, functionNode, ), ;, block, ., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (, specializationState, !=, null, ), {]
[(, functionNode, ), ;, block, ., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (, specializationState, !=, null, ), {]
[block, ., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (]
[addChildAfter, (, newVarNode, ,, expr, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,]
[(, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, String, self, =]
[(, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, String, self, =]
[!=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, String, self, =, newMethodName, +]
[., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, String, self, =, newMethodName, +, "$self", ;, Node, argList, =]
[., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, String, self, =, newMethodName, +, "$self", ;, Node, argList, =]
[., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, String, self, =, newMethodName, +, "$self", ;, Node, argList, =]
[String, self, =, newMethodName, +, "$self", ;, Node, argList, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;]
[String, self, =, newMethodName, +, "$self", ;, Node, argList, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;]
[+, "$self", ;, Node, argList, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, argList, ., addChildToFront, (]
[+, "$self", ;, Node, argList, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, argList, ., addChildToFront, (]
[+, "$self", ;, Node, argList, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, argList, ., addChildToFront, (]
[argList, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, argList, ., addChildToFront, (, IR, ., name, (]
[(, ), ., getNext, (, ), ;, argList, ., addChildToFront, (, IR, ., name, (, self, ), ., copyInformationFrom, (]
[argList, ., addChildToFront, (, IR, ., name, (, self, ), ., copyInformationFrom, (, functionNode, ), ), ;, Node, body, =]
[argList, ., addChildToFront, (, IR, ., name, (, self, ), ., copyInformationFrom, (, functionNode, ), ), ;, Node, body, =]
[name, (, self, ), ., copyInformationFrom, (, functionNode, ), ), ;, Node, body, =, functionNode, ., getLastChild, (, ), ;]
[self, ), ., copyInformationFrom, (, functionNode, ), ), ;, Node, body, =, functionNode, ., getLastChild, (, ), ;, replaceReferencesToThis, (]
[., copyInformationFrom, (, functionNode, ), ), ;, Node, body, =, functionNode, ., getLastChild, (, ), ;, replaceReferencesToThis, (, body, ,]
[functionNode, ), ), ;, Node, body, =, functionNode, ., getLastChild, (, ), ;, replaceReferencesToThis, (, body, ,, self, ), ;]
[), ;, Node, body, =, functionNode, ., getLastChild, (, ), ;, replaceReferencesToThis, (, body, ,, self, ), ;, fixFunctionType, (]
[body, =, functionNode, ., getLastChild, (, ), ;, replaceReferencesToThis, (, body, ,, self, ), ;, fixFunctionType, (, functionNode, ), ;]
[body, =, functionNode, ., getLastChild, (, ), ;, replaceReferencesToThis, (, body, ,, self, ), ;, fixFunctionType, (, functionNode, ), ;]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, fixFunctionType, (, Node, functionNode, ), {, FunctionType, type, =]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, fixFunctionType, (, Node, functionNode, ), {, FunctionType, type, =]
[reportCodeChange, (, ), ;, }, private, void, fixFunctionType, (, Node, functionNode, ), {, FunctionType, type, =, JSType, ., toMaybeFunctionType, (]
[reportCodeChange, (, ), ;, }, private, void, fixFunctionType, (, Node, functionNode, ), {, FunctionType, type, =, JSType, ., toMaybeFunctionType, (]
[Node, functionNode, ), {, FunctionType, type, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (]
[Node, functionNode, ), {, FunctionType, type, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (]
[), {, FunctionType, type, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, type, !=]
[., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, type, !=, null, ), {, JSTypeRegistry, typeRegistry, =]
[., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, type, !=, null, ), {, JSTypeRegistry, typeRegistry, =]
[type, !=, null, ), {, JSTypeRegistry, typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, List, <, JSType, >, parameterTypes, =]
[type, !=, null, ), {, JSTypeRegistry, typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, List, <, JSType, >, parameterTypes, =]
[typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, List, <, JSType, >, parameterTypes, =, Lists, ., newArrayList, (, ), ;]
[typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, List, <, JSType, >, parameterTypes, =, Lists, ., newArrayList, (, ), ;]
[getTypeRegistry, (, ), ;, List, <, JSType, >, parameterTypes, =, Lists, ., newArrayList, (, ), ;, parameterTypes, ., add, (]
[getTypeRegistry, (, ), ;, List, <, JSType, >, parameterTypes, =, Lists, ., newArrayList, (, ), ;, parameterTypes, ., add, (]
[newArrayList, (, ), ;, parameterTypes, ., add, (, type, ., getTypeOfThis, (, ), ), ;, for, (, Node, param, :]
[newArrayList, (, ), ;, parameterTypes, ., add, (, type, ., getTypeOfThis, (, ), ), ;, for, (, Node, param, :]
[(, type, ., getTypeOfThis, (, ), ), ;, for, (, Node, param, :, type, ., getParameters, (, ), ), {]
[(, type, ., getTypeOfThis, (, ), ), ;, for, (, Node, param, :, type, ., getParameters, (, ), ), {]
[(, ), ), ;, for, (, Node, param, :, type, ., getParameters, (, ), ), {, parameterTypes, ., add, (]
[(, ), ), ;, for, (, Node, param, :, type, ., getParameters, (, ), ), {, parameterTypes, ., add, (]
[getParameters, (, ), ), {, parameterTypes, ., add, (, param, ., getJSType, (, ), ), ;, }, ObjectType, thisType, =]
[getParameters, (, ), ), {, parameterTypes, ., add, (, param, ., getJSType, (, ), ), ;, }, ObjectType, thisType, =]
[{, parameterTypes, ., add, (, param, ., getJSType, (, ), ), ;, }, ObjectType, thisType, =, typeRegistry, ., getNativeObjectType, (]
[{, parameterTypes, ., add, (, param, ., getJSType, (, ), ), ;, }, ObjectType, thisType, =, typeRegistry, ., getNativeObjectType, (]
[(, ), ), ;, }, ObjectType, thisType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, JSType, returnType, =]
[(, ), ), ;, }, ObjectType, thisType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, JSType, returnType, =]
[., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, JSType, returnType, =, type, ., getReturnType, (, ), ;, JSType, newType, =]
[., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, JSType, returnType, =, type, ., getReturnType, (, ), ;, JSType, newType, =]
[., UNKNOWN_TYPE, ), ;, JSType, returnType, =, type, ., getReturnType, (, ), ;, JSType, newType, =, typeRegistry, ., createFunctionType, (]
[), ;, JSType, returnType, =, type, ., getReturnType, (, ), ;, JSType, newType, =, typeRegistry, ., createFunctionType, (, thisType, ,]
[JSType, returnType, =, type, ., getReturnType, (, ), ;, JSType, newType, =, typeRegistry, ., createFunctionType, (, thisType, ,, returnType, ,]
[type, ., getReturnType, (, ), ;, JSType, newType, =, typeRegistry, ., createFunctionType, (, thisType, ,, returnType, ,, parameterTypes, ), ;]
[type, ., getReturnType, (, ), ;, JSType, newType, =, typeRegistry, ., createFunctionType, (, thisType, ,, returnType, ,, parameterTypes, ), ;]
[), ;, JSType, newType, =, typeRegistry, ., createFunctionType, (, thisType, ,, returnType, ,, parameterTypes, ), ;, functionNode, ., setJSType, (]
[setJSType, (, newType, ), ;, }, }, private, void, replaceReferencesToThis, (, Node, node, ,, String, name, ), {, if, (]
[setJSType, (, newType, ), ;, }, }, private, void, replaceReferencesToThis, (, Node, node, ,, String, name, ), {, if, (]
[name, ), {, if, (, node, ., isFunction, (, ), ), {, return, ;, }, for, (, Node, child, :]
[name, ), {, if, (, node, ., isFunction, (, ), ), {, return, ;, }, for, (, Node, child, :]
[), ), {, return, ;, }, for, (, Node, child, :, node, ., children, (, ), ), {, if, (]
[), ), {, return, ;, }, for, (, Node, child, :, node, ., children, (, ), ), {, if, (]
[:, node, ., children, (, ), ), {, if, (, child, ., isThis, (, ), ), {, Node, newName, =]
[:, node, ., children, (, ), ), {, if, (, child, ., isThis, (, ), ), {, Node, newName, =]
[(, ), ), {, if, (, child, ., isThis, (, ), ), {, Node, newName, =, IR, ., name, (]
[{, if, (, child, ., isThis, (, ), ), {, Node, newName, =, IR, ., name, (, name, ), ;]
[{, if, (, child, ., isThis, (, ), ), {, Node, newName, =, IR, ., name, (, name, ), ;]
[., isThis, (, ), ), {, Node, newName, =, IR, ., name, (, name, ), ;, newName, ., setJSType, (]
[., isThis, (, ), ), {, Node, newName, =, IR, ., name, (, name, ), ;, newName, ., setJSType, (]
[newName, =, IR, ., name, (, name, ), ;, newName, ., setJSType, (, child, ., getJSType, (, ), ), ;]
[newName, =, IR, ., name, (, name, ), ;, newName, ., setJSType, (, child, ., getJSType, (, ), ), ;]
[name, (, name, ), ;, newName, ., setJSType, (, child, ., getJSType, (, ), ), ;, node, ., replaceChild, (]
[name, ), ;, newName, ., setJSType, (, child, ., getJSType, (, ), ), ;, node, ., replaceChild, (, child, ,]
[(, child, ., getJSType, (, ), ), ;, node, ., replaceChild, (, child, ,, newName, ), ;, }, else, {]
[., getJSType, (, ), ), ;, node, ., replaceChild, (, child, ,, newName, ), ;, }, else, {, replaceReferencesToThis, (]
[(, ), ), ;, node, ., replaceChild, (, child, ,, newName, ), ;, }, else, {, replaceReferencesToThis, (, child, ,]
