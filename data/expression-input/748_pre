[., util, ., SortedSet, ;, class, ShadowVariables, implements, CompilerPass, {, private, final, Multimap, <, Node, ,, String, >, scopeUpRefMap, =]
[., util, ., SortedSet, ;, class, ShadowVariables, implements, CompilerPass, {, private, final, Multimap, <, Node, ,, String, >, scopeUpRefMap, =]
[String, >, scopeUpRefMap, =, HashMultimap, ., create, (, ), ;, private, final, Multimap, <, Var, ,, Node, >, varToNameUsage, =]
[String, >, scopeUpRefMap, =, HashMultimap, ., create, (, ), ;, private, final, Multimap, <, Var, ,, Node, >, varToNameUsage, =]
[,, Assignment, >, assignments, ,, SortedSet, <, Assignment, >, varsByFrequency, ,, Map, <, Node, ,, String, >, pseudoNameMap, ), {]
[,, Assignment, >, assignments, ,, SortedSet, <, Assignment, >, varsByFrequency, ,, Map, <, Node, ,, String, >, pseudoNameMap, ), {]
[,, SortedSet, <, Assignment, >, varsByFrequency, ,, Map, <, Node, ,, String, >, pseudoNameMap, ), {, this, ., compiler, =]
[<, Assignment, >, varsByFrequency, ,, Map, <, Node, ,, String, >, pseudoNameMap, ), {, this, ., compiler, =, compiler, ;]
[<, Assignment, >, varsByFrequency, ,, Map, <, Node, ,, String, >, pseudoNameMap, ), {, this, ., compiler, =, compiler, ;]
[,, Map, <, Node, ,, String, >, pseudoNameMap, ), {, this, ., compiler, =, compiler, ;, this, ., assignments, =]
[<, Node, ,, String, >, pseudoNameMap, ), {, this, ., compiler, =, compiler, ;, this, ., assignments, =, assignments, ;]
[<, Node, ,, String, >, pseudoNameMap, ), {, this, ., compiler, =, compiler, ;, this, ., assignments, =, assignments, ;]
[>, pseudoNameMap, ), {, this, ., compiler, =, compiler, ;, this, ., assignments, =, assignments, ;, this, ., varsByFrequency, =]
[), {, this, ., compiler, =, compiler, ;, this, ., assignments, =, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;]
[), {, this, ., compiler, =, compiler, ;, this, ., assignments, =, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;]
[compiler, =, compiler, ;, this, ., assignments, =, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap, =]
[compiler, ;, this, ., assignments, =, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap, =, pseudoNameMap, ;]
[compiler, ;, this, ., assignments, =, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap, =, pseudoNameMap, ;]
[assignments, =, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap, =, pseudoNameMap, ;, this, ., deltaPseudoNameMap, =]
[assignments, =, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap, =, pseudoNameMap, ;, this, ., deltaPseudoNameMap, =]
[Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherReferenceInfo, (, ), ), ;]
[externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherReferenceInfo, (, ), ), ;]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherReferenceInfo, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherReferenceInfo, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, root, ,, new, GatherReferenceInfo, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[(, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, DoShadowVariables, (, ), ), ;, if, (]
[(, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, DoShadowVariables, (, ), ), ;, if, (]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, DoShadowVariables, (, ), ), ;, if, (, oldPseudoNameMap, !=]
[., traverse, (, compiler, ,, root, ,, new, DoShadowVariables, (, ), ), ;, if, (, oldPseudoNameMap, !=, null, ), {]
[., traverse, (, compiler, ,, root, ,, new, DoShadowVariables, (, ), ), ;, if, (, oldPseudoNameMap, !=, null, ), {]
[,, root, ,, new, DoShadowVariables, (, ), ), ;, if, (, oldPseudoNameMap, !=, null, ), {, oldPseudoNameMap, ., putAll, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, NodeUtil, ., isReferenceName, (]
[Node, parent, ), {, if, (, !, NodeUtil, ., isReferenceName, (, n, ), ), {, return, ;, }, if, (]
[Node, parent, ), {, if, (, !, NodeUtil, ., isReferenceName, (, n, ), ), {, return, ;, }, if, (]
[), {, return, ;, }, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, Var, var, =]
[), {, return, ;, }, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, Var, var, =]
[), {, return, ;, }, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, Var, var, =]
[., inGlobalScope, (, ), ), {, return, ;, }, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[., inGlobalScope, (, ), ), {, return, ;, }, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[=, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==]
[(, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {, return, ;, }, if, (]
[(, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {, return, ;, }, if, (]
[(, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {, return, ;, }, if, (]
[;, }, if, (, var, ., getScope, (, ), ., isGlobal, (, ), ), {, return, ;, }, if, (]
[;, }, if, (, var, ., getScope, (, ), ., isGlobal, (, ), ), {, return, ;, }, if, (]
[;, }, if, (, var, ., getScope, (, ), ., isGlobal, (, ), ), {, return, ;, }, if, (]
[getScope, (, ), ., isGlobal, (, ), ), {, return, ;, }, if, (, var, ., getScope, (, ), !=]
[getScope, (, ), ., isGlobal, (, ), ), {, return, ;, }, if, (, var, ., getScope, (, ), !=]
[if, (, var, ., getScope, (, ), !=, t, ., getScope, (, ), ), {, for, (, Scope, s, =]
[if, (, var, ., getScope, (, ), !=, t, ., getScope, (, ), ), {, for, (, Scope, s, =]
[), !=, t, ., getScope, (, ), ), {, for, (, Scope, s, =, t, ., getScope, (, ), ;]
[), !=, t, ., getScope, (, ), ), {, for, (, Scope, s, =, t, ., getScope, (, ), ;]
[), !=, t, ., getScope, (, ), ), {, for, (, Scope, s, =, t, ., getScope, (, ), ;]
[t, ., getScope, (, ), ), {, for, (, Scope, s, =, t, ., getScope, (, ), ;, s, !=]
[t, ., getScope, (, ), ), {, for, (, Scope, s, =, t, ., getScope, (, ), ;, s, !=]
[{, for, (, Scope, s, =, t, ., getScope, (, ), ;, s, !=, var, ., getScope, (, ), &&]
[{, for, (, Scope, s, =, t, ., getScope, (, ), ;, s, !=, var, ., getScope, (, ), &&]
[t, ., getScope, (, ), ;, s, !=, var, ., getScope, (, ), &&, s, ., isLocal, (, ), ;]
[getScope, (, ), ;, s, !=, var, ., getScope, (, ), &&, s, ., isLocal, (, ), ;, s, =]
[getScope, (, ), ;, s, !=, var, ., getScope, (, ), &&, s, ., isLocal, (, ), ;, s, =]
[., getScope, (, ), &&, s, ., isLocal, (, ), ;, s, =, s, ., getParent, (, ), ), {]
[., getScope, (, ), &&, s, ., isLocal, (, ), ;, s, =, s, ., getParent, (, ), ), {]
[&&, s, ., isLocal, (, ), ;, s, =, s, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (]
[&&, s, ., isLocal, (, ), ;, s, =, s, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (]
[;, s, =, s, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, s, ., getRootNode, (, ), ,]
[;, s, =, s, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, s, ., getRootNode, (, ), ,]
[{, scopeUpRefMap, ., put, (, s, ., getRootNode, (, ), ,, var, ., name, ), ;, }, }, if, (]
[{, scopeUpRefMap, ., put, (, s, ., getRootNode, (, ), ,, var, ., name, ), ;, }, }, if, (]
[{, scopeUpRefMap, ., put, (, s, ., getRootNode, (, ), ,, var, ., name, ), ;, }, }, if, (]
[., getRootNode, (, ), ,, var, ., name, ), ;, }, }, if, (, var, ., getScope, (, ), ==]
[., getRootNode, (, ), ,, var, ., name, ), ;, }, }, if, (, var, ., getScope, (, ), ==]
[name, ), ;, }, }, if, (, var, ., getScope, (, ), ==, t, ., getScope, (, ), ), {]
[name, ), ;, }, }, if, (, var, ., getScope, (, ), ==, t, ., getScope, (, ), ), {]
[}, if, (, var, ., getScope, (, ), ==, t, ., getScope, (, ), ), {, scopeUpRefMap, ., put, (]
[}, if, (, var, ., getScope, (, ), ==, t, ., getScope, (, ), ), {, scopeUpRefMap, ., put, (]
[(, ), ==, t, ., getScope, (, ), ), {, scopeUpRefMap, ., put, (, t, ., getScopeRoot, (, ), ,]
[(, ), ==, t, ., getScope, (, ), ), {, scopeUpRefMap, ., put, (, t, ., getScopeRoot, (, ), ,]
[(, ), ), {, scopeUpRefMap, ., put, (, t, ., getScopeRoot, (, ), ,, var, ., name, ), ;, }]
[(, ), ), {, scopeUpRefMap, ., put, (, t, ., getScopeRoot, (, ), ,, var, ., name, ), ;, }]
[scopeUpRefMap, ., put, (, t, ., getScopeRoot, (, ), ,, var, ., name, ), ;, }, varToNameUsage, ., put, (]
[put, (, t, ., getScopeRoot, (, ), ,, var, ., name, ), ;, }, varToNameUsage, ., put, (, var, ,]
[class, DoShadowVariables, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Scope, s, =]
[class, DoShadowVariables, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Scope, s, =]
[Override, public, void, enterScope, (, NodeTraversal, t, ), {, Scope, s, =, t, ., getScope, (, ), ;, if, (]
[public, void, enterScope, (, NodeTraversal, t, ), {, Scope, s, =, t, ., getScope, (, ), ;, if, (, !]
[public, void, enterScope, (, NodeTraversal, t, ), {, Scope, s, =, t, ., getScope, (, ), ;, if, (, !]
[., getScope, (, ), ;, if, (, !, s, ., isLocal, (, ), ), {, return, ;, }, if, (]
[., getScope, (, ), ;, if, (, !, s, ., isLocal, (, ), ), {, return, ;, }, if, (]
[., getScope, (, ), ;, if, (, !, s, ., isLocal, (, ), ), {, return, ;, }, if, (]
[getParent, (, ), ., isGlobal, (, ), ), {, return, ;, }, for, (, Iterator, <, Var, >, vars, =]
[getParent, (, ), ., isGlobal, (, ), ), {, return, ;, }, for, (, Iterator, <, Var, >, vars, =]
[), ), {, return, ;, }, for, (, Iterator, <, Var, >, vars, =, s, ., getVars, (, ), ;]
[), ), {, return, ;, }, for, (, Iterator, <, Var, >, vars, =, s, ., getVars, (, ), ;]
[>, vars, =, s, ., getVars, (, ), ;, vars, ., hasNext, (, ), ;, ), {, Var, var, =]
[>, vars, =, s, ., getVars, (, ), ;, vars, ., hasNext, (, ), ;, ), {, Var, var, =]
[;, vars, ., hasNext, (, ), ;, ), {, Var, var, =, vars, ., next, (, ), ;, if, (]
[;, vars, ., hasNext, (, ), ;, ), {, Var, var, =, vars, ., next, (, ), ;, if, (]
[vars, ., next, (, ), ;, if, (, var, ., isBleedingFunction, (, ), ), {, continue, ;, }, if, (]
[vars, ., next, (, ), ;, if, (, var, ., isBleedingFunction, (, ), ), {, continue, ;, }, if, (]
[vars, ., next, (, ), ;, if, (, var, ., isBleedingFunction, (, ), ), {, continue, ;, }, if, (]
[var, ., isBleedingFunction, (, ), ), {, continue, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (]
[var, ., isBleedingFunction, (, ), ), {, continue, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (]
[), ), {, continue, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ,]
[), ), {, continue, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ,]
[isExported, (, var, ., name, ,, s, ., isLocal, (, ), ), ), {, continue, ;, }, Assignment, bestShadow, =]
[var, ., name, ,, s, ., isLocal, (, ), ), ), {, continue, ;, }, Assignment, bestShadow, =, findBestShadow, (]
[name, ,, s, ., isLocal, (, ), ), ), {, continue, ;, }, Assignment, bestShadow, =, findBestShadow, (, s, ,]
[(, ), ), ), {, continue, ;, }, Assignment, bestShadow, =, findBestShadow, (, s, ,, var, ), ;, if, (]
[(, ), ), ), {, continue, ;, }, Assignment, bestShadow, =, findBestShadow, (, s, ,, var, ), ;, if, (]
[), ), {, continue, ;, }, Assignment, bestShadow, =, findBestShadow, (, s, ,, var, ), ;, if, (, bestShadow, ==]
[findBestShadow, (, s, ,, var, ), ;, if, (, bestShadow, ==, null, ), {, continue, ;, }, Assignment, localAssignment, =]
[findBestShadow, (, s, ,, var, ), ;, if, (, bestShadow, ==, null, ), {, continue, ;, }, Assignment, localAssignment, =]
[var, ), ;, if, (, bestShadow, ==, null, ), {, continue, ;, }, Assignment, localAssignment, =, assignments, ., get, (]
[var, ), ;, if, (, bestShadow, ==, null, ), {, continue, ;, }, Assignment, localAssignment, =, assignments, ., get, (]
[{, continue, ;, }, Assignment, localAssignment, =, assignments, ., get, (, var, ., getName, (, ), ), ;, if, (]
[{, continue, ;, }, Assignment, localAssignment, =, assignments, ., get, (, var, ., getName, (, ), ), ;, if, (]
[{, continue, ;, }, Assignment, localAssignment, =, assignments, ., get, (, var, ., getName, (, ), ), ;, if, (]
[Assignment, localAssignment, =, assignments, ., get, (, var, ., getName, (, ), ), ;, if, (, bestShadow, ., count, <]
[Assignment, localAssignment, =, assignments, ., get, (, var, ., getName, (, ), ), ;, if, (, bestShadow, ., count, <]
[., getName, (, ), ), ;, if, (, bestShadow, ., count, <, localAssignment, ., count, ), {, continue, ;, }]
[(, ), ), ;, if, (, bestShadow, ., count, <, localAssignment, ., count, ), {, continue, ;, }, doShadow, (]
[), ;, if, (, bestShadow, ., count, <, localAssignment, ., count, ), {, continue, ;, }, doShadow, (, localAssignment, ,]
[if, (, bestShadow, ., count, <, localAssignment, ., count, ), {, continue, ;, }, doShadow, (, localAssignment, ,, bestShadow, ,]
[<, localAssignment, ., count, ), {, continue, ;, }, doShadow, (, localAssignment, ,, bestShadow, ,, var, ), ;, if, (]
[<, localAssignment, ., count, ), {, continue, ;, }, doShadow, (, localAssignment, ,, bestShadow, ,, var, ), ;, if, (]
[., count, ), {, continue, ;, }, doShadow, (, localAssignment, ,, bestShadow, ,, var, ), ;, if, (, oldPseudoNameMap, !=]
[}, doShadow, (, localAssignment, ,, bestShadow, ,, var, ), ;, if, (, oldPseudoNameMap, !=, null, ), {, String, targetPseudoName, =]
[}, doShadow, (, localAssignment, ,, bestShadow, ,, var, ), ;, if, (, oldPseudoNameMap, !=, null, ), {, String, targetPseudoName, =]
[,, bestShadow, ,, var, ), ;, if, (, oldPseudoNameMap, !=, null, ), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (]
[,, bestShadow, ,, var, ), ;, if, (, oldPseudoNameMap, !=, null, ), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (]
[,, bestShadow, ,, var, ), ;, if, (, oldPseudoNameMap, !=, null, ), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (]
[), ;, if, (, oldPseudoNameMap, !=, null, ), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (, s, ., getVar, (]
[), ;, if, (, oldPseudoNameMap, !=, null, ), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (, s, ., getVar, (]
[., get, (, s, ., getVar, (, bestShadow, ., oldName, ), ., nameNode, ), ;, for, (, Node, use, :]
[., get, (, s, ., getVar, (, bestShadow, ., oldName, ), ., nameNode, ), ;, for, (, Node, use, :]
[., getVar, (, bestShadow, ., oldName, ), ., nameNode, ), ;, for, (, Node, use, :, varToNameUsage, ., get, (]
[., oldName, ), ., nameNode, ), ;, for, (, Node, use, :, varToNameUsage, ., get, (, var, ), ), {]
[., oldName, ), ., nameNode, ), ;, for, (, Node, use, :, varToNameUsage, ., get, (, var, ), ), {]
[nameNode, ), ;, for, (, Node, use, :, varToNameUsage, ., get, (, var, ), ), {, deltaPseudoNameMap, ., put, (]
[;, for, (, Node, use, :, varToNameUsage, ., get, (, var, ), ), {, deltaPseudoNameMap, ., put, (, use, ,]
[parent, ), {, }, private, Assignment, findBestShadow, (, Scope, curScope, ,, Var, candidate, ), {, for, (, Assignment, assignment, :]
[Assignment, findBestShadow, (, Scope, curScope, ,, Var, candidate, ), {, for, (, Assignment, assignment, :, varsByFrequency, ), {, if, (]
[Assignment, findBestShadow, (, Scope, curScope, ,, Var, candidate, ), {, for, (, Assignment, assignment, :, varsByFrequency, ), {, if, (]
[Assignment, findBestShadow, (, Scope, curScope, ,, Var, candidate, ), {, for, (, Assignment, assignment, :, varsByFrequency, ), {, if, (]
[Var, candidate, ), {, for, (, Assignment, assignment, :, varsByFrequency, ), {, if, (, assignment, ., oldName, ., startsWith, (]
[Var, candidate, ), {, for, (, Assignment, assignment, :, varsByFrequency, ), {, if, (, assignment, ., oldName, ., startsWith, (]
[:, varsByFrequency, ), {, if, (, assignment, ., oldName, ., startsWith, (, RenameVars, ., LOCAL_VAR_PREFIX, ), ), {, if, (]
[varsByFrequency, ), {, if, (, assignment, ., oldName, ., startsWith, (, RenameVars, ., LOCAL_VAR_PREFIX, ), ), {, if, (, !]
[varsByFrequency, ), {, if, (, assignment, ., oldName, ., startsWith, (, RenameVars, ., LOCAL_VAR_PREFIX, ), ), {, if, (, !]
[varsByFrequency, ), {, if, (, assignment, ., oldName, ., startsWith, (, RenameVars, ., LOCAL_VAR_PREFIX, ), ), {, if, (, !]
[(, assignment, ., oldName, ., startsWith, (, RenameVars, ., LOCAL_VAR_PREFIX, ), ), {, if, (, !, scopeUpRefMap, ., get, (]
[(, assignment, ., oldName, ., startsWith, (, RenameVars, ., LOCAL_VAR_PREFIX, ), ), {, if, (, !, scopeUpRefMap, ., get, (]
[LOCAL_VAR_PREFIX, ), ), {, if, (, !, scopeUpRefMap, ., get, (, curScope, ., getRootNode, (, ), ), ., contains, (]
[LOCAL_VAR_PREFIX, ), ), {, if, (, !, scopeUpRefMap, ., get, (, curScope, ., getRootNode, (, ), ), ., contains, (]
[., get, (, curScope, ., getRootNode, (, ), ), ., contains, (, assignment, ., oldName, ), ), {, if, (]
[., get, (, curScope, ., getRootNode, (, ), ), ., contains, (, assignment, ., oldName, ), ), {, if, (]
[., getRootNode, (, ), ), ., contains, (, assignment, ., oldName, ), ), {, if, (, curScope, ., isDeclared, (]
[., getRootNode, (, ), ), ., contains, (, assignment, ., oldName, ), ), {, if, (, curScope, ., isDeclared, (]
[), ., contains, (, assignment, ., oldName, ), ), {, if, (, curScope, ., isDeclared, (, assignment, ., oldName, ,]
[., oldName, ), ), {, if, (, curScope, ., isDeclared, (, assignment, ., oldName, ,, true, ), ), {, return]
[curScope, ., isDeclared, (, assignment, ., oldName, ,, true, ), ), {, return, assignment, ;, }, }, }, }, return]
[null, ;, }, private, void, doShadow, (, Assignment, original, ,, Assignment, toShadow, ,, Var, var, ), {, Scope, s, =]
[null, ;, }, private, void, doShadow, (, Assignment, original, ,, Assignment, toShadow, ,, Var, var, ), {, Scope, s, =]
[,, Var, var, ), {, Scope, s, =, var, ., getScope, (, ), ;, Collection, <, Node, >, references, =]
[,, Var, var, ), {, Scope, s, =, var, ., getScope, (, ), ;, Collection, <, Node, >, references, =]
[{, Scope, s, =, var, ., getScope, (, ), ;, Collection, <, Node, >, references, =, varToNameUsage, ., get, (]
[=, var, ., getScope, (, ), ;, Collection, <, Node, >, references, =, varToNameUsage, ., get, (, var, ), ;]
[=, var, ., getScope, (, ), ;, Collection, <, Node, >, references, =, varToNameUsage, ., get, (, var, ), ;]
[(, ), ;, Collection, <, Node, >, references, =, varToNameUsage, ., get, (, var, ), ;, varsByFrequency, ., remove, (]
[Collection, <, Node, >, references, =, varToNameUsage, ., get, (, var, ), ;, varsByFrequency, ., remove, (, original, ), ;]
[Collection, <, Node, >, references, =, varToNameUsage, ., get, (, var, ), ;, varsByFrequency, ., remove, (, original, ), ;]
[references, =, varToNameUsage, ., get, (, var, ), ;, varsByFrequency, ., remove, (, original, ), ;, varsByFrequency, ., remove, (]
[., get, (, var, ), ;, varsByFrequency, ., remove, (, original, ), ;, varsByFrequency, ., remove, (, toShadow, ), ;]
[., get, (, var, ), ;, varsByFrequency, ., remove, (, original, ), ;, varsByFrequency, ., remove, (, toShadow, ), ;]
[), ;, varsByFrequency, ., remove, (, original, ), ;, varsByFrequency, ., remove, (, toShadow, ), ;, original, ., count, -=]
[), ;, varsByFrequency, ., remove, (, original, ), ;, varsByFrequency, ., remove, (, toShadow, ), ;, original, ., count, -=]
[original, ), ;, varsByFrequency, ., remove, (, toShadow, ), ;, original, ., count, -=, references, ., size, (, ), ;]
[original, ), ;, varsByFrequency, ., remove, (, toShadow, ), ;, original, ., count, -=, references, ., size, (, ), ;]
[., remove, (, toShadow, ), ;, original, ., count, -=, references, ., size, (, ), ;, toShadow, ., count, +=]
[., remove, (, toShadow, ), ;, original, ., count, -=, references, ., size, (, ), ;, toShadow, ., count, +=]
[original, ., count, -=, references, ., size, (, ), ;, toShadow, ., count, +=, references, ., size, (, ), ;]
[original, ., count, -=, references, ., size, (, ), ;, toShadow, ., count, +=, references, ., size, (, ), ;]
[references, ., size, (, ), ;, toShadow, ., count, +=, references, ., size, (, ), ;, varsByFrequency, ., add, (]
[(, ), ;, toShadow, ., count, +=, references, ., size, (, ), ;, varsByFrequency, ., add, (, original, ), ;]
[(, ), ;, toShadow, ., count, +=, references, ., size, (, ), ;, varsByFrequency, ., add, (, original, ), ;]
[., count, +=, references, ., size, (, ), ;, varsByFrequency, ., add, (, original, ), ;, varsByFrequency, ., add, (]
[(, ), ;, varsByFrequency, ., add, (, original, ), ;, varsByFrequency, ., add, (, toShadow, ), ;, Var, shadowed, =]
[(, ), ;, varsByFrequency, ., add, (, original, ), ;, varsByFrequency, ., add, (, toShadow, ), ;, Var, shadowed, =]
[., add, (, original, ), ;, varsByFrequency, ., add, (, toShadow, ), ;, Var, shadowed, =, s, ., getVar, (]
[., add, (, original, ), ;, varsByFrequency, ., add, (, toShadow, ), ;, Var, shadowed, =, s, ., getVar, (]
[., add, (, toShadow, ), ;, Var, shadowed, =, s, ., getVar, (, toShadow, ., oldName, ), ;, if, (]
[., add, (, toShadow, ), ;, Var, shadowed, =, s, ., getVar, (, toShadow, ., oldName, ), ;, if, (]
[(, toShadow, ), ;, Var, shadowed, =, s, ., getVar, (, toShadow, ., oldName, ), ;, if, (, shadowed, !=]
[., getVar, (, toShadow, ., oldName, ), ;, if, (, shadowed, !=, null, ), {, for, (, Scope, curScope, =]
[(, toShadow, ., oldName, ), ;, if, (, shadowed, !=, null, ), {, for, (, Scope, curScope, =, s, ;]
[(, toShadow, ., oldName, ), ;, if, (, shadowed, !=, null, ), {, for, (, Scope, curScope, =, s, ;]
[., oldName, ), ;, if, (, shadowed, !=, null, ), {, for, (, Scope, curScope, =, s, ;, curScope, !=]
[., oldName, ), ;, if, (, shadowed, !=, null, ), {, for, (, Scope, curScope, =, s, ;, curScope, !=]
[if, (, shadowed, !=, null, ), {, for, (, Scope, curScope, =, s, ;, curScope, !=, shadowed, ., scope, ;]
[shadowed, !=, null, ), {, for, (, Scope, curScope, =, s, ;, curScope, !=, shadowed, ., scope, ;, curScope, =]
[shadowed, !=, null, ), {, for, (, Scope, curScope, =, s, ;, curScope, !=, shadowed, ., scope, ;, curScope, =]
[Scope, curScope, =, s, ;, curScope, !=, shadowed, ., scope, ;, curScope, =, curScope, ., getParent, (, ), ), {]
[Scope, curScope, =, s, ;, curScope, !=, shadowed, ., scope, ;, curScope, =, curScope, ., getParent, (, ), ), {]
[;, curScope, !=, shadowed, ., scope, ;, curScope, =, curScope, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (]
[;, curScope, !=, shadowed, ., scope, ;, curScope, =, curScope, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (]
[;, curScope, =, curScope, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, curScope, ., getRootNode, (, ), ,]
[;, curScope, =, curScope, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, curScope, ., getRootNode, (, ), ,]
[put, (, curScope, ., getRootNode, (, ), ,, toShadow, ., oldName, ), ;, }, }, for, (, Node, n, :]
[., getRootNode, (, ), ,, toShadow, ., oldName, ), ;, }, }, for, (, Node, n, :, references, ), {]
[., getRootNode, (, ), ,, toShadow, ., oldName, ), ;, }, }, for, (, Node, n, :, references, ), {]
[,, toShadow, ., oldName, ), ;, }, }, for, (, Node, n, :, references, ), {, n, ., setString, (]
[,, toShadow, ., oldName, ), ;, }, }, for, (, Node, n, :, references, ), {, n, ., setString, (]
[for, (, Node, n, :, references, ), {, n, ., setString, (, toShadow, ., oldName, ), ;, Node, cur, =]
[:, references, ), {, n, ., setString, (, toShadow, ., oldName, ), ;, Node, cur, =, n, ;, while, (]
[:, references, ), {, n, ., setString, (, toShadow, ., oldName, ), ;, Node, cur, =, n, ;, while, (]
[), {, n, ., setString, (, toShadow, ., oldName, ), ;, Node, cur, =, n, ;, while, (, cur, !=]
[), {, n, ., setString, (, toShadow, ., oldName, ), ;, Node, cur, =, n, ;, while, (, cur, !=]
[., oldName, ), ;, Node, cur, =, n, ;, while, (, cur, !=, s, ., getRootNode, (, ), ), {]
[), ;, Node, cur, =, n, ;, while, (, cur, !=, s, ., getRootNode, (, ), ), {, cur, =]
[), ;, Node, cur, =, n, ;, while, (, cur, !=, s, ., getRootNode, (, ), ), {, cur, =]
[(, cur, !=, s, ., getRootNode, (, ), ), {, cur, =, cur, ., getParent, (, ), ;, if, (]
[(, cur, !=, s, ., getRootNode, (, ), ), {, cur, =, cur, ., getParent, (, ), ;, if, (]
[), ), {, cur, =, cur, ., getParent, (, ), ;, if, (, cur, ., isFunction, (, ), ), {]
[), ), {, cur, =, cur, ., getParent, (, ), ;, if, (, cur, ., isFunction, (, ), ), {]
[=, cur, ., getParent, (, ), ;, if, (, cur, ., isFunction, (, ), ), {, scopeUpRefMap, ., put, (]
[., getParent, (, ), ;, if, (, cur, ., isFunction, (, ), ), {, scopeUpRefMap, ., put, (, cur, ,]
[., getParent, (, ), ;, if, (, cur, ., isFunction, (, ), ), {, scopeUpRefMap, ., put, (, cur, ,]
