[;, private, final, boolean, normalized, ;, public, Sinc, (, ), {, this, (, false, ), ;, }, public, Sinc, (]
[), ;, }, public, Sinc, (, boolean, normalized, ), {, this, ., normalized, =, normalized, ;, }, public, double, value]
[=, normalized, ;, }, public, double, value, (, final, double, x, ), {, final, double, scaledX, =, normalized, ?, FastMath]
[., normalized, =, normalized, ;, }, public, double, value, (, final, double, x, ), {, final, double, scaledX, =, normalized]
[;, }, public, double, value, (, final, double, x, ), {, final, double, scaledX, =, normalized, ?, FastMath, ., PI]
[;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX]
[?, FastMath, ., PI, *, x, :, x, ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, )]
[:, x, ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX]
[*, x, :, x, ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2]
[., PI, *, x, :, x, ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final]
[:, x, ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX]
[;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX]
[), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (, (, scaledX2, -, 20, ), *, scaledX2, +]
[<=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (, (, scaledX2, -, 20, ), *]
[., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (, (]
[), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (, (, scaledX2, -, 20, )]
[), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (, (, scaledX2, -, 20, ), *, scaledX2, +]
[;, return, (, (, scaledX2, -, 20, ), *, scaledX2, +, 120, ), /, 120, ;, }, else, {, return]
[*, scaledX, ;, return, (, (, scaledX2, -, 20, ), *, scaledX2, +, 120, ), /, 120, ;, }, else]
[;, return, (, (, scaledX2, -, 20, ), *, scaledX2, +, 120, ), /, 120, ;, }, else, {, return]
[;, }, else, {, return, FastMath, ., sin, (, scaledX, ), /, scaledX, ;, }, }, @, Deprecated, public, UnivariateFunction]
[/, 120, ;, }, else, {, return, FastMath, ., sin, (, scaledX, ), /, scaledX, ;, }, }, @, Deprecated]
[), /, 120, ;, }, else, {, return, FastMath, ., sin, (, scaledX, ), /, scaledX, ;, }, }, @]
[+, 120, ), /, 120, ;, }, else, {, return, FastMath, ., sin, (, scaledX, ), /, scaledX, ;, }]
[*, scaledX2, +, 120, ), /, 120, ;, }, else, {, return, FastMath, ., sin, (, scaledX, ), /, scaledX]
[), *, scaledX2, +, 120, ), /, 120, ;, }, else, {, return, FastMath, ., sin, (, scaledX, ), /]
[-, 20, ), *, scaledX2, +, 120, ), /, 120, ;, }, else, {, return, FastMath, ., sin, (, scaledX]
[), *, scaledX2, +, 120, ), /, 120, ;, }, else, {, return, FastMath, ., sin, (, scaledX, ), /]
[+, 120, ), /, 120, ;, }, else, {, return, FastMath, ., sin, (, scaledX, ), /, scaledX, ;, }]
[), /, 120, ;, }, else, {, return, FastMath, ., sin, (, scaledX, ), /, scaledX, ;, }, }, @]
[;, }, else, {, return, FastMath, ., sin, (, scaledX, ), /, scaledX, ;, }, }, @, Deprecated, public, UnivariateFunction]
[;, }, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, ), ., derivative]
[/, scaledX, ;, }, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, )]
[., sin, (, scaledX, ), /, scaledX, ;, }, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils]
[), /, scaledX, ;, }, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this]
[;, }, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, ), ., derivative]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, scaledX, =, (, normalized, ?]
[., derivative, (, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, scaledX]
[., toDifferentiableUnivariateFunction, (, this, ), ., derivative, (, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws]
[), ., derivative, (, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double]
[;, final, double, scaledX2, =, scaledX, *, scaledX, ;, double, [, ], f, =, new, double, [, t, ., getOrder]
[*, t, ., getValue, (, ), ;, final, double, scaledX2, =, scaledX, *, scaledX, ;, double, [, ], f, =]
[), *, t, ., getValue, (, ), ;, final, double, scaledX2, =, scaledX, *, scaledX, ;, double, [, ], f]
[?, FastMath, ., PI, :, 1, ), *, t, ., getValue, (, ), ;, final, double, scaledX2, =, scaledX, *]
[:, 1, ), *, t, ., getValue, (, ), ;, final, double, scaledX2, =, scaledX, *, scaledX, ;, double, []
[., PI, :, 1, ), *, t, ., getValue, (, ), ;, final, double, scaledX2, =, scaledX, *, scaledX, ;]
[), *, t, ., getValue, (, ), ;, final, double, scaledX2, =, scaledX, *, scaledX, ;, double, [, ], f]
[;, final, double, scaledX2, =, scaledX, *, scaledX, ;, double, [, ], f, =, new, double, [, t, ., getOrder]
[., getValue, (, ), ;, final, double, scaledX2, =, scaledX, *, scaledX, ;, double, [, ], f, =, new, double]
[;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, if, (]
[*, scaledX, ;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;]
[;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, if, (]
[;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, for, (, int, i, =, 0, ;]
[], ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, for, (, int, i, =, 0]
[+, 1, ], ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, for, (, int, i]
[., getOrder, (, ), +, 1, ], ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {]
[], ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, for, (, int, i, =, 0]
[), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, ++, i, ), {, final]
[<=, SHORTCUT, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, ++, i, )]
[., abs, (, scaledX, ), <=, SHORTCUT, ), {, for, (, int, i, =, 0, ;, i, <, f, .]
[), <=, SHORTCUT, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, ++, i]
[), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, ++, i, ), {, final]
[;, i, <, f, ., length, ;, ++, i, ), {, final, int, k, =, i, /, 2, ;, if]
[;, ++, i, ), {, final, int, k, =, i, /, 2, ;, if, (, (, i, &, 0x1, )]
[<, f, ., length, ;, ++, i, ), {, final, int, k, =, i, /, 2, ;, if, (, (]
[;, ++, i, ), {, final, int, k, =, i, /, 2, ;, if, (, (, i, &, 0x1, )]
[., length, ;, ++, i, ), {, final, int, k, =, i, /, 2, ;, if, (, (, i, &]
[), {, final, int, k, =, i, /, 2, ;, if, (, (, i, &, 0x1, ), ==, 0, )]
[), {, final, int, k, =, i, /, 2, ;, if, (, (, i, &, 0x1, ), ==, 0, )]
[;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =, (, (, (]
[/, 2, ;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =, (]
[;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =, (, (, (]
[), {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :]
[==, 0, ), {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?]
[), ==, 0, ), {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, )]
[&, 0x1, ), ==, 0, ), {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==]
[), ==, 0, ), {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, )]
[), {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :]
[=, (, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ), *, (, 1.0]
[[, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, )]
[], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ), *, (]
[;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?]
[*, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +]
[), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i]
[?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0]
[), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (]
[==, 0, ), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2]
[), ==, 0, ), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -]
[&, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1]
[), ==, 0, ), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -]
[), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (]
[:, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (]
[), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i]
[), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i]
[;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?]
[), ;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, )]
[-, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /, (, 24, *, i]
[/, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -]
[-, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /, (, 24, *, i]
[), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /, (, 24, *]
[+, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /, (]
[), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /, (, 24, *]
[), ;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, )]
[*, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /, (, 24, *, i, +, 120]
[), ;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, )]
[), ), ;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0]
[-, scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ]]
[/, (, 2, *, i, +, 6, ), -, scaledX2, /, (, 24, *, i, +, 120, ), ), )]
[-, scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ]]
[), -, scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i]
[+, 6, ), -, scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f]
[*, i, +, 6, ), -, scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else]
[+, 6, ), -, scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f]
[), -, scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i]
[), ), ;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0]
[/, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ], =, (]
[), ), ;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0]
[), ), ), ;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==]
[+, 120, ), ), ), ;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1]
[*, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ], =, (, (, (, k]
[+, 120, ), ), ), ;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1]
[), ), ), ;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==]
[=, (, (, (, k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0]
[[, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, )]
[], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (]
[;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos, =, FastMath, .]
[*, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +]
[), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i]
[?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0]
[), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (]
[==, 0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2]
[), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -]
[&, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2]
[), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -]
[), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (]
[:, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (, 6]
[:, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (, 6]
[), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i]
[;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos, =, FastMath, .]
[), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos, =, FastMath]
[-, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /, (, 120, *, i]
[/, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -]
[-, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /, (, 120, *, i]
[), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /, (, 120, *]
[+, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /, (]
[), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /, (, 120, *]
[), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos, =, FastMath]
[*, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /, (, 120, *, i, +, 720]
[), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos, =, FastMath]
[), ), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos, =]
[-, scaledX2, /, (, 120, *, i, +, 720, ), ), ), ;, }, }, }, else, {, final, double]
[/, (, 6, *, i, +, 24, ), -, scaledX2, /, (, 120, *, i, +, 720, ), ), )]
[-, scaledX2, /, (, 120, *, i, +, 720, ), ), ), ;, }, }, }, else, {, final, double]
[), -, scaledX2, /, (, 120, *, i, +, 720, ), ), ), ;, }, }, }, else, {, final]
[+, 24, ), -, scaledX2, /, (, 120, *, i, +, 720, ), ), ), ;, }, }, }, else]
[*, i, +, 24, ), -, scaledX2, /, (, 120, *, i, +, 720, ), ), ), ;, }, }]
[+, 24, ), -, scaledX2, /, (, 120, *, i, +, 720, ), ), ), ;, }, }, }, else]
[), -, scaledX2, /, (, 120, *, i, +, 720, ), ), ), ;, }, }, }, else, {, final]
[), ), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos, =]
[/, (, 120, *, i, +, 720, ), ), ), ;, }, }, }, else, {, final, double, inv, =]
[), ), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos, =]
[), ), ), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos]
[+, 720, ), ), ), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final]
[*, i, +, 720, ), ), ), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX]
[+, 720, ), ), ), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final]
[), ), ), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos]
[;, final, double, cos, =, FastMath, ., cos, (, scaledX, ), ;, final, double, sin, =, FastMath, ., sin, (]
[/, scaledX, ;, final, double, cos, =, FastMath, ., cos, (, scaledX, ), ;, final, double, sin, =, FastMath, .]
[;, final, double, cos, =, FastMath, ., cos, (, scaledX, ), ;, final, double, sin, =, FastMath, ., sin, (]
[;, final, double, sin, =, FastMath, ., sin, (, scaledX, ), ;, f, [, 0, ], =, inv, *, sin]
[., cos, (, scaledX, ), ;, final, double, sin, =, FastMath, ., sin, (, scaledX, ), ;, f, [, 0]
[), ;, final, double, sin, =, FastMath, ., sin, (, scaledX, ), ;, f, [, 0, ], =, inv, *]
[;, f, [, 0, ], =, inv, *, sin, ;, final, double, [, ], sc, =, new, double, [, f]
[., sin, (, scaledX, ), ;, f, [, 0, ], =, inv, *, sin, ;, final, double, [, ], sc]
[), ;, f, [, 0, ], =, inv, *, sin, ;, final, double, [, ], sc, =, new, double, []
[=, inv, *, sin, ;, final, double, [, ], sc, =, new, double, [, f, ., length, ], ;, sc]
[[, 0, ], =, inv, *, sin, ;, final, double, [, ], sc, =, new, double, [, f, ., length]
[], =, inv, *, sin, ;, final, double, [, ], sc, =, new, double, [, f, ., length, ], ;]
[;, final, double, [, ], sc, =, new, double, [, f, ., length, ], ;, sc, [, 0, ], =]
[*, sin, ;, final, double, [, ], sc, =, new, double, [, f, ., length, ], ;, sc, [, 0]
[;, final, double, [, ], sc, =, new, double, [, f, ., length, ], ;, sc, [, 0, ], =]
[;, sc, [, 0, ], =, 1, ;, double, coeff, =, inv, ;, for, (, int, n, =, 1, ;]
[], ;, sc, [, 0, ], =, 1, ;, double, coeff, =, inv, ;, for, (, int, n, =, 1]
[., length, ], ;, sc, [, 0, ], =, 1, ;, double, coeff, =, inv, ;, for, (, int, n]
[=, 1, ;, double, coeff, =, inv, ;, for, (, int, n, =, 1, ;, n, <, f, ., length]
[[, 0, ], =, 1, ;, double, coeff, =, inv, ;, for, (, int, n, =, 1, ;, n, <]
[], =, 1, ;, double, coeff, =, inv, ;, for, (, int, n, =, 1, ;, n, <, f, .]
[;, double, coeff, =, inv, ;, for, (, int, n, =, 1, ;, n, <, f, ., length, ;, ++]
[;, for, (, int, n, =, 1, ;, n, <, f, ., length, ;, ++, n, ), {, double, s]
[;, n, <, f, ., length, ;, ++, n, ), {, double, s, =, 0, ;, double, c, =, 0]
[;, ++, n, ), {, double, s, =, 0, ;, double, c, =, 0, ;, final, int, kStart, ;, if]
[<, f, ., length, ;, ++, n, ), {, double, s, =, 0, ;, double, c, =, 0, ;, final]
[;, ++, n, ), {, double, s, =, 0, ;, double, c, =, 0, ;, final, int, kStart, ;, if]
[., length, ;, ++, n, ), {, double, s, =, 0, ;, double, c, =, 0, ;, final, int, kStart]
[), {, double, s, =, 0, ;, double, c, =, 0, ;, final, int, kStart, ;, if, (, (, n]
[), {, double, s, =, 0, ;, double, c, =, 0, ;, final, int, kStart, ;, if, (, (, n]
[;, double, c, =, 0, ;, final, int, kStart, ;, if, (, (, n, &, 0x1, ), ==, 0, )]
[;, final, int, kStart, ;, if, (, (, n, &, 0x1, ), ==, 0, ), {, sc, [, n, ]]
[), {, sc, [, n, ], =, 0, ;, kStart, =, n, ;, }, else, {, sc, [, n, ]]
[==, 0, ), {, sc, [, n, ], =, 0, ;, kStart, =, n, ;, }, else, {, sc, []
[), ==, 0, ), {, sc, [, n, ], =, 0, ;, kStart, =, n, ;, }, else, {, sc]
[&, 0x1, ), ==, 0, ), {, sc, [, n, ], =, 0, ;, kStart, =, n, ;, }, else]
[), ==, 0, ), {, sc, [, n, ], =, 0, ;, kStart, =, n, ;, }, else, {, sc]
[), {, sc, [, n, ], =, 0, ;, kStart, =, n, ;, }, else, {, sc, [, n, ]]
[=, 0, ;, kStart, =, n, ;, }, else, {, sc, [, n, ], =, sc, [, n, -, 1]
[[, n, ], =, 0, ;, kStart, =, n, ;, }, else, {, sc, [, n, ], =, sc, []
[], =, 0, ;, kStart, =, n, ;, }, else, {, sc, [, n, ], =, sc, [, n, -]
[;, kStart, =, n, ;, }, else, {, sc, [, n, ], =, sc, [, n, -, 1, ], ;]
[=, n, ;, }, else, {, sc, [, n, ], =, sc, [, n, -, 1, ], ;, c, =]
[;, }, else, {, sc, [, n, ], =, sc, [, n, -, 1, ], ;, c, =, sc, []
[=, sc, [, n, -, 1, ], ;, c, =, sc, [, n, ], ;, kStart, =, n, -, 1]
[[, n, ], =, sc, [, n, -, 1, ], ;, c, =, sc, [, n, ], ;, kStart, =]
[], =, sc, [, n, -, 1, ], ;, c, =, sc, [, n, ], ;, kStart, =, n, -]
[;, c, =, sc, [, n, ], ;, kStart, =, n, -, 1, ;, }, for, (, int, k, =]
[[, n, -, 1, ], ;, c, =, sc, [, n, ], ;, kStart, =, n, -, 1, ;, }]
[], ;, c, =, sc, [, n, ], ;, kStart, =, n, -, 1, ;, }, for, (, int, k]
[-, 1, ], ;, c, =, sc, [, n, ], ;, kStart, =, n, -, 1, ;, }, for, (]
[], ;, c, =, sc, [, n, ], ;, kStart, =, n, -, 1, ;, }, for, (, int, k]
[=, sc, [, n, ], ;, kStart, =, n, -, 1, ;, }, for, (, int, k, =, kStart, ;]
[;, kStart, =, n, -, 1, ;, }, for, (, int, k, =, kStart, ;, k, >, 1, ;, k]
[[, n, ], ;, kStart, =, n, -, 1, ;, }, for, (, int, k, =, kStart, ;, k, >]
[], ;, kStart, =, n, -, 1, ;, }, for, (, int, k, =, kStart, ;, k, >, 1, ;]
[=, n, -, 1, ;, }, for, (, int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2]
[;, }, for, (, int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2, ), {, sc, []
[-, 1, ;, }, for, (, int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2, ), {]
[;, }, for, (, int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2, ), {, sc, []
[;, k, >, 1, ;, k, -=, 2, ), {, sc, [, k, ], =, (, k, -, n, )]
[;, k, -=, 2, ), {, sc, [, k, ], =, (, k, -, n, ), *, sc, [, k]
[>, 1, ;, k, -=, 2, ), {, sc, [, k, ], =, (, k, -, n, ), *, sc]
[;, k, -=, 2, ), {, sc, [, k, ], =, (, k, -, n, ), *, sc, [, k]
[-=, 2, ), {, sc, [, k, ], =, (, k, -, n, ), *, sc, [, k, ], -]
[), {, sc, [, k, ], =, (, k, -, n, ), *, sc, [, k, ], -, sc, []
[=, (, k, -, n, ), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;, s]
[[, k, ], =, (, k, -, n, ), *, sc, [, k, ], -, sc, [, k, -, 1]
[], =, (, k, -, n, ), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;]
[;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =, (]
[-, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc]
[*, sc, [, k, ], -, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc]
[), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +]
[-, n, ), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;, s, =, s, *]
[), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +]
[-, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc]
[[, k, ], -, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc, [, k]
[], -, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;]
[;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =, (]
[[, k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k]
[], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =]
[-, 1, ], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1]
[], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =]
[=, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =, (, k, -]
[;, sc, [, k, -, 1, ], =, (, k, -, 1, -, n, ), *, sc, [, k, -]
[+, sc, [, k, ], ;, sc, [, k, -, 1, ], =, (, k, -, 1, -, n, )]
[*, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =, (, k, -, 1, -]
[+, sc, [, k, ], ;, sc, [, k, -, 1, ], =, (, k, -, 1, -, n, )]
[;, sc, [, k, -, 1, ], =, (, k, -, 1, -, n, ), *, sc, [, k, -]
[[, k, ], ;, sc, [, k, -, 1, ], =, (, k, -, 1, -, n, ), *, sc]
[], ;, sc, [, k, -, 1, ], =, (, k, -, 1, -, n, ), *, sc, [, k]
[=, (, k, -, 1, -, n, ), *, sc, [, k, -, 1, ], +, sc, [, k, -]
[[, k, -, 1, ], =, (, k, -, 1, -, n, ), *, sc, [, k, -, 1, ]]
[], =, (, k, -, 1, -, n, ), *, sc, [, k, -, 1, ], +, sc, [, k]
[-, 1, ], =, (, k, -, 1, -, n, ), *, sc, [, k, -, 1, ], +, sc]
[], =, (, k, -, 1, -, n, ), *, sc, [, k, -, 1, ], +, sc, [, k]
[;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=]
[+, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ]]
[*, sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2]
[), *, sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =, c, *]
[-, n, ), *, sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =]
[-, 1, -, n, ), *, sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;]
[-, n, ), *, sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =]
[), *, sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =, c, *]
[+, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ]]
[[, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc]
[], +, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc, [, k, -, 1]
[-, 1, ], +, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc, [, k]
[], +, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc, [, k, -, 1]
[;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=]
[[, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }]
[], ;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ]]
[-, 2, ], ;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, []
[], ;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ]]
[=, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n]
[;, }, sc, [, 0, ], *=, -, n, ;, s, =, s, *, scaledX2, +, sc, [, 0, ]]
[+, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s, =, s]
[*, scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s]
[+, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s, =, s]
[;, }, sc, [, 0, ], *=, -, n, ;, s, =, s, *, scaledX2, +, sc, [, 0, ]]
[[, k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s, =, s, *, scaledX2]
[], ;, }, sc, [, 0, ], *=, -, n, ;, s, =, s, *, scaledX2, +, sc, [, 0]
[-, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s, =, s, *, scaledX2, +, sc]
[], ;, }, sc, [, 0, ], *=, -, n, ;, s, =, s, *, scaledX2, +, sc, [, 0]
[*=, -, n, ;, s, =, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f]
[[, 0, ], *=, -, n, ;, s, =, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=]
[], *=, -, n, ;, s, =, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;]
[;, s, =, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ]]
[;, s, =, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ]]
[=, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff]
[;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *, sin, +, c, *, scaledX]
[+, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *]
[*, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (]
[+, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *]
[;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *, sin, +, c, *, scaledX]
[[, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *, sin, +]
[], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *, sin, +, c, *]
[*=, inv, ;, f, [, n, ], =, coeff, *, (, s, *, sin, +, c, *, scaledX, *, cos]
[;, f, [, n, ], =, coeff, *, (, s, *, sin, +, c, *, scaledX, *, cos, ), ;]
[=, coeff, *, (, s, *, sin, +, c, *, scaledX, *, cos, ), ;, }, }, if, (, normalized]
[[, n, ], =, coeff, *, (, s, *, sin, +, c, *, scaledX, *, cos, ), ;, }, }]
[], =, coeff, *, (, s, *, sin, +, c, *, scaledX, *, cos, ), ;, }, }, if, (]
[;, }, }, if, (, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (, int, i, =]
[*, (, s, *, sin, +, c, *, scaledX, *, cos, ), ;, }, }, if, (, normalized, ), {]
[;, }, }, if, (, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (, int, i, =]
[), ;, }, }, if, (, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (, int, i]
[+, c, *, scaledX, *, cos, ), ;, }, }, if, (, normalized, ), {, double, scale, =, FastMath, .]
[*, sin, +, c, *, scaledX, *, cos, ), ;, }, }, if, (, normalized, ), {, double, scale, =]
[+, c, *, scaledX, *, cos, ), ;, }, }, if, (, normalized, ), {, double, scale, =, FastMath, .]
[), ;, }, }, if, (, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (, int, i]
[*, cos, ), ;, }, }, if, (, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (]
[*, scaledX, *, cos, ), ;, }, }, if, (, normalized, ), {, double, scale, =, FastMath, ., PI, ;]
[*, cos, ), ;, }, }, if, (, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (]
[), ;, }, }, if, (, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (, int, i]
[), {, double, scale, =, FastMath, ., PI, ;, for, (, int, i, =, 1, ;, i, <, f, .]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {, f, []
[., PI, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {]
[;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], *=, scale, ;, scale, *=]
[;, ++, i, ), {, f, [, i, ], *=, scale, ;, scale, *=, FastMath, ., PI, ;, }, }]
[<, f, ., length, ;, ++, i, ), {, f, [, i, ], *=, scale, ;, scale, *=, FastMath, .]
[;, ++, i, ), {, f, [, i, ], *=, scale, ;, scale, *=, FastMath, ., PI, ;, }, }]
[., length, ;, ++, i, ), {, f, [, i, ], *=, scale, ;, scale, *=, FastMath, ., PI, ;]
[), {, f, [, i, ], *=, scale, ;, scale, *=, FastMath, ., PI, ;, }, }, return, t, .]
[), {, f, [, i, ], *=, scale, ;, scale, *=, FastMath, ., PI, ;, }, }, return, t, .]
[*=, scale, ;, scale, *=, FastMath, ., PI, ;, }, }, return, t, ., compose, (, f, ), ;, }]
[[, i, ], *=, scale, ;, scale, *=, FastMath, ., PI, ;, }, }, return, t, ., compose, (, f]
[], *=, scale, ;, scale, *=, FastMath, ., PI, ;, }, }, return, t, ., compose, (, f, ), ;]
[;, scale, *=, FastMath, ., PI, ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[*=, FastMath, ., PI, ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[., PI, ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, }]
[., compose, (, f, ), ;, }, }]
[), ;, }, }]
