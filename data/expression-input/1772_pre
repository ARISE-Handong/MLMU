[math3, ., util, ., FastMath, ;, public, class, ContinuousOutputModel, implements, StepHandler, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[., util, ., FastMath, ;, public, class, ContinuousOutputModel, implements, StepHandler, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[private, boolean, forward, ;, private, int, index, ;, private, List, <, StepInterpolator, >, steps, ;, public, ContinuousOutputModel, (, ), {]
[forward, ;, private, int, index, ;, private, List, <, StepInterpolator, >, steps, ;, public, ContinuousOutputModel, (, ), {, steps, =]
[<, StepInterpolator, >, steps, ;, public, ContinuousOutputModel, (, ), {, steps, =, new, ArrayList, <, StepInterpolator, >, (, ), ;]
[>, steps, ;, public, ContinuousOutputModel, (, ), {, steps, =, new, ArrayList, <, StepInterpolator, >, (, ), ;, initialTime, =]
[>, steps, ;, public, ContinuousOutputModel, (, ), {, steps, =, new, ArrayList, <, StepInterpolator, >, (, ), ;, initialTime, =]
[ContinuousOutputModel, (, ), {, steps, =, new, ArrayList, <, StepInterpolator, >, (, ), ;, initialTime, =, Double, ., NaN, ;]
[), {, steps, =, new, ArrayList, <, StepInterpolator, >, (, ), ;, initialTime, =, Double, ., NaN, ;, finalTime, =]
[), {, steps, =, new, ArrayList, <, StepInterpolator, >, (, ), ;, initialTime, =, Double, ., NaN, ;, finalTime, =]
[new, ArrayList, <, StepInterpolator, >, (, ), ;, initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;]
[<, StepInterpolator, >, (, ), ;, initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =]
[>, (, ), ;, initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;]
[), ;, initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;, index, =]
[index, =, 0, ;, }, public, void, append, (, final, ContinuousOutputModel, model, ), throws, MathIllegalArgumentException, ,, MaxCountExceededException, {, if, (]
[index, =, 0, ;, }, public, void, append, (, final, ContinuousOutputModel, model, ), throws, MathIllegalArgumentException, ,, MaxCountExceededException, {, if, (]
[index, =, 0, ;, }, public, void, append, (, final, ContinuousOutputModel, model, ), throws, MathIllegalArgumentException, ,, MaxCountExceededException, {, if, (]
[index, =, 0, ;, }, public, void, append, (, final, ContinuousOutputModel, model, ), throws, MathIllegalArgumentException, ,, MaxCountExceededException, {, if, (]
[(, final, ContinuousOutputModel, model, ), throws, MathIllegalArgumentException, ,, MaxCountExceededException, {, if, (, model, ., steps, ., size, (, ), ==]
[MaxCountExceededException, {, if, (, model, ., steps, ., size, (, ), ==, 0, ), {, return, ;, }, if, (]
[MaxCountExceededException, {, if, (, model, ., steps, ., size, (, ), ==, 0, ), {, return, ;, }, if, (]
[MaxCountExceededException, {, if, (, model, ., steps, ., size, (, ), ==, 0, ), {, return, ;, }, if, (]
[steps, ., size, (, ), ==, 0, ), {, return, ;, }, if, (, steps, ., size, (, ), ==]
[(, ), ==, 0, ), {, return, ;, }, if, (, steps, ., size, (, ), ==, 0, ), {]
[==, 0, ), {, return, ;, }, if, (, steps, ., size, (, ), ==, 0, ), {, initialTime, =]
[==, 0, ), {, return, ;, }, if, (, steps, ., size, (, ), ==, 0, ), {, initialTime, =]
[return, ;, }, if, (, steps, ., size, (, ), ==, 0, ), {, initialTime, =, model, ., initialTime, ;]
[}, if, (, steps, ., size, (, ), ==, 0, ), {, initialTime, =, model, ., initialTime, ;, forward, =]
[}, if, (, steps, ., size, (, ), ==, 0, ), {, initialTime, =, model, ., initialTime, ;, forward, =]
[0, ), {, initialTime, =, model, ., initialTime, ;, forward, =, model, ., forward, ;, }, else, {, if, (]
[0, ), {, initialTime, =, model, ., initialTime, ;, forward, =, model, ., forward, ;, }, else, {, if, (]
[0, ), {, initialTime, =, model, ., initialTime, ;, forward, =, model, ., forward, ;, }, else, {, if, (]
[., initialTime, ;, forward, =, model, ., forward, ;, }, else, {, if, (, getInterpolatedState, (, ), ., length, !=]
[., initialTime, ;, forward, =, model, ., forward, ;, }, else, {, if, (, getInterpolatedState, (, ), ., length, !=]
[., initialTime, ;, forward, =, model, ., forward, ;, }, else, {, if, (, getInterpolatedState, (, ), ., length, !=]
[else, {, if, (, getInterpolatedState, (, ), ., length, !=, model, ., getInterpolatedState, (, ), ., length, ), {, throw]
[(, getInterpolatedState, (, ), ., length, !=, model, ., getInterpolatedState, (, ), ., length, ), {, throw, new, DimensionMismatchException, (]
[(, getInterpolatedState, (, ), ., length, !=, model, ., getInterpolatedState, (, ), ., length, ), {, throw, new, DimensionMismatchException, (]
[(, getInterpolatedState, (, ), ., length, !=, model, ., getInterpolatedState, (, ), ., length, ), {, throw, new, DimensionMismatchException, (]
[., getInterpolatedState, (, ), ., length, ), {, throw, new, DimensionMismatchException, (, model, ., getInterpolatedState, (, ), ., length, ,]
[., getInterpolatedState, (, ), ., length, ), {, throw, new, DimensionMismatchException, (, model, ., getInterpolatedState, (, ), ., length, ,]
[DimensionMismatchException, (, model, ., getInterpolatedState, (, ), ., length, ,, getInterpolatedState, (, ), ., length, ), ;, }, if, (]
[DimensionMismatchException, (, model, ., getInterpolatedState, (, ), ., length, ,, getInterpolatedState, (, ), ., length, ), ;, }, if, (]
[model, ., getInterpolatedState, (, ), ., length, ,, getInterpolatedState, (, ), ., length, ), ;, }, if, (, forward, ^]
[model, ., getInterpolatedState, (, ), ., length, ,, getInterpolatedState, (, ), ., length, ), ;, }, if, (, forward, ^]
[length, ,, getInterpolatedState, (, ), ., length, ), ;, }, if, (, forward, ^, model, ., forward, ), {, throw]
[(, ), ., length, ), ;, }, if, (, forward, ^, model, ., forward, ), {, throw, new, MathIllegalArgumentException, (]
[(, ), ., length, ), ;, }, if, (, forward, ^, model, ., forward, ), {, throw, new, MathIllegalArgumentException, (]
[^, model, ., forward, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., PROPAGATION_DIRECTION_MISMATCH, ), ;, }, final, StepInterpolator, lastInterpolator, =]
[^, model, ., forward, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., PROPAGATION_DIRECTION_MISMATCH, ), ;, }, final, StepInterpolator, lastInterpolator, =]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., PROPAGATION_DIRECTION_MISMATCH, ), ;, }, final, StepInterpolator, lastInterpolator, =, steps, ., get, (]
[., PROPAGATION_DIRECTION_MISMATCH, ), ;, }, final, StepInterpolator, lastInterpolator, =, steps, ., get, (, index, ), ;, final, double, current, =]
[., PROPAGATION_DIRECTION_MISMATCH, ), ;, }, final, StepInterpolator, lastInterpolator, =, steps, ., get, (, index, ), ;, final, double, current, =]
[., get, (, index, ), ;, final, double, current, =, lastInterpolator, ., getCurrentTime, (, ), ;, final, double, previous, =]
[., get, (, index, ), ;, final, double, current, =, lastInterpolator, ., getCurrentTime, (, ), ;, final, double, previous, =]
[lastInterpolator, ., getCurrentTime, (, ), ;, final, double, previous, =, lastInterpolator, ., getPreviousTime, (, ), ;, final, double, step, =]
[lastInterpolator, ., getCurrentTime, (, ), ;, final, double, previous, =, lastInterpolator, ., getPreviousTime, (, ), ;, final, double, step, =]
[getCurrentTime, (, ), ;, final, double, previous, =, lastInterpolator, ., getPreviousTime, (, ), ;, final, double, step, =, current, -]
[previous, =, lastInterpolator, ., getPreviousTime, (, ), ;, final, double, step, =, current, -, previous, ;, final, double, gap, =]
[previous, =, lastInterpolator, ., getPreviousTime, (, ), ;, final, double, step, =, current, -, previous, ;, final, double, gap, =]
[previous, =, lastInterpolator, ., getPreviousTime, (, ), ;, final, double, step, =, current, -, previous, ;, final, double, gap, =]
[), ;, final, double, step, =, current, -, previous, ;, final, double, gap, =, model, ., getInitialTime, (, ), -]
[step, =, current, -, previous, ;, final, double, gap, =, model, ., getInitialTime, (, ), -, current, ;, if, (]
[step, =, current, -, previous, ;, final, double, gap, =, model, ., getInitialTime, (, ), -, current, ;, if, (]
[step, =, current, -, previous, ;, final, double, gap, =, model, ., getInitialTime, (, ), -, current, ;, if, (]
[previous, ;, final, double, gap, =, model, ., getInitialTime, (, ), -, current, ;, if, (, FastMath, ., abs, (]
[double, gap, =, model, ., getInitialTime, (, ), -, current, ;, if, (, FastMath, ., abs, (, gap, ), >]
[double, gap, =, model, ., getInitialTime, (, ), -, current, ;, if, (, FastMath, ., abs, (, gap, ), >]
[=, model, ., getInitialTime, (, ), -, current, ;, if, (, FastMath, ., abs, (, gap, ), >, 1.0e-3, *]
[=, model, ., getInitialTime, (, ), -, current, ;, if, (, FastMath, ., abs, (, gap, ), >, 1.0e-3, *]
[(, ), -, current, ;, if, (, FastMath, ., abs, (, gap, ), >, 1.0e-3, *, FastMath, ., abs, (]
[if, (, FastMath, ., abs, (, gap, ), >, 1.0e-3, *, FastMath, ., abs, (, step, ), ), {, throw]
[., abs, (, gap, ), >, 1.0e-3, *, FastMath, ., abs, (, step, ), ), {, throw, new, MathIllegalArgumentException, (]
[., abs, (, gap, ), >, 1.0e-3, *, FastMath, ., abs, (, step, ), ), {, throw, new, MathIllegalArgumentException, (]
[), >, 1.0e-3, *, FastMath, ., abs, (, step, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,]
[), >, 1.0e-3, *, FastMath, ., abs, (, step, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,]
[FastMath, ., abs, (, step, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,, FastMath, ., abs, (]
[(, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,, FastMath, ., abs, (, gap, ), ), ;, }, }, for, (, StepInterpolator, interpolator, :]
[(, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,, FastMath, ., abs, (, gap, ), ), ;, }, }, for, (, StepInterpolator, interpolator, :]
[FastMath, ., abs, (, gap, ), ), ;, }, }, for, (, StepInterpolator, interpolator, :, model, ., steps, ), {]
[FastMath, ., abs, (, gap, ), ), ;, }, }, for, (, StepInterpolator, interpolator, :, model, ., steps, ), {]
[gap, ), ), ;, }, }, for, (, StepInterpolator, interpolator, :, model, ., steps, ), {, steps, ., add, (]
[gap, ), ), ;, }, }, for, (, StepInterpolator, interpolator, :, model, ., steps, ), {, steps, ., add, (]
[StepInterpolator, interpolator, :, model, ., steps, ), {, steps, ., add, (, interpolator, ., copy, (, ), ), ;, }]
[:, model, ., steps, ), {, steps, ., add, (, interpolator, ., copy, (, ), ), ;, }, index, =]
[:, model, ., steps, ), {, steps, ., add, (, interpolator, ., copy, (, ), ), ;, }, index, =]
[:, model, ., steps, ), {, steps, ., add, (, interpolator, ., copy, (, ), ), ;, }, index, =]
[steps, ., add, (, interpolator, ., copy, (, ), ), ;, }, index, =, steps, ., size, (, ), -]
[add, (, interpolator, ., copy, (, ), ), ;, }, index, =, steps, ., size, (, ), -, 1, ;]
[interpolator, ., copy, (, ), ), ;, }, index, =, steps, ., size, (, ), -, 1, ;, finalTime, =]
[interpolator, ., copy, (, ), ), ;, }, index, =, steps, ., size, (, ), -, 1, ;, finalTime, =]
[., copy, (, ), ), ;, }, index, =, steps, ., size, (, ), -, 1, ;, finalTime, =, (]
[., copy, (, ), ), ;, }, index, =, steps, ., size, (, ), -, 1, ;, finalTime, =, (]
[), ;, }, index, =, steps, ., size, (, ), -, 1, ;, finalTime, =, (, steps, ., get, (]
[(, ), ;, }, public, void, init, (, double, t0, ,, double, [, ], y0, ,, double, t, ), {]
[;, }, public, void, init, (, double, t0, ,, double, [, ], y0, ,, double, t, ), {, initialTime, =]
[;, }, public, void, init, (, double, t0, ,, double, [, ], y0, ,, double, t, ), {, initialTime, =]
[init, (, double, t0, ,, double, [, ], y0, ,, double, t, ), {, initialTime, =, Double, ., NaN, ;]
[double, t0, ,, double, [, ], y0, ,, double, t, ), {, initialTime, =, Double, ., NaN, ;, finalTime, =]
[double, t0, ,, double, [, ], y0, ,, double, t, ), {, initialTime, =, Double, ., NaN, ;, finalTime, =]
[[, ], y0, ,, double, t, ), {, initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;]
[y0, ,, double, t, ), {, initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =]
[double, t, ), {, initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;]
[), {, initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;, index, =]
[initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;, index, =, 0, ;]
[initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;, index, =, 0, ;]
[), ;, }, public, void, handleStep, (, final, StepInterpolator, interpolator, ,, final, boolean, isLast, ), throws, MaxCountExceededException, {, if, (]
[), ;, }, public, void, handleStep, (, final, StepInterpolator, interpolator, ,, final, boolean, isLast, ), throws, MaxCountExceededException, {, if, (]
[), ;, }, public, void, handleStep, (, final, StepInterpolator, interpolator, ,, final, boolean, isLast, ), throws, MaxCountExceededException, {, if, (]
[(, final, StepInterpolator, interpolator, ,, final, boolean, isLast, ), throws, MaxCountExceededException, {, if, (, steps, ., size, (, ), ==]
[interpolator, ,, final, boolean, isLast, ), throws, MaxCountExceededException, {, if, (, steps, ., size, (, ), ==, 0, ), {]
[final, boolean, isLast, ), throws, MaxCountExceededException, {, if, (, steps, ., size, (, ), ==, 0, ), {, initialTime, =]
[final, boolean, isLast, ), throws, MaxCountExceededException, {, if, (, steps, ., size, (, ), ==, 0, ), {, initialTime, =]
[{, if, (, steps, ., size, (, ), ==, 0, ), {, initialTime, =, interpolator, ., getPreviousTime, (, ), ;]
[(, steps, ., size, (, ), ==, 0, ), {, initialTime, =, interpolator, ., getPreviousTime, (, ), ;, forward, =]
[(, steps, ., size, (, ), ==, 0, ), {, initialTime, =, interpolator, ., getPreviousTime, (, ), ;, forward, =]
[0, ), {, initialTime, =, interpolator, ., getPreviousTime, (, ), ;, forward, =, interpolator, ., isForward, (, ), ;, }]
[0, ), {, initialTime, =, interpolator, ., getPreviousTime, (, ), ;, forward, =, interpolator, ., isForward, (, ), ;, }]
[=, interpolator, ., getPreviousTime, (, ), ;, forward, =, interpolator, ., isForward, (, ), ;, }, steps, ., add, (]
[=, interpolator, ., getPreviousTime, (, ), ;, forward, =, interpolator, ., isForward, (, ), ;, }, steps, ., add, (]
[interpolator, ., isForward, (, ), ;, }, steps, ., add, (, interpolator, ., copy, (, ), ), ;, if, (]
[(, ), ;, }, steps, ., add, (, interpolator, ., copy, (, ), ), ;, if, (, isLast, ), {]
[;, }, steps, ., add, (, interpolator, ., copy, (, ), ), ;, if, (, isLast, ), {, finalTime, =]
[;, }, steps, ., add, (, interpolator, ., copy, (, ), ), ;, if, (, isLast, ), {, finalTime, =]
[interpolator, ., copy, (, ), ), ;, if, (, isLast, ), {, finalTime, =, interpolator, ., getCurrentTime, (, ), ;]
[copy, (, ), ), ;, if, (, isLast, ), {, finalTime, =, interpolator, ., getCurrentTime, (, ), ;, index, =]
[copy, (, ), ), ;, if, (, isLast, ), {, finalTime, =, interpolator, ., getCurrentTime, (, ), ;, index, =]
[copy, (, ), ), ;, if, (, isLast, ), {, finalTime, =, interpolator, ., getCurrentTime, (, ), ;, index, =]
[(, isLast, ), {, finalTime, =, interpolator, ., getCurrentTime, (, ), ;, index, =, steps, ., size, (, ), -]
[;, index, =, steps, ., size, (, ), -, 1, ;, }, }, public, double, getInitialTime, (, ), {, return]
[;, }, }, public, double, getInitialTime, (, ), {, return, initialTime, ;, }, public, double, getFinalTime, (, ), {, return]
[initialTime, ;, }, public, double, getFinalTime, (, ), {, return, finalTime, ;, }, public, double, getInterpolatedTime, (, ), {, return]
[initialTime, ;, }, public, double, getFinalTime, (, ), {, return, finalTime, ;, }, public, double, getInterpolatedTime, (, ), {, return]
[initialTime, ;, }, public, double, getFinalTime, (, ), {, return, finalTime, ;, }, public, double, getInterpolatedTime, (, ), {, return]
[double, getFinalTime, (, ), {, return, finalTime, ;, }, public, double, getInterpolatedTime, (, ), {, return, steps, ., get, (]
[index, ), ., getInterpolatedTime, (, ), ;, }, public, void, setInterpolatedTime, (, final, double, time, ), {, int, iMin, =]
[;, }, public, void, setInterpolatedTime, (, final, double, time, ), {, int, iMin, =, 0, ;, final, StepInterpolator, sMin, =]
[;, }, public, void, setInterpolatedTime, (, final, double, time, ), {, int, iMin, =, 0, ;, final, StepInterpolator, sMin, =]
[setInterpolatedTime, (, final, double, time, ), {, int, iMin, =, 0, ;, final, StepInterpolator, sMin, =, steps, ., get, (]
[{, int, iMin, =, 0, ;, final, StepInterpolator, sMin, =, steps, ., get, (, iMin, ), ;, double, tMin, =]
[{, int, iMin, =, 0, ;, final, StepInterpolator, sMin, =, steps, ., get, (, iMin, ), ;, double, tMin, =]
[iMin, =, 0, ;, final, StepInterpolator, sMin, =, steps, ., get, (, iMin, ), ;, double, tMin, =, 0.5, *]
[=, 0, ;, final, StepInterpolator, sMin, =, steps, ., get, (, iMin, ), ;, double, tMin, =, 0.5, *, (]
[=, 0, ;, final, StepInterpolator, sMin, =, steps, ., get, (, iMin, ), ;, double, tMin, =, 0.5, *, (]
[=, 0, ;, final, StepInterpolator, sMin, =, steps, ., get, (, iMin, ), ;, double, tMin, =, 0.5, *, (]
[=, steps, ., get, (, iMin, ), ;, double, tMin, =, 0.5, *, (, sMin, ., getPreviousTime, (, ), +]
[=, steps, ., get, (, iMin, ), ;, double, tMin, =, 0.5, *, (, sMin, ., getPreviousTime, (, ), +]
[=, 0.5, *, (, sMin, ., getPreviousTime, (, ), +, sMin, ., getCurrentTime, (, ), ), ;, int, iMax, =]
[=, 0.5, *, (, sMin, ., getPreviousTime, (, ), +, sMin, ., getCurrentTime, (, ), ), ;, int, iMax, =]
[=, 0.5, *, (, sMin, ., getPreviousTime, (, ), +, sMin, ., getCurrentTime, (, ), ), ;, int, iMax, =]
[getPreviousTime, (, ), +, sMin, ., getCurrentTime, (, ), ), ;, int, iMax, =, steps, ., size, (, ), -]
[getCurrentTime, (, ), ), ;, int, iMax, =, steps, ., size, (, ), -, 1, ;, final, StepInterpolator, sMax, =]
[getCurrentTime, (, ), ), ;, int, iMax, =, steps, ., size, (, ), -, 1, ;, final, StepInterpolator, sMax, =]
[;, int, iMax, =, steps, ., size, (, ), -, 1, ;, final, StepInterpolator, sMax, =, steps, ., get, (]
[size, (, ), -, 1, ;, final, StepInterpolator, sMax, =, steps, ., get, (, iMax, ), ;, double, tMax, =]
[size, (, ), -, 1, ;, final, StepInterpolator, sMax, =, steps, ., get, (, iMax, ), ;, double, tMax, =]
[), -, 1, ;, final, StepInterpolator, sMax, =, steps, ., get, (, iMax, ), ;, double, tMax, =, 0.5, *]
[-, 1, ;, final, StepInterpolator, sMax, =, steps, ., get, (, iMax, ), ;, double, tMax, =, 0.5, *, (]
[-, 1, ;, final, StepInterpolator, sMax, =, steps, ., get, (, iMax, ), ;, double, tMax, =, 0.5, *, (]
[-, 1, ;, final, StepInterpolator, sMax, =, steps, ., get, (, iMax, ), ;, double, tMax, =, 0.5, *, (]
[=, steps, ., get, (, iMax, ), ;, double, tMax, =, 0.5, *, (, sMax, ., getPreviousTime, (, ), +]
[=, steps, ., get, (, iMax, ), ;, double, tMax, =, 0.5, *, (, sMax, ., getPreviousTime, (, ), +]
[tMax, =, 0.5, *, (, sMax, ., getPreviousTime, (, ), +, sMax, ., getCurrentTime, (, ), ), ;, if, (]
[tMax, =, 0.5, *, (, sMax, ., getPreviousTime, (, ), +, sMax, ., getCurrentTime, (, ), ), ;, if, (]
[0.5, *, (, sMax, ., getPreviousTime, (, ), +, sMax, ., getCurrentTime, (, ), ), ;, if, (, locatePoint, (]
[(, sMax, ., getPreviousTime, (, ), +, sMax, ., getCurrentTime, (, ), ), ;, if, (, locatePoint, (, time, ,]
[getPreviousTime, (, ), +, sMax, ., getCurrentTime, (, ), ), ;, if, (, locatePoint, (, time, ,, sMin, ), <=]
[+, sMax, ., getCurrentTime, (, ), ), ;, if, (, locatePoint, (, time, ,, sMin, ), <=, 0, ), {]
[., getCurrentTime, (, ), ), ;, if, (, locatePoint, (, time, ,, sMin, ), <=, 0, ), {, index, =]
[(, ), ), ;, if, (, locatePoint, (, time, ,, sMin, ), <=, 0, ), {, index, =, iMin, ;]
[(, ), ), ;, if, (, locatePoint, (, time, ,, sMin, ), <=, 0, ), {, index, =, iMin, ;]
[if, (, locatePoint, (, time, ,, sMin, ), <=, 0, ), {, index, =, iMin, ;, sMin, ., setInterpolatedTime, (]
[<=, 0, ), {, index, =, iMin, ;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;, }, if, (]
[<=, 0, ), {, index, =, iMin, ;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;, }, if, (]
[), {, index, =, iMin, ;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;, }, if, (, locatePoint, (]
[index, =, iMin, ;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;, }, if, (, locatePoint, (, time, ,]
[;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;, }, if, (, locatePoint, (, time, ,, sMax, ), >=]
[setInterpolatedTime, (, time, ), ;, return, ;, }, if, (, locatePoint, (, time, ,, sMax, ), >=, 0, ), {]
[time, ), ;, return, ;, }, if, (, locatePoint, (, time, ,, sMax, ), >=, 0, ), {, index, =]
[;, return, ;, }, if, (, locatePoint, (, time, ,, sMax, ), >=, 0, ), {, index, =, iMax, ;]
[;, return, ;, }, if, (, locatePoint, (, time, ,, sMax, ), >=, 0, ), {, index, =, iMax, ;]
[if, (, locatePoint, (, time, ,, sMax, ), >=, 0, ), {, index, =, iMax, ;, sMax, ., setInterpolatedTime, (]
[>=, 0, ), {, index, =, iMax, ;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;, }, while, (]
[>=, 0, ), {, index, =, iMax, ;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;, }, while, (]
[>=, 0, ), {, index, =, iMax, ;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;, }, while, (]
[), {, index, =, iMax, ;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;, }, while, (, iMax, -]
[index, =, iMax, ;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;, }, while, (, iMax, -, iMin, >]
[(, time, ), ;, return, ;, }, while, (, iMax, -, iMin, >, 5, ), {, final, StepInterpolator, si, =]
[(, time, ), ;, return, ;, }, while, (, iMax, -, iMin, >, 5, ), {, final, StepInterpolator, si, =]
[return, ;, }, while, (, iMax, -, iMin, >, 5, ), {, final, StepInterpolator, si, =, steps, ., get, (]
[iMin, >, 5, ), {, final, StepInterpolator, si, =, steps, ., get, (, index, ), ;, final, int, location, =]
[5, ), {, final, StepInterpolator, si, =, steps, ., get, (, index, ), ;, final, int, location, =, locatePoint, (]
[{, final, StepInterpolator, si, =, steps, ., get, (, index, ), ;, final, int, location, =, locatePoint, (, time, ,]
[steps, ., get, (, index, ), ;, final, int, location, =, locatePoint, (, time, ,, si, ), ;, if, (]
[steps, ., get, (, index, ), ;, final, int, location, =, locatePoint, (, time, ,, si, ), ;, if, (]
[get, (, index, ), ;, final, int, location, =, locatePoint, (, time, ,, si, ), ;, if, (, location, <]
[), ;, final, int, location, =, locatePoint, (, time, ,, si, ), ;, if, (, location, <, 0, ), {]
[final, int, location, =, locatePoint, (, time, ,, si, ), ;, if, (, location, <, 0, ), {, iMax, =]
[location, =, locatePoint, (, time, ,, si, ), ;, if, (, location, <, 0, ), {, iMax, =, index, ;]
[locatePoint, (, time, ,, si, ), ;, if, (, location, <, 0, ), {, iMax, =, index, ;, tMax, =]
[locatePoint, (, time, ,, si, ), ;, if, (, location, <, 0, ), {, iMax, =, index, ;, tMax, =]
[time, ,, si, ), ;, if, (, location, <, 0, ), {, iMax, =, index, ;, tMax, =, 0.5, *]
[,, si, ), ;, if, (, location, <, 0, ), {, iMax, =, index, ;, tMax, =, 0.5, *, (]
[,, si, ), ;, if, (, location, <, 0, ), {, iMax, =, index, ;, tMax, =, 0.5, *, (]
[,, si, ), ;, if, (, location, <, 0, ), {, iMax, =, index, ;, tMax, =, 0.5, *, (]
[location, <, 0, ), {, iMax, =, index, ;, tMax, =, 0.5, *, (, si, ., getPreviousTime, (, ), +]
[location, <, 0, ), {, iMax, =, index, ;, tMax, =, 0.5, *, (, si, ., getPreviousTime, (, ), +]
[0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, if, (]
[0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, if, (]
[(, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, if, (, location, >]
[getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, if, (, location, >, 0, ), {]
[), +, si, ., getCurrentTime, (, ), ), ;, }, else, if, (, location, >, 0, ), {, iMin, =]
[si, ., getCurrentTime, (, ), ), ;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;]
[getCurrentTime, (, ), ), ;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;, tMin, =]
[getCurrentTime, (, ), ), ;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;, tMin, =]
[), ), ;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;, tMin, =, 0.5, *]
[), ;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;, tMin, =, 0.5, *, (]
[), ;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;, tMin, =, 0.5, *, (]
[), ;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;, tMin, =, 0.5, *, (]
[location, >, 0, ), {, iMin, =, index, ;, tMin, =, 0.5, *, (, si, ., getPreviousTime, (, ), +]
[location, >, 0, ), {, iMin, =, index, ;, tMin, =, 0.5, *, (, si, ., getPreviousTime, (, ), +]
[=, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, {]
[=, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, {]
[si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, {, si, ., setInterpolatedTime, (]
[), ), ;, }, else, {, si, ., setInterpolatedTime, (, time, ), ;, return, ;, }, final, int, iMed, =]
[), ), ;, }, else, {, si, ., setInterpolatedTime, (, time, ), ;, return, ;, }, final, int, iMed, =]
[), ;, }, else, {, si, ., setInterpolatedTime, (, time, ), ;, return, ;, }, final, int, iMed, =, (]
[), ;, }, else, {, si, ., setInterpolatedTime, (, time, ), ;, return, ;, }, final, int, iMed, =, (]
[}, else, {, si, ., setInterpolatedTime, (, time, ), ;, return, ;, }, final, int, iMed, =, (, iMin, +]
[si, ., setInterpolatedTime, (, time, ), ;, return, ;, }, final, int, iMed, =, (, iMin, +, iMax, ), /]
[;, return, ;, }, final, int, iMed, =, (, iMin, +, iMax, ), /, 2, ;, final, StepInterpolator, sMed, =]
[;, return, ;, }, final, int, iMed, =, (, iMin, +, iMax, ), /, 2, ;, final, StepInterpolator, sMed, =]
[final, int, iMed, =, (, iMin, +, iMax, ), /, 2, ;, final, StepInterpolator, sMed, =, steps, ., get, (]
[iMax, ), /, 2, ;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed, =]
[iMax, ), /, 2, ;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed, =]
[/, 2, ;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed, =, 0.5, *]
[2, ;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed, =, 0.5, *, (]
[2, ;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed, =, 0.5, *, (]
[2, ;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed, =, 0.5, *, (]
[steps, ., get, (, iMed, ), ;, final, double, tMed, =, 0.5, *, (, sMed, ., getPreviousTime, (, ), +]
[steps, ., get, (, iMed, ), ;, final, double, tMed, =, 0.5, *, (, sMed, ., getPreviousTime, (, ), +]
[tMed, =, 0.5, *, (, sMed, ., getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, ), ), ;, if, (]
[tMed, =, 0.5, *, (, sMed, ., getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, ), ), ;, if, (]
[=, 0.5, *, (, sMed, ., getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, ), ), ;, if, (, (]
[=, 0.5, *, (, sMed, ., getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, ), ), ;, if, (, (]
[=, 0.5, *, (, sMed, ., getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, ), ), ;, if, (, (]
[sMed, ., getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, ), ), ;, if, (, (, FastMath, ., abs, (]
[sMed, ., getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, ), ), ;, if, (, (, FastMath, ., abs, (]
[getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, ), ), ;, if, (, (, FastMath, ., abs, (, tMed, -]
[+, sMed, ., getCurrentTime, (, ), ), ;, if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <]
[getCurrentTime, (, ), ), ;, if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||]
[(, ), ), ;, if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (]
[(, ), ), ;, if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (]
[(, ), ), ;, if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (]
[if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (, FastMath, ., abs, (]
[if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (, FastMath, ., abs, (]
[(, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (, FastMath, ., abs, (, tMax, -]
[abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (, FastMath, ., abs, (, tMax, -, tMed, ), <]
[tMin, ), <, 1e-6, ), ||, (, FastMath, ., abs, (, tMax, -, tMed, ), <, 1e-6, ), ), {]
[<, 1e-6, ), ||, (, FastMath, ., abs, (, tMax, -, tMed, ), <, 1e-6, ), ), {, index, =]
[tMax, -, tMed, ), <, 1e-6, ), ), {, index, =, iMed, ;, }, else, {, final, double, d12, =]
[tMax, -, tMed, ), <, 1e-6, ), ), {, index, =, iMed, ;, }, else, {, final, double, d12, =]
[tMed, ), <, 1e-6, ), ), {, index, =, iMed, ;, }, else, {, final, double, d12, =, tMax, -]
[{, index, =, iMed, ;, }, else, {, final, double, d12, =, tMax, -, tMed, ;, final, double, d23, =]
[{, index, =, iMed, ;, }, else, {, final, double, d12, =, tMax, -, tMed, ;, final, double, d23, =]
[=, iMed, ;, }, else, {, final, double, d12, =, tMax, -, tMed, ;, final, double, d23, =, tMed, -]
[final, double, d12, =, tMax, -, tMed, ;, final, double, d23, =, tMed, -, tMin, ;, final, double, d13, =]
[final, double, d12, =, tMax, -, tMed, ;, final, double, d23, =, tMed, -, tMin, ;, final, double, d13, =]
[d12, =, tMax, -, tMed, ;, final, double, d23, =, tMed, -, tMin, ;, final, double, d13, =, tMax, -]
[final, double, d23, =, tMed, -, tMin, ;, final, double, d13, =, tMax, -, tMin, ;, final, double, dt1, =]
[final, double, d23, =, tMed, -, tMin, ;, final, double, d13, =, tMax, -, tMin, ;, final, double, dt1, =]
[d23, =, tMed, -, tMin, ;, final, double, d13, =, tMax, -, tMin, ;, final, double, dt1, =, time, -]
[final, double, d13, =, tMax, -, tMin, ;, final, double, dt1, =, time, -, tMax, ;, final, double, dt2, =]
[final, double, d13, =, tMax, -, tMin, ;, final, double, dt1, =, time, -, tMax, ;, final, double, dt2, =]
[d13, =, tMax, -, tMin, ;, final, double, dt1, =, time, -, tMax, ;, final, double, dt2, =, time, -]
[final, double, dt1, =, time, -, tMax, ;, final, double, dt2, =, time, -, tMed, ;, final, double, dt3, =]
[final, double, dt1, =, time, -, tMax, ;, final, double, dt2, =, time, -, tMed, ;, final, double, dt3, =]
[dt1, =, time, -, tMax, ;, final, double, dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -]
[final, double, dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =]
[final, double, dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =]
[double, dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (]
[double, dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (]
[double, dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (]
[double, dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (]
[dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (, (]
[dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (, (]
[dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (, (]
[time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (, (, dt2, *]
[tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3, *]
[double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23, ), *]
[=, time, -, tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23, ), *, iMax, -]
[=, time, -, tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23, ), *, iMax, -]
[time, -, tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23, ), *, iMax, -, (]
[time, -, tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23, ), *, iMax, -, (]
[time, -, tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23, ), *, iMax, -, (]
[tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23, ), *, iMax, -, (, dt1, *]
[final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23, ), *, iMax, -, (, dt1, *, dt3, *]
[=, (, (, dt2, *, dt3, *, d23, ), *, iMax, -, (, dt1, *, dt3, *, d13, ), *]
[(, dt2, *, dt3, *, d23, ), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +]
[(, dt2, *, dt3, *, d23, ), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +]
[dt2, *, dt3, *, d23, ), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (]
[dt2, *, dt3, *, d23, ), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (]
[dt2, *, dt3, *, d23, ), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (]
[dt3, *, d23, ), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1, *]
[d23, ), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *]
[iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, ), *]
[dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /]
[*, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (]
[*, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (]
[*, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (]
[*, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *]
[), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *, d23, *]
[+, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;]
[dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;, index, =]
[*, d12, ), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;, index, =, (, int, )]
[*, d12, ), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;, index, =, (, int, )]
[iMin, ), /, (, d12, *, d23, *, d13, ), ;, index, =, (, int, ), FastMath, ., rint, (]
[d13, ), ;, index, =, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =]
[d13, ), ;, index, =, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =]
[=, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, ., max, (]
[=, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, ., max, (]
[int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, ., max, (, iMin, +]
[FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,]
[FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,]
[., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,, (]
[., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,, (]
[., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,, (]
[(, iLagrange, ), ;, }, final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,, (, 9, *]
[), ;, }, final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,, (, 9, *, iMin, +]
[final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,, (, 9, *, iMin, +, iMax, ), /]
[(, iMin, +, 1, ,, (, 9, *, iMin, +, iMax, ), /, 10, ), ;, final, int, high, =]
[(, iMin, +, 1, ,, (, 9, *, iMin, +, iMax, ), /, 10, ), ;, final, int, high, =]
[,, (, 9, *, iMin, +, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (]
[,, (, 9, *, iMin, +, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (]
[9, *, iMin, +, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -]
[iMin, +, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,]
[iMin, +, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,]
[+, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (]
[+, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (]
[), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (, iMin, +]
[), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (, iMin, +]
[10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (, iMin, +, 9, *]
[final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (, iMin, +, 9, *, iMax, ), /]
[., min, (, iMax, -, 1, ,, (, iMin, +, 9, *, iMax, ), /, 10, ), ;, if, (]
[., min, (, iMax, -, 1, ,, (, iMin, +, 9, *, iMax, ), /, 10, ), ;, if, (]
[(, iMax, -, 1, ,, (, iMin, +, 9, *, iMax, ), /, 10, ), ;, if, (, index, <]
[1, ,, (, iMin, +, 9, *, iMax, ), /, 10, ), ;, if, (, index, <, low, ), {]
[(, iMin, +, 9, *, iMax, ), /, 10, ), ;, if, (, index, <, low, ), {, index, =]
[), /, 10, ), ;, if, (, index, <, low, ), {, index, =, low, ;, }, else, if, (]
[), /, 10, ), ;, if, (, index, <, low, ), {, index, =, low, ;, }, else, if, (]
[10, ), ;, if, (, index, <, low, ), {, index, =, low, ;, }, else, if, (, index, >]
[if, (, index, <, low, ), {, index, =, low, ;, }, else, if, (, index, >, high, ), {]
[index, <, low, ), {, index, =, low, ;, }, else, if, (, index, >, high, ), {, index, =]
[{, index, =, low, ;, }, else, if, (, index, >, high, ), {, index, =, high, ;, }, }]
[=, low, ;, }, else, if, (, index, >, high, ), {, index, =, high, ;, }, }, index, =]
[else, if, (, index, >, high, ), {, index, =, high, ;, }, }, index, =, iMin, ;, while, (]
[else, if, (, index, >, high, ), {, index, =, high, ;, }, }, index, =, iMin, ;, while, (]
[if, (, index, >, high, ), {, index, =, high, ;, }, }, index, =, iMin, ;, while, (, (]
[if, (, index, >, high, ), {, index, =, high, ;, }, }, index, =, iMin, ;, while, (, (]
[index, >, high, ), {, index, =, high, ;, }, }, index, =, iMin, ;, while, (, (, index, <=]
[), {, index, =, high, ;, }, }, index, =, iMin, ;, while, (, (, index, <=, iMax, ), &&]
[{, index, =, high, ;, }, }, index, =, iMin, ;, while, (, (, index, <=, iMax, ), &&, (]
[{, index, =, high, ;, }, }, index, =, iMin, ;, while, (, (, index, <=, iMax, ), &&, (]
[=, high, ;, }, }, index, =, iMin, ;, while, (, (, index, <=, iMax, ), &&, (, locatePoint, (]
[;, }, }, index, =, iMin, ;, while, (, (, index, <=, iMax, ), &&, (, locatePoint, (, time, ,]
[;, }, }, index, =, iMin, ;, while, (, (, index, <=, iMax, ), &&, (, locatePoint, (, time, ,]
[=, iMin, ;, while, (, (, index, <=, iMax, ), &&, (, locatePoint, (, time, ,, steps, ., get, (]
[(, (, index, <=, iMax, ), &&, (, locatePoint, (, time, ,, steps, ., get, (, index, ), ), >]
[iMax, ), &&, (, locatePoint, (, time, ,, steps, ., get, (, index, ), ), >, 0, ), ), {]
[), &&, (, locatePoint, (, time, ,, steps, ., get, (, index, ), ), >, 0, ), ), {, ++]
[locatePoint, (, time, ,, steps, ., get, (, index, ), ), >, 0, ), ), {, ++, index, ;, }]
[locatePoint, (, time, ,, steps, ., get, (, index, ), ), >, 0, ), ), {, ++, index, ;, }]
[locatePoint, (, time, ,, steps, ., get, (, index, ), ), >, 0, ), ), {, ++, index, ;, }]
[steps, ., get, (, index, ), ), >, 0, ), ), {, ++, index, ;, }, steps, ., get, (]
[), ), >, 0, ), ), {, ++, index, ;, }, steps, ., get, (, index, ), ., setInterpolatedTime, (]
[index, ), ., setInterpolatedTime, (, time, ), ;, }, public, double, [, ], getInterpolatedState, (, ), throws, MaxCountExceededException, {, return]
[index, ), ., setInterpolatedTime, (, time, ), ;, }, public, double, [, ], getInterpolatedState, (, ), throws, MaxCountExceededException, {, return]
[index, ), ., setInterpolatedTime, (, time, ), ;, }, public, double, [, ], getInterpolatedState, (, ), throws, MaxCountExceededException, {, return]
[(, time, ), ;, }, public, double, [, ], getInterpolatedState, (, ), throws, MaxCountExceededException, {, return, steps, ., get, (]
[., getInterpolatedState, (, ), ;, }, public, double, [, ], getInterpolatedSecondaryState, (, final, int, secondaryStateIndex, ), throws, MaxCountExceededException, {, return]
[., getInterpolatedState, (, ), ;, }, public, double, [, ], getInterpolatedSecondaryState, (, final, int, secondaryStateIndex, ), throws, MaxCountExceededException, {, return]
[., getInterpolatedState, (, ), ;, }, public, double, [, ], getInterpolatedSecondaryState, (, final, int, secondaryStateIndex, ), throws, MaxCountExceededException, {, return]
[;, }, public, double, [, ], getInterpolatedSecondaryState, (, final, int, secondaryStateIndex, ), throws, MaxCountExceededException, {, return, steps, ., get, (]
[], getInterpolatedSecondaryState, (, final, int, secondaryStateIndex, ), throws, MaxCountExceededException, {, return, steps, ., get, (, index, ), ., getInterpolatedSecondaryState, (]
[(, secondaryStateIndex, ), ;, }, private, int, locatePoint, (, final, double, time, ,, final, StepInterpolator, interval, ), {, if, (]
[private, int, locatePoint, (, final, double, time, ,, final, StepInterpolator, interval, ), {, if, (, forward, ), {, if, (]
[private, int, locatePoint, (, final, double, time, ,, final, StepInterpolator, interval, ), {, if, (, forward, ), {, if, (]
[locatePoint, (, final, double, time, ,, final, StepInterpolator, interval, ), {, if, (, forward, ), {, if, (, time, <]
[locatePoint, (, final, double, time, ,, final, StepInterpolator, interval, ), {, if, (, forward, ), {, if, (, time, <]
[interval, ), {, if, (, forward, ), {, if, (, time, <, interval, ., getPreviousTime, (, ), ), {, return]
[), {, if, (, forward, ), {, if, (, time, <, interval, ., getPreviousTime, (, ), ), {, return, -]
[{, if, (, time, <, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (]
[{, if, (, time, <, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (]
[(, time, <, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (, time, >]
[(, time, <, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (, time, >]
[), {, return, -, 1, ;, }, else, if, (, time, >, interval, ., getCurrentTime, (, ), ), {, return]
[{, return, -, 1, ;, }, else, if, (, time, >, interval, ., getCurrentTime, (, ), ), {, return, +]
[else, if, (, time, >, interval, ., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else, {, return]
[., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, if, (]
[., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, if, (]
[(, ), ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, if, (, time, >]
[(, ), ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, if, (, time, >]
[}, else, {, return, 0, ;, }, }, if, (, time, >, interval, ., getPreviousTime, (, ), ), {, return]
[else, {, return, 0, ;, }, }, if, (, time, >, interval, ., getPreviousTime, (, ), ), {, return, -]
[}, if, (, time, >, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (]
[}, if, (, time, >, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (]
[(, time, >, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (, time, <]
[(, time, >, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (, time, <]
[), {, return, -, 1, ;, }, else, if, (, time, <, interval, ., getCurrentTime, (, ), ), {, return]
[{, return, -, 1, ;, }, else, if, (, time, <, interval, ., getCurrentTime, (, ), ), {, return, +]
[else, if, (, time, <, interval, ., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else, {, return]
