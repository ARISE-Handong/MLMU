[io, ., Serializable, ;, public, class, LineNeedle, extends, MeterNeedle, implements, Cloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[protected, void, drawNeedle, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Point2D, rotate, ,, double, angle, ), {, Line2D, shape, =]
[Point2D, rotate, ,, double, angle, ), {, Line2D, shape, =, new, Line2D, ., Double, (, ), ;, double, x, =]
[Point2D, rotate, ,, double, angle, ), {, Line2D, shape, =, new, Line2D, ., Double, (, ), ;, double, x, =]
[Point2D, rotate, ,, double, angle, ), {, Line2D, shape, =, new, Line2D, ., Double, (, ), ;, double, x, =]
[{, Line2D, shape, =, new, Line2D, ., Double, (, ), ;, double, x, =, plotArea, ., getMinX, (, ), +]
[Line2D, shape, =, new, Line2D, ., Double, (, ), ;, double, x, =, plotArea, ., getMinX, (, ), +, (]
[Line2D, shape, =, new, Line2D, ., Double, (, ), ;, double, x, =, plotArea, ., getMinX, (, ), +, (]
[Line2D, shape, =, new, Line2D, ., Double, (, ), ;, double, x, =, plotArea, ., getMinX, (, ), +, (]
[Double, (, ), ;, double, x, =, plotArea, ., getMinX, (, ), +, (, plotArea, ., getWidth, (, ), /]
[;, double, x, =, plotArea, ., getMinX, (, ), +, (, plotArea, ., getWidth, (, ), /, 2, ), ;]
[;, double, x, =, plotArea, ., getMinX, (, ), +, (, plotArea, ., getWidth, (, ), /, 2, ), ;]
[plotArea, ., getMinX, (, ), +, (, plotArea, ., getWidth, (, ), /, 2, ), ;, shape, ., setLine, (]
[getMinX, (, ), +, (, plotArea, ., getWidth, (, ), /, 2, ), ;, shape, ., setLine, (, x, ,]
[getMinX, (, ), +, (, plotArea, ., getWidth, (, ), /, 2, ), ;, shape, ., setLine, (, x, ,]
[., getWidth, (, ), /, 2, ), ;, shape, ., setLine, (, x, ,, plotArea, ., getMinY, (, ), ,]
[(, ), /, 2, ), ;, shape, ., setLine, (, x, ,, plotArea, ., getMinY, (, ), ,, x, ,]
[(, ), /, 2, ), ;, shape, ., setLine, (, x, ,, plotArea, ., getMinY, (, ), ,, x, ,]
[x, ,, plotArea, ., getMinY, (, ), ,, x, ,, plotArea, ., getMaxY, (, ), ), ;, Shape, s, =]
[getMinY, (, ), ,, x, ,, plotArea, ., getMaxY, (, ), ), ;, Shape, s, =, shape, ;, if, (]
[getMinY, (, ), ,, x, ,, plotArea, ., getMaxY, (, ), ), ;, Shape, s, =, shape, ;, if, (]
[(, ), ,, x, ,, plotArea, ., getMaxY, (, ), ), ;, Shape, s, =, shape, ;, if, (, (]
[(, ), ,, x, ,, plotArea, ., getMaxY, (, ), ), ;, Shape, s, =, shape, ;, if, (, (]
[,, x, ,, plotArea, ., getMaxY, (, ), ), ;, Shape, s, =, shape, ;, if, (, (, rotate, !=]
[plotArea, ., getMaxY, (, ), ), ;, Shape, s, =, shape, ;, if, (, (, rotate, !=, null, ), &&]
[., getMaxY, (, ), ), ;, Shape, s, =, shape, ;, if, (, (, rotate, !=, null, ), &&, (]
[., getMaxY, (, ), ), ;, Shape, s, =, shape, ;, if, (, (, rotate, !=, null, ), &&, (]
[(, ), ), ;, Shape, s, =, shape, ;, if, (, (, rotate, !=, null, ), &&, (, angle, !=]
[Shape, s, =, shape, ;, if, (, (, rotate, !=, null, ), &&, (, angle, !=, 0, ), ), {]
[Shape, s, =, shape, ;, if, (, (, rotate, !=, null, ), &&, (, angle, !=, 0, ), ), {]
[(, (, rotate, !=, null, ), &&, (, angle, !=, 0, ), ), {, getTransform, (, ), ., setToRotation, (]
[rotate, !=, null, ), &&, (, angle, !=, 0, ), ), {, getTransform, (, ), ., setToRotation, (, angle, ,]
[rotate, !=, null, ), &&, (, angle, !=, 0, ), ), {, getTransform, (, ), ., setToRotation, (, angle, ,]
[angle, !=, 0, ), ), {, getTransform, (, ), ., setToRotation, (, angle, ,, rotate, ., getX, (, ), ,]
[angle, !=, 0, ), ), {, getTransform, (, ), ., setToRotation, (, angle, ,, rotate, ., getX, (, ), ,]
[(, ), ., setToRotation, (, angle, ,, rotate, ., getX, (, ), ,, rotate, ., getY, (, ), ), ;]
[., setToRotation, (, angle, ,, rotate, ., getX, (, ), ,, rotate, ., getY, (, ), ), ;, s, =]
[., setToRotation, (, angle, ,, rotate, ., getX, (, ), ,, rotate, ., getY, (, ), ), ;, s, =]
[., getX, (, ), ,, rotate, ., getY, (, ), ), ;, s, =, getTransform, (, ), ., createTransformedShape, (]
[,, rotate, ., getY, (, ), ), ;, s, =, getTransform, (, ), ., createTransformedShape, (, s, ), ;, }]
[., getY, (, ), ), ;, s, =, getTransform, (, ), ., createTransformedShape, (, s, ), ;, }, defaultDisplay, (]
[(, ), ), ;, s, =, getTransform, (, ), ., createTransformedShape, (, s, ), ;, }, defaultDisplay, (, g2, ,]
[;, }, defaultDisplay, (, g2, ,, s, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[;, }, defaultDisplay, (, g2, ,, s, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[defaultDisplay, (, g2, ,, s, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[s, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, LineNeedle, ), ), {, return]
[{, return, true, ;, }, if, (, !, (, obj, instanceof, LineNeedle, ), ), {, return, false, ;, }, return]
[{, return, true, ;, }, if, (, !, (, obj, instanceof, LineNeedle, ), ), {, return, false, ;, }, return]
[}, if, (, !, (, obj, instanceof, LineNeedle, ), ), {, return, false, ;, }, return, super, ., equals, (]
[return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, int, hashCode, (, ), {, return]
[return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, int, hashCode, (, ), {, return]
[(, ), {, return, super, ., hashCode, (, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return]
[(, ), {, return, super, ., hashCode, (, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return]
