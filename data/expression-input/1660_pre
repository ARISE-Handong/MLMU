[final, boolean, stripTweaks, ;, private, final, SortedMap, <, String, ,, Node, >, compilerDefaultValueOverrides, ;, private, static, final, CharMatcher, ID_MATCHER, =]
[final, boolean, stripTweaks, ;, private, final, SortedMap, <, String, ,, Node, >, compilerDefaultValueOverrides, ;, private, static, final, CharMatcher, ID_MATCHER, =]
[final, boolean, stripTweaks, ;, private, final, SortedMap, <, String, ,, Node, >, compilerDefaultValueOverrides, ;, private, static, final, CharMatcher, ID_MATCHER, =]
[final, boolean, stripTweaks, ;, private, final, SortedMap, <, String, ,, Node, >, compilerDefaultValueOverrides, ;, private, static, final, CharMatcher, ID_MATCHER, =]
[private, final, SortedMap, <, String, ,, Node, >, compilerDefaultValueOverrides, ;, private, static, final, CharMatcher, ID_MATCHER, =, CharMatcher, ., inRange, (]
[SortedMap, <, String, ,, Node, >, compilerDefaultValueOverrides, ;, private, static, final, CharMatcher, ID_MATCHER, =, CharMatcher, ., inRange, (, 'a', ,]
[>, compilerDefaultValueOverrides, ;, private, static, final, CharMatcher, ID_MATCHER, =, CharMatcher, ., inRange, (, 'a', ,, 'z', ), ., or, (]
[>, compilerDefaultValueOverrides, ;, private, static, final, CharMatcher, ID_MATCHER, =, CharMatcher, ., inRange, (, 'a', ,, 'z', ), ., or, (]
[static, final, CharMatcher, ID_MATCHER, =, CharMatcher, ., inRange, (, 'a', ,, 'z', ), ., or, (, CharMatcher, ., inRange, (]
[CharMatcher, ID_MATCHER, =, CharMatcher, ., inRange, (, 'a', ,, 'z', ), ., or, (, CharMatcher, ., inRange, (, 'A', ,]
[(, 'a', ,, 'z', ), ., or, (, CharMatcher, ., inRange, (, 'A', ,, 'Z', ), ), ., or, (]
[(, 'a', ,, 'z', ), ., or, (, CharMatcher, ., inRange, (, 'A', ,, 'Z', ), ), ., or, (]
[), ., or, (, CharMatcher, ., inRange, (, 'A', ,, 'Z', ), ), ., or, (, CharMatcher, ., anyOf, (]
[,, 'Z', ), ), ., or, (, CharMatcher, ., anyOf, (, "0123456789_.", ), ), ;, static, final, DiagnosticType, UNKNOWN_TWEAK_WARNING, =]
[,, 'Z', ), ), ., or, (, CharMatcher, ., anyOf, (, "0123456789_.", ), ), ;, static, final, DiagnosticType, UNKNOWN_TWEAK_WARNING, =]
[., or, (, CharMatcher, ., anyOf, (, "0123456789_.", ), ), ;, static, final, DiagnosticType, UNKNOWN_TWEAK_WARNING, =, DiagnosticType, ., warning, (]
[(, CharMatcher, ., anyOf, (, "0123456789_.", ), ), ;, static, final, DiagnosticType, UNKNOWN_TWEAK_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TWEAK_WARNING", ,]
[;, static, final, DiagnosticType, UNKNOWN_TWEAK_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TWEAK_WARNING", ,, "no tweak registered with ID {0}", ), ;, static, final, DiagnosticType, TWEAK_MULTIPLY_REGISTERED_ERROR, =]
[;, static, final, DiagnosticType, UNKNOWN_TWEAK_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TWEAK_WARNING", ,, "no tweak registered with ID {0}", ), ;, static, final, DiagnosticType, TWEAK_MULTIPLY_REGISTERED_ERROR, =]
[UNKNOWN_TWEAK_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TWEAK_WARNING", ,, "no tweak registered with ID {0}", ), ;, static, final, DiagnosticType, TWEAK_MULTIPLY_REGISTERED_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., warning, (, "JSC_UNKNOWN_TWEAK_WARNING", ,, "no tweak registered with ID {0}", ), ;, static, final, DiagnosticType, TWEAK_MULTIPLY_REGISTERED_ERROR, =, DiagnosticType, ., error, (, "JSC_TWEAK_MULTIPLY_REGISTERED_ERROR", ,]
[;, static, final, DiagnosticType, TWEAK_MULTIPLY_REGISTERED_ERROR, =, DiagnosticType, ., error, (, "JSC_TWEAK_MULTIPLY_REGISTERED_ERROR", ,, "Tweak {0} has already been registered.", ), ;, static, final, DiagnosticType, NON_LITERAL_TWEAK_ID_ERROR, =]
[;, static, final, DiagnosticType, TWEAK_MULTIPLY_REGISTERED_ERROR, =, DiagnosticType, ., error, (, "JSC_TWEAK_MULTIPLY_REGISTERED_ERROR", ,, "Tweak {0} has already been registered.", ), ;, static, final, DiagnosticType, NON_LITERAL_TWEAK_ID_ERROR, =]
[TWEAK_MULTIPLY_REGISTERED_ERROR, =, DiagnosticType, ., error, (, "JSC_TWEAK_MULTIPLY_REGISTERED_ERROR", ,, "Tweak {0} has already been registered.", ), ;, static, final, DiagnosticType, NON_LITERAL_TWEAK_ID_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_TWEAK_MULTIPLY_REGISTERED_ERROR", ,, "Tweak {0} has already been registered.", ), ;, static, final, DiagnosticType, NON_LITERAL_TWEAK_ID_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_LITERAL_TWEAK_ID_ERROR", ,]
[;, static, final, DiagnosticType, NON_LITERAL_TWEAK_ID_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_LITERAL_TWEAK_ID_ERROR", ,, "tweak ID must be a string literal", ), ;, static, final, DiagnosticType, INVALID_TWEAK_DEFAULT_VALUE_WARNING, =]
[;, static, final, DiagnosticType, NON_LITERAL_TWEAK_ID_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_LITERAL_TWEAK_ID_ERROR", ,, "tweak ID must be a string literal", ), ;, static, final, DiagnosticType, INVALID_TWEAK_DEFAULT_VALUE_WARNING, =]
[NON_LITERAL_TWEAK_ID_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_LITERAL_TWEAK_ID_ERROR", ,, "tweak ID must be a string literal", ), ;, static, final, DiagnosticType, INVALID_TWEAK_DEFAULT_VALUE_WARNING, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., error, (, "JSC_NON_LITERAL_TWEAK_ID_ERROR", ,, "tweak ID must be a string literal", ), ;, static, final, DiagnosticType, INVALID_TWEAK_DEFAULT_VALUE_WARNING, =, DiagnosticType, ., warning, (, "JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING", ,]
[DiagnosticType, ., error, (, "JSC_NON_LITERAL_TWEAK_ID_ERROR", ,, "tweak ID must be a string literal", ), ;, static, final, DiagnosticType, INVALID_TWEAK_DEFAULT_VALUE_WARNING, =, DiagnosticType, ., warning, (, "JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING", ,]
[error, (, "JSC_NON_LITERAL_TWEAK_ID_ERROR", ,, "tweak ID must be a string literal", ), ;, static, final, DiagnosticType, INVALID_TWEAK_DEFAULT_VALUE_WARNING, =, DiagnosticType, ., warning, (, "JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING", ,, "tweak {0} registered with {1} must have a default value that is a ", +]
[final, DiagnosticType, INVALID_TWEAK_DEFAULT_VALUE_WARNING, =, DiagnosticType, ., warning, (, "JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING", ,, "tweak {0} registered with {1} must have a default value that is a ", +, "literal of type {2}", ), ;, static, final, DiagnosticType, NON_GLOBAL_TWEAK_INIT_ERROR, =]
[final, DiagnosticType, INVALID_TWEAK_DEFAULT_VALUE_WARNING, =, DiagnosticType, ., warning, (, "JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING", ,, "tweak {0} registered with {1} must have a default value that is a ", +, "literal of type {2}", ), ;, static, final, DiagnosticType, NON_GLOBAL_TWEAK_INIT_ERROR, =]
[DiagnosticType, ., warning, (, "JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING", ,, "tweak {0} registered with {1} must have a default value that is a ", +, "literal of type {2}", ), ;, static, final, DiagnosticType, NON_GLOBAL_TWEAK_INIT_ERROR, =, DiagnosticType, ., error, (]
[warning, (, "JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING", ,, "tweak {0} registered with {1} must have a default value that is a ", +, "literal of type {2}", ), ;, static, final, DiagnosticType, NON_GLOBAL_TWEAK_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_TWEAK_INIT_ERROR", ,]
[;, static, final, DiagnosticType, NON_GLOBAL_TWEAK_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_TWEAK_INIT_ERROR", ,, "tweak declaration {0} must occur in the global scope", ), ;, static, final, DiagnosticType, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, =]
[;, static, final, DiagnosticType, NON_GLOBAL_TWEAK_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_TWEAK_INIT_ERROR", ,, "tweak declaration {0} must occur in the global scope", ), ;, static, final, DiagnosticType, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, =]
[NON_GLOBAL_TWEAK_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_TWEAK_INIT_ERROR", ,, "tweak declaration {0} must occur in the global scope", ), ;, static, final, DiagnosticType, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_NON_GLOBAL_TWEAK_INIT_ERROR", ,, "tweak declaration {0} must occur in the global scope", ), ;, static, final, DiagnosticType, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, =, DiagnosticType, ., error, (, "JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR", ,]
[DiagnosticType, ., error, (, "JSC_NON_GLOBAL_TWEAK_INIT_ERROR", ,, "tweak declaration {0} must occur in the global scope", ), ;, static, final, DiagnosticType, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, =, DiagnosticType, ., error, (, "JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR", ,]
[error, (, "JSC_NON_GLOBAL_TWEAK_INIT_ERROR", ,, "tweak declaration {0} must occur in the global scope", ), ;, static, final, DiagnosticType, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, =, DiagnosticType, ., error, (, "JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR", ,, "Cannot override the default value of tweak {0} after it has been ", +]
[final, DiagnosticType, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, =, DiagnosticType, ., error, (, "JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR", ,, "Cannot override the default value of tweak {0} after it has been ", +, "registered", ), ;, static, final, DiagnosticType, TWEAK_WRONG_GETTER_TYPE_WARNING, =]
[final, DiagnosticType, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, =, DiagnosticType, ., error, (, "JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR", ,, "Cannot override the default value of tweak {0} after it has been ", +, "registered", ), ;, static, final, DiagnosticType, TWEAK_WRONG_GETTER_TYPE_WARNING, =]
[DiagnosticType, ., error, (, "JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR", ,, "Cannot override the default value of tweak {0} after it has been ", +, "registered", ), ;, static, final, DiagnosticType, TWEAK_WRONG_GETTER_TYPE_WARNING, =, DiagnosticType, ., warning, (]
[error, (, "JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR", ,, "Cannot override the default value of tweak {0} after it has been ", +, "registered", ), ;, static, final, DiagnosticType, TWEAK_WRONG_GETTER_TYPE_WARNING, =, DiagnosticType, ., warning, (, "JSC_TWEAK_WRONG_GETTER_TYPE_WARNING", ,]
[;, static, final, DiagnosticType, TWEAK_WRONG_GETTER_TYPE_WARNING, =, DiagnosticType, ., warning, (, "JSC_TWEAK_WRONG_GETTER_TYPE_WARNING", ,, "tweak getter function {0} used for tweak registered using {1}", ), ;, static, final, DiagnosticType, INVALID_TWEAK_ID_ERROR, =]
[;, static, final, DiagnosticType, TWEAK_WRONG_GETTER_TYPE_WARNING, =, DiagnosticType, ., warning, (, "JSC_TWEAK_WRONG_GETTER_TYPE_WARNING", ,, "tweak getter function {0} used for tweak registered using {1}", ), ;, static, final, DiagnosticType, INVALID_TWEAK_ID_ERROR, =]
[TWEAK_WRONG_GETTER_TYPE_WARNING, =, DiagnosticType, ., warning, (, "JSC_TWEAK_WRONG_GETTER_TYPE_WARNING", ,, "tweak getter function {0} used for tweak registered using {1}", ), ;, static, final, DiagnosticType, INVALID_TWEAK_ID_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., warning, (, "JSC_TWEAK_WRONG_GETTER_TYPE_WARNING", ,, "tweak getter function {0} used for tweak registered using {1}", ), ;, static, final, DiagnosticType, INVALID_TWEAK_ID_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_TWEAK_ID_ERROR", ,]
[DiagnosticType, ., warning, (, "JSC_TWEAK_WRONG_GETTER_TYPE_WARNING", ,, "tweak getter function {0} used for tweak registered using {1}", ), ;, static, final, DiagnosticType, INVALID_TWEAK_ID_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_TWEAK_ID_ERROR", ,]
[warning, (, "JSC_TWEAK_WRONG_GETTER_TYPE_WARNING", ,, "tweak getter function {0} used for tweak registered using {1}", ), ;, static, final, DiagnosticType, INVALID_TWEAK_ID_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_TWEAK_ID_ERROR", ,, "tweak ID contains illegal characters. Only letters, numbers, _ ", +]
[final, int, validNodeTypeA, ;, final, int, validNodeTypeB, ;, final, TweakFunction, registerFunction, ;, TweakFunction, (, String, name, ), {, this, (]
[validNodeTypeA, ;, final, int, validNodeTypeB, ;, final, TweakFunction, registerFunction, ;, TweakFunction, (, String, name, ), {, this, (, name, ,]
[final, int, validNodeTypeB, ;, final, TweakFunction, registerFunction, ;, TweakFunction, (, String, name, ), {, this, (, name, ,, null, ,]
[final, int, validNodeTypeB, ;, final, TweakFunction, registerFunction, ;, TweakFunction, (, String, name, ), {, this, (, name, ,, null, ,]
[final, TweakFunction, registerFunction, ;, TweakFunction, (, String, name, ), {, this, (, name, ,, null, ,, Token, ., ERROR, ,]
[final, TweakFunction, registerFunction, ;, TweakFunction, (, String, name, ), {, this, (, name, ,, null, ,, Token, ., ERROR, ,]
[TweakFunction, (, String, name, ), {, this, (, name, ,, null, ,, Token, ., ERROR, ,, Token, ., ERROR, ,]
[ERROR, ,, null, ), ;, }, TweakFunction, (, String, name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ), {, this, (]
[null, ), ;, }, TweakFunction, (, String, name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ), {, this, (, name, ,]
[;, }, TweakFunction, (, String, name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ), {, this, (, name, ,, expectedTypeName, ,]
[TweakFunction, (, String, name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ), {, this, (, name, ,, expectedTypeName, ,, validNodeTypeA, ,]
[TweakFunction, (, String, name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ), {, this, (, name, ,, expectedTypeName, ,, validNodeTypeA, ,]
[,, String, expectedTypeName, ,, int, validNodeTypeA, ), {, this, (, name, ,, expectedTypeName, ,, validNodeTypeA, ,, Token, ., ERROR, ,]
[), ;, }, TweakFunction, (, String, name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ,, int, validNodeTypeB, ), {, this, (]
[}, TweakFunction, (, String, name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ,, int, validNodeTypeB, ), {, this, (, name, ,]
[(, String, name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ,, int, validNodeTypeB, ), {, this, (, name, ,, expectedTypeName, ,]
[name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ,, int, validNodeTypeB, ), {, this, (, name, ,, expectedTypeName, ,, validNodeTypeA, ,]
[String, expectedTypeName, ,, int, validNodeTypeA, ,, int, validNodeTypeB, ), {, this, (, name, ,, expectedTypeName, ,, validNodeTypeA, ,, validNodeTypeB, ,]
[,, validNodeTypeA, ,, validNodeTypeB, ,, null, ), ;, }, TweakFunction, (, String, name, ,, TweakFunction, registerFunction, ), {, this, (]
[,, validNodeTypeB, ,, null, ), ;, }, TweakFunction, (, String, name, ,, TweakFunction, registerFunction, ), {, this, (, name, ,]
[,, null, ), ;, }, TweakFunction, (, String, name, ,, TweakFunction, registerFunction, ), {, this, (, name, ,, null, ,]
[,, null, ), ;, }, TweakFunction, (, String, name, ,, TweakFunction, registerFunction, ), {, this, (, name, ,, null, ,]
[}, TweakFunction, (, String, name, ,, TweakFunction, registerFunction, ), {, this, (, name, ,, null, ,, Token, ., ERROR, ,]
[}, TweakFunction, (, String, name, ,, TweakFunction, registerFunction, ), {, this, (, name, ,, null, ,, Token, ., ERROR, ,]
[name, ,, TweakFunction, registerFunction, ), {, this, (, name, ,, null, ,, Token, ., ERROR, ,, Token, ., ERROR, ,]
[;, }, TweakFunction, (, String, name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ,, int, validNodeTypeB, ,, TweakFunction, registerFunction, ), {]
[;, }, TweakFunction, (, String, name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ,, int, validNodeTypeB, ,, TweakFunction, registerFunction, ), {]
[String, name, ,, String, expectedTypeName, ,, int, validNodeTypeA, ,, int, validNodeTypeB, ,, TweakFunction, registerFunction, ), {, this, ., name, =]
[,, String, expectedTypeName, ,, int, validNodeTypeA, ,, int, validNodeTypeB, ,, TweakFunction, registerFunction, ), {, this, ., name, =, name, ;]
[,, String, expectedTypeName, ,, int, validNodeTypeA, ,, int, validNodeTypeB, ,, TweakFunction, registerFunction, ), {, this, ., name, =, name, ;]
[int, validNodeTypeA, ,, int, validNodeTypeB, ,, TweakFunction, registerFunction, ), {, this, ., name, =, name, ;, this, ., expectedTypeName, =]
[,, int, validNodeTypeB, ,, TweakFunction, registerFunction, ), {, this, ., name, =, name, ;, this, ., expectedTypeName, =, expectedTypeName, ;]
[,, int, validNodeTypeB, ,, TweakFunction, registerFunction, ), {, this, ., name, =, name, ;, this, ., expectedTypeName, =, expectedTypeName, ;]
[TweakFunction, registerFunction, ), {, this, ., name, =, name, ;, this, ., expectedTypeName, =, expectedTypeName, ;, this, ., validNodeTypeA, =]
[), {, this, ., name, =, name, ;, this, ., expectedTypeName, =, expectedTypeName, ;, this, ., validNodeTypeA, =, validNodeTypeA, ;]
[), {, this, ., name, =, name, ;, this, ., expectedTypeName, =, expectedTypeName, ;, this, ., validNodeTypeA, =, validNodeTypeA, ;]
[name, =, name, ;, this, ., expectedTypeName, =, expectedTypeName, ;, this, ., validNodeTypeA, =, validNodeTypeA, ;, this, ., validNodeTypeB, =]
[name, ;, this, ., expectedTypeName, =, expectedTypeName, ;, this, ., validNodeTypeA, =, validNodeTypeA, ;, this, ., validNodeTypeB, =, validNodeTypeB, ;]
[name, ;, this, ., expectedTypeName, =, expectedTypeName, ;, this, ., validNodeTypeA, =, validNodeTypeA, ;, this, ., validNodeTypeB, =, validNodeTypeB, ;]
[expectedTypeName, =, expectedTypeName, ;, this, ., validNodeTypeA, =, validNodeTypeA, ;, this, ., validNodeTypeB, =, validNodeTypeB, ;, this, ., registerFunction, =]
[., validNodeTypeB, =, validNodeTypeB, ;, this, ., registerFunction, =, registerFunction, ;, }, boolean, isValidNodeType, (, int, type, ), {, return]
[., validNodeTypeB, =, validNodeTypeB, ;, this, ., registerFunction, =, registerFunction, ;, }, boolean, isValidNodeType, (, int, type, ), {, return]
[., validNodeTypeB, =, validNodeTypeB, ;, this, ., registerFunction, =, registerFunction, ;, }, boolean, isValidNodeType, (, int, type, ), {, return]
[=, validNodeTypeB, ;, this, ., registerFunction, =, registerFunction, ;, }, boolean, isValidNodeType, (, int, type, ), {, return, type, ==]
[;, this, ., registerFunction, =, registerFunction, ;, }, boolean, isValidNodeType, (, int, type, ), {, return, type, ==, validNodeTypeA, ||]
[;, this, ., registerFunction, =, registerFunction, ;, }, boolean, isValidNodeType, (, int, type, ), {, return, type, ==, validNodeTypeA, ||]
[., registerFunction, =, registerFunction, ;, }, boolean, isValidNodeType, (, int, type, ), {, return, type, ==, validNodeTypeA, ||, type, ==]
[type, ), {, return, type, ==, validNodeTypeA, ||, type, ==, validNodeTypeB, ;, }, boolean, isCorrectRegisterFunction, (, TweakFunction, registerFunction, ), {]
[type, ), {, return, type, ==, validNodeTypeA, ||, type, ==, validNodeTypeB, ;, }, boolean, isCorrectRegisterFunction, (, TweakFunction, registerFunction, ), {]
[type, ==, validNodeTypeA, ||, type, ==, validNodeTypeB, ;, }, boolean, isCorrectRegisterFunction, (, TweakFunction, registerFunction, ), {, Preconditions, ., checkNotNull, (]
[type, ==, validNodeTypeB, ;, }, boolean, isCorrectRegisterFunction, (, TweakFunction, registerFunction, ), {, Preconditions, ., checkNotNull, (, registerFunction, ), ;, return]
[type, ==, validNodeTypeB, ;, }, boolean, isCorrectRegisterFunction, (, TweakFunction, registerFunction, ), {, Preconditions, ., checkNotNull, (, registerFunction, ), ;, return]
[type, ==, validNodeTypeB, ;, }, boolean, isCorrectRegisterFunction, (, TweakFunction, registerFunction, ), {, Preconditions, ., checkNotNull, (, registerFunction, ), ;, return]
[}, boolean, isCorrectRegisterFunction, (, TweakFunction, registerFunction, ), {, Preconditions, ., checkNotNull, (, registerFunction, ), ;, return, this, ., registerFunction, ==]
[., checkNotNull, (, registerFunction, ), ;, return, this, ., registerFunction, ==, registerFunction, ;, }, boolean, isGetterFunction, (, ), {, return]
[., checkNotNull, (, registerFunction, ), ;, return, this, ., registerFunction, ==, registerFunction, ;, }, boolean, isGetterFunction, (, ), {, return]
[(, registerFunction, ), ;, return, this, ., registerFunction, ==, registerFunction, ;, }, boolean, isGetterFunction, (, ), {, return, registerFunction, !=]
[registerFunction, ;, }, boolean, isGetterFunction, (, ), {, return, registerFunction, !=, null, ;, }, String, getName, (, ), {, return]
[registerFunction, !=, null, ;, }, String, getName, (, ), {, return, name, ;, }, String, getExpectedTypeName, (, ), {, return]
[return, name, ;, }, String, getExpectedTypeName, (, ), {, return, expectedTypeName, ;, }, Node, createDefaultValueNode, (, ), {, switch, (]
[String, getExpectedTypeName, (, ), {, return, expectedTypeName, ;, }, Node, createDefaultValueNode, (, ), {, switch, (, this, ), {, case]
[), {, return, expectedTypeName, ;, }, Node, createDefaultValueNode, (, ), {, switch, (, this, ), {, case, REGISTER_BOOLEAN, :, return]
[), {, return, expectedTypeName, ;, }, Node, createDefaultValueNode, (, ), {, switch, (, this, ), {, case, REGISTER_BOOLEAN, :, return]
[createDefaultValueNode, (, ), {, switch, (, this, ), {, case, REGISTER_BOOLEAN, :, return, IR, ., falseNode, (, ), ;, case]
[{, switch, (, this, ), {, case, REGISTER_BOOLEAN, :, return, IR, ., falseNode, (, ), ;, case, REGISTER_NUMBER, :, return]
[{, switch, (, this, ), {, case, REGISTER_BOOLEAN, :, return, IR, ., falseNode, (, ), ;, case, REGISTER_NUMBER, :, return]
[), {, case, REGISTER_BOOLEAN, :, return, IR, ., falseNode, (, ), ;, case, REGISTER_NUMBER, :, return, IR, ., number, (]
[:, return, IR, ., falseNode, (, ), ;, case, REGISTER_NUMBER, :, return, IR, ., number, (, 0, ), ;, case]
[., falseNode, (, ), ;, case, REGISTER_NUMBER, :, return, IR, ., number, (, 0, ), ;, case, REGISTER_STRING, :, return]
[., falseNode, (, ), ;, case, REGISTER_NUMBER, :, return, IR, ., number, (, 0, ), ;, case, REGISTER_STRING, :, return]
[;, case, REGISTER_NUMBER, :, return, IR, ., number, (, 0, ), ;, case, REGISTER_STRING, :, return, IR, ., string, (]
[., number, (, 0, ), ;, case, REGISTER_STRING, :, return, IR, ., string, (, "", ), ;, default, :, throw]
[INVALID_TWEAK_ID_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_TWEAK_ID_ERROR", ,, "tweak ID contains illegal characters. Only letters, numbers, _ ", +, "and . are allowed", ), ;, private, static, enum, TweakFunction, {, REGISTER_BOOLEAN, (]
[DiagnosticType, ., error, (, "JSC_INVALID_TWEAK_ID_ERROR", ,, "tweak ID contains illegal characters. Only letters, numbers, _ ", +, "and . are allowed", ), ;, private, static, enum, TweakFunction, {, REGISTER_BOOLEAN, (, "goog.tweak.registerBoolean", ,]
[error, (, "JSC_INVALID_TWEAK_ID_ERROR", ,, "tweak ID contains illegal characters. Only letters, numbers, _ ", +, "and . are allowed", ), ;, private, static, enum, TweakFunction, {, REGISTER_BOOLEAN, (, "goog.tweak.registerBoolean", ,, "boolean", ,]
[error, (, "JSC_INVALID_TWEAK_ID_ERROR", ,, "tweak ID contains illegal characters. Only letters, numbers, _ ", +, "and . are allowed", ), ;, private, static, enum, TweakFunction, {, REGISTER_BOOLEAN, (, "goog.tweak.registerBoolean", ,, "boolean", ,]
["tweak ID contains illegal characters. Only letters, numbers, _ ", +, "and . are allowed", ), ;, private, static, enum, TweakFunction, {, REGISTER_BOOLEAN, (, "goog.tweak.registerBoolean", ,, "boolean", ,, Token, ., TRUE, ,]
["tweak ID contains illegal characters. Only letters, numbers, _ ", +, "and . are allowed", ), ;, private, static, enum, TweakFunction, {, REGISTER_BOOLEAN, (, "goog.tweak.registerBoolean", ,, "boolean", ,, Token, ., TRUE, ,]
[enum, TweakFunction, {, REGISTER_BOOLEAN, (, "goog.tweak.registerBoolean", ,, "boolean", ,, Token, ., TRUE, ,, Token, ., FALSE, ), ,, REGISTER_NUMBER, (]
[{, REGISTER_BOOLEAN, (, "goog.tweak.registerBoolean", ,, "boolean", ,, Token, ., TRUE, ,, Token, ., FALSE, ), ,, REGISTER_NUMBER, (, "goog.tweak.registerNumber", ,]
[(, "goog.tweak.registerBoolean", ,, "boolean", ,, Token, ., TRUE, ,, Token, ., FALSE, ), ,, REGISTER_NUMBER, (, "goog.tweak.registerNumber", ,, "number", ,]
[(, "goog.tweak.registerBoolean", ,, "boolean", ,, Token, ., TRUE, ,, Token, ., FALSE, ), ,, REGISTER_NUMBER, (, "goog.tweak.registerNumber", ,, "number", ,]
[TRUE, ,, Token, ., FALSE, ), ,, REGISTER_NUMBER, (, "goog.tweak.registerNumber", ,, "number", ,, Token, ., NUMBER, ), ,, REGISTER_STRING, (]
[Token, ., FALSE, ), ,, REGISTER_NUMBER, (, "goog.tweak.registerNumber", ,, "number", ,, Token, ., NUMBER, ), ,, REGISTER_STRING, (, "goog.tweak.registerString", ,]
[FALSE, ), ,, REGISTER_NUMBER, (, "goog.tweak.registerNumber", ,, "number", ,, Token, ., NUMBER, ), ,, REGISTER_STRING, (, "goog.tweak.registerString", ,, "string", ,]
[FALSE, ), ,, REGISTER_NUMBER, (, "goog.tweak.registerNumber", ,, "number", ,, Token, ., NUMBER, ), ,, REGISTER_STRING, (, "goog.tweak.registerString", ,, "string", ,]
["number", ,, Token, ., NUMBER, ), ,, REGISTER_STRING, (, "goog.tweak.registerString", ,, "string", ,, Token, ., STRING, ), ,, OVERRIDE_DEFAULT_VALUE, (]
[), ,, REGISTER_STRING, (, "goog.tweak.registerString", ,, "string", ,, Token, ., STRING, ), ,, OVERRIDE_DEFAULT_VALUE, (, "goog.tweak.overrideDefaultValue", ), ,, GET_COMPILER_OVERRIDES, (]
[,, "string", ,, Token, ., STRING, ), ,, OVERRIDE_DEFAULT_VALUE, (, "goog.tweak.overrideDefaultValue", ), ,, GET_COMPILER_OVERRIDES, (, "goog.tweak.getCompilerOverrides_", ), ,, GET_BOOLEAN, (]
[,, Token, ., STRING, ), ,, OVERRIDE_DEFAULT_VALUE, (, "goog.tweak.overrideDefaultValue", ), ,, GET_COMPILER_OVERRIDES, (, "goog.tweak.getCompilerOverrides_", ), ,, GET_BOOLEAN, (, "goog.tweak.getBoolean", ,]
[,, OVERRIDE_DEFAULT_VALUE, (, "goog.tweak.overrideDefaultValue", ), ,, GET_COMPILER_OVERRIDES, (, "goog.tweak.getCompilerOverrides_", ), ,, GET_BOOLEAN, (, "goog.tweak.getBoolean", ,, REGISTER_BOOLEAN, ), ,, GET_NUMBER, (]
[(, "goog.tweak.overrideDefaultValue", ), ,, GET_COMPILER_OVERRIDES, (, "goog.tweak.getCompilerOverrides_", ), ,, GET_BOOLEAN, (, "goog.tweak.getBoolean", ,, REGISTER_BOOLEAN, ), ,, GET_NUMBER, (, "goog.tweak.getNumber", ,]
[(, "goog.tweak.getCompilerOverrides_", ), ,, GET_BOOLEAN, (, "goog.tweak.getBoolean", ,, REGISTER_BOOLEAN, ), ,, GET_NUMBER, (, "goog.tweak.getNumber", ,, REGISTER_NUMBER, ), ,, GET_STRING, (]
[), ,, GET_BOOLEAN, (, "goog.tweak.getBoolean", ,, REGISTER_BOOLEAN, ), ,, GET_NUMBER, (, "goog.tweak.getNumber", ,, REGISTER_NUMBER, ), ,, GET_STRING, (, "goog.tweak.getString", ,]
[IllegalStateException, (, ), ;, }, }, }, private, static, final, Map, <, String, ,, TweakFunction, >, TWEAK_FUNCTIONS_MAP, ;, static, {]
[), ;, }, }, }, private, static, final, Map, <, String, ,, TweakFunction, >, TWEAK_FUNCTIONS_MAP, ;, static, {, TWEAK_FUNCTIONS_MAP, =]
[), ;, }, }, }, private, static, final, Map, <, String, ,, TweakFunction, >, TWEAK_FUNCTIONS_MAP, ;, static, {, TWEAK_FUNCTIONS_MAP, =]
[,, TweakFunction, >, TWEAK_FUNCTIONS_MAP, ;, static, {, TWEAK_FUNCTIONS_MAP, =, Maps, ., newHashMap, (, ), ;, for, (, TweakFunction, func, :]
[,, TweakFunction, >, TWEAK_FUNCTIONS_MAP, ;, static, {, TWEAK_FUNCTIONS_MAP, =, Maps, ., newHashMap, (, ), ;, for, (, TweakFunction, func, :]
[TWEAK_FUNCTIONS_MAP, =, Maps, ., newHashMap, (, ), ;, for, (, TweakFunction, func, :, TweakFunction, ., values, (, ), ), {]
[TWEAK_FUNCTIONS_MAP, =, Maps, ., newHashMap, (, ), ;, for, (, TweakFunction, func, :, TweakFunction, ., values, (, ), ), {]
[newHashMap, (, ), ;, for, (, TweakFunction, func, :, TweakFunction, ., values, (, ), ), {, TWEAK_FUNCTIONS_MAP, ., put, (]
[newHashMap, (, ), ;, for, (, TweakFunction, func, :, TweakFunction, ., values, (, ), ), {, TWEAK_FUNCTIONS_MAP, ., put, (]
[TweakFunction, func, :, TweakFunction, ., values, (, ), ), {, TWEAK_FUNCTIONS_MAP, ., put, (, func, ., getName, (, ), ,]
[;, }, }, ProcessTweaks, (, AbstractCompiler, compiler, ,, boolean, stripTweaks, ,, Map, <, String, ,, Node, >, compilerDefaultValueOverrides, ), {]
[;, }, }, ProcessTweaks, (, AbstractCompiler, compiler, ,, boolean, stripTweaks, ,, Map, <, String, ,, Node, >, compilerDefaultValueOverrides, ), {]
[(, AbstractCompiler, compiler, ,, boolean, stripTweaks, ,, Map, <, String, ,, Node, >, compilerDefaultValueOverrides, ), {, this, ., compiler, =]
[compiler, ,, boolean, stripTweaks, ,, Map, <, String, ,, Node, >, compilerDefaultValueOverrides, ), {, this, ., compiler, =, compiler, ;]
[compiler, ,, boolean, stripTweaks, ,, Map, <, String, ,, Node, >, compilerDefaultValueOverrides, ), {, this, ., compiler, =, compiler, ;]
[,, Map, <, String, ,, Node, >, compilerDefaultValueOverrides, ), {, this, ., compiler, =, compiler, ;, this, ., stripTweaks, =]
[<, String, ,, Node, >, compilerDefaultValueOverrides, ), {, this, ., compiler, =, compiler, ;, this, ., stripTweaks, =, stripTweaks, ;]
[<, String, ,, Node, >, compilerDefaultValueOverrides, ), {, this, ., compiler, =, compiler, ;, this, ., stripTweaks, =, stripTweaks, ;]
[>, compilerDefaultValueOverrides, ), {, this, ., compiler, =, compiler, ;, this, ., stripTweaks, =, stripTweaks, ;, this, ., compilerDefaultValueOverrides, =]
[>, compilerDefaultValueOverrides, ), {, this, ., compiler, =, compiler, ;, this, ., stripTweaks, =, stripTweaks, ;, this, ., compilerDefaultValueOverrides, =]
[compiler, =, compiler, ;, this, ., stripTweaks, =, stripTweaks, ;, this, ., compilerDefaultValueOverrides, =, Maps, ., newTreeMap, (, ), ;]
[compiler, =, compiler, ;, this, ., stripTweaks, =, stripTweaks, ;, this, ., compilerDefaultValueOverrides, =, Maps, ., newTreeMap, (, ), ;]
[compiler, =, compiler, ;, this, ., stripTweaks, =, stripTweaks, ;, this, ., compilerDefaultValueOverrides, =, Maps, ., newTreeMap, (, ), ;]
[stripTweaks, =, stripTweaks, ;, this, ., compilerDefaultValueOverrides, =, Maps, ., newTreeMap, (, ), ;, this, ., compilerDefaultValueOverrides, ., putAll, (]
[compilerDefaultValueOverrides, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, CollectTweaksResult, result, =]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, CollectTweaksResult, result, =, collectTweaks, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, CollectTweaksResult, result, =, collectTweaks, (, root, ), ;]
[void, process, (, Node, externs, ,, Node, root, ), {, CollectTweaksResult, result, =, collectTweaks, (, root, ), ;, applyCompilerDefaultValueOverrides, (]
[void, process, (, Node, externs, ,, Node, root, ), {, CollectTweaksResult, result, =, collectTweaks, (, root, ), ;, applyCompilerDefaultValueOverrides, (]
[), {, CollectTweaksResult, result, =, collectTweaks, (, root, ), ;, applyCompilerDefaultValueOverrides, (, result, ., tweakInfos, ), ;, boolean, changed, =]
[=, collectTweaks, (, root, ), ;, applyCompilerDefaultValueOverrides, (, result, ., tweakInfos, ), ;, boolean, changed, =, false, ;, if, (]
[root, ), ;, applyCompilerDefaultValueOverrides, (, result, ., tweakInfos, ), ;, boolean, changed, =, false, ;, if, (, stripTweaks, ), {]
[;, applyCompilerDefaultValueOverrides, (, result, ., tweakInfos, ), ;, boolean, changed, =, false, ;, if, (, stripTweaks, ), {, changed, =]
[(, result, ., tweakInfos, ), ;, boolean, changed, =, false, ;, if, (, stripTweaks, ), {, changed, =, stripAllCalls, (]
[(, result, ., tweakInfos, ), ;, boolean, changed, =, false, ;, if, (, stripTweaks, ), {, changed, =, stripAllCalls, (]
[false, ;, if, (, stripTweaks, ), {, changed, =, stripAllCalls, (, result, ., tweakInfos, ), ;, }, else, if, (]
[;, if, (, stripTweaks, ), {, changed, =, stripAllCalls, (, result, ., tweakInfos, ), ;, }, else, if, (, !]
[;, if, (, stripTweaks, ), {, changed, =, stripAllCalls, (, result, ., tweakInfos, ), ;, }, else, if, (, !]
[=, stripAllCalls, (, result, ., tweakInfos, ), ;, }, else, if, (, !, compilerDefaultValueOverrides, ., isEmpty, (, ), ), {]
[(, result, ., tweakInfos, ), ;, }, else, if, (, !, compilerDefaultValueOverrides, ., isEmpty, (, ), ), {, changed, =]
[., tweakInfos, ), ;, }, else, if, (, !, compilerDefaultValueOverrides, ., isEmpty, (, ), ), {, changed, =, replaceGetCompilerOverridesCalls, (]
[., tweakInfos, ), ;, }, else, if, (, !, compilerDefaultValueOverrides, ., isEmpty, (, ), ), {, changed, =, replaceGetCompilerOverridesCalls, (]
[!, compilerDefaultValueOverrides, ., isEmpty, (, ), ), {, changed, =, replaceGetCompilerOverridesCalls, (, result, ., getOverridesCalls, ), ;, }, if, (]
[isEmpty, (, ), ), {, changed, =, replaceGetCompilerOverridesCalls, (, result, ., getOverridesCalls, ), ;, }, if, (, changed, ), {]
[isEmpty, (, ), ), {, changed, =, replaceGetCompilerOverridesCalls, (, result, ., getOverridesCalls, ), ;, }, if, (, changed, ), {]
[), ;, }, }, private, boolean, replaceGetCompilerOverridesCalls, (, List, <, TweakFunctionCall, >, calls, ), {, for, (, TweakFunctionCall, call, :]
[replaceGetCompilerOverridesCalls, (, List, <, TweakFunctionCall, >, calls, ), {, for, (, TweakFunctionCall, call, :, calls, ), {, Node, callNode, =]
[replaceGetCompilerOverridesCalls, (, List, <, TweakFunctionCall, >, calls, ), {, for, (, TweakFunctionCall, call, :, calls, ), {, Node, callNode, =]
[), {, for, (, TweakFunctionCall, call, :, calls, ), {, Node, callNode, =, call, ., callNode, ;, Node, objNode, =]
[for, (, TweakFunctionCall, call, :, calls, ), {, Node, callNode, =, call, ., callNode, ;, Node, objNode, =, createCompilerDefaultValueOverridesVarNode, (]
[call, :, calls, ), {, Node, callNode, =, call, ., callNode, ;, Node, objNode, =, createCompilerDefaultValueOverridesVarNode, (, callNode, ), ;]
[call, :, calls, ), {, Node, callNode, =, call, ., callNode, ;, Node, objNode, =, createCompilerDefaultValueOverridesVarNode, (, callNode, ), ;]
[call, :, calls, ), {, Node, callNode, =, call, ., callNode, ;, Node, objNode, =, createCompilerDefaultValueOverridesVarNode, (, callNode, ), ;]
[call, ., callNode, ;, Node, objNode, =, createCompilerDefaultValueOverridesVarNode, (, callNode, ), ;, callNode, ., getParent, (, ), ., replaceChild, (]
[callNode, ;, Node, objNode, =, createCompilerDefaultValueOverridesVarNode, (, callNode, ), ;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,]
[createCompilerDefaultValueOverridesVarNode, (, callNode, ), ;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,, objNode, ), ;, }, return]
[(, callNode, ), ;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,, objNode, ), ;, }, return, !]
[(, callNode, ), ;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,, objNode, ), ;, }, return, !]
[;, }, private, boolean, stripAllCalls, (, Map, <, String, ,, TweakInfo, >, tweakInfos, ), {, for, (, TweakInfo, tweakInfo, :]
[;, }, private, boolean, stripAllCalls, (, Map, <, String, ,, TweakInfo, >, tweakInfos, ), {, for, (, TweakInfo, tweakInfo, :]
[TweakInfo, >, tweakInfos, ), {, for, (, TweakInfo, tweakInfo, :, tweakInfos, ., values, (, ), ), {, boolean, isRegistered, =]
[TweakInfo, >, tweakInfos, ), {, for, (, TweakInfo, tweakInfo, :, tweakInfos, ., values, (, ), ), {, boolean, isRegistered, =]
[., values, (, ), ), {, boolean, isRegistered, =, tweakInfo, ., isRegistered, (, ), ;, for, (, TweakFunctionCall, functionCall, :]
[., values, (, ), ), {, boolean, isRegistered, =, tweakInfo, ., isRegistered, (, ), ;, for, (, TweakFunctionCall, functionCall, :]
[=, tweakInfo, ., isRegistered, (, ), ;, for, (, TweakFunctionCall, functionCall, :, tweakInfo, ., functionCalls, ), {, Node, callNode, =]
[=, tweakInfo, ., isRegistered, (, ), ;, for, (, TweakFunctionCall, functionCall, :, tweakInfo, ., functionCalls, ), {, Node, callNode, =]
[for, (, TweakFunctionCall, functionCall, :, tweakInfo, ., functionCalls, ), {, Node, callNode, =, functionCall, ., callNode, ;, Node, parent, =]
[for, (, TweakFunctionCall, functionCall, :, tweakInfo, ., functionCalls, ), {, Node, callNode, =, functionCall, ., callNode, ;, Node, parent, =]
[), {, Node, callNode, =, functionCall, ., callNode, ;, Node, parent, =, callNode, ., getParent, (, ), ;, if, (]
[), {, Node, callNode, =, functionCall, ., callNode, ;, Node, parent, =, callNode, ., getParent, (, ), ;, if, (]
[), {, Node, callNode, =, functionCall, ., callNode, ;, Node, parent, =, callNode, ., getParent, (, ), ;, if, (]
[getParent, (, ), ;, if, (, functionCall, ., tweakFunc, ., isGetterFunction, (, ), ), {, Node, newValue, ;, if, (]
[;, if, (, functionCall, ., tweakFunc, ., isGetterFunction, (, ), ), {, Node, newValue, ;, if, (, isRegistered, ), {]
[(, functionCall, ., tweakFunc, ., isGetterFunction, (, ), ), {, Node, newValue, ;, if, (, isRegistered, ), {, newValue, =]
[(, functionCall, ., tweakFunc, ., isGetterFunction, (, ), ), {, Node, newValue, ;, if, (, isRegistered, ), {, newValue, =]
[(, functionCall, ., tweakFunc, ., isGetterFunction, (, ), ), {, Node, newValue, ;, if, (, isRegistered, ), {, newValue, =]
[), {, newValue, =, tweakInfo, ., getDefaultValueNode, (, ), ., cloneNode, (, ), ;, }, else, {, TweakFunction, registerFunction, =]
[), {, newValue, =, tweakInfo, ., getDefaultValueNode, (, ), ., cloneNode, (, ), ;, }, else, {, TweakFunction, registerFunction, =]
[), {, newValue, =, tweakInfo, ., getDefaultValueNode, (, ), ., cloneNode, (, ), ;, }, else, {, TweakFunction, registerFunction, =]
[getDefaultValueNode, (, ), ., cloneNode, (, ), ;, }, else, {, TweakFunction, registerFunction, =, functionCall, ., tweakFunc, ., registerFunction, ;]
[), ., cloneNode, (, ), ;, }, else, {, TweakFunction, registerFunction, =, functionCall, ., tweakFunc, ., registerFunction, ;, newValue, =]
[), ., cloneNode, (, ), ;, }, else, {, TweakFunction, registerFunction, =, functionCall, ., tweakFunc, ., registerFunction, ;, newValue, =]
[else, {, TweakFunction, registerFunction, =, functionCall, ., tweakFunc, ., registerFunction, ;, newValue, =, registerFunction, ., createDefaultValueNode, (, ), ;, }]
[else, {, TweakFunction, registerFunction, =, functionCall, ., tweakFunc, ., registerFunction, ;, newValue, =, registerFunction, ., createDefaultValueNode, (, ), ;, }]
[=, functionCall, ., tweakFunc, ., registerFunction, ;, newValue, =, registerFunction, ., createDefaultValueNode, (, ), ;, }, parent, ., replaceChild, (]
[., tweakFunc, ., registerFunction, ;, newValue, =, registerFunction, ., createDefaultValueNode, (, ), ;, }, parent, ., replaceChild, (, callNode, ,]
[createDefaultValueNode, (, ), ;, }, parent, ., replaceChild, (, callNode, ,, newValue, ), ;, }, else, {, Node, voidZeroNode, =]
[createDefaultValueNode, (, ), ;, }, parent, ., replaceChild, (, callNode, ,, newValue, ), ;, }, else, {, Node, voidZeroNode, =]
[createDefaultValueNode, (, ), ;, }, parent, ., replaceChild, (, callNode, ,, newValue, ), ;, }, else, {, Node, voidZeroNode, =]
[}, parent, ., replaceChild, (, callNode, ,, newValue, ), ;, }, else, {, Node, voidZeroNode, =, IR, ., voidNode, (]
[}, parent, ., replaceChild, (, callNode, ,, newValue, ), ;, }, else, {, Node, voidZeroNode, =, IR, ., voidNode, (]
[}, parent, ., replaceChild, (, callNode, ,, newValue, ), ;, }, else, {, Node, voidZeroNode, =, IR, ., voidNode, (]
[(, callNode, ,, newValue, ), ;, }, else, {, Node, voidZeroNode, =, IR, ., voidNode, (, IR, ., number, (]
[;, }, else, {, Node, voidZeroNode, =, IR, ., voidNode, (, IR, ., number, (, 0, ), ., srcref, (]
[=, IR, ., voidNode, (, IR, ., number, (, 0, ), ., srcref, (, callNode, ), ), ., srcref, (]
[voidNode, (, IR, ., number, (, 0, ), ., srcref, (, callNode, ), ), ., srcref, (, callNode, ), ;]
[voidNode, (, IR, ., number, (, 0, ), ., srcref, (, callNode, ), ), ., srcref, (, callNode, ), ;]
[number, (, 0, ), ., srcref, (, callNode, ), ), ., srcref, (, callNode, ), ;, parent, ., replaceChild, (]
[0, ), ., srcref, (, callNode, ), ), ., srcref, (, callNode, ), ;, parent, ., replaceChild, (, callNode, ,]
[), ., srcref, (, callNode, ), ;, parent, ., replaceChild, (, callNode, ,, voidZeroNode, ), ;, }, }, }, return]
[., srcref, (, callNode, ), ;, parent, ., replaceChild, (, callNode, ,, voidZeroNode, ), ;, }, }, }, return, !]
[., srcref, (, callNode, ), ;, parent, ., replaceChild, (, callNode, ,, voidZeroNode, ), ;, }, }, }, return, !]
[return, !, tweakInfos, ., isEmpty, (, ), ;, }, private, Node, createCompilerDefaultValueOverridesVarNode, (, Node, sourceInformationNode, ), {, Node, objNode, =]
[return, !, tweakInfos, ., isEmpty, (, ), ;, }, private, Node, createCompilerDefaultValueOverridesVarNode, (, Node, sourceInformationNode, ), {, Node, objNode, =]
[return, !, tweakInfos, ., isEmpty, (, ), ;, }, private, Node, createCompilerDefaultValueOverridesVarNode, (, Node, sourceInformationNode, ), {, Node, objNode, =]
[}, private, Node, createCompilerDefaultValueOverridesVarNode, (, Node, sourceInformationNode, ), {, Node, objNode, =, IR, ., objectlit, (, ), ., srcref, (]
[., objectlit, (, ), ., srcref, (, sourceInformationNode, ), ;, for, (, Entry, <, String, ,, Node, >, entry, :]
[., objectlit, (, ), ., srcref, (, sourceInformationNode, ), ;, for, (, Entry, <, String, ,, Node, >, entry, :]
[for, (, Entry, <, String, ,, Node, >, entry, :, compilerDefaultValueOverrides, ., entrySet, (, ), ), {, Node, objKeyNode, =]
[for, (, Entry, <, String, ,, Node, >, entry, :, compilerDefaultValueOverrides, ., entrySet, (, ), ), {, Node, objKeyNode, =]
[for, (, Entry, <, String, ,, Node, >, entry, :, compilerDefaultValueOverrides, ., entrySet, (, ), ), {, Node, objKeyNode, =]
[String, ,, Node, >, entry, :, compilerDefaultValueOverrides, ., entrySet, (, ), ), {, Node, objKeyNode, =, IR, ., stringKey, (]
[String, ,, Node, >, entry, :, compilerDefaultValueOverrides, ., entrySet, (, ), ), {, Node, objKeyNode, =, IR, ., stringKey, (]
[(, ), ), {, Node, objKeyNode, =, IR, ., stringKey, (, entry, ., getKey, (, ), ), ., copyInformationFrom, (]
[=, IR, ., stringKey, (, entry, ., getKey, (, ), ), ., copyInformationFrom, (, sourceInformationNode, ), ;, Node, objValueNode, =]
[=, IR, ., stringKey, (, entry, ., getKey, (, ), ), ., copyInformationFrom, (, sourceInformationNode, ), ;, Node, objValueNode, =]
[=, IR, ., stringKey, (, entry, ., getKey, (, ), ), ., copyInformationFrom, (, sourceInformationNode, ), ;, Node, objValueNode, =]
[=, IR, ., stringKey, (, entry, ., getKey, (, ), ), ., copyInformationFrom, (, sourceInformationNode, ), ;, Node, objValueNode, =]
[copyInformationFrom, (, sourceInformationNode, ), ;, Node, objValueNode, =, entry, ., getValue, (, ), ., cloneNode, (, ), ., copyInformationFrom, (]
[), ;, Node, objValueNode, =, entry, ., getValue, (, ), ., cloneNode, (, ), ., copyInformationFrom, (, sourceInformationNode, ), ;]
[), ;, Node, objValueNode, =, entry, ., getValue, (, ), ., cloneNode, (, ), ., copyInformationFrom, (, sourceInformationNode, ), ;]
[=, entry, ., getValue, (, ), ., cloneNode, (, ), ., copyInformationFrom, (, sourceInformationNode, ), ;, objKeyNode, ., addChildToBack, (]
[getValue, (, ), ., cloneNode, (, ), ., copyInformationFrom, (, sourceInformationNode, ), ;, objKeyNode, ., addChildToBack, (, objValueNode, ), ;]
[getValue, (, ), ., cloneNode, (, ), ., copyInformationFrom, (, sourceInformationNode, ), ;, objKeyNode, ., addChildToBack, (, objValueNode, ), ;]
[cloneNode, (, ), ., copyInformationFrom, (, sourceInformationNode, ), ;, objKeyNode, ., addChildToBack, (, objValueNode, ), ;, objNode, ., addChildToBack, (]
[(, sourceInformationNode, ), ;, objKeyNode, ., addChildToBack, (, objValueNode, ), ;, objNode, ., addChildToBack, (, objKeyNode, ), ;, }, return]
[(, Map, <, String, ,, TweakInfo, >, tweakInfos, ), {, for, (, Entry, <, String, ,, Node, >, entry, :]
[(, Map, <, String, ,, TweakInfo, >, tweakInfos, ), {, for, (, Entry, <, String, ,, Node, >, entry, :]
[for, (, Entry, <, String, ,, Node, >, entry, :, compilerDefaultValueOverrides, ., entrySet, (, ), ), {, String, tweakId, =]
[for, (, Entry, <, String, ,, Node, >, entry, :, compilerDefaultValueOverrides, ., entrySet, (, ), ), {, String, tweakId, =]
[:, compilerDefaultValueOverrides, ., entrySet, (, ), ), {, String, tweakId, =, entry, ., getKey, (, ), ;, TweakInfo, tweakInfo, =]
[:, compilerDefaultValueOverrides, ., entrySet, (, ), ), {, String, tweakId, =, entry, ., getKey, (, ), ;, TweakInfo, tweakInfo, =]
[(, ), ), {, String, tweakId, =, entry, ., getKey, (, ), ;, TweakInfo, tweakInfo, =, tweakInfos, ., get, (]
[tweakId, =, entry, ., getKey, (, ), ;, TweakInfo, tweakInfo, =, tweakInfos, ., get, (, tweakId, ), ;, if, (]
[tweakId, =, entry, ., getKey, (, ), ;, TweakInfo, tweakInfo, =, tweakInfos, ., get, (, tweakId, ), ;, if, (]
[entry, ., getKey, (, ), ;, TweakInfo, tweakInfo, =, tweakInfos, ., get, (, tweakId, ), ;, if, (, tweakInfo, ==]
[(, ), ;, TweakInfo, tweakInfo, =, tweakInfos, ., get, (, tweakId, ), ;, if, (, tweakInfo, ==, null, ), {]
[(, ), ;, TweakInfo, tweakInfo, =, tweakInfos, ., get, (, tweakId, ), ;, if, (, tweakInfo, ==, null, ), {]
[tweakInfo, =, tweakInfos, ., get, (, tweakId, ), ;, if, (, tweakInfo, ==, null, ), {, compiler, ., report, (]
[tweakInfo, =, tweakInfos, ., get, (, tweakId, ), ;, if, (, tweakInfo, ==, null, ), {, compiler, ., report, (]
[get, (, tweakId, ), ;, if, (, tweakInfo, ==, null, ), {, compiler, ., report, (, JSError, ., make, (]
[tweakId, ), ;, if, (, tweakInfo, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, UNKNOWN_TWEAK_WARNING, ,]
[compiler, ., report, (, JSError, ., make, (, UNKNOWN_TWEAK_WARNING, ,, tweakId, ), ), ;, }, else, {, TweakFunction, registerFunc, =]
[compiler, ., report, (, JSError, ., make, (, UNKNOWN_TWEAK_WARNING, ,, tweakId, ), ), ;, }, else, {, TweakFunction, registerFunc, =]
[compiler, ., report, (, JSError, ., make, (, UNKNOWN_TWEAK_WARNING, ,, tweakId, ), ), ;, }, else, {, TweakFunction, registerFunc, =]
[,, tweakId, ), ), ;, }, else, {, TweakFunction, registerFunc, =, tweakInfo, ., registerCall, ., tweakFunc, ;, Node, value, =]
[,, tweakId, ), ), ;, }, else, {, TweakFunction, registerFunc, =, tweakInfo, ., registerCall, ., tweakFunc, ;, Node, value, =]
[TweakFunction, registerFunc, =, tweakInfo, ., registerCall, ., tweakFunc, ;, Node, value, =, entry, ., getValue, (, ), ;, if, (]
[registerFunc, =, tweakInfo, ., registerCall, ., tweakFunc, ;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !]
[registerFunc, =, tweakInfo, ., registerCall, ., tweakFunc, ;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !]
[registerCall, ., tweakFunc, ;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !, registerFunc, ., isValidNodeType, (]
[registerCall, ., tweakFunc, ;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !, registerFunc, ., isValidNodeType, (]
[., getValue, (, ), ;, if, (, !, registerFunc, ., isValidNodeType, (, value, ., getType, (, ), ), ), {]
[., getValue, (, ), ;, if, (, !, registerFunc, ., isValidNodeType, (, value, ., getType, (, ), ), ), {]
[;, if, (, !, registerFunc, ., isValidNodeType, (, value, ., getType, (, ), ), ), {, compiler, ., report, (]
[;, if, (, !, registerFunc, ., isValidNodeType, (, value, ., getType, (, ), ), ), {, compiler, ., report, (]
[registerFunc, ., isValidNodeType, (, value, ., getType, (, ), ), ), {, compiler, ., report, (, JSError, ., make, (]
[isValidNodeType, (, value, ., getType, (, ), ), ), {, compiler, ., report, (, JSError, ., make, (, INVALID_TWEAK_DEFAULT_VALUE_WARNING, ,]
[value, ., getType, (, ), ), ), {, compiler, ., report, (, JSError, ., make, (, INVALID_TWEAK_DEFAULT_VALUE_WARNING, ,, tweakId, ,]
[value, ., getType, (, ), ), ), {, compiler, ., report, (, JSError, ., make, (, INVALID_TWEAK_DEFAULT_VALUE_WARNING, ,, tweakId, ,]
[), {, compiler, ., report, (, JSError, ., make, (, INVALID_TWEAK_DEFAULT_VALUE_WARNING, ,, tweakId, ,, registerFunc, ., getName, (, ), ,]
[), {, compiler, ., report, (, JSError, ., make, (, INVALID_TWEAK_DEFAULT_VALUE_WARNING, ,, tweakId, ,, registerFunc, ., getName, (, ), ,]
[,, tweakId, ,, registerFunc, ., getName, (, ), ,, registerFunc, ., getExpectedTypeName, (, ), ), ), ;, }, else, {]
[,, tweakId, ,, registerFunc, ., getName, (, ), ,, registerFunc, ., getExpectedTypeName, (, ), ), ), ;, }, else, {]
[., getName, (, ), ,, registerFunc, ., getExpectedTypeName, (, ), ), ), ;, }, else, {, tweakInfo, ., defaultValueNode, =]
[., defaultValueNode, =, value, ;, }, }, }, }, private, CollectTweaksResult, collectTweaks, (, Node, root, ), {, CollectTweaks, pass, =]
[}, }, }, }, private, CollectTweaksResult, collectTweaks, (, Node, root, ), {, CollectTweaks, pass, =, new, CollectTweaks, (, ), ;]
[}, }, }, }, private, CollectTweaksResult, collectTweaks, (, Node, root, ), {, CollectTweaks, pass, =, new, CollectTweaks, (, ), ;]
[private, CollectTweaksResult, collectTweaks, (, Node, root, ), {, CollectTweaks, pass, =, new, CollectTweaks, (, ), ;, NodeTraversal, ., traverse, (]
[collectTweaks, (, Node, root, ), {, CollectTweaks, pass, =, new, CollectTweaks, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[Node, root, ), {, CollectTweaks, pass, =, new, CollectTweaks, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, pass, ), ;, Map, <, String, ,, TweakInfo, >, tweakInfos, =]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, pass, ), ;, Map, <, String, ,, TweakInfo, >, tweakInfos, =]
[pass, ), ;, Map, <, String, ,, TweakInfo, >, tweakInfos, =, pass, ., allTweaks, ;, for, (, TweakInfo, tweakInfo, :]
[pass, ), ;, Map, <, String, ,, TweakInfo, >, tweakInfos, =, pass, ., allTweaks, ;, for, (, TweakInfo, tweakInfo, :]
[TweakInfo, >, tweakInfos, =, pass, ., allTweaks, ;, for, (, TweakInfo, tweakInfo, :, tweakInfos, ., values, (, ), ), {]
[TweakInfo, >, tweakInfos, =, pass, ., allTweaks, ;, for, (, TweakInfo, tweakInfo, :, tweakInfos, ., values, (, ), ), {]
[for, (, TweakInfo, tweakInfo, :, tweakInfos, ., values, (, ), ), {, tweakInfo, ., emitAllWarnings, (, ), ;, }, return]
[tweakInfo, :, tweakInfos, ., values, (, ), ), {, tweakInfo, ., emitAllWarnings, (, ), ;, }, return, new, CollectTweaksResult, (]
[tweakInfos, ., values, (, ), ), {, tweakInfo, ., emitAllWarnings, (, ), ;, }, return, new, CollectTweaksResult, (, tweakInfos, ,]
[tweakInfos, ., values, (, ), ), {, tweakInfo, ., emitAllWarnings, (, ), ;, }, return, new, CollectTweaksResult, (, tweakInfos, ,]
[>, getOverridesCalls, ;, CollectTweaksResult, (, Map, <, String, ,, TweakInfo, >, tweakInfos, ,, List, <, TweakFunctionCall, >, getOverridesCalls, ), {]
[>, getOverridesCalls, ;, CollectTweaksResult, (, Map, <, String, ,, TweakInfo, >, tweakInfos, ,, List, <, TweakFunctionCall, >, getOverridesCalls, ), {]
[(, Map, <, String, ,, TweakInfo, >, tweakInfos, ,, List, <, TweakFunctionCall, >, getOverridesCalls, ), {, this, ., tweakInfos, =]
[<, String, ,, TweakInfo, >, tweakInfos, ,, List, <, TweakFunctionCall, >, getOverridesCalls, ), {, this, ., tweakInfos, =, tweakInfos, ;]
[<, String, ,, TweakInfo, >, tweakInfos, ,, List, <, TweakFunctionCall, >, getOverridesCalls, ), {, this, ., tweakInfos, =, tweakInfos, ;]
[>, tweakInfos, ,, List, <, TweakFunctionCall, >, getOverridesCalls, ), {, this, ., tweakInfos, =, tweakInfos, ;, this, ., getOverridesCalls, =]
[getOverridesCalls, ;, }, }, private, final, class, CollectTweaks, extends, AbstractPostOrderCallback, {, final, Map, <, String, ,, TweakInfo, >, allTweaks, =]
[getOverridesCalls, ;, }, }, private, final, class, CollectTweaks, extends, AbstractPostOrderCallback, {, final, Map, <, String, ,, TweakInfo, >, allTweaks, =]
[<, String, ,, TweakInfo, >, allTweaks, =, Maps, ., newHashMap, (, ), ;, final, List, <, TweakFunctionCall, >, getOverridesCalls, =]
[<, String, ,, TweakInfo, >, allTweaks, =, Maps, ., newHashMap, (, ), ;, final, List, <, TweakFunctionCall, >, getOverridesCalls, =]
[=, Maps, ., newHashMap, (, ), ;, final, List, <, TweakFunctionCall, >, getOverridesCalls, =, Lists, ., newArrayList, (, ), ;]
[newHashMap, (, ), ;, final, List, <, TweakFunctionCall, >, getOverridesCalls, =, Lists, ., newArrayList, (, ), ;, @, SuppressWarnings, (]
["incomplete-switch", ), @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[), @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[Node, parent, ), {, if, (, !, n, ., isCall, (, ), ), {, return, ;, }, String, callName, =]
[Node, parent, ), {, if, (, !, n, ., isCall, (, ), ), {, return, ;, }, String, callName, =]
[Node, parent, ), {, if, (, !, n, ., isCall, (, ), ), {, return, ;, }, String, callName, =]
[{, return, ;, }, String, callName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, TweakFunction, tweakFunc, =]
[{, return, ;, }, String, callName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, TweakFunction, tweakFunc, =]
[String, callName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, TweakFunction, tweakFunc, =, TWEAK_FUNCTIONS_MAP, ., get, (]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, TweakFunction, tweakFunc, =, TWEAK_FUNCTIONS_MAP, ., get, (, callName, ), ;, if, (]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, TweakFunction, tweakFunc, =, TWEAK_FUNCTIONS_MAP, ., get, (, callName, ), ;, if, (]
[), ., getQualifiedName, (, ), ;, TweakFunction, tweakFunc, =, TWEAK_FUNCTIONS_MAP, ., get, (, callName, ), ;, if, (, tweakFunc, ==]
[=, TWEAK_FUNCTIONS_MAP, ., get, (, callName, ), ;, if, (, tweakFunc, ==, null, ), {, return, ;, }, if, (]
[=, TWEAK_FUNCTIONS_MAP, ., get, (, callName, ), ;, if, (, tweakFunc, ==, null, ), {, return, ;, }, if, (]
[., get, (, callName, ), ;, if, (, tweakFunc, ==, null, ), {, return, ;, }, if, (, tweakFunc, ==]
[., get, (, callName, ), ;, if, (, tweakFunc, ==, null, ), {, return, ;, }, if, (, tweakFunc, ==]
[;, if, (, tweakFunc, ==, null, ), {, return, ;, }, if, (, tweakFunc, ==, TweakFunction, ., GET_COMPILER_OVERRIDES, ), {]
[;, if, (, tweakFunc, ==, null, ), {, return, ;, }, if, (, tweakFunc, ==, TweakFunction, ., GET_COMPILER_OVERRIDES, ), {]
[==, null, ), {, return, ;, }, if, (, tweakFunc, ==, TweakFunction, ., GET_COMPILER_OVERRIDES, ), {, getOverridesCalls, ., add, (]
[{, return, ;, }, if, (, tweakFunc, ==, TweakFunction, ., GET_COMPILER_OVERRIDES, ), {, getOverridesCalls, ., add, (, new, TweakFunctionCall, (]
[{, return, ;, }, if, (, tweakFunc, ==, TweakFunction, ., GET_COMPILER_OVERRIDES, ), {, getOverridesCalls, ., add, (, new, TweakFunctionCall, (]
[tweakFunc, ==, TweakFunction, ., GET_COMPILER_OVERRIDES, ), {, getOverridesCalls, ., add, (, new, TweakFunctionCall, (, t, ., getSourceName, (, ), ,]
[TweakFunction, ., GET_COMPILER_OVERRIDES, ), {, getOverridesCalls, ., add, (, new, TweakFunctionCall, (, t, ., getSourceName, (, ), ,, tweakFunc, ,]
[TweakFunctionCall, (, t, ., getSourceName, (, ), ,, tweakFunc, ,, n, ), ), ;, return, ;, }, Node, tweakIdNode, =]
[TweakFunctionCall, (, t, ., getSourceName, (, ), ,, tweakFunc, ,, n, ), ), ;, return, ;, }, Node, tweakIdNode, =]
[TweakFunctionCall, (, t, ., getSourceName, (, ), ,, tweakFunc, ,, n, ), ), ;, return, ;, }, Node, tweakIdNode, =]
[), ;, return, ;, }, Node, tweakIdNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[;, return, ;, }, Node, tweakIdNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !]
[;, return, ;, }, Node, tweakIdNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !]
[n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !, tweakIdNode, ., isString, (, ), ), {]
[n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !, tweakIdNode, ., isString, (, ), ), {]
[), ., getNext, (, ), ;, if, (, !, tweakIdNode, ., isString, (, ), ), {, compiler, ., report, (]
[), ., getNext, (, ), ;, if, (, !, tweakIdNode, ., isString, (, ), ), {, compiler, ., report, (]
[), ;, if, (, !, tweakIdNode, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[if, (, !, tweakIdNode, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, tweakIdNode, ,]
[compiler, ., report, (, t, ., makeError, (, tweakIdNode, ,, NON_LITERAL_TWEAK_ID_ERROR, ), ), ;, return, ;, }, String, tweakId, =]
[compiler, ., report, (, t, ., makeError, (, tweakIdNode, ,, NON_LITERAL_TWEAK_ID_ERROR, ), ), ;, return, ;, }, String, tweakId, =]
[,, NON_LITERAL_TWEAK_ID_ERROR, ), ), ;, return, ;, }, String, tweakId, =, tweakIdNode, ., getString, (, ), ;, TweakInfo, tweakInfo, =]
[,, NON_LITERAL_TWEAK_ID_ERROR, ), ), ;, return, ;, }, String, tweakId, =, tweakIdNode, ., getString, (, ), ;, TweakInfo, tweakInfo, =]
[;, return, ;, }, String, tweakId, =, tweakIdNode, ., getString, (, ), ;, TweakInfo, tweakInfo, =, allTweaks, ., get, (]
[tweakId, =, tweakIdNode, ., getString, (, ), ;, TweakInfo, tweakInfo, =, allTweaks, ., get, (, tweakId, ), ;, if, (]
[tweakId, =, tweakIdNode, ., getString, (, ), ;, TweakInfo, tweakInfo, =, allTweaks, ., get, (, tweakId, ), ;, if, (]
[tweakIdNode, ., getString, (, ), ;, TweakInfo, tweakInfo, =, allTweaks, ., get, (, tweakId, ), ;, if, (, tweakInfo, ==]
[(, ), ;, TweakInfo, tweakInfo, =, allTweaks, ., get, (, tweakId, ), ;, if, (, tweakInfo, ==, null, ), {]
[;, TweakInfo, tweakInfo, =, allTweaks, ., get, (, tweakId, ), ;, if, (, tweakInfo, ==, null, ), {, tweakInfo, =]
[=, allTweaks, ., get, (, tweakId, ), ;, if, (, tweakInfo, ==, null, ), {, tweakInfo, =, new, TweakInfo, (]
[get, (, tweakId, ), ;, if, (, tweakInfo, ==, null, ), {, tweakInfo, =, new, TweakInfo, (, tweakId, ), ;]
[get, (, tweakId, ), ;, if, (, tweakInfo, ==, null, ), {, tweakInfo, =, new, TweakInfo, (, tweakId, ), ;]
[;, if, (, tweakInfo, ==, null, ), {, tweakInfo, =, new, TweakInfo, (, tweakId, ), ;, allTweaks, ., put, (]
[(, tweakInfo, ==, null, ), {, tweakInfo, =, new, TweakInfo, (, tweakId, ), ;, allTweaks, ., put, (, tweakId, ,]
[tweakInfo, =, new, TweakInfo, (, tweakId, ), ;, allTweaks, ., put, (, tweakId, ,, tweakInfo, ), ;, }, switch, (]
[(, tweakId, ), ;, allTweaks, ., put, (, tweakId, ,, tweakInfo, ), ;, }, switch, (, tweakFunc, ), {, case]
[;, allTweaks, ., put, (, tweakId, ,, tweakInfo, ), ;, }, switch, (, tweakFunc, ), {, case, REGISTER_BOOLEAN, :, case]
[put, (, tweakId, ,, tweakInfo, ), ;, }, switch, (, tweakFunc, ), {, case, REGISTER_BOOLEAN, :, case, REGISTER_NUMBER, :, case]
[tweakInfo, ), ;, }, switch, (, tweakFunc, ), {, case, REGISTER_BOOLEAN, :, case, REGISTER_NUMBER, :, case, REGISTER_STRING, :, if, (]
[), ;, }, switch, (, tweakFunc, ), {, case, REGISTER_BOOLEAN, :, case, REGISTER_NUMBER, :, case, REGISTER_STRING, :, if, (, !]
[), ;, }, switch, (, tweakFunc, ), {, case, REGISTER_BOOLEAN, :, case, REGISTER_NUMBER, :, case, REGISTER_STRING, :, if, (, !]
[(, tweakFunc, ), {, case, REGISTER_BOOLEAN, :, case, REGISTER_NUMBER, :, case, REGISTER_STRING, :, if, (, !, ID_MATCHER, ., matchesAllOf, (]
[case, REGISTER_BOOLEAN, :, case, REGISTER_NUMBER, :, case, REGISTER_STRING, :, if, (, !, ID_MATCHER, ., matchesAllOf, (, tweakId, ), ), {]
[case, REGISTER_BOOLEAN, :, case, REGISTER_NUMBER, :, case, REGISTER_STRING, :, if, (, !, ID_MATCHER, ., matchesAllOf, (, tweakId, ), ), {]
[REGISTER_NUMBER, :, case, REGISTER_STRING, :, if, (, !, ID_MATCHER, ., matchesAllOf, (, tweakId, ), ), {, compiler, ., report, (]
[REGISTER_NUMBER, :, case, REGISTER_STRING, :, if, (, !, ID_MATCHER, ., matchesAllOf, (, tweakId, ), ), {, compiler, ., report, (]
[:, if, (, !, ID_MATCHER, ., matchesAllOf, (, tweakId, ), ), {, compiler, ., report, (, t, ., makeError, (]
[(, !, ID_MATCHER, ., matchesAllOf, (, tweakId, ), ), {, compiler, ., report, (, t, ., makeError, (, tweakIdNode, ,]
[), ), {, compiler, ., report, (, t, ., makeError, (, tweakIdNode, ,, INVALID_TWEAK_ID_ERROR, ), ), ;, }, if, (]
[), {, compiler, ., report, (, t, ., makeError, (, tweakIdNode, ,, INVALID_TWEAK_ID_ERROR, ), ), ;, }, if, (, !]
[), {, compiler, ., report, (, t, ., makeError, (, tweakIdNode, ,, INVALID_TWEAK_ID_ERROR, ), ), ;, }, if, (, !]
[., makeError, (, tweakIdNode, ,, INVALID_TWEAK_ID_ERROR, ), ), ;, }, if, (, !, t, ., inGlobalScope, (, ), ), {]
[., makeError, (, tweakIdNode, ,, INVALID_TWEAK_ID_ERROR, ), ), ;, }, if, (, !, t, ., inGlobalScope, (, ), ), {]
[,, INVALID_TWEAK_ID_ERROR, ), ), ;, }, if, (, !, t, ., inGlobalScope, (, ), ), {, compiler, ., report, (]
[,, INVALID_TWEAK_ID_ERROR, ), ), ;, }, if, (, !, t, ., inGlobalScope, (, ), ), {, compiler, ., report, (]
[;, }, if, (, !, t, ., inGlobalScope, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[if, (, !, t, ., inGlobalScope, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[!, t, ., inGlobalScope, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_TWEAK_INIT_ERROR, ,]
[., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_TWEAK_INIT_ERROR, ,, tweakId, ), ), ;, break, ;, }, if, (]
[., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_TWEAK_INIT_ERROR, ,, tweakId, ), ), ;, break, ;, }, if, (]
[n, ,, NON_GLOBAL_TWEAK_INIT_ERROR, ,, tweakId, ), ), ;, break, ;, }, if, (, tweakInfo, ., isRegistered, (, ), ), {]
[n, ,, NON_GLOBAL_TWEAK_INIT_ERROR, ,, tweakId, ), ), ;, break, ;, }, if, (, tweakInfo, ., isRegistered, (, ), ), {]
[tweakId, ), ), ;, break, ;, }, if, (, tweakInfo, ., isRegistered, (, ), ), {, compiler, ., report, (]
[tweakId, ), ), ;, break, ;, }, if, (, tweakInfo, ., isRegistered, (, ), ), {, compiler, ., report, (]
[break, ;, }, if, (, tweakInfo, ., isRegistered, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[}, if, (, tweakInfo, ., isRegistered, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[(, tweakInfo, ., isRegistered, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, TWEAK_MULTIPLY_REGISTERED_ERROR, ,]
[report, (, t, ., makeError, (, n, ,, TWEAK_MULTIPLY_REGISTERED_ERROR, ,, tweakId, ), ), ;, break, ;, }, Node, tweakDefaultValueNode, =]
[report, (, t, ., makeError, (, n, ,, TWEAK_MULTIPLY_REGISTERED_ERROR, ,, tweakId, ), ), ;, break, ;, }, Node, tweakDefaultValueNode, =]
[report, (, t, ., makeError, (, n, ,, TWEAK_MULTIPLY_REGISTERED_ERROR, ,, tweakId, ), ), ;, break, ;, }, Node, tweakDefaultValueNode, =]
[tweakId, ), ), ;, break, ;, }, Node, tweakDefaultValueNode, =, tweakIdNode, ., getNext, (, ), ., getNext, (, ), ;]
[tweakId, ), ), ;, break, ;, }, Node, tweakDefaultValueNode, =, tweakIdNode, ., getNext, (, ), ., getNext, (, ), ;]
[break, ;, }, Node, tweakDefaultValueNode, =, tweakIdNode, ., getNext, (, ), ., getNext, (, ), ;, tweakInfo, ., addRegisterCall, (]
[break, ;, }, Node, tweakDefaultValueNode, =, tweakIdNode, ., getNext, (, ), ., getNext, (, ), ;, tweakInfo, ., addRegisterCall, (]
[tweakIdNode, ., getNext, (, ), ., getNext, (, ), ;, tweakInfo, ., addRegisterCall, (, t, ., getSourceName, (, ), ,]
[getNext, (, ), ., getNext, (, ), ;, tweakInfo, ., addRegisterCall, (, t, ., getSourceName, (, ), ,, tweakFunc, ,]
[), ., getNext, (, ), ;, tweakInfo, ., addRegisterCall, (, t, ., getSourceName, (, ), ,, tweakFunc, ,, n, ,]
[tweakInfo, ., addRegisterCall, (, t, ., getSourceName, (, ), ,, tweakFunc, ,, n, ,, tweakDefaultValueNode, ), ;, break, ;, case]
[t, ., getSourceName, (, ), ,, tweakFunc, ,, n, ,, tweakDefaultValueNode, ), ;, break, ;, case, OVERRIDE_DEFAULT_VALUE, :, if, (]
[., getSourceName, (, ), ,, tweakFunc, ,, n, ,, tweakDefaultValueNode, ), ;, break, ;, case, OVERRIDE_DEFAULT_VALUE, :, if, (, !]
[., getSourceName, (, ), ,, tweakFunc, ,, n, ,, tweakDefaultValueNode, ), ;, break, ;, case, OVERRIDE_DEFAULT_VALUE, :, if, (, !]
[n, ,, tweakDefaultValueNode, ), ;, break, ;, case, OVERRIDE_DEFAULT_VALUE, :, if, (, !, t, ., inGlobalScope, (, ), ), {]
[n, ,, tweakDefaultValueNode, ), ;, break, ;, case, OVERRIDE_DEFAULT_VALUE, :, if, (, !, t, ., inGlobalScope, (, ), ), {]
[;, break, ;, case, OVERRIDE_DEFAULT_VALUE, :, if, (, !, t, ., inGlobalScope, (, ), ), {, compiler, ., report, (]
[;, break, ;, case, OVERRIDE_DEFAULT_VALUE, :, if, (, !, t, ., inGlobalScope, (, ), ), {, compiler, ., report, (]
[OVERRIDE_DEFAULT_VALUE, :, if, (, !, t, ., inGlobalScope, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[if, (, !, t, ., inGlobalScope, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[!, t, ., inGlobalScope, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_TWEAK_INIT_ERROR, ,]
[., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_TWEAK_INIT_ERROR, ,, tweakId, ), ), ;, break, ;, }, if, (]
[., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_TWEAK_INIT_ERROR, ,, tweakId, ), ), ;, break, ;, }, if, (]
[n, ,, NON_GLOBAL_TWEAK_INIT_ERROR, ,, tweakId, ), ), ;, break, ;, }, if, (, tweakInfo, ., isRegistered, (, ), ), {]
[n, ,, NON_GLOBAL_TWEAK_INIT_ERROR, ,, tweakId, ), ), ;, break, ;, }, if, (, tweakInfo, ., isRegistered, (, ), ), {]
[tweakId, ), ), ;, break, ;, }, if, (, tweakInfo, ., isRegistered, (, ), ), {, compiler, ., report, (]
[tweakId, ), ), ;, break, ;, }, if, (, tweakInfo, ., isRegistered, (, ), ), {, compiler, ., report, (]
[break, ;, }, if, (, tweakInfo, ., isRegistered, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[}, if, (, tweakInfo, ., isRegistered, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[(, tweakInfo, ., isRegistered, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, ,]
[{, compiler, ., report, (, t, ., makeError, (, n, ,, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, ,, tweakId, ), ), ;, break, ;, }]
[., report, (, t, ., makeError, (, n, ,, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, ,, tweakId, ), ), ;, break, ;, }, tweakDefaultValueNode, =]
[., report, (, t, ., makeError, (, n, ,, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, ,, tweakId, ), ), ;, break, ;, }, tweakDefaultValueNode, =]
[(, n, ,, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, ,, tweakId, ), ), ;, break, ;, }, tweakDefaultValueNode, =, tweakIdNode, ., getNext, (, ), ;]
[(, n, ,, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, ,, tweakId, ), ), ;, break, ;, }, tweakDefaultValueNode, =, tweakIdNode, ., getNext, (, ), ;]
[,, tweakId, ), ), ;, break, ;, }, tweakDefaultValueNode, =, tweakIdNode, ., getNext, (, ), ;, tweakInfo, ., addOverrideDefaultValueCall, (]
[,, tweakId, ), ), ;, break, ;, }, tweakDefaultValueNode, =, tweakIdNode, ., getNext, (, ), ;, tweakInfo, ., addOverrideDefaultValueCall, (]
[;, }, tweakDefaultValueNode, =, tweakIdNode, ., getNext, (, ), ;, tweakInfo, ., addOverrideDefaultValueCall, (, t, ., getSourceName, (, ), ,]
[tweakDefaultValueNode, =, tweakIdNode, ., getNext, (, ), ;, tweakInfo, ., addOverrideDefaultValueCall, (, t, ., getSourceName, (, ), ,, tweakFunc, ,]
[tweakIdNode, ., getNext, (, ), ;, tweakInfo, ., addOverrideDefaultValueCall, (, t, ., getSourceName, (, ), ,, tweakFunc, ,, n, ,]
[tweakInfo, ., addOverrideDefaultValueCall, (, t, ., getSourceName, (, ), ,, tweakFunc, ,, n, ,, tweakDefaultValueNode, ), ;, break, ;, case]
[(, t, ., getSourceName, (, ), ,, tweakFunc, ,, n, ,, tweakDefaultValueNode, ), ;, break, ;, case, GET_BOOLEAN, :, case]
[getSourceName, (, ), ,, tweakFunc, ,, n, ,, tweakDefaultValueNode, ), ;, break, ;, case, GET_BOOLEAN, :, case, GET_NUMBER, :, case]
[), ,, tweakFunc, ,, n, ,, tweakDefaultValueNode, ), ;, break, ;, case, GET_BOOLEAN, :, case, GET_NUMBER, :, case, GET_STRING, :]
[), ,, tweakFunc, ,, n, ,, tweakDefaultValueNode, ), ;, break, ;, case, GET_BOOLEAN, :, case, GET_NUMBER, :, case, GET_STRING, :]
[n, ,, tweakDefaultValueNode, ), ;, break, ;, case, GET_BOOLEAN, :, case, GET_NUMBER, :, case, GET_STRING, :, tweakInfo, ., addGetterCall, (]
[n, ,, tweakDefaultValueNode, ), ;, break, ;, case, GET_BOOLEAN, :, case, GET_NUMBER, :, case, GET_STRING, :, tweakInfo, ., addGetterCall, (]
[;, case, GET_BOOLEAN, :, case, GET_NUMBER, :, case, GET_STRING, :, tweakInfo, ., addGetterCall, (, t, ., getSourceName, (, ), ,]
[GET_BOOLEAN, :, case, GET_NUMBER, :, case, GET_STRING, :, tweakInfo, ., addGetterCall, (, t, ., getSourceName, (, ), ,, tweakFunc, ,]
[callNode, ;, final, Node, valueNode, ;, TweakFunctionCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ), {, this, (]
[final, Node, valueNode, ;, TweakFunctionCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ), {, this, (, sourceName, ,]
[valueNode, ;, TweakFunctionCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ), {, this, (, sourceName, ,, tweakFunc, ,]
[TweakFunctionCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ), {, this, (, sourceName, ,, tweakFunc, ,, callNode, ,]
[,, null, ), ;, }, TweakFunctionCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, valueNode, ), {]
[,, null, ), ;, }, TweakFunctionCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, valueNode, ), {]
[}, TweakFunctionCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, valueNode, ), {, this, ., sourceName, =]
[(, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, valueNode, ), {, this, ., sourceName, =, sourceName, ;]
[(, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, valueNode, ), {, this, ., sourceName, =, sourceName, ;]
[TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, valueNode, ), {, this, ., sourceName, =, sourceName, ;, this, ., callNode, =]
[,, Node, callNode, ,, Node, valueNode, ), {, this, ., sourceName, =, sourceName, ;, this, ., callNode, =, callNode, ;]
[,, Node, callNode, ,, Node, valueNode, ), {, this, ., sourceName, =, sourceName, ;, this, ., callNode, =, callNode, ;]
[Node, valueNode, ), {, this, ., sourceName, =, sourceName, ;, this, ., callNode, =, callNode, ;, this, ., tweakFunc, =]
[), {, this, ., sourceName, =, sourceName, ;, this, ., callNode, =, callNode, ;, this, ., tweakFunc, =, tweakFunc, ;]
[), {, this, ., sourceName, =, sourceName, ;, this, ., callNode, =, callNode, ;, this, ., tweakFunc, =, tweakFunc, ;]
[sourceName, =, sourceName, ;, this, ., callNode, =, callNode, ;, this, ., tweakFunc, =, tweakFunc, ;, this, ., valueNode, =]
[;, this, ., tweakFunc, =, tweakFunc, ;, this, ., valueNode, =, valueNode, ;, }, Node, getIdNode, (, ), {, return]
[;, this, ., tweakFunc, =, tweakFunc, ;, this, ., valueNode, =, valueNode, ;, }, Node, getIdNode, (, ), {, return]
[;, this, ., tweakFunc, =, tweakFunc, ;, this, ., valueNode, =, valueNode, ;, }, Node, getIdNode, (, ), {, return]
[;, final, List, <, TweakFunctionCall, >, functionCalls, ;, TweakFunctionCall, registerCall, ;, Node, defaultValueNode, ;, TweakInfo, (, String, tweakId, ), {]
[;, final, List, <, TweakFunctionCall, >, functionCalls, ;, TweakFunctionCall, registerCall, ;, Node, defaultValueNode, ;, TweakInfo, (, String, tweakId, ), {]
[TweakFunctionCall, >, functionCalls, ;, TweakFunctionCall, registerCall, ;, Node, defaultValueNode, ;, TweakInfo, (, String, tweakId, ), {, this, ., tweakId, =]
[functionCalls, ;, TweakFunctionCall, registerCall, ;, Node, defaultValueNode, ;, TweakInfo, (, String, tweakId, ), {, this, ., tweakId, =, tweakId, ;]
[TweakFunctionCall, registerCall, ;, Node, defaultValueNode, ;, TweakInfo, (, String, tweakId, ), {, this, ., tweakId, =, tweakId, ;, functionCalls, =]
[TweakFunctionCall, registerCall, ;, Node, defaultValueNode, ;, TweakInfo, (, String, tweakId, ), {, this, ., tweakId, =, tweakId, ;, functionCalls, =]
[tweakId, =, tweakId, ;, functionCalls, =, Lists, ., newArrayList, (, ), ;, }, void, emitAllWarnings, (, ), {, if, (]
[=, Lists, ., newArrayList, (, ), ;, }, void, emitAllWarnings, (, ), {, if, (, isRegistered, (, ), ), {]
[}, void, emitAllWarnings, (, ), {, if, (, isRegistered, (, ), ), {, emitAllTypeWarnings, (, ), ;, }, else, {]
[;, }, else, {, emitUnknownTweakErrors, (, ), ;, }, }, void, emitAllTypeWarnings, (, ), {, for, (, TweakFunctionCall, call, :]
[), ;, }, }, void, emitAllTypeWarnings, (, ), {, for, (, TweakFunctionCall, call, :, functionCalls, ), {, Node, valueNode, =]
[), ;, }, }, void, emitAllTypeWarnings, (, ), {, for, (, TweakFunctionCall, call, :, functionCalls, ), {, Node, valueNode, =]
[), {, for, (, TweakFunctionCall, call, :, functionCalls, ), {, Node, valueNode, =, call, ., valueNode, ;, TweakFunction, tweakFunc, =]
[), {, for, (, TweakFunctionCall, call, :, functionCalls, ), {, Node, valueNode, =, call, ., valueNode, ;, TweakFunction, tweakFunc, =]
[functionCalls, ), {, Node, valueNode, =, call, ., valueNode, ;, TweakFunction, tweakFunc, =, call, ., tweakFunc, ;, TweakFunction, registerFunc, =]
[functionCalls, ), {, Node, valueNode, =, call, ., valueNode, ;, TweakFunction, tweakFunc, =, call, ., tweakFunc, ;, TweakFunction, registerFunc, =]
[call, ., valueNode, ;, TweakFunction, tweakFunc, =, call, ., tweakFunc, ;, TweakFunction, registerFunc, =, registerCall, ., tweakFunc, ;, if, (]
[call, ., valueNode, ;, TweakFunction, tweakFunc, =, call, ., tweakFunc, ;, TweakFunction, registerFunc, =, registerCall, ., tweakFunc, ;, if, (]
[valueNode, ;, TweakFunction, tweakFunc, =, call, ., tweakFunc, ;, TweakFunction, registerFunc, =, registerCall, ., tweakFunc, ;, if, (, valueNode, !=]
[call, ., tweakFunc, ;, TweakFunction, registerFunc, =, registerCall, ., tweakFunc, ;, if, (, valueNode, !=, null, ), {, if, (]
[., tweakFunc, ;, TweakFunction, registerFunc, =, registerCall, ., tweakFunc, ;, if, (, valueNode, !=, null, ), {, if, (, !]
[., tweakFunc, ;, TweakFunction, registerFunc, =, registerCall, ., tweakFunc, ;, if, (, valueNode, !=, null, ), {, if, (, !]
[registerFunc, =, registerCall, ., tweakFunc, ;, if, (, valueNode, !=, null, ), {, if, (, !, registerFunc, ., isValidNodeType, (]
[registerFunc, =, registerCall, ., tweakFunc, ;, if, (, valueNode, !=, null, ), {, if, (, !, registerFunc, ., isValidNodeType, (]
[valueNode, !=, null, ), {, if, (, !, registerFunc, ., isValidNodeType, (, valueNode, ., getType, (, ), ), ), {]
[valueNode, !=, null, ), {, if, (, !, registerFunc, ., isValidNodeType, (, valueNode, ., getType, (, ), ), ), {]
[{, if, (, !, registerFunc, ., isValidNodeType, (, valueNode, ., getType, (, ), ), ), {, compiler, ., report, (]
[{, if, (, !, registerFunc, ., isValidNodeType, (, valueNode, ., getType, (, ), ), ), {, compiler, ., report, (]
[registerFunc, ., isValidNodeType, (, valueNode, ., getType, (, ), ), ), {, compiler, ., report, (, JSError, ., make, (]
[registerFunc, ., isValidNodeType, (, valueNode, ., getType, (, ), ), ), {, compiler, ., report, (, JSError, ., make, (]
[valueNode, ., getType, (, ), ), ), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,]
[getType, (, ), ), ), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,, valueNode, ,]
[), ), ), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,, valueNode, ,, INVALID_TWEAK_DEFAULT_VALUE_WARNING, ,]
[), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,, valueNode, ,, INVALID_TWEAK_DEFAULT_VALUE_WARNING, ,, tweakId, ,]
[), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,, valueNode, ,, INVALID_TWEAK_DEFAULT_VALUE_WARNING, ,, tweakId, ,]
[JSError, ., make, (, call, ., sourceName, ,, valueNode, ,, INVALID_TWEAK_DEFAULT_VALUE_WARNING, ,, tweakId, ,, registerFunc, ., getName, (, ), ,]
[JSError, ., make, (, call, ., sourceName, ,, valueNode, ,, INVALID_TWEAK_DEFAULT_VALUE_WARNING, ,, tweakId, ,, registerFunc, ., getName, (, ), ,]
[,, registerFunc, ., getName, (, ), ,, registerFunc, ., getExpectedTypeName, (, ), ), ), ;, }, }, else, if, (]
[,, registerFunc, ., getName, (, ), ,, registerFunc, ., getExpectedTypeName, (, ), ), ), ;, }, }, else, if, (]
[getExpectedTypeName, (, ), ), ), ;, }, }, else, if, (, tweakFunc, ., isGetterFunction, (, ), ), {, if, (]
[(, ), ), ), ;, }, }, else, if, (, tweakFunc, ., isGetterFunction, (, ), ), {, if, (, !]
[(, ), ), ), ;, }, }, else, if, (, tweakFunc, ., isGetterFunction, (, ), ), {, if, (, !]
[;, }, }, else, if, (, tweakFunc, ., isGetterFunction, (, ), ), {, if, (, !, tweakFunc, ., isCorrectRegisterFunction, (]
[if, (, tweakFunc, ., isGetterFunction, (, ), ), {, if, (, !, tweakFunc, ., isCorrectRegisterFunction, (, registerFunc, ), ), {]
[if, (, tweakFunc, ., isGetterFunction, (, ), ), {, if, (, !, tweakFunc, ., isCorrectRegisterFunction, (, registerFunc, ), ), {]
[isGetterFunction, (, ), ), {, if, (, !, tweakFunc, ., isCorrectRegisterFunction, (, registerFunc, ), ), {, compiler, ., report, (]
[isGetterFunction, (, ), ), {, if, (, !, tweakFunc, ., isCorrectRegisterFunction, (, registerFunc, ), ), {, compiler, ., report, (]
[{, if, (, !, tweakFunc, ., isCorrectRegisterFunction, (, registerFunc, ), ), {, compiler, ., report, (, JSError, ., make, (]
[{, if, (, !, tweakFunc, ., isCorrectRegisterFunction, (, registerFunc, ), ), {, compiler, ., report, (, JSError, ., make, (]
[tweakFunc, ., isCorrectRegisterFunction, (, registerFunc, ), ), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,]
[tweakFunc, ., isCorrectRegisterFunction, (, registerFunc, ), ), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,]
[registerFunc, ), ), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,, call, ., callNode, ,]
[), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,, call, ., callNode, ,, TWEAK_WRONG_GETTER_TYPE_WARNING, ,]
[), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,, call, ., callNode, ,, TWEAK_WRONG_GETTER_TYPE_WARNING, ,]
[JSError, ., make, (, call, ., sourceName, ,, call, ., callNode, ,, TWEAK_WRONG_GETTER_TYPE_WARNING, ,, tweakFunc, ., getName, (, ), ,]
[JSError, ., make, (, call, ., sourceName, ,, call, ., callNode, ,, TWEAK_WRONG_GETTER_TYPE_WARNING, ,, tweakFunc, ., getName, (, ), ,]
[getName, (, ), ), ), ;, }, }, }, }, void, emitUnknownTweakErrors, (, ), {, for, (, TweakFunctionCall, call, :]
[), ), ;, }, }, }, }, void, emitUnknownTweakErrors, (, ), {, for, (, TweakFunctionCall, call, :, functionCalls, ), {]
[), ), ;, }, }, }, }, void, emitUnknownTweakErrors, (, ), {, for, (, TweakFunctionCall, call, :, functionCalls, ), {]
[}, }, }, void, emitUnknownTweakErrors, (, ), {, for, (, TweakFunctionCall, call, :, functionCalls, ), {, compiler, ., report, (]
[}, }, }, void, emitUnknownTweakErrors, (, ), {, for, (, TweakFunctionCall, call, :, functionCalls, ), {, compiler, ., report, (]
[emitUnknownTweakErrors, (, ), {, for, (, TweakFunctionCall, call, :, functionCalls, ), {, compiler, ., report, (, JSError, ., make, (]
[emitUnknownTweakErrors, (, ), {, for, (, TweakFunctionCall, call, :, functionCalls, ), {, compiler, ., report, (, JSError, ., make, (]
[for, (, TweakFunctionCall, call, :, functionCalls, ), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,]
[for, (, TweakFunctionCall, call, :, functionCalls, ), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,]
[), {, compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,, call, ., getIdNode, (, ), ,]
[compiler, ., report, (, JSError, ., make, (, call, ., sourceName, ,, call, ., getIdNode, (, ), ,, UNKNOWN_TWEAK_WARNING, ,]
[), ;, }, }, void, addRegisterCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {]
[}, }, void, addRegisterCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {, registerCall, =]
[addRegisterCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {, registerCall, =, new, TweakFunctionCall, (]
[String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {, registerCall, =, new, TweakFunctionCall, (, sourceName, ,]
[,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {, registerCall, =, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,]
[tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {, registerCall, =, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,, callNode, ,]
[callNode, ,, Node, defaultValueNode, ), {, registerCall, =, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,, callNode, ,, defaultValueNode, ), ;]
[callNode, ,, Node, defaultValueNode, ), {, registerCall, =, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,, callNode, ,, defaultValueNode, ), ;]
[), {, registerCall, =, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,, callNode, ,, defaultValueNode, ), ;, functionCalls, ., add, (]
[registerCall, ), ;, }, void, addOverrideDefaultValueCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {]
[registerCall, ), ;, }, void, addOverrideDefaultValueCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {]
[void, addOverrideDefaultValueCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {, functionCalls, ., add, (]
[String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {, functionCalls, ., add, (, new, TweakFunctionCall, (]
[,, TweakFunction, tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {, functionCalls, ., add, (, new, TweakFunctionCall, (, sourceName, ,]
[tweakFunc, ,, Node, callNode, ,, Node, defaultValueNode, ), {, functionCalls, ., add, (, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,]
[Node, callNode, ,, Node, defaultValueNode, ), {, functionCalls, ., add, (, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,, callNode, ,]
[defaultValueNode, ), {, functionCalls, ., add, (, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,, callNode, ,, defaultValueNode, ), ), ;]
[defaultValueNode, ), {, functionCalls, ., add, (, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,, callNode, ,, defaultValueNode, ), ), ;]
[., add, (, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,, callNode, ,, defaultValueNode, ), ), ;, this, ., defaultValueNode, =]
[this, ., defaultValueNode, =, defaultValueNode, ;, }, void, addGetterCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ), {]
[this, ., defaultValueNode, =, defaultValueNode, ;, }, void, addGetterCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ), {]
[defaultValueNode, ;, }, void, addGetterCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ), {, functionCalls, ., add, (]
[void, addGetterCall, (, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ), {, functionCalls, ., add, (, new, TweakFunctionCall, (]
[(, String, sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ), {, functionCalls, ., add, (, new, TweakFunctionCall, (, sourceName, ,]
[sourceName, ,, TweakFunction, tweakFunc, ,, Node, callNode, ), {, functionCalls, ., add, (, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,]
[add, (, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,, callNode, ), ), ;, }, boolean, isRegistered, (, ), {, return]
[add, (, new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,, callNode, ), ), ;, }, boolean, isRegistered, (, ), {, return]
[new, TweakFunctionCall, (, sourceName, ,, tweakFunc, ,, callNode, ), ), ;, }, boolean, isRegistered, (, ), {, return, registerCall, !=]
[), ), ;, }, boolean, isRegistered, (, ), {, return, registerCall, !=, null, ;, }, Node, getDefaultValueNode, (, ), {]
[), ), ;, }, boolean, isRegistered, (, ), {, return, registerCall, !=, null, ;, }, Node, getDefaultValueNode, (, ), {]
[boolean, isRegistered, (, ), {, return, registerCall, !=, null, ;, }, Node, getDefaultValueNode, (, ), {, Preconditions, ., checkState, (]
[!=, null, ;, }, Node, getDefaultValueNode, (, ), {, Preconditions, ., checkState, (, isRegistered, (, ), ), ;, if, (]
[!=, null, ;, }, Node, getDefaultValueNode, (, ), {, Preconditions, ., checkState, (, isRegistered, (, ), ), ;, if, (]
[;, }, Node, getDefaultValueNode, (, ), {, Preconditions, ., checkState, (, isRegistered, (, ), ), ;, if, (, defaultValueNode, !=]
[(, ), {, Preconditions, ., checkState, (, isRegistered, (, ), ), ;, if, (, defaultValueNode, !=, null, ), {, return]
[checkState, (, isRegistered, (, ), ), ;, if, (, defaultValueNode, !=, null, ), {, return, defaultValueNode, ;, }, if, (]
[checkState, (, isRegistered, (, ), ), ;, if, (, defaultValueNode, !=, null, ), {, return, defaultValueNode, ;, }, if, (]
[checkState, (, isRegistered, (, ), ), ;, if, (, defaultValueNode, !=, null, ), {, return, defaultValueNode, ;, }, if, (]
[), ), ;, if, (, defaultValueNode, !=, null, ), {, return, defaultValueNode, ;, }, if, (, registerCall, ., valueNode, !=]
[(, defaultValueNode, !=, null, ), {, return, defaultValueNode, ;, }, if, (, registerCall, ., valueNode, !=, null, ), {, return]
[(, defaultValueNode, !=, null, ), {, return, defaultValueNode, ;, }, if, (, registerCall, ., valueNode, !=, null, ), {, return]
[return, defaultValueNode, ;, }, if, (, registerCall, ., valueNode, !=, null, ), {, return, registerCall, ., valueNode, ;, }, return]
[return, defaultValueNode, ;, }, if, (, registerCall, ., valueNode, !=, null, ), {, return, registerCall, ., valueNode, ;, }, return]
[return, defaultValueNode, ;, }, if, (, registerCall, ., valueNode, !=, null, ), {, return, registerCall, ., valueNode, ;, }, return]
