[;, private, int, count, =, -, 1, ;, Iterator, (, ), {, counter, [, last, ], =, -, 1, ;]
[], ;, private, int, count, =, -, 1, ;, Iterator, (, ), {, counter, [, last, ], =, -, 1]
[;, Iterator, (, ), {, counter, [, last, ], =, -, 1, ;, }, public, boolean, hasNext, (, ), {]
[;, Iterator, (, ), {, counter, [, last, ], =, -, 1, ;, }, public, boolean, hasNext, (, ), {]
[=, -, 1, ;, }, public, boolean, hasNext, (, ), {, for, (, int, i, =, 0, ;, i, <]
[[, last, ], =, -, 1, ;, }, public, boolean, hasNext, (, ), {, for, (, int, i, =, 0]
[], =, -, 1, ;, }, public, boolean, hasNext, (, ), {, for, (, int, i, =, 0, ;, i]
[;, }, public, boolean, hasNext, (, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;, i]
[;, }, public, boolean, hasNext, (, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;, i]
[;, i, <, dimension, ;, i, ++, ), {, if, (, counter, [, i, ], !=, size, [, i, ]]
[;, i, ++, ), {, if, (, counter, [, i, ], !=, size, [, i, ], -, 1, ), {]
[<, dimension, ;, i, ++, ), {, if, (, counter, [, i, ], !=, size, [, i, ], -, 1]
[;, i, ++, ), {, if, (, counter, [, i, ], !=, size, [, i, ], -, 1, ), {]
[), {, if, (, counter, [, i, ], !=, size, [, i, ], -, 1, ), {, return, true, ;]
[++, ), {, if, (, counter, [, i, ], !=, size, [, i, ], -, 1, ), {, return, true]
[), {, return, true, ;, }, }, return, false, ;, }, public, Integer, next, (, ), {, for, (, int]
[!=, size, [, i, ], -, 1, ), {, return, true, ;, }, }, return, false, ;, }, public, Integer]
[[, i, ], !=, size, [, i, ], -, 1, ), {, return, true, ;, }, }, return, false, ;]
[], !=, size, [, i, ], -, 1, ), {, return, true, ;, }, }, return, false, ;, }, public]
[), {, return, true, ;, }, }, return, false, ;, }, public, Integer, next, (, ), {, for, (, int]
[-, 1, ), {, return, true, ;, }, }, return, false, ;, }, public, Integer, next, (, ), {, for]
[[, i, ], -, 1, ), {, return, true, ;, }, }, return, false, ;, }, public, Integer, next, (]
[], -, 1, ), {, return, true, ;, }, }, return, false, ;, }, public, Integer, next, (, ), {]
[), {, return, true, ;, }, }, return, false, ;, }, public, Integer, next, (, ), {, for, (, int]
[;, }, }, return, false, ;, }, public, Integer, next, (, ), {, for, (, int, i, =, last, ;]
[;, }, public, Integer, next, (, ), {, for, (, int, i, =, last, ;, i, >=, 0, ;, i]
[;, i, >=, 0, ;, i, --, ), {, if, (, counter, [, i, ], ==, size, [, i, ]]
[;, i, --, ), {, if, (, counter, [, i, ], ==, size, [, i, ], -, 1, ), {]
[>=, 0, ;, i, --, ), {, if, (, counter, [, i, ], ==, size, [, i, ], -, 1]
[;, i, --, ), {, if, (, counter, [, i, ], ==, size, [, i, ], -, 1, ), {]
[), {, if, (, counter, [, i, ], ==, size, [, i, ], -, 1, ), {, counter, [, i]
[--, ), {, if, (, counter, [, i, ], ==, size, [, i, ], -, 1, ), {, counter, []
[), {, counter, [, i, ], =, 0, ;, }, else, {, ++, counter, [, i, ], ;, break, ;]
[==, size, [, i, ], -, 1, ), {, counter, [, i, ], =, 0, ;, }, else, {, ++]
[[, i, ], ==, size, [, i, ], -, 1, ), {, counter, [, i, ], =, 0, ;, }]
[], ==, size, [, i, ], -, 1, ), {, counter, [, i, ], =, 0, ;, }, else, {]
[), {, counter, [, i, ], =, 0, ;, }, else, {, ++, counter, [, i, ], ;, break, ;]
[-, 1, ), {, counter, [, i, ], =, 0, ;, }, else, {, ++, counter, [, i, ], ;]
[[, i, ], -, 1, ), {, counter, [, i, ], =, 0, ;, }, else, {, ++, counter, []
[], -, 1, ), {, counter, [, i, ], =, 0, ;, }, else, {, ++, counter, [, i, ]]
[), {, counter, [, i, ], =, 0, ;, }, else, {, ++, counter, [, i, ], ;, break, ;]
[=, 0, ;, }, else, {, ++, counter, [, i, ], ;, break, ;, }, }, return, ++, count, ;]
[[, i, ], =, 0, ;, }, else, {, ++, counter, [, i, ], ;, break, ;, }, }, return]
[], =, 0, ;, }, else, {, ++, counter, [, i, ], ;, break, ;, }, }, return, ++, count]
[;, }, else, {, ++, counter, [, i, ], ;, break, ;, }, }, return, ++, count, ;, }, public]
[;, break, ;, }, }, return, ++, count, ;, }, public, int, getCount, (, ), {, return, count, ;, }]
[;, break, ;, }, }, return, ++, count, ;, }, public, int, getCount, (, ), {, return, count, ;, }]
[[, i, ], ;, break, ;, }, }, return, ++, count, ;, }, public, int, getCount, (, ), {, return]
[], ;, break, ;, }, }, return, ++, count, ;, }, public, int, getCount, (, ), {, return, count, ;]
[;, }, public, int, getCount, (, ), {, return, count, ;, }, public, int, [, ], getCounts, (, ), {]
[;, }, public, int, getCount, (, ), {, return, count, ;, }, public, int, [, ], getCounts, (, ), {]
[;, }, public, int, [, ], getCounts, (, ), {, return, MathArrays, ., copyOf, (, counter, ), ;, }, public]
[;, }, public, int, getCount, (, int, dim, ), {, return, counter, [, dim, ], ;, }, public, void, remove]
[., copyOf, (, counter, ), ;, }, public, int, getCount, (, int, dim, ), {, return, counter, [, dim, ]]
[), ;, }, public, int, getCount, (, int, dim, ), {, return, counter, [, dim, ], ;, }, public, void]
[;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, public, MultidimensionalCounter, (, int]
[[, dim, ], ;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, public]
[], ;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, public, MultidimensionalCounter, (]
[;, }, }, public, MultidimensionalCounter, (, int, ..., size, ), throws, NotStrictlyPositiveException, {, dimension, =, size, ., length, ;, this]
[=, size, ., length, ;, this, ., size, =, MathArrays, ., copyOf, (, size, ), ;, uniCounterOffset, =, new, int]
[;, this, ., size, =, MathArrays, ., copyOf, (, size, ), ;, uniCounterOffset, =, new, int, [, dimension, ], ;]
[., length, ;, this, ., size, =, MathArrays, ., copyOf, (, size, ), ;, uniCounterOffset, =, new, int, [, dimension]
[=, MathArrays, ., copyOf, (, size, ), ;, uniCounterOffset, =, new, int, [, dimension, ], ;, last, =, dimension, -]
[., size, =, MathArrays, ., copyOf, (, size, ), ;, uniCounterOffset, =, new, int, [, dimension, ], ;, last, =]
[;, uniCounterOffset, =, new, int, [, dimension, ], ;, last, =, dimension, -, 1, ;, int, tS, =, size, []
[., copyOf, (, size, ), ;, uniCounterOffset, =, new, int, [, dimension, ], ;, last, =, dimension, -, 1, ;]
[), ;, uniCounterOffset, =, new, int, [, dimension, ], ;, last, =, dimension, -, 1, ;, int, tS, =, size]
[=, new, int, [, dimension, ], ;, last, =, dimension, -, 1, ;, int, tS, =, size, [, last, ]]
[;, last, =, dimension, -, 1, ;, int, tS, =, size, [, last, ], ;, for, (, int, i, =]
[], ;, last, =, dimension, -, 1, ;, int, tS, =, size, [, last, ], ;, for, (, int, i]
[=, dimension, -, 1, ;, int, tS, =, size, [, last, ], ;, for, (, int, i, =, 0, ;]
[;, int, tS, =, size, [, last, ], ;, for, (, int, i, =, 0, ;, i, <, last, ;]
[-, 1, ;, int, tS, =, size, [, last, ], ;, for, (, int, i, =, 0, ;, i, <]
[;, int, tS, =, size, [, last, ], ;, for, (, int, i, =, 0, ;, i, <, last, ;]
[;, for, (, int, i, =, 0, ;, i, <, last, ;, i, ++, ), {, int, count, =, 1]
[[, last, ], ;, for, (, int, i, =, 0, ;, i, <, last, ;, i, ++, ), {, int]
[], ;, for, (, int, i, =, 0, ;, i, <, last, ;, i, ++, ), {, int, count, =]
[;, i, <, last, ;, i, ++, ), {, int, count, =, 1, ;, for, (, int, j, =, i]
[;, i, ++, ), {, int, count, =, 1, ;, for, (, int, j, =, i, +, 1, ;, j]
[<, last, ;, i, ++, ), {, int, count, =, 1, ;, for, (, int, j, =, i, +, 1]
[;, i, ++, ), {, int, count, =, 1, ;, for, (, int, j, =, i, +, 1, ;, j]
[), {, int, count, =, 1, ;, for, (, int, j, =, i, +, 1, ;, j, <, dimension, ;]
[++, ), {, int, count, =, 1, ;, for, (, int, j, =, i, +, 1, ;, j, <, dimension]
[;, for, (, int, j, =, i, +, 1, ;, j, <, dimension, ;, j, ++, ), {, count, *=]
[;, j, <, dimension, ;, j, ++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i]
[+, 1, ;, j, <, dimension, ;, j, ++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset]
[;, j, <, dimension, ;, j, ++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i]
[;, j, ++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;]
[<, dimension, ;, j, ++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i, ], =]
[;, j, ++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;]
[), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=, size]
[++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=]
[*=, size, [, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=, size, [, i, ]]
[;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=, size, [, i, ], ;, }, uniCounterOffset, [, last]
[[, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=, size, [, i, ], ;, }]
[], ;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=, size, [, i, ], ;, }, uniCounterOffset, []
[=, count, ;, tS, *=, size, [, i, ], ;, }, uniCounterOffset, [, last, ], =, 0, ;, if, (]
[[, i, ], =, count, ;, tS, *=, size, [, i, ], ;, }, uniCounterOffset, [, last, ], =, 0]
[], =, count, ;, tS, *=, size, [, i, ], ;, }, uniCounterOffset, [, last, ], =, 0, ;, if]
[;, tS, *=, size, [, i, ], ;, }, uniCounterOffset, [, last, ], =, 0, ;, if, (, tS, <=]
[*=, size, [, i, ], ;, }, uniCounterOffset, [, last, ], =, 0, ;, if, (, tS, <=, 0, )]
[;, }, uniCounterOffset, [, last, ], =, 0, ;, if, (, tS, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[[, i, ], ;, }, uniCounterOffset, [, last, ], =, 0, ;, if, (, tS, <=, 0, ), {, throw]
[], ;, }, uniCounterOffset, [, last, ], =, 0, ;, if, (, tS, <=, 0, ), {, throw, new, NotStrictlyPositiveException]
[=, 0, ;, if, (, tS, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, tS, ), ;, }, totalSize, =]
[[, last, ], =, 0, ;, if, (, tS, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, tS, ), ;]
[], =, 0, ;, if, (, tS, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, tS, ), ;, }, totalSize]
[;, if, (, tS, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, tS, ), ;, }, totalSize, =, tS, ;]
[), {, throw, new, NotStrictlyPositiveException, (, tS, ), ;, }, totalSize, =, tS, ;, }, public, Iterator, iterator, (, )]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, tS, ), ;, }, totalSize, =, tS, ;, }, public, Iterator, iterator]
[), {, throw, new, NotStrictlyPositiveException, (, tS, ), ;, }, totalSize, =, tS, ;, }, public, Iterator, iterator, (, )]
[;, }, totalSize, =, tS, ;, }, public, Iterator, iterator, (, ), {, return, new, Iterator, (, ), ;, }]
[), ;, }, totalSize, =, tS, ;, }, public, Iterator, iterator, (, ), {, return, new, Iterator, (, ), ;]
[=, tS, ;, }, public, Iterator, iterator, (, ), {, return, new, Iterator, (, ), ;, }, public, int, getDimension]
[;, }, public, Iterator, iterator, (, ), {, return, new, Iterator, (, ), ;, }, public, int, getDimension, (, )]
[;, }, public, int, getDimension, (, ), {, return, dimension, ;, }, public, int, [, ], getCounts, (, int, index]
[;, }, public, int, [, ], getCounts, (, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, totalSize, ), ;, }, final, int, [, ], indices, =]
[||, index, >=, totalSize, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, totalSize, ), ;, }, final, int]
[<, 0, ||, index, >=, totalSize, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, totalSize, ), ;, }]
[||, index, >=, totalSize, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, totalSize, ), ;, }, final, int]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, totalSize, ), ;, }, final, int, [, ], indices, =]
[>=, totalSize, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, totalSize, ), ;, }, final, int, [, ]]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, totalSize, ), ;, }, final, int, [, ], indices, =]
[;, }, final, int, [, ], indices, =, new, int, [, dimension, ], ;, int, count, =, 0, ;, for]
[,, 0, ,, totalSize, ), ;, }, final, int, [, ], indices, =, new, int, [, dimension, ], ;, int]
[,, totalSize, ), ;, }, final, int, [, ], indices, =, new, int, [, dimension, ], ;, int, count, =]
[), ;, }, final, int, [, ], indices, =, new, int, [, dimension, ], ;, int, count, =, 0, ;]
[;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, last, ;, i, ++, )]
[], ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, last, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, last, ;, i, ++, ), {, int, idx, =, 0]
[;, i, <, last, ;, i, ++, ), {, int, idx, =, 0, ;, final, int, offset, =, uniCounterOffset, []
[;, i, ++, ), {, int, idx, =, 0, ;, final, int, offset, =, uniCounterOffset, [, i, ], ;, while]
[<, last, ;, i, ++, ), {, int, idx, =, 0, ;, final, int, offset, =, uniCounterOffset, [, i, ]]
[;, i, ++, ), {, int, idx, =, 0, ;, final, int, offset, =, uniCounterOffset, [, i, ], ;, while]
[), {, int, idx, =, 0, ;, final, int, offset, =, uniCounterOffset, [, i, ], ;, while, (, count, <=]
[++, ), {, int, idx, =, 0, ;, final, int, offset, =, uniCounterOffset, [, i, ], ;, while, (, count]
[;, final, int, offset, =, uniCounterOffset, [, i, ], ;, while, (, count, <=, index, ), {, count, +=, offset]
[;, while, (, count, <=, index, ), {, count, +=, offset, ;, ++, idx, ;, }, --, idx, ;, count]
[[, i, ], ;, while, (, count, <=, index, ), {, count, +=, offset, ;, ++, idx, ;, }, --]
[], ;, while, (, count, <=, index, ), {, count, +=, offset, ;, ++, idx, ;, }, --, idx, ;]
[), {, count, +=, offset, ;, ++, idx, ;, }, --, idx, ;, count, -=, offset, ;, indices, [, i]
[<=, index, ), {, count, +=, offset, ;, ++, idx, ;, }, --, idx, ;, count, -=, offset, ;, indices]
[), {, count, +=, offset, ;, ++, idx, ;, }, --, idx, ;, count, -=, offset, ;, indices, [, i]
[+=, offset, ;, ++, idx, ;, }, --, idx, ;, count, -=, offset, ;, indices, [, i, ], =, idx]
[;, ++, idx, ;, }, --, idx, ;, count, -=, offset, ;, indices, [, i, ], =, idx, ;, }]
[;, }, --, idx, ;, count, -=, offset, ;, indices, [, i, ], =, idx, ;, }, indices, [, last]
[;, }, --, idx, ;, count, -=, offset, ;, indices, [, i, ], =, idx, ;, }, indices, [, last]
[;, count, -=, offset, ;, indices, [, i, ], =, idx, ;, }, indices, [, last, ], =, index, -]
[;, count, -=, offset, ;, indices, [, i, ], =, idx, ;, }, indices, [, last, ], =, index, -]
[-=, offset, ;, indices, [, i, ], =, idx, ;, }, indices, [, last, ], =, index, -, count, ;]
[;, indices, [, i, ], =, idx, ;, }, indices, [, last, ], =, index, -, count, ;, return, indices]
[=, idx, ;, }, indices, [, last, ], =, index, -, count, ;, return, indices, ;, }, public, int, getCount]
[[, i, ], =, idx, ;, }, indices, [, last, ], =, index, -, count, ;, return, indices, ;, }]
[], =, idx, ;, }, indices, [, last, ], =, index, -, count, ;, return, indices, ;, }, public, int]
[;, }, indices, [, last, ], =, index, -, count, ;, return, indices, ;, }, public, int, getCount, (, int]
[=, index, -, count, ;, return, indices, ;, }, public, int, getCount, (, int, ..., c, ), throws, OutOfRangeException, ,]
[[, last, ], =, index, -, count, ;, return, indices, ;, }, public, int, getCount, (, int, ..., c, )]
[], =, index, -, count, ;, return, indices, ;, }, public, int, getCount, (, int, ..., c, ), throws, OutOfRangeException]
[;, return, indices, ;, }, public, int, getCount, (, int, ..., c, ), throws, OutOfRangeException, ,, DimensionMismatchException, {, if, (]
[-, count, ;, return, indices, ;, }, public, int, getCount, (, int, ..., c, ), throws, OutOfRangeException, ,, DimensionMismatchException, {]
[;, return, indices, ;, }, public, int, getCount, (, int, ..., c, ), throws, OutOfRangeException, ,, DimensionMismatchException, {, if, (]
[;, }, public, int, getCount, (, int, ..., c, ), throws, OutOfRangeException, ,, DimensionMismatchException, {, if, (, c, ., length]
[), {, throw, new, DimensionMismatchException, (, c, ., length, ,, dimension, ), ;, }, int, count, =, 0, ;, for]
[!=, dimension, ), {, throw, new, DimensionMismatchException, (, c, ., length, ,, dimension, ), ;, }, int, count, =, 0]
[., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, c, ., length, ,, dimension, ), ;, }, int, count]
[), {, throw, new, DimensionMismatchException, (, c, ., length, ,, dimension, ), ;, }, int, count, =, 0, ;, for]
[;, }, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++]
[,, dimension, ), ;, }, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, dimension]
[., length, ,, dimension, ), ;, }, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i]
[), ;, }, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, int, index, =]
[;, i, <, dimension, ;, i, ++, ), {, final, int, index, =, c, [, i, ], ;, if, (]
[;, i, ++, ), {, final, int, index, =, c, [, i, ], ;, if, (, index, <, 0, ||]
[<, dimension, ;, i, ++, ), {, final, int, index, =, c, [, i, ], ;, if, (, index, <]
[;, i, ++, ), {, final, int, index, =, c, [, i, ], ;, if, (, index, <, 0, ||]
[), {, final, int, index, =, c, [, i, ], ;, if, (, index, <, 0, ||, index, >=, size]
[++, ), {, final, int, index, =, c, [, i, ], ;, if, (, index, <, 0, ||, index, >=]
[;, if, (, index, <, 0, ||, index, >=, size, [, i, ], ), {, throw, new, OutOfRangeException, (, index]
[[, i, ], ;, if, (, index, <, 0, ||, index, >=, size, [, i, ], ), {, throw, new]
[], ;, if, (, index, <, 0, ||, index, >=, size, [, i, ], ), {, throw, new, OutOfRangeException, (]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -, 1, ), ;, }, count]
[||, index, >=, size, [, i, ], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i]
[<, 0, ||, index, >=, size, [, i, ], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size]
[||, index, >=, size, [, i, ], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -, 1, ), ;, }, count]
[>=, size, [, i, ], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -, 1, ), ;, }, count]
[[, i, ], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -, 1, )]
[], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -, 1, ), ;, }]
[;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i, ], ;, }, return, count, +, c, []
[,, 0, ,, size, [, i, ], -, 1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *, c]
[,, size, [, i, ], -, 1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i]
[), ;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i, ], ;, }, return, count, +, c]
[-, 1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i, ], ;, }, return, count]
[[, i, ], -, 1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i, ], ;]
[], -, 1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i, ], ;, }, return]
[), ;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i, ], ;, }, return, count, +, c]
[+=, uniCounterOffset, [, i, ], *, c, [, i, ], ;, }, return, count, +, c, [, last, ], ;]
[;, }, return, count, +, c, [, last, ], ;, }, public, int, getSize, (, ), {, return, totalSize, ;]
[*, c, [, i, ], ;, }, return, count, +, c, [, last, ], ;, }, public, int, getSize, (]
[[, i, ], *, c, [, i, ], ;, }, return, count, +, c, [, last, ], ;, }, public]
[], *, c, [, i, ], ;, }, return, count, +, c, [, last, ], ;, }, public, int, getSize]
[;, }, return, count, +, c, [, last, ], ;, }, public, int, getSize, (, ), {, return, totalSize, ;]
[[, i, ], ;, }, return, count, +, c, [, last, ], ;, }, public, int, getSize, (, ), {]
[], ;, }, return, count, +, c, [, last, ], ;, }, public, int, getSize, (, ), {, return, totalSize]
[;, }, public, int, getSize, (, ), {, return, totalSize, ;, }, public, int, [, ], getSizes, (, ), {]
[+, c, [, last, ], ;, }, public, int, getSize, (, ), {, return, totalSize, ;, }, public, int, []
[;, }, public, int, getSize, (, ), {, return, totalSize, ;, }, public, int, [, ], getSizes, (, ), {]
[[, last, ], ;, }, public, int, getSize, (, ), {, return, totalSize, ;, }, public, int, [, ], getSizes]
[], ;, }, public, int, getSize, (, ), {, return, totalSize, ;, }, public, int, [, ], getSizes, (, )]
[;, }, public, int, [, ], getSizes, (, ), {, return, MathArrays, ., copyOf, (, size, ), ;, }, @]
[;, }, @, Override, public, String, toString, (, ), {, final, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for]
[., copyOf, (, size, ), ;, }, @, Override, public, String, toString, (, ), {, final, StringBuilder, sb, =, new]
[), ;, }, @, Override, public, String, toString, (, ), {, final, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, sb, ., append, (]
[;, i, <, dimension, ;, i, ++, ), {, sb, ., append, (, "[", ), ., append, (, getCount, (]
[;, i, ++, ), {, sb, ., append, (, "[", ), ., append, (, getCount, (, i, ), ), .]
[<, dimension, ;, i, ++, ), {, sb, ., append, (, "[", ), ., append, (, getCount, (, i, )]
[;, i, ++, ), {, sb, ., append, (, "[", ), ., append, (, getCount, (, i, ), ), .]
[), {, sb, ., append, (, "[", ), ., append, (, getCount, (, i, ), ), ., append, (, "]"]
[++, ), {, sb, ., append, (, "[", ), ., append, (, getCount, (, i, ), ), ., append, (]
[;, }, return, sb, ., toString, (, ), ;, }, }]
[., append, (, "]", ), ;, }, return, sb, ., toString, (, ), ;, }, }]
[., append, (, getCount, (, i, ), ), ., append, (, "]", ), ;, }, return, sb, ., toString, (]
[., append, (, "[", ), ., append, (, getCount, (, i, ), ), ., append, (, "]", ), ;, }]
[), ., append, (, getCount, (, i, ), ), ., append, (, "]", ), ;, }, return, sb, ., toString]
[), ., append, (, "]", ), ;, }, return, sb, ., toString, (, ), ;, }, }]
[), ), ., append, (, "]", ), ;, }, return, sb, ., toString, (, ), ;, }, }]
[), ;, }, return, sb, ., toString, (, ), ;, }, }]
[;, }, }]
[., toString, (, ), ;, }, }]
