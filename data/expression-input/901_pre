[void, nodeRemoved, (, Node, node, ), ;, }, private, final, List, <, ChangeListener, >, listeners, ;, AstChangeProxy, (, ), {]
[(, Node, node, ), ;, }, private, final, List, <, ChangeListener, >, listeners, ;, AstChangeProxy, (, ), {, listeners, =]
[(, Node, node, ), ;, }, private, final, List, <, ChangeListener, >, listeners, ;, AstChangeProxy, (, ), {, listeners, =]
[(, ), {, listeners, =, Lists, ., newArrayList, (, ), ;, }, final, void, registerListener, (, ChangeListener, listener, ), {]
[(, ), {, listeners, =, Lists, ., newArrayList, (, ), ;, }, final, void, registerListener, (, ChangeListener, listener, ), {]
[=, Lists, ., newArrayList, (, ), ;, }, final, void, registerListener, (, ChangeListener, listener, ), {, listeners, ., add, (]
[ChangeListener, listener, ), {, listeners, ., add, (, listener, ), ;, }, final, void, unregisterListener, (, ChangeListener, listener, ), {]
[ChangeListener, listener, ), {, listeners, ., add, (, listener, ), ;, }, final, void, unregisterListener, (, ChangeListener, listener, ), {]
[listeners, ., add, (, listener, ), ;, }, final, void, unregisterListener, (, ChangeListener, listener, ), {, listeners, ., remove, (]
[., remove, (, listener, ), ;, }, private, void, notifyOfRemoval, (, Node, node, ), {, for, (, ChangeListener, listener, :]
[listener, ), ;, }, private, void, notifyOfRemoval, (, Node, node, ), {, for, (, ChangeListener, listener, :, listeners, ), {]
[listener, ), ;, }, private, void, notifyOfRemoval, (, Node, node, ), {, for, (, ChangeListener, listener, :, listeners, ), {]
[private, void, notifyOfRemoval, (, Node, node, ), {, for, (, ChangeListener, listener, :, listeners, ), {, listener, ., nodeRemoved, (]
[listener, ., nodeRemoved, (, node, ), ;, }, }, final, void, removeChild, (, Node, parent, ,, Node, node, ), {]
[listener, ., nodeRemoved, (, node, ), ;, }, }, final, void, removeChild, (, Node, parent, ,, Node, node, ), {]
[node, ), ;, }, }, final, void, removeChild, (, Node, parent, ,, Node, node, ), {, parent, ., removeChild, (]
[}, }, final, void, removeChild, (, Node, parent, ,, Node, node, ), {, parent, ., removeChild, (, node, ), ;]
[final, void, removeChild, (, Node, parent, ,, Node, node, ), {, parent, ., removeChild, (, node, ), ;, notifyOfRemoval, (]
[notifyOfRemoval, (, node, ), ;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, Node, replacement, ), {]
[node, ), ;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, Node, replacement, ), {, replaceWith, (]
[;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, Node, replacement, ), {, replaceWith, (, parent, ,]
[final, void, replaceWith, (, Node, parent, ,, Node, node, ,, Node, replacement, ), {, replaceWith, (, parent, ,, node, ,]
[final, void, replaceWith, (, Node, parent, ,, Node, node, ,, Node, replacement, ), {, replaceWith, (, parent, ,, node, ,]
[Node, parent, ,, Node, node, ,, Node, replacement, ), {, replaceWith, (, parent, ,, node, ,, Lists, ., newArrayList, (]
[), ;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, List, <, Node, >, replacements, ), {]
[), ;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, List, <, Node, >, replacements, ), {]
[void, replaceWith, (, Node, parent, ,, Node, node, ,, List, <, Node, >, replacements, ), {, Preconditions, ., checkNotNull, (]
[(, Node, parent, ,, Node, node, ,, List, <, Node, >, replacements, ), {, Preconditions, ., checkNotNull, (, replacements, ,]
[,, List, <, Node, >, replacements, ), {, Preconditions, ., checkNotNull, (, replacements, ,, "\"replacements\" is null.", ), ;, int, size, =]
[,, List, <, Node, >, replacements, ), {, Preconditions, ., checkNotNull, (, replacements, ,, "\"replacements\" is null.", ), ;, int, size, =]
[Preconditions, ., checkNotNull, (, replacements, ,, "\"replacements\" is null.", ), ;, int, size, =, replacements, ., size, (, ), ;, if, (]
[Preconditions, ., checkNotNull, (, replacements, ,, "\"replacements\" is null.", ), ;, int, size, =, replacements, ., size, (, ), ;, if, (]
[., checkNotNull, (, replacements, ,, "\"replacements\" is null.", ), ;, int, size, =, replacements, ., size, (, ), ;, if, (, (]
[., checkNotNull, (, replacements, ,, "\"replacements\" is null.", ), ;, int, size, =, replacements, ., size, (, ), ;, if, (, (]
[(, replacements, ,, "\"replacements\" is null.", ), ;, int, size, =, replacements, ., size, (, ), ;, if, (, (, size, ==]
["\"replacements\" is null.", ), ;, int, size, =, replacements, ., size, (, ), ;, if, (, (, size, ==, 1, ), &&]
["\"replacements\" is null.", ), ;, int, size, =, replacements, ., size, (, ), ;, if, (, (, size, ==, 1, ), &&]
[size, =, replacements, ., size, (, ), ;, if, (, (, size, ==, 1, ), &&, node, ., isEquivalentTo, (]
[size, =, replacements, ., size, (, ), ;, if, (, (, size, ==, 1, ), &&, node, ., isEquivalentTo, (]
[size, (, ), ;, if, (, (, size, ==, 1, ), &&, node, ., isEquivalentTo, (, replacements, ., get, (]
[&&, node, ., isEquivalentTo, (, replacements, ., get, (, 0, ), ), ), {, return, ;, }, int, parentType, =]
[&&, node, ., isEquivalentTo, (, replacements, ., get, (, 0, ), ), ), {, return, ;, }, int, parentType, =]
[., get, (, 0, ), ), ), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;]
[., get, (, 0, ), ), ), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;]
[), ), ), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (]
[), ), ), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (]
[), ), ), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (]
[), ), ), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (]
[), ), ), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (]
[), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (, size, ==]
[return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (, size, ==, 1, ||]
[return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (, size, ==, 1, ||]
[}, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (, size, ==, 1, ||, parentType, ==]
[}, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (, size, ==, 1, ||, parentType, ==]
[parent, ., getType, (, ), ;, Preconditions, ., checkState, (, size, ==, 1, ||, parentType, ==, Token, ., BLOCK, ||]
[parent, ., getType, (, ), ;, Preconditions, ., checkState, (, size, ==, 1, ||, parentType, ==, Token, ., BLOCK, ||]
[getType, (, ), ;, Preconditions, ., checkState, (, size, ==, 1, ||, parentType, ==, Token, ., BLOCK, ||, parentType, ==]
[getType, (, ), ;, Preconditions, ., checkState, (, size, ==, 1, ||, parentType, ==, Token, ., BLOCK, ||, parentType, ==]
[Preconditions, ., checkState, (, size, ==, 1, ||, parentType, ==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||]
[Preconditions, ., checkState, (, size, ==, 1, ||, parentType, ==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||]
[checkState, (, size, ==, 1, ||, parentType, ==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==]
[checkState, (, size, ==, 1, ||, parentType, ==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==]
[==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (]
[==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (]
[==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (]
[., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==]
[., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==]
[==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&]
[==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&]
[., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=]
[., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=, 1, ), {, Node, block, =]
[., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=, 1, ), {, Node, block, =]
[&&, size, !=, 1, ), {, Node, block, =, IR, ., block, (, ), ;, for, (, Node, newChild, :]
[1, ), {, Node, block, =, IR, ., block, (, ), ;, for, (, Node, newChild, :, replacements, ), {]
[1, ), {, Node, block, =, IR, ., block, (, ), ;, for, (, Node, newChild, :, replacements, ), {]
[block, =, IR, ., block, (, ), ;, for, (, Node, newChild, :, replacements, ), {, newChild, ., copyInformationFrom, (]
[), ;, for, (, Node, newChild, :, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =]
[), ;, for, (, Node, newChild, :, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =]
[:, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;]
[:, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;]
[newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;, block, ., addChildToBack, (]
[node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;, block, ., addChildToBack, (, newChild, ), ;, }]
[node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;, block, ., addChildToBack, (, newChild, ), ;, }]
[oldParent, =, newChild, ., getParent, (, ), ;, block, ., addChildToBack, (, newChild, ), ;, }, parent, ., replaceChild, (]
[newChild, ., getParent, (, ), ;, block, ., addChildToBack, (, newChild, ), ;, }, parent, ., replaceChild, (, node, ,]
[), ;, }, parent, ., replaceChild, (, node, ,, block, ), ;, }, else, {, for, (, Node, newChild, :]
[parent, ., replaceChild, (, node, ,, block, ), ;, }, else, {, for, (, Node, newChild, :, replacements, ), {]
[parent, ., replaceChild, (, node, ,, block, ), ;, }, else, {, for, (, Node, newChild, :, replacements, ), {]
[node, ,, block, ), ;, }, else, {, for, (, Node, newChild, :, replacements, ), {, newChild, ., copyInformationFrom, (]
[else, {, for, (, Node, newChild, :, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =]
[else, {, for, (, Node, newChild, :, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =]
[:, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;]
[:, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;]
[newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;, parent, ., addChildBefore, (]
[copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;, parent, ., addChildBefore, (, newChild, ,]
[;, Node, oldParent, =, newChild, ., getParent, (, ), ;, parent, ., addChildBefore, (, newChild, ,, node, ), ;, }]
[;, Node, oldParent, =, newChild, ., getParent, (, ), ;, parent, ., addChildBefore, (, newChild, ,, node, ), ;, }]
[newChild, ., getParent, (, ), ;, parent, ., addChildBefore, (, newChild, ,, node, ), ;, }, parent, ., removeChild, (]
[), ;, parent, ., addChildBefore, (, newChild, ,, node, ), ;, }, parent, ., removeChild, (, node, ), ;, }]
[parent, ., addChildBefore, (, newChild, ,, node, ), ;, }, parent, ., removeChild, (, node, ), ;, }, notifyOfRemoval, (]
