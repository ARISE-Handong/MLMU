[;, String, name, =, null, ;, long, time, =, 0, ;, long, avg, =, 0, ;, int, runs, =, 0]
[;, long, time, =, 0, ;, long, avg, =, 0, ;, int, runs, =, 0, ;, }, private, static, int]
[;, long, avg, =, 0, ;, int, runs, =, 0, ;, }, private, static, int, AVERAGE, =, 3, ;, private]
[;, int, runs, =, 0, ;, }, private, static, int, AVERAGE, =, 3, ;, private, static, int, COUNT_VERY_FAST, =, 5000000]
[;, }, private, static, int, AVERAGE, =, 3, ;, private, static, int, COUNT_VERY_FAST, =, 5000000, ;, private, static, int, COUNT_FAST]
[;, private, static, int, COUNT_VERY_FAST, =, 5000000, ;, private, static, int, COUNT_FAST, =, 200000, ;, private, static, int, COUNT_SLOW, =]
[;, private, static, int, COUNT_FAST, =, 200000, ;, private, static, int, COUNT_SLOW, =, 20000, ;, private, Map, results, =, new]
[;, private, static, int, COUNT_SLOW, =, 20000, ;, private, Map, results, =, new, HashMap, (, ), ;, private, List, resultList]
[;, private, Map, results, =, new, HashMap, (, ), ;, private, List, resultList, =, new, ArrayList, (, ), ;, private]
[;, private, List, resultList, =, new, ArrayList, (, ), ;, private, Result, result, =, null, ;, private, long, start, =]
[;, private, Result, result, =, null, ;, private, long, start, =, 0, ;, private, long, end, =, 0, ;, public]
[;, private, long, start, =, 0, ;, private, long, end, =, 0, ;, public, static, void, main, (, String, []
[;, private, long, end, =, 0, ;, public, static, void, main, (, String, [, ], args, ), {, try, {]
[;, public, static, void, main, (, String, [, ], args, ), {, try, {, new, DateTimePerformance, (, ), ;, }]
[;, }, catch, (, Throwable, th, ), {, th, ., printStackTrace, (, ), ;, }, }, public, DateTimePerformance, (, )]
[;, }, }, public, DateTimePerformance, (, ), throws, Exception, {, checkJodaConstructor1, (, ), ;, checkJISOConstructor1, (, ), ;, checkGCalConstructor1, (]
[., printStackTrace, (, ), ;, }, }, public, DateTimePerformance, (, ), throws, Exception, {, checkJodaConstructor1, (, ), ;, checkJISOConstructor1, (]
[;, checkJISOConstructor1, (, ), ;, checkGCalConstructor1, (, ), ;, checkDateConstructor1, (, ), ;, checkJodaConstructor2, (, ), ;, checkJISOConstructor2, (, )]
[;, checkGCalConstructor1, (, ), ;, checkDateConstructor1, (, ), ;, checkJodaConstructor2, (, ), ;, checkJISOConstructor2, (, ), ;, checkGCalConstructor2, (, )]
[;, checkDateConstructor1, (, ), ;, checkJodaConstructor2, (, ), ;, checkJISOConstructor2, (, ), ;, checkGCalConstructor2, (, ), ;, checkDateConstructor2, (, )]
[;, checkJodaConstructor2, (, ), ;, checkJISOConstructor2, (, ), ;, checkGCalConstructor2, (, ), ;, checkDateConstructor2, (, ), ;, checkJodaConstructor3, (, )]
[;, checkJISOConstructor2, (, ), ;, checkGCalConstructor2, (, ), ;, checkDateConstructor2, (, ), ;, checkJodaConstructor3, (, ), ;, checkJISOConstructor3, (, )]
[;, checkGCalConstructor2, (, ), ;, checkDateConstructor2, (, ), ;, checkJodaConstructor3, (, ), ;, checkJISOConstructor3, (, ), ;, checkGCalConstructor3, (, )]
[;, checkDateConstructor2, (, ), ;, checkJodaConstructor3, (, ), ;, checkJISOConstructor3, (, ), ;, checkGCalConstructor3, (, ), ;, checkDateConstructor3, (, )]
[;, checkJodaConstructor3, (, ), ;, checkJISOConstructor3, (, ), ;, checkGCalConstructor3, (, ), ;, checkDateConstructor3, (, ), ;, checkJodaGetYear, (, )]
[;, checkJISOConstructor3, (, ), ;, checkGCalConstructor3, (, ), ;, checkDateConstructor3, (, ), ;, checkJodaGetYear, (, ), ;, checkJISOGetYear, (, )]
[;, checkGCalConstructor3, (, ), ;, checkDateConstructor3, (, ), ;, checkJodaGetYear, (, ), ;, checkJISOGetYear, (, ), ;, checkGCalGetYear, (, )]
[;, checkDateConstructor3, (, ), ;, checkJodaGetYear, (, ), ;, checkJISOGetYear, (, ), ;, checkGCalGetYear, (, ), ;, checkDateGetYear, (, )]
[;, checkJodaGetYear, (, ), ;, checkJISOGetYear, (, ), ;, checkGCalGetYear, (, ), ;, checkDateGetYear, (, ), ;, checkJodaGetHour, (, )]
[;, checkJISOGetYear, (, ), ;, checkGCalGetYear, (, ), ;, checkDateGetYear, (, ), ;, checkJodaGetHour, (, ), ;, checkJISOGetHour, (, )]
[;, checkGCalGetYear, (, ), ;, checkDateGetYear, (, ), ;, checkJodaGetHour, (, ), ;, checkJISOGetHour, (, ), ;, checkGCalGetHour, (, )]
[;, checkDateGetYear, (, ), ;, checkJodaGetHour, (, ), ;, checkJISOGetHour, (, ), ;, checkGCalGetHour, (, ), ;, checkDateGetHour, (, )]
[;, checkJodaGetHour, (, ), ;, checkJISOGetHour, (, ), ;, checkGCalGetHour, (, ), ;, checkDateGetHour, (, ), ;, checkJodaSetYear, (, )]
[;, checkJISOGetHour, (, ), ;, checkGCalGetHour, (, ), ;, checkDateGetHour, (, ), ;, checkJodaSetYear, (, ), ;, checkJISOSetYear, (, )]
[;, checkGCalGetHour, (, ), ;, checkDateGetHour, (, ), ;, checkJodaSetYear, (, ), ;, checkJISOSetYear, (, ), ;, checkGCalSetYear, (, )]
[;, checkDateGetHour, (, ), ;, checkJodaSetYear, (, ), ;, checkJISOSetYear, (, ), ;, checkGCalSetYear, (, ), ;, checkDateSetYear, (, )]
[;, checkJodaSetYear, (, ), ;, checkJISOSetYear, (, ), ;, checkGCalSetYear, (, ), ;, checkDateSetYear, (, ), ;, checkJodaSetGetYear, (, )]
[;, checkJISOSetYear, (, ), ;, checkGCalSetYear, (, ), ;, checkDateSetYear, (, ), ;, checkJodaSetGetYear, (, ), ;, checkJISOSetGetYear, (, )]
[;, checkGCalSetYear, (, ), ;, checkDateSetYear, (, ), ;, checkJodaSetGetYear, (, ), ;, checkJISOSetGetYear, (, ), ;, checkGCalSetGetYear, (, )]
[;, checkDateSetYear, (, ), ;, checkJodaSetGetYear, (, ), ;, checkJISOSetGetYear, (, ), ;, checkGCalSetGetYear, (, ), ;, checkDateSetGetYear, (, )]
[;, checkJodaSetGetYear, (, ), ;, checkJISOSetGetYear, (, ), ;, checkGCalSetGetYear, (, ), ;, checkDateSetGetYear, (, ), ;, checkJodaSetHour, (, )]
[;, checkJISOSetGetYear, (, ), ;, checkGCalSetGetYear, (, ), ;, checkDateSetGetYear, (, ), ;, checkJodaSetHour, (, ), ;, checkJISOSetHour, (, )]
[;, checkGCalSetGetYear, (, ), ;, checkDateSetGetYear, (, ), ;, checkJodaSetHour, (, ), ;, checkJISOSetHour, (, ), ;, checkGCalSetHour, (, )]
[;, checkDateSetGetYear, (, ), ;, checkJodaSetHour, (, ), ;, checkJISOSetHour, (, ), ;, checkGCalSetHour, (, ), ;, checkDateSetHour, (, )]
[;, checkJodaSetHour, (, ), ;, checkJISOSetHour, (, ), ;, checkGCalSetHour, (, ), ;, checkDateSetHour, (, ), ;, checkJodaSetGetHour, (, )]
[;, checkJISOSetHour, (, ), ;, checkGCalSetHour, (, ), ;, checkDateSetHour, (, ), ;, checkJodaSetGetHour, (, ), ;, checkJISOSetGetHour, (, )]
[;, checkGCalSetHour, (, ), ;, checkDateSetHour, (, ), ;, checkJodaSetGetHour, (, ), ;, checkJISOSetGetHour, (, ), ;, checkGCalSetGetHour, (, )]
[;, checkDateSetHour, (, ), ;, checkJodaSetGetHour, (, ), ;, checkJISOSetGetHour, (, ), ;, checkGCalSetGetHour, (, ), ;, checkDateSetGetHour, (, )]
[;, checkJodaSetGetHour, (, ), ;, checkJISOSetGetHour, (, ), ;, checkGCalSetGetHour, (, ), ;, checkDateSetGetHour, (, ), ;, checkJodaToString, (, )]
[;, checkJISOSetGetHour, (, ), ;, checkGCalSetGetHour, (, ), ;, checkDateSetGetHour, (, ), ;, checkJodaToString, (, ), ;, checkJISOToString, (, )]
[;, checkGCalSetGetHour, (, ), ;, checkDateSetGetHour, (, ), ;, checkJodaToString, (, ), ;, checkJISOToString, (, ), ;, checkGCalToString, (, )]
[;, checkDateSetGetHour, (, ), ;, checkJodaToString, (, ), ;, checkJISOToString, (, ), ;, checkGCalToString, (, ), ;, checkDateToString, (, )]
[;, checkJodaToString, (, ), ;, checkJISOToString, (, ), ;, checkGCalToString, (, ), ;, checkDateToString, (, ), ;, System, ., out]
[;, checkJISOToString, (, ), ;, checkGCalToString, (, ), ;, checkDateToString, (, ), ;, System, ., out, ., println, (, ""]
[;, checkGCalToString, (, ), ;, checkDateToString, (, ), ;, System, ., out, ., println, (, "", ), ;, long, jodaTotal]
[;, checkDateToString, (, ), ;, System, ., out, ., println, (, "", ), ;, long, jodaTotal, =, 0, ;, long]
[;, System, ., out, ., println, (, "", ), ;, long, jodaTotal, =, 0, ;, long, jisoTotal, =, 0, ;]
[;, long, jodaTotal, =, 0, ;, long, jisoTotal, =, 0, ;, long, gcalTotal, =, 0, ;, long, dateTotal, =, 0]
[., println, (, "", ), ;, long, jodaTotal, =, 0, ;, long, jisoTotal, =, 0, ;, long, gcalTotal, =, 0]
[., out, ., println, (, "", ), ;, long, jodaTotal, =, 0, ;, long, jisoTotal, =, 0, ;, long, gcalTotal]
[), ;, long, jodaTotal, =, 0, ;, long, jisoTotal, =, 0, ;, long, gcalTotal, =, 0, ;, long, dateTotal, =]
[;, long, jisoTotal, =, 0, ;, long, gcalTotal, =, 0, ;, long, dateTotal, =, 0, ;, for, (, Iterator, it]
[;, long, gcalTotal, =, 0, ;, long, dateTotal, =, 0, ;, for, (, Iterator, it, =, resultList, ., iterator, (]
[;, long, dateTotal, =, 0, ;, for, (, Iterator, it, =, resultList, ., iterator, (, ), ;, it, ., hasNext]
[;, for, (, Iterator, it, =, resultList, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {]
[;, it, ., hasNext, (, ), ;, ), {, Result, res, =, (, Result, ), it, ., next, (, )]
[., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Result, res, =, (, Result, ), it]
[;, ), {, Result, res, =, (, Result, ), it, ., next, (, ), ;, System, ., out, ., println]
[., hasNext, (, ), ;, ), {, Result, res, =, (, Result, ), it, ., next, (, ), ;, System]
[;, System, ., out, ., println, (, res, ., object, +, ".", +, res, ., name, +, ": ", +, res]
[;, System, ., out, ., println, (, res, ., object, +, ".", +, res, ., name, +, ": ", +, res]
[., next, (, ), ;, System, ., out, ., println, (, res, ., object, +, ".", +, res, ., name]
[;, if, (, res, ., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=, res, ., avg, ;, }]
[., println, (, res, ., object, +, ".", +, res, ., name, +, ": ", +, res, ., avg, +, "ns"]
[., out, ., println, (, res, ., object, +, ".", +, res, ., name, +, ": ", +, res, ., avg]
[), ;, if, (, res, ., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=, res, ., avg, ;]
[+, "ns", ), ;, if, (, res, ., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=, res, .]
[+, res, ., avg, +, "ns", ), ;, if, (, res, ., object, ., equals, (, "Joda", ), ), {]
[+, ": ", +, res, ., avg, +, "ns", ), ;, if, (, res, ., object, ., equals, (, "Joda", )]
[+, res, ., name, +, ": ", +, res, ., avg, +, "ns", ), ;, if, (, res, ., object, .]
[+, ".", +, res, ., name, +, ": ", +, res, ., avg, +, "ns", ), ;, if, (, res, .]
[., object, +, ".", +, res, ., name, +, ": ", +, res, ., avg, +, "ns", ), ;, if, (]
[+, res, ., name, +, ": ", +, res, ., avg, +, "ns", ), ;, if, (, res, ., object, .]
[+, ": ", +, res, ., avg, +, "ns", ), ;, if, (, res, ., object, ., equals, (, "Joda", )]
[., name, +, ": ", +, res, ., avg, +, "ns", ), ;, if, (, res, ., object, ., equals, (]
[+, res, ., avg, +, "ns", ), ;, if, (, res, ., object, ., equals, (, "Joda", ), ), {]
[+, "ns", ), ;, if, (, res, ., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=, res, .]
[., avg, +, "ns", ), ;, if, (, res, ., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=]
[), ;, if, (, res, ., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=, res, ., avg, ;]
[), {, jodaTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "JISO", )]
[., equals, (, "Joda", ), ), {, jodaTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object]
[., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=, res, ., avg, ;, }, else, if, (, res]
[), ), {, jodaTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "JISO"]
[+=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "JISO", ), ), {, jisoTotal]
[;, }, else, if, (, res, ., object, ., equals, (, "JISO", ), ), {, jisoTotal, +=, res, ., avg]
[., avg, ;, }, else, if, (, res, ., object, ., equals, (, "JISO", ), ), {, jisoTotal, +=, res]
[), {, jisoTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "GCal", )]
[., equals, (, "JISO", ), ), {, jisoTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object]
[., object, ., equals, (, "JISO", ), ), {, jisoTotal, +=, res, ., avg, ;, }, else, if, (, res]
[), ), {, jisoTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "GCal"]
[+=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "GCal", ), ), {, gcalTotal]
[;, }, else, if, (, res, ., object, ., equals, (, "GCal", ), ), {, gcalTotal, +=, res, ., avg]
[., avg, ;, }, else, if, (, res, ., object, ., equals, (, "GCal", ), ), {, gcalTotal, +=, res]
[), {, gcalTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "Date", )]
[., equals, (, "GCal", ), ), {, gcalTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object]
[., object, ., equals, (, "GCal", ), ), {, gcalTotal, +=, res, ., avg, ;, }, else, if, (, res]
[), ), {, gcalTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "Date"]
[+=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "Date", ), ), {, dateTotal]
[;, }, else, if, (, res, ., object, ., equals, (, "Date", ), ), {, dateTotal, +=, res, ., avg]
[., avg, ;, }, else, if, (, res, ., object, ., equals, (, "Date", ), ), {, dateTotal, +=, res]
[), {, dateTotal, +=, res, ., avg, ;, System, ., out, ., println, (, "", ), ;, }, }, System]
[., equals, (, "Date", ), ), {, dateTotal, +=, res, ., avg, ;, System, ., out, ., println, (, ""]
[., object, ., equals, (, "Date", ), ), {, dateTotal, +=, res, ., avg, ;, System, ., out, ., println]
[), ), {, dateTotal, +=, res, ., avg, ;, System, ., out, ., println, (, "", ), ;, }, }]
[+=, res, ., avg, ;, System, ., out, ., println, (, "", ), ;, }, }, System, ., out, .]
[;, System, ., out, ., println, (, "", ), ;, }, }, System, ., out, ., println, (, "Joda: ", +]
[., avg, ;, System, ., out, ., println, (, "", ), ;, }, }, System, ., out, ., println, (]
[;, }, }, System, ., out, ., println, (, "Joda: ", +, jodaTotal, ), ;, System, ., out, ., println, (]
[., println, (, "", ), ;, }, }, System, ., out, ., println, (, "Joda: ", +, jodaTotal, ), ;, System]
[., out, ., println, (, "", ), ;, }, }, System, ., out, ., println, (, "Joda: ", +, jodaTotal, )]
[), ;, }, }, System, ., out, ., println, (, "Joda: ", +, jodaTotal, ), ;, System, ., out, ., println]
[;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println, (, "GCal: ", +]
[., println, (, "Joda: ", +, jodaTotal, ), ;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System]
[., out, ., println, (, "Joda: ", +, jodaTotal, ), ;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, )]
[), ;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println, (, "GCal: "]
[+, jodaTotal, ), ;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println]
[), ;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println, (, "GCal: "]
[;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, ), ;, System, ., out, ., println, (, "Date: ", +]
[., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, ), ;, System]
[., out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, )]
[), ;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, ), ;, System, ., out, ., println, (, "Date: "]
[+, jisoTotal, ), ;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, ), ;, System, ., out, ., println]
[), ;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, ), ;, System, ., out, ., println, (, "Date: "]
[;, System, ., out, ., println, (, "Date: ", +, dateTotal, ), ;, }, private, void, checkJodaConstructor1, (, ), {, int]
[., println, (, "GCal: ", +, gcalTotal, ), ;, System, ., out, ., println, (, "Date: ", +, dateTotal, ), ;, }]
[., out, ., println, (, "GCal: ", +, gcalTotal, ), ;, System, ., out, ., println, (, "Date: ", +, dateTotal, )]
[), ;, System, ., out, ., println, (, "Date: ", +, dateTotal, ), ;, }, private, void, checkJodaConstructor1, (, ), {]
[+, gcalTotal, ), ;, System, ., out, ., println, (, "Date: ", +, dateTotal, ), ;, }, private, void, checkJodaConstructor1, (]
[), ;, System, ., out, ., println, (, "Date: ", +, dateTotal, ), ;, }, private, void, checkJodaConstructor1, (, ), {]
[;, }, private, void, checkJodaConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, GJChronology]
[., println, (, "Date: ", +, dateTotal, ), ;, }, private, void, checkJodaConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;]
[., out, ., println, (, "Date: ", +, dateTotal, ), ;, }, private, void, checkJodaConstructor1, (, ), {, int, COUNT, =]
[), ;, }, private, void, checkJodaConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[+, dateTotal, ), ;, }, private, void, checkJodaConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new]
[), ;, }, private, void, checkJodaConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, int, count, =, 0, ;, for]
[;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++]
[., getInstance, (, ), ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime]
[,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), )]
[;, j, ++, ), {, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (, count]
[<, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if]
[;, j, ++, ), {, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (, count]
[), {, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (, count, ++, <, 0]
[++, ), {, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (, count, ++, <]
[=, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (, count, ++, <, 0, ), {, System]
[;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), ;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }]
[., getInstance, (, ), ), ;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[<, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor1, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor1]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor1, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJISOConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0]
[;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime]
[,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, ), ;, if, (, count, ++]
[;, j, ++, ), {, dt, =, new, DateTime, (, ), ;, if, (, count, ++, <, 0, ), {]
[<, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, ), ;, if, (, count, ++, <, 0]
[;, j, ++, ), {, dt, =, new, DateTime, (, ), ;, if, (, count, ++, <, 0, ), {]
[), {, dt, =, new, DateTime, (, ), ;, if, (, count, ++, <, 0, ), {, System, ., out]
[++, ), {, dt, =, new, DateTime, (, ), ;, if, (, count, ++, <, 0, ), {, System, .]
[=, new, DateTime, (, ), ;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (]
[;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[<, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor1, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor1]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor1, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0]
[;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar]
[,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (, count, ++]
[;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (, count, ++, <, 0, ), {]
[<, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (, count, ++, <, 0]
[;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (, count, ++, <, 0, ), {]
[), {, dt, =, new, GregorianCalendar, (, ), ;, if, (, count, ++, <, 0, ), {, System, ., out]
[++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (, count, ++, <, 0, ), {, System, .]
[=, new, GregorianCalendar, (, ), ;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (]
[;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[<, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor1, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor1]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor1, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0]
[;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date]
[,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, ), ;, if, (, count, ++]
[;, j, ++, ), {, dt, =, new, Date, (, ), ;, if, (, count, ++, <, 0, ), {]
[<, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, ), ;, if, (, count, ++, <, 0]
[;, j, ++, ), {, dt, =, new, Date, (, ), ;, if, (, count, ++, <, 0, ), {]
[), {, dt, =, new, Date, (, ), ;, if, (, count, ++, <, 0, ), {, System, ., out]
[++, ), {, dt, =, new, Date, (, ), ;, if, (, count, ++, <, 0, ), {, System, .]
[=, new, Date, (, ), ;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (]
[;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[<, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaConstructor2, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaConstructor2]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaConstructor2, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJodaConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJodaConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda"]
[., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime]
[,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (]
[;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, if]
[<, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), )]
[;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, if]
[), {, dt, =, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==]
[++, ), {, dt, =, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt]
[=, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor2, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor2]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor2, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJISOConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, 12345L, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO"]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime]
[,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (, dt]
[;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (, dt, ==, null, ), {]
[<, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (, dt, ==, null]
[;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (, dt, ==, null, ), {]
[), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[++, ), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (, dt, ==, null, ), {, System, .]
[=, new, DateTime, (, 12345L, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor2, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor2, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor2]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor2, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalConstructor2, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalConstructor2, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar]
[,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, dt, ., setTime, (]
[;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, dt, ., setTime, (, new, Date, (, 12345L]
[<, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, dt, ., setTime, (, new, Date]
[;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, dt, ., setTime, (, new, Date, (, 12345L]
[), {, dt, =, new, GregorianCalendar, (, ), ;, dt, ., setTime, (, new, Date, (, 12345L, ), ), ;]
[++, ), {, dt, =, new, GregorianCalendar, (, ), ;, dt, ., setTime, (, new, Date, (, 12345L, ), )]
[=, new, GregorianCalendar, (, ), ;, dt, ., setTime, (, new, Date, (, 12345L, ), ), ;, if, (, dt]
[;, dt, ., setTime, (, new, Date, (, 12345L, ), ), ;, if, (, dt, ==, null, ), {, System]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., setTime, (, new, Date, (, 12345L, ), ), ;, if, (, dt, ==, null, ), {, System, ., out]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor2, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor2]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor2, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date]
[,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, 12345L, ), ;, if, (, dt]
[;, j, ++, ), {, dt, =, new, Date, (, 12345L, ), ;, if, (, dt, ==, null, ), {]
[<, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, 12345L, ), ;, if, (, dt, ==, null]
[;, j, ++, ), {, dt, =, new, Date, (, 12345L, ), ;, if, (, dt, ==, null, ), {]
[), {, dt, =, new, Date, (, 12345L, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[++, ), {, dt, =, new, Date, (, 12345L, ), ;, if, (, dt, ==, null, ), {, System, .]
[=, new, Date, (, 12345L, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaConstructor3, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaConstructor3]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaConstructor3, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJodaConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJodaConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;]
[,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, for, (]
[,, 0, ,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i]
[,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0]
[,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i]
[,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE]
[,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda"]
[., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime]
[,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,]
[;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,]
[<, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,]
[;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,]
[), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0]
[++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,]
[=, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, GJChronology, .]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;]
[,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, if, (]
[,, 0, ,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==]
[,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, )]
[,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {, System]
[,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {, System, ., out]
[,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor3, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor3]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor3, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJISOConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, for, (, int, i, =, 0]
[,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, for, (, int, i, =, 0, ;, i]
[,, 0, ,, 0, ,, 0, ,, 0, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE]
[,, 0, ,, 0, ,, 0, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i]
[,, 0, ,, 0, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[,, 0, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO"]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime]
[,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,]
[;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,]
[<, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,]
[;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,]
[), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0]
[++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,]
[=, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, if]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, if, (, dt, ==, null, )]
[,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, if, (, dt, ==, null, ), {, System]
[,, 0, ,, 0, ,, 0, ,, 0, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[,, 0, ,, 0, ,, 0, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println]
[,, 0, ,, 0, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[,, 0, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor3, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor3]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor3, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[,, 10, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal"]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar]
[,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, )]
[;, j, ++, ), {, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt]
[<, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if]
[;, j, ++, ), {, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt]
[), {, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, )]
[++, ), {, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null]
[=, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {, System, .]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[,, 1, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor3, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor3]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor3, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date]
[,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, 1972, ,, 10, ,, 1, )]
[;, j, ++, ), {, dt, =, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt]
[<, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if]
[;, j, ++, ), {, dt, =, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt]
[), {, dt, =, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, )]
[++, ), {, dt, =, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null]
[=, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {, System, .]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[,, 1, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJodaGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJodaGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda"]
[., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, )]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, )]
[), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {, System, .]
[++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {, System]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getYear, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJISOGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, )]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, )]
[), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {, System, .]
[++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {, System]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getYear, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, )]
[;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if]
[;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val]
[), {, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, ==, 0, )]
[++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, ==, 0]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., YEAR, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetYear, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, )]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, )]
[), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {, System, .]
[++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {, System]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getYear, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetMonth, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetMonth]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetMonth, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJodaGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJodaGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda"]
[., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, )]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, )]
[), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {, System, .]
[++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {, System]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetMonth, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetMonth]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetMonth, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJISOGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, )]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, )]
[), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {, System, .]
[++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {, System]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetMonth, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetMonth]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetMonth, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, )]
[;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, ), ;, if, (, val]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, ), ;, if]
[;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, ), ;, if, (, val]
[), {, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, ), ;, if, (, val, ==, 0, )]
[++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, ), ;, if, (, val, ==, 0]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., get, (, GregorianCalendar, ., MONTH, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., MONTH, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetMonth, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetMonth, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetMonth]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetMonth, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateGetMonth, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateGetMonth, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonth, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getMonth, (, ), ;, if, (, val, ==, 0, )]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonth, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getMonth, (, ), ;, if, (, val, ==, 0, )]
[), {, int, val, =, dt, ., getMonth, (, ), ;, if, (, val, ==, 0, ), {, System, .]
[++, ), {, int, val, =, dt, ., getMonth, (, ), ;, if, (, val, ==, 0, ), {, System]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getMonth, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetDay, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetDay]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetDay, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJodaGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJodaGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda"]
[., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, )]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, )]
[), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {, System, .]
[++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {, System]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetDay, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetDay]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetDay, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJISOGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, )]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, )]
[), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {, System, .]
[++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {, System]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetDay, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetDay]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetDay, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, )]
[;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (, val]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if]
[;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (, val]
[), {, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (, val, ==, 0, )]
[++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (, val, ==, 0]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., DAY_OF_MONTH, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetDay, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetDay, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetDay]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetDay, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateGetDay, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateGetDay, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDate, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getDate, (, ), ;, if, (, val, ==, 0, )]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDate, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getDate, (, ), ;, if, (, val, ==, 0, )]
[), {, int, val, =, dt, ., getDate, (, ), ;, if, (, val, ==, 0, ), {, System, .]
[++, ), {, int, val, =, dt, ., getDate, (, ), ;, if, (, val, ==, 0, ), {, System]
[;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getDate, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJodaGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJodaGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda"]
[., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1]
[), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {, System]
[++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {]
[;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise"]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJISOGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1]
[), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {, System]
[++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {]
[;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise"]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, )]
[;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, val]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if]
[;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, val]
[), {, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, val, ==, -, 1]
[++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, val, ==, -]
[;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, val, ==, -, 1, ), {, System, ., out, .]
[), ;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }]
[., HOUR_OF_DAY, ), ;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetHour, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateGetHour, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateGetHour, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt]
[,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (]
[;, j, ++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (, val, ==, -, 1]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (, val, ==]
[;, j, ++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (, val, ==, -, 1]
[), {, int, val, =, dt, ., getHours, (, ), ;, if, (, val, ==, -, 1, ), {, System]
[++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (, val, ==, -, 1, ), {]
[;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., getHours, (, ), ;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise"]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetYear, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJodaSetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[), ;, }, }, private, void, checkJodaSetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda"]
[., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (]
[,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==]
[;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System]
[<, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, )]
[;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System]
[), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, .]
[++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetYear, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOSetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[), ;, }, }, private, void, checkJISOSetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (]
[,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==]
[;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System]
[<, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, )]
[;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System]
[), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, .]
[++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalSetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalSetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;]
[;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (, dt, ==]
[<, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (]
[;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (, dt, ==]
[), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (, dt, ==, null, ), {]
[++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (, dt, ==, null, )]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[,, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;]
[., YEAR, ,, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetYear, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateSetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateSetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (]
[,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==]
[;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System]
[<, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, )]
[;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System]
[), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, .]
[++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetGetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetGetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetGetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJodaSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJodaSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda"]
[., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, dt, .]
[,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, dt]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972]
[;, j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val]
[<, COUNT, ;, j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;]
[;, j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val]
[), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt, .]
[++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt]
[=, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, )]
[;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {, System, ., out]
[., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0]
[., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if]
[), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {, System, .]
[;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getYear, (, ), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[<, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetGetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetGetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetGetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJISOSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, dt, .]
[,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, dt]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972]
[;, j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val]
[<, COUNT, ;, j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;]
[;, j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val]
[), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt, .]
[++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt]
[=, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, )]
[;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {, System, ., out]
[., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0]
[., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if]
[), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {, System, .]
[;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getYear, (, ), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[<, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetGetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetGetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetGetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;]
[;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, int, val, =, dt]
[<, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, int, val]
[;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, int, val, =, dt]
[), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, int, val, =, dt, ., get, (]
[++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, int, val, =, dt, ., get]
[;, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, <, 0, ), {]
[., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR]
[,, 1972, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, <]
[., YEAR, ,, 1972, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (]
[), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, <, 0, )]
[;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, <, 0, ), {, System, ., out, ., println]
[), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., YEAR, ), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[<, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetGetYear, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetGetYear]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetGetYear, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (]
[,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, int, val, =, dt]
[;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, int, val, =, dt, ., getYear, (, )]
[<, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, int, val, =, dt, ., getYear]
[;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, int, val, =, dt, ., getYear, (, )]
[), {, dt, ., setYear, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (]
[++, ), {, dt, ., setYear, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if]
[;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {, System, ., out]
[., setYear, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0]
[), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {, System, .]
[;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getYear, (, ), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[<, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJodaSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[), ;, }, }, private, void, checkJodaSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda"]
[., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (]
[,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==]
[;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System]
[<, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, )]
[;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System]
[), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, .]
[++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[), ;, }, }, private, void, checkJISOSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (]
[,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==]
[;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System]
[<, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, )]
[;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System]
[), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, .]
[++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;]
[;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (, dt, ==]
[<, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (]
[;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (, dt, ==]
[), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (, dt, ==, null, ), {]
[++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (, dt, ==, null, )]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[,, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;]
[., HOUR_OF_DAY, ,, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetHour, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateSetHour, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateSetHour, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours, (]
[,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, if, (, dt, ==]
[;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, if, (, dt, ==, null, ), {, System]
[<, COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, if, (, dt, ==, null, )]
[;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, if, (, dt, ==, null, ), {, System]
[), {, dt, ., setHours, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, .]
[++, ), {, dt, ., setHours, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., setHours, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetGetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetGetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetGetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJodaSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[), ;, }, }, private, void, checkJodaSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda"]
[., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (]
[,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt]
[;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, )]
[<, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay]
[;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, )]
[), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if]
[;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null]
[), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {, System, .]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetGetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetGetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetGetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[), ;, }, }, private, void, checkJISOSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (]
[,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt]
[;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, )]
[<, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay]
[;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, )]
[), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if]
[;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null]
[), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {, System, .]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetGetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetGetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetGetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;]
[;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, int, val, =, dt]
[<, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, int, val]
[;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, int, val, =, dt]
[), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, int, val, =, dt, ., get, (]
[++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, int, val, =, dt, ., get]
[;, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, dt, ==, null, ), {]
[., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY]
[,, 13, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, dt, ==]
[., HOUR_OF_DAY, ,, 13, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (]
[), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, dt, ==, null, )]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., HOUR_OF_DAY, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetGetHour, (, ), {, int, COUNT, =, COUNT_FAST]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetGetHour, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetGetHour]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetGetHour, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateSetGetHour, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateSetGetHour, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours, (]
[,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, int, val, =, dt]
[;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, int, val, =, dt, ., getHours, (, )]
[<, COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, int, val, =, dt, ., getHours]
[;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, int, val, =, dt, ., getHours, (, )]
[), {, dt, ., setHours, (, 13, ), ;, int, val, =, dt, ., getHours, (, ), ;, if, (]
[++, ), {, dt, ., setHours, (, 13, ), ;, int, val, =, dt, ., getHours, (, ), ;, if]
[;, int, val, =, dt, ., getHours, (, ), ;, if, (, dt, ==, null, ), {, System, ., out]
[., setHours, (, 13, ), ;, int, val, =, dt, ., getHours, (, ), ;, if, (, dt, ==, null]
[), ;, int, val, =, dt, ., getHours, (, ), ;, if, (, dt, ==, null, ), {, System, .]
[;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., getHours, (, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", )]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaToString, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaToString, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaToString]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaToString, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJodaToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJodaToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern]
[;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <]
[), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i]
[., getInstance, (, ), ), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda"]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String, str, =, dt]
[,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String, str, =]
[;, j, <, COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if]
[;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null]
[<, COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str]
[;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null]
[), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {, System]
[++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {]
[;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOToString, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOToString, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOToString]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOToString, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkJISOToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, }, private, void, checkJISOToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime]
[;, DateTime, dt, =, new, DateTime, (, ), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for]
[;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO"]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String, str, =, dt]
[,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String, str, =]
[;, j, <, COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if]
[;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null]
[<, COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str]
[;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null]
[), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {, System]
[++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {]
[;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalToString, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalToString, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalToString]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalToString, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkGCalToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[), ;, }, }, private, void, checkGCalToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new]
[,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =]
[;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str]
[;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format]
[<, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf]
[;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format]
[), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt, .]
[++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt]
[;, String, str, =, sdf, ., format, (, dt, ., getTime, (, ), ), ;, if, (, str, ==, null]
[), ;, String, str, =, sdf, ., format, (, dt, ., getTime, (, ), ), ;, if, (, str, ==]
[;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., format, (, dt, ., getTime, (, ), ), ;, if, (, str, ==, null, ), {, System, ., out]
[), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[., getTime, (, ), ), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateToString, (, ), {, int, COUNT, =, COUNT_SLOW]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateToString, (, )]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateToString]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateToString, (, ), {, int, COUNT, =]
[;, }, }, private, void, checkDateToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date, (]
[), ;, }, }, private, void, checkDateToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j]
[;, i, ++, ), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j]
[<, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j, =, 0]
[;, i, ++, ), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j]
[), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[++, ), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new]
[,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =]
[;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str]
[;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format]
[<, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf]
[;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format]
[), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt, )]
[++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt]
[;, String, str, =, sdf, ., format, (, dt, ), ;, if, (, str, ==, null, ), {, System, .]
[), ;, String, str, =, sdf, ., format, (, dt, ), ;, if, (, str, ==, null, ), {, System]
[;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end]
[., format, (, dt, ), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise"]
[), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;]
[), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }]
[;, }, }, end, (, COUNT, ), ;, }, }, private, void, start, (, String, str1, ,, String, str2, )]
[., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, start, (, String]
[., out, ., println, (, "Anti optimise", ), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, start]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, start, (, String, str1, ,, String, str2]
[;, }, }, private, void, start, (, String, str1, ,, String, str2, ), {, result, =, (, Result, ), results]
[), ;, }, }, private, void, start, (, String, str1, ,, String, str2, ), {, result, =, (, Result, )]
[=, (, Result, ), results, ., get, (, str1, +, str2, ), ;, if, (, result, ==, null, ), {]
[;, if, (, result, ==, null, ), {, result, =, new, Result, (, ), ;, result, ., object, =, str1]
[;, if, (, result, ==, null, ), {, result, =, new, Result, (, ), ;, result, ., object, =, str1]
[., get, (, str1, +, str2, ), ;, if, (, result, ==, null, ), {, result, =, new, Result, (]
[), ;, if, (, result, ==, null, ), {, result, =, new, Result, (, ), ;, result, ., object, =]
[+, str2, ), ;, if, (, result, ==, null, ), {, result, =, new, Result, (, ), ;, result, .]
[), ;, if, (, result, ==, null, ), {, result, =, new, Result, (, ), ;, result, ., object, =]
[), {, result, =, new, Result, (, ), ;, result, ., object, =, str1, ;, result, ., name, =, str2]
[==, null, ), {, result, =, new, Result, (, ), ;, result, ., object, =, str1, ;, result, ., name]
[), {, result, =, new, Result, (, ), ;, result, ., object, =, str1, ;, result, ., name, =, str2]
[=, new, Result, (, ), ;, result, ., object, =, str1, ;, result, ., name, =, str2, ;, results, .]
[;, result, ., object, =, str1, ;, result, ., name, =, str2, ;, results, ., put, (, str1, +, str2]
[=, str1, ;, result, ., name, =, str2, ;, results, ., put, (, str1, +, str2, ,, result, ), ;]
[., object, =, str1, ;, result, ., name, =, str2, ;, results, ., put, (, str1, +, str2, ,, result]
[;, result, ., name, =, str2, ;, results, ., put, (, str1, +, str2, ,, result, ), ;, resultList, .]
[=, str2, ;, results, ., put, (, str1, +, str2, ,, result, ), ;, resultList, ., add, (, result, )]
[., name, =, str2, ;, results, ., put, (, str1, +, str2, ,, result, ), ;, resultList, ., add, (]
[;, results, ., put, (, str1, +, str2, ,, result, ), ;, resultList, ., add, (, result, ), ;, }]
[;, resultList, ., add, (, result, ), ;, }, start, =, System, ., currentTimeMillis, (, ), ;, }, private, void]
[., put, (, str1, +, str2, ,, result, ), ;, resultList, ., add, (, result, ), ;, }, start, =]
[,, result, ), ;, resultList, ., add, (, result, ), ;, }, start, =, System, ., currentTimeMillis, (, ), ;]
[+, str2, ,, result, ), ;, resultList, ., add, (, result, ), ;, }, start, =, System, ., currentTimeMillis, (]
[,, result, ), ;, resultList, ., add, (, result, ), ;, }, start, =, System, ., currentTimeMillis, (, ), ;]
[), ;, resultList, ., add, (, result, ), ;, }, start, =, System, ., currentTimeMillis, (, ), ;, }, private]
[;, }, start, =, System, ., currentTimeMillis, (, ), ;, }, private, void, end, (, int, count, ), {, end]
[., add, (, result, ), ;, }, start, =, System, ., currentTimeMillis, (, ), ;, }, private, void, end, (]
[), ;, }, start, =, System, ., currentTimeMillis, (, ), ;, }, private, void, end, (, int, count, ), {]
[=, System, ., currentTimeMillis, (, ), ;, }, private, void, end, (, int, count, ), {, end, =, System, .]
[;, }, private, void, end, (, int, count, ), {, end, =, System, ., currentTimeMillis, (, ), ;, long, time]
[., currentTimeMillis, (, ), ;, }, private, void, end, (, int, count, ), {, end, =, System, ., currentTimeMillis, (]
[=, System, ., currentTimeMillis, (, ), ;, long, time, =, (, end, -, start, ), ;, result, ., time, =]
[;, long, time, =, (, end, -, start, ), ;, result, ., time, =, result, ., time, +, time, ;]
[., currentTimeMillis, (, ), ;, long, time, =, (, end, -, start, ), ;, result, ., time, =, result, .]
[;, result, ., time, =, result, ., time, +, time, ;, result, ., runs, =, result, ., runs, +, count]
[), ;, result, ., time, =, result, ., time, +, time, ;, result, ., runs, =, result, ., runs, +]
[-, start, ), ;, result, ., time, =, result, ., time, +, time, ;, result, ., runs, =, result, .]
[), ;, result, ., time, =, result, ., time, +, time, ;, result, ., runs, =, result, ., runs, +]
[=, result, ., time, +, time, ;, result, ., runs, =, result, ., runs, +, count, ;, result, ., avg]
[., time, =, result, ., time, +, time, ;, result, ., runs, =, result, ., runs, +, count, ;, result]
[;, result, ., runs, =, result, ., runs, +, count, ;, result, ., avg, =, (, result, ., time, *]
[+, time, ;, result, ., runs, =, result, ., runs, +, count, ;, result, ., avg, =, (, result, .]
[., time, +, time, ;, result, ., runs, =, result, ., runs, +, count, ;, result, ., avg, =, (]
[;, result, ., runs, =, result, ., runs, +, count, ;, result, ., avg, =, (, result, ., time, *]
[=, result, ., runs, +, count, ;, result, ., avg, =, (, result, ., time, *, 1000000, ), /, result]
[., runs, =, result, ., runs, +, count, ;, result, ., avg, =, (, result, ., time, *, 1000000, )]
[;, result, ., avg, =, (, result, ., time, *, 1000000, ), /, result, ., runs, ;, System, ., out]
[+, count, ;, result, ., avg, =, (, result, ., time, *, 1000000, ), /, result, ., runs, ;, System]
[., runs, +, count, ;, result, ., avg, =, (, result, ., time, *, 1000000, ), /, result, ., runs]
[;, result, ., avg, =, (, result, ., time, *, 1000000, ), /, result, ., runs, ;, System, ., out]
[=, (, result, ., time, *, 1000000, ), /, result, ., runs, ;, System, ., out, ., print, (, "."]
[., avg, =, (, result, ., time, *, 1000000, ), /, result, ., runs, ;, System, ., out, ., print]
[;, System, ., out, ., print, (, ".", ), ;, }, }]
[/, result, ., runs, ;, System, ., out, ., print, (, ".", ), ;, }, }]
[), /, result, ., runs, ;, System, ., out, ., print, (, ".", ), ;, }, }]
[*, 1000000, ), /, result, ., runs, ;, System, ., out, ., print, (, ".", ), ;, }, }]
[., time, *, 1000000, ), /, result, ., runs, ;, System, ., out, ., print, (, ".", ), ;, }]
[), /, result, ., runs, ;, System, ., out, ., print, (, ".", ), ;, }, }]
[;, System, ., out, ., print, (, ".", ), ;, }, }]
[., runs, ;, System, ., out, ., print, (, ".", ), ;, }, }]
[;, }, }]
[., print, (, ".", ), ;, }, }]
[., out, ., print, (, ".", ), ;, }, }]
[), ;, }, }]
