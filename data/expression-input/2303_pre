[public, SymmetricGaussIntegrator, (, double, [, ], points, ,, double, [, ], weights, ), throws, NonMonotonicSequenceException, ,, DimensionMismatchException, {, super, (]
[(, double, [, ], points, ,, double, [, ], weights, ), throws, NonMonotonicSequenceException, ,, DimensionMismatchException, {, super, (, points, ,]
[public, SymmetricGaussIntegrator, (, Pair, <, double, [, ], ,, double, [, ], >, pointsAndWeights, ), throws, NonMonotonicSequenceException, {, this, (]
[public, SymmetricGaussIntegrator, (, Pair, <, double, [, ], ,, double, [, ], >, pointsAndWeights, ), throws, NonMonotonicSequenceException, {, this, (]
[[, ], ,, double, [, ], >, pointsAndWeights, ), throws, NonMonotonicSequenceException, {, this, (, pointsAndWeights, ., getFirst, (, ), ,]
[[, ], ,, double, [, ], >, pointsAndWeights, ), throws, NonMonotonicSequenceException, {, this, (, pointsAndWeights, ., getFirst, (, ), ,]
[getSecond, (, ), ), ;, }, @, Override, public, double, integrate, (, UnivariateFunction, f, ), {, final, int, ruleLength, =]
[@, Override, public, double, integrate, (, UnivariateFunction, f, ), {, final, int, ruleLength, =, getNumberOfPoints, (, ), ;, if, (]
[@, Override, public, double, integrate, (, UnivariateFunction, f, ), {, final, int, ruleLength, =, getNumberOfPoints, (, ), ;, if, (]
[public, double, integrate, (, UnivariateFunction, f, ), {, final, int, ruleLength, =, getNumberOfPoints, (, ), ;, if, (, ruleLength, ==]
[UnivariateFunction, f, ), {, final, int, ruleLength, =, getNumberOfPoints, (, ), ;, if, (, ruleLength, ==, 1, ), {, return]
[UnivariateFunction, f, ), {, final, int, ruleLength, =, getNumberOfPoints, (, ), ;, if, (, ruleLength, ==, 1, ), {, return]
[), {, final, int, ruleLength, =, getNumberOfPoints, (, ), ;, if, (, ruleLength, ==, 1, ), {, return, getWeight, (]
[int, ruleLength, =, getNumberOfPoints, (, ), ;, if, (, ruleLength, ==, 1, ), {, return, getWeight, (, 0, ), *]
[int, ruleLength, =, getNumberOfPoints, (, ), ;, if, (, ruleLength, ==, 1, ), {, return, getWeight, (, 0, ), *]
[(, ), ;, if, (, ruleLength, ==, 1, ), {, return, getWeight, (, 0, ), *, f, ., value, (]
[), {, return, getWeight, (, 0, ), *, f, ., value, (, 0d, ), ;, }, final, int, iMax, =]
[), {, return, getWeight, (, 0, ), *, f, ., value, (, 0d, ), ;, }, final, int, iMax, =]
[return, getWeight, (, 0, ), *, f, ., value, (, 0d, ), ;, }, final, int, iMax, =, ruleLength, /]
[*, f, ., value, (, 0d, ), ;, }, final, int, iMax, =, ruleLength, /, 2, ;, double, s, =]
[0d, ), ;, }, final, int, iMax, =, ruleLength, /, 2, ;, double, s, =, 0, ;, double, c, =]
[=, ruleLength, /, 2, ;, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =]
[/, 2, ;, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;]
[/, 2, ;, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;]
[;, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;]
[s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;]
[;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, final, double, p, =]
[(, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, final, double, p, =, getPoint, (]
[<, iMax, ;, i, ++, ), {, final, double, p, =, getPoint, (, i, ), ;, final, double, w, =]
[;, i, ++, ), {, final, double, p, =, getPoint, (, i, ), ;, final, double, w, =, getWeight, (]
[p, =, getPoint, (, i, ), ;, final, double, w, =, getWeight, (, i, ), ;, final, double, f1, =]
[p, =, getPoint, (, i, ), ;, final, double, w, =, getWeight, (, i, ), ;, final, double, f1, =]
[i, ), ;, final, double, w, =, getWeight, (, i, ), ;, final, double, f1, =, f, ., value, (]
[getWeight, (, i, ), ;, final, double, f1, =, f, ., value, (, p, ), ;, final, double, f2, =]
[getWeight, (, i, ), ;, final, double, f1, =, f, ., value, (, p, ), ;, final, double, f2, =]
[;, final, double, f1, =, f, ., value, (, p, ), ;, final, double, f2, =, f, ., value, (]
[final, double, f1, =, f, ., value, (, p, ), ;, final, double, f2, =, f, ., value, (, -]
[(, p, ), ;, final, double, f2, =, f, ., value, (, -, p, ), ;, final, double, y, =]
[(, p, ), ;, final, double, f2, =, f, ., value, (, -, p, ), ;, final, double, y, =]
[(, p, ), ;, final, double, f2, =, f, ., value, (, -, p, ), ;, final, double, y, =]
[), ;, final, double, f2, =, f, ., value, (, -, p, ), ;, final, double, y, =, w, *]
[;, final, double, f2, =, f, ., value, (, -, p, ), ;, final, double, y, =, w, *, (]
[;, final, double, f2, =, f, ., value, (, -, p, ), ;, final, double, y, =, w, *, (]
[double, f2, =, f, ., value, (, -, p, ), ;, final, double, y, =, w, *, (, f1, +]
[f, ., value, (, -, p, ), ;, final, double, y, =, w, *, (, f1, +, f2, ), -]
[), ;, final, double, y, =, w, *, (, f1, +, f2, ), -, c, ;, final, double, t, =]
[), ;, final, double, y, =, w, *, (, f1, +, f2, ), -, c, ;, final, double, t, =]
[final, double, y, =, w, *, (, f1, +, f2, ), -, c, ;, final, double, t, =, s, +]
[y, =, w, *, (, f1, +, f2, ), -, c, ;, final, double, t, =, s, +, y, ;]
[w, *, (, f1, +, f2, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =]
[w, *, (, f1, +, f2, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =]
[*, (, f1, +, f2, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (]
[*, (, f1, +, f2, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (]
[f1, +, f2, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (, t, -]
[), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -]
[c, ;, final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -, y, ;]
[final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -, y, ;, s, =]
[+, y, ;, c, =, (, t, -, s, ), -, y, ;, s, =, t, ;, }, if, (]
[+, y, ;, c, =, (, t, -, s, ), -, y, ;, s, =, t, ;, }, if, (]
[+, y, ;, c, =, (, t, -, s, ), -, y, ;, s, =, t, ;, }, if, (]
[;, c, =, (, t, -, s, ), -, y, ;, s, =, t, ;, }, if, (, ruleLength, %]
[=, (, t, -, s, ), -, y, ;, s, =, t, ;, }, if, (, ruleLength, %, 2, !=]
[y, ;, s, =, t, ;, }, if, (, ruleLength, %, 2, !=, 0, ), {, final, double, w, =]
[s, =, t, ;, }, if, (, ruleLength, %, 2, !=, 0, ), {, final, double, w, =, getWeight, (]
[ruleLength, %, 2, !=, 0, ), {, final, double, w, =, getWeight, (, iMax, ), ;, final, double, y, =]
[ruleLength, %, 2, !=, 0, ), {, final, double, w, =, getWeight, (, iMax, ), ;, final, double, y, =]
[ruleLength, %, 2, !=, 0, ), {, final, double, w, =, getWeight, (, iMax, ), ;, final, double, y, =]
[2, !=, 0, ), {, final, double, w, =, getWeight, (, iMax, ), ;, final, double, y, =, w, *]
[2, !=, 0, ), {, final, double, w, =, getWeight, (, iMax, ), ;, final, double, y, =, w, *]
[{, final, double, w, =, getWeight, (, iMax, ), ;, final, double, y, =, w, *, f, ., value, (]
[w, =, getWeight, (, iMax, ), ;, final, double, y, =, w, *, f, ., value, (, 0d, ), -]
[;, final, double, y, =, w, *, f, ., value, (, 0d, ), -, c, ;, final, double, t, =]
[;, final, double, y, =, w, *, f, ., value, (, 0d, ), -, c, ;, final, double, t, =]
[double, y, =, w, *, f, ., value, (, 0d, ), -, c, ;, final, double, t, =, s, +]
[=, w, *, f, ., value, (, 0d, ), -, c, ;, final, double, t, =, s, +, y, ;]
[*, f, ., value, (, 0d, ), -, c, ;, final, double, t, =, s, +, y, ;, s, =]
[(, 0d, ), -, c, ;, final, double, t, =, s, +, y, ;, s, =, t, ;, }, return]
