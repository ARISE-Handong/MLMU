[), {, case, Token, ., ASSIGN, :, return, tryFoldAssignment, (, subtree, ), ;, case, Token, ., COMMA, :, return, tryFoldComma]
[., getType, (, ), ), {, case, Token, ., ASSIGN, :, return, tryFoldAssignment, (, subtree, ), ;, case, Token, .]
[:, return, tryFoldAssignment, (, subtree, ), ;, case, Token, ., COMMA, :, return, tryFoldComma, (, subtree, ), ;, case, Token]
[., ASSIGN, :, return, tryFoldAssignment, (, subtree, ), ;, case, Token, ., COMMA, :, return, tryFoldComma, (, subtree, ), ;]
[;, case, Token, ., COMMA, :, return, tryFoldComma, (, subtree, ), ;, case, Token, ., SCRIPT, :, case, Token, .]
[), ;, case, Token, ., COMMA, :, return, tryFoldComma, (, subtree, ), ;, case, Token, ., SCRIPT, :, case, Token]
[:, return, tryFoldComma, (, subtree, ), ;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, return, tryOptimizeBlock, (]
[., COMMA, :, return, tryFoldComma, (, subtree, ), ;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, return]
[;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, return, tryOptimizeBlock, (, subtree, ), ;, case, Token, .]
[), ;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, return, tryOptimizeBlock, (, subtree, ), ;, case, Token]
[:, case, Token, ., BLOCK, :, return, tryOptimizeBlock, (, subtree, ), ;, case, Token, ., EXPR_RESULT, :, subtree, =, tryFoldExpr]
[., SCRIPT, :, case, Token, ., BLOCK, :, return, tryOptimizeBlock, (, subtree, ), ;, case, Token, ., EXPR_RESULT, :, subtree]
[:, return, tryOptimizeBlock, (, subtree, ), ;, case, Token, ., EXPR_RESULT, :, subtree, =, tryFoldExpr, (, subtree, ), ;, return]
[., BLOCK, :, return, tryOptimizeBlock, (, subtree, ), ;, case, Token, ., EXPR_RESULT, :, subtree, =, tryFoldExpr, (, subtree, )]
[;, case, Token, ., EXPR_RESULT, :, subtree, =, tryFoldExpr, (, subtree, ), ;, return, subtree, ;, case, Token, ., HOOK]
[), ;, case, Token, ., EXPR_RESULT, :, subtree, =, tryFoldExpr, (, subtree, ), ;, return, subtree, ;, case, Token, .]
[:, subtree, =, tryFoldExpr, (, subtree, ), ;, return, subtree, ;, case, Token, ., HOOK, :, return, tryFoldHook, (, subtree]
[., EXPR_RESULT, :, subtree, =, tryFoldExpr, (, subtree, ), ;, return, subtree, ;, case, Token, ., HOOK, :, return, tryFoldHook]
[=, tryFoldExpr, (, subtree, ), ;, return, subtree, ;, case, Token, ., HOOK, :, return, tryFoldHook, (, subtree, ), ;]
[;, return, subtree, ;, case, Token, ., HOOK, :, return, tryFoldHook, (, subtree, ), ;, case, Token, ., SWITCH, :]
[), ;, return, subtree, ;, case, Token, ., HOOK, :, return, tryFoldHook, (, subtree, ), ;, case, Token, ., SWITCH]
[;, case, Token, ., HOOK, :, return, tryFoldHook, (, subtree, ), ;, case, Token, ., SWITCH, :, return, tryOptimizeSwitch, (]
[:, return, tryFoldHook, (, subtree, ), ;, case, Token, ., SWITCH, :, return, tryOptimizeSwitch, (, subtree, ), ;, case, Token]
[., HOOK, :, return, tryFoldHook, (, subtree, ), ;, case, Token, ., SWITCH, :, return, tryOptimizeSwitch, (, subtree, ), ;]
[;, case, Token, ., SWITCH, :, return, tryOptimizeSwitch, (, subtree, ), ;, case, Token, ., IF, :, return, tryFoldIf, (]
[), ;, case, Token, ., SWITCH, :, return, tryOptimizeSwitch, (, subtree, ), ;, case, Token, ., IF, :, return, tryFoldIf]
[:, return, tryOptimizeSwitch, (, subtree, ), ;, case, Token, ., IF, :, return, tryFoldIf, (, subtree, ), ;, case, Token]
[., SWITCH, :, return, tryOptimizeSwitch, (, subtree, ), ;, case, Token, ., IF, :, return, tryFoldIf, (, subtree, ), ;]
[;, case, Token, ., IF, :, return, tryFoldIf, (, subtree, ), ;, case, Token, ., WHILE, :, return, tryFoldWhile, (]
[), ;, case, Token, ., IF, :, return, tryFoldIf, (, subtree, ), ;, case, Token, ., WHILE, :, return, tryFoldWhile]
[:, return, tryFoldIf, (, subtree, ), ;, case, Token, ., WHILE, :, return, tryFoldWhile, (, subtree, ), ;, case, Token]
[., IF, :, return, tryFoldIf, (, subtree, ), ;, case, Token, ., WHILE, :, return, tryFoldWhile, (, subtree, ), ;]
[;, case, Token, ., WHILE, :, return, tryFoldWhile, (, subtree, ), ;, case, Token, ., FOR, :, {, Node, condition]
[), ;, case, Token, ., WHILE, :, return, tryFoldWhile, (, subtree, ), ;, case, Token, ., FOR, :, {, Node]
[:, return, tryFoldWhile, (, subtree, ), ;, case, Token, ., FOR, :, {, Node, condition, =, NodeUtil, ., getConditionExpression, (]
[., WHILE, :, return, tryFoldWhile, (, subtree, ), ;, case, Token, ., FOR, :, {, Node, condition, =, NodeUtil, .]
[;, case, Token, ., FOR, :, {, Node, condition, =, NodeUtil, ., getConditionExpression, (, subtree, ), ;, if, (, condition]
[), ;, case, Token, ., FOR, :, {, Node, condition, =, NodeUtil, ., getConditionExpression, (, subtree, ), ;, if, (]
[:, {, Node, condition, =, NodeUtil, ., getConditionExpression, (, subtree, ), ;, if, (, condition, !=, null, ), {, tryFoldForCondition]
[., FOR, :, {, Node, condition, =, NodeUtil, ., getConditionExpression, (, subtree, ), ;, if, (, condition, !=, null, )]
[;, if, (, condition, !=, null, ), {, tryFoldForCondition, (, condition, ), ;, }, }, return, tryFoldFor, (, subtree, )]
[., getConditionExpression, (, subtree, ), ;, if, (, condition, !=, null, ), {, tryFoldForCondition, (, condition, ), ;, }, }]
[), ;, if, (, condition, !=, null, ), {, tryFoldForCondition, (, condition, ), ;, }, }, return, tryFoldFor, (, subtree]
[), {, tryFoldForCondition, (, condition, ), ;, }, }, return, tryFoldFor, (, subtree, ), ;, case, Token, ., DO, :]
[!=, null, ), {, tryFoldForCondition, (, condition, ), ;, }, }, return, tryFoldFor, (, subtree, ), ;, case, Token, .]
[), {, tryFoldForCondition, (, condition, ), ;, }, }, return, tryFoldFor, (, subtree, ), ;, case, Token, ., DO, :]
[;, }, }, return, tryFoldFor, (, subtree, ), ;, case, Token, ., DO, :, return, tryFoldDo, (, subtree, ), ;]
[), ;, }, }, return, tryFoldFor, (, subtree, ), ;, case, Token, ., DO, :, return, tryFoldDo, (, subtree, )]
[;, case, Token, ., DO, :, return, tryFoldDo, (, subtree, ), ;, case, Token, ., TRY, :, return, tryFoldTry, (]
[), ;, case, Token, ., DO, :, return, tryFoldDo, (, subtree, ), ;, case, Token, ., TRY, :, return, tryFoldTry]
[:, return, tryFoldDo, (, subtree, ), ;, case, Token, ., TRY, :, return, tryFoldTry, (, subtree, ), ;, default, :]
[., DO, :, return, tryFoldDo, (, subtree, ), ;, case, Token, ., TRY, :, return, tryFoldTry, (, subtree, ), ;]
[;, case, Token, ., TRY, :, return, tryFoldTry, (, subtree, ), ;, default, :, return, subtree, ;, }, }, private]
[), ;, case, Token, ., TRY, :, return, tryFoldTry, (, subtree, ), ;, default, :, return, subtree, ;, }, }]
[:, return, tryFoldTry, (, subtree, ), ;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTry, (, Node, n]
[., TRY, :, return, tryFoldTry, (, subtree, ), ;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTry, (]
[;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTry, (, Node, n, ), {, Preconditions, ., checkState, (]
[), ;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTry, (, Node, n, ), {, Preconditions, ., checkState]
[;, }, }, private, Node, tryFoldTry, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isTry, (, )]
[;, Node, body, =, n, ., getFirstChild, (, ), ;, Node, catchBlock, =, body, ., getNext, (, ), ;, Node]
[., checkState, (, n, ., isTry, (, ), ), ;, Node, body, =, n, ., getFirstChild, (, ), ;, Node]
[), ;, Node, body, =, n, ., getFirstChild, (, ), ;, Node, catchBlock, =, body, ., getNext, (, ), ;]
[., isTry, (, ), ), ;, Node, body, =, n, ., getFirstChild, (, ), ;, Node, catchBlock, =, body, .]
[;, Node, catchBlock, =, body, ., getNext, (, ), ;, Node, finallyBlock, =, catchBlock, ., getNext, (, ), ;, if]
[., getFirstChild, (, ), ;, Node, catchBlock, =, body, ., getNext, (, ), ;, Node, finallyBlock, =, catchBlock, ., getNext]
[;, Node, finallyBlock, =, catchBlock, ., getNext, (, ), ;, if, (, !, catchBlock, ., hasChildren, (, ), &&, (]
[., getNext, (, ), ;, Node, finallyBlock, =, catchBlock, ., getNext, (, ), ;, if, (, !, catchBlock, ., hasChildren]
[;, if, (, !, catchBlock, ., hasChildren, (, ), &&, (, finallyBlock, ==, null, ||, !, finallyBlock, ., hasChildren, (]
[., getNext, (, ), ;, if, (, !, catchBlock, ., hasChildren, (, ), &&, (, finallyBlock, ==, null, ||, !]
[), {, n, ., removeChild, (, body, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, body]
[&&, (, finallyBlock, ==, null, ||, !, finallyBlock, ., hasChildren, (, ), ), ), {, n, ., removeChild, (, body]
[&&, (, finallyBlock, ==, null, ||, !, finallyBlock, ., hasChildren, (, ), ), ), {, n, ., removeChild, (, body]
[., hasChildren, (, ), &&, (, finallyBlock, ==, null, ||, !, finallyBlock, ., hasChildren, (, ), ), ), {, n]
[), {, n, ., removeChild, (, body, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, body]
[), ), {, n, ., removeChild, (, body, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[||, !, finallyBlock, ., hasChildren, (, ), ), ), {, n, ., removeChild, (, body, ), ;, n, ., getParent]
[==, null, ||, !, finallyBlock, ., hasChildren, (, ), ), ), {, n, ., removeChild, (, body, ), ;, n]
[||, !, finallyBlock, ., hasChildren, (, ), ), ), {, n, ., removeChild, (, body, ), ;, n, ., getParent]
[), ), {, n, ., removeChild, (, body, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[), ), {, n, ., removeChild, (, body, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[., hasChildren, (, ), ), ), {, n, ., removeChild, (, body, ), ;, n, ., getParent, (, ), .]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, body, ), ;, reportCodeChange, (, ), ;, return, body]
[., removeChild, (, body, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, body, ), ;, reportCodeChange]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, body, ), ;, reportCodeChange, (, ), ;, return]
[;, reportCodeChange, (, ), ;, return, body, ;, }, if, (, !, body, ., hasChildren, (, ), ), {, NodeUtil]
[., replaceChild, (, n, ,, body, ), ;, reportCodeChange, (, ), ;, return, body, ;, }, if, (, !, body]
[., getParent, (, ), ., replaceChild, (, n, ,, body, ), ;, reportCodeChange, (, ), ;, return, body, ;, }]
[,, body, ), ;, reportCodeChange, (, ), ;, return, body, ;, }, if, (, !, body, ., hasChildren, (, )]
[), ;, reportCodeChange, (, ), ;, return, body, ;, }, if, (, !, body, ., hasChildren, (, ), ), {]
[;, return, body, ;, }, if, (, !, body, ., hasChildren, (, ), ), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock]
[;, }, if, (, !, body, ., hasChildren, (, ), ), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, ), ;, if]
[), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, ), ;, if, (, finallyBlock, !=, null, ), {, n, ., removeChild, (]
[), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, ), ;, if, (, finallyBlock, !=, null, ), {, n, ., removeChild, (]
[., hasChildren, (, ), ), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, ), ;, if, (, finallyBlock, !=, null, ), {]
[;, if, (, finallyBlock, !=, null, ), {, n, ., removeChild, (, finallyBlock, ), ;, n, ., getParent, (, )]
[., redeclareVarsInsideBranch, (, catchBlock, ), ;, if, (, finallyBlock, !=, null, ), {, n, ., removeChild, (, finallyBlock, ), ;]
[), ;, if, (, finallyBlock, !=, null, ), {, n, ., removeChild, (, finallyBlock, ), ;, n, ., getParent, (]
[), {, n, ., removeChild, (, finallyBlock, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, finallyBlock]
[!=, null, ), {, n, ., removeChild, (, finallyBlock, ), ;, n, ., getParent, (, ), ., replaceChild, (, n]
[), {, n, ., removeChild, (, finallyBlock, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, finallyBlock]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, finallyBlock, ), ;, }, else, {, n, ., getParent]
[., removeChild, (, finallyBlock, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, finallyBlock, ), ;, }]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, finallyBlock, ), ;, }, else, {, n, .]
[;, }, else, {, n, ., getParent, (, ), ., removeChild, (, n, ), ;, }, reportCodeChange, (, ), ;]
[., replaceChild, (, n, ,, finallyBlock, ), ;, }, else, {, n, ., getParent, (, ), ., removeChild, (, n]
[., getParent, (, ), ., replaceChild, (, n, ,, finallyBlock, ), ;, }, else, {, n, ., getParent, (, )]
[,, finallyBlock, ), ;, }, else, {, n, ., getParent, (, ), ., removeChild, (, n, ), ;, }, reportCodeChange]
[), ;, }, else, {, n, ., getParent, (, ), ., removeChild, (, n, ), ;, }, reportCodeChange, (, )]
[;, }, reportCodeChange, (, ), ;, return, finallyBlock, ;, }, return, n, ;, }, private, Node, tryFoldAssignment, (, Node, subtree]
[., removeChild, (, n, ), ;, }, reportCodeChange, (, ), ;, return, finallyBlock, ;, }, return, n, ;, }, private]
[., getParent, (, ), ., removeChild, (, n, ), ;, }, reportCodeChange, (, ), ;, return, finallyBlock, ;, }, return]
[), ;, }, reportCodeChange, (, ), ;, return, finallyBlock, ;, }, return, n, ;, }, private, Node, tryFoldAssignment, (, Node]
[;, return, finallyBlock, ;, }, return, n, ;, }, private, Node, tryFoldAssignment, (, Node, subtree, ), {, Preconditions, ., checkState]
[;, }, return, n, ;, }, private, Node, tryFoldAssignment, (, Node, subtree, ), {, Preconditions, ., checkState, (, subtree, .]
[;, }, private, Node, tryFoldAssignment, (, Node, subtree, ), {, Preconditions, ., checkState, (, subtree, ., isAssign, (, ), )]
[;, Node, left, =, subtree, ., getFirstChild, (, ), ;, Node, right, =, subtree, ., getLastChild, (, ), ;, if]
[., checkState, (, subtree, ., isAssign, (, ), ), ;, Node, left, =, subtree, ., getFirstChild, (, ), ;, Node]
[), ;, Node, left, =, subtree, ., getFirstChild, (, ), ;, Node, right, =, subtree, ., getLastChild, (, ), ;]
[., isAssign, (, ), ), ;, Node, left, =, subtree, ., getFirstChild, (, ), ;, Node, right, =, subtree, .]
[;, Node, right, =, subtree, ., getLastChild, (, ), ;, if, (, left, ., isName, (, ), &&, right, .]
[., getFirstChild, (, ), ;, Node, right, =, subtree, ., getLastChild, (, ), ;, if, (, left, ., isName, (]
[;, if, (, left, ., isName, (, ), &&, right, ., isName, (, ), &&, left, ., getString, (, )]
[., getLastChild, (, ), ;, if, (, left, ., isName, (, ), &&, right, ., isName, (, ), &&, left]
[), {, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, right, ., detachFromParent, (, ), ), ;, reportCodeChange]
[&&, left, ., getString, (, ), ., equals, (, right, ., getString, (, ), ), ), {, subtree, ., getParent]
[&&, right, ., isName, (, ), &&, left, ., getString, (, ), ., equals, (, right, ., getString, (, )]
[., isName, (, ), &&, right, ., isName, (, ), &&, left, ., getString, (, ), ., equals, (, right]
[&&, left, ., getString, (, ), ., equals, (, right, ., getString, (, ), ), ), {, subtree, ., getParent]
[., isName, (, ), &&, left, ., getString, (, ), ., equals, (, right, ., getString, (, ), ), )]
[), {, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, right, ., detachFromParent, (, ), ), ;, reportCodeChange]
[., equals, (, right, ., getString, (, ), ), ), {, subtree, ., getParent, (, ), ., replaceChild, (, subtree]
[., getString, (, ), ., equals, (, right, ., getString, (, ), ), ), {, subtree, ., getParent, (, )]
[), ), {, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, right, ., detachFromParent, (, ), ), ;]
[., getString, (, ), ), ), {, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, right, ., detachFromParent]
[;, reportCodeChange, (, ), ;, return, right, ;, }, return, subtree, ;, }, private, Node, tryFoldExpr, (, Node, subtree, )]
[., replaceChild, (, subtree, ,, right, ., detachFromParent, (, ), ), ;, reportCodeChange, (, ), ;, return, right, ;, }]
[., getParent, (, ), ., replaceChild, (, subtree, ,, right, ., detachFromParent, (, ), ), ;, reportCodeChange, (, ), ;]
[,, right, ., detachFromParent, (, ), ), ;, reportCodeChange, (, ), ;, return, right, ;, }, return, subtree, ;, }]
[), ;, reportCodeChange, (, ), ;, return, right, ;, }, return, subtree, ;, }, private, Node, tryFoldExpr, (, Node, subtree]
[., detachFromParent, (, ), ), ;, reportCodeChange, (, ), ;, return, right, ;, }, return, subtree, ;, }, private, Node]
[;, return, right, ;, }, return, subtree, ;, }, private, Node, tryFoldExpr, (, Node, subtree, ), {, Node, result, =]
[;, }, return, subtree, ;, }, private, Node, tryFoldExpr, (, Node, subtree, ), {, Node, result, =, trySimplifyUnusedResult, (, subtree]
[;, }, private, Node, tryFoldExpr, (, Node, subtree, ), {, Node, result, =, trySimplifyUnusedResult, (, subtree, ., getFirstChild, (, )]
[;, if, (, result, ==, null, ), {, Node, parent, =, subtree, ., getParent, (, ), ;, if, (, parent]
[), ;, if, (, result, ==, null, ), {, Node, parent, =, subtree, ., getParent, (, ), ;, if, (]
[., getFirstChild, (, ), ), ;, if, (, result, ==, null, ), {, Node, parent, =, subtree, ., getParent, (]
[), {, Node, parent, =, subtree, ., getParent, (, ), ;, if, (, parent, ., isLabel, (, ), ), {]
[==, null, ), {, Node, parent, =, subtree, ., getParent, (, ), ;, if, (, parent, ., isLabel, (, )]
[), {, Node, parent, =, subtree, ., getParent, (, ), ;, if, (, parent, ., isLabel, (, ), ), {]
[;, if, (, parent, ., isLabel, (, ), ), {, Node, replacement, =, IR, ., block, (, ), ., srcref]
[., getParent, (, ), ;, if, (, parent, ., isLabel, (, ), ), {, Node, replacement, =, IR, ., block]
[), {, Node, replacement, =, IR, ., block, (, ), ., srcref, (, subtree, ), ;, parent, ., replaceChild, (]
[., isLabel, (, ), ), {, Node, replacement, =, IR, ., block, (, ), ., srcref, (, subtree, ), ;]
[;, parent, ., replaceChild, (, subtree, ,, replacement, ), ;, subtree, =, replacement, ;, }, else, {, subtree, ., detachFromParent]
[., srcref, (, subtree, ), ;, parent, ., replaceChild, (, subtree, ,, replacement, ), ;, subtree, =, replacement, ;, }]
[., block, (, ), ., srcref, (, subtree, ), ;, parent, ., replaceChild, (, subtree, ,, replacement, ), ;, subtree]
[), ;, parent, ., replaceChild, (, subtree, ,, replacement, ), ;, subtree, =, replacement, ;, }, else, {, subtree, .]
[;, subtree, =, replacement, ;, }, else, {, subtree, ., detachFromParent, (, ), ;, subtree, =, null, ;, }, }]
[., replaceChild, (, subtree, ,, replacement, ), ;, subtree, =, replacement, ;, }, else, {, subtree, ., detachFromParent, (, )]
[,, replacement, ), ;, subtree, =, replacement, ;, }, else, {, subtree, ., detachFromParent, (, ), ;, subtree, =, null]
[), ;, subtree, =, replacement, ;, }, else, {, subtree, ., detachFromParent, (, ), ;, subtree, =, null, ;, }]
[=, replacement, ;, }, else, {, subtree, ., detachFromParent, (, ), ;, subtree, =, null, ;, }, }, return, subtree]
[;, }, else, {, subtree, ., detachFromParent, (, ), ;, subtree, =, null, ;, }, }, return, subtree, ;, }]
[;, subtree, =, null, ;, }, }, return, subtree, ;, }, private, Node, trySimplifyUnusedResult, (, Node, n, ), {, return]
[., detachFromParent, (, ), ;, subtree, =, null, ;, }, }, return, subtree, ;, }, private, Node, trySimplifyUnusedResult, (, Node]
[=, null, ;, }, }, return, subtree, ;, }, private, Node, trySimplifyUnusedResult, (, Node, n, ), {, return, trySimplifyUnusedResult, (]
[;, }, }, return, subtree, ;, }, private, Node, trySimplifyUnusedResult, (, Node, n, ), {, return, trySimplifyUnusedResult, (, n, ,]
[;, }, private, Node, trySimplifyUnusedResult, (, Node, n, ), {, return, trySimplifyUnusedResult, (, n, ,, true, ), ;, }, private]
[;, }, private, Node, trySimplifyUnusedResult, (, Node, n, ,, boolean, removeUnused, ), {, Node, result, =, n, ;, switch, (]
[,, true, ), ;, }, private, Node, trySimplifyUnusedResult, (, Node, n, ,, boolean, removeUnused, ), {, Node, result, =, n]
[), ;, }, private, Node, trySimplifyUnusedResult, (, Node, n, ,, boolean, removeUnused, ), {, Node, result, =, n, ;, switch]
[;, switch, (, n, ., getType, (, ), ), {, case, Token, ., HOOK, :, Node, trueNode, =, trySimplifyUnusedResult, (]
[), {, case, Token, ., HOOK, :, Node, trueNode, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ., getNext, (]
[., getType, (, ), ), {, case, Token, ., HOOK, :, Node, trueNode, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (]
[:, Node, trueNode, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ., getNext, (, ), ), ;, Node, falseNode, =]
[., HOOK, :, Node, trueNode, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ., getNext, (, ), ), ;, Node]
[;, Node, falseNode, =, trySimplifyUnusedResult, (, n, ., getLastChild, (, ), ), ;, if, (, trueNode, ==, null, &&, falseNode]
[), ;, Node, falseNode, =, trySimplifyUnusedResult, (, n, ., getLastChild, (, ), ), ;, if, (, trueNode, ==, null, &&]
[., getNext, (, ), ), ;, Node, falseNode, =, trySimplifyUnusedResult, (, n, ., getLastChild, (, ), ), ;, if, (]
[., getFirstChild, (, ), ., getNext, (, ), ), ;, Node, falseNode, =, trySimplifyUnusedResult, (, n, ., getLastChild, (, )]
[;, if, (, trueNode, ==, null, &&, falseNode, !=, null, ), {, n, ., setType, (, Token, ., OR, )]
[), ;, if, (, trueNode, ==, null, &&, falseNode, !=, null, ), {, n, ., setType, (, Token, ., OR]
[., getLastChild, (, ), ), ;, if, (, trueNode, ==, null, &&, falseNode, !=, null, ), {, n, ., setType]
[), {, n, ., setType, (, Token, ., OR, ), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, )]
[&&, falseNode, !=, null, ), {, n, ., setType, (, Token, ., OR, ), ;, Preconditions, ., checkState, (, n]
[==, null, &&, falseNode, !=, null, ), {, n, ., setType, (, Token, ., OR, ), ;, Preconditions, ., checkState]
[&&, falseNode, !=, null, ), {, n, ., setType, (, Token, ., OR, ), ;, Preconditions, ., checkState, (, n]
[), {, n, ., setType, (, Token, ., OR, ), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, )]
[!=, null, ), {, n, ., setType, (, Token, ., OR, ), ;, Preconditions, ., checkState, (, n, ., getChildCount]
[), {, n, ., setType, (, Token, ., OR, ), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, )]
[;, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, }, else, if, (, trueNode, !=]
[., setType, (, Token, ., OR, ), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, )]
[), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, }, else, if, (, trueNode]
[., OR, ), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, }, else, if]
[;, }, else, if, (, trueNode, !=, null, &&, falseNode, ==, null, ), {, n, ., setType, (, Token, .]
[., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, }, else, if, (, trueNode, !=, null, &&]
[), ;, }, else, if, (, trueNode, !=, null, &&, falseNode, ==, null, ), {, n, ., setType, (, Token]
[==, 2, ), ;, }, else, if, (, trueNode, !=, null, &&, falseNode, ==, null, ), {, n, ., setType]
[., getChildCount, (, ), ==, 2, ), ;, }, else, if, (, trueNode, !=, null, &&, falseNode, ==, null, )]
[), ;, }, else, if, (, trueNode, !=, null, &&, falseNode, ==, null, ), {, n, ., setType, (, Token]
[), {, n, ., setType, (, Token, ., AND, ), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, )]
[&&, falseNode, ==, null, ), {, n, ., setType, (, Token, ., AND, ), ;, Preconditions, ., checkState, (, n]
[!=, null, &&, falseNode, ==, null, ), {, n, ., setType, (, Token, ., AND, ), ;, Preconditions, ., checkState]
[&&, falseNode, ==, null, ), {, n, ., setType, (, Token, ., AND, ), ;, Preconditions, ., checkState, (, n]
[), {, n, ., setType, (, Token, ., AND, ), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, )]
[==, null, ), {, n, ., setType, (, Token, ., AND, ), ;, Preconditions, ., checkState, (, n, ., getChildCount]
[), {, n, ., setType, (, Token, ., AND, ), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, )]
[;, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, }, else, if, (, trueNode, ==]
[., setType, (, Token, ., AND, ), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, )]
[), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, }, else, if, (, trueNode]
[., AND, ), ;, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, }, else, if]
[;, }, else, if, (, trueNode, ==, null, &&, falseNode, ==, null, ), {, result, =, trySimplifyUnusedResult, (, n, .]
[., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, }, else, if, (, trueNode, ==, null, &&]
[), ;, }, else, if, (, trueNode, ==, null, &&, falseNode, ==, null, ), {, result, =, trySimplifyUnusedResult, (, n]
[==, 2, ), ;, }, else, if, (, trueNode, ==, null, &&, falseNode, ==, null, ), {, result, =, trySimplifyUnusedResult]
[., getChildCount, (, ), ==, 2, ), ;, }, else, if, (, trueNode, ==, null, &&, falseNode, ==, null, )]
[), ;, }, else, if, (, trueNode, ==, null, &&, falseNode, ==, null, ), {, result, =, trySimplifyUnusedResult, (, n]
[), {, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }, else, {, result, =, n, ;]
[&&, falseNode, ==, null, ), {, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }, else, {]
[==, null, &&, falseNode, ==, null, ), {, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }]
[&&, falseNode, ==, null, ), {, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }, else, {]
[), {, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }, else, {, result, =, n, ;]
[==, null, ), {, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }, else, {, result, =]
[), {, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }, else, {, result, =, n, ;]
[=, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }, else, {, result, =, n, ;, }, break, ;]
[;, }, else, {, result, =, n, ;, }, break, ;, case, Token, ., AND, :, case, Token, ., OR]
[), ;, }, else, {, result, =, n, ;, }, break, ;, case, Token, ., AND, :, case, Token, .]
[., getFirstChild, (, ), ), ;, }, else, {, result, =, n, ;, }, break, ;, case, Token, ., AND]
[=, n, ;, }, break, ;, case, Token, ., AND, :, case, Token, ., OR, :, Node, conditionalResultNode, =, trySimplifyUnusedResult]
[;, }, break, ;, case, Token, ., AND, :, case, Token, ., OR, :, Node, conditionalResultNode, =, trySimplifyUnusedResult, (, n]
[:, case, Token, ., OR, :, Node, conditionalResultNode, =, trySimplifyUnusedResult, (, n, ., getLastChild, (, ), ), ;, if, (]
[., AND, :, case, Token, ., OR, :, Node, conditionalResultNode, =, trySimplifyUnusedResult, (, n, ., getLastChild, (, ), ), ;]
[:, Node, conditionalResultNode, =, trySimplifyUnusedResult, (, n, ., getLastChild, (, ), ), ;, if, (, conditionalResultNode, ==, null, ), {]
[., OR, :, Node, conditionalResultNode, =, trySimplifyUnusedResult, (, n, ., getLastChild, (, ), ), ;, if, (, conditionalResultNode, ==, null]
[;, if, (, conditionalResultNode, ==, null, ), {, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, result]
[), ;, if, (, conditionalResultNode, ==, null, ), {, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;]
[., getLastChild, (, ), ), ;, if, (, conditionalResultNode, ==, null, ), {, Preconditions, ., checkState, (, n, ., hasOneChild]
[), {, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild]
[==, null, ), {, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, result, =, trySimplifyUnusedResult, (, n]
[), {, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild]
[;, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }, break, ;, case, Token, ., FUNCTION, :]
[., checkState, (, n, ., hasOneChild, (, ), ), ;, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), )]
[), ;, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }, break, ;, case, Token, ., FUNCTION]
[., hasOneChild, (, ), ), ;, result, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }, break, ;]
[=, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, }, break, ;, case, Token, ., FUNCTION, :, result, =]
[;, }, break, ;, case, Token, ., FUNCTION, :, result, =, null, ;, break, ;, case, Token, ., COMMA, :]
[), ;, }, break, ;, case, Token, ., FUNCTION, :, result, =, null, ;, break, ;, case, Token, ., COMMA]
[., getFirstChild, (, ), ), ;, }, break, ;, case, Token, ., FUNCTION, :, result, =, null, ;, break, ;]
[:, result, =, null, ;, break, ;, case, Token, ., COMMA, :, Node, left, =, trySimplifyUnusedResult, (, n, ., getFirstChild]
[., FUNCTION, :, result, =, null, ;, break, ;, case, Token, ., COMMA, :, Node, left, =, trySimplifyUnusedResult, (, n]
[=, null, ;, break, ;, case, Token, ., COMMA, :, Node, left, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, )]
[;, break, ;, case, Token, ., COMMA, :, Node, left, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;]
[:, Node, left, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, Node, right, =, trySimplifyUnusedResult, (, n, .]
[., COMMA, :, Node, left, =, trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ), ;, Node, right, =, trySimplifyUnusedResult, (]
[;, Node, right, =, trySimplifyUnusedResult, (, n, ., getLastChild, (, ), ), ;, if, (, left, ==, null, &&, right]
[), ;, Node, right, =, trySimplifyUnusedResult, (, n, ., getLastChild, (, ), ), ;, if, (, left, ==, null, &&]
[., getFirstChild, (, ), ), ;, Node, right, =, trySimplifyUnusedResult, (, n, ., getLastChild, (, ), ), ;, if, (]
[;, if, (, left, ==, null, &&, right, ==, null, ), {, result, =, null, ;, }, else, if, (]
[), ;, if, (, left, ==, null, &&, right, ==, null, ), {, result, =, null, ;, }, else, if]
[., getLastChild, (, ), ), ;, if, (, left, ==, null, &&, right, ==, null, ), {, result, =, null]
[), {, result, =, null, ;, }, else, if, (, left, ==, null, ), {, result, =, right, ;, }]
[&&, right, ==, null, ), {, result, =, null, ;, }, else, if, (, left, ==, null, ), {, result]
[==, null, &&, right, ==, null, ), {, result, =, null, ;, }, else, if, (, left, ==, null, )]
[&&, right, ==, null, ), {, result, =, null, ;, }, else, if, (, left, ==, null, ), {, result]
[), {, result, =, null, ;, }, else, if, (, left, ==, null, ), {, result, =, right, ;, }]
[==, null, ), {, result, =, null, ;, }, else, if, (, left, ==, null, ), {, result, =, right]
[), {, result, =, null, ;, }, else, if, (, left, ==, null, ), {, result, =, right, ;, }]
[=, null, ;, }, else, if, (, left, ==, null, ), {, result, =, right, ;, }, else, if, (]
[;, }, else, if, (, left, ==, null, ), {, result, =, right, ;, }, else, if, (, right, ==]
[), {, result, =, right, ;, }, else, if, (, right, ==, null, ), {, result, =, left, ;, }]
[==, null, ), {, result, =, right, ;, }, else, if, (, right, ==, null, ), {, result, =, left]
[), {, result, =, right, ;, }, else, if, (, right, ==, null, ), {, result, =, left, ;, }]
[=, right, ;, }, else, if, (, right, ==, null, ), {, result, =, left, ;, }, else, {, result]
[;, }, else, if, (, right, ==, null, ), {, result, =, left, ;, }, else, {, result, =, n]
[), {, result, =, left, ;, }, else, {, result, =, n, ;, }, break, ;, default, :, if, (]
[==, null, ), {, result, =, left, ;, }, else, {, result, =, n, ;, }, break, ;, default, :]
[), {, result, =, left, ;, }, else, {, result, =, n, ;, }, break, ;, default, :, if, (]
[=, left, ;, }, else, {, result, =, n, ;, }, break, ;, default, :, if, (, !, nodeTypeMayHaveSideEffects, (]
[;, }, else, {, result, =, n, ;, }, break, ;, default, :, if, (, !, nodeTypeMayHaveSideEffects, (, n, )]
[=, n, ;, }, break, ;, default, :, if, (, !, nodeTypeMayHaveSideEffects, (, n, ), ), {, Node, resultList, =]
[;, }, break, ;, default, :, if, (, !, nodeTypeMayHaveSideEffects, (, n, ), ), {, Node, resultList, =, null, ;]
[), {, Node, resultList, =, null, ;, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;]
[), {, Node, resultList, =, null, ;, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;]
[), ), {, Node, resultList, =, null, ;, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, )]
[;, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[;, c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, c, =]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (]
[;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, c, =, trySimplifyUnusedResult, (, c, )]
[!=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, c, =, trySimplifyUnusedResult, (]
[;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, c, =, trySimplifyUnusedResult, (, c, )]
[=, next, ), {, next, =, c, ., getNext, (, ), ;, c, =, trySimplifyUnusedResult, (, c, ), ;, if]
[), {, next, =, c, ., getNext, (, ), ;, c, =, trySimplifyUnusedResult, (, c, ), ;, if, (, c]
[=, c, ., getNext, (, ), ;, c, =, trySimplifyUnusedResult, (, c, ), ;, if, (, c, !=, null, )]
[;, c, =, trySimplifyUnusedResult, (, c, ), ;, if, (, c, !=, null, ), {, c, ., detachFromParent, (, )]
[., getNext, (, ), ;, c, =, trySimplifyUnusedResult, (, c, ), ;, if, (, c, !=, null, ), {, c]
[=, trySimplifyUnusedResult, (, c, ), ;, if, (, c, !=, null, ), {, c, ., detachFromParent, (, ), ;, if]
[;, if, (, c, !=, null, ), {, c, ., detachFromParent, (, ), ;, if, (, resultList, ==, null, )]
[), ;, if, (, c, !=, null, ), {, c, ., detachFromParent, (, ), ;, if, (, resultList, ==, null]
[), {, c, ., detachFromParent, (, ), ;, if, (, resultList, ==, null, ), {, resultList, =, c, ;, }]
[!=, null, ), {, c, ., detachFromParent, (, ), ;, if, (, resultList, ==, null, ), {, resultList, =, c]
[), {, c, ., detachFromParent, (, ), ;, if, (, resultList, ==, null, ), {, resultList, =, c, ;, }]
[;, if, (, resultList, ==, null, ), {, resultList, =, c, ;, }, else, {, resultList, =, IR, ., comma]
[., detachFromParent, (, ), ;, if, (, resultList, ==, null, ), {, resultList, =, c, ;, }, else, {, resultList]
[), {, resultList, =, c, ;, }, else, {, resultList, =, IR, ., comma, (, resultList, ,, c, ), .]
[==, null, ), {, resultList, =, c, ;, }, else, {, resultList, =, IR, ., comma, (, resultList, ,, c]
[), {, resultList, =, c, ;, }, else, {, resultList, =, IR, ., comma, (, resultList, ,, c, ), .]
[=, c, ;, }, else, {, resultList, =, IR, ., comma, (, resultList, ,, c, ), ., srcref, (, c]
[;, }, else, {, resultList, =, IR, ., comma, (, resultList, ,, c, ), ., srcref, (, c, ), ;]
[=, IR, ., comma, (, resultList, ,, c, ), ., srcref, (, c, ), ;, }, }, }, result, =]
[;, }, }, }, result, =, resultList, ;, }, }, if, (, n, !=, result, ), {, Node, parent, =]
[., srcref, (, c, ), ;, }, }, }, result, =, resultList, ;, }, }, if, (, n, !=, result]
[., comma, (, resultList, ,, c, ), ., srcref, (, c, ), ;, }, }, }, result, =, resultList, ;]
[,, c, ), ., srcref, (, c, ), ;, }, }, }, result, =, resultList, ;, }, }, if, (]
[), ., srcref, (, c, ), ;, }, }, }, result, =, resultList, ;, }, }, if, (, n, !=]
[), ;, }, }, }, result, =, resultList, ;, }, }, if, (, n, !=, result, ), {, Node, parent]
[=, resultList, ;, }, }, if, (, n, !=, result, ), {, Node, parent, =, n, ., getParent, (, )]
[;, }, }, if, (, n, !=, result, ), {, Node, parent, =, n, ., getParent, (, ), ;, if]
[), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, result, ==, null, ), {, if, (]
[!=, result, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, result, ==, null, ), {]
[), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, result, ==, null, ), {, if, (]
[;, if, (, result, ==, null, ), {, if, (, removeUnused, ), {, parent, ., removeChild, (, n, ), ;]
[., getParent, (, ), ;, if, (, result, ==, null, ), {, if, (, removeUnused, ), {, parent, ., removeChild]
[), {, if, (, removeUnused, ), {, parent, ., removeChild, (, n, ), ;, }, else, {, result, =, IR]
[==, null, ), {, if, (, removeUnused, ), {, parent, ., removeChild, (, n, ), ;, }, else, {, result]
[), {, if, (, removeUnused, ), {, parent, ., removeChild, (, n, ), ;, }, else, {, result, =, IR]
[), {, parent, ., removeChild, (, n, ), ;, }, else, {, result, =, IR, ., empty, (, ), .]
[;, }, else, {, result, =, IR, ., empty, (, ), ., srcref, (, n, ), ;, parent, ., replaceChild]
[., removeChild, (, n, ), ;, }, else, {, result, =, IR, ., empty, (, ), ., srcref, (, n]
[), ;, }, else, {, result, =, IR, ., empty, (, ), ., srcref, (, n, ), ;, parent, .]
[=, IR, ., empty, (, ), ., srcref, (, n, ), ;, parent, ., replaceChild, (, n, ,, result, )]
[;, parent, ., replaceChild, (, n, ,, result, ), ;, }, }, else, {, if, (, result, ., getParent, (]
[., srcref, (, n, ), ;, parent, ., replaceChild, (, n, ,, result, ), ;, }, }, else, {, if]
[., empty, (, ), ., srcref, (, n, ), ;, parent, ., replaceChild, (, n, ,, result, ), ;, }]
[), ;, parent, ., replaceChild, (, n, ,, result, ), ;, }, }, else, {, if, (, result, ., getParent]
[;, }, }, else, {, if, (, result, ., getParent, (, ), !=, null, ), {, result, ., detachFromParent, (]
[., replaceChild, (, n, ,, result, ), ;, }, }, else, {, if, (, result, ., getParent, (, ), !=]
[,, result, ), ;, }, }, else, {, if, (, result, ., getParent, (, ), !=, null, ), {, result]
[), ;, }, }, else, {, if, (, result, ., getParent, (, ), !=, null, ), {, result, ., detachFromParent]
[), {, result, ., detachFromParent, (, ), ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, result]
[!=, null, ), {, result, ., detachFromParent, (, ), ;, }, n, ., getParent, (, ), ., replaceChild, (, n]
[., getParent, (, ), !=, null, ), {, result, ., detachFromParent, (, ), ;, }, n, ., getParent, (, )]
[), {, result, ., detachFromParent, (, ), ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, result]
[;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, result, ), ;, }, reportCodeChange, (, ), ;]
[., detachFromParent, (, ), ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, result, ), ;, }]
[;, }, reportCodeChange, (, ), ;, }, return, result, ;, }, private, Node, tryOptimizeSwitch, (, Node, n, ), {, Preconditions]
[., replaceChild, (, n, ,, result, ), ;, }, reportCodeChange, (, ), ;, }, return, result, ;, }, private, Node]
[., getParent, (, ), ., replaceChild, (, n, ,, result, ), ;, }, reportCodeChange, (, ), ;, }, return, result]
[,, result, ), ;, }, reportCodeChange, (, ), ;, }, return, result, ;, }, private, Node, tryOptimizeSwitch, (, Node, n]
[), ;, }, reportCodeChange, (, ), ;, }, return, result, ;, }, private, Node, tryOptimizeSwitch, (, Node, n, ), {]
[;, }, return, result, ;, }, private, Node, tryOptimizeSwitch, (, Node, n, ), {, Preconditions, ., checkState, (, n, .]
[;, }, private, Node, tryOptimizeSwitch, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isSwitch, (, ), )]
[;, Node, defaultCase, =, tryOptimizeDefaultCase, (, n, ), ;, if, (, defaultCase, ==, null, ), {, Node, cond, =, n]
[., checkState, (, n, ., isSwitch, (, ), ), ;, Node, defaultCase, =, tryOptimizeDefaultCase, (, n, ), ;, if, (]
[), ;, Node, defaultCase, =, tryOptimizeDefaultCase, (, n, ), ;, if, (, defaultCase, ==, null, ), {, Node, cond, =]
[., isSwitch, (, ), ), ;, Node, defaultCase, =, tryOptimizeDefaultCase, (, n, ), ;, if, (, defaultCase, ==, null, )]
[;, if, (, defaultCase, ==, null, ), {, Node, cond, =, n, ., getFirstChild, (, ), ,, prev, =, null]
[), ;, if, (, defaultCase, ==, null, ), {, Node, cond, =, n, ., getFirstChild, (, ), ,, prev, =]
[), {, Node, cond, =, n, ., getFirstChild, (, ), ,, prev, =, null, ,, next, =, null, ,, cur]
[==, null, ), {, Node, cond, =, n, ., getFirstChild, (, ), ,, prev, =, null, ,, next, =, null]
[), {, Node, cond, =, n, ., getFirstChild, (, ), ,, prev, =, null, ,, next, =, null, ,, cur]
[,, prev, =, null, ,, next, =, null, ,, cur, ;, for, (, cur, =, cond, ., getNext, (, )]
[., getFirstChild, (, ), ,, prev, =, null, ,, next, =, null, ,, cur, ;, for, (, cur, =, cond]
[,, next, =, null, ,, cur, ;, for, (, cur, =, cond, ., getNext, (, ), ;, cur, !=, null]
[,, cur, ;, for, (, cur, =, cond, ., getNext, (, ), ;, cur, !=, null, ;, cur, =, next]
[=, cond, ., getNext, (, ), ;, cur, !=, null, ;, cur, =, next, ), {, next, =, cur, .]
[;, cur, !=, null, ;, cur, =, next, ), {, next, =, cur, ., getNext, (, ), ;, if, (]
[., getNext, (, ), ;, cur, !=, null, ;, cur, =, next, ), {, next, =, cur, ., getNext, (]
[;, cur, =, next, ), {, next, =, cur, ., getNext, (, ), ;, if, (, !, mayHaveSideEffects, (, cur]
[!=, null, ;, cur, =, next, ), {, next, =, cur, ., getNext, (, ), ;, if, (, !, mayHaveSideEffects]
[;, cur, =, next, ), {, next, =, cur, ., getNext, (, ), ;, if, (, !, mayHaveSideEffects, (, cur]
[=, next, ), {, next, =, cur, ., getNext, (, ), ;, if, (, !, mayHaveSideEffects, (, cur, ., getFirstChild]
[), {, next, =, cur, ., getNext, (, ), ;, if, (, !, mayHaveSideEffects, (, cur, ., getFirstChild, (, )]
[=, cur, ., getNext, (, ), ;, if, (, !, mayHaveSideEffects, (, cur, ., getFirstChild, (, ), ), &&, isUselessCase]
[;, if, (, !, mayHaveSideEffects, (, cur, ., getFirstChild, (, ), ), &&, isUselessCase, (, cur, ,, prev, ), )]
[., getNext, (, ), ;, if, (, !, mayHaveSideEffects, (, cur, ., getFirstChild, (, ), ), &&, isUselessCase, (, cur]
[), {, removeCase, (, n, ,, cur, ), ;, }, else, {, prev, =, cur, ;, }, }, if, (]
[&&, isUselessCase, (, cur, ,, prev, ), ), {, removeCase, (, n, ,, cur, ), ;, }, else, {, prev]
[&&, isUselessCase, (, cur, ,, prev, ), ), {, removeCase, (, n, ,, cur, ), ;, }, else, {, prev]
[), &&, isUselessCase, (, cur, ,, prev, ), ), {, removeCase, (, n, ,, cur, ), ;, }, else, {]
[., getFirstChild, (, ), ), &&, isUselessCase, (, cur, ,, prev, ), ), {, removeCase, (, n, ,, cur, )]
[), {, removeCase, (, n, ,, cur, ), ;, }, else, {, prev, =, cur, ;, }, }, if, (]
[,, prev, ), ), {, removeCase, (, n, ,, cur, ), ;, }, else, {, prev, =, cur, ;, }]
[), ), {, removeCase, (, n, ,, cur, ), ;, }, else, {, prev, =, cur, ;, }, }, if]
[;, }, else, {, prev, =, cur, ;, }, }, if, (, NodeUtil, ., isLiteralValue, (, cond, ,, false, )]
[,, cur, ), ;, }, else, {, prev, =, cur, ;, }, }, if, (, NodeUtil, ., isLiteralValue, (, cond]
[), ;, }, else, {, prev, =, cur, ;, }, }, if, (, NodeUtil, ., isLiteralValue, (, cond, ,, false]
[=, cur, ;, }, }, if, (, NodeUtil, ., isLiteralValue, (, cond, ,, false, ), ), {, Node, caseLabel, ;]
[;, }, }, if, (, NodeUtil, ., isLiteralValue, (, cond, ,, false, ), ), {, Node, caseLabel, ;, TernaryValue, caseMatches]
[), {, Node, caseLabel, ;, TernaryValue, caseMatches, =, TernaryValue, ., TRUE, ;, for, (, cur, =, cond, ., getNext, (]
[., isLiteralValue, (, cond, ,, false, ), ), {, Node, caseLabel, ;, TernaryValue, caseMatches, =, TernaryValue, ., TRUE, ;, for]
[,, false, ), ), {, Node, caseLabel, ;, TernaryValue, caseMatches, =, TernaryValue, ., TRUE, ;, for, (, cur, =, cond]
[), ), {, Node, caseLabel, ;, TernaryValue, caseMatches, =, TernaryValue, ., TRUE, ;, for, (, cur, =, cond, ., getNext]
[;, for, (, cur, =, cond, ., getNext, (, ), ;, cur, !=, null, ;, cur, =, next, ), {]
[., TRUE, ;, for, (, cur, =, cond, ., getNext, (, ), ;, cur, !=, null, ;, cur, =, next]
[=, cond, ., getNext, (, ), ;, cur, !=, null, ;, cur, =, next, ), {, next, =, cur, .]
[;, cur, !=, null, ;, cur, =, next, ), {, next, =, cur, ., getNext, (, ), ;, caseLabel, =]
[., getNext, (, ), ;, cur, !=, null, ;, cur, =, next, ), {, next, =, cur, ., getNext, (]
[;, cur, =, next, ), {, next, =, cur, ., getNext, (, ), ;, caseLabel, =, cur, ., getFirstChild, (]
[!=, null, ;, cur, =, next, ), {, next, =, cur, ., getNext, (, ), ;, caseLabel, =, cur, .]
[;, cur, =, next, ), {, next, =, cur, ., getNext, (, ), ;, caseLabel, =, cur, ., getFirstChild, (]
[=, next, ), {, next, =, cur, ., getNext, (, ), ;, caseLabel, =, cur, ., getFirstChild, (, ), ;]
[), {, next, =, cur, ., getNext, (, ), ;, caseLabel, =, cur, ., getFirstChild, (, ), ;, caseMatches, =]
[=, cur, ., getNext, (, ), ;, caseLabel, =, cur, ., getFirstChild, (, ), ;, caseMatches, =, PeepholeFoldConstants, ., evaluateComparison]
[;, caseLabel, =, cur, ., getFirstChild, (, ), ;, caseMatches, =, PeepholeFoldConstants, ., evaluateComparison, (, Token, ., SHEQ, ,, cond]
[., getNext, (, ), ;, caseLabel, =, cur, ., getFirstChild, (, ), ;, caseMatches, =, PeepholeFoldConstants, ., evaluateComparison, (, Token]
[=, cur, ., getFirstChild, (, ), ;, caseMatches, =, PeepholeFoldConstants, ., evaluateComparison, (, Token, ., SHEQ, ,, cond, ,, caseLabel]
[;, caseMatches, =, PeepholeFoldConstants, ., evaluateComparison, (, Token, ., SHEQ, ,, cond, ,, caseLabel, ), ;, if, (, caseMatches, ==]
[., getFirstChild, (, ), ;, caseMatches, =, PeepholeFoldConstants, ., evaluateComparison, (, Token, ., SHEQ, ,, cond, ,, caseLabel, ), ;]
[=, PeepholeFoldConstants, ., evaluateComparison, (, Token, ., SHEQ, ,, cond, ,, caseLabel, ), ;, if, (, caseMatches, ==, TernaryValue, .]
[;, if, (, caseMatches, ==, TernaryValue, ., TRUE, ), {, break, ;, }, else, if, (, caseMatches, ==, TernaryValue, .]
[., evaluateComparison, (, Token, ., SHEQ, ,, cond, ,, caseLabel, ), ;, if, (, caseMatches, ==, TernaryValue, ., TRUE, )]
[,, cond, ,, caseLabel, ), ;, if, (, caseMatches, ==, TernaryValue, ., TRUE, ), {, break, ;, }, else, if]
[., SHEQ, ,, cond, ,, caseLabel, ), ;, if, (, caseMatches, ==, TernaryValue, ., TRUE, ), {, break, ;, }]
[,, caseLabel, ), ;, if, (, caseMatches, ==, TernaryValue, ., TRUE, ), {, break, ;, }, else, if, (, caseMatches]
[), ;, if, (, caseMatches, ==, TernaryValue, ., TRUE, ), {, break, ;, }, else, if, (, caseMatches, ==, TernaryValue]
[), {, break, ;, }, else, if, (, caseMatches, ==, TernaryValue, ., UNKNOWN, ), {, break, ;, }, else, {]
[==, TernaryValue, ., TRUE, ), {, break, ;, }, else, if, (, caseMatches, ==, TernaryValue, ., UNKNOWN, ), {, break]
[), {, break, ;, }, else, if, (, caseMatches, ==, TernaryValue, ., UNKNOWN, ), {, break, ;, }, else, {]
[., TRUE, ), {, break, ;, }, else, if, (, caseMatches, ==, TernaryValue, ., UNKNOWN, ), {, break, ;, }]
[), {, break, ;, }, else, {, removeCase, (, n, ,, cur, ), ;, }, }, if, (, caseMatches, !=]
[==, TernaryValue, ., UNKNOWN, ), {, break, ;, }, else, {, removeCase, (, n, ,, cur, ), ;, }, }]
[), {, break, ;, }, else, {, removeCase, (, n, ,, cur, ), ;, }, }, if, (, caseMatches, !=]
[., UNKNOWN, ), {, break, ;, }, else, {, removeCase, (, n, ,, cur, ), ;, }, }, if, (]
[;, }, }, if, (, caseMatches, !=, TernaryValue, ., UNKNOWN, ), {, Node, block, ,, lastStm, ;, while, (, cur]
[,, cur, ), ;, }, }, if, (, caseMatches, !=, TernaryValue, ., UNKNOWN, ), {, Node, block, ,, lastStm, ;]
[), ;, }, }, if, (, caseMatches, !=, TernaryValue, ., UNKNOWN, ), {, Node, block, ,, lastStm, ;, while, (]
[), {, Node, block, ,, lastStm, ;, while, (, cur, !=, null, ), {, block, =, cur, ., getLastChild, (]
[!=, TernaryValue, ., UNKNOWN, ), {, Node, block, ,, lastStm, ;, while, (, cur, !=, null, ), {, block, =]
[), {, Node, block, ,, lastStm, ;, while, (, cur, !=, null, ), {, block, =, cur, ., getLastChild, (]
[., UNKNOWN, ), {, Node, block, ,, lastStm, ;, while, (, cur, !=, null, ), {, block, =, cur, .]
[), {, block, =, cur, ., getLastChild, (, ), ;, lastStm, =, block, ., getLastChild, (, ), ;, cur, =]
[!=, null, ), {, block, =, cur, ., getLastChild, (, ), ;, lastStm, =, block, ., getLastChild, (, ), ;]
[), {, block, =, cur, ., getLastChild, (, ), ;, lastStm, =, block, ., getLastChild, (, ), ;, cur, =]
[=, cur, ., getLastChild, (, ), ;, lastStm, =, block, ., getLastChild, (, ), ;, cur, =, cur, ., getNext]
[;, lastStm, =, block, ., getLastChild, (, ), ;, cur, =, cur, ., getNext, (, ), ;, if, (, lastStm]
[., getLastChild, (, ), ;, lastStm, =, block, ., getLastChild, (, ), ;, cur, =, cur, ., getNext, (, )]
[=, block, ., getLastChild, (, ), ;, cur, =, cur, ., getNext, (, ), ;, if, (, lastStm, !=, null]
[;, cur, =, cur, ., getNext, (, ), ;, if, (, lastStm, !=, null, &&, lastStm, ., isBreak, (, )]
[., getLastChild, (, ), ;, cur, =, cur, ., getNext, (, ), ;, if, (, lastStm, !=, null, &&, lastStm]
[=, cur, ., getNext, (, ), ;, if, (, lastStm, !=, null, &&, lastStm, ., isBreak, (, ), ), {]
[;, if, (, lastStm, !=, null, &&, lastStm, ., isBreak, (, ), ), {, block, ., removeChild, (, lastStm, )]
[., getNext, (, ), ;, if, (, lastStm, !=, null, &&, lastStm, ., isBreak, (, ), ), {, block, .]
[), {, block, ., removeChild, (, lastStm, ), ;, reportCodeChange, (, ), ;, break, ;, }, }, for, (, ;]
[&&, lastStm, ., isBreak, (, ), ), {, block, ., removeChild, (, lastStm, ), ;, reportCodeChange, (, ), ;, break]
[!=, null, &&, lastStm, ., isBreak, (, ), ), {, block, ., removeChild, (, lastStm, ), ;, reportCodeChange, (, )]
[&&, lastStm, ., isBreak, (, ), ), {, block, ., removeChild, (, lastStm, ), ;, reportCodeChange, (, ), ;, break]
[), {, block, ., removeChild, (, lastStm, ), ;, reportCodeChange, (, ), ;, break, ;, }, }, for, (, ;]
[., isBreak, (, ), ), {, block, ., removeChild, (, lastStm, ), ;, reportCodeChange, (, ), ;, break, ;, }]
[;, reportCodeChange, (, ), ;, break, ;, }, }, for, (, ;, cur, !=, null, ;, cur, =, next, )]
[., removeChild, (, lastStm, ), ;, reportCodeChange, (, ), ;, break, ;, }, }, for, (, ;, cur, !=, null]
[), ;, reportCodeChange, (, ), ;, break, ;, }, }, for, (, ;, cur, !=, null, ;, cur, =, next]
[;, break, ;, }, }, for, (, ;, cur, !=, null, ;, cur, =, next, ), {, next, =, cur]
[;, cur, =, next, ), {, next, =, cur, ., getNext, (, ), ;, removeCase, (, n, ,, cur, )]
[!=, null, ;, cur, =, next, ), {, next, =, cur, ., getNext, (, ), ;, removeCase, (, n, ,]
[;, cur, =, next, ), {, next, =, cur, ., getNext, (, ), ;, removeCase, (, n, ,, cur, )]
[=, next, ), {, next, =, cur, ., getNext, (, ), ;, removeCase, (, n, ,, cur, ), ;, }]
[), {, next, =, cur, ., getNext, (, ), ;, removeCase, (, n, ,, cur, ), ;, }, cur, =]
[=, cur, ., getNext, (, ), ;, removeCase, (, n, ,, cur, ), ;, }, cur, =, cond, ., getNext]
[;, removeCase, (, n, ,, cur, ), ;, }, cur, =, cond, ., getNext, (, ), ;, if, (, cur]
[., getNext, (, ), ;, removeCase, (, n, ,, cur, ), ;, }, cur, =, cond, ., getNext, (, )]
[;, }, cur, =, cond, ., getNext, (, ), ;, if, (, cur, !=, null, &&, cur, ., getNext, (]
[,, cur, ), ;, }, cur, =, cond, ., getNext, (, ), ;, if, (, cur, !=, null, &&, cur]
[), ;, }, cur, =, cond, ., getNext, (, ), ;, if, (, cur, !=, null, &&, cur, ., getNext]
[=, cond, ., getNext, (, ), ;, if, (, cur, !=, null, &&, cur, ., getNext, (, ), ==, null]
[;, if, (, cur, !=, null, &&, cur, ., getNext, (, ), ==, null, ), {, block, =, cur, .]
[., getNext, (, ), ;, if, (, cur, !=, null, &&, cur, ., getNext, (, ), ==, null, ), {]
[), {, block, =, cur, ., getLastChild, (, ), ;, if, (, !, (, NodeUtil, ., containsType, (, block, ,]
[&&, cur, ., getNext, (, ), ==, null, ), {, block, =, cur, ., getLastChild, (, ), ;, if, (]
[!=, null, &&, cur, ., getNext, (, ), ==, null, ), {, block, =, cur, ., getLastChild, (, ), ;]
[&&, cur, ., getNext, (, ), ==, null, ), {, block, =, cur, ., getLastChild, (, ), ;, if, (]
[), {, block, =, cur, ., getLastChild, (, ), ;, if, (, !, (, NodeUtil, ., containsType, (, block, ,]
[==, null, ), {, block, =, cur, ., getLastChild, (, ), ;, if, (, !, (, NodeUtil, ., containsType, (]
[., getNext, (, ), ==, null, ), {, block, =, cur, ., getLastChild, (, ), ;, if, (, !, (]
[), {, block, =, cur, ., getLastChild, (, ), ;, if, (, !, (, NodeUtil, ., containsType, (, block, ,]
[=, cur, ., getLastChild, (, ), ;, if, (, !, (, NodeUtil, ., containsType, (, block, ,, Token, ., BREAK]
[;, if, (, !, (, NodeUtil, ., containsType, (, block, ,, Token, ., BREAK, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), )]
[., getLastChild, (, ), ;, if, (, !, (, NodeUtil, ., containsType, (, block, ,, Token, ., BREAK, ,, NodeUtil]
[), {, cur, ., removeChild, (, block, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, block]
[), {, cur, ., removeChild, (, block, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, block]
[), ), {, cur, ., removeChild, (, block, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[., containsType, (, block, ,, Token, ., BREAK, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), ), {, cur, ., removeChild, (]
[,, Token, ., BREAK, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), ), {, cur, ., removeChild, (, block, ), ;, n]
[,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), ), {, cur, ., removeChild, (, block, ), ;, n, ., getParent, (, )]
[., BREAK, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), ), {, cur, ., removeChild, (, block, ), ;, n, ., getParent]
[), ), ), {, cur, ., removeChild, (, block, ), ;, n, ., getParent, (, ), ., replaceChild, (, n]
[., MATCH_NOT_FUNCTION, ), ), ), {, cur, ., removeChild, (, block, ), ;, n, ., getParent, (, ), ., replaceChild]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, block, ), ;, reportCodeChange, (, ), ;, return, block]
[., removeChild, (, block, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, block, ), ;, reportCodeChange]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, block, ), ;, reportCodeChange, (, ), ;, return]
[;, reportCodeChange, (, ), ;, return, block, ;, }, }, }, }, }, if, (, n, ., hasOneChild, (, )]
[., replaceChild, (, n, ,, block, ), ;, reportCodeChange, (, ), ;, return, block, ;, }, }, }, }, }]
[., getParent, (, ), ., replaceChild, (, n, ,, block, ), ;, reportCodeChange, (, ), ;, return, block, ;, }]
[,, block, ), ;, reportCodeChange, (, ), ;, return, block, ;, }, }, }, }, }, if, (, n, .]
[), ;, reportCodeChange, (, ), ;, return, block, ;, }, }, }, }, }, if, (, n, ., hasOneChild, (]
[;, return, block, ;, }, }, }, }, }, if, (, n, ., hasOneChild, (, ), ), {, Node, condition]
[;, }, }, }, }, }, if, (, n, ., hasOneChild, (, ), ), {, Node, condition, =, n, .]
[), {, Node, condition, =, n, ., removeFirstChild, (, ), ;, Node, replacement, =, IR, ., exprResult, (, condition, )]
[., hasOneChild, (, ), ), {, Node, condition, =, n, ., removeFirstChild, (, ), ;, Node, replacement, =, IR, .]
[;, Node, replacement, =, IR, ., exprResult, (, condition, ), ., srcref, (, n, ), ;, n, ., getParent, (]
[., removeFirstChild, (, ), ;, Node, replacement, =, IR, ., exprResult, (, condition, ), ., srcref, (, n, ), ;]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement]
[., srcref, (, n, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange]
[., exprResult, (, condition, ), ., srcref, (, n, ), ;, n, ., getParent, (, ), ., replaceChild, (, n]
[), ., srcref, (, n, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (, ), ;, return]
[;, reportCodeChange, (, ), ;, return, replacement, ;, }, return, null, ;, }, private, Node, tryOptimizeDefaultCase, (, Node, n, )]
[., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, return, null, ;, }]
[., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }]
[,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, return, null, ;, }, private, Node, tryOptimizeDefaultCase, (]
[), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, return, null, ;, }, private, Node, tryOptimizeDefaultCase, (, Node, n]
[;, return, replacement, ;, }, return, null, ;, }, private, Node, tryOptimizeDefaultCase, (, Node, n, ), {, Preconditions, ., checkState]
[;, }, return, null, ;, }, private, Node, tryOptimizeDefaultCase, (, Node, n, ), {, Preconditions, ., checkState, (, n, .]
[;, }, private, Node, tryOptimizeDefaultCase, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isSwitch, (, ), )]
[;, Node, lastNonRemovable, =, n, ., getFirstChild, (, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, )]
[., checkState, (, n, ., isSwitch, (, ), ), ;, Node, lastNonRemovable, =, n, ., getFirstChild, (, ), ;, for]
[), ;, Node, lastNonRemovable, =, n, ., getFirstChild, (, ), ;, for, (, Node, c, =, n, ., getFirstChild, (]
[., isSwitch, (, ), ), ;, Node, lastNonRemovable, =, n, ., getFirstChild, (, ), ;, for, (, Node, c, =]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, c, !=, null, ;]
[., getFirstChild, (, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isDefaultCase, (]
[., getNext, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ., getNext, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, )]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isDefaultCase, (, ), ), {, Node]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isDefaultCase, (, ), )]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isDefaultCase, (, ), ), {, Node]
[=, c, ., getNext, (, ), ), {, if, (, c, ., isDefaultCase, (, ), ), {, Node, caseToRemove, =]
[), {, if, (, c, ., isDefaultCase, (, ), ), {, Node, caseToRemove, =, lastNonRemovable, ., getNext, (, ), ;]
[., getNext, (, ), ), {, if, (, c, ., isDefaultCase, (, ), ), {, Node, caseToRemove, =, lastNonRemovable, .]
[), {, Node, caseToRemove, =, lastNonRemovable, ., getNext, (, ), ;, for, (, Node, next, ;, caseToRemove, !=, c, ;]
[., isDefaultCase, (, ), ), {, Node, caseToRemove, =, lastNonRemovable, ., getNext, (, ), ;, for, (, Node, next, ;]
[;, for, (, Node, next, ;, caseToRemove, !=, c, ;, caseToRemove, =, next, ), {, next, =, caseToRemove, ., getNext]
[., getNext, (, ), ;, for, (, Node, next, ;, caseToRemove, !=, c, ;, caseToRemove, =, next, ), {, next]
[;, caseToRemove, =, next, ), {, next, =, caseToRemove, ., getNext, (, ), ;, removeCase, (, n, ,, caseToRemove, )]
[!=, c, ;, caseToRemove, =, next, ), {, next, =, caseToRemove, ., getNext, (, ), ;, removeCase, (, n, ,]
[;, caseToRemove, =, next, ), {, next, =, caseToRemove, ., getNext, (, ), ;, removeCase, (, n, ,, caseToRemove, )]
[=, next, ), {, next, =, caseToRemove, ., getNext, (, ), ;, removeCase, (, n, ,, caseToRemove, ), ;, }]
[), {, next, =, caseToRemove, ., getNext, (, ), ;, removeCase, (, n, ,, caseToRemove, ), ;, }, Node, prevCase]
[=, caseToRemove, ., getNext, (, ), ;, removeCase, (, n, ,, caseToRemove, ), ;, }, Node, prevCase, =, (, lastNonRemovable]
[;, removeCase, (, n, ,, caseToRemove, ), ;, }, Node, prevCase, =, (, lastNonRemovable, ==, n, ., getFirstChild, (, )]
[., getNext, (, ), ;, removeCase, (, n, ,, caseToRemove, ), ;, }, Node, prevCase, =, (, lastNonRemovable, ==, n]
[;, }, Node, prevCase, =, (, lastNonRemovable, ==, n, ., getFirstChild, (, ), ), ?, null, :, lastNonRemovable, ;, if]
[,, caseToRemove, ), ;, }, Node, prevCase, =, (, lastNonRemovable, ==, n, ., getFirstChild, (, ), ), ?, null, :]
[), ;, }, Node, prevCase, =, (, lastNonRemovable, ==, n, ., getFirstChild, (, ), ), ?, null, :, lastNonRemovable, ;]
[;, if, (, isUselessCase, (, c, ,, prevCase, ), ), {, removeCase, (, n, ,, c, ), ;, return, null]
[?, null, :, lastNonRemovable, ;, if, (, isUselessCase, (, c, ,, prevCase, ), ), {, removeCase, (, n, ,, c]
[), ?, null, :, lastNonRemovable, ;, if, (, isUselessCase, (, c, ,, prevCase, ), ), {, removeCase, (, n, ,]
[==, n, ., getFirstChild, (, ), ), ?, null, :, lastNonRemovable, ;, if, (, isUselessCase, (, c, ,, prevCase, )]
[), ?, null, :, lastNonRemovable, ;, if, (, isUselessCase, (, c, ,, prevCase, ), ), {, removeCase, (, n, ,]
[., getFirstChild, (, ), ), ?, null, :, lastNonRemovable, ;, if, (, isUselessCase, (, c, ,, prevCase, ), ), {]
[:, lastNonRemovable, ;, if, (, isUselessCase, (, c, ,, prevCase, ), ), {, removeCase, (, n, ,, c, ), ;]
[;, if, (, isUselessCase, (, c, ,, prevCase, ), ), {, removeCase, (, n, ,, c, ), ;, return, null]
[), {, removeCase, (, n, ,, c, ), ;, return, null, ;, }, return, c, ;, }, else, {, Preconditions]
[,, prevCase, ), ), {, removeCase, (, n, ,, c, ), ;, return, null, ;, }, return, c, ;, }]
[), ), {, removeCase, (, n, ,, c, ), ;, return, null, ;, }, return, c, ;, }, else, {]
[;, return, null, ;, }, return, c, ;, }, else, {, Preconditions, ., checkState, (, c, ., isCase, (, )]
[,, c, ), ;, return, null, ;, }, return, c, ;, }, else, {, Preconditions, ., checkState, (, c, .]
[), ;, return, null, ;, }, return, c, ;, }, else, {, Preconditions, ., checkState, (, c, ., isCase, (]
[;, }, return, c, ;, }, else, {, Preconditions, ., checkState, (, c, ., isCase, (, ), ), ;, if]
[;, }, else, {, Preconditions, ., checkState, (, c, ., isCase, (, ), ), ;, if, (, c, ., getLastChild]
[;, if, (, c, ., getLastChild, (, ), ., hasChildren, (, ), ||, mayHaveSideEffects, (, c, ., getFirstChild, (, )]
[., checkState, (, c, ., isCase, (, ), ), ;, if, (, c, ., getLastChild, (, ), ., hasChildren, (]
[), ;, if, (, c, ., getLastChild, (, ), ., hasChildren, (, ), ||, mayHaveSideEffects, (, c, ., getFirstChild, (]
[., isCase, (, ), ), ;, if, (, c, ., getLastChild, (, ), ., hasChildren, (, ), ||, mayHaveSideEffects, (]
[), {, lastNonRemovable, =, c, ;, }, }, }, return, null, ;, }, private, void, removeCase, (, Node, switchNode, ,]
[||, mayHaveSideEffects, (, c, ., getFirstChild, (, ), ), ), {, lastNonRemovable, =, c, ;, }, }, }, return, null]
[., hasChildren, (, ), ||, mayHaveSideEffects, (, c, ., getFirstChild, (, ), ), ), {, lastNonRemovable, =, c, ;, }]
[., getLastChild, (, ), ., hasChildren, (, ), ||, mayHaveSideEffects, (, c, ., getFirstChild, (, ), ), ), {, lastNonRemovable]
[), {, lastNonRemovable, =, c, ;, }, }, }, return, null, ;, }, private, void, removeCase, (, Node, switchNode, ,]
[), ), {, lastNonRemovable, =, c, ;, }, }, }, return, null, ;, }, private, void, removeCase, (, Node, switchNode]
[., getFirstChild, (, ), ), ), {, lastNonRemovable, =, c, ;, }, }, }, return, null, ;, }, private, void]
[=, c, ;, }, }, }, return, null, ;, }, private, void, removeCase, (, Node, switchNode, ,, Node, caseNode, )]
[;, }, }, }, return, null, ;, }, private, void, removeCase, (, Node, switchNode, ,, Node, caseNode, ), {, NodeUtil]
[;, }, private, void, removeCase, (, Node, switchNode, ,, Node, caseNode, ), {, NodeUtil, ., redeclareVarsInsideBranch, (, caseNode, ), ;]
[;, switchNode, ., removeChild, (, caseNode, ), ;, reportCodeChange, (, ), ;, }, private, boolean, isUselessCase, (, Node, caseNode, ,]
[., redeclareVarsInsideBranch, (, caseNode, ), ;, switchNode, ., removeChild, (, caseNode, ), ;, reportCodeChange, (, ), ;, }, private, boolean]
[), ;, switchNode, ., removeChild, (, caseNode, ), ;, reportCodeChange, (, ), ;, }, private, boolean, isUselessCase, (, Node, caseNode]
[;, reportCodeChange, (, ), ;, }, private, boolean, isUselessCase, (, Node, caseNode, ,, @, Nullable, Node, previousCase, ), {, Preconditions]
[., removeChild, (, caseNode, ), ;, reportCodeChange, (, ), ;, }, private, boolean, isUselessCase, (, Node, caseNode, ,, @, Nullable]
[), ;, reportCodeChange, (, ), ;, }, private, boolean, isUselessCase, (, Node, caseNode, ,, @, Nullable, Node, previousCase, ), {]
[;, }, private, boolean, isUselessCase, (, Node, caseNode, ,, @, Nullable, Node, previousCase, ), {, Preconditions, ., checkState, (, previousCase]
[;, Node, switchNode, =, caseNode, ., getParent, (, ), ;, if, (, switchNode, ., getLastChild, (, ), !=, caseNode, &&]
[., checkState, (, previousCase, ==, null, ||, previousCase, ., getNext, (, ), ==, caseNode, ), ;, Node, switchNode, =, caseNode]
[), ;, Node, switchNode, =, caseNode, ., getParent, (, ), ;, if, (, switchNode, ., getLastChild, (, ), !=, caseNode]
[||, previousCase, ., getNext, (, ), ==, caseNode, ), ;, Node, switchNode, =, caseNode, ., getParent, (, ), ;, if]
[==, null, ||, previousCase, ., getNext, (, ), ==, caseNode, ), ;, Node, switchNode, =, caseNode, ., getParent, (, )]
[||, previousCase, ., getNext, (, ), ==, caseNode, ), ;, Node, switchNode, =, caseNode, ., getParent, (, ), ;, if]
[), ;, Node, switchNode, =, caseNode, ., getParent, (, ), ;, if, (, switchNode, ., getLastChild, (, ), !=, caseNode]
[==, caseNode, ), ;, Node, switchNode, =, caseNode, ., getParent, (, ), ;, if, (, switchNode, ., getLastChild, (, )]
[., getNext, (, ), ==, caseNode, ), ;, Node, switchNode, =, caseNode, ., getParent, (, ), ;, if, (, switchNode]
[), ;, Node, switchNode, =, caseNode, ., getParent, (, ), ;, if, (, switchNode, ., getLastChild, (, ), !=, caseNode]
[;, if, (, switchNode, ., getLastChild, (, ), !=, caseNode, &&, previousCase, !=, null, ), {, Node, previousBlock, =, previousCase]
[., getParent, (, ), ;, if, (, switchNode, ., getLastChild, (, ), !=, caseNode, &&, previousCase, !=, null, ), {]
[), {, Node, previousBlock, =, previousCase, ., getLastChild, (, ), ;, if, (, !, previousBlock, ., hasChildren, (, ), ||]
[&&, previousCase, !=, null, ), {, Node, previousBlock, =, previousCase, ., getLastChild, (, ), ;, if, (, !, previousBlock, .]
[!=, caseNode, &&, previousCase, !=, null, ), {, Node, previousBlock, =, previousCase, ., getLastChild, (, ), ;, if, (, !]
[., getLastChild, (, ), !=, caseNode, &&, previousCase, !=, null, ), {, Node, previousBlock, =, previousCase, ., getLastChild, (, )]
[&&, previousCase, !=, null, ), {, Node, previousBlock, =, previousCase, ., getLastChild, (, ), ;, if, (, !, previousBlock, .]
[), {, Node, previousBlock, =, previousCase, ., getLastChild, (, ), ;, if, (, !, previousBlock, ., hasChildren, (, ), ||]
[!=, null, ), {, Node, previousBlock, =, previousCase, ., getLastChild, (, ), ;, if, (, !, previousBlock, ., hasChildren, (]
[), {, Node, previousBlock, =, previousCase, ., getLastChild, (, ), ;, if, (, !, previousBlock, ., hasChildren, (, ), ||]
[;, if, (, !, previousBlock, ., hasChildren, (, ), ||, !, isExit, (, previousBlock, ., getLastChild, (, ), ), )]
[., getLastChild, (, ), ;, if, (, !, previousBlock, ., hasChildren, (, ), ||, !, isExit, (, previousBlock, ., getLastChild]
[), {, return, false, ;, }, }, Node, executingCase, =, caseNode, ;, while, (, executingCase, !=, null, ), {, Preconditions]
[||, !, isExit, (, previousBlock, ., getLastChild, (, ), ), ), {, return, false, ;, }, }, Node, executingCase, =]
[||, !, isExit, (, previousBlock, ., getLastChild, (, ), ), ), {, return, false, ;, }, }, Node, executingCase, =]
[., hasChildren, (, ), ||, !, isExit, (, previousBlock, ., getLastChild, (, ), ), ), {, return, false, ;, }]
[), {, return, false, ;, }, }, Node, executingCase, =, caseNode, ;, while, (, executingCase, !=, null, ), {, Preconditions]
[), {, return, false, ;, }, }, Node, executingCase, =, caseNode, ;, while, (, executingCase, !=, null, ), {, Preconditions]
[), ), {, return, false, ;, }, }, Node, executingCase, =, caseNode, ;, while, (, executingCase, !=, null, ), {]
[., getLastChild, (, ), ), ), {, return, false, ;, }, }, Node, executingCase, =, caseNode, ;, while, (, executingCase]
[;, }, }, Node, executingCase, =, caseNode, ;, while, (, executingCase, !=, null, ), {, Preconditions, ., checkState, (, executingCase]
[;, while, (, executingCase, !=, null, ), {, Preconditions, ., checkState, (, executingCase, ., isDefaultCase, (, ), ||, executingCase, .]
[), {, Preconditions, ., checkState, (, executingCase, ., isDefaultCase, (, ), ||, executingCase, ., isCase, (, ), ), ;, Preconditions]
[!=, null, ), {, Preconditions, ., checkState, (, executingCase, ., isDefaultCase, (, ), ||, executingCase, ., isCase, (, ), )]
[), {, Preconditions, ., checkState, (, executingCase, ., isDefaultCase, (, ), ||, executingCase, ., isCase, (, ), ), ;, Preconditions]
[;, Preconditions, ., checkState, (, caseNode, ==, executingCase, ||, !, executingCase, ., isDefaultCase, (, ), ), ;, Node, block, =]
[., checkState, (, executingCase, ., isDefaultCase, (, ), ||, executingCase, ., isCase, (, ), ), ;, Preconditions, ., checkState, (]
[), ;, Preconditions, ., checkState, (, caseNode, ==, executingCase, ||, !, executingCase, ., isDefaultCase, (, ), ), ;, Node, block]
[||, executingCase, ., isCase, (, ), ), ;, Preconditions, ., checkState, (, caseNode, ==, executingCase, ||, !, executingCase, ., isDefaultCase]
[., isDefaultCase, (, ), ||, executingCase, ., isCase, (, ), ), ;, Preconditions, ., checkState, (, caseNode, ==, executingCase, ||]
[), ;, Preconditions, ., checkState, (, caseNode, ==, executingCase, ||, !, executingCase, ., isDefaultCase, (, ), ), ;, Node, block]
[., isCase, (, ), ), ;, Preconditions, ., checkState, (, caseNode, ==, executingCase, ||, !, executingCase, ., isDefaultCase, (, )]
[;, Node, block, =, executingCase, ., getLastChild, (, ), ;, Preconditions, ., checkState, (, block, ., isBlock, (, ), )]
[., checkState, (, caseNode, ==, executingCase, ||, !, executingCase, ., isDefaultCase, (, ), ), ;, Node, block, =, executingCase, .]
[), ;, Node, block, =, executingCase, ., getLastChild, (, ), ;, Preconditions, ., checkState, (, block, ., isBlock, (, )]
[||, !, executingCase, ., isDefaultCase, (, ), ), ;, Node, block, =, executingCase, ., getLastChild, (, ), ;, Preconditions, .]
[==, executingCase, ||, !, executingCase, ., isDefaultCase, (, ), ), ;, Node, block, =, executingCase, ., getLastChild, (, ), ;]
[||, !, executingCase, ., isDefaultCase, (, ), ), ;, Node, block, =, executingCase, ., getLastChild, (, ), ;, Preconditions, .]
[), ;, Node, block, =, executingCase, ., getLastChild, (, ), ;, Preconditions, ., checkState, (, block, ., isBlock, (, )]
[), ;, Node, block, =, executingCase, ., getLastChild, (, ), ;, Preconditions, ., checkState, (, block, ., isBlock, (, )]
[., isDefaultCase, (, ), ), ;, Node, block, =, executingCase, ., getLastChild, (, ), ;, Preconditions, ., checkState, (, block]
[;, Preconditions, ., checkState, (, block, ., isBlock, (, ), ), ;, if, (, block, ., hasChildren, (, ), )]
[., getLastChild, (, ), ;, Preconditions, ., checkState, (, block, ., isBlock, (, ), ), ;, if, (, block, .]
[;, if, (, block, ., hasChildren, (, ), ), {, for, (, Node, blockChild, :, block, ., children, (, )]
[., checkState, (, block, ., isBlock, (, ), ), ;, if, (, block, ., hasChildren, (, ), ), {, for]
[), ;, if, (, block, ., hasChildren, (, ), ), {, for, (, Node, blockChild, :, block, ., children, (]
[., isBlock, (, ), ), ;, if, (, block, ., hasChildren, (, ), ), {, for, (, Node, blockChild, :]
[), {, for, (, Node, blockChild, :, block, ., children, (, ), ), {, switch, (, blockChild, ., getType, (]
[., hasChildren, (, ), ), {, for, (, Node, blockChild, :, block, ., children, (, ), ), {, switch, (]
[), {, switch, (, blockChild, ., getType, (, ), ), {, case, Token, ., BREAK, :, return, blockChild, ., getFirstChild]
[., children, (, ), ), {, switch, (, blockChild, ., getType, (, ), ), {, case, Token, ., BREAK, :]
[), {, case, Token, ., BREAK, :, return, blockChild, ., getFirstChild, (, ), ==, null, ;, case, Token, ., VAR]
[., getType, (, ), ), {, case, Token, ., BREAK, :, return, blockChild, ., getFirstChild, (, ), ==, null, ;]
[:, return, blockChild, ., getFirstChild, (, ), ==, null, ;, case, Token, ., VAR, :, if, (, blockChild, ., hasOneChild]
[., BREAK, :, return, blockChild, ., getFirstChild, (, ), ==, null, ;, case, Token, ., VAR, :, if, (, blockChild]
[;, case, Token, ., VAR, :, if, (, blockChild, ., hasOneChild, (, ), &&, blockChild, ., getFirstChild, (, ), .]
[==, null, ;, case, Token, ., VAR, :, if, (, blockChild, ., hasOneChild, (, ), &&, blockChild, ., getFirstChild, (]
[., getFirstChild, (, ), ==, null, ;, case, Token, ., VAR, :, if, (, blockChild, ., hasOneChild, (, ), &&]
[;, case, Token, ., VAR, :, if, (, blockChild, ., hasOneChild, (, ), &&, blockChild, ., getFirstChild, (, ), .]
[:, if, (, blockChild, ., hasOneChild, (, ), &&, blockChild, ., getFirstChild, (, ), ., getFirstChild, (, ), ==, null]
[., VAR, :, if, (, blockChild, ., hasOneChild, (, ), &&, blockChild, ., getFirstChild, (, ), ., getFirstChild, (, )]
[), {, continue, ;, }, return, false, ;, default, :, return, false, ;, }, }, }, else, {, executingCase, =]
[&&, blockChild, ., getFirstChild, (, ), ., getFirstChild, (, ), ==, null, ), {, continue, ;, }, return, false, ;]
[., hasOneChild, (, ), &&, blockChild, ., getFirstChild, (, ), ., getFirstChild, (, ), ==, null, ), {, continue, ;]
[), {, continue, ;, }, return, false, ;, default, :, return, false, ;, }, }, }, else, {, executingCase, =]
[==, null, ), {, continue, ;, }, return, false, ;, default, :, return, false, ;, }, }, }, else, {]
[., getFirstChild, (, ), ==, null, ), {, continue, ;, }, return, false, ;, default, :, return, false, ;, }]
[., getFirstChild, (, ), ., getFirstChild, (, ), ==, null, ), {, continue, ;, }, return, false, ;, default, :]
[), {, continue, ;, }, return, false, ;, default, :, return, false, ;, }, }, }, else, {, executingCase, =]
[;, default, :, return, false, ;, }, }, }, else, {, executingCase, =, executingCase, ., getNext, (, ), ;, }]
[;, }, }, }, else, {, executingCase, =, executingCase, ., getNext, (, ), ;, }, }, return, true, ;, }]
[=, executingCase, ., getNext, (, ), ;, }, }, return, true, ;, }, private, boolean, isExit, (, Node, n, )]
[;, }, }, return, true, ;, }, private, boolean, isExit, (, Node, n, ), {, switch, (, n, ., getType]
[., getNext, (, ), ;, }, }, return, true, ;, }, private, boolean, isExit, (, Node, n, ), {, switch]
[;, }, private, boolean, isExit, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[), {, case, Token, ., BREAK, :, case, Token, ., CONTINUE, :, case, Token, ., RETURN, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., BREAK, :, case, Token, ., CONTINUE, :, case, Token, ., RETURN]
[:, case, Token, ., CONTINUE, :, case, Token, ., RETURN, :, case, Token, ., THROW, :, return, true, ;, default]
[., BREAK, :, case, Token, ., CONTINUE, :, case, Token, ., RETURN, :, case, Token, ., THROW, :, return, true]
[:, case, Token, ., RETURN, :, case, Token, ., THROW, :, return, true, ;, default, :, return, false, ;, }]
[., CONTINUE, :, case, Token, ., RETURN, :, case, Token, ., THROW, :, return, true, ;, default, :, return, false]
[:, case, Token, ., THROW, :, return, true, ;, default, :, return, false, ;, }, }, private, Node, tryFoldComma, (]
[., RETURN, :, case, Token, ., THROW, :, return, true, ;, default, :, return, false, ;, }, }, private, Node]
[:, return, true, ;, default, :, return, false, ;, }, }, private, Node, tryFoldComma, (, Node, n, ), {, Node]
[., THROW, :, return, true, ;, default, :, return, false, ;, }, }, private, Node, tryFoldComma, (, Node, n, )]
[;, default, :, return, false, ;, }, }, private, Node, tryFoldComma, (, Node, n, ), {, Node, parent, =, n]
[;, }, }, private, Node, tryFoldComma, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;]
[;, Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;, left]
[., getParent, (, ), ;, Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =, left, ., getNext]
[;, Node, right, =, left, ., getNext, (, ), ;, left, =, trySimplifyUnusedResult, (, left, ), ;, if, (, left]
[., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;, left, =, trySimplifyUnusedResult, (, left, )]
[;, left, =, trySimplifyUnusedResult, (, left, ), ;, if, (, left, ==, null, ||, !, mayHaveSideEffects, (, left, ), )]
[., getNext, (, ), ;, left, =, trySimplifyUnusedResult, (, left, ), ;, if, (, left, ==, null, ||, !, mayHaveSideEffects]
[=, trySimplifyUnusedResult, (, left, ), ;, if, (, left, ==, null, ||, !, mayHaveSideEffects, (, left, ), ), {, n]
[;, if, (, left, ==, null, ||, !, mayHaveSideEffects, (, left, ), ), {, n, ., removeChild, (, right, )]
[), ;, if, (, left, ==, null, ||, !, mayHaveSideEffects, (, left, ), ), {, n, ., removeChild, (, right]
[), {, n, ., removeChild, (, right, ), ;, parent, ., replaceChild, (, n, ,, right, ), ;, reportCodeChange, (]
[||, !, mayHaveSideEffects, (, left, ), ), {, n, ., removeChild, (, right, ), ;, parent, ., replaceChild, (, n]
[==, null, ||, !, mayHaveSideEffects, (, left, ), ), {, n, ., removeChild, (, right, ), ;, parent, ., replaceChild]
[||, !, mayHaveSideEffects, (, left, ), ), {, n, ., removeChild, (, right, ), ;, parent, ., replaceChild, (, n]
[), {, n, ., removeChild, (, right, ), ;, parent, ., replaceChild, (, n, ,, right, ), ;, reportCodeChange, (]
[), {, n, ., removeChild, (, right, ), ;, parent, ., replaceChild, (, n, ,, right, ), ;, reportCodeChange, (]
[), ), {, n, ., removeChild, (, right, ), ;, parent, ., replaceChild, (, n, ,, right, ), ;, reportCodeChange]
[;, parent, ., replaceChild, (, n, ,, right, ), ;, reportCodeChange, (, ), ;, return, right, ;, }, return, n]
[., removeChild, (, right, ), ;, parent, ., replaceChild, (, n, ,, right, ), ;, reportCodeChange, (, ), ;, return]
[), ;, parent, ., replaceChild, (, n, ,, right, ), ;, reportCodeChange, (, ), ;, return, right, ;, }, return]
[;, reportCodeChange, (, ), ;, return, right, ;, }, return, n, ;, }, Node, tryOptimizeBlock, (, Node, n, ), {]
[., replaceChild, (, n, ,, right, ), ;, reportCodeChange, (, ), ;, return, right, ;, }, return, n, ;, }]
[,, right, ), ;, reportCodeChange, (, ), ;, return, right, ;, }, return, n, ;, }, Node, tryOptimizeBlock, (, Node]
[), ;, reportCodeChange, (, ), ;, return, right, ;, }, return, n, ;, }, Node, tryOptimizeBlock, (, Node, n, )]
[;, return, right, ;, }, return, n, ;, }, Node, tryOptimizeBlock, (, Node, n, ), {, for, (, Node, c]
[;, }, return, n, ;, }, Node, tryOptimizeBlock, (, Node, n, ), {, for, (, Node, c, =, n, .]
[;, }, Node, tryOptimizeBlock, (, Node, n, ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[;, c, !=, null, ;, ), {, Node, next, =, c, ., getNext, (, ), ;, if, (, !, isUnremovableNode]
[., getFirstChild, (, ), ;, c, !=, null, ;, ), {, Node, next, =, c, ., getNext, (, ), ;]
[;, ), {, Node, next, =, c, ., getNext, (, ), ;, if, (, !, isUnremovableNode, (, c, ), &&]
[!=, null, ;, ), {, Node, next, =, c, ., getNext, (, ), ;, if, (, !, isUnremovableNode, (, c]
[;, ), {, Node, next, =, c, ., getNext, (, ), ;, if, (, !, isUnremovableNode, (, c, ), &&]
[;, if, (, !, isUnremovableNode, (, c, ), &&, !, mayHaveSideEffects, (, c, ), ), {, n, ., removeChild, (]
[., getNext, (, ), ;, if, (, !, isUnremovableNode, (, c, ), &&, !, mayHaveSideEffects, (, c, ), ), {]
[), {, n, ., removeChild, (, c, ), ;, reportCodeChange, (, ), ;, }, else, {, tryOptimizeConditionalAfterAssign, (, c, )]
[&&, !, mayHaveSideEffects, (, c, ), ), {, n, ., removeChild, (, c, ), ;, reportCodeChange, (, ), ;, }]
[&&, !, mayHaveSideEffects, (, c, ), ), {, n, ., removeChild, (, c, ), ;, reportCodeChange, (, ), ;, }]
[), &&, !, mayHaveSideEffects, (, c, ), ), {, n, ., removeChild, (, c, ), ;, reportCodeChange, (, ), ;]
[), {, n, ., removeChild, (, c, ), ;, reportCodeChange, (, ), ;, }, else, {, tryOptimizeConditionalAfterAssign, (, c, )]
[), {, n, ., removeChild, (, c, ), ;, reportCodeChange, (, ), ;, }, else, {, tryOptimizeConditionalAfterAssign, (, c, )]
[), ), {, n, ., removeChild, (, c, ), ;, reportCodeChange, (, ), ;, }, else, {, tryOptimizeConditionalAfterAssign, (, c]
[;, reportCodeChange, (, ), ;, }, else, {, tryOptimizeConditionalAfterAssign, (, c, ), ;, }, c, =, next, ;, }, if]
[., removeChild, (, c, ), ;, reportCodeChange, (, ), ;, }, else, {, tryOptimizeConditionalAfterAssign, (, c, ), ;, }, c]
[), ;, reportCodeChange, (, ), ;, }, else, {, tryOptimizeConditionalAfterAssign, (, c, ), ;, }, c, =, next, ;, }]
[;, }, else, {, tryOptimizeConditionalAfterAssign, (, c, ), ;, }, c, =, next, ;, }, if, (, n, ., isSyntheticBlock]
[;, }, c, =, next, ;, }, if, (, n, ., isSyntheticBlock, (, ), ||, n, ., getParent, (, )]
[), ;, }, c, =, next, ;, }, if, (, n, ., isSyntheticBlock, (, ), ||, n, ., getParent, (]
[=, next, ;, }, if, (, n, ., isSyntheticBlock, (, ), ||, n, ., getParent, (, ), ==, null, )]
[;, }, if, (, n, ., isSyntheticBlock, (, ), ||, n, ., getParent, (, ), ==, null, ), {, return]
[), {, return, n, ;, }, if, (, NodeUtil, ., tryMergeBlock, (, n, ), ), {, reportCodeChange, (, ), ;]
[||, n, ., getParent, (, ), ==, null, ), {, return, n, ;, }, if, (, NodeUtil, ., tryMergeBlock, (]
[., isSyntheticBlock, (, ), ||, n, ., getParent, (, ), ==, null, ), {, return, n, ;, }, if, (]
[), {, return, n, ;, }, if, (, NodeUtil, ., tryMergeBlock, (, n, ), ), {, reportCodeChange, (, ), ;]
[==, null, ), {, return, n, ;, }, if, (, NodeUtil, ., tryMergeBlock, (, n, ), ), {, reportCodeChange, (]
[., getParent, (, ), ==, null, ), {, return, n, ;, }, if, (, NodeUtil, ., tryMergeBlock, (, n, )]
[), {, return, n, ;, }, if, (, NodeUtil, ., tryMergeBlock, (, n, ), ), {, reportCodeChange, (, ), ;]
[;, }, if, (, NodeUtil, ., tryMergeBlock, (, n, ), ), {, reportCodeChange, (, ), ;, return, null, ;, }]
[), {, reportCodeChange, (, ), ;, return, null, ;, }, return, n, ;, }, private, boolean, isUnremovableNode, (, Node, n]
[., tryMergeBlock, (, n, ), ), {, reportCodeChange, (, ), ;, return, null, ;, }, return, n, ;, }, private]
[), ), {, reportCodeChange, (, ), ;, return, null, ;, }, return, n, ;, }, private, boolean, isUnremovableNode, (, Node]
[;, return, null, ;, }, return, n, ;, }, private, boolean, isUnremovableNode, (, Node, n, ), {, return, (, n]
[;, }, return, n, ;, }, private, boolean, isUnremovableNode, (, Node, n, ), {, return, (, n, ., isBlock, (]
[;, }, private, boolean, isUnremovableNode, (, Node, n, ), {, return, (, n, ., isBlock, (, ), &&, n, .]
[;, }, private, void, tryOptimizeConditionalAfterAssign, (, Node, n, ), {, Node, next, =, n, ., getNext, (, ), ;, if]
[||, n, ., isScript, (, ), ;, }, private, void, tryOptimizeConditionalAfterAssign, (, Node, n, ), {, Node, next, =, n]
[), ||, n, ., isScript, (, ), ;, }, private, void, tryOptimizeConditionalAfterAssign, (, Node, n, ), {, Node, next, =]
[&&, n, ., isSyntheticBlock, (, ), ), ||, n, ., isScript, (, ), ;, }, private, void, tryOptimizeConditionalAfterAssign, (, Node]
[., isBlock, (, ), &&, n, ., isSyntheticBlock, (, ), ), ||, n, ., isScript, (, ), ;, }, private]
[), ||, n, ., isScript, (, ), ;, }, private, void, tryOptimizeConditionalAfterAssign, (, Node, n, ), {, Node, next, =]
[., isSyntheticBlock, (, ), ), ||, n, ., isScript, (, ), ;, }, private, void, tryOptimizeConditionalAfterAssign, (, Node, n, )]
[;, }, private, void, tryOptimizeConditionalAfterAssign, (, Node, n, ), {, Node, next, =, n, ., getNext, (, ), ;, if]
[., isScript, (, ), ;, }, private, void, tryOptimizeConditionalAfterAssign, (, Node, n, ), {, Node, next, =, n, ., getNext]
[;, if, (, isSimpleAssignment, (, n, ), &&, isConditionalStatement, (, next, ), ), {, Node, lhsAssign, =, getSimpleAssignmentName, (, n]
[., getNext, (, ), ;, if, (, isSimpleAssignment, (, n, ), &&, isConditionalStatement, (, next, ), ), {, Node, lhsAssign]
[), {, Node, lhsAssign, =, getSimpleAssignmentName, (, n, ), ;, Node, condition, =, getConditionalStatementCondition, (, next, ), ;, if, (]
[&&, isConditionalStatement, (, next, ), ), {, Node, lhsAssign, =, getSimpleAssignmentName, (, n, ), ;, Node, condition, =, getConditionalStatementCondition, (]
[), &&, isConditionalStatement, (, next, ), ), {, Node, lhsAssign, =, getSimpleAssignmentName, (, n, ), ;, Node, condition, =, getConditionalStatementCondition]
[), {, Node, lhsAssign, =, getSimpleAssignmentName, (, n, ), ;, Node, condition, =, getConditionalStatementCondition, (, next, ), ;, if, (]
[), ), {, Node, lhsAssign, =, getSimpleAssignmentName, (, n, ), ;, Node, condition, =, getConditionalStatementCondition, (, next, ), ;, if]
[;, Node, condition, =, getConditionalStatementCondition, (, next, ), ;, if, (, lhsAssign, ., isName, (, ), &&, condition, ., isName]
[), ;, Node, condition, =, getConditionalStatementCondition, (, next, ), ;, if, (, lhsAssign, ., isName, (, ), &&, condition, .]
[;, if, (, lhsAssign, ., isName, (, ), &&, condition, ., isName, (, ), &&, lhsAssign, ., getString, (, )]
[), ;, if, (, lhsAssign, ., isName, (, ), &&, condition, ., isName, (, ), &&, lhsAssign, ., getString, (]
[), {, Node, rhsAssign, =, getSimpleAssignmentValue, (, n, ), ;, TernaryValue, value, =, NodeUtil, ., getImpureBooleanValue, (, rhsAssign, ), ;]
[&&, lhsAssign, ., getString, (, ), ., equals, (, condition, ., getString, (, ), ), ), {, Node, rhsAssign, =]
[&&, condition, ., isName, (, ), &&, lhsAssign, ., getString, (, ), ., equals, (, condition, ., getString, (, )]
[., isName, (, ), &&, condition, ., isName, (, ), &&, lhsAssign, ., getString, (, ), ., equals, (, condition]
[&&, lhsAssign, ., getString, (, ), ., equals, (, condition, ., getString, (, ), ), ), {, Node, rhsAssign, =]
[., isName, (, ), &&, lhsAssign, ., getString, (, ), ., equals, (, condition, ., getString, (, ), ), )]
[), {, Node, rhsAssign, =, getSimpleAssignmentValue, (, n, ), ;, TernaryValue, value, =, NodeUtil, ., getImpureBooleanValue, (, rhsAssign, ), ;]
[., equals, (, condition, ., getString, (, ), ), ), {, Node, rhsAssign, =, getSimpleAssignmentValue, (, n, ), ;, TernaryValue]
[., getString, (, ), ., equals, (, condition, ., getString, (, ), ), ), {, Node, rhsAssign, =, getSimpleAssignmentValue, (]
[), ), {, Node, rhsAssign, =, getSimpleAssignmentValue, (, n, ), ;, TernaryValue, value, =, NodeUtil, ., getImpureBooleanValue, (, rhsAssign, )]
[., getString, (, ), ), ), {, Node, rhsAssign, =, getSimpleAssignmentValue, (, n, ), ;, TernaryValue, value, =, NodeUtil, .]
[;, TernaryValue, value, =, NodeUtil, ., getImpureBooleanValue, (, rhsAssign, ), ;, if, (, value, !=, TernaryValue, ., UNKNOWN, ), {]
[), ;, TernaryValue, value, =, NodeUtil, ., getImpureBooleanValue, (, rhsAssign, ), ;, if, (, value, !=, TernaryValue, ., UNKNOWN, )]
[;, if, (, value, !=, TernaryValue, ., UNKNOWN, ), {, Node, replacementConditionNode, =, NodeUtil, ., booleanNode, (, value, ., toBoolean]
[., getImpureBooleanValue, (, rhsAssign, ), ;, if, (, value, !=, TernaryValue, ., UNKNOWN, ), {, Node, replacementConditionNode, =, NodeUtil, .]
[), ;, if, (, value, !=, TernaryValue, ., UNKNOWN, ), {, Node, replacementConditionNode, =, NodeUtil, ., booleanNode, (, value, .]
[), {, Node, replacementConditionNode, =, NodeUtil, ., booleanNode, (, value, ., toBoolean, (, true, ), ), ;, condition, ., getParent]
[!=, TernaryValue, ., UNKNOWN, ), {, Node, replacementConditionNode, =, NodeUtil, ., booleanNode, (, value, ., toBoolean, (, true, ), )]
[), {, Node, replacementConditionNode, =, NodeUtil, ., booleanNode, (, value, ., toBoolean, (, true, ), ), ;, condition, ., getParent]
[., UNKNOWN, ), {, Node, replacementConditionNode, =, NodeUtil, ., booleanNode, (, value, ., toBoolean, (, true, ), ), ;, condition]
[;, condition, ., getParent, (, ), ., replaceChild, (, condition, ,, replacementConditionNode, ), ;, reportCodeChange, (, ), ;, }, }]
[., booleanNode, (, value, ., toBoolean, (, true, ), ), ;, condition, ., getParent, (, ), ., replaceChild, (, condition]
[), ;, condition, ., getParent, (, ), ., replaceChild, (, condition, ,, replacementConditionNode, ), ;, reportCodeChange, (, ), ;, }]
[., toBoolean, (, true, ), ), ;, condition, ., getParent, (, ), ., replaceChild, (, condition, ,, replacementConditionNode, ), ;]
[), ), ;, condition, ., getParent, (, ), ., replaceChild, (, condition, ,, replacementConditionNode, ), ;, reportCodeChange, (, ), ;]
[;, reportCodeChange, (, ), ;, }, }, }, }, private, boolean, isSimpleAssignment, (, Node, n, ), {, if, (, NodeUtil]
[., replaceChild, (, condition, ,, replacementConditionNode, ), ;, reportCodeChange, (, ), ;, }, }, }, }, private, boolean, isSimpleAssignment, (]
[., getParent, (, ), ., replaceChild, (, condition, ,, replacementConditionNode, ), ;, reportCodeChange, (, ), ;, }, }, }, }]
[,, replacementConditionNode, ), ;, reportCodeChange, (, ), ;, }, }, }, }, private, boolean, isSimpleAssignment, (, Node, n, ), {]
[), ;, reportCodeChange, (, ), ;, }, }, }, }, private, boolean, isSimpleAssignment, (, Node, n, ), {, if, (]
[;, }, }, }, }, private, boolean, isSimpleAssignment, (, Node, n, ), {, if, (, NodeUtil, ., isExprAssign, (, n]
[), {, return, true, ;, }, else, if, (, n, ., isVar, (, ), &&, n, ., hasOneChild, (, )]
[&&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ., isName, (, ), ), {, return, true, ;, }]
[., isExprAssign, (, n, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ., isName, (, ), )]
[), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ., isName, (, ), ), {, return, true, ;]
[), {, return, true, ;, }, else, if, (, n, ., isVar, (, ), &&, n, ., hasOneChild, (, )]
[., isName, (, ), ), {, return, true, ;, }, else, if, (, n, ., isVar, (, ), &&, n]
[., getFirstChild, (, ), ., isName, (, ), ), {, return, true, ;, }, else, if, (, n, ., isVar]
[., getFirstChild, (, ), ., getFirstChild, (, ), ., isName, (, ), ), {, return, true, ;, }, else, if]
[;, }, else, if, (, n, ., isVar, (, ), &&, n, ., hasOneChild, (, ), &&, n, ., getFirstChild]
[), {, return, true, ;, }, return, false, ;, }, private, Node, getSimpleAssignmentName, (, Node, n, ), {, Preconditions, .]
[&&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, return, true, ;, }, return, false]
[&&, n, ., hasOneChild, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {]
[., isVar, (, ), &&, n, ., hasOneChild, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[&&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, return, true, ;, }, return, false]
[., hasOneChild, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, return, true]
[), {, return, true, ;, }, return, false, ;, }, private, Node, getSimpleAssignmentName, (, Node, n, ), {, Preconditions, .]
[!=, null, ), {, return, true, ;, }, return, false, ;, }, private, Node, getSimpleAssignmentName, (, Node, n, ), {]
[., getFirstChild, (, ), !=, null, ), {, return, true, ;, }, return, false, ;, }, private, Node, getSimpleAssignmentName, (]
[., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, return, true, ;, }, return, false, ;, }]
[), {, return, true, ;, }, return, false, ;, }, private, Node, getSimpleAssignmentName, (, Node, n, ), {, Preconditions, .]
[;, }, return, false, ;, }, private, Node, getSimpleAssignmentName, (, Node, n, ), {, Preconditions, ., checkState, (, isSimpleAssignment, (]
[;, }, private, Node, getSimpleAssignmentName, (, Node, n, ), {, Preconditions, ., checkState, (, isSimpleAssignment, (, n, ), ), ;]
[;, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (]
[., checkState, (, isSimpleAssignment, (, n, ), ), ;, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return]
[), ;, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return, n, ., getFirstChild, (, ), ., getFirstChild]
[), ), ;, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return, n, ., getFirstChild, (, ), .]
[), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, else, {, return, n, ., getFirstChild]
[., isExprAssign, (, n, ), ), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, else]
[), ), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, else, {, return, n, .]
[;, }, else, {, return, n, ., getFirstChild, (, ), ;, }, }, private, Node, getSimpleAssignmentValue, (, Node, n, )]
[., getFirstChild, (, ), ;, }, else, {, return, n, ., getFirstChild, (, ), ;, }, }, private, Node, getSimpleAssignmentValue]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, else, {, return, n, ., getFirstChild, (, ), ;, }]
[;, }, }, private, Node, getSimpleAssignmentValue, (, Node, n, ), {, Preconditions, ., checkState, (, isSimpleAssignment, (, n, ), )]
[., getFirstChild, (, ), ;, }, }, private, Node, getSimpleAssignmentValue, (, Node, n, ), {, Preconditions, ., checkState, (, isSimpleAssignment]
[;, return, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, }, private, boolean, isConditionalStatement, (, Node, n, )]
[., checkState, (, isSimpleAssignment, (, n, ), ), ;, return, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;]
[), ;, return, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, }, private, boolean, isConditionalStatement, (, Node, n]
[), ), ;, return, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, }, private, boolean, isConditionalStatement, (, Node]
[;, }, private, boolean, isConditionalStatement, (, Node, n, ), {, return, n, !=, null, &&, (, n, ., isIf, (]
[., getLastChild, (, ), ;, }, private, boolean, isConditionalStatement, (, Node, n, ), {, return, n, !=, null, &&, (]
[., getFirstChild, (, ), ., getLastChild, (, ), ;, }, private, boolean, isConditionalStatement, (, Node, n, ), {, return, n]
[;, }, private, boolean, isExprConditional, (, Node, n, ), {, if, (, n, ., isExprResult, (, ), ), {, switch]
[&&, (, n, ., isIf, (, ), ||, isExprConditional, (, n, ), ), ;, }, private, boolean, isExprConditional, (, Node]
[!=, null, &&, (, n, ., isIf, (, ), ||, isExprConditional, (, n, ), ), ;, }, private, boolean, isExprConditional]
[&&, (, n, ., isIf, (, ), ||, isExprConditional, (, n, ), ), ;, }, private, boolean, isExprConditional, (, Node]
[;, }, private, boolean, isExprConditional, (, Node, n, ), {, if, (, n, ., isExprResult, (, ), ), {, switch]
[), ;, }, private, boolean, isExprConditional, (, Node, n, ), {, if, (, n, ., isExprResult, (, ), ), {]
[||, isExprConditional, (, n, ), ), ;, }, private, boolean, isExprConditional, (, Node, n, ), {, if, (, n, .]
[., isIf, (, ), ||, isExprConditional, (, n, ), ), ;, }, private, boolean, isExprConditional, (, Node, n, ), {]
[), ;, }, private, boolean, isExprConditional, (, Node, n, ), {, if, (, n, ., isExprResult, (, ), ), {]
[), ), ;, }, private, boolean, isExprConditional, (, Node, n, ), {, if, (, n, ., isExprResult, (, ), )]
[), {, switch, (, n, ., getFirstChild, (, ), ., getType, (, ), ), {, case, Token, ., HOOK, :]
[., isExprResult, (, ), ), {, switch, (, n, ., getFirstChild, (, ), ., getType, (, ), ), {, case]
[), {, case, Token, ., HOOK, :, case, Token, ., AND, :, case, Token, ., OR, :, return, true, ;]
[., getType, (, ), ), {, case, Token, ., HOOK, :, case, Token, ., AND, :, case, Token, ., OR]
[., getFirstChild, (, ), ., getType, (, ), ), {, case, Token, ., HOOK, :, case, Token, ., AND, :]
[:, case, Token, ., AND, :, case, Token, ., OR, :, return, true, ;, }, }, return, false, ;, }]
[., HOOK, :, case, Token, ., AND, :, case, Token, ., OR, :, return, true, ;, }, }, return, false]
[:, case, Token, ., OR, :, return, true, ;, }, }, return, false, ;, }, private, Node, getConditionalStatementCondition, (, Node]
[., AND, :, case, Token, ., OR, :, return, true, ;, }, }, return, false, ;, }, private, Node, getConditionalStatementCondition]
[:, return, true, ;, }, }, return, false, ;, }, private, Node, getConditionalStatementCondition, (, Node, n, ), {, if, (]
[., OR, :, return, true, ;, }, }, return, false, ;, }, private, Node, getConditionalStatementCondition, (, Node, n, ), {]
[;, }, }, return, false, ;, }, private, Node, getConditionalStatementCondition, (, Node, n, ), {, if, (, n, ., isIf]
[;, }, private, Node, getConditionalStatementCondition, (, Node, n, ), {, if, (, n, ., isIf, (, ), ), {, return]
[), {, return, NodeUtil, ., getConditionExpression, (, n, ), ;, }, else, {, Preconditions, ., checkState, (, isExprConditional, (, n]
[., isIf, (, ), ), {, return, NodeUtil, ., getConditionExpression, (, n, ), ;, }, else, {, Preconditions, ., checkState]
[;, }, else, {, Preconditions, ., checkState, (, isExprConditional, (, n, ), ), ;, return, n, ., getFirstChild, (, )]
[., getConditionExpression, (, n, ), ;, }, else, {, Preconditions, ., checkState, (, isExprConditional, (, n, ), ), ;, return]
[), ;, }, else, {, Preconditions, ., checkState, (, isExprConditional, (, n, ), ), ;, return, n, ., getFirstChild, (]
[;, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, }, private, Node, tryFoldIf, (, Node, n]
[., checkState, (, isExprConditional, (, n, ), ), ;, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;]
[), ;, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, }, private, Node, tryFoldIf, (, Node]
[), ), ;, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, }, private, Node, tryFoldIf, (]
[;, }, }, private, Node, tryFoldIf, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isIf, (, )]
[., getFirstChild, (, ), ;, }, }, private, Node, tryFoldIf, (, Node, n, ), {, Preconditions, ., checkState, (, n]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, }, private, Node, tryFoldIf, (, Node, n, ), {, Preconditions]
[;, Node, parent, =, n, ., getParent, (, ), ;, Preconditions, ., checkNotNull, (, parent, ), ;, int, type, =]
[., checkState, (, n, ., isIf, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Preconditions]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, Preconditions, ., checkNotNull, (, parent, ), ;, int, type]
[., isIf, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Preconditions, ., checkNotNull, (, parent]
[;, Preconditions, ., checkNotNull, (, parent, ), ;, int, type, =, n, ., getType, (, ), ;, Node, cond, =]
[., getParent, (, ), ;, Preconditions, ., checkNotNull, (, parent, ), ;, int, type, =, n, ., getType, (, )]
[;, int, type, =, n, ., getType, (, ), ;, Node, cond, =, n, ., getFirstChild, (, ), ;, Node]
[., checkNotNull, (, parent, ), ;, int, type, =, n, ., getType, (, ), ;, Node, cond, =, n, .]
[), ;, int, type, =, n, ., getType, (, ), ;, Node, cond, =, n, ., getFirstChild, (, ), ;]
[;, Node, cond, =, n, ., getFirstChild, (, ), ;, Node, thenBody, =, cond, ., getNext, (, ), ;, Node]
[., getType, (, ), ;, Node, cond, =, n, ., getFirstChild, (, ), ;, Node, thenBody, =, cond, ., getNext]
[;, Node, thenBody, =, cond, ., getNext, (, ), ;, Node, elseBody, =, thenBody, ., getNext, (, ), ;, if]
[., getFirstChild, (, ), ;, Node, thenBody, =, cond, ., getNext, (, ), ;, Node, elseBody, =, thenBody, ., getNext]
[;, Node, elseBody, =, thenBody, ., getNext, (, ), ;, if, (, elseBody, !=, null, &&, !, mayHaveSideEffects, (, elseBody]
[., getNext, (, ), ;, Node, elseBody, =, thenBody, ., getNext, (, ), ;, if, (, elseBody, !=, null, &&]
[;, if, (, elseBody, !=, null, &&, !, mayHaveSideEffects, (, elseBody, ), ), {, n, ., removeChild, (, elseBody, )]
[., getNext, (, ), ;, if, (, elseBody, !=, null, &&, !, mayHaveSideEffects, (, elseBody, ), ), {, n, .]
[), {, n, ., removeChild, (, elseBody, ), ;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }, if, (]
[&&, !, mayHaveSideEffects, (, elseBody, ), ), {, n, ., removeChild, (, elseBody, ), ;, elseBody, =, null, ;, reportCodeChange]
[!=, null, &&, !, mayHaveSideEffects, (, elseBody, ), ), {, n, ., removeChild, (, elseBody, ), ;, elseBody, =, null]
[&&, !, mayHaveSideEffects, (, elseBody, ), ), {, n, ., removeChild, (, elseBody, ), ;, elseBody, =, null, ;, reportCodeChange]
[), {, n, ., removeChild, (, elseBody, ), ;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }, if, (]
[), {, n, ., removeChild, (, elseBody, ), ;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }, if, (]
[), ), {, n, ., removeChild, (, elseBody, ), ;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }, if]
[;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }, if, (, !, mayHaveSideEffects, (, thenBody, ), &&, elseBody, !=]
[., removeChild, (, elseBody, ), ;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }, if, (, !, mayHaveSideEffects, (]
[), ;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }, if, (, !, mayHaveSideEffects, (, thenBody, ), &&, elseBody]
[=, null, ;, reportCodeChange, (, ), ;, }, if, (, !, mayHaveSideEffects, (, thenBody, ), &&, elseBody, !=, null, )]
[;, reportCodeChange, (, ), ;, }, if, (, !, mayHaveSideEffects, (, thenBody, ), &&, elseBody, !=, null, ), {, n]
[;, }, if, (, !, mayHaveSideEffects, (, thenBody, ), &&, elseBody, !=, null, ), {, n, ., removeChild, (, elseBody]
[), {, n, ., removeChild, (, elseBody, ), ;, n, ., replaceChild, (, thenBody, ,, elseBody, ), ;, Node, notCond]
[&&, elseBody, !=, null, ), {, n, ., removeChild, (, elseBody, ), ;, n, ., replaceChild, (, thenBody, ,, elseBody]
[&&, elseBody, !=, null, ), {, n, ., removeChild, (, elseBody, ), ;, n, ., replaceChild, (, thenBody, ,, elseBody]
[), &&, elseBody, !=, null, ), {, n, ., removeChild, (, elseBody, ), ;, n, ., replaceChild, (, thenBody, ,]
[), {, n, ., removeChild, (, elseBody, ), ;, n, ., replaceChild, (, thenBody, ,, elseBody, ), ;, Node, notCond]
[!=, null, ), {, n, ., removeChild, (, elseBody, ), ;, n, ., replaceChild, (, thenBody, ,, elseBody, ), ;]
[), {, n, ., removeChild, (, elseBody, ), ;, n, ., replaceChild, (, thenBody, ,, elseBody, ), ;, Node, notCond]
[;, n, ., replaceChild, (, thenBody, ,, elseBody, ), ;, Node, notCond, =, new, Node, (, Token, ., NOT, )]
[., removeChild, (, elseBody, ), ;, n, ., replaceChild, (, thenBody, ,, elseBody, ), ;, Node, notCond, =, new, Node]
[), ;, n, ., replaceChild, (, thenBody, ,, elseBody, ), ;, Node, notCond, =, new, Node, (, Token, ., NOT]
[;, Node, notCond, =, new, Node, (, Token, ., NOT, ), ;, n, ., replaceChild, (, cond, ,, notCond, )]
[., replaceChild, (, thenBody, ,, elseBody, ), ;, Node, notCond, =, new, Node, (, Token, ., NOT, ), ;, n]
[,, elseBody, ), ;, Node, notCond, =, new, Node, (, Token, ., NOT, ), ;, n, ., replaceChild, (, cond]
[), ;, Node, notCond, =, new, Node, (, Token, ., NOT, ), ;, n, ., replaceChild, (, cond, ,, notCond]
[;, n, ., replaceChild, (, cond, ,, notCond, ), ;, notCond, ., addChildToFront, (, cond, ), ;, cond, =, notCond]
[), ;, n, ., replaceChild, (, cond, ,, notCond, ), ;, notCond, ., addChildToFront, (, cond, ), ;, cond, =]
[., NOT, ), ;, n, ., replaceChild, (, cond, ,, notCond, ), ;, notCond, ., addChildToFront, (, cond, ), ;]
[;, notCond, ., addChildToFront, (, cond, ), ;, cond, =, notCond, ;, thenBody, =, cond, ., getNext, (, ), ;]
[., replaceChild, (, cond, ,, notCond, ), ;, notCond, ., addChildToFront, (, cond, ), ;, cond, =, notCond, ;, thenBody]
[,, notCond, ), ;, notCond, ., addChildToFront, (, cond, ), ;, cond, =, notCond, ;, thenBody, =, cond, ., getNext]
[), ;, notCond, ., addChildToFront, (, cond, ), ;, cond, =, notCond, ;, thenBody, =, cond, ., getNext, (, )]
[;, cond, =, notCond, ;, thenBody, =, cond, ., getNext, (, ), ;, elseBody, =, null, ;, reportCodeChange, (, )]
[., addChildToFront, (, cond, ), ;, cond, =, notCond, ;, thenBody, =, cond, ., getNext, (, ), ;, elseBody, =]
[), ;, cond, =, notCond, ;, thenBody, =, cond, ., getNext, (, ), ;, elseBody, =, null, ;, reportCodeChange, (]
[=, notCond, ;, thenBody, =, cond, ., getNext, (, ), ;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }]
[;, thenBody, =, cond, ., getNext, (, ), ;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }, if, (]
[=, cond, ., getNext, (, ), ;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }, if, (, !, mayHaveSideEffects]
[;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }, if, (, !, mayHaveSideEffects, (, thenBody, ), &&, elseBody, ==]
[., getNext, (, ), ;, elseBody, =, null, ;, reportCodeChange, (, ), ;, }, if, (, !, mayHaveSideEffects, (, thenBody]
[=, null, ;, reportCodeChange, (, ), ;, }, if, (, !, mayHaveSideEffects, (, thenBody, ), &&, elseBody, ==, null, )]
[;, reportCodeChange, (, ), ;, }, if, (, !, mayHaveSideEffects, (, thenBody, ), &&, elseBody, ==, null, ), {, if]
[;, }, if, (, !, mayHaveSideEffects, (, thenBody, ), &&, elseBody, ==, null, ), {, if, (, mayHaveSideEffects, (, cond]
[), {, if, (, mayHaveSideEffects, (, cond, ), ), {, n, ., removeChild, (, cond, ), ;, Node, replacement, =]
[&&, elseBody, ==, null, ), {, if, (, mayHaveSideEffects, (, cond, ), ), {, n, ., removeChild, (, cond, )]
[&&, elseBody, ==, null, ), {, if, (, mayHaveSideEffects, (, cond, ), ), {, n, ., removeChild, (, cond, )]
[), &&, elseBody, ==, null, ), {, if, (, mayHaveSideEffects, (, cond, ), ), {, n, ., removeChild, (, cond]
[), {, if, (, mayHaveSideEffects, (, cond, ), ), {, n, ., removeChild, (, cond, ), ;, Node, replacement, =]
[==, null, ), {, if, (, mayHaveSideEffects, (, cond, ), ), {, n, ., removeChild, (, cond, ), ;, Node]
[), {, if, (, mayHaveSideEffects, (, cond, ), ), {, n, ., removeChild, (, cond, ), ;, Node, replacement, =]
[), {, n, ., removeChild, (, cond, ), ;, Node, replacement, =, NodeUtil, ., newExpr, (, cond, ), ;, parent]
[), ), {, n, ., removeChild, (, cond, ), ;, Node, replacement, =, NodeUtil, ., newExpr, (, cond, ), ;]
[;, Node, replacement, =, NodeUtil, ., newExpr, (, cond, ), ;, parent, ., replaceChild, (, n, ,, replacement, ), ;]
[., removeChild, (, cond, ), ;, Node, replacement, =, NodeUtil, ., newExpr, (, cond, ), ;, parent, ., replaceChild, (]
[), ;, Node, replacement, =, NodeUtil, ., newExpr, (, cond, ), ;, parent, ., replaceChild, (, n, ,, replacement, )]
[;, parent, ., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, else, {]
[., newExpr, (, cond, ), ;, parent, ., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (, ), ;, return]
[), ;, parent, ., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, else]
[;, reportCodeChange, (, ), ;, return, replacement, ;, }, else, {, NodeUtil, ., removeChild, (, parent, ,, n, ), ;]
[., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, else, {, NodeUtil, .]
[,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, else, {, NodeUtil, ., removeChild, (, parent, ,]
[), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, else, {, NodeUtil, ., removeChild, (, parent, ,, n, )]
[;, return, replacement, ;, }, else, {, NodeUtil, ., removeChild, (, parent, ,, n, ), ;, reportCodeChange, (, ), ;]
[;, }, else, {, NodeUtil, ., removeChild, (, parent, ,, n, ), ;, reportCodeChange, (, ), ;, return, null, ;]
[;, reportCodeChange, (, ), ;, return, null, ;, }, }, TernaryValue, condValue, =, NodeUtil, ., getImpureBooleanValue, (, cond, ), ;]
[., removeChild, (, parent, ,, n, ), ;, reportCodeChange, (, ), ;, return, null, ;, }, }, TernaryValue, condValue, =]
[,, n, ), ;, reportCodeChange, (, ), ;, return, null, ;, }, }, TernaryValue, condValue, =, NodeUtil, ., getImpureBooleanValue, (]
[), ;, reportCodeChange, (, ), ;, return, null, ;, }, }, TernaryValue, condValue, =, NodeUtil, ., getImpureBooleanValue, (, cond, )]
[;, return, null, ;, }, }, TernaryValue, condValue, =, NodeUtil, ., getImpureBooleanValue, (, cond, ), ;, if, (, condValue, ==]
[;, }, }, TernaryValue, condValue, =, NodeUtil, ., getImpureBooleanValue, (, cond, ), ;, if, (, condValue, ==, TernaryValue, ., UNKNOWN]
[;, if, (, condValue, ==, TernaryValue, ., UNKNOWN, ), {, return, n, ;, }, if, (, mayHaveSideEffects, (, cond, )]
[., getImpureBooleanValue, (, cond, ), ;, if, (, condValue, ==, TernaryValue, ., UNKNOWN, ), {, return, n, ;, }, if]
[), ;, if, (, condValue, ==, TernaryValue, ., UNKNOWN, ), {, return, n, ;, }, if, (, mayHaveSideEffects, (, cond]
[), {, return, n, ;, }, if, (, mayHaveSideEffects, (, cond, ), ), {, boolean, newConditionValue, =, condValue, ==, TernaryValue]
[==, TernaryValue, ., UNKNOWN, ), {, return, n, ;, }, if, (, mayHaveSideEffects, (, cond, ), ), {, boolean, newConditionValue]
[), {, return, n, ;, }, if, (, mayHaveSideEffects, (, cond, ), ), {, boolean, newConditionValue, =, condValue, ==, TernaryValue]
[., UNKNOWN, ), {, return, n, ;, }, if, (, mayHaveSideEffects, (, cond, ), ), {, boolean, newConditionValue, =, condValue]
[;, }, if, (, mayHaveSideEffects, (, cond, ), ), {, boolean, newConditionValue, =, condValue, ==, TernaryValue, ., TRUE, ;, if]
[), {, boolean, newConditionValue, =, condValue, ==, TernaryValue, ., TRUE, ;, if, (, !, newConditionValue, &&, elseBody, ==, null, )]
[), ), {, boolean, newConditionValue, =, condValue, ==, TernaryValue, ., TRUE, ;, if, (, !, newConditionValue, &&, elseBody, ==, null]
[;, if, (, !, newConditionValue, &&, elseBody, ==, null, ), {, elseBody, =, IR, ., block, (, ), ., srcref]
[==, TernaryValue, ., TRUE, ;, if, (, !, newConditionValue, &&, elseBody, ==, null, ), {, elseBody, =, IR, ., block]
[;, if, (, !, newConditionValue, &&, elseBody, ==, null, ), {, elseBody, =, IR, ., block, (, ), ., srcref]
[., TRUE, ;, if, (, !, newConditionValue, &&, elseBody, ==, null, ), {, elseBody, =, IR, ., block, (, )]
[), {, elseBody, =, IR, ., block, (, ), ., srcref, (, n, ), ;, n, ., addChildToBack, (, elseBody]
[&&, elseBody, ==, null, ), {, elseBody, =, IR, ., block, (, ), ., srcref, (, n, ), ;, n]
[&&, elseBody, ==, null, ), {, elseBody, =, IR, ., block, (, ), ., srcref, (, n, ), ;, n]
[), {, elseBody, =, IR, ., block, (, ), ., srcref, (, n, ), ;, n, ., addChildToBack, (, elseBody]
[==, null, ), {, elseBody, =, IR, ., block, (, ), ., srcref, (, n, ), ;, n, ., addChildToBack]
[), {, elseBody, =, IR, ., block, (, ), ., srcref, (, n, ), ;, n, ., addChildToBack, (, elseBody]
[=, IR, ., block, (, ), ., srcref, (, n, ), ;, n, ., addChildToBack, (, elseBody, ), ;, }]
[;, n, ., addChildToBack, (, elseBody, ), ;, }, Node, newCond, =, NodeUtil, ., booleanNode, (, newConditionValue, ), ;, n]
[., srcref, (, n, ), ;, n, ., addChildToBack, (, elseBody, ), ;, }, Node, newCond, =, NodeUtil, ., booleanNode]
[., block, (, ), ., srcref, (, n, ), ;, n, ., addChildToBack, (, elseBody, ), ;, }, Node, newCond]
[), ;, n, ., addChildToBack, (, elseBody, ), ;, }, Node, newCond, =, NodeUtil, ., booleanNode, (, newConditionValue, ), ;]
[;, }, Node, newCond, =, NodeUtil, ., booleanNode, (, newConditionValue, ), ;, n, ., replaceChild, (, cond, ,, newCond, )]
[., addChildToBack, (, elseBody, ), ;, }, Node, newCond, =, NodeUtil, ., booleanNode, (, newConditionValue, ), ;, n, ., replaceChild]
[), ;, }, Node, newCond, =, NodeUtil, ., booleanNode, (, newConditionValue, ), ;, n, ., replaceChild, (, cond, ,, newCond]
[;, n, ., replaceChild, (, cond, ,, newCond, ), ;, Node, branchToKeep, =, newConditionValue, ?, thenBody, :, elseBody, ;, branchToKeep]
[., booleanNode, (, newConditionValue, ), ;, n, ., replaceChild, (, cond, ,, newCond, ), ;, Node, branchToKeep, =, newConditionValue, ?]
[), ;, n, ., replaceChild, (, cond, ,, newCond, ), ;, Node, branchToKeep, =, newConditionValue, ?, thenBody, :, elseBody, ;]
[;, Node, branchToKeep, =, newConditionValue, ?, thenBody, :, elseBody, ;, branchToKeep, ., addChildToFront, (, IR, ., exprResult, (, cond, )]
[., replaceChild, (, cond, ,, newCond, ), ;, Node, branchToKeep, =, newConditionValue, ?, thenBody, :, elseBody, ;, branchToKeep, ., addChildToFront]
[,, newCond, ), ;, Node, branchToKeep, =, newConditionValue, ?, thenBody, :, elseBody, ;, branchToKeep, ., addChildToFront, (, IR, ., exprResult]
[), ;, Node, branchToKeep, =, newConditionValue, ?, thenBody, :, elseBody, ;, branchToKeep, ., addChildToFront, (, IR, ., exprResult, (, cond]
[;, branchToKeep, ., addChildToFront, (, IR, ., exprResult, (, cond, ), ., srcref, (, cond, ), ), ;, reportCodeChange, (]
[?, thenBody, :, elseBody, ;, branchToKeep, ., addChildToFront, (, IR, ., exprResult, (, cond, ), ., srcref, (, cond, )]
[:, elseBody, ;, branchToKeep, ., addChildToFront, (, IR, ., exprResult, (, cond, ), ., srcref, (, cond, ), ), ;]
[;, branchToKeep, ., addChildToFront, (, IR, ., exprResult, (, cond, ), ., srcref, (, cond, ), ), ;, reportCodeChange, (]
[;, reportCodeChange, (, ), ;, cond, =, newCond, ;, }, boolean, condTrue, =, condValue, ., toBoolean, (, true, ), ;]
[., addChildToFront, (, IR, ., exprResult, (, cond, ), ., srcref, (, cond, ), ), ;, reportCodeChange, (, ), ;]
[), ;, reportCodeChange, (, ), ;, cond, =, newCond, ;, }, boolean, condTrue, =, condValue, ., toBoolean, (, true, )]
[., srcref, (, cond, ), ), ;, reportCodeChange, (, ), ;, cond, =, newCond, ;, }, boolean, condTrue, =, condValue]
[., exprResult, (, cond, ), ., srcref, (, cond, ), ), ;, reportCodeChange, (, ), ;, cond, =, newCond, ;]
[), ., srcref, (, cond, ), ), ;, reportCodeChange, (, ), ;, cond, =, newCond, ;, }, boolean, condTrue, =]
[), ), ;, reportCodeChange, (, ), ;, cond, =, newCond, ;, }, boolean, condTrue, =, condValue, ., toBoolean, (, true]
[;, cond, =, newCond, ;, }, boolean, condTrue, =, condValue, ., toBoolean, (, true, ), ;, if, (, n, .]
[=, newCond, ;, }, boolean, condTrue, =, condValue, ., toBoolean, (, true, ), ;, if, (, n, ., getChildCount, (]
[;, }, boolean, condTrue, =, condValue, ., toBoolean, (, true, ), ;, if, (, n, ., getChildCount, (, ), ==]
[;, if, (, n, ., getChildCount, (, ), ==, 2, ), {, Preconditions, ., checkState, (, type, ==, Token, .]
[., toBoolean, (, true, ), ;, if, (, n, ., getChildCount, (, ), ==, 2, ), {, Preconditions, ., checkState]
[), ;, if, (, n, ., getChildCount, (, ), ==, 2, ), {, Preconditions, ., checkState, (, type, ==, Token]
[), {, Preconditions, ., checkState, (, type, ==, Token, ., IF, ), ;, if, (, condTrue, ), {, Node, thenStmt]
[==, 2, ), {, Preconditions, ., checkState, (, type, ==, Token, ., IF, ), ;, if, (, condTrue, ), {]
[., getChildCount, (, ), ==, 2, ), {, Preconditions, ., checkState, (, type, ==, Token, ., IF, ), ;, if]
[), {, Preconditions, ., checkState, (, type, ==, Token, ., IF, ), ;, if, (, condTrue, ), {, Node, thenStmt]
[;, if, (, condTrue, ), {, Node, thenStmt, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, n]
[., checkState, (, type, ==, Token, ., IF, ), ;, if, (, condTrue, ), {, Node, thenStmt, =, n, .]
[), ;, if, (, condTrue, ), {, Node, thenStmt, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[==, Token, ., IF, ), ;, if, (, condTrue, ), {, Node, thenStmt, =, n, ., getFirstChild, (, ), .]
[), ;, if, (, condTrue, ), {, Node, thenStmt, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[., IF, ), ;, if, (, condTrue, ), {, Node, thenStmt, =, n, ., getFirstChild, (, ), ., getNext, (]
[), {, Node, thenStmt, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, n, ., removeChild, (, thenStmt]
[;, n, ., removeChild, (, thenStmt, ), ;, parent, ., replaceChild, (, n, ,, thenStmt, ), ;, reportCodeChange, (, )]
[., getNext, (, ), ;, n, ., removeChild, (, thenStmt, ), ;, parent, ., replaceChild, (, n, ,, thenStmt, )]
[., getFirstChild, (, ), ., getNext, (, ), ;, n, ., removeChild, (, thenStmt, ), ;, parent, ., replaceChild, (]
[;, parent, ., replaceChild, (, n, ,, thenStmt, ), ;, reportCodeChange, (, ), ;, return, thenStmt, ;, }, else, {]
[., removeChild, (, thenStmt, ), ;, parent, ., replaceChild, (, n, ,, thenStmt, ), ;, reportCodeChange, (, ), ;, return]
[), ;, parent, ., replaceChild, (, n, ,, thenStmt, ), ;, reportCodeChange, (, ), ;, return, thenStmt, ;, }, else]
[;, reportCodeChange, (, ), ;, return, thenStmt, ;, }, else, {, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil, .]
[., replaceChild, (, n, ,, thenStmt, ), ;, reportCodeChange, (, ), ;, return, thenStmt, ;, }, else, {, NodeUtil, .]
[,, thenStmt, ), ;, reportCodeChange, (, ), ;, return, thenStmt, ;, }, else, {, NodeUtil, ., redeclareVarsInsideBranch, (, n, )]
[), ;, reportCodeChange, (, ), ;, return, thenStmt, ;, }, else, {, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil]
[;, return, thenStmt, ;, }, else, {, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil, ., removeChild, (, parent, ,]
[;, }, else, {, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil, ., removeChild, (, parent, ,, n, ), ;]
[;, NodeUtil, ., removeChild, (, parent, ,, n, ), ;, reportCodeChange, (, ), ;, return, null, ;, }, }, else]
[., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil, ., removeChild, (, parent, ,, n, ), ;, reportCodeChange, (, ), ;, return]
[), ;, NodeUtil, ., removeChild, (, parent, ,, n, ), ;, reportCodeChange, (, ), ;, return, null, ;, }, }]
[;, reportCodeChange, (, ), ;, return, null, ;, }, }, else, {, Node, trueBranch, =, n, ., getFirstChild, (, )]
[., removeChild, (, parent, ,, n, ), ;, reportCodeChange, (, ), ;, return, null, ;, }, }, else, {, Node]
[,, n, ), ;, reportCodeChange, (, ), ;, return, null, ;, }, }, else, {, Node, trueBranch, =, n, .]
[), ;, reportCodeChange, (, ), ;, return, null, ;, }, }, else, {, Node, trueBranch, =, n, ., getFirstChild, (]
[;, return, null, ;, }, }, else, {, Node, trueBranch, =, n, ., getFirstChild, (, ), ., getNext, (, )]
[;, }, }, else, {, Node, trueBranch, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, falseBranch]
[;, Node, falseBranch, =, trueBranch, ., getNext, (, ), ;, Node, branchToKeep, =, condTrue, ?, trueBranch, :, falseBranch, ;, Node]
[., getNext, (, ), ;, Node, falseBranch, =, trueBranch, ., getNext, (, ), ;, Node, branchToKeep, =, condTrue, ?, trueBranch]
[., getFirstChild, (, ), ., getNext, (, ), ;, Node, falseBranch, =, trueBranch, ., getNext, (, ), ;, Node, branchToKeep]
[;, Node, branchToKeep, =, condTrue, ?, trueBranch, :, falseBranch, ;, Node, branchToRemove, =, condTrue, ?, falseBranch, :, trueBranch, ;, NodeUtil]
[., getNext, (, ), ;, Node, branchToKeep, =, condTrue, ?, trueBranch, :, falseBranch, ;, Node, branchToRemove, =, condTrue, ?, falseBranch]
[;, Node, branchToRemove, =, condTrue, ?, falseBranch, :, trueBranch, ;, NodeUtil, ., redeclareVarsInsideBranch, (, branchToRemove, ), ;, n, ., removeChild]
[?, trueBranch, :, falseBranch, ;, Node, branchToRemove, =, condTrue, ?, falseBranch, :, trueBranch, ;, NodeUtil, ., redeclareVarsInsideBranch, (, branchToRemove, )]
[:, falseBranch, ;, Node, branchToRemove, =, condTrue, ?, falseBranch, :, trueBranch, ;, NodeUtil, ., redeclareVarsInsideBranch, (, branchToRemove, ), ;, n]
[;, Node, branchToRemove, =, condTrue, ?, falseBranch, :, trueBranch, ;, NodeUtil, ., redeclareVarsInsideBranch, (, branchToRemove, ), ;, n, ., removeChild]
[;, NodeUtil, ., redeclareVarsInsideBranch, (, branchToRemove, ), ;, n, ., removeChild, (, branchToKeep, ), ;, parent, ., replaceChild, (, n]
[?, falseBranch, :, trueBranch, ;, NodeUtil, ., redeclareVarsInsideBranch, (, branchToRemove, ), ;, n, ., removeChild, (, branchToKeep, ), ;, parent]
[:, trueBranch, ;, NodeUtil, ., redeclareVarsInsideBranch, (, branchToRemove, ), ;, n, ., removeChild, (, branchToKeep, ), ;, parent, ., replaceChild]
[;, NodeUtil, ., redeclareVarsInsideBranch, (, branchToRemove, ), ;, n, ., removeChild, (, branchToKeep, ), ;, parent, ., replaceChild, (, n]
[;, n, ., removeChild, (, branchToKeep, ), ;, parent, ., replaceChild, (, n, ,, branchToKeep, ), ;, reportCodeChange, (, )]
[., redeclareVarsInsideBranch, (, branchToRemove, ), ;, n, ., removeChild, (, branchToKeep, ), ;, parent, ., replaceChild, (, n, ,, branchToKeep]
[), ;, n, ., removeChild, (, branchToKeep, ), ;, parent, ., replaceChild, (, n, ,, branchToKeep, ), ;, reportCodeChange, (]
[;, parent, ., replaceChild, (, n, ,, branchToKeep, ), ;, reportCodeChange, (, ), ;, return, branchToKeep, ;, }, }, private]
[., removeChild, (, branchToKeep, ), ;, parent, ., replaceChild, (, n, ,, branchToKeep, ), ;, reportCodeChange, (, ), ;, return]
[), ;, parent, ., replaceChild, (, n, ,, branchToKeep, ), ;, reportCodeChange, (, ), ;, return, branchToKeep, ;, }, }]
[;, reportCodeChange, (, ), ;, return, branchToKeep, ;, }, }, private, Node, tryFoldHook, (, Node, n, ), {, Preconditions, .]
[., replaceChild, (, n, ,, branchToKeep, ), ;, reportCodeChange, (, ), ;, return, branchToKeep, ;, }, }, private, Node, tryFoldHook]
[,, branchToKeep, ), ;, reportCodeChange, (, ), ;, return, branchToKeep, ;, }, }, private, Node, tryFoldHook, (, Node, n, )]
[), ;, reportCodeChange, (, ), ;, return, branchToKeep, ;, }, }, private, Node, tryFoldHook, (, Node, n, ), {, Preconditions]
[;, return, branchToKeep, ;, }, }, private, Node, tryFoldHook, (, Node, n, ), {, Preconditions, ., checkState, (, n, .]
[;, }, }, private, Node, tryFoldHook, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isHook, (, )]
[;, Node, parent, =, n, ., getParent, (, ), ;, Preconditions, ., checkNotNull, (, parent, ), ;, Node, cond, =]
[., checkState, (, n, ., isHook, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Preconditions]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, Preconditions, ., checkNotNull, (, parent, ), ;, Node, cond]
[., isHook, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Preconditions, ., checkNotNull, (, parent]
[;, Preconditions, ., checkNotNull, (, parent, ), ;, Node, cond, =, n, ., getFirstChild, (, ), ;, Node, thenBody, =]
[., getParent, (, ), ;, Preconditions, ., checkNotNull, (, parent, ), ;, Node, cond, =, n, ., getFirstChild, (, )]
[;, Node, cond, =, n, ., getFirstChild, (, ), ;, Node, thenBody, =, cond, ., getNext, (, ), ;, Node]
[., checkNotNull, (, parent, ), ;, Node, cond, =, n, ., getFirstChild, (, ), ;, Node, thenBody, =, cond, .]
[), ;, Node, cond, =, n, ., getFirstChild, (, ), ;, Node, thenBody, =, cond, ., getNext, (, ), ;]
[;, Node, thenBody, =, cond, ., getNext, (, ), ;, Node, elseBody, =, thenBody, ., getNext, (, ), ;, TernaryValue]
[., getFirstChild, (, ), ;, Node, thenBody, =, cond, ., getNext, (, ), ;, Node, elseBody, =, thenBody, ., getNext]
[;, Node, elseBody, =, thenBody, ., getNext, (, ), ;, TernaryValue, condValue, =, NodeUtil, ., getImpureBooleanValue, (, cond, ), ;]
[., getNext, (, ), ;, Node, elseBody, =, thenBody, ., getNext, (, ), ;, TernaryValue, condValue, =, NodeUtil, ., getImpureBooleanValue]
[;, TernaryValue, condValue, =, NodeUtil, ., getImpureBooleanValue, (, cond, ), ;, if, (, condValue, ==, TernaryValue, ., UNKNOWN, ), {]
[., getNext, (, ), ;, TernaryValue, condValue, =, NodeUtil, ., getImpureBooleanValue, (, cond, ), ;, if, (, condValue, ==, TernaryValue]
[;, if, (, condValue, ==, TernaryValue, ., UNKNOWN, ), {, if, (, !, areNodesEqualForInlining, (, thenBody, ,, elseBody, ), )]
[., getImpureBooleanValue, (, cond, ), ;, if, (, condValue, ==, TernaryValue, ., UNKNOWN, ), {, if, (, !, areNodesEqualForInlining, (]
[), ;, if, (, condValue, ==, TernaryValue, ., UNKNOWN, ), {, if, (, !, areNodesEqualForInlining, (, thenBody, ,, elseBody, )]
[), {, if, (, !, areNodesEqualForInlining, (, thenBody, ,, elseBody, ), ), {, return, n, ;, }, }, n, .]
[==, TernaryValue, ., UNKNOWN, ), {, if, (, !, areNodesEqualForInlining, (, thenBody, ,, elseBody, ), ), {, return, n, ;]
[), {, if, (, !, areNodesEqualForInlining, (, thenBody, ,, elseBody, ), ), {, return, n, ;, }, }, n, .]
[., UNKNOWN, ), {, if, (, !, areNodesEqualForInlining, (, thenBody, ,, elseBody, ), ), {, return, n, ;, }, }]
[), {, return, n, ;, }, }, n, ., detachChildren, (, ), ;, Node, branchToKeep, =, condValue, ., toBoolean, (]
[), {, return, n, ;, }, }, n, ., detachChildren, (, ), ;, Node, branchToKeep, =, condValue, ., toBoolean, (]
[,, elseBody, ), ), {, return, n, ;, }, }, n, ., detachChildren, (, ), ;, Node, branchToKeep, =, condValue]
[), ), {, return, n, ;, }, }, n, ., detachChildren, (, ), ;, Node, branchToKeep, =, condValue, ., toBoolean]
[;, }, }, n, ., detachChildren, (, ), ;, Node, branchToKeep, =, condValue, ., toBoolean, (, true, ), ?, thenBody]
[;, Node, branchToKeep, =, condValue, ., toBoolean, (, true, ), ?, thenBody, :, elseBody, ;, Node, replacement, ;, if, (]
[., detachChildren, (, ), ;, Node, branchToKeep, =, condValue, ., toBoolean, (, true, ), ?, thenBody, :, elseBody, ;, Node]
[;, Node, replacement, ;, if, (, mayHaveSideEffects, (, cond, ), ), {, replacement, =, IR, ., comma, (, cond, ,]
[?, thenBody, :, elseBody, ;, Node, replacement, ;, if, (, mayHaveSideEffects, (, cond, ), ), {, replacement, =, IR, .]
[., toBoolean, (, true, ), ?, thenBody, :, elseBody, ;, Node, replacement, ;, if, (, mayHaveSideEffects, (, cond, ), )]
[), ?, thenBody, :, elseBody, ;, Node, replacement, ;, if, (, mayHaveSideEffects, (, cond, ), ), {, replacement, =, IR]
[:, elseBody, ;, Node, replacement, ;, if, (, mayHaveSideEffects, (, cond, ), ), {, replacement, =, IR, ., comma, (]
[;, Node, replacement, ;, if, (, mayHaveSideEffects, (, cond, ), ), {, replacement, =, IR, ., comma, (, cond, ,]
[), {, replacement, =, IR, ., comma, (, cond, ,, branchToKeep, ), ., srcref, (, n, ), ;, }, else]
[), ), {, replacement, =, IR, ., comma, (, cond, ,, branchToKeep, ), ., srcref, (, n, ), ;, }]
[=, IR, ., comma, (, cond, ,, branchToKeep, ), ., srcref, (, n, ), ;, }, else, {, replacement, =]
[;, }, else, {, replacement, =, branchToKeep, ;, }, parent, ., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (]
[., srcref, (, n, ), ;, }, else, {, replacement, =, branchToKeep, ;, }, parent, ., replaceChild, (, n, ,]
[., comma, (, cond, ,, branchToKeep, ), ., srcref, (, n, ), ;, }, else, {, replacement, =, branchToKeep, ;]
[,, branchToKeep, ), ., srcref, (, n, ), ;, }, else, {, replacement, =, branchToKeep, ;, }, parent, ., replaceChild]
[), ., srcref, (, n, ), ;, }, else, {, replacement, =, branchToKeep, ;, }, parent, ., replaceChild, (, n]
[), ;, }, else, {, replacement, =, branchToKeep, ;, }, parent, ., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange]
[=, branchToKeep, ;, }, parent, ., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;]
[;, }, parent, ., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, Node]
[;, reportCodeChange, (, ), ;, return, replacement, ;, }, Node, tryFoldWhile, (, Node, n, ), {, Preconditions, ., checkArgument, (]
[., replaceChild, (, n, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, Node, tryFoldWhile, (, Node]
[,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, Node, tryFoldWhile, (, Node, n, ), {, Preconditions]
[), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, Node, tryFoldWhile, (, Node, n, ), {, Preconditions, ., checkArgument]
[;, return, replacement, ;, }, Node, tryFoldWhile, (, Node, n, ), {, Preconditions, ., checkArgument, (, n, ., isWhile, (]
[;, }, Node, tryFoldWhile, (, Node, n, ), {, Preconditions, ., checkArgument, (, n, ., isWhile, (, ), ), ;]
[;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getPureBooleanValue, (, cond, ), !=]
[., checkArgument, (, n, ., isWhile, (, ), ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;]
[), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getPureBooleanValue, (, cond, )]
[., isWhile, (, ), ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, .]
[;, if, (, NodeUtil, ., getPureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {, return, n, ;, }, NodeUtil]
[., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getPureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {]
[), ;, if, (, NodeUtil, ., getPureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {, return, n, ;, }]
[), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil, ., removeChild, (, n, ., getParent]
[!=, TernaryValue, ., FALSE, ), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil, ., removeChild]
[., getPureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n]
[), !=, TernaryValue, ., FALSE, ), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil, .]
[), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil, ., removeChild, (, n, ., getParent]
[., FALSE, ), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil, ., removeChild, (, n]
[;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n]
[;, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, reportCodeChange, (, ), ;, return, null]
[., redeclareVarsInsideBranch, (, n, ), ;, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, reportCodeChange]
[), ;, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, reportCodeChange, (, ), ;, return]
[;, reportCodeChange, (, ), ;, return, null, ;, }, Node, tryFoldFor, (, Node, n, ), {, Preconditions, ., checkArgument, (]
[., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, reportCodeChange, (, ), ;, return, null, ;, }]
[,, n, ), ;, reportCodeChange, (, ), ;, return, null, ;, }, Node, tryFoldFor, (, Node, n, ), {, Preconditions]
[., getParent, (, ), ,, n, ), ;, reportCodeChange, (, ), ;, return, null, ;, }, Node, tryFoldFor, (, Node]
[), ;, reportCodeChange, (, ), ;, return, null, ;, }, Node, tryFoldFor, (, Node, n, ), {, Preconditions, ., checkArgument]
[;, return, null, ;, }, Node, tryFoldFor, (, Node, n, ), {, Preconditions, ., checkArgument, (, n, ., isFor, (]
[;, }, Node, tryFoldFor, (, Node, n, ), {, Preconditions, ., checkArgument, (, n, ., isFor, (, ), ), ;]
[;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, return, n, ;, }, Node, init, =, n, .]
[., checkArgument, (, n, ., isFor, (, ), ), ;, if, (, NodeUtil, ., isForIn, (, n, ), ), {]
[), ;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, return, n, ;, }, Node, init, =, n]
[., isFor, (, ), ), ;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, return, n, ;, }]
[), {, return, n, ;, }, Node, init, =, n, ., getFirstChild, (, ), ;, Node, cond, =, init, .]
[., isForIn, (, n, ), ), {, return, n, ;, }, Node, init, =, n, ., getFirstChild, (, ), ;]
[), ), {, return, n, ;, }, Node, init, =, n, ., getFirstChild, (, ), ;, Node, cond, =, init]
[;, }, Node, init, =, n, ., getFirstChild, (, ), ;, Node, cond, =, init, ., getNext, (, ), ;]
[;, Node, cond, =, init, ., getNext, (, ), ;, Node, increment, =, cond, ., getNext, (, ), ;, if]
[., getFirstChild, (, ), ;, Node, cond, =, init, ., getNext, (, ), ;, Node, increment, =, cond, ., getNext]
[;, Node, increment, =, cond, ., getNext, (, ), ;, if, (, !, init, ., isEmpty, (, ), &&, !]
[., getNext, (, ), ;, Node, increment, =, cond, ., getNext, (, ), ;, if, (, !, init, ., isEmpty]
[;, if, (, !, init, ., isEmpty, (, ), &&, !, init, ., isVar, (, ), ), {, init, =]
[., getNext, (, ), ;, if, (, !, init, ., isEmpty, (, ), &&, !, init, ., isVar, (, )]
[), {, init, =, trySimplifyUnusedResult, (, init, ,, false, ), ;, }, if, (, !, increment, ., isEmpty, (, )]
[&&, !, init, ., isVar, (, ), ), {, init, =, trySimplifyUnusedResult, (, init, ,, false, ), ;, }, if]
[&&, !, init, ., isVar, (, ), ), {, init, =, trySimplifyUnusedResult, (, init, ,, false, ), ;, }, if]
[., isEmpty, (, ), &&, !, init, ., isVar, (, ), ), {, init, =, trySimplifyUnusedResult, (, init, ,, false]
[), {, init, =, trySimplifyUnusedResult, (, init, ,, false, ), ;, }, if, (, !, increment, ., isEmpty, (, )]
[), {, init, =, trySimplifyUnusedResult, (, init, ,, false, ), ;, }, if, (, !, increment, ., isEmpty, (, )]
[., isVar, (, ), ), {, init, =, trySimplifyUnusedResult, (, init, ,, false, ), ;, }, if, (, !, increment]
[=, trySimplifyUnusedResult, (, init, ,, false, ), ;, }, if, (, !, increment, ., isEmpty, (, ), ), {, increment]
[;, }, if, (, !, increment, ., isEmpty, (, ), ), {, increment, =, trySimplifyUnusedResult, (, increment, ,, false, )]
[,, false, ), ;, }, if, (, !, increment, ., isEmpty, (, ), ), {, increment, =, trySimplifyUnusedResult, (, increment]
[), ;, }, if, (, !, increment, ., isEmpty, (, ), ), {, increment, =, trySimplifyUnusedResult, (, increment, ,, false]
[), {, increment, =, trySimplifyUnusedResult, (, increment, ,, false, ), ;, }, if, (, !, n, ., getFirstChild, (, )]
[), {, increment, =, trySimplifyUnusedResult, (, increment, ,, false, ), ;, }, if, (, !, n, ., getFirstChild, (, )]
[., isEmpty, (, ), ), {, increment, =, trySimplifyUnusedResult, (, increment, ,, false, ), ;, }, if, (, !, n]
[=, trySimplifyUnusedResult, (, increment, ,, false, ), ;, }, if, (, !, n, ., getFirstChild, (, ), ., isEmpty, (]
[;, }, if, (, !, n, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, return, n, ;, }]
[,, false, ), ;, }, if, (, !, n, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, return]
[), ;, }, if, (, !, n, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, return, n, ;]
[), {, return, n, ;, }, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {]
[), {, return, n, ;, }, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {]
[., isEmpty, (, ), ), {, return, n, ;, }, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), !=, TernaryValue]
[., getFirstChild, (, ), ., isEmpty, (, ), ), {, return, n, ;, }, if, (, NodeUtil, ., getImpureBooleanValue, (]
[;, }, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {, return, n, ;, }]
[), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, if, (, !, mayHaveSideEffects, (, cond, )]
[!=, TernaryValue, ., FALSE, ), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, if, (, !]
[., getImpureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n]
[), !=, TernaryValue, ., FALSE, ), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, if, (]
[), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, if, (, !, mayHaveSideEffects, (, cond, )]
[., FALSE, ), {, return, n, ;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, if, (, !, mayHaveSideEffects, (]
[;, }, NodeUtil, ., redeclareVarsInsideBranch, (, n, ), ;, if, (, !, mayHaveSideEffects, (, cond, ), ), {, NodeUtil, .]
[;, if, (, !, mayHaveSideEffects, (, cond, ), ), {, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,]
[., redeclareVarsInsideBranch, (, n, ), ;, if, (, !, mayHaveSideEffects, (, cond, ), ), {, NodeUtil, ., removeChild, (, n]
[), ;, if, (, !, mayHaveSideEffects, (, cond, ), ), {, NodeUtil, ., removeChild, (, n, ., getParent, (, )]
[), {, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, }, else, {, Node, statement]
[), {, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, }, else, {, Node, statement]
[), ), {, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, }, else, {, Node]
[;, }, else, {, Node, statement, =, IR, ., exprResult, (, cond, ., detachFromParent, (, ), ), ., copyInformationFrom, (]
[., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, }, else, {, Node, statement, =, IR, .]
[,, n, ), ;, }, else, {, Node, statement, =, IR, ., exprResult, (, cond, ., detachFromParent, (, ), )]
[., getParent, (, ), ,, n, ), ;, }, else, {, Node, statement, =, IR, ., exprResult, (, cond, .]
[), ;, }, else, {, Node, statement, =, IR, ., exprResult, (, cond, ., detachFromParent, (, ), ), ., copyInformationFrom]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, statement, ), ;, }, reportCodeChange, (, ), ;, return]
[., copyInformationFrom, (, cond, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, statement, ), ;, }]
[., exprResult, (, cond, ., detachFromParent, (, ), ), ., copyInformationFrom, (, cond, ), ;, n, ., getParent, (, )]
[), ., copyInformationFrom, (, cond, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, statement, ), ;]
[., detachFromParent, (, ), ), ., copyInformationFrom, (, cond, ), ;, n, ., getParent, (, ), ., replaceChild, (, n]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, statement, ), ;, }, reportCodeChange, (, ), ;]
[;, }, reportCodeChange, (, ), ;, return, null, ;, }, Node, tryFoldDo, (, Node, n, ), {, Preconditions, ., checkArgument]
[., replaceChild, (, n, ,, statement, ), ;, }, reportCodeChange, (, ), ;, return, null, ;, }, Node, tryFoldDo, (]
[., getParent, (, ), ., replaceChild, (, n, ,, statement, ), ;, }, reportCodeChange, (, ), ;, return, null, ;]
[,, statement, ), ;, }, reportCodeChange, (, ), ;, return, null, ;, }, Node, tryFoldDo, (, Node, n, ), {]
[), ;, }, reportCodeChange, (, ), ;, return, null, ;, }, Node, tryFoldDo, (, Node, n, ), {, Preconditions, .]
[;, return, null, ;, }, Node, tryFoldDo, (, Node, n, ), {, Preconditions, ., checkArgument, (, n, ., isDo, (]
[;, }, Node, tryFoldDo, (, Node, n, ), {, Preconditions, ., checkArgument, (, n, ., isDo, (, ), ), ;]
[;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), !=]
[., checkArgument, (, n, ., isDo, (, ), ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;]
[), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, )]
[., isDo, (, ), ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, .]
[;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {, return, n, ;, }, if]
[., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {]
[), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {, return, n, ;, }]
[), {, return, n, ;, }, if, (, hasBreakOrContinue, (, n, ), ), {, return, n, ;, }, Preconditions, .]
[!=, TernaryValue, ., FALSE, ), {, return, n, ;, }, if, (, hasBreakOrContinue, (, n, ), ), {, return, n]
[., getImpureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE, ), {, return, n, ;, }, if, (, hasBreakOrContinue, (, n]
[), !=, TernaryValue, ., FALSE, ), {, return, n, ;, }, if, (, hasBreakOrContinue, (, n, ), ), {, return]
[), {, return, n, ;, }, if, (, hasBreakOrContinue, (, n, ), ), {, return, n, ;, }, Preconditions, .]
[., FALSE, ), {, return, n, ;, }, if, (, hasBreakOrContinue, (, n, ), ), {, return, n, ;, }]
[;, }, if, (, hasBreakOrContinue, (, n, ), ), {, return, n, ;, }, Preconditions, ., checkState, (, NodeUtil, .]
[), {, return, n, ;, }, Preconditions, ., checkState, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, n, ., getFirstChild, (]
[), ), {, return, n, ;, }, Preconditions, ., checkState, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, n, ., getFirstChild]
[;, }, Preconditions, ., checkState, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, n, ., getFirstChild, (, ), ), ), ;]
[;, Node, block, =, n, ., removeFirstChild, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent]
[., checkState, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, n, ., getFirstChild, (, ), ), ), ;, Node, block, =]
[), ;, Node, block, =, n, ., removeFirstChild, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[., isControlStructureCodeBlock, (, n, ,, n, ., getFirstChild, (, ), ), ), ;, Node, block, =, n, ., removeFirstChild, (]
[,, n, ., getFirstChild, (, ), ), ), ;, Node, block, =, n, ., removeFirstChild, (, ), ;, Node, parent]
[), ), ;, Node, block, =, n, ., removeFirstChild, (, ), ;, Node, parent, =, n, ., getParent, (, )]
[., getFirstChild, (, ), ), ), ;, Node, block, =, n, ., removeFirstChild, (, ), ;, Node, parent, =, n]
[;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, block, ), ;, if]
[., removeFirstChild, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,]
[;, parent, ., replaceChild, (, n, ,, block, ), ;, if, (, mayHaveSideEffects, (, cond, ), ), {, Node, condStatement]
[., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, block, ), ;, if, (, mayHaveSideEffects, (, cond, )]
[;, if, (, mayHaveSideEffects, (, cond, ), ), {, Node, condStatement, =, IR, ., exprResult, (, cond, ., detachFromParent, (]
[., replaceChild, (, n, ,, block, ), ;, if, (, mayHaveSideEffects, (, cond, ), ), {, Node, condStatement, =, IR]
[,, block, ), ;, if, (, mayHaveSideEffects, (, cond, ), ), {, Node, condStatement, =, IR, ., exprResult, (, cond]
[), ;, if, (, mayHaveSideEffects, (, cond, ), ), {, Node, condStatement, =, IR, ., exprResult, (, cond, ., detachFromParent]
[), {, Node, condStatement, =, IR, ., exprResult, (, cond, ., detachFromParent, (, ), ), ., srcref, (, cond, )]
[), ), {, Node, condStatement, =, IR, ., exprResult, (, cond, ., detachFromParent, (, ), ), ., srcref, (, cond]
[;, parent, ., addChildAfter, (, condStatement, ,, block, ), ;, }, reportCodeChange, (, ), ;, return, n, ;, }, boolean]
[., srcref, (, cond, ), ;, parent, ., addChildAfter, (, condStatement, ,, block, ), ;, }, reportCodeChange, (, ), ;]
[., exprResult, (, cond, ., detachFromParent, (, ), ), ., srcref, (, cond, ), ;, parent, ., addChildAfter, (, condStatement]
[), ., srcref, (, cond, ), ;, parent, ., addChildAfter, (, condStatement, ,, block, ), ;, }, reportCodeChange, (, )]
[., detachFromParent, (, ), ), ., srcref, (, cond, ), ;, parent, ., addChildAfter, (, condStatement, ,, block, ), ;]
[), ;, parent, ., addChildAfter, (, condStatement, ,, block, ), ;, }, reportCodeChange, (, ), ;, return, n, ;, }]
[;, }, reportCodeChange, (, ), ;, return, n, ;, }, boolean, hasBreakOrContinue, (, Node, n, ), {, return, NodeUtil, .]
[., addChildAfter, (, condStatement, ,, block, ), ;, }, reportCodeChange, (, ), ;, return, n, ;, }, boolean, hasBreakOrContinue, (]
[,, block, ), ;, }, reportCodeChange, (, ), ;, return, n, ;, }, boolean, hasBreakOrContinue, (, Node, n, ), {]
[), ;, }, reportCodeChange, (, ), ;, return, n, ;, }, boolean, hasBreakOrContinue, (, Node, n, ), {, return, NodeUtil]
[;, return, n, ;, }, boolean, hasBreakOrContinue, (, Node, n, ), {, return, NodeUtil, ., has, (, n, ,, Predicates]
[;, }, boolean, hasBreakOrContinue, (, Node, n, ), {, return, NodeUtil, ., has, (, n, ,, Predicates, ., <, Node]
[;, }, private, void, tryFoldForCondition, (, Node, forCondition, ), {, if, (, NodeUtil, ., getPureBooleanValue, (, forCondition, ), ==, TernaryValue]
[., has, (, n, ,, Predicates, ., <, Node, >, or, (, new, NodeUtil, ., MatchNodeType, (, Token, ., BREAK]
[,, Predicates, ., <, Node, >, or, (, new, NodeUtil, ., MatchNodeType, (, Token, ., BREAK, ), ,, new, NodeUtil]
[,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, void, tryFoldForCondition, (, Node, forCondition, ), {, if, (, NodeUtil, ., getPureBooleanValue]
[., <, Node, >, or, (, new, NodeUtil, ., MatchNodeType, (, Token, ., BREAK, ), ,, new, NodeUtil, ., MatchNodeType]
[,, new, NodeUtil, ., MatchNodeType, (, Token, ., CONTINUE, ), ), ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, void]
[), ,, new, NodeUtil, ., MatchNodeType, (, Token, ., CONTINUE, ), ), ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private]
[., BREAK, ), ,, new, NodeUtil, ., MatchNodeType, (, Token, ., CONTINUE, ), ), ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;]
[), ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, void, tryFoldForCondition, (, Node, forCondition, ), {, if, (, NodeUtil, .]
[), ), ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, void, tryFoldForCondition, (, Node, forCondition, ), {, if, (, NodeUtil]
[., CONTINUE, ), ), ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, void, tryFoldForCondition, (, Node, forCondition, ), {, if]
[), ;, }, private, void, tryFoldForCondition, (, Node, forCondition, ), {, if, (, NodeUtil, ., getPureBooleanValue, (, forCondition, ), ==]
[., MATCH_NOT_FUNCTION, ), ;, }, private, void, tryFoldForCondition, (, Node, forCondition, ), {, if, (, NodeUtil, ., getPureBooleanValue, (, forCondition]
[), {, forCondition, ., getParent, (, ), ., replaceChild, (, forCondition, ,, IR, ., empty, (, ), ), ;, reportCodeChange]
[==, TernaryValue, ., TRUE, ), {, forCondition, ., getParent, (, ), ., replaceChild, (, forCondition, ,, IR, ., empty, (]
[., getPureBooleanValue, (, forCondition, ), ==, TernaryValue, ., TRUE, ), {, forCondition, ., getParent, (, ), ., replaceChild, (, forCondition]
[), ==, TernaryValue, ., TRUE, ), {, forCondition, ., getParent, (, ), ., replaceChild, (, forCondition, ,, IR, ., empty]
[), {, forCondition, ., getParent, (, ), ., replaceChild, (, forCondition, ,, IR, ., empty, (, ), ), ;, reportCodeChange]
[., TRUE, ), {, forCondition, ., getParent, (, ), ., replaceChild, (, forCondition, ,, IR, ., empty, (, ), )]
[;, reportCodeChange, (, ), ;, }, }, }]
[., replaceChild, (, forCondition, ,, IR, ., empty, (, ), ), ;, reportCodeChange, (, ), ;, }, }, }]
[., getParent, (, ), ., replaceChild, (, forCondition, ,, IR, ., empty, (, ), ), ;, reportCodeChange, (, ), ;]
[,, IR, ., empty, (, ), ), ;, reportCodeChange, (, ), ;, }, }, }]
[), ;, reportCodeChange, (, ), ;, }, }, }]
[., empty, (, ), ), ;, reportCodeChange, (, ), ;, }, }, }]
[;, }, }, }]
