[public, class, Iterator, implements, java, ., util, ., Iterator, <, Integer, >, {, private, final, int, [, ], counter, =]
[implements, java, ., util, ., Iterator, <, Integer, >, {, private, final, int, [, ], counter, =, new, int, []
[Integer, >, {, private, final, int, [, ], counter, =, new, int, [, dimension, ], ;, private, int, count, =]
[>, {, private, final, int, [, ], counter, =, new, int, [, dimension, ], ;, private, int, count, =, -]
[], counter, =, new, int, [, dimension, ], ;, private, int, count, =, -, 1, ;, Iterator, (, ), {]
[], counter, =, new, int, [, dimension, ], ;, private, int, count, =, -, 1, ;, Iterator, (, ), {]
[=, new, int, [, dimension, ], ;, private, int, count, =, -, 1, ;, Iterator, (, ), {, counter, []
[[, dimension, ], ;, private, int, count, =, -, 1, ;, Iterator, (, ), {, counter, [, last, ], =]
[dimension, ], ;, private, int, count, =, -, 1, ;, Iterator, (, ), {, counter, [, last, ], =, -]
[counter, [, last, ], =, -, 1, ;, }, public, boolean, hasNext, (, ), {, for, (, int, i, =]
[last, ], =, -, 1, ;, }, public, boolean, hasNext, (, ), {, for, (, int, i, =, 0, ;]
[last, ], =, -, 1, ;, }, public, boolean, hasNext, (, ), {, for, (, int, i, =, 0, ;]
[=, -, 1, ;, }, public, boolean, hasNext, (, ), {, for, (, int, i, =, 0, ;, i, <]
[1, ;, }, public, boolean, hasNext, (, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[1, ;, }, public, boolean, hasNext, (, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[(, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (]
[(, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (]
[(, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (, counter, []
[int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (, counter, [, i, ], !=]
[int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (, counter, [, i, ], !=]
[int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (, counter, [, i, ], !=]
[=, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (, counter, [, i, ], !=, size, []
[i, <, dimension, ;, i, ++, ), {, if, (, counter, [, i, ], !=, size, [, i, ], -]
[i, ++, ), {, if, (, counter, [, i, ], !=, size, [, i, ], -, 1, ), {, return]
[(, counter, [, i, ], !=, size, [, i, ], -, 1, ), {, return, true, ;, }, }, return]
[return, true, ;, }, }, return, false, ;, }, public, Integer, next, (, ), {, for, (, int, i, =]
[;, }, }, return, false, ;, }, public, Integer, next, (, ), {, for, (, int, i, =, last, ;]
[;, }, }, return, false, ;, }, public, Integer, next, (, ), {, for, (, int, i, =, last, ;]
[}, return, false, ;, }, public, Integer, next, (, ), {, for, (, int, i, =, last, ;, i, >=]
[false, ;, }, public, Integer, next, (, ), {, for, (, int, i, =, last, ;, i, >=, 0, ;]
[false, ;, }, public, Integer, next, (, ), {, for, (, int, i, =, last, ;, i, >=, 0, ;]
[(, ), {, for, (, int, i, =, last, ;, i, >=, 0, ;, i, --, ), {, if, (]
[(, ), {, for, (, int, i, =, last, ;, i, >=, 0, ;, i, --, ), {, if, (]
[(, ), {, for, (, int, i, =, last, ;, i, >=, 0, ;, i, --, ), {, if, (]
[{, for, (, int, i, =, last, ;, i, >=, 0, ;, i, --, ), {, if, (, counter, []
[int, i, =, last, ;, i, >=, 0, ;, i, --, ), {, if, (, counter, [, i, ], ==]
[int, i, =, last, ;, i, >=, 0, ;, i, --, ), {, if, (, counter, [, i, ], ==]
[int, i, =, last, ;, i, >=, 0, ;, i, --, ), {, if, (, counter, [, i, ], ==]
[=, last, ;, i, >=, 0, ;, i, --, ), {, if, (, counter, [, i, ], ==, size, []
[i, >=, 0, ;, i, --, ), {, if, (, counter, [, i, ], ==, size, [, i, ], -]
[;, i, --, ), {, if, (, counter, [, i, ], ==, size, [, i, ], -, 1, ), {]
[;, i, --, ), {, if, (, counter, [, i, ], ==, size, [, i, ], -, 1, ), {]
[--, ), {, if, (, counter, [, i, ], ==, size, [, i, ], -, 1, ), {, counter, []
[if, (, counter, [, i, ], ==, size, [, i, ], -, 1, ), {, counter, [, i, ], =]
[], ==, size, [, i, ], -, 1, ), {, counter, [, i, ], =, 0, ;, }, else, {]
[==, size, [, i, ], -, 1, ), {, counter, [, i, ], =, 0, ;, }, else, {, ++]
[==, size, [, i, ], -, 1, ), {, counter, [, i, ], =, 0, ;, }, else, {, ++]
[[, i, ], -, 1, ), {, counter, [, i, ], =, 0, ;, }, else, {, ++, counter, []
[[, i, ], =, 0, ;, }, else, {, ++, counter, [, i, ], ;, break, ;, }, }, return]
[i, ], =, 0, ;, }, else, {, ++, counter, [, i, ], ;, break, ;, }, }, return, ++]
[[, i, ], ;, break, ;, }, }, return, ++, count, ;, }, public, int, getCount, (, ), {, return]
[}, public, int, getCount, (, ), {, return, count, ;, }, public, int, [, ], getCounts, (, ), {, return]
[}, public, int, getCount, (, ), {, return, count, ;, }, public, int, [, ], getCounts, (, ), {, return]
[(, ), {, return, count, ;, }, public, int, [, ], getCounts, (, ), {, return, MathArrays, ., copyOf, (]
[), {, return, MathArrays, ., copyOf, (, counter, ), ;, }, public, int, getCount, (, int, dim, ), {, return]
[), {, return, MathArrays, ., copyOf, (, counter, ), ;, }, public, int, getCount, (, int, dim, ), {, return]
[return, MathArrays, ., copyOf, (, counter, ), ;, }, public, int, getCount, (, int, dim, ), {, return, counter, []
[getCount, (, int, dim, ), {, return, counter, [, dim, ], ;, }, public, void, remove, (, ), {, throw]
[), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, public, MultidimensionalCounter, (, int, ..., size, ), throws, NotStrictlyPositiveException, {]
[throw, new, UnsupportedOperationException, (, ), ;, }, }, public, MultidimensionalCounter, (, int, ..., size, ), throws, NotStrictlyPositiveException, {, dimension, =]
[throw, new, UnsupportedOperationException, (, ), ;, }, }, public, MultidimensionalCounter, (, int, ..., size, ), throws, NotStrictlyPositiveException, {, dimension, =]
[), ;, }, }, public, MultidimensionalCounter, (, int, ..., size, ), throws, NotStrictlyPositiveException, {, dimension, =, size, ., length, ;]
[), ;, }, }, public, MultidimensionalCounter, (, int, ..., size, ), throws, NotStrictlyPositiveException, {, dimension, =, size, ., length, ;]
[public, MultidimensionalCounter, (, int, ..., size, ), throws, NotStrictlyPositiveException, {, dimension, =, size, ., length, ;, this, ., size, =]
[public, MultidimensionalCounter, (, int, ..., size, ), throws, NotStrictlyPositiveException, {, dimension, =, size, ., length, ;, this, ., size, =]
[..., size, ), throws, NotStrictlyPositiveException, {, dimension, =, size, ., length, ;, this, ., size, =, MathArrays, ., copyOf, (]
[throws, NotStrictlyPositiveException, {, dimension, =, size, ., length, ;, this, ., size, =, MathArrays, ., copyOf, (, size, ), ;]
[{, dimension, =, size, ., length, ;, this, ., size, =, MathArrays, ., copyOf, (, size, ), ;, uniCounterOffset, =]
[size, ., length, ;, this, ., size, =, MathArrays, ., copyOf, (, size, ), ;, uniCounterOffset, =, new, int, []
[;, this, ., size, =, MathArrays, ., copyOf, (, size, ), ;, uniCounterOffset, =, new, int, [, dimension, ], ;]
[., size, =, MathArrays, ., copyOf, (, size, ), ;, uniCounterOffset, =, new, int, [, dimension, ], ;, last, =]
[., size, =, MathArrays, ., copyOf, (, size, ), ;, uniCounterOffset, =, new, int, [, dimension, ], ;, last, =]
[=, MathArrays, ., copyOf, (, size, ), ;, uniCounterOffset, =, new, int, [, dimension, ], ;, last, =, dimension, -]
[size, ), ;, uniCounterOffset, =, new, int, [, dimension, ], ;, last, =, dimension, -, 1, ;, int, tS, =]
[size, ), ;, uniCounterOffset, =, new, int, [, dimension, ], ;, last, =, dimension, -, 1, ;, int, tS, =]
[;, uniCounterOffset, =, new, int, [, dimension, ], ;, last, =, dimension, -, 1, ;, int, tS, =, size, []
[;, last, =, dimension, -, 1, ;, int, tS, =, size, [, last, ], ;, for, (, int, i, =]
[=, dimension, -, 1, ;, int, tS, =, size, [, last, ], ;, for, (, int, i, =, 0, ;]
[=, dimension, -, 1, ;, int, tS, =, size, [, last, ], ;, for, (, int, i, =, 0, ;]
[-, 1, ;, int, tS, =, size, [, last, ], ;, for, (, int, i, =, 0, ;, i, <]
[;, int, tS, =, size, [, last, ], ;, for, (, int, i, =, 0, ;, i, <, last, ;]
[;, int, tS, =, size, [, last, ], ;, for, (, int, i, =, 0, ;, i, <, last, ;]
[], ;, for, (, int, i, =, 0, ;, i, <, last, ;, i, ++, ), {, int, count, =]
[0, ;, i, <, last, ;, i, ++, ), {, int, count, =, 1, ;, for, (, int, j, =]
[0, ;, i, <, last, ;, i, ++, ), {, int, count, =, 1, ;, for, (, int, j, =]
[i, <, last, ;, i, ++, ), {, int, count, =, 1, ;, for, (, int, j, =, i, +]
[last, ;, i, ++, ), {, int, count, =, 1, ;, for, (, int, j, =, i, +, 1, ;]
[last, ;, i, ++, ), {, int, count, =, 1, ;, for, (, int, j, =, i, +, 1, ;]
[i, ++, ), {, int, count, =, 1, ;, for, (, int, j, =, i, +, 1, ;, j, <]
[), {, int, count, =, 1, ;, for, (, int, j, =, i, +, 1, ;, j, <, dimension, ;]
[), {, int, count, =, 1, ;, for, (, int, j, =, i, +, 1, ;, j, <, dimension, ;]
[=, 1, ;, for, (, int, j, =, i, +, 1, ;, j, <, dimension, ;, j, ++, ), {]
[;, for, (, int, j, =, i, +, 1, ;, j, <, dimension, ;, j, ++, ), {, count, *=]
[;, for, (, int, j, =, i, +, 1, ;, j, <, dimension, ;, j, ++, ), {, count, *=]
[(, int, j, =, i, +, 1, ;, j, <, dimension, ;, j, ++, ), {, count, *=, size, []
[i, +, 1, ;, j, <, dimension, ;, j, ++, ), {, count, *=, size, [, j, ], ;, }]
[i, +, 1, ;, j, <, dimension, ;, j, ++, ), {, count, *=, size, [, j, ], ;, }]
[1, ;, j, <, dimension, ;, j, ++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, []
[<, dimension, ;, j, ++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i, ], =]
[;, j, ++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;]
[++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=]
[++, ), {, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=]
[{, count, *=, size, [, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=, size, []
[[, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=, size, [, i, ], ;, }]
[[, j, ], ;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=, size, [, i, ], ;, }]
[], ;, }, uniCounterOffset, [, i, ], =, count, ;, tS, *=, size, [, i, ], ;, }, uniCounterOffset, []
[uniCounterOffset, [, i, ], =, count, ;, tS, *=, size, [, i, ], ;, }, uniCounterOffset, [, last, ], =]
[=, count, ;, tS, *=, size, [, i, ], ;, }, uniCounterOffset, [, last, ], =, 0, ;, if, (]
[=, count, ;, tS, *=, size, [, i, ], ;, }, uniCounterOffset, [, last, ], =, 0, ;, if, (]
[;, tS, *=, size, [, i, ], ;, }, uniCounterOffset, [, last, ], =, 0, ;, if, (, tS, <=]
[[, i, ], ;, }, uniCounterOffset, [, last, ], =, 0, ;, if, (, tS, <=, 0, ), {, throw]
[;, }, uniCounterOffset, [, last, ], =, 0, ;, if, (, tS, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[last, ], =, 0, ;, if, (, tS, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, tS, ), ;, }]
[=, 0, ;, if, (, tS, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, tS, ), ;, }, totalSize, =]
[throw, new, NotStrictlyPositiveException, (, tS, ), ;, }, totalSize, =, tS, ;, }, public, Iterator, iterator, (, ), {, return]
[public, Iterator, iterator, (, ), {, return, new, Iterator, (, ), ;, }, public, int, getDimension, (, ), {, return]
[), {, return, dimension, ;, }, public, int, [, ], getCounts, (, int, index, ), throws, OutOfRangeException, {, if, (]
[), {, return, dimension, ;, }, public, int, [, ], getCounts, (, int, index, ), throws, OutOfRangeException, {, if, (]
[), {, return, dimension, ;, }, public, int, [, ], getCounts, (, int, index, ), throws, OutOfRangeException, {, if, (]
[return, dimension, ;, }, public, int, [, ], getCounts, (, int, index, ), throws, OutOfRangeException, {, if, (, index, <]
[;, }, public, int, [, ], getCounts, (, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||]
[;, }, public, int, [, ], getCounts, (, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||]
[public, int, [, ], getCounts, (, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||, index, >=]
[getCounts, (, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||, index, >=, totalSize, ), {, throw]
[index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||, index, >=, totalSize, ), {, throw, new, OutOfRangeException, (]
[throws, OutOfRangeException, {, if, (, index, <, 0, ||, index, >=, totalSize, ), {, throw, new, OutOfRangeException, (, index, ,]
[{, if, (, index, <, 0, ||, index, >=, totalSize, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, totalSize, ), ;, }, final, int, [, ], indices, =]
[new, OutOfRangeException, (, index, ,, 0, ,, totalSize, ), ;, }, final, int, [, ], indices, =, new, int, []
[,, totalSize, ), ;, }, final, int, [, ], indices, =, new, int, [, dimension, ], ;, int, count, =]
[[, ], indices, =, new, int, [, dimension, ], ;, int, count, =, 0, ;, for, (, int, i, =]
[indices, =, new, int, [, dimension, ], ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[indices, =, new, int, [, dimension, ], ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[new, int, [, dimension, ], ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[[, dimension, ], ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, last, ;]
[[, dimension, ], ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, last, ;]
[0, ;, for, (, int, i, =, 0, ;, i, <, last, ;, i, ++, ), {, int, idx, =]
[=, 0, ;, i, <, last, ;, i, ++, ), {, int, idx, =, 0, ;, final, int, offset, =]
[=, 0, ;, i, <, last, ;, i, ++, ), {, int, idx, =, 0, ;, final, int, offset, =]
[;, i, <, last, ;, i, ++, ), {, int, idx, =, 0, ;, final, int, offset, =, uniCounterOffset, []
[i, ++, ), {, int, idx, =, 0, ;, final, int, offset, =, uniCounterOffset, [, i, ], ;, while, (]
[i, ++, ), {, int, idx, =, 0, ;, final, int, offset, =, uniCounterOffset, [, i, ], ;, while, (]
[), {, int, idx, =, 0, ;, final, int, offset, =, uniCounterOffset, [, i, ], ;, while, (, count, <=]
[idx, =, 0, ;, final, int, offset, =, uniCounterOffset, [, i, ], ;, while, (, count, <=, index, ), {]
[0, ;, final, int, offset, =, uniCounterOffset, [, i, ], ;, while, (, count, <=, index, ), {, count, +=]
[final, int, offset, =, uniCounterOffset, [, i, ], ;, while, (, count, <=, index, ), {, count, +=, offset, ;]
[int, offset, =, uniCounterOffset, [, i, ], ;, while, (, count, <=, index, ), {, count, +=, offset, ;, ++]
[uniCounterOffset, [, i, ], ;, while, (, count, <=, index, ), {, count, +=, offset, ;, ++, idx, ;, }]
[[, i, ], ;, while, (, count, <=, index, ), {, count, +=, offset, ;, ++, idx, ;, }, --]
[], ;, while, (, count, <=, index, ), {, count, +=, offset, ;, ++, idx, ;, }, --, idx, ;]
[while, (, count, <=, index, ), {, count, +=, offset, ;, ++, idx, ;, }, --, idx, ;, count, -=]
[count, <=, index, ), {, count, +=, offset, ;, ++, idx, ;, }, --, idx, ;, count, -=, offset, ;]
[count, <=, index, ), {, count, +=, offset, ;, ++, idx, ;, }, --, idx, ;, count, -=, offset, ;]
[index, ), {, count, +=, offset, ;, ++, idx, ;, }, --, idx, ;, count, -=, offset, ;, indices, []
[count, +=, offset, ;, ++, idx, ;, }, --, idx, ;, count, -=, offset, ;, indices, [, i, ], =]
[;, ++, idx, ;, }, --, idx, ;, count, -=, offset, ;, indices, [, i, ], =, idx, ;, }]
[;, ++, idx, ;, }, --, idx, ;, count, -=, offset, ;, indices, [, i, ], =, idx, ;, }]
[idx, ;, }, --, idx, ;, count, -=, offset, ;, indices, [, i, ], =, idx, ;, }, indices, []
[--, idx, ;, count, -=, offset, ;, indices, [, i, ], =, idx, ;, }, indices, [, last, ], =]
[--, idx, ;, count, -=, offset, ;, indices, [, i, ], =, idx, ;, }, indices, [, last, ], =]
[;, count, -=, offset, ;, indices, [, i, ], =, idx, ;, }, indices, [, last, ], =, index, -]
[offset, ;, indices, [, i, ], =, idx, ;, }, indices, [, last, ], =, index, -, count, ;, return]
[;, return, indices, ;, }, public, int, getCount, (, int, ..., c, ), throws, OutOfRangeException, ,, DimensionMismatchException, {, if, (]
[;, return, indices, ;, }, public, int, getCount, (, int, ..., c, ), throws, OutOfRangeException, ,, DimensionMismatchException, {, if, (]
[;, return, indices, ;, }, public, int, getCount, (, int, ..., c, ), throws, OutOfRangeException, ,, DimensionMismatchException, {, if, (]
[}, public, int, getCount, (, int, ..., c, ), throws, OutOfRangeException, ,, DimensionMismatchException, {, if, (, c, ., length, !=]
[(, int, ..., c, ), throws, OutOfRangeException, ,, DimensionMismatchException, {, if, (, c, ., length, !=, dimension, ), {, throw]
[c, ), throws, OutOfRangeException, ,, DimensionMismatchException, {, if, (, c, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (]
[c, ), throws, OutOfRangeException, ,, DimensionMismatchException, {, if, (, c, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (]
[,, DimensionMismatchException, {, if, (, c, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, c, ., length, ,]
[length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, c, ., length, ,, dimension, ), ;, }, int, count, =]
[DimensionMismatchException, (, c, ., length, ,, dimension, ), ;, }, int, count, =, 0, ;, for, (, int, i, =]
[c, ., length, ,, dimension, ), ;, }, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[c, ., length, ,, dimension, ), ;, }, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[length, ,, dimension, ), ;, }, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[dimension, ), ;, }, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[dimension, ), ;, }, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, int, index, =]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, int, index, =]
[(, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, int, index, =, c, []
[;, i, <, dimension, ;, i, ++, ), {, final, int, index, =, c, [, i, ], ;, if, (]
[;, i, <, dimension, ;, i, ++, ), {, final, int, index, =, c, [, i, ], ;, if, (]
[;, i, <, dimension, ;, i, ++, ), {, final, int, index, =, c, [, i, ], ;, if, (]
[<, dimension, ;, i, ++, ), {, final, int, index, =, c, [, i, ], ;, if, (, index, <]
[;, i, ++, ), {, final, int, index, =, c, [, i, ], ;, if, (, index, <, 0, ||]
[;, i, ++, ), {, final, int, index, =, c, [, i, ], ;, if, (, index, <, 0, ||]
[++, ), {, final, int, index, =, c, [, i, ], ;, if, (, index, <, 0, ||, index, >=]
[++, ), {, final, int, index, =, c, [, i, ], ;, if, (, index, <, 0, ||, index, >=]
[{, final, int, index, =, c, [, i, ], ;, if, (, index, <, 0, ||, index, >=, size, []
[c, [, i, ], ;, if, (, index, <, 0, ||, index, >=, size, [, i, ], ), {, throw]
[], ;, if, (, index, <, 0, ||, index, >=, size, [, i, ], ), {, throw, new, OutOfRangeException, (]
[if, (, index, <, 0, ||, index, >=, size, [, i, ], ), {, throw, new, OutOfRangeException, (, index, ,]
[index, <, 0, ||, index, >=, size, [, i, ], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[index, <, 0, ||, index, >=, size, [, i, ], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[index, <, 0, ||, index, >=, size, [, i, ], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[0, ||, index, >=, size, [, i, ], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, []
[>=, size, [, i, ], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -]
[], ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -, 1, ), ;, }]
[{, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -, 1, ), ;, }, count, +=]
[{, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -, 1, ), ;, }, count, +=]
[{, throw, new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -, 1, ), ;, }, count, +=]
[new, OutOfRangeException, (, index, ,, 0, ,, size, [, i, ], -, 1, ), ;, }, count, +=, uniCounterOffset, []
[index, ,, 0, ,, size, [, i, ], -, 1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *]
[index, ,, 0, ,, size, [, i, ], -, 1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *]
[0, ,, size, [, i, ], -, 1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *, c, []
[], -, 1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i, ], ;, }, return]
[], -, 1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i, ], ;, }, return]
[1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i, ], ;, }, return, count, +]
[1, ), ;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i, ], ;, }, return, count, +]
[;, }, count, +=, uniCounterOffset, [, i, ], *, c, [, i, ], ;, }, return, count, +, c, []
[i, ], ;, }, return, count, +, c, [, last, ], ;, }, public, int, getSize, (, ), {, return]
[}, public, int, getSize, (, ), {, return, totalSize, ;, }, public, int, [, ], getSizes, (, ), {, return]
[}, public, int, getSize, (, ), {, return, totalSize, ;, }, public, int, [, ], getSizes, (, ), {, return]
[(, ), {, return, totalSize, ;, }, public, int, [, ], getSizes, (, ), {, return, MathArrays, ., copyOf, (]
[MathArrays, ., copyOf, (, size, ), ;, }, @, Override, public, String, toString, (, ), {, final, StringBuilder, sb, =]
[public, String, toString, (, ), {, final, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =]
[toString, (, ), {, final, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;]
[toString, (, ), {, final, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;]
[), {, final, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[final, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[final, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, sb, ., append, (]
[=, 0, ;, i, <, dimension, ;, i, ++, ), {, sb, ., append, (, "[", ), ., append, (]
[;, i, <, dimension, ;, i, ++, ), {, sb, ., append, (, "[", ), ., append, (, getCount, (]
[++, ), {, sb, ., append, (, "[", ), ., append, (, getCount, (, i, ), ), ., append, (]
[append, (, "[", ), ., append, (, getCount, (, i, ), ), ., append, (, "]", ), ;, }, return]
[append, (, "[", ), ., append, (, getCount, (, i, ), ), ., append, (, "]", ), ;, }, return]
