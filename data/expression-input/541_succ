[=, name, ;, this, ., newName, =, null, ;, this, ., prototypeCount, =, 0, ;, this, ., objLitCount, =, 0]
[., oldName, =, name, ;, this, ., newName, =, null, ;, this, ., prototypeCount, =, 0, ;, this, ., objLitCount]
[;, this, ., newName, =, null, ;, this, ., prototypeCount, =, 0, ;, this, ., objLitCount, =, 0, ;, this]
[=, null, ;, this, ., prototypeCount, =, 0, ;, this, ., objLitCount, =, 0, ;, this, ., refCount, =, 0]
[., newName, =, null, ;, this, ., prototypeCount, =, 0, ;, this, ., objLitCount, =, 0, ;, this, ., refCount]
[;, this, ., prototypeCount, =, 0, ;, this, ., objLitCount, =, 0, ;, this, ., refCount, =, 0, ;, }]
[=, 0, ;, this, ., objLitCount, =, 0, ;, this, ., refCount, =, 0, ;, }, int, count, (, )]
[., prototypeCount, =, 0, ;, this, ., objLitCount, =, 0, ;, this, ., refCount, =, 0, ;, }, int, count]
[;, this, ., objLitCount, =, 0, ;, this, ., refCount, =, 0, ;, }, int, count, (, ), {, return]
[=, 0, ;, this, ., refCount, =, 0, ;, }, int, count, (, ), {, return, prototypeCount, +, objLitCount, +]
[., objLitCount, =, 0, ;, this, ., refCount, =, 0, ;, }, int, count, (, ), {, return, prototypeCount, +]
[;, this, ., refCount, =, 0, ;, }, int, count, (, ), {, return, prototypeCount, +, objLitCount, +, refCount, ;]
[=, 0, ;, }, int, count, (, ), {, return, prototypeCount, +, objLitCount, +, refCount, ;, }, boolean, canRename, (]
[., refCount, =, 0, ;, }, int, count, (, ), {, return, prototypeCount, +, objLitCount, +, refCount, ;, }, boolean]
[;, }, int, count, (, ), {, return, prototypeCount, +, objLitCount, +, refCount, ;, }, boolean, canRename, (, ), {]
[;, }, boolean, canRename, (, ), {, if, (, this, ., prototypeCount, >, 0, &&, this, ., objLitCount, ==, 0]
[+, refCount, ;, }, boolean, canRename, (, ), {, if, (, this, ., prototypeCount, >, 0, &&, this, ., objLitCount]
[+, objLitCount, +, refCount, ;, }, boolean, canRename, (, ), {, if, (, this, ., prototypeCount, >, 0, &&, this]
[+, refCount, ;, }, boolean, canRename, (, ), {, if, (, this, ., prototypeCount, >, 0, &&, this, ., objLitCount]
[;, }, boolean, canRename, (, ), {, if, (, this, ., prototypeCount, >, 0, &&, this, ., objLitCount, ==, 0]
[), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >, 0, &&, this, ., prototypeCount, ==]
[&&, this, ., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >]
[>, 0, &&, this, ., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, .]
[., prototypeCount, >, 0, &&, this, ., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (]
[&&, this, ., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >]
[), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >, 0, &&, this, ., prototypeCount, ==]
[==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >, 0, &&, this, .]
[., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >, 0, &&]
[), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >, 0, &&, this, ., prototypeCount, ==]
[;, }, if, (, this, ., objLitCount, >, 0, &&, this, ., prototypeCount, ==, 0, ), {, return, canRenameObjLitProperty, (]
[), {, return, canRenameObjLitProperty, (, ), ;, }, return, canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty, (, ), ;, }, private, boolean]
[&&, this, ., prototypeCount, ==, 0, ), {, return, canRenameObjLitProperty, (, ), ;, }, return, canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty]
[>, 0, &&, this, ., prototypeCount, ==, 0, ), {, return, canRenameObjLitProperty, (, ), ;, }, return, canRenamePrototypeProperty, (, )]
[., objLitCount, >, 0, &&, this, ., prototypeCount, ==, 0, ), {, return, canRenameObjLitProperty, (, ), ;, }, return, canRenamePrototypeProperty]
[&&, this, ., prototypeCount, ==, 0, ), {, return, canRenameObjLitProperty, (, ), ;, }, return, canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty]
[), {, return, canRenameObjLitProperty, (, ), ;, }, return, canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty, (, ), ;, }, private, boolean]
[==, 0, ), {, return, canRenameObjLitProperty, (, ), ;, }, return, canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty, (, ), ;, }]
[., prototypeCount, ==, 0, ), {, return, canRenameObjLitProperty, (, ), ;, }, return, canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty, (, )]
[), {, return, canRenameObjLitProperty, (, ), ;, }, return, canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty, (, ), ;, }, private, boolean]
[;, }, return, canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty, (, ), ;, }, private, boolean, canRenamePrototypeProperty, (, ), {, if, (]
[;, }, private, boolean, canRenamePrototypeProperty, (, ), {, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, )]
[&&, canRenameObjLitProperty, (, ), ;, }, private, boolean, canRenamePrototypeProperty, (, ), {, if, (, compiler, ., getCodingConvention, (, ), .]
[;, }, private, boolean, canRenamePrototypeProperty, (, ), {, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, )]
[), {, return, false, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, ), ), {]
[., isExported, (, oldName, ), ), {, return, false, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate]
[., getCodingConvention, (, ), ., isExported, (, oldName, ), ), {, return, false, ;, }, if, (, compiler, ., getCodingConvention]
[), ), {, return, false, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, ), )]
[;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, if, (, aggressiveRenaming, ), {, return, true, ;, }, for, (, int, i, =]
[., isPrivate, (, oldName, ), ), {, return, true, ;, }, if, (, aggressiveRenaming, ), {, return, true, ;, }]
[., getCodingConvention, (, ), ., isPrivate, (, oldName, ), ), {, return, true, ;, }, if, (, aggressiveRenaming, ), {]
[), ), {, return, true, ;, }, if, (, aggressiveRenaming, ), {, return, true, ;, }, for, (, int, i]
[;, }, if, (, aggressiveRenaming, ), {, return, true, ;, }, for, (, int, i, =, 0, ,, n, =]
[), {, return, true, ;, }, for, (, int, i, =, 0, ,, n, =, oldName, ., length, (, )]
[;, }, for, (, int, i, =, 0, ,, n, =, oldName, ., length, (, ), ;, i, <, n]
[,, n, =, oldName, ., length, (, ), ;, i, <, n, ;, i, ++, ), {, char, ch, =]
[;, i, <, n, ;, i, ++, ), {, char, ch, =, oldName, ., charAt, (, i, ), ;, if]
[., length, (, ), ;, i, <, n, ;, i, ++, ), {, char, ch, =, oldName, ., charAt, (]
[;, i, ++, ), {, char, ch, =, oldName, ., charAt, (, i, ), ;, if, (, Character, ., isUpperCase]
[<, n, ;, i, ++, ), {, char, ch, =, oldName, ., charAt, (, i, ), ;, if, (, Character]
[;, i, ++, ), {, char, ch, =, oldName, ., charAt, (, i, ), ;, if, (, Character, ., isUpperCase]
[), {, char, ch, =, oldName, ., charAt, (, i, ), ;, if, (, Character, ., isUpperCase, (, ch, )]
[++, ), {, char, ch, =, oldName, ., charAt, (, i, ), ;, if, (, Character, ., isUpperCase, (, ch]
[;, if, (, Character, ., isUpperCase, (, ch, ), ||, !, Character, ., isLetter, (, ch, ), ), {, return]
[., charAt, (, i, ), ;, if, (, Character, ., isUpperCase, (, ch, ), ||, !, Character, ., isLetter, (]
[), ;, if, (, Character, ., isUpperCase, (, ch, ), ||, !, Character, ., isLetter, (, ch, ), ), {]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, canRenameObjLitProperty, (, ), {, if, (, compiler]
[||, !, Character, ., isLetter, (, ch, ), ), {, return, true, ;, }, }, return, false, ;, }, private]
[., isUpperCase, (, ch, ), ||, !, Character, ., isLetter, (, ch, ), ), {, return, true, ;, }, }]
[), ||, !, Character, ., isLetter, (, ch, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, canRenameObjLitProperty, (, ), {, if, (, compiler]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, canRenameObjLitProperty, (, ), {, if, (, compiler]
[., isLetter, (, ch, ), ), {, return, true, ;, }, }, return, false, ;, }, private, boolean, canRenameObjLitProperty, (]
[), ), {, return, true, ;, }, }, return, false, ;, }, private, boolean, canRenameObjLitProperty, (, ), {, if, (]
[;, }, }, return, false, ;, }, private, boolean, canRenameObjLitProperty, (, ), {, if, (, compiler, ., getCodingConvention, (, )]
[;, }, private, boolean, canRenameObjLitProperty, (, ), {, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, )]
[), {, return, false, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, ), ), {]
[., isExported, (, oldName, ), ), {, return, false, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate]
[., getCodingConvention, (, ), ., isExported, (, oldName, ), ), {, return, false, ;, }, if, (, compiler, ., getCodingConvention]
[), ), {, return, false, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, ), )]
[;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, return, false, ;, }, }, private, static, final, Comparator, <, Property, >, FREQUENCY_COMPARATOR, =]
[., isPrivate, (, oldName, ), ), {, return, true, ;, }, return, false, ;, }, }, private, static, final, Comparator]
[., getCodingConvention, (, ), ., isPrivate, (, oldName, ), ), {, return, true, ;, }, return, false, ;, }, }]
[), ), {, return, true, ;, }, return, false, ;, }, }, private, static, final, Comparator, <, Property, >, FREQUENCY_COMPARATOR]
[;, }, return, false, ;, }, }, private, static, final, Comparator, <, Property, >, FREQUENCY_COMPARATOR, =, new, Comparator, <, Property]
[;, }, }, private, static, final, Comparator, <, Property, >, FREQUENCY_COMPARATOR, =, new, Comparator, <, Property, >, (, ), {]
[;, private, final, Set, <, Node, >, stringNodes, =, new, HashSet, <, Node, >, (, ), ;, private, final, Map]
[;, int, n2, =, a2, ., count, (, ), ;, if, (, n1, !=, n2, ), {, return, n2, -]
[., count, (, ), ;, int, n2, =, a2, ., count, (, ), ;, if, (, n1, !=, n2, )]
[;, if, (, n1, !=, n2, ), {, return, n2, -, n1, ;, }, return, a1, ., oldName, ., compareTo]
[., count, (, ), ;, if, (, n1, !=, n2, ), {, return, n2, -, n1, ;, }, return, a1]
[), {, return, n2, -, n1, ;, }, return, a1, ., oldName, ., compareTo, (, a2, ., oldName, ), ;]
[!=, n2, ), {, return, n2, -, n1, ;, }, return, a1, ., oldName, ., compareTo, (, a2, ., oldName]
[), {, return, n2, -, n1, ;, }, return, a1, ., oldName, ., compareTo, (, a2, ., oldName, ), ;]
[;, }, return, a1, ., oldName, ., compareTo, (, a2, ., oldName, ), ;, }, }, ;, private, final, Set]
[-, n1, ;, }, return, a1, ., oldName, ., compareTo, (, a2, ., oldName, ), ;, }, }, ;, private]
[;, }, return, a1, ., oldName, ., compareTo, (, a2, ., oldName, ), ;, }, }, ;, private, final, Set]
[;, }, }, ;, private, final, Set, <, Node, >, stringNodes, =, new, HashSet, <, Node, >, (, ), ;]
[., compareTo, (, a2, ., oldName, ), ;, }, }, ;, private, final, Set, <, Node, >, stringNodes, =, new]
[., oldName, ., compareTo, (, a2, ., oldName, ), ;, }, }, ;, private, final, Set, <, Node, >, stringNodes]
[), ;, }, }, ;, private, final, Set, <, Node, >, stringNodes, =, new, HashSet, <, Node, >, (, )]
[., oldName, ), ;, }, }, ;, private, final, Set, <, Node, >, stringNodes, =, new, HashSet, <, Node, >]
[;, private, final, Map, <, String, ,, Property, >, properties, =, new, HashMap, <, String, ,, Property, >, (, )]
[;, private, final, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, Arrays, ., asList, (, "indexOf"]
[;, private, final, Set, <, Node, >, prototypeObjLits, =, new, HashSet, <, Node, >, (, ), ;, RenamePrototypes, (, AbstractCompiler]
[), ;, private, final, Set, <, Node, >, prototypeObjLits, =, new, HashSet, <, Node, >, (, ), ;, RenamePrototypes, (]
[., asList, (, "indexOf", ,, "lastIndexOf", ,, "toString", ,, "valueOf", ), ), ;, private, final, Set, <, Node, >, prototypeObjLits]
[,, "lastIndexOf", ,, "toString", ,, "valueOf", ), ), ;, private, final, Set, <, Node, >, prototypeObjLits, =, new, HashSet, <]
[,, "toString", ,, "valueOf", ), ), ;, private, final, Set, <, Node, >, prototypeObjLits, =, new, HashSet, <, Node, >]
[,, "valueOf", ), ), ;, private, final, Set, <, Node, >, prototypeObjLits, =, new, HashSet, <, Node, >, (, )]
[), ), ;, private, final, Set, <, Node, >, prototypeObjLits, =, new, HashSet, <, Node, >, (, ), ;, RenamePrototypes]
[;, RenamePrototypes, (, AbstractCompiler, compiler, ,, boolean, aggressiveRenaming, ,, @, Nullable, char, [, ], reservedCharacters, ,, @, Nullable, VariableMap, prevUsedRenameMap]
[=, compiler, ;, this, ., aggressiveRenaming, =, aggressiveRenaming, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., prevUsedRenameMap, =, prevUsedRenameMap]
[., compiler, =, compiler, ;, this, ., aggressiveRenaming, =, aggressiveRenaming, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., prevUsedRenameMap]
[;, this, ., aggressiveRenaming, =, aggressiveRenaming, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, }]
[=, aggressiveRenaming, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, }, @, Override, public, void]
[., aggressiveRenaming, =, aggressiveRenaming, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, }, @, Override]
[;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, }, @, Override, public, void, process, (]
[=, reservedCharacters, ;, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., reservedCharacters, =, reservedCharacters, ;, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, prevUsedRenameMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState]
[., prevUsedRenameMap, =, prevUsedRenameMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, compiler]
[;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternedProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternedProperties, (, ), ), ;, NodeTraversal, ., traverse, (]
[., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternedProperties, (, ), ), ;]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternedProperties]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, SortedSet, <, Property, >, propsByFrequency]
[., traverse, (, compiler, ,, externs, ,, new, ProcessExternedProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, externs, ,, new, ProcessExternedProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (]
[,, new, ProcessExternedProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, SortedSet, <, Property, >]
[;, SortedSet, <, Property, >, propsByFrequency, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, ), ;, for, (, Iterator, <]
[., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, SortedSet, <, Property, >, propsByFrequency, =, new]
[,, root, ,, new, ProcessProperties, (, ), ), ;, SortedSet, <, Property, >, propsByFrequency, =, new, TreeSet, <, Property, >]
[,, new, ProcessProperties, (, ), ), ;, SortedSet, <, Property, >, propsByFrequency, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR]
[), ;, SortedSet, <, Property, >, propsByFrequency, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, ), ;, for, (, Iterator]
[;, for, (, Iterator, <, Map, ., Entry, <, String, ,, Property, >, >, it, =, properties, ., entrySet, (]
[), ;, for, (, Iterator, <, Map, ., Entry, <, String, ,, Property, >, >, it, =, properties, ., entrySet]
[;, it, ., hasNext, (, ), ;, ), {, Property, a, =, it, ., next, (, ), ., getValue, (]
[., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Property, a, =, it, ., next, (]
[., entrySet, (, ), ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Property, a, =]
[;, ), {, Property, a, =, it, ., next, (, ), ., getValue, (, ), ;, if, (, a, .]
[., hasNext, (, ), ;, ), {, Property, a, =, it, ., next, (, ), ., getValue, (, ), ;]
[;, if, (, a, ., canRename, (, ), &&, !, reservedNames, ., contains, (, a, ., oldName, ), ), {]
[., getValue, (, ), ;, if, (, a, ., canRename, (, ), &&, !, reservedNames, ., contains, (, a, .]
[., next, (, ), ., getValue, (, ), ;, if, (, a, ., canRename, (, ), &&, !, reservedNames, .]
[), {, propsByFrequency, ., add, (, a, ), ;, }, else, {, it, ., remove, (, ), ;, reservedNames, .]
[&&, !, reservedNames, ., contains, (, a, ., oldName, ), ), {, propsByFrequency, ., add, (, a, ), ;, }]
[., canRename, (, ), &&, !, reservedNames, ., contains, (, a, ., oldName, ), ), {, propsByFrequency, ., add, (]
[), {, propsByFrequency, ., add, (, a, ), ;, }, else, {, it, ., remove, (, ), ;, reservedNames, .]
[), {, propsByFrequency, ., add, (, a, ), ;, }, else, {, it, ., remove, (, ), ;, reservedNames, .]
[., contains, (, a, ., oldName, ), ), {, propsByFrequency, ., add, (, a, ), ;, }, else, {, it]
[), ), {, propsByFrequency, ., add, (, a, ), ;, }, else, {, it, ., remove, (, ), ;, reservedNames]
[., oldName, ), ), {, propsByFrequency, ., add, (, a, ), ;, }, else, {, it, ., remove, (, )]
[;, }, else, {, it, ., remove, (, ), ;, reservedNames, ., add, (, a, ., oldName, ), ;, }]
[., add, (, a, ), ;, }, else, {, it, ., remove, (, ), ;, reservedNames, ., add, (, a]
[), ;, }, else, {, it, ., remove, (, ), ;, reservedNames, ., add, (, a, ., oldName, ), ;]
[;, reservedNames, ., add, (, a, ., oldName, ), ;, }, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePrototypeNames]
[., remove, (, ), ;, reservedNames, ., add, (, a, ., oldName, ), ;, }, }, if, (, prevUsedRenameMap, !=]
[;, }, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePrototypeNames, (, propsByFrequency, ), ;, }, NameGenerator, nameGen, =, new]
[., add, (, a, ., oldName, ), ;, }, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePrototypeNames, (, propsByFrequency]
[), ;, }, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePrototypeNames, (, propsByFrequency, ), ;, }, NameGenerator, nameGen, =]
[., oldName, ), ;, }, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePrototypeNames, (, propsByFrequency, ), ;, }, NameGenerator]
[), {, reusePrototypeNames, (, propsByFrequency, ), ;, }, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, )]
[!=, null, ), {, reusePrototypeNames, (, propsByFrequency, ), ;, }, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,]
[), {, reusePrototypeNames, (, propsByFrequency, ), ;, }, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, )]
[;, }, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, StringBuilder, debug, =, new, StringBuilder]
[), ;, }, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, StringBuilder, debug, =, new]
[;, StringBuilder, debug, =, new, StringBuilder, (, ), ;, for, (, Property, a, :, propsByFrequency, ), {, if, (, a]
[,, "", ,, reservedCharacters, ), ;, StringBuilder, debug, =, new, StringBuilder, (, ), ;, for, (, Property, a, :, propsByFrequency]
[,, reservedCharacters, ), ;, StringBuilder, debug, =, new, StringBuilder, (, ), ;, for, (, Property, a, :, propsByFrequency, ), {]
[), ;, StringBuilder, debug, =, new, StringBuilder, (, ), ;, for, (, Property, a, :, propsByFrequency, ), {, if, (]
[;, for, (, Property, a, :, propsByFrequency, ), {, if, (, a, ., newName, ==, null, ), {, a, .]
[), {, if, (, a, ., newName, ==, null, ), {, a, ., newName, =, nameGen, ., generateNextName, (, )]
[), {, a, ., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, )]
[==, null, ), {, a, ., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, .]
[., newName, ==, null, ), {, a, ., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (]
[), {, a, ., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, )]
[=, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, ), ;, }, debug, ., append]
[., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, ), ;, }, debug]
[;, reservedNames, ., add, (, a, ., newName, ), ;, }, debug, ., append, (, a, ., oldName, ), .]
[., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, ), ;, }, debug, ., append, (, a]
[;, }, debug, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (, a, .]
[., add, (, a, ., newName, ), ;, }, debug, ., append, (, a, ., oldName, ), ., append, (]
[), ;, }, debug, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (, a]
[., newName, ), ;, }, debug, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append]
[;, }, compiler, ., addToDebugLog, (, "JS property assignments:\n", +, debug, ), ;, boolean, changed, =, false, ;, for, (, Node, n]
[., append, (, '\n', ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:\n", +, debug, ), ;, boolean, changed, =, false]
[., append, (, a, ., newName, ), ., append, (, '\n', ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:\n", +]
[., append, (, " => ", ), ., append, (, a, ., newName, ), ., append, (, '\n', ), ;, }, compiler]
[., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (, a, ., newName, ), .]
[), ., append, (, " => ", ), ., append, (, a, ., newName, ), ., append, (, '\n', ), ;, }]
[., oldName, ), ., append, (, " => ", ), ., append, (, a, ., newName, ), ., append, (, '\n', )]
[), ., append, (, a, ., newName, ), ., append, (, '\n', ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:\n"]
[), ., append, (, '\n', ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:\n", +, debug, ), ;, boolean, changed, =]
[., newName, ), ., append, (, '\n', ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:\n", +, debug, ), ;, boolean]
[), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:\n", +, debug, ), ;, boolean, changed, =, false, ;, for, (, Node]
[;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodes, ), {, String, oldName, =, n, ., getString]
[., addToDebugLog, (, "JS property assignments:\n", +, debug, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodes, )]
[), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodes, ), {, String, oldName, =, n, .]
[+, debug, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodes, ), {, String, oldName, =]
[), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodes, ), {, String, oldName, =, n, .]
[;, for, (, Node, n, :, stringNodes, ), {, String, oldName, =, n, ., getString, (, ), ;, Property, a]
[), {, String, oldName, =, n, ., getString, (, ), ;, Property, a, =, properties, ., get, (, oldName, )]
[;, Property, a, =, properties, ., get, (, oldName, ), ;, if, (, a, !=, null, &&, a, ., newName]
[., getString, (, ), ;, Property, a, =, properties, ., get, (, oldName, ), ;, if, (, a, !=, null]
[;, if, (, a, !=, null, &&, a, ., newName, !=, null, ), {, n, ., setString, (, a, .]
[., get, (, oldName, ), ;, if, (, a, !=, null, &&, a, ., newName, !=, null, ), {, n]
[), ;, if, (, a, !=, null, &&, a, ., newName, !=, null, ), {, n, ., setString, (, a]
[), {, n, ., setString, (, a, ., newName, ), ;, changed, =, changed, ||, !, a, ., newName, .]
[&&, a, ., newName, !=, null, ), {, n, ., setString, (, a, ., newName, ), ;, changed, =, changed]
[!=, null, &&, a, ., newName, !=, null, ), {, n, ., setString, (, a, ., newName, ), ;, changed]
[&&, a, ., newName, !=, null, ), {, n, ., setString, (, a, ., newName, ), ;, changed, =, changed]
[), {, n, ., setString, (, a, ., newName, ), ;, changed, =, changed, ||, !, a, ., newName, .]
[!=, null, ), {, n, ., setString, (, a, ., newName, ), ;, changed, =, changed, ||, !, a, .]
[., newName, !=, null, ), {, n, ., setString, (, a, ., newName, ), ;, changed, =, changed, ||, !]
[), {, n, ., setString, (, a, ., newName, ), ;, changed, =, changed, ||, !, a, ., newName, .]
[;, changed, =, changed, ||, !, a, ., newName, ., equals, (, oldName, ), ;, }, }, if, (, changed]
[., setString, (, a, ., newName, ), ;, changed, =, changed, ||, !, a, ., newName, ., equals, (, oldName]
[), ;, changed, =, changed, ||, !, a, ., newName, ., equals, (, oldName, ), ;, }, }, if, (]
[., newName, ), ;, changed, =, changed, ||, !, a, ., newName, ., equals, (, oldName, ), ;, }, }]
[=, changed, ||, !, a, ., newName, ., equals, (, oldName, ), ;, }, }, if, (, changed, ), {]
[;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (, LifeCycleStage]
[||, !, a, ., newName, ., equals, (, oldName, ), ;, }, }, if, (, changed, ), {, compiler, .]
[;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (, LifeCycleStage]
[;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (, LifeCycleStage]
[., equals, (, oldName, ), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[., newName, ., equals, (, oldName, ), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, )]
[), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (]
[), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED_OBFUSCATED, ), ;, }, private]
[;, }, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED_OBFUSCATED, ), ;, }, private, void, reusePrototypeNames, (, Set, <, Property, >]
[., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED_OBFUSCATED, ), ;, }, private, void, reusePrototypeNames, (]
[;, }, private, void, reusePrototypeNames, (, Set, <, Property, >, properties, ), {, for, (, Property, prop, :, properties, )]
[., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED_OBFUSCATED, ), ;, }, private, void, reusePrototypeNames, (, Set, <, Property, >, properties, ), {]
[), ;, }, private, void, reusePrototypeNames, (, Set, <, Property, >, properties, ), {, for, (, Property, prop, :, properties]
[., NORMALIZED_OBFUSCATED, ), ;, }, private, void, reusePrototypeNames, (, Set, <, Property, >, properties, ), {, for, (, Property, prop]
[), {, String, prevName, =, prevUsedRenameMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (, prevName, !=, null, )]
[;, if, (, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;]
[., lookupNewName, (, prop, ., oldName, ), ;, if, (, prevName, !=, null, ), {, if, (, reservedNames, ., contains]
[), ;, if, (, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue]
[., oldName, ), ;, if, (, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), )]
[), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName]
[!=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName]
[), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName]
[), {, continue, ;, }, prop, ., newName, =, prevName, ;, reservedNames, ., add, (, prevName, ), ;, }, }]
[., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName, ;, reservedNames, ., add, (]
[), ), {, continue, ;, }, prop, ., newName, =, prevName, ;, reservedNames, ., add, (, prevName, ), ;, }]
[=, prevName, ;, reservedNames, ., add, (, prevName, ), ;, }, }, }, private, class, ProcessExternedProperties, extends, AbstractPostOrderCallback, {, @]
[., newName, =, prevName, ;, reservedNames, ., add, (, prevName, ), ;, }, }, }, private, class, ProcessExternedProperties, extends, AbstractPostOrderCallback]
[;, reservedNames, ., add, (, prevName, ), ;, }, }, }, private, class, ProcessExternedProperties, extends, AbstractPostOrderCallback, {, @, Override, public]
[;, }, }, }, private, class, ProcessExternedProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[., add, (, prevName, ), ;, }, }, }, private, class, ProcessExternedProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit]
[), ;, }, }, }, private, class, ProcessExternedProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, )]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n]
[:, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if]
[., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, )]
[:, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (]
[., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, .]
[;, if, (, dest, ., isString, (, ), ), {, reservedNames, ., add, (, dest, ., getString, (, ), )]
[., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, reservedNames, ., add, (, dest, .]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, reservedNames, .]
[), {, reservedNames, ., add, (, dest, ., getString, (, ), ), ;, }, }, }, }, private, class, ProcessProperties]
[., isString, (, ), ), {, reservedNames, ., add, (, dest, ., getString, (, ), ), ;, }, }, }]
[;, }, }, }, }, private, class, ProcessProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[., add, (, dest, ., getString, (, ), ), ;, }, }, }, }, private, class, ProcessProperties, extends, AbstractPostOrderCallback, {]
[), ;, }, }, }, }, private, class, ProcessProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t]
[., getString, (, ), ), ;, }, }, }, }, private, class, ProcessProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void]
[), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, )]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n]
[:, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if]
[., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, )]
[:, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (]
[., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, .]
[;, if, (, dest, ., isString, (, ), ), {, String, s, =, dest, ., getString, (, ), ;, if]
[., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, String, s, =, dest, ., getString]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, String, s]
[), {, String, s, =, dest, ., getString, (, ), ;, if, (, s, ., equals, (, "prototype", ), )]
[., isString, (, ), ), {, String, s, =, dest, ., getString, (, ), ;, if, (, s, ., equals]
[;, if, (, s, ., equals, (, "prototype", ), ), {, processPrototypeParent, (, parent, ,, t, ., getInput, (, )]
[., getString, (, ), ;, if, (, s, ., equals, (, "prototype", ), ), {, processPrototypeParent, (, parent, ,, t]
[), {, processPrototypeParent, (, parent, ,, t, ., getInput, (, ), ), ;, }, else, {, markPropertyAccessCandidate, (, dest, ,]
[., equals, (, "prototype", ), ), {, processPrototypeParent, (, parent, ,, t, ., getInput, (, ), ), ;, }, else]
[), ), {, processPrototypeParent, (, parent, ,, t, ., getInput, (, ), ), ;, }, else, {, markPropertyAccessCandidate, (, dest]
[;, }, else, {, markPropertyAccessCandidate, (, dest, ,, t, ., getInput, (, ), ), ;, }, }, break, ;, case]
[,, t, ., getInput, (, ), ), ;, }, else, {, markPropertyAccessCandidate, (, dest, ,, t, ., getInput, (, )]
[), ;, }, else, {, markPropertyAccessCandidate, (, dest, ,, t, ., getInput, (, ), ), ;, }, }, break, ;]
[., getInput, (, ), ), ;, }, else, {, markPropertyAccessCandidate, (, dest, ,, t, ., getInput, (, ), ), ;]
[;, }, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, prototypeObjLits, ., contains, (, n, ), )]
[,, t, ., getInput, (, ), ), ;, }, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !]
[), ;, }, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, prototypeObjLits, ., contains, (, n, )]
[., getInput, (, ), ), ;, }, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, prototypeObjLits, .]
[:, if, (, !, prototypeObjLits, ., contains, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild]
[., OBJECTLIT, :, if, (, !, prototypeObjLits, ., contains, (, n, ), ), {, for, (, Node, child, =, n]
[), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child]
[), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child]
[., contains, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[;, child, =, child, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, child, ., getString, (]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, child, .]
[;, child, =, child, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, child, ., getString, (]
[=, child, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, child, ., getString, (, ), )]
[), {, if, (, TokenStream, ., isJSIdentifier, (, child, ., getString, (, ), ), ), {, markObjLitPropertyCandidate, (, child, ,]
[., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, child, ., getString, (, ), ), ), {]
[), {, markObjLitPropertyCandidate, (, child, ,, t, ., getInput, (, ), ), ;, }, }, }, break, ;, }, }]
[., isJSIdentifier, (, child, ., getString, (, ), ), ), {, markObjLitPropertyCandidate, (, child, ,, t, ., getInput, (, )]
[), ), {, markObjLitPropertyCandidate, (, child, ,, t, ., getInput, (, ), ), ;, }, }, }, break, ;, }]
[., getString, (, ), ), ), {, markObjLitPropertyCandidate, (, child, ,, t, ., getInput, (, ), ), ;, }, }]
[;, }, }, }, break, ;, }, }, private, void, processPrototypeParent, (, Node, n, ,, CompilerInput, input, ), {, switch]
[,, t, ., getInput, (, ), ), ;, }, }, }, break, ;, }, }, private, void, processPrototypeParent, (, Node]
[), ;, }, }, }, break, ;, }, }, private, void, processPrototypeParent, (, Node, n, ,, CompilerInput, input, ), {]
[., getInput, (, ), ), ;, }, }, }, break, ;, }, }, private, void, processPrototypeParent, (, Node, n, ,]
[), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, )]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n]
[:, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if]
[., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, )]
[:, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (]
[., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, .]
[;, if, (, dest, ., isString, (, ), ), {, markPrototypePropertyCandidate, (, dest, ,, input, ), ;, }, break, ;]
[., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, markPrototypePropertyCandidate, (, dest, ,, input, )]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, markPrototypePropertyCandidate, (]
[), {, markPrototypePropertyCandidate, (, dest, ,, input, ), ;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, .]
[., isString, (, ), ), {, markPrototypePropertyCandidate, (, dest, ,, input, ), ;, }, break, ;, case, Token, ., ASSIGN]
[;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., CALL, :, Node, map, ;, if, (, n]
[,, input, ), ;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., CALL, :, Node, map, ;]
[), ;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., CALL, :, Node, map, ;, if, (]
[:, case, Token, ., CALL, :, Node, map, ;, if, (, n, ., isAssign, (, ), ), {, map, =]
[., ASSIGN, :, case, Token, ., CALL, :, Node, map, ;, if, (, n, ., isAssign, (, ), ), {]
[:, Node, map, ;, if, (, n, ., isAssign, (, ), ), {, map, =, n, ., getFirstChild, (, )]
[., CALL, :, Node, map, ;, if, (, n, ., isAssign, (, ), ), {, map, =, n, ., getFirstChild]
[), {, map, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, }, else, {, map, =, n]
[., isAssign, (, ), ), {, map, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, }, else]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, }, else, {, map, =, n, ., getLastChild, (]
[;, }, else, {, map, =, n, ., getLastChild, (, ), ;, }, if, (, map, ., isObjectLit, (, )]
[., getNext, (, ), ;, }, else, {, map, =, n, ., getLastChild, (, ), ;, }, if, (, map]
[., getFirstChild, (, ), ., getNext, (, ), ;, }, else, {, map, =, n, ., getLastChild, (, ), ;]
[=, n, ., getLastChild, (, ), ;, }, if, (, map, ., isObjectLit, (, ), ), {, prototypeObjLits, ., add]
[;, }, if, (, map, ., isObjectLit, (, ), ), {, prototypeObjLits, ., add, (, map, ), ;, for, (]
[., getLastChild, (, ), ;, }, if, (, map, ., isObjectLit, (, ), ), {, prototypeObjLits, ., add, (, map]
[), {, prototypeObjLits, ., add, (, map, ), ;, for, (, Node, key, =, map, ., getFirstChild, (, ), ;]
[., isObjectLit, (, ), ), {, prototypeObjLits, ., add, (, map, ), ;, for, (, Node, key, =, map, .]
[;, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, .]
[., add, (, map, ), ;, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=, null]
[), ;, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[;, key, =, key, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, key, ., getString, (]
[!=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, key, .]
[;, key, =, key, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, key, ., getString, (]
[=, key, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), )]
[), {, if, (, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ), {, markPrototypePropertyCandidate, (, key, ,]
[., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ), {]
[), {, markPrototypePropertyCandidate, (, key, ,, input, ), ;, }, }, }, break, ;, }, }, private, void, markPrototypePropertyCandidate, (]
[., isJSIdentifier, (, key, ., getString, (, ), ), ), {, markPrototypePropertyCandidate, (, key, ,, input, ), ;, }, }]
[), ), {, markPrototypePropertyCandidate, (, key, ,, input, ), ;, }, }, }, break, ;, }, }, private, void, markPrototypePropertyCandidate]
[., getString, (, ), ), ), {, markPrototypePropertyCandidate, (, key, ,, input, ), ;, }, }, }, break, ;, }]
[;, }, }, }, break, ;, }, }, private, void, markPrototypePropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes]
[,, input, ), ;, }, }, }, break, ;, }, }, private, void, markPrototypePropertyCandidate, (, Node, n, ,, CompilerInput, input]
[), ;, }, }, }, break, ;, }, }, private, void, markPrototypePropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {]
[;, getProperty, (, n, ., getString, (, ), ), ., prototypeCount, ++, ;, }, private, void, markObjLitPropertyCandidate, (, Node, n]
[., add, (, n, ), ;, getProperty, (, n, ., getString, (, ), ), ., prototypeCount, ++, ;, }, private]
[), ;, getProperty, (, n, ., getString, (, ), ), ., prototypeCount, ++, ;, }, private, void, markObjLitPropertyCandidate, (, Node]
[;, }, private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;]
[++, ;, }, private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, )]
[., prototypeCount, ++, ;, }, private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (]
[), ., prototypeCount, ++, ;, }, private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add]
[., getString, (, ), ), ., prototypeCount, ++, ;, }, private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, )]
[;, getProperty, (, n, ., getString, (, ), ), ., objLitCount, ++, ;, }, private, void, markPropertyAccessCandidate, (, Node, n]
[., add, (, n, ), ;, getProperty, (, n, ., getString, (, ), ), ., objLitCount, ++, ;, }, private]
[), ;, getProperty, (, n, ., getString, (, ), ), ., objLitCount, ++, ;, }, private, void, markPropertyAccessCandidate, (, Node]
[;, }, private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;]
[++, ;, }, private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, )]
[., objLitCount, ++, ;, }, private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (]
[), ., objLitCount, ++, ;, }, private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add]
[., getString, (, ), ), ., objLitCount, ++, ;, }, private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, )]
[;, getProperty, (, n, ., getString, (, ), ), ., refCount, ++, ;, }, private, Property, getProperty, (, String, name]
[., add, (, n, ), ;, getProperty, (, n, ., getString, (, ), ), ., refCount, ++, ;, }, private]
[), ;, getProperty, (, n, ., getString, (, ), ), ., refCount, ++, ;, }, private, Property, getProperty, (, String]
[;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =, properties, ., get, (, name, ), ;]
[++, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =, properties, ., get, (, name, )]
[., refCount, ++, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =, properties, ., get, (]
[), ., refCount, ++, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =, properties, ., get]
[., getString, (, ), ), ., refCount, ++, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop]
[;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, properties, ., put, (]
[., get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, )]
[), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, properties, ., put]
[), {, prop, =, new, Property, (, name, ), ;, properties, ., put, (, name, ,, prop, ), ;, }]
[==, null, ), {, prop, =, new, Property, (, name, ), ;, properties, ., put, (, name, ,, prop, )]
[), {, prop, =, new, Property, (, name, ), ;, properties, ., put, (, name, ,, prop, ), ;, }]
[=, new, Property, (, name, ), ;, properties, ., put, (, name, ,, prop, ), ;, }, return, prop, ;]
[;, properties, ., put, (, name, ,, prop, ), ;, }, return, prop, ;, }, }, VariableMap, getPropertyMap, (, )]
[), ;, properties, ., put, (, name, ,, prop, ), ;, }, return, prop, ;, }, }, VariableMap, getPropertyMap, (]
[;, }, return, prop, ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >]
[., put, (, name, ,, prop, ), ;, }, return, prop, ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap]
[,, prop, ), ;, }, return, prop, ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String]
[), ;, }, return, prop, ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String]
[;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =, ImmutableMap, .]
[;, for, (, Property, p, :, properties, ., values, (, ), ), {, if, (, p, ., newName, !=, null]
[., builder, (, ), ;, for, (, Property, p, :, properties, ., values, (, ), ), {, if, (, p]
[), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (, p, ., oldName, ,, p]
[., values, (, ), ), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (, p]
[), {, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap]
[!=, null, ), {, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return]
[., newName, !=, null, ), {, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }]
[), {, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap]
[;, }, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, }]
[., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap, (, map, .]
[,, p, ., newName, ), ;, }, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }]
[., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap, (, map, ., build, (, ), )]
[), ;, }, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, }]
[., newName, ), ;, }, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, }]
[;, }, }]
[), ;, }, }]
[., build, (, ), ), ;, }, }]
