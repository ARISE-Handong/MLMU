[;, }, public, static, double, calculateMean, (, Number, [, ], values, ,, boolean, includeNullAndNaN, ), {, if, (, values, ==]
[,, true, ), ;, }, public, static, double, calculateMean, (, Number, [, ], values, ,, boolean, includeNullAndNaN, ), {, if]
[), ;, }, public, static, double, calculateMean, (, Number, [, ], values, ,, boolean, includeNullAndNaN, ), {, if, (, values]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, sum, =, 0.0, ;, double, current, ;, int, counter]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, sum, =, 0.0, ;, double, current, ;]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, sum, =, 0.0, ;, double, current, ;, int, counter]
[;, }, double, sum, =, 0.0, ;, double, current, ;, int, counter, =, 0, ;, for, (, int, i, =]
[), ;, }, double, sum, =, 0.0, ;, double, current, ;, int, counter, =, 0, ;, for, (, int, i]
[;, double, current, ;, int, counter, =, 0, ;, for, (, int, i, =, 0, ;, i, <, values, .]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[;, i, <, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], !=, null, )]
[;, i, ++, ), {, if, (, values, [, i, ], !=, null, ), {, current, =, values, [, i]
[<, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], !=, null, ), {, current]
[;, i, ++, ), {, if, (, values, [, i, ], !=, null, ), {, current, =, values, [, i]
[., length, ;, i, ++, ), {, if, (, values, [, i, ], !=, null, ), {, current, =, values]
[), {, if, (, values, [, i, ], !=, null, ), {, current, =, values, [, i, ], ., doubleValue]
[++, ), {, if, (, values, [, i, ], !=, null, ), {, current, =, values, [, i, ], .]
[), {, current, =, values, [, i, ], ., doubleValue, (, ), ;, }, else, {, current, =, Double, .]
[!=, null, ), {, current, =, values, [, i, ], ., doubleValue, (, ), ;, }, else, {, current, =]
[[, i, ], !=, null, ), {, current, =, values, [, i, ], ., doubleValue, (, ), ;, }, else]
[], !=, null, ), {, current, =, values, [, i, ], ., doubleValue, (, ), ;, }, else, {, current]
[), {, current, =, values, [, i, ], ., doubleValue, (, ), ;, }, else, {, current, =, Double, .]
[=, values, [, i, ], ., doubleValue, (, ), ;, }, else, {, current, =, Double, ., NaN, ;, }]
[;, }, else, {, current, =, Double, ., NaN, ;, }, if, (, includeNullAndNaN, ||, !, Double, ., isNaN, (]
[., doubleValue, (, ), ;, }, else, {, current, =, Double, ., NaN, ;, }, if, (, includeNullAndNaN, ||, !]
[[, i, ], ., doubleValue, (, ), ;, }, else, {, current, =, Double, ., NaN, ;, }, if, (]
[], ., doubleValue, (, ), ;, }, else, {, current, =, Double, ., NaN, ;, }, if, (, includeNullAndNaN, ||]
[=, Double, ., NaN, ;, }, if, (, includeNullAndNaN, ||, !, Double, ., isNaN, (, current, ), ), {, sum]
[;, }, if, (, includeNullAndNaN, ||, !, Double, ., isNaN, (, current, ), ), {, sum, =, sum, +, current]
[., NaN, ;, }, if, (, includeNullAndNaN, ||, !, Double, ., isNaN, (, current, ), ), {, sum, =, sum]
[), {, sum, =, sum, +, current, ;, counter, ++, ;, }, }, double, result, =, (, sum, /, counter]
[||, !, Double, ., isNaN, (, current, ), ), {, sum, =, sum, +, current, ;, counter, ++, ;, }]
[), {, sum, =, sum, +, current, ;, counter, ++, ;, }, }, double, result, =, (, sum, /, counter]
[), {, sum, =, sum, +, current, ;, counter, ++, ;, }, }, double, result, =, (, sum, /, counter]
[., isNaN, (, current, ), ), {, sum, =, sum, +, current, ;, counter, ++, ;, }, }, double, result]
[), ), {, sum, =, sum, +, current, ;, counter, ++, ;, }, }, double, result, =, (, sum, /]
[=, sum, +, current, ;, counter, ++, ;, }, }, double, result, =, (, sum, /, counter, ), ;, return]
[;, counter, ++, ;, }, }, double, result, =, (, sum, /, counter, ), ;, return, result, ;, }, public]
[+, current, ;, counter, ++, ;, }, }, double, result, =, (, sum, /, counter, ), ;, return, result, ;]
[;, counter, ++, ;, }, }, double, result, =, (, sum, /, counter, ), ;, return, result, ;, }, public]
[;, }, }, double, result, =, (, sum, /, counter, ), ;, return, result, ;, }, public, static, double, calculateMean]
[++, ;, }, }, double, result, =, (, sum, /, counter, ), ;, return, result, ;, }, public, static, double]
[;, return, result, ;, }, public, static, double, calculateMean, (, Collection, values, ), {, return, calculateMean, (, values, ,, true]
[), ;, return, result, ;, }, public, static, double, calculateMean, (, Collection, values, ), {, return, calculateMean, (, values, ,]
[/, counter, ), ;, return, result, ;, }, public, static, double, calculateMean, (, Collection, values, ), {, return, calculateMean, (]
[), ;, return, result, ;, }, public, static, double, calculateMean, (, Collection, values, ), {, return, calculateMean, (, values, ,]
[;, }, public, static, double, calculateMean, (, Collection, values, ), {, return, calculateMean, (, values, ,, true, ), ;, }]
[;, }, public, static, double, calculateMean, (, Collection, values, ,, boolean, includeNullAndNaN, ), {, if, (, values, ==, null, )]
[,, true, ), ;, }, public, static, double, calculateMean, (, Collection, values, ,, boolean, includeNullAndNaN, ), {, if, (, values]
[), ;, }, public, static, double, calculateMean, (, Collection, values, ,, boolean, includeNullAndNaN, ), {, if, (, values, ==, null]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, int, count, =, 0, ;, double, total, =, 0.0, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, int, count, =, 0, ;, double, total, =]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, int, count, =, 0, ;, double, total, =, 0.0, ;]
[;, }, int, count, =, 0, ;, double, total, =, 0.0, ;, Iterator, iterator, =, values, ., iterator, (, )]
[), ;, }, int, count, =, 0, ;, double, total, =, 0.0, ;, Iterator, iterator, =, values, ., iterator, (]
[;, double, total, =, 0.0, ;, Iterator, iterator, =, values, ., iterator, (, ), ;, while, (, iterator, ., hasNext]
[;, Iterator, iterator, =, values, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Object]
[;, while, (, iterator, ., hasNext, (, ), ), {, Object, object, =, iterator, ., next, (, ), ;, if]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Object, object, =, iterator, ., next]
[), {, Object, object, =, iterator, ., next, (, ), ;, if, (, object, ==, null, ), {, if, (]
[., hasNext, (, ), ), {, Object, object, =, iterator, ., next, (, ), ;, if, (, object, ==, null]
[;, if, (, object, ==, null, ), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }]
[., next, (, ), ;, if, (, object, ==, null, ), {, if, (, includeNullAndNaN, ), {, return, Double, .]
[), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {, if, (, object, instanceof]
[==, null, ), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {, if, (]
[), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {, if, (, object, instanceof]
[), {, return, Double, ., NaN, ;, }, }, else, {, if, (, object, instanceof, Number, ), {, Number, number]
[;, }, }, else, {, if, (, object, instanceof, Number, ), {, Number, number, =, (, Number, ), object, ;]
[., NaN, ;, }, }, else, {, if, (, object, instanceof, Number, ), {, Number, number, =, (, Number, )]
[), {, Number, number, =, (, Number, ), object, ;, double, value, =, number, ., doubleValue, (, ), ;, if]
[instanceof, Number, ), {, Number, number, =, (, Number, ), object, ;, double, value, =, number, ., doubleValue, (, )]
[;, double, value, =, number, ., doubleValue, (, ), ;, if, (, Double, ., isNaN, (, value, ), ), {]
[;, double, value, =, number, ., doubleValue, (, ), ;, if, (, Double, ., isNaN, (, value, ), ), {]
[;, if, (, Double, ., isNaN, (, value, ), ), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN]
[., doubleValue, (, ), ;, if, (, Double, ., isNaN, (, value, ), ), {, if, (, includeNullAndNaN, ), {]
[), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {, total, =, total, +]
[., isNaN, (, value, ), ), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else]
[), ), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {, total, =, total]
[), {, return, Double, ., NaN, ;, }, }, else, {, total, =, total, +, number, ., doubleValue, (, )]
[;, }, }, else, {, total, =, total, +, number, ., doubleValue, (, ), ;, count, =, count, +, 1]
[., NaN, ;, }, }, else, {, total, =, total, +, number, ., doubleValue, (, ), ;, count, =, count]
[=, total, +, number, ., doubleValue, (, ), ;, count, =, count, +, 1, ;, }, }, }, }, return]
[;, count, =, count, +, 1, ;, }, }, }, }, return, total, /, count, ;, }, public, static, double]
[+, number, ., doubleValue, (, ), ;, count, =, count, +, 1, ;, }, }, }, }, return, total, /]
[;, count, =, count, +, 1, ;, }, }, }, }, return, total, /, count, ;, }, public, static, double]
[., doubleValue, (, ), ;, count, =, count, +, 1, ;, }, }, }, }, return, total, /, count, ;]
[=, count, +, 1, ;, }, }, }, }, return, total, /, count, ;, }, public, static, double, calculateMedian, (]
[;, }, }, }, }, return, total, /, count, ;, }, public, static, double, calculateMedian, (, List, values, ), {]
[+, 1, ;, }, }, }, }, return, total, /, count, ;, }, public, static, double, calculateMedian, (, List, values]
[;, }, }, }, }, return, total, /, count, ;, }, public, static, double, calculateMedian, (, List, values, ), {]
[;, }, public, static, double, calculateMedian, (, List, values, ), {, return, calculateMedian, (, values, ,, true, ), ;, }]
[/, count, ;, }, public, static, double, calculateMedian, (, List, values, ), {, return, calculateMedian, (, values, ,, true, )]
[;, }, public, static, double, calculateMedian, (, List, values, ), {, return, calculateMedian, (, values, ,, true, ), ;, }]
[;, }, public, static, double, calculateMedian, (, List, values, ,, boolean, copyAndSort, ), {, double, result, =, Double, ., NaN]
[,, true, ), ;, }, public, static, double, calculateMedian, (, List, values, ,, boolean, copyAndSort, ), {, double, result, =]
[), ;, }, public, static, double, calculateMedian, (, List, values, ,, boolean, copyAndSort, ), {, double, result, =, Double, .]
[;, if, (, values, !=, null, ), {, if, (, copyAndSort, ), {, int, itemCount, =, values, ., size, (]
[., NaN, ;, if, (, values, !=, null, ), {, if, (, copyAndSort, ), {, int, itemCount, =, values, .]
[), {, if, (, copyAndSort, ), {, int, itemCount, =, values, ., size, (, ), ;, List, copy, =, new]
[!=, null, ), {, if, (, copyAndSort, ), {, int, itemCount, =, values, ., size, (, ), ;, List, copy]
[), {, if, (, copyAndSort, ), {, int, itemCount, =, values, ., size, (, ), ;, List, copy, =, new]
[), {, int, itemCount, =, values, ., size, (, ), ;, List, copy, =, new, ArrayList, (, itemCount, ), ;]
[;, List, copy, =, new, ArrayList, (, itemCount, ), ;, for, (, int, i, =, 0, ;, i, <, itemCount]
[., size, (, ), ;, List, copy, =, new, ArrayList, (, itemCount, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, copy, ., add, (]
[), ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, copy, ., add]
[;, i, <, itemCount, ;, i, ++, ), {, copy, ., add, (, i, ,, values, ., get, (, i]
[;, i, ++, ), {, copy, ., add, (, i, ,, values, ., get, (, i, ), ), ;, }]
[<, itemCount, ;, i, ++, ), {, copy, ., add, (, i, ,, values, ., get, (, i, ), )]
[;, i, ++, ), {, copy, ., add, (, i, ,, values, ., get, (, i, ), ), ;, }]
[), {, copy, ., add, (, i, ,, values, ., get, (, i, ), ), ;, }, Collections, ., sort]
[++, ), {, copy, ., add, (, i, ,, values, ., get, (, i, ), ), ;, }, Collections, .]
[;, }, Collections, ., sort, (, copy, ), ;, values, =, copy, ;, }, int, count, =, values, ., size]
[., add, (, i, ,, values, ., get, (, i, ), ), ;, }, Collections, ., sort, (, copy, )]
[,, values, ., get, (, i, ), ), ;, }, Collections, ., sort, (, copy, ), ;, values, =, copy]
[), ;, }, Collections, ., sort, (, copy, ), ;, values, =, copy, ;, }, int, count, =, values, .]
[., get, (, i, ), ), ;, }, Collections, ., sort, (, copy, ), ;, values, =, copy, ;, }]
[), ), ;, }, Collections, ., sort, (, copy, ), ;, values, =, copy, ;, }, int, count, =, values]
[;, values, =, copy, ;, }, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0]
[., sort, (, copy, ), ;, values, =, copy, ;, }, int, count, =, values, ., size, (, ), ;]
[), ;, values, =, copy, ;, }, int, count, =, values, ., size, (, ), ;, if, (, count, >]
[=, copy, ;, }, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {]
[;, }, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (]
[;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count]
[., size, (, ), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, )]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value]
[>, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value]
[), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, (]
[==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get]
[%, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values]
[==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get]
[), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, (]
[), {, Number, value, =, (, Number, ), values, ., get, (, (, count, -, 1, ), /, 2, )]
[>, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, (, count, -, 1, ), /]
[), {, Number, value, =, (, Number, ), values, ., get, (, (, count, -, 1, ), /, 2, )]
[;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, .]
[;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, .]
[., get, (, (, count, -, 1, ), /, 2, ), ;, result, =, value, ., doubleValue, (, ), ;]
[), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values]
[/, 2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number]
[), /, 2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (]
[-, 1, ), /, 2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value]
[), /, 2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (]
[), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values]
[=, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (]
[;, }, else, {, Number, value, =, (, Number, ), values, ., get, (, 0, ), ;, result, =, value]
[., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (, 0, )]
[;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values]
[;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values]
[., get, (, 0, ), ;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1]
[), ;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, )]
[=, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get]
[;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (, count, /, 2, -, 1]
[., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (, count]
[;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;, result, =, (, value1]
[;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;, result, =, (, value1]
[., get, (, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (]
[), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;, result, =, (]
[-, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;, result]
[/, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, )]
[-, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;, result]
[), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;, result, =, (]
[;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;, }]
[;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;, }]
[., get, (, count, /, 2, ), ;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue]
[), ;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;]
[/, 2, ), ;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /]
[), ;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;]
[=, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;, }, }, }]
[;, }, }, }, return, result, ;, }, public, static, double, calculateMedian, (, List, values, ,, int, start, ,, int]
[/, 2.0, ;, }, }, }, return, result, ;, }, public, static, double, calculateMedian, (, List, values, ,, int, start]
[), /, 2.0, ;, }, }, }, return, result, ;, }, public, static, double, calculateMedian, (, List, values, ,, int]
[+, value2, ., doubleValue, (, ), ), /, 2.0, ;, }, }, }, return, result, ;, }, public, static, double]
[., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;, }, }, }, return, result, ;]
[), /, 2.0, ;, }, }, }, return, result, ;, }, public, static, double, calculateMedian, (, List, values, ,, int]
[., doubleValue, (, ), ), /, 2.0, ;, }, }, }, return, result, ;, }, public, static, double, calculateMedian, (]
[;, }, }, }, return, result, ;, }, public, static, double, calculateMedian, (, List, values, ,, int, start, ,, int]
[;, }, public, static, double, calculateMedian, (, List, values, ,, int, start, ,, int, end, ), {, return, calculateMedian, (]
[;, }, public, static, double, calculateMedian, (, List, values, ,, int, start, ,, int, end, ,, boolean, copyAndSort, ), {]
[,, start, ,, end, ,, true, ), ;, }, public, static, double, calculateMedian, (, List, values, ,, int, start, ,]
[,, end, ,, true, ), ;, }, public, static, double, calculateMedian, (, List, values, ,, int, start, ,, int, end]
[,, true, ), ;, }, public, static, double, calculateMedian, (, List, values, ,, int, start, ,, int, end, ,, boolean]
[), ;, }, public, static, double, calculateMedian, (, List, values, ,, int, start, ,, int, end, ,, boolean, copyAndSort, )]
[;, if, (, copyAndSort, ), {, List, working, =, new, ArrayList, (, end, -, start, +, 1, ), ;, for]
[., NaN, ;, if, (, copyAndSort, ), {, List, working, =, new, ArrayList, (, end, -, start, +, 1, )]
[), {, List, working, =, new, ArrayList, (, end, -, start, +, 1, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, working, ., add, (]
[), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, working, ., add]
[+, 1, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, working]
[-, start, +, 1, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, )]
[+, 1, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, working]
[), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, working, ., add]
[;, i, <=, end, ;, i, ++, ), {, working, ., add, (, values, ., get, (, i, ), )]
[;, i, ++, ), {, working, ., add, (, values, ., get, (, i, ), ), ;, }, Collections, .]
[<=, end, ;, i, ++, ), {, working, ., add, (, values, ., get, (, i, ), ), ;, }]
[;, i, ++, ), {, working, ., add, (, values, ., get, (, i, ), ), ;, }, Collections, .]
[), {, working, ., add, (, values, ., get, (, i, ), ), ;, }, Collections, ., sort, (, working]
[++, ), {, working, ., add, (, values, ., get, (, i, ), ), ;, }, Collections, ., sort, (]
[;, }, Collections, ., sort, (, working, ), ;, result, =, calculateMedian, (, working, ,, false, ), ;, }, else]
[., add, (, values, ., get, (, i, ), ), ;, }, Collections, ., sort, (, working, ), ;, result]
[), ;, }, Collections, ., sort, (, working, ), ;, result, =, calculateMedian, (, working, ,, false, ), ;, }]
[., get, (, i, ), ), ;, }, Collections, ., sort, (, working, ), ;, result, =, calculateMedian, (, working]
[), ), ;, }, Collections, ., sort, (, working, ), ;, result, =, calculateMedian, (, working, ,, false, ), ;]
[;, result, =, calculateMedian, (, working, ,, false, ), ;, }, else, {, int, count, =, end, -, start, +]
[., sort, (, working, ), ;, result, =, calculateMedian, (, working, ,, false, ), ;, }, else, {, int, count]
[), ;, result, =, calculateMedian, (, working, ,, false, ), ;, }, else, {, int, count, =, end, -, start]
[=, calculateMedian, (, working, ,, false, ), ;, }, else, {, int, count, =, end, -, start, +, 1, ;]
[;, }, else, {, int, count, =, end, -, start, +, 1, ;, if, (, count, >, 0, ), {]
[,, false, ), ;, }, else, {, int, count, =, end, -, start, +, 1, ;, if, (, count, >]
[), ;, }, else, {, int, count, =, end, -, start, +, 1, ;, if, (, count, >, 0, )]
[;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count]
[+, 1, ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if]
[-, start, +, 1, ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, )]
[+, 1, ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if]
[;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value]
[>, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value]
[), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, start]
[==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get]
[%, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values]
[==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get]
[), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, start]
[), {, Number, value, =, (, Number, ), values, ., get, (, start, +, (, count, -, 1, ), /]
[>, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, start, +, (, count, -, 1]
[), {, Number, value, =, (, Number, ), values, ., get, (, start, +, (, count, -, 1, ), /]
[;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, .]
[;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, .]
[., get, (, start, +, (, count, -, 1, ), /, 2, ), ;, result, =, value, ., doubleValue, (]
[), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values]
[+, (, count, -, 1, ), /, 2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else]
[), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values]
[/, 2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number]
[), /, 2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (]
[-, 1, ), /, 2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value]
[), /, 2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (]
[), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values]
[=, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (]
[;, }, else, {, Number, value, =, (, Number, ), values, ., get, (, start, ), ;, result, =, value]
[., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (, start, )]
[;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values]
[;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values]
[., get, (, start, ), ;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1]
[), ;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, )]
[=, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get]
[;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (, start, +, count, /, 2]
[., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (, start]
[;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, ), ;, result, =]
[;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, ), ;, result, =]
[., get, (, start, +, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, .]
[), ;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, ), ;, result]
[-, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, )]
[+, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, start, +]
[-, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, )]
[/, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /]
[-, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, )]
[), ;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, ), ;, result]
[;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;, }]
[;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;, }]
[., get, (, start, +, count, /, 2, ), ;, result, =, (, value1, ., doubleValue, (, ), +, value2]
[), ;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;]
[+, count, /, 2, ), ;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, )]
[), ;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;]
[/, 2, ), ;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /]
[), ;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;]
[=, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;, }, }, }]
[;, }, }, }, return, result, ;, }, public, static, double, getStdDev, (, Number, [, ], data, ), {, if]
[/, 2.0, ;, }, }, }, return, result, ;, }, public, static, double, getStdDev, (, Number, [, ], data, )]
[), /, 2.0, ;, }, }, }, return, result, ;, }, public, static, double, getStdDev, (, Number, [, ], data]
[+, value2, ., doubleValue, (, ), ), /, 2.0, ;, }, }, }, return, result, ;, }, public, static, double]
[., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;, }, }, }, return, result, ;]
[), /, 2.0, ;, }, }, }, return, result, ;, }, public, static, double, getStdDev, (, Number, [, ], data]
[., doubleValue, (, ), ), /, 2.0, ;, }, }, }, return, result, ;, }, public, static, double, getStdDev, (]
[;, }, }, }, return, result, ;, }, public, static, double, getStdDev, (, Number, [, ], data, ), {, if]
[;, }, public, static, double, getStdDev, (, Number, [, ], data, ), {, if, (, data, ==, null, ), {]
[), {, throw, new, IllegalArgumentException, (, "Null 'data' array.", ), ;, }, if, (, data, ., length, ==, 0, ), {, throw]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data' array.", ), ;, }, if, (, data, ., length, ==, 0, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'data' array.", ), ;, }, if, (, data, ., length, ==, 0, ), {, throw]
[;, }, if, (, data, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Zero length 'data' array.", ), ;, }, double]
[), ;, }, if, (, data, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Zero length 'data' array.", ), ;, }]
[), {, throw, new, IllegalArgumentException, (, "Zero length 'data' array.", ), ;, }, double, avg, =, calculateMean, (, data, ), ;, double, sum]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "Zero length 'data' array.", ), ;, }, double, avg, =, calculateMean, (, data, ), ;]
[., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Zero length 'data' array.", ), ;, }, double, avg, =, calculateMean, (, data]
[), {, throw, new, IllegalArgumentException, (, "Zero length 'data' array.", ), ;, }, double, avg, =, calculateMean, (, data, ), ;, double, sum]
[;, }, double, avg, =, calculateMean, (, data, ), ;, double, sum, =, 0.0, ;, for, (, int, counter, =]
[), ;, }, double, avg, =, calculateMean, (, data, ), ;, double, sum, =, 0.0, ;, for, (, int, counter]
[;, double, sum, =, 0.0, ;, for, (, int, counter, =, 0, ;, counter, <, data, ., length, ;, counter]
[), ;, double, sum, =, 0.0, ;, for, (, int, counter, =, 0, ;, counter, <, data, ., length, ;]
[;, for, (, int, counter, =, 0, ;, counter, <, data, ., length, ;, counter, ++, ), {, double, diff]
[;, counter, <, data, ., length, ;, counter, ++, ), {, double, diff, =, data, [, counter, ], ., doubleValue]
[;, counter, ++, ), {, double, diff, =, data, [, counter, ], ., doubleValue, (, ), -, avg, ;, sum]
[<, data, ., length, ;, counter, ++, ), {, double, diff, =, data, [, counter, ], ., doubleValue, (, )]
[;, counter, ++, ), {, double, diff, =, data, [, counter, ], ., doubleValue, (, ), -, avg, ;, sum]
[., length, ;, counter, ++, ), {, double, diff, =, data, [, counter, ], ., doubleValue, (, ), -, avg]
[), {, double, diff, =, data, [, counter, ], ., doubleValue, (, ), -, avg, ;, sum, =, sum, +]
[++, ), {, double, diff, =, data, [, counter, ], ., doubleValue, (, ), -, avg, ;, sum, =, sum]
[;, sum, =, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt, (, sum, /, (, data, .]
[-, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt, (, sum, /, (]
[., doubleValue, (, ), -, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt]
[[, counter, ], ., doubleValue, (, ), -, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return]
[], ., doubleValue, (, ), -, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return, Math, .]
[;, sum, =, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt, (, sum, /, (, data, .]
[=, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt, (, sum, /, (, data, ., length, -]
[;, }, return, Math, ., sqrt, (, sum, /, (, data, ., length, -, 1, ), ), ;, }, public]
[+, diff, *, diff, ;, }, return, Math, ., sqrt, (, sum, /, (, data, ., length, -, 1, )]
[;, }, return, Math, ., sqrt, (, sum, /, (, data, ., length, -, 1, ), ), ;, }, public]
[*, diff, ;, }, return, Math, ., sqrt, (, sum, /, (, data, ., length, -, 1, ), ), ;]
[;, }, return, Math, ., sqrt, (, sum, /, (, data, ., length, -, 1, ), ), ;, }, public]
[;, }, public, static, double, [, ], getLinearFit, (, Number, [, ], xData, ,, Number, [, ], yData, ), {]
[., sqrt, (, sum, /, (, data, ., length, -, 1, ), ), ;, }, public, static, double, [, ]]
[), ;, }, public, static, double, [, ], getLinearFit, (, Number, [, ], xData, ,, Number, [, ], yData, )]
[/, (, data, ., length, -, 1, ), ), ;, }, public, static, double, [, ], getLinearFit, (, Number, []
[), ;, }, public, static, double, [, ], getLinearFit, (, Number, [, ], xData, ,, Number, [, ], yData, )]
[), ), ;, }, public, static, double, [, ], getLinearFit, (, Number, [, ], xData, ,, Number, [, ], yData]
[-, 1, ), ), ;, }, public, static, double, [, ], getLinearFit, (, Number, [, ], xData, ,, Number, []
[., length, -, 1, ), ), ;, }, public, static, double, [, ], getLinearFit, (, Number, [, ], xData, ,]
[), ), ;, }, public, static, double, [, ], getLinearFit, (, Number, [, ], xData, ,, Number, [, ], yData]
[), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException]
[;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData]
[), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=, yData, ., length, )]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=, yData, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=, yData, ., length, )]
[;, }, if, (, xData, ., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", ), ;]
[), ;, }, if, (, xData, ., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", )]
[), {, throw, new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", ), ;, }, double, [, ], result, =, new, double, [, 2, ]]
[!=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", ), ;, }, double, [, ], result, =, new]
[., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", ), ;, }, double, [, ], result]
[), {, throw, new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", ), ;, }, double, [, ], result, =, new, double, [, 2, ]]
[., length, ), {, throw, new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", ), ;, }, double, [, ], result, =, new, double, []
[;, }, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, getSlope, (]
[), ;, }, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, getSlope]
[;, result, [, 1, ], =, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =, calculateMean, (]
[], ;, result, [, 1, ], =, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =, calculateMean]
[=, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =, calculateMean, (, yData, ), -, result, []
[[, 1, ], =, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =, calculateMean, (, yData, )]
[], =, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =, calculateMean, (, yData, ), -, result]
[;, result, [, 0, ], =, calculateMean, (, yData, ), -, result, [, 1, ], *, calculateMean, (, xData, )]
[,, yData, ), ;, result, [, 0, ], =, calculateMean, (, yData, ), -, result, [, 1, ], *, calculateMean]
[), ;, result, [, 0, ], =, calculateMean, (, yData, ), -, result, [, 1, ], *, calculateMean, (, xData]
[=, calculateMean, (, yData, ), -, result, [, 1, ], *, calculateMean, (, xData, ), ;, return, result, ;, }]
[[, 0, ], =, calculateMean, (, yData, ), -, result, [, 1, ], *, calculateMean, (, xData, ), ;, return]
[], =, calculateMean, (, yData, ), -, result, [, 1, ], *, calculateMean, (, xData, ), ;, return, result, ;]
[;, return, result, ;, }, public, static, double, getSlope, (, Number, [, ], xData, ,, Number, [, ], yData, )]
[-, result, [, 1, ], *, calculateMean, (, xData, ), ;, return, result, ;, }, public, static, double, getSlope, (]
[), -, result, [, 1, ], *, calculateMean, (, xData, ), ;, return, result, ;, }, public, static, double, getSlope]
[;, return, result, ;, }, public, static, double, getSlope, (, Number, [, ], xData, ,, Number, [, ], yData, )]
[*, calculateMean, (, xData, ), ;, return, result, ;, }, public, static, double, getSlope, (, Number, [, ], xData, ,]
[[, 1, ], *, calculateMean, (, xData, ), ;, return, result, ;, }, public, static, double, getSlope, (, Number, []
[], *, calculateMean, (, xData, ), ;, return, result, ;, }, public, static, double, getSlope, (, Number, [, ], xData]
[;, return, result, ;, }, public, static, double, getSlope, (, Number, [, ], xData, ,, Number, [, ], yData, )]
[), ;, return, result, ;, }, public, static, double, getSlope, (, Number, [, ], xData, ,, Number, [, ], yData]
[;, }, public, static, double, getSlope, (, Number, [, ], xData, ,, Number, [, ], yData, ), {, if, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException]
[;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData]
[), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=, yData, ., length, )]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=, yData, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=, yData, ., length, )]
[;, }, if, (, xData, ., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;]
[), ;, }, if, (, xData, ., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", )]
[), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, double, sx, =, 0.0, ,, sxx, =, 0.0, ,, sxy]
[!=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, double, sx, =, 0.0, ,, sxx]
[., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, double, sx, =, 0.0]
[), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, double, sx, =, 0.0, ,, sxx, =, 0.0, ,, sxy]
[., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, double, sx, =, 0.0, ,, sxx, =, 0.0]
[;, }, double, sx, =, 0.0, ,, sxx, =, 0.0, ,, sxy, =, 0.0, ,, sy, =, 0.0, ;, int]
[), ;, }, double, sx, =, 0.0, ,, sxx, =, 0.0, ,, sxy, =, 0.0, ,, sy, =, 0.0, ;]
[,, sxx, =, 0.0, ,, sxy, =, 0.0, ,, sy, =, 0.0, ;, int, counter, ;, for, (, counter, =]
[,, sxy, =, 0.0, ,, sy, =, 0.0, ;, int, counter, ;, for, (, counter, =, 0, ;, counter, <]
[,, sy, =, 0.0, ;, int, counter, ;, for, (, counter, =, 0, ;, counter, <, xData, ., length, ;]
[;, int, counter, ;, for, (, counter, =, 0, ;, counter, <, xData, ., length, ;, counter, ++, ), {]
[=, 0, ;, counter, <, xData, ., length, ;, counter, ++, ), {, sx, =, sx, +, xData, [, counter]
[;, counter, <, xData, ., length, ;, counter, ++, ), {, sx, =, sx, +, xData, [, counter, ], .]
[;, counter, ++, ), {, sx, =, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =]
[<, xData, ., length, ;, counter, ++, ), {, sx, =, sx, +, xData, [, counter, ], ., doubleValue, (]
[;, counter, ++, ), {, sx, =, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =]
[., length, ;, counter, ++, ), {, sx, =, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;]
[), {, sx, =, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =, sxx, +, Math]
[++, ), {, sx, =, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =, sxx, +]
[=, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =, sxx, +, Math, ., pow, (]
[;, sxx, =, sxx, +, Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, )]
[+, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =, sxx, +, Math, ., pow, (, xData, []
[;, sxx, =, sxx, +, Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, )]
[., doubleValue, (, ), ;, sxx, =, sxx, +, Math, ., pow, (, xData, [, counter, ], ., doubleValue, (]
[[, counter, ], ., doubleValue, (, ), ;, sxx, =, sxx, +, Math, ., pow, (, xData, [, counter, ]]
[], ., doubleValue, (, ), ;, sxx, =, sxx, +, Math, ., pow, (, xData, [, counter, ], ., doubleValue]
[=, sxx, +, Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, ), ;, sxy]
[;, sxy, =, sxy, +, yData, [, counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue]
[+, Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy]
[;, sxy, =, sxy, +, yData, [, counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue]
[., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +, yData]
[,, 2, ), ;, sxy, =, sxy, +, yData, [, counter, ], ., doubleValue, (, ), *, xData, [, counter]
[., doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +, yData, [, counter, ], ., doubleValue, (, )]
[[, counter, ], ., doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +, yData, [, counter, ], .]
[], ., doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +, yData, [, counter, ], ., doubleValue, (]
[), ;, sxy, =, sxy, +, yData, [, counter, ], ., doubleValue, (, ), *, xData, [, counter, ], .]
[=, sxy, +, yData, [, counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, )]
[;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -, (]
[+, yData, [, counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, ), ;, sy]
[;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -, (]
[*, xData, [, counter, ], ., doubleValue, (, ), ;, sy, =, sy, +, yData, [, counter, ], ., doubleValue]
[., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, ), ;, sy, =, sy, +, yData, []
[[, counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, ), ;, sy, =, sy]
[], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, ), ;, sy, =, sy, +, yData]
[;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -, (]
[., doubleValue, (, ), ;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return]
[[, counter, ], ., doubleValue, (, ), ;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, )]
[], ., doubleValue, (, ), ;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }]
[=, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -, (, sx, *]
[;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /, (, sxx, -, (, sx]
[+, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -, (, sx, *, sy, )]
[;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /, (, sxx, -, (, sx]
[., doubleValue, (, ), ;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /, (]
[[, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter]
[], ., doubleValue, (, ), ;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /]
[;, }, public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, [, ], data2, ), {, if, (]
[/, (, sxx, -, (, sx, *, sx, ), /, counter, ), ;, }, public, static, double, getCorrelation, (, Number]
[), /, (, sxx, -, (, sx, *, sx, ), /, counter, ), ;, }, public, static, double, getCorrelation, (]
[-, (, sx, *, sy, ), /, counter, ), /, (, sxx, -, (, sx, *, sx, ), /, counter]
[), /, (, sxx, -, (, sx, *, sx, ), /, counter, ), ;, }, public, static, double, getCorrelation, (]
[/, counter, ), /, (, sxx, -, (, sx, *, sx, ), /, counter, ), ;, }, public, static, double]
[), /, counter, ), /, (, sxx, -, (, sx, *, sx, ), /, counter, ), ;, }, public, static]
[*, sy, ), /, counter, ), /, (, sxx, -, (, sx, *, sx, ), /, counter, ), ;, }]
[), /, counter, ), /, (, sxx, -, (, sx, *, sx, ), /, counter, ), ;, }, public, static]
[), /, (, sxx, -, (, sx, *, sx, ), /, counter, ), ;, }, public, static, double, getCorrelation, (]
[;, }, public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, [, ], data2, ), {, if, (]
[), ;, }, public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, [, ], data2, ), {, if]
[-, (, sx, *, sx, ), /, counter, ), ;, }, public, static, double, getCorrelation, (, Number, [, ], data1]
[), ;, }, public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, [, ], data2, ), {, if]
[/, counter, ), ;, }, public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, [, ], data2, )]
[), /, counter, ), ;, }, public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, [, ], data2]
[*, sx, ), /, counter, ), ;, }, public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, []
[), /, counter, ), ;, }, public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, [, ], data2]
[), ;, }, public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, [, ], data2, ), {, if]
[), {, throw, new, IllegalArgumentException, (, "Null 'data1' argument.", ), ;, }, if, (, data2, ==, null, ), {, throw, new, IllegalArgumentException]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data1' argument.", ), ;, }, if, (, data2, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'data1' argument.", ), ;, }, if, (, data2, ==, null, ), {, throw, new, IllegalArgumentException]
[;, }, if, (, data2, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data2' argument.", ), ;, }, if, (, data1]
[), ;, }, if, (, data2, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data2' argument.", ), ;, }, if, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'data2' argument.", ), ;, }, if, (, data1, ., length, !=, data2, ., length, )]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data2' argument.", ), ;, }, if, (, data1, ., length, !=, data2, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'data2' argument.", ), ;, }, if, (, data1, ., length, !=, data2, ., length, )]
[;, }, if, (, data1, ., length, !=, data2, ., length, ), {, throw, new, IllegalArgumentException, (, "'data1' and 'data2' arrays must have same length.", ), ;]
[), ;, }, if, (, data1, ., length, !=, data2, ., length, ), {, throw, new, IllegalArgumentException, (, "'data1' and 'data2' arrays must have same length.", )]
[), {, throw, new, IllegalArgumentException, (, "'data1' and 'data2' arrays must have same length.", ), ;, }, int, n, =, data1, ., length, ;, double, sumX, =]
[!=, data2, ., length, ), {, throw, new, IllegalArgumentException, (, "'data1' and 'data2' arrays must have same length.", ), ;, }, int, n, =, data1, ., length]
[., length, !=, data2, ., length, ), {, throw, new, IllegalArgumentException, (, "'data1' and 'data2' arrays must have same length.", ), ;, }, int, n, =, data1]
[), {, throw, new, IllegalArgumentException, (, "'data1' and 'data2' arrays must have same length.", ), ;, }, int, n, =, data1, ., length, ;, double, sumX, =]
[., length, ), {, throw, new, IllegalArgumentException, (, "'data1' and 'data2' arrays must have same length.", ), ;, }, int, n, =, data1, ., length, ;, double]
[;, }, int, n, =, data1, ., length, ;, double, sumX, =, 0.0, ;, double, sumY, =, 0.0, ;, double]
[), ;, }, int, n, =, data1, ., length, ;, double, sumX, =, 0.0, ;, double, sumY, =, 0.0, ;]
[;, double, sumX, =, 0.0, ;, double, sumY, =, 0.0, ;, double, sumX2, =, 0.0, ;, double, sumY2, =, 0.0]
[., length, ;, double, sumX, =, 0.0, ;, double, sumY, =, 0.0, ;, double, sumX2, =, 0.0, ;, double, sumY2]
[;, double, sumY, =, 0.0, ;, double, sumX2, =, 0.0, ;, double, sumY2, =, 0.0, ;, double, sumXY, =, 0.0]
[;, double, sumX2, =, 0.0, ;, double, sumY2, =, 0.0, ;, double, sumXY, =, 0.0, ;, for, (, int, i]
[;, double, sumY2, =, 0.0, ;, double, sumXY, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <]
[;, double, sumXY, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, 0.0]
[;, i, <, n, ;, i, ++, ), {, double, x, =, 0.0, ;, if, (, data1, [, i, ]]
[;, i, ++, ), {, double, x, =, 0.0, ;, if, (, data1, [, i, ], !=, null, ), {]
[<, n, ;, i, ++, ), {, double, x, =, 0.0, ;, if, (, data1, [, i, ], !=, null]
[;, i, ++, ), {, double, x, =, 0.0, ;, if, (, data1, [, i, ], !=, null, ), {]
[), {, double, x, =, 0.0, ;, if, (, data1, [, i, ], !=, null, ), {, x, =, data1]
[++, ), {, double, x, =, 0.0, ;, if, (, data1, [, i, ], !=, null, ), {, x, =]
[;, if, (, data1, [, i, ], !=, null, ), {, x, =, data1, [, i, ], ., doubleValue, (]
[), {, x, =, data1, [, i, ], ., doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if]
[!=, null, ), {, x, =, data1, [, i, ], ., doubleValue, (, ), ;, }, double, y, =, 0.0]
[[, i, ], !=, null, ), {, x, =, data1, [, i, ], ., doubleValue, (, ), ;, }, double]
[], !=, null, ), {, x, =, data1, [, i, ], ., doubleValue, (, ), ;, }, double, y, =]
[), {, x, =, data1, [, i, ], ., doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if]
[=, data1, [, i, ], ., doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if, (, data2, []
[;, }, double, y, =, 0.0, ;, if, (, data2, [, i, ], !=, null, ), {, y, =, data2]
[., doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if, (, data2, [, i, ], !=, null, )]
[[, i, ], ., doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if, (, data2, [, i, ]]
[], ., doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if, (, data2, [, i, ], !=, null]
[;, if, (, data2, [, i, ], !=, null, ), {, y, =, data2, [, i, ], ., doubleValue, (]
[), {, y, =, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;]
[!=, null, ), {, y, =, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX, +]
[[, i, ], !=, null, ), {, y, =, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX]
[], !=, null, ), {, y, =, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX]
[), {, y, =, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;]
[=, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY]
[;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (, x]
[., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY, +, y, ;, sumXY, =]
[[, i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY, +, y]
[], ., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY, +, y, ;, sumXY]
[=, sumX, +, x, ;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *, y, )]
[;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2]
[+, x, ;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2]
[;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2]
[=, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +, (]
[;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *, x, )]
[+, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *]
[;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *, x, )]
[=, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2]
[;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y, )]
[+, (, x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2]
[;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y, )]
[), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y]
[*, y, ), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y]
[), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y]
[=, sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }]
[;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (, n, *, sumXY, -, sumX, *]
[+, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (]
[;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (, n, *, sumXY, -, sumX, *]
[), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (, n, *, sumXY, -, sumX]
[*, x, ), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (, n, *, sumXY]
[), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (, n, *, sumXY, -, sumX]
[=, sumY2, +, (, y, *, y, ), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, )]
[;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (, n, *]
[+, (, y, *, y, ), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math]
[;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (, n, *]
[), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (, n]
[*, y, ), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (]
[), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (, n]
[;, }, public, static, double, [, ], [, ], getMovingAverage, (, Number, [, ], xData, ,, Number, [, ], yData]
[/, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2, -]
[), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2]
[-, sumX, *, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *]
[*, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX]
[-, sumX, *, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *]
[), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2]
[*, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n]
[), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2]
[;, }, public, static, double, [, ], [, ], getMovingAverage, (, Number, [, ], xData, ,, Number, [, ], yData]
[., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2, -, sumY, *]
[,, 0.5, ), ;, }, public, static, double, [, ], [, ], getMovingAverage, (, Number, [, ], xData, ,, Number]
[*, (, n, *, sumY2, -, sumY, *, sumY, ), ,, 0.5, ), ;, }, public, static, double, [, ]]
[), *, (, n, *, sumY2, -, sumY, *, sumY, ), ,, 0.5, ), ;, }, public, static, double, []
[-, sumX, *, sumX, ), *, (, n, *, sumY2, -, sumY, *, sumY, ), ,, 0.5, ), ;, }]
[*, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2, -, sumY, *, sumY, ), ,, 0.5, )]
[-, sumX, *, sumX, ), *, (, n, *, sumY2, -, sumY, *, sumY, ), ,, 0.5, ), ;, }]
[), *, (, n, *, sumY2, -, sumY, *, sumY, ), ,, 0.5, ), ;, }, public, static, double, []
[*, sumX, ), *, (, n, *, sumY2, -, sumY, *, sumY, ), ,, 0.5, ), ;, }, public, static]
[), *, (, n, *, sumY2, -, sumY, *, sumY, ), ,, 0.5, ), ;, }, public, static, double, []
[,, 0.5, ), ;, }, public, static, double, [, ], [, ], getMovingAverage, (, Number, [, ], xData, ,, Number]
[), ,, 0.5, ), ;, }, public, static, double, [, ], [, ], getMovingAverage, (, Number, [, ], xData, ,]
[-, sumY, *, sumY, ), ,, 0.5, ), ;, }, public, static, double, [, ], [, ], getMovingAverage, (, Number]
[*, sumY2, -, sumY, *, sumY, ), ,, 0.5, ), ;, }, public, static, double, [, ], [, ], getMovingAverage]
[-, sumY, *, sumY, ), ,, 0.5, ), ;, }, public, static, double, [, ], [, ], getMovingAverage, (, Number]
[), ,, 0.5, ), ;, }, public, static, double, [, ], [, ], getMovingAverage, (, Number, [, ], xData, ,]
[*, sumY, ), ,, 0.5, ), ;, }, public, static, double, [, ], [, ], getMovingAverage, (, Number, [, ]]
[), ,, 0.5, ), ;, }, public, static, double, [, ], [, ], getMovingAverage, (, Number, [, ], xData, ,]
[), ;, }, public, static, double, [, ], [, ], getMovingAverage, (, Number, [, ], xData, ,, Number, [, ]]
[), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, if, (, period, >, xData, ., length, ), {, throw]
[!=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, if, (, period, >, xData, .]
[., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, if, (, period, >]
[), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, if, (, period, >, xData, ., length, ), {, throw]
[., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, if, (, period, >, xData, ., length, )]
[;, }, if, (, period, >, xData, ., length, ), {, throw, new, IllegalArgumentException, (, "Period can't be longer than dataset.", ), ;, }, double]
[), ;, }, if, (, period, >, xData, ., length, ), {, throw, new, IllegalArgumentException, (, "Period can't be longer than dataset.", ), ;, }]
[), {, throw, new, IllegalArgumentException, (, "Period can't be longer than dataset.", ), ;, }, double, [, ], [, ], result, =, new, double, []
[>, xData, ., length, ), {, throw, new, IllegalArgumentException, (, "Period can't be longer than dataset.", ), ;, }, double, [, ], [, ], result]
[), {, throw, new, IllegalArgumentException, (, "Period can't be longer than dataset.", ), ;, }, double, [, ], [, ], result, =, new, double, []
[., length, ), {, throw, new, IllegalArgumentException, (, "Period can't be longer than dataset.", ), ;, }, double, [, ], [, ], result, =, new]
[;, }, double, [, ], [, ], result, =, new, double, [, xData, ., length, -, period, ], [, 2]
[), ;, }, double, [, ], [, ], result, =, new, double, [, xData, ., length, -, period, ], []
[;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {, result, []
[], [, 2, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++]
[-, period, ], [, 2, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;]
[., length, -, period, ], [, 2, ], ;, for, (, int, i, =, 0, ;, i, <, result, .]
[], [, 2, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++]
[], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {, result]
[;, i, <, result, ., length, ;, i, ++, ), {, result, [, i, ], [, 0, ], =, xData]
[;, i, ++, ), {, result, [, i, ], [, 0, ], =, xData, [, i, +, period, ], .]
[<, result, ., length, ;, i, ++, ), {, result, [, i, ], [, 0, ], =, xData, [, i]
[;, i, ++, ), {, result, [, i, ], [, 0, ], =, xData, [, i, +, period, ], .]
[., length, ;, i, ++, ), {, result, [, i, ], [, 0, ], =, xData, [, i, +, period]
[), {, result, [, i, ], [, 0, ], =, xData, [, i, +, period, ], ., doubleValue, (, )]
[++, ), {, result, [, i, ], [, 0, ], =, xData, [, i, +, period, ], ., doubleValue, (]
[=, xData, [, i, +, period, ], ., doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int]
[[, 0, ], =, xData, [, i, +, period, ], ., doubleValue, (, ), ;, double, sum, =, 0.0, ;]
[[, i, ], [, 0, ], =, xData, [, i, +, period, ], ., doubleValue, (, ), ;, double, sum]
[], [, 0, ], =, xData, [, i, +, period, ], ., doubleValue, (, ), ;, double, sum, =, 0.0]
[], =, xData, [, i, +, period, ], ., doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (]
[;, double, sum, =, 0.0, ;, for, (, int, j, =, 0, ;, j, <, period, ;, j, ++, )]
[., doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int, j, =, 0, ;, j, <, period]
[[, i, +, period, ], ., doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int, j, =]
[], ., doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int, j, =, 0, ;, j, <]
[+, period, ], ., doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int, j, =, 0, ;]
[], ., doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int, j, =, 0, ;, j, <]
[;, for, (, int, j, =, 0, ;, j, <, period, ;, j, ++, ), {, sum, +=, yData, []
[;, j, <, period, ;, j, ++, ), {, sum, +=, yData, [, i, +, j, ], ., doubleValue, (]
[;, j, ++, ), {, sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum]
[<, period, ;, j, ++, ), {, sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;]
[;, j, ++, ), {, sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum]
[), {, sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum, =, sum, /]
[++, ), {, sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum, =, sum]
[+=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;, result]
[;, }, sum, =, sum, /, period, ;, result, [, i, ], [, 1, ], =, sum, ;, }, return]
[., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;, result, [, i, ], [, 1, ], =]
[[, i, +, j, ], ., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;, result, [, i]
[], ., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;, result, [, i, ], [, 1, ]]
[+, j, ], ., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;, result, [, i, ], []
[], ., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;, result, [, i, ], [, 1, ]]
[=, sum, /, period, ;, result, [, i, ], [, 1, ], =, sum, ;, }, return, result, ;, }]
[;, result, [, i, ], [, 1, ], =, sum, ;, }, return, result, ;, }, }]
[/, period, ;, result, [, i, ], [, 1, ], =, sum, ;, }, return, result, ;, }, }]
[;, result, [, i, ], [, 1, ], =, sum, ;, }, return, result, ;, }, }]
[=, sum, ;, }, return, result, ;, }, }]
[[, 1, ], =, sum, ;, }, return, result, ;, }, }]
[[, i, ], [, 1, ], =, sum, ;, }, return, result, ;, }, }]
[], [, 1, ], =, sum, ;, }, return, result, ;, }, }]
[], =, sum, ;, }, return, result, ;, }, }]
[;, }, return, result, ;, }, }]
[;, }, }]
