[;, if, (, isAliasableType, (, type, ), ), {, visitAliasableNode, (, n, ,, parent, ), ;, }, else, if, (]
[., getType, (, ), ;, if, (, isAliasableType, (, type, ), ), {, visitAliasableNode, (, n, ,, parent, ), ;]
[), {, visitAliasableNode, (, n, ,, parent, ), ;, }, else, if, (, type, ==, Token, ., NAME, ), {]
[), ), {, visitAliasableNode, (, n, ,, parent, ), ;, }, else, if, (, type, ==, Token, ., NAME, )]
[;, }, else, if, (, type, ==, Token, ., NAME, ), {, visitNameNode, (, n, ), ;, }, }, private]
[,, parent, ), ;, }, else, if, (, type, ==, Token, ., NAME, ), {, visitNameNode, (, n, ), ;]
[), ;, }, else, if, (, type, ==, Token, ., NAME, ), {, visitNameNode, (, n, ), ;, }, }]
[), {, visitNameNode, (, n, ), ;, }, }, private, void, visitAliasableNode, (, Node, n, ,, Node, parent, ), {]
[==, Token, ., NAME, ), {, visitNameNode, (, n, ), ;, }, }, private, void, visitAliasableNode, (, Node, n, ,]
[), {, visitNameNode, (, n, ), ;, }, }, private, void, visitAliasableNode, (, Node, n, ,, Node, parent, ), {]
[., NAME, ), {, visitNameNode, (, n, ), ;, }, }, private, void, visitAliasableNode, (, Node, n, ,, Node, parent]
[;, }, }, private, void, visitAliasableNode, (, Node, n, ,, Node, parent, ), {, AliasSpecification, aliasableNodes, =, aliasTypes, ., get]
[), ;, }, }, private, void, visitAliasableNode, (, Node, n, ,, Node, parent, ), {, AliasSpecification, aliasableNodes, =, aliasTypes, .]
[;, aliasableNodes, ., visit, (, n, ,, parent, ), ;, }, private, void, visitNameNode, (, Node, n, ), {, if]
[., get, (, n, ., getType, (, ), ), ;, aliasableNodes, ., visit, (, n, ,, parent, ), ;, }]
[), ;, aliasableNodes, ., visit, (, n, ,, parent, ), ;, }, private, void, visitNameNode, (, Node, n, ), {]
[., getType, (, ), ), ;, aliasableNodes, ., visit, (, n, ,, parent, ), ;, }, private, void, visitNameNode, (]
[;, }, private, void, visitNameNode, (, Node, n, ), {, if, (, isAliasDefinition, (, n, ), ), {, throw, new]
[., visit, (, n, ,, parent, ), ;, }, private, void, visitNameNode, (, Node, n, ), {, if, (, isAliasDefinition]
[,, parent, ), ;, }, private, void, visitNameNode, (, Node, n, ), {, if, (, isAliasDefinition, (, n, ), )]
[), ;, }, private, void, visitNameNode, (, Node, n, ), {, if, (, isAliasDefinition, (, n, ), ), {, throw]
[), {, throw, new, IllegalStateException, (, "Existing alias definition for ", +, Token, ., name, (, n, ., getType, (, ), ), ), ;]
[), ), {, throw, new, IllegalStateException, (, "Existing alias definition for ", +, Token, ., name, (, n, ., getType, (, ), ), )]
[;, }, }, }, private, abstract, static, class, AliasSpecification, {, private, final, Map, <, Node, ,, Node, >, nodes, =]
[), ;, }, }, }, private, abstract, static, class, AliasSpecification, {, private, final, Map, <, Node, ,, Node, >, nodes]
[+, Token, ., name, (, n, ., getType, (, ), ), ), ;, }, }, }, private, abstract, static, class]
[), ;, }, }, }, private, abstract, static, class, AliasSpecification, {, private, final, Map, <, Node, ,, Node, >, nodes]
[., name, (, n, ., getType, (, ), ), ), ;, }, }, }, private, abstract, static, class, AliasSpecification, {]
[), ), ;, }, }, }, private, abstract, static, class, AliasSpecification, {, private, final, Map, <, Node, ,, Node, >]
[., getType, (, ), ), ), ;, }, }, }, private, abstract, static, class, AliasSpecification, {, private, final, Map, <]
[;, private, boolean, isAliased, =, false, ;, private, String, aliasName, ;, private, int, tokenId, ;, public, AliasSpecification, (, String, aliasName]
[., newHashMap, (, ), ;, private, boolean, isAliased, =, false, ;, private, String, aliasName, ;, private, int, tokenId, ;, public]
[;, private, String, aliasName, ;, private, int, tokenId, ;, public, AliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, this]
[=, aliasName, ;, this, ., tokenId, =, tokenId, ;, }, public, void, visit, (, Node, n, ,, Node, parent, )]
[., aliasName, =, aliasName, ;, this, ., tokenId, =, tokenId, ;, }, public, void, visit, (, Node, n, ,, Node]
[;, this, ., tokenId, =, tokenId, ;, }, public, void, visit, (, Node, n, ,, Node, parent, ), {, nodes]
[=, tokenId, ;, }, public, void, visit, (, Node, n, ,, Node, parent, ), {, nodes, ., put, (, n]
[., tokenId, =, tokenId, ;, }, public, void, visit, (, Node, n, ,, Node, parent, ), {, nodes, ., put]
[;, }, public, void, visit, (, Node, n, ,, Node, parent, ), {, nodes, ., put, (, n, ,, parent]
[;, }, boolean, maybeInsertAliasDeclarationIntoParseTree, (, Node, codeRoot, ), {, if, (, nodes, ., size, (, ), >=, minOccurrencesRequiredToAlias, (, )]
[., put, (, n, ,, parent, ), ;, }, boolean, maybeInsertAliasDeclarationIntoParseTree, (, Node, codeRoot, ), {, if, (, nodes, .]
[,, parent, ), ;, }, boolean, maybeInsertAliasDeclarationIntoParseTree, (, Node, codeRoot, ), {, if, (, nodes, ., size, (, ), >=]
[), ;, }, boolean, maybeInsertAliasDeclarationIntoParseTree, (, Node, codeRoot, ), {, if, (, nodes, ., size, (, ), >=, minOccurrencesRequiredToAlias, (]
[), {, insertAliasDeclaration, (, codeRoot, ), ;, isAliased, =, true, ;, return, true, ;, }, return, false, ;, }, public]
[>=, minOccurrencesRequiredToAlias, (, ), ), {, insertAliasDeclaration, (, codeRoot, ), ;, isAliased, =, true, ;, return, true, ;, }, return]
[., size, (, ), >=, minOccurrencesRequiredToAlias, (, ), ), {, insertAliasDeclaration, (, codeRoot, ), ;, isAliased, =, true, ;, return]
[), {, insertAliasDeclaration, (, codeRoot, ), ;, isAliased, =, true, ;, return, true, ;, }, return, false, ;, }, public]
[;, isAliased, =, true, ;, return, true, ;, }, return, false, ;, }, public, void, doAlias, (, AbstractCompiler, compiler, )]
[), ;, isAliased, =, true, ;, return, true, ;, }, return, false, ;, }, public, void, doAlias, (, AbstractCompiler, compiler]
[=, true, ;, return, true, ;, }, return, false, ;, }, public, void, doAlias, (, AbstractCompiler, compiler, ), {, if]
[;, return, true, ;, }, return, false, ;, }, public, void, doAlias, (, AbstractCompiler, compiler, ), {, if, (, isAliased]
[;, }, return, false, ;, }, public, void, doAlias, (, AbstractCompiler, compiler, ), {, if, (, isAliased, ), {, for]
[;, }, public, void, doAlias, (, AbstractCompiler, compiler, ), {, if, (, isAliased, ), {, for, (, Map, ., Entry]
[), {, for, (, Map, ., Entry, <, Node, ,, Node, >, entry, :, nodes, ., entrySet, (, ), )]
[), {, Node, n, =, entry, ., getKey, (, ), ;, Node, parent, =, entry, ., getValue, (, ), ;]
[., entrySet, (, ), ), {, Node, n, =, entry, ., getKey, (, ), ;, Node, parent, =, entry, .]
[;, Node, parent, =, entry, ., getValue, (, ), ;, aliasNode, (, n, ,, parent, ), ;, compiler, ., reportCodeChange]
[., getKey, (, ), ;, Node, parent, =, entry, ., getValue, (, ), ;, aliasNode, (, n, ,, parent, )]
[;, aliasNode, (, n, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, public, int, getTokenId]
[., getValue, (, ), ;, aliasNode, (, n, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, public, int, getTokenId, (, ), {, return, tokenId, ;, }]
[,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, public, int, getTokenId, (, ), {, return]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, public, int, getTokenId, (, ), {, return, tokenId, ;]
[;, }, }, }, public, int, getTokenId, (, ), {, return, tokenId, ;, }, public, String, getAliasName, (, ), {]
[., reportCodeChange, (, ), ;, }, }, }, public, int, getTokenId, (, ), {, return, tokenId, ;, }, public, String]
[;, }, public, String, getAliasName, (, ), {, return, aliasName, ;, }, protected, abstract, int, minOccurrencesRequiredToAlias, (, ), ;, protected]
[;, }, protected, abstract, int, minOccurrencesRequiredToAlias, (, ), ;, protected, abstract, void, insertAliasDeclaration, (, Node, codeRoot, ), ;, protected, abstract]
[,, Token, ., THROW, ), ;, }, @, Override, protected, void, aliasNode, (, Node, throwNode, ,, Node, parent, ), {]
[), ;, }, @, Override, protected, void, aliasNode, (, Node, throwNode, ,, Node, parent, ), {, Node, name, =, NodeUtil]
[., THROW, ), ;, }, @, Override, protected, void, aliasNode, (, Node, throwNode, ,, Node, parent, ), {, Node, name]
[;, Node, aliasCall, =, IR, ., call, (, name, ,, throwNode, ., removeFirstChild, (, ), ), ;, aliasCall, ., putBooleanProp]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, throwNode, ,, getAliasName, (, ), ), ;]
[,, getAliasName, (, ), ,, throwNode, ,, getAliasName, (, ), ), ;, Node, aliasCall, =, IR, ., call, (, name]
[., getCodingConvention, (, ), ,, getAliasName, (, ), ,, throwNode, ,, getAliasName, (, ), ), ;, Node, aliasCall, =, IR]
[,, throwNode, ,, getAliasName, (, ), ), ;, Node, aliasCall, =, IR, ., call, (, name, ,, throwNode, ., removeFirstChild]
[,, getAliasName, (, ), ), ;, Node, aliasCall, =, IR, ., call, (, name, ,, throwNode, ., removeFirstChild, (, )]
[), ;, Node, aliasCall, =, IR, ., call, (, name, ,, throwNode, ., removeFirstChild, (, ), ), ;, aliasCall, .]
[;, aliasCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, exprResult, =, IR, ., exprResult, (, aliasCall]
[., call, (, name, ,, throwNode, ., removeFirstChild, (, ), ), ;, aliasCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[,, throwNode, ., removeFirstChild, (, ), ), ;, aliasCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node]
[), ;, aliasCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, exprResult, =, IR, ., exprResult, (]
[., removeFirstChild, (, ), ), ;, aliasCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, exprResult, =]
[;, Node, exprResult, =, IR, ., exprResult, (, aliasCall, ), ;, parent, ., replaceChild, (, throwNode, ,, exprResult, ), ;]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, exprResult, =, IR, ., exprResult, (, aliasCall, ), ;]
[,, true, ), ;, Node, exprResult, =, IR, ., exprResult, (, aliasCall, ), ;, parent, ., replaceChild, (, throwNode, ,]
[., FREE_CALL, ,, true, ), ;, Node, exprResult, =, IR, ., exprResult, (, aliasCall, ), ;, parent, ., replaceChild, (]
[), ;, Node, exprResult, =, IR, ., exprResult, (, aliasCall, ), ;, parent, ., replaceChild, (, throwNode, ,, exprResult, )]
[;, parent, ., replaceChild, (, throwNode, ,, exprResult, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, )]
[., exprResult, (, aliasCall, ), ;, parent, ., replaceChild, (, throwNode, ,, exprResult, ), ;, }, @, Override, protected, void]
[), ;, parent, ., replaceChild, (, throwNode, ,, exprResult, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot]
[;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, codeRoot, ., addChildToFront, (, createAliasFunctionNode, (, getAliasName, (]
[., replaceChild, (, throwNode, ,, exprResult, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, codeRoot]
[,, exprResult, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, codeRoot, ., addChildToFront, (, createAliasFunctionNode]
[), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, codeRoot, ., addChildToFront, (, createAliasFunctionNode, (, getAliasName]
[;, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, ;, }, }, static, int, estimateMinOccurrencesRequriedToAlias, (, )]
[., addChildToFront, (, createAliasFunctionNode, (, getAliasName, (, ), ), ), ;, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {]
[), ;, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, ;, }, }, static, int, estimateMinOccurrencesRequriedToAlias, (]
[), ), ;, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, ;, }, }, static, int, estimateMinOccurrencesRequriedToAlias]
[;, }, }, static, int, estimateMinOccurrencesRequriedToAlias, (, ), {, Node, alias, =, createAliasFunctionNode, (, "TT", ), ;, return, InlineCostEstimator, .]
[;, return, InlineCostEstimator, ., getCost, (, alias, ), /, 2, +, 1, ;, }, private, static, Node, createAliasFunctionNode, (, String]
[), ;, return, InlineCostEstimator, ., getCost, (, alias, ), /, 2, +, 1, ;, }, private, static, Node, createAliasFunctionNode, (]
[;, }, private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {, final, String, PARAM_NAME, =, "jscomp_throw_param", ;, return, IR, .]
[+, 1, ;, }, private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {, final, String, PARAM_NAME, =, "jscomp_throw_param", ;, return]
[/, 2, +, 1, ;, }, private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {, final, String, PARAM_NAME, =, "jscomp_throw_param"]
[., getCost, (, alias, ), /, 2, +, 1, ;, }, private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {]
[), /, 2, +, 1, ;, }, private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {, final, String, PARAM_NAME, =]
[+, 1, ;, }, private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {, final, String, PARAM_NAME, =, "jscomp_throw_param", ;, return]
[;, }, private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {, final, String, PARAM_NAME, =, "jscomp_throw_param", ;, return, IR, .]
[;, return, IR, ., function, (, IR, ., name, (, aliasName, ), ,, IR, ., paramList, (, IR, ., name]
[;, }, private, class, KeywordAliasSpecification, extends, AliasSpecification, {, KeywordAliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, super, (, aliasName]
[., function, (, IR, ., name, (, aliasName, ), ,, IR, ., paramList, (, IR, ., name, (, PARAM_NAME, )]
[,, IR, ., paramList, (, IR, ., name, (, PARAM_NAME, ), ), ,, IR, ., block, (, IR, ., throwNode]
[., name, (, aliasName, ), ,, IR, ., paramList, (, IR, ., name, (, PARAM_NAME, ), ), ,, IR, .]
[), ,, IR, ., paramList, (, IR, ., name, (, PARAM_NAME, ), ), ,, IR, ., block, (, IR, .]
[,, IR, ., block, (, IR, ., throwNode, (, IR, ., name, (, PARAM_NAME, ), ), ), ), ;, }]
[., paramList, (, IR, ., name, (, PARAM_NAME, ), ), ,, IR, ., block, (, IR, ., throwNode, (, IR]
[), ,, IR, ., block, (, IR, ., throwNode, (, IR, ., name, (, PARAM_NAME, ), ), ), ), ;]
[., name, (, PARAM_NAME, ), ), ,, IR, ., block, (, IR, ., throwNode, (, IR, ., name, (, PARAM_NAME]
[), ), ,, IR, ., block, (, IR, ., throwNode, (, IR, ., name, (, PARAM_NAME, ), ), ), )]
[), ;, }, private, class, KeywordAliasSpecification, extends, AliasSpecification, {, KeywordAliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, super, (]
[., block, (, IR, ., throwNode, (, IR, ., name, (, PARAM_NAME, ), ), ), ), ;, }, private, class]
[), ), ;, }, private, class, KeywordAliasSpecification, extends, AliasSpecification, {, KeywordAliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, super]
[., throwNode, (, IR, ., name, (, PARAM_NAME, ), ), ), ), ;, }, private, class, KeywordAliasSpecification, extends, AliasSpecification, {]
[), ), ), ;, }, private, class, KeywordAliasSpecification, extends, AliasSpecification, {, KeywordAliasSpecification, (, String, aliasName, ,, int, tokenId, ), {]
[., name, (, PARAM_NAME, ), ), ), ), ;, }, private, class, KeywordAliasSpecification, extends, AliasSpecification, {, KeywordAliasSpecification, (, String, aliasName]
[), ), ), ), ;, }, private, class, KeywordAliasSpecification, extends, AliasSpecification, {, KeywordAliasSpecification, (, String, aliasName, ,, int, tokenId, )]
[,, tokenId, ), ;, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, ;, }, @, Override, protected]
[), ;, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, ;, }, @, Override, protected, void, aliasNode]
[;, }, @, Override, protected, void, aliasNode, (, Node, n, ,, Node, parent, ), {, Node, aliasNode, =, NodeUtil, .]
[;, parent, ., replaceChild, (, n, ,, aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, )]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;]
[,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;, parent, ., replaceChild, (, n, ,, aliasNode, )]
[., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;, parent, ., replaceChild, (]
[,, n, ,, getAliasName, (, ), ), ;, parent, ., replaceChild, (, n, ,, aliasNode, ), ;, }, @, Override]
[,, getAliasName, (, ), ), ;, parent, ., replaceChild, (, n, ,, aliasNode, ), ;, }, @, Override, protected, void]
[), ;, parent, ., replaceChild, (, n, ,, aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot]
[;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node, (, Token, .]
[., replaceChild, (, n, ,, aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node]
[,, aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node]
[), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node, (, Token]
[;, Node, value, =, new, Node, (, getTokenId, (, ), ), ;, Node, name, =, NodeUtil, ., newName, (, compiler]
[), ;, Node, value, =, new, Node, (, getTokenId, (, ), ), ;, Node, name, =, NodeUtil, ., newName, (]
[., VAR, ), ;, Node, value, =, new, Node, (, getTokenId, (, ), ), ;, Node, name, =, NodeUtil, .]
[;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,]
[), ;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode]
[;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (, varNode]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;]
[,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode]
[., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (]
[,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name]
[,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;]
[), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (]
[;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (, varNode, ), ;, }, }, private, class, VoidKeywordAliasSpecification]
[., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (, varNode, ), ;]
[), ;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (, varNode, ), ;, }, }, private, class]
[;, codeRoot, ., addChildrenToFront, (, varNode, ), ;, }, }, private, class, VoidKeywordAliasSpecification, extends, AliasSpecification, {, VoidKeywordAliasSpecification, (, String, aliasName]
[., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (, varNode, ), ;, }, }, private, class, VoidKeywordAliasSpecification, extends, AliasSpecification]
[), ;, codeRoot, ., addChildrenToFront, (, varNode, ), ;, }, }, private, class, VoidKeywordAliasSpecification, extends, AliasSpecification, {, VoidKeywordAliasSpecification, (, String]
[;, }, }, private, class, VoidKeywordAliasSpecification, extends, AliasSpecification, {, VoidKeywordAliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, super, (]
[., addChildrenToFront, (, varNode, ), ;, }, }, private, class, VoidKeywordAliasSpecification, extends, AliasSpecification, {, VoidKeywordAliasSpecification, (, String, aliasName, ,, int]
[), ;, }, }, private, class, VoidKeywordAliasSpecification, extends, AliasSpecification, {, VoidKeywordAliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, super]
[,, tokenId, ), ;, }, @, Override, public, void, visit, (, Node, n, ,, Node, parent, ), {, Node, value]
[), ;, }, @, Override, public, void, visit, (, Node, n, ,, Node, parent, ), {, Node, value, =, n]
[;, if, (, value, ., isNumber, (, ), &&, value, ., getDouble, (, ), ==, 0, ), {, super, .]
[., getFirstChild, (, ), ;, if, (, value, ., isNumber, (, ), &&, value, ., getDouble, (, ), ==, 0]
[), {, super, ., visit, (, n, ,, parent, ), ;, }, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, )]
[&&, value, ., getDouble, (, ), ==, 0, ), {, super, ., visit, (, n, ,, parent, ), ;, }]
[., isNumber, (, ), &&, value, ., getDouble, (, ), ==, 0, ), {, super, ., visit, (, n, ,]
[), {, super, ., visit, (, n, ,, parent, ), ;, }, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, )]
[==, 0, ), {, super, ., visit, (, n, ,, parent, ), ;, }, }, @, Override, protected, int, minOccurrencesRequiredToAlias]
[., getDouble, (, ), ==, 0, ), {, super, ., visit, (, n, ,, parent, ), ;, }, }, @]
[), {, super, ., visit, (, n, ,, parent, ), ;, }, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, )]
[;, }, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, ;, }, @, Override, protected, void, aliasNode]
[., visit, (, n, ,, parent, ), ;, }, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL]
[,, parent, ), ;, }, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, ;, }, @, Override]
[), ;, }, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, ;, }, @, Override, protected, void]
[;, }, @, Override, protected, void, aliasNode, (, Node, n, ,, Node, parent, ), {, Node, aliasNode, =, NodeUtil, .]
[;, parent, ., replaceChild, (, n, ,, aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, )]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;]
[,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;, parent, ., replaceChild, (, n, ,, aliasNode, )]
[., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;, parent, ., replaceChild, (]
[,, n, ,, getAliasName, (, ), ), ;, parent, ., replaceChild, (, n, ,, aliasNode, ), ;, }, @, Override]
[,, getAliasName, (, ), ), ;, parent, ., replaceChild, (, n, ,, aliasNode, ), ;, }, @, Override, protected, void]
[), ;, parent, ., replaceChild, (, n, ,, aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot]
[;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node, (, Token, .]
[., replaceChild, (, n, ,, aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node]
[,, aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node]
[), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node, (, Token]
[;, Node, value, =, IR, ., voidNode, (, IR, ., number, (, 0, ), ), ;, Node, name, =, NodeUtil]
[), ;, Node, value, =, IR, ., voidNode, (, IR, ., number, (, 0, ), ), ;, Node, name, =]
[., VAR, ), ;, Node, value, =, IR, ., voidNode, (, IR, ., number, (, 0, ), ), ;, Node]
[;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,]
[., voidNode, (, IR, ., number, (, 0, ), ), ;, Node, name, =, NodeUtil, ., newName, (, compiler, .]
[), ;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode]
[., number, (, 0, ), ), ;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[), ), ;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,]
[;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (, varNode]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;]
[,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode]
[., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (]
[,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name]
[,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;]
[), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (]
[;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (, varNode, ), ;, }, }, static, final, String]
[., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (, varNode, ), ;]
[), ;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (, varNode, ), ;, }, }, static, final]
[;, codeRoot, ., addChildrenToFront, (, varNode, ), ;, }, }, static, final, String, ALIAS_NULL, =, "JSCompiler_alias_NULL", ;, static, final, String]
[., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (, varNode, ), ;, }, }, static, final, String, ALIAS_NULL, =]
[), ;, codeRoot, ., addChildrenToFront, (, varNode, ), ;, }, }, static, final, String, ALIAS_NULL, =, "JSCompiler_alias_NULL", ;, static, final]
[;, }, }, static, final, String, ALIAS_NULL, =, "JSCompiler_alias_NULL", ;, static, final, String, ALIAS_TRUE, =, "JSCompiler_alias_TRUE", ;, static, final, String]
[., addChildrenToFront, (, varNode, ), ;, }, }, static, final, String, ALIAS_NULL, =, "JSCompiler_alias_NULL", ;, static, final, String, ALIAS_TRUE, =]
[), ;, }, }, static, final, String, ALIAS_NULL, =, "JSCompiler_alias_NULL", ;, static, final, String, ALIAS_TRUE, =, "JSCompiler_alias_TRUE", ;, static, final]
[;, static, final, String, ALIAS_TRUE, =, "JSCompiler_alias_TRUE", ;, static, final, String, ALIAS_FALSE, =, "JSCompiler_alias_FALSE", ;, static, final, String, ALIAS_THROW, =]
[;, static, final, String, ALIAS_FALSE, =, "JSCompiler_alias_FALSE", ;, static, final, String, ALIAS_THROW, =, "JSCompiler_alias_THROW", ;, static, final, String, ALIAS_VOID, =]
[;, static, final, String, ALIAS_THROW, =, "JSCompiler_alias_THROW", ;, static, final, String, ALIAS_VOID, =, "JSCompiler_alias_VOID", ;, static, final, int, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, =]
[;, static, final, String, ALIAS_VOID, =, "JSCompiler_alias_VOID", ;, static, final, int, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, =, 6, ;, static, final, int, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, =]
[;, static, final, int, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, =, 6, ;, static, final, int, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, =, estimateMinOccurrencesRequriedToAlias, (, ), ;, private, final, AbstractCompiler]
[;, static, final, int, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, =, estimateMinOccurrencesRequriedToAlias, (, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, List, <, AliasSpecification]
[;, private, final, AbstractCompiler, compiler, ;, private, final, List, <, AliasSpecification, >, aliasSpecifications, ;, private, final, Map, <, Integer, ,]
[=, compiler, ;, aliasSpecifications, =, createAliasSpecifications, (, ), ;, aliasTypes, =, Maps, ., newLinkedHashMap, (, ), ;, aliasNames, =, Sets]
[., compiler, =, compiler, ;, aliasSpecifications, =, createAliasSpecifications, (, ), ;, aliasTypes, =, Maps, ., newLinkedHashMap, (, ), ;, aliasNames]
[;, aliasSpecifications, =, createAliasSpecifications, (, ), ;, aliasTypes, =, Maps, ., newLinkedHashMap, (, ), ;, aliasNames, =, Sets, ., newLinkedHashSet]
[=, createAliasSpecifications, (, ), ;, aliasTypes, =, Maps, ., newLinkedHashMap, (, ), ;, aliasNames, =, Sets, ., newLinkedHashSet, (, )]
[;, aliasTypes, =, Maps, ., newLinkedHashMap, (, ), ;, aliasNames, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, AliasSpecification]
[=, Maps, ., newLinkedHashMap, (, ), ;, aliasNames, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, AliasSpecification, specification, :]
[;, aliasNames, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, AliasSpecification, specification, :, aliasSpecifications, ), {, aliasTypes, ., put]
[., newLinkedHashMap, (, ), ;, aliasNames, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, AliasSpecification, specification, :, aliasSpecifications, )]
[=, Sets, ., newLinkedHashSet, (, ), ;, for, (, AliasSpecification, specification, :, aliasSpecifications, ), {, aliasTypes, ., put, (, specification]
[;, for, (, AliasSpecification, specification, :, aliasSpecifications, ), {, aliasTypes, ., put, (, specification, ., getTokenId, (, ), ,, specification]
[., newLinkedHashSet, (, ), ;, for, (, AliasSpecification, specification, :, aliasSpecifications, ), {, aliasTypes, ., put, (, specification, ., getTokenId]
[), {, aliasTypes, ., put, (, specification, ., getTokenId, (, ), ,, specification, ), ;, aliasNames, ., add, (, specification]
[;, aliasNames, ., add, (, specification, ., getAliasName, (, ), ), ;, }, }, @, Override, public, void, process, (]
[., put, (, specification, ., getTokenId, (, ), ,, specification, ), ;, aliasNames, ., add, (, specification, ., getAliasName, (]
[,, specification, ), ;, aliasNames, ., add, (, specification, ., getAliasName, (, ), ), ;, }, }, @, Override, public]
[., getTokenId, (, ), ,, specification, ), ;, aliasNames, ., add, (, specification, ., getAliasName, (, ), ), ;, }]
[), ;, aliasNames, ., add, (, specification, ., getAliasName, (, ), ), ;, }, }, @, Override, public, void, process]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[., add, (, specification, ., getAliasName, (, ), ), ;, }, }, @, Override, public, void, process, (, Node, externs]
[), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., getAliasName, (, ), ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[;, if, (, needsAliases, (, ), ), {, addAliasNodes, (, compiler, ., getNodeForCodeInsertion, (, null, ), ), ;, for, (]
[., traverse, (, compiler, ,, root, ,, new, FindAliasableNodes, (, ), ), ;, if, (, needsAliases, (, ), ), {]
[,, root, ,, new, FindAliasableNodes, (, ), ), ;, if, (, needsAliases, (, ), ), {, addAliasNodes, (, compiler, .]
[,, new, FindAliasableNodes, (, ), ), ;, if, (, needsAliases, (, ), ), {, addAliasNodes, (, compiler, ., getNodeForCodeInsertion, (]
[), ;, if, (, needsAliases, (, ), ), {, addAliasNodes, (, compiler, ., getNodeForCodeInsertion, (, null, ), ), ;, for]
[), {, addAliasNodes, (, compiler, ., getNodeForCodeInsertion, (, null, ), ), ;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {]
[;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, spec, ., doAlias, (, compiler, ), ;, }, }, }, private]
[), ;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, spec, ., doAlias, (, compiler, ), ;, }, }, }]
[., getNodeForCodeInsertion, (, null, ), ), ;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, spec, ., doAlias, (, compiler]
[), ), ;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, spec, ., doAlias, (, compiler, ), ;, }, }]
[), {, spec, ., doAlias, (, compiler, ), ;, }, }, }, private, boolean, needsAliases, (, ), {, for, (]
[;, }, }, }, private, boolean, needsAliases, (, ), {, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (]
[., doAlias, (, compiler, ), ;, }, }, }, private, boolean, needsAliases, (, ), {, for, (, AliasSpecification, spec, :]
[), ;, }, }, }, private, boolean, needsAliases, (, ), {, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if]
[), {, if, (, !, spec, ., nodes, ., isEmpty, (, ), ), {, return, true, ;, }, }, return]
[), {, return, true, ;, }, }, return, false, ;, }, private, void, addAliasNodes, (, Node, codeRoot, ), {, boolean]
[), {, return, true, ;, }, }, return, false, ;, }, private, void, addAliasNodes, (, Node, codeRoot, ), {, boolean]
[., isEmpty, (, ), ), {, return, true, ;, }, }, return, false, ;, }, private, void, addAliasNodes, (, Node]
[., nodes, ., isEmpty, (, ), ), {, return, true, ;, }, }, return, false, ;, }, private, void, addAliasNodes]
[;, }, }, return, false, ;, }, private, void, addAliasNodes, (, Node, codeRoot, ), {, boolean, codeChanged, =, false, ;]
[;, }, private, void, addAliasNodes, (, Node, codeRoot, ), {, boolean, codeChanged, =, false, ;, for, (, AliasSpecification, spec, :]
[;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (, spec, ., maybeInsertAliasDeclarationIntoParseTree, (, codeRoot, ), ), {, codeChanged]
[), {, if, (, spec, ., maybeInsertAliasDeclarationIntoParseTree, (, codeRoot, ), ), {, codeChanged, =, true, ;, }, }, if, (]
[), {, codeChanged, =, true, ;, }, }, if, (, codeChanged, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[., maybeInsertAliasDeclarationIntoParseTree, (, codeRoot, ), ), {, codeChanged, =, true, ;, }, }, if, (, codeChanged, ), {, compiler, .]
[), ), {, codeChanged, =, true, ;, }, }, if, (, codeChanged, ), {, compiler, ., reportCodeChange, (, ), ;]
[=, true, ;, }, }, if, (, codeChanged, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean]
[;, }, }, if, (, codeChanged, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, isAliasDefinition, (]
[), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, isAliasDefinition, (, Node, n, ), {, if, (]
[;, }, }, private, boolean, isAliasDefinition, (, Node, n, ), {, if, (, !, n, ., isName, (, ), )]
[., reportCodeChange, (, ), ;, }, }, private, boolean, isAliasDefinition, (, Node, n, ), {, if, (, !, n, .]
[), {, return, false, ;, }, if, (, !, isAliasName, (, n, ., getString, (, ), ), ), {, return]
[), {, return, false, ;, }, if, (, !, isAliasName, (, n, ., getString, (, ), ), ), {, return]
[., isName, (, ), ), {, return, false, ;, }, if, (, !, isAliasName, (, n, ., getString, (, )]
[;, }, if, (, !, isAliasName, (, n, ., getString, (, ), ), ), {, return, false, ;, }, return]
[), {, return, false, ;, }, return, n, ., getFirstChild, (, ), !=, null, ;, }, private, boolean, isAliasableType, (]
[), {, return, false, ;, }, return, n, ., getFirstChild, (, ), !=, null, ;, }, private, boolean, isAliasableType, (]
[), ), {, return, false, ;, }, return, n, ., getFirstChild, (, ), !=, null, ;, }, private, boolean, isAliasableType]
[., getString, (, ), ), ), {, return, false, ;, }, return, n, ., getFirstChild, (, ), !=, null, ;]
[;, }, return, n, ., getFirstChild, (, ), !=, null, ;, }, private, boolean, isAliasableType, (, int, type, ), {]
[;, }, private, boolean, isAliasableType, (, int, type, ), {, return, aliasTypes, ., containsKey, (, type, ), ;, }, private]
[!=, null, ;, }, private, boolean, isAliasableType, (, int, type, ), {, return, aliasTypes, ., containsKey, (, type, ), ;]
[., getFirstChild, (, ), !=, null, ;, }, private, boolean, isAliasableType, (, int, type, ), {, return, aliasTypes, ., containsKey]
[;, }, private, boolean, isAliasableType, (, int, type, ), {, return, aliasTypes, ., containsKey, (, type, ), ;, }, private]
[;, }, private, boolean, isAliasName, (, String, name, ), {, return, aliasNames, ., contains, (, name, ), ;, }, private]
[., containsKey, (, type, ), ;, }, private, boolean, isAliasName, (, String, name, ), {, return, aliasNames, ., contains, (]
[), ;, }, private, boolean, isAliasName, (, String, name, ), {, return, aliasNames, ., contains, (, name, ), ;, }]
[;, }, private, List, <, AliasSpecification, >, createAliasSpecifications, (, ), {, List, <, AliasSpecification, >, l, =, Lists, ., newArrayList]
[., contains, (, name, ), ;, }, private, List, <, AliasSpecification, >, createAliasSpecifications, (, ), {, List, <, AliasSpecification, >]
[), ;, }, private, List, <, AliasSpecification, >, createAliasSpecifications, (, ), {, List, <, AliasSpecification, >, l, =, Lists, .]
[;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_FALSE, ,, Token, ., FALSE, ), ), ;, l, ., add, (]
[., newArrayList, (, ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_FALSE, ,, Token, ., FALSE, ), ), ;]
[;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, ), ), ;, l, ., add, (]
[., add, (, new, KeywordAliasSpecification, (, ALIAS_FALSE, ,, Token, ., FALSE, ), ), ;, l, ., add, (, new, KeywordAliasSpecification]
[), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, ), ), ;, l, ., add]
[,, Token, ., FALSE, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, )]
[), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, ), ), ;, l, .]
[., FALSE, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, ), ), ;]
[;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, ), ), ;, l, ., add, (]
[., add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, ), ), ;, l, ., add, (, new, KeywordAliasSpecification]
[), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, ), ), ;, l, ., add]
[,, Token, ., NULL, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, )]
[), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, ), ), ;, l, .]
[., NULL, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, ), ), ;]
[;, l, ., add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,, Token, ., VOID, ), ), ;, l, ., add, (]
[., add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, ), ), ;, l, ., add, (, new, VoidKeywordAliasSpecification]
[), ;, l, ., add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,, Token, ., VOID, ), ), ;, l, ., add]
[,, Token, ., TRUE, ), ), ;, l, ., add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,, Token, ., VOID, )]
[), ), ;, l, ., add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,, Token, ., VOID, ), ), ;, l, .]
[., TRUE, ), ), ;, l, ., add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,, Token, ., VOID, ), ), ;]
[;, l, ., add, (, new, ThrowAliasSpecification, (, ALIAS_THROW, ), ), ;, return, l, ;, }, }]
[., add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,, Token, ., VOID, ), ), ;, l, ., add, (, new, ThrowAliasSpecification]
[), ;, l, ., add, (, new, ThrowAliasSpecification, (, ALIAS_THROW, ), ), ;, return, l, ;, }, }]
[,, Token, ., VOID, ), ), ;, l, ., add, (, new, ThrowAliasSpecification, (, ALIAS_THROW, ), ), ;, return, l]
[), ), ;, l, ., add, (, new, ThrowAliasSpecification, (, ALIAS_THROW, ), ), ;, return, l, ;, }, }]
[., VOID, ), ), ;, l, ., add, (, new, ThrowAliasSpecification, (, ALIAS_THROW, ), ), ;, return, l, ;, }]
[;, return, l, ;, }, }]
[., add, (, new, ThrowAliasSpecification, (, ALIAS_THROW, ), ), ;, return, l, ;, }, }]
[), ;, return, l, ;, }, }]
[), ), ;, return, l, ;, }, }]
[;, }, }]
