[{, private, final, ImmutableMap, <, String, ,, String, >, map, ;, private, ImmutableMap, <, String, ,, String, >, reverseMap, =]
[>, map, ;, private, ImmutableMap, <, String, ,, String, >, reverseMap, =, null, ;, private, static, final, char, SEPARATOR, =]
[;, private, static, final, char, SEPARATOR, =, ':', ;, VariableMap, (, Map, <, String, ,, String, >, map, ), {]
[;, private, static, final, char, SEPARATOR, =, ':', ;, VariableMap, (, Map, <, String, ,, String, >, map, ), {]
[char, SEPARATOR, =, ':', ;, VariableMap, (, Map, <, String, ,, String, >, map, ), {, this, ., map, =]
[char, SEPARATOR, =, ':', ;, VariableMap, (, Map, <, String, ,, String, >, map, ), {, this, ., map, =]
[;, VariableMap, (, Map, <, String, ,, String, >, map, ), {, this, ., map, =, ImmutableMap, ., copyOf, (]
[., map, =, ImmutableMap, ., copyOf, (, map, ), ;, }, public, String, lookupNewName, (, String, sourceName, ), {, return]
[., map, =, ImmutableMap, ., copyOf, (, map, ), ;, }, public, String, lookupNewName, (, String, sourceName, ), {, return]
[., copyOf, (, map, ), ;, }, public, String, lookupNewName, (, String, sourceName, ), {, return, map, ., get, (]
[sourceName, ), {, return, map, ., get, (, sourceName, ), ;, }, public, String, lookupSourceName, (, String, newName, ), {]
[., get, (, sourceName, ), ;, }, public, String, lookupSourceName, (, String, newName, ), {, initReverseMap, (, ), ;, return]
[., get, (, sourceName, ), ;, }, public, String, lookupSourceName, (, String, newName, ), {, initReverseMap, (, ), ;, return]
[), ;, }, public, String, lookupSourceName, (, String, newName, ), {, initReverseMap, (, ), ;, return, reverseMap, ., get, (]
[), ;, return, reverseMap, ., get, (, newName, ), ;, }, private, synchronized, void, initReverseMap, (, ), {, if, (]
[), ;, return, reverseMap, ., get, (, newName, ), ;, }, private, synchronized, void, initReverseMap, (, ), {, if, (]
[return, reverseMap, ., get, (, newName, ), ;, }, private, synchronized, void, initReverseMap, (, ), {, if, (, reverseMap, ==]
[(, ), {, if, (, reverseMap, ==, null, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, rm, =]
[(, ), {, if, (, reverseMap, ==, null, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, rm, =]
[rm, =, ImmutableMap, ., builder, (, ), ;, for, (, Map, ., Entry, <, String, ,, String, >, entry, :]
[rm, =, ImmutableMap, ., builder, (, ), ;, for, (, Map, ., Entry, <, String, ,, String, >, entry, :]
[;, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, map, ., entrySet, (, ), ), {]
[;, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, map, ., entrySet, (, ), ), {]
[., Entry, <, String, ,, String, >, entry, :, map, ., entrySet, (, ), ), {, rm, ., put, (]
[., Entry, <, String, ,, String, >, entry, :, map, ., entrySet, (, ), ), {, rm, ., put, (]
[>, entry, :, map, ., entrySet, (, ), ), {, rm, ., put, (, entry, ., getValue, (, ), ,]
[>, entry, :, map, ., entrySet, (, ), ), {, rm, ., put, (, entry, ., getValue, (, ), ,]
[), {, rm, ., put, (, entry, ., getValue, (, ), ,, entry, ., getKey, (, ), ), ;, }]
[rm, ., put, (, entry, ., getValue, (, ), ,, entry, ., getKey, (, ), ), ;, }, reverseMap, =]
[rm, ., put, (, entry, ., getValue, (, ), ,, entry, ., getKey, (, ), ), ;, }, reverseMap, =]
[rm, ., build, (, ), ;, }, }, public, Map, <, String, ,, String, >, getOriginalNameToNewNameMap, (, ), {, return]
[>, getOriginalNameToNewNameMap, (, ), {, return, map, ;, }, public, Map, <, String, ,, String, >, getNewNameToOriginalNameMap, (, ), {]
[return, map, ;, }, public, Map, <, String, ,, String, >, getNewNameToOriginalNameMap, (, ), {, initReverseMap, (, ), ;, return]
[), {, initReverseMap, (, ), ;, return, reverseMap, ;, }, public, void, save, (, String, filename, ), throws, IOException, {]
[), {, initReverseMap, (, ), ;, return, reverseMap, ;, }, public, void, save, (, String, filename, ), throws, IOException, {]
[), ;, return, reverseMap, ;, }, public, void, save, (, String, filename, ), throws, IOException, {, Files, ., write, (]
[;, }, public, void, save, (, String, filename, ), throws, IOException, {, Files, ., write, (, toBytes, (, ), ,]
[void, save, (, String, filename, ), throws, IOException, {, Files, ., write, (, toBytes, (, ), ,, new, File, (]
[(, filename, ), ), ;, }, public, static, VariableMap, load, (, String, filename, ), throws, IOException, {, try, {, return]
[), ), ;, }, public, static, VariableMap, load, (, String, filename, ), throws, IOException, {, try, {, return, fromBytes, (]
[), ), ;, }, public, static, VariableMap, load, (, String, filename, ), throws, IOException, {, try, {, return, fromBytes, (]
[public, static, VariableMap, load, (, String, filename, ), throws, IOException, {, try, {, return, fromBytes, (, Files, ., toByteArray, (]
[load, (, String, filename, ), throws, IOException, {, try, {, return, fromBytes, (, Files, ., toByteArray, (, new, File, (]
[Files, ., toByteArray, (, new, File, (, filename, ), ), ), ;, }, catch, (, ParseException, e, ), {, throw]
[(, new, File, (, filename, ), ), ), ;, }, catch, (, ParseException, e, ), {, throw, new, IOException, (]
[throw, new, IOException, (, e, ), ;, }, }, public, byte, [, ], toBytes, (, ), {, ByteArrayOutputStream, baos, =]
[}, public, byte, [, ], toBytes, (, ), {, ByteArrayOutputStream, baos, =, new, ByteArrayOutputStream, (, ), ;, Writer, writer, =]
[[, ], toBytes, (, ), {, ByteArrayOutputStream, baos, =, new, ByteArrayOutputStream, (, ), ;, Writer, writer, =, new, OutputStreamWriter, (]
[toBytes, (, ), {, ByteArrayOutputStream, baos, =, new, ByteArrayOutputStream, (, ), ;, Writer, writer, =, new, OutputStreamWriter, (, baos, ,]
[toBytes, (, ), {, ByteArrayOutputStream, baos, =, new, ByteArrayOutputStream, (, ), ;, Writer, writer, =, new, OutputStreamWriter, (, baos, ,]
[,, Charsets, ., UTF_8, ), ;, try, {, for, (, Map, ., Entry, <, String, ,, String, >, entry, :]
[,, Charsets, ., UTF_8, ), ;, try, {, for, (, Map, ., Entry, <, String, ,, String, >, entry, :]
[{, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, map, ., entrySet, (, ), ), {]
[{, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, map, ., entrySet, (, ), ), {]
[., Entry, <, String, ,, String, >, entry, :, map, ., entrySet, (, ), ), {, writer, ., write, (]
[<, String, ,, String, >, entry, :, map, ., entrySet, (, ), ), {, writer, ., write, (, escape, (]
[<, String, ,, String, >, entry, :, map, ., entrySet, (, ), ), {, writer, ., write, (, escape, (]
[., entrySet, (, ), ), {, writer, ., write, (, escape, (, entry, ., getKey, (, ), ), ), ;]
[., entrySet, (, ), ), {, writer, ., write, (, escape, (, entry, ., getKey, (, ), ), ), ;]
[), {, writer, ., write, (, escape, (, entry, ., getKey, (, ), ), ), ;, writer, ., write, (]
[., write, (, escape, (, entry, ., getKey, (, ), ), ), ;, writer, ., write, (, SEPARATOR, ), ;]
[., write, (, escape, (, entry, ., getKey, (, ), ), ), ;, writer, ., write, (, SEPARATOR, ), ;]
[(, entry, ., getKey, (, ), ), ), ;, writer, ., write, (, SEPARATOR, ), ;, writer, ., write, (]
[., getKey, (, ), ), ), ;, writer, ., write, (, SEPARATOR, ), ;, writer, ., write, (, escape, (]
[., getKey, (, ), ), ), ;, writer, ., write, (, SEPARATOR, ), ;, writer, ., write, (, escape, (]
[., write, (, SEPARATOR, ), ;, writer, ., write, (, escape, (, entry, ., getValue, (, ), ), ), ;]
[., write, (, SEPARATOR, ), ;, writer, ., write, (, escape, (, entry, ., getValue, (, ), ), ), ;]
[), ;, writer, ., write, (, escape, (, entry, ., getValue, (, ), ), ), ;, writer, ., write, (]
[write, (, escape, (, entry, ., getValue, (, ), ), ), ;, writer, ., write, (, '\n', ), ;, }]
[write, (, escape, (, entry, ., getValue, (, ), ), ), ;, writer, ., write, (, '\n', ), ;, }]
[write, (, '\n', ), ;, }, writer, ., close, (, ), ;, }, catch, (, IOException, e, ), {, throw]
[), ;, }, writer, ., close, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
[close, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return]
[close, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return]
[static, VariableMap, fromBytes, (, byte, [, ], bytes, ), throws, ParseException, {, Iterable, <, String, >, lines, ;, try, {]
[fromBytes, (, byte, [, ], bytes, ), throws, ParseException, {, Iterable, <, String, >, lines, ;, try, {, lines, =]
[fromBytes, (, byte, [, ], bytes, ), throws, ParseException, {, Iterable, <, String, >, lines, ;, try, {, lines, =]
[], bytes, ), throws, ParseException, {, Iterable, <, String, >, lines, ;, try, {, lines, =, CharStreams, ., readLines, (]
[], bytes, ), throws, ParseException, {, Iterable, <, String, >, lines, ;, try, {, lines, =, CharStreams, ., readLines, (]
[ParseException, {, Iterable, <, String, >, lines, ;, try, {, lines, =, CharStreams, ., readLines, (, CharStreams, ., newReaderSupplier, (]
[ParseException, {, Iterable, <, String, >, lines, ;, try, {, lines, =, CharStreams, ., readLines, (, CharStreams, ., newReaderSupplier, (]
[String, >, lines, ;, try, {, lines, =, CharStreams, ., readLines, (, CharStreams, ., newReaderSupplier, (, ByteStreams, ., newInputStreamSupplier, (]
[;, try, {, lines, =, CharStreams, ., readLines, (, CharStreams, ., newReaderSupplier, (, ByteStreams, ., newInputStreamSupplier, (, bytes, ), ,]
[;, try, {, lines, =, CharStreams, ., readLines, (, CharStreams, ., newReaderSupplier, (, ByteStreams, ., newInputStreamSupplier, (, bytes, ), ,]
[., newInputStreamSupplier, (, bytes, ), ,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw]
[bytes, ), ,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
[), {, throw, new, RuntimeException, (, e, ), ;, }, ImmutableMap, ., Builder, <, String, ,, String, >, map, =]
[), {, throw, new, RuntimeException, (, e, ), ;, }, ImmutableMap, ., Builder, <, String, ,, String, >, map, =]
[., Builder, <, String, ,, String, >, map, =, ImmutableMap, ., builder, (, ), ;, for, (, String, line, :]
[>, map, =, ImmutableMap, ., builder, (, ), ;, for, (, String, line, :, lines, ), {, int, pos, =]
[=, ImmutableMap, ., builder, (, ), ;, for, (, String, line, :, lines, ), {, int, pos, =, findIndexOfChar, (]
[., builder, (, ), ;, for, (, String, line, :, lines, ), {, int, pos, =, findIndexOfChar, (, line, ,]
[for, (, String, line, :, lines, ), {, int, pos, =, findIndexOfChar, (, line, ,, SEPARATOR, ), ;, if, (]
[for, (, String, line, :, lines, ), {, int, pos, =, findIndexOfChar, (, line, ,, SEPARATOR, ), ;, if, (]
[for, (, String, line, :, lines, ), {, int, pos, =, findIndexOfChar, (, line, ,, SEPARATOR, ), ;, if, (]
[String, line, :, lines, ), {, int, pos, =, findIndexOfChar, (, line, ,, SEPARATOR, ), ;, if, (, pos, <=]
[:, lines, ), {, int, pos, =, findIndexOfChar, (, line, ,, SEPARATOR, ), ;, if, (, pos, <=, 0, ||]
[:, lines, ), {, int, pos, =, findIndexOfChar, (, line, ,, SEPARATOR, ), ;, if, (, pos, <=, 0, ||]
[), {, int, pos, =, findIndexOfChar, (, line, ,, SEPARATOR, ), ;, if, (, pos, <=, 0, ||, pos, ==]
[), {, int, pos, =, findIndexOfChar, (, line, ,, SEPARATOR, ), ;, if, (, pos, <=, 0, ||, pos, ==]
[), {, int, pos, =, findIndexOfChar, (, line, ,, SEPARATOR, ), ;, if, (, pos, <=, 0, ||, pos, ==]
[(, line, ,, SEPARATOR, ), ;, if, (, pos, <=, 0, ||, pos, ==, line, ., length, (, ), -]
[), ;, if, (, pos, <=, 0, ||, pos, ==, line, ., length, (, ), -, 1, ), {, throw]
[(, pos, <=, 0, ||, pos, ==, line, ., length, (, ), -, 1, ), {, throw, new, ParseException, (]
[(, pos, <=, 0, ||, pos, ==, line, ., length, (, ), -, 1, ), {, throw, new, ParseException, (]
[<=, 0, ||, pos, ==, line, ., length, (, ), -, 1, ), {, throw, new, ParseException, (, "Bad line: ", +]
[||, pos, ==, line, ., length, (, ), -, 1, ), {, throw, new, ParseException, (, "Bad line: ", +, line, ,]
[., length, (, ), -, 1, ), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }]
[., length, (, ), -, 1, ), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }]
[-, 1, ), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }, map, ., put, (]
[), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }, map, ., put, (, unescape, (]
[), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }, map, ., put, (, unescape, (]
[ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }, map, ., put, (, unescape, (, line, ., substring, (]
["Bad line: ", +, line, ,, 0, ), ;, }, map, ., put, (, unescape, (, line, ., substring, (, 0, ,]
[0, ), ;, }, map, ., put, (, unescape, (, line, ., substring, (, 0, ,, pos, ), ), ,]
[;, }, map, ., put, (, unescape, (, line, ., substring, (, 0, ,, pos, ), ), ,, unescape, (]
[;, }, map, ., put, (, unescape, (, line, ., substring, (, 0, ,, pos, ), ), ,, unescape, (]
[put, (, unescape, (, line, ., substring, (, 0, ,, pos, ), ), ,, unescape, (, line, ., substring, (]
[put, (, unescape, (, line, ., substring, (, 0, ,, pos, ), ), ,, unescape, (, line, ., substring, (]
[unescape, (, line, ., substring, (, 0, ,, pos, ), ), ,, unescape, (, line, ., substring, (, pos, +]
[,, pos, ), ), ,, unescape, (, line, ., substring, (, pos, +, 1, ), ), ), ;, }, return]
[), ,, unescape, (, line, ., substring, (, pos, +, 1, ), ), ), ;, }, return, new, VariableMap, (]
[), ,, unescape, (, line, ., substring, (, pos, +, 1, ), ), ), ;, }, return, new, VariableMap, (]
[VariableMap, (, map, ., build, (, ), ), ;, }, private, static, String, escape, (, String, value, ), {, return]
[VariableMap, (, map, ., build, (, ), ), ;, }, private, static, String, escape, (, String, value, ), {, return]
[VariableMap, (, map, ., build, (, ), ), ;, }, private, static, String, escape, (, String, value, ), {, return]
[VariableMap, (, map, ., build, (, ), ), ;, }, private, static, String, escape, (, String, value, ), {, return]
[build, (, ), ), ;, }, private, static, String, escape, (, String, value, ), {, return, value, ., replace, (]
[), ), ;, }, private, static, String, escape, (, String, value, ), {, return, value, ., replace, (, "\\", ,]
[static, String, escape, (, String, value, ), {, return, value, ., replace, (, "\\", ,, "\\\\", ), ., replace, (]
[escape, (, String, value, ), {, return, value, ., replace, (, "\\", ,, "\\\\", ), ., replace, (, ":", ,]
[{, return, value, ., replace, (, "\\", ,, "\\\\", ), ., replace, (, ":", ,, "\\:", ), ., replace, (]
[value, ., replace, (, "\\", ,, "\\\\", ), ., replace, (, ":", ,, "\\:", ), ., replace, (, "\n", ,]
[,, "\\n", ), ;, }, private, static, int, findIndexOfChar, (, String, value, ,, char, stopChar, ), {, int, len, =]
[,, "\\n", ), ;, }, private, static, int, findIndexOfChar, (, String, value, ,, char, stopChar, ), {, int, len, =]
[value, ,, char, stopChar, ), {, int, len, =, value, ., length, (, ), ;, for, (, int, i, =]
[char, stopChar, ), {, int, len, =, value, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[char, stopChar, ), {, int, len, =, value, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[), {, int, len, =, value, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, len, =, value, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[int, len, =, value, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, char, c, =]
[), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, char, c, =]
[int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (]
[i, <, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (]
[i, <, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (]
[i, <, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (]
[len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==]
[i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&]
[i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&]
[++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++]
[{, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i, <]
[=, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {]
[., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =]
[., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =]
[), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =, value, ., charAt, (]
[&&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, else, if, (]
[&&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, else, if, (]
[i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, else, if, (, c, ==]
[{, c, =, value, ., charAt, (, i, ), ;, }, else, if, (, c, ==, stopChar, ), {, return]
[charAt, (, i, ), ;, }, else, if, (, c, ==, stopChar, ), {, return, i, ;, }, }, return]
[(, i, ), ;, }, else, if, (, c, ==, stopChar, ), {, return, i, ;, }, }, return, -]
[;, }, }, return, -, 1, ;, }, private, static, String, unescape, (, CharSequence, value, ), {, StringBuilder, sb, =]
[private, static, String, unescape, (, CharSequence, value, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, int, len, =]
[private, static, String, unescape, (, CharSequence, value, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, int, len, =]
[=, new, StringBuilder, (, ), ;, int, len, =, value, ., length, (, ), ;, for, (, int, i, =]
[StringBuilder, (, ), ;, int, len, =, value, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[StringBuilder, (, ), ;, int, len, =, value, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, int, len, =, value, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, len, =, value, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[int, len, =, value, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, char, c, =]
[), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, char, c, =]
[int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (]
[i, <, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (]
[i, <, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (]
[i, <, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (]
[len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==]
[i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&]
[i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&]
[++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++]
[{, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i, <]
[=, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {]
[., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =]
[., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =]
[), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =, value, ., charAt, (]
[c, ==, '\\', &&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }]
[c, ==, '\\', &&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }]
[++, i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, sb, ., append, (]
[{, c, =, value, ., charAt, (, i, ), ;, }, sb, ., append, (, c, ), ;, }, return]
[{, c, =, value, ., charAt, (, i, ), ;, }, sb, ., append, (, c, ), ;, }, return]
[toString, (, ), ;, }, public, static, VariableMap, fromMap, (, Map, <, String, ,, String, >, map, ), {, return]
[;, }, public, static, VariableMap, fromMap, (, Map, <, String, ,, String, >, map, ), {, return, new, VariableMap, (]
[new, VariableMap, (, map, ), ;, }, @, VisibleForTesting, Map, <, String, ,, String, >, toMap, (, ), {, return]
