[=, handler, ;, }, public, AstValidator, (, ), {, this, ., violationHandler, =, new, ViolationHandler, (, ), {, @, Override]
[., violationHandler, =, handler, ;, }, public, AstValidator, (, ), {, this, ., violationHandler, =, new, ViolationHandler, (, ), {]
[;, }, public, AstValidator, (, ), {, this, ., violationHandler, =, new, ViolationHandler, (, ), {, @, Override, public, void]
[=, new, ViolationHandler, (, ), {, @, Override, public, void, handleViolation, (, String, message, ,, Node, n, ), {, throw]
[., violationHandler, =, new, ViolationHandler, (, ), {, @, Override, public, void, handleViolation, (, String, message, ,, Node, n, )]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, externs, !=, null]
[;, }, }, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[), ;, }, }, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if]
[+, n, ., toString, (, ), ), ;, }, }, ;, }, @, Override, public, void, process, (, Node, externs]
[+, " Reference node ", +, n, ., toString, (, ), ), ;, }, }, ;, }, @, Override, public, void, process, (]
[+, n, ., toString, (, ), ), ;, }, }, ;, }, @, Override, public, void, process, (, Node, externs]
[), ;, }, }, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if]
[., toString, (, ), ), ;, }, }, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[), {, validateCodeRoot, (, externs, ), ;, }, if, (, root, !=, null, ), {, validateCodeRoot, (, root, ), ;]
[!=, null, ), {, validateCodeRoot, (, externs, ), ;, }, if, (, root, !=, null, ), {, validateCodeRoot, (, root]
[), {, validateCodeRoot, (, externs, ), ;, }, if, (, root, !=, null, ), {, validateCodeRoot, (, root, ), ;]
[;, }, if, (, root, !=, null, ), {, validateCodeRoot, (, root, ), ;, }, }, public, void, validateRoot, (]
[), ;, }, if, (, root, !=, null, ), {, validateCodeRoot, (, root, ), ;, }, }, public, void, validateRoot]
[), {, validateCodeRoot, (, root, ), ;, }, }, public, void, validateRoot, (, Node, n, ), {, validateNodeType, (, Token]
[!=, null, ), {, validateCodeRoot, (, root, ), ;, }, }, public, void, validateRoot, (, Node, n, ), {, validateNodeType]
[), {, validateCodeRoot, (, root, ), ;, }, }, public, void, validateRoot, (, Node, n, ), {, validateNodeType, (, Token]
[;, }, }, public, void, validateRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;]
[), ;, }, }, public, void, validateRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, )]
[;, validateIsSynthetic, (, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateCodeRoot, (, n, ., getFirstChild, (, )]
[,, n, ), ;, validateIsSynthetic, (, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateCodeRoot, (, n, .]
[., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateCodeRoot, (]
[), ;, validateIsSynthetic, (, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateCodeRoot, (, n, ., getFirstChild, (]
[;, validateChildCount, (, n, ,, 2, ), ;, validateCodeRoot, (, n, ., getFirstChild, (, ), ), ;, validateCodeRoot, (, n]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateCodeRoot, (, n, ., getFirstChild, (, ), ), ;, validateCodeRoot, (]
[;, validateCodeRoot, (, n, ., getFirstChild, (, ), ), ;, validateCodeRoot, (, n, ., getLastChild, (, ), ), ;, }]
[,, 2, ), ;, validateCodeRoot, (, n, ., getFirstChild, (, ), ), ;, validateCodeRoot, (, n, ., getLastChild, (, )]
[), ;, validateCodeRoot, (, n, ., getFirstChild, (, ), ), ;, validateCodeRoot, (, n, ., getLastChild, (, ), ), ;]
[;, validateCodeRoot, (, n, ., getLastChild, (, ), ), ;, }, public, void, validateCodeRoot, (, Node, n, ), {, validateNodeType]
[), ;, validateCodeRoot, (, n, ., getLastChild, (, ), ), ;, }, public, void, validateCodeRoot, (, Node, n, ), {]
[., getFirstChild, (, ), ), ;, validateCodeRoot, (, n, ., getLastChild, (, ), ), ;, }, public, void, validateCodeRoot, (]
[;, }, public, void, validateCodeRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic]
[), ;, }, public, void, validateCodeRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;]
[., getLastChild, (, ), ), ;, }, public, void, validateCodeRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK]
[;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (]
[), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateScript, (, c, ), ;, }]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateScript, (]
[;, c, =, c, ., getNext, (, ), ), {, validateScript, (, c, ), ;, }, }, public, void, validateScript]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateScript, (, c, ), ;, }, }, public]
[;, c, =, c, ., getNext, (, ), ), {, validateScript, (, c, ), ;, }, }, public, void, validateScript]
[=, c, ., getNext, (, ), ), {, validateScript, (, c, ), ;, }, }, public, void, validateScript, (, Node]
[), {, validateScript, (, c, ), ;, }, }, public, void, validateScript, (, Node, n, ), {, validateNodeType, (, Token]
[., getNext, (, ), ), {, validateScript, (, c, ), ;, }, }, public, void, validateScript, (, Node, n, )]
[;, }, }, public, void, validateScript, (, Node, n, ), {, validateNodeType, (, Token, ., SCRIPT, ,, n, ), ;]
[), ;, }, }, public, void, validateScript, (, Node, n, ), {, validateNodeType, (, Token, ., SCRIPT, ,, n, )]
[;, validateHasSourceName, (, n, ), ;, validateHasInputId, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (]
[,, n, ), ;, validateHasSourceName, (, n, ), ;, validateHasInputId, (, n, ), ;, for, (, Node, c, =, n]
[., SCRIPT, ,, n, ), ;, validateHasSourceName, (, n, ), ;, validateHasInputId, (, n, ), ;, for, (, Node, c]
[), ;, validateHasSourceName, (, n, ), ;, validateHasInputId, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild]
[;, validateHasInputId, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[), ;, validateHasInputId, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (]
[;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, public, void, validateStatement]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, public]
[;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, public, void, validateStatement]
[=, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, public, void, validateStatement, (, Node]
[), {, validateStatement, (, c, ), ;, }, }, public, void, validateStatement, (, Node, n, ), {, switch, (, n]
[., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, public, void, validateStatement, (, Node, n, )]
[;, }, }, public, void, validateStatement, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {]
[), ;, }, }, public, void, validateStatement, (, Node, n, ), {, switch, (, n, ., getType, (, ), )]
[), {, case, Token, ., LABEL, :, validateLabel, (, n, ), ;, return, ;, case, Token, ., BLOCK, :, validateBlock]
[., getType, (, ), ), {, case, Token, ., LABEL, :, validateLabel, (, n, ), ;, return, ;, case, Token]
[:, validateLabel, (, n, ), ;, return, ;, case, Token, ., BLOCK, :, validateBlock, (, n, ), ;, return, ;]
[., LABEL, :, validateLabel, (, n, ), ;, return, ;, case, Token, ., BLOCK, :, validateBlock, (, n, ), ;]
[;, return, ;, case, Token, ., BLOCK, :, validateBlock, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :]
[), ;, return, ;, case, Token, ., BLOCK, :, validateBlock, (, n, ), ;, return, ;, case, Token, ., FUNCTION]
[:, validateBlock, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionStatement, (, n, ), ;, return, ;]
[., BLOCK, :, validateBlock, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionStatement, (, n, ), ;]
[;, return, ;, case, Token, ., FUNCTION, :, validateFunctionStatement, (, n, ), ;, return, ;, case, Token, ., WITH, :]
[), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionStatement, (, n, ), ;, return, ;, case, Token, ., WITH]
[:, validateFunctionStatement, (, n, ), ;, return, ;, case, Token, ., WITH, :, validateWith, (, n, ), ;, return, ;]
[., FUNCTION, :, validateFunctionStatement, (, n, ), ;, return, ;, case, Token, ., WITH, :, validateWith, (, n, ), ;]
[;, return, ;, case, Token, ., WITH, :, validateWith, (, n, ), ;, return, ;, case, Token, ., FOR, :]
[), ;, return, ;, case, Token, ., WITH, :, validateWith, (, n, ), ;, return, ;, case, Token, ., FOR]
[:, validateWith, (, n, ), ;, return, ;, case, Token, ., FOR, :, validateFor, (, n, ), ;, return, ;]
[., WITH, :, validateWith, (, n, ), ;, return, ;, case, Token, ., FOR, :, validateFor, (, n, ), ;]
[;, return, ;, case, Token, ., FOR, :, validateFor, (, n, ), ;, return, ;, case, Token, ., WHILE, :]
[), ;, return, ;, case, Token, ., FOR, :, validateFor, (, n, ), ;, return, ;, case, Token, ., WHILE]
[:, validateFor, (, n, ), ;, return, ;, case, Token, ., WHILE, :, validateWhile, (, n, ), ;, return, ;]
[., FOR, :, validateFor, (, n, ), ;, return, ;, case, Token, ., WHILE, :, validateWhile, (, n, ), ;]
[;, return, ;, case, Token, ., WHILE, :, validateWhile, (, n, ), ;, return, ;, case, Token, ., DO, :]
[), ;, return, ;, case, Token, ., WHILE, :, validateWhile, (, n, ), ;, return, ;, case, Token, ., DO]
[:, validateWhile, (, n, ), ;, return, ;, case, Token, ., DO, :, validateDo, (, n, ), ;, return, ;]
[., WHILE, :, validateWhile, (, n, ), ;, return, ;, case, Token, ., DO, :, validateDo, (, n, ), ;]
[;, return, ;, case, Token, ., DO, :, validateDo, (, n, ), ;, return, ;, case, Token, ., SWITCH, :]
[), ;, return, ;, case, Token, ., DO, :, validateDo, (, n, ), ;, return, ;, case, Token, ., SWITCH]
[:, validateDo, (, n, ), ;, return, ;, case, Token, ., SWITCH, :, validateSwitch, (, n, ), ;, return, ;]
[., DO, :, validateDo, (, n, ), ;, return, ;, case, Token, ., SWITCH, :, validateSwitch, (, n, ), ;]
[;, return, ;, case, Token, ., SWITCH, :, validateSwitch, (, n, ), ;, return, ;, case, Token, ., IF, :]
[), ;, return, ;, case, Token, ., SWITCH, :, validateSwitch, (, n, ), ;, return, ;, case, Token, ., IF]
[:, validateSwitch, (, n, ), ;, return, ;, case, Token, ., IF, :, validateIf, (, n, ), ;, return, ;]
[., SWITCH, :, validateSwitch, (, n, ), ;, return, ;, case, Token, ., IF, :, validateIf, (, n, ), ;]
[;, return, ;, case, Token, ., IF, :, validateIf, (, n, ), ;, return, ;, case, Token, ., VAR, :]
[), ;, return, ;, case, Token, ., IF, :, validateIf, (, n, ), ;, return, ;, case, Token, ., VAR]
[:, validateIf, (, n, ), ;, return, ;, case, Token, ., VAR, :, validateVar, (, n, ), ;, return, ;]
[., IF, :, validateIf, (, n, ), ;, return, ;, case, Token, ., VAR, :, validateVar, (, n, ), ;]
[;, return, ;, case, Token, ., VAR, :, validateVar, (, n, ), ;, return, ;, case, Token, ., EXPR_RESULT, :]
[), ;, return, ;, case, Token, ., VAR, :, validateVar, (, n, ), ;, return, ;, case, Token, ., EXPR_RESULT]
[:, validateVar, (, n, ), ;, return, ;, case, Token, ., EXPR_RESULT, :, validateExprStmt, (, n, ), ;, return, ;]
[., VAR, :, validateVar, (, n, ), ;, return, ;, case, Token, ., EXPR_RESULT, :, validateExprStmt, (, n, ), ;]
[;, return, ;, case, Token, ., EXPR_RESULT, :, validateExprStmt, (, n, ), ;, return, ;, case, Token, ., RETURN, :]
[), ;, return, ;, case, Token, ., EXPR_RESULT, :, validateExprStmt, (, n, ), ;, return, ;, case, Token, ., RETURN]
[:, validateExprStmt, (, n, ), ;, return, ;, case, Token, ., RETURN, :, validateReturn, (, n, ), ;, return, ;]
[., EXPR_RESULT, :, validateExprStmt, (, n, ), ;, return, ;, case, Token, ., RETURN, :, validateReturn, (, n, ), ;]
[;, return, ;, case, Token, ., RETURN, :, validateReturn, (, n, ), ;, return, ;, case, Token, ., THROW, :]
[), ;, return, ;, case, Token, ., RETURN, :, validateReturn, (, n, ), ;, return, ;, case, Token, ., THROW]
[:, validateReturn, (, n, ), ;, return, ;, case, Token, ., THROW, :, validateThrow, (, n, ), ;, return, ;]
[., RETURN, :, validateReturn, (, n, ), ;, return, ;, case, Token, ., THROW, :, validateThrow, (, n, ), ;]
[;, return, ;, case, Token, ., THROW, :, validateThrow, (, n, ), ;, return, ;, case, Token, ., TRY, :]
[), ;, return, ;, case, Token, ., THROW, :, validateThrow, (, n, ), ;, return, ;, case, Token, ., TRY]
[:, validateThrow, (, n, ), ;, return, ;, case, Token, ., TRY, :, validateTry, (, n, ), ;, return, ;]
[., THROW, :, validateThrow, (, n, ), ;, return, ;, case, Token, ., TRY, :, validateTry, (, n, ), ;]
[;, return, ;, case, Token, ., TRY, :, validateTry, (, n, ), ;, return, ;, case, Token, ., BREAK, :]
[), ;, return, ;, case, Token, ., TRY, :, validateTry, (, n, ), ;, return, ;, case, Token, ., BREAK]
[:, validateTry, (, n, ), ;, return, ;, case, Token, ., BREAK, :, validateBreak, (, n, ), ;, return, ;]
[., TRY, :, validateTry, (, n, ), ;, return, ;, case, Token, ., BREAK, :, validateBreak, (, n, ), ;]
[;, return, ;, case, Token, ., BREAK, :, validateBreak, (, n, ), ;, return, ;, case, Token, ., CONTINUE, :]
[), ;, return, ;, case, Token, ., BREAK, :, validateBreak, (, n, ), ;, return, ;, case, Token, ., CONTINUE]
[:, validateBreak, (, n, ), ;, return, ;, case, Token, ., CONTINUE, :, validateContinue, (, n, ), ;, return, ;]
[., BREAK, :, validateBreak, (, n, ), ;, return, ;, case, Token, ., CONTINUE, :, validateContinue, (, n, ), ;]
[;, return, ;, case, Token, ., CONTINUE, :, validateContinue, (, n, ), ;, return, ;, case, Token, ., EMPTY, :]
[), ;, return, ;, case, Token, ., CONTINUE, :, validateContinue, (, n, ), ;, return, ;, case, Token, ., EMPTY]
[:, validateContinue, (, n, ), ;, return, ;, case, Token, ., EMPTY, :, validateChildless, (, n, ), ;, return, ;]
[., CONTINUE, :, validateContinue, (, n, ), ;, return, ;, case, Token, ., EMPTY, :, validateChildless, (, n, ), ;]
[;, return, ;, case, Token, ., EMPTY, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DEBUGGER, :]
[), ;, return, ;, case, Token, ., EMPTY, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DEBUGGER]
[:, validateChildless, (, n, ), ;, return, ;, case, Token, ., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;]
[., EMPTY, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DEBUGGER, :, validateChildless, (, n, ), ;]
[;, return, ;, case, Token, ., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;, default, :, violation, (, "Expected statement but was "]
[), ;, return, ;, case, Token, ., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;, default, :, violation, (]
[:, validateChildless, (, n, ), ;, return, ;, default, :, violation, (, "Expected statement but was ", +, Token, ., name, (, n, .]
[., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;, default, :, violation, (, "Expected statement but was ", +, Token, ., name, (]
[;, return, ;, default, :, violation, (, "Expected statement but was ", +, Token, ., name, (, n, ., getType, (, ), ), +]
[), ;, return, ;, default, :, violation, (, "Expected statement but was ", +, Token, ., name, (, n, ., getType, (, ), )]
[;, }, }, public, void, validateExpression, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {]
[,, n, ), ;, }, }, public, void, validateExpression, (, Node, n, ), {, switch, (, n, ., getType, (]
[+, ".", ,, n, ), ;, }, }, public, void, validateExpression, (, Node, n, ), {, switch, (, n, .]
[+, Token, ., name, (, n, ., getType, (, ), ), +, ".", ,, n, ), ;, }, }, public]
[+, ".", ,, n, ), ;, }, }, public, void, validateExpression, (, Node, n, ), {, switch, (, n, .]
[., name, (, n, ., getType, (, ), ), +, ".", ,, n, ), ;, }, }, public, void, validateExpression]
[), +, ".", ,, n, ), ;, }, }, public, void, validateExpression, (, Node, n, ), {, switch, (, n]
[., getType, (, ), ), +, ".", ,, n, ), ;, }, }, public, void, validateExpression, (, Node, n, )]
[,, n, ), ;, }, }, public, void, validateExpression, (, Node, n, ), {, switch, (, n, ., getType, (]
[), ;, }, }, public, void, validateExpression, (, Node, n, ), {, switch, (, n, ., getType, (, ), )]
[), {, case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS]
[:, case, Token, ., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, validateChildless, (, n, )]
[., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, validateChildless, (]
[:, case, Token, ., THIS, :, case, Token, ., TRUE, :, validateChildless, (, n, ), ;, return, ;, case, Token]
[., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, validateChildless, (, n, ), ;, return, ;]
[:, case, Token, ., TRUE, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DELPROP, :, case, Token]
[., THIS, :, case, Token, ., TRUE, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DELPROP, :]
[:, validateChildless, (, n, ), ;, return, ;, case, Token, ., DELPROP, :, case, Token, ., POS, :, case, Token]
[., TRUE, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DELPROP, :, case, Token, ., POS, :]
[;, return, ;, case, Token, ., DELPROP, :, case, Token, ., POS, :, case, Token, ., NEG, :, case, Token]
[), ;, return, ;, case, Token, ., DELPROP, :, case, Token, ., POS, :, case, Token, ., NEG, :, case]
[:, case, Token, ., POS, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., INC]
[., DELPROP, :, case, Token, ., POS, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token]
[:, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., INC, :, case, Token, ., DEC]
[., POS, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., INC, :, case, Token]
[:, case, Token, ., NOT, :, case, Token, ., INC, :, case, Token, ., DEC, :, case, Token, ., TYPEOF]
[., NEG, :, case, Token, ., NOT, :, case, Token, ., INC, :, case, Token, ., DEC, :, case, Token]
[:, case, Token, ., INC, :, case, Token, ., DEC, :, case, Token, ., TYPEOF, :, case, Token, ., VOID]
[., NOT, :, case, Token, ., INC, :, case, Token, ., DEC, :, case, Token, ., TYPEOF, :, case, Token]
[:, case, Token, ., DEC, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., BITNOT]
[., INC, :, case, Token, ., DEC, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token]
[:, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., BITNOT, :, case, Token, ., CAST]
[., DEC, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., BITNOT, :, case, Token]
[:, case, Token, ., VOID, :, case, Token, ., BITNOT, :, case, Token, ., CAST, :, validateUnaryOp, (, n, )]
[., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., BITNOT, :, case, Token, ., CAST, :, validateUnaryOp, (]
[:, case, Token, ., BITNOT, :, case, Token, ., CAST, :, validateUnaryOp, (, n, ), ;, return, ;, case, Token]
[., VOID, :, case, Token, ., BITNOT, :, case, Token, ., CAST, :, validateUnaryOp, (, n, ), ;, return, ;]
[:, case, Token, ., CAST, :, validateUnaryOp, (, n, ), ;, return, ;, case, Token, ., COMMA, :, case, Token]
[., BITNOT, :, case, Token, ., CAST, :, validateUnaryOp, (, n, ), ;, return, ;, case, Token, ., COMMA, :]
[:, validateUnaryOp, (, n, ), ;, return, ;, case, Token, ., COMMA, :, case, Token, ., OR, :, case, Token]
[., CAST, :, validateUnaryOp, (, n, ), ;, return, ;, case, Token, ., COMMA, :, case, Token, ., OR, :]
[;, return, ;, case, Token, ., COMMA, :, case, Token, ., OR, :, case, Token, ., AND, :, case, Token]
[), ;, return, ;, case, Token, ., COMMA, :, case, Token, ., OR, :, case, Token, ., AND, :, case]
[:, case, Token, ., OR, :, case, Token, ., AND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR]
[., COMMA, :, case, Token, ., OR, :, case, Token, ., AND, :, case, Token, ., BITOR, :, case, Token]
[:, case, Token, ., AND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND]
[., OR, :, case, Token, ., AND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token]
[:, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., EQ]
[., AND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token]
[:, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., EQ, :, case, Token, ., NE]
[., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., EQ, :, case, Token]
[:, case, Token, ., BITAND, :, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ]
[., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token]
[:, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE]
[., BITAND, :, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token]
[:, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., LT]
[., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token]
[:, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., LT, :, case, Token, ., GT]
[., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., LT, :, case, Token]
[:, case, Token, ., SHNE, :, case, Token, ., LT, :, case, Token, ., GT, :, case, Token, ., LE]
[., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., LT, :, case, Token, ., GT, :, case, Token]
[:, case, Token, ., LT, :, case, Token, ., GT, :, case, Token, ., LE, :, case, Token, ., GE]
[., SHNE, :, case, Token, ., LT, :, case, Token, ., GT, :, case, Token, ., LE, :, case, Token]
[:, case, Token, ., GT, :, case, Token, ., LE, :, case, Token, ., GE, :, case, Token, ., INSTANCEOF]
[., LT, :, case, Token, ., GT, :, case, Token, ., LE, :, case, Token, ., GE, :, case, Token]
[:, case, Token, ., LE, :, case, Token, ., GE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN]
[., GT, :, case, Token, ., LE, :, case, Token, ., GE, :, case, Token, ., INSTANCEOF, :, case, Token]
[:, case, Token, ., GE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, case, Token, ., LSH]
[., LE, :, case, Token, ., GE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, case, Token]
[:, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, case, Token, ., LSH, :, case, Token, ., RSH]
[., GE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, case, Token, ., LSH, :, case, Token]
[:, case, Token, ., IN, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH]
[., INSTANCEOF, :, case, Token, ., IN, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token]
[:, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., SUB]
[., IN, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token]
[:, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., SUB, :, case, Token, ., ADD]
[., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., SUB, :, case, Token]
[:, case, Token, ., URSH, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL]
[., RSH, :, case, Token, ., URSH, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token]
[:, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, case, Token, ., MOD]
[., URSH, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, case, Token]
[:, case, Token, ., ADD, :, case, Token, ., MUL, :, case, Token, ., MOD, :, case, Token, ., DIV]
[., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, case, Token, ., MOD, :, case, Token]
[:, case, Token, ., MUL, :, case, Token, ., MOD, :, case, Token, ., DIV, :, validateBinaryOp, (, n, )]
[., ADD, :, case, Token, ., MUL, :, case, Token, ., MOD, :, case, Token, ., DIV, :, validateBinaryOp, (]
[:, case, Token, ., MOD, :, case, Token, ., DIV, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token]
[., MUL, :, case, Token, ., MOD, :, case, Token, ., DIV, :, validateBinaryOp, (, n, ), ;, return, ;]
[:, case, Token, ., DIV, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., ASSIGN, :, case, Token]
[., MOD, :, case, Token, ., DIV, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., ASSIGN, :]
[:, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token]
[., DIV, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :]
[;, return, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token]
[), ;, return, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[:, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH]
[., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token]
[:, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH]
[., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token]
[:, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH]
[., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token]
[:, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD]
[., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token]
[:, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB]
[., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token]
[:, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL]
[., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token]
[:, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV]
[., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token]
[:, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD]
[., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, validateAssignmentExpression, (, n, )]
[., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, validateAssignmentExpression, (]
[:, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, validateAssignmentExpression, (, n, ), ;, return, ;, case, Token]
[., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, validateAssignmentExpression, (, n, ), ;, return, ;]
[:, case, Token, ., ASSIGN_MOD, :, validateAssignmentExpression, (, n, ), ;, return, ;, case, Token, ., HOOK, :, validateTrinaryOp, (]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, validateAssignmentExpression, (, n, ), ;, return, ;, case, Token, ., HOOK, :]
[:, validateAssignmentExpression, (, n, ), ;, return, ;, case, Token, ., HOOK, :, validateTrinaryOp, (, n, ), ;, return, ;]
[., ASSIGN_MOD, :, validateAssignmentExpression, (, n, ), ;, return, ;, case, Token, ., HOOK, :, validateTrinaryOp, (, n, ), ;]
[;, return, ;, case, Token, ., HOOK, :, validateTrinaryOp, (, n, ), ;, return, ;, case, Token, ., STRING, :]
[), ;, return, ;, case, Token, ., HOOK, :, validateTrinaryOp, (, n, ), ;, return, ;, case, Token, ., STRING]
[:, validateTrinaryOp, (, n, ), ;, return, ;, case, Token, ., STRING, :, validateString, (, n, ), ;, return, ;]
[., HOOK, :, validateTrinaryOp, (, n, ), ;, return, ;, case, Token, ., STRING, :, validateString, (, n, ), ;]
[;, return, ;, case, Token, ., STRING, :, validateString, (, n, ), ;, return, ;, case, Token, ., NUMBER, :]
[), ;, return, ;, case, Token, ., STRING, :, validateString, (, n, ), ;, return, ;, case, Token, ., NUMBER]
[:, validateString, (, n, ), ;, return, ;, case, Token, ., NUMBER, :, validateNumber, (, n, ), ;, return, ;]
[., STRING, :, validateString, (, n, ), ;, return, ;, case, Token, ., NUMBER, :, validateNumber, (, n, ), ;]
[;, return, ;, case, Token, ., NUMBER, :, validateNumber, (, n, ), ;, return, ;, case, Token, ., NAME, :]
[), ;, return, ;, case, Token, ., NUMBER, :, validateNumber, (, n, ), ;, return, ;, case, Token, ., NAME]
[:, validateNumber, (, n, ), ;, return, ;, case, Token, ., NAME, :, validateName, (, n, ), ;, return, ;]
[., NUMBER, :, validateNumber, (, n, ), ;, return, ;, case, Token, ., NAME, :, validateName, (, n, ), ;]
[;, return, ;, case, Token, ., NAME, :, validateName, (, n, ), ;, return, ;, case, Token, ., GETELEM, :]
[), ;, return, ;, case, Token, ., NAME, :, validateName, (, n, ), ;, return, ;, case, Token, ., GETELEM]
[:, validateName, (, n, ), ;, return, ;, case, Token, ., GETELEM, :, validateBinaryOp, (, n, ), ;, return, ;]
[., NAME, :, validateName, (, n, ), ;, return, ;, case, Token, ., GETELEM, :, validateBinaryOp, (, n, ), ;]
[;, return, ;, case, Token, ., GETELEM, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., GETPROP, :]
[), ;, return, ;, case, Token, ., GETELEM, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., GETPROP]
[:, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., GETPROP, :, validateGetProp, (, n, ), ;, return, ;]
[., GETELEM, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., GETPROP, :, validateGetProp, (, n, ), ;]
[;, return, ;, case, Token, ., GETPROP, :, validateGetProp, (, n, ), ;, return, ;, case, Token, ., ARRAYLIT, :]
[), ;, return, ;, case, Token, ., GETPROP, :, validateGetProp, (, n, ), ;, return, ;, case, Token, ., ARRAYLIT]
[:, validateGetProp, (, n, ), ;, return, ;, case, Token, ., ARRAYLIT, :, validateArrayLit, (, n, ), ;, return, ;]
[., GETPROP, :, validateGetProp, (, n, ), ;, return, ;, case, Token, ., ARRAYLIT, :, validateArrayLit, (, n, ), ;]
[;, return, ;, case, Token, ., ARRAYLIT, :, validateArrayLit, (, n, ), ;, return, ;, case, Token, ., OBJECTLIT, :]
[), ;, return, ;, case, Token, ., ARRAYLIT, :, validateArrayLit, (, n, ), ;, return, ;, case, Token, ., OBJECTLIT]
[:, validateArrayLit, (, n, ), ;, return, ;, case, Token, ., OBJECTLIT, :, validateObjectLit, (, n, ), ;, return, ;]
[., ARRAYLIT, :, validateArrayLit, (, n, ), ;, return, ;, case, Token, ., OBJECTLIT, :, validateObjectLit, (, n, ), ;]
[;, return, ;, case, Token, ., OBJECTLIT, :, validateObjectLit, (, n, ), ;, return, ;, case, Token, ., REGEXP, :]
[), ;, return, ;, case, Token, ., OBJECTLIT, :, validateObjectLit, (, n, ), ;, return, ;, case, Token, ., REGEXP]
[:, validateObjectLit, (, n, ), ;, return, ;, case, Token, ., REGEXP, :, validateRegExpLit, (, n, ), ;, return, ;]
[., OBJECTLIT, :, validateObjectLit, (, n, ), ;, return, ;, case, Token, ., REGEXP, :, validateRegExpLit, (, n, ), ;]
[;, return, ;, case, Token, ., REGEXP, :, validateRegExpLit, (, n, ), ;, return, ;, case, Token, ., CALL, :]
[), ;, return, ;, case, Token, ., REGEXP, :, validateRegExpLit, (, n, ), ;, return, ;, case, Token, ., CALL]
[:, validateRegExpLit, (, n, ), ;, return, ;, case, Token, ., CALL, :, validateCall, (, n, ), ;, return, ;]
[., REGEXP, :, validateRegExpLit, (, n, ), ;, return, ;, case, Token, ., CALL, :, validateCall, (, n, ), ;]
[;, return, ;, case, Token, ., CALL, :, validateCall, (, n, ), ;, return, ;, case, Token, ., NEW, :]
[), ;, return, ;, case, Token, ., CALL, :, validateCall, (, n, ), ;, return, ;, case, Token, ., NEW]
[:, validateCall, (, n, ), ;, return, ;, case, Token, ., NEW, :, validateNew, (, n, ), ;, return, ;]
[., CALL, :, validateCall, (, n, ), ;, return, ;, case, Token, ., NEW, :, validateNew, (, n, ), ;]
[;, return, ;, case, Token, ., NEW, :, validateNew, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :]
[), ;, return, ;, case, Token, ., NEW, :, validateNew, (, n, ), ;, return, ;, case, Token, ., FUNCTION]
[:, validateNew, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionExpression, (, n, ), ;, return, ;]
[., NEW, :, validateNew, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionExpression, (, n, ), ;]
[;, return, ;, case, Token, ., FUNCTION, :, validateFunctionExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected expression but was "]
[), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionExpression, (, n, ), ;, return, ;, default, :, violation, (]
[:, validateFunctionExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected expression but was ", +, Token, ., name, (, n, .]
[., FUNCTION, :, validateFunctionExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected expression but was ", +, Token, ., name, (]
[;, return, ;, default, :, violation, (, "Expected expression but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,]
[), ;, return, ;, default, :, violation, (, "Expected expression but was ", +, Token, ., name, (, n, ., getType, (, ), )]
[;, }, }, private, void, validateBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;]
[,, n, ), ;, }, }, private, void, validateBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,]
[+, Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateBlock]
[,, n, ), ;, }, }, private, void, validateBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,]
[., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateBlock, (, Node]
[), ,, n, ), ;, }, }, private, void, validateBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK]
[., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateBlock, (, Node, n, ), {, validateNodeType]
[), ;, }, }, private, void, validateBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, )]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c]
[., BLOCK, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (]
[;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateSyntheticBlock]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, private]
[;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateSyntheticBlock]
[=, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateSyntheticBlock, (, Node]
[), {, validateStatement, (, c, ), ;, }, }, private, void, validateSyntheticBlock, (, Node, n, ), {, validateNodeType, (, Token]
[., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateSyntheticBlock, (, Node, n, )]
[;, }, }, private, void, validateSyntheticBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;]
[), ;, }, }, private, void, validateSyntheticBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, )]
[;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (]
[), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (]
[;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateIsSynthetic]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, private]
[;, c, =, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateIsSynthetic]
[=, c, ., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateIsSynthetic, (, Node]
[), {, validateStatement, (, c, ), ;, }, }, private, void, validateIsSynthetic, (, Node, n, ), {, if, (, !]
[., getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateIsSynthetic, (, Node, n, )]
[;, }, }, private, void, validateIsSynthetic, (, Node, n, ), {, if, (, !, n, ., getBooleanProp, (, Node, .]
[), ;, }, }, private, void, validateIsSynthetic, (, Node, n, ), {, if, (, !, n, ., getBooleanProp, (, Node]
[), {, violation, (, "Missing 'synthetic block' annotation.", ,, n, ), ;, }, }, private, void, validateHasSourceName, (, Node, n, ), {, String]
[), {, violation, (, "Missing 'synthetic block' annotation.", ,, n, ), ;, }, }, private, void, validateHasSourceName, (, Node, n, ), {, String]
[., getBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ), ), {, violation, (, "Missing 'synthetic block' annotation.", ,, n, ), ;, }, }, private, void]
[), ), {, violation, (, "Missing 'synthetic block' annotation.", ,, n, ), ;, }, }, private, void, validateHasSourceName, (, Node, n, ), {]
[., SYNTHETIC_BLOCK_PROP, ), ), {, violation, (, "Missing 'synthetic block' annotation.", ,, n, ), ;, }, }, private, void, validateHasSourceName, (, Node, n]
[;, }, }, private, void, validateHasSourceName, (, Node, n, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;]
[,, n, ), ;, }, }, private, void, validateHasSourceName, (, Node, n, ), {, String, sourceName, =, n, ., getSourceFileName]
[), ;, }, }, private, void, validateHasSourceName, (, Node, n, ), {, String, sourceName, =, n, ., getSourceFileName, (, )]
[;, if, (, sourceName, ==, null, ||, sourceName, ., isEmpty, (, ), ), {, violation, (, "Missing 'source name' annotation.", ,, n, )]
[., getSourceFileName, (, ), ;, if, (, sourceName, ==, null, ||, sourceName, ., isEmpty, (, ), ), {, violation, (]
[), {, violation, (, "Missing 'source name' annotation.", ,, n, ), ;, }, }, private, void, validateHasInputId, (, Node, n, ), {, InputId]
[||, sourceName, ., isEmpty, (, ), ), {, violation, (, "Missing 'source name' annotation.", ,, n, ), ;, }, }, private, void, validateHasInputId]
[==, null, ||, sourceName, ., isEmpty, (, ), ), {, violation, (, "Missing 'source name' annotation.", ,, n, ), ;, }, }, private]
[||, sourceName, ., isEmpty, (, ), ), {, violation, (, "Missing 'source name' annotation.", ,, n, ), ;, }, }, private, void, validateHasInputId]
[), {, violation, (, "Missing 'source name' annotation.", ,, n, ), ;, }, }, private, void, validateHasInputId, (, Node, n, ), {, InputId]
[., isEmpty, (, ), ), {, violation, (, "Missing 'source name' annotation.", ,, n, ), ;, }, }, private, void, validateHasInputId, (, Node]
[;, }, }, private, void, validateHasInputId, (, Node, n, ), {, InputId, inputId, =, n, ., getInputId, (, ), ;]
[,, n, ), ;, }, }, private, void, validateHasInputId, (, Node, n, ), {, InputId, inputId, =, n, ., getInputId]
[), ;, }, }, private, void, validateHasInputId, (, Node, n, ), {, InputId, inputId, =, n, ., getInputId, (, )]
[;, if, (, inputId, ==, null, ), {, violation, (, "Missing 'input id' annotation.", ,, n, ), ;, }, }, private, void, validateLabel]
[., getInputId, (, ), ;, if, (, inputId, ==, null, ), {, violation, (, "Missing 'input id' annotation.", ,, n, ), ;, }]
[), {, violation, (, "Missing 'input id' annotation.", ,, n, ), ;, }, }, private, void, validateLabel, (, Node, n, ), {, validateNodeType]
[==, null, ), {, violation, (, "Missing 'input id' annotation.", ,, n, ), ;, }, }, private, void, validateLabel, (, Node, n, )]
[), {, violation, (, "Missing 'input id' annotation.", ,, n, ), ;, }, }, private, void, validateLabel, (, Node, n, ), {, validateNodeType]
[;, }, }, private, void, validateLabel, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL, ,, n, ), ;]
[,, n, ), ;, }, }, private, void, validateLabel, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL, ,]
[), ;, }, }, private, void, validateLabel, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL, ,, n, )]
[;, validateChildCount, (, n, ,, 2, ), ;, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, validateStatement, (, n]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateLabelName, (, n, ., getFirstChild, (, ), ), ;]
[., LABEL, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateLabelName, (, n, ., getFirstChild, (, )]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, validateStatement, (]
[;, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, validateStatement, (, n, ., getLastChild, (, ), ), ;, }]
[,, 2, ), ;, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, validateStatement, (, n, ., getLastChild, (, )]
[), ;, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, validateStatement, (, n, ., getLastChild, (, ), ), ;]
[;, validateStatement, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateLabelName, (, Node, n, ), {, validateNodeType]
[), ;, validateStatement, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateLabelName, (, Node, n, ), {]
[., getFirstChild, (, ), ), ;, validateStatement, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateLabelName, (]
[;, }, private, void, validateLabelName, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL_NAME, ,, n, ), ;, validateNonEmptyString]
[), ;, }, private, void, validateLabelName, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL_NAME, ,, n, ), ;]
[., getLastChild, (, ), ), ;, }, private, void, validateLabelName, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL_NAME]
[;, validateNonEmptyString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateNonEmptyString, (, Node, n]
[,, n, ), ;, validateNonEmptyString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateNonEmptyString]
[., LABEL_NAME, ,, n, ), ;, validateNonEmptyString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private]
[), ;, validateNonEmptyString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateNonEmptyString, (, Node]
[;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateNonEmptyString, (, Node, n, ), {, validateNonNullString, (, n]
[), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateNonEmptyString, (, Node, n, ), {, validateNonNullString, (]
[;, }, private, void, validateNonEmptyString, (, Node, n, ), {, validateNonNullString, (, n, ), ;, if, (, n, ., getString]
[,, 0, ), ;, }, private, void, validateNonEmptyString, (, Node, n, ), {, validateNonNullString, (, n, ), ;, if, (]
[), ;, }, private, void, validateNonEmptyString, (, Node, n, ), {, validateNonNullString, (, n, ), ;, if, (, n, .]
[;, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected non-empty string.", ,, n, )]
[), ;, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected non-empty string.", ,, n]
[), {, violation, (, "Expected non-empty string.", ,, n, ), ;, }, }, private, void, validateNonNullString, (, Node, n, ), {, if]
[., isEmpty, (, ), ), {, violation, (, "Expected non-empty string.", ,, n, ), ;, }, }, private, void, validateNonNullString, (, Node]
[., getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected non-empty string.", ,, n, ), ;, }, }, private]
[;, }, }, private, void, validateNonNullString, (, Node, n, ), {, if, (, n, ., getString, (, ), ==, null]
[,, n, ), ;, }, }, private, void, validateNonNullString, (, Node, n, ), {, if, (, n, ., getString, (]
[), ;, }, }, private, void, validateNonNullString, (, Node, n, ), {, if, (, n, ., getString, (, ), ==]
[), {, violation, (, "Expected non-null string.", ,, n, ), ;, }, }, private, void, validateName, (, Node, n, ), {, validateNodeType]
[==, null, ), {, violation, (, "Expected non-null string.", ,, n, ), ;, }, }, private, void, validateName, (, Node, n, )]
[., getString, (, ), ==, null, ), {, violation, (, "Expected non-null string.", ,, n, ), ;, }, }, private, void, validateName]
[), {, violation, (, "Expected non-null string.", ,, n, ), ;, }, }, private, void, validateName, (, Node, n, ), {, validateNodeType]
[;, }, }, private, void, validateName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;]
[,, n, ), ;, }, }, private, void, validateName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,]
[), ;, }, }, private, void, validateName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, )]
[;, validateNonEmptyString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateOptionalName, (, Node, n]
[,, n, ), ;, validateNonEmptyString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateOptionalName]
[., NAME, ,, n, ), ;, validateNonEmptyString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private]
[), ;, validateNonEmptyString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateOptionalName, (, Node]
[;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateOptionalName, (, Node, n, ), {, validateNodeType, (, Token]
[), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateOptionalName, (, Node, n, ), {, validateNodeType, (]
[;, }, private, void, validateOptionalName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;, validateNonNullString]
[,, 0, ), ;, }, private, void, validateOptionalName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n]
[), ;, }, private, void, validateOptionalName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;]
[;, validateNonNullString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateFunctionStatement, (, Node, n]
[,, n, ), ;, validateNonNullString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateFunctionStatement]
[., NAME, ,, n, ), ;, validateNonNullString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private]
[), ;, validateNonNullString, (, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateFunctionStatement, (, Node]
[;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateFunctionStatement, (, Node, n, ), {, validateNodeType, (, Token]
[), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateFunctionStatement, (, Node, n, ), {, validateNodeType, (]
[;, }, private, void, validateFunctionStatement, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount]
[,, 0, ), ;, }, private, void, validateFunctionStatement, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n]
[), ;, }, private, void, validateFunctionStatement, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;]
[;, validateChildCount, (, n, ,, 3, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n]
[,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;]
[., FUNCTION, ,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;, validateName, (, n, ., getFirstChild, (, )]
[), ;, validateChildCount, (, n, ,, 3, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (]
[;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;]
[,, 3, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1]
[), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), )]
[;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;]
[), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), )]
[., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateBlock, (, n, .]
[;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateFunctionExpression, (, Node, n, ), {, validateNodeType]
[), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateFunctionExpression, (, Node, n, ), {]
[., getChildAtIndex, (, 1, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateFunctionExpression]
[), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateFunctionExpression, (, Node, n, )]
[;, }, private, void, validateFunctionExpression, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount]
[), ;, }, private, void, validateFunctionExpression, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;]
[., getLastChild, (, ), ), ;, }, private, void, validateFunctionExpression, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION]
[;, validateChildCount, (, n, ,, 3, ), ;, validateOptionalName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n]
[,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;, validateOptionalName, (, n, ., getFirstChild, (, ), ), ;]
[., FUNCTION, ,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;, validateOptionalName, (, n, ., getFirstChild, (, )]
[), ;, validateChildCount, (, n, ,, 3, ), ;, validateOptionalName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (]
[;, validateOptionalName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;]
[,, 3, ), ;, validateOptionalName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1]
[), ;, validateOptionalName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), )]
[;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;]
[), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), )]
[., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateBlock, (, n, .]
[;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateParameters, (, Node, n, ), {, validateNodeType]
[), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateParameters, (, Node, n, ), {]
[., getChildAtIndex, (, 1, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateParameters]
[), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateParameters, (, Node, n, )]
[;, }, private, void, validateParameters, (, Node, n, ), {, validateNodeType, (, Token, ., PARAM_LIST, ,, n, ), ;, for]
[), ;, }, private, void, validateParameters, (, Node, n, ), {, validateNodeType, (, Token, ., PARAM_LIST, ,, n, ), ;]
[., getLastChild, (, ), ), ;, }, private, void, validateParameters, (, Node, n, ), {, validateNodeType, (, Token, ., PARAM_LIST]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c]
[., PARAM_LIST, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateName, (, c, ), ;, }]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateName, (]
[;, c, =, c, ., getNext, (, ), ), {, validateName, (, c, ), ;, }, }, private, void, validateCall]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateName, (, c, ), ;, }, }, private]
[;, c, =, c, ., getNext, (, ), ), {, validateName, (, c, ), ;, }, }, private, void, validateCall]
[=, c, ., getNext, (, ), ), {, validateName, (, c, ), ;, }, }, private, void, validateCall, (, Node]
[), {, validateName, (, c, ), ;, }, }, private, void, validateCall, (, Node, n, ), {, validateNodeType, (, Token]
[., getNext, (, ), ), {, validateName, (, c, ), ;, }, }, private, void, validateCall, (, Node, n, )]
[;, }, }, private, void, validateCall, (, Node, n, ), {, validateNodeType, (, Token, ., CALL, ,, n, ), ;]
[), ;, }, }, private, void, validateCall, (, Node, n, ), {, validateNodeType, (, Token, ., CALL, ,, n, )]
[;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (]
[., CALL, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, .]
[), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c]
[), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateExpression, (, c, ), ;, }]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateExpression, (]
[;, c, =, c, ., getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateNew]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private]
[;, c, =, c, ., getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateNew]
[=, c, ., getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateNew, (, Node]
[), {, validateExpression, (, c, ), ;, }, }, private, void, validateNew, (, Node, n, ), {, validateNodeType, (, Token]
[., getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateNew, (, Node, n, )]
[;, }, }, private, void, validateNew, (, Node, n, ), {, validateNodeType, (, Token, ., NEW, ,, n, ), ;]
[), ;, }, }, private, void, validateNew, (, Node, n, ), {, validateNodeType, (, Token, ., NEW, ,, n, )]
[;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (]
[., NEW, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, .]
[), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c]
[), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateExpression, (, c, ), ;, }]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateExpression, (]
[;, c, =, c, ., getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateVar]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private]
[;, c, =, c, ., getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateVar]
[=, c, ., getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateVar, (, Node]
[), {, validateExpression, (, c, ), ;, }, }, private, void, validateVar, (, Node, n, ), {, validateNodeType, (, Token]
[., getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateVar, (, Node, n, )]
[;, }, }, private, void, validateVar, (, Node, n, ), {, validateNodeType, (, Token, ., VAR, ,, n, ), ;]
[), ;, }, }, private, void, validateVar, (, Node, n, ), {, validateNodeType, (, Token, ., VAR, ,, n, )]
[;, this, ., validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, )]
[,, n, ), ;, this, ., validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, .]
[., VAR, ,, n, ), ;, this, ., validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =]
[), ;, this, ., validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[., validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c]
[,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c]
[), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateNodeType, (, Token, ., NAME, ,]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateNodeType, (]
[;, c, =, c, ., getNext, (, ), ), {, validateNodeType, (, Token, ., NAME, ,, c, ), ;, validateNonEmptyString]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateNodeType, (, Token, ., NAME, ,, c, )]
[;, c, =, c, ., getNext, (, ), ), {, validateNodeType, (, Token, ., NAME, ,, c, ), ;, validateNonEmptyString]
[=, c, ., getNext, (, ), ), {, validateNodeType, (, Token, ., NAME, ,, c, ), ;, validateNonEmptyString, (, c]
[), {, validateNodeType, (, Token, ., NAME, ,, c, ), ;, validateNonEmptyString, (, c, ), ;, validateMaximumChildCount, (, c, ,]
[., getNext, (, ), ), {, validateNodeType, (, Token, ., NAME, ,, c, ), ;, validateNonEmptyString, (, c, ), ;]
[;, validateNonEmptyString, (, c, ), ;, validateMaximumChildCount, (, c, ,, 1, ), ;, if, (, c, ., hasChildren, (, )]
[,, c, ), ;, validateNonEmptyString, (, c, ), ;, validateMaximumChildCount, (, c, ,, 1, ), ;, if, (, c, .]
[., NAME, ,, c, ), ;, validateNonEmptyString, (, c, ), ;, validateMaximumChildCount, (, c, ,, 1, ), ;, if, (]
[), ;, validateNonEmptyString, (, c, ), ;, validateMaximumChildCount, (, c, ,, 1, ), ;, if, (, c, ., hasChildren, (]
[;, validateMaximumChildCount, (, c, ,, 1, ), ;, if, (, c, ., hasChildren, (, ), ), {, validateExpression, (, c]
[), ;, validateMaximumChildCount, (, c, ,, 1, ), ;, if, (, c, ., hasChildren, (, ), ), {, validateExpression, (]
[;, if, (, c, ., hasChildren, (, ), ), {, validateExpression, (, c, ., getFirstChild, (, ), ), ;, }]
[,, 1, ), ;, if, (, c, ., hasChildren, (, ), ), {, validateExpression, (, c, ., getFirstChild, (, )]
[), ;, if, (, c, ., hasChildren, (, ), ), {, validateExpression, (, c, ., getFirstChild, (, ), ), ;]
[), {, validateExpression, (, c, ., getFirstChild, (, ), ), ;, }, }, }, private, void, validateFor, (, Node, n]
[., hasChildren, (, ), ), {, validateExpression, (, c, ., getFirstChild, (, ), ), ;, }, }, }, private, void]
[;, }, }, }, private, void, validateFor, (, Node, n, ), {, validateNodeType, (, Token, ., FOR, ,, n, )]
[), ;, }, }, }, private, void, validateFor, (, Node, n, ), {, validateNodeType, (, Token, ., FOR, ,, n]
[., getFirstChild, (, ), ), ;, }, }, }, private, void, validateFor, (, Node, n, ), {, validateNodeType, (, Token]
[;, validateMinimumChildCount, (, n, ,, 3, ), ;, validateMaximumChildCount, (, n, ,, 4, ), ;, if, (, NodeUtil, ., isForIn]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 3, ), ;, validateMaximumChildCount, (, n, ,, 4, ), ;, if, (]
[., FOR, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 3, ), ;, validateMaximumChildCount, (, n, ,, 4, ), ;]
[), ;, validateMinimumChildCount, (, n, ,, 3, ), ;, validateMaximumChildCount, (, n, ,, 4, ), ;, if, (, NodeUtil, .]
[;, validateMaximumChildCount, (, n, ,, 4, ), ;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, validateChildCount, (]
[,, 3, ), ;, validateMaximumChildCount, (, n, ,, 4, ), ;, if, (, NodeUtil, ., isForIn, (, n, ), )]
[), ;, validateMaximumChildCount, (, n, ,, 4, ), ;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, validateChildCount]
[;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, validateChildCount, (, n, ,, 3, ), ;, validateVarOrAssignmentTarget, (]
[,, 4, ), ;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, validateChildCount, (, n, ,, 3, )]
[), ;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, validateChildCount, (, n, ,, 3, ), ;, validateVarOrAssignmentTarget]
[), {, validateChildCount, (, n, ,, 3, ), ;, validateVarOrAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (]
[., isForIn, (, n, ), ), {, validateChildCount, (, n, ,, 3, ), ;, validateVarOrAssignmentTarget, (, n, ., getFirstChild, (]
[), ), {, validateChildCount, (, n, ,, 3, ), ;, validateVarOrAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression]
[;, validateVarOrAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;]
[,, 3, ), ;, validateVarOrAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getChildAtIndex, (, 1]
[), ;, validateVarOrAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getChildAtIndex, (, 1, ), )]
[;, validateExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, }, else, {, validateChildCount, (, n, ,, 4, )]
[), ;, validateExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, }, else, {, validateChildCount, (, n, ,, 4]
[., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, }, else, {, validateChildCount]
[;, }, else, {, validateChildCount, (, n, ,, 4, ), ;, validateVarOrOptionalExpression, (, n, ., getFirstChild, (, ), ), ;]
[), ;, }, else, {, validateChildCount, (, n, ,, 4, ), ;, validateVarOrOptionalExpression, (, n, ., getFirstChild, (, ), )]
[., getChildAtIndex, (, 1, ), ), ;, }, else, {, validateChildCount, (, n, ,, 4, ), ;, validateVarOrOptionalExpression, (, n]
[), ), ;, }, else, {, validateChildCount, (, n, ,, 4, ), ;, validateVarOrOptionalExpression, (, n, ., getFirstChild, (, )]
[;, validateVarOrOptionalExpression, (, n, ., getFirstChild, (, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;]
[,, 4, ), ;, validateVarOrOptionalExpression, (, n, ., getFirstChild, (, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 1]
[), ;, validateVarOrOptionalExpression, (, n, ., getFirstChild, (, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 1, ), )]
[;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 2, ), )]
[), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 2, )]
[., getFirstChild, (, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateOptionalExpression, (, n, .]
[;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 2, ), ), ;, }, validateBlock, (, n, ., getLastChild, (, ), )]
[), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 2, ), ), ;, }, validateBlock, (, n, ., getLastChild, (, )]
[., getChildAtIndex, (, 1, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 2, ), ), ;, }, validateBlock, (]
[), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 2, ), ), ;, }, validateBlock, (, n, ., getLastChild, (]
[;, }, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateVarOrOptionalExpression, (, Node, n, ), {]
[), ;, }, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateVarOrOptionalExpression, (, Node, n, )]
[., getChildAtIndex, (, 2, ), ), ;, }, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void]
[), ), ;, }, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateVarOrOptionalExpression, (, Node, n]
[;, }, private, void, validateVarOrOptionalExpression, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {, validateVar]
[), ;, }, private, void, validateVarOrOptionalExpression, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {]
[., getLastChild, (, ), ), ;, }, private, void, validateVarOrOptionalExpression, (, Node, n, ), {, if, (, n, ., isVar]
[), {, validateVar, (, n, ), ;, }, else, {, validateOptionalExpression, (, n, ), ;, }, }, private, void, validateVarOrAssignmentTarget]
[., isVar, (, ), ), {, validateVar, (, n, ), ;, }, else, {, validateOptionalExpression, (, n, ), ;, }]
[;, }, else, {, validateOptionalExpression, (, n, ), ;, }, }, private, void, validateVarOrAssignmentTarget, (, Node, n, ), {, if]
[), ;, }, else, {, validateOptionalExpression, (, n, ), ;, }, }, private, void, validateVarOrAssignmentTarget, (, Node, n, ), {]
[;, }, }, private, void, validateVarOrAssignmentTarget, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {]
[), ;, }, }, private, void, validateVarOrAssignmentTarget, (, Node, n, ), {, if, (, n, ., isVar, (, ), )]
[), {, this, ., validateChildCount, (, n, ,, 1, ), ;, validateVar, (, n, ), ;, }, else, {, validateAssignmentTarget]
[., isVar, (, ), ), {, this, ., validateChildCount, (, n, ,, 1, ), ;, validateVar, (, n, ), ;]
[;, validateVar, (, n, ), ;, }, else, {, validateAssignmentTarget, (, n, ), ;, }, }, private, void, validateWith, (]
[., validateChildCount, (, n, ,, 1, ), ;, validateVar, (, n, ), ;, }, else, {, validateAssignmentTarget, (, n, )]
[,, 1, ), ;, validateVar, (, n, ), ;, }, else, {, validateAssignmentTarget, (, n, ), ;, }, }, private]
[), ;, validateVar, (, n, ), ;, }, else, {, validateAssignmentTarget, (, n, ), ;, }, }, private, void, validateWith]
[;, }, else, {, validateAssignmentTarget, (, n, ), ;, }, }, private, void, validateWith, (, Node, n, ), {, validateNodeType]
[), ;, }, else, {, validateAssignmentTarget, (, n, ), ;, }, }, private, void, validateWith, (, Node, n, ), {]
[;, }, }, private, void, validateWith, (, Node, n, ), {, validateNodeType, (, Token, ., WITH, ,, n, ), ;]
[), ;, }, }, private, void, validateWith, (, Node, n, ), {, validateNodeType, (, Token, ., WITH, ,, n, )]
[;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[., WITH, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, )]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }]
[,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, )]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;]
[;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateWhile, (, Node, n, ), {, validateNodeType]
[), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateWhile, (, Node, n, ), {]
[., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateWhile, (]
[;, }, private, void, validateWhile, (, Node, n, ), {, validateNodeType, (, Token, ., WHILE, ,, n, ), ;, validateChildCount]
[), ;, }, private, void, validateWhile, (, Node, n, ), {, validateNodeType, (, Token, ., WHILE, ,, n, ), ;]
[., getLastChild, (, ), ), ;, }, private, void, validateWhile, (, Node, n, ), {, validateNodeType, (, Token, ., WHILE]
[;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[., WHILE, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, )]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }]
[,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, )]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;]
[;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateDo, (, Node, n, ), {, validateNodeType]
[), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateDo, (, Node, n, ), {]
[., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateDo, (]
[;, }, private, void, validateDo, (, Node, n, ), {, validateNodeType, (, Token, ., DO, ,, n, ), ;, validateChildCount]
[), ;, }, private, void, validateDo, (, Node, n, ), {, validateNodeType, (, Token, ., DO, ,, n, ), ;]
[., getLastChild, (, ), ), ;, }, private, void, validateDo, (, Node, n, ), {, validateNodeType, (, Token, ., DO]
[;, validateChildCount, (, n, ,, 2, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;]
[., DO, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateBlock, (, n, ., getFirstChild, (, )]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (]
[;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }]
[,, 2, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, )]
[), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;]
[;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateIf, (, Node, n, ), {, validateNodeType]
[), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateIf, (, Node, n, ), {]
[., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateIf, (]
[;, }, private, void, validateIf, (, Node, n, ), {, validateNodeType, (, Token, ., IF, ,, n, ), ;, validateMinimumChildCount]
[), ;, }, private, void, validateIf, (, Node, n, ), {, validateNodeType, (, Token, ., IF, ,, n, ), ;]
[., getLastChild, (, ), ), ;, }, private, void, validateIf, (, Node, n, ), {, validateNodeType, (, Token, ., IF]
[;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateExpression, (, n, ., getFirstChild]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateExpression, (]
[., IF, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;]
[), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateExpression, (, n, .]
[;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n]
[,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getChildAtIndex, (, 1, ), ), ;]
[,, 3, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getChildAtIndex, (, 1]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getChildAtIndex, (, 1, ), )]
[;, validateBlock, (, n, ., getChildAtIndex, (, 1, ), ), ;, if, (, n, ., getChildCount, (, ), ==, 3]
[), ;, validateBlock, (, n, ., getChildAtIndex, (, 1, ), ), ;, if, (, n, ., getChildCount, (, ), ==]
[., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getChildAtIndex, (, 1, ), ), ;, if, (, n, .]
[;, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (, n, ., getLastChild, (, ), )]
[), ;, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (, n, ., getLastChild, (, )]
[., getChildAtIndex, (, 1, ), ), ;, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (]
[), ), ;, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (, n, ., getLastChild, (]
[), {, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, }, private, void, validateExprStmt, (, Node, n, )]
[==, 3, ), {, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, }, private, void, validateExprStmt, (, Node]
[., getChildCount, (, ), ==, 3, ), {, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, }, private]
[), {, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, }, private, void, validateExprStmt, (, Node, n, )]
[;, }, }, private, void, validateExprStmt, (, Node, n, ), {, validateNodeType, (, Token, ., EXPR_RESULT, ,, n, ), ;]
[), ;, }, }, private, void, validateExprStmt, (, Node, n, ), {, validateNodeType, (, Token, ., EXPR_RESULT, ,, n, )]
[., getLastChild, (, ), ), ;, }, }, private, void, validateExprStmt, (, Node, n, ), {, validateNodeType, (, Token, .]
[;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void]
[,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[., EXPR_RESULT, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, )]
[), ;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateReturn, (, Node, n, ), {, validateNodeType]
[,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateReturn, (, Node, n]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateReturn, (, Node, n, ), {]
[;, }, private, void, validateReturn, (, Node, n, ), {, validateNodeType, (, Token, ., RETURN, ,, n, ), ;, validateMaximumChildCount]
[), ;, }, private, void, validateReturn, (, Node, n, ), {, validateNodeType, (, Token, ., RETURN, ,, n, ), ;]
[., getFirstChild, (, ), ), ;, }, private, void, validateReturn, (, Node, n, ), {, validateNodeType, (, Token, ., RETURN]
[;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateExpression, (, n]
[,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {]
[., RETURN, ,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, )]
[), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateExpression, (]
[;, if, (, n, ., hasChildren, (, ), ), {, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }]
[,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateExpression, (, n, ., getFirstChild, (, )]
[), ;, if, (, n, ., hasChildren, (, ), ), {, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[), {, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateThrow, (, Node, n, )]
[., hasChildren, (, ), ), {, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateThrow]
[;, }, }, private, void, validateThrow, (, Node, n, ), {, validateNodeType, (, Token, ., THROW, ,, n, ), ;]
[), ;, }, }, private, void, validateThrow, (, Node, n, ), {, validateNodeType, (, Token, ., THROW, ,, n, )]
[., getFirstChild, (, ), ), ;, }, }, private, void, validateThrow, (, Node, n, ), {, validateNodeType, (, Token, .]
[;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void]
[,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[., THROW, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, )]
[), ;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateBreak, (, Node, n, ), {, validateNodeType]
[,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateBreak, (, Node, n]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateBreak, (, Node, n, ), {]
[;, }, private, void, validateBreak, (, Node, n, ), {, validateNodeType, (, Token, ., BREAK, ,, n, ), ;, validateMaximumChildCount]
[), ;, }, private, void, validateBreak, (, Node, n, ), {, validateNodeType, (, Token, ., BREAK, ,, n, ), ;]
[., getFirstChild, (, ), ), ;, }, private, void, validateBreak, (, Node, n, ), {, validateNodeType, (, Token, ., BREAK]
[;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (, n]
[,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {]
[., BREAK, ,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, )]
[), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (]
[;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, }]
[,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (, n, ., getFirstChild, (, )]
[), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (, n, ., getFirstChild, (, ), ), ;]
[), {, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateContinue, (, Node, n, )]
[., hasChildren, (, ), ), {, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateContinue]
[;, }, }, private, void, validateContinue, (, Node, n, ), {, validateNodeType, (, Token, ., CONTINUE, ,, n, ), ;]
[), ;, }, }, private, void, validateContinue, (, Node, n, ), {, validateNodeType, (, Token, ., CONTINUE, ,, n, )]
[., getFirstChild, (, ), ), ;, }, }, private, void, validateContinue, (, Node, n, ), {, validateNodeType, (, Token, .]
[;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (, n]
[,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {]
[., CONTINUE, ,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, )]
[), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (]
[;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, }]
[,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (, n, ., getFirstChild, (, )]
[), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (, n, ., getFirstChild, (, ), ), ;]
[), {, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateTry, (, Node, n, )]
[., hasChildren, (, ), ), {, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateTry]
[;, }, }, private, void, validateTry, (, Node, n, ), {, validateNodeType, (, Token, ., TRY, ,, n, ), ;]
[), ;, }, }, private, void, validateTry, (, Node, n, ), {, validateNodeType, (, Token, ., TRY, ,, n, )]
[., getFirstChild, (, ), ), ;, }, }, private, void, validateTry, (, Node, n, ), {, validateNodeType, (, Token, .]
[;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateBlock, (, n, ., getFirstChild]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateBlock, (]
[., TRY, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;]
[), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateBlock, (, n, .]
[;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, boolean, seenCatchOrFinally, =]
[,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, boolean, seenCatchOrFinally]
[;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, boolean, seenCatchOrFinally, =, false, ;, Node, catches, =, n, .]
[,, 3, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, boolean, seenCatchOrFinally, =, false, ;, Node, catches]
[), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, boolean, seenCatchOrFinally, =, false, ;, Node, catches, =, n]
[;, boolean, seenCatchOrFinally, =, false, ;, Node, catches, =, n, ., getChildAtIndex, (, 1, ), ;, validateNodeType, (, Token, .]
[), ;, boolean, seenCatchOrFinally, =, false, ;, Node, catches, =, n, ., getChildAtIndex, (, 1, ), ;, validateNodeType, (, Token]
[., getFirstChild, (, ), ), ;, boolean, seenCatchOrFinally, =, false, ;, Node, catches, =, n, ., getChildAtIndex, (, 1, )]
[;, Node, catches, =, n, ., getChildAtIndex, (, 1, ), ;, validateNodeType, (, Token, ., BLOCK, ,, catches, ), ;]
[;, validateNodeType, (, Token, ., BLOCK, ,, catches, ), ;, validateMaximumChildCount, (, catches, ,, 1, ), ;, if, (, catches]
[., getChildAtIndex, (, 1, ), ;, validateNodeType, (, Token, ., BLOCK, ,, catches, ), ;, validateMaximumChildCount, (, catches, ,, 1]
[), ;, validateNodeType, (, Token, ., BLOCK, ,, catches, ), ;, validateMaximumChildCount, (, catches, ,, 1, ), ;, if, (]
[;, validateMaximumChildCount, (, catches, ,, 1, ), ;, if, (, catches, ., hasChildren, (, ), ), {, validateCatch, (, catches]
[,, catches, ), ;, validateMaximumChildCount, (, catches, ,, 1, ), ;, if, (, catches, ., hasChildren, (, ), ), {]
[., BLOCK, ,, catches, ), ;, validateMaximumChildCount, (, catches, ,, 1, ), ;, if, (, catches, ., hasChildren, (, )]
[), ;, validateMaximumChildCount, (, catches, ,, 1, ), ;, if, (, catches, ., hasChildren, (, ), ), {, validateCatch, (]
[;, if, (, catches, ., hasChildren, (, ), ), {, validateCatch, (, catches, ., getFirstChild, (, ), ), ;, seenCatchOrFinally]
[,, 1, ), ;, if, (, catches, ., hasChildren, (, ), ), {, validateCatch, (, catches, ., getFirstChild, (, )]
[), ;, if, (, catches, ., hasChildren, (, ), ), {, validateCatch, (, catches, ., getFirstChild, (, ), ), ;]
[), {, validateCatch, (, catches, ., getFirstChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (, n, .]
[., hasChildren, (, ), ), {, validateCatch, (, catches, ., getFirstChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }]
[;, seenCatchOrFinally, =, true, ;, }, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (, n]
[), ;, seenCatchOrFinally, =, true, ;, }, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (]
[., getFirstChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (, n, ., getChildCount, (, ), ==, 3]
[=, true, ;, }, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (, n, ., getLastChild]
[;, }, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (, n, ., getLastChild, (, )]
[), {, validateBlock, (, n, ., getLastChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (, !, seenCatchOrFinally]
[==, 3, ), {, validateBlock, (, n, ., getLastChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (]
[., getChildCount, (, ), ==, 3, ), {, validateBlock, (, n, ., getLastChild, (, ), ), ;, seenCatchOrFinally, =, true]
[), {, validateBlock, (, n, ., getLastChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (, !, seenCatchOrFinally]
[;, seenCatchOrFinally, =, true, ;, }, if, (, !, seenCatchOrFinally, ), {, violation, (, "Missing catch or finally for try statement.", ,, n, ), ;, }]
[), ;, seenCatchOrFinally, =, true, ;, }, if, (, !, seenCatchOrFinally, ), {, violation, (, "Missing catch or finally for try statement.", ,, n, ), ;]
[., getLastChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (, !, seenCatchOrFinally, ), {, violation, (, "Missing catch or finally for try statement."]
[=, true, ;, }, if, (, !, seenCatchOrFinally, ), {, violation, (, "Missing catch or finally for try statement.", ,, n, ), ;, }, }, private]
[;, }, if, (, !, seenCatchOrFinally, ), {, violation, (, "Missing catch or finally for try statement.", ,, n, ), ;, }, }, private, void, validateCatch]
[), {, violation, (, "Missing catch or finally for try statement.", ,, n, ), ;, }, }, private, void, validateCatch, (, Node, n, ), {, validateNodeType]
[), {, violation, (, "Missing catch or finally for try statement.", ,, n, ), ;, }, }, private, void, validateCatch, (, Node, n, ), {, validateNodeType]
[;, }, }, private, void, validateCatch, (, Node, n, ), {, validateNodeType, (, Token, ., CATCH, ,, n, ), ;]
[,, n, ), ;, }, }, private, void, validateCatch, (, Node, n, ), {, validateNodeType, (, Token, ., CATCH, ,]
[), ;, }, }, private, void, validateCatch, (, Node, n, ), {, validateNodeType, (, Token, ., CATCH, ,, n, )]
[;, validateChildCount, (, n, ,, 2, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;]
[., CATCH, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateName, (, n, ., getFirstChild, (, )]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }]
[,, 2, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, )]
[), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;]
[;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateSwitch, (, Node, n, ), {, validateNodeType]
[), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateSwitch, (, Node, n, ), {]
[., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateSwitch, (]
[;, }, private, void, validateSwitch, (, Node, n, ), {, validateNodeType, (, Token, ., SWITCH, ,, n, ), ;, validateMinimumChildCount]
[), ;, }, private, void, validateSwitch, (, Node, n, ), {, validateNodeType, (, Token, ., SWITCH, ,, n, ), ;]
[., getLastChild, (, ), ), ;, }, private, void, validateSwitch, (, Node, n, ), {, validateNodeType, (, Token, ., SWITCH]
[;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, int, defaults, =]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[., SWITCH, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, )]
[), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, int, defaults]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, int, defaults, =, 0, ;, for, (, Node, c, =]
[,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, int, defaults, =, 0, ;, for, (]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, int, defaults, =, 0, ;, for, (, Node, c]
[;, int, defaults, =, 0, ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ., getNext, (, )]
[), ;, int, defaults, =, 0, ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ., getNext, (]
[., getFirstChild, (, ), ), ;, int, defaults, =, 0, ;, for, (, Node, c, =, n, ., getFirstChild, (]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, c, !=, null, ;]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateSwitchMember, (, n, ., getLastChild, (]
[., getNext, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateSwitchMember, (]
[., getFirstChild, (, ), ., getNext, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, )]
[;, c, =, c, ., getNext, (, ), ), {, validateSwitchMember, (, n, ., getLastChild, (, ), ), ;, if]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateSwitchMember, (, n, ., getLastChild, (, ), )]
[;, c, =, c, ., getNext, (, ), ), {, validateSwitchMember, (, n, ., getLastChild, (, ), ), ;, if]
[=, c, ., getNext, (, ), ), {, validateSwitchMember, (, n, ., getLastChild, (, ), ), ;, if, (, c]
[), {, validateSwitchMember, (, n, ., getLastChild, (, ), ), ;, if, (, c, ., isDefaultCase, (, ), ), {]
[., getNext, (, ), ), {, validateSwitchMember, (, n, ., getLastChild, (, ), ), ;, if, (, c, ., isDefaultCase]
[;, if, (, c, ., isDefaultCase, (, ), ), {, defaults, ++, ;, }, }, if, (, defaults, >, 1]
[), ;, if, (, c, ., isDefaultCase, (, ), ), {, defaults, ++, ;, }, }, if, (, defaults, >]
[., getLastChild, (, ), ), ;, if, (, c, ., isDefaultCase, (, ), ), {, defaults, ++, ;, }, }]
[), {, defaults, ++, ;, }, }, if, (, defaults, >, 1, ), {, violation, (, "Expected at most 1 'default' in switch but was ", +, defaults, ,]
[., isDefaultCase, (, ), ), {, defaults, ++, ;, }, }, if, (, defaults, >, 1, ), {, violation, (]
[;, }, }, if, (, defaults, >, 1, ), {, violation, (, "Expected at most 1 'default' in switch but was ", +, defaults, ,, n, ), ;, }]
[++, ;, }, }, if, (, defaults, >, 1, ), {, violation, (, "Expected at most 1 'default' in switch but was ", +, defaults, ,, n, ), ;]
[), {, violation, (, "Expected at most 1 'default' in switch but was ", +, defaults, ,, n, ), ;, }, }, private, void, validateSwitchMember, (, Node, n, )]
[>, 1, ), {, violation, (, "Expected at most 1 'default' in switch but was ", +, defaults, ,, n, ), ;, }, }, private, void, validateSwitchMember, (, Node]
[), {, violation, (, "Expected at most 1 'default' in switch but was ", +, defaults, ,, n, ), ;, }, }, private, void, validateSwitchMember, (, Node, n, )]
[;, }, }, private, void, validateSwitchMember, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {]
[,, n, ), ;, }, }, private, void, validateSwitchMember, (, Node, n, ), {, switch, (, n, ., getType, (]
[+, defaults, ,, n, ), ;, }, }, private, void, validateSwitchMember, (, Node, n, ), {, switch, (, n, .]
[,, n, ), ;, }, }, private, void, validateSwitchMember, (, Node, n, ), {, switch, (, n, ., getType, (]
[), ;, }, }, private, void, validateSwitchMember, (, Node, n, ), {, switch, (, n, ., getType, (, ), )]
[), {, case, Token, ., CASE, :, validateCase, (, n, ), ;, return, ;, case, Token, ., DEFAULT_CASE, :, validateDefault]
[., getType, (, ), ), {, case, Token, ., CASE, :, validateCase, (, n, ), ;, return, ;, case, Token]
[:, validateCase, (, n, ), ;, return, ;, case, Token, ., DEFAULT_CASE, :, validateDefault, (, n, ), ;, return, ;]
[., CASE, :, validateCase, (, n, ), ;, return, ;, case, Token, ., DEFAULT_CASE, :, validateDefault, (, n, ), ;]
[;, return, ;, case, Token, ., DEFAULT_CASE, :, validateDefault, (, n, ), ;, return, ;, default, :, violation, (, "Expected switch member but was "]
[), ;, return, ;, case, Token, ., DEFAULT_CASE, :, validateDefault, (, n, ), ;, return, ;, default, :, violation, (]
[:, validateDefault, (, n, ), ;, return, ;, default, :, violation, (, "Expected switch member but was ", +, Token, ., name, (, n, .]
[., DEFAULT_CASE, :, validateDefault, (, n, ), ;, return, ;, default, :, violation, (, "Expected switch member but was ", +, Token, ., name, (]
[;, return, ;, default, :, violation, (, "Expected switch member but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,]
[), ;, return, ;, default, :, violation, (, "Expected switch member but was ", +, Token, ., name, (, n, ., getType, (, ), )]
[;, }, }, private, void, validateDefault, (, Node, n, ), {, validateNodeType, (, Token, ., DEFAULT_CASE, ,, n, ), ;]
[,, n, ), ;, }, }, private, void, validateDefault, (, Node, n, ), {, validateNodeType, (, Token, ., DEFAULT_CASE, ,]
[+, Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateDefault]
[,, n, ), ;, }, }, private, void, validateDefault, (, Node, n, ), {, validateNodeType, (, Token, ., DEFAULT_CASE, ,]
[., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateDefault, (, Node]
[), ,, n, ), ;, }, }, private, void, validateDefault, (, Node, n, ), {, validateNodeType, (, Token, ., DEFAULT_CASE]
[., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateDefault, (, Node, n, ), {, validateNodeType]
[), ;, }, }, private, void, validateDefault, (, Node, n, ), {, validateNodeType, (, Token, ., DEFAULT_CASE, ,, n, )]
[;, validateChildCount, (, n, ,, 1, ), ;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void]
[,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;]
[., DEFAULT_CASE, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateSyntheticBlock, (, n, ., getLastChild, (, )]
[), ;, validateChildCount, (, n, ,, 1, ), ;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private]
[;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateCase, (, Node, n, ), {, validateNodeType]
[,, 1, ), ;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateCase, (, Node, n]
[), ;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateCase, (, Node, n, ), {]
[;, }, private, void, validateCase, (, Node, n, ), {, validateNodeType, (, Token, ., CASE, ,, n, ), ;, validateChildCount]
[), ;, }, private, void, validateCase, (, Node, n, ), {, validateNodeType, (, Token, ., CASE, ,, n, ), ;]
[., getLastChild, (, ), ), ;, }, private, void, validateCase, (, Node, n, ), {, validateNodeType, (, Token, ., CASE]
[;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateSyntheticBlock, (, n]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[., CASE, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, )]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateSyntheticBlock, (]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }]
[,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateSyntheticBlock, (, n, ., getLastChild, (, )]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;]
[;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateOptionalExpression, (, Node, n, ), {, if]
[), ;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateOptionalExpression, (, Node, n, ), {]
[., getFirstChild, (, ), ), ;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateOptionalExpression, (]
[;, }, private, void, validateOptionalExpression, (, Node, n, ), {, if, (, n, ., isEmpty, (, ), ), {, validateChildless]
[), ;, }, private, void, validateOptionalExpression, (, Node, n, ), {, if, (, n, ., isEmpty, (, ), ), {]
[., getLastChild, (, ), ), ;, }, private, void, validateOptionalExpression, (, Node, n, ), {, if, (, n, ., isEmpty]
[), {, validateChildless, (, n, ), ;, }, else, {, validateExpression, (, n, ), ;, }, }, private, void, validateChildless]
[., isEmpty, (, ), ), {, validateChildless, (, n, ), ;, }, else, {, validateExpression, (, n, ), ;, }]
[;, }, else, {, validateExpression, (, n, ), ;, }, }, private, void, validateChildless, (, Node, n, ), {, validateChildCount]
[), ;, }, else, {, validateExpression, (, n, ), ;, }, }, private, void, validateChildless, (, Node, n, ), {]
[;, }, }, private, void, validateChildless, (, Node, n, ), {, validateChildCount, (, n, ,, 0, ), ;, }, private]
[), ;, }, }, private, void, validateChildless, (, Node, n, ), {, validateChildCount, (, n, ,, 0, ), ;, }]
[;, }, private, void, validateAssignmentExpression, (, Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;, validateAssignmentTarget, (, n]
[,, 0, ), ;, }, private, void, validateAssignmentExpression, (, Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;]
[), ;, }, private, void, validateAssignmentExpression, (, Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;, validateAssignmentTarget, (]
[;, validateAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }]
[,, 2, ), ;, validateAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, )]
[), ;, validateAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;]
[;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateAssignmentTarget, (, Node, n, ), {, switch]
[), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateAssignmentTarget, (, Node, n, ), {]
[., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateAssignmentTarget, (]
[;, }, private, void, validateAssignmentTarget, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[), ;, }, private, void, validateAssignmentTarget, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {]
[., getLastChild, (, ), ), ;, }, private, void, validateAssignmentTarget, (, Node, n, ), {, switch, (, n, ., getType]
[), {, case, Token, ., NAME, :, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, validateExpression, (, n]
[., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETELEM, :, case, Token, ., GETPROP]
[:, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, validateExpression, (, n, ), ;, return, ;, default, :]
[., NAME, :, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, validateExpression, (, n, ), ;, return, ;]
[:, case, Token, ., GETPROP, :, validateExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected assignment target expression but was ", +, Token]
[., GETELEM, :, case, Token, ., GETPROP, :, validateExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected assignment target expression but was "]
[:, validateExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected assignment target expression but was ", +, Token, ., name, (, n, .]
[., GETPROP, :, validateExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected assignment target expression but was ", +, Token, ., name, (]
[;, return, ;, default, :, violation, (, "Expected assignment target expression but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,]
[), ;, return, ;, default, :, violation, (, "Expected assignment target expression but was ", +, Token, ., name, (, n, ., getType, (, ), )]
[;, }, }, private, void, validateGetProp, (, Node, n, ), {, validateNodeType, (, Token, ., GETPROP, ,, n, ), ;]
[,, n, ), ;, }, }, private, void, validateGetProp, (, Node, n, ), {, validateNodeType, (, Token, ., GETPROP, ,]
[+, Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateGetProp]
[,, n, ), ;, }, }, private, void, validateGetProp, (, Node, n, ), {, validateNodeType, (, Token, ., GETPROP, ,]
[., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateGetProp, (, Node]
[), ,, n, ), ;, }, }, private, void, validateGetProp, (, Node, n, ), {, validateNodeType, (, Token, ., GETPROP]
[., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateGetProp, (, Node, n, ), {, validateNodeType]
[), ;, }, }, private, void, validateGetProp, (, Node, n, ), {, validateNodeType, (, Token, ., GETPROP, ,, n, )]
[;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, Node, prop, =]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[., GETPROP, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, )]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, Node, prop]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, Node, prop, =, n, ., getLastChild, (, ), ;, validateNodeType]
[,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, Node, prop, =, n, ., getLastChild, (]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, Node, prop, =, n, ., getLastChild, (, ), ;]
[;, Node, prop, =, n, ., getLastChild, (, ), ;, validateNodeType, (, Token, ., STRING, ,, prop, ), ;, validateNonEmptyString]
[), ;, Node, prop, =, n, ., getLastChild, (, ), ;, validateNodeType, (, Token, ., STRING, ,, prop, ), ;]
[., getFirstChild, (, ), ), ;, Node, prop, =, n, ., getLastChild, (, ), ;, validateNodeType, (, Token, ., STRING]
[;, validateNodeType, (, Token, ., STRING, ,, prop, ), ;, validateNonEmptyString, (, prop, ), ;, }, private, void, validateRegExpLit, (]
[., getLastChild, (, ), ;, validateNodeType, (, Token, ., STRING, ,, prop, ), ;, validateNonEmptyString, (, prop, ), ;, }]
[;, validateNonEmptyString, (, prop, ), ;, }, private, void, validateRegExpLit, (, Node, n, ), {, validateNodeType, (, Token, ., REGEXP]
[,, prop, ), ;, validateNonEmptyString, (, prop, ), ;, }, private, void, validateRegExpLit, (, Node, n, ), {, validateNodeType, (]
[., STRING, ,, prop, ), ;, validateNonEmptyString, (, prop, ), ;, }, private, void, validateRegExpLit, (, Node, n, ), {]
[), ;, validateNonEmptyString, (, prop, ), ;, }, private, void, validateRegExpLit, (, Node, n, ), {, validateNodeType, (, Token, .]
[;, }, private, void, validateRegExpLit, (, Node, n, ), {, validateNodeType, (, Token, ., REGEXP, ,, n, ), ;, validateMinimumChildCount]
[), ;, }, private, void, validateRegExpLit, (, Node, n, ), {, validateNodeType, (, Token, ., REGEXP, ,, n, ), ;]
[;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateMaximumChildCount, (, n, ,, 2, ), ;, for, (, Node, c, =]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateMaximumChildCount, (, n, ,, 2, ), ;, for, (]
[., REGEXP, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateMaximumChildCount, (, n, ,, 2, ), ;]
[), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateMaximumChildCount, (, n, ,, 2, ), ;, for, (, Node, c]
[;, validateMaximumChildCount, (, n, ,, 2, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c]
[,, 1, ), ;, validateMaximumChildCount, (, n, ,, 2, ), ;, for, (, Node, c, =, n, ., getFirstChild, (]
[), ;, validateMaximumChildCount, (, n, ,, 2, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[,, 2, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c]
[), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateString, (, c, ), ;, }]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateString, (]
[;, c, =, c, ., getNext, (, ), ), {, validateString, (, c, ), ;, }, }, private, void, validateString]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateString, (, c, ), ;, }, }, private]
[;, c, =, c, ., getNext, (, ), ), {, validateString, (, c, ), ;, }, }, private, void, validateString]
[=, c, ., getNext, (, ), ), {, validateString, (, c, ), ;, }, }, private, void, validateString, (, Node]
[), {, validateString, (, c, ), ;, }, }, private, void, validateString, (, Node, n, ), {, validateNodeType, (, Token]
[., getNext, (, ), ), {, validateString, (, c, ), ;, }, }, private, void, validateString, (, Node, n, )]
[;, }, }, private, void, validateString, (, Node, n, ), {, validateNodeType, (, Token, ., STRING, ,, n, ), ;]
[), ;, }, }, private, void, validateString, (, Node, n, ), {, validateNodeType, (, Token, ., STRING, ,, n, )]
[;, validateChildCount, (, n, ,, 0, ), ;, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException]
[,, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, try, {, n, ., getString, (, ), ;, }]
[., STRING, ,, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, try, {, n, ., getString, (, )]
[), ;, validateChildCount, (, n, ,, 0, ), ;, try, {, n, ., getString, (, ), ;, }, catch, (]
[;, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "Invalid STRING node.", ,]
[,, 0, ), ;, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation]
[), ;, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "Invalid STRING node."]
[;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "Invalid STRING node.", ,, n, ), ;, }, }, private, void, validateNumber]
[., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "Invalid STRING node.", ,, n, ), ;, }]
[;, }, }, private, void, validateNumber, (, Node, n, ), {, validateNodeType, (, Token, ., NUMBER, ,, n, ), ;]
[,, n, ), ;, }, }, private, void, validateNumber, (, Node, n, ), {, validateNodeType, (, Token, ., NUMBER, ,]
[), ;, }, }, private, void, validateNumber, (, Node, n, ), {, validateNodeType, (, Token, ., NUMBER, ,, n, )]
[;, validateChildCount, (, n, ,, 0, ), ;, try, {, n, ., getDouble, (, ), ;, }, catch, (, UnsupportedOperationException]
[,, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, try, {, n, ., getDouble, (, ), ;, }]
[., NUMBER, ,, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, try, {, n, ., getDouble, (, )]
[), ;, validateChildCount, (, n, ,, 0, ), ;, try, {, n, ., getDouble, (, ), ;, }, catch, (]
[;, try, {, n, ., getDouble, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "Invalid NUMBER node.", ,]
[,, 0, ), ;, try, {, n, ., getDouble, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation]
[), ;, try, {, n, ., getDouble, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "Invalid NUMBER node."]
[;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "Invalid NUMBER node.", ,, n, ), ;, }, }, private, void, validateArrayLit]
[., getDouble, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "Invalid NUMBER node.", ,, n, ), ;, }]
[;, }, }, private, void, validateArrayLit, (, Node, n, ), {, validateNodeType, (, Token, ., ARRAYLIT, ,, n, ), ;]
[,, n, ), ;, }, }, private, void, validateArrayLit, (, Node, n, ), {, validateNodeType, (, Token, ., ARRAYLIT, ,]
[), ;, }, }, private, void, validateArrayLit, (, Node, n, ), {, validateNodeType, (, Token, ., ARRAYLIT, ,, n, )]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c]
[., ARRAYLIT, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateOptionalExpression, (, c, ), ;, }]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateOptionalExpression, (]
[;, c, =, c, ., getNext, (, ), ), {, validateOptionalExpression, (, c, ), ;, }, }, private, void, validateObjectLit]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateOptionalExpression, (, c, ), ;, }, }, private]
[;, c, =, c, ., getNext, (, ), ), {, validateOptionalExpression, (, c, ), ;, }, }, private, void, validateObjectLit]
[=, c, ., getNext, (, ), ), {, validateOptionalExpression, (, c, ), ;, }, }, private, void, validateObjectLit, (, Node]
[), {, validateOptionalExpression, (, c, ), ;, }, }, private, void, validateObjectLit, (, Node, n, ), {, validateNodeType, (, Token]
[., getNext, (, ), ), {, validateOptionalExpression, (, c, ), ;, }, }, private, void, validateObjectLit, (, Node, n, )]
[;, }, }, private, void, validateObjectLit, (, Node, n, ), {, validateNodeType, (, Token, ., OBJECTLIT, ,, n, ), ;]
[), ;, }, }, private, void, validateObjectLit, (, Node, n, ), {, validateNodeType, (, Token, ., OBJECTLIT, ,, n, )]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c]
[., OBJECTLIT, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateObjectLitKey, (, c, ), ;, }]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateObjectLitKey, (]
[;, c, =, c, ., getNext, (, ), ), {, validateObjectLitKey, (, c, ), ;, }, }, private, void, validateObjectLitKey]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, validateObjectLitKey, (, c, ), ;, }, }, private]
[;, c, =, c, ., getNext, (, ), ), {, validateObjectLitKey, (, c, ), ;, }, }, private, void, validateObjectLitKey]
[=, c, ., getNext, (, ), ), {, validateObjectLitKey, (, c, ), ;, }, }, private, void, validateObjectLitKey, (, Node]
[), {, validateObjectLitKey, (, c, ), ;, }, }, private, void, validateObjectLitKey, (, Node, n, ), {, switch, (, n]
[., getNext, (, ), ), {, validateObjectLitKey, (, c, ), ;, }, }, private, void, validateObjectLitKey, (, Node, n, )]
[;, }, }, private, void, validateObjectLitKey, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {]
[), ;, }, }, private, void, validateObjectLitKey, (, Node, n, ), {, switch, (, n, ., getType, (, ), )]
[), {, case, Token, ., GETTER_DEF, :, validateObjectLitGetKey, (, n, ), ;, return, ;, case, Token, ., SETTER_DEF, :, validateObjectLitSetKey]
[., getType, (, ), ), {, case, Token, ., GETTER_DEF, :, validateObjectLitGetKey, (, n, ), ;, return, ;, case, Token]
[:, validateObjectLitGetKey, (, n, ), ;, return, ;, case, Token, ., SETTER_DEF, :, validateObjectLitSetKey, (, n, ), ;, return, ;]
[., GETTER_DEF, :, validateObjectLitGetKey, (, n, ), ;, return, ;, case, Token, ., SETTER_DEF, :, validateObjectLitSetKey, (, n, ), ;]
[;, return, ;, case, Token, ., SETTER_DEF, :, validateObjectLitSetKey, (, n, ), ;, return, ;, case, Token, ., STRING_KEY, :]
[), ;, return, ;, case, Token, ., SETTER_DEF, :, validateObjectLitSetKey, (, n, ), ;, return, ;, case, Token, ., STRING_KEY]
[:, validateObjectLitSetKey, (, n, ), ;, return, ;, case, Token, ., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;, return, ;]
[., SETTER_DEF, :, validateObjectLitSetKey, (, n, ), ;, return, ;, case, Token, ., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;]
[;, return, ;, case, Token, ., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;, return, ;, default, :, violation, (, "Expected object literal key expression but was "]
[), ;, return, ;, case, Token, ., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;, return, ;, default, :, violation, (]
[:, validateObjectLitStringKey, (, n, ), ;, return, ;, default, :, violation, (, "Expected object literal key expression but was ", +, Token, ., name, (, n, .]
[., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;, return, ;, default, :, violation, (, "Expected object literal key expression but was ", +, Token, ., name, (]
[;, return, ;, default, :, violation, (, "Expected object literal key expression but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,]
[), ;, return, ;, default, :, violation, (, "Expected object literal key expression but was ", +, Token, ., name, (, n, ., getType, (, ), )]
[;, }, }, private, void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType, (, Token, ., GETTER_DEF, ,, n, ), ;]
[,, n, ), ;, }, }, private, void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType, (, Token, ., GETTER_DEF, ,]
[+, Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateObjectLitGetKey]
[,, n, ), ;, }, }, private, void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType, (, Token, ., GETTER_DEF, ,]
[., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateObjectLitGetKey, (, Node]
[), ,, n, ), ;, }, }, private, void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType, (, Token, ., GETTER_DEF]
[., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType]
[), ;, }, }, private, void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType, (, Token, ., GETTER_DEF, ,, n, )]
[;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (]
[,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n]
[., GETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function]
[), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild]
[;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;]
[,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (]
[), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, )]
[;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !, function, .]
[), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !, function]
[;, validateFunctionExpression, (, function, ), ;, if, (, !, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty]
[., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !, function, ., getFirstChild, (, ), ., getString]
[;, if, (, !, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {, violation]
[), ;, if, (, !, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {]
[), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;]
[), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;]
[., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex]
[., getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams]
[., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, )]
[;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (, functionParams, ., hasChildren, (, ), )]
[,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (, functionParams, ., hasChildren]
[), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (, functionParams, ., hasChildren, (, )]
[;, if, (, functionParams, ., hasChildren, (, ), ), {, violation, (, "get methods must not have parameters.", ,, n, ), ;, }, }, private]
[., getChildAtIndex, (, 1, ), ;, if, (, functionParams, ., hasChildren, (, ), ), {, violation, (, "get methods must not have parameters.", ,, n]
[), ;, if, (, functionParams, ., hasChildren, (, ), ), {, violation, (, "get methods must not have parameters.", ,, n, ), ;, }, }]
[), {, violation, (, "get methods must not have parameters.", ,, n, ), ;, }, }, private, void, validateObjectLitSetKey, (, Node, n, ), {, validateNodeType]
[., hasChildren, (, ), ), {, violation, (, "get methods must not have parameters.", ,, n, ), ;, }, }, private, void, validateObjectLitSetKey, (, Node]
[;, }, }, private, void, validateObjectLitSetKey, (, Node, n, ), {, validateNodeType, (, Token, ., SETTER_DEF, ,, n, ), ;]
[,, n, ), ;, }, }, private, void, validateObjectLitSetKey, (, Node, n, ), {, validateNodeType, (, Token, ., SETTER_DEF, ,]
[), ;, }, }, private, void, validateObjectLitSetKey, (, Node, n, ), {, validateNodeType, (, Token, ., SETTER_DEF, ,, n, )]
[;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (]
[,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n]
[., SETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function]
[), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild]
[;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;]
[,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (]
[), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, )]
[;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !, function, .]
[), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !, function]
[;, validateFunctionExpression, (, function, ), ;, if, (, !, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty]
[., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !, function, ., getFirstChild, (, ), ., getString]
[;, if, (, !, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {, violation]
[), ;, if, (, !, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {]
[), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;]
[), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;]
[., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex]
[., getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams]
[., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, )]
[;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (, !, functionParams, ., hasOneChild, (, )]
[,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (, !, functionParams, .]
[), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (, !, functionParams, ., hasOneChild, (]
[;, if, (, !, functionParams, ., hasOneChild, (, ), ), {, violation, (, "set methods must have exactly one parameter.", ,, n, ), ;, }, }]
[., getChildAtIndex, (, 1, ), ;, if, (, !, functionParams, ., hasOneChild, (, ), ), {, violation, (, "set methods must have exactly one parameter.", ,]
[), ;, if, (, !, functionParams, ., hasOneChild, (, ), ), {, violation, (, "set methods must have exactly one parameter.", ,, n, ), ;, }]
[), {, violation, (, "set methods must have exactly one parameter.", ,, n, ), ;, }, }, private, void, validateObjectLitStringKey, (, Node, n, ), {, validateNodeType]
[), {, violation, (, "set methods must have exactly one parameter.", ,, n, ), ;, }, }, private, void, validateObjectLitStringKey, (, Node, n, ), {, validateNodeType]
[., hasOneChild, (, ), ), {, violation, (, "set methods must have exactly one parameter.", ,, n, ), ;, }, }, private, void, validateObjectLitStringKey, (, Node]
[;, }, }, private, void, validateObjectLitStringKey, (, Node, n, ), {, validateNodeType, (, Token, ., STRING_KEY, ,, n, ), ;]
[,, n, ), ;, }, }, private, void, validateObjectLitStringKey, (, Node, n, ), {, validateNodeType, (, Token, ., STRING_KEY, ,]
[), ;, }, }, private, void, validateObjectLitStringKey, (, Node, n, ), {, validateNodeType, (, Token, ., STRING_KEY, ,, n, )]
[;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, validateExpression, (, n, ., getFirstChild, (, )]
[,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, validateExpression, (, n, .]
[., STRING_KEY, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, validateExpression, (]
[), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, validateExpression, (, n, ., getFirstChild, (]
[;, validateObjectLiteralKeyName, (, n, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateObjectLiteralKeyName, (]
[,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private]
[), ;, validateObjectLiteralKeyName, (, n, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateObjectLiteralKeyName]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateObjectLiteralKeyName, (, Node, n, ), {, if]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateObjectLiteralKeyName, (, Node, n, ), {]
[;, }, private, void, validateObjectLiteralKeyName, (, Node, n, ), {, if, (, n, ., isQuotedString, (, ), ), {, try]
[), ;, }, private, void, validateObjectLiteralKeyName, (, Node, n, ), {, if, (, n, ., isQuotedString, (, ), ), {]
[., getFirstChild, (, ), ), ;, }, private, void, validateObjectLiteralKeyName, (, Node, n, ), {, if, (, n, ., isQuotedString]
[), {, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "getString failed for"]
[., isQuotedString, (, ), ), {, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, )]
[;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "getString failed for", +, Token, ., name, (, n, ., getType, (]
[., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "getString failed for", +, Token, ., name, (]
[;, }, }, else, {, validateNonEmptyString, (, n, ), ;, }, }, private, void, validateUnaryOp, (, Node, n, ), {]
[,, n, ), ;, }, }, else, {, validateNonEmptyString, (, n, ), ;, }, }, private, void, validateUnaryOp, (, Node]
[+, Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, else, {, validateNonEmptyString]
[,, n, ), ;, }, }, else, {, validateNonEmptyString, (, n, ), ;, }, }, private, void, validateUnaryOp, (, Node]
[., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, else, {, validateNonEmptyString, (, n]
[), ,, n, ), ;, }, }, else, {, validateNonEmptyString, (, n, ), ;, }, }, private, void, validateUnaryOp, (]
[., getType, (, ), ), ,, n, ), ;, }, }, else, {, validateNonEmptyString, (, n, ), ;, }, }]
[), ;, }, }, else, {, validateNonEmptyString, (, n, ), ;, }, }, private, void, validateUnaryOp, (, Node, n, )]
[;, }, }, private, void, validateUnaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (]
[), ;, }, }, private, void, validateUnaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 1, ), ;, validateExpression]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateBinaryOp, (, Node, n, ), {, validateChildCount]
[,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateBinaryOp, (, Node, n]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateBinaryOp, (, Node, n, ), {]
[;, }, private, void, validateBinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n]
[), ;, }, private, void, validateBinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (]
[., getFirstChild, (, ), ), ;, }, private, void, validateBinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 2]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }]
[,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, )]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;]
[;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateTrinaryOp, (, Node, n, ), {, validateChildCount]
[), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateTrinaryOp, (, Node, n, ), {]
[., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateTrinaryOp, (]
[;, }, private, void, validateTrinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 3, ), ;, Node, first, =]
[), ;, }, private, void, validateTrinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 3, ), ;, Node, first]
[., getLastChild, (, ), ), ;, }, private, void, validateTrinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 3]
[;, Node, first, =, n, ., getFirstChild, (, ), ;, validateExpression, (, first, ), ;, validateExpression, (, first, ., getNext]
[,, 3, ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, validateExpression, (, first, ), ;, validateExpression, (]
[), ;, Node, first, =, n, ., getFirstChild, (, ), ;, validateExpression, (, first, ), ;, validateExpression, (, first, .]
[;, validateExpression, (, first, ), ;, validateExpression, (, first, ., getNext, (, ), ), ;, validateExpression, (, n, ., getLastChild]
[., getFirstChild, (, ), ;, validateExpression, (, first, ), ;, validateExpression, (, first, ., getNext, (, ), ), ;, validateExpression]
[;, validateExpression, (, first, ., getNext, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }]
[), ;, validateExpression, (, first, ., getNext, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;]
[;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, violation, (, String, message, ,, Node, n]
[), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, violation, (, String, message, ,, Node]
[., getNext, (, ), ), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, violation, (]
[;, }, private, void, violation, (, String, message, ,, Node, n, ), {, violationHandler, ., handleViolation, (, message, ,, n]
[), ;, }, private, void, violation, (, String, message, ,, Node, n, ), {, violationHandler, ., handleViolation, (, message, ,]
[., getLastChild, (, ), ), ;, }, private, void, violation, (, String, message, ,, Node, n, ), {, violationHandler, .]
[;, }, private, void, validateNodeType, (, int, type, ,, Node, n, ), {, if, (, n, ., getType, (, )]
[., handleViolation, (, message, ,, n, ), ;, }, private, void, validateNodeType, (, int, type, ,, Node, n, ), {]
[,, n, ), ;, }, private, void, validateNodeType, (, int, type, ,, Node, n, ), {, if, (, n, .]
[), ;, }, private, void, validateNodeType, (, int, type, ,, Node, n, ), {, if, (, n, ., getType, (]
[), {, violation, (, "Expected ", +, Token, ., name, (, type, ), +, " but was ", +, Token, ., name, (, n]
[!=, type, ), {, violation, (, "Expected ", +, Token, ., name, (, type, ), +, " but was ", +, Token, ., name]
[., getType, (, ), !=, type, ), {, violation, (, "Expected ", +, Token, ., name, (, type, ), +, " but was "]
[), {, violation, (, "Expected ", +, Token, ., name, (, type, ), +, " but was ", +, Token, ., name, (, n]
[;, }, }, private, void, validateChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if]
[,, n, ), ;, }, }, private, void, validateChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =]
[+, Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateChildCount]
[+, " but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private]
[+, Token, ., name, (, type, ), +, " but was ", +, Token, ., name, (, n, ., getType, (, ), )]
[+, " but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private]
[., name, (, type, ), +, " but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,, n]
[), +, " but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }]
[+, Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateChildCount]
[,, n, ), ;, }, }, private, void, validateChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =]
[., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateChildCount, (, Node]
[), ,, n, ), ;, }, }, private, void, validateChildCount, (, Node, n, ,, int, i, ), {, boolean, valid]
[., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateChildCount, (, Node, n, ,, int, i]
[), ;, }, }, private, void, validateChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;]
[;, if, (, i, ==, 0, ), {, valid, =, !, n, ., hasChildren, (, ), ;, }, else, if]
[), {, valid, =, !, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 1, ), {]
[==, 0, ), {, valid, =, !, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 1]
[), {, valid, =, !, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 1, ), {]
[=, !, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 1, ), {, valid, =, n]
[;, }, else, if, (, i, ==, 1, ), {, valid, =, n, ., hasOneChild, (, ), ;, }, else]
[;, }, else, if, (, i, ==, 1, ), {, valid, =, n, ., hasOneChild, (, ), ;, }, else]
[., hasChildren, (, ), ;, }, else, if, (, i, ==, 1, ), {, valid, =, n, ., hasOneChild, (]
[), {, valid, =, n, ., hasOneChild, (, ), ;, }, else, {, valid, =, (, n, ., getChildCount, (]
[==, 1, ), {, valid, =, n, ., hasOneChild, (, ), ;, }, else, {, valid, =, (, n, .]
[), {, valid, =, n, ., hasOneChild, (, ), ;, }, else, {, valid, =, (, n, ., getChildCount, (]
[=, n, ., hasOneChild, (, ), ;, }, else, {, valid, =, (, n, ., getChildCount, (, ), ==, i]
[;, }, else, {, valid, =, (, n, ., getChildCount, (, ), ==, i, ), ;, }, if, (, !]
[., hasOneChild, (, ), ;, }, else, {, valid, =, (, n, ., getChildCount, (, ), ==, i, ), ;]
[=, (, n, ., getChildCount, (, ), ==, i, ), ;, }, if, (, !, valid, ), {, violation, (]
[;, }, if, (, !, valid, ), {, violation, (, "Expected ", +, i, +, " children, but was ", +, n, ., getChildCount, (]
[), ;, }, if, (, !, valid, ), {, violation, (, "Expected ", +, i, +, " children, but was ", +, n, ., getChildCount]
[==, i, ), ;, }, if, (, !, valid, ), {, violation, (, "Expected ", +, i, +, " children, but was ", +, n]
[., getChildCount, (, ), ==, i, ), ;, }, if, (, !, valid, ), {, violation, (, "Expected ", +, i]
[), ;, }, if, (, !, valid, ), {, violation, (, "Expected ", +, i, +, " children, but was ", +, n, ., getChildCount]
[), {, violation, (, "Expected ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }]
[), {, violation, (, "Expected ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }]
[;, }, }, private, void, validateMinimumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if]
[,, n, ), ;, }, }, private, void, validateMinimumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =]
[+, n, ., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMinimumChildCount, (, Node, n, ,, int]
[+, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMinimumChildCount, (, Node, n]
[+, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMinimumChildCount, (]
[+, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMinimumChildCount, (, Node, n]
[+, n, ., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMinimumChildCount, (, Node, n, ,, int]
[,, n, ), ;, }, }, private, void, validateMinimumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =]
[., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMinimumChildCount, (, Node, n, ,, int, i, )]
[), ;, }, }, private, void, validateMinimumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;]
[;, if, (, i, ==, 1, ), {, valid, =, n, ., hasChildren, (, ), ;, }, else, if, (]
[), {, valid, =, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 2, ), {, valid]
[==, 1, ), {, valid, =, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 2, )]
[), {, valid, =, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 2, ), {, valid]
[=, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 2, ), {, valid, =, n, .]
[;, }, else, if, (, i, ==, 2, ), {, valid, =, n, ., hasMoreThanOneChild, (, ), ;, }, else]
[., hasChildren, (, ), ;, }, else, if, (, i, ==, 2, ), {, valid, =, n, ., hasMoreThanOneChild, (]
[), {, valid, =, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (, )]
[==, 2, ), {, valid, =, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount]
[), {, valid, =, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (, )]
[=, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (, ), >=, i, ;]
[;, }, else, {, valid, =, n, ., getChildCount, (, ), >=, i, ;, }, if, (, !, valid, )]
[., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (, ), >=, i, ;, }, if]
[=, n, ., getChildCount, (, ), >=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected at least ", +]
[;, }, if, (, !, valid, ), {, violation, (, "Expected at least ", +, i, +, " children, but was ", +, n, ., getChildCount, (]
[>=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected at least ", +, i, +, " children, but was ", +, n, .]
[., getChildCount, (, ), >=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected at least ", +, i, +]
[;, }, if, (, !, valid, ), {, violation, (, "Expected at least ", +, i, +, " children, but was ", +, n, ., getChildCount, (]
[), {, violation, (, "Expected at least ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }]
[), {, violation, (, "Expected at least ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }]
[;, }, }, private, void, validateMaximumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if]
[,, n, ), ;, }, }, private, void, validateMaximumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =]
[+, n, ., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMaximumChildCount, (, Node, n, ,, int]
[+, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMaximumChildCount, (, Node, n]
[+, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMaximumChildCount, (]
[+, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMaximumChildCount, (, Node, n]
[+, n, ., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMaximumChildCount, (, Node, n, ,, int]
[,, n, ), ;, }, }, private, void, validateMaximumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =]
[., getChildCount, (, ), ,, n, ), ;, }, }, private, void, validateMaximumChildCount, (, Node, n, ,, int, i, )]
[), ;, }, }, private, void, validateMaximumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;]
[;, if, (, i, ==, 1, ), {, valid, =, !, n, ., hasMoreThanOneChild, (, ), ;, }, else, {]
[), {, valid, =, !, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (]
[==, 1, ), {, valid, =, !, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, .]
[), {, valid, =, !, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (]
[=, !, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (, ), <=, i]
[;, }, else, {, valid, =, n, ., getChildCount, (, ), <=, i, ;, }, if, (, !, valid, )]
[;, }, else, {, valid, =, n, ., getChildCount, (, ), <=, i, ;, }, if, (, !, valid, )]
[., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (, ), <=, i, ;, }, if]
[=, n, ., getChildCount, (, ), <=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected no more than ", +]
[;, }, if, (, !, valid, ), {, violation, (, "Expected no more than ", +, i, +, " children, but was ", +, n, ., getChildCount, (]
[<=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected no more than ", +, i, +, " children, but was ", +, n, .]
[., getChildCount, (, ), <=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected no more than ", +, i, +]
[;, }, if, (, !, valid, ), {, violation, (, "Expected no more than ", +, i, +, " children, but was ", +, n, ., getChildCount, (]
[), {, violation, (, "Expected no more than ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }]
[), {, violation, (, "Expected no more than ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }]
[;, }, }, }]
[,, n, ), ;, }, }, }]
[+, n, ., getChildCount, (, ), ,, n, ), ;, }, }, }]
[+, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }, }, }]
[+, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }, }, }]
[+, " children, but was ", +, n, ., getChildCount, (, ), ,, n, ), ;, }, }, }]
[+, n, ., getChildCount, (, ), ,, n, ), ;, }, }, }]
[,, n, ), ;, }, }, }]
[., getChildCount, (, ), ,, n, ), ;, }, }, }]
[), ;, }, }, }]
