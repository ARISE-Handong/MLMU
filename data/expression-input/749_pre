[Node, root, ;, private, final, Node, externsRoot, ;, private, boolean, inExterns, ;, private, Scope, externsScope, ;, private, boolean, generated, =]
[externsRoot, ;, private, boolean, inExterns, ;, private, Scope, externsScope, ;, private, boolean, generated, =, false, ;, private, int, currentPreOrderIndex, =]
[;, private, boolean, generated, =, false, ;, private, int, currentPreOrderIndex, =, 0, ;, private, List, <, Name, >, globalNames, =]
[>, globalNames, =, new, ArrayList, <, Name, >, (, ), ;, private, Map, <, String, ,, Name, >, nameMap, =]
[HashMap, <, String, ,, Name, >, (, ), ;, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, root, ), {, this, (]
[String, ,, Name, >, (, ), ;, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, root, ), {, this, (, compiler, ,]
[Name, >, (, ), ;, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, root, ), {, this, (, compiler, ,, null, ,]
[compiler, ,, null, ,, root, ), ;, }, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, externsRoot, ,, Node, root, ), {]
[compiler, ,, null, ,, root, ), ;, }, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, externsRoot, ,, Node, root, ), {]
[root, ), ;, }, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, externsRoot, ,, Node, root, ), {, this, ., compiler, =]
[;, }, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, externsRoot, ,, Node, root, ), {, this, ., compiler, =, compiler, ;]
[;, }, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, externsRoot, ,, Node, root, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, Node, externsRoot, ,, Node, root, ), {, this, ., compiler, =, compiler, ;, this, ., externsRoot, =]
[,, Node, externsRoot, ,, Node, root, ), {, this, ., compiler, =, compiler, ;, this, ., externsRoot, =, externsRoot, ;]
[,, Node, externsRoot, ,, Node, root, ), {, this, ., compiler, =, compiler, ;, this, ., externsRoot, =, externsRoot, ;]
[Node, root, ), {, this, ., compiler, =, compiler, ;, this, ., externsRoot, =, externsRoot, ;, this, ., root, =]
[;, this, ., externsRoot, =, externsRoot, ;, this, ., root, =, root, ;, }, boolean, hasExternsRoot, (, ), {, return]
[;, this, ., externsRoot, =, externsRoot, ;, this, ., root, =, root, ;, }, boolean, hasExternsRoot, (, ), {, return]
[., externsRoot, =, externsRoot, ;, this, ., root, =, root, ;, }, boolean, hasExternsRoot, (, ), {, return, externsRoot, !=]
[boolean, hasExternsRoot, (, ), {, return, externsRoot, !=, null, ;, }, @, Override, public, Node, getRootNode, (, ), {, return]
[boolean, hasExternsRoot, (, ), {, return, externsRoot, !=, null, ;, }, @, Override, public, Node, getRootNode, (, ), {, return]
[return, root, ., getParent, (, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, ), {, return]
[>, getParentScope, (, ), {, return, null, ;, }, @, Override, public, Name, getSlot, (, String, name, ), {, return]
[(, ), {, return, null, ;, }, @, Override, public, Name, getSlot, (, String, name, ), {, return, getOwnSlot, (]
[name, ), {, return, getOwnSlot, (, name, ), ;, }, @, Override, public, Name, getOwnSlot, (, String, name, ), {]
[(, name, ), ;, }, @, Override, public, Name, getOwnSlot, (, String, name, ), {, ensureGenerated, (, ), ;, return]
[(, name, ), ;, }, @, Override, public, Name, getOwnSlot, (, String, name, ), {, ensureGenerated, (, ), ;, return]
[}, @, Override, public, Name, getOwnSlot, (, String, name, ), {, ensureGenerated, (, ), ;, return, nameMap, ., get, (]
[), ;, return, nameMap, ., get, (, name, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return]
[), ;, return, nameMap, ., get, (, name, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return]
[), ;, return, nameMap, ., get, (, name, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return]
[), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, compiler, ., getTypeRegistry, (, ), ., getNativeObjectType, (]
[., getNativeObjectType, (, GLOBAL_THIS, ), ;, }, @, Override, public, Iterable, <, Ref, >, getReferences, (, Name, slot, ), {]
[;, }, @, Override, public, Iterable, <, Ref, >, getReferences, (, Name, slot, ), {, ensureGenerated, (, ), ;, return]
[;, }, @, Override, public, Iterable, <, Ref, >, getReferences, (, Name, slot, ), {, ensureGenerated, (, ), ;, return]
[public, Iterable, <, Ref, >, getReferences, (, Name, slot, ), {, ensureGenerated, (, ), ;, return, Collections, ., unmodifiableList, (]
[public, Iterable, <, Ref, >, getReferences, (, Name, slot, ), {, ensureGenerated, (, ), ;, return, Collections, ., unmodifiableList, (]
[getRefs, (, ), ), ;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, Name, slot, ), {, return]
[(, Name, slot, ), {, return, this, ;, }, @, Override, public, Iterable, <, Name, >, getAllSymbols, (, ), {]
[return, this, ;, }, @, Override, public, Iterable, <, Name, >, getAllSymbols, (, ), {, ensureGenerated, (, ), ;, return]
[return, this, ;, }, @, Override, public, Iterable, <, Name, >, getAllSymbols, (, ), {, ensureGenerated, (, ), ;, return]
[@, Override, public, Iterable, <, Name, >, getAllSymbols, (, ), {, ensureGenerated, (, ), ;, return, Collections, ., unmodifiableCollection, (]
[@, Override, public, Iterable, <, Name, >, getAllSymbols, (, ), {, ensureGenerated, (, ), ;, return, Collections, ., unmodifiableCollection, (]
[unmodifiableCollection, (, getNameIndex, (, ), ., values, (, ), ), ;, }, private, void, ensureGenerated, (, ), {, if, (]
[(, getNameIndex, (, ), ., values, (, ), ), ;, }, private, void, ensureGenerated, (, ), {, if, (, !]
[), ., values, (, ), ), ;, }, private, void, ensureGenerated, (, ), {, if, (, !, generated, ), {]
[if, (, !, generated, ), {, process, (, ), ;, }, }, List, <, Name, >, getNameForest, (, ), {]
[{, process, (, ), ;, }, }, List, <, Name, >, getNameForest, (, ), {, ensureGenerated, (, ), ;, return]
[), {, ensureGenerated, (, ), ;, return, globalNames, ;, }, Map, <, String, ,, Name, >, getNameIndex, (, ), {]
[;, return, globalNames, ;, }, Map, <, String, ,, Name, >, getNameIndex, (, ), {, ensureGenerated, (, ), ;, return]
[return, nameMap, ;, }, void, scanNewNodes, (, Scope, scope, ,, Set, <, Node, >, newNodes, ), {, NodeTraversal, t, =]
[}, void, scanNewNodes, (, Scope, scope, ,, Set, <, Node, >, newNodes, ), {, NodeTraversal, t, =, new, NodeTraversal, (]
[scanNewNodes, (, Scope, scope, ,, Set, <, Node, >, newNodes, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,]
[scope, ,, Set, <, Node, >, newNodes, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, new, BuildGlobalNamespace, (]
[<, Node, >, newNodes, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, new, BuildGlobalNamespace, (, new, NodeFilter, (]
[{, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, new, BuildGlobalNamespace, (, new, NodeFilter, (, newNodes, ), ), ), ;]
[{, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, new, BuildGlobalNamespace, (, new, NodeFilter, (, newNodes, ), ), ), ;]
[new, NodeTraversal, (, compiler, ,, new, BuildGlobalNamespace, (, new, NodeFilter, (, newNodes, ), ), ), ;, t, ., traverseAtScope, (]
[Node, >, {, private, final, Set, <, Node, >, newNodes, ;, NodeFilter, (, Set, <, Node, >, newNodes, ), {]
[Node, >, {, private, final, Set, <, Node, >, newNodes, ;, NodeFilter, (, Set, <, Node, >, newNodes, ), {]
[final, Set, <, Node, >, newNodes, ;, NodeFilter, (, Set, <, Node, >, newNodes, ), {, this, ., newNodes, =]
[{, this, ., newNodes, =, newNodes, ;, }, @, Override, public, boolean, apply, (, Node, n, ), {, if, (]
[this, ., newNodes, =, newNodes, ;, }, @, Override, public, boolean, apply, (, Node, n, ), {, if, (, !]
[this, ., newNodes, =, newNodes, ;, }, @, Override, public, boolean, apply, (, Node, n, ), {, if, (, !]
[Override, public, boolean, apply, (, Node, n, ), {, if, (, !, n, ., isQualifiedName, (, ), ), {, return]
[{, if, (, !, n, ., isQualifiedName, (, ), ), {, return, false, ;, }, Node, current, ;, for, (]
[(, !, n, ., isQualifiedName, (, ), ), {, return, false, ;, }, Node, current, ;, for, (, current, =]
[n, ., isQualifiedName, (, ), ), {, return, false, ;, }, Node, current, ;, for, (, current, =, n, ;]
[n, ., isQualifiedName, (, ), ), {, return, false, ;, }, Node, current, ;, for, (, current, =, n, ;]
[{, return, false, ;, }, Node, current, ;, for, (, current, =, n, ;, current, ., isGetProp, (, ), ;]
[false, ;, }, Node, current, ;, for, (, current, =, n, ;, current, ., isGetProp, (, ), ;, current, =]
[false, ;, }, Node, current, ;, for, (, current, =, n, ;, current, ., isGetProp, (, ), ;, current, =]
[=, n, ;, current, ., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, if, (]
[=, n, ;, current, ., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, if, (]
[., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, if, (, newNodes, ., contains, (]
[current, =, current, ., getFirstChild, (, ), ), {, if, (, newNodes, ., contains, (, current, ), ), {, return]
[(, ), ), {, if, (, newNodes, ., contains, (, current, ), ), {, return, true, ;, }, }, return]
[(, ), ), {, if, (, newNodes, ., contains, (, current, ), ), {, return, true, ;, }, }, return]
[(, ), ), {, if, (, newNodes, ., contains, (, current, ), ), {, return, true, ;, }, }, return]
[newNodes, ., contains, (, current, ), ), {, return, true, ;, }, }, return, current, ., isName, (, ), &&]
[newNodes, ., contains, (, current, ), ), {, return, true, ;, }, }, return, current, ., isName, (, ), &&]
[current, ), ), {, return, true, ;, }, }, return, current, ., isName, (, ), &&, newNodes, ., contains, (]
[(, ), &&, newNodes, ., contains, (, current, ), ;, }, }, private, void, process, (, ), {, if, (]
[(, ), &&, newNodes, ., contains, (, current, ), ;, }, }, private, void, process, (, ), {, if, (]
[&&, newNodes, ., contains, (, current, ), ;, }, }, private, void, process, (, ), {, if, (, externsRoot, !=]
[contains, (, current, ), ;, }, }, private, void, process, (, ), {, if, (, externsRoot, !=, null, ), {]
[current, ), ;, }, }, private, void, process, (, ), {, if, (, externsRoot, !=, null, ), {, inExterns, =]
[;, }, }, private, void, process, (, ), {, if, (, externsRoot, !=, null, ), {, inExterns, =, true, ;]
[;, }, }, private, void, process, (, ), {, if, (, externsRoot, !=, null, ), {, inExterns, =, true, ;]
[void, process, (, ), {, if, (, externsRoot, !=, null, ), {, inExterns, =, true, ;, NodeTraversal, ., traverse, (]
[(, ), {, if, (, externsRoot, !=, null, ), {, inExterns, =, true, ;, NodeTraversal, ., traverse, (, compiler, ,]
[{, if, (, externsRoot, !=, null, ), {, inExterns, =, true, ;, NodeTraversal, ., traverse, (, compiler, ,, externsRoot, ,]
[{, inExterns, =, true, ;, NodeTraversal, ., traverse, (, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;, }]
[=, true, ;, NodeTraversal, ., traverse, (, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;, }, inExterns, =]
[;, NodeTraversal, ., traverse, (, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;, }, inExterns, =, false, ;]
[;, NodeTraversal, ., traverse, (, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;, }, inExterns, =, false, ;]
[(, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;, }, inExterns, =, false, ;, NodeTraversal, ., traverse, (]
[,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;, }, inExterns, =, false, ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, new, BuildGlobalNamespace, (, ), ), ;, }, inExterns, =, false, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, }, inExterns, =, false, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, BuildGlobalNamespace, (, ), ), ;]
[inExterns, =, false, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, BuildGlobalNamespace, (, ), ), ;, generated, =]
[;, generated, =, true, ;, }, private, boolean, isGlobalNameReference, (, String, name, ,, Scope, s, ), {, String, topVarName, =]
[=, true, ;, }, private, boolean, isGlobalNameReference, (, String, name, ,, Scope, s, ), {, String, topVarName, =, getTopVarName, (]
[private, boolean, isGlobalNameReference, (, String, name, ,, Scope, s, ), {, String, topVarName, =, getTopVarName, (, name, ), ;, return]
[isGlobalNameReference, (, String, name, ,, Scope, s, ), {, String, topVarName, =, getTopVarName, (, name, ), ;, return, isGlobalVarReference, (]
[String, name, ,, Scope, s, ), {, String, topVarName, =, getTopVarName, (, name, ), ;, return, isGlobalVarReference, (, topVarName, ,]
[return, isGlobalVarReference, (, topVarName, ,, s, ), ;, }, private, String, getTopVarName, (, String, name, ), {, int, firstDotIndex, =]
[return, isGlobalVarReference, (, topVarName, ,, s, ), ;, }, private, String, getTopVarName, (, String, name, ), {, int, firstDotIndex, =]
[,, s, ), ;, }, private, String, getTopVarName, (, String, name, ), {, int, firstDotIndex, =, name, ., indexOf, (]
[}, private, String, getTopVarName, (, String, name, ), {, int, firstDotIndex, =, name, ., indexOf, (, '.', ), ;, return]
[}, private, String, getTopVarName, (, String, name, ), {, int, firstDotIndex, =, name, ., indexOf, (, '.', ), ;, return]
[}, private, String, getTopVarName, (, String, name, ), {, int, firstDotIndex, =, name, ., indexOf, (, '.', ), ;, return]
[String, getTopVarName, (, String, name, ), {, int, firstDotIndex, =, name, ., indexOf, (, '.', ), ;, return, firstDotIndex, ==]
[getTopVarName, (, String, name, ), {, int, firstDotIndex, =, name, ., indexOf, (, '.', ), ;, return, firstDotIndex, ==, -]
[String, name, ), {, int, firstDotIndex, =, name, ., indexOf, (, '.', ), ;, return, firstDotIndex, ==, -, 1, ?]
[), {, int, firstDotIndex, =, name, ., indexOf, (, '.', ), ;, return, firstDotIndex, ==, -, 1, ?, name, :]
[), {, int, firstDotIndex, =, name, ., indexOf, (, '.', ), ;, return, firstDotIndex, ==, -, 1, ?, name, :]
[=, name, ., indexOf, (, '.', ), ;, return, firstDotIndex, ==, -, 1, ?, name, :, name, ., substring, (]
[., indexOf, (, '.', ), ;, return, firstDotIndex, ==, -, 1, ?, name, :, name, ., substring, (, 0, ,]
[firstDotIndex, ), ;, }, private, boolean, isGlobalVarReference, (, String, name, ,, Scope, s, ), {, Scope, ., Var, v, =]
[firstDotIndex, ), ;, }, private, boolean, isGlobalVarReference, (, String, name, ,, Scope, s, ), {, Scope, ., Var, v, =]
[private, boolean, isGlobalVarReference, (, String, name, ,, Scope, s, ), {, Scope, ., Var, v, =, s, ., getVar, (]
[name, ,, Scope, s, ), {, Scope, ., Var, v, =, s, ., getVar, (, name, ), ;, if, (]
[name, ,, Scope, s, ), {, Scope, ., Var, v, =, s, ., getVar, (, name, ), ;, if, (]
[name, ,, Scope, s, ), {, Scope, ., Var, v, =, s, ., getVar, (, name, ), ;, if, (]
[Scope, s, ), {, Scope, ., Var, v, =, s, ., getVar, (, name, ), ;, if, (, v, ==]
[), {, Scope, ., Var, v, =, s, ., getVar, (, name, ), ;, if, (, v, ==, null, &&]
[), {, Scope, ., Var, v, =, s, ., getVar, (, name, ), ;, if, (, v, ==, null, &&]
[Scope, ., Var, v, =, s, ., getVar, (, name, ), ;, if, (, v, ==, null, &&, externsScope, !=]
[v, =, s, ., getVar, (, name, ), ;, if, (, v, ==, null, &&, externsScope, !=, null, ), {]
[s, ., getVar, (, name, ), ;, if, (, v, ==, null, &&, externsScope, !=, null, ), {, v, =]
[s, ., getVar, (, name, ), ;, if, (, v, ==, null, &&, externsScope, !=, null, ), {, v, =]
[name, ), ;, if, (, v, ==, null, &&, externsScope, !=, null, ), {, v, =, externsScope, ., getVar, (]
[v, ==, null, &&, externsScope, !=, null, ), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return]
[v, ==, null, &&, externsScope, !=, null, ), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return]
[v, ==, null, &&, externsScope, !=, null, ), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return]
[null, &&, externsScope, !=, null, ), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return, v, !=]
[externsScope, !=, null, ), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return, v, !=, null, &&]
[!=, null, ), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return, v, !=, null, &&, !]
[!=, null, ), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return, v, !=, null, &&, !]
[!=, null, &&, !, v, ., isLocal, (, ), ;, }, private, boolean, isGlobalScope, (, Scope, s, ), {, return]
[!=, null, &&, !, v, ., isLocal, (, ), ;, }, private, boolean, isGlobalScope, (, Scope, s, ), {, return]
[!=, null, &&, !, v, ., isLocal, (, ), ;, }, private, boolean, isGlobalScope, (, Scope, s, ), {, return]
[isLocal, (, ), ;, }, private, boolean, isGlobalScope, (, Scope, s, ), {, return, s, ., getParent, (, ), ==]
[BuildGlobalNamespace, implements, NodeTraversal, ., Callback, {, private, final, Predicate, <, Node, >, nodeFilter, ;, BuildGlobalNamespace, (, ), {, this, (]
[;, BuildGlobalNamespace, (, ), {, this, (, null, ), ;, }, BuildGlobalNamespace, (, Predicate, <, Node, >, nodeFilter, ), {]
[;, BuildGlobalNamespace, (, ), {, this, (, null, ), ;, }, BuildGlobalNamespace, (, Predicate, <, Node, >, nodeFilter, ), {]
[{, this, (, null, ), ;, }, BuildGlobalNamespace, (, Predicate, <, Node, >, nodeFilter, ), {, this, ., nodeFilter, =]
[parent, ), {, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[{, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, collect, (]
[@, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, collect, (, t, ,]
[public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, collect, (, t, ,, n, ,]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, collect, (, t, ,, n, ,, parent, ), ;, return]
[return, true, ;, }, public, void, collect, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[return, true, ;, }, public, void, collect, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[return, true, ;, }, public, void, collect, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, public, void, collect, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, nodeFilter, !=]
[public, void, collect, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, nodeFilter, !=, null, &&]
[void, collect, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, nodeFilter, !=, null, &&, !]
[void, collect, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, nodeFilter, !=, null, &&, !]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, nodeFilter, !=, null, &&, !, nodeFilter, ., apply, (]
[if, (, nodeFilter, !=, null, &&, !, nodeFilter, ., apply, (, n, ), ), {, return, ;, }, if, (]
[if, (, nodeFilter, !=, null, &&, !, nodeFilter, ., apply, (, n, ), ), {, return, ;, }, if, (]
[if, (, nodeFilter, !=, null, &&, !, nodeFilter, ., apply, (, n, ), ), {, return, ;, }, if, (]
[nodeFilter, !=, null, &&, !, nodeFilter, ., apply, (, n, ), ), {, return, ;, }, if, (, externsRoot, !=]
[null, &&, !, nodeFilter, ., apply, (, n, ), ), {, return, ;, }, if, (, externsRoot, !=, null, &&]
[null, &&, !, nodeFilter, ., apply, (, n, ), ), {, return, ;, }, if, (, externsRoot, !=, null, &&]
[!, nodeFilter, ., apply, (, n, ), ), {, return, ;, }, if, (, externsRoot, !=, null, &&, n, ==]
[apply, (, n, ), ), {, return, ;, }, if, (, externsRoot, !=, null, &&, n, ==, externsRoot, ), {]
[n, ), ), {, return, ;, }, if, (, externsRoot, !=, null, &&, n, ==, externsRoot, ), {, externsScope, =]
[n, ), ), {, return, ;, }, if, (, externsRoot, !=, null, &&, n, ==, externsRoot, ), {, externsScope, =]
[n, ==, externsRoot, ), {, externsScope, =, t, ., getScope, (, ), ;, }, String, name, ;, boolean, isSet, =]
[t, ., getScope, (, ), ;, }, String, name, ;, boolean, isSet, =, false, ;, Name, ., Type, type, =]
[t, ., getScope, (, ), ;, }, String, name, ;, boolean, isSet, =, false, ;, Name, ., Type, type, =]
[t, ., getScope, (, ), ;, }, String, name, ;, boolean, isSet, =, false, ;, Name, ., Type, type, =]
[;, boolean, isSet, =, false, ;, Name, ., Type, type, =, Name, ., Type, ., OTHER, ;, boolean, isPropAssign, =]
[false, ;, Name, ., Type, type, =, Name, ., Type, ., OTHER, ;, boolean, isPropAssign, =, false, ;, switch, (]
[false, ;, Name, ., Type, type, =, Name, ., Type, ., OTHER, ;, boolean, isPropAssign, =, false, ;, switch, (]
[., Type, ., OTHER, ;, boolean, isPropAssign, =, false, ;, switch, (, n, ., getType, (, ), ), {, case]
[., Type, ., OTHER, ;, boolean, isPropAssign, =, false, ;, switch, (, n, ., getType, (, ), ), {, case]
[boolean, isPropAssign, =, false, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETTER_DEF, :, case]
[boolean, isPropAssign, =, false, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETTER_DEF, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, case]
[getType, (, ), ), {, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY, :]
[), ), {, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY, :, name, =]
[Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY, :, name, =, null, ;, if, (]
[Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY, :, name, =, null, ;, if, (]
[Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY, :, name, =, null, ;, if, (]
[GETTER_DEF, :, case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY, :, name, =, null, ;, if, (, parent, !=]
[case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY, :, name, =, null, ;, if, (, parent, !=, null, &&]
[case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY, :, name, =, null, ;, if, (, parent, !=, null, &&]
[., STRING_KEY, :, name, =, null, ;, if, (, parent, !=, null, &&, parent, ., isObjectLit, (, ), ), {]
[:, name, =, null, ;, if, (, parent, !=, null, &&, parent, ., isObjectLit, (, ), ), {, name, =]
[=, null, ;, if, (, parent, !=, null, &&, parent, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (]
[!=, null, &&, parent, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, n, ), ;, }, if, (]
[!=, null, &&, parent, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, n, ), ;, }, if, (]
[&&, parent, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, n, ), ;, }, if, (, name, ==]
[(, ), ), {, name, =, getNameForObjLitKey, (, n, ), ;, }, if, (, name, ==, null, ), return, ;]
[), {, name, =, getNameForObjLitKey, (, n, ), ;, }, if, (, name, ==, null, ), return, ;, isSet, =]
[getNameForObjLitKey, (, n, ), ;, }, if, (, name, ==, null, ), return, ;, isSet, =, true, ;, switch, (]
[getNameForObjLitKey, (, n, ), ;, }, if, (, name, ==, null, ), return, ;, isSet, =, true, ;, switch, (]
[name, ==, null, ), return, ;, isSet, =, true, ;, switch, (, n, ., getType, (, ), ), {, case]
[name, ==, null, ), return, ;, isSet, =, true, ;, switch, (, n, ., getType, (, ), ), {, case]
[return, ;, isSet, =, true, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :]
[isSet, =, true, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, type, =]
[true, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, type, =, getValueType, (]
[true, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, type, =, getValueType, (]
[{, case, Token, ., STRING_KEY, :, type, =, getValueType, (, n, ., getFirstChild, (, ), ), ;, break, ;, case]
[{, case, Token, ., STRING_KEY, :, type, =, getValueType, (, n, ., getFirstChild, (, ), ), ;, break, ;, case]
[STRING_KEY, :, type, =, getValueType, (, n, ., getFirstChild, (, ), ), ;, break, ;, case, Token, ., GETTER_DEF, :]
[type, =, getValueType, (, n, ., getFirstChild, (, ), ), ;, break, ;, case, Token, ., GETTER_DEF, :, type, =]
[type, =, getValueType, (, n, ., getFirstChild, (, ), ), ;, break, ;, case, Token, ., GETTER_DEF, :, type, =]
[type, =, getValueType, (, n, ., getFirstChild, (, ), ), ;, break, ;, case, Token, ., GETTER_DEF, :, type, =]
[), ;, break, ;, case, Token, ., GETTER_DEF, :, type, =, Name, ., Type, ., GET, ;, break, ;, case]
[), ;, break, ;, case, Token, ., GETTER_DEF, :, type, =, Name, ., Type, ., GET, ;, break, ;, case]
[case, Token, ., GETTER_DEF, :, type, =, Name, ., Type, ., GET, ;, break, ;, case, Token, ., SETTER_DEF, :]
[., GETTER_DEF, :, type, =, Name, ., Type, ., GET, ;, break, ;, case, Token, ., SETTER_DEF, :, type, =]
[., GETTER_DEF, :, type, =, Name, ., Type, ., GET, ;, break, ;, case, Token, ., SETTER_DEF, :, type, =]
[., GETTER_DEF, :, type, =, Name, ., Type, ., GET, ;, break, ;, case, Token, ., SETTER_DEF, :, type, =]
[break, ;, case, Token, ., SETTER_DEF, :, type, =, Name, ., Type, ., SET, ;, break, ;, default, :, throw]
[Token, ., SETTER_DEF, :, type, =, Name, ., Type, ., SET, ;, break, ;, default, :, throw, new, IllegalStateException, (]
[Token, ., SETTER_DEF, :, type, =, Name, ., Type, ., SET, ;, break, ;, default, :, throw, new, IllegalStateException, (]
[SETTER_DEF, :, type, =, Name, ., Type, ., SET, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected:", +]
[., SET, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected:", +, n, ), ;, }, break, ;, case]
[., SET, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected:", +, n, ), ;, }, break, ;, case]
[:, throw, new, IllegalStateException, (, "unexpected:", +, n, ), ;, }, break, ;, case, Token, ., NAME, :, if, (]
[:, throw, new, IllegalStateException, (, "unexpected:", +, n, ), ;, }, break, ;, case, Token, ., NAME, :, if, (]
[new, IllegalStateException, (, "unexpected:", +, n, ), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, !=]
[n, ), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, !=, null, ), {, switch, (]
[n, ), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, !=, null, ), {, switch, (]
[., NAME, :, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[., NAME, :, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[(, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :]
[!=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, isSet, =]
[(, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, isSet, =, true, ;, Node, rvalue, =]
[(, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, isSet, =, true, ;, Node, rvalue, =]
[), {, case, Token, ., VAR, :, isSet, =, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;]
[case, Token, ., VAR, :, isSet, =, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;, type, =]
[case, Token, ., VAR, :, isSet, =, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;, type, =]
[case, Token, ., VAR, :, isSet, =, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;, type, =]
[., VAR, :, isSet, =, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;, type, =, rvalue, ==]
[:, isSet, =, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;, type, =, rvalue, ==, null, ?]
[:, isSet, =, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;, type, =, rvalue, ==, null, ?]
[:, isSet, =, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;, type, =, rvalue, ==, null, ?]
[rvalue, =, n, ., getFirstChild, (, ), ;, type, =, rvalue, ==, null, ?, Name, ., Type, ., OTHER, :]
[n, ., getFirstChild, (, ), ;, type, =, rvalue, ==, null, ?, Name, ., Type, ., OTHER, :, getValueType, (]
[type, =, rvalue, ==, null, ?, Name, ., Type, ., OTHER, :, getValueType, (, rvalue, ), ;, break, ;, case]
[type, =, rvalue, ==, null, ?, Name, ., Type, ., OTHER, :, getValueType, (, rvalue, ), ;, break, ;, case]
[Name, ., Type, ., OTHER, :, getValueType, (, rvalue, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (]
[Name, ., Type, ., OTHER, :, getValueType, (, rvalue, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (]
[Name, ., Type, ., OTHER, :, getValueType, (, rvalue, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (]
[getValueType, (, rvalue, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==]
[), ;, break, ;, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {]
[break, ;, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =]
[case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;]
[., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =]
[:, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, getValueType, (]
[:, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, getValueType, (]
[{, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, }, break, ;, case]
[{, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, }, break, ;, case]
[getValueType, (, n, ., getNext, (, ), ), ;, }, break, ;, case, Token, ., GETPROP, :, return, ;, case]
[getValueType, (, n, ., getNext, (, ), ), ;, }, break, ;, case, Token, ., GETPROP, :, return, ;, case]
[), ;, }, break, ;, case, Token, ., GETPROP, :, return, ;, case, Token, ., FUNCTION, :, Node, gramps, =]
[), ;, }, break, ;, case, Token, ., GETPROP, :, return, ;, case, Token, ., FUNCTION, :, Node, gramps, =]
[GETPROP, :, return, ;, case, Token, ., FUNCTION, :, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[GETPROP, :, return, ;, case, Token, ., FUNCTION, :, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[GETPROP, :, return, ;, case, Token, ., FUNCTION, :, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[return, ;, case, Token, ., FUNCTION, :, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ==]
[case, Token, ., FUNCTION, :, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ==, null, ||]
[case, Token, ., FUNCTION, :, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ==, null, ||]
[:, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ==, null, ||, NodeUtil, ., isFunctionExpression, (]
[., getParent, (, ), ;, if, (, gramps, ==, null, ||, NodeUtil, ., isFunctionExpression, (, parent, ), ), return, ;]
[(, ), ;, if, (, gramps, ==, null, ||, NodeUtil, ., isFunctionExpression, (, parent, ), ), return, ;, isSet, =]
[;, if, (, gramps, ==, null, ||, NodeUtil, ., isFunctionExpression, (, parent, ), ), return, ;, isSet, =, true, ;]
[(, gramps, ==, null, ||, NodeUtil, ., isFunctionExpression, (, parent, ), ), return, ;, isSet, =, true, ;, type, =]
[(, gramps, ==, null, ||, NodeUtil, ., isFunctionExpression, (, parent, ), ), return, ;, isSet, =, true, ;, type, =]
[(, gramps, ==, null, ||, NodeUtil, ., isFunctionExpression, (, parent, ), ), return, ;, isSet, =, true, ;, type, =]
[parent, ), ), return, ;, isSet, =, true, ;, type, =, Name, ., Type, ., FUNCTION, ;, break, ;, case]
[parent, ), ), return, ;, isSet, =, true, ;, type, =, Name, ., Type, ., FUNCTION, ;, break, ;, case]
[isSet, =, true, ;, type, =, Name, ., Type, ., FUNCTION, ;, break, ;, case, Token, ., INC, :, case]
[isSet, =, true, ;, type, =, Name, ., Type, ., FUNCTION, ;, break, ;, case, Token, ., INC, :, case]
[type, =, Name, ., Type, ., FUNCTION, ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :]
[Name, ., Type, ., FUNCTION, ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =]
[Type, ., FUNCTION, ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;]
[FUNCTION, ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;, type, =]
[FUNCTION, ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;, type, =]
[FUNCTION, ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;, type, =]
[DEC, :, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, default, :, if, (]
[DEC, :, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, default, :, if, (]
[DEC, :, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, default, :, if, (]
[true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (]
[=, Name, ., Type, ., OTHER, ;, break, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[=, Name, ., Type, ., OTHER, ;, break, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[=, Name, ., Type, ., OTHER, ;, break, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[;, break, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==]
[default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;]
[isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =]
[isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =]
[isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =]
[), ==, n, ), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }]
[n, ), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =]
[n, ), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =]
[Name, ., Type, ., OTHER, ;, }, }, }, name, =, n, ., getString, (, ), ;, break, ;, case]
[Name, ., Type, ., OTHER, ;, }, }, }, name, =, n, ., getString, (, ), ;, break, ;, case]
[}, }, }, name, =, n, ., getString, (, ), ;, break, ;, case, Token, ., GETPROP, :, if, (]
[}, }, }, name, =, n, ., getString, (, ), ;, break, ;, case, Token, ., GETPROP, :, if, (]
[}, name, =, n, ., getString, (, ), ;, break, ;, case, Token, ., GETPROP, :, if, (, parent, !=]
[getString, (, ), ;, break, ;, case, Token, ., GETPROP, :, if, (, parent, !=, null, ), {, switch, (]
[getString, (, ), ;, break, ;, case, Token, ., GETPROP, :, if, (, parent, !=, null, ), {, switch, (]
[., GETPROP, :, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[., GETPROP, :, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[!=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (]
[!=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (]
[!=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (]
[parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==]
[(, ), ), {, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {]
[), {, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =]
[case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;]
[., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =]
[:, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, getValueType, (]
[:, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, getValueType, (]
[), ==, n, ), {, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;]
[n, ), {, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, isPropAssign, =]
[;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, isPropAssign, =, true, ;, }, break, ;, case]
[;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, isPropAssign, =, true, ;, }, break, ;, case]
[n, ., getNext, (, ), ), ;, isPropAssign, =, true, ;, }, break, ;, case, Token, ., INC, :, case]
[n, ., getNext, (, ), ), ;, isPropAssign, =, true, ;, }, break, ;, case, Token, ., INC, :, case]
[), ), ;, isPropAssign, =, true, ;, }, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :]
[;, isPropAssign, =, true, ;, }, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =]
[=, true, ;, }, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;]
[;, }, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;, type, =]
[;, }, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;, type, =]
[;, }, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;, type, =]
[case, Token, ., DEC, :, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, case]
[case, Token, ., DEC, :, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, case]
[=, Name, ., Type, ., OTHER, ;, break, ;, case, Token, ., GETPROP, :, return, ;, default, :, if, (]
[=, Name, ., Type, ., OTHER, ;, break, ;, case, Token, ., GETPROP, :, return, ;, default, :, if, (]
[=, Name, ., Type, ., OTHER, ;, break, ;, case, Token, ., GETPROP, :, return, ;, default, :, if, (]
[., OTHER, ;, break, ;, case, Token, ., GETPROP, :, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (]
[break, ;, case, Token, ., GETPROP, :, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[break, ;, case, Token, ., GETPROP, :, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[break, ;, case, Token, ., GETPROP, :, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[:, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==]
[default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;]
[isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =]
[isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =]
[isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =]
[), ==, n, ), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }]
[n, ), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =]
[n, ), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =]
[=, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n, ., getQualifiedName, (, ), ;, if, (]
[=, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n, ., getQualifiedName, (, ), ;, if, (]
[., Type, ., OTHER, ;, }, }, }, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, ==]
[), ;, if, (, name, ==, null, ), return, ;, break, ;, default, :, return, ;, }, Scope, scope, =]
[), ;, if, (, name, ==, null, ), return, ;, break, ;, default, :, return, ;, }, Scope, scope, =]
[return, ;, break, ;, default, :, return, ;, }, Scope, scope, =, t, ., getScope, (, ), ;, if, (]
[;, break, ;, default, :, return, ;, }, Scope, scope, =, t, ., getScope, (, ), ;, if, (, !]
[;, default, :, return, ;, }, Scope, scope, =, t, ., getScope, (, ), ;, if, (, !, isGlobalNameReference, (]
[:, return, ;, }, Scope, scope, =, t, ., getScope, (, ), ;, if, (, !, isGlobalNameReference, (, name, ,]
[getScope, (, ), ;, if, (, !, isGlobalNameReference, (, name, ,, scope, ), ), {, return, ;, }, if, (]
[(, !, isGlobalNameReference, (, name, ,, scope, ), ), {, return, ;, }, if, (, isSet, ), {, if, (]
[isGlobalNameReference, (, name, ,, scope, ), ), {, return, ;, }, if, (, isSet, ), {, if, (, isGlobalScope, (]
[scope, ), ), {, return, ;, }, if, (, isSet, ), {, if, (, isGlobalScope, (, scope, ), ), {]
[), {, return, ;, }, if, (, isSet, ), {, if, (, isGlobalScope, (, scope, ), ), {, handleSetFromGlobal, (]
[return, ;, }, if, (, isSet, ), {, if, (, isGlobalScope, (, scope, ), ), {, handleSetFromGlobal, (, t, ,]
[}, if, (, isSet, ), {, if, (, isGlobalScope, (, scope, ), ), {, handleSetFromGlobal, (, t, ,, n, ,]
[(, isSet, ), {, if, (, isGlobalScope, (, scope, ), ), {, handleSetFromGlobal, (, t, ,, n, ,, parent, ,]
[), {, if, (, isGlobalScope, (, scope, ), ), {, handleSetFromGlobal, (, t, ,, n, ,, parent, ,, name, ,]
[if, (, isGlobalScope, (, scope, ), ), {, handleSetFromGlobal, (, t, ,, n, ,, parent, ,, name, ,, isPropAssign, ,]
[), {, handleSetFromGlobal, (, t, ,, n, ,, parent, ,, name, ,, isPropAssign, ,, type, ), ;, }, else, {]
[handleSetFromGlobal, (, t, ,, n, ,, parent, ,, name, ,, isPropAssign, ,, type, ), ;, }, else, {, handleSetFromLocal, (]
[t, ,, n, ,, parent, ,, name, ,, isPropAssign, ,, type, ), ;, }, else, {, handleSetFromLocal, (, t, ,]
[n, ,, parent, ,, name, ,, isPropAssign, ,, type, ), ;, }, else, {, handleSetFromLocal, (, t, ,, n, ,]
[parent, ,, name, ,, isPropAssign, ,, type, ), ;, }, else, {, handleSetFromLocal, (, t, ,, n, ,, parent, ,]
[), ;, }, else, {, handleSetFromLocal, (, t, ,, n, ,, parent, ,, name, ), ;, }, }, else, {]
[}, else, {, handleSetFromLocal, (, t, ,, n, ,, parent, ,, name, ), ;, }, }, else, {, handleGet, (]
[{, handleSetFromLocal, (, t, ,, n, ,, parent, ,, name, ), ;, }, }, else, {, handleGet, (, t, ,]
[(, t, ,, n, ,, parent, ,, name, ), ;, }, }, else, {, handleGet, (, t, ,, n, ,]
[,, n, ,, parent, ,, name, ), ;, }, }, else, {, handleGet, (, t, ,, n, ,, parent, ,]
[,, n, ,, parent, ,, name, ), ;, }, }, String, getNameForObjLitKey, (, Node, n, ), {, Node, parent, =]
[,, n, ,, parent, ,, name, ), ;, }, }, String, getNameForObjLitKey, (, Node, n, ), {, Node, parent, =]
[), ;, }, }, String, getNameForObjLitKey, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;]
[), ;, }, }, String, getNameForObjLitKey, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;]
[String, getNameForObjLitKey, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[String, getNameForObjLitKey, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[n, ., getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, Node, gramps, =]
[n, ., getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, Node, gramps, =]
[checkState, (, parent, ., isObjectLit, (, ), ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[checkState, (, parent, ., isObjectLit, (, ), ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[parent, ., isObjectLit, (, ), ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ==]
[), ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ==, null, ), {, return]
[parent, ., getParent, (, ), ;, if, (, gramps, ==, null, ), {, return, null, ;, }, Node, greatGramps, =]
[parent, ., getParent, (, ), ;, if, (, gramps, ==, null, ), {, return, null, ;, }, Node, greatGramps, =]
[), {, return, null, ;, }, Node, greatGramps, =, gramps, ., getParent, (, ), ;, String, name, ;, switch, (]
[), {, return, null, ;, }, Node, greatGramps, =, gramps, ., getParent, (, ), ;, String, name, ;, switch, (]
[=, gramps, ., getParent, (, ), ;, String, name, ;, switch, (, gramps, ., getType, (, ), ), {, case]
[=, gramps, ., getParent, (, ), ;, String, name, ;, switch, (, gramps, ., getType, (, ), ), {, case]
[;, String, name, ;, switch, (, gramps, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[;, String, name, ;, switch, (, gramps, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[;, String, name, ;, switch, (, gramps, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[name, ;, switch, (, gramps, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, greatGramps, ==]
[switch, (, gramps, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, greatGramps, ==, null, ||]
[(, gramps, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, greatGramps, ==, null, ||, !]
[(, gramps, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, greatGramps, ==, null, ||, !]
[case, Token, ., NAME, :, if, (, greatGramps, ==, null, ||, !, greatGramps, ., isVar, (, ), ), {, return]
[NAME, :, if, (, greatGramps, ==, null, ||, !, greatGramps, ., isVar, (, ), ), {, return, null, ;, }]
[if, (, greatGramps, ==, null, ||, !, greatGramps, ., isVar, (, ), ), {, return, null, ;, }, name, =]
[if, (, greatGramps, ==, null, ||, !, greatGramps, ., isVar, (, ), ), {, return, null, ;, }, name, =]
[isVar, (, ), ), {, return, null, ;, }, name, =, gramps, ., getString, (, ), ;, break, ;, case]
[isVar, (, ), ), {, return, null, ;, }, name, =, gramps, ., getString, (, ), ;, break, ;, case]
[;, }, name, =, gramps, ., getString, (, ), ;, break, ;, case, Token, ., ASSIGN, :, Node, lvalue, =]
[;, }, name, =, gramps, ., getString, (, ), ;, break, ;, case, Token, ., ASSIGN, :, Node, lvalue, =]
[getString, (, ), ;, break, ;, case, Token, ., ASSIGN, :, Node, lvalue, =, gramps, ., getFirstChild, (, ), ;]
[), ;, break, ;, case, Token, ., ASSIGN, :, Node, lvalue, =, gramps, ., getFirstChild, (, ), ;, name, =]
[), ;, break, ;, case, Token, ., ASSIGN, :, Node, lvalue, =, gramps, ., getFirstChild, (, ), ;, name, =]
[Node, lvalue, =, gramps, ., getFirstChild, (, ), ;, name, =, lvalue, ., getQualifiedName, (, ), ;, break, ;, case]
[Node, lvalue, =, gramps, ., getFirstChild, (, ), ;, name, =, lvalue, ., getQualifiedName, (, ), ;, break, ;, case]
[(, ), ;, name, =, lvalue, ., getQualifiedName, (, ), ;, break, ;, case, Token, ., STRING_KEY, :, if, (]
[(, ), ;, name, =, lvalue, ., getQualifiedName, (, ), ;, break, ;, case, Token, ., STRING_KEY, :, if, (]
[(, ), ;, name, =, lvalue, ., getQualifiedName, (, ), ;, break, ;, case, Token, ., STRING_KEY, :, if, (]
[;, name, =, lvalue, ., getQualifiedName, (, ), ;, break, ;, case, Token, ., STRING_KEY, :, if, (, greatGramps, !=]
[=, lvalue, ., getQualifiedName, (, ), ;, break, ;, case, Token, ., STRING_KEY, :, if, (, greatGramps, !=, null, &&]
[=, lvalue, ., getQualifiedName, (, ), ;, break, ;, case, Token, ., STRING_KEY, :, if, (, greatGramps, !=, null, &&]
[break, ;, case, Token, ., STRING_KEY, :, if, (, greatGramps, !=, null, &&, greatGramps, ., isObjectLit, (, ), ), {]
[case, Token, ., STRING_KEY, :, if, (, greatGramps, !=, null, &&, greatGramps, ., isObjectLit, (, ), ), {, name, =]
[., STRING_KEY, :, if, (, greatGramps, !=, null, &&, greatGramps, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (]
[null, &&, greatGramps, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, gramps, ), ;, }, else, {, return]
[{, name, =, getNameForObjLitKey, (, gramps, ), ;, }, else, {, return, null, ;, }, break, ;, default, :, return]
[gramps, ), ;, }, else, {, return, null, ;, }, break, ;, default, :, return, null, ;, }, if, (]
[gramps, ), ;, }, else, {, return, null, ;, }, break, ;, default, :, return, null, ;, }, if, (]
[;, }, else, {, return, null, ;, }, break, ;, default, :, return, null, ;, }, if, (, name, !=]
[;, }, break, ;, default, :, return, null, ;, }, if, (, name, !=, null, ), {, String, key, =]
[;, }, break, ;, default, :, return, null, ;, }, if, (, name, !=, null, ), {, String, key, =]
[;, }, if, (, name, !=, null, ), {, String, key, =, n, ., getString, (, ), ;, if, (]
[;, }, if, (, name, !=, null, ), {, String, key, =, n, ., getString, (, ), ;, if, (]
[name, !=, null, ), {, String, key, =, n, ., getString, (, ), ;, if, (, TokenStream, ., isJSIdentifier, (]
[String, key, =, n, ., getString, (, ), ;, if, (, TokenStream, ., isJSIdentifier, (, key, ), ), {, return]
[String, key, =, n, ., getString, (, ), ;, if, (, TokenStream, ., isJSIdentifier, (, key, ), ), {, return]
[String, key, =, n, ., getString, (, ), ;, if, (, TokenStream, ., isJSIdentifier, (, key, ), ), {, return]
[=, n, ., getString, (, ), ;, if, (, TokenStream, ., isJSIdentifier, (, key, ), ), {, return, name, +]
[., getString, (, ), ;, if, (, TokenStream, ., isJSIdentifier, (, key, ), ), {, return, name, +, '.', +]
[if, (, TokenStream, ., isJSIdentifier, (, key, ), ), {, return, name, +, '.', +, key, ;, }, }, return]
[+, key, ;, }, }, return, null, ;, }, Name, ., Type, getValueType, (, Node, n, ), {, switch, (]
[+, key, ;, }, }, return, null, ;, }, Name, ., Type, getValueType, (, Node, n, ), {, switch, (]
[}, Name, ., Type, getValueType, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[}, Name, ., Type, getValueType, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[(, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., OBJECTLIT, :, return]
[(, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., OBJECTLIT, :, return]
[(, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., OBJECTLIT, :, return]
[n, ., getType, (, ), ), {, case, Token, ., OBJECTLIT, :, return, Name, ., Type, ., OBJECTLIT, ;, case]
[n, ., getType, (, ), ), {, case, Token, ., OBJECTLIT, :, return, Name, ., Type, ., OBJECTLIT, ;, case]
[), {, case, Token, ., OBJECTLIT, :, return, Name, ., Type, ., OBJECTLIT, ;, case, Token, ., FUNCTION, :, return]
[), {, case, Token, ., OBJECTLIT, :, return, Name, ., Type, ., OBJECTLIT, ;, case, Token, ., FUNCTION, :, return]
[), {, case, Token, ., OBJECTLIT, :, return, Name, ., Type, ., OBJECTLIT, ;, case, Token, ., FUNCTION, :, return]
[return, Name, ., Type, ., OBJECTLIT, ;, case, Token, ., FUNCTION, :, return, Name, ., Type, ., FUNCTION, ;, case]
[return, Name, ., Type, ., OBJECTLIT, ;, case, Token, ., FUNCTION, :, return, Name, ., Type, ., FUNCTION, ;, case]
[OBJECTLIT, ;, case, Token, ., FUNCTION, :, return, Name, ., Type, ., FUNCTION, ;, case, Token, ., OR, :, return]
[case, Token, ., FUNCTION, :, return, Name, ., Type, ., FUNCTION, ;, case, Token, ., OR, :, return, getValueType, (]
[case, Token, ., FUNCTION, :, return, Name, ., Type, ., FUNCTION, ;, case, Token, ., OR, :, return, getValueType, (]
[Type, ., FUNCTION, ;, case, Token, ., OR, :, return, getValueType, (, n, ., getLastChild, (, ), ), ;, case]
[Type, ., FUNCTION, ;, case, Token, ., OR, :, return, getValueType, (, n, ., getLastChild, (, ), ), ;, case]
[OR, :, return, getValueType, (, n, ., getLastChild, (, ), ), ;, case, Token, ., HOOK, :, Node, second, =]
[OR, :, return, getValueType, (, n, ., getLastChild, (, ), ), ;, case, Token, ., HOOK, :, Node, second, =]
[OR, :, return, getValueType, (, n, ., getLastChild, (, ), ), ;, case, Token, ., HOOK, :, Node, second, =]
[HOOK, :, Node, second, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Name, ., Type, t, =]
[Node, second, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Name, ., Type, t, =, getValueType, (]
[getFirstChild, (, ), ., getNext, (, ), ;, Name, ., Type, t, =, getValueType, (, second, ), ;, if, (]
[getFirstChild, (, ), ., getNext, (, ), ;, Name, ., Type, t, =, getValueType, (, second, ), ;, if, (]
[), ., getNext, (, ), ;, Name, ., Type, t, =, getValueType, (, second, ), ;, if, (, t, !=]
[), ., getNext, (, ), ;, Name, ., Type, t, =, getValueType, (, second, ), ;, if, (, t, !=]
[), ., getNext, (, ), ;, Name, ., Type, t, =, getValueType, (, second, ), ;, if, (, t, !=]
[., Type, t, =, getValueType, (, second, ), ;, if, (, t, !=, Name, ., Type, ., OTHER, ), return]
[(, second, ), ;, if, (, t, !=, Name, ., Type, ., OTHER, ), return, t, ;, Node, third, =]
[(, second, ), ;, if, (, t, !=, Name, ., Type, ., OTHER, ), return, t, ;, Node, third, =]
[!=, Name, ., Type, ., OTHER, ), return, t, ;, Node, third, =, second, ., getNext, (, ), ;, return]
[., Type, ., OTHER, ), return, t, ;, Node, third, =, second, ., getNext, (, ), ;, return, getValueType, (]
[return, t, ;, Node, third, =, second, ., getNext, (, ), ;, return, getValueType, (, third, ), ;, }, return]
[return, t, ;, Node, third, =, second, ., getNext, (, ), ;, return, getValueType, (, third, ), ;, }, return]
[return, t, ;, Node, third, =, second, ., getNext, (, ), ;, return, getValueType, (, third, ), ;, }, return]
[Node, n, ,, Node, parent, ,, String, name, ,, boolean, isPropAssign, ,, Name, ., Type, type, ), {, if, (]
[,, Node, parent, ,, String, name, ,, boolean, isPropAssign, ,, Name, ., Type, type, ), {, if, (, maybeHandlePrototypePrefix, (]
[parent, ,, String, name, ,, boolean, isPropAssign, ,, Name, ., Type, type, ), {, if, (, maybeHandlePrototypePrefix, (, t, ,]
[String, name, ,, boolean, isPropAssign, ,, Name, ., Type, type, ), {, if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,]
[,, boolean, isPropAssign, ,, Name, ., Type, type, ), {, if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,]
[), {, if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,, name, ), ), return, ;, Name, nameObj, =]
[if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (]
[(, t, ,, n, ,, parent, ,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;]
[(, t, ,, n, ,, parent, ,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;]
[,, parent, ,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., type, =]
[), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., type, =, type, ;, Ref, set, =]
[Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., type, =, type, ;, Ref, set, =, new, Ref, (]
[=, getOrCreateName, (, name, ), ;, nameObj, ., type, =, type, ;, Ref, set, =, new, Ref, (, t, ,]
[(, name, ), ;, nameObj, ., type, =, type, ;, Ref, set, =, new, Ref, (, t, ,, n, ,]
[), ;, nameObj, ., type, =, type, ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[), ;, nameObj, ., type, =, type, ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[), ;, nameObj, ., type, =, type, ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[type, ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_GLOBAL, ,]
[type, ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_GLOBAL, ,]
[=, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_GLOBAL, ,, currentPreOrderIndex, ++, ), ;]
[=, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_GLOBAL, ,, currentPreOrderIndex, ++, ), ;]
[t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_GLOBAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (]
[,, Ref, ., Type, ., SET_FROM_GLOBAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (]
[., Type, ., SET_FROM_GLOBAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (]
[), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =]
[., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (]
[(, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,]
[), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,]
[if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,]
[), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,]
[=, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;]
[=, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;]
[t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (]
[,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;]
[,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;]
[., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (]
[., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,]
[nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }, else, if, (]
[addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }, else, if, (, isTypeDeclaration, (]
[get, ), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }, else, if, (, isTypeDeclaration, (, n, ,]
[., markTwins, (, set, ,, get, ), ;, }, else, if, (, isTypeDeclaration, (, n, ,, parent, ), ), {]
[., markTwins, (, set, ,, get, ), ;, }, else, if, (, isTypeDeclaration, (, n, ,, parent, ), ), {]
[setDeclaredType, (, ), ;, }, }, private, boolean, isTypeDeclaration, (, Node, n, ,, Node, parent, ), {, Node, valueNode, =]
[setDeclaredType, (, ), ;, }, }, private, boolean, isTypeDeclaration, (, Node, n, ,, Node, parent, ), {, Node, valueNode, =]
[}, }, private, boolean, isTypeDeclaration, (, Node, n, ,, Node, parent, ), {, Node, valueNode, =, NodeUtil, ., getRValueOfLValue, (]
[Node, n, ,, Node, parent, ), {, Node, valueNode, =, NodeUtil, ., getRValueOfLValue, (, n, ), ;, JSDocInfo, info, =]
[Node, n, ,, Node, parent, ), {, Node, valueNode, =, NodeUtil, ., getRValueOfLValue, (, n, ), ;, JSDocInfo, info, =]
[parent, ), {, Node, valueNode, =, NodeUtil, ., getRValueOfLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (]
[valueNode, =, NodeUtil, ., getRValueOfLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return]
[valueNode, =, NodeUtil, ., getRValueOfLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return]
[valueNode, =, NodeUtil, ., getRValueOfLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return]
[valueNode, =, NodeUtil, ., getRValueOfLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return]
[NodeUtil, ., getRValueOfLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=]
[getRValueOfLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&]
[getRValueOfLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&]
[n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&, valueNode, !=]
[;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&, valueNode, !=, null, &&]
[JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&, valueNode, !=, null, &&, (]
[JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&, valueNode, !=, null, &&, (]
[JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&, valueNode, !=, null, &&, (]
[JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&, valueNode, !=, null, &&, (]
[JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&, valueNode, !=, null, &&, (]
[(, n, ), ;, return, info, !=, null, &&, valueNode, !=, null, &&, (, info, ., isConstructor, (, ), &&]
[(, n, ), ;, return, info, !=, null, &&, valueNode, !=, null, &&, (, info, ., isConstructor, (, ), &&]
[!=, null, &&, valueNode, !=, null, &&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||]
[!=, null, &&, valueNode, !=, null, &&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||]
[!=, null, &&, valueNode, !=, null, &&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||]
[&&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&]
[&&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&]
[), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||]
[), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||]
[), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||]
[), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., hasEnumParameterType, (, ), &&]
[), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., hasEnumParameterType, (, ), &&]
[;, }, void, handleSetFromLocal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if, (]
[void, handleSetFromLocal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if, (, maybeHandlePrototypePrefix, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if, (, maybeHandlePrototypePrefix, (, t, ,]
[t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,]
[Node, n, ,, Node, parent, ,, String, name, ), {, if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,]
[), {, if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,, name, ), ), return, ;, Name, nameObj, =]
[if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (]
[n, ,, parent, ,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set, =]
[,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set, =, new, Ref, (]
[), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set, =, new, Ref, (, t, ,]
[return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set, =, new, Ref, (, t, ,, n, ,]
[Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[), ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_LOCAL, ,]
[), ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_LOCAL, ,]
[=, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_LOCAL, ,, currentPreOrderIndex, ++, ), ;]
[=, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_LOCAL, ,, currentPreOrderIndex, ++, ), ;]
[t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_LOCAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (]
[,, Ref, ., Type, ., SET_FROM_LOCAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (]
[., Type, ., SET_FROM_LOCAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (]
[), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =]
[., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (]
[(, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,]
[), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,]
[if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,]
[), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,]
[=, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;]
[=, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;]
[t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (]
[,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;]
[,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;]
[., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (]
[., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,]
[}, }, void, handleGet, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if, (]
[void, handleGet, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if, (, maybeHandlePrototypePrefix, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if, (, maybeHandlePrototypePrefix, (, t, ,]
[t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,]
[Node, n, ,, Node, parent, ,, String, name, ), {, if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,]
[if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,, name, ), ), return, ;, Ref, ., Type, type, =]
[if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,, name, ), ), return, ;, Ref, ., Type, type, =]
[if, (, maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,, name, ), ), return, ;, Ref, ., Type, type, =]
[parent, ,, name, ), ), return, ;, Ref, ., Type, type, =, Ref, ., Type, ., DIRECT_GET, ;, if, (]
[parent, ,, name, ), ), return, ;, Ref, ., Type, type, =, Ref, ., Type, ., DIRECT_GET, ;, if, (]
[name, ), ), return, ;, Ref, ., Type, type, =, Ref, ., Type, ., DIRECT_GET, ;, if, (, parent, !=]
[Ref, ., Type, type, =, Ref, ., Type, ., DIRECT_GET, ;, if, (, parent, !=, null, ), {, switch, (]
[Ref, ., Type, type, =, Ref, ., Type, ., DIRECT_GET, ;, if, (, parent, !=, null, ), {, switch, (]
[., DIRECT_GET, ;, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[., DIRECT_GET, ;, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case]
[parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., TYPEOF, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., TYPEOF, :, case]
[(, ), ), {, case, Token, ., IF, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case]
[(, ), ), {, case, Token, ., IF, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case]
[Token, ., IF, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case]
[Token, ., IF, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case]
[Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case]
[Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case]
[Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case]
[Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case]
[NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, break, ;, case]
[NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, break, ;, case]
[., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, break, ;, case, Token, ., CALL, :]
[:, case, Token, ., POS, :, case, Token, ., NEG, :, break, ;, case, Token, ., CALL, :, type, =]
[:, case, Token, ., POS, :, case, Token, ., NEG, :, break, ;, case, Token, ., CALL, :, type, =]
[:, case, Token, ., POS, :, case, Token, ., NEG, :, break, ;, case, Token, ., CALL, :, type, =]
[Token, ., POS, :, case, Token, ., NEG, :, break, ;, case, Token, ., CALL, :, type, =, n, ==]
[Token, ., POS, :, case, Token, ., NEG, :, break, ;, case, Token, ., CALL, :, type, =, n, ==]
[., NEG, :, break, ;, case, Token, ., CALL, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?]
[., NEG, :, break, ;, case, Token, ., CALL, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?]
[., NEG, :, break, ;, case, Token, ., CALL, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?]
[Token, ., CALL, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., CALL_GET, :]
[Token, ., CALL, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., CALL_GET, :]
[Token, ., CALL, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., CALL_GET, :]
[., getFirstChild, (, ), ?, Ref, ., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case]
[., getFirstChild, (, ), ?, Ref, ., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case]
[?, Ref, ., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :]
[., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =]
[., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =]
[., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =]
[., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =, n, ==]
[., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =, n, ==]
[., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?]
[., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?]
[., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?]
[Token, ., NEW, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., DIRECT_GET, :]
[Token, ., NEW, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., DIRECT_GET, :]
[Token, ., NEW, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., DIRECT_GET, :]
[., getFirstChild, (, ), ?, Ref, ., Type, ., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case]
[., getFirstChild, (, ), ?, Ref, ., Type, ., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case]
[Ref, ., Type, ., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., OR, :, case]
[Ref, ., Type, ., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., OR, :, case]
[DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., OR, :, case, Token, ., AND, :]
[Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., OR, :, case, Token, ., AND, :, type, =]
[Type, ., ALIASING_GET, ;, break, ;, case, Token, ., OR, :, case, Token, ., AND, :, type, =, determineGetTypeForHookOrBooleanExpr, (]
[ALIASING_GET, ;, break, ;, case, Token, ., OR, :, case, Token, ., AND, :, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,]
[break, ;, case, Token, ., OR, :, case, Token, ., AND, :, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,]
[:, case, Token, ., AND, :, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, break, ;, case]
[:, case, Token, ., AND, :, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, break, ;, case]
[type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, break, ;, case, Token, ., HOOK, :, if, (]
[type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, break, ;, case, Token, ., HOOK, :, if, (]
[determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, break, ;, case, Token, ., HOOK, :, if, (, n, !=]
[determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, break, ;, case, Token, ., HOOK, :, if, (, n, !=]
[), ;, break, ;, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {]
[break, ;, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, type, =]
[case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, type, =, determineGetTypeForHookOrBooleanExpr, (]
[., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,]
[:, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,]
[getFirstChild, (, ), ), {, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, }, break, ;, case]
[getFirstChild, (, ), ), {, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, }, break, ;, case]
[{, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, }, break, ;, case, Token, ., DELPROP, :]
[=, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, }, break, ;, case, Token, ., DELPROP, :, type, =]
[=, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, }, break, ;, case, Token, ., DELPROP, :, type, =]
[=, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, }, break, ;, case, Token, ., DELPROP, :, type, =]
[}, break, ;, case, Token, ., DELPROP, :, type, =, Ref, ., Type, ., DELETE_PROP, ;, break, ;, default, :]
[;, case, Token, ., DELPROP, :, type, =, Ref, ., Type, ., DELETE_PROP, ;, break, ;, default, :, type, =]
[;, case, Token, ., DELPROP, :, type, =, Ref, ., Type, ., DELETE_PROP, ;, break, ;, default, :, type, =]
[;, case, Token, ., DELPROP, :, type, =, Ref, ., Type, ., DELETE_PROP, ;, break, ;, default, :, type, =]
[Type, ., DELETE_PROP, ;, break, ;, default, :, type, =, Ref, ., Type, ., ALIASING_GET, ;, break, ;, }, }]
[DELETE_PROP, ;, break, ;, default, :, type, =, Ref, ., Type, ., ALIASING_GET, ;, break, ;, }, }, handleGet, (]
[break, ;, default, :, type, =, Ref, ., Type, ., ALIASING_GET, ;, break, ;, }, }, handleGet, (, t, ,]
[default, :, type, =, Ref, ., Type, ., ALIASING_GET, ;, break, ;, }, }, handleGet, (, t, ,, n, ,]
[type, =, Ref, ., Type, ., ALIASING_GET, ;, break, ;, }, }, handleGet, (, t, ,, n, ,, parent, ,]
[Ref, ., Type, ., ALIASING_GET, ;, break, ;, }, }, handleGet, (, t, ,, n, ,, parent, ,, name, ,]
[;, }, Ref, ., Type, determineGetTypeForHookOrBooleanExpr, (, NodeTraversal, t, ,, Node, parent, ,, String, name, ), {, Node, prev, =]
[NodeTraversal, t, ,, Node, parent, ,, String, name, ), {, Node, prev, =, parent, ;, for, (, Node, anc, :]
[NodeTraversal, t, ,, Node, parent, ,, String, name, ), {, Node, prev, =, parent, ;, for, (, Node, anc, :]
[{, Node, prev, =, parent, ;, for, (, Node, anc, :, parent, ., getAncestors, (, ), ), {, switch, (]
[{, Node, prev, =, parent, ;, for, (, Node, anc, :, parent, ., getAncestors, (, ), ), {, switch, (]
[Node, anc, :, parent, ., getAncestors, (, ), ), {, switch, (, anc, ., getType, (, ), ), {, case]
[Node, anc, :, parent, ., getAncestors, (, ), ), {, switch, (, anc, ., getType, (, ), ), {, case]
[getAncestors, (, ), ), {, switch, (, anc, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case]
[getAncestors, (, ), ), {, switch, (, anc, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case]
[switch, (, anc, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, ., VAR, :, case]
[switch, (, anc, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, ., VAR, :, case]
[(, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, ., VAR, :, case, Token, ., IF, :, case]
[(, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, ., VAR, :, case, Token, ., IF, :, case]
[Token, ., EXPR_RESULT, :, case, Token, ., VAR, :, case, Token, ., IF, :, case, Token, ., WHILE, :, case]
[Token, ., EXPR_RESULT, :, case, Token, ., VAR, :, case, Token, ., IF, :, case, Token, ., WHILE, :, case]
[Token, ., VAR, :, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., FOR, :, case]
[Token, ., VAR, :, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., FOR, :, case]
[Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., FOR, :, case, Token, ., TYPEOF, :, case]
[Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., FOR, :, case, Token, ., TYPEOF, :, case]
[Token, ., WHILE, :, case, Token, ., FOR, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case]
[Token, ., WHILE, :, case, Token, ., FOR, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case]
[Token, ., FOR, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case]
[Token, ., FOR, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case]
[Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case]
[Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case]
[Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case]
[Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case]
[Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, return]
[Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, return]
[Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, return]
[BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, return, Ref, ., Type, ., DIRECT_GET, ;, case]
[BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, return, Ref, ., Type, ., DIRECT_GET, ;, case]
[:, case, Token, ., NEG, :, return, Ref, ., Type, ., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (]
[:, case, Token, ., NEG, :, return, Ref, ., Type, ., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (]
[:, case, Token, ., NEG, :, return, Ref, ., Type, ., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (]
[return, Ref, ., Type, ., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (, anc, ., getFirstChild, (, ), ==]
[., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (, anc, ., getFirstChild, (, ), ==, prev, ), {, return]
[., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (, anc, ., getFirstChild, (, ), ==, prev, ), {, return]
[., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (, anc, ., getFirstChild, (, ), ==, prev, ), {, return]
[anc, ., getFirstChild, (, ), ==, prev, ), {, return, Ref, ., Type, ., DIRECT_GET, ;, }, break, ;, case]
[anc, ., getFirstChild, (, ), ==, prev, ), {, return, Ref, ., Type, ., DIRECT_GET, ;, }, break, ;, case]
[prev, ), {, return, Ref, ., Type, ., DIRECT_GET, ;, }, break, ;, case, Token, ., ASSIGN, :, if, (]
[), {, return, Ref, ., Type, ., DIRECT_GET, ;, }, break, ;, case, Token, ., ASSIGN, :, if, (, !]
[), {, return, Ref, ., Type, ., DIRECT_GET, ;, }, break, ;, case, Token, ., ASSIGN, :, if, (, !]
[., Type, ., DIRECT_GET, ;, }, break, ;, case, Token, ., ASSIGN, :, if, (, !, name, ., equals, (]
[., Type, ., DIRECT_GET, ;, }, break, ;, case, Token, ., ASSIGN, :, if, (, !, name, ., equals, (]
[., Type, ., DIRECT_GET, ;, }, break, ;, case, Token, ., ASSIGN, :, if, (, !, name, ., equals, (]
[if, (, !, name, ., equals, (, anc, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ), {, return]
[if, (, !, name, ., equals, (, anc, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ), {, return]
[if, (, !, name, ., equals, (, anc, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ), {, return]
[(, ), ., getQualifiedName, (, ), ), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case]
[(, ), ., getQualifiedName, (, ), ), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case]
[), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., NAME, :, if, (]
[), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., NAME, :, if, (, !]
[), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., NAME, :, if, (, !]
[., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., NAME, :, if, (, !, name, ., equals, (]
[., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., NAME, :, if, (, !, name, ., equals, (]
[Token, ., NAME, :, if, (, !, name, ., equals, (, anc, ., getString, (, ), ), ), {, return]
[Token, ., NAME, :, if, (, !, name, ., equals, (, anc, ., getString, (, ), ), ), {, return]
[Token, ., NAME, :, if, (, !, name, ., equals, (, anc, ., getString, (, ), ), ), {, return]
[(, anc, ., getString, (, ), ), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case]
[(, anc, ., getString, (, ), ), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case]
[), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., CALL, :, if, (]
[), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., CALL, :, if, (]
[), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., CALL, :, if, (]
[Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., CALL, :, if, (, anc, ., getFirstChild, (, ), !=]
[}, break, ;, case, Token, ., CALL, :, if, (, anc, ., getFirstChild, (, ), !=, prev, ), {, return]
[}, break, ;, case, Token, ., CALL, :, if, (, anc, ., getFirstChild, (, ), !=, prev, ), {, return]
[}, break, ;, case, Token, ., CALL, :, if, (, anc, ., getFirstChild, (, ), !=, prev, ), {, return]
[anc, ., getFirstChild, (, ), !=, prev, ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case]
[anc, ., getFirstChild, (, ), !=, prev, ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case]
[!=, prev, ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., DELPROP, :, return]
[!=, prev, ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., DELPROP, :, return]
[!=, prev, ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., DELPROP, :, return]
[Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., DELPROP, :, return, Ref, ., Type, ., DELETE_PROP, ;, }]
[ALIASING_GET, ;, }, break, ;, case, Token, ., DELPROP, :, return, Ref, ., Type, ., DELETE_PROP, ;, }, prev, =]
[;, case, Token, ., DELPROP, :, return, Ref, ., Type, ., DELETE_PROP, ;, }, prev, =, anc, ;, }, return]
[;, case, Token, ., DELPROP, :, return, Ref, ., Type, ., DELETE_PROP, ;, }, prev, =, anc, ;, }, return]
[;, case, Token, ., DELPROP, :, return, Ref, ., Type, ., DELETE_PROP, ;, }, prev, =, anc, ;, }, return]
[t, ,, Node, n, ,, Node, parent, ,, String, name, ,, Ref, ., Type, type, ), {, Name, nameObj, =]
[Node, n, ,, Node, parent, ,, String, name, ,, Ref, ., Type, type, ), {, Name, nameObj, =, getOrCreateName, (]
[Node, parent, ,, String, name, ,, Ref, ., Type, type, ), {, Name, nameObj, =, getOrCreateName, (, name, ), ;]
[Node, parent, ,, String, name, ,, Ref, ., Type, type, ), {, Name, nameObj, =, getOrCreateName, (, name, ), ;]
[name, ,, Ref, ., Type, type, ), {, Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., addRef, (]
[., Type, type, ), {, Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., addRef, (, new, Ref, (]
[type, ), {, Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., addRef, (, new, Ref, (, t, ,]
[{, Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., addRef, (, new, Ref, (, t, ,, n, ,]
[nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., addRef, (, new, Ref, (, t, ,, n, ,, nameObj, ,]
[getOrCreateName, (, name, ), ;, nameObj, ., addRef, (, new, Ref, (, t, ,, n, ,, nameObj, ,, type, ,]
[getOrCreateName, (, name, ), ;, nameObj, ., addRef, (, new, Ref, (, t, ,, n, ,, nameObj, ,, type, ,]
[t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, int, numLevelsToRemove, ;, String, prefix, ;, if, (]
[t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, int, numLevelsToRemove, ;, String, prefix, ;, if, (]
[,, Node, parent, ,, String, name, ), {, int, numLevelsToRemove, ;, String, prefix, ;, if, (, name, ., endsWith, (]
[String, name, ), {, int, numLevelsToRemove, ;, String, prefix, ;, if, (, name, ., endsWith, (, ".prototype", ), ), {]
[), {, int, numLevelsToRemove, ;, String, prefix, ;, if, (, name, ., endsWith, (, ".prototype", ), ), {, numLevelsToRemove, =]
[int, numLevelsToRemove, ;, String, prefix, ;, if, (, name, ., endsWith, (, ".prototype", ), ), {, numLevelsToRemove, =, 1, ;]
[;, String, prefix, ;, if, (, name, ., endsWith, (, ".prototype", ), ), {, numLevelsToRemove, =, 1, ;, prefix, =]
[;, String, prefix, ;, if, (, name, ., endsWith, (, ".prototype", ), ), {, numLevelsToRemove, =, 1, ;, prefix, =]
[if, (, name, ., endsWith, (, ".prototype", ), ), {, numLevelsToRemove, =, 1, ;, prefix, =, name, ., substring, (]
[name, ., endsWith, (, ".prototype", ), ), {, numLevelsToRemove, =, 1, ;, prefix, =, name, ., substring, (, 0, ,]
[name, ., endsWith, (, ".prototype", ), ), {, numLevelsToRemove, =, 1, ;, prefix, =, name, ., substring, (, 0, ,]
[name, ., endsWith, (, ".prototype", ), ), {, numLevelsToRemove, =, 1, ;, prefix, =, name, ., substring, (, 0, ,]
[), {, numLevelsToRemove, =, 1, ;, prefix, =, name, ., substring, (, 0, ,, name, ., length, (, ), -]
[., substring, (, 0, ,, name, ., length, (, ), -, 10, ), ;, }, else, {, int, i, =]
[., substring, (, 0, ,, name, ., length, (, ), -, 10, ), ;, }, else, {, int, i, =]
[,, name, ., length, (, ), -, 10, ), ;, }, else, {, int, i, =, name, ., indexOf, (]
[), -, 10, ), ;, }, else, {, int, i, =, name, ., indexOf, (, ".prototype.", ), ;, if, (]
[), -, 10, ), ;, }, else, {, int, i, =, name, ., indexOf, (, ".prototype.", ), ;, if, (]
[10, ), ;, }, else, {, int, i, =, name, ., indexOf, (, ".prototype.", ), ;, if, (, i, ==]
[), ;, }, else, {, int, i, =, name, ., indexOf, (, ".prototype.", ), ;, if, (, i, ==, -]
[{, int, i, =, name, ., indexOf, (, ".prototype.", ), ;, if, (, i, ==, -, 1, ), {, return]
[=, name, ., indexOf, (, ".prototype.", ), ;, if, (, i, ==, -, 1, ), {, return, false, ;, }]
[., indexOf, (, ".prototype.", ), ;, if, (, i, ==, -, 1, ), {, return, false, ;, }, prefix, =]
[., indexOf, (, ".prototype.", ), ;, if, (, i, ==, -, 1, ), {, return, false, ;, }, prefix, =]
[), ;, if, (, i, ==, -, 1, ), {, return, false, ;, }, prefix, =, name, ., substring, (]
[if, (, i, ==, -, 1, ), {, return, false, ;, }, prefix, =, name, ., substring, (, 0, ,]
[==, -, 1, ), {, return, false, ;, }, prefix, =, name, ., substring, (, 0, ,, i, ), ;]
[1, ), {, return, false, ;, }, prefix, =, name, ., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =]
[{, return, false, ;, }, prefix, =, name, ., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2, ;]
[false, ;, }, prefix, =, name, ., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2, ;, i, =]
[false, ;, }, prefix, =, name, ., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2, ;, i, =]
[=, name, ., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2, ;, i, =, name, ., indexOf, (]
[., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2, ;, i, =, name, ., indexOf, (, '.', ,]
[., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2, ;, i, =, name, ., indexOf, (, '.', ,]
[(, 0, ,, i, ), ;, numLevelsToRemove, =, 2, ;, i, =, name, ., indexOf, (, '.', ,, i, +]
[;, numLevelsToRemove, =, 2, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 11, ), ;, while, (]
[;, numLevelsToRemove, =, 2, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 11, ), ;, while, (]
[=, 2, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 11, ), ;, while, (, i, >=]
[i, =, name, ., indexOf, (, '.', ,, i, +, 11, ), ;, while, (, i, >=, 0, ), {]
[i, =, name, ., indexOf, (, '.', ,, i, +, 11, ), ;, while, (, i, >=, 0, ), {]
[., indexOf, (, '.', ,, i, +, 11, ), ;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;]
[(, '.', ,, i, +, 11, ), ;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;, i, =]
[(, '.', ,, i, +, 11, ), ;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;, i, =]
[+, 11, ), ;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (]
[), ;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,]
[), ;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,]
[while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,, i, +]
[numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 1, ), ;, }, }, if, (]
[numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 1, ), ;, }, }, if, (]
[numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 1, ), ;, }, }, if, (]
[;, i, =, name, ., indexOf, (, '.', ,, i, +, 1, ), ;, }, }, if, (, parent, !=]
[=, name, ., indexOf, (, '.', ,, i, +, 1, ), ;, }, }, if, (, parent, !=, null, &&]
[=, name, ., indexOf, (, '.', ,, i, +, 1, ), ;, }, }, if, (, parent, !=, null, &&]
[(, '.', ,, i, +, 1, ), ;, }, }, if, (, parent, !=, null, &&, NodeUtil, ., isObjectLitKey, (]
[,, i, +, 1, ), ;, }, }, if, (, parent, !=, null, &&, NodeUtil, ., isObjectLitKey, (, n, ,]
[;, }, }, if, (, parent, !=, null, &&, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return]
[&&, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, true, ;, }, for, (, int, i, =]
[., isObjectLitKey, (, n, ,, parent, ), ), {, return, true, ;, }, for, (, int, i, =, 0, ;]
[., isObjectLitKey, (, n, ,, parent, ), ), {, return, true, ;, }, for, (, int, i, =, 0, ;]
[(, n, ,, parent, ), ), {, return, true, ;, }, for, (, int, i, =, 0, ;, i, <]
[,, parent, ), ), {, return, true, ;, }, for, (, int, i, =, 0, ;, i, <, numLevelsToRemove, ;]
[,, parent, ), ), {, return, true, ;, }, for, (, int, i, =, 0, ;, i, <, numLevelsToRemove, ;]
[{, return, true, ;, }, for, (, int, i, =, 0, ;, i, <, numLevelsToRemove, ;, i, ++, ), {]
[true, ;, }, for, (, int, i, =, 0, ;, i, <, numLevelsToRemove, ;, i, ++, ), {, parent, =]
[}, for, (, int, i, =, 0, ;, i, <, numLevelsToRemove, ;, i, ++, ), {, parent, =, n, ;]
[(, int, i, =, 0, ;, i, <, numLevelsToRemove, ;, i, ++, ), {, parent, =, n, ;, n, =]
[(, int, i, =, 0, ;, i, <, numLevelsToRemove, ;, i, ++, ), {, parent, =, n, ;, n, =]
[<, numLevelsToRemove, ;, i, ++, ), {, parent, =, n, ;, n, =, n, ., getFirstChild, (, ), ;, }]
[;, i, ++, ), {, parent, =, n, ;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (]
[++, ), {, parent, =, n, ;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (, t, ,]
[{, parent, =, n, ;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (, t, ,, n, ,]
[=, n, ;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (, t, ,, n, ,, parent, ,]
[;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (, t, ,, n, ,, parent, ,, prefix, ,]
[;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (, t, ,, n, ,, parent, ,, prefix, ,]
[;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (, t, ,, n, ,, parent, ,, prefix, ,]
[;, }, handleGet, (, t, ,, n, ,, parent, ,, prefix, ,, Ref, ., Type, ., PROTOTYPE_GET, ), ;, return]
[,, Ref, ., Type, ., PROTOTYPE_GET, ), ;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return]
[,, Ref, ., Type, ., PROTOTYPE_GET, ), ;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return]
[,, Ref, ., Type, ., PROTOTYPE_GET, ), ;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return]
[), ;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return, parent, ., isAssign, (, ), &&]
[;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return, parent, ., isAssign, (, ), &&, !]
[;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return, parent, ., isAssign, (, ), &&, !]
[;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return, parent, ., isAssign, (, ), &&, !]
[., getParent, (, ), ., isExprResult, (, ), ;, }, Name, getOrCreateName, (, String, name, ), {, Name, node, =]
[., getParent, (, ), ., isExprResult, (, ), ;, }, Name, getOrCreateName, (, String, name, ), {, Name, node, =]
[., isExprResult, (, ), ;, }, Name, getOrCreateName, (, String, name, ), {, Name, node, =, nameMap, ., get, (]
[}, Name, getOrCreateName, (, String, name, ), {, Name, node, =, nameMap, ., get, (, name, ), ;, if, (]
[}, Name, getOrCreateName, (, String, name, ), {, Name, node, =, nameMap, ., get, (, name, ), ;, if, (]
[getOrCreateName, (, String, name, ), {, Name, node, =, nameMap, ., get, (, name, ), ;, if, (, node, ==]
[Name, node, =, nameMap, ., get, (, name, ), ;, if, (, node, ==, null, ), {, int, i, =]
[Name, node, =, nameMap, ., get, (, name, ), ;, if, (, node, ==, null, ), {, int, i, =]
[., get, (, name, ), ;, if, (, node, ==, null, ), {, int, i, =, name, ., lastIndexOf, (]
[;, if, (, node, ==, null, ), {, int, i, =, name, ., lastIndexOf, (, '.', ), ;, if, (]
[;, if, (, node, ==, null, ), {, int, i, =, name, ., lastIndexOf, (, '.', ), ;, if, (]
[(, node, ==, null, ), {, int, i, =, name, ., lastIndexOf, (, '.', ), ;, if, (, i, >=]
[int, i, =, name, ., lastIndexOf, (, '.', ), ;, if, (, i, >=, 0, ), {, String, parentName, =]
[int, i, =, name, ., lastIndexOf, (, '.', ), ;, if, (, i, >=, 0, ), {, String, parentName, =]
[., lastIndexOf, (, '.', ), ;, if, (, i, >=, 0, ), {, String, parentName, =, name, ., substring, (]
[(, '.', ), ;, if, (, i, >=, 0, ), {, String, parentName, =, name, ., substring, (, 0, ,]
[i, >=, 0, ), {, String, parentName, =, name, ., substring, (, 0, ,, i, ), ;, Name, parent, =]
[0, ), {, String, parentName, =, name, ., substring, (, 0, ,, i, ), ;, Name, parent, =, getOrCreateName, (]
[String, parentName, =, name, ., substring, (, 0, ,, i, ), ;, Name, parent, =, getOrCreateName, (, parentName, ), ;]
[=, name, ., substring, (, 0, ,, i, ), ;, Name, parent, =, getOrCreateName, (, parentName, ), ;, node, =]
[=, name, ., substring, (, 0, ,, i, ), ;, Name, parent, =, getOrCreateName, (, parentName, ), ;, node, =]
[(, 0, ,, i, ), ;, Name, parent, =, getOrCreateName, (, parentName, ), ;, node, =, parent, ., addProperty, (]
[(, 0, ,, i, ), ;, Name, parent, =, getOrCreateName, (, parentName, ), ;, node, =, parent, ., addProperty, (]
[), ;, Name, parent, =, getOrCreateName, (, parentName, ), ;, node, =, parent, ., addProperty, (, name, ., substring, (]
[), ;, Name, parent, =, getOrCreateName, (, parentName, ), ;, node, =, parent, ., addProperty, (, name, ., substring, (]
[Name, parent, =, getOrCreateName, (, parentName, ), ;, node, =, parent, ., addProperty, (, name, ., substring, (, i, +]
[getOrCreateName, (, parentName, ), ;, node, =, parent, ., addProperty, (, name, ., substring, (, i, +, 1, ), ,]
[=, parent, ., addProperty, (, name, ., substring, (, i, +, 1, ), ,, inExterns, ), ;, }, else, {]
[., addProperty, (, name, ., substring, (, i, +, 1, ), ,, inExterns, ), ;, }, else, {, node, =]
[name, ., substring, (, i, +, 1, ), ,, inExterns, ), ;, }, else, {, node, =, new, Name, (]
[substring, (, i, +, 1, ), ,, inExterns, ), ;, }, else, {, node, =, new, Name, (, name, ,]
[i, +, 1, ), ,, inExterns, ), ;, }, else, {, node, =, new, Name, (, name, ,, null, ,]
[), ,, inExterns, ), ;, }, else, {, node, =, new, Name, (, name, ,, null, ,, inExterns, ), ;]
[), ,, inExterns, ), ;, }, else, {, node, =, new, Name, (, name, ,, null, ,, inExterns, ), ;]
[;, }, else, {, node, =, new, Name, (, name, ,, null, ,, inExterns, ), ;, globalNames, ., add, (]
[node, =, new, Name, (, name, ,, null, ,, inExterns, ), ;, globalNames, ., add, (, node, ), ;, }]
[node, =, new, Name, (, name, ,, null, ,, inExterns, ), ;, globalNames, ., add, (, node, ), ;, }]
[(, name, ,, null, ,, inExterns, ), ;, globalNames, ., add, (, node, ), ;, }, nameMap, ., put, (]
[,, null, ,, inExterns, ), ;, globalNames, ., add, (, node, ), ;, }, nameMap, ., put, (, name, ,]
[;, globalNames, ., add, (, node, ), ;, }, nameMap, ., put, (, name, ,, node, ), ;, }, return]
[props, ;, private, Ref, declaration, ;, private, List, <, Ref, >, refs, ;, Type, type, ;, private, boolean, declaredType, =]
[private, List, <, Ref, >, refs, ;, Type, type, ;, private, boolean, declaredType, =, false, ;, private, boolean, hasDeclaredTypeDescendant, =]
[refs, ;, Type, type, ;, private, boolean, declaredType, =, false, ;, private, boolean, hasDeclaredTypeDescendant, =, false, ;, int, globalSets, =]
[private, boolean, declaredType, =, false, ;, private, boolean, hasDeclaredTypeDescendant, =, false, ;, int, globalSets, =, 0, ;, int, localSets, =]
[;, private, boolean, hasDeclaredTypeDescendant, =, false, ;, int, globalSets, =, 0, ;, int, localSets, =, 0, ;, int, aliasingGets, =]
[false, ;, int, globalSets, =, 0, ;, int, localSets, =, 0, ;, int, aliasingGets, =, 0, ;, int, totalGets, =]
[0, ;, int, localSets, =, 0, ;, int, aliasingGets, =, 0, ;, int, totalGets, =, 0, ;, int, callGets, =]
[0, ;, int, aliasingGets, =, 0, ;, int, totalGets, =, 0, ;, int, callGets, =, 0, ;, int, deleteProps, =]
[=, 0, ;, int, callGets, =, 0, ;, int, deleteProps, =, 0, ;, final, boolean, inExterns, ;, JSDocInfo, docInfo, =]
[boolean, inExterns, ;, JSDocInfo, docInfo, =, null, ;, Name, (, String, name, ,, Name, parent, ,, boolean, inExterns, ), {]
[boolean, inExterns, ;, JSDocInfo, docInfo, =, null, ;, Name, (, String, name, ,, Name, parent, ,, boolean, inExterns, ), {]
[docInfo, =, null, ;, Name, (, String, name, ,, Name, parent, ,, boolean, inExterns, ), {, this, ., baseName, =]
[null, ;, Name, (, String, name, ,, Name, parent, ,, boolean, inExterns, ), {, this, ., baseName, =, name, ;]
[null, ;, Name, (, String, name, ,, Name, parent, ,, boolean, inExterns, ), {, this, ., baseName, =, name, ;]
[String, name, ,, Name, parent, ,, boolean, inExterns, ), {, this, ., baseName, =, name, ;, this, ., parent, =]
[,, Name, parent, ,, boolean, inExterns, ), {, this, ., baseName, =, name, ;, this, ., parent, =, parent, ;]
[,, Name, parent, ,, boolean, inExterns, ), {, this, ., baseName, =, name, ;, this, ., parent, =, parent, ;]
[boolean, inExterns, ), {, this, ., baseName, =, name, ;, this, ., parent, =, parent, ;, this, ., type, =]
[boolean, inExterns, ), {, this, ., baseName, =, name, ;, this, ., parent, =, parent, ;, this, ., type, =]
[this, ., baseName, =, name, ;, this, ., parent, =, parent, ;, this, ., type, =, Type, ., OTHER, ;]
[this, ., baseName, =, name, ;, this, ., parent, =, parent, ;, this, ., type, =, Type, ., OTHER, ;]
[name, ;, this, ., parent, =, parent, ;, this, ., type, =, Type, ., OTHER, ;, this, ., inExterns, =]
[;, this, ., inExterns, =, inExterns, ;, }, Name, addProperty, (, String, name, ,, boolean, inExterns, ), {, if, (]
[;, this, ., inExterns, =, inExterns, ;, }, Name, addProperty, (, String, name, ,, boolean, inExterns, ), {, if, (]
[., inExterns, =, inExterns, ;, }, Name, addProperty, (, String, name, ,, boolean, inExterns, ), {, if, (, props, ==]
[inExterns, ;, }, Name, addProperty, (, String, name, ,, boolean, inExterns, ), {, if, (, props, ==, null, ), {]
[}, Name, addProperty, (, String, name, ,, boolean, inExterns, ), {, if, (, props, ==, null, ), {, props, =]
[(, props, ==, null, ), {, props, =, new, ArrayList, <, Name, >, (, ), ;, }, Name, node, =]
[null, ), {, props, =, new, ArrayList, <, Name, >, (, ), ;, }, Name, node, =, new, Name, (]
[{, props, =, new, ArrayList, <, Name, >, (, ), ;, }, Name, node, =, new, Name, (, name, ,]
[=, new, ArrayList, <, Name, >, (, ), ;, }, Name, node, =, new, Name, (, name, ,, this, ,]
[<, Name, >, (, ), ;, }, Name, node, =, new, Name, (, name, ,, this, ,, inExterns, ), ;]
[<, Name, >, (, ), ;, }, Name, node, =, new, Name, (, name, ,, this, ,, inExterns, ), ;]
[), ;, }, Name, node, =, new, Name, (, name, ,, this, ,, inExterns, ), ;, props, ., add, (]
[node, =, new, Name, (, name, ,, this, ,, inExterns, ), ;, props, ., add, (, node, ), ;, return]
[inExterns, ), ;, props, ., add, (, node, ), ;, return, node, ;, }, String, getBaseName, (, ), {, return]
[;, }, String, getBaseName, (, ), {, return, baseName, ;, }, @, Override, public, String, getName, (, ), {, return]
[@, Override, public, String, getName, (, ), {, return, getFullName, (, ), ;, }, String, getFullName, (, ), {, return]
[@, Override, public, String, getName, (, ), {, return, getFullName, (, ), ;, }, String, getFullName, (, ), {, return]
[@, Override, public, String, getName, (, ), {, return, getFullName, (, ), ;, }, String, getFullName, (, ), {, return]
[public, String, getName, (, ), {, return, getFullName, (, ), ;, }, String, getFullName, (, ), {, return, parent, ==]
[getName, (, ), {, return, getFullName, (, ), ;, }, String, getFullName, (, ), {, return, parent, ==, null, ?]
[), {, return, getFullName, (, ), ;, }, String, getFullName, (, ), {, return, parent, ==, null, ?, baseName, :]
[), {, return, getFullName, (, ), ;, }, String, getFullName, (, ), {, return, parent, ==, null, ?, baseName, :]
[), {, return, getFullName, (, ), ;, }, String, getFullName, (, ), {, return, parent, ==, null, ?, baseName, :]
[), {, return, getFullName, (, ), ;, }, String, getFullName, (, ), {, return, parent, ==, null, ?, baseName, :]
[;, }, String, getFullName, (, ), {, return, parent, ==, null, ?, baseName, :, parent, ., getFullName, (, ), +]
[String, getFullName, (, ), {, return, parent, ==, null, ?, baseName, :, parent, ., getFullName, (, ), +, '.', +]
[parent, ., getFullName, (, ), +, '.', +, baseName, ;, }, @, Override, public, Ref, getDeclaration, (, ), {, return]
[Override, public, Ref, getDeclaration, (, ), {, return, declaration, ;, }, @, Override, public, boolean, isTypeInferred, (, ), {, return]
[Override, public, boolean, isTypeInferred, (, ), {, return, false, ;, }, @, Override, public, JSType, getType, (, ), {, return]
[}, @, Override, public, JSType, getType, (, ), {, return, null, ;, }, void, addRef, (, Ref, ref, ), {]
[Override, public, JSType, getType, (, ), {, return, null, ;, }, void, addRef, (, Ref, ref, ), {, addRefInternal, (]
[), {, return, null, ;, }, void, addRef, (, Ref, ref, ), {, addRefInternal, (, ref, ), ;, switch, (]
[), {, return, null, ;, }, void, addRef, (, Ref, ref, ), {, addRefInternal, (, ref, ), ;, switch, (]
[void, addRef, (, Ref, ref, ), {, addRefInternal, (, ref, ), ;, switch, (, ref, ., type, ), {, case]
[ref, ), {, addRefInternal, (, ref, ), ;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, if, (]
[ref, ), {, addRefInternal, (, ref, ), ;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, if, (]
[{, addRefInternal, (, ref, ), ;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, if, (, declaration, ==]
[ref, ), ;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, if, (, declaration, ==, null, ), {]
[;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, if, (, declaration, ==, null, ), {, declaration, =]
[(, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, if, (, declaration, ==, null, ), {, declaration, =, ref, ;]
[., type, ), {, case, SET_FROM_GLOBAL, :, if, (, declaration, ==, null, ), {, declaration, =, ref, ;, docInfo, =]
[), {, case, SET_FROM_GLOBAL, :, if, (, declaration, ==, null, ), {, declaration, =, ref, ;, docInfo, =, getDocInfoForDeclaration, (]
[:, if, (, declaration, ==, null, ), {, declaration, =, ref, ;, docInfo, =, getDocInfoForDeclaration, (, ref, ), ;, }]
[:, if, (, declaration, ==, null, ), {, declaration, =, ref, ;, docInfo, =, getDocInfoForDeclaration, (, ref, ), ;, }]
[), {, declaration, =, ref, ;, docInfo, =, getDocInfoForDeclaration, (, ref, ), ;, }, globalSets, ++, ;, break, ;, case]
[declaration, =, ref, ;, docInfo, =, getDocInfoForDeclaration, (, ref, ), ;, }, globalSets, ++, ;, break, ;, case, SET_FROM_LOCAL, :]
[declaration, =, ref, ;, docInfo, =, getDocInfoForDeclaration, (, ref, ), ;, }, globalSets, ++, ;, break, ;, case, SET_FROM_LOCAL, :]
[getDocInfoForDeclaration, (, ref, ), ;, }, globalSets, ++, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, ++, ;, break, ;, case]
[), ;, }, globalSets, ++, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, ++, ;, break, ;, case, PROTOTYPE_GET, :, case]
[}, globalSets, ++, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, ++, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :]
[}, globalSets, ++, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, ++, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :]
[case, SET_FROM_LOCAL, :, localSets, ++, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, ++, ;, break, ;, case]
[:, localSets, ++, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, ++, ;, break, ;, case, ALIASING_GET, :]
[:, localSets, ++, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, ++, ;, break, ;, case, ALIASING_GET, :]
[;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, ++, ;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;]
[;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, ++, ;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;]
[case, DIRECT_GET, :, totalGets, ++, ;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;, totalGets, ++, ;, break, ;, case]
[:, totalGets, ++, ;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;, totalGets, ++, ;, break, ;, case, CALL_GET, :]
[:, totalGets, ++, ;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;, totalGets, ++, ;, break, ;, case, CALL_GET, :]
[;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;, totalGets, ++, ;, break, ;, case, CALL_GET, :, callGets, ++, ;]
[;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;, totalGets, ++, ;, break, ;, case, CALL_GET, :, callGets, ++, ;]
[aliasingGets, ++, ;, totalGets, ++, ;, break, ;, case, CALL_GET, :, callGets, ++, ;, totalGets, ++, ;, break, ;, case]
[;, totalGets, ++, ;, break, ;, case, CALL_GET, :, callGets, ++, ;, totalGets, ++, ;, break, ;, case, DELETE_PROP, :]
[;, totalGets, ++, ;, break, ;, case, CALL_GET, :, callGets, ++, ;, totalGets, ++, ;, break, ;, case, DELETE_PROP, :]
[:, callGets, ++, ;, totalGets, ++, ;, break, ;, case, DELETE_PROP, :, deleteProps, ++, ;, break, ;, default, :, throw]
[;, default, :, throw, new, IllegalStateException, (, ), ;, }, }, void, removeRef, (, Ref, ref, ), {, if, (]
[;, default, :, throw, new, IllegalStateException, (, ), ;, }, }, void, removeRef, (, Ref, ref, ), {, if, (]
[;, default, :, throw, new, IllegalStateException, (, ), ;, }, }, void, removeRef, (, Ref, ref, ), {, if, (]
[:, throw, new, IllegalStateException, (, ), ;, }, }, void, removeRef, (, Ref, ref, ), {, if, (, refs, !=]
[new, IllegalStateException, (, ), ;, }, }, void, removeRef, (, Ref, ref, ), {, if, (, refs, !=, null, &&]
[new, IllegalStateException, (, ), ;, }, }, void, removeRef, (, Ref, ref, ), {, if, (, refs, !=, null, &&]
[;, }, }, void, removeRef, (, Ref, ref, ), {, if, (, refs, !=, null, &&, refs, ., remove, (]
[Ref, ref, ), {, if, (, refs, !=, null, &&, refs, ., remove, (, ref, ), ), {, if, (]
[Ref, ref, ), {, if, (, refs, !=, null, &&, refs, ., remove, (, ref, ), ), {, if, (]
[), {, if, (, refs, !=, null, &&, refs, ., remove, (, ref, ), ), {, if, (, ref, ==]
[(, refs, !=, null, &&, refs, ., remove, (, ref, ), ), {, if, (, ref, ==, declaration, ), {]
[!=, null, &&, refs, ., remove, (, ref, ), ), {, if, (, ref, ==, declaration, ), {, declaration, =]
[., remove, (, ref, ), ), {, if, (, ref, ==, declaration, ), {, declaration, =, null, ;, if, (]
[., remove, (, ref, ), ), {, if, (, ref, ==, declaration, ), {, declaration, =, null, ;, if, (]
[(, ref, ), ), {, if, (, ref, ==, declaration, ), {, declaration, =, null, ;, if, (, refs, !=]
[==, declaration, ), {, declaration, =, null, ;, if, (, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :]
[=, null, ;, if, (, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :, refs, ), {, if, (]
[=, null, ;, if, (, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :, refs, ), {, if, (]
[=, null, ;, if, (, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :, refs, ), {, if, (]
[(, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :, refs, ), {, if, (, maybeNewDecl, ., type, ==]
[(, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :, refs, ), {, if, (, maybeNewDecl, ., type, ==]
[(, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :, refs, ), {, if, (, maybeNewDecl, ., type, ==]
[(, Ref, maybeNewDecl, :, refs, ), {, if, (, maybeNewDecl, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ), {]
[maybeNewDecl, :, refs, ), {, if, (, maybeNewDecl, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ), {, declaration, =]
[==, Ref, ., Type, ., SET_FROM_GLOBAL, ), {, declaration, =, maybeNewDecl, ;, break, ;, }, }, }, }, switch, (]
[==, Ref, ., Type, ., SET_FROM_GLOBAL, ), {, declaration, =, maybeNewDecl, ;, break, ;, }, }, }, }, switch, (]
[), {, declaration, =, maybeNewDecl, ;, break, ;, }, }, }, }, switch, (, ref, ., type, ), {, case]
[declaration, =, maybeNewDecl, ;, break, ;, }, }, }, }, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :]
[declaration, =, maybeNewDecl, ;, break, ;, }, }, }, }, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :]
[}, }, }, }, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, globalSets, --, ;, break, ;, case]
[}, }, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, globalSets, --, ;, break, ;, case, SET_FROM_LOCAL, :]
[}, }, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, globalSets, --, ;, break, ;, case, SET_FROM_LOCAL, :]
[type, ), {, case, SET_FROM_GLOBAL, :, globalSets, --, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, --, ;, break, ;, case]
[case, SET_FROM_GLOBAL, :, globalSets, --, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, --, ;, break, ;, case, PROTOTYPE_GET, :, case]
[:, globalSets, --, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, --, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :]
[:, globalSets, --, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, --, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :]
[case, SET_FROM_LOCAL, :, localSets, --, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, --, ;, break, ;, case]
[:, localSets, --, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, --, ;, break, ;, case, ALIASING_GET, :]
[:, localSets, --, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, --, ;, break, ;, case, ALIASING_GET, :]
[;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, --, ;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;]
[;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, --, ;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;]
[case, DIRECT_GET, :, totalGets, --, ;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;, totalGets, --, ;, break, ;, case]
[:, totalGets, --, ;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;, totalGets, --, ;, break, ;, case, CALL_GET, :]
[:, totalGets, --, ;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;, totalGets, --, ;, break, ;, case, CALL_GET, :]
[;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;, totalGets, --, ;, break, ;, case, CALL_GET, :, callGets, --, ;]
[;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;, totalGets, --, ;, break, ;, case, CALL_GET, :, callGets, --, ;]
[aliasingGets, --, ;, totalGets, --, ;, break, ;, case, CALL_GET, :, callGets, --, ;, totalGets, --, ;, break, ;, case]
[;, totalGets, --, ;, break, ;, case, CALL_GET, :, callGets, --, ;, totalGets, --, ;, break, ;, case, DELETE_PROP, :]
[;, totalGets, --, ;, break, ;, case, CALL_GET, :, callGets, --, ;, totalGets, --, ;, break, ;, case, DELETE_PROP, :]
[:, callGets, --, ;, totalGets, --, ;, break, ;, case, DELETE_PROP, :, deleteProps, --, ;, break, ;, default, :, throw]
[default, :, throw, new, IllegalStateException, (, ), ;, }, }, }, List, <, Ref, >, getRefs, (, ), {, return]
[default, :, throw, new, IllegalStateException, (, ), ;, }, }, }, List, <, Ref, >, getRefs, (, ), {, return]
[default, :, throw, new, IllegalStateException, (, ), ;, }, }, }, List, <, Ref, >, getRefs, (, ), {, return]
[throw, new, IllegalStateException, (, ), ;, }, }, }, List, <, Ref, >, getRefs, (, ), {, return, refs, ==]
[IllegalStateException, (, ), ;, }, }, }, List, <, Ref, >, getRefs, (, ), {, return, refs, ==, null, ?]
[IllegalStateException, (, ), ;, }, }, }, List, <, Ref, >, getRefs, (, ), {, return, refs, ==, null, ?]
[Ref, >, getRefs, (, ), {, return, refs, ==, null, ?, ImmutableList, ., <, Ref, >, of, (, ), :]
[., <, Ref, >, of, (, ), :, refs, ;, }, void, addRefInternal, (, Ref, ref, ), {, if, (]
[., <, Ref, >, of, (, ), :, refs, ;, }, void, addRefInternal, (, Ref, ref, ), {, if, (]
[Ref, >, of, (, ), :, refs, ;, }, void, addRefInternal, (, Ref, ref, ), {, if, (, refs, ==]
[(, ), :, refs, ;, }, void, addRefInternal, (, Ref, ref, ), {, if, (, refs, ==, null, ), {]
[:, refs, ;, }, void, addRefInternal, (, Ref, ref, ), {, if, (, refs, ==, null, ), {, refs, =]
[:, refs, ;, }, void, addRefInternal, (, Ref, ref, ), {, if, (, refs, ==, null, ), {, refs, =]
[Ref, ref, ), {, if, (, refs, ==, null, ), {, refs, =, Lists, ., newArrayList, (, ), ;, }]
[Ref, ref, ), {, if, (, refs, ==, null, ), {, refs, =, Lists, ., newArrayList, (, ), ;, }]
[if, (, refs, ==, null, ), {, refs, =, Lists, ., newArrayList, (, ), ;, }, refs, ., add, (]
[newArrayList, (, ), ;, }, refs, ., add, (, ref, ), ;, }, boolean, canEliminate, (, ), {, if, (]
[newArrayList, (, ), ;, }, refs, ., add, (, ref, ), ;, }, boolean, canEliminate, (, ), {, if, (]
[(, ), ;, }, refs, ., add, (, ref, ), ;, }, boolean, canEliminate, (, ), {, if, (, !]
[refs, ., add, (, ref, ), ;, }, boolean, canEliminate, (, ), {, if, (, !, canCollapseUnannotatedChildNames, (, ), ||]
[refs, ., add, (, ref, ), ;, }, boolean, canEliminate, (, ), {, if, (, !, canCollapseUnannotatedChildNames, (, ), ||]
[add, (, ref, ), ;, }, boolean, canEliminate, (, ), {, if, (, !, canCollapseUnannotatedChildNames, (, ), ||, totalGets, >]
[;, }, boolean, canEliminate, (, ), {, if, (, !, canCollapseUnannotatedChildNames, (, ), ||, totalGets, >, 0, ), {, return]
[), {, if, (, !, canCollapseUnannotatedChildNames, (, ), ||, totalGets, >, 0, ), {, return, false, ;, }, if, (]
[), {, if, (, !, canCollapseUnannotatedChildNames, (, ), ||, totalGets, >, 0, ), {, return, false, ;, }, if, (]
[if, (, !, canCollapseUnannotatedChildNames, (, ), ||, totalGets, >, 0, ), {, return, false, ;, }, if, (, props, !=]
[>, 0, ), {, return, false, ;, }, if, (, props, !=, null, ), {, for, (, Name, n, :]
[false, ;, }, if, (, props, !=, null, ), {, for, (, Name, n, :, props, ), {, if, (]
[;, }, if, (, props, !=, null, ), {, for, (, Name, n, :, props, ), {, if, (, !]
[;, }, if, (, props, !=, null, ), {, for, (, Name, n, :, props, ), {, if, (, !]
[{, for, (, Name, n, :, props, ), {, if, (, !, n, ., canCollapse, (, ), ), {, return]
[props, ), {, if, (, !, n, ., canCollapse, (, ), ), {, return, false, ;, }, }, }, return]
[), ), {, return, false, ;, }, }, }, return, true, ;, }, boolean, isSimpleStubDeclaration, (, ), {, if, (]
[), ), {, return, false, ;, }, }, }, return, true, ;, }, boolean, isSimpleStubDeclaration, (, ), {, if, (]
[), ), {, return, false, ;, }, }, }, return, true, ;, }, boolean, isSimpleStubDeclaration, (, ), {, if, (]
[}, return, true, ;, }, boolean, isSimpleStubDeclaration, (, ), {, if, (, getRefs, (, ), ., size, (, ), ==]
[isSimpleStubDeclaration, (, ), {, if, (, getRefs, (, ), ., size, (, ), ==, 1, ), {, Ref, ref, =]
[isSimpleStubDeclaration, (, ), {, if, (, getRefs, (, ), ., size, (, ), ==, 1, ), {, Ref, ref, =]
[if, (, getRefs, (, ), ., size, (, ), ==, 1, ), {, Ref, ref, =, refs, ., get, (]
[size, (, ), ==, 1, ), {, Ref, ref, =, refs, ., get, (, 0, ), ;, JSDocInfo, info, =]
[size, (, ), ==, 1, ), {, Ref, ref, =, refs, ., get, (, 0, ), ;, JSDocInfo, info, =]
[size, (, ), ==, 1, ), {, Ref, ref, =, refs, ., get, (, 0, ), ;, JSDocInfo, info, =]
[refs, ., get, (, 0, ), ;, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (]
[refs, ., get, (, 0, ), ;, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (]
[refs, ., get, (, 0, ), ;, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (]
[refs, ., get, (, 0, ), ;, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (]
[refs, ., get, (, 0, ), ;, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (]
[info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getParent, (, ), !=]
[ref, ., node, ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getParent, (, ), !=, null, &&]
[ref, ., node, ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getParent, (, ), !=, null, &&]
[ref, ., node, ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getParent, (, ), !=, null, &&]
[ref, ., node, ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getParent, (, ), !=, null, &&]
[getParent, (, ), !=, null, &&, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), {, return]
[&&, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), {, return, true, ;, }, }, return]
[isExprResult, (, ), ), {, return, true, ;, }, }, return, false, ;, }, boolean, canCollapse, (, ), {, return]
[isExprResult, (, ), ), {, return, true, ;, }, }, return, false, ;, }, boolean, canCollapse, (, ), {, return]
[isExprResult, (, ), ), {, return, true, ;, }, }, return, false, ;, }, boolean, canCollapse, (, ), {, return]
[(, ), ), {, return, true, ;, }, }, return, false, ;, }, boolean, canCollapse, (, ), {, return, !]
[), {, return, true, ;, }, }, return, false, ;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&]
[{, return, true, ;, }, }, return, false, ;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !]
[}, }, return, false, ;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&]
[}, return, false, ;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (]
[}, return, false, ;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (]
[false, ;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||]
[false, ;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||]
[false, ;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||]
[;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (]
[;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (]
[;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (]
[boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (, parent, ==]
[(, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (, parent, ==, null, ||]
[(, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (, parent, ==, null, ||]
[!, isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&]
[isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (]
[isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (]
[isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (]
[), &&, (, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >]
[(, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||]
[(, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||]
[||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >]
[==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&]
[==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&]
[||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&, deleteProps, ==]
[>, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return]
[>, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return]
[>, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return]
[>, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return]
[>, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==]
[>, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==]
[deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||]
[deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||]
[deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||]
[;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||, this, ., type, ==]
[;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||, this, ., type, ==]
[Type, ., GET, ||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (]
[Type, ., GET, ||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (]
[Type, ., GET, ||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (]
[Type, ., GET, ||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (]
[Type, ., GET, ||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (]
[Type, ., GET, ||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (]
[GET, ||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==]
[GET, ||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==]
[type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER, ||]
[SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||]
[SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||]
[}, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=]
[canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||]
[canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||]
[), {, if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||, localSets, !=]
[if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||, localSets, !=, 0, ||]
[if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||, localSets, !=, 0, ||]
[type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||, localSets, !=, 0, ||, deleteProps, !=]
[OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return]
[(, ), ||, globalSets, !=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return, false, ;, }]
[(, ), ||, globalSets, !=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return, false, ;, }]
[!=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (]
[0, ||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (]
[0, ||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (]
[0, ||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (]
[{, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (, declaration, ., getTwin, (, ), !=]
[}, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (, declaration, ., getTwin, (, ), !=, null, ), {, return]
[declaration, ), ;, if, (, declaration, ., getTwin, (, ), !=, null, ), {, return, false, ;, }, if, (]
[(, declaration, ., getTwin, (, ), !=, null, ), {, return, false, ;, }, if, (, declaredType, ), {, return]
[), !=, null, ), {, return, false, ;, }, if, (, declaredType, ), {, return, true, ;, }, if, (]
[), !=, null, ), {, return, false, ;, }, if, (, declaredType, ), {, return, true, ;, }, if, (]
[), !=, null, ), {, return, false, ;, }, if, (, declaredType, ), {, return, true, ;, }, if, (]
[null, ), {, return, false, ;, }, if, (, declaredType, ), {, return, true, ;, }, if, (, parent, !=]
[{, return, false, ;, }, if, (, declaredType, ), {, return, true, ;, }, if, (, parent, !=, null, &&]
[{, return, false, ;, }, if, (, declaredType, ), {, return, true, ;, }, if, (, parent, !=, null, &&]
[), {, return, true, ;, }, if, (, parent, !=, null, &&, parent, ., shouldKeepKeys, (, ), ), {, return]
[}, if, (, parent, !=, null, &&, parent, ., shouldKeepKeys, (, ), ), {, return, false, ;, }, if, (]
[}, if, (, parent, !=, null, &&, parent, ., shouldKeepKeys, (, ), ), {, return, false, ;, }, if, (]
[(, parent, !=, null, &&, parent, ., shouldKeepKeys, (, ), ), {, return, false, ;, }, if, (, aliasingGets, >]
[&&, parent, ., shouldKeepKeys, (, ), ), {, return, false, ;, }, if, (, aliasingGets, >, 0, ), {, return]
[(, ), ), {, return, false, ;, }, if, (, aliasingGets, >, 0, ), {, return, false, ;, }, return]
[), ), {, return, false, ;, }, if, (, aliasingGets, >, 0, ), {, return, false, ;, }, return, (]
[), ), {, return, false, ;, }, if, (, aliasingGets, >, 0, ), {, return, false, ;, }, return, (]
[), ), {, return, false, ;, }, if, (, aliasingGets, >, 0, ), {, return, false, ;, }, return, (]
[{, return, false, ;, }, if, (, aliasingGets, >, 0, ), {, return, false, ;, }, return, (, parent, ==]
[false, ;, }, if, (, aliasingGets, >, 0, ), {, return, false, ;, }, return, (, parent, ==, null, ||]
[false, ;, }, if, (, aliasingGets, >, 0, ), {, return, false, ;, }, return, (, parent, ==, null, ||]
[return, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return]
[return, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return]
[return, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return]
[parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==]
[parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==]
[parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==, Type, ., OBJECTLIT, &&]
[parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==, Type, ., OBJECTLIT, &&]
[canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==, Type, ., OBJECTLIT, &&, aliasingGets, >]
[), {, return, type, ==, Type, ., OBJECTLIT, &&, aliasingGets, >, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return]
[), {, return, type, ==, Type, ., OBJECTLIT, &&, aliasingGets, >, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return]
[), {, return, type, ==, Type, ., OBJECTLIT, &&, aliasingGets, >, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return]
[return, type, ==, Type, ., OBJECTLIT, &&, aliasingGets, >, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==]
[==, Type, ., OBJECTLIT, &&, aliasingGets, >, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&]
[==, Type, ., OBJECTLIT, &&, aliasingGets, >, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&]
[., OBJECTLIT, &&, aliasingGets, >, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&, localSets, >]
[boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&, localSets, >, 0, ;, }, void, setDeclaredType, (, ), {]
[(, ), {, return, globalSets, ==, 0, &&, localSets, >, 0, ;, }, void, setDeclaredType, (, ), {, declaredType, =]
[&&, localSets, >, 0, ;, }, void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =]
[>, 0, ;, }, void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =, parent, ;]
[>, 0, ;, }, void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =, parent, ;]
[;, }, void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =, parent, ;, ancestor, !=]
[void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =, parent, ;, ancestor, !=, null, ;]
[(, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =, parent, ;, ancestor, !=, null, ;, ancestor, =]
[(, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =, parent, ;, ancestor, !=, null, ;, ancestor, =]
[true, ;, for, (, Name, ancestor, =, parent, ;, ancestor, !=, null, ;, ancestor, =, ancestor, ., parent, ), {]
[true, ;, for, (, Name, ancestor, =, parent, ;, ancestor, !=, null, ;, ancestor, =, ancestor, ., parent, ), {]
[Name, ancestor, =, parent, ;, ancestor, !=, null, ;, ancestor, =, ancestor, ., parent, ), {, ancestor, ., hasDeclaredTypeDescendant, =]
[=, ancestor, ., parent, ), {, ancestor, ., hasDeclaredTypeDescendant, =, true, ;, }, }, boolean, isDeclaredType, (, ), {, return]
[=, true, ;, }, }, boolean, isDeclaredType, (, ), {, return, declaredType, ;, }, boolean, isNamespace, (, ), {, return]
[=, true, ;, }, }, boolean, isDeclaredType, (, ), {, return, declaredType, ;, }, boolean, isNamespace, (, ), {, return]
[;, }, }, boolean, isDeclaredType, (, ), {, return, declaredType, ;, }, boolean, isNamespace, (, ), {, return, hasDeclaredTypeDescendant, &&]
[;, }, }, boolean, isDeclaredType, (, ), {, return, declaredType, ;, }, boolean, isNamespace, (, ), {, return, hasDeclaredTypeDescendant, &&]
[}, boolean, isDeclaredType, (, ), {, return, declaredType, ;, }, boolean, isNamespace, (, ), {, return, hasDeclaredTypeDescendant, &&, type, ==]
[}, boolean, isDeclaredType, (, ), {, return, declaredType, ;, }, boolean, isNamespace, (, ), {, return, hasDeclaredTypeDescendant, &&, type, ==]
[isNamespace, (, ), {, return, hasDeclaredTypeDescendant, &&, type, ==, Type, ., OBJECTLIT, ;, }, boolean, isSimpleName, (, ), {, return]
[isNamespace, (, ), {, return, hasDeclaredTypeDescendant, &&, type, ==, Type, ., OBJECTLIT, ;, }, boolean, isSimpleName, (, ), {, return]
[), {, return, hasDeclaredTypeDescendant, &&, type, ==, Type, ., OBJECTLIT, ;, }, boolean, isSimpleName, (, ), {, return, parent, ==]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return]
[{, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return, getFullName, (, ), +]
[parent, ==, null, ;, }, @, Override, public, String, toString, (, ), {, return, getFullName, (, ), +, " (", +]
[null, ;, }, @, Override, public, String, toString, (, ), {, return, getFullName, (, ), +, " (", +, type, +]
[}, @, Override, public, String, toString, (, ), {, return, getFullName, (, ), +, " (", +, type, +, "): globalSets=", +]
[Override, public, String, toString, (, ), {, return, getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +]
[String, toString, (, ), {, return, getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +]
[(, ), {, return, getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +]
[{, return, getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +]
[getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +]
[), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +]
[" (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +]
[type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +]
[totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return]
[JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, private, static, JSDocInfo, getDocInfoForDeclaration, (, Ref, ref, ), {, if, (]
[JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, private, static, JSDocInfo, getDocInfoForDeclaration, (, Ref, ref, ), {, if, (]
[JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, private, static, JSDocInfo, getDocInfoForDeclaration, (, Ref, ref, ), {, if, (]
[{, return, docInfo, ;, }, private, static, JSDocInfo, getDocInfoForDeclaration, (, Ref, ref, ), {, if, (, ref, ., node, !=]
[static, JSDocInfo, getDocInfoForDeclaration, (, Ref, ref, ), {, if, (, ref, ., node, !=, null, ), {, Node, refParent, =]
[static, JSDocInfo, getDocInfoForDeclaration, (, Ref, ref, ), {, if, (, ref, ., node, !=, null, ), {, Node, refParent, =]
[static, JSDocInfo, getDocInfoForDeclaration, (, Ref, ref, ), {, if, (, ref, ., node, !=, null, ), {, Node, refParent, =]
[ref, ., node, !=, null, ), {, Node, refParent, =, ref, ., node, ., getParent, (, ), ;, switch, (]
[ref, ., node, !=, null, ), {, Node, refParent, =, ref, ., node, ., getParent, (, ), ;, switch, (]
[refParent, =, ref, ., node, ., getParent, (, ), ;, switch, (, refParent, ., getType, (, ), ), {, case]
[refParent, =, ref, ., node, ., getParent, (, ), ;, switch, (, refParent, ., getType, (, ), ), {, case]
[., getParent, (, ), ;, switch, (, refParent, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, case]
[., getParent, (, ), ;, switch, (, refParent, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, case]
[switch, (, refParent, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, return]
[switch, (, refParent, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, return]
[), {, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case]
[), {, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case]
[FUNCTION, :, case, Token, ., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return]
[FUNCTION, :, case, Token, ., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return]
[FUNCTION, :, case, Token, ., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return]
[FUNCTION, :, case, Token, ., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return]
[., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return, ref, ., node, ==]
[., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return, ref, ., node, ==]
[getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return, ref, ., node, ==, refParent, ., getFirstChild, (, ), ?]
[getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return, ref, ., node, ==, refParent, ., getFirstChild, (, ), ?]
[., VAR, :, return, ref, ., node, ==, refParent, ., getFirstChild, (, ), ?, refParent, ., getJSDocInfo, (, ), :]
[., VAR, :, return, ref, ., node, ==, refParent, ., getFirstChild, (, ), ?, refParent, ., getJSDocInfo, (, ), :]
[., VAR, :, return, ref, ., node, ==, refParent, ., getFirstChild, (, ), ?, refParent, ., getJSDocInfo, (, ), :]
[(, ), ?, refParent, ., getJSDocInfo, (, ), :, ref, ., node, ., getJSDocInfo, (, ), ;, }, }, return]
[final, Name, name, ;, final, Type, type, ;, final, Scope, scope, ;, final, int, preOrderIndex, ;, private, Ref, twin, =]
[null, ;, Ref, (, NodeTraversal, t, ,, Node, node, ,, Name, name, ,, Type, type, ,, int, index, ), {]
[null, ;, Ref, (, NodeTraversal, t, ,, Node, node, ,, Name, name, ,, Type, type, ,, int, index, ), {]
[NodeTraversal, t, ,, Node, node, ,, Name, name, ,, Type, type, ,, int, index, ), {, this, ., node, =]
[,, Node, node, ,, Name, name, ,, Type, type, ,, int, index, ), {, this, ., node, =, node, ;]
[,, Node, node, ,, Name, name, ,, Type, type, ,, int, index, ), {, this, ., node, =, node, ;]
[Name, name, ,, Type, type, ,, int, index, ), {, this, ., node, =, node, ;, this, ., name, =]
[,, Type, type, ,, int, index, ), {, this, ., node, =, node, ;, this, ., name, =, name, ;]
[,, Type, type, ,, int, index, ), {, this, ., node, =, node, ;, this, ., name, =, name, ;]
[int, index, ), {, this, ., node, =, node, ;, this, ., name, =, name, ;, this, ., module, =]
[int, index, ), {, this, ., node, =, node, ;, this, ., name, =, name, ;, this, ., module, =]
[int, index, ), {, this, ., node, =, node, ;, this, ., name, =, name, ;, this, ., module, =]
[int, index, ), {, this, ., node, =, node, ;, this, ., name, =, name, ;, this, ., module, =]
[node, =, node, ;, this, ., name, =, name, ;, this, ., module, =, t, ., getInput, (, ), ==]
[node, ;, this, ., name, =, name, ;, this, ., module, =, t, ., getInput, (, ), ==, null, ?]
[this, ., name, =, name, ;, this, ., module, =, t, ., getInput, (, ), ==, null, ?, null, :]
[this, ., name, =, name, ;, this, ., module, =, t, ., getInput, (, ), ==, null, ?, null, :]
[this, ., name, =, name, ;, this, ., module, =, t, ., getInput, (, ), ==, null, ?, null, :]
[t, ., getInput, (, ), ==, null, ?, null, :, t, ., getInput, (, ), ., getModule, (, ), ;]
[t, ., getInput, (, ), ==, null, ?, null, :, t, ., getInput, (, ), ., getModule, (, ), ;]
[), ==, null, ?, null, :, t, ., getInput, (, ), ., getModule, (, ), ;, this, ., source, =]
[), ==, null, ?, null, :, t, ., getInput, (, ), ., getModule, (, ), ;, this, ., source, =]
[t, ., getInput, (, ), ., getModule, (, ), ;, this, ., source, =, node, ., getStaticSourceFile, (, ), ;]
[t, ., getInput, (, ), ., getModule, (, ), ;, this, ., source, =, node, ., getStaticSourceFile, (, ), ;]
[), ., getModule, (, ), ;, this, ., source, =, node, ., getStaticSourceFile, (, ), ;, this, ., type, =]
[getModule, (, ), ;, this, ., source, =, node, ., getStaticSourceFile, (, ), ;, this, ., type, =, type, ;]
[getModule, (, ), ;, this, ., source, =, node, ., getStaticSourceFile, (, ), ;, this, ., type, =, type, ;]
[this, ., source, =, node, ., getStaticSourceFile, (, ), ;, this, ., type, =, type, ;, this, ., scope, =]
[this, ., source, =, node, ., getStaticSourceFile, (, ), ;, this, ., type, =, type, ;, this, ., scope, =]
[getStaticSourceFile, (, ), ;, this, ., type, =, type, ;, this, ., scope, =, t, ., getScope, (, ), ;]
[getStaticSourceFile, (, ), ;, this, ., type, =, type, ;, this, ., scope, =, t, ., getScope, (, ), ;]
[this, ., type, =, type, ;, this, ., scope, =, t, ., getScope, (, ), ;, this, ., preOrderIndex, =]
[this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Ref, original, ,, Type, type, ,, int, index, ), {]
[this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Ref, original, ,, Type, type, ,, int, index, ), {]
[index, ;, }, private, Ref, (, Ref, original, ,, Type, type, ,, int, index, ), {, this, ., node, =]
[index, ;, }, private, Ref, (, Ref, original, ,, Type, type, ,, int, index, ), {, this, ., node, =]
[Ref, (, Ref, original, ,, Type, type, ,, int, index, ), {, this, ., node, =, original, ., node, ;]
[Ref, (, Ref, original, ,, Type, type, ,, int, index, ), {, this, ., node, =, original, ., node, ;]
[,, Type, type, ,, int, index, ), {, this, ., node, =, original, ., node, ;, this, ., name, =]
[,, Type, type, ,, int, index, ), {, this, ., node, =, original, ., node, ;, this, ., name, =]
[int, index, ), {, this, ., node, =, original, ., node, ;, this, ., name, =, original, ., name, ;]
[int, index, ), {, this, ., node, =, original, ., node, ;, this, ., name, =, original, ., name, ;]
[this, ., node, =, original, ., node, ;, this, ., name, =, original, ., name, ;, this, ., module, =]
[this, ., node, =, original, ., node, ;, this, ., name, =, original, ., name, ;, this, ., module, =]
[original, ., node, ;, this, ., name, =, original, ., name, ;, this, ., module, =, original, ., module, ;]
[original, ., node, ;, this, ., name, =, original, ., name, ;, this, ., module, =, original, ., module, ;]
[this, ., name, =, original, ., name, ;, this, ., module, =, original, ., module, ;, this, ., source, =]
[this, ., name, =, original, ., name, ;, this, ., module, =, original, ., module, ;, this, ., source, =]
[original, ., name, ;, this, ., module, =, original, ., module, ;, this, ., source, =, original, ., source, ;]
[original, ., name, ;, this, ., module, =, original, ., module, ;, this, ., source, =, original, ., source, ;]
[this, ., module, =, original, ., module, ;, this, ., source, =, original, ., source, ;, this, ., type, =]
[module, =, original, ., module, ;, this, ., source, =, original, ., source, ;, this, ., type, =, type, ;]
[module, =, original, ., module, ;, this, ., source, =, original, ., source, ;, this, ., type, =, type, ;]
[module, ;, this, ., source, =, original, ., source, ;, this, ., type, =, type, ;, this, ., scope, =]
[module, ;, this, ., source, =, original, ., source, ;, this, ., type, =, type, ;, this, ., scope, =]
[source, =, original, ., source, ;, this, ., type, =, type, ;, this, ., scope, =, original, ., scope, ;]
[source, =, original, ., source, ;, this, ., type, =, type, ;, this, ., scope, =, original, ., scope, ;]
[source, ;, this, ., type, =, type, ;, this, ., scope, =, original, ., scope, ;, this, ., preOrderIndex, =]
[., scope, ;, this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Type, type, ,, int, index, ), {]
[., scope, ;, this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Type, type, ,, int, index, ), {]
[., preOrderIndex, =, index, ;, }, private, Ref, (, Type, type, ,, int, index, ), {, this, ., type, =]
[=, index, ;, }, private, Ref, (, Type, type, ,, int, index, ), {, this, ., type, =, type, ;]
[=, index, ;, }, private, Ref, (, Type, type, ,, int, index, ), {, this, ., type, =, type, ;]
[private, Ref, (, Type, type, ,, int, index, ), {, this, ., type, =, type, ;, this, ., module, =]
[(, Type, type, ,, int, index, ), {, this, ., type, =, type, ;, this, ., module, =, null, ;]
[(, Type, type, ,, int, index, ), {, this, ., type, =, type, ;, this, ., module, =, null, ;]
[int, index, ), {, this, ., type, =, type, ;, this, ., module, =, null, ;, this, ., source, =]
[), {, this, ., type, =, type, ;, this, ., module, =, null, ;, this, ., source, =, null, ;]
[), {, this, ., type, =, type, ;, this, ., module, =, null, ;, this, ., source, =, null, ;]
[type, =, type, ;, this, ., module, =, null, ;, this, ., source, =, null, ;, this, ., scope, =]
[type, ;, this, ., module, =, null, ;, this, ., source, =, null, ;, this, ., scope, =, null, ;]
[type, ;, this, ., module, =, null, ;, this, ., source, =, null, ;, this, ., scope, =, null, ;]
[module, =, null, ;, this, ., source, =, null, ;, this, ., scope, =, null, ;, this, ., name, =]
[null, ;, this, ., source, =, null, ;, this, ., scope, =, null, ;, this, ., name, =, null, ;]
[null, ;, this, ., source, =, null, ;, this, ., scope, =, null, ;, this, ., name, =, null, ;]
[source, =, null, ;, this, ., scope, =, null, ;, this, ., name, =, null, ;, this, ., preOrderIndex, =]
[name, =, null, ;, this, ., preOrderIndex, =, index, ;, }, @, Override, public, Node, getNode, (, ), {, return]
[Override, public, Node, getNode, (, ), {, return, node, ;, }, @, Override, public, StaticSourceFile, getSourceFile, (, ), {, return]
[getSourceFile, (, ), {, return, source, ;, }, @, Override, public, StaticSlot, <, JSType, >, getSymbol, (, ), {, return]
[Override, public, StaticSlot, <, JSType, >, getSymbol, (, ), {, return, name, ;, }, JSModule, getModule, (, ), {, return]
[{, return, name, ;, }, JSModule, getModule, (, ), {, return, module, ;, }, String, getSourceName, (, ), {, return]
[{, return, name, ;, }, JSModule, getModule, (, ), {, return, module, ;, }, String, getSourceName, (, ), {, return]
[{, return, name, ;, }, JSModule, getModule, (, ), {, return, module, ;, }, String, getSourceName, (, ), {, return]
[name, ;, }, JSModule, getModule, (, ), {, return, module, ;, }, String, getSourceName, (, ), {, return, source, ==]
[}, JSModule, getModule, (, ), {, return, module, ;, }, String, getSourceName, (, ), {, return, source, ==, null, ?]
[getModule, (, ), {, return, module, ;, }, String, getSourceName, (, ), {, return, source, ==, null, ?, "", :]
[getModule, (, ), {, return, module, ;, }, String, getSourceName, (, ), {, return, source, ==, null, ?, "", :]
[return, source, ==, null, ?, "", :, source, ., getName, (, ), ;, }, Ref, getTwin, (, ), {, return]
[getName, (, ), ;, }, Ref, getTwin, (, ), {, return, twin, ;, }, boolean, isSet, (, ), {, return]
[getName, (, ), ;, }, Ref, getTwin, (, ), {, return, twin, ;, }, boolean, isSet, (, ), {, return]
[getName, (, ), ;, }, Ref, getTwin, (, ), {, return, twin, ;, }, boolean, isSet, (, ), {, return]
[), ;, }, Ref, getTwin, (, ), {, return, twin, ;, }, boolean, isSet, (, ), {, return, type, ==]
[), ;, }, Ref, getTwin, (, ), {, return, twin, ;, }, boolean, isSet, (, ), {, return, type, ==]
[getTwin, (, ), {, return, twin, ;, }, boolean, isSet, (, ), {, return, type, ==, Type, ., SET_FROM_GLOBAL, ||]
[getTwin, (, ), {, return, twin, ;, }, boolean, isSet, (, ), {, return, type, ==, Type, ., SET_FROM_GLOBAL, ||]
[), {, return, twin, ;, }, boolean, isSet, (, ), {, return, type, ==, Type, ., SET_FROM_GLOBAL, ||, type, ==]
[), {, return, twin, ;, }, boolean, isSet, (, ), {, return, type, ==, Type, ., SET_FROM_GLOBAL, ||, type, ==]
[SET_FROM_GLOBAL, ||, type, ==, Type, ., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {]
[SET_FROM_GLOBAL, ||, type, ==, Type, ., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {]
[Type, ., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (]
[Type, ., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (]
[., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (]
[., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (]
[., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (]
[., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (]
[static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (, a, ., type, ==]
[static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (, a, ., type, ==]
[Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (, a, ., type, ==, Type, ., ALIASING_GET, ||]
[Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (, a, ., type, ==, Type, ., ALIASING_GET, ||]
[Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (, a, ., type, ==, Type, ., ALIASING_GET, ||]
[b, ), {, Preconditions, ., checkArgument, (, (, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==]
[b, ), {, Preconditions, ., checkArgument, (, (, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==]
[checkArgument, (, (, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&]
[(, (, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (]
[(, (, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (]
[(, (, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (]
[(, (, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (]
[(, (, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (]
[(, (, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (]
[type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==]
[type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==]
[ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||]
[ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||]
[ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||]
[type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==]
[type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==]
[ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||]
[ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||]
[ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||]
[a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==]
[a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==]
[Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||]
[Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||]
[Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||]
[a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==]
[a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==]
[SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;]
[SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;]
[type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin, =]
[Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin, =, b, ;]
[Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin, =, b, ;]
[b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin, =, b, ;, b, ., twin, =]
[., twin, =, b, ;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type, ), {, return]
[b, ;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type, ), {, return, new, Ref, (]
[b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type, ), {, return, new, Ref, (, this, ,]
[twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type, ), {, return, new, Ref, (, this, ,, type, ,]
[twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type, ), {, return, new, Ref, (, this, ,, type, ,]
[(, this, ,, type, ,, this, ., preOrderIndex, ), ;, }, static, Ref, createRefForTesting, (, Type, type, ), {, return]
[type, ,, this, ., preOrderIndex, ), ;, }, static, Ref, createRefForTesting, (, Type, type, ), {, return, new, Ref, (]
[this, ., preOrderIndex, ), ;, }, static, Ref, createRefForTesting, (, Type, type, ), {, return, new, Ref, (, type, ,]
[., preOrderIndex, ), ;, }, static, Ref, createRefForTesting, (, Type, type, ), {, return, new, Ref, (, type, ,, -]
[private, final, PrintStream, stream, ;, private, final, Predicate, <, String, >, isInterestingSymbol, ;, private, Set, <, String, >, previousSymbolsInTree, =]
[private, final, PrintStream, stream, ;, private, final, Predicate, <, String, >, isInterestingSymbol, ;, private, Set, <, String, >, previousSymbolsInTree, =]
[., of, (, ), ;, Tracker, (, AbstractCompiler, compiler, ,, PrintStream, stream, ,, Predicate, <, String, >, isInterestingSymbol, ), {]
[., of, (, ), ;, Tracker, (, AbstractCompiler, compiler, ,, PrintStream, stream, ,, Predicate, <, String, >, isInterestingSymbol, ), {]
[;, Tracker, (, AbstractCompiler, compiler, ,, PrintStream, stream, ,, Predicate, <, String, >, isInterestingSymbol, ), {, this, ., compiler, =]
[(, AbstractCompiler, compiler, ,, PrintStream, stream, ,, Predicate, <, String, >, isInterestingSymbol, ), {, this, ., compiler, =, compiler, ;]
[(, AbstractCompiler, compiler, ,, PrintStream, stream, ,, Predicate, <, String, >, isInterestingSymbol, ), {, this, ., compiler, =, compiler, ;]
[PrintStream, stream, ,, Predicate, <, String, >, isInterestingSymbol, ), {, this, ., compiler, =, compiler, ;, this, ., stream, =]
[,, Predicate, <, String, >, isInterestingSymbol, ), {, this, ., compiler, =, compiler, ;, this, ., stream, =, stream, ;]
[,, Predicate, <, String, >, isInterestingSymbol, ), {, this, ., compiler, =, compiler, ;, this, ., stream, =, stream, ;]
[>, isInterestingSymbol, ), {, this, ., compiler, =, compiler, ;, this, ., stream, =, stream, ;, this, ., isInterestingSymbol, =]
[=, isInterestingSymbol, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, =, new, GlobalNamespace, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, =, new, GlobalNamespace, (, compiler, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,]
[{, GlobalNamespace, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, Set, <, String, >, currentSymbols, =]
[{, GlobalNamespace, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, Set, <, String, >, currentSymbols, =]
[root, ), ;, Set, <, String, >, currentSymbols, =, Sets, ., newTreeSet, (, ), ;, for, (, String, name, :]
[root, ), ;, Set, <, String, >, currentSymbols, =, Sets, ., newTreeSet, (, ), ;, for, (, String, name, :]
[root, ), ;, Set, <, String, >, currentSymbols, =, Sets, ., newTreeSet, (, ), ;, for, (, String, name, :]
[), ;, for, (, String, name, :, namespace, ., getNameIndex, (, ), ., keySet, (, ), ), {, if, (]
[), ;, for, (, String, name, :, namespace, ., getNameIndex, (, ), ., keySet, (, ), ), {, if, (]
[String, name, :, namespace, ., getNameIndex, (, ), ., keySet, (, ), ), {, if, (, isInterestingSymbol, ., apply, (]
[., getNameIndex, (, ), ., keySet, (, ), ), {, if, (, isInterestingSymbol, ., apply, (, name, ), ), {]
[., getNameIndex, (, ), ., keySet, (, ), ), {, if, (, isInterestingSymbol, ., apply, (, name, ), ), {]
[., keySet, (, ), ), {, if, (, isInterestingSymbol, ., apply, (, name, ), ), {, currentSymbols, ., add, (]
[isInterestingSymbol, ., apply, (, name, ), ), {, currentSymbols, ., add, (, name, ), ;, }, }, String, passName, =]
[isInterestingSymbol, ., apply, (, name, ), ), {, currentSymbols, ., add, (, name, ), ;, }, }, String, passName, =]
[currentSymbols, ., add, (, name, ), ;, }, }, String, passName, =, compiler, ., getLastPassName, (, ), ;, if, (]
[currentSymbols, ., add, (, name, ), ;, }, }, String, passName, =, compiler, ., getLastPassName, (, ), ;, if, (]
[add, (, name, ), ;, }, }, String, passName, =, compiler, ., getLastPassName, (, ), ;, if, (, passName, ==]
[), ;, }, }, String, passName, =, compiler, ., getLastPassName, (, ), ;, if, (, passName, ==, null, ), {]
[}, }, String, passName, =, compiler, ., getLastPassName, (, ), ;, if, (, passName, ==, null, ), {, passName, =]
[(, ), ;, if, (, passName, ==, null, ), {, passName, =, "[Unknown pass]", ;, }, for, (, String, sym, :]
[passName, ==, null, ), {, passName, =, "[Unknown pass]", ;, }, for, (, String, sym, :, currentSymbols, ), {, if, (]
[==, null, ), {, passName, =, "[Unknown pass]", ;, }, for, (, String, sym, :, currentSymbols, ), {, if, (, !]
[==, null, ), {, passName, =, "[Unknown pass]", ;, }, for, (, String, sym, :, currentSymbols, ), {, if, (, !]
[passName, =, "[Unknown pass]", ;, }, for, (, String, sym, :, currentSymbols, ), {, if, (, !, previousSymbolsInTree, ., contains, (]
[}, for, (, String, sym, :, currentSymbols, ), {, if, (, !, previousSymbolsInTree, ., contains, (, sym, ), ), {]
[}, for, (, String, sym, :, currentSymbols, ), {, if, (, !, previousSymbolsInTree, ., contains, (, sym, ), ), {]
[sym, :, currentSymbols, ), {, if, (, !, previousSymbolsInTree, ., contains, (, sym, ), ), {, stream, ., println, (]
[sym, :, currentSymbols, ), {, if, (, !, previousSymbolsInTree, ., contains, (, sym, ), ), {, stream, ., println, (]
[{, if, (, !, previousSymbolsInTree, ., contains, (, sym, ), ), {, stream, ., println, (, String, ., format, (]
[(, !, previousSymbolsInTree, ., contains, (, sym, ), ), {, stream, ., println, (, String, ., format, (, "%s: Added by %s", ,]
[previousSymbolsInTree, ., contains, (, sym, ), ), {, stream, ., println, (, String, ., format, (, "%s: Added by %s", ,, sym, ,]
[(, String, ., format, (, "%s: Added by %s", ,, sym, ,, passName, ), ), ;, }, }, for, (, String, sym, :]
["%s: Added by %s", ,, sym, ,, passName, ), ), ;, }, }, for, (, String, sym, :, previousSymbolsInTree, ), {, if, (]
[,, sym, ,, passName, ), ), ;, }, }, for, (, String, sym, :, previousSymbolsInTree, ), {, if, (, !]
[,, sym, ,, passName, ), ), ;, }, }, for, (, String, sym, :, previousSymbolsInTree, ), {, if, (, !]
[), ), ;, }, }, for, (, String, sym, :, previousSymbolsInTree, ), {, if, (, !, currentSymbols, ., contains, (]
[}, for, (, String, sym, :, previousSymbolsInTree, ), {, if, (, !, currentSymbols, ., contains, (, sym, ), ), {]
[}, for, (, String, sym, :, previousSymbolsInTree, ), {, if, (, !, currentSymbols, ., contains, (, sym, ), ), {]
[sym, :, previousSymbolsInTree, ), {, if, (, !, currentSymbols, ., contains, (, sym, ), ), {, stream, ., println, (]
[sym, :, previousSymbolsInTree, ), {, if, (, !, currentSymbols, ., contains, (, sym, ), ), {, stream, ., println, (]
[{, if, (, !, currentSymbols, ., contains, (, sym, ), ), {, stream, ., println, (, String, ., format, (]
[(, !, currentSymbols, ., contains, (, sym, ), ), {, stream, ., println, (, String, ., format, (, "%s: Removed by %s", ,]
[currentSymbols, ., contains, (, sym, ), ), {, stream, ., println, (, String, ., format, (, "%s: Removed by %s", ,, sym, ,]
[), {, stream, ., println, (, String, ., format, (, "%s: Removed by %s", ,, sym, ,, passName, ), ), ;, }, }]
[stream, ., println, (, String, ., format, (, "%s: Removed by %s", ,, sym, ,, passName, ), ), ;, }, }, previousSymbolsInTree, =]
