[;, private, final, AbstractCompiler, compiler, ;, private, final, JSTypeRegistry, registry, ;, private, final, ReverseAbstractInterpreter, reverseInterpreter, ;, private, final, Scope, syntacticScope]
[., warning, (, "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", ,, "Function literal argument refers to undefined this argument", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, JSTypeRegistry, registry, ;, private, final]
[,, "Function literal argument refers to undefined this argument", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, JSTypeRegistry, registry, ;, private, final, ReverseAbstractInterpreter, reverseInterpreter, ;, private]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, JSTypeRegistry, registry, ;, private, final, ReverseAbstractInterpreter, reverseInterpreter, ;, private, final, Scope]
[,, new, LinkedFlowScope, ., FlowScopeJoinOp, (, ), ), ;, this, ., compiler, =, compiler, ;, this, ., registry, =, compiler]
[), ;, this, ., compiler, =, compiler, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, this, .]
[=, compiler, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this]
[., compiler, =, compiler, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter]
[;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType]
[=, compiler, ., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType, =, registry, ., getNativeObjectType]
[., registry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType, =, registry]
[;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, .]
[., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE]
[=, reverseInterpreter, ;, this, ., unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =, functionScope, ;]
[., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =]
[;, this, ., unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (]
[=, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;, this]
[., unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, )]
[;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;, this, ., functionScope, =, LinkedFlowScope, ., createEntryLattice, (]
[., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;, this, ., functionScope]
[), ;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;, this, ., functionScope, =, LinkedFlowScope, ., createEntryLattice]
[=, functionScope, ;, inferArguments, (, functionScope, ), ;, this, ., functionScope, =, LinkedFlowScope, ., createEntryLattice, (, functionScope, ), ;, this]
[., syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;, this, ., functionScope, =, LinkedFlowScope, ., createEntryLattice, (, functionScope, )]
[;, inferArguments, (, functionScope, ), ;, this, ., functionScope, =, LinkedFlowScope, ., createEntryLattice, (, functionScope, ), ;, this, ., assertionFunctionsMap]
[;, this, ., functionScope, =, LinkedFlowScope, ., createEntryLattice, (, functionScope, ), ;, this, ., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator, <]
[), ;, this, ., functionScope, =, LinkedFlowScope, ., createEntryLattice, (, functionScope, ), ;, this, ., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator]
[=, LinkedFlowScope, ., createEntryLattice, (, functionScope, ), ;, this, ., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator, <, Var, >, varIt, =]
[., functionScope, =, LinkedFlowScope, ., createEntryLattice, (, functionScope, ), ;, this, ., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator, <, Var, >]
[;, this, ., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator, <, Var, >, varIt, =, functionScope, ., getDeclarativelyUnboundVarsWithoutTypes, (, ), ;, while]
[., createEntryLattice, (, functionScope, ), ;, this, ., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator, <, Var, >, varIt, =, functionScope, .]
[), ;, this, ., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator, <, Var, >, varIt, =, functionScope, ., getDeclarativelyUnboundVarsWithoutTypes, (, ), ;]
[=, assertionFunctionsMap, ;, Iterator, <, Var, >, varIt, =, functionScope, ., getDeclarativelyUnboundVarsWithoutTypes, (, ), ;, while, (, varIt, ., hasNext]
[., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator, <, Var, >, varIt, =, functionScope, ., getDeclarativelyUnboundVarsWithoutTypes, (, ), ;, while, (, varIt]
[;, Iterator, <, Var, >, varIt, =, functionScope, ., getDeclarativelyUnboundVarsWithoutTypes, (, ), ;, while, (, varIt, ., hasNext, (, )]
[;, while, (, varIt, ., hasNext, (, ), ), {, Var, var, =, varIt, ., next, (, ), ;, if]
[., getDeclarativelyUnboundVarsWithoutTypes, (, ), ;, while, (, varIt, ., hasNext, (, ), ), {, Var, var, =, varIt, ., next]
[), {, Var, var, =, varIt, ., next, (, ), ;, if, (, isUnflowable, (, var, ), ), {, continue]
[., hasNext, (, ), ), {, Var, var, =, varIt, ., next, (, ), ;, if, (, isUnflowable, (, var]
[;, if, (, isUnflowable, (, var, ), ), {, continue, ;, }, this, ., functionScope, ., inferSlotType, (, var, .]
[., next, (, ), ;, if, (, isUnflowable, (, var, ), ), {, continue, ;, }, this, ., functionScope, .]
[), {, continue, ;, }, this, ., functionScope, ., inferSlotType, (, var, ., getName, (, ), ,, getNativeType, (, VOID_TYPE]
[), ), {, continue, ;, }, this, ., functionScope, ., inferSlotType, (, var, ., getName, (, ), ,, getNativeType, (]
[;, }, this, ., bottomScope, =, LinkedFlowScope, ., createEntryLattice, (, Scope, ., createLatticeBottom, (, functionScope, ., getRootNode, (, ), )]
[., inferSlotType, (, var, ., getName, (, ), ,, getNativeType, (, VOID_TYPE, ), ), ;, }, this, ., bottomScope, =]
[., functionScope, ., inferSlotType, (, var, ., getName, (, ), ,, getNativeType, (, VOID_TYPE, ), ), ;, }, this, .]
[,, getNativeType, (, VOID_TYPE, ), ), ;, }, this, ., bottomScope, =, LinkedFlowScope, ., createEntryLattice, (, Scope, ., createLatticeBottom, (]
[., getName, (, ), ,, getNativeType, (, VOID_TYPE, ), ), ;, }, this, ., bottomScope, =, LinkedFlowScope, ., createEntryLattice, (]
[), ;, }, this, ., bottomScope, =, LinkedFlowScope, ., createEntryLattice, (, Scope, ., createLatticeBottom, (, functionScope, ., getRootNode, (, )]
[), ), ;, }, this, ., bottomScope, =, LinkedFlowScope, ., createEntryLattice, (, Scope, ., createLatticeBottom, (, functionScope, ., getRootNode, (]
[=, LinkedFlowScope, ., createEntryLattice, (, Scope, ., createLatticeBottom, (, functionScope, ., getRootNode, (, ), ), ), ;, }, private, void]
[., bottomScope, =, LinkedFlowScope, ., createEntryLattice, (, Scope, ., createLatticeBottom, (, functionScope, ., getRootNode, (, ), ), ), ;, }]
[;, }, private, void, inferArguments, (, Scope, functionScope, ), {, Node, functionNode, =, functionScope, ., getRootNode, (, ), ;, Node]
[., createEntryLattice, (, Scope, ., createLatticeBottom, (, functionScope, ., getRootNode, (, ), ), ), ;, }, private, void, inferArguments, (]
[), ;, }, private, void, inferArguments, (, Scope, functionScope, ), {, Node, functionNode, =, functionScope, ., getRootNode, (, ), ;]
[., createLatticeBottom, (, functionScope, ., getRootNode, (, ), ), ), ;, }, private, void, inferArguments, (, Scope, functionScope, ), {]
[), ), ;, }, private, void, inferArguments, (, Scope, functionScope, ), {, Node, functionNode, =, functionScope, ., getRootNode, (, )]
[., getRootNode, (, ), ), ), ;, }, private, void, inferArguments, (, Scope, functionScope, ), {, Node, functionNode, =, functionScope]
[;, Node, astParameters, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if]
[., getRootNode, (, ), ;, Node, astParameters, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode]
[;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =, functionNode, .]
[., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {]
[., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (]
[;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }]
[), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, .]
[., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, FunctionType, functionType, =, JSType]
[), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode]
[=, functionNode, ., getNext, (, ), ;, }, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, )]
[;, }, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, functionType, !=]
[., getNext, (, ), ;, }, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;]
[;, if, (, functionType, !=, null, ), {, Node, parameterTypes, =, functionType, ., getParametersNode, (, ), ;, if, (, parameterTypes]
[., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, functionType, !=, null, ), {, Node, parameterTypes, =]
[), ;, if, (, functionType, !=, null, ), {, Node, parameterTypes, =, functionType, ., getParametersNode, (, ), ;, if, (]
[., getJSType, (, ), ), ;, if, (, functionType, !=, null, ), {, Node, parameterTypes, =, functionType, ., getParametersNode, (]
[), {, Node, parameterTypes, =, functionType, ., getParametersNode, (, ), ;, if, (, parameterTypes, !=, null, ), {, Node, parameterTypeNode]
[!=, null, ), {, Node, parameterTypes, =, functionType, ., getParametersNode, (, ), ;, if, (, parameterTypes, !=, null, ), {]
[), {, Node, parameterTypes, =, functionType, ., getParametersNode, (, ), ;, if, (, parameterTypes, !=, null, ), {, Node, parameterTypeNode]
[;, if, (, parameterTypes, !=, null, ), {, Node, parameterTypeNode, =, parameterTypes, ., getFirstChild, (, ), ;, for, (, Node]
[., getParametersNode, (, ), ;, if, (, parameterTypes, !=, null, ), {, Node, parameterTypeNode, =, parameterTypes, ., getFirstChild, (, )]
[), {, Node, parameterTypeNode, =, parameterTypes, ., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (]
[!=, null, ), {, Node, parameterTypeNode, =, parameterTypes, ., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, .]
[), {, Node, parameterTypeNode, =, parameterTypes, ., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (]
[;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, Var, var, =, functionScope, ., getVar, (]
[., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, Var, var, =]
[), {, Var, var, =, functionScope, ., getVar, (, astParameter, ., getString, (, ), ), ;, Preconditions, ., checkNotNull, (]
[., children, (, ), ), {, Var, var, =, functionScope, ., getVar, (, astParameter, ., getString, (, ), ), ;]
[;, Preconditions, ., checkNotNull, (, var, ), ;, if, (, var, ., isTypeInferred, (, ), &&, var, ., getType, (]
[., getVar, (, astParameter, ., getString, (, ), ), ;, Preconditions, ., checkNotNull, (, var, ), ;, if, (, var]
[), ;, Preconditions, ., checkNotNull, (, var, ), ;, if, (, var, ., isTypeInferred, (, ), &&, var, ., getType]
[., getString, (, ), ), ;, Preconditions, ., checkNotNull, (, var, ), ;, if, (, var, ., isTypeInferred, (, )]
[;, if, (, var, ., isTypeInferred, (, ), &&, var, ., getType, (, ), ==, unknownType, ), {, JSType, newType]
[., checkNotNull, (, var, ), ;, if, (, var, ., isTypeInferred, (, ), &&, var, ., getType, (, ), ==]
[), ;, if, (, var, ., isTypeInferred, (, ), &&, var, ., getType, (, ), ==, unknownType, ), {, JSType]
[), {, JSType, newType, =, null, ;, if, (, iifeArgumentNode, !=, null, ), {, newType, =, iifeArgumentNode, ., getJSType, (]
[&&, var, ., getType, (, ), ==, unknownType, ), {, JSType, newType, =, null, ;, if, (, iifeArgumentNode, !=, null]
[., isTypeInferred, (, ), &&, var, ., getType, (, ), ==, unknownType, ), {, JSType, newType, =, null, ;, if]
[), {, JSType, newType, =, null, ;, if, (, iifeArgumentNode, !=, null, ), {, newType, =, iifeArgumentNode, ., getJSType, (]
[==, unknownType, ), {, JSType, newType, =, null, ;, if, (, iifeArgumentNode, !=, null, ), {, newType, =, iifeArgumentNode, .]
[., getType, (, ), ==, unknownType, ), {, JSType, newType, =, null, ;, if, (, iifeArgumentNode, !=, null, ), {]
[), {, JSType, newType, =, null, ;, if, (, iifeArgumentNode, !=, null, ), {, newType, =, iifeArgumentNode, ., getJSType, (]
[;, if, (, iifeArgumentNode, !=, null, ), {, newType, =, iifeArgumentNode, ., getJSType, (, ), ;, }, else, if, (]
[), {, newType, =, iifeArgumentNode, ., getJSType, (, ), ;, }, else, if, (, parameterTypeNode, !=, null, ), {, newType]
[!=, null, ), {, newType, =, iifeArgumentNode, ., getJSType, (, ), ;, }, else, if, (, parameterTypeNode, !=, null, )]
[), {, newType, =, iifeArgumentNode, ., getJSType, (, ), ;, }, else, if, (, parameterTypeNode, !=, null, ), {, newType]
[=, iifeArgumentNode, ., getJSType, (, ), ;, }, else, if, (, parameterTypeNode, !=, null, ), {, newType, =, parameterTypeNode, .]
[;, }, else, if, (, parameterTypeNode, !=, null, ), {, newType, =, parameterTypeNode, ., getJSType, (, ), ;, }, if]
[., getJSType, (, ), ;, }, else, if, (, parameterTypeNode, !=, null, ), {, newType, =, parameterTypeNode, ., getJSType, (]
[), {, newType, =, parameterTypeNode, ., getJSType, (, ), ;, }, if, (, newType, !=, null, ), {, var, .]
[!=, null, ), {, newType, =, parameterTypeNode, ., getJSType, (, ), ;, }, if, (, newType, !=, null, ), {]
[), {, newType, =, parameterTypeNode, ., getJSType, (, ), ;, }, if, (, newType, !=, null, ), {, var, .]
[=, parameterTypeNode, ., getJSType, (, ), ;, }, if, (, newType, !=, null, ), {, var, ., setType, (, newType]
[;, }, if, (, newType, !=, null, ), {, var, ., setType, (, newType, ), ;, astParameter, ., setJSType, (]
[., getJSType, (, ), ;, }, if, (, newType, !=, null, ), {, var, ., setType, (, newType, ), ;]
[), {, var, ., setType, (, newType, ), ;, astParameter, ., setJSType, (, newType, ), ;, }, }, if, (]
[!=, null, ), {, var, ., setType, (, newType, ), ;, astParameter, ., setJSType, (, newType, ), ;, }, }]
[), {, var, ., setType, (, newType, ), ;, astParameter, ., setJSType, (, newType, ), ;, }, }, if, (]
[;, astParameter, ., setJSType, (, newType, ), ;, }, }, if, (, parameterTypeNode, !=, null, ), {, parameterTypeNode, =, parameterTypeNode]
[., setType, (, newType, ), ;, astParameter, ., setJSType, (, newType, ), ;, }, }, if, (, parameterTypeNode, !=, null]
[), ;, astParameter, ., setJSType, (, newType, ), ;, }, }, if, (, parameterTypeNode, !=, null, ), {, parameterTypeNode, =]
[;, }, }, if, (, parameterTypeNode, !=, null, ), {, parameterTypeNode, =, parameterTypeNode, ., getNext, (, ), ;, }, if]
[., setJSType, (, newType, ), ;, }, }, if, (, parameterTypeNode, !=, null, ), {, parameterTypeNode, =, parameterTypeNode, ., getNext]
[), ;, }, }, if, (, parameterTypeNode, !=, null, ), {, parameterTypeNode, =, parameterTypeNode, ., getNext, (, ), ;, }]
[), {, parameterTypeNode, =, parameterTypeNode, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =]
[!=, null, ), {, parameterTypeNode, =, parameterTypeNode, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {]
[), {, parameterTypeNode, =, parameterTypeNode, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =]
[=, parameterTypeNode, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext]
[;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext, (, ), ;, }, }, }]
[., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext, (, )]
[), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext, (, ), ;, }, }, }, }, }, @, Override, FlowScope, createInitialEstimateLattice, (]
[!=, null, ), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext, (, ), ;, }, }, }, }, }, @, Override, FlowScope]
[), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext, (, ), ;, }, }, }, }, }, @, Override, FlowScope, createInitialEstimateLattice, (]
[=, iifeArgumentNode, ., getNext, (, ), ;, }, }, }, }, }, @, Override, FlowScope, createInitialEstimateLattice, (, ), {, return]
[;, }, }, }, }, }, @, Override, FlowScope, createInitialEstimateLattice, (, ), {, return, bottomScope, ;, }, @, Override, FlowScope]
[., getNext, (, ), ;, }, }, }, }, }, @, Override, FlowScope, createInitialEstimateLattice, (, ), {, return, bottomScope, ;]
[;, }, @, Override, FlowScope, createEntryLattice, (, ), {, return, functionScope, ;, }, @, Override, FlowScope, flowThrough, (, Node, n]
[;, }, @, Override, FlowScope, flowThrough, (, Node, n, ,, FlowScope, input, ), {, if, (, input, ==, bottomScope, )]
[), {, return, input, ;, }, FlowScope, output, =, input, ., createChildFlowScope, (, ), ;, output, =, traverse, (, n]
[==, bottomScope, ), {, return, input, ;, }, FlowScope, output, =, input, ., createChildFlowScope, (, ), ;, output, =, traverse]
[), {, return, input, ;, }, FlowScope, output, =, input, ., createChildFlowScope, (, ), ;, output, =, traverse, (, n]
[;, }, FlowScope, output, =, input, ., createChildFlowScope, (, ), ;, output, =, traverse, (, n, ,, output, ), ;]
[;, output, =, traverse, (, n, ,, output, ), ;, return, output, ;, }, @, Override, @, SuppressWarnings, (, {]
[., createChildFlowScope, (, ), ;, output, =, traverse, (, n, ,, output, ), ;, return, output, ;, }, @, Override]
[=, traverse, (, n, ,, output, ), ;, return, output, ;, }, @, Override, @, SuppressWarnings, (, {, "fallthrough", ,]
[;, return, output, ;, }, @, Override, @, SuppressWarnings, (, {, "fallthrough", ,, "incomplete-switch", }, ), List, <, FlowScope, >]
[,, output, ), ;, return, output, ;, }, @, Override, @, SuppressWarnings, (, {, "fallthrough", ,, "incomplete-switch", }, ), List]
[), ;, return, output, ;, }, @, Override, @, SuppressWarnings, (, {, "fallthrough", ,, "incomplete-switch", }, ), List, <, FlowScope]
[;, }, @, Override, @, SuppressWarnings, (, {, "fallthrough", ,, "incomplete-switch", }, ), List, <, FlowScope, >, branchedFlowThrough, (, Node]
[List, <, FlowScope, >, branchedFlowThrough, (, Node, source, ,, FlowScope, input, ), {, FlowScope, output, =, flowThrough, (, source, ,]
[), List, <, FlowScope, >, branchedFlowThrough, (, Node, source, ,, FlowScope, input, ), {, FlowScope, output, =, flowThrough, (, source]
[,, "incomplete-switch", }, ), List, <, FlowScope, >, branchedFlowThrough, (, Node, source, ,, FlowScope, input, ), {, FlowScope, output, =]
[}, ), List, <, FlowScope, >, branchedFlowThrough, (, Node, source, ,, FlowScope, input, ), {, FlowScope, output, =, flowThrough, (]
[;, Node, condition, =, null, ;, FlowScope, conditionFlowScope, =, null, ;, BooleanOutcomePair, conditionOutcomes, =, null, ;, List, <, DiGraphEdge, <]
[,, input, ), ;, Node, condition, =, null, ;, FlowScope, conditionFlowScope, =, null, ;, BooleanOutcomePair, conditionOutcomes, =, null, ;, List]
[), ;, Node, condition, =, null, ;, FlowScope, conditionFlowScope, =, null, ;, BooleanOutcomePair, conditionOutcomes, =, null, ;, List, <, DiGraphEdge]
[;, FlowScope, conditionFlowScope, =, null, ;, BooleanOutcomePair, conditionOutcomes, =, null, ;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >]
[;, BooleanOutcomePair, conditionOutcomes, =, null, ;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, branchEdges, =, getCfg, (, )]
[;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, branchEdges, =, getCfg, (, ), ., getOutEdges, (, source, )]
[;, List, <, FlowScope, >, result, =, Lists, ., newArrayListWithCapacity, (, branchEdges, ., size, (, ), ), ;, for, (]
[., getOutEdges, (, source, ), ;, List, <, FlowScope, >, result, =, Lists, ., newArrayListWithCapacity, (, branchEdges, ., size, (]
[), ;, List, <, FlowScope, >, result, =, Lists, ., newArrayListWithCapacity, (, branchEdges, ., size, (, ), ), ;, for]
[;, for, (, DiGraphEdge, <, Node, ,, Branch, >, branchEdge, :, branchEdges, ), {, Branch, branch, =, branchEdge, ., getValue]
[., newArrayListWithCapacity, (, branchEdges, ., size, (, ), ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, branchEdge, :]
[), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, branchEdge, :, branchEdges, ), {, Branch, branch, =, branchEdge, .]
[., size, (, ), ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, branchEdge, :, branchEdges, ), {, Branch]
[), {, Branch, branch, =, branchEdge, ., getValue, (, ), ;, FlowScope, newScope, =, output, ;, switch, (, branch, )]
[;, FlowScope, newScope, =, output, ;, switch, (, branch, ), {, case, ON_TRUE, :, if, (, NodeUtil, ., isForIn, (]
[., getValue, (, ), ;, FlowScope, newScope, =, output, ;, switch, (, branch, ), {, case, ON_TRUE, :, if, (]
[;, switch, (, branch, ), {, case, ON_TRUE, :, if, (, NodeUtil, ., isForIn, (, source, ), ), {, Node]
[), {, case, ON_TRUE, :, if, (, NodeUtil, ., isForIn, (, source, ), ), {, Node, item, =, source, .]
[:, if, (, NodeUtil, ., isForIn, (, source, ), ), {, Node, item, =, source, ., getFirstChild, (, ), ;]
[), {, Node, item, =, source, ., getFirstChild, (, ), ;, Node, obj, =, item, ., getNext, (, ), ;]
[., isForIn, (, source, ), ), {, Node, item, =, source, ., getFirstChild, (, ), ;, Node, obj, =, item]
[), ), {, Node, item, =, source, ., getFirstChild, (, ), ;, Node, obj, =, item, ., getNext, (, )]
[;, Node, obj, =, item, ., getNext, (, ), ;, FlowScope, informed, =, traverse, (, obj, ,, output, ., createChildFlowScope]
[., getFirstChild, (, ), ;, Node, obj, =, item, ., getNext, (, ), ;, FlowScope, informed, =, traverse, (, obj]
[;, FlowScope, informed, =, traverse, (, obj, ,, output, ., createChildFlowScope, (, ), ), ;, if, (, item, ., isVar]
[., getNext, (, ), ;, FlowScope, informed, =, traverse, (, obj, ,, output, ., createChildFlowScope, (, ), ), ;, if]
[;, if, (, item, ., isVar, (, ), ), {, item, =, item, ., getFirstChild, (, ), ;, }, if]
[,, output, ., createChildFlowScope, (, ), ), ;, if, (, item, ., isVar, (, ), ), {, item, =, item]
[), ;, if, (, item, ., isVar, (, ), ), {, item, =, item, ., getFirstChild, (, ), ;, }]
[., createChildFlowScope, (, ), ), ;, if, (, item, ., isVar, (, ), ), {, item, =, item, ., getFirstChild]
[), {, item, =, item, ., getFirstChild, (, ), ;, }, if, (, item, ., isName, (, ), ), {]
[., isVar, (, ), ), {, item, =, item, ., getFirstChild, (, ), ;, }, if, (, item, ., isName]
[=, item, ., getFirstChild, (, ), ;, }, if, (, item, ., isName, (, ), ), {, JSType, iterKeyType, =]
[;, }, if, (, item, ., isName, (, ), ), {, JSType, iterKeyType, =, getNativeType, (, STRING_TYPE, ), ;, ObjectType]
[., getFirstChild, (, ), ;, }, if, (, item, ., isName, (, ), ), {, JSType, iterKeyType, =, getNativeType, (]
[), {, JSType, iterKeyType, =, getNativeType, (, STRING_TYPE, ), ;, ObjectType, objType, =, getJSType, (, obj, ), ., dereference, (]
[., isName, (, ), ), {, JSType, iterKeyType, =, getNativeType, (, STRING_TYPE, ), ;, ObjectType, objType, =, getJSType, (, obj]
[;, ObjectType, objType, =, getJSType, (, obj, ), ., dereference, (, ), ;, JSType, objIndexType, =, objType, ==, null, ?]
[), ;, ObjectType, objType, =, getJSType, (, obj, ), ., dereference, (, ), ;, JSType, objIndexType, =, objType, ==, null]
[;, JSType, objIndexType, =, objType, ==, null, ?, null, :, objType, ., getIndexType, (, ), ;, if, (, objIndexType, !=]
[., dereference, (, ), ;, JSType, objIndexType, =, objType, ==, null, ?, null, :, objType, ., getIndexType, (, ), ;]
[), ., dereference, (, ), ;, JSType, objIndexType, =, objType, ==, null, ?, null, :, objType, ., getIndexType, (, )]
[;, if, (, objIndexType, !=, null, &&, !, objIndexType, ., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =, iterKeyType, .]
[?, null, :, objType, ., getIndexType, (, ), ;, if, (, objIndexType, !=, null, &&, !, objIndexType, ., isUnknownType, (]
[==, null, ?, null, :, objType, ., getIndexType, (, ), ;, if, (, objIndexType, !=, null, &&, !, objIndexType, .]
[?, null, :, objType, ., getIndexType, (, ), ;, if, (, objIndexType, !=, null, &&, !, objIndexType, ., isUnknownType, (]
[:, objType, ., getIndexType, (, ), ;, if, (, objIndexType, !=, null, &&, !, objIndexType, ., isUnknownType, (, ), )]
[;, if, (, objIndexType, !=, null, &&, !, objIndexType, ., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =, iterKeyType, .]
[., getIndexType, (, ), ;, if, (, objIndexType, !=, null, &&, !, objIndexType, ., isUnknownType, (, ), ), {, JSType]
[), {, JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (, objIndexType, ), ;, if, (, !, narrowedKeyType, ., isEmptyType, (, )]
[&&, !, objIndexType, ., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (, objIndexType, ), ;, if]
[!=, null, &&, !, objIndexType, ., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (, objIndexType, )]
[&&, !, objIndexType, ., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (, objIndexType, ), ;, if]
[), {, JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (, objIndexType, ), ;, if, (, !, narrowedKeyType, ., isEmptyType, (, )]
[), {, JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (, objIndexType, ), ;, if, (, !, narrowedKeyType, ., isEmptyType, (, )]
[., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (, objIndexType, ), ;, if, (, !, narrowedKeyType]
[;, if, (, !, narrowedKeyType, ., isEmptyType, (, ), ), {, iterKeyType, =, narrowedKeyType, ;, }, }, redeclareSimpleVar, (, informed]
[., getGreatestSubtype, (, objIndexType, ), ;, if, (, !, narrowedKeyType, ., isEmptyType, (, ), ), {, iterKeyType, =, narrowedKeyType, ;]
[), ;, if, (, !, narrowedKeyType, ., isEmptyType, (, ), ), {, iterKeyType, =, narrowedKeyType, ;, }, }, redeclareSimpleVar, (]
[), {, iterKeyType, =, narrowedKeyType, ;, }, }, redeclareSimpleVar, (, informed, ,, item, ,, iterKeyType, ), ;, }, newScope, =]
[), {, iterKeyType, =, narrowedKeyType, ;, }, }, redeclareSimpleVar, (, informed, ,, item, ,, iterKeyType, ), ;, }, newScope, =]
[., isEmptyType, (, ), ), {, iterKeyType, =, narrowedKeyType, ;, }, }, redeclareSimpleVar, (, informed, ,, item, ,, iterKeyType, )]
[=, narrowedKeyType, ;, }, }, redeclareSimpleVar, (, informed, ,, item, ,, iterKeyType, ), ;, }, newScope, =, informed, ;, break]
[;, }, }, redeclareSimpleVar, (, informed, ,, item, ,, iterKeyType, ), ;, }, newScope, =, informed, ;, break, ;, }]
[;, }, newScope, =, informed, ;, break, ;, }, case, ON_FALSE, :, if, (, condition, ==, null, ), {, condition]
[,, item, ,, iterKeyType, ), ;, }, newScope, =, informed, ;, break, ;, }, case, ON_FALSE, :, if, (, condition]
[,, iterKeyType, ), ;, }, newScope, =, informed, ;, break, ;, }, case, ON_FALSE, :, if, (, condition, ==, null]
[), ;, }, newScope, =, informed, ;, break, ;, }, case, ON_FALSE, :, if, (, condition, ==, null, ), {]
[=, informed, ;, break, ;, }, case, ON_FALSE, :, if, (, condition, ==, null, ), {, condition, =, NodeUtil, .]
[;, break, ;, }, case, ON_FALSE, :, if, (, condition, ==, null, ), {, condition, =, NodeUtil, ., getConditionExpression, (]
[:, if, (, condition, ==, null, ), {, condition, =, NodeUtil, ., getConditionExpression, (, source, ), ;, if, (, condition]
[), {, condition, =, NodeUtil, ., getConditionExpression, (, source, ), ;, if, (, condition, ==, null, &&, source, ., isCase]
[==, null, ), {, condition, =, NodeUtil, ., getConditionExpression, (, source, ), ;, if, (, condition, ==, null, &&, source]
[), {, condition, =, NodeUtil, ., getConditionExpression, (, source, ), ;, if, (, condition, ==, null, &&, source, ., isCase]
[=, NodeUtil, ., getConditionExpression, (, source, ), ;, if, (, condition, ==, null, &&, source, ., isCase, (, ), )]
[;, if, (, condition, ==, null, &&, source, ., isCase, (, ), ), {, condition, =, source, ;, if, (]
[., getConditionExpression, (, source, ), ;, if, (, condition, ==, null, &&, source, ., isCase, (, ), ), {, condition]
[), ;, if, (, condition, ==, null, &&, source, ., isCase, (, ), ), {, condition, =, source, ;, if]
[), {, condition, =, source, ;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ., getFirstChild]
[&&, source, ., isCase, (, ), ), {, condition, =, source, ;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope]
[==, null, &&, source, ., isCase, (, ), ), {, condition, =, source, ;, if, (, conditionFlowScope, ==, null, )]
[&&, source, ., isCase, (, ), ), {, condition, =, source, ;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope]
[), {, condition, =, source, ;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ., getFirstChild]
[., isCase, (, ), ), {, condition, =, source, ;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse]
[=, source, ;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ., getFirstChild, (, ), ,]
[;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ., getFirstChild, (, ), ,, output, .]
[), {, conditionFlowScope, =, traverse, (, condition, ., getFirstChild, (, ), ,, output, ., createChildFlowScope, (, ), ), ;, }]
[==, null, ), {, conditionFlowScope, =, traverse, (, condition, ., getFirstChild, (, ), ,, output, ., createChildFlowScope, (, ), )]
[), {, conditionFlowScope, =, traverse, (, condition, ., getFirstChild, (, ), ,, output, ., createChildFlowScope, (, ), ), ;, }]
[=, traverse, (, condition, ., getFirstChild, (, ), ,, output, ., createChildFlowScope, (, ), ), ;, }, }, }, if]
[;, }, }, }, if, (, condition, !=, null, ), {, if, (, condition, ., isAnd, (, ), ||, condition]
[,, output, ., createChildFlowScope, (, ), ), ;, }, }, }, if, (, condition, !=, null, ), {, if, (]
[., getFirstChild, (, ), ,, output, ., createChildFlowScope, (, ), ), ;, }, }, }, if, (, condition, !=, null]
[), ;, }, }, }, if, (, condition, !=, null, ), {, if, (, condition, ., isAnd, (, ), ||]
[., createChildFlowScope, (, ), ), ;, }, }, }, if, (, condition, !=, null, ), {, if, (, condition, .]
[), {, if, (, condition, ., isAnd, (, ), ||, condition, ., isOr, (, ), ), {, if, (, conditionOutcomes]
[!=, null, ), {, if, (, condition, ., isAnd, (, ), ||, condition, ., isOr, (, ), ), {, if]
[), {, if, (, condition, ., isAnd, (, ), ||, condition, ., isOr, (, ), ), {, if, (, conditionOutcomes]
[), {, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes, =, condition, ., isAnd, (, ), ?, traverseAnd, (, condition]
[||, condition, ., isOr, (, ), ), {, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes, =, condition, ., isAnd]
[., isAnd, (, ), ||, condition, ., isOr, (, ), ), {, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes]
[), {, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes, =, condition, ., isAnd, (, ), ?, traverseAnd, (, condition]
[., isOr, (, ), ), {, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes, =, condition, ., isAnd, (, )]
[), {, conditionOutcomes, =, condition, ., isAnd, (, ), ?, traverseAnd, (, condition, ,, output, ., createChildFlowScope, (, ), )]
[==, null, ), {, conditionOutcomes, =, condition, ., isAnd, (, ), ?, traverseAnd, (, condition, ,, output, ., createChildFlowScope, (]
[), {, conditionOutcomes, =, condition, ., isAnd, (, ), ?, traverseAnd, (, condition, ,, output, ., createChildFlowScope, (, ), )]
[=, condition, ., isAnd, (, ), ?, traverseAnd, (, condition, ,, output, ., createChildFlowScope, (, ), ), :, traverseOr, (]
[;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,]
[?, traverseAnd, (, condition, ,, output, ., createChildFlowScope, (, ), ), :, traverseOr, (, condition, ,, output, ., createChildFlowScope, (]
[., isAnd, (, ), ?, traverseAnd, (, condition, ,, output, ., createChildFlowScope, (, ), ), :, traverseOr, (, condition, ,]
[:, traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition]
[,, output, ., createChildFlowScope, (, ), ), :, traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }]
[), :, traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (]
[., createChildFlowScope, (, ), ), :, traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =]
[;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,]
[,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope]
[), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, )]
[., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition]
[=, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==, Branch]
[;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ,, output, ., createChildFlowScope]
[., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==, Branch, ., ON_TRUE]
[,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==, Branch, ., ON_TRUE, ), ,, branch, ==]
[,, branch, ==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =]
[., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==, Branch, ., ON_TRUE, ), ,, branch, ==, Branch, .]
[,, branch, ==, Branch, ., ON_TRUE, ), ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (]
[., getType, (, ), ,, branch, ==, Branch, ., ON_TRUE, ), ,, branch, ==, Branch, ., ON_TRUE, ), ;, }]
[), ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope]
[==, Branch, ., ON_TRUE, ), ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==]
[), ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope]
[., ON_TRUE, ), ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==, null, )]
[), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ,, output, .]
[==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (]
[), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ,, output, .]
[., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ,]
[), {, conditionFlowScope, =, traverse, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, .]
[==, null, ), {, conditionFlowScope, =, traverse, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =]
[), {, conditionFlowScope, =, traverse, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, .]
[=, traverse, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition]
[;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,, branch, ==, Branch, ., ON_TRUE, ), ;, }]
[,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,, branch]
[), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,, branch, ==, Branch, ., ON_TRUE, ), ;]
[., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,, branch, ==, Branch]
[=, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, break, ;]
[;, }, }, break, ;, }, result, ., add, (, newScope, ., optimize, (, ), ), ;, }, return, result]
[., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, break, ;, }, result]
[,, conditionFlowScope, ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, break, ;, }, result, ., add, (, newScope]
[,, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, break, ;, }, result, ., add, (, newScope, ., optimize]
[), ;, }, }, break, ;, }, result, ., add, (, newScope, ., optimize, (, ), ), ;, }, return]
[==, Branch, ., ON_TRUE, ), ;, }, }, break, ;, }, result, ., add, (, newScope, ., optimize, (, )]
[), ;, }, }, break, ;, }, result, ., add, (, newScope, ., optimize, (, ), ), ;, }, return]
[., ON_TRUE, ), ;, }, }, break, ;, }, result, ., add, (, newScope, ., optimize, (, ), ), ;]
[;, }, return, result, ;, }, private, FlowScope, traverse, (, Node, n, ,, FlowScope, scope, ), {, switch, (, n]
[., add, (, newScope, ., optimize, (, ), ), ;, }, return, result, ;, }, private, FlowScope, traverse, (, Node]
[), ;, }, return, result, ;, }, private, FlowScope, traverse, (, Node, n, ,, FlowScope, scope, ), {, switch, (]
[., optimize, (, ), ), ;, }, return, result, ;, }, private, FlowScope, traverse, (, Node, n, ,, FlowScope, scope]
[;, }, private, FlowScope, traverse, (, Node, n, ,, FlowScope, scope, ), {, switch, (, n, ., getType, (, )]
[), {, case, Token, ., ASSIGN, :, scope, =, traverseAssign, (, n, ,, scope, ), ;, break, ;, case, Token]
[., getType, (, ), ), {, case, Token, ., ASSIGN, :, scope, =, traverseAssign, (, n, ,, scope, ), ;]
[:, scope, =, traverseAssign, (, n, ,, scope, ), ;, break, ;, case, Token, ., NAME, :, scope, =, traverseName]
[., ASSIGN, :, scope, =, traverseAssign, (, n, ,, scope, ), ;, break, ;, case, Token, ., NAME, :, scope]
[=, traverseAssign, (, n, ,, scope, ), ;, break, ;, case, Token, ., NAME, :, scope, =, traverseName, (, n]
[;, break, ;, case, Token, ., NAME, :, scope, =, traverseName, (, n, ,, scope, ), ;, break, ;, case]
[,, scope, ), ;, break, ;, case, Token, ., NAME, :, scope, =, traverseName, (, n, ,, scope, ), ;]
[), ;, break, ;, case, Token, ., NAME, :, scope, =, traverseName, (, n, ,, scope, ), ;, break, ;]
[:, scope, =, traverseName, (, n, ,, scope, ), ;, break, ;, case, Token, ., GETPROP, :, scope, =, traverseGetProp]
[., NAME, :, scope, =, traverseName, (, n, ,, scope, ), ;, break, ;, case, Token, ., GETPROP, :, scope]
[=, traverseName, (, n, ,, scope, ), ;, break, ;, case, Token, ., GETPROP, :, scope, =, traverseGetProp, (, n]
[;, break, ;, case, Token, ., GETPROP, :, scope, =, traverseGetProp, (, n, ,, scope, ), ;, break, ;, case]
[,, scope, ), ;, break, ;, case, Token, ., GETPROP, :, scope, =, traverseGetProp, (, n, ,, scope, ), ;]
[), ;, break, ;, case, Token, ., GETPROP, :, scope, =, traverseGetProp, (, n, ,, scope, ), ;, break, ;]
[:, scope, =, traverseGetProp, (, n, ,, scope, ), ;, break, ;, case, Token, ., AND, :, scope, =, traverseAnd]
[., GETPROP, :, scope, =, traverseGetProp, (, n, ,, scope, ), ;, break, ;, case, Token, ., AND, :, scope]
[=, traverseGetProp, (, n, ,, scope, ), ;, break, ;, case, Token, ., AND, :, scope, =, traverseAnd, (, n]
[;, break, ;, case, Token, ., AND, :, scope, =, traverseAnd, (, n, ,, scope, ), ., getJoinedFlowScope, (, )]
[,, scope, ), ;, break, ;, case, Token, ., AND, :, scope, =, traverseAnd, (, n, ,, scope, ), .]
[), ;, break, ;, case, Token, ., AND, :, scope, =, traverseAnd, (, n, ,, scope, ), ., getJoinedFlowScope, (]
[:, scope, =, traverseAnd, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;]
[., AND, :, scope, =, traverseAnd, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;]
[=, traverseAnd, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token]
[;, break, ;, case, Token, ., OR, :, scope, =, traverseOr, (, n, ,, scope, ), ., getJoinedFlowScope, (, )]
[., createChildFlowScope, (, ), ;, break, ;, case, Token, ., OR, :, scope, =, traverseOr, (, n, ,, scope, )]
[., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., OR, :, scope, =, traverseOr, (]
[,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., OR, :, scope]
[), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., OR, :, scope, =, traverseOr]
[:, scope, =, traverseOr, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;]
[., OR, :, scope, =, traverseOr, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;]
[=, traverseOr, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token]
[;, break, ;, case, Token, ., HOOK, :, scope, =, traverseHook, (, n, ,, scope, ), ;, break, ;, case]
[., createChildFlowScope, (, ), ;, break, ;, case, Token, ., HOOK, :, scope, =, traverseHook, (, n, ,, scope, )]
[., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., HOOK, :, scope, =, traverseHook, (]
[,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., HOOK, :, scope]
[), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., HOOK, :, scope, =, traverseHook]
[:, scope, =, traverseHook, (, n, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, scope, =, traverseObjectLiteral]
[., HOOK, :, scope, =, traverseHook, (, n, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, scope]
[=, traverseHook, (, n, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, scope, =, traverseObjectLiteral, (, n]
[;, break, ;, case, Token, ., OBJECTLIT, :, scope, =, traverseObjectLiteral, (, n, ,, scope, ), ;, break, ;, case]
[,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, scope, =, traverseObjectLiteral, (, n, ,, scope, ), ;]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, scope, =, traverseObjectLiteral, (, n, ,, scope, ), ;, break, ;]
[:, scope, =, traverseObjectLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., CALL, :, scope, =, traverseCall]
[., OBJECTLIT, :, scope, =, traverseObjectLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., CALL, :, scope]
[=, traverseObjectLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., CALL, :, scope, =, traverseCall, (, n]
[;, break, ;, case, Token, ., CALL, :, scope, =, traverseCall, (, n, ,, scope, ), ;, break, ;, case]
[,, scope, ), ;, break, ;, case, Token, ., CALL, :, scope, =, traverseCall, (, n, ,, scope, ), ;]
[), ;, break, ;, case, Token, ., CALL, :, scope, =, traverseCall, (, n, ,, scope, ), ;, break, ;]
[:, scope, =, traverseCall, (, n, ,, scope, ), ;, break, ;, case, Token, ., NEW, :, scope, =, traverseNew]
[., CALL, :, scope, =, traverseCall, (, n, ,, scope, ), ;, break, ;, case, Token, ., NEW, :, scope]
[=, traverseCall, (, n, ,, scope, ), ;, break, ;, case, Token, ., NEW, :, scope, =, traverseNew, (, n]
[;, break, ;, case, Token, ., NEW, :, scope, =, traverseNew, (, n, ,, scope, ), ;, break, ;, case]
[,, scope, ), ;, break, ;, case, Token, ., NEW, :, scope, =, traverseNew, (, n, ,, scope, ), ;]
[), ;, break, ;, case, Token, ., NEW, :, scope, =, traverseNew, (, n, ,, scope, ), ;, break, ;]
[:, scope, =, traverseNew, (, n, ,, scope, ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, .]
[., NEW, :, scope, =, traverseNew, (, n, ,, scope, ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case]
[=, traverseNew, (, n, ,, scope, ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :]
[;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, scope, =, traverseAdd, (, n, ,, scope]
[,, scope, ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, scope, =, traverseAdd, (]
[), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, scope, =, traverseAdd, (, n, ,]
[:, case, Token, ., ADD, :, scope, =, traverseAdd, (, n, ,, scope, ), ;, break, ;, case, Token, .]
[., ASSIGN_ADD, :, case, Token, ., ADD, :, scope, =, traverseAdd, (, n, ,, scope, ), ;, break, ;, case]
[:, scope, =, traverseAdd, (, n, ,, scope, ), ;, break, ;, case, Token, ., POS, :, case, Token, .]
[., ADD, :, scope, =, traverseAdd, (, n, ,, scope, ), ;, break, ;, case, Token, ., POS, :, case]
[=, traverseAdd, (, n, ,, scope, ), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :]
[;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, scope, =, traverse, (, n, ., getFirstChild]
[,, scope, ), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, scope, =, traverse, (]
[), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, scope, =, traverse, (, n, .]
[:, case, Token, ., NEG, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n]
[., POS, :, case, Token, ., NEG, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, )]
[:, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (, getNativeType, (]
[., NEG, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (]
[=, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, )]
[;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., ARRAYLIT, :, scope, =]
[,, scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., ARRAYLIT]
[., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;]
[), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., ARRAYLIT, :, scope]
[;, break, ;, case, Token, ., ARRAYLIT, :, scope, =, traverseArrayLiteral, (, n, ,, scope, ), ;, break, ;, case]
[., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., ARRAYLIT, :, scope, =, traverseArrayLiteral, (]
[), ;, break, ;, case, Token, ., ARRAYLIT, :, scope, =, traverseArrayLiteral, (, n, ,, scope, ), ;, break, ;]
[), ), ;, break, ;, case, Token, ., ARRAYLIT, :, scope, =, traverseArrayLiteral, (, n, ,, scope, ), ;, break]
[:, scope, =, traverseArrayLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., THIS, :, n, ., setJSType]
[., ARRAYLIT, :, scope, =, traverseArrayLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., THIS, :, n]
[=, traverseArrayLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., THIS, :, n, ., setJSType, (, scope]
[;, break, ;, case, Token, ., THIS, :, n, ., setJSType, (, scope, ., getTypeOfThis, (, ), ), ;, break]
[,, scope, ), ;, break, ;, case, Token, ., THIS, :, n, ., setJSType, (, scope, ., getTypeOfThis, (, )]
[), ;, break, ;, case, Token, ., THIS, :, n, ., setJSType, (, scope, ., getTypeOfThis, (, ), ), ;]
[:, n, ., setJSType, (, scope, ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, case]
[., THIS, :, n, ., setJSType, (, scope, ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., ASSIGN_LSH]
[;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token]
[., setJSType, (, scope, ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, .]
[), ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case]
[., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token]
[:, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH]
[., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token]
[:, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH]
[., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token]
[:, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, case, Token, ., ASSIGN_DIV]
[., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, case, Token]
[:, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD]
[., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token]
[:, case, Token, ., URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND]
[., ASSIGN_URSH, :, case, Token, ., URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token]
[:, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR]
[., URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND, :, case, Token]
[:, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token]
[:, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL]
[., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token]
[:, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB]
[., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL, :, case, Token]
[:, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV]
[., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD]
[., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token]
[:, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITAND]
[., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token]
[:, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITAND, :, case, Token, ., BITXOR]
[., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITAND, :, case, Token]
[:, case, Token, ., MOD, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR]
[., DIV, :, case, Token, ., MOD, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token]
[:, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, case, Token, ., MUL]
[., MOD, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, case, Token]
[:, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, case, Token, ., MUL, :, case, Token, ., SUB]
[., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, case, Token, ., MUL, :, case, Token]
[:, case, Token, ., BITOR, :, case, Token, ., MUL, :, case, Token, ., SUB, :, case, Token, ., DEC]
[., BITXOR, :, case, Token, ., BITOR, :, case, Token, ., MUL, :, case, Token, ., SUB, :, case, Token]
[:, case, Token, ., MUL, :, case, Token, ., SUB, :, case, Token, ., DEC, :, case, Token, ., INC]
[., BITOR, :, case, Token, ., MUL, :, case, Token, ., SUB, :, case, Token, ., DEC, :, case, Token]
[:, case, Token, ., SUB, :, case, Token, ., DEC, :, case, Token, ., INC, :, case, Token, ., BITNOT]
[., MUL, :, case, Token, ., SUB, :, case, Token, ., DEC, :, case, Token, ., INC, :, case, Token]
[:, case, Token, ., DEC, :, case, Token, ., INC, :, case, Token, ., BITNOT, :, scope, =, traverseChildren, (]
[., SUB, :, case, Token, ., DEC, :, case, Token, ., INC, :, case, Token, ., BITNOT, :, scope, =]
[:, case, Token, ., INC, :, case, Token, ., BITNOT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[., DEC, :, case, Token, ., INC, :, case, Token, ., BITNOT, :, scope, =, traverseChildren, (, n, ,, scope]
[:, case, Token, ., BITNOT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType]
[., INC, :, case, Token, ., BITNOT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType]
[:, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;]
[., BITNOT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, )]
[=, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;]
[;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., PARAM_LIST, :, scope, =]
[,, scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., PARAM_LIST]
[), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., PARAM_LIST, :, scope]
[;, break, ;, case, Token, ., PARAM_LIST, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, )]
[., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., PARAM_LIST, :, scope, =, traverse, (]
[), ;, break, ;, case, Token, ., PARAM_LIST, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope]
[), ), ;, break, ;, case, Token, ., PARAM_LIST, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,]
[:, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (, getJSType, (]
[., PARAM_LIST, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (]
[=, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (, getJSType, (, n, .]
[;, n, ., setJSType, (, getJSType, (, n, ., getFirstChild, (, ), ), ), ;, break, ;, case, Token, .]
[,, scope, ), ;, n, ., setJSType, (, getJSType, (, n, ., getFirstChild, (, ), ), ), ;, break, ;]
[., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (, getJSType, (, n, ., getFirstChild, (, ), )]
[), ;, n, ., setJSType, (, getJSType, (, n, ., getFirstChild, (, ), ), ), ;, break, ;, case, Token]
[;, break, ;, case, Token, ., COMMA, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType]
[., setJSType, (, getJSType, (, n, ., getFirstChild, (, ), ), ), ;, break, ;, case, Token, ., COMMA, :]
[), ;, break, ;, case, Token, ., COMMA, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, .]
[), ), ;, break, ;, case, Token, ., COMMA, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n]
[., getFirstChild, (, ), ), ), ;, break, ;, case, Token, ., COMMA, :, scope, =, traverseChildren, (, n, ,]
[:, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getJSType, (, n, ., getLastChild, (]
[., COMMA, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getJSType, (, n, .]
[=, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getJSType, (, n, ., getLastChild, (, ), )]
[;, n, ., setJSType, (, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, .]
[,, scope, ), ;, n, ., setJSType, (, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;]
[), ;, n, ., setJSType, (, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case, Token]
[;, break, ;, case, Token, ., TYPEOF, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType]
[., setJSType, (, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TYPEOF, :]
[), ;, break, ;, case, Token, ., TYPEOF, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, .]
[), ), ;, break, ;, case, Token, ., TYPEOF, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n]
[., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TYPEOF, :, scope, =, traverseChildren, (, n, ,]
[:, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;]
[., TYPEOF, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, STRING_TYPE, )]
[=, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;]
[;, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., DELPROP, :, case, Token]
[,, scope, ), ;, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., DELPROP]
[), ;, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., DELPROP, :, case]
[;, break, ;, case, Token, ., DELPROP, :, case, Token, ., LT, :, case, Token, ., LE, :, case, Token]
[., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., DELPROP, :, case, Token, ., LT]
[), ;, break, ;, case, Token, ., DELPROP, :, case, Token, ., LT, :, case, Token, ., LE, :, case]
[), ), ;, break, ;, case, Token, ., DELPROP, :, case, Token, ., LT, :, case, Token, ., LE, :]
[:, case, Token, ., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE]
[., DELPROP, :, case, Token, ., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case, Token]
[:, case, Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, case, Token, ., NOT]
[., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, case, Token]
[:, case, Token, ., GT, :, case, Token, ., GE, :, case, Token, ., NOT, :, case, Token, ., EQ]
[., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, case, Token, ., NOT, :, case, Token]
[:, case, Token, ., GE, :, case, Token, ., NOT, :, case, Token, ., EQ, :, case, Token, ., NE]
[., GT, :, case, Token, ., GE, :, case, Token, ., NOT, :, case, Token, ., EQ, :, case, Token]
[:, case, Token, ., NOT, :, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ]
[., GE, :, case, Token, ., NOT, :, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token]
[:, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE]
[., NOT, :, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token]
[:, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., INSTANCEOF]
[., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token]
[:, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN]
[., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., INSTANCEOF, :, case, Token]
[:, case, Token, ., SHNE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, scope, =, traverseChildren, (]
[., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, scope, =]
[:, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[., SHNE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, scope, =, traverseChildren, (, n, ,, scope]
[:, case, Token, ., IN, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType]
[., INSTANCEOF, :, case, Token, ., IN, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType]
[:, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;]
[., IN, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, )]
[=, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;]
[;, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., GETELEM, :, scope, =]
[,, scope, ), ;, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., GETELEM]
[), ;, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., GETELEM, :, scope]
[;, break, ;, case, Token, ., GETELEM, :, scope, =, traverseGetElem, (, n, ,, scope, ), ;, break, ;, case]
[., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., GETELEM, :, scope, =, traverseGetElem, (]
[), ;, break, ;, case, Token, ., GETELEM, :, scope, =, traverseGetElem, (, n, ,, scope, ), ;, break, ;]
[), ), ;, break, ;, case, Token, ., GETELEM, :, scope, =, traverseGetElem, (, n, ,, scope, ), ;, break]
[:, scope, =, traverseGetElem, (, n, ,, scope, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, scope, =, traverseChildren]
[., GETELEM, :, scope, =, traverseGetElem, (, n, ,, scope, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, scope]
[=, traverseGetElem, (, n, ,, scope, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, scope, =, traverseChildren, (, n]
[;, break, ;, case, Token, ., EXPR_RESULT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, if, (, n]
[,, scope, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[), ;, break, ;, case, Token, ., EXPR_RESULT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, if, (]
[:, scope, =, traverseChildren, (, n, ,, scope, ), ;, if, (, n, ., getFirstChild, (, ), ., isGetProp, (]
[., EXPR_RESULT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, if, (, n, ., getFirstChild, (, ), .]
[=, traverseChildren, (, n, ,, scope, ), ;, if, (, n, ., getFirstChild, (, ), ., isGetProp, (, ), )]
[;, if, (, n, ., getFirstChild, (, ), ., isGetProp, (, ), ), {, ensurePropertyDeclared, (, n, ., getFirstChild, (]
[,, scope, ), ;, if, (, n, ., getFirstChild, (, ), ., isGetProp, (, ), ), {, ensurePropertyDeclared, (, n]
[), ;, if, (, n, ., getFirstChild, (, ), ., isGetProp, (, ), ), {, ensurePropertyDeclared, (, n, ., getFirstChild]
[), {, ensurePropertyDeclared, (, n, ., getFirstChild, (, ), ), ;, }, break, ;, case, Token, ., SWITCH, :, scope]
[., isGetProp, (, ), ), {, ensurePropertyDeclared, (, n, ., getFirstChild, (, ), ), ;, }, break, ;, case, Token]
[., getFirstChild, (, ), ., isGetProp, (, ), ), {, ensurePropertyDeclared, (, n, ., getFirstChild, (, ), ), ;, }]
[;, }, break, ;, case, Token, ., SWITCH, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope]
[), ;, }, break, ;, case, Token, ., SWITCH, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,]
[., getFirstChild, (, ), ), ;, }, break, ;, case, Token, ., SWITCH, :, scope, =, traverse, (, n, .]
[:, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, break, ;, case, Token, ., RETURN]
[., SWITCH, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, break, ;, case, Token]
[=, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, break, ;, case, Token, ., RETURN, :, scope]
[;, break, ;, case, Token, ., RETURN, :, scope, =, traverseReturn, (, n, ,, scope, ), ;, break, ;, case]
[,, scope, ), ;, break, ;, case, Token, ., RETURN, :, scope, =, traverseReturn, (, n, ,, scope, ), ;]
[., getFirstChild, (, ), ,, scope, ), ;, break, ;, case, Token, ., RETURN, :, scope, =, traverseReturn, (, n]
[), ;, break, ;, case, Token, ., RETURN, :, scope, =, traverseReturn, (, n, ,, scope, ), ;, break, ;]
[:, scope, =, traverseReturn, (, n, ,, scope, ), ;, break, ;, case, Token, ., VAR, :, case, Token, .]
[., RETURN, :, scope, =, traverseReturn, (, n, ,, scope, ), ;, break, ;, case, Token, ., VAR, :, case]
[=, traverseReturn, (, n, ,, scope, ), ;, break, ;, case, Token, ., VAR, :, case, Token, ., THROW, :]
[;, break, ;, case, Token, ., VAR, :, case, Token, ., THROW, :, scope, =, traverseChildren, (, n, ,, scope]
[,, scope, ), ;, break, ;, case, Token, ., VAR, :, case, Token, ., THROW, :, scope, =, traverseChildren, (]
[), ;, break, ;, case, Token, ., VAR, :, case, Token, ., THROW, :, scope, =, traverseChildren, (, n, ,]
[:, case, Token, ., THROW, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, case, Token, .]
[., VAR, :, case, Token, ., THROW, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, case]
[:, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, case, Token, ., CATCH, :, scope, =, traverseCatch]
[., THROW, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, case, Token, ., CATCH, :, scope]
[=, traverseChildren, (, n, ,, scope, ), ;, break, ;, case, Token, ., CATCH, :, scope, =, traverseCatch, (, n]
[;, break, ;, case, Token, ., CATCH, :, scope, =, traverseCatch, (, n, ,, scope, ), ;, break, ;, case]
[,, scope, ), ;, break, ;, case, Token, ., CATCH, :, scope, =, traverseCatch, (, n, ,, scope, ), ;]
[), ;, break, ;, case, Token, ., CATCH, :, scope, =, traverseCatch, (, n, ,, scope, ), ;, break, ;]
[:, scope, =, traverseCatch, (, n, ,, scope, ), ;, break, ;, case, Token, ., CAST, :, scope, =, traverseChildren]
[., CATCH, :, scope, =, traverseCatch, (, n, ,, scope, ), ;, break, ;, case, Token, ., CAST, :, scope]
[=, traverseCatch, (, n, ,, scope, ), ;, break, ;, case, Token, ., CAST, :, scope, =, traverseChildren, (, n]
[;, break, ;, case, Token, ., CAST, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, }]
[,, scope, ), ;, break, ;, case, Token, ., CAST, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[), ;, break, ;, case, Token, ., CAST, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;]
[:, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, }, if, (, !, n, ., isFunction, (]
[., CAST, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, }, if, (, !, n, .]
[=, traverseChildren, (, n, ,, scope, ), ;, break, ;, }, if, (, !, n, ., isFunction, (, ), )]
[;, break, ;, }, if, (, !, n, ., isFunction, (, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo]
[,, scope, ), ;, break, ;, }, if, (, !, n, ., isFunction, (, ), ), {, JSDocInfo, info, =]
[), ;, break, ;, }, if, (, !, n, ., isFunction, (, ), ), {, JSDocInfo, info, =, n, .]
[), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasType]
[), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasType]
[., isFunction, (, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null]
[;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, JSType, castType, =, info, ., getType]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, JSType, castType]
[), {, JSType, castType, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, if, (]
[&&, info, ., hasType, (, ), ), {, JSType, castType, =, info, ., getType, (, ), ., evaluate, (, syntacticScope]
[!=, null, &&, info, ., hasType, (, ), ), {, JSType, castType, =, info, ., getType, (, ), ., evaluate]
[&&, info, ., hasType, (, ), ), {, JSType, castType, =, info, ., getType, (, ), ., evaluate, (, syntacticScope]
[), {, JSType, castType, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, if, (]
[., hasType, (, ), ), {, JSType, castType, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry]
[;, if, (, n, ., isQualifiedName, (, ), &&, n, ., getParent, (, ), ., isExprResult, (, ), ), {]
[., evaluate, (, syntacticScope, ,, registry, ), ;, if, (, n, ., isQualifiedName, (, ), &&, n, ., getParent, (]
[., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, if, (, n, ., isQualifiedName, (, ), &&]
[,, registry, ), ;, if, (, n, ., isQualifiedName, (, ), &&, n, ., getParent, (, ), ., isExprResult, (]
[), ;, if, (, n, ., isQualifiedName, (, ), &&, n, ., getParent, (, ), ., isExprResult, (, ), )]
[), {, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, castType, ), ;, }, n, .]
[&&, n, ., getParent, (, ), ., isExprResult, (, ), ), {, updateScopeForTypeChange, (, scope, ,, n, ,, n, .]
[., isQualifiedName, (, ), &&, n, ., getParent, (, ), ., isExprResult, (, ), ), {, updateScopeForTypeChange, (, scope, ,]
[), {, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, castType, ), ;, }, n, .]
[., isExprResult, (, ), ), {, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, castType, )]
[., getParent, (, ), ., isExprResult, (, ), ), {, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (]
[;, }, n, ., setJSType, (, castType, ), ;, }, }, return, scope, ;, }, private, FlowScope, traverseReturn, (, Node]
[,, n, ,, n, ., getJSType, (, ), ,, castType, ), ;, }, n, ., setJSType, (, castType, ), ;]
[,, n, ., getJSType, (, ), ,, castType, ), ;, }, n, ., setJSType, (, castType, ), ;, }, }]
[,, castType, ), ;, }, n, ., setJSType, (, castType, ), ;, }, }, return, scope, ;, }, private, FlowScope]
[., getJSType, (, ), ,, castType, ), ;, }, n, ., setJSType, (, castType, ), ;, }, }, return, scope]
[), ;, }, n, ., setJSType, (, castType, ), ;, }, }, return, scope, ;, }, private, FlowScope, traverseReturn, (]
[;, }, }, return, scope, ;, }, private, FlowScope, traverseReturn, (, Node, n, ,, FlowScope, scope, ), {, scope, =]
[., setJSType, (, castType, ), ;, }, }, return, scope, ;, }, private, FlowScope, traverseReturn, (, Node, n, ,, FlowScope]
[), ;, }, }, return, scope, ;, }, private, FlowScope, traverseReturn, (, Node, n, ,, FlowScope, scope, ), {, scope]
[;, }, private, FlowScope, traverseReturn, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope]
[=, traverseChildren, (, n, ,, scope, ), ;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (, retValue]
[;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (, retValue, !=, null, ), {, JSType, type, =]
[,, scope, ), ;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (, retValue, !=, null, ), {]
[), ;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (, retValue, !=, null, ), {, JSType, type]
[;, if, (, retValue, !=, null, ), {, JSType, type, =, functionScope, ., getRootNode, (, ), ., getJSType, (, )]
[., getFirstChild, (, ), ;, if, (, retValue, !=, null, ), {, JSType, type, =, functionScope, ., getRootNode, (, )]
[), {, JSType, type, =, functionScope, ., getRootNode, (, ), ., getJSType, (, ), ;, if, (, type, !=, null]
[!=, null, ), {, JSType, type, =, functionScope, ., getRootNode, (, ), ., getJSType, (, ), ;, if, (, type]
[), {, JSType, type, =, functionScope, ., getRootNode, (, ), ., getJSType, (, ), ;, if, (, type, !=, null]
[;, if, (, type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType]
[., getJSType, (, ), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, )]
[., getRootNode, (, ), ., getJSType, (, ), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =, type]
[), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, inferPropertyTypesToMatchConstraint, (]
[!=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {]
[), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, inferPropertyTypesToMatchConstraint, (]
[;, if, (, fnType, !=, null, ), {, inferPropertyTypesToMatchConstraint, (, retValue, ., getJSType, (, ), ,, fnType, ., getReturnType, (]
[., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, inferPropertyTypesToMatchConstraint, (, retValue, ., getJSType, (, ), ,]
[), {, inferPropertyTypesToMatchConstraint, (, retValue, ., getJSType, (, ), ,, fnType, ., getReturnType, (, ), ), ;, }, }, }]
[!=, null, ), {, inferPropertyTypesToMatchConstraint, (, retValue, ., getJSType, (, ), ,, fnType, ., getReturnType, (, ), ), ;, }]
[), {, inferPropertyTypesToMatchConstraint, (, retValue, ., getJSType, (, ), ,, fnType, ., getReturnType, (, ), ), ;, }, }, }]
[;, }, }, }, return, scope, ;, }, private, FlowScope, traverseCatch, (, Node, catchNode, ,, FlowScope, scope, ), {, Node]
[,, fnType, ., getReturnType, (, ), ), ;, }, }, }, return, scope, ;, }, private, FlowScope, traverseCatch, (, Node]
[., getJSType, (, ), ,, fnType, ., getReturnType, (, ), ), ;, }, }, }, return, scope, ;, }, private]
[), ;, }, }, }, return, scope, ;, }, private, FlowScope, traverseCatch, (, Node, catchNode, ,, FlowScope, scope, ), {]
[., getReturnType, (, ), ), ;, }, }, }, return, scope, ;, }, private, FlowScope, traverseCatch, (, Node, catchNode, ,]
[;, }, private, FlowScope, traverseCatch, (, Node, catchNode, ,, FlowScope, scope, ), {, Node, name, =, catchNode, ., getFirstChild, (]
[;, String, varName, =, name, ., getString, (, ), ;, JSType, type, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (]
[., getFirstChild, (, ), ;, String, varName, =, name, ., getString, (, ), ;, JSType, type, ;, JSDocInfo, info, =]
[;, JSType, type, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info]
[., getString, (, ), ;, JSType, type, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info]
[;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, type, =, info, ., getType, (]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, type, =]
[), {, type, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, }, else, {]
[&&, info, ., hasType, (, ), ), {, type, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,]
[!=, null, &&, info, ., hasType, (, ), ), {, type, =, info, ., getType, (, ), ., evaluate, (]
[&&, info, ., hasType, (, ), ), {, type, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,]
[), {, type, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, }, else, {]
[., hasType, (, ), ), {, type, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, )]
[=, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, }, else, {, type, =, getNativeType]
[;, }, else, {, type, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, redeclareSimpleVar, (, scope, ,, name, ,]
[., evaluate, (, syntacticScope, ,, registry, ), ;, }, else, {, type, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;]
[., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, }, else, {, type, =, getNativeType, (, JSTypeNative]
[,, registry, ), ;, }, else, {, type, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, redeclareSimpleVar, (, scope]
[), ;, }, else, {, type, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, redeclareSimpleVar, (, scope, ,, name]
[=, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, redeclareSimpleVar, (, scope, ,, name, ,, type, ), ;, name, .]
[;, }, redeclareSimpleVar, (, scope, ,, name, ,, type, ), ;, name, ., setJSType, (, type, ), ;, return, scope]
[), ;, }, redeclareSimpleVar, (, scope, ,, name, ,, type, ), ;, name, ., setJSType, (, type, ), ;, return]
[., UNKNOWN_TYPE, ), ;, }, redeclareSimpleVar, (, scope, ,, name, ,, type, ), ;, name, ., setJSType, (, type, )]
[;, name, ., setJSType, (, type, ), ;, return, scope, ;, }, private, FlowScope, traverseAssign, (, Node, n, ,, FlowScope]
[,, name, ,, type, ), ;, name, ., setJSType, (, type, ), ;, return, scope, ;, }, private, FlowScope, traverseAssign]
[,, type, ), ;, name, ., setJSType, (, type, ), ;, return, scope, ;, }, private, FlowScope, traverseAssign, (, Node]
[), ;, name, ., setJSType, (, type, ), ;, return, scope, ;, }, private, FlowScope, traverseAssign, (, Node, n, ,]
[;, return, scope, ;, }, private, FlowScope, traverseAssign, (, Node, n, ,, FlowScope, scope, ), {, Node, left, =, n]
[., setJSType, (, type, ), ;, return, scope, ;, }, private, FlowScope, traverseAssign, (, Node, n, ,, FlowScope, scope, )]
[), ;, return, scope, ;, }, private, FlowScope, traverseAssign, (, Node, n, ,, FlowScope, scope, ), {, Node, left, =]
[;, }, private, FlowScope, traverseAssign, (, Node, n, ,, FlowScope, scope, ), {, Node, left, =, n, ., getFirstChild, (]
[;, Node, right, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, JSType]
[., getFirstChild, (, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,]
[;, scope, =, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType]
[., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =, left, ., getJSType]
[=, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =]
[;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, n, .]
[,, scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =, getJSType, (, right, )]
[), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, n]
[;, JSType, rightType, =, getJSType, (, right, ), ;, n, ., setJSType, (, rightType, ), ;, updateScopeForTypeChange, (, scope, ,]
[., getJSType, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, n, ., setJSType, (, rightType, ), ;]
[;, n, ., setJSType, (, rightType, ), ;, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, rightType, ), ;, return]
[), ;, n, ., setJSType, (, rightType, ), ;, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, rightType, ), ;]
[;, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, rightType, ), ;, return, scope, ;, }, private, void, updateScopeForTypeChange, (]
[., setJSType, (, rightType, ), ;, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, rightType, ), ;, return, scope, ;]
[), ;, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, rightType, ), ;, return, scope, ;, }, private, void, updateScopeForTypeChange]
[;, return, scope, ;, }, private, void, updateScopeForTypeChange, (, FlowScope, scope, ,, Node, left, ,, JSType, leftType, ,, JSType, resultType]
[,, left, ,, leftType, ,, rightType, ), ;, return, scope, ;, }, private, void, updateScopeForTypeChange, (, FlowScope, scope, ,, Node]
[,, leftType, ,, rightType, ), ;, return, scope, ;, }, private, void, updateScopeForTypeChange, (, FlowScope, scope, ,, Node, left, ,]
[,, rightType, ), ;, return, scope, ;, }, private, void, updateScopeForTypeChange, (, FlowScope, scope, ,, Node, left, ,, JSType, leftType]
[), ;, return, scope, ;, }, private, void, updateScopeForTypeChange, (, FlowScope, scope, ,, Node, left, ,, JSType, leftType, ,, JSType]
[;, }, private, void, updateScopeForTypeChange, (, FlowScope, scope, ,, Node, left, ,, JSType, leftType, ,, JSType, resultType, ), {, Preconditions]
[;, switch, (, left, ., getType, (, ), ), {, case, Token, ., NAME, :, String, varName, =, left, .]
[., checkNotNull, (, resultType, ), ;, switch, (, left, ., getType, (, ), ), {, case, Token, ., NAME, :]
[), ;, switch, (, left, ., getType, (, ), ), {, case, Token, ., NAME, :, String, varName, =, left]
[), {, case, Token, ., NAME, :, String, varName, =, left, ., getString, (, ), ;, Var, var, =, syntacticScope]
[., getType, (, ), ), {, case, Token, ., NAME, :, String, varName, =, left, ., getString, (, ), ;]
[:, String, varName, =, left, ., getString, (, ), ;, Var, var, =, syntacticScope, ., getVar, (, varName, ), ;]
[., NAME, :, String, varName, =, left, ., getString, (, ), ;, Var, var, =, syntacticScope, ., getVar, (, varName]
[;, Var, var, =, syntacticScope, ., getVar, (, varName, ), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;]
[., getString, (, ), ;, Var, var, =, syntacticScope, ., getVar, (, varName, ), ;, boolean, isVarDeclaration, =, left, .]
[;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (, !, isVarDeclaration, ||, var, ==, null, ||, var]
[., getVar, (, varName, ), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (, !, isVarDeclaration, ||]
[), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (, !, isVarDeclaration, ||, var, ==, null, ||]
[;, if, (, !, isVarDeclaration, ||, var, ==, null, ||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope]
[., hasChildren, (, ), ;, if, (, !, isVarDeclaration, ||, var, ==, null, ||, var, ., isTypeInferred, (, ), )]
[), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==]
[||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, .]
[||, var, ==, null, ||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, )]
[||, var, ==, null, ||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, )]
[||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, .]
[==, null, ||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }]
[||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, .]
[), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==]
[., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, ., setJSType, (]
[;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null, ), ;, if, (, var]
[,, left, ,, resultType, ), ;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null]
[,, resultType, ), ;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null, ), ;]
[), ;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null, ), ;, if, (]
[;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType, oldType, =, var, ., getType]
[., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null, ), ;, if, (, var, !=, null, &&]
[), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType, oldType, =, var, .]
[?, resultType, :, null, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType]
[||, leftType, ==, null, ?, resultType, :, null, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (]
[?, resultType, :, null, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType]
[==, null, ?, resultType, :, null, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), )]
[?, resultType, :, null, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType]
[:, null, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType, oldType, =]
[), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType, oldType, =, var, .]
[), {, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType, (, oldType, ==, null, ?, resultType]
[&&, var, ., isTypeInferred, (, ), ), {, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType]
[!=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType, oldType, =, var, ., getType, (, ), ;, var]
[&&, var, ., isTypeInferred, (, ), ), {, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType]
[), {, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType, (, oldType, ==, null, ?, resultType]
[., isTypeInferred, (, ), ), {, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType, (, oldType]
[;, var, ., setType, (, oldType, ==, null, ?, resultType, :, oldType, ., getLeastSupertype, (, resultType, ), ), ;, }]
[., getType, (, ), ;, var, ., setType, (, oldType, ==, null, ?, resultType, :, oldType, ., getLeastSupertype, (, resultType]
[;, }, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, left, ., getQualifiedName, (, ), ;, if, (]
[., setType, (, oldType, ==, null, ?, resultType, :, oldType, ., getLeastSupertype, (, resultType, ), ), ;, }, break, ;]
[), ;, }, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, left, ., getQualifiedName, (, ), ;, if]
[?, resultType, :, oldType, ., getLeastSupertype, (, resultType, ), ), ;, }, break, ;, case, Token, ., GETPROP, :, String]
[==, null, ?, resultType, :, oldType, ., getLeastSupertype, (, resultType, ), ), ;, }, break, ;, case, Token, ., GETPROP]
[?, resultType, :, oldType, ., getLeastSupertype, (, resultType, ), ), ;, }, break, ;, case, Token, ., GETPROP, :, String]
[:, oldType, ., getLeastSupertype, (, resultType, ), ), ;, }, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =]
[), ;, }, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, left, ., getQualifiedName, (, ), ;, if]
[., getLeastSupertype, (, resultType, ), ), ;, }, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, left, .]
[), ), ;, }, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, left, ., getQualifiedName, (, ), ;]
[:, String, qualifiedName, =, left, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, scope, ., inferQualifiedSlot]
[., GETPROP, :, String, qualifiedName, =, left, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, scope]
[;, if, (, qualifiedName, !=, null, ), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==, null, ?]
[., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,]
[), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==, null, ?, unknownType, :, leftType, ,, resultType, )]
[!=, null, ), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==, null, ?, unknownType, :, leftType, ,]
[), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==, null, ?, unknownType, :, leftType, ,, resultType, )]
[;, }, left, ., setJSType, (, resultType, ), ;, ensurePropertyDefined, (, left, ,, resultType, ), ;, break, ;, }, }]
[., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==, null, ?, unknownType, :, leftType, ,, resultType, ), ;, }, left]
[,, qualifiedName, ,, leftType, ==, null, ?, unknownType, :, leftType, ,, resultType, ), ;, }, left, ., setJSType, (, resultType]
[,, leftType, ==, null, ?, unknownType, :, leftType, ,, resultType, ), ;, }, left, ., setJSType, (, resultType, ), ;]
[,, resultType, ), ;, }, left, ., setJSType, (, resultType, ), ;, ensurePropertyDefined, (, left, ,, resultType, ), ;, break]
[?, unknownType, :, leftType, ,, resultType, ), ;, }, left, ., setJSType, (, resultType, ), ;, ensurePropertyDefined, (, left, ,]
[==, null, ?, unknownType, :, leftType, ,, resultType, ), ;, }, left, ., setJSType, (, resultType, ), ;, ensurePropertyDefined, (]
[?, unknownType, :, leftType, ,, resultType, ), ;, }, left, ., setJSType, (, resultType, ), ;, ensurePropertyDefined, (, left, ,]
[:, leftType, ,, resultType, ), ;, }, left, ., setJSType, (, resultType, ), ;, ensurePropertyDefined, (, left, ,, resultType, )]
[,, resultType, ), ;, }, left, ., setJSType, (, resultType, ), ;, ensurePropertyDefined, (, left, ,, resultType, ), ;, break]
[), ;, }, left, ., setJSType, (, resultType, ), ;, ensurePropertyDefined, (, left, ,, resultType, ), ;, break, ;, }]
[;, ensurePropertyDefined, (, left, ,, resultType, ), ;, break, ;, }, }, private, void, ensurePropertyDefined, (, Node, getprop, ,, JSType]
[., setJSType, (, resultType, ), ;, ensurePropertyDefined, (, left, ,, resultType, ), ;, break, ;, }, }, private, void, ensurePropertyDefined]
[), ;, ensurePropertyDefined, (, left, ,, resultType, ), ;, break, ;, }, }, private, void, ensurePropertyDefined, (, Node, getprop, ,]
[;, break, ;, }, }, private, void, ensurePropertyDefined, (, Node, getprop, ,, JSType, rightType, ), {, String, propName, =, getprop]
[,, resultType, ), ;, break, ;, }, }, private, void, ensurePropertyDefined, (, Node, getprop, ,, JSType, rightType, ), {, String]
[), ;, break, ;, }, }, private, void, ensurePropertyDefined, (, Node, getprop, ,, JSType, rightType, ), {, String, propName, =]
[;, Node, obj, =, getprop, ., getFirstChild, (, ), ;, JSType, nodeType, =, getJSType, (, obj, ), ;, ObjectType, objectType]
[., getString, (, ), ;, Node, obj, =, getprop, ., getFirstChild, (, ), ;, JSType, nodeType, =, getJSType, (, obj]
[., getLastChild, (, ), ., getString, (, ), ;, Node, obj, =, getprop, ., getFirstChild, (, ), ;, JSType, nodeType]
[;, JSType, nodeType, =, getJSType, (, obj, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (, nodeType, ., restrictByNotNullOrUndefined, (]
[., getFirstChild, (, ), ;, JSType, nodeType, =, getJSType, (, obj, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (]
[;, ObjectType, objectType, =, ObjectType, ., cast, (, nodeType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objectType, ==, null]
[), ;, ObjectType, objectType, =, ObjectType, ., cast, (, nodeType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objectType, ==]
[;, if, (, objectType, ==, null, ), {, registry, ., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else, {]
[., cast, (, nodeType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objectType, ==, null, ), {, registry, ., registerPropertyOnType]
[), ;, if, (, objectType, ==, null, ), {, registry, ., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else]
[., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objectType, ==, null, ), {, registry, ., registerPropertyOnType, (, propName, ,, nodeType]
[), {, registry, ., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else, {, if, (, nodeType, ., isStruct, (]
[==, null, ), {, registry, ., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else, {, if, (, nodeType, .]
[), {, registry, ., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else, {, if, (, nodeType, ., isStruct, (]
[;, }, else, {, if, (, nodeType, ., isStruct, (, ), &&, !, objectType, ., hasProperty, (, propName, ), )]
[., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else, {, if, (, nodeType, ., isStruct, (, ), &&, !]
[,, nodeType, ), ;, }, else, {, if, (, nodeType, ., isStruct, (, ), &&, !, objectType, ., hasProperty, (]
[), ;, }, else, {, if, (, nodeType, ., isStruct, (, ), &&, !, objectType, ., hasProperty, (, propName, )]
[), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), )]
[&&, !, objectType, ., hasProperty, (, propName, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&]
[., isStruct, (, ), &&, !, objectType, ., hasProperty, (, propName, ), ), {, if, (, !, (, obj, .]
[), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), )]
[), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), )]
[., hasProperty, (, propName, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (, syntacticScope]
[), ), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, )]
[), {, return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (, getprop, ,, objectType, ), ), {, return, ;, }, if]
[), {, return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (, getprop, ,, objectType, ), ), {, return, ;, }, if]
[), ), {, return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (, getprop, ,, objectType, ), ), {, return, ;, }]
[&&, getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {, return, ;, }, }]
[., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {]
[), ), {, return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (, getprop, ,, objectType, ), ), {, return, ;, }]
[., isConstructor, (, ), ), ), {, return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (, getprop, ,, objectType, ), )]
[), ., isConstructor, (, ), ), ), {, return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (, getprop, ,, objectType, )]
[., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {, return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (]
[), {, return, ;, }, if, (, !, objectType, ., isPropertyTypeDeclared, (, propName, ), ), {, if, (, objectType, .]
[,, objectType, ), ), {, return, ;, }, if, (, !, objectType, ., isPropertyTypeDeclared, (, propName, ), ), {, if]
[), ), {, return, ;, }, if, (, !, objectType, ., isPropertyTypeDeclared, (, propName, ), ), {, if, (, objectType]
[), {, if, (, objectType, ., hasProperty, (, propName, ), ||, !, objectType, ., isInstanceType, (, ), ), {, if]
[), {, if, (, objectType, ., hasProperty, (, propName, ), ||, !, objectType, ., isInstanceType, (, ), ), {, if]
[., isPropertyTypeDeclared, (, propName, ), ), {, if, (, objectType, ., hasProperty, (, propName, ), ||, !, objectType, ., isInstanceType]
[), ), {, if, (, objectType, ., hasProperty, (, propName, ), ||, !, objectType, ., isInstanceType, (, ), ), {]
[), {, if, (, "prototype", ., equals, (, propName, ), ), {, objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,]
[||, !, objectType, ., isInstanceType, (, ), ), {, if, (, "prototype", ., equals, (, propName, ), ), {, objectType]
[., hasProperty, (, propName, ), ||, !, objectType, ., isInstanceType, (, ), ), {, if, (, "prototype", ., equals, (]
[), ||, !, objectType, ., isInstanceType, (, ), ), {, if, (, "prototype", ., equals, (, propName, ), ), {]
[), {, if, (, "prototype", ., equals, (, propName, ), ), {, objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,]
[), {, if, (, "prototype", ., equals, (, propName, ), ), {, objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,]
[., isInstanceType, (, ), ), {, if, (, "prototype", ., equals, (, propName, ), ), {, objectType, ., defineDeclaredProperty, (]
[), {, objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {, objectType, ., defineInferredProperty, (]
[., equals, (, propName, ), ), {, objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else]
[), ), {, objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {, objectType, ., defineInferredProperty]
[;, }, else, {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, }, else, if, (]
[., defineDeclaredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {, objectType, ., defineInferredProperty, (, propName, ,, rightType]
[,, rightType, ,, getprop, ), ;, }, else, {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;]
[,, getprop, ), ;, }, else, {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, }]
[), ;, }, else, {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, }, else, if]
[;, }, }, else, if, (, obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), )]
[., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, }, else, if, (, obj, ., isThis, (, )]
[,, rightType, ,, getprop, ), ;, }, }, else, if, (, obj, ., isThis, (, ), &&, getJSType, (, syntacticScope]
[,, getprop, ), ;, }, }, else, if, (, obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode]
[), ;, }, }, else, if, (, obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, )]
[), {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {, registry, ., registerPropertyOnType, (]
[&&, getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), ), {, objectType, ., defineInferredProperty, (, propName]
[., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), ), {, objectType]
[), {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {, registry, ., registerPropertyOnType, (]
[., isConstructor, (, ), ), {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {]
[), ., isConstructor, (, ), ), {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else]
[., getRootNode, (, ), ), ., isConstructor, (, ), ), {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop]
[;, }, else, {, registry, ., registerPropertyOnType, (, propName, ,, objectType, ), ;, }, }, }, }, private, void, ensurePropertyDeclared]
[., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {, registry, ., registerPropertyOnType, (, propName, ,, objectType]
[,, rightType, ,, getprop, ), ;, }, else, {, registry, ., registerPropertyOnType, (, propName, ,, objectType, ), ;, }, }]
[,, getprop, ), ;, }, else, {, registry, ., registerPropertyOnType, (, propName, ,, objectType, ), ;, }, }, }, }]
[), ;, }, else, {, registry, ., registerPropertyOnType, (, propName, ,, objectType, ), ;, }, }, }, }, private, void]
[;, }, }, }, }, private, void, ensurePropertyDeclared, (, Node, getprop, ), {, ObjectType, ownerType, =, ObjectType, ., cast, (]
[., registerPropertyOnType, (, propName, ,, objectType, ), ;, }, }, }, }, private, void, ensurePropertyDeclared, (, Node, getprop, ), {]
[,, objectType, ), ;, }, }, }, }, private, void, ensurePropertyDeclared, (, Node, getprop, ), {, ObjectType, ownerType, =, ObjectType]
[), ;, }, }, }, }, private, void, ensurePropertyDeclared, (, Node, getprop, ), {, ObjectType, ownerType, =, ObjectType, ., cast]
[;, if, (, ownerType, !=, null, ), {, ensurePropertyDeclaredHelper, (, getprop, ,, ownerType, ), ;, }, }, private, boolean, ensurePropertyDeclaredHelper]
[., cast, (, getJSType, (, getprop, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, ownerType]
[), ;, if, (, ownerType, !=, null, ), {, ensurePropertyDeclaredHelper, (, getprop, ,, ownerType, ), ;, }, }, private, boolean]
[., restrictByNotNullOrUndefined, (, ), ), ;, if, (, ownerType, !=, null, ), {, ensurePropertyDeclaredHelper, (, getprop, ,, ownerType, ), ;]
[), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, ownerType, !=, null, ), {, ensurePropertyDeclaredHelper, (, getprop, ,, ownerType, )]
[., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, ownerType, !=, null, ), {, ensurePropertyDeclaredHelper, (]
[), {, ensurePropertyDeclaredHelper, (, getprop, ,, ownerType, ), ;, }, }, private, boolean, ensurePropertyDeclaredHelper, (, Node, getprop, ,, ObjectType, objectType]
[!=, null, ), {, ensurePropertyDeclaredHelper, (, getprop, ,, ownerType, ), ;, }, }, private, boolean, ensurePropertyDeclaredHelper, (, Node, getprop, ,]
[), {, ensurePropertyDeclaredHelper, (, getprop, ,, ownerType, ), ;, }, }, private, boolean, ensurePropertyDeclaredHelper, (, Node, getprop, ,, ObjectType, objectType]
[;, }, }, private, boolean, ensurePropertyDeclaredHelper, (, Node, getprop, ,, ObjectType, objectType, ), {, String, propName, =, getprop, ., getLastChild]
[,, ownerType, ), ;, }, }, private, boolean, ensurePropertyDeclaredHelper, (, Node, getprop, ,, ObjectType, objectType, ), {, String, propName, =]
[), ;, }, }, private, boolean, ensurePropertyDeclaredHelper, (, Node, getprop, ,, ObjectType, objectType, ), {, String, propName, =, getprop, .]
[;, String, qName, =, getprop, ., getQualifiedName, (, ), ;, if, (, qName, !=, null, ), {, Var, var, =]
[., getString, (, ), ;, String, qName, =, getprop, ., getQualifiedName, (, ), ;, if, (, qName, !=, null, )]
[., getLastChild, (, ), ., getString, (, ), ;, String, qName, =, getprop, ., getQualifiedName, (, ), ;, if, (]
[;, if, (, qName, !=, null, ), {, Var, var, =, syntacticScope, ., getVar, (, qName, ), ;, if, (]
[., getQualifiedName, (, ), ;, if, (, qName, !=, null, ), {, Var, var, =, syntacticScope, ., getVar, (, qName]
[), {, Var, var, =, syntacticScope, ., getVar, (, qName, ), ;, if, (, var, !=, null, &&, !, var]
[!=, null, ), {, Var, var, =, syntacticScope, ., getVar, (, qName, ), ;, if, (, var, !=, null, &&]
[), {, Var, var, =, syntacticScope, ., getVar, (, qName, ), ;, if, (, var, !=, null, &&, !, var]
[;, if, (, var, !=, null, &&, !, var, ., isTypeInferred, (, ), ), {, if, (, propName, ., equals]
[., getVar, (, qName, ), ;, if, (, var, !=, null, &&, !, var, ., isTypeInferred, (, ), ), {]
[), ;, if, (, var, !=, null, &&, !, var, ., isTypeInferred, (, ), ), {, if, (, propName, .]
[), {, if, (, propName, ., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&]
[&&, !, var, ., isTypeInferred, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ||, (, !]
[!=, null, &&, !, var, ., isTypeInferred, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ||]
[&&, !, var, ., isTypeInferred, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ||, (, !]
[), {, if, (, propName, ., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&]
[), {, if, (, propName, ., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&]
[., isTypeInferred, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty]
[), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, ), ;, }, }]
[||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (, var]
[., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType]
[), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (]
[), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, ), ;, }, }]
[), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, ), ;, }]
[&&, (, !, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType]
[&&, (, !, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType]
[., hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, )]
[), &&, (, !, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&, !, objectType, .]
[), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, ), ;, }]
[), ), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, ), ;]
[||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), ), ), ), ), {, return]
[||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), ), ), ), ), {, return]
[., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), ), )]
[), ), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, ), ;]
[), ), ), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, )]
[&&, !, objectType, ., isNativeObjectType, (, ), ), ), ), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var]
[., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), ), ), ), ), {, return, objectType, ., defineDeclaredProperty]
[), ), ), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, )]
[), ), ), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, )]
[., isNativeObjectType, (, ), ), ), ), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (]
[;, }, }, }, return, false, ;, }, private, FlowScope, traverseName, (, Node, n, ,, FlowScope, scope, ), {, String]
[., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, ), ;, }, }, }, return, false, ;]
[,, var, ., getType, (, ), ,, getprop, ), ;, }, }, }, return, false, ;, }, private, FlowScope, traverseName]
[,, getprop, ), ;, }, }, }, return, false, ;, }, private, FlowScope, traverseName, (, Node, n, ,, FlowScope, scope]
[., getType, (, ), ,, getprop, ), ;, }, }, }, return, false, ;, }, private, FlowScope, traverseName, (, Node]
[), ;, }, }, }, return, false, ;, }, private, FlowScope, traverseName, (, Node, n, ,, FlowScope, scope, ), {]
[;, }, private, FlowScope, traverseName, (, Node, n, ,, FlowScope, scope, ), {, String, varName, =, n, ., getString, (]
[;, Node, value, =, n, ., getFirstChild, (, ), ;, JSType, type, =, n, ., getJSType, (, ), ;, if]
[., getString, (, ), ;, Node, value, =, n, ., getFirstChild, (, ), ;, JSType, type, =, n, ., getJSType]
[;, JSType, type, =, n, ., getJSType, (, ), ;, if, (, value, !=, null, ), {, scope, =, traverse]
[., getFirstChild, (, ), ;, JSType, type, =, n, ., getJSType, (, ), ;, if, (, value, !=, null, )]
[;, if, (, value, !=, null, ), {, scope, =, traverse, (, value, ,, scope, ), ;, updateScopeForTypeChange, (, scope]
[., getJSType, (, ), ;, if, (, value, !=, null, ), {, scope, =, traverse, (, value, ,, scope, )]
[), {, scope, =, traverse, (, value, ,, scope, ), ;, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType]
[!=, null, ), {, scope, =, traverse, (, value, ,, scope, ), ;, updateScopeForTypeChange, (, scope, ,, n, ,, n]
[), {, scope, =, traverse, (, value, ,, scope, ), ;, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType]
[=, traverse, (, value, ,, scope, ), ;, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,]
[;, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, getJSType, (, value, ), ), ;, return]
[,, scope, ), ;, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, getJSType, (, value, )]
[), ;, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, getJSType, (, value, ), ), ;]
[;, return, scope, ;, }, else, {, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, varName, ), ;]
[,, n, ,, n, ., getJSType, (, ), ,, getJSType, (, value, ), ), ;, return, scope, ;, }, else]
[,, n, ., getJSType, (, ), ,, getJSType, (, value, ), ), ;, return, scope, ;, }, else, {, StaticSlot]
[,, getJSType, (, value, ), ), ;, return, scope, ;, }, else, {, StaticSlot, <, JSType, >, var, =, scope]
[., getJSType, (, ), ,, getJSType, (, value, ), ), ;, return, scope, ;, }, else, {, StaticSlot, <, JSType]
[), ;, return, scope, ;, }, else, {, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, varName, )]
[), ), ;, return, scope, ;, }, else, {, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, varName]
[;, }, else, {, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, varName, ), ;, if, (, var]
[;, if, (, var, !=, null, ), {, boolean, isInferred, =, var, ., isTypeInferred, (, ), ;, boolean, unflowable, =]
[., getSlot, (, varName, ), ;, if, (, var, !=, null, ), {, boolean, isInferred, =, var, ., isTypeInferred, (]
[), ;, if, (, var, !=, null, ), {, boolean, isInferred, =, var, ., isTypeInferred, (, ), ;, boolean, unflowable]
[), {, boolean, isInferred, =, var, ., isTypeInferred, (, ), ;, boolean, unflowable, =, isInferred, &&, isUnflowable, (, syntacticScope, .]
[!=, null, ), {, boolean, isInferred, =, var, ., isTypeInferred, (, ), ;, boolean, unflowable, =, isInferred, &&, isUnflowable, (]
[), {, boolean, isInferred, =, var, ., isTypeInferred, (, ), ;, boolean, unflowable, =, isInferred, &&, isUnflowable, (, syntacticScope, .]
[;, boolean, unflowable, =, isInferred, &&, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ;, boolean, nonLocalInferredSlot, =, false]
[., isTypeInferred, (, ), ;, boolean, unflowable, =, isInferred, &&, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ;]
[;, boolean, nonLocalInferredSlot, =, false, ;, if, (, isInferred, &&, syntacticScope, ., isLocal, (, ), ), {, Var, maybeOuterVar, =]
[&&, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ;, boolean, nonLocalInferredSlot, =, false, ;, if, (, isInferred, &&]
[;, boolean, nonLocalInferredSlot, =, false, ;, if, (, isInferred, &&, syntacticScope, ., isLocal, (, ), ), {, Var, maybeOuterVar, =]
[), ;, boolean, nonLocalInferredSlot, =, false, ;, if, (, isInferred, &&, syntacticScope, ., isLocal, (, ), ), {, Var, maybeOuterVar]
[., getVar, (, varName, ), ), ;, boolean, nonLocalInferredSlot, =, false, ;, if, (, isInferred, &&, syntacticScope, ., isLocal, (]
[), ), ;, boolean, nonLocalInferredSlot, =, false, ;, if, (, isInferred, &&, syntacticScope, ., isLocal, (, ), ), {, Var]
[;, if, (, isInferred, &&, syntacticScope, ., isLocal, (, ), ), {, Var, maybeOuterVar, =, syntacticScope, ., getParent, (, )]
[), {, Var, maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (, varName, ), ;, if, (, var, ==]
[&&, syntacticScope, ., isLocal, (, ), ), {, Var, maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (, varName]
[), {, Var, maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (, varName, ), ;, if, (, var, ==]
[., isLocal, (, ), ), {, Var, maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (, varName, ), ;]
[;, if, (, var, ==, maybeOuterVar, &&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;, }]
[., getVar, (, varName, ), ;, if, (, var, ==, maybeOuterVar, &&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {]
[., getParent, (, ), ., getVar, (, varName, ), ;, if, (, var, ==, maybeOuterVar, &&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce]
[), ;, if, (, var, ==, maybeOuterVar, &&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;]
[), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !, unflowable, &&, !, nonLocalInferredSlot, ), {, type, =, var]
[&&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !, unflowable, &&]
[==, maybeOuterVar, &&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !]
[&&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !, unflowable, &&]
[), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !, unflowable, &&, !, nonLocalInferredSlot, ), {, type, =, var]
[), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !, unflowable, &&, !, nonLocalInferredSlot, ), {, type, =, var]
[., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !, unflowable, &&, !, nonLocalInferredSlot, )]
[=, true, ;, }, }, if, (, !, unflowable, &&, !, nonLocalInferredSlot, ), {, type, =, var, ., getType, (]
[;, }, }, if, (, !, unflowable, &&, !, nonLocalInferredSlot, ), {, type, =, var, ., getType, (, ), ;]
[), {, type, =, var, ., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType]
[&&, !, nonLocalInferredSlot, ), {, type, =, var, ., getType, (, ), ;, if, (, type, ==, null, ), {]
[&&, !, nonLocalInferredSlot, ), {, type, =, var, ., getType, (, ), ;, if, (, type, ==, null, ), {]
[), {, type, =, var, ., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType]
[), {, type, =, var, ., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType]
[=, var, ., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, }]
[;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, }, }, }, n, ., setJSType, (]
[., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, }, }, }]
[), {, type, =, unknownType, ;, }, }, }, }, n, ., setJSType, (, type, ), ;, return, scope, ;]
[==, null, ), {, type, =, unknownType, ;, }, }, }, }, n, ., setJSType, (, type, ), ;, return]
[), {, type, =, unknownType, ;, }, }, }, }, n, ., setJSType, (, type, ), ;, return, scope, ;]
[=, unknownType, ;, }, }, }, }, n, ., setJSType, (, type, ), ;, return, scope, ;, }, private, FlowScope]
[;, }, }, }, }, n, ., setJSType, (, type, ), ;, return, scope, ;, }, private, FlowScope, traverseArrayLiteral, (]
[;, return, scope, ;, }, private, FlowScope, traverseArrayLiteral, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (]
[., setJSType, (, type, ), ;, return, scope, ;, }, private, FlowScope, traverseArrayLiteral, (, Node, n, ,, FlowScope, scope, )]
[), ;, return, scope, ;, }, private, FlowScope, traverseArrayLiteral, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren]
[;, }, private, FlowScope, traverseArrayLiteral, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope]
[=, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, ARRAY_TYPE, ), ), ;, return, scope]
[;, n, ., setJSType, (, getNativeType, (, ARRAY_TYPE, ), ), ;, return, scope, ;, }, private, FlowScope, traverseObjectLiteral, (, Node]
[,, scope, ), ;, n, ., setJSType, (, getNativeType, (, ARRAY_TYPE, ), ), ;, return, scope, ;, }, private, FlowScope]
[), ;, n, ., setJSType, (, getNativeType, (, ARRAY_TYPE, ), ), ;, return, scope, ;, }, private, FlowScope, traverseObjectLiteral, (]
[;, return, scope, ;, }, private, FlowScope, traverseObjectLiteral, (, Node, n, ,, FlowScope, scope, ), {, JSType, type, =, n]
[., setJSType, (, getNativeType, (, ARRAY_TYPE, ), ), ;, return, scope, ;, }, private, FlowScope, traverseObjectLiteral, (, Node, n, ,]
[), ;, return, scope, ;, }, private, FlowScope, traverseObjectLiteral, (, Node, n, ,, FlowScope, scope, ), {, JSType, type, =]
[), ), ;, return, scope, ;, }, private, FlowScope, traverseObjectLiteral, (, Node, n, ,, FlowScope, scope, ), {, JSType, type]
[;, }, private, FlowScope, traverseObjectLiteral, (, Node, n, ,, FlowScope, scope, ), {, JSType, type, =, n, ., getJSType, (]
[;, Preconditions, ., checkNotNull, (, type, ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name]
[., getJSType, (, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, for, (, Node, name, =, n, ., getFirstChild]
[;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =, name, .]
[., checkNotNull, (, type, ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null]
[), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =, name]
[;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, scope, =, traverse, (, name, .]
[., getFirstChild, (, ), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, scope, =]
[;, name, =, name, ., getNext, (, ), ), {, scope, =, traverse, (, name, ., getFirstChild, (, ), ,]
[!=, null, ;, name, =, name, ., getNext, (, ), ), {, scope, =, traverse, (, name, ., getFirstChild, (]
[;, name, =, name, ., getNext, (, ), ), {, scope, =, traverse, (, name, ., getFirstChild, (, ), ,]
[=, name, ., getNext, (, ), ), {, scope, =, traverse, (, name, ., getFirstChild, (, ), ,, scope, )]
[), {, scope, =, traverse, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }, ObjectType, objectType, =, ObjectType]
[., getNext, (, ), ), {, scope, =, traverse, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }]
[=, traverse, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }, ObjectType, objectType, =, ObjectType, ., cast, (]
[;, }, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, return]
[,, scope, ), ;, }, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null]
[., getFirstChild, (, ), ,, scope, ), ;, }, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if]
[), ;, }, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null, ), {]
[;, if, (, objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =, n, ., getJSDocInfo, (, )]
[., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =]
[), ;, if, (, objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =, n, ., getJSDocInfo, (]
[), {, return, scope, ;, }, boolean, hasLendsName, =, n, ., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo]
[==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =, n, ., getJSDocInfo, (, ), !=, null, &&, n]
[), {, return, scope, ;, }, boolean, hasLendsName, =, n, ., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo]
[;, }, boolean, hasLendsName, =, n, ., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., getLendsName]
[;, if, (, objectType, ., hasReferenceName, (, ), &&, !, hasLendsName, ), {, return, scope, ;, }, String, qObjName, =]
[&&, n, ., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null, ;, if, (, objectType, ., hasReferenceName, (, )]
[!=, null, &&, n, ., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null, ;, if, (, objectType, ., hasReferenceName]
[., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null, ;, if]
[&&, n, ., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null, ;, if, (, objectType, ., hasReferenceName, (, )]
[;, if, (, objectType, ., hasReferenceName, (, ), &&, !, hasLendsName, ), {, return, scope, ;, }, String, qObjName, =]
[!=, null, ;, if, (, objectType, ., hasReferenceName, (, ), &&, !, hasLendsName, ), {, return, scope, ;, }, String]
[., getLendsName, (, ), !=, null, ;, if, (, objectType, ., hasReferenceName, (, ), &&, !, hasLendsName, ), {, return]
[., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null, ;, if, (, objectType, ., hasReferenceName, (, ), &&, !]
[;, if, (, objectType, ., hasReferenceName, (, ), &&, !, hasLendsName, ), {, return, scope, ;, }, String, qObjName, =]
[), {, return, scope, ;, }, String, qObjName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), )]
[&&, !, hasLendsName, ), {, return, scope, ;, }, String, qObjName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (]
[., hasReferenceName, (, ), &&, !, hasLendsName, ), {, return, scope, ;, }, String, qObjName, =, NodeUtil, ., getBestLValueName, (]
[), {, return, scope, ;, }, String, qObjName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), )]
[), {, return, scope, ;, }, String, qObjName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), )]
[;, }, String, qObjName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, for, (, Node]
[;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =, name, .]
[., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, for, (, Node, name, =, n, ., getFirstChild, (]
[), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =, name]
[., getBestLValue, (, n, ), ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=]
[), ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =]
[;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, Node, value, =, name, ., getFirstChild]
[., getFirstChild, (, ), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, Node, value]
[;, name, =, name, ., getNext, (, ), ), {, Node, value, =, name, ., getFirstChild, (, ), ;, String]
[!=, null, ;, name, =, name, ., getNext, (, ), ), {, Node, value, =, name, ., getFirstChild, (, )]
[;, name, =, name, ., getNext, (, ), ), {, Node, value, =, name, ., getFirstChild, (, ), ;, String]
[=, name, ., getNext, (, ), ), {, Node, value, =, name, ., getFirstChild, (, ), ;, String, memberName, =]
[), {, Node, value, =, name, ., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, name, )]
[., getNext, (, ), ), {, Node, value, =, name, ., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, .]
[;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, name, ), ;, if, (, memberName, !=, null, ), {, JSType, rawValueType]
[., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, name, ), ;, if, (, memberName, !=, null]
[;, if, (, memberName, !=, null, ), {, JSType, rawValueType, =, name, ., getFirstChild, (, ), ., getJSType, (, )]
[., getObjectLitKeyName, (, name, ), ;, if, (, memberName, !=, null, ), {, JSType, rawValueType, =, name, ., getFirstChild, (]
[), ;, if, (, memberName, !=, null, ), {, JSType, rawValueType, =, name, ., getFirstChild, (, ), ., getJSType, (]
[), {, JSType, rawValueType, =, name, ., getFirstChild, (, ), ., getJSType, (, ), ;, JSType, valueType, =, NodeUtil, .]
[!=, null, ), {, JSType, rawValueType, =, name, ., getFirstChild, (, ), ., getJSType, (, ), ;, JSType, valueType, =]
[), {, JSType, rawValueType, =, name, ., getFirstChild, (, ), ., getJSType, (, ), ;, JSType, valueType, =, NodeUtil, .]
[;, JSType, valueType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, ), ;, if, (, valueType, ==, null, ), {]
[., getJSType, (, ), ;, JSType, valueType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, ), ;, if, (, valueType]
[., getFirstChild, (, ), ., getJSType, (, ), ;, JSType, valueType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, )]
[;, if, (, valueType, ==, null, ), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType]
[., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, ), ;, if, (, valueType, ==, null, ), {, valueType, =, unknownType, ;, }]
[,, rawValueType, ), ;, if, (, valueType, ==, null, ), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (]
[), ;, if, (, valueType, ==, null, ), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,]
[), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;, if, (]
[==, null, ), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;]
[), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;, if, (]
[=, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;, if, (, qObjName, !=, null]
[;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;, if, (, qObjName, !=, null, &&, name]
[;, if, (, qObjName, !=, null, &&, name, ., isStringKey, (, ), ), {, String, qKeyName, =, qObjName, +, "."]
[., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;, if, (, qObjName, !=, null, &&, name, ., isStringKey, (]
[,, valueType, ,, name, ), ;, if, (, qObjName, !=, null, &&, name, ., isStringKey, (, ), ), {, String]
[,, name, ), ;, if, (, qObjName, !=, null, &&, name, ., isStringKey, (, ), ), {, String, qKeyName, =]
[), ;, if, (, qObjName, !=, null, &&, name, ., isStringKey, (, ), ), {, String, qKeyName, =, qObjName, +]
[), {, String, qKeyName, =, qObjName, +, ".", +, memberName, ;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, )]
[&&, name, ., isStringKey, (, ), ), {, String, qKeyName, =, qObjName, +, ".", +, memberName, ;, Var, var, =]
[!=, null, &&, name, ., isStringKey, (, ), ), {, String, qKeyName, =, qObjName, +, ".", +, memberName, ;, Var]
[&&, name, ., isStringKey, (, ), ), {, String, qKeyName, =, qObjName, +, ".", +, memberName, ;, Var, var, =]
[), {, String, qKeyName, =, qObjName, +, ".", +, memberName, ;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, )]
[., isStringKey, (, ), ), {, String, qKeyName, =, qObjName, +, ".", +, memberName, ;, Var, var, =, syntacticScope, .]
[;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =, var, ==, null, ?, null, :]
[+, memberName, ;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =, var, ==, null, ?]
[+, ".", +, memberName, ;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =, var, ==]
[+, memberName, ;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =, var, ==, null, ?]
[;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =, var, ==, null, ?, null, :]
[;, JSType, oldType, =, var, ==, null, ?, null, :, var, ., getType, (, ), ;, if, (, var, !=]
[., getVar, (, qKeyName, ), ;, JSType, oldType, =, var, ==, null, ?, null, :, var, ., getType, (, )]
[), ;, JSType, oldType, =, var, ==, null, ?, null, :, var, ., getType, (, ), ;, if, (, var]
[;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (, oldType, ==]
[?, null, :, var, ., getType, (, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, )]
[==, null, ?, null, :, var, ., getType, (, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred]
[?, null, :, var, ., getType, (, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, )]
[:, var, ., getType, (, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {]
[;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (, oldType, ==]
[., getType, (, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, var, .]
[), {, var, ., setType, (, oldType, ==, null, ?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;]
[&&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (, oldType, ==, null, ?, valueType, :, oldType, .]
[!=, null, &&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (, oldType, ==, null, ?, valueType, :]
[&&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (, oldType, ==, null, ?, valueType, :, oldType, .]
[), {, var, ., setType, (, oldType, ==, null, ?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;]
[., isTypeInferred, (, ), ), {, var, ., setType, (, oldType, ==, null, ?, valueType, :, oldType, ., getLeastSupertype, (]
[;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==, null, ?, unknownType, :, oldType, ,, valueType, )]
[., setType, (, oldType, ==, null, ?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }, scope, .]
[), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==, null, ?, unknownType, :, oldType, ,, valueType]
[?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,]
[==, null, ?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,]
[?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,]
[:, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==]
[), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==, null, ?, unknownType, :, oldType, ,, valueType]
[., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==, null, ?]
[), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==, null, ?, unknownType, :, oldType, ,]
[;, }, }, else, {, n, ., setJSType, (, unknownType, ), ;, }, }, return, scope, ;, }, private, FlowScope]
[., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==, null, ?, unknownType, :, oldType, ,, valueType, ), ;, }, }]
[,, qKeyName, ,, oldType, ==, null, ?, unknownType, :, oldType, ,, valueType, ), ;, }, }, else, {, n, .]
[,, oldType, ==, null, ?, unknownType, :, oldType, ,, valueType, ), ;, }, }, else, {, n, ., setJSType, (]
[,, valueType, ), ;, }, }, else, {, n, ., setJSType, (, unknownType, ), ;, }, }, return, scope, ;]
[?, unknownType, :, oldType, ,, valueType, ), ;, }, }, else, {, n, ., setJSType, (, unknownType, ), ;, }]
[==, null, ?, unknownType, :, oldType, ,, valueType, ), ;, }, }, else, {, n, ., setJSType, (, unknownType, )]
[?, unknownType, :, oldType, ,, valueType, ), ;, }, }, else, {, n, ., setJSType, (, unknownType, ), ;, }]
[:, oldType, ,, valueType, ), ;, }, }, else, {, n, ., setJSType, (, unknownType, ), ;, }, }, return]
[,, valueType, ), ;, }, }, else, {, n, ., setJSType, (, unknownType, ), ;, }, }, return, scope, ;]
[), ;, }, }, else, {, n, ., setJSType, (, unknownType, ), ;, }, }, return, scope, ;, }, private]
[;, }, }, return, scope, ;, }, private, FlowScope, traverseAdd, (, Node, n, ,, FlowScope, scope, ), {, Node, left]
[., setJSType, (, unknownType, ), ;, }, }, return, scope, ;, }, private, FlowScope, traverseAdd, (, Node, n, ,, FlowScope]
[), ;, }, }, return, scope, ;, }, private, FlowScope, traverseAdd, (, Node, n, ,, FlowScope, scope, ), {, Node]
[;, }, private, FlowScope, traverseAdd, (, Node, n, ,, FlowScope, scope, ), {, Node, left, =, n, ., getFirstChild, (]
[;, Node, right, =, left, ., getNext, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, JSType]
[., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;, scope, =, traverseChildren, (, n, ,]
[;, scope, =, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType]
[., getNext, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =, left, ., getJSType]
[=, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =]
[;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType]
[,, scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =, right, ., getJSType, (]
[), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;]
[;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, =, unknownType, ;, if, (, leftType, !=, null]
[., getJSType, (, ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, =, unknownType, ;, if]
[;, JSType, type, =, unknownType, ;, if, (, leftType, !=, null, &&, rightType, !=, null, ), {, boolean, leftIsUnknown, =]
[., getJSType, (, ), ;, JSType, type, =, unknownType, ;, if, (, leftType, !=, null, &&, rightType, !=, null, )]
[;, if, (, leftType, !=, null, &&, rightType, !=, null, ), {, boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, )]
[), {, boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =, rightType, ., isUnknownType, (, ), ;]
[&&, rightType, !=, null, ), {, boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =, rightType, .]
[!=, null, &&, rightType, !=, null, ), {, boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =]
[&&, rightType, !=, null, ), {, boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =, rightType, .]
[), {, boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =, rightType, ., isUnknownType, (, ), ;]
[!=, null, ), {, boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =, rightType, ., isUnknownType, (]
[), {, boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =, rightType, ., isUnknownType, (, ), ;]
[;, boolean, rightIsUnknown, =, rightType, ., isUnknownType, (, ), ;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {, type, =, unknownType]
[., isUnknownType, (, ), ;, boolean, rightIsUnknown, =, rightType, ., isUnknownType, (, ), ;, if, (, leftIsUnknown, &&, rightIsUnknown, )]
[;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, (, !, leftIsUnknown, &&]
[., isUnknownType, (, ), ;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (]
[), {, type, =, unknownType, ;, }, else, if, (, (, !, leftIsUnknown, &&, leftType, ., isString, (, ), )]
[&&, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, (, !, leftIsUnknown, &&, leftType, ., isString, (]
[), {, type, =, unknownType, ;, }, else, if, (, (, !, leftIsUnknown, &&, leftType, ., isString, (, ), )]
[=, unknownType, ;, }, else, if, (, (, !, leftIsUnknown, &&, leftType, ., isString, (, ), ), ||, (, !]
[;, }, else, if, (, (, !, leftIsUnknown, &&, leftType, ., isString, (, ), ), ||, (, !, rightIsUnknown, &&]
[), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type, =]
[||, (, !, rightIsUnknown, &&, rightType, ., isString, (, ), ), ), {, type, =, getNativeType, (, STRING_TYPE, ), ;]
[), ||, (, !, rightIsUnknown, &&, rightType, ., isString, (, ), ), ), {, type, =, getNativeType, (, STRING_TYPE, )]
[&&, leftType, ., isString, (, ), ), ||, (, !, rightIsUnknown, &&, rightType, ., isString, (, ), ), ), {]
[&&, leftType, ., isString, (, ), ), ||, (, !, rightIsUnknown, &&, rightType, ., isString, (, ), ), ), {]
[), ||, (, !, rightIsUnknown, &&, rightType, ., isString, (, ), ), ), {, type, =, getNativeType, (, STRING_TYPE, )]
[., isString, (, ), ), ||, (, !, rightIsUnknown, &&, rightType, ., isString, (, ), ), ), {, type, =]
[), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type, =]
[), ), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type]
[&&, rightType, ., isString, (, ), ), ), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (]
[&&, rightType, ., isString, (, ), ), ), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (]
[), ), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type]
[., isString, (, ), ), ), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, leftIsUnknown, ||]
[=, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type, =, unknownType, ;, }]
[;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, isAddedAsNumber, (]
[), ;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, isAddedAsNumber]
[), {, type, =, unknownType, ;, }, else, if, (, isAddedAsNumber, (, leftType, ), &&, isAddedAsNumber, (, rightType, ), )]
[||, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, isAddedAsNumber, (, leftType, ), &&, isAddedAsNumber, (, rightType]
[), {, type, =, unknownType, ;, }, else, if, (, isAddedAsNumber, (, leftType, ), &&, isAddedAsNumber, (, rightType, ), )]
[=, unknownType, ;, }, else, if, (, isAddedAsNumber, (, leftType, ), &&, isAddedAsNumber, (, rightType, ), ), {, type, =]
[;, }, else, if, (, isAddedAsNumber, (, leftType, ), &&, isAddedAsNumber, (, rightType, ), ), {, type, =, getNativeType, (]
[), {, type, =, getNativeType, (, NUMBER_TYPE, ), ;, }, else, {, type, =, registry, ., createUnionType, (, STRING_TYPE, ,]
[&&, isAddedAsNumber, (, rightType, ), ), {, type, =, getNativeType, (, NUMBER_TYPE, ), ;, }, else, {, type, =, registry]
[), &&, isAddedAsNumber, (, rightType, ), ), {, type, =, getNativeType, (, NUMBER_TYPE, ), ;, }, else, {, type, =]
[), {, type, =, getNativeType, (, NUMBER_TYPE, ), ;, }, else, {, type, =, registry, ., createUnionType, (, STRING_TYPE, ,]
[), ), {, type, =, getNativeType, (, NUMBER_TYPE, ), ;, }, else, {, type, =, registry, ., createUnionType, (, STRING_TYPE]
[=, getNativeType, (, NUMBER_TYPE, ), ;, }, else, {, type, =, registry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ), ;]
[;, }, else, {, type, =, registry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ), ;, }, }, n, ., setJSType]
[), ;, }, else, {, type, =, registry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ), ;, }, }, n, .]
[=, registry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ), ;, }, }, n, ., setJSType, (, type, ), ;, if]
[;, }, }, n, ., setJSType, (, type, ), ;, if, (, n, ., isAssignAdd, (, ), ), {, updateScopeForTypeChange]
[., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ), ;, }, }, n, ., setJSType, (, type, ), ;, if, (, n]
[,, NUMBER_TYPE, ), ;, }, }, n, ., setJSType, (, type, ), ;, if, (, n, ., isAssignAdd, (, )]
[), ;, }, }, n, ., setJSType, (, type, ), ;, if, (, n, ., isAssignAdd, (, ), ), {]
[;, if, (, n, ., isAssignAdd, (, ), ), {, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, type, )]
[., setJSType, (, type, ), ;, if, (, n, ., isAssignAdd, (, ), ), {, updateScopeForTypeChange, (, scope, ,, left]
[), ;, if, (, n, ., isAssignAdd, (, ), ), {, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, type]
[), {, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, type, ), ;, }, return, scope, ;, }, private, boolean]
[., isAssignAdd, (, ), ), {, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, type, ), ;, }, return, scope]
[;, }, return, scope, ;, }, private, boolean, isAddedAsNumber, (, JSType, type, ), {, return, type, ., isSubtype, (, registry]
[,, left, ,, leftType, ,, type, ), ;, }, return, scope, ;, }, private, boolean, isAddedAsNumber, (, JSType, type, )]
[,, leftType, ,, type, ), ;, }, return, scope, ;, }, private, boolean, isAddedAsNumber, (, JSType, type, ), {, return]
[,, type, ), ;, }, return, scope, ;, }, private, boolean, isAddedAsNumber, (, JSType, type, ), {, return, type, .]
[), ;, }, return, scope, ;, }, private, boolean, isAddedAsNumber, (, JSType, type, ), {, return, type, ., isSubtype, (]
[;, }, private, boolean, isAddedAsNumber, (, JSType, type, ), {, return, type, ., isSubtype, (, registry, ., createUnionType, (, VOID_TYPE]
[;, }, private, FlowScope, traverseHook, (, Node, n, ,, FlowScope, scope, ), {, Node, condition, =, n, ., getFirstChild, (]
[., isSubtype, (, registry, ., createUnionType, (, VOID_TYPE, ,, NULL_TYPE, ,, NUMBER_VALUE_OR_OBJECT_TYPE, ,, BOOLEAN_TYPE, ,, BOOLEAN_OBJECT_TYPE, ), ), ;, }]
[), ;, }, private, FlowScope, traverseHook, (, Node, n, ,, FlowScope, scope, ), {, Node, condition, =, n, ., getFirstChild]
[., createUnionType, (, VOID_TYPE, ,, NULL_TYPE, ,, NUMBER_VALUE_OR_OBJECT_TYPE, ,, BOOLEAN_TYPE, ,, BOOLEAN_OBJECT_TYPE, ), ), ;, }, private, FlowScope, traverseHook, (]
[,, NULL_TYPE, ,, NUMBER_VALUE_OR_OBJECT_TYPE, ,, BOOLEAN_TYPE, ,, BOOLEAN_OBJECT_TYPE, ), ), ;, }, private, FlowScope, traverseHook, (, Node, n, ,, FlowScope]
[,, NUMBER_VALUE_OR_OBJECT_TYPE, ,, BOOLEAN_TYPE, ,, BOOLEAN_OBJECT_TYPE, ), ), ;, }, private, FlowScope, traverseHook, (, Node, n, ,, FlowScope, scope, )]
[,, BOOLEAN_TYPE, ,, BOOLEAN_OBJECT_TYPE, ), ), ;, }, private, FlowScope, traverseHook, (, Node, n, ,, FlowScope, scope, ), {, Node]
[,, BOOLEAN_OBJECT_TYPE, ), ), ;, }, private, FlowScope, traverseHook, (, Node, n, ,, FlowScope, scope, ), {, Node, condition, =]
[), ), ;, }, private, FlowScope, traverseHook, (, Node, n, ,, FlowScope, scope, ), {, Node, condition, =, n, .]
[;, Node, trueNode, =, condition, ., getNext, (, ), ;, Node, falseNode, =, n, ., getLastChild, (, ), ;, scope]
[., getFirstChild, (, ), ;, Node, trueNode, =, condition, ., getNext, (, ), ;, Node, falseNode, =, n, ., getLastChild]
[;, Node, falseNode, =, n, ., getLastChild, (, ), ;, scope, =, traverse, (, condition, ,, scope, ), ;, FlowScope]
[., getNext, (, ), ;, Node, falseNode, =, n, ., getLastChild, (, ), ;, scope, =, traverse, (, condition, ,]
[;, scope, =, traverse, (, condition, ,, scope, ), ;, FlowScope, trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope]
[., getLastChild, (, ), ;, scope, =, traverse, (, condition, ,, scope, ), ;, FlowScope, trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome]
[=, traverse, (, condition, ,, scope, ), ;, FlowScope, trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, true]
[;, FlowScope, trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, true, ), ;, FlowScope, falseScope, =, reverseInterpreter, .]
[,, scope, ), ;, FlowScope, trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, true, ), ;, FlowScope, falseScope]
[), ;, FlowScope, trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, true, ), ;, FlowScope, falseScope, =, reverseInterpreter]
[;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, false, ), ;, traverse, (, trueNode, ,, trueScope]
[., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, true, ), ;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope]
[,, scope, ,, true, ), ;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, false, ), ;]
[,, true, ), ;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, false, ), ;, traverse, (]
[), ;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, false, ), ;, traverse, (, trueNode, ,]
[;, traverse, (, trueNode, ,, trueScope, ., createChildFlowScope, (, ), ), ;, traverse, (, falseNode, ,, falseScope, ., createChildFlowScope, (]
[., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, false, ), ;, traverse, (, trueNode, ,, trueScope, ., createChildFlowScope, (, ), )]
[,, scope, ,, false, ), ;, traverse, (, trueNode, ,, trueScope, ., createChildFlowScope, (, ), ), ;, traverse, (, falseNode]
[,, false, ), ;, traverse, (, trueNode, ,, trueScope, ., createChildFlowScope, (, ), ), ;, traverse, (, falseNode, ,, falseScope]
[), ;, traverse, (, trueNode, ,, trueScope, ., createChildFlowScope, (, ), ), ;, traverse, (, falseNode, ,, falseScope, ., createChildFlowScope]
[;, traverse, (, falseNode, ,, falseScope, ., createChildFlowScope, (, ), ), ;, JSType, trueType, =, trueNode, ., getJSType, (, )]
[,, trueScope, ., createChildFlowScope, (, ), ), ;, traverse, (, falseNode, ,, falseScope, ., createChildFlowScope, (, ), ), ;, JSType]
[), ;, traverse, (, falseNode, ,, falseScope, ., createChildFlowScope, (, ), ), ;, JSType, trueType, =, trueNode, ., getJSType, (]
[., createChildFlowScope, (, ), ), ;, traverse, (, falseNode, ,, falseScope, ., createChildFlowScope, (, ), ), ;, JSType, trueType, =]
[;, JSType, trueType, =, trueNode, ., getJSType, (, ), ;, JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if]
[,, falseScope, ., createChildFlowScope, (, ), ), ;, JSType, trueType, =, trueNode, ., getJSType, (, ), ;, JSType, falseType, =]
[), ;, JSType, trueType, =, trueNode, ., getJSType, (, ), ;, JSType, falseType, =, falseNode, ., getJSType, (, ), ;]
[., createChildFlowScope, (, ), ), ;, JSType, trueType, =, trueNode, ., getJSType, (, ), ;, JSType, falseType, =, falseNode, .]
[;, JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if, (, trueType, !=, null, &&, falseType, !=, null, )]
[., getJSType, (, ), ;, JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if, (, trueType, !=, null, &&]
[;, if, (, trueType, !=, null, &&, falseType, !=, null, ), {, n, ., setJSType, (, trueType, ., getLeastSupertype, (]
[., getJSType, (, ), ;, if, (, trueType, !=, null, &&, falseType, !=, null, ), {, n, ., setJSType, (]
[), {, n, ., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else, {, n, ., setJSType]
[&&, falseType, !=, null, ), {, n, ., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else]
[!=, null, &&, falseType, !=, null, ), {, n, ., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), ), ;]
[&&, falseType, !=, null, ), {, n, ., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else]
[), {, n, ., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else, {, n, ., setJSType]
[!=, null, ), {, n, ., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else, {, n]
[), {, n, ., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else, {, n, ., setJSType]
[;, }, else, {, n, ., setJSType, (, null, ), ;, }, return, scope, ., createChildFlowScope, (, ), ;, }]
[., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else, {, n, ., setJSType, (, null, )]
[), ;, }, else, {, n, ., setJSType, (, null, ), ;, }, return, scope, ., createChildFlowScope, (, ), ;]
[., getLeastSupertype, (, falseType, ), ), ;, }, else, {, n, ., setJSType, (, null, ), ;, }, return, scope]
[), ), ;, }, else, {, n, ., setJSType, (, null, ), ;, }, return, scope, ., createChildFlowScope, (, )]
[;, }, return, scope, ., createChildFlowScope, (, ), ;, }, private, FlowScope, traverseCall, (, Node, n, ,, FlowScope, scope, )]
[., setJSType, (, null, ), ;, }, return, scope, ., createChildFlowScope, (, ), ;, }, private, FlowScope, traverseCall, (, Node]
[), ;, }, return, scope, ., createChildFlowScope, (, ), ;, }, private, FlowScope, traverseCall, (, Node, n, ,, FlowScope, scope]
[;, }, private, FlowScope, traverseCall, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope]
[., createChildFlowScope, (, ), ;, }, private, FlowScope, traverseCall, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren]
[=, traverseChildren, (, n, ,, scope, ), ;, Node, left, =, n, ., getFirstChild, (, ), ;, JSType, functionType, =]
[;, Node, left, =, n, ., getFirstChild, (, ), ;, JSType, functionType, =, getJSType, (, left, ), ., restrictByNotNullOrUndefined, (]
[,, scope, ), ;, Node, left, =, n, ., getFirstChild, (, ), ;, JSType, functionType, =, getJSType, (, left, )]
[), ;, Node, left, =, n, ., getFirstChild, (, ), ;, JSType, functionType, =, getJSType, (, left, ), ., restrictByNotNullOrUndefined]
[;, JSType, functionType, =, getJSType, (, left, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, functionType, ., isFunctionType, (, )]
[., getFirstChild, (, ), ;, JSType, functionType, =, getJSType, (, left, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, functionType]
[;, if, (, functionType, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, functionType, ., toMaybeFunctionType, (, ), ;, n]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, functionType, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, functionType, ., toMaybeFunctionType]
[), ., restrictByNotNullOrUndefined, (, ), ;, if, (, functionType, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, functionType, .]
[), {, FunctionType, fnType, =, functionType, ., toMaybeFunctionType, (, ), ;, n, ., setJSType, (, fnType, ., getReturnType, (, )]
[., isFunctionType, (, ), ), {, FunctionType, fnType, =, functionType, ., toMaybeFunctionType, (, ), ;, n, ., setJSType, (, fnType]
[;, n, ., setJSType, (, fnType, ., getReturnType, (, ), ), ;, backwardsInferenceFromCallSite, (, n, ,, fnType, ), ;, }]
[., toMaybeFunctionType, (, ), ;, n, ., setJSType, (, fnType, ., getReturnType, (, ), ), ;, backwardsInferenceFromCallSite, (, n, ,]
[;, backwardsInferenceFromCallSite, (, n, ,, fnType, ), ;, }, else, if, (, functionType, ., isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, )]
[., setJSType, (, fnType, ., getReturnType, (, ), ), ;, backwardsInferenceFromCallSite, (, n, ,, fnType, ), ;, }, else, if]
[), ;, backwardsInferenceFromCallSite, (, n, ,, fnType, ), ;, }, else, if, (, functionType, ., isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE]
[., getReturnType, (, ), ), ;, backwardsInferenceFromCallSite, (, n, ,, fnType, ), ;, }, else, if, (, functionType, ., isEquivalentTo]
[;, }, else, if, (, functionType, ., isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ), {, n, ., setJSType, (]
[,, fnType, ), ;, }, else, if, (, functionType, ., isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ), {, n]
[), ;, }, else, if, (, functionType, ., isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ), {, n, ., setJSType]
[), {, n, ., setJSType, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ;, }, scope, =, tightenTypesAfterAssertions, (, scope, ,, n]
[., isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ), {, n, ., setJSType, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ;]
[), ), {, n, ., setJSType, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ;, }, scope, =, tightenTypesAfterAssertions, (, scope, ,]
[), ), ), {, n, ., setJSType, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ;, }, scope, =, tightenTypesAfterAssertions, (, scope]
[;, }, scope, =, tightenTypesAfterAssertions, (, scope, ,, n, ), ;, return, scope, ;, }, private, FlowScope, tightenTypesAfterAssertions, (, FlowScope]
[., setJSType, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ;, }, scope, =, tightenTypesAfterAssertions, (, scope, ,, n, ), ;, return]
[), ;, }, scope, =, tightenTypesAfterAssertions, (, scope, ,, n, ), ;, return, scope, ;, }, private, FlowScope, tightenTypesAfterAssertions, (]
[), ), ;, }, scope, =, tightenTypesAfterAssertions, (, scope, ,, n, ), ;, return, scope, ;, }, private, FlowScope, tightenTypesAfterAssertions]
[=, tightenTypesAfterAssertions, (, scope, ,, n, ), ;, return, scope, ;, }, private, FlowScope, tightenTypesAfterAssertions, (, FlowScope, scope, ,, Node]
[;, return, scope, ;, }, private, FlowScope, tightenTypesAfterAssertions, (, FlowScope, scope, ,, Node, callNode, ), {, Node, left, =, callNode]
[,, n, ), ;, return, scope, ;, }, private, FlowScope, tightenTypesAfterAssertions, (, FlowScope, scope, ,, Node, callNode, ), {, Node]
[), ;, return, scope, ;, }, private, FlowScope, tightenTypesAfterAssertions, (, FlowScope, scope, ,, Node, callNode, ), {, Node, left, =]
[;, }, private, FlowScope, tightenTypesAfterAssertions, (, FlowScope, scope, ,, Node, callNode, ), {, Node, left, =, callNode, ., getFirstChild, (]
[;, Node, firstParam, =, left, ., getNext, (, ), ;, AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get, (, left, ., getQualifiedName]
[., getFirstChild, (, ), ;, Node, firstParam, =, left, ., getNext, (, ), ;, AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get]
[;, AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get, (, left, ., getQualifiedName, (, ), ), ;, if, (, assertionFunctionSpec, ==, null]
[., getNext, (, ), ;, AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get, (, left, ., getQualifiedName, (, ), ), ;, if]
[;, if, (, assertionFunctionSpec, ==, null, ||, firstParam, ==, null, ), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec]
[., get, (, left, ., getQualifiedName, (, ), ), ;, if, (, assertionFunctionSpec, ==, null, ||, firstParam, ==, null, )]
[), ;, if, (, assertionFunctionSpec, ==, null, ||, firstParam, ==, null, ), {, return, scope, ;, }, Node, assertedNode, =]
[., getQualifiedName, (, ), ), ;, if, (, assertionFunctionSpec, ==, null, ||, firstParam, ==, null, ), {, return, scope, ;]
[), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam, ), ;, if, (, assertedNode, ==]
[||, firstParam, ==, null, ), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam, ), ;]
[==, null, ||, firstParam, ==, null, ), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam]
[||, firstParam, ==, null, ), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam, ), ;]
[), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam, ), ;, if, (, assertedNode, ==]
[==, null, ), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam, ), ;, if, (]
[), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam, ), ;, if, (, assertedNode, ==]
[;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam, ), ;, if, (, assertedNode, ==, null, ), {, return]
[;, if, (, assertedNode, ==, null, ), {, return, scope, ;, }, JSType, assertedType, =, assertionFunctionSpec, ., getAssertedType, (, callNode]
[., getAssertedParam, (, firstParam, ), ;, if, (, assertedNode, ==, null, ), {, return, scope, ;, }, JSType, assertedType, =]
[), ;, if, (, assertedNode, ==, null, ), {, return, scope, ;, }, JSType, assertedType, =, assertionFunctionSpec, ., getAssertedType, (]
[), {, return, scope, ;, }, JSType, assertedType, =, assertionFunctionSpec, ., getAssertedType, (, callNode, ,, registry, ), ;, String, assertedNodeName]
[==, null, ), {, return, scope, ;, }, JSType, assertedType, =, assertionFunctionSpec, ., getAssertedType, (, callNode, ,, registry, ), ;]
[), {, return, scope, ;, }, JSType, assertedType, =, assertionFunctionSpec, ., getAssertedType, (, callNode, ,, registry, ), ;, String, assertedNodeName]
[;, }, JSType, assertedType, =, assertionFunctionSpec, ., getAssertedType, (, callNode, ,, registry, ), ;, String, assertedNodeName, =, assertedNode, ., getQualifiedName]
[;, String, assertedNodeName, =, assertedNode, ., getQualifiedName, (, ), ;, JSType, narrowed, ;, if, (, assertedType, ==, null, ), {]
[., getAssertedType, (, callNode, ,, registry, ), ;, String, assertedNodeName, =, assertedNode, ., getQualifiedName, (, ), ;, JSType, narrowed, ;]
[,, registry, ), ;, String, assertedNodeName, =, assertedNode, ., getQualifiedName, (, ), ;, JSType, narrowed, ;, if, (, assertedType, ==]
[), ;, String, assertedNodeName, =, assertedNode, ., getQualifiedName, (, ), ;, JSType, narrowed, ;, if, (, assertedType, ==, null, )]
[;, JSType, narrowed, ;, if, (, assertedType, ==, null, ), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope]
[., getQualifiedName, (, ), ;, JSType, narrowed, ;, if, (, assertedType, ==, null, ), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome]
[), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope, ,, true, ), ;, narrowed, =, getJSType, (, assertedNode]
[==, null, ), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope, ,, true, ), ;, narrowed, =, getJSType]
[), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope, ,, true, ), ;, narrowed, =, getJSType, (, assertedNode]
[=, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope, ,, true, ), ;, narrowed, =, getJSType, (, assertedNode, ), ., restrictByNotNullOrUndefined]
[;, narrowed, =, getJSType, (, assertedNode, ), ., restrictByNotNullOrUndefined, (, ), ;, }, else, {, JSType, type, =, getJSType, (]
[., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope, ,, true, ), ;, narrowed, =, getJSType, (, assertedNode, ), ., restrictByNotNullOrUndefined, (, )]
[,, scope, ,, true, ), ;, narrowed, =, getJSType, (, assertedNode, ), ., restrictByNotNullOrUndefined, (, ), ;, }, else, {]
[,, true, ), ;, narrowed, =, getJSType, (, assertedNode, ), ., restrictByNotNullOrUndefined, (, ), ;, }, else, {, JSType, type]
[), ;, narrowed, =, getJSType, (, assertedNode, ), ., restrictByNotNullOrUndefined, (, ), ;, }, else, {, JSType, type, =, getJSType]
[=, getJSType, (, assertedNode, ), ., restrictByNotNullOrUndefined, (, ), ;, }, else, {, JSType, type, =, getJSType, (, assertedNode, )]
[;, }, else, {, JSType, type, =, getJSType, (, assertedNode, ), ;, narrowed, =, type, ., getGreatestSubtype, (, assertedType, )]
[., restrictByNotNullOrUndefined, (, ), ;, }, else, {, JSType, type, =, getJSType, (, assertedNode, ), ;, narrowed, =, type, .]
[), ., restrictByNotNullOrUndefined, (, ), ;, }, else, {, JSType, type, =, getJSType, (, assertedNode, ), ;, narrowed, =, type]
[;, narrowed, =, type, ., getGreatestSubtype, (, assertedType, ), ;, if, (, assertedNodeName, !=, null, &&, type, ., differsFrom, (]
[), ;, narrowed, =, type, ., getGreatestSubtype, (, assertedType, ), ;, if, (, assertedNodeName, !=, null, &&, type, ., differsFrom]
[=, type, ., getGreatestSubtype, (, assertedType, ), ;, if, (, assertedNodeName, !=, null, &&, type, ., differsFrom, (, narrowed, )]
[;, if, (, assertedNodeName, !=, null, &&, type, ., differsFrom, (, narrowed, ), ), {, scope, =, narrowScope, (, scope]
[., getGreatestSubtype, (, assertedType, ), ;, if, (, assertedNodeName, !=, null, &&, type, ., differsFrom, (, narrowed, ), ), {]
[), ;, if, (, assertedNodeName, !=, null, &&, type, ., differsFrom, (, narrowed, ), ), {, scope, =, narrowScope, (]
[), {, scope, =, narrowScope, (, scope, ,, assertedNode, ,, narrowed, ), ;, }, }, callNode, ., setJSType, (, narrowed]
[&&, type, ., differsFrom, (, narrowed, ), ), {, scope, =, narrowScope, (, scope, ,, assertedNode, ,, narrowed, ), ;]
[!=, null, &&, type, ., differsFrom, (, narrowed, ), ), {, scope, =, narrowScope, (, scope, ,, assertedNode, ,, narrowed]
[&&, type, ., differsFrom, (, narrowed, ), ), {, scope, =, narrowScope, (, scope, ,, assertedNode, ,, narrowed, ), ;]
[), {, scope, =, narrowScope, (, scope, ,, assertedNode, ,, narrowed, ), ;, }, }, callNode, ., setJSType, (, narrowed]
[., differsFrom, (, narrowed, ), ), {, scope, =, narrowScope, (, scope, ,, assertedNode, ,, narrowed, ), ;, }, }]
[), ), {, scope, =, narrowScope, (, scope, ,, assertedNode, ,, narrowed, ), ;, }, }, callNode, ., setJSType, (]
[=, narrowScope, (, scope, ,, assertedNode, ,, narrowed, ), ;, }, }, callNode, ., setJSType, (, narrowed, ), ;, return]
[;, }, }, callNode, ., setJSType, (, narrowed, ), ;, return, scope, ;, }, private, FlowScope, narrowScope, (, FlowScope, scope]
[,, assertedNode, ,, narrowed, ), ;, }, }, callNode, ., setJSType, (, narrowed, ), ;, return, scope, ;, }, private]
[,, narrowed, ), ;, }, }, callNode, ., setJSType, (, narrowed, ), ;, return, scope, ;, }, private, FlowScope, narrowScope]
[), ;, }, }, callNode, ., setJSType, (, narrowed, ), ;, return, scope, ;, }, private, FlowScope, narrowScope, (, FlowScope]
[;, return, scope, ;, }, private, FlowScope, narrowScope, (, FlowScope, scope, ,, Node, node, ,, JSType, narrowed, ), {, if]
[., setJSType, (, narrowed, ), ;, return, scope, ;, }, private, FlowScope, narrowScope, (, FlowScope, scope, ,, Node, node, ,]
[), ;, return, scope, ;, }, private, FlowScope, narrowScope, (, FlowScope, scope, ,, Node, node, ,, JSType, narrowed, ), {]
[;, }, private, FlowScope, narrowScope, (, FlowScope, scope, ,, Node, node, ,, JSType, narrowed, ), {, if, (, node, .]
[), {, return, scope, ;, }, scope, =, scope, ., createChildFlowScope, (, ), ;, if, (, node, ., isGetProp, (]
[., isThis, (, ), ), {, return, scope, ;, }, scope, =, scope, ., createChildFlowScope, (, ), ;, if, (]
[;, }, scope, =, scope, ., createChildFlowScope, (, ), ;, if, (, node, ., isGetProp, (, ), ), {, scope]
[=, scope, ., createChildFlowScope, (, ), ;, if, (, node, ., isGetProp, (, ), ), {, scope, ., inferQualifiedSlot, (]
[;, if, (, node, ., isGetProp, (, ), ), {, scope, ., inferQualifiedSlot, (, node, ,, node, ., getQualifiedName, (]
[., createChildFlowScope, (, ), ;, if, (, node, ., isGetProp, (, ), ), {, scope, ., inferQualifiedSlot, (, node, ,]
[), {, scope, ., inferQualifiedSlot, (, node, ,, node, ., getQualifiedName, (, ), ,, getJSType, (, node, ), ,, narrowed]
[., isGetProp, (, ), ), {, scope, ., inferQualifiedSlot, (, node, ,, node, ., getQualifiedName, (, ), ,, getJSType, (]
[;, }, else, {, redeclareSimpleVar, (, scope, ,, node, ,, narrowed, ), ;, }, return, scope, ;, }, private, void]
[., inferQualifiedSlot, (, node, ,, node, ., getQualifiedName, (, ), ,, getJSType, (, node, ), ,, narrowed, ), ;, }]
[,, node, ., getQualifiedName, (, ), ,, getJSType, (, node, ), ,, narrowed, ), ;, }, else, {, redeclareSimpleVar, (]
[,, getJSType, (, node, ), ,, narrowed, ), ;, }, else, {, redeclareSimpleVar, (, scope, ,, node, ,, narrowed, )]
[., getQualifiedName, (, ), ,, getJSType, (, node, ), ,, narrowed, ), ;, }, else, {, redeclareSimpleVar, (, scope, ,]
[,, narrowed, ), ;, }, else, {, redeclareSimpleVar, (, scope, ,, node, ,, narrowed, ), ;, }, return, scope, ;]
[), ,, narrowed, ), ;, }, else, {, redeclareSimpleVar, (, scope, ,, node, ,, narrowed, ), ;, }, return, scope]
[), ;, }, else, {, redeclareSimpleVar, (, scope, ,, node, ,, narrowed, ), ;, }, return, scope, ;, }, private]
[;, }, return, scope, ;, }, private, void, backwardsInferenceFromCallSite, (, Node, n, ,, FunctionType, fnType, ), {, boolean, updatedFnType, =]
[,, node, ,, narrowed, ), ;, }, return, scope, ;, }, private, void, backwardsInferenceFromCallSite, (, Node, n, ,, FunctionType, fnType]
[,, narrowed, ), ;, }, return, scope, ;, }, private, void, backwardsInferenceFromCallSite, (, Node, n, ,, FunctionType, fnType, ), {]
[), ;, }, return, scope, ;, }, private, void, backwardsInferenceFromCallSite, (, Node, n, ,, FunctionType, fnType, ), {, boolean, updatedFnType]
[;, }, private, void, backwardsInferenceFromCallSite, (, Node, n, ,, FunctionType, fnType, ), {, boolean, updatedFnType, =, inferTemplatedTypesForCall, (, n, ,]
[;, if, (, updatedFnType, ), {, fnType, =, n, ., getFirstChild, (, ), ., getJSType, (, ), ., toMaybeFunctionType, (]
[,, fnType, ), ;, if, (, updatedFnType, ), {, fnType, =, n, ., getFirstChild, (, ), ., getJSType, (, )]
[), ;, if, (, updatedFnType, ), {, fnType, =, n, ., getFirstChild, (, ), ., getJSType, (, ), ., toMaybeFunctionType]
[), {, fnType, =, n, ., getFirstChild, (, ), ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, }, updateTypeOfParameters]
[=, n, ., getFirstChild, (, ), ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, }, updateTypeOfParameters, (, n, ,]
[;, }, updateTypeOfParameters, (, n, ,, fnType, ), ;, updateBind, (, n, ,, fnType, ), ;, }, private, void, updateBind]
[., toMaybeFunctionType, (, ), ;, }, updateTypeOfParameters, (, n, ,, fnType, ), ;, updateBind, (, n, ,, fnType, ), ;]
[., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, }, updateTypeOfParameters, (, n, ,, fnType, ), ;, updateBind, (, n]
[., getFirstChild, (, ), ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, }, updateTypeOfParameters, (, n, ,, fnType, )]
[;, updateBind, (, n, ,, fnType, ), ;, }, private, void, updateBind, (, Node, n, ,, FunctionType, fnType, ), {]
[,, fnType, ), ;, updateBind, (, n, ,, fnType, ), ;, }, private, void, updateBind, (, Node, n, ,, FunctionType]
[), ;, updateBind, (, n, ,, fnType, ), ;, }, private, void, updateBind, (, Node, n, ,, FunctionType, fnType, )]
[;, }, private, void, updateBind, (, Node, n, ,, FunctionType, fnType, ), {, CodingConvention, ., Bind, bind, =, compiler, .]
[,, fnType, ), ;, }, private, void, updateBind, (, Node, n, ,, FunctionType, fnType, ), {, CodingConvention, ., Bind, bind]
[), ;, }, private, void, updateBind, (, Node, n, ,, FunctionType, fnType, ), {, CodingConvention, ., Bind, bind, =, compiler]
[;, if, (, bind, ==, null, ), {, return, ;, }, FunctionType, callTargetFn, =, getJSType, (, bind, ., target, )]
[., describeFunctionBind, (, n, ,, true, ), ;, if, (, bind, ==, null, ), {, return, ;, }, FunctionType, callTargetFn]
[., getCodingConvention, (, ), ., describeFunctionBind, (, n, ,, true, ), ;, if, (, bind, ==, null, ), {, return]
[,, true, ), ;, if, (, bind, ==, null, ), {, return, ;, }, FunctionType, callTargetFn, =, getJSType, (, bind]
[), ;, if, (, bind, ==, null, ), {, return, ;, }, FunctionType, callTargetFn, =, getJSType, (, bind, ., target]
[), {, return, ;, }, FunctionType, callTargetFn, =, getJSType, (, bind, ., target, ), ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType]
[==, null, ), {, return, ;, }, FunctionType, callTargetFn, =, getJSType, (, bind, ., target, ), ., restrictByNotNullOrUndefined, (, )]
[), {, return, ;, }, FunctionType, callTargetFn, =, getJSType, (, bind, ., target, ), ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType]
[;, if, (, callTargetFn, ==, null, ), {, return, ;, }, n, ., setJSType, (, callTargetFn, ., getBindReturnType, (, bind]
[., toMaybeFunctionType, (, ), ;, if, (, callTargetFn, ==, null, ), {, return, ;, }, n, ., setJSType, (, callTargetFn]
[., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, callTargetFn, ==, null, ), {, return, ;, }, n]
[), ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, callTargetFn, ==, null, ), {, return, ;, }]
[., target, ), ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, callTargetFn, ==, null, ), {, return]
[), {, return, ;, }, n, ., setJSType, (, callTargetFn, ., getBindReturnType, (, bind, ., getBoundParameterCount, (, ), +, 1]
[==, null, ), {, return, ;, }, n, ., setJSType, (, callTargetFn, ., getBindReturnType, (, bind, ., getBoundParameterCount, (, )]
[), {, return, ;, }, n, ., setJSType, (, callTargetFn, ., getBindReturnType, (, bind, ., getBoundParameterCount, (, ), +, 1]
[;, }, private, void, updateTypeOfParameters, (, Node, n, ,, FunctionType, fnType, ), {, int, i, =, 0, ;, int, childCount]
[., setJSType, (, callTargetFn, ., getBindReturnType, (, bind, ., getBoundParameterCount, (, ), +, 1, ), ), ;, }, private, void]
[), ;, }, private, void, updateTypeOfParameters, (, Node, n, ,, FunctionType, fnType, ), {, int, i, =, 0, ;, int]
[., getBindReturnType, (, bind, ., getBoundParameterCount, (, ), +, 1, ), ), ;, }, private, void, updateTypeOfParameters, (, Node, n]
[), ), ;, }, private, void, updateTypeOfParameters, (, Node, n, ,, FunctionType, fnType, ), {, int, i, =, 0, ;]
[+, 1, ), ), ;, }, private, void, updateTypeOfParameters, (, Node, n, ,, FunctionType, fnType, ), {, int, i, =]
[., getBoundParameterCount, (, ), +, 1, ), ), ;, }, private, void, updateTypeOfParameters, (, Node, n, ,, FunctionType, fnType, )]
[), ), ;, }, private, void, updateTypeOfParameters, (, Node, n, ,, FunctionType, fnType, ), {, int, i, =, 0, ;]
[;, int, childCount, =, n, ., getChildCount, (, ), ;, for, (, Node, iParameter, :, fnType, ., getParameters, (, )]
[;, for, (, Node, iParameter, :, fnType, ., getParameters, (, ), ), {, if, (, i, +, 1, >=, childCount]
[., getChildCount, (, ), ;, for, (, Node, iParameter, :, fnType, ., getParameters, (, ), ), {, if, (, i]
[), {, if, (, i, +, 1, >=, childCount, ), {, return, ;, }, JSType, iParameterType, =, getJSType, (, iParameter]
[., getParameters, (, ), ), {, if, (, i, +, 1, >=, childCount, ), {, return, ;, }, JSType, iParameterType]
[), {, return, ;, }, JSType, iParameterType, =, getJSType, (, iParameter, ), ;, Node, iArgument, =, n, ., getChildAtIndex, (]
[>=, childCount, ), {, return, ;, }, JSType, iParameterType, =, getJSType, (, iParameter, ), ;, Node, iArgument, =, n, .]
[+, 1, >=, childCount, ), {, return, ;, }, JSType, iParameterType, =, getJSType, (, iParameter, ), ;, Node, iArgument, =]
[>=, childCount, ), {, return, ;, }, JSType, iParameterType, =, getJSType, (, iParameter, ), ;, Node, iArgument, =, n, .]
[), {, return, ;, }, JSType, iParameterType, =, getJSType, (, iParameter, ), ;, Node, iArgument, =, n, ., getChildAtIndex, (]
[;, Node, iArgument, =, n, ., getChildAtIndex, (, i, +, 1, ), ;, JSType, iArgumentType, =, getJSType, (, iArgument, )]
[), ;, Node, iArgument, =, n, ., getChildAtIndex, (, i, +, 1, ), ;, JSType, iArgumentType, =, getJSType, (, iArgument]
[;, JSType, iArgumentType, =, getJSType, (, iArgument, ), ;, inferPropertyTypesToMatchConstraint, (, iArgumentType, ,, iParameterType, ), ;, JSType, restrictedParameter, =, iParameterType]
[., getChildAtIndex, (, i, +, 1, ), ;, JSType, iArgumentType, =, getJSType, (, iArgument, ), ;, inferPropertyTypesToMatchConstraint, (, iArgumentType, ,]
[), ;, JSType, iArgumentType, =, getJSType, (, iArgument, ), ;, inferPropertyTypesToMatchConstraint, (, iArgumentType, ,, iParameterType, ), ;, JSType, restrictedParameter, =]
[+, 1, ), ;, JSType, iArgumentType, =, getJSType, (, iArgument, ), ;, inferPropertyTypesToMatchConstraint, (, iArgumentType, ,, iParameterType, ), ;, JSType]
[), ;, JSType, iArgumentType, =, getJSType, (, iArgument, ), ;, inferPropertyTypesToMatchConstraint, (, iArgumentType, ,, iParameterType, ), ;, JSType, restrictedParameter, =]
[;, inferPropertyTypesToMatchConstraint, (, iArgumentType, ,, iParameterType, ), ;, JSType, restrictedParameter, =, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, )]
[), ;, inferPropertyTypesToMatchConstraint, (, iArgumentType, ,, iParameterType, ), ;, JSType, restrictedParameter, =, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (]
[;, JSType, restrictedParameter, =, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter, !=, null, )]
[,, iParameterType, ), ;, JSType, restrictedParameter, =, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter]
[), ;, JSType, restrictedParameter, =, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter, !=, null]
[;, if, (, restrictedParameter, !=, null, ), {, if, (, iArgument, ., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (]
[., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter, !=, null, ), {, if, (, iArgument, ., isFunction, (, ), &&]
[., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter, !=, null, ), {, if, (, iArgument, .]
[), {, if, (, iArgument, ., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, ), &&, iArgument, ., getJSDocInfo, (]
[!=, null, ), {, if, (, iArgument, ., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, ), &&, iArgument, .]
[), {, if, (, iArgument, ., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, ), &&, iArgument, ., getJSDocInfo, (]
[), {, iArgument, ., setJSType, (, restrictedParameter, ), ;, }, }, i, ++, ;, }, }, private, Map, <, TemplateType]
[&&, iArgument, ., getJSDocInfo, (, ), ==, null, ), {, iArgument, ., setJSType, (, restrictedParameter, ), ;, }, }, i]
[&&, iArgumentType, ., isFunctionType, (, ), &&, iArgument, ., getJSDocInfo, (, ), ==, null, ), {, iArgument, ., setJSType, (]
[., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, ), &&, iArgument, ., getJSDocInfo, (, ), ==, null, ), {]
[&&, iArgument, ., getJSDocInfo, (, ), ==, null, ), {, iArgument, ., setJSType, (, restrictedParameter, ), ;, }, }, i]
[., isFunctionType, (, ), &&, iArgument, ., getJSDocInfo, (, ), ==, null, ), {, iArgument, ., setJSType, (, restrictedParameter, )]
[), {, iArgument, ., setJSType, (, restrictedParameter, ), ;, }, }, i, ++, ;, }, }, private, Map, <, TemplateType]
[==, null, ), {, iArgument, ., setJSType, (, restrictedParameter, ), ;, }, }, i, ++, ;, }, }, private, Map]
[., getJSDocInfo, (, ), ==, null, ), {, iArgument, ., setJSType, (, restrictedParameter, ), ;, }, }, i, ++, ;]
[), {, iArgument, ., setJSType, (, restrictedParameter, ), ;, }, }, i, ++, ;, }, }, private, Map, <, TemplateType]
[;, }, }, i, ++, ;, }, }, private, Map, <, TemplateType, ,, JSType, >, inferTemplateTypesFromParameters, (, FunctionType, fnType, ,]
[., setJSType, (, restrictedParameter, ), ;, }, }, i, ++, ;, }, }, private, Map, <, TemplateType, ,, JSType, >]
[), ;, }, }, i, ++, ;, }, }, private, Map, <, TemplateType, ,, JSType, >, inferTemplateTypesFromParameters, (, FunctionType, fnType]
[;, }, }, private, Map, <, TemplateType, ,, JSType, >, inferTemplateTypesFromParameters, (, FunctionType, fnType, ,, Node, call, ), {, if]
[++, ;, }, }, private, Map, <, TemplateType, ,, JSType, >, inferTemplateTypesFromParameters, (, FunctionType, fnType, ,, Node, call, ), {]
[), {, return, Collections, ., emptyMap, (, ), ;, }, Map, <, TemplateType, ,, JSType, >, resolvedTypes, =, Maps, .]
[., isEmpty, (, ), ), {, return, Collections, ., emptyMap, (, ), ;, }, Map, <, TemplateType, ,, JSType, >]
[., getTemplateKeys, (, ), ., isEmpty, (, ), ), {, return, Collections, ., emptyMap, (, ), ;, }, Map, <]
[;, }, Map, <, TemplateType, ,, JSType, >, resolvedTypes, =, Maps, ., newIdentityHashMap, (, ), ;, Node, callTarget, =, call]
[., emptyMap, (, ), ;, }, Map, <, TemplateType, ,, JSType, >, resolvedTypes, =, Maps, ., newIdentityHashMap, (, ), ;]
[;, Node, callTarget, =, call, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {]
[., newIdentityHashMap, (, ), ;, Node, callTarget, =, call, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (]
[;, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, Node, obj, =, callTarget, ., getFirstChild, (, ), ;]
[., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, Node, obj, =, callTarget, .]
[), {, Node, obj, =, callTarget, ., getFirstChild, (, ), ;, maybeResolveTemplatedType, (, fnType, ., getTypeOfThis, (, ), ,, getJSType]
[., isGet, (, callTarget, ), ), {, Node, obj, =, callTarget, ., getFirstChild, (, ), ;, maybeResolveTemplatedType, (, fnType, .]
[), ), {, Node, obj, =, callTarget, ., getFirstChild, (, ), ;, maybeResolveTemplatedType, (, fnType, ., getTypeOfThis, (, ), ,]
[;, maybeResolveTemplatedType, (, fnType, ., getTypeOfThis, (, ), ,, getJSType, (, obj, ), ,, resolvedTypes, ), ;, }, if, (]
[., getFirstChild, (, ), ;, maybeResolveTemplatedType, (, fnType, ., getTypeOfThis, (, ), ,, getJSType, (, obj, ), ,, resolvedTypes, )]
[;, }, if, (, call, ., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters, (, ), ,, call]
[,, getJSType, (, obj, ), ,, resolvedTypes, ), ;, }, if, (, call, ., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes]
[., getTypeOfThis, (, ), ,, getJSType, (, obj, ), ,, resolvedTypes, ), ;, }, if, (, call, ., hasMoreThanOneChild, (]
[,, resolvedTypes, ), ;, }, if, (, call, ., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters, (]
[), ,, resolvedTypes, ), ;, }, if, (, call, ., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters]
[), ;, }, if, (, call, ., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters, (, ), ,]
[), {, maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters, (, ), ,, call, ., getChildAtIndex, (, 1, ), ., siblings, (, )]
[., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters, (, ), ,, call, ., getChildAtIndex, (, 1, )]
[;, }, return, resolvedTypes, ;, }, private, void, maybeResolveTemplatedType, (, JSType, paramType, ,, JSType, argType, ,, Map, <, TemplateType, ,]
[,, call, ., getChildAtIndex, (, 1, ), ., siblings, (, ), ,, resolvedTypes, ), ;, }, return, resolvedTypes, ;, }]
[., getParameters, (, ), ,, call, ., getChildAtIndex, (, 1, ), ., siblings, (, ), ,, resolvedTypes, ), ;, }]
[,, resolvedTypes, ), ;, }, return, resolvedTypes, ;, }, private, void, maybeResolveTemplatedType, (, JSType, paramType, ,, JSType, argType, ,, Map]
[., siblings, (, ), ,, resolvedTypes, ), ;, }, return, resolvedTypes, ;, }, private, void, maybeResolveTemplatedType, (, JSType, paramType, ,]
[., getChildAtIndex, (, 1, ), ., siblings, (, ), ,, resolvedTypes, ), ;, }, return, resolvedTypes, ;, }, private, void]
[), ., siblings, (, ), ,, resolvedTypes, ), ;, }, return, resolvedTypes, ;, }, private, void, maybeResolveTemplatedType, (, JSType, paramType]
[), ;, }, return, resolvedTypes, ;, }, private, void, maybeResolveTemplatedType, (, JSType, paramType, ,, JSType, argType, ,, Map, <, TemplateType]
[;, }, private, void, maybeResolveTemplatedType, (, JSType, paramType, ,, JSType, argType, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, )]
[), {, resolvedTemplateType, (, resolvedTypes, ,, paramType, ., toMaybeTemplateType, (, ), ,, argType, ), ;, }, else, if, (, paramType]
[., isTemplateType, (, ), ), {, resolvedTemplateType, (, resolvedTypes, ,, paramType, ., toMaybeTemplateType, (, ), ,, argType, ), ;, }]
[;, }, else, if, (, paramType, ., isUnionType, (, ), ), {, UnionType, unionType, =, paramType, ., toMaybeUnionType, (, )]
[,, paramType, ., toMaybeTemplateType, (, ), ,, argType, ), ;, }, else, if, (, paramType, ., isUnionType, (, ), )]
[,, argType, ), ;, }, else, if, (, paramType, ., isUnionType, (, ), ), {, UnionType, unionType, =, paramType, .]
[., toMaybeTemplateType, (, ), ,, argType, ), ;, }, else, if, (, paramType, ., isUnionType, (, ), ), {, UnionType]
[), ;, }, else, if, (, paramType, ., isUnionType, (, ), ), {, UnionType, unionType, =, paramType, ., toMaybeUnionType, (]
[), {, UnionType, unionType, =, paramType, ., toMaybeUnionType, (, ), ;, for, (, JSType, alernative, :, unionType, ., getAlternates, (]
[., isUnionType, (, ), ), {, UnionType, unionType, =, paramType, ., toMaybeUnionType, (, ), ;, for, (, JSType, alernative, :]
[;, for, (, JSType, alernative, :, unionType, ., getAlternates, (, ), ), {, maybeResolveTemplatedType, (, alernative, ,, argType, ,, resolvedTypes]
[., toMaybeUnionType, (, ), ;, for, (, JSType, alernative, :, unionType, ., getAlternates, (, ), ), {, maybeResolveTemplatedType, (, alernative]
[), {, maybeResolveTemplatedType, (, alernative, ,, argType, ,, resolvedTypes, ), ;, }, }, else, if, (, paramType, ., isFunctionType, (]
[., getAlternates, (, ), ), {, maybeResolveTemplatedType, (, alernative, ,, argType, ,, resolvedTypes, ), ;, }, }, else, if, (]
[;, }, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, FunctionType, paramFunctionType, =, paramType, ., toMaybeFunctionType, (]
[,, argType, ,, resolvedTypes, ), ;, }, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, FunctionType, paramFunctionType]
[,, resolvedTypes, ), ;, }, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, FunctionType, paramFunctionType, =, paramType]
[), ;, }, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, FunctionType, paramFunctionType, =, paramType, ., toMaybeFunctionType]
[), {, FunctionType, paramFunctionType, =, paramType, ., toMaybeFunctionType, (, ), ;, FunctionType, argFunctionType, =, argType, ., restrictByNotNullOrUndefined, (, ), .]
[., isFunctionType, (, ), ), {, FunctionType, paramFunctionType, =, paramType, ., toMaybeFunctionType, (, ), ;, FunctionType, argFunctionType, =, argType, .]
[;, FunctionType, argFunctionType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[., toMaybeFunctionType, (, ), ;, FunctionType, argFunctionType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeFunctionType, (]
[;, if, (, argFunctionType, !=, null, &&, argFunctionType, ., isSubtype, (, paramType, ), ), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis]
[., toMaybeFunctionType, (, ), ;, if, (, argFunctionType, !=, null, &&, argFunctionType, ., isSubtype, (, paramType, ), ), {, maybeResolveTemplatedType]
[., collapseUnion, (, ), ., toMaybeFunctionType, (, ), ;, if, (, argFunctionType, !=, null, &&, argFunctionType, ., isSubtype, (, paramType]
[., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeFunctionType, (, ), ;, if, (, argFunctionType, !=, null, &&, argFunctionType]
[), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplatedType]
[&&, argFunctionType, ., isSubtype, (, paramType, ), ), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis]
[!=, null, &&, argFunctionType, ., isSubtype, (, paramType, ), ), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType]
[&&, argFunctionType, ., isSubtype, (, paramType, ), ), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis]
[), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplatedType]
[., isSubtype, (, paramType, ), ), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis, (, )]
[), ), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis, (, ), ,, resolvedTypes, ), ;]
[;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,, argFunctionType, ., getReturnType, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplateTypeFromNodes, (]
[,, argFunctionType, ., getTypeOfThis, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,, argFunctionType, .]
[., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (]
[,, resolvedTypes, ), ;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,, argFunctionType, ., getReturnType, (, ), ,, resolvedTypes, )]
[., getTypeOfThis, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,, argFunctionType, ., getReturnType, (]
[), ;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,, argFunctionType, ., getReturnType, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplateTypeFromNodes]
[;, maybeResolveTemplateTypeFromNodes, (, paramFunctionType, ., getParameters, (, ), ,, argFunctionType, ., getParameters, (, ), ,, resolvedTypes, ), ;, }, }]
[,, argFunctionType, ., getReturnType, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplateTypeFromNodes, (, paramFunctionType, ., getParameters, (, ), ,, argFunctionType, .]
[., getReturnType, (, ), ,, argFunctionType, ., getReturnType, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplateTypeFromNodes, (, paramFunctionType, ., getParameters, (]
[,, resolvedTypes, ), ;, maybeResolveTemplateTypeFromNodes, (, paramFunctionType, ., getParameters, (, ), ,, argFunctionType, ., getParameters, (, ), ,, resolvedTypes, )]
[., getReturnType, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplateTypeFromNodes, (, paramFunctionType, ., getParameters, (, ), ,, argFunctionType, ., getParameters, (]
[), ;, maybeResolveTemplateTypeFromNodes, (, paramFunctionType, ., getParameters, (, ), ,, argFunctionType, ., getParameters, (, ), ,, resolvedTypes, ), ;, }]
[;, }, }, else, if, (, paramType, ., isParameterizedType, (, ), ), {, ParameterizedType, paramObjectType, =, paramType, ., toMaybeParameterizedType, (]
[,, argFunctionType, ., getParameters, (, ), ,, resolvedTypes, ), ;, }, }, else, if, (, paramType, ., isParameterizedType, (, )]
[., getParameters, (, ), ,, argFunctionType, ., getParameters, (, ), ,, resolvedTypes, ), ;, }, }, else, if, (, paramType]
[,, resolvedTypes, ), ;, }, }, else, if, (, paramType, ., isParameterizedType, (, ), ), {, ParameterizedType, paramObjectType, =, paramType]
[., getParameters, (, ), ,, resolvedTypes, ), ;, }, }, else, if, (, paramType, ., isParameterizedType, (, ), ), {]
[), ;, }, }, else, if, (, paramType, ., isParameterizedType, (, ), ), {, ParameterizedType, paramObjectType, =, paramType, ., toMaybeParameterizedType]
[), {, ParameterizedType, paramObjectType, =, paramType, ., toMaybeParameterizedType, (, ), ;, JSType, typeParameter, =, paramObjectType, ., getParameterType, (, ), ;]
[., isParameterizedType, (, ), ), {, ParameterizedType, paramObjectType, =, paramType, ., toMaybeParameterizedType, (, ), ;, JSType, typeParameter, =, paramObjectType, .]
[;, JSType, typeParameter, =, paramObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, typeParameter, ), ;, if, (, typeParameter]
[., toMaybeParameterizedType, (, ), ;, JSType, typeParameter, =, paramObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, typeParameter, )]
[;, Preconditions, ., checkNotNull, (, typeParameter, ), ;, if, (, typeParameter, !=, null, ), {, ObjectType, argObjectType, =, argType, .]
[., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, typeParameter, ), ;, if, (, typeParameter, !=, null, ), {, ObjectType]
[;, if, (, typeParameter, !=, null, ), {, ObjectType, argObjectType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, )]
[., checkNotNull, (, typeParameter, ), ;, if, (, typeParameter, !=, null, ), {, ObjectType, argObjectType, =, argType, ., restrictByNotNullOrUndefined, (]
[), ;, if, (, typeParameter, !=, null, ), {, ObjectType, argObjectType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (]
[), {, ObjectType, argObjectType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, ), ;, if]
[!=, null, ), {, ObjectType, argObjectType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, )]
[), {, ObjectType, argObjectType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, ), ;, if]
[;, if, (, argObjectType, !=, null, &&, argObjectType, ., isSubtype, (, paramType, ), ), {, JSType, argTypeParameter, =, argObjectType, .]
[., toMaybeParameterizedType, (, ), ;, if, (, argObjectType, !=, null, &&, argObjectType, ., isSubtype, (, paramType, ), ), {, JSType]
[., collapseUnion, (, ), ., toMaybeParameterizedType, (, ), ;, if, (, argObjectType, !=, null, &&, argObjectType, ., isSubtype, (, paramType]
[., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, ), ;, if, (, argObjectType, !=, null, &&, argObjectType]
[), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, argTypeParameter, ), ;, maybeResolveTemplatedType, (]
[&&, argObjectType, ., isSubtype, (, paramType, ), ), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;, Preconditions, .]
[!=, null, &&, argObjectType, ., isSubtype, (, paramType, ), ), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;]
[&&, argObjectType, ., isSubtype, (, paramType, ), ), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;, Preconditions, .]
[), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, argTypeParameter, ), ;, maybeResolveTemplatedType, (]
[., isSubtype, (, paramType, ), ), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (]
[), ), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, argTypeParameter, ), ;, maybeResolveTemplatedType]
[;, Preconditions, ., checkNotNull, (, argTypeParameter, ), ;, maybeResolveTemplatedType, (, typeParameter, ,, argTypeParameter, ,, resolvedTypes, ), ;, }, }, }]
[., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, argTypeParameter, ), ;, maybeResolveTemplatedType, (, typeParameter, ,, argTypeParameter, ,, resolvedTypes, )]
[;, maybeResolveTemplatedType, (, typeParameter, ,, argTypeParameter, ,, resolvedTypes, ), ;, }, }, }, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterable, <]
[., checkNotNull, (, argTypeParameter, ), ;, maybeResolveTemplatedType, (, typeParameter, ,, argTypeParameter, ,, resolvedTypes, ), ;, }, }, }, }, private]
[), ;, maybeResolveTemplatedType, (, typeParameter, ,, argTypeParameter, ,, resolvedTypes, ), ;, }, }, }, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterable]
[;, }, }, }, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterable, <, Node, >, declParams, ,, Iterable, <, Node, >, callParams]
[,, argTypeParameter, ,, resolvedTypes, ), ;, }, }, }, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterable, <, Node, >, declParams, ,]
[,, resolvedTypes, ), ;, }, }, }, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterable, <, Node, >, declParams, ,, Iterable, <]
[), ;, }, }, }, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterable, <, Node, >, declParams, ,, Iterable, <, Node, >]
[;, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterator, <, Node, >, declParams, ,, Iterator, <, Node, >, callParams, ,, Map, <]
[,, callParams, ., iterator, (, ), ,, resolvedTypes, ), ;, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterator, <, Node, >, declParams]
[., iterator, (, ), ,, callParams, ., iterator, (, ), ,, resolvedTypes, ), ;, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterator]
[,, resolvedTypes, ), ;, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterator, <, Node, >, declParams, ,, Iterator, <, Node, >, callParams]
[., iterator, (, ), ,, resolvedTypes, ), ;, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterator, <, Node, >, declParams, ,, Iterator]
[), ;, }, private, void, maybeResolveTemplateTypeFromNodes, (, Iterator, <, Node, >, declParams, ,, Iterator, <, Node, >, callParams, ,, Map]
[), {, Node, declParam, =, declParams, ., next, (, ), ;, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (]
[&&, callParams, ., hasNext, (, ), ), {, Node, declParam, =, declParams, ., next, (, ), ;, maybeResolveTemplatedType, (, getJSType]
[., hasNext, (, ), &&, callParams, ., hasNext, (, ), ), {, Node, declParam, =, declParams, ., next, (, )]
[), {, Node, declParam, =, declParams, ., next, (, ), ;, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (]
[., hasNext, (, ), ), {, Node, declParam, =, declParams, ., next, (, ), ;, maybeResolveTemplatedType, (, getJSType, (, declParam]
[;, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (, callParams, ., next, (, ), ), ,, resolvedTypes, ), ;]
[., next, (, ), ;, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (, callParams, ., next, (, ), )]
[;, if, (, declParam, ., isVarArgs, (, ), ), {, while, (, callParams, ., hasNext, (, ), ), {, maybeResolveTemplatedType]
[,, getJSType, (, callParams, ., next, (, ), ), ,, resolvedTypes, ), ;, if, (, declParam, ., isVarArgs, (, )]
[), ,, getJSType, (, callParams, ., next, (, ), ), ,, resolvedTypes, ), ;, if, (, declParam, ., isVarArgs, (]
[,, resolvedTypes, ), ;, if, (, declParam, ., isVarArgs, (, ), ), {, while, (, callParams, ., hasNext, (, )]
[), ,, resolvedTypes, ), ;, if, (, declParam, ., isVarArgs, (, ), ), {, while, (, callParams, ., hasNext, (]
[., next, (, ), ), ,, resolvedTypes, ), ;, if, (, declParam, ., isVarArgs, (, ), ), {, while, (]
[), ;, if, (, declParam, ., isVarArgs, (, ), ), {, while, (, callParams, ., hasNext, (, ), ), {]
[), {, while, (, callParams, ., hasNext, (, ), ), {, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (]
[., isVarArgs, (, ), ), {, while, (, callParams, ., hasNext, (, ), ), {, maybeResolveTemplatedType, (, getJSType, (, declParam]
[), {, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (, callParams, ., next, (, ), ), ,, resolvedTypes, )]
[., hasNext, (, ), ), {, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (, callParams, ., next, (, )]
[;, }, }, }, }, private, void, resolvedTemplateType, (, Map, <, TemplateType, ,, JSType, >, map, ,, TemplateType, template, ,]
[,, getJSType, (, callParams, ., next, (, ), ), ,, resolvedTypes, ), ;, }, }, }, }, private, void, resolvedTemplateType]
[), ,, getJSType, (, callParams, ., next, (, ), ), ,, resolvedTypes, ), ;, }, }, }, }, private, void]
[,, resolvedTypes, ), ;, }, }, }, }, private, void, resolvedTemplateType, (, Map, <, TemplateType, ,, JSType, >, map, ,]
[), ,, resolvedTypes, ), ;, }, }, }, }, private, void, resolvedTemplateType, (, Map, <, TemplateType, ,, JSType, >, map]
[., next, (, ), ), ,, resolvedTypes, ), ;, }, }, }, }, private, void, resolvedTemplateType, (, Map, <, TemplateType]
[), ;, }, }, }, }, private, void, resolvedTemplateType, (, Map, <, TemplateType, ,, JSType, >, map, ,, TemplateType, template]
[;, if, (, !, resolved, ., isUnknownType, (, ), ), {, if, (, previous, ==, null, ), {, map, .]
[., get, (, template, ), ;, if, (, !, resolved, ., isUnknownType, (, ), ), {, if, (, previous, ==]
[), ;, if, (, !, resolved, ., isUnknownType, (, ), ), {, if, (, previous, ==, null, ), {, map]
[), {, if, (, previous, ==, null, ), {, map, ., put, (, template, ,, resolved, ), ;, }, else]
[), {, if, (, previous, ==, null, ), {, map, ., put, (, template, ,, resolved, ), ;, }, else]
[., isUnknownType, (, ), ), {, if, (, previous, ==, null, ), {, map, ., put, (, template, ,, resolved]
[), {, map, ., put, (, template, ,, resolved, ), ;, }, else, {, JSType, join, =, previous, ., getLeastSupertype]
[==, null, ), {, map, ., put, (, template, ,, resolved, ), ;, }, else, {, JSType, join, =, previous]
[), {, map, ., put, (, template, ,, resolved, ), ;, }, else, {, JSType, join, =, previous, ., getLeastSupertype]
[;, }, else, {, JSType, join, =, previous, ., getLeastSupertype, (, resolved, ), ;, map, ., put, (, template, ,]
[., put, (, template, ,, resolved, ), ;, }, else, {, JSType, join, =, previous, ., getLeastSupertype, (, resolved, )]
[,, resolved, ), ;, }, else, {, JSType, join, =, previous, ., getLeastSupertype, (, resolved, ), ;, map, ., put]
[), ;, }, else, {, JSType, join, =, previous, ., getLeastSupertype, (, resolved, ), ;, map, ., put, (, template]
[;, map, ., put, (, template, ,, join, ), ;, }, }, }, private, static, class, TemplateTypeReplacer, extends, ModificationVisitor, {]
[., getLeastSupertype, (, resolved, ), ;, map, ., put, (, template, ,, join, ), ;, }, }, }, private, static]
[), ;, map, ., put, (, template, ,, join, ), ;, }, }, }, private, static, class, TemplateTypeReplacer, extends, ModificationVisitor]
[;, }, }, }, private, static, class, TemplateTypeReplacer, extends, ModificationVisitor, {, private, final, Map, <, TemplateType, ,, JSType, >, replacements]
[., put, (, template, ,, join, ), ;, }, }, }, private, static, class, TemplateTypeReplacer, extends, ModificationVisitor, {, private, final]
[,, join, ), ;, }, }, }, private, static, class, TemplateTypeReplacer, extends, ModificationVisitor, {, private, final, Map, <, TemplateType, ,]
[), ;, }, }, }, private, static, class, TemplateTypeReplacer, extends, ModificationVisitor, {, private, final, Map, <, TemplateType, ,, JSType, >]
[;, TemplateTypeReplacer, (, JSTypeRegistry, registry, ,, Map, <, TemplateType, ,, JSType, >, replacements, ), {, super, (, registry, ), ;]
[), ;, this, ., registry, =, registry, ;, this, ., replacements, =, replacements, ;, }, @, Override, public, JSType, caseTemplateType]
[=, registry, ;, this, ., replacements, =, replacements, ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, type, ), {]
[., registry, =, registry, ;, this, ., replacements, =, replacements, ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, type]
[;, this, ., replacements, =, replacements, ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, type, ), {, madeChanges, =]
[=, replacements, ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, type, ), {, madeChanges, =, true, ;, JSType, replacement]
[., replacements, =, replacements, ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, type, ), {, madeChanges, =, true, ;]
[;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, type, ), {, madeChanges, =, true, ;, JSType, replacement, =, replacements]
[=, true, ;, JSType, replacement, =, replacements, ., get, (, type, ), ;, return, replacement, !=, null, ?, replacement, :]
[;, JSType, replacement, =, replacements, ., get, (, type, ), ;, return, replacement, !=, null, ?, replacement, :, registry, .]
[;, return, replacement, !=, null, ?, replacement, :, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, boolean, inferTemplatedTypesForCall]
[., get, (, type, ), ;, return, replacement, !=, null, ?, replacement, :, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;]
[), ;, return, replacement, !=, null, ?, replacement, :, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, boolean]
[;, }, }, private, boolean, inferTemplatedTypesForCall, (, Node, n, ,, FunctionType, fnType, ), {, if, (, fnType, ., getTemplateKeys, (]
[?, replacement, :, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, boolean, inferTemplatedTypesForCall, (, Node, n, ,, FunctionType]
[!=, null, ?, replacement, :, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, boolean, inferTemplatedTypesForCall, (, Node, n]
[?, replacement, :, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, boolean, inferTemplatedTypesForCall, (, Node, n, ,, FunctionType]
[:, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, boolean, inferTemplatedTypesForCall, (, Node, n, ,, FunctionType, fnType, )]
[;, }, }, private, boolean, inferTemplatedTypesForCall, (, Node, n, ,, FunctionType, fnType, ), {, if, (, fnType, ., getTemplateKeys, (]
[., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, boolean, inferTemplatedTypesForCall, (, Node, n, ,, FunctionType, fnType, ), {, if]
[), ;, }, }, private, boolean, inferTemplatedTypesForCall, (, Node, n, ,, FunctionType, fnType, ), {, if, (, fnType, ., getTemplateKeys]
[), {, return, false, ;, }, Map, <, TemplateType, ,, JSType, >, inferred, =, inferTemplateTypesFromParameters, (, fnType, ,, n, )]
[., isEmpty, (, ), ), {, return, false, ;, }, Map, <, TemplateType, ,, JSType, >, inferred, =, inferTemplateTypesFromParameters, (]
[., getTemplateKeys, (, ), ., isEmpty, (, ), ), {, return, false, ;, }, Map, <, TemplateType, ,, JSType, >]
[;, }, Map, <, TemplateType, ,, JSType, >, inferred, =, inferTemplateTypesFromParameters, (, fnType, ,, n, ), ;, TemplateTypeReplacer, replacer, =]
[;, TemplateTypeReplacer, replacer, =, new, TemplateTypeReplacer, (, registry, ,, inferred, ), ;, Node, callTarget, =, n, ., getFirstChild, (, )]
[,, n, ), ;, TemplateTypeReplacer, replacer, =, new, TemplateTypeReplacer, (, registry, ,, inferred, ), ;, Node, callTarget, =, n, .]
[), ;, TemplateTypeReplacer, replacer, =, new, TemplateTypeReplacer, (, registry, ,, inferred, ), ;, Node, callTarget, =, n, ., getFirstChild, (]
[;, Node, callTarget, =, n, ., getFirstChild, (, ), ;, FunctionType, replacementFnType, =, fnType, ., visit, (, replacer, ), .]
[,, inferred, ), ;, Node, callTarget, =, n, ., getFirstChild, (, ), ;, FunctionType, replacementFnType, =, fnType, ., visit, (]
[), ;, Node, callTarget, =, n, ., getFirstChild, (, ), ;, FunctionType, replacementFnType, =, fnType, ., visit, (, replacer, )]
[;, FunctionType, replacementFnType, =, fnType, ., visit, (, replacer, ), ., toMaybeFunctionType, (, ), ;, Preconditions, ., checkNotNull, (, replacementFnType]
[., getFirstChild, (, ), ;, FunctionType, replacementFnType, =, fnType, ., visit, (, replacer, ), ., toMaybeFunctionType, (, ), ;, Preconditions]
[;, Preconditions, ., checkNotNull, (, replacementFnType, ), ;, callTarget, ., setJSType, (, replacementFnType, ), ;, n, ., setJSType, (, replacementFnType]
[., toMaybeFunctionType, (, ), ;, Preconditions, ., checkNotNull, (, replacementFnType, ), ;, callTarget, ., setJSType, (, replacementFnType, ), ;, n]
[., visit, (, replacer, ), ., toMaybeFunctionType, (, ), ;, Preconditions, ., checkNotNull, (, replacementFnType, ), ;, callTarget, ., setJSType]
[), ., toMaybeFunctionType, (, ), ;, Preconditions, ., checkNotNull, (, replacementFnType, ), ;, callTarget, ., setJSType, (, replacementFnType, ), ;]
[;, callTarget, ., setJSType, (, replacementFnType, ), ;, n, ., setJSType, (, replacementFnType, ., getReturnType, (, ), ), ;, return]
[., checkNotNull, (, replacementFnType, ), ;, callTarget, ., setJSType, (, replacementFnType, ), ;, n, ., setJSType, (, replacementFnType, ., getReturnType]
[), ;, callTarget, ., setJSType, (, replacementFnType, ), ;, n, ., setJSType, (, replacementFnType, ., getReturnType, (, ), ), ;]
[;, n, ., setJSType, (, replacementFnType, ., getReturnType, (, ), ), ;, return, replacer, ., madeChanges, ;, }, private, FlowScope]
[., setJSType, (, replacementFnType, ), ;, n, ., setJSType, (, replacementFnType, ., getReturnType, (, ), ), ;, return, replacer, .]
[), ;, n, ., setJSType, (, replacementFnType, ., getReturnType, (, ), ), ;, return, replacer, ., madeChanges, ;, }, private]
[;, return, replacer, ., madeChanges, ;, }, private, FlowScope, traverseNew, (, Node, n, ,, FlowScope, scope, ), {, scope, =]
[., setJSType, (, replacementFnType, ., getReturnType, (, ), ), ;, return, replacer, ., madeChanges, ;, }, private, FlowScope, traverseNew, (]
[), ;, return, replacer, ., madeChanges, ;, }, private, FlowScope, traverseNew, (, Node, n, ,, FlowScope, scope, ), {, scope]
[., getReturnType, (, ), ), ;, return, replacer, ., madeChanges, ;, }, private, FlowScope, traverseNew, (, Node, n, ,, FlowScope]
[;, }, private, FlowScope, traverseNew, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope]
[., madeChanges, ;, }, private, FlowScope, traverseNew, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n]
[=, traverseChildren, (, n, ,, scope, ), ;, Node, constructor, =, n, ., getFirstChild, (, ), ;, JSType, constructorType, =]
[;, Node, constructor, =, n, ., getFirstChild, (, ), ;, JSType, constructorType, =, constructor, ., getJSType, (, ), ;, JSType]
[,, scope, ), ;, Node, constructor, =, n, ., getFirstChild, (, ), ;, JSType, constructorType, =, constructor, ., getJSType, (]
[), ;, Node, constructor, =, n, ., getFirstChild, (, ), ;, JSType, constructorType, =, constructor, ., getJSType, (, ), ;]
[;, JSType, constructorType, =, constructor, ., getJSType, (, ), ;, JSType, type, =, null, ;, if, (, constructorType, !=, null]
[., getFirstChild, (, ), ;, JSType, constructorType, =, constructor, ., getJSType, (, ), ;, JSType, type, =, null, ;, if]
[;, JSType, type, =, null, ;, if, (, constructorType, !=, null, ), {, constructorType, =, constructorType, ., restrictByNotNullOrUndefined, (, )]
[., getJSType, (, ), ;, JSType, type, =, null, ;, if, (, constructorType, !=, null, ), {, constructorType, =, constructorType]
[;, if, (, constructorType, !=, null, ), {, constructorType, =, constructorType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, constructorType, .]
[), {, constructorType, =, constructorType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, constructorType, ., isUnknownType, (, ), ), {, type]
[!=, null, ), {, constructorType, =, constructorType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, constructorType, ., isUnknownType, (, ), )]
[), {, constructorType, =, constructorType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, constructorType, ., isUnknownType, (, ), ), {, type]
[=, constructorType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, constructorType, ., isUnknownType, (, ), ), {, type, =, unknownType, ;]
[;, if, (, constructorType, ., isUnknownType, (, ), ), {, type, =, unknownType, ;, }, else, {, FunctionType, ct, =]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, constructorType, ., isUnknownType, (, ), ), {, type, =, unknownType, ;, }, else]
[), {, type, =, unknownType, ;, }, else, {, FunctionType, ct, =, constructorType, ., toMaybeFunctionType, (, ), ;, if, (]
[., isUnknownType, (, ), ), {, type, =, unknownType, ;, }, else, {, FunctionType, ct, =, constructorType, ., toMaybeFunctionType, (]
[=, unknownType, ;, }, else, {, FunctionType, ct, =, constructorType, ., toMaybeFunctionType, (, ), ;, if, (, ct, ==, null]
[;, }, else, {, FunctionType, ct, =, constructorType, ., toMaybeFunctionType, (, ), ;, if, (, ct, ==, null, &&, constructorType]
[;, if, (, ct, ==, null, &&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType, ), constructorType, ;, }]
[., toMaybeFunctionType, (, ), ;, if, (, ct, ==, null, &&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType]
[), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (, ct, !=, null, &&, ct, ., isConstructor, (]
[&&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (, ct, !=, null, &&]
[==, null, &&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (, ct, !=]
[&&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (, ct, !=, null, &&]
[), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (, ct, !=, null, &&, ct, ., isConstructor, (]
[instanceof, FunctionType, ), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (, ct, !=, null, &&, ct, .]
[=, (, FunctionType, ), constructorType, ;, }, if, (, ct, !=, null, &&, ct, ., isConstructor, (, ), ), {]
[;, }, if, (, ct, !=, null, &&, ct, ., isConstructor, (, ), ), {, type, =, ct, ., getInstanceType]
[;, }, if, (, ct, !=, null, &&, ct, ., isConstructor, (, ), ), {, type, =, ct, ., getInstanceType]
[), {, type, =, ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (, n, ,, ct, ), ;, }, }, }]
[&&, ct, ., isConstructor, (, ), ), {, type, =, ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (, n, ,]
[!=, null, &&, ct, ., isConstructor, (, ), ), {, type, =, ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (]
[&&, ct, ., isConstructor, (, ), ), {, type, =, ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (, n, ,]
[), {, type, =, ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (, n, ,, ct, ), ;, }, }, }]
[., isConstructor, (, ), ), {, type, =, ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (, n, ,, ct, )]
[=, ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (, n, ,, ct, ), ;, }, }, }, n, ., setJSType]
[;, backwardsInferenceFromCallSite, (, n, ,, ct, ), ;, }, }, }, n, ., setJSType, (, type, ), ;, return, scope]
[., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (, n, ,, ct, ), ;, }, }, }, n, ., setJSType, (, type]
[;, }, }, }, n, ., setJSType, (, type, ), ;, return, scope, ;, }, private, BooleanOutcomePair, traverseAnd, (, Node]
[,, ct, ), ;, }, }, }, n, ., setJSType, (, type, ), ;, return, scope, ;, }, private, BooleanOutcomePair]
[), ;, }, }, }, n, ., setJSType, (, type, ), ;, return, scope, ;, }, private, BooleanOutcomePair, traverseAnd, (]
[;, return, scope, ;, }, private, BooleanOutcomePair, traverseAnd, (, Node, n, ,, FlowScope, scope, ), {, return, traverseShortCircuitingBinOp, (, n]
[., setJSType, (, type, ), ;, return, scope, ;, }, private, BooleanOutcomePair, traverseAnd, (, Node, n, ,, FlowScope, scope, )]
[), ;, return, scope, ;, }, private, BooleanOutcomePair, traverseAnd, (, Node, n, ,, FlowScope, scope, ), {, return, traverseShortCircuitingBinOp, (]
[;, }, private, BooleanOutcomePair, traverseAnd, (, Node, n, ,, FlowScope, scope, ), {, return, traverseShortCircuitingBinOp, (, n, ,, scope, ,]
[;, }, private, FlowScope, traverseChildren, (, Node, n, ,, FlowScope, scope, ), {, for, (, Node, el, =, n, .]
[,, scope, ,, true, ), ;, }, private, FlowScope, traverseChildren, (, Node, n, ,, FlowScope, scope, ), {, for, (]
[,, true, ), ;, }, private, FlowScope, traverseChildren, (, Node, n, ,, FlowScope, scope, ), {, for, (, Node, el]
[), ;, }, private, FlowScope, traverseChildren, (, Node, n, ,, FlowScope, scope, ), {, for, (, Node, el, =, n]
[;, el, !=, null, ;, el, =, el, ., getNext, (, ), ), {, scope, =, traverse, (, el, ,]
[., getFirstChild, (, ), ;, el, !=, null, ;, el, =, el, ., getNext, (, ), ), {, scope, =]
[;, el, =, el, ., getNext, (, ), ), {, scope, =, traverse, (, el, ,, scope, ), ;, }]
[!=, null, ;, el, =, el, ., getNext, (, ), ), {, scope, =, traverse, (, el, ,, scope, )]
[;, el, =, el, ., getNext, (, ), ), {, scope, =, traverse, (, el, ,, scope, ), ;, }]
[=, el, ., getNext, (, ), ), {, scope, =, traverse, (, el, ,, scope, ), ;, }, return, scope]
[), {, scope, =, traverse, (, el, ,, scope, ), ;, }, return, scope, ;, }, private, FlowScope, traverseGetElem, (]
[., getNext, (, ), ), {, scope, =, traverse, (, el, ,, scope, ), ;, }, return, scope, ;, }]
[=, traverse, (, el, ,, scope, ), ;, }, return, scope, ;, }, private, FlowScope, traverseGetElem, (, Node, n, ,]
[;, }, return, scope, ;, }, private, FlowScope, traverseGetElem, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren]
[,, scope, ), ;, }, return, scope, ;, }, private, FlowScope, traverseGetElem, (, Node, n, ,, FlowScope, scope, ), {]
[), ;, }, return, scope, ;, }, private, FlowScope, traverseGetElem, (, Node, n, ,, FlowScope, scope, ), {, scope, =]
[;, }, private, FlowScope, traverseGetElem, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope]
[=, traverseChildren, (, n, ,, scope, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, getJSType, (, n, ., getFirstChild]
[;, ObjectType, objType, =, ObjectType, ., cast, (, getJSType, (, n, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, )]
[,, scope, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, getJSType, (, n, ., getFirstChild, (, ), ), .]
[), ;, ObjectType, objType, =, ObjectType, ., cast, (, getJSType, (, n, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (]
[;, if, (, objType, !=, null, ), {, JSType, type, =, objType, ., getParameterType, (, ), ;, if, (, type]
[., cast, (, getJSType, (, n, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objType]
[), ;, if, (, objType, !=, null, ), {, JSType, type, =, objType, ., getParameterType, (, ), ;, if, (]
[., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objType, !=, null, ), {, JSType, type, =, objType, ., getParameterType, (]
[), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objType, !=, null, ), {, JSType, type, =, objType, ., getParameterType]
[., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objType, !=, null, ), {, JSType, type]
[), {, JSType, type, =, objType, ., getParameterType, (, ), ;, if, (, type, !=, null, ), {, n, .]
[!=, null, ), {, JSType, type, =, objType, ., getParameterType, (, ), ;, if, (, type, !=, null, ), {]
[), {, JSType, type, =, objType, ., getParameterType, (, ), ;, if, (, type, !=, null, ), {, n, .]
[;, if, (, type, !=, null, ), {, n, ., setJSType, (, type, ), ;, }, }, return, dereferencePointer, (]
[., getParameterType, (, ), ;, if, (, type, !=, null, ), {, n, ., setJSType, (, type, ), ;, }]
[), {, n, ., setJSType, (, type, ), ;, }, }, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,]
[!=, null, ), {, n, ., setJSType, (, type, ), ;, }, }, return, dereferencePointer, (, n, ., getFirstChild, (]
[), {, n, ., setJSType, (, type, ), ;, }, }, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,]
[;, }, }, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,, scope, ), ;, }, private, FlowScope, traverseGetProp, (]
[., setJSType, (, type, ), ;, }, }, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,, scope, ), ;]
[), ;, }, }, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,, scope, ), ;, }, private, FlowScope, traverseGetProp]
[;, }, private, FlowScope, traverseGetProp, (, Node, n, ,, FlowScope, scope, ), {, Node, objNode, =, n, ., getFirstChild, (]
[,, scope, ), ;, }, private, FlowScope, traverseGetProp, (, Node, n, ,, FlowScope, scope, ), {, Node, objNode, =, n]
[., getFirstChild, (, ), ,, scope, ), ;, }, private, FlowScope, traverseGetProp, (, Node, n, ,, FlowScope, scope, ), {]
[), ;, }, private, FlowScope, traverseGetProp, (, Node, n, ,, FlowScope, scope, ), {, Node, objNode, =, n, ., getFirstChild]
[;, Node, property, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, n]
[., getFirstChild, (, ), ;, Node, property, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,]
[;, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getPropertyType, (, objNode, ., getJSType, (]
[., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getPropertyType, (]
[=, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getPropertyType, (, objNode, ., getJSType, (, ), ,]
[;, n, ., setJSType, (, getPropertyType, (, objNode, ., getJSType, (, ), ,, property, ., getString, (, ), ,, n]
[,, scope, ), ;, n, ., setJSType, (, getPropertyType, (, objNode, ., getJSType, (, ), ,, property, ., getString, (]
[), ;, n, ., setJSType, (, getPropertyType, (, objNode, ., getJSType, (, ), ,, property, ., getString, (, ), ,]
[;, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,, scope, ), ;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type]
[., setJSType, (, getPropertyType, (, objNode, ., getJSType, (, ), ,, property, ., getString, (, ), ,, n, ,, scope]
[), ;, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,, scope, ), ;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType]
[,, property, ., getString, (, ), ,, n, ,, scope, ), ), ;, return, dereferencePointer, (, n, ., getFirstChild, (]
[., getJSType, (, ), ,, property, ., getString, (, ), ,, n, ,, scope, ), ), ;, return, dereferencePointer, (]
[,, n, ,, scope, ), ), ;, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,, scope, ), ;, }]
[., getString, (, ), ,, n, ,, scope, ), ), ;, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,]
[,, scope, ), ), ;, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,, scope, ), ;, }, private, void]
[), ), ;, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,, scope, ), ;, }, private, void, inferPropertyTypesToMatchConstraint, (]
[;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type, ,, JSType, constraint, ), {, if, (, type, ==, null, ||, constraint]
[,, scope, ), ;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type, ,, JSType, constraint, ), {, if, (, type, ==]
[., getFirstChild, (, ), ,, scope, ), ;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type, ,, JSType, constraint, ), {]
[), ;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type, ,, JSType, constraint, ), {, if, (, type, ==, null, ||]
[), {, return, ;, }, type, ., matchConstraint, (, constraint, ), ;, }, private, FlowScope, dereferencePointer, (, Node, n, ,]
[||, constraint, ==, null, ), {, return, ;, }, type, ., matchConstraint, (, constraint, ), ;, }, private, FlowScope, dereferencePointer]
[==, null, ||, constraint, ==, null, ), {, return, ;, }, type, ., matchConstraint, (, constraint, ), ;, }, private]
[||, constraint, ==, null, ), {, return, ;, }, type, ., matchConstraint, (, constraint, ), ;, }, private, FlowScope, dereferencePointer]
[), {, return, ;, }, type, ., matchConstraint, (, constraint, ), ;, }, private, FlowScope, dereferencePointer, (, Node, n, ,]
[==, null, ), {, return, ;, }, type, ., matchConstraint, (, constraint, ), ;, }, private, FlowScope, dereferencePointer, (, Node]
[), {, return, ;, }, type, ., matchConstraint, (, constraint, ), ;, }, private, FlowScope, dereferencePointer, (, Node, n, ,]
[;, }, private, FlowScope, dereferencePointer, (, Node, n, ,, FlowScope, scope, ), {, if, (, n, ., isQualifiedName, (, )]
[., matchConstraint, (, constraint, ), ;, }, private, FlowScope, dereferencePointer, (, Node, n, ,, FlowScope, scope, ), {, if, (]
[), ;, }, private, FlowScope, dereferencePointer, (, Node, n, ,, FlowScope, scope, ), {, if, (, n, ., isQualifiedName, (]
[), {, JSType, type, =, getJSType, (, n, ), ;, JSType, narrowed, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if]
[., isQualifiedName, (, ), ), {, JSType, type, =, getJSType, (, n, ), ;, JSType, narrowed, =, type, ., restrictByNotNullOrUndefined]
[;, JSType, narrowed, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, !=, narrowed, ), {, scope, =, narrowScope]
[), ;, JSType, narrowed, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, !=, narrowed, ), {, scope, =]
[;, if, (, type, !=, narrowed, ), {, scope, =, narrowScope, (, scope, ,, n, ,, narrowed, ), ;, }]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, type, !=, narrowed, ), {, scope, =, narrowScope, (, scope, ,, n, ,]
[), {, scope, =, narrowScope, (, scope, ,, n, ,, narrowed, ), ;, }, }, return, scope, ;, }, private]
[!=, narrowed, ), {, scope, =, narrowScope, (, scope, ,, n, ,, narrowed, ), ;, }, }, return, scope, ;]
[), {, scope, =, narrowScope, (, scope, ,, n, ,, narrowed, ), ;, }, }, return, scope, ;, }, private]
[=, narrowScope, (, scope, ,, n, ,, narrowed, ), ;, }, }, return, scope, ;, }, private, JSType, getPropertyType, (]
[;, }, }, return, scope, ;, }, private, JSType, getPropertyType, (, JSType, objType, ,, String, propName, ,, Node, n, ,]
[,, n, ,, narrowed, ), ;, }, }, return, scope, ;, }, private, JSType, getPropertyType, (, JSType, objType, ,, String]
[,, narrowed, ), ;, }, }, return, scope, ;, }, private, JSType, getPropertyType, (, JSType, objType, ,, String, propName, ,]
[), ;, }, }, return, scope, ;, }, private, JSType, getPropertyType, (, JSType, objType, ,, String, propName, ,, Node, n]
[;, }, private, JSType, getPropertyType, (, JSType, objType, ,, String, propName, ,, Node, n, ,, FlowScope, scope, ), {, JSType]
[;, boolean, isLocallyInferred, =, false, ;, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, StaticSlot, <, JSType, >, var]
[;, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (]
[;, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, qualifiedName, ), ;, if, (, var, !=, null, )]
[., getQualifiedName, (, ), ;, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, qualifiedName, ), ;, if, (]
[;, if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType]
[., getSlot, (, qualifiedName, ), ;, if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (]
[), ;, if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (]
[), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, ), {, boolean, isDeclared]
[!=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, ), {]
[), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, ), {, boolean, isDeclared]
[;, if, (, varType, !=, null, ), {, boolean, isDeclared, =, !, var, ., isTypeInferred, (, ), ;, isLocallyInferred, =]
[., getType, (, ), ;, if, (, varType, !=, null, ), {, boolean, isDeclared, =, !, var, ., isTypeInferred, (]
[), {, boolean, isDeclared, =, !, var, ., isTypeInferred, (, ), ;, isLocallyInferred, =, (, var, !=, syntacticScope, ., getSlot]
[!=, null, ), {, boolean, isDeclared, =, !, var, ., isTypeInferred, (, ), ;, isLocallyInferred, =, (, var, !=, syntacticScope]
[), {, boolean, isDeclared, =, !, var, ., isTypeInferred, (, ), ;, isLocallyInferred, =, (, var, !=, syntacticScope, ., getSlot]
[;, isLocallyInferred, =, (, var, !=, syntacticScope, ., getSlot, (, qualifiedName, ), ), ;, if, (, isDeclared, ||, isLocallyInferred, )]
[;, isLocallyInferred, =, (, var, !=, syntacticScope, ., getSlot, (, qualifiedName, ), ), ;, if, (, isDeclared, ||, isLocallyInferred, )]
[., isTypeInferred, (, ), ;, isLocallyInferred, =, (, var, !=, syntacticScope, ., getSlot, (, qualifiedName, ), ), ;, if, (]
[=, (, var, !=, syntacticScope, ., getSlot, (, qualifiedName, ), ), ;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType]
[;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (, propertyType, ==, null]
[), ;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (, propertyType, ==]
[!=, syntacticScope, ., getSlot, (, qualifiedName, ), ), ;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;]
[), ;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (, propertyType, ==]
[., getSlot, (, qualifiedName, ), ), ;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }]
[), ), ;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (, propertyType]
[), {, propertyType, =, varType, ;, }, }, }, if, (, propertyType, ==, null, &&, objType, !=, null, ), {]
[||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (, propertyType, ==, null, &&, objType, !=, null]
[), {, propertyType, =, varType, ;, }, }, }, if, (, propertyType, ==, null, &&, objType, !=, null, ), {]
[=, varType, ;, }, }, }, if, (, propertyType, ==, null, &&, objType, !=, null, ), {, JSType, foundType, =]
[;, }, }, }, if, (, propertyType, ==, null, &&, objType, !=, null, ), {, JSType, foundType, =, objType, .]
[), {, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (, foundType, !=, null, ), {, propertyType]
[&&, objType, !=, null, ), {, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (, foundType, !=]
[==, null, &&, objType, !=, null, ), {, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (]
[&&, objType, !=, null, ), {, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (, foundType, !=]
[), {, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (, foundType, !=, null, ), {, propertyType]
[!=, null, ), {, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (, foundType, !=, null, )]
[), {, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (, foundType, !=, null, ), {, propertyType]
[;, if, (, foundType, !=, null, ), {, propertyType, =, foundType, ;, }, }, if, (, (, propertyType, ==, null]
[., findPropertyType, (, propName, ), ;, if, (, foundType, !=, null, ), {, propertyType, =, foundType, ;, }, }, if]
[), ;, if, (, foundType, !=, null, ), {, propertyType, =, foundType, ;, }, }, if, (, (, propertyType, ==]
[), {, propertyType, =, foundType, ;, }, }, if, (, (, propertyType, ==, null, ||, propertyType, ., isUnknownType, (, )]
[!=, null, ), {, propertyType, =, foundType, ;, }, }, if, (, (, propertyType, ==, null, ||, propertyType, ., isUnknownType]
[), {, propertyType, =, foundType, ;, }, }, if, (, (, propertyType, ==, null, ||, propertyType, ., isUnknownType, (, )]
[=, foundType, ;, }, }, if, (, (, propertyType, ==, null, ||, propertyType, ., isUnknownType, (, ), ), &&, qualifiedName]
[;, }, }, if, (, (, propertyType, ==, null, ||, propertyType, ., isUnknownType, (, ), ), &&, qualifiedName, !=, null]
[), {, ObjectType, regType, =, ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, ), ), ;, if, (, regType]
[&&, qualifiedName, !=, null, ), {, ObjectType, regType, =, ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, ), )]
[), &&, qualifiedName, !=, null, ), {, ObjectType, regType, =, ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, )]
[||, propertyType, ., isUnknownType, (, ), ), &&, qualifiedName, !=, null, ), {, ObjectType, regType, =, ObjectType, ., cast, (]
[==, null, ||, propertyType, ., isUnknownType, (, ), ), &&, qualifiedName, !=, null, ), {, ObjectType, regType, =, ObjectType, .]
[||, propertyType, ., isUnknownType, (, ), ), &&, qualifiedName, !=, null, ), {, ObjectType, regType, =, ObjectType, ., cast, (]
[), &&, qualifiedName, !=, null, ), {, ObjectType, regType, =, ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, )]
[., isUnknownType, (, ), ), &&, qualifiedName, !=, null, ), {, ObjectType, regType, =, ObjectType, ., cast, (, registry, .]
[), {, ObjectType, regType, =, ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, ), ), ;, if, (, regType]
[!=, null, ), {, ObjectType, regType, =, ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, ), ), ;, if]
[), {, ObjectType, regType, =, ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, ), ), ;, if, (, regType]
[;, if, (, regType, !=, null, ), {, propertyType, =, regType, ., getConstructor, (, ), ;, }, }, if, (]
[., cast, (, registry, ., getType, (, qualifiedName, ), ), ;, if, (, regType, !=, null, ), {, propertyType, =]
[), ;, if, (, regType, !=, null, ), {, propertyType, =, regType, ., getConstructor, (, ), ;, }, }, if]
[., getType, (, qualifiedName, ), ), ;, if, (, regType, !=, null, ), {, propertyType, =, regType, ., getConstructor, (]
[), ), ;, if, (, regType, !=, null, ), {, propertyType, =, regType, ., getConstructor, (, ), ;, }, }]
[), {, propertyType, =, regType, ., getConstructor, (, ), ;, }, }, if, (, propertyType, ==, null, ), {, return]
[!=, null, ), {, propertyType, =, regType, ., getConstructor, (, ), ;, }, }, if, (, propertyType, ==, null, )]
[), {, propertyType, =, regType, ., getConstructor, (, ), ;, }, }, if, (, propertyType, ==, null, ), {, return]
[=, regType, ., getConstructor, (, ), ;, }, }, if, (, propertyType, ==, null, ), {, return, unknownType, ;, }]
[;, }, }, if, (, propertyType, ==, null, ), {, return, unknownType, ;, }, else, if, (, propertyType, ., isEquivalentTo]
[., getConstructor, (, ), ;, }, }, if, (, propertyType, ==, null, ), {, return, unknownType, ;, }, else, if]
[), {, return, unknownType, ;, }, else, if, (, propertyType, ., isEquivalentTo, (, unknownType, ), &&, isLocallyInferred, ), {, return]
[==, null, ), {, return, unknownType, ;, }, else, if, (, propertyType, ., isEquivalentTo, (, unknownType, ), &&, isLocallyInferred, )]
[), {, return, unknownType, ;, }, else, if, (, propertyType, ., isEquivalentTo, (, unknownType, ), &&, isLocallyInferred, ), {, return]
[;, }, else, if, (, propertyType, ., isEquivalentTo, (, unknownType, ), &&, isLocallyInferred, ), {, return, getNativeType, (, CHECKED_UNKNOWN_TYPE, )]
[), {, return, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return, propertyType, ;, }, }, private, BooleanOutcomePair, traverseOr, (]
[&&, isLocallyInferred, ), {, return, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return, propertyType, ;, }, }, private, BooleanOutcomePair]
[., isEquivalentTo, (, unknownType, ), &&, isLocallyInferred, ), {, return, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return, propertyType]
[), &&, isLocallyInferred, ), {, return, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return, propertyType, ;, }, }, private]
[), {, return, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return, propertyType, ;, }, }, private, BooleanOutcomePair, traverseOr, (]
[;, }, else, {, return, propertyType, ;, }, }, private, BooleanOutcomePair, traverseOr, (, Node, n, ,, FlowScope, scope, ), {]
[), ;, }, else, {, return, propertyType, ;, }, }, private, BooleanOutcomePair, traverseOr, (, Node, n, ,, FlowScope, scope, )]
[;, }, }, private, BooleanOutcomePair, traverseOr, (, Node, n, ,, FlowScope, scope, ), {, return, traverseShortCircuitingBinOp, (, n, ,, scope]
[;, }, private, BooleanOutcomePair, traverseShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ,, boolean, condition, ), {, Node, left, =, n]
[,, scope, ,, false, ), ;, }, private, BooleanOutcomePair, traverseShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ,, boolean, condition, )]
[,, false, ), ;, }, private, BooleanOutcomePair, traverseShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ,, boolean, condition, ), {, Node]
[), ;, }, private, BooleanOutcomePair, traverseShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ,, boolean, condition, ), {, Node, left, =]
[;, Node, right, =, n, ., getLastChild, (, ), ;, BooleanOutcomePair, leftLiterals, =, traverseWithinShortCircuitingBinOp, (, left, ,, scope, ., createChildFlowScope]
[., getFirstChild, (, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, BooleanOutcomePair, leftLiterals, =, traverseWithinShortCircuitingBinOp, (, left]
[;, BooleanOutcomePair, leftLiterals, =, traverseWithinShortCircuitingBinOp, (, left, ,, scope, ., createChildFlowScope, (, ), ), ;, JSType, leftType, =, left, .]
[., getLastChild, (, ), ;, BooleanOutcomePair, leftLiterals, =, traverseWithinShortCircuitingBinOp, (, left, ,, scope, ., createChildFlowScope, (, ), ), ;, JSType]
[;, JSType, leftType, =, left, ., getJSType, (, ), ;, FlowScope, rightScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, left, ,, leftLiterals]
[,, scope, ., createChildFlowScope, (, ), ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, FlowScope, rightScope, =]
[), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, FlowScope, rightScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, left, ,]
[., createChildFlowScope, (, ), ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, FlowScope, rightScope, =, reverseInterpreter, .]
[;, FlowScope, rightScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, left, ,, leftLiterals, ., getOutcomeFlowScope, (, left, ., getType, (, ), ,]
[., getJSType, (, ), ;, FlowScope, rightScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, left, ,, leftLiterals, ., getOutcomeFlowScope, (, left, .]
[;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (, right, ,, rightScope, ., createChildFlowScope, (, ), ), ;, JSType, rightType, =, right, .]
[., getPreciserScopeKnowingConditionOutcome, (, left, ,, leftLiterals, ., getOutcomeFlowScope, (, left, ., getType, (, ), ,, condition, ), ,, condition, )]
[,, leftLiterals, ., getOutcomeFlowScope, (, left, ., getType, (, ), ,, condition, ), ,, condition, ), ;, BooleanOutcomePair, rightLiterals, =]
[,, condition, ), ;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (, right, ,, rightScope, ., createChildFlowScope, (, ), ), ;, JSType, rightType]
[., getOutcomeFlowScope, (, left, ., getType, (, ), ,, condition, ), ,, condition, ), ;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (]
[,, condition, ), ,, condition, ), ;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (, right, ,, rightScope, ., createChildFlowScope, (, ), )]
[., getType, (, ), ,, condition, ), ,, condition, ), ;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (, right, ,, rightScope, .]
[), ,, condition, ), ;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (, right, ,, rightScope, ., createChildFlowScope, (, ), ), ;, JSType]
[), ;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (, right, ,, rightScope, ., createChildFlowScope, (, ), ), ;, JSType, rightType, =, right]
[;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (, leftType, !=]
[,, rightScope, ., createChildFlowScope, (, ), ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, ;]
[), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (, leftType]
[., createChildFlowScope, (, ), ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, ;, BooleanOutcomePair, literals]
[;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (, leftType, !=, null, &&, rightType, !=, null, ), {, leftType, =]
[., getJSType, (, ), ;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (, leftType, !=, null, &&, rightType, !=, null]
[), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, .]
[&&, rightType, !=, null, ), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, .]
[!=, null, &&, rightType, !=, null, ), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (]
[&&, rightType, !=, null, ), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, .]
[), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, .]
[!=, null, ), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==]
[), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, .]
[=, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !]
[;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !, condition, ), ), {, type, =, leftType, ;]
[., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !, condition, )]
[), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !, condition, ), ), {, type, =, leftType]
[), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !, condition, ), ), {, type, =, leftType]
[), {, type, =, leftType, ;, literals, =, leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (, rightType]
[==, BooleanLiteralSet, ., get, (, !, condition, ), ), {, type, =, leftType, ;, literals, =, leftLiterals, ;, }, else]
[., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !, condition, ), ), {, type, =, leftType, ;, literals, =, leftLiterals, ;]
[), {, type, =, leftType, ;, literals, =, leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (, rightType]
[., get, (, !, condition, ), ), {, type, =, leftType, ;, literals, =, leftLiterals, ;, }, else, {, type]
[), ), {, type, =, leftType, ;, literals, =, leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (]
[), ), {, type, =, leftType, ;, literals, =, leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (]
[=, leftType, ;, literals, =, leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (, rightType, ), ;, literals]
[;, literals, =, leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair]
[=, leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair, (, leftLiterals]
[;, }, else, {, type, =, leftType, ., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals]
[=, leftType, ., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }]
[;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (, literals, ., booleanValues, ==, BooleanLiteralSet]
[., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (]
[), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (, literals, ., booleanValues, ==]
[=, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (, literals, ., booleanValues, ==, BooleanLiteralSet, ., EMPTY]
[;, }, if, (, literals, ., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&, getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, type]
[,, rightLiterals, ,, condition, ), ;, }, if, (, literals, ., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&, getNativeType, (, BOOLEAN_TYPE]
[,, condition, ), ;, }, if, (, literals, ., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&, getNativeType, (, BOOLEAN_TYPE, ), .]
[), ;, }, if, (, literals, ., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&, getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (]
[), {, if, (, type, ., isUnionType, (, ), ), {, type, =, type, ., toMaybeUnionType, (, ), ., getRestrictedUnion]
[&&, getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, type, ), ), {, if, (, type, ., isUnionType, (, ), )]
[==, BooleanLiteralSet, ., EMPTY, &&, getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, type, ), ), {, if, (, type, .]
[., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&, getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, type, ), ), {, if, (]
[&&, getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, type, ), ), {, if, (, type, ., isUnionType, (, ), )]
[., EMPTY, &&, getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, type, ), ), {, if, (, type, ., isUnionType, (]
[), {, if, (, type, ., isUnionType, (, ), ), {, type, =, type, ., toMaybeUnionType, (, ), ., getRestrictedUnion]
[., isSubtype, (, type, ), ), {, if, (, type, ., isUnionType, (, ), ), {, type, =, type, .]
[), ., isSubtype, (, type, ), ), {, if, (, type, ., isUnionType, (, ), ), {, type, =, type]
[), ), {, if, (, type, ., isUnionType, (, ), ), {, type, =, type, ., toMaybeUnionType, (, ), .]
[), {, type, =, type, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, }, }]
[., isUnionType, (, ), ), {, type, =, type, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, getNativeType, (, BOOLEAN_TYPE, )]
[=, type, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, }, }, }, else, {]
[;, }, }, }, else, {, type, =, null, ;, literals, =, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet]
[., getRestrictedUnion, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, }, }, }, else, {, type, =, null, ;, literals, =]
[., toMaybeUnionType, (, ), ., getRestrictedUnion, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, }, }, }, else, {, type, =]
[), ;, }, }, }, else, {, type, =, null, ;, literals, =, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,]
[), ), ;, }, }, }, else, {, type, =, null, ;, literals, =, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH]
[=, null, ;, literals, =, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, leftLiterals, ., getJoinedFlowScope, (]
[;, literals, =, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, leftLiterals, ., getJoinedFlowScope, (, ), ,]
[=, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, leftLiterals, ., getJoinedFlowScope, (, ), ,, rightLiterals, .]
[;, }, n, ., setJSType, (, type, ), ;, return, literals, ;, }, private, BooleanOutcomePair, traverseWithinShortCircuitingBinOp, (, Node, n, ,]
[,, BooleanLiteralSet, ., BOTH, ,, leftLiterals, ., getJoinedFlowScope, (, ), ,, rightLiterals, ., getJoinedFlowScope, (, ), ), ;, }, n]
[., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, leftLiterals, ., getJoinedFlowScope, (, ), ,, rightLiterals, ., getJoinedFlowScope, (, ), ), ;]
[,, leftLiterals, ., getJoinedFlowScope, (, ), ,, rightLiterals, ., getJoinedFlowScope, (, ), ), ;, }, n, ., setJSType, (, type]
[., BOTH, ,, leftLiterals, ., getJoinedFlowScope, (, ), ,, rightLiterals, ., getJoinedFlowScope, (, ), ), ;, }, n, ., setJSType]
[,, rightLiterals, ., getJoinedFlowScope, (, ), ), ;, }, n, ., setJSType, (, type, ), ;, return, literals, ;, }]
[., getJoinedFlowScope, (, ), ,, rightLiterals, ., getJoinedFlowScope, (, ), ), ;, }, n, ., setJSType, (, type, ), ;]
[), ;, }, n, ., setJSType, (, type, ), ;, return, literals, ;, }, private, BooleanOutcomePair, traverseWithinShortCircuitingBinOp, (, Node, n]
[., getJoinedFlowScope, (, ), ), ;, }, n, ., setJSType, (, type, ), ;, return, literals, ;, }, private, BooleanOutcomePair]
[;, return, literals, ;, }, private, BooleanOutcomePair, traverseWithinShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ), {, switch, (, n, .]
[., setJSType, (, type, ), ;, return, literals, ;, }, private, BooleanOutcomePair, traverseWithinShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, )]
[), ;, return, literals, ;, }, private, BooleanOutcomePair, traverseWithinShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ), {, switch, (, n]
[;, }, private, BooleanOutcomePair, traverseWithinShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ), {, switch, (, n, ., getType, (, )]
[), {, case, Token, ., AND, :, return, traverseAnd, (, n, ,, scope, ), ;, case, Token, ., OR, :]
[., getType, (, ), ), {, case, Token, ., AND, :, return, traverseAnd, (, n, ,, scope, ), ;, case]
[:, return, traverseAnd, (, n, ,, scope, ), ;, case, Token, ., OR, :, return, traverseOr, (, n, ,, scope]
[., AND, :, return, traverseAnd, (, n, ,, scope, ), ;, case, Token, ., OR, :, return, traverseOr, (, n]
[;, case, Token, ., OR, :, return, traverseOr, (, n, ,, scope, ), ;, default, :, scope, =, traverse, (]
[,, scope, ), ;, case, Token, ., OR, :, return, traverseOr, (, n, ,, scope, ), ;, default, :, scope]
[), ;, case, Token, ., OR, :, return, traverseOr, (, n, ,, scope, ), ;, default, :, scope, =, traverse]
[:, return, traverseOr, (, n, ,, scope, ), ;, default, :, scope, =, traverse, (, n, ,, scope, ), ;]
[., OR, :, return, traverseOr, (, n, ,, scope, ), ;, default, :, scope, =, traverse, (, n, ,, scope]
[;, default, :, scope, =, traverse, (, n, ,, scope, ), ;, return, newBooleanOutcomePair, (, n, ., getJSType, (, )]
[,, scope, ), ;, default, :, scope, =, traverse, (, n, ,, scope, ), ;, return, newBooleanOutcomePair, (, n, .]
[), ;, default, :, scope, =, traverse, (, n, ,, scope, ), ;, return, newBooleanOutcomePair, (, n, ., getJSType, (]
[=, traverse, (, n, ,, scope, ), ;, return, newBooleanOutcomePair, (, n, ., getJSType, (, ), ,, scope, ), ;]
[;, return, newBooleanOutcomePair, (, n, ., getJSType, (, ), ,, scope, ), ;, }, }, BooleanOutcomePair, getBooleanOutcomePair, (, BooleanOutcomePair, left]
[,, scope, ), ;, return, newBooleanOutcomePair, (, n, ., getJSType, (, ), ,, scope, ), ;, }, }, BooleanOutcomePair, getBooleanOutcomePair]
[), ;, return, newBooleanOutcomePair, (, n, ., getJSType, (, ), ,, scope, ), ;, }, }, BooleanOutcomePair, getBooleanOutcomePair, (, BooleanOutcomePair]
[;, }, }, BooleanOutcomePair, getBooleanOutcomePair, (, BooleanOutcomePair, left, ,, BooleanOutcomePair, right, ,, boolean, condition, ), {, return, new, BooleanOutcomePair, (]
[,, scope, ), ;, }, }, BooleanOutcomePair, getBooleanOutcomePair, (, BooleanOutcomePair, left, ,, BooleanOutcomePair, right, ,, boolean, condition, ), {, return]
[., getJSType, (, ), ,, scope, ), ;, }, }, BooleanOutcomePair, getBooleanOutcomePair, (, BooleanOutcomePair, left, ,, BooleanOutcomePair, right, ,, boolean]
[), ;, }, }, BooleanOutcomePair, getBooleanOutcomePair, (, BooleanOutcomePair, left, ,, BooleanOutcomePair, right, ,, boolean, condition, ), {, return, new, BooleanOutcomePair]
[;, }, static, BooleanLiteralSet, getBooleanOutcomes, (, BooleanLiteralSet, left, ,, BooleanLiteralSet, right, ,, boolean, condition, ), {, return, right, ., union]
[,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,, condition, ), ,, left, ., getJoinedFlowScope, (, ), ,]
[,, right, ., toBooleanOutcomes, ,, condition, ), ,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,, condition, )]
[., toBooleanOutcomes, ,, right, ., toBooleanOutcomes, ,, condition, ), ,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,]
[,, condition, ), ,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,, condition, ), ,, left, ., getJoinedFlowScope]
[., toBooleanOutcomes, ,, condition, ), ,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,, condition, ), ,, left]
[), ,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,, condition, ), ,, left, ., getJoinedFlowScope, (, )]
[,, left, ., getJoinedFlowScope, (, ), ,, right, ., getJoinedFlowScope, (, ), ), ;, }, static, BooleanLiteralSet, getBooleanOutcomes, (, BooleanLiteralSet]
[,, right, ., booleanValues, ,, condition, ), ,, left, ., getJoinedFlowScope, (, ), ,, right, ., getJoinedFlowScope, (, ), )]
[., booleanValues, ,, right, ., booleanValues, ,, condition, ), ,, left, ., getJoinedFlowScope, (, ), ,, right, ., getJoinedFlowScope, (]
[,, condition, ), ,, left, ., getJoinedFlowScope, (, ), ,, right, ., getJoinedFlowScope, (, ), ), ;, }, static, BooleanLiteralSet]
[., booleanValues, ,, condition, ), ,, left, ., getJoinedFlowScope, (, ), ,, right, ., getJoinedFlowScope, (, ), ), ;, }]
[), ,, left, ., getJoinedFlowScope, (, ), ,, right, ., getJoinedFlowScope, (, ), ), ;, }, static, BooleanLiteralSet, getBooleanOutcomes, (]
[,, right, ., getJoinedFlowScope, (, ), ), ;, }, static, BooleanLiteralSet, getBooleanOutcomes, (, BooleanLiteralSet, left, ,, BooleanLiteralSet, right, ,, boolean]
[., getJoinedFlowScope, (, ), ,, right, ., getJoinedFlowScope, (, ), ), ;, }, static, BooleanLiteralSet, getBooleanOutcomes, (, BooleanLiteralSet, left, ,]
[), ;, }, static, BooleanLiteralSet, getBooleanOutcomes, (, BooleanLiteralSet, left, ,, BooleanLiteralSet, right, ,, boolean, condition, ), {, return, right, .]
[., getJoinedFlowScope, (, ), ), ;, }, static, BooleanLiteralSet, getBooleanOutcomes, (, BooleanLiteralSet, left, ,, BooleanLiteralSet, right, ,, boolean, condition, )]
[;, }, private, final, class, BooleanOutcomePair, {, final, BooleanLiteralSet, toBooleanOutcomes, ;, final, BooleanLiteralSet, booleanValues, ;, final, FlowScope, leftScope, ;, final]
[., union, (, left, ., intersection, (, BooleanLiteralSet, ., get, (, !, condition, ), ), ), ;, }, private, final]
[), ;, }, private, final, class, BooleanOutcomePair, {, final, BooleanLiteralSet, toBooleanOutcomes, ;, final, BooleanLiteralSet, booleanValues, ;, final, FlowScope, leftScope, ;]
[., intersection, (, BooleanLiteralSet, ., get, (, !, condition, ), ), ), ;, }, private, final, class, BooleanOutcomePair, {, final]
[), ), ;, }, private, final, class, BooleanOutcomePair, {, final, BooleanLiteralSet, toBooleanOutcomes, ;, final, BooleanLiteralSet, booleanValues, ;, final, FlowScope, leftScope]
[., get, (, !, condition, ), ), ), ;, }, private, final, class, BooleanOutcomePair, {, final, BooleanLiteralSet, toBooleanOutcomes, ;, final]
[), ), ), ;, }, private, final, class, BooleanOutcomePair, {, final, BooleanLiteralSet, toBooleanOutcomes, ;, final, BooleanLiteralSet, booleanValues, ;, final, FlowScope]
[), ), ), ;, }, private, final, class, BooleanOutcomePair, {, final, BooleanLiteralSet, toBooleanOutcomes, ;, final, BooleanLiteralSet, booleanValues, ;, final, FlowScope]
[;, BooleanOutcomePair, (, BooleanLiteralSet, toBooleanOutcomes, ,, BooleanLiteralSet, booleanValues, ,, FlowScope, leftScope, ,, FlowScope, rightScope, ), {, this, ., toBooleanOutcomes, =]
[=, toBooleanOutcomes, ;, this, ., booleanValues, =, booleanValues, ;, this, ., leftScope, =, leftScope, ;, this, ., rightScope, =, rightScope]
[., toBooleanOutcomes, =, toBooleanOutcomes, ;, this, ., booleanValues, =, booleanValues, ;, this, ., leftScope, =, leftScope, ;, this, ., rightScope]
[;, this, ., booleanValues, =, booleanValues, ;, this, ., leftScope, =, leftScope, ;, this, ., rightScope, =, rightScope, ;, }]
[=, booleanValues, ;, this, ., leftScope, =, leftScope, ;, this, ., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, )]
[., booleanValues, =, booleanValues, ;, this, ., leftScope, =, leftScope, ;, this, ., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope]
[;, this, ., leftScope, =, leftScope, ;, this, ., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if]
[=, leftScope, ;, this, ., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (, joinedScope, ==, null]
[., leftScope, =, leftScope, ;, this, ., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (, joinedScope]
[;, this, ., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (, joinedScope, ==, null, ), {]
[=, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (, joinedScope, ==, null, ), {, if, (, leftScope, ==]
[., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (, joinedScope, ==, null, ), {, if, (]
[;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (, joinedScope, ==, null, ), {, if, (, leftScope, ==, rightScope, )]
[), {, if, (, leftScope, ==, rightScope, ), {, joinedScope, =, rightScope, ;, }, else, {, joinedScope, =, join, (]
[==, null, ), {, if, (, leftScope, ==, rightScope, ), {, joinedScope, =, rightScope, ;, }, else, {, joinedScope, =]
[), {, if, (, leftScope, ==, rightScope, ), {, joinedScope, =, rightScope, ;, }, else, {, joinedScope, =, join, (]
[), {, joinedScope, =, rightScope, ;, }, else, {, joinedScope, =, join, (, leftScope, ,, rightScope, ), ;, }, }]
[==, rightScope, ), {, joinedScope, =, rightScope, ;, }, else, {, joinedScope, =, join, (, leftScope, ,, rightScope, ), ;]
[), {, joinedScope, =, rightScope, ;, }, else, {, joinedScope, =, join, (, leftScope, ,, rightScope, ), ;, }, }]
[=, rightScope, ;, }, else, {, joinedScope, =, join, (, leftScope, ,, rightScope, ), ;, }, }, return, joinedScope, ;]
[;, }, else, {, joinedScope, =, join, (, leftScope, ,, rightScope, ), ;, }, }, return, joinedScope, ;, }, FlowScope]
[=, join, (, leftScope, ,, rightScope, ), ;, }, }, return, joinedScope, ;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,]
[;, }, }, return, joinedScope, ;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (, nodeType]
[,, rightScope, ), ;, }, }, return, joinedScope, ;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {]
[), ;, }, }, return, joinedScope, ;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (]
[;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (, nodeType, ==, Token, ., AND, &&]
[), {, return, rightScope, ;, }, else, {, return, getJoinedFlowScope, (, ), ;, }, }, }, private, BooleanOutcomePair, newBooleanOutcomePair, (]
[||, nodeType, ==, Token, ., OR, &&, !, outcome, ), {, return, rightScope, ;, }, else, {, return, getJoinedFlowScope, (]
[&&, outcome, ||, nodeType, ==, Token, ., OR, &&, !, outcome, ), {, return, rightScope, ;, }, else, {, return]
[==, Token, ., AND, &&, outcome, ||, nodeType, ==, Token, ., OR, &&, !, outcome, ), {, return, rightScope, ;]
[&&, outcome, ||, nodeType, ==, Token, ., OR, &&, !, outcome, ), {, return, rightScope, ;, }, else, {, return]
[., AND, &&, outcome, ||, nodeType, ==, Token, ., OR, &&, !, outcome, ), {, return, rightScope, ;, }, else]
[||, nodeType, ==, Token, ., OR, &&, !, outcome, ), {, return, rightScope, ;, }, else, {, return, getJoinedFlowScope, (]
[), {, return, rightScope, ;, }, else, {, return, getJoinedFlowScope, (, ), ;, }, }, }, private, BooleanOutcomePair, newBooleanOutcomePair, (]
[&&, !, outcome, ), {, return, rightScope, ;, }, else, {, return, getJoinedFlowScope, (, ), ;, }, }, }, private]
[==, Token, ., OR, &&, !, outcome, ), {, return, rightScope, ;, }, else, {, return, getJoinedFlowScope, (, ), ;]
[&&, !, outcome, ), {, return, rightScope, ;, }, else, {, return, getJoinedFlowScope, (, ), ;, }, }, }, private]
[., OR, &&, !, outcome, ), {, return, rightScope, ;, }, else, {, return, getJoinedFlowScope, (, ), ;, }, }]
[), {, return, rightScope, ;, }, else, {, return, getJoinedFlowScope, (, ), ;, }, }, }, private, BooleanOutcomePair, newBooleanOutcomePair, (]
[), {, return, rightScope, ;, }, else, {, return, getJoinedFlowScope, (, ), ;, }, }, }, private, BooleanOutcomePair, newBooleanOutcomePair, (]
[;, }, else, {, return, getJoinedFlowScope, (, ), ;, }, }, }, private, BooleanOutcomePair, newBooleanOutcomePair, (, JSType, jsType, ,, FlowScope]
[;, }, }, }, private, BooleanOutcomePair, newBooleanOutcomePair, (, JSType, jsType, ,, FlowScope, flowScope, ), {, if, (, jsType, ==, null]
[), {, return, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, ), ;, }]
[==, null, ), {, return, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, )]
[), {, return, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, ), ;, }]
[;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype]
[,, BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, )]
[., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes]
[,, flowScope, ,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType]
[., BOTH, ,, flowScope, ,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,, registry]
[,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType, (, BOOLEAN_TYPE]
[), ;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType, (, BOOLEAN_TYPE, ), .]
[;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,, Node, nameNode, ,, JSType, varType, ), {, Preconditions, ., checkState, (]
[,, registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, ), ?, BooleanLiteralSet, ., BOTH, :, BooleanLiteralSet, ., EMPTY]
[., getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, ), ?, BooleanLiteralSet, ., BOTH]
[,, flowScope, ,, flowScope, ), ;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,, Node, nameNode, ,, JSType, varType, )]
[?, BooleanLiteralSet, ., BOTH, :, BooleanLiteralSet, ., EMPTY, ,, flowScope, ,, flowScope, ), ;, }, private, void, redeclareSimpleVar, (, FlowScope]
[., isSubtype, (, jsType, ), ?, BooleanLiteralSet, ., BOTH, :, BooleanLiteralSet, ., EMPTY, ,, flowScope, ,, flowScope, ), ;, }]
[., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, ), ?, BooleanLiteralSet, ., BOTH, :, BooleanLiteralSet, ., EMPTY, ,, flowScope]
[), ., isSubtype, (, jsType, ), ?, BooleanLiteralSet, ., BOTH, :, BooleanLiteralSet, ., EMPTY, ,, flowScope, ,, flowScope, ), ;]
[), ?, BooleanLiteralSet, ., BOTH, :, BooleanLiteralSet, ., EMPTY, ,, flowScope, ,, flowScope, ), ;, }, private, void, redeclareSimpleVar, (]
[:, BooleanLiteralSet, ., EMPTY, ,, flowScope, ,, flowScope, ), ;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,, Node, nameNode]
[., BOTH, :, BooleanLiteralSet, ., EMPTY, ,, flowScope, ,, flowScope, ), ;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,]
[,, flowScope, ,, flowScope, ), ;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,, Node, nameNode, ,, JSType, varType, )]
[., EMPTY, ,, flowScope, ,, flowScope, ), ;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,, Node, nameNode, ,, JSType]
[,, flowScope, ), ;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,, Node, nameNode, ,, JSType, varType, ), {, Preconditions]
[), ;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,, Node, nameNode, ,, JSType, varType, ), {, Preconditions, ., checkState]
[;, String, varName, =, nameNode, ., getString, (, ), ;, if, (, varType, ==, null, ), {, varType, =, getNativeType]
[., checkState, (, nameNode, ., isName, (, ), ), ;, String, varName, =, nameNode, ., getString, (, ), ;, if]
[), ;, String, varName, =, nameNode, ., getString, (, ), ;, if, (, varType, ==, null, ), {, varType, =]
[., isName, (, ), ), ;, String, varName, =, nameNode, ., getString, (, ), ;, if, (, varType, ==, null]
[;, if, (, varType, ==, null, ), {, varType, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, if, (]
[., getString, (, ), ;, if, (, varType, ==, null, ), {, varType, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[), {, varType, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, if, (, isUnflowable, (, syntacticScope, ., getVar, (]
[==, null, ), {, varType, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, if, (, isUnflowable, (, syntacticScope, .]
[), {, varType, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, if, (, isUnflowable, (, syntacticScope, ., getVar, (]
[=, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, if, (, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), )]
[;, }, if, (, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ), {, return, ;, }, scope, .]
[), ;, }, if, (, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ), {, return, ;, }, scope]
[., UNKNOWN_TYPE, ), ;, }, if, (, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ), {, return, ;]
[), {, return, ;, }, scope, ., inferSlotType, (, varName, ,, varType, ), ;, }, private, boolean, isUnflowable, (, Var]
[), ), {, return, ;, }, scope, ., inferSlotType, (, varName, ,, varType, ), ;, }, private, boolean, isUnflowable, (]
[., getVar, (, varName, ), ), ), {, return, ;, }, scope, ., inferSlotType, (, varName, ,, varType, ), ;]
[), ), ), {, return, ;, }, scope, ., inferSlotType, (, varName, ,, varType, ), ;, }, private, boolean, isUnflowable]
[;, }, private, boolean, isUnflowable, (, Var, v, ), {, return, v, !=, null, &&, v, ., isLocal, (, )]
[., inferSlotType, (, varName, ,, varType, ), ;, }, private, boolean, isUnflowable, (, Var, v, ), {, return, v, !=]
[,, varType, ), ;, }, private, boolean, isUnflowable, (, Var, v, ), {, return, v, !=, null, &&, v, .]
[), ;, }, private, boolean, isUnflowable, (, Var, v, ), {, return, v, !=, null, &&, v, ., isLocal, (]
[;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if]
[&&, v, ., getScope, (, ), ==, syntacticScope, ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType]
[&&, v, ., isMarkedEscaped, (, ), &&, v, ., getScope, (, ), ==, syntacticScope, ;, }, private, JSType, getJSType, (]
[&&, v, ., isLocal, (, ), &&, v, ., isMarkedEscaped, (, ), &&, v, ., getScope, (, ), ==, syntacticScope]
[!=, null, &&, v, ., isLocal, (, ), &&, v, ., isMarkedEscaped, (, ), &&, v, ., getScope, (, )]
[&&, v, ., isLocal, (, ), &&, v, ., isMarkedEscaped, (, ), &&, v, ., getScope, (, ), ==, syntacticScope]
[&&, v, ., isMarkedEscaped, (, ), &&, v, ., getScope, (, ), ==, syntacticScope, ;, }, private, JSType, getJSType, (]
[., isLocal, (, ), &&, v, ., isMarkedEscaped, (, ), &&, v, ., getScope, (, ), ==, syntacticScope, ;, }]
[&&, v, ., getScope, (, ), ==, syntacticScope, ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType]
[., isMarkedEscaped, (, ), &&, v, ., getScope, (, ), ==, syntacticScope, ;, }, private, JSType, getJSType, (, Node, n]
[;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if]
[==, syntacticScope, ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, )]
[., getScope, (, ), ==, syntacticScope, ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n]
[;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if]
[;, if, (, jsType, ==, null, ), {, return, unknownType, ;, }, else, {, return, jsType, ;, }, }, private]
[., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, unknownType, ;, }, else, {, return, jsType]
[), {, return, unknownType, ;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, )]
[==, null, ), {, return, unknownType, ;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative]
[), {, return, unknownType, ;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, )]
[;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, registry, .]
[;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, registry, ., getNativeType, (, typeId, ), ;, }]
[;, }, }]
[., getNativeType, (, typeId, ), ;, }, }]
[), ;, }, }]
