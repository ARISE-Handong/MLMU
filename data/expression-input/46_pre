[category, ., CategoryDataset, ;, public, class, SubCategoryAxis, extends, CategoryAxis, implements, Cloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[., CategoryDataset, ;, public, class, SubCategoryAxis, extends, CategoryAxis, implements, Cloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[,, Serializable, {, private, static, final, long, serialVersionUID, =, -, 1279463299793228344L, ;, private, List, subCategories, ;, private, Font, subLabelFont, =]
[private, static, final, long, serialVersionUID, =, -, 1279463299793228344L, ;, private, List, subCategories, ;, private, Font, subLabelFont, =, new, Font, (]
[final, long, serialVersionUID, =, -, 1279463299793228344L, ;, private, List, subCategories, ;, private, Font, subLabelFont, =, new, Font, (, "Tahoma", ,]
[final, long, serialVersionUID, =, -, 1279463299793228344L, ;, private, List, subCategories, ;, private, Font, subLabelFont, =, new, Font, (, "Tahoma", ,]
[-, 1279463299793228344L, ;, private, List, subCategories, ;, private, Font, subLabelFont, =, new, Font, (, "Tahoma", ,, Font, ., PLAIN, ,]
[Font, subLabelFont, =, new, Font, (, "Tahoma", ,, Font, ., PLAIN, ,, 10, ), ;, private, transient, Paint, subLabelPaint, =]
[Font, subLabelFont, =, new, Font, (, "Tahoma", ,, Font, ., PLAIN, ,, 10, ), ;, private, transient, Paint, subLabelPaint, =]
[), ;, private, transient, Paint, subLabelPaint, =, Color, ., black, ;, public, SubCategoryAxis, (, String, label, ), {, super, (]
[transient, Paint, subLabelPaint, =, Color, ., black, ;, public, SubCategoryAxis, (, String, label, ), {, super, (, label, ), ;]
[transient, Paint, subLabelPaint, =, Color, ., black, ;, public, SubCategoryAxis, (, String, label, ), {, super, (, label, ), ;]
[Color, ., black, ;, public, SubCategoryAxis, (, String, label, ), {, super, (, label, ), ;, this, ., subCategories, =]
[new, java, ., util, ., ArrayList, (, ), ;, }, public, void, addSubCategory, (, Comparable, subCategory, ), {, if, (]
[new, java, ., util, ., ArrayList, (, ), ;, }, public, void, addSubCategory, (, Comparable, subCategory, ), {, if, (]
[., util, ., ArrayList, (, ), ;, }, public, void, addSubCategory, (, Comparable, subCategory, ), {, if, (, subCategory, ==]
[(, ), ;, }, public, void, addSubCategory, (, Comparable, subCategory, ), {, if, (, subCategory, ==, null, ), {, throw]
[}, public, void, addSubCategory, (, Comparable, subCategory, ), {, if, (, subCategory, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Comparable, subCategory, ), {, if, (, subCategory, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subcategory' axis.", ), ;, }]
[(, Comparable, subCategory, ), {, if, (, subCategory, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subcategory' axis.", ), ;, }]
[(, Comparable, subCategory, ), {, if, (, subCategory, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subcategory' axis.", ), ;, }]
[(, subCategory, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subcategory' axis.", ), ;, }, this, ., subCategories, ., add, (]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'subcategory' axis.", ), ;, }, this, ., subCategories, ., add, (, subCategory, ), ;]
[{, throw, new, IllegalArgumentException, (, "Null 'subcategory' axis.", ), ;, }, this, ., subCategories, ., add, (, subCategory, ), ;, notifyListeners, (]
[IllegalArgumentException, (, "Null 'subcategory' axis.", ), ;, }, this, ., subCategories, ., add, (, subCategory, ), ;, notifyListeners, (, new, AxisChangeEvent, (]
[subCategory, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font, getSubLabelFont, (, ), {, return]
[subCategory, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font, getSubLabelFont, (, ), {, return]
[getSubLabelFont, (, ), {, return, this, ., subLabelFont, ;, }, public, void, setSubLabelFont, (, Font, font, ), {, if, (]
[getSubLabelFont, (, ), {, return, this, ., subLabelFont, ;, }, public, void, setSubLabelFont, (, Font, font, ), {, if, (]
[), {, return, this, ., subLabelFont, ;, }, public, void, setSubLabelFont, (, Font, font, ), {, if, (, font, ==]
[., subLabelFont, ;, }, public, void, setSubLabelFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw]
[}, public, void, setSubLabelFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Font, font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }]
[(, Font, font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }]
[{, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., subLabelFont, =]
[(, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., subLabelFont, =, font, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., subLabelFont, =, font, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., subLabelFont, =, font, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, font, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getSubLabelPaint, (, ), {, return]
[=, font, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getSubLabelPaint, (, ), {, return]
[getSubLabelPaint, (, ), {, return, this, ., subLabelPaint, ;, }, public, void, setSubLabelPaint, (, Paint, paint, ), {, if, (]
[getSubLabelPaint, (, ), {, return, this, ., subLabelPaint, ;, }, public, void, setSubLabelPaint, (, Paint, paint, ), {, if, (]
[), {, return, this, ., subLabelPaint, ;, }, public, void, setSubLabelPaint, (, Paint, paint, ), {, if, (, paint, ==]
[., subLabelPaint, ;, }, public, void, setSubLabelPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[}, public, void, setSubLabelPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[{, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., subLabelPaint, =]
[(, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., subLabelPaint, =, paint, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., subLabelPaint, =, paint, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., subLabelPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (]
[reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (]
[reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (]
[Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (, space, ==]
[Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (, space, ==, null, ), {]
[,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (, space, ==, null, ), {, space, =]
[space, ), {, if, (, space, ==, null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (]
[), {, if, (, space, ==, null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !]
[null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return]
[space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }]
[new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }, space, =]
[new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }, space, =]
[;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }, space, =, super, ., reserveSpace, (]
[if, (, !, isVisible, (, ), ), {, return, space, ;, }, space, =, super, ., reserveSpace, (, g2, ,]
[!, isVisible, (, ), ), {, return, space, ;, }, space, =, super, ., reserveSpace, (, g2, ,, plot, ,]
[(, ), ), {, return, space, ;, }, space, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,]
[), {, return, space, ;, }, space, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,]
[space, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, double, maxdim, =]
[super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, double, maxdim, =, getMaxDim, (]
[reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, double, maxdim, =, getMaxDim, (, g2, ,]
[,, plotArea, ,, edge, ,, space, ), ;, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, if, (]
[,, plotArea, ,, edge, ,, space, ), ;, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, if, (]
[,, space, ), ;, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[(, g2, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, space, ., add, (]
[,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, space, ., add, (, maxdim, ,]
[., isTopOrBottom, (, edge, ), ), {, space, ., add, (, maxdim, ,, edge, ), ;, }, else, if, (]
[., isTopOrBottom, (, edge, ), ), {, space, ., add, (, maxdim, ,, edge, ), ;, }, else, if, (]
[), ), {, space, ., add, (, maxdim, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[., add, (, maxdim, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[., add, (, maxdim, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, space, ., add, (]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, space, ., add, (, maxdim, ,]
[(, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, space, ., add, (, maxdim, ,, edge, ), ;, }, return]
[;, }, return, space, ;, }, private, double, getMaxDim, (, Graphics2D, g2, ,, RectangleEdge, edge, ), {, double, result, =]
[return, space, ;, }, private, double, getMaxDim, (, Graphics2D, g2, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;]
[return, space, ;, }, private, double, getMaxDim, (, Graphics2D, g2, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;]
[private, double, getMaxDim, (, Graphics2D, g2, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, g2, ., setFont, (]
[private, double, getMaxDim, (, Graphics2D, g2, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, g2, ., setFont, (]
[edge, ), {, double, result, =, 0.0, ;, g2, ., setFont, (, this, ., subLabelFont, ), ;, FontMetrics, fm, =]
[edge, ), {, double, result, =, 0.0, ;, g2, ., setFont, (, this, ., subLabelFont, ), ;, FontMetrics, fm, =]
[., setFont, (, this, ., subLabelFont, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Iterator, iterator, =]
[., setFont, (, this, ., subLabelFont, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Iterator, iterator, =]
[., setFont, (, this, ., subLabelFont, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Iterator, iterator, =]
[=, g2, ., getFontMetrics, (, ), ;, Iterator, iterator, =, this, ., subCategories, ., iterator, (, ), ;, while, (]
[=, g2, ., getFontMetrics, (, ), ;, Iterator, iterator, =, this, ., subCategories, ., iterator, (, ), ;, while, (]
[this, ., subCategories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, subcategory, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, subcategory, =, (, Comparable, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, subcategory, =, (, Comparable, )]
[hasNext, (, ), ), {, Comparable, subcategory, =, (, Comparable, ), iterator, ., next, (, ), ;, String, label, =]
[hasNext, (, ), ), {, Comparable, subcategory, =, (, Comparable, ), iterator, ., next, (, ), ;, String, label, =]
[Comparable, ), iterator, ., next, (, ), ;, String, label, =, subcategory, ., toString, (, ), ;, Rectangle2D, bounds, =]
[Comparable, ), iterator, ., next, (, ), ;, String, label, =, subcategory, ., toString, (, ), ;, Rectangle2D, bounds, =]
[next, (, ), ;, String, label, =, subcategory, ., toString, (, ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (]
[), ;, String, label, =, subcategory, ., toString, (, ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, label, ,]
[String, label, =, subcategory, ., toString, (, ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, label, ,, g2, ,]
[(, ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, label, ,, g2, ,, fm, ), ;, double, dim, =]
[bounds, =, TextUtilities, ., getTextBounds, (, label, ,, g2, ,, fm, ), ;, double, dim, =, 0.0, ;, if, (]
[bounds, =, TextUtilities, ., getTextBounds, (, label, ,, g2, ,, fm, ), ;, double, dim, =, 0.0, ;, if, (]
[getTextBounds, (, label, ,, g2, ,, fm, ), ;, double, dim, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (]
[g2, ,, fm, ), ;, double, dim, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[fm, ), ;, double, dim, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, dim, =]
[fm, ), ;, double, dim, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, dim, =]
[(, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, dim, =, bounds, ., getWidth, (, ), ;, }, else, {]
[., isLeftOrRight, (, edge, ), ), {, dim, =, bounds, ., getWidth, (, ), ;, }, else, {, dim, =]
[., isLeftOrRight, (, edge, ), ), {, dim, =, bounds, ., getWidth, (, ), ;, }, else, {, dim, =]
[dim, =, bounds, ., getWidth, (, ), ;, }, else, {, dim, =, bounds, ., getHeight, (, ), ;, }]
[bounds, ., getWidth, (, ), ;, }, else, {, dim, =, bounds, ., getHeight, (, ), ;, }, result, =]
[bounds, ., getWidth, (, ), ;, }, else, {, dim, =, bounds, ., getHeight, (, ), ;, }, result, =]
[), ;, }, else, {, dim, =, bounds, ., getHeight, (, ), ;, }, result, =, Math, ., max, (]
[}, else, {, dim, =, bounds, ., getHeight, (, ), ;, }, result, =, Math, ., max, (, result, ,]
[bounds, ., getHeight, (, ), ;, }, result, =, Math, ., max, (, result, ,, dim, ), ;, }, return]
[g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, if, (]
[,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, if, (, !]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, if, (, !, isVisible, (, ), ), {, return]
[,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, if, (, !, isVisible, (, ), ), {, return, new, AxisState, (]
[), {, if, (, !, isVisible, (, ), ), {, return, new, AxisState, (, cursor, ), ;, }, if, (]
[isVisible, (, ), ), {, return, new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {]
[), ), {, return, new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (]
[{, return, new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,]
[new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,]
[(, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,]
[isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, AxisState, state, =]
[), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (]
[(, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;]
[,, cursor, ,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, state, =]
[,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, state, =, drawSubCategoryLabels, (]
[,, edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, state, =, drawSubCategoryLabels, (, g2, ,]
[), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, state, =, drawSubCategoryLabels, (, g2, ,, plotArea, ,]
[}, AxisState, state, =, new, AxisState, (, cursor, ), ;, state, =, drawSubCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,]
[state, =, new, AxisState, (, cursor, ), ;, state, =, drawSubCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[new, AxisState, (, cursor, ), ;, state, =, drawSubCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,]
[cursor, ), ;, state, =, drawSubCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;]
[;, state, =, drawSubCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =]
[=, drawSubCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawCategoryLabels, (]
[(, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,]
[,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,]
[,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,]
[,, edge, ,, state, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[,, state, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,]
[plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;]
[;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =]
[=, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (]
[,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,]
[,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,]
[,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,]
[,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,]
[,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,]
[drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, return]
[g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ,, PlotRenderingInfo, plotState, ), {, if, (]
[g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ,, PlotRenderingInfo, plotState, ), {, if, (]
[Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ,, PlotRenderingInfo, plotState, ), {, if, (, state, ==]
[dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ,, PlotRenderingInfo, plotState, ), {, if, (, state, ==, null, ), {, throw]
[edge, ,, AxisState, state, ,, PlotRenderingInfo, plotState, ), {, if, (, state, ==, null, ), {, throw, new, IllegalArgumentException, (]
[,, PlotRenderingInfo, plotState, ), {, if, (, state, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }]
[,, PlotRenderingInfo, plotState, ), {, if, (, state, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }]
[{, if, (, state, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, g2, ., setFont, (]
[{, if, (, state, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, g2, ., setFont, (]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, g2, ., setFont, (, this, ., subLabelFont, ), ;]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, g2, ., setFont, (, this, ., subLabelFont, ), ;]
[new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, g2, ., setFont, (, this, ., subLabelFont, ), ;, g2, ., setPaint, (]
[new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, g2, ., setFont, (, this, ., subLabelFont, ), ;, g2, ., setPaint, (]
[., setFont, (, this, ., subLabelFont, ), ;, g2, ., setPaint, (, this, ., subLabelPaint, ), ;, CategoryPlot, plot, =]
[this, ., subLabelFont, ), ;, g2, ., setPaint, (, this, ., subLabelPaint, ), ;, CategoryPlot, plot, =, (, CategoryPlot, )]
[setPaint, (, this, ., subLabelPaint, ), ;, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, int, categoryCount, =]
[), ;, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, int, categoryCount, =, 0, ;, CategoryDataset, dataset, =]
[), ;, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, int, categoryCount, =, 0, ;, CategoryDataset, dataset, =]
[getPlot, (, ), ;, int, categoryCount, =, 0, ;, CategoryDataset, dataset, =, plot, ., getDataset, (, ), ;, if, (]
[getPlot, (, ), ;, int, categoryCount, =, 0, ;, CategoryDataset, dataset, =, plot, ., getDataset, (, ), ;, if, (]
[), ;, int, categoryCount, =, 0, ;, CategoryDataset, dataset, =, plot, ., getDataset, (, ), ;, if, (, dataset, !=]
[categoryCount, =, 0, ;, CategoryDataset, dataset, =, plot, ., getDataset, (, ), ;, if, (, dataset, !=, null, ), {]
[0, ;, CategoryDataset, dataset, =, plot, ., getDataset, (, ), ;, if, (, dataset, !=, null, ), {, categoryCount, =]
[0, ;, CategoryDataset, dataset, =, plot, ., getDataset, (, ), ;, if, (, dataset, !=, null, ), {, categoryCount, =]
[;, if, (, dataset, !=, null, ), {, categoryCount, =, dataset, ., getColumnCount, (, ), ;, }, double, maxdim, =]
[(, dataset, !=, null, ), {, categoryCount, =, dataset, ., getColumnCount, (, ), ;, }, double, maxdim, =, getMaxDim, (]
[!=, null, ), {, categoryCount, =, dataset, ., getColumnCount, (, ), ;, }, double, maxdim, =, getMaxDim, (, g2, ,]
[getColumnCount, (, ), ;, }, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, for, (, int, categoryIndex, =]
[), ;, }, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, for, (, int, categoryIndex, =, 0, ;]
[), ;, }, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, for, (, int, categoryIndex, =, 0, ;]
[}, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, for, (, int, categoryIndex, =, 0, ;, categoryIndex, <]
[maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, for, (, int, categoryIndex, =, 0, ;, categoryIndex, <, categoryCount, ;]
[maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, for, (, int, categoryIndex, =, 0, ;, categoryIndex, <, categoryCount, ;]
[), ;, for, (, int, categoryIndex, =, 0, ;, categoryIndex, <, categoryCount, ;, categoryIndex, ++, ), {, double, x0, =]
[categoryIndex, =, 0, ;, categoryIndex, <, categoryCount, ;, categoryIndex, ++, ), {, double, x0, =, 0.0, ;, double, x1, =]
[<, categoryCount, ;, categoryIndex, ++, ), {, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =]
[), {, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =]
[=, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (]
[=, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (]
[;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==]
[;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==]
[;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =]
[0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (]
[double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,]
[=, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,]
[edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;]
[RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =]
[TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (]
[{, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,]
[=, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,]
[categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;]
[dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =]
[dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =]
[=, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), ;]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), ;, y0, =]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), ;, y0, =]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), ;, y0, =, y1, -]
[), ;, y1, =, state, ., getCursor, (, ), ;, y0, =, y1, -, maxdim, ;, }, else, if, (]
[), ;, y1, =, state, ., getCursor, (, ), ;, y0, =, y1, -, maxdim, ;, }, else, if, (]
[y1, =, state, ., getCursor, (, ), ;, y0, =, y1, -, maxdim, ;, }, else, if, (, edge, ==]
[y1, =, state, ., getCursor, (, ), ;, y0, =, y1, -, maxdim, ;, }, else, if, (, edge, ==]
[(, ), ;, y0, =, y1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[;, y0, =, y1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =]
[=, y1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (]
[-, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,]
[edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;]
[RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =]
[BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (]
[{, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,]
[=, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,]
[categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;]
[dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y0, =]
[dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y0, =]
[=, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), ;]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), ;, y1, =]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), ;, y1, =]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), ;, y1, =, y0, +]
[), ;, y0, =, state, ., getCursor, (, ), ;, y1, =, y0, +, maxdim, ;, }, else, if, (]
[), ;, y0, =, state, ., getCursor, (, ), ;, y1, =, y0, +, maxdim, ;, }, else, if, (]
[y0, =, state, ., getCursor, (, ), ;, y1, =, y0, +, maxdim, ;, }, else, if, (, edge, ==]
[y0, =, state, ., getCursor, (, ), ;, y1, =, y0, +, maxdim, ;, }, else, if, (, edge, ==]
[(, ), ;, y1, =, y0, +, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[;, y1, =, y0, +, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =]
[=, y0, +, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (]
[+, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,]
[edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;]
[RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =]
[LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (]
[{, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,]
[=, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,]
[categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;]
[dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =]
[dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =]
[=, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), ;]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), ;, x0, =]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), ;, x0, =]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), ;, x0, =, x1, -]
[), ;, x1, =, state, ., getCursor, (, ), ;, x0, =, x1, -, maxdim, ;, }, else, if, (]
[), ;, x1, =, state, ., getCursor, (, ), ;, x0, =, x1, -, maxdim, ;, }, else, if, (]
[x1, =, state, ., getCursor, (, ), ;, x0, =, x1, -, maxdim, ;, }, else, if, (, edge, ==]
[x1, =, state, ., getCursor, (, ), ;, x0, =, x1, -, maxdim, ;, }, else, if, (, edge, ==]
[(, ), ;, x0, =, x1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[;, x0, =, x1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =]
[=, x1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (]
[-, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,]
[edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;]
[RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =]
[RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (]
[{, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,]
[=, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,]
[categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;]
[dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x0, =]
[dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x0, =]
[=, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), ;]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), ;, x1, =]
[(, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), ;, x1, =]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), ;, x1, =, x0, +]
[), ;, x0, =, state, ., getCursor, (, ), ;, x1, =, x0, +, maxdim, ;, }, Rectangle2D, area, =]
[., getCursor, (, ), ;, x1, =, x0, +, maxdim, ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (]
[(, ), ;, x1, =, x0, +, maxdim, ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,]
[;, x1, =, x0, +, maxdim, ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,]
[x1, =, x0, +, maxdim, ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (]
[x1, =, x0, +, maxdim, ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (]
[x0, +, maxdim, ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -]
[;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,]
[}, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,, (]
[}, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,, (]
[area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,, (, y1, -]
[x0, ,, y0, ,, (, x1, -, x0, ), ,, (, y1, -, y0, ), ), ;, int, subCategoryCount, =]
[x0, ,, y0, ,, (, x1, -, x0, ), ,, (, y1, -, y0, ), ), ;, int, subCategoryCount, =]
[x0, ,, y0, ,, (, x1, -, x0, ), ,, (, y1, -, y0, ), ), ;, int, subCategoryCount, =]
[y1, -, y0, ), ), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =]
[), ), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =, (, float, )]
[), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =, (, float, ), (]
[), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =, (, float, ), (]
[;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =, (, float, ), (, (]
[;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =, (, float, ), (, (]
[subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =, (, float, ), (, (, x1, -]
[., subCategories, ., size, (, ), ;, float, width, =, (, float, ), (, (, x1, -, x0, ), /]
[;, float, width, =, (, float, ), (, (, x1, -, x0, ), /, subCategoryCount, ), ;, float, height, =]
[=, (, float, ), (, (, x1, -, x0, ), /, subCategoryCount, ), ;, float, height, =, (, float, )]
[(, float, ), (, (, x1, -, x0, ), /, subCategoryCount, ), ;, float, height, =, (, float, ), (]
[(, float, ), (, (, x1, -, x0, ), /, subCategoryCount, ), ;, float, height, =, (, float, ), (]
[float, ), (, (, x1, -, x0, ), /, subCategoryCount, ), ;, float, height, =, (, float, ), (, (]
[float, ), (, (, x1, -, x0, ), /, subCategoryCount, ), ;, float, height, =, (, float, ), (, (]
[(, (, x1, -, x0, ), /, subCategoryCount, ), ;, float, height, =, (, float, ), (, (, y1, -]
[-, x0, ), /, subCategoryCount, ), ;, float, height, =, (, float, ), (, (, y1, -, y0, ), /]
[;, float, height, =, (, float, ), (, (, y1, -, y0, ), /, subCategoryCount, ), ;, float, xx, =]
[float, ), (, (, y1, -, y0, ), /, subCategoryCount, ), ;, float, xx, =, 0.0f, ;, float, yy, =]
[), /, subCategoryCount, ), ;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =]
[subCategoryCount, ), ;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =, 0, ;]
[subCategoryCount, ), ;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =, 0, ;]
[;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =, 0, ;, i, <]
[xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =, 0, ;, i, <, subCategoryCount, ;]
[xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =, 0, ;, i, <, subCategoryCount, ;]
[=, 0.0f, ;, for, (, int, i, =, 0, ;, i, <, subCategoryCount, ;, i, ++, ), {, if, (]
[=, 0.0f, ;, for, (, int, i, =, 0, ;, i, <, subCategoryCount, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, subCategoryCount, ;, i, ++, ), {, if, (, RectangleEdge, ., isTopOrBottom, (]
[0, ;, i, <, subCategoryCount, ;, i, ++, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[i, <, subCategoryCount, ;, i, ++, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =]
[;, i, ++, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, )]
[i, ++, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, ), (]
[i, ++, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, ), (]
[), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, ), (, x0, +]
[), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, ), (, x0, +]
[{, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, ), (, x0, +, (]
[{, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, ), (, x0, +, (]
[(, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, ), (, x0, +, (, i, +]
[isTopOrBottom, (, edge, ), ), {, xx, =, (, float, ), (, x0, +, (, i, +, 0.5, ), *]
[), ), {, xx, =, (, float, ), (, x0, +, (, i, +, 0.5, ), *, width, ), ;]
[{, xx, =, (, float, ), (, x0, +, (, i, +, 0.5, ), *, width, ), ;, yy, =]
[(, float, ), (, x0, +, (, i, +, 0.5, ), *, width, ), ;, yy, =, (, float, )]
[(, float, ), (, x0, +, (, i, +, 0.5, ), *, width, ), ;, yy, =, (, float, )]
[0.5, ), *, width, ), ;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {]
[*, width, ), ;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx, =]
[;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx, =, (, float, )]
[;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx, =, (, float, )]
[area, ., getCenterY, (, ), ;, }, else, {, xx, =, (, float, ), area, ., getCenterX, (, ), ;]
[getCenterY, (, ), ;, }, else, {, xx, =, (, float, ), area, ., getCenterX, (, ), ;, yy, =]
[;, }, else, {, xx, =, (, float, ), area, ., getCenterX, (, ), ;, yy, =, (, float, )]
[}, else, {, xx, =, (, float, ), area, ., getCenterX, (, ), ;, yy, =, (, float, ), (]
[}, else, {, xx, =, (, float, ), area, ., getCenterX, (, ), ;, yy, =, (, float, ), (]
[{, xx, =, (, float, ), area, ., getCenterX, (, ), ;, yy, =, (, float, ), (, y0, +]
[{, xx, =, (, float, ), area, ., getCenterX, (, ), ;, yy, =, (, float, ), (, y0, +]
[xx, =, (, float, ), area, ., getCenterX, (, ), ;, yy, =, (, float, ), (, y0, +, (]
[xx, =, (, float, ), area, ., getCenterX, (, ), ;, yy, =, (, float, ), (, y0, +, (]
[(, float, ), area, ., getCenterX, (, ), ;, yy, =, (, float, ), (, y0, +, (, i, +]
[area, ., getCenterX, (, ), ;, yy, =, (, float, ), (, y0, +, (, i, +, 0.5, ), *]
[=, (, float, ), (, y0, +, (, i, +, 0.5, ), *, height, ), ;, }, String, label, =]
[=, (, float, ), (, y0, +, (, i, +, 0.5, ), *, height, ), ;, }, String, label, =]
[=, (, float, ), (, y0, +, (, i, +, 0.5, ), *, height, ), ;, }, String, label, =]
[=, (, float, ), (, y0, +, (, i, +, 0.5, ), *, height, ), ;, }, String, label, =]
[+, (, i, +, 0.5, ), *, height, ), ;, }, String, label, =, this, ., subCategories, ., get, (]
[height, ), ;, }, String, label, =, this, ., subCategories, ., get, (, i, ), ., toString, (, ), ;]
[height, ), ;, }, String, label, =, this, ., subCategories, ., get, (, i, ), ., toString, (, ), ;]
[String, label, =, this, ., subCategories, ., get, (, i, ), ., toString, (, ), ;, TextUtilities, ., drawRotatedString, (]
[=, this, ., subCategories, ., get, (, i, ), ., toString, (, ), ;, TextUtilities, ., drawRotatedString, (, label, ,]
[., subCategories, ., get, (, i, ), ., toString, (, ), ;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,]
[., get, (, i, ), ., toString, (, ), ;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,, xx, ,]
[(, i, ), ., toString, (, ), ;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,, xx, ,, yy, ,]
[(, i, ), ., toString, (, ), ;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,, xx, ,, yy, ,]
[toString, (, ), ;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,, xx, ,, yy, ,, TextAnchor, ., CENTER, ,]
[), ;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,, xx, ,, yy, ,, TextAnchor, ., CENTER, ,, 0.0, ,]
[), ;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,, xx, ,, yy, ,, TextAnchor, ., CENTER, ,, 0.0, ,]
[,, xx, ,, yy, ,, TextAnchor, ., CENTER, ,, 0.0, ,, TextAnchor, ., CENTER, ), ;, }, }, if, (]
[,, xx, ,, yy, ,, TextAnchor, ., CENTER, ,, 0.0, ,, TextAnchor, ., CENTER, ), ;, }, }, if, (]
[,, TextAnchor, ., CENTER, ,, 0.0, ,, TextAnchor, ., CENTER, ), ;, }, }, if, (, edge, ., equals, (]
[,, TextAnchor, ., CENTER, ,, 0.0, ,, TextAnchor, ., CENTER, ), ;, }, }, if, (, edge, ., equals, (]
[CENTER, ), ;, }, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =]
[;, }, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =, maxdim, ;]
[;, }, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =, maxdim, ;]
[(, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =, maxdim, ;, state, ., cursorUp, (]
[TOP, ), ), {, double, h, =, maxdim, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (]
[TOP, ), ), {, double, h, =, maxdim, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (]
[double, h, =, maxdim, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (, edge, ., equals, (]
[double, h, =, maxdim, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (, edge, ., equals, (]
[h, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =]
[;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, maxdim, ;]
[;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, maxdim, ;]
[(, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, maxdim, ;, state, ., cursorDown, (]
[BOTTOM, ), ), {, double, h, =, maxdim, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (]
[BOTTOM, ), ), {, double, h, =, maxdim, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (]
[), {, double, h, =, maxdim, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (, edge, ==]
[), {, double, h, =, maxdim, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (, edge, ==]
[., cursorDown, (, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =]
[(, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =, maxdim, ;]
[(, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =, maxdim, ;]
[}, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =, maxdim, ;, state, ., cursorLeft, (]
[., LEFT, ), {, double, w, =, maxdim, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (]
[., LEFT, ), {, double, w, =, maxdim, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (]
[), {, double, w, =, maxdim, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==]
[), {, double, w, =, maxdim, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==]
[., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =]
[(, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =, maxdim, ;]
[(, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =, maxdim, ;]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =, maxdim, ;, state, ., cursorRight, (]
[==, RectangleEdge, ., RIGHT, ), {, double, w, =, maxdim, ;, state, ., cursorRight, (, w, ), ;, }, return]
[cursorRight, (, w, ), ;, }, return, state, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[cursorRight, (, w, ), ;, }, return, state, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[w, ), ;, }, return, state, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[return, state, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, obj, instanceof, SubCategoryAxis, &&]
[obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, obj, instanceof, SubCategoryAxis, &&]
[(, obj, ==, this, ), {, return, true, ;, }, if, (, obj, instanceof, SubCategoryAxis, &&, super, ., equals, (]
[true, ;, }, if, (, obj, instanceof, SubCategoryAxis, &&, super, ., equals, (, obj, ), ), {, SubCategoryAxis, axis, =]
[if, (, obj, instanceof, SubCategoryAxis, &&, super, ., equals, (, obj, ), ), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, )]
[SubCategoryAxis, &&, super, ., equals, (, obj, ), ), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if, (]
[&&, super, ., equals, (, obj, ), ), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if, (, !]
[&&, super, ., equals, (, obj, ), ), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if, (, !]
[&&, super, ., equals, (, obj, ), ), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if, (, !]
[), ), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if, (, !, this, ., subCategories, ., equals, (]
[), ), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if, (, !, this, ., subCategories, ., equals, (]
[SubCategoryAxis, ), obj, ;, if, (, !, this, ., subCategories, ., equals, (, axis, ., subCategories, ), ), {, return]
[(, !, this, ., subCategories, ., equals, (, axis, ., subCategories, ), ), {, return, false, ;, }, if, (]
[!, this, ., subCategories, ., equals, (, axis, ., subCategories, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., subCategories, ., equals, (, axis, ., subCategories, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., subCategories, ., equals, (, axis, ., subCategories, ), ), {, return, false, ;, }, if, (, !]
[(, axis, ., subCategories, ), ), {, return, false, ;, }, if, (, !, this, ., subLabelFont, ., equals, (]
[(, axis, ., subCategories, ), ), {, return, false, ;, }, if, (, !, this, ., subLabelFont, ., equals, (]
[return, false, ;, }, if, (, !, this, ., subLabelFont, ., equals, (, axis, ., subLabelFont, ), ), {, return]
[(, !, this, ., subLabelFont, ., equals, (, axis, ., subLabelFont, ), ), {, return, false, ;, }, if, (]
[!, this, ., subLabelFont, ., equals, (, axis, ., subLabelFont, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., subLabelFont, ., equals, (, axis, ., subLabelFont, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., subLabelFont, ., equals, (, axis, ., subLabelFont, ), ), {, return, false, ;, }, if, (, !]
[(, axis, ., subLabelFont, ), ), {, return, false, ;, }, if, (, !, this, ., subLabelPaint, ., equals, (]
[(, axis, ., subLabelFont, ), ), {, return, false, ;, }, if, (, !, this, ., subLabelPaint, ., equals, (]
[return, false, ;, }, if, (, !, this, ., subLabelPaint, ., equals, (, axis, ., subLabelPaint, ), ), {, return]
[if, (, !, this, ., subLabelPaint, ., equals, (, axis, ., subLabelPaint, ), ), {, return, false, ;, }, return]
[., subLabelPaint, ., equals, (, axis, ., subLabelPaint, ), ), {, return, false, ;, }, return, true, ;, }, return]
[;, }, return, true, ;, }, return, false, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[;, }, return, true, ;, }, return, false, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[return, false, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[return, false, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., subLabelPaint, ,]
[this, ., subLabelPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[this, ., subLabelPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., subLabelPaint, =]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., subLabelPaint, =]
[), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., subLabelPaint, =, SerialUtilities, ., readPaint, (]
