[;, private, static, final, int, HASH_SEED, =, 31, ;, private, static, final, String, DUMMY_PATTERN, =, "", ;, private, static, final]
[;, private, static, final, int, HASH_SEED, =, 31, ;, private, static, final, String, DUMMY_PATTERN, =, "", ;, private, static, final]
[;, private, static, final, String, DUMMY_PATTERN, =, "", ;, private, static, final, String, ESCAPED_QUOTE, =, "''", ;, private, static, final]
[;, private, static, final, String, ESCAPED_QUOTE, =, "''", ;, private, static, final, char, START_FMT, =, ',', ;, private, static, final]
[;, private, static, final, char, START_FMT, =, ',', ;, private, static, final, char, END_FE, =, '}', ;, private, static, final]
[;, private, static, final, char, END_FE, =, '}', ;, private, static, final, char, START_FE, =, '{', ;, private, static, final]
[;, private, static, final, char, START_FE, =, '{', ;, private, static, final, char, QUOTE, =, '\'', ;, private, String, toPattern]
[;, private, static, final, char, QUOTE, =, '\'', ;, private, String, toPattern, ;, private, final, Map, <, String, ,, ?]
[;, private, String, toPattern, ;, private, final, Map, <, String, ,, ?, extends, FormatFactory, >, registry, ;, public, ExtendedMessageFormat, (]
[,, Locale, ., getDefault, (, ), ), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Locale, locale, )]
[), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Locale, locale, ), {, this, (, pattern, ,, locale]
[., getDefault, (, ), ), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Locale, locale, ), {, this]
[,, locale, ,, null, ), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Map, <, String, ,, ?]
[,, null, ), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Map, <, String, ,, ?, extends, FormatFactory]
[), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Map, <, String, ,, ?, extends, FormatFactory, >, registry]
[,, Locale, ., getDefault, (, ), ,, registry, ), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Locale]
[,, registry, ), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Locale, locale, ,, final, Map, <, String]
[., getDefault, (, ), ,, registry, ), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Locale, locale, ,]
[), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Locale, locale, ,, final, Map, <, String, ,, ?]
[), ;, setLocale, (, locale, ), ;, this, ., registry, =, registry, ;, applyPattern, (, pattern, ), ;, }, @]
[;, this, ., registry, =, registry, ;, applyPattern, (, pattern, ), ;, }, @, Override, public, String, toPattern, (, )]
[), ;, this, ., registry, =, registry, ;, applyPattern, (, pattern, ), ;, }, @, Override, public, String, toPattern, (]
[=, registry, ;, applyPattern, (, pattern, ), ;, }, @, Override, public, String, toPattern, (, ), {, return, toPattern, ;]
[., registry, =, registry, ;, applyPattern, (, pattern, ), ;, }, @, Override, public, String, toPattern, (, ), {, return]
[;, applyPattern, (, pattern, ), ;, }, @, Override, public, String, toPattern, (, ), {, return, toPattern, ;, }, @]
[;, }, @, Override, public, String, toPattern, (, ), {, return, toPattern, ;, }, @, Override, public, final, void, applyPattern]
[), ;, }, @, Override, public, String, toPattern, (, ), {, return, toPattern, ;, }, @, Override, public, final, void]
[;, }, @, Override, public, final, void, applyPattern, (, final, String, pattern, ), {, if, (, registry, ==, null, )]
[), {, super, ., applyPattern, (, pattern, ), ;, toPattern, =, super, ., toPattern, (, ), ;, return, ;, }]
[==, null, ), {, super, ., applyPattern, (, pattern, ), ;, toPattern, =, super, ., toPattern, (, ), ;, return]
[), {, super, ., applyPattern, (, pattern, ), ;, toPattern, =, super, ., toPattern, (, ), ;, return, ;, }]
[;, toPattern, =, super, ., toPattern, (, ), ;, return, ;, }, final, ArrayList, <, Format, >, foundFormats, =, new]
[., applyPattern, (, pattern, ), ;, toPattern, =, super, ., toPattern, (, ), ;, return, ;, }, final, ArrayList, <]
[), ;, toPattern, =, super, ., toPattern, (, ), ;, return, ;, }, final, ArrayList, <, Format, >, foundFormats, =]
[=, super, ., toPattern, (, ), ;, return, ;, }, final, ArrayList, <, Format, >, foundFormats, =, new, ArrayList, <]
[;, return, ;, }, final, ArrayList, <, Format, >, foundFormats, =, new, ArrayList, <, Format, >, (, ), ;, final]
[., toPattern, (, ), ;, return, ;, }, final, ArrayList, <, Format, >, foundFormats, =, new, ArrayList, <, Format, >]
[;, final, ArrayList, <, String, >, foundDescriptions, =, new, ArrayList, <, String, >, (, ), ;, final, StringBuilder, stripCustom, =]
[;, final, StringBuilder, stripCustom, =, new, StringBuilder, (, pattern, ., length, (, ), ), ;, final, ParsePosition, pos, =, new]
[;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, final, char, [, ], c, =, pattern, ., toCharArray]
[), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, final, char, [, ], c, =, pattern, .]
[., length, (, ), ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, final, char, [, ]]
[;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, int, fmtCount, =, 0, ;, while, (]
[), ;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, int, fmtCount, =, 0, ;, while]
[;, int, fmtCount, =, 0, ;, while, (, pos, ., getIndex, (, ), <, pattern, ., length, (, ), )]
[., toCharArray, (, ), ;, int, fmtCount, =, 0, ;, while, (, pos, ., getIndex, (, ), <, pattern, .]
[;, while, (, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ), {, switch, (, c, []
[), {, switch, (, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, appendQuotedString, (, pattern]
[<, pattern, ., length, (, ), ), {, switch, (, c, [, pos, ., getIndex, (, ), ], ), {]
[., getIndex, (, ), <, pattern, ., length, (, ), ), {, switch, (, c, [, pos, ., getIndex, (]
[), {, switch, (, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, appendQuotedString, (, pattern]
[., length, (, ), ), {, switch, (, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE]
[), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, stripCustom, ,, true, ), ;, break, ;, case, START_FE]
[[, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, stripCustom, ,]
[], ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, stripCustom, ,, true, ), ;, break, ;, case]
[., getIndex, (, ), ], ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, stripCustom, ,, true, )]
[:, appendQuotedString, (, pattern, ,, pos, ,, stripCustom, ,, true, ), ;, break, ;, case, START_FE, :, fmtCount, ++, ;]
[;, break, ;, case, START_FE, :, fmtCount, ++, ;, seekNonWs, (, pattern, ,, pos, ), ;, final, int, start, =]
[,, pos, ,, stripCustom, ,, true, ), ;, break, ;, case, START_FE, :, fmtCount, ++, ;, seekNonWs, (, pattern, ,]
[,, stripCustom, ,, true, ), ;, break, ;, case, START_FE, :, fmtCount, ++, ;, seekNonWs, (, pattern, ,, pos, )]
[,, true, ), ;, break, ;, case, START_FE, :, fmtCount, ++, ;, seekNonWs, (, pattern, ,, pos, ), ;, final]
[), ;, break, ;, case, START_FE, :, fmtCount, ++, ;, seekNonWs, (, pattern, ,, pos, ), ;, final, int, start]
[:, fmtCount, ++, ;, seekNonWs, (, pattern, ,, pos, ), ;, final, int, start, =, pos, ., getIndex, (, )]
[;, seekNonWs, (, pattern, ,, pos, ), ;, final, int, start, =, pos, ., getIndex, (, ), ;, final, int]
[++, ;, seekNonWs, (, pattern, ,, pos, ), ;, final, int, start, =, pos, ., getIndex, (, ), ;, final]
[;, final, int, start, =, pos, ., getIndex, (, ), ;, final, int, index, =, readArgumentIndex, (, pattern, ,, next]
[,, pos, ), ;, final, int, start, =, pos, ., getIndex, (, ), ;, final, int, index, =, readArgumentIndex, (]
[), ;, final, int, start, =, pos, ., getIndex, (, ), ;, final, int, index, =, readArgumentIndex, (, pattern, ,]
[;, final, int, index, =, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ;, stripCustom, ., append, (, START_FE]
[., getIndex, (, ), ;, final, int, index, =, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ;, stripCustom]
[;, stripCustom, ., append, (, START_FE, ), ., append, (, index, ), ;, seekNonWs, (, pattern, ,, pos, ), ;]
[,, next, (, pos, ), ), ;, stripCustom, ., append, (, START_FE, ), ., append, (, index, ), ;, seekNonWs]
[), ;, stripCustom, ., append, (, START_FE, ), ., append, (, index, ), ;, seekNonWs, (, pattern, ,, pos, )]
[), ), ;, stripCustom, ., append, (, START_FE, ), ., append, (, index, ), ;, seekNonWs, (, pattern, ,, pos]
[;, seekNonWs, (, pattern, ,, pos, ), ;, Format, format, =, null, ;, String, formatDescription, =, null, ;, if, (]
[., append, (, index, ), ;, seekNonWs, (, pattern, ,, pos, ), ;, Format, format, =, null, ;, String, formatDescription]
[., append, (, START_FE, ), ., append, (, index, ), ;, seekNonWs, (, pattern, ,, pos, ), ;, Format, format]
[), ., append, (, index, ), ;, seekNonWs, (, pattern, ,, pos, ), ;, Format, format, =, null, ;, String]
[), ;, seekNonWs, (, pattern, ,, pos, ), ;, Format, format, =, null, ;, String, formatDescription, =, null, ;, if]
[;, Format, format, =, null, ;, String, formatDescription, =, null, ;, if, (, c, [, pos, ., getIndex, (, )]
[,, pos, ), ;, Format, format, =, null, ;, String, formatDescription, =, null, ;, if, (, c, [, pos, .]
[), ;, Format, format, =, null, ;, String, formatDescription, =, null, ;, if, (, c, [, pos, ., getIndex, (]
[;, String, formatDescription, =, null, ;, if, (, c, [, pos, ., getIndex, (, ), ], ==, START_FMT, ), {]
[;, if, (, c, [, pos, ., getIndex, (, ), ], ==, START_FMT, ), {, formatDescription, =, parseFormatDescription, (, pattern]
[), {, formatDescription, =, parseFormatDescription, (, pattern, ,, next, (, pos, ), ), ;, format, =, getFormat, (, formatDescription, )]
[==, START_FMT, ), {, formatDescription, =, parseFormatDescription, (, pattern, ,, next, (, pos, ), ), ;, format, =, getFormat, (]
[[, pos, ., getIndex, (, ), ], ==, START_FMT, ), {, formatDescription, =, parseFormatDescription, (, pattern, ,, next, (, pos]
[], ==, START_FMT, ), {, formatDescription, =, parseFormatDescription, (, pattern, ,, next, (, pos, ), ), ;, format, =, getFormat]
[., getIndex, (, ), ], ==, START_FMT, ), {, formatDescription, =, parseFormatDescription, (, pattern, ,, next, (, pos, ), )]
[), {, formatDescription, =, parseFormatDescription, (, pattern, ,, next, (, pos, ), ), ;, format, =, getFormat, (, formatDescription, )]
[=, parseFormatDescription, (, pattern, ,, next, (, pos, ), ), ;, format, =, getFormat, (, formatDescription, ), ;, if, (]
[;, format, =, getFormat, (, formatDescription, ), ;, if, (, format, ==, null, ), {, stripCustom, ., append, (, START_FMT]
[,, next, (, pos, ), ), ;, format, =, getFormat, (, formatDescription, ), ;, if, (, format, ==, null, )]
[), ;, format, =, getFormat, (, formatDescription, ), ;, if, (, format, ==, null, ), {, stripCustom, ., append, (]
[), ), ;, format, =, getFormat, (, formatDescription, ), ;, if, (, format, ==, null, ), {, stripCustom, ., append]
[=, getFormat, (, formatDescription, ), ;, if, (, format, ==, null, ), {, stripCustom, ., append, (, START_FMT, ), .]
[;, if, (, format, ==, null, ), {, stripCustom, ., append, (, START_FMT, ), ., append, (, formatDescription, ), ;]
[), ;, if, (, format, ==, null, ), {, stripCustom, ., append, (, START_FMT, ), ., append, (, formatDescription, )]
[), {, stripCustom, ., append, (, START_FMT, ), ., append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (]
[==, null, ), {, stripCustom, ., append, (, START_FMT, ), ., append, (, formatDescription, ), ;, }, }, foundFormats, .]
[), {, stripCustom, ., append, (, START_FMT, ), ., append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (]
[;, }, }, foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (, format, ==, null, ?, null, :]
[., append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (, format]
[., append, (, START_FMT, ), ., append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (, format, ), ;]
[), ., append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (]
[), ;, }, }, foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (, format, ==, null, ?, null]
[;, foundDescriptions, ., add, (, format, ==, null, ?, null, :, formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, .]
[., add, (, format, ), ;, foundDescriptions, ., add, (, format, ==, null, ?, null, :, formatDescription, ), ;, Validate]
[), ;, foundDescriptions, ., add, (, format, ==, null, ?, null, :, formatDescription, ), ;, Validate, ., isTrue, (, foundFormats]
[;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions, .]
[., add, (, format, ==, null, ?, null, :, formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, ., size, (]
[), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions]
[?, null, :, formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;, Validate]
[==, null, ?, null, :, formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, )]
[?, null, :, formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;, Validate]
[:, formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;, Validate, ., isTrue]
[), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions]
[;, Validate, ., isTrue, (, foundDescriptions, ., size, (, ), ==, fmtCount, ), ;, if, (, c, [, pos, .]
[., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions, ., size, (]
[), ;, Validate, ., isTrue, (, foundDescriptions, ., size, (, ), ==, fmtCount, ), ;, if, (, c, [, pos]
[==, fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions, ., size, (, ), ==, fmtCount, ), ;, if, (, c]
[., size, (, ), ==, fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions, ., size, (, ), ==, fmtCount, )]
[), ;, Validate, ., isTrue, (, foundDescriptions, ., size, (, ), ==, fmtCount, ), ;, if, (, c, [, pos]
[;, if, (, c, [, pos, ., getIndex, (, ), ], !=, END_FE, ), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position "]
[., isTrue, (, foundDescriptions, ., size, (, ), ==, fmtCount, ), ;, if, (, c, [, pos, ., getIndex, (]
[), ;, if, (, c, [, pos, ., getIndex, (, ), ], !=, END_FE, ), {, throw, new, IllegalArgumentException, (]
[==, fmtCount, ), ;, if, (, c, [, pos, ., getIndex, (, ), ], !=, END_FE, ), {, throw, new]
[., size, (, ), ==, fmtCount, ), ;, if, (, c, [, pos, ., getIndex, (, ), ], !=, END_FE]
[), ;, if, (, c, [, pos, ., getIndex, (, ), ], !=, END_FE, ), {, throw, new, IllegalArgumentException, (]
[), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;, }, default, :, stripCustom, ., append, (, c, []
[!=, END_FE, ), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;, }, default, :, stripCustom, ., append, (]
[[, pos, ., getIndex, (, ), ], !=, END_FE, ), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;]
[], !=, END_FE, ), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;, }, default, :, stripCustom, ., append]
[., getIndex, (, ), ], !=, END_FE, ), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;, }, default]
[), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;, }, default, :, stripCustom, ., append, (, c, []
[;, }, default, :, stripCustom, ., append, (, c, [, pos, ., getIndex, (, ), ], ), ;, next, (]
[), ;, }, default, :, stripCustom, ., append, (, c, [, pos, ., getIndex, (, ), ], ), ;, next]
[+, start, ), ;, }, default, :, stripCustom, ., append, (, c, [, pos, ., getIndex, (, ), ], )]
[), ;, }, default, :, stripCustom, ., append, (, c, [, pos, ., getIndex, (, ), ], ), ;, next]
[;, next, (, pos, ), ;, }, }, super, ., applyPattern, (, stripCustom, ., toString, (, ), ), ;, toPattern]
[., append, (, c, [, pos, ., getIndex, (, ), ], ), ;, next, (, pos, ), ;, }, }]
[), ;, next, (, pos, ), ;, }, }, super, ., applyPattern, (, stripCustom, ., toString, (, ), ), ;]
[[, pos, ., getIndex, (, ), ], ), ;, next, (, pos, ), ;, }, }, super, ., applyPattern, (]
[], ), ;, next, (, pos, ), ;, }, }, super, ., applyPattern, (, stripCustom, ., toString, (, ), )]
[., getIndex, (, ), ], ), ;, next, (, pos, ), ;, }, }, super, ., applyPattern, (, stripCustom, .]
[;, }, }, super, ., applyPattern, (, stripCustom, ., toString, (, ), ), ;, toPattern, =, insertFormats, (, super, .]
[), ;, }, }, super, ., applyPattern, (, stripCustom, ., toString, (, ), ), ;, toPattern, =, insertFormats, (, super]
[;, toPattern, =, insertFormats, (, super, ., toPattern, (, ), ,, foundDescriptions, ), ;, if, (, containsElements, (, foundFormats, )]
[., applyPattern, (, stripCustom, ., toString, (, ), ), ;, toPattern, =, insertFormats, (, super, ., toPattern, (, ), ,]
[), ;, toPattern, =, insertFormats, (, super, ., toPattern, (, ), ,, foundDescriptions, ), ;, if, (, containsElements, (, foundFormats]
[., toString, (, ), ), ;, toPattern, =, insertFormats, (, super, ., toPattern, (, ), ,, foundDescriptions, ), ;, if]
[=, insertFormats, (, super, ., toPattern, (, ), ,, foundDescriptions, ), ;, if, (, containsElements, (, foundFormats, ), ), {]
[;, if, (, containsElements, (, foundFormats, ), ), {, final, Format, [, ], origFormats, =, getFormats, (, ), ;, int]
[,, foundDescriptions, ), ;, if, (, containsElements, (, foundFormats, ), ), {, final, Format, [, ], origFormats, =, getFormats, (]
[., toPattern, (, ), ,, foundDescriptions, ), ;, if, (, containsElements, (, foundFormats, ), ), {, final, Format, [, ]]
[), ;, if, (, containsElements, (, foundFormats, ), ), {, final, Format, [, ], origFormats, =, getFormats, (, ), ;]
[), {, final, Format, [, ], origFormats, =, getFormats, (, ), ;, int, i, =, 0, ;, for, (, final]
[), ), {, final, Format, [, ], origFormats, =, getFormats, (, ), ;, int, i, =, 0, ;, for, (]
[;, int, i, =, 0, ;, for, (, final, Iterator, <, Format, >, it, =, foundFormats, ., iterator, (, )]
[;, for, (, final, Iterator, <, Format, >, it, =, foundFormats, ., iterator, (, ), ;, it, ., hasNext, (]
[;, it, ., hasNext, (, ), ;, i, ++, ), {, final, Format, f, =, it, ., next, (, )]
[., iterator, (, ), ;, it, ., hasNext, (, ), ;, i, ++, ), {, final, Format, f, =, it]
[;, i, ++, ), {, final, Format, f, =, it, ., next, (, ), ;, if, (, f, !=, null]
[., hasNext, (, ), ;, i, ++, ), {, final, Format, f, =, it, ., next, (, ), ;, if]
[), {, final, Format, f, =, it, ., next, (, ), ;, if, (, f, !=, null, ), {, origFormats]
[++, ), {, final, Format, f, =, it, ., next, (, ), ;, if, (, f, !=, null, ), {]
[;, if, (, f, !=, null, ), {, origFormats, [, i, ], =, f, ;, }, }, super, ., setFormats]
[., next, (, ), ;, if, (, f, !=, null, ), {, origFormats, [, i, ], =, f, ;, }]
[), {, origFormats, [, i, ], =, f, ;, }, }, super, ., setFormats, (, origFormats, ), ;, }, }]
[!=, null, ), {, origFormats, [, i, ], =, f, ;, }, }, super, ., setFormats, (, origFormats, ), ;]
[), {, origFormats, [, i, ], =, f, ;, }, }, super, ., setFormats, (, origFormats, ), ;, }, }]
[=, f, ;, }, }, super, ., setFormats, (, origFormats, ), ;, }, }, @, Override, public, void, setFormat, (]
[[, i, ], =, f, ;, }, }, super, ., setFormats, (, origFormats, ), ;, }, }, @, Override, public]
[], =, f, ;, }, }, super, ., setFormats, (, origFormats, ), ;, }, }, @, Override, public, void, setFormat]
[;, }, }, super, ., setFormats, (, origFormats, ), ;, }, }, @, Override, public, void, setFormat, (, final, int]
[;, }, }, @, Override, public, void, setFormat, (, final, int, formatElementIndex, ,, final, Format, newFormat, ), {, throw, new]
[., setFormats, (, origFormats, ), ;, }, }, @, Override, public, void, setFormat, (, final, int, formatElementIndex, ,, final, Format]
[), ;, }, }, @, Override, public, void, setFormat, (, final, int, formatElementIndex, ,, final, Format, newFormat, ), {, throw]
[;, }, @, Override, public, void, setFormatByArgumentIndex, (, final, int, argumentIndex, ,, final, Format, newFormat, ), {, throw, new, UnsupportedOperationException]
[;, }, @, Override, public, void, setFormats, (, final, Format, [, ], newFormats, ), {, throw, new, UnsupportedOperationException, (, )]
[;, }, @, Override, public, void, setFormatsByArgumentIndex, (, final, Format, [, ], newFormats, ), {, throw, new, UnsupportedOperationException, (, )]
[;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {]
[), {, return, true, ;, }, if, (, obj, ==, null, ), {, return, false, ;, }, if, (, !]
[==, this, ), {, return, true, ;, }, if, (, obj, ==, null, ), {, return, false, ;, }, if]
[), {, return, true, ;, }, if, (, obj, ==, null, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, obj, ==, null, ), {, return, false, ;, }, if, (, !, super, ., equals, (]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[==, null, ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, if, (, ObjectUtils]
[), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, getClass, (, ), ,, obj, ., getClass, (]
[), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, getClass, (, ), ,, obj, ., getClass, (]
[., equals, (, obj, ), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, getClass, (, )]
[), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, getClass, (, ), ,, obj, ., getClass]
[;, }, if, (, ObjectUtils, ., notEqual, (, getClass, (, ), ,, obj, ., getClass, (, ), ), ), {]
[), {, return, false, ;, }, final, ExtendedMessageFormat, rhs, =, (, ExtendedMessageFormat, ), obj, ;, if, (, ObjectUtils, ., notEqual]
[., notEqual, (, getClass, (, ), ,, obj, ., getClass, (, ), ), ), {, return, false, ;, }, final]
[,, obj, ., getClass, (, ), ), ), {, return, false, ;, }, final, ExtendedMessageFormat, rhs, =, (, ExtendedMessageFormat, )]
[), ), {, return, false, ;, }, final, ExtendedMessageFormat, rhs, =, (, ExtendedMessageFormat, ), obj, ;, if, (, ObjectUtils, .]
[., getClass, (, ), ), ), {, return, false, ;, }, final, ExtendedMessageFormat, rhs, =, (, ExtendedMessageFormat, ), obj, ;]
[;, }, final, ExtendedMessageFormat, rhs, =, (, ExtendedMessageFormat, ), obj, ;, if, (, ObjectUtils, ., notEqual, (, toPattern, ,, rhs]
[;, if, (, ObjectUtils, ., notEqual, (, toPattern, ,, rhs, ., toPattern, ), ), {, return, false, ;, }, if]
[;, if, (, ObjectUtils, ., notEqual, (, toPattern, ,, rhs, ., toPattern, ), ), {, return, false, ;, }, if]
[), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, registry, ,, rhs, ., registry, ), ), {]
[., notEqual, (, toPattern, ,, rhs, ., toPattern, ), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual]
[,, rhs, ., toPattern, ), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, registry, ,, rhs]
[), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, registry, ,, rhs, ., registry, ), )]
[., toPattern, ), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, registry, ,, rhs, ., registry]
[;, }, if, (, ObjectUtils, ., notEqual, (, registry, ,, rhs, ., registry, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, int, result]
[., notEqual, (, registry, ,, rhs, ., registry, ), ), {, return, false, ;, }, return, true, ;, }, @]
[,, rhs, ., registry, ), ), {, return, false, ;, }, return, true, ;, }, @, Override, public, int, hashCode]
[), ), {, return, false, ;, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, int]
[., registry, ), ), {, return, false, ;, }, return, true, ;, }, @, Override, public, int, hashCode, (, )]
[;, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode]
[;, }, @, Override, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result]
[;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, registry, ), ;, result, =, HASH_SEED, *, result, +]
[., hashCode, (, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, registry, ), ;, result, =]
[=, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, registry, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, .]
[;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, toPattern, ), ;, return, result, ;, }, private, Format]
[+, ObjectUtils, ., hashCode, (, registry, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, toPattern, )]
[*, result, +, ObjectUtils, ., hashCode, (, registry, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (]
[+, ObjectUtils, ., hashCode, (, registry, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, toPattern, )]
[;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, toPattern, ), ;, return, result, ;, }, private, Format]
[., hashCode, (, registry, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, toPattern, ), ;, return]
[), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, toPattern, ), ;, return, result, ;, }, private]
[=, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, toPattern, ), ;, return, result, ;, }, private, Format, getFormat, (]
[;, return, result, ;, }, private, Format, getFormat, (, final, String, desc, ), {, if, (, registry, !=, null, )]
[+, ObjectUtils, ., hashCode, (, toPattern, ), ;, return, result, ;, }, private, Format, getFormat, (, final, String, desc, )]
[*, result, +, ObjectUtils, ., hashCode, (, toPattern, ), ;, return, result, ;, }, private, Format, getFormat, (, final, String]
[+, ObjectUtils, ., hashCode, (, toPattern, ), ;, return, result, ;, }, private, Format, getFormat, (, final, String, desc, )]
[;, return, result, ;, }, private, Format, getFormat, (, final, String, desc, ), {, if, (, registry, !=, null, )]
[., hashCode, (, toPattern, ), ;, return, result, ;, }, private, Format, getFormat, (, final, String, desc, ), {, if]
[), ;, return, result, ;, }, private, Format, getFormat, (, final, String, desc, ), {, if, (, registry, !=, null]
[;, }, private, Format, getFormat, (, final, String, desc, ), {, if, (, registry, !=, null, ), {, String, name]
[), {, String, name, =, desc, ;, String, args, =, null, ;, final, int, i, =, desc, ., indexOf, (]
[!=, null, ), {, String, name, =, desc, ;, String, args, =, null, ;, final, int, i, =, desc, .]
[), {, String, name, =, desc, ;, String, args, =, null, ;, final, int, i, =, desc, ., indexOf, (]
[;, String, args, =, null, ;, final, int, i, =, desc, ., indexOf, (, START_FMT, ), ;, if, (, i]
[;, final, int, i, =, desc, ., indexOf, (, START_FMT, ), ;, if, (, i, >, 0, ), {, name]
[;, if, (, i, >, 0, ), {, name, =, desc, ., substring, (, 0, ,, i, ), ., trim]
[., indexOf, (, START_FMT, ), ;, if, (, i, >, 0, ), {, name, =, desc, ., substring, (, 0]
[), ;, if, (, i, >, 0, ), {, name, =, desc, ., substring, (, 0, ,, i, ), .]
[), {, name, =, desc, ., substring, (, 0, ,, i, ), ., trim, (, ), ;, args, =, desc]
[>, 0, ), {, name, =, desc, ., substring, (, 0, ,, i, ), ., trim, (, ), ;, args]
[), {, name, =, desc, ., substring, (, 0, ,, i, ), ., trim, (, ), ;, args, =, desc]
[=, desc, ., substring, (, 0, ,, i, ), ., trim, (, ), ;, args, =, desc, ., substring, (]
[;, args, =, desc, ., substring, (, i, +, 1, ), ., trim, (, ), ;, }, final, FormatFactory, factory]
[., trim, (, ), ;, args, =, desc, ., substring, (, i, +, 1, ), ., trim, (, ), ;]
[., substring, (, 0, ,, i, ), ., trim, (, ), ;, args, =, desc, ., substring, (, i, +]
[,, i, ), ., trim, (, ), ;, args, =, desc, ., substring, (, i, +, 1, ), ., trim]
[), ., trim, (, ), ;, args, =, desc, ., substring, (, i, +, 1, ), ., trim, (, )]
[=, desc, ., substring, (, i, +, 1, ), ., trim, (, ), ;, }, final, FormatFactory, factory, =, registry]
[;, }, final, FormatFactory, factory, =, registry, ., get, (, name, ), ;, if, (, factory, !=, null, ), {]
[., trim, (, ), ;, }, final, FormatFactory, factory, =, registry, ., get, (, name, ), ;, if, (, factory]
[., substring, (, i, +, 1, ), ., trim, (, ), ;, }, final, FormatFactory, factory, =, registry, ., get]
[), ., trim, (, ), ;, }, final, FormatFactory, factory, =, registry, ., get, (, name, ), ;, if, (]
[+, 1, ), ., trim, (, ), ;, }, final, FormatFactory, factory, =, registry, ., get, (, name, ), ;]
[), ., trim, (, ), ;, }, final, FormatFactory, factory, =, registry, ., get, (, name, ), ;, if, (]
[;, if, (, factory, !=, null, ), {, return, factory, ., getFormat, (, name, ,, args, ,, getLocale, (, )]
[., get, (, name, ), ;, if, (, factory, !=, null, ), {, return, factory, ., getFormat, (, name, ,]
[), ;, if, (, factory, !=, null, ), {, return, factory, ., getFormat, (, name, ,, args, ,, getLocale, (]
[), {, return, factory, ., getFormat, (, name, ,, args, ,, getLocale, (, ), ), ;, }, }, return, null]
[!=, null, ), {, return, factory, ., getFormat, (, name, ,, args, ,, getLocale, (, ), ), ;, }, }]
[), {, return, factory, ., getFormat, (, name, ,, args, ,, getLocale, (, ), ), ;, }, }, return, null]
[;, }, }, return, null, ;, }, private, int, readArgumentIndex, (, final, String, pattern, ,, final, ParsePosition, pos, ), {]
[., getFormat, (, name, ,, args, ,, getLocale, (, ), ), ;, }, }, return, null, ;, }, private, int]
[,, args, ,, getLocale, (, ), ), ;, }, }, return, null, ;, }, private, int, readArgumentIndex, (, final, String]
[,, getLocale, (, ), ), ;, }, }, return, null, ;, }, private, int, readArgumentIndex, (, final, String, pattern, ,]
[), ;, }, }, return, null, ;, }, private, int, readArgumentIndex, (, final, String, pattern, ,, final, ParsePosition, pos, )]
[;, }, private, int, readArgumentIndex, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =, pos]
[;, seekNonWs, (, pattern, ,, pos, ), ;, final, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, error, =]
[., getIndex, (, ), ;, seekNonWs, (, pattern, ,, pos, ), ;, final, StringBuilder, result, =, new, StringBuilder, (, )]
[;, final, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, error, =, false, ;, for, (, ;, !, error]
[,, pos, ), ;, final, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, error, =, false, ;, for, (]
[), ;, final, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, error, =, false, ;, for, (, ;, !]
[;, boolean, error, =, false, ;, for, (, ;, !, error, &&, pos, ., getIndex, (, ), <, pattern, .]
[;, for, (, ;, !, error, &&, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ;, next]
[;, next, (, pos, ), ), {, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), )]
[&&, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ;, next, (, pos, ), ), {, char]
[&&, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ;, next, (, pos, ), ), {, char]
[;, next, (, pos, ), ), {, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), )]
[<, pattern, ., length, (, ), ;, next, (, pos, ), ), {, char, c, =, pattern, ., charAt, (]
[., getIndex, (, ), <, pattern, ., length, (, ), ;, next, (, pos, ), ), {, char, c, =]
[;, next, (, pos, ), ), {, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), )]
[., length, (, ), ;, next, (, pos, ), ), {, char, c, =, pattern, ., charAt, (, pos, .]
[), {, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, Character, .]
[), ), {, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, Character]
[;, if, (, Character, ., isWhitespace, (, c, ), ), {, seekNonWs, (, pattern, ,, pos, ), ;, c, =]
[., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, Character, ., isWhitespace, (, c, ), ), {]
[), ;, if, (, Character, ., isWhitespace, (, c, ), ), {, seekNonWs, (, pattern, ,, pos, ), ;, c]
[., getIndex, (, ), ), ;, if, (, Character, ., isWhitespace, (, c, ), ), {, seekNonWs, (, pattern, ,]
[), {, seekNonWs, (, pattern, ,, pos, ), ;, c, =, pattern, ., charAt, (, pos, ., getIndex, (, )]
[., isWhitespace, (, c, ), ), {, seekNonWs, (, pattern, ,, pos, ), ;, c, =, pattern, ., charAt, (]
[), ), {, seekNonWs, (, pattern, ,, pos, ), ;, c, =, pattern, ., charAt, (, pos, ., getIndex, (]
[;, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, c, !=, START_FMT, &&]
[,, pos, ), ;, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, c]
[), ;, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, c, !=, START_FMT]
[=, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, c, !=, START_FMT, &&, c, !=]
[;, if, (, c, !=, START_FMT, &&, c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }]
[., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, c, !=, START_FMT, &&, c, !=, END_FE, )]
[), ;, if, (, c, !=, START_FMT, &&, c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }]
[., getIndex, (, ), ), ;, if, (, c, !=, START_FMT, &&, c, !=, END_FE, ), {, error, =, true]
[), {, error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||, c, ==, END_FE]
[&&, c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT]
[!=, START_FMT, &&, c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (, (, c]
[&&, c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT]
[), {, error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||, c, ==, END_FE]
[!=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||, c]
[), {, error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||, c, ==, END_FE]
[=, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||, c, ==, END_FE, ), &&, result]
[;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||, c, ==, END_FE, ), &&, result, ., length]
[), {, try, {, return, Integer, ., parseInt, (, result, ., toString, (, ), ), ;, }, catch, (, final]
[&&, result, ., length, (, ), >, 0, ), {, try, {, return, Integer, ., parseInt, (, result, ., toString]
[), &&, result, ., length, (, ), >, 0, ), {, try, {, return, Integer, ., parseInt, (, result, .]
[||, c, ==, END_FE, ), &&, result, ., length, (, ), >, 0, ), {, try, {, return, Integer, .]
[==, START_FMT, ||, c, ==, END_FE, ), &&, result, ., length, (, ), >, 0, ), {, try, {, return]
[||, c, ==, END_FE, ), &&, result, ., length, (, ), >, 0, ), {, try, {, return, Integer, .]
[), &&, result, ., length, (, ), >, 0, ), {, try, {, return, Integer, ., parseInt, (, result, .]
[==, END_FE, ), &&, result, ., length, (, ), >, 0, ), {, try, {, return, Integer, ., parseInt, (]
[), &&, result, ., length, (, ), >, 0, ), {, try, {, return, Integer, ., parseInt, (, result, .]
[), {, try, {, return, Integer, ., parseInt, (, result, ., toString, (, ), ), ;, }, catch, (, final]
[>, 0, ), {, try, {, return, Integer, ., parseInt, (, result, ., toString, (, ), ), ;, }, catch]
[., length, (, ), >, 0, ), {, try, {, return, Integer, ., parseInt, (, result, ., toString, (, )]
[), {, try, {, return, Integer, ., parseInt, (, result, ., toString, (, ), ), ;, }, catch, (, final]
[;, }, catch, (, final, NumberFormatException, e, ), {, }, }, error, =, !, Character, ., isDigit, (, c, )]
[., parseInt, (, result, ., toString, (, ), ), ;, }, catch, (, final, NumberFormatException, e, ), {, }, }]
[), ;, }, catch, (, final, NumberFormatException, e, ), {, }, }, error, =, !, Character, ., isDigit, (, c]
[., toString, (, ), ), ;, }, catch, (, final, NumberFormatException, e, ), {, }, }, error, =, !, Character]
[=, !, Character, ., isDigit, (, c, ), ;, result, ., append, (, c, ), ;, }, if, (, error]
[;, result, ., append, (, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +]
[;, result, ., append, (, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +]
[., isDigit, (, c, ), ;, result, ., append, (, c, ), ;, }, if, (, error, ), {, throw]
[), ;, result, ., append, (, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position "]
[;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +, start, +, ": ", +, pattern, ., substring]
[., append, (, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +, start, +]
[), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +, start, +, ": ", +, pattern, .]
[), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +, start, +, ": ", +, pattern, ., substring, (, start, ,, pos, .]
[;, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +, start, ), ;, }, private, String, parseFormatDescription, (, final, String, pattern, ,]
[), ;, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +, start, ), ;, }, private, String, parseFormatDescription, (, final, String, pattern]
[+, pattern, ., substring, (, start, ,, pos, ., getIndex, (, ), ), ), ;, }, throw, new, IllegalArgumentException, (]
[+, ": ", +, pattern, ., substring, (, start, ,, pos, ., getIndex, (, ), ), ), ;, }, throw, new]
[+, start, +, ": ", +, pattern, ., substring, (, start, ,, pos, ., getIndex, (, ), ), ), ;, }]
[+, ": ", +, pattern, ., substring, (, start, ,, pos, ., getIndex, (, ), ), ), ;, }, throw, new]
[+, pattern, ., substring, (, start, ,, pos, ., getIndex, (, ), ), ), ;, }, throw, new, IllegalArgumentException, (]
[), ;, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +, start, ), ;, }, private, String, parseFormatDescription, (, final, String, pattern]
[., substring, (, start, ,, pos, ., getIndex, (, ), ), ), ;, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +]
[,, pos, ., getIndex, (, ), ), ), ;, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +, start, ), ;, }]
[), ), ;, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +, start, ), ;, }, private, String, parseFormatDescription, (, final, String]
[., getIndex, (, ), ), ), ;, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +, start, ), ;, }, private, String]
[;, }, private, String, parseFormatDescription, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =, pos]
[), ;, }, private, String, parseFormatDescription, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =]
[+, start, ), ;, }, private, String, parseFormatDescription, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, final, int]
[), ;, }, private, String, parseFormatDescription, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =]
[;, seekNonWs, (, pattern, ,, pos, ), ;, final, int, text, =, pos, ., getIndex, (, ), ;, int, depth]
[., getIndex, (, ), ;, seekNonWs, (, pattern, ,, pos, ), ;, final, int, text, =, pos, ., getIndex, (]
[;, final, int, text, =, pos, ., getIndex, (, ), ;, int, depth, =, 1, ;, for, (, ;, pos]
[,, pos, ), ;, final, int, text, =, pos, ., getIndex, (, ), ;, int, depth, =, 1, ;, for]
[), ;, final, int, text, =, pos, ., getIndex, (, ), ;, int, depth, =, 1, ;, for, (, ;]
[;, int, depth, =, 1, ;, for, (, ;, pos, ., getIndex, (, ), <, pattern, ., length, (, )]
[., getIndex, (, ), ;, int, depth, =, 1, ;, for, (, ;, pos, ., getIndex, (, ), <, pattern]
[;, for, (, ;, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ;, next, (, pos, )]
[;, next, (, pos, ), ), {, switch, (, pattern, ., charAt, (, pos, ., getIndex, (, ), ), )]
[<, pattern, ., length, (, ), ;, next, (, pos, ), ), {, switch, (, pattern, ., charAt, (, pos]
[., getIndex, (, ), <, pattern, ., length, (, ), ;, next, (, pos, ), ), {, switch, (, pattern]
[;, next, (, pos, ), ), {, switch, (, pattern, ., charAt, (, pos, ., getIndex, (, ), ), )]
[., length, (, ), ;, next, (, pos, ), ), {, switch, (, pattern, ., charAt, (, pos, ., getIndex]
[), {, switch, (, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ), {, case, START_FE, :, depth]
[), ), {, switch, (, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ), {, case, START_FE, :]
[), {, case, START_FE, :, depth, ++, ;, break, ;, case, END_FE, :, depth, --, ;, if, (, depth, ==]
[., charAt, (, pos, ., getIndex, (, ), ), ), {, case, START_FE, :, depth, ++, ;, break, ;, case]
[), ), {, case, START_FE, :, depth, ++, ;, break, ;, case, END_FE, :, depth, --, ;, if, (, depth]
[., getIndex, (, ), ), ), {, case, START_FE, :, depth, ++, ;, break, ;, case, END_FE, :, depth, --]
[:, depth, ++, ;, break, ;, case, END_FE, :, depth, --, ;, if, (, depth, ==, 0, ), {, return]
[;, break, ;, case, END_FE, :, depth, --, ;, if, (, depth, ==, 0, ), {, return, pattern, ., substring]
[++, ;, break, ;, case, END_FE, :, depth, --, ;, if, (, depth, ==, 0, ), {, return, pattern, .]
[:, depth, --, ;, if, (, depth, ==, 0, ), {, return, pattern, ., substring, (, text, ,, pos, .]
[;, if, (, depth, ==, 0, ), {, return, pattern, ., substring, (, text, ,, pos, ., getIndex, (, )]
[--, ;, if, (, depth, ==, 0, ), {, return, pattern, ., substring, (, text, ,, pos, ., getIndex, (]
[), {, return, pattern, ., substring, (, text, ,, pos, ., getIndex, (, ), ), ;, }, break, ;, case]
[==, 0, ), {, return, pattern, ., substring, (, text, ,, pos, ., getIndex, (, ), ), ;, }, break]
[), {, return, pattern, ., substring, (, text, ,, pos, ., getIndex, (, ), ), ;, }, break, ;, case]
[;, }, break, ;, case, QUOTE, :, getQuotedString, (, pattern, ,, pos, ,, false, ), ;, break, ;, }, }]
[., substring, (, text, ,, pos, ., getIndex, (, ), ), ;, }, break, ;, case, QUOTE, :, getQuotedString, (]
[,, pos, ., getIndex, (, ), ), ;, }, break, ;, case, QUOTE, :, getQuotedString, (, pattern, ,, pos, ,]
[), ;, }, break, ;, case, QUOTE, :, getQuotedString, (, pattern, ,, pos, ,, false, ), ;, break, ;, }]
[., getIndex, (, ), ), ;, }, break, ;, case, QUOTE, :, getQuotedString, (, pattern, ,, pos, ,, false, )]
[:, getQuotedString, (, pattern, ,, pos, ,, false, ), ;, break, ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +]
[;, break, ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +, start, ), ;, }, private, String, insertFormats, (, final]
[,, pos, ,, false, ), ;, break, ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +, start, ), ;, }]
[,, false, ), ;, break, ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +, start, ), ;, }, private, String]
[), ;, break, ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +, start, ), ;, }, private, String, insertFormats, (]
[;, }, private, String, insertFormats, (, final, String, pattern, ,, final, ArrayList, <, String, >, customPatterns, ), {, if, (]
[), ;, }, private, String, insertFormats, (, final, String, pattern, ,, final, ArrayList, <, String, >, customPatterns, ), {, if]
[+, start, ), ;, }, private, String, insertFormats, (, final, String, pattern, ,, final, ArrayList, <, String, >, customPatterns, )]
[), ;, }, private, String, insertFormats, (, final, String, pattern, ,, final, ArrayList, <, String, >, customPatterns, ), {, if]
[), {, return, pattern, ;, }, final, StringBuilder, sb, =, new, StringBuilder, (, pattern, ., length, (, ), *, 2]
[), {, return, pattern, ;, }, final, StringBuilder, sb, =, new, StringBuilder, (, pattern, ., length, (, ), *, 2]
[), ), {, return, pattern, ;, }, final, StringBuilder, sb, =, new, StringBuilder, (, pattern, ., length, (, ), *]
[;, }, final, StringBuilder, sb, =, new, StringBuilder, (, pattern, ., length, (, ), *, 2, ), ;, final, ParsePosition]
[;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, int, fe, =, -, 1, ;, int, depth, =]
[), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, int, fe, =, -, 1, ;, int, depth]
[*, 2, ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, int, fe, =, -, 1, ;]
[., length, (, ), *, 2, ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, int, fe]
[), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, int, fe, =, -, 1, ;, int, depth]
[;, int, fe, =, -, 1, ;, int, depth, =, 0, ;, while, (, pos, ., getIndex, (, ), <]
[), ;, int, fe, =, -, 1, ;, int, depth, =, 0, ;, while, (, pos, ., getIndex, (, )]
[;, int, depth, =, 0, ;, while, (, pos, ., getIndex, (, ), <, pattern, ., length, (, ), )]
[;, int, depth, =, 0, ;, while, (, pos, ., getIndex, (, ), <, pattern, ., length, (, ), )]
[;, while, (, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ), {, final, char, c, =]
[), {, final, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, switch, (, c]
[<, pattern, ., length, (, ), ), {, final, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (]
[., getIndex, (, ), <, pattern, ., length, (, ), ), {, final, char, c, =, pattern, ., charAt, (]
[), {, final, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, switch, (, c]
[., length, (, ), ), {, final, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), )]
[;, switch, (, c, ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, sb, ,, false, ), ;]
[., charAt, (, pos, ., getIndex, (, ), ), ;, switch, (, c, ), {, case, QUOTE, :, appendQuotedString, (]
[), ;, switch, (, c, ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, sb, ,, false, )]
[., getIndex, (, ), ), ;, switch, (, c, ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,]
[), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, sb, ,, false, ), ;, break, ;, case, START_FE]
[:, appendQuotedString, (, pattern, ,, pos, ,, sb, ,, false, ), ;, break, ;, case, START_FE, :, depth, ++, ;]
[;, break, ;, case, START_FE, :, depth, ++, ;, if, (, depth, ==, 1, ), {, fe, ++, ;, sb]
[,, pos, ,, sb, ,, false, ), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (, depth, ==]
[,, sb, ,, false, ), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (, depth, ==, 1, )]
[,, false, ), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (, depth, ==, 1, ), {, fe]
[), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (, depth, ==, 1, ), {, fe, ++, ;]
[:, depth, ++, ;, if, (, depth, ==, 1, ), {, fe, ++, ;, sb, ., append, (, START_FE, )]
[;, if, (, depth, ==, 1, ), {, fe, ++, ;, sb, ., append, (, START_FE, ), ., append, (]
[++, ;, if, (, depth, ==, 1, ), {, fe, ++, ;, sb, ., append, (, START_FE, ), ., append]
[), {, fe, ++, ;, sb, ., append, (, START_FE, ), ., append, (, readArgumentIndex, (, pattern, ,, next, (]
[==, 1, ), {, fe, ++, ;, sb, ., append, (, START_FE, ), ., append, (, readArgumentIndex, (, pattern, ,]
[), {, fe, ++, ;, sb, ., append, (, START_FE, ), ., append, (, readArgumentIndex, (, pattern, ,, next, (]
[;, sb, ., append, (, START_FE, ), ., append, (, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), )]
[++, ;, sb, ., append, (, START_FE, ), ., append, (, readArgumentIndex, (, pattern, ,, next, (, pos, ), )]
[;, final, String, customPattern, =, customPatterns, ., get, (, fe, ), ;, if, (, customPattern, !=, null, ), {, sb]
[., append, (, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ), ;, final, String, customPattern, =, customPatterns, .]
[., append, (, START_FE, ), ., append, (, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ), ;, final]
[), ., append, (, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ), ;, final, String, customPattern, =, customPatterns]
[), ;, final, String, customPattern, =, customPatterns, ., get, (, fe, ), ;, if, (, customPattern, !=, null, ), {]
[,, next, (, pos, ), ), ), ;, final, String, customPattern, =, customPatterns, ., get, (, fe, ), ;, if]
[), ), ;, final, String, customPattern, =, customPatterns, ., get, (, fe, ), ;, if, (, customPattern, !=, null, )]
[), ), ), ;, final, String, customPattern, =, customPatterns, ., get, (, fe, ), ;, if, (, customPattern, !=, null]
[;, if, (, customPattern, !=, null, ), {, sb, ., append, (, START_FMT, ), ., append, (, customPattern, ), ;]
[., get, (, fe, ), ;, if, (, customPattern, !=, null, ), {, sb, ., append, (, START_FMT, ), .]
[), ;, if, (, customPattern, !=, null, ), {, sb, ., append, (, START_FMT, ), ., append, (, customPattern, )]
[), {, sb, ., append, (, START_FMT, ), ., append, (, customPattern, ), ;, }, }, break, ;, case, END_FE]
[!=, null, ), {, sb, ., append, (, START_FMT, ), ., append, (, customPattern, ), ;, }, }, break, ;]
[), {, sb, ., append, (, START_FMT, ), ., append, (, customPattern, ), ;, }, }, break, ;, case, END_FE]
[;, }, }, break, ;, case, END_FE, :, depth, --, ;, default, :, sb, ., append, (, c, ), ;]
[., append, (, customPattern, ), ;, }, }, break, ;, case, END_FE, :, depth, --, ;, default, :, sb, .]
[., append, (, START_FMT, ), ., append, (, customPattern, ), ;, }, }, break, ;, case, END_FE, :, depth, --]
[), ., append, (, customPattern, ), ;, }, }, break, ;, case, END_FE, :, depth, --, ;, default, :, sb]
[), ;, }, }, break, ;, case, END_FE, :, depth, --, ;, default, :, sb, ., append, (, c, )]
[:, depth, --, ;, default, :, sb, ., append, (, c, ), ;, next, (, pos, ), ;, }, }]
[;, default, :, sb, ., append, (, c, ), ;, next, (, pos, ), ;, }, }, return, sb, .]
[--, ;, default, :, sb, ., append, (, c, ), ;, next, (, pos, ), ;, }, }, return, sb]
[;, next, (, pos, ), ;, }, }, return, sb, ., toString, (, ), ;, }, private, void, seekNonWs, (]
[., append, (, c, ), ;, next, (, pos, ), ;, }, }, return, sb, ., toString, (, ), ;]
[), ;, next, (, pos, ), ;, }, }, return, sb, ., toString, (, ), ;, }, private, void, seekNonWs]
[;, }, }, return, sb, ., toString, (, ), ;, }, private, void, seekNonWs, (, final, String, pattern, ,, final]
[), ;, }, }, return, sb, ., toString, (, ), ;, }, private, void, seekNonWs, (, final, String, pattern, ,]
[;, }, private, void, seekNonWs, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, int, len, =, 0, ;]
[., toString, (, ), ;, }, private, void, seekNonWs, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, int]
[;, final, char, [, ], buffer, =, pattern, ., toCharArray, (, ), ;, do, {, len, =, StrMatcher, ., splitMatcher]
[;, do, {, len, =, StrMatcher, ., splitMatcher, (, ), ., isMatch, (, buffer, ,, pos, ., getIndex, (, )]
[., toCharArray, (, ), ;, do, {, len, =, StrMatcher, ., splitMatcher, (, ), ., isMatch, (, buffer, ,, pos]
[=, StrMatcher, ., splitMatcher, (, ), ., isMatch, (, buffer, ,, pos, ., getIndex, (, ), ), ;, pos, .]
[;, pos, ., setIndex, (, pos, ., getIndex, (, ), +, len, ), ;, }, while, (, len, >, 0]
[., isMatch, (, buffer, ,, pos, ., getIndex, (, ), ), ;, pos, ., setIndex, (, pos, ., getIndex, (]
[., splitMatcher, (, ), ., isMatch, (, buffer, ,, pos, ., getIndex, (, ), ), ;, pos, ., setIndex, (]
[,, pos, ., getIndex, (, ), ), ;, pos, ., setIndex, (, pos, ., getIndex, (, ), +, len, )]
[), ;, pos, ., setIndex, (, pos, ., getIndex, (, ), +, len, ), ;, }, while, (, len, >]
[., getIndex, (, ), ), ;, pos, ., setIndex, (, pos, ., getIndex, (, ), +, len, ), ;, }]
[;, }, while, (, len, >, 0, &&, pos, ., getIndex, (, ), <, pattern, ., length, (, ), )]
[., setIndex, (, pos, ., getIndex, (, ), +, len, ), ;, }, while, (, len, >, 0, &&, pos]
[), ;, }, while, (, len, >, 0, &&, pos, ., getIndex, (, ), <, pattern, ., length, (, )]
[+, len, ), ;, }, while, (, len, >, 0, &&, pos, ., getIndex, (, ), <, pattern, ., length]
[., getIndex, (, ), +, len, ), ;, }, while, (, len, >, 0, &&, pos, ., getIndex, (, )]
[), ;, }, while, (, len, >, 0, &&, pos, ., getIndex, (, ), <, pattern, ., length, (, )]
[), ;, }, private, ParsePosition, next, (, final, ParsePosition, pos, ), {, pos, ., setIndex, (, pos, ., getIndex, (]
[&&, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ), ;, }, private, ParsePosition, next, (, final]
[>, 0, &&, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ), ;, }, private, ParsePosition, next]
[&&, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ), ;, }, private, ParsePosition, next, (, final]
[), ;, }, private, ParsePosition, next, (, final, ParsePosition, pos, ), {, pos, ., setIndex, (, pos, ., getIndex, (]
[<, pattern, ., length, (, ), ), ;, }, private, ParsePosition, next, (, final, ParsePosition, pos, ), {, pos, .]
[., getIndex, (, ), <, pattern, ., length, (, ), ), ;, }, private, ParsePosition, next, (, final, ParsePosition, pos]
[), ;, }, private, ParsePosition, next, (, final, ParsePosition, pos, ), {, pos, ., setIndex, (, pos, ., getIndex, (]
[., length, (, ), ), ;, }, private, ParsePosition, next, (, final, ParsePosition, pos, ), {, pos, ., setIndex, (]
[;, return, pos, ;, }, private, StringBuilder, appendQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,, final, StringBuilder, appendTo]
[., setIndex, (, pos, ., getIndex, (, ), +, 1, ), ;, return, pos, ;, }, private, StringBuilder, appendQuotedString, (]
[), ;, return, pos, ;, }, private, StringBuilder, appendQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,, final, StringBuilder]
[+, 1, ), ;, return, pos, ;, }, private, StringBuilder, appendQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,]
[., getIndex, (, ), +, 1, ), ;, return, pos, ;, }, private, StringBuilder, appendQuotedString, (, final, String, pattern, ,]
[), ;, return, pos, ;, }, private, StringBuilder, appendQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,, final, StringBuilder]
[;, }, private, StringBuilder, appendQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,, final, StringBuilder, appendTo, ,, final, boolean]
[;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, if, (, escapingOn, &&, c, [, start]
[., getIndex, (, ), ;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, if, (, escapingOn]
[;, if, (, escapingOn, &&, c, [, start, ], ==, QUOTE, ), {, next, (, pos, ), ;, return, appendTo]
[., toCharArray, (, ), ;, if, (, escapingOn, &&, c, [, start, ], ==, QUOTE, ), {, next, (, pos]
[), {, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, QUOTE, )]
[&&, c, [, start, ], ==, QUOTE, ), {, next, (, pos, ), ;, return, appendTo, ==, null, ?, null]
[), {, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, QUOTE, )]
[==, QUOTE, ), {, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (]
[[, start, ], ==, QUOTE, ), {, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo]
[], ==, QUOTE, ), {, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append]
[), {, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, QUOTE, )]
[;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, QUOTE, ), ;, }, int, lastHold, =, start]
[), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, QUOTE, ), ;, }, int, lastHold, =]
[;, }, int, lastHold, =, start, ;, for, (, int, i, =, pos, ., getIndex, (, ), ;, i, <]
[?, null, :, appendTo, ., append, (, QUOTE, ), ;, }, int, lastHold, =, start, ;, for, (, int, i]
[==, null, ?, null, :, appendTo, ., append, (, QUOTE, ), ;, }, int, lastHold, =, start, ;, for, (]
[?, null, :, appendTo, ., append, (, QUOTE, ), ;, }, int, lastHold, =, start, ;, for, (, int, i]
[:, appendTo, ., append, (, QUOTE, ), ;, }, int, lastHold, =, start, ;, for, (, int, i, =, pos]
[;, }, int, lastHold, =, start, ;, for, (, int, i, =, pos, ., getIndex, (, ), ;, i, <]
[., append, (, QUOTE, ), ;, }, int, lastHold, =, start, ;, for, (, int, i, =, pos, ., getIndex]
[), ;, }, int, lastHold, =, start, ;, for, (, int, i, =, pos, ., getIndex, (, ), ;, i]
[;, for, (, int, i, =, pos, ., getIndex, (, ), ;, i, <, pattern, ., length, (, ), ;]
[;, i, <, pattern, ., length, (, ), ;, i, ++, ), {, if, (, escapingOn, &&, pattern, ., substring]
[., getIndex, (, ), ;, i, <, pattern, ., length, (, ), ;, i, ++, ), {, if, (, escapingOn]
[;, i, ++, ), {, if, (, escapingOn, &&, pattern, ., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, )]
[<, pattern, ., length, (, ), ;, i, ++, ), {, if, (, escapingOn, &&, pattern, ., substring, (, i]
[;, i, ++, ), {, if, (, escapingOn, &&, pattern, ., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, )]
[., length, (, ), ;, i, ++, ), {, if, (, escapingOn, &&, pattern, ., substring, (, i, ), .]
[), {, if, (, escapingOn, &&, pattern, ., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {, appendTo]
[++, ), {, if, (, escapingOn, &&, pattern, ., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {]
[), {, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ., append]
[&&, pattern, ., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {, appendTo, ., append, (, c, ,]
[), {, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ., append]
[., startsWith, (, ESCAPED_QUOTE, ), ), {, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, )]
[., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {, appendTo, ., append, (, c, ,, lastHold, ,]
[), ., startsWith, (, ESCAPED_QUOTE, ), ), {, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (]
[), ), {, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), .]
[;, pos, ., setIndex, (, i, +, ESCAPED_QUOTE, ., length, (, ), ), ;, lastHold, =, pos, ., getIndex, (]
[., append, (, QUOTE, ), ;, pos, ., setIndex, (, i, +, ESCAPED_QUOTE, ., length, (, ), ), ;, lastHold]
[., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ., append, (, QUOTE, )]
[,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ., append, (, QUOTE, ), ;, pos, ., setIndex]
[,, pos, ., getIndex, (, ), -, lastHold, ), ., append, (, QUOTE, ), ;, pos, ., setIndex, (, i]
[), ., append, (, QUOTE, ), ;, pos, ., setIndex, (, i, +, ESCAPED_QUOTE, ., length, (, ), ), ;]
[-, lastHold, ), ., append, (, QUOTE, ), ;, pos, ., setIndex, (, i, +, ESCAPED_QUOTE, ., length, (, )]
[., getIndex, (, ), -, lastHold, ), ., append, (, QUOTE, ), ;, pos, ., setIndex, (, i, +, ESCAPED_QUOTE]
[), ., append, (, QUOTE, ), ;, pos, ., setIndex, (, i, +, ESCAPED_QUOTE, ., length, (, ), ), ;]
[), ;, pos, ., setIndex, (, i, +, ESCAPED_QUOTE, ., length, (, ), ), ;, lastHold, =, pos, ., getIndex]
[;, lastHold, =, pos, ., getIndex, (, ), ;, continue, ;, }, switch, (, c, [, pos, ., getIndex, (]
[., setIndex, (, i, +, ESCAPED_QUOTE, ., length, (, ), ), ;, lastHold, =, pos, ., getIndex, (, ), ;]
[), ;, lastHold, =, pos, ., getIndex, (, ), ;, continue, ;, }, switch, (, c, [, pos, ., getIndex]
[+, ESCAPED_QUOTE, ., length, (, ), ), ;, lastHold, =, pos, ., getIndex, (, ), ;, continue, ;, }, switch]
[), ;, lastHold, =, pos, ., getIndex, (, ), ;, continue, ;, }, switch, (, c, [, pos, ., getIndex]
[., length, (, ), ), ;, lastHold, =, pos, ., getIndex, (, ), ;, continue, ;, }, switch, (, c]
[=, pos, ., getIndex, (, ), ;, continue, ;, }, switch, (, c, [, pos, ., getIndex, (, ), ]]
[;, continue, ;, }, switch, (, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, next]
[., getIndex, (, ), ;, continue, ;, }, switch, (, c, [, pos, ., getIndex, (, ), ], ), {]
[), {, case, QUOTE, :, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append]
[[, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, next, (, pos, ), ;, return, appendTo, ==]
[], ), {, case, QUOTE, :, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, .]
[., getIndex, (, ), ], ), {, case, QUOTE, :, next, (, pos, ), ;, return, appendTo, ==, null, ?]
[:, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, c, ,, lastHold]
[;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (]
[), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex]
[;, default, :, next, (, pos, ), ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated quoted string at position ", +, start, ), ;, }]
[?, null, :, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ;]
[==, null, ?, null, :, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold]
[?, null, :, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ;]
[:, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ;, default, :]
[;, default, :, next, (, pos, ), ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated quoted string at position ", +, start, ), ;, }]
[., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ;, default, :, next, (]
[,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ;, default, :, next, (, pos, ), ;, }]
[,, pos, ., getIndex, (, ), -, lastHold, ), ;, default, :, next, (, pos, ), ;, }, }, throw]
[), ;, default, :, next, (, pos, ), ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated quoted string at position ", +, start, ), ;]
[-, lastHold, ), ;, default, :, next, (, pos, ), ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated quoted string at position ", +, start]
[., getIndex, (, ), -, lastHold, ), ;, default, :, next, (, pos, ), ;, }, }, throw, new, IllegalArgumentException]
[), ;, default, :, next, (, pos, ), ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated quoted string at position ", +, start, ), ;]
[;, }, }, throw, new, IllegalArgumentException, (, "Unterminated quoted string at position ", +, start, ), ;, }, private, void, getQuotedString, (, final, String, pattern]
[), ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated quoted string at position ", +, start, ), ;, }, private, void, getQuotedString, (, final, String]
[;, }, private, void, getQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,, final, boolean, escapingOn, ), {, appendQuotedString]
[), ;, }, private, void, getQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,, final, boolean, escapingOn, ), {]
[+, start, ), ;, }, private, void, getQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,, final, boolean, escapingOn]
[), ;, }, private, void, getQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,, final, boolean, escapingOn, ), {]
[;, }, private, boolean, containsElements, (, final, Collection, <, ?, >, coll, ), {, if, (, coll, ==, null, ||]
[,, pos, ,, null, ,, escapingOn, ), ;, }, private, boolean, containsElements, (, final, Collection, <, ?, >, coll, )]
[,, null, ,, escapingOn, ), ;, }, private, boolean, containsElements, (, final, Collection, <, ?, >, coll, ), {, if]
[,, escapingOn, ), ;, }, private, boolean, containsElements, (, final, Collection, <, ?, >, coll, ), {, if, (, coll]
[), ;, }, private, boolean, containsElements, (, final, Collection, <, ?, >, coll, ), {, if, (, coll, ==, null]
[), {, return, false, ;, }, for, (, final, Object, name, :, coll, ), {, if, (, name, !=, null]
[||, coll, ., isEmpty, (, ), ), {, return, false, ;, }, for, (, final, Object, name, :, coll, )]
[==, null, ||, coll, ., isEmpty, (, ), ), {, return, false, ;, }, for, (, final, Object, name, :]
[||, coll, ., isEmpty, (, ), ), {, return, false, ;, }, for, (, final, Object, name, :, coll, )]
[), {, return, false, ;, }, for, (, final, Object, name, :, coll, ), {, if, (, name, !=, null]
[., isEmpty, (, ), ), {, return, false, ;, }, for, (, final, Object, name, :, coll, ), {, if]
[;, }, for, (, final, Object, name, :, coll, ), {, if, (, name, !=, null, ), {, return, true]
[), {, if, (, name, !=, null, ), {, return, true, ;, }, }, return, false, ;, }, }]
[), {, return, true, ;, }, }, return, false, ;, }, }]
[!=, null, ), {, return, true, ;, }, }, return, false, ;, }, }]
[), {, return, true, ;, }, }, return, false, ;, }, }]
[;, }, }, return, false, ;, }, }]
[;, }, }]
