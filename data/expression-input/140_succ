[;, private, final, List, <, Var, >, maybeUnreferenced, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Scope]
[., newHashSet, (, ), ;, private, final, List, <, Var, >, maybeUnreferenced, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, final, List, <, Scope, >, allFunctionScopes, =, Lists, ., newArrayList, (, ), ;, private, final, Multimap, <, Var]
[., newArrayList, (, ), ;, private, final, List, <, Scope, >, allFunctionScopes, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, final, Multimap, <, Var, ,, Assign, >, assignsByVar, =, ArrayListMultimap, ., create, (, ), ;, private, final, Map]
[., newArrayList, (, ), ;, private, final, Multimap, <, Var, ,, Assign, >, assignsByVar, =, ArrayListMultimap, ., create, (, )]
[;, private, final, Map, <, Node, ,, Assign, >, assignsByNode, =, Maps, ., newHashMap, (, ), ;, private, final, Multimap]
[., create, (, ), ;, private, final, Map, <, Node, ,, Assign, >, assignsByNode, =, Maps, ., newHashMap, (, )]
[;, private, final, Multimap, <, Var, ,, Node, >, classDefiningCalls, =, ArrayListMultimap, ., create, (, ), ;, private, final, Multimap]
[., newHashMap, (, ), ;, private, final, Multimap, <, Var, ,, Node, >, classDefiningCalls, =, ArrayListMultimap, ., create, (, )]
[;, private, final, Multimap, <, Var, ,, Continuation, >, continuations, =, ArrayListMultimap, ., create, (, ), ;, private, boolean, modifyCallSites]
[., create, (, ), ;, private, final, Multimap, <, Var, ,, Continuation, >, continuations, =, ArrayListMultimap, ., create, (, )]
[;, private, boolean, modifyCallSites, ;, private, CallSiteOptimizer, callSiteOptimizer, ;, RemoveUnusedVars, (, AbstractCompiler, compiler, ,, boolean, removeGlobals, ,, boolean, preserveFunctionExpressionNames, ,]
[., create, (, ), ;, private, boolean, modifyCallSites, ;, private, CallSiteOptimizer, callSiteOptimizer, ;, RemoveUnusedVars, (, AbstractCompiler, compiler, ,, boolean, removeGlobals]
[=, compiler, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals, ;, this]
[., compiler, =, compiler, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals]
[;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals, ;, this, ., preserveFunctionExpressionNames]
[=, compiler, ., getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, this]
[., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames]
[;, this, ., removeGlobals, =, removeGlobals, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, this, ., modifyCallSites, =, modifyCallSites, ;, }]
[., getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, this, ., modifyCallSites]
[=, removeGlobals, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, this, ., modifyCallSites, =, modifyCallSites, ;, }, @, Override, public, void]
[., removeGlobals, =, removeGlobals, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, this, ., modifyCallSites, =, modifyCallSites, ;, }, @, Override]
[;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, this, ., modifyCallSites, =, modifyCallSites, ;, }, @, Override, public, void, process, (]
[=, preserveFunctionExpressionNames, ;, this, ., modifyCallSites, =, modifyCallSites, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, this, ., modifyCallSites, =, modifyCallSites, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., modifyCallSites, =, modifyCallSites, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, modifyCallSites, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState]
[., modifyCallSites, =, modifyCallSites, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, compiler]
[;, SimpleDefinitionFinder, defFinder, =, null, ;, if, (, modifyCallSites, ), {, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, SimpleDefinitionFinder, defFinder, =, null, ;, if]
[), ;, SimpleDefinitionFinder, defFinder, =, null, ;, if, (, modifyCallSites, ), {, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[., isNormalized, (, ), ), ;, SimpleDefinitionFinder, defFinder, =, null, ;, if, (, modifyCallSites, ), {, defFinder, =, new, SimpleDefinitionFinder]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, SimpleDefinitionFinder, defFinder, =, null, ;, if, (, modifyCallSites, ), {]
[;, if, (, modifyCallSites, ), {, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,]
[), {, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, }]
[=, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, }, process, (, externs]
[;, defFinder, ., process, (, externs, ,, root, ), ;, }, process, (, externs, ,, root, ,, defFinder, ), ;]
[), ;, defFinder, ., process, (, externs, ,, root, ), ;, }, process, (, externs, ,, root, ,, defFinder, )]
[;, }, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs]
[., process, (, externs, ,, root, ), ;, }, process, (, externs, ,, root, ,, defFinder, ), ;, }, @]
[,, root, ), ;, }, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process]
[), ;, }, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, defFinder, ), {, if, (]
[,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder]
[,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, defFinder, )]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, defFinder, ), {, if]
[), {, Preconditions, ., checkNotNull, (, defFinder, ), ;, callSiteOptimizer, =, new, CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }]
[;, callSiteOptimizer, =, new, CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }, traverseAndRemoveUnusedReferences, (, root, ), ;, if, (, callSiteOptimizer]
[., checkNotNull, (, defFinder, ), ;, callSiteOptimizer, =, new, CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }, traverseAndRemoveUnusedReferences, (, root]
[), ;, callSiteOptimizer, =, new, CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }, traverseAndRemoveUnusedReferences, (, root, ), ;, if, (]
[=, new, CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }, traverseAndRemoveUnusedReferences, (, root, ), ;, if, (, callSiteOptimizer, !=, null]
[;, }, traverseAndRemoveUnusedReferences, (, root, ), ;, if, (, callSiteOptimizer, !=, null, ), {, callSiteOptimizer, ., applyChanges, (, ), ;]
[,, defFinder, ), ;, }, traverseAndRemoveUnusedReferences, (, root, ), ;, if, (, callSiteOptimizer, !=, null, ), {, callSiteOptimizer, ., applyChanges]
[), ;, }, traverseAndRemoveUnusedReferences, (, root, ), ;, if, (, callSiteOptimizer, !=, null, ), {, callSiteOptimizer, ., applyChanges, (, )]
[;, if, (, callSiteOptimizer, !=, null, ), {, callSiteOptimizer, ., applyChanges, (, ), ;, }, }, private, void, traverseAndRemoveUnusedReferences, (]
[), ;, if, (, callSiteOptimizer, !=, null, ), {, callSiteOptimizer, ., applyChanges, (, ), ;, }, }, private, void, traverseAndRemoveUnusedReferences]
[), {, callSiteOptimizer, ., applyChanges, (, ), ;, }, }, private, void, traverseAndRemoveUnusedReferences, (, Node, root, ), {, Scope, scope]
[!=, null, ), {, callSiteOptimizer, ., applyChanges, (, ), ;, }, }, private, void, traverseAndRemoveUnusedReferences, (, Node, root, ), {]
[), {, callSiteOptimizer, ., applyChanges, (, ), ;, }, }, private, void, traverseAndRemoveUnusedReferences, (, Node, root, ), {, Scope, scope]
[;, }, }, private, void, traverseAndRemoveUnusedReferences, (, Node, root, ), {, Scope, scope, =, new, SyntacticScopeCreator, (, compiler, ), .]
[., applyChanges, (, ), ;, }, }, private, void, traverseAndRemoveUnusedReferences, (, Node, root, ), {, Scope, scope, =, new, SyntacticScopeCreator]
[;, traverseNode, (, root, ,, null, ,, scope, ), ;, if, (, removeGlobals, ), {, collectMaybeUnreferencedVars, (, scope, ), ;]
[., createScope, (, root, ,, null, ), ;, traverseNode, (, root, ,, null, ,, scope, ), ;, if, (, removeGlobals]
[), ., createScope, (, root, ,, null, ), ;, traverseNode, (, root, ,, null, ,, scope, ), ;, if, (]
[,, null, ), ;, traverseNode, (, root, ,, null, ,, scope, ), ;, if, (, removeGlobals, ), {, collectMaybeUnreferencedVars, (]
[), ;, traverseNode, (, root, ,, null, ,, scope, ), ;, if, (, removeGlobals, ), {, collectMaybeUnreferencedVars, (, scope, )]
[;, if, (, removeGlobals, ), {, collectMaybeUnreferencedVars, (, scope, ), ;, }, interpretAssigns, (, ), ;, removeUnreferencedVars, (, ), ;]
[,, null, ,, scope, ), ;, if, (, removeGlobals, ), {, collectMaybeUnreferencedVars, (, scope, ), ;, }, interpretAssigns, (, )]
[,, scope, ), ;, if, (, removeGlobals, ), {, collectMaybeUnreferencedVars, (, scope, ), ;, }, interpretAssigns, (, ), ;, removeUnreferencedVars]
[), ;, if, (, removeGlobals, ), {, collectMaybeUnreferencedVars, (, scope, ), ;, }, interpretAssigns, (, ), ;, removeUnreferencedVars, (, )]
[), {, collectMaybeUnreferencedVars, (, scope, ), ;, }, interpretAssigns, (, ), ;, removeUnreferencedVars, (, ), ;, for, (, Scope, fnScope]
[;, }, interpretAssigns, (, ), ;, removeUnreferencedVars, (, ), ;, for, (, Scope, fnScope, :, allFunctionScopes, ), {, removeUnreferencedFunctionArgs, (]
[), ;, }, interpretAssigns, (, ), ;, removeUnreferencedVars, (, ), ;, for, (, Scope, fnScope, :, allFunctionScopes, ), {, removeUnreferencedFunctionArgs]
[;, removeUnreferencedVars, (, ), ;, for, (, Scope, fnScope, :, allFunctionScopes, ), {, removeUnreferencedFunctionArgs, (, fnScope, ), ;, }, }]
[;, for, (, Scope, fnScope, :, allFunctionScopes, ), {, removeUnreferencedFunctionArgs, (, fnScope, ), ;, }, }, private, void, traverseNode, (]
[), {, removeUnreferencedFunctionArgs, (, fnScope, ), ;, }, }, private, void, traverseNode, (, Node, n, ,, Node, parent, ,, Scope]
[;, }, }, private, void, traverseNode, (, Node, n, ,, Node, parent, ,, Scope, scope, ), {, int, type, =]
[), ;, }, }, private, void, traverseNode, (, Node, n, ,, Node, parent, ,, Scope, scope, ), {, int, type]
[;, Var, var, =, null, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :, if, (, NodeUtil, .]
[., getType, (, ), ;, Var, var, =, null, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :]
[;, switch, (, type, ), {, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), )]
[), {, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, var, =, scope]
[:, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, var, =, scope, ., getVar, (, n, ., getFirstChild]
[., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, var, =, scope, ., getVar, (, n]
[), {, var, =, scope, ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }]
[., isFunctionDeclaration, (, n, ), ), {, var, =, scope, ., getVar, (, n, ., getFirstChild, (, ), ., getString]
[), ), {, var, =, scope, ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;]
[=, scope, ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, if, (, var]
[;, }, if, (, var, !=, null, &&, isRemovableVar, (, var, ), ), {, continuations, ., put, (, var, ,]
[., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, if, (, var, !=, null]
[), ;, }, if, (, var, !=, null, &&, isRemovableVar, (, var, ), ), {, continuations, ., put, (, var]
[., getString, (, ), ), ;, }, if, (, var, !=, null, &&, isRemovableVar, (, var, ), ), {, continuations]
[., getFirstChild, (, ), ., getString, (, ), ), ;, }, if, (, var, !=, null, &&, isRemovableVar, (, var]
[), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, }, else, {]
[&&, isRemovableVar, (, var, ), ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, )]
[!=, null, &&, isRemovableVar, (, var, ), ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,]
[&&, isRemovableVar, (, var, ), ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, )]
[), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, }, else, {]
[), ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, }, else]
[;, }, else, {, traverseFunction, (, n, ,, scope, ), ;, }, return, ;, case, Token, ., ASSIGN, :, Assign]
[., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, }, else, {, traverseFunction, (, n]
[,, new, Continuation, (, n, ,, scope, ), ), ;, }, else, {, traverseFunction, (, n, ,, scope, ), ;]
[), ;, }, else, {, traverseFunction, (, n, ,, scope, ), ;, }, return, ;, case, Token, ., ASSIGN, :]
[,, scope, ), ), ;, }, else, {, traverseFunction, (, n, ,, scope, ), ;, }, return, ;, case, Token]
[), ), ;, }, else, {, traverseFunction, (, n, ,, scope, ), ;, }, return, ;, case, Token, ., ASSIGN]
[;, }, return, ;, case, Token, ., ASSIGN, :, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (, n, ), ;, if]
[,, scope, ), ;, }, return, ;, case, Token, ., ASSIGN, :, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (, n]
[), ;, }, return, ;, case, Token, ., ASSIGN, :, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (, n, ), ;]
[:, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (, n, ), ;, if, (, maybeAssign, !=, null, ), {, var, =]
[., ASSIGN, :, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (, n, ), ;, if, (, maybeAssign, !=, null, ), {]
[;, if, (, maybeAssign, !=, null, ), {, var, =, scope, ., getVar, (, maybeAssign, ., nameNode, ., getString, (]
[., maybeCreateAssign, (, n, ), ;, if, (, maybeAssign, !=, null, ), {, var, =, scope, ., getVar, (, maybeAssign]
[), ;, if, (, maybeAssign, !=, null, ), {, var, =, scope, ., getVar, (, maybeAssign, ., nameNode, ., getString]
[), {, var, =, scope, ., getVar, (, maybeAssign, ., nameNode, ., getString, (, ), ), ;, if, (, var]
[!=, null, ), {, var, =, scope, ., getVar, (, maybeAssign, ., nameNode, ., getString, (, ), ), ;, if]
[), {, var, =, scope, ., getVar, (, maybeAssign, ., nameNode, ., getString, (, ), ), ;, if, (, var]
[=, scope, ., getVar, (, maybeAssign, ., nameNode, ., getString, (, ), ), ;, if, (, var, !=, null, )]
[;, if, (, var, !=, null, ), {, assignsByVar, ., put, (, var, ,, maybeAssign, ), ;, assignsByNode, ., put]
[., getVar, (, maybeAssign, ., nameNode, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, assignsByVar]
[), ;, if, (, var, !=, null, ), {, assignsByVar, ., put, (, var, ,, maybeAssign, ), ;, assignsByNode, .]
[., getString, (, ), ), ;, if, (, var, !=, null, ), {, assignsByVar, ., put, (, var, ,, maybeAssign]
[., nameNode, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, assignsByVar, ., put, (, var]
[), {, assignsByVar, ., put, (, var, ,, maybeAssign, ), ;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign]
[!=, null, ), {, assignsByVar, ., put, (, var, ,, maybeAssign, ), ;, assignsByNode, ., put, (, maybeAssign, ., nameNode]
[), {, assignsByVar, ., put, (, var, ,, maybeAssign, ), ;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign]
[;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (, isRemovableVar, (, var, ), &&, !]
[., put, (, var, ,, maybeAssign, ), ;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if]
[,, maybeAssign, ), ;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (, isRemovableVar, (, var]
[), ;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (, isRemovableVar, (, var, ), &&]
[;, if, (, isRemovableVar, (, var, ), &&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {, continuations, ., put, (, var, ,]
[., put, (, maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (, isRemovableVar, (, var, ), &&, !, maybeAssign, .]
[,, maybeAssign, ), ;, if, (, isRemovableVar, (, var, ), &&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {, continuations, ., put]
[., nameNode, ,, maybeAssign, ), ;, if, (, isRemovableVar, (, var, ), &&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {, continuations]
[), ;, if, (, isRemovableVar, (, var, ), &&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {, continuations, ., put, (, var]
[), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }]
[&&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, )]
[), &&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope]
[), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }]
[), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }]
[., mayHaveSecondarySideEffects, ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return]
[;, return, ;, }, }, }, break, ;, case, Token, ., CALL, :, Var, modifiedVar, =, null, ;, SubclassRelationship, subclassRelationship]
[., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, }, }, break]
[,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, }, }, break, ;, case, Token, .]
[), ;, return, ;, }, }, }, break, ;, case, Token, ., CALL, :, Var, modifiedVar, =, null, ;, SubclassRelationship]
[,, scope, ), ), ;, return, ;, }, }, }, break, ;, case, Token, ., CALL, :, Var, modifiedVar, =]
[), ), ;, return, ;, }, }, }, break, ;, case, Token, ., CALL, :, Var, modifiedVar, =, null, ;]
[:, Var, modifiedVar, =, null, ;, SubclassRelationship, subclassRelationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, subclassRelationship, !=]
[., CALL, :, Var, modifiedVar, =, null, ;, SubclassRelationship, subclassRelationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (]
[;, SubclassRelationship, subclassRelationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, subclassRelationship, !=, null, ), {, modifiedVar, =]
[;, if, (, subclassRelationship, !=, null, ), {, modifiedVar, =, scope, ., getVar, (, subclassRelationship, ., subclassName, ), ;, }]
[., getClassesDefinedByCall, (, n, ), ;, if, (, subclassRelationship, !=, null, ), {, modifiedVar, =, scope, ., getVar, (, subclassRelationship]
[), ;, if, (, subclassRelationship, !=, null, ), {, modifiedVar, =, scope, ., getVar, (, subclassRelationship, ., subclassName, ), ;]
[), {, modifiedVar, =, scope, ., getVar, (, subclassRelationship, ., subclassName, ), ;, }, else, {, String, className, =, codingConvention]
[!=, null, ), {, modifiedVar, =, scope, ., getVar, (, subclassRelationship, ., subclassName, ), ;, }, else, {, String, className]
[), {, modifiedVar, =, scope, ., getVar, (, subclassRelationship, ., subclassName, ), ;, }, else, {, String, className, =, codingConvention]
[=, scope, ., getVar, (, subclassRelationship, ., subclassName, ), ;, }, else, {, String, className, =, codingConvention, ., getSingletonGetterClassName, (]
[;, }, else, {, String, className, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, className, !=, null, )]
[., getVar, (, subclassRelationship, ., subclassName, ), ;, }, else, {, String, className, =, codingConvention, ., getSingletonGetterClassName, (, n, )]
[), ;, }, else, {, String, className, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, className, !=, null]
[., subclassName, ), ;, }, else, {, String, className, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, className]
[;, if, (, className, !=, null, ), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }, if]
[., getSingletonGetterClassName, (, n, ), ;, if, (, className, !=, null, ), {, modifiedVar, =, scope, ., getVar, (, className]
[), ;, if, (, className, !=, null, ), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }]
[), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }, if, (, modifiedVar, !=, null, &&, modifiedVar]
[!=, null, ), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }, if, (, modifiedVar, !=, null]
[), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }, if, (, modifiedVar, !=, null, &&, modifiedVar]
[=, scope, ., getVar, (, className, ), ;, }, }, if, (, modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (]
[;, }, }, if, (, modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (, ), &&, !, referenced, ., contains, (]
[., getVar, (, className, ), ;, }, }, if, (, modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (, ), &&]
[), ;, }, }, if, (, modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (, ), &&, !, referenced, ., contains]
[), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;, continuations, ., put, (, modifiedVar, ,, new, Continuation, (]
[&&, !, referenced, ., contains, (, modifiedVar, ), ), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;, continuations]
[&&, modifiedVar, ., isGlobal, (, ), &&, !, referenced, ., contains, (, modifiedVar, ), ), {, classDefiningCalls, ., put, (]
[!=, null, &&, modifiedVar, ., isGlobal, (, ), &&, !, referenced, ., contains, (, modifiedVar, ), ), {, classDefiningCalls, .]
[&&, modifiedVar, ., isGlobal, (, ), &&, !, referenced, ., contains, (, modifiedVar, ), ), {, classDefiningCalls, ., put, (]
[&&, !, referenced, ., contains, (, modifiedVar, ), ), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;, continuations]
[., isGlobal, (, ), &&, !, referenced, ., contains, (, modifiedVar, ), ), {, classDefiningCalls, ., put, (, modifiedVar, ,]
[), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;, continuations, ., put, (, modifiedVar, ,, new, Continuation, (]
[), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;, continuations, ., put, (, modifiedVar, ,, new, Continuation, (]
[., contains, (, modifiedVar, ), ), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;, continuations, ., put, (]
[), ), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;, continuations, ., put, (, modifiedVar, ,, new, Continuation]
[;, continuations, ., put, (, modifiedVar, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, break]
[., put, (, modifiedVar, ,, parent, ), ;, continuations, ., put, (, modifiedVar, ,, new, Continuation, (, n, ,, scope]
[,, parent, ), ;, continuations, ., put, (, modifiedVar, ,, new, Continuation, (, n, ,, scope, ), ), ;, return]
[), ;, continuations, ., put, (, modifiedVar, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }]
[;, return, ;, }, break, ;, case, Token, ., NAME, :, var, =, scope, ., getVar, (, n, ., getString]
[., put, (, modifiedVar, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, break, ;, case]
[,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, break, ;, case, Token, ., NAME, :]
[), ;, return, ;, }, break, ;, case, Token, ., NAME, :, var, =, scope, ., getVar, (, n, .]
[,, scope, ), ), ;, return, ;, }, break, ;, case, Token, ., NAME, :, var, =, scope, ., getVar]
[), ), ;, return, ;, }, break, ;, case, Token, ., NAME, :, var, =, scope, ., getVar, (, n]
[:, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, parent, ., isVar, (]
[., NAME, :, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, parent, .]
[=, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, parent, ., isVar, (, ), )]
[;, if, (, parent, ., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, parent, ., isVar, (, ), ), {, Node]
[), ;, if, (, parent, ., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;]
[., getString, (, ), ), ;, if, (, parent, ., isVar, (, ), ), {, Node, value, =, n, .]
[), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&, var, !=, null]
[., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=, null]
[;, if, (, value, !=, null, &&, var, !=, null, &&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects]
[., getFirstChild, (, ), ;, if, (, value, !=, null, &&, var, !=, null, &&, isRemovableVar, (, var, ), &&]
[), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }]
[&&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations, ., put, (, var, ,, new, Continuation]
[&&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations, ., put]
[&&, var, !=, null, &&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), )]
[!=, null, &&, var, !=, null, &&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler]
[&&, var, !=, null, &&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), )]
[&&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations, ., put]
[!=, null, &&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations]
[&&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations, ., put]
[&&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations, ., put, (, var, ,, new, Continuation]
[), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations, ., put, (, var, ,, new]
[), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }]
[), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }]
[., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,]
[,, compiler, ), ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;]
[), ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;]
[;, return, ;, }, }, else, {, if, (, "arguments", ., equals, (, n, ., getString, (, ), ), &&]
[., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, }, else, {]
[,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, }, else, {, if, (, "arguments", .]
[), ;, return, ;, }, }, else, {, if, (, "arguments", ., equals, (, n, ., getString, (, ), )]
[,, scope, ), ), ;, return, ;, }, }, else, {, if, (, "arguments", ., equals, (, n, ., getString]
[), ), ;, return, ;, }, }, else, {, if, (, "arguments", ., equals, (, n, ., getString, (, )]
[), {, Node, lp, =, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, for]
[&&, scope, ., isLocal, (, ), ), {, Node, lp, =, scope, ., getRootNode, (, ), ., getFirstChild, (, )]
[., equals, (, n, ., getString, (, ), ), &&, scope, ., isLocal, (, ), ), {, Node, lp, =]
[), &&, scope, ., isLocal, (, ), ), {, Node, lp, =, scope, ., getRootNode, (, ), ., getFirstChild, (]
[., getString, (, ), ), &&, scope, ., isLocal, (, ), ), {, Node, lp, =, scope, ., getRootNode, (]
[), {, Node, lp, =, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, for]
[., isLocal, (, ), ), {, Node, lp, =, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext]
[;, for, (, Node, a, =, lp, ., getFirstChild, (, ), ;, a, !=, null, ;, a, =, a, .]
[., getNext, (, ), ;, for, (, Node, a, =, lp, ., getFirstChild, (, ), ;, a, !=, null, ;]
[., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, a, =, lp, ., getFirstChild, (, ), ;]
[., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, a, =, lp, .]
[;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {, markReferencedVar, (, scope, ., getVar, (]
[., getFirstChild, (, ), ;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {, markReferencedVar, (]
[;, a, =, a, ., getNext, (, ), ), {, markReferencedVar, (, scope, ., getVar, (, a, ., getString, (]
[!=, null, ;, a, =, a, ., getNext, (, ), ), {, markReferencedVar, (, scope, ., getVar, (, a, .]
[;, a, =, a, ., getNext, (, ), ), {, markReferencedVar, (, scope, ., getVar, (, a, ., getString, (]
[=, a, ., getNext, (, ), ), {, markReferencedVar, (, scope, ., getVar, (, a, ., getString, (, ), )]
[), {, markReferencedVar, (, scope, ., getVar, (, a, ., getString, (, ), ), ), ;, }, }, if, (]
[., getNext, (, ), ), {, markReferencedVar, (, scope, ., getVar, (, a, ., getString, (, ), ), ), ;]
[;, }, }, if, (, var, !=, null, ), {, if, (, isRemovableVar, (, var, ), ), {, if, (]
[), ;, }, }, if, (, var, !=, null, ), {, if, (, isRemovableVar, (, var, ), ), {, if]
[., getVar, (, a, ., getString, (, ), ), ), ;, }, }, if, (, var, !=, null, ), {]
[), ), ;, }, }, if, (, var, !=, null, ), {, if, (, isRemovableVar, (, var, ), ), {]
[., getString, (, ), ), ), ;, }, }, if, (, var, !=, null, ), {, if, (, isRemovableVar, (]
[), {, if, (, isRemovableVar, (, var, ), ), {, if, (, !, assignsByNode, ., containsKey, (, n, ), )]
[!=, null, ), {, if, (, isRemovableVar, (, var, ), ), {, if, (, !, assignsByNode, ., containsKey, (, n]
[), {, if, (, isRemovableVar, (, var, ), ), {, if, (, !, assignsByNode, ., containsKey, (, n, ), )]
[), {, if, (, !, assignsByNode, ., containsKey, (, n, ), ), {, markReferencedVar, (, var, ), ;, }, }]
[), ), {, if, (, !, assignsByNode, ., containsKey, (, n, ), ), {, markReferencedVar, (, var, ), ;, }]
[), {, markReferencedVar, (, var, ), ;, }, }, else, {, markReferencedVar, (, var, ), ;, }, }, }, break]
[), {, markReferencedVar, (, var, ), ;, }, }, else, {, markReferencedVar, (, var, ), ;, }, }, }, break]
[., containsKey, (, n, ), ), {, markReferencedVar, (, var, ), ;, }, }, else, {, markReferencedVar, (, var, )]
[), ), {, markReferencedVar, (, var, ), ;, }, }, else, {, markReferencedVar, (, var, ), ;, }, }, }]
[;, }, }, else, {, markReferencedVar, (, var, ), ;, }, }, }, break, ;, }, for, (, Node, c]
[), ;, }, }, else, {, markReferencedVar, (, var, ), ;, }, }, }, break, ;, }, for, (, Node]
[;, }, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[), ;, }, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, traverseNode, (, c, ,, n, ,]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, traverseNode, (]
[;, c, =, c, ., getNext, (, ), ), {, traverseNode, (, c, ,, n, ,, scope, ), ;, }]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, traverseNode, (, c, ,, n, ,, scope, )]
[;, c, =, c, ., getNext, (, ), ), {, traverseNode, (, c, ,, n, ,, scope, ), ;, }]
[=, c, ., getNext, (, ), ), {, traverseNode, (, c, ,, n, ,, scope, ), ;, }, }, private]
[), {, traverseNode, (, c, ,, n, ,, scope, ), ;, }, }, private, boolean, isRemovableVar, (, Var, var, )]
[., getNext, (, ), ), {, traverseNode, (, c, ,, n, ,, scope, ), ;, }, }, private, boolean, isRemovableVar]
[;, }, }, private, boolean, isRemovableVar, (, Var, var, ), {, if, (, !, removeGlobals, &&, var, ., isGlobal, (]
[,, n, ,, scope, ), ;, }, }, private, boolean, isRemovableVar, (, Var, var, ), {, if, (, !, removeGlobals]
[,, scope, ), ;, }, }, private, boolean, isRemovableVar, (, Var, var, ), {, if, (, !, removeGlobals, &&, var]
[), ;, }, }, private, boolean, isRemovableVar, (, Var, var, ), {, if, (, !, removeGlobals, &&, var, ., isGlobal]
[), {, return, false, ;, }, if, (, referenced, ., contains, (, var, ), ), {, return, false, ;, }]
[&&, var, ., isGlobal, (, ), ), {, return, false, ;, }, if, (, referenced, ., contains, (, var, )]
[&&, var, ., isGlobal, (, ), ), {, return, false, ;, }, if, (, referenced, ., contains, (, var, )]
[), {, return, false, ;, }, if, (, referenced, ., contains, (, var, ), ), {, return, false, ;, }]
[., isGlobal, (, ), ), {, return, false, ;, }, if, (, referenced, ., contains, (, var, ), ), {]
[;, }, if, (, referenced, ., contains, (, var, ), ), {, return, false, ;, }, if, (, codingConvention, .]
[), {, return, false, ;, }, if, (, codingConvention, ., isExported, (, var, ., getName, (, ), ), ), {]
[., contains, (, var, ), ), {, return, false, ;, }, if, (, codingConvention, ., isExported, (, var, ., getName]
[), ), {, return, false, ;, }, if, (, codingConvention, ., isExported, (, var, ., getName, (, ), ), )]
[;, }, if, (, codingConvention, ., isExported, (, var, ., getName, (, ), ), ), {, return, false, ;, }]
[), {, return, false, ;, }, return, true, ;, }, private, void, traverseFunction, (, Node, n, ,, Scope, parentScope, )]
[., isExported, (, var, ., getName, (, ), ), ), {, return, false, ;, }, return, true, ;, }, private]
[), ), {, return, false, ;, }, return, true, ;, }, private, void, traverseFunction, (, Node, n, ,, Scope, parentScope]
[., getName, (, ), ), ), {, return, false, ;, }, return, true, ;, }, private, void, traverseFunction, (, Node]
[;, }, return, true, ;, }, private, void, traverseFunction, (, Node, n, ,, Scope, parentScope, ), {, Preconditions, ., checkState]
[;, }, private, void, traverseFunction, (, Node, n, ,, Scope, parentScope, ), {, Preconditions, ., checkState, (, n, ., getChildCount]
[;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, body, =, n, ., getLastChild, (]
[., checkState, (, n, ., getChildCount, (, ), ==, 3, ), ;, Preconditions, ., checkState, (, n, ., isFunction, (]
[), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, body, =, n, ., getLastChild]
[==, 3, ), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, body, =, n]
[., getChildCount, (, ), ==, 3, ), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final]
[), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, body, =, n, ., getLastChild]
[;, final, Node, body, =, n, ., getLastChild, (, ), ;, Preconditions, ., checkState, (, body, ., getNext, (, )]
[., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, body, =, n, ., getLastChild, (, ), ;]
[), ;, final, Node, body, =, n, ., getLastChild, (, ), ;, Preconditions, ., checkState, (, body, ., getNext, (]
[., isFunction, (, ), ), ;, final, Node, body, =, n, ., getLastChild, (, ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ), ;]
[., getLastChild, (, ), ;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock]
[;, Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n, ,, parentScope, ), ;, traverseNode, (, body]
[., checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ), ;, Scope, fnScope]
[), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n, ,, parentScope, ), ;, traverseNode, (]
[&&, body, ., isBlock, (, ), ), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n]
[==, null, &&, body, ., isBlock, (, ), ), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope]
[., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (]
[&&, body, ., isBlock, (, ), ), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n]
[), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n, ,, parentScope, ), ;, traverseNode, (]
[., isBlock, (, ), ), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n, ,, parentScope]
[;, traverseNode, (, body, ,, n, ,, fnScope, ), ;, collectMaybeUnreferencedVars, (, fnScope, ), ;, allFunctionScopes, ., add, (, fnScope]
[., createScope, (, n, ,, parentScope, ), ;, traverseNode, (, body, ,, n, ,, fnScope, ), ;, collectMaybeUnreferencedVars, (, fnScope]
[), ., createScope, (, n, ,, parentScope, ), ;, traverseNode, (, body, ,, n, ,, fnScope, ), ;, collectMaybeUnreferencedVars, (]
[,, parentScope, ), ;, traverseNode, (, body, ,, n, ,, fnScope, ), ;, collectMaybeUnreferencedVars, (, fnScope, ), ;, allFunctionScopes, .]
[), ;, traverseNode, (, body, ,, n, ,, fnScope, ), ;, collectMaybeUnreferencedVars, (, fnScope, ), ;, allFunctionScopes, ., add, (]
[;, collectMaybeUnreferencedVars, (, fnScope, ), ;, allFunctionScopes, ., add, (, fnScope, ), ;, }, private, void, collectMaybeUnreferencedVars, (, Scope, scope]
[,, n, ,, fnScope, ), ;, collectMaybeUnreferencedVars, (, fnScope, ), ;, allFunctionScopes, ., add, (, fnScope, ), ;, }, private]
[,, fnScope, ), ;, collectMaybeUnreferencedVars, (, fnScope, ), ;, allFunctionScopes, ., add, (, fnScope, ), ;, }, private, void, collectMaybeUnreferencedVars]
[), ;, collectMaybeUnreferencedVars, (, fnScope, ), ;, allFunctionScopes, ., add, (, fnScope, ), ;, }, private, void, collectMaybeUnreferencedVars, (, Scope]
[;, allFunctionScopes, ., add, (, fnScope, ), ;, }, private, void, collectMaybeUnreferencedVars, (, Scope, scope, ), {, for, (, Iterator]
[), ;, allFunctionScopes, ., add, (, fnScope, ), ;, }, private, void, collectMaybeUnreferencedVars, (, Scope, scope, ), {, for, (]
[;, }, private, void, collectMaybeUnreferencedVars, (, Scope, scope, ), {, for, (, Iterator, <, Var, >, it, =, scope, .]
[., add, (, fnScope, ), ;, }, private, void, collectMaybeUnreferencedVars, (, Scope, scope, ), {, for, (, Iterator, <, Var]
[), ;, }, private, void, collectMaybeUnreferencedVars, (, Scope, scope, ), {, for, (, Iterator, <, Var, >, it, =, scope]
[;, it, ., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, if, (]
[., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (]
[;, ), {, Var, var, =, it, ., next, (, ), ;, if, (, isRemovableVar, (, var, ), ), {]
[., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, if, (, isRemovableVar, (]
[;, if, (, isRemovableVar, (, var, ), ), {, maybeUnreferenced, ., add, (, var, ), ;, }, }, }, private]
[., next, (, ), ;, if, (, isRemovableVar, (, var, ), ), {, maybeUnreferenced, ., add, (, var, ), ;]
[), {, maybeUnreferenced, ., add, (, var, ), ;, }, }, }, private, void, removeUnreferencedFunctionArgs, (, Scope, fnScope, ), {]
[), ), {, maybeUnreferenced, ., add, (, var, ), ;, }, }, }, private, void, removeUnreferencedFunctionArgs, (, Scope, fnScope, )]
[;, }, }, }, private, void, removeUnreferencedFunctionArgs, (, Scope, fnScope, ), {, Node, function, =, fnScope, ., getRootNode, (, )]
[., add, (, var, ), ;, }, }, }, private, void, removeUnreferencedFunctionArgs, (, Scope, fnScope, ), {, Node, function, =]
[), ;, }, }, }, private, void, removeUnreferencedFunctionArgs, (, Scope, fnScope, ), {, Node, function, =, fnScope, ., getRootNode, (]
[;, Preconditions, ., checkState, (, function, ., isFunction, (, ), ), ;, if, (, NodeUtil, ., isGetOrSetKey, (, function, .]
[., getRootNode, (, ), ;, Preconditions, ., checkState, (, function, ., isFunction, (, ), ), ;, if, (, NodeUtil, .]
[;, if, (, NodeUtil, ., isGetOrSetKey, (, function, ., getParent, (, ), ), ), {, return, ;, }, Node, argList]
[., checkState, (, function, ., isFunction, (, ), ), ;, if, (, NodeUtil, ., isGetOrSetKey, (, function, ., getParent, (]
[), ;, if, (, NodeUtil, ., isGetOrSetKey, (, function, ., getParent, (, ), ), ), {, return, ;, }, Node]
[., isFunction, (, ), ), ;, if, (, NodeUtil, ., isGetOrSetKey, (, function, ., getParent, (, ), ), ), {]
[), {, return, ;, }, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, modifyCallers, =, modifyCallSites, &&, callSiteOptimizer, .]
[., isGetOrSetKey, (, function, ., getParent, (, ), ), ), {, return, ;, }, Node, argList, =, getFunctionArgList, (, function]
[), ), {, return, ;, }, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, modifyCallers, =, modifyCallSites, &&, callSiteOptimizer]
[., getParent, (, ), ), ), {, return, ;, }, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, modifyCallers]
[;, boolean, modifyCallers, =, modifyCallSites, &&, callSiteOptimizer, ., canModifyCallers, (, function, ), ;, if, (, !, modifyCallers, ), {, Node]
[), ;, boolean, modifyCallers, =, modifyCallSites, &&, callSiteOptimizer, ., canModifyCallers, (, function, ), ;, if, (, !, modifyCallers, ), {]
[;, if, (, !, modifyCallers, ), {, Node, lastArg, ;, while, (, (, lastArg, =, argList, ., getLastChild, (, )]
[&&, callSiteOptimizer, ., canModifyCallers, (, function, ), ;, if, (, !, modifyCallers, ), {, Node, lastArg, ;, while, (, (]
[;, if, (, !, modifyCallers, ), {, Node, lastArg, ;, while, (, (, lastArg, =, argList, ., getLastChild, (, )]
[., canModifyCallers, (, function, ), ;, if, (, !, modifyCallers, ), {, Node, lastArg, ;, while, (, (, lastArg, =]
[), ;, if, (, !, modifyCallers, ), {, Node, lastArg, ;, while, (, (, lastArg, =, argList, ., getLastChild, (]
[), {, Node, lastArg, ;, while, (, (, lastArg, =, argList, ., getLastChild, (, ), ), !=, null, ), {]
[), {, Node, lastArg, ;, while, (, (, lastArg, =, argList, ., getLastChild, (, ), ), !=, null, ), {]
[), {, Var, var, =, fnScope, ., getVar, (, lastArg, ., getString, (, ), ), ;, if, (, !, referenced]
[!=, null, ), {, Var, var, =, fnScope, ., getVar, (, lastArg, ., getString, (, ), ), ;, if, (]
[=, argList, ., getLastChild, (, ), ), !=, null, ), {, Var, var, =, fnScope, ., getVar, (, lastArg, .]
[), !=, null, ), {, Var, var, =, fnScope, ., getVar, (, lastArg, ., getString, (, ), ), ;, if]
[., getLastChild, (, ), ), !=, null, ), {, Var, var, =, fnScope, ., getVar, (, lastArg, ., getString, (]
[), {, Var, var, =, fnScope, ., getVar, (, lastArg, ., getString, (, ), ), ;, if, (, !, referenced]
[;, if, (, !, referenced, ., contains, (, var, ), ), {, argList, ., removeChild, (, lastArg, ), ;, compiler]
[., getVar, (, lastArg, ., getString, (, ), ), ;, if, (, !, referenced, ., contains, (, var, ), )]
[), ;, if, (, !, referenced, ., contains, (, var, ), ), {, argList, ., removeChild, (, lastArg, ), ;]
[., getString, (, ), ), ;, if, (, !, referenced, ., contains, (, var, ), ), {, argList, ., removeChild]
[), {, argList, ., removeChild, (, lastArg, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, break, ;]
[), {, argList, ., removeChild, (, lastArg, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, break, ;]
[., contains, (, var, ), ), {, argList, ., removeChild, (, lastArg, ), ;, compiler, ., reportCodeChange, (, ), ;]
[), ), {, argList, ., removeChild, (, lastArg, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, break]
[;, compiler, ., reportCodeChange, (, ), ;, }, else, {, break, ;, }, }, }, else, {, callSiteOptimizer, ., optimize]
[., removeChild, (, lastArg, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, break, ;, }, }, }]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, break, ;, }, }, }, else, {, callSiteOptimizer, .]
[;, }, else, {, break, ;, }, }, }, else, {, callSiteOptimizer, ., optimize, (, fnScope, ,, referenced, ), ;]
[., reportCodeChange, (, ), ;, }, else, {, break, ;, }, }, }, else, {, callSiteOptimizer, ., optimize, (, fnScope]
[;, }, }, private, static, Node, getFunctionArgList, (, Node, function, ), {, return, function, ., getFirstChild, (, ), ., getNext]
[., optimize, (, fnScope, ,, referenced, ), ;, }, }, private, static, Node, getFunctionArgList, (, Node, function, ), {, return]
[,, referenced, ), ;, }, }, private, static, Node, getFunctionArgList, (, Node, function, ), {, return, function, ., getFirstChild, (]
[), ;, }, }, private, static, Node, getFunctionArgList, (, Node, function, ), {, return, function, ., getFirstChild, (, ), .]
[;, }, private, static, class, CallSiteOptimizer, {, private, final, AbstractCompiler, compiler, ;, private, final, SimpleDefinitionFinder, defFinder, ;, private, final, List]
[., getNext, (, ), ;, }, private, static, class, CallSiteOptimizer, {, private, final, AbstractCompiler, compiler, ;, private, final, SimpleDefinitionFinder, defFinder]
[., getFirstChild, (, ), ., getNext, (, ), ;, }, private, static, class, CallSiteOptimizer, {, private, final, AbstractCompiler, compiler, ;]
[;, private, final, List, <, Node, >, toReplaceWithZero, =, Lists, ., newArrayList, (, ), ;, CallSiteOptimizer, (, AbstractCompiler, compiler, ,]
[., newArrayList, (, ), ;, private, final, List, <, Node, >, toReplaceWithZero, =, Lists, ., newArrayList, (, ), ;, CallSiteOptimizer]
[;, CallSiteOptimizer, (, AbstractCompiler, compiler, ,, SimpleDefinitionFinder, defFinder, ), {, this, ., compiler, =, compiler, ;, this, ., defFinder, =]
[., newArrayList, (, ), ;, CallSiteOptimizer, (, AbstractCompiler, compiler, ,, SimpleDefinitionFinder, defFinder, ), {, this, ., compiler, =, compiler, ;]
[=, compiler, ;, this, ., defFinder, =, defFinder, ;, }, public, void, optimize, (, Scope, fnScope, ,, Set, <, Var]
[., compiler, =, compiler, ;, this, ., defFinder, =, defFinder, ;, }, public, void, optimize, (, Scope, fnScope, ,, Set]
[;, this, ., defFinder, =, defFinder, ;, }, public, void, optimize, (, Scope, fnScope, ,, Set, <, Var, >, referenced]
[=, defFinder, ;, }, public, void, optimize, (, Scope, fnScope, ,, Set, <, Var, >, referenced, ), {, Node, function]
[., defFinder, =, defFinder, ;, }, public, void, optimize, (, Scope, fnScope, ,, Set, <, Var, >, referenced, ), {]
[;, }, public, void, optimize, (, Scope, fnScope, ,, Set, <, Var, >, referenced, ), {, Node, function, =, fnScope]
[;, Preconditions, ., checkState, (, function, ., isFunction, (, ), ), ;, Node, argList, =, getFunctionArgList, (, function, ), ;]
[., getRootNode, (, ), ;, Preconditions, ., checkState, (, function, ., isFunction, (, ), ), ;, Node, argList, =, getFunctionArgList]
[;, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, changeCallSignature, =, canChangeSignature, (, function, ), ;, markUnreferencedFunctionArgs, (, fnScope]
[., checkState, (, function, ., isFunction, (, ), ), ;, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, changeCallSignature]
[), ;, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, changeCallSignature, =, canChangeSignature, (, function, ), ;, markUnreferencedFunctionArgs, (]
[., isFunction, (, ), ), ;, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, changeCallSignature, =, canChangeSignature, (, function]
[;, boolean, changeCallSignature, =, canChangeSignature, (, function, ), ;, markUnreferencedFunctionArgs, (, fnScope, ,, function, ,, referenced, ,, argList, ., getFirstChild]
[), ;, boolean, changeCallSignature, =, canChangeSignature, (, function, ), ;, markUnreferencedFunctionArgs, (, fnScope, ,, function, ,, referenced, ,, argList, .]
[;, markUnreferencedFunctionArgs, (, fnScope, ,, function, ,, referenced, ,, argList, ., getFirstChild, (, ), ,, 0, ,, changeCallSignature, ), ;]
[), ;, markUnreferencedFunctionArgs, (, fnScope, ,, function, ,, referenced, ,, argList, ., getFirstChild, (, ), ,, 0, ,, changeCallSignature, )]
[;, }, public, void, applyChanges, (, ), {, for, (, Node, n, :, toRemove, ), {, n, ., getParent, (]
[,, function, ,, referenced, ,, argList, ., getFirstChild, (, ), ,, 0, ,, changeCallSignature, ), ;, }, public, void, applyChanges]
[,, referenced, ,, argList, ., getFirstChild, (, ), ,, 0, ,, changeCallSignature, ), ;, }, public, void, applyChanges, (, )]
[,, argList, ., getFirstChild, (, ), ,, 0, ,, changeCallSignature, ), ;, }, public, void, applyChanges, (, ), {, for]
[,, 0, ,, changeCallSignature, ), ;, }, public, void, applyChanges, (, ), {, for, (, Node, n, :, toRemove, )]
[., getFirstChild, (, ), ,, 0, ,, changeCallSignature, ), ;, }, public, void, applyChanges, (, ), {, for, (, Node]
[,, changeCallSignature, ), ;, }, public, void, applyChanges, (, ), {, for, (, Node, n, :, toRemove, ), {, n]
[), ;, }, public, void, applyChanges, (, ), {, for, (, Node, n, :, toRemove, ), {, n, ., getParent]
[), {, n, ., getParent, (, ), ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, for, (, Node, n, :, toReplaceWithZero, ), {, n, ., getParent, (]
[., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, for, (, Node, n, :, toReplaceWithZero, )]
[., getParent, (, ), ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, for, (, Node]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, for, (, Node, n, :, toReplaceWithZero, ), {, n, ., getParent]
[;, }, for, (, Node, n, :, toReplaceWithZero, ), {, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[., reportCodeChange, (, ), ;, }, for, (, Node, n, :, toReplaceWithZero, ), {, n, ., getParent, (, ), .]
[), {, n, ., getParent, (, ), ., replaceChild, (, n, ,, IR, ., number, (, 0, ), ., srcref]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, markUnreferencedFunctionArgs, (, Scope, scope, ,, Node, function, ,, Set]
[., replaceChild, (, n, ,, IR, ., number, (, 0, ), ., srcref, (, n, ), ), ;, compiler, .]
[., getParent, (, ), ., replaceChild, (, n, ,, IR, ., number, (, 0, ), ., srcref, (, n, )]
[,, IR, ., number, (, 0, ), ., srcref, (, n, ), ), ;, compiler, ., reportCodeChange, (, ), ;]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, markUnreferencedFunctionArgs, (, Scope, scope, ,, Node, function, ,]
[., srcref, (, n, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, markUnreferencedFunctionArgs, (, Scope]
[., number, (, 0, ), ., srcref, (, n, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[), ., srcref, (, n, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, markUnreferencedFunctionArgs, (]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, markUnreferencedFunctionArgs, (, Scope, scope, ,, Node, function]
[;, }, }, private, boolean, markUnreferencedFunctionArgs, (, Scope, scope, ,, Node, function, ,, Set, <, Var, >, referenced, ,, Node]
[., reportCodeChange, (, ), ;, }, }, private, boolean, markUnreferencedFunctionArgs, (, Scope, scope, ,, Node, function, ,, Set, <, Var]
[), {, boolean, hasFollowing, =, markUnreferencedFunctionArgs, (, scope, ,, function, ,, referenced, ,, param, ., getNext, (, ), ,, paramIndex]
[!=, null, ), {, boolean, hasFollowing, =, markUnreferencedFunctionArgs, (, scope, ,, function, ,, referenced, ,, param, ., getNext, (, )]
[), {, boolean, hasFollowing, =, markUnreferencedFunctionArgs, (, scope, ,, function, ,, referenced, ,, param, ., getNext, (, ), ,, paramIndex]
[;, Var, var, =, scope, ., getVar, (, param, ., getString, (, ), ), ;, if, (, !, referenced, .]
[,, function, ,, referenced, ,, param, ., getNext, (, ), ,, paramIndex, +, 1, ,, canChangeSignature, ), ;, Var, var]
[,, referenced, ,, param, ., getNext, (, ), ,, paramIndex, +, 1, ,, canChangeSignature, ), ;, Var, var, =, scope]
[,, param, ., getNext, (, ), ,, paramIndex, +, 1, ,, canChangeSignature, ), ;, Var, var, =, scope, ., getVar]
[,, paramIndex, +, 1, ,, canChangeSignature, ), ;, Var, var, =, scope, ., getVar, (, param, ., getString, (, )]
[., getNext, (, ), ,, paramIndex, +, 1, ,, canChangeSignature, ), ;, Var, var, =, scope, ., getVar, (, param]
[,, canChangeSignature, ), ;, Var, var, =, scope, ., getVar, (, param, ., getString, (, ), ), ;, if, (]
[+, 1, ,, canChangeSignature, ), ;, Var, var, =, scope, ., getVar, (, param, ., getString, (, ), ), ;]
[,, canChangeSignature, ), ;, Var, var, =, scope, ., getVar, (, param, ., getString, (, ), ), ;, if, (]
[), ;, Var, var, =, scope, ., getVar, (, param, ., getString, (, ), ), ;, if, (, !, referenced]
[;, if, (, !, referenced, ., contains, (, var, ), ), {, Preconditions, ., checkNotNull, (, var, ), ;, boolean]
[., getVar, (, param, ., getString, (, ), ), ;, if, (, !, referenced, ., contains, (, var, ), )]
[), ;, if, (, !, referenced, ., contains, (, var, ), ), {, Preconditions, ., checkNotNull, (, var, ), ;]
[., getString, (, ), ), ;, if, (, !, referenced, ., contains, (, var, ), ), {, Preconditions, ., checkNotNull]
[), {, Preconditions, ., checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !, hasFollowing, ;, if, (, modifyAllCallSites]
[), {, Preconditions, ., checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !, hasFollowing, ;, if, (, modifyAllCallSites]
[., contains, (, var, ), ), {, Preconditions, ., checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !]
[), ), {, Preconditions, ., checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !, hasFollowing, ;, if, (]
[;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !, hasFollowing, ;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function, ,]
[., checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !, hasFollowing, ;, if, (, modifyAllCallSites, ), {, modifyAllCallSites]
[), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !, hasFollowing, ;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function]
[;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,]
[||, !, hasFollowing, ;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites]
[;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,]
[;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,]
[), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, )]
[=, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, ), ;, if, (]
[;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, ), ;, if, (, modifyAllCallSites, ||, !, hasFollowing, ), {, toRemove]
[,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, ), ;, if, (, modifyAllCallSites, ||, !, hasFollowing]
[), ;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, ), ;, if, (, modifyAllCallSites, ||, !, hasFollowing, ), {]
[;, if, (, modifyAllCallSites, ||, !, hasFollowing, ), {, toRemove, ., add, (, param, ), ;, return, hasFollowing, ;, }]
[,, paramIndex, ,, modifyAllCallSites, ), ;, if, (, modifyAllCallSites, ||, !, hasFollowing, ), {, toRemove, ., add, (, param, )]
[,, modifyAllCallSites, ), ;, if, (, modifyAllCallSites, ||, !, hasFollowing, ), {, toRemove, ., add, (, param, ), ;, return]
[), ;, if, (, modifyAllCallSites, ||, !, hasFollowing, ), {, toRemove, ., add, (, param, ), ;, return, hasFollowing, ;]
[), {, toRemove, ., add, (, param, ), ;, return, hasFollowing, ;, }, }, return, true, ;, }, else, {]
[||, !, hasFollowing, ), {, toRemove, ., add, (, param, ), ;, return, hasFollowing, ;, }, }, return, true, ;]
[), {, toRemove, ., add, (, param, ), ;, return, hasFollowing, ;, }, }, return, true, ;, }, else, {]
[), {, toRemove, ., add, (, param, ), ;, return, hasFollowing, ;, }, }, return, true, ;, }, else, {]
[;, return, hasFollowing, ;, }, }, return, true, ;, }, else, {, tryRemoveAllFollowingArgs, (, function, ,, paramIndex, -, 1, )]
[., add, (, param, ), ;, return, hasFollowing, ;, }, }, return, true, ;, }, else, {, tryRemoveAllFollowingArgs, (, function]
[), ;, return, hasFollowing, ;, }, }, return, true, ;, }, else, {, tryRemoveAllFollowingArgs, (, function, ,, paramIndex, -, 1]
[;, }, }, return, true, ;, }, else, {, tryRemoveAllFollowingArgs, (, function, ,, paramIndex, -, 1, ), ;, return, false]
[;, }, else, {, tryRemoveAllFollowingArgs, (, function, ,, paramIndex, -, 1, ), ;, return, false, ;, }, }, private, boolean]
[;, return, false, ;, }, }, private, boolean, canRemoveArgFromCallSites, (, Node, function, ,, int, argIndex, ), {, Definition, definition, =]
[,, paramIndex, -, 1, ), ;, return, false, ;, }, }, private, boolean, canRemoveArgFromCallSites, (, Node, function, ,, int, argIndex]
[), ;, return, false, ;, }, }, private, boolean, canRemoveArgFromCallSites, (, Node, function, ,, int, argIndex, ), {, Definition, definition]
[-, 1, ), ;, return, false, ;, }, }, private, boolean, canRemoveArgFromCallSites, (, Node, function, ,, int, argIndex, ), {]
[), ;, return, false, ;, }, }, private, boolean, canRemoveArgFromCallSites, (, Node, function, ,, int, argIndex, ), {, Definition, definition]
[;, }, }, private, boolean, canRemoveArgFromCallSites, (, Node, function, ,, int, argIndex, ), {, Definition, definition, =, getFunctionDefinition, (, function]
[;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (, site, )]
[), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (, site]
[), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;]
[., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (]
[), ), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, )]
[), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=, null, &&, NodeUtil, .]
[), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=, null, &&, NodeUtil]
[;, if, (, arg, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), {, return, false, ;]
[,, argIndex, ), ;, if, (, arg, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), {]
[), ;, if, (, arg, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), {, return, false]
[), {, return, false, ;, }, }, else, {, return, false, ;, }, }, return, true, ;, }, private, void]
[&&, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), {, return, false, ;, }, }, else, {, return, false]
[!=, null, &&, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), {, return, false, ;, }, }, else, {]
[&&, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), {, return, false, ;, }, }, else, {, return, false]
[), {, return, false, ;, }, }, else, {, return, false, ;, }, }, return, true, ;, }, private, void]
[., mayHaveSideEffects, (, arg, ,, compiler, ), ), {, return, false, ;, }, }, else, {, return, false, ;, }]
[,, compiler, ), ), {, return, false, ;, }, }, else, {, return, false, ;, }, }, return, true, ;]
[), ), {, return, false, ;, }, }, else, {, return, false, ;, }, }, return, true, ;, }, private]
[;, }, }, else, {, return, false, ;, }, }, return, true, ;, }, private, void, tryRemoveArgFromCallSites, (, Node, function]
[;, }, }, return, true, ;, }, private, void, tryRemoveArgFromCallSites, (, Node, function, ,, int, argIndex, ,, boolean, canModifyAllSites, )]
[;, }, private, void, tryRemoveArgFromCallSites, (, Node, function, ,, int, argIndex, ,, boolean, canModifyAllSites, ), {, Definition, definition, =, getFunctionDefinition]
[;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (, site, )]
[), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (, site]
[), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;]
[., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (]
[), ), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, )]
[), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=, null, ), {, Node]
[), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=, null, ), {]
[;, if, (, arg, !=, null, ), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (, canModifyAllSites]
[,, argIndex, ), ;, if, (, arg, !=, null, ), {, Node, argParent, =, arg, ., getParent, (, ), ;]
[), ;, if, (, arg, !=, null, ), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (]
[), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||, (, arg, ., getNext, (]
[!=, null, ), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||, (, arg, .]
[), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||, (, arg, ., getNext, (]
[;, if, (, canModifyAllSites, ||, (, arg, ., getNext, (, ), ==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (, arg]
[., getParent, (, ), ;, if, (, canModifyAllSites, ||, (, arg, ., getNext, (, ), ==, null, &&, !, NodeUtil]
[), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg]
[||, (, arg, ., getNext, (, ), ==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), )]
[), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg]
[), ), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (]
[&&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), ), {, toRemove, ., add, (, arg, ), ;]
[==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), ), {, toRemove, ., add, (, arg]
[., getNext, (, ), ==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), ), {, toRemove]
[&&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), ), {, toRemove, ., add, (, arg, ), ;]
[), ), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (]
[), ), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (]
[., mayHaveSideEffects, (, arg, ,, compiler, ), ), ), {, toRemove, ., add, (, arg, ), ;, }, else, {]
[,, compiler, ), ), ), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (, !, NodeUtil]
[), ), ), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects]
[;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), &&, (, !, arg, .]
[., add, (, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, )]
[), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), &&, (, !, arg]
[), {, toReplaceWithZero, ., add, (, arg, ), ;, }, }, }, }, }, }, private, void, tryRemoveAllFollowingArgs, (, Node]
[&&, (, !, arg, ., isNumber, (, ), ||, arg, ., getDouble, (, ), !=, 0, ), ), {, toReplaceWithZero]
[&&, (, !, arg, ., isNumber, (, ), ||, arg, ., getDouble, (, ), !=, 0, ), ), {, toReplaceWithZero]
[., mayHaveSideEffects, (, arg, ,, compiler, ), &&, (, !, arg, ., isNumber, (, ), ||, arg, ., getDouble, (]
[,, compiler, ), &&, (, !, arg, ., isNumber, (, ), ||, arg, ., getDouble, (, ), !=, 0, )]
[), &&, (, !, arg, ., isNumber, (, ), ||, arg, ., getDouble, (, ), !=, 0, ), ), {]
[), {, toReplaceWithZero, ., add, (, arg, ), ;, }, }, }, }, }, }, private, void, tryRemoveAllFollowingArgs, (, Node]
[), ), {, toReplaceWithZero, ., add, (, arg, ), ;, }, }, }, }, }, }, private, void, tryRemoveAllFollowingArgs, (]
[||, arg, ., getDouble, (, ), !=, 0, ), ), {, toReplaceWithZero, ., add, (, arg, ), ;, }, }]
[||, arg, ., getDouble, (, ), !=, 0, ), ), {, toReplaceWithZero, ., add, (, arg, ), ;, }, }]
[., isNumber, (, ), ||, arg, ., getDouble, (, ), !=, 0, ), ), {, toReplaceWithZero, ., add, (, arg]
[), ), {, toReplaceWithZero, ., add, (, arg, ), ;, }, }, }, }, }, }, private, void, tryRemoveAllFollowingArgs, (]
[!=, 0, ), ), {, toReplaceWithZero, ., add, (, arg, ), ;, }, }, }, }, }, }, private, void]
[., getDouble, (, ), !=, 0, ), ), {, toReplaceWithZero, ., add, (, arg, ), ;, }, }, }, }]
[), ), {, toReplaceWithZero, ., add, (, arg, ), ;, }, }, }, }, }, }, private, void, tryRemoveAllFollowingArgs, (]
[;, }, }, }, }, }, }, private, void, tryRemoveAllFollowingArgs, (, Node, function, ,, final, int, argIndex, ), {, Definition]
[., add, (, arg, ), ;, }, }, }, }, }, }, private, void, tryRemoveAllFollowingArgs, (, Node, function, ,, final]
[), ;, }, }, }, }, }, }, private, void, tryRemoveAllFollowingArgs, (, Node, function, ,, final, int, argIndex, ), {]
[;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (, !, isModifiableCallSite, (, site]
[), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (, !, isModifiableCallSite, (]
[), {, if, (, !, isModifiableCallSite, (, site, ), ), {, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site]
[., getUseSites, (, definition, ), ), {, if, (, !, isModifiableCallSite, (, site, ), ), {, continue, ;, }, Node]
[), ), {, if, (, !, isModifiableCallSite, (, site, ), ), {, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (]
[), {, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, +, 1, ), ;, while, (, arg]
[), {, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, +, 1, ), ;, while, (, arg]
[), ), {, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, +, 1, ), ;, while, (]
[;, while, (, arg, !=, null, ), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {, toRemove]
[,, argIndex, +, 1, ), ;, while, (, arg, !=, null, ), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (]
[), ;, while, (, arg, !=, null, ), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {]
[+, 1, ), ;, while, (, arg, !=, null, ), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, )]
[), ;, while, (, arg, !=, null, ), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {]
[), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {, toRemove, ., add, (, arg, ), ;]
[!=, null, ), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {, toRemove, ., add, (, arg]
[), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {, toRemove, ., add, (, arg, ), ;]
[), {, toRemove, ., add, (, arg, ), ;, }, arg, =, arg, ., getNext, (, ), ;, }, }]
[), {, toRemove, ., add, (, arg, ), ;, }, arg, =, arg, ., getNext, (, ), ;, }, }]
[., mayHaveSideEffects, (, arg, ), ), {, toRemove, ., add, (, arg, ), ;, }, arg, =, arg, ., getNext]
[), ), {, toRemove, ., add, (, arg, ), ;, }, arg, =, arg, ., getNext, (, ), ;, }]
[;, }, arg, =, arg, ., getNext, (, ), ;, }, }, }, private, static, Node, getArgumentForCallOrNewOrDotCall, (, UseSite, site]
[., add, (, arg, ), ;, }, arg, =, arg, ., getNext, (, ), ;, }, }, }, private, static]
[), ;, }, arg, =, arg, ., getNext, (, ), ;, }, }, }, private, static, Node, getArgumentForCallOrNewOrDotCall, (, UseSite]
[=, arg, ., getNext, (, ), ;, }, }, }, private, static, Node, getArgumentForCallOrNewOrDotCall, (, UseSite, site, ,, final, int]
[;, }, }, }, private, static, Node, getArgumentForCallOrNewOrDotCall, (, UseSite, site, ,, final, int, argIndex, ), {, int, adjustedArgIndex, =]
[., getNext, (, ), ;, }, }, }, private, static, Node, getArgumentForCallOrNewOrDotCall, (, UseSite, site, ,, final, int, argIndex, )]
[;, Node, parent, =, site, ., node, ., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectCall, (, parent, )]
[;, if, (, NodeUtil, ., isFunctionObjectCall, (, parent, ), ), {, adjustedArgIndex, ++, ;, }, return, NodeUtil, ., getArgumentForCallOrNew, (]
[., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectCall, (, parent, ), ), {, adjustedArgIndex, ++, ;, }, return]
[., node, ., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectCall, (, parent, ), ), {, adjustedArgIndex, ++, ;]
[), {, adjustedArgIndex, ++, ;, }, return, NodeUtil, ., getArgumentForCallOrNew, (, parent, ,, adjustedArgIndex, ), ;, }, boolean, canModifyCallers, (]
[., isFunctionObjectCall, (, parent, ), ), {, adjustedArgIndex, ++, ;, }, return, NodeUtil, ., getArgumentForCallOrNew, (, parent, ,, adjustedArgIndex, )]
[), ), {, adjustedArgIndex, ++, ;, }, return, NodeUtil, ., getArgumentForCallOrNew, (, parent, ,, adjustedArgIndex, ), ;, }, boolean, canModifyCallers]
[;, }, return, NodeUtil, ., getArgumentForCallOrNew, (, parent, ,, adjustedArgIndex, ), ;, }, boolean, canModifyCallers, (, Node, function, ), {]
[++, ;, }, return, NodeUtil, ., getArgumentForCallOrNew, (, parent, ,, adjustedArgIndex, ), ;, }, boolean, canModifyCallers, (, Node, function, )]
[;, }, boolean, canModifyCallers, (, Node, function, ), {, if, (, NodeUtil, ., isVarArgsFunction, (, function, ), ), {, return]
[., getArgumentForCallOrNew, (, parent, ,, adjustedArgIndex, ), ;, }, boolean, canModifyCallers, (, Node, function, ), {, if, (, NodeUtil, .]
[,, adjustedArgIndex, ), ;, }, boolean, canModifyCallers, (, Node, function, ), {, if, (, NodeUtil, ., isVarArgsFunction, (, function, )]
[), ;, }, boolean, canModifyCallers, (, Node, function, ), {, if, (, NodeUtil, ., isVarArgsFunction, (, function, ), ), {]
[), {, return, false, ;, }, DefinitionSite, defSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;, if, (, defSite, ==]
[., isVarArgsFunction, (, function, ), ), {, return, false, ;, }, DefinitionSite, defSite, =, defFinder, ., getDefinitionForFunction, (, function, )]
[), ), {, return, false, ;, }, DefinitionSite, defSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;, if, (, defSite]
[;, }, DefinitionSite, defSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;, if, (, defSite, ==, null, ), {, return]
[;, if, (, defSite, ==, null, ), {, return, false, ;, }, Definition, definition, =, defSite, ., definition, ;, if]
[., getDefinitionForFunction, (, function, ), ;, if, (, defSite, ==, null, ), {, return, false, ;, }, Definition, definition, =]
[), ;, if, (, defSite, ==, null, ), {, return, false, ;, }, Definition, definition, =, defSite, ., definition, ;]
[), {, return, false, ;, }, Definition, definition, =, defSite, ., definition, ;, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (]
[==, null, ), {, return, false, ;, }, Definition, definition, =, defSite, ., definition, ;, if, (, !, SimpleDefinitionFinder, .]
[), {, return, false, ;, }, Definition, definition, =, defSite, ., definition, ;, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (]
[;, }, Definition, definition, =, defSite, ., definition, ;, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, function, ), ), {]
[;, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, function, ), ), {, return, false, ;, }, return, defFinder, ., canModifyDefinition]
[., definition, ;, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, function, ), ), {, return, false, ;, }, return, defFinder]
[), {, return, false, ;, }, return, defFinder, ., canModifyDefinition, (, definition, ), ;, }, private, static, boolean, isModifiableCallSite, (]
[), {, return, false, ;, }, return, defFinder, ., canModifyDefinition, (, definition, ), ;, }, private, static, boolean, isModifiableCallSite, (]
[., isSimpleFunctionDeclaration, (, function, ), ), {, return, false, ;, }, return, defFinder, ., canModifyDefinition, (, definition, ), ;, }]
[), ), {, return, false, ;, }, return, defFinder, ., canModifyDefinition, (, definition, ), ;, }, private, static, boolean, isModifiableCallSite]
[;, }, return, defFinder, ., canModifyDefinition, (, definition, ), ;, }, private, static, boolean, isModifiableCallSite, (, UseSite, site, ), {]
[;, }, private, static, boolean, isModifiableCallSite, (, UseSite, site, ), {, return, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), &&, !]
[., canModifyDefinition, (, definition, ), ;, }, private, static, boolean, isModifiableCallSite, (, UseSite, site, ), {, return, SimpleDefinitionFinder, ., isCallOrNewSite]
[), ;, }, private, static, boolean, isModifiableCallSite, (, UseSite, site, ), {, return, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), &&]
[;, }, private, boolean, canChangeSignature, (, Node, function, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, CodingConvention, convention]
[&&, !, NodeUtil, ., isFunctionObjectApply, (, site, ., node, ., getParent, (, ), ), ;, }, private, boolean, canChangeSignature, (]
[., isCallOrNewSite, (, site, ), &&, !, NodeUtil, ., isFunctionObjectApply, (, site, ., node, ., getParent, (, ), ), ;]
[), &&, !, NodeUtil, ., isFunctionObjectApply, (, site, ., node, ., getParent, (, ), ), ;, }, private, boolean, canChangeSignature]
[;, }, private, boolean, canChangeSignature, (, Node, function, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, CodingConvention, convention]
[;, }, private, boolean, canChangeSignature, (, Node, function, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, CodingConvention, convention]
[., isFunctionObjectApply, (, site, ., node, ., getParent, (, ), ), ;, }, private, boolean, canChangeSignature, (, Node, function, )]
[), ;, }, private, boolean, canChangeSignature, (, Node, function, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, CodingConvention]
[., getParent, (, ), ), ;, }, private, boolean, canChangeSignature, (, Node, function, ), {, Definition, definition, =, getFunctionDefinition, (]
[., node, ., getParent, (, ), ), ;, }, private, boolean, canChangeSignature, (, Node, function, ), {, Definition, definition, =]
[;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, Preconditions, ., checkState, (, !, definition, ., isExtern, (, )]
[), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, Preconditions, ., checkState, (, !, definition, ., isExtern, (]
[;, Preconditions, ., checkState, (, !, definition, ., isExtern, (, ), ), ;, Collection, <, UseSite, >, useSites, =, defFinder]
[., getCodingConvention, (, ), ;, Preconditions, ., checkState, (, !, definition, ., isExtern, (, ), ), ;, Collection, <, UseSite]
[;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites]
[., checkState, (, !, definition, ., isExtern, (, ), ), ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites]
[), ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :]
[), ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :]
[., isExtern, (, ), ), ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for]
[;, for, (, UseSite, site, :, useSites, ), {, Node, parent, =, site, ., node, ., getParent, (, ), ;]
[., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Node, parent, =, site, ., node]
[), ;, for, (, UseSite, site, :, useSites, ), {, Node, parent, =, site, ., node, ., getParent, (, )]
[), {, Node, parent, =, site, ., node, ., getParent, (, ), ;, if, (, parent, ==, null, ), {]
[;, if, (, parent, ==, null, ), {, continue, ;, }, if, (, parent, ., isCall, (, ), &&, convention]
[., getParent, (, ), ;, if, (, parent, ==, null, ), {, continue, ;, }, if, (, parent, ., isCall]
[., node, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, continue, ;, }, if, (, parent]
[), {, continue, ;, }, if, (, parent, ., isCall, (, ), &&, convention, ., getClassesDefinedByCall, (, parent, ), !=]
[==, null, ), {, continue, ;, }, if, (, parent, ., isCall, (, ), &&, convention, ., getClassesDefinedByCall, (, parent]
[), {, continue, ;, }, if, (, parent, ., isCall, (, ), &&, convention, ., getClassesDefinedByCall, (, parent, ), !=]
[), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if, (, !, (]
[&&, convention, ., getClassesDefinedByCall, (, parent, ), !=, null, ), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite]
[., isCall, (, ), &&, convention, ., getClassesDefinedByCall, (, parent, ), !=, null, ), {, continue, ;, }, if, (]
[), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if, (, !, (]
[!=, null, ), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if, (]
[., getClassesDefinedByCall, (, parent, ), !=, null, ), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site]
[), !=, null, ), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if]
[), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if, (, !, (]
[), {, if, (, !, (, parent, ., isGetProp, (, ), &&, NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent, (]
[), {, if, (, !, (, parent, ., isGetProp, (, ), &&, NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent, (]
[., isCallOrNewSite, (, site, ), ), {, if, (, !, (, parent, ., isGetProp, (, ), &&, NodeUtil, ., isFunctionObjectCall]
[), ), {, if, (, !, (, parent, ., isGetProp, (, ), &&, NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent]
[), {, return, false, ;, }, }, if, (, NodeUtil, ., isFunctionObjectApply, (, parent, ), ), {, return, false, ;]
[), {, return, false, ;, }, }, if, (, NodeUtil, ., isFunctionObjectApply, (, parent, ), ), {, return, false, ;]
[), ), {, return, false, ;, }, }, if, (, NodeUtil, ., isFunctionObjectApply, (, parent, ), ), {, return, false]
[&&, NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent, (, ), ), ), ), {, return, false, ;, }, }, if]
[., isGetProp, (, ), &&, NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent, (, ), ), ), ), {, return, false]
[), ), {, return, false, ;, }, }, if, (, NodeUtil, ., isFunctionObjectApply, (, parent, ), ), {, return, false]
[., isFunctionObjectCall, (, parent, ., getParent, (, ), ), ), ), {, return, false, ;, }, }, if, (, NodeUtil]
[), ), ), {, return, false, ;, }, }, if, (, NodeUtil, ., isFunctionObjectApply, (, parent, ), ), {, return]
[., getParent, (, ), ), ), ), {, return, false, ;, }, }, if, (, NodeUtil, ., isFunctionObjectApply, (, parent]
[;, }, }, if, (, NodeUtil, ., isFunctionObjectApply, (, parent, ), ), {, return, false, ;, }, Node, nameNode, =]
[), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder]
[., isFunctionObjectApply, (, parent, ), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <]
[), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =]
[;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode]
[;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, .]
[., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, singleSiteDefinitions, ., size, (, ), ==, 1, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, .]
[., getDefinitionsReferencedAt, (, nameNode, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., size, (, ), ==, 1, ), ;, Preconditions]
[), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., size, (, ), ==, 1, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions]
[;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return, true, ;, }, private, Definition]
[., checkState, (, singleSiteDefinitions, ., size, (, ), ==, 1, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (]
[), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return, true, ;, }, private]
[==, 1, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return, true, ;]
[., size, (, ), ==, 1, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;]
[), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return, true, ;, }, private]
[;, }, return, true, ;, }, private, Definition, getFunctionDefinition, (, Node, function, ), {, DefinitionSite, definitionSite, =, defFinder, ., getDefinitionForFunction]
[., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return, true, ;, }, private, Definition, getFunctionDefinition, (]
[), ;, }, return, true, ;, }, private, Definition, getFunctionDefinition, (, Node, function, ), {, DefinitionSite, definitionSite, =, defFinder, .]
[., contains, (, definition, ), ), ;, }, return, true, ;, }, private, Definition, getFunctionDefinition, (, Node, function, ), {]
[), ), ;, }, return, true, ;, }, private, Definition, getFunctionDefinition, (, Node, function, ), {, DefinitionSite, definitionSite, =, defFinder]
[;, }, private, Definition, getFunctionDefinition, (, Node, function, ), {, DefinitionSite, definitionSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;]
[;, Preconditions, ., checkNotNull, (, definitionSite, ), ;, Definition, definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (, !]
[., getDefinitionForFunction, (, function, ), ;, Preconditions, ., checkNotNull, (, definitionSite, ), ;, Definition, definition, =, definitionSite, ., definition, ;]
[), ;, Preconditions, ., checkNotNull, (, definitionSite, ), ;, Definition, definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (]
[;, Definition, definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (, !, definitionSite, ., inExterns, ), ;, Preconditions, .]
[., checkNotNull, (, definitionSite, ), ;, Definition, definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (, !, definitionSite, .]
[), ;, Definition, definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (, !, definitionSite, ., inExterns, ), ;, Preconditions]
[;, Preconditions, ., checkState, (, !, definitionSite, ., inExterns, ), ;, Preconditions, ., checkState, (, definition, ., getRValue, (, )]
[., definition, ;, Preconditions, ., checkState, (, !, definitionSite, ., inExterns, ), ;, Preconditions, ., checkState, (, definition, ., getRValue]
[;, Preconditions, ., checkState, (, definition, ., getRValue, (, ), ==, function, ), ;, return, definition, ;, }, }, private]
[., checkState, (, !, definitionSite, ., inExterns, ), ;, Preconditions, ., checkState, (, definition, ., getRValue, (, ), ==, function]
[), ;, Preconditions, ., checkState, (, definition, ., getRValue, (, ), ==, function, ), ;, return, definition, ;, }, }]
[), ;, Preconditions, ., checkState, (, definition, ., getRValue, (, ), ==, function, ), ;, return, definition, ;, }, }]
[., inExterns, ), ;, Preconditions, ., checkState, (, definition, ., getRValue, (, ), ==, function, ), ;, return, definition, ;]
[;, return, definition, ;, }, }, private, void, interpretAssigns, (, ), {, boolean, changes, =, false, ;, do, {, changes]
[., checkState, (, definition, ., getRValue, (, ), ==, function, ), ;, return, definition, ;, }, }, private, void, interpretAssigns]
[), ;, return, definition, ;, }, }, private, void, interpretAssigns, (, ), {, boolean, changes, =, false, ;, do, {]
[==, function, ), ;, return, definition, ;, }, }, private, void, interpretAssigns, (, ), {, boolean, changes, =, false, ;]
[., getRValue, (, ), ==, function, ), ;, return, definition, ;, }, }, private, void, interpretAssigns, (, ), {, boolean]
[), ;, return, definition, ;, }, }, private, void, interpretAssigns, (, ), {, boolean, changes, =, false, ;, do, {]
[;, }, }, private, void, interpretAssigns, (, ), {, boolean, changes, =, false, ;, do, {, changes, =, false, ;]
[;, do, {, changes, =, false, ;, for, (, int, current, =, 0, ;, current, <, maybeUnreferenced, ., size, (]
[=, false, ;, for, (, int, current, =, 0, ;, current, <, maybeUnreferenced, ., size, (, ), ;, current, ++]
[;, for, (, int, current, =, 0, ;, current, <, maybeUnreferenced, ., size, (, ), ;, current, ++, ), {]
[;, current, <, maybeUnreferenced, ., size, (, ), ;, current, ++, ), {, Var, var, =, maybeUnreferenced, ., get, (]
[;, current, ++, ), {, Var, var, =, maybeUnreferenced, ., get, (, current, ), ;, if, (, referenced, ., contains]
[<, maybeUnreferenced, ., size, (, ), ;, current, ++, ), {, Var, var, =, maybeUnreferenced, ., get, (, current, )]
[;, current, ++, ), {, Var, var, =, maybeUnreferenced, ., get, (, current, ), ;, if, (, referenced, ., contains]
[., size, (, ), ;, current, ++, ), {, Var, var, =, maybeUnreferenced, ., get, (, current, ), ;, if]
[), {, Var, var, =, maybeUnreferenced, ., get, (, current, ), ;, if, (, referenced, ., contains, (, var, )]
[++, ), {, Var, var, =, maybeUnreferenced, ., get, (, current, ), ;, if, (, referenced, ., contains, (, var]
[;, if, (, referenced, ., contains, (, var, ), ), {, maybeUnreferenced, ., remove, (, current, ), ;, current, --]
[., get, (, current, ), ;, if, (, referenced, ., contains, (, var, ), ), {, maybeUnreferenced, ., remove, (]
[), ;, if, (, referenced, ., contains, (, var, ), ), {, maybeUnreferenced, ., remove, (, current, ), ;, current]
[), {, maybeUnreferenced, ., remove, (, current, ), ;, current, --, ;, }, else, {, boolean, assignedToUnknownValue, =, false, ;]
[., contains, (, var, ), ), {, maybeUnreferenced, ., remove, (, current, ), ;, current, --, ;, }, else, {]
[), ), {, maybeUnreferenced, ., remove, (, current, ), ;, current, --, ;, }, else, {, boolean, assignedToUnknownValue, =, false]
[;, current, --, ;, }, else, {, boolean, assignedToUnknownValue, =, false, ;, boolean, hasPropertyAssign, =, false, ;, if, (, var]
[., remove, (, current, ), ;, current, --, ;, }, else, {, boolean, assignedToUnknownValue, =, false, ;, boolean, hasPropertyAssign, =]
[), ;, current, --, ;, }, else, {, boolean, assignedToUnknownValue, =, false, ;, boolean, hasPropertyAssign, =, false, ;, if, (]
[;, }, else, {, boolean, assignedToUnknownValue, =, false, ;, boolean, hasPropertyAssign, =, false, ;, if, (, var, ., getParentNode, (]
[--, ;, }, else, {, boolean, assignedToUnknownValue, =, false, ;, boolean, hasPropertyAssign, =, false, ;, if, (, var, ., getParentNode]
[;, boolean, hasPropertyAssign, =, false, ;, if, (, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, NodeUtil]
[;, if, (, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, NodeUtil, ., isForIn, (, var, .]
[), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=, null, &&, !, NodeUtil, .]
[&&, !, NodeUtil, ., isForIn, (, var, ., getParentNode, (, ), ., getParent, (, ), ), ), {, Node, value]
[., isVar, (, ), &&, !, NodeUtil, ., isForIn, (, var, ., getParentNode, (, ), ., getParent, (, ), )]
[., getParentNode, (, ), ., isVar, (, ), &&, !, NodeUtil, ., isForIn, (, var, ., getParentNode, (, ), .]
[), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=, null, &&, !, NodeUtil, .]
[), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=, null, &&, !, NodeUtil, .]
[., isForIn, (, var, ., getParentNode, (, ), ., getParent, (, ), ), ), {, Node, value, =, var, .]
[), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=, null, &&, !, NodeUtil]
[., getParent, (, ), ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=]
[., getParentNode, (, ), ., getParent, (, ), ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;]
[;, assignedToUnknownValue, =, value, !=, null, &&, !, NodeUtil, ., isLiteralValue, (, value, ,, true, ), ;, }, else, {]
[., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=, null, &&, !, NodeUtil, ., isLiteralValue, (, value, ,, true, )]
[=, value, !=, null, &&, !, NodeUtil, ., isLiteralValue, (, value, ,, true, ), ;, }, else, {, assignedToUnknownValue, =]
[;, }, else, {, assignedToUnknownValue, =, true, ;, }, boolean, maybeEscaped, =, false, ;, for, (, Assign, assign, :, assignsByVar]
[&&, !, NodeUtil, ., isLiteralValue, (, value, ,, true, ), ;, }, else, {, assignedToUnknownValue, =, true, ;, }, boolean]
[!=, null, &&, !, NodeUtil, ., isLiteralValue, (, value, ,, true, ), ;, }, else, {, assignedToUnknownValue, =, true, ;]
[&&, !, NodeUtil, ., isLiteralValue, (, value, ,, true, ), ;, }, else, {, assignedToUnknownValue, =, true, ;, }, boolean]
[;, }, else, {, assignedToUnknownValue, =, true, ;, }, boolean, maybeEscaped, =, false, ;, for, (, Assign, assign, :, assignsByVar]
[;, }, else, {, assignedToUnknownValue, =, true, ;, }, boolean, maybeEscaped, =, false, ;, for, (, Assign, assign, :, assignsByVar]
[., isLiteralValue, (, value, ,, true, ), ;, }, else, {, assignedToUnknownValue, =, true, ;, }, boolean, maybeEscaped, =, false]
[,, true, ), ;, }, else, {, assignedToUnknownValue, =, true, ;, }, boolean, maybeEscaped, =, false, ;, for, (, Assign]
[), ;, }, else, {, assignedToUnknownValue, =, true, ;, }, boolean, maybeEscaped, =, false, ;, for, (, Assign, assign, :]
[=, true, ;, }, boolean, maybeEscaped, =, false, ;, for, (, Assign, assign, :, assignsByVar, ., get, (, var, )]
[;, }, boolean, maybeEscaped, =, false, ;, for, (, Assign, assign, :, assignsByVar, ., get, (, var, ), ), {]
[;, for, (, Assign, assign, :, assignsByVar, ., get, (, var, ), ), {, if, (, assign, ., isPropertyAssign, )]
[), {, if, (, assign, ., isPropertyAssign, ), {, hasPropertyAssign, =, true, ;, }, else, if, (, !, NodeUtil, .]
[., get, (, var, ), ), {, if, (, assign, ., isPropertyAssign, ), {, hasPropertyAssign, =, true, ;, }, else]
[), ), {, if, (, assign, ., isPropertyAssign, ), {, hasPropertyAssign, =, true, ;, }, else, if, (, !, NodeUtil]
[), {, hasPropertyAssign, =, true, ;, }, else, if, (, !, NodeUtil, ., isLiteralValue, (, assign, ., assignNode, ., getLastChild]
[., isPropertyAssign, ), {, hasPropertyAssign, =, true, ;, }, else, if, (, !, NodeUtil, ., isLiteralValue, (, assign, ., assignNode]
[=, true, ;, }, else, if, (, !, NodeUtil, ., isLiteralValue, (, assign, ., assignNode, ., getLastChild, (, ), ,]
[;, }, else, if, (, !, NodeUtil, ., isLiteralValue, (, assign, ., assignNode, ., getLastChild, (, ), ,, true, )]
[), {, assignedToUnknownValue, =, true, ;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =, true, ;, }, }]
[), {, assignedToUnknownValue, =, true, ;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =, true, ;, }, }]
[., isLiteralValue, (, assign, ., assignNode, ., getLastChild, (, ), ,, true, ), ), {, assignedToUnknownValue, =, true, ;, }]
[,, true, ), ), {, assignedToUnknownValue, =, true, ;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =, true]
[., getLastChild, (, ), ,, true, ), ), {, assignedToUnknownValue, =, true, ;, }, if, (, assign, ., maybeAliased, )]
[., assignNode, ., getLastChild, (, ), ,, true, ), ), {, assignedToUnknownValue, =, true, ;, }, if, (, assign, .]
[), ), {, assignedToUnknownValue, =, true, ;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =, true, ;, }]
[=, true, ;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =, true, ;, }, }, if, (, (]
[;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =, true, ;, }, }, if, (, (, assignedToUnknownValue, ||]
[), {, maybeEscaped, =, true, ;, }, }, if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign, ), {, changes]
[., maybeAliased, ), {, maybeEscaped, =, true, ;, }, }, if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign, )]
[=, true, ;, }, }, if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (]
[;, }, }, if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (, var, )]
[), {, changes, =, markReferencedVar, (, var, ), ||, changes, ;, maybeUnreferenced, ., remove, (, current, ), ;, current, --]
[&&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (, var, ), ||, changes, ;, maybeUnreferenced, ., remove, (, current, ), ;]
[), &&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (, var, ), ||, changes, ;, maybeUnreferenced, ., remove, (, current, )]
[||, maybeEscaped, ), &&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (, var, ), ||, changes, ;, maybeUnreferenced, ., remove, (]
[), &&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (, var, ), ||, changes, ;, maybeUnreferenced, ., remove, (, current, )]
[), {, changes, =, markReferencedVar, (, var, ), ||, changes, ;, maybeUnreferenced, ., remove, (, current, ), ;, current, --]
[=, markReferencedVar, (, var, ), ||, changes, ;, maybeUnreferenced, ., remove, (, current, ), ;, current, --, ;, }, }]
[;, maybeUnreferenced, ., remove, (, current, ), ;, current, --, ;, }, }, }, }, while, (, changes, ), ;]
[||, changes, ;, maybeUnreferenced, ., remove, (, current, ), ;, current, --, ;, }, }, }, }, while, (, changes]
[), ||, changes, ;, maybeUnreferenced, ., remove, (, current, ), ;, current, --, ;, }, }, }, }, while, (]
[;, maybeUnreferenced, ., remove, (, current, ), ;, current, --, ;, }, }, }, }, while, (, changes, ), ;]
[;, current, --, ;, }, }, }, }, while, (, changes, ), ;, }, private, void, removeAllAssigns, (, Var, var]
[., remove, (, current, ), ;, current, --, ;, }, }, }, }, while, (, changes, ), ;, }, private]
[), ;, current, --, ;, }, }, }, }, while, (, changes, ), ;, }, private, void, removeAllAssigns, (, Var]
[;, }, }, }, }, while, (, changes, ), ;, }, private, void, removeAllAssigns, (, Var, var, ), {, for]
[--, ;, }, }, }, }, while, (, changes, ), ;, }, private, void, removeAllAssigns, (, Var, var, ), {]
[), ;, }, private, void, removeAllAssigns, (, Var, var, ), {, for, (, Assign, assign, :, assignsByVar, ., get, (]
[), {, assign, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, markReferencedVar, (]
[., get, (, var, ), ), {, assign, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ), {, assign, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, markReferencedVar]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, markReferencedVar, (, Var, var, ), {, if, (, referenced]
[., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, markReferencedVar, (, Var, var, )]
[;, }, }, private, boolean, markReferencedVar, (, Var, var, ), {, if, (, referenced, ., add, (, var, ), )]
[., reportCodeChange, (, ), ;, }, }, private, boolean, markReferencedVar, (, Var, var, ), {, if, (, referenced, ., add]
[), {, for, (, Continuation, c, :, continuations, ., get, (, var, ), ), {, c, ., apply, (, )]
[., add, (, var, ), ), {, for, (, Continuation, c, :, continuations, ., get, (, var, ), ), {]
[), ), {, for, (, Continuation, c, :, continuations, ., get, (, var, ), ), {, c, ., apply, (]
[), {, c, ., apply, (, ), ;, }, return, true, ;, }, return, false, ;, }, private, void, removeUnreferencedVars]
[., get, (, var, ), ), {, c, ., apply, (, ), ;, }, return, true, ;, }, return, false]
[), ), {, c, ., apply, (, ), ;, }, return, true, ;, }, return, false, ;, }, private, void]
[;, }, return, true, ;, }, return, false, ;, }, private, void, removeUnreferencedVars, (, ), {, CodingConvention, convention, =, codingConvention]
[., apply, (, ), ;, }, return, true, ;, }, return, false, ;, }, private, void, removeUnreferencedVars, (, ), {]
[;, }, return, false, ;, }, private, void, removeUnreferencedVars, (, ), {, CodingConvention, convention, =, codingConvention, ;, for, (, Iterator]
[;, }, private, void, removeUnreferencedVars, (, ), {, CodingConvention, convention, =, codingConvention, ;, for, (, Iterator, <, Var, >, it]
[;, for, (, Iterator, <, Var, >, it, =, maybeUnreferenced, ., iterator, (, ), ;, it, ., hasNext, (, )]
[;, it, ., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, for, (]
[., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (]
[;, ), {, Var, var, =, it, ., next, (, ), ;, for, (, Node, exprCallNode, :, classDefiningCalls, ., get]
[., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, for, (, Node, exprCallNode]
[;, for, (, Node, exprCallNode, :, classDefiningCalls, ., get, (, var, ), ), {, NodeUtil, ., removeChild, (, exprCallNode, .]
[., next, (, ), ;, for, (, Node, exprCallNode, :, classDefiningCalls, ., get, (, var, ), ), {, NodeUtil, .]
[), {, NodeUtil, ., removeChild, (, exprCallNode, ., getParent, (, ), ,, exprCallNode, ), ;, compiler, ., reportCodeChange, (, )]
[., get, (, var, ), ), {, NodeUtil, ., removeChild, (, exprCallNode, ., getParent, (, ), ,, exprCallNode, ), ;]
[), ), {, NodeUtil, ., removeChild, (, exprCallNode, ., getParent, (, ), ,, exprCallNode, ), ;, compiler, ., reportCodeChange, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns, (, var, ), ;, compiler, ., addToDebugLog, (, "Unreferenced var: ", +, var]
[., removeChild, (, exprCallNode, ., getParent, (, ), ,, exprCallNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns]
[,, exprCallNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns, (, var, ), ;, compiler, ., addToDebugLog, (]
[., getParent, (, ), ,, exprCallNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns, (, var, ), ;]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns, (, var, ), ;, compiler, ., addToDebugLog, (, "Unreferenced var: ", +]
[;, }, removeAllAssigns, (, var, ), ;, compiler, ., addToDebugLog, (, "Unreferenced var: ", +, var, ., name, ), ;, Node, nameNode]
[., reportCodeChange, (, ), ;, }, removeAllAssigns, (, var, ), ;, compiler, ., addToDebugLog, (, "Unreferenced var: ", +, var, ., name]
[;, compiler, ., addToDebugLog, (, "Unreferenced var: ", +, var, ., name, ), ;, Node, nameNode, =, var, ., nameNode, ;, Node]
[), ;, compiler, ., addToDebugLog, (, "Unreferenced var: ", +, var, ., name, ), ;, Node, nameNode, =, var, ., nameNode, ;]
[;, Node, nameNode, =, var, ., nameNode, ;, Node, toRemove, =, nameNode, ., getParent, (, ), ;, Node, parent, =]
[., addToDebugLog, (, "Unreferenced var: ", +, var, ., name, ), ;, Node, nameNode, =, var, ., nameNode, ;, Node, toRemove, =]
[), ;, Node, nameNode, =, var, ., nameNode, ;, Node, toRemove, =, nameNode, ., getParent, (, ), ;, Node, parent]
[+, var, ., name, ), ;, Node, nameNode, =, var, ., nameNode, ;, Node, toRemove, =, nameNode, ., getParent, (]
[), ;, Node, nameNode, =, var, ., nameNode, ;, Node, toRemove, =, nameNode, ., getParent, (, ), ;, Node, parent]
[., name, ), ;, Node, nameNode, =, var, ., nameNode, ;, Node, toRemove, =, nameNode, ., getParent, (, ), ;]
[;, Node, toRemove, =, nameNode, ., getParent, (, ), ;, Node, parent, =, toRemove, ., getParent, (, ), ;, Preconditions]
[., nameNode, ;, Node, toRemove, =, nameNode, ., getParent, (, ), ;, Node, parent, =, toRemove, ., getParent, (, )]
[;, Node, parent, =, toRemove, ., getParent, (, ), ;, Preconditions, ., checkState, (, toRemove, ., isVar, (, ), ||]
[., getParent, (, ), ;, Node, parent, =, toRemove, ., getParent, (, ), ;, Preconditions, ., checkState, (, toRemove, .]
[;, Preconditions, ., checkState, (, toRemove, ., isVar, (, ), ||, toRemove, ., isFunction, (, ), ||, toRemove, ., isParamList]
[., getParent, (, ), ;, Preconditions, ., checkState, (, toRemove, ., isVar, (, ), ||, toRemove, ., isFunction, (, )]
[;, if, (, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ), {, }, else, if, (]
[., checkState, (, toRemove, ., isVar, (, ), ||, toRemove, ., isFunction, (, ), ||, toRemove, ., isParamList, (, )]
[,, "We should only declare vars and functions and function args", ), ;, if, (, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ), {, }]
[||, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args", ), ;, if, (, toRemove, .]
[||, toRemove, ., isFunction, (, ), ||, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args"]
[., isVar, (, ), ||, toRemove, ., isFunction, (, ), ||, toRemove, ., isParamList, (, ), &&, parent, ., isFunction]
[||, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args", ), ;, if, (, toRemove, .]
[., isFunction, (, ), ||, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args", ), ;]
[,, "We should only declare vars and functions and function args", ), ;, if, (, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ), {, }]
[&&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args", ), ;, if, (, toRemove, ., isParamList, (, ), &&, parent, .]
[., isParamList, (, ), &&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args", ), ;, if, (, toRemove, ., isParamList, (]
[,, "We should only declare vars and functions and function args", ), ;, if, (, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ), {, }]
[., isFunction, (, ), ,, "We should only declare vars and functions and function args", ), ;, if, (, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (]
[), ;, if, (, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ), {, }, else, if]
[), {, }, else, if, (, NodeUtil, ., isFunctionExpression, (, toRemove, ), ), {, if, (, !, preserveFunctionExpressionNames, ), {]
[&&, parent, ., isFunction, (, ), ), {, }, else, if, (, NodeUtil, ., isFunctionExpression, (, toRemove, ), ), {]
[., isParamList, (, ), &&, parent, ., isFunction, (, ), ), {, }, else, if, (, NodeUtil, ., isFunctionExpression, (]
[), {, }, else, if, (, NodeUtil, ., isFunctionExpression, (, toRemove, ), ), {, if, (, !, preserveFunctionExpressionNames, ), {]
[., isFunction, (, ), ), {, }, else, if, (, NodeUtil, ., isFunctionExpression, (, toRemove, ), ), {, if, (]
[), {, if, (, !, preserveFunctionExpressionNames, ), {, toRemove, ., getFirstChild, (, ), ., setString, (, "", ), ;, compiler]
[., isFunctionExpression, (, toRemove, ), ), {, if, (, !, preserveFunctionExpressionNames, ), {, toRemove, ., getFirstChild, (, ), ., setString]
[), ), {, if, (, !, preserveFunctionExpressionNames, ), {, toRemove, ., getFirstChild, (, ), ., setString, (, "", ), ;]
[), {, toRemove, ., getFirstChild, (, ), ., setString, (, "", ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), {, toRemove, ., getFirstChild, (, ), ., setString, (, "", ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, parent, !=, null, &&, parent, ., isFor, (]
[., setString, (, "", ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, parent, !=, null]
[., getFirstChild, (, ), ., setString, (, "", ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, parent, !=, null, &&, parent, ., isFor]
[;, }, }, else, if, (, parent, !=, null, &&, parent, ., isFor, (, ), &&, parent, ., getChildCount, (]
[., reportCodeChange, (, ), ;, }, }, else, if, (, parent, !=, null, &&, parent, ., isFor, (, ), &&]
[), {, }, else, if, (, toRemove, ., isVar, (, ), &&, nameNode, ., hasChildren, (, ), &&, NodeUtil, .]
[&&, parent, ., getChildCount, (, ), <, 4, ), {, }, else, if, (, toRemove, ., isVar, (, ), &&]
[&&, parent, ., isFor, (, ), &&, parent, ., getChildCount, (, ), <, 4, ), {, }, else, if, (]
[!=, null, &&, parent, ., isFor, (, ), &&, parent, ., getChildCount, (, ), <, 4, ), {, }, else]
[&&, parent, ., isFor, (, ), &&, parent, ., getChildCount, (, ), <, 4, ), {, }, else, if, (]
[&&, parent, ., getChildCount, (, ), <, 4, ), {, }, else, if, (, toRemove, ., isVar, (, ), &&]
[., isFor, (, ), &&, parent, ., getChildCount, (, ), <, 4, ), {, }, else, if, (, toRemove, .]
[), {, }, else, if, (, toRemove, ., isVar, (, ), &&, nameNode, ., hasChildren, (, ), &&, NodeUtil, .]
[<, 4, ), {, }, else, if, (, toRemove, ., isVar, (, ), &&, nameNode, ., hasChildren, (, ), &&]
[., getChildCount, (, ), <, 4, ), {, }, else, if, (, toRemove, ., isVar, (, ), &&, nameNode, .]
[), {, }, else, if, (, toRemove, ., isVar, (, ), &&, nameNode, ., hasChildren, (, ), &&, NodeUtil, .]
[), {, if, (, toRemove, ., getChildCount, (, ), ==, 1, ), {, parent, ., replaceChild, (, toRemove, ,, IR]
[&&, NodeUtil, ., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,, compiler, ), ), {, if, (, toRemove, ., getChildCount]
[&&, nameNode, ., hasChildren, (, ), &&, NodeUtil, ., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,, compiler, ), )]
[., isVar, (, ), &&, nameNode, ., hasChildren, (, ), &&, NodeUtil, ., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, )]
[&&, NodeUtil, ., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,, compiler, ), ), {, if, (, toRemove, ., getChildCount]
[., hasChildren, (, ), &&, NodeUtil, ., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,, compiler, ), ), {, if]
[), {, if, (, toRemove, ., getChildCount, (, ), ==, 1, ), {, parent, ., replaceChild, (, toRemove, ,, IR]
[., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,, compiler, ), ), {, if, (, toRemove, ., getChildCount, (, )]
[,, compiler, ), ), {, if, (, toRemove, ., getChildCount, (, ), ==, 1, ), {, parent, ., replaceChild, (]
[., getFirstChild, (, ), ,, compiler, ), ), {, if, (, toRemove, ., getChildCount, (, ), ==, 1, ), {]
[), ), {, if, (, toRemove, ., getChildCount, (, ), ==, 1, ), {, parent, ., replaceChild, (, toRemove, ,]
[), {, parent, ., replaceChild, (, toRemove, ,, IR, ., exprResult, (, nameNode, ., removeFirstChild, (, ), ), ), ;]
[==, 1, ), {, parent, ., replaceChild, (, toRemove, ,, IR, ., exprResult, (, nameNode, ., removeFirstChild, (, ), )]
[., getChildCount, (, ), ==, 1, ), {, parent, ., replaceChild, (, toRemove, ,, IR, ., exprResult, (, nameNode, .]
[), {, parent, ., replaceChild, (, toRemove, ,, IR, ., exprResult, (, nameNode, ., removeFirstChild, (, ), ), ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, toRemove, ., isVar, (, ), &&, toRemove, .]
[., replaceChild, (, toRemove, ,, IR, ., exprResult, (, nameNode, ., removeFirstChild, (, ), ), ), ;, compiler, ., reportCodeChange]
[,, IR, ., exprResult, (, nameNode, ., removeFirstChild, (, ), ), ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, toRemove, ., isVar, (, ), &&, toRemove]
[., exprResult, (, nameNode, ., removeFirstChild, (, ), ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, toRemove, ., isVar, (, ), &&]
[., removeFirstChild, (, ), ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, toRemove, .]
[;, }, }, else, if, (, toRemove, ., isVar, (, ), &&, toRemove, ., getChildCount, (, ), >, 1, )]
[., reportCodeChange, (, ), ;, }, }, else, if, (, toRemove, ., isVar, (, ), &&, toRemove, ., getChildCount, (]
[), {, toRemove, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, parent]
[&&, toRemove, ., getChildCount, (, ), >, 1, ), {, toRemove, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange]
[., isVar, (, ), &&, toRemove, ., getChildCount, (, ), >, 1, ), {, toRemove, ., removeChild, (, nameNode, )]
[), {, toRemove, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, parent]
[>, 1, ), {, toRemove, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if]
[., getChildCount, (, ), >, 1, ), {, toRemove, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, )]
[), {, toRemove, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, parent]
[;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, parent, !=, null, ), {, NodeUtil, ., removeChild, (]
[., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, parent, !=, null, )]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, parent, !=, null, ), {, NodeUtil, ., removeChild]
[;, }, else, if, (, parent, !=, null, ), {, NodeUtil, ., removeChild, (, parent, ,, toRemove, ), ;, compiler]
[., reportCodeChange, (, ), ;, }, else, if, (, parent, !=, null, ), {, NodeUtil, ., removeChild, (, parent, ,]
[), {, NodeUtil, ., removeChild, (, parent, ,, toRemove, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[!=, null, ), {, NodeUtil, ., removeChild, (, parent, ,, toRemove, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), {, NodeUtil, ., removeChild, (, parent, ,, toRemove, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, class, Continuation, {, private, final, Node, node, ;, private]
[., removeChild, (, parent, ,, toRemove, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, class, Continuation]
[,, toRemove, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, class, Continuation, {, private, final, Node]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, class, Continuation, {, private, final, Node, node, ;]
[;, }, }, }, private, class, Continuation, {, private, final, Node, node, ;, private, final, Scope, scope, ;, Continuation, (]
[., reportCodeChange, (, ), ;, }, }, }, private, class, Continuation, {, private, final, Node, node, ;, private, final, Scope]
[=, node, ;, this, ., scope, =, scope, ;, }, void, apply, (, ), {, if, (, NodeUtil, ., isFunctionDeclaration]
[., node, =, node, ;, this, ., scope, =, scope, ;, }, void, apply, (, ), {, if, (, NodeUtil]
[;, this, ., scope, =, scope, ;, }, void, apply, (, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, node]
[=, scope, ;, }, void, apply, (, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, node, ), ), {, traverseFunction]
[., scope, =, scope, ;, }, void, apply, (, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, node, ), )]
[;, }, void, apply, (, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, node, ), ), {, traverseFunction, (, node]
[), {, traverseFunction, (, node, ,, scope, ), ;, }, else, {, for, (, Node, child, =, node, ., getFirstChild]
[., isFunctionDeclaration, (, node, ), ), {, traverseFunction, (, node, ,, scope, ), ;, }, else, {, for, (, Node]
[), ), {, traverseFunction, (, node, ,, scope, ), ;, }, else, {, for, (, Node, child, =, node, .]
[;, }, else, {, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child]
[,, scope, ), ;, }, else, {, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=]
[), ;, }, else, {, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, traverseNode, (, child, ,, node, ,]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, traverseNode, (]
[;, child, =, child, ., getNext, (, ), ), {, traverseNode, (, child, ,, node, ,, scope, ), ;, }]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, traverseNode, (, child, ,, node, ,, scope, )]
[;, child, =, child, ., getNext, (, ), ), {, traverseNode, (, child, ,, node, ,, scope, ), ;, }]
[=, child, ., getNext, (, ), ), {, traverseNode, (, child, ,, node, ,, scope, ), ;, }, }, }]
[), {, traverseNode, (, child, ,, node, ,, scope, ), ;, }, }, }, }, private, static, class, Assign, {]
[., getNext, (, ), ), {, traverseNode, (, child, ,, node, ,, scope, ), ;, }, }, }, }, private]
[;, }, }, }, }, private, static, class, Assign, {, final, Node, assignNode, ;, final, Node, nameNode, ;, final, boolean]
[,, node, ,, scope, ), ;, }, }, }, }, private, static, class, Assign, {, final, Node, assignNode, ;, final]
[,, scope, ), ;, }, }, }, }, private, static, class, Assign, {, final, Node, assignNode, ;, final, Node, nameNode]
[), ;, }, }, }, }, private, static, class, Assign, {, final, Node, assignNode, ;, final, Node, nameNode, ;, final]
[;, this, ., assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this]
[., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;, this, ., assignNode, =, assignNode, ;, this, ., nameNode]
[), ;, this, ., assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;]
[., isAssignmentOp, (, assignNode, ), ), ;, this, ., assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;, this]
[), ), ;, this, ., assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign]
[=, assignNode, ;, this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil]
[., assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased]
[;, this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed]
[=, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;]
[., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode]
[;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, .]
[=, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||]
[., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =]
[;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, .]
[=, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, .]
[., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (]
[;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), ), ||, NodeUtil, .]
[., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (]
[), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), ), ||, NodeUtil]
[=, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), ), ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, .]
[., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), ), ||, NodeUtil, ., mayHaveSideEffects, (]
[;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, ), {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, )]
[||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getLastChild, (, ), ), ;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, )]
[||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), ), ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getLastChild, (]
[||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getLastChild, (, ), ), ;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, )]
[., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), ), ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getLastChild, (, ), )]
[), ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getLastChild, (, ), ), ;, }, static, Assign, maybeCreateAssign, (, Node, assignNode]
[., getFirstChild, (, ), ), ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getLastChild, (, ), ), ;, }, static, Assign]
[;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, ), {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, )]
[., mayHaveSideEffects, (, assignNode, ., getLastChild, (, ), ), ;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, ), {, Preconditions]
[), ;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, ), {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode]
[., getLastChild, (, ), ), ;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, ), {, Preconditions, ., checkState, (, NodeUtil]
[;, boolean, isPropAssign, =, false, ;, Node, current, =, assignNode, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet]
[., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;, boolean, isPropAssign, =, false, ;, Node, current, =, assignNode]
[), ;, boolean, isPropAssign, =, false, ;, Node, current, =, assignNode, ., getFirstChild, (, ), ;, if, (, NodeUtil, .]
[., isAssignmentOp, (, assignNode, ), ), ;, boolean, isPropAssign, =, false, ;, Node, current, =, assignNode, ., getFirstChild, (, )]
[), ), ;, boolean, isPropAssign, =, false, ;, Node, current, =, assignNode, ., getFirstChild, (, ), ;, if, (, NodeUtil]
[;, Node, current, =, assignNode, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, current, ), ), {]
[;, if, (, NodeUtil, ., isGet, (, current, ), ), {, current, =, current, ., getFirstChild, (, ), ;, isPropAssign]
[., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, current, ), ), {, current, =, current, ., getFirstChild]
[), {, current, =, current, ., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if, (, current, ., isGetProp, (]
[., isGet, (, current, ), ), {, current, =, current, ., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if]
[), ), {, current, =, current, ., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if, (, current, ., isGetProp]
[=, current, ., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if, (, current, ., isGetProp, (, ), &&, current]
[;, isPropAssign, =, true, ;, if, (, current, ., isGetProp, (, ), &&, current, ., getLastChild, (, ), ., getString]
[., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if, (, current, ., isGetProp, (, ), &&, current, ., getLastChild]
[=, true, ;, if, (, current, ., isGetProp, (, ), &&, current, ., getLastChild, (, ), ., getString, (, )]
[;, if, (, current, ., isGetProp, (, ), &&, current, ., getLastChild, (, ), ., getString, (, ), ., equals]
[), {, current, =, current, ., getFirstChild, (, ), ;, }, }, if, (, current, ., isName, (, ), )]
[&&, current, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ), {, current, =, current]
[., isGetProp, (, ), &&, current, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), )]
[), {, current, =, current, ., getFirstChild, (, ), ;, }, }, if, (, current, ., isName, (, ), )]
[., equals, (, "prototype", ), ), {, current, =, current, ., getFirstChild, (, ), ;, }, }, if, (, current]
[., getString, (, ), ., equals, (, "prototype", ), ), {, current, =, current, ., getFirstChild, (, ), ;, }]
[., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ), {, current, =, current, ., getFirstChild]
[), ), {, current, =, current, ., getFirstChild, (, ), ;, }, }, if, (, current, ., isName, (, )]
[=, current, ., getFirstChild, (, ), ;, }, }, if, (, current, ., isName, (, ), ), {, return, new]
[;, }, }, if, (, current, ., isName, (, ), ), {, return, new, Assign, (, assignNode, ,, current, ,]
[., getFirstChild, (, ), ;, }, }, if, (, current, ., isName, (, ), ), {, return, new, Assign, (]
[), {, return, new, Assign, (, assignNode, ,, current, ,, isPropAssign, ), ;, }, return, null, ;, }, void, remove]
[., isName, (, ), ), {, return, new, Assign, (, assignNode, ,, current, ,, isPropAssign, ), ;, }, return, null]
[;, }, return, null, ;, }, void, remove, (, ), {, Node, parent, =, assignNode, ., getParent, (, ), ;]
[,, current, ,, isPropAssign, ), ;, }, return, null, ;, }, void, remove, (, ), {, Node, parent, =, assignNode]
[,, isPropAssign, ), ;, }, return, null, ;, }, void, remove, (, ), {, Node, parent, =, assignNode, ., getParent]
[), ;, }, return, null, ;, }, void, remove, (, ), {, Node, parent, =, assignNode, ., getParent, (, )]
[;, }, void, remove, (, ), {, Node, parent, =, assignNode, ., getParent, (, ), ;, if, (, mayHaveSecondarySideEffects, )]
[;, if, (, mayHaveSecondarySideEffects, ), {, Node, replacement, =, assignNode, ., getLastChild, (, ), ., detachFromParent, (, ), ;, for]
[., getParent, (, ), ;, if, (, mayHaveSecondarySideEffects, ), {, Node, replacement, =, assignNode, ., getLastChild, (, ), ., detachFromParent]
[), {, Node, replacement, =, assignNode, ., getLastChild, (, ), ., detachFromParent, (, ), ;, for, (, Node, current, =]
[;, for, (, Node, current, =, assignNode, ., getFirstChild, (, ), ;, !, current, ., isName, (, ), ;, current]
[., detachFromParent, (, ), ;, for, (, Node, current, =, assignNode, ., getFirstChild, (, ), ;, !, current, ., isName]
[., getLastChild, (, ), ., detachFromParent, (, ), ;, for, (, Node, current, =, assignNode, ., getFirstChild, (, ), ;]
[;, !, current, ., isName, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, if, (, current]
[., getFirstChild, (, ), ;, !, current, ., isName, (, ), ;, current, =, current, ., getFirstChild, (, ), )]
[;, current, =, current, ., getFirstChild, (, ), ), {, if, (, current, ., isGetElem, (, ), ), {, replacement]
[;, current, =, current, ., getFirstChild, (, ), ), {, if, (, current, ., isGetElem, (, ), ), {, replacement]
[., isName, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, if, (, current, ., isGetElem, (]
[=, current, ., getFirstChild, (, ), ), {, if, (, current, ., isGetElem, (, ), ), {, replacement, =, IR]
[), {, if, (, current, ., isGetElem, (, ), ), {, replacement, =, IR, ., comma, (, current, ., getLastChild]
[., getFirstChild, (, ), ), {, if, (, current, ., isGetElem, (, ), ), {, replacement, =, IR, ., comma]
[), {, replacement, =, IR, ., comma, (, current, ., getLastChild, (, ), ., detachFromParent, (, ), ,, replacement, )]
[., isGetElem, (, ), ), {, replacement, =, IR, ., comma, (, current, ., getLastChild, (, ), ., detachFromParent, (]
[=, IR, ., comma, (, current, ., getLastChild, (, ), ., detachFromParent, (, ), ,, replacement, ), ;, replacement, .]
[;, replacement, ., copyInformationFrom, (, current, ), ;, }, }, parent, ., replaceChild, (, assignNode, ,, replacement, ), ;, }]
[., comma, (, current, ., getLastChild, (, ), ., detachFromParent, (, ), ,, replacement, ), ;, replacement, ., copyInformationFrom, (]
[,, replacement, ), ;, replacement, ., copyInformationFrom, (, current, ), ;, }, }, parent, ., replaceChild, (, assignNode, ,, replacement]
[., detachFromParent, (, ), ,, replacement, ), ;, replacement, ., copyInformationFrom, (, current, ), ;, }, }, parent, ., replaceChild]
[., getLastChild, (, ), ., detachFromParent, (, ), ,, replacement, ), ;, replacement, ., copyInformationFrom, (, current, ), ;, }]
[), ;, replacement, ., copyInformationFrom, (, current, ), ;, }, }, parent, ., replaceChild, (, assignNode, ,, replacement, ), ;]
[;, }, }, parent, ., replaceChild, (, assignNode, ,, replacement, ), ;, }, else, {, Node, gramps, =, parent, .]
[., copyInformationFrom, (, current, ), ;, }, }, parent, ., replaceChild, (, assignNode, ,, replacement, ), ;, }, else, {]
[), ;, }, }, parent, ., replaceChild, (, assignNode, ,, replacement, ), ;, }, else, {, Node, gramps, =, parent]
[;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, )]
[., replaceChild, (, assignNode, ,, replacement, ), ;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;]
[,, replacement, ), ;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, parent, .]
[), ;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (]
[;, if, (, parent, ., isExprResult, (, ), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, {]
[., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {, gramps, ., removeChild, (, parent, )]
[), {, gramps, ., removeChild, (, parent, ), ;, }, else, {, parent, ., replaceChild, (, assignNode, ,, assignNode, .]
[., isExprResult, (, ), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, {, parent, ., replaceChild, (]
[;, }, else, {, parent, ., replaceChild, (, assignNode, ,, assignNode, ., getLastChild, (, ), ., detachFromParent, (, ), )]
[., removeChild, (, parent, ), ;, }, else, {, parent, ., replaceChild, (, assignNode, ,, assignNode, ., getLastChild, (, )]
[), ;, }, else, {, parent, ., replaceChild, (, assignNode, ,, assignNode, ., getLastChild, (, ), ., detachFromParent, (, )]
[;, }, }, }, }, }]
[., replaceChild, (, assignNode, ,, assignNode, ., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, }, }, }]
[,, assignNode, ., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, }, }, }, }]
[), ;, }, }, }, }, }]
[., detachFromParent, (, ), ), ;, }, }, }, }, }]
[., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, }, }, }, }]
