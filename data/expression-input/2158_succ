[;, static, final, DiagnosticType, SUSPICIOUS_COMPARISON_WITH_NAN, =, DiagnosticType, ., warning, (, "JSC_SUSPICIOUS_NAN", ,, "Comparison again NaN is always false. Did you mean isNaN()?", ), ;, CheckSuspiciousCode, (, ), {, }]
[., warning, (, "JSC_SUSPICIOUS_SEMICOLON", ,, "If this if/for/while really shouldn't have a body, use {}", ), ;, static, final, DiagnosticType, SUSPICIOUS_COMPARISON_WITH_NAN, =, DiagnosticType, ., warning, (, "JSC_SUSPICIOUS_NAN", ,, "Comparison again NaN is always false. Did you mean isNaN()?"]
[,, "If this if/for/while really shouldn't have a body, use {}", ), ;, static, final, DiagnosticType, SUSPICIOUS_COMPARISON_WITH_NAN, =, DiagnosticType, ., warning, (, "JSC_SUSPICIOUS_NAN", ,, "Comparison again NaN is always false. Did you mean isNaN()?", ), ;, CheckSuspiciousCode, (]
[), ;, static, final, DiagnosticType, SUSPICIOUS_COMPARISON_WITH_NAN, =, DiagnosticType, ., warning, (, "JSC_SUSPICIOUS_NAN", ,, "Comparison again NaN is always false. Did you mean isNaN()?", ), ;, CheckSuspiciousCode, (, ), {]
[;, CheckSuspiciousCode, (, ), {, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[., warning, (, "JSC_SUSPICIOUS_NAN", ,, "Comparison again NaN is always false. Did you mean isNaN()?", ), ;, CheckSuspiciousCode, (, ), {, }, @, Override, public, void, visit, (, NodeTraversal]
[,, "Comparison again NaN is always false. Did you mean isNaN()?", ), ;, CheckSuspiciousCode, (, ), {, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), ;, CheckSuspiciousCode, (, ), {, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[;, checkNaN, (, t, ,, n, ), ;, }, private, void, checkMissingSemicolon, (, NodeTraversal, t, ,, Node, n, ), {]
[,, n, ), ;, checkNaN, (, t, ,, n, ), ;, }, private, void, checkMissingSemicolon, (, NodeTraversal, t, ,, Node]
[), ;, checkNaN, (, t, ,, n, ), ;, }, private, void, checkMissingSemicolon, (, NodeTraversal, t, ,, Node, n, )]
[;, }, private, void, checkMissingSemicolon, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n, ., getType, (, )]
[,, n, ), ;, }, private, void, checkMissingSemicolon, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n, .]
[), ;, }, private, void, checkMissingSemicolon, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n, ., getType, (]
[), {, case, Token, ., IF, :, Node, trueCase, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[., getType, (, ), ), {, case, Token, ., IF, :, Node, trueCase, =, n, ., getFirstChild, (, ), .]
[:, Node, trueCase, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, reportIfWasEmpty, (, t, ,, trueCase, )]
[., IF, :, Node, trueCase, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, reportIfWasEmpty, (, t, ,]
[;, reportIfWasEmpty, (, t, ,, trueCase, ), ;, Node, elseCase, =, trueCase, ., getNext, (, ), ;, if, (, elseCase]
[., getNext, (, ), ;, reportIfWasEmpty, (, t, ,, trueCase, ), ;, Node, elseCase, =, trueCase, ., getNext, (, )]
[., getFirstChild, (, ), ., getNext, (, ), ;, reportIfWasEmpty, (, t, ,, trueCase, ), ;, Node, elseCase, =, trueCase]
[;, Node, elseCase, =, trueCase, ., getNext, (, ), ;, if, (, elseCase, !=, null, ), {, reportIfWasEmpty, (, t]
[,, trueCase, ), ;, Node, elseCase, =, trueCase, ., getNext, (, ), ;, if, (, elseCase, !=, null, ), {]
[), ;, Node, elseCase, =, trueCase, ., getNext, (, ), ;, if, (, elseCase, !=, null, ), {, reportIfWasEmpty, (]
[;, if, (, elseCase, !=, null, ), {, reportIfWasEmpty, (, t, ,, elseCase, ), ;, }, break, ;, case, Token]
[., getNext, (, ), ;, if, (, elseCase, !=, null, ), {, reportIfWasEmpty, (, t, ,, elseCase, ), ;, }]
[), {, reportIfWasEmpty, (, t, ,, elseCase, ), ;, }, break, ;, case, Token, ., WHILE, :, case, Token, .]
[!=, null, ), {, reportIfWasEmpty, (, t, ,, elseCase, ), ;, }, break, ;, case, Token, ., WHILE, :, case]
[), {, reportIfWasEmpty, (, t, ,, elseCase, ), ;, }, break, ;, case, Token, ., WHILE, :, case, Token, .]
[;, }, break, ;, case, Token, ., WHILE, :, case, Token, ., FOR, :, reportIfWasEmpty, (, t, ,, NodeUtil, .]
[,, elseCase, ), ;, }, break, ;, case, Token, ., WHILE, :, case, Token, ., FOR, :, reportIfWasEmpty, (, t]
[), ;, }, break, ;, case, Token, ., WHILE, :, case, Token, ., FOR, :, reportIfWasEmpty, (, t, ,, NodeUtil]
[:, case, Token, ., FOR, :, reportIfWasEmpty, (, t, ,, NodeUtil, ., getLoopCodeBlock, (, n, ), ), ;, break, ;]
[., WHILE, :, case, Token, ., FOR, :, reportIfWasEmpty, (, t, ,, NodeUtil, ., getLoopCodeBlock, (, n, ), ), ;]
[:, reportIfWasEmpty, (, t, ,, NodeUtil, ., getLoopCodeBlock, (, n, ), ), ;, break, ;, }, }, private, void, reportIfWasEmpty]
[., FOR, :, reportIfWasEmpty, (, t, ,, NodeUtil, ., getLoopCodeBlock, (, n, ), ), ;, break, ;, }, }, private]
[;, break, ;, }, }, private, void, reportIfWasEmpty, (, NodeTraversal, t, ,, Node, block, ), {, Preconditions, ., checkState, (]
[,, NodeUtil, ., getLoopCodeBlock, (, n, ), ), ;, break, ;, }, }, private, void, reportIfWasEmpty, (, NodeTraversal, t, ,]
[), ;, break, ;, }, }, private, void, reportIfWasEmpty, (, NodeTraversal, t, ,, Node, block, ), {, Preconditions, ., checkState]
[., getLoopCodeBlock, (, n, ), ), ;, break, ;, }, }, private, void, reportIfWasEmpty, (, NodeTraversal, t, ,, Node, block]
[), ), ;, break, ;, }, }, private, void, reportIfWasEmpty, (, NodeTraversal, t, ,, Node, block, ), {, Preconditions, .]
[;, if, (, !, block, ., hasChildren, (, ), &&, block, ., wasEmptyNode, (, ), ), {, t, ., getCompiler]
[., checkState, (, block, ., isBlock, (, ), ), ;, if, (, !, block, ., hasChildren, (, ), &&, block]
[), ;, if, (, !, block, ., hasChildren, (, ), &&, block, ., wasEmptyNode, (, ), ), {, t, .]
[., isBlock, (, ), ), ;, if, (, !, block, ., hasChildren, (, ), &&, block, ., wasEmptyNode, (, )]
[), {, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, block, ,, SUSPICIOUS_SEMICOLON, ), ), ;]
[&&, block, ., wasEmptyNode, (, ), ), {, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (]
[&&, block, ., wasEmptyNode, (, ), ), {, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (]
[., hasChildren, (, ), &&, block, ., wasEmptyNode, (, ), ), {, t, ., getCompiler, (, ), ., report, (]
[), {, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, block, ,, SUSPICIOUS_SEMICOLON, ), ), ;]
[., wasEmptyNode, (, ), ), {, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, block, ,]
[;, }, }, private, void, checkNaN, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n, ., getType, (]
[., report, (, t, ., makeError, (, block, ,, SUSPICIOUS_SEMICOLON, ), ), ;, }, }, private, void, checkNaN, (, NodeTraversal]
[., getCompiler, (, ), ., report, (, t, ., makeError, (, block, ,, SUSPICIOUS_SEMICOLON, ), ), ;, }, }, private]
[), ;, }, }, private, void, checkNaN, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n, ., getType]
[., makeError, (, block, ,, SUSPICIOUS_SEMICOLON, ), ), ;, }, }, private, void, checkNaN, (, NodeTraversal, t, ,, Node, n]
[,, SUSPICIOUS_SEMICOLON, ), ), ;, }, }, private, void, checkNaN, (, NodeTraversal, t, ,, Node, n, ), {, switch, (]
[), ), ;, }, }, private, void, checkNaN, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n, .]
[), {, case, Token, ., EQ, :, case, Token, ., GE, :, case, Token, ., GT, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., EQ, :, case, Token, ., GE, :, case, Token, ., GT]
[:, case, Token, ., GE, :, case, Token, ., GT, :, case, Token, ., LE, :, case, Token, ., LT]
[., EQ, :, case, Token, ., GE, :, case, Token, ., GT, :, case, Token, ., LE, :, case, Token]
[:, case, Token, ., GT, :, case, Token, ., LE, :, case, Token, ., LT, :, case, Token, ., NE]
[., GE, :, case, Token, ., GT, :, case, Token, ., LE, :, case, Token, ., LT, :, case, Token]
[:, case, Token, ., LE, :, case, Token, ., LT, :, case, Token, ., NE, :, case, Token, ., SHEQ]
[., GT, :, case, Token, ., LE, :, case, Token, ., LT, :, case, Token, ., NE, :, case, Token]
[:, case, Token, ., LT, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE]
[., LE, :, case, Token, ., LT, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token]
[:, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, reportIfNaN, (, t, ,]
[., LT, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, reportIfNaN, (]
[:, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, reportIfNaN, (, t, ,, n, ., getFirstChild, (, )]
[., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, reportIfNaN, (, t, ,, n, ., getFirstChild]
[:, case, Token, ., SHNE, :, reportIfNaN, (, t, ,, n, ., getFirstChild, (, ), ), ;, reportIfNaN, (, t]
[., SHEQ, :, case, Token, ., SHNE, :, reportIfNaN, (, t, ,, n, ., getFirstChild, (, ), ), ;, reportIfNaN]
[:, reportIfNaN, (, t, ,, n, ., getFirstChild, (, ), ), ;, reportIfNaN, (, t, ,, n, ., getLastChild, (]
[., SHNE, :, reportIfNaN, (, t, ,, n, ., getFirstChild, (, ), ), ;, reportIfNaN, (, t, ,, n, .]
[;, reportIfNaN, (, t, ,, n, ., getLastChild, (, ), ), ;, }, }, private, void, reportIfNaN, (, NodeTraversal, t]
[,, n, ., getFirstChild, (, ), ), ;, reportIfNaN, (, t, ,, n, ., getLastChild, (, ), ), ;, }]
[), ;, reportIfNaN, (, t, ,, n, ., getLastChild, (, ), ), ;, }, }, private, void, reportIfNaN, (, NodeTraversal]
[., getFirstChild, (, ), ), ;, reportIfNaN, (, t, ,, n, ., getLastChild, (, ), ), ;, }, }, private]
[;, }, }, private, void, reportIfNaN, (, NodeTraversal, t, ,, Node, n, ), {, if, (, NodeUtil, ., isNaN, (]
[,, n, ., getLastChild, (, ), ), ;, }, }, private, void, reportIfNaN, (, NodeTraversal, t, ,, Node, n, )]
[), ;, }, }, private, void, reportIfNaN, (, NodeTraversal, t, ,, Node, n, ), {, if, (, NodeUtil, ., isNaN]
[., getLastChild, (, ), ), ;, }, }, private, void, reportIfNaN, (, NodeTraversal, t, ,, Node, n, ), {, if]
[), {, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ., getParent, (, ), ,]
[., isNaN, (, n, ), ), {, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, n]
[), ), {, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ., getParent, (, )]
[;, }, }, }]
[., report, (, t, ., makeError, (, n, ., getParent, (, ), ,, SUSPICIOUS_COMPARISON_WITH_NAN, ), ), ;, }, }, }]
[., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ., getParent, (, ), ,, SUSPICIOUS_COMPARISON_WITH_NAN, ), )]
[), ;, }, }, }]
[., makeError, (, n, ., getParent, (, ), ,, SUSPICIOUS_COMPARISON_WITH_NAN, ), ), ;, }, }, }]
[,, SUSPICIOUS_COMPARISON_WITH_NAN, ), ), ;, }, }, }]
[., getParent, (, ), ,, SUSPICIOUS_COMPARISON_WITH_NAN, ), ), ;, }, }, }]
[), ), ;, }, }, }]
