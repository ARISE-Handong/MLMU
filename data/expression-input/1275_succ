[;, private, int, omegaCount, ;, private, double, [, ], omegaReal, ;, private, double, [, ], omegaImaginaryCounterClockwise, ;, private, double, []
[=, 0, ;, omegaReal, =, null, ;, omegaImaginaryCounterClockwise, =, null, ;, omegaImaginaryClockwise, =, null, ;, isCounterClockWise, =, true, ;, }]
[;, omegaReal, =, null, ;, omegaImaginaryCounterClockwise, =, null, ;, omegaImaginaryClockwise, =, null, ;, isCounterClockWise, =, true, ;, }, public, synchronized]
[=, null, ;, omegaImaginaryCounterClockwise, =, null, ;, omegaImaginaryClockwise, =, null, ;, isCounterClockWise, =, true, ;, }, public, synchronized, boolean, isCounterClockWise]
[;, omegaImaginaryCounterClockwise, =, null, ;, omegaImaginaryClockwise, =, null, ;, isCounterClockWise, =, true, ;, }, public, synchronized, boolean, isCounterClockWise, (, )]
[=, null, ;, omegaImaginaryClockwise, =, null, ;, isCounterClockWise, =, true, ;, }, public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException]
[;, omegaImaginaryClockwise, =, null, ;, isCounterClockWise, =, true, ;, }, public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException, {, if]
[=, null, ;, isCounterClockWise, =, true, ;, }, public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException, {, if, (, omegaCount]
[;, isCounterClockWise, =, true, ;, }, public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException, {, if, (, omegaCount, ==, 0]
[=, true, ;, }, public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException, {, if, (, omegaCount, ==, 0, ), {]
[;, }, public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException, {, if, (, omegaCount, ==, 0, ), {, throw, new]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, return, isCounterClockWise, ;, }, public, synchronized, void, computeRoots]
[==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, return, isCounterClockWise, ;, }, public, synchronized]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, return, isCounterClockWise, ;, }, public, synchronized, void, computeRoots]
[;, }, return, isCounterClockWise, ;, }, public, synchronized, void, computeRoots, (, int, n, ), throws, ZeroException, {, if, (, n]
[), ;, }, return, isCounterClockWise, ;, }, public, synchronized, void, computeRoots, (, int, n, ), throws, ZeroException, {, if, (]
[., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, return, isCounterClockWise, ;, }, public, synchronized, void, computeRoots, (, int, n, ), throws, ZeroException, {]
[;, }, public, synchronized, void, computeRoots, (, int, n, ), throws, ZeroException, {, if, (, n, ==, 0, ), {]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ), ;, }, isCounterClockWise, =, n, >, 0, ;, final, int]
[==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ), ;, }, isCounterClockWise, =, n, >, 0, ;]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ), ;, }, isCounterClockWise, =, n, >, 0, ;, final, int]
[;, }, isCounterClockWise, =, n, >, 0, ;, final, int, absN, =, FastMath, ., abs, (, n, ), ;, if]
[), ;, }, isCounterClockWise, =, n, >, 0, ;, final, int, absN, =, FastMath, ., abs, (, n, ), ;]
[., CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ), ;, }, isCounterClockWise, =, n, >, 0, ;, final, int, absN, =, FastMath, ., abs, (, n]
[=, n, >, 0, ;, final, int, absN, =, FastMath, ., abs, (, n, ), ;, if, (, absN, ==]
[;, final, int, absN, =, FastMath, ., abs, (, n, ), ;, if, (, absN, ==, omegaCount, ), {, return]
[>, 0, ;, final, int, absN, =, FastMath, ., abs, (, n, ), ;, if, (, absN, ==, omegaCount, )]
[;, final, int, absN, =, FastMath, ., abs, (, n, ), ;, if, (, absN, ==, omegaCount, ), {, return]
[;, if, (, absN, ==, omegaCount, ), {, return, ;, }, final, double, t, =, 2.0, *, FastMath, ., PI]
[., abs, (, n, ), ;, if, (, absN, ==, omegaCount, ), {, return, ;, }, final, double, t, =]
[), ;, if, (, absN, ==, omegaCount, ), {, return, ;, }, final, double, t, =, 2.0, *, FastMath, .]
[), {, return, ;, }, final, double, t, =, 2.0, *, FastMath, ., PI, /, absN, ;, final, double, cosT]
[==, omegaCount, ), {, return, ;, }, final, double, t, =, 2.0, *, FastMath, ., PI, /, absN, ;, final]
[), {, return, ;, }, final, double, t, =, 2.0, *, FastMath, ., PI, /, absN, ;, final, double, cosT]
[;, final, double, cosT, =, FastMath, ., cos, (, t, ), ;, final, double, sinT, =, FastMath, ., sin, (]
[/, absN, ;, final, double, cosT, =, FastMath, ., cos, (, t, ), ;, final, double, sinT, =, FastMath, .]
[*, FastMath, ., PI, /, absN, ;, final, double, cosT, =, FastMath, ., cos, (, t, ), ;, final, double]
[/, absN, ;, final, double, cosT, =, FastMath, ., cos, (, t, ), ;, final, double, sinT, =, FastMath, .]
[., PI, /, absN, ;, final, double, cosT, =, FastMath, ., cos, (, t, ), ;, final, double, sinT, =]
[;, final, double, cosT, =, FastMath, ., cos, (, t, ), ;, final, double, sinT, =, FastMath, ., sin, (]
[;, final, double, sinT, =, FastMath, ., sin, (, t, ), ;, omegaReal, =, new, double, [, absN, ], ;]
[., cos, (, t, ), ;, final, double, sinT, =, FastMath, ., sin, (, t, ), ;, omegaReal, =, new]
[), ;, final, double, sinT, =, FastMath, ., sin, (, t, ), ;, omegaReal, =, new, double, [, absN, ]]
[;, omegaReal, =, new, double, [, absN, ], ;, omegaImaginaryCounterClockwise, =, new, double, [, absN, ], ;, omegaImaginaryClockwise, =, new]
[., sin, (, t, ), ;, omegaReal, =, new, double, [, absN, ], ;, omegaImaginaryCounterClockwise, =, new, double, [, absN]
[), ;, omegaReal, =, new, double, [, absN, ], ;, omegaImaginaryCounterClockwise, =, new, double, [, absN, ], ;, omegaImaginaryClockwise, =]
[=, new, double, [, absN, ], ;, omegaImaginaryCounterClockwise, =, new, double, [, absN, ], ;, omegaImaginaryClockwise, =, new, double, []
[;, omegaImaginaryCounterClockwise, =, new, double, [, absN, ], ;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;, omegaReal, [, 0]
[], ;, omegaImaginaryCounterClockwise, =, new, double, [, absN, ], ;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;, omegaReal, []
[=, new, double, [, absN, ], ;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;, omegaReal, [, 0, ], =]
[;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;, omegaReal, [, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ]]
[], ;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;, omegaReal, [, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0]
[=, new, double, [, absN, ], ;, omegaReal, [, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0]
[;, omegaReal, [, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =]
[], ;, omegaReal, [, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ]]
[=, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int]
[[, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;]
[], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (]
[;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int, i, =]
[=, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int, i, =, 1, ;, i, <, absN]
[[, 0, ], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int, i, =, 1, ;]
[], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int, i, =, 1, ;, i, <]
[;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int, i, =, 1, ;, i, <, absN, ;, i]
[=, 0.0, ;, for, (, int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {, omegaReal, []
[[, 0, ], =, 0.0, ;, for, (, int, i, =, 1, ;, i, <, absN, ;, i, ++, )]
[], =, 0.0, ;, for, (, int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {, omegaReal]
[;, for, (, int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {, omegaReal, [, i, ]]
[;, i, <, absN, ;, i, ++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ]]
[;, i, ++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise]
[<, absN, ;, i, ++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *, cosT]
[;, i, ++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise]
[), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -]
[++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i]
[=, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise]
[[, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *]
[], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;]
[;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1]
[-, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1]
[*, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i]
[[, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i]
[], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, []
[-, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =]
[], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, []
[-, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1]
[;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1]
[*, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i]
[[, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *]
[], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, []
[-, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +]
[], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, []
[;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1]
[=, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise]
[[, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *]
[], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;]
[;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }, omegaCount, =, absN, ;, }, public, synchronized]
[+, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ]]
[*, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, []
[[, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i]
[], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise]
[-, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =]
[], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise]
[+, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ]]
[;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }, omegaCount, =, absN, ;, }, public, synchronized]
[*, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }, omegaCount, =, absN, ;, }]
[[, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }]
[], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }, omegaCount, =, absN, ;]
[-, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }, omegaCount, =]
[], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }, omegaCount, =, absN, ;]
[;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }, omegaCount, =, absN, ;, }, public, synchronized]
[=, -, omegaImaginaryCounterClockwise, [, i, ], ;, }, omegaCount, =, absN, ;, }, public, synchronized, double, getReal, (, int, k]
[[, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }, omegaCount, =, absN, ;, }, public, synchronized, double, getReal]
[], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }, omegaCount, =, absN, ;, }, public, synchronized, double, getReal, (, int]
[;, }, omegaCount, =, absN, ;, }, public, synchronized, double, getReal, (, int, k, ), throws, MathIllegalStateException, ,, MathIllegalArgumentException, {]
[;, }, omegaCount, =, absN, ;, }, public, synchronized, double, getReal, (, int, k, ), throws, MathIllegalStateException, ,, MathIllegalArgumentException, {]
[[, i, ], ;, }, omegaCount, =, absN, ;, }, public, synchronized, double, getReal, (, int, k, ), throws, MathIllegalStateException]
[], ;, }, omegaCount, =, absN, ;, }, public, synchronized, double, getReal, (, int, k, ), throws, MathIllegalStateException, ,, MathIllegalArgumentException]
[=, absN, ;, }, public, synchronized, double, getReal, (, int, k, ), throws, MathIllegalStateException, ,, MathIllegalArgumentException, {, if, (, omegaCount]
[;, }, public, synchronized, double, getReal, (, int, k, ), throws, MathIllegalStateException, ,, MathIllegalArgumentException, {, if, (, omegaCount, ==, 0]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||]
[==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||]
[;, }, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException]
[), ;, }, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new]
[., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf]
[||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (]
[), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf]
[<, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer]
[), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, .]
[>=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, .]
[;, }, return, omegaReal, [, k, ], ;, }, public, synchronized, double, getImaginary, (, int, k, ), throws, MathIllegalStateException, ,]
[,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount]
[., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf]
[,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return]
[., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1]
[), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }]
[,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, omegaReal, [, k, ], ;, }, public]
[., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, omegaReal, []
[), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, omegaReal, [, k, ], ;, }]
[), ;, }, return, omegaReal, [, k, ], ;, }, public, synchronized, double, getImaginary, (, int, k, ), throws, MathIllegalStateException]
[., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, omegaReal, [, k, ], ;, }, public, synchronized, double]
[), ), ;, }, return, omegaReal, [, k, ], ;, }, public, synchronized, double, getImaginary, (, int, k, ), throws]
[-, 1, ), ), ;, }, return, omegaReal, [, k, ], ;, }, public, synchronized, double, getImaginary, (, int, k]
[), ), ;, }, return, omegaReal, [, k, ], ;, }, public, synchronized, double, getImaginary, (, int, k, ), throws]
[;, }, public, synchronized, double, getImaginary, (, int, k, ), throws, MathIllegalStateException, ,, OutOfRangeException, {, if, (, omegaCount, ==, 0]
[[, k, ], ;, }, public, synchronized, double, getImaginary, (, int, k, ), throws, MathIllegalStateException, ,, OutOfRangeException, {, if, (]
[], ;, }, public, synchronized, double, getImaginary, (, int, k, ), throws, MathIllegalStateException, ,, OutOfRangeException, {, if, (, omegaCount, ==]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||]
[==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||]
[;, }, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException]
[), ;, }, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new]
[., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf]
[||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (]
[), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf]
[<, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer]
[), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, .]
[>=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, .]
[;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, [, k, ], :, omegaImaginaryClockwise, [, k, ], ;, }, public, synchronized, int, getNumberOfRoots]
[,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount]
[., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf]
[,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return]
[., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1]
[), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }]
[,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, [, k, ], :]
[., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, isCounterClockWise, ?]
[), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, [, k, ]]
[), ;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, [, k, ], :, omegaImaginaryClockwise, [, k, ], ;, }, public, synchronized, int]
[., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, [, k, ], :, omegaImaginaryClockwise, []
[), ), ;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, [, k, ], :, omegaImaginaryClockwise, [, k, ], ;, }, public, synchronized]
[-, 1, ), ), ;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, [, k, ], :, omegaImaginaryClockwise, [, k, ], ;, }]
[), ), ;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, [, k, ], :, omegaImaginaryClockwise, [, k, ], ;, }, public, synchronized]
[;, }, public, synchronized, int, getNumberOfRoots, (, ), {, return, omegaCount, ;, }, }]
[?, omegaImaginaryCounterClockwise, [, k, ], :, omegaImaginaryClockwise, [, k, ], ;, }, public, synchronized, int, getNumberOfRoots, (, ), {, return]
[:, omegaImaginaryClockwise, [, k, ], ;, }, public, synchronized, int, getNumberOfRoots, (, ), {, return, omegaCount, ;, }, }]
[[, k, ], :, omegaImaginaryClockwise, [, k, ], ;, }, public, synchronized, int, getNumberOfRoots, (, ), {, return, omegaCount, ;]
[], :, omegaImaginaryClockwise, [, k, ], ;, }, public, synchronized, int, getNumberOfRoots, (, ), {, return, omegaCount, ;, }, }]
[;, }, public, synchronized, int, getNumberOfRoots, (, ), {, return, omegaCount, ;, }, }]
[[, k, ], ;, }, public, synchronized, int, getNumberOfRoots, (, ), {, return, omegaCount, ;, }, }]
[], ;, }, public, synchronized, int, getNumberOfRoots, (, ), {, return, omegaCount, ;, }, }]
[;, }, }]
