[;, private, GoalType, goal, ;, private, double, searchMin, ;, private, double, searchMax, ;, private, double, searchStart, ;, private, UnivariateFunction, function]
[=, checker, ;, }, public, int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int]
[., checker, =, checker, ;, }, public, int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }]
[;, }, public, int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (]
[;, }, public, int, getEvaluations, (, ), {, return, evaluations, ., getCount, (, ), ;, }, public, GoalType, getGoalType, (]
[., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return, evaluations, ., getCount, (, ), ;, }]
[;, }, public, GoalType, getGoalType, (, ), {, return, goal, ;, }, public, double, getMin, (, ), {, return, searchMin]
[., getCount, (, ), ;, }, public, GoalType, getGoalType, (, ), {, return, goal, ;, }, public, double, getMin, (]
[;, }, public, double, getMin, (, ), {, return, searchMin, ;, }, public, double, getMax, (, ), {, return, searchMax]
[;, }, public, double, getMax, (, ), {, return, searchMax, ;, }, public, double, getStartValue, (, ), {, return, searchStart]
[;, }, public, double, getStartValue, (, ), {, return, searchStart, ;, }, protected, double, computeObjectiveValue, (, double, point, ), {]
[;, }, protected, double, computeObjectiveValue, (, double, point, ), {, try, {, evaluations, ., incrementCount, (, ), ;, }, catch]
[;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }]
[., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (]
[;, }, return, function, ., value, (, point, ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, UnivariateFunction, f]
[), ;, }, return, function, ., value, (, point, ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, UnivariateFunction]
[., getMax, (, ), ), ;, }, return, function, ., value, (, point, ), ;, }, public, UnivariatePointValuePair, optimize, (]
[;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, UnivariateFunction, f, ,, GoalType, goalType, ,, double, min, ,, double, max]
[., value, (, point, ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, UnivariateFunction, f, ,, GoalType, goalType, ,]
[), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, UnivariateFunction, f, ,, GoalType, goalType, ,, double, min, ,, double]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, goalType, ==, null, ), {, throw, new, NullArgumentException, (]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, goalType, ==, null, ), {, throw, new]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, goalType, ==, null, ), {, throw, new, NullArgumentException, (]
[;, }, if, (, goalType, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, searchMin, =, min, ;]
[), {, throw, new, NullArgumentException, (, ), ;, }, searchMin, =, min, ;, searchMax, =, max, ;, searchStart, =, startValue]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, searchMin, =, min, ;, searchMax, =, max, ;, searchStart]
[), {, throw, new, NullArgumentException, (, ), ;, }, searchMin, =, min, ;, searchMax, =, max, ;, searchStart, =, startValue]
[;, }, searchMin, =, min, ;, searchMax, =, max, ;, searchStart, =, startValue, ;, goal, =, goalType, ;, function, =]
[=, min, ;, searchMax, =, max, ;, searchStart, =, startValue, ;, goal, =, goalType, ;, function, =, f, ;, evaluations]
[;, searchMax, =, max, ;, searchStart, =, startValue, ;, goal, =, goalType, ;, function, =, f, ;, evaluations, ., setMaximalCount]
[=, max, ;, searchStart, =, startValue, ;, goal, =, goalType, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval]
[;, searchStart, =, startValue, ;, goal, =, goalType, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;]
[=, startValue, ;, goal, =, goalType, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, .]
[;, goal, =, goalType, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (]
[=, goalType, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;]
[;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, return, doOptimize]
[=, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, return, doOptimize, (, )]
[;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, return, doOptimize, (, ), ;, }]
[;, evaluations, ., resetCount, (, ), ;, return, doOptimize, (, ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,]
[., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, return, doOptimize, (, ), ;, }, public, UnivariatePointValuePair]
[), ;, evaluations, ., resetCount, (, ), ;, return, doOptimize, (, ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval]
[;, return, doOptimize, (, ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, UnivariateFunction, f, ,, GoalType, goalType, ,]
[., resetCount, (, ), ;, return, doOptimize, (, ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, UnivariateFunction, f]
[;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, UnivariateFunction, f, ,, GoalType, goalType, ,, double, min, ,, double, max]
[;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, checker, ;, }, protected, abstract, UnivariatePointValuePair, doOptimize, (]
[,, f, ,, goalType, ,, min, ,, max, ,, min, +, 0.5, *, (, max, -, min, ), ), ;]
[,, goalType, ,, min, ,, max, ,, min, +, 0.5, *, (, max, -, min, ), ), ;, }, public]
[,, min, ,, max, ,, min, +, 0.5, *, (, max, -, min, ), ), ;, }, public, ConvergenceChecker, <]
[,, max, ,, min, +, 0.5, *, (, max, -, min, ), ), ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >]
[,, min, +, 0.5, *, (, max, -, min, ), ), ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (]
[), ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, checker, ;, }, protected, abstract, UnivariatePointValuePair, doOptimize]
[+, 0.5, *, (, max, -, min, ), ), ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {]
[), ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, checker, ;, }, protected, abstract, UnivariatePointValuePair, doOptimize]
[*, (, max, -, min, ), ), ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, checker]
[), ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, checker, ;, }, protected, abstract, UnivariatePointValuePair, doOptimize]
[), ), ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, checker, ;, }, protected, abstract, UnivariatePointValuePair]
[-, min, ), ), ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, checker, ;, }, protected]
[), ), ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, checker, ;, }, protected, abstract, UnivariatePointValuePair]
[;, }, protected, abstract, UnivariatePointValuePair, doOptimize, (, ), ;, }]
