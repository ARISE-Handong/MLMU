[commons, ., math3, ., random, ., Well19937c, ;, public, class, FDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =]
[public, class, FDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =]
[class, FDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =, -]
[;, private, final, double, numeratorDegreesOfFreedom, ;, private, final, double, denominatorDegreesOfFreedom, ;, private, final, double, solverAbsoluteAccuracy, ;, private, double, numericalVariance, =]
[;, private, final, double, numeratorDegreesOfFreedom, ;, private, final, double, denominatorDegreesOfFreedom, ;, private, final, double, solverAbsoluteAccuracy, ;, private, double, numericalVariance, =]
[double, denominatorDegreesOfFreedom, ;, private, final, double, solverAbsoluteAccuracy, ;, private, double, numericalVariance, =, Double, ., NaN, ;, private, boolean, numericalVarianceIsCalculated, =]
[private, boolean, numericalVarianceIsCalculated, =, false, ;, public, FDistribution, (, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ), throws, NotStrictlyPositiveException, {, this, (]
[numericalVarianceIsCalculated, =, false, ;, public, FDistribution, (, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ), throws, NotStrictlyPositiveException, {, this, (, numeratorDegreesOfFreedom, ,]
[false, ;, public, FDistribution, (, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ), throws, NotStrictlyPositiveException, {, this, (, numeratorDegreesOfFreedom, ,, denominatorDegreesOfFreedom, ,]
[), ;, }, public, FDistribution, (, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[(, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,]
[numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,, numeratorDegreesOfFreedom, ,]
[double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,, numeratorDegreesOfFreedom, ,, denominatorDegreesOfFreedom, ,]
[public, FDistribution, (, RandomGenerator, rng, ,, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (]
[,, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[,, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, numeratorDegreesOfFreedom, <=]
[,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, numeratorDegreesOfFreedom, <=, 0, ), {, throw]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, numeratorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, numeratorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[super, (, rng, ), ;, if, (, numeratorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,]
[(, numeratorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, numeratorDegreesOfFreedom, ), ;, }, if, (]
[(, numeratorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, numeratorDegreesOfFreedom, ), ;, }, if, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, numeratorDegreesOfFreedom, ), ;, }, if, (, denominatorDegreesOfFreedom, <=]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, numeratorDegreesOfFreedom, ), ;, }, if, (, denominatorDegreesOfFreedom, <=, 0, ), {, throw]
[(, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, numeratorDegreesOfFreedom, ), ;, }, if, (, denominatorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[(, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, numeratorDegreesOfFreedom, ), ;, }, if, (, denominatorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[,, numeratorDegreesOfFreedom, ), ;, }, if, (, denominatorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,]
[}, if, (, denominatorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }]
[}, if, (, denominatorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }, this, ., numeratorDegreesOfFreedom, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }, this, ., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }, this, ., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;]
[NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }, this, ., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;, this, ., denominatorDegreesOfFreedom, =]
[LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }, this, ., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;, this, ., denominatorDegreesOfFreedom, =, denominatorDegreesOfFreedom, ;]
[DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }, this, ., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;, this, ., denominatorDegreesOfFreedom, =, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy, =]
[=, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, density, (, double, x, ), {, final, double, nhalf, =]
[=, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, density, (, double, x, ), {, final, double, nhalf, =]
[;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, density, (, double, x, ), {, final, double, nhalf, =, numeratorDegreesOfFreedom, /]
[public, double, density, (, double, x, ), {, final, double, nhalf, =, numeratorDegreesOfFreedom, /, 2, ;, final, double, mhalf, =]
[public, double, density, (, double, x, ), {, final, double, nhalf, =, numeratorDegreesOfFreedom, /, 2, ;, final, double, mhalf, =]
[density, (, double, x, ), {, final, double, nhalf, =, numeratorDegreesOfFreedom, /, 2, ;, final, double, mhalf, =, denominatorDegreesOfFreedom, /]
[final, double, nhalf, =, numeratorDegreesOfFreedom, /, 2, ;, final, double, mhalf, =, denominatorDegreesOfFreedom, /, 2, ;, final, double, logx, =]
[final, double, nhalf, =, numeratorDegreesOfFreedom, /, 2, ;, final, double, mhalf, =, denominatorDegreesOfFreedom, /, 2, ;, final, double, logx, =]
[numeratorDegreesOfFreedom, /, 2, ;, final, double, mhalf, =, denominatorDegreesOfFreedom, /, 2, ;, final, double, logx, =, FastMath, ., log, (]
[=, denominatorDegreesOfFreedom, /, 2, ;, final, double, logx, =, FastMath, ., log, (, x, ), ;, final, double, logn, =]
[=, denominatorDegreesOfFreedom, /, 2, ;, final, double, logx, =, FastMath, ., log, (, x, ), ;, final, double, logn, =]
[;, final, double, logx, =, FastMath, ., log, (, x, ), ;, final, double, logn, =, FastMath, ., log, (]
[log, (, x, ), ;, final, double, logn, =, FastMath, ., log, (, numeratorDegreesOfFreedom, ), ;, final, double, logm, =]
[log, (, x, ), ;, final, double, logn, =, FastMath, ., log, (, numeratorDegreesOfFreedom, ), ;, final, double, logm, =]
[;, final, double, logn, =, FastMath, ., log, (, numeratorDegreesOfFreedom, ), ;, final, double, logm, =, FastMath, ., log, (]
[log, (, numeratorDegreesOfFreedom, ), ;, final, double, logm, =, FastMath, ., log, (, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =]
[log, (, numeratorDegreesOfFreedom, ), ;, final, double, logm, =, FastMath, ., log, (, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =]
[;, final, double, logm, =, FastMath, ., log, (, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =, FastMath, ., log, (]
[;, final, double, logm, =, FastMath, ., log, (, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =, FastMath, ., log, (]
[;, final, double, logm, =, FastMath, ., log, (, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =, FastMath, ., log, (]
[double, logm, =, FastMath, ., log, (, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *]
[=, FastMath, ., log, (, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +]
[(, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return]
[(, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return]
[final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (]
[final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (]
[final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (]
[final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (]
[final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (]
[final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (]
[final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (]
[final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (]
[lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *]
[FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *, logn, +]
[FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *, logn, +]
[log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *]
[numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -]
[x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +]
[x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +]
[denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf, *]
[;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm, -]
[;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm, -]
[FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm, -, nhalf, *]
[exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -]
[exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -]
[nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *]
[logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -]
[logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -]
[logx, -, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (]
[logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf, ,]
[nhalf, ,, mhalf, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (]
[nhalf, ,, mhalf, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (]
[mhalf, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0, ), {]
[public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0, ), {, ret, =]
[double, ret, ;, if, (, x, <=, 0, ), {, ret, =, 0, ;, }, else, {, double, n, =]
[x, <=, 0, ), {, ret, =, 0, ;, }, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =]
[0, ), {, ret, =, 0, ;, }, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;]
[{, ret, =, 0, ;, }, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =]
[{, ret, =, 0, ;, }, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =]
[;, }, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (]
[;, }, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (]
[}, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (, (]
[}, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (, (]
[{, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (, (, n, *]
[=, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (, (, n, *, x, ), /]
[numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (, (, n, *, x, ), /, (]
[numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (, (, n, *, x, ), /, (]
[double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (, (, n, *, x, ), /, (, m, +]
[double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (, (, n, *, x, ), /, (, m, +]
[=, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (, (, n, *, x, ), /, (, m, +, n, *]
[ret, =, Beta, ., regularizedBeta, (, (, n, *, x, ), /, (, m, +, n, *, x, ), ,]
[ret, =, Beta, ., regularizedBeta, (, (, n, *, x, ), /, (, m, +, n, *, x, ), ,]
[Beta, ., regularizedBeta, (, (, n, *, x, ), /, (, m, +, n, *, x, ), ,, 0.5, *]
[regularizedBeta, (, (, n, *, x, ), /, (, m, +, n, *, x, ), ,, 0.5, *, n, ,]
[regularizedBeta, (, (, n, *, x, ), /, (, m, +, n, *, x, ), ,, 0.5, *, n, ,]
[(, n, *, x, ), /, (, m, +, n, *, x, ), ,, 0.5, *, n, ,, 0.5, *]
[/, (, m, +, n, *, x, ), ,, 0.5, *, n, ,, 0.5, *, m, ), ;, }, return]
[*, n, ,, 0.5, *, m, ), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (, ), {, return]
[ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (, ), {, return, numeratorDegreesOfFreedom, ;, }, public, double, getDenominatorDegreesOfFreedom, (, ), {, return]
[}, public, double, getDenominatorDegreesOfFreedom, (, ), {, return, denominatorDegreesOfFreedom, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, final, double, denominatorDF, =]
[return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (]
[return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (]
[;, }, public, double, getNumericalMean, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (, denominatorDF, >]
[getNumericalMean, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (, denominatorDF, >, 2, ), {, return]
[getNumericalMean, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (, denominatorDF, >, 2, ), {, return]
[), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (, denominatorDF, >, 2, ), {, return, denominatorDF, /]
[{, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (, denominatorDF, >, 2, ), {, return, denominatorDF, /, (]
[{, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (, denominatorDF, >, 2, ), {, return, denominatorDF, /, (]
[double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (, denominatorDF, >, 2, ), {, return, denominatorDF, /, (, denominatorDF, -]
[), ;, if, (, denominatorDF, >, 2, ), {, return, denominatorDF, /, (, denominatorDF, -, 2, ), ;, }, return]
[), ;, if, (, denominatorDF, >, 2, ), {, return, denominatorDF, /, (, denominatorDF, -, 2, ), ;, }, return]
[denominatorDF, -, 2, ), ;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, if, (]
[-, 2, ), ;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !]
[;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {]
[return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =]
[;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;]
[public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =]
[), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return]
[;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, denominatorDF, =]
[return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (]
[return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (]
[;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (, denominatorDF, >]
[{, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (, denominatorDF, >, 4, ), {, final, double, numeratorDF, =]
[;, if, (, denominatorDF, >, 4, ), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =]
[;, if, (, denominatorDF, >, 4, ), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =]
[(, denominatorDF, >, 4, ), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -]
[4, ), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return]
[4, ), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return]
[), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (]
[), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (]
[), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (]
[final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (, 2, *]
[double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (, 2, *, (]
[double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (, 2, *, (]
[=, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (, 2, *, (, denominatorDF, *]
[), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *]
[;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *, (]
[;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *, (]
[;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *, (]
[double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +]
[=, denominatorDF, -, 2, ;, return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -]
[;, return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /]
[return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (]
[(, 2, *, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (]
[(, 2, *, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (]
[(, 2, *, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (]
[*, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *]
[(, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (]
[(, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (]
[*, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *]
[*, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *]
[(, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (]
[(, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (]
[+, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -]
[(, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -, 4, ), ), ), ;, }, return]
[(, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -, 4, ), ), ), ;, }, return]
[-, 4, ), ), ), ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return]
[NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return]
