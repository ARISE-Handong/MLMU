[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {]
[==, null, ||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1]
[||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer]
[), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =]
[<, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, .]
[), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =]
[;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;, this, ., generator, =, generator, ;]
[), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;, this, ., generator, =, generator]
[=, optimizer, ;, this, ., starts, =, starts, ;, this, ., generator, =, generator, ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair]
[., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;, this, ., generator, =, generator, ;, }, public, ConvergenceChecker]
[;, this, ., starts, =, starts, ;, this, ., generator, =, generator, ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker]
[=, starts, ;, this, ., generator, =, generator, ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return]
[., starts, =, starts, ;, this, ., generator, =, generator, ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, )]
[;, this, ., generator, =, generator, ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, optimizer, .]
[=, generator, ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, optimizer, ., getConvergenceChecker, (, ), ;]
[., generator, =, generator, ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, optimizer, ., getConvergenceChecker, (]
[;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return, optimizer, ., getConvergenceChecker, (, ), ;, }, public]
[;, }, public, int, getMaxEvaluations, (, ), {, return, maxEvaluations, ;, }, public, int, getEvaluations, (, ), {, return, totalEvaluations]
[., getConvergenceChecker, (, ), ;, }, public, int, getMaxEvaluations, (, ), {, return, maxEvaluations, ;, }, public, int, getEvaluations, (]
[;, }, public, int, getEvaluations, (, ), {, return, totalEvaluations, ;, }, public, UnivariatePointValuePair, [, ], getOptima, (, ), {]
[;, }, public, UnivariatePointValuePair, [, ], getOptima, (, ), {, if, (, optima, ==, null, ), {, throw, new, MathIllegalStateException]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return, optima, ., clone, (, ), ;, }]
[==, null, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return, optima, ., clone, (, )]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return, optima, ., clone, (, ), ;, }]
[;, }, return, optima, ., clone, (, ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC, f]
[), ;, }, return, optima, ., clone, (, ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC]
[., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return, optima, ., clone, (, ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,]
[;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,, final, GoalType, goal, ,, final, double, min]
[., clone, (, ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,, final, GoalType, goal]
[;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,, final, GoalType, goal, ,, final, double, min]
[,, f, ,, goal, ,, min, ,, max, ,, min, +, 0.5, *, (, max, -, min, ), ), ;]
[,, goal, ,, min, ,, max, ,, min, +, 0.5, *, (, max, -, min, ), ), ;, }, public]
[,, min, ,, max, ,, min, +, 0.5, *, (, max, -, min, ), ), ;, }, public, UnivariatePointValuePair, optimize]
[,, max, ,, min, +, 0.5, *, (, max, -, min, ), ), ;, }, public, UnivariatePointValuePair, optimize, (, int]
[,, min, +, 0.5, *, (, max, -, min, ), ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,]
[), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,, final, GoalType, goal, ,, final, double]
[+, 0.5, *, (, max, -, min, ), ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC]
[), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,, final, GoalType, goal, ,, final, double]
[*, (, max, -, min, ), ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,]
[), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,, final, GoalType, goal, ,, final, double]
[), ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,, final, GoalType, goal, ,, final]
[-, min, ), ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,, final, GoalType, goal]
[), ), ;, }, public, UnivariatePointValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,, final, GoalType, goal, ,, final]
[;, optima, =, new, UnivariatePointValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;]
[=, new, UnivariatePointValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {]
[], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++, i, )]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {]
[;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {, final, double]
[;, i, <, starts, ;, ++, i, ), {, try, {, final, double, s, =, (, i, ==, 0, )]
[;, ++, i, ), {, try, {, final, double, s, =, (, i, ==, 0, ), ?, startValue, :, min]
[<, starts, ;, ++, i, ), {, try, {, final, double, s, =, (, i, ==, 0, ), ?, startValue]
[;, ++, i, ), {, try, {, final, double, s, =, (, i, ==, 0, ), ?, startValue, :, min]
[), {, try, {, final, double, s, =, (, i, ==, 0, ), ?, startValue, :, min, +, generator, .]
[), {, try, {, final, double, s, =, (, i, ==, 0, ), ?, startValue, :, min, +, generator, .]
[;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min, ,]
[?, startValue, :, min, +, generator, ., nextDouble, (, ), *, (, max, -, min, ), ;, optima, [, i]
[), ?, startValue, :, min, +, generator, ., nextDouble, (, ), *, (, max, -, min, ), ;, optima, []
[==, 0, ), ?, startValue, :, min, +, generator, ., nextDouble, (, ), *, (, max, -, min, ), ;]
[), ?, startValue, :, min, +, generator, ., nextDouble, (, ), *, (, max, -, min, ), ;, optima, []
[:, min, +, generator, ., nextDouble, (, ), *, (, max, -, min, ), ;, optima, [, i, ], =]
[;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min, ,]
[+, generator, ., nextDouble, (, ), *, (, max, -, min, ), ;, optima, [, i, ], =, optimizer, .]
[;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min, ,]
[*, (, max, -, min, ), ;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,]
[., nextDouble, (, ), *, (, max, -, min, ), ;, optima, [, i, ], =, optimizer, ., optimize, (]
[;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min, ,]
[), ;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min]
[-, min, ), ;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal]
[), ;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min]
[=, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min, ,, max, ,, s, ), ;]
[[, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min, ,, max, ,]
[], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min, ,, max, ,, s, )]
[;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =, null, ;, }]
[., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min, ,, max, ,, s, ), ;, }, catch]
[,, f, ,, goal, ,, min, ,, max, ,, s, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException]
[-, totalEvaluations, ,, f, ,, goal, ,, min, ,, max, ,, s, ), ;, }, catch, (, RuntimeException, mue, )]
[,, f, ,, goal, ,, min, ,, max, ,, s, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException]
[,, goal, ,, min, ,, max, ,, s, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue]
[,, min, ,, max, ,, s, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima]
[,, max, ,, s, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i]
[,, s, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =]
[), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =, null, ;]
[=, mue, ;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }]
[;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (]
[=, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, goal, ), ;, if, (]
[[, i, ], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, goal, )]
[], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, goal, ), ;, if]
[;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, goal, ), ;, if, (, optima, []
[+=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, goal, ), ;, if, (, optima, [, 0, ], ==]
[;, }, sortPairs, (, goal, ), ;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;]
[., getEvaluations, (, ), ;, }, sortPairs, (, goal, ), ;, if, (, optima, [, 0, ], ==, null, )]
[;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;, }, return, optima, [, 0, ]]
[), ;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;, }, return, optima, [, 0]
[), {, throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (, final, GoalType, goal]
[==, null, ), {, throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (, final]
[[, 0, ], ==, null, ), {, throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void]
[], ==, null, ), {, throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (]
[), {, throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (, final, GoalType, goal]
[;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (, final, GoalType, goal, ), {, Arrays, .]
[;, }, private, void, sortPairs, (, final, GoalType, goal, ), {, Arrays, ., sort, (, optima, ,, new, Comparator, <]
[[, 0, ], ;, }, private, void, sortPairs, (, final, GoalType, goal, ), {, Arrays, ., sort, (, optima, ,]
[], ;, }, private, void, sortPairs, (, final, GoalType, goal, ), {, Arrays, ., sort, (, optima, ,, new, Comparator]
[;, }, }]
[., sort, (, optima, ,, new, Comparator, <, UnivariatePointValuePair, >, (, ), {, public, int, compare, (, final, UnivariatePointValuePair, o1]
[,, new, Comparator, <, UnivariatePointValuePair, >, (, ), {, public, int, compare, (, final, UnivariatePointValuePair, o1, ,, final, UnivariatePointValuePair, o2]
[), ;, }, }]
[), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null]
[==, null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2]
[), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null]
[;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, final, double, v1, =, o1]
[?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, final]
[), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }]
[==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1]
[), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }]
[:, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, final, double, v1]
[;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, final, double, v1, =, o1]
[), {, return, -, 1, ;, }, final, double, v1, =, o1, ., getValue, (, ), ;, final, double, v2]
[==, null, ), {, return, -, 1, ;, }, final, double, v1, =, o1, ., getValue, (, ), ;, final]
[), {, return, -, 1, ;, }, final, double, v1, =, o1, ., getValue, (, ), ;, final, double, v2]
[;, }, final, double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (]
[;, }, final, double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (]
[;, final, double, v2, =, o2, ., getValue, (, ), ;, return, (, goal, ==, GoalType, ., MINIMIZE, ), ?]
[., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return, (, goal, ==, GoalType]
[;, return, (, goal, ==, GoalType, ., MINIMIZE, ), ?, Double, ., compare, (, v1, ,, v2, ), :, Double]
[., getValue, (, ), ;, return, (, goal, ==, GoalType, ., MINIMIZE, ), ?, Double, ., compare, (, v1, ,]
[;, }, }, ), ;, }, }]
[?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;, }]
[), ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;]
[==, GoalType, ., MINIMIZE, ), ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2]
[), ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;]
[., MINIMIZE, ), ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1]
[:, Double, ., compare, (, v2, ,, v1, ), ;, }, }, ), ;, }, }]
[., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;, }, }, )]
[,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;, }, }, ), ;, }, }]
[), :, Double, ., compare, (, v2, ,, v1, ), ;, }, }, ), ;, }, }]
[;, }, }, ), ;, }, }]
[., compare, (, v2, ,, v1, ), ;, }, }, ), ;, }, }]
[,, v1, ), ;, }, }, ), ;, }, }]
[), ;, }, }, ), ;, }, }]
