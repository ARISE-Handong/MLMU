[;, static, {, DEFAULT_FORMAT, ., getFormat, (, ), ., setMinimumFractionDigits, (, 1, ), ;, }, protected, AbstractRealMatrix, (, ), {]
[., getInstance, (, Locale, ., US, ), ;, static, {, DEFAULT_FORMAT, ., getFormat, (, ), ., setMinimumFractionDigits, (, 1, )]
[), ;, static, {, DEFAULT_FORMAT, ., getFormat, (, ), ., setMinimumFractionDigits, (, 1, ), ;, }, protected, AbstractRealMatrix, (, )]
[., US, ), ;, static, {, DEFAULT_FORMAT, ., getFormat, (, ), ., setMinimumFractionDigits, (, 1, ), ;, }, protected, AbstractRealMatrix]
[;, }, protected, AbstractRealMatrix, (, ), {, }, protected, AbstractRealMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws]
[., setMinimumFractionDigits, (, 1, ), ;, }, protected, AbstractRealMatrix, (, ), {, }, protected, AbstractRealMatrix, (, final, int, rowDimension, ,]
[., getFormat, (, ), ., setMinimumFractionDigits, (, 1, ), ;, }, protected, AbstractRealMatrix, (, ), {, }, protected, AbstractRealMatrix, (]
[), ;, }, protected, AbstractRealMatrix, (, ), {, }, protected, AbstractRealMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, )]
[), {, throw, new, NotStrictlyPositiveException, (, rowDimension, ), ;, }, if, (, columnDimension, <, 1, ), {, throw, new, NotStrictlyPositiveException]
[<, 1, ), {, throw, new, NotStrictlyPositiveException, (, rowDimension, ), ;, }, if, (, columnDimension, <, 1, ), {, throw]
[), {, throw, new, NotStrictlyPositiveException, (, rowDimension, ), ;, }, if, (, columnDimension, <, 1, ), {, throw, new, NotStrictlyPositiveException]
[;, }, if, (, columnDimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, columnDimension, ), ;, }, }, public, RealMatrix]
[), ;, }, if, (, columnDimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, columnDimension, ), ;, }, }, public]
[), {, throw, new, NotStrictlyPositiveException, (, columnDimension, ), ;, }, }, public, RealMatrix, add, (, RealMatrix, m, ), throws, MatrixDimensionMismatchException]
[<, 1, ), {, throw, new, NotStrictlyPositiveException, (, columnDimension, ), ;, }, }, public, RealMatrix, add, (, RealMatrix, m, )]
[), {, throw, new, NotStrictlyPositiveException, (, columnDimension, ), ;, }, }, public, RealMatrix, add, (, RealMatrix, m, ), throws, MatrixDimensionMismatchException]
[;, }, }, public, RealMatrix, add, (, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m]
[), ;, }, }, public, RealMatrix, add, (, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,]
[;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out]
[., checkAdditionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;]
[), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;]
[;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col]
[,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[<, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +]
[<, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, m, ., getEntry]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, m, ., getEntry]
[;, }, }, return, out, ;, }, public, RealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, .]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, m, ., getEntry, (, row, ,]
[,, col, ,, getEntry, (, row, ,, col, ), +, m, ., getEntry, (, row, ,, col, ), ), ;]
[,, getEntry, (, row, ,, col, ), +, m, ., getEntry, (, row, ,, col, ), ), ;, }, }]
[), ;, }, }, return, out, ;, }, public, RealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils]
[+, m, ., getEntry, (, row, ,, col, ), ), ;, }, }, return, out, ;, }, public, RealMatrix, subtract]
[,, col, ), +, m, ., getEntry, (, row, ,, col, ), ), ;, }, }, return, out, ;, }]
[), +, m, ., getEntry, (, row, ,, col, ), ), ;, }, }, return, out, ;, }, public, RealMatrix]
[), ;, }, }, return, out, ;, }, public, RealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils]
[., getEntry, (, row, ,, col, ), ), ;, }, }, return, out, ;, }, public, RealMatrix, subtract, (, final]
[,, col, ), ), ;, }, }, return, out, ;, }, public, RealMatrix, subtract, (, final, RealMatrix, m, ), throws]
[), ), ;, }, }, return, out, ;, }, public, RealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[;, }, public, RealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (, this, ,, m]
[;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out]
[., checkSubtractionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;]
[), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;]
[;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col]
[,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[<, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -]
[<, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -, m, ., getEntry]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -, m, ., getEntry]
[;, }, }, return, out, ;, }, public, RealMatrix, scalarAdd, (, final, double, d, ), {, final, int, rowCount, =]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -, m, ., getEntry, (, row, ,]
[,, col, ,, getEntry, (, row, ,, col, ), -, m, ., getEntry, (, row, ,, col, ), ), ;]
[,, getEntry, (, row, ,, col, ), -, m, ., getEntry, (, row, ,, col, ), ), ;, }, }]
[), ;, }, }, return, out, ;, }, public, RealMatrix, scalarAdd, (, final, double, d, ), {, final, int, rowCount]
[-, m, ., getEntry, (, row, ,, col, ), ), ;, }, }, return, out, ;, }, public, RealMatrix, scalarAdd]
[,, col, ), -, m, ., getEntry, (, row, ,, col, ), ), ;, }, }, return, out, ;, }]
[), -, m, ., getEntry, (, row, ,, col, ), ), ;, }, }, return, out, ;, }, public, RealMatrix]
[), ;, }, }, return, out, ;, }, public, RealMatrix, scalarAdd, (, final, double, d, ), {, final, int, rowCount]
[., getEntry, (, row, ,, col, ), ), ;, }, }, return, out, ;, }, public, RealMatrix, scalarAdd, (, final]
[,, col, ), ), ;, }, }, return, out, ;, }, public, RealMatrix, scalarAdd, (, final, double, d, ), {]
[), ), ;, }, }, return, out, ;, }, public, RealMatrix, scalarAdd, (, final, double, d, ), {, final, int]
[;, }, public, RealMatrix, scalarAdd, (, final, double, d, ), {, final, int, rowCount, =, getRowDimension, (, ), ;, final]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;]
[;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col]
[,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[<, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +]
[<, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, d, ), ;]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, d, ), ;]
[;, }, }, return, out, ;, }, public, RealMatrix, scalarMultiply, (, final, double, d, ), {, final, int, rowCount, =]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, d, ), ;, }, }, return]
[,, col, ,, getEntry, (, row, ,, col, ), +, d, ), ;, }, }, return, out, ;, }, public]
[,, getEntry, (, row, ,, col, ), +, d, ), ;, }, }, return, out, ;, }, public, RealMatrix, scalarMultiply]
[), ;, }, }, return, out, ;, }, public, RealMatrix, scalarMultiply, (, final, double, d, ), {, final, int, rowCount]
[+, d, ), ;, }, }, return, out, ;, }, public, RealMatrix, scalarMultiply, (, final, double, d, ), {, final]
[,, col, ), +, d, ), ;, }, }, return, out, ;, }, public, RealMatrix, scalarMultiply, (, final, double, d]
[), +, d, ), ;, }, }, return, out, ;, }, public, RealMatrix, scalarMultiply, (, final, double, d, ), {]
[), ;, }, }, return, out, ;, }, public, RealMatrix, scalarMultiply, (, final, double, d, ), {, final, int, rowCount]
[;, }, public, RealMatrix, scalarMultiply, (, final, double, d, ), {, final, int, rowCount, =, getRowDimension, (, ), ;, final]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;]
[;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col]
[,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[<, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), *]
[<, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), *]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), *, d, ), ;]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), *, d, ), ;]
[;, }, }, return, out, ;, }, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, .]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), *, d, ), ;, }, }, return]
[,, col, ,, getEntry, (, row, ,, col, ), *, d, ), ;, }, }, return, out, ;, }, public]
[,, getEntry, (, row, ,, col, ), *, d, ), ;, }, }, return, out, ;, }, public, RealMatrix, multiply]
[), ;, }, }, return, out, ;, }, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils]
[*, d, ), ;, }, }, return, out, ;, }, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException]
[,, col, ), *, d, ), ;, }, }, return, out, ;, }, public, RealMatrix, multiply, (, final, RealMatrix, m]
[), *, d, ), ;, }, }, return, out, ;, }, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws]
[), ;, }, }, return, out, ;, }, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils]
[;, }, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final]
[., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[,, m, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;]
[;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =, getColumnDimension, (, ), ;, final]
[;, final, int, nSum, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,, nCols, ), ;]
[., getColumnDimension, (, ), ;, final, int, nSum, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nRows]
[;, final, RealMatrix, out, =, createMatrix, (, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;, row]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col]
[,, nCols, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int]
[;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[<, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =]
[;, col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0]
[;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum]
[<, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i]
[;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, ++, i]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, nSum, ;, ++, i, ), {, sum, +=, getEntry, (]
[;, i, <, nSum, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, m, .]
[;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, m, ., getEntry, (, i, ,]
[<, nSum, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, m, ., getEntry, (]
[;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, m, ., getEntry, (, i, ,]
[), {, sum, +=, getEntry, (, row, ,, i, ), *, m, ., getEntry, (, i, ,, col, ), ;]
[), {, sum, +=, getEntry, (, row, ,, i, ), *, m, ., getEntry, (, i, ,, col, ), ;]
[+=, getEntry, (, row, ,, i, ), *, m, ., getEntry, (, i, ,, col, ), ;, }, out, .]
[;, }, out, ., setEntry, (, row, ,, col, ,, sum, ), ;, }, }, return, out, ;, }, public]
[*, m, ., getEntry, (, i, ,, col, ), ;, }, out, ., setEntry, (, row, ,, col, ,, sum]
[,, i, ), *, m, ., getEntry, (, i, ,, col, ), ;, }, out, ., setEntry, (, row, ,]
[), *, m, ., getEntry, (, i, ,, col, ), ;, }, out, ., setEntry, (, row, ,, col, ,]
[;, }, out, ., setEntry, (, row, ,, col, ,, sum, ), ;, }, }, return, out, ;, }, public]
[., getEntry, (, i, ,, col, ), ;, }, out, ., setEntry, (, row, ,, col, ,, sum, ), ;]
[,, col, ), ;, }, out, ., setEntry, (, row, ,, col, ,, sum, ), ;, }, }, return, out]
[), ;, }, out, ., setEntry, (, row, ,, col, ,, sum, ), ;, }, }, return, out, ;, }]
[;, }, }, return, out, ;, }, public, RealMatrix, preMultiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, return, m]
[., setEntry, (, row, ,, col, ,, sum, ), ;, }, }, return, out, ;, }, public, RealMatrix, preMultiply, (]
[,, col, ,, sum, ), ;, }, }, return, out, ;, }, public, RealMatrix, preMultiply, (, final, RealMatrix, m, )]
[,, sum, ), ;, }, }, return, out, ;, }, public, RealMatrix, preMultiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException]
[), ;, }, }, return, out, ;, }, public, RealMatrix, preMultiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, return]
[;, }, public, RealMatrix, preMultiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, return, m, ., multiply, (, this, )]
[;, }, public, RealMatrix, power, (, final, int, p, ), throws, NotPositiveException, ,, NonSquareMatrixException, {, if, (, p, <, 0]
[., multiply, (, this, ), ;, }, public, RealMatrix, power, (, final, int, p, ), throws, NotPositiveException, ,, NonSquareMatrixException, {]
[), ;, }, public, RealMatrix, power, (, final, int, p, ), throws, NotPositiveException, ,, NonSquareMatrixException, {, if, (, p, <]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_EXPONENT, ,, p, ), ;, }, if, (, !, isSquare, (, )]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_EXPONENT, ,, p, ), ;, }, if, (, !, isSquare]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_EXPONENT, ,, p, ), ;, }, if, (, !, isSquare, (, )]
[;, }, if, (, !, isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension, (]
[,, p, ), ;, }, if, (, !, isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, )]
[., NOT_POSITIVE_EXPONENT, ,, p, ), ;, }, if, (, !, isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, getRowDimension]
[), ;, }, if, (, !, isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension]
[), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, if, (, p, ==]
[), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, if, (, p, ==]
[;, }, if, (, p, ==, 0, ), {, return, MatrixUtils, ., createRealIdentityMatrix, (, this, ., getRowDimension, (, ), )]
[,, getColumnDimension, (, ), ), ;, }, if, (, p, ==, 0, ), {, return, MatrixUtils, ., createRealIdentityMatrix, (, this]
[), ;, }, if, (, p, ==, 0, ), {, return, MatrixUtils, ., createRealIdentityMatrix, (, this, ., getRowDimension, (, )]
[), {, return, MatrixUtils, ., createRealIdentityMatrix, (, this, ., getRowDimension, (, ), ), ;, }, if, (, p, ==, 1]
[==, 0, ), {, return, MatrixUtils, ., createRealIdentityMatrix, (, this, ., getRowDimension, (, ), ), ;, }, if, (, p]
[), {, return, MatrixUtils, ., createRealIdentityMatrix, (, this, ., getRowDimension, (, ), ), ;, }, if, (, p, ==, 1]
[;, }, if, (, p, ==, 1, ), {, return, this, ., copy, (, ), ;, }, final, int, power]
[., createRealIdentityMatrix, (, this, ., getRowDimension, (, ), ), ;, }, if, (, p, ==, 1, ), {, return, this]
[), ;, }, if, (, p, ==, 1, ), {, return, this, ., copy, (, ), ;, }, final, int]
[., getRowDimension, (, ), ), ;, }, if, (, p, ==, 1, ), {, return, this, ., copy, (, )]
[), {, return, this, ., copy, (, ), ;, }, final, int, power, =, p, -, 1, ;, final, char]
[==, 1, ), {, return, this, ., copy, (, ), ;, }, final, int, power, =, p, -, 1, ;]
[), {, return, this, ., copy, (, ), ;, }, final, int, power, =, p, -, 1, ;, final, char]
[;, }, final, int, power, =, p, -, 1, ;, final, char, [, ], binaryRepresentation, =, Integer, ., toBinaryString, (]
[., copy, (, ), ;, }, final, int, power, =, p, -, 1, ;, final, char, [, ], binaryRepresentation, =]
[;, final, char, [, ], binaryRepresentation, =, Integer, ., toBinaryString, (, power, ), ., toCharArray, (, ), ;, final, ArrayList]
[-, 1, ;, final, char, [, ], binaryRepresentation, =, Integer, ., toBinaryString, (, power, ), ., toCharArray, (, ), ;]
[;, final, char, [, ], binaryRepresentation, =, Integer, ., toBinaryString, (, power, ), ., toCharArray, (, ), ;, final, ArrayList]
[;, final, ArrayList, <, Integer, >, nonZeroPositions, =, new, ArrayList, <, Integer, >, (, ), ;, int, maxI, =, -]
[., toCharArray, (, ), ;, final, ArrayList, <, Integer, >, nonZeroPositions, =, new, ArrayList, <, Integer, >, (, ), ;]
[., toBinaryString, (, power, ), ., toCharArray, (, ), ;, final, ArrayList, <, Integer, >, nonZeroPositions, =, new, ArrayList, <]
[), ., toCharArray, (, ), ;, final, ArrayList, <, Integer, >, nonZeroPositions, =, new, ArrayList, <, Integer, >, (, )]
[;, int, maxI, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, binaryRepresentation, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, if, (]
[;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', )]
[;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation]
[<, binaryRepresentation, ., length, ;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final]
[;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation]
[., length, ;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos]
[), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -]
[), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -]
[), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add, (, pos, )]
[==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add, (]
[[, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions]
[], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add]
[), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add, (, pos, )]
[;, nonZeroPositions, ., add, (, pos, ), ;, if, (, maxI, ==, -, 1, ), {, maxI, =, pos, ;]
[-, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, if, (, maxI, ==, -, 1, ), {, maxI, =]
[-, i, -, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, if, (, maxI, ==, -, 1, ), {]
[., length, -, i, -, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, if, (, maxI, ==, -, 1]
[-, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, if, (, maxI, ==, -, 1, ), {, maxI, =]
[;, nonZeroPositions, ., add, (, pos, ), ;, if, (, maxI, ==, -, 1, ), {, maxI, =, pos, ;]
[;, if, (, maxI, ==, -, 1, ), {, maxI, =, pos, ;, }, }, }, RealMatrix, [, ], results]
[., add, (, pos, ), ;, if, (, maxI, ==, -, 1, ), {, maxI, =, pos, ;, }, }]
[), ;, if, (, maxI, ==, -, 1, ), {, maxI, =, pos, ;, }, }, }, RealMatrix, [, ]]
[), {, maxI, =, pos, ;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, [, maxI, +, 1]
[==, -, 1, ), {, maxI, =, pos, ;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, []
[), {, maxI, =, pos, ;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, [, maxI, +, 1]
[), {, maxI, =, pos, ;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, [, maxI, +, 1]
[=, pos, ;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, [, maxI, +, 1, ], ;, results]
[;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, [, maxI, +, 1, ], ;, results, [, 0]
[;, results, [, 0, ], =, this, ., copy, (, ), ;, for, (, int, i, =, 1, ;, i]
[], ;, results, [, 0, ], =, this, ., copy, (, ), ;, for, (, int, i, =, 1, ;]
[+, 1, ], ;, results, [, 0, ], =, this, ., copy, (, ), ;, for, (, int, i, =]
[], ;, results, [, 0, ], =, this, ., copy, (, ), ;, for, (, int, i, =, 1, ;]
[=, this, ., copy, (, ), ;, for, (, int, i, =, 1, ;, i, <=, maxI, ;, ++, i]
[[, 0, ], =, this, ., copy, (, ), ;, for, (, int, i, =, 1, ;, i, <=, maxI]
[], =, this, ., copy, (, ), ;, for, (, int, i, =, 1, ;, i, <=, maxI, ;, ++]
[;, for, (, int, i, =, 1, ;, i, <=, maxI, ;, ++, i, ), {, results, [, i, ]]
[., copy, (, ), ;, for, (, int, i, =, 1, ;, i, <=, maxI, ;, ++, i, ), {]
[;, i, <=, maxI, ;, ++, i, ), {, results, [, i, ], =, results, [, i, -, 1, ]]
[;, ++, i, ), {, results, [, i, ], =, results, [, i, -, 1, ], ., multiply, (, results]
[<=, maxI, ;, ++, i, ), {, results, [, i, ], =, results, [, i, -, 1, ], ., multiply]
[;, ++, i, ), {, results, [, i, ], =, results, [, i, -, 1, ], ., multiply, (, results]
[), {, results, [, i, ], =, results, [, i, -, 1, ], ., multiply, (, results, [, i, -]
[), {, results, [, i, ], =, results, [, i, -, 1, ], ., multiply, (, results, [, i, -]
[=, results, [, i, -, 1, ], ., multiply, (, results, [, i, -, 1, ], ), ;, }, RealMatrix]
[[, i, ], =, results, [, i, -, 1, ], ., multiply, (, results, [, i, -, 1, ], )]
[], =, results, [, i, -, 1, ], ., multiply, (, results, [, i, -, 1, ], ), ;, }]
[;, }, RealMatrix, result, =, this, ., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, ), {, result]
[., multiply, (, results, [, i, -, 1, ], ), ;, }, RealMatrix, result, =, this, ., copy, (, )]
[[, i, -, 1, ], ., multiply, (, results, [, i, -, 1, ], ), ;, }, RealMatrix, result, =]
[], ., multiply, (, results, [, i, -, 1, ], ), ;, }, RealMatrix, result, =, this, ., copy, (]
[-, 1, ], ., multiply, (, results, [, i, -, 1, ], ), ;, }, RealMatrix, result, =, this, .]
[], ., multiply, (, results, [, i, -, 1, ], ), ;, }, RealMatrix, result, =, this, ., copy, (]
[), ;, }, RealMatrix, result, =, this, ., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, ), {]
[[, i, -, 1, ], ), ;, }, RealMatrix, result, =, this, ., copy, (, ), ;, for, (, Integer]
[], ), ;, }, RealMatrix, result, =, this, ., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, )]
[-, 1, ], ), ;, }, RealMatrix, result, =, this, ., copy, (, ), ;, for, (, Integer, i, :]
[], ), ;, }, RealMatrix, result, =, this, ., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, )]
[;, for, (, Integer, i, :, nonZeroPositions, ), {, result, =, result, ., multiply, (, results, [, i, ], )]
[., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, ), {, result, =, result, ., multiply, (, results]
[), {, result, =, result, ., multiply, (, results, [, i, ], ), ;, }, return, result, ;, }, public]
[=, result, ., multiply, (, results, [, i, ], ), ;, }, return, result, ;, }, public, double, [, ]]
[;, }, return, result, ;, }, public, double, [, ], [, ], getData, (, ), {, final, double, [, ]]
[., multiply, (, results, [, i, ], ), ;, }, return, result, ;, }, public, double, [, ], [, ]]
[), ;, }, return, result, ;, }, public, double, [, ], [, ], getData, (, ), {, final, double, []
[[, i, ], ), ;, }, return, result, ;, }, public, double, [, ], [, ], getData, (, ), {]
[], ), ;, }, return, result, ;, }, public, double, [, ], [, ], getData, (, ), {, final, double]
[;, }, public, double, [, ], [, ], getData, (, ), {, final, double, [, ], [, ], data, =]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double]
[], [, getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i]
[;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j]
[<, data, ., length, ;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j]
[., length, ;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (]
[), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, []
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, )]
[], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI]
[;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,]
[;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,, j, ), ;, }, }, return]
[<, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,, j, )]
[;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,, j, ), ;, }, }, return]
[., length, ;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,, j, ), ;, }]
[), {, dataI, [, j, ], =, getEntry, (, i, ,, j, ), ;, }, }, return, data, ;, }]
[), {, dataI, [, j, ], =, getEntry, (, i, ,, j, ), ;, }, }, return, data, ;, }]
[=, getEntry, (, i, ,, j, ), ;, }, }, return, data, ;, }, public, double, getNorm, (, ), {]
[[, j, ], =, getEntry, (, i, ,, j, ), ;, }, }, return, data, ;, }, public, double, getNorm]
[], =, getEntry, (, i, ,, j, ), ;, }, }, return, data, ;, }, public, double, getNorm, (, )]
[;, }, }, return, data, ;, }, public, double, getNorm, (, ), {, return, walkInColumnOrder, (, new, RealMatrixPreservingVisitor, (, )]
[,, j, ), ;, }, }, return, data, ;, }, public, double, getNorm, (, ), {, return, walkInColumnOrder, (, new]
[), ;, }, }, return, data, ;, }, public, double, getNorm, (, ), {, return, walkInColumnOrder, (, new, RealMatrixPreservingVisitor, (]
[;, }, public, double, getNorm, (, ), {, return, walkInColumnOrder, (, new, RealMatrixPreservingVisitor, (, ), {, private, double, endRow, ;]
[;, }, public, double, getFrobeniusNorm, (, ), {, return, walkInOptimizedOrder, (, new, RealMatrixPreservingVisitor, (, ), {, private, double, sum, ;]
[), ;, }, public, double, getFrobeniusNorm, (, ), {, return, walkInOptimizedOrder, (, new, RealMatrixPreservingVisitor, (, ), {, private, double, sum]
[=, endRow, ;, columnSum, =, 0, ;, maxColSum, =, 0, ;, }, public, void, visit, (, final, int, row, ,]
[., endRow, =, endRow, ;, columnSum, =, 0, ;, maxColSum, =, 0, ;, }, public, void, visit, (, final, int]
[;, columnSum, =, 0, ;, maxColSum, =, 0, ;, }, public, void, visit, (, final, int, row, ,, final, int]
[=, 0, ;, maxColSum, =, 0, ;, }, public, void, visit, (, final, int, row, ,, final, int, column, ,]
[;, maxColSum, =, 0, ;, }, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double]
[=, 0, ;, }, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, )]
[;, }, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, columnSum]
[+=, FastMath, ., abs, (, value, ), ;, if, (, row, ==, endRow, ), {, maxColSum, =, FastMath, ., max]
[;, if, (, row, ==, endRow, ), {, maxColSum, =, FastMath, ., max, (, maxColSum, ,, columnSum, ), ;, columnSum]
[., abs, (, value, ), ;, if, (, row, ==, endRow, ), {, maxColSum, =, FastMath, ., max, (, maxColSum]
[), ;, if, (, row, ==, endRow, ), {, maxColSum, =, FastMath, ., max, (, maxColSum, ,, columnSum, ), ;]
[), {, maxColSum, =, FastMath, ., max, (, maxColSum, ,, columnSum, ), ;, columnSum, =, 0, ;, }, }, public]
[==, endRow, ), {, maxColSum, =, FastMath, ., max, (, maxColSum, ,, columnSum, ), ;, columnSum, =, 0, ;, }]
[), {, maxColSum, =, FastMath, ., max, (, maxColSum, ,, columnSum, ), ;, columnSum, =, 0, ;, }, }, public]
[=, FastMath, ., max, (, maxColSum, ,, columnSum, ), ;, columnSum, =, 0, ;, }, }, public, double, end, (]
[;, columnSum, =, 0, ;, }, }, public, double, end, (, ), {, return, maxColSum, ;, }, }, ), ;]
[., max, (, maxColSum, ,, columnSum, ), ;, columnSum, =, 0, ;, }, }, public, double, end, (, ), {]
[,, columnSum, ), ;, columnSum, =, 0, ;, }, }, public, double, end, (, ), {, return, maxColSum, ;, }]
[), ;, columnSum, =, 0, ;, }, }, public, double, end, (, ), {, return, maxColSum, ;, }, }, )]
[=, 0, ;, }, }, public, double, end, (, ), {, return, maxColSum, ;, }, }, ), ;, }, public]
[;, }, }, public, double, end, (, ), {, return, maxColSum, ;, }, }, ), ;, }, public, double, getFrobeniusNorm]
[;, }, }, ), ;, }, public, double, getFrobeniusNorm, (, ), {, return, walkInOptimizedOrder, (, new, RealMatrixPreservingVisitor, (, ), {]
[;, }, public, RealMatrix, getSubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int]
[), ;, }, public, RealMatrix, getSubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final]
[=, 0, ;, }, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, )]
[;, }, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, sum]
[+=, value, *, value, ;, }, public, double, end, (, ), {, return, FastMath, ., sqrt, (, sum, ), ;]
[;, }, public, double, end, (, ), {, return, FastMath, ., sqrt, (, sum, ), ;, }, }, ), ;]
[*, value, ;, }, public, double, end, (, ), {, return, FastMath, ., sqrt, (, sum, ), ;, }, }]
[;, }, public, double, end, (, ), {, return, FastMath, ., sqrt, (, sum, ), ;, }, }, ), ;]
[;, }, }, ), ;, }, public, RealMatrix, getSubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final, int]
[., sqrt, (, sum, ), ;, }, }, ), ;, }, public, RealMatrix, getSubMatrix, (, final, int, startRow, ,, final]
[), ;, }, }, ), ;, }, public, RealMatrix, getSubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final]
[;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,]
[,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,, endColumn, -]
[,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +]
[), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, )]
[;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for, (, int, j]
[,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[+, 1, ,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow]
[-, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i]
[+, 1, ,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow]
[,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for, (, int]
[+, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for]
[-, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, )]
[+, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for]
[), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for, (, int]
[;, i, <=, endRow, ;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;]
[;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[<=, endRow, ;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j]
[;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry]
[), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry]
[;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn]
[;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i]
[<=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry]
[;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i]
[), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i, ,, j, )]
[), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i, ,, j, )]
[;, }, }, return, subMatrix, ;, }, public, RealMatrix, getSubMatrix, (, final, int, [, ], selectedRows, ,, final, int, []
[., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i, ,, j, ), ), ;, }]
[,, j, -, startColumn, ,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;, }, public]
[-, startRow, ,, j, -, startColumn, ,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;]
[,, j, -, startColumn, ,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;, }, public]
[,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;, }, public, RealMatrix, getSubMatrix, (, final]
[-, startColumn, ,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;, }, public, RealMatrix, getSubMatrix]
[,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;, }, public, RealMatrix, getSubMatrix, (, final]
[), ;, }, }, return, subMatrix, ;, }, public, RealMatrix, getSubMatrix, (, final, int, [, ], selectedRows, ,, final, int]
[,, j, ), ), ;, }, }, return, subMatrix, ;, }, public, RealMatrix, getSubMatrix, (, final, int, [, ], selectedRows]
[), ), ;, }, }, return, subMatrix, ;, }, public, RealMatrix, getSubMatrix, (, final, int, [, ], selectedRows, ,, final]
[;, }, public, RealMatrix, getSubMatrix, (, final, int, [, ], selectedRows, ,, final, int, [, ], selectedColumns, ), throws, NullArgumentException]
[;, final, RealMatrix, subMatrix, =, createMatrix, (, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, subMatrix, ., walkInOptimizedOrder, (]
[., checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, selectedRows, ., length, ,]
[,, selectedRows, ,, selectedColumns, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, selectedRows, ., length, ,, selectedColumns, ., length, )]
[,, selectedColumns, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, subMatrix]
[), ;, final, RealMatrix, subMatrix, =, createMatrix, (, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, subMatrix, ., walkInOptimizedOrder]
[;, subMatrix, ., walkInOptimizedOrder, (, new, DefaultRealMatrixChangingVisitor, (, ), {, @, Override, public, double, visit, (, final, int, row, ,]
[,, selectedColumns, ., length, ), ;, subMatrix, ., walkInOptimizedOrder, (, new, DefaultRealMatrixChangingVisitor, (, ), {, @, Override, public, double, visit]
[., length, ,, selectedColumns, ., length, ), ;, subMatrix, ., walkInOptimizedOrder, (, new, DefaultRealMatrixChangingVisitor, (, ), {, @, Override, public]
[), ;, subMatrix, ., walkInOptimizedOrder, (, new, DefaultRealMatrixChangingVisitor, (, ), {, @, Override, public, double, visit, (, final, int, row]
[., length, ), ;, subMatrix, ., walkInOptimizedOrder, (, new, DefaultRealMatrixChangingVisitor, (, ), {, @, Override, public, double, visit, (, final]
[;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn]
[., walkInOptimizedOrder, (, new, DefaultRealMatrixChangingVisitor, (, ), {, @, Override, public, double, visit, (, final, int, row, ,, final, int]
[), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final, int]
[;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final, int, endRow]
[,, selectedColumns, [, column, ], ), ;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final]
[[, row, ], ,, selectedColumns, [, column, ], ), ;, }, }, ), ;, return, subMatrix, ;, }, public, void]
[], ,, selectedColumns, [, column, ], ), ;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (]
[), ;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final, int]
[[, column, ], ), ;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow]
[], ), ;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final]
[;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int]
[;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =, endRow, +]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int]
[,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =]
[,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +]
[), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -]
[;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, )]
[-, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <]
[+, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, .]
[-, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <]
[;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, )]
[;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length, <, columnsCount]
[-, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length]
[+, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ]]
[-, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length]
[;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length, <, columnsCount]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,, columnsCount]
[||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length]
[), ||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, .]
[<, rowsCount, ), ||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new]
[), ||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, .]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,, columnsCount]
[), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,]
[<, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,]
[., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], .]
[[, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, []
[], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ]]
[), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,]
[;, }, for, (, int, i, =, 1, ;, i, <, rowsCount, ;, i, ++, ), {, if, (, destination]
[,, destination, [, 0, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i, =, 1]
[., length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i]
[,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i, =, 1, ;, i, <, rowsCount, ;, i, ++]
[., length, ,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i, =, 1, ;, i, <, rowsCount, ;]
[[, 0, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i, =, 1, ;, i]
[], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i, =, 1, ;, i, <, rowsCount]
[,, columnsCount, ), ;, }, for, (, int, i, =, 1, ;, i, <, rowsCount, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 1, ;, i, <, rowsCount, ;, i, ++, ), {, if, (]
[;, i, <, rowsCount, ;, i, ++, ), {, if, (, destination, [, i, ], ., length, <, columnsCount, )]
[;, i, ++, ), {, if, (, destination, [, i, ], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException]
[<, rowsCount, ;, i, ++, ), {, if, (, destination, [, i, ], ., length, <, columnsCount, ), {, throw]
[;, i, ++, ), {, if, (, destination, [, i, ], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException]
[), {, if, (, destination, [, i, ], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination, .]
[++, ), {, if, (, destination, [, i, ], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, i, ], ., length, ,, rowsCount, ,, columnsCount]
[<, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, i, ], ., length, ,, rowsCount]
[., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, i, ], ., length]
[[, i, ], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, i]
[], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, i, ], .]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, i, ], ., length, ,, rowsCount, ,, columnsCount]
[;, }, }, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {, private, int, startRow, ;, private, int, startColumn, ;, @, Override]
[,, destination, [, i, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, }, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (]
[., length, ,, destination, [, i, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, }, walkInOptimizedOrder, (, new]
[,, rowsCount, ,, columnsCount, ), ;, }, }, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {, private, int, startRow, ;, private]
[., length, ,, rowsCount, ,, columnsCount, ), ;, }, }, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {, private, int, startRow]
[[, i, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, }, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {]
[], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, }, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {, private, int]
[,, columnsCount, ), ;, }, }, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {, private, int, startRow, ;, private, int, startColumn]
[), ;, }, }, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {, private, int, startRow, ;, private, int, startColumn, ;, @]
[;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,, int, [, ], selectedColumns, ,, double, [, ], []
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,]
[=, startRow, ;, this, ., startColumn, =, startColumn, ;, }, @, Override, public, void, visit, (, final, int, row, ,]
[., startRow, =, startRow, ;, this, ., startColumn, =, startColumn, ;, }, @, Override, public, void, visit, (, final, int]
[;, this, ., startColumn, =, startColumn, ;, }, @, Override, public, void, visit, (, final, int, row, ,, final, int]
[=, startColumn, ;, }, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double]
[., startColumn, =, startColumn, ;, }, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,]
[;, }, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, )]
[=, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix, (]
[[, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[[, row, -, startRow, ], [, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,]
[], [, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, )]
[-, startRow, ], [, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,]
[], [, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, )]
[], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix]
[-, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public]
[], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix]
[;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix, (, int, []
[,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,, int, []
[,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,, int, [, ], selectedColumns]
[,, endColumn, ), ;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,, int, [, ], selectedColumns, ,, double]
[), ;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,, int, [, ], selectedColumns, ,, double, [, ]]
[;, final, int, nCols, =, selectedColumns, ., length, ;, if, (, (, destination, ., length, <, selectedRows, ., length, )]
[., checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, int, nCols, =, selectedColumns, ., length, ;, if, (]
[,, selectedRows, ,, selectedColumns, ), ;, final, int, nCols, =, selectedColumns, ., length, ;, if, (, (, destination, ., length]
[,, selectedColumns, ), ;, final, int, nCols, =, selectedColumns, ., length, ;, if, (, (, destination, ., length, <, selectedRows]
[), ;, final, int, nCols, =, selectedColumns, ., length, ;, if, (, (, destination, ., length, <, selectedRows, ., length]
[;, if, (, (, destination, ., length, <, selectedRows, ., length, ), ||, (, destination, [, 0, ], ., length]
[., length, ;, if, (, (, destination, ., length, <, selectedRows, ., length, ), ||, (, destination, [, 0, ]]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, selectedRows, ., length]
[||, (, destination, [, 0, ], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length]
[), ||, (, destination, [, 0, ], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, .]
[<, selectedRows, ., length, ), ||, (, destination, [, 0, ], ., length, <, nCols, ), ), {, throw, new]
[., length, <, selectedRows, ., length, ), ||, (, destination, [, 0, ], ., length, <, nCols, ), ), {]
[), ||, (, destination, [, 0, ], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, .]
[., length, ), ||, (, destination, [, 0, ], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, selectedRows, ., length]
[), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, selectedRows, .]
[<, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,]
[., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], .]
[[, 0, ], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, []
[], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ]]
[), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, selectedRows, .]
[;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, ., length, ;, i, ++, ), {, final]
[,, destination, [, 0, ], ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (]
[., length, ,, destination, [, 0, ], ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }]
[,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;]
[[, 0, ], ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i]
[], ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0]
[,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, ., length, ;]
[., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, .]
[), ;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, ., length, ;, i, ++, ), {]
[., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, ., length, ;, i, ++]
[;, i, <, selectedRows, ., length, ;, i, ++, ), {, final, double, [, ], destinationI, =, destination, [, i]
[;, i, ++, ), {, final, double, [, ], destinationI, =, destination, [, i, ], ;, if, (, destinationI, .]
[<, selectedRows, ., length, ;, i, ++, ), {, final, double, [, ], destinationI, =, destination, [, i, ], ;]
[;, i, ++, ), {, final, double, [, ], destinationI, =, destination, [, i, ], ;, if, (, destinationI, .]
[., length, ;, i, ++, ), {, final, double, [, ], destinationI, =, destination, [, i, ], ;, if, (]
[), {, final, double, [, ], destinationI, =, destination, [, i, ], ;, if, (, destinationI, ., length, <, nCols]
[++, ), {, final, double, [, ], destinationI, =, destination, [, i, ], ;, if, (, destinationI, ., length, <]
[;, if, (, destinationI, ., length, <, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destinationI, .]
[[, i, ], ;, if, (, destinationI, ., length, <, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length]
[], ;, if, (, destinationI, ., length, <, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destinationI]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destinationI, ., length, ,, selectedRows, ., length, ,, selectedColumns, .]
[<, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destinationI, ., length, ,, selectedRows, ., length, ,]
[., length, <, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destinationI, ., length, ,, selectedRows, .]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destinationI, ., length, ,, selectedRows, ., length, ,, selectedColumns, .]
[;, }, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;, j, ++, ), {, destinationI]
[,, destinationI, ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, j, =]
[., length, ,, destinationI, ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int]
[,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, j, =, 0, ;, j, <]
[., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, j, =, 0, ;]
[,, selectedColumns, ., length, ), ;, }, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;]
[., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, j, =, 0, ;, j, <, selectedColumns, .]
[), ;, }, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;, j, ++, ), {]
[., length, ), ;, }, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;, j, ++]
[;, j, <, selectedColumns, ., length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, []
[;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j]
[<, selectedColumns, ., length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ]]
[;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j]
[., length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns]
[), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j, ], ), ;]
[++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j, ], )]
[=, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j, ], ), ;, }, }, }, public, void, setSubMatrix]
[[, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j, ], ), ;, }, }, }]
[], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j, ], ), ;, }, }, }, public, void]
[;, }, }, }, public, void, setSubMatrix, (, final, double, [, ], [, ], subMatrix, ,, final, int, row, ,]
[,, selectedColumns, [, j, ], ), ;, }, }, }, public, void, setSubMatrix, (, final, double, [, ], [, ]]
[[, i, ], ,, selectedColumns, [, j, ], ), ;, }, }, }, public, void, setSubMatrix, (, final, double, []
[], ,, selectedColumns, [, j, ], ), ;, }, }, }, public, void, setSubMatrix, (, final, double, [, ], []
[), ;, }, }, }, public, void, setSubMatrix, (, final, double, [, ], [, ], subMatrix, ,, final, int, row]
[[, j, ], ), ;, }, }, }, public, void, setSubMatrix, (, final, double, [, ], [, ], subMatrix, ,]
[], ), ;, }, }, }, public, void, setSubMatrix, (, final, double, [, ], [, ], subMatrix, ,, final, int]
[;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, )]
[), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException]
[;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int]
[., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ]]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, []
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ]]
[;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {]
[), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, )]
[., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==]
[;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (]
[., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }]
[[, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN]
[], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r]
[;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++, r, ), {, if, (, subMatrix]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++, r, ), {, if, (]
[., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++, r, ), {]
[;, r, <, nRows, ;, ++, r, ), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, )]
[;, ++, r, ), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[<, nRows, ;, ++, r, ), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw]
[;, ++, r, ), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;, }, }, MatrixUtils, .]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;, }, }]
[., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;]
[[, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], .]
[], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, )]
[), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;, }, }, MatrixUtils, .]
[;, }, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, )]
[,, subMatrix, [, r, ], ., length, ), ;, }, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[), ;, }, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column]
[., length, ), ;, }, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this]
[[, r, ], ., length, ), ;, }, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, .]
[], ., length, ), ;, }, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (]
[;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -]
[., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex]
[,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows]
[), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row]
[;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,]
[., checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -, 1, )]
[,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex]
[), ;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this]
[;, MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0]
[., checkRowIndex, (, this, ,, nRows, +, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +]
[,, nRows, +, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +, column, -, 1, )]
[), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +, column, -, 1, ), ;, for, (, int, i, =]
[-, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +, column, -, 1, ), ;, for, (, int]
[+, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +, column, -, 1, ), ;, for]
[-, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +, column, -, 1, ), ;, for, (, int]
[), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +, column, -, 1, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for, (, int, j]
[., checkColumnIndex, (, this, ,, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;, i]
[,, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for, (, int]
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for]
[+, column, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, )]
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for]
[), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for, (, int]
[;, i, <, nRows, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {]
[<, nRows, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row]
[), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row]
[;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix]
[;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, [, i, ], []
[<, nCols, ;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, [, i]
[;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, [, i, ], []
[), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, [, i, ], [, j, ], )]
[), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, [, i, ], [, j, ], )]
[;, }, }, }, public, RealMatrix, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this]
[,, column, +, j, ,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public, RealMatrix, getRowMatrix]
[+, i, ,, column, +, j, ,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public]
[,, column, +, j, ,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public, RealMatrix, getRowMatrix]
[,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public, RealMatrix, getRowMatrix, (, final, int, row]
[+, j, ,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public, RealMatrix, getRowMatrix, (, final]
[,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public, RealMatrix, getRowMatrix, (, final, int, row]
[), ;, }, }, }, public, RealMatrix, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (]
[[, j, ], ), ;, }, }, }, public, RealMatrix, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {, MatrixUtils]
[[, i, ], [, j, ], ), ;, }, }, }, public, RealMatrix, getRowMatrix, (, final, int, row, ), throws]
[], [, j, ], ), ;, }, }, }, public, RealMatrix, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {]
[], ), ;, }, }, }, public, RealMatrix, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, 1, ,, nCols, ), ;]
[., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =]
[,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, 1, ,]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, 1, ,, nCols, )]
[;, final, RealMatrix, out, =, createMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, ., setEntry, (]
[,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out]
[), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, ., setEntry]
[;, i, <, nCols, ;, ++, i, ), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row]
[;, ++, i, ), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i, ), )]
[<, nCols, ;, ++, i, ), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i]
[;, ++, i, ), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i, ), )]
[), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i, ), ), ;, }, return]
[), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i, ), ), ;, }, return]
[;, }, return, out, ;, }, public, void, setRowMatrix, (, final, int, row, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException]
[., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i, ), ), ;, }, return, out, ;, }]
[,, i, ,, getEntry, (, row, ,, i, ), ), ;, }, return, out, ;, }, public, void, setRowMatrix, (]
[,, getEntry, (, row, ,, i, ), ), ;, }, return, out, ;, }, public, void, setRowMatrix, (, final, int]
[), ;, }, return, out, ;, }, public, void, setRowMatrix, (, final, int, row, ,, final, RealMatrix, matrix, ), throws]
[,, i, ), ), ;, }, return, out, ;, }, public, void, setRowMatrix, (, final, int, row, ,, final, RealMatrix]
[), ), ;, }, return, out, ;, }, public, void, setRowMatrix, (, final, int, row, ,, final, RealMatrix, matrix, )]
[;, }, public, void, setRowMatrix, (, final, int, row, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, )]
[., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix]
[,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, )]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1]
[;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,]
[||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[!=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix]
[., getRowDimension, (, ), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1]
[!=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, )]
[., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1]
[;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row]
[,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;]
[., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int]
[,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i]
[., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (]
[;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0, ,, i, ), )]
[<, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0, ,, i]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0, ,, i, ), )]
[), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0, ,, i, ), ), ;, }, }]
[), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0, ,, i, ), ), ;, }, }]
[;, }, }, public, RealMatrix, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkColumnIndex, (, this, ,]
[,, i, ,, matrix, ., getEntry, (, 0, ,, i, ), ), ;, }, }, public, RealMatrix, getColumnMatrix, (, final]
[,, matrix, ., getEntry, (, 0, ,, i, ), ), ;, }, }, public, RealMatrix, getColumnMatrix, (, final, int, column]
[), ;, }, }, public, RealMatrix, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkColumnIndex, (, this]
[., getEntry, (, 0, ,, i, ), ), ;, }, }, public, RealMatrix, getColumnMatrix, (, final, int, column, ), throws]
[,, i, ), ), ;, }, }, public, RealMatrix, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, .]
[), ), ;, }, }, public, RealMatrix, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkColumnIndex, (]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,, 1, ), ;]
[., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, RealMatrix, out, =]
[,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,, 1, )]
[;, final, RealMatrix, out, =, createMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, ., setEntry, (]
[,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out]
[), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, ., setEntry]
[;, i, <, nRows, ;, ++, i, ), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i]
[;, ++, i, ), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column, ), )]
[<, nRows, ;, ++, i, ), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column]
[;, ++, i, ), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column, ), )]
[), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column, ), ), ;, }, return]
[), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column, ), ), ;, }, return]
[;, }, return, out, ;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException]
[., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column, ), ), ;, }, return, out, ;, }]
[,, 0, ,, getEntry, (, i, ,, column, ), ), ;, }, return, out, ;, }, public, void, setColumnMatrix, (]
[,, getEntry, (, i, ,, column, ), ), ;, }, return, out, ;, }, public, void, setColumnMatrix, (, final, int]
[), ;, }, return, out, ;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, RealMatrix, matrix, ), throws]
[,, column, ), ), ;, }, return, out, ;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, RealMatrix]
[), ), ;, }, return, out, ;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, RealMatrix, matrix, )]
[;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils]
[;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, )]
[., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix]
[,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, )]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows]
[;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,]
[||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[!=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix]
[., getRowDimension, (, ), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows]
[!=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, )]
[., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows]
[;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i]
[,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, for, (, int]
[,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (]
[;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i, ,, 0, ), )]
[<, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i, ,, 0]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i, ,, 0, ), )]
[), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i, ,, 0, ), ), ;, }, }]
[), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i, ,, 0, ), ), ;, }, }]
[;, }, }, public, RealVector, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (, getRow, (]
[,, column, ,, matrix, ., getEntry, (, i, ,, 0, ), ), ;, }, }, public, RealVector, getRowVector, (, final]
[,, matrix, ., getEntry, (, i, ,, 0, ), ), ;, }, }, public, RealVector, getRowVector, (, final, int, row]
[), ;, }, }, public, RealVector, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (, getRow]
[., getEntry, (, i, ,, 0, ), ), ;, }, }, public, RealVector, getRowVector, (, final, int, row, ), throws]
[,, 0, ), ), ;, }, }, public, RealVector, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, return, new]
[), ), ;, }, }, public, RealVector, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (]
[;, }, public, void, setRowVector, (, final, int, row, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils]
[,, false, ), ;, }, public, void, setRowVector, (, final, int, row, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,]
[), ,, false, ), ;, }, public, void, setRowVector, (, final, int, row, ,, final, RealVector, vector, ), throws, OutOfRangeException]
[), ;, }, public, void, setRowVector, (, final, int, row, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nCols, ), {]
[., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, vector, .]
[,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nCols, )]
[;, if, (, vector, ., getDimension, (, ), !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, .]
[), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, ., getDimension, (, ), ,, 1, ,, nCols, ), ;, }]
[!=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, ., getDimension, (, ), ,, 1, ,, nCols, )]
[., getDimension, (, ), !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, ., getDimension, (, ), ,]
[), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, ., getDimension, (, ), ,, 1, ,, nCols, ), ;, }]
[;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row]
[,, vector, ., getDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;]
[,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i]
[., getDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (]
[;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i, ), ), ;, }]
[<, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i, ), )]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i, ), ), ;, }]
[), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, RealVector]
[), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, RealVector]
[;, }, }, public, RealVector, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (, getColumn, (]
[,, i, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, RealVector, getColumnVector, (, final, int, column]
[,, vector, ., getEntry, (, i, ), ), ;, }, }, public, RealVector, getColumnVector, (, final, int, column, ), throws]
[), ;, }, }, public, RealVector, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (, getColumn]
[., getEntry, (, i, ), ), ;, }, }, public, RealVector, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {]
[), ), ;, }, }, public, RealVector, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (]
[;, }, public, void, setColumnVector, (, final, int, column, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils]
[,, false, ), ;, }, public, void, setColumnVector, (, final, int, column, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,]
[), ,, false, ), ;, }, public, void, setColumnVector, (, final, int, column, ,, final, RealVector, vector, ), throws, OutOfRangeException]
[), ;, }, public, void, setColumnVector, (, final, int, column, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nRows, ), {]
[., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, vector, .]
[,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nRows, )]
[;, if, (, vector, ., getDimension, (, ), !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (]
[), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (, ), ,, 1, ,, nRows, ,, 1, ), ;, }]
[!=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (, ), ,, 1, ,, nRows, ,, 1, )]
[., getDimension, (, ), !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (, ), ,, 1, ,]
[), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (, ), ,, 1, ,, nRows, ,, 1, ), ;, }]
[;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i]
[,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[., getDimension, (, ), ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (]
[;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i, ), ), ;, }]
[<, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i, ), )]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i, ), ), ;, }]
[), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, double]
[), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, double]
[;, }, }, public, double, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (]
[,, column, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, double, [, ], getRow, (, final]
[,, vector, ., getEntry, (, i, ), ), ;, }, }, public, double, [, ], getRow, (, final, int, row]
[), ;, }, }, public, double, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex]
[., getEntry, (, i, ), ), ;, }, }, public, double, [, ], getRow, (, final, int, row, ), throws]
[), ), ;, }, }, public, double, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, .]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, final, double, [, ], out, =, new, double, [, nCols, ]]
[., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, double, [, ]]
[,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, double, [, ], out, =, new, double]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, double, [, ], out, =, new, double, [, nCols]
[;, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, [, i]
[;, i, <, nCols, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, row, ,, i, )]
[;, ++, i, ), {, out, [, i, ], =, getEntry, (, row, ,, i, ), ;, }, return, out]
[<, nCols, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, row, ,, i, ), ;, }]
[;, ++, i, ), {, out, [, i, ], =, getEntry, (, row, ,, i, ), ;, }, return, out]
[), {, out, [, i, ], =, getEntry, (, row, ,, i, ), ;, }, return, out, ;, }, public]
[), {, out, [, i, ], =, getEntry, (, row, ,, i, ), ;, }, return, out, ;, }, public]
[=, getEntry, (, row, ,, i, ), ;, }, return, out, ;, }, public, void, setRow, (, final, int, row]
[[, i, ], =, getEntry, (, row, ,, i, ), ;, }, return, out, ;, }, public, void, setRow, (]
[], =, getEntry, (, row, ,, i, ), ;, }, return, out, ;, }, public, void, setRow, (, final, int]
[;, }, return, out, ;, }, public, void, setRow, (, final, int, row, ,, final, double, [, ], array, )]
[,, i, ), ;, }, return, out, ;, }, public, void, setRow, (, final, int, row, ,, final, double, []
[), ;, }, return, out, ;, }, public, void, setRow, (, final, int, row, ,, final, double, [, ], array]
[;, }, public, void, setRow, (, final, int, row, ,, final, double, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw, new]
[., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, .]
[,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, )]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw]
[;, if, (, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,]
[), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, for, (]
[!=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }]
[., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, )]
[), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, for, (]
[;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row]
[,, array, ., length, ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i]
[., length, ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (]
[;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, array, [, i, ], )]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, array, [, i, ], ), ;, }, }, public]
[<, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, array, [, i, ], ), ;, }]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, array, [, i, ], ), ;, }, }, public]
[), {, setEntry, (, row, ,, i, ,, array, [, i, ], ), ;, }, }, public, double, [, ]]
[), {, setEntry, (, row, ,, i, ,, array, [, i, ], ), ;, }, }, public, double, [, ]]
[;, }, }, public, double, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkColumnIndex, (]
[,, i, ,, array, [, i, ], ), ;, }, }, public, double, [, ], getColumn, (, final, int, column]
[,, array, [, i, ], ), ;, }, }, public, double, [, ], getColumn, (, final, int, column, ), throws]
[), ;, }, }, public, double, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkColumnIndex]
[[, i, ], ), ;, }, }, public, double, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {]
[], ), ;, }, }, public, double, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, .]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, double, [, ], out, =, new, double, [, nRows, ]]
[., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, double, [, ]]
[,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, double, [, ], out, =, new, double]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, double, [, ], out, =, new, double, [, nRows]
[;, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, [, i]
[;, i, <, nRows, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, i, ,, column, )]
[;, ++, i, ), {, out, [, i, ], =, getEntry, (, i, ,, column, ), ;, }, return, out]
[<, nRows, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, i, ,, column, ), ;, }]
[;, ++, i, ), {, out, [, i, ], =, getEntry, (, i, ,, column, ), ;, }, return, out]
[), {, out, [, i, ], =, getEntry, (, i, ,, column, ), ;, }, return, out, ;, }, public]
[), {, out, [, i, ], =, getEntry, (, i, ,, column, ), ;, }, return, out, ;, }, public]
[=, getEntry, (, i, ,, column, ), ;, }, return, out, ;, }, public, void, setColumn, (, final, int, column]
[[, i, ], =, getEntry, (, i, ,, column, ), ;, }, return, out, ;, }, public, void, setColumn, (]
[], =, getEntry, (, i, ,, column, ), ;, }, return, out, ;, }, public, void, setColumn, (, final, int]
[;, }, return, out, ;, }, public, void, setColumn, (, final, int, column, ,, final, double, [, ], array, )]
[,, column, ), ;, }, return, out, ;, }, public, void, setColumn, (, final, int, column, ,, final, double, []
[), ;, }, return, out, ;, }, public, void, setColumn, (, final, int, column, ,, final, double, [, ], array]
[;, }, public, void, setColumn, (, final, int, column, ,, final, double, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException]
[;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw, new]
[., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, .]
[,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, )]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw]
[;, if, (, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,]
[), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, for, (]
[!=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }]
[., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, )]
[), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, for, (]
[;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i]
[,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[., length, ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (]
[;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, array, [, i, ], )]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, array, [, i, ], ), ;, }, }, public]
[<, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, array, [, i, ], ), ;, }]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, array, [, i, ], ), ;, }, }, public]
[), {, setEntry, (, i, ,, column, ,, array, [, i, ], ), ;, }, }, public, void, addToEntry, (]
[), {, setEntry, (, i, ,, column, ,, array, [, i, ], ), ;, }, }, public, void, addToEntry, (]
[;, }, }, public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {, MatrixUtils]
[,, column, ,, array, [, i, ], ), ;, }, }, public, void, addToEntry, (, int, row, ,, int, column]
[,, array, [, i, ], ), ;, }, }, public, void, addToEntry, (, int, row, ,, int, column, ,, double]
[), ;, }, }, public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {]
[[, i, ], ), ;, }, }, public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, )]
[], ), ;, }, }, public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException]
[;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,, column, ), +, increment, ), ;, }, public, void]
[., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,]
[,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,, column, ), +, increment]
[,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,, column, ), +, increment, ), ;]
[), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,, column, ), +, increment, ), ;, }, public]
[;, }, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, .]
[,, column, ,, getEntry, (, row, ,, column, ), +, increment, ), ;, }, public, void, multiplyEntry, (, int, row]
[,, getEntry, (, row, ,, column, ), +, increment, ), ;, }, public, void, multiplyEntry, (, int, row, ,, int]
[), ;, }, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils]
[+, increment, ), ;, }, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException]
[,, column, ), +, increment, ), ;, }, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor]
[), +, increment, ), ;, }, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws]
[), ;, }, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils]
[;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,, column, ), *, factor, ), ;, }, public, RealMatrix]
[., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,]
[,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,, column, ), *, factor]
[,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,, column, ), *, factor, ), ;]
[), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,, column, ), *, factor, ), ;, }, public]
[;, }, public, RealMatrix, transpose, (, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[,, column, ,, getEntry, (, row, ,, column, ), *, factor, ), ;, }, public, RealMatrix, transpose, (, ), {]
[,, getEntry, (, row, ,, column, ), *, factor, ), ;, }, public, RealMatrix, transpose, (, ), {, final, int]
[), ;, }, public, RealMatrix, transpose, (, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols]
[*, factor, ), ;, }, public, RealMatrix, transpose, (, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final]
[,, column, ), *, factor, ), ;, }, public, RealMatrix, transpose, (, ), {, final, int, nRows, =, getRowDimension, (]
[), *, factor, ), ;, }, public, RealMatrix, transpose, (, ), {, final, int, nRows, =, getRowDimension, (, ), ;]
[), ;, }, public, RealMatrix, transpose, (, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nCols, ,, nRows, ), ;]
[;, final, RealMatrix, out, =, createMatrix, (, nCols, ,, nRows, ), ;, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {, @]
[;, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {, @, Override, public, void, visit, (, final, int, row, ,, final, int]
[,, nRows, ), ;, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {, @, Override, public, void, visit, (, final, int, row]
[), ;, walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {, @, Override, public, void, visit, (, final, int, row, ,, final]
[;, return, out, ;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension, (, ), ==, getRowDimension, (, ), ;]
[), ;, return, out, ;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension, (, ), ==, getRowDimension, (, )]
[;, }, }, ), ;, return, out, ;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension, (, ), ==]
[., setEntry, (, column, ,, row, ,, value, ), ;, }, }, ), ;, return, out, ;, }, public, boolean]
[,, row, ,, value, ), ;, }, }, ), ;, return, out, ;, }, public, boolean, isSquare, (, ), {]
[,, value, ), ;, }, }, ), ;, return, out, ;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension]
[), ;, }, }, ), ;, return, out, ;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension, (, )]
[;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension, (, ), ==, getRowDimension, (, ), ;, }, @, Override]
[;, }, @, Override, public, abstract, int, getRowDimension, (, ), ;, @, Override, public, abstract, int, getColumnDimension, (, ), ;]
[==, getRowDimension, (, ), ;, }, @, Override, public, abstract, int, getRowDimension, (, ), ;, @, Override, public, abstract, int]
[;, }, @, Override, public, abstract, int, getRowDimension, (, ), ;, @, Override, public, abstract, int, getColumnDimension, (, ), ;]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, nRows, !=, nCols, ), {, throw, new, NonSquareMatrixException, (]
[;, if, (, nRows, !=, nCols, ), {, throw, new, NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, double, trace]
[), {, throw, new, NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, double, trace, =, 0, ;, for, (, int]
[!=, nCols, ), {, throw, new, NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, double, trace, =, 0, ;, for]
[), {, throw, new, NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, double, trace, =, 0, ;, for, (, int]
[;, }, double, trace, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[,, nCols, ), ;, }, double, trace, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows]
[), ;, }, double, trace, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, trace, +=, getEntry, (]
[;, i, <, nRows, ;, ++, i, ), {, trace, +=, getEntry, (, i, ,, i, ), ;, }, return]
[;, ++, i, ), {, trace, +=, getEntry, (, i, ,, i, ), ;, }, return, trace, ;, }, public]
[<, nRows, ;, ++, i, ), {, trace, +=, getEntry, (, i, ,, i, ), ;, }, return, trace, ;]
[;, ++, i, ), {, trace, +=, getEntry, (, i, ,, i, ), ;, }, return, trace, ;, }, public]
[), {, trace, +=, getEntry, (, i, ,, i, ), ;, }, return, trace, ;, }, public, double, [, ]]
[), {, trace, +=, getEntry, (, i, ,, i, ), ;, }, return, trace, ;, }, public, double, [, ]]
[+=, getEntry, (, i, ,, i, ), ;, }, return, trace, ;, }, public, double, [, ], operate, (, final]
[;, }, return, trace, ;, }, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException]
[,, i, ), ;, }, return, trace, ;, }, public, double, [, ], operate, (, final, double, [, ], v]
[), ;, }, return, trace, ;, }, public, double, [, ], operate, (, final, double, [, ], v, ), throws]
[;, }, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new]
[;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, )]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double, [, ], out, =]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double, [, ]]
[., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double, [, ], out, =]
[;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0]
[,, nCols, ), ;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int]
[., length, ,, nCols, ), ;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for]
[), ;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, double, sum, =, 0]
[], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, double, sum, =]
[;, row, <, nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0]
[;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols]
[<, nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i]
[;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (]
[;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, []
[;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, [, i, ], ;, }]
[<, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, [, i, ]]
[;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, [, i, ], ;, }]
[), {, sum, +=, getEntry, (, row, ,, i, ), *, v, [, i, ], ;, }, out, [, row]
[), {, sum, +=, getEntry, (, row, ,, i, ), *, v, [, i, ], ;, }, out, [, row]
[+=, getEntry, (, row, ,, i, ), *, v, [, i, ], ;, }, out, [, row, ], =, sum]
[;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, RealVector, operate, (]
[*, v, [, i, ], ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @]
[,, i, ), *, v, [, i, ], ;, }, out, [, row, ], =, sum, ;, }, return, out]
[), *, v, [, i, ], ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }]
[;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, RealVector, operate, (]
[[, i, ], ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public]
[], ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, RealVector, operate]
[=, sum, ;, }, return, out, ;, }, @, Override, public, RealVector, operate, (, final, RealVector, v, ), throws, DimensionMismatchException]
[[, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, RealVector, operate, (, final, RealVector, v]
[], =, sum, ;, }, return, out, ;, }, @, Override, public, RealVector, operate, (, final, RealVector, v, ), throws]
[;, }, return, out, ;, }, @, Override, public, RealVector, operate, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try]
[;, }, @, Override, public, RealVector, operate, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector]
[;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final]
[), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;]
[., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =]
[), ., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows]
[), ., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows]
[), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=, nCols, ), {]
[;, if, (, v, ., getDimension, (, ), !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (]
[), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nCols, ), ;, }, final, double, [, ]]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nCols, ), ;, }, final, double]
[., getDimension, (, ), !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nCols, )]
[), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nCols, ), ;, }, final, double, [, ]]
[;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0]
[,, nCols, ), ;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int]
[., getDimension, (, ), ,, nCols, ), ;, }, final, double, [, ], out, =, new, double, [, nRows, ]]
[), ;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, double, sum, =, 0]
[], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, double, sum, =]
[;, row, <, nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0]
[;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols]
[<, nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i]
[;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (]
[;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, .]
[;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, ., getEntry, (, i, )]
[<, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, ., getEntry, (]
[;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, ., getEntry, (, i, )]
[), {, sum, +=, getEntry, (, row, ,, i, ), *, v, ., getEntry, (, i, ), ;, }, out]
[), {, sum, +=, getEntry, (, row, ,, i, ), *, v, ., getEntry, (, i, ), ;, }, out]
[+=, getEntry, (, row, ,, i, ), *, v, ., getEntry, (, i, ), ;, }, out, [, row, ]]
[;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }]
[*, v, ., getEntry, (, i, ), ;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayRealVector]
[,, i, ), *, v, ., getEntry, (, i, ), ;, }, out, [, row, ], =, sum, ;, }]
[), *, v, ., getEntry, (, i, ), ;, }, out, [, row, ], =, sum, ;, }, return, new]
[;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }]
[., getEntry, (, i, ), ;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayRealVector, (, out]
[), ;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;]
[=, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double, [, ], preMultiply]
[[, row, ], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double]
[], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double, [, ]]
[;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double, [, ], preMultiply, (, final]
[;, }, }, public, double, [, ], preMultiply, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, final, int]
[,, false, ), ;, }, }, public, double, [, ], preMultiply, (, final, double, [, ], v, ), throws, DimensionMismatchException]
[), ;, }, }, public, double, [, ], preMultiply, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, final]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new]
[;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, )]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double, [, ], out, =]
[!=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double, [, ]]
[., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double, [, ], out, =]
[;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0]
[,, nRows, ), ;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int]
[., length, ,, nRows, ), ;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for]
[), ;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =]
[;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =, 0]
[], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =]
[;, col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0]
[;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows]
[<, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i]
[;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (]
[;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, []
[;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, [, i, ], ;, }]
[<, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, [, i, ]]
[;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, [, i, ], ;, }]
[), {, sum, +=, getEntry, (, i, ,, col, ), *, v, [, i, ], ;, }, out, [, col]
[), {, sum, +=, getEntry, (, i, ,, col, ), *, v, [, i, ], ;, }, out, [, col]
[+=, getEntry, (, i, ,, col, ), *, v, [, i, ], ;, }, out, [, col, ], =, sum]
[;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, public, RealVector, preMultiply, (, final, RealVector]
[*, v, [, i, ], ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, public]
[,, col, ), *, v, [, i, ], ;, }, out, [, col, ], =, sum, ;, }, return, out]
[), *, v, [, i, ], ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }]
[;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, public, RealVector, preMultiply, (, final, RealVector]
[[, i, ], ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, public, RealVector, preMultiply]
[], ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, public, RealVector, preMultiply, (, final]
[=, sum, ;, }, return, out, ;, }, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try]
[[, col, ], =, sum, ;, }, return, out, ;, }, public, RealVector, preMultiply, (, final, RealVector, v, ), throws]
[], =, sum, ;, }, return, out, ;, }, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {]
[;, }, return, out, ;, }, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return]
[;, }, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector, (, preMultiply]
[;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final]
[), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;]
[., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =]
[), ., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows]
[), ., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows]
[), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=, nRows, ), {]
[;, if, (, v, ., getDimension, (, ), !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (]
[), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nRows, ), ;, }, final, double, [, ]]
[!=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nRows, ), ;, }, final, double]
[., getDimension, (, ), !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nRows, )]
[), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nRows, ), ;, }, final, double, [, ]]
[;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0]
[,, nRows, ), ;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int]
[., getDimension, (, ), ,, nRows, ), ;, }, final, double, [, ], out, =, new, double, [, nCols, ]]
[), ;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =]
[;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =, 0]
[], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =]
[;, col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0]
[;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows]
[<, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i]
[;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (]
[;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, .]
[;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, ., getEntry, (, i, )]
[<, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, ., getEntry, (]
[;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, ., getEntry, (, i, )]
[), {, sum, +=, getEntry, (, i, ,, col, ), *, v, ., getEntry, (, i, ), ;, }, out]
[), {, sum, +=, getEntry, (, i, ,, col, ), *, v, ., getEntry, (, i, ), ;, }, out]
[+=, getEntry, (, i, ,, col, ), *, v, ., getEntry, (, i, ), ;, }, out, [, col, ]]
[;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }]
[*, v, ., getEntry, (, i, ), ;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayRealVector]
[,, col, ), *, v, ., getEntry, (, i, ), ;, }, out, [, col, ], =, sum, ;, }]
[), *, v, ., getEntry, (, i, ), ;, }, out, [, col, ], =, sum, ;, }, return, new]
[;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }]
[., getEntry, (, i, ), ;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayRealVector, (, out]
[), ;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;]
[=, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double, walkInRowOrder, (, final]
[[, col, ], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double]
[], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double, walkInRowOrder, (]
[;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor]
[;, }, }, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;]
[,, false, ), ;, }, }, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension]
[), ;, }, }, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, )]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, )]
[), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int]
[-, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int]
[;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;]
[;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {]
[<, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column]
[;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {]
[), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, final, double, oldValue]
[), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, final, double, oldValue]
[;, column, <, columns, ;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;]
[;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[<, columns, ;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double]
[;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit]
[), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit]
[;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry]
[), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row]
[;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }]
[,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, .]
[,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (]
[), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {]
[,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (]
[,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, )]
[;, }, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final]
[., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, )]
[), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int]
[-, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int]
[;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;]
[;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {]
[<, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column]
[;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {]
[), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, visitor, ., visit]
[), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, visitor, ., visit]
[;, column, <, columns, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row]
[;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[<, columns, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column]
[;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final]
[., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, .]
[,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;]
[,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ,]
[,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (, final]
[), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor]
[;, }, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,, final, int]
[., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final, int, startRow, ,, final, int]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, )]
[,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int]
[;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;]
[;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {]
[<=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column]
[;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {]
[), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, final, double, oldValue]
[), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, final, double, oldValue]
[;, column, <=, endColumn, ;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;]
[;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[<=, endColumn, ;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double]
[;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit]
[), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit]
[;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry]
[), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row]
[;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }]
[,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, .]
[,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (]
[), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final]
[,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (]
[,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ,]
[;, }, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,, final, int]
[., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,, final, int]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, )]
[,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int]
[;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;]
[;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {]
[<=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column]
[;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {]
[), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, visitor, ., visit]
[), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, visitor, ., visit]
[;, column, <=, endColumn, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row]
[;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[<=, endColumn, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column]
[;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ), {]
[., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, .]
[,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;]
[,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, )]
[,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final]
[), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor]
[;, }, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final]
[., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, )]
[), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int]
[-, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for]
[), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int]
[;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;]
[;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {]
[<, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row]
[;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {]
[), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, final, double, oldValue]
[), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, final, double, oldValue]
[;, row, <, rows, ;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;]
[;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[<, rows, ;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double]
[;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit]
[), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit]
[;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry]
[), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row]
[;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }]
[,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, .]
[,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (]
[), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {]
[,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (]
[,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, )]
[;, }, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final]
[., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, )]
[), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int]
[-, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for]
[), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int]
[;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;]
[;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {]
[<, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row]
[;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {]
[), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, visitor, ., visit]
[), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, visitor, ., visit]
[;, row, <, rows, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row]
[;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[<, rows, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column]
[;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final]
[., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, .]
[,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;]
[,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ,]
[,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final]
[), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor]
[;, }, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,, final, int]
[., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final, int, startRow, ,, final, int]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, )]
[,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for]
[), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int]
[;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;]
[;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {]
[<=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row]
[;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {]
[), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, final, double, oldValue]
[), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, final, double, oldValue]
[;, row, <=, endRow, ;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;]
[;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[<=, endRow, ;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double]
[;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit]
[), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit]
[;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry]
[), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row]
[;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }]
[,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, .]
[,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (]
[), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final]
[,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (]
[,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ,]
[;, }, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,, final, int]
[., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,, final, int]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, )]
[,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for]
[), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int]
[;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;]
[;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {]
[<=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row]
[;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {]
[), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, visitor, ., visit]
[), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, visitor, ., visit]
[;, row, <=, endRow, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row]
[;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[<=, endRow, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column]
[;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixChangingVisitor, visitor, ), {]
[., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, .]
[,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;]
[,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixChangingVisitor, visitor, )]
[,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final]
[), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixChangingVisitor, visitor]
[;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, return, walkInRowOrder, (, visitor, ), ;, }, public, double]
[., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, return, walkInRowOrder, (, visitor, )]
[;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, return, walkInRowOrder, (, visitor, ), ;, }, public, double]
[), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, return, walkInRowOrder, (, visitor, ), ;, }, public]
[;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,, final, int]
[), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,, final]
[;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,, final, int]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow]
[,, startColumn, ,, endColumn, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,, final]
[,, endColumn, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow]
[), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,, final]
[;, }, @, Override, public, String, toString, (, ), {, final, StringBuilder, res, =, new, StringBuilder, (, ), ;, String]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, @, Override, public, String, toString, (, ), {, final]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, }, @, Override, public, String, toString, (, ), {, final, StringBuilder, res]
[,, startColumn, ,, endColumn, ), ;, }, @, Override, public, String, toString, (, ), {, final, StringBuilder, res, =, new]
[,, endColumn, ), ;, }, @, Override, public, String, toString, (, ), {, final, StringBuilder, res, =, new, StringBuilder, (]
[), ;, }, @, Override, public, String, toString, (, ), {, final, StringBuilder, res, =, new, StringBuilder, (, ), ;]
[;, String, fullClassName, =, getClass, (, ), ., getName, (, ), ;, String, shortClassName, =, fullClassName, ., substring, (, fullClassName]
[;, String, shortClassName, =, fullClassName, ., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +, 1, ), ;, res, .]
[., getName, (, ), ;, String, shortClassName, =, fullClassName, ., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +, 1]
[;, res, ., append, (, shortClassName, ), ;, res, ., append, (, DEFAULT_FORMAT, ., format, (, this, ), ), ;]
[., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +, 1, ), ;, res, ., append, (, shortClassName, ), ;]
[), ;, res, ., append, (, shortClassName, ), ;, res, ., append, (, DEFAULT_FORMAT, ., format, (, this, ), )]
[+, 1, ), ;, res, ., append, (, shortClassName, ), ;, res, ., append, (, DEFAULT_FORMAT, ., format, (, this]
[., lastIndexOf, (, '.', ), +, 1, ), ;, res, ., append, (, shortClassName, ), ;, res, ., append, (]
[), +, 1, ), ;, res, ., append, (, shortClassName, ), ;, res, ., append, (, DEFAULT_FORMAT, ., format, (]
[), ;, res, ., append, (, shortClassName, ), ;, res, ., append, (, DEFAULT_FORMAT, ., format, (, this, ), )]
[;, res, ., append, (, DEFAULT_FORMAT, ., format, (, this, ), ), ;, return, res, ., toString, (, ), ;]
[., append, (, shortClassName, ), ;, res, ., append, (, DEFAULT_FORMAT, ., format, (, this, ), ), ;, return, res]
[), ;, res, ., append, (, DEFAULT_FORMAT, ., format, (, this, ), ), ;, return, res, ., toString, (, )]
[;, return, res, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, object, ), {]
[., append, (, DEFAULT_FORMAT, ., format, (, this, ), ), ;, return, res, ., toString, (, ), ;, }, @]
[), ;, return, res, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, object, )]
[., format, (, this, ), ), ;, return, res, ., toString, (, ), ;, }, @, Override, public, boolean, equals]
[), ), ;, return, res, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, object]
[;, }, @, Override, public, boolean, equals, (, final, Object, object, ), {, if, (, object, ==, this, ), {]
[., toString, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, object, ), {, if, (, object]
[), {, return, true, ;, }, if, (, object, instanceof, RealMatrix, ==, false, ), {, return, false, ;, }, RealMatrix]
[==, this, ), {, return, true, ;, }, if, (, object, instanceof, RealMatrix, ==, false, ), {, return, false, ;]
[), {, return, true, ;, }, if, (, object, instanceof, RealMatrix, ==, false, ), {, return, false, ;, }, RealMatrix]
[;, }, if, (, object, instanceof, RealMatrix, ==, false, ), {, return, false, ;, }, RealMatrix, m, =, (, RealMatrix]
[), {, return, false, ;, }, RealMatrix, m, =, (, RealMatrix, ), object, ;, final, int, nRows, =, getRowDimension, (]
[==, false, ), {, return, false, ;, }, RealMatrix, m, =, (, RealMatrix, ), object, ;, final, int, nRows, =]
[instanceof, RealMatrix, ==, false, ), {, return, false, ;, }, RealMatrix, m, =, (, RealMatrix, ), object, ;, final, int]
[), {, return, false, ;, }, RealMatrix, m, =, (, RealMatrix, ), object, ;, final, int, nRows, =, getRowDimension, (]
[;, }, RealMatrix, m, =, (, RealMatrix, ), object, ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, m]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, m]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=, nCols, ||, m]
[;, if, (, m, ., getColumnDimension, (, ), !=, nCols, ||, m, ., getRowDimension, (, ), !=, nRows, ), {]
[), {, return, false, ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, )]
[||, m, ., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0]
[!=, nCols, ||, m, ., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row]
[., getColumnDimension, (, ), !=, nCols, ||, m, ., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }]
[||, m, ., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0]
[), {, return, false, ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, )]
[!=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++]
[., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0, ;, row]
[), {, return, false, ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, )]
[;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int]
[;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[<, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, if, (, getEntry]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, if, (, getEntry]
[;, col, <, nCols, ;, ++, col, ), {, if, (, getEntry, (, row, ,, col, ), !=, m, .]
[;, ++, col, ), {, if, (, getEntry, (, row, ,, col, ), !=, m, ., getEntry, (, row, ,]
[<, nCols, ;, ++, col, ), {, if, (, getEntry, (, row, ,, col, ), !=, m, ., getEntry, (]
[;, ++, col, ), {, if, (, getEntry, (, row, ,, col, ), !=, m, ., getEntry, (, row, ,]
[), {, if, (, getEntry, (, row, ,, col, ), !=, m, ., getEntry, (, row, ,, col, ), )]
[), {, if, (, getEntry, (, row, ,, col, ), !=, m, ., getEntry, (, row, ,, col, ), )]
[), {, return, false, ;, }, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {]
[!=, m, ., getEntry, (, row, ,, col, ), ), {, return, false, ;, }, }, }, return, true, ;]
[,, col, ), !=, m, ., getEntry, (, row, ,, col, ), ), {, return, false, ;, }, }, }]
[), !=, m, ., getEntry, (, row, ,, col, ), ), {, return, false, ;, }, }, }, return, true]
[), {, return, false, ;, }, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {]
[., getEntry, (, row, ,, col, ), ), {, return, false, ;, }, }, }, return, true, ;, }, @]
[,, col, ), ), {, return, false, ;, }, }, }, return, true, ;, }, @, Override, public, int, hashCode]
[), ), {, return, false, ;, }, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, )]
[;, }, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, int, ret, =, 7]
[;, }, @, Override, public, int, hashCode, (, ), {, int, ret, =, 7, ;, final, int, nRows, =, getRowDimension]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =, ret]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =, ret, *, 31, +, nRows, ;, ret, =, ret]
[;, ret, =, ret, *, 31, +, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int]
[=, ret, *, 31, +, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =]
[;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[+, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <]
[*, 31, +, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;]
[+, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <]
[;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[=, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col]
[+, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (]
[*, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {]
[+, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col]
[;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[<, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret]
[;, col, <, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row]
[;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +]
[<, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1]
[;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +]
[), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (]
[), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (]
[=, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (, col, +, 1]
[;, }, }, return, ret, ;, }, public, abstract, RealMatrix, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException]
[+, (, 11, *, (, row, +, 1, ), +, 17, *, (, col, +, 1, ), ), *, MathUtils]
[*, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (, col, +, 1, ), )]
[+, (, 11, *, (, row, +, 1, ), +, 17, *, (, col, +, 1, ), ), *, MathUtils]
[;, }, }, return, ret, ;, }, public, abstract, RealMatrix, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException]
[*, MathUtils, ., hash, (, getEntry, (, row, ,, col, ), ), ;, }, }, return, ret, ;, }, public]
[), *, MathUtils, ., hash, (, getEntry, (, row, ,, col, ), ), ;, }, }, return, ret, ;, }]
[+, 17, *, (, col, +, 1, ), ), *, MathUtils, ., hash, (, getEntry, (, row, ,, col, )]
[*, (, row, +, 1, ), +, 17, *, (, col, +, 1, ), ), *, MathUtils, ., hash, (]
[+, 17, *, (, col, +, 1, ), ), *, MathUtils, ., hash, (, getEntry, (, row, ,, col, )]
[), +, 17, *, (, col, +, 1, ), ), *, MathUtils, ., hash, (, getEntry, (, row, ,, col]
[+, 1, ), +, 17, *, (, col, +, 1, ), ), *, MathUtils, ., hash, (, getEntry, (, row]
[), +, 17, *, (, col, +, 1, ), ), *, MathUtils, ., hash, (, getEntry, (, row, ,, col]
[), *, MathUtils, ., hash, (, getEntry, (, row, ,, col, ), ), ;, }, }, return, ret, ;, }]
[*, (, col, +, 1, ), ), *, MathUtils, ., hash, (, getEntry, (, row, ,, col, ), ), ;]
[), *, MathUtils, ., hash, (, getEntry, (, row, ,, col, ), ), ;, }, }, return, ret, ;, }]
[), ), *, MathUtils, ., hash, (, getEntry, (, row, ,, col, ), ), ;, }, }, return, ret, ;]
[+, 1, ), ), *, MathUtils, ., hash, (, getEntry, (, row, ,, col, ), ), ;, }, }, return]
[), ), *, MathUtils, ., hash, (, getEntry, (, row, ,, col, ), ), ;, }, }, return, ret, ;]
[;, }, }, return, ret, ;, }, public, abstract, RealMatrix, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException]
[., hash, (, getEntry, (, row, ,, col, ), ), ;, }, }, return, ret, ;, }, public, abstract, RealMatrix]
[), ;, }, }, return, ret, ;, }, public, abstract, RealMatrix, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws]
[,, col, ), ), ;, }, }, return, ret, ;, }, public, abstract, RealMatrix, createMatrix, (, int, rowDimension, ,, int]
[), ), ;, }, }, return, ret, ;, }, public, abstract, RealMatrix, createMatrix, (, int, rowDimension, ,, int, columnDimension, )]
[;, }, public, abstract, RealMatrix, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException, ;, public, abstract, RealMatrix, copy]
