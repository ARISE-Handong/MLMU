[=, compiler, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {, this, ., specializationState, =]
[., compiler, =, compiler, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {, this, .]
[;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {, this, ., specializationState, =, state, ;]
[=, state, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =]
[., specializationState, =, state, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder]
[;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }]
[), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;]
[;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs, ,]
[., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override]
[,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (]
[), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, for, (]
[,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder]
[,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, )]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, for]
[), {, rewriteDefinitionIfEligible, (, defSite, ,, definitions, ), ;, }, }, private, static, boolean, isCall, (, UseSite, site, ), {]
[., getDefinitionSites, (, ), ), {, rewriteDefinitionIfEligible, (, defSite, ,, definitions, ), ;, }, }, private, static, boolean, isCall, (]
[;, }, }, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =, site, ., node, ;, Node]
[,, definitions, ), ;, }, }, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =, site, .]
[), ;, }, }, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =, site, ., node, ;]
[;, Node, parent, =, node, ., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==, node, )]
[., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==]
[;, return, (, parent, ., getFirstChild, (, ), ==, node, ), &&, parent, ., isCall, (, ), ;, }, private]
[., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==, node, ), &&, parent, ., isCall, (]
[;, }, private, static, boolean, isPrototypeMethodDefinition, (, Node, node, ), {, Node, parent, =, node, ., getParent, (, ), ;]
[&&, parent, ., isCall, (, ), ;, }, private, static, boolean, isPrototypeMethodDefinition, (, Node, node, ), {, Node, parent, =]
[), &&, parent, ., isCall, (, ), ;, }, private, static, boolean, isPrototypeMethodDefinition, (, Node, node, ), {, Node, parent]
[==, node, ), &&, parent, ., isCall, (, ), ;, }, private, static, boolean, isPrototypeMethodDefinition, (, Node, node, ), {]
[., getFirstChild, (, ), ==, node, ), &&, parent, ., isCall, (, ), ;, }, private, static, boolean, isPrototypeMethodDefinition, (]
[), &&, parent, ., isCall, (, ), ;, }, private, static, boolean, isPrototypeMethodDefinition, (, Node, node, ), {, Node, parent]
[;, }, private, static, boolean, isPrototypeMethodDefinition, (, Node, node, ), {, Node, parent, =, node, ., getParent, (, ), ;]
[., isCall, (, ), ;, }, private, static, boolean, isPrototypeMethodDefinition, (, Node, node, ), {, Node, parent, =, node, .]
[;, if, (, parent, ==, null, ), {, return, false, ;, }, Node, gramp, =, parent, ., getParent, (, )]
[., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, false, ;, }, Node, gramp, =, parent]
[), {, return, false, ;, }, Node, gramp, =, parent, ., getParent, (, ), ;, if, (, gramp, ==, null]
[==, null, ), {, return, false, ;, }, Node, gramp, =, parent, ., getParent, (, ), ;, if, (, gramp]
[), {, return, false, ;, }, Node, gramp, =, parent, ., getParent, (, ), ;, if, (, gramp, ==, null]
[;, }, Node, gramp, =, parent, ., getParent, (, ), ;, if, (, gramp, ==, null, ), {, return, false]
[;, if, (, gramp, ==, null, ), {, return, false, ;, }, if, (, node, ., isGetProp, (, ), )]
[., getParent, (, ), ;, if, (, gramp, ==, null, ), {, return, false, ;, }, if, (, node, .]
[), {, return, false, ;, }, if, (, node, ., isGetProp, (, ), ), {, if, (, parent, ., getFirstChild]
[==, null, ), {, return, false, ;, }, if, (, node, ., isGetProp, (, ), ), {, if, (, parent]
[), {, return, false, ;, }, if, (, node, ., isGetProp, (, ), ), {, if, (, parent, ., getFirstChild]
[;, }, if, (, node, ., isGetProp, (, ), ), {, if, (, parent, ., getFirstChild, (, ), !=, node]
[), {, if, (, parent, ., getFirstChild, (, ), !=, node, ), {, return, false, ;, }, if, (, !]
[., isGetProp, (, ), ), {, if, (, parent, ., getFirstChild, (, ), !=, node, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, !, NodeUtil, ., isExprAssign, (, gramp, ), ), {, return, false, ;]
[!=, node, ), {, return, false, ;, }, if, (, !, NodeUtil, ., isExprAssign, (, gramp, ), ), {, return]
[., getFirstChild, (, ), !=, node, ), {, return, false, ;, }, if, (, !, NodeUtil, ., isExprAssign, (, gramp]
[), {, return, false, ;, }, if, (, !, NodeUtil, ., isExprAssign, (, gramp, ), ), {, return, false, ;]
[;, }, if, (, !, NodeUtil, ., isExprAssign, (, gramp, ), ), {, return, false, ;, }, Node, functionNode, =]
[), {, return, false, ;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (, (, functionNode, ==]
[), {, return, false, ;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (, (, functionNode, ==]
[., isExprAssign, (, gramp, ), ), {, return, false, ;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;]
[), ), {, return, false, ;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (, (, functionNode]
[;, }, Node, functionNode, =, parent, ., getLastChild, (, ), ;, if, (, (, functionNode, ==, null, ), ||, !]
[;, if, (, (, functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;]
[., getLastChild, (, ), ;, if, (, (, functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, ), )]
[), {, return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return, nameNode, ., isGetProp, (]
[||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (]
[), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, nameNode, =, node, ., getFirstChild]
[==, null, ), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, nameNode, =, node]
[), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, nameNode, =, node, ., getFirstChild]
[), {, return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return, nameNode, ., isGetProp, (]
[), {, return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return, nameNode, ., isGetProp, (]
[., isFunction, (, ), ), {, return, false, ;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return]
[;, }, Node, nameNode, =, node, ., getFirstChild, (, ), ;, return, nameNode, ., isGetProp, (, ), &&, nameNode, .]
[;, return, nameNode, ., isGetProp, (, ), &&, nameNode, ., getLastChild, (, ), ., getString, (, ), ., equals, (]
[., getFirstChild, (, ), ;, return, nameNode, ., isGetProp, (, ), &&, nameNode, ., getLastChild, (, ), ., getString, (]
[;, }, else, if, (, node, ., isStringKey, (, ), ), {, Preconditions, ., checkState, (, parent, ., isObjectLit, (]
[&&, nameNode, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ;, }, else, if, (]
[., isGetProp, (, ), &&, nameNode, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ;]
[;, }, else, if, (, node, ., isStringKey, (, ), ), {, Preconditions, ., checkState, (, parent, ., isObjectLit, (]
[., equals, (, "prototype", ), ;, }, else, if, (, node, ., isStringKey, (, ), ), {, Preconditions, ., checkState]
[., getString, (, ), ., equals, (, "prototype", ), ;, }, else, if, (, node, ., isStringKey, (, ), )]
[., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ;, }, else, if, (, node, .]
[), ;, }, else, if, (, node, ., isStringKey, (, ), ), {, Preconditions, ., checkState, (, parent, ., isObjectLit]
[), {, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, if, (, !, gramp, ., isAssign, (]
[., isStringKey, (, ), ), {, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, if, (, !]
[;, if, (, !, gramp, ., isAssign, (, ), ), {, return, false, ;, }, if, (, gramp, ., getLastChild]
[., checkState, (, parent, ., isObjectLit, (, ), ), ;, if, (, !, gramp, ., isAssign, (, ), ), {]
[), ;, if, (, !, gramp, ., isAssign, (, ), ), {, return, false, ;, }, if, (, gramp, .]
[., isObjectLit, (, ), ), ;, if, (, !, gramp, ., isAssign, (, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, if, (, gramp, ., getLastChild, (, ), !=, parent, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, gramp, ., getLastChild, (, ), !=, parent, ), {, return, false, ;]
[., isAssign, (, ), ), {, return, false, ;, }, if, (, gramp, ., getLastChild, (, ), !=, parent, )]
[;, }, if, (, gramp, ., getLastChild, (, ), !=, parent, ), {, return, false, ;, }, Node, greatGramp, =]
[), {, return, false, ;, }, Node, greatGramp, =, gramp, ., getParent, (, ), ;, if, (, greatGramp, ==, null]
[!=, parent, ), {, return, false, ;, }, Node, greatGramp, =, gramp, ., getParent, (, ), ;, if, (, greatGramp]
[., getLastChild, (, ), !=, parent, ), {, return, false, ;, }, Node, greatGramp, =, gramp, ., getParent, (, )]
[), {, return, false, ;, }, Node, greatGramp, =, gramp, ., getParent, (, ), ;, if, (, greatGramp, ==, null]
[;, }, Node, greatGramp, =, gramp, ., getParent, (, ), ;, if, (, greatGramp, ==, null, ||, !, greatGramp, .]
[;, if, (, greatGramp, ==, null, ||, !, greatGramp, ., isExprResult, (, ), ), {, return, false, ;, }, Node]
[., getParent, (, ), ;, if, (, greatGramp, ==, null, ||, !, greatGramp, ., isExprResult, (, ), ), {, return]
[), {, return, false, ;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (, (, functionNode, ==]
[||, !, greatGramp, ., isExprResult, (, ), ), {, return, false, ;, }, Node, functionNode, =, node, ., getFirstChild, (]
[==, null, ||, !, greatGramp, ., isExprResult, (, ), ), {, return, false, ;, }, Node, functionNode, =, node, .]
[||, !, greatGramp, ., isExprResult, (, ), ), {, return, false, ;, }, Node, functionNode, =, node, ., getFirstChild, (]
[), {, return, false, ;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (, (, functionNode, ==]
[), {, return, false, ;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (, (, functionNode, ==]
[., isExprResult, (, ), ), {, return, false, ;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if]
[;, }, Node, functionNode, =, node, ., getFirstChild, (, ), ;, if, (, (, functionNode, ==, null, ), ||, !]
[;, if, (, (, functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;]
[., getFirstChild, (, ), ;, if, (, (, functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, ), )]
[), {, return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return, target, ., isGetProp, (]
[||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (]
[), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, target, =, gramp, ., getFirstChild]
[==, null, ), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, target, =, gramp]
[), ||, !, functionNode, ., isFunction, (, ), ), {, return, false, ;, }, Node, target, =, gramp, ., getFirstChild]
[), {, return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return, target, ., isGetProp, (]
[), {, return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return, target, ., isGetProp, (]
[., isFunction, (, ), ), {, return, false, ;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return]
[;, }, Node, target, =, gramp, ., getFirstChild, (, ), ;, return, target, ., isGetProp, (, ), &&, target, .]
[;, return, target, ., isGetProp, (, ), &&, target, ., getLastChild, (, ), ., getString, (, ), ., equals, (]
[., getFirstChild, (, ), ;, return, target, ., isGetProp, (, ), &&, target, ., getLastChild, (, ), ., getString, (]
[;, }, else, {, return, false, ;, }, }, private, String, getMethodName, (, Node, node, ), {, if, (, node]
[&&, target, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ;, }, else, {, return]
[., isGetProp, (, ), &&, target, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ;]
[;, }, else, {, return, false, ;, }, }, private, String, getMethodName, (, Node, node, ), {, if, (, node]
[., equals, (, "prototype", ), ;, }, else, {, return, false, ;, }, }, private, String, getMethodName, (, Node, node]
[., getString, (, ), ., equals, (, "prototype", ), ;, }, else, {, return, false, ;, }, }, private, String]
[., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ;, }, else, {, return, false, ;]
[), ;, }, else, {, return, false, ;, }, }, private, String, getMethodName, (, Node, node, ), {, if, (]
[;, }, }, private, String, getMethodName, (, Node, node, ), {, if, (, node, ., isGetProp, (, ), ), {]
[), {, return, node, ., getLastChild, (, ), ., getString, (, ), ;, }, else, if, (, node, ., isStringKey]
[., isGetProp, (, ), ), {, return, node, ., getLastChild, (, ), ., getString, (, ), ;, }, else, if]
[;, }, else, if, (, node, ., isStringKey, (, ), ), {, return, node, ., getString, (, ), ;, }]
[., getString, (, ), ;, }, else, if, (, node, ., isStringKey, (, ), ), {, return, node, ., getString]
[., getLastChild, (, ), ., getString, (, ), ;, }, else, if, (, node, ., isStringKey, (, ), ), {]
[), {, return, node, ., getString, (, ), ;, }, else, {, throw, new, IllegalStateException, (, "unexpected", ), ;, }]
[., isStringKey, (, ), ), {, return, node, ., getString, (, ), ;, }, else, {, throw, new, IllegalStateException, (]
[;, }, else, {, throw, new, IllegalStateException, (, "unexpected", ), ;, }, }, private, String, getRewrittenMethodName, (, String, originalMethodName, )]
[., getString, (, ), ;, }, else, {, throw, new, IllegalStateException, (, "unexpected", ), ;, }, }, private, String, getRewrittenMethodName]
[;, }, }, private, String, getRewrittenMethodName, (, String, originalMethodName, ), {, return, "JSCompiler_StaticMethods_", +, originalMethodName, ;, }, private, void, rewriteDefinitionIfEligible]
[), ;, }, }, private, String, getRewrittenMethodName, (, String, originalMethodName, ), {, return, "JSCompiler_StaticMethods_", +, originalMethodName, ;, }, private, void]
[;, }, private, void, rewriteDefinitionIfEligible, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, defSite, ., inExterns, ||, !]
[+, originalMethodName, ;, }, private, void, rewriteDefinitionIfEligible, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, defSite, ., inExterns]
[;, }, private, void, rewriteDefinitionIfEligible, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, defSite, ., inExterns, ||, !]
[), {, return, ;, }, Node, node, =, defSite, ., node, ;, if, (, !, isPrototypeMethodDefinition, (, node, ), )]
[||, !, isEligibleDefinition, (, defFinder, ,, defSite, ), ), {, return, ;, }, Node, node, =, defSite, ., node, ;]
[||, !, defSite, ., inGlobalScope, ||, !, isEligibleDefinition, (, defFinder, ,, defSite, ), ), {, return, ;, }, Node, node]
[., inExterns, ||, !, defSite, ., inGlobalScope, ||, !, isEligibleDefinition, (, defFinder, ,, defSite, ), ), {, return, ;, }]
[||, !, isEligibleDefinition, (, defFinder, ,, defSite, ), ), {, return, ;, }, Node, node, =, defSite, ., node, ;]
[||, !, isEligibleDefinition, (, defFinder, ,, defSite, ), ), {, return, ;, }, Node, node, =, defSite, ., node, ;]
[., inGlobalScope, ||, !, isEligibleDefinition, (, defFinder, ,, defSite, ), ), {, return, ;, }, Node, node, =, defSite, .]
[), {, return, ;, }, Node, node, =, defSite, ., node, ;, if, (, !, isPrototypeMethodDefinition, (, node, ), )]
[), {, return, ;, }, Node, node, =, defSite, ., node, ;, if, (, !, isPrototypeMethodDefinition, (, node, ), )]
[,, defSite, ), ), {, return, ;, }, Node, node, =, defSite, ., node, ;, if, (, !, isPrototypeMethodDefinition, (]
[), ), {, return, ;, }, Node, node, =, defSite, ., node, ;, if, (, !, isPrototypeMethodDefinition, (, node, )]
[;, if, (, !, isPrototypeMethodDefinition, (, node, ), ), {, return, ;, }, for, (, Node, ancestor, =, node, .]
[., node, ;, if, (, !, isPrototypeMethodDefinition, (, node, ), ), {, return, ;, }, for, (, Node, ancestor, =]
[), {, return, ;, }, for, (, Node, ancestor, =, node, ., getParent, (, ), ;, ancestor, !=, null, ;]
[), {, return, ;, }, for, (, Node, ancestor, =, node, ., getParent, (, ), ;, ancestor, !=, null, ;]
[), ), {, return, ;, }, for, (, Node, ancestor, =, node, ., getParent, (, ), ;, ancestor, !=, null]
[;, ancestor, !=, null, ;, ancestor, =, ancestor, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (]
[., getParent, (, ), ;, ancestor, !=, null, ;, ancestor, =, ancestor, ., getParent, (, ), ), {, if, (]
[;, ancestor, =, ancestor, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {]
[!=, null, ;, ancestor, =, ancestor, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, )]
[;, ancestor, =, ancestor, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {]
[=, ancestor, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, return, ;]
[), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, return, ;, }, }, String, newMethodName, =, getRewrittenMethodName]
[., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, return, ;, }, }]
[), {, return, ;, }, }, String, newMethodName, =, getRewrittenMethodName, (, getMethodName, (, node, ), ), ;, rewriteDefinition, (, node]
[., isControlStructure, (, ancestor, ), ), {, return, ;, }, }, String, newMethodName, =, getRewrittenMethodName, (, getMethodName, (, node, )]
[), ), {, return, ;, }, }, String, newMethodName, =, getRewrittenMethodName, (, getMethodName, (, node, ), ), ;, rewriteDefinition, (]
[;, rewriteDefinition, (, node, ,, newMethodName, ), ;, rewriteCallSites, (, defFinder, ,, defSite, ., definition, ,, newMethodName, ), ;, }]
[), ;, rewriteDefinition, (, node, ,, newMethodName, ), ;, rewriteCallSites, (, defFinder, ,, defSite, ., definition, ,, newMethodName, ), ;]
[), ), ;, rewriteDefinition, (, node, ,, newMethodName, ), ;, rewriteCallSites, (, defFinder, ,, defSite, ., definition, ,, newMethodName, )]
[;, rewriteCallSites, (, defFinder, ,, defSite, ., definition, ,, newMethodName, ), ;, }, private, boolean, isEligibleDefinition, (, SimpleDefinitionFinder, defFinder, ,]
[,, newMethodName, ), ;, rewriteCallSites, (, defFinder, ,, defSite, ., definition, ,, newMethodName, ), ;, }, private, boolean, isEligibleDefinition, (]
[), ;, rewriteCallSites, (, defFinder, ,, defSite, ., definition, ,, newMethodName, ), ;, }, private, boolean, isEligibleDefinition, (, SimpleDefinitionFinder, defFinder]
[;, }, private, boolean, isEligibleDefinition, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =, definitionSite, ., definition, ;]
[,, defSite, ., definition, ,, newMethodName, ), ;, }, private, boolean, isEligibleDefinition, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {]
[,, newMethodName, ), ;, }, private, boolean, isEligibleDefinition, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =, definitionSite]
[., definition, ,, newMethodName, ), ;, }, private, boolean, isEligibleDefinition, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition]
[), ;, }, private, boolean, isEligibleDefinition, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =, definitionSite, ., definition]
[;, JSModule, definitionModule, =, definitionSite, ., module, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue]
[., definition, ;, JSModule, definitionModule, =, definitionSite, ., module, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if]
[;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction]
[., module, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue]
[;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, )]
[., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||, NodeUtil, .]
[), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (, (, lValue, ==]
[||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (]
[||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }]
[==, null, ||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false]
[||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }]
[||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (]
[||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (]
[., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, Node, lValue, =]
[), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (, (, lValue, ==]
[., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (, ), ;]
[), ), {, return, false, ;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (, (, lValue]
[;, }, Node, lValue, =, definition, ., getLValue, (, ), ;, if, (, (, lValue, ==, null, ), ||, !]
[;, if, (, (, lValue, ==, null, ), ||, !, lValue, ., isGetProp, (, ), ), {, return, false, ;]
[., getLValue, (, ), ;, if, (, (, lValue, ==, null, ), ||, !, lValue, ., isGetProp, (, ), )]
[), {, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention, (, ), ;, if, (, codingConvention, ., isExported]
[||, !, lValue, ., isGetProp, (, ), ), {, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention, (]
[), ||, !, lValue, ., isGetProp, (, ), ), {, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention]
[==, null, ), ||, !, lValue, ., isGetProp, (, ), ), {, return, false, ;, }, CodingConvention, codingConvention, =, compiler]
[), ||, !, lValue, ., isGetProp, (, ), ), {, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention]
[), {, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention, (, ), ;, if, (, codingConvention, ., isExported]
[), {, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention, (, ), ;, if, (, codingConvention, ., isExported]
[., isGetProp, (, ), ), {, return, false, ;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention, (, ), ;, if]
[;, }, CodingConvention, codingConvention, =, compiler, ., getCodingConvention, (, ), ;, if, (, codingConvention, ., isExported, (, lValue, ., getLastChild]
[;, if, (, codingConvention, ., isExported, (, lValue, ., getLastChild, (, ), ., getString, (, ), ), ), {, return]
[., getCodingConvention, (, ), ;, if, (, codingConvention, ., isExported, (, lValue, ., getLastChild, (, ), ., getString, (, )]
[), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, if]
[., isExported, (, lValue, ., getLastChild, (, ), ., getString, (, ), ), ), {, return, false, ;, }, Collection]
[), ), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;]
[., getString, (, ), ), ), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites]
[., getLastChild, (, ), ., getString, (, ), ), ), {, return, false, ;, }, Collection, <, UseSite, >, useSites]
[;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, if, (, useSites, ., isEmpty]
[;, if, (, useSites, ., isEmpty, (, ), ), {, return, false, ;, }, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph]
[., getUseSites, (, definition, ), ;, if, (, useSites, ., isEmpty, (, ), ), {, return, false, ;, }, JSModuleGraph]
[), ;, if, (, useSites, ., isEmpty, (, ), ), {, return, false, ;, }, JSModuleGraph, moduleGraph, =, compiler, .]
[), {, return, false, ;, }, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, UseSite, site, :]
[., isEmpty, (, ), ), {, return, false, ;, }, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for]
[;, }, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, UseSite, site, :, useSites, ), {, if]
[;, for, (, UseSite, site, :, useSites, ), {, if, (, !, isCall, (, site, ), ), {, return, false]
[., getModuleGraph, (, ), ;, for, (, UseSite, site, :, useSites, ), {, if, (, !, isCall, (, site, )]
[), {, if, (, !, isCall, (, site, ), ), {, return, false, ;, }, Node, nameNode, =, site, .]
[), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, if, (, specializationState, !=, null, &&, !]
[), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, if, (, specializationState, !=, null, &&, !]
[), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, if, (, specializationState, !=, null, &&]
[;, }, Node, nameNode, =, site, ., node, ;, if, (, specializationState, !=, null, &&, !, specializationState, ., canFixupSpecializedFunctionContainingNode, (]
[;, if, (, specializationState, !=, null, &&, !, specializationState, ., canFixupSpecializedFunctionContainingNode, (, nameNode, ), ), {, return, false, ;, }]
[., node, ;, if, (, specializationState, !=, null, &&, !, specializationState, ., canFixupSpecializedFunctionContainingNode, (, nameNode, ), ), {, return, false]
[), {, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if]
[&&, !, specializationState, ., canFixupSpecializedFunctionContainingNode, (, nameNode, ), ), {, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =]
[!=, null, &&, !, specializationState, ., canFixupSpecializedFunctionContainingNode, (, nameNode, ), ), {, return, false, ;, }, Collection, <, Definition, >]
[&&, !, specializationState, ., canFixupSpecializedFunctionContainingNode, (, nameNode, ), ), {, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =]
[), {, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if]
[), {, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if]
[., canFixupSpecializedFunctionContainingNode, (, nameNode, ), ), {, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt]
[), ), {, return, false, ;, }, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;]
[;, }, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size]
[;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (]
[., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;]
[), ;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState]
[), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, .]
[>, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;]
[., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty]
[), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, .]
[;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, .]
[;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule, =, site, ., module, ;]
[., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition]
[), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule, =, site, ., module]
[), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule, =, site, ., module]
[., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule]
[;, JSModule, callModule, =, site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (, (, callModule, ==]
[., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, JSModule, callModule, =, site, ., module, ;, if, (]
[), ;, JSModule, callModule, =, site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (, (, callModule]
[., contains, (, definition, ), ), ;, JSModule, callModule, =, site, ., module, ;, if, (, (, definitionModule, !=, callModule]
[), ), ;, JSModule, callModule, =, site, ., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (, (]
[;, if, (, (, definitionModule, !=, callModule, ), &&, (, (, callModule, ==, null, ), ||, !, moduleGraph, ., dependsOn]
[., module, ;, if, (, (, definitionModule, !=, callModule, ), &&, (, (, callModule, ==, null, ), ||, !, moduleGraph]
[), {, return, false, ;, }, }, return, true, ;, }, private, void, rewriteCallSites, (, SimpleDefinitionFinder, defFinder, ,, Definition, definition]
[&&, (, (, callModule, ==, null, ), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, ), ), ), {]
[), &&, (, (, callModule, ==, null, ), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, ), ), )]
[!=, callModule, ), &&, (, (, callModule, ==, null, ), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, )]
[), &&, (, (, callModule, ==, null, ), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, ), ), )]
[), {, return, false, ;, }, }, return, true, ;, }, private, void, rewriteCallSites, (, SimpleDefinitionFinder, defFinder, ,, Definition, definition]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, void, rewriteCallSites, (, SimpleDefinitionFinder, defFinder, ,, Definition]
[||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, ), ), ), {, return, false, ;, }, }, return, true]
[), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, ), ), ), {, return, false, ;, }, }, return]
[==, null, ), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, ), ), ), {, return, false, ;, }]
[), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, ), ), ), {, return, false, ;, }, }, return]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, void, rewriteCallSites, (, SimpleDefinitionFinder, defFinder, ,, Definition]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, void, rewriteCallSites, (, SimpleDefinitionFinder, defFinder, ,, Definition]
[., dependsOn, (, callModule, ,, definitionModule, ), ), ), {, return, false, ;, }, }, return, true, ;, }, private]
[,, definitionModule, ), ), ), {, return, false, ;, }, }, return, true, ;, }, private, void, rewriteCallSites, (, SimpleDefinitionFinder]
[), ), ), {, return, false, ;, }, }, return, true, ;, }, private, void, rewriteCallSites, (, SimpleDefinitionFinder, defFinder, ,]
[;, }, }, return, true, ;, }, private, void, rewriteCallSites, (, SimpleDefinitionFinder, defFinder, ,, Definition, definition, ,, String, newMethodName, )]
[;, }, private, void, rewriteCallSites, (, SimpleDefinitionFinder, defFinder, ,, Definition, definition, ,, String, newMethodName, ), {, Collection, <, UseSite, >]
[;, for, (, UseSite, site, :, useSites, ), {, Node, node, =, site, ., node, ;, Node, parent, =, node]
[., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Node, node, =, site, ., node]
[), ;, for, (, UseSite, site, :, useSites, ), {, Node, node, =, site, ., node, ;, Node, parent, =]
[), {, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, Node, objectNode]
[;, Node, parent, =, node, ., getParent, (, ), ;, Node, objectNode, =, node, ., getFirstChild, (, ), ;, node]
[., node, ;, Node, parent, =, node, ., getParent, (, ), ;, Node, objectNode, =, node, ., getFirstChild, (, )]
[;, Node, objectNode, =, node, ., getFirstChild, (, ), ;, node, ., removeChild, (, objectNode, ), ;, parent, ., replaceChild]
[., getParent, (, ), ;, Node, objectNode, =, node, ., getFirstChild, (, ), ;, node, ., removeChild, (, objectNode, )]
[;, node, ., removeChild, (, objectNode, ), ;, parent, ., replaceChild, (, node, ,, objectNode, ), ;, parent, ., addChildToFront]
[., getFirstChild, (, ), ;, node, ., removeChild, (, objectNode, ), ;, parent, ., replaceChild, (, node, ,, objectNode, )]
[;, parent, ., replaceChild, (, node, ,, objectNode, ), ;, parent, ., addChildToFront, (, IR, ., name, (, newMethodName, )]
[., removeChild, (, objectNode, ), ;, parent, ., replaceChild, (, node, ,, objectNode, ), ;, parent, ., addChildToFront, (, IR]
[), ;, parent, ., replaceChild, (, node, ,, objectNode, ), ;, parent, ., addChildToFront, (, IR, ., name, (, newMethodName]
[;, parent, ., addChildToFront, (, IR, ., name, (, newMethodName, ), ., srcref, (, node, ), ), ;, Preconditions, .]
[., replaceChild, (, node, ,, objectNode, ), ;, parent, ., addChildToFront, (, IR, ., name, (, newMethodName, ), ., srcref]
[,, objectNode, ), ;, parent, ., addChildToFront, (, IR, ., name, (, newMethodName, ), ., srcref, (, node, ), )]
[), ;, parent, ., addChildToFront, (, IR, ., name, (, newMethodName, ), ., srcref, (, node, ), ), ;, Preconditions]
[;, Preconditions, ., checkState, (, parent, ., isCall, (, ), ), ;, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[., addChildToFront, (, IR, ., name, (, newMethodName, ), ., srcref, (, node, ), ), ;, Preconditions, ., checkState, (]
[), ;, Preconditions, ., checkState, (, parent, ., isCall, (, ), ), ;, parent, ., putBooleanProp, (, Node, ., FREE_CALL]
[., srcref, (, node, ), ), ;, Preconditions, ., checkState, (, parent, ., isCall, (, ), ), ;, parent, .]
[., name, (, newMethodName, ), ., srcref, (, node, ), ), ;, Preconditions, ., checkState, (, parent, ., isCall, (]
[), ., srcref, (, node, ), ), ;, Preconditions, ., checkState, (, parent, ., isCall, (, ), ), ;, parent]
[), ), ;, Preconditions, ., checkState, (, parent, ., isCall, (, ), ), ;, parent, ., putBooleanProp, (, Node, .]
[;, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (]
[., checkState, (, parent, ., isCall, (, ), ), ;, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[), ;, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, compiler, ., reportCodeChange, (, ), ;, if]
[., isCall, (, ), ), ;, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, compiler, ., reportCodeChange]
[;, compiler, ., reportCodeChange, (, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportSpecializedFunctionContainingNode, (, parent, )]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, specializationState, !=]
[,, true, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportSpecializedFunctionContainingNode]
[., FREE_CALL, ,, true, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, specializationState, !=, null, ), {, specializationState]
[), ;, compiler, ., reportCodeChange, (, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportSpecializedFunctionContainingNode, (, parent]
[;, if, (, specializationState, !=, null, ), {, specializationState, ., reportSpecializedFunctionContainingNode, (, parent, ), ;, }, }, }, private, void]
[., reportCodeChange, (, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportSpecializedFunctionContainingNode, (, parent, ), ;, }]
[), {, specializationState, ., reportSpecializedFunctionContainingNode, (, parent, ), ;, }, }, }, private, void, rewriteDefinition, (, Node, node, ,, String]
[!=, null, ), {, specializationState, ., reportSpecializedFunctionContainingNode, (, parent, ), ;, }, }, }, private, void, rewriteDefinition, (, Node, node]
[), {, specializationState, ., reportSpecializedFunctionContainingNode, (, parent, ), ;, }, }, }, private, void, rewriteDefinition, (, Node, node, ,, String]
[;, }, }, }, private, void, rewriteDefinition, (, Node, node, ,, String, newMethodName, ), {, boolean, isObjLitDefKey, =, node, .]
[., reportSpecializedFunctionContainingNode, (, parent, ), ;, }, }, }, private, void, rewriteDefinition, (, Node, node, ,, String, newMethodName, ), {]
[), ;, }, }, }, private, void, rewriteDefinition, (, Node, node, ,, String, newMethodName, ), {, boolean, isObjLitDefKey, =, node]
[;, Node, parent, =, node, ., getParent, (, ), ;, Node, refNode, =, isObjLitDefKey, ?, node, :, parent, ., getFirstChild]
[., isStringKey, (, ), ;, Node, parent, =, node, ., getParent, (, ), ;, Node, refNode, =, isObjLitDefKey, ?, node]
[;, Node, refNode, =, isObjLitDefKey, ?, node, :, parent, ., getFirstChild, (, ), ;, Node, newNameNode, =, IR, ., name]
[., getParent, (, ), ;, Node, refNode, =, isObjLitDefKey, ?, node, :, parent, ., getFirstChild, (, ), ;, Node, newNameNode]
[;, Node, newNameNode, =, IR, ., name, (, newMethodName, ), ., copyInformationFrom, (, refNode, ), ;, Node, newVarNode, =, IR]
[?, node, :, parent, ., getFirstChild, (, ), ;, Node, newNameNode, =, IR, ., name, (, newMethodName, ), ., copyInformationFrom]
[:, parent, ., getFirstChild, (, ), ;, Node, newNameNode, =, IR, ., name, (, newMethodName, ), ., copyInformationFrom, (, refNode]
[;, Node, newNameNode, =, IR, ., name, (, newMethodName, ), ., copyInformationFrom, (, refNode, ), ;, Node, newVarNode, =, IR]
[., getFirstChild, (, ), ;, Node, newNameNode, =, IR, ., name, (, newMethodName, ), ., copyInformationFrom, (, refNode, ), ;]
[;, Node, newVarNode, =, IR, ., var, (, newNameNode, ), ., copyInformationFrom, (, refNode, ), ;, Node, functionNode, ;, if]
[., copyInformationFrom, (, refNode, ), ;, Node, newVarNode, =, IR, ., var, (, newNameNode, ), ., copyInformationFrom, (, refNode, )]
[., name, (, newMethodName, ), ., copyInformationFrom, (, refNode, ), ;, Node, newVarNode, =, IR, ., var, (, newNameNode, )]
[), ., copyInformationFrom, (, refNode, ), ;, Node, newVarNode, =, IR, ., var, (, newNameNode, ), ., copyInformationFrom, (, refNode]
[), ;, Node, newVarNode, =, IR, ., var, (, newNameNode, ), ., copyInformationFrom, (, refNode, ), ;, Node, functionNode, ;]
[;, Node, functionNode, ;, if, (, !, isObjLitDefKey, ), {, Preconditions, ., checkState, (, parent, ., isAssign, (, ), )]
[., copyInformationFrom, (, refNode, ), ;, Node, functionNode, ;, if, (, !, isObjLitDefKey, ), {, Preconditions, ., checkState, (, parent]
[., var, (, newNameNode, ), ., copyInformationFrom, (, refNode, ), ;, Node, functionNode, ;, if, (, !, isObjLitDefKey, ), {]
[), ., copyInformationFrom, (, refNode, ), ;, Node, functionNode, ;, if, (, !, isObjLitDefKey, ), {, Preconditions, ., checkState, (]
[), ;, Node, functionNode, ;, if, (, !, isObjLitDefKey, ), {, Preconditions, ., checkState, (, parent, ., isAssign, (, )]
[), {, Preconditions, ., checkState, (, parent, ., isAssign, (, ), ), ;, functionNode, =, parent, ., getLastChild, (, )]
[), {, Preconditions, ., checkState, (, parent, ., isAssign, (, ), ), ;, functionNode, =, parent, ., getLastChild, (, )]
[;, functionNode, =, parent, ., getLastChild, (, ), ;, Node, expr, =, parent, ., getParent, (, ), ;, Node, block]
[., checkState, (, parent, ., isAssign, (, ), ), ;, functionNode, =, parent, ., getLastChild, (, ), ;, Node, expr]
[), ;, functionNode, =, parent, ., getLastChild, (, ), ;, Node, expr, =, parent, ., getParent, (, ), ;, Node]
[., isAssign, (, ), ), ;, functionNode, =, parent, ., getLastChild, (, ), ;, Node, expr, =, parent, ., getParent]
[=, parent, ., getLastChild, (, ), ;, Node, expr, =, parent, ., getParent, (, ), ;, Node, block, =, expr]
[;, Node, expr, =, parent, ., getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;, parent]
[., getLastChild, (, ), ;, Node, expr, =, parent, ., getParent, (, ), ;, Node, block, =, expr, ., getParent]
[;, Node, block, =, expr, ., getParent, (, ), ;, parent, ., removeChild, (, functionNode, ), ;, newNameNode, ., addChildToFront]
[., getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;, parent, ., removeChild, (, functionNode, )]
[;, parent, ., removeChild, (, functionNode, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., replaceChild, (, expr]
[., getParent, (, ), ;, parent, ., removeChild, (, functionNode, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block]
[;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., replaceChild, (, expr, ,, newVarNode, ), ;, if, (, specializationState]
[., removeChild, (, functionNode, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., replaceChild, (, expr, ,, newVarNode]
[), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., replaceChild, (, expr, ,, newVarNode, ), ;, if, (]
[;, block, ., replaceChild, (, expr, ,, newVarNode, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction]
[., addChildToFront, (, functionNode, ), ;, block, ., replaceChild, (, expr, ,, newVarNode, ), ;, if, (, specializationState, !=, null]
[), ;, block, ., replaceChild, (, expr, ,, newVarNode, ), ;, if, (, specializationState, !=, null, ), {, specializationState, .]
[;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, else]
[., replaceChild, (, expr, ,, newVarNode, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode]
[,, newVarNode, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;]
[), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }]
[), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, else, {, Preconditions, ., checkState, (, parent]
[!=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, else, {, Preconditions, ., checkState]
[), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, else, {, Preconditions, ., checkState, (, parent]
[;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, functionNode, =, node, .]
[., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isObjectLit, (]
[,, block, ), ;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, functionNode]
[), ;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, functionNode, =, node]
[;, functionNode, =, node, ., getFirstChild, (, ), ;, Node, assign, =, parent, ., getParent, (, ), ;, Node, expr]
[., checkState, (, parent, ., isObjectLit, (, ), ), ;, functionNode, =, node, ., getFirstChild, (, ), ;, Node, assign]
[), ;, functionNode, =, node, ., getFirstChild, (, ), ;, Node, assign, =, parent, ., getParent, (, ), ;, Node]
[., isObjectLit, (, ), ), ;, functionNode, =, node, ., getFirstChild, (, ), ;, Node, assign, =, parent, ., getParent]
[=, node, ., getFirstChild, (, ), ;, Node, assign, =, parent, ., getParent, (, ), ;, Node, expr, =, assign]
[;, Node, assign, =, parent, ., getParent, (, ), ;, Node, expr, =, assign, ., getParent, (, ), ;, Node]
[., getFirstChild, (, ), ;, Node, assign, =, parent, ., getParent, (, ), ;, Node, expr, =, assign, ., getParent]
[;, Node, expr, =, assign, ., getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;, node]
[., getParent, (, ), ;, Node, expr, =, assign, ., getParent, (, ), ;, Node, block, =, expr, ., getParent]
[;, Node, block, =, expr, ., getParent, (, ), ;, node, ., removeChild, (, functionNode, ), ;, parent, ., removeChild]
[., getParent, (, ), ;, Node, block, =, expr, ., getParent, (, ), ;, node, ., removeChild, (, functionNode, )]
[;, node, ., removeChild, (, functionNode, ), ;, parent, ., removeChild, (, node, ), ;, newNameNode, ., addChildToFront, (, functionNode]
[., getParent, (, ), ;, node, ., removeChild, (, functionNode, ), ;, parent, ., removeChild, (, node, ), ;, newNameNode]
[;, parent, ., removeChild, (, node, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., addChildAfter, (, newVarNode]
[., removeChild, (, functionNode, ), ;, parent, ., removeChild, (, node, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;]
[), ;, parent, ., removeChild, (, node, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., addChildAfter, (]
[;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (, specializationState]
[., removeChild, (, node, ), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., addChildAfter, (, newVarNode, ,, expr]
[), ;, newNameNode, ., addChildToFront, (, functionNode, ), ;, block, ., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (]
[;, block, ., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction]
[., addChildToFront, (, functionNode, ), ;, block, ., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (, specializationState, !=, null]
[), ;, block, ., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (, specializationState, !=, null, ), {, specializationState, .]
[;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, String]
[., addChildAfter, (, newVarNode, ,, expr, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode]
[,, expr, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;]
[), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }]
[), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, String, self, =, newMethodName, +, "$self", ;]
[!=, null, ), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, String, self, =, newMethodName, +]
[), {, specializationState, ., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, String, self, =, newMethodName, +, "$self", ;]
[;, }, }, String, self, =, newMethodName, +, "$self", ;, Node, argList, =, functionNode, ., getFirstChild, (, ), ., getNext]
[., reportRemovedFunction, (, functionNode, ,, block, ), ;, }, }, String, self, =, newMethodName, +, "$self", ;, Node, argList, =]
[,, block, ), ;, }, }, String, self, =, newMethodName, +, "$self", ;, Node, argList, =, functionNode, ., getFirstChild, (]
[), ;, }, }, String, self, =, newMethodName, +, "$self", ;, Node, argList, =, functionNode, ., getFirstChild, (, ), .]
[;, Node, argList, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, argList, ., addChildToFront, (, IR, .]
[+, "$self", ;, Node, argList, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, argList, ., addChildToFront, (]
[;, Node, argList, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, argList, ., addChildToFront, (, IR, .]
[;, argList, ., addChildToFront, (, IR, ., name, (, self, ), ., copyInformationFrom, (, functionNode, ), ), ;, Node, body]
[., getNext, (, ), ;, argList, ., addChildToFront, (, IR, ., name, (, self, ), ., copyInformationFrom, (, functionNode, )]
[., getFirstChild, (, ), ., getNext, (, ), ;, argList, ., addChildToFront, (, IR, ., name, (, self, ), .]
[;, Node, body, =, functionNode, ., getLastChild, (, ), ;, replaceReferencesToThis, (, body, ,, self, ), ;, fixFunctionType, (, functionNode]
[., addChildToFront, (, IR, ., name, (, self, ), ., copyInformationFrom, (, functionNode, ), ), ;, Node, body, =, functionNode]
[), ;, Node, body, =, functionNode, ., getLastChild, (, ), ;, replaceReferencesToThis, (, body, ,, self, ), ;, fixFunctionType, (]
[., copyInformationFrom, (, functionNode, ), ), ;, Node, body, =, functionNode, ., getLastChild, (, ), ;, replaceReferencesToThis, (, body, ,]
[., name, (, self, ), ., copyInformationFrom, (, functionNode, ), ), ;, Node, body, =, functionNode, ., getLastChild, (, )]
[), ., copyInformationFrom, (, functionNode, ), ), ;, Node, body, =, functionNode, ., getLastChild, (, ), ;, replaceReferencesToThis, (, body]
[), ), ;, Node, body, =, functionNode, ., getLastChild, (, ), ;, replaceReferencesToThis, (, body, ,, self, ), ;, fixFunctionType]
[;, replaceReferencesToThis, (, body, ,, self, ), ;, fixFunctionType, (, functionNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[., getLastChild, (, ), ;, replaceReferencesToThis, (, body, ,, self, ), ;, fixFunctionType, (, functionNode, ), ;, compiler, ., reportCodeChange]
[;, fixFunctionType, (, functionNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, fixFunctionType, (, Node, functionNode, )]
[,, self, ), ;, fixFunctionType, (, functionNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, fixFunctionType, (]
[), ;, fixFunctionType, (, functionNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, fixFunctionType, (, Node, functionNode]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, fixFunctionType, (, Node, functionNode, ), {, FunctionType, type, =, JSType]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, fixFunctionType, (, Node, functionNode, ), {, FunctionType, type, =]
[;, }, private, void, fixFunctionType, (, Node, functionNode, ), {, FunctionType, type, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType]
[., reportCodeChange, (, ), ;, }, private, void, fixFunctionType, (, Node, functionNode, ), {, FunctionType, type, =, JSType, ., toMaybeFunctionType]
[;, if, (, type, !=, null, ), {, JSTypeRegistry, typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, List, <, JSType]
[., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, type, !=, null, ), {, JSTypeRegistry, typeRegistry, =]
[), ;, if, (, type, !=, null, ), {, JSTypeRegistry, typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, List, <]
[., getJSType, (, ), ), ;, if, (, type, !=, null, ), {, JSTypeRegistry, typeRegistry, =, compiler, ., getTypeRegistry, (]
[), {, JSTypeRegistry, typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, List, <, JSType, >, parameterTypes, =, Lists, ., newArrayList]
[!=, null, ), {, JSTypeRegistry, typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, List, <, JSType, >, parameterTypes, =, Lists]
[), {, JSTypeRegistry, typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, List, <, JSType, >, parameterTypes, =, Lists, ., newArrayList]
[;, List, <, JSType, >, parameterTypes, =, Lists, ., newArrayList, (, ), ;, parameterTypes, ., add, (, type, ., getTypeOfThis]
[., getTypeRegistry, (, ), ;, List, <, JSType, >, parameterTypes, =, Lists, ., newArrayList, (, ), ;, parameterTypes, ., add]
[;, parameterTypes, ., add, (, type, ., getTypeOfThis, (, ), ), ;, for, (, Node, param, :, type, ., getParameters]
[., newArrayList, (, ), ;, parameterTypes, ., add, (, type, ., getTypeOfThis, (, ), ), ;, for, (, Node, param]
[;, for, (, Node, param, :, type, ., getParameters, (, ), ), {, parameterTypes, ., add, (, param, ., getJSType]
[., add, (, type, ., getTypeOfThis, (, ), ), ;, for, (, Node, param, :, type, ., getParameters, (, )]
[), ;, for, (, Node, param, :, type, ., getParameters, (, ), ), {, parameterTypes, ., add, (, param, .]
[., getTypeOfThis, (, ), ), ;, for, (, Node, param, :, type, ., getParameters, (, ), ), {, parameterTypes, .]
[), {, parameterTypes, ., add, (, param, ., getJSType, (, ), ), ;, }, ObjectType, thisType, =, typeRegistry, ., getNativeObjectType]
[., getParameters, (, ), ), {, parameterTypes, ., add, (, param, ., getJSType, (, ), ), ;, }, ObjectType, thisType]
[;, }, ObjectType, thisType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, JSType, returnType, =, type, ., getReturnType]
[., add, (, param, ., getJSType, (, ), ), ;, }, ObjectType, thisType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, .]
[), ;, }, ObjectType, thisType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, JSType, returnType, =, type, .]
[., getJSType, (, ), ), ;, }, ObjectType, thisType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, JSType]
[;, JSType, returnType, =, type, ., getReturnType, (, ), ;, JSType, newType, =, typeRegistry, ., createFunctionType, (, thisType, ,, returnType]
[., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, JSType, returnType, =, type, ., getReturnType, (, ), ;, JSType, newType, =]
[), ;, JSType, returnType, =, type, ., getReturnType, (, ), ;, JSType, newType, =, typeRegistry, ., createFunctionType, (, thisType, ,]
[., UNKNOWN_TYPE, ), ;, JSType, returnType, =, type, ., getReturnType, (, ), ;, JSType, newType, =, typeRegistry, ., createFunctionType, (]
[;, JSType, newType, =, typeRegistry, ., createFunctionType, (, thisType, ,, returnType, ,, parameterTypes, ), ;, functionNode, ., setJSType, (, newType]
[., getReturnType, (, ), ;, JSType, newType, =, typeRegistry, ., createFunctionType, (, thisType, ,, returnType, ,, parameterTypes, ), ;, functionNode]
[;, functionNode, ., setJSType, (, newType, ), ;, }, }, private, void, replaceReferencesToThis, (, Node, node, ,, String, name, )]
[., createFunctionType, (, thisType, ,, returnType, ,, parameterTypes, ), ;, functionNode, ., setJSType, (, newType, ), ;, }, }, private]
[,, returnType, ,, parameterTypes, ), ;, functionNode, ., setJSType, (, newType, ), ;, }, }, private, void, replaceReferencesToThis, (, Node]
[,, parameterTypes, ), ;, functionNode, ., setJSType, (, newType, ), ;, }, }, private, void, replaceReferencesToThis, (, Node, node, ,]
[), ;, functionNode, ., setJSType, (, newType, ), ;, }, }, private, void, replaceReferencesToThis, (, Node, node, ,, String, name]
[;, }, }, private, void, replaceReferencesToThis, (, Node, node, ,, String, name, ), {, if, (, node, ., isFunction, (]
[., setJSType, (, newType, ), ;, }, }, private, void, replaceReferencesToThis, (, Node, node, ,, String, name, ), {, if]
[), ;, }, }, private, void, replaceReferencesToThis, (, Node, node, ,, String, name, ), {, if, (, node, ., isFunction]
[), {, return, ;, }, for, (, Node, child, :, node, ., children, (, ), ), {, if, (, child]
[., isFunction, (, ), ), {, return, ;, }, for, (, Node, child, :, node, ., children, (, ), )]
[), {, if, (, child, ., isThis, (, ), ), {, Node, newName, =, IR, ., name, (, name, )]
[., children, (, ), ), {, if, (, child, ., isThis, (, ), ), {, Node, newName, =, IR, .]
[), {, Node, newName, =, IR, ., name, (, name, ), ;, newName, ., setJSType, (, child, ., getJSType, (]
[., isThis, (, ), ), {, Node, newName, =, IR, ., name, (, name, ), ;, newName, ., setJSType, (]
[;, newName, ., setJSType, (, child, ., getJSType, (, ), ), ;, node, ., replaceChild, (, child, ,, newName, )]
[., name, (, name, ), ;, newName, ., setJSType, (, child, ., getJSType, (, ), ), ;, node, ., replaceChild]
[), ;, newName, ., setJSType, (, child, ., getJSType, (, ), ), ;, node, ., replaceChild, (, child, ,, newName]
[;, node, ., replaceChild, (, child, ,, newName, ), ;, }, else, {, replaceReferencesToThis, (, child, ,, name, ), ;]
[., setJSType, (, child, ., getJSType, (, ), ), ;, node, ., replaceChild, (, child, ,, newName, ), ;, }]
[), ;, node, ., replaceChild, (, child, ,, newName, ), ;, }, else, {, replaceReferencesToThis, (, child, ,, name, )]
[., getJSType, (, ), ), ;, node, ., replaceChild, (, child, ,, newName, ), ;, }, else, {, replaceReferencesToThis, (]
[;, }, else, {, replaceReferencesToThis, (, child, ,, name, ), ;, }, }, }, }]
[., replaceChild, (, child, ,, newName, ), ;, }, else, {, replaceReferencesToThis, (, child, ,, name, ), ;, }, }]
[,, newName, ), ;, }, else, {, replaceReferencesToThis, (, child, ,, name, ), ;, }, }, }, }]
[), ;, }, else, {, replaceReferencesToThis, (, child, ,, name, ), ;, }, }, }, }]
[;, }, }, }, }]
[,, name, ), ;, }, }, }, }]
[), ;, }, }, }, }]
