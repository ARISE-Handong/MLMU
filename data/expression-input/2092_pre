[DateTimeField, {, private, final, DateTimeFieldType, iType, ;, protected, BaseDateTimeField, (, DateTimeFieldType, type, ), {, super, (, ), ;, if, (]
[DateTimeField, {, private, final, DateTimeFieldType, iType, ;, protected, BaseDateTimeField, (, DateTimeFieldType, type, ), {, super, (, ), ;, if, (]
[private, final, DateTimeFieldType, iType, ;, protected, BaseDateTimeField, (, DateTimeFieldType, type, ), {, super, (, ), ;, if, (, type, ==]
[;, protected, BaseDateTimeField, (, DateTimeFieldType, type, ), {, super, (, ), ;, if, (, type, ==, null, ), {, throw]
[(, DateTimeFieldType, type, ), {, super, (, ), ;, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, super, (, ), ;, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException, (, "The type must not be null", ), ;, }]
[(, ), ;, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException, (, "The type must not be null", ), ;, }, iType, =]
[new, IllegalArgumentException, (, "The type must not be null", ), ;, }, iType, =, type, ;, }, public, final, DateTimeFieldType, getType, (, ), {, return]
[}, public, final, DateTimeFieldType, getType, (, ), {, return, iType, ;, }, public, final, String, getName, (, ), {, return]
[}, public, final, DateTimeFieldType, getType, (, ), {, return, iType, ;, }, public, final, String, getName, (, ), {, return]
[getName, (, ), {, return, iType, ., getName, (, ), ;, }, public, final, boolean, isSupported, (, ), {, return]
[abstract, int, get, (, long, instant, ), ;, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, return]
[get, (, long, instant, ), ;, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, return, getAsText, (]
[long, instant, ), ;, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, return, getAsText, (, get, (]
[;, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, return, getAsText, (, get, (, instant, ), ,]
[(, get, (, instant, ), ,, locale, ), ;, }, public, final, String, getAsText, (, long, instant, ), {, return]
[(, instant, ), ,, locale, ), ;, }, public, final, String, getAsText, (, long, instant, ), {, return, getAsText, (]
[), ,, locale, ), ;, }, public, final, String, getAsText, (, long, instant, ), {, return, getAsText, (, instant, ,]
[,, null, ), ;, }, public, String, getAsText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return]
[), ;, }, public, String, getAsText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return, getAsText, (]
[}, public, String, getAsText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return, getAsText, (, fieldValue, ,]
[(, fieldValue, ,, locale, ), ;, }, public, final, String, getAsText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return]
[,, locale, ), ;, }, public, final, String, getAsText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsText, (]
[), ;, }, public, final, String, getAsText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsText, (, partial, ,]
[), ;, }, public, final, String, getAsText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsText, (, partial, ,]
[final, String, getAsText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsText, (, partial, ,, partial, ., get, (]
[partial, ,, Locale, locale, ), {, return, getAsText, (, partial, ,, partial, ., get, (, getType, (, ), ), ,]
[(, ), ), ,, locale, ), ;, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return]
[(, ), ), ,, locale, ), ;, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return]
[locale, ), ;, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, Integer, ., toString, (]
[Integer, ., toString, (, fieldValue, ), ;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, return]
[toString, (, fieldValue, ), ;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, return, getAsShortText, (]
[fieldValue, ), ;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, return, getAsShortText, (, get, (]
[}, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, return, getAsShortText, (, get, (, instant, ), ,]
[(, get, (, instant, ), ,, locale, ), ;, }, public, final, String, getAsShortText, (, long, instant, ), {, return]
[(, instant, ), ,, locale, ), ;, }, public, final, String, getAsShortText, (, long, instant, ), {, return, getAsShortText, (]
[), ,, locale, ), ;, }, public, final, String, getAsShortText, (, long, instant, ), {, return, getAsShortText, (, instant, ,]
[,, null, ), ;, }, public, String, getAsShortText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return]
[), ;, }, public, String, getAsShortText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return, getAsShortText, (]
[}, public, String, getAsShortText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return, getAsShortText, (, fieldValue, ,]
[(, fieldValue, ,, locale, ), ;, }, public, final, String, getAsShortText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return]
[,, locale, ), ;, }, public, final, String, getAsShortText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsShortText, (]
[), ;, }, public, final, String, getAsShortText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsShortText, (, partial, ,]
[), ;, }, public, final, String, getAsShortText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsShortText, (, partial, ,]
[final, String, getAsShortText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsShortText, (, partial, ,, partial, ., get, (]
[partial, ,, Locale, locale, ), {, return, getAsShortText, (, partial, ,, partial, ., get, (, getType, (, ), ), ,]
[(, ), ), ,, locale, ), ;, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return]
[), ,, locale, ), ;, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return, getAsText, (]
[locale, ), ;, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return, getAsText, (, fieldValue, ,]
[getAsText, (, fieldValue, ,, locale, ), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[getAsText, (, fieldValue, ,, locale, ), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, getDurationField, (, ), ., add, (]
[public, long, add, (, long, instant, ,, int, value, ), {, return, getDurationField, (, ), ., add, (, instant, ,]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, getDurationField, (, ), ., add, (]
[public, long, add, (, long, instant, ,, long, value, ), {, return, getDurationField, (, ), ., add, (, instant, ,]
[], add, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (]
[], add, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (]
[(, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (, valueToAdd, ==]
[int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (, valueToAdd, ==, 0, ), {, return]
[values, ,, int, valueToAdd, ), {, if, (, valueToAdd, ==, 0, ), {, return, values, ;, }, DateTimeField, nextField, =]
[), {, if, (, valueToAdd, ==, 0, ), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (]
[), {, if, (, valueToAdd, ==, 0, ), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (]
[if, (, valueToAdd, ==, 0, ), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >]
[{, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max, =]
[values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (]
[}, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,]
[while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =]
[while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =]
[while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =]
[valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, []
[), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[=, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (]
[=, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (]
[(, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=]
[values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {]
[values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {]
[;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, []
[=, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =]
[fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, )]
[proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (]
[proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (]
[max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==]
[fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (]
[fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (]
[=, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==]
[proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw]
[;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (]
[nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }]
[null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =]
[null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =]
[(, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (]
[(, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -]
[new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw]
[., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (]
[nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }]
[getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=]
[getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=]
[(, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (]
[(, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (]
[., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +]
[), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -]
[), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -]
[{, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, []
[IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;]
["Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =]
["Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =]
[}, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (]
[-=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,]
[-=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,]
[max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -]
[1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,]
[-, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,]
[fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;]
[fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;]
[;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, []
[nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =]
[add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (]
[instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,]
[values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (]
[values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (]
[1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <]
[], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =]
[getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (]
[instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,]
[while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =]
[while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =]
[while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =]
[valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, []
[), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[=, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (]
[=, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (]
[(, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=]
[values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {]
[values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {]
[;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, []
[=, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =]
[fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, )]
[proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (]
[proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (]
[min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==]
[fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (]
[fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (]
[=, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==]
[proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw]
[;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (]
[nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }]
[null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =]
[null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =]
[(, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (]
[(, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -]
[new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw]
[., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (]
[nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }]
[getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=]
[getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=]
[(, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (]
[(, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (]
[., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -]
[), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -]
[), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -]
[{, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, []
[IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;]
["Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =]
["Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =]
[}, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (]
[-=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,]
[-=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,]
[min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -]
[1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,]
[-, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,]
[values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -]
[], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;]
[], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;]
[values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, []
[., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =]
[(, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (]
[,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,]
[values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return]
[-, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (]
[), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,]
[values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,]
[fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,]
[fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,]
[=, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values, []
[], addWrapPartial, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (]
[], addWrapPartial, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (]
[(, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (, valueToAdd, ==]
[int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (, valueToAdd, ==, 0, ), {, return]
[values, ,, int, valueToAdd, ), {, if, (, valueToAdd, ==, 0, ), {, return, values, ;, }, DateTimeField, nextField, =]
[), {, if, (, valueToAdd, ==, 0, ), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (]
[), {, if, (, valueToAdd, ==, 0, ), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (]
[if, (, valueToAdd, ==, 0, ), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >]
[{, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max, =]
[values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (]
[}, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,]
[while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =]
[while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =]
[while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =]
[valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, []
[), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[=, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (]
[=, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (]
[(, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=]
[values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {]
[values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {]
[;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, []
[=, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =]
[fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, )]
[proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (]
[proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (]
[max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==]
[fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (]
[fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (]
[=, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==]
[), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=]
[break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (]
[break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (]
[}, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, max, +]
[nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, max, +, 1, ), -]
[nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, max, +, 1, ), -]
[null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, max, +, 1, ), -, values, []
[if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;]
[if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;]
[fieldIndex, ==, 0, ), {, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, []
[), {, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =]
[valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMinimumValue, (]
[(, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,]
[values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }]
[fieldIndex, ], ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =]
[fieldIndex, ], ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =]
[[, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (]
[[, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (]
[], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -]
[,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw]
[., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (]
[nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }]
[getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=]
[getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=]
[(, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (]
[(, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (]
[., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +]
[), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -]
[), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -]
[{, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, []
[IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;]
["Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =]
["Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =]
[}, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (]
[-=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,]
[-=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,]
[max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -]
[1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,]
[-, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,]
[fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;]
[fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;]
[;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, []
[nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =]
[addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (]
[instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,]
[values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (]
[values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (]
[1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <]
[], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =]
[getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (]
[instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,]
[while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =]
[while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =]
[while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =]
[valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, []
[), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[=, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (]
[=, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (]
[(, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=]
[values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {]
[values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {]
[;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, []
[=, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =]
[fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, )]
[proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (]
[proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (]
[min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==]
[fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (]
[fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (]
[=, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==]
[), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=]
[break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (]
[break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (]
[}, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, min, -]
[nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, min, -, 1, ), -]
[nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, min, -, 1, ), -]
[null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, min, -, 1, ), -, values, []
[if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;]
[if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;]
[fieldIndex, ==, 0, ), {, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, []
[), {, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =]
[valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMaximumValue, (]
[(, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,]
[values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }]
[fieldIndex, ], ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =]
[fieldIndex, ], ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =]
[[, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (]
[[, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (]
[], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -]
[,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw]
[., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (]
[nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }]
[getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=]
[getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=]
[(, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (]
[(, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (]
[., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -]
[), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -]
[), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -]
[{, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, []
[IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;]
["Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =]
["Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =]
[}, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (]
[-=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,]
[-=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,]
[min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -]
[1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,]
[-, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,]
[values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -]
[], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;]
[], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;]
[values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, []
[., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =]
[(, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (]
[,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,]
[values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return]
[-, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (]
[), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,]
[values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,]
[fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,]
[fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,]
[=, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values, []
[[, fieldIndex, ], ), ;, }, public, long, addWrapField, (, long, instant, ,, int, value, ), {, int, current, =]
[], ), ;, }, public, long, addWrapField, (, long, instant, ,, int, value, ), {, int, current, =, get, (]
[addWrapField, (, long, instant, ,, int, value, ), {, int, current, =, get, (, instant, ), ;, int, wrapped, =]
[addWrapField, (, long, instant, ,, int, value, ), {, int, current, =, get, (, instant, ), ;, int, wrapped, =]
[,, int, value, ), {, int, current, =, get, (, instant, ), ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (]
[value, ), {, int, current, =, get, (, instant, ), ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,]
[{, int, current, =, get, (, instant, ), ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, value, ,]
[current, =, get, (, instant, ), ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, value, ,, getMinimumValue, (]
[(, instant, ), ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, value, ,, getMinimumValue, (, instant, ), ,]
[), ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, value, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (]
[FieldUtils, ., getWrappedValue, (, current, ,, value, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return]
[getWrappedValue, (, current, ,, value, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set, (]
[current, ,, value, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,]
[addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, int, current, =]
[addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, int, current, =]
[ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, int, current, =, values, []
[int, [, ], values, ,, int, valueToAdd, ), {, int, current, =, values, [, fieldIndex, ], ;, int, wrapped, =]
[int, [, ], values, ,, int, valueToAdd, ), {, int, current, =, values, [, fieldIndex, ], ;, int, wrapped, =]
[,, int, valueToAdd, ), {, int, current, =, values, [, fieldIndex, ], ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (]
[valueToAdd, ), {, int, current, =, values, [, fieldIndex, ], ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,]
[{, int, current, =, values, [, fieldIndex, ], ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, valueToAdd, ,]
[current, =, values, [, fieldIndex, ], ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, valueToAdd, ,, getMinimumValue, (]
[[, fieldIndex, ], ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, valueToAdd, ,, getMinimumValue, (, instant, ), ,]
[], ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, valueToAdd, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (]
[FieldUtils, ., getWrappedValue, (, current, ,, valueToAdd, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return]
[getWrappedValue, (, current, ,, valueToAdd, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set, (]
[current, ,, valueToAdd, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,]
[valueToAdd, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,, fieldIndex, ,]
[getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,, fieldIndex, ,, values, ,]
[fieldIndex, ,, values, ,, wrapped, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[fieldIndex, ,, values, ,, wrapped, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getDurationField, (, ), ., getDifference, (]
[public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getDurationField, (, ), ., getDifference, (, minuendInstant, ,]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getDurationField, (, ), ., getDifferenceAsLong, (]
[public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getDurationField, (, ), ., getDifferenceAsLong, (, minuendInstant, ,]
[int, [, ], set, (, ReadablePartial, partial, ,, int, fieldIndex, ,, int, [, ], values, ,, int, newValue, ), {]
[int, [, ], set, (, ReadablePartial, partial, ,, int, fieldIndex, ,, int, [, ], values, ,, int, newValue, ), {]
[(, ReadablePartial, partial, ,, int, fieldIndex, ,, int, [, ], values, ,, int, newValue, ), {, FieldUtils, ., verifyValueBounds, (]
[partial, ,, int, fieldIndex, ,, int, [, ], values, ,, int, newValue, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[int, fieldIndex, ,, int, [, ], values, ,, int, newValue, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, newValue, ,]
[,, int, [, ], values, ,, int, newValue, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, newValue, ,, getMinimumValue, (]
[[, ], values, ,, int, newValue, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, newValue, ,, getMinimumValue, (, partial, ,]
[,, int, newValue, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, newValue, ,, getMinimumValue, (, partial, ,, values, ), ,]
[newValue, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, newValue, ,, getMinimumValue, (, partial, ,, values, ), ,, getMaximumValue, (]
[{, FieldUtils, ., verifyValueBounds, (, this, ,, newValue, ,, getMinimumValue, (, partial, ,, values, ), ,, getMaximumValue, (, partial, ,]
[(, this, ,, newValue, ,, getMinimumValue, (, partial, ,, values, ), ,, getMaximumValue, (, partial, ,, values, ), ), ;]
[(, this, ,, newValue, ,, getMinimumValue, (, partial, ,, values, ), ,, getMaximumValue, (, partial, ,, values, ), ), ;]
[,, newValue, ,, getMinimumValue, (, partial, ,, values, ), ,, getMaximumValue, (, partial, ,, values, ), ), ;, values, []
[getMinimumValue, (, partial, ,, values, ), ,, getMaximumValue, (, partial, ,, values, ), ), ;, values, [, fieldIndex, ], =]
[getMaximumValue, (, partial, ,, values, ), ), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i, =]
[getMaximumValue, (, partial, ,, values, ), ), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i, =]
[partial, ,, values, ), ), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i, =, fieldIndex, +]
[values, ), ), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;]
[values, ), ), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;]
[), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;, i, <]
[), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;, i, <]
[=, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;, i, <, partial, ., size, (, ), ;]
[=, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;, i, <, partial, ., size, (, ), ;]
[=, fieldIndex, +, 1, ;, i, <, partial, ., size, (, ), ;, i, ++, ), {, DateTimeField, field, =]
[=, fieldIndex, +, 1, ;, i, <, partial, ., size, (, ), ;, i, ++, ), {, DateTimeField, field, =]
[;, i, <, partial, ., size, (, ), ;, i, ++, ), {, DateTimeField, field, =, partial, ., getField, (]
[size, (, ), ;, i, ++, ), {, DateTimeField, field, =, partial, ., getField, (, i, ), ;, if, (]
[size, (, ), ;, i, ++, ), {, DateTimeField, field, =, partial, ., getField, (, i, ), ;, if, (]
[size, (, ), ;, i, ++, ), {, DateTimeField, field, =, partial, ., getField, (, i, ), ;, if, (]
[), ;, i, ++, ), {, DateTimeField, field, =, partial, ., getField, (, i, ), ;, if, (, values, []
[++, ), {, DateTimeField, field, =, partial, ., getField, (, i, ), ;, if, (, values, [, i, ], >]
[++, ), {, DateTimeField, field, =, partial, ., getField, (, i, ), ;, if, (, values, [, i, ], >]
[field, =, partial, ., getField, (, i, ), ;, if, (, values, [, i, ], >, field, ., getMaximumValue, (]
[partial, ., getField, (, i, ), ;, if, (, values, [, i, ], >, field, ., getMaximumValue, (, partial, ,]
[i, ), ;, if, (, values, [, i, ], >, field, ., getMaximumValue, (, partial, ,, values, ), ), {]
[i, ), ;, if, (, values, [, i, ], >, field, ., getMaximumValue, (, partial, ,, values, ), ), {]
[;, if, (, values, [, i, ], >, field, ., getMaximumValue, (, partial, ,, values, ), ), {, values, []
[values, [, i, ], >, field, ., getMaximumValue, (, partial, ,, values, ), ), {, values, [, i, ], =]
[values, [, i, ], >, field, ., getMaximumValue, (, partial, ,, values, ), ), {, values, [, i, ], =]
[>, field, ., getMaximumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field, ., getMaximumValue, (]
[., getMaximumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field, ., getMaximumValue, (, partial, ,]
[), ), {, values, [, i, ], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (]
[), ), {, values, [, i, ], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (]
[), ), {, values, [, i, ], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (]
[{, values, [, i, ], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (, values, []
[i, ], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (, values, [, i, ], <]
[i, ], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (, values, [, i, ], <]
[., getMaximumValue, (, partial, ,, values, ), ;, }, if, (, values, [, i, ], <, field, ., getMinimumValue, (]
[(, partial, ,, values, ), ;, }, if, (, values, [, i, ], <, field, ., getMinimumValue, (, partial, ,]
[), ;, }, if, (, values, [, i, ], <, field, ., getMinimumValue, (, partial, ,, values, ), ), {]
[), ;, }, if, (, values, [, i, ], <, field, ., getMinimumValue, (, partial, ,, values, ), ), {]
[}, if, (, values, [, i, ], <, field, ., getMinimumValue, (, partial, ,, values, ), ), {, values, []
[values, [, i, ], <, field, ., getMinimumValue, (, partial, ,, values, ), ), {, values, [, i, ], =]
[values, [, i, ], <, field, ., getMinimumValue, (, partial, ,, values, ), ), {, values, [, i, ], =]
[<, field, ., getMinimumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field, ., getMinimumValue, (]
[., getMinimumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field, ., getMinimumValue, (, partial, ,]
[), ), {, values, [, i, ], =, field, ., getMinimumValue, (, partial, ,, values, ), ;, }, }, return]
[values, ;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, int, value, =]
[}, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, int, value, =, convertText, (]
[long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, int, value, =, convertText, (, text, ,]
[instant, ,, String, text, ,, Locale, locale, ), {, int, value, =, convertText, (, text, ,, locale, ), ;, return]
[String, text, ,, Locale, locale, ), {, int, value, =, convertText, (, text, ,, locale, ), ;, return, set, (]
[,, Locale, locale, ), {, int, value, =, convertText, (, text, ,, locale, ), ;, return, set, (, instant, ,]
[(, instant, ,, value, ), ;, }, public, final, long, set, (, long, instant, ,, String, text, ), {, return]
[,, value, ), ;, }, public, final, long, set, (, long, instant, ,, String, text, ), {, return, set, (]
[), ;, }, public, final, long, set, (, long, instant, ,, String, text, ), {, return, set, (, instant, ,]
[}, public, final, long, set, (, long, instant, ,, String, text, ), {, return, set, (, instant, ,, text, ,]
[instant, ,, int, fieldIndex, ,, int, [, ], values, ,, String, text, ,, Locale, locale, ), {, int, value, =]
[int, fieldIndex, ,, int, [, ], values, ,, String, text, ,, Locale, locale, ), {, int, value, =, convertText, (]
[,, int, [, ], values, ,, String, text, ,, Locale, locale, ), {, int, value, =, convertText, (, text, ,]
[values, ,, String, text, ,, Locale, locale, ), {, int, value, =, convertText, (, text, ,, locale, ), ;, return]
[String, text, ,, Locale, locale, ), {, int, value, =, convertText, (, text, ,, locale, ), ;, return, set, (]
[,, Locale, locale, ), {, int, value, =, convertText, (, text, ,, locale, ), ;, return, set, (, instant, ,]
[locale, ), {, int, value, =, convertText, (, text, ,, locale, ), ;, return, set, (, instant, ,, fieldIndex, ,]
[{, int, value, =, convertText, (, text, ,, locale, ), ;, return, set, (, instant, ,, fieldIndex, ,, values, ,]
[values, ,, value, ), ;, }, protected, int, convertText, (, String, text, ,, Locale, locale, ), {, try, {, return]
[values, ,, value, ), ;, }, protected, int, convertText, (, String, text, ,, Locale, locale, ), {, try, {, return]
[;, }, protected, int, convertText, (, String, text, ,, Locale, locale, ), {, try, {, return, Integer, ., parseInt, (]
[), {, try, {, return, Integer, ., parseInt, (, text, ), ;, }, catch, (, NumberFormatException, ex, ), {, throw]
[{, return, Integer, ., parseInt, (, text, ), ;, }, catch, (, NumberFormatException, ex, ), {, throw, new, IllegalFieldValueException, (]
[parseInt, (, text, ), ;, }, catch, (, NumberFormatException, ex, ), {, throw, new, IllegalFieldValueException, (, getType, (, ), ,]
[getDurationField, (, ), ;, public, abstract, DurationField, getRangeDurationField, (, ), ;, public, boolean, isLeap, (, long, instant, ), {, return]
[boolean, isLeap, (, long, instant, ), {, return, false, ;, }, public, int, getLeapAmount, (, long, instant, ), {, return]
[}, public, int, getLeapAmount, (, long, instant, ), {, return, 0, ;, }, public, DurationField, getLeapDurationField, (, ), {, return]
[return, null, ;, }, public, abstract, int, getMinimumValue, (, ), ;, public, int, getMinimumValue, (, long, instant, ), {, return]
[(, long, instant, ), {, return, getMinimumValue, (, ), ;, }, public, int, getMinimumValue, (, ReadablePartial, instant, ), {, return]
[return, getMinimumValue, (, ), ;, }, public, int, getMinimumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return]
[(, ), ;, }, public, int, getMinimumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return, getMinimumValue, (]
[instant, ), ;, }, public, abstract, int, getMaximumValue, (, ), ;, public, int, getMaximumValue, (, long, instant, ), {, return]
[(, long, instant, ), {, return, getMaximumValue, (, ), ;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ), {, return]
[return, getMaximumValue, (, ), ;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return]
[(, ), ;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return, getMaximumValue, (]
[), {, return, getMaximumValue, (, instant, ), ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, int, max, =]
[), ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, int, max, =, getMaximumValue, (, ), ;, if, (]
[), ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, int, max, =, getMaximumValue, (, ), ;, if, (]
[}, public, int, getMaximumTextLength, (, Locale, locale, ), {, int, max, =, getMaximumValue, (, ), ;, if, (, max, >=]
[Locale, locale, ), {, int, max, =, getMaximumValue, (, ), ;, if, (, max, >=, 0, ), {, if, (]
[Locale, locale, ), {, int, max, =, getMaximumValue, (, ), ;, if, (, max, >=, 0, ), {, if, (]
[), {, int, max, =, getMaximumValue, (, ), ;, if, (, max, >=, 0, ), {, if, (, max, <]
[=, getMaximumValue, (, ), ;, if, (, max, >=, 0, ), {, if, (, max, <, 10, ), {, return]
[(, max, >=, 0, ), {, if, (, max, <, 10, ), {, return, 1, ;, }, else, if, (]
[(, max, >=, 0, ), {, if, (, max, <, 10, ), {, return, 1, ;, }, else, if, (]
[>=, 0, ), {, if, (, max, <, 10, ), {, return, 1, ;, }, else, if, (, max, <]
[if, (, max, <, 10, ), {, return, 1, ;, }, else, if, (, max, <, 100, ), {, return]
[{, return, 1, ;, }, else, if, (, max, <, 100, ), {, return, 2, ;, }, else, if, (]
[{, return, 1, ;, }, else, if, (, max, <, 100, ), {, return, 2, ;, }, else, if, (]
[1, ;, }, else, if, (, max, <, 100, ), {, return, 2, ;, }, else, if, (, max, <]
[if, (, max, <, 100, ), {, return, 2, ;, }, else, if, (, max, <, 1000, ), {, return]
[), {, return, 2, ;, }, else, if, (, max, <, 1000, ), {, return, 3, ;, }, }, return]
[), {, return, 2, ;, }, else, if, (, max, <, 1000, ), {, return, 3, ;, }, }, return]
[), {, return, 2, ;, }, else, if, (, max, <, 1000, ), {, return, 3, ;, }, }, return]
[;, }, else, if, (, max, <, 1000, ), {, return, 3, ;, }, }, return, Integer, ., toString, (]
[., toString, (, max, ), ., length, (, ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return]
[(, max, ), ., length, (, ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, getMaximumTextLength, (]
[public, abstract, long, roundFloor, (, long, instant, ), ;, public, long, roundCeiling, (, long, instant, ), {, long, newInstant, =]
[long, roundFloor, (, long, instant, ), ;, public, long, roundCeiling, (, long, instant, ), {, long, newInstant, =, roundFloor, (]
[), ;, public, long, roundCeiling, (, long, instant, ), {, long, newInstant, =, roundFloor, (, instant, ), ;, if, (]
[), ;, public, long, roundCeiling, (, long, instant, ), {, long, newInstant, =, roundFloor, (, instant, ), ;, if, (]
[public, long, roundCeiling, (, long, instant, ), {, long, newInstant, =, roundFloor, (, instant, ), ;, if, (, newInstant, !=]
[(, long, instant, ), {, long, newInstant, =, roundFloor, (, instant, ), ;, if, (, newInstant, !=, instant, ), {]
[instant, ), {, long, newInstant, =, roundFloor, (, instant, ), ;, if, (, newInstant, !=, instant, ), {, instant, =]
[{, long, newInstant, =, roundFloor, (, instant, ), ;, if, (, newInstant, !=, instant, ), {, instant, =, add, (]
[newInstant, =, roundFloor, (, instant, ), ;, if, (, newInstant, !=, instant, ), {, instant, =, add, (, newInstant, ,]
[), ;, if, (, newInstant, !=, instant, ), {, instant, =, add, (, newInstant, ,, 1, ), ;, }, return]
[,, 1, ), ;, }, return, instant, ;, }, public, long, roundHalfFloor, (, long, instant, ), {, long, floor, =]
[), ;, }, return, instant, ;, }, public, long, roundHalfFloor, (, long, instant, ), {, long, floor, =, roundFloor, (]
[}, public, long, roundHalfFloor, (, long, instant, ), {, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =]
[long, roundHalfFloor, (, long, instant, ), {, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (]
[{, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =]
[{, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =]
[floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -]
[), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =]
[), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =]
[long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -]
[(, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (]
[(, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (]
[), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <=]
[=, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <=, diffToCeiling, ), {, return]
[diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <=, diffToCeiling, ), {, return, floor, ;, }, else, {, return]
[;, }, else, {, return, ceiling, ;, }, }, public, long, roundHalfCeiling, (, long, instant, ), {, long, floor, =]
[else, {, return, ceiling, ;, }, }, public, long, roundHalfCeiling, (, long, instant, ), {, long, floor, =, roundFloor, (]
[}, public, long, roundHalfCeiling, (, long, instant, ), {, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =]
[long, roundHalfCeiling, (, long, instant, ), {, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (]
[{, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =]
[{, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =]
[floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -]
[), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =]
[), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =]
[long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -]
[(, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (]
[(, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (]
[), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffToCeiling, <=]
[=, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffToCeiling, <=, diffFromFloor, ), {, return]
[diffToCeiling, =, ceiling, -, instant, ;, if, (, diffToCeiling, <=, diffFromFloor, ), {, return, ceiling, ;, }, else, {, return]
[;, }, else, {, return, floor, ;, }, }, public, long, roundHalfEven, (, long, instant, ), {, long, floor, =]
[else, {, return, floor, ;, }, }, public, long, roundHalfEven, (, long, instant, ), {, long, floor, =, roundFloor, (]
[}, public, long, roundHalfEven, (, long, instant, ), {, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =]
[long, roundHalfEven, (, long, instant, ), {, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (]
[{, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =]
[{, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =]
[floor, =, roundFloor, (, instant, ), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -]
[), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =]
[), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =]
[long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -]
[(, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (]
[(, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (]
[), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <]
[=, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <, diffToCeiling, ), {, return]
[diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <, diffToCeiling, ), {, return, floor, ;, }, else, if, (]
[diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <, diffToCeiling, ), {, return, floor, ;, }, else, if, (]
[ceiling, -, instant, ;, if, (, diffFromFloor, <, diffToCeiling, ), {, return, floor, ;, }, else, if, (, diffToCeiling, <]
[if, (, diffFromFloor, <, diffToCeiling, ), {, return, floor, ;, }, else, if, (, diffToCeiling, <, diffFromFloor, ), {, return]
[return, floor, ;, }, else, if, (, diffToCeiling, <, diffFromFloor, ), {, return, ceiling, ;, }, else, {, if, (]
[return, floor, ;, }, else, if, (, diffToCeiling, <, diffFromFloor, ), {, return, ceiling, ;, }, else, {, if, (]
[floor, ;, }, else, if, (, diffToCeiling, <, diffFromFloor, ), {, return, ceiling, ;, }, else, {, if, (, (]
[floor, ;, }, else, if, (, diffToCeiling, <, diffFromFloor, ), {, return, ceiling, ;, }, else, {, if, (, (]
[}, else, if, (, diffToCeiling, <, diffFromFloor, ), {, return, ceiling, ;, }, else, {, if, (, (, get, (]
[(, diffToCeiling, <, diffFromFloor, ), {, return, ceiling, ;, }, else, {, if, (, (, get, (, ceiling, ), &]
[diffFromFloor, ), {, return, ceiling, ;, }, else, {, if, (, (, get, (, ceiling, ), &, 1, ), ==]
[ceiling, ;, }, else, {, if, (, (, get, (, ceiling, ), &, 1, ), ==, 0, ), {, return]
[{, if, (, (, get, (, ceiling, ), &, 1, ), ==, 0, ), {, return, ceiling, ;, }, return]
[), {, return, ceiling, ;, }, return, floor, ;, }, }, public, long, remainder, (, long, instant, ), {, return]
[), {, return, ceiling, ;, }, return, floor, ;, }, }, public, long, remainder, (, long, instant, ), {, return]
[return, ceiling, ;, }, return, floor, ;, }, }, public, long, remainder, (, long, instant, ), {, return, instant, -]
[;, }, return, floor, ;, }, }, public, long, remainder, (, long, instant, ), {, return, instant, -, roundFloor, (]
[long, instant, ), {, return, instant, -, roundFloor, (, instant, ), ;, }, public, String, toString, (, ), {, return]
[long, instant, ), {, return, instant, -, roundFloor, (, instant, ), ;, }, public, String, toString, (, ), {, return]
[long, instant, ), {, return, instant, -, roundFloor, (, instant, ), ;, }, public, String, toString, (, ), {, return]
[), {, return, instant, -, roundFloor, (, instant, ), ;, }, public, String, toString, (, ), {, return, "DateTimeField[", +]
[-, roundFloor, (, instant, ), ;, }, public, String, toString, (, ), {, return, "DateTimeField[", +, getName, (, ), +]
