[., util, ., FastMath, ;, public, abstract, class, BitsStreamGenerator, implements, RandomGenerator, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[,, Serializable, {, private, static, final, long, serialVersionUID, =, 20130104L, ;, private, double, nextGaussian, ;, public, BitsStreamGenerator, (, ), {]
[{, private, static, final, long, serialVersionUID, =, 20130104L, ;, private, double, nextGaussian, ;, public, BitsStreamGenerator, (, ), {, nextGaussian, =]
[{, private, static, final, long, serialVersionUID, =, 20130104L, ;, private, double, nextGaussian, ;, public, BitsStreamGenerator, (, ), {, nextGaussian, =]
[long, seed, ), ;, protected, abstract, int, next, (, int, bits, ), ;, public, boolean, nextBoolean, (, ), {, return]
[long, seed, ), ;, protected, abstract, int, next, (, int, bits, ), ;, public, boolean, nextBoolean, (, ), {, return]
[), ;, protected, abstract, int, next, (, int, bits, ), ;, public, boolean, nextBoolean, (, ), {, return, next, (]
[abstract, int, next, (, int, bits, ), ;, public, boolean, nextBoolean, (, ), {, return, next, (, 1, ), !=]
[(, 1, ), !=, 0, ;, }, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, i, =]
[}, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, i, =, 0, ;, final, int, iEnd, =]
[}, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, i, =, 0, ;, final, int, iEnd, =]
[}, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, i, =, 0, ;, final, int, iEnd, =]
[(, byte, [, ], bytes, ), {, int, i, =, 0, ;, final, int, iEnd, =, bytes, ., length, -]
[bytes, ), {, int, i, =, 0, ;, final, int, iEnd, =, bytes, ., length, -, 3, ;, while, (]
[bytes, ), {, int, i, =, 0, ;, final, int, iEnd, =, bytes, ., length, -, 3, ;, while, (]
[{, int, i, =, 0, ;, final, int, iEnd, =, bytes, ., length, -, 3, ;, while, (, i, <]
[int, iEnd, =, bytes, ., length, -, 3, ;, while, (, i, <, iEnd, ), {, final, int, random, =]
[=, bytes, ., length, -, 3, ;, while, (, i, <, iEnd, ), {, final, int, random, =, next, (]
[length, -, 3, ;, while, (, i, <, iEnd, ), {, final, int, random, =, next, (, 32, ), ;]
[length, -, 3, ;, while, (, i, <, iEnd, ), {, final, int, random, =, next, (, 32, ), ;]
[3, ;, while, (, i, <, iEnd, ), {, final, int, random, =, next, (, 32, ), ;, bytes, []
[(, i, <, iEnd, ), {, final, int, random, =, next, (, 32, ), ;, bytes, [, i, ], =]
[iEnd, ), {, final, int, random, =, next, (, 32, ), ;, bytes, [, i, ], =, (, byte, )]
[), {, final, int, random, =, next, (, 32, ), ;, bytes, [, i, ], =, (, byte, ), (]
[), {, final, int, random, =, next, (, 32, ), ;, bytes, [, i, ], =, (, byte, ), (]
[final, int, random, =, next, (, 32, ), ;, bytes, [, i, ], =, (, byte, ), (, random, &]
[=, next, (, 32, ), ;, bytes, [, i, ], =, (, byte, ), (, random, &, 0xff, ), ;]
[=, next, (, 32, ), ;, bytes, [, i, ], =, (, byte, ), (, random, &, 0xff, ), ;]
[(, 32, ), ;, bytes, [, i, ], =, (, byte, ), (, random, &, 0xff, ), ;, bytes, []
[(, 32, ), ;, bytes, [, i, ], =, (, byte, ), (, random, &, 0xff, ), ;, bytes, []
[), ;, bytes, [, i, ], =, (, byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +]
[[, i, ], =, (, byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +, 1, ], =]
[=, (, byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +, 1, ], =, (, byte, )]
[(, byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +, 1, ], =, (, byte, ), (]
[(, byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +, 1, ], =, (, byte, ), (]
[byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +, 1, ], =, (, byte, ), (, (]
[byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +, 1, ], =, (, byte, ), (, (]
[random, &, 0xff, ), ;, bytes, [, i, +, 1, ], =, (, byte, ), (, (, random, >, >]
[), ;, bytes, [, i, +, 1, ], =, (, byte, ), (, (, random, >, >, 8, ), &]
[[, i, +, 1, ], =, (, byte, ), (, (, random, >, >, 8, ), &, 0xff, ), ;]
[[, i, +, 1, ], =, (, byte, ), (, (, random, >, >, 8, ), &, 0xff, ), ;]
[+, 1, ], =, (, byte, ), (, (, random, >, >, 8, ), &, 0xff, ), ;, bytes, []
[+, 1, ], =, (, byte, ), (, (, random, >, >, 8, ), &, 0xff, ), ;, bytes, []
[], =, (, byte, ), (, (, random, >, >, 8, ), &, 0xff, ), ;, bytes, [, i, +]
[byte, ), (, (, random, >, >, 8, ), &, 0xff, ), ;, bytes, [, i, +, 2, ], =]
[(, random, >, >, 8, ), &, 0xff, ), ;, bytes, [, i, +, 2, ], =, (, byte, )]
[random, >, >, 8, ), &, 0xff, ), ;, bytes, [, i, +, 2, ], =, (, byte, ), (]
[random, >, >, 8, ), &, 0xff, ), ;, bytes, [, i, +, 2, ], =, (, byte, ), (]
[>, >, 8, ), &, 0xff, ), ;, bytes, [, i, +, 2, ], =, (, byte, ), (, (]
[>, >, 8, ), &, 0xff, ), ;, bytes, [, i, +, 2, ], =, (, byte, ), (, (]
[), &, 0xff, ), ;, bytes, [, i, +, 2, ], =, (, byte, ), (, (, random, >, >]
[), ;, bytes, [, i, +, 2, ], =, (, byte, ), (, (, random, >, >, 16, ), &]
[[, i, +, 2, ], =, (, byte, ), (, (, random, >, >, 16, ), &, 0xff, ), ;]
[[, i, +, 2, ], =, (, byte, ), (, (, random, >, >, 16, ), &, 0xff, ), ;]
[+, 2, ], =, (, byte, ), (, (, random, >, >, 16, ), &, 0xff, ), ;, bytes, []
[+, 2, ], =, (, byte, ), (, (, random, >, >, 16, ), &, 0xff, ), ;, bytes, []
[], =, (, byte, ), (, (, random, >, >, 16, ), &, 0xff, ), ;, bytes, [, i, +]
[byte, ), (, (, random, >, >, 16, ), &, 0xff, ), ;, bytes, [, i, +, 3, ], =]
[(, random, >, >, 16, ), &, 0xff, ), ;, bytes, [, i, +, 3, ], =, (, byte, )]
[random, >, >, 16, ), &, 0xff, ), ;, bytes, [, i, +, 3, ], =, (, byte, ), (]
[random, >, >, 16, ), &, 0xff, ), ;, bytes, [, i, +, 3, ], =, (, byte, ), (]
[>, >, 16, ), &, 0xff, ), ;, bytes, [, i, +, 3, ], =, (, byte, ), (, (]
[>, >, 16, ), &, 0xff, ), ;, bytes, [, i, +, 3, ], =, (, byte, ), (, (]
[), &, 0xff, ), ;, bytes, [, i, +, 3, ], =, (, byte, ), (, (, random, >, >]
[), ;, bytes, [, i, +, 3, ], =, (, byte, ), (, (, random, >, >, 24, ), &]
[[, i, +, 3, ], =, (, byte, ), (, (, random, >, >, 24, ), &, 0xff, ), ;]
[+, 3, ], =, (, byte, ), (, (, random, >, >, 24, ), &, 0xff, ), ;, i, +=]
[), (, (, random, >, >, 24, ), &, 0xff, ), ;, i, +=, 4, ;, }, int, random, =]
[(, random, >, >, 24, ), &, 0xff, ), ;, i, +=, 4, ;, }, int, random, =, next, (]
[), &, 0xff, ), ;, i, +=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (]
[), &, 0xff, ), ;, i, +=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (]
[0xff, ), ;, i, +=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (, i, <]
[0xff, ), ;, i, +=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (, i, <]
[4, ;, }, int, random, =, next, (, 32, ), ;, while, (, i, <, bytes, ., length, ), {]
[4, ;, }, int, random, =, next, (, 32, ), ;, while, (, i, <, bytes, ., length, ), {]
[}, int, random, =, next, (, 32, ), ;, while, (, i, <, bytes, ., length, ), {, bytes, []
[}, int, random, =, next, (, 32, ), ;, while, (, i, <, bytes, ., length, ), {, bytes, []
[next, (, 32, ), ;, while, (, i, <, bytes, ., length, ), {, bytes, [, i, ++, ], =]
[), ;, while, (, i, <, bytes, ., length, ), {, bytes, [, i, ++, ], =, (, byte, )]
[;, while, (, i, <, bytes, ., length, ), {, bytes, [, i, ++, ], =, (, byte, ), (]
[;, while, (, i, <, bytes, ., length, ), {, bytes, [, i, ++, ], =, (, byte, ), (]
[(, i, <, bytes, ., length, ), {, bytes, [, i, ++, ], =, (, byte, ), (, random, &]
[bytes, ., length, ), {, bytes, [, i, ++, ], =, (, byte, ), (, random, &, 0xff, ), ;]
[length, ), {, bytes, [, i, ++, ], =, (, byte, ), (, random, &, 0xff, ), ;, random, =]
[length, ), {, bytes, [, i, ++, ], =, (, byte, ), (, random, &, 0xff, ), ;, random, =]
[bytes, [, i, ++, ], =, (, byte, ), (, random, &, 0xff, ), ;, random, =, random, >, >]
[;, random, =, random, >, >, 8, ;, }, }, public, double, nextDouble, (, ), {, final, long, high, =]
[;, random, =, random, >, >, 8, ;, }, }, public, double, nextDouble, (, ), {, final, long, high, =]
[random, =, random, >, >, 8, ;, }, }, public, double, nextDouble, (, ), {, final, long, high, =, (]
[>, >, 8, ;, }, }, public, double, nextDouble, (, ), {, final, long, high, =, (, (, long, )]
[8, ;, }, }, public, double, nextDouble, (, ), {, final, long, high, =, (, (, long, ), next, (]
[public, double, nextDouble, (, ), {, final, long, high, =, (, (, long, ), next, (, 26, ), ), <<]
[final, long, high, =, (, (, long, ), next, (, 26, ), ), <<, 26, ;, final, int, low, =]
[high, =, (, (, long, ), next, (, 26, ), ), <<, 26, ;, final, int, low, =, next, (]
[long, ), next, (, 26, ), ), <<, 26, ;, final, int, low, =, next, (, 26, ), ;, return]
[long, ), next, (, 26, ), ), <<, 26, ;, final, int, low, =, next, (, 26, ), ;, return]
[), next, (, 26, ), ), <<, 26, ;, final, int, low, =, next, (, 26, ), ;, return, (]
[), next, (, 26, ), ), <<, 26, ;, final, int, low, =, next, (, 26, ), ;, return, (]
[(, 26, ), ), <<, 26, ;, final, int, low, =, next, (, 26, ), ;, return, (, high, |]
[), <<, 26, ;, final, int, low, =, next, (, 26, ), ;, return, (, high, |, low, ), *]
[26, ), ;, return, (, high, |, low, ), *, 0x1.0p-52d, ;, }, public, float, nextFloat, (, ), {, return]
[26, ), ;, return, (, high, |, low, ), *, 0x1.0p-52d, ;, }, public, float, nextFloat, (, ), {, return]
[;, return, (, high, |, low, ), *, 0x1.0p-52d, ;, }, public, float, nextFloat, (, ), {, return, next, (]
[high, |, low, ), *, 0x1.0p-52d, ;, }, public, float, nextFloat, (, ), {, return, next, (, 23, ), *]
[next, (, 23, ), *, 0x1.0p-23f, ;, }, public, double, nextGaussian, (, ), {, final, double, random, ;, if, (]
[next, (, 23, ), *, 0x1.0p-23f, ;, }, public, double, nextGaussian, (, ), {, final, double, random, ;, if, (]
[*, 0x1.0p-23f, ;, }, public, double, nextGaussian, (, ), {, final, double, random, ;, if, (, Double, ., isNaN, (]
[), {, final, double, random, ;, if, (, Double, ., isNaN, (, nextGaussian, ), ), {, final, double, x, =]
[Double, ., isNaN, (, nextGaussian, ), ), {, final, double, x, =, nextDouble, (, ), ;, final, double, y, =]
[final, double, x, =, nextDouble, (, ), ;, final, double, y, =, nextDouble, (, ), ;, final, double, alpha, =]
[final, double, x, =, nextDouble, (, ), ;, final, double, y, =, nextDouble, (, ), ;, final, double, alpha, =]
[final, double, x, =, nextDouble, (, ), ;, final, double, y, =, nextDouble, (, ), ;, final, double, alpha, =]
[x, =, nextDouble, (, ), ;, final, double, y, =, nextDouble, (, ), ;, final, double, alpha, =, 2, *]
[x, =, nextDouble, (, ), ;, final, double, y, =, nextDouble, (, ), ;, final, double, alpha, =, 2, *]
[), ;, final, double, y, =, nextDouble, (, ), ;, final, double, alpha, =, 2, *, FastMath, ., PI, *]
[nextDouble, (, ), ;, final, double, alpha, =, 2, *, FastMath, ., PI, *, x, ;, final, double, r, =]
[nextDouble, (, ), ;, final, double, alpha, =, 2, *, FastMath, ., PI, *, x, ;, final, double, r, =]
[final, double, alpha, =, 2, *, FastMath, ., PI, *, x, ;, final, double, r, =, FastMath, ., sqrt, (]
[final, double, alpha, =, 2, *, FastMath, ., PI, *, x, ;, final, double, r, =, FastMath, ., sqrt, (]
[double, alpha, =, 2, *, FastMath, ., PI, *, x, ;, final, double, r, =, FastMath, ., sqrt, (, -]
[=, 2, *, FastMath, ., PI, *, x, ;, final, double, r, =, FastMath, ., sqrt, (, -, 2, *]
[=, 2, *, FastMath, ., PI, *, x, ;, final, double, r, =, FastMath, ., sqrt, (, -, 2, *]
[., PI, *, x, ;, final, double, r, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (]
[;, final, double, r, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, y, ), ), ;]
[double, r, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, y, ), ), ;, random, =]
[double, r, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, y, ), ), ;, random, =]
[=, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, y, ), ), ;, random, =, r, *]
[=, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, y, ), ), ;, random, =, r, *]
[(, -, 2, *, FastMath, ., log, (, y, ), ), ;, random, =, r, *, FastMath, ., cos, (]
[*, FastMath, ., log, (, y, ), ), ;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;]
[., log, (, y, ), ), ;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =]
[., log, (, y, ), ), ;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =]
[(, y, ), ), ;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =, r, *]
[(, y, ), ), ;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =, r, *]
[;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =, r, *, FastMath, ., sin, (]
[., cos, (, alpha, ), ;, nextGaussian, =, r, *, FastMath, ., sin, (, alpha, ), ;, }, else, {]
[(, alpha, ), ;, nextGaussian, =, r, *, FastMath, ., sin, (, alpha, ), ;, }, else, {, random, =]
[), ;, nextGaussian, =, r, *, FastMath, ., sin, (, alpha, ), ;, }, else, {, random, =, nextGaussian, ;]
[nextGaussian, =, r, *, FastMath, ., sin, (, alpha, ), ;, }, else, {, random, =, nextGaussian, ;, nextGaussian, =]
[nextGaussian, =, r, *, FastMath, ., sin, (, alpha, ), ;, }, else, {, random, =, nextGaussian, ;, nextGaussian, =]
[sin, (, alpha, ), ;, }, else, {, random, =, nextGaussian, ;, nextGaussian, =, Double, ., NaN, ;, }, return]
[nextGaussian, ;, nextGaussian, =, Double, ., NaN, ;, }, return, random, ;, }, public, int, nextInt, (, ), {, return]
[nextGaussian, =, Double, ., NaN, ;, }, return, random, ;, }, public, int, nextInt, (, ), {, return, next, (]
[{, return, next, (, 32, ), ;, }, public, int, nextInt, (, int, n, ), throws, IllegalArgumentException, {, if, (]
[{, return, next, (, 32, ), ;, }, public, int, nextInt, (, int, n, ), throws, IllegalArgumentException, {, if, (]
[next, (, 32, ), ;, }, public, int, nextInt, (, int, n, ), throws, IllegalArgumentException, {, if, (, n, >]
[}, public, int, nextInt, (, int, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, if, (]
[}, public, int, nextInt, (, int, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, if, (]
[public, int, nextInt, (, int, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, if, (, (]
[public, int, nextInt, (, int, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, if, (, (]
[nextInt, (, int, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, if, (, (, n, &]
[(, int, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, if, (, (, n, &, -]
[), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, if, (, (, n, &, -, n, ), ==]
[if, (, n, >, 0, ), {, if, (, (, n, &, -, n, ), ==, n, ), {, return]
[>, 0, ), {, if, (, (, n, &, -, n, ), ==, n, ), {, return, (, int, )]
[0, ), {, if, (, (, n, &, -, n, ), ==, n, ), {, return, (, int, ), (]
[0, ), {, if, (, (, n, &, -, n, ), ==, n, ), {, return, (, int, ), (]
[), {, if, (, (, n, &, -, n, ), ==, n, ), {, return, (, int, ), (, (]
[), {, if, (, (, n, &, -, n, ), ==, n, ), {, return, (, int, ), (, (]
[if, (, (, n, &, -, n, ), ==, n, ), {, return, (, int, ), (, (, n, *]
[n, &, -, n, ), ==, n, ), {, return, (, int, ), (, (, n, *, (, long, )]
[-, n, ), ==, n, ), {, return, (, int, ), (, (, n, *, (, long, ), next, (]
[), {, return, (, int, ), (, (, n, *, (, long, ), next, (, 31, ), ), >, >]
[), next, (, 31, ), ), >, >, 31, ), ;, }, int, bits, ;, int, val, ;, do, {]
[(, 31, ), ), >, >, 31, ), ;, }, int, bits, ;, int, val, ;, do, {, bits, =]
[), ), >, >, 31, ), ;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (]
[>, 31, ), ;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31, ), ;]
[), ;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31, ), ;, val, =]
[), ;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31, ), ;, val, =]
[}, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31, ), ;, val, =, bits, %]
[val, ;, do, {, bits, =, next, (, 31, ), ;, val, =, bits, %, n, ;, }, while, (]
[val, ;, do, {, bits, =, next, (, 31, ), ;, val, =, bits, %, n, ;, }, while, (]
[val, ;, do, {, bits, =, next, (, 31, ), ;, val, =, bits, %, n, ;, }, while, (]
[val, ;, do, {, bits, =, next, (, 31, ), ;, val, =, bits, %, n, ;, }, while, (]
[do, {, bits, =, next, (, 31, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -]
[bits, =, next, (, 31, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +]
[=, next, (, 31, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (]
[=, next, (, 31, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (]
[(, 31, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -]
[;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <]
[%, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return]
[while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw]
[-, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (]
[;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, long, nextLong, (, ), {, final, long, high, =]
[;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, long, nextLong, (, ), {, final, long, high, =]
[}, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, long, nextLong, (, ), {, final, long, high, =, (]
[NotStrictlyPositiveException, (, n, ), ;, }, public, long, nextLong, (, ), {, final, long, high, =, (, (, long, )]
[n, ), ;, }, public, long, nextLong, (, ), {, final, long, high, =, (, (, long, ), next, (]
[public, long, nextLong, (, ), {, final, long, high, =, (, (, long, ), next, (, 32, ), ), <<]
[final, long, high, =, (, (, long, ), next, (, 32, ), ), <<, 32, ;, final, long, low, =]
[final, long, high, =, (, (, long, ), next, (, 32, ), ), <<, 32, ;, final, long, low, =]
[long, high, =, (, (, long, ), next, (, 32, ), ), <<, 32, ;, final, long, low, =, (]
[(, (, long, ), next, (, 32, ), ), <<, 32, ;, final, long, low, =, (, (, long, )]
[long, ), next, (, 32, ), ), <<, 32, ;, final, long, low, =, (, (, long, ), next, (]
[32, ), ), <<, 32, ;, final, long, low, =, (, (, long, ), next, (, 32, ), ), &]
[<<, 32, ;, final, long, low, =, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ;, return]
[<<, 32, ;, final, long, low, =, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ;, return]
[;, final, long, low, =, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ;, return, high, |]
[0xffffffffL, ;, return, high, |, low, ;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException, {, if, (]
[0xffffffffL, ;, return, high, |, low, ;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException, {, if, (]
[return, high, |, low, ;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException, {, if, (, n, >]
[n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, long, bits, ;, long, val, ;, do, {]
[throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, long, bits, ;, long, val, ;, do, {, bits, =]
[throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, long, bits, ;, long, val, ;, do, {, bits, =]
[IllegalArgumentException, {, if, (, n, >, 0, ), {, long, bits, ;, long, val, ;, do, {, bits, =, (]
[(, n, >, 0, ), {, long, bits, ;, long, val, ;, do, {, bits, =, (, (, long, )]
[>, 0, ), {, long, bits, ;, long, val, ;, do, {, bits, =, (, (, long, ), next, (]
[long, bits, ;, long, val, ;, do, {, bits, =, (, (, long, ), next, (, 31, ), ), <<]
[;, long, val, ;, do, {, bits, =, (, (, long, ), next, (, 31, ), ), <<, 32, ;]
[val, ;, do, {, bits, =, (, (, long, ), next, (, 31, ), ), <<, 32, ;, bits, =]
[val, ;, do, {, bits, =, (, (, long, ), next, (, 31, ), ), <<, 32, ;, bits, =]
[do, {, bits, =, (, (, long, ), next, (, 31, ), ), <<, 32, ;, bits, =, bits, |]
[{, bits, =, (, (, long, ), next, (, 31, ), ), <<, 32, ;, bits, =, bits, |, (]
[{, bits, =, (, (, long, ), next, (, 31, ), ), <<, 32, ;, bits, =, bits, |, (]
[bits, =, (, (, long, ), next, (, 31, ), ), <<, 32, ;, bits, =, bits, |, (, (]
[(, long, ), next, (, 31, ), ), <<, 32, ;, bits, =, bits, |, (, (, (, long, )]
[), next, (, 31, ), ), <<, 32, ;, bits, =, bits, |, (, (, (, long, ), next, (]
[), ), <<, 32, ;, bits, =, bits, |, (, (, (, long, ), next, (, 32, ), ), &]
[32, ;, bits, =, bits, |, (, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;]
[bits, =, bits, |, (, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;, val, =]
[bits, =, bits, |, (, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;, val, =]
[bits, |, (, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;, val, =, bits, %]
[long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (]
[long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (]
[long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (]
[long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (]
[next, (, 32, ), ), &, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -]
[32, ), ), &, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +]
[), ), &, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (]
[), ), &, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (]
[&, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -]
[;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <]
[%, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return]
[while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw]
[-, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (]
[), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, void, clear, (, ), {]
[return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, void, clear, (, ), {, nextGaussian, =]
[return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, void, clear, (, ), {, nextGaussian, =]
