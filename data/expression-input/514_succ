[), {, case, Token, ., TYPEOF, :, return, tryFoldTypeof, (, subtree, ), ;, default, :, return, subtree, ;, }, }]
[., getType, (, ), ), {, case, Token, ., TYPEOF, :, return, tryFoldTypeof, (, subtree, ), ;, default, :, return]
[:, return, tryFoldTypeof, (, subtree, ), ;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTypeof, (, Node, typeofNode]
[., TYPEOF, :, return, tryFoldTypeof, (, subtree, ), ;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTypeof, (]
[;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTypeof, (, Node, typeofNode, ), {, Preconditions, ., checkArgument, (]
[), ;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTypeof, (, Node, typeofNode, ), {, Preconditions, ., checkArgument]
[;, }, }, private, Node, tryFoldTypeof, (, Node, typeofNode, ), {, Preconditions, ., checkArgument, (, typeofNode, ., isTypeOf, (, )]
[;, Preconditions, ., checkArgument, (, typeofNode, ., getFirstChild, (, ), !=, null, ), ;, Node, argumentNode, =, typeofNode, ., getFirstChild]
[., checkArgument, (, typeofNode, ., isTypeOf, (, ), ), ;, Preconditions, ., checkArgument, (, typeofNode, ., getFirstChild, (, ), !=]
[), ;, Preconditions, ., checkArgument, (, typeofNode, ., getFirstChild, (, ), !=, null, ), ;, Node, argumentNode, =, typeofNode, .]
[., isTypeOf, (, ), ), ;, Preconditions, ., checkArgument, (, typeofNode, ., getFirstChild, (, ), !=, null, ), ;, Node]
[;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isLiteralValue, (, argumentNode, ,, true]
[., checkArgument, (, typeofNode, ., getFirstChild, (, ), !=, null, ), ;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, )]
[), ;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isLiteralValue, (, argumentNode, ,]
[!=, null, ), ;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isLiteralValue, (]
[., getFirstChild, (, ), !=, null, ), ;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (, !]
[), ;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isLiteralValue, (, argumentNode, ,]
[;, if, (, !, NodeUtil, ., isLiteralValue, (, argumentNode, ,, true, ), &&, !, mayHaveSideEffects, (, argumentNode, ), ), {]
[., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isLiteralValue, (, argumentNode, ,, true, ), &&, !, mayHaveSideEffects, (]
[), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;, String, typeName, =, null, ;, if, (, argumentType, !=]
[&&, !, mayHaveSideEffects, (, argumentNode, ), ), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;, String, typeName, =]
[&&, !, mayHaveSideEffects, (, argumentNode, ), ), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;, String, typeName, =]
[., isLiteralValue, (, argumentNode, ,, true, ), &&, !, mayHaveSideEffects, (, argumentNode, ), ), {, JSType, argumentType, =, argumentNode, .]
[,, true, ), &&, !, mayHaveSideEffects, (, argumentNode, ), ), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;]
[), &&, !, mayHaveSideEffects, (, argumentNode, ), ), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;, String, typeName]
[), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;, String, typeName, =, null, ;, if, (, argumentType, !=]
[), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;, String, typeName, =, null, ;, if, (, argumentType, !=]
[), ), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;, String, typeName, =, null, ;, if, (, argumentType]
[;, String, typeName, =, null, ;, if, (, argumentType, !=, null, ), {, if, (, argumentType, ., isObject, (, )]
[., getJSType, (, ), ;, String, typeName, =, null, ;, if, (, argumentType, !=, null, ), {, if, (, argumentType]
[;, if, (, argumentType, !=, null, ), {, if, (, argumentType, ., isObject, (, ), ||, argumentType, ., isNullType, (]
[), {, if, (, argumentType, ., isObject, (, ), ||, argumentType, ., isNullType, (, ), ), {, typeName, =, "object"]
[!=, null, ), {, if, (, argumentType, ., isObject, (, ), ||, argumentType, ., isNullType, (, ), ), {, typeName]
[), {, if, (, argumentType, ., isObject, (, ), ||, argumentType, ., isNullType, (, ), ), {, typeName, =, "object"]
[), {, typeName, =, "object", ;, }, else, if, (, argumentType, ., isStringValueType, (, ), ), {, typeName, =, "string"]
[||, argumentType, ., isNullType, (, ), ), {, typeName, =, "object", ;, }, else, if, (, argumentType, ., isStringValueType, (]
[., isObject, (, ), ||, argumentType, ., isNullType, (, ), ), {, typeName, =, "object", ;, }, else, if, (]
[), {, typeName, =, "object", ;, }, else, if, (, argumentType, ., isStringValueType, (, ), ), {, typeName, =, "string"]
[., isNullType, (, ), ), {, typeName, =, "object", ;, }, else, if, (, argumentType, ., isStringValueType, (, ), )]
[=, "object", ;, }, else, if, (, argumentType, ., isStringValueType, (, ), ), {, typeName, =, "string", ;, }, else]
[;, }, else, if, (, argumentType, ., isStringValueType, (, ), ), {, typeName, =, "string", ;, }, else, if, (]
[), {, typeName, =, "string", ;, }, else, if, (, argumentType, ., isNumberValueType, (, ), ), {, typeName, =, "number"]
[., isStringValueType, (, ), ), {, typeName, =, "string", ;, }, else, if, (, argumentType, ., isNumberValueType, (, ), )]
[=, "string", ;, }, else, if, (, argumentType, ., isNumberValueType, (, ), ), {, typeName, =, "number", ;, }, else]
[;, }, else, if, (, argumentType, ., isNumberValueType, (, ), ), {, typeName, =, "number", ;, }, else, if, (]
[), {, typeName, =, "number", ;, }, else, if, (, argumentType, ., isBooleanValueType, (, ), ), {, typeName, =, "boolean"]
[., isNumberValueType, (, ), ), {, typeName, =, "number", ;, }, else, if, (, argumentType, ., isBooleanValueType, (, ), )]
[=, "number", ;, }, else, if, (, argumentType, ., isBooleanValueType, (, ), ), {, typeName, =, "boolean", ;, }, else]
[;, }, else, if, (, argumentType, ., isBooleanValueType, (, ), ), {, typeName, =, "boolean", ;, }, else, if, (]
[), {, typeName, =, "boolean", ;, }, else, if, (, argumentType, ., isVoidType, (, ), ), {, typeName, =, "undefined"]
[., isBooleanValueType, (, ), ), {, typeName, =, "boolean", ;, }, else, if, (, argumentType, ., isVoidType, (, ), )]
[=, "boolean", ;, }, else, if, (, argumentType, ., isVoidType, (, ), ), {, typeName, =, "undefined", ;, }, else]
[;, }, else, if, (, argumentType, ., isVoidType, (, ), ), {, typeName, =, "undefined", ;, }, else, if, (]
[), {, typeName, =, "undefined", ;, }, else, if, (, argumentType, ., isUnionType, (, ), ), {, typeName, =, null]
[., isVoidType, (, ), ), {, typeName, =, "undefined", ;, }, else, if, (, argumentType, ., isUnionType, (, ), )]
[=, "undefined", ;, }, else, if, (, argumentType, ., isUnionType, (, ), ), {, typeName, =, null, ;, }, if]
[;, }, else, if, (, argumentType, ., isUnionType, (, ), ), {, typeName, =, null, ;, }, if, (, typeName]
[), {, typeName, =, null, ;, }, if, (, typeName, !=, null, ), {, Node, newNode, =, IR, ., string]
[., isUnionType, (, ), ), {, typeName, =, null, ;, }, if, (, typeName, !=, null, ), {, Node, newNode]
[=, null, ;, }, if, (, typeName, !=, null, ), {, Node, newNode, =, IR, ., string, (, typeName, )]
[;, }, if, (, typeName, !=, null, ), {, Node, newNode, =, IR, ., string, (, typeName, ), ;, typeofNode]
[), {, Node, newNode, =, IR, ., string, (, typeName, ), ;, typeofNode, ., getParent, (, ), ., replaceChild, (]
[!=, null, ), {, Node, newNode, =, IR, ., string, (, typeName, ), ;, typeofNode, ., getParent, (, ), .]
[), {, Node, newNode, =, IR, ., string, (, typeName, ), ;, typeofNode, ., getParent, (, ), ., replaceChild, (]
[;, typeofNode, ., getParent, (, ), ., replaceChild, (, typeofNode, ,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode]
[., string, (, typeName, ), ;, typeofNode, ., getParent, (, ), ., replaceChild, (, typeofNode, ,, newNode, ), ;, reportCodeChange]
[), ;, typeofNode, ., getParent, (, ), ., replaceChild, (, typeofNode, ,, newNode, ), ;, reportCodeChange, (, ), ;, return]
[;, reportCodeChange, (, ), ;, return, newNode, ;, }, }, }, return, typeofNode, ;, }, }]
[., replaceChild, (, typeofNode, ,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode, ;, }, }, }, return, typeofNode]
[., getParent, (, ), ., replaceChild, (, typeofNode, ,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode, ;, }]
[,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode, ;, }, }, }, return, typeofNode, ;, }, }]
[), ;, reportCodeChange, (, ), ;, return, newNode, ;, }, }, }, return, typeofNode, ;, }, }]
[;, return, newNode, ;, }, }, }, return, typeofNode, ;, }, }]
[;, }, }, }, return, typeofNode, ;, }, }]
[;, }, }]
