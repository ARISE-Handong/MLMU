[@, Retention, (, RetentionPolicy, ., RUNTIME, ), @, Deprecated, public, @, interface, Mock, {, }, public, static, void, initMocks, (]
[), @, Retention, (, RetentionPolicy, ., RUNTIME, ), @, Deprecated, public, @, interface, Mock, {, }, public, static, void, initMocks]
[}, ), @, Retention, (, RetentionPolicy, ., RUNTIME, ), @, Deprecated, public, @, interface, Mock, {, }, public, static, void]
[@, Deprecated, public, @, interface, Mock, {, }, public, static, void, initMocks, (, Object, testClass, ), {, if, (, testClass]
[), @, Deprecated, public, @, interface, Mock, {, }, public, static, void, initMocks, (, Object, testClass, ), {, if, (]
[., RUNTIME, ), @, Deprecated, public, @, interface, Mock, {, }, public, static, void, initMocks, (, Object, testClass, ), {]
[), {, throw, new, MockitoException, (, "testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class", ), ;, }, AnnotationEngine, annotationEngine, =, new, GlobalConfiguration, (, ), ., getAnnotationEngine, (]
[==, null, ), {, throw, new, MockitoException, (, "testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class", ), ;, }, AnnotationEngine, annotationEngine, =, new, GlobalConfiguration, (, ), .]
[), {, throw, new, MockitoException, (, "testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class", ), ;, }, AnnotationEngine, annotationEngine, =, new, GlobalConfiguration, (, ), ., getAnnotationEngine, (]
[;, }, AnnotationEngine, annotationEngine, =, new, GlobalConfiguration, (, ), ., getAnnotationEngine, (, ), ;, Class, <, ?, >, clazz, =]
[), ;, }, AnnotationEngine, annotationEngine, =, new, GlobalConfiguration, (, ), ., getAnnotationEngine, (, ), ;, Class, <, ?, >, clazz]
[;, Class, <, ?, >, clazz, =, testClass, ., getClass, (, ), ;, if, (, annotationEngine, ., getClass, (, )]
[., getAnnotationEngine, (, ), ;, Class, <, ?, >, clazz, =, testClass, ., getClass, (, ), ;, if, (, annotationEngine]
[;, if, (, annotationEngine, ., getClass, (, ), !=, new, DefaultMockitoConfiguration, (, ), ., getAnnotationEngine, (, ), ., getClass, (]
[., getClass, (, ), ;, if, (, annotationEngine, ., getClass, (, ), !=, new, DefaultMockitoConfiguration, (, ), ., getAnnotationEngine, (]
[), {, while, (, clazz, !=, Object, ., class, ), {, scanDeprecatedWay, (, annotationEngine, ,, testClass, ,, clazz, ), ;]
[!=, new, DefaultMockitoConfiguration, (, ), ., getAnnotationEngine, (, ), ., getClass, (, ), ), {, while, (, clazz, !=, Object]
[., getClass, (, ), !=, new, DefaultMockitoConfiguration, (, ), ., getAnnotationEngine, (, ), ., getClass, (, ), ), {, while]
[), {, while, (, clazz, !=, Object, ., class, ), {, scanDeprecatedWay, (, annotationEngine, ,, testClass, ,, clazz, ), ;]
[., getClass, (, ), ), {, while, (, clazz, !=, Object, ., class, ), {, scanDeprecatedWay, (, annotationEngine, ,, testClass]
[., getAnnotationEngine, (, ), ., getClass, (, ), ), {, while, (, clazz, !=, Object, ., class, ), {, scanDeprecatedWay]
[), {, scanDeprecatedWay, (, annotationEngine, ,, testClass, ,, clazz, ), ;, clazz, =, clazz, ., getSuperclass, (, ), ;, }]
[!=, Object, ., class, ), {, scanDeprecatedWay, (, annotationEngine, ,, testClass, ,, clazz, ), ;, clazz, =, clazz, ., getSuperclass]
[), {, scanDeprecatedWay, (, annotationEngine, ,, testClass, ,, clazz, ), ;, clazz, =, clazz, ., getSuperclass, (, ), ;, }]
[;, clazz, =, clazz, ., getSuperclass, (, ), ;, }, }, annotationEngine, ., process, (, testClass, ., getClass, (, )]
[,, testClass, ,, clazz, ), ;, clazz, =, clazz, ., getSuperclass, (, ), ;, }, }, annotationEngine, ., process, (]
[,, clazz, ), ;, clazz, =, clazz, ., getSuperclass, (, ), ;, }, }, annotationEngine, ., process, (, testClass, .]
[), ;, clazz, =, clazz, ., getSuperclass, (, ), ;, }, }, annotationEngine, ., process, (, testClass, ., getClass, (]
[=, clazz, ., getSuperclass, (, ), ;, }, }, annotationEngine, ., process, (, testClass, ., getClass, (, ), ,, testClass]
[;, }, }, annotationEngine, ., process, (, testClass, ., getClass, (, ), ,, testClass, ), ;, }, static, void, scanDeprecatedWay]
[., getSuperclass, (, ), ;, }, }, annotationEngine, ., process, (, testClass, ., getClass, (, ), ,, testClass, ), ;]
[;, }, static, void, scanDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Class, <, ?, >, clazz, ), {, Field]
[., process, (, testClass, ., getClass, (, ), ,, testClass, ), ;, }, static, void, scanDeprecatedWay, (, AnnotationEngine, annotationEngine, ,]
[,, testClass, ), ;, }, static, void, scanDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Class, <, ?, >, clazz]
[., getClass, (, ), ,, testClass, ), ;, }, static, void, scanDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Class]
[), ;, }, static, void, scanDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Class, <, ?, >, clazz, ), {]
[;, for, (, Field, field, :, fields, ), {, processAnnotationDeprecatedWay, (, annotationEngine, ,, testClass, ,, field, ), ;, }, }]
[., getDeclaredFields, (, ), ;, for, (, Field, field, :, fields, ), {, processAnnotationDeprecatedWay, (, annotationEngine, ,, testClass, ,, field]
[), {, processAnnotationDeprecatedWay, (, annotationEngine, ,, testClass, ,, field, ), ;, }, }, @, SuppressWarnings, (, "deprecation", ), static, void]
[;, }, }, @, SuppressWarnings, (, "deprecation", ), static, void, processAnnotationDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Field, field]
[,, testClass, ,, field, ), ;, }, }, @, SuppressWarnings, (, "deprecation", ), static, void, processAnnotationDeprecatedWay, (, AnnotationEngine, annotationEngine, ,]
[,, field, ), ;, }, }, @, SuppressWarnings, (, "deprecation", ), static, void, processAnnotationDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass]
[), ;, }, }, @, SuppressWarnings, (, "deprecation", ), static, void, processAnnotationDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Field]
[static, void, processAnnotationDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Field, field, ), {, boolean, alreadyAssigned, =, false, ;, for]
[), static, void, processAnnotationDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Field, field, ), {, boolean, alreadyAssigned, =, false, ;]
[;, for, (, Annotation, annotation, :, field, ., getAnnotations, (, ), ), {, Object, mock, =, annotationEngine, ., createMockFor, (]
[), {, Object, mock, =, annotationEngine, ., createMockFor, (, annotation, ,, field, ), ;, if, (, mock, !=, null, )]
[., getAnnotations, (, ), ), {, Object, mock, =, annotationEngine, ., createMockFor, (, annotation, ,, field, ), ;, if, (]
[;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try]
[., createMockFor, (, annotation, ,, field, ), ;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned]
[,, field, ), ;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =]
[), ;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;]
[), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testClass, ,]
[!=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (]
[), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testClass, ,]
[;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testClass, ,, field, ), ., set, (, mock, ), ;]
[,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testClass, ,, field, ), ., set, (]
[), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testClass, ,, field, ), ., set, (, mock, )]
[=, true, ;, try, {, new, FieldSetter, (, testClass, ,, field, ), ., set, (, mock, ), ;, }, catch]
[;, try, {, new, FieldSetter, (, testClass, ,, field, ), ., set, (, mock, ), ;, }, catch, (, Exception]
[;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +, field, ., getName, (, ), +]
[., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +, field]
[,, field, ), ., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (]
[), ., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +]
[), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +, field, ., getName, (, )]
[;, }, }, }, }, static, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, ), {, if, (, alreadyAssigned, )]
[,, e, ), ;, }, }, }, }, static, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, ), {, if]
[+, annotation, ,, e, ), ;, }, }, }, }, static, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, )]
[+, " annotated with ", +, annotation, ,, e, ), ;, }, }, }, }, static, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean]
[+, field, ., getName, (, ), +, " annotated with ", +, annotation, ,, e, ), ;, }, }, }, }, static, void]
[+, " annotated with ", +, annotation, ,, e, ), ;, }, }, }, }, static, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean]
[., getName, (, ), +, " annotated with ", +, annotation, ,, e, ), ;, }, }, }, }, static, void, throwIfAlreadyAssigned, (]
[+, annotation, ,, e, ), ;, }, }, }, }, static, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, )]
[,, e, ), ;, }, }, }, }, static, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, ), {, if]
[), ;, }, }, }, }, static, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, ), {, if, (, alreadyAssigned]
[), {, new, Reporter, (, ), ., moreThanOneAnnotationNotAllowed, (, field, ., getName, (, ), ), ;, }, }, }]
[;, }, }, }]
[., moreThanOneAnnotationNotAllowed, (, field, ., getName, (, ), ), ;, }, }, }]
[), ;, }, }, }]
[., getName, (, ), ), ;, }, }, }]
