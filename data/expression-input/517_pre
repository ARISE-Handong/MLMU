[joda, ., time, ., chrono, ., ISOChronology, ;, public, class, MockPartial, implements, ReadablePartial, {, public, static, final, ReadablePartial, EMPTY_INSTANCE, =]
[ReadablePartial, {, public, static, final, ReadablePartial, EMPTY_INSTANCE, =, new, MockPartial, (, ), ;, public, Chronology, getChronology, (, ), {, return]
[ReadablePartial, {, public, static, final, ReadablePartial, EMPTY_INSTANCE, =, new, MockPartial, (, ), ;, public, Chronology, getChronology, (, ), {, return]
[Chronology, getChronology, (, ), {, return, ISOChronology, ., getInstanceUTC, (, ), ;, }, public, int, size, (, ), {, return]
[Chronology, getChronology, (, ), {, return, ISOChronology, ., getInstanceUTC, (, ), ;, }, public, int, size, (, ), {, return]
[(, ), {, return, getFields, (, ), ., length, ;, }, public, DateTimeFieldType, getFieldType, (, int, index, ), {, return]
[(, ), {, return, getFields, (, ), ., length, ;, }, public, DateTimeFieldType, getFieldType, (, int, index, ), {, return]
[(, ), {, return, getFields, (, ), ., length, ;, }, public, DateTimeFieldType, getFieldType, (, int, index, ), {, return]
[getFields, (, ), ., length, ;, }, public, DateTimeFieldType, getFieldType, (, int, index, ), {, return, getFields, (, ), []
[(, ), [, index, ], ., getType, (, ), ;, }, public, DateTimeField, getField, (, int, index, ), {, return]
[(, ), [, index, ], ., getType, (, ), ;, }, public, DateTimeField, getField, (, int, index, ), {, return]
[], ., getType, (, ), ;, }, public, DateTimeField, getField, (, int, index, ), {, return, getFields, (, ), []
[), {, return, getFields, (, ), [, index, ], ;, }, public, int, getValue, (, int, index, ), {, return]
[), {, return, getFields, (, ), [, index, ], ;, }, public, int, getValue, (, int, index, ), {, return]
[(, ), [, index, ], ;, }, public, int, getValue, (, int, index, ), {, return, getValues, (, ), []
[), {, return, getValues, (, ), [, index, ], ;, }, public, int, get, (, DateTimeFieldType, field, ), {, return]
[int, get, (, DateTimeFieldType, field, ), {, return, 0, ;, }, public, boolean, isSupported, (, DateTimeFieldType, field, ), {, return]
[boolean, isSupported, (, DateTimeFieldType, field, ), {, return, false, ;, }, public, DateTime, toDateTime, (, DateTimeZone, zone, ), {, return]
[DateTime, toDateTime, (, DateTimeZone, zone, ), {, return, null, ;, }, public, DateTime, toDateTime, (, ReadableInstant, base, ), {, return]
[DateTime, toDateTime, (, ReadableInstant, base, ), {, return, null, ;, }, public, DateTimeField, [, ], getFields, (, ), {, return]
[ReadableInstant, base, ), {, return, null, ;, }, public, DateTimeField, [, ], getFields, (, ), {, return, new, DateTimeField, []
[(, ), {, return, new, DateTimeField, [, 0, ], ;, }, public, int, [, ], getValues, (, ), {, return]
[return, new, DateTimeField, [, 0, ], ;, }, public, int, [, ], getValues, (, ), {, return, new, int, []
[(, ), {, return, new, int, [, 0, ], ;, }, public, int, compareTo, (, ReadablePartial, partial, ), {, return]
