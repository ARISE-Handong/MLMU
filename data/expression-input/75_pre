[private, final, StaticSourceFile, sourceFile, ;, private, final, Node, associatedNode, ;, private, final, ErrorReporter, errorReporter, ;, private, final, ErrorReporterParser, parser, =]
[private, class, ErrorReporterParser, {, void, addParserWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {]
[private, class, ErrorReporterParser, {, void, addParserWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {]
[void, addParserWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (]
[void, addParserWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (]
[messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, ScriptRuntime, ., getMessage1, (]
[String, messageArg, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, ScriptRuntime, ., getMessage1, (, messageId, ,]
[int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, ScriptRuntime, ., getMessage1, (, messageId, ,, messageArg, ), ,]
[charno, ), {, errorReporter, ., warning, (, ScriptRuntime, ., getMessage1, (, messageId, ,, messageArg, ), ,, getSourceName, (, ), ,]
[{, errorReporter, ., warning, (, ScriptRuntime, ., getMessage1, (, messageId, ,, messageArg, ), ,, getSourceName, (, ), ,, lineno, ,]
[., warning, (, ScriptRuntime, ., getMessage1, (, messageId, ,, messageArg, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,]
[,, null, ,, charno, ), ;, }, void, addParserWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {]
[,, null, ,, charno, ), ;, }, void, addParserWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {]
[), ;, }, void, addParserWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (]
[), ;, }, void, addParserWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (]
[addParserWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, ScriptRuntime, ., getMessage0, (]
[messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, ScriptRuntime, ., getMessage0, (, messageId, ), ,]
[,, int, charno, ), {, errorReporter, ., warning, (, ScriptRuntime, ., getMessage0, (, messageId, ), ,, getSourceName, (, ), ,]
[charno, ), {, errorReporter, ., warning, (, ScriptRuntime, ., getMessage0, (, messageId, ), ,, getSourceName, (, ), ,, lineno, ,]
[{, errorReporter, ., warning, (, ScriptRuntime, ., getMessage0, (, messageId, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,]
[charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {]
[charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {]
[void, addTypeWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (]
[void, addTypeWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (]
[(, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, "Bad type annotation. ", +]
[(, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, "Bad type annotation. ", +]
[String, messageArg, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage1, (]
[,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage1, (, messageId, ,]
[,, int, charno, ), {, errorReporter, ., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage1, (, messageId, ,, messageArg, ), ,]
[{, errorReporter, ., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage1, (, messageId, ,, messageArg, ), ,, getSourceName, (, ), ,]
[., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage1, (, messageId, ,, messageArg, ), ,, getSourceName, (, ), ,, lineno, ,]
[(, "Bad type annotation. ", +, ScriptRuntime, ., getMessage1, (, messageId, ,, messageArg, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,]
[,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {]
[,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {]
[), ;, }, void, addTypeWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (]
[), ;, }, void, addTypeWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (]
[}, void, addTypeWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, "Bad type annotation. ", +]
[}, void, addTypeWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, "Bad type annotation. ", +]
[String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage0, (]
[int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage0, (, messageId, ), ,]
[charno, ), {, errorReporter, ., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage0, (, messageId, ), ,, getSourceName, (, ), ,]
[{, errorReporter, ., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage0, (, messageId, ), ,, getSourceName, (, ), ,, lineno, ,]
[., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage0, (, messageId, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,]
[messageId, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, }, private, JSDocInfo, fileOverviewJSDocInfo, =]
[>, annotationNames, ;, private, final, Set, <, String, >, suppressionNames, ;, static, private, final, Set, <, String, >, modifiesAnnotationKeywords, =]
[>, annotationNames, ;, private, final, Set, <, String, >, suppressionNames, ;, static, private, final, Set, <, String, >, modifiesAnnotationKeywords, =]
[String, >, suppressionNames, ;, static, private, final, Set, <, String, >, modifiesAnnotationKeywords, =, ImmutableSet, ., <, String, >, of, (]
[suppressionNames, ;, static, private, final, Set, <, String, >, modifiesAnnotationKeywords, =, ImmutableSet, ., <, String, >, of, (, "this", ,]
["this", ,, "arguments", ), ;, private, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ;, void, setFileLevelJsDocBuilder, (, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ), {]
["this", ,, "arguments", ), ;, private, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ;, void, setFileLevelJsDocBuilder, (, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ), {]
[;, private, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ;, void, setFileLevelJsDocBuilder, (, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ), {, this, ., fileLevelJsDocBuilder, =]
[Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ), {, this, ., fileLevelJsDocBuilder, =, fileLevelJsDocBuilder, ;, }, void, setFileOverviewJSDocInfo, (, JSDocInfo, fileOverviewJSDocInfo, ), {]
[Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ), {, this, ., fileLevelJsDocBuilder, =, fileLevelJsDocBuilder, ;, }, void, setFileOverviewJSDocInfo, (, JSDocInfo, fileOverviewJSDocInfo, ), {]
[), {, this, ., fileLevelJsDocBuilder, =, fileLevelJsDocBuilder, ;, }, void, setFileOverviewJSDocInfo, (, JSDocInfo, fileOverviewJSDocInfo, ), {, this, ., fileOverviewJSDocInfo, =]
[NEXT_IS_ANNOTATION, }, JsDocInfoParser, (, JsDocTokenStream, stream, ,, Comment, commentNode, ,, Node, associatedNode, ,, Config, config, ,, ErrorReporter, errorReporter, ), {]
[NEXT_IS_ANNOTATION, }, JsDocInfoParser, (, JsDocTokenStream, stream, ,, Comment, commentNode, ,, Node, associatedNode, ,, Config, config, ,, ErrorReporter, errorReporter, ), {]
[JsDocTokenStream, stream, ,, Comment, commentNode, ,, Node, associatedNode, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., stream, =]
[,, Comment, commentNode, ,, Node, associatedNode, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., stream, =, stream, ;]
[,, Comment, commentNode, ,, Node, associatedNode, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., stream, =, stream, ;]
[Node, associatedNode, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., stream, =, stream, ;, this, ., associatedNode, =]
[,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., stream, =, stream, ;, this, ., associatedNode, =, associatedNode, ;]
[,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., stream, =, stream, ;, this, ., associatedNode, =, associatedNode, ;]
[ErrorReporter, errorReporter, ), {, this, ., stream, =, stream, ;, this, ., associatedNode, =, associatedNode, ;, this, ., sourceFile, =]
[ErrorReporter, errorReporter, ), {, this, ., stream, =, stream, ;, this, ., associatedNode, =, associatedNode, ;, this, ., sourceFile, =]
[ErrorReporter, errorReporter, ), {, this, ., stream, =, stream, ;, this, ., associatedNode, =, associatedNode, ;, this, ., sourceFile, =]
[), {, this, ., stream, =, stream, ;, this, ., associatedNode, =, associatedNode, ;, this, ., sourceFile, =, associatedNode, ==]
[this, ., stream, =, stream, ;, this, ., associatedNode, =, associatedNode, ;, this, ., sourceFile, =, associatedNode, ==, null, ?]
[stream, =, stream, ;, this, ., associatedNode, =, associatedNode, ;, this, ., sourceFile, =, associatedNode, ==, null, ?, null, :]
[stream, =, stream, ;, this, ., associatedNode, =, associatedNode, ;, this, ., sourceFile, =, associatedNode, ==, null, ?, null, :]
[associatedNode, =, associatedNode, ;, this, ., sourceFile, =, associatedNode, ==, null, ?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;]
[associatedNode, =, associatedNode, ;, this, ., sourceFile, =, associatedNode, ==, null, ?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;]
[this, ., sourceFile, =, associatedNode, ==, null, ?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =]
[=, associatedNode, ==, null, ?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (]
[=, associatedNode, ==, null, ?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (]
[associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (]
[associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (]
[getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (, commentNode, !=]
[;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (, commentNode, !=, null, ), {]
[;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (, commentNode, !=, null, ), {]
[;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (, commentNode, !=, null, ), {]
[JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (, commentNode, !=, null, ), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (]
[JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (, commentNode, !=, null, ), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (]
[(, commentNode, !=, null, ), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, ), ), ;, }]
[(, commentNode, !=, null, ), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, ), ), ;, }]
[), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, ), ), ;, }, this, ., annotationNames, =]
[), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, ), ), ;, }, this, ., annotationNames, =]
[jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, ), ), ;, }, this, ., annotationNames, =, config, ., annotationNames, ;]
[jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, ), ), ;, }, this, ., annotationNames, =, config, ., annotationNames, ;]
[commentNode, ., getValue, (, ), ), ;, }, this, ., annotationNames, =, config, ., annotationNames, ;, this, ., suppressionNames, =]
[commentNode, ., getValue, (, ), ), ;, }, this, ., annotationNames, =, config, ., annotationNames, ;, this, ., suppressionNames, =]
[), ), ;, }, this, ., annotationNames, =, config, ., annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;]
[), ), ;, }, this, ., annotationNames, =, config, ., annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;]
[this, ., annotationNames, =, config, ., annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;, this, ., errorReporter, =]
[annotationNames, =, config, ., annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;, this, ., errorReporter, =, errorReporter, ;]
[annotationNames, =, config, ., annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;, this, ., errorReporter, =, errorReporter, ;]
[annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;, this, ., errorReporter, =, errorReporter, ;, this, ., templateNode, =]
[annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;, this, ., errorReporter, =, errorReporter, ;, this, ., templateNode, =]
[errorReporter, ;, this, ., templateNode, =, this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {, return]
[errorReporter, ;, this, ., templateNode, =, this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {, return]
[errorReporter, ;, this, ., templateNode, =, this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {, return]
[this, ., templateNode, =, this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {, return, sourceFile, ==]
[templateNode, =, this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {, return, sourceFile, ==, null, ?]
[this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {, return, sourceFile, ==, null, ?, null, :]
[this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {, return, sourceFile, ==, null, ?, null, :]
[:, sourceFile, ., getName, (, ), ;, }, public, static, Node, parseTypeString, (, String, typeString, ), {, Config, config, =]
[getName, (, ), ;, }, public, static, Node, parseTypeString, (, String, typeString, ), {, Config, config, =, new, Config, (]
[getName, (, ), ;, }, public, static, Node, parseTypeString, (, String, typeString, ), {, Config, config, =, new, Config, (]
[(, String, typeString, ), {, Config, config, =, new, Config, (, Sets, ., <, String, >, newHashSet, (, ), ,]
[(, String, typeString, ), {, Config, config, =, new, Config, (, Sets, ., <, String, >, newHashSet, (, ), ,]
[Config, (, Sets, ., <, String, >, newHashSet, (, ), ,, Sets, ., <, String, >, newHashSet, (, ), ,]
[Sets, ., <, String, >, newHashSet, (, ), ,, Sets, ., <, String, >, newHashSet, (, ), ,, false, ,]
[Sets, ., <, String, >, newHashSet, (, ), ,, Sets, ., <, String, >, newHashSet, (, ), ,, false, ,]
[>, newHashSet, (, ), ,, Sets, ., <, String, >, newHashSet, (, ), ,, false, ,, LanguageMode, ., ECMASCRIPT3, ,]
[., <, String, >, newHashSet, (, ), ,, false, ,, LanguageMode, ., ECMASCRIPT3, ,, false, ), ;, JsDocInfoParser, parser, =]
[>, newHashSet, (, ), ,, false, ,, LanguageMode, ., ECMASCRIPT3, ,, false, ), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (]
[), ,, false, ,, LanguageMode, ., ECMASCRIPT3, ,, false, ), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (]
[,, LanguageMode, ., ECMASCRIPT3, ,, false, ), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, typeString, ), ,]
[., ECMASCRIPT3, ,, false, ), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, typeString, ), ,, null, ,]
[,, false, ), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, typeString, ), ,, null, ,, null, ,]
[), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, typeString, ), ,, null, ,, null, ,, config, ,]
[), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, typeString, ), ,, null, ,, null, ,, config, ,]
[new, JsDocTokenStream, (, typeString, ), ,, null, ,, null, ,, config, ,, NullErrorReporter, ., forNewRhino, (, ), ), ;, return]
[new, JsDocTokenStream, (, typeString, ), ,, null, ,, null, ,, config, ,, NullErrorReporter, ., forNewRhino, (, ), ), ;, return]
[), ,, null, ,, null, ,, config, ,, NullErrorReporter, ., forNewRhino, (, ), ), ;, return, parser, ., parseTopLevelTypeExpression, (]
[), ,, null, ,, null, ,, config, ,, NullErrorReporter, ., forNewRhino, (, ), ), ;, return, parser, ., parseTopLevelTypeExpression, (]
[NullErrorReporter, ., forNewRhino, (, ), ), ;, return, parser, ., parseTopLevelTypeExpression, (, parser, ., next, (, ), ), ;, }]
[(, ), ), ;, return, parser, ., parseTopLevelTypeExpression, (, parser, ., next, (, ), ), ;, }, @, SuppressWarnings, (]
[}, @, SuppressWarnings, (, "incomplete-switch", ), boolean, parse, (, ), {, int, lineno, ;, int, charno, ;, JSTypeExpression, type, ;]
[SuppressWarnings, (, "incomplete-switch", ), boolean, parse, (, ), {, int, lineno, ;, int, charno, ;, JSTypeExpression, type, ;, state, =]
[SuppressWarnings, (, "incomplete-switch", ), boolean, parse, (, ), {, int, lineno, ;, int, charno, ;, JSTypeExpression, type, ;, state, =]
[boolean, parse, (, ), {, int, lineno, ;, int, charno, ;, JSTypeExpression, type, ;, state, =, State, ., SEARCHING_ANNOTATION, ;]
[;, int, charno, ;, JSTypeExpression, type, ;, state, =, State, ., SEARCHING_ANNOTATION, ;, skipEOLs, (, ), ;, JsDocToken, token, =]
[., SEARCHING_ANNOTATION, ;, skipEOLs, (, ), ;, JsDocToken, token, =, next, (, ), ;, List, <, ExtendedTypeInfo, >, extendedTypes, =]
[., SEARCHING_ANNOTATION, ;, skipEOLs, (, ), ;, JsDocToken, token, =, next, (, ), ;, List, <, ExtendedTypeInfo, >, extendedTypes, =]
[token, =, next, (, ), ;, List, <, ExtendedTypeInfo, >, extendedTypes, =, Lists, ., newArrayList, (, ), ;, if, (]
[token, =, next, (, ), ;, List, <, ExtendedTypeInfo, >, extendedTypes, =, Lists, ., newArrayList, (, ), ;, if, (]
[extendedTypes, =, Lists, ., newArrayList, (, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, blockInfo, =]
[Lists, ., newArrayList, (, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, blockInfo, =, extractBlockComment, (]
[(, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, blockInfo, =, extractBlockComment, (, token, ), ;]
[;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, blockInfo, =, extractBlockComment, (, token, ), ;, token, =]
[;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, blockInfo, =, extractBlockComment, (, token, ), ;, token, =]
[(, ), ), {, ExtractionInfo, blockInfo, =, extractBlockComment, (, token, ), ;, token, =, blockInfo, ., token, ;, if, (]
[), ), {, ExtractionInfo, blockInfo, =, extractBlockComment, (, token, ), ;, token, =, blockInfo, ., token, ;, if, (, !]
[), ), {, ExtractionInfo, blockInfo, =, extractBlockComment, (, token, ), ;, token, =, blockInfo, ., token, ;, if, (, !]
[), ), {, ExtractionInfo, blockInfo, =, extractBlockComment, (, token, ), ;, token, =, blockInfo, ., token, ;, if, (, !]
[), ;, token, =, blockInfo, ., token, ;, if, (, !, blockInfo, ., string, ., isEmpty, (, ), ), {]
[), ;, token, =, blockInfo, ., token, ;, if, (, !, blockInfo, ., string, ., isEmpty, (, ), ), {]
[blockInfo, ., token, ;, if, (, !, blockInfo, ., string, ., isEmpty, (, ), ), {, jsdocBuilder, ., recordBlockDescription, (]
[blockInfo, ., token, ;, if, (, !, blockInfo, ., string, ., isEmpty, (, ), ), {, jsdocBuilder, ., recordBlockDescription, (]
[isEmpty, (, ), ), {, jsdocBuilder, ., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else, {, if, (]
[isEmpty, (, ), ), {, jsdocBuilder, ., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else, {, if, (]
[isEmpty, (, ), ), {, jsdocBuilder, ., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else, {, if, (]
[), ), {, jsdocBuilder, ., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else, {, if, (, token, !=]
[), ), {, jsdocBuilder, ., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else, {, if, (, token, !=]
[., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else, {, if, (, token, !=, JsDocToken, ., ANNOTATION, &&]
[., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else, {, if, (, token, !=, JsDocToken, ., ANNOTATION, &&]
[(, blockInfo, ., string, ), ;, }, }, else, {, if, (, token, !=, JsDocToken, ., ANNOTATION, &&, token, !=]
[(, blockInfo, ., string, ), ;, }, }, else, {, if, (, token, !=, JsDocToken, ., ANNOTATION, &&, token, !=]
[;, }, }, else, {, if, (, token, !=, JsDocToken, ., ANNOTATION, &&, token, !=, JsDocToken, ., EOC, ), {]
[;, }, }, else, {, if, (, token, !=, JsDocToken, ., ANNOTATION, &&, token, !=, JsDocToken, ., EOC, ), {]
[{, if, (, token, !=, JsDocToken, ., ANNOTATION, &&, token, !=, JsDocToken, ., EOC, ), {, jsdocBuilder, ., recordBlockDescription, (]
[{, jsdocBuilder, ., recordBlockDescription, (, "", ), ;, }, }, retry, :, for, (, ;, ;, ), {, switch, (]
[(, "", ), ;, }, }, retry, :, for, (, ;, ;, ), {, switch, (, token, ), {, case]
[}, }, retry, :, for, (, ;, ;, ), {, switch, (, token, ), {, case, ANNOTATION, :, if, (]
[}, }, retry, :, for, (, ;, ;, ), {, switch, (, token, ), {, case, ANNOTATION, :, if, (]
[retry, :, for, (, ;, ;, ), {, switch, (, token, ), {, case, ANNOTATION, :, if, (, state, ==]
[retry, :, for, (, ;, ;, ), {, switch, (, token, ), {, case, ANNOTATION, :, if, (, state, ==]
[;, ), {, switch, (, token, ), {, case, ANNOTATION, :, if, (, state, ==, State, ., SEARCHING_ANNOTATION, ), {]
[{, switch, (, token, ), {, case, ANNOTATION, :, if, (, state, ==, State, ., SEARCHING_ANNOTATION, ), {, state, =]
[{, switch, (, token, ), {, case, ANNOTATION, :, if, (, state, ==, State, ., SEARCHING_ANNOTATION, ), {, state, =]
[), {, case, ANNOTATION, :, if, (, state, ==, State, ., SEARCHING_ANNOTATION, ), {, state, =, State, ., SEARCHING_NEWLINE, ;]
[case, ANNOTATION, :, if, (, state, ==, State, ., SEARCHING_ANNOTATION, ), {, state, =, State, ., SEARCHING_NEWLINE, ;, lineno, =]
[case, ANNOTATION, :, if, (, state, ==, State, ., SEARCHING_ANNOTATION, ), {, state, =, State, ., SEARCHING_NEWLINE, ;, lineno, =]
[==, State, ., SEARCHING_ANNOTATION, ), {, state, =, State, ., SEARCHING_NEWLINE, ;, lineno, =, stream, ., getLineno, (, ), ;]
[., SEARCHING_ANNOTATION, ), {, state, =, State, ., SEARCHING_NEWLINE, ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[., SEARCHING_ANNOTATION, ), {, state, =, State, ., SEARCHING_NEWLINE, ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, String, annotationName, =]
[;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, String, annotationName, =]
[charno, =, stream, ., getCharno, (, ), ;, String, annotationName, =, stream, ., getString, (, ), ;, Annotation, annotation, =]
[charno, =, stream, ., getCharno, (, ), ;, String, annotationName, =, stream, ., getString, (, ), ;, Annotation, annotation, =]
[getCharno, (, ), ;, String, annotationName, =, stream, ., getString, (, ), ;, Annotation, annotation, =, annotationNames, ., get, (]
[annotationName, =, stream, ., getString, (, ), ;, Annotation, annotation, =, annotationNames, ., get, (, annotationName, ), ;, if, (]
[annotationName, =, stream, ., getString, (, ), ;, Annotation, annotation, =, annotationNames, ., get, (, annotationName, ), ;, if, (]
[stream, ., getString, (, ), ;, Annotation, annotation, =, annotationNames, ., get, (, annotationName, ), ;, if, (, annotation, ==]
[(, ), ;, Annotation, annotation, =, annotationNames, ., get, (, annotationName, ), ;, if, (, annotation, ==, null, ), {]
[(, ), ;, Annotation, annotation, =, annotationNames, ., get, (, annotationName, ), ;, if, (, annotation, ==, null, ), {]
[annotation, =, annotationNames, ., get, (, annotationName, ), ;, if, (, annotation, ==, null, ), {, parser, ., addParserWarning, (]
[annotationNames, ., get, (, annotationName, ), ;, if, (, annotation, ==, null, ), {, parser, ., addParserWarning, (, "msg.bad.jsdoc.tag", ,]
[get, (, annotationName, ), ;, if, (, annotation, ==, null, ), {, parser, ., addParserWarning, (, "msg.bad.jsdoc.tag", ,, annotationName, ,]
[get, (, annotationName, ), ;, if, (, annotation, ==, null, ), {, parser, ., addParserWarning, (, "msg.bad.jsdoc.tag", ,, annotationName, ,]
[(, annotation, ==, null, ), {, parser, ., addParserWarning, (, "msg.bad.jsdoc.tag", ,, annotationName, ,, stream, ., getLineno, (, ), ,]
[(, annotation, ==, null, ), {, parser, ., addParserWarning, (, "msg.bad.jsdoc.tag", ,, annotationName, ,, stream, ., getLineno, (, ), ,]
["msg.bad.jsdoc.tag", ,, annotationName, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
["msg.bad.jsdoc.tag", ,, annotationName, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
[stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., markAnnotation, (]
[getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., markAnnotation, (, annotationName, ,]
[), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., markAnnotation, (, annotationName, ,, lineno, ,]
[(, ), ), ;, }, else, {, jsdocBuilder, ., markAnnotation, (, annotationName, ,, lineno, ,, charno, ), ;, switch, (]
[}, else, {, jsdocBuilder, ., markAnnotation, (, annotationName, ,, lineno, ,, charno, ), ;, switch, (, annotation, ), {, case]
[., markAnnotation, (, annotationName, ,, lineno, ,, charno, ), ;, switch, (, annotation, ), {, case, AUTHOR, :, if, (]
[., markAnnotation, (, annotationName, ,, lineno, ,, charno, ), ;, switch, (, annotation, ), {, case, AUTHOR, :, if, (]
[switch, (, annotation, ), {, case, AUTHOR, :, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, authorInfo, =]
[:, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, authorInfo, =, extractSingleLineBlock, (, ), ;, String, author, =]
[:, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, authorInfo, =, extractSingleLineBlock, (, ), ;, String, author, =]
[(, ), ), {, ExtractionInfo, authorInfo, =, extractSingleLineBlock, (, ), ;, String, author, =, authorInfo, ., string, ;, if, (]
[(, ), ), {, ExtractionInfo, authorInfo, =, extractSingleLineBlock, (, ), ;, String, author, =, authorInfo, ., string, ;, if, (]
[(, ), ), {, ExtractionInfo, authorInfo, =, extractSingleLineBlock, (, ), ;, String, author, =, authorInfo, ., string, ;, if, (]
[=, extractSingleLineBlock, (, ), ;, String, author, =, authorInfo, ., string, ;, if, (, author, ., length, (, ), ==]
[), ;, String, author, =, authorInfo, ., string, ;, if, (, author, ., length, (, ), ==, 0, ), {]
[), ;, String, author, =, authorInfo, ., string, ;, if, (, author, ., length, (, ), ==, 0, ), {]
[=, authorInfo, ., string, ;, if, (, author, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (]
[., string, ;, if, (, author, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.authormissing", ,]
[., string, ;, if, (, author, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.authormissing", ,]
[., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.authormissing", ,, stream, ., getLineno, (, ), ,]
[., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.authormissing", ,, stream, ., getLineno, (, ), ,]
[addParserWarning, (, "msg.jsdoc.authormissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
[addParserWarning, (, "msg.jsdoc.authormissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
[stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addAuthor, (]
[), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addAuthor, (, author, ), ;, }]
[stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addAuthor, (, author, ), ;, }, token, =]
[stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addAuthor, (, author, ), ;, }, token, =]
[}, else, {, jsdocBuilder, ., addAuthor, (, author, ), ;, }, token, =, authorInfo, ., token, ;, }, else, {]
[{, jsdocBuilder, ., addAuthor, (, author, ), ;, }, token, =, authorInfo, ., token, ;, }, else, {, token, =]
[., addAuthor, (, author, ), ;, }, token, =, authorInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (]
[=, authorInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case]
[;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, CONSISTENTIDGENERATOR, :, if, (]
[}, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, CONSISTENTIDGENERATOR, :, if, (, !]
[}, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, CONSISTENTIDGENERATOR, :, if, (, !]
[token, ), ;, }, continue, retry, ;, case, CONSISTENTIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordConsistentIdGenerator, (, ), ), {]
[token, ), ;, }, continue, retry, ;, case, CONSISTENTIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordConsistentIdGenerator, (, ), ), {]
[continue, retry, ;, case, CONSISTENTIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordConsistentIdGenerator, (, ), ), {, parser, ., addParserWarning, (]
[;, case, CONSISTENTIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordConsistentIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.consistidgen", ,]
[;, case, CONSISTENTIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordConsistentIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.consistidgen", ,]
[!, jsdocBuilder, ., recordConsistentIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.consistidgen", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordConsistentIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.consistidgen", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.consistidgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.consistidgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, STRUCT, :, if, (]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, STRUCT, :, if, (, !]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, STRUCT, :, if, (, !]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, STRUCT, :, if, (, !, jsdocBuilder, ., recordStruct, (, ), ), {]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, STRUCT, :, if, (, !, jsdocBuilder, ., recordStruct, (, ), ), {]
[continue, retry, ;, case, STRUCT, :, if, (, !, jsdocBuilder, ., recordStruct, (, ), ), {, parser, ., addTypeWarning, (]
[;, case, STRUCT, :, if, (, !, jsdocBuilder, ., recordStruct, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[;, case, STRUCT, :, if, (, !, jsdocBuilder, ., recordStruct, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[!, jsdocBuilder, ., recordStruct, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordStruct, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,]
[parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DICT, :, if, (]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DICT, :, if, (, !]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DICT, :, if, (, !]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DICT, :, if, (, !, jsdocBuilder, ., recordDict, (, ), ), {]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DICT, :, if, (, !, jsdocBuilder, ., recordDict, (, ), ), {]
[continue, retry, ;, case, DICT, :, if, (, !, jsdocBuilder, ., recordDict, (, ), ), {, parser, ., addTypeWarning, (]
[;, case, DICT, :, if, (, !, jsdocBuilder, ., recordDict, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[;, case, DICT, :, if, (, !, jsdocBuilder, ., recordDict, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[!, jsdocBuilder, ., recordDict, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordDict, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,]
[parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, CONSTRUCTOR, :, if, (]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, CONSTRUCTOR, :, if, (, !]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, CONSTRUCTOR, :, if, (, !]
[), ;, continue, retry, ;, case, CONSTRUCTOR, :, if, (, !, jsdocBuilder, ., recordConstructor, (, ), ), {, if, (]
[), ;, continue, retry, ;, case, CONSTRUCTOR, :, if, (, !, jsdocBuilder, ., recordConstructor, (, ), ), {, if, (]
[:, if, (, !, jsdocBuilder, ., recordConstructor, (, ), ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {]
[:, if, (, !, jsdocBuilder, ., recordConstructor, (, ), ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {]
[jsdocBuilder, ., recordConstructor, (, ), ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, parser, ., addTypeWarning, (]
[recordConstructor, (, ), ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,]
[recordConstructor, (, ), ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,]
[(, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,]
[(, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,]
[addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
[addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
[stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (]
[getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,]
[getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }]
[(, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, token, =]
[,, stream, ., getCharno, (, ), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[(, ), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DEPRECATED, :, if, (]
[), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DEPRECATED, :, if, (, !]
[), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DEPRECATED, :, if, (, !]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DEPRECATED, :, if, (, !, jsdocBuilder, ., recordDeprecated, (, ), ), {]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DEPRECATED, :, if, (, !, jsdocBuilder, ., recordDeprecated, (, ), ), {]
[continue, retry, ;, case, DEPRECATED, :, if, (, !, jsdocBuilder, ., recordDeprecated, (, ), ), {, parser, ., addParserWarning, (]
[;, case, DEPRECATED, :, if, (, !, jsdocBuilder, ., recordDeprecated, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.deprecated", ,]
[;, case, DEPRECATED, :, if, (, !, jsdocBuilder, ., recordDeprecated, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.deprecated", ,]
[!, jsdocBuilder, ., recordDeprecated, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.deprecated", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordDeprecated, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.deprecated", ,, stream, ., getLineno, (, ), ,]
[(, "msg.jsdoc.deprecated", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, ExtractionInfo, reasonInfo, =]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (]
[,, stream, ., getCharno, (, ), ), ;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, reason, =]
[,, stream, ., getCharno, (, ), ), ;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, reason, =]
[), ;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, reason, =, reasonInfo, ., string, ;, if, (]
[), ;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, reason, =, reasonInfo, ., string, ;, if, (]
[), ;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, reason, =, reasonInfo, ., string, ;, if, (]
[extractMultilineTextualBlock, (, token, ), ;, String, reason, =, reasonInfo, ., string, ;, if, (, reason, ., length, (, ), >]
[), ;, String, reason, =, reasonInfo, ., string, ;, if, (, reason, ., length, (, ), >, 0, ), {]
[), ;, String, reason, =, reasonInfo, ., string, ;, if, (, reason, ., length, (, ), >, 0, ), {]
[=, reasonInfo, ., string, ;, if, (, reason, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordDeprecationReason, (]
[;, if, (, reason, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordDeprecationReason, (, reason, ), ;, }]
[(, reason, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordDeprecationReason, (, reason, ), ;, }, token, =]
[(, reason, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordDeprecationReason, (, reason, ), ;, }, token, =]
[), {, jsdocBuilder, ., recordDeprecationReason, (, reason, ), ;, }, token, =, reasonInfo, ., token, ;, continue, retry, ;, case]
[recordDeprecationReason, (, reason, ), ;, }, token, =, reasonInfo, ., token, ;, continue, retry, ;, case, INTERFACE, :, if, (]
[(, reason, ), ;, }, token, =, reasonInfo, ., token, ;, continue, retry, ;, case, INTERFACE, :, if, (, !]
[(, reason, ), ;, }, token, =, reasonInfo, ., token, ;, continue, retry, ;, case, INTERFACE, :, if, (, !]
[token, ;, continue, retry, ;, case, INTERFACE, :, if, (, !, jsdocBuilder, ., recordInterface, (, ), ), {, if, (]
[token, ;, continue, retry, ;, case, INTERFACE, :, if, (, !, jsdocBuilder, ., recordInterface, (, ), ), {, if, (]
[:, if, (, !, jsdocBuilder, ., recordInterface, (, ), ), {, if, (, jsdocBuilder, ., isConstructorRecorded, (, ), ), {]
[:, if, (, !, jsdocBuilder, ., recordInterface, (, ), ), {, if, (, jsdocBuilder, ., isConstructorRecorded, (, ), ), {]
[jsdocBuilder, ., recordInterface, (, ), ), {, if, (, jsdocBuilder, ., isConstructorRecorded, (, ), ), {, parser, ., addTypeWarning, (]
[recordInterface, (, ), ), {, if, (, jsdocBuilder, ., isConstructorRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,]
[recordInterface, (, ), ), {, if, (, jsdocBuilder, ., isConstructorRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,]
[(, jsdocBuilder, ., isConstructorRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,]
[(, jsdocBuilder, ., isConstructorRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,]
[addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
[addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
[stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (]
[getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,]
[getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }]
[(, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, token, =]
[,, stream, ., getCharno, (, ), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[(, ), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DESC, :, if, (]
[(, ), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DESC, :, if, (]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DESC, :, if, (, jsdocBuilder, ., isDescriptionRecorded, (, ), ), {]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DESC, :, if, (, jsdocBuilder, ., isDescriptionRecorded, (, ), ), {]
[;, continue, retry, ;, case, DESC, :, if, (, jsdocBuilder, ., isDescriptionRecorded, (, ), ), {, parser, ., addParserWarning, (]
[retry, ;, case, DESC, :, if, (, jsdocBuilder, ., isDescriptionRecorded, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.desc.extra", ,]
[retry, ;, case, DESC, :, if, (, jsdocBuilder, ., isDescriptionRecorded, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.desc.extra", ,]
[(, jsdocBuilder, ., isDescriptionRecorded, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.desc.extra", ,, stream, ., getLineno, (, ), ,]
[(, jsdocBuilder, ., isDescriptionRecorded, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.desc.extra", ,, stream, ., getLineno, (, ), ,]
[{, parser, ., addParserWarning, (, "msg.jsdoc.desc.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;]
[., addParserWarning, (, "msg.jsdoc.desc.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, token, =]
[getCharno, (, ), ), ;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, else, {, ExtractionInfo, descriptionInfo, =]
[), ), ;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, else, {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (]
[(, ), ;, continue, retry, ;, }, else, {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =]
[(, ), ;, continue, retry, ;, }, else, {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =]
[retry, ;, }, else, {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =, descriptionInfo, ., string, ;]
[retry, ;, }, else, {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =, descriptionInfo, ., string, ;]
[{, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =, descriptionInfo, ., string, ;, jsdocBuilder, ., recordDescription, (]
[=, extractMultilineTextualBlock, (, token, ), ;, String, description, =, descriptionInfo, ., string, ;, jsdocBuilder, ., recordDescription, (, description, ), ;]
[(, token, ), ;, String, description, =, descriptionInfo, ., string, ;, jsdocBuilder, ., recordDescription, (, description, ), ;, token, =]
[(, token, ), ;, String, description, =, descriptionInfo, ., string, ;, jsdocBuilder, ., recordDescription, (, description, ), ;, token, =]
[string, ;, jsdocBuilder, ., recordDescription, (, description, ), ;, token, =, descriptionInfo, ., token, ;, continue, retry, ;, }, case]
[(, description, ), ;, token, =, descriptionInfo, ., token, ;, continue, retry, ;, }, case, FILE_OVERVIEW, :, String, fileOverview, =]
[token, =, descriptionInfo, ., token, ;, continue, retry, ;, }, case, FILE_OVERVIEW, :, String, fileOverview, =, "", ;, if, (]
[token, =, descriptionInfo, ., token, ;, continue, retry, ;, }, case, FILE_OVERVIEW, :, String, fileOverview, =, "", ;, if, (]
[case, FILE_OVERVIEW, :, String, fileOverview, =, "", ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, fileOverviewInfo, =]
[:, String, fileOverview, =, "", ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (]
[fileOverview, =, "", ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (, token, ,]
[fileOverview, =, "", ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (, token, ,]
[(, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., TRIM, ), ;]
[., shouldParseDocumentation, (, ), ), {, ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., TRIM, ), ;, fileOverview, =]
[., shouldParseDocumentation, (, ), ), {, ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., TRIM, ), ;, fileOverview, =]
[), {, ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., TRIM, ), ;, fileOverview, =, fileOverviewInfo, ., string, ;]
[ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., TRIM, ), ;, fileOverview, =, fileOverviewInfo, ., string, ;, token, =]
[ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., TRIM, ), ;, fileOverview, =, fileOverviewInfo, ., string, ;, token, =]
[WhitespaceOption, ., TRIM, ), ;, fileOverview, =, fileOverviewInfo, ., string, ;, token, =, fileOverviewInfo, ., token, ;, }, else, {]
[TRIM, ), ;, fileOverview, =, fileOverviewInfo, ., string, ;, token, =, fileOverviewInfo, ., token, ;, }, else, {, token, =]
[;, fileOverview, =, fileOverviewInfo, ., string, ;, token, =, fileOverviewInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (]
[;, token, =, fileOverviewInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, if, (]
[token, =, fileOverviewInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, if, (, !]
[token, =, fileOverviewInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, if, (, !]
[token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, if, (, !, jsdocBuilder, ., recordFileOverview, (]
[{, token, =, eatTokensUntilEOL, (, token, ), ;, }, if, (, !, jsdocBuilder, ., recordFileOverview, (, fileOverview, ), ), {]
[{, token, =, eatTokensUntilEOL, (, token, ), ;, }, if, (, !, jsdocBuilder, ., recordFileOverview, (, fileOverview, ), ), {]
[(, token, ), ;, }, if, (, !, jsdocBuilder, ., recordFileOverview, (, fileOverview, ), ), {, parser, ., addParserWarning, (]
[), ;, }, if, (, !, jsdocBuilder, ., recordFileOverview, (, fileOverview, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.fileoverview.extra", ,]
[), ;, }, if, (, !, jsdocBuilder, ., recordFileOverview, (, fileOverview, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.fileoverview.extra", ,]
[jsdocBuilder, ., recordFileOverview, (, fileOverview, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.fileoverview.extra", ,, stream, ., getLineno, (, ), ,]
[jsdocBuilder, ., recordFileOverview, (, fileOverview, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.fileoverview.extra", ,, stream, ., getLineno, (, ), ,]
["msg.jsdoc.fileoverview.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case, LICENSE, :, case]
[stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case, LICENSE, :, case, PRESERVE, :, ExtractionInfo, preserveInfo, =]
[getCharno, (, ), ), ;, }, continue, retry, ;, case, LICENSE, :, case, PRESERVE, :, ExtractionInfo, preserveInfo, =, extractMultilineTextualBlock, (]
[), ), ;, }, continue, retry, ;, case, LICENSE, :, case, PRESERVE, :, ExtractionInfo, preserveInfo, =, extractMultilineTextualBlock, (, token, ,]
[), ), ;, }, continue, retry, ;, case, LICENSE, :, case, PRESERVE, :, ExtractionInfo, preserveInfo, =, extractMultilineTextualBlock, (, token, ,]
[LICENSE, :, case, PRESERVE, :, ExtractionInfo, preserveInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., PRESERVE, ), ;, String, preserve, =]
[LICENSE, :, case, PRESERVE, :, ExtractionInfo, preserveInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., PRESERVE, ), ;, String, preserve, =]
[preserveInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., PRESERVE, ), ;, String, preserve, =, preserveInfo, ., string, ;, if, (]
[preserveInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., PRESERVE, ), ;, String, preserve, =, preserveInfo, ., string, ;, if, (]
[preserveInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., PRESERVE, ), ;, String, preserve, =, preserveInfo, ., string, ;, if, (]
[WhitespaceOption, ., PRESERVE, ), ;, String, preserve, =, preserveInfo, ., string, ;, if, (, preserve, ., length, (, ), >]
[String, preserve, =, preserveInfo, ., string, ;, if, (, preserve, ., length, (, ), >, 0, ), {, if, (]
[String, preserve, =, preserveInfo, ., string, ;, if, (, preserve, ., length, (, ), >, 0, ), {, if, (]
[=, preserveInfo, ., string, ;, if, (, preserve, ., length, (, ), >, 0, ), {, if, (, fileLevelJsDocBuilder, !=]
[string, ;, if, (, preserve, ., length, (, ), >, 0, ), {, if, (, fileLevelJsDocBuilder, !=, null, ), {]
[string, ;, if, (, preserve, ., length, (, ), >, 0, ), {, if, (, fileLevelJsDocBuilder, !=, null, ), {]
[preserve, ., length, (, ), >, 0, ), {, if, (, fileLevelJsDocBuilder, !=, null, ), {, fileLevelJsDocBuilder, ., append, (]
[>, 0, ), {, if, (, fileLevelJsDocBuilder, !=, null, ), {, fileLevelJsDocBuilder, ., append, (, preserve, ), ;, }, }]
[), {, if, (, fileLevelJsDocBuilder, !=, null, ), {, fileLevelJsDocBuilder, ., append, (, preserve, ), ;, }, }, token, =]
[), {, if, (, fileLevelJsDocBuilder, !=, null, ), {, fileLevelJsDocBuilder, ., append, (, preserve, ), ;, }, }, token, =]
[{, fileLevelJsDocBuilder, ., append, (, preserve, ), ;, }, }, token, =, preserveInfo, ., token, ;, continue, retry, ;, case]
[., append, (, preserve, ), ;, }, }, token, =, preserveInfo, ., token, ;, continue, retry, ;, case, ENUM, :]
[(, preserve, ), ;, }, }, token, =, preserveInfo, ., token, ;, continue, retry, ;, case, ENUM, :, token, =]
[}, }, token, =, preserveInfo, ., token, ;, continue, retry, ;, case, ENUM, :, token, =, next, (, ), ;]
[token, =, preserveInfo, ., token, ;, continue, retry, ;, case, ENUM, :, token, =, next, (, ), ;, lineno, =]
[token, =, preserveInfo, ., token, ;, continue, retry, ;, case, ENUM, :, token, =, next, (, ), ;, lineno, =]
[continue, retry, ;, case, ENUM, :, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;]
[;, case, ENUM, :, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[;, case, ENUM, :, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;]
[), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =]
[stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (]
[stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (]
[stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (]
[getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, !=]
[getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, !=]
[charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, !=, JsDocToken, ., EOL, &&]
[charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, !=, JsDocToken, ., EOL, &&]
[stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=]
[stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=]
[;, type, =, null, ;, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOC, ), {]
[=, null, ;, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOC, ), {, type, =]
[;, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOC, ), {, type, =, createJSTypeExpression, (]
[(, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (]
[token, !=, JsDocToken, ., EOC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (]
[token, !=, JsDocToken, ., EOC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (]
[JsDocToken, ., EOC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (, type, ==]
[), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (, type, ==, null, ), {]
[type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (, type, ==, null, ), {, type, =]
[createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (]
[parseAndRecordTypeNode, (, token, ), ), ;, }, if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (, newStringNode, (]
[if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (, newStringNode, (, "number", ), ), ;, }, if, (]
[(, type, ==, null, ), {, type, =, createJSTypeExpression, (, newStringNode, (, "number", ), ), ;, }, if, (, !]
[(, type, ==, null, ), {, type, =, createJSTypeExpression, (, newStringNode, (, "number", ), ), ;, }, if, (, !]
[), {, type, =, createJSTypeExpression, (, newStringNode, (, "number", ), ), ;, }, if, (, !, jsdocBuilder, ., recordEnumParameterType, (]
[createJSTypeExpression, (, newStringNode, (, "number", ), ), ;, }, if, (, !, jsdocBuilder, ., recordEnumParameterType, (, type, ), ), {]
[createJSTypeExpression, (, newStringNode, (, "number", ), ), ;, }, if, (, !, jsdocBuilder, ., recordEnumParameterType, (, type, ), ), {]
["number", ), ), ;, }, if, (, !, jsdocBuilder, ., recordEnumParameterType, (, type, ), ), {, parser, ., addTypeWarning, (]
[), ;, }, if, (, !, jsdocBuilder, ., recordEnumParameterType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[}, if, (, !, jsdocBuilder, ., recordEnumParameterType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,]
[jsdocBuilder, ., recordEnumParameterType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }]
[recordEnumParameterType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, token, =]
[type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL, (]
[(, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case]
[,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, EXPORT, :, if, (]
[charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, EXPORT, :, if, (, !]
[charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, EXPORT, :, if, (, !]
[(, token, ), ;, continue, retry, ;, case, EXPORT, :, if, (, !, jsdocBuilder, ., recordExport, (, ), ), {]
[(, token, ), ;, continue, retry, ;, case, EXPORT, :, if, (, !, jsdocBuilder, ., recordExport, (, ), ), {]
[continue, retry, ;, case, EXPORT, :, if, (, !, jsdocBuilder, ., recordExport, (, ), ), {, parser, ., addParserWarning, (]
[;, case, EXPORT, :, if, (, !, jsdocBuilder, ., recordExport, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.export", ,]
[;, case, EXPORT, :, if, (, !, jsdocBuilder, ., recordExport, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.export", ,]
[!, jsdocBuilder, ., recordExport, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.export", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordExport, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.export", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.export", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.export", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXPOSE, :, if, (]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXPOSE, :, if, (, !]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXPOSE, :, if, (, !]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXPOSE, :, if, (, !, jsdocBuilder, ., recordExpose, (, ), ), {]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXPOSE, :, if, (, !, jsdocBuilder, ., recordExpose, (, ), ), {]
[continue, retry, ;, case, EXPOSE, :, if, (, !, jsdocBuilder, ., recordExpose, (, ), ), {, parser, ., addParserWarning, (]
[;, case, EXPOSE, :, if, (, !, jsdocBuilder, ., recordExpose, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.expose", ,]
[;, case, EXPOSE, :, if, (, !, jsdocBuilder, ., recordExpose, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.expose", ,]
[!, jsdocBuilder, ., recordExpose, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.expose", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordExpose, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.expose", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.expose", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.expose", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTERNS, :, if, (]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTERNS, :, if, (, !]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTERNS, :, if, (, !]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTERNS, :, if, (, !, jsdocBuilder, ., recordExterns, (, ), ), {]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTERNS, :, if, (, !, jsdocBuilder, ., recordExterns, (, ), ), {]
[continue, retry, ;, case, EXTERNS, :, if, (, !, jsdocBuilder, ., recordExterns, (, ), ), {, parser, ., addParserWarning, (]
[;, case, EXTERNS, :, if, (, !, jsdocBuilder, ., recordExterns, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.externs", ,]
[;, case, EXTERNS, :, if, (, !, jsdocBuilder, ., recordExterns, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.externs", ,]
[!, jsdocBuilder, ., recordExterns, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.externs", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordExterns, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.externs", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.externs", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.externs", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, JAVA_DISPATCH, :, if, (]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, JAVA_DISPATCH, :, if, (, !]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, JAVA_DISPATCH, :, if, (, !]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, JAVA_DISPATCH, :, if, (, !, jsdocBuilder, ., recordJavaDispatch, (, ), ), {]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, JAVA_DISPATCH, :, if, (, !, jsdocBuilder, ., recordJavaDispatch, (, ), ), {]
[continue, retry, ;, case, JAVA_DISPATCH, :, if, (, !, jsdocBuilder, ., recordJavaDispatch, (, ), ), {, parser, ., addParserWarning, (]
[;, case, JAVA_DISPATCH, :, if, (, !, jsdocBuilder, ., recordJavaDispatch, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.javadispatch", ,]
[;, case, JAVA_DISPATCH, :, if, (, !, jsdocBuilder, ., recordJavaDispatch, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.javadispatch", ,]
[!, jsdocBuilder, ., recordJavaDispatch, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.javadispatch", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordJavaDispatch, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.javadispatch", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.javadispatch", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.javadispatch", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTENDS, :, case]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTENDS, :, case, IMPLEMENTS, :]
[}, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTENDS, :, case, IMPLEMENTS, :, skipEOLs, (, ), ;]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTENDS, :, case, IMPLEMENTS, :, skipEOLs, (, ), ;, token, =]
[;, continue, retry, ;, case, EXTENDS, :, case, IMPLEMENTS, :, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[retry, ;, case, EXTENDS, :, case, IMPLEMENTS, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =]
[retry, ;, case, EXTENDS, :, case, IMPLEMENTS, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =]
[IMPLEMENTS, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, boolean, matchingRc, =]
[., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, boolean, matchingRc, =, false, ;, if, (]
[., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, boolean, matchingRc, =, false, ;, if, (]
[(, ), ;, charno, =, stream, ., getCharno, (, ), ;, boolean, matchingRc, =, false, ;, if, (, token, ==]
[(, ), ;, charno, =, stream, ., getCharno, (, ), ;, boolean, matchingRc, =, false, ;, if, (, token, ==]
[stream, ., getCharno, (, ), ;, boolean, matchingRc, =, false, ;, if, (, token, ==, JsDocToken, ., LC, ), {]
[getCharno, (, ), ;, boolean, matchingRc, =, false, ;, if, (, token, ==, JsDocToken, ., LC, ), {, token, =]
[boolean, matchingRc, =, false, ;, if, (, token, ==, JsDocToken, ., LC, ), {, token, =, next, (, ), ;]
[=, false, ;, if, (, token, ==, JsDocToken, ., LC, ), {, token, =, next, (, ), ;, matchingRc, =]
[token, ==, JsDocToken, ., LC, ), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (]
[token, ==, JsDocToken, ., LC, ), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (]
[JsDocToken, ., LC, ), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (, token, ==]
[JsDocToken, ., LC, ), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (, token, ==]
[(, ), ;, matchingRc, =, true, ;, }, if, (, token, ==, JsDocToken, ., STRING, ), {, Node, typeNode, =]
[;, matchingRc, =, true, ;, }, if, (, token, ==, JsDocToken, ., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (]
[=, true, ;, }, if, (, token, ==, JsDocToken, ., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,]
[;, }, if, (, token, ==, JsDocToken, ., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,, lineno, ,]
[if, (, token, ==, JsDocToken, ., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,, lineno, ,, charno, ,]
[==, JsDocToken, ., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,, lineno, ,, charno, ,, matchingRc, ), ;]
[., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,, lineno, ,, charno, ,, matchingRc, ), ;, lineno, =]
[., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,, lineno, ,, charno, ,, matchingRc, ), ;, lineno, =]
[=, parseAndRecordTypeNameNode, (, token, ,, lineno, ,, charno, ,, matchingRc, ), ;, lineno, =, stream, ., getLineno, (, ), ;]
[(, token, ,, lineno, ,, charno, ,, matchingRc, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[(, token, ,, lineno, ,, charno, ,, matchingRc, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[,, matchingRc, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;]
[), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, typeNode, =]
[lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, typeNode, =, wrapNode, (]
[lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, typeNode, =, wrapNode, (]
[getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, typeNode, =, wrapNode, (, Token, ., BANG, ,]
[;, charno, =, stream, ., getCharno, (, ), ;, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;]
[=, stream, ., getCharno, (, ), ;, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, type, =]
[., getCharno, (, ), ;, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, type, =, createJSTypeExpression, (]
[typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, type, =, createJSTypeExpression, (, typeNode, ), ;, if, (]
[typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, type, =, createJSTypeExpression, (, typeNode, ), ;, if, (]
[wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, type, =, createJSTypeExpression, (, typeNode, ), ;, if, (, annotation, ==]
[wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, type, =, createJSTypeExpression, (, typeNode, ), ;, if, (, annotation, ==]
[,, typeNode, ), ;, type, =, createJSTypeExpression, (, typeNode, ), ;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {]
[,, typeNode, ), ;, type, =, createJSTypeExpression, (, typeNode, ), ;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {]
[type, =, createJSTypeExpression, (, typeNode, ), ;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {, extendedTypes, ., add, (]
[(, typeNode, ), ;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {, extendedTypes, ., add, (, new, ExtendedTypeInfo, (]
[), ;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {, extendedTypes, ., add, (, new, ExtendedTypeInfo, (, type, ,]
[), ;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {, extendedTypes, ., add, (, new, ExtendedTypeInfo, (, type, ,]
[Annotation, ., EXTENDS, ), {, extendedTypes, ., add, (, new, ExtendedTypeInfo, (, type, ,, stream, ., getLineno, (, ), ,]
[Annotation, ., EXTENDS, ), {, extendedTypes, ., add, (, new, ExtendedTypeInfo, (, type, ,, stream, ., getLineno, (, ), ,]
[(, type, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ), ;, }, else, {]
[(, type, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ), ;, }, else, {]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ), ;, }, else, {, Preconditions, ., checkState, (]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ), ;, }, else, {, Preconditions, ., checkState, (]
[(, ), ,, stream, ., getCharno, (, ), ), ), ;, }, else, {, Preconditions, ., checkState, (, annotation, ==]
[(, ), ,, stream, ., getCharno, (, ), ), ), ;, }, else, {, Preconditions, ., checkState, (, annotation, ==]
[), ), ), ;, }, else, {, Preconditions, ., checkState, (, annotation, ==, Annotation, ., IMPLEMENTS, ), ;, if, (]
[), ), ;, }, else, {, Preconditions, ., checkState, (, annotation, ==, Annotation, ., IMPLEMENTS, ), ;, if, (, !]
[), ), ;, }, else, {, Preconditions, ., checkState, (, annotation, ==, Annotation, ., IMPLEMENTS, ), ;, if, (, !]
[else, {, Preconditions, ., checkState, (, annotation, ==, Annotation, ., IMPLEMENTS, ), ;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (]
[checkState, (, annotation, ==, Annotation, ., IMPLEMENTS, ), ;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (, type, ), ), {]
[checkState, (, annotation, ==, Annotation, ., IMPLEMENTS, ), ;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (, type, ), ), {]
[Annotation, ., IMPLEMENTS, ), ;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (, type, ), ), {, parser, ., addTypeWarning, (]
[IMPLEMENTS, ), ;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,]
[;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno, ,]
[., recordImplementedInterface, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno, ,, charno, ), ;, }, }]
[(, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno, ,, charno, ), ;, }, }, token, =]
[., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno, ,, charno, ), ;, }, }, token, =, next, (, ), ;, if, (]
[lineno, ,, charno, ), ;, }, }, token, =, next, (, ), ;, if, (, matchingRc, ), {, if, (]
[lineno, ,, charno, ), ;, }, }, token, =, next, (, ), ;, if, (, matchingRc, ), {, if, (]
[charno, ), ;, }, }, token, =, next, (, ), ;, if, (, matchingRc, ), {, if, (, token, !=]
[charno, ), ;, }, }, token, =, next, (, ), ;, if, (, matchingRc, ), {, if, (, token, !=]
[token, =, next, (, ), ;, if, (, matchingRc, ), {, if, (, token, !=, JsDocToken, ., RC, ), {]
[token, =, next, (, ), ;, if, (, matchingRc, ), {, if, (, token, !=, JsDocToken, ., RC, ), {]
[), ;, if, (, matchingRc, ), {, if, (, token, !=, JsDocToken, ., RC, ), {, parser, ., addTypeWarning, (]
[if, (, matchingRc, ), {, if, (, token, !=, JsDocToken, ., RC, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,]
[if, (, matchingRc, ), {, if, (, token, !=, JsDocToken, ., RC, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,]
[(, token, !=, JsDocToken, ., RC, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,]
[(, token, !=, JsDocToken, ., RC, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,]
["msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, if, (]
["msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, if, (]
["msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, if, (]
["msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, if, (]
[stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, if, (, token, !=]
[stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, if, (, token, !=]
[), ,, stream, ., getCharno, (, ), ), ;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&]
[), ,, stream, ., getCharno, (, ), ), ;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&]
[stream, ., getCharno, (, ), ), ;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=]
[stream, ., getCharno, (, ), ), ;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=]
[), ), ;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOF, &&]
[), ), ;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOF, &&]
[;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOF, &&, token, !=]
[;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOF, &&, token, !=]
[(, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOF, &&, token, !=, JsDocToken, ., EOC, ), {]
[(, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOF, &&, token, !=, JsDocToken, ., EOC, ), {]
[., EOL, &&, token, !=, JsDocToken, ., EOF, &&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (]
[&&, token, !=, JsDocToken, ., EOF, &&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,]
[&&, token, !=, JsDocToken, ., EOF, &&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,]
[&&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,]
[&&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,]
[(, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {]
[(, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (]
[(, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.no.type.name", ,]
[,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.no.type.name", ,, lineno, ,]
[(, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.no.type.name", ,, lineno, ,, charno, ), ;, }]
[), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.no.type.name", ,, lineno, ,, charno, ), ;, }, token, =]
[}, }, else, {, parser, ., addTypeWarning, (, "msg.no.type.name", ,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL, (]
[(, "msg.no.type.name", ,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case]
[,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, HIDDEN, :, if, (]
[charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, HIDDEN, :, if, (, !]
[charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, HIDDEN, :, if, (, !]
[(, token, ), ;, continue, retry, ;, case, HIDDEN, :, if, (, !, jsdocBuilder, ., recordHiddenness, (, ), ), {]
[(, token, ), ;, continue, retry, ;, case, HIDDEN, :, if, (, !, jsdocBuilder, ., recordHiddenness, (, ), ), {]
[continue, retry, ;, case, HIDDEN, :, if, (, !, jsdocBuilder, ., recordHiddenness, (, ), ), {, parser, ., addParserWarning, (]
[;, case, HIDDEN, :, if, (, !, jsdocBuilder, ., recordHiddenness, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.hidden", ,]
[;, case, HIDDEN, :, if, (, !, jsdocBuilder, ., recordHiddenness, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.hidden", ,]
[!, jsdocBuilder, ., recordHiddenness, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.hidden", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordHiddenness, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.hidden", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.hidden", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.hidden", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, LENDS, :]
[), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, LENDS, :, skipEOLs, (, ), ;]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, LENDS, :, skipEOLs, (, ), ;, matchingRc, =]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, LENDS, :, skipEOLs, (, ), ;, matchingRc, =, false, ;, if, (]
[), ;, continue, retry, ;, case, LENDS, :, skipEOLs, (, ), ;, matchingRc, =, false, ;, if, (, match, (]
[), ;, continue, retry, ;, case, LENDS, :, skipEOLs, (, ), ;, matchingRc, =, false, ;, if, (, match, (]
[LENDS, :, skipEOLs, (, ), ;, matchingRc, =, false, ;, if, (, match, (, JsDocToken, ., LC, ), ), {]
[skipEOLs, (, ), ;, matchingRc, =, false, ;, if, (, match, (, JsDocToken, ., LC, ), ), {, token, =]
[matchingRc, =, false, ;, if, (, match, (, JsDocToken, ., LC, ), ), {, token, =, next, (, ), ;]
[false, ;, if, (, match, (, JsDocToken, ., LC, ), ), {, token, =, next, (, ), ;, matchingRc, =]
[(, JsDocToken, ., LC, ), ), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (]
[., LC, ), ), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (, match, (]
[., LC, ), ), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (, match, (]
[=, next, (, ), ;, matchingRc, =, true, ;, }, if, (, match, (, JsDocToken, ., STRING, ), ), {]
[(, ), ;, matchingRc, =, true, ;, }, if, (, match, (, JsDocToken, ., STRING, ), ), {, token, =]
[;, }, if, (, match, (, JsDocToken, ., STRING, ), ), {, token, =, next, (, ), ;, if, (]
[}, if, (, match, (, JsDocToken, ., STRING, ), ), {, token, =, next, (, ), ;, if, (, !]
[}, if, (, match, (, JsDocToken, ., STRING, ), ), {, token, =, next, (, ), ;, if, (, !]
[(, JsDocToken, ., STRING, ), ), {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordLends, (]
[(, JsDocToken, ., STRING, ), ), {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordLends, (]
[=, next, (, ), ;, if, (, !, jsdocBuilder, ., recordLends, (, stream, ., getString, (, ), ), ), {]
[=, next, (, ), ;, if, (, !, jsdocBuilder, ., recordLends, (, stream, ., getString, (, ), ), ), {]
[;, if, (, !, jsdocBuilder, ., recordLends, (, stream, ., getString, (, ), ), ), {, parser, ., addTypeWarning, (]
[(, !, jsdocBuilder, ., recordLends, (, stream, ., getString, (, ), ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.incompatible", ,]
[(, !, jsdocBuilder, ., recordLends, (, stream, ., getString, (, ), ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.incompatible", ,]
[stream, ., getString, (, ), ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.incompatible", ,, stream, ., getLineno, (, ), ,]
[stream, ., getString, (, ), ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.incompatible", ,, stream, ., getLineno, (, ), ,]
[(, "msg.jsdoc.lends.incompatible", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {]
[(, "msg.jsdoc.lends.incompatible", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (]
[(, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.missing", ,]
[(, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.missing", ,]
[(, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.missing", ,, stream, ., getLineno, (, ), ,]
[(, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.missing", ,, stream, ., getLineno, (, ), ,]
[addTypeWarning, (, "msg.jsdoc.lends.missing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, if, (]
[addTypeWarning, (, "msg.jsdoc.lends.missing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, if, (]
["msg.jsdoc.lends.missing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, if, (, matchingRc, &&]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, if, (, matchingRc, &&, !]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, if, (, matchingRc, &&, !, match, (]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, if, (, matchingRc, &&, !, match, (]
[., getCharno, (, ), ), ;, }, if, (, matchingRc, &&, !, match, (, JsDocToken, ., RC, ), ), {]
[., getCharno, (, ), ), ;, }, if, (, matchingRc, &&, !, match, (, JsDocToken, ., RC, ), ), {]
[), ;, }, if, (, matchingRc, &&, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addTypeWarning, (]
[}, if, (, matchingRc, &&, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,]
[}, if, (, matchingRc, &&, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,]
[match, (, JsDocToken, ., RC, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,]
[match, (, JsDocToken, ., RC, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,]
[parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MEANING, :, ExtractionInfo, meaningInfo, =]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MEANING, :, ExtractionInfo, meaningInfo, =, extractMultilineTextualBlock, (]
[(, ), ;, continue, retry, ;, case, MEANING, :, ExtractionInfo, meaningInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, meaning, =]
[(, ), ;, continue, retry, ;, case, MEANING, :, ExtractionInfo, meaningInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, meaning, =]
[retry, ;, case, MEANING, :, ExtractionInfo, meaningInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, meaning, =, meaningInfo, ., string, ;]
[case, MEANING, :, ExtractionInfo, meaningInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, meaning, =, meaningInfo, ., string, ;, token, =]
[case, MEANING, :, ExtractionInfo, meaningInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, meaning, =, meaningInfo, ., string, ;, token, =]
[extractMultilineTextualBlock, (, token, ), ;, String, meaning, =, meaningInfo, ., string, ;, token, =, meaningInfo, ., token, ;, if, (]
[(, token, ), ;, String, meaning, =, meaningInfo, ., string, ;, token, =, meaningInfo, ., token, ;, if, (, !]
[(, token, ), ;, String, meaning, =, meaningInfo, ., string, ;, token, =, meaningInfo, ., token, ;, if, (, !]
[String, meaning, =, meaningInfo, ., string, ;, token, =, meaningInfo, ., token, ;, if, (, !, jsdocBuilder, ., recordMeaning, (]
[., string, ;, token, =, meaningInfo, ., token, ;, if, (, !, jsdocBuilder, ., recordMeaning, (, meaning, ), ), {]
[., string, ;, token, =, meaningInfo, ., token, ;, if, (, !, jsdocBuilder, ., recordMeaning, (, meaning, ), ), {]
[=, meaningInfo, ., token, ;, if, (, !, jsdocBuilder, ., recordMeaning, (, meaning, ), ), {, parser, ., addParserWarning, (]
[., token, ;, if, (, !, jsdocBuilder, ., recordMeaning, (, meaning, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.meaning.extra", ,]
[., token, ;, if, (, !, jsdocBuilder, ., recordMeaning, (, meaning, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.meaning.extra", ,]
[jsdocBuilder, ., recordMeaning, (, meaning, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.meaning.extra", ,, stream, ., getLineno, (, ), ,]
[jsdocBuilder, ., recordMeaning, (, meaning, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.meaning.extra", ,, stream, ., getLineno, (, ), ,]
["msg.jsdoc.meaning.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case]
[getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case, NO_ALIAS, :, if, (]
[(, ), ,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case, NO_ALIAS, :, if, (, !]
[(, ), ,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case, NO_ALIAS, :, if, (, !]
[), ), ;, }, continue, retry, ;, case, NO_ALIAS, :, if, (, !, jsdocBuilder, ., recordNoAlias, (, ), ), {]
[), ), ;, }, continue, retry, ;, case, NO_ALIAS, :, if, (, !, jsdocBuilder, ., recordNoAlias, (, ), ), {]
[continue, retry, ;, case, NO_ALIAS, :, if, (, !, jsdocBuilder, ., recordNoAlias, (, ), ), {, parser, ., addParserWarning, (]
[;, case, NO_ALIAS, :, if, (, !, jsdocBuilder, ., recordNoAlias, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noalias", ,]
[;, case, NO_ALIAS, :, if, (, !, jsdocBuilder, ., recordNoAlias, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noalias", ,]
[!, jsdocBuilder, ., recordNoAlias, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noalias", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordNoAlias, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noalias", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.noalias", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.noalias", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_COMPILE, :, if, (]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_COMPILE, :, if, (, !]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_COMPILE, :, if, (, !]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_COMPILE, :, if, (, !, jsdocBuilder, ., recordNoCompile, (, ), ), {]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_COMPILE, :, if, (, !, jsdocBuilder, ., recordNoCompile, (, ), ), {]
[continue, retry, ;, case, NO_COMPILE, :, if, (, !, jsdocBuilder, ., recordNoCompile, (, ), ), {, parser, ., addParserWarning, (]
[;, case, NO_COMPILE, :, if, (, !, jsdocBuilder, ., recordNoCompile, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocompile", ,]
[;, case, NO_COMPILE, :, if, (, !, jsdocBuilder, ., recordNoCompile, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocompile", ,]
[!, jsdocBuilder, ., recordNoCompile, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocompile", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordNoCompile, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocompile", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.nocompile", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.nocompile", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_TYPE_CHECK, :, if, (]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_TYPE_CHECK, :, if, (, !]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_TYPE_CHECK, :, if, (, !]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_TYPE_CHECK, :, if, (, !, jsdocBuilder, ., recordNoTypeCheck, (, ), ), {]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_TYPE_CHECK, :, if, (, !, jsdocBuilder, ., recordNoTypeCheck, (, ), ), {]
[continue, retry, ;, case, NO_TYPE_CHECK, :, if, (, !, jsdocBuilder, ., recordNoTypeCheck, (, ), ), {, parser, ., addParserWarning, (]
[;, case, NO_TYPE_CHECK, :, if, (, !, jsdocBuilder, ., recordNoTypeCheck, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocheck", ,]
[;, case, NO_TYPE_CHECK, :, if, (, !, jsdocBuilder, ., recordNoTypeCheck, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocheck", ,]
[!, jsdocBuilder, ., recordNoTypeCheck, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocheck", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordNoTypeCheck, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocheck", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.nocheck", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.nocheck", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NOT_IMPLEMENTED, :]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NOT_IMPLEMENTED, :, token, =]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NOT_IMPLEMENTED, :, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[;, continue, retry, ;, case, NOT_IMPLEMENTED, :, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, INHERIT_DOC, :, case]
[case, NOT_IMPLEMENTED, :, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, INHERIT_DOC, :, case, OVERRIDE, :, if, (]
[NOT_IMPLEMENTED, :, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, INHERIT_DOC, :, case, OVERRIDE, :, if, (, !]
[NOT_IMPLEMENTED, :, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, INHERIT_DOC, :, case, OVERRIDE, :, if, (, !]
[;, continue, retry, ;, case, INHERIT_DOC, :, case, OVERRIDE, :, if, (, !, jsdocBuilder, ., recordOverride, (, ), ), {]
[;, continue, retry, ;, case, INHERIT_DOC, :, case, OVERRIDE, :, if, (, !, jsdocBuilder, ., recordOverride, (, ), ), {]
[case, INHERIT_DOC, :, case, OVERRIDE, :, if, (, !, jsdocBuilder, ., recordOverride, (, ), ), {, parser, ., addTypeWarning, (]
[:, case, OVERRIDE, :, if, (, !, jsdocBuilder, ., recordOverride, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.override", ,]
[:, case, OVERRIDE, :, if, (, !, jsdocBuilder, ., recordOverride, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.override", ,]
[!, jsdocBuilder, ., recordOverride, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.override", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordOverride, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.override", ,, stream, ., getLineno, (, ), ,]
[parser, ., addTypeWarning, (, "msg.jsdoc.override", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addTypeWarning, (, "msg.jsdoc.override", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, THROWS, :]
[), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, THROWS, :, skipEOLs, (, ), ;]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, THROWS, :, skipEOLs, (, ), ;, token, =]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, THROWS, :, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[), ;, continue, retry, ;, case, THROWS, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =]
[), ;, continue, retry, ;, case, THROWS, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =]
[THROWS, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;]
[), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =]
[stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (]
[stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (]
[getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==]
[getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==]
[=, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {]
[., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =]
[(, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (]
[;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (]
[(, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, if, (]
[(, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, if, (]
[==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, if, (, type, ==]
[LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, if, (, type, ==, null, ), {]
[{, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, if, (, type, ==, null, ), {, token, =]
[), ;, if, (, type, ==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }]
[if, (, type, ==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =]
[null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =, current, (, ), ;]
[null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =, current, (, ), ;]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =, current, (, ), ;, jsdocBuilder, ., recordThrowType, (]
[continue, retry, ;, }, }, token, =, current, (, ), ;, jsdocBuilder, ., recordThrowType, (, type, ), ;, if, (]
[continue, retry, ;, }, }, token, =, current, (, ), ;, jsdocBuilder, ., recordThrowType, (, type, ), ;, if, (]
[;, jsdocBuilder, ., recordThrowType, (, type, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, descriptionInfo, =]
[., recordThrowType, (, type, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (]
[if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =]
[if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =]
[), ), {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =, descriptionInfo, ., string, ;, if, (]
[), ), {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =, descriptionInfo, ., string, ;, if, (]
[), ), {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =, descriptionInfo, ., string, ;, if, (]
[extractMultilineTextualBlock, (, token, ), ;, String, description, =, descriptionInfo, ., string, ;, if, (, description, ., length, (, ), >]
[), ;, String, description, =, descriptionInfo, ., string, ;, if, (, description, ., length, (, ), >, 0, ), {]
[), ;, String, description, =, descriptionInfo, ., string, ;, if, (, description, ., length, (, ), >, 0, ), {]
[=, descriptionInfo, ., string, ;, if, (, description, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordThrowDescription, (]
[., string, ;, if, (, description, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordThrowDescription, (, type, ,]
[(, description, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordThrowDescription, (, type, ,, description, ), ;, }]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., recordThrowDescription, (, type, ,, description, ), ;, }, token, =]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., recordThrowDescription, (, type, ,, description, ), ;, }, token, =]
[{, jsdocBuilder, ., recordThrowDescription, (, type, ,, description, ), ;, }, token, =, descriptionInfo, ., token, ;, }, else, {]
[., recordThrowDescription, (, type, ,, description, ), ;, }, token, =, descriptionInfo, ., token, ;, }, else, {, token, =]
[(, type, ,, description, ), ;, }, token, =, descriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (]
[=, descriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case]
[., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PARAM, :]
[else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PARAM, :, skipEOLs, (, ), ;]
[token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PARAM, :, skipEOLs, (, ), ;, token, =]
[token, ), ;, }, continue, retry, ;, case, PARAM, :, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[;, }, continue, retry, ;, case, PARAM, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =]
[;, }, continue, retry, ;, case, PARAM, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =]
[PARAM, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;]
[), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =]
[stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (]
[stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (]
[getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==]
[getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==]
[=, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {]
[., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =]
[(, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (]
[;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (]
[(, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, ), ), ;, if, (]
[(, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, ), ), ;, if, (]
[==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, ), ), ;, if, (, type, ==]
[LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, ), ), ;, if, (, type, ==, null, ), {]
[{, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, ), ), ;, if, (, type, ==, null, ), {, token, =]
[), ), ;, if, (, type, ==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }]
[(, type, ==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, skipEOLs, (, ), ;]
[==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, skipEOLs, (, ), ;, token, =]
[token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =]
[;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, }, String, name, =]
[(, ), ;, charno, =, stream, ., getCharno, (, ), ;, }, String, name, =, null, ;, boolean, isBracketedParam, =]
[(, ), ;, charno, =, stream, ., getCharno, (, ), ;, }, String, name, =, null, ;, boolean, isBracketedParam, =]
[(, ), ;, charno, =, stream, ., getCharno, (, ), ;, }, String, name, =, null, ;, boolean, isBracketedParam, =]
[=, stream, ., getCharno, (, ), ;, }, String, name, =, null, ;, boolean, isBracketedParam, =, JsDocToken, ., LB, ==]
[(, ), ;, }, String, name, =, null, ;, boolean, isBracketedParam, =, JsDocToken, ., LB, ==, token, ;, if, (]
[}, String, name, =, null, ;, boolean, isBracketedParam, =, JsDocToken, ., LB, ==, token, ;, if, (, isBracketedParam, ), {]
[name, =, null, ;, boolean, isBracketedParam, =, JsDocToken, ., LB, ==, token, ;, if, (, isBracketedParam, ), {, token, =]
[JsDocToken, ., LB, ==, token, ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, }, if, (]
[JsDocToken, ., LB, ==, token, ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, }, if, (]
[JsDocToken, ., LB, ==, token, ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, }, if, (]
[token, ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, }, if, (, JsDocToken, ., STRING, !=]
[(, isBracketedParam, ), {, token, =, next, (, ), ;, }, if, (, JsDocToken, ., STRING, !=, token, ), {]
[(, isBracketedParam, ), {, token, =, next, (, ), ;, }, if, (, JsDocToken, ., STRING, !=, token, ), {]
[token, =, next, (, ), ;, }, if, (, JsDocToken, ., STRING, !=, token, ), {, parser, ., addTypeWarning, (]
[next, (, ), ;, }, if, (, JsDocToken, ., STRING, !=, token, ), {, parser, ., addTypeWarning, (, "msg.missing.variable.name", ,]
[), ;, }, if, (, JsDocToken, ., STRING, !=, token, ), {, parser, ., addTypeWarning, (, "msg.missing.variable.name", ,, lineno, ,]
[., STRING, !=, token, ), {, parser, ., addTypeWarning, (, "msg.missing.variable.name", ,, lineno, ,, charno, ), ;, }, else, {]
[!=, token, ), {, parser, ., addTypeWarning, (, "msg.missing.variable.name", ,, lineno, ,, charno, ), ;, }, else, {, name, =]
[!=, token, ), {, parser, ., addTypeWarning, (, "msg.missing.variable.name", ,, lineno, ,, charno, ), ;, }, else, {, name, =]
["msg.missing.variable.name", ,, lineno, ,, charno, ), ;, }, else, {, name, =, stream, ., getString, (, ), ;, if, (]
[,, charno, ), ;, }, else, {, name, =, stream, ., getString, (, ), ;, if, (, isBracketedParam, ), {]
[), ;, }, else, {, name, =, stream, ., getString, (, ), ;, if, (, isBracketedParam, ), {, token, =]
[=, stream, ., getString, (, ), ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, if, (]
[=, stream, ., getString, (, ), ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, if, (]
[=, stream, ., getString, (, ), ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, if, (]
[(, ), ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, if, (, JsDocToken, ., EQUALS, ==]
[if, (, isBracketedParam, ), {, token, =, next, (, ), ;, if, (, JsDocToken, ., EQUALS, ==, token, ), {]
[isBracketedParam, ), {, token, =, next, (, ), ;, if, (, JsDocToken, ., EQUALS, ==, token, ), {, token, =]
[(, ), ;, if, (, JsDocToken, ., EQUALS, ==, token, ), {, token, =, next, (, ), ;, if, (]
[(, ), ;, if, (, JsDocToken, ., EQUALS, ==, token, ), {, token, =, next, (, ), ;, if, (]
[(, ), ;, if, (, JsDocToken, ., EQUALS, ==, token, ), {, token, =, next, (, ), ;, if, (]
[(, JsDocToken, ., EQUALS, ==, token, ), {, token, =, next, (, ), ;, if, (, JsDocToken, ., STRING, ==]
[EQUALS, ==, token, ), {, token, =, next, (, ), ;, if, (, JsDocToken, ., STRING, ==, token, ), {]
[token, ), {, token, =, next, (, ), ;, if, (, JsDocToken, ., STRING, ==, token, ), {, token, =]
[;, if, (, JsDocToken, ., STRING, ==, token, ), {, token, =, next, (, ), ;, }, }, if, (]
[;, if, (, JsDocToken, ., STRING, ==, token, ), {, token, =, next, (, ), ;, }, }, if, (]
[;, if, (, JsDocToken, ., STRING, ==, token, ), {, token, =, next, (, ), ;, }, }, if, (]
[., STRING, ==, token, ), {, token, =, next, (, ), ;, }, }, if, (, JsDocToken, ., RB, !=]
[token, ), {, token, =, next, (, ), ;, }, }, if, (, JsDocToken, ., RB, !=, token, ), {]
[{, token, =, next, (, ), ;, }, }, if, (, JsDocToken, ., RB, !=, token, ), {, reportTypeSyntaxWarning, (]
[}, }, if, (, JsDocToken, ., RB, !=, token, ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if, (]
[}, }, if, (, JsDocToken, ., RB, !=, token, ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if, (]
[if, (, JsDocToken, ., RB, !=, token, ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if, (, type, !=]
[., RB, !=, token, ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if, (, type, !=, null, ), {]
[!=, token, ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if, (, type, !=, null, ), {, type, =]
[!=, token, ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if, (, type, !=, null, ), {, type, =]
[reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if, (, type, !=, null, ), {, type, =, JSTypeExpression, ., makeOptionalArg, (]
[if, (, type, !=, null, ), {, type, =, JSTypeExpression, ., makeOptionalArg, (, type, ), ;, }, }, if, (]
[if, (, type, !=, null, ), {, type, =, JSTypeExpression, ., makeOptionalArg, (, type, ), ;, }, }, if, (]
[if, (, type, !=, null, ), {, type, =, JSTypeExpression, ., makeOptionalArg, (, type, ), ;, }, }, if, (]
[null, ), {, type, =, JSTypeExpression, ., makeOptionalArg, (, type, ), ;, }, }, if, (, name, ., indexOf, (]
[type, =, JSTypeExpression, ., makeOptionalArg, (, type, ), ;, }, }, if, (, name, ., indexOf, (, '.', ), >]
[=, JSTypeExpression, ., makeOptionalArg, (, type, ), ;, }, }, if, (, name, ., indexOf, (, '.', ), >, -]
[makeOptionalArg, (, type, ), ;, }, }, if, (, name, ., indexOf, (, '.', ), >, -, 1, ), {]
[type, ), ;, }, }, if, (, name, ., indexOf, (, '.', ), >, -, 1, ), {, name, =]
[(, name, ., indexOf, (, '.', ), >, -, 1, ), {, name, =, null, ;, }, else, if, (]
[name, ., indexOf, (, '.', ), >, -, 1, ), {, name, =, null, ;, }, else, if, (, !]
[name, ., indexOf, (, '.', ), >, -, 1, ), {, name, =, null, ;, }, else, if, (, !]
['.', ), >, -, 1, ), {, name, =, null, ;, }, else, if, (, !, jsdocBuilder, ., recordParameter, (]
[>, -, 1, ), {, name, =, null, ;, }, else, if, (, !, jsdocBuilder, ., recordParameter, (, name, ,]
[=, null, ;, }, else, if, (, !, jsdocBuilder, ., recordParameter, (, name, ,, type, ), ), {, if, (]
[=, null, ;, }, else, if, (, !, jsdocBuilder, ., recordParameter, (, name, ,, type, ), ), {, if, (]
[else, if, (, !, jsdocBuilder, ., recordParameter, (, name, ,, type, ), ), {, if, (, jsdocBuilder, ., hasParameter, (]
[jsdocBuilder, ., recordParameter, (, name, ,, type, ), ), {, if, (, jsdocBuilder, ., hasParameter, (, name, ), ), {]
[jsdocBuilder, ., recordParameter, (, name, ,, type, ), ), {, if, (, jsdocBuilder, ., hasParameter, (, name, ), ), {]
[name, ,, type, ), ), {, if, (, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addTypeWarning, (]
[type, ), ), {, if, (, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addTypeWarning, (, "msg.dup.variable.name", ,]
[), {, if, (, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addTypeWarning, (, "msg.dup.variable.name", ,, name, ,]
[if, (, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addTypeWarning, (, "msg.dup.variable.name", ,, name, ,, lineno, ,]
[name, ), ), {, parser, ., addTypeWarning, (, "msg.dup.variable.name", ,, name, ,, lineno, ,, charno, ), ;, }, else, {]
[name, ), ), {, parser, ., addTypeWarning, (, "msg.dup.variable.name", ,, name, ,, lineno, ,, charno, ), ;, }, else, {]
[parser, ., addTypeWarning, (, "msg.dup.variable.name", ,, name, ,, lineno, ,, charno, ), ;, }, else, {, parser, ., addTypeWarning, (]
[addTypeWarning, (, "msg.dup.variable.name", ,, name, ,, lineno, ,, charno, ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
["msg.dup.variable.name", ,, name, ,, lineno, ,, charno, ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, name, ,]
[name, ,, lineno, ,, charno, ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, name, ,, lineno, ,]
[else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, name, ,, lineno, ,, charno, ), ;, }, }, }, if, (]
[else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, name, ,, lineno, ,, charno, ), ;, }, }, }, if, (]
[parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, name, ,, lineno, ,, charno, ), ;, }, }, }, if, (, name, ==]
[(, "msg.jsdoc.incompat.type", ,, name, ,, lineno, ,, charno, ), ;, }, }, }, if, (, name, ==, null, ), {]
[,, name, ,, lineno, ,, charno, ), ;, }, }, }, if, (, name, ==, null, ), {, token, =]
[,, lineno, ,, charno, ), ;, }, }, }, if, (, name, ==, null, ), {, token, =, eatTokensUntilEOL, (]
[}, }, if, (, name, ==, null, ), {, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, }]
[}, }, if, (, name, ==, null, ), {, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, }]
[name, ==, null, ), {, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, }, jsdocBuilder, ., markName, (]
[null, ), {, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, }, jsdocBuilder, ., markName, (, name, ,]
[{, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, }, jsdocBuilder, ., markName, (, name, ,, sourceFile, ,]
[=, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, }, jsdocBuilder, ., markName, (, name, ,, sourceFile, ,, lineno, ,]
[;, continue, retry, ;, }, jsdocBuilder, ., markName, (, name, ,, sourceFile, ,, lineno, ,, charno, ), ;, if, (]
[;, continue, retry, ;, }, jsdocBuilder, ., markName, (, name, ,, sourceFile, ,, lineno, ,, charno, ), ;, if, (]
[,, sourceFile, ,, lineno, ,, charno, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, paramDescriptionInfo, =]
[,, lineno, ,, charno, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (]
[if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, paramDescription, =]
[if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, paramDescription, =]
[), ), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, paramDescription, =, paramDescriptionInfo, ., string, ;, if, (]
[), ), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, paramDescription, =, paramDescriptionInfo, ., string, ;, if, (]
[), ), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, paramDescription, =, paramDescriptionInfo, ., string, ;, if, (]
[extractMultilineTextualBlock, (, token, ), ;, String, paramDescription, =, paramDescriptionInfo, ., string, ;, if, (, paramDescription, ., length, (, ), >]
[), ;, String, paramDescription, =, paramDescriptionInfo, ., string, ;, if, (, paramDescription, ., length, (, ), >, 0, ), {]
[), ;, String, paramDescription, =, paramDescriptionInfo, ., string, ;, if, (, paramDescription, ., length, (, ), >, 0, ), {]
[=, paramDescriptionInfo, ., string, ;, if, (, paramDescription, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordParameterDescription, (]
[., string, ;, if, (, paramDescription, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordParameterDescription, (, name, ,]
[(, paramDescription, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordParameterDescription, (, name, ,, paramDescription, ), ;, }]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., recordParameterDescription, (, name, ,, paramDescription, ), ;, }, token, =]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., recordParameterDescription, (, name, ,, paramDescription, ), ;, }, token, =]
[{, jsdocBuilder, ., recordParameterDescription, (, name, ,, paramDescription, ), ;, }, token, =, paramDescriptionInfo, ., token, ;, }, else, {]
[., recordParameterDescription, (, name, ,, paramDescription, ), ;, }, token, =, paramDescriptionInfo, ., token, ;, }, else, {, token, =]
[(, name, ,, paramDescription, ), ;, }, token, =, paramDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (]
[=, paramDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case]
[;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PRESERVE_TRY, :, if, (]
[}, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PRESERVE_TRY, :, if, (, !]
[}, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PRESERVE_TRY, :, if, (, !]
[token, ), ;, }, continue, retry, ;, case, PRESERVE_TRY, :, if, (, !, jsdocBuilder, ., recordPreserveTry, (, ), ), {]
[token, ), ;, }, continue, retry, ;, case, PRESERVE_TRY, :, if, (, !, jsdocBuilder, ., recordPreserveTry, (, ), ), {]
[continue, retry, ;, case, PRESERVE_TRY, :, if, (, !, jsdocBuilder, ., recordPreserveTry, (, ), ), {, parser, ., addParserWarning, (]
[;, case, PRESERVE_TRY, :, if, (, !, jsdocBuilder, ., recordPreserveTry, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.preservertry", ,]
[;, case, PRESERVE_TRY, :, if, (, !, jsdocBuilder, ., recordPreserveTry, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.preservertry", ,]
[!, jsdocBuilder, ., recordPreserveTry, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.preservertry", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordPreserveTry, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.preservertry", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.preservertry", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.preservertry", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SHADOW, :, if, (]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SHADOW, :, if, (, !]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SHADOW, :, if, (, !]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SHADOW, :, if, (, !, jsdocBuilder, ., recordNoShadow, (, ), ), {]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SHADOW, :, if, (, !, jsdocBuilder, ., recordNoShadow, (, ), ), {]
[continue, retry, ;, case, NO_SHADOW, :, if, (, !, jsdocBuilder, ., recordNoShadow, (, ), ), {, parser, ., addParserWarning, (]
[;, case, NO_SHADOW, :, if, (, !, jsdocBuilder, ., recordNoShadow, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noshadow", ,]
[;, case, NO_SHADOW, :, if, (, !, jsdocBuilder, ., recordNoShadow, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noshadow", ,]
[!, jsdocBuilder, ., recordNoShadow, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noshadow", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordNoShadow, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noshadow", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.noshadow", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.noshadow", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SIDE_EFFECTS, :, if, (]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SIDE_EFFECTS, :, if, (, !]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SIDE_EFFECTS, :, if, (, !]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SIDE_EFFECTS, :, if, (, !, jsdocBuilder, ., recordNoSideEffects, (, ), ), {]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SIDE_EFFECTS, :, if, (, !, jsdocBuilder, ., recordNoSideEffects, (, ), ), {]
[continue, retry, ;, case, NO_SIDE_EFFECTS, :, if, (, !, jsdocBuilder, ., recordNoSideEffects, (, ), ), {, parser, ., addParserWarning, (]
[;, case, NO_SIDE_EFFECTS, :, if, (, !, jsdocBuilder, ., recordNoSideEffects, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nosideeffects", ,]
[;, case, NO_SIDE_EFFECTS, :, if, (, !, jsdocBuilder, ., recordNoSideEffects, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nosideeffects", ,]
[!, jsdocBuilder, ., recordNoSideEffects, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nosideeffects", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordNoSideEffects, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nosideeffects", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.nosideeffects", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.nosideeffects", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MODIFIES, :]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MODIFIES, :, token, =]
[), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MODIFIES, :, token, =, parseModifiesTag, (]
[;, continue, retry, ;, case, MODIFIES, :, token, =, parseModifiesTag, (, next, (, ), ), ;, continue, retry, ;, case]
[case, MODIFIES, :, token, =, parseModifiesTag, (, next, (, ), ), ;, continue, retry, ;, case, IMPLICIT_CAST, :, if, (]
[MODIFIES, :, token, =, parseModifiesTag, (, next, (, ), ), ;, continue, retry, ;, case, IMPLICIT_CAST, :, if, (, !]
[MODIFIES, :, token, =, parseModifiesTag, (, next, (, ), ), ;, continue, retry, ;, case, IMPLICIT_CAST, :, if, (, !]
[(, ), ), ;, continue, retry, ;, case, IMPLICIT_CAST, :, if, (, !, jsdocBuilder, ., recordImplicitCast, (, ), ), {]
[(, ), ), ;, continue, retry, ;, case, IMPLICIT_CAST, :, if, (, !, jsdocBuilder, ., recordImplicitCast, (, ), ), {]
[continue, retry, ;, case, IMPLICIT_CAST, :, if, (, !, jsdocBuilder, ., recordImplicitCast, (, ), ), {, parser, ., addTypeWarning, (]
[;, case, IMPLICIT_CAST, :, if, (, !, jsdocBuilder, ., recordImplicitCast, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implicitcast", ,]
[;, case, IMPLICIT_CAST, :, if, (, !, jsdocBuilder, ., recordImplicitCast, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implicitcast", ,]
[!, jsdocBuilder, ., recordImplicitCast, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implicitcast", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordImplicitCast, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implicitcast", ,, stream, ., getLineno, (, ), ,]
[parser, ., addTypeWarning, (, "msg.jsdoc.implicitcast", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addTypeWarning, (, "msg.jsdoc.implicitcast", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SEE, :, if, (]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SEE, :, if, (]
[), ;, continue, retry, ;, case, SEE, :, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, referenceInfo, =]
[:, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, referenceInfo, =, extractSingleLineBlock, (, ), ;, String, reference, =]
[:, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, referenceInfo, =, extractSingleLineBlock, (, ), ;, String, reference, =]
[(, ), ), {, ExtractionInfo, referenceInfo, =, extractSingleLineBlock, (, ), ;, String, reference, =, referenceInfo, ., string, ;, if, (]
[(, ), ), {, ExtractionInfo, referenceInfo, =, extractSingleLineBlock, (, ), ;, String, reference, =, referenceInfo, ., string, ;, if, (]
[(, ), ), {, ExtractionInfo, referenceInfo, =, extractSingleLineBlock, (, ), ;, String, reference, =, referenceInfo, ., string, ;, if, (]
[=, extractSingleLineBlock, (, ), ;, String, reference, =, referenceInfo, ., string, ;, if, (, reference, ., length, (, ), ==]
[), ;, String, reference, =, referenceInfo, ., string, ;, if, (, reference, ., length, (, ), ==, 0, ), {]
[), ;, String, reference, =, referenceInfo, ., string, ;, if, (, reference, ., length, (, ), ==, 0, ), {]
[=, referenceInfo, ., string, ;, if, (, reference, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (]
[., string, ;, if, (, reference, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.seemissing", ,]
[., string, ;, if, (, reference, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.seemissing", ,]
[., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.seemissing", ,, stream, ., getLineno, (, ), ,]
[., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.seemissing", ,, stream, ., getLineno, (, ), ,]
[addParserWarning, (, "msg.jsdoc.seemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
[addParserWarning, (, "msg.jsdoc.seemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
[stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addReference, (]
[), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addReference, (, reference, ), ;, }]
[stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addReference, (, reference, ), ;, }, token, =]
[stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addReference, (, reference, ), ;, }, token, =]
[}, else, {, jsdocBuilder, ., addReference, (, reference, ), ;, }, token, =, referenceInfo, ., token, ;, }, else, {]
[{, jsdocBuilder, ., addReference, (, reference, ), ;, }, token, =, referenceInfo, ., token, ;, }, else, {, token, =]
[., addReference, (, reference, ), ;, }, token, =, referenceInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (]
[=, referenceInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case]
[;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, STABLEIDGENERATOR, :, if, (]
[}, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, STABLEIDGENERATOR, :, if, (, !]
[}, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, STABLEIDGENERATOR, :, if, (, !]
[token, ), ;, }, continue, retry, ;, case, STABLEIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordStableIdGenerator, (, ), ), {]
[token, ), ;, }, continue, retry, ;, case, STABLEIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordStableIdGenerator, (, ), ), {]
[continue, retry, ;, case, STABLEIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordStableIdGenerator, (, ), ), {, parser, ., addParserWarning, (]
[;, case, STABLEIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordStableIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.stableidgen", ,]
[;, case, STABLEIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordStableIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.stableidgen", ,]
[!, jsdocBuilder, ., recordStableIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.stableidgen", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordStableIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.stableidgen", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.stableidgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.stableidgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SUPPRESS, :]
[getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SUPPRESS, :, token, =]
[), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SUPPRESS, :, token, =, parseSuppressTag, (]
[;, continue, retry, ;, case, SUPPRESS, :, token, =, parseSuppressTag, (, next, (, ), ), ;, continue, retry, ;, case]
[SUPPRESS, :, token, =, parseSuppressTag, (, next, (, ), ), ;, continue, retry, ;, case, TEMPLATE, :, ExtractionInfo, templateInfo, =]
[;, continue, retry, ;, case, TEMPLATE, :, ExtractionInfo, templateInfo, =, extractSingleLineBlock, (, ), ;, List, <, String, >, names, =]
[;, continue, retry, ;, case, TEMPLATE, :, ExtractionInfo, templateInfo, =, extractSingleLineBlock, (, ), ;, List, <, String, >, names, =]
[case, TEMPLATE, :, ExtractionInfo, templateInfo, =, extractSingleLineBlock, (, ), ;, List, <, String, >, names, =, Lists, ., newArrayList, (]
[case, TEMPLATE, :, ExtractionInfo, templateInfo, =, extractSingleLineBlock, (, ), ;, List, <, String, >, names, =, Lists, ., newArrayList, (]
[case, TEMPLATE, :, ExtractionInfo, templateInfo, =, extractSingleLineBlock, (, ), ;, List, <, String, >, names, =, Lists, ., newArrayList, (]
[case, TEMPLATE, :, ExtractionInfo, templateInfo, =, extractSingleLineBlock, (, ), ;, List, <, String, >, names, =, Lists, ., newArrayList, (]
[templateInfo, =, extractSingleLineBlock, (, ), ;, List, <, String, >, names, =, Lists, ., newArrayList, (, Splitter, ., on, (]
[>, names, =, Lists, ., newArrayList, (, Splitter, ., on, (, ',', ), ., trimResults, (, ), ., split, (]
[>, names, =, Lists, ., newArrayList, (, Splitter, ., on, (, ',', ), ., trimResults, (, ), ., split, (]
[., on, (, ',', ), ., trimResults, (, ), ., split, (, templateInfo, ., string, ), ), ;, if, (]
[., on, (, ',', ), ., trimResults, (, ), ., split, (, templateInfo, ., string, ), ), ;, if, (]
[., on, (, ',', ), ., trimResults, (, ), ., split, (, templateInfo, ., string, ), ), ;, if, (]
[., on, (, ',', ), ., trimResults, (, ), ., split, (, templateInfo, ., string, ), ), ;, if, (]
[trimResults, (, ), ., split, (, templateInfo, ., string, ), ), ;, if, (, names, ., size, (, ), ==]
[), ., split, (, templateInfo, ., string, ), ), ;, if, (, names, ., size, (, ), ==, 0, ||]
[), ., split, (, templateInfo, ., string, ), ), ;, if, (, names, ., size, (, ), ==, 0, ||]
[), ., split, (, templateInfo, ., string, ), ), ;, if, (, names, ., size, (, ), ==, 0, ||]
[), ., split, (, templateInfo, ., string, ), ), ;, if, (, names, ., size, (, ), ==, 0, ||]
[templateInfo, ., string, ), ), ;, if, (, names, ., size, (, ), ==, 0, ||, names, ., get, (]
[(, names, ., size, (, ), ==, 0, ||, names, ., get, (, 0, ), ., length, (, ), ==]
[size, (, ), ==, 0, ||, names, ., get, (, 0, ), ., length, (, ), ==, 0, ), {]
[size, (, ), ==, 0, ||, names, ., get, (, 0, ), ., length, (, ), ==, 0, ), {]
[0, ||, names, ., get, (, 0, ), ., length, (, ), ==, 0, ), {, parser, ., addTypeWarning, (]
[names, ., get, (, 0, ), ., length, (, ), ==, 0, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing", ,]
[names, ., get, (, 0, ), ., length, (, ), ==, 0, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing", ,]
[., length, (, ), ==, 0, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, ), ,]
[., length, (, ), ==, 0, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, ), ,]
[(, "msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, if, (]
["msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, if, (, !]
["msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, if, (, !]
[getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, if, (, !, jsdocBuilder, ., recordTemplateTypeNames, (]
[stream, ., getCharno, (, ), ), ;, }, else, if, (, !, jsdocBuilder, ., recordTemplateTypeNames, (, names, ), ), {]
[stream, ., getCharno, (, ), ), ;, }, else, if, (, !, jsdocBuilder, ., recordTemplateTypeNames, (, names, ), ), {]
[), ), ;, }, else, if, (, !, jsdocBuilder, ., recordTemplateTypeNames, (, names, ), ), {, parser, ., addTypeWarning, (]
[;, }, else, if, (, !, jsdocBuilder, ., recordTemplateTypeNames, (, names, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,]
[;, }, else, if, (, !, jsdocBuilder, ., recordTemplateTypeNames, (, names, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,]
[jsdocBuilder, ., recordTemplateTypeNames, (, names, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,, stream, ., getLineno, (, ), ,]
[jsdocBuilder, ., recordTemplateTypeNames, (, names, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,, stream, ., getLineno, (, ), ,]
[parser, ., addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, templateInfo, ., token, ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, token, =, templateInfo, ., token, ;, continue, retry, ;, case, IDGENERATOR, :, if, (]
[(, ), ), ;, }, token, =, templateInfo, ., token, ;, continue, retry, ;, case, IDGENERATOR, :, if, (, !]
[(, ), ), ;, }, token, =, templateInfo, ., token, ;, continue, retry, ;, case, IDGENERATOR, :, if, (, !]
[templateInfo, ., token, ;, continue, retry, ;, case, IDGENERATOR, :, if, (, !, jsdocBuilder, ., recordIdGenerator, (, ), ), {]
[templateInfo, ., token, ;, continue, retry, ;, case, IDGENERATOR, :, if, (, !, jsdocBuilder, ., recordIdGenerator, (, ), ), {]
[continue, retry, ;, case, IDGENERATOR, :, if, (, !, jsdocBuilder, ., recordIdGenerator, (, ), ), {, parser, ., addParserWarning, (]
[;, case, IDGENERATOR, :, if, (, !, jsdocBuilder, ., recordIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.idgen", ,]
[;, case, IDGENERATOR, :, if, (, !, jsdocBuilder, ., recordIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.idgen", ,]
[!, jsdocBuilder, ., recordIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.idgen", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.idgen", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.idgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.idgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[(, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, VERSION, :, ExtractionInfo, versionInfo, =]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, VERSION, :, ExtractionInfo, versionInfo, =, extractSingleLineBlock, (, ), ;, String, version, =]
[eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, VERSION, :, ExtractionInfo, versionInfo, =, extractSingleLineBlock, (, ), ;, String, version, =]
[;, case, VERSION, :, ExtractionInfo, versionInfo, =, extractSingleLineBlock, (, ), ;, String, version, =, versionInfo, ., string, ;, if, (]
[;, case, VERSION, :, ExtractionInfo, versionInfo, =, extractSingleLineBlock, (, ), ;, String, version, =, versionInfo, ., string, ;, if, (]
[;, case, VERSION, :, ExtractionInfo, versionInfo, =, extractSingleLineBlock, (, ), ;, String, version, =, versionInfo, ., string, ;, if, (]
[=, extractSingleLineBlock, (, ), ;, String, version, =, versionInfo, ., string, ;, if, (, version, ., length, (, ), ==]
[), ;, String, version, =, versionInfo, ., string, ;, if, (, version, ., length, (, ), ==, 0, ), {]
[), ;, String, version, =, versionInfo, ., string, ;, if, (, version, ., length, (, ), ==, 0, ), {]
[=, versionInfo, ., string, ;, if, (, version, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (]
[., string, ;, if, (, version, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.versionmissing", ,]
[., string, ;, if, (, version, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.versionmissing", ,]
[., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.versionmissing", ,, stream, ., getLineno, (, ), ,]
[., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.versionmissing", ,, stream, ., getLineno, (, ), ,]
["msg.jsdoc.versionmissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, if, (]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, if, (, !]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, if, (, !]
[(, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, if, (, !, jsdocBuilder, ., recordVersion, (]
[., getCharno, (, ), ), ;, }, else, {, if, (, !, jsdocBuilder, ., recordVersion, (, version, ), ), {]
[., getCharno, (, ), ), ;, }, else, {, if, (, !, jsdocBuilder, ., recordVersion, (, version, ), ), {]
[), ;, }, else, {, if, (, !, jsdocBuilder, ., recordVersion, (, version, ), ), {, parser, ., addParserWarning, (]
[}, else, {, if, (, !, jsdocBuilder, ., recordVersion, (, version, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extraversion", ,]
[}, else, {, if, (, !, jsdocBuilder, ., recordVersion, (, version, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extraversion", ,]
[jsdocBuilder, ., recordVersion, (, version, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extraversion", ,, stream, ., getLineno, (, ), ,]
[jsdocBuilder, ., recordVersion, (, version, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extraversion", ,, stream, ., getLineno, (, ), ,]
[., addParserWarning, (, "msg.jsdoc.extraversion", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }]
[(, "msg.jsdoc.extraversion", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, token, =]
[(, "msg.jsdoc.extraversion", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, token, =]
[,, stream, ., getCharno, (, ), ), ;, }, }, token, =, versionInfo, ., token, ;, continue, retry, ;, case]
[getCharno, (, ), ), ;, }, }, token, =, versionInfo, ., token, ;, continue, retry, ;, case, CONSTANT, :, case]
[), ;, }, }, token, =, versionInfo, ., token, ;, continue, retry, ;, case, CONSTANT, :, case, DEFINE, :, case]
[}, token, =, versionInfo, ., token, ;, continue, retry, ;, case, CONSTANT, :, case, DEFINE, :, case, RETURN, :, case]
[versionInfo, ., token, ;, continue, retry, ;, case, CONSTANT, :, case, DEFINE, :, case, RETURN, :, case, PRIVATE, :, case]
[;, continue, retry, ;, case, CONSTANT, :, case, DEFINE, :, case, RETURN, :, case, PRIVATE, :, case, PROTECTED, :, case]
[;, case, CONSTANT, :, case, DEFINE, :, case, RETURN, :, case, PRIVATE, :, case, PROTECTED, :, case, PUBLIC, :, case]
[:, case, DEFINE, :, case, RETURN, :, case, PRIVATE, :, case, PROTECTED, :, case, PUBLIC, :, case, THIS, :, case]
[:, case, RETURN, :, case, PRIVATE, :, case, PROTECTED, :, case, PUBLIC, :, case, THIS, :, case, TYPE, :, case]
[RETURN, :, case, PRIVATE, :, case, PROTECTED, :, case, PUBLIC, :, case, THIS, :, case, TYPE, :, case, TYPEDEF, :]
[case, PRIVATE, :, case, PROTECTED, :, case, PUBLIC, :, case, THIS, :, case, TYPE, :, case, TYPEDEF, :, lineno, =]
[case, PRIVATE, :, case, PROTECTED, :, case, PUBLIC, :, case, THIS, :, case, TYPE, :, case, TYPEDEF, :, lineno, =]
[case, PUBLIC, :, case, THIS, :, case, TYPE, :, case, TYPEDEF, :, lineno, =, stream, ., getLineno, (, ), ;]
[:, case, THIS, :, case, TYPE, :, case, TYPEDEF, :, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[:, case, THIS, :, case, TYPE, :, case, TYPEDEF, :, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[:, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =]
[getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =, null, ;, boolean, hasType, =]
[., getCharno, (, ), ;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =]
[getCharno, (, ), ;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (]
[getCharno, (, ), ;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (]
[getCharno, (, ), ;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (]
[getCharno, (, ), ;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (]
[getCharno, (, ), ;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (]
[), ;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==]
[), ;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==]
[=, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==, Annotation, ., PRIVATE, ||]
[=, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==, Annotation, ., PRIVATE, ||]
[;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==]
[;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==]
[lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==, Annotation, ., PROTECTED, ||]
[lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==, Annotation, ., PROTECTED, ||]
[), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==, Annotation, ., PROTECTED, ||, annotation, ==]
[), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==, Annotation, ., PROTECTED, ||, annotation, ==]
[=, (, annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==, Annotation, ., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||]
[=, (, annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==, Annotation, ., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||]
[annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==, Annotation, ., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==]
[annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==, Annotation, ., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==]
[Annotation, ., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =]
[., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (]
[., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (]
[||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||]
[||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||]
[==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==]
[==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==]
[annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;]
[Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;, type, =]
[;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;, type, =, null, ;, if, (]
[;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;, type, =, null, ;, if, (]
[canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;, type, =, null, ;, if, (, hasType, ||]
[=, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;, type, =, null, ;, if, (, hasType, ||, !]
[||, annotation, ==, Annotation, ., RETURN, ), ;, type, =, null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {]
[., RETURN, ), ;, type, =, null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;]
[), ;, type, =, null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;, token, =]
[null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, typeNode, =]
[hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (]
[{, skipEOLs, (, ), ;, token, =, next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if, (]
[{, skipEOLs, (, ), ;, token, =, next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if, (]
[(, ), ;, token, =, next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if, (, annotation, ==]
[(, ), ;, token, =, next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if, (, annotation, ==]
[next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if, (, annotation, ==, Annotation, ., THIS, ), {]
[), ;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if, (, annotation, ==, Annotation, ., THIS, ), {, typeNode, =]
[typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if, (, annotation, ==, Annotation, ., THIS, ), {, typeNode, =, wrapNode, (]
[typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if, (, annotation, ==, Annotation, ., THIS, ), {, typeNode, =, wrapNode, (]
[token, ), ;, if, (, annotation, ==, Annotation, ., THIS, ), {, typeNode, =, wrapNode, (, Token, ., BANG, ,]
[(, annotation, ==, Annotation, ., THIS, ), {, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, }]
[==, Annotation, ., THIS, ), {, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, }, type, =]
[., THIS, ), {, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, }, type, =, createJSTypeExpression, (]
[(, Token, ., BANG, ,, typeNode, ), ;, }, type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =]
[(, Token, ., BANG, ,, typeNode, ), ;, }, type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =]
[(, Token, ., BANG, ,, typeNode, ), ;, }, type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =]
[., BANG, ,, typeNode, ), ;, }, type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =, type, ==]
[,, typeNode, ), ;, }, type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =, type, ==, null, &&]
[typeNode, ), ;, }, type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =, type, ==, null, &&, !]
[type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (]
[=, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !]
[;, }, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (]
[;, }, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (]
[}, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (]
[}, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (]
[}, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (]
[hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (, type, !=]
[type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (, type, !=, null, &&]
[&&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||]
[&&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||]
[canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==]
[canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==]
[{, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation, ., TYPE, ), {, if, (]
[if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation, ., TYPE, ), {, if, (, !]
[if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation, ., TYPE, ), {, if, (, !]
[!=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation, ., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (]
[), ||, annotation, ==, Annotation, ., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {]
[), ||, annotation, ==, Annotation, ., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {]
[Annotation, ., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {, parser, ., addTypeWarning, (]
[TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[{, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,]
[(, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, }, switch, (]
[{, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, }, switch, (, annotation, ), {, case]
[(, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, }, switch, (, annotation, ), {, case, CONSTANT, :, if, (]
["msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, }, switch, (, annotation, ), {, case, CONSTANT, :, if, (, !]
["msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, }, switch, (, annotation, ), {, case, CONSTANT, :, if, (, !]
[}, }, switch, (, annotation, ), {, case, CONSTANT, :, if, (, !, jsdocBuilder, ., recordConstancy, (, ), ), {]
[}, }, switch, (, annotation, ), {, case, CONSTANT, :, if, (, !, jsdocBuilder, ., recordConstancy, (, ), ), {]
[annotation, ), {, case, CONSTANT, :, if, (, !, jsdocBuilder, ., recordConstancy, (, ), ), {, parser, ., addParserWarning, (]
[{, case, CONSTANT, :, if, (, !, jsdocBuilder, ., recordConstancy, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.const", ,]
[{, case, CONSTANT, :, if, (, !, jsdocBuilder, ., recordConstancy, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.const", ,]
[!, jsdocBuilder, ., recordConstancy, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.const", ,, stream, ., getLineno, (, ), ,]
[!, jsdocBuilder, ., recordConstancy, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.const", ,, stream, ., getLineno, (, ), ,]
[(, "msg.jsdoc.const", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, break, ;, case]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, break, ;, case, DEFINE, :, if, (]
[getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, break, ;, case, DEFINE, :, if, (, !]
[getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, break, ;, case, DEFINE, :, if, (, !]
[stream, ., getCharno, (, ), ), ;, }, break, ;, case, DEFINE, :, if, (, !, jsdocBuilder, ., recordDefineType, (]
[), ), ;, }, break, ;, case, DEFINE, :, if, (, !, jsdocBuilder, ., recordDefineType, (, type, ), ), {]
[), ), ;, }, break, ;, case, DEFINE, :, if, (, !, jsdocBuilder, ., recordDefineType, (, type, ), ), {]
[break, ;, case, DEFINE, :, if, (, !, jsdocBuilder, ., recordDefineType, (, type, ), ), {, parser, ., addParserWarning, (]
[case, DEFINE, :, if, (, !, jsdocBuilder, ., recordDefineType, (, type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.define", ,]
[:, if, (, !, jsdocBuilder, ., recordDefineType, (, type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.define", ,, lineno, ,]
[(, type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.define", ,, lineno, ,, charno, ), ;, }, break, ;, case]
[{, parser, ., addParserWarning, (, "msg.jsdoc.define", ,, lineno, ,, charno, ), ;, }, break, ;, case, PRIVATE, :, if, (]
[parser, ., addParserWarning, (, "msg.jsdoc.define", ,, lineno, ,, charno, ), ;, }, break, ;, case, PRIVATE, :, if, (, !]
[parser, ., addParserWarning, (, "msg.jsdoc.define", ,, lineno, ,, charno, ), ;, }, break, ;, case, PRIVATE, :, if, (, !]
["msg.jsdoc.define", ,, lineno, ,, charno, ), ;, }, break, ;, case, PRIVATE, :, if, (, !, jsdocBuilder, ., recordVisibility, (]
["msg.jsdoc.define", ,, lineno, ,, charno, ), ;, }, break, ;, case, PRIVATE, :, if, (, !, jsdocBuilder, ., recordVisibility, (]
[;, }, break, ;, case, PRIVATE, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PRIVATE, ), ), {]
[;, }, break, ;, case, PRIVATE, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PRIVATE, ), ), {]
[case, PRIVATE, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PRIVATE, ), ), {, parser, ., addParserWarning, (]
[:, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PRIVATE, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,]
[(, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PRIVATE, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,, lineno, ,]
[., PRIVATE, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;, }, break, ;, case]
[{, parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;, }, break, ;, case, PROTECTED, :, if, (]
[parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;, }, break, ;, case, PROTECTED, :, if, (, !]
[parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;, }, break, ;, case, PROTECTED, :, if, (, !]
["msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;, }, break, ;, case, PROTECTED, :, if, (, !, jsdocBuilder, ., recordVisibility, (]
["msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;, }, break, ;, case, PROTECTED, :, if, (, !, jsdocBuilder, ., recordVisibility, (]
[;, }, break, ;, case, PROTECTED, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PROTECTED, ), ), {]
[;, }, break, ;, case, PROTECTED, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PROTECTED, ), ), {]
[case, PROTECTED, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PROTECTED, ), ), {, parser, ., addParserWarning, (]
[:, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PROTECTED, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,]
[(, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PROTECTED, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,, lineno, ,]
[., PROTECTED, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;, }, break, ;, case]
[{, parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;, }, break, ;, case, PUBLIC, :, if, (]
[parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;, }, break, ;, case, PUBLIC, :, if, (, !]
[parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;, }, break, ;, case, PUBLIC, :, if, (, !]
["msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;, }, break, ;, case, PUBLIC, :, if, (, !, jsdocBuilder, ., recordVisibility, (]
["msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;, }, break, ;, case, PUBLIC, :, if, (, !, jsdocBuilder, ., recordVisibility, (]
[;, }, break, ;, case, PUBLIC, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PUBLIC, ), ), {]
[;, }, break, ;, case, PUBLIC, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PUBLIC, ), ), {]
[case, PUBLIC, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PUBLIC, ), ), {, parser, ., addParserWarning, (]
[:, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PUBLIC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.public", ,]
[(, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PUBLIC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.public", ,, lineno, ,]
[., PUBLIC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.public", ,, lineno, ,, charno, ), ;, }, break, ;, case]
[{, parser, ., addParserWarning, (, "msg.jsdoc.visibility.public", ,, lineno, ,, charno, ), ;, }, break, ;, case, RETURN, :, if, (]
[{, parser, ., addParserWarning, (, "msg.jsdoc.visibility.public", ,, lineno, ,, charno, ), ;, }, break, ;, case, RETURN, :, if, (]
[., addParserWarning, (, "msg.jsdoc.visibility.public", ,, lineno, ,, charno, ), ;, }, break, ;, case, RETURN, :, if, (, type, ==]
["msg.jsdoc.visibility.public", ,, lineno, ,, charno, ), ;, }, break, ;, case, RETURN, :, if, (, type, ==, null, ), {]
[lineno, ,, charno, ), ;, }, break, ;, case, RETURN, :, if, (, type, ==, null, ), {, type, =]
[charno, ), ;, }, break, ;, case, RETURN, :, if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (]
[;, }, break, ;, case, RETURN, :, if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (, newNode, (]
[;, }, break, ;, case, RETURN, :, if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (, newNode, (]
[type, ==, null, ), {, type, =, createJSTypeExpression, (, newNode, (, Token, ., QMARK, ), ), ;, }, if, (]
[==, null, ), {, type, =, createJSTypeExpression, (, newNode, (, Token, ., QMARK, ), ), ;, }, if, (, !]
[==, null, ), {, type, =, createJSTypeExpression, (, newNode, (, Token, ., QMARK, ), ), ;, }, if, (, !]
[type, =, createJSTypeExpression, (, newNode, (, Token, ., QMARK, ), ), ;, }, if, (, !, jsdocBuilder, ., recordReturnType, (]
[newNode, (, Token, ., QMARK, ), ), ;, }, if, (, !, jsdocBuilder, ., recordReturnType, (, type, ), ), {]
[newNode, (, Token, ., QMARK, ), ), ;, }, if, (, !, jsdocBuilder, ., recordReturnType, (, type, ), ), {]
[QMARK, ), ), ;, }, if, (, !, jsdocBuilder, ., recordReturnType, (, type, ), ), {, parser, ., addTypeWarning, (]
[), ;, }, if, (, !, jsdocBuilder, ., recordReturnType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[}, if, (, !, jsdocBuilder, ., recordReturnType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,]
[type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, break, ;, }, if, (]
[type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, break, ;, }, if, (]
[lineno, ,, charno, ), ;, break, ;, }, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, returnDescriptionInfo, =]
[charno, ), ;, break, ;, }, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, returnDescriptionInfo, =, extractMultilineTextualBlock, (]
[if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, returnDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, returnDescription, =]
[if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, returnDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, returnDescription, =]
[), ), {, ExtractionInfo, returnDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, returnDescription, =, returnDescriptionInfo, ., string, ;, if, (]
[), ), {, ExtractionInfo, returnDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, returnDescription, =, returnDescriptionInfo, ., string, ;, if, (]
[), ), {, ExtractionInfo, returnDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, returnDescription, =, returnDescriptionInfo, ., string, ;, if, (]
[extractMultilineTextualBlock, (, token, ), ;, String, returnDescription, =, returnDescriptionInfo, ., string, ;, if, (, returnDescription, ., length, (, ), >]
[), ;, String, returnDescription, =, returnDescriptionInfo, ., string, ;, if, (, returnDescription, ., length, (, ), >, 0, ), {]
[), ;, String, returnDescription, =, returnDescriptionInfo, ., string, ;, if, (, returnDescription, ., length, (, ), >, 0, ), {]
[=, returnDescriptionInfo, ., string, ;, if, (, returnDescription, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordReturnDescription, (]
[;, if, (, returnDescription, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordReturnDescription, (, returnDescription, ), ;, }]
[(, returnDescription, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordReturnDescription, (, returnDescription, ), ;, }, token, =]
[(, returnDescription, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordReturnDescription, (, returnDescription, ), ;, }, token, =]
[0, ), {, jsdocBuilder, ., recordReturnDescription, (, returnDescription, ), ;, }, token, =, returnDescriptionInfo, ., token, ;, }, else, {]
[{, jsdocBuilder, ., recordReturnDescription, (, returnDescription, ), ;, }, token, =, returnDescriptionInfo, ., token, ;, }, else, {, token, =]
[., recordReturnDescription, (, returnDescription, ), ;, }, token, =, returnDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (]
[=, returnDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case]
[;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, THIS, :, if, (]
[}, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, THIS, :, if, (, !]
[}, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, THIS, :, if, (, !]
[=, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, THIS, :, if, (, !, jsdocBuilder, ., recordThisType, (]
[), ;, }, continue, retry, ;, case, THIS, :, if, (, !, jsdocBuilder, ., recordThisType, (, type, ), ), {]
[), ;, }, continue, retry, ;, case, THIS, :, if, (, !, jsdocBuilder, ., recordThisType, (, type, ), ), {]
[retry, ;, case, THIS, :, if, (, !, jsdocBuilder, ., recordThisType, (, type, ), ), {, parser, ., addTypeWarning, (]
[case, THIS, :, if, (, !, jsdocBuilder, ., recordThisType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[:, if, (, !, jsdocBuilder, ., recordThisType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,]
[(, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, case]
[{, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, case, TYPEDEF, :, if, (]
[parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, case, TYPEDEF, :, if, (, !]
[parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, case, TYPEDEF, :, if, (, !]
["msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, case, TYPEDEF, :, if, (, !, jsdocBuilder, ., recordTypedef, (]
[charno, ), ;, }, break, ;, case, TYPEDEF, :, if, (, !, jsdocBuilder, ., recordTypedef, (, type, ), ), {]
[charno, ), ;, }, break, ;, case, TYPEDEF, :, if, (, !, jsdocBuilder, ., recordTypedef, (, type, ), ), {]
[break, ;, case, TYPEDEF, :, if, (, !, jsdocBuilder, ., recordTypedef, (, type, ), ), {, parser, ., addTypeWarning, (]
[case, TYPEDEF, :, if, (, !, jsdocBuilder, ., recordTypedef, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[:, if, (, !, jsdocBuilder, ., recordTypedef, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,]
[type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, }, }]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, }, }, token, =]
[}, break, ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, }, break, ;, case]
[}, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, }, break, ;, case, EOC, :, if, (]
[), ;, continue, retry, ;, }, }, }, break, ;, case, EOC, :, if, (, hasParsedFileOverviewDocInfo, (, ), ), {]
[continue, retry, ;, }, }, }, break, ;, case, EOC, :, if, (, hasParsedFileOverviewDocInfo, (, ), ), {, fileOverviewJSDocInfo, =]
[}, break, ;, case, EOC, :, if, (, hasParsedFileOverviewDocInfo, (, ), ), {, fileOverviewJSDocInfo, =, retrieveAndResetParsedJSDocInfo, (, ), ;, }]
[;, case, EOC, :, if, (, hasParsedFileOverviewDocInfo, (, ), ), {, fileOverviewJSDocInfo, =, retrieveAndResetParsedJSDocInfo, (, ), ;, }, checkExtendedTypes, (]
[if, (, hasParsedFileOverviewDocInfo, (, ), ), {, fileOverviewJSDocInfo, =, retrieveAndResetParsedJSDocInfo, (, ), ;, }, checkExtendedTypes, (, extendedTypes, ), ;, return]
[(, ), ), {, fileOverviewJSDocInfo, =, retrieveAndResetParsedJSDocInfo, (, ), ;, }, checkExtendedTypes, (, extendedTypes, ), ;, return, true, ;, case]
[), {, fileOverviewJSDocInfo, =, retrieveAndResetParsedJSDocInfo, (, ), ;, }, checkExtendedTypes, (, extendedTypes, ), ;, return, true, ;, case, EOF, :]
[), {, fileOverviewJSDocInfo, =, retrieveAndResetParsedJSDocInfo, (, ), ;, }, checkExtendedTypes, (, extendedTypes, ), ;, return, true, ;, case, EOF, :]
[retrieveAndResetParsedJSDocInfo, (, ), ;, }, checkExtendedTypes, (, extendedTypes, ), ;, return, true, ;, case, EOF, :, jsdocBuilder, ., build, (]
[;, }, checkExtendedTypes, (, extendedTypes, ), ;, return, true, ;, case, EOF, :, jsdocBuilder, ., build, (, null, ), ;]
[;, }, checkExtendedTypes, (, extendedTypes, ), ;, return, true, ;, case, EOF, :, jsdocBuilder, ., build, (, null, ), ;]
[extendedTypes, ), ;, return, true, ;, case, EOF, :, jsdocBuilder, ., build, (, null, ), ;, parser, ., addParserWarning, (]
[;, return, true, ;, case, EOF, :, jsdocBuilder, ., build, (, null, ), ;, parser, ., addParserWarning, (, "msg.unexpected.eof", ,]
[;, return, true, ;, case, EOF, :, jsdocBuilder, ., build, (, null, ), ;, parser, ., addParserWarning, (, "msg.unexpected.eof", ,]
[:, jsdocBuilder, ., build, (, null, ), ;, parser, ., addParserWarning, (, "msg.unexpected.eof", ,, stream, ., getLineno, (, ), ,]
[:, jsdocBuilder, ., build, (, null, ), ;, parser, ., addParserWarning, (, "msg.unexpected.eof", ,, stream, ., getLineno, (, ), ,]
[;, parser, ., addParserWarning, (, "msg.unexpected.eof", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;]
[., addParserWarning, (, "msg.unexpected.eof", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, checkExtendedTypes, (]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, checkExtendedTypes, (, extendedTypes, ), ;, return]
[getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, checkExtendedTypes, (, extendedTypes, ), ;, return, false, ;, case]
[stream, ., getCharno, (, ), ), ;, checkExtendedTypes, (, extendedTypes, ), ;, return, false, ;, case, EOL, :, if, (]
[stream, ., getCharno, (, ), ), ;, checkExtendedTypes, (, extendedTypes, ), ;, return, false, ;, case, EOL, :, if, (]
[getCharno, (, ), ), ;, checkExtendedTypes, (, extendedTypes, ), ;, return, false, ;, case, EOL, :, if, (, state, ==]
[getCharno, (, ), ), ;, checkExtendedTypes, (, extendedTypes, ), ;, return, false, ;, case, EOL, :, if, (, state, ==]
[checkExtendedTypes, (, extendedTypes, ), ;, return, false, ;, case, EOL, :, if, (, state, ==, State, ., SEARCHING_NEWLINE, ), {]
[extendedTypes, ), ;, return, false, ;, case, EOL, :, if, (, state, ==, State, ., SEARCHING_NEWLINE, ), {, state, =]
[extendedTypes, ), ;, return, false, ;, case, EOL, :, if, (, state, ==, State, ., SEARCHING_NEWLINE, ), {, state, =]
[;, case, EOL, :, if, (, state, ==, State, ., SEARCHING_NEWLINE, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, }]
[EOL, :, if, (, state, ==, State, ., SEARCHING_NEWLINE, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, }, token, =]
[state, =, State, ., SEARCHING_ANNOTATION, ;, }, token, =, next, (, ), ;, continue, retry, ;, default, :, if, (]
[state, =, State, ., SEARCHING_ANNOTATION, ;, }, token, =, next, (, ), ;, continue, retry, ;, default, :, if, (]
[state, =, State, ., SEARCHING_ANNOTATION, ;, }, token, =, next, (, ), ;, continue, retry, ;, default, :, if, (]
[State, ., SEARCHING_ANNOTATION, ;, }, token, =, next, (, ), ;, continue, retry, ;, default, :, if, (, token, ==]
[State, ., SEARCHING_ANNOTATION, ;, }, token, =, next, (, ), ;, continue, retry, ;, default, :, if, (, token, ==]
[}, token, =, next, (, ), ;, continue, retry, ;, default, :, if, (, token, ==, JsDocToken, ., STAR, &&]
[}, token, =, next, (, ), ;, continue, retry, ;, default, :, if, (, token, ==, JsDocToken, ., STAR, &&]
[=, next, (, ), ;, continue, retry, ;, default, :, if, (, token, ==, JsDocToken, ., STAR, &&, state, ==]
[=, next, (, ), ;, continue, retry, ;, default, :, if, (, token, ==, JsDocToken, ., STAR, &&, state, ==]
[continue, retry, ;, default, :, if, (, token, ==, JsDocToken, ., STAR, &&, state, ==, State, ., SEARCHING_ANNOTATION, ), {]
[;, default, :, if, (, token, ==, JsDocToken, ., STAR, &&, state, ==, State, ., SEARCHING_ANNOTATION, ), {, token, =]
[&&, state, ==, State, ., SEARCHING_ANNOTATION, ), {, token, =, next, (, ), ;, continue, retry, ;, }, else, {]
[==, State, ., SEARCHING_ANNOTATION, ), {, token, =, next, (, ), ;, continue, retry, ;, }, else, {, state, =]
[==, State, ., SEARCHING_ANNOTATION, ), {, token, =, next, (, ), ;, continue, retry, ;, }, else, {, state, =]
[), {, token, =, next, (, ), ;, continue, retry, ;, }, else, {, state, =, State, ., SEARCHING_NEWLINE, ;]
[token, =, next, (, ), ;, continue, retry, ;, }, else, {, state, =, State, ., SEARCHING_NEWLINE, ;, token, =]
[}, else, {, state, =, State, ., SEARCHING_NEWLINE, ;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }]
[{, state, =, State, ., SEARCHING_NEWLINE, ;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =]
[), ;, }, }, private, void, checkExtendedTypes, (, List, <, ExtendedTypeInfo, >, extendedTypes, ), {, for, (, ExtendedTypeInfo, typeInfo, :]
[void, checkExtendedTypes, (, List, <, ExtendedTypeInfo, >, extendedTypes, ), {, for, (, ExtendedTypeInfo, typeInfo, :, extendedTypes, ), {, if, (]
[void, checkExtendedTypes, (, List, <, ExtendedTypeInfo, >, extendedTypes, ), {, for, (, ExtendedTypeInfo, typeInfo, :, extendedTypes, ), {, if, (]
[{, for, (, ExtendedTypeInfo, typeInfo, :, extendedTypes, ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, if, (]
[for, (, ExtendedTypeInfo, typeInfo, :, extendedTypes, ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, if, (, !]
[for, (, ExtendedTypeInfo, typeInfo, :, extendedTypes, ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, if, (, !]
[:, extendedTypes, ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, if, (, !, jsdocBuilder, ., recordExtendedInterface, (]
[:, extendedTypes, ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, if, (, !, jsdocBuilder, ., recordExtendedInterface, (]
[jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, if, (, !, jsdocBuilder, ., recordExtendedInterface, (, typeInfo, ., type, ), ), {]
[jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, if, (, !, jsdocBuilder, ., recordExtendedInterface, (, typeInfo, ., type, ), ), {]
[), ), {, if, (, !, jsdocBuilder, ., recordExtendedInterface, (, typeInfo, ., type, ), ), {, parser, ., addParserWarning, (]
[{, if, (, !, jsdocBuilder, ., recordExtendedInterface, (, typeInfo, ., type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extends.duplicate", ,]
[{, if, (, !, jsdocBuilder, ., recordExtendedInterface, (, typeInfo, ., type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extends.duplicate", ,]
[jsdocBuilder, ., recordExtendedInterface, (, typeInfo, ., type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extends.duplicate", ,, typeInfo, ., lineno, ,]
[jsdocBuilder, ., recordExtendedInterface, (, typeInfo, ., type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extends.duplicate", ,, typeInfo, ., lineno, ,]
[., addParserWarning, (, "msg.jsdoc.extends.duplicate", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, else, {, if, (]
[addParserWarning, (, "msg.jsdoc.extends.duplicate", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, else, {, if, (, !]
[addParserWarning, (, "msg.jsdoc.extends.duplicate", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, else, {, if, (, !]
[typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, else, {, if, (, !, jsdocBuilder, ., recordBaseType, (]
[typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, else, {, if, (, !, jsdocBuilder, ., recordBaseType, (]
[charno, ), ;, }, }, else, {, if, (, !, jsdocBuilder, ., recordBaseType, (, typeInfo, ., type, ), ), {]
[charno, ), ;, }, }, else, {, if, (, !, jsdocBuilder, ., recordBaseType, (, typeInfo, ., type, ), ), {]
[}, else, {, if, (, !, jsdocBuilder, ., recordBaseType, (, typeInfo, ., type, ), ), {, parser, ., addTypeWarning, (]
[{, if, (, !, jsdocBuilder, ., recordBaseType, (, typeInfo, ., type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[{, if, (, !, jsdocBuilder, ., recordBaseType, (, typeInfo, ., type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[jsdocBuilder, ., recordBaseType, (, typeInfo, ., type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, typeInfo, ., lineno, ,]
[jsdocBuilder, ., recordBaseType, (, typeInfo, ., type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, typeInfo, ., lineno, ,]
[,, typeInfo, ., charno, ), ;, }, }, }, }, private, JsDocToken, parseSuppressTag, (, JsDocToken, token, ), {, if, (]
[,, typeInfo, ., charno, ), ;, }, }, }, }, private, JsDocToken, parseSuppressTag, (, JsDocToken, token, ), {, if, (]
[., charno, ), ;, }, }, }, }, private, JsDocToken, parseSuppressTag, (, JsDocToken, token, ), {, if, (, token, ==]
[., charno, ), ;, }, }, }, }, private, JsDocToken, parseSuppressTag, (, JsDocToken, token, ), {, if, (, token, ==]
[(, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC, ), {, Set, <, String, >, suppressions, =]
[., LC, ), {, Set, <, String, >, suppressions, =, new, HashSet, <, String, >, (, ), ;, while, (]
[<, String, >, suppressions, =, new, HashSet, <, String, >, (, ), ;, while, (, true, ), {, if, (]
[>, suppressions, =, new, HashSet, <, String, >, (, ), ;, while, (, true, ), {, if, (, match, (]
[>, suppressions, =, new, HashSet, <, String, >, (, ), ;, while, (, true, ), {, if, (, match, (]
[), ;, while, (, true, ), {, if, (, match, (, JsDocToken, ., STRING, ), ), {, String, name, =]
[), ;, while, (, true, ), {, if, (, match, (, JsDocToken, ., STRING, ), ), {, String, name, =]
[(, match, (, JsDocToken, ., STRING, ), ), {, String, name, =, stream, ., getString, (, ), ;, if, (]
[match, (, JsDocToken, ., STRING, ), ), {, String, name, =, stream, ., getString, (, ), ;, if, (, !]
[match, (, JsDocToken, ., STRING, ), ), {, String, name, =, stream, ., getString, (, ), ;, if, (, !]
[STRING, ), ), {, String, name, =, stream, ., getString, (, ), ;, if, (, !, suppressionNames, ., contains, (]
[String, name, =, stream, ., getString, (, ), ;, if, (, !, suppressionNames, ., contains, (, name, ), ), {]
[String, name, =, stream, ., getString, (, ), ;, if, (, !, suppressionNames, ., contains, (, name, ), ), {]
[., getString, (, ), ;, if, (, !, suppressionNames, ., contains, (, name, ), ), {, parser, ., addParserWarning, (]
[(, ), ;, if, (, !, suppressionNames, ., contains, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.unknown", ,]
[;, if, (, !, suppressionNames, ., contains, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,]
[;, if, (, !, suppressionNames, ., contains, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,]
[contains, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,, stream, ., getLineno, (, ), ,]
[contains, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,, stream, ., getLineno, (, ), ,]
[addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, suppressions, ., add, (]
[name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, suppressions, ., add, (]
[,, stream, ., getCharno, (, ), ), ;, }, suppressions, ., add, (, stream, ., getString, (, ), ), ;]
[., getCharno, (, ), ), ;, }, suppressions, ., add, (, stream, ., getString, (, ), ), ;, token, =]
[suppressions, ., add, (, stream, ., getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {]
[suppressions, ., add, (, stream, ., getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {]
[stream, ., getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (]
[getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,]
[getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,]
[=, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,]
[=, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (]
[., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {]
[(, ), ), ;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {, token, =]
[., PIPE, ), ), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (]
[PIPE, ), ), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !]
[), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !, match, (]
[), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !, match, (]
[), ;, }, else, {, break, ;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {]
[), ;, }, else, {, break, ;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {]
[{, break, ;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addParserWarning, (]
[;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,]
[;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,]
[match, (, JsDocToken, ., RC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,]
[match, (, JsDocToken, ., RC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,]
[addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
["msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (, !]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (, !]
[(, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordSuppressions, (]
[}, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordSuppressions, (, suppressions, ), ), {]
[}, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordSuppressions, (, suppressions, ), ), {]
[=, next, (, ), ;, if, (, !, jsdocBuilder, ., recordSuppressions, (, suppressions, ), ), {, parser, ., addParserWarning, (]
[(, ), ;, if, (, !, jsdocBuilder, ., recordSuppressions, (, suppressions, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.duplicate", ,]
[(, ), ;, if, (, !, jsdocBuilder, ., recordSuppressions, (, suppressions, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.duplicate", ,]
[jsdocBuilder, ., recordSuppressions, (, suppressions, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.duplicate", ,, stream, ., getLineno, (, ), ,]
[jsdocBuilder, ., recordSuppressions, (, suppressions, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.duplicate", ,, stream, ., getLineno, (, ), ,]
[(, "msg.jsdoc.suppress.duplicate", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, }, return]
[), ), ;, }, }, }, return, token, ;, }, private, JsDocToken, parseModifiesTag, (, JsDocToken, token, ), {, if, (]
[), ), ;, }, }, }, return, token, ;, }, private, JsDocToken, parseModifiesTag, (, JsDocToken, token, ), {, if, (]
[;, }, }, }, return, token, ;, }, private, JsDocToken, parseModifiesTag, (, JsDocToken, token, ), {, if, (, token, ==]
[;, }, }, }, return, token, ;, }, private, JsDocToken, parseModifiesTag, (, JsDocToken, token, ), {, if, (, token, ==]
[(, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC, ), {, Set, <, String, >, modifies, =]
[., LC, ), {, Set, <, String, >, modifies, =, new, HashSet, <, String, >, (, ), ;, while, (]
[<, String, >, modifies, =, new, HashSet, <, String, >, (, ), ;, while, (, true, ), {, if, (]
[>, modifies, =, new, HashSet, <, String, >, (, ), ;, while, (, true, ), {, if, (, match, (]
[>, modifies, =, new, HashSet, <, String, >, (, ), ;, while, (, true, ), {, if, (, match, (]
[), ;, while, (, true, ), {, if, (, match, (, JsDocToken, ., STRING, ), ), {, String, name, =]
[), ;, while, (, true, ), {, if, (, match, (, JsDocToken, ., STRING, ), ), {, String, name, =]
[(, match, (, JsDocToken, ., STRING, ), ), {, String, name, =, stream, ., getString, (, ), ;, if, (]
[(, match, (, JsDocToken, ., STRING, ), ), {, String, name, =, stream, ., getString, (, ), ;, if, (]
[match, (, JsDocToken, ., STRING, ), ), {, String, name, =, stream, ., getString, (, ), ;, if, (, !]
[match, (, JsDocToken, ., STRING, ), ), {, String, name, =, stream, ., getString, (, ), ;, if, (, !]
[STRING, ), ), {, String, name, =, stream, ., getString, (, ), ;, if, (, !, modifiesAnnotationKeywords, ., contains, (]
[{, String, name, =, stream, ., getString, (, ), ;, if, (, !, modifiesAnnotationKeywords, ., contains, (, name, ), &&]
[String, name, =, stream, ., getString, (, ), ;, if, (, !, modifiesAnnotationKeywords, ., contains, (, name, ), &&, !]
[String, name, =, stream, ., getString, (, ), ;, if, (, !, modifiesAnnotationKeywords, ., contains, (, name, ), &&, !]
[., getString, (, ), ;, if, (, !, modifiesAnnotationKeywords, ., contains, (, name, ), &&, !, jsdocBuilder, ., hasParameter, (]
[;, if, (, !, modifiesAnnotationKeywords, ., contains, (, name, ), &&, !, jsdocBuilder, ., hasParameter, (, name, ), ), {]
[;, if, (, !, modifiesAnnotationKeywords, ., contains, (, name, ), &&, !, jsdocBuilder, ., hasParameter, (, name, ), ), {]
[modifiesAnnotationKeywords, ., contains, (, name, ), &&, !, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addParserWarning, (]
[contains, (, name, ), &&, !, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,]
[name, ), &&, !, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,]
[name, ), &&, !, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,]
[hasParameter, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, ., getLineno, (, ), ,]
[hasParameter, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, ., getLineno, (, ), ,]
[addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }]
[name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, modifies, ., add, (]
[name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, modifies, ., add, (]
[,, stream, ., getCharno, (, ), ), ;, }, modifies, ., add, (, stream, ., getString, (, ), ), ;]
[., getCharno, (, ), ), ;, }, modifies, ., add, (, stream, ., getString, (, ), ), ;, token, =]
[modifies, ., add, (, stream, ., getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {]
[modifies, ., add, (, stream, ., getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {]
[stream, ., getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (]
[getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,]
[getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,]
[=, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,]
[=, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,]
[parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (]
[., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {]
[(, ), ), ;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {, token, =]
[., PIPE, ), ), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (]
[PIPE, ), ), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !]
[), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !, match, (]
[), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !, match, (]
[), ;, }, else, {, break, ;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {]
[), ;, }, else, {, break, ;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {]
[{, break, ;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addParserWarning, (]
[;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,]
[;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,]
[match, (, JsDocToken, ., RC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,]
[match, (, JsDocToken, ., RC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,]
[addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {]
["msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =]
[), ,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (, !]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (, !]
[(, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordModifies, (]
[}, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordModifies, (, modifies, ), ), {]
[}, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordModifies, (, modifies, ), ), {]
[=, next, (, ), ;, if, (, !, jsdocBuilder, ., recordModifies, (, modifies, ), ), {, parser, ., addParserWarning, (]
[(, ), ;, if, (, !, jsdocBuilder, ., recordModifies, (, modifies, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.duplicate", ,]
[(, ), ;, if, (, !, jsdocBuilder, ., recordModifies, (, modifies, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.duplicate", ,]
[jsdocBuilder, ., recordModifies, (, modifies, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.duplicate", ,, stream, ., getLineno, (, ), ,]
[jsdocBuilder, ., recordModifies, (, modifies, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.duplicate", ,, stream, ., getLineno, (, ), ,]
[(, "msg.jsdoc.modifies.duplicate", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, }, return]
[(, ), ), ;, }, }, }, return, token, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ), {, return]
[), ;, }, }, }, return, token, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ), {, return, parseAndRecordTypeNode, (]
[}, }, }, return, token, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ), {, return, parseAndRecordTypeNode, (, token, ,]
[}, }, }, return, token, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ), {, return, parseAndRecordTypeNode, (, token, ,]
[}, return, token, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ), {, return, parseAndRecordTypeNode, (, token, ,, token, ==]
[}, return, token, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ), {, return, parseAndRecordTypeNode, (, token, ,, token, ==]
[token, ==, JsDocToken, ., LC, ), ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {, return]
[JsDocToken, ., LC, ), ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (]
[LC, ), ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,]
[LC, ), ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,]
[parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,, stream, ., getLineno, (, ), ,]
[parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,, stream, ., getLineno, (, ), ,]
[matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ,]
[{, return, parseAndRecordTypeNode, (, token, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ,, matchingLC, ,]
[;, }, private, Node, parseAndRecordTypeNameNode, (, JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,, boolean, matchingLC, ), {, return]
[private, Node, parseAndRecordTypeNameNode, (, JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (]
[parseAndRecordTypeNameNode, (, JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,]
[JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,, lineno, ,]
[,, int, lineno, ,, int, startCharno, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,, lineno, ,, startCharno, ,]
[lineno, ,, int, startCharno, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,, lineno, ,, startCharno, ,, matchingLC, ,]
[token, ,, lineno, ,, startCharno, ,, matchingLC, ,, true, ), ;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {]
[token, ,, lineno, ,, startCharno, ,, matchingLC, ,, true, ), ;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {]
[startCharno, ,, matchingLC, ,, true, ), ;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (]
[startCharno, ,, matchingLC, ,, true, ), ;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (]
[matchingLC, ,, true, ), ;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==]
[matchingLC, ,, true, ), ;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==]
[parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==, JsDocToken, ., LC, ), ;, int, lineno, =]
[parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==, JsDocToken, ., LC, ), ;, int, lineno, =]
[(, token, ==, JsDocToken, ., LC, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =]
[(, token, ==, JsDocToken, ., LC, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =]
[lineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =]
[stream, ., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =, parseParamTypeExpressionAnnotation, (]
[;, int, startCharno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =, parseParamTypeExpressionAnnotation, (, token, ), ;, if, (]
[;, int, startCharno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =, parseParamTypeExpressionAnnotation, (, token, ), ;, if, (]
[startCharno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =, parseParamTypeExpressionAnnotation, (, token, ), ;, if, (, typeNode, !=]
[), ;, Node, typeNode, =, parseParamTypeExpressionAnnotation, (, token, ), ;, if, (, typeNode, !=, null, ), {, int, endLineno, =]
[), ;, Node, typeNode, =, parseParamTypeExpressionAnnotation, (, token, ), ;, if, (, typeNode, !=, null, ), {, int, endLineno, =]
[;, if, (, typeNode, !=, null, ), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =]
[;, if, (, typeNode, !=, null, ), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =]
[), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;]
[), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;]
[=, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (]
[., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,]
[(, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,]
[;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,]
[endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,]
[stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,]
[;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,, true, ), ;, }, return]
[(, JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,, boolean, matchingLC, ,, boolean, onlyParseSimpleNames, ), {, Node, typeNode, =]
[int, lineno, ,, int, startCharno, ,, boolean, matchingLC, ,, boolean, onlyParseSimpleNames, ), {, Node, typeNode, =, null, ;, if, (]
[int, startCharno, ,, boolean, matchingLC, ,, boolean, onlyParseSimpleNames, ), {, Node, typeNode, =, null, ;, if, (, onlyParseSimpleNames, ), {]
[,, boolean, matchingLC, ,, boolean, onlyParseSimpleNames, ), {, Node, typeNode, =, null, ;, if, (, onlyParseSimpleNames, ), {, typeNode, =]
[matchingLC, ,, boolean, onlyParseSimpleNames, ), {, Node, typeNode, =, null, ;, if, (, onlyParseSimpleNames, ), {, typeNode, =, parseTypeNameAnnotation, (]
[Node, typeNode, =, null, ;, if, (, onlyParseSimpleNames, ), {, typeNode, =, parseTypeNameAnnotation, (, token, ), ;, }, else, {]
[=, null, ;, if, (, onlyParseSimpleNames, ), {, typeNode, =, parseTypeNameAnnotation, (, token, ), ;, }, else, {, typeNode, =]
[;, if, (, onlyParseSimpleNames, ), {, typeNode, =, parseTypeNameAnnotation, (, token, ), ;, }, else, {, typeNode, =, parseTypeExpressionAnnotation, (]
[typeNode, =, parseTypeNameAnnotation, (, token, ), ;, }, else, {, typeNode, =, parseTypeExpressionAnnotation, (, token, ), ;, }, if, (]
[typeNode, =, parseTypeNameAnnotation, (, token, ), ;, }, else, {, typeNode, =, parseTypeExpressionAnnotation, (, token, ), ;, }, if, (]
[parseTypeNameAnnotation, (, token, ), ;, }, else, {, typeNode, =, parseTypeExpressionAnnotation, (, token, ), ;, }, if, (, typeNode, !=]
[else, {, typeNode, =, parseTypeExpressionAnnotation, (, token, ), ;, }, if, (, typeNode, !=, null, ), {, int, endLineno, =]
[else, {, typeNode, =, parseTypeExpressionAnnotation, (, token, ), ;, }, if, (, typeNode, !=, null, ), {, int, endLineno, =]
[}, if, (, typeNode, !=, null, ), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =]
[}, if, (, typeNode, !=, null, ), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =]
[), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;]
[), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;]
[=, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (]
[., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,]
[(, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,]
[;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,]
[endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,]
[stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,]
[;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,, matchingLC, ), ;, }, return]
[endCharno, ,, matchingLC, ), ;, }, return, typeNode, ;, }, private, String, toString, (, JsDocToken, token, ), {, switch, (]
[;, }, return, typeNode, ;, }, private, String, toString, (, JsDocToken, token, ), {, switch, (, token, ), {, case]
[typeNode, ;, }, private, String, toString, (, JsDocToken, token, ), {, switch, (, token, ), {, case, ANNOTATION, :, return]
[typeNode, ;, }, private, String, toString, (, JsDocToken, token, ), {, switch, (, token, ), {, case, ANNOTATION, :, return]
[}, private, String, toString, (, JsDocToken, token, ), {, switch, (, token, ), {, case, ANNOTATION, :, return, "@", +]
[}, private, String, toString, (, JsDocToken, token, ), {, switch, (, token, ), {, case, ANNOTATION, :, return, "@", +]
[), {, switch, (, token, ), {, case, ANNOTATION, :, return, "@", +, stream, ., getString, (, ), ;, case]
[(, token, ), {, case, ANNOTATION, :, return, "@", +, stream, ., getString, (, ), ;, case, BANG, :, return]
[{, case, ANNOTATION, :, return, "@", +, stream, ., getString, (, ), ;, case, BANG, :, return, "!", ;, case]
[:, return, "@", +, stream, ., getString, (, ), ;, case, BANG, :, return, "!", ;, case, COMMA, :, return]
[+, stream, ., getString, (, ), ;, case, BANG, :, return, "!", ;, case, COMMA, :, return, ",", ;, case]
[getString, (, ), ;, case, BANG, :, return, "!", ;, case, COMMA, :, return, ",", ;, case, COLON, :, return]
[;, case, BANG, :, return, "!", ;, case, COMMA, :, return, ",", ;, case, COLON, :, return, ":", ;, case]
[:, return, "!", ;, case, COMMA, :, return, ",", ;, case, COLON, :, return, ":", ;, case, GT, :, return]
[;, case, COMMA, :, return, ",", ;, case, COLON, :, return, ":", ;, case, GT, :, return, ">", ;, case]
[:, return, ",", ;, case, COLON, :, return, ":", ;, case, GT, :, return, ">", ;, case, LB, :, return]
[;, case, COLON, :, return, ":", ;, case, GT, :, return, ">", ;, case, LB, :, return, "[", ;, case]
[:, return, ":", ;, case, GT, :, return, ">", ;, case, LB, :, return, "[", ;, case, LC, :, return]
[;, case, GT, :, return, ">", ;, case, LB, :, return, "[", ;, case, LC, :, return, "{", ;, case]
[:, return, ">", ;, case, LB, :, return, "[", ;, case, LC, :, return, "{", ;, case, LP, :, return]
[;, case, LB, :, return, "[", ;, case, LC, :, return, "{", ;, case, LP, :, return, "(", ;, case]
[:, return, "[", ;, case, LC, :, return, "{", ;, case, LP, :, return, "(", ;, case, LT, :, return]
[;, case, LC, :, return, "{", ;, case, LP, :, return, "(", ;, case, LT, :, return, ".<", ;, case]
[:, return, "{", ;, case, LP, :, return, "(", ;, case, LT, :, return, ".<", ;, case, QMARK, :, return]
[;, case, LP, :, return, "(", ;, case, LT, :, return, ".<", ;, case, QMARK, :, return, "?", ;, case]
[:, return, "(", ;, case, LT, :, return, ".<", ;, case, QMARK, :, return, "?", ;, case, PIPE, :, return]
[;, case, LT, :, return, ".<", ;, case, QMARK, :, return, "?", ;, case, PIPE, :, return, "|", ;, case]
[:, return, ".<", ;, case, QMARK, :, return, "?", ;, case, PIPE, :, return, "|", ;, case, RB, :, return]
[;, case, QMARK, :, return, "?", ;, case, PIPE, :, return, "|", ;, case, RB, :, return, "]", ;, case]
[:, return, "?", ;, case, PIPE, :, return, "|", ;, case, RB, :, return, "]", ;, case, RC, :, return]
[;, case, PIPE, :, return, "|", ;, case, RB, :, return, "]", ;, case, RC, :, return, "}", ;, case]
[:, return, "|", ;, case, RB, :, return, "]", ;, case, RC, :, return, "}", ;, case, RP, :, return]
[;, case, RB, :, return, "]", ;, case, RC, :, return, "}", ;, case, RP, :, return, ")", ;, case]
[:, return, "]", ;, case, RC, :, return, "}", ;, case, RP, :, return, ")", ;, case, STAR, :, return]
[;, case, RC, :, return, "}", ;, case, RP, :, return, ")", ;, case, STAR, :, return, "*", ;, case]
[:, return, "}", ;, case, RP, :, return, ")", ;, case, STAR, :, return, "*", ;, case, ELLIPSIS, :, return]
[;, case, RP, :, return, ")", ;, case, STAR, :, return, "*", ;, case, ELLIPSIS, :, return, "...", ;, case]
[:, return, ")", ;, case, STAR, :, return, "*", ;, case, ELLIPSIS, :, return, "...", ;, case, EQUALS, :, return]
[;, case, STAR, :, return, "*", ;, case, ELLIPSIS, :, return, "...", ;, case, EQUALS, :, return, "=", ;, case]
[:, return, "*", ;, case, ELLIPSIS, :, return, "...", ;, case, EQUALS, :, return, "=", ;, case, STRING, :, return]
[:, return, "*", ;, case, ELLIPSIS, :, return, "...", ;, case, EQUALS, :, return, "=", ;, case, STRING, :, return]
[;, case, EQUALS, :, return, "=", ;, case, STRING, :, return, stream, ., getString, (, ), ;, default, :, throw]
[:, return, "=", ;, case, STRING, :, return, stream, ., getString, (, ), ;, default, :, throw, new, IllegalStateException, (]
[:, return, "=", ;, case, STRING, :, return, stream, ., getString, (, ), ;, default, :, throw, new, IllegalStateException, (]
[IllegalStateException, (, token, ., toString, (, ), ), ;, }, }, private, JSTypeExpression, createJSTypeExpression, (, Node, n, ), {, return]
[IllegalStateException, (, token, ., toString, (, ), ), ;, }, }, private, JSTypeExpression, createJSTypeExpression, (, Node, n, ), {, return]
[IllegalStateException, (, token, ., toString, (, ), ), ;, }, }, private, JSTypeExpression, createJSTypeExpression, (, Node, n, ), {, return]
[token, ., toString, (, ), ), ;, }, }, private, JSTypeExpression, createJSTypeExpression, (, Node, n, ), {, return, n, ==]
[toString, (, ), ), ;, }, }, private, JSTypeExpression, createJSTypeExpression, (, Node, n, ), {, return, n, ==, null, ?]
[), ), ;, }, }, private, JSTypeExpression, createJSTypeExpression, (, Node, n, ), {, return, n, ==, null, ?, null, :]
[}, }, private, JSTypeExpression, createJSTypeExpression, (, Node, n, ), {, return, n, ==, null, ?, null, :, new, JSTypeExpression, (]
[private, JSTypeExpression, createJSTypeExpression, (, Node, n, ), {, return, n, ==, null, ?, null, :, new, JSTypeExpression, (, n, ,]
[private, final, String, string, ;, private, final, JsDocToken, token, ;, public, ExtractionInfo, (, String, string, ,, JsDocToken, token, ), {]
[private, final, String, string, ;, private, final, JsDocToken, token, ;, public, ExtractionInfo, (, String, string, ,, JsDocToken, token, ), {]
[;, private, final, JsDocToken, token, ;, public, ExtractionInfo, (, String, string, ,, JsDocToken, token, ), {, this, ., string, =]
[final, JsDocToken, token, ;, public, ExtractionInfo, (, String, string, ,, JsDocToken, token, ), {, this, ., string, =, string, ;]
[final, JsDocToken, token, ;, public, ExtractionInfo, (, String, string, ,, JsDocToken, token, ), {, this, ., string, =, string, ;]
[public, ExtractionInfo, (, String, string, ,, JsDocToken, token, ), {, this, ., string, =, string, ;, this, ., token, =]
[int, lineno, ;, final, int, charno, ;, public, ExtendedTypeInfo, (, JSTypeExpression, type, ,, int, lineno, ,, int, charno, ), {]
[int, lineno, ;, final, int, charno, ;, public, ExtendedTypeInfo, (, JSTypeExpression, type, ,, int, lineno, ,, int, charno, ), {]
[int, charno, ;, public, ExtendedTypeInfo, (, JSTypeExpression, type, ,, int, lineno, ,, int, charno, ), {, this, ., type, =]
[;, public, ExtendedTypeInfo, (, JSTypeExpression, type, ,, int, lineno, ,, int, charno, ), {, this, ., type, =, type, ;]
[;, public, ExtendedTypeInfo, (, JSTypeExpression, type, ,, int, lineno, ,, int, charno, ), {, this, ., type, =, type, ;]
[JSTypeExpression, type, ,, int, lineno, ,, int, charno, ), {, this, ., type, =, type, ;, this, ., lineno, =]
[,, int, lineno, ,, int, charno, ), {, this, ., type, =, type, ;, this, ., lineno, =, lineno, ;]
[,, int, lineno, ,, int, charno, ), {, this, ., type, =, type, ;, this, ., lineno, =, lineno, ;]
[int, charno, ), {, this, ., type, =, type, ;, this, ., lineno, =, lineno, ;, this, ., charno, =]
[this, ., lineno, =, lineno, ;, this, ., charno, =, charno, ;, }, }, private, ExtractionInfo, extractSingleLineBlock, (, ), {]
[this, ., lineno, =, lineno, ;, this, ., charno, =, charno, ;, }, }, private, ExtractionInfo, extractSingleLineBlock, (, ), {]
[=, charno, ;, }, }, private, ExtractionInfo, extractSingleLineBlock, (, ), {, stream, ., update, (, ), ;, int, lineno, =]
[=, charno, ;, }, }, private, ExtractionInfo, extractSingleLineBlock, (, ), {, stream, ., update, (, ), ;, int, lineno, =]
[), {, stream, ., update, (, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =]
[), {, stream, ., update, (, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =]
[), {, stream, ., update, (, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =]
[), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), +]
[stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), +, 1, ;, String, line, =]
[stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), +, 1, ;, String, line, =]
[stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), +, 1, ;, String, line, =]
[(, ), +, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ., trim, (, ), ;, if, (]
[(, ), +, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ., trim, (, ), ;, if, (]
[(, ), +, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ., trim, (, ), ;, if, (]
[line, =, stream, ., getRemainingJSDocLine, (, ), ., trim, (, ), ;, if, (, line, ., length, (, ), >]
[., getRemainingJSDocLine, (, ), ., trim, (, ), ;, if, (, line, ., length, (, ), >, 0, ), {]
[., getRemainingJSDocLine, (, ), ., trim, (, ), ;, if, (, line, ., length, (, ), >, 0, ), {]
[., trim, (, ), ;, if, (, line, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (]
[(, ), ;, if, (, line, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, line, ,]
[;, if, (, line, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, line, ,, lineno, ,]
[(, line, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, line, ,, lineno, ,, charno, ,]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, line, ,, lineno, ,, charno, ,, lineno, ,]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, line, ,, lineno, ,, charno, ,, lineno, ,]
[(, ), >, 0, ), {, jsdocBuilder, ., markText, (, line, ,, lineno, ,, charno, ,, lineno, ,, charno, +]
[(, ), >, 0, ), {, jsdocBuilder, ., markText, (, line, ,, lineno, ,, charno, ,, lineno, ,, charno, +]
[(, line, ,, lineno, ,, charno, ,, lineno, ,, charno, +, line, ., length, (, ), ), ;, }, return]
[lineno, ,, charno, ,, lineno, ,, charno, +, line, ., length, (, ), ), ;, }, return, new, ExtractionInfo, (]
[charno, ,, lineno, ,, charno, +, line, ., length, (, ), ), ;, }, return, new, ExtractionInfo, (, line, ,]
[new, ExtractionInfo, (, line, ,, next, (, ), ), ;, }, private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ), {, return]
[(, line, ,, next, (, ), ), ;, }, private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ), {, return, extractMultilineTextualBlock, (]
[,, next, (, ), ), ;, }, private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ), {, return, extractMultilineTextualBlock, (, token, ,]
[,, next, (, ), ), ;, }, private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ), {, return, extractMultilineTextualBlock, (, token, ,]
[extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., SINGLE_LINE, ), ;, }, private, enum, WhitespaceOption, {, PRESERVE, ,, TRIM, ,, SINGLE_LINE, }]
[,, WhitespaceOption, ., SINGLE_LINE, ), ;, }, private, enum, WhitespaceOption, {, PRESERVE, ,, TRIM, ,, SINGLE_LINE, }, @, SuppressWarnings, (]
[SINGLE_LINE, }, @, SuppressWarnings, (, "fallthrough", ), private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (]
[SINGLE_LINE, }, @, SuppressWarnings, (, "fallthrough", ), private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (]
[SINGLE_LINE, }, @, SuppressWarnings, (, "fallthrough", ), private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (]
[SINGLE_LINE, }, @, SuppressWarnings, (, "fallthrough", ), private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (]
[@, SuppressWarnings, (, "fallthrough", ), private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (, token, ==]
[@, SuppressWarnings, (, "fallthrough", ), private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (, token, ==]
[), private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (, token, ==, JsDocToken, ., EOC, ||]
[), private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (, token, ==, JsDocToken, ., EOC, ||]
[ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==]
[ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==]
[token, ,, WhitespaceOption, option, ), {, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOL, ||]
[token, ,, WhitespaceOption, option, ), {, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOL, ||]
[WhitespaceOption, option, ), {, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOL, ||, token, ==]
[WhitespaceOption, option, ), {, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOL, ||, token, ==]
[token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOF, ), {, return]
[., EOC, ||, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (]
[||, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (, "", ,]
[., EOL, ||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (, "", ,, token, ), ;, }]
[., EOL, ||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (, "", ,, token, ), ;, }]
[{, return, new, ExtractionInfo, (, "", ,, token, ), ;, }, stream, ., update, (, ), ;, int, startLineno, =]
[{, return, new, ExtractionInfo, (, "", ,, token, ), ;, }, stream, ., update, (, ), ;, int, startLineno, =]
[;, }, stream, ., update, (, ), ;, int, startLineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =]
[;, }, stream, ., update, (, ), ;, int, startLineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =]
[;, }, stream, ., update, (, ), ;, int, startLineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =]
[), ;, int, startLineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (, ), +]
[stream, ., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (, ), +, 1, ;, String, line, =]
[stream, ., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (, ), +, 1, ;, String, line, =]
[=, stream, ., getCharno, (, ), +, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (]
[=, stream, ., getCharno, (, ), +, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (]
[., getCharno, (, ), +, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=]
[., getCharno, (, ), +, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=]
[1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {]
[String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =]
[String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =]
[(, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =, line, ., trim, (, ), ;, }, StringBuilder, builder, =]
[PRESERVE, ), {, line, =, line, ., trim, (, ), ;, }, StringBuilder, builder, =, new, StringBuilder, (, ), ;]
[PRESERVE, ), {, line, =, line, ., trim, (, ), ;, }, StringBuilder, builder, =, new, StringBuilder, (, ), ;]
[=, line, ., trim, (, ), ;, }, StringBuilder, builder, =, new, StringBuilder, (, ), ;, builder, ., append, (]
[trim, (, ), ;, }, StringBuilder, builder, =, new, StringBuilder, (, ), ;, builder, ., append, (, line, ), ;]
[), ;, }, StringBuilder, builder, =, new, StringBuilder, (, ), ;, builder, ., append, (, line, ), ;, state, =]
[), ;, }, StringBuilder, builder, =, new, StringBuilder, (, ), ;, builder, ., append, (, line, ), ;, state, =]
[builder, =, new, StringBuilder, (, ), ;, builder, ., append, (, line, ), ;, state, =, State, ., SEARCHING_ANNOTATION, ;]
[new, StringBuilder, (, ), ;, builder, ., append, (, line, ), ;, state, =, State, ., SEARCHING_ANNOTATION, ;, token, =]
[append, (, line, ), ;, state, =, State, ., SEARCHING_ANNOTATION, ;, token, =, next, (, ), ;, boolean, ignoreStar, =]
[state, =, State, ., SEARCHING_ANNOTATION, ;, token, =, next, (, ), ;, boolean, ignoreStar, =, false, ;, int, lineStartChar, =]
[=, State, ., SEARCHING_ANNOTATION, ;, token, =, next, (, ), ;, boolean, ignoreStar, =, false, ;, int, lineStartChar, =, -]
[=, next, (, ), ;, boolean, ignoreStar, =, false, ;, int, lineStartChar, =, -, 1, ;, do, {, switch, (]
[;, boolean, ignoreStar, =, false, ;, int, lineStartChar, =, -, 1, ;, do, {, switch, (, token, ), {, case]
[false, ;, int, lineStartChar, =, -, 1, ;, do, {, switch, (, token, ), {, case, STAR, :, if, (]
[lineStartChar, =, -, 1, ;, do, {, switch, (, token, ), {, case, STAR, :, if, (, ignoreStar, ), {]
[-, 1, ;, do, {, switch, (, token, ), {, case, STAR, :, if, (, ignoreStar, ), {, lineStartChar, =]
[-, 1, ;, do, {, switch, (, token, ), {, case, STAR, :, if, (, ignoreStar, ), {, lineStartChar, =]
[-, 1, ;, do, {, switch, (, token, ), {, case, STAR, :, if, (, ignoreStar, ), {, lineStartChar, =]
[(, token, ), {, case, STAR, :, if, (, ignoreStar, ), {, lineStartChar, =, stream, ., getCharno, (, ), +]
[if, (, ignoreStar, ), {, lineStartChar, =, stream, ., getCharno, (, ), +, 1, ;, }, else, {, if, (]
[if, (, ignoreStar, ), {, lineStartChar, =, stream, ., getCharno, (, ), +, 1, ;, }, else, {, if, (]
[if, (, ignoreStar, ), {, lineStartChar, =, stream, ., getCharno, (, ), +, 1, ;, }, else, {, if, (]
[=, stream, ., getCharno, (, ), +, 1, ;, }, else, {, if, (, builder, ., length, (, ), >]
[getCharno, (, ), +, 1, ;, }, else, {, if, (, builder, ., length, (, ), >, 0, ), {]
[getCharno, (, ), +, 1, ;, }, else, {, if, (, builder, ., length, (, ), >, 0, ), {]
[1, ;, }, else, {, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (]
[{, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }]
[{, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }]
[., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (]
[>, 0, ), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }]
[), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }, token, =]
[), ;, }, builder, ., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case]
[., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, if, (]
[., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, if, (]
[(, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, if, (, option, !=]
[(, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, if, (, option, !=]
[token, =, next, (, ), ;, continue, ;, case, EOL, :, if, (, option, !=, WhitespaceOption, ., SINGLE_LINE, ), {]
[token, =, next, (, ), ;, continue, ;, case, EOL, :, if, (, option, !=, WhitespaceOption, ., SINGLE_LINE, ), {]
[), ;, continue, ;, case, EOL, :, if, (, option, !=, WhitespaceOption, ., SINGLE_LINE, ), {, builder, ., append, (]
[case, EOL, :, if, (, option, !=, WhitespaceOption, ., SINGLE_LINE, ), {, builder, ., append, (, "\n", ), ;, }]
[:, if, (, option, !=, WhitespaceOption, ., SINGLE_LINE, ), {, builder, ., append, (, "\n", ), ;, }, ignoreStar, =]
[(, option, !=, WhitespaceOption, ., SINGLE_LINE, ), {, builder, ., append, (, "\n", ), ;, }, ignoreStar, =, true, ;]
[!=, WhitespaceOption, ., SINGLE_LINE, ), {, builder, ., append, (, "\n", ), ;, }, ignoreStar, =, true, ;, lineStartChar, =]
[., SINGLE_LINE, ), {, builder, ., append, (, "\n", ), ;, }, ignoreStar, =, true, ;, lineStartChar, =, 0, ;]
[), {, builder, ., append, (, "\n", ), ;, }, ignoreStar, =, true, ;, lineStartChar, =, 0, ;, token, =]
[;, }, ignoreStar, =, true, ;, lineStartChar, =, 0, ;, token, =, next, (, ), ;, continue, ;, default, :]
[ignoreStar, =, true, ;, lineStartChar, =, 0, ;, token, =, next, (, ), ;, continue, ;, default, :, ignoreStar, =]
[true, ;, lineStartChar, =, 0, ;, token, =, next, (, ), ;, continue, ;, default, :, ignoreStar, =, false, ;]
[lineStartChar, =, 0, ;, token, =, next, (, ), ;, continue, ;, default, :, ignoreStar, =, false, ;, state, =]
[lineStartChar, =, 0, ;, token, =, next, (, ), ;, continue, ;, default, :, ignoreStar, =, false, ;, state, =]
[(, ), ;, continue, ;, default, :, ignoreStar, =, false, ;, state, =, State, ., SEARCHING_ANNOTATION, ;, boolean, isEOC, =]
[(, ), ;, continue, ;, default, :, ignoreStar, =, false, ;, state, =, State, ., SEARCHING_ANNOTATION, ;, boolean, isEOC, =]
[;, continue, ;, default, :, ignoreStar, =, false, ;, state, =, State, ., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==]
[;, continue, ;, default, :, ignoreStar, =, false, ;, state, =, State, ., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==]
[=, false, ;, state, =, State, ., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (]
[false, ;, state, =, State, ., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (, !]
[., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (]
[., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (]
[., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (]
[;, boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (, lineStartChar, !=]
[boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (, lineStartChar, !=, -]
[=, token, ==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (, lineStartChar, !=, -, 1, &&]
[=, token, ==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (, lineStartChar, !=, -, 1, &&]
[==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (, lineStartChar, !=, -, 1, &&, option, ==]
[==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (, lineStartChar, !=, -, 1, &&, option, ==]
[isEOC, ), {, if, (, lineStartChar, !=, -, 1, &&, option, ==, WhitespaceOption, ., PRESERVE, ), {, int, numSpaces, =]
[isEOC, ), {, if, (, lineStartChar, !=, -, 1, &&, option, ==, WhitespaceOption, ., PRESERVE, ), {, int, numSpaces, =]
[isEOC, ), {, if, (, lineStartChar, !=, -, 1, &&, option, ==, WhitespaceOption, ., PRESERVE, ), {, int, numSpaces, =]
[!=, -, 1, &&, option, ==, WhitespaceOption, ., PRESERVE, ), {, int, numSpaces, =, stream, ., getCharno, (, ), -]
[., PRESERVE, ), {, int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for, (, int, i, =]
[), {, int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for, (, int, i, =, 0, ;]
[), {, int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for, (, int, i, =, 0, ;]
[int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for, (, int, i, =, 0, ;, i, <]
[=, stream, ., getCharno, (, ), -, lineStartChar, ;, for, (, int, i, =, 0, ;, i, <, numSpaces, ;]
[=, stream, ., getCharno, (, ), -, lineStartChar, ;, for, (, int, i, =, 0, ;, i, <, numSpaces, ;]
[(, ), -, lineStartChar, ;, for, (, int, i, =, 0, ;, i, <, numSpaces, ;, i, ++, ), {]
[(, ), -, lineStartChar, ;, for, (, int, i, =, 0, ;, i, <, numSpaces, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, numSpaces, ;, i, ++, ), {, builder, ., append, (]
[i, =, 0, ;, i, <, numSpaces, ;, i, ++, ), {, builder, ., append, (, ' ', ), ;, }]
[0, ;, i, <, numSpaces, ;, i, ++, ), {, builder, ., append, (, ' ', ), ;, }, lineStartChar, =]
[;, i, <, numSpaces, ;, i, ++, ), {, builder, ., append, (, ' ', ), ;, }, lineStartChar, =, -]
[++, ), {, builder, ., append, (, ' ', ), ;, }, lineStartChar, =, -, 1, ;, }, else, if, (]
[++, ), {, builder, ., append, (, ' ', ), ;, }, lineStartChar, =, -, 1, ;, }, else, if, (]
[++, ), {, builder, ., append, (, ' ', ), ;, }, lineStartChar, =, -, 1, ;, }, else, if, (]
[(, ' ', ), ;, }, lineStartChar, =, -, 1, ;, }, else, if, (, builder, ., length, (, ), >]
[;, }, lineStartChar, =, -, 1, ;, }, else, if, (, builder, ., length, (, ), >, 0, ), {]
[;, }, lineStartChar, =, -, 1, ;, }, else, if, (, builder, ., length, (, ), >, 0, ), {]
[-, 1, ;, }, else, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (]
[builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, }, if, (]
[builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, }, if, (]
[builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, }, if, (]
[builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, }, if, (]
[length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, }, if, (, token, ==]
[length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, }, if, (, token, ==]
[0, ), {, builder, ., append, (, ' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||]
[0, ), {, builder, ., append, (, ' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||]
[{, builder, ., append, (, ' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==]
[{, builder, ., append, (, ' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==]
[(, ' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||]
[' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (]
[' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (]
[' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (]
[;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (, token, ==]
[;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (, token, ==]
[(, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&]
[(, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&]
[==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=]
[==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=]
[EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =]
[EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =]
[&&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (]
[&&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (]
[!=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=]
[!=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=]
[), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {]
[String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, multilineText, =]
[String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, multilineText, =]
[(, option, !=, WhitespaceOption, ., PRESERVE, ), {, multilineText, =, multilineText, ., trim, (, ), ;, }, int, endLineno, =]
[(, option, !=, WhitespaceOption, ., PRESERVE, ), {, multilineText, =, multilineText, ., trim, (, ), ;, }, int, endLineno, =]
[=, multilineText, ., trim, (, ), ;, }, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =]
[=, multilineText, ., trim, (, ), ;, }, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =]
[int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, if, (]
[int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, if, (]
[int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, if, (]
[(, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, if, (, multilineText, ., length, (, ), >]
[int, endCharno, =, stream, ., getCharno, (, ), ;, if, (, multilineText, ., length, (, ), >, 0, ), {]
[int, endCharno, =, stream, ., getCharno, (, ), ;, if, (, multilineText, ., length, (, ), >, 0, ), {]
[., getCharno, (, ), ;, if, (, multilineText, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (]
[(, ), ;, if, (, multilineText, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, multilineText, ,]
[;, if, (, multilineText, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, multilineText, ,, startLineno, ,]
[(, multilineText, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, multilineText, ,, startLineno, ,, startCharno, ,]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, multilineText, ,, startLineno, ,, startCharno, ,, endLineno, ,]
[0, ), {, jsdocBuilder, ., markText, (, multilineText, ,, startLineno, ,, startCharno, ,, endLineno, ,, endCharno, ), ;, }, return]
[jsdocBuilder, ., markText, (, multilineText, ,, startLineno, ,, startCharno, ,, endLineno, ,, endCharno, ), ;, }, return, new, ExtractionInfo, (]
[markText, (, multilineText, ,, startLineno, ,, startCharno, ,, endLineno, ,, endCharno, ), ;, }, return, new, ExtractionInfo, (, multilineText, ,]
[startLineno, ,, startCharno, ,, endLineno, ,, endCharno, ), ;, }, return, new, ExtractionInfo, (, multilineText, ,, token, ), ;, }]
[startLineno, ,, startCharno, ,, endLineno, ,, endCharno, ), ;, }, return, new, ExtractionInfo, (, multilineText, ,, token, ), ;, }]
[endLineno, ,, endCharno, ), ;, }, return, new, ExtractionInfo, (, multilineText, ,, token, ), ;, }, builder, ., append, (]
[endCharno, ), ;, }, return, new, ExtractionInfo, (, multilineText, ,, token, ), ;, }, builder, ., append, (, toString, (]
[return, new, ExtractionInfo, (, multilineText, ,, token, ), ;, }, builder, ., append, (, toString, (, token, ), ), ;]
[ExtractionInfo, (, multilineText, ,, token, ), ;, }, builder, ., append, (, toString, (, token, ), ), ;, line, =]
[ExtractionInfo, (, multilineText, ,, token, ), ;, }, builder, ., append, (, toString, (, token, ), ), ;, line, =]
[builder, ., append, (, toString, (, token, ), ), ;, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (]
[builder, ., append, (, toString, (, token, ), ), ;, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (]
[append, (, toString, (, token, ), ), ;, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=]
[append, (, toString, (, token, ), ), ;, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=]
[), ), ;, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {]
[;, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =]
[=, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =, trimEnd, (]
[(, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =, trimEnd, (, line, ), ;, }]
[(, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =, trimEnd, (, line, ), ;, }]
[(, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =, trimEnd, (, line, ), ;, }, builder, ., append, (]
[WhitespaceOption, ., PRESERVE, ), {, line, =, trimEnd, (, line, ), ;, }, builder, ., append, (, line, ), ;]
[PRESERVE, ), {, line, =, trimEnd, (, line, ), ;, }, builder, ., append, (, line, ), ;, token, =]
[), ;, }, builder, ., append, (, line, ), ;, token, =, next, (, ), ;, }, }, while, (]
[;, }, }, while, (, true, ), ;, }, private, ExtractionInfo, extractBlockComment, (, JsDocToken, token, ), {, StringBuilder, builder, =]
[}, private, ExtractionInfo, extractBlockComment, (, JsDocToken, token, ), {, StringBuilder, builder, =, new, StringBuilder, (, ), ;, boolean, ignoreStar, =]
[token, ), {, StringBuilder, builder, =, new, StringBuilder, (, ), ;, boolean, ignoreStar, =, true, ;, do, {, switch, (]
[builder, =, new, StringBuilder, (, ), ;, boolean, ignoreStar, =, true, ;, do, {, switch, (, token, ), {, case]
[StringBuilder, (, ), ;, boolean, ignoreStar, =, true, ;, do, {, switch, (, token, ), {, case, ANNOTATION, :, case]
[;, boolean, ignoreStar, =, true, ;, do, {, switch, (, token, ), {, case, ANNOTATION, :, case, EOC, :, case]
[=, true, ;, do, {, switch, (, token, ), {, case, ANNOTATION, :, case, EOC, :, case, EOF, :, return]
[do, {, switch, (, token, ), {, case, ANNOTATION, :, case, EOC, :, case, EOF, :, return, new, ExtractionInfo, (]
[do, {, switch, (, token, ), {, case, ANNOTATION, :, case, EOC, :, case, EOF, :, return, new, ExtractionInfo, (]
[do, {, switch, (, token, ), {, case, ANNOTATION, :, case, EOC, :, case, EOF, :, return, new, ExtractionInfo, (]
[case, EOC, :, case, EOF, :, return, new, ExtractionInfo, (, builder, ., toString, (, ), ., trim, (, ), ,]
[EOF, :, return, new, ExtractionInfo, (, builder, ., toString, (, ), ., trim, (, ), ,, token, ), ;, case]
[ExtractionInfo, (, builder, ., toString, (, ), ., trim, (, ), ,, token, ), ;, case, STAR, :, if, (]
[(, builder, ., toString, (, ), ., trim, (, ), ,, token, ), ;, case, STAR, :, if, (, !]
[), ., trim, (, ), ,, token, ), ;, case, STAR, :, if, (, !, ignoreStar, ), {, if, (]
[), ., trim, (, ), ,, token, ), ;, case, STAR, :, if, (, !, ignoreStar, ), {, if, (]
[), ., trim, (, ), ,, token, ), ;, case, STAR, :, if, (, !, ignoreStar, ), {, if, (]
[token, ), ;, case, STAR, :, if, (, !, ignoreStar, ), {, if, (, builder, ., length, (, ), >]
[case, STAR, :, if, (, !, ignoreStar, ), {, if, (, builder, ., length, (, ), >, 0, ), {]
[case, STAR, :, if, (, !, ignoreStar, ), {, if, (, builder, ., length, (, ), >, 0, ), {]
[(, !, ignoreStar, ), {, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (]
[{, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }]
[{, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }]
[., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (]
[>, 0, ), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }]
[), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }, token, =]
[), ;, }, builder, ., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case]
[}, builder, ., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :]
[., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, ignoreStar, =]
[(, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, ignoreStar, =, true, ;]
[(, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, ignoreStar, =, true, ;]
[}, token, =, next, (, ), ;, continue, ;, case, EOL, :, ignoreStar, =, true, ;, builder, ., append, (]
[next, (, ), ;, continue, ;, case, EOL, :, ignoreStar, =, true, ;, builder, ., append, (, '\n', ), ;]
[), ;, continue, ;, case, EOL, :, ignoreStar, =, true, ;, builder, ., append, (, '\n', ), ;, token, =]
[;, builder, ., append, (, '\n', ), ;, token, =, next, (, ), ;, continue, ;, default, :, if, (]
[;, builder, ., append, (, '\n', ), ;, token, =, next, (, ), ;, continue, ;, default, :, if, (]
[builder, ., append, (, '\n', ), ;, token, =, next, (, ), ;, continue, ;, default, :, if, (, !]
[append, (, '\n', ), ;, token, =, next, (, ), ;, continue, ;, default, :, if, (, !, ignoreStar, &&]
[append, (, '\n', ), ;, token, =, next, (, ), ;, continue, ;, default, :, if, (, !, ignoreStar, &&]
[append, (, '\n', ), ;, token, =, next, (, ), ;, continue, ;, default, :, if, (, !, ignoreStar, &&]
[=, next, (, ), ;, continue, ;, default, :, if, (, !, ignoreStar, &&, builder, ., length, (, ), >]
[), ;, continue, ;, default, :, if, (, !, ignoreStar, &&, builder, ., length, (, ), >, 0, ), {]
[), ;, continue, ;, default, :, if, (, !, ignoreStar, &&, builder, ., length, (, ), >, 0, ), {]
[default, :, if, (, !, ignoreStar, &&, builder, ., length, (, ), >, 0, ), {, builder, ., append, (]
[!, ignoreStar, &&, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }]
[&&, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =]
[., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =, false, ;]
[., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =, false, ;]
[>, 0, ), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =, false, ;, builder, ., append, (]
[), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =, false, ;, builder, ., append, (, toString, (]
[), ;, }, ignoreStar, =, false, ;, builder, ., append, (, toString, (, token, ), ), ;, String, line, =]
[), ;, }, ignoreStar, =, false, ;, builder, ., append, (, toString, (, token, ), ), ;, String, line, =]
[;, builder, ., append, (, toString, (, token, ), ), ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;]
[., append, (, toString, (, token, ), ), ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, line, =]
[(, toString, (, token, ), ), ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, line, =, trimEnd, (]
[token, ), ), ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, line, =, trimEnd, (, line, ), ;]
[token, ), ), ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, line, =, trimEnd, (, line, ), ;]
[String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, line, =, trimEnd, (, line, ), ;, builder, ., append, (]
[stream, ., getRemainingJSDocLine, (, ), ;, line, =, trimEnd, (, line, ), ;, builder, ., append, (, line, ), ;]
[getRemainingJSDocLine, (, ), ;, line, =, trimEnd, (, line, ), ;, builder, ., append, (, line, ), ;, token, =]
[line, ), ;, builder, ., append, (, line, ), ;, token, =, next, (, ), ;, }, }, while, (]
[}, }, while, (, true, ), ;, }, private, static, String, trimEnd, (, String, s, ), {, int, trimCount, =]
[true, ), ;, }, private, static, String, trimEnd, (, String, s, ), {, int, trimCount, =, 0, ;, while, (]
[true, ), ;, }, private, static, String, trimEnd, (, String, s, ), {, int, trimCount, =, 0, ;, while, (]
[;, }, private, static, String, trimEnd, (, String, s, ), {, int, trimCount, =, 0, ;, while, (, trimCount, <]
[;, }, private, static, String, trimEnd, (, String, s, ), {, int, trimCount, =, 0, ;, while, (, trimCount, <]
[{, int, trimCount, =, 0, ;, while, (, trimCount, <, s, ., length, (, ), ), {, char, ch, =]
[{, int, trimCount, =, 0, ;, while, (, trimCount, <, s, ., length, (, ), ), {, char, ch, =]
[0, ;, while, (, trimCount, <, s, ., length, (, ), ), {, char, ch, =, s, ., charAt, (]
[0, ;, while, (, trimCount, <, s, ., length, (, ), ), {, char, ch, =, s, ., charAt, (]
[0, ;, while, (, trimCount, <, s, ., length, (, ), ), {, char, ch, =, s, ., charAt, (]
[0, ;, while, (, trimCount, <, s, ., length, (, ), ), {, char, ch, =, s, ., charAt, (]
[s, ., length, (, ), ), {, char, ch, =, s, ., charAt, (, s, ., length, (, ), -]
[length, (, ), ), {, char, ch, =, s, ., charAt, (, s, ., length, (, ), -, trimCount, -]
[char, ch, =, s, ., charAt, (, s, ., length, (, ), -, trimCount, -, 1, ), ;, if, (]
[char, ch, =, s, ., charAt, (, s, ., length, (, ), -, trimCount, -, 1, ), ;, if, (]
[., charAt, (, s, ., length, (, ), -, trimCount, -, 1, ), ;, if, (, Character, ., isWhitespace, (]
[., length, (, ), -, trimCount, -, 1, ), ;, if, (, Character, ., isWhitespace, (, ch, ), ), {]
[., length, (, ), -, trimCount, -, 1, ), ;, if, (, Character, ., isWhitespace, (, ch, ), ), {]
[Character, ., isWhitespace, (, ch, ), ), {, trimCount, ++, ;, }, else, {, break, ;, }, }, if, (]
[Character, ., isWhitespace, (, ch, ), ), {, trimCount, ++, ;, }, else, {, break, ;, }, }, if, (]
[isWhitespace, (, ch, ), ), {, trimCount, ++, ;, }, else, {, break, ;, }, }, if, (, trimCount, ==]
[), {, trimCount, ++, ;, }, else, {, break, ;, }, }, if, (, trimCount, ==, 0, ), {, return]
[;, }, else, {, break, ;, }, }, if, (, trimCount, ==, 0, ), {, return, s, ;, }, return]
[;, }, else, {, break, ;, }, }, if, (, trimCount, ==, 0, ), {, return, s, ;, }, return]
[break, ;, }, }, if, (, trimCount, ==, 0, ), {, return, s, ;, }, return, s, ., substring, (]
[}, }, if, (, trimCount, ==, 0, ), {, return, s, ;, }, return, s, ., substring, (, 0, ,]
[}, }, if, (, trimCount, ==, 0, ), {, return, s, ;, }, return, s, ., substring, (, 0, ,]
[}, }, if, (, trimCount, ==, 0, ), {, return, s, ;, }, return, s, ., substring, (, 0, ,]
[0, ), {, return, s, ;, }, return, s, ., substring, (, 0, ,, s, ., length, (, ), -]
[s, ., length, (, ), -, trimCount, ), ;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken, token, ), {, if, (]
[s, ., length, (, ), -, trimCount, ), ;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken, token, ), {, if, (]
[length, (, ), -, trimCount, ), ;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken, token, ), {, if, (, token, ==]
[length, (, ), -, trimCount, ), ;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken, token, ), {, if, (, token, ==]
[), ;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC, ), {]
[JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =]
[), {, if, (, token, ==, JsDocToken, ., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTopLevelTypeExpression, (]
[., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (]
[., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (]
[), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeNode, !=]
[(, ), ;, Node, typeNode, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeNode, !=, null, ), {]
[parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (]
[(, next, (, ), ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !]
[(, ), ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (]
[(, ), ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (]
[typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {]
[null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (]
[;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {]
[., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return]
[(, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }, else, {, return]
[), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }, else, {, return, parseTypeExpression, (]
[;, }, else, {, return, parseTypeExpression, (, token, ), ;, }, }, private, Node, parseParamTypeExpressionAnnotation, (, JsDocToken, token, ), {]
[;, }, else, {, return, parseTypeExpression, (, token, ), ;, }, }, private, Node, parseParamTypeExpressionAnnotation, (, JsDocToken, token, ), {]
[return, parseTypeExpression, (, token, ), ;, }, }, private, Node, parseParamTypeExpressionAnnotation, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (]
[return, parseTypeExpression, (, token, ), ;, }, }, private, Node, parseParamTypeExpressionAnnotation, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (]
[(, token, ), ;, }, }, private, Node, parseParamTypeExpressionAnnotation, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==]
[(, token, ), ;, }, }, private, Node, parseParamTypeExpressionAnnotation, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==]
[}, private, Node, parseParamTypeExpressionAnnotation, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==, JsDocToken, ., LC, ), ;]
[), {, Preconditions, ., checkArgument, (, token, ==, JsDocToken, ., LC, ), ;, skipEOLs, (, ), ;, boolean, restArg, =]
[Preconditions, ., checkArgument, (, token, ==, JsDocToken, ., LC, ), ;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;]
[checkArgument, (, token, ==, JsDocToken, ., LC, ), ;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;, token, =]
[LC, ), ;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;, token, =, next, (, ), ;, if, (]
[LC, ), ;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;, token, =, next, (, ), ;, if, (]
[;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;, token, =, next, (, ), ;, if, (, token, ==]
[;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;, token, =, next, (, ), ;, if, (, token, ==]
[boolean, restArg, =, false, ;, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {]
[=, false, ;, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, token, =]
[(, ), ;, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, token, =, next, (, ), ;, if, (]
[(, ), ;, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, token, =, next, (, ), ;, if, (]
[;, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, token, =, next, (, ), ;, if, (, token, ==]
[;, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, token, =, next, (, ), ;, if, (, token, ==]
[., ELLIPSIS, ), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., RC, ), {, return]
[), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., RC, ), {, return, wrapNode, (]
[), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., RC, ), {, return, wrapNode, (]
[next, (, ), ;, if, (, token, ==, JsDocToken, ., RC, ), {, return, wrapNode, (, Token, ., ELLIPSIS, ,]
[next, (, ), ;, if, (, token, ==, JsDocToken, ., RC, ), {, return, wrapNode, (, Token, ., ELLIPSIS, ,]
[JsDocToken, ., RC, ), {, return, wrapNode, (, Token, ., ELLIPSIS, ,, IR, ., empty, (, ), ), ;, }]
[RC, ), {, return, wrapNode, (, Token, ., ELLIPSIS, ,, IR, ., empty, (, ), ), ;, }, restArg, =]
[Token, ., ELLIPSIS, ,, IR, ., empty, (, ), ), ;, }, restArg, =, true, ;, }, Node, typeNode, =]
[ELLIPSIS, ,, IR, ., empty, (, ), ), ;, }, restArg, =, true, ;, }, Node, typeNode, =, parseTopLevelTypeExpression, (]
[(, ), ), ;, }, restArg, =, true, ;, }, Node, typeNode, =, parseTopLevelTypeExpression, (, token, ), ;, if, (]
[(, ), ), ;, }, restArg, =, true, ;, }, Node, typeNode, =, parseTopLevelTypeExpression, (, token, ), ;, if, (]
[), ;, }, restArg, =, true, ;, }, Node, typeNode, =, parseTopLevelTypeExpression, (, token, ), ;, if, (, typeNode, !=]
[restArg, =, true, ;, }, Node, typeNode, =, parseTopLevelTypeExpression, (, token, ), ;, if, (, typeNode, !=, null, ), {]
[typeNode, =, parseTopLevelTypeExpression, (, token, ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (]
[(, token, ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, restArg, ), {]
[), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, restArg, ), {, typeNode, =]
[if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, restArg, ), {, typeNode, =, wrapNode, (]
[if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, restArg, ), {, typeNode, =, wrapNode, (]
[null, ), {, skipEOLs, (, ), ;, if, (, restArg, ), {, typeNode, =, wrapNode, (, Token, ., ELLIPSIS, ,]
[if, (, restArg, ), {, typeNode, =, wrapNode, (, Token, ., ELLIPSIS, ,, typeNode, ), ;, }, else, if, (]
[restArg, ), {, typeNode, =, wrapNode, (, Token, ., ELLIPSIS, ,, typeNode, ), ;, }, else, if, (, match, (]
[restArg, ), {, typeNode, =, wrapNode, (, Token, ., ELLIPSIS, ,, typeNode, ), ;, }, else, if, (, match, (]
[(, Token, ., ELLIPSIS, ,, typeNode, ), ;, }, else, if, (, match, (, JsDocToken, ., EQUALS, ), ), {]
[,, typeNode, ), ;, }, else, if, (, match, (, JsDocToken, ., EQUALS, ), ), {, next, (, ), ;]
[}, else, if, (, match, (, JsDocToken, ., EQUALS, ), ), {, next, (, ), ;, skipEOLs, (, ), ;]
[if, (, match, (, JsDocToken, ., EQUALS, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, typeNode, =]
[match, (, JsDocToken, ., EQUALS, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, typeNode, =, wrapNode, (]
[match, (, JsDocToken, ., EQUALS, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, typeNode, =, wrapNode, (]
[EQUALS, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, typeNode, =, wrapNode, (, Token, ., EQUALS, ,]
[), ;, skipEOLs, (, ), ;, typeNode, =, wrapNode, (, Token, ., EQUALS, ,, typeNode, ), ;, }, if, (]
[;, skipEOLs, (, ), ;, typeNode, =, wrapNode, (, Token, ., EQUALS, ,, typeNode, ), ;, }, if, (, !]
[(, ), ;, typeNode, =, wrapNode, (, Token, ., EQUALS, ,, typeNode, ), ;, }, if, (, !, match, (]
[(, ), ;, typeNode, =, wrapNode, (, Token, ., EQUALS, ,, typeNode, ), ;, }, if, (, !, match, (]
[(, Token, ., EQUALS, ,, typeNode, ), ;, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {]
[., EQUALS, ,, typeNode, ), ;, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (]
[}, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {]
[., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return]
[next, (, ), ;, }, }, return, typeNode, ;, }, private, Node, parseTypeNameAnnotation, (, JsDocToken, token, ), {, if, (]
[next, (, ), ;, }, }, return, typeNode, ;, }, private, Node, parseTypeNameAnnotation, (, JsDocToken, token, ), {, if, (]
[), ;, }, }, return, typeNode, ;, }, private, Node, parseTypeNameAnnotation, (, JsDocToken, token, ), {, if, (, token, ==]
[), ;, }, }, return, typeNode, ;, }, private, Node, parseTypeNameAnnotation, (, JsDocToken, token, ), {, if, (, token, ==]
[typeNode, ;, }, private, Node, parseTypeNameAnnotation, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC, ), {]
[JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =]
[), {, if, (, token, ==, JsDocToken, ., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTypeName, (]
[., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTypeName, (, next, (, ), ), ;, if, (]
[., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTypeName, (, next, (, ), ), ;, if, (]
[), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTypeName, (, next, (, ), ), ;, if, (, typeNode, !=]
[(, ), ;, Node, typeNode, =, parseTypeName, (, next, (, ), ), ;, if, (, typeNode, !=, null, ), {]
[parseTypeName, (, next, (, ), ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (]
[(, next, (, ), ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !]
[(, ), ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (]
[(, ), ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (]
[typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {]
[null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (]
[;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {]
[., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return]
[(, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }, else, {, return]
[), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }, else, {, return, parseTypeName, (]
[{, return, parseTypeName, (, token, ), ;, }, }, private, Node, parseTopLevelTypeExpression, (, JsDocToken, token, ), {, Node, typeExpr, =]
[parseTypeName, (, token, ), ;, }, }, private, Node, parseTopLevelTypeExpression, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTypeExpression, (]
[}, }, private, Node, parseTopLevelTypeExpression, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTypeExpression, (, token, ), ;, if, (]
[}, }, private, Node, parseTopLevelTypeExpression, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTypeExpression, (, token, ), ;, if, (]
[private, Node, parseTopLevelTypeExpression, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTypeExpression, (, token, ), ;, if, (, typeExpr, !=]
[token, ), {, Node, typeExpr, =, parseTypeExpression, (, token, ), ;, if, (, typeExpr, !=, null, ), {, if, (]
[{, Node, typeExpr, =, parseTypeExpression, (, token, ), ;, if, (, typeExpr, !=, null, ), {, if, (, match, (]
[{, Node, typeExpr, =, parseTypeExpression, (, token, ), ;, if, (, typeExpr, !=, null, ), {, if, (, match, (]
[token, ), ;, if, (, typeExpr, !=, null, ), {, if, (, match, (, JsDocToken, ., PIPE, ), ), {]
[!=, null, ), {, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, if, (]
[), {, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, if, (, match, (]
[), {, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, if, (, match, (]
[JsDocToken, ., PIPE, ), ), {, next, (, ), ;, if, (, match, (, JsDocToken, ., PIPE, ), ), {]
[{, next, (, ), ;, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, }]
[;, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (, ), ;]
[(, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =]
[PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, return]
[), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, return, parseUnionTypeWithAlternate, (]
[next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, return, parseUnionTypeWithAlternate, (, token, ,]
[(, ), ;, token, =, next, (, ), ;, return, parseUnionTypeWithAlternate, (, token, ,, typeExpr, ), ;, }, }, return]
[typeExpr, ), ;, }, }, return, typeExpr, ;, }, private, Node, parseTypeExpressionList, (, JsDocToken, token, ), {, Node, typeExpr, =]
[;, }, }, return, typeExpr, ;, }, private, Node, parseTypeExpressionList, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTopLevelTypeExpression, (]
[;, }, private, Node, parseTypeExpressionList, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTopLevelTypeExpression, (, token, ), ;, if, (]
[;, }, private, Node, parseTypeExpressionList, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTopLevelTypeExpression, (, token, ), ;, if, (]
[private, Node, parseTypeExpressionList, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTopLevelTypeExpression, (, token, ), ;, if, (, typeExpr, ==]
[JsDocToken, token, ), {, Node, typeExpr, =, parseTopLevelTypeExpression, (, token, ), ;, if, (, typeExpr, ==, null, ), {, return]
[=, parseTopLevelTypeExpression, (, token, ), ;, if, (, typeExpr, ==, null, ), {, return, null, ;, }, Node, typeList, =]
[=, parseTopLevelTypeExpression, (, token, ), ;, if, (, typeExpr, ==, null, ), {, return, null, ;, }, Node, typeList, =]
[if, (, typeExpr, ==, null, ), {, return, null, ;, }, Node, typeList, =, IR, ., block, (, ), ;]
[if, (, typeExpr, ==, null, ), {, return, null, ;, }, Node, typeList, =, IR, ., block, (, ), ;]
[null, ), {, return, null, ;, }, Node, typeList, =, IR, ., block, (, ), ;, typeList, ., addChildToBack, (]
[;, }, Node, typeList, =, IR, ., block, (, ), ;, typeList, ., addChildToBack, (, typeExpr, ), ;, while, (]
[Node, typeList, =, IR, ., block, (, ), ;, typeList, ., addChildToBack, (, typeExpr, ), ;, while, (, match, (]
[Node, typeList, =, IR, ., block, (, ), ;, typeList, ., addChildToBack, (, typeExpr, ), ;, while, (, match, (]
[(, ), ;, typeList, ., addChildToBack, (, typeExpr, ), ;, while, (, match, (, JsDocToken, ., COMMA, ), ), {]
[., addChildToBack, (, typeExpr, ), ;, while, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;]
[), ;, while, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;, skipEOLs, (, ), ;]
[while, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, typeExpr, =]
[match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, typeExpr, =, parseTopLevelTypeExpression, (]
[{, next, (, ), ;, skipEOLs, (, ), ;, typeExpr, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (]
[{, next, (, ), ;, skipEOLs, (, ), ;, typeExpr, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (]
[(, ), ;, skipEOLs, (, ), ;, typeExpr, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeExpr, ==]
[(, ), ;, typeExpr, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeExpr, ==, null, ), {, return]
[typeExpr, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeExpr, ==, null, ), {, return, null, ;, }]
[typeExpr, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeExpr, ==, null, ), {, return, null, ;, }]
[next, (, ), ), ;, if, (, typeExpr, ==, null, ), {, return, null, ;, }, typeList, ., addChildToBack, (]
[if, (, typeExpr, ==, null, ), {, return, null, ;, }, typeList, ., addChildToBack, (, typeExpr, ), ;, }, return]
[addChildToBack, (, typeExpr, ), ;, }, return, typeList, ;, }, private, Node, parseTypeExpression, (, JsDocToken, token, ), {, if, (]
[addChildToBack, (, typeExpr, ), ;, }, return, typeList, ;, }, private, Node, parseTypeExpression, (, JsDocToken, token, ), {, if, (]
[typeExpr, ), ;, }, return, typeList, ;, }, private, Node, parseTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==]
[typeExpr, ), ;, }, return, typeList, ;, }, private, Node, parseTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==]
[typeList, ;, }, private, Node, parseTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., QMARK, ), {]
[}, private, Node, parseTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., QMARK, ), {, token, =]
[token, ), {, if, (, token, ==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (]
[token, ), {, if, (, token, ==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (]
[token, ), {, if, (, token, ==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (]
[token, ), {, if, (, token, ==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (]
[token, ), {, if, (, token, ==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (]
[token, ), {, if, (, token, ==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (]
[token, ), {, if, (, token, ==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (]
[token, ), {, if, (, token, ==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (]
[{, if, (, token, ==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (, token, ==]
[{, if, (, token, ==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (, token, ==]
[==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||]
[==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||]
[., QMARK, ), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==]
[., QMARK, ), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==]
[token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||]
[token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||]
[next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token, ==]
[next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token, ==]
[if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||]
[if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||]
[token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==]
[token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==]
[COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||]
[COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||]
[token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==]
[token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==]
[EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||]
[EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||]
[token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==]
[token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==]
[RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||]
[RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||]
[token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token, ==]
[token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token, ==]
[||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {]
[==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (]
[||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return]
[==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (]
[==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (]
[JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, ., QMARK, ), ;, }, return]
[GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, ., QMARK, ), ;, }, return, wrapNode, (]
[GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, ., QMARK, ), ;, }, return, wrapNode, (]
[(, token, ), ;, return, newNode, (, Token, ., QMARK, ), ;, }, return, wrapNode, (, Token, ., QMARK, ,]
[), ;, return, newNode, (, Token, ., QMARK, ), ;, }, return, wrapNode, (, Token, ., QMARK, ,, parseBasicTypeExpression, (]
[), ;, }, return, wrapNode, (, Token, ., QMARK, ,, parseBasicTypeExpression, (, token, ), ), ;, }, else, if, (]
[), ;, }, return, wrapNode, (, Token, ., QMARK, ,, parseBasicTypeExpression, (, token, ), ), ;, }, else, if, (]
[}, return, wrapNode, (, Token, ., QMARK, ,, parseBasicTypeExpression, (, token, ), ), ;, }, else, if, (, token, ==]
[}, return, wrapNode, (, Token, ., QMARK, ,, parseBasicTypeExpression, (, token, ), ), ;, }, else, if, (, token, ==]
[QMARK, ,, parseBasicTypeExpression, (, token, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., BANG, ), {, return]
[parseBasicTypeExpression, (, token, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., BANG, ), {, return, wrapNode, (]
[parseBasicTypeExpression, (, token, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., BANG, ), {, return, wrapNode, (]
[), ;, }, else, if, (, token, ==, JsDocToken, ., BANG, ), {, return, wrapNode, (, Token, ., BANG, ,]
[}, else, if, (, token, ==, JsDocToken, ., BANG, ), {, return, wrapNode, (, Token, ., BANG, ,, parseBasicTypeExpression, (]
[wrapNode, (, Token, ., BANG, ,, parseBasicTypeExpression, (, next, (, ), ), ), ;, }, else, {, Node, basicTypeExpr, =]
[Token, ., BANG, ,, parseBasicTypeExpression, (, next, (, ), ), ), ;, }, else, {, Node, basicTypeExpr, =, parseBasicTypeExpression, (]
[(, next, (, ), ), ), ;, }, else, {, Node, basicTypeExpr, =, parseBasicTypeExpression, (, token, ), ;, if, (]
[(, next, (, ), ), ), ;, }, else, {, Node, basicTypeExpr, =, parseBasicTypeExpression, (, token, ), ;, if, (]
[(, ), ), ), ;, }, else, {, Node, basicTypeExpr, =, parseBasicTypeExpression, (, token, ), ;, if, (, basicTypeExpr, !=]
[}, else, {, Node, basicTypeExpr, =, parseBasicTypeExpression, (, token, ), ;, if, (, basicTypeExpr, !=, null, ), {, if, (]
[{, Node, basicTypeExpr, =, parseBasicTypeExpression, (, token, ), ;, if, (, basicTypeExpr, !=, null, ), {, if, (, match, (]
[{, Node, basicTypeExpr, =, parseBasicTypeExpression, (, token, ), ;, if, (, basicTypeExpr, !=, null, ), {, if, (, match, (]
[token, ), ;, if, (, basicTypeExpr, !=, null, ), {, if, (, match, (, JsDocToken, ., QMARK, ), ), {]
[basicTypeExpr, !=, null, ), {, if, (, match, (, JsDocToken, ., QMARK, ), ), {, next, (, ), ;, return]
[null, ), {, if, (, match, (, JsDocToken, ., QMARK, ), ), {, next, (, ), ;, return, wrapNode, (]
[null, ), {, if, (, match, (, JsDocToken, ., QMARK, ), ), {, next, (, ), ;, return, wrapNode, (]
[(, match, (, JsDocToken, ., QMARK, ), ), {, next, (, ), ;, return, wrapNode, (, Token, ., QMARK, ,]
[), {, next, (, ), ;, return, wrapNode, (, Token, ., QMARK, ,, basicTypeExpr, ), ;, }, else, if, (]
[next, (, ), ;, return, wrapNode, (, Token, ., QMARK, ,, basicTypeExpr, ), ;, }, else, if, (, match, (]
[next, (, ), ;, return, wrapNode, (, Token, ., QMARK, ,, basicTypeExpr, ), ;, }, else, if, (, match, (]
[(, Token, ., QMARK, ,, basicTypeExpr, ), ;, }, else, if, (, match, (, JsDocToken, ., BANG, ), ), {]
[basicTypeExpr, ), ;, }, else, if, (, match, (, JsDocToken, ., BANG, ), ), {, next, (, ), ;, return]
[;, }, else, if, (, match, (, JsDocToken, ., BANG, ), ), {, next, (, ), ;, return, wrapNode, (]
[;, }, else, if, (, match, (, JsDocToken, ., BANG, ), ), {, next, (, ), ;, return, wrapNode, (]
[(, match, (, JsDocToken, ., BANG, ), ), {, next, (, ), ;, return, wrapNode, (, Token, ., BANG, ,]
[), ), {, next, (, ), ;, return, wrapNode, (, Token, ., BANG, ,, basicTypeExpr, ), ;, }, }, return]
[basicTypeExpr, ), ;, }, }, return, basicTypeExpr, ;, }, }, private, Node, parseBasicTypeExpression, (, JsDocToken, token, ), {, if, (]
[basicTypeExpr, ), ;, }, }, return, basicTypeExpr, ;, }, }, private, Node, parseBasicTypeExpression, (, JsDocToken, token, ), {, if, (]
[;, }, }, return, basicTypeExpr, ;, }, }, private, Node, parseBasicTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==]
[;, }, }, return, basicTypeExpr, ;, }, }, private, Node, parseBasicTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==]
[}, }, private, Node, parseBasicTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., STAR, ), {, return]
[private, Node, parseBasicTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., STAR, ), {, return, newNode, (]
[private, Node, parseBasicTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., STAR, ), {, return, newNode, (]
[(, token, ==, JsDocToken, ., STAR, ), {, return, newNode, (, Token, ., STAR, ), ;, }, else, if, (]
[(, token, ==, JsDocToken, ., STAR, ), {, return, newNode, (, Token, ., STAR, ), ;, }, else, if, (]
[==, JsDocToken, ., STAR, ), {, return, newNode, (, Token, ., STAR, ), ;, }, else, if, (, token, ==]
[==, JsDocToken, ., STAR, ), {, return, newNode, (, Token, ., STAR, ), ;, }, else, if, (, token, ==]
[{, return, newNode, (, Token, ., STAR, ), ;, }, else, if, (, token, ==, JsDocToken, ., LB, ), {]
[., STAR, ), ;, }, else, if, (, token, ==, JsDocToken, ., LB, ), {, skipEOLs, (, ), ;, return]
[), ;, }, else, if, (, token, ==, JsDocToken, ., LB, ), {, skipEOLs, (, ), ;, return, parseArrayType, (]
[., LB, ), {, skipEOLs, (, ), ;, return, parseArrayType, (, next, (, ), ), ;, }, else, if, (]
[., LB, ), {, skipEOLs, (, ), ;, return, parseArrayType, (, next, (, ), ), ;, }, else, if, (]
[), {, skipEOLs, (, ), ;, return, parseArrayType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[), {, skipEOLs, (, ), ;, return, parseArrayType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[;, return, parseArrayType, (, next, (, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., LC, ), {]
[(, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., LC, ), {, skipEOLs, (, ), ;, return]
[), ;, }, else, if, (, token, ==, JsDocToken, ., LC, ), {, skipEOLs, (, ), ;, return, parseRecordType, (]
[., LC, ), {, skipEOLs, (, ), ;, return, parseRecordType, (, next, (, ), ), ;, }, else, if, (]
[., LC, ), {, skipEOLs, (, ), ;, return, parseRecordType, (, next, (, ), ), ;, }, else, if, (]
[), {, skipEOLs, (, ), ;, return, parseRecordType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[), {, skipEOLs, (, ), ;, return, parseRecordType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[;, return, parseRecordType, (, next, (, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., LP, ), {]
[(, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., LP, ), {, skipEOLs, (, ), ;, return]
[), ;, }, else, if, (, token, ==, JsDocToken, ., LP, ), {, skipEOLs, (, ), ;, return, parseUnionType, (]
[., LP, ), {, skipEOLs, (, ), ;, return, parseUnionType, (, next, (, ), ), ;, }, else, if, (]
[., LP, ), {, skipEOLs, (, ), ;, return, parseUnionType, (, next, (, ), ), ;, }, else, if, (]
[), {, skipEOLs, (, ), ;, return, parseUnionType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[), {, skipEOLs, (, ), ;, return, parseUnionType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[(, next, (, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., STRING, ), {, String, string, =]
[(, next, (, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., STRING, ), {, String, string, =]
[if, (, token, ==, JsDocToken, ., STRING, ), {, String, string, =, stream, ., getString, (, ), ;, if, (]
[if, (, token, ==, JsDocToken, ., STRING, ), {, String, string, =, stream, ., getString, (, ), ;, if, (]
[JsDocToken, ., STRING, ), {, String, string, =, stream, ., getString, (, ), ;, if, (, "function", ., equals, (]
[{, String, string, =, stream, ., getString, (, ), ;, if, (, "function", ., equals, (, string, ), ), {]
[., getString, (, ), ;, if, (, "function", ., equals, (, string, ), ), {, skipEOLs, (, ), ;, return]
[(, ), ;, if, (, "function", ., equals, (, string, ), ), {, skipEOLs, (, ), ;, return, parseFunctionType, (]
[string, ), ), {, skipEOLs, (, ), ;, return, parseFunctionType, (, next, (, ), ), ;, }, else, if, (]
[string, ), ), {, skipEOLs, (, ), ;, return, parseFunctionType, (, next, (, ), ), ;, }, else, if, (]
[string, ), ), {, skipEOLs, (, ), ;, return, parseFunctionType, (, next, (, ), ), ;, }, else, if, (]
[skipEOLs, (, ), ;, return, parseFunctionType, (, next, (, ), ), ;, }, else, if, (, "null", ., equals, (]
[;, return, parseFunctionType, (, next, (, ), ), ;, }, else, if, (, "null", ., equals, (, string, ), ||]
[;, return, parseFunctionType, (, next, (, ), ), ;, }, else, if, (, "null", ., equals, (, string, ), ||]
[next, (, ), ), ;, }, else, if, (, "null", ., equals, (, string, ), ||, "undefined", ., equals, (]
[}, else, if, (, "null", ., equals, (, string, ), ||, "undefined", ., equals, (, string, ), ), {, return]
[if, (, "null", ., equals, (, string, ), ||, "undefined", ., equals, (, string, ), ), {, return, newStringNode, (]
[), ||, "undefined", ., equals, (, string, ), ), {, return, newStringNode, (, string, ), ;, }, else, {, return]
["undefined", ., equals, (, string, ), ), {, return, newStringNode, (, string, ), ;, }, else, {, return, parseTypeName, (]
[), ), {, return, newStringNode, (, string, ), ;, }, else, {, return, parseTypeName, (, token, ), ;, }, }]
[{, return, newStringNode, (, string, ), ;, }, else, {, return, parseTypeName, (, token, ), ;, }, }, restoreLookAhead, (]
[string, ), ;, }, else, {, return, parseTypeName, (, token, ), ;, }, }, restoreLookAhead, (, token, ), ;, return]
[(, token, ), ;, return, reportGenericTypeSyntaxWarning, (, ), ;, }, private, Node, parseTypeName, (, JsDocToken, token, ), {, if, (]
[(, token, ), ;, return, reportGenericTypeSyntaxWarning, (, ), ;, }, private, Node, parseTypeName, (, JsDocToken, token, ), {, if, (]
[), ;, return, reportGenericTypeSyntaxWarning, (, ), ;, }, private, Node, parseTypeName, (, JsDocToken, token, ), {, if, (, token, !=]
[), ;, return, reportGenericTypeSyntaxWarning, (, ), ;, }, private, Node, parseTypeName, (, JsDocToken, token, ), {, if, (, token, !=]
[;, }, private, Node, parseTypeName, (, JsDocToken, token, ), {, if, (, token, !=, JsDocToken, ., STRING, ), {, return]
[), {, if, (, token, !=, JsDocToken, ., STRING, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, String, typeName, =]
[), {, if, (, token, !=, JsDocToken, ., STRING, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, String, typeName, =]
[), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, String, typeName, =, stream, ., getString, (, ), ;, int, lineno, =]
[), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, String, typeName, =, stream, ., getString, (, ), ;, int, lineno, =]
[typeName, =, stream, ., getString, (, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =]
[typeName, =, stream, ., getString, (, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =]
[int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), ;, while, (]
[int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), ;, while, (]
[=, stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), ;, while, (, match, (]
[=, stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), ;, while, (, match, (]
[), ;, int, charno, =, stream, ., getCharno, (, ), ;, while, (, match, (, JsDocToken, ., EOL, ), &&]
[), ;, int, charno, =, stream, ., getCharno, (, ), ;, while, (, match, (, JsDocToken, ., EOL, ), &&]
[), ;, int, charno, =, stream, ., getCharno, (, ), ;, while, (, match, (, JsDocToken, ., EOL, ), &&]
[=, stream, ., getCharno, (, ), ;, while, (, match, (, JsDocToken, ., EOL, ), &&, typeName, ., charAt, (]
[=, stream, ., getCharno, (, ), ;, while, (, match, (, JsDocToken, ., EOL, ), &&, typeName, ., charAt, (]
[=, stream, ., getCharno, (, ), ;, while, (, match, (, JsDocToken, ., EOL, ), &&, typeName, ., charAt, (]
[;, while, (, match, (, JsDocToken, ., EOL, ), &&, typeName, ., charAt, (, typeName, ., length, (, ), -]
[match, (, JsDocToken, ., EOL, ), &&, typeName, ., charAt, (, typeName, ., length, (, ), -, 1, ), ==]
[., EOL, ), &&, typeName, ., charAt, (, typeName, ., length, (, ), -, 1, ), ==, '.', ), {]
[charAt, (, typeName, ., length, (, ), -, 1, ), ==, '.', ), {, skipEOLs, (, ), ;, if, (]
[typeName, ., length, (, ), -, 1, ), ==, '.', ), {, skipEOLs, (, ), ;, if, (, match, (]
[typeName, ., length, (, ), -, 1, ), ==, '.', ), {, skipEOLs, (, ), ;, if, (, match, (]
[1, ), ==, '.', ), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), ), {]
[), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), ), {, next, (, ), ;]
[skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), ), {, next, (, ), ;, typeName, +=]
[skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), ), {, next, (, ), ;, typeName, +=]
[), ), {, next, (, ), ;, typeName, +=, stream, ., getString, (, ), ;, }, }, Node, typeNameNode, =]
[{, next, (, ), ;, typeName, +=, stream, ., getString, (, ), ;, }, }, Node, typeNameNode, =, newStringNode, (]
[(, ), ;, typeName, +=, stream, ., getString, (, ), ;, }, }, Node, typeNameNode, =, newStringNode, (, typeName, ,]
[;, typeName, +=, stream, ., getString, (, ), ;, }, }, Node, typeNameNode, =, newStringNode, (, typeName, ,, lineno, ,]
[getString, (, ), ;, }, }, Node, typeNameNode, =, newStringNode, (, typeName, ,, lineno, ,, charno, ), ;, if, (]
[), ;, }, }, Node, typeNameNode, =, newStringNode, (, typeName, ,, lineno, ,, charno, ), ;, if, (, match, (]
[), ;, }, }, Node, typeNameNode, =, newStringNode, (, typeName, ,, lineno, ,, charno, ), ;, if, (, match, (]
[=, newStringNode, (, typeName, ,, lineno, ,, charno, ), ;, if, (, match, (, JsDocToken, ., LT, ), ), {]
[,, lineno, ,, charno, ), ;, if, (, match, (, JsDocToken, ., LT, ), ), {, next, (, ), ;]
[(, match, (, JsDocToken, ., LT, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node, memberType, =]
[(, JsDocToken, ., LT, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node, memberType, =, parseTypeExpressionList, (]
[next, (, ), ;, skipEOLs, (, ), ;, Node, memberType, =, parseTypeExpressionList, (, next, (, ), ), ;, if, (]
[next, (, ), ;, skipEOLs, (, ), ;, Node, memberType, =, parseTypeExpressionList, (, next, (, ), ), ;, if, (]
[), ;, skipEOLs, (, ), ;, Node, memberType, =, parseTypeExpressionList, (, next, (, ), ), ;, if, (, memberType, !=]
[(, ), ;, Node, memberType, =, parseTypeExpressionList, (, next, (, ), ), ;, if, (, memberType, !=, null, ), {]
[(, ), ;, Node, memberType, =, parseTypeExpressionList, (, next, (, ), ), ;, if, (, memberType, !=, null, ), {]
[memberType, =, parseTypeExpressionList, (, next, (, ), ), ;, if, (, memberType, !=, null, ), {, typeNameNode, ., addChildToFront, (]
[(, next, (, ), ), ;, if, (, memberType, !=, null, ), {, typeNameNode, ., addChildToFront, (, memberType, ), ;]
[if, (, memberType, !=, null, ), {, typeNameNode, ., addChildToFront, (, memberType, ), ;, skipEOLs, (, ), ;, if, (]
[(, memberType, !=, null, ), {, typeNameNode, ., addChildToFront, (, memberType, ), ;, skipEOLs, (, ), ;, if, (, !]
[!=, null, ), {, typeNameNode, ., addChildToFront, (, memberType, ), ;, skipEOLs, (, ), ;, if, (, !, match, (]
[!=, null, ), {, typeNameNode, ., addChildToFront, (, memberType, ), ;, skipEOLs, (, ), ;, if, (, !, match, (]
[(, memberType, ), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., GT, ), ), {, return]
[), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., GT, ), ), {, return, reportTypeSyntaxWarning, (]
[), ;, if, (, !, match, (, JsDocToken, ., GT, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.gt", ), ;, }]
[JsDocToken, ., GT, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.gt", ), ;, }, next, (, ), ;, }, }, return]
[next, (, ), ;, }, }, return, typeNameNode, ;, }, private, Node, parseFunctionType, (, JsDocToken, token, ), {, if, (]
[next, (, ), ;, }, }, return, typeNameNode, ;, }, private, Node, parseFunctionType, (, JsDocToken, token, ), {, if, (]
[), ;, }, }, return, typeNameNode, ;, }, private, Node, parseFunctionType, (, JsDocToken, token, ), {, if, (, token, !=]
[), ;, }, }, return, typeNameNode, ;, }, private, Node, parseFunctionType, (, JsDocToken, token, ), {, if, (, token, !=]
[typeNameNode, ;, }, private, Node, parseFunctionType, (, JsDocToken, token, ), {, if, (, token, !=, JsDocToken, ., LP, ), {]
[}, private, Node, parseFunctionType, (, JsDocToken, token, ), {, if, (, token, !=, JsDocToken, ., LP, ), {, restoreLookAhead, (]
[(, JsDocToken, token, ), {, if, (, token, !=, JsDocToken, ., LP, ), {, restoreLookAhead, (, token, ), ;, return]
[token, ), {, if, (, token, !=, JsDocToken, ., LP, ), {, restoreLookAhead, (, token, ), ;, return, reportTypeSyntaxWarning, (]
[JsDocToken, ., LP, ), {, restoreLookAhead, (, token, ), ;, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lp", ), ;, }, Node, functionType, =]
[LP, ), {, restoreLookAhead, (, token, ), ;, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lp", ), ;, }, Node, functionType, =, newNode, (]
[LP, ), {, restoreLookAhead, (, token, ), ;, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lp", ), ;, }, Node, functionType, =, newNode, (]
[return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lp", ), ;, }, Node, functionType, =, newNode, (, Token, ., FUNCTION, ), ;, Node, parameters, =]
[(, "msg.jsdoc.missing.lp", ), ;, }, Node, functionType, =, newNode, (, Token, ., FUNCTION, ), ;, Node, parameters, =, null, ;]
[functionType, =, newNode, (, Token, ., FUNCTION, ), ;, Node, parameters, =, null, ;, skipEOLs, (, ), ;, if, (]
[=, newNode, (, Token, ., FUNCTION, ), ;, Node, parameters, =, null, ;, skipEOLs, (, ), ;, if, (, !]
[(, Token, ., FUNCTION, ), ;, Node, parameters, =, null, ;, skipEOLs, (, ), ;, if, (, !, match, (]
[(, Token, ., FUNCTION, ), ;, Node, parameters, =, null, ;, skipEOLs, (, ), ;, if, (, !, match, (]
[Node, parameters, =, null, ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {]
[=, null, ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, token, =]
[if, (, !, match, (, JsDocToken, ., RP, ), ), {, token, =, next, (, ), ;, boolean, hasParams, =]
[(, JsDocToken, ., RP, ), ), {, token, =, next, (, ), ;, boolean, hasParams, =, true, ;, if, (]
[(, JsDocToken, ., RP, ), ), {, token, =, next, (, ), ;, boolean, hasParams, =, true, ;, if, (]
[., RP, ), ), {, token, =, next, (, ), ;, boolean, hasParams, =, true, ;, if, (, token, ==]
[., RP, ), ), {, token, =, next, (, ), ;, boolean, hasParams, =, true, ;, if, (, token, ==]
[(, ), ;, boolean, hasParams, =, true, ;, if, (, token, ==, JsDocToken, ., STRING, ), {, String, tokenStr, =]
[(, ), ;, boolean, hasParams, =, true, ;, if, (, token, ==, JsDocToken, ., STRING, ), {, String, tokenStr, =]
[(, token, ==, JsDocToken, ., STRING, ), {, String, tokenStr, =, stream, ., getString, (, ), ;, boolean, isThis, =]
[(, token, ==, JsDocToken, ., STRING, ), {, String, tokenStr, =, stream, ., getString, (, ), ;, boolean, isThis, =]
[., STRING, ), {, String, tokenStr, =, stream, ., getString, (, ), ;, boolean, isThis, =, "this", ., equals, (]
[=, stream, ., getString, (, ), ;, boolean, isThis, =, "this", ., equals, (, tokenStr, ), ;, boolean, isNew, =]
[=, stream, ., getString, (, ), ;, boolean, isThis, =, "this", ., equals, (, tokenStr, ), ;, boolean, isNew, =]
[(, ), ;, boolean, isThis, =, "this", ., equals, (, tokenStr, ), ;, boolean, isNew, =, "new", ., equals, (]
[=, "this", ., equals, (, tokenStr, ), ;, boolean, isNew, =, "new", ., equals, (, tokenStr, ), ;, if, (]
[=, "this", ., equals, (, tokenStr, ), ;, boolean, isNew, =, "new", ., equals, (, tokenStr, ), ;, if, (]
[., equals, (, tokenStr, ), ;, boolean, isNew, =, "new", ., equals, (, tokenStr, ), ;, if, (, isThis, ||]
[;, boolean, isNew, =, "new", ., equals, (, tokenStr, ), ;, if, (, isThis, ||, isNew, ), {, if, (]
[isNew, =, "new", ., equals, (, tokenStr, ), ;, if, (, isThis, ||, isNew, ), {, if, (, match, (]
[isNew, =, "new", ., equals, (, tokenStr, ), ;, if, (, isThis, ||, isNew, ), {, if, (, match, (]
[tokenStr, ), ;, if, (, isThis, ||, isNew, ), {, if, (, match, (, JsDocToken, ., COLON, ), ), {]
[(, isThis, ||, isNew, ), {, if, (, match, (, JsDocToken, ., COLON, ), ), {, next, (, ), ;]
[(, match, (, JsDocToken, ., COLON, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node, contextType, =]
[(, JsDocToken, ., COLON, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node, contextType, =, wrapNode, (]
[(, JsDocToken, ., COLON, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node, contextType, =, wrapNode, (]
[., COLON, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node, contextType, =, wrapNode, (, isThis, ?]
[., COLON, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node, contextType, =, wrapNode, (, isThis, ?]
[{, next, (, ), ;, skipEOLs, (, ), ;, Node, contextType, =, wrapNode, (, isThis, ?, Token, ., THIS, :]
[{, next, (, ), ;, skipEOLs, (, ), ;, Node, contextType, =, wrapNode, (, isThis, ?, Token, ., THIS, :]
[;, skipEOLs, (, ), ;, Node, contextType, =, wrapNode, (, isThis, ?, Token, ., THIS, :, Token, ., NEW, ,]
[(, ), ;, Node, contextType, =, wrapNode, (, isThis, ?, Token, ., THIS, :, Token, ., NEW, ,, parseTypeName, (]
[isThis, ?, Token, ., THIS, :, Token, ., NEW, ,, parseTypeName, (, next, (, ), ), ), ;, if, (]
[isThis, ?, Token, ., THIS, :, Token, ., NEW, ,, parseTypeName, (, next, (, ), ), ), ;, if, (]
[Token, ., THIS, :, Token, ., NEW, ,, parseTypeName, (, next, (, ), ), ), ;, if, (, contextType, ==]
[Token, ., NEW, ,, parseTypeName, (, next, (, ), ), ), ;, if, (, contextType, ==, null, ), {, return]
[,, parseTypeName, (, next, (, ), ), ), ;, if, (, contextType, ==, null, ), {, return, null, ;, }]
[,, parseTypeName, (, next, (, ), ), ), ;, if, (, contextType, ==, null, ), {, return, null, ;, }]
[(, ), ), ), ;, if, (, contextType, ==, null, ), {, return, null, ;, }, functionType, ., addChildToFront, (]
[contextType, ==, null, ), {, return, null, ;, }, functionType, ., addChildToFront, (, contextType, ), ;, }, else, {, return]
[null, ), {, return, null, ;, }, functionType, ., addChildToFront, (, contextType, ), ;, }, else, {, return, reportTypeSyntaxWarning, (]
[}, functionType, ., addChildToFront, (, contextType, ), ;, }, else, {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.colon", ), ;, }, if, (]
[., addChildToFront, (, contextType, ), ;, }, else, {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.colon", ), ;, }, if, (, match, (]
[., addChildToFront, (, contextType, ), ;, }, else, {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.colon", ), ;, }, if, (, match, (]
[}, else, {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.colon", ), ;, }, if, (, match, (, JsDocToken, ., COMMA, ), ), {]
[reportTypeSyntaxWarning, (, "msg.jsdoc.missing.colon", ), ;, }, if, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;]
[;, }, if, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;, skipEOLs, (, ), ;]
[if, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =]
[), ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, else, {]
[{, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, else, {, hasParams, =]
[), ;, token, =, next, (, ), ;, }, else, {, hasParams, =, false, ;, }, }, }, if, (]
[=, next, (, ), ;, }, else, {, hasParams, =, false, ;, }, }, }, if, (, hasParams, ), {]
[(, ), ;, }, else, {, hasParams, =, false, ;, }, }, }, if, (, hasParams, ), {, parameters, =]
[;, }, else, {, hasParams, =, false, ;, }, }, }, if, (, hasParams, ), {, parameters, =, parseParametersType, (]
[=, false, ;, }, }, }, if, (, hasParams, ), {, parameters, =, parseParametersType, (, token, ), ;, if, (]
[=, false, ;, }, }, }, if, (, hasParams, ), {, parameters, =, parseParametersType, (, token, ), ;, if, (]
[;, }, }, }, if, (, hasParams, ), {, parameters, =, parseParametersType, (, token, ), ;, if, (, parameters, ==]
[if, (, hasParams, ), {, parameters, =, parseParametersType, (, token, ), ;, if, (, parameters, ==, null, ), {, return]
[parseParametersType, (, token, ), ;, if, (, parameters, ==, null, ), {, return, null, ;, }, }, }, if, (]
[parseParametersType, (, token, ), ;, if, (, parameters, ==, null, ), {, return, null, ;, }, }, }, if, (]
[token, ), ;, if, (, parameters, ==, null, ), {, return, null, ;, }, }, }, if, (, parameters, !=]
[if, (, parameters, ==, null, ), {, return, null, ;, }, }, }, if, (, parameters, !=, null, ), {]
[if, (, parameters, ==, null, ), {, return, null, ;, }, }, }, if, (, parameters, !=, null, ), {]
[null, ), {, return, null, ;, }, }, }, if, (, parameters, !=, null, ), {, functionType, ., addChildToBack, (]
[null, ;, }, }, }, if, (, parameters, !=, null, ), {, functionType, ., addChildToBack, (, parameters, ), ;, }]
[(, parameters, !=, null, ), {, functionType, ., addChildToBack, (, parameters, ), ;, }, skipEOLs, (, ), ;, if, (]
[parameters, !=, null, ), {, functionType, ., addChildToBack, (, parameters, ), ;, }, skipEOLs, (, ), ;, if, (, !]
[null, ), {, functionType, ., addChildToBack, (, parameters, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (]
[null, ), {, functionType, ., addChildToBack, (, parameters, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (]
[parameters, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return]
[;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning, (]
[), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }]
[JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, skipEOLs, (, ), ;, Node, resultType, =]
[RP, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, skipEOLs, (, ), ;, Node, resultType, =, parseResultType, (]
["msg.jsdoc.missing.rp", ), ;, }, skipEOLs, (, ), ;, Node, resultType, =, parseResultType, (, next, (, ), ), ;, if, (]
["msg.jsdoc.missing.rp", ), ;, }, skipEOLs, (, ), ;, Node, resultType, =, parseResultType, (, next, (, ), ), ;, if, (]
[;, }, skipEOLs, (, ), ;, Node, resultType, =, parseResultType, (, next, (, ), ), ;, if, (, resultType, ==]
[), ;, Node, resultType, =, parseResultType, (, next, (, ), ), ;, if, (, resultType, ==, null, ), {, return]
[parseResultType, (, next, (, ), ), ;, if, (, resultType, ==, null, ), {, return, null, ;, }, else, {]
[parseResultType, (, next, (, ), ), ;, if, (, resultType, ==, null, ), {, return, null, ;, }, else, {]
[), ), ;, if, (, resultType, ==, null, ), {, return, null, ;, }, else, {, functionType, ., addChildToBack, (]
[resultType, ==, null, ), {, return, null, ;, }, else, {, functionType, ., addChildToBack, (, resultType, ), ;, }, return]
[(, resultType, ), ;, }, return, functionType, ;, }, private, Node, parseParametersType, (, JsDocToken, token, ), {, Node, paramsType, =]
[), ;, }, return, functionType, ;, }, private, Node, parseParametersType, (, JsDocToken, token, ), {, Node, paramsType, =, newNode, (]
[), ;, }, return, functionType, ;, }, private, Node, parseParametersType, (, JsDocToken, token, ), {, Node, paramsType, =, newNode, (]
[Node, parseParametersType, (, JsDocToken, token, ), {, Node, paramsType, =, newNode, (, Token, ., PARAM_LIST, ), ;, boolean, isVarArgs, =]
[), {, Node, paramsType, =, newNode, (, Token, ., PARAM_LIST, ), ;, boolean, isVarArgs, =, false, ;, Node, paramType, =]
[=, newNode, (, Token, ., PARAM_LIST, ), ;, boolean, isVarArgs, =, false, ;, Node, paramType, =, null, ;, if, (]
[=, newNode, (, Token, ., PARAM_LIST, ), ;, boolean, isVarArgs, =, false, ;, Node, paramType, =, null, ;, if, (]
[(, Token, ., PARAM_LIST, ), ;, boolean, isVarArgs, =, false, ;, Node, paramType, =, null, ;, if, (, token, !=]
[(, Token, ., PARAM_LIST, ), ;, boolean, isVarArgs, =, false, ;, Node, paramType, =, null, ;, if, (, token, !=]
[false, ;, Node, paramType, =, null, ;, if, (, token, !=, JsDocToken, ., RP, ), {, do, {, if, (]
[false, ;, Node, paramType, =, null, ;, if, (, token, !=, JsDocToken, ., RP, ), {, do, {, if, (]
[Node, paramType, =, null, ;, if, (, token, !=, JsDocToken, ., RP, ), {, do, {, if, (, paramType, !=]
[null, ;, if, (, token, !=, JsDocToken, ., RP, ), {, do, {, if, (, paramType, !=, null, ), {]
[token, !=, JsDocToken, ., RP, ), {, do, {, if, (, paramType, !=, null, ), {, next, (, ), ;]
[RP, ), {, do, {, if, (, paramType, !=, null, ), {, next, (, ), ;, skipEOLs, (, ), ;]
[{, do, {, if, (, paramType, !=, null, ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =]
[null, ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (]
[null, ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (]
[{, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token, ==]
[{, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token, ==]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {]
[next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, skipEOLs, (, ), ;, if, (]
[), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, skipEOLs, (, ), ;, if, (, match, (]
[), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, skipEOLs, (, ), ;, if, (, match, (]
[==, JsDocToken, ., ELLIPSIS, ), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., RP, ), ), {]
[., ELLIPSIS, ), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., RP, ), ), {, paramType, =]
[), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., RP, ), ), {, paramType, =, newNode, (]
[), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., RP, ), ), {, paramType, =, newNode, (]
[match, (, JsDocToken, ., RP, ), ), {, paramType, =, newNode, (, Token, ., ELLIPSIS, ), ;, }, else, {]
[), {, paramType, =, newNode, (, Token, ., ELLIPSIS, ), ;, }, else, {, skipEOLs, (, ), ;, if, (]
[{, paramType, =, newNode, (, Token, ., ELLIPSIS, ), ;, }, else, {, skipEOLs, (, ), ;, if, (, !]
[=, newNode, (, Token, ., ELLIPSIS, ), ;, }, else, {, skipEOLs, (, ), ;, if, (, !, match, (]
[=, newNode, (, Token, ., ELLIPSIS, ), ;, }, else, {, skipEOLs, (, ), ;, if, (, !, match, (]
[;, }, else, {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., LB, ), ), {, return]
[else, {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., LB, ), ), {, return, reportTypeSyntaxWarning, (]
[), ;, if, (, !, match, (, JsDocToken, ., LB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lb", ), ;, }]
[!, match, (, JsDocToken, ., LB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lb", ), ;, }, next, (, ), ;]
[., LB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lb", ), ;, }, next, (, ), ;, skipEOLs, (, ), ;]
[), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lb", ), ;, }, next, (, ), ;, skipEOLs, (, ), ;, paramType, =]
[{, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lb", ), ;, }, next, (, ), ;, skipEOLs, (, ), ;, paramType, =, wrapNode, (]
[{, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lb", ), ;, }, next, (, ), ;, skipEOLs, (, ), ;, paramType, =, wrapNode, (]
["msg.jsdoc.missing.lb", ), ;, }, next, (, ), ;, skipEOLs, (, ), ;, paramType, =, wrapNode, (, Token, ., ELLIPSIS, ,]
[;, }, next, (, ), ;, skipEOLs, (, ), ;, paramType, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (]
[skipEOLs, (, ), ;, paramType, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;]
[wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, skipEOLs, (, ), ;, if, (]
[(, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, skipEOLs, (, ), ;, if, (, !]
[., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, skipEOLs, (, ), ;, if, (, !, match, (]
[., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, skipEOLs, (, ), ;, if, (, !, match, (]
[), ), ), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return]
[), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (]
[), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }]
[!, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, skipEOLs, (, ), ;]
[RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, skipEOLs, (, ), ;, next, (, ), ;, }]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, skipEOLs, (, ), ;, next, (, ), ;, }, isVarArgs, =]
["msg.jsdoc.missing.rb", ), ;, }, skipEOLs, (, ), ;, next, (, ), ;, }, isVarArgs, =, true, ;, }, else, {]
[;, }, skipEOLs, (, ), ;, next, (, ), ;, }, isVarArgs, =, true, ;, }, else, {, paramType, =]
[skipEOLs, (, ), ;, next, (, ), ;, }, isVarArgs, =, true, ;, }, else, {, paramType, =, parseTypeExpression, (]
[(, ), ;, }, isVarArgs, =, true, ;, }, else, {, paramType, =, parseTypeExpression, (, token, ), ;, if, (]
[;, }, isVarArgs, =, true, ;, }, else, {, paramType, =, parseTypeExpression, (, token, ), ;, if, (, match, (]
[;, }, isVarArgs, =, true, ;, }, else, {, paramType, =, parseTypeExpression, (, token, ), ;, if, (, match, (]
[}, else, {, paramType, =, parseTypeExpression, (, token, ), ;, if, (, match, (, JsDocToken, ., EQUALS, ), ), {]
[=, parseTypeExpression, (, token, ), ;, if, (, match, (, JsDocToken, ., EQUALS, ), ), {, skipEOLs, (, ), ;]
[), ;, if, (, match, (, JsDocToken, ., EQUALS, ), ), {, skipEOLs, (, ), ;, next, (, ), ;]
[if, (, match, (, JsDocToken, ., EQUALS, ), ), {, skipEOLs, (, ), ;, next, (, ), ;, paramType, =]
[match, (, JsDocToken, ., EQUALS, ), ), {, skipEOLs, (, ), ;, next, (, ), ;, paramType, =, wrapNode, (]
[match, (, JsDocToken, ., EQUALS, ), ), {, skipEOLs, (, ), ;, next, (, ), ;, paramType, =, wrapNode, (]
[EQUALS, ), ), {, skipEOLs, (, ), ;, next, (, ), ;, paramType, =, wrapNode, (, Token, ., EQUALS, ,]
[;, next, (, ), ;, paramType, =, wrapNode, (, Token, ., EQUALS, ,, paramType, ), ;, }, }, if, (]
[;, next, (, ), ;, paramType, =, wrapNode, (, Token, ., EQUALS, ,, paramType, ), ;, }, }, if, (]
[(, ), ;, paramType, =, wrapNode, (, Token, ., EQUALS, ,, paramType, ), ;, }, }, if, (, paramType, ==]
[=, wrapNode, (, Token, ., EQUALS, ,, paramType, ), ;, }, }, if, (, paramType, ==, null, ), {, return]
[Token, ., EQUALS, ,, paramType, ), ;, }, }, if, (, paramType, ==, null, ), {, return, null, ;, }]
[Token, ., EQUALS, ,, paramType, ), ;, }, }, if, (, paramType, ==, null, ), {, return, null, ;, }]
[paramType, ), ;, }, }, if, (, paramType, ==, null, ), {, return, null, ;, }, paramsType, ., addChildToBack, (]
[if, (, paramType, ==, null, ), {, return, null, ;, }, paramsType, ., addChildToBack, (, paramType, ), ;, if, (]
[;, }, paramsType, ., addChildToBack, (, paramType, ), ;, if, (, isVarArgs, ), {, break, ;, }, }, while, (]
[paramsType, ., addChildToBack, (, paramType, ), ;, if, (, isVarArgs, ), {, break, ;, }, }, while, (, match, (]
[paramsType, ., addChildToBack, (, paramType, ), ;, if, (, isVarArgs, ), {, break, ;, }, }, while, (, match, (]
[isVarArgs, ), {, break, ;, }, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;, }, if, (]
[isVarArgs, ), {, break, ;, }, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;, }, if, (]
[{, break, ;, }, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;, }, if, (, isVarArgs, &&]
[;, }, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;, }, if, (, isVarArgs, &&, match, (]
[;, }, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;, }, if, (, isVarArgs, &&, match, (]
[JsDocToken, ., COMMA, ), ), ;, }, if, (, isVarArgs, &&, match, (, JsDocToken, ., COMMA, ), ), {, return]
[COMMA, ), ), ;, }, if, (, isVarArgs, &&, match, (, JsDocToken, ., COMMA, ), ), {, return, reportTypeSyntaxWarning, (]
[if, (, isVarArgs, &&, match, (, JsDocToken, ., COMMA, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.function.varargs", ), ;, }, return]
[{, return, reportTypeSyntaxWarning, (, "msg.jsdoc.function.varargs", ), ;, }, return, paramsType, ;, }, private, Node, parseResultType, (, JsDocToken, token, ), {]
[;, }, return, paramsType, ;, }, private, Node, parseResultType, (, JsDocToken, token, ), {, skipEOLs, (, ), ;, if, (]
[}, return, paramsType, ;, }, private, Node, parseResultType, (, JsDocToken, token, ), {, skipEOLs, (, ), ;, if, (, !]
[paramsType, ;, }, private, Node, parseResultType, (, JsDocToken, token, ), {, skipEOLs, (, ), ;, if, (, !, match, (]
[paramsType, ;, }, private, Node, parseResultType, (, JsDocToken, token, ), {, skipEOLs, (, ), ;, if, (, !, match, (]
[JsDocToken, token, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COLON, ), ), {, return]
[), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COLON, ), ), {, return, newNode, (]
[), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COLON, ), ), {, return, newNode, (]
[if, (, !, match, (, JsDocToken, ., COLON, ), ), {, return, newNode, (, Token, ., EMPTY, ), ;, }]
[!, match, (, JsDocToken, ., COLON, ), ), {, return, newNode, (, Token, ., EMPTY, ), ;, }, token, =]
[., COLON, ), ), {, return, newNode, (, Token, ., EMPTY, ), ;, }, token, =, next, (, ), ;]
[newNode, (, Token, ., EMPTY, ), ;, }, token, =, next, (, ), ;, skipEOLs, (, ), ;, if, (]
[newNode, (, Token, ., EMPTY, ), ;, }, token, =, next, (, ), ;, skipEOLs, (, ), ;, if, (]
[Token, ., EMPTY, ), ;, }, token, =, next, (, ), ;, skipEOLs, (, ), ;, if, (, match, (]
[Token, ., EMPTY, ), ;, }, token, =, next, (, ), ;, skipEOLs, (, ), ;, if, (, match, (]
[}, token, =, next, (, ), ;, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), &&]
[}, token, =, next, (, ), ;, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), &&]
[(, ), ;, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), &&, "void", ., equals, (]
[(, ), ;, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), &&, "void", ., equals, (]
[(, match, (, JsDocToken, ., STRING, ), &&, "void", ., equals, (, stream, ., getString, (, ), ), ), {]
[STRING, ), &&, "void", ., equals, (, stream, ., getString, (, ), ), ), {, next, (, ), ;, return]
[&&, "void", ., equals, (, stream, ., getString, (, ), ), ), {, next, (, ), ;, return, newNode, (]
[&&, "void", ., equals, (, stream, ., getString, (, ), ), ), {, next, (, ), ;, return, newNode, (]
[), ), ), {, next, (, ), ;, return, newNode, (, Token, ., VOID, ), ;, }, else, {, return]
[), {, next, (, ), ;, return, newNode, (, Token, ., VOID, ), ;, }, else, {, return, parseTypeExpression, (]
[{, return, parseTypeExpression, (, next, (, ), ), ;, }, }, private, Node, parseUnionType, (, JsDocToken, token, ), {, return]
[parseTypeExpression, (, next, (, ), ), ;, }, }, private, Node, parseUnionType, (, JsDocToken, token, ), {, return, parseUnionTypeWithAlternate, (]
[next, (, ), ), ;, }, }, private, Node, parseUnionType, (, JsDocToken, token, ), {, return, parseUnionTypeWithAlternate, (, token, ,]
[token, ,, null, ), ;, }, private, Node, parseUnionTypeWithAlternate, (, JsDocToken, token, ,, Node, alternate, ), {, Node, union, =]
[null, ), ;, }, private, Node, parseUnionTypeWithAlternate, (, JsDocToken, token, ,, Node, alternate, ), {, Node, union, =, newNode, (]
[null, ), ;, }, private, Node, parseUnionTypeWithAlternate, (, JsDocToken, token, ,, Node, alternate, ), {, Node, union, =, newNode, (]
[(, JsDocToken, token, ,, Node, alternate, ), {, Node, union, =, newNode, (, Token, ., PIPE, ), ;, if, (]
[(, JsDocToken, token, ,, Node, alternate, ), {, Node, union, =, newNode, (, Token, ., PIPE, ), ;, if, (]
[token, ,, Node, alternate, ), {, Node, union, =, newNode, (, Token, ., PIPE, ), ;, if, (, alternate, !=]
[alternate, ), {, Node, union, =, newNode, (, Token, ., PIPE, ), ;, if, (, alternate, !=, null, ), {]
[alternate, ), {, Node, union, =, newNode, (, Token, ., PIPE, ), ;, if, (, alternate, !=, null, ), {]
[union, =, newNode, (, Token, ., PIPE, ), ;, if, (, alternate, !=, null, ), {, union, ., addChildToBack, (]
[), ;, if, (, alternate, !=, null, ), {, union, ., addChildToBack, (, alternate, ), ;, }, Node, expr, =]
[null, ), {, union, ., addChildToBack, (, alternate, ), ;, }, Node, expr, =, null, ;, do, {, if, (]
[null, ), {, union, ., addChildToBack, (, alternate, ), ;, }, Node, expr, =, null, ;, do, {, if, (]
[{, union, ., addChildToBack, (, alternate, ), ;, }, Node, expr, =, null, ;, do, {, if, (, expr, !=]
[addChildToBack, (, alternate, ), ;, }, Node, expr, =, null, ;, do, {, if, (, expr, !=, null, ), {]
[;, }, Node, expr, =, null, ;, do, {, if, (, expr, !=, null, ), {, skipEOLs, (, ), ;]
[Node, expr, =, null, ;, do, {, if, (, expr, !=, null, ), {, skipEOLs, (, ), ;, token, =]
[;, do, {, if, (, expr, !=, null, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[;, do, {, if, (, expr, !=, null, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[(, expr, !=, null, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (]
[(, expr, !=, null, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (]
[(, expr, !=, null, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (]
[!=, null, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (, token, ==]
[!=, null, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (, token, ==]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (, token, ==, JsDocToken, ., PIPE, ||]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (, token, ==, JsDocToken, ., PIPE, ||]
[), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (, token, ==, JsDocToken, ., PIPE, ||, token, ==]
[), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (, token, ==, JsDocToken, ., PIPE, ||, token, ==]
[Preconditions, ., checkState, (, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =]
[Preconditions, ., checkState, (, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =]
[checkState, (, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==]
[checkState, (, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==]
[PIPE, ||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (]
[PIPE, ||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (]
[token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe, &&]
[JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe, &&, match, (]
[JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe, &&, match, (]
[isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe, &&, match, (, JsDocToken, ., PIPE, ), ), {]
[., PIPE, ;, if, (, isPipe, &&, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, }]
[(, isPipe, &&, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (, ), ;]
[&&, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =]
[PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, }]
[), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, expr, =]
[next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, expr, =, parseTypeExpression, (]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, }, expr, =, parseTypeExpression, (, token, ), ;, if, (]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, }, expr, =, parseTypeExpression, (, token, ), ;, if, (]
[), ;, token, =, next, (, ), ;, }, expr, =, parseTypeExpression, (, token, ), ;, if, (, expr, ==]
[next, (, ), ;, }, expr, =, parseTypeExpression, (, token, ), ;, if, (, expr, ==, null, ), {, return]
[;, }, expr, =, parseTypeExpression, (, token, ), ;, if, (, expr, ==, null, ), {, return, null, ;, }]
[;, }, expr, =, parseTypeExpression, (, token, ), ;, if, (, expr, ==, null, ), {, return, null, ;, }]
[parseTypeExpression, (, token, ), ;, if, (, expr, ==, null, ), {, return, null, ;, }, union, ., addChildToBack, (]
[(, expr, ==, null, ), {, return, null, ;, }, union, ., addChildToBack, (, expr, ), ;, }, while, (]
[==, null, ), {, return, null, ;, }, union, ., addChildToBack, (, expr, ), ;, }, while, (, match, (]
[==, null, ), {, return, null, ;, }, union, ., addChildToBack, (, expr, ), ;, }, while, (, match, (]
[return, null, ;, }, union, ., addChildToBack, (, expr, ), ;, }, while, (, match, (, JsDocToken, ., PIPE, ,]
[return, null, ;, }, union, ., addChildToBack, (, expr, ), ;, }, while, (, match, (, JsDocToken, ., PIPE, ,]
[expr, ), ;, }, while, (, match, (, JsDocToken, ., PIPE, ,, JsDocToken, ., COMMA, ), ), ;, if, (]
[expr, ), ;, }, while, (, match, (, JsDocToken, ., PIPE, ,, JsDocToken, ., COMMA, ), ), ;, if, (]
[;, }, while, (, match, (, JsDocToken, ., PIPE, ,, JsDocToken, ., COMMA, ), ), ;, if, (, alternate, ==]
[(, match, (, JsDocToken, ., PIPE, ,, JsDocToken, ., COMMA, ), ), ;, if, (, alternate, ==, null, ), {]
[,, JsDocToken, ., COMMA, ), ), ;, if, (, alternate, ==, null, ), {, skipEOLs, (, ), ;, if, (]
[JsDocToken, ., COMMA, ), ), ;, if, (, alternate, ==, null, ), {, skipEOLs, (, ), ;, if, (, !]
[COMMA, ), ), ;, if, (, alternate, ==, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (]
[COMMA, ), ), ;, if, (, alternate, ==, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (]
[==, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return]
[), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning, (]
[), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }]
[(, JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, next, (, ), ;, }, return]
[next, (, ), ;, }, return, union, ;, }, private, Node, parseArrayType, (, JsDocToken, token, ), {, Node, array, =]
[), ;, }, return, union, ;, }, private, Node, parseArrayType, (, JsDocToken, token, ), {, Node, array, =, newNode, (]
[), ;, }, return, union, ;, }, private, Node, parseArrayType, (, JsDocToken, token, ), {, Node, array, =, newNode, (]
[Node, parseArrayType, (, JsDocToken, token, ), {, Node, array, =, newNode, (, Token, ., LB, ), ;, Node, arg, =]
[), {, Node, array, =, newNode, (, Token, ., LB, ), ;, Node, arg, =, null, ;, boolean, hasVarArgs, =]
[(, Token, ., LB, ), ;, Node, arg, =, null, ;, boolean, hasVarArgs, =, false, ;, do, {, if, (]
[(, Token, ., LB, ), ;, Node, arg, =, null, ;, boolean, hasVarArgs, =, false, ;, do, {, if, (]
[., LB, ), ;, Node, arg, =, null, ;, boolean, hasVarArgs, =, false, ;, do, {, if, (, arg, !=]
[;, Node, arg, =, null, ;, boolean, hasVarArgs, =, false, ;, do, {, if, (, arg, !=, null, ), {]
[null, ;, boolean, hasVarArgs, =, false, ;, do, {, if, (, arg, !=, null, ), {, next, (, ), ;]
[=, false, ;, do, {, if, (, arg, !=, null, ), {, next, (, ), ;, skipEOLs, (, ), ;]
[;, do, {, if, (, arg, !=, null, ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =]
[null, ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (]
[null, ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (]
[{, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token, ==]
[{, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token, ==]
[skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {]
[), ;, token, =, next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, arg, =]
[token, =, next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, arg, =, wrapNode, (]
[token, =, next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, arg, =, wrapNode, (]
[), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, arg, =, wrapNode, (, Token, ., ELLIPSIS, ,]
[}, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, arg, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (]
[., ELLIPSIS, ), {, arg, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;]
[), {, arg, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, hasVarArgs, =]
[(, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, hasVarArgs, =, true, ;, }, else, {]
[., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, hasVarArgs, =, true, ;, }, else, {, arg, =]
[,, parseTypeExpression, (, next, (, ), ), ), ;, hasVarArgs, =, true, ;, }, else, {, arg, =, parseTypeExpression, (]
[), ), ;, hasVarArgs, =, true, ;, }, else, {, arg, =, parseTypeExpression, (, token, ), ;, }, if, (]
[), ), ;, hasVarArgs, =, true, ;, }, else, {, arg, =, parseTypeExpression, (, token, ), ;, }, if, (]
[;, hasVarArgs, =, true, ;, }, else, {, arg, =, parseTypeExpression, (, token, ), ;, }, if, (, arg, ==]
[;, }, else, {, arg, =, parseTypeExpression, (, token, ), ;, }, if, (, arg, ==, null, ), {, return]
[{, arg, =, parseTypeExpression, (, token, ), ;, }, if, (, arg, ==, null, ), {, return, null, ;, }]
[{, arg, =, parseTypeExpression, (, token, ), ;, }, if, (, arg, ==, null, ), {, return, null, ;, }]
[(, token, ), ;, }, if, (, arg, ==, null, ), {, return, null, ;, }, array, ., addChildToBack, (]
[if, (, arg, ==, null, ), {, return, null, ;, }, array, ., addChildToBack, (, arg, ), ;, if, (]
[{, return, null, ;, }, array, ., addChildToBack, (, arg, ), ;, if, (, hasVarArgs, ), {, break, ;, }]
[addChildToBack, (, arg, ), ;, if, (, hasVarArgs, ), {, break, ;, }, skipEOLs, (, ), ;, }, while, (]
[arg, ), ;, if, (, hasVarArgs, ), {, break, ;, }, skipEOLs, (, ), ;, }, while, (, match, (]
[arg, ), ;, if, (, hasVarArgs, ), {, break, ;, }, skipEOLs, (, ), ;, }, while, (, match, (]
[break, ;, }, skipEOLs, (, ), ;, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;, if, (]
[;, }, skipEOLs, (, ), ;, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;, if, (, !]
[skipEOLs, (, ), ;, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;, if, (, !, match, (]
[skipEOLs, (, ), ;, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;, if, (, !, match, (]
[match, (, JsDocToken, ., COMMA, ), ), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return]
[JsDocToken, ., COMMA, ), ), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (]
[), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }]
[match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, next, (, ), ;, return]
[}, next, (, ), ;, return, array, ;, }, private, Node, parseRecordType, (, JsDocToken, token, ), {, Node, recordType, =]
[(, ), ;, return, array, ;, }, private, Node, parseRecordType, (, JsDocToken, token, ), {, Node, recordType, =, newNode, (]
[(, ), ;, return, array, ;, }, private, Node, parseRecordType, (, JsDocToken, token, ), {, Node, recordType, =, newNode, (]
[Node, parseRecordType, (, JsDocToken, token, ), {, Node, recordType, =, newNode, (, Token, ., LC, ), ;, Node, fieldTypeList, =]
[(, JsDocToken, token, ), {, Node, recordType, =, newNode, (, Token, ., LC, ), ;, Node, fieldTypeList, =, parseFieldTypeList, (]
[Node, recordType, =, newNode, (, Token, ., LC, ), ;, Node, fieldTypeList, =, parseFieldTypeList, (, token, ), ;, if, (]
[Node, recordType, =, newNode, (, Token, ., LC, ), ;, Node, fieldTypeList, =, parseFieldTypeList, (, token, ), ;, if, (]
[=, newNode, (, Token, ., LC, ), ;, Node, fieldTypeList, =, parseFieldTypeList, (, token, ), ;, if, (, fieldTypeList, ==]
[., LC, ), ;, Node, fieldTypeList, =, parseFieldTypeList, (, token, ), ;, if, (, fieldTypeList, ==, null, ), {, return]
[fieldTypeList, =, parseFieldTypeList, (, token, ), ;, if, (, fieldTypeList, ==, null, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }]
[;, if, (, fieldTypeList, ==, null, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, skipEOLs, (, ), ;, if, (]
[if, (, fieldTypeList, ==, null, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, skipEOLs, (, ), ;, if, (, !]
[fieldTypeList, ==, null, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (]
[fieldTypeList, ==, null, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (]
[(, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, return]
[;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, return, reportTypeSyntaxWarning, (]
[), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }]
[!, match, (, JsDocToken, ., RC, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, next, (, ), ;]
[!, match, (, JsDocToken, ., RC, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, next, (, ), ;]
[., RC, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, next, (, ), ;, recordType, ., addChildToBack, (]
[{, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, next, (, ), ;, recordType, ., addChildToBack, (, fieldTypeList, ), ;, return]
[addChildToBack, (, fieldTypeList, ), ;, return, recordType, ;, }, private, Node, parseFieldTypeList, (, JsDocToken, token, ), {, Node, fieldTypeList, =]
[fieldTypeList, ), ;, return, recordType, ;, }, private, Node, parseFieldTypeList, (, JsDocToken, token, ), {, Node, fieldTypeList, =, newNode, (]
[fieldTypeList, ), ;, return, recordType, ;, }, private, Node, parseFieldTypeList, (, JsDocToken, token, ), {, Node, fieldTypeList, =, newNode, (]
[(, JsDocToken, token, ), {, Node, fieldTypeList, =, newNode, (, Token, ., LB, ), ;, do, {, Node, fieldType, =]
[token, ), {, Node, fieldTypeList, =, newNode, (, Token, ., LB, ), ;, do, {, Node, fieldType, =, parseFieldType, (]
[=, newNode, (, Token, ., LB, ), ;, do, {, Node, fieldType, =, parseFieldType, (, token, ), ;, if, (]
[=, newNode, (, Token, ., LB, ), ;, do, {, Node, fieldType, =, parseFieldType, (, token, ), ;, if, (]
[(, Token, ., LB, ), ;, do, {, Node, fieldType, =, parseFieldType, (, token, ), ;, if, (, fieldType, ==]
[), ;, do, {, Node, fieldType, =, parseFieldType, (, token, ), ;, if, (, fieldType, ==, null, ), {, return]
[{, Node, fieldType, =, parseFieldType, (, token, ), ;, if, (, fieldType, ==, null, ), {, return, null, ;, }]
[{, Node, fieldType, =, parseFieldType, (, token, ), ;, if, (, fieldType, ==, null, ), {, return, null, ;, }]
[parseFieldType, (, token, ), ;, if, (, fieldType, ==, null, ), {, return, null, ;, }, fieldTypeList, ., addChildToBack, (]
[), ;, if, (, fieldType, ==, null, ), {, return, null, ;, }, fieldTypeList, ., addChildToBack, (, fieldType, ), ;]
[null, ), {, return, null, ;, }, fieldTypeList, ., addChildToBack, (, fieldType, ), ;, skipEOLs, (, ), ;, if, (]
[), {, return, null, ;, }, fieldTypeList, ., addChildToBack, (, fieldType, ), ;, skipEOLs, (, ), ;, if, (, !]
[return, null, ;, }, fieldTypeList, ., addChildToBack, (, fieldType, ), ;, skipEOLs, (, ), ;, if, (, !, match, (]
[return, null, ;, }, fieldTypeList, ., addChildToBack, (, fieldType, ), ;, skipEOLs, (, ), ;, if, (, !, match, (]
[), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COMMA, ), ), {, break, ;, }]
[), ;, if, (, !, match, (, JsDocToken, ., COMMA, ), ), {, break, ;, }, next, (, ), ;]
[!, match, (, JsDocToken, ., COMMA, ), ), {, break, ;, }, next, (, ), ;, skipEOLs, (, ), ;]
[(, JsDocToken, ., COMMA, ), ), {, break, ;, }, next, (, ), ;, skipEOLs, (, ), ;, token, =]
[break, ;, }, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, while, (]
[(, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, while, (, true, ), ;, return]
[while, (, true, ), ;, return, fieldTypeList, ;, }, private, Node, parseFieldType, (, JsDocToken, token, ), {, Node, fieldName, =]
[true, ), ;, return, fieldTypeList, ;, }, private, Node, parseFieldType, (, JsDocToken, token, ), {, Node, fieldName, =, parseFieldName, (]
[;, }, private, Node, parseFieldType, (, JsDocToken, token, ), {, Node, fieldName, =, parseFieldName, (, token, ), ;, if, (]
[;, }, private, Node, parseFieldType, (, JsDocToken, token, ), {, Node, fieldName, =, parseFieldName, (, token, ), ;, if, (]
[private, Node, parseFieldType, (, JsDocToken, token, ), {, Node, fieldName, =, parseFieldName, (, token, ), ;, if, (, fieldName, ==]
[JsDocToken, token, ), {, Node, fieldName, =, parseFieldName, (, token, ), ;, if, (, fieldName, ==, null, ), {, return]
[{, Node, fieldName, =, parseFieldName, (, token, ), ;, if, (, fieldName, ==, null, ), {, return, null, ;, }]
[token, ), ;, if, (, fieldName, ==, null, ), {, return, null, ;, }, skipEOLs, (, ), ;, if, (]
[), ;, if, (, fieldName, ==, null, ), {, return, null, ;, }, skipEOLs, (, ), ;, if, (, !]
[if, (, fieldName, ==, null, ), {, return, null, ;, }, skipEOLs, (, ), ;, if, (, !, match, (]
[if, (, fieldName, ==, null, ), {, return, null, ;, }, skipEOLs, (, ), ;, if, (, !, match, (]
[return, null, ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COLON, ), ), {, return]
[}, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COLON, ), ), {, return, fieldName, ;, }]
[;, if, (, !, match, (, JsDocToken, ., COLON, ), ), {, return, fieldName, ;, }, next, (, ), ;]
[., COLON, ), ), {, return, fieldName, ;, }, next, (, ), ;, skipEOLs, (, ), ;, Node, typeExpression, =]
[), ), {, return, fieldName, ;, }, next, (, ), ;, skipEOLs, (, ), ;, Node, typeExpression, =, parseTypeExpression, (]
[next, (, ), ;, skipEOLs, (, ), ;, Node, typeExpression, =, parseTypeExpression, (, next, (, ), ), ;, if, (]
[next, (, ), ;, skipEOLs, (, ), ;, Node, typeExpression, =, parseTypeExpression, (, next, (, ), ), ;, if, (]
[), ;, skipEOLs, (, ), ;, Node, typeExpression, =, parseTypeExpression, (, next, (, ), ), ;, if, (, typeExpression, ==]
[), ;, Node, typeExpression, =, parseTypeExpression, (, next, (, ), ), ;, if, (, typeExpression, ==, null, ), {, return]
[(, next, (, ), ), ;, if, (, typeExpression, ==, null, ), {, return, null, ;, }, Node, fieldType, =]
[(, ), ), ;, if, (, typeExpression, ==, null, ), {, return, null, ;, }, Node, fieldType, =, newNode, (]
[(, ), ), ;, if, (, typeExpression, ==, null, ), {, return, null, ;, }, Node, fieldType, =, newNode, (]
[(, typeExpression, ==, null, ), {, return, null, ;, }, Node, fieldType, =, newNode, (, Token, ., COLON, ), ;]
[(, typeExpression, ==, null, ), {, return, null, ;, }, Node, fieldType, =, newNode, (, Token, ., COLON, ), ;]
[), {, return, null, ;, }, Node, fieldType, =, newNode, (, Token, ., COLON, ), ;, fieldType, ., addChildToBack, (]
[null, ;, }, Node, fieldType, =, newNode, (, Token, ., COLON, ), ;, fieldType, ., addChildToBack, (, fieldName, ), ;]
[null, ;, }, Node, fieldType, =, newNode, (, Token, ., COLON, ), ;, fieldType, ., addChildToBack, (, fieldName, ), ;]
[fieldType, =, newNode, (, Token, ., COLON, ), ;, fieldType, ., addChildToBack, (, fieldName, ), ;, fieldType, ., addChildToBack, (]
[Token, ., COLON, ), ;, fieldType, ., addChildToBack, (, fieldName, ), ;, fieldType, ., addChildToBack, (, typeExpression, ), ;, return]
[., addChildToBack, (, typeExpression, ), ;, return, fieldType, ;, }, private, Node, parseFieldName, (, JsDocToken, token, ), {, switch, (]
[), ;, return, fieldType, ;, }, private, Node, parseFieldName, (, JsDocToken, token, ), {, switch, (, token, ), {, case]
[}, private, Node, parseFieldName, (, JsDocToken, token, ), {, switch, (, token, ), {, case, STRING, :, String, string, =]
[}, private, Node, parseFieldName, (, JsDocToken, token, ), {, switch, (, token, ), {, case, STRING, :, String, string, =]
[), {, switch, (, token, ), {, case, STRING, :, String, string, =, stream, ., getString, (, ), ;, return]
[switch, (, token, ), {, case, STRING, :, String, string, =, stream, ., getString, (, ), ;, return, newStringNode, (]
[STRING, :, String, string, =, stream, ., getString, (, ), ;, return, newStringNode, (, string, ), ;, default, :, return]
[;, default, :, return, null, ;, }, }, private, Node, wrapNode, (, int, type, ,, Node, n, ), {, return]
[;, default, :, return, null, ;, }, }, private, Node, wrapNode, (, int, type, ,, Node, n, ), {, return]
[;, default, :, return, null, ;, }, }, private, Node, wrapNode, (, int, type, ,, Node, n, ), {, return]
[:, return, null, ;, }, }, private, Node, wrapNode, (, int, type, ,, Node, n, ), {, return, n, ==]
[null, ;, }, }, private, Node, wrapNode, (, int, type, ,, Node, n, ), {, return, n, ==, null, ?]
[}, }, private, Node, wrapNode, (, int, type, ,, Node, n, ), {, return, n, ==, null, ?, null, :]
[}, }, private, Node, wrapNode, (, int, type, ,, Node, n, ), {, return, n, ==, null, ?, null, :]
[Node, wrapNode, (, int, type, ,, Node, n, ), {, return, n, ==, null, ?, null, :, new, Node, (]
[(, int, type, ,, Node, n, ), {, return, n, ==, null, ?, null, :, new, Node, (, type, ,]
[type, ,, Node, n, ), {, return, n, ==, null, ?, null, :, new, Node, (, type, ,, n, ,]
[type, ,, Node, n, ), {, return, n, ==, null, ?, null, :, new, Node, (, type, ,, n, ,]
[return, n, ==, null, ?, null, :, new, Node, (, type, ,, n, ,, stream, ., getLineno, (, ), ,]
[return, n, ==, null, ?, null, :, new, Node, (, type, ,, n, ,, stream, ., getLineno, (, ), ,]
[(, type, ,, n, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ., clonePropsFrom, (]
[getCharno, (, ), ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNode, (, int, type, ), {, return]
[getCharno, (, ), ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNode, (, int, type, ), {, return]
[), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNode, (, int, type, ), {, return, new, Node, (]
[clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNode, (, int, type, ), {, return, new, Node, (, type, ,]
[clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNode, (, int, type, ), {, return, new, Node, (, type, ,]
[private, Node, newNode, (, int, type, ), {, return, new, Node, (, type, ,, stream, ., getLineno, (, ), ,]
[private, Node, newNode, (, int, type, ), {, return, new, Node, (, type, ,, stream, ., getLineno, (, ), ,]
[new, Node, (, type, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ., clonePropsFrom, (]
[getCharno, (, ), ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, s, ), {, return]
[), ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, s, ), {, return, newStringNode, (]
[., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, s, ), {, return, newStringNode, (, s, ,]
[., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, s, ), {, return, newStringNode, (, s, ,]
[}, private, Node, newStringNode, (, String, s, ), {, return, newStringNode, (, s, ,, stream, ., getLineno, (, ), ,]
[}, private, Node, newStringNode, (, String, s, ), {, return, newStringNode, (, s, ,, stream, ., getLineno, (, ), ,]
[), ;, }, private, Node, newStringNode, (, String, s, ,, int, lineno, ,, int, charno, ), {, Node, n, =]
[), ;, }, private, Node, newStringNode, (, String, s, ,, int, lineno, ,, int, charno, ), {, Node, n, =]
[), ;, }, private, Node, newStringNode, (, String, s, ,, int, lineno, ,, int, charno, ), {, Node, n, =]
[Node, newStringNode, (, String, s, ,, int, lineno, ,, int, charno, ), {, Node, n, =, Node, ., newString, (]
[(, String, s, ,, int, lineno, ,, int, charno, ), {, Node, n, =, Node, ., newString, (, s, ,]
[s, ,, int, lineno, ,, int, charno, ), {, Node, n, =, Node, ., newString, (, s, ,, lineno, ,]
[int, charno, ), {, Node, n, =, Node, ., newString, (, s, ,, lineno, ,, charno, ), ., clonePropsFrom, (]
[{, Node, n, =, Node, ., newString, (, s, ,, lineno, ,, charno, ), ., clonePropsFrom, (, templateNode, ), ;]
[{, Node, n, =, Node, ., newString, (, s, ,, lineno, ,, charno, ), ., clonePropsFrom, (, templateNode, ), ;]
[Node, ., newString, (, s, ,, lineno, ,, charno, ), ., clonePropsFrom, (, templateNode, ), ;, n, ., setLength, (]
[Node, ., newString, (, s, ,, lineno, ,, charno, ), ., clonePropsFrom, (, templateNode, ), ;, n, ., setLength, (]
[charno, ), ., clonePropsFrom, (, templateNode, ), ;, n, ., setLength, (, s, ., length, (, ), ), ;, return]
[s, ., length, (, ), ), ;, return, n, ;, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =]
[s, ., length, (, ), ), ;, return, n, ;, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =]
[;, return, n, ;, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, IR, ., script, (, ), ;]
[;, return, n, ;, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, IR, ., script, (, ), ;]
[}, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, IR, ., script, (, ), ;, templateNode, ., setStaticSourceFile, (]
[}, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, IR, ., script, (, ), ;, templateNode, ., setStaticSourceFile, (]
[}, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, IR, ., script, (, ), ;, templateNode, ., setStaticSourceFile, (]
[}, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, IR, ., script, (, ), ;, templateNode, ., setStaticSourceFile, (]
[(, ), {, Node, templateNode, =, IR, ., script, (, ), ;, templateNode, ., setStaticSourceFile, (, this, ., associatedNode, !=]
[{, Node, templateNode, =, IR, ., script, (, ), ;, templateNode, ., setStaticSourceFile, (, this, ., associatedNode, !=, null, ?]
[{, Node, templateNode, =, IR, ., script, (, ), ;, templateNode, ., setStaticSourceFile, (, this, ., associatedNode, !=, null, ?]
[{, Node, templateNode, =, IR, ., script, (, ), ;, templateNode, ., setStaticSourceFile, (, this, ., associatedNode, !=, null, ?]
[), ;, templateNode, ., setStaticSourceFile, (, this, ., associatedNode, !=, null, ?, this, ., associatedNode, ., getStaticSourceFile, (, ), :]
[setStaticSourceFile, (, this, ., associatedNode, !=, null, ?, this, ., associatedNode, ., getStaticSourceFile, (, ), :, null, ), ;, return]
[., getStaticSourceFile, (, ), :, null, ), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (, String, warning, ), {]
[., getStaticSourceFile, (, ), :, null, ), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (, String, warning, ), {]
[:, null, ), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (, String, warning, ), {, parser, ., addTypeWarning, (]
[), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (, String, warning, ), {, parser, ., addTypeWarning, (, warning, ,]
[), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (, String, warning, ), {, parser, ., addTypeWarning, (, warning, ,]
[private, Node, reportTypeSyntaxWarning, (, String, warning, ), {, parser, ., addTypeWarning, (, warning, ,, stream, ., getLineno, (, ), ,]
[private, Node, reportTypeSyntaxWarning, (, String, warning, ), {, parser, ., addTypeWarning, (, warning, ,, stream, ., getLineno, (, ), ,]
[parser, ., addTypeWarning, (, warning, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return]
[), ,, stream, ., getCharno, (, ), ), ;, return, null, ;, }, private, Node, reportGenericTypeSyntaxWarning, (, ), {, return]
[stream, ., getCharno, (, ), ), ;, return, null, ;, }, private, Node, reportGenericTypeSyntaxWarning, (, ), {, return, reportTypeSyntaxWarning, (]
[private, Node, reportGenericTypeSyntaxWarning, (, ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.type.syntax", ), ;, }, private, JsDocToken, eatTokensUntilEOL, (, ), {, return]
[reportGenericTypeSyntaxWarning, (, ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.type.syntax", ), ;, }, private, JsDocToken, eatTokensUntilEOL, (, ), {, return, eatTokensUntilEOL, (]
[eatTokensUntilEOL, (, next, (, ), ), ;, }, private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (]
[eatTokensUntilEOL, (, next, (, ), ), ;, }, private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (]
[eatTokensUntilEOL, (, next, (, ), ), ;, }, private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (]
[eatTokensUntilEOL, (, next, (, ), ), ;, }, private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (]
[next, (, ), ), ;, }, private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (, token, ==]
[next, (, ), ), ;, }, private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (, token, ==]
[;, }, private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (, token, ==, JsDocToken, ., EOL, ||]
[;, }, private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (, token, ==, JsDocToken, ., EOL, ||]
[private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (, token, ==, JsDocToken, ., EOL, ||, token, ==]
[private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (, token, ==, JsDocToken, ., EOL, ||, token, ==]
[JsDocToken, token, ), {, do, {, if, (, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOC, ||]
[JsDocToken, token, ), {, do, {, if, (, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOC, ||]
[), {, do, {, if, (, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOC, ||, token, ==]
[), {, do, {, if, (, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOC, ||, token, ==]
[(, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ), {]
[==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ), {, state, =]
[==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ), {, state, =]
[token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return]
[., EOC, ||, token, ==, JsDocToken, ., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }]
[||, token, ==, JsDocToken, ., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =]
[{, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =, next, (, ), ;, }, while, (]
[}, token, =, next, (, ), ;, }, while, (, true, ), ;, }, private, static, final, JsDocToken, NO_UNREAD_TOKEN, =]
[;, }, while, (, true, ), ;, }, private, static, final, JsDocToken, NO_UNREAD_TOKEN, =, null, ;, private, JsDocToken, unreadToken, =]
[final, JsDocToken, NO_UNREAD_TOKEN, =, null, ;, private, JsDocToken, unreadToken, =, NO_UNREAD_TOKEN, ;, private, void, restoreLookAhead, (, JsDocToken, token, ), {]
[NO_UNREAD_TOKEN, =, null, ;, private, JsDocToken, unreadToken, =, NO_UNREAD_TOKEN, ;, private, void, restoreLookAhead, (, JsDocToken, token, ), {, unreadToken, =]
[void, restoreLookAhead, (, JsDocToken, token, ), {, unreadToken, =, token, ;, }, private, boolean, match, (, JsDocToken, token, ), {]
[(, JsDocToken, token, ), {, unreadToken, =, token, ;, }, private, boolean, match, (, JsDocToken, token, ), {, unreadToken, =]
[unreadToken, =, token, ;, }, private, boolean, match, (, JsDocToken, token, ), {, unreadToken, =, next, (, ), ;, return]
[unreadToken, =, token, ;, }, private, boolean, match, (, JsDocToken, token, ), {, unreadToken, =, next, (, ), ;, return]
[token, ;, }, private, boolean, match, (, JsDocToken, token, ), {, unreadToken, =, next, (, ), ;, return, unreadToken, ==]
[(, ), ;, return, unreadToken, ==, token, ;, }, private, boolean, match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {]
[;, return, unreadToken, ==, token, ;, }, private, boolean, match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =]
[;, }, private, boolean, match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =, next, (, ), ;, return]
[;, }, private, boolean, match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =, next, (, ), ;, return]
[;, }, private, boolean, match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =, next, (, ), ;, return]
[private, boolean, match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =, next, (, ), ;, return, unreadToken, ==]
[match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =, next, (, ), ;, return, unreadToken, ==, token1, ||]
[match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =, next, (, ), ;, return, unreadToken, ==, token1, ||]
[JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =, next, (, ), ;, return, unreadToken, ==, token1, ||, unreadToken, ==]
[), ;, return, unreadToken, ==, token1, ||, unreadToken, ==, token2, ;, }, private, JsDocToken, next, (, ), {, if, (]
[), ;, return, unreadToken, ==, token1, ||, unreadToken, ==, token2, ;, }, private, JsDocToken, next, (, ), {, if, (]
[return, unreadToken, ==, token1, ||, unreadToken, ==, token2, ;, }, private, JsDocToken, next, (, ), {, if, (, unreadToken, ==]
[||, unreadToken, ==, token2, ;, }, private, JsDocToken, next, (, ), {, if, (, unreadToken, ==, NO_UNREAD_TOKEN, ), {, return]
[||, unreadToken, ==, token2, ;, }, private, JsDocToken, next, (, ), {, if, (, unreadToken, ==, NO_UNREAD_TOKEN, ), {, return]
[), {, if, (, unreadToken, ==, NO_UNREAD_TOKEN, ), {, return, stream, ., getJsDocToken, (, ), ;, }, else, {, return]
[;, }, else, {, return, current, (, ), ;, }, }, private, JsDocToken, current, (, ), {, JsDocToken, t, =]
[else, {, return, current, (, ), ;, }, }, private, JsDocToken, current, (, ), {, JsDocToken, t, =, unreadToken, ;]
[return, current, (, ), ;, }, }, private, JsDocToken, current, (, ), {, JsDocToken, t, =, unreadToken, ;, unreadToken, =]
[), ;, }, }, private, JsDocToken, current, (, ), {, JsDocToken, t, =, unreadToken, ;, unreadToken, =, NO_UNREAD_TOKEN, ;, return]
[t, =, unreadToken, ;, unreadToken, =, NO_UNREAD_TOKEN, ;, return, t, ;, }, private, void, skipEOLs, (, ), {, while, (]
[unreadToken, ;, unreadToken, =, NO_UNREAD_TOKEN, ;, return, t, ;, }, private, void, skipEOLs, (, ), {, while, (, match, (]
[unreadToken, ;, unreadToken, =, NO_UNREAD_TOKEN, ;, return, t, ;, }, private, void, skipEOLs, (, ), {, while, (, match, (]
[return, t, ;, }, private, void, skipEOLs, (, ), {, while, (, match, (, JsDocToken, ., EOL, ), ), {]
[skipEOLs, (, ), {, while, (, match, (, JsDocToken, ., EOL, ), ), {, next, (, ), ;, if, (]
[), {, while, (, match, (, JsDocToken, ., EOL, ), ), {, next, (, ), ;, if, (, match, (]
[), {, while, (, match, (, JsDocToken, ., EOL, ), ), {, next, (, ), ;, if, (, match, (]
[JsDocToken, ., EOL, ), ), {, next, (, ), ;, if, (, match, (, JsDocToken, ., STAR, ), ), {]
[JsDocToken, ., STAR, ), ), {, next, (, ), ;, }, }, }, private, boolean, hasParsedFileOverviewDocInfo, (, ), {, return]
[JsDocToken, ., STAR, ), ), {, next, (, ), ;, }, }, }, private, boolean, hasParsedFileOverviewDocInfo, (, ), {, return]
[private, boolean, hasParsedFileOverviewDocInfo, (, ), {, return, jsdocBuilder, ., isPopulatedWithFileOverview, (, ), ;, }, boolean, hasParsedJSDocInfo, (, ), {, return]
[private, boolean, hasParsedFileOverviewDocInfo, (, ), {, return, jsdocBuilder, ., isPopulatedWithFileOverview, (, ), ;, }, boolean, hasParsedJSDocInfo, (, ), {, return]
[}, boolean, hasParsedJSDocInfo, (, ), {, return, jsdocBuilder, ., isPopulated, (, ), ;, }, JSDocInfo, retrieveAndResetParsedJSDocInfo, (, ), {, return]
[}, boolean, hasParsedJSDocInfo, (, ), {, return, jsdocBuilder, ., isPopulated, (, ), ;, }, JSDocInfo, retrieveAndResetParsedJSDocInfo, (, ), {, return]
[), {, return, jsdocBuilder, ., isPopulated, (, ), ;, }, JSDocInfo, retrieveAndResetParsedJSDocInfo, (, ), {, return, jsdocBuilder, ., build, (]
[JSDocInfo, retrieveAndResetParsedJSDocInfo, (, ), {, return, jsdocBuilder, ., build, (, associatedNode, ), ;, }, JSDocInfo, getFileOverviewJSDocInfo, (, ), {, return]
[;, }, JSDocInfo, getFileOverviewJSDocInfo, (, ), {, return, fileOverviewJSDocInfo, ;, }, private, boolean, lookAheadForTypeAnnotation, (, ), {, boolean, matchedLc, =]
[return, fileOverviewJSDocInfo, ;, }, private, boolean, lookAheadForTypeAnnotation, (, ), {, boolean, matchedLc, =, false, ;, int, c, ;, while, (]
[}, private, boolean, lookAheadForTypeAnnotation, (, ), {, boolean, matchedLc, =, false, ;, int, c, ;, while, (, true, ), {]
[boolean, lookAheadForTypeAnnotation, (, ), {, boolean, matchedLc, =, false, ;, int, c, ;, while, (, true, ), {, c, =]
[boolean, lookAheadForTypeAnnotation, (, ), {, boolean, matchedLc, =, false, ;, int, c, ;, while, (, true, ), {, c, =]
[false, ;, int, c, ;, while, (, true, ), {, c, =, stream, ., getChar, (, ), ;, if, (]
[false, ;, int, c, ;, while, (, true, ), {, c, =, stream, ., getChar, (, ), ;, if, (]
[int, c, ;, while, (, true, ), {, c, =, stream, ., getChar, (, ), ;, if, (, c, ==]
[=, stream, ., getChar, (, ), ;, if, (, c, ==, ' ', ), {, continue, ;, }, else, if, (]
[=, stream, ., getChar, (, ), ;, if, (, c, ==, ' ', ), {, continue, ;, }, else, if, (]
[., getChar, (, ), ;, if, (, c, ==, ' ', ), {, continue, ;, }, else, if, (, c, ==]
[), ;, if, (, c, ==, ' ', ), {, continue, ;, }, else, if, (, c, ==, '{', ), {]
[if, (, c, ==, ' ', ), {, continue, ;, }, else, if, (, c, ==, '{', ), {, matchedLc, =]
[if, (, c, ==, '{', ), {, matchedLc, =, true, ;, break, ;, }, else, {, break, ;, }, }]
[if, (, c, ==, '{', ), {, matchedLc, =, true, ;, break, ;, }, else, {, break, ;, }, }]
['{', ), {, matchedLc, =, true, ;, break, ;, }, else, {, break, ;, }, }, stream, ., ungetChar, (]
[=, true, ;, break, ;, }, else, {, break, ;, }, }, stream, ., ungetChar, (, c, ), ;, return]
