[;, ObjectMethodsGuru, methodsGuru, =, new, ObjectMethodsGuru, (, ), ;, MockUtil, mockUtil, =, new, MockUtil, (, ), ;, public, Object, answer]
[;, MockUtil, mockUtil, =, new, MockUtil, (, ), ;, public, Object, answer, (, InvocationOnMock, invocation, ), {, if, (, methodsGuru]
[;, public, Object, answer, (, InvocationOnMock, invocation, ), {, if, (, methodsGuru, ., isToString, (, invocation, ., getMethod, (, )]
[), {, Object, mock, =, invocation, ., getMock, (, ), ;, MockName, name, =, mockUtil, ., getMockName, (, mock, )]
[., isToString, (, invocation, ., getMethod, (, ), ), ), {, Object, mock, =, invocation, ., getMock, (, ), ;]
[), ), {, Object, mock, =, invocation, ., getMock, (, ), ;, MockName, name, =, mockUtil, ., getMockName, (, mock]
[., getMethod, (, ), ), ), {, Object, mock, =, invocation, ., getMock, (, ), ;, MockName, name, =, mockUtil]
[;, MockName, name, =, mockUtil, ., getMockName, (, mock, ), ;, if, (, name, ., isDefault, (, ), ), {]
[., getMock, (, ), ;, MockName, name, =, mockUtil, ., getMockName, (, mock, ), ;, if, (, name, ., isDefault]
[;, if, (, name, ., isDefault, (, ), ), {, return, "Mock for ", +, mockUtil, ., getMockSettings, (, mock, ), .]
[., getMockName, (, mock, ), ;, if, (, name, ., isDefault, (, ), ), {, return, "Mock for ", +, mockUtil, .]
[), ;, if, (, name, ., isDefault, (, ), ), {, return, "Mock for ", +, mockUtil, ., getMockSettings, (, mock, )]
[), {, return, "Mock for ", +, mockUtil, ., getMockSettings, (, mock, ), ., getTypeToMock, (, ), ., getSimpleName, (, ), +]
[., isDefault, (, ), ), {, return, "Mock for ", +, mockUtil, ., getMockSettings, (, mock, ), ., getTypeToMock, (, ), .]
[;, }, else, {, return, name, ., toString, (, ), ;, }, }, else, if, (, methodsGuru, ., isCompareToMethod, (]
[+, mock, ., hashCode, (, ), ;, }, else, {, return, name, ., toString, (, ), ;, }, }, else]
[+, ", hashCode: ", +, mock, ., hashCode, (, ), ;, }, else, {, return, name, ., toString, (, ), ;, }]
[+, mockUtil, ., getMockSettings, (, mock, ), ., getTypeToMock, (, ), ., getSimpleName, (, ), +, ", hashCode: ", +, mock, .]
[+, ", hashCode: ", +, mock, ., hashCode, (, ), ;, }, else, {, return, name, ., toString, (, ), ;, }]
[., getSimpleName, (, ), +, ", hashCode: ", +, mock, ., hashCode, (, ), ;, }, else, {, return, name, ., toString]
[., getTypeToMock, (, ), ., getSimpleName, (, ), +, ", hashCode: ", +, mock, ., hashCode, (, ), ;, }, else, {]
[., getMockSettings, (, mock, ), ., getTypeToMock, (, ), ., getSimpleName, (, ), +, ", hashCode: ", +, mock, ., hashCode, (]
[), ., getTypeToMock, (, ), ., getSimpleName, (, ), +, ", hashCode: ", +, mock, ., hashCode, (, ), ;, }, else]
[+, mock, ., hashCode, (, ), ;, }, else, {, return, name, ., toString, (, ), ;, }, }, else]
[;, }, else, {, return, name, ., toString, (, ), ;, }, }, else, if, (, methodsGuru, ., isCompareToMethod, (]
[., hashCode, (, ), ;, }, else, {, return, name, ., toString, (, ), ;, }, }, else, if, (]
[;, }, }, else, if, (, methodsGuru, ., isCompareToMethod, (, invocation, ., getMethod, (, ), ), ), {, return, invocation]
[., toString, (, ), ;, }, }, else, if, (, methodsGuru, ., isCompareToMethod, (, invocation, ., getMethod, (, ), )]
[), {, return, invocation, ., getMock, (, ), ==, invocation, ., getArguments, (, ), [, 0, ], ?, 0, :]
[., isCompareToMethod, (, invocation, ., getMethod, (, ), ), ), {, return, invocation, ., getMock, (, ), ==, invocation, .]
[), ), {, return, invocation, ., getMock, (, ), ==, invocation, ., getArguments, (, ), [, 0, ], ?, 0]
[., getMethod, (, ), ), ), {, return, invocation, ., getMock, (, ), ==, invocation, ., getArguments, (, ), []
[;, }, Class, <, ?, >, returnType, =, invocation, ., getMethod, (, ), ., getReturnType, (, ), ;, return, returnValueFor]
[?, 0, :, 1, ;, }, Class, <, ?, >, returnType, =, invocation, ., getMethod, (, ), ., getReturnType, (]
[==, invocation, ., getArguments, (, ), [, 0, ], ?, 0, :, 1, ;, }, Class, <, ?, >, returnType]
[., getMock, (, ), ==, invocation, ., getArguments, (, ), [, 0, ], ?, 0, :, 1, ;, }, Class]
[?, 0, :, 1, ;, }, Class, <, ?, >, returnType, =, invocation, ., getMethod, (, ), ., getReturnType, (]
[[, 0, ], ?, 0, :, 1, ;, }, Class, <, ?, >, returnType, =, invocation, ., getMethod, (, )]
[., getArguments, (, ), [, 0, ], ?, 0, :, 1, ;, }, Class, <, ?, >, returnType, =, invocation]
[], ?, 0, :, 1, ;, }, Class, <, ?, >, returnType, =, invocation, ., getMethod, (, ), ., getReturnType]
[:, 1, ;, }, Class, <, ?, >, returnType, =, invocation, ., getMethod, (, ), ., getReturnType, (, ), ;]
[;, }, Class, <, ?, >, returnType, =, invocation, ., getMethod, (, ), ., getReturnType, (, ), ;, return, returnValueFor]
[;, return, returnValueFor, (, returnType, ), ;, }, Object, returnValueFor, (, Class, <, ?, >, type, ), {, if, (]
[., getReturnType, (, ), ;, return, returnValueFor, (, returnType, ), ;, }, Object, returnValueFor, (, Class, <, ?, >, type]
[., getMethod, (, ), ., getReturnType, (, ), ;, return, returnValueFor, (, returnType, ), ;, }, Object, returnValueFor, (, Class]
[;, }, Object, returnValueFor, (, Class, <, ?, >, type, ), {, if, (, Primitives, ., isPrimitiveOrWrapper, (, type, )]
[), ;, }, Object, returnValueFor, (, Class, <, ?, >, type, ), {, if, (, Primitives, ., isPrimitiveOrWrapper, (, type]
[), {, return, Primitives, ., defaultValueForPrimitiveOrWrapper, (, type, ), ;, }, else, if, (, type, ==, Iterable, ., class, )]
[., isPrimitiveOrWrapper, (, type, ), ), {, return, Primitives, ., defaultValueForPrimitiveOrWrapper, (, type, ), ;, }, else, if, (, type]
[), ), {, return, Primitives, ., defaultValueForPrimitiveOrWrapper, (, type, ), ;, }, else, if, (, type, ==, Iterable, ., class]
[;, }, else, if, (, type, ==, Iterable, ., class, ), {, return, new, ArrayList, <, Object, >, (, 0]
[., defaultValueForPrimitiveOrWrapper, (, type, ), ;, }, else, if, (, type, ==, Iterable, ., class, ), {, return, new, ArrayList]
[), ;, }, else, if, (, type, ==, Iterable, ., class, ), {, return, new, ArrayList, <, Object, >, (]
[), {, return, new, ArrayList, <, Object, >, (, 0, ), ;, }, else, if, (, type, ==, Collection, .]
[==, Iterable, ., class, ), {, return, new, ArrayList, <, Object, >, (, 0, ), ;, }, else, if, (]
[), {, return, new, ArrayList, <, Object, >, (, 0, ), ;, }, else, if, (, type, ==, Collection, .]
[;, }, else, if, (, type, ==, Collection, ., class, ), {, return, new, LinkedList, <, Object, >, (, )]
[), ;, }, else, if, (, type, ==, Collection, ., class, ), {, return, new, LinkedList, <, Object, >, (]
[), {, return, new, LinkedList, <, Object, >, (, ), ;, }, else, if, (, type, ==, Set, ., class]
[==, Collection, ., class, ), {, return, new, LinkedList, <, Object, >, (, ), ;, }, else, if, (, type]
[), {, return, new, LinkedList, <, Object, >, (, ), ;, }, else, if, (, type, ==, Set, ., class]
[;, }, else, if, (, type, ==, Set, ., class, ), {, return, new, HashSet, <, Object, >, (, )]
[), {, return, new, HashSet, <, Object, >, (, ), ;, }, else, if, (, type, ==, HashSet, ., class]
[==, Set, ., class, ), {, return, new, HashSet, <, Object, >, (, ), ;, }, else, if, (, type]
[), {, return, new, HashSet, <, Object, >, (, ), ;, }, else, if, (, type, ==, HashSet, ., class]
[;, }, else, if, (, type, ==, HashSet, ., class, ), {, return, new, HashSet, <, Object, >, (, )]
[), {, return, new, HashSet, <, Object, >, (, ), ;, }, else, if, (, type, ==, SortedSet, ., class]
[==, HashSet, ., class, ), {, return, new, HashSet, <, Object, >, (, ), ;, }, else, if, (, type]
[), {, return, new, HashSet, <, Object, >, (, ), ;, }, else, if, (, type, ==, SortedSet, ., class]
[;, }, else, if, (, type, ==, SortedSet, ., class, ), {, return, new, TreeSet, <, Object, >, (, )]
[), {, return, new, TreeSet, <, Object, >, (, ), ;, }, else, if, (, type, ==, TreeSet, ., class]
[==, SortedSet, ., class, ), {, return, new, TreeSet, <, Object, >, (, ), ;, }, else, if, (, type]
[), {, return, new, TreeSet, <, Object, >, (, ), ;, }, else, if, (, type, ==, TreeSet, ., class]
[;, }, else, if, (, type, ==, TreeSet, ., class, ), {, return, new, TreeSet, <, Object, >, (, )]
[), {, return, new, TreeSet, <, Object, >, (, ), ;, }, else, if, (, type, ==, LinkedHashSet, ., class]
[==, TreeSet, ., class, ), {, return, new, TreeSet, <, Object, >, (, ), ;, }, else, if, (, type]
[), {, return, new, TreeSet, <, Object, >, (, ), ;, }, else, if, (, type, ==, LinkedHashSet, ., class]
[;, }, else, if, (, type, ==, LinkedHashSet, ., class, ), {, return, new, LinkedHashSet, <, Object, >, (, )]
[), {, return, new, LinkedHashSet, <, Object, >, (, ), ;, }, else, if, (, type, ==, List, ., class]
[==, LinkedHashSet, ., class, ), {, return, new, LinkedHashSet, <, Object, >, (, ), ;, }, else, if, (, type]
[), {, return, new, LinkedHashSet, <, Object, >, (, ), ;, }, else, if, (, type, ==, List, ., class]
[;, }, else, if, (, type, ==, List, ., class, ), {, return, new, LinkedList, <, Object, >, (, )]
[), {, return, new, LinkedList, <, Object, >, (, ), ;, }, else, if, (, type, ==, LinkedList, ., class]
[==, List, ., class, ), {, return, new, LinkedList, <, Object, >, (, ), ;, }, else, if, (, type]
[), {, return, new, LinkedList, <, Object, >, (, ), ;, }, else, if, (, type, ==, LinkedList, ., class]
[;, }, else, if, (, type, ==, LinkedList, ., class, ), {, return, new, LinkedList, <, Object, >, (, )]
[), {, return, new, LinkedList, <, Object, >, (, ), ;, }, else, if, (, type, ==, ArrayList, ., class]
[==, LinkedList, ., class, ), {, return, new, LinkedList, <, Object, >, (, ), ;, }, else, if, (, type]
[), {, return, new, LinkedList, <, Object, >, (, ), ;, }, else, if, (, type, ==, ArrayList, ., class]
[;, }, else, if, (, type, ==, ArrayList, ., class, ), {, return, new, ArrayList, <, Object, >, (, )]
[), {, return, new, ArrayList, <, Object, >, (, ), ;, }, else, if, (, type, ==, Map, ., class]
[==, ArrayList, ., class, ), {, return, new, ArrayList, <, Object, >, (, ), ;, }, else, if, (, type]
[), {, return, new, ArrayList, <, Object, >, (, ), ;, }, else, if, (, type, ==, Map, ., class]
[;, }, else, if, (, type, ==, Map, ., class, ), {, return, new, HashMap, <, Object, ,, Object, >]
[), {, return, new, HashMap, <, Object, ,, Object, >, (, ), ;, }, else, if, (, type, ==, HashMap]
[==, Map, ., class, ), {, return, new, HashMap, <, Object, ,, Object, >, (, ), ;, }, else, if]
[), {, return, new, HashMap, <, Object, ,, Object, >, (, ), ;, }, else, if, (, type, ==, HashMap]
[;, }, else, if, (, type, ==, HashMap, ., class, ), {, return, new, HashMap, <, Object, ,, Object, >]
[), {, return, new, HashMap, <, Object, ,, Object, >, (, ), ;, }, else, if, (, type, ==, SortedMap]
[==, HashMap, ., class, ), {, return, new, HashMap, <, Object, ,, Object, >, (, ), ;, }, else, if]
[), {, return, new, HashMap, <, Object, ,, Object, >, (, ), ;, }, else, if, (, type, ==, SortedMap]
[;, }, else, if, (, type, ==, SortedMap, ., class, ), {, return, new, TreeMap, <, Object, ,, Object, >]
[), {, return, new, TreeMap, <, Object, ,, Object, >, (, ), ;, }, else, if, (, type, ==, TreeMap]
[==, SortedMap, ., class, ), {, return, new, TreeMap, <, Object, ,, Object, >, (, ), ;, }, else, if]
[), {, return, new, TreeMap, <, Object, ,, Object, >, (, ), ;, }, else, if, (, type, ==, TreeMap]
[;, }, else, if, (, type, ==, TreeMap, ., class, ), {, return, new, TreeMap, <, Object, ,, Object, >]
[), {, return, new, TreeMap, <, Object, ,, Object, >, (, ), ;, }, else, if, (, type, ==, LinkedHashMap]
[==, TreeMap, ., class, ), {, return, new, TreeMap, <, Object, ,, Object, >, (, ), ;, }, else, if]
[), {, return, new, TreeMap, <, Object, ,, Object, >, (, ), ;, }, else, if, (, type, ==, LinkedHashMap]
[;, }, else, if, (, type, ==, LinkedHashMap, ., class, ), {, return, new, LinkedHashMap, <, Object, ,, Object, >]
[), {, return, new, LinkedHashMap, <, Object, ,, Object, >, (, ), ;, }, return, null, ;, }, }]
[==, LinkedHashMap, ., class, ), {, return, new, LinkedHashMap, <, Object, ,, Object, >, (, ), ;, }, return, null]
[), {, return, new, LinkedHashMap, <, Object, ,, Object, >, (, ), ;, }, return, null, ;, }, }]
[;, }, return, null, ;, }, }]
[;, }, }]
