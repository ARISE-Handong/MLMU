[commons, ., math3, ., random, ., Well19937c, ;, public, class, LogNormalDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =]
[public, class, LogNormalDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =]
[final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =, 20120112, ;, private, static, final, double, SQRT2PI, =]
[final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =, 20120112, ;, private, static, final, double, SQRT2PI, =]
[1e-9, ;, private, static, final, long, serialVersionUID, =, 20120112, ;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (]
[1e-9, ;, private, static, final, long, serialVersionUID, =, 20120112, ;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (]
[private, static, final, long, serialVersionUID, =, 20120112, ;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (, 2, *]
[private, static, final, long, serialVersionUID, =, 20120112, ;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (, 2, *]
[double, SQRT2PI, =, FastMath, ., sqrt, (, 2, *, FastMath, ., PI, ), ;, private, static, final, double, SQRT2, =]
[double, SQRT2PI, =, FastMath, ., sqrt, (, 2, *, FastMath, ., PI, ), ;, private, static, final, double, SQRT2, =]
[., sqrt, (, 2, *, FastMath, ., PI, ), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (]
[double, scale, ;, private, final, double, shape, ;, private, final, double, solverAbsoluteAccuracy, ;, public, LogNormalDistribution, (, ), {, this, (]
[;, private, final, double, shape, ;, private, final, double, solverAbsoluteAccuracy, ;, public, LogNormalDistribution, (, ), {, this, (, 0, ,]
[0, ,, 1, ), ;, }, public, LogNormalDistribution, (, double, scale, ,, double, shape, ), throws, NotStrictlyPositiveException, {, this, (]
[1, ), ;, }, public, LogNormalDistribution, (, double, scale, ,, double, shape, ), throws, NotStrictlyPositiveException, {, this, (, scale, ,]
[;, }, public, LogNormalDistribution, (, double, scale, ,, double, shape, ), throws, NotStrictlyPositiveException, {, this, (, scale, ,, shape, ,]
[), ;, }, public, LogNormalDistribution, (, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[(, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,]
[scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,, scale, ,]
[double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,, scale, ,, shape, ,]
[public, LogNormalDistribution, (, RandomGenerator, rng, ,, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (]
[,, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[,, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, shape, <=]
[,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, shape, <=, 0, ), {, throw]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[super, (, rng, ), ;, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,]
[;, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }]
[;, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;]
[NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =]
[LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;]
[LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;]
[shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =]
[this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return]
[inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double, getShape, (, ), {, return]
[public, double, getShape, (, ), {, return, shape, ;, }, public, double, density, (, double, x, ), {, if, (]
[public, double, getShape, (, ), {, return, shape, ;, }, public, double, density, (, double, x, ), {, if, (]
[getShape, (, ), {, return, shape, ;, }, public, double, density, (, double, x, ), {, if, (, x, <=]
[return, shape, ;, }, public, double, density, (, double, x, ), {, if, (, x, <=, 0, ), {, return]
[(, double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;, }, final, double, x0, =]
[(, double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;, }, final, double, x0, =]
[(, double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;, }, final, double, x0, =]
[{, if, (, x, <=, 0, ), {, return, 0, ;, }, final, double, x0, =, FastMath, ., log, (]
[x, <=, 0, ), {, return, 0, ;, }, final, double, x0, =, FastMath, ., log, (, x, ), -]
[0, ;, }, final, double, x0, =, FastMath, ., log, (, x, ), -, scale, ;, final, double, x1, =]
[0, ;, }, final, double, x0, =, FastMath, ., log, (, x, ), -, scale, ;, final, double, x1, =]
[}, final, double, x0, =, FastMath, ., log, (, x, ), -, scale, ;, final, double, x1, =, x0, /]
[x0, =, FastMath, ., log, (, x, ), -, scale, ;, final, double, x1, =, x0, /, shape, ;, return]
[x0, =, FastMath, ., log, (, x, ), -, scale, ;, final, double, x1, =, x0, /, shape, ;, return]
[x0, =, FastMath, ., log, (, x, ), -, scale, ;, final, double, x1, =, x0, /, shape, ;, return]
[log, (, x, ), -, scale, ;, final, double, x1, =, x0, /, shape, ;, return, FastMath, ., exp, (]
[log, (, x, ), -, scale, ;, final, double, x1, =, x0, /, shape, ;, return, FastMath, ., exp, (]
[log, (, x, ), -, scale, ;, final, double, x1, =, x0, /, shape, ;, return, FastMath, ., exp, (]
[(, x, ), -, scale, ;, final, double, x1, =, x0, /, shape, ;, return, FastMath, ., exp, (, -]
[), -, scale, ;, final, double, x1, =, x0, /, shape, ;, return, FastMath, ., exp, (, -, 0.5, *]
[scale, ;, final, double, x1, =, x0, /, shape, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *]
[double, x1, =, x0, /, shape, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /]
[x1, =, x0, /, shape, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (]
[x1, =, x0, /, shape, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (]
[x1, =, x0, /, shape, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (]
[x0, /, shape, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (, shape, *]
[shape, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (, shape, *, SQRT2PI, *]
[/, (, shape, *, SQRT2PI, *, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (]
[/, (, shape, *, SQRT2PI, *, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (]
[shape, *, SQRT2PI, *, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=]
[x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {, return]
[(, double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;, }, final, double, dev, =]
[(, double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;, }, final, double, dev, =]
[(, double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;, }, final, double, dev, =]
[{, if, (, x, <=, 0, ), {, return, 0, ;, }, final, double, dev, =, FastMath, ., log, (]
[x, <=, 0, ), {, return, 0, ;, }, final, double, dev, =, FastMath, ., log, (, x, ), -]
[{, return, 0, ;, }, final, double, dev, =, FastMath, ., log, (, x, ), -, scale, ;, if, (]
[{, return, 0, ;, }, final, double, dev, =, FastMath, ., log, (, x, ), -, scale, ;, if, (]
[{, return, 0, ;, }, final, double, dev, =, FastMath, ., log, (, x, ), -, scale, ;, if, (]
[}, final, double, dev, =, FastMath, ., log, (, x, ), -, scale, ;, if, (, FastMath, ., abs, (]
[dev, =, FastMath, ., log, (, x, ), -, scale, ;, if, (, FastMath, ., abs, (, dev, ), >]
[dev, =, FastMath, ., log, (, x, ), -, scale, ;, if, (, FastMath, ., abs, (, dev, ), >]
[FastMath, ., log, (, x, ), -, scale, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *]
[x, ), -, scale, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, shape, ), {, return]
[x, ), -, scale, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, shape, ), {, return]
[x, ), -, scale, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, shape, ), {, return]
[-, scale, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, shape, ), {, return, dev, <]
[;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, shape, ), {, return, dev, <, 0, ?]
[(, FastMath, ., abs, (, dev, ), >, 40, *, shape, ), {, return, dev, <, 0, ?, 0.0d, :]
[(, dev, ), >, 40, *, shape, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return]
[(, dev, ), >, 40, *, shape, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return]
[), >, 40, *, shape, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +]
[), >, 40, *, shape, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +]
[40, *, shape, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *]
[40, *, shape, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *]
[{, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (]
[{, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (]
[dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (, dev, /]
[<, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (, dev, /, (]
[<, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (, dev, /, (]
[?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (, dev, /, (, shape, *]
[;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[@, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return, probability, (]
[@, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return, probability, (, x0, ,]
[), ;, }, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (]
[), ;, }, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (]
[}, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (, x0, >]
[double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (, x0, >, x1, ), {, throw]
[double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (]
[double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (]
[x1, ), throws, NumberIsTooLargeException, {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,]
[throws, NumberIsTooLargeException, {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,]
[{, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, if, (]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, if, (]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, if, (]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, if, (, x0, <=]
[NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, if, (, x0, <=, 0, ||]
[NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, if, (, x0, <=, 0, ||]
[LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, if, (, x0, <=, 0, ||, x1, <=]
[x0, ,, x1, ,, true, ), ;, }, if, (, x0, <=, 0, ||, x1, <=, 0, ), {, return]
[x0, ,, x1, ,, true, ), ;, }, if, (, x0, <=, 0, ||, x1, <=, 0, ), {, return]
[true, ), ;, }, if, (, x0, <=, 0, ||, x1, <=, 0, ), {, return, super, ., probability, (]
[;, }, if, (, x0, <=, 0, ||, x1, <=, 0, ), {, return, super, ., probability, (, x0, ,]
[x1, <=, 0, ), {, return, super, ., probability, (, x0, ,, x1, ), ;, }, final, double, denom, =]
[x1, <=, 0, ), {, return, super, ., probability, (, x0, ,, x1, ), ;, }, final, double, denom, =]
[0, ), {, return, super, ., probability, (, x0, ,, x1, ), ;, }, final, double, denom, =, shape, *]
[probability, (, x0, ,, x1, ), ;, }, final, double, denom, =, shape, *, SQRT2, ;, final, double, v0, =]
[probability, (, x0, ,, x1, ), ;, }, final, double, denom, =, shape, *, SQRT2, ;, final, double, v0, =]
[(, x0, ,, x1, ), ;, }, final, double, denom, =, shape, *, SQRT2, ;, final, double, v0, =, (]
[(, x0, ,, x1, ), ;, }, final, double, denom, =, shape, *, SQRT2, ;, final, double, v0, =, (]
[(, x0, ,, x1, ), ;, }, final, double, denom, =, shape, *, SQRT2, ;, final, double, v0, =, (]
[), ;, }, final, double, denom, =, shape, *, SQRT2, ;, final, double, v0, =, (, FastMath, ., log, (]
[final, double, denom, =, shape, *, SQRT2, ;, final, double, v0, =, (, FastMath, ., log, (, x0, ), -]
[=, shape, *, SQRT2, ;, final, double, v0, =, (, FastMath, ., log, (, x0, ), -, scale, ), /]
[double, v0, =, (, FastMath, ., log, (, x0, ), -, scale, ), /, denom, ;, final, double, v1, =]
[double, v0, =, (, FastMath, ., log, (, x0, ), -, scale, ), /, denom, ;, final, double, v1, =]
[v0, =, (, FastMath, ., log, (, x0, ), -, scale, ), /, denom, ;, final, double, v1, =, (]
[v0, =, (, FastMath, ., log, (, x0, ), -, scale, ), /, denom, ;, final, double, v1, =, (]
[v0, =, (, FastMath, ., log, (, x0, ), -, scale, ), /, denom, ;, final, double, v1, =, (]
[., log, (, x0, ), -, scale, ), /, denom, ;, final, double, v1, =, (, FastMath, ., log, (]
[x0, ), -, scale, ), /, denom, ;, final, double, v1, =, (, FastMath, ., log, (, x1, ), -]
[scale, ), /, denom, ;, final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale, ), /]
[denom, ;, final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale, ), /, denom, ;, return]
[denom, ;, final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale, ), /, denom, ;, return]
[final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale, ), /, denom, ;, return, 0.5, *]
[final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale, ), /, denom, ;, return, 0.5, *]
[(, FastMath, ., log, (, x1, ), -, scale, ), /, denom, ;, return, 0.5, *, Erf, ., erf, (]
[., log, (, x1, ), -, scale, ), /, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,]
[*, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, double, s, =]
[getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, double, s, =, shape, ;, return]
[getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, double, s, =, shape, ;, return]
[return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, double, s, =, shape, ;, return, FastMath, ., exp, (]
[return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, double, s, =, shape, ;, return, FastMath, ., exp, (]
[;, }, public, double, getNumericalMean, (, ), {, double, s, =, shape, ;, return, FastMath, ., exp, (, scale, +]
[}, public, double, getNumericalMean, (, ), {, double, s, =, shape, ;, return, FastMath, ., exp, (, scale, +, (]
[}, public, double, getNumericalMean, (, ), {, double, s, =, shape, ;, return, FastMath, ., exp, (, scale, +, (]
[}, public, double, getNumericalMean, (, ), {, double, s, =, shape, ;, return, FastMath, ., exp, (, scale, +, (]
[double, getNumericalMean, (, ), {, double, s, =, shape, ;, return, FastMath, ., exp, (, scale, +, (, s, *]
[(, ), {, double, s, =, shape, ;, return, FastMath, ., exp, (, scale, +, (, s, *, s, /]
[(, s, *, s, /, 2, ), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =]
[), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =]
[), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =, s, *]
[double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =, s, *, s, ;, return]
[double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =, s, *, s, ;, return]
[getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =, s, *, s, ;, return, (]
[getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =, s, *, s, ;, return, (]
[getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =, s, *, s, ;, return, (]
[final, double, s, =, shape, ;, final, double, ss, =, s, *, s, ;, return, (, FastMath, ., exp, (]
[=, shape, ;, final, double, ss, =, s, *, s, ;, return, (, FastMath, ., exp, (, ss, ), -]
[final, double, ss, =, s, *, s, ;, return, (, FastMath, ., exp, (, ss, ), -, 1, ), *]
[final, double, ss, =, s, *, s, ;, return, (, FastMath, ., exp, (, ss, ), -, 1, ), *]
[s, *, s, ;, return, (, FastMath, ., exp, (, ss, ), -, 1, ), *, FastMath, ., exp, (]
[s, *, s, ;, return, (, FastMath, ., exp, (, ss, ), -, 1, ), *, FastMath, ., exp, (]
[s, *, s, ;, return, (, FastMath, ., exp, (, ss, ), -, 1, ), *, FastMath, ., exp, (]
[s, ;, return, (, FastMath, ., exp, (, ss, ), -, 1, ), *, FastMath, ., exp, (, 2, *]
[return, (, FastMath, ., exp, (, ss, ), -, 1, ), *, FastMath, ., exp, (, 2, *, scale, +]
[*, FastMath, ., exp, (, 2, *, scale, +, ss, ), ;, }, public, double, getSupportLowerBound, (, ), {, return]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return]
[isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, final, double, n, =]
[isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, final, double, n, =]
[}, @, Override, public, double, sample, (, ), {, final, double, n, =, random, ., nextGaussian, (, ), ;, return]
[}, @, Override, public, double, sample, (, ), {, final, double, n, =, random, ., nextGaussian, (, ), ;, return]
[double, sample, (, ), {, final, double, n, =, random, ., nextGaussian, (, ), ;, return, FastMath, ., exp, (]
[double, sample, (, ), {, final, double, n, =, random, ., nextGaussian, (, ), ;, return, FastMath, ., exp, (]
[(, ), {, final, double, n, =, random, ., nextGaussian, (, ), ;, return, FastMath, ., exp, (, scale, +]
[(, ), {, final, double, n, =, random, ., nextGaussian, (, ), ;, return, FastMath, ., exp, (, scale, +]
[{, final, double, n, =, random, ., nextGaussian, (, ), ;, return, FastMath, ., exp, (, scale, +, shape, *]
