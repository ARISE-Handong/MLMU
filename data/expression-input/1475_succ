[;, private, static, final, Logger, logger, =, Logger, ., getLogger, (, DisambiguateProperties, ., class, ., getName, (, ), ), ;]
[;, static, class, Warnings, {, static, final, DiagnosticType, INVALIDATION, =, DiagnosticType, ., disabled, (, "JSC_INVALIDATION", ,, "Property disambiguator skipping all instances of property {0} ", +, "because of type {1} node {2}. {3}", )]
[., getLogger, (, DisambiguateProperties, ., class, ., getName, (, ), ), ;, static, class, Warnings, {, static, final, DiagnosticType, INVALIDATION]
[), ;, static, class, Warnings, {, static, final, DiagnosticType, INVALIDATION, =, DiagnosticType, ., disabled, (, "JSC_INVALIDATION", ,, "Property disambiguator skipping all instances of property {0} ", +, "because of type {1} node {2}. {3}"]
[., getName, (, ), ), ;, static, class, Warnings, {, static, final, DiagnosticType, INVALIDATION, =, DiagnosticType, ., disabled, (, "JSC_INVALIDATION"]
[;, }, private, final, AbstractCompiler, compiler, ;, private, final, TypeSystem, <, T, >, typeSystem, ;, private, Multimap, <, Object, ,]
[., disabled, (, "JSC_INVALIDATION", ,, "Property disambiguator skipping all instances of property {0} ", +, "because of type {1} node {2}. {3}", ), ;, }, private, final, AbstractCompiler, compiler, ;, private, final, TypeSystem, <]
[,, "Property disambiguator skipping all instances of property {0} ", +, "because of type {1} node {2}. {3}", ), ;, }, private, final, AbstractCompiler, compiler, ;, private, final, TypeSystem, <, T, >, typeSystem, ;]
[), ;, }, private, final, AbstractCompiler, compiler, ;, private, final, TypeSystem, <, T, >, typeSystem, ;, private, Multimap, <, Object]
[+, "because of type {1} node {2}. {3}", ), ;, }, private, final, AbstractCompiler, compiler, ;, private, final, TypeSystem, <, T, >, typeSystem, ;, private, Multimap]
[), ;, }, private, final, AbstractCompiler, compiler, ;, private, final, TypeSystem, <, T, >, typeSystem, ;, private, Multimap, <, Object]
[;, boolean, skipRenaming, ;, Set, <, Node, >, renameNodes, =, Sets, ., newHashSet, (, ), ;, final, Map, <, Node]
[., newHashSet, (, ), ;, boolean, skipRenaming, ;, Set, <, Node, >, renameNodes, =, Sets, ., newHashSet, (, ), ;]
[;, final, Map, <, Node, ,, T, >, rootTypes, =, Maps, ., newHashMap, (, ), ;, Property, (, String, name]
[., newHashSet, (, ), ;, final, Map, <, Node, ,, T, >, rootTypes, =, Maps, ., newHashMap, (, ), ;]
[;, Property, (, String, name, ), {, this, ., name, =, name, ;, }, UnionFind, <, T, >, getTypes, (]
[., newHashMap, (, ), ;, Property, (, String, name, ), {, this, ., name, =, name, ;, }, UnionFind, <]
[=, name, ;, }, UnionFind, <, T, >, getTypes, (, ), {, if, (, types, ==, null, ), {, types]
[., name, =, name, ;, }, UnionFind, <, T, >, getTypes, (, ), {, if, (, types, ==, null, )]
[;, }, UnionFind, <, T, >, getTypes, (, ), {, if, (, types, ==, null, ), {, types, =, new]
[), {, types, =, new, StandardUnionFind, <, T, >, (, ), ;, }, return, types, ;, }, boolean, addType, (]
[==, null, ), {, types, =, new, StandardUnionFind, <, T, >, (, ), ;, }, return, types, ;, }, boolean]
[), {, types, =, new, StandardUnionFind, <, T, >, (, ), ;, }, return, types, ;, }, boolean, addType, (]
[=, new, StandardUnionFind, <, T, >, (, ), ;, }, return, types, ;, }, boolean, addType, (, T, type, ,]
[;, }, return, types, ;, }, boolean, addType, (, T, type, ,, T, top, ,, T, relatedType, ), {, checkState]
[;, }, boolean, addType, (, T, type, ,, T, top, ,, T, relatedType, ), {, checkState, (, !, skipRenaming, ,]
[;, if, (, typeSystem, ., isInvalidatingType, (, top, ), ), {, invalidate, (, ), ;, return, false, ;, }, else]
[,, "Attempt to record skipped property: %s", ,, name, ), ;, if, (, typeSystem, ., isInvalidatingType, (, top, ), ), {, invalidate, (, ), ;]
[,, "Attempt to record skipped property: %s", ,, name, ), ;, if, (, typeSystem, ., isInvalidatingType, (, top, ), ), {, invalidate, (, ), ;]
[,, name, ), ;, if, (, typeSystem, ., isInvalidatingType, (, top, ), ), {, invalidate, (, ), ;, return, false]
[), ;, if, (, typeSystem, ., isInvalidatingType, (, top, ), ), {, invalidate, (, ), ;, return, false, ;, }]
[), {, invalidate, (, ), ;, return, false, ;, }, else, {, if, (, typeSystem, ., isTypeToSkip, (, top, )]
[., isInvalidatingType, (, top, ), ), {, invalidate, (, ), ;, return, false, ;, }, else, {, if, (, typeSystem]
[), ), {, invalidate, (, ), ;, return, false, ;, }, else, {, if, (, typeSystem, ., isTypeToSkip, (, top]
[;, return, false, ;, }, else, {, if, (, typeSystem, ., isTypeToSkip, (, top, ), ), {, addTypeToSkip, (, top]
[;, }, else, {, if, (, typeSystem, ., isTypeToSkip, (, top, ), ), {, addTypeToSkip, (, top, ), ;, }]
[), {, addTypeToSkip, (, top, ), ;, }, if, (, relatedType, ==, null, ), {, getTypes, (, ), ., add]
[., isTypeToSkip, (, top, ), ), {, addTypeToSkip, (, top, ), ;, }, if, (, relatedType, ==, null, ), {]
[), ), {, addTypeToSkip, (, top, ), ;, }, if, (, relatedType, ==, null, ), {, getTypes, (, ), .]
[;, }, if, (, relatedType, ==, null, ), {, getTypes, (, ), ., add, (, top, ), ;, }, else]
[), ;, }, if, (, relatedType, ==, null, ), {, getTypes, (, ), ., add, (, top, ), ;, }]
[), {, getTypes, (, ), ., add, (, top, ), ;, }, else, {, getTypes, (, ), ., union, (]
[==, null, ), {, getTypes, (, ), ., add, (, top, ), ;, }, else, {, getTypes, (, ), .]
[), {, getTypes, (, ), ., add, (, top, ), ;, }, else, {, getTypes, (, ), ., union, (]
[;, }, else, {, getTypes, (, ), ., union, (, top, ,, relatedType, ), ;, }, typeSystem, ., recordInterfaces, (]
[., add, (, top, ), ;, }, else, {, getTypes, (, ), ., union, (, top, ,, relatedType, ), ;]
[), ;, }, else, {, getTypes, (, ), ., union, (, top, ,, relatedType, ), ;, }, typeSystem, ., recordInterfaces]
[;, }, typeSystem, ., recordInterfaces, (, type, ,, top, ,, this, ), ;, return, true, ;, }, }, void, addTypeToSkip]
[., union, (, top, ,, relatedType, ), ;, }, typeSystem, ., recordInterfaces, (, type, ,, top, ,, this, ), ;]
[,, relatedType, ), ;, }, typeSystem, ., recordInterfaces, (, type, ,, top, ,, this, ), ;, return, true, ;, }]
[), ;, }, typeSystem, ., recordInterfaces, (, type, ,, top, ,, this, ), ;, return, true, ;, }, }, void]
[;, return, true, ;, }, }, void, addTypeToSkip, (, T, type, ), {, for, (, T, skipType, :, typeSystem, .]
[., recordInterfaces, (, type, ,, top, ,, this, ), ;, return, true, ;, }, }, void, addTypeToSkip, (, T, type]
[,, top, ,, this, ), ;, return, true, ;, }, }, void, addTypeToSkip, (, T, type, ), {, for, (]
[,, this, ), ;, return, true, ;, }, }, void, addTypeToSkip, (, T, type, ), {, for, (, T, skipType]
[), ;, return, true, ;, }, }, void, addTypeToSkip, (, T, type, ), {, for, (, T, skipType, :, typeSystem]
[;, }, }, void, addTypeToSkip, (, T, type, ), {, for, (, T, skipType, :, typeSystem, ., getTypesToSkipForType, (, type]
[), {, typesToSkip, ., add, (, skipType, ), ;, getTypes, (, ), ., union, (, skipType, ,, type, ), ;]
[., getTypesToSkipForType, (, type, ), ), {, typesToSkip, ., add, (, skipType, ), ;, getTypes, (, ), ., union, (]
[), ), {, typesToSkip, ., add, (, skipType, ), ;, getTypes, (, ), ., union, (, skipType, ,, type, )]
[;, getTypes, (, ), ., union, (, skipType, ,, type, ), ;, }, }, void, expandTypesToSkip, (, ), {, if]
[., add, (, skipType, ), ;, getTypes, (, ), ., union, (, skipType, ,, type, ), ;, }, }, void]
[), ;, getTypes, (, ), ., union, (, skipType, ,, type, ), ;, }, }, void, expandTypesToSkip, (, ), {]
[;, }, }, void, expandTypesToSkip, (, ), {, if, (, shouldRename, (, ), ), {, int, count, =, 0, ;]
[., union, (, skipType, ,, type, ), ;, }, }, void, expandTypesToSkip, (, ), {, if, (, shouldRename, (, )]
[,, type, ), ;, }, }, void, expandTypesToSkip, (, ), {, if, (, shouldRename, (, ), ), {, int, count]
[), ;, }, }, void, expandTypesToSkip, (, ), {, if, (, shouldRename, (, ), ), {, int, count, =, 0]
[), {, int, count, =, 0, ;, while, (, true, ), {, checkState, (, ++, count, <, 10, ,, "Stuck in loop expanding types to skip."]
[;, while, (, true, ), {, checkState, (, ++, count, <, 10, ,, "Stuck in loop expanding types to skip.", ), ;, Set, <, T, >]
[), {, checkState, (, ++, count, <, 10, ,, "Stuck in loop expanding types to skip.", ), ;, Set, <, T, >, rootTypesToSkip, =, Sets, .]
[;, Set, <, T, >, rootTypesToSkip, =, Sets, ., newHashSet, (, ), ;, for, (, T, subType, :, typesToSkip, )]
[,, "Stuck in loop expanding types to skip.", ), ;, Set, <, T, >, rootTypesToSkip, =, Sets, ., newHashSet, (, ), ;, for, (, T, subType]
[<, 10, ,, "Stuck in loop expanding types to skip.", ), ;, Set, <, T, >, rootTypesToSkip, =, Sets, ., newHashSet, (, ), ;, for, (]
[<, 10, ,, "Stuck in loop expanding types to skip.", ), ;, Set, <, T, >, rootTypesToSkip, =, Sets, ., newHashSet, (, ), ;, for, (]
[,, "Stuck in loop expanding types to skip.", ), ;, Set, <, T, >, rootTypesToSkip, =, Sets, ., newHashSet, (, ), ;, for, (, T, subType]
[), ;, Set, <, T, >, rootTypesToSkip, =, Sets, ., newHashSet, (, ), ;, for, (, T, subType, :, typesToSkip]
[;, for, (, T, subType, :, typesToSkip, ), {, rootTypesToSkip, ., add, (, types, ., find, (, subType, ), )]
[., newHashSet, (, ), ;, for, (, T, subType, :, typesToSkip, ), {, rootTypesToSkip, ., add, (, types, ., find]
[), {, rootTypesToSkip, ., add, (, types, ., find, (, subType, ), ), ;, }, typesToSkip, ., addAll, (, rootTypesToSkip]
[;, }, typesToSkip, ., addAll, (, rootTypesToSkip, ), ;, Set, <, T, >, newTypesToSkip, =, Sets, ., newHashSet, (, )]
[., add, (, types, ., find, (, subType, ), ), ;, }, typesToSkip, ., addAll, (, rootTypesToSkip, ), ;, Set]
[), ;, }, typesToSkip, ., addAll, (, rootTypesToSkip, ), ;, Set, <, T, >, newTypesToSkip, =, Sets, ., newHashSet, (]
[., find, (, subType, ), ), ;, }, typesToSkip, ., addAll, (, rootTypesToSkip, ), ;, Set, <, T, >, newTypesToSkip]
[), ), ;, }, typesToSkip, ., addAll, (, rootTypesToSkip, ), ;, Set, <, T, >, newTypesToSkip, =, Sets, ., newHashSet]
[;, Set, <, T, >, newTypesToSkip, =, Sets, ., newHashSet, (, ), ;, Set, <, T, >, allTypes, =, types]
[., addAll, (, rootTypesToSkip, ), ;, Set, <, T, >, newTypesToSkip, =, Sets, ., newHashSet, (, ), ;, Set, <]
[), ;, Set, <, T, >, newTypesToSkip, =, Sets, ., newHashSet, (, ), ;, Set, <, T, >, allTypes, =]
[;, Set, <, T, >, allTypes, =, types, ., elements, (, ), ;, int, originalTypesSize, =, allTypes, ., size, (]
[., newHashSet, (, ), ;, Set, <, T, >, allTypes, =, types, ., elements, (, ), ;, int, originalTypesSize, =]
[;, int, originalTypesSize, =, allTypes, ., size, (, ), ;, for, (, T, subType, :, allTypes, ), {, if, (]
[., elements, (, ), ;, int, originalTypesSize, =, allTypes, ., size, (, ), ;, for, (, T, subType, :, allTypes]
[;, for, (, T, subType, :, allTypes, ), {, if, (, !, typesToSkip, ., contains, (, subType, ), &&, typesToSkip]
[., size, (, ), ;, for, (, T, subType, :, allTypes, ), {, if, (, !, typesToSkip, ., contains, (]
[), {, if, (, !, typesToSkip, ., contains, (, subType, ), &&, typesToSkip, ., contains, (, types, ., find, (]
[), {, newTypesToSkip, ., add, (, subType, ), ;, }, }, for, (, T, newType, :, newTypesToSkip, ), {, addTypeToSkip]
[&&, typesToSkip, ., contains, (, types, ., find, (, subType, ), ), ), {, newTypesToSkip, ., add, (, subType, )]
[&&, typesToSkip, ., contains, (, types, ., find, (, subType, ), ), ), {, newTypesToSkip, ., add, (, subType, )]
[., contains, (, subType, ), &&, typesToSkip, ., contains, (, types, ., find, (, subType, ), ), ), {, newTypesToSkip]
[), &&, typesToSkip, ., contains, (, types, ., find, (, subType, ), ), ), {, newTypesToSkip, ., add, (, subType]
[), {, newTypesToSkip, ., add, (, subType, ), ;, }, }, for, (, T, newType, :, newTypesToSkip, ), {, addTypeToSkip]
[., contains, (, types, ., find, (, subType, ), ), ), {, newTypesToSkip, ., add, (, subType, ), ;, }]
[), ), {, newTypesToSkip, ., add, (, subType, ), ;, }, }, for, (, T, newType, :, newTypesToSkip, ), {]
[., find, (, subType, ), ), ), {, newTypesToSkip, ., add, (, subType, ), ;, }, }, for, (, T]
[), ), ), {, newTypesToSkip, ., add, (, subType, ), ;, }, }, for, (, T, newType, :, newTypesToSkip, )]
[;, }, }, for, (, T, newType, :, newTypesToSkip, ), {, addTypeToSkip, (, newType, ), ;, }, if, (, types]
[., add, (, subType, ), ;, }, }, for, (, T, newType, :, newTypesToSkip, ), {, addTypeToSkip, (, newType, )]
[), ;, }, }, for, (, T, newType, :, newTypesToSkip, ), {, addTypeToSkip, (, newType, ), ;, }, if, (]
[), {, addTypeToSkip, (, newType, ), ;, }, if, (, types, ., elements, (, ), ., size, (, ), ==]
[;, }, if, (, types, ., elements, (, ), ., size, (, ), ==, originalTypesSize, ), {, break, ;, }]
[), ;, }, if, (, types, ., elements, (, ), ., size, (, ), ==, originalTypesSize, ), {, break, ;]
[), {, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return, !, skipRenaming, &&, types, !=, null]
[==, originalTypesSize, ), {, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return, !, skipRenaming, &&, types]
[., size, (, ), ==, originalTypesSize, ), {, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return]
[., elements, (, ), ., size, (, ), ==, originalTypesSize, ), {, break, ;, }, }, }, }, boolean, shouldRename]
[), {, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return, !, skipRenaming, &&, types, !=, null]
[;, }, boolean, shouldRename, (, T, type, ), {, return, !, skipRenaming, &&, !, typesToSkip, ., contains, (, type, )]
[&&, types, ., allEquivalenceClasses, (, ), ., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T, type, )]
[&&, types, !=, null, &&, types, ., allEquivalenceClasses, (, ), ., size, (, ), >, 1, ;, }, boolean, shouldRename]
[&&, types, !=, null, &&, types, ., allEquivalenceClasses, (, ), ., size, (, ), >, 1, ;, }, boolean, shouldRename]
[&&, types, ., allEquivalenceClasses, (, ), ., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T, type, )]
[!=, null, &&, types, ., allEquivalenceClasses, (, ), ., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T]
[&&, types, ., allEquivalenceClasses, (, ), ., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T, type, )]
[;, }, boolean, shouldRename, (, T, type, ), {, return, !, skipRenaming, &&, !, typesToSkip, ., contains, (, type, )]
[>, 1, ;, }, boolean, shouldRename, (, T, type, ), {, return, !, skipRenaming, &&, !, typesToSkip, ., contains, (]
[., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T, type, ), {, return, !, skipRenaming, &&, !]
[., allEquivalenceClasses, (, ), ., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T, type, ), {, return]
[;, }, boolean, shouldRename, (, T, type, ), {, return, !, skipRenaming, &&, !, typesToSkip, ., contains, (, type, )]
[;, }, boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming, ;, skipRenaming, =, true, ;, types, =, null]
[&&, !, typesToSkip, ., contains, (, type, ), ;, }, boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming]
[&&, !, typesToSkip, ., contains, (, type, ), ;, }, boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming]
[;, }, boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming, ;, skipRenaming, =, true, ;, types, =, null]
[;, }, boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming, ;, skipRenaming, =, true, ;, types, =, null]
[., contains, (, type, ), ;, }, boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming, ;, skipRenaming, =]
[), ;, }, boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming, ;, skipRenaming, =, true, ;, types, =]
[;, skipRenaming, =, true, ;, types, =, null, ;, return, changed, ;, }, boolean, scheduleRenaming, (, Node, node, ,, T]
[;, skipRenaming, =, true, ;, types, =, null, ;, return, changed, ;, }, boolean, scheduleRenaming, (, Node, node, ,, T]
[=, true, ;, types, =, null, ;, return, changed, ;, }, boolean, scheduleRenaming, (, Node, node, ,, T, type, )]
[;, types, =, null, ;, return, changed, ;, }, boolean, scheduleRenaming, (, Node, node, ,, T, type, ), {, if]
[=, null, ;, return, changed, ;, }, boolean, scheduleRenaming, (, Node, node, ,, T, type, ), {, if, (, !]
[;, return, changed, ;, }, boolean, scheduleRenaming, (, Node, node, ,, T, type, ), {, if, (, !, skipRenaming, )]
[;, }, boolean, scheduleRenaming, (, Node, node, ,, T, type, ), {, if, (, !, skipRenaming, ), {, if, (]
[), {, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {, invalidate, (, ), ;, return, false, ;, }]
[), {, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {, invalidate, (, ), ;, return, false, ;, }]
[), {, invalidate, (, ), ;, return, false, ;, }, renameNodes, ., add, (, node, ), ;, rootTypes, ., put]
[., isInvalidatingType, (, type, ), ), {, invalidate, (, ), ;, return, false, ;, }, renameNodes, ., add, (, node]
[), ), {, invalidate, (, ), ;, return, false, ;, }, renameNodes, ., add, (, node, ), ;, rootTypes, .]
[;, return, false, ;, }, renameNodes, ., add, (, node, ), ;, rootTypes, ., put, (, node, ,, type, )]
[;, }, renameNodes, ., add, (, node, ), ;, rootTypes, ., put, (, node, ,, type, ), ;, }, return]
[;, rootTypes, ., put, (, node, ,, type, ), ;, }, return, true, ;, }, }, private, Map, <, String]
[., add, (, node, ), ;, rootTypes, ., put, (, node, ,, type, ), ;, }, return, true, ;, }]
[), ;, rootTypes, ., put, (, node, ,, type, ), ;, }, return, true, ;, }, }, private, Map, <]
[;, }, return, true, ;, }, }, private, Map, <, String, ,, Property, >, properties, =, Maps, ., newHashMap, (]
[., put, (, node, ,, type, ), ;, }, return, true, ;, }, }, private, Map, <, String, ,, Property]
[,, type, ), ;, }, return, true, ;, }, }, private, Map, <, String, ,, Property, >, properties, =, Maps]
[), ;, }, return, true, ;, }, }, private, Map, <, String, ,, Property, >, properties, =, Maps, ., newHashMap]
[;, }, }, private, Map, <, String, ,, Property, >, properties, =, Maps, ., newHashMap, (, ), ;, static, DisambiguateProperties]
[;, static, DisambiguateProperties, <, JSType, >, forJSTypeSystem, (, AbstractCompiler, compiler, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {]
[., newHashMap, (, ), ;, static, DisambiguateProperties, <, JSType, >, forJSTypeSystem, (, AbstractCompiler, compiler, ,, Map, <, String, ,, CheckLevel]
[;, }, static, DisambiguateProperties, <, ConcreteType, >, forConcreteTypeSystem, (, AbstractCompiler, compiler, ,, TightenTypes, tt, ,, Map, <, String, ,, CheckLevel]
[,, new, JSTypeSystem, (, compiler, ), ,, propertiesToErrorFor, ), ;, }, static, DisambiguateProperties, <, ConcreteType, >, forConcreteTypeSystem, (, AbstractCompiler, compiler]
[,, propertiesToErrorFor, ), ;, }, static, DisambiguateProperties, <, ConcreteType, >, forConcreteTypeSystem, (, AbstractCompiler, compiler, ,, TightenTypes, tt, ,, Map, <]
[), ,, propertiesToErrorFor, ), ;, }, static, DisambiguateProperties, <, ConcreteType, >, forConcreteTypeSystem, (, AbstractCompiler, compiler, ,, TightenTypes, tt, ,, Map]
[), ;, }, static, DisambiguateProperties, <, ConcreteType, >, forConcreteTypeSystem, (, AbstractCompiler, compiler, ,, TightenTypes, tt, ,, Map, <, String, ,]
[;, }, private, DisambiguateProperties, (, AbstractCompiler, compiler, ,, TypeSystem, <, T, >, typeSystem, ,, Map, <, String, ,, CheckLevel, >]
[,, new, ConcreteTypeSystem, (, tt, ,, compiler, ., getCodingConvention, (, ), ), ,, propertiesToErrorFor, ), ;, }, private, DisambiguateProperties, (]
[,, propertiesToErrorFor, ), ;, }, private, DisambiguateProperties, (, AbstractCompiler, compiler, ,, TypeSystem, <, T, >, typeSystem, ,, Map, <, String]
[,, compiler, ., getCodingConvention, (, ), ), ,, propertiesToErrorFor, ), ;, }, private, DisambiguateProperties, (, AbstractCompiler, compiler, ,, TypeSystem, <]
[), ,, propertiesToErrorFor, ), ;, }, private, DisambiguateProperties, (, AbstractCompiler, compiler, ,, TypeSystem, <, T, >, typeSystem, ,, Map, <]
[., getCodingConvention, (, ), ), ,, propertiesToErrorFor, ), ;, }, private, DisambiguateProperties, (, AbstractCompiler, compiler, ,, TypeSystem, <, T, >]
[), ;, }, private, DisambiguateProperties, (, AbstractCompiler, compiler, ,, TypeSystem, <, T, >, typeSystem, ,, Map, <, String, ,, CheckLevel]
[=, compiler, ;, this, ., typeSystem, =, typeSystem, ;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !, this, .]
[., compiler, =, compiler, ;, this, ., typeSystem, =, typeSystem, ;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !]
[;, this, ., typeSystem, =, typeSystem, ;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !, this, ., propertiesToErrorFor, .]
[=, typeSystem, ;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !, this, ., propertiesToErrorFor, ., isEmpty, (, ), )]
[., typeSystem, =, typeSystem, ;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !, this, ., propertiesToErrorFor, ., isEmpty, (]
[;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !, this, ., propertiesToErrorFor, ., isEmpty, (, ), ), {, this]
[=, propertiesToErrorFor, ;, if, (, !, this, ., propertiesToErrorFor, ., isEmpty, (, ), ), {, this, ., invalidationMap, =, LinkedHashMultimap]
[., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !, this, ., propertiesToErrorFor, ., isEmpty, (, ), ), {, this, ., invalidationMap]
[;, if, (, !, this, ., propertiesToErrorFor, ., isEmpty, (, ), ), {, this, ., invalidationMap, =, LinkedHashMultimap, ., create]
[), {, this, ., invalidationMap, =, LinkedHashMultimap, ., create, (, ), ;, }, else, {, this, ., invalidationMap, =, null]
[), {, this, ., invalidationMap, =, LinkedHashMultimap, ., create, (, ), ;, }, else, {, this, ., invalidationMap, =, null]
[., isEmpty, (, ), ), {, this, ., invalidationMap, =, LinkedHashMultimap, ., create, (, ), ;, }, else, {, this]
[., propertiesToErrorFor, ., isEmpty, (, ), ), {, this, ., invalidationMap, =, LinkedHashMultimap, ., create, (, ), ;, }, else]
[=, LinkedHashMultimap, ., create, (, ), ;, }, else, {, this, ., invalidationMap, =, null, ;, }, }, @, Override]
[., invalidationMap, =, LinkedHashMultimap, ., create, (, ), ;, }, else, {, this, ., invalidationMap, =, null, ;, }, }]
[;, }, else, {, this, ., invalidationMap, =, null, ;, }, }, @, Override, public, void, process, (, Node, externs]
[., create, (, ), ;, }, else, {, this, ., invalidationMap, =, null, ;, }, }, @, Override, public, void]
[=, null, ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, .]
[., invalidationMap, =, null, ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, ), ;, for, (, TypeMismatch, mis, :, compiler]
[), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (]
[==, LifeCycleStage, ., NORMALIZED, ), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, )]
[., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, ), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, )]
[), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (]
[., NORMALIZED, ), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {]
[), {, addInvalidatingType, (, mis, ., typeA, ,, mis, ., src, ), ;, addInvalidatingType, (, mis, ., typeB, ,, mis]
[., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ,, mis, ., src, ), ;, addInvalidatingType, (, mis]
[., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ,, mis, ., src, )]
[;, addInvalidatingType, (, mis, ., typeB, ,, mis, ., src, ), ;, }, StaticScope, <, T, >, scope, =, typeSystem]
[,, mis, ., src, ), ;, addInvalidatingType, (, mis, ., typeB, ,, mis, ., src, ), ;, }, StaticScope, <]
[., typeA, ,, mis, ., src, ), ;, addInvalidatingType, (, mis, ., typeB, ,, mis, ., src, ), ;, }]
[), ;, addInvalidatingType, (, mis, ., typeB, ,, mis, ., src, ), ;, }, StaticScope, <, T, >, scope, =]
[., src, ), ;, addInvalidatingType, (, mis, ., typeB, ,, mis, ., src, ), ;, }, StaticScope, <, T, >]
[;, }, StaticScope, <, T, >, scope, =, typeSystem, ., getRootScope, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, mis, ., src, ), ;, }, StaticScope, <, T, >, scope, =, typeSystem, ., getRootScope, (, ), ;, NodeTraversal]
[., typeB, ,, mis, ., src, ), ;, }, StaticScope, <, T, >, scope, =, typeSystem, ., getRootScope, (, )]
[), ;, }, StaticScope, <, T, >, scope, =, typeSystem, ., getRootScope, (, ), ;, NodeTraversal, ., traverse, (, compiler]
[., src, ), ;, }, StaticScope, <, T, >, scope, =, typeSystem, ., getRootScope, (, ), ;, NodeTraversal, ., traverse]
[;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, FindExternProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler]
[., getRootScope, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, FindExternProperties, (, ), ), ;, NodeTraversal]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindRenameableProperties, (, ), ), ;, renameProperties, (, ), ;, }]
[., traverse, (, compiler, ,, externs, ,, new, FindExternProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, externs, ,, new, FindExternProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindRenameableProperties, (]
[,, new, FindExternProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindRenameableProperties, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindRenameableProperties, (, ), ), ;, renameProperties, (, ), ;]
[;, renameProperties, (, ), ;, }, private, void, recordInvalidationError, (, JSType, t, ,, JSError, error, ), {, if, (, !]
[., traverse, (, compiler, ,, root, ,, new, FindRenameableProperties, (, ), ), ;, renameProperties, (, ), ;, }, private, void]
[,, root, ,, new, FindRenameableProperties, (, ), ), ;, renameProperties, (, ), ;, }, private, void, recordInvalidationError, (, JSType, t]
[,, new, FindRenameableProperties, (, ), ), ;, renameProperties, (, ), ;, }, private, void, recordInvalidationError, (, JSType, t, ,, JSError]
[), ;, renameProperties, (, ), ;, }, private, void, recordInvalidationError, (, JSType, t, ,, JSError, error, ), {, if, (]
[;, }, private, void, recordInvalidationError, (, JSType, t, ,, JSError, error, ), {, if, (, !, t, ., isObject, (]
[), {, return, ;, }, if, (, invalidationMap, !=, null, ), {, invalidationMap, ., put, (, t, ,, error, )]
[), {, return, ;, }, if, (, invalidationMap, !=, null, ), {, invalidationMap, ., put, (, t, ,, error, )]
[., isObject, (, ), ), {, return, ;, }, if, (, invalidationMap, !=, null, ), {, invalidationMap, ., put, (]
[), {, invalidationMap, ., put, (, t, ,, error, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ,]
[!=, null, ), {, invalidationMap, ., put, (, t, ,, error, ), ;, }, }, private, void, addInvalidatingType, (, JSType]
[), {, invalidationMap, ., put, (, t, ,, error, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ,]
[;, }, }, private, void, addInvalidatingType, (, JSType, type, ,, JSError, error, ), {, type, =, type, ., restrictByNotNullOrUndefined, (]
[., put, (, t, ,, error, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ,, JSError, error, )]
[,, error, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ,, JSError, error, ), {, type, =, type]
[), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ,, JSError, error, ), {, type, =, type, ., restrictByNotNullOrUndefined]
[=, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt]
[;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, )]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, type]
[), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addInvalidatingType, (]
[., isUnionType, (, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[), {, addInvalidatingType, (, alt, ,, error, ), ;, }, }, else, if, (, type, ., isEnumElementType, (, ), )]
[., getAlternates, (, ), ), {, addInvalidatingType, (, alt, ,, error, ), ;, }, }, else, if, (, type, .]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addInvalidatingType, (, alt, ,, error, ), ;, }, }, else]
[;, }, }, else, if, (, type, ., isEnumElementType, (, ), ), {, addInvalidatingType, (, type, ., toMaybeEnumElementType, (, )]
[,, error, ), ;, }, }, else, if, (, type, ., isEnumElementType, (, ), ), {, addInvalidatingType, (, type, .]
[), ;, }, }, else, if, (, type, ., isEnumElementType, (, ), ), {, addInvalidatingType, (, type, ., toMaybeEnumElementType, (]
[), {, addInvalidatingType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, error, ), ;, }, else, {]
[., isEnumElementType, (, ), ), {, addInvalidatingType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, error, )]
[;, }, else, {, typeSystem, ., addInvalidatingType, (, type, ), ;, recordInvalidationError, (, type, ,, error, ), ;, ObjectType, objType]
[,, error, ), ;, }, else, {, typeSystem, ., addInvalidatingType, (, type, ), ;, recordInvalidationError, (, type, ,, error, )]
[., getPrimitiveType, (, ), ,, error, ), ;, }, else, {, typeSystem, ., addInvalidatingType, (, type, ), ;, recordInvalidationError, (]
[., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, error, ), ;, }, else, {, typeSystem, ., addInvalidatingType, (, type]
[), ;, }, else, {, typeSystem, ., addInvalidatingType, (, type, ), ;, recordInvalidationError, (, type, ,, error, ), ;, ObjectType]
[;, recordInvalidationError, (, type, ,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[., addInvalidatingType, (, type, ), ;, recordInvalidationError, (, type, ,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (]
[), ;, recordInvalidationError, (, type, ,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if]
[;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., getImplicitPrototype]
[,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&]
[), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, .]
[;, if, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, null, ), {, typeSystem, ., addInvalidatingType, (]
[., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, null, )]
[), ;, if, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, null, ), {, typeSystem, ., addInvalidatingType]
[), {, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), ), ;, recordInvalidationError, (, objType, ., getImplicitPrototype, (, )]
[&&, objType, ., getImplicitPrototype, (, ), !=, null, ), {, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), )]
[!=, null, &&, objType, ., getImplicitPrototype, (, ), !=, null, ), {, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (]
[&&, objType, ., getImplicitPrototype, (, ), !=, null, ), {, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), )]
[), {, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), ), ;, recordInvalidationError, (, objType, ., getImplicitPrototype, (, )]
[!=, null, ), {, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), ), ;, recordInvalidationError, (, objType, ., getImplicitPrototype]
[., getImplicitPrototype, (, ), !=, null, ), {, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), ), ;, recordInvalidationError]
[), {, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), ), ;, recordInvalidationError, (, objType, ., getImplicitPrototype, (, )]
[;, recordInvalidationError, (, objType, ., getImplicitPrototype, (, ), ,, error, ), ;, }, }, }, protected, Property, getProperty, (, String]
[., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), ), ;, recordInvalidationError, (, objType, ., getImplicitPrototype, (, ), ,, error, )]
[), ;, recordInvalidationError, (, objType, ., getImplicitPrototype, (, ), ,, error, ), ;, }, }, }, protected, Property, getProperty, (]
[., getImplicitPrototype, (, ), ), ;, recordInvalidationError, (, objType, ., getImplicitPrototype, (, ), ,, error, ), ;, }, }, }]
[;, }, }, }, protected, Property, getProperty, (, String, name, ), {, if, (, !, properties, ., containsKey, (, name]
[,, error, ), ;, }, }, }, protected, Property, getProperty, (, String, name, ), {, if, (, !, properties, .]
[., getImplicitPrototype, (, ), ,, error, ), ;, }, }, }, protected, Property, getProperty, (, String, name, ), {, if]
[), ;, }, }, }, protected, Property, getProperty, (, String, name, ), {, if, (, !, properties, ., containsKey, (]
[), {, properties, ., put, (, name, ,, new, Property, (, name, ), ), ;, }, return, properties, ., get]
[), {, properties, ., put, (, name, ,, new, Property, (, name, ), ), ;, }, return, properties, ., get]
[., containsKey, (, name, ), ), {, properties, ., put, (, name, ,, new, Property, (, name, ), ), ;]
[), ), {, properties, ., put, (, name, ,, new, Property, (, name, ), ), ;, }, return, properties, .]
[;, }, return, properties, ., get, (, name, ), ;, }, T, getTypeWithProperty, (, String, field, ,, T, type, )]
[., put, (, name, ,, new, Property, (, name, ), ), ;, }, return, properties, ., get, (, name, )]
[,, new, Property, (, name, ), ), ;, }, return, properties, ., get, (, name, ), ;, }, T, getTypeWithProperty]
[), ;, }, return, properties, ., get, (, name, ), ;, }, T, getTypeWithProperty, (, String, field, ,, T, type]
[), ), ;, }, return, properties, ., get, (, name, ), ;, }, T, getTypeWithProperty, (, String, field, ,, T]
[;, }, T, getTypeWithProperty, (, String, field, ,, T, type, ), {, return, typeSystem, ., getTypeWithProperty, (, field, ,, type]
[., get, (, name, ), ;, }, T, getTypeWithProperty, (, String, field, ,, T, type, ), {, return, typeSystem, .]
[), ;, }, T, getTypeWithProperty, (, String, field, ,, T, type, ), {, return, typeSystem, ., getTypeWithProperty, (, field, ,]
[;, }, private, abstract, class, AbstractScopingCallback, implements, ScopedCallback, {, protected, final, Stack, <, StaticScope, <, T, >, >, scopes, =]
[., getTypeWithProperty, (, field, ,, type, ), ;, }, private, abstract, class, AbstractScopingCallback, implements, ScopedCallback, {, protected, final, Stack, <]
[,, type, ), ;, }, private, abstract, class, AbstractScopingCallback, implements, ScopedCallback, {, protected, final, Stack, <, StaticScope, <, T, >]
[), ;, }, private, abstract, class, AbstractScopingCallback, implements, ScopedCallback, {, protected, final, Stack, <, StaticScope, <, T, >, >, scopes]
[;, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return, true, ;]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), )]
[), {, scopes, ., push, (, typeSystem, ., getRootScope, (, ), ), ;, }, else, {, scopes, ., push, (]
[., inGlobalScope, (, ), ), {, scopes, ., push, (, typeSystem, ., getRootScope, (, ), ), ;, }, else, {]
[;, }, else, {, scopes, ., push, (, typeSystem, ., getFunctionScope, (, t, ., getScopeRoot, (, ), ), ), ;]
[., push, (, typeSystem, ., getRootScope, (, ), ), ;, }, else, {, scopes, ., push, (, typeSystem, ., getFunctionScope]
[), ;, }, else, {, scopes, ., push, (, typeSystem, ., getFunctionScope, (, t, ., getScopeRoot, (, ), ), )]
[., getRootScope, (, ), ), ;, }, else, {, scopes, ., push, (, typeSystem, ., getFunctionScope, (, t, ., getScopeRoot]
[;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, scopes, ., pop, (, ), ;, }]
[., push, (, typeSystem, ., getFunctionScope, (, t, ., getScopeRoot, (, ), ), ), ;, }, }, @, Override, public]
[), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, scopes, ., pop, (, ), ;]
[., getFunctionScope, (, t, ., getScopeRoot, (, ), ), ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal]
[), ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, scopes, ., pop, (, )]
[., getScopeRoot, (, ), ), ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, scopes]
[;, }, protected, StaticScope, <, T, >, getScope, (, ), {, return, scopes, ., peek, (, ), ;, }, }]
[., pop, (, ), ;, }, protected, StaticScope, <, T, >, getScope, (, ), {, return, scopes, ., peek, (]
[;, }, }, private, class, FindExternProperties, extends, AbstractScopingCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., peek, (, ), ;, }, }, private, class, FindExternProperties, extends, AbstractScopingCallback, {, @, Override, public, void, visit, (, NodeTraversal]
[), {, String, field, =, n, ., getLastChild, (, ), ., getString, (, ), ;, T, type, =, typeSystem, .]
[., isGetProp, (, ), ), {, String, field, =, n, ., getLastChild, (, ), ., getString, (, ), ;, T]
[;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,, field, )]
[., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,, n, ., getFirstChild, (]
[., getLastChild, (, ), ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,]
[;, Property, prop, =, getProperty, (, field, ), ;, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {, prop]
[., getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,, field, ), ;, Property, prop, =, getProperty]
[,, n, ., getFirstChild, (, ), ,, field, ), ;, Property, prop, =, getProperty, (, field, ), ;, if, (]
[,, field, ), ;, Property, prop, =, getProperty, (, field, ), ;, if, (, typeSystem, ., isInvalidatingType, (, type, )]
[., getFirstChild, (, ), ,, field, ), ;, Property, prop, =, getProperty, (, field, ), ;, if, (, typeSystem, .]
[), ;, Property, prop, =, getProperty, (, field, ), ;, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {]
[;, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {, prop, ., invalidate, (, ), ;, }, else, {]
[), ;, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {, prop, ., invalidate, (, ), ;, }, else]
[), {, prop, ., invalidate, (, ), ;, }, else, {, prop, ., addTypeToSkip, (, type, ), ;, if, (]
[., isInvalidatingType, (, type, ), ), {, prop, ., invalidate, (, ), ;, }, else, {, prop, ., addTypeToSkip, (]
[), ), {, prop, ., invalidate, (, ), ;, }, else, {, prop, ., addTypeToSkip, (, type, ), ;, if]
[;, }, else, {, prop, ., addTypeToSkip, (, type, ), ;, if, (, (, type, =, typeSystem, ., getInstanceFromPrototype, (]
[., invalidate, (, ), ;, }, else, {, prop, ., addTypeToSkip, (, type, ), ;, if, (, (, type, =]
[;, if, (, (, type, =, typeSystem, ., getInstanceFromPrototype, (, type, ), ), !=, null, ), {, prop, ., getTypes]
[., addTypeToSkip, (, type, ), ;, if, (, (, type, =, typeSystem, ., getInstanceFromPrototype, (, type, ), ), !=, null]
[), ;, if, (, (, type, =, typeSystem, ., getInstanceFromPrototype, (, type, ), ), !=, null, ), {, prop, .]
[), {, prop, ., getTypes, (, ), ., add, (, type, ), ;, prop, ., typesToSkip, ., add, (, type]
[!=, null, ), {, prop, ., getTypes, (, ), ., add, (, type, ), ;, prop, ., typesToSkip, ., add]
[=, typeSystem, ., getInstanceFromPrototype, (, type, ), ), !=, null, ), {, prop, ., getTypes, (, ), ., add, (]
[), !=, null, ), {, prop, ., getTypes, (, ), ., add, (, type, ), ;, prop, ., typesToSkip, .]
[., getInstanceFromPrototype, (, type, ), ), !=, null, ), {, prop, ., getTypes, (, ), ., add, (, type, )]
[), ), !=, null, ), {, prop, ., getTypes, (, ), ., add, (, type, ), ;, prop, ., typesToSkip]
[), {, prop, ., getTypes, (, ), ., add, (, type, ), ;, prop, ., typesToSkip, ., add, (, type]
[;, prop, ., typesToSkip, ., add, (, type, ), ;, }, }, }, }, }, private, class, FindRenameableProperties, extends, AbstractScopingCallback]
[., add, (, type, ), ;, prop, ., typesToSkip, ., add, (, type, ), ;, }, }, }, }, }]
[., getTypes, (, ), ., add, (, type, ), ;, prop, ., typesToSkip, ., add, (, type, ), ;, }]
[), ;, prop, ., typesToSkip, ., add, (, type, ), ;, }, }, }, }, }, private, class, FindRenameableProperties, extends]
[;, }, }, }, }, }, private, class, FindRenameableProperties, extends, AbstractScopingCallback, {, @, Override, public, void, visit, (, NodeTraversal, t]
[., add, (, type, ), ;, }, }, }, }, }, private, class, FindRenameableProperties, extends, AbstractScopingCallback, {, @, Override, public]
[., typesToSkip, ., add, (, type, ), ;, }, }, }, }, }, private, class, FindRenameableProperties, extends, AbstractScopingCallback, {, @]
[), ;, }, }, }, }, }, private, class, FindRenameableProperties, extends, AbstractScopingCallback, {, @, Override, public, void, visit, (, NodeTraversal]
[), {, handleGetProp, (, t, ,, n, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {]
[., isGetProp, (, ), ), {, handleGetProp, (, t, ,, n, ), ;, }, else, if, (, n, ., isObjectLit]
[;, }, else, if, (, n, ., isObjectLit, (, ), ), {, handleObjectLit, (, t, ,, n, ), ;, }]
[,, n, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, handleObjectLit, (, t, ,, n]
[), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, handleObjectLit, (, t, ,, n, ), ;]
[), {, handleObjectLit, (, t, ,, n, ), ;, }, }, private, void, handleGetProp, (, NodeTraversal, t, ,, Node, n]
[., isObjectLit, (, ), ), {, handleObjectLit, (, t, ,, n, ), ;, }, }, private, void, handleGetProp, (, NodeTraversal]
[;, }, }, private, void, handleGetProp, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =, n, ., getLastChild]
[,, n, ), ;, }, }, private, void, handleGetProp, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =]
[), ;, }, }, private, void, handleGetProp, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =, n, .]
[;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,, name, )]
[., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,, n, ., getFirstChild, (]
[., getLastChild, (, ), ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,]
[;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, n, ., getLastChild, (]
[., getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,, name, ), ;, Property, prop, =, getProperty]
[,, n, ., getFirstChild, (, ), ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (]
[,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, n]
[., getFirstChild, (, ), ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop]
[), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, n, ., getLastChild]
[;, if, (, !, prop, ., scheduleRenaming, (, n, ., getLastChild, (, ), ,, processProperty, (, t, ,, prop, ,]
[), ;, if, (, !, prop, ., scheduleRenaming, (, n, ., getLastChild, (, ), ,, processProperty, (, t, ,, prop]
[), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, String, suggestion, =, "", ;, if, (, type]
[), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, String, suggestion, =, "", ;, if, (, type]
[., scheduleRenaming, (, n, ., getLastChild, (, ), ,, processProperty, (, t, ,, prop, ,, type, ,, null, ), )]
[,, processProperty, (, t, ,, prop, ,, type, ,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (]
[., getLastChild, (, ), ,, processProperty, (, t, ,, prop, ,, type, ,, null, ), ), ), {, if, (]
[), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, String, suggestion, =, "", ;, if, (]
[,, prop, ,, type, ,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {]
[,, type, ,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, String, suggestion]
[,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, String, suggestion, =, ""]
[), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, String, suggestion, =, "", ;, if]
[), {, String, suggestion, =, "", ;, if, (, type, instanceof, JSType, ), {, JSType, jsType, =, (, JSType, )]
[., containsKey, (, name, ), ), {, String, suggestion, =, "", ;, if, (, type, instanceof, JSType, ), {, JSType]
[), ), {, String, suggestion, =, "", ;, if, (, type, instanceof, JSType, ), {, JSType, jsType, =, (, JSType]
[;, if, (, type, instanceof, JSType, ), {, JSType, jsType, =, (, JSType, ), type, ;, if, (, jsType, .]
[), {, JSType, jsType, =, (, JSType, ), type, ;, if, (, jsType, ., isAllType, (, ), ||, jsType, .]
[instanceof, JSType, ), {, JSType, jsType, =, (, JSType, ), type, ;, if, (, jsType, ., isAllType, (, ), ||]
[;, if, (, jsType, ., isAllType, (, ), ||, jsType, ., isUnknownType, (, ), ), {, if, (, n, .]
[;, if, (, jsType, ., isAllType, (, ), ||, jsType, ., isUnknownType, (, ), ), {, if, (, n, .]
[), {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {, suggestion, =, "The \"this\" object is unknown in the function,", +, "consider using @this"]
[||, jsType, ., isUnknownType, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), )]
[., isAllType, (, ), ||, jsType, ., isUnknownType, (, ), ), {, if, (, n, ., getFirstChild, (, ), .]
[), {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {, suggestion, =, "The \"this\" object is unknown in the function,", +, "consider using @this"]
[., isUnknownType, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {, suggestion]
[), {, suggestion, =, "The \"this\" object is unknown in the function,", +, "consider using @this", ;, }, else, {, String, qName, =, n, ., getFirstChild, (, ), .]
[., isThis, (, ), ), {, suggestion, =, "The \"this\" object is unknown in the function,", +, "consider using @this", ;, }, else, {, String, qName, =, n, .]
[., getFirstChild, (, ), ., isThis, (, ), ), {, suggestion, =, "The \"this\" object is unknown in the function,", +, "consider using @this", ;, }, else, {, String]
[=, "The \"this\" object is unknown in the function,", +, "consider using @this", ;, }, else, {, String, qName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[;, }, else, {, String, qName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, suggestion, =, "Consider casting "]
[+, "consider using @this", ;, }, else, {, String, qName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, suggestion]
[;, }, else, {, String, qName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, suggestion, =, "Consider casting "]
[;, suggestion, =, "Consider casting ", +, qName, +, " if you know it's type.", ;, }, }, else, {, List, <, String, >, errors, =, Lists]
[., getQualifiedName, (, ), ;, suggestion, =, "Consider casting ", +, qName, +, " if you know it's type.", ;, }, }, else, {, List, <, String]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, suggestion, =, "Consider casting ", +, qName, +, " if you know it's type.", ;, }, }, else]
[=, "Consider casting ", +, qName, +, " if you know it's type.", ;, }, }, else, {, List, <, String, >, errors, =, Lists, ., newArrayList]
[;, }, }, else, {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, printErrorLocations, (, errors]
[+, " if you know it's type.", ;, }, }, else, {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, printErrorLocations]
[+, qName, +, " if you know it's type.", ;, }, }, else, {, List, <, String, >, errors, =, Lists, ., newArrayList, (, )]
[+, " if you know it's type.", ;, }, }, else, {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, printErrorLocations]
[;, }, }, else, {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, printErrorLocations, (, errors]
[;, printErrorLocations, (, errors, ,, jsType, ), ;, if, (, !, errors, ., isEmpty, (, ), ), {, suggestion, =]
[., newArrayList, (, ), ;, printErrorLocations, (, errors, ,, jsType, ), ;, if, (, !, errors, ., isEmpty, (, )]
[;, if, (, !, errors, ., isEmpty, (, ), ), {, suggestion, =, "Consider fixing errors for the following types:\n", ;, suggestion, +=, Joiner, ., on]
[,, jsType, ), ;, if, (, !, errors, ., isEmpty, (, ), ), {, suggestion, =, "Consider fixing errors for the following types:\n", ;, suggestion, +=]
[), ;, if, (, !, errors, ., isEmpty, (, ), ), {, suggestion, =, "Consider fixing errors for the following types:\n", ;, suggestion, +=, Joiner, .]
[), {, suggestion, =, "Consider fixing errors for the following types:\n", ;, suggestion, +=, Joiner, ., on, (, "\n", ), ., join, (, errors, ), ;]
[), {, suggestion, =, "Consider fixing errors for the following types:\n", ;, suggestion, +=, Joiner, ., on, (, "\n", ), ., join, (, errors, ), ;]
[., isEmpty, (, ), ), {, suggestion, =, "Consider fixing errors for the following types:\n", ;, suggestion, +=, Joiner, ., on, (, "\n", ), ., join]
[=, "Consider fixing errors for the following types:\n", ;, suggestion, +=, Joiner, ., on, (, "\n", ), ., join, (, errors, ), ;, }, }, }]
[;, suggestion, +=, Joiner, ., on, (, "\n", ), ., join, (, errors, ), ;, }, }, }, compiler, .]
[+=, Joiner, ., on, (, "\n", ), ., join, (, errors, ), ;, }, }, }, compiler, ., report, (]
[;, }, }, }, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,]
[., join, (, errors, ), ;, }, }, }, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName]
[., on, (, "\n", ), ., join, (, errors, ), ;, }, }, }, compiler, ., report, (, JSError, .]
[), ., join, (, errors, ), ;, }, }, }, compiler, ., report, (, JSError, ., make, (, t, .]
[), ;, }, }, }, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n]
[;, }, }, }, private, void, handleObjectLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, child, =, n, .]
[., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name]
[), ;, }, }, }, private, void, handleObjectLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, child, =, n]
[., make, (, t, ., getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, .]
[,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null]
[., getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,]
[,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null"]
[,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), )]
[., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type]
[), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, )]
[,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString]
[., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n]
[,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, )]
[,, n, ., toString, (, ), ,, suggestion, ), ), ;, }, }, }, private, void, handleObjectLit, (, NodeTraversal, t]
[), ,, n, ., toString, (, ), ,, suggestion, ), ), ;, }, }, }, private, void, handleObjectLit, (, NodeTraversal]
[?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, suggestion, ), ), ;]
[==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, suggestion, )]
[?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, suggestion, ), ), ;]
[:, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, suggestion, ), ), ;, }, }]
[), ,, n, ., toString, (, ), ,, suggestion, ), ), ;, }, }, }, private, void, handleObjectLit, (, NodeTraversal]
[., toString, (, ), ), ,, n, ., toString, (, ), ,, suggestion, ), ), ;, }, }, }, private]
[,, suggestion, ), ), ;, }, }, }, private, void, handleObjectLit, (, NodeTraversal, t, ,, Node, n, ), {, Node]
[., toString, (, ), ,, suggestion, ), ), ;, }, }, }, private, void, handleObjectLit, (, NodeTraversal, t, ,, Node]
[), ), ;, }, }, }, private, void, handleObjectLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, child, =]
[;, while, (, child, !=, null, ), {, String, name, =, child, ., getString, (, ), ;, T, type, =]
[., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, String, name, =, child, ., getString, (, )]
[), {, String, name, =, child, ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (]
[!=, null, ), {, String, name, =, child, ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (]
[), {, String, name, =, child, ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (]
[;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,, n, ,, name, ), ;, Property, prop, =]
[., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,, n, ,, name, )]
[;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, child, ,, processProperty, (]
[., getType, (, getScope, (, ), ,, n, ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;]
[,, n, ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming]
[,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, child]
[), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, child, ,, processProperty]
[;, if, (, !, prop, ., scheduleRenaming, (, child, ,, processProperty, (, t, ,, prop, ,, type, ,, null, )]
[), ;, if, (, !, prop, ., scheduleRenaming, (, child, ,, processProperty, (, t, ,, prop, ,, type, ,, null]
[), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, compiler, ., report, (, JSError, ., make, (]
[), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, compiler, ., report, (, JSError, ., make, (]
[., scheduleRenaming, (, child, ,, processProperty, (, t, ,, prop, ,, type, ,, null, ), ), ), {, if, (]
[,, processProperty, (, t, ,, prop, ,, type, ,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (]
[), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, compiler, ., report, (, JSError, ., make]
[,, prop, ,, type, ,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {]
[,, type, ,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, compiler, .]
[,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, compiler, ., report, (]
[), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, compiler, ., report, (, JSError, .]
[), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, child, ,, propertiesToErrorFor, .]
[., containsKey, (, name, ), ), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, )]
[), ), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, child, ,, propertiesToErrorFor]
[;, }, }, child, =, child, ., getNext, (, ), ;, }, }, private, void, printErrorLocations, (, List, <, String]
[., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name]
[), ;, }, }, child, =, child, ., getNext, (, ), ;, }, }, private, void, printErrorLocations, (, List, <]
[., make, (, t, ., getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, .]
[,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null]
[., getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,]
[,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null"]
[,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), )]
[., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type]
[), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, )]
[,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString]
[., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n]
[,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, )]
[,, n, ., toString, (, ), ,, "", ), ), ;, }, }, child, =, child, ., getNext, (, )]
[), ,, n, ., toString, (, ), ,, "", ), ), ;, }, }, child, =, child, ., getNext, (]
[?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, "", ), ), ;]
[==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, "", )]
[?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, "", ), ), ;]
[:, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, "", ), ), ;, }, }]
[), ,, n, ., toString, (, ), ,, "", ), ), ;, }, }, child, =, child, ., getNext, (]
[., toString, (, ), ), ,, n, ., toString, (, ), ,, "", ), ), ;, }, }, child, =]
[,, "", ), ), ;, }, }, child, =, child, ., getNext, (, ), ;, }, }, private, void, printErrorLocations]
[., toString, (, ), ,, "", ), ), ;, }, }, child, =, child, ., getNext, (, ), ;, }]
[), ), ;, }, }, child, =, child, ., getNext, (, ), ;, }, }, private, void, printErrorLocations, (, List]
[=, child, ., getNext, (, ), ;, }, }, private, void, printErrorLocations, (, List, <, String, >, errors, ,, JSType]
[;, }, }, private, void, printErrorLocations, (, List, <, String, >, errors, ,, JSType, t, ), {, if, (, !]
[., getNext, (, ), ;, }, }, private, void, printErrorLocations, (, List, <, String, >, errors, ,, JSType, t, )]
[), {, return, ;, }, if, (, t, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, t]
[||, t, ., isAllType, (, ), ), {, return, ;, }, if, (, t, ., isUnionType, (, ), ), {]
[||, t, ., isAllType, (, ), ), {, return, ;, }, if, (, t, ., isUnionType, (, ), ), {]
[., isObject, (, ), ||, t, ., isAllType, (, ), ), {, return, ;, }, if, (, t, ., isUnionType]
[), {, return, ;, }, if, (, t, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, t]
[., isAllType, (, ), ), {, return, ;, }, if, (, t, ., isUnionType, (, ), ), {, for, (]
[), {, for, (, JSType, alt, :, t, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, printErrorLocations, (]
[., isUnionType, (, ), ), {, for, (, JSType, alt, :, t, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[), {, printErrorLocations, (, errors, ,, alt, ), ;, }, return, ;, }, for, (, JSError, error, :, invalidationMap, .]
[., getAlternates, (, ), ), {, printErrorLocations, (, errors, ,, alt, ), ;, }, return, ;, }, for, (, JSError]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, printErrorLocations, (, errors, ,, alt, ), ;, }, return, ;]
[;, }, return, ;, }, for, (, JSError, error, :, invalidationMap, ., get, (, t, ), ), {, if, (]
[,, alt, ), ;, }, return, ;, }, for, (, JSError, error, :, invalidationMap, ., get, (, t, ), )]
[), ;, }, return, ;, }, for, (, JSError, error, :, invalidationMap, ., get, (, t, ), ), {, if]
[), {, if, (, errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (]
[., get, (, t, ), ), {, if, (, errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;]
[), ), {, if, (, errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add]
[), {, return, ;, }, errors, ., add, (, t, ., toString, (, ), +, " at ", +, error, ., sourceName]
[>, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (, t, ., toString, (, ), +, " at ", +, error]
[., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (, t, ., toString, (, )]
[), {, return, ;, }, errors, ., add, (, t, ., toString, (, ), +, " at ", +, error, ., sourceName]
[;, }, }, private, T, processProperty, (, NodeTraversal, t, ,, Property, prop, ,, T, type, ,, T, relatedType, ), {]
[., add, (, t, ., toString, (, ), +, " at ", +, error, ., sourceName, +, ":", +, error, ., lineNumber]
[), ;, }, }, private, T, processProperty, (, NodeTraversal, t, ,, Property, prop, ,, T, type, ,, T, relatedType, )]
[+, error, ., lineNumber, ), ;, }, }, private, T, processProperty, (, NodeTraversal, t, ,, Property, prop, ,, T, type]
[+, ":", +, error, ., lineNumber, ), ;, }, }, private, T, processProperty, (, NodeTraversal, t, ,, Property, prop, ,]
[+, error, ., sourceName, +, ":", +, error, ., lineNumber, ), ;, }, }, private, T, processProperty, (, NodeTraversal, t]
[+, " at ", +, error, ., sourceName, +, ":", +, error, ., lineNumber, ), ;, }, }, private, T, processProperty, (]
[., toString, (, ), +, " at ", +, error, ., sourceName, +, ":", +, error, ., lineNumber, ), ;, }, }]
[+, error, ., sourceName, +, ":", +, error, ., lineNumber, ), ;, }, }, private, T, processProperty, (, NodeTraversal, t]
[+, ":", +, error, ., lineNumber, ), ;, }, }, private, T, processProperty, (, NodeTraversal, t, ,, Property, prop, ,]
[., sourceName, +, ":", +, error, ., lineNumber, ), ;, }, }, private, T, processProperty, (, NodeTraversal, t, ,, Property]
[+, error, ., lineNumber, ), ;, }, }, private, T, processProperty, (, NodeTraversal, t, ,, Property, prop, ,, T, type]
[), ;, }, }, private, T, processProperty, (, NodeTraversal, t, ,, Property, prop, ,, T, type, ,, T, relatedType, )]
[., lineNumber, ), ;, }, }, private, T, processProperty, (, NodeTraversal, t, ,, Property, prop, ,, T, type, ,, T]
[=, typeSystem, ., restrictByNotNullOrUndefined, (, type, ), ;, if, (, prop, ., skipRenaming, ||, typeSystem, ., isInvalidatingType, (, type, )]
[;, if, (, prop, ., skipRenaming, ||, typeSystem, ., isInvalidatingType, (, type, ), ), {, return, null, ;, }, Iterable]
[., restrictByNotNullOrUndefined, (, type, ), ;, if, (, prop, ., skipRenaming, ||, typeSystem, ., isInvalidatingType, (, type, ), ), {]
[), ;, if, (, prop, ., skipRenaming, ||, typeSystem, ., isInvalidatingType, (, type, ), ), {, return, null, ;, }]
[), {, return, null, ;, }, Iterable, <, T, >, alternatives, =, typeSystem, ., getTypeAlternatives, (, type, ), ;, if]
[||, typeSystem, ., isInvalidatingType, (, type, ), ), {, return, null, ;, }, Iterable, <, T, >, alternatives, =, typeSystem]
[., skipRenaming, ||, typeSystem, ., isInvalidatingType, (, type, ), ), {, return, null, ;, }, Iterable, <, T, >, alternatives]
[), {, return, null, ;, }, Iterable, <, T, >, alternatives, =, typeSystem, ., getTypeAlternatives, (, type, ), ;, if]
[., isInvalidatingType, (, type, ), ), {, return, null, ;, }, Iterable, <, T, >, alternatives, =, typeSystem, ., getTypeAlternatives]
[), ), {, return, null, ;, }, Iterable, <, T, >, alternatives, =, typeSystem, ., getTypeAlternatives, (, type, ), ;]
[;, }, Iterable, <, T, >, alternatives, =, typeSystem, ., getTypeAlternatives, (, type, ), ;, if, (, alternatives, !=, null]
[;, if, (, alternatives, !=, null, ), {, T, firstType, =, relatedType, ;, for, (, T, subType, :, alternatives, )]
[., getTypeAlternatives, (, type, ), ;, if, (, alternatives, !=, null, ), {, T, firstType, =, relatedType, ;, for, (]
[), ;, if, (, alternatives, !=, null, ), {, T, firstType, =, relatedType, ;, for, (, T, subType, :, alternatives]
[), {, T, firstType, =, relatedType, ;, for, (, T, subType, :, alternatives, ), {, T, lastType, =, processProperty, (]
[!=, null, ), {, T, firstType, =, relatedType, ;, for, (, T, subType, :, alternatives, ), {, T, lastType, =]
[), {, T, firstType, =, relatedType, ;, for, (, T, subType, :, alternatives, ), {, T, lastType, =, processProperty, (]
[;, for, (, T, subType, :, alternatives, ), {, T, lastType, =, processProperty, (, t, ,, prop, ,, subType, ,]
[), {, T, lastType, =, processProperty, (, t, ,, prop, ,, subType, ,, firstType, ), ;, if, (, lastType, !=]
[;, if, (, lastType, !=, null, ), {, firstType, =, firstType, ==, null, ?, lastType, :, firstType, ;, }, }]
[,, prop, ,, subType, ,, firstType, ), ;, if, (, lastType, !=, null, ), {, firstType, =, firstType, ==, null]
[,, subType, ,, firstType, ), ;, if, (, lastType, !=, null, ), {, firstType, =, firstType, ==, null, ?, lastType]
[,, firstType, ), ;, if, (, lastType, !=, null, ), {, firstType, =, firstType, ==, null, ?, lastType, :, firstType]
[), ;, if, (, lastType, !=, null, ), {, firstType, =, firstType, ==, null, ?, lastType, :, firstType, ;, }]
[), {, firstType, =, firstType, ==, null, ?, lastType, :, firstType, ;, }, }, return, firstType, ;, }, else, {]
[!=, null, ), {, firstType, =, firstType, ==, null, ?, lastType, :, firstType, ;, }, }, return, firstType, ;, }]
[), {, firstType, =, firstType, ==, null, ?, lastType, :, firstType, ;, }, }, return, firstType, ;, }, else, {]
[=, firstType, ==, null, ?, lastType, :, firstType, ;, }, }, return, firstType, ;, }, else, {, T, topType, =]
[;, }, }, return, firstType, ;, }, else, {, T, topType, =, typeSystem, ., getTypeWithProperty, (, prop, ., name, ,]
[?, lastType, :, firstType, ;, }, }, return, firstType, ;, }, else, {, T, topType, =, typeSystem, ., getTypeWithProperty, (]
[==, null, ?, lastType, :, firstType, ;, }, }, return, firstType, ;, }, else, {, T, topType, =, typeSystem, .]
[?, lastType, :, firstType, ;, }, }, return, firstType, ;, }, else, {, T, topType, =, typeSystem, ., getTypeWithProperty, (]
[:, firstType, ;, }, }, return, firstType, ;, }, else, {, T, topType, =, typeSystem, ., getTypeWithProperty, (, prop, .]
[;, }, }, return, firstType, ;, }, else, {, T, topType, =, typeSystem, ., getTypeWithProperty, (, prop, ., name, ,]
[;, }, else, {, T, topType, =, typeSystem, ., getTypeWithProperty, (, prop, ., name, ,, type, ), ;, if, (]
[;, if, (, typeSystem, ., isInvalidatingType, (, topType, ), ), {, return, null, ;, }, prop, ., addType, (, type]
[., getTypeWithProperty, (, prop, ., name, ,, type, ), ;, if, (, typeSystem, ., isInvalidatingType, (, topType, ), ), {]
[,, type, ), ;, if, (, typeSystem, ., isInvalidatingType, (, topType, ), ), {, return, null, ;, }, prop, .]
[., name, ,, type, ), ;, if, (, typeSystem, ., isInvalidatingType, (, topType, ), ), {, return, null, ;, }]
[), ;, if, (, typeSystem, ., isInvalidatingType, (, topType, ), ), {, return, null, ;, }, prop, ., addType, (]
[), {, return, null, ;, }, prop, ., addType, (, type, ,, topType, ,, relatedType, ), ;, return, topType, ;]
[., isInvalidatingType, (, topType, ), ), {, return, null, ;, }, prop, ., addType, (, type, ,, topType, ,, relatedType]
[), ), {, return, null, ;, }, prop, ., addType, (, type, ,, topType, ,, relatedType, ), ;, return, topType]
[;, }, prop, ., addType, (, type, ,, topType, ,, relatedType, ), ;, return, topType, ;, }, }, }, void]
[;, return, topType, ;, }, }, }, void, renameProperties, (, ), {, int, propsRenamed, =, 0, ,, propsSkipped, =, 0]
[., addType, (, type, ,, topType, ,, relatedType, ), ;, return, topType, ;, }, }, }, void, renameProperties, (, )]
[,, topType, ,, relatedType, ), ;, return, topType, ;, }, }, }, void, renameProperties, (, ), {, int, propsRenamed, =]
[,, relatedType, ), ;, return, topType, ;, }, }, }, void, renameProperties, (, ), {, int, propsRenamed, =, 0, ,]
[), ;, return, topType, ;, }, }, }, void, renameProperties, (, ), {, int, propsRenamed, =, 0, ,, propsSkipped, =]
[;, }, }, }, void, renameProperties, (, ), {, int, propsRenamed, =, 0, ,, propsSkipped, =, 0, ,, instancesRenamed, =]
[,, propsSkipped, =, 0, ,, instancesRenamed, =, 0, ,, instancesSkipped, =, 0, ,, singleTypeProps, =, 0, ;, for, (, Property]
[,, instancesRenamed, =, 0, ,, instancesSkipped, =, 0, ,, singleTypeProps, =, 0, ;, for, (, Property, prop, :, properties, .]
[,, instancesSkipped, =, 0, ,, singleTypeProps, =, 0, ;, for, (, Property, prop, :, properties, ., values, (, ), )]
[,, singleTypeProps, =, 0, ;, for, (, Property, prop, :, properties, ., values, (, ), ), {, if, (, prop]
[;, for, (, Property, prop, :, properties, ., values, (, ), ), {, if, (, prop, ., shouldRename, (, )]
[), {, if, (, prop, ., shouldRename, (, ), ), {, Map, <, T, ,, String, >, propNames, =, buildPropNames]
[., values, (, ), ), {, if, (, prop, ., shouldRename, (, ), ), {, Map, <, T, ,, String]
[), {, Map, <, T, ,, String, >, propNames, =, buildPropNames, (, prop, ., getTypes, (, ), ,, prop, .]
[., shouldRename, (, ), ), {, Map, <, T, ,, String, >, propNames, =, buildPropNames, (, prop, ., getTypes, (]
[;, ++, propsRenamed, ;, prop, ., expandTypesToSkip, (, ), ;, UnionFind, <, T, >, types, =, prop, ., getTypes, (]
[,, prop, ., name, ), ;, ++, propsRenamed, ;, prop, ., expandTypesToSkip, (, ), ;, UnionFind, <, T, >, types]
[., getTypes, (, ), ,, prop, ., name, ), ;, ++, propsRenamed, ;, prop, ., expandTypesToSkip, (, ), ;, UnionFind]
[), ;, ++, propsRenamed, ;, prop, ., expandTypesToSkip, (, ), ;, UnionFind, <, T, >, types, =, prop, ., getTypes]
[., name, ), ;, ++, propsRenamed, ;, prop, ., expandTypesToSkip, (, ), ;, UnionFind, <, T, >, types, =, prop]
[;, prop, ., expandTypesToSkip, (, ), ;, UnionFind, <, T, >, types, =, prop, ., getTypes, (, ), ;, for]
[;, prop, ., expandTypesToSkip, (, ), ;, UnionFind, <, T, >, types, =, prop, ., getTypes, (, ), ;, for]
[;, UnionFind, <, T, >, types, =, prop, ., getTypes, (, ), ;, for, (, Node, node, :, prop, .]
[., expandTypesToSkip, (, ), ;, UnionFind, <, T, >, types, =, prop, ., getTypes, (, ), ;, for, (, Node]
[;, for, (, Node, node, :, prop, ., renameNodes, ), {, T, rootType, =, prop, ., rootTypes, ., get, (]
[., getTypes, (, ), ;, for, (, Node, node, :, prop, ., renameNodes, ), {, T, rootType, =, prop, .]
[), {, T, rootType, =, prop, ., rootTypes, ., get, (, node, ), ;, if, (, prop, ., shouldRename, (]
[., renameNodes, ), {, T, rootType, =, prop, ., rootTypes, ., get, (, node, ), ;, if, (, prop, .]
[;, if, (, prop, ., shouldRename, (, rootType, ), ), {, String, newName, =, propNames, ., get, (, rootType, )]
[., get, (, node, ), ;, if, (, prop, ., shouldRename, (, rootType, ), ), {, String, newName, =, propNames]
[., rootTypes, ., get, (, node, ), ;, if, (, prop, ., shouldRename, (, rootType, ), ), {, String, newName]
[), ;, if, (, prop, ., shouldRename, (, rootType, ), ), {, String, newName, =, propNames, ., get, (, rootType]
[), {, String, newName, =, propNames, ., get, (, rootType, ), ;, node, ., setString, (, newName, ), ;, compiler]
[., shouldRename, (, rootType, ), ), {, String, newName, =, propNames, ., get, (, rootType, ), ;, node, ., setString]
[), ), {, String, newName, =, propNames, ., get, (, rootType, ), ;, node, ., setString, (, newName, ), ;]
[;, node, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, ++, instancesRenamed, ;, }, else, {]
[., get, (, rootType, ), ;, node, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, ++]
[), ;, node, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, ++, instancesRenamed, ;, }, else]
[;, compiler, ., reportCodeChange, (, ), ;, ++, instancesRenamed, ;, }, else, {, ++, instancesSkipped, ;, }, }, }, else]
[., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, ++, instancesRenamed, ;, }, else, {, ++, instancesSkipped]
[), ;, compiler, ., reportCodeChange, (, ), ;, ++, instancesRenamed, ;, }, else, {, ++, instancesSkipped, ;, }, }, }]
[;, ++, instancesRenamed, ;, }, else, {, ++, instancesSkipped, ;, }, }, }, else, {, if, (, prop, ., skipRenaming]
[., reportCodeChange, (, ), ;, ++, instancesRenamed, ;, }, else, {, ++, instancesSkipped, ;, }, }, }, else, {, if]
[;, }, else, {, ++, instancesSkipped, ;, }, }, }, else, {, if, (, prop, ., skipRenaming, ), {, ++]
[;, }, else, {, ++, instancesSkipped, ;, }, }, }, else, {, if, (, prop, ., skipRenaming, ), {, ++]
[;, }, }, }, else, {, if, (, prop, ., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {, ++]
[;, }, }, }, else, {, if, (, prop, ., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {, ++]
[), {, ++, propsSkipped, ;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (, "Renamed ", +]
[., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (]
[;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +]
[;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +]
[;, }, }, }, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger]
[;, }, }, }, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger]
[;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps]
[., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +]
[), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +]
[+, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +]
[+, propsRenamed, +, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +]
[+, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +]
[+, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +]
[+, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +]
[+, propsRenamed, +, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +]
[+, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +]
[), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +]
[;, }, private, Map, <, T, ,, String, >, buildPropNames, (, UnionFind, <, T, >, types, ,, String, name, )]
[., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type."]
[), ;, }, private, Map, <, T, ,, String, >, buildPropNames, (, UnionFind, <, T, >, types, ,, String, name]
[+, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,, String, >, buildPropNames, (, UnionFind, <, T, >, types, ,]
[+, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,, String, >, buildPropNames, (, UnionFind, <, T, >]
[+, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,, String, >, buildPropNames, (, UnionFind, <]
[+, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,, String, >, buildPropNames, (]
[+, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,, String, >]
[+, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,]
[+, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <]
[+, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private]
[+, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <]
[+, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,]
[+, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,, String, >]
[+, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,, String, >, buildPropNames, (]
[+, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,, String, >, buildPropNames, (, UnionFind, <]
[+, singleTypeProps, +, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,, String, >, buildPropNames, (, UnionFind, <, T, >]
[+, " properties that were referenced from only one type.", ), ;, }, private, Map, <, T, ,, String, >, buildPropNames, (, UnionFind, <, T, >, types, ,]
[), ;, }, private, Map, <, T, ,, String, >, buildPropNames, (, UnionFind, <, T, >, types, ,, String, name]
[;, for, (, Set, <, T, >, set, :, types, ., allEquivalenceClasses, (, ), ), {, checkState, (, !, set]
[., newHashMap, (, ), ;, for, (, Set, <, T, >, set, :, types, ., allEquivalenceClasses, (, ), ), {]
[), {, checkState, (, !, set, ., isEmpty, (, ), ), ;, String, typeName, =, null, ;, for, (, T]
[., allEquivalenceClasses, (, ), ), {, checkState, (, !, set, ., isEmpty, (, ), ), ;, String, typeName, =, null]
[;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if, (, typeName, ==, null, ||]
[), ;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if, (, typeName, ==, null]
[), ;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if, (, typeName, ==, null]
[., isEmpty, (, ), ), ;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if]
[;, for, (, T, type, :, set, ), {, if, (, typeName, ==, null, ||, type, ., toString, (, )]
[), {, if, (, typeName, ==, null, ||, type, ., toString, (, ), ., compareTo, (, typeName, ), <, 0]
[), {, typeName, =, type, ., toString, (, ), ;, }, }, String, newName, ;, if, (, "{...}", ., equals]
[||, type, ., toString, (, ), ., compareTo, (, typeName, ), <, 0, ), {, typeName, =, type, ., toString]
[==, null, ||, type, ., toString, (, ), ., compareTo, (, typeName, ), <, 0, ), {, typeName, =, type]
[||, type, ., toString, (, ), ., compareTo, (, typeName, ), <, 0, ), {, typeName, =, type, ., toString]
[), {, typeName, =, type, ., toString, (, ), ;, }, }, String, newName, ;, if, (, "{...}", ., equals]
[<, 0, ), {, typeName, =, type, ., toString, (, ), ;, }, }, String, newName, ;, if, (, "{...}"]
[., compareTo, (, typeName, ), <, 0, ), {, typeName, =, type, ., toString, (, ), ;, }, }, String]
[., toString, (, ), ., compareTo, (, typeName, ), <, 0, ), {, typeName, =, type, ., toString, (, )]
[), <, 0, ), {, typeName, =, type, ., toString, (, ), ;, }, }, String, newName, ;, if, (]
[), {, typeName, =, type, ., toString, (, ), ;, }, }, String, newName, ;, if, (, "{...}", ., equals]
[=, type, ., toString, (, ), ;, }, }, String, newName, ;, if, (, "{...}", ., equals, (, typeName, )]
[;, }, }, String, newName, ;, if, (, "{...}", ., equals, (, typeName, ), ), {, newName, =, name, ;]
[., toString, (, ), ;, }, }, String, newName, ;, if, (, "{...}", ., equals, (, typeName, ), ), {]
[), {, newName, =, name, ;, }, else, {, newName, =, typeName, ., replaceAll, (, "[^\\w$]", ,, "_", ), +]
[., equals, (, typeName, ), ), {, newName, =, name, ;, }, else, {, newName, =, typeName, ., replaceAll, (]
[), ), {, newName, =, name, ;, }, else, {, newName, =, typeName, ., replaceAll, (, "[^\\w$]", ,, "_", )]
[=, name, ;, }, else, {, newName, =, typeName, ., replaceAll, (, "[^\\w$]", ,, "_", ), +, "$", +, name]
[;, }, else, {, newName, =, typeName, ., replaceAll, (, "[^\\w$]", ,, "_", ), +, "$", +, name, ;, }]
[=, typeName, ., replaceAll, (, "[^\\w$]", ,, "_", ), +, "$", +, name, ;, }, for, (, T, type, :]
[;, }, for, (, T, type, :, set, ), {, names, ., put, (, type, ,, newName, ), ;, }]
[+, name, ;, }, for, (, T, type, :, set, ), {, names, ., put, (, type, ,, newName, )]
[+, "$", +, name, ;, }, for, (, T, type, :, set, ), {, names, ., put, (, type, ,]
[., replaceAll, (, "[^\\w$]", ,, "_", ), +, "$", +, name, ;, }, for, (, T, type, :, set, )]
[,, "_", ), +, "$", +, name, ;, }, for, (, T, type, :, set, ), {, names, ., put]
[), +, "$", +, name, ;, }, for, (, T, type, :, set, ), {, names, ., put, (, type]
[+, name, ;, }, for, (, T, type, :, set, ), {, names, ., put, (, type, ,, newName, )]
[;, }, for, (, T, type, :, set, ), {, names, ., put, (, type, ,, newName, ), ;, }]
[), {, names, ., put, (, type, ,, newName, ), ;, }, }, return, names, ;, }, Multimap, <, String]
[;, }, }, return, names, ;, }, Multimap, <, String, ,, Collection, <, T, >, >, getRenamedTypesForTesting, (, ), {]
[., put, (, type, ,, newName, ), ;, }, }, return, names, ;, }, Multimap, <, String, ,, Collection, <]
[,, newName, ), ;, }, }, return, names, ;, }, Multimap, <, String, ,, Collection, <, T, >, >, getRenamedTypesForTesting]
[), ;, }, }, return, names, ;, }, Multimap, <, String, ,, Collection, <, T, >, >, getRenamedTypesForTesting, (, )]
[;, }, Multimap, <, String, ,, Collection, <, T, >, >, getRenamedTypesForTesting, (, ), {, Multimap, <, String, ,, Collection]
[;, for, (, Map, ., Entry, <, String, ,, Property, >, entry, :, properties, ., entrySet, (, ), ), {]
[., create, (, ), ;, for, (, Map, ., Entry, <, String, ,, Property, >, entry, :, properties, ., entrySet]
[), {, Property, prop, =, entry, ., getValue, (, ), ;, if, (, !, prop, ., skipRenaming, ), {, for]
[., entrySet, (, ), ), {, Property, prop, =, entry, ., getValue, (, ), ;, if, (, !, prop, .]
[;, if, (, !, prop, ., skipRenaming, ), {, for, (, Collection, <, T, >, c, :, prop, ., getTypes]
[., getValue, (, ), ;, if, (, !, prop, ., skipRenaming, ), {, for, (, Collection, <, T, >, c]
[), {, for, (, Collection, <, T, >, c, :, prop, ., getTypes, (, ), ., allEquivalenceClasses, (, ), )]
[), {, for, (, Collection, <, T, >, c, :, prop, ., getTypes, (, ), ., allEquivalenceClasses, (, ), )]
[., skipRenaming, ), {, for, (, Collection, <, T, >, c, :, prop, ., getTypes, (, ), ., allEquivalenceClasses, (]
[), {, if, (, !, c, ., isEmpty, (, ), &&, !, prop, ., typesToSkip, ., contains, (, c, .]
[., allEquivalenceClasses, (, ), ), {, if, (, !, c, ., isEmpty, (, ), &&, !, prop, ., typesToSkip, .]
[., getTypes, (, ), ., allEquivalenceClasses, (, ), ), {, if, (, !, c, ., isEmpty, (, ), &&, !]
[), {, ret, ., put, (, entry, ., getKey, (, ), ,, c, ), ;, }, }, }, }, return]
[&&, !, prop, ., typesToSkip, ., contains, (, c, ., iterator, (, ), ., next, (, ), ), ), {]
[&&, !, prop, ., typesToSkip, ., contains, (, c, ., iterator, (, ), ., next, (, ), ), ), {]
[., isEmpty, (, ), &&, !, prop, ., typesToSkip, ., contains, (, c, ., iterator, (, ), ., next, (]
[), {, ret, ., put, (, entry, ., getKey, (, ), ,, c, ), ;, }, }, }, }, return]
[), {, ret, ., put, (, entry, ., getKey, (, ), ,, c, ), ;, }, }, }, }, return]
[., contains, (, c, ., iterator, (, ), ., next, (, ), ), ), {, ret, ., put, (, entry]
[., typesToSkip, ., contains, (, c, ., iterator, (, ), ., next, (, ), ), ), {, ret, ., put]
[), ), {, ret, ., put, (, entry, ., getKey, (, ), ,, c, ), ;, }, }, }, }]
[., next, (, ), ), ), {, ret, ., put, (, entry, ., getKey, (, ), ,, c, ), ;]
[., iterator, (, ), ., next, (, ), ), ), {, ret, ., put, (, entry, ., getKey, (, )]
[;, }, }, }, }, return, ret, ;, }, private, interface, TypeSystem, <, T, >, {, StaticScope, <, T, >]
[., put, (, entry, ., getKey, (, ), ,, c, ), ;, }, }, }, }, return, ret, ;, }]
[,, c, ), ;, }, }, }, }, return, ret, ;, }, private, interface, TypeSystem, <, T, >, {, StaticScope]
[., getKey, (, ), ,, c, ), ;, }, }, }, }, return, ret, ;, }, private, interface, TypeSystem, <]
[), ;, }, }, }, }, return, ret, ;, }, private, interface, TypeSystem, <, T, >, {, StaticScope, <, T]
[;, }, private, interface, TypeSystem, <, T, >, {, StaticScope, <, T, >, getRootScope, (, ), ;, StaticScope, <, T]
[=, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE]
[;, invalidatingTypes, =, Sets, ., newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, registry, ., getNativeType, (]
[., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,]
[=, Sets, ., newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, .]
[;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type, ., isUnionType, (, )]
[., newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, )]
[,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry]
[., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,]
[., ALL_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE]
[,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry]
[., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,]
[., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE]
[,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry]
[., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,]
[., NO_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE]
[,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry]
[., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,]
[., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE]
[,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, registry]
[., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,]
[., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE]
[,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;]
[., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, registry, ., getNativeType]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), )]
[., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE]
[,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type]
[., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, @]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, @, Override, public, void, addInvalidatingType, (, JSType]
[., TOP_LEVEL_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, @, Override, public, void, addInvalidatingType]
[), ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type, ., isUnionType, (]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {]
[), ), ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type, ., isUnionType]
[., UNKNOWN_TYPE, ), ), ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type]
[;, invalidatingTypes, ., add, (, type, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getRootScope, (, ), {]
[), ;, invalidatingTypes, ., add, (, type, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getRootScope, (, )]
[), ;, invalidatingTypes, ., add, (, type, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getRootScope, (, )]
[., isUnionType, (, ), ), ;, invalidatingTypes, ., add, (, type, ), ;, }, @, Override, public, StaticScope, <, JSType]
[;, }, @, Override, public, StaticScope, <, JSType, >, getRootScope, (, ), {, return, null, ;, }, @, Override, public]
[., add, (, type, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getRootScope, (, ), {, return, null]
[), ;, }, @, Override, public, StaticScope, <, JSType, >, getRootScope, (, ), {, return, null, ;, }, @, Override]
[;, }, @, Override, public, StaticScope, <, JSType, >, getFunctionScope, (, Node, node, ), {, return, null, ;, }, @]
[;, }, @, Override, public, JSType, getType, (, StaticScope, <, JSType, >, scope, ,, Node, node, ,, String, prop, )]
[), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, node, ., getJSType, (, ), ;]
[==, null, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, node, ., getJSType, (]
[., getJSType, (, ), ==, null, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return]
[), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, node, ., getJSType, (, ), ;]
[;, }, return, node, ., getJSType, (, ), ;, }, @, Override, public, boolean, isInvalidatingType, (, JSType, type, ), {]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, node, ., getJSType, (, ), ;, }, @, Override, public]
[), ;, }, return, node, ., getJSType, (, ), ;, }, @, Override, public, boolean, isInvalidatingType, (, JSType, type, )]
[., UNKNOWN_TYPE, ), ;, }, return, node, ., getJSType, (, ), ;, }, @, Override, public, boolean, isInvalidatingType, (, JSType]
[;, }, @, Override, public, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ==, null, ||, invalidatingTypes, .]
[., getJSType, (, ), ;, }, @, Override, public, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ==]
[), {, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, !=, null]
[||, type, ., isUnknownType, (, ), ), {, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type]
[||, invalidatingTypes, ., contains, (, type, ), ||, type, ., isUnknownType, (, ), ), {, return, true, ;, }, ObjectType]
[==, null, ||, invalidatingTypes, ., contains, (, type, ), ||, type, ., isUnknownType, (, ), ), {, return, true, ;]
[||, invalidatingTypes, ., contains, (, type, ), ||, type, ., isUnknownType, (, ), ), {, return, true, ;, }, ObjectType]
[||, type, ., isUnknownType, (, ), ), {, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type]
[., contains, (, type, ), ||, type, ., isUnknownType, (, ), ), {, return, true, ;, }, ObjectType, objType, =]
[), ||, type, ., isUnknownType, (, ), ), {, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (]
[), {, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, !=, null]
[., isUnknownType, (, ), ), {, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;]
[;, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, !=, null, &&, !, objType, .]
[;, return, objType, !=, null, &&, !, objType, ., hasReferenceName, (, ), ;, }, @, Override, public, ImmutableSet, <, JSType]
[., cast, (, type, ), ;, return, objType, !=, null, &&, !, objType, ., hasReferenceName, (, ), ;, }, @]
[), ;, return, objType, !=, null, &&, !, objType, ., hasReferenceName, (, ), ;, }, @, Override, public, ImmutableSet, <]
[;, }, @, Override, public, ImmutableSet, <, JSType, >, getTypesToSkipForType, (, JSType, type, ), {, type, =, type, ., restrictByNotNullOrUndefined]
[&&, !, objType, ., hasReferenceName, (, ), ;, }, @, Override, public, ImmutableSet, <, JSType, >, getTypesToSkipForType, (, JSType, type]
[!=, null, &&, !, objType, ., hasReferenceName, (, ), ;, }, @, Override, public, ImmutableSet, <, JSType, >, getTypesToSkipForType, (]
[&&, !, objType, ., hasReferenceName, (, ), ;, }, @, Override, public, ImmutableSet, <, JSType, >, getTypesToSkipForType, (, JSType, type]
[;, }, @, Override, public, ImmutableSet, <, JSType, >, getTypesToSkipForType, (, JSType, type, ), {, type, =, type, ., restrictByNotNullOrUndefined]
[;, }, @, Override, public, ImmutableSet, <, JSType, >, getTypesToSkipForType, (, JSType, type, ), {, type, =, type, ., restrictByNotNullOrUndefined]
[., hasReferenceName, (, ), ;, }, @, Override, public, ImmutableSet, <, JSType, >, getTypesToSkipForType, (, JSType, type, ), {, type]
[=, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, Set, <, JSType, >]
[;, if, (, type, ., isUnionType, (, ), ), {, Set, <, JSType, >, types, =, Sets, ., newHashSet, (]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, Set, <, JSType, >, types, =]
[), {, Set, <, JSType, >, types, =, Sets, ., newHashSet, (, type, ), ;, for, (, JSType, alt, :]
[., isUnionType, (, ), ), {, Set, <, JSType, >, types, =, Sets, ., newHashSet, (, type, ), ;, for]
[;, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, types, ., addAll]
[., newHashSet, (, type, ), ;, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[), ;, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, types, .]
[), {, types, ., addAll, (, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, return, ImmutableSet, ., copyOf, (, types, )]
[., getAlternates, (, ), ), {, types, ., addAll, (, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, return, ImmutableSet, .]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, types, ., addAll, (, getTypesToSkipForTypeNonUnion, (, type, ), ), ;]
[;, }, return, ImmutableSet, ., copyOf, (, types, ), ;, }, else, if, (, type, ., isEnumElementType, (, ), )]
[., addAll, (, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, return, ImmutableSet, ., copyOf, (, types, ), ;, }, else]
[), ;, }, return, ImmutableSet, ., copyOf, (, types, ), ;, }, else, if, (, type, ., isEnumElementType, (, )]
[), ), ;, }, return, ImmutableSet, ., copyOf, (, types, ), ;, }, else, if, (, type, ., isEnumElementType, (]
[;, }, else, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypesToSkipForType, (, type, ., toMaybeEnumElementType, (, )]
[., copyOf, (, types, ), ;, }, else, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypesToSkipForType, (]
[), ;, }, else, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypesToSkipForType, (, type, ., toMaybeEnumElementType, (]
[), {, return, getTypesToSkipForType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, return, ImmutableSet, .]
[., isEnumElementType, (, ), ), {, return, getTypesToSkipForType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;]
[;, }, return, ImmutableSet, ., copyOf, (, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, private, Set, <, JSType, >, getTypesToSkipForTypeNonUnion]
[), ;, }, return, ImmutableSet, ., copyOf, (, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, private, Set, <, JSType, >]
[., getPrimitiveType, (, ), ), ;, }, return, ImmutableSet, ., copyOf, (, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, private]
[., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, return, ImmutableSet, ., copyOf, (, getTypesToSkipForTypeNonUnion, (, type, )]
[;, }, private, Set, <, JSType, >, getTypesToSkipForTypeNonUnion, (, JSType, type, ), {, Set, <, JSType, >, types, =, Sets]
[., copyOf, (, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, private, Set, <, JSType, >, getTypesToSkipForTypeNonUnion, (, JSType, type, )]
[), ;, }, private, Set, <, JSType, >, getTypesToSkipForTypeNonUnion, (, JSType, type, ), {, Set, <, JSType, >, types, =]
[), ), ;, }, private, Set, <, JSType, >, getTypesToSkipForTypeNonUnion, (, JSType, type, ), {, Set, <, JSType, >, types]
[;, JSType, skipType, =, type, ;, while, (, skipType, !=, null, ), {, types, ., add, (, skipType, ), ;]
[., newHashSet, (, ), ;, JSType, skipType, =, type, ;, while, (, skipType, !=, null, ), {, types, ., add]
[;, while, (, skipType, !=, null, ), {, types, ., add, (, skipType, ), ;, ObjectType, objSkipType, =, skipType, .]
[), {, types, ., add, (, skipType, ), ;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;, if, (]
[!=, null, ), {, types, ., add, (, skipType, ), ;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;]
[), {, types, ., add, (, skipType, ), ;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;, if, (]
[;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;, if, (, objSkipType, !=, null, ), {, skipType, =, objSkipType]
[., add, (, skipType, ), ;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;, if, (, objSkipType, !=, null]
[), ;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;, if, (, objSkipType, !=, null, ), {, skipType, =]
[;, if, (, objSkipType, !=, null, ), {, skipType, =, objSkipType, ., getImplicitPrototype, (, ), ;, }, else, {, break]
[., toObjectType, (, ), ;, if, (, objSkipType, !=, null, ), {, skipType, =, objSkipType, ., getImplicitPrototype, (, ), ;]
[), {, skipType, =, objSkipType, ., getImplicitPrototype, (, ), ;, }, else, {, break, ;, }, }, return, types, ;]
[!=, null, ), {, skipType, =, objSkipType, ., getImplicitPrototype, (, ), ;, }, else, {, break, ;, }, }, return]
[), {, skipType, =, objSkipType, ., getImplicitPrototype, (, ), ;, }, else, {, break, ;, }, }, return, types, ;]
[=, objSkipType, ., getImplicitPrototype, (, ), ;, }, else, {, break, ;, }, }, return, types, ;, }, @, Override]
[;, }, else, {, break, ;, }, }, return, types, ;, }, @, Override, public, boolean, isTypeToSkip, (, JSType, type]
[., getImplicitPrototype, (, ), ;, }, else, {, break, ;, }, }, return, types, ;, }, @, Override, public, boolean]
[;, }, @, Override, public, boolean, isTypeToSkip, (, JSType, type, ), {, return, type, ., isEnumType, (, ), ||, (]
[;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, JSType, type, ), {, return, type, ., restrictByNotNullOrUndefined, (, ), ;, }]
[||, (, type, ., autoboxesTo, (, ), !=, null, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, JSType, type]
[., isEnumType, (, ), ||, (, type, ., autoboxesTo, (, ), !=, null, ), ;, }, @, Override, public, JSType]
[;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, JSType, type, ), {, return, type, ., restrictByNotNullOrUndefined, (, ), ;, }]
[), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, JSType, type, ), {, return, type, ., restrictByNotNullOrUndefined, (, ), ;]
[!=, null, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, JSType, type, ), {, return, type, ., restrictByNotNullOrUndefined, (]
[., autoboxesTo, (, ), !=, null, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, JSType, type, ), {, return]
[), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, JSType, type, ), {, return, type, ., restrictByNotNullOrUndefined, (, ), ;]
[;, }, @, Override, public, Iterable, <, JSType, >, getTypeAlternatives, (, JSType, type, ), {, if, (, type, ., isUnionType]
[., restrictByNotNullOrUndefined, (, ), ;, }, @, Override, public, Iterable, <, JSType, >, getTypeAlternatives, (, JSType, type, ), {, if]
[), {, return, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ;, }, else, {, ObjectType, objType, =, type]
[., isUnionType, (, ), ), {, return, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ;, }, else, {]
[;, }, else, {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (, objType, !=, null, &&, objType]
[., getAlternates, (, ), ;, }, else, {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (, objType]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ;, }, else, {, ObjectType, objType, =, type, ., toObjectType, (, )]
[;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, )]
[., toObjectType, (, ), ;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&, objType]
[), {, List, <, JSType, >, list, =, Lists, ., newArrayList, (, ), ;, for, (, FunctionType, impl, :, registry]
[&&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, List, <, JSType, >, list, =, Lists, .]
[&&, objType, ., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {]
[!=, null, &&, objType, ., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, )]
[&&, objType, ., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {]
[&&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, List, <, JSType, >, list, =, Lists, .]
[!=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, List, <, JSType, >, list, =]
[., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, List, <]
[&&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, List, <, JSType, >, list, =, Lists, .]
[), {, List, <, JSType, >, list, =, Lists, ., newArrayList, (, ), ;, for, (, FunctionType, impl, :, registry]
[., isInterface, (, ), ), {, List, <, JSType, >, list, =, Lists, ., newArrayList, (, ), ;, for, (]
[., getConstructor, (, ), ., isInterface, (, ), ), {, List, <, JSType, >, list, =, Lists, ., newArrayList, (]
[;, for, (, FunctionType, impl, :, registry, ., getDirectImplementors, (, objType, ), ), {, list, ., add, (, impl, .]
[., newArrayList, (, ), ;, for, (, FunctionType, impl, :, registry, ., getDirectImplementors, (, objType, ), ), {, list, .]
[), {, list, ., add, (, impl, ., getInstanceType, (, ), ), ;, }, return, list, ;, }, else, {]
[., getDirectImplementors, (, objType, ), ), {, list, ., add, (, impl, ., getInstanceType, (, ), ), ;, }, return]
[), ), {, list, ., add, (, impl, ., getInstanceType, (, ), ), ;, }, return, list, ;, }, else]
[;, }, return, list, ;, }, else, {, return, null, ;, }, }, }, @, Override, public, ObjectType, getTypeWithProperty, (]
[., add, (, impl, ., getInstanceType, (, ), ), ;, }, return, list, ;, }, else, {, return, null, ;]
[), ;, }, return, list, ;, }, else, {, return, null, ;, }, }, }, @, Override, public, ObjectType, getTypeWithProperty]
[., getInstanceType, (, ), ), ;, }, return, list, ;, }, else, {, return, null, ;, }, }, }, @]
[;, }, else, {, return, null, ;, }, }, }, @, Override, public, ObjectType, getTypeWithProperty, (, String, field, ,, JSType]
[;, }, }, }, @, Override, public, ObjectType, getTypeWithProperty, (, String, field, ,, JSType, type, ), {, if, (, type]
[), {, return, null, ;, }, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypeWithProperty, (, field, ,]
[==, null, ), {, return, null, ;, }, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypeWithProperty, (]
[), {, return, null, ;, }, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypeWithProperty, (, field, ,]
[;, }, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypeWithProperty, (, field, ,, type, ., toMaybeEnumElementType, (]
[), {, return, getTypeWithProperty, (, field, ,, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, if]
[., isEnumElementType, (, ), ), {, return, getTypeWithProperty, (, field, ,, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, )]
[;, }, if, (, !, (, type, instanceof, ObjectType, ), ), {, if, (, type, ., autoboxesTo, (, ), !=]
[,, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, if, (, !, (, type, instanceof, ObjectType]
[), ;, }, if, (, !, (, type, instanceof, ObjectType, ), ), {, if, (, type, ., autoboxesTo, (, )]
[., getPrimitiveType, (, ), ), ;, }, if, (, !, (, type, instanceof, ObjectType, ), ), {, if, (, type]
[., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, if, (, !, (, type, instanceof, ObjectType, ), )]
[), {, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, type, =, type, ., autoboxesTo, (, )]
[), {, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, type, =, type, ., autoboxesTo, (, )]
[), ), {, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, type, =, type, ., autoboxesTo, (]
[instanceof, ObjectType, ), ), {, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, type, =, type, .]
[), {, type, =, type, ., autoboxesTo, (, ), ;, }, else, {, return, null, ;, }, }, if, (]
[!=, null, ), {, type, =, type, ., autoboxesTo, (, ), ;, }, else, {, return, null, ;, }, }]
[., autoboxesTo, (, ), !=, null, ), {, type, =, type, ., autoboxesTo, (, ), ;, }, else, {, return]
[), {, type, =, type, ., autoboxesTo, (, ), ;, }, else, {, return, null, ;, }, }, if, (]
[=, type, ., autoboxesTo, (, ), ;, }, else, {, return, null, ;, }, }, if, (, "prototype", ., equals]
[;, }, else, {, return, null, ;, }, }, if, (, "prototype", ., equals, (, field, ), ), {, return]
[., autoboxesTo, (, ), ;, }, else, {, return, null, ;, }, }, if, (, "prototype", ., equals, (, field]
[;, }, }, if, (, "prototype", ., equals, (, field, ), ), {, return, null, ;, }, ObjectType, foundType, =]
[), {, return, null, ;, }, ObjectType, foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (, type, )]
[., equals, (, field, ), ), {, return, null, ;, }, ObjectType, foundType, =, null, ;, ObjectType, objType, =, ObjectType]
[), ), {, return, null, ;, }, ObjectType, foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (, type]
[;, }, ObjectType, foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType]
[;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., getConstructor]
[;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, )]
[., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&]
[), ;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (]
[), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (, topInterface, !=, null, &&]
[&&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType]
[&&, objType, ., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {]
[!=, null, &&, objType, ., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, )]
[&&, objType, ., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {]
[&&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType]
[!=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface]
[., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, ObjectType, topInterface]
[&&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType]
[), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (, topInterface, !=, null, &&]
[., isInterface, (, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (]
[., getConstructor, (, ), ., isInterface, (, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,, field]
[;, if, (, topInterface, !=, null, &&, topInterface, ., getConstructor, (, ), !=, null, ), {, foundType, =, topInterface, .]
[., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (, topInterface, !=, null, &&, topInterface, ., getConstructor, (, ), !=]
[,, field, ), ;, if, (, topInterface, !=, null, &&, topInterface, ., getConstructor, (, ), !=, null, ), {, foundType]
[), ;, if, (, topInterface, !=, null, &&, topInterface, ., getConstructor, (, ), !=, null, ), {, foundType, =, topInterface]
[), {, foundType, =, topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (]
[&&, topInterface, ., getConstructor, (, ), !=, null, ), {, foundType, =, topInterface, ., getConstructor, (, ), ., getPrototype, (]
[!=, null, &&, topInterface, ., getConstructor, (, ), !=, null, ), {, foundType, =, topInterface, ., getConstructor, (, ), .]
[&&, topInterface, ., getConstructor, (, ), !=, null, ), {, foundType, =, topInterface, ., getConstructor, (, ), ., getPrototype, (]
[), {, foundType, =, topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (]
[!=, null, ), {, foundType, =, topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {]
[., getConstructor, (, ), !=, null, ), {, foundType, =, topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;]
[), {, foundType, =, topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (]
[=, topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (, objType, !=, null]
[;, }, }, else, {, while, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, objType, ), {]
[., getPrototype, (, ), ;, }, }, else, {, while, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, )]
[., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (, objType, !=, null, &&, objType]
[), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {, foundType, =, objType, ;, }, objType, =, objType]
[&&, objType, ., getImplicitPrototype, (, ), !=, objType, ), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {]
[!=, null, &&, objType, ., getImplicitPrototype, (, ), !=, objType, ), {, if, (, objType, ., hasOwnProperty, (, field, )]
[&&, objType, ., getImplicitPrototype, (, ), !=, objType, ), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {]
[), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {, foundType, =, objType, ;, }, objType, =, objType]
[!=, objType, ), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {, foundType, =, objType, ;, }, objType]
[., getImplicitPrototype, (, ), !=, objType, ), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {, foundType, =]
[), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {, foundType, =, objType, ;, }, objType, =, objType]
[), {, foundType, =, objType, ;, }, objType, =, objType, ., getImplicitPrototype, (, ), ;, }, }, if, (, foundType]
[., hasOwnProperty, (, field, ), ), {, foundType, =, objType, ;, }, objType, =, objType, ., getImplicitPrototype, (, ), ;]
[), ), {, foundType, =, objType, ;, }, objType, =, objType, ., getImplicitPrototype, (, ), ;, }, }, if, (]
[=, objType, ;, }, objType, =, objType, ., getImplicitPrototype, (, ), ;, }, }, if, (, foundType, ==, null, )]
[;, }, objType, =, objType, ., getImplicitPrototype, (, ), ;, }, }, if, (, foundType, ==, null, ), {, ObjectType]
[=, objType, ., getImplicitPrototype, (, ), ;, }, }, if, (, foundType, ==, null, ), {, ObjectType, maybeType, =, ObjectType]
[;, }, }, if, (, foundType, ==, null, ), {, ObjectType, maybeType, =, ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty]
[., getImplicitPrototype, (, ), ;, }, }, if, (, foundType, ==, null, ), {, ObjectType, maybeType, =, ObjectType, ., cast]
[), {, ObjectType, maybeType, =, ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), ), ;, if]
[==, null, ), {, ObjectType, maybeType, =, ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), )]
[), {, ObjectType, maybeType, =, ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), ), ;, if]
[;, if, (, maybeType, !=, null, &&, maybeType, ., hasOwnProperty, (, field, ), ), {, foundType, =, maybeType, ;, }]
[., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), ), ;, if, (, maybeType, !=, null, &&, maybeType]
[), ;, if, (, maybeType, !=, null, &&, maybeType, ., hasOwnProperty, (, field, ), ), {, foundType, =, maybeType, ;]
[., getGreatestSubtypeWithProperty, (, type, ,, field, ), ), ;, if, (, maybeType, !=, null, &&, maybeType, ., hasOwnProperty, (, field]
[,, field, ), ), ;, if, (, maybeType, !=, null, &&, maybeType, ., hasOwnProperty, (, field, ), ), {, foundType]
[), ), ;, if, (, maybeType, !=, null, &&, maybeType, ., hasOwnProperty, (, field, ), ), {, foundType, =, maybeType]
[), {, foundType, =, maybeType, ;, }, }, return, foundType, ;, }, @, Override, public, JSType, getInstanceFromPrototype, (, JSType, type]
[&&, maybeType, ., hasOwnProperty, (, field, ), ), {, foundType, =, maybeType, ;, }, }, return, foundType, ;, }, @]
[!=, null, &&, maybeType, ., hasOwnProperty, (, field, ), ), {, foundType, =, maybeType, ;, }, }, return, foundType, ;]
[&&, maybeType, ., hasOwnProperty, (, field, ), ), {, foundType, =, maybeType, ;, }, }, return, foundType, ;, }, @]
[), {, foundType, =, maybeType, ;, }, }, return, foundType, ;, }, @, Override, public, JSType, getInstanceFromPrototype, (, JSType, type]
[., hasOwnProperty, (, field, ), ), {, foundType, =, maybeType, ;, }, }, return, foundType, ;, }, @, Override, public]
[), ), {, foundType, =, maybeType, ;, }, }, return, foundType, ;, }, @, Override, public, JSType, getInstanceFromPrototype, (, JSType]
[=, maybeType, ;, }, }, return, foundType, ;, }, @, Override, public, JSType, getInstanceFromPrototype, (, JSType, type, ), {, if]
[;, }, }, return, foundType, ;, }, @, Override, public, JSType, getInstanceFromPrototype, (, JSType, type, ), {, if, (, type]
[;, }, @, Override, public, JSType, getInstanceFromPrototype, (, JSType, type, ), {, if, (, type, ., isFunctionPrototypeType, (, ), )]
[), {, ObjectType, prototype, =, (, ObjectType, ), type, ;, FunctionType, owner, =, prototype, ., getOwnerFunction, (, ), ;, if]
[., isFunctionPrototypeType, (, ), ), {, ObjectType, prototype, =, (, ObjectType, ), type, ;, FunctionType, owner, =, prototype, ., getOwnerFunction]
[;, FunctionType, owner, =, prototype, ., getOwnerFunction, (, ), ;, if, (, owner, ., isConstructor, (, ), ||, owner, .]
[;, FunctionType, owner, =, prototype, ., getOwnerFunction, (, ), ;, if, (, owner, ., isConstructor, (, ), ||, owner, .]
[;, if, (, owner, ., isConstructor, (, ), ||, owner, ., isInterface, (, ), ), {, return, prototype, ., getOwnerFunction]
[., getOwnerFunction, (, ), ;, if, (, owner, ., isConstructor, (, ), ||, owner, ., isInterface, (, ), ), {]
[), {, return, prototype, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }, }, return, null, ;, }, @]
[||, owner, ., isInterface, (, ), ), {, return, prototype, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }]
[., isConstructor, (, ), ||, owner, ., isInterface, (, ), ), {, return, prototype, ., getOwnerFunction, (, ), ., getInstanceType]
[), {, return, prototype, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }, }, return, null, ;, }, @]
[., isInterface, (, ), ), {, return, prototype, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }, }, return]
[;, }, }, return, null, ;, }, @, Override, public, void, recordInterfaces, (, JSType, type, ,, JSType, relatedType, ,, DisambiguateProperties]
[., getInstanceType, (, ), ;, }, }, return, null, ;, }, @, Override, public, void, recordInterfaces, (, JSType, type, ,]
[., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }, }, return, null, ;, }, @, Override, public, void, recordInterfaces]
[;, }, @, Override, public, void, recordInterfaces, (, JSType, type, ,, JSType, relatedType, ,, DisambiguateProperties, <, JSType, >, ., Property]
[;, if, (, objType, !=, null, ), {, FunctionType, constructor, ;, if, (, objType, ., isFunctionType, (, ), ), {]
[., cast, (, type, ), ;, if, (, objType, !=, null, ), {, FunctionType, constructor, ;, if, (, objType, .]
[), ;, if, (, objType, !=, null, ), {, FunctionType, constructor, ;, if, (, objType, ., isFunctionType, (, ), )]
[), {, FunctionType, constructor, ;, if, (, objType, ., isFunctionType, (, ), ), {, constructor, =, objType, ., toMaybeFunctionType, (]
[!=, null, ), {, FunctionType, constructor, ;, if, (, objType, ., isFunctionType, (, ), ), {, constructor, =, objType, .]
[), {, FunctionType, constructor, ;, if, (, objType, ., isFunctionType, (, ), ), {, constructor, =, objType, ., toMaybeFunctionType, (]
[), {, constructor, =, objType, ., toMaybeFunctionType, (, ), ;, }, else, if, (, objType, ., isFunctionPrototypeType, (, ), )]
[., isFunctionType, (, ), ), {, constructor, =, objType, ., toMaybeFunctionType, (, ), ;, }, else, if, (, objType, .]
[=, objType, ., toMaybeFunctionType, (, ), ;, }, else, if, (, objType, ., isFunctionPrototypeType, (, ), ), {, constructor, =]
[;, }, else, if, (, objType, ., isFunctionPrototypeType, (, ), ), {, constructor, =, objType, ., getOwnerFunction, (, ), ;]
[., toMaybeFunctionType, (, ), ;, }, else, if, (, objType, ., isFunctionPrototypeType, (, ), ), {, constructor, =, objType, .]
[), {, constructor, =, objType, ., getOwnerFunction, (, ), ;, }, else, {, constructor, =, objType, ., getConstructor, (, )]
[., isFunctionPrototypeType, (, ), ), {, constructor, =, objType, ., getOwnerFunction, (, ), ;, }, else, {, constructor, =, objType]
[=, objType, ., getOwnerFunction, (, ), ;, }, else, {, constructor, =, objType, ., getConstructor, (, ), ;, }, while]
[;, }, else, {, constructor, =, objType, ., getConstructor, (, ), ;, }, while, (, constructor, !=, null, ), {]
[., getOwnerFunction, (, ), ;, }, else, {, constructor, =, objType, ., getConstructor, (, ), ;, }, while, (, constructor]
[=, objType, ., getConstructor, (, ), ;, }, while, (, constructor, !=, null, ), {, for, (, ObjectType, itype, :]
[;, }, while, (, constructor, !=, null, ), {, for, (, ObjectType, itype, :, constructor, ., getImplementedInterfaces, (, ), )]
[., getConstructor, (, ), ;, }, while, (, constructor, !=, null, ), {, for, (, ObjectType, itype, :, constructor, .]
[), {, for, (, ObjectType, itype, :, constructor, ., getImplementedInterfaces, (, ), ), {, JSType, top, =, getTypeWithProperty, (, p]
[!=, null, ), {, for, (, ObjectType, itype, :, constructor, ., getImplementedInterfaces, (, ), ), {, JSType, top, =, getTypeWithProperty]
[), {, for, (, ObjectType, itype, :, constructor, ., getImplementedInterfaces, (, ), ), {, JSType, top, =, getTypeWithProperty, (, p]
[), {, JSType, top, =, getTypeWithProperty, (, p, ., name, ,, itype, ), ;, if, (, top, !=, null, )]
[., getImplementedInterfaces, (, ), ), {, JSType, top, =, getTypeWithProperty, (, p, ., name, ,, itype, ), ;, if, (]
[;, if, (, top, !=, null, ), {, p, ., addType, (, itype, ,, top, ,, relatedType, ), ;, }]
[,, itype, ), ;, if, (, top, !=, null, ), {, p, ., addType, (, itype, ,, top, ,, relatedType]
[., name, ,, itype, ), ;, if, (, top, !=, null, ), {, p, ., addType, (, itype, ,, top]
[), ;, if, (, top, !=, null, ), {, p, ., addType, (, itype, ,, top, ,, relatedType, ), ;]
[), {, p, ., addType, (, itype, ,, top, ,, relatedType, ), ;, }, else, {, recordInterfaces, (, itype, ,]
[!=, null, ), {, p, ., addType, (, itype, ,, top, ,, relatedType, ), ;, }, else, {, recordInterfaces, (]
[), {, p, ., addType, (, itype, ,, top, ,, relatedType, ), ;, }, else, {, recordInterfaces, (, itype, ,]
[;, }, else, {, recordInterfaces, (, itype, ,, relatedType, ,, p, ), ;, }, if, (, p, ., skipRenaming, )]
[., addType, (, itype, ,, top, ,, relatedType, ), ;, }, else, {, recordInterfaces, (, itype, ,, relatedType, ,, p]
[,, top, ,, relatedType, ), ;, }, else, {, recordInterfaces, (, itype, ,, relatedType, ,, p, ), ;, }, if]
[,, relatedType, ), ;, }, else, {, recordInterfaces, (, itype, ,, relatedType, ,, p, ), ;, }, if, (, p]
[), ;, }, else, {, recordInterfaces, (, itype, ,, relatedType, ,, p, ), ;, }, if, (, p, ., skipRenaming]
[;, }, if, (, p, ., skipRenaming, ), return, ;, }, if, (, constructor, ., isInterface, (, ), ||, constructor]
[,, relatedType, ,, p, ), ;, }, if, (, p, ., skipRenaming, ), return, ;, }, if, (, constructor, .]
[,, p, ), ;, }, if, (, p, ., skipRenaming, ), return, ;, }, if, (, constructor, ., isInterface, (]
[), ;, }, if, (, p, ., skipRenaming, ), return, ;, }, if, (, constructor, ., isInterface, (, ), ||]
[), return, ;, }, if, (, constructor, ., isInterface, (, ), ||, constructor, ., isConstructor, (, ), ), {, constructor]
[., skipRenaming, ), return, ;, }, if, (, constructor, ., isInterface, (, ), ||, constructor, ., isConstructor, (, ), )]
[), {, constructor, =, constructor, ., getSuperClassConstructor, (, ), ;, }, else, {, constructor, =, null, ;, }, }, }]
[||, constructor, ., isConstructor, (, ), ), {, constructor, =, constructor, ., getSuperClassConstructor, (, ), ;, }, else, {, constructor]
[., isInterface, (, ), ||, constructor, ., isConstructor, (, ), ), {, constructor, =, constructor, ., getSuperClassConstructor, (, ), ;]
[), {, constructor, =, constructor, ., getSuperClassConstructor, (, ), ;, }, else, {, constructor, =, null, ;, }, }, }]
[., isConstructor, (, ), ), {, constructor, =, constructor, ., getSuperClassConstructor, (, ), ;, }, else, {, constructor, =, null]
[=, constructor, ., getSuperClassConstructor, (, ), ;, }, else, {, constructor, =, null, ;, }, }, }, }, }, private]
[;, }, else, {, constructor, =, null, ;, }, }, }, }, }, private, static, class, ConcreteTypeSystem, implements, TypeSystem, <]
[., getSuperClassConstructor, (, ), ;, }, else, {, constructor, =, null, ;, }, }, }, }, }, private, static, class]
[=, null, ;, }, }, }, }, }, private, static, class, ConcreteTypeSystem, implements, TypeSystem, <, ConcreteType, >, {, private, final]
[;, }, }, }, }, }, private, static, class, ConcreteTypeSystem, implements, TypeSystem, <, ConcreteType, >, {, private, final, TightenTypes, tt]
[;, private, static, final, JSTypeNative, [, ], nativeTypes, =, new, JSTypeNative, [, ], {, JSTypeNative, ., BOOLEAN_OBJECT_TYPE, ,, JSTypeNative, .]
[., newHashSet, (, ), ;, private, static, final, JSTypeNative, [, ], nativeTypes, =, new, JSTypeNative, [, ], {, JSTypeNative, .]
[;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {, this, ., tt, =, tt, ;, this, ., codingConvention]
[;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {, this, ., tt, =, tt, ;, this, ., codingConvention]
[,, JSTypeNative, ., NUMBER_OBJECT_TYPE, ,, JSTypeNative, ., STRING_OBJECT_TYPE, }, ;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {]
[., BOOLEAN_OBJECT_TYPE, ,, JSTypeNative, ., NUMBER_OBJECT_TYPE, ,, JSTypeNative, ., STRING_OBJECT_TYPE, }, ;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention]
[,, JSTypeNative, ., STRING_OBJECT_TYPE, }, ;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {, this, ., tt, =]
[., NUMBER_OBJECT_TYPE, ,, JSTypeNative, ., STRING_OBJECT_TYPE, }, ;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {, this, .]
[}, ;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {, this, ., tt, =, tt, ;, this, .]
[., STRING_OBJECT_TYPE, }, ;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {, this, ., tt, =, tt, ;]
[=, tt, ;, this, ., codingConvention, =, convention, ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {]
[., tt, =, tt, ;, this, ., codingConvention, =, convention, ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type]
[;, this, ., codingConvention, =, convention, ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (]
[=, convention, ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type, ., isUnionType]
[., codingConvention, =, convention, ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type]
[;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type, ., isUnionType, (, )]
[;, invalidatingTypes, ., add, (, type, ), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, getRootScope, (, ), {]
[), ;, invalidatingTypes, ., add, (, type, ), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, getRootScope, (, )]
[), ;, invalidatingTypes, ., add, (, type, ), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, getRootScope, (, )]
[., isUnionType, (, ), ), ;, invalidatingTypes, ., add, (, type, ), ;, }, @, Override, public, StaticScope, <, ConcreteType]
[;, }, @, Override, public, StaticScope, <, ConcreteType, >, getRootScope, (, ), {, return, tt, ., getTopScope, (, ), ;]
[., add, (, type, ), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, getRootScope, (, ), {, return, tt]
[), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, getRootScope, (, ), {, return, tt, ., getTopScope, (, )]
[;, }, @, Override, public, StaticScope, <, ConcreteType, >, getFunctionScope, (, Node, decl, ), {, ConcreteFunctionType, func, =, tt, .]
[., getTopScope, (, ), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, getFunctionScope, (, Node, decl, ), {, ConcreteFunctionType]
[;, return, (, func, !=, null, ), ?, func, ., getScope, (, ), :, (, StaticScope, <, ConcreteType, >, )]
[., getConcreteFunction, (, decl, ), ;, return, (, func, !=, null, ), ?, func, ., getScope, (, ), :, (]
[), ;, return, (, func, !=, null, ), ?, func, ., getScope, (, ), :, (, StaticScope, <, ConcreteType, >]
[;, }, @, Override, public, ConcreteType, getType, (, StaticScope, <, ConcreteType, >, scope, ,, Node, node, ,, String, prop, )]
[?, func, ., getScope, (, ), :, (, StaticScope, <, ConcreteType, >, ), null, ;, }, @, Override, public, ConcreteType]
[), ?, func, ., getScope, (, ), :, (, StaticScope, <, ConcreteType, >, ), null, ;, }, @, Override, public]
[!=, null, ), ?, func, ., getScope, (, ), :, (, StaticScope, <, ConcreteType, >, ), null, ;, }, @]
[), ?, func, ., getScope, (, ), :, (, StaticScope, <, ConcreteType, >, ), null, ;, }, @, Override, public]
[:, (, StaticScope, <, ConcreteType, >, ), null, ;, }, @, Override, public, ConcreteType, getType, (, StaticScope, <, ConcreteType, >]
[., getScope, (, ), :, (, StaticScope, <, ConcreteType, >, ), null, ;, }, @, Override, public, ConcreteType, getType, (]
[;, }, @, Override, public, ConcreteType, getType, (, StaticScope, <, ConcreteType, >, scope, ,, Node, node, ,, String, prop, )]
[;, }, @, Override, public, ConcreteType, getType, (, StaticScope, <, ConcreteType, >, scope, ,, Node, node, ,, String, prop, )]
[), {, ConcreteType, c, =, tt, ., inferConcreteType, (, (, TightenTypes, ., ConcreteScope, ), scope, ,, node, ), ;, return]
[!=, null, ), {, ConcreteType, c, =, tt, ., inferConcreteType, (, (, TightenTypes, ., ConcreteScope, ), scope, ,, node, )]
[), {, ConcreteType, c, =, tt, ., inferConcreteType, (, (, TightenTypes, ., ConcreteScope, ), scope, ,, node, ), ;, return]
[;, return, maybeAddAutoboxes, (, c, ,, node, ,, prop, ), ;, }, else, {, return, null, ;, }, }, private]
[., inferConcreteType, (, (, TightenTypes, ., ConcreteScope, ), scope, ,, node, ), ;, return, maybeAddAutoboxes, (, c, ,, node, ,]
[,, node, ), ;, return, maybeAddAutoboxes, (, c, ,, node, ,, prop, ), ;, }, else, {, return, null, ;]
[,, node, ), ;, return, maybeAddAutoboxes, (, c, ,, node, ,, prop, ), ;, }, else, {, return, null, ;]
[), ;, return, maybeAddAutoboxes, (, c, ,, node, ,, prop, ), ;, }, else, {, return, null, ;, }, }]
[;, }, else, {, return, null, ;, }, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, Node, node, ,, String]
[,, node, ,, prop, ), ;, }, else, {, return, null, ;, }, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType]
[,, prop, ), ;, }, else, {, return, null, ;, }, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, Node]
[), ;, }, else, {, return, null, ;, }, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, Node, node, ,]
[;, }, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, Node, node, ,, String, prop, ), {, JSType, jsType, =]
[;, if, (, jsType, ==, null, ), {, return, cType, ;, }, else, if, (, jsType, ., isUnknownType, (, )]
[., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, cType, ;, }, else, if, (, jsType]
[), {, return, cType, ;, }, else, if, (, jsType, ., isUnknownType, (, ), ), {, for, (, JSTypeNative, nativeType]
[==, null, ), {, return, cType, ;, }, else, if, (, jsType, ., isUnknownType, (, ), ), {, for, (]
[), {, return, cType, ;, }, else, if, (, jsType, ., isUnknownType, (, ), ), {, for, (, JSTypeNative, nativeType]
[;, }, else, if, (, jsType, ., isUnknownType, (, ), ), {, for, (, JSTypeNative, nativeType, :, nativeTypes, ), {]
[), {, for, (, JSTypeNative, nativeType, :, nativeTypes, ), {, ConcreteType, concrete, =, tt, ., getConcreteInstance, (, tt, ., getTypeRegistry]
[., isUnknownType, (, ), ), {, for, (, JSTypeNative, nativeType, :, nativeTypes, ), {, ConcreteType, concrete, =, tt, ., getConcreteInstance]
[), {, ConcreteType, concrete, =, tt, ., getConcreteInstance, (, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), )]
[;, if, (, concrete, !=, null, &&, !, concrete, ., getPropertyType, (, prop, ), ., isNone, (, ), ), {]
[., getConcreteInstance, (, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), ), ;, if, (, concrete, !=, null]
[), ;, if, (, concrete, !=, null, &&, !, concrete, ., getPropertyType, (, prop, ), ., isNone, (, ), )]
[., getNativeObjectType, (, nativeType, ), ), ;, if, (, concrete, !=, null, &&, !, concrete, ., getPropertyType, (, prop, )]
[., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), ), ;, if, (, concrete, !=, null, &&, !, concrete, .]
[), ), ;, if, (, concrete, !=, null, &&, !, concrete, ., getPropertyType, (, prop, ), ., isNone, (, )]
[), {, cType, =, cType, ., unionWith, (, concrete, ), ;, }, }, return, cType, ;, }, return, maybeAddAutoboxes, (]
[&&, !, concrete, ., getPropertyType, (, prop, ), ., isNone, (, ), ), {, cType, =, cType, ., unionWith, (]
[!=, null, &&, !, concrete, ., getPropertyType, (, prop, ), ., isNone, (, ), ), {, cType, =, cType, .]
[&&, !, concrete, ., getPropertyType, (, prop, ), ., isNone, (, ), ), {, cType, =, cType, ., unionWith, (]
[), {, cType, =, cType, ., unionWith, (, concrete, ), ;, }, }, return, cType, ;, }, return, maybeAddAutoboxes, (]
[), {, cType, =, cType, ., unionWith, (, concrete, ), ;, }, }, return, cType, ;, }, return, maybeAddAutoboxes, (]
[., isNone, (, ), ), {, cType, =, cType, ., unionWith, (, concrete, ), ;, }, }, return, cType, ;]
[., getPropertyType, (, prop, ), ., isNone, (, ), ), {, cType, =, cType, ., unionWith, (, concrete, ), ;]
[), ., isNone, (, ), ), {, cType, =, cType, ., unionWith, (, concrete, ), ;, }, }, return, cType]
[=, cType, ., unionWith, (, concrete, ), ;, }, }, return, cType, ;, }, return, maybeAddAutoboxes, (, cType, ,, jsType]
[;, }, }, return, cType, ;, }, return, maybeAddAutoboxes, (, cType, ,, jsType, ,, prop, ), ;, }, private, ConcreteType]
[., unionWith, (, concrete, ), ;, }, }, return, cType, ;, }, return, maybeAddAutoboxes, (, cType, ,, jsType, ,, prop]
[), ;, }, }, return, cType, ;, }, return, maybeAddAutoboxes, (, cType, ,, jsType, ,, prop, ), ;, }, private]
[;, }, return, maybeAddAutoboxes, (, cType, ,, jsType, ,, prop, ), ;, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,]
[;, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, JSType, jsType, ,, String, prop, ), {, jsType, =, jsType, .]
[,, jsType, ,, prop, ), ;, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, JSType, jsType, ,, String, prop, )]
[,, prop, ), ;, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, JSType, jsType, ,, String, prop, ), {, jsType]
[), ;, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, JSType, jsType, ,, String, prop, ), {, jsType, =, jsType]
[=, jsType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, jsType, ., isUnionType, (, ), ), {, for, (, JSType, alt]
[;, if, (, jsType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, )]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, jsType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, jsType]
[), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, cType, =]
[., isUnionType, (, ), ), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[), {, cType, =, maybeAddAutoboxes, (, cType, ,, alt, ,, prop, ), ;, }, return, cType, ;, }, else, if]
[., getAlternates, (, ), ), {, cType, =, maybeAddAutoboxes, (, cType, ,, alt, ,, prop, ), ;, }, return, cType]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, cType, =, maybeAddAutoboxes, (, cType, ,, alt, ,, prop, )]
[=, maybeAddAutoboxes, (, cType, ,, alt, ,, prop, ), ;, }, return, cType, ;, }, else, if, (, jsType, .]
[;, }, return, cType, ;, }, else, if, (, jsType, ., isEnumElementType, (, ), ), {, return, maybeAddAutoboxes, (, cType]
[,, alt, ,, prop, ), ;, }, return, cType, ;, }, else, if, (, jsType, ., isEnumElementType, (, ), )]
[,, prop, ), ;, }, return, cType, ;, }, else, if, (, jsType, ., isEnumElementType, (, ), ), {, return]
[), ;, }, return, cType, ;, }, else, if, (, jsType, ., isEnumElementType, (, ), ), {, return, maybeAddAutoboxes, (]
[;, }, else, if, (, jsType, ., isEnumElementType, (, ), ), {, return, maybeAddAutoboxes, (, cType, ,, jsType, ., toMaybeEnumElementType]
[), {, return, maybeAddAutoboxes, (, cType, ,, jsType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, prop, ), ;]
[., isEnumElementType, (, ), ), {, return, maybeAddAutoboxes, (, cType, ,, jsType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, )]
[;, }, if, (, jsType, ., autoboxesTo, (, ), !=, null, ), {, JSType, autoboxed, =, jsType, ., autoboxesTo, (]
[,, jsType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, prop, ), ;, }, if, (, jsType, ., autoboxesTo]
[,, prop, ), ;, }, if, (, jsType, ., autoboxesTo, (, ), !=, null, ), {, JSType, autoboxed, =, jsType]
[., getPrimitiveType, (, ), ,, prop, ), ;, }, if, (, jsType, ., autoboxesTo, (, ), !=, null, ), {]
[., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, prop, ), ;, }, if, (, jsType, ., autoboxesTo, (, )]
[), ;, }, if, (, jsType, ., autoboxesTo, (, ), !=, null, ), {, JSType, autoboxed, =, jsType, ., autoboxesTo]
[), {, JSType, autoboxed, =, jsType, ., autoboxesTo, (, ), ;, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (]
[!=, null, ), {, JSType, autoboxed, =, jsType, ., autoboxesTo, (, ), ;, return, cType, ., unionWith, (, tt, .]
[., autoboxesTo, (, ), !=, null, ), {, JSType, autoboxed, =, jsType, ., autoboxesTo, (, ), ;, return, cType, .]
[), {, JSType, autoboxed, =, jsType, ., autoboxesTo, (, ), ;, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (]
[;, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), autoboxed, ), ), ;, }, else, if]
[., autoboxesTo, (, ), ;, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), autoboxed, ), )]
[;, }, else, if, (, jsType, ., unboxesTo, (, ), !=, null, ), {, return, cType, ., unionWith, (, tt]
[., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), autoboxed, ), ), ;, }, else, if, (, jsType, .]
[), ;, }, else, if, (, jsType, ., unboxesTo, (, ), !=, null, ), {, return, cType, ., unionWith, (]
[., getConcreteInstance, (, (, ObjectType, ), autoboxed, ), ), ;, }, else, if, (, jsType, ., unboxesTo, (, ), !=]
[), ), ;, }, else, if, (, jsType, ., unboxesTo, (, ), !=, null, ), {, return, cType, ., unionWith]
[), ), ;, }, else, if, (, jsType, ., unboxesTo, (, ), !=, null, ), {, return, cType, ., unionWith]
[), {, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), jsType, ), ), ;, }, return]
[!=, null, ), {, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), jsType, ), ), ;]
[., unboxesTo, (, ), !=, null, ), {, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, )]
[), {, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), jsType, ), ), ;, }, return]
[;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (, type, ==]
[., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), jsType, ), ), ;, }, return, cType, ;, }, @]
[), ;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (, type]
[., getConcreteInstance, (, (, ObjectType, ), jsType, ), ), ;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType]
[), ), ;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (]
[), ), ;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (]
[;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (, type, ==, null, ), ||, type]
[;, }, @, Override, public, ImmutableSet, <, ConcreteType, >, getTypesToSkipForType, (, ConcreteType, type, ), {, return, ImmutableSet, ., of, (]
[||, (, type, ., isInstance, (, ), &&, invalidatingTypes, ., contains, (, type, ., toInstance, (, ), ., instanceType, )]
[||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, ), &&, invalidatingTypes, ., contains, (, type, .]
[||, type, ., isAll, (, ), ||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, ), &&]
[), ||, type, ., isAll, (, ), ||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, )]
[==, null, ), ||, type, ., isAll, (, ), ||, type, ., isFunction, (, ), ||, (, type, ., isInstance]
[), ||, type, ., isAll, (, ), ||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, )]
[||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, ), &&, invalidatingTypes, ., contains, (, type, .]
[., isAll, (, ), ||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, ), &&, invalidatingTypes, .]
[||, (, type, ., isInstance, (, ), &&, invalidatingTypes, ., contains, (, type, ., toInstance, (, ), ., instanceType, )]
[., isFunction, (, ), ||, (, type, ., isInstance, (, ), &&, invalidatingTypes, ., contains, (, type, ., toInstance, (]
[;, }, @, Override, public, ImmutableSet, <, ConcreteType, >, getTypesToSkipForType, (, ConcreteType, type, ), {, return, ImmutableSet, ., of, (]
[), ;, }, @, Override, public, ImmutableSet, <, ConcreteType, >, getTypesToSkipForType, (, ConcreteType, type, ), {, return, ImmutableSet, ., of]
[&&, invalidatingTypes, ., contains, (, type, ., toInstance, (, ), ., instanceType, ), ), ;, }, @, Override, public, ImmutableSet]
[., isInstance, (, ), &&, invalidatingTypes, ., contains, (, type, ., toInstance, (, ), ., instanceType, ), ), ;, }]
[), ;, }, @, Override, public, ImmutableSet, <, ConcreteType, >, getTypesToSkipForType, (, ConcreteType, type, ), {, return, ImmutableSet, ., of]
[., contains, (, type, ., toInstance, (, ), ., instanceType, ), ), ;, }, @, Override, public, ImmutableSet, <, ConcreteType]
[), ), ;, }, @, Override, public, ImmutableSet, <, ConcreteType, >, getTypesToSkipForType, (, ConcreteType, type, ), {, return, ImmutableSet, .]
[., instanceType, ), ), ;, }, @, Override, public, ImmutableSet, <, ConcreteType, >, getTypesToSkipForType, (, ConcreteType, type, ), {, return]
[., toInstance, (, ), ., instanceType, ), ), ;, }, @, Override, public, ImmutableSet, <, ConcreteType, >, getTypesToSkipForType, (, ConcreteType]
[;, }, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), &&, !]
[., of, (, type, ), ;, }, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return, type, .]
[), ;, }, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), &&]
[;, }, @, Override, public, ConcreteType, restrictByNotNullOrUndefined, (, ConcreteType, type, ), {, return, type, ;, }, @, Override, public, Iterable]
[&&, !, (, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ||, type, ., toInstance, (, ), ., instanceType]
[., isInstance, (, ), &&, !, (, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ||, type, ., toInstance]
[;, }, @, Override, public, ConcreteType, restrictByNotNullOrUndefined, (, ConcreteType, type, ), {, return, type, ;, }, @, Override, public, Iterable]
[;, }, @, Override, public, ConcreteType, restrictByNotNullOrUndefined, (, ConcreteType, type, ), {, return, type, ;, }, @, Override, public, Iterable]
[), ;, }, @, Override, public, ConcreteType, restrictByNotNullOrUndefined, (, ConcreteType, type, ), {, return, type, ;, }, @, Override, public]
[||, type, ., toInstance, (, ), ., instanceType, ., isInstanceType, (, ), ), ;, }, @, Override, public, ConcreteType, restrictByNotNullOrUndefined]
[., isFunctionPrototype, (, ), ||, type, ., toInstance, (, ), ., instanceType, ., isInstanceType, (, ), ), ;, }, @]
[., toInstance, (, ), ., isFunctionPrototype, (, ), ||, type, ., toInstance, (, ), ., instanceType, ., isInstanceType, (, )]
[), ;, }, @, Override, public, ConcreteType, restrictByNotNullOrUndefined, (, ConcreteType, type, ), {, return, type, ;, }, @, Override, public]
[., isInstanceType, (, ), ), ;, }, @, Override, public, ConcreteType, restrictByNotNullOrUndefined, (, ConcreteType, type, ), {, return, type, ;]
[., instanceType, ., isInstanceType, (, ), ), ;, }, @, Override, public, ConcreteType, restrictByNotNullOrUndefined, (, ConcreteType, type, ), {, return]
[., toInstance, (, ), ., instanceType, ., isInstanceType, (, ), ), ;, }, @, Override, public, ConcreteType, restrictByNotNullOrUndefined, (, ConcreteType]
[;, }, @, Override, public, Iterable, <, ConcreteType, >, getTypeAlternatives, (, ConcreteType, type, ), {, if, (, type, ., isUnion]
[), {, return, (, (, ConcreteUnionType, ), type, ), ., getAlternatives, (, ), ;, }, else, {, return, null, ;]
[., isUnion, (, ), ), {, return, (, (, ConcreteUnionType, ), type, ), ., getAlternatives, (, ), ;, }, else]
[;, }, else, {, return, null, ;, }, }, @, Override, public, ConcreteType, getTypeWithProperty, (, String, field, ,, ConcreteType, type]
[., getAlternatives, (, ), ;, }, else, {, return, null, ;, }, }, @, Override, public, ConcreteType, getTypeWithProperty, (, String]
[), ., getAlternatives, (, ), ;, }, else, {, return, null, ;, }, }, @, Override, public, ConcreteType, getTypeWithProperty, (]
[), ., getAlternatives, (, ), ;, }, else, {, return, null, ;, }, }, @, Override, public, ConcreteType, getTypeWithProperty, (]
[;, }, }, @, Override, public, ConcreteType, getTypeWithProperty, (, String, field, ,, ConcreteType, type, ), {, if, (, type, .]
[), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, return, instanceType, ., getInstanceTypeWithProperty, (, field, ), ;, }, else]
[., isInstance, (, ), ), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, return, instanceType, ., getInstanceTypeWithProperty, (, field]
[;, return, instanceType, ., getInstanceTypeWithProperty, (, field, ), ;, }, else, if, (, type, ., isFunction, (, ), ), {]
[;, return, instanceType, ., getInstanceTypeWithProperty, (, field, ), ;, }, else, if, (, type, ., isFunction, (, ), ), {]
[;, }, else, if, (, type, ., isFunction, (, ), ), {, if, (, "prototype", ., equals, (, field, )]
[., getInstanceTypeWithProperty, (, field, ), ;, }, else, if, (, type, ., isFunction, (, ), ), {, if, (, "prototype"]
[), ;, }, else, if, (, type, ., isFunction, (, ), ), {, if, (, "prototype", ., equals, (, field]
[), {, if, (, "prototype", ., equals, (, field, ), ||, codingConvention, ., isSuperClassReference, (, field, ), ), {, return]
[., isFunction, (, ), ), {, if, (, "prototype", ., equals, (, field, ), ||, codingConvention, ., isSuperClassReference, (, field]
[), {, return, type, ;, }, }, else, if, (, type, ., isNone, (, ), ), {, return, new, ConcreteUniqueType]
[||, codingConvention, ., isSuperClassReference, (, field, ), ), {, return, type, ;, }, }, else, if, (, type, ., isNone]
[., equals, (, field, ), ||, codingConvention, ., isSuperClassReference, (, field, ), ), {, return, type, ;, }, }, else]
[), ||, codingConvention, ., isSuperClassReference, (, field, ), ), {, return, type, ;, }, }, else, if, (, type, .]
[), {, return, type, ;, }, }, else, if, (, type, ., isNone, (, ), ), {, return, new, ConcreteUniqueType]
[., isSuperClassReference, (, field, ), ), {, return, type, ;, }, }, else, if, (, type, ., isNone, (, )]
[), ), {, return, type, ;, }, }, else, if, (, type, ., isNone, (, ), ), {, return, new]
[;, }, }, else, if, (, type, ., isNone, (, ), ), {, return, new, ConcreteUniqueType, (, ++, nextUniqueId, )]
[), {, return, new, ConcreteUniqueType, (, ++, nextUniqueId, ), ;, }, else, if, (, type, ., isUnion, (, ), )]
[., isNone, (, ), ), {, return, new, ConcreteUniqueType, (, ++, nextUniqueId, ), ;, }, else, if, (, type, .]
[;, }, else, if, (, type, ., isUnion, (, ), ), {, for, (, ConcreteType, t, :, (, (, ConcreteUnionType]
[), ;, }, else, if, (, type, ., isUnion, (, ), ), {, for, (, ConcreteType, t, :, (, (]
[), ;, }, else, if, (, type, ., isUnion, (, ), ), {, for, (, ConcreteType, t, :, (, (]
[), {, for, (, ConcreteType, t, :, (, (, ConcreteUnionType, ), type, ), ., getAlternatives, (, ), ), {, ConcreteType]
[., isUnion, (, ), ), {, for, (, ConcreteType, t, :, (, (, ConcreteUnionType, ), type, ), ., getAlternatives, (]
[), {, ConcreteType, ret, =, getTypeWithProperty, (, field, ,, t, ), ;, if, (, ret, !=, null, ), {, return]
[., getAlternatives, (, ), ), {, ConcreteType, ret, =, getTypeWithProperty, (, field, ,, t, ), ;, if, (, ret, !=]
[), ., getAlternatives, (, ), ), {, ConcreteType, ret, =, getTypeWithProperty, (, field, ,, t, ), ;, if, (, ret]
[), ., getAlternatives, (, ), ), {, ConcreteType, ret, =, getTypeWithProperty, (, field, ,, t, ), ;, if, (, ret]
[;, if, (, ret, !=, null, ), {, return, ret, ;, }, }, }, return, null, ;, }, @, Override]
[,, t, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, }, }, return, null, ;]
[), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, }, }, return, null, ;, }, @]
[), {, return, ret, ;, }, }, }, return, null, ;, }, @, Override, public, ConcreteType, getInstanceFromPrototype, (, ConcreteType, type]
[!=, null, ), {, return, ret, ;, }, }, }, return, null, ;, }, @, Override, public, ConcreteType, getInstanceFromPrototype, (]
[), {, return, ret, ;, }, }, }, return, null, ;, }, @, Override, public, ConcreteType, getInstanceFromPrototype, (, ConcreteType, type]
[;, }, }, }, return, null, ;, }, @, Override, public, ConcreteType, getInstanceFromPrototype, (, ConcreteType, type, ), {, if, (]
[;, }, @, Override, public, ConcreteType, getInstanceFromPrototype, (, ConcreteType, type, ), {, if, (, type, ., isInstance, (, ), )]
[), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, if, (, instanceType, ., isFunctionPrototype, (, ), ), {, return]
[., isInstance, (, ), ), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, if, (, instanceType, ., isFunctionPrototype, (]
[;, if, (, instanceType, ., isFunctionPrototype, (, ), ), {, return, instanceType, ., getConstructorType, (, ), ., getInstanceType, (, )]
[;, if, (, instanceType, ., isFunctionPrototype, (, ), ), {, return, instanceType, ., getConstructorType, (, ), ., getInstanceType, (, )]
[), {, return, instanceType, ., getConstructorType, (, ), ., getInstanceType, (, ), ;, }, }, return, null, ;, }, @]
[., isFunctionPrototype, (, ), ), {, return, instanceType, ., getConstructorType, (, ), ., getInstanceType, (, ), ;, }, }, return]
[;, }, }, return, null, ;, }, @, Override, public, void, recordInterfaces, (, ConcreteType, type, ,, ConcreteType, relatedType, ,, DisambiguateProperties]
[., getInstanceType, (, ), ;, }, }, return, null, ;, }, @, Override, public, void, recordInterfaces, (, ConcreteType, type, ,]
[., getConstructorType, (, ), ., getInstanceType, (, ), ;, }, }, return, null, ;, }, @, Override, public, void, recordInterfaces]
[;, }, @, Override, public, void, recordInterfaces, (, ConcreteType, type, ,, ConcreteType, relatedType, ,, DisambiguateProperties, <, ConcreteType, >, ., Property]
