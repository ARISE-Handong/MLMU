[;, private, AbstractCompiler, compiler, ;, private, LocationAbstraction, locationAbstraction, ;, private, final, LocationAbstractionMode, locationAbstractionIdentifier, ;, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ,]
[;, }, }, ;, private, AbstractCompiler, compiler, ;, private, LocationAbstraction, locationAbstraction, ;, private, final, LocationAbstractionMode, locationAbstractionIdentifier, ;, public, SideEffectsAnalysis, (]
[;, }, }, ;, private, AbstractCompiler, compiler, ;, private, LocationAbstraction, locationAbstraction, ;, private, final, LocationAbstractionMode, locationAbstractionIdentifier, ;, public, SideEffectsAnalysis, (]
[., isFunction, (, ), ;, }, }, ;, private, AbstractCompiler, compiler, ;, private, LocationAbstraction, locationAbstraction, ;, private, final, LocationAbstractionMode, locationAbstractionIdentifier]
[=, compiler, ;, this, ., locationAbstractionIdentifier, =, locationAbstractionMode, ;, }, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ), {, this, (, compiler]
[., compiler, =, compiler, ;, this, ., locationAbstractionIdentifier, =, locationAbstractionMode, ;, }, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ), {, this]
[;, this, ., locationAbstractionIdentifier, =, locationAbstractionMode, ;, }, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, LocationAbstractionMode]
[=, locationAbstractionMode, ;, }, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, LocationAbstractionMode, ., DEGENERATE, ), ;]
[., locationAbstractionIdentifier, =, locationAbstractionMode, ;, }, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, LocationAbstractionMode, ., DEGENERATE]
[;, }, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, LocationAbstractionMode, ., DEGENERATE, ), ;, }, @]
[,, LocationAbstractionMode, ., DEGENERATE, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, switch, (, locationAbstractionIdentifier, )]
[., DEGENERATE, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, switch, (]
[), {, case, DEGENERATE, :, locationAbstraction, =, new, DegenerateLocationAbstraction, (, ), ;, break, ;, case, VISIBILITY_BASED, :, locationAbstraction, =, createVisibilityAbstraction]
[:, locationAbstraction, =, new, DegenerateLocationAbstraction, (, ), ;, break, ;, case, VISIBILITY_BASED, :, locationAbstraction, =, createVisibilityAbstraction, (, externs, ,, root]
[=, new, DegenerateLocationAbstraction, (, ), ;, break, ;, case, VISIBILITY_BASED, :, locationAbstraction, =, createVisibilityAbstraction, (, externs, ,, root, ), ;]
[;, break, ;, case, VISIBILITY_BASED, :, locationAbstraction, =, createVisibilityAbstraction, (, externs, ,, root, ), ;, break, ;, default, :, throw]
[:, locationAbstraction, =, createVisibilityAbstraction, (, externs, ,, root, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized location abstraction ", +]
[=, createVisibilityAbstraction, (, externs, ,, root, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized location abstraction ", +, "identifier: ", +]
[;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized location abstraction ", +, "identifier: ", +, locationAbstractionIdentifier, ), ;, }, }, private, LocationAbstraction]
[,, root, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized location abstraction ", +, "identifier: ", +, locationAbstractionIdentifier, ), ;, }]
[), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized location abstraction ", +, "identifier: ", +, locationAbstractionIdentifier, ), ;, }, }, private]
[;, }, }, private, LocationAbstraction, createVisibilityAbstraction, (, Node, externs, ,, Node, root, ), {, VariableVisibilityAnalysis, variableVisibility, =, new, VariableVisibilityAnalysis, (]
[), ;, }, }, private, LocationAbstraction, createVisibilityAbstraction, (, Node, externs, ,, Node, root, ), {, VariableVisibilityAnalysis, variableVisibility, =, new, VariableVisibilityAnalysis]
[+, locationAbstractionIdentifier, ), ;, }, }, private, LocationAbstraction, createVisibilityAbstraction, (, Node, externs, ,, Node, root, ), {, VariableVisibilityAnalysis, variableVisibility, =]
[+, "identifier: ", +, locationAbstractionIdentifier, ), ;, }, }, private, LocationAbstraction, createVisibilityAbstraction, (, Node, externs, ,, Node, root, ), {, VariableVisibilityAnalysis]
[+, locationAbstractionIdentifier, ), ;, }, }, private, LocationAbstraction, createVisibilityAbstraction, (, Node, externs, ,, Node, root, ), {, VariableVisibilityAnalysis, variableVisibility, =]
[), ;, }, }, private, LocationAbstraction, createVisibilityAbstraction, (, Node, externs, ,, Node, root, ), {, VariableVisibilityAnalysis, variableVisibility, =, new, VariableVisibilityAnalysis]
[;, variableVisibility, ., process, (, externs, ,, root, ), ;, VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (, compiler, ), ;, variableMap]
[), ;, variableVisibility, ., process, (, externs, ,, root, ), ;, VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (, compiler, ), ;]
[;, VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (, compiler, ), ;, variableMap, ., mapUses, (, root, ), ;, return, new, VisibilityLocationAbstraction]
[., process, (, externs, ,, root, ), ;, VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (, compiler, ), ;, variableMap, ., mapUses]
[,, root, ), ;, VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (, compiler, ), ;, variableMap, ., mapUses, (, root, ), ;]
[), ;, VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (, compiler, ), ;, variableMap, ., mapUses, (, root, ), ;, return, new]
[;, variableMap, ., mapUses, (, root, ), ;, return, new, VisibilityLocationAbstraction, (, compiler, ,, variableVisibility, ,, variableMap, ), ;, }]
[), ;, variableMap, ., mapUses, (, root, ), ;, return, new, VisibilityLocationAbstraction, (, compiler, ,, variableVisibility, ,, variableMap, ), ;]
[;, return, new, VisibilityLocationAbstraction, (, compiler, ,, variableVisibility, ,, variableMap, ), ;, }, public, boolean, safeToMoveBefore, (, Node, source, ,]
[., mapUses, (, root, ), ;, return, new, VisibilityLocationAbstraction, (, compiler, ,, variableVisibility, ,, variableMap, ), ;, }, public, boolean]
[), ;, return, new, VisibilityLocationAbstraction, (, compiler, ,, variableVisibility, ,, variableMap, ), ;, }, public, boolean, safeToMoveBefore, (, Node, source]
[;, }, public, boolean, safeToMoveBefore, (, Node, source, ,, AbstractMotionEnvironment, environment, ,, Node, destination, ), {, Preconditions, ., checkNotNull, (]
[,, variableVisibility, ,, variableMap, ), ;, }, public, boolean, safeToMoveBefore, (, Node, source, ,, AbstractMotionEnvironment, environment, ,, Node, destination, )]
[,, variableMap, ), ;, }, public, boolean, safeToMoveBefore, (, Node, source, ,, AbstractMotionEnvironment, environment, ,, Node, destination, ), {, Preconditions]
[), ;, }, public, boolean, safeToMoveBefore, (, Node, source, ,, AbstractMotionEnvironment, environment, ,, Node, destination, ), {, Preconditions, ., checkNotNull]
[;, Preconditions, ., checkArgument, (, !, nodeHasAncestor, (, destination, ,, source, ), ), ;, if, (, isPure, (, source, )]
[., checkNotNull, (, locationAbstraction, ), ;, Preconditions, ., checkArgument, (, !, nodeHasAncestor, (, destination, ,, source, ), ), ;, if]
[), ;, Preconditions, ., checkArgument, (, !, nodeHasAncestor, (, destination, ,, source, ), ), ;, if, (, isPure, (, source]
[;, if, (, isPure, (, source, ), ), {, return, true, ;, }, if, (, nodeHasCall, (, source, ), )]
[., checkArgument, (, !, nodeHasAncestor, (, destination, ,, source, ), ), ;, if, (, isPure, (, source, ), ), {]
[), ;, if, (, isPure, (, source, ), ), {, return, true, ;, }, if, (, nodeHasCall, (, source, )]
[), ;, if, (, isPure, (, source, ), ), {, return, true, ;, }, if, (, nodeHasCall, (, source, )]
[,, source, ), ), ;, if, (, isPure, (, source, ), ), {, return, true, ;, }, if, (, nodeHasCall]
[), ), ;, if, (, isPure, (, source, ), ), {, return, true, ;, }, if, (, nodeHasCall, (, source]
[), {, return, true, ;, }, if, (, nodeHasCall, (, source, ), ), {, return, false, ;, }, LocationSummary, sourceLocationSummary]
[), ), {, return, true, ;, }, if, (, nodeHasCall, (, source, ), ), {, return, false, ;, }, LocationSummary]
[;, }, if, (, nodeHasCall, (, source, ), ), {, return, false, ;, }, LocationSummary, sourceLocationSummary, =, locationAbstraction, ., calculateLocationSummary]
[), {, return, false, ;, }, LocationSummary, sourceLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, source, ), ;, EffectLocation, sourceModSet, =, sourceLocationSummary]
[), ), {, return, false, ;, }, LocationSummary, sourceLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, source, ), ;, EffectLocation, sourceModSet, =]
[;, }, LocationSummary, sourceLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, source, ), ;, EffectLocation, sourceModSet, =, sourceLocationSummary, ., getModSet, (, )]
[;, EffectLocation, sourceModSet, =, sourceLocationSummary, ., getModSet, (, ), ;, if, (, !, sourceModSet, ., isEmpty, (, ), &&, !]
[., calculateLocationSummary, (, source, ), ;, EffectLocation, sourceModSet, =, sourceLocationSummary, ., getModSet, (, ), ;, if, (, !, sourceModSet, .]
[), ;, EffectLocation, sourceModSet, =, sourceLocationSummary, ., getModSet, (, ), ;, if, (, !, sourceModSet, ., isEmpty, (, ), &&]
[;, if, (, !, sourceModSet, ., isEmpty, (, ), &&, !, nodesHaveSameControlFlow, (, source, ,, destination, ), ), {, return]
[., getModSet, (, ), ;, if, (, !, sourceModSet, ., isEmpty, (, ), &&, !, nodesHaveSameControlFlow, (, source, ,, destination]
[), {, return, false, ;, }, EffectLocation, sourceRefSet, =, sourceLocationSummary, ., getRefSet, (, ), ;, Set, <, Node, >, environmentNodes]
[&&, !, nodesHaveSameControlFlow, (, source, ,, destination, ), ), {, return, false, ;, }, EffectLocation, sourceRefSet, =, sourceLocationSummary, ., getRefSet]
[&&, !, nodesHaveSameControlFlow, (, source, ,, destination, ), ), {, return, false, ;, }, EffectLocation, sourceRefSet, =, sourceLocationSummary, ., getRefSet]
[., isEmpty, (, ), &&, !, nodesHaveSameControlFlow, (, source, ,, destination, ), ), {, return, false, ;, }, EffectLocation, sourceRefSet]
[), {, return, false, ;, }, EffectLocation, sourceRefSet, =, sourceLocationSummary, ., getRefSet, (, ), ;, Set, <, Node, >, environmentNodes]
[), {, return, false, ;, }, EffectLocation, sourceRefSet, =, sourceLocationSummary, ., getRefSet, (, ), ;, Set, <, Node, >, environmentNodes]
[,, destination, ), ), {, return, false, ;, }, EffectLocation, sourceRefSet, =, sourceLocationSummary, ., getRefSet, (, ), ;, Set, <]
[), ), {, return, false, ;, }, EffectLocation, sourceRefSet, =, sourceLocationSummary, ., getRefSet, (, ), ;, Set, <, Node, >]
[;, }, EffectLocation, sourceRefSet, =, sourceLocationSummary, ., getRefSet, (, ), ;, Set, <, Node, >, environmentNodes, =, environment, ., calculateEnvironment]
[;, Set, <, Node, >, environmentNodes, =, environment, ., calculateEnvironment, (, ), ;, for, (, Node, environmentNode, :, environmentNodes, )]
[., getRefSet, (, ), ;, Set, <, Node, >, environmentNodes, =, environment, ., calculateEnvironment, (, ), ;, for, (, Node]
[;, for, (, Node, environmentNode, :, environmentNodes, ), {, if, (, nodeHasCall, (, environmentNode, ), ), {, return, false, ;]
[., calculateEnvironment, (, ), ;, for, (, Node, environmentNode, :, environmentNodes, ), {, if, (, nodeHasCall, (, environmentNode, ), )]
[), {, if, (, nodeHasCall, (, environmentNode, ), ), {, return, false, ;, }, }, LocationSummary, environmentLocationSummary, =, locationAbstraction, .]
[), {, return, false, ;, }, }, LocationSummary, environmentLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, environmentNodes, ), ;, EffectLocation, environmentModSet, =]
[), ), {, return, false, ;, }, }, LocationSummary, environmentLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, environmentNodes, ), ;, EffectLocation, environmentModSet]
[;, }, }, LocationSummary, environmentLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, environmentNodes, ), ;, EffectLocation, environmentModSet, =, environmentLocationSummary, ., getModSet, (]
[;, EffectLocation, environmentModSet, =, environmentLocationSummary, ., getModSet, (, ), ;, EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if]
[., calculateLocationSummary, (, environmentNodes, ), ;, EffectLocation, environmentModSet, =, environmentLocationSummary, ., getModSet, (, ), ;, EffectLocation, environmentRefSet, =, environmentLocationSummary, .]
[), ;, EffectLocation, environmentModSet, =, environmentLocationSummary, ., getModSet, (, ), ;, EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;]
[;, EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if, (, !, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&]
[., getModSet, (, ), ;, EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if, (, !, environmentModSet, ., intersectsLocation]
[;, if, (, !, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, ), &&, !]
[., getRefSet, (, ), ;, if, (, !, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&, !, environmentRefSet, ., intersectsLocation, (]
[), {, return, true, ;, }, return, false, ;, }, private, boolean, isPure, (, Node, node, ), {, return, false]
[&&, !, environmentModSet, ., intersectsLocation, (, sourceModSet, ), ), {, return, true, ;, }, return, false, ;, }, private, boolean]
[&&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, ), &&, !, environmentModSet, ., intersectsLocation, (, sourceModSet, ), ), {, return, true]
[&&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, ), &&, !, environmentModSet, ., intersectsLocation, (, sourceModSet, ), ), {, return, true]
[., intersectsLocation, (, sourceRefSet, ), &&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, ), &&, !, environmentModSet, ., intersectsLocation, (, sourceModSet]
[), &&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, ), &&, !, environmentModSet, ., intersectsLocation, (, sourceModSet, ), ), {, return]
[&&, !, environmentModSet, ., intersectsLocation, (, sourceModSet, ), ), {, return, true, ;, }, return, false, ;, }, private, boolean]
[&&, !, environmentModSet, ., intersectsLocation, (, sourceModSet, ), ), {, return, true, ;, }, return, false, ;, }, private, boolean]
[., intersectsLocation, (, sourceModSet, ), &&, !, environmentModSet, ., intersectsLocation, (, sourceModSet, ), ), {, return, true, ;, }, return]
[), &&, !, environmentModSet, ., intersectsLocation, (, sourceModSet, ), ), {, return, true, ;, }, return, false, ;, }, private]
[), {, return, true, ;, }, return, false, ;, }, private, boolean, isPure, (, Node, node, ), {, return, false]
[), {, return, true, ;, }, return, false, ;, }, private, boolean, isPure, (, Node, node, ), {, return, false]
[., intersectsLocation, (, sourceModSet, ), ), {, return, true, ;, }, return, false, ;, }, private, boolean, isPure, (, Node]
[), ), {, return, true, ;, }, return, false, ;, }, private, boolean, isPure, (, Node, node, ), {, return]
[;, }, return, false, ;, }, private, boolean, isPure, (, Node, node, ), {, return, false, ;, }, private, static]
[;, }, private, boolean, isPure, (, Node, node, ), {, return, false, ;, }, private, static, boolean, nodesHaveSameControlFlow, (, Node]
[;, }, private, static, boolean, nodesHaveSameControlFlow, (, Node, node1, ,, Node, node2, ), {, Node, node1DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node1]
[;, Node, node2DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node2, ), ;, if, (, node1DeepestControlDependentBlock, ==, node2DeepestControlDependentBlock, ), {, if, (, node2DeepestControlDependentBlock, !=]
[), ;, Node, node2DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node2, ), ;, if, (, node1DeepestControlDependentBlock, ==, node2DeepestControlDependentBlock, ), {, if, (, node2DeepestControlDependentBlock]
[;, if, (, node1DeepestControlDependentBlock, ==, node2DeepestControlDependentBlock, ), {, if, (, node2DeepestControlDependentBlock, !=, null, ), {, if, (, node2DeepestControlDependentBlock, ., isCase]
[), ;, if, (, node1DeepestControlDependentBlock, ==, node2DeepestControlDependentBlock, ), {, if, (, node2DeepestControlDependentBlock, !=, null, ), {, if, (, node2DeepestControlDependentBlock, .]
[), {, if, (, node2DeepestControlDependentBlock, !=, null, ), {, if, (, node2DeepestControlDependentBlock, ., isCase, (, ), ), {, return, false]
[==, node2DeepestControlDependentBlock, ), {, if, (, node2DeepestControlDependentBlock, !=, null, ), {, if, (, node2DeepestControlDependentBlock, ., isCase, (, ), ), {]
[), {, if, (, node2DeepestControlDependentBlock, !=, null, ), {, if, (, node2DeepestControlDependentBlock, ., isCase, (, ), ), {, return, false]
[), {, if, (, node2DeepestControlDependentBlock, ., isCase, (, ), ), {, return, false, ;, }, Predicate, <, Node, >, isEarlyExitPredicate]
[!=, null, ), {, if, (, node2DeepestControlDependentBlock, ., isCase, (, ), ), {, return, false, ;, }, Predicate, <, Node]
[), {, if, (, node2DeepestControlDependentBlock, ., isCase, (, ), ), {, return, false, ;, }, Predicate, <, Node, >, isEarlyExitPredicate]
[), {, return, false, ;, }, Predicate, <, Node, >, isEarlyExitPredicate, =, new, Predicate, <, Node, >, (, ), {]
[., isCase, (, ), ), {, return, false, ;, }, Predicate, <, Node, >, isEarlyExitPredicate, =, new, Predicate, <, Node]
[;, }, Predicate, <, Node, >, isEarlyExitPredicate, =, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean]
[;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, ), ;, }, else, {, return, true, ;]
[;, return, nodeType, ==, Token, ., RETURN, ||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;]
[., getType, (, ), ;, return, nodeType, ==, Token, ., RETURN, ||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==]
[;, }, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, ), ;, }, else, {]
[||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,]
[||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !, NodeUtil, .]
[==, Token, ., RETURN, ||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;]
[||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !, NodeUtil, .]
[., RETURN, ||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !]
[||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,]
[==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !, NodeUtil, ., has, (]
[||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,]
[., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,]
[;, }, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, ), ;, }, else, {]
[==, Token, ., CONTINUE, ;, }, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, )]
[;, }, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, ), ;, }, else, {]
[., CONTINUE, ;, }, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, ), ;, }]
[;, }, else, {, return, true, ;, }, }, else, {, return, false, ;, }, }, private, static, boolean, isControlDependentChild]
[;, }, else, {, return, true, ;, }, }, else, {, return, false, ;, }, }, private, static, boolean, isControlDependentChild]
[., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, ), ;, }, else, {, return, true, ;, }, }, else, {]
[,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, ), ;, }, else, {, return, true, ;, }, }, else, {, return, false, ;, }]
[,, NOT_FUNCTION_PREDICATE, ), ;, }, else, {, return, true, ;, }, }, else, {, return, false, ;, }, }, private]
[), ;, }, else, {, return, true, ;, }, }, else, {, return, false, ;, }, }, private, static, boolean]
[;, }, }, else, {, return, false, ;, }, }, private, static, boolean, isControlDependentChild, (, Node, child, ), {, Node]
[;, }, }, private, static, boolean, isControlDependentChild, (, Node, child, ), {, Node, parent, =, child, ., getParent, (, )]
[;, if, (, parent, ==, null, ), {, return, false, ;, }, ArrayList, <, Node, >, siblings, =, Lists, .]
[., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, false, ;, }, ArrayList, <, Node, >]
[), {, return, false, ;, }, ArrayList, <, Node, >, siblings, =, Lists, ., newArrayList, (, parent, ., children, (]
[==, null, ), {, return, false, ;, }, ArrayList, <, Node, >, siblings, =, Lists, ., newArrayList, (, parent, .]
[), {, return, false, ;, }, ArrayList, <, Node, >, siblings, =, Lists, ., newArrayList, (, parent, ., children, (]
[;, }, ArrayList, <, Node, >, siblings, =, Lists, ., newArrayList, (, parent, ., children, (, ), ), ;, int]
[;, int, indexOfChildInParent, =, siblings, ., indexOf, (, child, ), ;, switch, (, parent, ., getType, (, ), ), {]
[., newArrayList, (, parent, ., children, (, ), ), ;, int, indexOfChildInParent, =, siblings, ., indexOf, (, child, ), ;]
[), ;, int, indexOfChildInParent, =, siblings, ., indexOf, (, child, ), ;, switch, (, parent, ., getType, (, ), )]
[., children, (, ), ), ;, int, indexOfChildInParent, =, siblings, ., indexOf, (, child, ), ;, switch, (, parent, .]
[;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., HOOK, :]
[., indexOf, (, child, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :]
[), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., HOOK]
[), {, case, Token, ., IF, :, case, Token, ., HOOK, :, return, (, indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==]
[., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., HOOK, :, return, (, indexOfChildInParent, ==]
[:, case, Token, ., HOOK, :, return, (, indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==, 2, ), ;, case, Token, .]
[., IF, :, case, Token, ., HOOK, :, return, (, indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==, 2, ), ;, case]
[:, return, (, indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==, 2, ), ;, case, Token, ., WHILE, :, case, Token, .]
[., HOOK, :, return, (, indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==, 2, ), ;, case, Token, ., WHILE, :, case]
[;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case, Token, ., FOR, :, return]
[), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case, Token, ., FOR, :]
[||, indexOfChildInParent, ==, 2, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case]
[==, 1, ||, indexOfChildInParent, ==, 2, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true]
[||, indexOfChildInParent, ==, 2, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case]
[), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case, Token, ., FOR, :]
[==, 2, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case, Token, .]
[), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case, Token, ., FOR, :]
[:, case, Token, ., DO, :, return, true, ;, case, Token, ., FOR, :, return, indexOfChildInParent, !=, 0, ;, case]
[., WHILE, :, case, Token, ., DO, :, return, true, ;, case, Token, ., FOR, :, return, indexOfChildInParent, !=, 0]
[:, return, true, ;, case, Token, ., FOR, :, return, indexOfChildInParent, !=, 0, ;, case, Token, ., SWITCH, :, return]
[., DO, :, return, true, ;, case, Token, ., FOR, :, return, indexOfChildInParent, !=, 0, ;, case, Token, ., SWITCH]
[;, case, Token, ., FOR, :, return, indexOfChildInParent, !=, 0, ;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >, 0]
[:, return, indexOfChildInParent, !=, 0, ;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >, 0, ;, case, Token, ., AND]
[., FOR, :, return, indexOfChildInParent, !=, 0, ;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >, 0, ;, case, Token]
[;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >, 0, ;, case, Token, ., AND, :, return, true, ;, case]
[!=, 0, ;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >, 0, ;, case, Token, ., AND, :, return, true]
[;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >, 0, ;, case, Token, ., AND, :, return, true, ;, case]
[:, return, indexOfChildInParent, >, 0, ;, case, Token, ., AND, :, return, true, ;, case, Token, ., OR, :, return]
[., SWITCH, :, return, indexOfChildInParent, >, 0, ;, case, Token, ., AND, :, return, true, ;, case, Token, ., OR]
[;, case, Token, ., AND, :, return, true, ;, case, Token, ., OR, :, return, true, ;, case, Token, .]
[>, 0, ;, case, Token, ., AND, :, return, true, ;, case, Token, ., OR, :, return, true, ;, case]
[;, case, Token, ., AND, :, return, true, ;, case, Token, ., OR, :, return, true, ;, case, Token, .]
[:, return, true, ;, case, Token, ., OR, :, return, true, ;, case, Token, ., FUNCTION, :, return, true, ;]
[., AND, :, return, true, ;, case, Token, ., OR, :, return, true, ;, case, Token, ., FUNCTION, :, return]
[;, case, Token, ., OR, :, return, true, ;, case, Token, ., FUNCTION, :, return, true, ;, default, :, return]
[:, return, true, ;, case, Token, ., FUNCTION, :, return, true, ;, default, :, return, false, ;, }, }, private]
[., OR, :, return, true, ;, case, Token, ., FUNCTION, :, return, true, ;, default, :, return, false, ;, }]
[;, case, Token, ., FUNCTION, :, return, true, ;, default, :, return, false, ;, }, }, private, static, Node, closestControlDependentAncestor]
[:, return, true, ;, default, :, return, false, ;, }, }, private, static, Node, closestControlDependentAncestor, (, Node, node, ), {]
[., FUNCTION, :, return, true, ;, default, :, return, false, ;, }, }, private, static, Node, closestControlDependentAncestor, (, Node, node]
[;, default, :, return, false, ;, }, }, private, static, Node, closestControlDependentAncestor, (, Node, node, ), {, if, (, isControlDependentChild]
[;, }, }, private, static, Node, closestControlDependentAncestor, (, Node, node, ), {, if, (, isControlDependentChild, (, node, ), ), {]
[), {, return, node, ;, }, for, (, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (]
[), ), {, return, node, ;, }, for, (, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if]
[;, }, for, (, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (, isControlDependentChild, (, ancestor, )]
[), {, if, (, isControlDependentChild, (, ancestor, ), ), {, return, ancestor, ;, }, }, return, null, ;, }, private]
[., getAncestors, (, ), ), {, if, (, isControlDependentChild, (, ancestor, ), ), {, return, ancestor, ;, }, }, return]
[), {, return, ancestor, ;, }, }, return, null, ;, }, private, static, boolean, nodeHasAncestor, (, Node, node, ,, Node]
[), ), {, return, ancestor, ;, }, }, return, null, ;, }, private, static, boolean, nodeHasAncestor, (, Node, node, ,]
[;, }, }, return, null, ;, }, private, static, boolean, nodeHasAncestor, (, Node, node, ,, Node, possibleAncestor, ), {, for]
[;, }, private, static, boolean, nodeHasAncestor, (, Node, node, ,, Node, possibleAncestor, ), {, for, (, Node, ancestor, :, node]
[), {, if, (, ancestor, ==, possibleAncestor, ), {, return, true, ;, }, }, return, false, ;, }, private, boolean]
[., getAncestors, (, ), ), {, if, (, ancestor, ==, possibleAncestor, ), {, return, true, ;, }, }, return, false]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, nodeHasCall, (, Node, node, ), {, return]
[==, possibleAncestor, ), {, return, true, ;, }, }, return, false, ;, }, private, boolean, nodeHasCall, (, Node, node, )]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, nodeHasCall, (, Node, node, ), {, return]
[;, }, }, return, false, ;, }, private, boolean, nodeHasCall, (, Node, node, ), {, return, NodeUtil, ., has, (]
[;, }, private, boolean, nodeHasCall, (, Node, node, ), {, return, NodeUtil, ., has, (, node, ,, new, Predicate, <]
[;, }, public, abstract, static, class, AbstractMotionEnvironment, {, public, abstract, Set, <, Node, >, calculateEnvironment, (, ), ;, }, public]
[., has, (, node, ,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node]
[,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return]
[,, NOT_FUNCTION_PREDICATE, ), ;, }, public, abstract, static, class, AbstractMotionEnvironment, {, public, abstract, Set, <, Node, >, calculateEnvironment, (, )]
[;, }, }, ,, NOT_FUNCTION_PREDICATE, ), ;, }, public, abstract, static, class, AbstractMotionEnvironment, {, public, abstract, Set, <, Node, >]
[||, input, ., isNew, (, ), ;, }, }, ,, NOT_FUNCTION_PREDICATE, ), ;, }, public, abstract, static, class, AbstractMotionEnvironment, {]
[., isCall, (, ), ||, input, ., isNew, (, ), ;, }, }, ,, NOT_FUNCTION_PREDICATE, ), ;, }, public, abstract]
[;, }, }, ,, NOT_FUNCTION_PREDICATE, ), ;, }, public, abstract, static, class, AbstractMotionEnvironment, {, public, abstract, Set, <, Node, >]
[., isNew, (, ), ;, }, }, ,, NOT_FUNCTION_PREDICATE, ), ;, }, public, abstract, static, class, AbstractMotionEnvironment, {, public, abstract]
[), ;, }, public, abstract, static, class, AbstractMotionEnvironment, {, public, abstract, Set, <, Node, >, calculateEnvironment, (, ), ;, }]
[;, }, }, public, static, class, CrossModuleMotionEnvironment, extends, AbstractMotionEnvironment, {, public, CrossModuleMotionEnvironment, (, Node, sourceNode, ,, JSModule, sourceModule, ,, Node]
[;, }, }, public, static, class, RawMotionEnvironment, extends, AbstractMotionEnvironment, {, Set, <, Node, >, environment, ;, public, RawMotionEnvironment, (, Set]
[=, environment, ;, }, @, Override, public, Set, <, Node, >, calculateEnvironment, (, ), {, return, environment, ;, }, }]
[., environment, =, environment, ;, }, @, Override, public, Set, <, Node, >, calculateEnvironment, (, ), {, return, environment, ;]
[;, }, @, Override, public, Set, <, Node, >, calculateEnvironment, (, ), {, return, environment, ;, }, }, private, static]
[;, }, }, private, static, class, LocationSummary, {, private, EffectLocation, modSet, ;, private, EffectLocation, refSet, ;, public, LocationSummary, (, EffectLocation]
[=, modSet, ;, this, ., refSet, =, refSet, ;, }, public, EffectLocation, getModSet, (, ), {, return, modSet, ;, }]
[., modSet, =, modSet, ;, this, ., refSet, =, refSet, ;, }, public, EffectLocation, getModSet, (, ), {, return, modSet]
[;, this, ., refSet, =, refSet, ;, }, public, EffectLocation, getModSet, (, ), {, return, modSet, ;, }, public, EffectLocation]
[=, refSet, ;, }, public, EffectLocation, getModSet, (, ), {, return, modSet, ;, }, public, EffectLocation, getRefSet, (, ), {]
[., refSet, =, refSet, ;, }, public, EffectLocation, getModSet, (, ), {, return, modSet, ;, }, public, EffectLocation, getRefSet, (]
[;, }, public, EffectLocation, getModSet, (, ), {, return, modSet, ;, }, public, EffectLocation, getRefSet, (, ), {, return, refSet]
[;, }, public, EffectLocation, getRefSet, (, ), {, return, refSet, ;, }, }, private, static, interface, EffectLocation, {, public, boolean]
[;, }, }, private, static, interface, EffectLocation, {, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), ;, public, EffectLocation, join, (]
[;, EffectLocation, refAccumulator, =, getBottomLocation, (, ), ;, for, (, Node, node, :, nodes, ), {, LocationSummary, nodeLocationSummary, =, calculateLocationSummary]
[;, for, (, Node, node, :, nodes, ), {, LocationSummary, nodeLocationSummary, =, calculateLocationSummary, (, node, ), ;, modAccumulator, =, modAccumulator]
[), {, LocationSummary, nodeLocationSummary, =, calculateLocationSummary, (, node, ), ;, modAccumulator, =, modAccumulator, ., join, (, nodeLocationSummary, ., getModSet, (]
[;, modAccumulator, =, modAccumulator, ., join, (, nodeLocationSummary, ., getModSet, (, ), ), ;, refAccumulator, =, refAccumulator, ., join, (]
[), ;, modAccumulator, =, modAccumulator, ., join, (, nodeLocationSummary, ., getModSet, (, ), ), ;, refAccumulator, =, refAccumulator, ., join]
[=, modAccumulator, ., join, (, nodeLocationSummary, ., getModSet, (, ), ), ;, refAccumulator, =, refAccumulator, ., join, (, nodeLocationSummary, .]
[;, refAccumulator, =, refAccumulator, ., join, (, nodeLocationSummary, ., getRefSet, (, ), ), ;, }, return, new, LocationSummary, (, modAccumulator]
[., join, (, nodeLocationSummary, ., getModSet, (, ), ), ;, refAccumulator, =, refAccumulator, ., join, (, nodeLocationSummary, ., getRefSet, (]
[), ;, refAccumulator, =, refAccumulator, ., join, (, nodeLocationSummary, ., getRefSet, (, ), ), ;, }, return, new, LocationSummary, (]
[., getModSet, (, ), ), ;, refAccumulator, =, refAccumulator, ., join, (, nodeLocationSummary, ., getRefSet, (, ), ), ;, }]
[=, refAccumulator, ., join, (, nodeLocationSummary, ., getRefSet, (, ), ), ;, }, return, new, LocationSummary, (, modAccumulator, ,, refAccumulator]
[;, }, return, new, LocationSummary, (, modAccumulator, ,, refAccumulator, ), ;, }, }, private, static, class, DegenerateLocationAbstraction, extends, LocationAbstraction, {]
[., join, (, nodeLocationSummary, ., getRefSet, (, ), ), ;, }, return, new, LocationSummary, (, modAccumulator, ,, refAccumulator, ), ;]
[), ;, }, return, new, LocationSummary, (, modAccumulator, ,, refAccumulator, ), ;, }, }, private, static, class, DegenerateLocationAbstraction, extends, LocationAbstraction]
[., getRefSet, (, ), ), ;, }, return, new, LocationSummary, (, modAccumulator, ,, refAccumulator, ), ;, }, }, private, static]
[;, }, }, private, static, class, DegenerateLocationAbstraction, extends, LocationAbstraction, {, private, static, final, EffectLocation, EVERY_LOCATION, =, new, DegenerateEffectLocation, (, )]
[,, refAccumulator, ), ;, }, }, private, static, class, DegenerateLocationAbstraction, extends, LocationAbstraction, {, private, static, final, EffectLocation, EVERY_LOCATION, =, new]
[), ;, }, }, private, static, class, DegenerateLocationAbstraction, extends, LocationAbstraction, {, private, static, final, EffectLocation, EVERY_LOCATION, =, new, DegenerateEffectLocation, (]
[;, private, static, final, EffectLocation, NO_LOCATION, =, new, DegenerateEffectLocation, (, ), ;, @, Override, EffectLocation, getBottomLocation, (, ), {, return]
[;, @, Override, EffectLocation, getBottomLocation, (, ), {, return, NO_LOCATION, ;, }, @, Override, public, LocationSummary, calculateLocationSummary, (, Node, node]
[;, }, @, Override, public, LocationSummary, calculateLocationSummary, (, Node, node, ), {, return, new, LocationSummary, (, calculateModSet, (, node, )]
[;, }, EffectLocation, calculateRefSet, (, Node, node, ), {, if, (, NodeUtil, ., canBeSideEffected, (, node, ), ), {, return]
[,, calculateRefSet, (, node, ), ), ;, }, EffectLocation, calculateRefSet, (, Node, node, ), {, if, (, NodeUtil, ., canBeSideEffected]
[), ,, calculateRefSet, (, node, ), ), ;, }, EffectLocation, calculateRefSet, (, Node, node, ), {, if, (, NodeUtil, .]
[), ;, }, EffectLocation, calculateRefSet, (, Node, node, ), {, if, (, NodeUtil, ., canBeSideEffected, (, node, ), ), {]
[), ), ;, }, EffectLocation, calculateRefSet, (, Node, node, ), {, if, (, NodeUtil, ., canBeSideEffected, (, node, ), )]
[), {, return, EVERY_LOCATION, ;, }, else, {, return, NO_LOCATION, ;, }, }, EffectLocation, calculateModSet, (, Node, node, ), {]
[., canBeSideEffected, (, node, ), ), {, return, EVERY_LOCATION, ;, }, else, {, return, NO_LOCATION, ;, }, }, EffectLocation, calculateModSet]
[), ), {, return, EVERY_LOCATION, ;, }, else, {, return, NO_LOCATION, ;, }, }, EffectLocation, calculateModSet, (, Node, node, )]
[;, }, else, {, return, NO_LOCATION, ;, }, }, EffectLocation, calculateModSet, (, Node, node, ), {, if, (, NodeUtil, .]
[;, }, }, EffectLocation, calculateModSet, (, Node, node, ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, node, ), ), {]
[), {, return, EVERY_LOCATION, ;, }, else, {, return, NO_LOCATION, ;, }, }, private, static, class, DegenerateEffectLocation, implements, EffectLocation, {]
[., mayHaveSideEffects, (, node, ), ), {, return, EVERY_LOCATION, ;, }, else, {, return, NO_LOCATION, ;, }, }, private, static]
[), ), {, return, EVERY_LOCATION, ;, }, else, {, return, NO_LOCATION, ;, }, }, private, static, class, DegenerateEffectLocation, implements, EffectLocation]
[;, }, else, {, return, NO_LOCATION, ;, }, }, private, static, class, DegenerateEffectLocation, implements, EffectLocation, {, @, Override, public, EffectLocation]
[;, }, }, private, static, class, DegenerateEffectLocation, implements, EffectLocation, {, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {]
[), {, return, otherLocation, ;, }, else, {, return, this, ;, }, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation]
[==, EVERY_LOCATION, ), {, return, otherLocation, ;, }, else, {, return, this, ;, }, }, @, Override, public, boolean, intersectsLocation]
[), {, return, otherLocation, ;, }, else, {, return, this, ;, }, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation]
[;, }, else, {, return, this, ;, }, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, return]
[;, }, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, return, this, ==, EVERY_LOCATION, &&, otherLocation, ==]
[;, }, @, Override, public, boolean, isEmpty, (, ), {, return, this, ==, NO_LOCATION, ;, }, }, }, private, static]
[&&, otherLocation, ==, EVERY_LOCATION, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return, this, ==, NO_LOCATION, ;, }]
[==, EVERY_LOCATION, &&, otherLocation, ==, EVERY_LOCATION, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return, this, ==, NO_LOCATION]
[&&, otherLocation, ==, EVERY_LOCATION, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return, this, ==, NO_LOCATION, ;, }]
[;, }, @, Override, public, boolean, isEmpty, (, ), {, return, this, ==, NO_LOCATION, ;, }, }, }, private, static]
[==, EVERY_LOCATION, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return, this, ==, NO_LOCATION, ;, }, }, }]
[;, }, @, Override, public, boolean, isEmpty, (, ), {, return, this, ==, NO_LOCATION, ;, }, }, }, private, static]
[;, }, }, }, private, static, class, VisibilityLocationAbstraction, extends, LocationAbstraction, {, private, static, final, int, VISIBILITY_LOCATION_NONE, =, 0, ;, private]
[==, NO_LOCATION, ;, }, }, }, private, static, class, VisibilityLocationAbstraction, extends, LocationAbstraction, {, private, static, final, int, VISIBILITY_LOCATION_NONE, =, 0]
[;, }, }, }, private, static, class, VisibilityLocationAbstraction, extends, LocationAbstraction, {, private, static, final, int, VISIBILITY_LOCATION_NONE, =, 0, ;, private]
[;, private, static, final, int, UNKNOWN_LOCATION_MASK, =, 0xFFFFFFFF, ;, private, static, final, int, LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 1, ;, private]
[;, private, static, final, int, LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 1, ;, private, static, final, int, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 2]
[;, private, static, final, int, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 2, ;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =, 1, <<, 3]
[<<, 1, ;, private, static, final, int, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 2, ;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =, 1]
[;, private, static, final, int, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 2, ;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =, 1, <<, 3]
[;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =, 1, <<, 3, ;, private, static, final, int, HEAP_LOCATION_MASK, =, 1, <<, 4]
[<<, 2, ;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =, 1, <<, 3, ;, private, static, final, int, HEAP_LOCATION_MASK, =, 1]
[;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =, 1, <<, 3, ;, private, static, final, int, HEAP_LOCATION_MASK, =, 1, <<, 4]
[;, private, static, final, int, HEAP_LOCATION_MASK, =, 1, <<, 4, ;, AbstractCompiler, compiler, ;, VariableVisibilityAnalysis, variableVisibilityAnalysis, ;, VariableUseDeclarationMap, variableUseMap, ;]
[<<, 3, ;, private, static, final, int, HEAP_LOCATION_MASK, =, 1, <<, 4, ;, AbstractCompiler, compiler, ;, VariableVisibilityAnalysis, variableVisibilityAnalysis, ;, VariableUseDeclarationMap]
[;, private, static, final, int, HEAP_LOCATION_MASK, =, 1, <<, 4, ;, AbstractCompiler, compiler, ;, VariableVisibilityAnalysis, variableVisibilityAnalysis, ;, VariableUseDeclarationMap, variableUseMap, ;]
[;, AbstractCompiler, compiler, ;, VariableVisibilityAnalysis, variableVisibilityAnalysis, ;, VariableUseDeclarationMap, variableUseMap, ;, private, VisibilityLocationAbstraction, (, AbstractCompiler, compiler, ,, VariableVisibilityAnalysis, variableVisibilityAnalysis, ,, VariableUseDeclarationMap]
[<<, 4, ;, AbstractCompiler, compiler, ;, VariableVisibilityAnalysis, variableVisibilityAnalysis, ;, VariableUseDeclarationMap, variableUseMap, ;, private, VisibilityLocationAbstraction, (, AbstractCompiler, compiler, ,, VariableVisibilityAnalysis, variableVisibilityAnalysis]
[;, AbstractCompiler, compiler, ;, VariableVisibilityAnalysis, variableVisibilityAnalysis, ;, VariableUseDeclarationMap, variableUseMap, ;, private, VisibilityLocationAbstraction, (, AbstractCompiler, compiler, ,, VariableVisibilityAnalysis, variableVisibilityAnalysis, ,, VariableUseDeclarationMap]
[=, compiler, ;, this, ., variableVisibilityAnalysis, =, variableVisibilityAnalysis, ;, this, ., variableUseMap, =, variableUseMap, ;, }, @, Override, LocationSummary, calculateLocationSummary]
[., compiler, =, compiler, ;, this, ., variableVisibilityAnalysis, =, variableVisibilityAnalysis, ;, this, ., variableUseMap, =, variableUseMap, ;, }, @, Override]
[;, this, ., variableVisibilityAnalysis, =, variableVisibilityAnalysis, ;, this, ., variableUseMap, =, variableUseMap, ;, }, @, Override, LocationSummary, calculateLocationSummary, (, Node]
[=, variableVisibilityAnalysis, ;, this, ., variableUseMap, =, variableUseMap, ;, }, @, Override, LocationSummary, calculateLocationSummary, (, Node, node, ), {, int]
[., variableVisibilityAnalysis, =, variableVisibilityAnalysis, ;, this, ., variableUseMap, =, variableUseMap, ;, }, @, Override, LocationSummary, calculateLocationSummary, (, Node, node, )]
[;, this, ., variableUseMap, =, variableUseMap, ;, }, @, Override, LocationSummary, calculateLocationSummary, (, Node, node, ), {, int, visibilityRefLocations, =]
[=, variableUseMap, ;, }, @, Override, LocationSummary, calculateLocationSummary, (, Node, node, ), {, int, visibilityRefLocations, =, VISIBILITY_LOCATION_NONE, ;, int, visibilityModLocations]
[., variableUseMap, =, variableUseMap, ;, }, @, Override, LocationSummary, calculateLocationSummary, (, Node, node, ), {, int, visibilityRefLocations, =, VISIBILITY_LOCATION_NONE, ;]
[;, }, @, Override, LocationSummary, calculateLocationSummary, (, Node, node, ), {, int, visibilityRefLocations, =, VISIBILITY_LOCATION_NONE, ;, int, visibilityModLocations, =, VISIBILITY_LOCATION_NONE]
[;, int, visibilityModLocations, =, VISIBILITY_LOCATION_NONE, ;, for, (, Node, reference, :, findStorageLocationReferences, (, node, ), ), {, int, effectMask, ;]
[;, for, (, Node, reference, :, findStorageLocationReferences, (, node, ), ), {, int, effectMask, ;, if, (, reference, ., isName]
[), {, int, effectMask, ;, if, (, reference, ., isName, (, ), ), {, effectMask, =, effectMaskForVariableReference, (, reference, )]
[), ), {, int, effectMask, ;, if, (, reference, ., isName, (, ), ), {, effectMask, =, effectMaskForVariableReference, (, reference]
[), {, effectMask, =, effectMaskForVariableReference, (, reference, ), ;, }, else, {, effectMask, =, HEAP_LOCATION_MASK, ;, }, if, (, storageNodeIsLValue]
[., isName, (, ), ), {, effectMask, =, effectMaskForVariableReference, (, reference, ), ;, }, else, {, effectMask, =, HEAP_LOCATION_MASK, ;]
[=, effectMaskForVariableReference, (, reference, ), ;, }, else, {, effectMask, =, HEAP_LOCATION_MASK, ;, }, if, (, storageNodeIsLValue, (, reference, )]
[;, }, else, {, effectMask, =, HEAP_LOCATION_MASK, ;, }, if, (, storageNodeIsLValue, (, reference, ), ), {, visibilityModLocations, |=, effectMask]
[), ;, }, else, {, effectMask, =, HEAP_LOCATION_MASK, ;, }, if, (, storageNodeIsLValue, (, reference, ), ), {, visibilityModLocations, |=]
[=, HEAP_LOCATION_MASK, ;, }, if, (, storageNodeIsLValue, (, reference, ), ), {, visibilityModLocations, |=, effectMask, ;, }, if, (, storageNodeIsRValue]
[;, }, if, (, storageNodeIsLValue, (, reference, ), ), {, visibilityModLocations, |=, effectMask, ;, }, if, (, storageNodeIsRValue, (, reference]
[), {, visibilityModLocations, |=, effectMask, ;, }, if, (, storageNodeIsRValue, (, reference, ), ), {, visibilityRefLocations, |=, effectMask, ;, }]
[), ), {, visibilityModLocations, |=, effectMask, ;, }, if, (, storageNodeIsRValue, (, reference, ), ), {, visibilityRefLocations, |=, effectMask, ;]
[|=, effectMask, ;, }, if, (, storageNodeIsRValue, (, reference, ), ), {, visibilityRefLocations, |=, effectMask, ;, }, }, VisibilityBasedEffectLocation, modSet]
[;, }, if, (, storageNodeIsRValue, (, reference, ), ), {, visibilityRefLocations, |=, effectMask, ;, }, }, VisibilityBasedEffectLocation, modSet, =, new]
[), {, visibilityRefLocations, |=, effectMask, ;, }, }, VisibilityBasedEffectLocation, modSet, =, new, VisibilityBasedEffectLocation, (, visibilityModLocations, ), ;, VisibilityBasedEffectLocation, refSet, =]
[), ), {, visibilityRefLocations, |=, effectMask, ;, }, }, VisibilityBasedEffectLocation, modSet, =, new, VisibilityBasedEffectLocation, (, visibilityModLocations, ), ;, VisibilityBasedEffectLocation, refSet]
[|=, effectMask, ;, }, }, VisibilityBasedEffectLocation, modSet, =, new, VisibilityBasedEffectLocation, (, visibilityModLocations, ), ;, VisibilityBasedEffectLocation, refSet, =, new, VisibilityBasedEffectLocation, (]
[;, }, }, VisibilityBasedEffectLocation, modSet, =, new, VisibilityBasedEffectLocation, (, visibilityModLocations, ), ;, VisibilityBasedEffectLocation, refSet, =, new, VisibilityBasedEffectLocation, (, visibilityRefLocations, )]
[;, VisibilityBasedEffectLocation, refSet, =, new, VisibilityBasedEffectLocation, (, visibilityRefLocations, ), ;, return, new, LocationSummary, (, modSet, ,, refSet, ), ;, }]
[), ;, VisibilityBasedEffectLocation, refSet, =, new, VisibilityBasedEffectLocation, (, visibilityRefLocations, ), ;, return, new, LocationSummary, (, modSet, ,, refSet, ), ;]
[;, return, new, LocationSummary, (, modSet, ,, refSet, ), ;, }, private, Set, <, Node, >, findStorageLocationReferences, (, Node, root]
[), ;, return, new, LocationSummary, (, modSet, ,, refSet, ), ;, }, private, Set, <, Node, >, findStorageLocationReferences, (, Node]
[;, }, private, Set, <, Node, >, findStorageLocationReferences, (, Node, root, ), {, final, Set, <, Node, >, references, =]
[,, refSet, ), ;, }, private, Set, <, Node, >, findStorageLocationReferences, (, Node, root, ), {, final, Set, <, Node]
[), ;, }, private, Set, <, Node, >, findStorageLocationReferences, (, Node, root, ), {, final, Set, <, Node, >, references]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AbstractShallowCallback, (, ), {, @, Override, public, void, visit, (]
[., newHashSet, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AbstractShallowCallback, (, ), {, @, Override]
[;, return, references, ;, }, private, int, effectMaskForVariableReference, (, Node, variableReference, ), {, Preconditions, ., checkArgument, (, variableReference, ., isName]
[., traverse, (, compiler, ,, root, ,, new, AbstractShallowCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t]
[,, root, ,, new, AbstractShallowCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[,, new, AbstractShallowCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), ;, return, references, ;, }, private, int, effectMaskForVariableReference, (, Node, variableReference, ), {, Preconditions, ., checkArgument, (, variableReference, .]
[), {, references, ., add, (, n, ), ;, }, }, }, ), ;, return, references, ;, }, private, int]
[||, (, n, ., isName, (, ), &&, !, parent, ., isFunction, (, ), ), ), {, references, ., add]
[., isGet, (, n, ), ||, (, n, ., isName, (, ), &&, !, parent, ., isFunction, (, ), )]
[), ||, (, n, ., isName, (, ), &&, !, parent, ., isFunction, (, ), ), ), {, references, .]
[), {, references, ., add, (, n, ), ;, }, }, }, ), ;, return, references, ;, }, private, int]
[), ), {, references, ., add, (, n, ), ;, }, }, }, ), ;, return, references, ;, }, private]
[&&, !, parent, ., isFunction, (, ), ), ), {, references, ., add, (, n, ), ;, }, }, }]
[., isName, (, ), &&, !, parent, ., isFunction, (, ), ), ), {, references, ., add, (, n, )]
[), ), {, references, ., add, (, n, ), ;, }, }, }, ), ;, return, references, ;, }, private]
[), ), {, references, ., add, (, n, ), ;, }, }, }, ), ;, return, references, ;, }, private]
[., isFunction, (, ), ), ), {, references, ., add, (, n, ), ;, }, }, }, ), ;, return]
[;, }, }, }, ), ;, return, references, ;, }, private, int, effectMaskForVariableReference, (, Node, variableReference, ), {, Preconditions, .]
[., add, (, n, ), ;, }, }, }, ), ;, return, references, ;, }, private, int, effectMaskForVariableReference, (, Node]
[), ;, }, }, }, ), ;, return, references, ;, }, private, int, effectMaskForVariableReference, (, Node, variableReference, ), {, Preconditions]
[;, }, private, int, effectMaskForVariableReference, (, Node, variableReference, ), {, Preconditions, ., checkArgument, (, variableReference, ., isName, (, ), )]
[;, int, effectMask, =, VISIBILITY_LOCATION_NONE, ;, Node, declaringNameNode, =, variableUseMap, ., findDeclaringNameNodeForUse, (, variableReference, ), ;, if, (, declaringNameNode, !=]
[., checkArgument, (, variableReference, ., isName, (, ), ), ;, int, effectMask, =, VISIBILITY_LOCATION_NONE, ;, Node, declaringNameNode, =, variableUseMap, .]
[), ;, int, effectMask, =, VISIBILITY_LOCATION_NONE, ;, Node, declaringNameNode, =, variableUseMap, ., findDeclaringNameNodeForUse, (, variableReference, ), ;, if, (, declaringNameNode]
[., isName, (, ), ), ;, int, effectMask, =, VISIBILITY_LOCATION_NONE, ;, Node, declaringNameNode, =, variableUseMap, ., findDeclaringNameNodeForUse, (, variableReference, )]
[;, Node, declaringNameNode, =, variableUseMap, ., findDeclaringNameNodeForUse, (, variableReference, ), ;, if, (, declaringNameNode, !=, null, ), {, VariableVisibility, visibility]
[;, if, (, declaringNameNode, !=, null, ), {, VariableVisibility, visibility, =, variableVisibilityAnalysis, ., getVariableVisibility, (, declaringNameNode, ), ;, switch, (]
[., findDeclaringNameNodeForUse, (, variableReference, ), ;, if, (, declaringNameNode, !=, null, ), {, VariableVisibility, visibility, =, variableVisibilityAnalysis, ., getVariableVisibility, (]
[), ;, if, (, declaringNameNode, !=, null, ), {, VariableVisibility, visibility, =, variableVisibilityAnalysis, ., getVariableVisibility, (, declaringNameNode, ), ;, switch]
[), {, VariableVisibility, visibility, =, variableVisibilityAnalysis, ., getVariableVisibility, (, declaringNameNode, ), ;, switch, (, visibility, ), {, case, LOCAL, :]
[!=, null, ), {, VariableVisibility, visibility, =, variableVisibilityAnalysis, ., getVariableVisibility, (, declaringNameNode, ), ;, switch, (, visibility, ), {, case]
[), {, VariableVisibility, visibility, =, variableVisibilityAnalysis, ., getVariableVisibility, (, declaringNameNode, ), ;, switch, (, visibility, ), {, case, LOCAL, :]
[;, switch, (, visibility, ), {, case, LOCAL, :, effectMask, =, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, CAPTURED_LOCAL, :, effectMask, =]
[., getVariableVisibility, (, declaringNameNode, ), ;, switch, (, visibility, ), {, case, LOCAL, :, effectMask, =, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;]
[), ;, switch, (, visibility, ), {, case, LOCAL, :, effectMask, =, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, CAPTURED_LOCAL, :, effectMask]
[), {, case, LOCAL, :, effectMask, =, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, CAPTURED_LOCAL, :, effectMask, =, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;]
[:, effectMask, =, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, CAPTURED_LOCAL, :, effectMask, =, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, PARAMETER, :, effectMask]
[=, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, CAPTURED_LOCAL, :, effectMask, =, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, PARAMETER, :, effectMask, =, HEAP_LOCATION_MASK]
[;, break, ;, case, CAPTURED_LOCAL, :, effectMask, =, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, PARAMETER, :, effectMask, =, HEAP_LOCATION_MASK, ;, break]
[:, effectMask, =, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, PARAMETER, :, effectMask, =, HEAP_LOCATION_MASK, ;, break, ;, case, GLOBAL, :, effectMask]
[=, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, PARAMETER, :, effectMask, =, HEAP_LOCATION_MASK, ;, break, ;, case, GLOBAL, :, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK]
[;, break, ;, case, PARAMETER, :, effectMask, =, HEAP_LOCATION_MASK, ;, break, ;, case, GLOBAL, :, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK, ;, break]
[:, effectMask, =, HEAP_LOCATION_MASK, ;, break, ;, case, GLOBAL, :, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK, ;, break, ;, default, :, throw, new]
[=, HEAP_LOCATION_MASK, ;, break, ;, case, GLOBAL, :, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK, ;, break, ;, default, :, throw, new, IllegalStateException, (]
[;, break, ;, case, GLOBAL, :, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK, ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized variable", +]
[:, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK, ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized variable", +, " visibility: ", +, visibility, ), ;]
[=, GLOBAL_VARIABLE_LOCATION_MASK, ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized variable", +, " visibility: ", +, visibility, ), ;, }, }]
[;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized variable", +, " visibility: ", +, visibility, ), ;, }, }, else, {]
[;, }, }, else, {, effectMask, =, UNKNOWN_LOCATION_MASK, ;, }, return, effectMask, ;, }, @, Override, EffectLocation, getBottomLocation, (, )]
[), ;, }, }, else, {, effectMask, =, UNKNOWN_LOCATION_MASK, ;, }, return, effectMask, ;, }, @, Override, EffectLocation, getBottomLocation, (]
[+, visibility, ), ;, }, }, else, {, effectMask, =, UNKNOWN_LOCATION_MASK, ;, }, return, effectMask, ;, }, @, Override, EffectLocation]
[+, " visibility: ", +, visibility, ), ;, }, }, else, {, effectMask, =, UNKNOWN_LOCATION_MASK, ;, }, return, effectMask, ;, }, @]
[+, visibility, ), ;, }, }, else, {, effectMask, =, UNKNOWN_LOCATION_MASK, ;, }, return, effectMask, ;, }, @, Override, EffectLocation]
[), ;, }, }, else, {, effectMask, =, UNKNOWN_LOCATION_MASK, ;, }, return, effectMask, ;, }, @, Override, EffectLocation, getBottomLocation, (]
[=, UNKNOWN_LOCATION_MASK, ;, }, return, effectMask, ;, }, @, Override, EffectLocation, getBottomLocation, (, ), {, return, new, VisibilityBasedEffectLocation, (, VISIBILITY_LOCATION_NONE]
[;, }, return, effectMask, ;, }, @, Override, EffectLocation, getBottomLocation, (, ), {, return, new, VisibilityBasedEffectLocation, (, VISIBILITY_LOCATION_NONE, ), ;]
[;, }, @, Override, EffectLocation, getBottomLocation, (, ), {, return, new, VisibilityBasedEffectLocation, (, VISIBILITY_LOCATION_NONE, ), ;, }, private, static, boolean]
[;, }, private, static, boolean, isStorageNode, (, Node, node, ), {, return, node, ., isName, (, ), ||, NodeUtil, .]
[), ;, }, private, static, boolean, isStorageNode, (, Node, node, ), {, return, node, ., isName, (, ), ||, NodeUtil]
[;, }, private, static, boolean, storageNodeIsRValue, (, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode, (, node, ), )]
[||, NodeUtil, ., isGet, (, node, ), ;, }, private, static, boolean, storageNodeIsRValue, (, Node, node, ), {, Preconditions, .]
[., isName, (, ), ||, NodeUtil, ., isGet, (, node, ), ;, }, private, static, boolean, storageNodeIsRValue, (, Node, node]
[;, }, private, static, boolean, storageNodeIsRValue, (, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode, (, node, ), )]
[., isGet, (, node, ), ;, }, private, static, boolean, storageNodeIsRValue, (, Node, node, ), {, Preconditions, ., checkArgument, (]
[), ;, }, private, static, boolean, storageNodeIsRValue, (, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode, (, node, )]
[;, Node, parent, =, node, ., getParent, (, ), ;, if, (, storageNodeIsLValue, (, node, ), ), {, boolean, nonSimpleAssign]
[., checkArgument, (, isStorageNode, (, node, ), ), ;, Node, parent, =, node, ., getParent, (, ), ;, if, (]
[), ;, Node, parent, =, node, ., getParent, (, ), ;, if, (, storageNodeIsLValue, (, node, ), ), {, boolean]
[), ), ;, Node, parent, =, node, ., getParent, (, ), ;, if, (, storageNodeIsLValue, (, node, ), ), {]
[;, if, (, storageNodeIsLValue, (, node, ), ), {, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, !]
[., getParent, (, ), ;, if, (, storageNodeIsLValue, (, node, ), ), {, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (]
[), {, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, !, parent, ., isAssign, (, ), ;, return]
[), ), {, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, !, parent, ., isAssign, (, ), ;]
[;, return, (, nonSimpleAssign, ||, parent, ., isDec, (, ), ||, parent, ., isInc, (, ), ), ;, }, return]
[&&, !, parent, ., isAssign, (, ), ;, return, (, nonSimpleAssign, ||, parent, ., isDec, (, ), ||, parent, .]
[., isAssignmentOp, (, parent, ), &&, !, parent, ., isAssign, (, ), ;, return, (, nonSimpleAssign, ||, parent, ., isDec]
[), &&, !, parent, ., isAssign, (, ), ;, return, (, nonSimpleAssign, ||, parent, ., isDec, (, ), ||, parent]
[;, return, (, nonSimpleAssign, ||, parent, ., isDec, (, ), ||, parent, ., isInc, (, ), ), ;, }, return]
[;, return, (, nonSimpleAssign, ||, parent, ., isDec, (, ), ||, parent, ., isInc, (, ), ), ;, }, return]
[., isAssign, (, ), ;, return, (, nonSimpleAssign, ||, parent, ., isDec, (, ), ||, parent, ., isInc, (, )]
[;, }, return, true, ;, }, private, static, boolean, storageNodeIsLValue, (, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode]
[), ;, }, return, true, ;, }, private, static, boolean, storageNodeIsLValue, (, Node, node, ), {, Preconditions, ., checkArgument, (]
[||, parent, ., isInc, (, ), ), ;, }, return, true, ;, }, private, static, boolean, storageNodeIsLValue, (, Node, node]
[||, parent, ., isDec, (, ), ||, parent, ., isInc, (, ), ), ;, }, return, true, ;, }, private]
[||, parent, ., isInc, (, ), ), ;, }, return, true, ;, }, private, static, boolean, storageNodeIsLValue, (, Node, node]
[., isDec, (, ), ||, parent, ., isInc, (, ), ), ;, }, return, true, ;, }, private, static, boolean]
[), ;, }, return, true, ;, }, private, static, boolean, storageNodeIsLValue, (, Node, node, ), {, Preconditions, ., checkArgument, (]
[., isInc, (, ), ), ;, }, return, true, ;, }, private, static, boolean, storageNodeIsLValue, (, Node, node, ), {]
[;, }, private, static, boolean, storageNodeIsLValue, (, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode, (, node, ), )]
[;, return, NodeUtil, ., isLValue, (, node, ), ;, }, private, static, class, VisibilityBasedEffectLocation, implements, EffectLocation, {, int, visibilityMask, =]
[., checkArgument, (, isStorageNode, (, node, ), ), ;, return, NodeUtil, ., isLValue, (, node, ), ;, }, private, static]
[), ;, return, NodeUtil, ., isLValue, (, node, ), ;, }, private, static, class, VisibilityBasedEffectLocation, implements, EffectLocation, {, int, visibilityMask]
[), ), ;, return, NodeUtil, ., isLValue, (, node, ), ;, }, private, static, class, VisibilityBasedEffectLocation, implements, EffectLocation, {, int]
[;, }, private, static, class, VisibilityBasedEffectLocation, implements, EffectLocation, {, int, visibilityMask, =, VISIBILITY_LOCATION_NONE, ;, public, VisibilityBasedEffectLocation, (, int, visibilityMask, )]
[., isLValue, (, node, ), ;, }, private, static, class, VisibilityBasedEffectLocation, implements, EffectLocation, {, int, visibilityMask, =, VISIBILITY_LOCATION_NONE, ;, public]
[), ;, }, private, static, class, VisibilityBasedEffectLocation, implements, EffectLocation, {, int, visibilityMask, =, VISIBILITY_LOCATION_NONE, ;, public, VisibilityBasedEffectLocation, (, int, visibilityMask]
[;, public, VisibilityBasedEffectLocation, (, int, visibilityMask, ), {, this, ., visibilityMask, =, visibilityMask, ;, }, @, Override, public, boolean, intersectsLocation]
[=, visibilityMask, ;, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof]
[., visibilityMask, =, visibilityMask, ;, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (]
[;, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, )]
[;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, return, (, visibilityMask, &, otherMask, ), >]
[., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;]
[), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, return, (, visibilityMask, &, otherMask, )]
[instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, return, (, visibilityMask, &]
[;, return, (, visibilityMask, &, otherMask, ), >, 0, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return]
[., visibilityMask, ;, return, (, visibilityMask, &, otherMask, ), >, 0, ;, }, @, Override, public, boolean, isEmpty, (, )]
[), ., visibilityMask, ;, return, (, visibilityMask, &, otherMask, ), >, 0, ;, }, @, Override, public, boolean, isEmpty, (]
[), ., visibilityMask, ;, return, (, visibilityMask, &, otherMask, ), >, 0, ;, }, @, Override, public, boolean, isEmpty, (]
[;, }, @, Override, public, boolean, isEmpty, (, ), {, return, visibilityMask, ==, VISIBILITY_LOCATION_NONE, ;, }, @, Override, public, EffectLocation]
[>, 0, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return, visibilityMask, ==, VISIBILITY_LOCATION_NONE, ;, }, @, Override]
[), >, 0, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return, visibilityMask, ==, VISIBILITY_LOCATION_NONE, ;, }, @]
[&, otherMask, ), >, 0, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return, visibilityMask, ==, VISIBILITY_LOCATION_NONE, ;]
[), >, 0, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return, visibilityMask, ==, VISIBILITY_LOCATION_NONE, ;, }, @]
[;, }, @, Override, public, boolean, isEmpty, (, ), {, return, visibilityMask, ==, VISIBILITY_LOCATION_NONE, ;, }, @, Override, public, EffectLocation]
[;, }, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, )]
[==, VISIBILITY_LOCATION_NONE, ;, }, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof]
[;, }, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, )]
[;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, int, joinedMask, =, visibilityMask, |, otherMask, ;]
[., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;]
[), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, int, joinedMask, =, visibilityMask, |, otherMask]
[instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, int, joinedMask, =, visibilityMask]
[;, int, joinedMask, =, visibilityMask, |, otherMask, ;, return, new, VisibilityBasedEffectLocation, (, joinedMask, ), ;, }, }, }, private, static]
[., visibilityMask, ;, int, joinedMask, =, visibilityMask, |, otherMask, ;, return, new, VisibilityBasedEffectLocation, (, joinedMask, ), ;, }, }, }]
[), ., visibilityMask, ;, int, joinedMask, =, visibilityMask, |, otherMask, ;, return, new, VisibilityBasedEffectLocation, (, joinedMask, ), ;, }, }]
[), ., visibilityMask, ;, int, joinedMask, =, visibilityMask, |, otherMask, ;, return, new, VisibilityBasedEffectLocation, (, joinedMask, ), ;, }, }]
[;, return, new, VisibilityBasedEffectLocation, (, joinedMask, ), ;, }, }, }, private, static, class, VariableUseDeclarationMap, {, private, AbstractCompiler, compiler, ;]
[|, otherMask, ;, return, new, VisibilityBasedEffectLocation, (, joinedMask, ), ;, }, }, }, private, static, class, VariableUseDeclarationMap, {, private, AbstractCompiler]
[;, return, new, VisibilityBasedEffectLocation, (, joinedMask, ), ;, }, }, }, private, static, class, VariableUseDeclarationMap, {, private, AbstractCompiler, compiler, ;]
[;, }, }, }, private, static, class, VariableUseDeclarationMap, {, private, AbstractCompiler, compiler, ;, private, Map, <, Node, ,, Node, >]
[), ;, }, }, }, private, static, class, VariableUseDeclarationMap, {, private, AbstractCompiler, compiler, ;, private, Map, <, Node, ,, Node]
[=, compiler, ;, }, public, void, mapUses, (, Node, root, ), {, referencesByNameNode, =, Maps, ., newHashMap, (, ), ;]
[., compiler, =, compiler, ;, }, public, void, mapUses, (, Node, root, ), {, referencesByNameNode, =, Maps, ., newHashMap, (]
[;, }, public, void, mapUses, (, Node, root, ), {, referencesByNameNode, =, Maps, ., newHashMap, (, ), ;, ReferenceCollectingCallback, callback]
[=, Maps, ., newHashMap, (, ), ;, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;]
[;, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[., newHashMap, (, ), ;, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, .]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols]
[,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :, callback, .]
[., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :]
[;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (]
[., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, )]
[,, root, ,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection]
[,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback]
[), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences]
[), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (, variable, ), ;, for, (, Reference, reference, :, referenceCollection, ., references]
[., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (, variable, ), ;, for, (, Reference, reference]
[;, for, (, Reference, reference, :, referenceCollection, ., references, ), {, Node, referenceNameNode, =, reference, ., getNode, (, ), ;]
[., getReferences, (, variable, ), ;, for, (, Reference, reference, :, referenceCollection, ., references, ), {, Node, referenceNameNode, =, reference]
[), ;, for, (, Reference, reference, :, referenceCollection, ., references, ), {, Node, referenceNameNode, =, reference, ., getNode, (, )]
[), {, Node, referenceNameNode, =, reference, ., getNode, (, ), ;, referencesByNameNode, ., put, (, referenceNameNode, ,, variable, ., getNameNode]
[., references, ), {, Node, referenceNameNode, =, reference, ., getNode, (, ), ;, referencesByNameNode, ., put, (, referenceNameNode, ,, variable]
[;, referencesByNameNode, ., put, (, referenceNameNode, ,, variable, ., getNameNode, (, ), ), ;, }, }, }, public, Node, findDeclaringNameNodeForUse]
[., getNode, (, ), ;, referencesByNameNode, ., put, (, referenceNameNode, ,, variable, ., getNameNode, (, ), ), ;, }, }]
[;, }, }, }, public, Node, findDeclaringNameNodeForUse, (, Node, usingNameNode, ), {, Preconditions, ., checkArgument, (, usingNameNode, ., isName, (]
[., put, (, referenceNameNode, ,, variable, ., getNameNode, (, ), ), ;, }, }, }, public, Node, findDeclaringNameNodeForUse, (, Node]
[,, variable, ., getNameNode, (, ), ), ;, }, }, }, public, Node, findDeclaringNameNodeForUse, (, Node, usingNameNode, ), {, Preconditions]
[), ;, }, }, }, public, Node, findDeclaringNameNodeForUse, (, Node, usingNameNode, ), {, Preconditions, ., checkArgument, (, usingNameNode, ., isName]
[., getNameNode, (, ), ), ;, }, }, }, public, Node, findDeclaringNameNodeForUse, (, Node, usingNameNode, ), {, Preconditions, ., checkArgument]
[;, return, referencesByNameNode, ., get, (, usingNameNode, ), ;, }, }, }]
[., checkArgument, (, usingNameNode, ., isName, (, ), ), ;, return, referencesByNameNode, ., get, (, usingNameNode, ), ;, }, }]
[), ;, return, referencesByNameNode, ., get, (, usingNameNode, ), ;, }, }, }]
[., isName, (, ), ), ;, return, referencesByNameNode, ., get, (, usingNameNode, ), ;, }, }, }]
[;, }, }, }]
[., get, (, usingNameNode, ), ;, }, }, }]
[), ;, }, }, }]
