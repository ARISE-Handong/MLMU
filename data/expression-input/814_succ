[,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =]
[,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;]
[,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, .]
[,, scalRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =]
[), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;]
[=, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b]
[., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b]
[;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;, this]
[=, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype]
[., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype]
[;, this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp]
[=, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /]
[., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -]
[;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (]
[=, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (]
[., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;]
[;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, )]
[=, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2]
[., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction]
[;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;]
[=, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (]
[;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;, }, protected, EmbeddedRungeKuttaIntegrator, (]
[/, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;]
[/, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;]
[;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;, }, protected, EmbeddedRungeKuttaIntegrator, (]
[;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;, }, protected, EmbeddedRungeKuttaIntegrator, (, final, String, name, ,, final]
[), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;, }, protected, EmbeddedRungeKuttaIntegrator, (, final, String, name, ,]
[;, setMaxGrowth, (, 10.0, ), ;, }, protected, EmbeddedRungeKuttaIntegrator, (, final, String, name, ,, final, boolean, fsal, ,, final, double]
[), ;, setMaxGrowth, (, 10.0, ), ;, }, protected, EmbeddedRungeKuttaIntegrator, (, final, String, name, ,, final, boolean, fsal, ,, final]
[;, }, protected, EmbeddedRungeKuttaIntegrator, (, final, String, name, ,, final, boolean, fsal, ,, final, double, [, ], c, ,, final]
[), ;, }, protected, EmbeddedRungeKuttaIntegrator, (, final, String, name, ,, final, boolean, fsal, ,, final, double, [, ], c, ,]
[,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =]
[,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;]
[,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, .]
[,, vecRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =]
[), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;]
[=, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b]
[., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b]
[;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;, this]
[=, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype]
[., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype]
[;, this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp]
[=, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /]
[., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -]
[;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (]
[=, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (]
[., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;]
[;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, )]
[=, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2]
[., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction]
[;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;]
[=, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (]
[;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;, }, public, abstract, int]
[/, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;]
[/, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;]
[;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;, }, public, abstract, int]
[;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;, }, public, abstract, int, getOrder, (, ), ;, public]
[), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (, 10.0, ), ;, }, public, abstract, int, getOrder, (, ), ;]
[;, setMaxGrowth, (, 10.0, ), ;, }, public, abstract, int, getOrder, (, ), ;, public, double, getSafety, (, ), {]
[), ;, setMaxGrowth, (, 10.0, ), ;, }, public, abstract, int, getOrder, (, ), ;, public, double, getSafety, (, )]
[;, }, public, abstract, int, getOrder, (, ), ;, public, double, getSafety, (, ), {, return, safety, ;, }, public]
[), ;, }, public, abstract, int, getOrder, (, ), ;, public, double, getSafety, (, ), {, return, safety, ;, }]
[;, }, public, void, setSafety, (, final, double, safety, ), {, this, ., safety, =, safety, ;, }, @, Override]
[=, safety, ;, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException]
[., safety, =, safety, ;, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t, )]
[;, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException]
[;, setEquations, (, equations, ), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final, double]
[,, t, ), ;, setEquations, (, equations, ), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, )]
[), ;, setEquations, (, equations, ), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final]
[;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final, double, [, ], y0, =, equations]
[), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final, double, [, ], y0, =]
[;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final, double, [, ], y, =, y0]
[>, equations, ., getTime, (, ), ;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final]
[;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final, double, [, ], y, =, y0]
[., getTime, (, ), ;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final, double, []
[;, final, double, [, ], y, =, y0, ., clone, (, ), ;, final, int, stages, =, c, ., length]
[., getCompleteState, (, ), ;, final, double, [, ], y, =, y0, ., clone, (, ), ;, final, int, stages]
[;, final, int, stages, =, c, ., length, +, 1, ;, final, double, [, ], [, ], yDotK, =, new]
[., clone, (, ), ;, final, int, stages, =, c, ., length, +, 1, ;, final, double, [, ], []
[;, final, double, [, ], [, ], yDotK, =, new, double, [, stages, ], [, y, ., length, ], ;]
[+, 1, ;, final, double, [, ], [, ], yDotK, =, new, double, [, stages, ], [, y, ., length]
[., length, +, 1, ;, final, double, [, ], [, ], yDotK, =, new, double, [, stages, ], [, y]
[;, final, double, [, ], [, ], yDotK, =, new, double, [, stages, ], [, y, ., length, ], ;]
[;, final, double, [, ], yTmp, =, y0, ., clone, (, ), ;, final, double, [, ], yDotTmp, =, new]
[], [, y, ., length, ], ;, final, double, [, ], yTmp, =, y0, ., clone, (, ), ;, final]
[], ;, final, double, [, ], yTmp, =, y0, ., clone, (, ), ;, final, double, [, ], yDotTmp, =]
[., length, ], ;, final, double, [, ], yTmp, =, y0, ., clone, (, ), ;, final, double, [, ]]
[;, final, double, [, ], yDotTmp, =, new, double, [, y, ., length, ], ;, final, RungeKuttaStepInterpolator, interpolator, =, (]
[., clone, (, ), ;, final, double, [, ], yDotTmp, =, new, double, [, y, ., length, ], ;, final]
[;, final, RungeKuttaStepInterpolator, interpolator, =, (, RungeKuttaStepInterpolator, ), prototype, ., copy, (, ), ;, interpolator, ., reinitialize, (, this, ,]
[], ;, final, RungeKuttaStepInterpolator, interpolator, =, (, RungeKuttaStepInterpolator, ), prototype, ., copy, (, ), ;, interpolator, ., reinitialize, (, this]
[., length, ], ;, final, RungeKuttaStepInterpolator, interpolator, =, (, RungeKuttaStepInterpolator, ), prototype, ., copy, (, ), ;, interpolator, ., reinitialize]
[;, interpolator, ., reinitialize, (, this, ,, yTmp, ,, yDotK, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations]
[;, interpolator, ., reinitialize, (, this, ,, yTmp, ,, yDotK, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations]
[., copy, (, ), ;, interpolator, ., reinitialize, (, this, ,, yTmp, ,, yDotK, ,, forward, ,, equations, ., getPrimaryMapper]
[;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =, equations, ., getTime, (, ), ;]
[., reinitialize, (, this, ,, yTmp, ,, yDotK, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers]
[,, yTmp, ,, yDotK, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;]
[,, yDotK, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, .]
[,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (]
[,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, .]
[,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart]
[., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (]
[), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =, equations, ., getTime, (, )]
[., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =, equations]
[;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, boolean, firstTime, =, true, ;, initIntegration]
[., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew]
[), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, boolean, firstTime, =, true, ;]
[., getTime, (, ), ), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, boolean]
[=, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, boolean, firstTime, =, true, ;, initIntegration, (, equations]
[;, double, hNew, =, 0, ;, boolean, firstTime, =, true, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0]
[., getTime, (, ), ;, double, hNew, =, 0, ;, boolean, firstTime, =, true, ;, initIntegration, (, equations, ., getTime]
[;, boolean, firstTime, =, true, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;, isLastStep]
[;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;, isLastStep, =, false, ;, do, {]
[;, isLastStep, =, false, ;, do, {, interpolator, ., shift, (, ), ;, double, error, =, 10, ;, while, (]
[,, y0, ,, t, ), ;, isLastStep, =, false, ;, do, {, interpolator, ., shift, (, ), ;, double, error]
[., getTime, (, ), ,, y0, ,, t, ), ;, isLastStep, =, false, ;, do, {, interpolator, ., shift, (]
[,, t, ), ;, isLastStep, =, false, ;, do, {, interpolator, ., shift, (, ), ;, double, error, =, 10]
[), ;, isLastStep, =, false, ;, do, {, interpolator, ., shift, (, ), ;, double, error, =, 10, ;, while]
[=, false, ;, do, {, interpolator, ., shift, (, ), ;, double, error, =, 10, ;, while, (, error, >=]
[;, do, {, interpolator, ., shift, (, ), ;, double, error, =, 10, ;, while, (, error, >=, 1.0, )]
[;, double, error, =, 10, ;, while, (, error, >=, 1.0, ), {, if, (, firstTime, ||, !, fsal, )]
[., shift, (, ), ;, double, error, =, 10, ;, while, (, error, >=, 1.0, ), {, if, (, firstTime]
[;, while, (, error, >=, 1.0, ), {, if, (, firstTime, ||, !, fsal, ), {, computeDerivatives, (, stepStart, ,]
[), {, if, (, firstTime, ||, !, fsal, ), {, computeDerivatives, (, stepStart, ,, y, ,, yDotK, [, 0, ]]
[>=, 1.0, ), {, if, (, firstTime, ||, !, fsal, ), {, computeDerivatives, (, stepStart, ,, y, ,, yDotK, []
[), {, if, (, firstTime, ||, !, fsal, ), {, computeDerivatives, (, stepStart, ,, y, ,, yDotK, [, 0, ]]
[), {, computeDerivatives, (, stepStart, ,, y, ,, yDotK, [, 0, ], ), ;, }, if, (, firstTime, ), {]
[||, !, fsal, ), {, computeDerivatives, (, stepStart, ,, y, ,, yDotK, [, 0, ], ), ;, }, if, (]
[), {, computeDerivatives, (, stepStart, ,, y, ,, yDotK, [, 0, ], ), ;, }, if, (, firstTime, ), {]
[), {, computeDerivatives, (, stepStart, ,, y, ,, yDotK, [, 0, ], ), ;, }, if, (, firstTime, ), {]
[;, }, if, (, firstTime, ), {, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, if]
[,, y, ,, yDotK, [, 0, ], ), ;, }, if, (, firstTime, ), {, final, double, [, ], scale]
[,, yDotK, [, 0, ], ), ;, }, if, (, firstTime, ), {, final, double, [, ], scale, =, new]
[), ;, }, if, (, firstTime, ), {, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;]
[[, 0, ], ), ;, }, if, (, firstTime, ), {, final, double, [, ], scale, =, new, double, []
[], ), ;, }, if, (, firstTime, ), {, final, double, [, ], scale, =, new, double, [, mainSetDimension, ]]
[), {, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, if, (, vecAbsoluteTolerance, ==, null, )]
[;, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length]
[], ;, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;, i, <, scale, .]
[), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale]
[==, null, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, )]
[), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale]
[;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *]
[;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, ., abs, (, y, []
[<, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, .]
[;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, ., abs, (, y, []
[., length, ;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, ., abs, (]
[), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, ., abs, (, y, [, i, ], )]
[), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, ., abs, (, y, [, i, ], )]
[=, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, else, {, for]
[[, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }]
[], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, else, {]
[;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i]
[+, scalRelativeTolerance, *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, else, {, for, (, int]
[;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i]
[*, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, else, {, for, (, int, i, =]
[;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i]
[., abs, (, y, [, i, ], ), ;, }, }, else, {, for, (, int, i, =, 0, ;]
[), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++]
[[, i, ], ), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, .]
[], ), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;]
[;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ]]
[;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *]
[<, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance]
[;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *]
[., length, ;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i]
[), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, FastMath, ., abs]
[), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, FastMath, ., abs]
[=, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, FastMath, ., abs, (, y, [, i, ], )]
[[, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, FastMath, ., abs, (, y, []
[], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, FastMath, ., abs, (, y, [, i, ]]
[;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,, yDotK]
[+, vecRelativeTolerance, [, i, ], *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, hNew, =]
[[, i, ], +, vecRelativeTolerance, [, i, ], *, FastMath, ., abs, (, y, [, i, ], ), ;, }]
[], +, vecRelativeTolerance, [, i, ], *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, hNew]
[;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,, yDotK]
[*, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder]
[[, i, ], *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, hNew, =, initializeStep, (]
[], *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, hNew, =, initializeStep, (, forward, ,]
[;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,, yDotK]
[., abs, (, y, [, i, ], ), ;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, )]
[), ;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,]
[[, i, ], ), ;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart]
[], ), ;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y]
[=, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,, yDotK, [, 0, ], ,]
[;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if, (, stepStart, +, stepSize]
[,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,, yDotK, [, 0, ], ,, yTmp, ,, yDotK, []
[,, scale, ,, stepStart, ,, y, ,, yDotK, [, 0, ], ,, yTmp, ,, yDotK, [, 1, ], ), ;]
[,, stepStart, ,, y, ,, yDotK, [, 0, ], ,, yTmp, ,, yDotK, [, 1, ], ), ;, firstTime, =]
[,, y, ,, yDotK, [, 0, ], ,, yTmp, ,, yDotK, [, 1, ], ), ;, firstTime, =, false, ;]
[,, yDotK, [, 0, ], ,, yTmp, ,, yDotK, [, 1, ], ), ;, firstTime, =, false, ;, }, stepSize]
[,, yTmp, ,, yDotK, [, 1, ], ), ;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (]
[[, 0, ], ,, yTmp, ,, yDotK, [, 1, ], ), ;, firstTime, =, false, ;, }, stepSize, =, hNew]
[], ,, yTmp, ,, yDotK, [, 1, ], ), ;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if]
[,, yDotK, [, 1, ], ), ;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (, forward, )]
[), ;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if, (, stepStart, +]
[[, 1, ], ), ;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if]
[], ), ;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if, (, stepStart]
[=, false, ;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if, (, stepStart, +, stepSize, >=, t]
[;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if, (, stepStart, +, stepSize, >=, t, ), {]
[=, hNew, ;, if, (, forward, ), {, if, (, stepStart, +, stepSize, >=, t, ), {, stepSize, =, t]
[;, if, (, forward, ), {, if, (, stepStart, +, stepSize, >=, t, ), {, stepSize, =, t, -, stepStart]
[), {, if, (, stepStart, +, stepSize, >=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, else]
[), {, stepSize, =, t, -, stepStart, ;, }, }, else, {, if, (, stepStart, +, stepSize, <=, t, )]
[>=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, else, {, if, (, stepStart, +, stepSize, <=]
[+, stepSize, >=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, else, {, if, (, stepStart, +]
[>=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, else, {, if, (, stepStart, +, stepSize, <=]
[), {, stepSize, =, t, -, stepStart, ;, }, }, else, {, if, (, stepStart, +, stepSize, <=, t, )]
[=, t, -, stepStart, ;, }, }, else, {, if, (, stepStart, +, stepSize, <=, t, ), {, stepSize, =]
[;, }, }, else, {, if, (, stepStart, +, stepSize, <=, t, ), {, stepSize, =, t, -, stepStart, ;]
[-, stepStart, ;, }, }, else, {, if, (, stepStart, +, stepSize, <=, t, ), {, stepSize, =, t, -]
[;, }, }, else, {, if, (, stepStart, +, stepSize, <=, t, ), {, stepSize, =, t, -, stepStart, ;]
[), {, stepSize, =, t, -, stepStart, ;, }, }, for, (, int, k, =, 1, ;, k, <, stages]
[<=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, for, (, int, k, =, 1, ;, k]
[+, stepSize, <=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, for, (, int, k, =, 1]
[<=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, for, (, int, k, =, 1, ;, k]
[), {, stepSize, =, t, -, stepStart, ;, }, }, for, (, int, k, =, 1, ;, k, <, stages]
[=, t, -, stepStart, ;, }, }, for, (, int, k, =, 1, ;, k, <, stages, ;, ++, k]
[;, }, }, for, (, int, k, =, 1, ;, k, <, stages, ;, ++, k, ), {, for, (]
[-, stepStart, ;, }, }, for, (, int, k, =, 1, ;, k, <, stages, ;, ++, k, ), {]
[;, }, }, for, (, int, k, =, 1, ;, k, <, stages, ;, ++, k, ), {, for, (]
[;, k, <, stages, ;, ++, k, ), {, for, (, int, j, =, 0, ;, j, <, y0, .]
[;, ++, k, ), {, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j]
[<, stages, ;, ++, k, ), {, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;]
[;, ++, k, ), {, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j]
[), {, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double]
[), {, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double]
[;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =, a, [, k, -, 1, ]]
[;, ++, j, ), {, double, sum, =, a, [, k, -, 1, ], [, 0, ], *, yDotK, []
[<, y0, ., length, ;, ++, j, ), {, double, sum, =, a, [, k, -, 1, ], [, 0]
[;, ++, j, ), {, double, sum, =, a, [, k, -, 1, ], [, 0, ], *, yDotK, []
[., length, ;, ++, j, ), {, double, sum, =, a, [, k, -, 1, ], [, 0, ], *]
[), {, double, sum, =, a, [, k, -, 1, ], [, 0, ], *, yDotK, [, 0, ], []
[), {, double, sum, =, a, [, k, -, 1, ], [, 0, ], *, yDotK, [, 0, ], []
[;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {, sum, +=, a, []
[*, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, k, ;]
[[, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l]
[[, k, -, 1, ], [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int]
[], [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;]
[-, 1, ], [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =]
[], [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;]
[], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, k]
[;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {, sum, +=, a, []
[[, j, ], ;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {, sum]
[[, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l]
[], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {]
[], ;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {, sum, +=, a]
[;, l, <, k, ;, ++, l, ), {, sum, +=, a, [, k, -, 1, ], [, l, ]]
[;, ++, l, ), {, sum, +=, a, [, k, -, 1, ], [, l, ], *, yDotK, [, l]
[<, k, ;, ++, l, ), {, sum, +=, a, [, k, -, 1, ], [, l, ], *, yDotK]
[;, ++, l, ), {, sum, +=, a, [, k, -, 1, ], [, l, ], *, yDotK, [, l]
[), {, sum, +=, a, [, k, -, 1, ], [, l, ], *, yDotK, [, l, ], [, j]
[), {, sum, +=, a, [, k, -, 1, ], [, l, ], *, yDotK, [, l, ], [, j]
[+=, a, [, k, -, 1, ], [, l, ], *, yDotK, [, l, ], [, j, ], ;, }]
[;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart]
[*, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +]
[[, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, []
[[, k, -, 1, ], [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, []
[], [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y]
[-, 1, ], [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ]]
[], [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y]
[], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ]]
[;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart]
[[, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }]
[[, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *]
[], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;]
[], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (]
[=, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1]
[[, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, []
[], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -]
[;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *, stepSize, ,, yTmp, ,, yDotK, [, k]
[+, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *, stepSize, ,, yTmp]
[[, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *]
[], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *, stepSize, ,]
[;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *, stepSize, ,, yTmp, ,, yDotK, [, k]
[*, sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *, stepSize, ,, yTmp, ,, yDotK]
[;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *, stepSize, ,, yTmp, ,, yDotK, [, k]
[;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double]
[,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;, j, <, y0]
[+, c, [, k, -, 1, ], *, stepSize, ,, yTmp, ,, yDotK, [, k, ], ), ;, }, for]
[,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;, j, <, y0]
[*, stepSize, ,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;, j]
[[, k, -, 1, ], *, stepSize, ,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int]
[], *, stepSize, ,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;]
[-, 1, ], *, stepSize, ,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =]
[], *, stepSize, ,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;]
[,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;, j, <, y0]
[,, yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length]
[), ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {]
[[, k, ], ), ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++]
[], ), ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, )]
[;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =, b, [, 0, ], *, yDotK]
[;, ++, j, ), {, double, sum, =, b, [, 0, ], *, yDotK, [, 0, ], [, j, ]]
[<, y0, ., length, ;, ++, j, ), {, double, sum, =, b, [, 0, ], *, yDotK, [, 0]
[;, ++, j, ), {, double, sum, =, b, [, 0, ], *, yDotK, [, 0, ], [, j, ]]
[., length, ;, ++, j, ), {, double, sum, =, b, [, 0, ], *, yDotK, [, 0, ], []
[), {, double, sum, =, b, [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (]
[), {, double, sum, =, b, [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (]
[;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {, sum, +=, b, []
[*, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, stages, ;]
[[, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l]
[], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, stages]
[;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {, sum, +=, b, []
[[, j, ], ;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {, sum]
[[, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++, l]
[], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {]
[], ;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {, sum, +=, b]
[;, l, <, stages, ;, ++, l, ), {, sum, +=, b, [, l, ], *, yDotK, [, l, ]]
[;, ++, l, ), {, sum, +=, b, [, l, ], *, yDotK, [, l, ], [, j, ], ;]
[<, stages, ;, ++, l, ), {, sum, +=, b, [, l, ], *, yDotK, [, l, ], [, j]
[;, ++, l, ), {, sum, +=, b, [, l, ], *, yDotK, [, l, ], [, j, ], ;]
[), {, sum, +=, b, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, []
[), {, sum, +=, b, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, []
[+=, b, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =]
[;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, error, =, estimateError]
[*, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +]
[[, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, []
[], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ]]
[;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, error, =, estimateError]
[[, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }]
[[, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *]
[], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;]
[], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, error, =]
[=, y, [, j, ], +, stepSize, *, sum, ;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp]
[[, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, error, =, estimateError, (, yDotK, ,]
[], =, y, [, j, ], +, stepSize, *, sum, ;, }, error, =, estimateError, (, yDotK, ,, y, ,]
[;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;, if, (, error, >=, 1.0]
[+, stepSize, *, sum, ;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;, if]
[[, j, ], +, stepSize, *, sum, ;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp, ,, stepSize]
[], +, stepSize, *, sum, ;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;]
[;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;, if, (, error, >=, 1.0]
[*, sum, ;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;, if, (, error]
[;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;, if, (, error, >=, 1.0]
[=, estimateError, (, yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;, if, (, error, >=, 1.0, ), {, final]
[;, if, (, error, >=, 1.0, ), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, .]
[,, y, ,, yTmp, ,, stepSize, ), ;, if, (, error, >=, 1.0, ), {, final, double, factor, =, FastMath]
[,, yTmp, ,, stepSize, ), ;, if, (, error, >=, 1.0, ), {, final, double, factor, =, FastMath, ., min]
[,, stepSize, ), ;, if, (, error, >=, 1.0, ), {, final, double, factor, =, FastMath, ., min, (, maxGrowth]
[), ;, if, (, error, >=, 1.0, ), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath]
[), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *]
[>=, 1.0, ), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,]
[), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *]
[;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }, }, interpolator, ., storeTime, (]
[., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp]
[,, FastMath, ., max, (, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;]
[), ;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }, }, interpolator, ., storeTime]
[., max, (, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, hNew, =]
[,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, hNew, =, filterStep, (, stepSize, *]
[), ), ;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }, }, interpolator, .]
[*, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, hNew, =, filterStep, (, stepSize, *, factor, ,]
[), ), ;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }, }, interpolator, .]
[., pow, (, error, ,, exp, ), ), ), ;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,]
[,, exp, ), ), ), ;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }]
[), ), ), ;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }, }, interpolator]
[=, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }, }, interpolator, ., storeTime, (, stepStart, +]
[;, }, }, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy, (, yTmp, ,, 0, ,]
[,, forward, ,, false, ), ;, }, }, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy]
[*, factor, ,, forward, ,, false, ), ;, }, }, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, System]
[,, forward, ,, false, ), ;, }, }, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy]
[,, false, ), ;, }, }, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy, (, yTmp]
[), ;, }, }, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy, (, yTmp, ,, 0]
[;, System, ., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, .]
[., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,]
[), ;, System, ., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System]
[+, stepSize, ), ;, System, ., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,, y0, ., length, )]
[), ;, System, ., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System]
[;, System, ., arraycopy, (, yDotK, [, stages, -, 1, ], ,, 0, ,, yDotTmp, ,, 0, ,, y0, .]
[., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (]
[,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDotK, [, stages, -]
[,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDotK, [, stages, -, 1, ]]
[,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDotK, [, stages, -, 1, ], ,, 0]
[,, y0, ., length, ), ;, System, ., arraycopy, (, yDotK, [, stages, -, 1, ], ,, 0, ,, yDotTmp]
[), ;, System, ., arraycopy, (, yDotK, [, stages, -, 1, ], ,, 0, ,, yDotTmp, ,, 0, ,, y0]
[., length, ), ;, System, ., arraycopy, (, yDotK, [, stages, -, 1, ], ,, 0, ,, yDotTmp, ,, 0]
[;, stepStart, =, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,, t, ), ;, System, ., arraycopy, (, y, ,]
[., arraycopy, (, yDotK, [, stages, -, 1, ], ,, 0, ,, yDotTmp, ,, 0, ,, y0, ., length, )]
[,, 0, ,, yDotTmp, ,, 0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y, ,]
[[, stages, -, 1, ], ,, 0, ,, yDotTmp, ,, 0, ,, y0, ., length, ), ;, stepStart, =, acceptStep]
[], ,, 0, ,, yDotTmp, ,, 0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y]
[-, 1, ], ,, 0, ,, yDotTmp, ,, 0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator]
[], ,, 0, ,, yDotTmp, ,, 0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y]
[,, yDotTmp, ,, 0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,]
[,, 0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,, t, )]
[,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,, t, ), ;, System]
[), ;, stepStart, =, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,, t, ), ;, System, ., arraycopy, (, y]
[., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,, t, ), ;, System, ., arraycopy]
[=, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,, t, ), ;, System, ., arraycopy, (, y, ,, 0, ,]
[;, System, ., arraycopy, (, y, ,, 0, ,, yTmp, ,, 0, ,, y, ., length, ), ;, if, (]
[,, y, ,, yDotTmp, ,, t, ), ;, System, ., arraycopy, (, y, ,, 0, ,, yTmp, ,, 0, ,]
[,, yDotTmp, ,, t, ), ;, System, ., arraycopy, (, y, ,, 0, ,, yTmp, ,, 0, ,, y, .]
[,, t, ), ;, System, ., arraycopy, (, y, ,, 0, ,, yTmp, ,, 0, ,, y, ., length, )]
[), ;, System, ., arraycopy, (, y, ,, 0, ,, yTmp, ,, 0, ,, y, ., length, ), ;, if]
[;, if, (, !, isLastStep, ), {, interpolator, ., storeTime, (, stepStart, ), ;, if, (, fsal, ), {, System]
[., arraycopy, (, y, ,, 0, ,, yTmp, ,, 0, ,, y, ., length, ), ;, if, (, !, isLastStep]
[,, 0, ,, yTmp, ,, 0, ,, y, ., length, ), ;, if, (, !, isLastStep, ), {, interpolator, .]
[,, yTmp, ,, 0, ,, y, ., length, ), ;, if, (, !, isLastStep, ), {, interpolator, ., storeTime, (]
[,, 0, ,, y, ., length, ), ;, if, (, !, isLastStep, ), {, interpolator, ., storeTime, (, stepStart, )]
[,, y, ., length, ), ;, if, (, !, isLastStep, ), {, interpolator, ., storeTime, (, stepStart, ), ;, if]
[), ;, if, (, !, isLastStep, ), {, interpolator, ., storeTime, (, stepStart, ), ;, if, (, fsal, ), {]
[., length, ), ;, if, (, !, isLastStep, ), {, interpolator, ., storeTime, (, stepStart, ), ;, if, (, fsal]
[), {, interpolator, ., storeTime, (, stepStart, ), ;, if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,]
[), {, interpolator, ., storeTime, (, stepStart, ), ;, if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,]
[;, if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,, 0, ,, yDotK, [, 0, ], ,, 0]
[., storeTime, (, stepStart, ), ;, if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,, 0, ,, yDotK]
[), ;, if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,, 0, ,, yDotK, [, 0, ], ,]
[), {, System, ., arraycopy, (, yDotTmp, ,, 0, ,, yDotK, [, 0, ], ,, 0, ,, y0, ., length]
[;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *]
[., arraycopy, (, yDotTmp, ,, 0, ,, yDotK, [, 0, ], ,, 0, ,, y0, ., length, ), ;, }]
[,, 0, ,, yDotK, [, 0, ], ,, 0, ,, y0, ., length, ), ;, }, final, double, factor, =]
[,, yDotK, [, 0, ], ,, 0, ,, y0, ., length, ), ;, }, final, double, factor, =, FastMath, .]
[,, 0, ,, y0, ., length, ), ;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath]
[[, 0, ], ,, 0, ,, y0, ., length, ), ;, }, final, double, factor, =, FastMath, ., min, (]
[], ,, 0, ,, y0, ., length, ), ;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,]
[,, y0, ., length, ), ;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max]
[), ;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety]
[., length, ), ;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction]
[;, final, double, scaledH, =, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast]
[., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp]
[,, FastMath, ., max, (, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;]
[), ;, final, double, scaledH, =, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean]
[., max, (, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, final, double]
[,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, final, double, scaledH, =, stepSize, *]
[), ), ;, final, double, scaledH, =, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;, final]
[*, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, final, double, scaledH, =, stepSize, *, factor, ;]
[), ), ;, final, double, scaledH, =, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;, final]
[., pow, (, error, ,, exp, ), ), ), ;, final, double, scaledH, =, stepSize, *, factor, ;, final, double]
[,, exp, ), ), ), ;, final, double, scaledH, =, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +]
[), ), ), ;, final, double, scaledH, =, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;]
[;, final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=, t, )]
[*, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=]
[;, final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=, t, )]
[;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, hNew]
[+, scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, )]
[;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, hNew]
[;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;]
[?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, hNew, =, filterStep, (, scaledH, ,, forward]
[:, (, nextT, <=, t, ), ;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double]
[), :, (, nextT, <=, t, ), ;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final]
[>=, t, ), :, (, nextT, <=, t, ), ;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, )]
[), :, (, nextT, <=, t, ), ;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final]
[;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;]
[), ;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew]
[<=, t, ), ;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart]
[), ;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew]
[=, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean]
[;, final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT, >=, t, )]
[,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?]
[,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT]
[), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT, >=, t]
[;, final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT, >=, t, ), :, (, filteredNextT, <=, t, ), ;, if]
[+, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT, >=, t, ), :, (, filteredNextT, <=, t, )]
[;, final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT, >=, t, ), :, (, filteredNextT, <=, t, ), ;, if]
[;, if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }, }, }, while, (, !, isLastStep, )]
[?, (, filteredNextT, >=, t, ), :, (, filteredNextT, <=, t, ), ;, if, (, filteredNextIsLast, ), {, hNew, =]
[:, (, filteredNextT, <=, t, ), ;, if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }, }]
[), :, (, filteredNextT, <=, t, ), ;, if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }]
[>=, t, ), :, (, filteredNextT, <=, t, ), ;, if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart]
[), :, (, filteredNextT, <=, t, ), ;, if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }]
[;, if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }, }, }, while, (, !, isLastStep, )]
[), ;, if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }, }, }, while, (, !, isLastStep]
[<=, t, ), ;, if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }, }, }, while, (]
[), ;, if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }, }, }, while, (, !, isLastStep]
[), {, hNew, =, t, -, stepStart, ;, }, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime]
[=, t, -, stepStart, ;, }, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, )]
[;, }, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;, equations, ., setCompleteState]
[-, stepStart, ;, }, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;, equations]
[;, }, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;, equations, ., setCompleteState]
[), ;, equations, ., setTime, (, stepStart, ), ;, equations, ., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;]
[), ;, equations, ., setTime, (, stepStart, ), ;, equations, ., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;]
[;, equations, ., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;, }, public, double, getMinReduction, (, ), {, return]
[., setTime, (, stepStart, ), ;, equations, ., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;, }, public, double]
[), ;, equations, ., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;, }, public, double, getMinReduction, (, ), {]
[;, resetInternalState, (, ), ;, }, public, double, getMinReduction, (, ), {, return, minReduction, ;, }, public, void, setMinReduction, (]
[., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;, }, public, double, getMinReduction, (, ), {, return, minReduction, ;]
[), ;, resetInternalState, (, ), ;, }, public, double, getMinReduction, (, ), {, return, minReduction, ;, }, public, void, setMinReduction]
[;, }, public, double, getMinReduction, (, ), {, return, minReduction, ;, }, public, void, setMinReduction, (, final, double, minReduction, )]
[;, }, public, void, setMinReduction, (, final, double, minReduction, ), {, this, ., minReduction, =, minReduction, ;, }, public, double]
[=, minReduction, ;, }, public, double, getMaxGrowth, (, ), {, return, maxGrowth, ;, }, public, void, setMaxGrowth, (, final, double]
[., minReduction, =, minReduction, ;, }, public, double, getMaxGrowth, (, ), {, return, maxGrowth, ;, }, public, void, setMaxGrowth, (]
[;, }, public, double, getMaxGrowth, (, ), {, return, maxGrowth, ;, }, public, void, setMaxGrowth, (, final, double, maxGrowth, )]
[;, }, public, void, setMaxGrowth, (, final, double, maxGrowth, ), {, this, ., maxGrowth, =, maxGrowth, ;, }, protected, abstract]
[=, maxGrowth, ;, }, protected, abstract, double, estimateError, (, double, [, ], [, ], yDotK, ,, double, [, ], y0]
[., maxGrowth, =, maxGrowth, ;, }, protected, abstract, double, estimateError, (, double, [, ], [, ], yDotK, ,, double, []
[;, }, protected, abstract, double, estimateError, (, double, [, ], [, ], yDotK, ,, double, [, ], y0, ,, double]
