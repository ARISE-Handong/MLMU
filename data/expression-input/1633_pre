[jscomp, ;, import, com, ., google, ., javascript, ., rhino, ., Node, ;, abstract, class, CodeConsumer, {, boolean, statementNeedsEnded, =]
[google, ., javascript, ., rhino, ., Node, ;, abstract, class, CodeConsumer, {, boolean, statementNeedsEnded, =, false, ;, boolean, statementStarted, =]
[., Node, ;, abstract, class, CodeConsumer, {, boolean, statementNeedsEnded, =, false, ;, boolean, statementStarted, =, false, ;, boolean, sawFunction, =]
[(, Node, node, ), {, }, void, endSourceMapping, (, Node, node, ), {, }, boolean, continueProcessing, (, ), {, return]
[(, ), {, return, true, ;, }, abstract, char, getLastChar, (, ), ;, void, addIdentifier, (, String, identifier, ), {]
[{, return, true, ;, }, abstract, char, getLastChar, (, ), ;, void, addIdentifier, (, String, identifier, ), {, add, (]
[{, add, (, identifier, ), ;, }, abstract, void, append, (, String, str, ), ;, void, appendBlockStart, (, ), {]
[(, identifier, ), ;, }, abstract, void, append, (, String, str, ), ;, void, appendBlockStart, (, ), {, append, (]
[String, str, ), ;, void, appendBlockStart, (, ), {, append, (, "{", ), ;, }, void, appendBlockEnd, (, ), {]
[), ;, void, appendBlockStart, (, ), {, append, (, "{", ), ;, }, void, appendBlockEnd, (, ), {, append, (]
[(, ), {, append, (, "}", ), ;, }, void, startNewLine, (, ), {, }, void, maybeLineBreak, (, ), {]
[}, void, endLine, (, ), {, }, void, notePreferredLineBreak, (, ), {, }, void, beginBlock, (, ), {, if, (]
[(, ), {, }, void, notePreferredLineBreak, (, ), {, }, void, beginBlock, (, ), {, if, (, statementNeedsEnded, ), {]
[{, }, void, notePreferredLineBreak, (, ), {, }, void, beginBlock, (, ), {, if, (, statementNeedsEnded, ), {, append, (]
[notePreferredLineBreak, (, ), {, }, void, beginBlock, (, ), {, if, (, statementNeedsEnded, ), {, append, (, ";", ), ;]
[void, beginBlock, (, ), {, if, (, statementNeedsEnded, ), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;, }]
[{, if, (, statementNeedsEnded, ), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;, }, appendBlockStart, (, ), ;]
[), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;, }, appendBlockStart, (, ), ;, endLine, (, ), ;]
[append, (, ";", ), ;, maybeLineBreak, (, ), ;, }, appendBlockStart, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =]
[;, }, appendBlockStart, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }, void, endBlock, (, ), {]
[appendBlockStart, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }, void, endBlock, (, ), {, endBlock, (]
[;, }, void, endBlock, (, ), {, endBlock, (, false, ), ;, }, void, endBlock, (, boolean, shouldEndLine, ), {]
[{, endBlock, (, false, ), ;, }, void, endBlock, (, boolean, shouldEndLine, ), {, appendBlockEnd, (, ), ;, if, (]
[false, ), ;, }, void, endBlock, (, boolean, shouldEndLine, ), {, appendBlockEnd, (, ), ;, if, (, shouldEndLine, ), {]
[endBlock, (, boolean, shouldEndLine, ), {, appendBlockEnd, (, ), ;, if, (, shouldEndLine, ), {, endLine, (, ), ;, }]
[boolean, shouldEndLine, ), {, appendBlockEnd, (, ), ;, if, (, shouldEndLine, ), {, endLine, (, ), ;, }, statementNeedsEnded, =]
[if, (, shouldEndLine, ), {, endLine, (, ), ;, }, statementNeedsEnded, =, false, ;, }, void, listSeparator, (, ), {]
[shouldEndLine, ), {, endLine, (, ), ;, }, statementNeedsEnded, =, false, ;, }, void, listSeparator, (, ), {, add, (]
[endLine, (, ), ;, }, statementNeedsEnded, =, false, ;, }, void, listSeparator, (, ), {, add, (, ",", ), ;]
[void, listSeparator, (, ), {, add, (, ",", ), ;, maybeLineBreak, (, ), ;, }, void, endStatement, (, ), {]
[(, ), {, add, (, ",", ), ;, maybeLineBreak, (, ), ;, }, void, endStatement, (, ), {, endStatement, (]
[void, endStatement, (, ), {, endStatement, (, false, ), ;, }, void, endStatement, (, boolean, needSemiColon, ), {, if, (]
[), {, endStatement, (, false, ), ;, }, void, endStatement, (, boolean, needSemiColon, ), {, if, (, needSemiColon, ), {]
[endStatement, (, false, ), ;, }, void, endStatement, (, boolean, needSemiColon, ), {, if, (, needSemiColon, ), {, append, (]
[), ;, }, void, endStatement, (, boolean, needSemiColon, ), {, if, (, needSemiColon, ), {, append, (, ";", ), ;]
[endStatement, (, boolean, needSemiColon, ), {, if, (, needSemiColon, ), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;]
[boolean, needSemiColon, ), {, if, (, needSemiColon, ), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;, statementNeedsEnded, =]
[needSemiColon, ), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;, statementNeedsEnded, =, false, ;, }, else, if, (]
[append, (, ";", ), ;, maybeLineBreak, (, ), ;, statementNeedsEnded, =, false, ;, }, else, if, (, statementStarted, ), {]
[";", ), ;, maybeLineBreak, (, ), ;, statementNeedsEnded, =, false, ;, }, else, if, (, statementStarted, ), {, statementNeedsEnded, =]
[}, else, if, (, statementStarted, ), {, statementNeedsEnded, =, true, ;, }, }, void, maybeEndStatement, (, ), {, if, (]
[(, statementStarted, ), {, statementNeedsEnded, =, true, ;, }, }, void, maybeEndStatement, (, ), {, if, (, statementNeedsEnded, ), {]
[), {, statementNeedsEnded, =, true, ;, }, }, void, maybeEndStatement, (, ), {, if, (, statementNeedsEnded, ), {, append, (]
[=, true, ;, }, }, void, maybeEndStatement, (, ), {, if, (, statementNeedsEnded, ), {, append, (, ";", ), ;]
[}, void, maybeEndStatement, (, ), {, if, (, statementNeedsEnded, ), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;]
[), {, if, (, statementNeedsEnded, ), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;, endLine, (, ), ;]
[if, (, statementNeedsEnded, ), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =]
[), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }]
[append, (, ";", ), ;, maybeLineBreak, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }, statementStarted, =]
[;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }, statementStarted, =, true, ;, }, void, endFunction, (, ), {]
[(, ), ;, statementNeedsEnded, =, false, ;, }, statementStarted, =, true, ;, }, void, endFunction, (, ), {, endFunction, (]
[;, }, void, endFunction, (, ), {, endFunction, (, false, ), ;, }, void, endFunction, (, boolean, statementContext, ), {]
[void, endFunction, (, ), {, endFunction, (, false, ), ;, }, void, endFunction, (, boolean, statementContext, ), {, sawFunction, =]
[{, endFunction, (, false, ), ;, }, void, endFunction, (, boolean, statementContext, ), {, sawFunction, =, true, ;, if, (]
[false, ), ;, }, void, endFunction, (, boolean, statementContext, ), {, sawFunction, =, true, ;, if, (, statementContext, ), {]
[sawFunction, =, true, ;, if, (, statementContext, ), {, endLine, (, ), ;, }, }, void, beginCaseBody, (, ), {]
[true, ;, if, (, statementContext, ), {, endLine, (, ), ;, }, }, void, beginCaseBody, (, ), {, append, (]
[{, append, (, ":", ), ;, }, void, endCaseBody, (, ), {, }, void, add, (, String, newcode, ), {]
[}, void, endCaseBody, (, ), {, }, void, add, (, String, newcode, ), {, maybeEndStatement, (, ), ;, if, (]
[}, void, endCaseBody, (, ), {, }, void, add, (, String, newcode, ), {, maybeEndStatement, (, ), ;, if, (]
[}, void, endCaseBody, (, ), {, }, void, add, (, String, newcode, ), {, maybeEndStatement, (, ), ;, if, (]
[}, void, add, (, String, newcode, ), {, maybeEndStatement, (, ), ;, if, (, newcode, ., length, (, ), ==]
[(, ), ;, if, (, newcode, ., length, (, ), ==, 0, ), {, return, ;, }, char, c, =]
[(, ), ;, if, (, newcode, ., length, (, ), ==, 0, ), {, return, ;, }, char, c, =]
[(, newcode, ., length, (, ), ==, 0, ), {, return, ;, }, char, c, =, newcode, ., charAt, (]
[), ==, 0, ), {, return, ;, }, char, c, =, newcode, ., charAt, (, 0, ), ;, if, (]
[), ==, 0, ), {, return, ;, }, char, c, =, newcode, ., charAt, (, 0, ), ;, if, (]
[==, 0, ), {, return, ;, }, char, c, =, newcode, ., charAt, (, 0, ), ;, if, (, (]
[==, 0, ), {, return, ;, }, char, c, =, newcode, ., charAt, (, 0, ), ;, if, (, (]
[), {, return, ;, }, char, c, =, newcode, ., charAt, (, 0, ), ;, if, (, (, isWordChar, (]
[;, }, char, c, =, newcode, ., charAt, (, 0, ), ;, if, (, (, isWordChar, (, c, ), ||]
[;, }, char, c, =, newcode, ., charAt, (, 0, ), ;, if, (, (, isWordChar, (, c, ), ||]
[char, c, =, newcode, ., charAt, (, 0, ), ;, if, (, (, isWordChar, (, c, ), ||, c, ==]
[newcode, ., charAt, (, 0, ), ;, if, (, (, isWordChar, (, c, ), ||, c, ==, '\\', ), &&]
[charAt, (, 0, ), ;, if, (, (, isWordChar, (, c, ), ||, c, ==, '\\', ), &&, isWordChar, (]
[(, (, isWordChar, (, c, ), ||, c, ==, '\\', ), &&, isWordChar, (, getLastChar, (, ), ), ), {]
[isWordChar, (, c, ), ||, c, ==, '\\', ), &&, isWordChar, (, getLastChar, (, ), ), ), {, append, (]
['\\', ), &&, isWordChar, (, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }, else, if, (]
['\\', ), &&, isWordChar, (, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }, else, if, (]
['\\', ), &&, isWordChar, (, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }, else, if, (]
[&&, isWordChar, (, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }, else, if, (, c, ==]
[(, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }, else, if, (, c, ==, '/', &&]
[(, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }, else, if, (, c, ==, '/', &&]
[), ), {, append, (, " ", ), ;, }, else, if, (, c, ==, '/', &&, getLastChar, (, ), ==]
[append, (, " ", ), ;, }, else, if, (, c, ==, '/', &&, getLastChar, (, ), ==, '/', ), {]
[" ", ), ;, }, else, if, (, c, ==, '/', &&, getLastChar, (, ), ==, '/', ), {, append, (]
[else, if, (, c, ==, '/', &&, getLastChar, (, ), ==, '/', ), {, append, (, " ", ), ;, }]
[(, c, ==, '/', &&, getLastChar, (, ), ==, '/', ), {, append, (, " ", ), ;, }, append, (]
[" ", ), ;, }, append, (, newcode, ), ;, }, void, appendOp, (, String, op, ,, boolean, binOp, ), {]
[;, }, append, (, newcode, ), ;, }, void, appendOp, (, String, op, ,, boolean, binOp, ), {, append, (]
[boolean, binOp, ), {, append, (, op, ), ;, }, void, addOp, (, String, op, ,, boolean, binOp, ), {]
[), ;, }, void, addOp, (, String, op, ,, boolean, binOp, ), {, maybeEndStatement, (, ), ;, char, first, =]
[), ;, }, void, addOp, (, String, op, ,, boolean, binOp, ), {, maybeEndStatement, (, ), ;, char, first, =]
[addOp, (, String, op, ,, boolean, binOp, ), {, maybeEndStatement, (, ), ;, char, first, =, op, ., charAt, (]
[binOp, ), {, maybeEndStatement, (, ), ;, char, first, =, op, ., charAt, (, 0, ), ;, char, prev, =]
[;, char, first, =, op, ., charAt, (, 0, ), ;, char, prev, =, getLastChar, (, ), ;, if, (]
[;, char, first, =, op, ., charAt, (, 0, ), ;, char, prev, =, getLastChar, (, ), ;, if, (]
[char, first, =, op, ., charAt, (, 0, ), ;, char, prev, =, getLastChar, (, ), ;, if, (, (]
[char, first, =, op, ., charAt, (, 0, ), ;, char, prev, =, getLastChar, (, ), ;, if, (, (]
[char, first, =, op, ., charAt, (, 0, ), ;, char, prev, =, getLastChar, (, ), ;, if, (, (]
[=, op, ., charAt, (, 0, ), ;, char, prev, =, getLastChar, (, ), ;, if, (, (, first, ==]
[., charAt, (, 0, ), ;, char, prev, =, getLastChar, (, ), ;, if, (, (, first, ==, '+', ||]
[., charAt, (, 0, ), ;, char, prev, =, getLastChar, (, ), ;, if, (, (, first, ==, '+', ||]
[(, 0, ), ;, char, prev, =, getLastChar, (, ), ;, if, (, (, first, ==, '+', ||, first, ==]
[;, char, prev, =, getLastChar, (, ), ;, if, (, (, first, ==, '+', ||, first, ==, '-', ), &&]
[;, char, prev, =, getLastChar, (, ), ;, if, (, (, first, ==, '+', ||, first, ==, '-', ), &&]
[prev, =, getLastChar, (, ), ;, if, (, (, first, ==, '+', ||, first, ==, '-', ), &&, prev, ==]
[(, ), ;, if, (, (, first, ==, '+', ||, first, ==, '-', ), &&, prev, ==, first, ), {]
[;, if, (, (, first, ==, '+', ||, first, ==, '-', ), &&, prev, ==, first, ), {, append, (]
[||, first, ==, '-', ), &&, prev, ==, first, ), {, append, (, " ", ), ;, }, else, if, (]
[||, first, ==, '-', ), &&, prev, ==, first, ), {, append, (, " ", ), ;, }, else, if, (]
[||, first, ==, '-', ), &&, prev, ==, first, ), {, append, (, " ", ), ;, }, else, if, (]
[), &&, prev, ==, first, ), {, append, (, " ", ), ;, }, else, if, (, Character, ., isLetter, (]
[==, first, ), {, append, (, " ", ), ;, }, else, if, (, Character, ., isLetter, (, first, ), &&]
[), {, append, (, " ", ), ;, }, else, if, (, Character, ., isLetter, (, first, ), &&, isWordChar, (]
[" ", ), ;, }, else, if, (, Character, ., isLetter, (, first, ), &&, isWordChar, (, prev, ), ), {]
[;, }, else, if, (, Character, ., isLetter, (, first, ), &&, isWordChar, (, prev, ), ), {, append, (]
[isLetter, (, first, ), &&, isWordChar, (, prev, ), ), {, append, (, " ", ), ;, }, else, if, (]
[isLetter, (, first, ), &&, isWordChar, (, prev, ), ), {, append, (, " ", ), ;, }, else, if, (]
[isLetter, (, first, ), &&, isWordChar, (, prev, ), ), {, append, (, " ", ), ;, }, else, if, (]
[first, ), &&, isWordChar, (, prev, ), ), {, append, (, " ", ), ;, }, else, if, (, prev, ==]
[&&, isWordChar, (, prev, ), ), {, append, (, " ", ), ;, }, else, if, (, prev, ==, '-', &&]
[&&, isWordChar, (, prev, ), ), {, append, (, " ", ), ;, }, else, if, (, prev, ==, '-', &&]
[(, prev, ), ), {, append, (, " ", ), ;, }, else, if, (, prev, ==, '-', &&, first, ==]
[), {, append, (, " ", ), ;, }, else, if, (, prev, ==, '-', &&, first, ==, '>', ), {]
[append, (, " ", ), ;, }, else, if, (, prev, ==, '-', &&, first, ==, '>', ), {, append, (]
[;, }, else, if, (, prev, ==, '-', &&, first, ==, '>', ), {, append, (, " ", ), ;, }]
[else, if, (, prev, ==, '-', &&, first, ==, '>', ), {, append, (, " ", ), ;, }, appendOp, (]
[(, prev, ==, '-', &&, first, ==, '>', ), {, append, (, " ", ), ;, }, appendOp, (, op, ,]
[first, ==, '>', ), {, append, (, " ", ), ;, }, appendOp, (, op, ,, binOp, ), ;, if, (]
[), {, append, (, " ", ), ;, }, appendOp, (, op, ,, binOp, ), ;, if, (, binOp, ), {]
[(, binOp, ), {, maybeCutLine, (, ), ;, }, }, void, addNumber, (, double, x, ), {, char, prev, =]
[;, }, }, void, addNumber, (, double, x, ), {, char, prev, =, getLastChar, (, ), ;, boolean, negativeZero, =]
[}, void, addNumber, (, double, x, ), {, char, prev, =, getLastChar, (, ), ;, boolean, negativeZero, =, isNegativeZero, (]
[x, ), {, char, prev, =, getLastChar, (, ), ;, boolean, negativeZero, =, isNegativeZero, (, x, ), ;, if, (]
[x, ), {, char, prev, =, getLastChar, (, ), ;, boolean, negativeZero, =, isNegativeZero, (, x, ), ;, if, (]
[), {, char, prev, =, getLastChar, (, ), ;, boolean, negativeZero, =, isNegativeZero, (, x, ), ;, if, (, (]
[), {, char, prev, =, getLastChar, (, ), ;, boolean, negativeZero, =, isNegativeZero, (, x, ), ;, if, (, (]
[), {, char, prev, =, getLastChar, (, ), ;, boolean, negativeZero, =, isNegativeZero, (, x, ), ;, if, (, (]
[char, prev, =, getLastChar, (, ), ;, boolean, negativeZero, =, isNegativeZero, (, x, ), ;, if, (, (, x, <]
[=, getLastChar, (, ), ;, boolean, negativeZero, =, isNegativeZero, (, x, ), ;, if, (, (, x, <, 0, ||]
[), ;, boolean, negativeZero, =, isNegativeZero, (, x, ), ;, if, (, (, x, <, 0, ||, negativeZero, ), &&]
[), ;, boolean, negativeZero, =, isNegativeZero, (, x, ), ;, if, (, (, x, <, 0, ||, negativeZero, ), &&]
[boolean, negativeZero, =, isNegativeZero, (, x, ), ;, if, (, (, x, <, 0, ||, negativeZero, ), &&, prev, ==]
[isNegativeZero, (, x, ), ;, if, (, (, x, <, 0, ||, negativeZero, ), &&, prev, ==, '-', ), {]
[x, ), ;, if, (, (, x, <, 0, ||, negativeZero, ), &&, prev, ==, '-', ), {, add, (]
[x, <, 0, ||, negativeZero, ), &&, prev, ==, '-', ), {, add, (, " ", ), ;, }, if, (]
[||, negativeZero, ), &&, prev, ==, '-', ), {, add, (, " ", ), ;, }, if, (, negativeZero, ), {]
[), &&, prev, ==, '-', ), {, add, (, " ", ), ;, }, if, (, negativeZero, ), {, addConstant, (]
[add, (, " ", ), ;, }, if, (, negativeZero, ), {, addConstant, (, "-0", ), ;, }, else, if, (]
[add, (, " ", ), ;, }, if, (, negativeZero, ), {, addConstant, (, "-0", ), ;, }, else, if, (]
[), ;, }, if, (, negativeZero, ), {, addConstant, (, "-0", ), ;, }, else, if, (, (, long, )]
[}, if, (, negativeZero, ), {, addConstant, (, "-0", ), ;, }, else, if, (, (, long, ), x, ==]
[addConstant, (, "-0", ), ;, }, else, if, (, (, long, ), x, ==, x, ), {, long, value, =]
[), ;, }, else, if, (, (, long, ), x, ==, x, ), {, long, value, =, (, long, )]
[(, (, long, ), x, ==, x, ), {, long, value, =, (, long, ), x, ;, long, mantissa, =]
[==, x, ), {, long, value, =, (, long, ), x, ;, long, mantissa, =, value, ;, int, exp, =]
[long, value, =, (, long, ), x, ;, long, mantissa, =, value, ;, int, exp, =, 0, ;, if, (]
[long, value, =, (, long, ), x, ;, long, mantissa, =, value, ;, int, exp, =, 0, ;, if, (]
[long, value, =, (, long, ), x, ;, long, mantissa, =, value, ;, int, exp, =, 0, ;, if, (]
[long, ), x, ;, long, mantissa, =, value, ;, int, exp, =, 0, ;, if, (, Math, ., abs, (]
[;, long, mantissa, =, value, ;, int, exp, =, 0, ;, if, (, Math, ., abs, (, x, ), >=]
[;, int, exp, =, 0, ;, if, (, Math, ., abs, (, x, ), >=, 100, ), {, while, (]
[;, int, exp, =, 0, ;, if, (, Math, ., abs, (, x, ), >=, 100, ), {, while, (]
[;, int, exp, =, 0, ;, if, (, Math, ., abs, (, x, ), >=, 100, ), {, while, (]
[;, int, exp, =, 0, ;, if, (, Math, ., abs, (, x, ), >=, 100, ), {, while, (]
[exp, =, 0, ;, if, (, Math, ., abs, (, x, ), >=, 100, ), {, while, (, mantissa, /]
[0, ;, if, (, Math, ., abs, (, x, ), >=, 100, ), {, while, (, mantissa, /, 10, *]
[0, ;, if, (, Math, ., abs, (, x, ), >=, 100, ), {, while, (, mantissa, /, 10, *]
[Math, ., abs, (, x, ), >=, 100, ), {, while, (, mantissa, /, 10, *, Math, ., pow, (]
[abs, (, x, ), >=, 100, ), {, while, (, mantissa, /, 10, *, Math, ., pow, (, 10, ,]
[abs, (, x, ), >=, 100, ), {, while, (, mantissa, /, 10, *, Math, ., pow, (, 10, ,]
[x, ), >=, 100, ), {, while, (, mantissa, /, 10, *, Math, ., pow, (, 10, ,, exp, +]
[100, ), {, while, (, mantissa, /, 10, *, Math, ., pow, (, 10, ,, exp, +, 1, ), ==]
[while, (, mantissa, /, 10, *, Math, ., pow, (, 10, ,, exp, +, 1, ), ==, value, ), {]
[mantissa, /, 10, *, Math, ., pow, (, 10, ,, exp, +, 1, ), ==, value, ), {, mantissa, /=]
[10, *, Math, ., pow, (, 10, ,, exp, +, 1, ), ==, value, ), {, mantissa, /=, 10, ;]
[10, *, Math, ., pow, (, 10, ,, exp, +, 1, ), ==, value, ), {, mantissa, /=, 10, ;]
[,, exp, +, 1, ), ==, value, ), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (]
[,, exp, +, 1, ), ==, value, ), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (]
[+, 1, ), ==, value, ), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >]
[==, value, ), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {]
[), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {, addConstant, (]
[), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {, addConstant, (]
[), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {, addConstant, (]
[), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {, addConstant, (]
[10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {, addConstant, (, Long, ., toString, (]
[++, ;, }, }, if, (, exp, >, 2, ), {, addConstant, (, Long, ., toString, (, mantissa, ), +]
[}, }, if, (, exp, >, 2, ), {, addConstant, (, Long, ., toString, (, mantissa, ), +, "E", +]
[}, }, if, (, exp, >, 2, ), {, addConstant, (, Long, ., toString, (, mantissa, ), +, "E", +]
[exp, >, 2, ), {, addConstant, (, Long, ., toString, (, mantissa, ), +, "E", +, Integer, ., toString, (]
[(, mantissa, ), +, "E", +, Integer, ., toString, (, exp, ), ), ;, }, else, {, long, valueAbs, =]
[(, mantissa, ), +, "E", +, Integer, ., toString, (, exp, ), ), ;, }, else, {, long, valueAbs, =]
["E", +, Integer, ., toString, (, exp, ), ), ;, }, else, {, long, valueAbs, =, Math, ., abs, (]
[(, exp, ), ), ;, }, else, {, long, valueAbs, =, Math, ., abs, (, value, ), ;, if, (]
[(, exp, ), ), ;, }, else, {, long, valueAbs, =, Math, ., abs, (, value, ), ;, if, (]
[(, exp, ), ), ;, }, else, {, long, valueAbs, =, Math, ., abs, (, value, ), ;, if, (]
[(, exp, ), ), ;, }, else, {, long, valueAbs, =, Math, ., abs, (, value, ), ;, if, (]
[(, exp, ), ), ;, }, else, {, long, valueAbs, =, Math, ., abs, (, value, ), ;, if, (]
[;, }, else, {, long, valueAbs, =, Math, ., abs, (, value, ), ;, if, (, Long, ., toHexString, (]
[Math, ., abs, (, value, ), ;, if, (, Long, ., toHexString, (, valueAbs, ), ., length, (, ), +]
[abs, (, value, ), ;, if, (, Long, ., toHexString, (, valueAbs, ), ., length, (, ), +, 2, <]
[abs, (, value, ), ;, if, (, Long, ., toHexString, (, valueAbs, ), ., length, (, ), +, 2, <]
[abs, (, value, ), ;, if, (, Long, ., toHexString, (, valueAbs, ), ., length, (, ), +, 2, <]
[;, if, (, Long, ., toHexString, (, valueAbs, ), ., length, (, ), +, 2, <, Long, ., toString, (]
[), ., length, (, ), +, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {]
[length, (, ), +, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (]
[length, (, ), +, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (]
[length, (, ), +, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (]
[(, ), +, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (, (]
[(, ), +, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (, (]
[(, ), +, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (, (]
[+, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (, (, value, <]
[<, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (, (, value, <, 0, ?]
[., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (, (, value, <, 0, ?, "-", :]
[valueAbs, ), ., length, (, ), ), {, addConstant, (, (, value, <, 0, ?, "-", :, "", ), +]
[., length, (, ), ), {, addConstant, (, (, value, <, 0, ?, "-", :, "", ), +, "0x", +]
[., length, (, ), ), {, addConstant, (, (, value, <, 0, ?, "-", :, "", ), +, "0x", +]
[), {, addConstant, (, (, value, <, 0, ?, "-", :, "", ), +, "0x", +, Long, ., toHexString, (]
[0, ?, "-", :, "", ), +, "0x", +, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {]
["-", :, "", ), +, "0x", +, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant, (]
["-", :, "", ), +, "0x", +, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant, (]
[+, "0x", +, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant, (, Long, ., toString, (]
[), ;, }, else, {, addConstant, (, Long, ., toString, (, value, ), ), ;, }, }, }, else, {]
[}, else, {, addConstant, (, Long, ., toString, (, value, ), ), ;, }, }, }, else, {, addConstant, (]
[}, else, {, addConstant, (, Long, ., toString, (, value, ), ), ;, }, }, }, else, {, addConstant, (]
[}, else, {, addConstant, (, Long, ., toString, (, value, ), ), ;, }, }, }, else, {, addConstant, (]
[(, Long, ., toString, (, value, ), ), ;, }, }, }, else, {, addConstant, (, String, ., valueOf, (]
[value, ), ), ;, }, }, }, else, {, addConstant, (, String, ., valueOf, (, x, ), ., replace, (]
[), ;, }, }, }, else, {, addConstant, (, String, ., valueOf, (, x, ), ., replace, (, ".0E", ,]
[x, ), ., replace, (, ".0E", ,, "E", ), ), ;, }, }, void, addConstant, (, String, newcode, ), {]
[., replace, (, ".0E", ,, "E", ), ), ;, }, }, void, addConstant, (, String, newcode, ), {, add, (]
[(, String, newcode, ), {, add, (, newcode, ), ;, }, static, boolean, isNegativeZero, (, double, x, ), {, return]
[(, String, newcode, ), {, add, (, newcode, ), ;, }, static, boolean, isNegativeZero, (, double, x, ), {, return]
[(, String, newcode, ), {, add, (, newcode, ), ;, }, static, boolean, isNegativeZero, (, double, x, ), {, return]
[newcode, ), {, add, (, newcode, ), ;, }, static, boolean, isNegativeZero, (, double, x, ), {, return, x, ==]
[{, add, (, newcode, ), ;, }, static, boolean, isNegativeZero, (, double, x, ), {, return, x, ==, 0.0, &&]
[{, add, (, newcode, ), ;, }, static, boolean, isNegativeZero, (, double, x, ), {, return, x, ==, 0.0, &&]
[{, add, (, newcode, ), ;, }, static, boolean, isNegativeZero, (, double, x, ), {, return, x, ==, 0.0, &&]
[), ;, }, static, boolean, isNegativeZero, (, double, x, ), {, return, x, ==, 0.0, &&, Math, ., copySign, (]
[}, static, boolean, isNegativeZero, (, double, x, ), {, return, x, ==, 0.0, &&, Math, ., copySign, (, 1, ,]
[isNegativeZero, (, double, x, ), {, return, x, ==, 0.0, &&, Math, ., copySign, (, 1, ,, x, ), ==]
[(, double, x, ), {, return, x, ==, 0.0, &&, Math, ., copySign, (, 1, ,, x, ), ==, -]
[copySign, (, 1, ,, x, ), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return]
[(, 1, ,, x, ), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (]
[(, 1, ,, x, ), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (]
[(, 1, ,, x, ), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (]
[(, 1, ,, x, ), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (]
[,, x, ), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==]
[), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||]
[), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||]
[-, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||, ch, ==]
[;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||, ch, ==, '$', ||]
[;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||, ch, ==, '$', ||]
[isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||, ch, ==, '$', ||, Character, ., isLetterOrDigit, (]
[||, ch, ==, '$', ||, Character, ., isLetterOrDigit, (, ch, ), ), ;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return]
[boolean, shouldPreserveExtraBlocks, (, ), {, return, false, ;, }, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, statementContext, ), {, return]
