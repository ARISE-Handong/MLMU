[google, ., javascript, ., rhino, ., Node, ;, class, CheckDebuggerStatement, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, DEBUGGER_STATEMENT_PRESENT, =]
[google, ., javascript, ., rhino, ., Node, ;, class, CheckDebuggerStatement, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, DEBUGGER_STATEMENT_PRESENT, =]
[rhino, ., Node, ;, class, CheckDebuggerStatement, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, DEBUGGER_STATEMENT_PRESENT, =, DiagnosticType, ., disabled, (]
[Node, ;, class, CheckDebuggerStatement, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, DEBUGGER_STATEMENT_PRESENT, =, DiagnosticType, ., disabled, (, "JSC_DEBUGGER_STATEMENT_PRESENT", ,]
[Node, ;, class, CheckDebuggerStatement, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, DEBUGGER_STATEMENT_PRESENT, =, DiagnosticType, ., disabled, (, "JSC_DEBUGGER_STATEMENT_PRESENT", ,]
[class, CheckDebuggerStatement, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, DEBUGGER_STATEMENT_PRESENT, =, DiagnosticType, ., disabled, (, "JSC_DEBUGGER_STATEMENT_PRESENT", ,, "Using the debugger statement can halt your application if the user ", +]
[(, "JSC_DEBUGGER_STATEMENT_PRESENT", ,, "Using the debugger statement can halt your application if the user ", +, "has a JavaScript debugger running.", ), ;, private, final, AbstractCompiler, compiler, ;, public, CheckDebuggerStatement, (, AbstractCompiler, compiler, ), {]
[(, "JSC_DEBUGGER_STATEMENT_PRESENT", ,, "Using the debugger statement can halt your application if the user ", +, "has a JavaScript debugger running.", ), ;, private, final, AbstractCompiler, compiler, ;, public, CheckDebuggerStatement, (, AbstractCompiler, compiler, ), {]
[+, "has a JavaScript debugger running.", ), ;, private, final, AbstractCompiler, compiler, ;, public, CheckDebuggerStatement, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isDebugger, (, ), ), {]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isDebugger, (, ), ), {]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isDebugger, (, ), ), {, t, ., report, (]
[,, Node, parent, ), {, if, (, n, ., isDebugger, (, ), ), {, t, ., report, (, n, ,]
