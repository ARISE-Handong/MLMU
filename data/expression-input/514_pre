[jstype, ., JSType, ;, class, PeepholeFoldWithTypes, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, switch, (]
[jstype, ., JSType, ;, class, PeepholeFoldWithTypes, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, switch, (]
[{, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, switch, (, subtree, ., getType, (, ), ), {, case]
[{, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, switch, (, subtree, ., getType, (, ), ), {, case]
[(, Node, subtree, ), {, switch, (, subtree, ., getType, (, ), ), {, case, Token, ., TYPEOF, :, return]
[subtree, ), {, switch, (, subtree, ., getType, (, ), ), {, case, Token, ., TYPEOF, :, return, tryFoldTypeof, (]
[., getType, (, ), ), {, case, Token, ., TYPEOF, :, return, tryFoldTypeof, (, subtree, ), ;, default, :, return]
[tryFoldTypeof, (, subtree, ), ;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTypeof, (, Node, typeofNode, ), {]
[tryFoldTypeof, (, subtree, ), ;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTypeof, (, Node, typeofNode, ), {]
[;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTypeof, (, Node, typeofNode, ), {, Preconditions, ., checkArgument, (]
[;, default, :, return, subtree, ;, }, }, private, Node, tryFoldTypeof, (, Node, typeofNode, ), {, Preconditions, ., checkArgument, (]
[}, private, Node, tryFoldTypeof, (, Node, typeofNode, ), {, Preconditions, ., checkArgument, (, typeofNode, ., isTypeOf, (, ), ), ;]
[}, private, Node, tryFoldTypeof, (, Node, typeofNode, ), {, Preconditions, ., checkArgument, (, typeofNode, ., isTypeOf, (, ), ), ;]
[(, Node, typeofNode, ), {, Preconditions, ., checkArgument, (, typeofNode, ., isTypeOf, (, ), ), ;, Preconditions, ., checkArgument, (]
[(, Node, typeofNode, ), {, Preconditions, ., checkArgument, (, typeofNode, ., isTypeOf, (, ), ), ;, Preconditions, ., checkArgument, (]
[(, Node, typeofNode, ), {, Preconditions, ., checkArgument, (, typeofNode, ., isTypeOf, (, ), ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, typeofNode, ., isTypeOf, (, ), ), ;, Preconditions, ., checkArgument, (, typeofNode, ., getFirstChild, (, ), !=]
[(, ), ), ;, Preconditions, ., checkArgument, (, typeofNode, ., getFirstChild, (, ), !=, null, ), ;, Node, argumentNode, =]
[(, ), ), ;, Preconditions, ., checkArgument, (, typeofNode, ., getFirstChild, (, ), !=, null, ), ;, Node, argumentNode, =]
[typeofNode, ., getFirstChild, (, ), !=, null, ), ;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (]
[typeofNode, ., getFirstChild, (, ), !=, null, ), ;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (]
[., getFirstChild, (, ), !=, null, ), ;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (, !]
[., getFirstChild, (, ), !=, null, ), ;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (, !]
[!=, null, ), ;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isLiteralValue, (]
[), ;, Node, argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isLiteralValue, (, argumentNode, ,]
[argumentNode, =, typeofNode, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isLiteralValue, (, argumentNode, ,, true, ), &&]
[=, typeofNode, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isLiteralValue, (, argumentNode, ,, true, ), &&, !]
[., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isLiteralValue, (, argumentNode, ,, true, ), &&, !, mayHaveSideEffects, (]
[!, NodeUtil, ., isLiteralValue, (, argumentNode, ,, true, ), &&, !, mayHaveSideEffects, (, argumentNode, ), ), {, JSType, argumentType, =]
[!, NodeUtil, ., isLiteralValue, (, argumentNode, ,, true, ), &&, !, mayHaveSideEffects, (, argumentNode, ), ), {, JSType, argumentType, =]
[&&, !, mayHaveSideEffects, (, argumentNode, ), ), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;, String, typeName, =]
[argumentNode, ), ), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;, String, typeName, =, null, ;, if, (]
[argumentNode, ), ), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;, String, typeName, =, null, ;, if, (]
[), {, JSType, argumentType, =, argumentNode, ., getJSType, (, ), ;, String, typeName, =, null, ;, if, (, argumentType, !=]
[argumentNode, ., getJSType, (, ), ;, String, typeName, =, null, ;, if, (, argumentType, !=, null, ), {, if, (]
[argumentNode, ., getJSType, (, ), ;, String, typeName, =, null, ;, if, (, argumentType, !=, null, ), {, if, (]
[argumentNode, ., getJSType, (, ), ;, String, typeName, =, null, ;, if, (, argumentType, !=, null, ), {, if, (]
[String, typeName, =, null, ;, if, (, argumentType, !=, null, ), {, if, (, argumentType, ., isObject, (, ), ||]
[String, typeName, =, null, ;, if, (, argumentType, !=, null, ), {, if, (, argumentType, ., isObject, (, ), ||]
[argumentType, !=, null, ), {, if, (, argumentType, ., isObject, (, ), ||, argumentType, ., isNullType, (, ), ), {]
[null, ), {, if, (, argumentType, ., isObject, (, ), ||, argumentType, ., isNullType, (, ), ), {, typeName, =]
[., isObject, (, ), ||, argumentType, ., isNullType, (, ), ), {, typeName, =, "object", ;, }, else, if, (]
[., isObject, (, ), ||, argumentType, ., isNullType, (, ), ), {, typeName, =, "object", ;, }, else, if, (]
[isNullType, (, ), ), {, typeName, =, "object", ;, }, else, if, (, argumentType, ., isStringValueType, (, ), ), {]
[), ), {, typeName, =, "object", ;, }, else, if, (, argumentType, ., isStringValueType, (, ), ), {, typeName, =]
[;, }, else, if, (, argumentType, ., isStringValueType, (, ), ), {, typeName, =, "string", ;, }, else, if, (]
[;, }, else, if, (, argumentType, ., isStringValueType, (, ), ), {, typeName, =, "string", ;, }, else, if, (]
[isStringValueType, (, ), ), {, typeName, =, "string", ;, }, else, if, (, argumentType, ., isNumberValueType, (, ), ), {]
[), ), {, typeName, =, "string", ;, }, else, if, (, argumentType, ., isNumberValueType, (, ), ), {, typeName, =]
[;, }, else, if, (, argumentType, ., isNumberValueType, (, ), ), {, typeName, =, "number", ;, }, else, if, (]
[;, }, else, if, (, argumentType, ., isNumberValueType, (, ), ), {, typeName, =, "number", ;, }, else, if, (]
[isNumberValueType, (, ), ), {, typeName, =, "number", ;, }, else, if, (, argumentType, ., isBooleanValueType, (, ), ), {]
[), ), {, typeName, =, "number", ;, }, else, if, (, argumentType, ., isBooleanValueType, (, ), ), {, typeName, =]
[;, }, else, if, (, argumentType, ., isBooleanValueType, (, ), ), {, typeName, =, "boolean", ;, }, else, if, (]
[;, }, else, if, (, argumentType, ., isBooleanValueType, (, ), ), {, typeName, =, "boolean", ;, }, else, if, (]
[isBooleanValueType, (, ), ), {, typeName, =, "boolean", ;, }, else, if, (, argumentType, ., isVoidType, (, ), ), {]
[), ), {, typeName, =, "boolean", ;, }, else, if, (, argumentType, ., isVoidType, (, ), ), {, typeName, =]
[;, }, else, if, (, argumentType, ., isVoidType, (, ), ), {, typeName, =, "undefined", ;, }, else, if, (]
[;, }, else, if, (, argumentType, ., isVoidType, (, ), ), {, typeName, =, "undefined", ;, }, else, if, (]
[isVoidType, (, ), ), {, typeName, =, "undefined", ;, }, else, if, (, argumentType, ., isUnionType, (, ), ), {]
[), ), {, typeName, =, "undefined", ;, }, else, if, (, argumentType, ., isUnionType, (, ), ), {, typeName, =]
["undefined", ;, }, else, if, (, argumentType, ., isUnionType, (, ), ), {, typeName, =, null, ;, }, if, (]
["undefined", ;, }, else, if, (, argumentType, ., isUnionType, (, ), ), {, typeName, =, null, ;, }, if, (]
[}, else, if, (, argumentType, ., isUnionType, (, ), ), {, typeName, =, null, ;, }, if, (, typeName, !=]
[isUnionType, (, ), ), {, typeName, =, null, ;, }, if, (, typeName, !=, null, ), {, Node, newNode, =]
[isUnionType, (, ), ), {, typeName, =, null, ;, }, if, (, typeName, !=, null, ), {, Node, newNode, =]
[{, typeName, =, null, ;, }, if, (, typeName, !=, null, ), {, Node, newNode, =, IR, ., string, (]
[null, ;, }, if, (, typeName, !=, null, ), {, Node, newNode, =, IR, ., string, (, typeName, ), ;]
[null, ;, }, if, (, typeName, !=, null, ), {, Node, newNode, =, IR, ., string, (, typeName, ), ;]
[null, ;, }, if, (, typeName, !=, null, ), {, Node, newNode, =, IR, ., string, (, typeName, ), ;]
[), {, Node, newNode, =, IR, ., string, (, typeName, ), ;, typeofNode, ., getParent, (, ), ., replaceChild, (]
[Node, newNode, =, IR, ., string, (, typeName, ), ;, typeofNode, ., getParent, (, ), ., replaceChild, (, typeofNode, ,]
[IR, ., string, (, typeName, ), ;, typeofNode, ., getParent, (, ), ., replaceChild, (, typeofNode, ,, newNode, ), ;]
[), ;, typeofNode, ., getParent, (, ), ., replaceChild, (, typeofNode, ,, newNode, ), ;, reportCodeChange, (, ), ;, return]
[), ., replaceChild, (, typeofNode, ,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode, ;, }, }, }, return]
