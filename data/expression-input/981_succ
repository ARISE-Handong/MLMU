[;, private, MathUtils, (, ), {, }, public, static, int, hash, (, double, value, ), {, return, new, Double, (]
[*, FastMath, ., PI, ;, private, MathUtils, (, ), {, }, public, static, int, hash, (, double, value, ), {]
[;, private, MathUtils, (, ), {, }, public, static, int, hash, (, double, value, ), {, return, new, Double, (]
[., PI, ;, private, MathUtils, (, ), {, }, public, static, int, hash, (, double, value, ), {, return, new]
[;, }, public, static, int, hash, (, double, [, ], value, ), {, return, Arrays, ., hashCode, (, value, )]
[., hashCode, (, ), ;, }, public, static, int, hash, (, double, [, ], value, ), {, return, Arrays, .]
[), ., hashCode, (, ), ;, }, public, static, int, hash, (, double, [, ], value, ), {, return, Arrays]
[;, }, public, static, double, normalizeAngle, (, double, a, ,, double, center, ), {, return, a, -, TWO_PI, *, FastMath]
[., hashCode, (, value, ), ;, }, public, static, double, normalizeAngle, (, double, a, ,, double, center, ), {, return]
[), ;, }, public, static, double, normalizeAngle, (, double, a, ,, double, center, ), {, return, a, -, TWO_PI, *]
[;, }, public, static, double, reduce, (, double, a, ,, double, period, ,, double, offset, ), {, final, double, p]
[-, TWO_PI, *, FastMath, ., floor, (, (, a, +, FastMath, ., PI, -, center, ), /, TWO_PI, ), ;]
[;, }, public, static, double, reduce, (, double, a, ,, double, period, ,, double, offset, ), {, final, double, p]
[*, FastMath, ., floor, (, (, a, +, FastMath, ., PI, -, center, ), /, TWO_PI, ), ;, }, public]
[;, }, public, static, double, reduce, (, double, a, ,, double, period, ,, double, offset, ), {, final, double, p]
[., floor, (, (, a, +, FastMath, ., PI, -, center, ), /, TWO_PI, ), ;, }, public, static, double]
[), ;, }, public, static, double, reduce, (, double, a, ,, double, period, ,, double, offset, ), {, final, double]
[/, TWO_PI, ), ;, }, public, static, double, reduce, (, double, a, ,, double, period, ,, double, offset, ), {]
[), /, TWO_PI, ), ;, }, public, static, double, reduce, (, double, a, ,, double, period, ,, double, offset, )]
[-, center, ), /, TWO_PI, ), ;, }, public, static, double, reduce, (, double, a, ,, double, period, ,, double]
[+, FastMath, ., PI, -, center, ), /, TWO_PI, ), ;, }, public, static, double, reduce, (, double, a, ,]
[-, center, ), /, TWO_PI, ), ;, }, public, static, double, reduce, (, double, a, ,, double, period, ,, double]
[., PI, -, center, ), /, TWO_PI, ), ;, }, public, static, double, reduce, (, double, a, ,, double, period]
[), /, TWO_PI, ), ;, }, public, static, double, reduce, (, double, a, ,, double, period, ,, double, offset, )]
[), ;, }, public, static, double, reduce, (, double, a, ,, double, period, ,, double, offset, ), {, final, double]
[;, return, a, -, p, *, FastMath, ., floor, (, (, a, -, offset, ), /, p, ), -, offset]
[., abs, (, period, ), ;, return, a, -, p, *, FastMath, ., floor, (, (, a, -, offset, )]
[), ;, return, a, -, p, *, FastMath, ., floor, (, (, a, -, offset, ), /, p, ), -]
[;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude]
[-, offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (]
[-, p, *, FastMath, ., floor, (, (, a, -, offset, ), /, p, ), -, offset, ;, }, public]
[-, offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (]
[*, FastMath, ., floor, (, (, a, -, offset, ), /, p, ), -, offset, ;, }, public, static, byte]
[-, offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (]
[., floor, (, (, a, -, offset, ), /, p, ), -, offset, ;, }, public, static, byte, copySign, (]
[), -, offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if]
[/, p, ), -, offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException]
[), /, p, ), -, offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws]
[-, offset, ), /, p, ), -, offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign]
[), /, p, ), -, offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws]
[), -, offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if]
[;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude]
[), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Byte, ., MIN_VALUE, ), {]
[||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[&&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;]
[>=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return]
[&&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[>=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Byte, ., MIN_VALUE, ), {]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Byte, ., MIN_VALUE, )]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Byte, ., MIN_VALUE, )]
[<, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Byte, .]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Byte, ., MIN_VALUE, )]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Byte, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, byte, ), -, magnitude]
[&&, magnitude, ==, Byte, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {]
[>=, 0, &&, magnitude, ==, Byte, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }]
[&&, magnitude, ==, Byte, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, byte, ), -, magnitude]
[==, Byte, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, byte, ), -, magnitude]
[., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, byte, )]
[;, }, else, {, return, (, byte, ), -, magnitude, ;, }, }, public, static, short, copySign, (, short, magnitude]
[), ;, }, else, {, return, (, byte, ), -, magnitude, ;, }, }, public, static, short, copySign, (, short]
[., OVERFLOW, ), ;, }, else, {, return, (, byte, ), -, magnitude, ;, }, }, public, static, short, copySign]
[;, }, }, public, static, short, copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (, (]
[;, }, }, public, static, short, copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (, (]
[;, }, }, public, static, short, copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (, (]
[), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Short, ., MIN_VALUE, ), {]
[||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[&&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;]
[>=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return]
[&&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[>=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Short, ., MIN_VALUE, ), {]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Short, ., MIN_VALUE, )]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Short, ., MIN_VALUE, )]
[<, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Short, .]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Short, ., MIN_VALUE, )]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Short, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, short, ), -, magnitude]
[&&, magnitude, ==, Short, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {]
[>=, 0, &&, magnitude, ==, Short, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }]
[&&, magnitude, ==, Short, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, short, ), -, magnitude]
[==, Short, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, short, ), -, magnitude]
[., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, short, )]
[;, }, else, {, return, (, short, ), -, magnitude, ;, }, }, public, static, int, copySign, (, int, magnitude]
[), ;, }, else, {, return, (, short, ), -, magnitude, ;, }, }, public, static, int, copySign, (, int]
[., OVERFLOW, ), ;, }, else, {, return, (, short, ), -, magnitude, ;, }, }, public, static, int, copySign]
[;, }, }, public, static, int, copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (, (]
[;, }, }, public, static, int, copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (, (]
[;, }, }, public, static, int, copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (, (]
[), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Integer, ., MIN_VALUE, ), {]
[||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[&&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;]
[>=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return]
[&&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[>=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Integer, ., MIN_VALUE, ), {]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Integer, ., MIN_VALUE, )]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Integer, ., MIN_VALUE, )]
[<, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Integer, .]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Integer, ., MIN_VALUE, )]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -, magnitude, ;, }, }]
[&&, magnitude, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {]
[>=, 0, &&, magnitude, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }]
[&&, magnitude, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -, magnitude, ;, }, }]
[==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -, magnitude, ;, }, }]
[., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -, magnitude, ;]
[;, }, else, {, return, -, magnitude, ;, }, }, public, static, long, copySign, (, long, magnitude, ,, long, sign]
[), ;, }, else, {, return, -, magnitude, ;, }, }, public, static, long, copySign, (, long, magnitude, ,, long]
[., OVERFLOW, ), ;, }, else, {, return, -, magnitude, ;, }, }, public, static, long, copySign, (, long, magnitude]
[;, }, }, public, static, long, copySign, (, long, magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (, (]
[;, }, }, public, static, long, copySign, (, long, magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (, (]
[), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Long, ., MIN_VALUE, ), {]
[||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[&&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;]
[>=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return]
[&&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[>=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Long, ., MIN_VALUE, ), {]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Long, ., MIN_VALUE, )]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Long, ., MIN_VALUE, )]
[<, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Long, .]
[), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Long, ., MIN_VALUE, )]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -, magnitude, ;, }, }]
[&&, magnitude, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {]
[>=, 0, &&, magnitude, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }]
[&&, magnitude, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -, magnitude, ;, }, }]
[==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -, magnitude, ;, }, }]
[., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -, magnitude, ;]
[;, }, else, {, return, -, magnitude, ;, }, }, public, static, void, checkFinite, (, final, double, x, ), throws]
[), ;, }, else, {, return, -, magnitude, ;, }, }, public, static, void, checkFinite, (, final, double, x, )]
[., OVERFLOW, ), ;, }, else, {, return, -, magnitude, ;, }, }, public, static, void, checkFinite, (, final, double]
[;, }, }, public, static, void, checkFinite, (, final, double, x, ), throws, NotFiniteNumberException, {, if, (, Double, ., isInfinite]
[;, }, }, public, static, void, checkFinite, (, final, double, x, ), throws, NotFiniteNumberException, {, if, (, Double, ., isInfinite]
[), {, throw, new, NotFiniteNumberException, (, x, ), ;, }, }, public, static, void, checkFinite, (, final, double, [, ]]
[||, Double, ., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (, x, ), ;, }, }, public, static]
[., isInfinite, (, x, ), ||, Double, ., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (, x, )]
[), ||, Double, ., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (, x, ), ;, }, }, public]
[), {, throw, new, NotFiniteNumberException, (, x, ), ;, }, }, public, static, void, checkFinite, (, final, double, [, ]]
[., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (, x, ), ;, }, }, public, static, void, checkFinite]
[), ), {, throw, new, NotFiniteNumberException, (, x, ), ;, }, }, public, static, void, checkFinite, (, final, double, []
[;, }, }, public, static, void, checkFinite, (, final, double, [, ], val, ), throws, NotFiniteNumberException, {, for, (, int]
[), ;, }, }, public, static, void, checkFinite, (, final, double, [, ], val, ), throws, NotFiniteNumberException, {, for, (]
[;, i, <, val, ., length, ;, i, ++, ), {, final, double, x, =, val, [, i, ], ;]
[;, i, ++, ), {, final, double, x, =, val, [, i, ], ;, if, (, Double, ., isInfinite, (]
[<, val, ., length, ;, i, ++, ), {, final, double, x, =, val, [, i, ], ;, if, (]
[;, i, ++, ), {, final, double, x, =, val, [, i, ], ;, if, (, Double, ., isInfinite, (]
[., length, ;, i, ++, ), {, final, double, x, =, val, [, i, ], ;, if, (, Double, .]
[), {, final, double, x, =, val, [, i, ], ;, if, (, Double, ., isInfinite, (, x, ), ||]
[++, ), {, final, double, x, =, val, [, i, ], ;, if, (, Double, ., isInfinite, (, x, )]
[;, if, (, Double, ., isInfinite, (, x, ), ||, Double, ., isNaN, (, x, ), ), {, throw, new]
[[, i, ], ;, if, (, Double, ., isInfinite, (, x, ), ||, Double, ., isNaN, (, x, ), )]
[], ;, if, (, Double, ., isInfinite, (, x, ), ||, Double, ., isNaN, (, x, ), ), {, throw]
[), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., ARRAY_ELEMENT, ,, x, ,, i, ), ;, }, }, }, public, static]
[||, Double, ., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., ARRAY_ELEMENT, ,, x, ,, i]
[., isInfinite, (, x, ), ||, Double, ., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, .]
[), ||, Double, ., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., ARRAY_ELEMENT, ,, x, ,]
[), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., ARRAY_ELEMENT, ,, x, ,, i, ), ;, }, }, }, public, static]
[., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., ARRAY_ELEMENT, ,, x, ,, i, ), ;]
[), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., ARRAY_ELEMENT, ,, x, ,, i, ), ;, }, }, }, public]
[;, }, }, }, public, static, void, checkNotNull, (, Object, o, ,, Localizable, pattern, ,, Object, ..., args, ), throws]
[,, x, ,, i, ), ;, }, }, }, public, static, void, checkNotNull, (, Object, o, ,, Localizable, pattern, ,]
[., ARRAY_ELEMENT, ,, x, ,, i, ), ;, }, }, }, public, static, void, checkNotNull, (, Object, o, ,, Localizable]
[,, i, ), ;, }, }, }, public, static, void, checkNotNull, (, Object, o, ,, Localizable, pattern, ,, Object, ...]
[), ;, }, }, }, public, static, void, checkNotNull, (, Object, o, ,, Localizable, pattern, ,, Object, ..., args, )]
[), {, throw, new, NullArgumentException, (, pattern, ,, args, ), ;, }, }, public, static, void, checkNotNull, (, Object, o]
[==, null, ), {, throw, new, NullArgumentException, (, pattern, ,, args, ), ;, }, }, public, static, void, checkNotNull, (]
[), {, throw, new, NullArgumentException, (, pattern, ,, args, ), ;, }, }, public, static, void, checkNotNull, (, Object, o]
[;, }, }, public, static, void, checkNotNull, (, Object, o, ), throws, NullArgumentException, {, if, (, o, ==, null, )]
[,, args, ), ;, }, }, public, static, void, checkNotNull, (, Object, o, ), throws, NullArgumentException, {, if, (, o]
[), ;, }, }, public, static, void, checkNotNull, (, Object, o, ), throws, NullArgumentException, {, if, (, o, ==, null]
[), {, throw, new, NullArgumentException, (, ), ;, }, }, }]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, }, }]
[), {, throw, new, NullArgumentException, (, ), ;, }, }, }]
[;, }, }, }]
