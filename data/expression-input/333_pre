[Map, ;, import, java, ., util, ., Set, ;, class, RecordType, extends, PrototypeObjectType, {, private, static, final, long, serialVersionUID, =]
[extends, PrototypeObjectType, {, private, static, final, long, serialVersionUID, =, 1L, ;, private, final, boolean, declared, ;, private, boolean, isFrozen, =]
[isFrozen, =, false, ;, RecordType, (, JSTypeRegistry, registry, ,, Map, <, String, ,, RecordProperty, >, properties, ), {, this, (]
[false, ;, RecordType, (, JSTypeRegistry, registry, ,, Map, <, String, ,, RecordProperty, >, properties, ), {, this, (, registry, ,]
[RecordType, (, JSTypeRegistry, registry, ,, Map, <, String, ,, RecordProperty, >, properties, ), {, this, (, registry, ,, properties, ,]
[}, RecordType, (, JSTypeRegistry, registry, ,, Map, <, String, ,, RecordProperty, >, properties, ,, boolean, declared, ), {, super, (]
[(, JSTypeRegistry, registry, ,, Map, <, String, ,, RecordProperty, >, properties, ,, boolean, declared, ), {, super, (, registry, ,]
[registry, ,, Map, <, String, ,, RecordProperty, >, properties, ,, boolean, declared, ), {, super, (, registry, ,, null, ,]
[<, String, ,, RecordProperty, >, properties, ,, boolean, declared, ), {, super, (, registry, ,, null, ,, null, ), ;]
[,, RecordProperty, >, properties, ,, boolean, declared, ), {, super, (, registry, ,, null, ,, null, ), ;, setPrettyPrint, (]
[properties, ,, boolean, declared, ), {, super, (, registry, ,, null, ,, null, ), ;, setPrettyPrint, (, true, ), ;]
[properties, ,, boolean, declared, ), {, super, (, registry, ,, null, ,, null, ), ;, setPrettyPrint, (, true, ), ;]
[), {, super, (, registry, ,, null, ,, null, ), ;, setPrettyPrint, (, true, ), ;, this, ., declared, =]
[,, null, ), ;, setPrettyPrint, (, true, ), ;, this, ., declared, =, declared, ;, for, (, String, property, :]
[,, null, ), ;, setPrettyPrint, (, true, ), ;, this, ., declared, =, declared, ;, for, (, String, property, :]
[., declared, =, declared, ;, for, (, String, property, :, properties, ., keySet, (, ), ), {, RecordProperty, prop, =]
[., declared, =, declared, ;, for, (, String, property, :, properties, ., keySet, (, ), ), {, RecordProperty, prop, =]
[;, for, (, String, property, :, properties, ., keySet, (, ), ), {, RecordProperty, prop, =, properties, ., get, (]
[:, properties, ., keySet, (, ), ), {, RecordProperty, prop, =, properties, ., get, (, property, ), ;, if, (]
[:, properties, ., keySet, (, ), ), {, RecordProperty, prop, =, properties, ., get, (, property, ), ;, if, (]
[., keySet, (, ), ), {, RecordProperty, prop, =, properties, ., get, (, property, ), ;, if, (, prop, ==]
[), {, RecordProperty, prop, =, properties, ., get, (, property, ), ;, if, (, prop, ==, null, ), {, throw]
[prop, =, properties, ., get, (, property, ), ;, if, (, prop, ==, null, ), {, throw, new, IllegalStateException, (]
[property, ), ;, if, (, prop, ==, null, ), {, throw, new, IllegalStateException, (, "RecordProperty associated with a property should not be null!", ), ;, }, if, (]
[if, (, prop, ==, null, ), {, throw, new, IllegalStateException, (, "RecordProperty associated with a property should not be null!", ), ;, }, if, (, declared, ), {]
[prop, ==, null, ), {, throw, new, IllegalStateException, (, "RecordProperty associated with a property should not be null!", ), ;, }, if, (, declared, ), {, defineDeclaredProperty, (]
[null, ), {, throw, new, IllegalStateException, (, "RecordProperty associated with a property should not be null!", ), ;, }, if, (, declared, ), {, defineDeclaredProperty, (, property, ,]
[null, ), {, throw, new, IllegalStateException, (, "RecordProperty associated with a property should not be null!", ), ;, }, if, (, declared, ), {, defineDeclaredProperty, (, property, ,]
[(, "RecordProperty associated with a property should not be null!", ), ;, }, if, (, declared, ), {, defineDeclaredProperty, (, property, ,, prop, ., getType, (, ), ,]
[(, "RecordProperty associated with a property should not be null!", ), ;, }, if, (, declared, ), {, defineDeclaredProperty, (, property, ,, prop, ., getType, (, ), ,]
[defineDeclaredProperty, (, property, ,, prop, ., getType, (, ), ,, prop, ., getPropertyNode, (, ), ), ;, }, else, {]
[property, ,, prop, ., getType, (, ), ,, prop, ., getPropertyNode, (, ), ), ;, }, else, {, defineSynthesizedProperty, (]
[prop, ., getType, (, ), ,, prop, ., getPropertyNode, (, ), ), ;, }, else, {, defineSynthesizedProperty, (, property, ,]
[prop, ., getType, (, ), ,, prop, ., getPropertyNode, (, ), ), ;, }, else, {, defineSynthesizedProperty, (, property, ,]
[prop, ., getPropertyNode, (, ), ), ;, }, else, {, defineSynthesizedProperty, (, property, ,, prop, ., getType, (, ), ,]
[prop, ., getPropertyNode, (, ), ), ;, }, else, {, defineSynthesizedProperty, (, property, ,, prop, ., getType, (, ), ,]
[{, defineSynthesizedProperty, (, property, ,, prop, ., getType, (, ), ,, prop, ., getPropertyNode, (, ), ), ;, }, }]
[(, property, ,, prop, ., getType, (, ), ,, prop, ., getPropertyNode, (, ), ), ;, }, }, isFrozen, =]
[prop, ., getPropertyNode, (, ), ), ;, }, }, isFrozen, =, true, ;, }, boolean, isSynthetic, (, ), {, return]
[., getPropertyNode, (, ), ), ;, }, }, isFrozen, =, true, ;, }, boolean, isSynthetic, (, ), {, return, !]
[!, declared, ;, }, boolean, checkRecordEquivalenceHelper, (, RecordType, otherRecord, ,, EquivalenceMethod, eqMethod, ), {, Set, <, String, >, keySet, =]
[EquivalenceMethod, eqMethod, ), {, Set, <, String, >, keySet, =, getOwnPropertyNames, (, ), ;, Set, <, String, >, otherKeySet, =]
[EquivalenceMethod, eqMethod, ), {, Set, <, String, >, keySet, =, getOwnPropertyNames, (, ), ;, Set, <, String, >, otherKeySet, =]
[keySet, =, getOwnPropertyNames, (, ), ;, Set, <, String, >, otherKeySet, =, otherRecord, ., getOwnPropertyNames, (, ), ;, if, (]
[=, getOwnPropertyNames, (, ), ;, Set, <, String, >, otherKeySet, =, otherRecord, ., getOwnPropertyNames, (, ), ;, if, (, !]
[=, getOwnPropertyNames, (, ), ;, Set, <, String, >, otherKeySet, =, otherRecord, ., getOwnPropertyNames, (, ), ;, if, (, !]
[;, Set, <, String, >, otherKeySet, =, otherRecord, ., getOwnPropertyNames, (, ), ;, if, (, !, otherKeySet, ., equals, (]
[otherKeySet, =, otherRecord, ., getOwnPropertyNames, (, ), ;, if, (, !, otherKeySet, ., equals, (, keySet, ), ), {, return]
[if, (, !, otherKeySet, ., equals, (, keySet, ), ), {, return, false, ;, }, for, (, String, key, :]
[equals, (, keySet, ), ), {, return, false, ;, }, for, (, String, key, :, keySet, ), {, if, (]
[(, keySet, ), ), {, return, false, ;, }, for, (, String, key, :, keySet, ), {, if, (, !]
[(, keySet, ), ), {, return, false, ;, }, for, (, String, key, :, keySet, ), {, if, (, !]
[(, keySet, ), ), {, return, false, ;, }, for, (, String, key, :, keySet, ), {, if, (, !]
[{, return, false, ;, }, for, (, String, key, :, keySet, ), {, if, (, !, otherRecord, ., getPropertyType, (]
[for, (, String, key, :, keySet, ), {, if, (, !, otherRecord, ., getPropertyType, (, key, ), ., checkEquivalenceHelper, (]
[String, key, :, keySet, ), {, if, (, !, otherRecord, ., getPropertyType, (, key, ), ., checkEquivalenceHelper, (, getPropertyType, (]
[keySet, ), {, if, (, !, otherRecord, ., getPropertyType, (, key, ), ., checkEquivalenceHelper, (, getPropertyType, (, key, ), ,]
[!, otherRecord, ., getPropertyType, (, key, ), ., checkEquivalenceHelper, (, getPropertyType, (, key, ), ,, eqMethod, ), ), {, return]
[key, ), ., checkEquivalenceHelper, (, getPropertyType, (, key, ), ,, eqMethod, ), ), {, return, false, ;, }, }, return]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, ObjectType, getImplicitPrototype, (, ), {, return]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, ObjectType, getImplicitPrototype, (, ), {, return]
[;, }, }, return, true, ;, }, @, Override, public, ObjectType, getImplicitPrototype, (, ), {, return, registry, ., getNativeObjectType, (]
[;, }, }, return, true, ;, }, @, Override, public, ObjectType, getImplicitPrototype, (, ), {, return, registry, ., getNativeObjectType, (]
[@, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, if, (]
[(, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, if, (, isFrozen, ), {, return]
[JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, if, (, isFrozen, ), {, return, false, ;, }, return]
[JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, if, (, isFrozen, ), {, return, false, ;, }, return]
[inferred, ,, Node, propertyNode, ), {, if, (, isFrozen, ), {, return, false, ;, }, return, super, ., defineProperty, (]
[Node, propertyNode, ), {, if, (, isFrozen, ), {, return, false, ;, }, return, super, ., defineProperty, (, propertyName, ,]
[), {, if, (, isFrozen, ), {, return, false, ;, }, return, super, ., defineProperty, (, propertyName, ,, type, ,]
[if, (, isFrozen, ), {, return, false, ;, }, return, super, ., defineProperty, (, propertyName, ,, type, ,, inferred, ,]
[(, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ;, }, JSType, getGreatestSubtypeHelper, (, JSType, that, ), {, if, (]
[(, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ;, }, JSType, getGreatestSubtypeHelper, (, JSType, that, ), {, if, (]
[}, JSType, getGreatestSubtypeHelper, (, JSType, that, ), {, if, (, that, ., isRecordType, (, ), ), {, RecordType, thatRecord, =]
[}, JSType, getGreatestSubtypeHelper, (, JSType, that, ), {, if, (, that, ., isRecordType, (, ), ), {, RecordType, thatRecord, =]
[(, that, ., isRecordType, (, ), ), {, RecordType, thatRecord, =, that, ., toMaybeRecordType, (, ), ;, RecordTypeBuilder, builder, =]
[isRecordType, (, ), ), {, RecordType, thatRecord, =, that, ., toMaybeRecordType, (, ), ;, RecordTypeBuilder, builder, =, new, RecordTypeBuilder, (]
[), {, RecordType, thatRecord, =, that, ., toMaybeRecordType, (, ), ;, RecordTypeBuilder, builder, =, new, RecordTypeBuilder, (, registry, ), ;]
[), {, RecordType, thatRecord, =, that, ., toMaybeRecordType, (, ), ;, RecordTypeBuilder, builder, =, new, RecordTypeBuilder, (, registry, ), ;]
[=, that, ., toMaybeRecordType, (, ), ;, RecordTypeBuilder, builder, =, new, RecordTypeBuilder, (, registry, ), ;, builder, ., setSynthesized, (]
[builder, =, new, RecordTypeBuilder, (, registry, ), ;, builder, ., setSynthesized, (, true, ), ;, for, (, String, property, :]
[;, builder, ., setSynthesized, (, true, ), ;, for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (]
[;, builder, ., setSynthesized, (, true, ), ;, for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (]
[;, builder, ., setSynthesized, (, true, ), ;, for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (]
[(, true, ), ;, for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (, thatRecord, ., hasProperty, (]
[;, for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (, thatRecord, ., hasProperty, (, property, ), &&]
[for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (, thatRecord, ., hasProperty, (, property, ), &&, !]
[for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (, thatRecord, ., hasProperty, (, property, ), &&, !]
[for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (, thatRecord, ., hasProperty, (, property, ), &&, !]
[:, getOwnPropertyNames, (, ), ), {, if, (, thatRecord, ., hasProperty, (, property, ), &&, !, thatRecord, ., getPropertyType, (]
[{, if, (, thatRecord, ., hasProperty, (, property, ), &&, !, thatRecord, ., getPropertyType, (, property, ), ., isInvariant, (]
[(, thatRecord, ., hasProperty, (, property, ), &&, !, thatRecord, ., getPropertyType, (, property, ), ., isInvariant, (, getPropertyType, (]
[), &&, !, thatRecord, ., getPropertyType, (, property, ), ., isInvariant, (, getPropertyType, (, property, ), ), ), {, return]
[), &&, !, thatRecord, ., getPropertyType, (, property, ), ., isInvariant, (, getPropertyType, (, property, ), ), ), {, return]
[., getPropertyType, (, property, ), ., isInvariant, (, getPropertyType, (, property, ), ), ), {, return, registry, ., getNativeObjectType, (]
[., getPropertyType, (, property, ), ., isInvariant, (, getPropertyType, (, property, ), ), ), {, return, registry, ., getNativeObjectType, (]
[isInvariant, (, getPropertyType, (, property, ), ), ), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }]
[isInvariant, (, getPropertyType, (, property, ), ), ), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }]
[property, ), ), ), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }, builder, ., addProperty, (]
[), ), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }, builder, ., addProperty, (, property, ,]
[{, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }, builder, ., addProperty, (, property, ,, getPropertyType, (]
[., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }, builder, ., addProperty, (, property, ,, getPropertyType, (, property, ), ,]
[(, JSTypeNative, ., NO_TYPE, ), ;, }, builder, ., addProperty, (, property, ,, getPropertyType, (, property, ), ,, getPropertyNode, (]
[(, property, ,, getPropertyType, (, property, ), ,, getPropertyNode, (, property, ), ), ;, }, for, (, String, property, :]
[(, property, ,, getPropertyType, (, property, ), ,, getPropertyNode, (, property, ), ), ;, }, for, (, String, property, :]
[(, property, ), ), ;, }, for, (, String, property, :, thatRecord, ., getOwnPropertyNames, (, ), ), {, if, (]
[property, ), ), ;, }, for, (, String, property, :, thatRecord, ., getOwnPropertyNames, (, ), ), {, if, (, !]
[), ;, }, for, (, String, property, :, thatRecord, ., getOwnPropertyNames, (, ), ), {, if, (, !, hasProperty, (]
[(, String, property, :, thatRecord, ., getOwnPropertyNames, (, ), ), {, if, (, !, hasProperty, (, property, ), ), {]
[(, String, property, :, thatRecord, ., getOwnPropertyNames, (, ), ), {, if, (, !, hasProperty, (, property, ), ), {]
[thatRecord, ., getOwnPropertyNames, (, ), ), {, if, (, !, hasProperty, (, property, ), ), {, builder, ., addProperty, (]
[getOwnPropertyNames, (, ), ), {, if, (, !, hasProperty, (, property, ), ), {, builder, ., addProperty, (, property, ,]
[getOwnPropertyNames, (, ), ), {, if, (, !, hasProperty, (, property, ), ), {, builder, ., addProperty, (, property, ,]
[{, if, (, !, hasProperty, (, property, ), ), {, builder, ., addProperty, (, property, ,, thatRecord, ., getPropertyType, (]
[!, hasProperty, (, property, ), ), {, builder, ., addProperty, (, property, ,, thatRecord, ., getPropertyType, (, property, ), ,]
[!, hasProperty, (, property, ), ), {, builder, ., addProperty, (, property, ,, thatRecord, ., getPropertyType, (, property, ), ,]
[), ), {, builder, ., addProperty, (, property, ,, thatRecord, ., getPropertyType, (, property, ), ,, thatRecord, ., getPropertyNode, (]
[property, ,, thatRecord, ., getPropertyType, (, property, ), ,, thatRecord, ., getPropertyNode, (, property, ), ), ;, }, }, return]
[property, ,, thatRecord, ., getPropertyType, (, property, ), ,, thatRecord, ., getPropertyNode, (, property, ), ), ;, }, }, return]
[., getPropertyNode, (, property, ), ), ;, }, }, return, builder, ., build, (, ), ;, }, JSType, greatestSubtype, =]
[., getPropertyNode, (, property, ), ), ;, }, }, return, builder, ., build, (, ), ;, }, JSType, greatestSubtype, =]
[), ), ;, }, }, return, builder, ., build, (, ), ;, }, JSType, greatestSubtype, =, registry, ., getNativeType, (]
[), ), ;, }, }, return, builder, ., build, (, ), ;, }, JSType, greatestSubtype, =, registry, ., getNativeType, (]
[build, (, ), ;, }, JSType, greatestSubtype, =, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, JSType, thatRestrictedToObj, =]
[build, (, ), ;, }, JSType, greatestSubtype, =, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, JSType, thatRestrictedToObj, =]
[build, (, ), ;, }, JSType, greatestSubtype, =, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, JSType, thatRestrictedToObj, =]
[}, JSType, greatestSubtype, =, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, JSType, thatRestrictedToObj, =, registry, ., getNativeType, (]
[}, JSType, greatestSubtype, =, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, JSType, thatRestrictedToObj, =, registry, ., getNativeType, (]
[(, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, JSType, thatRestrictedToObj, =, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ., getGreatestSubtype, (]
[;, JSType, thatRestrictedToObj, =, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ., getGreatestSubtype, (, that, ), ;, if, (]
[JSType, thatRestrictedToObj, =, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ., getGreatestSubtype, (, that, ), ;, if, (, !]
[JSType, thatRestrictedToObj, =, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ., getGreatestSubtype, (, that, ), ;, if, (, !]
[getGreatestSubtype, (, that, ), ;, if, (, !, thatRestrictedToObj, ., isEmptyType, (, ), ), {, for, (, String, propName, :]
[thatRestrictedToObj, ., isEmptyType, (, ), ), {, for, (, String, propName, :, getOwnPropertyNames, (, ), ), {, JSType, propType, =]
[isEmptyType, (, ), ), {, for, (, String, propName, :, getOwnPropertyNames, (, ), ), {, JSType, propType, =, getPropertyType, (]
[(, String, propName, :, getOwnPropertyNames, (, ), ), {, JSType, propType, =, getPropertyType, (, propName, ), ;, UnionTypeBuilder, builder, =]
[:, getOwnPropertyNames, (, ), ), {, JSType, propType, =, getPropertyType, (, propName, ), ;, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (]
[=, getPropertyType, (, propName, ), ;, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, ObjectType, alt, :]
[=, getPropertyType, (, propName, ), ;, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, ObjectType, alt, :]
[), ;, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, ObjectType, alt, :, registry, ., getEachReferenceTypeWithProperty, (]
[(, registry, ), ;, for, (, ObjectType, alt, :, registry, ., getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =]
[(, registry, ), ;, for, (, ObjectType, alt, :, registry, ., getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =]
[for, (, ObjectType, alt, :, registry, ., getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =, alt, ., getPropertyType, (]
[registry, ., getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (]
[registry, ., getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (]
[registry, ., getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (]
[registry, ., getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (]
[registry, ., getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (]
[getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (, altPropType, !=]
[propName, ), ), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (, altPropType, !=, null, &&]
[), ), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (, altPropType, !=, null, &&, !]
[), ), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (, altPropType, !=, null, &&, !]
[altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (, altPropType, !=, null, &&, !, alt, ., isEquivalentTo, (]
[., getPropertyType, (, propName, ), ;, if, (, altPropType, !=, null, &&, !, alt, ., isEquivalentTo, (, this, ), &&]
[., getPropertyType, (, propName, ), ;, if, (, altPropType, !=, null, &&, !, alt, ., isEquivalentTo, (, this, ), &&]
[), ;, if, (, altPropType, !=, null, &&, !, alt, ., isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (]
[(, altPropType, !=, null, &&, !, alt, ., isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (, that, ), &&]
[(, altPropType, !=, null, &&, !, alt, ., isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (, that, ), &&]
[&&, !, alt, ., isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (, that, ), &&, propType, ., isInvariant, (]
[isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (, that, ), &&, propType, ., isInvariant, (, altPropType, ), ), {]
[isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (, that, ), &&, propType, ., isInvariant, (, altPropType, ), ), {]
[&&, alt, ., isSubtype, (, that, ), &&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (]
[that, ), &&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }]
[&&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, greatestSubtype, =]
[&&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, greatestSubtype, =]
[(, altPropType, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, greatestSubtype, =, greatestSubtype, ., getLeastSupertype, (]
[(, altPropType, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, greatestSubtype, =, greatestSubtype, ., getLeastSupertype, (]
[), ;, }, }, greatestSubtype, =, greatestSubtype, ., getLeastSupertype, (, builder, ., build, (, ), ), ;, }, }, return]
[., build, (, ), ), ;, }, }, return, greatestSubtype, ;, }, @, Override, RecordType, toMaybeRecordType, (, ), {, return]
[toMaybeRecordType, (, ), {, return, this, ;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (]
[toMaybeRecordType, (, ), {, return, this, ;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (]
[return, this, ;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (, JSType, ., isSubtypeHelper, (]
[;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (, JSType, ., isSubtypeHelper, (, this, ,]
[boolean, isSubtype, (, JSType, that, ), {, if, (, JSType, ., isSubtypeHelper, (, this, ,, that, ), ), {, return]
[), {, if, (, JSType, ., isSubtypeHelper, (, this, ,, that, ), ), {, return, true, ;, }, if, (]
[), {, if, (, JSType, ., isSubtypeHelper, (, this, ,, that, ), ), {, return, true, ;, }, if, (]
[), {, if, (, JSType, ., isSubtypeHelper, (, this, ,, that, ), ), {, return, true, ;, }, if, (]
[JSType, ., isSubtypeHelper, (, this, ,, that, ), ), {, return, true, ;, }, if, (, registry, ., getNativeObjectType, (]
[JSType, ., isSubtypeHelper, (, this, ,, that, ), ), {, return, true, ;, }, if, (, registry, ., getNativeObjectType, (]
[), ), {, return, true, ;, }, if, (, registry, ., getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), ., isSubtype, (]
[;, }, if, (, registry, ., getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), ., isSubtype, (, that, ), ), {, return]
[., getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), ., isSubtype, (, that, ), ), {, return, true, ;, }, if, (]
[getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), ., isSubtype, (, that, ), ), {, return, true, ;, }, if, (, !]
[getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), ., isSubtype, (, that, ), ), {, return, true, ;, }, if, (, !]
[(, that, ), ), {, return, true, ;, }, if, (, !, that, ., isRecordType, (, ), ), {, return]
[{, return, true, ;, }, if, (, !, that, ., isRecordType, (, ), ), {, return, false, ;, }, return]
[{, return, true, ;, }, if, (, !, that, ., isRecordType, (, ), ), {, return, false, ;, }, return]
[}, if, (, !, that, ., isRecordType, (, ), ), {, return, false, ;, }, return, RecordType, ., isSubtype, (]
[(, !, that, ., isRecordType, (, ), ), {, return, false, ;, }, return, RecordType, ., isSubtype, (, this, ,]
[(, !, that, ., isRecordType, (, ), ), {, return, false, ;, }, return, RecordType, ., isSubtype, (, this, ,]
[), ), ;, }, static, boolean, isSubtype, (, ObjectType, typeA, ,, RecordType, typeB, ), {, for, (, String, property, :]
[), ), ;, }, static, boolean, isSubtype, (, ObjectType, typeA, ,, RecordType, typeB, ), {, for, (, String, property, :]
[typeA, ,, RecordType, typeB, ), {, for, (, String, property, :, typeB, ., getOwnPropertyNames, (, ), ), {, if, (]
[,, RecordType, typeB, ), {, for, (, String, property, :, typeB, ., getOwnPropertyNames, (, ), ), {, if, (, !]
[,, RecordType, typeB, ), {, for, (, String, property, :, typeB, ., getOwnPropertyNames, (, ), ), {, if, (, !]
[{, for, (, String, property, :, typeB, ., getOwnPropertyNames, (, ), ), {, if, (, !, typeA, ., hasProperty, (]
[:, typeB, ., getOwnPropertyNames, (, ), ), {, if, (, !, typeA, ., hasProperty, (, property, ), ), {, return]
[), {, if, (, !, typeA, ., hasProperty, (, property, ), ), {, return, false, ;, }, JSType, propA, =]
[), {, if, (, !, typeA, ., hasProperty, (, property, ), ), {, return, false, ;, }, JSType, propA, =]
[!, typeA, ., hasProperty, (, property, ), ), {, return, false, ;, }, JSType, propA, =, typeA, ., getPropertyType, (]
[), ), {, return, false, ;, }, JSType, propA, =, typeA, ., getPropertyType, (, property, ), ;, JSType, propB, =]
[), ), {, return, false, ;, }, JSType, propA, =, typeA, ., getPropertyType, (, property, ), ;, JSType, propB, =]
[false, ;, }, JSType, propA, =, typeA, ., getPropertyType, (, property, ), ;, JSType, propB, =, typeB, ., getPropertyType, (]
[=, typeA, ., getPropertyType, (, property, ), ;, JSType, propB, =, typeB, ., getPropertyType, (, property, ), ;, if, (]
[=, typeA, ., getPropertyType, (, property, ), ;, JSType, propB, =, typeB, ., getPropertyType, (, property, ), ;, if, (]
[(, property, ), ;, JSType, propB, =, typeB, ., getPropertyType, (, property, ), ;, if, (, typeA, ., isPropertyTypeDeclared, (]
[=, typeB, ., getPropertyType, (, property, ), ;, if, (, typeA, ., isPropertyTypeDeclared, (, property, ), ), {, if, (]
[typeB, ., getPropertyType, (, property, ), ;, if, (, typeA, ., isPropertyTypeDeclared, (, property, ), ), {, if, (, !]
[typeB, ., getPropertyType, (, property, ), ;, if, (, typeA, ., isPropertyTypeDeclared, (, property, ), ), {, if, (, !]
[property, ), ;, if, (, typeA, ., isPropertyTypeDeclared, (, property, ), ), {, if, (, !, propA, ., isInvariant, (]
[typeA, ., isPropertyTypeDeclared, (, property, ), ), {, if, (, !, propA, ., isInvariant, (, propB, ), ), {, return]
[if, (, !, propA, ., isInvariant, (, propB, ), ), {, return, false, ;, }, }, else, {, if, (]
[(, !, propA, ., isInvariant, (, propB, ), ), {, return, false, ;, }, }, else, {, if, (, !]
[(, !, propA, ., isInvariant, (, propB, ), ), {, return, false, ;, }, }, else, {, if, (, !]
[isInvariant, (, propB, ), ), {, return, false, ;, }, }, else, {, if, (, !, propA, ., isSubtype, (]
[{, return, false, ;, }, }, else, {, if, (, !, propA, ., isSubtype, (, propB, ), ), {, return]
[else, {, if, (, !, propA, ., isSubtype, (, propB, ), ), {, return, false, ;, }, }, }, return]
