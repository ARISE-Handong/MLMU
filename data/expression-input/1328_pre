[String, message, ,, Node, n, ), ;, }, private, final, ViolationHandler, violationHandler, ;, public, AstValidator, (, ViolationHandler, handler, ), {]
[String, message, ,, Node, n, ), ;, }, private, final, ViolationHandler, violationHandler, ;, public, AstValidator, (, ViolationHandler, handler, ), {]
[n, ), ;, }, private, final, ViolationHandler, violationHandler, ;, public, AstValidator, (, ViolationHandler, handler, ), {, this, ., violationHandler, =]
[;, public, AstValidator, (, ViolationHandler, handler, ), {, this, ., violationHandler, =, handler, ;, }, public, AstValidator, (, ), {]
[;, public, AstValidator, (, ViolationHandler, handler, ), {, this, ., violationHandler, =, handler, ;, }, public, AstValidator, (, ), {]
[ViolationHandler, handler, ), {, this, ., violationHandler, =, handler, ;, }, public, AstValidator, (, ), {, this, ., violationHandler, =]
[=, new, ViolationHandler, (, ), {, @, Override, public, void, handleViolation, (, String, message, ,, Node, n, ), {, throw]
[(, ), {, @, Override, public, void, handleViolation, (, String, message, ,, Node, n, ), {, throw, new, IllegalStateException, (]
[(, ), {, @, Override, public, void, handleViolation, (, String, message, ,, Node, n, ), {, throw, new, IllegalStateException, (]
[(, ), {, @, Override, public, void, handleViolation, (, String, message, ,, Node, n, ), {, throw, new, IllegalStateException, (]
[{, @, Override, public, void, handleViolation, (, String, message, ,, Node, n, ), {, throw, new, IllegalStateException, (, message, +]
[Override, public, void, handleViolation, (, String, message, ,, Node, n, ), {, throw, new, IllegalStateException, (, message, +, " Reference node ", +]
[Override, public, void, handleViolation, (, String, message, ,, Node, n, ), {, throw, new, IllegalStateException, (, message, +, " Reference node ", +]
[;, }, }, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[;, }, }, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[}, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, externs, !=]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, externs, !=, null, ), {]
[public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, externs, !=, null, ), {, validateCodeRoot, (]
[,, Node, root, ), {, if, (, externs, !=, null, ), {, validateCodeRoot, (, externs, ), ;, }, if, (]
[,, Node, root, ), {, if, (, externs, !=, null, ), {, validateCodeRoot, (, externs, ), ;, }, if, (]
[root, ), {, if, (, externs, !=, null, ), {, validateCodeRoot, (, externs, ), ;, }, if, (, root, !=]
[if, (, externs, !=, null, ), {, validateCodeRoot, (, externs, ), ;, }, if, (, root, !=, null, ), {]
[externs, !=, null, ), {, validateCodeRoot, (, externs, ), ;, }, if, (, root, !=, null, ), {, validateCodeRoot, (]
[root, !=, null, ), {, validateCodeRoot, (, root, ), ;, }, }, public, void, validateRoot, (, Node, n, ), {]
[null, ), {, validateCodeRoot, (, root, ), ;, }, }, public, void, validateRoot, (, Node, n, ), {, validateNodeType, (]
[null, ), {, validateCodeRoot, (, root, ), ;, }, }, public, void, validateRoot, (, Node, n, ), {, validateNodeType, (]
[(, root, ), ;, }, }, public, void, validateRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,]
[;, }, }, public, void, validateRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;]
[}, public, void, validateRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic, (]
[validateRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;]
[Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, validateChildCount, (]
[), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, validateChildCount, (, n, ,]
[(, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, validateChildCount, (, n, ,, 2, ), ;]
[., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateCodeRoot, (]
[., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateCodeRoot, (]
[(, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateCodeRoot, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateCodeRoot, (, n, ., getFirstChild, (, ), ), ;, validateCodeRoot, (]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateCodeRoot, (, n, ., getFirstChild, (, ), ), ;, validateCodeRoot, (]
[), ;, validateCodeRoot, (, n, ., getLastChild, (, ), ), ;, }, public, void, validateCodeRoot, (, Node, n, ), {]
[validateCodeRoot, (, n, ., getLastChild, (, ), ), ;, }, public, void, validateCodeRoot, (, Node, n, ), {, validateNodeType, (]
[validateCodeRoot, (, n, ., getLastChild, (, ), ), ;, }, public, void, validateCodeRoot, (, Node, n, ), {, validateNodeType, (]
[getLastChild, (, ), ), ;, }, public, void, validateCodeRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,]
[), ;, }, public, void, validateCodeRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;]
[}, public, void, validateCodeRoot, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic, (]
[{, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =]
[{, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =]
[,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateScript, (]
[getNext, (, ), ), {, validateScript, (, c, ), ;, }, }, public, void, validateScript, (, Node, n, ), {]
[), ), {, validateScript, (, c, ), ;, }, }, public, void, validateScript, (, Node, n, ), {, validateNodeType, (]
[), ), {, validateScript, (, c, ), ;, }, }, public, void, validateScript, (, Node, n, ), {, validateNodeType, (]
[(, c, ), ;, }, }, public, void, validateScript, (, Node, n, ), {, validateNodeType, (, Token, ., SCRIPT, ,]
[;, }, }, public, void, validateScript, (, Node, n, ), {, validateNodeType, (, Token, ., SCRIPT, ,, n, ), ;]
[}, public, void, validateScript, (, Node, n, ), {, validateNodeType, (, Token, ., SCRIPT, ,, n, ), ;, validateHasSourceName, (]
[validateScript, (, Node, n, ), {, validateNodeType, (, Token, ., SCRIPT, ,, n, ), ;, validateHasSourceName, (, n, ), ;]
[Node, n, ), {, validateNodeType, (, Token, ., SCRIPT, ,, n, ), ;, validateHasSourceName, (, n, ), ;, validateHasInputId, (]
[SCRIPT, ,, n, ), ;, validateHasSourceName, (, n, ), ;, validateHasInputId, (, n, ), ;, for, (, Node, c, =]
[SCRIPT, ,, n, ), ;, validateHasSourceName, (, n, ), ;, validateHasInputId, (, n, ), ;, for, (, Node, c, =]
[(, n, ), ;, validateHasInputId, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[(, n, ), ;, validateHasInputId, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[), ;, validateHasInputId, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[validateHasInputId, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (]
[), ), {, validateStatement, (, c, ), ;, }, }, public, void, validateStatement, (, Node, n, ), {, switch, (]
[), ), {, validateStatement, (, c, ), ;, }, }, public, void, validateStatement, (, Node, n, ), {, switch, (]
[}, }, public, void, validateStatement, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[}, }, public, void, validateStatement, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[validateStatement, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., LABEL, :]
[Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., LABEL, :, validateLabel, (]
[n, ., getType, (, ), ), {, case, Token, ., LABEL, :, validateLabel, (, n, ), ;, return, ;, case]
[n, ., getType, (, ), ), {, case, Token, ., LABEL, :, validateLabel, (, n, ), ;, return, ;, case]
[), ), {, case, Token, ., LABEL, :, validateLabel, (, n, ), ;, return, ;, case, Token, ., BLOCK, :]
[{, case, Token, ., LABEL, :, validateLabel, (, n, ), ;, return, ;, case, Token, ., BLOCK, :, validateBlock, (]
[validateLabel, (, n, ), ;, return, ;, case, Token, ., BLOCK, :, validateBlock, (, n, ), ;, return, ;, case]
[validateLabel, (, n, ), ;, return, ;, case, Token, ., BLOCK, :, validateBlock, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., BLOCK, :, validateBlock, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :]
[;, case, Token, ., BLOCK, :, validateBlock, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionStatement, (]
[validateBlock, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionStatement, (, n, ), ;, return, ;, case]
[validateBlock, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionStatement, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., FUNCTION, :, validateFunctionStatement, (, n, ), ;, return, ;, case, Token, ., WITH, :]
[;, case, Token, ., FUNCTION, :, validateFunctionStatement, (, n, ), ;, return, ;, case, Token, ., WITH, :, validateWith, (]
[validateFunctionStatement, (, n, ), ;, return, ;, case, Token, ., WITH, :, validateWith, (, n, ), ;, return, ;, case]
[validateFunctionStatement, (, n, ), ;, return, ;, case, Token, ., WITH, :, validateWith, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., WITH, :, validateWith, (, n, ), ;, return, ;, case, Token, ., FOR, :]
[;, case, Token, ., WITH, :, validateWith, (, n, ), ;, return, ;, case, Token, ., FOR, :, validateFor, (]
[validateWith, (, n, ), ;, return, ;, case, Token, ., FOR, :, validateFor, (, n, ), ;, return, ;, case]
[validateWith, (, n, ), ;, return, ;, case, Token, ., FOR, :, validateFor, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., FOR, :, validateFor, (, n, ), ;, return, ;, case, Token, ., WHILE, :]
[;, case, Token, ., FOR, :, validateFor, (, n, ), ;, return, ;, case, Token, ., WHILE, :, validateWhile, (]
[validateFor, (, n, ), ;, return, ;, case, Token, ., WHILE, :, validateWhile, (, n, ), ;, return, ;, case]
[validateFor, (, n, ), ;, return, ;, case, Token, ., WHILE, :, validateWhile, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., WHILE, :, validateWhile, (, n, ), ;, return, ;, case, Token, ., DO, :]
[;, case, Token, ., WHILE, :, validateWhile, (, n, ), ;, return, ;, case, Token, ., DO, :, validateDo, (]
[validateWhile, (, n, ), ;, return, ;, case, Token, ., DO, :, validateDo, (, n, ), ;, return, ;, case]
[validateWhile, (, n, ), ;, return, ;, case, Token, ., DO, :, validateDo, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., DO, :, validateDo, (, n, ), ;, return, ;, case, Token, ., SWITCH, :]
[;, case, Token, ., DO, :, validateDo, (, n, ), ;, return, ;, case, Token, ., SWITCH, :, validateSwitch, (]
[validateDo, (, n, ), ;, return, ;, case, Token, ., SWITCH, :, validateSwitch, (, n, ), ;, return, ;, case]
[validateDo, (, n, ), ;, return, ;, case, Token, ., SWITCH, :, validateSwitch, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., SWITCH, :, validateSwitch, (, n, ), ;, return, ;, case, Token, ., IF, :]
[;, case, Token, ., SWITCH, :, validateSwitch, (, n, ), ;, return, ;, case, Token, ., IF, :, validateIf, (]
[validateSwitch, (, n, ), ;, return, ;, case, Token, ., IF, :, validateIf, (, n, ), ;, return, ;, case]
[validateSwitch, (, n, ), ;, return, ;, case, Token, ., IF, :, validateIf, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., IF, :, validateIf, (, n, ), ;, return, ;, case, Token, ., VAR, :]
[;, case, Token, ., IF, :, validateIf, (, n, ), ;, return, ;, case, Token, ., VAR, :, validateVar, (]
[validateIf, (, n, ), ;, return, ;, case, Token, ., VAR, :, validateVar, (, n, ), ;, return, ;, case]
[validateIf, (, n, ), ;, return, ;, case, Token, ., VAR, :, validateVar, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., VAR, :, validateVar, (, n, ), ;, return, ;, case, Token, ., EXPR_RESULT, :]
[;, case, Token, ., VAR, :, validateVar, (, n, ), ;, return, ;, case, Token, ., EXPR_RESULT, :, validateExprStmt, (]
[validateVar, (, n, ), ;, return, ;, case, Token, ., EXPR_RESULT, :, validateExprStmt, (, n, ), ;, return, ;, case]
[validateVar, (, n, ), ;, return, ;, case, Token, ., EXPR_RESULT, :, validateExprStmt, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., EXPR_RESULT, :, validateExprStmt, (, n, ), ;, return, ;, case, Token, ., RETURN, :]
[;, case, Token, ., EXPR_RESULT, :, validateExprStmt, (, n, ), ;, return, ;, case, Token, ., RETURN, :, validateReturn, (]
[validateExprStmt, (, n, ), ;, return, ;, case, Token, ., RETURN, :, validateReturn, (, n, ), ;, return, ;, case]
[validateExprStmt, (, n, ), ;, return, ;, case, Token, ., RETURN, :, validateReturn, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., RETURN, :, validateReturn, (, n, ), ;, return, ;, case, Token, ., THROW, :]
[;, case, Token, ., RETURN, :, validateReturn, (, n, ), ;, return, ;, case, Token, ., THROW, :, validateThrow, (]
[validateReturn, (, n, ), ;, return, ;, case, Token, ., THROW, :, validateThrow, (, n, ), ;, return, ;, case]
[validateReturn, (, n, ), ;, return, ;, case, Token, ., THROW, :, validateThrow, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., THROW, :, validateThrow, (, n, ), ;, return, ;, case, Token, ., TRY, :]
[;, case, Token, ., THROW, :, validateThrow, (, n, ), ;, return, ;, case, Token, ., TRY, :, validateTry, (]
[validateThrow, (, n, ), ;, return, ;, case, Token, ., TRY, :, validateTry, (, n, ), ;, return, ;, case]
[validateThrow, (, n, ), ;, return, ;, case, Token, ., TRY, :, validateTry, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., TRY, :, validateTry, (, n, ), ;, return, ;, case, Token, ., BREAK, :]
[;, case, Token, ., TRY, :, validateTry, (, n, ), ;, return, ;, case, Token, ., BREAK, :, validateBreak, (]
[validateTry, (, n, ), ;, return, ;, case, Token, ., BREAK, :, validateBreak, (, n, ), ;, return, ;, case]
[validateTry, (, n, ), ;, return, ;, case, Token, ., BREAK, :, validateBreak, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., BREAK, :, validateBreak, (, n, ), ;, return, ;, case, Token, ., CONTINUE, :]
[;, case, Token, ., BREAK, :, validateBreak, (, n, ), ;, return, ;, case, Token, ., CONTINUE, :, validateContinue, (]
[validateBreak, (, n, ), ;, return, ;, case, Token, ., CONTINUE, :, validateContinue, (, n, ), ;, return, ;, case]
[validateBreak, (, n, ), ;, return, ;, case, Token, ., CONTINUE, :, validateContinue, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., CONTINUE, :, validateContinue, (, n, ), ;, return, ;, case, Token, ., EMPTY, :]
[;, case, Token, ., CONTINUE, :, validateContinue, (, n, ), ;, return, ;, case, Token, ., EMPTY, :, validateChildless, (]
[validateContinue, (, n, ), ;, return, ;, case, Token, ., EMPTY, :, validateChildless, (, n, ), ;, return, ;, case]
[validateContinue, (, n, ), ;, return, ;, case, Token, ., EMPTY, :, validateChildless, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., EMPTY, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DEBUGGER, :]
[;, case, Token, ., EMPTY, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DEBUGGER, :, validateChildless, (]
[(, n, ), ;, return, ;, case, Token, ., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;, default, :]
[), ;, return, ;, case, Token, ., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;, default, :, violation, (]
[), ;, return, ;, case, Token, ., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;, default, :, violation, (]
[), ;, return, ;, case, Token, ., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;, default, :, violation, (]
[return, ;, case, Token, ., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;, default, :, violation, (, "Expected statement but was ", +]
[return, ;, case, Token, ., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;, default, :, violation, (, "Expected statement but was ", +]
[., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;, default, :, violation, (, "Expected statement but was ", +, Token, ., name, (]
[., DEBUGGER, :, validateChildless, (, n, ), ;, return, ;, default, :, violation, (, "Expected statement but was ", +, Token, ., name, (]
[;, return, ;, default, :, violation, (, "Expected statement but was ", +, Token, ., name, (, n, ., getType, (, ), ), +]
[;, default, :, violation, (, "Expected statement but was ", +, Token, ., name, (, n, ., getType, (, ), ), +, ".", ,]
[), ), +, ".", ,, n, ), ;, }, }, public, void, validateExpression, (, Node, n, ), {, switch, (]
[), ), +, ".", ,, n, ), ;, }, }, public, void, validateExpression, (, Node, n, ), {, switch, (]
[}, }, public, void, validateExpression, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[}, }, public, void, validateExpression, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[(, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FALSE, :, case]
[(, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FALSE, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., FALSE, :, case, Token, ., NULL, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., FALSE, :, case, Token, ., NULL, :, case]
[(, ), ), {, case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case]
[(, ), ), {, case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case]
[case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :]
[., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, validateChildless, (]
[NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, validateChildless, (, n, ), ;, return, ;, case]
[NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, validateChildless, (, n, ), ;, return, ;, case]
[THIS, :, case, Token, ., TRUE, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DELPROP, :, case]
[THIS, :, case, Token, ., TRUE, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DELPROP, :, case]
[TRUE, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DELPROP, :, case, Token, ., POS, :, case]
[TRUE, :, validateChildless, (, n, ), ;, return, ;, case, Token, ., DELPROP, :, case, Token, ., POS, :, case]
[), ;, return, ;, case, Token, ., DELPROP, :, case, Token, ., POS, :, case, Token, ., NEG, :, case]
[), ;, return, ;, case, Token, ., DELPROP, :, case, Token, ., POS, :, case, Token, ., NEG, :, case]
[Token, ., DELPROP, :, case, Token, ., POS, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case]
[Token, ., DELPROP, :, case, Token, ., POS, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case]
[Token, ., POS, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., INC, :, case]
[Token, ., POS, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., INC, :, case]
[Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., INC, :, case, Token, ., DEC, :, case]
[Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., INC, :, case, Token, ., DEC, :, case]
[Token, ., NOT, :, case, Token, ., INC, :, case, Token, ., DEC, :, case, Token, ., TYPEOF, :, case]
[Token, ., NOT, :, case, Token, ., INC, :, case, Token, ., DEC, :, case, Token, ., TYPEOF, :, case]
[Token, ., INC, :, case, Token, ., DEC, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case]
[Token, ., INC, :, case, Token, ., DEC, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case]
[Token, ., DEC, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., BITNOT, :, case]
[Token, ., DEC, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., BITNOT, :, case]
[case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., BITNOT, :, case, Token, ., CAST, :]
[., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., BITNOT, :, case, Token, ., CAST, :, validateUnaryOp, (]
[VOID, :, case, Token, ., BITNOT, :, case, Token, ., CAST, :, validateUnaryOp, (, n, ), ;, return, ;, case]
[VOID, :, case, Token, ., BITNOT, :, case, Token, ., CAST, :, validateUnaryOp, (, n, ), ;, return, ;, case]
[BITNOT, :, case, Token, ., CAST, :, validateUnaryOp, (, n, ), ;, return, ;, case, Token, ., COMMA, :, case]
[BITNOT, :, case, Token, ., CAST, :, validateUnaryOp, (, n, ), ;, return, ;, case, Token, ., COMMA, :, case]
[CAST, :, validateUnaryOp, (, n, ), ;, return, ;, case, Token, ., COMMA, :, case, Token, ., OR, :, case]
[CAST, :, validateUnaryOp, (, n, ), ;, return, ;, case, Token, ., COMMA, :, case, Token, ., OR, :, case]
[), ;, return, ;, case, Token, ., COMMA, :, case, Token, ., OR, :, case, Token, ., AND, :, case]
[), ;, return, ;, case, Token, ., COMMA, :, case, Token, ., OR, :, case, Token, ., AND, :, case]
[Token, ., COMMA, :, case, Token, ., OR, :, case, Token, ., AND, :, case, Token, ., BITOR, :, case]
[Token, ., COMMA, :, case, Token, ., OR, :, case, Token, ., AND, :, case, Token, ., BITOR, :, case]
[Token, ., OR, :, case, Token, ., AND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case]
[Token, ., OR, :, case, Token, ., AND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case]
[Token, ., AND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case]
[Token, ., AND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case]
[Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., EQ, :, case]
[Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., EQ, :, case]
[Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., EQ, :, case, Token, ., NE, :, case]
[Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., EQ, :, case, Token, ., NE, :, case]
[Token, ., BITAND, :, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case]
[Token, ., BITAND, :, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case]
[Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case]
[Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case]
[Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., LT, :, case]
[Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., LT, :, case]
[Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., LT, :, case, Token, ., GT, :, case]
[Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., LT, :, case, Token, ., GT, :, case]
[Token, ., SHNE, :, case, Token, ., LT, :, case, Token, ., GT, :, case, Token, ., LE, :, case]
[Token, ., SHNE, :, case, Token, ., LT, :, case, Token, ., GT, :, case, Token, ., LE, :, case]
[Token, ., LT, :, case, Token, ., GT, :, case, Token, ., LE, :, case, Token, ., GE, :, case]
[Token, ., LT, :, case, Token, ., GT, :, case, Token, ., LE, :, case, Token, ., GE, :, case]
[Token, ., GT, :, case, Token, ., LE, :, case, Token, ., GE, :, case, Token, ., INSTANCEOF, :, case]
[Token, ., GT, :, case, Token, ., LE, :, case, Token, ., GE, :, case, Token, ., INSTANCEOF, :, case]
[Token, ., LE, :, case, Token, ., GE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, case]
[Token, ., LE, :, case, Token, ., GE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, case]
[Token, ., GE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, case, Token, ., LSH, :, case]
[Token, ., GE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, case, Token, ., LSH, :, case]
[Token, ., INSTANCEOF, :, case, Token, ., IN, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case]
[Token, ., INSTANCEOF, :, case, Token, ., IN, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case]
[Token, ., IN, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case]
[Token, ., IN, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case]
[Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., SUB, :, case]
[Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., SUB, :, case]
[Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case]
[Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case]
[Token, ., URSH, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, case]
[Token, ., URSH, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, case]
[Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, case, Token, ., MOD, :, case]
[Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, case, Token, ., MOD, :, case]
[case, Token, ., ADD, :, case, Token, ., MUL, :, case, Token, ., MOD, :, case, Token, ., DIV, :]
[., ADD, :, case, Token, ., MUL, :, case, Token, ., MOD, :, case, Token, ., DIV, :, validateBinaryOp, (]
[MUL, :, case, Token, ., MOD, :, case, Token, ., DIV, :, validateBinaryOp, (, n, ), ;, return, ;, case]
[MUL, :, case, Token, ., MOD, :, case, Token, ., DIV, :, validateBinaryOp, (, n, ), ;, return, ;, case]
[MOD, :, case, Token, ., DIV, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., ASSIGN, :, case]
[MOD, :, case, Token, ., DIV, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., ASSIGN, :, case]
[DIV, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case]
[DIV, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case]
[), ;, return, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[), ;, return, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case]
[case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :]
[., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, validateAssignmentExpression, (]
[ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, validateAssignmentExpression, (, n, ), ;, return, ;, case]
[ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, validateAssignmentExpression, (, n, ), ;, return, ;, case]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, validateAssignmentExpression, (, n, ), ;, return, ;, case, Token, ., HOOK, :]
[:, case, Token, ., ASSIGN_MOD, :, validateAssignmentExpression, (, n, ), ;, return, ;, case, Token, ., HOOK, :, validateTrinaryOp, (]
[validateAssignmentExpression, (, n, ), ;, return, ;, case, Token, ., HOOK, :, validateTrinaryOp, (, n, ), ;, return, ;, case]
[validateAssignmentExpression, (, n, ), ;, return, ;, case, Token, ., HOOK, :, validateTrinaryOp, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., HOOK, :, validateTrinaryOp, (, n, ), ;, return, ;, case, Token, ., STRING, :]
[;, case, Token, ., HOOK, :, validateTrinaryOp, (, n, ), ;, return, ;, case, Token, ., STRING, :, validateString, (]
[validateTrinaryOp, (, n, ), ;, return, ;, case, Token, ., STRING, :, validateString, (, n, ), ;, return, ;, case]
[validateTrinaryOp, (, n, ), ;, return, ;, case, Token, ., STRING, :, validateString, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., STRING, :, validateString, (, n, ), ;, return, ;, case, Token, ., NUMBER, :]
[;, case, Token, ., STRING, :, validateString, (, n, ), ;, return, ;, case, Token, ., NUMBER, :, validateNumber, (]
[validateString, (, n, ), ;, return, ;, case, Token, ., NUMBER, :, validateNumber, (, n, ), ;, return, ;, case]
[validateString, (, n, ), ;, return, ;, case, Token, ., NUMBER, :, validateNumber, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., NUMBER, :, validateNumber, (, n, ), ;, return, ;, case, Token, ., NAME, :]
[;, case, Token, ., NUMBER, :, validateNumber, (, n, ), ;, return, ;, case, Token, ., NAME, :, validateName, (]
[validateNumber, (, n, ), ;, return, ;, case, Token, ., NAME, :, validateName, (, n, ), ;, return, ;, case]
[validateNumber, (, n, ), ;, return, ;, case, Token, ., NAME, :, validateName, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., NAME, :, validateName, (, n, ), ;, return, ;, case, Token, ., GETELEM, :]
[;, case, Token, ., NAME, :, validateName, (, n, ), ;, return, ;, case, Token, ., GETELEM, :, validateBinaryOp, (]
[validateName, (, n, ), ;, return, ;, case, Token, ., GETELEM, :, validateBinaryOp, (, n, ), ;, return, ;, case]
[validateName, (, n, ), ;, return, ;, case, Token, ., GETELEM, :, validateBinaryOp, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., GETELEM, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., GETPROP, :]
[;, case, Token, ., GETELEM, :, validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., GETPROP, :, validateGetProp, (]
[validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., GETPROP, :, validateGetProp, (, n, ), ;, return, ;, case]
[validateBinaryOp, (, n, ), ;, return, ;, case, Token, ., GETPROP, :, validateGetProp, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., GETPROP, :, validateGetProp, (, n, ), ;, return, ;, case, Token, ., ARRAYLIT, :]
[;, case, Token, ., GETPROP, :, validateGetProp, (, n, ), ;, return, ;, case, Token, ., ARRAYLIT, :, validateArrayLit, (]
[validateGetProp, (, n, ), ;, return, ;, case, Token, ., ARRAYLIT, :, validateArrayLit, (, n, ), ;, return, ;, case]
[validateGetProp, (, n, ), ;, return, ;, case, Token, ., ARRAYLIT, :, validateArrayLit, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., ARRAYLIT, :, validateArrayLit, (, n, ), ;, return, ;, case, Token, ., OBJECTLIT, :]
[;, case, Token, ., ARRAYLIT, :, validateArrayLit, (, n, ), ;, return, ;, case, Token, ., OBJECTLIT, :, validateObjectLit, (]
[validateArrayLit, (, n, ), ;, return, ;, case, Token, ., OBJECTLIT, :, validateObjectLit, (, n, ), ;, return, ;, case]
[validateArrayLit, (, n, ), ;, return, ;, case, Token, ., OBJECTLIT, :, validateObjectLit, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., OBJECTLIT, :, validateObjectLit, (, n, ), ;, return, ;, case, Token, ., REGEXP, :]
[;, case, Token, ., OBJECTLIT, :, validateObjectLit, (, n, ), ;, return, ;, case, Token, ., REGEXP, :, validateRegExpLit, (]
[validateObjectLit, (, n, ), ;, return, ;, case, Token, ., REGEXP, :, validateRegExpLit, (, n, ), ;, return, ;, case]
[validateObjectLit, (, n, ), ;, return, ;, case, Token, ., REGEXP, :, validateRegExpLit, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., REGEXP, :, validateRegExpLit, (, n, ), ;, return, ;, case, Token, ., CALL, :]
[;, case, Token, ., REGEXP, :, validateRegExpLit, (, n, ), ;, return, ;, case, Token, ., CALL, :, validateCall, (]
[validateRegExpLit, (, n, ), ;, return, ;, case, Token, ., CALL, :, validateCall, (, n, ), ;, return, ;, case]
[validateRegExpLit, (, n, ), ;, return, ;, case, Token, ., CALL, :, validateCall, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., CALL, :, validateCall, (, n, ), ;, return, ;, case, Token, ., NEW, :]
[;, case, Token, ., CALL, :, validateCall, (, n, ), ;, return, ;, case, Token, ., NEW, :, validateNew, (]
[validateCall, (, n, ), ;, return, ;, case, Token, ., NEW, :, validateNew, (, n, ), ;, return, ;, case]
[validateCall, (, n, ), ;, return, ;, case, Token, ., NEW, :, validateNew, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., NEW, :, validateNew, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :]
[;, case, Token, ., NEW, :, validateNew, (, n, ), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionExpression, (]
[(, n, ), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionExpression, (, n, ), ;, return, ;, default, :]
[), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionExpression, (, n, ), ;, return, ;, default, :, violation, (]
[), ;, return, ;, case, Token, ., FUNCTION, :, validateFunctionExpression, (, n, ), ;, return, ;, default, :, violation, (]
[return, ;, case, Token, ., FUNCTION, :, validateFunctionExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected expression but was ", +]
[return, ;, case, Token, ., FUNCTION, :, validateFunctionExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected expression but was ", +]
[., FUNCTION, :, validateFunctionExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected expression but was ", +, Token, ., name, (]
[., FUNCTION, :, validateFunctionExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected expression but was ", +, Token, ., name, (]
[;, return, ;, default, :, violation, (, "Expected expression but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,]
[n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateBlock, (, Node, n, ), {]
[getType, (, ), ), ,, n, ), ;, }, }, private, void, validateBlock, (, Node, n, ), {, validateNodeType, (]
[getType, (, ), ), ,, n, ), ;, }, }, private, void, validateBlock, (, Node, n, ), {, validateNodeType, (]
[,, n, ), ;, }, }, private, void, validateBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,]
[validateBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, for, (, Node, c, =]
[validateBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, for, (, Node, c, =]
[validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[Token, ., BLOCK, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[BLOCK, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (]
[getNext, (, ), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateSyntheticBlock, (, Node, n, ), {]
[), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateSyntheticBlock, (, Node, n, ), {, validateNodeType, (]
[), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateSyntheticBlock, (, Node, n, ), {, validateNodeType, (]
[(, c, ), ;, }, }, private, void, validateSyntheticBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,]
[;, }, }, private, void, validateSyntheticBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;]
[}, private, void, validateSyntheticBlock, (, Node, n, ), {, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic, (]
[{, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =]
[{, validateNodeType, (, Token, ., BLOCK, ,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =]
[,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[,, n, ), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[), ;, validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[validateIsSynthetic, (, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateStatement, (]
[), ), {, validateStatement, (, c, ), ;, }, }, private, void, validateIsSynthetic, (, Node, n, ), {, if, (]
[), {, validateStatement, (, c, ), ;, }, }, private, void, validateIsSynthetic, (, Node, n, ), {, if, (, !]
[), {, validateStatement, (, c, ), ;, }, }, private, void, validateIsSynthetic, (, Node, n, ), {, if, (, !]
[c, ), ;, }, }, private, void, validateIsSynthetic, (, Node, n, ), {, if, (, !, n, ., getBooleanProp, (]
[c, ), ;, }, }, private, void, validateIsSynthetic, (, Node, n, ), {, if, (, !, n, ., getBooleanProp, (]
[void, validateIsSynthetic, (, Node, n, ), {, if, (, !, n, ., getBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ), ), {]
[(, Node, n, ), {, if, (, !, n, ., getBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ), ), {, violation, (]
[n, ), {, if, (, !, n, ., getBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ), ), {, violation, (, "Missing 'synthetic block' annotation.", ,]
[violation, (, "Missing 'synthetic block' annotation.", ,, n, ), ;, }, }, private, void, validateHasSourceName, (, Node, n, ), {, String, sourceName, =]
[violation, (, "Missing 'synthetic block' annotation.", ,, n, ), ;, }, }, private, void, validateHasSourceName, (, Node, n, ), {, String, sourceName, =]
[}, private, void, validateHasSourceName, (, Node, n, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, if, (]
[}, private, void, validateHasSourceName, (, Node, n, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, if, (]
[}, private, void, validateHasSourceName, (, Node, n, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, if, (]
[void, validateHasSourceName, (, Node, n, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, if, (, sourceName, ==]
[(, Node, n, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, if, (, sourceName, ==, null, ||]
[(, Node, n, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, if, (, sourceName, ==, null, ||]
[=, n, ., getSourceFileName, (, ), ;, if, (, sourceName, ==, null, ||, sourceName, ., isEmpty, (, ), ), {]
[., getSourceFileName, (, ), ;, if, (, sourceName, ==, null, ||, sourceName, ., isEmpty, (, ), ), {, violation, (]
[(, ), ;, if, (, sourceName, ==, null, ||, sourceName, ., isEmpty, (, ), ), {, violation, (, "Missing 'source name' annotation.", ,]
[violation, (, "Missing 'source name' annotation.", ,, n, ), ;, }, }, private, void, validateHasInputId, (, Node, n, ), {, InputId, inputId, =]
[violation, (, "Missing 'source name' annotation.", ,, n, ), ;, }, }, private, void, validateHasInputId, (, Node, n, ), {, InputId, inputId, =]
[}, private, void, validateHasInputId, (, Node, n, ), {, InputId, inputId, =, n, ., getInputId, (, ), ;, if, (]
[}, private, void, validateHasInputId, (, Node, n, ), {, InputId, inputId, =, n, ., getInputId, (, ), ;, if, (]
[void, validateHasInputId, (, Node, n, ), {, InputId, inputId, =, n, ., getInputId, (, ), ;, if, (, inputId, ==]
[Node, n, ), {, InputId, inputId, =, n, ., getInputId, (, ), ;, if, (, inputId, ==, null, ), {]
[), {, InputId, inputId, =, n, ., getInputId, (, ), ;, if, (, inputId, ==, null, ), {, violation, (]
[InputId, inputId, =, n, ., getInputId, (, ), ;, if, (, inputId, ==, null, ), {, violation, (, "Missing 'input id' annotation.", ,]
[null, ), {, violation, (, "Missing 'input id' annotation.", ,, n, ), ;, }, }, private, void, validateLabel, (, Node, n, ), {]
[{, violation, (, "Missing 'input id' annotation.", ,, n, ), ;, }, }, private, void, validateLabel, (, Node, n, ), {, validateNodeType, (]
[{, violation, (, "Missing 'input id' annotation.", ,, n, ), ;, }, }, private, void, validateLabel, (, Node, n, ), {, validateNodeType, (]
[,, n, ), ;, }, }, private, void, validateLabel, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL, ,]
[;, }, }, private, void, validateLabel, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL, ,, n, ), ;]
[}, private, void, validateLabel, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL, ,, n, ), ;, validateChildCount, (]
[void, validateLabel, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., LABEL, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;]
[), {, validateNodeType, (, Token, ., LABEL, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateLabelName, (]
[), {, validateNodeType, (, Token, ., LABEL, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateLabelName, (]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateLabelName, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, validateStatement, (]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, validateStatement, (]
[), ;, validateStatement, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateLabelName, (, Node, n, ), {]
[validateStatement, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateLabelName, (, Node, n, ), {, validateNodeType, (]
[validateStatement, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateLabelName, (, Node, n, ), {, validateNodeType, (]
[getLastChild, (, ), ), ;, }, private, void, validateLabelName, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL_NAME, ,]
[), ;, }, private, void, validateLabelName, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL_NAME, ,, n, ), ;]
[}, private, void, validateLabelName, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL_NAME, ,, n, ), ;, validateNonEmptyString, (]
[validateLabelName, (, Node, n, ), {, validateNodeType, (, Token, ., LABEL_NAME, ,, n, ), ;, validateNonEmptyString, (, n, ), ;]
[Node, n, ), {, validateNodeType, (, Token, ., LABEL_NAME, ,, n, ), ;, validateNonEmptyString, (, n, ), ;, validateChildCount, (]
[), {, validateNodeType, (, Token, ., LABEL_NAME, ,, n, ), ;, validateNonEmptyString, (, n, ), ;, validateChildCount, (, n, ,]
[(, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateNonEmptyString, (, Node, n, ), {]
[), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateNonEmptyString, (, Node, n, ), {, validateNonNullString, (]
[,, 0, ), ;, }, private, void, validateNonEmptyString, (, Node, n, ), {, validateNonNullString, (, n, ), ;, if, (]
[,, 0, ), ;, }, private, void, validateNonEmptyString, (, Node, n, ), {, validateNonNullString, (, n, ), ;, if, (]
[,, 0, ), ;, }, private, void, validateNonEmptyString, (, Node, n, ), {, validateNonNullString, (, n, ), ;, if, (]
[), {, validateNonNullString, (, n, ), ;, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {]
[validateNonNullString, (, n, ), ;, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {, violation, (]
[n, ), ;, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected non-empty string.", ,]
[{, violation, (, "Expected non-empty string.", ,, n, ), ;, }, }, private, void, validateNonNullString, (, Node, n, ), {, if, (]
[{, violation, (, "Expected non-empty string.", ,, n, ), ;, }, }, private, void, validateNonNullString, (, Node, n, ), {, if, (]
[{, violation, (, "Expected non-empty string.", ,, n, ), ;, }, }, private, void, validateNonNullString, (, Node, n, ), {, if, (]
[), ;, }, }, private, void, validateNonNullString, (, Node, n, ), {, if, (, n, ., getString, (, ), ==]
[}, private, void, validateNonNullString, (, Node, n, ), {, if, (, n, ., getString, (, ), ==, null, ), {]
[void, validateNonNullString, (, Node, n, ), {, if, (, n, ., getString, (, ), ==, null, ), {, violation, (]
[(, Node, n, ), {, if, (, n, ., getString, (, ), ==, null, ), {, violation, (, "Expected non-null string.", ,]
[null, ), {, violation, (, "Expected non-null string.", ,, n, ), ;, }, }, private, void, validateName, (, Node, n, ), {]
[{, violation, (, "Expected non-null string.", ,, n, ), ;, }, }, private, void, validateName, (, Node, n, ), {, validateNodeType, (]
[{, violation, (, "Expected non-null string.", ,, n, ), ;, }, }, private, void, validateName, (, Node, n, ), {, validateNodeType, (]
[,, n, ), ;, }, }, private, void, validateName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,]
[;, }, }, private, void, validateName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;]
[}, private, void, validateName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;, validateNonEmptyString, (]
[validateName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;, validateNonEmptyString, (, n, ), ;]
[Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;, validateNonEmptyString, (, n, ), ;, validateChildCount, (]
[), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;, validateNonEmptyString, (, n, ), ;, validateChildCount, (, n, ,]
[(, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateOptionalName, (, Node, n, ), {]
[), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateOptionalName, (, Node, n, ), {, validateNodeType, (]
[), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateOptionalName, (, Node, n, ), {, validateNodeType, (]
[n, ,, 0, ), ;, }, private, void, validateOptionalName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,]
[), ;, }, private, void, validateOptionalName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;]
[}, private, void, validateOptionalName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;, validateNonNullString, (]
[validateOptionalName, (, Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;, validateNonNullString, (, n, ), ;]
[Node, n, ), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;, validateNonNullString, (, n, ), ;, validateChildCount, (]
[), {, validateNodeType, (, Token, ., NAME, ,, n, ), ;, validateNonNullString, (, n, ), ;, validateChildCount, (, n, ,]
[(, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateFunctionStatement, (, Node, n, ), {]
[), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateFunctionStatement, (, Node, n, ), {, validateNodeType, (]
[), ;, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateFunctionStatement, (, Node, n, ), {, validateNodeType, (]
[n, ,, 0, ), ;, }, private, void, validateFunctionStatement, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,]
[), ;, }, private, void, validateFunctionStatement, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;]
[}, private, void, validateFunctionStatement, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount, (]
[void, validateFunctionStatement, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;]
[), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;, validateName, (]
[), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;, validateName, (]
[,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateChildCount, (, n, ,, 3, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (]
[), ;, validateChildCount, (, n, ,, 3, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (]
[n, ,, 3, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (]
[;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;]
[(, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateBlock, (]
[(, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateBlock, (]
[), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateFunctionExpression, (, Node, n, ), {]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateFunctionExpression, (, Node, n, ), {, validateNodeType, (]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateFunctionExpression, (, Node, n, ), {, validateNodeType, (]
[getLastChild, (, ), ), ;, }, private, void, validateFunctionExpression, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,]
[), ;, }, private, void, validateFunctionExpression, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;]
[}, private, void, validateFunctionExpression, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount, (]
[void, validateFunctionExpression, (, Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;]
[), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;, validateOptionalName, (]
[), {, validateNodeType, (, Token, ., FUNCTION, ,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;, validateOptionalName, (]
[,, n, ), ;, validateChildCount, (, n, ,, 3, ), ;, validateOptionalName, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateChildCount, (, n, ,, 3, ), ;, validateOptionalName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (]
[), ;, validateChildCount, (, n, ,, 3, ), ;, validateOptionalName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (]
[n, ,, 3, ), ;, validateOptionalName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (]
[;, validateOptionalName, (, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;]
[(, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateBlock, (]
[(, n, ., getFirstChild, (, ), ), ;, validateParameters, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateBlock, (]
[), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateParameters, (, Node, n, ), {]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateParameters, (, Node, n, ), {, validateNodeType, (]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateParameters, (, Node, n, ), {, validateNodeType, (]
[getLastChild, (, ), ), ;, }, private, void, validateParameters, (, Node, n, ), {, validateNodeType, (, Token, ., PARAM_LIST, ,]
[validateParameters, (, Node, n, ), {, validateNodeType, (, Token, ., PARAM_LIST, ,, n, ), ;, for, (, Node, c, =]
[validateParameters, (, Node, n, ), {, validateNodeType, (, Token, ., PARAM_LIST, ,, n, ), ;, for, (, Node, c, =]
[validateNodeType, (, Token, ., PARAM_LIST, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[validateNodeType, (, Token, ., PARAM_LIST, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[Token, ., PARAM_LIST, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[PARAM_LIST, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateName, (]
[getNext, (, ), ), {, validateName, (, c, ), ;, }, }, private, void, validateCall, (, Node, n, ), {]
[), ), {, validateName, (, c, ), ;, }, }, private, void, validateCall, (, Node, n, ), {, validateNodeType, (]
[), ), {, validateName, (, c, ), ;, }, }, private, void, validateCall, (, Node, n, ), {, validateNodeType, (]
[(, c, ), ;, }, }, private, void, validateCall, (, Node, n, ), {, validateNodeType, (, Token, ., CALL, ,]
[;, }, }, private, void, validateCall, (, Node, n, ), {, validateNodeType, (, Token, ., CALL, ,, n, ), ;]
[}, private, void, validateCall, (, Node, n, ), {, validateNodeType, (, Token, ., CALL, ,, n, ), ;, validateMinimumChildCount, (]
[void, validateCall, (, Node, n, ), {, validateNodeType, (, Token, ., CALL, ,, n, ), ;, validateMinimumChildCount, (, n, ,]
[(, Token, ., CALL, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =]
[(, Token, ., CALL, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =]
[), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateExpression, (]
[getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateNew, (, Node, n, ), {]
[), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateNew, (, Node, n, ), {, validateNodeType, (]
[), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateNew, (, Node, n, ), {, validateNodeType, (]
[(, c, ), ;, }, }, private, void, validateNew, (, Node, n, ), {, validateNodeType, (, Token, ., NEW, ,]
[;, }, }, private, void, validateNew, (, Node, n, ), {, validateNodeType, (, Token, ., NEW, ,, n, ), ;]
[}, private, void, validateNew, (, Node, n, ), {, validateNodeType, (, Token, ., NEW, ,, n, ), ;, validateMinimumChildCount, (]
[void, validateNew, (, Node, n, ), {, validateNodeType, (, Token, ., NEW, ,, n, ), ;, validateMinimumChildCount, (, n, ,]
[(, Token, ., NEW, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =]
[(, Token, ., NEW, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =]
[), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateExpression, (]
[getNext, (, ), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateVar, (, Node, n, ), {]
[), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateVar, (, Node, n, ), {, validateNodeType, (]
[), ), {, validateExpression, (, c, ), ;, }, }, private, void, validateVar, (, Node, n, ), {, validateNodeType, (]
[(, c, ), ;, }, }, private, void, validateVar, (, Node, n, ), {, validateNodeType, (, Token, ., VAR, ,]
[;, }, }, private, void, validateVar, (, Node, n, ), {, validateNodeType, (, Token, ., VAR, ,, n, ), ;]
[;, }, }, private, void, validateVar, (, Node, n, ), {, validateNodeType, (, Token, ., VAR, ,, n, ), ;]
[void, validateVar, (, Node, n, ), {, validateNodeType, (, Token, ., VAR, ,, n, ), ;, this, ., validateMinimumChildCount, (]
[(, Node, n, ), {, validateNodeType, (, Token, ., VAR, ,, n, ), ;, this, ., validateMinimumChildCount, (, n, ,]
[., VAR, ,, n, ), ;, this, ., validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =]
[., VAR, ,, n, ), ;, this, ., validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =]
[this, ., validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[this, ., validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[validateMinimumChildCount, (, n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[n, ,, 1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[1, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateNodeType, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateNodeType, (]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateNodeType, (, Token, ., NAME, ,]
[null, ;, c, =, c, ., getNext, (, ), ), {, validateNodeType, (, Token, ., NAME, ,, c, ), ;]
[c, =, c, ., getNext, (, ), ), {, validateNodeType, (, Token, ., NAME, ,, c, ), ;, validateNonEmptyString, (]
[., getNext, (, ), ), {, validateNodeType, (, Token, ., NAME, ,, c, ), ;, validateNonEmptyString, (, c, ), ;]
[(, ), ), {, validateNodeType, (, Token, ., NAME, ,, c, ), ;, validateNonEmptyString, (, c, ), ;, validateMaximumChildCount, (]
[), {, validateNodeType, (, Token, ., NAME, ,, c, ), ;, validateNonEmptyString, (, c, ), ;, validateMaximumChildCount, (, c, ,]
[., NAME, ,, c, ), ;, validateNonEmptyString, (, c, ), ;, validateMaximumChildCount, (, c, ,, 1, ), ;, if, (]
[., NAME, ,, c, ), ;, validateNonEmptyString, (, c, ), ;, validateMaximumChildCount, (, c, ,, 1, ), ;, if, (]
[(, c, ), ;, validateMaximumChildCount, (, c, ,, 1, ), ;, if, (, c, ., hasChildren, (, ), ), {]
[), ;, validateMaximumChildCount, (, c, ,, 1, ), ;, if, (, c, ., hasChildren, (, ), ), {, validateExpression, (]
[), ;, validateMaximumChildCount, (, c, ,, 1, ), ;, if, (, c, ., hasChildren, (, ), ), {, validateExpression, (]
[validateExpression, (, c, ., getFirstChild, (, ), ), ;, }, }, }, private, void, validateFor, (, Node, n, ), {]
[c, ., getFirstChild, (, ), ), ;, }, }, }, private, void, validateFor, (, Node, n, ), {, validateNodeType, (]
[c, ., getFirstChild, (, ), ), ;, }, }, }, private, void, validateFor, (, Node, n, ), {, validateNodeType, (]
[), ), ;, }, }, }, private, void, validateFor, (, Node, n, ), {, validateNodeType, (, Token, ., FOR, ,]
[}, }, }, private, void, validateFor, (, Node, n, ), {, validateNodeType, (, Token, ., FOR, ,, n, ), ;]
[}, private, void, validateFor, (, Node, n, ), {, validateNodeType, (, Token, ., FOR, ,, n, ), ;, validateMinimumChildCount, (]
[void, validateFor, (, Node, n, ), {, validateNodeType, (, Token, ., FOR, ,, n, ), ;, validateMinimumChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., FOR, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 3, ), ;]
[), {, validateNodeType, (, Token, ., FOR, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 3, ), ;, validateMaximumChildCount, (]
[validateNodeType, (, Token, ., FOR, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 3, ), ;, validateMaximumChildCount, (, n, ,]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 3, ), ;, validateMaximumChildCount, (, n, ,, 4, ), ;, if, (]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 3, ), ;, validateMaximumChildCount, (, n, ,, 4, ), ;, if, (]
[validateMinimumChildCount, (, n, ,, 3, ), ;, validateMaximumChildCount, (, n, ,, 4, ), ;, if, (, NodeUtil, ., isForIn, (]
[3, ), ;, validateMaximumChildCount, (, n, ,, 4, ), ;, if, (, NodeUtil, ., isForIn, (, n, ), ), {]
[;, validateMaximumChildCount, (, n, ,, 4, ), ;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, validateChildCount, (]
[(, n, ,, 4, ), ;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, validateChildCount, (, n, ,]
[4, ), ;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, validateChildCount, (, n, ,, 3, ), ;]
[;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, validateChildCount, (, n, ,, 3, ), ;, validateVarOrAssignmentTarget, (]
[;, if, (, NodeUtil, ., isForIn, (, n, ), ), {, validateChildCount, (, n, ,, 3, ), ;, validateVarOrAssignmentTarget, (]
[n, ), ), {, validateChildCount, (, n, ,, 3, ), ;, validateVarOrAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;]
[), {, validateChildCount, (, n, ,, 3, ), ;, validateVarOrAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (]
[), {, validateChildCount, (, n, ,, 3, ), ;, validateVarOrAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (]
[n, ,, 3, ), ;, validateVarOrAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getChildAtIndex, (]
[n, ., getFirstChild, (, ), ), ;, validateExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, }, else, {]
[getFirstChild, (, ), ), ;, validateExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, }, else, {, validateChildCount, (]
[), ), ;, validateExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, }, else, {, validateChildCount, (, n, ,]
[validateExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, }, else, {, validateChildCount, (, n, ,, 4, ), ;]
[n, ., getChildAtIndex, (, 1, ), ), ;, }, else, {, validateChildCount, (, n, ,, 4, ), ;, validateVarOrOptionalExpression, (]
[n, ., getChildAtIndex, (, 1, ), ), ;, }, else, {, validateChildCount, (, n, ,, 4, ), ;, validateVarOrOptionalExpression, (]
[;, }, else, {, validateChildCount, (, n, ,, 4, ), ;, validateVarOrOptionalExpression, (, n, ., getFirstChild, (, ), ), ;]
[else, {, validateChildCount, (, n, ,, 4, ), ;, validateVarOrOptionalExpression, (, n, ., getFirstChild, (, ), ), ;, validateOptionalExpression, (]
[else, {, validateChildCount, (, n, ,, 4, ), ;, validateVarOrOptionalExpression, (, n, ., getFirstChild, (, ), ), ;, validateOptionalExpression, (]
[n, ,, 4, ), ;, validateVarOrOptionalExpression, (, n, ., getFirstChild, (, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (]
[;, validateVarOrOptionalExpression, (, n, ., getFirstChild, (, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;]
[(, n, ., getFirstChild, (, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateOptionalExpression, (]
[(, n, ., getFirstChild, (, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateOptionalExpression, (]
[(, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 1, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (]
[(, n, ., getChildAtIndex, (, 1, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 2, ), ), ;, }]
[., getChildAtIndex, (, 1, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 2, ), ), ;, }, validateBlock, (]
[., getChildAtIndex, (, 1, ), ), ;, validateOptionalExpression, (, n, ., getChildAtIndex, (, 2, ), ), ;, }, validateBlock, (]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateVarOrOptionalExpression, (, Node, n, ), {, if, (]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateVarOrOptionalExpression, (, Node, n, ), {, if, (]
[), ;, }, private, void, validateVarOrOptionalExpression, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {]
[}, private, void, validateVarOrOptionalExpression, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {, validateVar, (]
[n, ), {, if, (, n, ., isVar, (, ), ), {, validateVar, (, n, ), ;, }, else, {]
[{, if, (, n, ., isVar, (, ), ), {, validateVar, (, n, ), ;, }, else, {, validateOptionalExpression, (]
[}, else, {, validateOptionalExpression, (, n, ), ;, }, }, private, void, validateVarOrAssignmentTarget, (, Node, n, ), {, if, (]
[}, else, {, validateOptionalExpression, (, n, ), ;, }, }, private, void, validateVarOrAssignmentTarget, (, Node, n, ), {, if, (]
[;, }, }, private, void, validateVarOrAssignmentTarget, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {]
[;, }, }, private, void, validateVarOrAssignmentTarget, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {]
[void, validateVarOrAssignmentTarget, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {, this, ., validateChildCount, (]
[(, Node, n, ), {, if, (, n, ., isVar, (, ), ), {, this, ., validateChildCount, (, n, ,]
[), {, if, (, n, ., isVar, (, ), ), {, this, ., validateChildCount, (, n, ,, 1, ), ;]
[if, (, n, ., isVar, (, ), ), {, this, ., validateChildCount, (, n, ,, 1, ), ;, validateVar, (]
[), ), {, this, ., validateChildCount, (, n, ,, 1, ), ;, validateVar, (, n, ), ;, }, else, {]
[{, this, ., validateChildCount, (, n, ,, 1, ), ;, validateVar, (, n, ), ;, }, else, {, validateAssignmentTarget, (]
[), ;, }, else, {, validateAssignmentTarget, (, n, ), ;, }, }, private, void, validateWith, (, Node, n, ), {]
[}, else, {, validateAssignmentTarget, (, n, ), ;, }, }, private, void, validateWith, (, Node, n, ), {, validateNodeType, (]
[}, else, {, validateAssignmentTarget, (, n, ), ;, }, }, private, void, validateWith, (, Node, n, ), {, validateNodeType, (]
[(, n, ), ;, }, }, private, void, validateWith, (, Node, n, ), {, validateNodeType, (, Token, ., WITH, ,]
[;, }, }, private, void, validateWith, (, Node, n, ), {, validateNodeType, (, Token, ., WITH, ,, n, ), ;]
[}, private, void, validateWith, (, Node, n, ), {, validateNodeType, (, Token, ., WITH, ,, n, ), ;, validateChildCount, (]
[void, validateWith, (, Node, n, ), {, validateNodeType, (, Token, ., WITH, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., WITH, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;]
[), {, validateNodeType, (, Token, ., WITH, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (]
[), {, validateNodeType, (, Token, ., WITH, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateWhile, (, Node, n, ), {]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateWhile, (, Node, n, ), {, validateNodeType, (]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateWhile, (, Node, n, ), {, validateNodeType, (]
[getLastChild, (, ), ), ;, }, private, void, validateWhile, (, Node, n, ), {, validateNodeType, (, Token, ., WHILE, ,]
[), ;, }, private, void, validateWhile, (, Node, n, ), {, validateNodeType, (, Token, ., WHILE, ,, n, ), ;]
[}, private, void, validateWhile, (, Node, n, ), {, validateNodeType, (, Token, ., WHILE, ,, n, ), ;, validateChildCount, (]
[void, validateWhile, (, Node, n, ), {, validateNodeType, (, Token, ., WHILE, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., WHILE, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;]
[), {, validateNodeType, (, Token, ., WHILE, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (]
[), {, validateNodeType, (, Token, ., WHILE, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateDo, (, Node, n, ), {]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateDo, (, Node, n, ), {, validateNodeType, (]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateDo, (, Node, n, ), {, validateNodeType, (]
[getLastChild, (, ), ), ;, }, private, void, validateDo, (, Node, n, ), {, validateNodeType, (, Token, ., DO, ,]
[), ;, }, private, void, validateDo, (, Node, n, ), {, validateNodeType, (, Token, ., DO, ,, n, ), ;]
[}, private, void, validateDo, (, Node, n, ), {, validateNodeType, (, Token, ., DO, ,, n, ), ;, validateChildCount, (]
[void, validateDo, (, Node, n, ), {, validateNodeType, (, Token, ., DO, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., DO, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;]
[), {, validateNodeType, (, Token, ., DO, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateBlock, (]
[), {, validateNodeType, (, Token, ., DO, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateBlock, (]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (]
[), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateIf, (, Node, n, ), {]
[validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateIf, (, Node, n, ), {, validateNodeType, (]
[validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateIf, (, Node, n, ), {, validateNodeType, (]
[getLastChild, (, ), ), ;, }, private, void, validateIf, (, Node, n, ), {, validateNodeType, (, Token, ., IF, ,]
[), ;, }, private, void, validateIf, (, Node, n, ), {, validateNodeType, (, Token, ., IF, ,, n, ), ;]
[}, private, void, validateIf, (, Node, n, ), {, validateNodeType, (, Token, ., IF, ,, n, ), ;, validateMinimumChildCount, (]
[void, validateIf, (, Node, n, ), {, validateNodeType, (, Token, ., IF, ,, n, ), ;, validateMinimumChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., IF, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;]
[), {, validateNodeType, (, Token, ., IF, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (]
[validateNodeType, (, Token, ., IF, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,]
[., IF, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateExpression, (]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateExpression, (]
[,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[n, ,, 3, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getChildAtIndex, (]
[(, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getChildAtIndex, (, 1, ), ), ;, if, (]
[(, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getChildAtIndex, (, 1, ), ), ;, if, (]
[(, n, ., getFirstChild, (, ), ), ;, validateBlock, (, n, ., getChildAtIndex, (, 1, ), ), ;, if, (]
[), ;, validateBlock, (, n, ., getChildAtIndex, (, 1, ), ), ;, if, (, n, ., getChildCount, (, ), ==]
[(, n, ., getChildAtIndex, (, 1, ), ), ;, if, (, n, ., getChildCount, (, ), ==, 3, ), {]
[., getChildAtIndex, (, 1, ), ), ;, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (]
[., getChildAtIndex, (, 1, ), ), ;, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (]
[{, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, }, private, void, validateExprStmt, (, Node, n, ), {]
[(, n, ., getLastChild, (, ), ), ;, }, }, private, void, validateExprStmt, (, Node, n, ), {, validateNodeType, (]
[(, n, ., getLastChild, (, ), ), ;, }, }, private, void, validateExprStmt, (, Node, n, ), {, validateNodeType, (]
[(, ), ), ;, }, }, private, void, validateExprStmt, (, Node, n, ), {, validateNodeType, (, Token, ., EXPR_RESULT, ,]
[;, }, }, private, void, validateExprStmt, (, Node, n, ), {, validateNodeType, (, Token, ., EXPR_RESULT, ,, n, ), ;]
[}, private, void, validateExprStmt, (, Node, n, ), {, validateNodeType, (, Token, ., EXPR_RESULT, ,, n, ), ;, validateChildCount, (]
[void, validateExprStmt, (, Node, n, ), {, validateNodeType, (, Token, ., EXPR_RESULT, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., EXPR_RESULT, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;]
[), {, validateNodeType, (, Token, ., EXPR_RESULT, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (]
[), {, validateNodeType, (, Token, ., EXPR_RESULT, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateReturn, (, Node, n, ), {]
[validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateReturn, (, Node, n, ), {, validateNodeType, (]
[validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateReturn, (, Node, n, ), {, validateNodeType, (]
[getFirstChild, (, ), ), ;, }, private, void, validateReturn, (, Node, n, ), {, validateNodeType, (, Token, ., RETURN, ,]
[), ;, }, private, void, validateReturn, (, Node, n, ), {, validateNodeType, (, Token, ., RETURN, ,, n, ), ;]
[}, private, void, validateReturn, (, Node, n, ), {, validateNodeType, (, Token, ., RETURN, ,, n, ), ;, validateMaximumChildCount, (]
[void, validateReturn, (, Node, n, ), {, validateNodeType, (, Token, ., RETURN, ,, n, ), ;, validateMaximumChildCount, (, n, ,]
[), {, validateNodeType, (, Token, ., RETURN, ,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (]
[), {, validateNodeType, (, Token, ., RETURN, ,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (]
[,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {]
[), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateExpression, (]
[), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateExpression, (]
[{, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateThrow, (, Node, n, ), {]
[(, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateThrow, (, Node, n, ), {, validateNodeType, (]
[(, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateThrow, (, Node, n, ), {, validateNodeType, (]
[(, ), ), ;, }, }, private, void, validateThrow, (, Node, n, ), {, validateNodeType, (, Token, ., THROW, ,]
[;, }, }, private, void, validateThrow, (, Node, n, ), {, validateNodeType, (, Token, ., THROW, ,, n, ), ;]
[}, private, void, validateThrow, (, Node, n, ), {, validateNodeType, (, Token, ., THROW, ,, n, ), ;, validateChildCount, (]
[void, validateThrow, (, Node, n, ), {, validateNodeType, (, Token, ., THROW, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., THROW, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;]
[), {, validateNodeType, (, Token, ., THROW, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (]
[), {, validateNodeType, (, Token, ., THROW, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateBreak, (, Node, n, ), {]
[validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateBreak, (, Node, n, ), {, validateNodeType, (]
[validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateBreak, (, Node, n, ), {, validateNodeType, (]
[getFirstChild, (, ), ), ;, }, private, void, validateBreak, (, Node, n, ), {, validateNodeType, (, Token, ., BREAK, ,]
[), ;, }, private, void, validateBreak, (, Node, n, ), {, validateNodeType, (, Token, ., BREAK, ,, n, ), ;]
[}, private, void, validateBreak, (, Node, n, ), {, validateNodeType, (, Token, ., BREAK, ,, n, ), ;, validateMaximumChildCount, (]
[void, validateBreak, (, Node, n, ), {, validateNodeType, (, Token, ., BREAK, ,, n, ), ;, validateMaximumChildCount, (, n, ,]
[), {, validateNodeType, (, Token, ., BREAK, ,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (]
[), {, validateNodeType, (, Token, ., BREAK, ,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (]
[,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {]
[), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (]
[), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (]
[{, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateContinue, (, Node, n, ), {]
[(, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateContinue, (, Node, n, ), {, validateNodeType, (]
[(, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateContinue, (, Node, n, ), {, validateNodeType, (]
[(, ), ), ;, }, }, private, void, validateContinue, (, Node, n, ), {, validateNodeType, (, Token, ., CONTINUE, ,]
[;, }, }, private, void, validateContinue, (, Node, n, ), {, validateNodeType, (, Token, ., CONTINUE, ,, n, ), ;]
[}, private, void, validateContinue, (, Node, n, ), {, validateNodeType, (, Token, ., CONTINUE, ,, n, ), ;, validateMaximumChildCount, (]
[void, validateContinue, (, Node, n, ), {, validateNodeType, (, Token, ., CONTINUE, ,, n, ), ;, validateMaximumChildCount, (, n, ,]
[), {, validateNodeType, (, Token, ., CONTINUE, ,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (]
[), {, validateNodeType, (, Token, ., CONTINUE, ,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (]
[,, n, ), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {]
[), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (]
[), ;, validateMaximumChildCount, (, n, ,, 1, ), ;, if, (, n, ., hasChildren, (, ), ), {, validateLabelName, (]
[{, validateLabelName, (, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateTry, (, Node, n, ), {]
[(, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateTry, (, Node, n, ), {, validateNodeType, (]
[(, n, ., getFirstChild, (, ), ), ;, }, }, private, void, validateTry, (, Node, n, ), {, validateNodeType, (]
[(, ), ), ;, }, }, private, void, validateTry, (, Node, n, ), {, validateNodeType, (, Token, ., TRY, ,]
[;, }, }, private, void, validateTry, (, Node, n, ), {, validateNodeType, (, Token, ., TRY, ,, n, ), ;]
[}, private, void, validateTry, (, Node, n, ), {, validateNodeType, (, Token, ., TRY, ,, n, ), ;, validateMinimumChildCount, (]
[void, validateTry, (, Node, n, ), {, validateNodeType, (, Token, ., TRY, ,, n, ), ;, validateMinimumChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., TRY, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;]
[), {, validateNodeType, (, Token, ., TRY, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (]
[validateNodeType, (, Token, ., TRY, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,]
[., TRY, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateBlock, (]
[,, n, ), ;, validateMinimumChildCount, (, n, ,, 2, ), ;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateBlock, (]
[;, validateMaximumChildCount, (, n, ,, 3, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, boolean, seenCatchOrFinally, =]
[3, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, boolean, seenCatchOrFinally, =, false, ;, Node, catches, =]
[3, ), ;, validateBlock, (, n, ., getFirstChild, (, ), ), ;, boolean, seenCatchOrFinally, =, false, ;, Node, catches, =]
[(, n, ., getFirstChild, (, ), ), ;, boolean, seenCatchOrFinally, =, false, ;, Node, catches, =, n, ., getChildAtIndex, (]
[getFirstChild, (, ), ), ;, boolean, seenCatchOrFinally, =, false, ;, Node, catches, =, n, ., getChildAtIndex, (, 1, ), ;]
[), ), ;, boolean, seenCatchOrFinally, =, false, ;, Node, catches, =, n, ., getChildAtIndex, (, 1, ), ;, validateNodeType, (]
[), ), ;, boolean, seenCatchOrFinally, =, false, ;, Node, catches, =, n, ., getChildAtIndex, (, 1, ), ;, validateNodeType, (]
[seenCatchOrFinally, =, false, ;, Node, catches, =, n, ., getChildAtIndex, (, 1, ), ;, validateNodeType, (, Token, ., BLOCK, ,]
[;, Node, catches, =, n, ., getChildAtIndex, (, 1, ), ;, validateNodeType, (, Token, ., BLOCK, ,, catches, ), ;]
[catches, =, n, ., getChildAtIndex, (, 1, ), ;, validateNodeType, (, Token, ., BLOCK, ,, catches, ), ;, validateMaximumChildCount, (]
[n, ., getChildAtIndex, (, 1, ), ;, validateNodeType, (, Token, ., BLOCK, ,, catches, ), ;, validateMaximumChildCount, (, catches, ,]
[), ;, validateNodeType, (, Token, ., BLOCK, ,, catches, ), ;, validateMaximumChildCount, (, catches, ,, 1, ), ;, if, (]
[), ;, validateNodeType, (, Token, ., BLOCK, ,, catches, ), ;, validateMaximumChildCount, (, catches, ,, 1, ), ;, if, (]
[,, catches, ), ;, validateMaximumChildCount, (, catches, ,, 1, ), ;, if, (, catches, ., hasChildren, (, ), ), {]
[), ;, validateMaximumChildCount, (, catches, ,, 1, ), ;, if, (, catches, ., hasChildren, (, ), ), {, validateCatch, (]
[), ;, validateMaximumChildCount, (, catches, ,, 1, ), ;, if, (, catches, ., hasChildren, (, ), ), {, validateCatch, (]
[), ;, if, (, catches, ., hasChildren, (, ), ), {, validateCatch, (, catches, ., getFirstChild, (, ), ), ;]
[if, (, catches, ., hasChildren, (, ), ), {, validateCatch, (, catches, ., getFirstChild, (, ), ), ;, seenCatchOrFinally, =]
[(, ), ), {, validateCatch, (, catches, ., getFirstChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (]
[(, ), ), {, validateCatch, (, catches, ., getFirstChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (]
[(, ), ), {, validateCatch, (, catches, ., getFirstChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (]
[catches, ., getFirstChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (, n, ., getChildCount, (, ), ==]
[(, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (, n, ., getChildCount, (, ), ==, 3, ), {]
[), ;, seenCatchOrFinally, =, true, ;, }, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (]
[), ;, seenCatchOrFinally, =, true, ;, }, if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (]
[if, (, n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (, n, ., getLastChild, (, ), ), ;]
[n, ., getChildCount, (, ), ==, 3, ), {, validateBlock, (, n, ., getLastChild, (, ), ), ;, seenCatchOrFinally, =]
[==, 3, ), {, validateBlock, (, n, ., getLastChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (]
[3, ), {, validateBlock, (, n, ., getLastChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (, !]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (, !, seenCatchOrFinally, ), {]
[n, ., getLastChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (, !, seenCatchOrFinally, ), {, violation, (]
[getLastChild, (, ), ), ;, seenCatchOrFinally, =, true, ;, }, if, (, !, seenCatchOrFinally, ), {, violation, (, "Missing catch or finally for try statement.", ,]
[seenCatchOrFinally, ), {, violation, (, "Missing catch or finally for try statement.", ,, n, ), ;, }, }, private, void, validateCatch, (, Node, n, ), {]
[{, violation, (, "Missing catch or finally for try statement.", ,, n, ), ;, }, }, private, void, validateCatch, (, Node, n, ), {, validateNodeType, (]
[{, violation, (, "Missing catch or finally for try statement.", ,, n, ), ;, }, }, private, void, validateCatch, (, Node, n, ), {, validateNodeType, (]
[,, n, ), ;, }, }, private, void, validateCatch, (, Node, n, ), {, validateNodeType, (, Token, ., CATCH, ,]
[;, }, }, private, void, validateCatch, (, Node, n, ), {, validateNodeType, (, Token, ., CATCH, ,, n, ), ;]
[}, private, void, validateCatch, (, Node, n, ), {, validateNodeType, (, Token, ., CATCH, ,, n, ), ;, validateChildCount, (]
[void, validateCatch, (, Node, n, ), {, validateNodeType, (, Token, ., CATCH, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., CATCH, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;]
[), {, validateNodeType, (, Token, ., CATCH, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateName, (]
[), {, validateNodeType, (, Token, ., CATCH, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateName, (]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateName, (, n, ., getFirstChild, (, ), ), ;, validateBlock, (]
[), ;, validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateSwitch, (, Node, n, ), {]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateSwitch, (, Node, n, ), {, validateNodeType, (]
[validateBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateSwitch, (, Node, n, ), {, validateNodeType, (]
[getLastChild, (, ), ), ;, }, private, void, validateSwitch, (, Node, n, ), {, validateNodeType, (, Token, ., SWITCH, ,]
[), ;, }, private, void, validateSwitch, (, Node, n, ), {, validateNodeType, (, Token, ., SWITCH, ,, n, ), ;]
[}, private, void, validateSwitch, (, Node, n, ), {, validateNodeType, (, Token, ., SWITCH, ,, n, ), ;, validateMinimumChildCount, (]
[void, validateSwitch, (, Node, n, ), {, validateNodeType, (, Token, ., SWITCH, ,, n, ), ;, validateMinimumChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., SWITCH, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;]
[), {, validateNodeType, (, Token, ., SWITCH, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateExpression, (]
[), {, validateNodeType, (, Token, ., SWITCH, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateExpression, (]
[;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, int, defaults, =]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, int, defaults, =, 0, ;, for, (, Node, c, =]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, int, defaults, =, 0, ;, for, (, Node, c, =]
[;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, int, defaults, =, 0, ;, for, (, Node, c, =]
[int, defaults, =, 0, ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[int, defaults, =, 0, ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[=, 0, ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, c, !=]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, c, !=, null, ;]
[(, Node, c, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, c, !=, null, ;, c, =]
[(, Node, c, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, c, !=, null, ;, c, =]
[(, ), ., getNext, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getNext, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateSwitchMember, (]
[., getNext, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateSwitchMember, (]
[c, =, c, ., getNext, (, ), ), {, validateSwitchMember, (, n, ., getLastChild, (, ), ), ;, if, (]
[c, =, c, ., getNext, (, ), ), {, validateSwitchMember, (, n, ., getLastChild, (, ), ), ;, if, (]
[), {, validateSwitchMember, (, n, ., getLastChild, (, ), ), ;, if, (, c, ., isDefaultCase, (, ), ), {]
[), {, validateSwitchMember, (, n, ., getLastChild, (, ), ), ;, if, (, c, ., isDefaultCase, (, ), ), {]
[(, ), ), ;, if, (, c, ., isDefaultCase, (, ), ), {, defaults, ++, ;, }, }, if, (]
[(, ), ), ;, if, (, c, ., isDefaultCase, (, ), ), {, defaults, ++, ;, }, }, if, (]
[), ;, if, (, c, ., isDefaultCase, (, ), ), {, defaults, ++, ;, }, }, if, (, defaults, >]
[(, c, ., isDefaultCase, (, ), ), {, defaults, ++, ;, }, }, if, (, defaults, >, 1, ), {]
[., isDefaultCase, (, ), ), {, defaults, ++, ;, }, }, if, (, defaults, >, 1, ), {, violation, (]
[., isDefaultCase, (, ), ), {, defaults, ++, ;, }, }, if, (, defaults, >, 1, ), {, violation, (]
[(, ), ), {, defaults, ++, ;, }, }, if, (, defaults, >, 1, ), {, violation, (, "Expected at most 1 'default' in switch but was ", +]
[), {, defaults, ++, ;, }, }, if, (, defaults, >, 1, ), {, violation, (, "Expected at most 1 'default' in switch but was ", +, defaults, ,]
[(, "Expected at most 1 'default' in switch but was ", +, defaults, ,, n, ), ;, }, }, private, void, validateSwitchMember, (, Node, n, ), {, switch, (]
[(, "Expected at most 1 'default' in switch but was ", +, defaults, ,, n, ), ;, }, }, private, void, validateSwitchMember, (, Node, n, ), {, switch, (]
[}, }, private, void, validateSwitchMember, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[}, }, private, void, validateSwitchMember, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[validateSwitchMember, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., CASE, :]
[Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., CASE, :, validateCase, (]
[n, ., getType, (, ), ), {, case, Token, ., CASE, :, validateCase, (, n, ), ;, return, ;, case]
[n, ., getType, (, ), ), {, case, Token, ., CASE, :, validateCase, (, n, ), ;, return, ;, case]
[), ), {, case, Token, ., CASE, :, validateCase, (, n, ), ;, return, ;, case, Token, ., DEFAULT_CASE, :]
[{, case, Token, ., CASE, :, validateCase, (, n, ), ;, return, ;, case, Token, ., DEFAULT_CASE, :, validateDefault, (]
[(, n, ), ;, return, ;, case, Token, ., DEFAULT_CASE, :, validateDefault, (, n, ), ;, return, ;, default, :]
[), ;, return, ;, case, Token, ., DEFAULT_CASE, :, validateDefault, (, n, ), ;, return, ;, default, :, violation, (]
[), ;, return, ;, case, Token, ., DEFAULT_CASE, :, validateDefault, (, n, ), ;, return, ;, default, :, violation, (]
[return, ;, case, Token, ., DEFAULT_CASE, :, validateDefault, (, n, ), ;, return, ;, default, :, violation, (, "Expected switch member but was ", +]
[return, ;, case, Token, ., DEFAULT_CASE, :, validateDefault, (, n, ), ;, return, ;, default, :, violation, (, "Expected switch member but was ", +]
[., DEFAULT_CASE, :, validateDefault, (, n, ), ;, return, ;, default, :, violation, (, "Expected switch member but was ", +, Token, ., name, (]
[., DEFAULT_CASE, :, validateDefault, (, n, ), ;, return, ;, default, :, violation, (, "Expected switch member but was ", +, Token, ., name, (]
[;, return, ;, default, :, violation, (, "Expected switch member but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,]
[n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateDefault, (, Node, n, ), {]
[getType, (, ), ), ,, n, ), ;, }, }, private, void, validateDefault, (, Node, n, ), {, validateNodeType, (]
[getType, (, ), ), ,, n, ), ;, }, }, private, void, validateDefault, (, Node, n, ), {, validateNodeType, (]
[,, n, ), ;, }, }, private, void, validateDefault, (, Node, n, ), {, validateNodeType, (, Token, ., DEFAULT_CASE, ,]
[;, }, }, private, void, validateDefault, (, Node, n, ), {, validateNodeType, (, Token, ., DEFAULT_CASE, ,, n, ), ;]
[}, private, void, validateDefault, (, Node, n, ), {, validateNodeType, (, Token, ., DEFAULT_CASE, ,, n, ), ;, validateChildCount, (]
[void, validateDefault, (, Node, n, ), {, validateNodeType, (, Token, ., DEFAULT_CASE, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., DEFAULT_CASE, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;]
[), {, validateNodeType, (, Token, ., DEFAULT_CASE, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateSyntheticBlock, (]
[), {, validateNodeType, (, Token, ., DEFAULT_CASE, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateSyntheticBlock, (]
[), ;, validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateCase, (, Node, n, ), {]
[validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateCase, (, Node, n, ), {, validateNodeType, (]
[validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateCase, (, Node, n, ), {, validateNodeType, (]
[getLastChild, (, ), ), ;, }, private, void, validateCase, (, Node, n, ), {, validateNodeType, (, Token, ., CASE, ,]
[), ;, }, private, void, validateCase, (, Node, n, ), {, validateNodeType, (, Token, ., CASE, ,, n, ), ;]
[}, private, void, validateCase, (, Node, n, ), {, validateNodeType, (, Token, ., CASE, ,, n, ), ;, validateChildCount, (]
[void, validateCase, (, Node, n, ), {, validateNodeType, (, Token, ., CASE, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., CASE, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;]
[), {, validateNodeType, (, Token, ., CASE, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (]
[), {, validateNodeType, (, Token, ., CASE, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (]
[,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateSyntheticBlock, (]
[), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateSyntheticBlock, (]
[validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateOptionalExpression, (, Node, n, ), {, if, (]
[validateSyntheticBlock, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateOptionalExpression, (, Node, n, ), {, if, (]
[), ;, }, private, void, validateOptionalExpression, (, Node, n, ), {, if, (, n, ., isEmpty, (, ), ), {]
[}, private, void, validateOptionalExpression, (, Node, n, ), {, if, (, n, ., isEmpty, (, ), ), {, validateChildless, (]
[n, ), {, if, (, n, ., isEmpty, (, ), ), {, validateChildless, (, n, ), ;, }, else, {]
[{, if, (, n, ., isEmpty, (, ), ), {, validateChildless, (, n, ), ;, }, else, {, validateExpression, (]
[), ;, }, else, {, validateExpression, (, n, ), ;, }, }, private, void, validateChildless, (, Node, n, ), {]
[}, else, {, validateExpression, (, n, ), ;, }, }, private, void, validateChildless, (, Node, n, ), {, validateChildCount, (]
[{, validateExpression, (, n, ), ;, }, }, private, void, validateChildless, (, Node, n, ), {, validateChildCount, (, n, ,]
[Node, n, ), {, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateAssignmentExpression, (, Node, n, ), {]
[), {, validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateAssignmentExpression, (, Node, n, ), {, validateChildCount, (]
[validateChildCount, (, n, ,, 0, ), ;, }, private, void, validateAssignmentExpression, (, Node, n, ), {, validateChildCount, (, n, ,]
[,, 0, ), ;, }, private, void, validateAssignmentExpression, (, Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;]
[), ;, }, private, void, validateAssignmentExpression, (, Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;, validateAssignmentTarget, (]
[), ;, }, private, void, validateAssignmentExpression, (, Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;, validateAssignmentTarget, (]
[Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;, validateAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;]
[), {, validateChildCount, (, n, ,, 2, ), ;, validateAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (]
[), {, validateChildCount, (, n, ,, 2, ), ;, validateAssignmentTarget, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (]
[validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateAssignmentTarget, (, Node, n, ), {, switch, (]
[validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateAssignmentTarget, (, Node, n, ), {, switch, (]
[;, }, private, void, validateAssignmentTarget, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[;, }, private, void, validateAssignmentTarget, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[(, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[(, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETELEM, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETELEM, :, case]
[getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :]
[), ), {, case, Token, ., NAME, :, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, validateExpression, (]
[:, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, validateExpression, (, n, ), ;, return, ;, default, :]
[Token, ., GETELEM, :, case, Token, ., GETPROP, :, validateExpression, (, n, ), ;, return, ;, default, :, violation, (]
[Token, ., GETELEM, :, case, Token, ., GETPROP, :, validateExpression, (, n, ), ;, return, ;, default, :, violation, (]
[GETELEM, :, case, Token, ., GETPROP, :, validateExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected assignment target expression but was ", +]
[GETELEM, :, case, Token, ., GETPROP, :, validateExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected assignment target expression but was ", +]
[., GETPROP, :, validateExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected assignment target expression but was ", +, Token, ., name, (]
[., GETPROP, :, validateExpression, (, n, ), ;, return, ;, default, :, violation, (, "Expected assignment target expression but was ", +, Token, ., name, (]
[;, return, ;, default, :, violation, (, "Expected assignment target expression but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,]
[n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateGetProp, (, Node, n, ), {]
[getType, (, ), ), ,, n, ), ;, }, }, private, void, validateGetProp, (, Node, n, ), {, validateNodeType, (]
[getType, (, ), ), ,, n, ), ;, }, }, private, void, validateGetProp, (, Node, n, ), {, validateNodeType, (]
[,, n, ), ;, }, }, private, void, validateGetProp, (, Node, n, ), {, validateNodeType, (, Token, ., GETPROP, ,]
[;, }, }, private, void, validateGetProp, (, Node, n, ), {, validateNodeType, (, Token, ., GETPROP, ,, n, ), ;]
[}, private, void, validateGetProp, (, Node, n, ), {, validateNodeType, (, Token, ., GETPROP, ,, n, ), ;, validateChildCount, (]
[void, validateGetProp, (, Node, n, ), {, validateNodeType, (, Token, ., GETPROP, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., GETPROP, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;]
[), {, validateNodeType, (, Token, ., GETPROP, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (]
[), {, validateNodeType, (, Token, ., GETPROP, ,, n, ), ;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (]
[;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, Node, prop, =]
[;, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, Node, prop, =]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, Node, prop, =, n, ., getLastChild, (, ), ;]
[validateExpression, (, n, ., getFirstChild, (, ), ), ;, Node, prop, =, n, ., getLastChild, (, ), ;, validateNodeType, (]
[validateExpression, (, n, ., getFirstChild, (, ), ), ;, Node, prop, =, n, ., getLastChild, (, ), ;, validateNodeType, (]
[getFirstChild, (, ), ), ;, Node, prop, =, n, ., getLastChild, (, ), ;, validateNodeType, (, Token, ., STRING, ,]
[), ;, Node, prop, =, n, ., getLastChild, (, ), ;, validateNodeType, (, Token, ., STRING, ,, prop, ), ;]
[Node, prop, =, n, ., getLastChild, (, ), ;, validateNodeType, (, Token, ., STRING, ,, prop, ), ;, validateNonEmptyString, (]
[., STRING, ,, prop, ), ;, validateNonEmptyString, (, prop, ), ;, }, private, void, validateRegExpLit, (, Node, n, ), {]
[,, prop, ), ;, validateNonEmptyString, (, prop, ), ;, }, private, void, validateRegExpLit, (, Node, n, ), {, validateNodeType, (]
[,, prop, ), ;, validateNonEmptyString, (, prop, ), ;, }, private, void, validateRegExpLit, (, Node, n, ), {, validateNodeType, (]
[validateNonEmptyString, (, prop, ), ;, }, private, void, validateRegExpLit, (, Node, n, ), {, validateNodeType, (, Token, ., REGEXP, ,]
[), ;, }, private, void, validateRegExpLit, (, Node, n, ), {, validateNodeType, (, Token, ., REGEXP, ,, n, ), ;]
[}, private, void, validateRegExpLit, (, Node, n, ), {, validateNodeType, (, Token, ., REGEXP, ,, n, ), ;, validateMinimumChildCount, (]
[void, validateRegExpLit, (, Node, n, ), {, validateNodeType, (, Token, ., REGEXP, ,, n, ), ;, validateMinimumChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., REGEXP, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;]
[), {, validateNodeType, (, Token, ., REGEXP, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateMaximumChildCount, (]
[validateNodeType, (, Token, ., REGEXP, ,, n, ), ;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateMaximumChildCount, (, n, ,]
[;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateMaximumChildCount, (, n, ,, 2, ), ;, for, (, Node, c, =]
[;, validateMinimumChildCount, (, n, ,, 1, ), ;, validateMaximumChildCount, (, n, ,, 2, ), ;, for, (, Node, c, =]
[), ;, validateMaximumChildCount, (, n, ,, 2, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[), ;, validateMaximumChildCount, (, n, ,, 2, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[validateMaximumChildCount, (, n, ,, 2, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[n, ,, 2, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[2, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[2, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateString, (]
[getNext, (, ), ), {, validateString, (, c, ), ;, }, }, private, void, validateString, (, Node, n, ), {]
[), ), {, validateString, (, c, ), ;, }, }, private, void, validateString, (, Node, n, ), {, validateNodeType, (]
[), ), {, validateString, (, c, ), ;, }, }, private, void, validateString, (, Node, n, ), {, validateNodeType, (]
[(, c, ), ;, }, }, private, void, validateString, (, Node, n, ), {, validateNodeType, (, Token, ., STRING, ,]
[;, }, }, private, void, validateString, (, Node, n, ), {, validateNodeType, (, Token, ., STRING, ,, n, ), ;]
[}, private, void, validateString, (, Node, n, ), {, validateNodeType, (, Token, ., STRING, ,, n, ), ;, validateChildCount, (]
[void, validateString, (, Node, n, ), {, validateNodeType, (, Token, ., STRING, ,, n, ), ;, validateChildCount, (, n, ,]
[), {, validateNodeType, (, Token, ., STRING, ,, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, try, {]
[), {, validateNodeType, (, Token, ., STRING, ,, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, try, {]
[n, ,, 0, ), ;, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {]
[0, ), ;, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (]
[;, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "Invalid STRING node.", ,]
[e, ), {, violation, (, "Invalid STRING node.", ,, n, ), ;, }, }, private, void, validateNumber, (, Node, n, ), {]
[{, violation, (, "Invalid STRING node.", ,, n, ), ;, }, }, private, void, validateNumber, (, Node, n, ), {, validateNodeType, (]
[{, violation, (, "Invalid STRING node.", ,, n, ), ;, }, }, private, void, validateNumber, (, Node, n, ), {, validateNodeType, (]
[,, n, ), ;, }, }, private, void, validateNumber, (, Node, n, ), {, validateNodeType, (, Token, ., NUMBER, ,]
[;, }, }, private, void, validateNumber, (, Node, n, ), {, validateNodeType, (, Token, ., NUMBER, ,, n, ), ;]
[}, private, void, validateNumber, (, Node, n, ), {, validateNodeType, (, Token, ., NUMBER, ,, n, ), ;, validateChildCount, (]
[void, validateNumber, (, Node, n, ), {, validateNodeType, (, Token, ., NUMBER, ,, n, ), ;, validateChildCount, (, n, ,]
[), {, validateNodeType, (, Token, ., NUMBER, ,, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, try, {]
[), {, validateNodeType, (, Token, ., NUMBER, ,, n, ), ;, validateChildCount, (, n, ,, 0, ), ;, try, {]
[n, ,, 0, ), ;, try, {, n, ., getDouble, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {]
[0, ), ;, try, {, n, ., getDouble, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (]
[;, try, {, n, ., getDouble, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "Invalid NUMBER node.", ,]
[e, ), {, violation, (, "Invalid NUMBER node.", ,, n, ), ;, }, }, private, void, validateArrayLit, (, Node, n, ), {]
[{, violation, (, "Invalid NUMBER node.", ,, n, ), ;, }, }, private, void, validateArrayLit, (, Node, n, ), {, validateNodeType, (]
[{, violation, (, "Invalid NUMBER node.", ,, n, ), ;, }, }, private, void, validateArrayLit, (, Node, n, ), {, validateNodeType, (]
[,, n, ), ;, }, }, private, void, validateArrayLit, (, Node, n, ), {, validateNodeType, (, Token, ., ARRAYLIT, ,]
[validateArrayLit, (, Node, n, ), {, validateNodeType, (, Token, ., ARRAYLIT, ,, n, ), ;, for, (, Node, c, =]
[validateArrayLit, (, Node, n, ), {, validateNodeType, (, Token, ., ARRAYLIT, ,, n, ), ;, for, (, Node, c, =]
[validateNodeType, (, Token, ., ARRAYLIT, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[validateNodeType, (, Token, ., ARRAYLIT, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[Token, ., ARRAYLIT, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[ARRAYLIT, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateOptionalExpression, (]
[getNext, (, ), ), {, validateOptionalExpression, (, c, ), ;, }, }, private, void, validateObjectLit, (, Node, n, ), {]
[), ), {, validateOptionalExpression, (, c, ), ;, }, }, private, void, validateObjectLit, (, Node, n, ), {, validateNodeType, (]
[), ), {, validateOptionalExpression, (, c, ), ;, }, }, private, void, validateObjectLit, (, Node, n, ), {, validateNodeType, (]
[(, c, ), ;, }, }, private, void, validateObjectLit, (, Node, n, ), {, validateNodeType, (, Token, ., OBJECTLIT, ,]
[validateObjectLit, (, Node, n, ), {, validateNodeType, (, Token, ., OBJECTLIT, ,, n, ), ;, for, (, Node, c, =]
[validateObjectLit, (, Node, n, ), {, validateNodeType, (, Token, ., OBJECTLIT, ,, n, ), ;, for, (, Node, c, =]
[validateNodeType, (, Token, ., OBJECTLIT, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[validateNodeType, (, Token, ., OBJECTLIT, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[Token, ., OBJECTLIT, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[OBJECTLIT, ,, n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[n, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, validateObjectLitKey, (]
[), ), {, validateObjectLitKey, (, c, ), ;, }, }, private, void, validateObjectLitKey, (, Node, n, ), {, switch, (]
[), ), {, validateObjectLitKey, (, c, ), ;, }, }, private, void, validateObjectLitKey, (, Node, n, ), {, switch, (]
[}, }, private, void, validateObjectLitKey, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[}, }, private, void, validateObjectLitKey, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[validateObjectLitKey, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETTER_DEF, :]
[Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETTER_DEF, :, validateObjectLitGetKey, (]
[n, ., getType, (, ), ), {, case, Token, ., GETTER_DEF, :, validateObjectLitGetKey, (, n, ), ;, return, ;, case]
[n, ., getType, (, ), ), {, case, Token, ., GETTER_DEF, :, validateObjectLitGetKey, (, n, ), ;, return, ;, case]
[), ), {, case, Token, ., GETTER_DEF, :, validateObjectLitGetKey, (, n, ), ;, return, ;, case, Token, ., SETTER_DEF, :]
[{, case, Token, ., GETTER_DEF, :, validateObjectLitGetKey, (, n, ), ;, return, ;, case, Token, ., SETTER_DEF, :, validateObjectLitSetKey, (]
[validateObjectLitGetKey, (, n, ), ;, return, ;, case, Token, ., SETTER_DEF, :, validateObjectLitSetKey, (, n, ), ;, return, ;, case]
[validateObjectLitGetKey, (, n, ), ;, return, ;, case, Token, ., SETTER_DEF, :, validateObjectLitSetKey, (, n, ), ;, return, ;, case]
[;, return, ;, case, Token, ., SETTER_DEF, :, validateObjectLitSetKey, (, n, ), ;, return, ;, case, Token, ., STRING_KEY, :]
[;, case, Token, ., SETTER_DEF, :, validateObjectLitSetKey, (, n, ), ;, return, ;, case, Token, ., STRING_KEY, :, validateObjectLitStringKey, (]
[(, n, ), ;, return, ;, case, Token, ., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;, return, ;, default, :]
[), ;, return, ;, case, Token, ., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;, return, ;, default, :, violation, (]
[), ;, return, ;, case, Token, ., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;, return, ;, default, :, violation, (]
[return, ;, case, Token, ., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;, return, ;, default, :, violation, (, "Expected object literal key expression but was ", +]
[return, ;, case, Token, ., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;, return, ;, default, :, violation, (, "Expected object literal key expression but was ", +]
[., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;, return, ;, default, :, violation, (, "Expected object literal key expression but was ", +, Token, ., name, (]
[., STRING_KEY, :, validateObjectLitStringKey, (, n, ), ;, return, ;, default, :, violation, (, "Expected object literal key expression but was ", +, Token, ., name, (]
[;, return, ;, default, :, violation, (, "Expected object literal key expression but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,]
[n, ., getType, (, ), ), ,, n, ), ;, }, }, private, void, validateObjectLitGetKey, (, Node, n, ), {]
[getType, (, ), ), ,, n, ), ;, }, }, private, void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType, (]
[getType, (, ), ), ,, n, ), ;, }, }, private, void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType, (]
[,, n, ), ;, }, }, private, void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType, (, Token, ., GETTER_DEF, ,]
[;, }, }, private, void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType, (, Token, ., GETTER_DEF, ,, n, ), ;]
[}, private, void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType, (, Token, ., GETTER_DEF, ,, n, ), ;, validateChildCount, (]
[void, validateObjectLitGetKey, (, Node, n, ), {, validateNodeType, (, Token, ., GETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., GETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;]
[), {, validateNodeType, (, Token, ., GETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (]
[GETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =]
[GETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =]
[(, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;]
[,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (]
[(, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (]
[n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !]
[n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !]
[n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !]
[n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !]
[), ;, if, (, !, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {]
[if, (, !, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {, violation, (]
[!, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,]
[getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =]
[getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =]
[isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (]
[violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (]
[violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (]
[}, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (, functionParams, ., hasChildren, (, ), ), {]
[functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (, functionParams, ., hasChildren, (, ), ), {, violation, (]
[function, ., getChildAtIndex, (, 1, ), ;, if, (, functionParams, ., hasChildren, (, ), ), {, violation, (, "get methods must not have parameters.", ,]
[), ), {, violation, (, "get methods must not have parameters.", ,, n, ), ;, }, }, private, void, validateObjectLitSetKey, (, Node, n, ), {]
[{, violation, (, "get methods must not have parameters.", ,, n, ), ;, }, }, private, void, validateObjectLitSetKey, (, Node, n, ), {, validateNodeType, (]
[{, violation, (, "get methods must not have parameters.", ,, n, ), ;, }, }, private, void, validateObjectLitSetKey, (, Node, n, ), {, validateNodeType, (]
[,, n, ), ;, }, }, private, void, validateObjectLitSetKey, (, Node, n, ), {, validateNodeType, (, Token, ., SETTER_DEF, ,]
[;, }, }, private, void, validateObjectLitSetKey, (, Node, n, ), {, validateNodeType, (, Token, ., SETTER_DEF, ,, n, ), ;]
[}, private, void, validateObjectLitSetKey, (, Node, n, ), {, validateNodeType, (, Token, ., SETTER_DEF, ,, n, ), ;, validateChildCount, (]
[void, validateObjectLitSetKey, (, Node, n, ), {, validateNodeType, (, Token, ., SETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., SETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;]
[), {, validateNodeType, (, Token, ., SETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (]
[SETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =]
[SETTER_DEF, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =]
[(, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;]
[,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (]
[(, n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (]
[n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !]
[n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !]
[n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !]
[n, ), ;, Node, function, =, n, ., getFirstChild, (, ), ;, validateFunctionExpression, (, function, ), ;, if, (, !]
[), ;, if, (, !, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {]
[if, (, !, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {, violation, (]
[!, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,]
[getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =]
[getString, (, ), ., isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =]
[isEmpty, (, ), ), {, violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (]
[violation, (, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (]
[(, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (, !]
[(, "Expected unnamed function expression.", ,, n, ), ;, }, Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (, !]
[Node, functionParams, =, function, ., getChildAtIndex, (, 1, ), ;, if, (, !, functionParams, ., hasOneChild, (, ), ), {]
[=, function, ., getChildAtIndex, (, 1, ), ;, if, (, !, functionParams, ., hasOneChild, (, ), ), {, violation, (]
[., getChildAtIndex, (, 1, ), ;, if, (, !, functionParams, ., hasOneChild, (, ), ), {, violation, (, "set methods must have exactly one parameter.", ,]
[), ), {, violation, (, "set methods must have exactly one parameter.", ,, n, ), ;, }, }, private, void, validateObjectLitStringKey, (, Node, n, ), {]
[{, violation, (, "set methods must have exactly one parameter.", ,, n, ), ;, }, }, private, void, validateObjectLitStringKey, (, Node, n, ), {, validateNodeType, (]
[{, violation, (, "set methods must have exactly one parameter.", ,, n, ), ;, }, }, private, void, validateObjectLitStringKey, (, Node, n, ), {, validateNodeType, (]
[,, n, ), ;, }, }, private, void, validateObjectLitStringKey, (, Node, n, ), {, validateNodeType, (, Token, ., STRING_KEY, ,]
[;, }, }, private, void, validateObjectLitStringKey, (, Node, n, ), {, validateNodeType, (, Token, ., STRING_KEY, ,, n, ), ;]
[}, private, void, validateObjectLitStringKey, (, Node, n, ), {, validateNodeType, (, Token, ., STRING_KEY, ,, n, ), ;, validateChildCount, (]
[void, validateObjectLitStringKey, (, Node, n, ), {, validateNodeType, (, Token, ., STRING_KEY, ,, n, ), ;, validateChildCount, (, n, ,]
[Node, n, ), {, validateNodeType, (, Token, ., STRING_KEY, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;]
[), {, validateNodeType, (, Token, ., STRING_KEY, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (]
[(, Token, ., STRING_KEY, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;]
[., STRING_KEY, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, validateExpression, (]
[., STRING_KEY, ,, n, ), ;, validateChildCount, (, n, ,, 1, ), ;, validateObjectLiteralKeyName, (, n, ), ;, validateExpression, (]
[validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateObjectLiteralKeyName, (, Node, n, ), {, if, (]
[validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateObjectLiteralKeyName, (, Node, n, ), {, if, (]
[}, private, void, validateObjectLiteralKeyName, (, Node, n, ), {, if, (, n, ., isQuotedString, (, ), ), {, try, {]
[}, private, void, validateObjectLiteralKeyName, (, Node, n, ), {, if, (, n, ., isQuotedString, (, ), ), {, try, {]
[isQuotedString, (, ), ), {, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {]
[), ), {, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (]
[), ), {, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (]
[{, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "getString failed for", +]
[{, try, {, n, ., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "getString failed for", +]
[., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "getString failed for", +, Token, ., name, (]
[., getString, (, ), ;, }, catch, (, UnsupportedOperationException, e, ), {, violation, (, "getString failed for", +, Token, ., name, (]
[(, UnsupportedOperationException, e, ), {, violation, (, "getString failed for", +, Token, ., name, (, n, ., getType, (, ), ), ,]
["getString failed for", +, Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, else, {]
[Token, ., name, (, n, ., getType, (, ), ), ,, n, ), ;, }, }, else, {, validateNonEmptyString, (]
[;, }, }, else, {, validateNonEmptyString, (, n, ), ;, }, }, private, void, validateUnaryOp, (, Node, n, ), {]
[}, else, {, validateNonEmptyString, (, n, ), ;, }, }, private, void, validateUnaryOp, (, Node, n, ), {, validateChildCount, (]
[{, validateNonEmptyString, (, n, ), ;, }, }, private, void, validateUnaryOp, (, Node, n, ), {, validateChildCount, (, n, ,]
[n, ), ;, }, }, private, void, validateUnaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 1, ), ;]
[;, }, }, private, void, validateUnaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (]
[;, }, }, private, void, validateUnaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 1, ), ;, validateExpression, (]
[), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateBinaryOp, (, Node, n, ), {]
[validateExpression, (, n, ., getFirstChild, (, ), ), ;, }, private, void, validateBinaryOp, (, Node, n, ), {, validateChildCount, (]
[n, ., getFirstChild, (, ), ), ;, }, private, void, validateBinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,]
[(, ), ), ;, }, private, void, validateBinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;]
[), ;, }, private, void, validateBinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (]
[), ;, }, private, void, validateBinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (]
[Node, n, ), {, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;]
[), {, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (]
[), {, validateChildCount, (, n, ,, 2, ), ;, validateExpression, (, n, ., getFirstChild, (, ), ), ;, validateExpression, (]
[), ;, validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateTrinaryOp, (, Node, n, ), {]
[validateExpression, (, n, ., getLastChild, (, ), ), ;, }, private, void, validateTrinaryOp, (, Node, n, ), {, validateChildCount, (]
[n, ., getLastChild, (, ), ), ;, }, private, void, validateTrinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,]
[;, }, private, void, validateTrinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 3, ), ;, Node, first, =]
[;, }, private, void, validateTrinaryOp, (, Node, n, ), {, validateChildCount, (, n, ,, 3, ), ;, Node, first, =]
[Node, n, ), {, validateChildCount, (, n, ,, 3, ), ;, Node, first, =, n, ., getFirstChild, (, ), ;]
[), {, validateChildCount, (, n, ,, 3, ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, validateExpression, (]
[(, n, ,, 3, ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, validateExpression, (, first, ), ;]
[,, 3, ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, validateExpression, (, first, ), ;, validateExpression, (]
[,, 3, ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, validateExpression, (, first, ), ;, validateExpression, (]
[n, ., getFirstChild, (, ), ;, validateExpression, (, first, ), ;, validateExpression, (, first, ., getNext, (, ), ), ;]
[getFirstChild, (, ), ;, validateExpression, (, first, ), ;, validateExpression, (, first, ., getNext, (, ), ), ;, validateExpression, (]
[getFirstChild, (, ), ;, validateExpression, (, first, ), ;, validateExpression, (, first, ., getNext, (, ), ), ;, validateExpression, (]
[(, n, ., getLastChild, (, ), ), ;, }, private, void, violation, (, String, message, ,, Node, n, ), {]
[(, n, ., getLastChild, (, ), ), ;, }, private, void, violation, (, String, message, ,, Node, n, ), {]
[(, ), ), ;, }, private, void, violation, (, String, message, ,, Node, n, ), {, violationHandler, ., handleViolation, (]
[), ;, }, private, void, violation, (, String, message, ,, Node, n, ), {, violationHandler, ., handleViolation, (, message, ,]
[(, message, ,, n, ), ;, }, private, void, validateNodeType, (, int, type, ,, Node, n, ), {, if, (]
[(, message, ,, n, ), ;, }, private, void, validateNodeType, (, int, type, ,, Node, n, ), {, if, (]
[(, message, ,, n, ), ;, }, private, void, validateNodeType, (, int, type, ,, Node, n, ), {, if, (]
[}, private, void, validateNodeType, (, int, type, ,, Node, n, ), {, if, (, n, ., getType, (, ), !=]
[validateNodeType, (, int, type, ,, Node, n, ), {, if, (, n, ., getType, (, ), !=, type, ), {]
[int, type, ,, Node, n, ), {, if, (, n, ., getType, (, ), !=, type, ), {, violation, (]
[int, type, ,, Node, n, ), {, if, (, n, ., getType, (, ), !=, type, ), {, violation, (]
[int, type, ,, Node, n, ), {, if, (, n, ., getType, (, ), !=, type, ), {, violation, (]
[int, type, ,, Node, n, ), {, if, (, n, ., getType, (, ), !=, type, ), {, violation, (]
[,, Node, n, ), {, if, (, n, ., getType, (, ), !=, type, ), {, violation, (, "Expected ", +]
[,, Node, n, ), {, if, (, n, ., getType, (, ), !=, type, ), {, violation, (, "Expected ", +]
[{, if, (, n, ., getType, (, ), !=, type, ), {, violation, (, "Expected ", +, Token, ., name, (]
[n, ., getType, (, ), !=, type, ), {, violation, (, "Expected ", +, Token, ., name, (, type, ), +]
[getType, (, ), !=, type, ), {, violation, (, "Expected ", +, Token, ., name, (, type, ), +, " but was ", +]
[getType, (, ), !=, type, ), {, violation, (, "Expected ", +, Token, ., name, (, type, ), +, " but was ", +]
[type, ), {, violation, (, "Expected ", +, Token, ., name, (, type, ), +, " but was ", +, Token, ., name, (]
[type, ), {, violation, (, "Expected ", +, Token, ., name, (, type, ), +, " but was ", +, Token, ., name, (]
[Token, ., name, (, type, ), +, " but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,]
[,, n, ), ;, }, }, private, void, validateChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =]
[}, }, private, void, validateChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (]
[}, }, private, void, validateChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (]
[private, void, validateChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==]
[(, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==, 0, ), {]
[n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==, 0, ), {, valid, =]
[,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==, 0, ), {, valid, =, !]
[,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==, 0, ), {, valid, =, !]
[if, (, i, ==, 0, ), {, valid, =, !, n, ., hasChildren, (, ), ;, }, else, if, (]
[if, (, i, ==, 0, ), {, valid, =, !, n, ., hasChildren, (, ), ;, }, else, if, (]
[i, ==, 0, ), {, valid, =, !, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==]
[), {, valid, =, !, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 1, ), {]
[valid, =, !, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 1, ), {, valid, =]
[valid, =, !, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 1, ), {, valid, =]
[}, else, if, (, i, ==, 1, ), {, valid, =, n, ., hasOneChild, (, ), ;, }, else, {]
[if, (, i, ==, 1, ), {, valid, =, n, ., hasOneChild, (, ), ;, }, else, {, valid, =]
[(, i, ==, 1, ), {, valid, =, n, ., hasOneChild, (, ), ;, }, else, {, valid, =, (]
[(, i, ==, 1, ), {, valid, =, n, ., hasOneChild, (, ), ;, }, else, {, valid, =, (]
[(, i, ==, 1, ), {, valid, =, n, ., hasOneChild, (, ), ;, }, else, {, valid, =, (]
[valid, =, n, ., hasOneChild, (, ), ;, }, else, {, valid, =, (, n, ., getChildCount, (, ), ==]
[), ;, }, else, {, valid, =, (, n, ., getChildCount, (, ), ==, i, ), ;, }, if, (]
[;, }, else, {, valid, =, (, n, ., getChildCount, (, ), ==, i, ), ;, }, if, (, !]
[{, valid, =, (, n, ., getChildCount, (, ), ==, i, ), ;, }, if, (, !, valid, ), {]
[=, (, n, ., getChildCount, (, ), ==, i, ), ;, }, if, (, !, valid, ), {, violation, (]
[=, (, n, ., getChildCount, (, ), ==, i, ), ;, }, if, (, !, valid, ), {, violation, (]
[=, (, n, ., getChildCount, (, ), ==, i, ), ;, }, if, (, !, valid, ), {, violation, (]
[=, (, n, ., getChildCount, (, ), ==, i, ), ;, }, if, (, !, valid, ), {, violation, (]
[n, ., getChildCount, (, ), ==, i, ), ;, }, if, (, !, valid, ), {, violation, (, "Expected ", +]
[getChildCount, (, ), ==, i, ), ;, }, if, (, !, valid, ), {, violation, (, "Expected ", +, i, +]
[), ==, i, ), ;, }, if, (, !, valid, ), {, violation, (, "Expected ", +, i, +, " children, but was ", +]
[), ==, i, ), ;, }, if, (, !, valid, ), {, violation, (, "Expected ", +, i, +, " children, but was ", +]
[if, (, !, valid, ), {, violation, (, "Expected ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,]
[,, n, ), ;, }, }, private, void, validateMinimumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =]
[}, }, private, void, validateMinimumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (]
[}, }, private, void, validateMinimumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (]
[private, void, validateMinimumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==]
[(, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==, 1, ), {]
[n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==, 1, ), {, valid, =]
[n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==, 1, ), {, valid, =]
[;, if, (, i, ==, 1, ), {, valid, =, n, ., hasChildren, (, ), ;, }, else, if, (]
[;, if, (, i, ==, 1, ), {, valid, =, n, ., hasChildren, (, ), ;, }, else, if, (]
[(, i, ==, 1, ), {, valid, =, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==]
[1, ), {, valid, =, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 2, ), {]
[{, valid, =, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 2, ), {, valid, =]
[{, valid, =, n, ., hasChildren, (, ), ;, }, else, if, (, i, ==, 2, ), {, valid, =]
[}, else, if, (, i, ==, 2, ), {, valid, =, n, ., hasMoreThanOneChild, (, ), ;, }, else, {]
[if, (, i, ==, 2, ), {, valid, =, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =]
[if, (, i, ==, 2, ), {, valid, =, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =]
[if, (, i, ==, 2, ), {, valid, =, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =]
[{, valid, =, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (, ), >=]
[hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (, ), >=, i, ;, }, if, (]
[(, ), ;, }, else, {, valid, =, n, ., getChildCount, (, ), >=, i, ;, }, if, (, !]
[}, else, {, valid, =, n, ., getChildCount, (, ), >=, i, ;, }, if, (, !, valid, ), {]
[{, valid, =, n, ., getChildCount, (, ), >=, i, ;, }, if, (, !, valid, ), {, violation, (]
[{, valid, =, n, ., getChildCount, (, ), >=, i, ;, }, if, (, !, valid, ), {, violation, (]
[{, valid, =, n, ., getChildCount, (, ), >=, i, ;, }, if, (, !, valid, ), {, violation, (]
[{, valid, =, n, ., getChildCount, (, ), >=, i, ;, }, if, (, !, valid, ), {, violation, (]
[=, n, ., getChildCount, (, ), >=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected at least ", +]
[., getChildCount, (, ), >=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected at least ", +, i, +]
[(, ), >=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected at least ", +, i, +, " children, but was ", +]
[(, ), >=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected at least ", +, i, +, " children, but was ", +]
[if, (, !, valid, ), {, violation, (, "Expected at least ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,]
[,, n, ), ;, }, }, private, void, validateMaximumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =]
[}, }, private, void, validateMaximumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (]
[}, }, private, void, validateMaximumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (]
[private, void, validateMaximumChildCount, (, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==]
[(, Node, n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==, 1, ), {]
[n, ,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==, 1, ), {, valid, =]
[,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==, 1, ), {, valid, =, !]
[,, int, i, ), {, boolean, valid, =, false, ;, if, (, i, ==, 1, ), {, valid, =, !]
[;, if, (, i, ==, 1, ), {, valid, =, !, n, ., hasMoreThanOneChild, (, ), ;, }, else, {]
[(, i, ==, 1, ), {, valid, =, !, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =]
[(, i, ==, 1, ), {, valid, =, !, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =]
[(, i, ==, 1, ), {, valid, =, !, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =]
[valid, =, !, n, ., hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (, ), <=]
[hasMoreThanOneChild, (, ), ;, }, else, {, valid, =, n, ., getChildCount, (, ), <=, i, ;, }, if, (]
[(, ), ;, }, else, {, valid, =, n, ., getChildCount, (, ), <=, i, ;, }, if, (, !]
[}, else, {, valid, =, n, ., getChildCount, (, ), <=, i, ;, }, if, (, !, valid, ), {]
[{, valid, =, n, ., getChildCount, (, ), <=, i, ;, }, if, (, !, valid, ), {, violation, (]
[{, valid, =, n, ., getChildCount, (, ), <=, i, ;, }, if, (, !, valid, ), {, violation, (]
[{, valid, =, n, ., getChildCount, (, ), <=, i, ;, }, if, (, !, valid, ), {, violation, (]
[{, valid, =, n, ., getChildCount, (, ), <=, i, ;, }, if, (, !, valid, ), {, violation, (]
[=, n, ., getChildCount, (, ), <=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected no more than ", +]
[., getChildCount, (, ), <=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected no more than ", +, i, +]
[(, ), <=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected no more than ", +, i, +, " children, but was ", +]
[(, ), <=, i, ;, }, if, (, !, valid, ), {, violation, (, "Expected no more than ", +, i, +, " children, but was ", +]
[if, (, !, valid, ), {, violation, (, "Expected no more than ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,]
