[., List, ;, public, abstract, class, Statistics, {, public, static, double, calculateMean, (, Number, [, ], values, ), {, return]
[;, public, abstract, class, Statistics, {, public, static, double, calculateMean, (, Number, [, ], values, ), {, return, calculateMean, (]
[abstract, class, Statistics, {, public, static, double, calculateMean, (, Number, [, ], values, ), {, return, calculateMean, (, values, ,]
[true, ), ;, }, public, static, double, calculateMean, (, Number, [, ], values, ,, boolean, includeNullAndNaN, ), {, if, (]
[true, ), ;, }, public, static, double, calculateMean, (, Number, [, ], values, ,, boolean, includeNullAndNaN, ), {, if, (]
[;, }, public, static, double, calculateMean, (, Number, [, ], values, ,, boolean, includeNullAndNaN, ), {, if, (, values, ==]
[double, calculateMean, (, Number, [, ], values, ,, boolean, includeNullAndNaN, ), {, if, (, values, ==, null, ), {, throw]
[Number, [, ], values, ,, boolean, includeNullAndNaN, ), {, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, sum, =]
[{, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, sum, =, 0.0, ;, double, current, ;, int, counter, =]
[;, }, double, sum, =, 0.0, ;, double, current, ;, int, counter, =, 0, ;, for, (, int, i, =]
[double, sum, =, 0.0, ;, double, current, ;, int, counter, =, 0, ;, for, (, int, i, =, 0, ;]
[double, sum, =, 0.0, ;, double, current, ;, int, counter, =, 0, ;, for, (, int, i, =, 0, ;]
[=, 0.0, ;, double, current, ;, int, counter, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[=, 0.0, ;, double, current, ;, int, counter, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[current, ;, int, counter, =, 0, ;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;]
[current, ;, int, counter, =, 0, ;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (, values, []
[=, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], !=]
[i, <, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], !=, null, ), {]
[values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], !=, null, ), {, current, =]
[values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], !=, null, ), {, current, =]
[values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], !=, null, ), {, current, =]
[length, ;, i, ++, ), {, if, (, values, [, i, ], !=, null, ), {, current, =, values, []
[i, ], !=, null, ), {, current, =, values, [, i, ], ., doubleValue, (, ), ;, }, else, {]
[!=, null, ), {, current, =, values, [, i, ], ., doubleValue, (, ), ;, }, else, {, current, =]
[!=, null, ), {, current, =, values, [, i, ], ., doubleValue, (, ), ;, }, else, {, current, =]
[[, i, ], ., doubleValue, (, ), ;, }, else, {, current, =, Double, ., NaN, ;, }, if, (]
[[, i, ], ., doubleValue, (, ), ;, }, else, {, current, =, Double, ., NaN, ;, }, if, (]
[], ., doubleValue, (, ), ;, }, else, {, current, =, Double, ., NaN, ;, }, if, (, includeNullAndNaN, ||]
[., doubleValue, (, ), ;, }, else, {, current, =, Double, ., NaN, ;, }, if, (, includeNullAndNaN, ||, !]
[., doubleValue, (, ), ;, }, else, {, current, =, Double, ., NaN, ;, }, if, (, includeNullAndNaN, ||, !]
[;, }, else, {, current, =, Double, ., NaN, ;, }, if, (, includeNullAndNaN, ||, !, Double, ., isNaN, (]
[current, =, Double, ., NaN, ;, }, if, (, includeNullAndNaN, ||, !, Double, ., isNaN, (, current, ), ), {]
[Double, ., NaN, ;, }, if, (, includeNullAndNaN, ||, !, Double, ., isNaN, (, current, ), ), {, sum, =]
[Double, ., NaN, ;, }, if, (, includeNullAndNaN, ||, !, Double, ., isNaN, (, current, ), ), {, sum, =]
[NaN, ;, }, if, (, includeNullAndNaN, ||, !, Double, ., isNaN, (, current, ), ), {, sum, =, sum, +]
[}, if, (, includeNullAndNaN, ||, !, Double, ., isNaN, (, current, ), ), {, sum, =, sum, +, current, ;]
[}, if, (, includeNullAndNaN, ||, !, Double, ., isNaN, (, current, ), ), {, sum, =, sum, +, current, ;]
[isNaN, (, current, ), ), {, sum, =, sum, +, current, ;, counter, ++, ;, }, }, double, result, =]
[(, current, ), ), {, sum, =, sum, +, current, ;, counter, ++, ;, }, }, double, result, =, (]
[(, current, ), ), {, sum, =, sum, +, current, ;, counter, ++, ;, }, }, double, result, =, (]
[), ), {, sum, =, sum, +, current, ;, counter, ++, ;, }, }, double, result, =, (, sum, /]
[=, sum, +, current, ;, counter, ++, ;, }, }, double, result, =, (, sum, /, counter, ), ;, return]
[(, sum, /, counter, ), ;, return, result, ;, }, public, static, double, calculateMean, (, Collection, values, ), {, return]
[/, counter, ), ;, return, result, ;, }, public, static, double, calculateMean, (, Collection, values, ), {, return, calculateMean, (]
[), ;, return, result, ;, }, public, static, double, calculateMean, (, Collection, values, ), {, return, calculateMean, (, values, ,]
[values, ,, true, ), ;, }, public, static, double, calculateMean, (, Collection, values, ,, boolean, includeNullAndNaN, ), {, if, (]
[values, ,, true, ), ;, }, public, static, double, calculateMean, (, Collection, values, ,, boolean, includeNullAndNaN, ), {, if, (]
[true, ), ;, }, public, static, double, calculateMean, (, Collection, values, ,, boolean, includeNullAndNaN, ), {, if, (, values, ==]
[public, static, double, calculateMean, (, Collection, values, ,, boolean, includeNullAndNaN, ), {, if, (, values, ==, null, ), {, throw]
[calculateMean, (, Collection, values, ,, boolean, includeNullAndNaN, ), {, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, int, count, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, int, count, =, 0, ;, double, total, =]
[new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, int, count, =, 0, ;, double, total, =, 0.0, ;, Iterator, iterator, =]
[new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, int, count, =, 0, ;, double, total, =, 0.0, ;, Iterator, iterator, =]
[count, =, 0, ;, double, total, =, 0.0, ;, Iterator, iterator, =, values, ., iterator, (, ), ;, while, (]
[count, =, 0, ;, double, total, =, 0.0, ;, Iterator, iterator, =, values, ., iterator, (, ), ;, while, (]
[iterator, =, values, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Object, object, =]
[iterator, =, values, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Object, object, =]
[while, (, iterator, ., hasNext, (, ), ), {, Object, object, =, iterator, ., next, (, ), ;, if, (]
[while, (, iterator, ., hasNext, (, ), ), {, Object, object, =, iterator, ., next, (, ), ;, if, (]
[iterator, ., hasNext, (, ), ), {, Object, object, =, iterator, ., next, (, ), ;, if, (, object, ==]
[), {, Object, object, =, iterator, ., next, (, ), ;, if, (, object, ==, null, ), {, if, (]
[=, iterator, ., next, (, ), ;, if, (, object, ==, null, ), {, if, (, includeNullAndNaN, ), {, return]
[=, iterator, ., next, (, ), ;, if, (, object, ==, null, ), {, if, (, includeNullAndNaN, ), {, return]
[==, null, ), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {, if, (]
[==, null, ), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {, if, (]
[{, return, Double, ., NaN, ;, }, }, else, {, if, (, object, instanceof, Number, ), {, Number, number, =]
[., NaN, ;, }, }, else, {, if, (, object, instanceof, Number, ), {, Number, number, =, (, Number, )]
[else, {, if, (, object, instanceof, Number, ), {, Number, number, =, (, Number, ), object, ;, double, value, =]
[else, {, if, (, object, instanceof, Number, ), {, Number, number, =, (, Number, ), object, ;, double, value, =]
[{, Number, number, =, (, Number, ), object, ;, double, value, =, number, ., doubleValue, (, ), ;, if, (]
[{, Number, number, =, (, Number, ), object, ;, double, value, =, number, ., doubleValue, (, ), ;, if, (]
[(, Number, ), object, ;, double, value, =, number, ., doubleValue, (, ), ;, if, (, Double, ., isNaN, (]
[value, =, number, ., doubleValue, (, ), ;, if, (, Double, ., isNaN, (, value, ), ), {, if, (]
[doubleValue, (, ), ;, if, (, Double, ., isNaN, (, value, ), ), {, if, (, includeNullAndNaN, ), {, return]
[doubleValue, (, ), ;, if, (, Double, ., isNaN, (, value, ), ), {, if, (, includeNullAndNaN, ), {, return]
[isNaN, (, value, ), ), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {]
[value, ), ), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {, total, =]
[value, ), ), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {, total, =]
[), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {, total, =, total, +]
[), {, if, (, includeNullAndNaN, ), {, return, Double, ., NaN, ;, }, }, else, {, total, =, total, +]
[{, return, Double, ., NaN, ;, }, }, else, {, total, =, total, +, number, ., doubleValue, (, ), ;]
[Double, ., NaN, ;, }, }, else, {, total, =, total, +, number, ., doubleValue, (, ), ;, count, =]
[Double, ., NaN, ;, }, }, else, {, total, =, total, +, number, ., doubleValue, (, ), ;, count, =]
[NaN, ;, }, }, else, {, total, =, total, +, number, ., doubleValue, (, ), ;, count, =, count, +]
[=, total, +, number, ., doubleValue, (, ), ;, count, =, count, +, 1, ;, }, }, }, }, return]
[=, total, +, number, ., doubleValue, (, ), ;, count, =, count, +, 1, ;, }, }, }, }, return]
[+, number, ., doubleValue, (, ), ;, count, =, count, +, 1, ;, }, }, }, }, return, total, /]
[}, }, }, }, return, total, /, count, ;, }, public, static, double, calculateMedian, (, List, values, ), {, return]
[}, }, return, total, /, count, ;, }, public, static, double, calculateMedian, (, List, values, ), {, return, calculateMedian, (]
[return, total, /, count, ;, }, public, static, double, calculateMedian, (, List, values, ), {, return, calculateMedian, (, values, ,]
[,, true, ), ;, }, public, static, double, calculateMedian, (, List, values, ,, boolean, copyAndSort, ), {, double, result, =]
[,, true, ), ;, }, public, static, double, calculateMedian, (, List, values, ,, boolean, copyAndSort, ), {, double, result, =]
[static, double, calculateMedian, (, List, values, ,, boolean, copyAndSort, ), {, double, result, =, Double, ., NaN, ;, if, (]
[static, double, calculateMedian, (, List, values, ,, boolean, copyAndSort, ), {, double, result, =, Double, ., NaN, ;, if, (]
[calculateMedian, (, List, values, ,, boolean, copyAndSort, ), {, double, result, =, Double, ., NaN, ;, if, (, values, !=]
[boolean, copyAndSort, ), {, double, result, =, Double, ., NaN, ;, if, (, values, !=, null, ), {, if, (]
[=, Double, ., NaN, ;, if, (, values, !=, null, ), {, if, (, copyAndSort, ), {, int, itemCount, =]
[=, Double, ., NaN, ;, if, (, values, !=, null, ), {, if, (, copyAndSort, ), {, int, itemCount, =]
[null, ), {, if, (, copyAndSort, ), {, int, itemCount, =, values, ., size, (, ), ;, List, copy, =]
[if, (, copyAndSort, ), {, int, itemCount, =, values, ., size, (, ), ;, List, copy, =, new, ArrayList, (]
[values, ., size, (, ), ;, List, copy, =, new, ArrayList, (, itemCount, ), ;, for, (, int, i, =]
[size, (, ), ;, List, copy, =, new, ArrayList, (, itemCount, ), ;, for, (, int, i, =, 0, ;]
[size, (, ), ;, List, copy, =, new, ArrayList, (, itemCount, ), ;, for, (, int, i, =, 0, ;]
[), ;, List, copy, =, new, ArrayList, (, itemCount, ), ;, for, (, int, i, =, 0, ;, i, <]
[List, copy, =, new, ArrayList, (, itemCount, ), ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;]
[List, copy, =, new, ArrayList, (, itemCount, ), ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;]
[ArrayList, (, itemCount, ), ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {]
[ArrayList, (, itemCount, ), ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, copy, ., add, (]
[(, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, copy, ., add, (, i, ,]
[(, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, copy, ., add, (, i, ,]
[0, ;, i, <, itemCount, ;, i, ++, ), {, copy, ., add, (, i, ,, values, ., get, (]
[;, i, ++, ), {, copy, ., add, (, i, ,, values, ., get, (, i, ), ), ;, }]
[;, i, ++, ), {, copy, ., add, (, i, ,, values, ., get, (, i, ), ), ;, }]
[{, copy, ., add, (, i, ,, values, ., get, (, i, ), ), ;, }, Collections, ., sort, (]
[add, (, i, ,, values, ., get, (, i, ), ), ;, }, Collections, ., sort, (, copy, ), ;]
[i, ,, values, ., get, (, i, ), ), ;, }, Collections, ., sort, (, copy, ), ;, values, =]
[i, ), ), ;, }, Collections, ., sort, (, copy, ), ;, values, =, copy, ;, }, int, count, =]
[i, ), ), ;, }, Collections, ., sort, (, copy, ), ;, values, =, copy, ;, }, int, count, =]
[(, copy, ), ;, values, =, copy, ;, }, int, count, =, values, ., size, (, ), ;, if, (]
[(, copy, ), ;, values, =, copy, ;, }, int, count, =, values, ., size, (, ), ;, if, (]
[), ;, values, =, copy, ;, }, int, count, =, values, ., size, (, ), ;, if, (, count, >]
[;, }, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (]
[;, }, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (]
[;, }, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (]
[int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (, count, %]
[=, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==]
[), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (]
[), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (]
[if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >]
[{, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =]
[count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, )]
[count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, )]
[1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (]
[1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (]
[), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, (]
[), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, (]
[if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, (, count, -]
[>, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, (, count, -, 1, ), /]
[{, Number, value, =, (, Number, ), values, ., get, (, (, count, -, 1, ), /, 2, ), ;]
[value, =, (, Number, ), values, ., get, (, (, count, -, 1, ), /, 2, ), ;, result, =]
[value, =, (, Number, ), values, ., get, (, (, count, -, 1, ), /, 2, ), ;, result, =]
[1, ), /, 2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =]
[2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, )]
[2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, )]
[=, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (]
[doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (, 0, ), ;]
[), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (, 0, ), ;, result, =]
[), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (, 0, ), ;, result, =]
[get, (, 0, ), ;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =]
[), ;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, )]
[), ;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, )]
[value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (]
[value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (]
[value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (]
[doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (, count, /]
[), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (, count, /, 2, -]
[Number, value1, =, (, Number, ), values, ., get, (, count, /, 2, -, 1, ), ;, Number, value2, =]
[(, Number, ), values, ., get, (, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, )]
[(, Number, ), values, ., get, (, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, )]
[., get, (, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (]
[., get, (, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (]
[(, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /]
[2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;]
[1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;, result, =]
[1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;, result, =]
[), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;, result, =, (]
[), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;, result, =, (]
[), ;, Number, value2, =, (, Number, ), values, ., get, (, count, /, 2, ), ;, result, =, (]
[Number, ), values, ., get, (, count, /, 2, ), ;, result, =, (, value1, ., doubleValue, (, ), +]
[Number, ), values, ., get, (, count, /, 2, ), ;, result, =, (, value1, ., doubleValue, (, ), +]
[/, 2, ), ;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /]
[(, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;, }, }, }, return]
[return, result, ;, }, public, static, double, calculateMedian, (, List, values, ,, int, start, ,, int, end, ), {, return]
[;, }, public, static, double, calculateMedian, (, List, values, ,, int, start, ,, int, end, ), {, return, calculateMedian, (]
[public, static, double, calculateMedian, (, List, values, ,, int, start, ,, int, end, ), {, return, calculateMedian, (, values, ,]
[double, calculateMedian, (, List, values, ,, int, start, ,, int, end, ), {, return, calculateMedian, (, values, ,, start, ,]
[(, List, values, ,, int, start, ,, int, end, ), {, return, calculateMedian, (, values, ,, start, ,, end, ,]
[static, double, calculateMedian, (, List, values, ,, int, start, ,, int, end, ,, boolean, copyAndSort, ), {, double, result, =]
[static, double, calculateMedian, (, List, values, ,, int, start, ,, int, end, ,, boolean, copyAndSort, ), {, double, result, =]
[,, int, start, ,, int, end, ,, boolean, copyAndSort, ), {, double, result, =, Double, ., NaN, ;, if, (]
[,, boolean, copyAndSort, ), {, double, result, =, Double, ., NaN, ;, if, (, copyAndSort, ), {, List, working, =]
[), {, double, result, =, Double, ., NaN, ;, if, (, copyAndSort, ), {, List, working, =, new, ArrayList, (]
[), {, double, result, =, Double, ., NaN, ;, if, (, copyAndSort, ), {, List, working, =, new, ArrayList, (]
[), {, double, result, =, Double, ., NaN, ;, if, (, copyAndSort, ), {, List, working, =, new, ArrayList, (]
[double, result, =, Double, ., NaN, ;, if, (, copyAndSort, ), {, List, working, =, new, ArrayList, (, end, -]
[=, Double, ., NaN, ;, if, (, copyAndSort, ), {, List, working, =, new, ArrayList, (, end, -, start, +]
[), {, List, working, =, new, ArrayList, (, end, -, start, +, 1, ), ;, for, (, int, i, =]
[List, working, =, new, ArrayList, (, end, -, start, +, 1, ), ;, for, (, int, i, =, start, ;]
[List, working, =, new, ArrayList, (, end, -, start, +, 1, ), ;, for, (, int, i, =, start, ;]
[=, new, ArrayList, (, end, -, start, +, 1, ), ;, for, (, int, i, =, start, ;, i, <=]
[ArrayList, (, end, -, start, +, 1, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;]
[ArrayList, (, end, -, start, +, 1, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;]
[start, +, 1, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {]
[start, +, 1, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {]
[;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, working, ., add, (]
[;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, working, ., add, (]
[i, =, start, ;, i, <=, end, ;, i, ++, ), {, working, ., add, (, values, ., get, (]
[<=, end, ;, i, ++, ), {, working, ., add, (, values, ., get, (, i, ), ), ;, }]
[<=, end, ;, i, ++, ), {, working, ., add, (, values, ., get, (, i, ), ), ;, }]
[++, ), {, working, ., add, (, values, ., get, (, i, ), ), ;, }, Collections, ., sort, (]
[working, ., add, (, values, ., get, (, i, ), ), ;, }, Collections, ., sort, (, working, ), ;]
[add, (, values, ., get, (, i, ), ), ;, }, Collections, ., sort, (, working, ), ;, result, =]
[values, ., get, (, i, ), ), ;, }, Collections, ., sort, (, working, ), ;, result, =, calculateMedian, (]
[get, (, i, ), ), ;, }, Collections, ., sort, (, working, ), ;, result, =, calculateMedian, (, working, ,]
[sort, (, working, ), ;, result, =, calculateMedian, (, working, ,, false, ), ;, }, else, {, int, count, =]
[sort, (, working, ), ;, result, =, calculateMedian, (, working, ,, false, ), ;, }, else, {, int, count, =]
[sort, (, working, ), ;, result, =, calculateMedian, (, working, ,, false, ), ;, }, else, {, int, count, =]
[working, ), ;, result, =, calculateMedian, (, working, ,, false, ), ;, }, else, {, int, count, =, end, -]
[;, result, =, calculateMedian, (, working, ,, false, ), ;, }, else, {, int, count, =, end, -, start, +]
[(, working, ,, false, ), ;, }, else, {, int, count, =, end, -, start, +, 1, ;, if, (]
[(, working, ,, false, ), ;, }, else, {, int, count, =, end, -, start, +, 1, ;, if, (]
[,, false, ), ;, }, else, {, int, count, =, end, -, start, +, 1, ;, if, (, count, >]
[else, {, int, count, =, end, -, start, +, 1, ;, if, (, count, >, 0, ), {, if, (]
[else, {, int, count, =, end, -, start, +, 1, ;, if, (, count, >, 0, ), {, if, (]
[else, {, int, count, =, end, -, start, +, 1, ;, if, (, count, >, 0, ), {, if, (]
[int, count, =, end, -, start, +, 1, ;, if, (, count, >, 0, ), {, if, (, count, %]
[=, end, -, start, +, 1, ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==]
[1, ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (]
[1, ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (]
[if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >]
[{, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =]
[count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, )]
[count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, )]
[1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (]
[1, ), {, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (]
[{, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, start, +]
[{, if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, start, +]
[if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, start, +, (]
[if, (, count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, start, +, (]
[count, >, 1, ), {, Number, value, =, (, Number, ), values, ., get, (, start, +, (, count, -]
[), {, Number, value, =, (, Number, ), values, ., get, (, start, +, (, count, -, 1, ), /]
[value, =, (, Number, ), values, ., get, (, start, +, (, count, -, 1, ), /, 2, ), ;]
[(, Number, ), values, ., get, (, start, +, (, count, -, 1, ), /, 2, ), ;, result, =]
[(, Number, ), values, ., get, (, start, +, (, count, -, 1, ), /, 2, ), ;, result, =]
[1, ), /, 2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =]
[2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, )]
[2, ), ;, result, =, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, )]
[=, value, ., doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (]
[doubleValue, (, ), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (, start, ), ;]
[), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (, start, ), ;, result, =]
[), ;, }, else, {, Number, value, =, (, Number, ), values, ., get, (, start, ), ;, result, =]
[get, (, start, ), ;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =]
[), ;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, )]
[), ;, result, =, value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, )]
[value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (]
[value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (]
[value, ., doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (]
[doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (, start, +]
[doubleValue, (, ), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (, start, +]
[), ;, }, }, else, {, Number, value1, =, (, Number, ), values, ., get, (, start, +, count, /]
[}, }, else, {, Number, value1, =, (, Number, ), values, ., get, (, start, +, count, /, 2, -]
[=, (, Number, ), values, ., get, (, start, +, count, /, 2, -, 1, ), ;, Number, value2, =]
[), values, ., get, (, start, +, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, )]
[), values, ., get, (, start, +, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, )]
[(, start, +, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (]
[(, start, +, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (]
[+, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, start, +]
[+, count, /, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, start, +]
[/, 2, -, 1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /]
[1, ), ;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, ), ;]
[;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, ), ;, result, =]
[;, Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, ), ;, result, =]
[Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, ), ;, result, =, (]
[Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, ), ;, result, =, (]
[Number, value2, =, (, Number, ), values, ., get, (, start, +, count, /, 2, ), ;, result, =, (]
[values, ., get, (, start, +, count, /, 2, ), ;, result, =, (, value1, ., doubleValue, (, ), +]
[values, ., get, (, start, +, count, /, 2, ), ;, result, =, (, value1, ., doubleValue, (, ), +]
[/, 2, ), ;, result, =, (, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /]
[(, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0, ;, }, }, }, return]
[}, }, }, return, result, ;, }, public, static, double, getStdDev, (, Number, [, ], data, ), {, if, (]
[}, }, }, return, result, ;, }, public, static, double, getStdDev, (, Number, [, ], data, ), {, if, (]
[}, return, result, ;, }, public, static, double, getStdDev, (, Number, [, ], data, ), {, if, (, data, ==]
[}, public, static, double, getStdDev, (, Number, [, ], data, ), {, if, (, data, ==, null, ), {, throw]
[double, getStdDev, (, Number, [, ], data, ), {, if, (, data, ==, null, ), {, throw, new, IllegalArgumentException, (]
[data, ), {, if, (, data, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data' array.", ), ;, }, if, (]
[data, ), {, if, (, data, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data' array.", ), ;, }, if, (]
[data, ), {, if, (, data, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data' array.", ), ;, }, if, (]
[(, data, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data' array.", ), ;, }, if, (, data, ., length, ==]
[), {, throw, new, IllegalArgumentException, (, "Null 'data' array.", ), ;, }, if, (, data, ., length, ==, 0, ), {, throw]
[new, IllegalArgumentException, (, "Null 'data' array.", ), ;, }, if, (, data, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (]
[if, (, data, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Zero length 'data' array.", ), ;, }, double, avg, =]
[data, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Zero length 'data' array.", ), ;, }, double, avg, =, calculateMean, (]
[{, throw, new, IllegalArgumentException, (, "Zero length 'data' array.", ), ;, }, double, avg, =, calculateMean, (, data, ), ;, double, sum, =]
[;, }, double, avg, =, calculateMean, (, data, ), ;, double, sum, =, 0.0, ;, for, (, int, counter, =]
[double, avg, =, calculateMean, (, data, ), ;, double, sum, =, 0.0, ;, for, (, int, counter, =, 0, ;]
[double, avg, =, calculateMean, (, data, ), ;, double, sum, =, 0.0, ;, for, (, int, counter, =, 0, ;]
[=, calculateMean, (, data, ), ;, double, sum, =, 0.0, ;, for, (, int, counter, =, 0, ;, counter, <]
[=, calculateMean, (, data, ), ;, double, sum, =, 0.0, ;, for, (, int, counter, =, 0, ;, counter, <]
[), ;, double, sum, =, 0.0, ;, for, (, int, counter, =, 0, ;, counter, <, data, ., length, ;]
[), ;, double, sum, =, 0.0, ;, for, (, int, counter, =, 0, ;, counter, <, data, ., length, ;]
[for, (, int, counter, =, 0, ;, counter, <, data, ., length, ;, counter, ++, ), {, double, diff, =]
[for, (, int, counter, =, 0, ;, counter, <, data, ., length, ;, counter, ++, ), {, double, diff, =]
[for, (, int, counter, =, 0, ;, counter, <, data, ., length, ;, counter, ++, ), {, double, diff, =]
[for, (, int, counter, =, 0, ;, counter, <, data, ., length, ;, counter, ++, ), {, double, diff, =]
[int, counter, =, 0, ;, counter, <, data, ., length, ;, counter, ++, ), {, double, diff, =, data, []
[data, ., length, ;, counter, ++, ), {, double, diff, =, data, [, counter, ], ., doubleValue, (, ), -]
[length, ;, counter, ++, ), {, double, diff, =, data, [, counter, ], ., doubleValue, (, ), -, avg, ;]
[counter, ++, ), {, double, diff, =, data, [, counter, ], ., doubleValue, (, ), -, avg, ;, sum, =]
[counter, ++, ), {, double, diff, =, data, [, counter, ], ., doubleValue, (, ), -, avg, ;, sum, =]
[), {, double, diff, =, data, [, counter, ], ., doubleValue, (, ), -, avg, ;, sum, =, sum, +]
[), {, double, diff, =, data, [, counter, ], ., doubleValue, (, ), -, avg, ;, sum, =, sum, +]
[double, diff, =, data, [, counter, ], ., doubleValue, (, ), -, avg, ;, sum, =, sum, +, diff, *]
[[, counter, ], ., doubleValue, (, ), -, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return]
[[, counter, ], ., doubleValue, (, ), -, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return]
[doubleValue, (, ), -, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt, (]
[doubleValue, (, ), -, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt, (]
[), -, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt, (, sum, /]
[-, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt, (, sum, /, (]
[-, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt, (, sum, /, (]
[-, avg, ;, sum, =, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt, (, sum, /, (]
[=, sum, +, diff, *, diff, ;, }, return, Math, ., sqrt, (, sum, /, (, data, ., length, -]
[public, static, double, [, ], getLinearFit, (, Number, [, ], xData, ,, Number, [, ], yData, ), {, if, (]
[public, static, double, [, ], getLinearFit, (, Number, [, ], xData, ,, Number, [, ], yData, ), {, if, (]
[double, [, ], getLinearFit, (, Number, [, ], xData, ,, Number, [, ], yData, ), {, if, (, xData, ==]
[(, Number, [, ], xData, ,, Number, [, ], yData, ), {, if, (, xData, ==, null, ), {, throw]
[], xData, ,, Number, [, ], yData, ), {, if, (, xData, ==, null, ), {, throw, new, IllegalArgumentException, (]
[yData, ), {, if, (, xData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (]
[yData, ), {, if, (, xData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (]
[{, if, (, xData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==, null, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (]
[), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (]
[), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (]
[(, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=]
[(, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=]
[throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=, yData, ., length, ), {, throw]
[(, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (]
[length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", ), ;, }, double, [, ], result, =]
[., length, ), {, throw, new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", ), ;, }, double, [, ], result, =, new, double, []
[{, throw, new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", ), ;, }, double, [, ], result, =, new, double, [, 2, ], ;]
[{, throw, new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", ), ;, }, double, [, ], result, =, new, double, [, 2, ], ;]
[new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", ), ;, }, double, [, ], result, =, new, double, [, 2, ], ;, result, []
["Statistics.getLinearFit(): array lengths must be equal.", ), ;, }, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =]
[;, }, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, getSlope, (]
[double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, getSlope, (, xData, ,]
[result, =, new, double, [, 2, ], ;, result, [, 1, ], =, getSlope, (, xData, ,, yData, ), ;]
[result, =, new, double, [, 2, ], ;, result, [, 1, ], =, getSlope, (, xData, ,, yData, ), ;]
[new, double, [, 2, ], ;, result, [, 1, ], =, getSlope, (, xData, ,, yData, ), ;, result, []
[2, ], ;, result, [, 1, ], =, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =]
[2, ], ;, result, [, 1, ], =, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =]
[;, result, [, 1, ], =, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =, calculateMean, (]
[1, ], =, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =, calculateMean, (, yData, ), -]
[1, ], =, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =, calculateMean, (, yData, ), -]
[1, ], =, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =, calculateMean, (, yData, ), -]
[=, getSlope, (, xData, ,, yData, ), ;, result, [, 0, ], =, calculateMean, (, yData, ), -, result, []
[xData, ,, yData, ), ;, result, [, 0, ], =, calculateMean, (, yData, ), -, result, [, 1, ], *]
[yData, ), ;, result, [, 0, ], =, calculateMean, (, yData, ), -, result, [, 1, ], *, calculateMean, (]
[[, 0, ], =, calculateMean, (, yData, ), -, result, [, 1, ], *, calculateMean, (, xData, ), ;, return]
[;, }, public, static, double, getSlope, (, Number, [, ], xData, ,, Number, [, ], yData, ), {, if, (]
[;, }, public, static, double, getSlope, (, Number, [, ], xData, ,, Number, [, ], yData, ), {, if, (]
[public, static, double, getSlope, (, Number, [, ], xData, ,, Number, [, ], yData, ), {, if, (, xData, ==]
[(, Number, [, ], xData, ,, Number, [, ], yData, ), {, if, (, xData, ==, null, ), {, throw]
[], xData, ,, Number, [, ], yData, ), {, if, (, xData, ==, null, ), {, throw, new, IllegalArgumentException, (]
[yData, ), {, if, (, xData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (]
[yData, ), {, if, (, xData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (]
[{, if, (, xData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==, null, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'xData' argument.", ), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (]
[), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (]
[), ;, }, if, (, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (]
[(, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=]
[(, yData, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=]
[throw, new, IllegalArgumentException, (, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=, yData, ., length, ), {, throw]
[(, "Null 'yData' argument.", ), ;, }, if, (, xData, ., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (]
[xData, ., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, double, sx, =]
[yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, double, sx, =, 0.0, ,, sxx, =]
[{, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, double, sx, =, 0.0, ,, sxx, =, 0.0, ,, sxy, =]
[(, "Array lengths must be equal.", ), ;, }, double, sx, =, 0.0, ,, sxx, =, 0.0, ,, sxy, =, 0.0, ,, sy, =]
[=, 0.0, ,, sxx, =, 0.0, ,, sxy, =, 0.0, ,, sy, =, 0.0, ;, int, counter, ;, for, (]
[,, sxx, =, 0.0, ,, sxy, =, 0.0, ,, sy, =, 0.0, ;, int, counter, ;, for, (, counter, =]
[=, 0.0, ,, sxy, =, 0.0, ,, sy, =, 0.0, ;, int, counter, ;, for, (, counter, =, 0, ;]
[=, 0.0, ,, sxy, =, 0.0, ,, sy, =, 0.0, ;, int, counter, ;, for, (, counter, =, 0, ;]
[,, sxy, =, 0.0, ,, sy, =, 0.0, ;, int, counter, ;, for, (, counter, =, 0, ;, counter, <]
[,, sxy, =, 0.0, ,, sy, =, 0.0, ;, int, counter, ;, for, (, counter, =, 0, ;, counter, <]
[,, sy, =, 0.0, ;, int, counter, ;, for, (, counter, =, 0, ;, counter, <, xData, ., length, ;]
[,, sy, =, 0.0, ;, int, counter, ;, for, (, counter, =, 0, ;, counter, <, xData, ., length, ;]
[;, int, counter, ;, for, (, counter, =, 0, ;, counter, <, xData, ., length, ;, counter, ++, ), {]
[counter, ;, for, (, counter, =, 0, ;, counter, <, xData, ., length, ;, counter, ++, ), {, sx, =]
[counter, ;, for, (, counter, =, 0, ;, counter, <, xData, ., length, ;, counter, ++, ), {, sx, =]
[for, (, counter, =, 0, ;, counter, <, xData, ., length, ;, counter, ++, ), {, sx, =, sx, +]
[for, (, counter, =, 0, ;, counter, <, xData, ., length, ;, counter, ++, ), {, sx, =, sx, +]
[for, (, counter, =, 0, ;, counter, <, xData, ., length, ;, counter, ++, ), {, sx, =, sx, +]
[counter, =, 0, ;, counter, <, xData, ., length, ;, counter, ++, ), {, sx, =, sx, +, xData, []
[., length, ;, counter, ++, ), {, sx, =, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;]
[;, counter, ++, ), {, sx, =, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =]
[;, counter, ++, ), {, sx, =, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =]
[++, ), {, sx, =, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =, sxx, +]
[++, ), {, sx, =, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =, sxx, +]
[=, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =, sxx, +, Math, ., pow, (]
[=, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =, sxx, +, Math, ., pow, (]
[=, sx, +, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =, sxx, +, Math, ., pow, (]
[+, xData, [, counter, ], ., doubleValue, (, ), ;, sxx, =, sxx, +, Math, ., pow, (, xData, []
[(, ), ;, sxx, =, sxx, +, Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,]
[sxx, =, sxx, +, Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, ), ;]
[sxx, +, Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, ), ;, sxy, =]
[sxx, +, Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, ), ;, sxy, =]
[Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +]
[Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +]
[Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +]
[Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +]
[pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +, yData, []
[doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +, yData, [, counter, ], ., doubleValue, (, ), *]
[doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +, yData, [, counter, ], ., doubleValue, (, ), *]
[doubleValue, (, ), ,, 2, ), ;, sxy, =, sxy, +, yData, [, counter, ], ., doubleValue, (, ), *]
[), ,, 2, ), ;, sxy, =, sxy, +, yData, [, counter, ], ., doubleValue, (, ), *, xData, []
[sxy, +, yData, [, counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, ), ;]
[yData, [, counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, ), ;, sy, =]
[yData, [, counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, ), ;, sy, =]
[counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, ), ;, sy, =, sy, +]
[counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, ), ;, sy, =, sy, +]
[counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, ), ;, sy, =, sy, +]
[., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, ), ;, sy, =, sy, +, yData, []
[., doubleValue, (, ), ;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return]
[., doubleValue, (, ), ;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return]
[doubleValue, (, ), ;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (]
[doubleValue, (, ), ;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (]
[), ;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -]
[), ;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -]
[;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -, (]
[;, sy, =, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -, (]
[=, sy, +, yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -, (, sx, *]
[yData, [, counter, ], ., doubleValue, (, ), ;, }, return, (, sxy, -, (, sx, *, sy, ), /]
[], ., doubleValue, (, ), ;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /]
[., doubleValue, (, ), ;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /, (]
[., doubleValue, (, ), ;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /, (]
[(, ), ;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /, (, sxx, -]
[(, ), ;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /, (, sxx, -]
[), ;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /, (, sxx, -, (]
[), ;, }, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /, (, sxx, -, (]
[}, return, (, sxy, -, (, sx, *, sy, ), /, counter, ), /, (, sxx, -, (, sx, *]
[sxy, -, (, sx, *, sy, ), /, counter, ), /, (, sxx, -, (, sx, *, sx, ), /]
[;, }, public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, [, ], data2, ), {, if, (]
[;, }, public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, [, ], data2, ), {, if, (]
[public, static, double, getCorrelation, (, Number, [, ], data1, ,, Number, [, ], data2, ), {, if, (, data1, ==]
[(, Number, [, ], data1, ,, Number, [, ], data2, ), {, if, (, data1, ==, null, ), {, throw]
[], data1, ,, Number, [, ], data2, ), {, if, (, data1, ==, null, ), {, throw, new, IllegalArgumentException, (]
[data2, ), {, if, (, data1, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data1' argument.", ), ;, }, if, (]
[data2, ), {, if, (, data1, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data1' argument.", ), ;, }, if, (]
[{, if, (, data1, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data1' argument.", ), ;, }, if, (, data2, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data1' argument.", ), ;, }, if, (, data2, ==, null, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'data1' argument.", ), ;, }, if, (, data2, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ;, }, if, (, data2, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data2' argument.", ), ;, }, if, (]
[), ;, }, if, (, data2, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data2' argument.", ), ;, }, if, (]
[), ;, }, if, (, data2, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data2' argument.", ), ;, }, if, (]
[(, data2, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data2' argument.", ), ;, }, if, (, data1, ., length, !=]
[(, data2, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'data2' argument.", ), ;, }, if, (, data1, ., length, !=]
[throw, new, IllegalArgumentException, (, "Null 'data2' argument.", ), ;, }, if, (, data1, ., length, !=, data2, ., length, ), {, throw]
[(, "Null 'data2' argument.", ), ;, }, if, (, data1, ., length, !=, data2, ., length, ), {, throw, new, IllegalArgumentException, (]
[data1, ., length, !=, data2, ., length, ), {, throw, new, IllegalArgumentException, (, "'data1' and 'data2' arrays must have same length.", ), ;, }, int, n, =]
[data1, ., length, !=, data2, ., length, ), {, throw, new, IllegalArgumentException, (, "'data1' and 'data2' arrays must have same length.", ), ;, }, int, n, =]
[), {, throw, new, IllegalArgumentException, (, "'data1' and 'data2' arrays must have same length.", ), ;, }, int, n, =, data1, ., length, ;, double, sumX, =]
[(, "'data1' and 'data2' arrays must have same length.", ), ;, }, int, n, =, data1, ., length, ;, double, sumX, =, 0.0, ;, double, sumY, =]
[int, n, =, data1, ., length, ;, double, sumX, =, 0.0, ;, double, sumY, =, 0.0, ;, double, sumX2, =]
[length, ;, double, sumX, =, 0.0, ;, double, sumY, =, 0.0, ;, double, sumX2, =, 0.0, ;, double, sumY2, =]
[0.0, ;, double, sumY, =, 0.0, ;, double, sumX2, =, 0.0, ;, double, sumY2, =, 0.0, ;, double, sumXY, =]
[double, sumX2, =, 0.0, ;, double, sumY2, =, 0.0, ;, double, sumXY, =, 0.0, ;, for, (, int, i, =]
[=, 0.0, ;, double, sumY2, =, 0.0, ;, double, sumXY, =, 0.0, ;, for, (, int, i, =, 0, ;]
[=, 0.0, ;, double, sumY2, =, 0.0, ;, double, sumXY, =, 0.0, ;, for, (, int, i, =, 0, ;]
[;, double, sumY2, =, 0.0, ;, double, sumXY, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <]
[sumY2, =, 0.0, ;, double, sumXY, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[sumY2, =, 0.0, ;, double, sumXY, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[0.0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, 0.0, ;, if, (]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, 0.0, ;, if, (]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, 0.0, ;, if, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, 0.0, ;, if, (, data1, []
[i, <, n, ;, i, ++, ), {, double, x, =, 0.0, ;, if, (, data1, [, i, ], !=]
[;, i, ++, ), {, double, x, =, 0.0, ;, if, (, data1, [, i, ], !=, null, ), {]
[++, ), {, double, x, =, 0.0, ;, if, (, data1, [, i, ], !=, null, ), {, x, =]
[++, ), {, double, x, =, 0.0, ;, if, (, data1, [, i, ], !=, null, ), {, x, =]
[++, ), {, double, x, =, 0.0, ;, if, (, data1, [, i, ], !=, null, ), {, x, =]
[{, double, x, =, 0.0, ;, if, (, data1, [, i, ], !=, null, ), {, x, =, data1, []
[], !=, null, ), {, x, =, data1, [, i, ], ., doubleValue, (, ), ;, }, double, y, =]
[{, x, =, data1, [, i, ], ., doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if, (]
[{, x, =, data1, [, i, ], ., doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if, (]
[{, x, =, data1, [, i, ], ., doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if, (]
[=, data1, [, i, ], ., doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if, (, data2, []
[i, ], ., doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if, (, data2, [, i, ], !=]
[doubleValue, (, ), ;, }, double, y, =, 0.0, ;, if, (, data2, [, i, ], !=, null, ), {]
[), ;, }, double, y, =, 0.0, ;, if, (, data2, [, i, ], !=, null, ), {, y, =]
[), ;, }, double, y, =, 0.0, ;, if, (, data2, [, i, ], !=, null, ), {, y, =]
[), ;, }, double, y, =, 0.0, ;, if, (, data2, [, i, ], !=, null, ), {, y, =]
[}, double, y, =, 0.0, ;, if, (, data2, [, i, ], !=, null, ), {, y, =, data2, []
[data2, [, i, ], !=, null, ), {, y, =, data2, [, i, ], ., doubleValue, (, ), ;, }]
[i, ], !=, null, ), {, y, =, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =]
[i, ], !=, null, ), {, y, =, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =]
[!=, null, ), {, y, =, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX, +]
[), {, y, =, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;]
[y, =, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;, sumY, =]
[y, =, data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;, sumY, =]
[data2, [, i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY, +]
[i, ], ., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY, +, y, ;]
[., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY, +, y, ;, sumXY, =]
[., doubleValue, (, ), ;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY, +, y, ;, sumXY, =]
[(, ), ;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +]
[), ;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (]
[), ;, }, sumX, =, sumX, +, x, ;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (]
[}, sumX, =, sumX, +, x, ;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *]
[sumX, +, x, ;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;]
[x, ;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =]
[x, ;, sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =]
[sumY, =, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +]
[=, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +, (]
[=, sumY, +, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +, (]
[+, y, ;, sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *]
[sumXY, =, sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;]
[sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =]
[sumXY, +, (, x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =]
[(, x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +]
[x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +, (]
[x, *, y, ), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +, (]
[y, ), ;, sumX2, =, sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *]
[sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return]
[sumX2, +, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return]
[+, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (]
[+, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (]
[+, (, x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (]
[x, *, x, ), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (, n, *]
[x, ), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (, n, *, sumXY, -]
[x, ), ;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (, n, *, sumXY, -]
[;, sumY2, =, sumY2, +, (, y, *, y, ), ;, }, return, (, n, *, sumXY, -, sumX, *]
[sumY2, +, (, y, *, y, ), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /]
[sumY2, +, (, y, *, y, ), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /]
[*, y, ), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (]
[*, y, ), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (]
[y, ), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (]
[y, ), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (]
[y, ), ;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (]
[;, }, return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (, n, *]
[return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -]
[return, (, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -]
[n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *]
[-, sumX, *, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *]
[sumX, *, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (]
[sumX, *, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (]
[sumX, *, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (]
[sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *]
[/, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2, -]
[/, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2, -]
[., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2, -, sumY, *]
[(, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2, -, sumY, *, sumY, ), ,]
[[, ], getMovingAverage, (, Number, [, ], xData, ,, Number, [, ], yData, ,, int, period, ), {, if, (]
[[, ], getMovingAverage, (, Number, [, ], xData, ,, Number, [, ], yData, ,, int, period, ), {, if, (]
[[, ], getMovingAverage, (, Number, [, ], xData, ,, Number, [, ], yData, ,, int, period, ), {, if, (]
[Number, [, ], xData, ,, Number, [, ], yData, ,, int, period, ), {, if, (, xData, ., length, !=]
[Number, [, ], xData, ,, Number, [, ], yData, ,, int, period, ), {, if, (, xData, ., length, !=]
[[, ], yData, ,, int, period, ), {, if, (, xData, ., length, !=, yData, ., length, ), {, throw]
[,, int, period, ), {, if, (, xData, ., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (]
[(, xData, ., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, if, (]
[(, xData, ., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, if, (]
[., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, if, (, period, >]
[., length, !=, yData, ., length, ), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, if, (, period, >]
[), {, throw, new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, if, (, period, >, xData, ., length, ), {, throw]
[new, IllegalArgumentException, (, "Array lengths must be equal.", ), ;, }, if, (, period, >, xData, ., length, ), {, throw, new, IllegalArgumentException, (]
[xData, ., length, ), {, throw, new, IllegalArgumentException, (, "Period can't be longer than dataset.", ), ;, }, double, [, ], [, ], result, =]
[), {, throw, new, IllegalArgumentException, (, "Period can't be longer than dataset.", ), ;, }, double, [, ], [, ], result, =, new, double, []
[), {, throw, new, IllegalArgumentException, (, "Period can't be longer than dataset.", ), ;, }, double, [, ], [, ], result, =, new, double, []
[), {, throw, new, IllegalArgumentException, (, "Period can't be longer than dataset.", ), ;, }, double, [, ], [, ], result, =, new, double, []
[IllegalArgumentException, (, "Period can't be longer than dataset.", ), ;, }, double, [, ], [, ], result, =, new, double, [, xData, ., length, -]
[), ;, }, double, [, ], [, ], result, =, new, double, [, xData, ., length, -, period, ], []
[result, =, new, double, [, xData, ., length, -, period, ], [, 2, ], ;, for, (, int, i, =]
[new, double, [, xData, ., length, -, period, ], [, 2, ], ;, for, (, int, i, =, 0, ;]
[new, double, [, xData, ., length, -, period, ], [, 2, ], ;, for, (, int, i, =, 0, ;]
[[, xData, ., length, -, period, ], [, 2, ], ;, for, (, int, i, =, 0, ;, i, <]
[[, xData, ., length, -, period, ], [, 2, ], ;, for, (, int, i, =, 0, ;, i, <]
[-, period, ], [, 2, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;]
[-, period, ], [, 2, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;]
[2, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {]
[2, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {]
[2, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {, result, []
[int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {, result, [, i, ], []
[0, ;, i, <, result, ., length, ;, i, ++, ), {, result, [, i, ], [, 0, ], =]
[0, ;, i, <, result, ., length, ;, i, ++, ), {, result, [, i, ], [, 0, ], =]
[0, ;, i, <, result, ., length, ;, i, ++, ), {, result, [, i, ], [, 0, ], =]
[i, <, result, ., length, ;, i, ++, ), {, result, [, i, ], [, 0, ], =, xData, []
[i, <, result, ., length, ;, i, ++, ), {, result, [, i, ], [, 0, ], =, xData, []
[result, ., length, ;, i, ++, ), {, result, [, i, ], [, 0, ], =, xData, [, i, +]
[i, ], [, 0, ], =, xData, [, i, +, period, ], ., doubleValue, (, ), ;, double, sum, =]
[[, i, +, period, ], ., doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int, j, =]
[+, period, ], ., doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int, j, =, 0, ;]
[+, period, ], ., doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int, j, =, 0, ;]
[], ., doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int, j, =, 0, ;, j, <]
[doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int, j, =, 0, ;, j, <, period, ;]
[doubleValue, (, ), ;, double, sum, =, 0.0, ;, for, (, int, j, =, 0, ;, j, <, period, ;]
[double, sum, =, 0.0, ;, for, (, int, j, =, 0, ;, j, <, period, ;, j, ++, ), {]
[=, 0.0, ;, for, (, int, j, =, 0, ;, j, <, period, ;, j, ++, ), {, sum, +=]
[=, 0.0, ;, for, (, int, j, =, 0, ;, j, <, period, ;, j, ++, ), {, sum, +=]
[=, 0.0, ;, for, (, int, j, =, 0, ;, j, <, period, ;, j, ++, ), {, sum, +=]
[;, for, (, int, j, =, 0, ;, j, <, period, ;, j, ++, ), {, sum, +=, yData, []
[;, for, (, int, j, =, 0, ;, j, <, period, ;, j, ++, ), {, sum, +=, yData, []
[(, int, j, =, 0, ;, j, <, period, ;, j, ++, ), {, sum, +=, yData, [, i, +]
[period, ;, j, ++, ), {, sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }]
[j, ++, ), {, sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum, =]
[j, ++, ), {, sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum, =]
[), {, sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum, =, sum, /]
[sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;]
[sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;]
[sum, +=, yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;]
[yData, [, i, +, j, ], ., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;, result, []
[+, j, ], ., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;, result, [, i, ], []
[., doubleValue, (, ), ;, }, sum, =, sum, /, period, ;, result, [, i, ], [, 1, ], =]
[;, }, sum, =, sum, /, period, ;, result, [, i, ], [, 1, ], =, sum, ;, }, return]
