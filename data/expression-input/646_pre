[., util, ., FastMath, ;, public, abstract, class, AbstractRealMatrix, extends, RealLinearOperator, implements, RealMatrix, {, private, static, final, RealMatrixFormat, DEFAULT_FORMAT, =]
[., util, ., FastMath, ;, public, abstract, class, AbstractRealMatrix, extends, RealLinearOperator, implements, RealMatrix, {, private, static, final, RealMatrixFormat, DEFAULT_FORMAT, =]
[;, public, abstract, class, AbstractRealMatrix, extends, RealLinearOperator, implements, RealMatrix, {, private, static, final, RealMatrixFormat, DEFAULT_FORMAT, =, RealMatrixFormat, ., getInstance, (]
[;, public, abstract, class, AbstractRealMatrix, extends, RealLinearOperator, implements, RealMatrix, {, private, static, final, RealMatrixFormat, DEFAULT_FORMAT, =, RealMatrixFormat, ., getInstance, (]
[implements, RealMatrix, {, private, static, final, RealMatrixFormat, DEFAULT_FORMAT, =, RealMatrixFormat, ., getInstance, (, Locale, ., US, ), ;, static, {]
[implements, RealMatrix, {, private, static, final, RealMatrixFormat, DEFAULT_FORMAT, =, RealMatrixFormat, ., getInstance, (, Locale, ., US, ), ;, static, {]
[implements, RealMatrix, {, private, static, final, RealMatrixFormat, DEFAULT_FORMAT, =, RealMatrixFormat, ., getInstance, (, Locale, ., US, ), ;, static, {]
[=, RealMatrixFormat, ., getInstance, (, Locale, ., US, ), ;, static, {, DEFAULT_FORMAT, ., getFormat, (, ), ., setMinimumFractionDigits, (]
[(, ), {, }, protected, AbstractRealMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, if, (]
[(, ), {, }, protected, AbstractRealMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, if, (]
[{, }, protected, AbstractRealMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, if, (, rowDimension, <]
[(, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, if, (, rowDimension, <, 1, ), {, throw]
[rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, if, (, rowDimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[throws, NotStrictlyPositiveException, {, if, (, rowDimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, rowDimension, ), ;, }, if, (]
[throws, NotStrictlyPositiveException, {, if, (, rowDimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, rowDimension, ), ;, }, if, (]
[{, if, (, rowDimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, rowDimension, ), ;, }, if, (, columnDimension, <]
[<, 1, ), {, throw, new, NotStrictlyPositiveException, (, rowDimension, ), ;, }, if, (, columnDimension, <, 1, ), {, throw]
[{, throw, new, NotStrictlyPositiveException, (, rowDimension, ), ;, }, if, (, columnDimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[{, throw, new, NotStrictlyPositiveException, (, columnDimension, ), ;, }, }, public, RealMatrix, add, (, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[{, throw, new, NotStrictlyPositiveException, (, columnDimension, ), ;, }, }, public, RealMatrix, add, (, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[(, columnDimension, ), ;, }, }, public, RealMatrix, add, (, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (]
[), ;, }, }, public, RealMatrix, add, (, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,]
[(, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =]
[., checkAdditionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =]
[rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (]
[getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,]
[getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =]
[), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <]
[out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[=, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++]
[for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =]
[int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[=, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[{, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (]
[(, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,]
[col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,]
[col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,]
[0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (]
[col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +]
[{, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, m, ., getEntry, (]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, m, ., getEntry, (, row, ,]
[getEntry, (, row, ,, col, ), +, m, ., getEntry, (, row, ,, col, ), ), ;, }, }, return]
[), ), ;, }, }, return, out, ;, }, public, RealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[), ), ;, }, }, return, out, ;, }, public, RealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[}, return, out, ;, }, public, RealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (]
[out, ;, }, public, RealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (, this, ,]
[final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =]
[., checkSubtractionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =]
[rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (]
[getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,]
[getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =]
[), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <]
[out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[=, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++]
[for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =]
[int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[=, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[{, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (]
[(, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,]
[col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,]
[col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,]
[0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (]
[col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -]
[{, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -, m, ., getEntry, (]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -, m, ., getEntry, (, row, ,]
[getEntry, (, row, ,, col, ), -, m, ., getEntry, (, row, ,, col, ), ), ;, }, }, return]
[;, }, }, return, out, ;, }, public, RealMatrix, scalarAdd, (, final, double, d, ), {, final, int, rowCount, =]
[RealMatrix, scalarAdd, (, final, double, d, ), {, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =]
[rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (]
[getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,]
[getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =]
[), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <]
[out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[=, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++]
[for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =]
[int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[=, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[{, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (]
[(, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,]
[col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,]
[col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,]
[0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (]
[col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, d, ), ;, }, }, return]
[;, }, }, return, out, ;, }, public, RealMatrix, scalarMultiply, (, final, double, d, ), {, final, int, rowCount, =]
[RealMatrix, scalarMultiply, (, final, double, d, ), {, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =]
[rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (]
[getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,]
[getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =]
[), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[), ;, final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[final, RealMatrix, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <]
[out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[=, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++]
[for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =]
[int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[=, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[{, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (]
[(, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,]
[col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,]
[col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,]
[0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (]
[col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), *]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), *, d, ), ;, }, }, return]
[d, ), ;, }, }, return, out, ;, }, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {]
[d, ), ;, }, }, return, out, ;, }, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {]
[}, return, out, ;, }, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (]
[out, ;, }, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,]
[final, RealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =]
[., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =]
[nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =]
[m, ., getColumnDimension, (, ), ;, final, int, nSum, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (]
[getColumnDimension, (, ), ;, final, int, nSum, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,]
[getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,, nCols, ), ;, for, (, int, row, =]
[), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;]
[), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;]
[final, RealMatrix, out, =, createMatrix, (, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;, row, <]
[out, =, createMatrix, (, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[=, createMatrix, (, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++]
[for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =]
[int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[=, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <]
[;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =]
[0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =]
[col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;]
[col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, ++]
[double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, nSum, ;, ++, i, ), {, sum, +=, getEntry, (]
[(, int, i, =, 0, ;, i, <, nSum, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,]
[=, 0, ;, i, <, nSum, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *]
[=, 0, ;, i, <, nSum, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *]
[<, nSum, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, m, ., getEntry, (]
[;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, m, ., getEntry, (, i, ,]
[{, sum, +=, getEntry, (, row, ,, i, ), *, m, ., getEntry, (, i, ,, col, ), ;, }]
[{, sum, +=, getEntry, (, row, ,, i, ), *, m, ., getEntry, (, i, ,, col, ), ;, }]
[(, row, ,, i, ), *, m, ., getEntry, (, i, ,, col, ), ;, }, out, ., setEntry, (]
[,, i, ), *, m, ., getEntry, (, i, ,, col, ), ;, }, out, ., setEntry, (, row, ,]
[), *, m, ., getEntry, (, i, ,, col, ), ;, }, out, ., setEntry, (, row, ,, col, ,]
[i, ,, col, ), ;, }, out, ., setEntry, (, row, ,, col, ,, sum, ), ;, }, }, return]
[), ;, }, }, return, out, ;, }, public, RealMatrix, preMultiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, return]
[), ;, }, }, return, out, ;, }, public, RealMatrix, preMultiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, return]
[return, out, ;, }, public, RealMatrix, preMultiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, return, m, ., multiply, (]
[(, this, ), ;, }, public, RealMatrix, power, (, final, int, p, ), throws, NotPositiveException, ,, NonSquareMatrixException, {, if, (]
[(, this, ), ;, }, public, RealMatrix, power, (, final, int, p, ), throws, NotPositiveException, ,, NonSquareMatrixException, {, if, (]
[), ;, }, public, RealMatrix, power, (, final, int, p, ), throws, NotPositiveException, ,, NonSquareMatrixException, {, if, (, p, <]
[RealMatrix, power, (, final, int, p, ), throws, NotPositiveException, ,, NonSquareMatrixException, {, if, (, p, <, 0, ), {, throw]
[final, int, p, ), throws, NotPositiveException, ,, NonSquareMatrixException, {, if, (, p, <, 0, ), {, throw, new, NotPositiveException, (]
[final, int, p, ), throws, NotPositiveException, ,, NonSquareMatrixException, {, if, (, p, <, 0, ), {, throw, new, NotPositiveException, (]
[throws, NotPositiveException, ,, NonSquareMatrixException, {, if, (, p, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_EXPONENT, ,]
[(, p, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_EXPONENT, ,, p, ), ;, }, if, (]
[p, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_EXPONENT, ,, p, ), ;, }, if, (, !]
[new, NotPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_EXPONENT, ,, p, ), ;, }, if, (, !, isSquare, (, ), ), {, throw]
[LocalizedFormats, ., NOT_POSITIVE_EXPONENT, ,, p, ), ;, }, if, (, !, isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (]
[p, ), ;, }, if, (, !, isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,]
[(, ), ), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, if, (]
[(, ), ), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, if, (]
[), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, if, (, p, ==]
[NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, if, (, p, ==, 0, ), {, return]
[NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, if, (, p, ==, 0, ), {, return]
[), ,, getColumnDimension, (, ), ), ;, }, if, (, p, ==, 0, ), {, return, MatrixUtils, ., createRealIdentityMatrix, (]
[), ,, getColumnDimension, (, ), ), ;, }, if, (, p, ==, 0, ), {, return, MatrixUtils, ., createRealIdentityMatrix, (]
[p, ==, 0, ), {, return, MatrixUtils, ., createRealIdentityMatrix, (, this, ., getRowDimension, (, ), ), ;, }, if, (]
[p, ==, 0, ), {, return, MatrixUtils, ., createRealIdentityMatrix, (, this, ., getRowDimension, (, ), ), ;, }, if, (]
[0, ), {, return, MatrixUtils, ., createRealIdentityMatrix, (, this, ., getRowDimension, (, ), ), ;, }, if, (, p, ==]
[MatrixUtils, ., createRealIdentityMatrix, (, this, ., getRowDimension, (, ), ), ;, }, if, (, p, ==, 1, ), {, return]
[MatrixUtils, ., createRealIdentityMatrix, (, this, ., getRowDimension, (, ), ), ;, }, if, (, p, ==, 1, ), {, return]
[}, if, (, p, ==, 1, ), {, return, this, ., copy, (, ), ;, }, final, int, power, =]
[}, if, (, p, ==, 1, ), {, return, this, ., copy, (, ), ;, }, final, int, power, =]
[(, p, ==, 1, ), {, return, this, ., copy, (, ), ;, }, final, int, power, =, p, -]
[., copy, (, ), ;, }, final, int, power, =, p, -, 1, ;, final, char, [, ], binaryRepresentation, =]
[., copy, (, ), ;, }, final, int, power, =, p, -, 1, ;, final, char, [, ], binaryRepresentation, =]
[., copy, (, ), ;, }, final, int, power, =, p, -, 1, ;, final, char, [, ], binaryRepresentation, =]
[;, }, final, int, power, =, p, -, 1, ;, final, char, [, ], binaryRepresentation, =, Integer, ., toBinaryString, (]
[binaryRepresentation, =, Integer, ., toBinaryString, (, power, ), ., toCharArray, (, ), ;, final, ArrayList, <, Integer, >, nonZeroPositions, =]
[), ;, final, ArrayList, <, Integer, >, nonZeroPositions, =, new, ArrayList, <, Integer, >, (, ), ;, int, maxI, =]
[;, final, ArrayList, <, Integer, >, nonZeroPositions, =, new, ArrayList, <, Integer, >, (, ), ;, int, maxI, =, -]
[=, new, ArrayList, <, Integer, >, (, ), ;, int, maxI, =, -, 1, ;, for, (, int, i, =]
[ArrayList, <, Integer, >, (, ), ;, int, maxI, =, -, 1, ;, for, (, int, i, =, 0, ;]
[ArrayList, <, Integer, >, (, ), ;, int, maxI, =, -, 1, ;, for, (, int, i, =, 0, ;]
[Integer, >, (, ), ;, int, maxI, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <]
[Integer, >, (, ), ;, int, maxI, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <]
[;, int, maxI, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, binaryRepresentation, ., length, ;]
[int, maxI, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, binaryRepresentation, ., length, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, if, (]
[(, int, i, =, 0, ;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, if, (, binaryRepresentation, []
[=, 0, ;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==]
[length, ;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =]
[length, ;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =]
[length, ;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =]
[length, ;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =]
[), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -]
[if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -]
[binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;]
[binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;]
[==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add, (]
[int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, if, (]
[int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, if, (]
[=, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, if, (, maxI, ==]
[binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, if, (, maxI, ==, -]
[-, i, -, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, if, (, maxI, ==, -, 1, ), {]
[-, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, if, (, maxI, ==, -, 1, ), {, maxI, =]
[if, (, maxI, ==, -, 1, ), {, maxI, =, pos, ;, }, }, }, RealMatrix, [, ], results, =]
[==, -, 1, ), {, maxI, =, pos, ;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, []
[==, -, 1, ), {, maxI, =, pos, ;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, []
[1, ), {, maxI, =, pos, ;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, [, maxI, +]
[maxI, =, pos, ;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, [, maxI, +, 1, ], ;]
[maxI, =, pos, ;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, [, maxI, +, 1, ], ;]
[pos, ;, }, }, }, RealMatrix, [, ], results, =, new, RealMatrix, [, maxI, +, 1, ], ;, results, []
[}, }, RealMatrix, [, ], results, =, new, RealMatrix, [, maxI, +, 1, ], ;, results, [, 0, ], =]
[}, }, RealMatrix, [, ], results, =, new, RealMatrix, [, maxI, +, 1, ], ;, results, [, 0, ], =]
[+, 1, ], ;, results, [, 0, ], =, this, ., copy, (, ), ;, for, (, int, i, =]
[], ;, results, [, 0, ], =, this, ., copy, (, ), ;, for, (, int, i, =, 1, ;]
[], ;, results, [, 0, ], =, this, ., copy, (, ), ;, for, (, int, i, =, 1, ;]
[results, [, 0, ], =, this, ., copy, (, ), ;, for, (, int, i, =, 1, ;, i, <=]
[0, ], =, this, ., copy, (, ), ;, for, (, int, i, =, 1, ;, i, <=, maxI, ;]
[], =, this, ., copy, (, ), ;, for, (, int, i, =, 1, ;, i, <=, maxI, ;, ++]
[., copy, (, ), ;, for, (, int, i, =, 1, ;, i, <=, maxI, ;, ++, i, ), {]
[., copy, (, ), ;, for, (, int, i, =, 1, ;, i, <=, maxI, ;, ++, i, ), {]
[(, ), ;, for, (, int, i, =, 1, ;, i, <=, maxI, ;, ++, i, ), {, results, []
[for, (, int, i, =, 1, ;, i, <=, maxI, ;, ++, i, ), {, results, [, i, ], =]
[for, (, int, i, =, 1, ;, i, <=, maxI, ;, ++, i, ), {, results, [, i, ], =]
[for, (, int, i, =, 1, ;, i, <=, maxI, ;, ++, i, ), {, results, [, i, ], =]
[int, i, =, 1, ;, i, <=, maxI, ;, ++, i, ), {, results, [, i, ], =, results, []
[int, i, =, 1, ;, i, <=, maxI, ;, ++, i, ), {, results, [, i, ], =, results, []
[=, 1, ;, i, <=, maxI, ;, ++, i, ), {, results, [, i, ], =, results, [, i, -]
[maxI, ;, ++, i, ), {, results, [, i, ], =, results, [, i, -, 1, ], ., multiply, (]
[maxI, ;, ++, i, ), {, results, [, i, ], =, results, [, i, -, 1, ], ., multiply, (]
[++, i, ), {, results, [, i, ], =, results, [, i, -, 1, ], ., multiply, (, results, []
[++, i, ), {, results, [, i, ], =, results, [, i, -, 1, ], ., multiply, (, results, []
[), {, results, [, i, ], =, results, [, i, -, 1, ], ., multiply, (, results, [, i, -]
[[, i, -, 1, ], ., multiply, (, results, [, i, -, 1, ], ), ;, }, RealMatrix, result, =]
[[, i, -, 1, ], ., multiply, (, results, [, i, -, 1, ], ), ;, }, RealMatrix, result, =]
[-, 1, ], ), ;, }, RealMatrix, result, =, this, ., copy, (, ), ;, for, (, Integer, i, :]
[), ;, }, RealMatrix, result, =, this, ., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, ), {]
[}, RealMatrix, result, =, this, ., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, ), {, result, =]
[}, RealMatrix, result, =, this, ., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, ), {, result, =]
[this, ., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, ), {, result, =, result, ., multiply, (]
[this, ., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, ), {, result, =, result, ., multiply, (]
[copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, ), {, result, =, result, ., multiply, (, results, []
[Integer, i, :, nonZeroPositions, ), {, result, =, result, ., multiply, (, results, [, i, ], ), ;, }, return]
[;, }, public, double, [, ], [, ], getData, (, ), {, final, double, [, ], [, ], data, =]
[double, [, ], [, ], getData, (, ), {, final, double, [, ], [, ], data, =, new, double, []
[getData, (, ), {, final, double, [, ], [, ], data, =, new, double, [, getRowDimension, (, ), ], []
[data, =, new, double, [, getRowDimension, (, ), ], [, getColumnDimension, (, ), ], ;, for, (, int, i, =]
[new, double, [, getRowDimension, (, ), ], [, getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;]
[new, double, [, getRowDimension, (, ), ], [, getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;]
[[, getRowDimension, (, ), ], [, getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[[, getRowDimension, (, ), ], [, getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[], [, getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[[, getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, [, ], dataI, =]
[i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, [, ], dataI, =]
[0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, [, ], dataI, =, data, []
[++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =]
[), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;]
[=, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++]
[i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {]
[i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, []
[int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], =]
[=, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], =, getEntry, (]
[;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,]
[;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,, j, ), ;, }, }, return]
[getEntry, (, i, ,, j, ), ;, }, }, return, data, ;, }, public, double, getNorm, (, ), {, return]
[i, ,, j, ), ;, }, }, return, data, ;, }, public, double, getNorm, (, ), {, return, walkInColumnOrder, (]
[int, columns, ,, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {]
[int, columns, ,, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {, this, ., endRow, =]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {, this, ., endRow, =, endRow, ;]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {, this, ., endRow, =, endRow, ;, columnSum, =]
[,, final, int, startColumn, ,, final, int, endColumn, ), {, this, ., endRow, =, endRow, ;, columnSum, =, 0, ;]
[int, startColumn, ,, final, int, endColumn, ), {, this, ., endRow, =, endRow, ;, columnSum, =, 0, ;, maxColSum, =]
[0, ;, }, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {]
[}, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, columnSum, +=]
[}, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, columnSum, +=]
[(, final, int, row, ,, final, int, column, ,, final, double, value, ), {, columnSum, +=, FastMath, ., abs, (]
[final, int, column, ,, final, double, value, ), {, columnSum, +=, FastMath, ., abs, (, value, ), ;, if, (]
[final, int, column, ,, final, double, value, ), {, columnSum, +=, FastMath, ., abs, (, value, ), ;, if, (]
[column, ,, final, double, value, ), {, columnSum, +=, FastMath, ., abs, (, value, ), ;, if, (, row, ==]
[double, value, ), {, columnSum, +=, FastMath, ., abs, (, value, ), ;, if, (, row, ==, endRow, ), {]
[), {, columnSum, +=, FastMath, ., abs, (, value, ), ;, if, (, row, ==, endRow, ), {, maxColSum, =]
[), {, columnSum, +=, FastMath, ., abs, (, value, ), ;, if, (, row, ==, endRow, ), {, maxColSum, =]
[FastMath, ., abs, (, value, ), ;, if, (, row, ==, endRow, ), {, maxColSum, =, FastMath, ., max, (]
[abs, (, value, ), ;, if, (, row, ==, endRow, ), {, maxColSum, =, FastMath, ., max, (, maxColSum, ,]
[), ;, if, (, row, ==, endRow, ), {, maxColSum, =, FastMath, ., max, (, maxColSum, ,, columnSum, ), ;]
[if, (, row, ==, endRow, ), {, maxColSum, =, FastMath, ., max, (, maxColSum, ,, columnSum, ), ;, columnSum, =]
[max, (, maxColSum, ,, columnSum, ), ;, columnSum, =, 0, ;, }, }, public, double, end, (, ), {, return]
[double, end, (, ), {, return, maxColSum, ;, }, }, ), ;, }, public, double, getFrobeniusNorm, (, ), {, return]
[(, ), {, return, maxColSum, ;, }, }, ), ;, }, public, double, getFrobeniusNorm, (, ), {, return, walkInOptimizedOrder, (]
[int, columns, ,, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {]
[,, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {, sum, =]
[0, ;, }, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {]
[}, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, sum, +=]
[}, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, sum, +=]
[void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, sum, +=, value, *]
[,, final, double, value, ), {, sum, +=, value, *, value, ;, }, public, double, end, (, ), {, return]
[,, final, double, value, ), {, sum, +=, value, *, value, ;, }, public, double, end, (, ), {, return]
[), {, sum, +=, value, *, value, ;, }, public, double, end, (, ), {, return, FastMath, ., sqrt, (]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,]
[,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,]
[int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (]
[(, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,]
[,, startColumn, ,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,, endColumn, -]
[,, endColumn, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +]
[createMatrix, (, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =]
[endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;]
[endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;]
[startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=]
[1, ,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for, (, int, j, =]
[int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for, (, int, j, =, startColumn, ;]
[int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for, (, int, j, =, startColumn, ;]
[=, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=]
[;, i, <=, endRow, ;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;]
[i, <=, endRow, ;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[{, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (]
[{, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (]
[(, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (, i, -]
[j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,]
[j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,]
[startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -]
[j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,]
[endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (]
[++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i, ,]
[(, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i, ,, j, ), ), ;, }, }, return]
[(, final, int, [, ], selectedRows, ,, final, int, [, ], selectedColumns, ), throws, NullArgumentException, ,, NoDataException, ,, OutOfRangeException, {]
[(, final, int, [, ], selectedRows, ,, final, int, [, ], selectedColumns, ), throws, NullArgumentException, ,, NoDataException, ,, OutOfRangeException, {]
[], selectedRows, ,, final, int, [, ], selectedColumns, ), throws, NullArgumentException, ,, NoDataException, ,, OutOfRangeException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[,, final, int, [, ], selectedColumns, ), throws, NullArgumentException, ,, NoDataException, ,, OutOfRangeException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[int, [, ], selectedColumns, ), throws, NullArgumentException, ,, NoDataException, ,, OutOfRangeException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, selectedRows, ,]
[,, NoDataException, ,, OutOfRangeException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, RealMatrix, subMatrix, =]
[,, OutOfRangeException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (]
[,, OutOfRangeException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (]
[., checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, selectedRows, ., length, ,]
[., checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, selectedRows, ., length, ,]
[selectedRows, ,, selectedColumns, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, selectedRows, ., length, ,, selectedColumns, ., length, ), ;]
[selectedRows, ,, selectedColumns, ), ;, final, RealMatrix, subMatrix, =, createMatrix, (, selectedRows, ., length, ,, selectedColumns, ., length, ), ;]
[;, final, RealMatrix, subMatrix, =, createMatrix, (, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, subMatrix, ., walkInOptimizedOrder, (]
[@, Override, public, double, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, return]
[public, double, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, return, getEntry, (]
[public, double, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, return, getEntry, (]
[visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, return, getEntry, (, selectedRows, []
[int, row, ,, final, int, column, ,, final, double, value, ), {, return, getEntry, (, selectedRows, [, row, ], ,]
[int, row, ,, final, int, column, ,, final, double, value, ), {, return, getEntry, (, selectedRows, [, row, ], ,]
[,, final, int, column, ,, final, double, value, ), {, return, getEntry, (, selectedRows, [, row, ], ,, selectedColumns, []
[{, return, getEntry, (, selectedRows, [, row, ], ,, selectedColumns, [, column, ], ), ;, }, }, ), ;, return]
[,, final, int, endColumn, ,, final, double, [, ], [, ], destination, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, ,, MatrixDimensionMismatchException, {]
[,, final, int, endColumn, ,, final, double, [, ], [, ], destination, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, ,, MatrixDimensionMismatchException, {]
[,, final, double, [, ], [, ], destination, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[double, [, ], [, ], destination, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[], [, ], destination, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,]
[], destination, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,]
[), throws, OutOfRangeException, ,, NumberIsTooSmallException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =, endRow, +]
[(, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -]
[,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =]
[,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =]
[,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =]
[,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +]
[), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -]
[rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (]
[rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (]
[=, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (]
[=, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (]
[=, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (]
[-, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <]
[final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||]
[int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (]
[int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (]
[int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (]
[int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (]
[=, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, []
[startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length, <]
[destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw]
[<, rowsCount, ), ||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[<, rowsCount, ), ||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[(, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[(, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[(, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[[, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, []
[<, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,]
[), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,]
[length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i, =]
[destination, [, 0, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i, =, 1, ;]
[destination, [, 0, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i, =, 1, ;]
[0, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i, =, 1, ;, i, <]
[., length, ,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i, =, 1, ;, i, <, rowsCount, ;]
[., length, ,, rowsCount, ,, columnsCount, ), ;, }, for, (, int, i, =, 1, ;, i, <, rowsCount, ;]
[), ;, }, for, (, int, i, =, 1, ;, i, <, rowsCount, ;, i, ++, ), {, if, (]
[), ;, }, for, (, int, i, =, 1, ;, i, <, rowsCount, ;, i, ++, ), {, if, (]
[), ;, }, for, (, int, i, =, 1, ;, i, <, rowsCount, ;, i, ++, ), {, if, (]
[), ;, }, for, (, int, i, =, 1, ;, i, <, rowsCount, ;, i, ++, ), {, if, (]
[}, for, (, int, i, =, 1, ;, i, <, rowsCount, ;, i, ++, ), {, if, (, destination, []
[=, 1, ;, i, <, rowsCount, ;, i, ++, ), {, if, (, destination, [, i, ], ., length, <]
[<, rowsCount, ;, i, ++, ), {, if, (, destination, [, i, ], ., length, <, columnsCount, ), {, throw]
[i, ++, ), {, if, (, destination, [, i, ], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (]
[i, ++, ), {, if, (, destination, [, i, ], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (]
[if, (, destination, [, i, ], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[if, (, destination, [, i, ], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[if, (, destination, [, i, ], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[destination, [, i, ], ., length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, []
[length, <, columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, i, ], ., length, ,]
[columnsCount, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, i, ], ., length, ,, rowsCount, ,]
[MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, i, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, }]
[destination, ., length, ,, destination, [, i, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, }, walkInOptimizedOrder, (]
[int, columns, ,, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {]
[int, columns, ,, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {, this, ., startRow, =]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {, this, ., startRow, =, startRow, ;]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), {, this, ., startRow, =, startRow, ;]
[,, final, int, startColumn, ,, final, int, endColumn, ), {, this, ., startRow, =, startRow, ;, this, ., startColumn, =]
[}, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {]
[}, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {]
[}, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {]
[Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, destination, []
[Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, destination, []
[void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, destination, [, row, -]
[final, int, row, ,, final, int, column, ,, final, double, value, ), {, destination, [, row, -, startRow, ], []
[final, int, row, ,, final, int, column, ,, final, double, value, ), {, destination, [, row, -, startRow, ], []
[row, ,, final, int, column, ,, final, double, value, ), {, destination, [, row, -, startRow, ], [, column, -]
[int, column, ,, final, double, value, ), {, destination, [, row, -, startRow, ], [, column, -, startColumn, ], =]
[value, ), {, destination, [, row, -, startRow, ], [, column, -, startColumn, ], =, value, ;, }, }, ,]
[{, destination, [, row, -, startRow, ], [, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,]
[[, row, -, startRow, ], [, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,]
[-, startRow, ], [, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,]
[[, ], selectedColumns, ,, double, [, ], [, ], destination, ), throws, OutOfRangeException, ,, NullArgumentException, ,, NoDataException, ,, MatrixDimensionMismatchException, {]
[[, ], selectedColumns, ,, double, [, ], [, ], destination, ), throws, OutOfRangeException, ,, NullArgumentException, ,, NoDataException, ,, MatrixDimensionMismatchException, {]
[double, [, ], [, ], destination, ), throws, OutOfRangeException, ,, NullArgumentException, ,, NoDataException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[], [, ], destination, ), throws, OutOfRangeException, ,, NullArgumentException, ,, NoDataException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[], destination, ), throws, OutOfRangeException, ,, NullArgumentException, ,, NoDataException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, selectedRows, ,]
[,, NoDataException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, int, nCols, =]
[,, NoDataException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, int, nCols, =]
[., checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, int, nCols, =, selectedColumns, ., length, ;, if, (]
[., checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, int, nCols, =, selectedColumns, ., length, ;, if, (]
[checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, int, nCols, =, selectedColumns, ., length, ;, if, (, (]
[checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, int, nCols, =, selectedColumns, ., length, ;, if, (, (]
[checkSubMatrixIndex, (, this, ,, selectedRows, ,, selectedColumns, ), ;, final, int, nCols, =, selectedColumns, ., length, ;, if, (, (]
[selectedRows, ,, selectedColumns, ), ;, final, int, nCols, =, selectedColumns, ., length, ;, if, (, (, destination, ., length, <]
[selectedRows, ,, selectedColumns, ), ;, final, int, nCols, =, selectedColumns, ., length, ;, if, (, (, destination, ., length, <]
[final, int, nCols, =, selectedColumns, ., length, ;, if, (, (, destination, ., length, <, selectedRows, ., length, ), ||]
[int, nCols, =, selectedColumns, ., length, ;, if, (, (, destination, ., length, <, selectedRows, ., length, ), ||, (]
[int, nCols, =, selectedColumns, ., length, ;, if, (, (, destination, ., length, <, selectedRows, ., length, ), ||, (]
[int, nCols, =, selectedColumns, ., length, ;, if, (, (, destination, ., length, <, selectedRows, ., length, ), ||, (]
[int, nCols, =, selectedColumns, ., length, ;, if, (, (, destination, ., length, <, selectedRows, ., length, ), ||, (]
[=, selectedColumns, ., length, ;, if, (, (, destination, ., length, <, selectedRows, ., length, ), ||, (, destination, []
[if, (, (, destination, ., length, <, selectedRows, ., length, ), ||, (, destination, [, 0, ], ., length, <]
[length, <, selectedRows, ., length, ), ||, (, destination, [, 0, ], ., length, <, nCols, ), ), {, throw]
[., length, ), ||, (, destination, [, 0, ], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[., length, ), ||, (, destination, [, 0, ], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[(, destination, [, 0, ], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[(, destination, [, 0, ], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[(, destination, [, 0, ], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[[, 0, ], ., length, <, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, []
[<, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,]
[<, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,]
[{, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, selectedRows, ., length, ,]
[{, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, selectedRows, ., length, ,]
[0, ], ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =]
[., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;]
[., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;]
[,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, ., length, ;]
[,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, ., length, ;]
[i, =, 0, ;, i, <, selectedRows, ., length, ;, i, ++, ), {, final, double, [, ], destinationI, =]
[i, =, 0, ;, i, <, selectedRows, ., length, ;, i, ++, ), {, final, double, [, ], destinationI, =]
[0, ;, i, <, selectedRows, ., length, ;, i, ++, ), {, final, double, [, ], destinationI, =, destination, []
[., length, ;, i, ++, ), {, final, double, [, ], destinationI, =, destination, [, i, ], ;, if, (]
[., length, ;, i, ++, ), {, final, double, [, ], destinationI, =, destination, [, i, ], ;, if, (]
[., length, ;, i, ++, ), {, final, double, [, ], destinationI, =, destination, [, i, ], ;, if, (]
[++, ), {, final, double, [, ], destinationI, =, destination, [, i, ], ;, if, (, destinationI, ., length, <]
[double, [, ], destinationI, =, destination, [, i, ], ;, if, (, destinationI, ., length, <, nCols, ), {, throw]
[destinationI, =, destination, [, i, ], ;, if, (, destinationI, ., length, <, nCols, ), {, throw, new, MatrixDimensionMismatchException, (]
[destinationI, =, destination, [, i, ], ;, if, (, destinationI, ., length, <, nCols, ), {, throw, new, MatrixDimensionMismatchException, (]
[i, ], ;, if, (, destinationI, ., length, <, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[i, ], ;, if, (, destinationI, ., length, <, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[(, destinationI, ., length, <, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destinationI, ., length, ,]
[(, destinationI, ., length, <, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destinationI, ., length, ,]
[<, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destinationI, ., length, ,, selectedRows, ., length, ,]
[<, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destinationI, ., length, ,, selectedRows, ., length, ,]
[,, destinationI, ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, j, =]
[., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, j, =, 0, ;]
[., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, j, =, 0, ;]
[,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, j, =, 0, ;, j, <]
[,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, j, =, 0, ;, j, <]
[,, selectedColumns, ., length, ), ;, }, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;]
[,, selectedColumns, ., length, ), ;, }, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;]
[), ;, }, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;, j, ++, ), {]
[), ;, }, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;, j, ++, ), {, destinationI, []
[int, j, =, 0, ;, j, <, selectedColumns, ., length, ;, j, ++, ), {, destinationI, [, j, ], =]
[=, 0, ;, j, <, selectedColumns, ., length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (]
[=, 0, ;, j, <, selectedColumns, ., length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (]
[;, j, <, selectedColumns, ., length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, []
[selectedColumns, ., length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,]
[selectedColumns, ., length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,]
[length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, []
[], subMatrix, ,, final, int, row, ,, final, int, column, ), throws, NoDataException, ,, OutOfRangeException, ,, DimensionMismatchException, ,, NullArgumentException, {]
[], subMatrix, ,, final, int, row, ,, final, int, column, ), throws, NoDataException, ,, OutOfRangeException, ,, DimensionMismatchException, ,, NullArgumentException, {]
[int, row, ,, final, int, column, ), throws, NoDataException, ,, OutOfRangeException, ,, DimensionMismatchException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[throws, NoDataException, ,, OutOfRangeException, ,, DimensionMismatchException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =]
[throws, NoDataException, ,, OutOfRangeException, ,, DimensionMismatchException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =]
[,, NullArgumentException, {, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (]
[,, NullArgumentException, {, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (]
[{, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==]
[(, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw]
[;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, []
[(, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (]
[(, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (]
[., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==]
[}, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw]
[nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =]
[0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;]
[0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;]
[{, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <]
[new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;]
[NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++, r, ), {, if, (]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++, r, ), {, if, (]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++, r, ), {, if, (]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++, r, ), {, if, (]
[}, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++, r, ), {, if, (, subMatrix, []
[=, 1, ;, r, <, nRows, ;, ++, r, ), {, if, (, subMatrix, [, r, ], ., length, !=]
[<, nRows, ;, ++, r, ), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw]
[++, r, ), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, []
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;, }, }]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;, }, }]
[throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;, }, }, MatrixUtils, ., checkRowIndex, (]
[DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;, }, }, MatrixUtils, ., checkRowIndex, (, this, ,]
[,, subMatrix, [, r, ], ., length, ), ;, }, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[,, subMatrix, [, r, ], ., length, ), ;, }, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[], ., length, ), ;, }, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (]
[length, ), ;, }, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,]
[}, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;]
[}, }, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;]
[checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (]
[this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,]
[this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,]
[this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,]
[row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +]
[;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -]
[checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -, 1, ), ;]
[checkColumnIndex, (, this, ,, column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -, 1, ), ;]
[column, ), ;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex, (]
[;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,]
[;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,]
[;, MatrixUtils, ., checkRowIndex, (, this, ,, nRows, +, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,]
[., checkRowIndex, (, this, ,, nRows, +, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +]
[(, this, ,, nRows, +, row, -, 1, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +, column, -]
[), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +, column, -, 1, ), ;, for, (, int, i, =]
[MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;]
[MatrixUtils, ., checkColumnIndex, (, this, ,, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;]
[checkColumnIndex, (, this, ,, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[this, ,, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[,, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, nRows, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, nRows, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;]
[i, <, nRows, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {]
[i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (]
[i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (]
[{, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row, +]
[(, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row, +, i, ,]
[(, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row, +, i, ,]
[j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +]
[0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,]
[0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,]
[0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,]
[j, <, nCols, ;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, []
[;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, [, i, ], []
[], [, j, ], ), ;, }, }, }, public, RealMatrix, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {]
[], [, j, ], ), ;, }, }, }, public, RealMatrix, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {]
[), ;, }, }, }, public, RealMatrix, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (]
[}, }, }, public, RealMatrix, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,]
[final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =]
[., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =]
[(, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (]
[,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, 1, ,]
[getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =]
[), ;, final, RealMatrix, out, =, createMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;]
[), ;, final, RealMatrix, out, =, createMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;]
[final, RealMatrix, out, =, createMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <]
[out, =, createMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[=, createMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++]
[1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, ., setEntry, (, 0, ,]
[i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, ., setEntry, (, 0, ,, i, ,]
[0, ;, i, <, nCols, ;, ++, i, ), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (]
[i, <, nCols, ;, ++, i, ), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,]
[), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i, ), ), ;, }, return]
[out, ;, }, public, void, setRowMatrix, (, final, int, row, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[out, ;, }, public, void, setRowMatrix, (, final, int, row, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[void, setRowMatrix, (, final, int, row, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkRowIndex, (]
[(, final, int, row, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkRowIndex, (, this, ,]
[matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (]
[MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (]
[MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (]
[row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=]
[final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||, (]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||, (]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||, (]
[;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=]
[., getRowDimension, (, ), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw]
[), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,]
[matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,]
[nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,]
[(, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =]
[,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;]
[,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;]
[., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++]
[,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (]
[}, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,]
[(, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,]
[(, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,]
[0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (]
[i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0, ,]
[(, 0, ,, i, ), ), ;, }, }, public, RealMatrix, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {]
[(, 0, ,, i, ), ), ;, }, }, public, RealMatrix, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {]
[), ), ;, }, }, public, RealMatrix, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkColumnIndex, (]
[;, }, }, public, RealMatrix, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkColumnIndex, (, this, ,]
[final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =]
[., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, RealMatrix, out, =]
[(, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (]
[,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,]
[getRowDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =]
[), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;]
[), ;, final, RealMatrix, out, =, createMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;]
[final, RealMatrix, out, =, createMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[out, =, createMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[=, createMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, ., setEntry, (, i, ,]
[i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, ., setEntry, (, i, ,, 0, ,]
[0, ;, i, <, nRows, ;, ++, i, ), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (]
[i, <, nRows, ;, ++, i, ), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,]
[), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column, ), ), ;, }, return]
[out, ;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[out, ;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[void, setColumnMatrix, (, final, int, column, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkColumnIndex, (]
[(, final, int, column, ,, final, RealMatrix, matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkColumnIndex, (, this, ,]
[matrix, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =]
[{, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[{, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (]
[MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (]
[MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (]
[column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=]
[final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||]
[int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||, (]
[int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||, (]
[int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||, (]
[;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=]
[., getRowDimension, (, ), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw]
[), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,]
[matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,]
[1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,]
[(, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, for, (, int, i, =]
[,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, ), ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[), ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (]
[}, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,]
[0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (]
[i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i, ,]
[i, ,, 0, ), ), ;, }, }, public, RealVector, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, return]
[), ), ;, }, }, public, RealVector, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (]
[;, }, }, public, RealVector, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (, getRow, (]
[public, RealVector, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (, getRow, (, row, ), ,]
[), ;, }, public, void, setRowVector, (, final, int, row, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[), ;, }, public, void, setRowVector, (, final, int, row, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[void, setRowVector, (, final, int, row, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkRowIndex, (]
[(, final, int, row, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkRowIndex, (, this, ,]
[vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=]
[final, int, nCols, =, getColumnDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nCols, ), {, throw]
[=, getColumnDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (]
[(, ), ;, if, (, vector, ., getDimension, (, ), !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,]
[(, ), ;, if, (, vector, ., getDimension, (, ), !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,]
[., getDimension, (, ), !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, ., getDimension, (, ), ,]
[(, ), !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, ., getDimension, (, ), ,, 1, ,]
[(, 1, ,, vector, ., getDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =]
[,, vector, ., getDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;]
[,, vector, ., getDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;]
[., getDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++]
[,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (]
[}, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,]
[(, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,]
[(, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,]
[0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (]
[getEntry, (, i, ), ), ;, }, }, public, RealVector, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, return]
[), ), ;, }, }, public, RealVector, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (]
[;, }, }, public, RealVector, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (, getColumn, (]
[public, RealVector, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, return, new, ArrayRealVector, (, getColumn, (, column, ), ,]
[), ;, }, public, void, setColumnVector, (, final, int, column, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[), ;, }, public, void, setColumnVector, (, final, int, column, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[void, setColumnVector, (, final, int, column, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkColumnIndex, (]
[(, final, int, column, ,, final, RealVector, vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkColumnIndex, (, this, ,]
[vector, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =]
[{, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[{, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[{, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=]
[final, int, nRows, =, getRowDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nRows, ), {, throw]
[=, getRowDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (]
[=, getRowDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (]
[(, vector, ., getDimension, (, ), !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (, ), ,]
[., getDimension, (, ), !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (, ), ,, 1, ,]
[(, ), !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (, ), ,, 1, ,, nRows, ,]
[(, vector, ., getDimension, (, ), ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =]
[., getDimension, (, ), ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[., getDimension, (, ), ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[(, ), ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (]
[}, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,]
[0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (]
[(, i, ), ), ;, }, }, public, double, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {]
[(, i, ), ), ;, }, }, public, double, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {]
[;, }, }, public, double, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (]
[}, public, double, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,]
[final, int, row, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =]
[(, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, double, [, ], out, =]
[row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, double, [, ], out, =, new, double, []
[(, ), ;, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, i, =]
[;, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, i, =, 0, ;, i, <]
[], out, =, new, double, [, nCols, ], ;, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[out, =, new, double, [, nCols, ], ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++]
[double, [, nCols, ], ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[double, [, nCols, ], ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[nCols, ], ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, []
[for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, [, i, ], =]
[int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, [, i, ], =, getEntry, (]
[=, 0, ;, i, <, nCols, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, row, ,]
[nCols, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, row, ,, i, ), ;, }, return]
[}, public, void, setRow, (, final, int, row, ,, final, double, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[}, public, void, setRow, (, final, int, row, ,, final, double, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[(, final, int, row, ,, final, double, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkRowIndex, (]
[int, row, ,, final, double, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkRowIndex, (, this, ,]
[array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[(, this, ,, row, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (]
[=, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,]
[=, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,]
[;, if, (, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,]
[(, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,]
[new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, for, (, int, i, =]
[(, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;]
[(, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;]
[,, array, ., length, ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[., length, ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[length, ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++]
[,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (]
[}, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,]
[(, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,]
[(, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,]
[i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, array, []
[[, i, ], ), ;, }, }, public, double, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {]
[[, i, ], ), ;, }, }, public, double, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {]
[;, }, }, public, double, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkColumnIndex, (]
[}, public, double, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkColumnIndex, (, this, ,]
[final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =]
[(, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, double, [, ], out, =]
[column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, double, [, ], out, =, new, double, []
[(, ), ;, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, i, =]
[;, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, i, =, 0, ;, i, <]
[], out, =, new, double, [, nRows, ], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[out, =, new, double, [, nRows, ], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[double, [, nRows, ], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[double, [, nRows, ], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[nRows, ], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, []
[for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, [, i, ], =]
[int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, [, i, ], =, getEntry, (]
[=, 0, ;, i, <, nRows, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, i, ,]
[nRows, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, i, ,, column, ), ;, }, return]
[}, public, void, setColumn, (, final, int, column, ,, final, double, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[}, public, void, setColumn, (, final, int, column, ,, final, double, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {]
[(, final, int, column, ,, final, double, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkColumnIndex, (]
[int, column, ,, final, double, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkColumnIndex, (, this, ,]
[array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException, {, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =]
[{, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[{, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[{, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (]
[(, this, ,, column, ), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw]
[int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (]
[int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (]
[(, ), ;, if, (, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,]
[;, if, (, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,]
[(, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,]
[new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =]
[(, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[(, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[., length, ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (]
[}, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,]
[i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, array, []
[), ;, }, }, public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {]
[), ;, }, }, public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {]
[public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (]
[addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,]
[int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,]
[int, column, ,, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;]
[,, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (]
[increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,]
[throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,]
[throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,]
[{, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (]
[., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,]
[this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,, column, ), +]
[increment, ), ;, }, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {]
[increment, ), ;, }, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {]
[public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (]
[multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,]
[int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,]
[int, column, ,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;]
[,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (]
[factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,]
[throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,]
[throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,]
[{, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (]
[., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,]
[this, ,, row, ,, column, ), ;, setEntry, (, row, ,, column, ,, getEntry, (, row, ,, column, ), *]
[(, row, ,, column, ), *, factor, ), ;, }, public, RealMatrix, transpose, (, ), {, final, int, nRows, =]
[;, }, public, RealMatrix, transpose, (, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =]
[nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (]
[getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nCols, ,]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nCols, ,, nRows, ), ;]
[int, nCols, =, getColumnDimension, (, ), ;, final, RealMatrix, out, =, createMatrix, (, nCols, ,, nRows, ), ;, walkInOptimizedOrder, (]
[{, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {]
[{, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {]
[void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, out, ., setEntry, (]
[(, final, int, row, ,, final, int, column, ,, final, double, value, ), {, out, ., setEntry, (, column, ,]
[int, row, ,, final, int, column, ,, final, double, value, ), {, out, ., setEntry, (, column, ,, row, ,]
[double, value, ), {, out, ., setEntry, (, column, ,, row, ,, value, ), ;, }, }, ), ;, return]
[row, ,, value, ), ;, }, }, ), ;, return, out, ;, }, public, boolean, isSquare, (, ), {, return]
[row, ,, value, ), ;, }, }, ), ;, return, out, ;, }, public, boolean, isSquare, (, ), {, return]
[;, }, }, ), ;, return, out, ;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension, (, ), ==]
[Override, public, abstract, int, getColumnDimension, (, ), ;, public, double, getTrace, (, ), throws, NonSquareMatrixException, {, final, int, nRows, =]
[public, double, getTrace, (, ), throws, NonSquareMatrixException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[NonSquareMatrixException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[NonSquareMatrixException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, nRows, !=]
[getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, nRows, !=, nCols, ), {, throw]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, nRows, !=, nCols, ), {, throw, new, NonSquareMatrixException, (]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, nRows, !=, nCols, ), {, throw, new, NonSquareMatrixException, (, nRows, ,]
[if, (, nRows, !=, nCols, ), {, throw, new, NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, double, trace, =]
[throw, new, NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, double, trace, =, 0, ;, for, (, int, i, =]
[NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, double, trace, =, 0, ;, for, (, int, i, =, 0, ;]
[NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, double, trace, =, 0, ;, for, (, int, i, =, 0, ;]
[nRows, ,, nCols, ), ;, }, double, trace, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[nCols, ), ;, }, double, trace, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[), ;, }, double, trace, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[double, trace, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, trace, +=]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, trace, +=, getEntry, (]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, trace, +=, getEntry, (, i, ,]
[;, i, <, nRows, ;, ++, i, ), {, trace, +=, getEntry, (, i, ,, i, ), ;, }, return]
[}, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =]
[double, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[(, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double, [, ], out, =]
[new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double, [, ], out, =, new, double, []
[), ;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =]
[}, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;]
[}, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;]
[double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;, row, <]
[], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++]
[], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, double, sum, =]
[0, ;, row, <, nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =]
[row, <, nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[row, <, nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++]
[double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (]
[(, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,]
[=, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *]
[=, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *]
[;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, []
[;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, [, i, ], ;, }]
[;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, [, i, ], ;, }]
[i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, [, i, ], ;, }, out, []
[sum, +=, getEntry, (, row, ,, i, ), *, v, [, i, ], ;, }, out, [, row, ], =]
[row, ,, i, ), *, v, [, i, ], ;, }, out, [, row, ], =, sum, ;, }, return]
[return, out, ;, }, @, Override, public, RealVector, operate, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return]
[}, @, Override, public, RealVector, operate, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector, (]
[Override, public, RealVector, operate, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector, (, operate, (]
[Override, public, RealVector, operate, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector, (, operate, (]
[public, RealVector, operate, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector, (, operate, (, (]
[(, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector, (, operate, (, (, (, ArrayRealVector, )]
[try, {, return, new, ArrayRealVector, (, operate, (, (, (, ArrayRealVector, ), v, ), ., getDataRef, (, ), ), ,]
[., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =]
[;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=]
[final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=, nCols, ), {, throw]
[=, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[=, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[(, v, ., getDimension, (, ), !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,]
[throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nCols, ), ;, }, final, double, [, ], out, =]
[(, v, ., getDimension, (, ), ,, nCols, ), ;, }, final, double, [, ], out, =, new, double, []
[), ;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =]
[}, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;]
[}, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;]
[double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;, row, <]
[], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++]
[], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, double, sum, =]
[0, ;, row, <, nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =]
[row, <, nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[row, <, nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[nRows, ;, ++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[++, row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[row, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++]
[double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (]
[(, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,]
[=, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *]
[=, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *]
[<, nCols, ;, ++, i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, ., getEntry, (]
[i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, ., getEntry, (, i, ), ;, }]
[i, ), {, sum, +=, getEntry, (, row, ,, i, ), *, v, ., getEntry, (, i, ), ;, }]
[{, sum, +=, getEntry, (, row, ,, i, ), *, v, ., getEntry, (, i, ), ;, }, out, []
[getEntry, (, row, ,, i, ), *, v, ., getEntry, (, i, ), ;, }, out, [, row, ], =]
[i, ), *, v, ., getEntry, (, i, ), ;, }, out, [, row, ], =, sum, ;, }, return]
[v, ., getEntry, (, i, ), ;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayRealVector, (]
[getEntry, (, i, ), ;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,]
[}, public, double, [, ], preMultiply, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =]
[double, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (]
[(, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double, [, ], out, =]
[new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double, [, ], out, =, new, double, []
[), ;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =]
[}, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;]
[}, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;]
[double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;, col, <]
[], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++]
[], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =]
[0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =]
[col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,]
[=, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *]
[=, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *]
[;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, []
[;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, [, i, ], ;, }]
[;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, [, i, ], ;, }]
[i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, [, i, ], ;, }, out, []
[sum, +=, getEntry, (, i, ,, col, ), *, v, [, i, ], ;, }, out, [, col, ], =]
[i, ,, col, ), *, v, [, i, ], ;, }, out, [, col, ], =, sum, ;, }, return]
[;, }, return, out, ;, }, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return]
[out, ;, }, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector, (]
[}, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector, (, preMultiply, (]
[}, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector, (, preMultiply, (]
[public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector, (, preMultiply, (, (]
[(, final, RealVector, v, ), throws, DimensionMismatchException, {, try, {, return, new, ArrayRealVector, (, preMultiply, (, (, (, ArrayRealVector, )]
[try, {, return, new, ArrayRealVector, (, preMultiply, (, (, (, ArrayRealVector, ), v, ), ., getDataRef, (, ), ), ,]
[., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =]
[;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=]
[final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=, nRows, ), {, throw]
[=, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=, nRows, ), {, throw, new, DimensionMismatchException, (]
[=, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=, nRows, ), {, throw, new, DimensionMismatchException, (]
[(, v, ., getDimension, (, ), !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,]
[throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nRows, ), ;, }, final, double, [, ], out, =]
[(, v, ., getDimension, (, ), ,, nRows, ), ;, }, final, double, [, ], out, =, new, double, []
[), ;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =]
[}, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;]
[}, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;]
[double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;, col, <]
[], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++]
[], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =]
[0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =]
[col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,]
[=, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *]
[=, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *]
[<, nRows, ;, ++, i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, ., getEntry, (]
[i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, ., getEntry, (, i, ), ;, }]
[i, ), {, sum, +=, getEntry, (, i, ,, col, ), *, v, ., getEntry, (, i, ), ;, }]
[{, sum, +=, getEntry, (, i, ,, col, ), *, v, ., getEntry, (, i, ), ;, }, out, []
[getEntry, (, i, ,, col, ), *, v, ., getEntry, (, i, ), ;, }, out, [, col, ], =]
[col, ), *, v, ., getEntry, (, i, ), ;, }, out, [, col, ], =, sum, ;, }, return]
[v, ., getEntry, (, i, ), ;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayRealVector, (]
[getEntry, (, i, ), ;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayRealVector, (, out, ,]
[out, ,, false, ), ;, }, }, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =]
[double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =]
[int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;]
[int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;]
[=, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <]
[;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;]
[row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[{, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, final, double, oldValue, =]
[(, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, final, double, oldValue, =, getEntry, (]
[column, =, 0, ;, column, <, columns, ;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,]
[;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[{, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (]
[double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,]
[=, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,]
[row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;]
[column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (]
[;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,]
[(, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return]
[(, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return]
[visitor, ., end, (, ), ;, }, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =]
[double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =]
[int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;]
[int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;]
[=, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <]
[;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;]
[row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {]
[;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {]
[{, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, visitor, ., visit, (]
[(, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, visitor, ., visit, (, row, ,]
[column, =, 0, ;, column, <, columns, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,]
[0, ;, column, <, columns, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (]
[column, <, columns, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,]
[{, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return]
[{, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,]
[,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,]
[int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[(, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++]
[for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =]
[int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;]
[int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;]
[=, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=]
[;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;]
[row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++]
[{, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, final, double, oldValue, =]
[(, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, final, double, oldValue, =, getEntry, (]
[column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,]
[;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[;, ++, column, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[{, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (]
[double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,]
[=, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,]
[row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;]
[column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (]
[;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,]
[(, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return]
[(, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,]
[,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,]
[int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[(, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++]
[for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =]
[int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;]
[int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;]
[=, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=]
[;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;]
[row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++]
[;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {]
[;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {]
[{, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, visitor, ., visit, (]
[(, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, visitor, ., visit, (, row, ,]
[column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,]
[startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (]
[column, <=, endColumn, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,]
[{, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return]
[{, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return]
[visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =]
[double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =]
[int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;]
[int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;]
[=, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <]
[;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;]
[column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[{, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, final, double, oldValue, =]
[(, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, final, double, oldValue, =, getEntry, (]
[row, =, 0, ;, row, <, rows, ;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,]
[;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[{, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (]
[double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,]
[=, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,]
[row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;]
[column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (]
[;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,]
[(, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return]
[(, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return]
[visitor, ., end, (, ), ;, }, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =]
[double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =]
[int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;]
[int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;]
[=, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <]
[;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;]
[column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {]
[;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {]
[{, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, visitor, ., visit, (]
[(, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, visitor, ., visit, (, row, ,]
[row, =, 0, ;, row, <, rows, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,]
[0, ;, row, <, rows, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (]
[row, <, rows, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,]
[{, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return]
[{, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,]
[,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,]
[int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[(, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++]
[for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =]
[int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;]
[int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;]
[=, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=]
[;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;]
[column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++]
[{, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, final, double, oldValue, =]
[(, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, final, double, oldValue, =, getEntry, (]
[row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,]
[;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[;, ++, row, ), {, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =]
[{, final, double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (]
[double, oldValue, =, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,]
[=, getEntry, (, row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,]
[row, ,, column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;]
[column, ), ;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (]
[;, final, double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[double, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,]
[(, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return]
[(, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,]
[,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,]
[int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[(, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++]
[for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =]
[int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;]
[int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;]
[=, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=]
[;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;]
[column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++]
[;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {]
[;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {]
[{, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, visitor, ., visit, (]
[(, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, visitor, ., visit, (, row, ,]
[row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,]
[startRow, ;, row, <=, endRow, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (]
[row, <=, endRow, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,]
[{, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return]
[{, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return]
[}, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, return]
[return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, return, walkInRowOrder, (]
[visitor, ), {, return, walkInRowOrder, (, visitor, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, return]
[{, return, walkInRowOrder, (, visitor, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, return, walkInRowOrder, (]
[startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return]
[final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return, walkInRowOrder, (]
[endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return, walkInRowOrder, (, visitor, ,]
[final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return, walkInRowOrder, (, visitor, ,, startRow, ,]
[startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return, walkInRowOrder, (, visitor, ,, startRow, ,, endRow, ,]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return, walkInRowOrder, (, visitor, ,, startRow, ,, endRow, ,, startColumn, ,]
[startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return]
[final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return, walkInRowOrder, (]
[endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return, walkInRowOrder, (, visitor, ,]
[final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return, walkInRowOrder, (, visitor, ,, startRow, ,]
[startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return, walkInRowOrder, (, visitor, ,, startRow, ,, endRow, ,]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, return, walkInRowOrder, (, visitor, ,, startRow, ,, endRow, ,, startColumn, ,]
[endRow, ,, startColumn, ,, endColumn, ), ;, }, @, Override, public, String, toString, (, ), {, final, StringBuilder, res, =]
[@, Override, public, String, toString, (, ), {, final, StringBuilder, res, =, new, StringBuilder, (, ), ;, String, fullClassName, =]
[@, Override, public, String, toString, (, ), {, final, StringBuilder, res, =, new, StringBuilder, (, ), ;, String, fullClassName, =]
[=, new, StringBuilder, (, ), ;, String, fullClassName, =, getClass, (, ), ., getName, (, ), ;, String, shortClassName, =]
[=, new, StringBuilder, (, ), ;, String, fullClassName, =, getClass, (, ), ., getName, (, ), ;, String, shortClassName, =]
[), ;, String, fullClassName, =, getClass, (, ), ., getName, (, ), ;, String, shortClassName, =, fullClassName, ., substring, (]
[), ;, String, fullClassName, =, getClass, (, ), ., getName, (, ), ;, String, shortClassName, =, fullClassName, ., substring, (]
[), ;, String, fullClassName, =, getClass, (, ), ., getName, (, ), ;, String, shortClassName, =, fullClassName, ., substring, (]
[=, getClass, (, ), ., getName, (, ), ;, String, shortClassName, =, fullClassName, ., substring, (, fullClassName, ., lastIndexOf, (]
[), ., getName, (, ), ;, String, shortClassName, =, fullClassName, ., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +]
[(, ), ;, String, shortClassName, =, fullClassName, ., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +, 1, ), ;]
[(, ), ;, String, shortClassName, =, fullClassName, ., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +, 1, ), ;]
[shortClassName, =, fullClassName, ., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +, 1, ), ;, res, ., append, (]
[., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +, 1, ), ;, res, ., append, (, shortClassName, ), ;]
[., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +, 1, ), ;, res, ., append, (, shortClassName, ), ;]
[., lastIndexOf, (, '.', ), +, 1, ), ;, res, ., append, (, shortClassName, ), ;, res, ., append, (]
[., lastIndexOf, (, '.', ), +, 1, ), ;, res, ., append, (, shortClassName, ), ;, res, ., append, (]
[), +, 1, ), ;, res, ., append, (, shortClassName, ), ;, res, ., append, (, DEFAULT_FORMAT, ., format, (]
[res, ., append, (, shortClassName, ), ;, res, ., append, (, DEFAULT_FORMAT, ., format, (, this, ), ), ;, return]
[res, ., append, (, shortClassName, ), ;, res, ., append, (, DEFAULT_FORMAT, ., format, (, this, ), ), ;, return]
[res, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, object, ), {, if, (]
[res, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, object, ), {, if, (]
[toString, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, object, ), {, if, (, object, ==]
[}, @, Override, public, boolean, equals, (, final, Object, object, ), {, if, (, object, ==, this, ), {, return]
[equals, (, final, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, final, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, final, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (]
[object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (, object, instanceof, RealMatrix, ==]
[(, object, ==, this, ), {, return, true, ;, }, if, (, object, instanceof, RealMatrix, ==, false, ), {, return]
[return, true, ;, }, if, (, object, instanceof, RealMatrix, ==, false, ), {, return, false, ;, }, RealMatrix, m, =]
[}, if, (, object, instanceof, RealMatrix, ==, false, ), {, return, false, ;, }, RealMatrix, m, =, (, RealMatrix, )]
[==, false, ), {, return, false, ;, }, RealMatrix, m, =, (, RealMatrix, ), object, ;, final, int, nRows, =]
[RealMatrix, m, =, (, RealMatrix, ), object, ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[object, ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[object, ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[object, ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[object, ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=, nCols, ||]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=, nCols, ||]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=, nCols, ||]
[getColumnDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=, nCols, ||, m, ., getRowDimension, (, ), !=]
[if, (, m, ., getColumnDimension, (, ), !=, nCols, ||, m, ., getRowDimension, (, ), !=, nRows, ), {, return]
[nCols, ||, m, ., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row, =]
[m, ., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0, ;]
[m, ., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0, ;]
[getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0, ;, row, <]
[), !=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[!=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++]
[for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =]
[int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[=, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <]
[;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++]
[row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, if, (]
[row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, if, (]
[{, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, if, (, getEntry, (]
[(, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, if, (, getEntry, (, row, ,]
[=, 0, ;, col, <, nCols, ;, ++, col, ), {, if, (, getEntry, (, row, ,, col, ), !=]
[=, 0, ;, col, <, nCols, ;, ++, col, ), {, if, (, getEntry, (, row, ,, col, ), !=]
[<, nCols, ;, ++, col, ), {, if, (, getEntry, (, row, ,, col, ), !=, m, ., getEntry, (]
[;, ++, col, ), {, if, (, getEntry, (, row, ,, col, ), !=, m, ., getEntry, (, row, ,]
[if, (, getEntry, (, row, ,, col, ), !=, m, ., getEntry, (, row, ,, col, ), ), {, return]
[col, ), !=, m, ., getEntry, (, row, ,, col, ), ), {, return, false, ;, }, }, }, return]
[false, ;, }, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, int, ret, =]
[true, ;, }, @, Override, public, int, hashCode, (, ), {, int, ret, =, 7, ;, final, int, nRows, =]
[(, ), {, int, ret, =, 7, ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[ret, =, 7, ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;]
[7, ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =]
[7, ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =]
[7, ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =]
[final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =, ret, *]
[nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =, ret, *, 31, +]
[getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =, ret, *, 31, +, nRows, ;]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =, ret, *, 31, +, nRows, ;, ret, =]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =, ret, *, 31, +, nRows, ;, ret, =]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =, ret, *, 31, +, nRows, ;, ret, =]
[final, int, nCols, =, getColumnDimension, (, ), ;, ret, =, ret, *, 31, +, nRows, ;, ret, =, ret, *]
[nCols, =, getColumnDimension, (, ), ;, ret, =, ret, *, 31, +, nRows, ;, ret, =, ret, *, 31, +]
[=, ret, *, 31, +, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =]
[*, 31, +, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;]
[*, 31, +, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;]
[+, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <]
[;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++]
[for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =]
[int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;]
[=, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <]
[;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =]
[row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =]
[row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =]
[{, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret, *]
[(, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +]
[(, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +]
[int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +, (]
[int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +, (]
[int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +, (]
[=, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *]
[0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (]
[0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (]
[col, <, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +]
[;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +]
[;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +]
[col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *]
[), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (]
[), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (]
[ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (, col, +]
[31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (, col, +, 1, ), ), *]
[31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (, col, +, 1, ), ), *]
[*, (, row, +, 1, ), +, 17, *, (, col, +, 1, ), ), *, MathUtils, ., hash, (]
[row, +, 1, ), +, 17, *, (, col, +, 1, ), ), *, MathUtils, ., hash, (, getEntry, (]
[1, ), +, 17, *, (, col, +, 1, ), ), *, MathUtils, ., hash, (, getEntry, (, row, ,]
[+, 1, ), ), *, MathUtils, ., hash, (, getEntry, (, row, ,, col, ), ), ;, }, }, return]
