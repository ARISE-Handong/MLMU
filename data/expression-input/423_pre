[,, E, >, >, edgePredicate, ;, public, GraphReachability, (, DiGraph, <, N, ,, E, >, graph, ), {, this, (]
[>, >, edgePredicate, ;, public, GraphReachability, (, DiGraph, <, N, ,, E, >, graph, ), {, this, (, graph, ,]
[DiGraph, <, N, ,, E, >, graph, ,, Predicate, <, EdgeTuple, <, N, ,, E, >, >, edgePredicate, ), {]
[DiGraph, <, N, ,, E, >, graph, ,, Predicate, <, EdgeTuple, <, N, ,, E, >, >, edgePredicate, ), {]
[E, >, graph, ,, Predicate, <, EdgeTuple, <, N, ,, E, >, >, edgePredicate, ), {, this, ., graph, =]
[graph, ,, Predicate, <, EdgeTuple, <, N, ,, E, >, >, edgePredicate, ), {, this, ., graph, =, graph, ;]
[graph, ,, Predicate, <, EdgeTuple, <, N, ,, E, >, >, edgePredicate, ), {, this, ., graph, =, graph, ;]
[EdgeTuple, <, N, ,, E, >, >, edgePredicate, ), {, this, ., graph, =, graph, ;, this, ., edgePredicate, =]
[., graph, =, graph, ;, this, ., edgePredicate, =, edgePredicate, ;, }, public, void, compute, (, N, entry, ), {]
[., graph, =, graph, ;, this, ., edgePredicate, =, edgePredicate, ;, }, public, void, compute, (, N, entry, ), {]
[., edgePredicate, =, edgePredicate, ;, }, public, void, compute, (, N, entry, ), {, graph, ., clearNodeAnnotations, (, ), ;]
[., edgePredicate, =, edgePredicate, ;, }, public, void, compute, (, N, entry, ), {, graph, ., clearNodeAnnotations, (, ), ;]
[., edgePredicate, =, edgePredicate, ;, }, public, void, compute, (, N, entry, ), {, graph, ., clearNodeAnnotations, (, ), ;]
[;, }, public, void, compute, (, N, entry, ), {, graph, ., clearNodeAnnotations, (, ), ;, graph, ., getNode, (]
[(, N, entry, ), {, graph, ., clearNodeAnnotations, (, ), ;, graph, ., getNode, (, entry, ), ., setAnnotation, (]
[), {, graph, ., clearNodeAnnotations, (, ), ;, graph, ., getNode, (, entry, ), ., setAnnotation, (, REACHABLE, ), ;]
[), {, graph, ., clearNodeAnnotations, (, ), ;, graph, ., getNode, (, entry, ), ., setAnnotation, (, REACHABLE, ), ;]
[), {, graph, ., clearNodeAnnotations, (, ), ;, graph, ., getNode, (, entry, ), ., setAnnotation, (, REACHABLE, ), ;]
[clearNodeAnnotations, (, ), ;, graph, ., getNode, (, entry, ), ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (]
[., getNode, (, entry, ), ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (]
[(, entry, ), ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,]
[entry, ), ;, }, public, void, recompute, (, N, reachableNode, ), {, GraphNode, <, N, ,, E, >, newReachable, =]
[entry, ), ;, }, public, void, recompute, (, N, reachableNode, ), {, GraphNode, <, N, ,, E, >, newReachable, =]
[public, void, recompute, (, N, reachableNode, ), {, GraphNode, <, N, ,, E, >, newReachable, =, graph, ., getNode, (]
[(, N, reachableNode, ), {, GraphNode, <, N, ,, E, >, newReachable, =, graph, ., getNode, (, reachableNode, ), ;]
[(, N, reachableNode, ), {, GraphNode, <, N, ,, E, >, newReachable, =, graph, ., getNode, (, reachableNode, ), ;]
[{, GraphNode, <, N, ,, E, >, newReachable, =, graph, ., getNode, (, reachableNode, ), ;, Preconditions, ., checkState, (]
[{, GraphNode, <, N, ,, E, >, newReachable, =, graph, ., getNode, (, reachableNode, ), ;, Preconditions, ., checkState, (]
[{, GraphNode, <, N, ,, E, >, newReachable, =, graph, ., getNode, (, reachableNode, ), ;, Preconditions, ., checkState, (]
[>, newReachable, =, graph, ., getNode, (, reachableNode, ), ;, Preconditions, ., checkState, (, newReachable, ., getAnnotation, (, ), !=]
[graph, ., getNode, (, reachableNode, ), ;, Preconditions, ., checkState, (, newReachable, ., getAnnotation, (, ), !=, REACHABLE, ), ;]
[graph, ., getNode, (, reachableNode, ), ;, Preconditions, ., checkState, (, newReachable, ., getAnnotation, (, ), !=, REACHABLE, ), ;]
[reachableNode, ), ;, Preconditions, ., checkState, (, newReachable, ., getAnnotation, (, ), !=, REACHABLE, ), ;, newReachable, ., setAnnotation, (]
[Preconditions, ., checkState, (, newReachable, ., getAnnotation, (, ), !=, REACHABLE, ), ;, newReachable, ., setAnnotation, (, REACHABLE, ), ;]
[Preconditions, ., checkState, (, newReachable, ., getAnnotation, (, ), !=, REACHABLE, ), ;, newReachable, ., setAnnotation, (, REACHABLE, ), ;]
[Preconditions, ., checkState, (, newReachable, ., getAnnotation, (, ), !=, REACHABLE, ), ;, newReachable, ., setAnnotation, (, REACHABLE, ), ;]
[newReachable, ., getAnnotation, (, ), !=, REACHABLE, ), ;, newReachable, ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (]
[!=, REACHABLE, ), ;, newReachable, ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (]
[), ;, newReachable, ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,]
[;, }, @, Override, public, boolean, traverseEdge, (, N, source, ,, E, e, ,, N, destination, ), {, if, (]
[;, }, @, Override, public, boolean, traverseEdge, (, N, source, ,, E, e, ,, N, destination, ), {, if, (]
[;, }, @, Override, public, boolean, traverseEdge, (, N, source, ,, E, e, ,, N, destination, ), {, if, (]
[;, }, @, Override, public, boolean, traverseEdge, (, N, source, ,, E, e, ,, N, destination, ), {, if, (]
[;, }, @, Override, public, boolean, traverseEdge, (, N, source, ,, E, e, ,, N, destination, ), {, if, (]
[public, boolean, traverseEdge, (, N, source, ,, E, e, ,, N, destination, ), {, if, (, graph, ., getNode, (]
[E, e, ,, N, destination, ), {, if, (, graph, ., getNode, (, source, ), ., getAnnotation, (, ), ==]
[,, N, destination, ), {, if, (, graph, ., getNode, (, source, ), ., getAnnotation, (, ), ==, REACHABLE, &&]
[N, destination, ), {, if, (, graph, ., getNode, (, source, ), ., getAnnotation, (, ), ==, REACHABLE, &&, (]
[N, destination, ), {, if, (, graph, ., getNode, (, source, ), ., getAnnotation, (, ), ==, REACHABLE, &&, (]
[N, destination, ), {, if, (, graph, ., getNode, (, source, ), ., getAnnotation, (, ), ==, REACHABLE, &&, (]
[), {, if, (, graph, ., getNode, (, source, ), ., getAnnotation, (, ), ==, REACHABLE, &&, (, edgePredicate, ==]
[if, (, graph, ., getNode, (, source, ), ., getAnnotation, (, ), ==, REACHABLE, &&, (, edgePredicate, ==, null, ||]
[if, (, graph, ., getNode, (, source, ), ., getAnnotation, (, ), ==, REACHABLE, &&, (, edgePredicate, ==, null, ||]
[getNode, (, source, ), ., getAnnotation, (, ), ==, REACHABLE, &&, (, edgePredicate, ==, null, ||, edgePredicate, ., apply, (]
[==, REACHABLE, &&, (, edgePredicate, ==, null, ||, edgePredicate, ., apply, (, new, EdgeTuple, <, N, ,, E, >, (]
[&&, (, edgePredicate, ==, null, ||, edgePredicate, ., apply, (, new, EdgeTuple, <, N, ,, E, >, (, source, ,]
[edgePredicate, ==, null, ||, edgePredicate, ., apply, (, new, EdgeTuple, <, N, ,, E, >, (, source, ,, e, ,]
[>, (, source, ,, e, ,, destination, ), ), ), ), {, GraphNode, <, N, ,, E, >, destNode, =]
[>, (, source, ,, e, ,, destination, ), ), ), ), {, GraphNode, <, N, ,, E, >, destNode, =]
[e, ,, destination, ), ), ), ), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode, (]
[), ), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode, (, destination, ), ;, if, (]
[), ), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode, (, destination, ), ;, if, (]
[), ), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode, (, destination, ), ;, if, (]
[,, E, >, destNode, =, graph, ., getNode, (, destination, ), ;, if, (, destNode, ., getAnnotation, (, ), !=]
[destNode, =, graph, ., getNode, (, destination, ), ;, if, (, destNode, ., getAnnotation, (, ), !=, REACHABLE, ), {]
[destNode, =, graph, ., getNode, (, destination, ), ;, if, (, destNode, ., getAnnotation, (, ), !=, REACHABLE, ), {]
[getNode, (, destination, ), ;, if, (, destNode, ., getAnnotation, (, ), !=, REACHABLE, ), {, destNode, ., setAnnotation, (]
[;, if, (, destNode, ., getAnnotation, (, ), !=, REACHABLE, ), {, destNode, ., setAnnotation, (, REACHABLE, ), ;, return]
[getAnnotation, (, ), !=, REACHABLE, ), {, destNode, ., setAnnotation, (, REACHABLE, ), ;, return, true, ;, }, }, return]
[setAnnotation, (, REACHABLE, ), ;, return, true, ;, }, }, return, false, ;, }, public, static, final, Annotation, REACHABLE, =]
[edge, ;, public, final, N, destNode, ;, public, EdgeTuple, (, N, sourceNode, ,, E, edge, ,, N, destNode, ), {]
[edge, ;, public, final, N, destNode, ;, public, EdgeTuple, (, N, sourceNode, ,, E, edge, ,, N, destNode, ), {]
[N, destNode, ;, public, EdgeTuple, (, N, sourceNode, ,, E, edge, ,, N, destNode, ), {, this, ., sourceNode, =]
[;, public, EdgeTuple, (, N, sourceNode, ,, E, edge, ,, N, destNode, ), {, this, ., sourceNode, =, sourceNode, ;]
[;, public, EdgeTuple, (, N, sourceNode, ,, E, edge, ,, N, destNode, ), {, this, ., sourceNode, =, sourceNode, ;]
[N, sourceNode, ,, E, edge, ,, N, destNode, ), {, this, ., sourceNode, =, sourceNode, ;, this, ., edge, =]
[,, E, edge, ,, N, destNode, ), {, this, ., sourceNode, =, sourceNode, ;, this, ., edge, =, edge, ;]
[,, E, edge, ,, N, destNode, ), {, this, ., sourceNode, =, sourceNode, ;, this, ., edge, =, edge, ;]
[N, destNode, ), {, this, ., sourceNode, =, sourceNode, ;, this, ., edge, =, edge, ;, this, ., destNode, =]
