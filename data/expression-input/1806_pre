[., Locale, ;, import, java, ., util, ., NoSuchElementException, ;, public, class, DateUtils, {, public, static, final, long, MILLIS_PER_SECOND, =]
[NoSuchElementException, ;, public, class, DateUtils, {, public, static, final, long, MILLIS_PER_SECOND, =, 1000, ;, public, static, final, long, MILLIS_PER_MINUTE, =]
[NoSuchElementException, ;, public, class, DateUtils, {, public, static, final, long, MILLIS_PER_SECOND, =, 1000, ;, public, static, final, long, MILLIS_PER_MINUTE, =]
[public, class, DateUtils, {, public, static, final, long, MILLIS_PER_SECOND, =, 1000, ;, public, static, final, long, MILLIS_PER_MINUTE, =, 60, *]
[MILLIS_PER_SECOND, =, 1000, ;, public, static, final, long, MILLIS_PER_MINUTE, =, 60, *, MILLIS_PER_SECOND, ;, public, static, final, long, MILLIS_PER_HOUR, =]
[MILLIS_PER_SECOND, =, 1000, ;, public, static, final, long, MILLIS_PER_MINUTE, =, 60, *, MILLIS_PER_SECOND, ;, public, static, final, long, MILLIS_PER_HOUR, =]
[1000, ;, public, static, final, long, MILLIS_PER_MINUTE, =, 60, *, MILLIS_PER_SECOND, ;, public, static, final, long, MILLIS_PER_HOUR, =, 60, *]
[60, *, MILLIS_PER_SECOND, ;, public, static, final, long, MILLIS_PER_HOUR, =, 60, *, MILLIS_PER_MINUTE, ;, public, static, final, long, MILLIS_PER_DAY, =]
[60, *, MILLIS_PER_SECOND, ;, public, static, final, long, MILLIS_PER_HOUR, =, 60, *, MILLIS_PER_MINUTE, ;, public, static, final, long, MILLIS_PER_DAY, =]
[MILLIS_PER_SECOND, ;, public, static, final, long, MILLIS_PER_HOUR, =, 60, *, MILLIS_PER_MINUTE, ;, public, static, final, long, MILLIS_PER_DAY, =, 24, *]
[60, *, MILLIS_PER_MINUTE, ;, public, static, final, long, MILLIS_PER_DAY, =, 24, *, MILLIS_PER_HOUR, ;, public, static, final, int, SEMI_MONTH, =]
[MILLIS_PER_HOUR, ;, public, static, final, int, SEMI_MONTH, =, 1001, ;, private, static, final, int, [, ], [, ], fields, =]
[;, public, static, final, int, SEMI_MONTH, =, 1001, ;, private, static, final, int, [, ], [, ], fields, =, {]
[public, static, final, int, SEMI_MONTH, =, 1001, ;, private, static, final, int, [, ], [, ], fields, =, {, {]
[public, static, final, int, SEMI_MONTH, =, 1001, ;, private, static, final, int, [, ], [, ], fields, =, {, {]
[=, 1001, ;, private, static, final, int, [, ], [, ], fields, =, {, {, Calendar, ., MILLISECOND, }, ,]
[1001, ;, private, static, final, int, [, ], [, ], fields, =, {, {, Calendar, ., MILLISECOND, }, ,, {]
[1001, ;, private, static, final, int, [, ], [, ], fields, =, {, {, Calendar, ., MILLISECOND, }, ,, {]
[int, [, ], [, ], fields, =, {, {, Calendar, ., MILLISECOND, }, ,, {, Calendar, ., SECOND, }, ,]
[[, ], [, ], fields, =, {, {, Calendar, ., MILLISECOND, }, ,, {, Calendar, ., SECOND, }, ,, {]
[[, ], [, ], fields, =, {, {, Calendar, ., MILLISECOND, }, ,, {, Calendar, ., SECOND, }, ,, {]
[=, {, {, Calendar, ., MILLISECOND, }, ,, {, Calendar, ., SECOND, }, ,, {, Calendar, ., MINUTE, }, ,]
[{, {, Calendar, ., MILLISECOND, }, ,, {, Calendar, ., SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {]
[{, {, Calendar, ., MILLISECOND, }, ,, {, Calendar, ., SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {]
[MILLISECOND, }, ,, {, Calendar, ., SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,]
[MILLISECOND, }, ,, {, Calendar, ., SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,]
[., SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,]
[SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {]
[SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {]
[Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,]
[Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,]
[,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,]
[,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,]
[,, Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,]
[Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {]
[Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {]
[,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH, ,]
[,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH, ,]
[,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,]
[Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {]
[Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {]
[., AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {, Calendar, ., YEAR, }, ,]
[AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {, Calendar, ., YEAR, }, ,, {]
[AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {, Calendar, ., YEAR, }, ,, {]
[,, {, Calendar, ., YEAR, }, ,, {, Calendar, ., ERA, }, }, ;, public, static, final, int, RANGE_WEEK_SUNDAY, =]
[Calendar, ., ERA, }, }, ;, public, static, final, int, RANGE_WEEK_SUNDAY, =, 1, ;, public, static, final, int, RANGE_WEEK_MONDAY, =]
[final, int, RANGE_WEEK_SUNDAY, =, 1, ;, public, static, final, int, RANGE_WEEK_MONDAY, =, 2, ;, public, static, final, int, RANGE_WEEK_RELATIVE, =]
[final, int, RANGE_WEEK_MONDAY, =, 2, ;, public, static, final, int, RANGE_WEEK_RELATIVE, =, 3, ;, public, static, final, int, RANGE_WEEK_CENTER, =]
[final, int, RANGE_WEEK_RELATIVE, =, 3, ;, public, static, final, int, RANGE_WEEK_CENTER, =, 4, ;, public, static, final, int, RANGE_MONTH_SUNDAY, =]
[final, int, RANGE_WEEK_CENTER, =, 4, ;, public, static, final, int, RANGE_MONTH_SUNDAY, =, 5, ;, public, static, final, int, RANGE_MONTH_MONDAY, =]
[final, int, RANGE_MONTH_SUNDAY, =, 5, ;, public, static, final, int, RANGE_MONTH_MONDAY, =, 6, ;, private, static, final, int, MODIFY_TRUNCATE, =]
[final, int, RANGE_MONTH_MONDAY, =, 6, ;, private, static, final, int, MODIFY_TRUNCATE, =, 0, ;, private, static, final, int, MODIFY_ROUND, =]
[final, int, MODIFY_TRUNCATE, =, 0, ;, private, static, final, int, MODIFY_ROUND, =, 1, ;, private, static, final, int, MODIFY_CEILING, =]
[(, ), ;, }, public, static, boolean, isSameDay, (, final, Date, date1, ,, final, Date, date2, ), {, if, (]
[(, ), ;, }, public, static, boolean, isSameDay, (, final, Date, date1, ,, final, Date, date2, ), {, if, (]
[(, ), ;, }, public, static, boolean, isSameDay, (, final, Date, date1, ,, final, Date, date2, ), {, if, (]
[;, }, public, static, boolean, isSameDay, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1, ==]
[public, static, boolean, isSameDay, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1, ==, null, ||]
[public, static, boolean, isSameDay, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1, ==, null, ||]
[boolean, isSameDay, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1, ==, null, ||, date2, ==]
[Date, date1, ,, final, Date, date2, ), {, if, (, date1, ==, null, ||, date2, ==, null, ), {, throw]
[final, Date, date2, ), {, if, (, date1, ==, null, ||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (]
[==, null, ||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =]
[==, null, ||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =, Calendar, ., getInstance, (, ), ;]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =, Calendar, ., getInstance, (, ), ;]
[IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =, Calendar, ., getInstance, (, ), ;, cal1, ., setTime, (]
[Calendar, cal1, =, Calendar, ., getInstance, (, ), ;, cal1, ., setTime, (, date1, ), ;, final, Calendar, cal2, =]
[Calendar, cal1, =, Calendar, ., getInstance, (, ), ;, cal1, ., setTime, (, date1, ), ;, final, Calendar, cal2, =]
[(, ), ;, cal1, ., setTime, (, date1, ), ;, final, Calendar, cal2, =, Calendar, ., getInstance, (, ), ;]
[(, ), ;, cal1, ., setTime, (, date1, ), ;, final, Calendar, cal2, =, Calendar, ., getInstance, (, ), ;]
[., setTime, (, date1, ), ;, final, Calendar, cal2, =, Calendar, ., getInstance, (, ), ;, cal2, ., setTime, (]
[), ;, final, Calendar, cal2, =, Calendar, ., getInstance, (, ), ;, cal2, ., setTime, (, date2, ), ;, return]
[final, Calendar, cal2, =, Calendar, ., getInstance, (, ), ;, cal2, ., setTime, (, date2, ), ;, return, isSameDay, (]
[cal2, =, Calendar, ., getInstance, (, ), ;, cal2, ., setTime, (, date2, ), ;, return, isSameDay, (, cal1, ,]
[cal2, ), ;, }, public, static, boolean, isSameDay, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (]
[cal2, ), ;, }, public, static, boolean, isSameDay, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (]
[cal2, ), ;, }, public, static, boolean, isSameDay, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (]
[;, }, public, static, boolean, isSameDay, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==]
[public, static, boolean, isSameDay, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||]
[public, static, boolean, isSameDay, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||]
[boolean, isSameDay, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||, cal2, ==]
[Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw]
[final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (]
[if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (]
[||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (]
[{, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., ERA, ), ==]
[{, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., ERA, ), ==]
[(, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (]
[(, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (]
[return, (, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&]
[return, (, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&]
[return, (, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&]
[get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., get, (]
[get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., get, (]
[), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==]
[), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==]
[get, (, Calendar, ., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (]
[get, (, Calendar, ., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (]
[), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&]
[), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&]
[), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&]
[get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (]
[get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (]
[), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==]
[), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==]
[get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (]
[get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (]
[), ), ;, }, public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (]
[), ), ;, }, public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (]
[), ), ;, }, public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (]
[;, }, public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1, ==]
[public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1, ==, null, ||]
[public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1, ==, null, ||]
[boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1, ==, null, ||, date2, ==]
[Date, date1, ,, final, Date, date2, ), {, if, (, date1, ==, null, ||, date2, ==, null, ), {, throw]
[final, Date, date2, ), {, if, (, date1, ==, null, ||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (]
[if, (, date1, ==, null, ||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return]
[if, (, date1, ==, null, ||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return]
[if, (, date1, ==, null, ||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return]
[date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, date1, ., getTime, (, ), ==]
[date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, date1, ., getTime, (, ), ==]
[(, ), ;, }, public, static, boolean, isSameInstant, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (]
[(, ), ;, }, public, static, boolean, isSameInstant, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (]
[(, ), ;, }, public, static, boolean, isSameInstant, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (]
[;, }, public, static, boolean, isSameInstant, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==]
[public, static, boolean, isSameInstant, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||]
[public, static, boolean, isSameInstant, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||]
[boolean, isSameInstant, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||, cal2, ==]
[Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw]
[final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (]
[if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return]
[if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return]
[if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return]
[if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return]
[{, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, cal1, ., getTime, (, ), ., getTime, (, ), ==]
[{, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, cal1, ., getTime, (, ), ., getTime, (, ), ==]
[{, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, cal1, ., getTime, (, ), ., getTime, (, ), ==]
[(, ), ;, }, public, static, boolean, isSameLocalTime, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (]
[(, ), ;, }, public, static, boolean, isSameLocalTime, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (]
[(, ), ;, }, public, static, boolean, isSameLocalTime, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (]
[;, }, public, static, boolean, isSameLocalTime, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==]
[public, static, boolean, isSameLocalTime, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||]
[public, static, boolean, isSameLocalTime, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||]
[boolean, isSameLocalTime, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||, cal2, ==]
[Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw]
[final, Calendar, cal2, ), {, if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (]
[if, (, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[(, cal1, ==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (]
[||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (]
[||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (]
[{, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., MILLISECOND, ), ==]
[{, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., MILLISECOND, ), ==]
[(, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (]
[(, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (]
[return, (, cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&]
[return, (, cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&]
[return, (, cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&]
[get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (]
[get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (]
[), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==]
[), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==]
[get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (]
[get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (]
[), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&]
[), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&]
[), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&]
[get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (]
[get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (]
[), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==]
[), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==]
[get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (]
[get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (]
[), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&]
[), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&]
[), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&]
[get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (]
[get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (]
[), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==]
[), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==]
[get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (]
[get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (]
[), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&]
[), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&]
[), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&]
[get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (]
[get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (]
[), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==]
[), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==]
[get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (]
[get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (]
[), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&]
[), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&]
[), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&]
[get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (]
[get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (]
[), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==]
[), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==]
[get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (]
[get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (]
[), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&]
[), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&]
[), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&]
[get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (]
[get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (]
[), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA, ), ==]
[), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA, ), ==]
[get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (]
[get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (]
[), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&]
[), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&]
[), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&]
[Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., getClass, (, ), ==]
[Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., getClass, (, ), ==]
[;, }, public, static, Date, parseDate, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return]
[public, static, Date, parseDate, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDate, (]
[Date, parseDate, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDate, (, str, ,]
[(, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDate, (, str, ,, null, ,]
[Date, parseDate, (, final, String, str, ,, final, Locale, locale, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return]
[(, final, String, str, ,, final, Locale, locale, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDateWithLeniency, (]
[String, str, ,, final, Locale, locale, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDateWithLeniency, (, str, ,]
[,, final, Locale, locale, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDateWithLeniency, (, str, ,, locale, ,]
[Locale, locale, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDateWithLeniency, (, str, ,, locale, ,, parsePatterns, ,]
[;, }, public, static, Date, parseDateStrictly, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return]
[public, static, Date, parseDateStrictly, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDateStrictly, (]
[Date, parseDateStrictly, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDateStrictly, (, str, ,]
[(, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDateStrictly, (, str, ,, null, ,]
[Date, parseDateStrictly, (, final, String, str, ,, final, Locale, locale, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return]
[(, final, String, str, ,, final, Locale, locale, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDateWithLeniency, (]
[String, str, ,, final, Locale, locale, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDateWithLeniency, (, str, ,]
[,, final, Locale, locale, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDateWithLeniency, (, str, ,, null, ,]
[Locale, locale, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return, parseDateWithLeniency, (, str, ,, null, ,, parsePatterns, ,]
[,, final, Locale, locale, ,, final, String, [, ], parsePatterns, ,, final, boolean, lenient, ), throws, ParseException, {, if, (]
[,, final, Locale, locale, ,, final, String, [, ], parsePatterns, ,, final, boolean, lenient, ), throws, ParseException, {, if, (]
[,, final, Locale, locale, ,, final, String, [, ], parsePatterns, ,, final, boolean, lenient, ), throws, ParseException, {, if, (]
[Locale, locale, ,, final, String, [, ], parsePatterns, ,, final, boolean, lenient, ), throws, ParseException, {, if, (, str, ==]
[,, final, String, [, ], parsePatterns, ,, final, boolean, lenient, ), throws, ParseException, {, if, (, str, ==, null, ||]
[,, final, String, [, ], parsePatterns, ,, final, boolean, lenient, ), throws, ParseException, {, if, (, str, ==, null, ||]
[String, [, ], parsePatterns, ,, final, boolean, lenient, ), throws, ParseException, {, if, (, str, ==, null, ||, parsePatterns, ==]
[,, final, boolean, lenient, ), throws, ParseException, {, if, (, str, ==, null, ||, parsePatterns, ==, null, ), {, throw]
[lenient, ), throws, ParseException, {, if, (, str, ==, null, ||, parsePatterns, ==, null, ), {, throw, new, IllegalArgumentException, (]
[null, ||, parsePatterns, ==, null, ), {, throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if, (]
[null, ||, parsePatterns, ==, null, ), {, throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if, (]
[parsePatterns, ==, null, ), {, throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if, (, locale, ==]
[), {, throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if, (, locale, ==, null, ), {]
[throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if, (, locale, ==, null, ), {, parser, =]
[SimpleDateFormat, parser, ;, if, (, locale, ==, null, ), {, parser, =, new, SimpleDateFormat, (, ), ;, }, else, {]
[;, if, (, locale, ==, null, ), {, parser, =, new, SimpleDateFormat, (, ), ;, }, else, {, parser, =]
[locale, ==, null, ), {, parser, =, new, SimpleDateFormat, (, ), ;, }, else, {, parser, =, new, SimpleDateFormat, (]
[null, ), {, parser, =, new, SimpleDateFormat, (, ), ;, }, else, {, parser, =, new, SimpleDateFormat, (, "", ,]
[=, new, SimpleDateFormat, (, ), ;, }, else, {, parser, =, new, SimpleDateFormat, (, "", ,, locale, ), ;, }]
[=, new, SimpleDateFormat, (, ), ;, }, else, {, parser, =, new, SimpleDateFormat, (, "", ,, locale, ), ;, }]
[), ;, }, else, {, parser, =, new, SimpleDateFormat, (, "", ,, locale, ), ;, }, parser, ., setLenient, (]
[new, SimpleDateFormat, (, "", ,, locale, ), ;, }, parser, ., setLenient, (, lenient, ), ;, final, ParsePosition, pos, =]
["", ,, locale, ), ;, }, parser, ., setLenient, (, lenient, ), ;, final, ParsePosition, pos, =, new, ParsePosition, (]
[(, lenient, ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, for, (, final, String, parsePattern, :]
[pos, =, new, ParsePosition, (, 0, ), ;, for, (, final, String, parsePattern, :, parsePatterns, ), {, String, pattern, =]
[(, 0, ), ;, for, (, final, String, parsePattern, :, parsePatterns, ), {, String, pattern, =, parsePattern, ;, if, (]
[(, 0, ), ;, for, (, final, String, parsePattern, :, parsePatterns, ), {, String, pattern, =, parsePattern, ;, if, (]
[for, (, final, String, parsePattern, :, parsePatterns, ), {, String, pattern, =, parsePattern, ;, if, (, parsePattern, ., endsWith, (]
[parsePattern, :, parsePatterns, ), {, String, pattern, =, parsePattern, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {]
[parsePatterns, ), {, String, pattern, =, parsePattern, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, pattern, =]
[parsePatterns, ), {, String, pattern, =, parsePattern, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, pattern, =]
[pattern, =, parsePattern, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, pattern, =, pattern, ., substring, (]
[parsePattern, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, pattern, =, pattern, ., substring, (, 0, ,]
[parsePattern, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, pattern, =, pattern, ., substring, (, 0, ,]
[parsePattern, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, pattern, =, pattern, ., substring, (, 0, ,]
[endsWith, (, "ZZ", ), ), {, pattern, =, pattern, ., substring, (, 0, ,, pattern, ., length, (, ), -]
[), {, pattern, =, pattern, ., substring, (, 0, ,, pattern, ., length, (, ), -, 1, ), ;, }]
[), {, pattern, =, pattern, ., substring, (, 0, ,, pattern, ., length, (, ), -, 1, ), ;, }]
[pattern, ., substring, (, 0, ,, pattern, ., length, (, ), -, 1, ), ;, }, parser, ., applyPattern, (]
[(, 0, ,, pattern, ., length, (, ), -, 1, ), ;, }, parser, ., applyPattern, (, pattern, ), ;]
[(, 0, ,, pattern, ., length, (, ), -, 1, ), ;, }, parser, ., applyPattern, (, pattern, ), ;]
[., length, (, ), -, 1, ), ;, }, parser, ., applyPattern, (, pattern, ), ;, pos, ., setIndex, (]
[), ;, }, parser, ., applyPattern, (, pattern, ), ;, pos, ., setIndex, (, 0, ), ;, String, str2, =]
[., applyPattern, (, pattern, ), ;, pos, ., setIndex, (, 0, ), ;, String, str2, =, str, ;, if, (]
[., applyPattern, (, pattern, ), ;, pos, ., setIndex, (, 0, ), ;, String, str2, =, str, ;, if, (]
[), ;, pos, ., setIndex, (, 0, ), ;, String, str2, =, str, ;, if, (, parsePattern, ., endsWith, (]
[setIndex, (, 0, ), ;, String, str2, =, str, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {]
[0, ), ;, String, str2, =, str, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, str2, =]
[0, ), ;, String, str2, =, str, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, str2, =]
[str2, =, str, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, str2, =, str, ., replaceAll, (]
[str, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, str2, =, str, ., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,]
["ZZ", ), ), {, str2, =, str, ., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,, "$1$2", ), ;, }, final, Date, date, =]
["ZZ", ), ), {, str2, =, str, ., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,, "$1$2", ), ;, }, final, Date, date, =]
[str2, =, str, ., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,, "$1$2", ), ;, }, final, Date, date, =, parser, ., parse, (]
[str, ., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,, "$1$2", ), ;, }, final, Date, date, =, parser, ., parse, (, str2, ,]
[,, "$1$2", ), ;, }, final, Date, date, =, parser, ., parse, (, str2, ,, pos, ), ;, if, (]
[,, "$1$2", ), ;, }, final, Date, date, =, parser, ., parse, (, str2, ,, pos, ), ;, if, (]
[,, "$1$2", ), ;, }, final, Date, date, =, parser, ., parse, (, str2, ,, pos, ), ;, if, (]
[), ;, }, final, Date, date, =, parser, ., parse, (, str2, ,, pos, ), ;, if, (, date, !=]
[}, final, Date, date, =, parser, ., parse, (, str2, ,, pos, ), ;, if, (, date, !=, null, &&]
[}, final, Date, date, =, parser, ., parse, (, str2, ,, pos, ), ;, if, (, date, !=, null, &&]
[}, final, Date, date, =, parser, ., parse, (, str2, ,, pos, ), ;, if, (, date, !=, null, &&]
[., parse, (, str2, ,, pos, ), ;, if, (, date, !=, null, &&, pos, ., getIndex, (, ), ==]
[., parse, (, str2, ,, pos, ), ;, if, (, date, !=, null, &&, pos, ., getIndex, (, ), ==]
[if, (, date, !=, null, &&, pos, ., getIndex, (, ), ==, str2, ., length, (, ), ), {, return]
[&&, pos, ., getIndex, (, ), ==, str2, ., length, (, ), ), {, return, date, ;, }, }, throw]
[getIndex, (, ), ==, str2, ., length, (, ), ), {, return, date, ;, }, }, throw, new, ParseException, (]
[getIndex, (, ), ==, str2, ., length, (, ), ), {, return, date, ;, }, }, throw, new, ParseException, (]
[), ==, str2, ., length, (, ), ), {, return, date, ;, }, }, throw, new, ParseException, (, "Unable to parse the date: ", +]
[str2, ., length, (, ), ), {, return, date, ;, }, }, throw, new, ParseException, (, "Unable to parse the date: ", +, str, ,]
[., length, (, ), ), {, return, date, ;, }, }, throw, new, ParseException, (, "Unable to parse the date: ", +, str, ,, -]
[-, 1, ), ;, }, public, static, Date, addYears, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, addYears, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[}, public, static, Date, addYears, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[}, public, static, Date, addYears, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[addYears, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,, Calendar, ., YEAR, ,]
[,, amount, ), ;, }, public, static, Date, addMonths, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, addMonths, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[}, public, static, Date, addMonths, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[}, public, static, Date, addMonths, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[addMonths, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,, Calendar, ., MONTH, ,]
[,, amount, ), ;, }, public, static, Date, addWeeks, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, addWeeks, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[}, public, static, Date, addWeeks, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[}, public, static, Date, addWeeks, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[addWeeks, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,, Calendar, ., WEEK_OF_YEAR, ,]
[,, amount, ), ;, }, public, static, Date, addDays, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, addDays, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[}, public, static, Date, addDays, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[}, public, static, Date, addDays, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[addDays, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,, Calendar, ., DAY_OF_MONTH, ,]
[,, amount, ), ;, }, public, static, Date, addHours, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, addHours, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[}, public, static, Date, addHours, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[}, public, static, Date, addHours, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[addHours, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,, Calendar, ., HOUR_OF_DAY, ,]
[,, amount, ), ;, }, public, static, Date, addMinutes, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, addMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[}, public, static, Date, addMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[}, public, static, Date, addMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[addMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,, Calendar, ., MINUTE, ,]
[,, amount, ), ;, }, public, static, Date, addSeconds, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, addSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[}, public, static, Date, addSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[}, public, static, Date, addSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[addSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,, Calendar, ., SECOND, ,]
[,, amount, ), ;, }, public, static, Date, addMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, addMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[}, public, static, Date, addMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[}, public, static, Date, addMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,]
[addMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date, ,, Calendar, ., MILLISECOND, ,]
[private, static, Date, add, (, final, Date, date, ,, final, int, calendarField, ,, final, int, amount, ), {, if, (]
[private, static, Date, add, (, final, Date, date, ,, final, int, calendarField, ,, final, int, amount, ), {, if, (]
[Date, add, (, final, Date, date, ,, final, int, calendarField, ,, final, int, amount, ), {, if, (, date, ==]
[Date, date, ,, final, int, calendarField, ,, final, int, amount, ), {, if, (, date, ==, null, ), {, throw]
[final, int, calendarField, ,, final, int, amount, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;]
[IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setTime, (]
[), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setTime, (, date, ), ;]
[), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setTime, (, date, ), ;]
[Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setTime, (, date, ), ;, c, ., add, (]
[=, Calendar, ., getInstance, (, ), ;, c, ., setTime, (, date, ), ;, c, ., add, (, calendarField, ,]
[(, ), ;, c, ., setTime, (, date, ), ;, c, ., add, (, calendarField, ,, amount, ), ;, return]
[(, ), ;, c, ., setTime, (, date, ), ;, c, ., add, (, calendarField, ,, amount, ), ;, return]
[getTime, (, ), ;, }, public, static, Date, setYears, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, setYears, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[}, public, static, Date, setYears, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[}, public, static, Date, setYears, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[setYears, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,, Calendar, ., YEAR, ,]
[,, amount, ), ;, }, public, static, Date, setMonths, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, setMonths, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[}, public, static, Date, setMonths, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[}, public, static, Date, setMonths, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[setMonths, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,, Calendar, ., MONTH, ,]
[,, amount, ), ;, }, public, static, Date, setDays, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, setDays, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[}, public, static, Date, setDays, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[}, public, static, Date, setDays, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[setDays, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,, Calendar, ., DAY_OF_MONTH, ,]
[,, amount, ), ;, }, public, static, Date, setHours, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, setHours, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[}, public, static, Date, setHours, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[}, public, static, Date, setHours, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[setHours, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,, Calendar, ., HOUR_OF_DAY, ,]
[,, amount, ), ;, }, public, static, Date, setMinutes, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, setMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[}, public, static, Date, setMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[}, public, static, Date, setMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[setMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,, Calendar, ., MINUTE, ,]
[,, amount, ), ;, }, public, static, Date, setSeconds, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, setSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[}, public, static, Date, setSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[}, public, static, Date, setSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[setSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,, Calendar, ., SECOND, ,]
[,, amount, ), ;, }, public, static, Date, setMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return]
[), ;, }, public, static, Date, setMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[}, public, static, Date, setMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[}, public, static, Date, setMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,]
[setMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date, ,, Calendar, ., MILLISECOND, ,]
[private, static, Date, set, (, final, Date, date, ,, final, int, calendarField, ,, final, int, amount, ), {, if, (]
[private, static, Date, set, (, final, Date, date, ,, final, int, calendarField, ,, final, int, amount, ), {, if, (]
[Date, set, (, final, Date, date, ,, final, int, calendarField, ,, final, int, amount, ), {, if, (, date, ==]
[Date, date, ,, final, int, calendarField, ,, final, int, amount, ), {, if, (, date, ==, null, ), {, throw]
[final, int, calendarField, ,, final, int, amount, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;]
[IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setLenient, (]
[), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setLenient, (, false, ), ;]
[), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setLenient, (, false, ), ;]
[Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setLenient, (, false, ), ;, c, ., setTime, (]
[Calendar, ., getInstance, (, ), ;, c, ., setLenient, (, false, ), ;, c, ., setTime, (, date, ), ;]
[Calendar, ., getInstance, (, ), ;, c, ., setLenient, (, false, ), ;, c, ., setTime, (, date, ), ;]
[), ;, c, ., setLenient, (, false, ), ;, c, ., setTime, (, date, ), ;, c, ., set, (]
[c, ., setLenient, (, false, ), ;, c, ., setTime, (, date, ), ;, c, ., set, (, calendarField, ,]
[false, ), ;, c, ., setTime, (, date, ), ;, c, ., set, (, calendarField, ,, amount, ), ;, return]
[false, ), ;, c, ., setTime, (, date, ), ;, c, ., set, (, calendarField, ,, amount, ), ;, return]
[., getTime, (, ), ;, }, public, static, Calendar, toCalendar, (, final, Date, date, ), {, final, Calendar, c, =]
[., getTime, (, ), ;, }, public, static, Calendar, toCalendar, (, final, Date, date, ), {, final, Calendar, c, =]
[public, static, Calendar, toCalendar, (, final, Date, date, ), {, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;]
[public, static, Calendar, toCalendar, (, final, Date, date, ), {, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;]
[(, final, Date, date, ), {, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setTime, (]
[), {, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setTime, (, date, ), ;, return]
[return, c, ;, }, public, static, Date, round, (, final, Date, date, ,, final, int, field, ), {, if, (]
[return, c, ;, }, public, static, Date, round, (, final, Date, date, ,, final, int, field, ), {, if, (]
[;, }, public, static, Date, round, (, final, Date, date, ,, final, int, field, ), {, if, (, date, ==]
[Date, round, (, final, Date, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw]
[final, Date, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (]
[), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;]
[}, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (]
[Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,]
[=, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,]
[(, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_ROUND, ), ;, return]
[(, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_ROUND, ), ;, return]
[(, ), ;, }, public, static, Calendar, round, (, final, Calendar, date, ,, final, int, field, ), {, if, (]
[(, ), ;, }, public, static, Calendar, round, (, final, Calendar, date, ,, final, int, field, ), {, if, (]
[;, }, public, static, Calendar, round, (, final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==]
[Calendar, round, (, final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw]
[final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, rounded, =]
[date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, rounded, =, (, Calendar, )]
[date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, rounded, =, (, Calendar, )]
[new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, rounded, =, (, Calendar, ), date, ., clone, (, ), ;]
[(, "The date must not be null", ), ;, }, final, Calendar, rounded, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (]
[), ;, }, final, Calendar, rounded, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, rounded, ,]
[}, final, Calendar, rounded, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, rounded, ,, field, ,]
[=, (, Calendar, ), date, ., clone, (, ), ;, modify, (, rounded, ,, field, ,, MODIFY_ROUND, ), ;, return]
[return, rounded, ;, }, public, static, Date, round, (, final, Object, date, ,, final, int, field, ), {, if, (]
[return, rounded, ;, }, public, static, Date, round, (, final, Object, date, ,, final, int, field, ), {, if, (]
[;, }, public, static, Date, round, (, final, Object, date, ,, final, int, field, ), {, if, (, date, ==]
[Date, round, (, final, Object, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw]
[final, Object, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (]
[field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, round, (]
[new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, round, (, (, Date, )]
[(, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, round, (, (, Date, ), date, ,]
[date, instanceof, Date, ), {, return, round, (, (, Date, ), date, ,, field, ), ;, }, else, if, (]
[date, instanceof, Date, ), {, return, round, (, (, Date, ), date, ,, field, ), ;, }, else, if, (]
[round, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return]
[round, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return]
[(, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, round, (]
[date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, round, (, (, Calendar, )]
[field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, round, (, (, Calendar, ), date, ,]
[{, return, round, (, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw]
[(, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (]
[(, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (]
[Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not round ", +]
[), ;, }, }, public, static, Date, truncate, (, final, Date, date, ,, final, int, field, ), {, if, (]
[), ;, }, }, public, static, Date, truncate, (, final, Date, date, ,, final, int, field, ), {, if, (]
[}, }, public, static, Date, truncate, (, final, Date, date, ,, final, int, field, ), {, if, (, date, ==]
[Date, truncate, (, final, Date, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw]
[final, Date, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (]
[), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;]
[}, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (]
[Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,]
[=, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,]
[(, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_TRUNCATE, ), ;, return]
[(, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_TRUNCATE, ), ;, return]
[(, ), ;, }, public, static, Calendar, truncate, (, final, Calendar, date, ,, final, int, field, ), {, if, (]
[(, ), ;, }, public, static, Calendar, truncate, (, final, Calendar, date, ,, final, int, field, ), {, if, (]
[;, }, public, static, Calendar, truncate, (, final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==]
[Calendar, truncate, (, final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw]
[final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, truncated, =]
[date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, truncated, =, (, Calendar, )]
[date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, truncated, =, (, Calendar, )]
[new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, truncated, =, (, Calendar, ), date, ., clone, (, ), ;]
[(, "The date must not be null", ), ;, }, final, Calendar, truncated, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (]
[), ;, }, final, Calendar, truncated, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, truncated, ,]
[}, final, Calendar, truncated, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, truncated, ,, field, ,]
[=, (, Calendar, ), date, ., clone, (, ), ;, modify, (, truncated, ,, field, ,, MODIFY_TRUNCATE, ), ;, return]
[return, truncated, ;, }, public, static, Date, truncate, (, final, Object, date, ,, final, int, field, ), {, if, (]
[return, truncated, ;, }, public, static, Date, truncate, (, final, Object, date, ,, final, int, field, ), {, if, (]
[;, }, public, static, Date, truncate, (, final, Object, date, ,, final, int, field, ), {, if, (, date, ==]
[Date, truncate, (, final, Object, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw]
[final, Object, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (]
[field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, truncate, (]
[new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, truncate, (, (, Date, )]
[(, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, truncate, (, (, Date, ), date, ,]
[date, instanceof, Date, ), {, return, truncate, (, (, Date, ), date, ,, field, ), ;, }, else, if, (]
[date, instanceof, Date, ), {, return, truncate, (, (, Date, ), date, ,, field, ), ;, }, else, if, (]
[truncate, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return]
[truncate, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return]
[(, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, truncate, (]
[date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, truncate, (, (, Calendar, )]
[field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, truncate, (, (, Calendar, ), date, ,]
[{, return, truncate, (, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw]
[(, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (]
[(, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (]
[Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not truncate ", +]
[), ;, }, }, public, static, Date, ceiling, (, final, Date, date, ,, final, int, field, ), {, if, (]
[), ;, }, }, public, static, Date, ceiling, (, final, Date, date, ,, final, int, field, ), {, if, (]
[}, }, public, static, Date, ceiling, (, final, Date, date, ,, final, int, field, ), {, if, (, date, ==]
[Date, ceiling, (, final, Date, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw]
[final, Date, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (]
[), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;]
[}, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (]
[Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,]
[=, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,]
[(, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_CEILING, ), ;, return]
[(, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_CEILING, ), ;, return]
[(, ), ;, }, public, static, Calendar, ceiling, (, final, Calendar, date, ,, final, int, field, ), {, if, (]
[(, ), ;, }, public, static, Calendar, ceiling, (, final, Calendar, date, ,, final, int, field, ), {, if, (]
[;, }, public, static, Calendar, ceiling, (, final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==]
[Calendar, ceiling, (, final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw]
[final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, ceiled, =]
[date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, ceiled, =, (, Calendar, )]
[date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, ceiled, =, (, Calendar, )]
[new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, ceiled, =, (, Calendar, ), date, ., clone, (, ), ;]
[(, "The date must not be null", ), ;, }, final, Calendar, ceiled, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (]
[), ;, }, final, Calendar, ceiled, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, ceiled, ,]
[}, final, Calendar, ceiled, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, ceiled, ,, field, ,]
[=, (, Calendar, ), date, ., clone, (, ), ;, modify, (, ceiled, ,, field, ,, MODIFY_CEILING, ), ;, return]
[return, ceiled, ;, }, public, static, Date, ceiling, (, final, Object, date, ,, final, int, field, ), {, if, (]
[return, ceiled, ;, }, public, static, Date, ceiling, (, final, Object, date, ,, final, int, field, ), {, if, (]
[;, }, public, static, Date, ceiling, (, final, Object, date, ,, final, int, field, ), {, if, (, date, ==]
[Date, ceiling, (, final, Object, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw]
[final, Object, date, ,, final, int, field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (]
[field, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, ceiling, (]
[new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, ceiling, (, (, Date, )]
[(, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, ceiling, (, (, Date, ), date, ,]
[date, instanceof, Date, ), {, return, ceiling, (, (, Date, ), date, ,, field, ), ;, }, else, if, (]
[date, instanceof, Date, ), {, return, ceiling, (, (, Date, ), date, ,, field, ), ;, }, else, if, (]
[ceiling, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return]
[ceiling, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return]
[(, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, ceiling, (]
[date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, ceiling, (, (, Calendar, )]
[field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, ceiling, (, (, Calendar, ), date, ,]
[{, return, ceiling, (, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw]
[(, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (]
[(, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (]
[Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not find ceiling of for type: ", +]
[Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not find ceiling of for type: ", +]
[private, static, void, modify, (, final, Calendar, val, ,, final, int, field, ,, final, int, modType, ), {, if, (]
[private, static, void, modify, (, final, Calendar, val, ,, final, int, field, ,, final, int, modType, ), {, if, (]
[private, static, void, modify, (, final, Calendar, val, ,, final, int, field, ,, final, int, modType, ), {, if, (]
[(, final, Calendar, val, ,, final, int, field, ,, final, int, modType, ), {, if, (, val, ., get, (]
[(, final, Calendar, val, ,, final, int, field, ,, final, int, modType, ), {, if, (, val, ., get, (]
[final, int, field, ,, final, int, modType, ), {, if, (, val, ., get, (, Calendar, ., YEAR, ), >]
[final, int, modType, ), {, if, (, val, ., get, (, Calendar, ., YEAR, ), >, 280000000, ), {, throw]
[), {, if, (, val, ., get, (, Calendar, ., YEAR, ), >, 280000000, ), {, throw, new, ArithmeticException, (]
[get, (, Calendar, ., YEAR, ), >, 280000000, ), {, throw, new, ArithmeticException, (, "Calendar value too large for accurate calculations", ), ;, }, if, (]
[get, (, Calendar, ., YEAR, ), >, 280000000, ), {, throw, new, ArithmeticException, (, "Calendar value too large for accurate calculations", ), ;, }, if, (]
[Calendar, ., YEAR, ), >, 280000000, ), {, throw, new, ArithmeticException, (, "Calendar value too large for accurate calculations", ), ;, }, if, (, field, ==]
[Calendar, ., YEAR, ), >, 280000000, ), {, throw, new, ArithmeticException, (, "Calendar value too large for accurate calculations", ), ;, }, if, (, field, ==]
["Calendar value too large for accurate calculations", ), ;, }, if, (, field, ==, Calendar, ., MILLISECOND, ), {, return, ;, }, final, Date, date, =]
["Calendar value too large for accurate calculations", ), ;, }, if, (, field, ==, Calendar, ., MILLISECOND, ), {, return, ;, }, final, Date, date, =]
[., MILLISECOND, ), {, return, ;, }, final, Date, date, =, val, ., getTime, (, ), ;, long, time, =]
[., MILLISECOND, ), {, return, ;, }, final, Date, date, =, val, ., getTime, (, ), ;, long, time, =]
[date, =, val, ., getTime, (, ), ;, long, time, =, date, ., getTime, (, ), ;, boolean, done, =]
[), ;, long, time, =, date, ., getTime, (, ), ;, boolean, done, =, false, ;, final, int, millisecs, =]
[), ;, long, time, =, date, ., getTime, (, ), ;, boolean, done, =, false, ;, final, int, millisecs, =]
[=, date, ., getTime, (, ), ;, boolean, done, =, false, ;, final, int, millisecs, =, val, ., get, (]
[=, date, ., getTime, (, ), ;, boolean, done, =, false, ;, final, int, millisecs, =, val, ., get, (]
[boolean, done, =, false, ;, final, int, millisecs, =, val, ., get, (, Calendar, ., MILLISECOND, ), ;, if, (]
[boolean, done, =, false, ;, final, int, millisecs, =, val, ., get, (, Calendar, ., MILLISECOND, ), ;, if, (]
[boolean, done, =, false, ;, final, int, millisecs, =, val, ., get, (, Calendar, ., MILLISECOND, ), ;, if, (]
[=, false, ;, final, int, millisecs, =, val, ., get, (, Calendar, ., MILLISECOND, ), ;, if, (, MODIFY_TRUNCATE, ==]
[;, final, int, millisecs, =, val, ., get, (, Calendar, ., MILLISECOND, ), ;, if, (, MODIFY_TRUNCATE, ==, modType, ||]
[;, final, int, millisecs, =, val, ., get, (, Calendar, ., MILLISECOND, ), ;, if, (, MODIFY_TRUNCATE, ==, modType, ||]
[int, millisecs, =, val, ., get, (, Calendar, ., MILLISECOND, ), ;, if, (, MODIFY_TRUNCATE, ==, modType, ||, millisecs, <]
[val, ., get, (, Calendar, ., MILLISECOND, ), ;, if, (, MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {]
[get, (, Calendar, ., MILLISECOND, ), ;, if, (, MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {, time, =]
[get, (, Calendar, ., MILLISECOND, ), ;, if, (, MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {, time, =]
[Calendar, ., MILLISECOND, ), ;, if, (, MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {, time, =, time, -]
[if, (, MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {, time, =, time, -, millisecs, ;, }, if, (]
[if, (, MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {, time, =, time, -, millisecs, ;, }, if, (]
[MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {, time, =, time, -, millisecs, ;, }, if, (, field, ==]
[MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {, time, =, time, -, millisecs, ;, }, if, (, field, ==]
[<, 500, ), {, time, =, time, -, millisecs, ;, }, if, (, field, ==, Calendar, ., SECOND, ), {]
[), {, time, =, time, -, millisecs, ;, }, if, (, field, ==, Calendar, ., SECOND, ), {, done, =]
[;, }, if, (, field, ==, Calendar, ., SECOND, ), {, done, =, true, ;, }, final, int, seconds, =]
[;, }, if, (, field, ==, Calendar, ., SECOND, ), {, done, =, true, ;, }, final, int, seconds, =]
[field, ==, Calendar, ., SECOND, ), {, done, =, true, ;, }, final, int, seconds, =, val, ., get, (]
[field, ==, Calendar, ., SECOND, ), {, done, =, true, ;, }, final, int, seconds, =, val, ., get, (]
[done, =, true, ;, }, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;, if, (]
[done, =, true, ;, }, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;, if, (]
[=, true, ;, }, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;, if, (, !]
[;, }, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;, if, (, !, done, &&]
[}, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;, if, (, !, done, &&, (]
[}, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;, if, (, !, done, &&, (]
[}, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;, if, (, !, done, &&, (]
[int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==]
[=, val, ., get, (, Calendar, ., SECOND, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||]
[=, val, ., get, (, Calendar, ., SECOND, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||]
[., get, (, Calendar, ., SECOND, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <]
[., SECOND, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {]
[), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {, time, =]
[), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {, time, =]
[if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {, time, =, time, -]
[(, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {, time, =, time, -, (]
[(, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {, time, =, time, -, (]
[done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {, time, =, time, -, (, seconds, *]
[||, seconds, <, 30, ), ), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (]
[||, seconds, <, 30, ), ), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (]
[<, 30, ), ), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (, field, ==]
[<, 30, ), ), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (, field, ==]
[time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (, field, ==, Calendar, ., MINUTE, ), {]
[time, -, (, seconds, *, 1000L, ), ;, }, if, (, field, ==, Calendar, ., MINUTE, ), {, done, =]
[;, }, if, (, field, ==, Calendar, ., MINUTE, ), {, done, =, true, ;, }, final, int, minutes, =]
[;, }, if, (, field, ==, Calendar, ., MINUTE, ), {, done, =, true, ;, }, final, int, minutes, =]
[field, ==, Calendar, ., MINUTE, ), {, done, =, true, ;, }, final, int, minutes, =, val, ., get, (]
[field, ==, Calendar, ., MINUTE, ), {, done, =, true, ;, }, final, int, minutes, =, val, ., get, (]
[done, =, true, ;, }, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (]
[done, =, true, ;, }, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (]
[=, true, ;, }, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (, !]
[;, }, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (, !, done, &&]
[}, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (, !, done, &&, (]
[}, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (, !, done, &&, (]
[}, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (, !, done, &&, (]
[int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==]
[=, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||]
[=, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||]
[., get, (, Calendar, ., MINUTE, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <]
[., MINUTE, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {]
[), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {, time, =]
[), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {, time, =]
[if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {, time, =, time, -]
[(, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {, time, =, time, -, (]
[(, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {, time, =, time, -, (]
[done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {, time, =, time, -, (, minutes, *]
[||, minutes, <, 30, ), ), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (]
[||, minutes, <, 30, ), ), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (]
[||, minutes, <, 30, ), ), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (]
[{, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (, date, ., getTime, (, ), !=]
[time, -, (, minutes, *, 60000L, ), ;, }, if, (, date, ., getTime, (, ), !=, time, ), {]
[time, -, (, minutes, *, 60000L, ), ;, }, if, (, date, ., getTime, (, ), !=, time, ), {]
[*, 60000L, ), ;, }, if, (, date, ., getTime, (, ), !=, time, ), {, date, ., setTime, (]
[;, }, if, (, date, ., getTime, (, ), !=, time, ), {, date, ., setTime, (, time, ), ;]
[;, }, if, (, date, ., getTime, (, ), !=, time, ), {, date, ., setTime, (, time, ), ;]
[date, ., getTime, (, ), !=, time, ), {, date, ., setTime, (, time, ), ;, val, ., setTime, (]
[), {, date, ., setTime, (, time, ), ;, val, ., setTime, (, date, ), ;, }, boolean, roundUp, =]
[., setTime, (, date, ), ;, }, boolean, roundUp, =, false, ;, for, (, final, int, [, ], aField, :]
[=, false, ;, for, (, final, int, [, ], aField, :, fields, ), {, for, (, final, int, element, :]
[final, int, [, ], aField, :, fields, ), {, for, (, final, int, element, :, aField, ), {, if, (]
[final, int, [, ], aField, :, fields, ), {, for, (, final, int, element, :, aField, ), {, if, (]
[[, ], aField, :, fields, ), {, for, (, final, int, element, :, aField, ), {, if, (, element, ==]
[), {, for, (, final, int, element, :, aField, ), {, if, (, element, ==, field, ), {, if, (]
[), {, for, (, final, int, element, :, aField, ), {, if, (, element, ==, field, ), {, if, (]
[), {, for, (, final, int, element, :, aField, ), {, if, (, element, ==, field, ), {, if, (]
[for, (, final, int, element, :, aField, ), {, if, (, element, ==, field, ), {, if, (, modType, ==]
[final, int, element, :, aField, ), {, if, (, element, ==, field, ), {, if, (, modType, ==, MODIFY_CEILING, ||]
[int, element, :, aField, ), {, if, (, element, ==, field, ), {, if, (, modType, ==, MODIFY_CEILING, ||, (]
[int, element, :, aField, ), {, if, (, element, ==, field, ), {, if, (, modType, ==, MODIFY_CEILING, ||, (]
[int, element, :, aField, ), {, if, (, element, ==, field, ), {, if, (, modType, ==, MODIFY_CEILING, ||, (]
[:, aField, ), {, if, (, element, ==, field, ), {, if, (, modType, ==, MODIFY_CEILING, ||, (, modType, ==]
[), {, if, (, element, ==, field, ), {, if, (, modType, ==, MODIFY_CEILING, ||, (, modType, ==, MODIFY_ROUND, &&]
[field, ), {, if, (, modType, ==, MODIFY_CEILING, ||, (, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (]
[field, ), {, if, (, modType, ==, MODIFY_CEILING, ||, (, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (]
[{, if, (, modType, ==, MODIFY_CEILING, ||, (, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (, field, ==]
[{, if, (, modType, ==, MODIFY_CEILING, ||, (, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (, field, ==]
[(, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (]
[(, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (]
[(, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (]
[&&, roundUp, ), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (]
[&&, roundUp, ), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (]
[if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (, Calendar, ., DATE, ), ==]
[==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (, Calendar, ., DATE, ), ==, 1, ), {]
[==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (, Calendar, ., DATE, ), ==, 1, ), {]
[), {, if, (, val, ., get, (, Calendar, ., DATE, ), ==, 1, ), {, val, ., add, (]
[), {, if, (, val, ., get, (, Calendar, ., DATE, ), ==, 1, ), {, val, ., add, (]
[val, ., get, (, Calendar, ., DATE, ), ==, 1, ), {, val, ., add, (, Calendar, ., DATE, ,]
[DATE, ), ==, 1, ), {, val, ., add, (, Calendar, ., DATE, ,, 15, ), ;, }, else, {]
[DATE, ), ==, 1, ), {, val, ., add, (, Calendar, ., DATE, ,, 15, ), ;, }, else, {]
[), {, val, ., add, (, Calendar, ., DATE, ,, 15, ), ;, }, else, {, val, ., add, (]
[), {, val, ., add, (, Calendar, ., DATE, ,, 15, ), ;, }, else, {, val, ., add, (]
[add, (, Calendar, ., DATE, ,, 15, ), ;, }, else, {, val, ., add, (, Calendar, ., DATE, ,]
[(, Calendar, ., DATE, ,, 15, ), ;, }, else, {, val, ., add, (, Calendar, ., DATE, ,, -]
[DATE, ,, 15, ), ;, }, else, {, val, ., add, (, Calendar, ., DATE, ,, -, 15, ), ;]
[DATE, ,, 15, ), ;, }, else, {, val, ., add, (, Calendar, ., DATE, ,, -, 15, ), ;]
[;, }, else, {, val, ., add, (, Calendar, ., DATE, ,, -, 15, ), ;, val, ., add, (]
[;, }, else, {, val, ., add, (, Calendar, ., DATE, ,, -, 15, ), ;, val, ., add, (]
[val, ., add, (, Calendar, ., DATE, ,, -, 15, ), ;, val, ., add, (, Calendar, ., MONTH, ,]
[-, 15, ), ;, val, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, }, }, else, if, (]
[-, 15, ), ;, val, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, }, }, else, if, (]
[), ;, val, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, }, }, else, if, (, field, ==]
[), ;, val, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, }, }, else, if, (, field, ==]
[., MONTH, ,, 1, ), ;, }, }, else, if, (, field, ==, Calendar, ., AM_PM, ), {, if, (]
[., MONTH, ,, 1, ), ;, }, }, else, if, (, field, ==, Calendar, ., AM_PM, ), {, if, (]
[., MONTH, ,, 1, ), ;, }, }, else, if, (, field, ==, Calendar, ., AM_PM, ), {, if, (]
[), ;, }, }, else, if, (, field, ==, Calendar, ., AM_PM, ), {, if, (, val, ., get, (]
[), ;, }, }, else, if, (, field, ==, Calendar, ., AM_PM, ), {, if, (, val, ., get, (]
[if, (, field, ==, Calendar, ., AM_PM, ), {, if, (, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==]
[==, Calendar, ., AM_PM, ), {, if, (, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, 0, ), {]
[==, Calendar, ., AM_PM, ), {, if, (, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, 0, ), {]
[), {, if, (, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, 0, ), {, val, ., add, (]
[), {, if, (, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, 0, ), {, val, ., add, (]
[val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, 0, ), {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,]
[HOUR_OF_DAY, ), ==, 0, ), {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else, {]
[HOUR_OF_DAY, ), ==, 0, ), {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else, {]
[), {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val, ., add, (]
[), {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val, ., add, (]
[add, (, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,]
[(, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, -]
[HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, -, 12, ), ;]
[HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, -, 12, ), ;]
[;, }, else, {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, -, 12, ), ;, val, ., add, (]
[;, }, else, {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, -, 12, ), ;, val, ., add, (]
[val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, -, 12, ), ;, val, ., add, (, Calendar, ., DATE, ,]
[,, -, 12, ), ;, val, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, }, else, {]
[,, -, 12, ), ;, val, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, }, else, {]
[;, val, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, }, else, {, val, ., add, (]
[;, val, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, }, else, {, val, ., add, (]
[., add, (, Calendar, ., DATE, ,, 1, ), ;, }, }, else, {, val, ., add, (, aField, []
[Calendar, ., DATE, ,, 1, ), ;, }, }, else, {, val, ., add, (, aField, [, 0, ], ,]
[., add, (, aField, [, 0, ], ,, 1, ), ;, }, }, return, ;, }, }, int, offset, =]
[0, ], ,, 1, ), ;, }, }, return, ;, }, }, int, offset, =, 0, ;, boolean, offsetSet, =]
[), ;, }, }, return, ;, }, }, int, offset, =, 0, ;, boolean, offsetSet, =, false, ;, switch, (]
[return, ;, }, }, int, offset, =, 0, ;, boolean, offsetSet, =, false, ;, switch, (, field, ), {, case]
[return, ;, }, }, int, offset, =, 0, ;, boolean, offsetSet, =, false, ;, switch, (, field, ), {, case]
[=, 0, ;, boolean, offsetSet, =, false, ;, switch, (, field, ), {, case, DateUtils, ., SEMI_MONTH, :, if, (]
[=, 0, ;, boolean, offsetSet, =, false, ;, switch, (, field, ), {, case, DateUtils, ., SEMI_MONTH, :, if, (]
[=, 0, ;, boolean, offsetSet, =, false, ;, switch, (, field, ), {, case, DateUtils, ., SEMI_MONTH, :, if, (]
[;, boolean, offsetSet, =, false, ;, switch, (, field, ), {, case, DateUtils, ., SEMI_MONTH, :, if, (, aField, []
[=, false, ;, switch, (, field, ), {, case, DateUtils, ., SEMI_MONTH, :, if, (, aField, [, 0, ], ==]
[=, false, ;, switch, (, field, ), {, case, DateUtils, ., SEMI_MONTH, :, if, (, aField, [, 0, ], ==]
[field, ), {, case, DateUtils, ., SEMI_MONTH, :, if, (, aField, [, 0, ], ==, Calendar, ., DATE, ), {]
[{, case, DateUtils, ., SEMI_MONTH, :, if, (, aField, [, 0, ], ==, Calendar, ., DATE, ), {, offset, =]
[{, case, DateUtils, ., SEMI_MONTH, :, if, (, aField, [, 0, ], ==, Calendar, ., DATE, ), {, offset, =]
[{, case, DateUtils, ., SEMI_MONTH, :, if, (, aField, [, 0, ], ==, Calendar, ., DATE, ), {, offset, =]
[SEMI_MONTH, :, if, (, aField, [, 0, ], ==, Calendar, ., DATE, ), {, offset, =, val, ., get, (]
[SEMI_MONTH, :, if, (, aField, [, 0, ], ==, Calendar, ., DATE, ), {, offset, =, val, ., get, (]
[[, 0, ], ==, Calendar, ., DATE, ), {, offset, =, val, ., get, (, Calendar, ., DATE, ), -]
[Calendar, ., DATE, ), {, offset, =, val, ., get, (, Calendar, ., DATE, ), -, 1, ;, if, (]
[Calendar, ., DATE, ), {, offset, =, val, ., get, (, Calendar, ., DATE, ), -, 1, ;, if, (]
[DATE, ), {, offset, =, val, ., get, (, Calendar, ., DATE, ), -, 1, ;, if, (, offset, >=]
[offset, =, val, ., get, (, Calendar, ., DATE, ), -, 1, ;, if, (, offset, >=, 15, ), {]
[val, ., get, (, Calendar, ., DATE, ), -, 1, ;, if, (, offset, >=, 15, ), {, offset, -=]
[(, Calendar, ., DATE, ), -, 1, ;, if, (, offset, >=, 15, ), {, offset, -=, 15, ;, }]
[., DATE, ), -, 1, ;, if, (, offset, >=, 15, ), {, offset, -=, 15, ;, }, roundUp, =]
[., DATE, ), -, 1, ;, if, (, offset, >=, 15, ), {, offset, -=, 15, ;, }, roundUp, =]
[), -, 1, ;, if, (, offset, >=, 15, ), {, offset, -=, 15, ;, }, roundUp, =, offset, >]
[1, ;, if, (, offset, >=, 15, ), {, offset, -=, 15, ;, }, roundUp, =, offset, >, 7, ;]
[if, (, offset, >=, 15, ), {, offset, -=, 15, ;, }, roundUp, =, offset, >, 7, ;, offsetSet, =]
[{, offset, -=, 15, ;, }, roundUp, =, offset, >, 7, ;, offsetSet, =, true, ;, }, break, ;, case]
[{, offset, -=, 15, ;, }, roundUp, =, offset, >, 7, ;, offsetSet, =, true, ;, }, break, ;, case]
[roundUp, =, offset, >, 7, ;, offsetSet, =, true, ;, }, break, ;, case, Calendar, ., AM_PM, :, if, (]
[roundUp, =, offset, >, 7, ;, offsetSet, =, true, ;, }, break, ;, case, Calendar, ., AM_PM, :, if, (]
[roundUp, =, offset, >, 7, ;, offsetSet, =, true, ;, }, break, ;, case, Calendar, ., AM_PM, :, if, (]
[offset, >, 7, ;, offsetSet, =, true, ;, }, break, ;, case, Calendar, ., AM_PM, :, if, (, aField, []
[;, offsetSet, =, true, ;, }, break, ;, case, Calendar, ., AM_PM, :, if, (, aField, [, 0, ], ==]
[;, offsetSet, =, true, ;, }, break, ;, case, Calendar, ., AM_PM, :, if, (, aField, [, 0, ], ==]
[}, break, ;, case, Calendar, ., AM_PM, :, if, (, aField, [, 0, ], ==, Calendar, ., HOUR_OF_DAY, ), {]
[;, case, Calendar, ., AM_PM, :, if, (, aField, [, 0, ], ==, Calendar, ., HOUR_OF_DAY, ), {, offset, =]
[;, case, Calendar, ., AM_PM, :, if, (, aField, [, 0, ], ==, Calendar, ., HOUR_OF_DAY, ), {, offset, =]
[AM_PM, :, if, (, aField, [, 0, ], ==, Calendar, ., HOUR_OF_DAY, ), {, offset, =, val, ., get, (]
[AM_PM, :, if, (, aField, [, 0, ], ==, Calendar, ., HOUR_OF_DAY, ), {, offset, =, val, ., get, (]
[], ==, Calendar, ., HOUR_OF_DAY, ), {, offset, =, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (]
[], ==, Calendar, ., HOUR_OF_DAY, ), {, offset, =, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (]
[Calendar, ., HOUR_OF_DAY, ), {, offset, =, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset, >=]
[), {, offset, =, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12, ), {]
[offset, =, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12, ), {, offset, -=]
[., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12, ), {, offset, -=, 12, ;, }]
[(, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12, ), {, offset, -=, 12, ;, }, roundUp, =]
[(, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12, ), {, offset, -=, 12, ;, }, roundUp, =]
[., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12, ), {, offset, -=, 12, ;, }, roundUp, =, offset, >=]
[), ;, if, (, offset, >=, 12, ), {, offset, -=, 12, ;, }, roundUp, =, offset, >=, 6, ;]
[if, (, offset, >=, 12, ), {, offset, -=, 12, ;, }, roundUp, =, offset, >=, 6, ;, offsetSet, =]
[-=, 12, ;, }, roundUp, =, offset, >=, 6, ;, offsetSet, =, true, ;, }, break, ;, }, if, (]
[12, ;, }, roundUp, =, offset, >=, 6, ;, offsetSet, =, true, ;, }, break, ;, }, if, (, !]
[6, ;, offsetSet, =, true, ;, }, break, ;, }, if, (, !, offsetSet, ), {, final, int, min, =]
[6, ;, offsetSet, =, true, ;, }, break, ;, }, if, (, !, offsetSet, ), {, final, int, min, =]
[true, ;, }, break, ;, }, if, (, !, offsetSet, ), {, final, int, min, =, val, ., getActualMinimum, (]
[true, ;, }, break, ;, }, if, (, !, offsetSet, ), {, final, int, min, =, val, ., getActualMinimum, (]
[}, break, ;, }, if, (, !, offsetSet, ), {, final, int, min, =, val, ., getActualMinimum, (, aField, []
[), {, final, int, min, =, val, ., getActualMinimum, (, aField, [, 0, ], ), ;, final, int, max, =]
[), {, final, int, min, =, val, ., getActualMinimum, (, aField, [, 0, ], ), ;, final, int, max, =]
[min, =, val, ., getActualMinimum, (, aField, [, 0, ], ), ;, final, int, max, =, val, ., getActualMaximum, (]
[min, =, val, ., getActualMinimum, (, aField, [, 0, ], ), ;, final, int, max, =, val, ., getActualMaximum, (]
[val, ., getActualMinimum, (, aField, [, 0, ], ), ;, final, int, max, =, val, ., getActualMaximum, (, aField, []
[aField, [, 0, ], ), ;, final, int, max, =, val, ., getActualMaximum, (, aField, [, 0, ], ), ;]
[0, ], ), ;, final, int, max, =, val, ., getActualMaximum, (, aField, [, 0, ], ), ;, offset, =]
[0, ], ), ;, final, int, max, =, val, ., getActualMaximum, (, aField, [, 0, ], ), ;, offset, =]
[0, ], ), ;, final, int, max, =, val, ., getActualMaximum, (, aField, [, 0, ], ), ;, offset, =]
[final, int, max, =, val, ., getActualMaximum, (, aField, [, 0, ], ), ;, offset, =, val, ., get, (]
[final, int, max, =, val, ., getActualMaximum, (, aField, [, 0, ], ), ;, offset, =, val, ., get, (]
[max, =, val, ., getActualMaximum, (, aField, [, 0, ], ), ;, offset, =, val, ., get, (, aField, []
[getActualMaximum, (, aField, [, 0, ], ), ;, offset, =, val, ., get, (, aField, [, 0, ], ), -]
[aField, [, 0, ], ), ;, offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;]
[0, ], ), ;, offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =]
[0, ], ), ;, offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =]
[), ;, offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =, offset, >]
[;, offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =, offset, >, (]
[;, offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =, offset, >, (]
[offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =, offset, >, (, (]
[offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =, offset, >, (, (]
[val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =, offset, >, (, (, max, -]
[(, aField, [, 0, ], ), -, min, ;, roundUp, =, offset, >, (, (, max, -, min, ), /]
[-, min, ;, roundUp, =, offset, >, (, (, max, -, min, ), /, 2, ), ;, }, if, (]
[-, min, ;, roundUp, =, offset, >, (, (, max, -, min, ), /, 2, ), ;, }, if, (]
[;, roundUp, =, offset, >, (, (, max, -, min, ), /, 2, ), ;, }, if, (, offset, !=]
[offset, >, (, (, max, -, min, ), /, 2, ), ;, }, if, (, offset, !=, 0, ), {]
[offset, >, (, (, max, -, min, ), /, 2, ), ;, }, if, (, offset, !=, 0, ), {]
[max, -, min, ), /, 2, ), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (]
[max, -, min, ), /, 2, ), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (]
[min, ), /, 2, ), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField, []
[2, ), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0, ], ,]
[2, ), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0, ], ,]
[2, ), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0, ], ,]
[if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0, ], ,, val, ., get, (]
[if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0, ], ,, val, ., get, (]
[offset, !=, 0, ), {, val, ., set, (, aField, [, 0, ], ,, val, ., get, (, aField, []
[{, val, ., set, (, aField, [, 0, ], ,, val, ., get, (, aField, [, 0, ], ), -]
[[, 0, ], ,, val, ., get, (, aField, [, 0, ], ), -, offset, ), ;, }, }, throw]
[,, val, ., get, (, aField, [, 0, ], ), -, offset, ), ;, }, }, throw, new, IllegalArgumentException, (]
[,, val, ., get, (, aField, [, 0, ], ), -, offset, ), ;, }, }, throw, new, IllegalArgumentException, (]
[,, val, ., get, (, aField, [, 0, ], ), -, offset, ), ;, }, }, throw, new, IllegalArgumentException, (]
[., get, (, aField, [, 0, ], ), -, offset, ), ;, }, }, throw, new, IllegalArgumentException, (, "The field ", +]
[(, aField, [, 0, ], ), -, offset, ), ;, }, }, throw, new, IllegalArgumentException, (, "The field ", +, field, +]
[}, public, static, Iterator, <, Calendar, >, iterator, (, final, Date, focus, ,, final, int, rangeStyle, ), {, if, (]
[}, public, static, Iterator, <, Calendar, >, iterator, (, final, Date, focus, ,, final, int, rangeStyle, ), {, if, (]
[static, Iterator, <, Calendar, >, iterator, (, final, Date, focus, ,, final, int, rangeStyle, ), {, if, (, focus, ==]
[>, iterator, (, final, Date, focus, ,, final, int, rangeStyle, ), {, if, (, focus, ==, null, ), {, throw]
[final, Date, focus, ,, final, int, rangeStyle, ), {, if, (, focus, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, focus, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =]
[{, if, (, focus, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (]
[;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, focus, ), ;, return]
[final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, focus, ), ;, return, iterator, (]
[gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, focus, ), ;, return, iterator, (, gval, ,]
[}, public, static, Iterator, <, Calendar, >, iterator, (, final, Calendar, focus, ,, final, int, rangeStyle, ), {, if, (]
[}, public, static, Iterator, <, Calendar, >, iterator, (, final, Calendar, focus, ,, final, int, rangeStyle, ), {, if, (]
[static, Iterator, <, Calendar, >, iterator, (, final, Calendar, focus, ,, final, int, rangeStyle, ), {, if, (, focus, ==]
[>, iterator, (, final, Calendar, focus, ,, final, int, rangeStyle, ), {, if, (, focus, ==, null, ), {, throw]
[final, Calendar, focus, ,, final, int, rangeStyle, ), {, if, (, focus, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, focus, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, Calendar, start, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, Calendar, start, =, null, ;, Calendar, end, =]
[new, IllegalArgumentException, (, "The date must not be null", ), ;, }, Calendar, start, =, null, ;, Calendar, end, =, null, ;, int, startCutoff, =]
[new, IllegalArgumentException, (, "The date must not be null", ), ;, }, Calendar, start, =, null, ;, Calendar, end, =, null, ;, int, startCutoff, =]
[Calendar, start, =, null, ;, Calendar, end, =, null, ;, int, startCutoff, =, Calendar, ., SUNDAY, ;, int, endCutoff, =]
[Calendar, start, =, null, ;, Calendar, end, =, null, ;, int, startCutoff, =, Calendar, ., SUNDAY, ;, int, endCutoff, =]
[end, =, null, ;, int, startCutoff, =, Calendar, ., SUNDAY, ;, int, endCutoff, =, Calendar, ., SATURDAY, ;, switch, (]
[int, startCutoff, =, Calendar, ., SUNDAY, ;, int, endCutoff, =, Calendar, ., SATURDAY, ;, switch, (, rangeStyle, ), {, case]
[Calendar, ., SUNDAY, ;, int, endCutoff, =, Calendar, ., SATURDAY, ;, switch, (, rangeStyle, ), {, case, RANGE_MONTH_SUNDAY, :, case]
[SUNDAY, ;, int, endCutoff, =, Calendar, ., SATURDAY, ;, switch, (, rangeStyle, ), {, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY, :]
[int, endCutoff, =, Calendar, ., SATURDAY, ;, switch, (, rangeStyle, ), {, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY, :, start, =]
[=, Calendar, ., SATURDAY, ;, switch, (, rangeStyle, ), {, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY, :, start, =, truncate, (]
[., SATURDAY, ;, switch, (, rangeStyle, ), {, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY, :, start, =, truncate, (, focus, ,]
[., SATURDAY, ;, switch, (, rangeStyle, ), {, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY, :, start, =, truncate, (, focus, ,]
[rangeStyle, ), {, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY, :, start, =, truncate, (, focus, ,, Calendar, ., MONTH, ), ;]
[{, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY, :, start, =, truncate, (, focus, ,, Calendar, ., MONTH, ), ;, end, =]
[:, case, RANGE_MONTH_MONDAY, :, start, =, truncate, (, focus, ,, Calendar, ., MONTH, ), ;, end, =, (, Calendar, )]
[:, case, RANGE_MONTH_MONDAY, :, start, =, truncate, (, focus, ,, Calendar, ., MONTH, ), ;, end, =, (, Calendar, )]
[truncate, (, focus, ,, Calendar, ., MONTH, ), ;, end, =, (, Calendar, ), start, ., clone, (, ), ;]
[truncate, (, focus, ,, Calendar, ., MONTH, ), ;, end, =, (, Calendar, ), start, ., clone, (, ), ;]
[Calendar, ., MONTH, ), ;, end, =, (, Calendar, ), start, ., clone, (, ), ;, end, ., add, (]
[Calendar, ., MONTH, ), ;, end, =, (, Calendar, ), start, ., clone, (, ), ;, end, ., add, (]
[;, end, =, (, Calendar, ), start, ., clone, (, ), ;, end, ., add, (, Calendar, ., MONTH, ,]
[(, Calendar, ), start, ., clone, (, ), ;, end, ., add, (, Calendar, ., MONTH, ,, 1, ), ;]
[(, Calendar, ), start, ., clone, (, ), ;, end, ., add, (, Calendar, ., MONTH, ,, 1, ), ;]
[., clone, (, ), ;, end, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, end, ., add, (]
[., clone, (, ), ;, end, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, end, ., add, (]
[;, end, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, end, ., add, (, Calendar, ., DATE, ,]
[end, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, end, ., add, (, Calendar, ., DATE, ,, -]
[., MONTH, ,, 1, ), ;, end, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, if, (]
[., MONTH, ,, 1, ), ;, end, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, if, (]
[,, 1, ), ;, end, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, if, (, rangeStyle, ==]
[;, end, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {]
[., add, (, Calendar, ., DATE, ,, -, 1, ), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {, startCutoff, =]
[., add, (, Calendar, ., DATE, ,, -, 1, ), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {, startCutoff, =]
[., DATE, ,, -, 1, ), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {, startCutoff, =, Calendar, ., MONDAY, ;]
[,, -, 1, ), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =]
[,, -, 1, ), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =]
[==, RANGE_MONTH_MONDAY, ), {, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, }, break, ;, case]
[{, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case]
[Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case]
[;, endCutoff, =, Calendar, ., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case]
[=, Calendar, ., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :]
[., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :, start, =]
[;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :, start, =, truncate, (]
[break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :, start, =, truncate, (, focus, ,]
[break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :, start, =, truncate, (, focus, ,]
[case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :, start, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;]
[:, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :, start, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, end, =]
[RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :, start, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, end, =, truncate, (]
[case, RANGE_WEEK_CENTER, :, start, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, end, =, truncate, (, focus, ,]
[case, RANGE_WEEK_CENTER, :, start, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, end, =, truncate, (, focus, ,]
[focus, ,, Calendar, ., DATE, ), ;, end, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, switch, (]
[DATE, ), ;, end, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, switch, (, rangeStyle, ), {, case]
[truncate, (, focus, ,, Calendar, ., DATE, ), ;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case]
[focus, ,, Calendar, ., DATE, ), ;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case, RANGE_WEEK_MONDAY, :]
[Calendar, ., DATE, ), ;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff, =]
[Calendar, ., DATE, ), ;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff, =]
[;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff, =, Calendar, ., MONDAY, ;]
[(, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =]
[(, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =]
[break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, break, ;, case]
[case, RANGE_WEEK_MONDAY, :, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :]
[:, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =]
[:, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =]
[., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, ., get, (]
[., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, ., get, (]
[Calendar, ., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), ;]
[SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =]
[SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =]
[break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -]
[startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case]
[focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :]
[get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =]
[get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =]
[get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =]
[DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (]
[DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (]
[startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -]
[1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;]
[break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;, endCutoff, =]
[break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;, endCutoff, =]
[break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;, endCutoff, =]
[:, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;, endCutoff, =, focus, ., get, (]
[:, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;, endCutoff, =, focus, ., get, (]
[get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;, endCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), +]
[=, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break, ;, default, :, throw]
[get, (, Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (]
[get, (, Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (]
[get, (, Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (]
[Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "The range style ", +]
[DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "The range style ", +, rangeStyle, +]
[;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "The range style ", +, rangeStyle, +, " is not valid.", ), ;, }, if, (]
[;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "The range style ", +, rangeStyle, +, " is not valid.", ), ;, }, if, (]
[break, ;, default, :, throw, new, IllegalArgumentException, (, "The range style ", +, rangeStyle, +, " is not valid.", ), ;, }, if, (, startCutoff, <]
[break, ;, default, :, throw, new, IllegalArgumentException, (, "The range style ", +, rangeStyle, +, " is not valid.", ), ;, }, if, (, startCutoff, <]
[new, IllegalArgumentException, (, "The range style ", +, rangeStyle, +, " is not valid.", ), ;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {]
[(, "The range style ", +, rangeStyle, +, " is not valid.", ), ;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {, startCutoff, +=]
[" is not valid.", ), ;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if, (]
[" is not valid.", ), ;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if, (]
[;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if, (, startCutoff, >]
[;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if, (, startCutoff, >]
[<, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {]
[., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {, startCutoff, -=]
[+=, 7, ;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {, startCutoff, -=, 7, ;, }, if, (]
[+=, 7, ;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {, startCutoff, -=, 7, ;, }, if, (]
[;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {, startCutoff, -=, 7, ;, }, if, (, endCutoff, <]
[;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {, startCutoff, -=, 7, ;, }, if, (, endCutoff, <]
[>, Calendar, ., SATURDAY, ), {, startCutoff, -=, 7, ;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {]
[., SATURDAY, ), {, startCutoff, -=, 7, ;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {, endCutoff, +=]
[-=, 7, ;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {, endCutoff, +=, 7, ;, }, if, (]
[-=, 7, ;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {, endCutoff, +=, 7, ;, }, if, (]
[;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {, endCutoff, +=, 7, ;, }, if, (, endCutoff, >]
[;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {, endCutoff, +=, 7, ;, }, if, (, endCutoff, >]
[<, Calendar, ., SUNDAY, ), {, endCutoff, +=, 7, ;, }, if, (, endCutoff, >, Calendar, ., SATURDAY, ), {]
[., SUNDAY, ), {, endCutoff, +=, 7, ;, }, if, (, endCutoff, >, Calendar, ., SATURDAY, ), {, endCutoff, -=]
[+=, 7, ;, }, if, (, endCutoff, >, Calendar, ., SATURDAY, ), {, endCutoff, -=, 7, ;, }, while, (]
[+=, 7, ;, }, if, (, endCutoff, >, Calendar, ., SATURDAY, ), {, endCutoff, -=, 7, ;, }, while, (]
[+=, 7, ;, }, if, (, endCutoff, >, Calendar, ., SATURDAY, ), {, endCutoff, -=, 7, ;, }, while, (]
[if, (, endCutoff, >, Calendar, ., SATURDAY, ), {, endCutoff, -=, 7, ;, }, while, (, start, ., get, (]
[if, (, endCutoff, >, Calendar, ., SATURDAY, ), {, endCutoff, -=, 7, ;, }, while, (, start, ., get, (]
[., SATURDAY, ), {, endCutoff, -=, 7, ;, }, while, (, start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=]
[{, endCutoff, -=, 7, ;, }, while, (, start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff, ), {]
[{, endCutoff, -=, 7, ;, }, while, (, start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff, ), {]
[;, }, while, (, start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff, ), {, start, ., add, (]
[;, }, while, (, start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff, ), {, start, ., add, (]
[start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff, ), {, start, ., add, (, Calendar, ., DATE, ,]
[., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff, ), {, start, ., add, (, Calendar, ., DATE, ,, -]
[), !=, startCutoff, ), {, start, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, while, (]
[), !=, startCutoff, ), {, start, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, while, (]
[), !=, startCutoff, ), {, start, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, while, (]
[{, start, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, while, (, end, ., get, (]
[{, start, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, while, (, end, ., get, (]
[Calendar, ., DATE, ,, -, 1, ), ;, }, while, (, end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=]
[,, -, 1, ), ;, }, while, (, end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff, ), {]
[,, -, 1, ), ;, }, while, (, end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff, ), {]
[;, }, while, (, end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff, ), {, end, ., add, (]
[;, }, while, (, end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff, ), {, end, ., add, (]
[end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff, ), {, end, ., add, (, Calendar, ., DATE, ,]
[., DAY_OF_WEEK, ), !=, endCutoff, ), {, end, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, return]
[!=, endCutoff, ), {, end, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, return, new, DateIterator, (]
[), {, end, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, return, new, DateIterator, (, start, ,]
[}, public, static, Iterator, <, ?, >, iterator, (, final, Object, focus, ,, final, int, rangeStyle, ), {, if, (]
[}, public, static, Iterator, <, ?, >, iterator, (, final, Object, focus, ,, final, int, rangeStyle, ), {, if, (]
[static, Iterator, <, ?, >, iterator, (, final, Object, focus, ,, final, int, rangeStyle, ), {, if, (, focus, ==]
[>, iterator, (, final, Object, focus, ,, final, int, rangeStyle, ), {, if, (, focus, ==, null, ), {, throw]
[final, Object, focus, ,, final, int, rangeStyle, ), {, if, (, focus, ==, null, ), {, throw, new, IllegalArgumentException, (]
[rangeStyle, ), {, if, (, focus, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (]
[rangeStyle, ), {, if, (, focus, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, focus, instanceof, Date, ), {, return]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, focus, instanceof, Date, ), {, return, iterator, (]
[new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, focus, instanceof, Date, ), {, return, iterator, (, (, Date, )]
[(, "The date must not be null", ), ;, }, if, (, focus, instanceof, Date, ), {, return, iterator, (, (, Date, ), focus, ,]
[focus, instanceof, Date, ), {, return, iterator, (, (, Date, ), focus, ,, rangeStyle, ), ;, }, else, if, (]
[focus, instanceof, Date, ), {, return, iterator, (, (, Date, ), focus, ,, rangeStyle, ), ;, }, else, if, (]
[iterator, (, (, Date, ), focus, ,, rangeStyle, ), ;, }, else, if, (, focus, instanceof, Calendar, ), {, return]
[(, Date, ), focus, ,, rangeStyle, ), ;, }, else, if, (, focus, instanceof, Calendar, ), {, return, iterator, (]
[focus, ,, rangeStyle, ), ;, }, else, if, (, focus, instanceof, Calendar, ), {, return, iterator, (, (, Calendar, )]
[rangeStyle, ), ;, }, else, if, (, focus, instanceof, Calendar, ), {, return, iterator, (, (, Calendar, ), focus, ,]
[focus, instanceof, Calendar, ), {, return, iterator, (, (, Calendar, ), focus, ,, rangeStyle, ), ;, }, else, {, throw]
[), {, return, iterator, (, (, Calendar, ), focus, ,, rangeStyle, ), ;, }, else, {, throw, new, ClassCastException, (]
[), {, return, iterator, (, (, Calendar, ), focus, ,, rangeStyle, ), ;, }, else, {, throw, new, ClassCastException, (]
[return, iterator, (, (, Calendar, ), focus, ,, rangeStyle, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not iterate based on ", +]
[focus, ), ;, }, }, public, static, long, getFragmentInMilliseconds, (, final, Date, date, ,, final, int, fragment, ), {, return]
[;, }, }, public, static, long, getFragmentInMilliseconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (]
[}, public, static, long, getFragmentInMilliseconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,]
[static, long, getFragmentInMilliseconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,, fragment, ,]
[static, long, getFragmentInMilliseconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,, fragment, ,]
[., MILLISECOND, ), ;, }, public, static, long, getFragmentInSeconds, (, final, Date, date, ,, final, int, fragment, ), {, return]
[), ;, }, public, static, long, getFragmentInSeconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (]
[}, public, static, long, getFragmentInSeconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,]
[static, long, getFragmentInSeconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,, fragment, ,]
[static, long, getFragmentInSeconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,, fragment, ,]
[., SECOND, ), ;, }, public, static, long, getFragmentInMinutes, (, final, Date, date, ,, final, int, fragment, ), {, return]
[), ;, }, public, static, long, getFragmentInMinutes, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (]
[}, public, static, long, getFragmentInMinutes, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,]
[static, long, getFragmentInMinutes, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,, fragment, ,]
[static, long, getFragmentInMinutes, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,, fragment, ,]
[., MINUTE, ), ;, }, public, static, long, getFragmentInHours, (, final, Date, date, ,, final, int, fragment, ), {, return]
[), ;, }, public, static, long, getFragmentInHours, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (]
[}, public, static, long, getFragmentInHours, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,]
[static, long, getFragmentInHours, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,, fragment, ,]
[static, long, getFragmentInHours, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,, fragment, ,]
[., HOUR_OF_DAY, ), ;, }, public, static, long, getFragmentInDays, (, final, Date, date, ,, final, int, fragment, ), {, return]
[), ;, }, public, static, long, getFragmentInDays, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (]
[}, public, static, long, getFragmentInDays, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,]
[static, long, getFragmentInDays, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,, fragment, ,]
[static, long, getFragmentInDays, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date, ,, fragment, ,]
[., DAY_OF_YEAR, ), ;, }, public, static, long, getFragmentInMilliseconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return]
[), ;, }, public, static, long, getFragmentInMilliseconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (]
[}, public, static, long, getFragmentInMilliseconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,]
[static, long, getFragmentInMilliseconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,, fragment, ,]
[static, long, getFragmentInMilliseconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,, fragment, ,]
[., MILLISECOND, ), ;, }, public, static, long, getFragmentInSeconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return]
[), ;, }, public, static, long, getFragmentInSeconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (]
[}, public, static, long, getFragmentInSeconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,]
[static, long, getFragmentInSeconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,, fragment, ,]
[static, long, getFragmentInSeconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,, fragment, ,]
[., SECOND, ), ;, }, public, static, long, getFragmentInMinutes, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return]
[), ;, }, public, static, long, getFragmentInMinutes, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (]
[}, public, static, long, getFragmentInMinutes, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,]
[static, long, getFragmentInMinutes, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,, fragment, ,]
[static, long, getFragmentInMinutes, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,, fragment, ,]
[., MINUTE, ), ;, }, public, static, long, getFragmentInHours, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return]
[), ;, }, public, static, long, getFragmentInHours, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (]
[}, public, static, long, getFragmentInHours, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,]
[static, long, getFragmentInHours, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,, fragment, ,]
[static, long, getFragmentInHours, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,, fragment, ,]
[., HOUR_OF_DAY, ), ;, }, public, static, long, getFragmentInDays, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return]
[), ;, }, public, static, long, getFragmentInDays, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (]
[}, public, static, long, getFragmentInDays, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,]
[static, long, getFragmentInDays, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,, fragment, ,]
[static, long, getFragmentInDays, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar, ,, fragment, ,]
[private, static, long, getFragment, (, final, Date, date, ,, final, int, fragment, ,, final, int, unit, ), {, if, (]
[private, static, long, getFragment, (, final, Date, date, ,, final, int, fragment, ,, final, int, unit, ), {, if, (]
[long, getFragment, (, final, Date, date, ,, final, int, fragment, ,, final, int, unit, ), {, if, (, date, ==]
[Date, date, ,, final, int, fragment, ,, final, int, unit, ), {, if, (, date, ==, null, ), {, throw]
[final, int, fragment, ,, final, int, unit, ), {, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, calendar, =]
[{, if, (, date, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, calendar, =]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, calendar, =, Calendar, ., getInstance, (, ), ;]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, calendar, =, Calendar, ., getInstance, (, ), ;]
[IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, calendar, =, Calendar, ., getInstance, (, ), ;, calendar, ., setTime, (]
[;, }, final, Calendar, calendar, =, Calendar, ., getInstance, (, ), ;, calendar, ., setTime, (, date, ), ;, return]
[final, Calendar, calendar, =, Calendar, ., getInstance, (, ), ;, calendar, ., setTime, (, date, ), ;, return, getFragment, (]
[calendar, =, Calendar, ., getInstance, (, ), ;, calendar, ., setTime, (, date, ), ;, return, getFragment, (, calendar, ,]
[Calendar, ., getInstance, (, ), ;, calendar, ., setTime, (, date, ), ;, return, getFragment, (, calendar, ,, fragment, ,]
[private, static, long, getFragment, (, final, Calendar, calendar, ,, final, int, fragment, ,, final, int, unit, ), {, if, (]
[private, static, long, getFragment, (, final, Calendar, calendar, ,, final, int, fragment, ,, final, int, unit, ), {, if, (]
[long, getFragment, (, final, Calendar, calendar, ,, final, int, fragment, ,, final, int, unit, ), {, if, (, calendar, ==]
[Calendar, calendar, ,, final, int, fragment, ,, final, int, unit, ), {, if, (, calendar, ==, null, ), {, throw]
[final, int, fragment, ,, final, int, unit, ), {, if, (, calendar, ==, null, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, calendar, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, long, millisPerUnit, =]
[(, calendar, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, long, millisPerUnit, =, getMillisPerUnit, (]
[throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, long, millisPerUnit, =, getMillisPerUnit, (, unit, ), ;, long, result, =]
["The date must not be null", ), ;, }, final, long, millisPerUnit, =, getMillisPerUnit, (, unit, ), ;, long, result, =, 0, ;, switch, (]
[final, long, millisPerUnit, =, getMillisPerUnit, (, unit, ), ;, long, result, =, 0, ;, switch, (, fragment, ), {, case]
[final, long, millisPerUnit, =, getMillisPerUnit, (, unit, ), ;, long, result, =, 0, ;, switch, (, fragment, ), {, case]
[getMillisPerUnit, (, unit, ), ;, long, result, =, 0, ;, switch, (, fragment, ), {, case, Calendar, ., YEAR, :]
[unit, ), ;, long, result, =, 0, ;, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, result, +=]
[unit, ), ;, long, result, =, 0, ;, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, result, +=]
[), ;, long, result, =, 0, ;, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, result, +=, (]
[), ;, long, result, =, 0, ;, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, result, +=, (]
[), ;, long, result, =, 0, ;, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, result, +=, (]
[=, 0, ;, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, result, +=, (, calendar, ., get, (]
[=, 0, ;, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, result, +=, (, calendar, ., get, (]
[fragment, ), {, case, Calendar, ., YEAR, :, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_YEAR, ), *]
[case, Calendar, ., YEAR, :, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /]
[result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case]
[result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case]
[., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :]
[(, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=]
[(, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=]
[Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=, (]
[Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=, (]
[Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=, (]
[*, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=, (, calendar, ., get, (]
[*, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=, (, calendar, ., get, (]
[;, break, ;, case, Calendar, ., MONTH, :, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_MONTH, ), *]
[case, Calendar, ., MONTH, :, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_MONTH, ), *, MILLIS_PER_DAY, ), /]
[(, calendar, ., get, (, Calendar, ., DAY_OF_MONTH, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, }, switch, (]
[(, Calendar, ., DAY_OF_MONTH, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, }, switch, (, fragment, ), {, case]
[(, Calendar, ., DAY_OF_MONTH, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, }, switch, (, fragment, ), {, case]
[*, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, }, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, case]
[*, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, }, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, case]
[;, break, ;, }, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, case, Calendar, ., MONTH, :, case]
[;, break, ;, }, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, case, Calendar, ., MONTH, :, case]
[(, fragment, ), {, case, Calendar, ., YEAR, :, case, Calendar, ., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case]
[(, fragment, ), {, case, Calendar, ., YEAR, :, case, Calendar, ., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case]
[case, Calendar, ., YEAR, :, case, Calendar, ., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :]
[., YEAR, :, case, Calendar, ., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=]
[., YEAR, :, case, Calendar, ., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=]
[YEAR, :, case, Calendar, ., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=, (]
[YEAR, :, case, Calendar, ., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=, (]
[YEAR, :, case, Calendar, ., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=, (]
[., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=, (, calendar, ., get, (]
[., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=, (, calendar, ., get, (]
[., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=, (, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *]
[case, Calendar, ., DATE, :, result, +=, (, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /]
[DATE, :, result, +=, (, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case]
[DATE, :, result, +=, (, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case]
[(, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :]
[., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=]
[., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=]
[get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (]
[get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (]
[get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (]
[HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (]
[HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (]
[/, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar, ., MINUTE, ), *]
[case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /]
[HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case]
[HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case]
[(, calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :]
[., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=]
[., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=]
[get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (]
[get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (]
[get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (]
[MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get, (]
[MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get, (]
[/, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get, (, Calendar, ., SECOND, ), *]
[case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /]
[MINUTE, :, result, +=, (, calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case]
[MINUTE, :, result, +=, (, calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case]
[(, calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :]
[., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=]
[., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=]
[get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (]
[get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (]
[get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (]
[SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get, (]
[SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get, (]
[/, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get, (, Calendar, ., MILLISECOND, ), *]
[case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get, (, Calendar, ., MILLISECOND, ), *, 1, ), /]
[result, +=, (, calendar, ., get, (, Calendar, ., MILLISECOND, ), *, 1, ), /, millisPerUnit, ;, break, ;, case]
[result, +=, (, calendar, ., get, (, Calendar, ., MILLISECOND, ), *, 1, ), /, millisPerUnit, ;, break, ;, case]
[MILLISECOND, ), *, 1, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw]
[1, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (]
[1, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (]
[1, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (]
[/, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "The fragment ", +]
[;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "The fragment ", +, fragment, +]
[., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "The fragment ", +, fragment, +, " is not supported", ), ;, }, return]
[}, public, static, boolean, truncatedEquals, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field, ), {, return]
[}, public, static, boolean, truncatedEquals, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field, ), {, return]
[static, boolean, truncatedEquals, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field, ), {, return, truncatedCompareTo, (]
[truncatedEquals, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field, ), {, return, truncatedCompareTo, (, cal1, ,]
[final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field, ), {, return, truncatedCompareTo, (, cal1, ,, cal2, ,]
[,, final, Calendar, cal2, ,, final, int, field, ), {, return, truncatedCompareTo, (, cal1, ,, cal2, ,, field, ), ==]
[}, public, static, boolean, truncatedEquals, (, final, Date, date1, ,, final, Date, date2, ,, final, int, field, ), {, return]
[}, public, static, boolean, truncatedEquals, (, final, Date, date1, ,, final, Date, date2, ,, final, int, field, ), {, return]
[static, boolean, truncatedEquals, (, final, Date, date1, ,, final, Date, date2, ,, final, int, field, ), {, return, truncatedCompareTo, (]
[truncatedEquals, (, final, Date, date1, ,, final, Date, date2, ,, final, int, field, ), {, return, truncatedCompareTo, (, date1, ,]
[final, Date, date1, ,, final, Date, date2, ,, final, int, field, ), {, return, truncatedCompareTo, (, date1, ,, date2, ,]
[,, final, Date, date2, ,, final, int, field, ), {, return, truncatedCompareTo, (, date1, ,, date2, ,, field, ), ==]
[int, truncatedCompareTo, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field, ), {, final, Calendar, truncatedCal1, =]
[(, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field, ), {, final, Calendar, truncatedCal1, =, truncate, (]
[Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field, ), {, final, Calendar, truncatedCal1, =, truncate, (, cal1, ,]
[final, int, field, ), {, final, Calendar, truncatedCal1, =, truncate, (, cal1, ,, field, ), ;, final, Calendar, truncatedCal2, =]
[field, ), {, final, Calendar, truncatedCal1, =, truncate, (, cal1, ,, field, ), ;, final, Calendar, truncatedCal2, =, truncate, (]
[{, final, Calendar, truncatedCal1, =, truncate, (, cal1, ,, field, ), ;, final, Calendar, truncatedCal2, =, truncate, (, cal2, ,]
[=, truncate, (, cal1, ,, field, ), ;, final, Calendar, truncatedCal2, =, truncate, (, cal2, ,, field, ), ;, return]
[=, truncate, (, cal1, ,, field, ), ;, final, Calendar, truncatedCal2, =, truncate, (, cal2, ,, field, ), ;, return]
[,, field, ), ;, final, Calendar, truncatedCal2, =, truncate, (, cal2, ,, field, ), ;, return, truncatedCal1, ., compareTo, (]
[int, truncatedCompareTo, (, final, Date, date1, ,, final, Date, date2, ,, final, int, field, ), {, final, Date, truncatedDate1, =]
[(, final, Date, date1, ,, final, Date, date2, ,, final, int, field, ), {, final, Date, truncatedDate1, =, truncate, (]
[Date, date1, ,, final, Date, date2, ,, final, int, field, ), {, final, Date, truncatedDate1, =, truncate, (, date1, ,]
[final, int, field, ), {, final, Date, truncatedDate1, =, truncate, (, date1, ,, field, ), ;, final, Date, truncatedDate2, =]
[field, ), {, final, Date, truncatedDate1, =, truncate, (, date1, ,, field, ), ;, final, Date, truncatedDate2, =, truncate, (]
[{, final, Date, truncatedDate1, =, truncate, (, date1, ,, field, ), ;, final, Date, truncatedDate2, =, truncate, (, date2, ,]
[=, truncate, (, date1, ,, field, ), ;, final, Date, truncatedDate2, =, truncate, (, date2, ,, field, ), ;, return]
[=, truncate, (, date1, ,, field, ), ;, final, Date, truncatedDate2, =, truncate, (, date2, ,, field, ), ;, return]
[,, field, ), ;, final, Date, truncatedDate2, =, truncate, (, date2, ,, field, ), ;, return, truncatedDate1, ., compareTo, (]
[., compareTo, (, truncatedDate2, ), ;, }, private, static, long, getMillisPerUnit, (, final, int, unit, ), {, long, result, =]
[., compareTo, (, truncatedDate2, ), ;, }, private, static, long, getMillisPerUnit, (, final, int, unit, ), {, long, result, =]
[}, private, static, long, getMillisPerUnit, (, final, int, unit, ), {, long, result, =, Long, ., MAX_VALUE, ;, switch, (]
[getMillisPerUnit, (, final, int, unit, ), {, long, result, =, Long, ., MAX_VALUE, ;, switch, (, unit, ), {, case]
[getMillisPerUnit, (, final, int, unit, ), {, long, result, =, Long, ., MAX_VALUE, ;, switch, (, unit, ), {, case]
[), {, long, result, =, Long, ., MAX_VALUE, ;, switch, (, unit, ), {, case, Calendar, ., DAY_OF_YEAR, :, case]
[), {, long, result, =, Long, ., MAX_VALUE, ;, switch, (, unit, ), {, case, Calendar, ., DAY_OF_YEAR, :, case]
[=, Long, ., MAX_VALUE, ;, switch, (, unit, ), {, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :]
[., MAX_VALUE, ;, switch, (, unit, ), {, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, =]
[unit, ), {, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, =, MILLIS_PER_DAY, ;, break, ;, case]
[unit, ), {, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, =, MILLIS_PER_DAY, ;, break, ;, case]
[Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, =, MILLIS_PER_DAY, ;, break, ;, case, Calendar, ., HOUR_OF_DAY, :]
[DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, =, MILLIS_PER_DAY, ;, break, ;, case, Calendar, ., HOUR_OF_DAY, :, result, =]
[DATE, :, result, =, MILLIS_PER_DAY, ;, break, ;, case, Calendar, ., HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR, ;, break, ;, case]
[DATE, :, result, =, MILLIS_PER_DAY, ;, break, ;, case, Calendar, ., HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR, ;, break, ;, case]
[MILLIS_PER_DAY, ;, break, ;, case, Calendar, ., HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR, ;, break, ;, case, Calendar, ., MINUTE, :]
[break, ;, case, Calendar, ., HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR, ;, break, ;, case, Calendar, ., MINUTE, :, result, =]
[HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR, ;, break, ;, case, Calendar, ., MINUTE, :, result, =, MILLIS_PER_MINUTE, ;, break, ;, case]
[HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR, ;, break, ;, case, Calendar, ., MINUTE, :, result, =, MILLIS_PER_MINUTE, ;, break, ;, case]
[MILLIS_PER_HOUR, ;, break, ;, case, Calendar, ., MINUTE, :, result, =, MILLIS_PER_MINUTE, ;, break, ;, case, Calendar, ., SECOND, :]
[break, ;, case, Calendar, ., MINUTE, :, result, =, MILLIS_PER_MINUTE, ;, break, ;, case, Calendar, ., SECOND, :, result, =]
[MINUTE, :, result, =, MILLIS_PER_MINUTE, ;, break, ;, case, Calendar, ., SECOND, :, result, =, MILLIS_PER_SECOND, ;, break, ;, case]
[MINUTE, :, result, =, MILLIS_PER_MINUTE, ;, break, ;, case, Calendar, ., SECOND, :, result, =, MILLIS_PER_SECOND, ;, break, ;, case]
[MILLIS_PER_MINUTE, ;, break, ;, case, Calendar, ., SECOND, :, result, =, MILLIS_PER_SECOND, ;, break, ;, case, Calendar, ., MILLISECOND, :]
[break, ;, case, Calendar, ., SECOND, :, result, =, MILLIS_PER_SECOND, ;, break, ;, case, Calendar, ., MILLISECOND, :, result, =]
[result, =, MILLIS_PER_SECOND, ;, break, ;, case, Calendar, ., MILLISECOND, :, result, =, 1, ;, break, ;, default, :, throw]
[;, break, ;, case, Calendar, ., MILLISECOND, :, result, =, 1, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, break, ;, case, Calendar, ., MILLISECOND, :, result, =, 1, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, break, ;, case, Calendar, ., MILLISECOND, :, result, =, 1, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, case, Calendar, ., MILLISECOND, :, result, =, 1, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "The unit ", +]
[Calendar, ., MILLISECOND, :, result, =, 1, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "The unit ", +, unit, +]
[=, 1, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "The unit ", +, unit, +, " cannot be represented is milleseconds", ), ;, }, return]
[private, final, Calendar, spot, ;, DateIterator, (, final, Calendar, startFinal, ,, final, Calendar, endFinal, ), {, super, (, ), ;]
[private, final, Calendar, spot, ;, DateIterator, (, final, Calendar, startFinal, ,, final, Calendar, endFinal, ), {, super, (, ), ;]
[;, DateIterator, (, final, Calendar, startFinal, ,, final, Calendar, endFinal, ), {, super, (, ), ;, this, ., endFinal, =]
[(, final, Calendar, startFinal, ,, final, Calendar, endFinal, ), {, super, (, ), ;, this, ., endFinal, =, endFinal, ;]
[Calendar, startFinal, ,, final, Calendar, endFinal, ), {, super, (, ), ;, this, ., endFinal, =, endFinal, ;, spot, =]
[,, final, Calendar, endFinal, ), {, super, (, ), ;, this, ., endFinal, =, endFinal, ;, spot, =, startFinal, ;]
[,, final, Calendar, endFinal, ), {, super, (, ), ;, this, ., endFinal, =, endFinal, ;, spot, =, startFinal, ;]
[), {, super, (, ), ;, this, ., endFinal, =, endFinal, ;, spot, =, startFinal, ;, spot, ., add, (]
[), {, super, (, ), ;, this, ., endFinal, =, endFinal, ;, spot, =, startFinal, ;, spot, ., add, (]
[), ;, this, ., endFinal, =, endFinal, ;, spot, =, startFinal, ;, spot, ., add, (, Calendar, ., DATE, ,]
[;, this, ., endFinal, =, endFinal, ;, spot, =, startFinal, ;, spot, ., add, (, Calendar, ., DATE, ,, -]
[add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, @, Override, public, boolean, hasNext, (, ), {, return]
[add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, @, Override, public, boolean, hasNext, (, ), {, return]
[DATE, ,, -, 1, ), ;, }, @, Override, public, boolean, hasNext, (, ), {, return, spot, ., before, (]
[{, return, spot, ., before, (, endFinal, ), ;, }, @, Override, public, Calendar, next, (, ), {, if, (]
[{, return, spot, ., before, (, endFinal, ), ;, }, @, Override, public, Calendar, next, (, ), {, if, (]
[before, (, endFinal, ), ;, }, @, Override, public, Calendar, next, (, ), {, if, (, spot, ., equals, (]
[}, @, Override, public, Calendar, next, (, ), {, if, (, spot, ., equals, (, endFinal, ), ), {, throw]
[(, ), {, if, (, spot, ., equals, (, endFinal, ), ), {, throw, new, NoSuchElementException, (, ), ;, }]
[(, ), {, if, (, spot, ., equals, (, endFinal, ), ), {, throw, new, NoSuchElementException, (, ), ;, }]
[(, spot, ., equals, (, endFinal, ), ), {, throw, new, NoSuchElementException, (, ), ;, }, spot, ., add, (]
[(, spot, ., equals, (, endFinal, ), ), {, throw, new, NoSuchElementException, (, ), ;, }, spot, ., add, (]
[(, endFinal, ), ), {, throw, new, NoSuchElementException, (, ), ;, }, spot, ., add, (, Calendar, ., DATE, ,]
[{, throw, new, NoSuchElementException, (, ), ;, }, spot, ., add, (, Calendar, ., DATE, ,, 1, ), ;, return]
[NoSuchElementException, (, ), ;, }, spot, ., add, (, Calendar, ., DATE, ,, 1, ), ;, return, (, Calendar, )]
[NoSuchElementException, (, ), ;, }, spot, ., add, (, Calendar, ., DATE, ,, 1, ), ;, return, (, Calendar, )]
[return, (, Calendar, ), spot, ., clone, (, ), ;, }, @, Override, public, void, remove, (, ), {, throw]
