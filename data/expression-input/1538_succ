[;, private, static, final, String, PARAMETER_PREFIX, =, "JSCompiler_OptimizeArgumentsArray_p", ;, private, final, String, paramPredix, ;, private, int, uniqueId, =, 0, ;]
[;, private, final, String, paramPredix, ;, private, int, uniqueId, =, 0, ;, private, final, AbstractCompiler, compiler, ;, private, final, Deque]
[;, private, final, AbstractCompiler, compiler, ;, private, final, Deque, <, List, <, Node, >, >, argumentsAccessStack, =, Lists, ., newLinkedList]
[;, private, List, <, Node, >, currentArgumentsAccess, =, null, ;, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,]
[., newLinkedList, (, ), ;, private, List, <, Node, >, currentArgumentsAccess, =, null, ;, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ), {]
[;, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, PARAMETER_PREFIX, ), ;, }, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ,]
[,, PARAMETER_PREFIX, ), ;, }, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ,, String, paramPrefix, ), {, this, ., compiler, =, Preconditions, .]
[), ;, }, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ,, String, paramPrefix, ), {, this, ., compiler, =, Preconditions, ., checkNotNull, (]
[=, Preconditions, ., checkNotNull, (, compiler, ), ;, this, ., paramPredix, =, Preconditions, ., checkNotNull, (, paramPrefix, ), ;, }]
[., compiler, =, Preconditions, ., checkNotNull, (, compiler, ), ;, this, ., paramPredix, =, Preconditions, ., checkNotNull, (, paramPrefix, )]
[;, this, ., paramPredix, =, Preconditions, ., checkNotNull, (, paramPrefix, ), ;, }, @, Override, public, void, process, (, Node]
[., checkNotNull, (, compiler, ), ;, this, ., paramPredix, =, Preconditions, ., checkNotNull, (, paramPrefix, ), ;, }, @, Override]
[), ;, this, ., paramPredix, =, Preconditions, ., checkNotNull, (, paramPrefix, ), ;, }, @, Override, public, void, process, (]
[=, Preconditions, ., checkNotNull, (, paramPrefix, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[., paramPredix, =, Preconditions, ., checkNotNull, (, paramPrefix, ), ;, }, @, Override, public, void, process, (, Node, externs, ,]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[., checkNotNull, (, paramPrefix, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;, Node]
[., traverse, (, compiler, ,, Preconditions, ., checkNotNull, (, root, ), ,, this, ), ;, }, @, Override, public, void]
[,, Preconditions, ., checkNotNull, (, root, ), ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, traversal]
[,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (, traversal]
[., checkNotNull, (, root, ), ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, traversal, ), {]
[), ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (]
[), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;]
[;, Node, function, =, traversal, ., getScopeRoot, (, ), ;, if, (, !, function, ., isFunction, (, ), ), {]
[., checkNotNull, (, traversal, ), ;, Node, function, =, traversal, ., getScopeRoot, (, ), ;, if, (, !, function, .]
[), ;, Node, function, =, traversal, ., getScopeRoot, (, ), ;, if, (, !, function, ., isFunction, (, ), )]
[;, if, (, !, function, ., isFunction, (, ), ), {, return, ;, }, if, (, currentArgumentsAccess, !=, null, )]
[., getScopeRoot, (, ), ;, if, (, !, function, ., isFunction, (, ), ), {, return, ;, }, if, (]
[), {, return, ;, }, if, (, currentArgumentsAccess, !=, null, ), {, argumentsAccessStack, ., push, (, currentArgumentsAccess, ), ;, }]
[), {, return, ;, }, if, (, currentArgumentsAccess, !=, null, ), {, argumentsAccessStack, ., push, (, currentArgumentsAccess, ), ;, }]
[., isFunction, (, ), ), {, return, ;, }, if, (, currentArgumentsAccess, !=, null, ), {, argumentsAccessStack, ., push, (]
[), {, argumentsAccessStack, ., push, (, currentArgumentsAccess, ), ;, }, currentArgumentsAccess, =, Lists, ., newLinkedList, (, ), ;, }, @]
[!=, null, ), {, argumentsAccessStack, ., push, (, currentArgumentsAccess, ), ;, }, currentArgumentsAccess, =, Lists, ., newLinkedList, (, ), ;]
[), {, argumentsAccessStack, ., push, (, currentArgumentsAccess, ), ;, }, currentArgumentsAccess, =, Lists, ., newLinkedList, (, ), ;, }, @]
[;, }, currentArgumentsAccess, =, Lists, ., newLinkedList, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, traversal, )]
[., push, (, currentArgumentsAccess, ), ;, }, currentArgumentsAccess, =, Lists, ., newLinkedList, (, ), ;, }, @, Override, public, void]
[), ;, }, currentArgumentsAccess, =, Lists, ., newLinkedList, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, traversal]
[=, Lists, ., newLinkedList, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, traversal, ), {, Preconditions, .]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;, if]
[., newLinkedList, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (]
[;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, tryReplaceArguments, (, traversal, ., getScope, (, )]
[., checkNotNull, (, traversal, ), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, tryReplaceArguments, (]
[), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, tryReplaceArguments, (, traversal, ., getScope, (]
[), {, return, ;, }, if, (, tryReplaceArguments, (, traversal, ., getScope, (, ), ), ), {, traversal, ., getCompiler]
[==, null, ), {, return, ;, }, if, (, tryReplaceArguments, (, traversal, ., getScope, (, ), ), ), {, traversal]
[), {, return, ;, }, if, (, tryReplaceArguments, (, traversal, ., getScope, (, ), ), ), {, traversal, ., getCompiler]
[), {, traversal, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, if, (, !, argumentsAccessStack, ., isEmpty, (]
[), ), {, traversal, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, if, (, !, argumentsAccessStack, ., isEmpty]
[., getScope, (, ), ), ), {, traversal, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, if, (]
[;, }, if, (, !, argumentsAccessStack, ., isEmpty, (, ), ), {, currentArgumentsAccess, =, argumentsAccessStack, ., pop, (, ), ;]
[., reportCodeChange, (, ), ;, }, if, (, !, argumentsAccessStack, ., isEmpty, (, ), ), {, currentArgumentsAccess, =, argumentsAccessStack, .]
[., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, if, (, !, argumentsAccessStack, ., isEmpty, (, ), ), {]
[), {, currentArgumentsAccess, =, argumentsAccessStack, ., pop, (, ), ;, }, else, {, currentArgumentsAccess, =, null, ;, }, }, @]
[), {, currentArgumentsAccess, =, argumentsAccessStack, ., pop, (, ), ;, }, else, {, currentArgumentsAccess, =, null, ;, }, }, @]
[., isEmpty, (, ), ), {, currentArgumentsAccess, =, argumentsAccessStack, ., pop, (, ), ;, }, else, {, currentArgumentsAccess, =, null]
[=, argumentsAccessStack, ., pop, (, ), ;, }, else, {, currentArgumentsAccess, =, null, ;, }, }, @, Override, public, boolean]
[;, }, else, {, currentArgumentsAccess, =, null, ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node]
[., pop, (, ), ;, }, else, {, currentArgumentsAccess, =, null, ;, }, }, @, Override, public, boolean, shouldTraverse, (]
[=, null, ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent, )]
[;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent, ), {, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, Preconditions, .]
[;, Preconditions, ., checkNotNull, (, node, ), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (]
[., checkNotNull, (, traversal, ), ;, Preconditions, ., checkNotNull, (, node, ), ;, if, (, currentArgumentsAccess, ==, null, ), {]
[), ;, Preconditions, ., checkNotNull, (, node, ), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if]
[;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, node, ., isName, (, ), &&, ARGUMENTS]
[., checkNotNull, (, node, ), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, node, .]
[), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, node, ., isName, (, ), &&]
[), {, return, ;, }, if, (, node, ., isName, (, ), &&, ARGUMENTS, ., equals, (, node, ., getString]
[==, null, ), {, return, ;, }, if, (, node, ., isName, (, ), &&, ARGUMENTS, ., equals, (, node]
[), {, return, ;, }, if, (, node, ., isName, (, ), &&, ARGUMENTS, ., equals, (, node, ., getString]
[), {, currentArgumentsAccess, ., add, (, node, ), ;, }, }, private, boolean, tryReplaceArguments, (, Scope, scope, ), {, Node]
[&&, ARGUMENTS, ., equals, (, node, ., getString, (, ), ), ), {, currentArgumentsAccess, ., add, (, node, ), ;]
[., isName, (, ), &&, ARGUMENTS, ., equals, (, node, ., getString, (, ), ), ), {, currentArgumentsAccess, ., add]
[), {, currentArgumentsAccess, ., add, (, node, ), ;, }, }, private, boolean, tryReplaceArguments, (, Scope, scope, ), {, Node]
[., equals, (, node, ., getString, (, ), ), ), {, currentArgumentsAccess, ., add, (, node, ), ;, }, }]
[), ), {, currentArgumentsAccess, ., add, (, node, ), ;, }, }, private, boolean, tryReplaceArguments, (, Scope, scope, ), {]
[., getString, (, ), ), ), {, currentArgumentsAccess, ., add, (, node, ), ;, }, }, private, boolean, tryReplaceArguments, (]
[;, }, }, private, boolean, tryReplaceArguments, (, Scope, scope, ), {, Node, parametersList, =, scope, ., getRootNode, (, ), .]
[., add, (, node, ), ;, }, }, private, boolean, tryReplaceArguments, (, Scope, scope, ), {, Node, parametersList, =, scope]
[), ;, }, }, private, boolean, tryReplaceArguments, (, Scope, scope, ), {, Node, parametersList, =, scope, ., getRootNode, (, )]
[;, Preconditions, ., checkState, (, parametersList, ., isParamList, (, ), ), ;, boolean, changed, =, false, ;, int, numNamedParameter, =]
[., getNext, (, ), ;, Preconditions, ., checkState, (, parametersList, ., isParamList, (, ), ), ;, boolean, changed, =, false]
[., getFirstChild, (, ), ., getNext, (, ), ;, Preconditions, ., checkState, (, parametersList, ., isParamList, (, ), ), ;]
[., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, Preconditions, ., checkState, (, parametersList, ., isParamList]
[;, boolean, changed, =, false, ;, int, numNamedParameter, =, parametersList, ., getChildCount, (, ), ;, int, highestIndex, =, numNamedParameter, -]
[., checkState, (, parametersList, ., isParamList, (, ), ), ;, boolean, changed, =, false, ;, int, numNamedParameter, =, parametersList, .]
[), ;, boolean, changed, =, false, ;, int, numNamedParameter, =, parametersList, ., getChildCount, (, ), ;, int, highestIndex, =, numNamedParameter]
[., isParamList, (, ), ), ;, boolean, changed, =, false, ;, int, numNamedParameter, =, parametersList, ., getChildCount, (, ), ;]
[;, int, numNamedParameter, =, parametersList, ., getChildCount, (, ), ;, int, highestIndex, =, numNamedParameter, -, 1, ;, for, (, Node]
[;, int, highestIndex, =, numNamedParameter, -, 1, ;, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, getElem, =, ref]
[., getChildCount, (, ), ;, int, highestIndex, =, numNamedParameter, -, 1, ;, for, (, Node, ref, :, currentArgumentsAccess, ), {]
[;, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, getElem, =, ref, ., getParent, (, ), ;, if, (]
[-, 1, ;, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, getElem, =, ref, ., getParent, (, ), ;]
[;, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, getElem, =, ref, ., getParent, (, ), ;, if, (]
[), {, Node, getElem, =, ref, ., getParent, (, ), ;, if, (, !, getElem, ., isGetElem, (, ), )]
[;, if, (, !, getElem, ., isGetElem, (, ), ), {, return, false, ;, }, Node, index, =, ref, .]
[., getParent, (, ), ;, if, (, !, getElem, ., isGetElem, (, ), ), {, return, false, ;, }, Node]
[), {, return, false, ;, }, Node, index, =, ref, ., getNext, (, ), ;, if, (, !, index, .]
[), {, return, false, ;, }, Node, index, =, ref, ., getNext, (, ), ;, if, (, !, index, .]
[., isGetElem, (, ), ), {, return, false, ;, }, Node, index, =, ref, ., getNext, (, ), ;, if]
[;, }, Node, index, =, ref, ., getNext, (, ), ;, if, (, !, index, ., isNumber, (, ), )]
[;, if, (, !, index, ., isNumber, (, ), ), {, return, false, ;, }, Node, getElemParent, =, getElem, .]
[., getNext, (, ), ;, if, (, !, index, ., isNumber, (, ), ), {, return, false, ;, }, Node]
[), {, return, false, ;, }, Node, getElemParent, =, getElem, ., getParent, (, ), ;, if, (, getElemParent, ., isCall]
[), {, return, false, ;, }, Node, getElemParent, =, getElem, ., getParent, (, ), ;, if, (, getElemParent, ., isCall]
[., isNumber, (, ), ), {, return, false, ;, }, Node, getElemParent, =, getElem, ., getParent, (, ), ;, if]
[;, }, Node, getElemParent, =, getElem, ., getParent, (, ), ;, if, (, getElemParent, ., isCall, (, ), &&, getElemParent]
[;, if, (, getElemParent, ., isCall, (, ), &&, getElemParent, ., getFirstChild, (, ), ==, getElem, ), {, return, false]
[., getParent, (, ), ;, if, (, getElemParent, ., isCall, (, ), &&, getElemParent, ., getFirstChild, (, ), ==, getElem]
[), {, return, false, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (]
[&&, getElemParent, ., getFirstChild, (, ), ==, getElem, ), {, return, false, ;, }, int, value, =, (, int, )]
[., isCall, (, ), &&, getElemParent, ., getFirstChild, (, ), ==, getElem, ), {, return, false, ;, }, int, value]
[), {, return, false, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (]
[==, getElem, ), {, return, false, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;]
[., getFirstChild, (, ), ==, getElem, ), {, return, false, ;, }, int, value, =, (, int, ), index, .]
[), {, return, false, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (]
[;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (, value, >, highestIndex, )]
[;, if, (, value, >, highestIndex, ), {, highestIndex, =, value, ;, }, }, int, numExtraArgs, =, highestIndex, -, numNamedParameter]
[;, if, (, value, >, highestIndex, ), {, highestIndex, =, value, ;, }, }, int, numExtraArgs, =, highestIndex, -, numNamedParameter]
[., getDouble, (, ), ;, if, (, value, >, highestIndex, ), {, highestIndex, =, value, ;, }, }, int, numExtraArgs]
[), {, highestIndex, =, value, ;, }, }, int, numExtraArgs, =, highestIndex, -, numNamedParameter, +, 1, ;, String, [, ]]
[>, highestIndex, ), {, highestIndex, =, value, ;, }, }, int, numExtraArgs, =, highestIndex, -, numNamedParameter, +, 1, ;, String]
[), {, highestIndex, =, value, ;, }, }, int, numExtraArgs, =, highestIndex, -, numNamedParameter, +, 1, ;, String, [, ]]
[=, value, ;, }, }, int, numExtraArgs, =, highestIndex, -, numNamedParameter, +, 1, ;, String, [, ], argNames, =, new]
[;, }, }, int, numExtraArgs, =, highestIndex, -, numNamedParameter, +, 1, ;, String, [, ], argNames, =, new, String, []
[;, String, [, ], argNames, =, new, String, [, numExtraArgs, ], ;, for, (, int, i, =, 0, ;, i]
[+, 1, ;, String, [, ], argNames, =, new, String, [, numExtraArgs, ], ;, for, (, int, i, =, 0]
[-, numNamedParameter, +, 1, ;, String, [, ], argNames, =, new, String, [, numExtraArgs, ], ;, for, (, int, i]
[+, 1, ;, String, [, ], argNames, =, new, String, [, numExtraArgs, ], ;, for, (, int, i, =, 0]
[;, String, [, ], argNames, =, new, String, [, numExtraArgs, ], ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, numExtraArgs, ;, i, ++, ), {, String, name, =, getNewName]
[], ;, for, (, int, i, =, 0, ;, i, <, numExtraArgs, ;, i, ++, ), {, String, name, =]
[;, i, <, numExtraArgs, ;, i, ++, ), {, String, name, =, getNewName, (, ), ;, argNames, [, i, ]]
[;, i, ++, ), {, String, name, =, getNewName, (, ), ;, argNames, [, i, ], =, name, ;, parametersList]
[<, numExtraArgs, ;, i, ++, ), {, String, name, =, getNewName, (, ), ;, argNames, [, i, ], =, name]
[;, i, ++, ), {, String, name, =, getNewName, (, ), ;, argNames, [, i, ], =, name, ;, parametersList]
[), {, String, name, =, getNewName, (, ), ;, argNames, [, i, ], =, name, ;, parametersList, ., addChildrenToBack, (]
[++, ), {, String, name, =, getNewName, (, ), ;, argNames, [, i, ], =, name, ;, parametersList, ., addChildrenToBack]
[;, argNames, [, i, ], =, name, ;, parametersList, ., addChildrenToBack, (, IR, ., name, (, name, ), ), ;]
[=, name, ;, parametersList, ., addChildrenToBack, (, IR, ., name, (, name, ), ), ;, changed, =, true, ;, }]
[[, i, ], =, name, ;, parametersList, ., addChildrenToBack, (, IR, ., name, (, name, ), ), ;, changed, =]
[], =, name, ;, parametersList, ., addChildrenToBack, (, IR, ., name, (, name, ), ), ;, changed, =, true, ;]
[;, parametersList, ., addChildrenToBack, (, IR, ., name, (, name, ), ), ;, changed, =, true, ;, }, for, (]
[;, changed, =, true, ;, }, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, index, =, ref, ., getNext]
[., addChildrenToBack, (, IR, ., name, (, name, ), ), ;, changed, =, true, ;, }, for, (, Node, ref]
[), ;, changed, =, true, ;, }, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, index, =, ref, .]
[., name, (, name, ), ), ;, changed, =, true, ;, }, for, (, Node, ref, :, currentArgumentsAccess, ), {]
[), ), ;, changed, =, true, ;, }, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, index, =, ref]
[=, true, ;, }, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, index, =, ref, ., getNext, (, )]
[;, }, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, index, =, ref, ., getNext, (, ), ;, if]
[), {, Node, index, =, ref, ., getNext, (, ), ;, if, (, !, index, ., isNumber, (, ), )]
[;, if, (, !, index, ., isNumber, (, ), ), {, continue, ;, }, int, value, =, (, int, )]
[., getNext, (, ), ;, if, (, !, index, ., isNumber, (, ), ), {, continue, ;, }, int, value]
[), {, continue, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (, value]
[), {, continue, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (, value]
[., isNumber, (, ), ), {, continue, ;, }, int, value, =, (, int, ), index, ., getDouble, (, )]
[;, if, (, value, >=, numNamedParameter, ), {, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (]
[;, if, (, value, >=, numNamedParameter, ), {, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (]
[., getDouble, (, ), ;, if, (, value, >=, numNamedParameter, ), {, ref, ., getParent, (, ), ., getParent, (]
[), {, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,]
[>=, numNamedParameter, ), {, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (]
[), {, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,]
[;, }, else, {, Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (, int, i, =, 0, ;]
[., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name, (, argNames, [, value, -, numNamedParameter, ], )]
[., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name, (, argNames, [, value]
[., getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name]
[,, IR, ., name, (, argNames, [, value, -, numNamedParameter, ], ), ), ;, }, else, {, Node, name, =]
[., getParent, (, ), ,, IR, ., name, (, argNames, [, value, -, numNamedParameter, ], ), ), ;, }, else]
[), ;, }, else, {, Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (, int, i, =, 0]
[., name, (, argNames, [, value, -, numNamedParameter, ], ), ), ;, }, else, {, Node, name, =, parametersList, .]
[), ), ;, }, else, {, Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (, int, i, =]
[[, value, -, numNamedParameter, ], ), ), ;, }, else, {, Node, name, =, parametersList, ., getFirstChild, (, ), ;]
[], ), ), ;, }, else, {, Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (, int, i]
[-, numNamedParameter, ], ), ), ;, }, else, {, Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (]
[], ), ), ;, }, else, {, Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, value, ;, i, ++, ), {, name, =, name, .]
[., getFirstChild, (, ), ;, for, (, int, i, =, 0, ;, i, <, value, ;, i, ++, ), {]
[;, i, <, value, ;, i, ++, ), {, name, =, name, ., getNext, (, ), ;, }, ref, .]
[;, i, ++, ), {, name, =, name, ., getNext, (, ), ;, }, ref, ., getParent, (, ), .]
[<, value, ;, i, ++, ), {, name, =, name, ., getNext, (, ), ;, }, ref, ., getParent, (]
[;, i, ++, ), {, name, =, name, ., getNext, (, ), ;, }, ref, ., getParent, (, ), .]
[), {, name, =, name, ., getNext, (, ), ;, }, ref, ., getParent, (, ), ., getParent, (, )]
[++, ), {, name, =, name, ., getNext, (, ), ;, }, ref, ., getParent, (, ), ., getParent, (]
[=, name, ., getNext, (, ), ;, }, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (]
[;, }, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,]
[., getNext, (, ), ;, }, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, .]
[;, }, changed, =, true, ;, }, return, changed, ;, }, private, String, getNewName, (, ), {, return, paramPredix, +]
[., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name, (, name, ., getString, (, ), ), )]
[., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name, (, name, ., getString]
[., getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name]
[,, IR, ., name, (, name, ., getString, (, ), ), ), ;, }, changed, =, true, ;, }, return]
[., getParent, (, ), ,, IR, ., name, (, name, ., getString, (, ), ), ), ;, }, changed, =]
[), ;, }, changed, =, true, ;, }, return, changed, ;, }, private, String, getNewName, (, ), {, return, paramPredix]
[., name, (, name, ., getString, (, ), ), ), ;, }, changed, =, true, ;, }, return, changed, ;]
[), ), ;, }, changed, =, true, ;, }, return, changed, ;, }, private, String, getNewName, (, ), {, return]
[., getString, (, ), ), ), ;, }, changed, =, true, ;, }, return, changed, ;, }, private, String, getNewName]
[=, true, ;, }, return, changed, ;, }, private, String, getNewName, (, ), {, return, paramPredix, +, uniqueId, ++, ;]
[;, }, return, changed, ;, }, private, String, getNewName, (, ), {, return, paramPredix, +, uniqueId, ++, ;, }, }]
[;, }, private, String, getNewName, (, ), {, return, paramPredix, +, uniqueId, ++, ;, }, }]
[;, }, }]
[+, uniqueId, ++, ;, }, }]
[;, }, }]
[++, ;, }, }]
