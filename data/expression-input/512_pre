[., util, ., Set, ;, public, class, TypeCheck, implements, NodeTraversal, ., Callback, ,, CompilerPass, {, static, final, DiagnosticType, UNEXPECTED_TOKEN, =]
[., util, ., Set, ;, public, class, TypeCheck, implements, NodeTraversal, ., Callback, ,, CompilerPass, {, static, final, DiagnosticType, UNEXPECTED_TOKEN, =]
[;, public, class, TypeCheck, implements, NodeTraversal, ., Callback, ,, CompilerPass, {, static, final, DiagnosticType, UNEXPECTED_TOKEN, =, DiagnosticType, ., error, (]
[class, TypeCheck, implements, NodeTraversal, ., Callback, ,, CompilerPass, {, static, final, DiagnosticType, UNEXPECTED_TOKEN, =, DiagnosticType, ., error, (, "JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", ,]
[{, static, final, DiagnosticType, UNEXPECTED_TOKEN, =, DiagnosticType, ., error, (, "JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", ,, "Internal Error: Don't know how to handle {0}", ), ;, static, final, DiagnosticType, BAD_DELETE, =]
[{, static, final, DiagnosticType, UNEXPECTED_TOKEN, =, DiagnosticType, ., error, (, "JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", ,, "Internal Error: Don't know how to handle {0}", ), ;, static, final, DiagnosticType, BAD_DELETE, =]
[UNEXPECTED_TOKEN, =, DiagnosticType, ., error, (, "JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", ,, "Internal Error: Don't know how to handle {0}", ), ;, static, final, DiagnosticType, BAD_DELETE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., error, (, "JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", ,, "Internal Error: Don't know how to handle {0}", ), ;, static, final, DiagnosticType, BAD_DELETE, =, DiagnosticType, ., warning, (, "JSC_BAD_DELETE_OPERAND", ,]
[static, final, DiagnosticType, BAD_DELETE, =, DiagnosticType, ., warning, (, "JSC_BAD_DELETE_OPERAND", ,, "delete operator needs a reference operand", ), ;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =]
[warning, (, "JSC_BAD_DELETE_OPERAND", ,, "delete operator needs a reference operand", ), ;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST, =]
[warning, (, "JSC_BAD_DELETE_OPERAND", ,, "delete operator needs a reference operand", ), ;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST, =]
["delete operator needs a reference operand", ), ;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST, =, DiagnosticType, ., warning, (]
[;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST", ,]
[;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST", ,]
[;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST", ,]
[static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST", ,, "condition always evaluates to {2}\n", +]
[String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST", ,, "condition always evaluates to {2}\n", +, "left : {0}\n", +]
[DETERMINISTIC_TEST, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST", ,, "condition always evaluates to {2}\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =]
[DETERMINISTIC_TEST, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST", ,, "condition always evaluates to {2}\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =]
[warning, (, "JSC_DETERMINISTIC_TEST", ,, "condition always evaluates to {2}\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (]
["JSC_DETERMINISTIC_TEST", ,, "condition always evaluates to {2}\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,]
["JSC_DETERMINISTIC_TEST", ,, "condition always evaluates to {2}\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,]
["JSC_DETERMINISTIC_TEST", ,, "condition always evaluates to {2}\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,]
["condition always evaluates to {2}\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +]
["left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n", +]
[DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =]
[DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =]
[warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (]
["JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,]
[;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum", ), ;, static, final, DiagnosticType, INEXISTENT_PROPERTY, =]
[;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum", ), ;, static, final, DiagnosticType, INEXISTENT_PROPERTY, =]
[INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum", ), ;, static, final, DiagnosticType, INEXISTENT_PROPERTY, =, DiagnosticType, ., disabled, (]
[DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum", ), ;, static, final, DiagnosticType, INEXISTENT_PROPERTY, =, DiagnosticType, ., disabled, (, "JSC_INEXISTENT_PROPERTY", ,]
[static, final, DiagnosticType, INEXISTENT_PROPERTY, =, DiagnosticType, ., disabled, (, "JSC_INEXISTENT_PROPERTY", ,, "Property {0} never defined on {1}", ), ;, protected, static, final, DiagnosticType, NOT_A_CONSTRUCTOR, =]
[static, final, DiagnosticType, INEXISTENT_PROPERTY, =, DiagnosticType, ., disabled, (, "JSC_INEXISTENT_PROPERTY", ,, "Property {0} never defined on {1}", ), ;, protected, static, final, DiagnosticType, NOT_A_CONSTRUCTOR, =]
[=, DiagnosticType, ., disabled, (, "JSC_INEXISTENT_PROPERTY", ,, "Property {0} never defined on {1}", ), ;, protected, static, final, DiagnosticType, NOT_A_CONSTRUCTOR, =, DiagnosticType, ., warning, (]
[., disabled, (, "JSC_INEXISTENT_PROPERTY", ,, "Property {0} never defined on {1}", ), ;, protected, static, final, DiagnosticType, NOT_A_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_NOT_A_CONSTRUCTOR", ,]
[protected, static, final, DiagnosticType, NOT_A_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_NOT_A_CONSTRUCTOR", ,, "cannot instantiate non-constructor", ), ;, static, final, DiagnosticType, BIT_OPERATION, =]
[protected, static, final, DiagnosticType, NOT_A_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_NOT_A_CONSTRUCTOR", ,, "cannot instantiate non-constructor", ), ;, static, final, DiagnosticType, BIT_OPERATION, =]
[NOT_A_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_NOT_A_CONSTRUCTOR", ,, "cannot instantiate non-constructor", ), ;, static, final, DiagnosticType, BIT_OPERATION, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_NOT_A_CONSTRUCTOR", ,, "cannot instantiate non-constructor", ), ;, static, final, DiagnosticType, BIT_OPERATION, =, DiagnosticType, ., warning, (, "JSC_BAD_TYPE_FOR_BIT_OPERATION", ,]
[;, static, final, DiagnosticType, BIT_OPERATION, =, DiagnosticType, ., warning, (, "JSC_BAD_TYPE_FOR_BIT_OPERATION", ,, "operator {0} cannot be applied to {1}", ), ;, static, final, DiagnosticType, NOT_CALLABLE, =]
[;, static, final, DiagnosticType, BIT_OPERATION, =, DiagnosticType, ., warning, (, "JSC_BAD_TYPE_FOR_BIT_OPERATION", ,, "operator {0} cannot be applied to {1}", ), ;, static, final, DiagnosticType, NOT_CALLABLE, =]
[BIT_OPERATION, =, DiagnosticType, ., warning, (, "JSC_BAD_TYPE_FOR_BIT_OPERATION", ,, "operator {0} cannot be applied to {1}", ), ;, static, final, DiagnosticType, NOT_CALLABLE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_BAD_TYPE_FOR_BIT_OPERATION", ,, "operator {0} cannot be applied to {1}", ), ;, static, final, DiagnosticType, NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_NOT_FUNCTION_TYPE", ,]
[;, static, final, DiagnosticType, NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_NOT_FUNCTION_TYPE", ,, "{0} expressions are not callable", ), ;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE, =]
[;, static, final, DiagnosticType, NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_NOT_FUNCTION_TYPE", ,, "{0} expressions are not callable", ), ;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE, =]
[NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_NOT_FUNCTION_TYPE", ,, "{0} expressions are not callable", ), ;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_NOT_FUNCTION_TYPE", ,, "{0} expressions are not callable", ), ;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_NOT_CALLABLE", ,]
[;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_NOT_CALLABLE", ,, "Constructor {0} should be called with the \"new\" keyword", ), ;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE, =]
[;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_NOT_CALLABLE", ,, "Constructor {0} should be called with the \"new\" keyword", ), ;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE, =]
[CONSTRUCTOR_NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_NOT_CALLABLE", ,, "Constructor {0} should be called with the \"new\" keyword", ), ;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_NOT_CALLABLE", ,, "Constructor {0} should be called with the \"new\" keyword", ), ;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_FUNCTION_MASKS_VARIABLE", ,]
[;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_FUNCTION_MASKS_VARIABLE", ,, "function {0} masks variable (IE bug)", ), ;, static, final, DiagnosticType, MULTIPLE_VAR_DEF, =]
[;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_FUNCTION_MASKS_VARIABLE", ,, "function {0} masks variable (IE bug)", ), ;, static, final, DiagnosticType, MULTIPLE_VAR_DEF, =]
[FUNCTION_MASKS_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_FUNCTION_MASKS_VARIABLE", ,, "function {0} masks variable (IE bug)", ), ;, static, final, DiagnosticType, MULTIPLE_VAR_DEF, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_FUNCTION_MASKS_VARIABLE", ,, "function {0} masks variable (IE bug)", ), ;, static, final, DiagnosticType, MULTIPLE_VAR_DEF, =, DiagnosticType, ., warning, (, "JSC_MULTIPLE_VAR_DEF", ,]
[;, static, final, DiagnosticType, MULTIPLE_VAR_DEF, =, DiagnosticType, ., warning, (, "JSC_MULTIPLE_VAR_DEF", ,, "declaration of multiple variables with shared type information", ), ;, static, final, DiagnosticType, ENUM_DUP, =]
[;, static, final, DiagnosticType, MULTIPLE_VAR_DEF, =, DiagnosticType, ., warning, (, "JSC_MULTIPLE_VAR_DEF", ,, "declaration of multiple variables with shared type information", ), ;, static, final, DiagnosticType, ENUM_DUP, =]
[MULTIPLE_VAR_DEF, =, DiagnosticType, ., warning, (, "JSC_MULTIPLE_VAR_DEF", ,, "declaration of multiple variables with shared type information", ), ;, static, final, DiagnosticType, ENUM_DUP, =, DiagnosticType, ., error, (]
[DiagnosticType, ., warning, (, "JSC_MULTIPLE_VAR_DEF", ,, "declaration of multiple variables with shared type information", ), ;, static, final, DiagnosticType, ENUM_DUP, =, DiagnosticType, ., error, (, "JSC_ENUM_DUP", ,]
[;, static, final, DiagnosticType, ENUM_DUP, =, DiagnosticType, ., error, (, "JSC_ENUM_DUP", ,, "enum element {0} already defined", ), ;, static, final, DiagnosticType, ENUM_NOT_CONSTANT, =]
[;, static, final, DiagnosticType, ENUM_DUP, =, DiagnosticType, ., error, (, "JSC_ENUM_DUP", ,, "enum element {0} already defined", ), ;, static, final, DiagnosticType, ENUM_NOT_CONSTANT, =]
[ENUM_DUP, =, DiagnosticType, ., error, (, "JSC_ENUM_DUP", ,, "enum element {0} already defined", ), ;, static, final, DiagnosticType, ENUM_NOT_CONSTANT, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., error, (, "JSC_ENUM_DUP", ,, "enum element {0} already defined", ), ;, static, final, DiagnosticType, ENUM_NOT_CONSTANT, =, DiagnosticType, ., warning, (, "JSC_ENUM_NOT_CONSTANT", ,]
[;, static, final, DiagnosticType, ENUM_NOT_CONSTANT, =, DiagnosticType, ., warning, (, "JSC_ENUM_NOT_CONSTANT", ,, "enum key {0} must be a syntactic constant", ), ;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =]
[;, static, final, DiagnosticType, ENUM_NOT_CONSTANT, =, DiagnosticType, ., warning, (, "JSC_ENUM_NOT_CONSTANT", ,, "enum key {0} must be a syntactic constant", ), ;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =]
[ENUM_NOT_CONSTANT, =, DiagnosticType, ., warning, (, "JSC_ENUM_NOT_CONSTANT", ,, "enum key {0} must be a syntactic constant", ), ;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_ENUM_NOT_CONSTANT", ,, "enum key {0} must be a syntactic constant", ), ;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,]
[DiagnosticType, ., warning, (, "JSC_ENUM_NOT_CONSTANT", ,, "enum key {0} must be a syntactic constant", ), ;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,]
[warning, (, "JSC_ENUM_NOT_CONSTANT", ,, "enum key {0} must be a syntactic constant", ), ;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,, "interface members can only be empty property declarations,", +]
[final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,, "interface members can only be empty property declarations,", +, " empty functions{0}", ), ;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =]
[final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,, "interface members can only be empty property declarations,", +, " empty functions{0}", ), ;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =]
[DiagnosticType, ., warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,, "interface members can only be empty property declarations,", +, " empty functions{0}", ), ;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =, DiagnosticType, ., warning, (]
[warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,, "interface members can only be empty property declarations,", +, " empty functions{0}", ), ;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY", ,]
[;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY", ,, "interface member functions must have an empty body", ), ;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE, =]
[;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY", ,, "interface member functions must have an empty body", ), ;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE, =]
[INTERFACE_FUNCTION_NOT_EMPTY, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY", ,, "interface member functions must have an empty body", ), ;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY", ,, "interface member functions must have an empty body", ), ;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,]
[;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,, "{1} cannot extend this type; {0}s can only extend {0}s", ), ;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =]
[;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,, "{1} cannot extend this type; {0}s can only extend {0}s", ), ;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =]
[CONFLICTING_EXTENDED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,, "{1} cannot extend this type; {0}s can only extend {0}s", ), ;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,, "{1} cannot extend this type; {0}s can only extend {0}s", ), ;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,]
[DiagnosticType, ., warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,, "{1} cannot extend this type; {0}s can only extend {0}s", ), ;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,]
[warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,, "{1} cannot extend this type; {0}s can only extend {0}s", ), ;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,, "{0} cannot implement this type; ", +]
[final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,, "{0} cannot implement this type; ", +, "an interface can only extend, but not implement interfaces", ), ;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =]
[final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,, "{0} cannot implement this type; ", +, "an interface can only extend, but not implement interfaces", ), ;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =]
[DiagnosticType, ., warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,, "{0} cannot implement this type; ", +, "an interface can only extend, but not implement interfaces", ), ;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (]
[warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,, "{0} cannot implement this type; ", +, "an interface can only extend, but not implement interfaces", ), ;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,]
[;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =]
[;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =]
[BAD_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,]
[DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,]
[warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; ", +]
[final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =]
[final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =]
[DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (]
[warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,]
[warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,]
["JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +]
[final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =]
[final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =]
[DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (]
[warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,]
[warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,]
[warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,]
[warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,]
["JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +]
["property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +]
["use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +]
[DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =]
[DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =]
["JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (]
["mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,]
[;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE, =]
[;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE, =]
[UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_OVERRIDE", ,]
[;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_OVERRIDE", ,, "property {0} is already defined by the {1} extended interface", ), ;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE, =]
[;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_OVERRIDE", ,, "property {0} is already defined by the {1} extended interface", ), ;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE, =]
[INTERFACE_METHOD_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_OVERRIDE", ,, "property {0} is already defined by the {1} extended interface", ), ;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_OVERRIDE", ,, "property {0} is already defined by the {1} extended interface", ), ;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_EXPR_TYPE", ,]
[;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_EXPR_TYPE", ,, "could not determine the type of this expression", ), ;, static, final, DiagnosticType, UNRESOLVED_TYPE, =]
[;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_EXPR_TYPE", ,, "could not determine the type of this expression", ), ;, static, final, DiagnosticType, UNRESOLVED_TYPE, =]
[UNKNOWN_EXPR_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_EXPR_TYPE", ,, "could not determine the type of this expression", ), ;, static, final, DiagnosticType, UNRESOLVED_TYPE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_UNKNOWN_EXPR_TYPE", ,, "could not determine the type of this expression", ), ;, static, final, DiagnosticType, UNRESOLVED_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNRESOLVED_TYPE", ,]
[;, static, final, DiagnosticType, UNRESOLVED_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNRESOLVED_TYPE", ,, "could not resolve the name {0} to a type", ), ;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT, =]
[;, static, final, DiagnosticType, UNRESOLVED_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNRESOLVED_TYPE", ,, "could not resolve the name {0} to a type", ), ;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT, =]
[UNRESOLVED_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNRESOLVED_TYPE", ,, "could not resolve the name {0} to a type", ), ;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_UNRESOLVED_TYPE", ,, "could not resolve the name {0} to a type", ), ;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT, =, DiagnosticType, ., warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,]
[DiagnosticType, ., warning, (, "JSC_UNRESOLVED_TYPE", ,, "could not resolve the name {0} to a type", ), ;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT, =, DiagnosticType, ., warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,]
[warning, (, "JSC_UNRESOLVED_TYPE", ,, "could not resolve the name {0} to a type", ), ;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT, =, DiagnosticType, ., warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). ", +]
[final, DiagnosticType, WRONG_ARGUMENT_COUNT, =, DiagnosticType, ., warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). ", +, "Function requires at least {2} argument(s){3}.", ), ;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =]
[final, DiagnosticType, WRONG_ARGUMENT_COUNT, =, DiagnosticType, ., warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). ", +, "Function requires at least {2} argument(s){3}.", ), ;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =]
[DiagnosticType, ., warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). ", +, "Function requires at least {2} argument(s){3}.", ), ;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (]
[warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). ", +, "Function requires at least {2} argument(s){3}.", ), ;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,]
[warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). ", +, "Function requires at least {2} argument(s){3}.", ), ;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,]
["JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). ", +, "Function requires at least {2} argument(s){3}.", ), ;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +]
[final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =]
[final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =]
[DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (]
[warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,]
[warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,]
["JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,, "Interface {0} has a property {1} with incompatible types in ", +]
[final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,, "Interface {0} has a property {1} with incompatible types in ", +, "its super interfaces {2} and {3}", ), ;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =]
[final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,, "Interface {0} has a property {1} with incompatible types in ", +, "its super interfaces {2} and {3}", ), ;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =]
[DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,, "Interface {0} has a property {1} with incompatible types in ", +, "its super interfaces {2} and {3}", ), ;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =, DiagnosticType, ., warning, (]
[warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,, "Interface {0} has a property {1} with incompatible types in ", +, "its super interfaces {2} and {3}", ), ;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPECTED_THIS_TYPE", ,]
[;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPECTED_THIS_TYPE", ,, "\"{0}\" must be called with a \"this\" type", ), ;, static, final, DiagnosticType, IN_USED_WITH_STRUCT, =]
[;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPECTED_THIS_TYPE", ,, "\"{0}\" must be called with a \"this\" type", ), ;, static, final, DiagnosticType, IN_USED_WITH_STRUCT, =]
[EXPECTED_THIS_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPECTED_THIS_TYPE", ,, "\"{0}\" must be called with a \"this\" type", ), ;, static, final, DiagnosticType, IN_USED_WITH_STRUCT, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_EXPECTED_THIS_TYPE", ,, "\"{0}\" must be called with a \"this\" type", ), ;, static, final, DiagnosticType, IN_USED_WITH_STRUCT, =, DiagnosticType, ., warning, (, "JSC_IN_USED_WITH_STRUCT", ,]
[;, static, final, DiagnosticType, IN_USED_WITH_STRUCT, =, DiagnosticType, ., warning, (, "JSC_IN_USED_WITH_STRUCT", ,, "Cannot use the IN operator with structs", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =]
[;, static, final, DiagnosticType, IN_USED_WITH_STRUCT, =, DiagnosticType, ., warning, (, "JSC_IN_USED_WITH_STRUCT", ,, "Cannot use the IN operator with structs", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =]
[IN_USED_WITH_STRUCT, =, DiagnosticType, ., warning, (, "JSC_IN_USED_WITH_STRUCT", ,, "Cannot use the IN operator with structs", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_IN_USED_WITH_STRUCT", ,, "Cannot use the IN operator with structs", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,]
[DiagnosticType, ., warning, (, "JSC_IN_USED_WITH_STRUCT", ,, "Cannot use the IN operator with structs", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,]
[warning, (, "JSC_IN_USED_WITH_STRUCT", ,, "Cannot use the IN operator with structs", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,, "Cannot add a property to a struct instance ", +]
[final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,, "Cannot add a property to a struct instance ", +, "after it is constructed.", ), ;, static, final, DiagnosticType, ILLEGAL_OBJLIT_KEY, =]
[final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,, "Cannot add a property to a struct instance ", +, "after it is constructed.", ), ;, static, final, DiagnosticType, ILLEGAL_OBJLIT_KEY, =]
[DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,, "Cannot add a property to a struct instance ", +, "after it is constructed.", ), ;, static, final, DiagnosticType, ILLEGAL_OBJLIT_KEY, =, DiagnosticType, ., warning, (]
[warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,, "Cannot add a property to a struct instance ", +, "after it is constructed.", ), ;, static, final, DiagnosticType, ILLEGAL_OBJLIT_KEY, =, DiagnosticType, ., warning, (, "ILLEGAL_OBJLIT_KEY", ,]
[;, static, final, DiagnosticType, ILLEGAL_OBJLIT_KEY, =, DiagnosticType, ., warning, (, "ILLEGAL_OBJLIT_KEY", ,, "Illegal key, the object literal is a {0}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =]
[DiagnosticType, ILLEGAL_OBJLIT_KEY, =, DiagnosticType, ., warning, (, "ILLEGAL_OBJLIT_KEY", ,, "Illegal key, the object literal is a {0}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (]
[=, DiagnosticType, ., warning, (, "ILLEGAL_OBJLIT_KEY", ,, "Illegal key, the object literal is a {0}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,]
[., warning, (, "ILLEGAL_OBJLIT_KEY", ,, "Illegal key, the object literal is a {0}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,]
[(, "ILLEGAL_OBJLIT_KEY", ,, "Illegal key, the object literal is a {0}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,]
[,, "Illegal key, the object literal is a {0}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,]
[), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,]
[static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,]
[DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,]
[=, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,]
[DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,]
[DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,]
[DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,]
[INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,]
[INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,]
[NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,]
[BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,]
[NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,]
[CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,]
[FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,]
[MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,]
[ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,]
[ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,]
[INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,]
[INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,]
[CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,]
[CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,]
[BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,]
[HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,]
[HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,]
[HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,]
[UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,]
[INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,]
[INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,]
[UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,]
[UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,]
[ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,]
[ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,]
[EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,]
[EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,]
[ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER, ,]
[ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER, ,]
[RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER, ,, TypedScopeCreator, ., IFACE_INITIALIZER, ,]
[RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER, ,, TypedScopeCreator, ., IFACE_INITIALIZER, ,]
[topScope, ;, private, MemoizedScopeCreator, scopeCreator, ;, private, final, CheckLevel, reportMissingOverride, ;, private, final, CheckLevel, reportUnknownTypes, ;, private, boolean, reportMissingProperties, =]
[private, final, CheckLevel, reportMissingOverride, ;, private, final, CheckLevel, reportUnknownTypes, ;, private, boolean, reportMissingProperties, =, true, ;, private, InferJSDocInfo, inferJSDocInfo, =]
[final, CheckLevel, reportUnknownTypes, ;, private, boolean, reportMissingProperties, =, true, ;, private, InferJSDocInfo, inferJSDocInfo, =, null, ;, private, int, typedCount, =]
[reportMissingProperties, =, true, ;, private, InferJSDocInfo, inferJSDocInfo, =, null, ;, private, int, typedCount, =, 0, ;, private, int, nullCount, =]
[inferJSDocInfo, =, null, ;, private, int, typedCount, =, 0, ;, private, int, nullCount, =, 0, ;, private, int, unknownCount, =]
[private, int, nullCount, =, 0, ;, private, int, unknownCount, =, 0, ;, private, boolean, inExterns, ;, private, int, noTypeCheckSection, =]
[,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {]
[,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {]
[JSTypeRegistry, typeRegistry, ,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, ., compiler, =]
[,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, ., compiler, =, compiler, ;]
[,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, ., compiler, =, compiler, ;]
[MemoizedScopeCreator, scopeCreator, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, ., compiler, =, compiler, ;, this, ., validator, =]
[MemoizedScopeCreator, scopeCreator, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, ., compiler, =, compiler, ;, this, ., validator, =]
[CheckLevel, reportUnknownTypes, ), {, this, ., compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;]
[CheckLevel, reportUnknownTypes, ), {, this, ., compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;]
[this, ., compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =]
[compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;]
[compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;]
[this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =]
[validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;]
[validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;]
[getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;, this, ., topScope, =]
[), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;, this, ., topScope, =, topScope, ;]
[), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;, this, ., topScope, =, topScope, ;]
[reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =]
[reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;]
[reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;]
[typeRegistry, =, typeRegistry, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =]
[typeRegistry, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;]
[typeRegistry, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;]
[topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes, =]
[topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes, =, reportUnknownTypes, ;]
[topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes, =, reportUnknownTypes, ;]
[scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes, =, reportUnknownTypes, ;, this, ., inferJSDocInfo, =]
[;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes, =, reportUnknownTypes, ;, this, ., inferJSDocInfo, =, new, InferJSDocInfo, (]
[TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, (]
[AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, (, compiler, ,]
[,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, (, compiler, ,, reverseInterpreter, ,]
[reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, (, compiler, ,, reverseInterpreter, ,, typeRegistry, ,]
[JSTypeRegistry, typeRegistry, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, (, compiler, ,, reverseInterpreter, ,, typeRegistry, ,, null, ,]
[,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, (, compiler, ,, reverseInterpreter, ,, typeRegistry, ,, null, ,, null, ,]
[reportMissingOverride, ,, CheckLevel, reportUnknownTypes, ), {, this, (, compiler, ,, reverseInterpreter, ,, typeRegistry, ,, null, ,, null, ,, reportMissingOverride, ,]
[reportMissingOverride, ,, reportUnknownTypes, ), ;, }, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ), {, this, (]
[reportUnknownTypes, ), ;, }, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ), {, this, (, compiler, ,]
[;, }, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ), {, this, (, compiler, ,, reverseInterpreter, ,]
[TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ), {, this, (, compiler, ,, reverseInterpreter, ,, typeRegistry, ,]
[AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ), {, this, (, compiler, ,, reverseInterpreter, ,, typeRegistry, ,, null, ,]
[,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ), {, this, (, compiler, ,, reverseInterpreter, ,, typeRegistry, ,, null, ,, null, ,]
[,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ), {, this, (, compiler, ,, reverseInterpreter, ,, typeRegistry, ,, null, ,, null, ,]
[JSTypeRegistry, typeRegistry, ), {, this, (, compiler, ,, reverseInterpreter, ,, typeRegistry, ,, null, ,, null, ,, CheckLevel, ., WARNING, ,]
[JSTypeRegistry, typeRegistry, ), {, this, (, compiler, ,, reverseInterpreter, ,, typeRegistry, ,, null, ,, null, ,, CheckLevel, ., WARNING, ,]
[,, null, ,, CheckLevel, ., WARNING, ,, CheckLevel, ., OFF, ), ;, }, TypeCheck, reportMissingProperties, (, boolean, report, ), {]
[,, CheckLevel, ., WARNING, ,, CheckLevel, ., OFF, ), ;, }, TypeCheck, reportMissingProperties, (, boolean, report, ), {, reportMissingProperties, =]
[WARNING, ,, CheckLevel, ., OFF, ), ;, }, TypeCheck, reportMissingProperties, (, boolean, report, ), {, reportMissingProperties, =, report, ;, return]
[=, report, ;, return, this, ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {]
[=, report, ;, return, this, ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {]
[this, ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkNotNull, (]
[@, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkNotNull, (, scopeCreator, ), ;]
[@, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkNotNull, (, scopeCreator, ), ;]
[process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkNotNull, (, scopeCreator, ), ;, Preconditions, ., checkNotNull, (]
[jsRoot, ), {, Preconditions, ., checkNotNull, (, scopeCreator, ), ;, Preconditions, ., checkNotNull, (, topScope, ), ;, Node, externsAndJs, =]
[jsRoot, ), {, Preconditions, ., checkNotNull, (, scopeCreator, ), ;, Preconditions, ., checkNotNull, (, topScope, ), ;, Node, externsAndJs, =]
[(, scopeCreator, ), ;, Preconditions, ., checkNotNull, (, topScope, ), ;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;]
[(, scopeCreator, ), ;, Preconditions, ., checkNotNull, (, topScope, ), ;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;]
[Preconditions, ., checkNotNull, (, topScope, ), ;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[Preconditions, ., checkNotNull, (, topScope, ), ;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[checkNotNull, (, topScope, ), ;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=]
[), ;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;]
[), ;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;]
[=, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (]
[=, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (]
[=, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (]
[., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==]
[(, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||]
[(, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||]
[., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (]
[), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (]
[), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (]
[Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (, externsRoot, !=]
[(, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (, externsRoot, !=, null, ), {]
[==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (, externsRoot, !=, null, ), {, check, (]
[||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (, externsRoot, !=, null, ), {, check, (, externsRoot, ,]
[(, externsRoot, ), ), ;, if, (, externsRoot, !=, null, ), {, check, (, externsRoot, ,, true, ), ;, }]
[), ), ;, if, (, externsRoot, !=, null, ), {, check, (, externsRoot, ,, true, ), ;, }, check, (]
[;, if, (, externsRoot, !=, null, ), {, check, (, externsRoot, ,, true, ), ;, }, check, (, jsRoot, ,]
[}, check, (, jsRoot, ,, false, ), ;, }, public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot, ), {]
[}, check, (, jsRoot, ,, false, ), ;, }, public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot, ), {]
[,, false, ), ;, }, public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (]
[,, false, ), ;, }, public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (]
[), ;, }, public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (, scopeCreator, ==]
[public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (, scopeCreator, ==, null, ), ;]
[public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (, scopeCreator, ==, null, ), ;]
[Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (, scopeCreator, ==, null, ), ;, Preconditions, ., checkState, (]
[Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (, scopeCreator, ==, null, ), ;, Preconditions, ., checkState, (]
[,, Node, jsRoot, ), {, Preconditions, ., checkState, (, scopeCreator, ==, null, ), ;, Preconditions, ., checkState, (, topScope, ==]
[), {, Preconditions, ., checkState, (, scopeCreator, ==, null, ), ;, Preconditions, ., checkState, (, topScope, ==, null, ), ;]
[), {, Preconditions, ., checkState, (, scopeCreator, ==, null, ), ;, Preconditions, ., checkState, (, topScope, ==, null, ), ;]
[checkState, (, scopeCreator, ==, null, ), ;, Preconditions, ., checkState, (, topScope, ==, null, ), ;, Preconditions, ., checkState, (]
[checkState, (, scopeCreator, ==, null, ), ;, Preconditions, ., checkState, (, topScope, ==, null, ), ;, Preconditions, ., checkState, (]
[checkState, (, scopeCreator, ==, null, ), ;, Preconditions, ., checkState, (, topScope, ==, null, ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, topScope, ==, null, ), ;, Preconditions, ., checkState, (, jsRoot, ., getParent, (, ), !=]
[==, null, ), ;, Preconditions, ., checkState, (, jsRoot, ., getParent, (, ), !=, null, ), ;, Node, externsAndJsRoot, =]
[==, null, ), ;, Preconditions, ., checkState, (, jsRoot, ., getParent, (, ), !=, null, ), ;, Node, externsAndJsRoot, =]
[checkState, (, jsRoot, ., getParent, (, ), !=, null, ), ;, Node, externsAndJsRoot, =, jsRoot, ., getParent, (, ), ;]
[jsRoot, ., getParent, (, ), !=, null, ), ;, Node, externsAndJsRoot, =, jsRoot, ., getParent, (, ), ;, scopeCreator, =]
[(, ), !=, null, ), ;, Node, externsAndJsRoot, =, jsRoot, ., getParent, (, ), ;, scopeCreator, =, new, MemoizedScopeCreator, (]
[null, ), ;, Node, externsAndJsRoot, =, jsRoot, ., getParent, (, ), ;, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (]
[externsAndJsRoot, =, jsRoot, ., getParent, (, ), ;, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;]
[jsRoot, ., getParent, (, ), ;, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, topScope, =]
[jsRoot, ., getParent, (, ), ;, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, topScope, =]
[), ;, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, topScope, =, scopeCreator, ., createScope, (]
[scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, topScope, =, scopeCreator, ., createScope, (, externsAndJsRoot, ,]
[TypedScopeCreator, (, compiler, ), ), ;, topScope, =, scopeCreator, ., createScope, (, externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =]
[), ), ;, topScope, =, scopeCreator, ., createScope, (, externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (]
[;, topScope, =, scopeCreator, ., createScope, (, externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,]
[=, scopeCreator, ., createScope, (, externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,, reverseInterpreter, ,]
[., createScope, (, externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,, reverseInterpreter, ,, topScope, ,]
[externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,, reverseInterpreter, ,, topScope, ,, scopeCreator, ), ;]
[externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,, reverseInterpreter, ,, topScope, ,, scopeCreator, ), ;]
[;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,, reverseInterpreter, ,, topScope, ,, scopeCreator, ), ;, inference, ., process, (]
[inference, =, new, TypeInferencePass, (, compiler, ,, reverseInterpreter, ,, topScope, ,, scopeCreator, ), ;, inference, ., process, (, externsRoot, ,]
[TypeInferencePass, (, compiler, ,, reverseInterpreter, ,, topScope, ,, scopeCreator, ), ;, inference, ., process, (, externsRoot, ,, jsRoot, ), ;]
[compiler, ,, reverseInterpreter, ,, topScope, ,, scopeCreator, ), ;, inference, ., process, (, externsRoot, ,, jsRoot, ), ;, process, (]
[reverseInterpreter, ,, topScope, ,, scopeCreator, ), ;, inference, ., process, (, externsRoot, ,, jsRoot, ), ;, process, (, externsRoot, ,]
[scopeCreator, ), ;, inference, ., process, (, externsRoot, ,, jsRoot, ), ;, process, (, externsRoot, ,, jsRoot, ), ;, return]
[externsRoot, ,, jsRoot, ), ;, return, topScope, ;, }, public, void, check, (, Node, node, ,, boolean, externs, ), {]
[externsRoot, ,, jsRoot, ), ;, return, topScope, ;, }, public, void, check, (, Node, node, ,, boolean, externs, ), {]
[;, return, topScope, ;, }, public, void, check, (, Node, node, ,, boolean, externs, ), {, Preconditions, ., checkNotNull, (]
[void, check, (, Node, node, ,, boolean, externs, ), {, Preconditions, ., checkNotNull, (, node, ), ;, NodeTraversal, t, =]
[Node, node, ,, boolean, externs, ), {, Preconditions, ., checkNotNull, (, node, ), ;, NodeTraversal, t, =, new, NodeTraversal, (]
[,, boolean, externs, ), {, Preconditions, ., checkNotNull, (, node, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,]
[externs, ), {, Preconditions, ., checkNotNull, (, node, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ,]
[Preconditions, ., checkNotNull, (, node, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ,, scopeCreator, ), ;]
[checkNotNull, (, node, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ,, scopeCreator, ), ;, inExterns, =]
[node, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ,, scopeCreator, ), ;, inExterns, =, externs, ;]
[node, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ,, scopeCreator, ), ;, inExterns, =, externs, ;]
[t, =, new, NodeTraversal, (, compiler, ,, this, ,, scopeCreator, ), ;, inExterns, =, externs, ;, t, ., traverseWithScope, (]
[new, NodeTraversal, (, compiler, ,, this, ,, scopeCreator, ), ;, inExterns, =, externs, ;, t, ., traverseWithScope, (, node, ,]
[this, ,, scopeCreator, ), ;, inExterns, =, externs, ;, t, ., traverseWithScope, (, node, ,, topScope, ), ;, if, (]
[), ;, inExterns, =, externs, ;, t, ., traverseWithScope, (, node, ,, topScope, ), ;, if, (, externs, ), {]
[), ;, inExterns, =, externs, ;, t, ., traverseWithScope, (, node, ,, topScope, ), ;, if, (, externs, ), {]
[externs, ;, t, ., traverseWithScope, (, node, ,, topScope, ), ;, if, (, externs, ), {, inferJSDocInfo, ., process, (]
[t, ., traverseWithScope, (, node, ,, topScope, ), ;, if, (, externs, ), {, inferJSDocInfo, ., process, (, node, ,]
[topScope, ), ;, if, (, externs, ), {, inferJSDocInfo, ., process, (, node, ,, null, ), ;, }, else, {]
[topScope, ), ;, if, (, externs, ), {, inferJSDocInfo, ., process, (, node, ,, null, ), ;, }, else, {]
[(, externs, ), {, inferJSDocInfo, ., process, (, node, ,, null, ), ;, }, else, {, inferJSDocInfo, ., process, (]
[), {, inferJSDocInfo, ., process, (, node, ,, null, ), ;, }, else, {, inferJSDocInfo, ., process, (, null, ,]
[null, ,, node, ), ;, }, }, private, void, checkNoTypeCheckSection, (, Node, n, ,, boolean, enterSection, ), {, switch, (]
[null, ,, node, ), ;, }, }, private, void, checkNoTypeCheckSection, (, Node, n, ,, boolean, enterSection, ), {, switch, (]
[void, checkNoTypeCheckSection, (, Node, n, ,, boolean, enterSection, ), {, switch, (, n, ., getType, (, ), ), {, case]
[void, checkNoTypeCheckSection, (, Node, n, ,, boolean, enterSection, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, boolean, enterSection, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., SCRIPT, :, case]
[,, boolean, enterSection, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., SCRIPT, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case]
[(, ), ), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., VAR, :, case]
[(, ), ), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., VAR, :, case]
[Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case]
[Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case]
[BLOCK, :, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, JSDocInfo, info, =]
[BLOCK, :, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, JSDocInfo, info, =]
[Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[FUNCTION, :, case, Token, ., ASSIGN, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[case, Token, ., ASSIGN, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[case, Token, ., ASSIGN, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., isNoTypeCheck, (, ), ), {, if, (]
[), ;, if, (, info, !=, null, &&, info, ., isNoTypeCheck, (, ), ), {, if, (, enterSection, ), {]
[), ;, if, (, info, !=, null, &&, info, ., isNoTypeCheck, (, ), ), {, if, (, enterSection, ), {]
[null, &&, info, ., isNoTypeCheck, (, ), ), {, if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {]
[null, &&, info, ., isNoTypeCheck, (, ), ), {, if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {]
[(, ), ), {, if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {, noTypeCheckSection, --, ;, }, }]
[(, ), ), {, if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {, noTypeCheckSection, --, ;, }, }]
[if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {, noTypeCheckSection, --, ;, }, }, validator, ., setShouldReport, (]
[if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {, noTypeCheckSection, --, ;, }, }, validator, ., setShouldReport, (]
[enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {, noTypeCheckSection, --, ;, }, }, validator, ., setShouldReport, (, noTypeCheckSection, ==]
[private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, if, (]
[private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, if, (]
[report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, if, (, noTypeCheckSection, ==]
[t, ,, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, if, (, noTypeCheckSection, ==, 0, ), {]
[t, ,, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, if, (, noTypeCheckSection, ==, 0, ), {]
[,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, if, (, noTypeCheckSection, ==, 0, ), {, t, ., report, (]
[diagnosticType, ,, String, ..., arguments, ), {, if, (, noTypeCheckSection, ==, 0, ), {, t, ., report, (, n, ,]
[String, ..., arguments, ), {, if, (, noTypeCheckSection, ==, 0, ), {, t, ., report, (, n, ,, diagnosticType, ,]
[), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[}, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, checkNoTypeCheckSection, (]
[@, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, checkNoTypeCheckSection, (, n, ,]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, checkNoTypeCheckSection, (, n, ,, true, ), ;, switch, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, checkNoTypeCheckSection, (, n, ,, true, ), ;, switch, (]
[parent, ), {, checkNoTypeCheckSection, (, n, ,, true, ), ;, switch, (, n, ., getType, (, ), ), {, case]
[parent, ), {, checkNoTypeCheckSection, (, n, ,, true, ), ;, switch, (, n, ., getType, (, ), ), {, case]
[), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, final, Scope, outerScope, =]
[), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, final, Scope, outerScope, =]
[{, case, Token, ., FUNCTION, :, final, Scope, outerScope, =, t, ., getScope, (, ), ;, final, String, functionPrivateName, =]
[{, case, Token, ., FUNCTION, :, final, Scope, outerScope, =, t, ., getScope, (, ), ;, final, String, functionPrivateName, =]
[{, case, Token, ., FUNCTION, :, final, Scope, outerScope, =, t, ., getScope, (, ), ;, final, String, functionPrivateName, =]
[getScope, (, ), ;, final, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[getScope, (, ), ;, final, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[getScope, (, ), ;, final, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[getScope, (, ), ;, final, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[getScope, (, ), ;, final, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[), ;, final, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, functionPrivateName, !=]
[final, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, functionPrivateName, !=, null, &&]
[final, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, functionPrivateName, !=, null, &&]
[final, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, functionPrivateName, !=, null, &&]
[getFirstChild, (, ), ., getString, (, ), ;, if, (, functionPrivateName, !=, null, &&, functionPrivateName, ., length, (, ), >]
[), ., getString, (, ), ;, if, (, functionPrivateName, !=, null, &&, functionPrivateName, ., length, (, ), >, 0, &&]
[), ., getString, (, ), ;, if, (, functionPrivateName, !=, null, &&, functionPrivateName, ., length, (, ), >, 0, &&]
[), ;, if, (, functionPrivateName, !=, null, &&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (]
[if, (, functionPrivateName, !=, null, &&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,]
[!=, null, &&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&]
[null, &&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !]
[&&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (]
[&&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (]
[&&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (]
[&&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (]
[(, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (, outerScope, ., getVar, (]
[false, ), &&, !, (, outerScope, ., getVar, (, functionPrivateName, ), ., getType, (, ), instanceof, FunctionType, ), ), {]
[&&, !, (, outerScope, ., getVar, (, functionPrivateName, ), ., getType, (, ), instanceof, FunctionType, ), ), {, report, (]
[(, outerScope, ., getVar, (, functionPrivateName, ), ., getType, (, ), instanceof, FunctionType, ), ), {, report, (, t, ,]
[., getVar, (, functionPrivateName, ), ., getType, (, ), instanceof, FunctionType, ), ), {, report, (, t, ,, n, ,]
[(, functionPrivateName, ), ., getType, (, ), instanceof, FunctionType, ), ), {, report, (, t, ,, n, ,, FUNCTION_MASKS_VARIABLE, ,]
[FunctionType, ), ), {, report, (, t, ,, n, ,, FUNCTION_MASKS_VARIABLE, ,, functionPrivateName, ), ;, }, break, ;, }, return]
[Node, parent, ), {, JSType, childType, ;, JSType, leftType, ,, rightType, ;, Node, left, ,, right, ;, boolean, typeable, =]
[JSType, childType, ;, JSType, leftType, ,, rightType, ;, Node, left, ,, right, ;, boolean, typeable, =, true, ;, switch, (]
[JSType, childType, ;, JSType, leftType, ,, rightType, ;, Node, left, ,, right, ;, boolean, typeable, =, true, ;, switch, (]
[Node, left, ,, right, ;, boolean, typeable, =, true, ;, switch, (, n, ., getType, (, ), ), {, case]
[Node, left, ,, right, ;, boolean, typeable, =, true, ;, switch, (, n, ., getType, (, ), ), {, case]
[=, true, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., CAST, :, Node, expr, =]
[=, true, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., CAST, :, Node, expr, =]
[., getType, (, ), ), {, case, Token, ., CAST, :, Node, expr, =, n, ., getFirstChild, (, ), ;]
[(, ), ), {, case, Token, ., CAST, :, Node, expr, =, n, ., getFirstChild, (, ), ;, ensureTyped, (]
[), {, case, Token, ., CAST, :, Node, expr, =, n, ., getFirstChild, (, ), ;, ensureTyped, (, t, ,]
[case, Token, ., CAST, :, Node, expr, =, n, ., getFirstChild, (, ), ;, ensureTyped, (, t, ,, n, ,]
[., CAST, :, Node, expr, =, n, ., getFirstChild, (, ), ;, ensureTyped, (, t, ,, n, ,, getJSType, (]
[., getFirstChild, (, ), ;, ensureTyped, (, t, ,, n, ,, getJSType, (, expr, ), ), ;, JSType, castType, =]
[(, ), ;, ensureTyped, (, t, ,, n, ,, getJSType, (, expr, ), ), ;, JSType, castType, =, getJSType, (]
[,, n, ,, getJSType, (, expr, ), ), ;, JSType, castType, =, getJSType, (, n, ), ;, JSType, exprType, =]
[,, getJSType, (, expr, ), ), ;, JSType, castType, =, getJSType, (, n, ), ;, JSType, exprType, =, getJSType, (]
[), ;, JSType, castType, =, getJSType, (, n, ), ;, JSType, exprType, =, getJSType, (, expr, ), ;, if, (]
[), ;, JSType, castType, =, getJSType, (, n, ), ;, JSType, exprType, =, getJSType, (, expr, ), ;, if, (]
[=, getJSType, (, n, ), ;, JSType, exprType, =, getJSType, (, expr, ), ;, if, (, castType, ., isSubtype, (]
[), ;, JSType, exprType, =, getJSType, (, expr, ), ;, if, (, castType, ., isSubtype, (, exprType, ), ), {]
[), ;, JSType, exprType, =, getJSType, (, expr, ), ;, if, (, castType, ., isSubtype, (, exprType, ), ), {]
[=, getJSType, (, expr, ), ;, if, (, castType, ., isSubtype, (, exprType, ), ), {, expr, ., setJSType, (]
[(, castType, ., isSubtype, (, exprType, ), ), {, expr, ., setJSType, (, castType, ), ;, }, break, ;, case]
[(, castType, ., isSubtype, (, exprType, ), ), {, expr, ., setJSType, (, castType, ), ;, }, break, ;, case]
[(, exprType, ), ), {, expr, ., setJSType, (, castType, ), ;, }, break, ;, case, Token, ., NAME, :]
[), ), {, expr, ., setJSType, (, castType, ), ;, }, break, ;, case, Token, ., NAME, :, typeable, =]
[{, expr, ., setJSType, (, castType, ), ;, }, break, ;, case, Token, ., NAME, :, typeable, =, visitName, (]
[., setJSType, (, castType, ), ;, }, break, ;, case, Token, ., NAME, :, typeable, =, visitName, (, t, ,]
[(, castType, ), ;, }, break, ;, case, Token, ., NAME, :, typeable, =, visitName, (, t, ,, n, ,]
[;, case, Token, ., NAME, :, typeable, =, visitName, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[;, case, Token, ., NAME, :, typeable, =, visitName, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[NAME, :, typeable, =, visitName, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., PARAM_LIST, :]
[typeable, =, visitName, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., PARAM_LIST, :, typeable, =]
[,, n, ,, parent, ), ;, break, ;, case, Token, ., PARAM_LIST, :, typeable, =, false, ;, break, ;, case]
[,, n, ,, parent, ), ;, break, ;, case, Token, ., PARAM_LIST, :, typeable, =, false, ;, break, ;, case]
[), ;, break, ;, case, Token, ., PARAM_LIST, :, typeable, =, false, ;, break, ;, case, Token, ., COMMA, :]
[break, ;, case, Token, ., PARAM_LIST, :, typeable, =, false, ;, break, ;, case, Token, ., COMMA, :, ensureTyped, (]
[case, Token, ., PARAM_LIST, :, typeable, =, false, ;, break, ;, case, Token, ., COMMA, :, ensureTyped, (, t, ,]
[., PARAM_LIST, :, typeable, =, false, ;, break, ;, case, Token, ., COMMA, :, ensureTyped, (, t, ,, n, ,]
[:, typeable, =, false, ;, break, ;, case, Token, ., COMMA, :, ensureTyped, (, t, ,, n, ,, getJSType, (]
[:, typeable, =, false, ;, break, ;, case, Token, ., COMMA, :, ensureTyped, (, t, ,, n, ,, getJSType, (]
[:, ensureTyped, (, t, ,, n, ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case]
[:, ensureTyped, (, t, ,, n, ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case]
[n, ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TRUE, :, case]
[n, ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TRUE, :, case]
[n, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :]
[getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, ensureTyped, (]
[), ), ), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, ensureTyped, (, t, ,]
[), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, ensureTyped, (, t, ,, n, ,]
[., TRUE, :, case, Token, ., FALSE, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[., TRUE, :, case, Token, ., FALSE, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[Token, ., FALSE, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., THIS, :]
[FALSE, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., THIS, :, ensureTyped, (]
[ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., THIS, :, ensureTyped, (, t, ,]
[t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., THIS, :, ensureTyped, (, t, ,, n, ,]
[t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., THIS, :, ensureTyped, (, t, ,, n, ,]
[t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., THIS, :, ensureTyped, (, t, ,, n, ,]
[ensureTyped, (, t, ,, n, ,, t, ., getScope, (, ), ., getTypeOfThis, (, ), ), ;, break, ;, case]
[ensureTyped, (, t, ,, n, ,, t, ., getScope, (, ), ., getTypeOfThis, (, ), ), ;, break, ;, case]
[n, ,, t, ., getScope, (, ), ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., NULL, :]
[t, ., getScope, (, ), ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., NULL, :, ensureTyped, (]
[getScope, (, ), ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., NULL, :, ensureTyped, (, t, ,]
[), ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., NULL, :, ensureTyped, (, t, ,, n, ,]
[;, break, ;, case, Token, ., NULL, :, ensureTyped, (, t, ,, n, ,, NULL_TYPE, ), ;, break, ;, case]
[;, break, ;, case, Token, ., NULL, :, ensureTyped, (, t, ,, n, ,, NULL_TYPE, ), ;, break, ;, case]
[Token, ., NULL, :, ensureTyped, (, t, ,, n, ,, NULL_TYPE, ), ;, break, ;, case, Token, ., NUMBER, :]
[NULL, :, ensureTyped, (, t, ,, n, ,, NULL_TYPE, ), ;, break, ;, case, Token, ., NUMBER, :, ensureTyped, (]
[ensureTyped, (, t, ,, n, ,, NULL_TYPE, ), ;, break, ;, case, Token, ., NUMBER, :, ensureTyped, (, t, ,]
[t, ,, n, ,, NULL_TYPE, ), ;, break, ;, case, Token, ., NUMBER, :, ensureTyped, (, t, ,, n, ,]
[;, break, ;, case, Token, ., NUMBER, :, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case]
[;, break, ;, case, Token, ., NUMBER, :, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case]
[Token, ., NUMBER, :, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., STRING, :]
[NUMBER, :, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., STRING, :, ensureTyped, (]
[ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., STRING, :, ensureTyped, (, t, ,]
[t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., STRING, :, ensureTyped, (, t, ,, n, ,]
[;, break, ;, case, Token, ., STRING, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case]
[;, break, ;, case, Token, ., STRING, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case]
[Token, ., STRING, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., STRING_KEY, :]
[STRING, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., STRING_KEY, :, typeable, =]
[,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., STRING_KEY, :, typeable, =, false, ;, break, ;, case]
[,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., STRING_KEY, :, typeable, =, false, ;, break, ;, case]
[;, break, ;, case, Token, ., STRING_KEY, :, typeable, =, false, ;, break, ;, case, Token, ., GETTER_DEF, :, case]
[;, break, ;, case, Token, ., STRING_KEY, :, typeable, =, false, ;, break, ;, case, Token, ., GETTER_DEF, :, case]
[:, typeable, =, false, ;, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, break, ;, case]
[:, typeable, =, false, ;, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, break, ;, case]
[;, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, break, ;, case, Token, ., ARRAYLIT, :]
[;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, break, ;, case, Token, ., ARRAYLIT, :, ensureTyped, (]
[Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, break, ;, case, Token, ., ARRAYLIT, :, ensureTyped, (, t, ,]
[GETTER_DEF, :, case, Token, ., SETTER_DEF, :, break, ;, case, Token, ., ARRAYLIT, :, ensureTyped, (, t, ,, n, ,]
[:, break, ;, case, Token, ., ARRAYLIT, :, ensureTyped, (, t, ,, n, ,, ARRAY_TYPE, ), ;, break, ;, case]
[:, break, ;, case, Token, ., ARRAYLIT, :, ensureTyped, (, t, ,, n, ,, ARRAY_TYPE, ), ;, break, ;, case]
[Token, ., ARRAYLIT, :, ensureTyped, (, t, ,, n, ,, ARRAY_TYPE, ), ;, break, ;, case, Token, ., REGEXP, :]
[ARRAYLIT, :, ensureTyped, (, t, ,, n, ,, ARRAY_TYPE, ), ;, break, ;, case, Token, ., REGEXP, :, ensureTyped, (]
[ensureTyped, (, t, ,, n, ,, ARRAY_TYPE, ), ;, break, ;, case, Token, ., REGEXP, :, ensureTyped, (, t, ,]
[t, ,, n, ,, ARRAY_TYPE, ), ;, break, ;, case, Token, ., REGEXP, :, ensureTyped, (, t, ,, n, ,]
[;, break, ;, case, Token, ., REGEXP, :, ensureTyped, (, t, ,, n, ,, REGEXP_TYPE, ), ;, break, ;, case]
[;, break, ;, case, Token, ., REGEXP, :, ensureTyped, (, t, ,, n, ,, REGEXP_TYPE, ), ;, break, ;, case]
[Token, ., REGEXP, :, ensureTyped, (, t, ,, n, ,, REGEXP_TYPE, ), ;, break, ;, case, Token, ., GETPROP, :]
[REGEXP, :, ensureTyped, (, t, ,, n, ,, REGEXP_TYPE, ), ;, break, ;, case, Token, ., GETPROP, :, visitGetProp, (]
[ensureTyped, (, t, ,, n, ,, REGEXP_TYPE, ), ;, break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,]
[t, ,, n, ,, REGEXP_TYPE, ), ;, break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,, n, ,]
[,, REGEXP_TYPE, ), ;, break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,, n, ,, parent, ), ;]
[), ;, break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =]
[;, break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =, !]
[break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =, !, (]
[break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =, !, (]
[break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =, !, (]
[:, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =, !, (, parent, ., isAssign, (, ), &&]
[:, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =, !, (, parent, ., isAssign, (, ), &&]
[:, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =, !, (, parent, ., isAssign, (, ), &&]
[,, parent, ), ;, typeable, =, !, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==]
[!, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ;, break, ;, case]
[!, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ;, break, ;, case]
[isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ;, break, ;, case, Token, ., GETELEM, :]
[), &&, parent, ., getFirstChild, (, ), ==, n, ), ;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (]
[parent, ., getFirstChild, (, ), ==, n, ), ;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,]
[(, ), ==, n, ), ;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,, n, ), ;]
[==, n, ), ;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,, n, ), ;, typeable, =]
[;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case]
[;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case]
[GETELEM, :, visitGetElem, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., VAR, :]
[visitGetElem, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., VAR, :, visitVar, (]
[t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., VAR, :, visitVar, (, t, ,]
[), ;, typeable, =, false, ;, break, ;, case, Token, ., VAR, :, visitVar, (, t, ,, n, ), ;]
[typeable, =, false, ;, break, ;, case, Token, ., VAR, :, visitVar, (, t, ,, n, ), ;, typeable, =]
[;, case, Token, ., VAR, :, visitVar, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case]
[;, case, Token, ., VAR, :, visitVar, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case]
[VAR, :, visitVar, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., NEW, :]
[visitVar, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., NEW, :, visitNew, (]
[t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., NEW, :, visitNew, (, t, ,]
[=, false, ;, break, ;, case, Token, ., NEW, :, visitNew, (, t, ,, n, ), ;, break, ;, case]
[=, false, ;, break, ;, case, Token, ., NEW, :, visitNew, (, t, ,, n, ), ;, break, ;, case]
[;, case, Token, ., NEW, :, visitNew, (, t, ,, n, ), ;, break, ;, case, Token, ., CALL, :]
[Token, ., NEW, :, visitNew, (, t, ,, n, ), ;, break, ;, case, Token, ., CALL, :, visitCall, (]
[NEW, :, visitNew, (, t, ,, n, ), ;, break, ;, case, Token, ., CALL, :, visitCall, (, t, ,]
[(, t, ,, n, ), ;, break, ;, case, Token, ., CALL, :, visitCall, (, t, ,, n, ), ;]
[,, n, ), ;, break, ;, case, Token, ., CALL, :, visitCall, (, t, ,, n, ), ;, typeable, =]
[n, ), ;, break, ;, case, Token, ., CALL, :, visitCall, (, t, ,, n, ), ;, typeable, =, !]
[n, ), ;, break, ;, case, Token, ., CALL, :, visitCall, (, t, ,, n, ), ;, typeable, =, !]
[:, visitCall, (, t, ,, n, ), ;, typeable, =, !, parent, ., isExprResult, (, ), ;, break, ;, case]
[:, visitCall, (, t, ,, n, ), ;, typeable, =, !, parent, ., isExprResult, (, ), ;, break, ;, case]
[,, n, ), ;, typeable, =, !, parent, ., isExprResult, (, ), ;, break, ;, case, Token, ., RETURN, :]
[), ;, typeable, =, !, parent, ., isExprResult, (, ), ;, break, ;, case, Token, ., RETURN, :, visitReturn, (]
[typeable, =, !, parent, ., isExprResult, (, ), ;, break, ;, case, Token, ., RETURN, :, visitReturn, (, t, ,]
[parent, ., isExprResult, (, ), ;, break, ;, case, Token, ., RETURN, :, visitReturn, (, t, ,, n, ), ;]
[isExprResult, (, ), ;, break, ;, case, Token, ., RETURN, :, visitReturn, (, t, ,, n, ), ;, typeable, =]
[;, case, Token, ., RETURN, :, visitReturn, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case]
[;, case, Token, ., RETURN, :, visitReturn, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case]
[:, visitReturn, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., DEC, :, case]
[:, visitReturn, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., DEC, :, case]
[,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., DEC, :, case, Token, ., INC, :]
[), ;, typeable, =, false, ;, break, ;, case, Token, ., DEC, :, case, Token, ., INC, :, left, =]
[), ;, typeable, =, false, ;, break, ;, case, Token, ., DEC, :, case, Token, ., INC, :, left, =]
[break, ;, case, Token, ., DEC, :, case, Token, ., INC, :, left, =, n, ., getFirstChild, (, ), ;]
[case, Token, ., DEC, :, case, Token, ., INC, :, left, =, n, ., getFirstChild, (, ), ;, checkPropCreation, (]
[., DEC, :, case, Token, ., INC, :, left, =, n, ., getFirstChild, (, ), ;, checkPropCreation, (, t, ,]
[case, Token, ., INC, :, left, =, n, ., getFirstChild, (, ), ;, checkPropCreation, (, t, ,, left, ), ;]
[case, Token, ., INC, :, left, =, n, ., getFirstChild, (, ), ;, checkPropCreation, (, t, ,, left, ), ;]
[:, left, =, n, ., getFirstChild, (, ), ;, checkPropCreation, (, t, ,, left, ), ;, validator, ., expectNumber, (]
[=, n, ., getFirstChild, (, ), ;, checkPropCreation, (, t, ,, left, ), ;, validator, ., expectNumber, (, t, ,]
[., getFirstChild, (, ), ;, checkPropCreation, (, t, ,, left, ), ;, validator, ., expectNumber, (, t, ,, left, ,]
[(, ), ;, checkPropCreation, (, t, ,, left, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (]
[checkPropCreation, (, t, ,, left, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,]
[,, left, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "increment/decrement", ), ;]
[), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "increment/decrement", ), ;, ensureTyped, (]
[validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "increment/decrement", ), ;, ensureTyped, (, t, ,]
[expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "increment/decrement", ), ;, ensureTyped, (, t, ,, n, ,]
[getJSType, (, left, ), ,, "increment/decrement", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case]
[getJSType, (, left, ), ,, "increment/decrement", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case]
[,, "increment/decrement", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., NOT, :]
[), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., NOT, :, ensureTyped, (]
[ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., NOT, :, ensureTyped, (, t, ,]
[t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., NOT, :, ensureTyped, (, t, ,, n, ,]
[;, break, ;, case, Token, ., NOT, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[;, break, ;, case, Token, ., NOT, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[Token, ., NOT, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., VOID, :]
[NOT, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., VOID, :, ensureTyped, (]
[ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., VOID, :, ensureTyped, (, t, ,]
[t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., VOID, :, ensureTyped, (, t, ,, n, ,]
[;, break, ;, case, Token, ., VOID, :, ensureTyped, (, t, ,, n, ,, VOID_TYPE, ), ;, break, ;, case]
[;, break, ;, case, Token, ., VOID, :, ensureTyped, (, t, ,, n, ,, VOID_TYPE, ), ;, break, ;, case]
[Token, ., VOID, :, ensureTyped, (, t, ,, n, ,, VOID_TYPE, ), ;, break, ;, case, Token, ., TYPEOF, :]
[VOID, :, ensureTyped, (, t, ,, n, ,, VOID_TYPE, ), ;, break, ;, case, Token, ., TYPEOF, :, ensureTyped, (]
[ensureTyped, (, t, ,, n, ,, VOID_TYPE, ), ;, break, ;, case, Token, ., TYPEOF, :, ensureTyped, (, t, ,]
[t, ,, n, ,, VOID_TYPE, ), ;, break, ;, case, Token, ., TYPEOF, :, ensureTyped, (, t, ,, n, ,]
[;, break, ;, case, Token, ., TYPEOF, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case]
[;, break, ;, case, Token, ., TYPEOF, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case]
[Token, ., TYPEOF, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., BITNOT, :]
[TYPEOF, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., BITNOT, :, childType, =]
[ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., BITNOT, :, childType, =, getJSType, (]
[ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., BITNOT, :, childType, =, getJSType, (]
[break, ;, case, Token, ., BITNOT, :, childType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, if, (]
[;, case, Token, ., BITNOT, :, childType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, if, (, !]
[;, case, Token, ., BITNOT, :, childType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, if, (, !]
[=, getJSType, (, n, ., getFirstChild, (, ), ), ;, if, (, !, childType, ., matchesInt32Context, (, ), ), {]
[(, n, ., getFirstChild, (, ), ), ;, if, (, !, childType, ., matchesInt32Context, (, ), ), {, report, (]
[., getFirstChild, (, ), ), ;, if, (, !, childType, ., matchesInt32Context, (, ), ), {, report, (, t, ,]
[(, ), ), ;, if, (, !, childType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, n, ,]
[), ;, if, (, !, childType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, n, ,, BIT_OPERATION, ,]
[), ;, if, (, !, childType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, n, ,, BIT_OPERATION, ,]
[!, childType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, n, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (]
[!, childType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, n, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (]
[{, report, (, t, ,, n, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,]
[{, report, (, t, ,, n, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,]
[,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,, childType, ., toString, (, ), ), ;, }]
[., opToStr, (, n, ., getType, (, ), ), ,, childType, ., toString, (, ), ), ;, }, ensureTyped, (]
[(, n, ., getType, (, ), ), ,, childType, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,]
[., getType, (, ), ), ,, childType, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,]
[childType, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case]
[childType, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case]
[), ;, }, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., POS, :, case]
[), ;, }, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., POS, :, case]
[(, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :]
[,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, left, =]
[,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, left, =]
[break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, left, =, n, ., getFirstChild, (, ), ;]
[break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, left, =, n, ., getFirstChild, (, ), ;]
[., POS, :, case, Token, ., NEG, :, left, =, n, ., getFirstChild, (, ), ;, validator, ., expectNumber, (]
[:, case, Token, ., NEG, :, left, =, n, ., getFirstChild, (, ), ;, validator, ., expectNumber, (, t, ,]
[Token, ., NEG, :, left, =, n, ., getFirstChild, (, ), ;, validator, ., expectNumber, (, t, ,, left, ,]
[NEG, :, left, =, n, ., getFirstChild, (, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (]
[=, n, ., getFirstChild, (, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,]
[getFirstChild, (, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "sign operator", ), ;]
[), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "sign operator", ), ;, ensureTyped, (]
[validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "sign operator", ), ;, ensureTyped, (, t, ,]
[expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "sign operator", ), ;, ensureTyped, (, t, ,, n, ,]
[getJSType, (, left, ), ,, "sign operator", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case]
[getJSType, (, left, ), ,, "sign operator", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case]
["sign operator", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., EQ, :, case]
["sign operator", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., EQ, :, case]
[t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., EQ, :, case, Token, ., NE, :, case]
[t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., EQ, :, case, Token, ., NE, :, case]
[), ;, break, ;, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case]
[), ;, break, ;, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case]
[Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, {]
[EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, {, left, =]
[EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, {, left, =]
[:, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, {, left, =, n, ., getFirstChild, (, ), ;]
[Token, ., SHEQ, :, case, Token, ., SHNE, :, {, left, =, n, ., getFirstChild, (, ), ;, right, =]
[Token, ., SHEQ, :, case, Token, ., SHNE, :, {, left, =, n, ., getFirstChild, (, ), ;, right, =]
[:, {, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, if, (]
[:, {, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, if, (]
[;, right, =, n, ., getLastChild, (, ), ;, if, (, left, ., isTypeOf, (, ), ), {, if, (]
[;, right, =, n, ., getLastChild, (, ), ;, if, (, left, ., isTypeOf, (, ), ), {, if, (]
[), ;, if, (, left, ., isTypeOf, (, ), ), {, if, (, right, ., isString, (, ), ), {]
[if, (, left, ., isTypeOf, (, ), ), {, if, (, right, ., isString, (, ), ), {, checkTypeofString, (]
[left, ., isTypeOf, (, ), ), {, if, (, right, ., isString, (, ), ), {, checkTypeofString, (, t, ,]
[isTypeOf, (, ), ), {, if, (, right, ., isString, (, ), ), {, checkTypeofString, (, t, ,, right, ,]
[isTypeOf, (, ), ), {, if, (, right, ., isString, (, ), ), {, checkTypeofString, (, t, ,, right, ,]
[), {, checkTypeofString, (, t, ,, right, ,, right, ., getString, (, ), ), ;, }, }, else, if, (]
[), {, checkTypeofString, (, t, ,, right, ,, right, ., getString, (, ), ), ;, }, }, else, if, (]
[), {, checkTypeofString, (, t, ,, right, ,, right, ., getString, (, ), ), ;, }, }, else, if, (]
[right, ,, right, ., getString, (, ), ), ;, }, }, else, if, (, right, ., isTypeOf, (, ), &&]
[right, ,, right, ., getString, (, ), ), ;, }, }, else, if, (, right, ., isTypeOf, (, ), &&]
[), ;, }, }, else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {]
[}, }, else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {, checkTypeofString, (]
[else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {, checkTypeofString, (, t, ,]
[(, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {, checkTypeofString, (, t, ,, left, ,]
[(, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {, checkTypeofString, (, t, ,, left, ,]
[., isString, (, ), ), {, checkTypeofString, (, t, ,, left, ,, left, ., getString, (, ), ), ;, }]
[(, ), ), {, checkTypeofString, (, t, ,, left, ,, left, ., getString, (, ), ), ;, }, leftType, =]
[), {, checkTypeofString, (, t, ,, left, ,, left, ., getString, (, ), ), ;, }, leftType, =, getJSType, (]
[(, t, ,, left, ,, left, ., getString, (, ), ), ;, }, leftType, =, getJSType, (, left, ), ;]
[,, left, ,, left, ., getString, (, ), ), ;, }, leftType, =, getJSType, (, left, ), ;, rightType, =]
[,, left, ., getString, (, ), ), ;, }, leftType, =, getJSType, (, left, ), ;, rightType, =, getJSType, (]
[), ;, }, leftType, =, getJSType, (, left, ), ;, rightType, =, getJSType, (, right, ), ;, JSType, leftTypeRestricted, =]
[), ;, }, leftType, =, getJSType, (, left, ), ;, rightType, =, getJSType, (, right, ), ;, JSType, leftTypeRestricted, =]
[;, rightType, =, getJSType, (, right, ), ;, JSType, leftTypeRestricted, =, leftType, ., restrictByNotNullOrUndefined, (, ), ;, JSType, rightTypeRestricted, =]
[;, rightType, =, getJSType, (, right, ), ;, JSType, leftTypeRestricted, =, leftType, ., restrictByNotNullOrUndefined, (, ), ;, JSType, rightTypeRestricted, =]
[leftTypeRestricted, =, leftType, ., restrictByNotNullOrUndefined, (, ), ;, JSType, rightTypeRestricted, =, rightType, ., restrictByNotNullOrUndefined, (, ), ;, TernaryValue, result, =]
[leftTypeRestricted, =, leftType, ., restrictByNotNullOrUndefined, (, ), ;, JSType, rightTypeRestricted, =, rightType, ., restrictByNotNullOrUndefined, (, ), ;, TernaryValue, result, =]
[), ;, JSType, rightTypeRestricted, =, rightType, ., restrictByNotNullOrUndefined, (, ), ;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (]
[), ;, JSType, rightTypeRestricted, =, rightType, ., restrictByNotNullOrUndefined, (, ), ;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (]
[), ;, JSType, rightTypeRestricted, =, rightType, ., restrictByNotNullOrUndefined, (, ), ;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (]
[), ;, JSType, rightTypeRestricted, =, rightType, ., restrictByNotNullOrUndefined, (, ), ;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (]
[., restrictByNotNullOrUndefined, (, ), ;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (, n, ., getType, (, ), ==]
[., restrictByNotNullOrUndefined, (, ), ;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (, n, ., getType, (, ), ==]
[;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (, n, ., getType, (, ), ==, Token, ., EQ, ||]
[;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (, n, ., getType, (, ), ==, Token, ., EQ, ||]
[;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (, n, ., getType, (, ), ==, Token, ., EQ, ||]
[UNKNOWN, ;, if, (, n, ., getType, (, ), ==, Token, ., EQ, ||, n, ., getType, (, ), ==]
[UNKNOWN, ;, if, (, n, ., getType, (, ), ==, Token, ., EQ, ||, n, ., getType, (, ), ==]
[., getType, (, ), ==, Token, ., EQ, ||, n, ., getType, (, ), ==, Token, ., NE, ), {]
[(, ), ==, Token, ., EQ, ||, n, ., getType, (, ), ==, Token, ., NE, ), {, result, =]
[(, ), ==, Token, ., EQ, ||, n, ., getType, (, ), ==, Token, ., NE, ), {, result, =]
[., EQ, ||, n, ., getType, (, ), ==, Token, ., NE, ), {, result, =, leftTypeRestricted, ., testForEquality, (]
[getType, (, ), ==, Token, ., NE, ), {, result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if, (]
[getType, (, ), ==, Token, ., NE, ), {, result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if, (]
[), {, result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if, (, n, ., isNE, (, ), ), {]
[result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if, (, n, ., isNE, (, ), ), {, result, =]
[result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if, (, n, ., isNE, (, ), ), {, result, =]
[., isNE, (, ), ), {, result, =, result, ., not, (, ), ;, }, }, else, {, if, (]
[isNE, (, ), ), {, result, =, result, ., not, (, ), ;, }, }, else, {, if, (, !]
[isNE, (, ), ), {, result, =, result, ., not, (, ), ;, }, }, else, {, if, (, !]
[{, result, =, result, ., not, (, ), ;, }, }, else, {, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith, (]
[., not, (, ), ;, }, }, else, {, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {]
[(, ), ;, }, }, else, {, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {, result, =]
[(, ), ;, }, }, else, {, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {, result, =]
[(, ), ;, }, }, else, {, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {, result, =]
[(, ), ;, }, }, else, {, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {, result, =]
[{, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {, result, =, n, ., getType, (, ), ==]
[{, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {, result, =, n, ., getType, (, ), ==]
[leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {, result, =, n, ., getType, (, ), ==, Token, ., SHEQ, ?]
[leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {, result, =, n, ., getType, (, ), ==, Token, ., SHEQ, ?]
[rightTypeRestricted, ), ), {, result, =, n, ., getType, (, ), ==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :]
[rightTypeRestricted, ), ), {, result, =, n, ., getType, (, ), ==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :]
[getType, (, ), ==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if, (]
[getType, (, ), ==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if, (]
[), ==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if, (, result, !=]
[), ==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if, (, result, !=]
[?, TernaryValue, ., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {]
[., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {, report, (]
[:, TernaryValue, ., TRUE, ;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {, report, (, t, ,]
[., TRUE, ;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {, report, (, t, ,, n, ,]
[;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {, report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,]
[;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {, report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,]
[!=, TernaryValue, ., UNKNOWN, ), {, report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,, leftType, ., toString, (, ), ,]
[!=, TernaryValue, ., UNKNOWN, ), {, report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,, leftType, ., toString, (, ), ,]
[report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,, leftType, ., toString, (, ), ,, rightType, ., toString, (, ), ,]
[report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,, leftType, ., toString, (, ), ,, rightType, ., toString, (, ), ,]
[leftType, ., toString, (, ), ,, rightType, ., toString, (, ), ,, result, ., toString, (, ), ), ;, }]
[toString, (, ), ,, rightType, ., toString, (, ), ,, result, ., toString, (, ), ), ;, }, ensureTyped, (]
[), ,, rightType, ., toString, (, ), ,, result, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,]
[rightType, ., toString, (, ), ,, result, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,]
[., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, }, case]
[., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, }, case]
[;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, }, case, Token, ., LT, :, case]
[;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, }, case, Token, ., LT, :, case]
[,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, }, case, Token, ., LT, :, case, Token, ., LE, :, case]
[,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, }, case, Token, ., LT, :, case, Token, ., LE, :, case]
[;, break, ;, }, case, Token, ., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case]
[;, break, ;, }, case, Token, ., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case]
[case, Token, ., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :]
[., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, leftType, =]
[:, case, Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, leftType, =, getJSType, (]
[:, case, Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, leftType, =, getJSType, (]
[Token, ., GT, :, case, Token, ., GE, :, leftType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;]
[GT, :, case, Token, ., GE, :, leftType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, rightType, =]
[case, Token, ., GE, :, leftType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, rightType, =, getJSType, (]
[case, Token, ., GE, :, leftType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, rightType, =, getJSType, (]
[n, ., getFirstChild, (, ), ), ;, rightType, =, getJSType, (, n, ., getLastChild, (, ), ), ;, if, (]
[n, ., getFirstChild, (, ), ), ;, rightType, =, getJSType, (, n, ., getLastChild, (, ), ), ;, if, (]
[rightType, =, getJSType, (, n, ., getLastChild, (, ), ), ;, if, (, rightType, ., isNumber, (, ), ), {]
[rightType, =, getJSType, (, n, ., getLastChild, (, ), ), ;, if, (, rightType, ., isNumber, (, ), ), {]
[n, ., getLastChild, (, ), ), ;, if, (, rightType, ., isNumber, (, ), ), {, validator, ., expectNumber, (]
[getLastChild, (, ), ), ;, if, (, rightType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,]
[), ), ;, if, (, rightType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,, n, ,]
[;, if, (, rightType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,, n, ,, leftType, ,]
[), ), {, validator, ., expectNumber, (, t, ,, n, ,, leftType, ,, "left side of numeric comparison", ), ;, }, else, if, (]
[), ), {, validator, ., expectNumber, (, t, ,, n, ,, leftType, ,, "left side of numeric comparison", ), ;, }, else, if, (]
[t, ,, n, ,, leftType, ,, "left side of numeric comparison", ), ;, }, else, if, (, leftType, ., isNumber, (, ), ), {]
[t, ,, n, ,, leftType, ,, "left side of numeric comparison", ), ;, }, else, if, (, leftType, ., isNumber, (, ), ), {]
[leftType, ,, "left side of numeric comparison", ), ;, }, else, if, (, leftType, ., isNumber, (, ), ), {, validator, ., expectNumber, (]
["left side of numeric comparison", ), ;, }, else, if, (, leftType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,]
[;, }, else, if, (, leftType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,, n, ,]
[else, if, (, leftType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,, n, ,, rightType, ,]
[), ), {, validator, ., expectNumber, (, t, ,, n, ,, rightType, ,, "right side of numeric comparison", ), ;, }, else, if, (]
[), ), {, validator, ., expectNumber, (, t, ,, n, ,, rightType, ,, "right side of numeric comparison", ), ;, }, else, if, (]
[), ), {, validator, ., expectNumber, (, t, ,, n, ,, rightType, ,, "right side of numeric comparison", ), ;, }, else, if, (]
[(, t, ,, n, ,, rightType, ,, "right side of numeric comparison", ), ;, }, else, if, (, leftType, ., matchesNumberContext, (, ), &&]
[(, t, ,, n, ,, rightType, ,, "right side of numeric comparison", ), ;, }, else, if, (, leftType, ., matchesNumberContext, (, ), &&]
[(, leftType, ., matchesNumberContext, (, ), &&, rightType, ., matchesNumberContext, (, ), ), {, }, else, {, String, message, =]
[., matchesNumberContext, (, ), &&, rightType, ., matchesNumberContext, (, ), ), {, }, else, {, String, message, =, "left side of comparison", ;]
[., matchesNumberContext, (, ), &&, rightType, ., matchesNumberContext, (, ), ), {, }, else, {, String, message, =, "left side of comparison", ;]
[&&, rightType, ., matchesNumberContext, (, ), ), {, }, else, {, String, message, =, "left side of comparison", ;, validator, ., expectString, (]
[., matchesNumberContext, (, ), ), {, }, else, {, String, message, =, "left side of comparison", ;, validator, ., expectString, (, t, ,]
[(, ), ), {, }, else, {, String, message, =, "left side of comparison", ;, validator, ., expectString, (, t, ,, n, ,]
[), {, }, else, {, String, message, =, "left side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, leftType, ,]
[else, {, String, message, =, "left side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, leftType, ,, message, ), ;]
[else, {, String, message, =, "left side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, leftType, ,, message, ), ;]
[=, "left side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, leftType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (]
[;, validator, ., expectString, (, t, ,, n, ,, leftType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,]
[., expectString, (, t, ,, n, ,, leftType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,]
[(, t, ,, n, ,, leftType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,]
[,, n, ,, leftType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,]
[,, leftType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,, getNativeType, (]
[), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;]
[validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, message, =]
[expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, message, =, "right side of comparison", ;]
[expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, message, =, "right side of comparison", ;]
[n, ,, leftType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, message, =, "right side of comparison", ;, validator, ., expectString, (]
[leftType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, message, =, "right side of comparison", ;, validator, ., expectString, (, t, ,]
[message, ,, getNativeType, (, STRING_TYPE, ), ), ;, message, =, "right side of comparison", ;, validator, ., expectString, (, t, ,, n, ,]
[getNativeType, (, STRING_TYPE, ), ), ;, message, =, "right side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, rightType, ,]
[), ), ;, message, =, "right side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, rightType, ,, message, ), ;]
[), ), ;, message, =, "right side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, rightType, ,, message, ), ;]
[=, "right side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, rightType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (]
[;, validator, ., expectString, (, t, ,, n, ,, rightType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,]
[., expectString, (, t, ,, n, ,, rightType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,]
[(, t, ,, n, ,, rightType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, rightType, ,]
[,, n, ,, rightType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, rightType, ,, message, ,]
[,, rightType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, rightType, ,, message, ,, getNativeType, (]
[;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, rightType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, }]
[., expectNotNullOrUndefined, (, t, ,, n, ,, rightType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, }, ensureTyped, (]
[(, t, ,, n, ,, rightType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, }, ensureTyped, (, t, ,]
[,, n, ,, rightType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, }, ensureTyped, (, t, ,, n, ,]
[,, getNativeType, (, STRING_TYPE, ), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[,, getNativeType, (, STRING_TYPE, ), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., IN, :]
[;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., IN, :, left, =]
[;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., IN, :, left, =]
[n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., IN, :, left, =, n, ., getFirstChild, (, ), ;]
[BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., IN, :, left, =, n, ., getFirstChild, (, ), ;, right, =]
[BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., IN, :, left, =, n, ., getFirstChild, (, ), ;, right, =]
[Token, ., IN, :, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;]
[IN, :, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =]
[left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (]
[., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ;]
[., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ;]
[;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ;, validator, ., expectString, (]
[=, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ;, validator, ., expectString, (, t, ,]
[., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ;, validator, ., expectString, (, t, ,, left, ,]
[(, ), ;, rightType, =, getJSType, (, right, ), ;, validator, ., expectString, (, t, ,, left, ,, getJSType, (]
[rightType, =, getJSType, (, right, ), ;, validator, ., expectString, (, t, ,, left, ,, getJSType, (, left, ), ,]
[(, right, ), ;, validator, ., expectString, (, t, ,, left, ,, getJSType, (, left, ), ,, "left side of 'in'", ), ;]
[(, right, ), ;, validator, ., expectString, (, t, ,, left, ,, getJSType, (, left, ), ,, "left side of 'in'", ), ;]
[validator, ., expectString, (, t, ,, left, ,, getJSType, (, left, ), ,, "left side of 'in'", ), ;, validator, ., expectObject, (]
[expectString, (, t, ,, left, ,, getJSType, (, left, ), ,, "left side of 'in'", ), ;, validator, ., expectObject, (, t, ,]
[t, ,, left, ,, getJSType, (, left, ), ,, "left side of 'in'", ), ;, validator, ., expectObject, (, t, ,, n, ,]
[left, ,, getJSType, (, left, ), ,, "left side of 'in'", ), ;, validator, ., expectObject, (, t, ,, n, ,, rightType, ,]
[), ,, "left side of 'in'", ), ;, validator, ., expectObject, (, t, ,, n, ,, rightType, ,, "'in' requires an object", ), ;, if, (]
[), ,, "left side of 'in'", ), ;, validator, ., expectObject, (, t, ,, n, ,, rightType, ,, "'in' requires an object", ), ;, if, (]
[expectObject, (, t, ,, n, ,, rightType, ,, "'in' requires an object", ), ;, if, (, rightType, ., isStruct, (, ), ), {]
[t, ,, n, ,, rightType, ,, "'in' requires an object", ), ;, if, (, rightType, ., isStruct, (, ), ), {, report, (]
[n, ,, rightType, ,, "'in' requires an object", ), ;, if, (, rightType, ., isStruct, (, ), ), {, report, (, t, ,]
[rightType, ,, "'in' requires an object", ), ;, if, (, rightType, ., isStruct, (, ), ), {, report, (, t, ,, right, ,]
[;, if, (, rightType, ., isStruct, (, ), ), {, report, (, t, ,, right, ,, IN_USED_WITH_STRUCT, ), ;, }]
[(, rightType, ., isStruct, (, ), ), {, report, (, t, ,, right, ,, IN_USED_WITH_STRUCT, ), ;, }, ensureTyped, (]
[., isStruct, (, ), ), {, report, (, t, ,, right, ,, IN_USED_WITH_STRUCT, ), ;, }, ensureTyped, (, t, ,]
[(, ), ), {, report, (, t, ,, right, ,, IN_USED_WITH_STRUCT, ), ;, }, ensureTyped, (, t, ,, n, ,]
[t, ,, right, ,, IN_USED_WITH_STRUCT, ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[t, ,, right, ,, IN_USED_WITH_STRUCT, ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[IN_USED_WITH_STRUCT, ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., INSTANCEOF, :]
[;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., INSTANCEOF, :, left, =]
[;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., INSTANCEOF, :, left, =]
[n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., INSTANCEOF, :, left, =, n, ., getFirstChild, (, ), ;]
[BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., INSTANCEOF, :, left, =, n, ., getFirstChild, (, ), ;, right, =]
[BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., INSTANCEOF, :, left, =, n, ., getFirstChild, (, ), ;, right, =]
[Token, ., INSTANCEOF, :, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;]
[INSTANCEOF, :, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =]
[INSTANCEOF, :, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =]
[left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (]
[;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ., restrictByNotNullOrUndefined, (, ), ;]
[;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ., restrictByNotNullOrUndefined, (, ), ;]
[., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ., restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (]
[(, ), ;, rightType, =, getJSType, (, right, ), ., restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (, t, ,]
[;, rightType, =, getJSType, (, right, ), ., restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (, t, ,, left, ,]
[=, getJSType, (, right, ), ., restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (, t, ,, left, ,, getJSType, (]
[right, ), ., restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (, t, ,, left, ,, getJSType, (, left, ), ,]
[restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (, t, ,, left, ,, getJSType, (, left, ), ,, "deterministic instanceof yields false", ), ;]
[restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (, t, ,, left, ,, getJSType, (, left, ), ,, "deterministic instanceof yields false", ), ;]
[validator, ., expectAnyObject, (, t, ,, left, ,, getJSType, (, left, ), ,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (]
[expectAnyObject, (, t, ,, left, ,, getJSType, (, left, ), ,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (, t, ,]
[t, ,, left, ,, getJSType, (, left, ), ,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (, t, ,, right, ,]
[left, ,, getJSType, (, left, ), ,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (, t, ,, right, ,, rightType, ,]
[(, left, ), ,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (, t, ,, right, ,, rightType, ,, "instanceof requires an object", ), ;]
[), ,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (, t, ,, right, ,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (]
["deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (, t, ,, right, ,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (, t, ,]
[;, validator, ., expectActualObject, (, t, ,, right, ,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (, t, ,, n, ,]
[,, right, ,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[,, right, ,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[,, "instanceof requires an object", ), ;, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., ASSIGN, :]
[), ;, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., ASSIGN, :, visitAssign, (]
[ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., ASSIGN, :, visitAssign, (, t, ,]
[,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., ASSIGN, :, visitAssign, (, t, ,, n, ), ;]
[,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., ASSIGN, :, visitAssign, (, t, ,, n, ), ;, typeable, =]
[;, case, Token, ., ASSIGN, :, visitAssign, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case]
[;, case, Token, ., ASSIGN, :, visitAssign, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case]
[:, visitAssign, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., ASSIGN_LSH, :, case]
[:, visitAssign, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., ASSIGN_LSH, :, case]
[n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[false, ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[false, ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR, :, case]
[Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD, :, case]
[case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL, :]
[., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL, :, checkPropCreation, (]
[:, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL, :, checkPropCreation, (, t, ,]
[:, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL, :, checkPropCreation, (, t, ,]
[., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL, :, checkPropCreation, (, t, ,, n, ., getFirstChild, (, ), ), ;, case]
[., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL, :, checkPropCreation, (, t, ,, n, ., getFirstChild, (, ), ), ;, case]
[., ASSIGN_MUL, :, checkPropCreation, (, t, ,, n, ., getFirstChild, (, ), ), ;, case, Token, ., LSH, :, case]
[., ASSIGN_MUL, :, checkPropCreation, (, t, ,, n, ., getFirstChild, (, ), ), ;, case, Token, ., LSH, :, case]
[t, ,, n, ., getFirstChild, (, ), ), ;, case, Token, ., LSH, :, case, Token, ., RSH, :, case]
[t, ,, n, ., getFirstChild, (, ), ), ;, case, Token, ., LSH, :, case, Token, ., RSH, :, case]
[(, ), ), ;, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case]
[(, ), ), ;, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case]
[Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., DIV, :, case]
[Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., DIV, :, case]
[Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case]
[Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case]
[Token, ., URSH, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITOR, :, case]
[Token, ., URSH, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITOR, :, case]
[Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case]
[Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case]
[Token, ., MOD, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case]
[Token, ., MOD, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case]
[Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., SUB, :, case]
[Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., SUB, :, case]
[Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case]
[Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case]
[case, Token, ., BITAND, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :]
[., BITAND, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, visitBinaryOperator, (]
[., BITAND, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, visitBinaryOperator, (]
[SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, visitBinaryOperator, (, n, ., getType, (, ), ,]
[case, Token, ., ADD, :, case, Token, ., MUL, :, visitBinaryOperator, (, n, ., getType, (, ), ,, t, ,]
[Token, ., MUL, :, visitBinaryOperator, (, n, ., getType, (, ), ,, t, ,, n, ), ;, break, ;, case]
[Token, ., MUL, :, visitBinaryOperator, (, n, ., getType, (, ), ,, t, ,, n, ), ;, break, ;, case]
[visitBinaryOperator, (, n, ., getType, (, ), ,, t, ,, n, ), ;, break, ;, case, Token, ., DELPROP, :]
[n, ., getType, (, ), ,, t, ,, n, ), ;, break, ;, case, Token, ., DELPROP, :, ensureTyped, (]
[getType, (, ), ,, t, ,, n, ), ;, break, ;, case, Token, ., DELPROP, :, ensureTyped, (, t, ,]
[), ,, t, ,, n, ), ;, break, ;, case, Token, ., DELPROP, :, ensureTyped, (, t, ,, n, ,]
[;, break, ;, case, Token, ., DELPROP, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[;, break, ;, case, Token, ., DELPROP, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[:, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., CASE, :, JSType, switchType, =]
[(, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., CASE, :, JSType, switchType, =, getJSType, (]
[(, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., CASE, :, JSType, switchType, =, getJSType, (]
[case, Token, ., CASE, :, JSType, switchType, =, getJSType, (, parent, ., getFirstChild, (, ), ), ;, JSType, caseType, =]
[., CASE, :, JSType, switchType, =, getJSType, (, parent, ., getFirstChild, (, ), ), ;, JSType, caseType, =, getJSType, (]
[., CASE, :, JSType, switchType, =, getJSType, (, parent, ., getFirstChild, (, ), ), ;, JSType, caseType, =, getJSType, (]
[(, parent, ., getFirstChild, (, ), ), ;, JSType, caseType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;]
[(, parent, ., getFirstChild, (, ), ), ;, JSType, caseType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;]
[(, ), ), ;, JSType, caseType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, validator, ., expectSwitchMatchesCase, (]
[), ;, JSType, caseType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, validator, ., expectSwitchMatchesCase, (, t, ,]
[JSType, caseType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, validator, ., expectSwitchMatchesCase, (, t, ,, n, ,]
[=, getJSType, (, n, ., getFirstChild, (, ), ), ;, validator, ., expectSwitchMatchesCase, (, t, ,, n, ,, switchType, ,]
[n, ., getFirstChild, (, ), ), ;, validator, ., expectSwitchMatchesCase, (, t, ,, n, ,, switchType, ,, caseType, ), ;]
[getFirstChild, (, ), ), ;, validator, ., expectSwitchMatchesCase, (, t, ,, n, ,, switchType, ,, caseType, ), ;, typeable, =]
[validator, ., expectSwitchMatchesCase, (, t, ,, n, ,, switchType, ,, caseType, ), ;, typeable, =, false, ;, break, ;, case]
[validator, ., expectSwitchMatchesCase, (, t, ,, n, ,, switchType, ,, caseType, ), ;, typeable, =, false, ;, break, ;, case]
[switchType, ,, caseType, ), ;, typeable, =, false, ;, break, ;, case, Token, ., WITH, :, {, Node, child, =]
[switchType, ,, caseType, ), ;, typeable, =, false, ;, break, ;, case, Token, ., WITH, :, {, Node, child, =]
[=, false, ;, break, ;, case, Token, ., WITH, :, {, Node, child, =, n, ., getFirstChild, (, ), ;]
[;, break, ;, case, Token, ., WITH, :, {, Node, child, =, n, ., getFirstChild, (, ), ;, childType, =]
[;, case, Token, ., WITH, :, {, Node, child, =, n, ., getFirstChild, (, ), ;, childType, =, getJSType, (]
[., WITH, :, {, Node, child, =, n, ., getFirstChild, (, ), ;, childType, =, getJSType, (, child, ), ;]
[., WITH, :, {, Node, child, =, n, ., getFirstChild, (, ), ;, childType, =, getJSType, (, child, ), ;]
[Node, child, =, n, ., getFirstChild, (, ), ;, childType, =, getJSType, (, child, ), ;, validator, ., expectObject, (]
[=, n, ., getFirstChild, (, ), ;, childType, =, getJSType, (, child, ), ;, validator, ., expectObject, (, t, ,]
[., getFirstChild, (, ), ;, childType, =, getJSType, (, child, ), ;, validator, ., expectObject, (, t, ,, child, ,]
[(, ), ;, childType, =, getJSType, (, child, ), ;, validator, ., expectObject, (, t, ,, child, ,, childType, ,]
[childType, =, getJSType, (, child, ), ;, validator, ., expectObject, (, t, ,, child, ,, childType, ,, "with requires an object", ), ;]
[getJSType, (, child, ), ;, validator, ., expectObject, (, t, ,, child, ,, childType, ,, "with requires an object", ), ;, typeable, =]
[., expectObject, (, t, ,, child, ,, childType, ,, "with requires an object", ), ;, typeable, =, false, ;, break, ;, }, case]
[., expectObject, (, t, ,, child, ,, childType, ,, "with requires an object", ), ;, typeable, =, false, ;, break, ;, }, case]
[,, child, ,, childType, ,, "with requires an object", ), ;, typeable, =, false, ;, break, ;, }, case, Token, ., FUNCTION, :]
[,, childType, ,, "with requires an object", ), ;, typeable, =, false, ;, break, ;, }, case, Token, ., FUNCTION, :, visitFunction, (]
[,, "with requires an object", ), ;, typeable, =, false, ;, break, ;, }, case, Token, ., FUNCTION, :, visitFunction, (, t, ,]
[false, ;, break, ;, }, case, Token, ., FUNCTION, :, visitFunction, (, t, ,, n, ), ;, break, ;, case]
[false, ;, break, ;, }, case, Token, ., FUNCTION, :, visitFunction, (, t, ,, n, ), ;, break, ;, case]
[case, Token, ., FUNCTION, :, visitFunction, (, t, ,, n, ), ;, break, ;, case, Token, ., LABEL, :, case]
[case, Token, ., FUNCTION, :, visitFunction, (, t, ,, n, ), ;, break, ;, case, Token, ., LABEL, :, case]
[visitFunction, (, t, ,, n, ), ;, break, ;, case, Token, ., LABEL, :, case, Token, ., LABEL_NAME, :, case]
[visitFunction, (, t, ,, n, ), ;, break, ;, case, Token, ., LABEL, :, case, Token, ., LABEL_NAME, :, case]
[), ;, break, ;, case, Token, ., LABEL, :, case, Token, ., LABEL_NAME, :, case, Token, ., SWITCH, :, case]
[), ;, break, ;, case, Token, ., LABEL, :, case, Token, ., LABEL_NAME, :, case, Token, ., SWITCH, :, case]
[Token, ., LABEL, :, case, Token, ., LABEL_NAME, :, case, Token, ., SWITCH, :, case, Token, ., BREAK, :, case]
[Token, ., LABEL, :, case, Token, ., LABEL_NAME, :, case, Token, ., SWITCH, :, case, Token, ., BREAK, :, case]
[Token, ., LABEL_NAME, :, case, Token, ., SWITCH, :, case, Token, ., BREAK, :, case, Token, ., CATCH, :, case]
[Token, ., LABEL_NAME, :, case, Token, ., SWITCH, :, case, Token, ., BREAK, :, case, Token, ., CATCH, :, case]
[Token, ., SWITCH, :, case, Token, ., BREAK, :, case, Token, ., CATCH, :, case, Token, ., TRY, :, case]
[Token, ., SWITCH, :, case, Token, ., BREAK, :, case, Token, ., CATCH, :, case, Token, ., TRY, :, case]
[Token, ., BREAK, :, case, Token, ., CATCH, :, case, Token, ., TRY, :, case, Token, ., SCRIPT, :, case]
[Token, ., BREAK, :, case, Token, ., CATCH, :, case, Token, ., TRY, :, case, Token, ., SCRIPT, :, case]
[Token, ., CATCH, :, case, Token, ., TRY, :, case, Token, ., SCRIPT, :, case, Token, ., EXPR_RESULT, :, case]
[Token, ., CATCH, :, case, Token, ., TRY, :, case, Token, ., SCRIPT, :, case, Token, ., EXPR_RESULT, :, case]
[Token, ., TRY, :, case, Token, ., SCRIPT, :, case, Token, ., EXPR_RESULT, :, case, Token, ., BLOCK, :, case]
[Token, ., TRY, :, case, Token, ., SCRIPT, :, case, Token, ., EXPR_RESULT, :, case, Token, ., BLOCK, :, case]
[Token, ., SCRIPT, :, case, Token, ., EXPR_RESULT, :, case, Token, ., BLOCK, :, case, Token, ., EMPTY, :, case]
[Token, ., SCRIPT, :, case, Token, ., EXPR_RESULT, :, case, Token, ., BLOCK, :, case, Token, ., EMPTY, :, case]
[Token, ., EXPR_RESULT, :, case, Token, ., BLOCK, :, case, Token, ., EMPTY, :, case, Token, ., DEFAULT_CASE, :, case]
[Token, ., EXPR_RESULT, :, case, Token, ., BLOCK, :, case, Token, ., EMPTY, :, case, Token, ., DEFAULT_CASE, :, case]
[Token, ., BLOCK, :, case, Token, ., EMPTY, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., CONTINUE, :, case]
[Token, ., BLOCK, :, case, Token, ., EMPTY, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., CONTINUE, :, case]
[Token, ., EMPTY, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case]
[Token, ., EMPTY, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case]
[case, Token, ., DEFAULT_CASE, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., THROW, :]
[., DEFAULT_CASE, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., THROW, :, typeable, =]
[., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., THROW, :, typeable, =, false, ;, break, ;, case]
[., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., THROW, :, typeable, =, false, ;, break, ;, case]
[., DEBUGGER, :, case, Token, ., THROW, :, typeable, =, false, ;, break, ;, case, Token, ., DO, :, case]
[., DEBUGGER, :, case, Token, ., THROW, :, typeable, =, false, ;, break, ;, case, Token, ., DO, :, case]
[., THROW, :, typeable, =, false, ;, break, ;, case, Token, ., DO, :, case, Token, ., IF, :, case]
[., THROW, :, typeable, =, false, ;, break, ;, case, Token, ., DO, :, case, Token, ., IF, :, case]
[=, false, ;, break, ;, case, Token, ., DO, :, case, Token, ., IF, :, case, Token, ., WHILE, :]
[;, break, ;, case, Token, ., DO, :, case, Token, ., IF, :, case, Token, ., WHILE, :, typeable, =]
[., DO, :, case, Token, ., IF, :, case, Token, ., WHILE, :, typeable, =, false, ;, break, ;, case]
[., DO, :, case, Token, ., IF, :, case, Token, ., WHILE, :, typeable, =, false, ;, break, ;, case]
[IF, :, case, Token, ., WHILE, :, typeable, =, false, ;, break, ;, case, Token, ., FOR, :, if, (]
[IF, :, case, Token, ., WHILE, :, typeable, =, false, ;, break, ;, case, Token, ., FOR, :, if, (]
[., WHILE, :, typeable, =, false, ;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (]
[break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, n, ), ), {, Node, obj, =]
[break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, n, ), ), {, Node, obj, =]
[., FOR, :, if, (, NodeUtil, ., isForIn, (, n, ), ), {, Node, obj, =, n, ., getChildAtIndex, (]
[NodeUtil, ., isForIn, (, n, ), ), {, Node, obj, =, n, ., getChildAtIndex, (, 1, ), ;, if, (]
[NodeUtil, ., isForIn, (, n, ), ), {, Node, obj, =, n, ., getChildAtIndex, (, 1, ), ;, if, (]
[isForIn, (, n, ), ), {, Node, obj, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, getJSType, (]
[=, n, ., getChildAtIndex, (, 1, ), ;, if, (, getJSType, (, obj, ), ., isStruct, (, ), ), {]
[., getChildAtIndex, (, 1, ), ;, if, (, getJSType, (, obj, ), ., isStruct, (, ), ), {, report, (]
[(, 1, ), ;, if, (, getJSType, (, obj, ), ., isStruct, (, ), ), {, report, (, t, ,]
[), ;, if, (, getJSType, (, obj, ), ., isStruct, (, ), ), {, report, (, t, ,, obj, ,]
[(, obj, ), ., isStruct, (, ), ), {, report, (, t, ,, obj, ,, IN_USED_WITH_STRUCT, ), ;, }, }]
[), ., isStruct, (, ), ), {, report, (, t, ,, obj, ,, IN_USED_WITH_STRUCT, ), ;, }, }, typeable, =]
[), {, report, (, t, ,, obj, ,, IN_USED_WITH_STRUCT, ), ;, }, }, typeable, =, false, ;, break, ;, case]
[), {, report, (, t, ,, obj, ,, IN_USED_WITH_STRUCT, ), ;, }, }, typeable, =, false, ;, break, ;, case]
[,, obj, ,, IN_USED_WITH_STRUCT, ), ;, }, }, typeable, =, false, ;, break, ;, case, Token, ., AND, :, case]
[,, obj, ,, IN_USED_WITH_STRUCT, ), ;, }, }, typeable, =, false, ;, break, ;, case, Token, ., AND, :, case]
[;, }, }, typeable, =, false, ;, break, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case]
[;, }, }, typeable, =, false, ;, break, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case]
[false, ;, break, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case, Token, ., OBJECTLIT, :, case]
[false, ;, break, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case, Token, ., OBJECTLIT, :, case]
[., AND, :, case, Token, ., HOOK, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, if, (]
[., AND, :, case, Token, ., HOOK, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, if, (]
[., AND, :, case, Token, ., HOOK, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, if, (]
[HOOK, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, if, (, n, ., getJSType, (, ), !=]
[Token, ., OBJECTLIT, :, case, Token, ., OR, :, if, (, n, ., getJSType, (, ), !=, null, ), {]
[OBJECTLIT, :, case, Token, ., OR, :, if, (, n, ., getJSType, (, ), !=, null, ), {, ensureTyped, (]
[case, Token, ., OR, :, if, (, n, ., getJSType, (, ), !=, null, ), {, ensureTyped, (, t, ,]
[., getJSType, (, ), !=, null, ), {, ensureTyped, (, t, ,, n, ), ;, }, else, {, if, (]
[., getJSType, (, ), !=, null, ), {, ensureTyped, (, t, ,, n, ), ;, }, else, {, if, (]
[getJSType, (, ), !=, null, ), {, ensureTyped, (, t, ,, n, ), ;, }, else, {, if, (, (]
[getJSType, (, ), !=, null, ), {, ensureTyped, (, t, ,, n, ), ;, }, else, {, if, (, (]
[ensureTyped, (, t, ,, n, ), ;, }, else, {, if, (, (, n, ., isObjectLit, (, ), ), &&]
[(, t, ,, n, ), ;, }, else, {, if, (, (, n, ., isObjectLit, (, ), ), &&, (]
[(, t, ,, n, ), ;, }, else, {, if, (, (, n, ., isObjectLit, (, ), ), &&, (]
[(, t, ,, n, ), ;, }, else, {, if, (, (, n, ., isObjectLit, (, ), ), &&, (]
[(, (, n, ., isObjectLit, (, ), ), &&, (, parent, ., getJSType, (, ), instanceof, EnumType, ), ), {]
[n, ., isObjectLit, (, ), ), &&, (, parent, ., getJSType, (, ), instanceof, EnumType, ), ), {, ensureTyped, (]
[isObjectLit, (, ), ), &&, (, parent, ., getJSType, (, ), instanceof, EnumType, ), ), {, ensureTyped, (, t, ,]
[), ), &&, (, parent, ., getJSType, (, ), instanceof, EnumType, ), ), {, ensureTyped, (, t, ,, n, ,]
[), ), &&, (, parent, ., getJSType, (, ), instanceof, EnumType, ), ), {, ensureTyped, (, t, ,, n, ,]
[EnumType, ), ), {, ensureTyped, (, t, ,, n, ,, parent, ., getJSType, (, ), ), ;, }, else, {]
[), {, ensureTyped, (, t, ,, n, ,, parent, ., getJSType, (, ), ), ;, }, else, {, ensureTyped, (]
[ensureTyped, (, t, ,, n, ,, parent, ., getJSType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,]
[., getJSType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, if, (]
[., getJSType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, if, (]
[(, t, ,, n, ), ;, }, }, if, (, n, ., isObjectLit, (, ), ), {, JSType, typ, =]
[,, n, ), ;, }, }, if, (, n, ., isObjectLit, (, ), ), {, JSType, typ, =, getJSType, (]
[n, ., isObjectLit, (, ), ), {, JSType, typ, =, getJSType, (, n, ), ;, for, (, Node, key, :]
[n, ., isObjectLit, (, ), ), {, JSType, typ, =, getJSType, (, n, ), ;, for, (, Node, key, :]
[JSType, typ, =, getJSType, (, n, ), ;, for, (, Node, key, :, n, ., children, (, ), ), {]
[=, getJSType, (, n, ), ;, for, (, Node, key, :, n, ., children, (, ), ), {, visitObjLitKey, (]
[(, n, ), ;, for, (, Node, key, :, n, ., children, (, ), ), {, visitObjLitKey, (, t, ,]
[), ;, for, (, Node, key, :, n, ., children, (, ), ), {, visitObjLitKey, (, t, ,, key, ,]
[for, (, Node, key, :, n, ., children, (, ), ), {, visitObjLitKey, (, t, ,, key, ,, n, ,]
[), ), {, visitObjLitKey, (, t, ,, key, ,, n, ,, typ, ), ;, }, }, break, ;, default, :]
[{, visitObjLitKey, (, t, ,, key, ,, n, ,, typ, ), ;, }, }, break, ;, default, :, report, (]
[(, t, ,, key, ,, n, ,, typ, ), ;, }, }, break, ;, default, :, report, (, t, ,]
[,, key, ,, n, ,, typ, ), ;, }, }, break, ;, default, :, report, (, t, ,, n, ,]
[,, n, ,, typ, ), ;, }, }, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,]
[,, n, ,, typ, ), ;, }, }, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,]
[), ;, }, }, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (]
[), ;, }, }, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (]
[report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (, n, ., getType, (, ), ), ), ;]
[t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (, n, ., getType, (, ), ), ), ;, ensureTyped, (]
[n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (, n, ., getType, (, ), ), ), ;, ensureTyped, (, t, ,]
[name, (, n, ., getType, (, ), ), ), ;, ensureTyped, (, t, ,, n, ), ;, break, ;, }]
[n, ., getType, (, ), ), ), ;, ensureTyped, (, t, ,, n, ), ;, break, ;, }, typeable, =]
[n, ., getType, (, ), ), ), ;, ensureTyped, (, t, ,, n, ), ;, break, ;, }, typeable, =]
[getType, (, ), ), ), ;, ensureTyped, (, t, ,, n, ), ;, break, ;, }, typeable, =, typeable, &&]
[(, ), ), ), ;, ensureTyped, (, t, ,, n, ), ;, break, ;, }, typeable, =, typeable, &&, !]
[;, ensureTyped, (, t, ,, n, ), ;, break, ;, }, typeable, =, typeable, &&, !, inExterns, ;, if, (]
[t, ,, n, ), ;, break, ;, }, typeable, =, typeable, &&, !, inExterns, ;, if, (, typeable, ), {]
[n, ), ;, break, ;, }, typeable, =, typeable, &&, !, inExterns, ;, if, (, typeable, ), {, doPercentTypedAccounting, (]
[;, break, ;, }, typeable, =, typeable, &&, !, inExterns, ;, if, (, typeable, ), {, doPercentTypedAccounting, (, t, ,]
[typeable, =, typeable, &&, !, inExterns, ;, if, (, typeable, ), {, doPercentTypedAccounting, (, t, ,, n, ), ;, }]
[typeable, &&, !, inExterns, ;, if, (, typeable, ), {, doPercentTypedAccounting, (, t, ,, n, ), ;, }, checkNoTypeCheckSection, (]
[!, inExterns, ;, if, (, typeable, ), {, doPercentTypedAccounting, (, t, ,, n, ), ;, }, checkNoTypeCheckSection, (, n, ,]
[false, ), ;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (]
[), ;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !]
[;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !, (]
[;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !, (]
[;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !, (]
[;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !, (]
[;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !, (]
[;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !, (]
[;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !, (]
[;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !, (]
[checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !, (, s, ., equals, (]
[t, ,, Node, n, ,, String, s, ), {, if, (, !, (, s, ., equals, (, "number", ), ||]
[t, ,, Node, n, ,, String, s, ), {, if, (, !, (, s, ., equals, (, "number", ), ||]
[,, String, s, ), {, if, (, !, (, s, ., equals, (, "number", ), ||, s, ., equals, (]
[), {, if, (, !, (, s, ., equals, (, "number", ), ||, s, ., equals, (, "string", ), ||]
[), {, if, (, !, (, s, ., equals, (, "number", ), ||, s, ., equals, (, "string", ), ||]
[!, (, s, ., equals, (, "number", ), ||, s, ., equals, (, "string", ), ||, s, ., equals, (]
[., equals, (, "number", ), ||, s, ., equals, (, "string", ), ||, s, ., equals, (, "boolean", ), ||]
[., equals, (, "number", ), ||, s, ., equals, (, "string", ), ||, s, ., equals, (, "boolean", ), ||]
[), ||, s, ., equals, (, "string", ), ||, s, ., equals, (, "boolean", ), ||, s, ., equals, (]
[., equals, (, "string", ), ||, s, ., equals, (, "boolean", ), ||, s, ., equals, (, "undefined", ), ||]
[., equals, (, "string", ), ||, s, ., equals, (, "boolean", ), ||, s, ., equals, (, "undefined", ), ||]
[), ||, s, ., equals, (, "boolean", ), ||, s, ., equals, (, "undefined", ), ||, s, ., equals, (]
[., equals, (, "boolean", ), ||, s, ., equals, (, "undefined", ), ||, s, ., equals, (, "function", ), ||]
[., equals, (, "boolean", ), ||, s, ., equals, (, "undefined", ), ||, s, ., equals, (, "function", ), ||]
[), ||, s, ., equals, (, "undefined", ), ||, s, ., equals, (, "function", ), ||, s, ., equals, (]
[., equals, (, "undefined", ), ||, s, ., equals, (, "function", ), ||, s, ., equals, (, "object", ), ||]
[., equals, (, "undefined", ), ||, s, ., equals, (, "function", ), ||, s, ., equals, (, "object", ), ||]
[), ||, s, ., equals, (, "function", ), ||, s, ., equals, (, "object", ), ||, s, ., equals, (]
[(, "function", ), ||, s, ., equals, (, "object", ), ||, s, ., equals, (, "unknown", ), ), ), {]
[(, "function", ), ||, s, ., equals, (, "object", ), ||, s, ., equals, (, "unknown", ), ), ), {]
[s, ., equals, (, "object", ), ||, s, ., equals, (, "unknown", ), ), ), {, validator, ., expectValidTypeofName, (]
[equals, (, "object", ), ||, s, ., equals, (, "unknown", ), ), ), {, validator, ., expectValidTypeofName, (, t, ,]
["object", ), ||, s, ., equals, (, "unknown", ), ), ), {, validator, ., expectValidTypeofName, (, t, ,, n, ,]
[,, s, ), ;, }, }, private, void, doPercentTypedAccounting, (, NodeTraversal, t, ,, Node, n, ), {, JSType, type, =]
[,, s, ), ;, }, }, private, void, doPercentTypedAccounting, (, NodeTraversal, t, ,, Node, n, ), {, JSType, type, =]
[doPercentTypedAccounting, (, NodeTraversal, t, ,, Node, n, ), {, JSType, type, =, n, ., getJSType, (, ), ;, if, (]
[doPercentTypedAccounting, (, NodeTraversal, t, ,, Node, n, ), {, JSType, type, =, n, ., getJSType, (, ), ;, if, (]
[NodeTraversal, t, ,, Node, n, ), {, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==]
[Node, n, ), {, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==, null, ), {]
[Node, n, ), {, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==, null, ), {]
[n, ., getJSType, (, ), ;, if, (, type, ==, null, ), {, nullCount, ++, ;, }, else, if, (]
[n, ., getJSType, (, ), ;, if, (, type, ==, null, ), {, nullCount, ++, ;, }, else, if, (]
[==, null, ), {, nullCount, ++, ;, }, else, if, (, type, ., isUnknownType, (, ), ), {, if, (]
[==, null, ), {, nullCount, ++, ;, }, else, if, (, type, ., isUnknownType, (, ), ), {, if, (]
[}, else, if, (, type, ., isUnknownType, (, ), ), {, if, (, reportUnknownTypes, ., isOn, (, ), ), {]
[}, else, if, (, type, ., isUnknownType, (, ), ), {, if, (, reportUnknownTypes, ., isOn, (, ), ), {]
[type, ., isUnknownType, (, ), ), {, if, (, reportUnknownTypes, ., isOn, (, ), ), {, compiler, ., report, (]
[type, ., isUnknownType, (, ), ), {, if, (, reportUnknownTypes, ., isOn, (, ), ), {, compiler, ., report, (]
[), ), {, if, (, reportUnknownTypes, ., isOn, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[{, if, (, reportUnknownTypes, ., isOn, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[(, reportUnknownTypes, ., isOn, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportUnknownTypes, ,]
[), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportUnknownTypes, ,, UNKNOWN_EXPR_TYPE, ), ), ;, }]
[), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportUnknownTypes, ,, UNKNOWN_EXPR_TYPE, ), ), ;, }]
[(, t, ., makeError, (, n, ,, reportUnknownTypes, ,, UNKNOWN_EXPR_TYPE, ), ), ;, }, unknownCount, ++, ;, }, else, {]
[(, t, ., makeError, (, n, ,, reportUnknownTypes, ,, UNKNOWN_EXPR_TYPE, ), ), ;, }, unknownCount, ++, ;, }, else, {]
[{, typedCount, ++, ;, }, }, private, void, visitAssign, (, NodeTraversal, t, ,, Node, assign, ), {, JSDocInfo, info, =]
[{, typedCount, ++, ;, }, }, private, void, visitAssign, (, NodeTraversal, t, ,, Node, assign, ), {, JSDocInfo, info, =]
[(, NodeTraversal, t, ,, Node, assign, ), {, JSDocInfo, info, =, assign, ., getJSDocInfo, (, ), ;, Node, lvalue, =]
[(, NodeTraversal, t, ,, Node, assign, ), {, JSDocInfo, info, =, assign, ., getJSDocInfo, (, ), ;, Node, lvalue, =]
[info, =, assign, ., getJSDocInfo, (, ), ;, Node, lvalue, =, assign, ., getFirstChild, (, ), ;, Node, rvalue, =]
[info, =, assign, ., getJSDocInfo, (, ), ;, Node, lvalue, =, assign, ., getFirstChild, (, ), ;, Node, rvalue, =]
[Node, lvalue, =, assign, ., getFirstChild, (, ), ;, Node, rvalue, =, assign, ., getLastChild, (, ), ;, if, (]
[Node, lvalue, =, assign, ., getFirstChild, (, ), ;, Node, rvalue, =, assign, ., getLastChild, (, ), ;, if, (]
[rvalue, =, assign, ., getLastChild, (, ), ;, if, (, lvalue, ., isGetProp, (, ), ), {, Node, object, =]
[rvalue, =, assign, ., getLastChild, (, ), ;, if, (, lvalue, ., isGetProp, (, ), ), {, Node, object, =]
[(, lvalue, ., isGetProp, (, ), ), {, Node, object, =, lvalue, ., getFirstChild, (, ), ;, JSType, objectJsType, =]
[., isGetProp, (, ), ), {, Node, object, =, lvalue, ., getFirstChild, (, ), ;, JSType, objectJsType, =, getJSType, (]
[Node, object, =, lvalue, ., getFirstChild, (, ), ;, JSType, objectJsType, =, getJSType, (, object, ), ;, Node, property, =]
[Node, object, =, lvalue, ., getFirstChild, (, ), ;, JSType, objectJsType, =, getJSType, (, object, ), ;, Node, property, =]
[JSType, objectJsType, =, getJSType, (, object, ), ;, Node, property, =, lvalue, ., getLastChild, (, ), ;, String, pname, =]
[JSType, objectJsType, =, getJSType, (, object, ), ;, Node, property, =, lvalue, ., getLastChild, (, ), ;, String, pname, =]
[Node, property, =, lvalue, ., getLastChild, (, ), ;, String, pname, =, property, ., getString, (, ), ;, if, (]
[Node, property, =, lvalue, ., getLastChild, (, ), ;, String, pname, =, property, ., getString, (, ), ;, if, (]
[pname, =, property, ., getString, (, ), ;, if, (, object, ., isGetProp, (, ), ), {, JSType, jsType, =]
[property, ., getString, (, ), ;, if, (, object, ., isGetProp, (, ), ), {, JSType, jsType, =, getJSType, (]
[property, ., getString, (, ), ;, if, (, object, ., isGetProp, (, ), ), {, JSType, jsType, =, getJSType, (]
[., isGetProp, (, ), ), {, JSType, jsType, =, getJSType, (, object, ., getFirstChild, (, ), ), ;, if, (]
[., isGetProp, (, ), ), {, JSType, jsType, =, getJSType, (, object, ., getFirstChild, (, ), ), ;, if, (]
[., isGetProp, (, ), ), {, JSType, jsType, =, getJSType, (, object, ., getFirstChild, (, ), ), ;, if, (]
[JSType, jsType, =, getJSType, (, object, ., getFirstChild, (, ), ), ;, if, (, jsType, ., isInterface, (, ), &&]
[JSType, jsType, =, getJSType, (, object, ., getFirstChild, (, ), ), ;, if, (, jsType, ., isInterface, (, ), &&]
[JSType, jsType, =, getJSType, (, object, ., getFirstChild, (, ), ), ;, if, (, jsType, ., isInterface, (, ), &&]
[JSType, jsType, =, getJSType, (, object, ., getFirstChild, (, ), ), ;, if, (, jsType, ., isInterface, (, ), &&]
[if, (, jsType, ., isInterface, (, ), &&, object, ., getLastChild, (, ), ., getString, (, ), ., equals, (]
[isInterface, (, ), &&, object, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ), {]
[), &&, object, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ), {, visitInterfaceGetprop, (]
[object, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ), {, visitInterfaceGetprop, (, t, ,]
[getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ), {, visitInterfaceGetprop, (, t, ,, assign, ,]
[), ., getString, (, ), ., equals, (, "prototype", ), ), {, visitInterfaceGetprop, (, t, ,, assign, ,, object, ,]
[getString, (, ), ., equals, (, "prototype", ), ), {, visitInterfaceGetprop, (, t, ,, assign, ,, object, ,, pname, ,]
[), ., equals, (, "prototype", ), ), {, visitInterfaceGetprop, (, t, ,, assign, ,, object, ,, pname, ,, lvalue, ,]
[), ), {, visitInterfaceGetprop, (, t, ,, assign, ,, object, ,, pname, ,, lvalue, ,, rvalue, ), ;, }, }]
[{, visitInterfaceGetprop, (, t, ,, assign, ,, object, ,, pname, ,, lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias, (]
[(, t, ,, assign, ,, object, ,, pname, ,, lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias, (, t, ,]
[,, assign, ,, object, ,, pname, ,, lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias, (, t, ,, info, ,]
[object, ,, pname, ,, lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias, (, t, ,, info, ,, rvalue, ), ;]
[pname, ,, lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias, (, t, ,, info, ,, rvalue, ), ;, checkPropCreation, (]
[lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias, (, t, ,, info, ,, rvalue, ), ;, checkPropCreation, (, t, ,]
[}, }, checkEnumAlias, (, t, ,, info, ,, rvalue, ), ;, checkPropCreation, (, t, ,, lvalue, ), ;, if, (]
[}, }, checkEnumAlias, (, t, ,, info, ,, rvalue, ), ;, checkPropCreation, (, t, ,, lvalue, ), ;, if, (]
[t, ,, info, ,, rvalue, ), ;, checkPropCreation, (, t, ,, lvalue, ), ;, if, (, pname, ., equals, (]
[;, checkPropCreation, (, t, ,, lvalue, ), ;, if, (, pname, ., equals, (, "prototype", ), ), {, if, (]
[;, checkPropCreation, (, t, ,, lvalue, ), ;, if, (, pname, ., equals, (, "prototype", ), ), {, if, (]
[;, checkPropCreation, (, t, ,, lvalue, ), ;, if, (, pname, ., equals, (, "prototype", ), ), {, if, (]
[(, t, ,, lvalue, ), ;, if, (, pname, ., equals, (, "prototype", ), ), {, if, (, objectJsType, !=]
[,, lvalue, ), ;, if, (, pname, ., equals, (, "prototype", ), ), {, if, (, objectJsType, !=, null, &&]
[,, lvalue, ), ;, if, (, pname, ., equals, (, "prototype", ), ), {, if, (, objectJsType, !=, null, &&]
["prototype", ), ), {, if, (, objectJsType, !=, null, &&, objectJsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =]
["prototype", ), ), {, if, (, objectJsType, !=, null, &&, objectJsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =]
[null, &&, objectJsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, objectJsType, ., toMaybeFunctionType, (, ), ;, if, (]
[null, &&, objectJsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, objectJsType, ., toMaybeFunctionType, (, ), ;, if, (]
[functionType, =, objectJsType, ., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor, (, ), ), {, JSType, rvalueType, =]
[functionType, =, objectJsType, ., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor, (, ), ), {, JSType, rvalueType, =]
[), ;, if, (, functionType, ., isConstructor, (, ), ), {, JSType, rvalueType, =, rvalue, ., getJSType, (, ), ;]
[), ;, if, (, functionType, ., isConstructor, (, ), ), {, JSType, rvalueType, =, rvalue, ., getJSType, (, ), ;]
[functionType, ., isConstructor, (, ), ), {, JSType, rvalueType, =, rvalue, ., getJSType, (, ), ;, validator, ., expectObject, (]
[isConstructor, (, ), ), {, JSType, rvalueType, =, rvalue, ., getJSType, (, ), ;, validator, ., expectObject, (, t, ,]
[), ), {, JSType, rvalueType, =, rvalue, ., getJSType, (, ), ;, validator, ., expectObject, (, t, ,, rvalue, ,]
[{, JSType, rvalueType, =, rvalue, ., getJSType, (, ), ;, validator, ., expectObject, (, t, ,, rvalue, ,, rvalueType, ,]
[., getJSType, (, ), ;, validator, ., expectObject, (, t, ,, rvalue, ,, rvalueType, ,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (]
[., getJSType, (, ), ;, validator, ., expectObject, (, t, ,, rvalue, ,, rvalueType, ,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (]
[., getJSType, (, ), ;, validator, ., expectObject, (, t, ,, rvalue, ,, rvalueType, ,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (]
[., expectObject, (, t, ,, rvalue, ,, rvalueType, ,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (, functionType, ., makesStructs, (, ), &&]
[expectObject, (, t, ,, rvalue, ,, rvalueType, ,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !]
[expectObject, (, t, ,, rvalue, ,, rvalueType, ,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !]
[;, if, (, functionType, ., makesStructs, (, ), &&, !, rvalueType, ., isStruct, (, ), ), {, String, funName, =]
[;, if, (, functionType, ., makesStructs, (, ), &&, !, rvalueType, ., isStruct, (, ), ), {, String, funName, =]
[;, if, (, functionType, ., makesStructs, (, ), &&, !, rvalueType, ., isStruct, (, ), ), {, String, funName, =]
[rvalueType, ., isStruct, (, ), ), {, String, funName, =, functionType, ., getTypeOfThis, (, ), ., toString, (, ), ;]
[rvalueType, ., isStruct, (, ), ), {, String, funName, =, functionType, ., getTypeOfThis, (, ), ., toString, (, ), ;]
[), ), {, String, funName, =, functionType, ., getTypeOfThis, (, ), ., toString, (, ), ;, compiler, ., report, (]
[), ), {, String, funName, =, functionType, ., getTypeOfThis, (, ), ., toString, (, ), ;, compiler, ., report, (]
[funName, =, functionType, ., getTypeOfThis, (, ), ., toString, (, ), ;, compiler, ., report, (, t, ., makeError, (]
[functionType, ., getTypeOfThis, (, ), ., toString, (, ), ;, compiler, ., report, (, t, ., makeError, (, assign, ,]
[getTypeOfThis, (, ), ., toString, (, ), ;, compiler, ., report, (, t, ., makeError, (, assign, ,, CONFLICTING_EXTENDED_TYPE, ,]
[), ., toString, (, ), ;, compiler, ., report, (, t, ., makeError, (, assign, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,]
[(, assign, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, funName, ), ), ;, }, return, ;, }, }, }, ObjectType, type, =]
[(, assign, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, funName, ), ), ;, }, return, ;, }, }, }, ObjectType, type, =]
[,, "struct", ,, funName, ), ), ;, }, return, ;, }, }, }, ObjectType, type, =, ObjectType, ., cast, (]
[,, "struct", ,, funName, ), ), ;, }, return, ;, }, }, }, ObjectType, type, =, ObjectType, ., cast, (]
[;, }, }, }, ObjectType, type, =, ObjectType, ., cast, (, objectJsType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (]
[;, }, }, }, ObjectType, type, =, ObjectType, ., cast, (, objectJsType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (]
[}, }, ObjectType, type, =, ObjectType, ., cast, (, objectJsType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=]
[ObjectType, ., cast, (, objectJsType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, if, (]
[ObjectType, ., cast, (, objectJsType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, if, (]
[ObjectType, ., cast, (, objectJsType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, if, (]
[ObjectType, ., cast, (, objectJsType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, if, (]
[objectJsType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, if, (, type, ., hasProperty, (]
[(, ), ), ;, if, (, type, !=, null, ), {, if, (, type, ., hasProperty, (, pname, ), &&]
[), ), ;, if, (, type, !=, null, ), {, if, (, type, ., hasProperty, (, pname, ), &&, !]
[), ), ;, if, (, type, !=, null, ), {, if, (, type, ., hasProperty, (, pname, ), &&, !]
[(, type, !=, null, ), {, if, (, type, ., hasProperty, (, pname, ), &&, !, type, ., isPropertyTypeInferred, (]
[null, ), {, if, (, type, ., hasProperty, (, pname, ), &&, !, type, ., isPropertyTypeInferred, (, pname, ), &&]
[), {, if, (, type, ., hasProperty, (, pname, ), &&, !, type, ., isPropertyTypeInferred, (, pname, ), &&, !]
[if, (, type, ., hasProperty, (, pname, ), &&, !, type, ., isPropertyTypeInferred, (, pname, ), &&, !, propertyIsImplicitCast, (]
[type, ., hasProperty, (, pname, ), &&, !, type, ., isPropertyTypeInferred, (, pname, ), &&, !, propertyIsImplicitCast, (, type, ,]
[!, type, ., isPropertyTypeInferred, (, pname, ), &&, !, propertyIsImplicitCast, (, type, ,, pname, ), ), {, JSType, expectedType, =]
[!, type, ., isPropertyTypeInferred, (, pname, ), &&, !, propertyIsImplicitCast, (, type, ,, pname, ), ), {, JSType, expectedType, =]
[(, pname, ), &&, !, propertyIsImplicitCast, (, type, ,, pname, ), ), {, JSType, expectedType, =, type, ., getPropertyType, (]
[propertyIsImplicitCast, (, type, ,, pname, ), ), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;, if, (]
[(, type, ,, pname, ), ), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;, if, (, !]
[(, type, ,, pname, ), ), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;, if, (, !]
[JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;, if, (, !, expectedType, ., isUnknownType, (, ), ), {]
[JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;, if, (, !, expectedType, ., isUnknownType, (, ), ), {]
[., getPropertyType, (, pname, ), ;, if, (, !, expectedType, ., isUnknownType, (, ), ), {, validator, ., expectCanAssignToPropertyOf, (]
[(, pname, ), ;, if, (, !, expectedType, ., isUnknownType, (, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,]
[), ;, if, (, !, expectedType, ., isUnknownType, (, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, assign, ,]
[if, (, !, expectedType, ., isUnknownType, (, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, assign, ,, getJSType, (]
[expectedType, ., isUnknownType, (, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, assign, ,, getJSType, (, rvalue, ), ,]
[isUnknownType, (, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, assign, ,, getJSType, (, rvalue, ), ,, expectedType, ,]
[), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, assign, ,, getJSType, (, rvalue, ), ,, expectedType, ,, object, ,]
[validator, ., expectCanAssignToPropertyOf, (, t, ,, assign, ,, getJSType, (, rvalue, ), ,, expectedType, ,, object, ,, pname, ), ;]
[expectCanAssignToPropertyOf, (, t, ,, assign, ,, getJSType, (, rvalue, ), ,, expectedType, ,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (]
[t, ,, assign, ,, getJSType, (, rvalue, ), ,, expectedType, ,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,]
[assign, ,, getJSType, (, rvalue, ), ,, expectedType, ,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,]
[getJSType, (, rvalue, ), ,, expectedType, ,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,]
[rvalue, ), ,, expectedType, ,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,]
[,, expectedType, ,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info, ,]
[checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info, ,, expectedType, ), ;, return, ;, }, }, }]
[t, ,, assign, ,, object, ,, pname, ,, info, ,, expectedType, ), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (]
[assign, ,, object, ,, pname, ,, info, ,, expectedType, ), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,]
[object, ,, pname, ,, info, ,, expectedType, ), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,]
[pname, ,, info, ,, expectedType, ), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,]
[info, ,, expectedType, ), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,]
[expectedType, ), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info, ,]
[;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info, ,, getNativeType, (]
[t, ,, assign, ,, object, ,, pname, ,, info, ,, getNativeType, (, UNKNOWN_TYPE, ), ), ;, }, JSType, leftType, =]
[assign, ,, object, ,, pname, ,, info, ,, getNativeType, (, UNKNOWN_TYPE, ), ), ;, }, JSType, leftType, =, getJSType, (]
[,, info, ,, getNativeType, (, UNKNOWN_TYPE, ), ), ;, }, JSType, leftType, =, getJSType, (, lvalue, ), ;, if, (]
[,, info, ,, getNativeType, (, UNKNOWN_TYPE, ), ), ;, }, JSType, leftType, =, getJSType, (, lvalue, ), ;, if, (]
[JSType, leftType, =, getJSType, (, lvalue, ), ;, if, (, lvalue, ., isQualifiedName, (, ), ), {, JSType, rvalueType, =]
[=, getJSType, (, lvalue, ), ;, if, (, lvalue, ., isQualifiedName, (, ), ), {, JSType, rvalueType, =, getJSType, (]
[=, getJSType, (, lvalue, ), ;, if, (, lvalue, ., isQualifiedName, (, ), ), {, JSType, rvalueType, =, getJSType, (]
[isQualifiedName, (, ), ), {, JSType, rvalueType, =, getJSType, (, assign, ., getLastChild, (, ), ), ;, Var, var, =]
[isQualifiedName, (, ), ), {, JSType, rvalueType, =, getJSType, (, assign, ., getLastChild, (, ), ), ;, Var, var, =]
[isQualifiedName, (, ), ), {, JSType, rvalueType, =, getJSType, (, assign, ., getLastChild, (, ), ), ;, Var, var, =]
[getJSType, (, assign, ., getLastChild, (, ), ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[getJSType, (, assign, ., getLastChild, (, ), ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, lvalue, ., getQualifiedName, (, ), ), ;, if, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, lvalue, ., getQualifiedName, (, ), ), ;, if, (]
[=, t, ., getScope, (, ), ., getVar, (, lvalue, ., getQualifiedName, (, ), ), ;, if, (, var, !=]
[), ., getVar, (, lvalue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, ), {, if, (]
[), ., getVar, (, lvalue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, ), {, if, (]
[(, var, !=, null, ), {, if, (, var, ., isTypeInferred, (, ), ), {, return, ;, }, if, (]
[(, var, !=, null, ), {, if, (, var, ., isTypeInferred, (, ), ), {, return, ;, }, if, (]
[(, var, !=, null, ), {, if, (, var, ., isTypeInferred, (, ), ), {, return, ;, }, if, (]
[(, var, !=, null, ), {, if, (, var, ., isTypeInferred, (, ), ), {, return, ;, }, if, (]
[), {, if, (, var, ., isTypeInferred, (, ), ), {, return, ;, }, if, (, NodeUtil, ., getRootOfQualifiedName, (]
[(, ), ), {, return, ;, }, if, (, NodeUtil, ., getRootOfQualifiedName, (, lvalue, ), ., isThis, (, ), &&]
[(, ), ), {, return, ;, }, if, (, NodeUtil, ., getRootOfQualifiedName, (, lvalue, ), ., isThis, (, ), &&]
[(, ), ), {, return, ;, }, if, (, NodeUtil, ., getRootOfQualifiedName, (, lvalue, ), ., isThis, (, ), &&]
[}, if, (, NodeUtil, ., getRootOfQualifiedName, (, lvalue, ), ., isThis, (, ), &&, t, ., getScope, (, ), !=]
[}, if, (, NodeUtil, ., getRootOfQualifiedName, (, lvalue, ), ., isThis, (, ), &&, t, ., getScope, (, ), !=]
[), &&, t, ., getScope, (, ), !=, var, ., getScope, (, ), ), {, return, ;, }, if, (]
[), &&, t, ., getScope, (, ), !=, var, ., getScope, (, ), ), {, return, ;, }, if, (]
[), &&, t, ., getScope, (, ), !=, var, ., getScope, (, ), ), {, return, ;, }, if, (]
[), !=, var, ., getScope, (, ), ), {, return, ;, }, if, (, var, ., getType, (, ), !=]
[., getScope, (, ), ), {, return, ;, }, if, (, var, ., getType, (, ), !=, null, ), {]
[(, ), ), {, return, ;, }, if, (, var, ., getType, (, ), !=, null, ), {, leftType, =]
[(, ), ), {, return, ;, }, if, (, var, ., getType, (, ), !=, null, ), {, leftType, =]
[(, ), !=, null, ), {, leftType, =, var, ., getType, (, ), ;, }, }, }, Node, rightChild, =]
[(, ), !=, null, ), {, leftType, =, var, ., getType, (, ), ;, }, }, }, Node, rightChild, =]
[., getType, (, ), ;, }, }, }, Node, rightChild, =, assign, ., getLastChild, (, ), ;, JSType, rightType, =]
[(, ), ;, }, }, }, Node, rightChild, =, assign, ., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (]
[}, Node, rightChild, =, assign, ., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, rightChild, ), ;, if, (]
[}, Node, rightChild, =, assign, ., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, rightChild, ), ;, if, (]
[assign, ., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, rightChild, ), ;, if, (, validator, ., expectCanAssignTo, (]
[getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, rightChild, ), ;, if, (, validator, ., expectCanAssignTo, (, t, ,]
[), ;, JSType, rightType, =, getJSType, (, rightChild, ), ;, if, (, validator, ., expectCanAssignTo, (, t, ,, assign, ,]
[JSType, rightType, =, getJSType, (, rightChild, ), ;, if, (, validator, ., expectCanAssignTo, (, t, ,, assign, ,, rightType, ,]
[=, getJSType, (, rightChild, ), ;, if, (, validator, ., expectCanAssignTo, (, t, ,, assign, ,, rightType, ,, leftType, ,]
[), ;, if, (, validator, ., expectCanAssignTo, (, t, ,, assign, ,, rightType, ,, leftType, ,, "assignment", ), ), {]
[if, (, validator, ., expectCanAssignTo, (, t, ,, assign, ,, rightType, ,, leftType, ,, "assignment", ), ), {, ensureTyped, (]
[validator, ., expectCanAssignTo, (, t, ,, assign, ,, rightType, ,, leftType, ,, "assignment", ), ), {, ensureTyped, (, t, ,]
[expectCanAssignTo, (, t, ,, assign, ,, rightType, ,, leftType, ,, "assignment", ), ), {, ensureTyped, (, t, ,, assign, ,]
[rightType, ,, leftType, ,, "assignment", ), ), {, ensureTyped, (, t, ,, assign, ,, rightType, ), ;, }, else, {]
[leftType, ,, "assignment", ), ), {, ensureTyped, (, t, ,, assign, ,, rightType, ), ;, }, else, {, ensureTyped, (]
["assignment", ), ), {, ensureTyped, (, t, ,, assign, ,, rightType, ), ;, }, else, {, ensureTyped, (, t, ,]
[t, ,, assign, ), ;, }, }, private, void, checkPropCreation, (, NodeTraversal, t, ,, Node, lvalue, ), {, if, (]
[t, ,, assign, ), ;, }, }, private, void, checkPropCreation, (, NodeTraversal, t, ,, Node, lvalue, ), {, if, (]
[(, NodeTraversal, t, ,, Node, lvalue, ), {, if, (, lvalue, ., isGetProp, (, ), ), {, Node, obj, =]
[(, NodeTraversal, t, ,, Node, lvalue, ), {, if, (, lvalue, ., isGetProp, (, ), ), {, Node, obj, =]
[(, lvalue, ., isGetProp, (, ), ), {, Node, obj, =, lvalue, ., getFirstChild, (, ), ;, Node, prop, =]
[(, lvalue, ., isGetProp, (, ), ), {, Node, obj, =, lvalue, ., getFirstChild, (, ), ;, Node, prop, =]
[obj, =, lvalue, ., getFirstChild, (, ), ;, Node, prop, =, lvalue, ., getLastChild, (, ), ;, JSType, objType, =]
[lvalue, ., getFirstChild, (, ), ;, Node, prop, =, lvalue, ., getLastChild, (, ), ;, JSType, objType, =, getJSType, (]
[Node, prop, =, lvalue, ., getLastChild, (, ), ;, JSType, objType, =, getJSType, (, obj, ), ;, String, pname, =]
[Node, prop, =, lvalue, ., getLastChild, (, ), ;, JSType, objType, =, getJSType, (, obj, ), ;, String, pname, =]
[;, JSType, objType, =, getJSType, (, obj, ), ;, String, pname, =, prop, ., getString, (, ), ;, if, (]
[;, JSType, objType, =, getJSType, (, obj, ), ;, String, pname, =, prop, ., getString, (, ), ;, if, (]
[;, JSType, objType, =, getJSType, (, obj, ), ;, String, pname, =, prop, ., getString, (, ), ;, if, (]
[obj, ), ;, String, pname, =, prop, ., getString, (, ), ;, if, (, objType, ., isStruct, (, ), &&]
[), ;, String, pname, =, prop, ., getString, (, ), ;, if, (, objType, ., isStruct, (, ), &&, !]
[), ;, String, pname, =, prop, ., getString, (, ), ;, if, (, objType, ., isStruct, (, ), &&, !]
[=, prop, ., getString, (, ), ;, if, (, objType, ., isStruct, (, ), &&, !, objType, ., hasProperty, (]
[;, if, (, objType, ., isStruct, (, ), &&, !, objType, ., hasProperty, (, pname, ), ), {, if, (]
[if, (, objType, ., isStruct, (, ), &&, !, objType, ., hasProperty, (, pname, ), ), {, if, (, !]
[(, objType, ., isStruct, (, ), &&, !, objType, ., hasProperty, (, pname, ), ), {, if, (, !, (]
[(, objType, ., isStruct, (, ), &&, !, objType, ., hasProperty, (, pname, ), ), {, if, (, !, (]
[(, objType, ., isStruct, (, ), &&, !, objType, ., hasProperty, (, pname, ), ), {, if, (, !, (]
[&&, !, objType, ., hasProperty, (, pname, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&]
[&&, !, objType, ., hasProperty, (, pname, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&]
[objType, ., hasProperty, (, pname, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (]
[objType, ., hasProperty, (, pname, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (]
[objType, ., hasProperty, (, pname, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (]
[&&, getJSType, (, t, ., getScope, (, ), ., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {]
[(, t, ., getScope, (, ), ., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {, report, (]
[., getScope, (, ), ., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {, report, (, t, ,]
[(, ), ., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {, report, (, t, ,, prop, ,]
[t, ,, Node, assign, ,, Node, object, ,, String, property, ,, JSDocInfo, info, ,, JSType, propertyType, ), {, if, (]
[t, ,, Node, assign, ,, Node, object, ,, String, property, ,, JSDocInfo, info, ,, JSType, propertyType, ), {, if, (]
[,, JSDocInfo, info, ,, JSType, propertyType, ), {, if, (, object, ., isGetProp, (, ), ), {, Node, object2, =]
[,, JSDocInfo, info, ,, JSType, propertyType, ), {, if, (, object, ., isGetProp, (, ), ), {, Node, object2, =]
[(, object, ., isGetProp, (, ), ), {, Node, object2, =, object, ., getFirstChild, (, ), ;, String, property2, =]
[(, object, ., isGetProp, (, ), ), {, Node, object2, =, object, ., getFirstChild, (, ), ;, String, property2, =]
[(, ), ), {, Node, object2, =, object, ., getFirstChild, (, ), ;, String, property2, =, NodeUtil, ., getStringValue, (]
[(, ), ), {, Node, object2, =, object, ., getFirstChild, (, ), ;, String, property2, =, NodeUtil, ., getStringValue, (]
[getFirstChild, (, ), ;, String, property2, =, NodeUtil, ., getStringValue, (, object, ., getLastChild, (, ), ), ;, if, (]
[getFirstChild, (, ), ;, String, property2, =, NodeUtil, ., getStringValue, (, object, ., getLastChild, (, ), ), ;, if, (]
[String, property2, =, NodeUtil, ., getStringValue, (, object, ., getLastChild, (, ), ), ;, if, (, "prototype", ., equals, (]
[object, ., getLastChild, (, ), ), ;, if, (, "prototype", ., equals, (, property2, ), ), {, JSType, jsType, =]
[getLastChild, (, ), ), ;, if, (, "prototype", ., equals, (, property2, ), ), {, JSType, jsType, =, getJSType, (]
[if, (, "prototype", ., equals, (, property2, ), ), {, JSType, jsType, =, getJSType, (, object2, ), ;, if, (]
[if, (, "prototype", ., equals, (, property2, ), ), {, JSType, jsType, =, getJSType, (, object2, ), ;, if, (]
[JSType, jsType, =, getJSType, (, object2, ), ;, if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =]
[JSType, jsType, =, getJSType, (, object2, ), ;, if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =]
[if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, if, (]
[if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, if, (]
[if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, if, (]
[), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor, (, ), ||]
[), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor, (, ), ||]
[., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor, (, ), ||, functionType, ., isInterface, (, ), ), {]
[(, ), ;, if, (, functionType, ., isConstructor, (, ), ||, functionType, ., isInterface, (, ), ), {, checkDeclaredPropertyInheritance, (]
[;, if, (, functionType, ., isConstructor, (, ), ||, functionType, ., isInterface, (, ), ), {, checkDeclaredPropertyInheritance, (, t, ,]
[(, functionType, ., isConstructor, (, ), ||, functionType, ., isInterface, (, ), ), {, checkDeclaredPropertyInheritance, (, t, ,, assign, ,]
[., isConstructor, (, ), ||, functionType, ., isInterface, (, ), ), {, checkDeclaredPropertyInheritance, (, t, ,, assign, ,, functionType, ,]
[(, ), ||, functionType, ., isInterface, (, ), ), {, checkDeclaredPropertyInheritance, (, t, ,, assign, ,, functionType, ,, property, ,]
[||, functionType, ., isInterface, (, ), ), {, checkDeclaredPropertyInheritance, (, t, ,, assign, ,, functionType, ,, property, ,, info, ,]
[}, private, void, visitObjLitKey, (, NodeTraversal, t, ,, Node, key, ,, Node, objlit, ,, JSType, litType, ), {, if, (]
[}, private, void, visitObjLitKey, (, NodeTraversal, t, ,, Node, key, ,, Node, objlit, ,, JSType, litType, ), {, if, (]
[,, Node, key, ,, Node, objlit, ,, JSType, litType, ), {, if, (, objlit, ., isFromExterns, (, ), ), {]
[key, ,, Node, objlit, ,, JSType, litType, ), {, if, (, objlit, ., isFromExterns, (, ), ), {, ensureTyped, (]
[Node, objlit, ,, JSType, litType, ), {, if, (, objlit, ., isFromExterns, (, ), ), {, ensureTyped, (, t, ,]
[(, objlit, ., isFromExterns, (, ), ), {, ensureTyped, (, t, ,, key, ), ;, return, ;, }, if, (]
[(, objlit, ., isFromExterns, (, ), ), {, ensureTyped, (, t, ,, key, ), ;, return, ;, }, if, (]
[(, objlit, ., isFromExterns, (, ), ), {, ensureTyped, (, t, ,, key, ), ;, return, ;, }, if, (]
[), {, ensureTyped, (, t, ,, key, ), ;, return, ;, }, if, (, litType, ., isStruct, (, ), &&]
[), {, ensureTyped, (, t, ,, key, ), ;, return, ;, }, if, (, litType, ., isStruct, (, ), &&]
[), ;, return, ;, }, if, (, litType, ., isStruct, (, ), &&, key, ., isQuotedString, (, ), ), {]
[return, ;, }, if, (, litType, ., isStruct, (, ), &&, key, ., isQuotedString, (, ), ), {, report, (]
[}, if, (, litType, ., isStruct, (, ), &&, key, ., isQuotedString, (, ), ), {, report, (, t, ,]
[(, litType, ., isStruct, (, ), &&, key, ., isQuotedString, (, ), ), {, report, (, t, ,, key, ,]
[., isStruct, (, ), &&, key, ., isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,]
[isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }, else, if, (]
[isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }, else, if, (]
[isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }, else, if, (]
[(, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }, else, if, (, litType, ., isDict, (, ), &&]
[t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }, else, if, (, litType, ., isDict, (, ), &&, !]
[t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }, else, if, (, litType, ., isDict, (, ), &&, !]
[), ;, }, else, if, (, litType, ., isDict, (, ), &&, !, key, ., isQuotedString, (, ), ), {]
[}, else, if, (, litType, ., isDict, (, ), &&, !, key, ., isQuotedString, (, ), ), {, report, (]
[if, (, litType, ., isDict, (, ), &&, !, key, ., isQuotedString, (, ), ), {, report, (, t, ,]
[litType, ., isDict, (, ), &&, !, key, ., isQuotedString, (, ), ), {, report, (, t, ,, key, ,]
[isDict, (, ), &&, !, key, ., isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,]
[isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "dict", ), ;, }, Node, rvalue, =]
[isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "dict", ), ;, }, Node, rvalue, =]
[key, ,, ILLEGAL_OBJLIT_KEY, ,, "dict", ), ;, }, Node, rvalue, =, key, ., getFirstChild, (, ), ;, JSType, rightType, =]
[key, ,, ILLEGAL_OBJLIT_KEY, ,, "dict", ), ;, }, Node, rvalue, =, key, ., getFirstChild, (, ), ;, JSType, rightType, =]
["dict", ), ;, }, Node, rvalue, =, key, ., getFirstChild, (, ), ;, JSType, rightType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (]
[;, }, Node, rvalue, =, key, ., getFirstChild, (, ), ;, JSType, rightType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, key, ,]
[Node, rvalue, =, key, ., getFirstChild, (, ), ;, JSType, rightType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, key, ,, getJSType, (]
[(, ), ;, JSType, rightType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, key, ,, getJSType, (, rvalue, ), ), ;, if, (]
[(, ), ;, JSType, rightType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, key, ,, getJSType, (, rvalue, ), ), ;, if, (]
[;, JSType, rightType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, key, ,, getJSType, (, rvalue, ), ), ;, if, (, rightType, ==]
[=, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, key, ,, getJSType, (, rvalue, ), ), ;, if, (, rightType, ==, null, ), {]
[., getObjectLitKeyTypeFromValueType, (, key, ,, getJSType, (, rvalue, ), ), ;, if, (, rightType, ==, null, ), {, rightType, =]
[(, key, ,, getJSType, (, rvalue, ), ), ;, if, (, rightType, ==, null, ), {, rightType, =, getNativeType, (]
[), ;, if, (, rightType, ==, null, ), {, rightType, =, getNativeType, (, UNKNOWN_TYPE, ), ;, }, Node, owner, =]
[==, null, ), {, rightType, =, getNativeType, (, UNKNOWN_TYPE, ), ;, }, Node, owner, =, objlit, ;, JSType, keyType, =]
[), {, rightType, =, getNativeType, (, UNKNOWN_TYPE, ), ;, }, Node, owner, =, objlit, ;, JSType, keyType, =, getJSType, (]
[UNKNOWN_TYPE, ), ;, }, Node, owner, =, objlit, ;, JSType, keyType, =, getJSType, (, key, ), ;, JSType, allowedValueType, =]
[Node, owner, =, objlit, ;, JSType, keyType, =, getJSType, (, key, ), ;, JSType, allowedValueType, =, keyType, ;, if, (]
[Node, owner, =, objlit, ;, JSType, keyType, =, getJSType, (, key, ), ;, JSType, allowedValueType, =, keyType, ;, if, (]
[=, getJSType, (, key, ), ;, JSType, allowedValueType, =, keyType, ;, if, (, allowedValueType, ., isEnumElementType, (, ), ), {]
[(, key, ), ;, JSType, allowedValueType, =, keyType, ;, if, (, allowedValueType, ., isEnumElementType, (, ), ), {, allowedValueType, =]
[(, key, ), ;, JSType, allowedValueType, =, keyType, ;, if, (, allowedValueType, ., isEnumElementType, (, ), ), {, allowedValueType, =]
[(, key, ), ;, JSType, allowedValueType, =, keyType, ;, if, (, allowedValueType, ., isEnumElementType, (, ), ), {, allowedValueType, =]
[(, ), ), {, allowedValueType, =, allowedValueType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ;, }, boolean, valid, =]
[(, ), ), {, allowedValueType, =, allowedValueType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ;, }, boolean, valid, =]
[allowedValueType, =, allowedValueType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ;, }, boolean, valid, =, validator, ., expectCanAssignToPropertyOf, (]
[allowedValueType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ;, }, boolean, valid, =, validator, ., expectCanAssignToPropertyOf, (, t, ,]
[toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ;, }, boolean, valid, =, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,]
[), ., getPrimitiveType, (, ), ;, }, boolean, valid, =, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, rightType, ,]
[getPrimitiveType, (, ), ;, }, boolean, valid, =, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, rightType, ,, allowedValueType, ,]
[), ;, }, boolean, valid, =, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, rightType, ,, allowedValueType, ,, owner, ,]
[), ;, }, boolean, valid, =, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, rightType, ,, allowedValueType, ,, owner, ,]
[valid, =, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, rightType, ,, allowedValueType, ,, owner, ,, NodeUtil, ., getObjectLitKeyName, (]
[t, ,, key, ,, rightType, ,, allowedValueType, ,, owner, ,, NodeUtil, ., getObjectLitKeyName, (, key, ), ), ;, if, (]
[,, rightType, ,, allowedValueType, ,, owner, ,, NodeUtil, ., getObjectLitKeyName, (, key, ), ), ;, if, (, valid, ), {]
[,, allowedValueType, ,, owner, ,, NodeUtil, ., getObjectLitKeyName, (, key, ), ), ;, if, (, valid, ), {, ensureTyped, (]
[,, owner, ,, NodeUtil, ., getObjectLitKeyName, (, key, ), ), ;, if, (, valid, ), {, ensureTyped, (, t, ,]
[,, NodeUtil, ., getObjectLitKeyName, (, key, ), ), ;, if, (, valid, ), {, ensureTyped, (, t, ,, key, ,]
[), ), ;, if, (, valid, ), {, ensureTyped, (, t, ,, key, ,, rightType, ), ;, }, else, {]
[;, if, (, valid, ), {, ensureTyped, (, t, ,, key, ,, rightType, ), ;, }, else, {, ensureTyped, (]
[(, valid, ), {, ensureTyped, (, t, ,, key, ,, rightType, ), ;, }, else, {, ensureTyped, (, t, ,]
[,, key, ,, rightType, ), ;, }, else, {, ensureTyped, (, t, ,, key, ), ;, }, JSType, objlitType, =]
[,, rightType, ), ;, }, else, {, ensureTyped, (, t, ,, key, ), ;, }, JSType, objlitType, =, getJSType, (]
[{, ensureTyped, (, t, ,, key, ), ;, }, JSType, objlitType, =, getJSType, (, objlit, ), ;, ObjectType, type, =]
[{, ensureTyped, (, t, ,, key, ), ;, }, JSType, objlitType, =, getJSType, (, objlit, ), ;, ObjectType, type, =]
[,, key, ), ;, }, JSType, objlitType, =, getJSType, (, objlit, ), ;, ObjectType, type, =, ObjectType, ., cast, (]
[,, key, ), ;, }, JSType, objlitType, =, getJSType, (, objlit, ), ;, ObjectType, type, =, ObjectType, ., cast, (]
[(, objlit, ), ;, ObjectType, type, =, ObjectType, ., cast, (, objlitType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (]
[(, objlit, ), ;, ObjectType, type, =, ObjectType, ., cast, (, objlitType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (]
[), ;, ObjectType, type, =, ObjectType, ., cast, (, objlitType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=]
[., cast, (, objlitType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, String, property, =]
[., cast, (, objlitType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, String, property, =]
[., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (]
[;, if, (, type, !=, null, ), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (]
[;, if, (, type, !=, null, ), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (]
[;, if, (, type, !=, null, ), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (]
[;, if, (, type, !=, null, ), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (]
[!=, null, ), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (, type, ., hasProperty, (]
[{, String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (, type, ., hasProperty, (, property, ), &&]
[String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (, type, ., hasProperty, (, property, ), &&, !]
[String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (, type, ., hasProperty, (, property, ), &&, !]
[., getObjectLitKeyName, (, key, ), ;, if, (, type, ., hasProperty, (, property, ), &&, !, type, ., isPropertyTypeInferred, (]
[key, ), ;, if, (, type, ., hasProperty, (, property, ), &&, !, type, ., isPropertyTypeInferred, (, property, ), &&]
[), ;, if, (, type, ., hasProperty, (, property, ), &&, !, type, ., isPropertyTypeInferred, (, property, ), &&, !]
[if, (, type, ., hasProperty, (, property, ), &&, !, type, ., isPropertyTypeInferred, (, property, ), &&, !, propertyIsImplicitCast, (]
[type, ., hasProperty, (, property, ), &&, !, type, ., isPropertyTypeInferred, (, property, ), &&, !, propertyIsImplicitCast, (, type, ,]
[property, ), &&, !, type, ., isPropertyTypeInferred, (, property, ), &&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {]
[property, ), &&, !, type, ., isPropertyTypeInferred, (, property, ), &&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {]
[type, ., isPropertyTypeInferred, (, property, ), &&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (]
[isPropertyTypeInferred, (, property, ), &&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,]
[property, ), &&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,]
[&&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,]
[&&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,]
[type, ,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,, type, ., getPropertyType, (]
[), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,, type, ., getPropertyType, (, property, ), ,]
[{, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,, type, ., getPropertyType, (, property, ), ,, owner, ,]
[;, }, return, ;, }, }, private, boolean, propertyIsImplicitCast, (, ObjectType, type, ,, String, prop, ), {, for, (, ;]
[;, }, return, ;, }, }, private, boolean, propertyIsImplicitCast, (, ObjectType, type, ,, String, prop, ), {, for, (, ;]
[return, ;, }, }, private, boolean, propertyIsImplicitCast, (, ObjectType, type, ,, String, prop, ), {, for, (, ;, type, !=]
[}, }, private, boolean, propertyIsImplicitCast, (, ObjectType, type, ,, String, prop, ), {, for, (, ;, type, !=, null, ;]
[private, boolean, propertyIsImplicitCast, (, ObjectType, type, ,, String, prop, ), {, for, (, ;, type, !=, null, ;, type, =]
[private, boolean, propertyIsImplicitCast, (, ObjectType, type, ,, String, prop, ), {, for, (, ;, type, !=, null, ;, type, =]
[{, for, (, ;, type, !=, null, ;, type, =, type, ., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =]
[{, for, (, ;, type, !=, null, ;, type, =, type, ., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =]
[type, !=, null, ;, type, =, type, ., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (]
[=, type, ., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop, ), ;, if, (]
[=, type, ., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop, ), ;, if, (]
[=, type, ., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop, ), ;, if, (]
[., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop, ), ;, if, (, docInfo, !=]
[(, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop, ), ;, if, (, docInfo, !=, null, &&]
[(, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop, ), ;, if, (, docInfo, !=, null, &&]
[., getOwnPropertyJSDocInfo, (, prop, ), ;, if, (, docInfo, !=, null, &&, docInfo, ., isImplicitCast, (, ), ), {, return]
[;, if, (, docInfo, !=, null, &&, docInfo, ., isImplicitCast, (, ), ), {, return, true, ;, }, }, return]
[t, ,, Node, n, ,, FunctionType, ctorType, ,, String, propertyName, ,, JSDocInfo, info, ,, JSType, propertyType, ), {, if, (]
[Node, n, ,, FunctionType, ctorType, ,, String, propertyName, ,, JSDocInfo, info, ,, JSType, propertyType, ), {, if, (, hasUnknownOrEmptySupertype, (]
[info, ,, JSType, propertyType, ), {, if, (, hasUnknownOrEmptySupertype, (, ctorType, ), ), {, return, ;, }, FunctionType, superClass, =]
[info, ,, JSType, propertyType, ), {, if, (, hasUnknownOrEmptySupertype, (, ctorType, ), ), {, return, ;, }, FunctionType, superClass, =]
[(, ctorType, ), ), {, return, ;, }, FunctionType, superClass, =, ctorType, ., getSuperClassConstructor, (, ), ;, boolean, superClassHasProperty, =]
[(, ctorType, ), ), {, return, ;, }, FunctionType, superClass, =, ctorType, ., getSuperClassConstructor, (, ), ;, boolean, superClassHasProperty, =]
[(, ctorType, ), ), {, return, ;, }, FunctionType, superClass, =, ctorType, ., getSuperClassConstructor, (, ), ;, boolean, superClassHasProperty, =]
[), ), {, return, ;, }, FunctionType, superClass, =, ctorType, ., getSuperClassConstructor, (, ), ;, boolean, superClassHasProperty, =, superClass, !=]
[{, return, ;, }, FunctionType, superClass, =, ctorType, ., getSuperClassConstructor, (, ), ;, boolean, superClassHasProperty, =, superClass, !=, null, &&]
[{, return, ;, }, FunctionType, superClass, =, ctorType, ., getSuperClassConstructor, (, ), ;, boolean, superClassHasProperty, =, superClass, !=, null, &&]
[{, return, ;, }, FunctionType, superClass, =, ctorType, ., getSuperClassConstructor, (, ), ;, boolean, superClassHasProperty, =, superClass, !=, null, &&]
[., getSuperClassConstructor, (, ), ;, boolean, superClassHasProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., hasProperty, (]
[superClassHasProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =]
[superClassHasProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =]
[superClassHasProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =]
[superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =, superClass, !=]
[null, &&, superClass, ., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null, &&]
[null, &&, superClass, ., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null, &&]
[null, &&, superClass, ., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null, &&]
[hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., isPropertyTypeDeclared, (]
[superClassHasDeclaredProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., isPropertyTypeDeclared, (, propertyName, ), ;, boolean, superInterfaceHasProperty, =]
[&&, superClass, ., getInstanceType, (, ), ., isPropertyTypeDeclared, (, propertyName, ), ;, boolean, superInterfaceHasProperty, =, false, ;, boolean, superInterfaceHasDeclaredProperty, =]
[(, ), ., isPropertyTypeDeclared, (, propertyName, ), ;, boolean, superInterfaceHasProperty, =, false, ;, boolean, superInterfaceHasDeclaredProperty, =, false, ;, if, (]
[(, ), ., isPropertyTypeDeclared, (, propertyName, ), ;, boolean, superInterfaceHasProperty, =, false, ;, boolean, superInterfaceHasDeclaredProperty, =, false, ;, if, (]
[;, boolean, superInterfaceHasDeclaredProperty, =, false, ;, if, (, ctorType, ., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :]
[;, boolean, superInterfaceHasDeclaredProperty, =, false, ;, if, (, ctorType, ., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :]
[(, ctorType, ., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {]
[., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =]
[., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =]
[(, ), ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =, superInterfaceHasProperty, ||]
[(, ), ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =, superInterfaceHasProperty, ||]
[for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =, superInterfaceHasProperty, ||, interfaceType, ., hasProperty, (]
[interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =, superInterfaceHasProperty, ||, interfaceType, ., hasProperty, (, propertyName, ), ;]
[ctorType, ., getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =, superInterfaceHasProperty, ||, interfaceType, ., hasProperty, (, propertyName, ), ;, superInterfaceHasDeclaredProperty, =]
[ctorType, ., getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =, superInterfaceHasProperty, ||, interfaceType, ., hasProperty, (, propertyName, ), ;, superInterfaceHasDeclaredProperty, =]
[getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =, superInterfaceHasProperty, ||, interfaceType, ., hasProperty, (, propertyName, ), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||]
[getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =, superInterfaceHasProperty, ||, interfaceType, ., hasProperty, (, propertyName, ), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||]
[{, superInterfaceHasProperty, =, superInterfaceHasProperty, ||, interfaceType, ., hasProperty, (, propertyName, ), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (]
[(, propertyName, ), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =]
[(, propertyName, ), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =]
[(, propertyName, ), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =]
[), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =, info, !=]
[superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =, info, !=, null, &&]
[superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =, info, !=, null, &&]
[), ;, }, }, boolean, declaredOverride, =, info, !=, null, &&, info, ., isOverride, (, ), ;, boolean, foundInterfaceProperty, =]
[boolean, declaredOverride, =, info, !=, null, &&, info, ., isOverride, (, ), ;, boolean, foundInterfaceProperty, =, false, ;, if, (]
[boolean, declaredOverride, =, info, !=, null, &&, info, ., isOverride, (, ), ;, boolean, foundInterfaceProperty, =, false, ;, if, (]
[;, boolean, foundInterfaceProperty, =, false, ;, if, (, ctorType, ., isConstructor, (, ), ), {, for, (, JSType, implementedInterface, :]
[;, boolean, foundInterfaceProperty, =, false, ;, if, (, ctorType, ., isConstructor, (, ), ), {, for, (, JSType, implementedInterface, :]
[., isConstructor, (, ), ), {, for, (, JSType, implementedInterface, :, ctorType, ., getAllImplementedInterfaces, (, ), ), {, if, (]
[., isConstructor, (, ), ), {, for, (, JSType, implementedInterface, :, ctorType, ., getAllImplementedInterfaces, (, ), ), {, if, (]
[., isConstructor, (, ), ), {, for, (, JSType, implementedInterface, :, ctorType, ., getAllImplementedInterfaces, (, ), ), {, if, (]
[for, (, JSType, implementedInterface, :, ctorType, ., getAllImplementedInterfaces, (, ), ), {, if, (, implementedInterface, ., isUnknownType, (, ), ||]
[for, (, JSType, implementedInterface, :, ctorType, ., getAllImplementedInterfaces, (, ), ), {, if, (, implementedInterface, ., isUnknownType, (, ), ||]
[(, implementedInterface, ., isUnknownType, (, ), ||, implementedInterface, ., isEmptyType, (, ), ), {, continue, ;, }, FunctionType, interfaceType, =]
[(, implementedInterface, ., isUnknownType, (, ), ||, implementedInterface, ., isEmptyType, (, ), ), {, continue, ;, }, FunctionType, interfaceType, =]
[(, implementedInterface, ., isUnknownType, (, ), ||, implementedInterface, ., isEmptyType, (, ), ), {, continue, ;, }, FunctionType, interfaceType, =]
[(, ), ), {, continue, ;, }, FunctionType, interfaceType, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;]
[(, ), ), {, continue, ;, }, FunctionType, interfaceType, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;]
[continue, ;, }, FunctionType, interfaceType, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, Preconditions, ., checkNotNull, (]
[implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, Preconditions, ., checkNotNull, (, interfaceType, ), ;, boolean, interfaceHasProperty, =]
[implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, Preconditions, ., checkNotNull, (, interfaceType, ), ;, boolean, interfaceHasProperty, =]
[implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, Preconditions, ., checkNotNull, (, interfaceType, ), ;, boolean, interfaceHasProperty, =]
[), ;, Preconditions, ., checkNotNull, (, interfaceType, ), ;, boolean, interfaceHasProperty, =, interfaceType, ., getPrototype, (, ), ., hasProperty, (]
[., checkNotNull, (, interfaceType, ), ;, boolean, interfaceHasProperty, =, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;]
[(, interfaceType, ), ;, boolean, interfaceHasProperty, =, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =]
[(, interfaceType, ), ;, boolean, interfaceHasProperty, =, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =]
[), ;, boolean, interfaceHasProperty, =, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||]
[=, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (]
[=, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (]
[=, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (]
[=, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (]
[., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&]
[hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !]
[propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&]
[foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, ), {]
[foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, ), {]
[interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, ), {, compiler, ., report, (]
[interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, ), {, compiler, ., report, (]
[reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (]
[isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[), &&, !, declaredOverride, &&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,]
[!, declaredOverride, &&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,]
[&&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,]
[&&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,]
[&&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,]
[compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,, interfaceType, ., getTopMostDefiningType, (]
[propertyName, ,, interfaceType, ., getTopMostDefiningType, (, propertyName, ), ., toString, (, ), ), ), ;, }, }, }, if, (]
[propertyName, ,, interfaceType, ., getTopMostDefiningType, (, propertyName, ), ., toString, (, ), ), ), ;, }, }, }, if, (]
[propertyName, ,, interfaceType, ., getTopMostDefiningType, (, propertyName, ), ., toString, (, ), ), ), ;, }, }, }, if, (]
[,, interfaceType, ., getTopMostDefiningType, (, propertyName, ), ., toString, (, ), ), ), ;, }, }, }, if, (, !]
[., getTopMostDefiningType, (, propertyName, ), ., toString, (, ), ), ), ;, }, }, }, if, (, !, declaredOverride, &&]
[getTopMostDefiningType, (, propertyName, ), ., toString, (, ), ), ), ;, }, }, }, if, (, !, declaredOverride, &&, !]
[propertyName, ), ., toString, (, ), ), ), ;, }, }, }, if, (, !, declaredOverride, &&, !, superClassHasProperty, &&]
[), ., toString, (, ), ), ), ;, }, }, }, if, (, !, declaredOverride, &&, !, superClassHasProperty, &&, !]
[}, }, if, (, !, declaredOverride, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType, topInstanceType, =]
[}, }, if, (, !, declaredOverride, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType, topInstanceType, =]
[if, (, !, declaredOverride, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?]
[if, (, !, declaredOverride, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?]
[&&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (]
[&&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (, propertyName, ), :]
[return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean, declaredLocally, =]
[return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean, declaredLocally, =]
[return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean, declaredLocally, =]
[superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&]
[?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (]
[?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (]
[?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (]
[?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (]
[null, ;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (, ctorType, ., getPrototype, (, ), ., hasOwnProperty, (]
[declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (, ctorType, ., getPrototype, (, ), ., hasOwnProperty, (, propertyName, ), ||]
[declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (, ctorType, ., getPrototype, (, ), ., hasOwnProperty, (, propertyName, ), ||]
[declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (, ctorType, ., getPrototype, (, ), ., hasOwnProperty, (, propertyName, ), ||]
[(, ctorType, ., getPrototype, (, ), ., hasOwnProperty, (, propertyName, ), ||, ctorType, ., getInstanceType, (, ), ., hasOwnProperty, (]
[., hasOwnProperty, (, propertyName, ), ||, ctorType, ., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (]
[., hasOwnProperty, (, propertyName, ), ||, ctorType, ., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (]
[., hasOwnProperty, (, propertyName, ), ||, ctorType, ., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (]
[., hasOwnProperty, (, propertyName, ), ||, ctorType, ., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (]
[., hasOwnProperty, (, propertyName, ), ||, ctorType, ., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (]
[ctorType, ., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (, reportMissingOverride, ., isOn, (, ), &&]
[., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !]
[(, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&]
[., hasOwnProperty, (, propertyName, ), ), ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&]
[propertyName, ), ), ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {]
[propertyName, ), ), ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {]
[if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report, (]
[if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report, (]
[isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (]
[), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[!, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,]
[&&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,]
[&&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, propertyName, ,]
[&&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, propertyName, ,]
[(, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, propertyName, ,, topInstanceType, ., toString, (, ), ), ), ;, }, if, (]
[,, propertyName, ,, topInstanceType, ., toString, (, ), ), ), ;, }, if, (, superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =]
[,, propertyName, ,, topInstanceType, ., toString, (, ), ), ), ;, }, if, (, superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =]
[,, propertyName, ,, topInstanceType, ., toString, (, ), ), ), ;, }, if, (, superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =]
[), ), ;, }, if, (, superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =, superClass, ., getInstanceType, (, ), ., getPropertyType, (]
[(, superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =, superClass, ., getInstanceType, (, ), ., getPropertyType, (, propertyName, ), ;, if, (]
[superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =, superClass, ., getInstanceType, (, ), ., getPropertyType, (, propertyName, ), ;, if, (, !]
[superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =, superClass, ., getInstanceType, (, ), ., getPropertyType, (, propertyName, ), ;, if, (, !]
[superClassPropType, =, superClass, ., getInstanceType, (, ), ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (]
[getInstanceType, (, ), ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superClassPropType, ), ), {]
[getInstanceType, (, ), ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superClassPropType, ), ), {]
[getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superClassPropType, ), ), {, compiler, ., report, (]
[getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superClassPropType, ), ), {, compiler, ., report, (]
[;, if, (, !, propertyType, ., isSubtype, (, superClassPropType, ), ), {, compiler, ., report, (, t, ., makeError, (]
[(, !, propertyType, ., isSubtype, (, superClassPropType, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[propertyType, ., isSubtype, (, superClassPropType, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,]
[isSubtype, (, superClassPropType, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,]
[isSubtype, (, superClassPropType, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,]
[compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,]
[compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,]
[makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superClassPropType, ., toString, (, ), ,]
[makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superClassPropType, ., toString, (, ), ,]
[,, superClassPropType, ., toString, (, ), ,, propertyType, ., toString, (, ), ), ), ;, }, }, else, if, (]
[., toString, (, ), ), ), ;, }, }, else, if, (, superInterfaceHasDeclaredProperty, ), {, for, (, ObjectType, interfaceType, :]
[., toString, (, ), ), ), ;, }, }, else, if, (, superInterfaceHasDeclaredProperty, ), {, for, (, ObjectType, interfaceType, :]
[else, if, (, superInterfaceHasDeclaredProperty, ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, if, (]
[else, if, (, superInterfaceHasDeclaredProperty, ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, if, (]
[), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., hasProperty, (]
[ctorType, ., getExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., hasProperty, (, propertyName, ), ), {, JSType, superPropertyType, =]
[ctorType, ., getExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., hasProperty, (, propertyName, ), ), {, JSType, superPropertyType, =]
[), ), {, if, (, interfaceType, ., hasProperty, (, propertyName, ), ), {, JSType, superPropertyType, =, interfaceType, ., getPropertyType, (]
[interfaceType, ., hasProperty, (, propertyName, ), ), {, JSType, superPropertyType, =, interfaceType, ., getPropertyType, (, propertyName, ), ;, if, (]
[., hasProperty, (, propertyName, ), ), {, JSType, superPropertyType, =, interfaceType, ., getPropertyType, (, propertyName, ), ;, if, (, !]
[., hasProperty, (, propertyName, ), ), {, JSType, superPropertyType, =, interfaceType, ., getPropertyType, (, propertyName, ), ;, if, (, !]
[), ), {, JSType, superPropertyType, =, interfaceType, ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (]
[superPropertyType, =, interfaceType, ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superPropertyType, ), ), {]
[interfaceType, ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superPropertyType, ), ), {, topInstanceType, =]
[interfaceType, ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superPropertyType, ), ), {, topInstanceType, =]
[interfaceType, ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superPropertyType, ), ), {, topInstanceType, =]
[(, !, propertyType, ., isSubtype, (, superPropertyType, ), ), {, topInstanceType, =, interfaceType, ., getConstructor, (, ), ., getTopMostDefiningType, (]
[., isSubtype, (, superPropertyType, ), ), {, topInstanceType, =, interfaceType, ., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;]
[., isSubtype, (, superPropertyType, ), ), {, topInstanceType, =, interfaceType, ., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;]
[), ), {, topInstanceType, =, interfaceType, ., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (]
[), ), {, topInstanceType, =, interfaceType, ., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (]
[=, interfaceType, ., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (, t, ., makeError, (]
[., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (, t, ., makeError, (, n, ,]
[(, ), ., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,]
[., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,]
[., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,]
[compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,]
[compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,]
[makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superPropertyType, ., toString, (, ), ,]
[makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superPropertyType, ., toString, (, ), ,]
[., toString, (, ), ,, propertyType, ., toString, (, ), ), ), ;, }, }, }, }, else, if, (]
[., toString, (, ), ,, propertyType, ., toString, (, ), ), ), ;, }, }, }, }, else, if, (]
[., toString, (, ), ,, propertyType, ., toString, (, ), ), ), ;, }, }, }, }, else, if, (]
[toString, (, ), ,, propertyType, ., toString, (, ), ), ), ;, }, }, }, }, else, if, (, !]
[), ,, propertyType, ., toString, (, ), ), ), ;, }, }, }, }, else, if, (, !, foundInterfaceProperty, &&]
[,, propertyType, ., toString, (, ), ), ), ;, }, }, }, }, else, if, (, !, foundInterfaceProperty, &&, !]
[., toString, (, ), ), ), ;, }, }, }, }, else, if, (, !, foundInterfaceProperty, &&, !, superClassHasProperty, &&]
[toString, (, ), ), ), ;, }, }, }, }, else, if, (, !, foundInterfaceProperty, &&, !, superClassHasProperty, &&, !]
[), ), ;, }, }, }, }, else, if, (, !, foundInterfaceProperty, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {]
[), ), ;, }, }, }, }, else, if, (, !, foundInterfaceProperty, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {]
[}, }, }, else, if, (, !, foundInterfaceProperty, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler, ., report, (]
[}, }, }, else, if, (, !, foundInterfaceProperty, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler, ., report, (]
[if, (, !, foundInterfaceProperty, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (]
[!, foundInterfaceProperty, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[&&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,]
[superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,, propertyName, ,]
[superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,, propertyName, ,]
[superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,, propertyName, ,]
[(, ), ., toString, (, ), ), ), ;, }, }, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor, ), {]
[(, ), ., toString, (, ), ), ), ;, }, }, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor, ), {]
[(, ), ), ), ;, }, }, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor, ), {, Preconditions, ., checkArgument, (]
[(, ), ), ), ;, }, }, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor, ), {, Preconditions, ., checkArgument, (]
[(, ), ), ), ;, }, }, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor, ), {, Preconditions, ., checkArgument, (]
[}, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor, ), {, Preconditions, ., checkArgument, (, ctor, ., isConstructor, (, ), ||]
[}, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor, ), {, Preconditions, ., checkArgument, (, ctor, ., isConstructor, (, ), ||]
[ctor, ), {, Preconditions, ., checkArgument, (, ctor, ., isConstructor, (, ), ||, ctor, ., isInterface, (, ), ), ;]
[ctor, ), {, Preconditions, ., checkArgument, (, ctor, ., isConstructor, (, ), ||, ctor, ., isInterface, (, ), ), ;]
[., checkArgument, (, ctor, ., isConstructor, (, ), ||, ctor, ., isInterface, (, ), ), ;, Preconditions, ., checkArgument, (]
[checkArgument, (, ctor, ., isConstructor, (, ), ||, ctor, ., isInterface, (, ), ), ;, Preconditions, ., checkArgument, (, !]
[checkArgument, (, ctor, ., isConstructor, (, ), ||, ctor, ., isInterface, (, ), ), ;, Preconditions, ., checkArgument, (, !]
[., isInterface, (, ), ), ;, Preconditions, ., checkArgument, (, !, ctor, ., isUnknownType, (, ), ), ;, while, (]
[Preconditions, ., checkArgument, (, !, ctor, ., isUnknownType, (, ), ), ;, while, (, true, ), {, ObjectType, maybeSuperInstanceType, =]
[Preconditions, ., checkArgument, (, !, ctor, ., isUnknownType, (, ), ), ;, while, (, true, ), {, ObjectType, maybeSuperInstanceType, =]
[Preconditions, ., checkArgument, (, !, ctor, ., isUnknownType, (, ), ), ;, while, (, true, ), {, ObjectType, maybeSuperInstanceType, =]
[while, (, true, ), {, ObjectType, maybeSuperInstanceType, =, ctor, ., getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (]
[while, (, true, ), {, ObjectType, maybeSuperInstanceType, =, ctor, ., getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (]
[true, ), {, ObjectType, maybeSuperInstanceType, =, ctor, ., getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==]
[maybeSuperInstanceType, =, ctor, ., getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==, null, ), {, return]
[(, ), ., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==, null, ), {, return, false, ;, }, if, (]
[(, ), ., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==, null, ), {, return, false, ;, }, if, (]
[(, ), ., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==, null, ), {, return, false, ;, }, if, (]
[;, if, (, maybeSuperInstanceType, ==, null, ), {, return, false, ;, }, if, (, maybeSuperInstanceType, ., isUnknownType, (, ), ||]
[;, if, (, maybeSuperInstanceType, ==, null, ), {, return, false, ;, }, if, (, maybeSuperInstanceType, ., isUnknownType, (, ), ||]
[return, false, ;, }, if, (, maybeSuperInstanceType, ., isUnknownType, (, ), ||, maybeSuperInstanceType, ., isEmptyType, (, ), ), {, return]
[}, if, (, maybeSuperInstanceType, ., isUnknownType, (, ), ||, maybeSuperInstanceType, ., isEmptyType, (, ), ), {, return, true, ;, }]
[(, maybeSuperInstanceType, ., isUnknownType, (, ), ||, maybeSuperInstanceType, ., isEmptyType, (, ), ), {, return, true, ;, }, ctor, =]
[(, maybeSuperInstanceType, ., isUnknownType, (, ), ||, maybeSuperInstanceType, ., isEmptyType, (, ), ), {, return, true, ;, }, ctor, =]
[., isEmptyType, (, ), ), {, return, true, ;, }, ctor, =, maybeSuperInstanceType, ., getConstructor, (, ), ;, if, (]
[., isEmptyType, (, ), ), {, return, true, ;, }, ctor, =, maybeSuperInstanceType, ., getConstructor, (, ), ;, if, (]
[(, ), ), {, return, true, ;, }, ctor, =, maybeSuperInstanceType, ., getConstructor, (, ), ;, if, (, ctor, ==]
[return, true, ;, }, ctor, =, maybeSuperInstanceType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, return]
[}, ctor, =, maybeSuperInstanceType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, return, false, ;, }]
[}, ctor, =, maybeSuperInstanceType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, return, false, ;, }]
[., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (]
[., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (]
[., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (]
[(, ctor, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (, ctor, ., isConstructor, (, ), ||]
[(, ctor, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (, ctor, ., isConstructor, (, ), ||]
[,, Node, assign, ,, Node, object, ,, String, property, ,, Node, lvalue, ,, Node, rvalue, ), {, JSType, rvalueType, =]
[assign, ,, Node, object, ,, String, property, ,, Node, lvalue, ,, Node, rvalue, ), {, JSType, rvalueType, =, getJSType, (]
[property, ,, Node, lvalue, ,, Node, rvalue, ), {, JSType, rvalueType, =, getJSType, (, rvalue, ), ;, String, abstractMethodName, =]
[property, ,, Node, lvalue, ,, Node, rvalue, ), {, JSType, rvalueType, =, getJSType, (, rvalue, ), ;, String, abstractMethodName, =]
[property, ,, Node, lvalue, ,, Node, rvalue, ), {, JSType, rvalueType, =, getJSType, (, rvalue, ), ;, String, abstractMethodName, =]
[getJSType, (, rvalue, ), ;, String, abstractMethodName, =, compiler, ., getCodingConvention, (, ), ., getAbstractMethodName, (, ), ;, if, (]
[(, rvalue, ), ;, String, abstractMethodName, =, compiler, ., getCodingConvention, (, ), ., getAbstractMethodName, (, ), ;, if, (, !]
[(, rvalue, ), ;, String, abstractMethodName, =, compiler, ., getCodingConvention, (, ), ., getAbstractMethodName, (, ), ;, if, (, !]
[(, ), ., getAbstractMethodName, (, ), ;, if, (, !, rvalueType, ., isFunctionType, (, ), ), {, String, abstractMethodMessage, =]
[(, ), ., getAbstractMethodName, (, ), ;, if, (, !, rvalueType, ., isFunctionType, (, ), ), {, String, abstractMethodMessage, =]
[), ., getAbstractMethodName, (, ), ;, if, (, !, rvalueType, ., isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (]
[), ., getAbstractMethodName, (, ), ;, if, (, !, rvalueType, ., isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (]
[getAbstractMethodName, (, ), ;, if, (, !, rvalueType, ., isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (, abstractMethodName, !=]
[;, if, (, !, rvalueType, ., isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?]
[;, if, (, !, rvalueType, ., isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?]
[(, !, rvalueType, ., isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?, ", or ", +]
[rvalueType, ., isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?, ", or ", +, abstractMethodName, :]
[isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?, ", or ", +, abstractMethodName, :, "", ;]
[isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?, ", or ", +, abstractMethodName, :, "", ;]
[{, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?, ", or ", +, abstractMethodName, :, "", ;, compiler, ., report, (]
[{, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?, ", or ", +, abstractMethodName, :, "", ;, compiler, ., report, (]
[(, abstractMethodName, !=, null, ), ?, ", or ", +, abstractMethodName, :, "", ;, compiler, ., report, (, t, ., makeError, (]
[!=, null, ), ?, ", or ", +, abstractMethodName, :, "", ;, compiler, ., report, (, t, ., makeError, (, object, ,]
[), ?, ", or ", +, abstractMethodName, :, "", ;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,]
[;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (]
[;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (]
[;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (]
[;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (]
[,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (, assign, ., getLastChild, (, ), ., isFunction, (, ), &&]
[INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (, assign, ., getLastChild, (, ), ., isFunction, (, ), &&, !]
[INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (, assign, ., getLastChild, (, ), ., isFunction, (, ), &&, !]
[), ;, }, if, (, assign, ., getLastChild, (, ), ., isFunction, (, ), &&, !, NodeUtil, ., isEmptyBlock, (]
[), ;, }, if, (, assign, ., getLastChild, (, ), ., isFunction, (, ), &&, !, NodeUtil, ., isEmptyBlock, (]
[), ;, }, if, (, assign, ., getLastChild, (, ), ., isFunction, (, ), &&, !, NodeUtil, ., isEmptyBlock, (]
[(, ), &&, !, NodeUtil, ., isEmptyBlock, (, assign, ., getLastChild, (, ), ., getLastChild, (, ), ), ), {]
[(, ), &&, !, NodeUtil, ., isEmptyBlock, (, assign, ., getLastChild, (, ), ., getLastChild, (, ), ), ), {]
[NodeUtil, ., isEmptyBlock, (, assign, ., getLastChild, (, ), ., getLastChild, (, ), ), ), {, compiler, ., report, (]
[NodeUtil, ., isEmptyBlock, (, assign, ., getLastChild, (, ), ., getLastChild, (, ), ), ), {, compiler, ., report, (]
[assign, ., getLastChild, (, ), ., getLastChild, (, ), ), ), {, compiler, ., report, (, t, ., makeError, (]
[getLastChild, (, ), ., getLastChild, (, ), ), ), {, compiler, ., report, (, t, ., makeError, (, object, ,]
[), ., getLastChild, (, ), ), ), {, compiler, ., report, (, t, ., makeError, (, object, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,]
[), ;, }, }, boolean, visitName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, int, parentNodeType, =]
[), ;, }, }, boolean, visitName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, int, parentNodeType, =]
[t, ,, Node, n, ,, Node, parent, ), {, int, parentNodeType, =, parent, ., getType, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, int, parentNodeType, =, parent, ., getType, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, int, parentNodeType, =, parent, ., getType, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, int, parentNodeType, =, parent, ., getType, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, int, parentNodeType, =, parent, ., getType, (, ), ;, if, (]
[Node, n, ,, Node, parent, ), {, int, parentNodeType, =, parent, ., getType, (, ), ;, if, (, parentNodeType, ==]
[Node, n, ,, Node, parent, ), {, int, parentNodeType, =, parent, ., getType, (, ), ;, if, (, parentNodeType, ==]
[parent, ), {, int, parentNodeType, =, parent, ., getType, (, ), ;, if, (, parentNodeType, ==, Token, ., FUNCTION, ||]
[parent, ), {, int, parentNodeType, =, parent, ., getType, (, ), ;, if, (, parentNodeType, ==, Token, ., FUNCTION, ||]
[{, int, parentNodeType, =, parent, ., getType, (, ), ;, if, (, parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==]
[{, int, parentNodeType, =, parent, ., getType, (, ), ;, if, (, parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==]
[parent, ., getType, (, ), ;, if, (, parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||]
[parent, ., getType, (, ), ;, if, (, parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||]
[getType, (, ), ;, if, (, parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==]
[getType, (, ), ;, if, (, parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==]
[if, (, parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST, ||]
[if, (, parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST, ||]
[parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==]
[parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==]
[parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {, return]
[parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {, return, false, ;, }, JSType, type, =]
[parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {, return, false, ;, }, JSType, type, =]
[Token, ., VAR, ), {, return, false, ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (]
[Token, ., VAR, ), {, return, false, ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (]
[VAR, ), {, return, false, ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==]
[return, false, ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==, null, ), {]
[;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==, null, ), {, type, =]
[JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==, null, ), {, type, =, getNativeType, (]
[(, ), ;, if, (, type, ==, null, ), {, type, =, getNativeType, (, UNKNOWN_TYPE, ), ;, Var, var, =]
[(, ), ;, if, (, type, ==, null, ), {, type, =, getNativeType, (, UNKNOWN_TYPE, ), ;, Var, var, =]
[(, ), ;, if, (, type, ==, null, ), {, type, =, getNativeType, (, UNKNOWN_TYPE, ), ;, Var, var, =]
[), {, type, =, getNativeType, (, UNKNOWN_TYPE, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[), {, type, =, getNativeType, (, UNKNOWN_TYPE, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[=, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, JSType, varType, =]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, JSType, varType, =]
[), ;, if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (]
[), ;, if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (]
[if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=]
[!=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, ), {]
[), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, ), {, type, =]
[var, ., getType, (, ), ;, if, (, varType, !=, null, ), {, type, =, varType, ;, }, }, }]
[getType, (, ), ;, if, (, varType, !=, null, ), {, type, =, varType, ;, }, }, }, ensureTyped, (]
[), ;, if, (, varType, !=, null, ), {, type, =, varType, ;, }, }, }, ensureTyped, (, t, ,]
[if, (, varType, !=, null, ), {, type, =, varType, ;, }, }, }, ensureTyped, (, t, ,, n, ,]
[null, ), {, type, =, varType, ;, }, }, }, ensureTyped, (, t, ,, n, ,, type, ), ;, return]
[true, ;, }, private, void, visitGetProp, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, property, =]
[true, ;, }, private, void, visitGetProp, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, property, =]
[,, Node, n, ,, Node, parent, ), {, Node, property, =, n, ., getLastChild, (, ), ;, Node, objNode, =]
[,, Node, n, ,, Node, parent, ), {, Node, property, =, n, ., getLastChild, (, ), ;, Node, objNode, =]
[property, =, n, ., getLastChild, (, ), ;, Node, objNode, =, n, ., getFirstChild, (, ), ;, JSType, childType, =]
[n, ., getLastChild, (, ), ;, Node, objNode, =, n, ., getFirstChild, (, ), ;, JSType, childType, =, getJSType, (]
[;, Node, objNode, =, n, ., getFirstChild, (, ), ;, JSType, childType, =, getJSType, (, objNode, ), ;, if, (]
[;, Node, objNode, =, n, ., getFirstChild, (, ), ;, JSType, childType, =, getJSType, (, objNode, ), ;, if, (]
[(, ), ;, JSType, childType, =, getJSType, (, objNode, ), ;, if, (, childType, ., isDict, (, ), ), {]
[;, JSType, childType, =, getJSType, (, objNode, ), ;, if, (, childType, ., isDict, (, ), ), {, report, (]
[childType, =, getJSType, (, objNode, ), ;, if, (, childType, ., isDict, (, ), ), {, report, (, t, ,]
[getJSType, (, objNode, ), ;, if, (, childType, ., isDict, (, ), ), {, report, (, t, ,, property, ,]
[getJSType, (, objNode, ), ;, if, (, childType, ., isDict, (, ), ), {, report, (, t, ,, property, ,]
[;, if, (, childType, ., isDict, (, ), ), {, report, (, t, ,, property, ,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS, ,]
[(, childType, ., isDict, (, ), ), {, report, (, t, ,, property, ,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS, ,, "'.'", ,]
[{, report, (, t, ,, property, ,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS, ,, "'.'", ,, "dict", ), ;, }, else, if, (]
[{, report, (, t, ,, property, ,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS, ,, "'.'", ,, "dict", ), ;, }, else, if, (]
[,, property, ,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS, ,, "'.'", ,, "dict", ), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (]
[,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS, ,, "'.'", ,, "dict", ), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (, t, ,]
[., ILLEGAL_PROPERTY_ACCESS, ,, "'.'", ,, "dict", ), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,]
[,, "'.'", ,, "dict", ), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, childType, ,]
[,, "dict", ), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, childType, ,, "No properties on this expression", ,]
[), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, childType, ,, "No properties on this expression", ,, getNativeType, (]
[(, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, childType, ,, "No properties on this expression", ,, getNativeType, (, OBJECT_TYPE, ), ), ), {]
[., expectNotNullOrUndefined, (, t, ,, n, ,, childType, ,, "No properties on this expression", ,, getNativeType, (, OBJECT_TYPE, ), ), ), {, checkPropertyAccess, (]
[(, t, ,, n, ,, childType, ,, "No properties on this expression", ,, getNativeType, (, OBJECT_TYPE, ), ), ), {, checkPropertyAccess, (, childType, ,]
[(, t, ,, n, ,, childType, ,, "No properties on this expression", ,, getNativeType, (, OBJECT_TYPE, ), ), ), {, checkPropertyAccess, (, childType, ,]
[,, "No properties on this expression", ,, getNativeType, (, OBJECT_TYPE, ), ), ), {, checkPropertyAccess, (, childType, ,, property, ., getString, (, ), ,]
[,, getNativeType, (, OBJECT_TYPE, ), ), ), {, checkPropertyAccess, (, childType, ,, property, ., getString, (, ), ,, t, ,]
[), ), ), {, checkPropertyAccess, (, childType, ,, property, ., getString, (, ), ,, t, ,, n, ), ;, }]
[), {, checkPropertyAccess, (, childType, ,, property, ., getString, (, ), ,, t, ,, n, ), ;, }, ensureTyped, (]
[checkPropertyAccess, (, childType, ,, property, ., getString, (, ), ,, t, ,, n, ), ;, }, ensureTyped, (, t, ,]
[private, void, checkPropertyAccess, (, JSType, childType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n, ), {, JSType, propType, =]
[checkPropertyAccess, (, JSType, childType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n, ), {, JSType, propType, =, getJSType, (]
[String, propName, ,, NodeTraversal, t, ,, Node, n, ), {, JSType, propType, =, getJSType, (, n, ), ;, if, (]
[String, propName, ,, NodeTraversal, t, ,, Node, n, ), {, JSType, propType, =, getJSType, (, n, ), ;, if, (]
[t, ,, Node, n, ), {, JSType, propType, =, getJSType, (, n, ), ;, if, (, propType, ., isEquivalentTo, (]
[t, ,, Node, n, ), {, JSType, propType, =, getJSType, (, n, ), ;, if, (, propType, ., isEquivalentTo, (]
[), {, JSType, propType, =, getJSType, (, n, ), ;, if, (, propType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (]
[getJSType, (, n, ), ;, if, (, propType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {]
[n, ), ;, if, (, propType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, childType, =]
[n, ), ;, if, (, propType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, childType, =]
[typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, childType, =, childType, ., autobox, (, ), ;, ObjectType, objectType, =]
[typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, childType, =, childType, ., autobox, (, ), ;, ObjectType, objectType, =]
[UNKNOWN_TYPE, ), ), ), {, childType, =, childType, ., autobox, (, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (]
[childType, =, childType, ., autobox, (, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (, childType, ), ;, if, (]
[childType, =, childType, ., autobox, (, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (, childType, ), ;, if, (]
[childType, ., autobox, (, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (, childType, ), ;, if, (, objectType, !=]
[;, ObjectType, objectType, =, ObjectType, ., cast, (, childType, ), ;, if, (, objectType, !=, null, ), {, if, (]
[;, ObjectType, objectType, =, ObjectType, ., cast, (, childType, ), ;, if, (, objectType, !=, null, ), {, if, (]
[ObjectType, objectType, =, ObjectType, ., cast, (, childType, ), ;, if, (, objectType, !=, null, ), {, if, (, !]
[ObjectType, objectType, =, ObjectType, ., cast, (, childType, ), ;, if, (, objectType, !=, null, ), {, if, (, !]
[., cast, (, childType, ), ;, if, (, objectType, !=, null, ), {, if, (, !, objectType, ., hasProperty, (]
[childType, ), ;, if, (, objectType, !=, null, ), {, if, (, !, objectType, ., hasProperty, (, propName, ), ||]
[childType, ), ;, if, (, objectType, !=, null, ), {, if, (, !, objectType, ., hasProperty, (, propName, ), ||]
[(, objectType, !=, null, ), {, if, (, !, objectType, ., hasProperty, (, propName, ), ||, objectType, ., isEquivalentTo, (]
[(, objectType, !=, null, ), {, if, (, !, objectType, ., hasProperty, (, propName, ), ||, objectType, ., isEquivalentTo, (]
[), {, if, (, !, objectType, ., hasProperty, (, propName, ), ||, objectType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (]
[hasProperty, (, propName, ), ||, objectType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if, (]
[hasProperty, (, propName, ), ||, objectType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if, (]
[objectType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if, (, objectType, instanceof, EnumType, ), {]
[isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if, (, objectType, instanceof, EnumType, ), {, report, (]
[typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if, (, objectType, instanceof, EnumType, ), {, report, (, t, ,]
[getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if, (, objectType, instanceof, EnumType, ), {, report, (, t, ,, n, ,]
[UNKNOWN_TYPE, ), ), ), {, if, (, objectType, instanceof, EnumType, ), {, report, (, t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,]
[(, objectType, instanceof, EnumType, ), {, report, (, t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName, ), ;, }, else, {]
[instanceof, EnumType, ), {, report, (, t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName, ), ;, }, else, {, checkPropertyAccessHelper, (]
[), {, report, (, t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName, ), ;, }, else, {, checkPropertyAccessHelper, (, objectType, ,]
[report, (, t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName, ), ;, }, else, {, checkPropertyAccessHelper, (, objectType, ,, propName, ,]
[t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName, ), ;, }, else, {, checkPropertyAccessHelper, (, objectType, ,, propName, ,, t, ,]
[;, }, else, {, checkPropertyAccessHelper, (, objectType, ,, propName, ,, t, ,, n, ), ;, }, }, }, else, {]
[else, {, checkPropertyAccessHelper, (, objectType, ,, propName, ,, t, ,, n, ), ;, }, }, }, else, {, checkPropertyAccessHelper, (]
[checkPropertyAccessHelper, (, objectType, ,, propName, ,, t, ,, n, ), ;, }, }, }, else, {, checkPropertyAccessHelper, (, childType, ,]
[objectType, ,, propName, ,, t, ,, n, ), ;, }, }, }, else, {, checkPropertyAccessHelper, (, childType, ,, propName, ,]
[propName, ,, t, ,, n, ), ;, }, }, }, else, {, checkPropertyAccessHelper, (, childType, ,, propName, ,, t, ,]
[}, private, void, checkPropertyAccessHelper, (, JSType, objectType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n, ), {, if, (]
[}, private, void, checkPropertyAccessHelper, (, JSType, objectType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n, ), {, if, (]
[}, private, void, checkPropertyAccessHelper, (, JSType, objectType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n, ), {, if, (]
[private, void, checkPropertyAccessHelper, (, JSType, objectType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n, ), {, if, (, !]
[private, void, checkPropertyAccessHelper, (, JSType, objectType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n, ), {, if, (, !]
[,, String, propName, ,, NodeTraversal, t, ,, Node, n, ), {, if, (, !, objectType, ., isEmptyType, (, ), &&]
[propName, ,, NodeTraversal, t, ,, Node, n, ), {, if, (, !, objectType, ., isEmptyType, (, ), &&, reportMissingProperties, &&]
[,, NodeTraversal, t, ,, Node, n, ), {, if, (, !, objectType, ., isEmptyType, (, ), &&, reportMissingProperties, &&, !]
[t, ,, Node, n, ), {, if, (, !, objectType, ., isEmptyType, (, ), &&, reportMissingProperties, &&, !, isPropertyTest, (]
[if, (, !, objectType, ., isEmptyType, (, ), &&, reportMissingProperties, &&, !, isPropertyTest, (, n, ), ), {, if, (]
[(, !, objectType, ., isEmptyType, (, ), &&, reportMissingProperties, &&, !, isPropertyTest, (, n, ), ), {, if, (, !]
[(, !, objectType, ., isEmptyType, (, ), &&, reportMissingProperties, &&, !, isPropertyTest, (, n, ), ), {, if, (, !]
[isEmptyType, (, ), &&, reportMissingProperties, &&, !, isPropertyTest, (, n, ), ), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (]
[), &&, reportMissingProperties, &&, !, isPropertyTest, (, n, ), ), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,]
[!, isPropertyTest, (, n, ), ), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), ), {]
[(, n, ), ), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), ), {, report, (]
[), ), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), ), {, report, (, t, ,]
[{, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), ), {, report, (, t, ,, n, ,]
[(, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), ), {, report, (, t, ,, n, ,, INEXISTENT_PROPERTY, ,]
[typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), ), {, report, (, t, ,, n, ,, INEXISTENT_PROPERTY, ,, propName, ,]
[typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), ), {, report, (, t, ,, n, ,, INEXISTENT_PROPERTY, ,, propName, ,]
[objectType, ,, propName, ), ), {, report, (, t, ,, n, ,, INEXISTENT_PROPERTY, ,, propName, ,, validator, ., getReadableJSTypeName, (]
[objectType, ,, propName, ), ), {, report, (, t, ,, n, ,, INEXISTENT_PROPERTY, ,, propName, ,, validator, ., getReadableJSTypeName, (]
[report, (, t, ,, n, ,, INEXISTENT_PROPERTY, ,, propName, ,, validator, ., getReadableJSTypeName, (, n, ., getFirstChild, (, ), ,]
[), ,, true, ), ), ;, }, }, }, private, boolean, isPropertyTest, (, Node, getProp, ), {, Node, parent, =]
[), ,, true, ), ), ;, }, }, }, private, boolean, isPropertyTest, (, Node, getProp, ), {, Node, parent, =]
[}, private, boolean, isPropertyTest, (, Node, getProp, ), {, Node, parent, =, getProp, ., getParent, (, ), ;, switch, (]
[}, private, boolean, isPropertyTest, (, Node, getProp, ), {, Node, parent, =, getProp, ., getParent, (, ), ;, switch, (]
[{, Node, parent, =, getProp, ., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case]
[{, Node, parent, =, getProp, ., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case]
[., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., CALL, :, return]
[., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., CALL, :, return]
[., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., CALL, :, return]
[., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., CALL, :, return]
[(, parent, ., getType, (, ), ), {, case, Token, ., CALL, :, return, parent, ., getFirstChild, (, ), !=]
[., getType, (, ), ), {, case, Token, ., CALL, :, return, parent, ., getFirstChild, (, ), !=, getProp, &&]
[., getType, (, ), ), {, case, Token, ., CALL, :, return, parent, ., getFirstChild, (, ), !=, getProp, &&]
[., getType, (, ), ), {, case, Token, ., CALL, :, return, parent, ., getFirstChild, (, ), !=, getProp, &&]
[., CALL, :, return, parent, ., getFirstChild, (, ), !=, getProp, &&, compiler, ., getCodingConvention, (, ), ., isPropertyTestFunction, (]
[parent, ., getFirstChild, (, ), !=, getProp, &&, compiler, ., getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, ), ;, case]
[parent, ., getFirstChild, (, ), !=, getProp, &&, compiler, ., getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, ), ;, case]
[!=, getProp, &&, compiler, ., getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, ), ;, case, Token, ., IF, :, case]
[!=, getProp, &&, compiler, ., getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, ), ;, case, Token, ., IF, :, case]
[getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, ), ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case]
[getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, ), ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case]
[(, parent, ), ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[(, parent, ), ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, return]
[Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, return]
[Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, return]
[case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, return, NodeUtil, ., getConditionExpression, (]
[WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, return, NodeUtil, ., getConditionExpression, (, parent, ), ==]
[Token, ., DO, :, case, Token, ., FOR, :, return, NodeUtil, ., getConditionExpression, (, parent, ), ==, getProp, ;, case]
[Token, ., DO, :, case, Token, ., FOR, :, return, NodeUtil, ., getConditionExpression, (, parent, ), ==, getProp, ;, case]
[Token, ., FOR, :, return, NodeUtil, ., getConditionExpression, (, parent, ), ==, getProp, ;, case, Token, ., INSTANCEOF, :, case]
[Token, ., FOR, :, return, NodeUtil, ., getConditionExpression, (, parent, ), ==, getProp, ;, case, Token, ., INSTANCEOF, :, case]
[NodeUtil, ., getConditionExpression, (, parent, ), ==, getProp, ;, case, Token, ., INSTANCEOF, :, case, Token, ., TYPEOF, :, return]
[(, parent, ), ==, getProp, ;, case, Token, ., INSTANCEOF, :, case, Token, ., TYPEOF, :, return, true, ;, case]
[(, parent, ), ==, getProp, ;, case, Token, ., INSTANCEOF, :, case, Token, ., TYPEOF, :, return, true, ;, case]
[;, case, Token, ., INSTANCEOF, :, case, Token, ., TYPEOF, :, return, true, ;, case, Token, ., AND, :, case]
[;, case, Token, ., INSTANCEOF, :, case, Token, ., TYPEOF, :, return, true, ;, case, Token, ., AND, :, case]
[:, case, Token, ., TYPEOF, :, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, return]
[:, case, Token, ., TYPEOF, :, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, return]
[:, case, Token, ., TYPEOF, :, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, return]
[return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==]
[case, Token, ., AND, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, getProp, ;, case]
[case, Token, ., AND, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, getProp, ;, case]
[case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, getProp, ;, case, Token, ., NOT, :, return]
[case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, getProp, ;, case, Token, ., NOT, :, return]
[case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, getProp, ;, case, Token, ., NOT, :, return]
[case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, getProp, ;, case, Token, ., NOT, :, return]
[), ==, getProp, ;, case, Token, ., NOT, :, return, parent, ., getParent, (, ), ., isOr, (, ), &&]
[), ==, getProp, ;, case, Token, ., NOT, :, return, parent, ., getParent, (, ), ., isOr, (, ), &&]
[), ==, getProp, ;, case, Token, ., NOT, :, return, parent, ., getParent, (, ), ., isOr, (, ), &&]
[), ==, getProp, ;, case, Token, ., NOT, :, return, parent, ., getParent, (, ), ., isOr, (, ), &&]
[parent, ., getParent, (, ), ., isOr, (, ), &&, parent, ., getParent, (, ), ., getFirstChild, (, ), ==]
[), ., isOr, (, ), &&, parent, ., getParent, (, ), ., getFirstChild, (, ), ==, parent, ;, }, return]
[), ==, parent, ;, }, return, false, ;, }, private, void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {]
[), ==, parent, ;, }, return, false, ;, }, private, void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {]
[}, return, false, ;, }, private, void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {, validator, ., expectIndexMatch, (]
[false, ;, }, private, void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {, validator, ., expectIndexMatch, (, t, ,]
[}, private, void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {, validator, ., expectIndexMatch, (, t, ,, n, ,]
[void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {, validator, ., expectIndexMatch, (, t, ,, n, ,, getJSType, (]
[void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {, validator, ., expectIndexMatch, (, t, ,, n, ,, getJSType, (]
[n, ), {, validator, ., expectIndexMatch, (, t, ,, n, ,, getJSType, (, n, ., getFirstChild, (, ), ), ,]
[{, validator, ., expectIndexMatch, (, t, ,, n, ,, getJSType, (, n, ., getFirstChild, (, ), ), ,, getJSType, (]
[{, validator, ., expectIndexMatch, (, t, ,, n, ,, getJSType, (, n, ., getFirstChild, (, ), ), ,, getJSType, (]
[,, getJSType, (, n, ., getFirstChild, (, ), ), ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;]
[(, n, ., getFirstChild, (, ), ), ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, ensureTyped, (]
[., getFirstChild, (, ), ), ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, ensureTyped, (, t, ,]
[t, ,, n, ), ;, }, private, void, visitVar, (, NodeTraversal, t, ,, Node, n, ), {, JSDocInfo, varInfo, =]
[t, ,, n, ), ;, }, private, void, visitVar, (, NodeTraversal, t, ,, Node, n, ), {, JSDocInfo, varInfo, =]
[t, ,, n, ), ;, }, private, void, visitVar, (, NodeTraversal, t, ,, Node, n, ), {, JSDocInfo, varInfo, =]
[private, void, visitVar, (, NodeTraversal, t, ,, Node, n, ), {, JSDocInfo, varInfo, =, n, ., hasOneChild, (, ), ?]
[private, void, visitVar, (, NodeTraversal, t, ,, Node, n, ), {, JSDocInfo, varInfo, =, n, ., hasOneChild, (, ), ?]
[,, Node, n, ), {, JSDocInfo, varInfo, =, n, ., hasOneChild, (, ), ?, n, ., getJSDocInfo, (, ), :]
[=, n, ., hasOneChild, (, ), ?, n, ., getJSDocInfo, (, ), :, null, ;, for, (, Node, name, :]
[=, n, ., hasOneChild, (, ), ?, n, ., getJSDocInfo, (, ), :, null, ;, for, (, Node, name, :]
[(, ), :, null, ;, for, (, Node, name, :, n, ., children, (, ), ), {, Node, value, =]
[(, ), :, null, ;, for, (, Node, name, :, n, ., children, (, ), ), {, Node, value, =]
[:, n, ., children, (, ), ), {, Node, value, =, name, ., getFirstChild, (, ), ;, Var, var, =]
[:, n, ., children, (, ), ), {, Node, value, =, name, ., getFirstChild, (, ), ;, Var, var, =]
[:, n, ., children, (, ), ), {, Node, value, =, name, ., getFirstChild, (, ), ;, Var, var, =]
[Node, value, =, name, ., getFirstChild, (, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[Node, value, =, name, ., getFirstChild, (, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ., getString, (, ), ), ;, if, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ., getString, (, ), ), ;, if, (]
[=, t, ., getScope, (, ), ., getVar, (, name, ., getString, (, ), ), ;, if, (, value, !=]
[., getVar, (, name, ., getString, (, ), ), ;, if, (, value, !=, null, ), {, JSType, valueType, =]
[(, name, ., getString, (, ), ), ;, if, (, value, !=, null, ), {, JSType, valueType, =, getJSType, (]
[), ;, if, (, value, !=, null, ), {, JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =]
[), ;, if, (, value, !=, null, ), {, JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =]
[null, ), {, JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =, var, ., getType, (, ), ;]
[{, JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =, var, ., getType, (, ), ;, nameType, =]
[{, JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =, var, ., getType, (, ), ;, nameType, =]
[JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =, var, ., getType, (, ), ;, nameType, =, (]
[JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =, var, ., getType, (, ), ;, nameType, =, (]
[=, getJSType, (, value, ), ;, JSType, nameType, =, var, ., getType, (, ), ;, nameType, =, (, nameType, ==]
[value, ), ;, JSType, nameType, =, var, ., getType, (, ), ;, nameType, =, (, nameType, ==, null, ), ?]
[;, JSType, nameType, =, var, ., getType, (, ), ;, nameType, =, (, nameType, ==, null, ), ?, getNativeType, (]
[=, var, ., getType, (, ), ;, nameType, =, (, nameType, ==, null, ), ?, getNativeType, (, UNKNOWN_TYPE, ), :]
[), ;, nameType, =, (, nameType, ==, null, ), ?, getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;, JSDocInfo, info, =]
[), ;, nameType, =, (, nameType, ==, null, ), ?, getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;, JSDocInfo, info, =]
[), ?, getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (]
[), ?, getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (]
[getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, ==]
[), :, nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {]
[nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =]
[info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, varInfo, ;, }]
[name, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, varInfo, ;, }, checkEnumAlias, (]
[getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, varInfo, ;, }, checkEnumAlias, (, t, ,]
[), ;, if, (, info, ==, null, ), {, info, =, varInfo, ;, }, checkEnumAlias, (, t, ,, info, ,]
[==, null, ), {, info, =, varInfo, ;, }, checkEnumAlias, (, t, ,, info, ,, value, ), ;, if, (]
[==, null, ), {, info, =, varInfo, ;, }, checkEnumAlias, (, t, ,, info, ,, value, ), ;, if, (]
[;, }, checkEnumAlias, (, t, ,, info, ,, value, ), ;, if, (, var, ., isTypeInferred, (, ), ), {]
[checkEnumAlias, (, t, ,, info, ,, value, ), ;, if, (, var, ., isTypeInferred, (, ), ), {, ensureTyped, (]
[t, ,, info, ,, value, ), ;, if, (, var, ., isTypeInferred, (, ), ), {, ensureTyped, (, t, ,]
[info, ,, value, ), ;, if, (, var, ., isTypeInferred, (, ), ), {, ensureTyped, (, t, ,, name, ,]
[(, var, ., isTypeInferred, (, ), ), {, ensureTyped, (, t, ,, name, ,, valueType, ), ;, }, else, {]
[(, var, ., isTypeInferred, (, ), ), {, ensureTyped, (, t, ,, name, ,, valueType, ), ;, }, else, {]
[(, ), ), {, ensureTyped, (, t, ,, name, ,, valueType, ), ;, }, else, {, validator, ., expectCanAssignTo, (]
[), {, ensureTyped, (, t, ,, name, ,, valueType, ), ;, }, else, {, validator, ., expectCanAssignTo, (, t, ,]
[ensureTyped, (, t, ,, name, ,, valueType, ), ;, }, else, {, validator, ., expectCanAssignTo, (, t, ,, value, ,]
[t, ,, name, ,, valueType, ), ;, }, else, {, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueType, ,]
[name, ,, valueType, ), ;, }, else, {, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueType, ,, nameType, ,]
[), ;, }, }, }, }, private, void, visitNew, (, NodeTraversal, t, ,, Node, n, ), {, Node, constructor, =]
[), ;, }, }, }, }, private, void, visitNew, (, NodeTraversal, t, ,, Node, n, ), {, Node, constructor, =]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, constructor, =, n, ., getFirstChild, (, ), ;, JSType, type, =]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, constructor, =, n, ., getFirstChild, (, ), ;, JSType, type, =]
[t, ,, Node, n, ), {, Node, constructor, =, n, ., getFirstChild, (, ), ;, JSType, type, =, getJSType, (]
[n, ., getFirstChild, (, ), ;, JSType, type, =, getJSType, (, constructor, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[n, ., getFirstChild, (, ), ;, JSType, type, =, getJSType, (, constructor, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[n, ., getFirstChild, (, ), ;, JSType, type, =, getJSType, (, constructor, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[n, ., getFirstChild, (, ), ;, JSType, type, =, getJSType, (, constructor, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[JSType, type, =, getJSType, (, constructor, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isConstructor, (, ), ||]
[JSType, type, =, getJSType, (, constructor, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isConstructor, (, ), ||]
[), ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isConstructor, (, ), ||, type, ., isEmptyType, (, ), ||]
[), ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isConstructor, (, ), ||, type, ., isEmptyType, (, ), ||]
[isConstructor, (, ), ||, type, ., isEmptyType, (, ), ||, type, ., isUnknownType, (, ), ), {, FunctionType, fnType, =]
[isConstructor, (, ), ||, type, ., isEmptyType, (, ), ||, type, ., isUnknownType, (, ), ), {, FunctionType, fnType, =]
[), ||, type, ., isUnknownType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (]
[), ||, type, ., isUnknownType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (]
[type, ., isUnknownType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=]
[(, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {]
[), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, visitParameterList, (]
[FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, visitParameterList, (, t, ,]
[=, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, visitParameterList, (, t, ,, n, ,]
[toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, visitParameterList, (, t, ,, n, ,, fnType, ), ;]
[), ;, if, (, fnType, !=, null, ), {, visitParameterList, (, t, ,, n, ,, fnType, ), ;, ensureTyped, (]
[if, (, fnType, !=, null, ), {, visitParameterList, (, t, ,, n, ,, fnType, ), ;, ensureTyped, (, t, ,]
[fnType, !=, null, ), {, visitParameterList, (, t, ,, n, ,, fnType, ), ;, ensureTyped, (, t, ,, n, ,]
[fnType, !=, null, ), {, visitParameterList, (, t, ,, n, ,, fnType, ), ;, ensureTyped, (, t, ,, n, ,]
[,, fnType, ), ;, ensureTyped, (, t, ,, n, ,, fnType, ., getInstanceType, (, ), ), ;, }, else, {]
[), ;, ensureTyped, (, t, ,, n, ,, fnType, ., getInstanceType, (, ), ), ;, }, else, {, ensureTyped, (]
[ensureTyped, (, t, ,, n, ,, fnType, ., getInstanceType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,]
[., getInstanceType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, else, {]
[(, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, else, {, report, (]
[), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, else, {, report, (, t, ,]
[}, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, else, {, report, (, t, ,, n, ,]
[ensureTyped, (, t, ,, n, ), ;, }, }, else, {, report, (, t, ,, n, ,, NOT_A_CONSTRUCTOR, ), ;]
[t, ,, n, ), ;, }, }, else, {, report, (, t, ,, n, ,, NOT_A_CONSTRUCTOR, ), ;, ensureTyped, (]
[n, ), ;, }, }, else, {, report, (, t, ,, n, ,, NOT_A_CONSTRUCTOR, ), ;, ensureTyped, (, t, ,]
[,, ObjectType, >, properties, ,, HashMap, <, String, ,, ObjectType, >, currentProperties, ,, ObjectType, interfaceType, ), {, ObjectType, implicitProto, =]
[,, ObjectType, >, properties, ,, HashMap, <, String, ,, ObjectType, >, currentProperties, ,, ObjectType, interfaceType, ), {, ObjectType, implicitProto, =]
[interfaceType, ), {, ObjectType, implicitProto, =, interfaceType, ., getImplicitPrototype, (, ), ;, Set, <, String, >, currentPropertyNames, ;, if, (]
[interfaceType, ), {, ObjectType, implicitProto, =, interfaceType, ., getImplicitPrototype, (, ), ;, Set, <, String, >, currentPropertyNames, ;, if, (]
[{, ObjectType, implicitProto, =, interfaceType, ., getImplicitPrototype, (, ), ;, Set, <, String, >, currentPropertyNames, ;, if, (, implicitProto, ==]
[=, interfaceType, ., getImplicitPrototype, (, ), ;, Set, <, String, >, currentPropertyNames, ;, if, (, implicitProto, ==, null, ), {]
[., getImplicitPrototype, (, ), ;, Set, <, String, >, currentPropertyNames, ;, if, (, implicitProto, ==, null, ), {, currentPropertyNames, =]
[., getImplicitPrototype, (, ), ;, Set, <, String, >, currentPropertyNames, ;, if, (, implicitProto, ==, null, ), {, currentPropertyNames, =]
[currentPropertyNames, ;, if, (, implicitProto, ==, null, ), {, currentPropertyNames, =, ImmutableSet, ., of, (, ), ;, }, else, {]
[if, (, implicitProto, ==, null, ), {, currentPropertyNames, =, ImmutableSet, ., of, (, ), ;, }, else, {, currentPropertyNames, =]
[if, (, implicitProto, ==, null, ), {, currentPropertyNames, =, ImmutableSet, ., of, (, ), ;, }, else, {, currentPropertyNames, =]
[(, ), ;, }, else, {, currentPropertyNames, =, implicitProto, ., getOwnPropertyNames, (, ), ;, }, for, (, String, name, :]
[currentPropertyNames, =, implicitProto, ., getOwnPropertyNames, (, ), ;, }, for, (, String, name, :, currentPropertyNames, ), {, ObjectType, oType, =]
[currentPropertyNames, =, implicitProto, ., getOwnPropertyNames, (, ), ;, }, for, (, String, name, :, currentPropertyNames, ), {, ObjectType, oType, =]
[getOwnPropertyNames, (, ), ;, }, for, (, String, name, :, currentPropertyNames, ), {, ObjectType, oType, =, properties, ., get, (]
[for, (, String, name, :, currentPropertyNames, ), {, ObjectType, oType, =, properties, ., get, (, name, ), ;, if, (]
[for, (, String, name, :, currentPropertyNames, ), {, ObjectType, oType, =, properties, ., get, (, name, ), ;, if, (]
[String, name, :, currentPropertyNames, ), {, ObjectType, oType, =, properties, ., get, (, name, ), ;, if, (, oType, !=]
[{, ObjectType, oType, =, properties, ., get, (, name, ), ;, if, (, oType, !=, null, ), {, if, (]
[ObjectType, oType, =, properties, ., get, (, name, ), ;, if, (, oType, !=, null, ), {, if, (, !]
[ObjectType, oType, =, properties, ., get, (, name, ), ;, if, (, oType, !=, null, ), {, if, (, !]
[ObjectType, oType, =, properties, ., get, (, name, ), ;, if, (, oType, !=, null, ), {, if, (, !]
[., get, (, name, ), ;, if, (, oType, !=, null, ), {, if, (, !, interfaceType, ., getPropertyType, (]
[;, if, (, oType, !=, null, ), {, if, (, !, interfaceType, ., getPropertyType, (, name, ), ., isEquivalentTo, (]
[;, if, (, oType, !=, null, ), {, if, (, !, interfaceType, ., getPropertyType, (, name, ), ., isEquivalentTo, (]
[!=, null, ), {, if, (, !, interfaceType, ., getPropertyType, (, name, ), ., isEquivalentTo, (, oType, ., getPropertyType, (]
[(, !, interfaceType, ., getPropertyType, (, name, ), ., isEquivalentTo, (, oType, ., getPropertyType, (, name, ), ), ), {]
[(, !, interfaceType, ., getPropertyType, (, name, ), ., isEquivalentTo, (, oType, ., getPropertyType, (, name, ), ), ), {]
[getPropertyType, (, name, ), ., isEquivalentTo, (, oType, ., getPropertyType, (, name, ), ), ), {, compiler, ., report, (]
[getPropertyType, (, name, ), ., isEquivalentTo, (, oType, ., getPropertyType, (, name, ), ), ), {, compiler, ., report, (]
[., isEquivalentTo, (, oType, ., getPropertyType, (, name, ), ), ), {, compiler, ., report, (, t, ., makeError, (]
[(, oType, ., getPropertyType, (, name, ), ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[., getPropertyType, (, name, ), ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,]
[(, name, ), ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,]
[), ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,, name, ,]
[), ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,, name, ,]
[report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,, name, ,, oType, ., toString, (, ), ,]
[report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,, name, ,, oType, ., toString, (, ), ,]
[functionName, ,, name, ,, oType, ., toString, (, ), ,, interfaceType, ., toString, (, ), ), ), ;, }, }]
[functionName, ,, name, ,, oType, ., toString, (, ), ,, interfaceType, ., toString, (, ), ), ), ;, }, }]
[oType, ., toString, (, ), ,, interfaceType, ., toString, (, ), ), ), ;, }, }, currentProperties, ., put, (]
[toString, (, ), ,, interfaceType, ., toString, (, ), ), ), ;, }, }, currentProperties, ., put, (, name, ,]
[), ), ;, }, }, currentProperties, ., put, (, name, ,, interfaceType, ), ;, }, for, (, ObjectType, iType, :]
[), ), ;, }, }, currentProperties, ., put, (, name, ,, interfaceType, ), ;, }, for, (, ObjectType, iType, :]
[put, (, name, ,, interfaceType, ), ;, }, for, (, ObjectType, iType, :, interfaceType, ., getCtorExtendedInterfaces, (, ), ), {]
[name, ,, interfaceType, ), ;, }, for, (, ObjectType, iType, :, interfaceType, ., getCtorExtendedInterfaces, (, ), ), {, checkInterfaceConflictProperties, (]
[interfaceType, ), ;, }, for, (, ObjectType, iType, :, interfaceType, ., getCtorExtendedInterfaces, (, ), ), {, checkInterfaceConflictProperties, (, t, ,]
[;, }, for, (, ObjectType, iType, :, interfaceType, ., getCtorExtendedInterfaces, (, ), ), {, checkInterfaceConflictProperties, (, t, ,, n, ,]
[for, (, ObjectType, iType, :, interfaceType, ., getCtorExtendedInterfaces, (, ), ), {, checkInterfaceConflictProperties, (, t, ,, n, ,, functionName, ,]
[ObjectType, iType, :, interfaceType, ., getCtorExtendedInterfaces, (, ), ), {, checkInterfaceConflictProperties, (, t, ,, n, ,, functionName, ,, properties, ,]
[:, interfaceType, ., getCtorExtendedInterfaces, (, ), ), {, checkInterfaceConflictProperties, (, t, ,, n, ,, functionName, ,, properties, ,, currentProperties, ,]
[,, iType, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, functionType, =]
[,, iType, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, functionType, =]
[}, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (]
[}, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (]
[n, ), {, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, n, ., getJSType, (, ), ), ;, String, functionPrivateName, =]
[n, ), {, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, n, ., getJSType, (, ), ), ;, String, functionPrivateName, =]
[n, ), {, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, n, ., getJSType, (, ), ), ;, String, functionPrivateName, =]
[getJSType, (, ), ), ;, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[getJSType, (, ), ), ;, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[getFirstChild, (, ), ., getString, (, ), ;, if, (, functionType, ., isConstructor, (, ), ), {, FunctionType, baseConstructor, =]
[getFirstChild, (, ), ., getString, (, ), ;, if, (, functionType, ., isConstructor, (, ), ), {, FunctionType, baseConstructor, =]
[if, (, functionType, ., isConstructor, (, ), ), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if, (]
[if, (, functionType, ., isConstructor, (, ), ), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if, (]
[if, (, functionType, ., isConstructor, (, ), ), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if, (]
[if, (, functionType, ., isConstructor, (, ), ), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if, (]
[functionType, ., isConstructor, (, ), ), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if, (, baseConstructor, !=]
[isConstructor, (, ), ), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if, (, baseConstructor, !=, getNativeType, (]
[), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&]
[), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&]
[FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&, baseConstructor, !=]
[=, functionType, ., getSuperClassConstructor, (, ), ;, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&, baseConstructor, !=, null, &&]
[=, functionType, ., getSuperClassConstructor, (, ), ;, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&, baseConstructor, !=, null, &&]
[if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&, baseConstructor, !=, null, &&, baseConstructor, ., isInterface, (, ), ), {]
[if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&, baseConstructor, !=, null, &&, baseConstructor, ., isInterface, (, ), ), {]
[getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&, baseConstructor, !=, null, &&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (]
[getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&, baseConstructor, !=, null, &&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (]
[&&, baseConstructor, !=, null, &&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[!=, null, &&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[&&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,]
[., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "constructor", ,]
[(, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "constructor", ,, functionPrivateName, ), ), ;, }, else, {, if, (]
[(, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "constructor", ,, functionPrivateName, ), ), ;, }, else, {, if, (]
[., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "constructor", ,, functionPrivateName, ), ), ;, }, else, {, if, (, baseConstructor, !=]
[(, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "constructor", ,, functionPrivateName, ), ), ;, }, else, {, if, (, baseConstructor, !=, getNativeType, (]
[functionPrivateName, ), ), ;, }, else, {, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), ), {, ObjectType, proto, =]
[functionPrivateName, ), ), ;, }, else, {, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), ), {, ObjectType, proto, =]
[(, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), ), {, ObjectType, proto, =, functionType, ., getPrototype, (, ), ;, if, (]
[(, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), ), {, ObjectType, proto, =, functionType, ., getPrototype, (, ), ;, if, (]
[(, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), ), {, ObjectType, proto, =, functionType, ., getPrototype, (, ), ;, if, (]
[), ), {, ObjectType, proto, =, functionType, ., getPrototype, (, ), ;, if, (, functionType, ., makesStructs, (, ), &&]
[), {, ObjectType, proto, =, functionType, ., getPrototype, (, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !]
[), {, ObjectType, proto, =, functionType, ., getPrototype, (, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !]
[getPrototype, (, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !, proto, ., isStruct, (, ), ), {]
[getPrototype, (, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !, proto, ., isStruct, (, ), ), {]
[if, (, functionType, ., makesStructs, (, ), &&, !, proto, ., isStruct, (, ), ), {, compiler, ., report, (]
[if, (, functionType, ., makesStructs, (, ), &&, !, proto, ., isStruct, (, ), ), {, compiler, ., report, (]
[makesStructs, (, ), &&, !, proto, ., isStruct, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[), &&, !, proto, ., isStruct, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[!, proto, ., isStruct, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,]
[., isStruct, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,]
[report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;, }, else, if, (]
[report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;, }, else, if, (]
[report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;, }, else, if, (]
[n, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;, }, else, if, (, functionType, ., makesDicts, (, ), &&]
[,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;, }, else, if, (, functionType, ., makesDicts, (, ), &&, !]
[,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;, }, else, if, (, functionType, ., makesDicts, (, ), &&, !]
[), ;, }, else, if, (, functionType, ., makesDicts, (, ), &&, !, proto, ., isDict, (, ), ), {]
[), ;, }, else, if, (, functionType, ., makesDicts, (, ), &&, !, proto, ., isDict, (, ), ), {]
[if, (, functionType, ., makesDicts, (, ), &&, !, proto, ., isDict, (, ), ), {, compiler, ., report, (]
[if, (, functionType, ., makesDicts, (, ), &&, !, proto, ., isDict, (, ), ), {, compiler, ., report, (]
[makesDicts, (, ), &&, !, proto, ., isDict, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[), &&, !, proto, ., isDict, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[!, proto, ., isDict, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,]
[., isDict, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "dict", ,]
[., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "dict", ,, functionPrivateName, ), ), ;, }, }, for, (, JSType, baseInterface, :]
[., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "dict", ,, functionPrivateName, ), ), ;, }, }, for, (, JSType, baseInterface, :]
[), ), ;, }, }, for, (, JSType, baseInterface, :, functionType, ., getImplementedInterfaces, (, ), ), {, boolean, badImplementedType, =]
[for, (, JSType, baseInterface, :, functionType, ., getImplementedInterfaces, (, ), ), {, boolean, badImplementedType, =, false, ;, ObjectType, baseInterfaceObj, =]
[for, (, JSType, baseInterface, :, functionType, ., getImplementedInterfaces, (, ), ), {, boolean, badImplementedType, =, false, ;, ObjectType, baseInterfaceObj, =]
[:, functionType, ., getImplementedInterfaces, (, ), ), {, boolean, badImplementedType, =, false, ;, ObjectType, baseInterfaceObj, =, ObjectType, ., cast, (]
[), ), {, boolean, badImplementedType, =, false, ;, ObjectType, baseInterfaceObj, =, ObjectType, ., cast, (, baseInterface, ), ;, if, (]
[), ), {, boolean, badImplementedType, =, false, ;, ObjectType, baseInterfaceObj, =, ObjectType, ., cast, (, baseInterface, ), ;, if, (]
[{, boolean, badImplementedType, =, false, ;, ObjectType, baseInterfaceObj, =, ObjectType, ., cast, (, baseInterface, ), ;, if, (, baseInterfaceObj, !=]
[ObjectType, baseInterfaceObj, =, ObjectType, ., cast, (, baseInterface, ), ;, if, (, baseInterfaceObj, !=, null, ), {, FunctionType, interfaceConstructor, =]
[ObjectType, baseInterfaceObj, =, ObjectType, ., cast, (, baseInterface, ), ;, if, (, baseInterfaceObj, !=, null, ), {, FunctionType, interfaceConstructor, =]
[), ;, if, (, baseInterfaceObj, !=, null, ), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (]
[), ;, if, (, baseInterfaceObj, !=, null, ), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (]
[), ;, if, (, baseInterfaceObj, !=, null, ), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (]
[if, (, baseInterfaceObj, !=, null, ), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (, interfaceConstructor, !=]
[baseInterfaceObj, !=, null, ), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (, interfaceConstructor, !=, null, &&]
[!=, null, ), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (, interfaceConstructor, !=, null, &&, !]
[!=, null, ), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (, interfaceConstructor, !=, null, &&, !]
[baseInterfaceObj, ., getConstructor, (, ), ;, if, (, interfaceConstructor, !=, null, &&, !, interfaceConstructor, ., isInterface, (, ), ), {]
[getConstructor, (, ), ;, if, (, interfaceConstructor, !=, null, &&, !, interfaceConstructor, ., isInterface, (, ), ), {, badImplementedType, =]
[interfaceConstructor, !=, null, &&, !, interfaceConstructor, ., isInterface, (, ), ), {, badImplementedType, =, true, ;, }, }, else, {]
[null, &&, !, interfaceConstructor, ., isInterface, (, ), ), {, badImplementedType, =, true, ;, }, }, else, {, badImplementedType, =]
[isInterface, (, ), ), {, badImplementedType, =, true, ;, }, }, else, {, badImplementedType, =, true, ;, }, if, (]
[), {, badImplementedType, =, true, ;, }, }, else, {, badImplementedType, =, true, ;, }, if, (, badImplementedType, ), {]
[badImplementedType, =, true, ;, }, }, else, {, badImplementedType, =, true, ;, }, if, (, badImplementedType, ), {, report, (]
[true, ;, }, }, else, {, badImplementedType, =, true, ;, }, if, (, badImplementedType, ), {, report, (, t, ,]
[}, }, else, {, badImplementedType, =, true, ;, }, if, (, badImplementedType, ), {, report, (, t, ,, n, ,]
[else, {, badImplementedType, =, true, ;, }, if, (, badImplementedType, ), {, report, (, t, ,, n, ,, BAD_IMPLEMENTED_TYPE, ,]
[;, }, if, (, badImplementedType, ), {, report, (, t, ,, n, ,, BAD_IMPLEMENTED_TYPE, ,, functionPrivateName, ), ;, }, }]
[;, }, if, (, badImplementedType, ), {, report, (, t, ,, n, ,, BAD_IMPLEMENTED_TYPE, ,, functionPrivateName, ), ;, }, }]
[badImplementedType, ), {, report, (, t, ,, n, ,, BAD_IMPLEMENTED_TYPE, ,, functionPrivateName, ), ;, }, }, validator, ., expectAllInterfaceProperties, (]
[{, report, (, t, ,, n, ,, BAD_IMPLEMENTED_TYPE, ,, functionPrivateName, ), ;, }, }, validator, ., expectAllInterfaceProperties, (, t, ,]
[(, t, ,, n, ,, BAD_IMPLEMENTED_TYPE, ,, functionPrivateName, ), ;, }, }, validator, ., expectAllInterfaceProperties, (, t, ,, n, ,]
[), ;, }, }, validator, ., expectAllInterfaceProperties, (, t, ,, n, ,, functionType, ), ;, }, }, else, if, (]
[), ;, }, }, validator, ., expectAllInterfaceProperties, (, t, ,, n, ,, functionType, ), ;, }, }, else, if, (]
[functionType, ), ;, }, }, else, if, (, functionType, ., isInterface, (, ), ), {, for, (, ObjectType, extInterface, :]
[functionType, ), ;, }, }, else, if, (, functionType, ., isInterface, (, ), ), {, for, (, ObjectType, extInterface, :]
[., isInterface, (, ), ), {, for, (, ObjectType, extInterface, :, functionType, ., getExtendedInterfaces, (, ), ), {, if, (]
[., isInterface, (, ), ), {, for, (, ObjectType, extInterface, :, functionType, ., getExtendedInterfaces, (, ), ), {, if, (]
[., isInterface, (, ), ), {, for, (, ObjectType, extInterface, :, functionType, ., getExtendedInterfaces, (, ), ), {, if, (]
[., isInterface, (, ), ), {, for, (, ObjectType, extInterface, :, functionType, ., getExtendedInterfaces, (, ), ), {, if, (]
[for, (, ObjectType, extInterface, :, functionType, ., getExtendedInterfaces, (, ), ), {, if, (, extInterface, ., getConstructor, (, ), !=]
[ObjectType, extInterface, :, functionType, ., getExtendedInterfaces, (, ), ), {, if, (, extInterface, ., getConstructor, (, ), !=, null, &&]
[extInterface, :, functionType, ., getExtendedInterfaces, (, ), ), {, if, (, extInterface, ., getConstructor, (, ), !=, null, &&, !]
[extInterface, :, functionType, ., getExtendedInterfaces, (, ), ), {, if, (, extInterface, ., getConstructor, (, ), !=, null, &&, !]
[extInterface, :, functionType, ., getExtendedInterfaces, (, ), ), {, if, (, extInterface, ., getConstructor, (, ), !=, null, &&, !]
[extInterface, ., getConstructor, (, ), !=, null, &&, !, extInterface, ., getConstructor, (, ), ., isInterface, (, ), ), {]
[extInterface, ., getConstructor, (, ), !=, null, &&, !, extInterface, ., getConstructor, (, ), ., isInterface, (, ), ), {]
[), !=, null, &&, !, extInterface, ., getConstructor, (, ), ., isInterface, (, ), ), {, compiler, ., report, (]
[), !=, null, &&, !, extInterface, ., getConstructor, (, ), ., isInterface, (, ), ), {, compiler, ., report, (]
[!, extInterface, ., getConstructor, (, ), ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[., getConstructor, (, ), ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[(, ), ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,]
[., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,]
[report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,, functionPrivateName, ), ), ;, }, }, if, (]
[report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,, functionPrivateName, ), ), ;, }, }, if, (]
[report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,, functionPrivateName, ), ), ;, }, }, if, (]
[n, ,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,, functionPrivateName, ), ), ;, }, }, if, (, functionType, ., getExtendedInterfacesCount, (, ), >]
[}, if, (, functionType, ., getExtendedInterfacesCount, (, ), >, 1, ), {, HashMap, <, String, ,, ObjectType, >, properties, =]
[properties, =, new, HashMap, <, String, ,, ObjectType, >, (, ), ;, HashMap, <, String, ,, ObjectType, >, currentProperties, =]
[,, ObjectType, >, currentProperties, =, new, HashMap, <, String, ,, ObjectType, >, (, ), ;, for, (, ObjectType, interfaceType, :]
[,, ObjectType, >, currentProperties, =, new, HashMap, <, String, ,, ObjectType, >, (, ), ;, for, (, ObjectType, interfaceType, :]
[<, String, ,, ObjectType, >, (, ), ;, for, (, ObjectType, interfaceType, :, functionType, ., getExtendedInterfaces, (, ), ), {]
[<, String, ,, ObjectType, >, (, ), ;, for, (, ObjectType, interfaceType, :, functionType, ., getExtendedInterfaces, (, ), ), {]
[), ;, for, (, ObjectType, interfaceType, :, functionType, ., getExtendedInterfaces, (, ), ), {, currentProperties, ., clear, (, ), ;]
[for, (, ObjectType, interfaceType, :, functionType, ., getExtendedInterfaces, (, ), ), {, currentProperties, ., clear, (, ), ;, checkInterfaceConflictProperties, (]
[ObjectType, interfaceType, :, functionType, ., getExtendedInterfaces, (, ), ), {, currentProperties, ., clear, (, ), ;, checkInterfaceConflictProperties, (, t, ,]
[:, functionType, ., getExtendedInterfaces, (, ), ), {, currentProperties, ., clear, (, ), ;, checkInterfaceConflictProperties, (, t, ,, n, ,]
[., getExtendedInterfaces, (, ), ), {, currentProperties, ., clear, (, ), ;, checkInterfaceConflictProperties, (, t, ,, n, ,, functionPrivateName, ,]
[(, ), ), {, currentProperties, ., clear, (, ), ;, checkInterfaceConflictProperties, (, t, ,, n, ,, functionPrivateName, ,, properties, ,]
[), {, currentProperties, ., clear, (, ), ;, checkInterfaceConflictProperties, (, t, ,, n, ,, functionPrivateName, ,, properties, ,, currentProperties, ,]
[., clear, (, ), ;, checkInterfaceConflictProperties, (, t, ,, n, ,, functionPrivateName, ,, properties, ,, currentProperties, ,, interfaceType, ), ;]
[., clear, (, ), ;, checkInterfaceConflictProperties, (, t, ,, n, ,, functionPrivateName, ,, properties, ,, currentProperties, ,, interfaceType, ), ;]
[;, checkInterfaceConflictProperties, (, t, ,, n, ,, functionPrivateName, ,, properties, ,, currentProperties, ,, interfaceType, ), ;, properties, ., putAll, (]
[), ;, }, }, }, }, private, void, visitCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, child, =]
[), ;, }, }, }, }, private, void, visitCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, child, =]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, child, =, n, ., getFirstChild, (, ), ;, JSType, childType, =]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, child, =, n, ., getFirstChild, (, ), ;, JSType, childType, =]
[t, ,, Node, n, ), {, Node, child, =, n, ., getFirstChild, (, ), ;, JSType, childType, =, getJSType, (]
[n, ., getFirstChild, (, ), ;, JSType, childType, =, getJSType, (, child, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[., getFirstChild, (, ), ;, JSType, childType, =, getJSType, (, child, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, !]
[., getFirstChild, (, ), ;, JSType, childType, =, getJSType, (, child, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, !]
[=, getJSType, (, child, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, childType, ., canBeCalled, (, ), ), {]
[(, child, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, childType, ., canBeCalled, (, ), ), {, report, (]
[), ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, childType, ., canBeCalled, (, ), ), {, report, (, t, ,]
[restrictByNotNullOrUndefined, (, ), ;, if, (, !, childType, ., canBeCalled, (, ), ), {, report, (, t, ,, n, ,]
[), ;, if, (, !, childType, ., canBeCalled, (, ), ), {, report, (, t, ,, n, ,, NOT_CALLABLE, ,]
[), ;, if, (, !, childType, ., canBeCalled, (, ), ), {, report, (, t, ,, n, ,, NOT_CALLABLE, ,]
[canBeCalled, (, ), ), {, report, (, t, ,, n, ,, NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;]
[), ), {, report, (, t, ,, n, ,, NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, ensureTyped, (]
[{, report, (, t, ,, n, ,, NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, ensureTyped, (, t, ,]
[,, childType, ., toString, (, ), ), ;, ensureTyped, (, t, ,, n, ), ;, return, ;, }, if, (]
[,, childType, ., toString, (, ), ), ;, ensureTyped, (, t, ,, n, ), ;, return, ;, }, if, (]
[t, ,, n, ), ;, return, ;, }, if, (, childType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =]
[t, ,, n, ), ;, return, ;, }, if, (, childType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =]
[(, childType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, childType, ., toMaybeFunctionType, (, ), ;, boolean, isExtern, =]
[), ), {, FunctionType, functionType, =, childType, ., toMaybeFunctionType, (, ), ;, boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =]
[), ), {, FunctionType, functionType, =, childType, ., toMaybeFunctionType, (, ), ;, boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =]
[toMaybeFunctionType, (, ), ;, boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, if, (]
[toMaybeFunctionType, (, ), ;, boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, if, (]
[toMaybeFunctionType, (, ), ;, boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, if, (]
[), ;, boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, if, (, functionJSDocInfo, !=]
[boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, if, (, functionJSDocInfo, !=, null, &&]
[boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, if, (, functionJSDocInfo, !=, null, &&]
[boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, if, (, functionJSDocInfo, !=, null, &&]
[functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, if, (, functionJSDocInfo, !=, null, &&, functionJSDocInfo, ., getAssociatedNode, (, ), !=]
[., getJSDocInfo, (, ), ;, if, (, functionJSDocInfo, !=, null, &&, functionJSDocInfo, ., getAssociatedNode, (, ), !=, null, ), {]
[(, ), ;, if, (, functionJSDocInfo, !=, null, &&, functionJSDocInfo, ., getAssociatedNode, (, ), !=, null, ), {, isExtern, =]
[(, ), ;, if, (, functionJSDocInfo, !=, null, &&, functionJSDocInfo, ., getAssociatedNode, (, ), !=, null, ), {, isExtern, =]
[(, ), ;, if, (, functionJSDocInfo, !=, null, &&, functionJSDocInfo, ., getAssociatedNode, (, ), !=, null, ), {, isExtern, =]
[), !=, null, ), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (]
[), !=, null, ), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (]
[), !=, null, ), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (]
[), !=, null, ), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (]
[=, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&]
[functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&, !]
[functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&, !]
[isFromExterns, (, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&, !, functionType, ., isNativeObjectType, (, ), &&]
[(, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&, !, functionType, ., isNativeObjectType, (, ), &&, (]
[(, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&, !, functionType, ., isNativeObjectType, (, ), &&, (]
[(, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&, !, functionType, ., isNativeObjectType, (, ), &&, (]
[(, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&, !, functionType, ., isNativeObjectType, (, ), &&, (]
[(, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&, !, functionType, ., isNativeObjectType, (, ), &&, (]
[), &&, !, functionType, ., isNativeObjectType, (, ), &&, (, functionType, ., getReturnType, (, ), ., isUnknownType, (, ), ||]
[), &&, !, functionType, ., isNativeObjectType, (, ), &&, (, functionType, ., getReturnType, (, ), ., isUnknownType, (, ), ||]
[), &&, !, functionType, ., isNativeObjectType, (, ), &&, (, functionType, ., getReturnType, (, ), ., isUnknownType, (, ), ||]
[functionType, ., getReturnType, (, ), ., isUnknownType, (, ), ||, functionType, ., getReturnType, (, ), ., isVoidType, (, ), ||]
[., getReturnType, (, ), ., isUnknownType, (, ), ||, functionType, ., getReturnType, (, ), ., isVoidType, (, ), ||, !]
[., isUnknownType, (, ), ||, functionType, ., getReturnType, (, ), ., isVoidType, (, ), ||, !, isExtern, ), ), {]
[(, ), ||, functionType, ., getReturnType, (, ), ., isVoidType, (, ), ||, !, isExtern, ), ), {, report, (]
[||, functionType, ., getReturnType, (, ), ., isVoidType, (, ), ||, !, isExtern, ), ), {, report, (, t, ,]
[., getReturnType, (, ), ., isVoidType, (, ), ||, !, isExtern, ), ), {, report, (, t, ,, n, ,]
[(, ), ., isVoidType, (, ), ||, !, isExtern, ), ), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,]
[(, ), ., isVoidType, (, ), ||, !, isExtern, ), ), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,]
[), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (]
[), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (]
[), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (]
[), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (]
[), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (]
[n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (, functionType, ., isOrdinaryFunction, (, ), &&]
[,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (, functionType, ., isOrdinaryFunction, (, ), &&, !]
[,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (, functionType, ., isOrdinaryFunction, (, ), &&, !]
[,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (, functionType, ., isOrdinaryFunction, (, ), &&, !]
[}, if, (, functionType, ., isOrdinaryFunction, (, ), &&, !, functionType, ., getTypeOfThis, (, ), ., isUnknownType, (, ), &&]
[if, (, functionType, ., isOrdinaryFunction, (, ), &&, !, functionType, ., getTypeOfThis, (, ), ., isUnknownType, (, ), &&, !]
[(, functionType, ., isOrdinaryFunction, (, ), &&, !, functionType, ., getTypeOfThis, (, ), ., isUnknownType, (, ), &&, !, (]
[(, functionType, ., isOrdinaryFunction, (, ), &&, !, functionType, ., getTypeOfThis, (, ), ., isUnknownType, (, ), &&, !, (]
[(, functionType, ., isOrdinaryFunction, (, ), &&, !, functionType, ., getTypeOfThis, (, ), ., isUnknownType, (, ), &&, !, (]
[(, functionType, ., isOrdinaryFunction, (, ), &&, !, functionType, ., getTypeOfThis, (, ), ., isUnknownType, (, ), &&, !, (]
[(, functionType, ., isOrdinaryFunction, (, ), &&, !, functionType, ., getTypeOfThis, (, ), ., isUnknownType, (, ), &&, !, (]
[getTypeOfThis, (, ), ., isUnknownType, (, ), &&, !, (, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), !=]
[), ., isUnknownType, (, ), &&, !, (, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), !=, null, &&]
[), ., isUnknownType, (, ), &&, !, (, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), !=, null, &&]
[), ., isUnknownType, (, ), &&, !, (, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), !=, null, &&]
[), ., isUnknownType, (, ), &&, !, (, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), !=, null, &&]
[(, ), !=, null, &&, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&]
[), !=, null, &&, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&, !]
[!=, null, &&, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&, !, (]
[!=, null, &&, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&, !, (]
[!=, null, &&, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&, !, (]
[(, ), ., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&, !, (, child, ., isGetElem, (, ), ||]
[(, ), ., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&, !, (, child, ., isGetElem, (, ), ||]
[(, ), ), &&, !, (, child, ., isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {]
[), &&, !, (, child, ., isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {, report, (]
[!, (, child, ., isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {, report, (, t, ,]
[child, ., isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {, report, (, t, ,, n, ,]
[isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,]
[isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,]
[), ), ), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }]
[), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }, visitParameterList, (]
[report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }, visitParameterList, (, t, ,]
[t, ,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }, visitParameterList, (, t, ,, n, ,]
[,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }, visitParameterList, (, t, ,, n, ,, functionType, ), ;]
[,, functionType, ., toString, (, ), ), ;, }, visitParameterList, (, t, ,, n, ,, functionType, ), ;, ensureTyped, (]
[., toString, (, ), ), ;, }, visitParameterList, (, t, ,, n, ,, functionType, ), ;, ensureTyped, (, t, ,]
[(, ), ), ;, }, visitParameterList, (, t, ,, n, ,, functionType, ), ;, ensureTyped, (, t, ,, n, ,]
[(, ), ), ;, }, visitParameterList, (, t, ,, n, ,, functionType, ), ;, ensureTyped, (, t, ,, n, ,]
[,, functionType, ), ;, ensureTyped, (, t, ,, n, ,, functionType, ., getReturnType, (, ), ), ;, }, else, {]
[), ;, ensureTyped, (, t, ,, n, ,, functionType, ., getReturnType, (, ), ), ;, }, else, {, ensureTyped, (]
[ensureTyped, (, t, ,, n, ,, functionType, ., getReturnType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,]
[private, void, visitParameterList, (, NodeTraversal, t, ,, Node, call, ,, FunctionType, functionType, ), {, Iterator, <, Node, >, arguments, =]
[private, void, visitParameterList, (, NodeTraversal, t, ,, Node, call, ,, FunctionType, functionType, ), {, Iterator, <, Node, >, arguments, =]
[private, void, visitParameterList, (, NodeTraversal, t, ,, Node, call, ,, FunctionType, functionType, ), {, Iterator, <, Node, >, arguments, =]
[FunctionType, functionType, ), {, Iterator, <, Node, >, arguments, =, call, ., children, (, ), ., iterator, (, ), ;]
[FunctionType, functionType, ), {, Iterator, <, Node, >, arguments, =, call, ., children, (, ), ., iterator, (, ), ;]
[children, (, ), ., iterator, (, ), ;, arguments, ., next, (, ), ;, Iterator, <, Node, >, parameters, =]
[children, (, ), ., iterator, (, ), ;, arguments, ., next, (, ), ;, Iterator, <, Node, >, parameters, =]
[children, (, ), ., iterator, (, ), ;, arguments, ., next, (, ), ;, Iterator, <, Node, >, parameters, =]
[;, Iterator, <, Node, >, parameters, =, functionType, ., getParameters, (, ), ., iterator, (, ), ;, int, ordinal, =]
[parameters, =, functionType, ., getParameters, (, ), ., iterator, (, ), ;, int, ordinal, =, 0, ;, Node, parameter, =]
[(, ), ., iterator, (, ), ;, int, ordinal, =, 0, ;, Node, parameter, =, null, ;, Node, argument, =]
[(, ), ;, int, ordinal, =, 0, ;, Node, parameter, =, null, ;, Node, argument, =, null, ;, while, (]
[(, ), ;, int, ordinal, =, 0, ;, Node, parameter, =, null, ;, Node, argument, =, null, ;, while, (]
[(, ), ;, int, ordinal, =, 0, ;, Node, parameter, =, null, ;, Node, argument, =, null, ;, while, (]
[0, ;, Node, parameter, =, null, ;, Node, argument, =, null, ;, while, (, arguments, ., hasNext, (, ), &&]
[;, Node, parameter, =, null, ;, Node, argument, =, null, ;, while, (, arguments, ., hasNext, (, ), &&, (]
[;, Node, parameter, =, null, ;, Node, argument, =, null, ;, while, (, arguments, ., hasNext, (, ), &&, (]
[;, Node, parameter, =, null, ;, Node, argument, =, null, ;, while, (, arguments, ., hasNext, (, ), &&, (]
[Node, argument, =, null, ;, while, (, arguments, ., hasNext, (, ), &&, (, parameters, ., hasNext, (, ), ||]
[Node, argument, =, null, ;, while, (, arguments, ., hasNext, (, ), &&, (, parameters, ., hasNext, (, ), ||]
[Node, argument, =, null, ;, while, (, arguments, ., hasNext, (, ), &&, (, parameters, ., hasNext, (, ), ||]
[=, null, ;, while, (, arguments, ., hasNext, (, ), &&, (, parameters, ., hasNext, (, ), ||, parameter, !=]
[;, while, (, arguments, ., hasNext, (, ), &&, (, parameters, ., hasNext, (, ), ||, parameter, !=, null, &&]
[;, while, (, arguments, ., hasNext, (, ), &&, (, parameters, ., hasNext, (, ), ||, parameter, !=, null, &&]
[parameters, ., hasNext, (, ), ||, parameter, !=, null, &&, parameter, ., isVarArgs, (, ), ), ), {, if, (]
[parameters, ., hasNext, (, ), ||, parameter, !=, null, &&, parameter, ., isVarArgs, (, ), ), ), {, if, (]
[!=, null, &&, parameter, ., isVarArgs, (, ), ), ), {, if, (, parameters, ., hasNext, (, ), ), {]
[&&, parameter, ., isVarArgs, (, ), ), ), {, if, (, parameters, ., hasNext, (, ), ), {, parameter, =]
[&&, parameter, ., isVarArgs, (, ), ), ), {, if, (, parameters, ., hasNext, (, ), ), {, parameter, =]
[), {, if, (, parameters, ., hasNext, (, ), ), {, parameter, =, parameters, ., next, (, ), ;, }]
[if, (, parameters, ., hasNext, (, ), ), {, parameter, =, parameters, ., next, (, ), ;, }, argument, =]
[if, (, parameters, ., hasNext, (, ), ), {, parameter, =, parameters, ., next, (, ), ;, }, argument, =]
[), ), {, parameter, =, parameters, ., next, (, ), ;, }, argument, =, arguments, ., next, (, ), ;]
[), ), {, parameter, =, parameters, ., next, (, ), ;, }, argument, =, arguments, ., next, (, ), ;]
[parameter, =, parameters, ., next, (, ), ;, }, argument, =, arguments, ., next, (, ), ;, ordinal, ++, ;]
[parameter, =, parameters, ., next, (, ), ;, }, argument, =, arguments, ., next, (, ), ;, ordinal, ++, ;]
[next, (, ), ;, }, argument, =, arguments, ., next, (, ), ;, ordinal, ++, ;, validator, ., expectArgumentMatchesParameter, (]
[), ;, }, argument, =, arguments, ., next, (, ), ;, ordinal, ++, ;, validator, ., expectArgumentMatchesParameter, (, t, ,]
[}, argument, =, arguments, ., next, (, ), ;, ordinal, ++, ;, validator, ., expectArgumentMatchesParameter, (, t, ,, argument, ,]
[=, arguments, ., next, (, ), ;, ordinal, ++, ;, validator, ., expectArgumentMatchesParameter, (, t, ,, argument, ,, getJSType, (]
[next, (, ), ;, ordinal, ++, ;, validator, ., expectArgumentMatchesParameter, (, t, ,, argument, ,, getJSType, (, argument, ), ,]
[), ;, ordinal, ++, ;, validator, ., expectArgumentMatchesParameter, (, t, ,, argument, ,, getJSType, (, argument, ), ,, getJSType, (]
[++, ;, validator, ., expectArgumentMatchesParameter, (, t, ,, argument, ,, getJSType, (, argument, ), ,, getJSType, (, parameter, ), ,]
[validator, ., expectArgumentMatchesParameter, (, t, ,, argument, ,, getJSType, (, argument, ), ,, getJSType, (, parameter, ), ,, call, ,]
[,, getJSType, (, argument, ), ,, getJSType, (, parameter, ), ,, call, ,, ordinal, ), ;, }, int, numArgs, =]
[,, getJSType, (, argument, ), ,, getJSType, (, parameter, ), ,, call, ,, ordinal, ), ;, }, int, numArgs, =]
[,, getJSType, (, argument, ), ,, getJSType, (, parameter, ), ,, call, ,, ordinal, ), ;, }, int, numArgs, =]
[getJSType, (, parameter, ), ,, call, ,, ordinal, ), ;, }, int, numArgs, =, call, ., getChildCount, (, ), -]
[call, ,, ordinal, ), ;, }, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, int, minArgs, =]
[call, ,, ordinal, ), ;, }, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, int, minArgs, =]
[call, ., getChildCount, (, ), -, 1, ;, int, minArgs, =, functionType, ., getMinArguments, (, ), ;, int, maxArgs, =]
[call, ., getChildCount, (, ), -, 1, ;, int, minArgs, =, functionType, ., getMinArguments, (, ), ;, int, maxArgs, =]
[int, minArgs, =, functionType, ., getMinArguments, (, ), ;, int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if, (]
[int, minArgs, =, functionType, ., getMinArguments, (, ), ;, int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if, (]
[int, minArgs, =, functionType, ., getMinArguments, (, ), ;, int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if, (]
[=, functionType, ., getMinArguments, (, ), ;, int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if, (, minArgs, >]
[., getMinArguments, (, ), ;, int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if, (, minArgs, >, numArgs, ||]
[., getMinArguments, (, ), ;, int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if, (, minArgs, >, numArgs, ||]
[(, ), ;, int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if, (, minArgs, >, numArgs, ||, maxArgs, <]
[int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if, (, minArgs, >, numArgs, ||, maxArgs, <, numArgs, ), {]
[=, functionType, ., getMaxArguments, (, ), ;, if, (, minArgs, >, numArgs, ||, maxArgs, <, numArgs, ), {, report, (]
[., getMaxArguments, (, ), ;, if, (, minArgs, >, numArgs, ||, maxArgs, <, numArgs, ), {, report, (, t, ,]
[(, ), ;, if, (, minArgs, >, numArgs, ||, maxArgs, <, numArgs, ), {, report, (, t, ,, call, ,]
[;, if, (, minArgs, >, numArgs, ||, maxArgs, <, numArgs, ), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,]
[;, if, (, minArgs, >, numArgs, ||, maxArgs, <, numArgs, ), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,]
[>, numArgs, ||, maxArgs, <, numArgs, ), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (]
[>, numArgs, ||, maxArgs, <, numArgs, ), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (]
[), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,]
[(, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,, false, ), ,]
[(, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,, false, ), ,]
[,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,, false, ), ,, String, ., valueOf, (]
[validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,, false, ), ,, String, ., valueOf, (, numArgs, ), ,]
[validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,, false, ), ,, String, ., valueOf, (, numArgs, ), ,]
[call, ., getFirstChild, (, ), ,, false, ), ,, String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (]
[(, ), ,, false, ), ,, String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,]
[(, ), ,, false, ), ,, String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,]
[(, ), ,, false, ), ,, String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,]
[,, false, ), ,, String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=]
[,, false, ), ,, String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=]
[String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, ., MAX_VALUE, ?]
[String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, ., MAX_VALUE, ?]
[String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, ., MAX_VALUE, ?]
[valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, ., MAX_VALUE, ?, " and no more than ", +]
[numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, ., MAX_VALUE, ?, " and no more than ", +, maxArgs, +]
[,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, ., MAX_VALUE, ?, " and no more than ", +, maxArgs, +, " argument(s)", :]
[:, "", ), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, JSType, jsType, =]
[), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, JSType, jsType, =, getJSType, (]
[), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, JSType, jsType, =, getJSType, (]
[t, ,, Node, n, ), {, JSType, jsType, =, getJSType, (, t, ., getEnclosingFunction, (, ), ), ;, if, (]
[t, ,, Node, n, ), {, JSType, jsType, =, getJSType, (, t, ., getEnclosingFunction, (, ), ), ;, if, (]
[(, t, ., getEnclosingFunction, (, ), ), ;, if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =]
[(, t, ., getEnclosingFunction, (, ), ), ;, if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =]
[(, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, JSType, returnType, =]
[(, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, JSType, returnType, =]
[FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (]
[FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (]
[=, jsType, ., toMaybeFunctionType, (, ), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, returnType, ==]
[toMaybeFunctionType, (, ), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, returnType, ==, null, ), {]
[), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, returnType, ==, null, ), {, returnType, =]
[JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, returnType, ==, null, ), {, returnType, =, getNativeType, (]
[), ;, if, (, returnType, ==, null, ), {, returnType, =, getNativeType, (, VOID_TYPE, ), ;, }, Node, valueNode, =]
[), ;, if, (, returnType, ==, null, ), {, returnType, =, getNativeType, (, VOID_TYPE, ), ;, }, Node, valueNode, =]
[getNativeType, (, VOID_TYPE, ), ;, }, Node, valueNode, =, n, ., getFirstChild, (, ), ;, JSType, actualReturnType, ;, if, (]
[getNativeType, (, VOID_TYPE, ), ;, }, Node, valueNode, =, n, ., getFirstChild, (, ), ;, JSType, actualReturnType, ;, if, (]
[VOID_TYPE, ), ;, }, Node, valueNode, =, n, ., getFirstChild, (, ), ;, JSType, actualReturnType, ;, if, (, valueNode, ==]
[}, Node, valueNode, =, n, ., getFirstChild, (, ), ;, JSType, actualReturnType, ;, if, (, valueNode, ==, null, ), {]
[valueNode, =, n, ., getFirstChild, (, ), ;, JSType, actualReturnType, ;, if, (, valueNode, ==, null, ), {, actualReturnType, =]
[n, ., getFirstChild, (, ), ;, JSType, actualReturnType, ;, if, (, valueNode, ==, null, ), {, actualReturnType, =, getNativeType, (]
[(, ), ;, JSType, actualReturnType, ;, if, (, valueNode, ==, null, ), {, actualReturnType, =, getNativeType, (, VOID_TYPE, ), ;]
[;, JSType, actualReturnType, ;, if, (, valueNode, ==, null, ), {, actualReturnType, =, getNativeType, (, VOID_TYPE, ), ;, valueNode, =]
[(, valueNode, ==, null, ), {, actualReturnType, =, getNativeType, (, VOID_TYPE, ), ;, valueNode, =, n, ;, }, else, {]
[==, null, ), {, actualReturnType, =, getNativeType, (, VOID_TYPE, ), ;, valueNode, =, n, ;, }, else, {, actualReturnType, =]
[), {, actualReturnType, =, getNativeType, (, VOID_TYPE, ), ;, valueNode, =, n, ;, }, else, {, actualReturnType, =, getJSType, (]
[getNativeType, (, VOID_TYPE, ), ;, valueNode, =, n, ;, }, else, {, actualReturnType, =, getJSType, (, valueNode, ), ;, }]
[getNativeType, (, VOID_TYPE, ), ;, valueNode, =, n, ;, }, else, {, actualReturnType, =, getJSType, (, valueNode, ), ;, }]
[;, valueNode, =, n, ;, }, else, {, actualReturnType, =, getJSType, (, valueNode, ), ;, }, validator, ., expectCanAssignTo, (]
[=, n, ;, }, else, {, actualReturnType, =, getJSType, (, valueNode, ), ;, }, validator, ., expectCanAssignTo, (, t, ,]
[;, }, else, {, actualReturnType, =, getJSType, (, valueNode, ), ;, }, validator, ., expectCanAssignTo, (, t, ,, valueNode, ,]
[else, {, actualReturnType, =, getJSType, (, valueNode, ), ;, }, validator, ., expectCanAssignTo, (, t, ,, valueNode, ,, actualReturnType, ,]
[actualReturnType, =, getJSType, (, valueNode, ), ;, }, validator, ., expectCanAssignTo, (, t, ,, valueNode, ,, actualReturnType, ,, returnType, ,]
[;, }, }, private, void, visitBinaryOperator, (, int, op, ,, NodeTraversal, t, ,, Node, n, ), {, Node, left, =]
[;, }, }, private, void, visitBinaryOperator, (, int, op, ,, NodeTraversal, t, ,, Node, n, ), {, Node, left, =]
[,, NodeTraversal, t, ,, Node, n, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, JSType, leftType, =]
[t, ,, Node, n, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, JSType, leftType, =, getJSType, (]
[Node, left, =, n, ., getFirstChild, (, ), ;, JSType, leftType, =, getJSType, (, left, ), ;, Node, right, =]
[Node, left, =, n, ., getFirstChild, (, ), ;, JSType, leftType, =, getJSType, (, left, ), ;, Node, right, =]
[JSType, leftType, =, getJSType, (, left, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, JSType, rightType, =]
[=, getJSType, (, left, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (]
[;, Node, right, =, n, ., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, switch, (]
[n, ., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, switch, (, op, ), {, case]
[n, ., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, switch, (, op, ), {, case]
[;, JSType, rightType, =, getJSType, (, right, ), ;, switch, (, op, ), {, case, Token, ., ASSIGN_LSH, :, case]
[;, JSType, rightType, =, getJSType, (, right, ), ;, switch, (, op, ), {, case, Token, ., ASSIGN_LSH, :, case]
[(, right, ), ;, switch, (, op, ), {, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[(, right, ), ;, switch, (, op, ), {, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[(, op, ), {, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case]
[(, op, ), {, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, if, (]
[LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, if, (, !]
[LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, if, (, !]
[case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, if, (, !, leftType, ., matchesInt32Context, (, ), ), {]
[., ASSIGN_URSH, :, case, Token, ., URSH, :, if, (, !, leftType, ., matchesInt32Context, (, ), ), {, report, (]
[:, case, Token, ., URSH, :, if, (, !, leftType, ., matchesInt32Context, (, ), ), {, report, (, t, ,]
[Token, ., URSH, :, if, (, !, leftType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, left, ,]
[URSH, :, if, (, !, leftType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, left, ,, BIT_OPERATION, ,]
[URSH, :, if, (, !, leftType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, left, ,, BIT_OPERATION, ,]
[!, leftType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, left, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (]
[!, leftType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, left, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (]
[{, report, (, t, ,, left, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,]
[{, report, (, t, ,, left, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,]
[., opToStr, (, n, ., getType, (, ), ), ,, leftType, ., toString, (, ), ), ;, }, if, (]
[opToStr, (, n, ., getType, (, ), ), ,, leftType, ., toString, (, ), ), ;, }, if, (, !]
[opToStr, (, n, ., getType, (, ), ), ,, leftType, ., toString, (, ), ), ;, }, if, (, !]
[), ,, leftType, ., toString, (, ), ), ;, }, if, (, !, rightType, ., matchesUint32Context, (, ), ), {]
[leftType, ., toString, (, ), ), ;, }, if, (, !, rightType, ., matchesUint32Context, (, ), ), {, report, (]
[toString, (, ), ), ;, }, if, (, !, rightType, ., matchesUint32Context, (, ), ), {, report, (, t, ,]
[), ), ;, }, if, (, !, rightType, ., matchesUint32Context, (, ), ), {, report, (, t, ,, right, ,]
[;, }, if, (, !, rightType, ., matchesUint32Context, (, ), ), {, report, (, t, ,, right, ,, BIT_OPERATION, ,]
[;, }, if, (, !, rightType, ., matchesUint32Context, (, ), ), {, report, (, t, ,, right, ,, BIT_OPERATION, ,]
[!, rightType, ., matchesUint32Context, (, ), ), {, report, (, t, ,, right, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (]
[!, rightType, ., matchesUint32Context, (, ), ), {, report, (, t, ,, right, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (]
[{, report, (, t, ,, right, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,]
[{, report, (, t, ,, right, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,]
[opToStr, (, n, ., getType, (, ), ), ,, rightType, ., toString, (, ), ), ;, }, break, ;, case]
[opToStr, (, n, ., getType, (, ), ), ,, rightType, ., toString, (, ), ), ;, }, break, ;, case]
[(, ), ), ,, rightType, ., toString, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN_DIV, :, case]
[(, ), ), ,, rightType, ., toString, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN_DIV, :, case]
[., toString, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case]
[., toString, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case]
[;, }, break, ;, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case]
[;, }, break, ;, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case]
[Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case]
[Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case]
[Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case]
[Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case]
[Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case]
[case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., SUB, :]
[case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., SUB, :]
[:, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., SUB, :, validator, ., expectNumber, (]
[Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., SUB, :, validator, ., expectNumber, (, t, ,]
[MOD, :, case, Token, ., MUL, :, case, Token, ., SUB, :, validator, ., expectNumber, (, t, ,, left, ,]
[case, Token, ., MUL, :, case, Token, ., SUB, :, validator, ., expectNumber, (, t, ,, left, ,, leftType, ,]
[MUL, :, case, Token, ., SUB, :, validator, ., expectNumber, (, t, ,, left, ,, leftType, ,, "left operand", ), ;]
[MUL, :, case, Token, ., SUB, :, validator, ., expectNumber, (, t, ,, left, ,, leftType, ,, "left operand", ), ;]
[., SUB, :, validator, ., expectNumber, (, t, ,, left, ,, leftType, ,, "left operand", ), ;, validator, ., expectNumber, (]
[:, validator, ., expectNumber, (, t, ,, left, ,, leftType, ,, "left operand", ), ;, validator, ., expectNumber, (, t, ,]
[., expectNumber, (, t, ,, left, ,, leftType, ,, "left operand", ), ;, validator, ., expectNumber, (, t, ,, right, ,]
[(, t, ,, left, ,, leftType, ,, "left operand", ), ;, validator, ., expectNumber, (, t, ,, right, ,, rightType, ,]
[,, "left operand", ), ;, validator, ., expectNumber, (, t, ,, right, ,, rightType, ,, "right operand", ), ;, break, ;, case]
[,, "left operand", ), ;, validator, ., expectNumber, (, t, ,, right, ,, rightType, ,, "right operand", ), ;, break, ;, case]
[., expectNumber, (, t, ,, right, ,, rightType, ,, "right operand", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, case]
[., expectNumber, (, t, ,, right, ,, rightType, ,, "right operand", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, case]
[right, ,, rightType, ,, "right operand", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case]
[right, ,, rightType, ,, "right operand", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case]
[), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case]
[), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., BITAND, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., BITAND, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case]
[case, Token, ., ASSIGN_BITOR, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :]
[case, Token, ., ASSIGN_BITOR, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :]
[:, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, validator, ., expectBitwiseable, (]
[Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, validator, ., expectBitwiseable, (, t, ,]
[BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, validator, ., expectBitwiseable, (, t, ,, left, ,]
[case, Token, ., BITXOR, :, case, Token, ., BITOR, :, validator, ., expectBitwiseable, (, t, ,, left, ,, leftType, ,]
[BITXOR, :, case, Token, ., BITOR, :, validator, ., expectBitwiseable, (, t, ,, left, ,, leftType, ,, "bad left operand to bitwise operator", ), ;]
[BITXOR, :, case, Token, ., BITOR, :, validator, ., expectBitwiseable, (, t, ,, left, ,, leftType, ,, "bad left operand to bitwise operator", ), ;]
[., BITOR, :, validator, ., expectBitwiseable, (, t, ,, left, ,, leftType, ,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (]
[:, validator, ., expectBitwiseable, (, t, ,, left, ,, leftType, ,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (, t, ,]
[., expectBitwiseable, (, t, ,, left, ,, leftType, ,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (, t, ,, right, ,]
[(, t, ,, left, ,, leftType, ,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (, t, ,, right, ,, rightType, ,]
[,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (, t, ,, right, ,, rightType, ,, "bad right operand to bitwise operator", ), ;, break, ;, case]
[,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (, t, ,, right, ,, rightType, ,, "bad right operand to bitwise operator", ), ;, break, ;, case]
[., expectBitwiseable, (, t, ,, right, ,, rightType, ,, "bad right operand to bitwise operator", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case]
[., expectBitwiseable, (, t, ,, right, ,, rightType, ,, "bad right operand to bitwise operator", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case]
[,, "bad right operand to bitwise operator", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, break, ;, default, :]
[), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, break, ;, default, :, report, (]
[break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, break, ;, default, :, report, (, t, ,]
[case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, break, ;, default, :, report, (, t, ,, n, ,]
[., ASSIGN_ADD, :, case, Token, ., ADD, :, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,]
[., ASSIGN_ADD, :, case, Token, ., ADD, :, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,]
[Token, ., ADD, :, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (]
[;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (, op, ), ), ;, }]
[:, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (, op, ), ), ;, }, ensureTyped, (]
[(, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (, op, ), ), ;, }, ensureTyped, (, t, ,]
[n, ), ;, }, private, void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo, ,, Node, value, ), {, if, (]
[n, ), ;, }, private, void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo, ,, Node, value, ), {, if, (]
[n, ), ;, }, private, void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo, ,, Node, value, ), {, if, (]
[;, }, private, void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo, ,, Node, value, ), {, if, (, declInfo, ==]
[private, void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo, ,, Node, value, ), {, if, (, declInfo, ==, null, ||]
[void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo, ,, Node, value, ), {, if, (, declInfo, ==, null, ||, !]
[void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo, ,, Node, value, ), {, if, (, declInfo, ==, null, ||, !]
[if, (, declInfo, ==, null, ||, !, declInfo, ., hasEnumParameterType, (, ), ), {, return, ;, }, JSType, valueType, =]
[declInfo, ==, null, ||, !, declInfo, ., hasEnumParameterType, (, ), ), {, return, ;, }, JSType, valueType, =, getJSType, (]
[declInfo, ., hasEnumParameterType, (, ), ), {, return, ;, }, JSType, valueType, =, getJSType, (, value, ), ;, if, (]
[., hasEnumParameterType, (, ), ), {, return, ;, }, JSType, valueType, =, getJSType, (, value, ), ;, if, (, !]
[., hasEnumParameterType, (, ), ), {, return, ;, }, JSType, valueType, =, getJSType, (, value, ), ;, if, (, !]
[(, value, ), ;, if, (, !, valueType, ., isEnumType, (, ), ), {, return, ;, }, EnumType, valueEnumType, =]
[(, value, ), ;, if, (, !, valueType, ., isEnumType, (, ), ), {, return, ;, }, EnumType, valueEnumType, =]
[isEnumType, (, ), ), {, return, ;, }, EnumType, valueEnumType, =, valueType, ., toMaybeEnumType, (, ), ;, JSType, valueEnumPrimitiveType, =]
[isEnumType, (, ), ), {, return, ;, }, EnumType, valueEnumType, =, valueType, ., toMaybeEnumType, (, ), ;, JSType, valueEnumPrimitiveType, =]
[isEnumType, (, ), ), {, return, ;, }, EnumType, valueEnumType, =, valueType, ., toMaybeEnumType, (, ), ;, JSType, valueEnumPrimitiveType, =]
[=, valueType, ., toMaybeEnumType, (, ), ;, JSType, valueEnumPrimitiveType, =, valueEnumType, ., getElementsType, (, ), ., getPrimitiveType, (, ), ;]
[=, valueType, ., toMaybeEnumType, (, ), ;, JSType, valueEnumPrimitiveType, =, valueEnumType, ., getElementsType, (, ), ., getPrimitiveType, (, ), ;]
[(, ), ;, JSType, valueEnumPrimitiveType, =, valueEnumType, ., getElementsType, (, ), ., getPrimitiveType, (, ), ;, validator, ., expectCanAssignTo, (]
[;, JSType, valueEnumPrimitiveType, =, valueEnumType, ., getElementsType, (, ), ., getPrimitiveType, (, ), ;, validator, ., expectCanAssignTo, (, t, ,]
[valueEnumPrimitiveType, =, valueEnumType, ., getElementsType, (, ), ., getPrimitiveType, (, ), ;, validator, ., expectCanAssignTo, (, t, ,, value, ,]
[valueEnumType, ., getElementsType, (, ), ., getPrimitiveType, (, ), ;, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueEnumPrimitiveType, ,]
[valueEnumType, ., getElementsType, (, ), ., getPrimitiveType, (, ), ;, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueEnumPrimitiveType, ,]
[valueEnumType, ., getElementsType, (, ), ., getPrimitiveType, (, ), ;, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueEnumPrimitiveType, ,]
[), ;, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueEnumPrimitiveType, ,, declInfo, ., getEnumParameterType, (, ), ., evaluate, (]
[), ;, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueEnumPrimitiveType, ,, declInfo, ., getEnumParameterType, (, ), ., evaluate, (]
[t, ,, value, ,, valueEnumPrimitiveType, ,, declInfo, ., getEnumParameterType, (, ), ., evaluate, (, t, ., getScope, (, ), ,]
[,, valueEnumPrimitiveType, ,, declInfo, ., getEnumParameterType, (, ), ., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ,]
[), ,, typeRegistry, ), ,, "incompatible enum element types", ), ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =]
[), ,, typeRegistry, ), ,, "incompatible enum element types", ), ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =]
[}, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (]
[}, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (]
[JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==]
[n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return]
[{, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, getNativeType, (]
[(, ), ;, if, (, jsType, ==, null, ), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, {, return]
[;, }, else, {, return, jsType, ;, }, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ), {]
[else, {, return, jsType, ;, }, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ), {, ensureTyped, (]
[return, jsType, ;, }, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ), {, ensureTyped, (, t, ,]
[;, }, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ), {, ensureTyped, (, t, ,, n, ,]
[}, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ), {, ensureTyped, (, t, ,, n, ,, getNativeType, (]
[(, UNKNOWN_TYPE, ), ), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSTypeNative, type, ), {]
[), ), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSTypeNative, type, ), {, ensureTyped, (]
[;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSTypeNative, type, ), {, ensureTyped, (, t, ,]
[private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSTypeNative, type, ), {, ensureTyped, (, t, ,, n, ,]
[ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSTypeNative, type, ), {, ensureTyped, (, t, ,, n, ,, getNativeType, (]
[(, type, ), ), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ), {]
[(, type, ), ), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ), {]
[;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ), {, Preconditions, ., checkState, (]
[;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ), {, Preconditions, ., checkState, (]
[;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ), {, Preconditions, ., checkState, (]
[}, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ), {, Preconditions, ., checkState, (, !]
[}, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ), {, Preconditions, ., checkState, (, !]
[t, ,, Node, n, ,, JSType, type, ), {, Preconditions, ., checkState, (, !, n, ., isFunction, (, ), ||]
[t, ,, Node, n, ,, JSType, type, ), {, Preconditions, ., checkState, (, !, n, ., isFunction, (, ), ||]
[type, ), {, Preconditions, ., checkState, (, !, n, ., isFunction, (, ), ||, type, ., isFunctionType, (, ), ||]
[type, ), {, Preconditions, ., checkState, (, !, n, ., isFunction, (, ), ||, type, ., isFunctionType, (, ), ||]
[isFunction, (, ), ||, type, ., isFunctionType, (, ), ||, type, ., isUnknownType, (, ), ), ;, JSDocInfo, info, =]
[isFunction, (, ), ||, type, ., isFunctionType, (, ), ||, type, ., isUnknownType, (, ), ), ;, JSDocInfo, info, =]
[), ||, type, ., isUnknownType, (, ), ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[), ||, type, ., isUnknownType, (, ), ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[type, ., isUnknownType, (, ), ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, if, (]
[), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, if, (]
[;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {, JSType, infoType, =]
[;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {, JSType, infoType, =]
[;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {, JSType, infoType, =]
[if, (, info, ., hasType, (, ), ), {, JSType, infoType, =, info, ., getType, (, ), ., evaluate, (]
[if, (, info, ., hasType, (, ), ), {, JSType, infoType, =, info, ., getType, (, ), ., evaluate, (]
[), ), {, JSType, infoType, =, info, ., getType, (, ), ., evaluate, (, t, ., getScope, (, ), ,]
[JSType, infoType, =, info, ., getType, (, ), ., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ;]
[JSType, infoType, =, info, ., getType, (, ), ., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ;]
[., getType, (, ), ., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ;, validator, ., expectCanCast, (]
[(, ), ., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ;, validator, ., expectCanCast, (, t, ,]
[., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ;, validator, ., expectCanCast, (, t, ,, n, ,]
[(, t, ., getScope, (, ), ,, typeRegistry, ), ;, validator, ., expectCanCast, (, t, ,, n, ,, infoType, ,]
[getScope, (, ), ,, typeRegistry, ), ;, validator, ., expectCanCast, (, t, ,, n, ,, infoType, ,, type, ), ;]
[), ,, typeRegistry, ), ;, validator, ., expectCanCast, (, t, ,, n, ,, infoType, ,, type, ), ;, type, =]
[validator, ., expectCanCast, (, t, ,, n, ,, infoType, ,, type, ), ;, type, =, infoType, ;, }, if, (]
[validator, ., expectCanCast, (, t, ,, n, ,, infoType, ,, type, ), ;, type, =, infoType, ;, }, if, (]
[validator, ., expectCanCast, (, t, ,, n, ,, infoType, ,, type, ), ;, type, =, infoType, ;, }, if, (]
[n, ,, infoType, ,, type, ), ;, type, =, infoType, ;, }, if, (, info, ., isImplicitCast, (, ), &&]
[,, infoType, ,, type, ), ;, type, =, infoType, ;, }, if, (, info, ., isImplicitCast, (, ), &&, !]
[type, =, infoType, ;, }, if, (, info, ., isImplicitCast, (, ), &&, !, inExterns, ), {, String, propName, =]
[type, =, infoType, ;, }, if, (, info, ., isImplicitCast, (, ), &&, !, inExterns, ), {, String, propName, =]
[type, =, infoType, ;, }, if, (, info, ., isImplicitCast, (, ), &&, !, inExterns, ), {, String, propName, =]
[(, info, ., isImplicitCast, (, ), &&, !, inExterns, ), {, String, propName, =, n, ., isGetProp, (, ), ?]
[(, info, ., isImplicitCast, (, ), &&, !, inExterns, ), {, String, propName, =, n, ., isGetProp, (, ), ?]
[(, info, ., isImplicitCast, (, ), &&, !, inExterns, ), {, String, propName, =, n, ., isGetProp, (, ), ?]
[{, String, propName, =, n, ., isGetProp, (, ), ?, n, ., getLastChild, (, ), ., getString, (, ), :]
[propName, =, n, ., isGetProp, (, ), ?, n, ., getLastChild, (, ), ., getString, (, ), :, "(missing)", ;]
[propName, =, n, ., isGetProp, (, ), ?, n, ., getLastChild, (, ), ., getString, (, ), :, "(missing)", ;]
[isGetProp, (, ), ?, n, ., getLastChild, (, ), ., getString, (, ), :, "(missing)", ;, compiler, ., report, (]
[isGetProp, (, ), ?, n, ., getLastChild, (, ), ., getString, (, ), :, "(missing)", ;, compiler, ., report, (]
[n, ., getLastChild, (, ), ., getString, (, ), :, "(missing)", ;, compiler, ., report, (, t, ., makeError, (]
[getLastChild, (, ), ., getString, (, ), :, "(missing)", ;, compiler, ., report, (, t, ., makeError, (, n, ,]
[), ., getString, (, ), :, "(missing)", ;, compiler, ., report, (, t, ., makeError, (, n, ,, ILLEGAL_IMPLICIT_CAST, ,]
[compiler, ., report, (, t, ., makeError, (, n, ,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }, }, if, (]
[compiler, ., report, (, t, ., makeError, (, n, ,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }, }, if, (]
[compiler, ., report, (, t, ., makeError, (, n, ,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }, }, if, (]
[makeError, (, n, ,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }, }, if, (, n, ., getJSType, (, ), ==]
[,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }, }, if, (, n, ., getJSType, (, ), ==, null, ), {]
[,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }, }, if, (, n, ., getJSType, (, ), ==, null, ), {]
[), ), ;, }, }, if, (, n, ., getJSType, (, ), ==, null, ), {, n, ., setJSType, (]
[null, ), {, n, ., setJSType, (, type, ), ;, }, }, double, getTypedPercent, (, ), {, int, total, =]
[null, ), {, n, ., setJSType, (, type, ), ;, }, }, double, getTypedPercent, (, ), {, int, total, =]
[null, ), {, n, ., setJSType, (, type, ), ;, }, }, double, getTypedPercent, (, ), {, int, total, =]
[{, n, ., setJSType, (, type, ), ;, }, }, double, getTypedPercent, (, ), {, int, total, =, nullCount, +]
[., setJSType, (, type, ), ;, }, }, double, getTypedPercent, (, ), {, int, total, =, nullCount, +, unknownCount, +]
[type, ), ;, }, }, double, getTypedPercent, (, ), {, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return]
[type, ), ;, }, }, double, getTypedPercent, (, ), {, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return]
[), ;, }, }, double, getTypedPercent, (, ), {, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return, (]
[), ;, }, }, double, getTypedPercent, (, ), {, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return, (]
[}, }, double, getTypedPercent, (, ), {, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return, (, total, ==]
[getTypedPercent, (, ), {, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return, (, total, ==, 0, ), ?]
[), {, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return, (, total, ==, 0, ), ?, 0.0, :]
[), {, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return, (, total, ==, 0, ), ?, 0.0, :]
[{, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return, (, total, ==, 0, ), ?, 0.0, :, (]
[{, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return, (, total, ==, 0, ), ?, 0.0, :, (]
[total, =, nullCount, +, unknownCount, +, typedCount, ;, return, (, total, ==, 0, ), ?, 0.0, :, (, 100.0, *]
[+, unknownCount, +, typedCount, ;, return, (, total, ==, 0, ), ?, 0.0, :, (, 100.0, *, typedCount, ), /]
[0.0, :, (, 100.0, *, typedCount, ), /, total, ;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return]
[0.0, :, (, 100.0, *, typedCount, ), /, total, ;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return]
[*, typedCount, ), /, total, ;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, ., getNativeType, (]
