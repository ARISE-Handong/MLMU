[;, public, static, final, DiagnosticType, VAR_MULTIPLY_DECLARED_ERROR, =, DiagnosticType, ., error, (, "JSC_VAR_MULTIPLY_DECLARED_ERROR", ,, "Variable {0} first declared in {1}", ), ;, public, static, final, DiagnosticType]
[;, public, static, final, DiagnosticType, VAR_ARGUMENTS_SHADOWED_ERROR, =, DiagnosticType, ., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,, "Shadowing \"arguments\" is not allowed", ), ;, SyntacticScopeCreator, (, AbstractCompiler, compiler]
[., error, (, "JSC_VAR_MULTIPLY_DECLARED_ERROR", ,, "Variable {0} first declared in {1}", ), ;, public, static, final, DiagnosticType, VAR_ARGUMENTS_SHADOWED_ERROR, =, DiagnosticType, ., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,]
[,, "Variable {0} first declared in {1}", ), ;, public, static, final, DiagnosticType, VAR_ARGUMENTS_SHADOWED_ERROR, =, DiagnosticType, ., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,, "Shadowing \"arguments\" is not allowed", ), ;, SyntacticScopeCreator]
[), ;, public, static, final, DiagnosticType, VAR_ARGUMENTS_SHADOWED_ERROR, =, DiagnosticType, ., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,, "Shadowing \"arguments\" is not allowed", ), ;, SyntacticScopeCreator, (, AbstractCompiler]
[;, SyntacticScopeCreator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., redeclarationHandler, =, new, DefaultRedeclarationHandler, (]
[., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,, "Shadowing \"arguments\" is not allowed", ), ;, SyntacticScopeCreator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[,, "Shadowing \"arguments\" is not allowed", ), ;, SyntacticScopeCreator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., redeclarationHandler, =]
[), ;, SyntacticScopeCreator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., redeclarationHandler, =, new, DefaultRedeclarationHandler]
[=, compiler, ;, this, ., redeclarationHandler, =, new, DefaultRedeclarationHandler, (, ), ;, }, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,, RedeclarationHandler, redeclarationHandler]
[., compiler, =, compiler, ;, this, ., redeclarationHandler, =, new, DefaultRedeclarationHandler, (, ), ;, }, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,]
[;, this, ., redeclarationHandler, =, new, DefaultRedeclarationHandler, (, ), ;, }, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,, RedeclarationHandler, redeclarationHandler, ), {]
[=, new, DefaultRedeclarationHandler, (, ), ;, }, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,, RedeclarationHandler, redeclarationHandler, ), {, this, ., compiler, =]
[., redeclarationHandler, =, new, DefaultRedeclarationHandler, (, ), ;, }, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,, RedeclarationHandler, redeclarationHandler, ), {, this, .]
[;, }, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,, RedeclarationHandler, redeclarationHandler, ), {, this, ., compiler, =, compiler, ;, this, ., redeclarationHandler]
[=, compiler, ;, this, ., redeclarationHandler, =, redeclarationHandler, ;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope]
[., compiler, =, compiler, ;, this, ., redeclarationHandler, =, redeclarationHandler, ;, }, @, Override, public, Scope, createScope, (, Node, n]
[;, this, ., redeclarationHandler, =, redeclarationHandler, ;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, )]
[=, redeclarationHandler, ;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, inputId, =, null]
[., redeclarationHandler, =, redeclarationHandler, ;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, inputId]
[;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, inputId, =, null, ;, if]
[=, null, ;, if, (, parent, ==, null, ), {, scope, =, Scope, ., createGlobalScope, (, n, ), ;, }]
[;, if, (, parent, ==, null, ), {, scope, =, Scope, ., createGlobalScope, (, n, ), ;, }, else, {]
[), {, scope, =, Scope, ., createGlobalScope, (, n, ), ;, }, else, {, scope, =, new, Scope, (, parent]
[==, null, ), {, scope, =, Scope, ., createGlobalScope, (, n, ), ;, }, else, {, scope, =, new, Scope]
[), {, scope, =, Scope, ., createGlobalScope, (, n, ), ;, }, else, {, scope, =, new, Scope, (, parent]
[=, Scope, ., createGlobalScope, (, n, ), ;, }, else, {, scope, =, new, Scope, (, parent, ,, n, )]
[;, }, else, {, scope, =, new, Scope, (, parent, ,, n, ), ;, }, scanRoot, (, n, ,, parent]
[., createGlobalScope, (, n, ), ;, }, else, {, scope, =, new, Scope, (, parent, ,, n, ), ;, }]
[), ;, }, else, {, scope, =, new, Scope, (, parent, ,, n, ), ;, }, scanRoot, (, n, ,]
[=, new, Scope, (, parent, ,, n, ), ;, }, scanRoot, (, n, ,, parent, ), ;, inputId, =, null]
[;, }, scanRoot, (, n, ,, parent, ), ;, inputId, =, null, ;, Scope, returnedScope, =, scope, ;, scope, =]
[,, n, ), ;, }, scanRoot, (, n, ,, parent, ), ;, inputId, =, null, ;, Scope, returnedScope, =, scope]
[), ;, }, scanRoot, (, n, ,, parent, ), ;, inputId, =, null, ;, Scope, returnedScope, =, scope, ;, scope]
[;, inputId, =, null, ;, Scope, returnedScope, =, scope, ;, scope, =, null, ;, return, returnedScope, ;, }, private, void]
[,, parent, ), ;, inputId, =, null, ;, Scope, returnedScope, =, scope, ;, scope, =, null, ;, return, returnedScope, ;]
[), ;, inputId, =, null, ;, Scope, returnedScope, =, scope, ;, scope, =, null, ;, return, returnedScope, ;, }, private]
[=, null, ;, Scope, returnedScope, =, scope, ;, scope, =, null, ;, return, returnedScope, ;, }, private, void, scanRoot, (]
[;, Scope, returnedScope, =, scope, ;, scope, =, null, ;, return, returnedScope, ;, }, private, void, scanRoot, (, Node, n]
[;, scope, =, null, ;, return, returnedScope, ;, }, private, void, scanRoot, (, Node, n, ,, Scope, parent, ), {]
[=, null, ;, return, returnedScope, ;, }, private, void, scanRoot, (, Node, n, ,, Scope, parent, ), {, if, (]
[;, return, returnedScope, ;, }, private, void, scanRoot, (, Node, n, ,, Scope, parent, ), {, if, (, n, .]
[;, }, private, void, scanRoot, (, Node, n, ,, Scope, parent, ), {, if, (, n, ., isFunction, (, )]
[), {, if, (, inputId, ==, null, ), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, final]
[., isFunction, (, ), ), {, if, (, inputId, ==, null, ), {, inputId, =, NodeUtil, ., getInputId, (, n]
[), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, final, Node, fnNameNode, =, n, ., getFirstChild, (]
[==, null, ), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, final, Node, fnNameNode, =, n, .]
[), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, final, Node, fnNameNode, =, n, ., getFirstChild, (]
[=, NodeUtil, ., getInputId, (, n, ), ;, }, final, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, final]
[;, }, final, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, final, Node, args, =, fnNameNode, ., getNext, (]
[., getInputId, (, n, ), ;, }, final, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, final, Node, args]
[), ;, }, final, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, final, Node, args, =, fnNameNode, ., getNext]
[;, final, Node, args, =, fnNameNode, ., getNext, (, ), ;, final, Node, body, =, args, ., getNext, (, )]
[., getFirstChild, (, ), ;, final, Node, args, =, fnNameNode, ., getNext, (, ), ;, final, Node, body, =, args]
[;, final, Node, body, =, args, ., getNext, (, ), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;]
[., getNext, (, ), ;, final, Node, body, =, args, ., getNext, (, ), ;, String, fnName, =, fnNameNode, .]
[;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (, !, fnName, ., isEmpty, (, ), &&, NodeUtil]
[., getNext, (, ), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (, !, fnName, ., isEmpty]
[;, if, (, !, fnName, ., isEmpty, (, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ), {, declareVar, (]
[., getString, (, ), ;, if, (, !, fnName, ., isEmpty, (, ), &&, NodeUtil, ., isFunctionExpression, (, n, )]
[), {, declareVar, (, fnNameNode, ), ;, }, Preconditions, ., checkState, (, args, ., isParamList, (, ), ), ;, for]
[&&, NodeUtil, ., isFunctionExpression, (, n, ), ), {, declareVar, (, fnNameNode, ), ;, }, Preconditions, ., checkState, (, args]
[&&, NodeUtil, ., isFunctionExpression, (, n, ), ), {, declareVar, (, fnNameNode, ), ;, }, Preconditions, ., checkState, (, args]
[., isEmpty, (, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ), {, declareVar, (, fnNameNode, ), ;, }, Preconditions]
[), {, declareVar, (, fnNameNode, ), ;, }, Preconditions, ., checkState, (, args, ., isParamList, (, ), ), ;, for]
[., isFunctionExpression, (, n, ), ), {, declareVar, (, fnNameNode, ), ;, }, Preconditions, ., checkState, (, args, ., isParamList]
[), ), {, declareVar, (, fnNameNode, ), ;, }, Preconditions, ., checkState, (, args, ., isParamList, (, ), ), ;]
[;, }, Preconditions, ., checkState, (, args, ., isParamList, (, ), ), ;, for, (, Node, a, =, args, .]
[), ;, }, Preconditions, ., checkState, (, args, ., isParamList, (, ), ), ;, for, (, Node, a, =, args]
[;, for, (, Node, a, =, args, ., getFirstChild, (, ), ;, a, !=, null, ;, a, =, a, .]
[., checkState, (, args, ., isParamList, (, ), ), ;, for, (, Node, a, =, args, ., getFirstChild, (, )]
[), ;, for, (, Node, a, =, args, ., getFirstChild, (, ), ;, a, !=, null, ;, a, =, a]
[., isParamList, (, ), ), ;, for, (, Node, a, =, args, ., getFirstChild, (, ), ;, a, !=, null]
[;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {, Preconditions, ., checkState, (, a, .]
[., getFirstChild, (, ), ;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {, Preconditions, .]
[;, a, =, a, ., getNext, (, ), ), {, Preconditions, ., checkState, (, a, ., isName, (, ), )]
[!=, null, ;, a, =, a, ., getNext, (, ), ), {, Preconditions, ., checkState, (, a, ., isName, (]
[;, a, =, a, ., getNext, (, ), ), {, Preconditions, ., checkState, (, a, ., isName, (, ), )]
[=, a, ., getNext, (, ), ), {, Preconditions, ., checkState, (, a, ., isName, (, ), ), ;, declareVar]
[), {, Preconditions, ., checkState, (, a, ., isName, (, ), ), ;, declareVar, (, a, ), ;, }, scanVars]
[., getNext, (, ), ), {, Preconditions, ., checkState, (, a, ., isName, (, ), ), ;, declareVar, (, a]
[;, declareVar, (, a, ), ;, }, scanVars, (, body, ,, n, ), ;, }, else, {, Preconditions, ., checkState]
[., checkState, (, a, ., isName, (, ), ), ;, declareVar, (, a, ), ;, }, scanVars, (, body, ,]
[), ;, declareVar, (, a, ), ;, }, scanVars, (, body, ,, n, ), ;, }, else, {, Preconditions, .]
[., isName, (, ), ), ;, declareVar, (, a, ), ;, }, scanVars, (, body, ,, n, ), ;, }]
[;, }, scanVars, (, body, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (, scope, ., getParent, (]
[), ;, }, scanVars, (, body, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (, scope, ., getParent]
[;, }, else, {, Preconditions, ., checkState, (, scope, ., getParent, (, ), ==, null, ), ;, scanVars, (, n]
[,, n, ), ;, }, else, {, Preconditions, ., checkState, (, scope, ., getParent, (, ), ==, null, ), ;]
[), ;, }, else, {, Preconditions, ., checkState, (, scope, ., getParent, (, ), ==, null, ), ;, scanVars, (]
[;, scanVars, (, n, ,, null, ), ;, }, }, private, void, scanVars, (, Node, n, ,, Node, parent, )]
[., checkState, (, scope, ., getParent, (, ), ==, null, ), ;, scanVars, (, n, ,, null, ), ;, }]
[), ;, scanVars, (, n, ,, null, ), ;, }, }, private, void, scanVars, (, Node, n, ,, Node, parent]
[==, null, ), ;, scanVars, (, n, ,, null, ), ;, }, }, private, void, scanVars, (, Node, n, ,]
[., getParent, (, ), ==, null, ), ;, scanVars, (, n, ,, null, ), ;, }, }, private, void, scanVars]
[), ;, scanVars, (, n, ,, null, ), ;, }, }, private, void, scanVars, (, Node, n, ,, Node, parent]
[;, }, }, private, void, scanVars, (, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (]
[,, null, ), ;, }, }, private, void, scanVars, (, Node, n, ,, Node, parent, ), {, switch, (, n]
[), ;, }, }, private, void, scanVars, (, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType]
[), {, case, Token, ., VAR, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[., getType, (, ), ), {, case, Token, ., VAR, :, for, (, Node, child, =, n, ., getFirstChild, (]
[:, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next]
[., VAR, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {]
[;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, declareVar, (, child, )]
[., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;]
[;, ), {, Node, next, =, child, ., getNext, (, ), ;, declareVar, (, child, ), ;, child, =, next]
[!=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, declareVar, (, child, ), ;, child]
[;, ), {, Node, next, =, child, ., getNext, (, ), ;, declareVar, (, child, ), ;, child, =, next]
[;, declareVar, (, child, ), ;, child, =, next, ;, }, return, ;, case, Token, ., FUNCTION, :, if, (]
[., getNext, (, ), ;, declareVar, (, child, ), ;, child, =, next, ;, }, return, ;, case, Token, .]
[;, child, =, next, ;, }, return, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (, n]
[), ;, child, =, next, ;, }, return, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (]
[=, next, ;, }, return, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (, n, ), )]
[;, }, return, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (, n, ), ), {, return]
[:, if, (, NodeUtil, ., isFunctionExpression, (, n, ), ), {, return, ;, }, String, fnName, =, n, ., getFirstChild]
[., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (, n, ), ), {, return, ;, }, String, fnName, =, n]
[), {, return, ;, }, String, fnName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[., isFunctionExpression, (, n, ), ), {, return, ;, }, String, fnName, =, n, ., getFirstChild, (, ), ., getString]
[), ), {, return, ;, }, String, fnName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if]
[;, if, (, fnName, ., isEmpty, (, ), ), {, return, ;, }, declareVar, (, n, ., getFirstChild, (, )]
[., getString, (, ), ;, if, (, fnName, ., isEmpty, (, ), ), {, return, ;, }, declareVar, (, n]
[., getFirstChild, (, ), ., getString, (, ), ;, if, (, fnName, ., isEmpty, (, ), ), {, return, ;]
[), {, return, ;, }, declareVar, (, n, ., getFirstChild, (, ), ), ;, return, ;, case, Token, ., CATCH]
[., isEmpty, (, ), ), {, return, ;, }, declareVar, (, n, ., getFirstChild, (, ), ), ;, return, ;]
[;, return, ;, case, Token, ., CATCH, :, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, )]
[), ;, return, ;, case, Token, ., CATCH, :, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2]
[., getFirstChild, (, ), ), ;, return, ;, case, Token, ., CATCH, :, Preconditions, ., checkState, (, n, ., getChildCount]
[:, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, Preconditions, ., checkState, (, n, .]
[., CATCH, :, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, n, ., getFirstChild, (, ), ., isName, (, ), ), ;, final, Node, var, =]
[., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, Preconditions, ., checkState, (, n, ., getFirstChild, (]
[), ;, Preconditions, ., checkState, (, n, ., getFirstChild, (, ), ., isName, (, ), ), ;, final, Node, var]
[==, 2, ), ;, Preconditions, ., checkState, (, n, ., getFirstChild, (, ), ., isName, (, ), ), ;, final]
[., getChildCount, (, ), ==, 2, ), ;, Preconditions, ., checkState, (, n, ., getFirstChild, (, ), ., isName, (]
[), ;, Preconditions, ., checkState, (, n, ., getFirstChild, (, ), ., isName, (, ), ), ;, final, Node, var]
[;, final, Node, var, =, n, ., getFirstChild, (, ), ;, final, Node, block, =, var, ., getNext, (, )]
[., checkState, (, n, ., getFirstChild, (, ), ., isName, (, ), ), ;, final, Node, var, =, n, .]
[), ;, final, Node, var, =, n, ., getFirstChild, (, ), ;, final, Node, block, =, var, ., getNext, (]
[., isName, (, ), ), ;, final, Node, var, =, n, ., getFirstChild, (, ), ;, final, Node, block, =]
[., getFirstChild, (, ), ., isName, (, ), ), ;, final, Node, var, =, n, ., getFirstChild, (, ), ;]
[;, final, Node, block, =, var, ., getNext, (, ), ;, declareVar, (, var, ), ;, scanVars, (, block, ,]
[., getFirstChild, (, ), ;, final, Node, block, =, var, ., getNext, (, ), ;, declareVar, (, var, ), ;]
[;, declareVar, (, var, ), ;, scanVars, (, block, ,, n, ), ;, return, ;, case, Token, ., SCRIPT, :]
[., getNext, (, ), ;, declareVar, (, var, ), ;, scanVars, (, block, ,, n, ), ;, return, ;, case]
[;, scanVars, (, block, ,, n, ), ;, return, ;, case, Token, ., SCRIPT, :, inputId, =, n, ., getInputId]
[), ;, scanVars, (, block, ,, n, ), ;, return, ;, case, Token, ., SCRIPT, :, inputId, =, n, .]
[;, return, ;, case, Token, ., SCRIPT, :, inputId, =, n, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (]
[,, n, ), ;, return, ;, case, Token, ., SCRIPT, :, inputId, =, n, ., getInputId, (, ), ;, Preconditions]
[), ;, return, ;, case, Token, ., SCRIPT, :, inputId, =, n, ., getInputId, (, ), ;, Preconditions, ., checkNotNull]
[:, inputId, =, n, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;, break, ;, }, if]
[., SCRIPT, :, inputId, =, n, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;, break, ;]
[=, n, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;, break, ;, }, if, (, NodeUtil]
[;, Preconditions, ., checkNotNull, (, inputId, ), ;, break, ;, }, if, (, NodeUtil, ., isControlStructure, (, n, ), ||]
[., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;, break, ;, }, if, (, NodeUtil, ., isControlStructure]
[;, break, ;, }, if, (, NodeUtil, ., isControlStructure, (, n, ), ||, NodeUtil, ., isStatementBlock, (, n, ), )]
[., checkNotNull, (, inputId, ), ;, break, ;, }, if, (, NodeUtil, ., isControlStructure, (, n, ), ||, NodeUtil, .]
[), ;, break, ;, }, if, (, NodeUtil, ., isControlStructure, (, n, ), ||, NodeUtil, ., isStatementBlock, (, n, )]
[), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node]
[||, NodeUtil, ., isStatementBlock, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[., isControlStructure, (, n, ), ||, NodeUtil, ., isStatementBlock, (, n, ), ), {, for, (, Node, child, =, n]
[), ||, NodeUtil, ., isStatementBlock, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, )]
[), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node]
[., isStatementBlock, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {]
[;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, scanVars, (, child, ,]
[., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;]
[;, ), {, Node, next, =, child, ., getNext, (, ), ;, scanVars, (, child, ,, n, ), ;, child]
[!=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, scanVars, (, child, ,, n, )]
[;, ), {, Node, next, =, child, ., getNext, (, ), ;, scanVars, (, child, ,, n, ), ;, child]
[;, scanVars, (, child, ,, n, ), ;, child, =, next, ;, }, }, }, interface, RedeclarationHandler, {, void, onRedeclaration]
[., getNext, (, ), ;, scanVars, (, child, ,, n, ), ;, child, =, next, ;, }, }, }, interface]
[;, child, =, next, ;, }, }, }, interface, RedeclarationHandler, {, void, onRedeclaration, (, Scope, s, ,, String, name, ,]
[,, n, ), ;, child, =, next, ;, }, }, }, interface, RedeclarationHandler, {, void, onRedeclaration, (, Scope, s, ,]
[), ;, child, =, next, ;, }, }, }, interface, RedeclarationHandler, {, void, onRedeclaration, (, Scope, s, ,, String, name]
[=, next, ;, }, }, }, interface, RedeclarationHandler, {, void, onRedeclaration, (, Scope, s, ,, String, name, ,, Node, n]
[;, }, }, }, interface, RedeclarationHandler, {, void, onRedeclaration, (, Scope, s, ,, String, name, ,, Node, n, ,, CompilerInput]
[;, if, (, scope, ., isGlobal, (, ), ), {, Scope, ., Var, origVar, =, scope, ., getVar, (, name]
[., getParent, (, ), ;, if, (, scope, ., isGlobal, (, ), ), {, Scope, ., Var, origVar, =, scope]
[), {, Scope, ., Var, origVar, =, scope, ., getVar, (, name, ), ;, Node, origParent, =, origVar, ., getParentNode]
[., isGlobal, (, ), ), {, Scope, ., Var, origVar, =, scope, ., getVar, (, name, ), ;, Node, origParent]
[;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, if, (, origParent, ., isCatch, (, ), &&, parent, .]
[., getVar, (, name, ), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, if, (, origParent, ., isCatch]
[), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, if, (, origParent, ., isCatch, (, ), &&, parent]
[;, if, (, origParent, ., isCatch, (, ), &&, parent, ., isCatch, (, ), ), {, return, ;, }, boolean]
[., getParentNode, (, ), ;, if, (, origParent, ., isCatch, (, ), &&, parent, ., isCatch, (, ), ), {]
[), {, return, ;, }, boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (, n, ,, origVar, ), ;, if, (, !, allowDupe, )]
[&&, parent, ., isCatch, (, ), ), {, return, ;, }, boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (, n, ,, origVar, )]
[., isCatch, (, ), &&, parent, ., isCatch, (, ), ), {, return, ;, }, boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (]
[), {, return, ;, }, boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (, n, ,, origVar, ), ;, if, (, !, allowDupe, )]
[., isCatch, (, ), ), {, return, ;, }, boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (, n, ,, origVar, ), ;, if]
[;, if, (, !, allowDupe, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n]
[,, origVar, ), ;, if, (, !, allowDupe, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, .]
[), ;, if, (, !, allowDupe, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (]
[), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR]
[), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR]
[;, }, }, else, if, (, name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (, n, )]
[., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,]
[), ;, }, }, else, if, (, name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (, n]
[., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input]
[,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input, !=, null, ?, origVar, ., input, ., getName, (]
[., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input, !=, null, ?, origVar]
[), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input, !=, null, ?, origVar, ., input, ., getName]
[,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input, !=, null, ?, origVar, ., input, ., getName, (, ), :]
[,, name, ,, (, origVar, ., input, !=, null, ?, origVar, ., input, ., getName, (, ), :, "??", )]
[,, (, origVar, ., input, !=, null, ?, origVar, ., input, ., getName, (, ), :, "??", ), ), )]
[), ), ;, }, }, else, if, (, name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (]
[), ), ), ;, }, }, else, if, (, name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration]
[?, origVar, ., input, ., getName, (, ), :, "??", ), ), ), ;, }, }, else, if, (, name]
[!=, null, ?, origVar, ., input, ., getName, (, ), :, "??", ), ), ), ;, }, }, else, if]
[., input, !=, null, ?, origVar, ., input, ., getName, (, ), :, "??", ), ), ), ;, }, }]
[?, origVar, ., input, ., getName, (, ), :, "??", ), ), ), ;, }, }, else, if, (, name]
[:, "??", ), ), ), ;, }, }, else, if, (, name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil]
[., getName, (, ), :, "??", ), ), ), ;, }, }, else, if, (, name, ., equals, (, ARGUMENTS]
[., input, ., getName, (, ), :, "??", ), ), ), ;, }, }, else, if, (, name, ., equals]
[), ), ), ;, }, }, else, if, (, name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration]
[), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR]
[&&, !, NodeUtil, ., isVarDeclaration, (, n, ), ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, .]
[., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (, n, ), ), {, compiler, ., report, (, JSError]
[), &&, !, NodeUtil, ., isVarDeclaration, (, n, ), ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil]
[), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR]
[), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR]
[., isVarDeclaration, (, n, ), ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n]
[), ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,]
[;, }, }, }, private, void, declareVar, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isName, (]
[., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR, ), ), ;]
[), ;, }, }, }, private, void, declareVar, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isName]
[., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR, ), ), ;, }, }, }, private]
[,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR, ), ), ;, }, }, }, private, void, declareVar, (, Node, n, ), {, Preconditions, .]
[., getSourceName, (, n, ), ,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR, ), ), ;, }, }, }, private, void, declareVar, (, Node]
[), ,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR, ), ), ;, }, }, }, private, void, declareVar, (, Node, n, ), {, Preconditions]
[,, VAR_ARGUMENTS_SHADOWED_ERROR, ), ), ;, }, }, }, private, void, declareVar, (, Node, n, ), {, Preconditions, ., checkState, (]
[), ), ;, }, }, }, private, void, declareVar, (, Node, n, ), {, Preconditions, ., checkState, (, n, .]
[;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;, String, name, =, n, ., getString, (, ), ;]
[., checkState, (, n, ., isName, (, ), ), ;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;]
[), ;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;, String, name, =, n, ., getString, (, )]
[., isName, (, ), ), ;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;, String, name, =, n]
[;, String, name, =, n, ., getString, (, ), ;, if, (, scope, ., isDeclared, (, name, ,, false, )]
[., getInput, (, inputId, ), ;, String, name, =, n, ., getString, (, ), ;, if, (, scope, ., isDeclared]
[), ;, String, name, =, n, ., getString, (, ), ;, if, (, scope, ., isDeclared, (, name, ,, false]
[;, if, (, scope, ., isDeclared, (, name, ,, false, ), ||, (, scope, ., isLocal, (, ), &&, name]
[., getString, (, ), ;, if, (, scope, ., isDeclared, (, name, ,, false, ), ||, (, scope, ., isLocal]
[), {, redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,, input, ), ;, }, else, {, scope, .]
[||, (, scope, ., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS, ), ), ), {, redeclarationHandler, ., onRedeclaration]
[., isDeclared, (, name, ,, false, ), ||, (, scope, ., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS]
[,, false, ), ||, (, scope, ., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS, ), ), ), {]
[), ||, (, scope, ., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS, ), ), ), {, redeclarationHandler, .]
[), {, redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,, input, ), ;, }, else, {, scope, .]
[), ), {, redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,, input, ), ;, }, else, {, scope]
[&&, name, ., equals, (, ARGUMENTS, ), ), ), {, redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,]
[., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS, ), ), ), {, redeclarationHandler, ., onRedeclaration, (, scope, ,]
[), ), {, redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,, input, ), ;, }, else, {, scope]
[., equals, (, ARGUMENTS, ), ), ), {, redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,, input, )]
[), ), ), {, redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,, input, ), ;, }, else, {]
[;, }, else, {, scope, ., declare, (, name, ,, n, ,, null, ,, input, ), ;, }, }, static]
[., onRedeclaration, (, scope, ,, name, ,, n, ,, input, ), ;, }, else, {, scope, ., declare, (, name]
[,, name, ,, n, ,, input, ), ;, }, else, {, scope, ., declare, (, name, ,, n, ,, null]
[,, n, ,, input, ), ;, }, else, {, scope, ., declare, (, name, ,, n, ,, null, ,, input]
[,, input, ), ;, }, else, {, scope, ., declare, (, name, ,, n, ,, null, ,, input, ), ;]
[), ;, }, else, {, scope, ., declare, (, name, ,, n, ,, null, ,, input, ), ;, }, }]
[;, }, }, static, boolean, hasDuplicateDeclarationSuppression, (, Node, n, ,, Scope, ., Var, origVar, ), {, Preconditions, ., checkState, (]
[., declare, (, name, ,, n, ,, null, ,, input, ), ;, }, }, static, boolean, hasDuplicateDeclarationSuppression, (, Node, n]
[,, n, ,, null, ,, input, ), ;, }, }, static, boolean, hasDuplicateDeclarationSuppression, (, Node, n, ,, Scope, ., Var]
[,, null, ,, input, ), ;, }, }, static, boolean, hasDuplicateDeclarationSuppression, (, Node, n, ,, Scope, ., Var, origVar, )]
[,, input, ), ;, }, }, static, boolean, hasDuplicateDeclarationSuppression, (, Node, n, ,, Scope, ., Var, origVar, ), {, Preconditions]
[), ;, }, }, static, boolean, hasDuplicateDeclarationSuppression, (, Node, n, ,, Scope, ., Var, origVar, ), {, Preconditions, ., checkState]
[;, Node, parent, =, n, ., getParent, (, ), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, JSDocInfo]
[., checkState, (, n, ., isName, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Node]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;]
[., isName, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Node, origParent, =, origVar, .]
[;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if]
[., getParent, (, ), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo]
[;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, parent]
[., getParentNode, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, )]
[;, if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info]
[., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;]
[), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., getSuppressions]
[==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info]
[), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., getSuppressions]
[=, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., getSuppressions, (, ), .]
[;, }, if, (, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), {]
[., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (]
[), {, return, true, ;, }, info, =, origVar, ., nameNode, ., getJSDocInfo, (, ), ;, if, (, info, ==]
[&&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), {, return, true, ;, }, info, =, origVar]
[!=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), {, return, true, ;, }, info]
[&&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), {, return, true, ;, }, info, =, origVar]
[), {, return, true, ;, }, info, =, origVar, ., nameNode, ., getJSDocInfo, (, ), ;, if, (, info, ==]
[., contains, (, "duplicate", ), ), {, return, true, ;, }, info, =, origVar, ., nameNode, ., getJSDocInfo, (, )]
[., getSuppressions, (, ), ., contains, (, "duplicate", ), ), {, return, true, ;, }, info, =, origVar, ., nameNode]
[), ), {, return, true, ;, }, info, =, origVar, ., nameNode, ., getJSDocInfo, (, ), ;, if, (, info]
[;, }, info, =, origVar, ., nameNode, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info]
[=, origVar, ., nameNode, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, origParent, .]
[;, if, (, info, ==, null, ), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return, (, info]
[., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, origParent, ., getJSDocInfo, (, ), ;]
[., nameNode, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, origParent, ., getJSDocInfo, (]
[), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return, (, info, !=, null, &&, info, ., getSuppressions]
[==, null, ), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return, (, info, !=, null, &&, info]
[), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return, (, info, !=, null, &&, info, ., getSuppressions]
[=, origParent, ., getJSDocInfo, (, ), ;, }, return, (, info, !=, null, &&, info, ., getSuppressions, (, ), .]
[;, }, return, (, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), ;]
[., getJSDocInfo, (, ), ;, }, return, (, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (]
[;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler, ), {, return, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, compiler]
[), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler, ), {, return, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (]
[&&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler]
[!=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), ;, }, static, Scope, generateUntypedTopScope, (]
[&&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler]
[), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler, ), {, return, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (]
[., contains, (, "duplicate", ), ), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler, ), {, return, new, SyntacticScopeCreator, (]
[., getSuppressions, (, ), ., contains, (, "duplicate", ), ), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler, ), {]
[), ), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler, ), {, return, new, SyntacticScopeCreator, (, compiler, ), ., createScope]
[;, }, }]
[., createScope, (, compiler, ., getRoot, (, ), ,, null, ), ;, }, }]
[), ., createScope, (, compiler, ., getRoot, (, ), ,, null, ), ;, }, }]
[,, null, ), ;, }, }]
[., getRoot, (, ), ,, null, ), ;, }, }]
[), ;, }, }]
