[commons, ., math3, ., util, ., FastMath, ;, public, class, RombergIntegrator, extends, BaseAbstractUnivariateIntegrator, {, public, static, final, int, ROMBERG_MAX_ITERATIONS_COUNT, =]
[double, absoluteAccuracy, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (]
[,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,]
[int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,]
[,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,]
[throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >]
[{, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw]
[relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (]
[absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,]
[minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,]
[public, RombergIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (]
[(, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,]
[final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >]
[,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw]
[NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (]
[super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,]
[minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,]
[throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, RombergIntegrator, (, ), {, super, (]
[NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, RombergIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,]
[ROMBERG_MAX_ITERATIONS_COUNT, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, int, m, =]
[ROMBERG_MAX_ITERATIONS_COUNT, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, int, m, =]
[ROMBERG_MAX_ITERATIONS_COUNT, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, int, m, =]
[protected, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, int, m, =, iterations, ., getMaximalCount, (, ), +]
[,, MaxCountExceededException, {, final, int, m, =, iterations, ., getMaximalCount, (, ), +, 1, ;, double, previousRow, [, ], =]
[final, int, m, =, iterations, ., getMaximalCount, (, ), +, 1, ;, double, previousRow, [, ], =, new, double, []
[), +, 1, ;, double, previousRow, [, ], =, new, double, [, m, ], ;, double, currentRow, [, ], =]
[;, double, previousRow, [, ], =, new, double, [, m, ], ;, double, currentRow, [, ], =, new, double, []
[new, double, [, m, ], ;, double, currentRow, [, ], =, new, double, [, m, ], ;, TrapezoidIntegrator, qtrap, =]
[;, double, currentRow, [, ], =, new, double, [, m, ], ;, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;]
[;, double, currentRow, [, ], =, new, double, [, m, ], ;, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;]
[currentRow, [, ], =, new, double, [, m, ], ;, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, currentRow, []
[=, new, double, [, m, ], ;, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, currentRow, [, 0, ], =]
[=, new, double, [, m, ], ;, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, currentRow, [, 0, ], =]
[m, ], ;, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, currentRow, [, 0, ], =, qtrap, ., stage, (]
[;, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,]
[=, new, TrapezoidIntegrator, (, ), ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,, 0, ), ;]
[=, new, TrapezoidIntegrator, (, ), ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,, 0, ), ;]
[], =, qtrap, ., stage, (, this, ,, 0, ), ;, iterations, ., incrementCount, (, ), ;, double, olds, =]
[], =, qtrap, ., stage, (, this, ,, 0, ), ;, iterations, ., incrementCount, (, ), ;, double, olds, =]
[qtrap, ., stage, (, this, ,, 0, ), ;, iterations, ., incrementCount, (, ), ;, double, olds, =, currentRow, []
[,, 0, ), ;, iterations, ., incrementCount, (, ), ;, double, olds, =, currentRow, [, 0, ], ;, while, (]
[(, ), ;, double, olds, =, currentRow, [, 0, ], ;, while, (, true, ), {, final, int, i, =]
[(, ), ;, double, olds, =, currentRow, [, 0, ], ;, while, (, true, ), {, final, int, i, =]
[(, true, ), {, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, [, ], tmpRow, =]
[), {, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, [, ], tmpRow, =, previousRow, ;]
[final, int, i, =, iterations, ., getCount, (, ), ;, final, double, [, ], tmpRow, =, previousRow, ;, previousRow, =]
[i, =, iterations, ., getCount, (, ), ;, final, double, [, ], tmpRow, =, previousRow, ;, previousRow, =, currentRow, ;]
[iterations, ., getCount, (, ), ;, final, double, [, ], tmpRow, =, previousRow, ;, previousRow, =, currentRow, ;, currentRow, =]
[getCount, (, ), ;, final, double, [, ], tmpRow, =, previousRow, ;, previousRow, =, currentRow, ;, currentRow, =, tmpRow, ;]
[getCount, (, ), ;, final, double, [, ], tmpRow, =, previousRow, ;, previousRow, =, currentRow, ;, currentRow, =, tmpRow, ;]
[), ;, final, double, [, ], tmpRow, =, previousRow, ;, previousRow, =, currentRow, ;, currentRow, =, tmpRow, ;, currentRow, []
[double, [, ], tmpRow, =, previousRow, ;, previousRow, =, currentRow, ;, currentRow, =, tmpRow, ;, currentRow, [, 0, ], =]
[double, [, ], tmpRow, =, previousRow, ;, previousRow, =, currentRow, ;, currentRow, =, tmpRow, ;, currentRow, [, 0, ], =]
[=, previousRow, ;, previousRow, =, currentRow, ;, currentRow, =, tmpRow, ;, currentRow, [, 0, ], =, qtrap, ., stage, (]
[;, previousRow, =, currentRow, ;, currentRow, =, tmpRow, ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,]
[currentRow, ;, currentRow, =, tmpRow, ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,, i, ), ;]
[currentRow, ;, currentRow, =, tmpRow, ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,, i, ), ;]
[qtrap, ., stage, (, this, ,, i, ), ;, iterations, ., incrementCount, (, ), ;, for, (, int, j, =]
[stage, (, this, ,, i, ), ;, iterations, ., incrementCount, (, ), ;, for, (, int, j, =, 1, ;]
[stage, (, this, ,, i, ), ;, iterations, ., incrementCount, (, ), ;, for, (, int, j, =, 1, ;]
[this, ,, i, ), ;, iterations, ., incrementCount, (, ), ;, for, (, int, j, =, 1, ;, j, <=]
[i, ), ;, iterations, ., incrementCount, (, ), ;, for, (, int, j, =, 1, ;, j, <=, i, ;]
[i, ), ;, iterations, ., incrementCount, (, ), ;, for, (, int, j, =, 1, ;, j, <=, i, ;]
[;, for, (, int, j, =, 1, ;, j, <=, i, ;, j, ++, ), {, final, double, r, =]
[;, for, (, int, j, =, 1, ;, j, <=, i, ;, j, ++, ), {, final, double, r, =]
[for, (, int, j, =, 1, ;, j, <=, i, ;, j, ++, ), {, final, double, r, =, (]
[for, (, int, j, =, 1, ;, j, <=, i, ;, j, ++, ), {, final, double, r, =, (]
[int, j, =, 1, ;, j, <=, i, ;, j, ++, ), {, final, double, r, =, (, 1L, <<]
[j, =, 1, ;, j, <=, i, ;, j, ++, ), {, final, double, r, =, (, 1L, <<, (]
[j, =, 1, ;, j, <=, i, ;, j, ++, ), {, final, double, r, =, (, 1L, <<, (]
[1, ;, j, <=, i, ;, j, ++, ), {, final, double, r, =, (, 1L, <<, (, 2, *]
[i, ;, j, ++, ), {, final, double, r, =, (, 1L, <<, (, 2, *, j, ), ), -]
[final, double, r, =, (, 1L, <<, (, 2, *, j, ), ), -, 1, ;, final, double, tIJm1, =]
[final, double, r, =, (, 1L, <<, (, 2, *, j, ), ), -, 1, ;, final, double, tIJm1, =]
[r, =, (, 1L, <<, (, 2, *, j, ), ), -, 1, ;, final, double, tIJm1, =, currentRow, []
[r, =, (, 1L, <<, (, 2, *, j, ), ), -, 1, ;, final, double, tIJm1, =, currentRow, []
[(, 1L, <<, (, 2, *, j, ), ), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -]
[(, 2, *, j, ), ), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;]
[(, 2, *, j, ), ), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;]
[*, j, ), ), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, []
[), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =]
[), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =]
[1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +]
[1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +]
[;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +, (]
[;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +, (]
[double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +, (, tIJm1, -]
[double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +, (, tIJm1, -]
[=, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +, (, tIJm1, -, previousRow, []
[=, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +, (, tIJm1, -, previousRow, []
[[, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +, (, tIJm1, -, previousRow, [, j, -]
[], ;, currentRow, [, j, ], =, tIJm1, +, (, tIJm1, -, previousRow, [, j, -, 1, ], ), /]
[tIJm1, +, (, tIJm1, -, previousRow, [, j, -, 1, ], ), /, r, ;, }, final, double, s, =]
[tIJm1, +, (, tIJm1, -, previousRow, [, j, -, 1, ], ), /, r, ;, }, final, double, s, =]
[(, tIJm1, -, previousRow, [, j, -, 1, ], ), /, r, ;, }, final, double, s, =, currentRow, []
[j, -, 1, ], ), /, r, ;, }, final, double, s, =, currentRow, [, i, ], ;, if, (]
[j, -, 1, ], ), /, r, ;, }, final, double, s, =, currentRow, [, i, ], ;, if, (]
[1, ], ), /, r, ;, }, final, double, s, =, currentRow, [, i, ], ;, if, (, i, >=]
[s, =, currentRow, [, i, ], ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =]
[s, =, currentRow, [, i, ], ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =]
[i, ], ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (]
[i, ], ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (]
[;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, s, -]
[), ), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =]
[), ), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =]
[), ), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =]
[double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *]
[delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (]
[-, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +]
[-, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +]
[final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (]
[getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *]
[(, FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (]
[(, FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (]
[FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (]
[FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (]
[abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=]
[), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||]
[+, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[+, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=]
[0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return]
[(, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }]
[<=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =]
