[;, private, Map, ., Entry, <, RealVector, ,, Double, >, brightestSample, ;, MicrosphereSurfaceElement, (, double, [, ], n, ), {]
[Map, ., Entry, <, RealVector, ,, Double, >, brightestSample, ;, MicrosphereSurfaceElement, (, double, [, ], n, ), {, normal, =]
[<, RealVector, ,, Double, >, brightestSample, ;, MicrosphereSurfaceElement, (, double, [, ], n, ), {, normal, =, new, ArrayRealVector, (]
[[, ], n, ), {, normal, =, new, ArrayRealVector, (, n, ), ;, }, RealVector, normal, (, ), {, return]
[ArrayRealVector, (, n, ), ;, }, RealVector, normal, (, ), {, return, normal, ;, }, void, reset, (, ), {]
[n, ), ;, }, RealVector, normal, (, ), {, return, normal, ;, }, void, reset, (, ), {, brightestIllumination, =]
[;, }, RealVector, normal, (, ), {, return, normal, ;, }, void, reset, (, ), {, brightestIllumination, =, 0, ;]
[RealVector, normal, (, ), {, return, normal, ;, }, void, reset, (, ), {, brightestIllumination, =, 0, ;, brightestSample, =]
[store, (, final, double, illuminationFromSample, ,, final, Map, ., Entry, <, RealVector, ,, Double, >, sample, ), {, if, (]
[store, (, final, double, illuminationFromSample, ,, final, Map, ., Entry, <, RealVector, ,, Double, >, sample, ), {, if, (]
[final, double, illuminationFromSample, ,, final, Map, ., Entry, <, RealVector, ,, Double, >, sample, ), {, if, (, illuminationFromSample, >]
[final, double, illuminationFromSample, ,, final, Map, ., Entry, <, RealVector, ,, Double, >, sample, ), {, if, (, illuminationFromSample, >]
[Map, ., Entry, <, RealVector, ,, Double, >, sample, ), {, if, (, illuminationFromSample, >, this, ., brightestIllumination, ), {]
[Map, ., Entry, <, RealVector, ,, Double, >, sample, ), {, if, (, illuminationFromSample, >, this, ., brightestIllumination, ), {]
[RealVector, ,, Double, >, sample, ), {, if, (, illuminationFromSample, >, this, ., brightestIllumination, ), {, this, ., brightestIllumination, =]
[Double, >, sample, ), {, if, (, illuminationFromSample, >, this, ., brightestIllumination, ), {, this, ., brightestIllumination, =, illuminationFromSample, ;]
[Double, >, sample, ), {, if, (, illuminationFromSample, >, this, ., brightestIllumination, ), {, this, ., brightestIllumination, =, illuminationFromSample, ;]
[{, if, (, illuminationFromSample, >, this, ., brightestIllumination, ), {, this, ., brightestIllumination, =, illuminationFromSample, ;, this, ., brightestSample, =]
[this, ., brightestIllumination, =, illuminationFromSample, ;, this, ., brightestSample, =, sample, ;, }, }, double, illumination, (, ), {, return]
[(, ), {, return, brightestIllumination, ;, }, Map, ., Entry, <, RealVector, ,, Double, >, sample, (, ), {, return]
[yval, ,, int, brightnessExponent, ,, int, microsphereElements, ,, UnitSphereRandomVectorGenerator, rand, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (]
[yval, ,, int, brightnessExponent, ,, int, microsphereElements, ,, UnitSphereRandomVectorGenerator, rand, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (]
[yval, ,, int, brightnessExponent, ,, int, microsphereElements, ,, UnitSphereRandomVectorGenerator, rand, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (]
[int, brightnessExponent, ,, int, microsphereElements, ,, UnitSphereRandomVectorGenerator, rand, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, xval, ==]
[,, int, microsphereElements, ,, UnitSphereRandomVectorGenerator, rand, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, xval, ==, null, ||]
[,, int, microsphereElements, ,, UnitSphereRandomVectorGenerator, rand, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, xval, ==, null, ||]
[microsphereElements, ,, UnitSphereRandomVectorGenerator, rand, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, xval, ==, null, ||, yval, ==]
[), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, xval, ==, null, ||, yval, ==, null, ), {, throw]
[if, (, xval, ==, null, ||, yval, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, xval, ==, null, ||, yval, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, xval, ==, null, ||, yval, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[null, ||, yval, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xval, ., length, ==]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xval, ., length, ==, 0, ), {, throw]
[;, }, if, (, xval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[;, }, if, (, xval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[;, }, if, (, xval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[xval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=]
[xval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=]
[{, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=, yval, ., length, ), {, throw]
[NoDataException, (, ), ;, }, if, (, xval, ., length, !=, yval, ., length, ), {, throw, new, DimensionMismatchException, (]
[NoDataException, (, ), ;, }, if, (, xval, ., length, !=, yval, ., length, ), {, throw, new, DimensionMismatchException, (]
[}, if, (, xval, ., length, !=, yval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,]
[}, if, (, xval, ., length, !=, yval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,]
[., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, if, (]
[), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, if, (, xval, []
[new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, if, (, xval, [, 0, ], ==]
[., length, ,, yval, ., length, ), ;, }, if, (, xval, [, 0, ], ==, null, ), {, throw]
[), ;, }, if, (, xval, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }]
[}, if, (, xval, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, dimension, =]
[}, if, (, xval, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, dimension, =]
[}, if, (, xval, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, dimension, =]
[(, xval, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, dimension, =, xval, []
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, dimension, =, xval, [, 0, ], ., length, ;]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, dimension, =, xval, [, 0, ], ., length, ;]
[throw, new, NullArgumentException, (, ), ;, }, dimension, =, xval, [, 0, ], ., length, ;, this, ., brightnessExponent, =]
[NullArgumentException, (, ), ;, }, dimension, =, xval, [, 0, ], ., length, ;, this, ., brightnessExponent, =, brightnessExponent, ;]
[), ;, }, dimension, =, xval, [, 0, ], ., length, ;, this, ., brightnessExponent, =, brightnessExponent, ;, samples, =]
[], ., length, ;, this, ., brightnessExponent, =, brightnessExponent, ;, samples, =, new, HashMap, <, RealVector, ,, Double, >, (]
[], ., length, ;, this, ., brightnessExponent, =, brightnessExponent, ;, samples, =, new, HashMap, <, RealVector, ,, Double, >, (]
[samples, =, new, HashMap, <, RealVector, ,, Double, >, (, yval, ., length, ), ;, for, (, int, i, =]
[new, HashMap, <, RealVector, ,, Double, >, (, yval, ., length, ), ;, for, (, int, i, =, 0, ;]
[new, HashMap, <, RealVector, ,, Double, >, (, yval, ., length, ), ;, for, (, int, i, =, 0, ;]
[<, RealVector, ,, Double, >, (, yval, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[<, RealVector, ,, Double, >, (, yval, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[>, (, yval, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, xval, ., length, ;]
[(, yval, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, xval, ., length, ;, ++]
[i, =, 0, ;, i, <, xval, ., length, ;, ++, i, ), {, final, double, [, ], xvalI, =]
[i, =, 0, ;, i, <, xval, ., length, ;, ++, i, ), {, final, double, [, ], xvalI, =]
[0, ;, i, <, xval, ., length, ;, ++, i, ), {, final, double, [, ], xvalI, =, xval, []
[., length, ;, ++, i, ), {, final, double, [, ], xvalI, =, xval, [, i, ], ;, if, (]
[., length, ;, ++, i, ), {, final, double, [, ], xvalI, =, xval, [, i, ], ;, if, (]
[;, ++, i, ), {, final, double, [, ], xvalI, =, xval, [, i, ], ;, if, (, xvalI, ==]
[{, final, double, [, ], xvalI, =, xval, [, i, ], ;, if, (, xvalI, ==, null, ), {, throw]
[[, i, ], ;, if, (, xvalI, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[[, i, ], ;, if, (, xvalI, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[[, i, ], ;, if, (, xvalI, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, xvalI, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xvalI, ., length, !=]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xvalI, ., length, !=, dimension, ), {, throw]
[throw, new, NullArgumentException, (, ), ;, }, if, (, xvalI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (]
[throw, new, NullArgumentException, (, ), ;, }, if, (, xvalI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (]
[), ;, }, if, (, xvalI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, xvalI, ., length, ,]
[(, xvalI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, xvalI, ., length, ,, dimension, ), ;, }]
[(, xvalI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, xvalI, ., length, ,, dimension, ), ;, }]
[!=, dimension, ), {, throw, new, DimensionMismatchException, (, xvalI, ., length, ,, dimension, ), ;, }, samples, ., put, (]
[{, throw, new, DimensionMismatchException, (, xvalI, ., length, ,, dimension, ), ;, }, samples, ., put, (, new, ArrayRealVector, (]
[DimensionMismatchException, (, xvalI, ., length, ,, dimension, ), ;, }, samples, ., put, (, new, ArrayRealVector, (, xvalI, ), ,]
[DimensionMismatchException, (, xvalI, ., length, ,, dimension, ), ;, }, samples, ., put, (, new, ArrayRealVector, (, xvalI, ), ,]
[xvalI, ., length, ,, dimension, ), ;, }, samples, ., put, (, new, ArrayRealVector, (, xvalI, ), ,, yval, []
[), ;, }, samples, ., put, (, new, ArrayRealVector, (, xvalI, ), ,, yval, [, i, ], ), ;, }]
[}, samples, ., put, (, new, ArrayRealVector, (, xvalI, ), ,, yval, [, i, ], ), ;, }, microsphere, =]
[ArrayRealVector, (, xvalI, ), ,, yval, [, i, ], ), ;, }, microsphere, =, new, ArrayList, <, MicrosphereSurfaceElement, >, (]
[], ), ;, }, microsphere, =, new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for, (, int, i, =]
[;, }, microsphere, =, new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for, (, int, i, =, 0, ;]
[;, }, microsphere, =, new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for, (, int, i, =, 0, ;]
[microsphere, =, new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for, (, int, i, =, 0, ;, i, <]
[new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for, (, int, i, =, 0, ;, i, <, microsphereElements, ;]
[new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for, (, int, i, =, 0, ;, i, <, microsphereElements, ;]
[>, (, microsphereElements, ), ;, for, (, int, i, =, 0, ;, i, <, microsphereElements, ;, i, ++, ), {]
[>, (, microsphereElements, ), ;, for, (, int, i, =, 0, ;, i, <, microsphereElements, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, microsphereElements, ;, i, ++, ), {, microsphere, ., add, (]
[int, i, =, 0, ;, i, <, microsphereElements, ;, i, ++, ), {, microsphere, ., add, (, new, MicrosphereSurfaceElement, (]
[int, i, =, 0, ;, i, <, microsphereElements, ;, i, ++, ), {, microsphere, ., add, (, new, MicrosphereSurfaceElement, (]
[), ;, }, }, public, double, value, (, double, [, ], point, ), throws, DimensionMismatchException, {, final, RealVector, p, =]
[}, public, double, value, (, double, [, ], point, ), throws, DimensionMismatchException, {, final, RealVector, p, =, new, ArrayRealVector, (]
[point, ), throws, DimensionMismatchException, {, final, RealVector, p, =, new, ArrayRealVector, (, point, ), ;, for, (, MicrosphereSurfaceElement, md, :]
[DimensionMismatchException, {, final, RealVector, p, =, new, ArrayRealVector, (, point, ), ;, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {]
[DimensionMismatchException, {, final, RealVector, p, =, new, ArrayRealVector, (, point, ), ;, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {]
[{, md, ., reset, (, ), ;, }, for, (, Map, ., Entry, <, RealVector, ,, Double, >, sd, :]
[{, md, ., reset, (, ), ;, }, for, (, Map, ., Entry, <, RealVector, ,, Double, >, sd, :]
[., Entry, <, RealVector, ,, Double, >, sd, :, samples, ., entrySet, (, ), ), {, final, RealVector, diff, =]
[., Entry, <, RealVector, ,, Double, >, sd, :, samples, ., entrySet, (, ), ), {, final, RealVector, diff, =]
[., Entry, <, RealVector, ,, Double, >, sd, :, samples, ., entrySet, (, ), ), {, final, RealVector, diff, =]
[:, samples, ., entrySet, (, ), ), {, final, RealVector, diff, =, sd, ., getKey, (, ), ., subtract, (]
[{, final, RealVector, diff, =, sd, ., getKey, (, ), ., subtract, (, p, ), ;, final, double, diffNorm, =]
[{, final, RealVector, diff, =, sd, ., getKey, (, ), ., subtract, (, p, ), ;, final, double, diffNorm, =]
[(, ), ., subtract, (, p, ), ;, final, double, diffNorm, =, diff, ., getNorm, (, ), ;, if, (]
[(, ), ., subtract, (, p, ), ;, final, double, diffNorm, =, diff, ., getNorm, (, ), ;, if, (]
[(, ), ., subtract, (, p, ), ;, final, double, diffNorm, =, diff, ., getNorm, (, ), ;, if, (]
[(, p, ), ;, final, double, diffNorm, =, diff, ., getNorm, (, ), ;, if, (, FastMath, ., abs, (]
[;, final, double, diffNorm, =, diff, ., getNorm, (, ), ;, if, (, FastMath, ., abs, (, diffNorm, ), <]
[;, final, double, diffNorm, =, diff, ., getNorm, (, ), ;, if, (, FastMath, ., abs, (, diffNorm, ), <]
[=, diff, ., getNorm, (, ), ;, if, (, FastMath, ., abs, (, diffNorm, ), <, FastMath, ., ulp, (]
[), ;, if, (, FastMath, ., abs, (, diffNorm, ), <, FastMath, ., ulp, (, 1d, ), ), {, return]
[), ;, if, (, FastMath, ., abs, (, diffNorm, ), <, FastMath, ., ulp, (, 1d, ), ), {, return]
[., ulp, (, 1d, ), ), {, return, sd, ., getValue, (, ), ;, }, for, (, MicrosphereSurfaceElement, md, :]
[return, sd, ., getValue, (, ), ;, }, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, w, =]
[return, sd, ., getValue, (, ), ;, }, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, w, =]
[(, ), ;, }, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, w, =, FastMath, ., pow, (]
[;, }, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, w, =, FastMath, ., pow, (, diffNorm, ,]
[}, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, w, =, FastMath, ., pow, (, diffNorm, ,, -]
[MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, w, =, FastMath, ., pow, (, diffNorm, ,, -, brightnessExponent, ), ;]
[MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, w, =, FastMath, ., pow, (, diffNorm, ,, -, brightnessExponent, ), ;]
[), {, final, double, w, =, FastMath, ., pow, (, diffNorm, ,, -, brightnessExponent, ), ;, md, ., store, (]
[), {, final, double, w, =, FastMath, ., pow, (, diffNorm, ,, -, brightnessExponent, ), ;, md, ., store, (]
[final, double, w, =, FastMath, ., pow, (, diffNorm, ,, -, brightnessExponent, ), ;, md, ., store, (, cosAngle, (]
[w, =, FastMath, ., pow, (, diffNorm, ,, -, brightnessExponent, ), ;, md, ., store, (, cosAngle, (, diff, ,]
[w, =, FastMath, ., pow, (, diffNorm, ,, -, brightnessExponent, ), ;, md, ., store, (, cosAngle, (, diff, ,]
[,, -, brightnessExponent, ), ;, md, ., store, (, cosAngle, (, diff, ,, md, ., normal, (, ), ), *]
[brightnessExponent, ), ;, md, ., store, (, cosAngle, (, diff, ,, md, ., normal, (, ), ), *, w, ,]
[(, diff, ,, md, ., normal, (, ), ), *, w, ,, sd, ), ;, }, }, double, value, =]
[normal, (, ), ), *, w, ,, sd, ), ;, }, }, double, value, =, 0, ;, double, totalWeight, =]
[sd, ), ;, }, }, double, value, =, 0, ;, double, totalWeight, =, 0, ;, for, (, MicrosphereSurfaceElement, md, :]
[=, 0, ;, double, totalWeight, =, 0, ;, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, iV, =]
[=, 0, ;, double, totalWeight, =, 0, ;, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, iV, =]
[double, iV, =, md, ., illumination, (, ), ;, final, Map, ., Entry, <, RealVector, ,, Double, >, sd, =]
[double, iV, =, md, ., illumination, (, ), ;, final, Map, ., Entry, <, RealVector, ,, Double, >, sd, =]
[;, final, Map, ., Entry, <, RealVector, ,, Double, >, sd, =, md, ., sample, (, ), ;, if, (]
[;, final, Map, ., Entry, <, RealVector, ,, Double, >, sd, =, md, ., sample, (, ), ;, if, (]
[Map, ., Entry, <, RealVector, ,, Double, >, sd, =, md, ., sample, (, ), ;, if, (, sd, !=]
[<, RealVector, ,, Double, >, sd, =, md, ., sample, (, ), ;, if, (, sd, !=, null, ), {]
[,, Double, >, sd, =, md, ., sample, (, ), ;, if, (, sd, !=, null, ), {, value, +=]
[,, Double, >, sd, =, md, ., sample, (, ), ;, if, (, sd, !=, null, ), {, value, +=]
[>, sd, =, md, ., sample, (, ), ;, if, (, sd, !=, null, ), {, value, +=, iV, *]
[>, sd, =, md, ., sample, (, ), ;, if, (, sd, !=, null, ), {, value, +=, iV, *]
[(, ), ;, if, (, sd, !=, null, ), {, value, +=, iV, *, sd, ., getValue, (, ), ;]
[;, if, (, sd, !=, null, ), {, value, +=, iV, *, sd, ., getValue, (, ), ;, totalWeight, +=]
[null, ), {, value, +=, iV, *, sd, ., getValue, (, ), ;, totalWeight, +=, iV, ;, }, }, return]
[null, ), {, value, +=, iV, *, sd, ., getValue, (, ), ;, totalWeight, +=, iV, ;, }, }, return]
[{, value, +=, iV, *, sd, ., getValue, (, ), ;, totalWeight, +=, iV, ;, }, }, return, value, /]
[return, value, /, totalWeight, ;, }, private, double, cosAngle, (, final, RealVector, v, ,, final, RealVector, w, ), {, return]
[return, value, /, totalWeight, ;, }, private, double, cosAngle, (, final, RealVector, v, ,, final, RealVector, w, ), {, return]
[return, value, /, totalWeight, ;, }, private, double, cosAngle, (, final, RealVector, v, ,, final, RealVector, w, ), {, return]
[;, }, private, double, cosAngle, (, final, RealVector, v, ,, final, RealVector, w, ), {, return, v, ., dotProduct, (]
[double, cosAngle, (, final, RealVector, v, ,, final, RealVector, w, ), {, return, v, ., dotProduct, (, w, ), /]
[cosAngle, (, final, RealVector, v, ,, final, RealVector, w, ), {, return, v, ., dotProduct, (, w, ), /, (]
[cosAngle, (, final, RealVector, v, ,, final, RealVector, w, ), {, return, v, ., dotProduct, (, w, ), /, (]
[cosAngle, (, final, RealVector, v, ,, final, RealVector, w, ), {, return, v, ., dotProduct, (, w, ), /, (]
[final, RealVector, w, ), {, return, v, ., dotProduct, (, w, ), /, (, v, ., getNorm, (, ), *]
[final, RealVector, w, ), {, return, v, ., dotProduct, (, w, ), /, (, v, ., getNorm, (, ), *]
