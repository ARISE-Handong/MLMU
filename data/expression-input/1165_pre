[chart, ., util, ., VerticalAlignment, ;, public, class, ColumnArrangement, implements, Arrangement, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[., util, ., VerticalAlignment, ;, public, class, ColumnArrangement, implements, Arrangement, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[(, ), {, }, public, ColumnArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {]
[(, ), {, }, public, ColumnArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {]
[public, ColumnArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =]
[(, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;]
[(, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;]
[VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =]
[,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;]
[,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;]
[double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =]
[), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;]
[), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;]
[horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =]
[), {, }, public, Size2D, arrange, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =]
[), {, }, public, Size2D, arrange, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (]
[LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (]
[=, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==]
[=, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==]
[LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[=, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[=, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[(, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (]
[==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,]
[(, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (]
[(, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[{, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw]
[RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw]
[w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[{, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return]
[new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (]
[(, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw]
[g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw]
[w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[{, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return]
[new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (]
[(, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,]
[h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, return]
[Size2D, (, ), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return]
[), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNF, (]
[}, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNF, (, container, ,]
[Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNF, (, container, ,, g2, ,]
[), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =]
[), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =, container, ., getBlocks, (, ), ;, double, height, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =, container, ., getBlocks, (, ), ;, double, height, =]
[List, blocks, =, container, ., getBlocks, (, ), ;, double, height, =, constraint, ., getHeight, (, ), ;, if, (]
[List, blocks, =, container, ., getBlocks, (, ), ;, double, height, =, constraint, ., getHeight, (, ), ;, if, (]
[=, container, ., getBlocks, (, ), ;, double, height, =, constraint, ., getHeight, (, ), ;, if, (, height, <=]
[getBlocks, (, ), ;, double, height, =, constraint, ., getHeight, (, ), ;, if, (, height, <=, 0.0, ), {]
[), ;, double, height, =, constraint, ., getHeight, (, ), ;, if, (, height, <=, 0.0, ), {, height, =]
[), ;, double, height, =, constraint, ., getHeight, (, ), ;, if, (, height, <=, 0.0, ), {, height, =]
[(, ), ;, if, (, height, <=, 0.0, ), {, height, =, Double, ., POSITIVE_INFINITY, ;, }, double, x, =]
[height, <=, 0.0, ), {, height, =, Double, ., POSITIVE_INFINITY, ;, }, double, x, =, 0.0, ;, double, y, =]
[height, =, Double, ., POSITIVE_INFINITY, ;, }, double, x, =, 0.0, ;, double, y, =, 0.0, ;, double, maxWidth, =]
[;, }, double, x, =, 0.0, ;, double, y, =, 0.0, ;, double, maxWidth, =, 0.0, ;, List, itemsInColumn, =]
[0.0, ;, double, maxWidth, =, 0.0, ;, List, itemsInColumn, =, new, ArrayList, (, ), ;, for, (, int, i, =]
[double, maxWidth, =, 0.0, ;, List, itemsInColumn, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;]
[double, maxWidth, =, 0.0, ;, List, itemsInColumn, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;]
[=, 0.0, ;, List, itemsInColumn, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, 0.0, ;, List, itemsInColumn, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, )]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, )]
[blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (]
[i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =]
[i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =]
[Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =, block, ., arrange, (]
[=, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,]
[=, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,]
[(, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (]
[(, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (]
[(, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (]
[), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, y, +]
[), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, y, +]
[=, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, y, +, size, ., height, <=]
[arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, y, +, size, ., height, <=, height, ), {]
[arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, y, +, size, ., height, <=, height, ), {]
[RectangleConstraint, ., NONE, ), ;, if, (, y, +, size, ., height, <=, height, ), {, itemsInColumn, ., add, (]
[), ;, if, (, y, +, size, ., height, <=, height, ), {, itemsInColumn, ., add, (, block, ), ;]
[), ;, if, (, y, +, size, ., height, <=, height, ), {, itemsInColumn, ., add, (, block, ), ;]
[y, +, size, ., height, <=, height, ), {, itemsInColumn, ., add, (, block, ), ;, block, ., setBounds, (]
[<=, height, ), {, itemsInColumn, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[), {, itemsInColumn, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[itemsInColumn, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[itemsInColumn, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,]
[block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,]
[(, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;]
[Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;, y, =]
[Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;, y, =]
[Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;, y, =]
[Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;, y, =, y, +]
[Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;, y, =, y, +]
[y, ,, size, ., width, ,, size, ., height, ), ), ;, y, =, y, +, size, ., height, +]
[y, ,, size, ., width, ,, size, ., height, ), ), ;, y, =, y, +, size, ., height, +]
[width, ,, size, ., height, ), ), ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;]
[size, ., height, ), ), ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, maxWidth, =]
[size, ., height, ), ), ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, maxWidth, =]
[), ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, maxWidth, =, Math, ., max, (]
[y, =, y, +, size, ., height, +, this, ., verticalGap, ;, maxWidth, =, Math, ., max, (, maxWidth, ,]
[y, =, y, +, size, ., height, +, this, ., verticalGap, ;, maxWidth, =, Math, ., max, (, maxWidth, ,]
[verticalGap, ;, maxWidth, =, Math, ., max, (, maxWidth, ,, size, ., width, ), ;, }, else, {, if, (]
[verticalGap, ;, maxWidth, =, Math, ., max, (, maxWidth, ,, size, ., width, ), ;, }, else, {, if, (]
[(, maxWidth, ,, size, ., width, ), ;, }, else, {, if, (, itemsInColumn, ., isEmpty, (, ), ), {]
[(, maxWidth, ,, size, ., width, ), ;, }, else, {, if, (, itemsInColumn, ., isEmpty, (, ), ), {]
[., width, ), ;, }, else, {, if, (, itemsInColumn, ., isEmpty, (, ), ), {, block, ., setBounds, (]
[else, {, if, (, itemsInColumn, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[if, (, itemsInColumn, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[itemsInColumn, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[itemsInColumn, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,]
[), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, Math, ., min, (]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, Math, ., min, (]
[Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, Math, ., min, (, size, ., height, ,]
[Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, Math, ., min, (, size, ., height, ,]
[Double, (, x, ,, y, ,, size, ., width, ,, Math, ., min, (, size, ., height, ,, height, -]
[,, size, ., width, ,, Math, ., min, (, size, ., height, ,, height, -, y, ), ), ), ;]
[., width, ,, Math, ., min, (, size, ., height, ,, height, -, y, ), ), ), ;, y, =]
[,, Math, ., min, (, size, ., height, ,, height, -, y, ), ), ), ;, y, =, 0.0, ;]
[., min, (, size, ., height, ,, height, -, y, ), ), ), ;, y, =, 0.0, ;, x, =]
[., min, (, size, ., height, ,, height, -, y, ), ), ), ;, y, =, 0.0, ;, x, =]
[., min, (, size, ., height, ,, height, -, y, ), ), ), ;, y, =, 0.0, ;, x, =]
[(, size, ., height, ,, height, -, y, ), ), ), ;, y, =, 0.0, ;, x, =, x, +]
[(, size, ., height, ,, height, -, y, ), ), ), ;, y, =, 0.0, ;, x, =, x, +]
[,, height, -, y, ), ), ), ;, y, =, 0.0, ;, x, =, x, +, size, ., width, +]
[,, height, -, y, ), ), ), ;, y, =, 0.0, ;, x, =, x, +, size, ., width, +]
[;, y, =, 0.0, ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, }, else, {]
[;, y, =, 0.0, ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, }, else, {]
[=, x, +, size, ., width, +, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;]
[+, size, ., width, +, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =]
[+, size, ., width, +, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =]
[+, size, ., width, +, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =]
[., width, +, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =, x, +]
[+, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =, x, +, maxWidth, +]
[+, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =, x, +, maxWidth, +]
[;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =, x, +, maxWidth, +, this, ., horizontalGap, ;]
[else, {, itemsInColumn, ., clear, (, ), ;, x, =, x, +, maxWidth, +, this, ., horizontalGap, ;, y, =]
[itemsInColumn, ., clear, (, ), ;, x, =, x, +, maxWidth, +, this, ., horizontalGap, ;, y, =, 0.0, ;]
[clear, (, ), ;, x, =, x, +, maxWidth, +, this, ., horizontalGap, ;, y, =, 0.0, ;, maxWidth, =]
[clear, (, ), ;, x, =, x, +, maxWidth, +, this, ., horizontalGap, ;, y, =, 0.0, ;, maxWidth, =]
[x, =, x, +, maxWidth, +, this, ., horizontalGap, ;, y, =, 0.0, ;, maxWidth, =, size, ., width, ;]
[x, =, x, +, maxWidth, +, this, ., horizontalGap, ;, y, =, 0.0, ;, maxWidth, =, size, ., width, ;]
[maxWidth, +, this, ., horizontalGap, ;, y, =, 0.0, ;, maxWidth, =, size, ., width, ;, block, ., setBounds, (]
[;, y, =, 0.0, ;, maxWidth, =, size, ., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[=, 0.0, ;, maxWidth, =, size, ., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[;, maxWidth, =, size, ., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[;, maxWidth, =, size, ., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,]
[., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, Math, ., min, (]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, Math, ., min, (]
[Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, Math, ., min, (, size, ., height, ,]
[,, y, ,, size, ., width, ,, Math, ., min, (, size, ., height, ,, height, ), ), ), ;]
[,, size, ., width, ,, Math, ., min, (, size, ., height, ,, height, ), ), ), ;, y, =]
[,, size, ., width, ,, Math, ., min, (, size, ., height, ,, height, ), ), ), ;, y, =]
[,, size, ., width, ,, Math, ., min, (, size, ., height, ,, height, ), ), ), ;, y, =]
[,, Math, ., min, (, size, ., height, ,, height, ), ), ), ;, y, =, size, ., height, +]
[,, Math, ., min, (, size, ., height, ,, height, ), ), ), ;, y, =, size, ., height, +]
[(, size, ., height, ,, height, ), ), ), ;, y, =, size, ., height, +, this, ., verticalGap, ;]
[(, size, ., height, ,, height, ), ), ), ;, y, =, size, ., height, +, this, ., verticalGap, ;]
[,, height, ), ), ), ;, y, =, size, ., height, +, this, ., verticalGap, ;, itemsInColumn, ., add, (]
[=, size, ., height, +, this, ., verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return]
[height, +, this, ., verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (]
[height, +, this, ., verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (]
[this, ., verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, x, +]
[verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, x, +, maxWidth, ,]
[verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, x, +, maxWidth, ,]
[), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =]
[}, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (]
[Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[g2, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s1, ., height, ), ), {, return]
[(, ), ., contains, (, s1, ., height, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =]
[(, ), ., contains, (, s1, ., height, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =]
[(, s1, ., height, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (]
[(, s1, ., height, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (]
[(, s1, ., height, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (]
[{, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., getUpperBound, (, ), ), ;, return]
[c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeRF, (]
[constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeRF, (, container, ,]
[toFixedHeight, (, constraint, ., getHeightRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeRF, (, container, ,, g2, ,]
[;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =]
[}, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (]
[Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (]
[=, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[=, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return]
[(, ), ., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =]
[(, ), ., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =]
[(, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (]
[s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (]
[., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return]
[(, constraint, ., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (]
[., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,]
[(, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,]
[,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, y, =]
[}, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, y, =, 0.0, ;, double, height, =]
[BlockContainer, container, ,, Graphics2D, g2, ), {, double, y, =, 0.0, ;, double, height, =, 0.0, ;, double, maxWidth, =]
[), {, double, y, =, 0.0, ;, double, height, =, 0.0, ;, double, maxWidth, =, 0.0, ;, List, blocks, =]
[), {, double, y, =, 0.0, ;, double, height, =, 0.0, ;, double, maxWidth, =, 0.0, ;, List, blocks, =]
[=, 0.0, ;, double, maxWidth, =, 0.0, ;, List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =]
[=, 0.0, ;, double, maxWidth, =, 0.0, ;, List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =]
[List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =, blocks, ., size, (, ), ;, if, (]
[List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =, blocks, ., size, (, ), ;, if, (]
[=, container, ., getBlocks, (, ), ;, int, blockCount, =, blocks, ., size, (, ), ;, if, (, blockCount, >]
[blockCount, =, blocks, ., size, (, ), ;, if, (, blockCount, >, 0, ), {, Size2D, [, ], sizes, =]
[., size, (, ), ;, if, (, blockCount, >, 0, ), {, Size2D, [, ], sizes, =, new, Size2D, []
[., size, (, ), ;, if, (, blockCount, >, 0, ), {, Size2D, [, ], sizes, =, new, Size2D, []
[Size2D, [, ], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int, i, =]
[], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, )]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, )]
[blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (]
[(, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;]
[(, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;]
[;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, []
[), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =]
[), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =]
[=, (, Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =, block, ., arrange, (]
[Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,]
[Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,]
[(, i, ), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =]
[), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =]
[sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =, height, +]
[sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =, height, +]
[sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =, height, +]
[i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =, height, +, sizes, []
[g2, ,, RectangleConstraint, ., NONE, ), ;, height, =, height, +, sizes, [, i, ], ., getHeight, (, ), ;]
[RectangleConstraint, ., NONE, ), ;, height, =, height, +, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth, =]
[RectangleConstraint, ., NONE, ), ;, height, =, height, +, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth, =]
[;, height, =, height, +, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth, =, Math, ., max, (]
[;, height, =, height, +, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth, =, Math, ., max, (]
[;, height, =, height, +, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth, =, Math, ., max, (]
[=, height, +, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth, =, Math, ., max, (, sizes, []
[i, ], ., getHeight, (, ), ;, maxWidth, =, Math, ., max, (, sizes, [, i, ], ., width, ,]
[getHeight, (, ), ;, maxWidth, =, Math, ., max, (, sizes, [, i, ], ., width, ,, maxWidth, ), ;]
[getHeight, (, ), ;, maxWidth, =, Math, ., max, (, sizes, [, i, ], ., width, ,, maxWidth, ), ;]
[maxWidth, =, Math, ., max, (, sizes, [, i, ], ., width, ,, maxWidth, ), ;, block, ., setBounds, (]
[(, sizes, [, i, ], ., width, ,, maxWidth, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[[, i, ], ., width, ,, maxWidth, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[], ., width, ,, maxWidth, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,]
[], ., width, ,, maxWidth, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,]
[], ., width, ,, maxWidth, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,]
[width, ,, maxWidth, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,, sizes, []
[block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,, sizes, [, i, ], ., width, ,]
[block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,, sizes, [, i, ], ., width, ,]
[block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,, sizes, [, i, ], ., width, ,]
[setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,, sizes, [, i, ], ., width, ,, sizes, []
[0.0, ,, y, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;]
[y, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, y, =]
[y, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, y, =]
[y, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, y, =]
[sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, y, =, y, +]
[sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, y, =, y, +]
[sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, y, =, y, +]
[i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, y, =, y, +, sizes, []
[sizes, [, i, ], ., height, ), ), ;, y, =, y, +, sizes, [, i, ], ., height, +]
[sizes, [, i, ], ., height, ), ), ;, y, =, y, +, sizes, [, i, ], ., height, +]
[), ;, y, =, y, +, sizes, [, i, ], ., height, +, this, ., verticalGap, ;, }, if, (]
[), ;, y, =, y, +, sizes, [, i, ], ., height, +, this, ., verticalGap, ;, }, if, (]
[y, =, y, +, sizes, [, i, ], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >]
[+, sizes, [, i, ], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {]
[[, i, ], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =]
[[, i, ], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =]
[], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =, height, +]
[], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =, height, +]
[], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =, height, +]
[this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =, height, +, this, ., verticalGap, *]
[., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =, height, +, this, ., verticalGap, *, (]
[., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =, height, +, this, ., verticalGap, *, (]
[;, }, if, (, blockCount, >, 1, ), {, height, =, height, +, this, ., verticalGap, *, (, blockCount, -]
[1, ), {, height, =, height, +, this, ., verticalGap, *, (, blockCount, -, 1, ), ;, }, if, (]
[1, ), {, height, =, height, +, this, ., verticalGap, *, (, blockCount, -, 1, ), ;, }, if, (]
[1, ), {, height, =, height, +, this, ., verticalGap, *, (, blockCount, -, 1, ), ;, }, if, (]
[=, height, +, this, ., verticalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this, ., horizontalAlignment, !=]
[=, height, +, this, ., verticalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this, ., horizontalAlignment, !=]
[1, ), ;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =]
[;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0, ;]
[;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0, ;]
[if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0, ;, i, <]
[HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[(, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (, this, ., horizontalAlignment, ==]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (, this, ., horizontalAlignment, ==]
[;, i, ++, ), {, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, }, else, if, (]
[;, i, ++, ), {, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, }, else, if, (]
[;, i, ++, ), {, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, }, else, if, (]
[{, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, }, else, if, (, this, ., horizontalAlignment, ==]
[{, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, }, else, if, (, this, ., horizontalAlignment, ==]
[), {, }, else, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, }, }, }, }, return]
[else, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, }, }, }, }, return, new, Size2D, (]
[(, this, ., horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, }, }, }, }, return, new, Size2D, (, maxWidth, ,]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[}, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[(, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, ColumnArrangement, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, ColumnArrangement, ), ), {, return, false, ;, }, ColumnArrangement, that, =]
[if, (, !, (, obj, instanceof, ColumnArrangement, ), ), {, return, false, ;, }, ColumnArrangement, that, =, (, ColumnArrangement, )]
[obj, instanceof, ColumnArrangement, ), ), {, return, false, ;, }, ColumnArrangement, that, =, (, ColumnArrangement, ), obj, ;, if, (]
[obj, instanceof, ColumnArrangement, ), ), {, return, false, ;, }, ColumnArrangement, that, =, (, ColumnArrangement, ), obj, ;, if, (]
[obj, instanceof, ColumnArrangement, ), ), {, return, false, ;, }, ColumnArrangement, that, =, (, ColumnArrangement, ), obj, ;, if, (]
[), {, return, false, ;, }, ColumnArrangement, that, =, (, ColumnArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=]
[), {, return, false, ;, }, ColumnArrangement, that, =, (, ColumnArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=]
[ColumnArrangement, that, =, (, ColumnArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return]
[), obj, ;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (]
[(, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=]
[(, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=]
[., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return]
[false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (]
[(, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=]
[(, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=]
[., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return]
[false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (]
[(, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=]
[(, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=]
[., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return]
[return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return, false, ;, }, return]
