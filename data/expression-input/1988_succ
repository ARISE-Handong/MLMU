[=, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, }, Node, mutate, (, String, fnName, ,, Node, fnNode, ,, Node]
[., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, }, Node, mutate, (, String, fnName, ,, Node, fnNode]
[;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, }, Node, mutate, (, String, fnName, ,, Node, fnNode, ,, Node, callNode, ,]
[=, safeNameIdSupplier, ;, }, Node, mutate, (, String, fnName, ,, Node, fnNode, ,, Node, callNode, ,, String, resultName, ,, boolean]
[., safeNameIdSupplier, =, safeNameIdSupplier, ;, }, Node, mutate, (, String, fnName, ,, Node, fnNode, ,, Node, callNode, ,, String, resultName]
[;, }, Node, mutate, (, String, fnName, ,, Node, fnNode, ,, Node, callNode, ,, String, resultName, ,, boolean, needsDefaultResult, ,]
[;, makeLocalNamesUnique, (, newFnNode, ,, isCallInLoop, ), ;, rewriteFunctionDeclarations, (, newFnNode, ., getLastChild, (, ), ), ;, Set, <, String]
[., cloneTree, (, ), ;, makeLocalNamesUnique, (, newFnNode, ,, isCallInLoop, ), ;, rewriteFunctionDeclarations, (, newFnNode, ., getLastChild, (, ), )]
[;, rewriteFunctionDeclarations, (, newFnNode, ., getLastChild, (, ), ), ;, Set, <, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters, (]
[,, isCallInLoop, ), ;, rewriteFunctionDeclarations, (, newFnNode, ., getLastChild, (, ), ), ;, Set, <, String, >, namesToAlias, =, FunctionArgumentInjector]
[), ;, rewriteFunctionDeclarations, (, newFnNode, ., getLastChild, (, ), ), ;, Set, <, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters]
[;, Set, <, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters, (, newFnNode, ), ;, LinkedHashMap, <, String, ,, Node, >]
[), ;, Set, <, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters, (, newFnNode, ), ;, LinkedHashMap, <, String, ,, Node]
[., getLastChild, (, ), ), ;, Set, <, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters, (, newFnNode, ), ;, LinkedHashMap]
[;, LinkedHashMap, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, newFnNode, ,, callNode, ,, this, ., safeNameIdSupplier]
[., findModifiedParameters, (, newFnNode, ), ;, LinkedHashMap, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, newFnNode, ,]
[), ;, LinkedHashMap, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, newFnNode, ,, callNode, ,, this, .]
[;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (]
[., getFunctionCallParameterMap, (, newFnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (]
[,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (]
[,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, )]
[), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {, FunctionArgumentInjector, ., maybeAddTempsForCallArguments]
[., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {, FunctionArgumentInjector]
[;, if, (, hasArgs, ), {, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, newFnNode, ,, args, ,, namesToAlias, ,, compiler, ., getCodingConvention, (]
[;, if, (, hasArgs, ), {, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, newFnNode, ,, args, ,, namesToAlias, ,, compiler, ., getCodingConvention, (]
[., isEmpty, (, ), ;, if, (, hasArgs, ), {, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, newFnNode, ,, args, ,, namesToAlias, ,]
[), {, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, newFnNode, ,, args, ,, namesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, }]
[;, }, Node, newBlock, =, NodeUtil, ., getFunctionBody, (, newFnNode, ), ;, newBlock, ., detachFromParent, (, ), ;, if, (]
[., maybeAddTempsForCallArguments, (, newFnNode, ,, args, ,, namesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, }, Node, newBlock, =]
[,, args, ,, namesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, }, Node, newBlock, =, NodeUtil, ., getFunctionBody, (]
[,, namesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, }, Node, newBlock, =, NodeUtil, ., getFunctionBody, (, newFnNode, )]
[,, compiler, ., getCodingConvention, (, ), ), ;, }, Node, newBlock, =, NodeUtil, ., getFunctionBody, (, newFnNode, ), ;, newBlock]
[), ;, }, Node, newBlock, =, NodeUtil, ., getFunctionBody, (, newFnNode, ), ;, newBlock, ., detachFromParent, (, ), ;, if]
[., getCodingConvention, (, ), ), ;, }, Node, newBlock, =, NodeUtil, ., getFunctionBody, (, newFnNode, ), ;, newBlock, ., detachFromParent]
[;, newBlock, ., detachFromParent, (, ), ;, if, (, hasArgs, ), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,, args]
[., getFunctionBody, (, newFnNode, ), ;, newBlock, ., detachFromParent, (, ), ;, if, (, hasArgs, ), {, Node, inlineResult, =]
[), ;, newBlock, ., detachFromParent, (, ), ;, if, (, hasArgs, ), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,]
[;, if, (, hasArgs, ), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,, args, ,, namesToAlias, ), ;, Preconditions, .]
[., detachFromParent, (, ), ;, if, (, hasArgs, ), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,, args, ,, namesToAlias]
[), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,, args, ,, namesToAlias, ), ;, Preconditions, ., checkState, (, newBlock, ==]
[;, Preconditions, ., checkState, (, newBlock, ==, inlineResult, ), ;, }, if, (, isCallInLoop, ), {, fixUnitializedVarDeclarations, (, newBlock, )]
[,, args, ,, namesToAlias, ), ;, Preconditions, ., checkState, (, newBlock, ==, inlineResult, ), ;, }, if, (, isCallInLoop, )]
[,, namesToAlias, ), ;, Preconditions, ., checkState, (, newBlock, ==, inlineResult, ), ;, }, if, (, isCallInLoop, ), {, fixUnitializedVarDeclarations]
[), ;, Preconditions, ., checkState, (, newBlock, ==, inlineResult, ), ;, }, if, (, isCallInLoop, ), {, fixUnitializedVarDeclarations, (, newBlock]
[;, }, if, (, isCallInLoop, ), {, fixUnitializedVarDeclarations, (, newBlock, ), ;, }, String, labelName, =, getLabelNameForFunction, (, fnName, )]
[., checkState, (, newBlock, ==, inlineResult, ), ;, }, if, (, isCallInLoop, ), {, fixUnitializedVarDeclarations, (, newBlock, ), ;, }]
[), ;, }, if, (, isCallInLoop, ), {, fixUnitializedVarDeclarations, (, newBlock, ), ;, }, String, labelName, =, getLabelNameForFunction, (, fnName]
[==, inlineResult, ), ;, }, if, (, isCallInLoop, ), {, fixUnitializedVarDeclarations, (, newBlock, ), ;, }, String, labelName, =, getLabelNameForFunction]
[), ;, }, if, (, isCallInLoop, ), {, fixUnitializedVarDeclarations, (, newBlock, ), ;, }, String, labelName, =, getLabelNameForFunction, (, fnName]
[), {, fixUnitializedVarDeclarations, (, newBlock, ), ;, }, String, labelName, =, getLabelNameForFunction, (, fnName, ), ;, Node, injectableBlock, =, replaceReturns]
[;, }, String, labelName, =, getLabelNameForFunction, (, fnName, ), ;, Node, injectableBlock, =, replaceReturns, (, newBlock, ,, resultName, ,, labelName]
[), ;, }, String, labelName, =, getLabelNameForFunction, (, fnName, ), ;, Node, injectableBlock, =, replaceReturns, (, newBlock, ,, resultName, ,]
[;, Node, injectableBlock, =, replaceReturns, (, newBlock, ,, resultName, ,, labelName, ,, needsDefaultResult, ), ;, Preconditions, ., checkState, (, injectableBlock]
[), ;, Node, injectableBlock, =, replaceReturns, (, newBlock, ,, resultName, ,, labelName, ,, needsDefaultResult, ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, injectableBlock, !=, null, ), ;, return, injectableBlock, ;, }, private, void, rewriteFunctionDeclarations, (, Node, n]
[,, resultName, ,, labelName, ,, needsDefaultResult, ), ;, Preconditions, ., checkState, (, injectableBlock, !=, null, ), ;, return, injectableBlock, ;]
[,, labelName, ,, needsDefaultResult, ), ;, Preconditions, ., checkState, (, injectableBlock, !=, null, ), ;, return, injectableBlock, ;, }, private]
[,, needsDefaultResult, ), ;, Preconditions, ., checkState, (, injectableBlock, !=, null, ), ;, return, injectableBlock, ;, }, private, void, rewriteFunctionDeclarations]
[), ;, Preconditions, ., checkState, (, injectableBlock, !=, null, ), ;, return, injectableBlock, ;, }, private, void, rewriteFunctionDeclarations, (, Node]
[;, return, injectableBlock, ;, }, private, void, rewriteFunctionDeclarations, (, Node, n, ), {, if, (, n, ., isFunction, (, )]
[., checkState, (, injectableBlock, !=, null, ), ;, return, injectableBlock, ;, }, private, void, rewriteFunctionDeclarations, (, Node, n, ), {]
[), ;, return, injectableBlock, ;, }, private, void, rewriteFunctionDeclarations, (, Node, n, ), {, if, (, n, ., isFunction, (]
[!=, null, ), ;, return, injectableBlock, ;, }, private, void, rewriteFunctionDeclarations, (, Node, n, ), {, if, (, n, .]
[), ;, return, injectableBlock, ;, }, private, void, rewriteFunctionDeclarations, (, Node, n, ), {, if, (, n, ., isFunction, (]
[;, }, private, void, rewriteFunctionDeclarations, (, Node, n, ), {, if, (, n, ., isFunction, (, ), ), {, if]
[), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, fnNameNode, =, n, ., getFirstChild, (, )]
[., isFunction, (, ), ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, fnNameNode, =, n]
[), {, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, Node, name, =, IR, ., name, (, fnNameNode, .]
[., isFunctionDeclaration, (, n, ), ), {, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, Node, name, =, IR]
[), ), {, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, Node, name, =, IR, ., name, (, fnNameNode]
[;, Node, name, =, IR, ., name, (, fnNameNode, ., getString, (, ), ), ., srcref, (, fnNameNode, ), ;]
[., getFirstChild, (, ), ;, Node, name, =, IR, ., name, (, fnNameNode, ., getString, (, ), ), ., srcref]
[;, Node, var, =, IR, ., var, (, name, ), ., srcref, (, n, ), ;, fnNameNode, ., setString, (]
[., srcref, (, fnNameNode, ), ;, Node, var, =, IR, ., var, (, name, ), ., srcref, (, n, )]
[., name, (, fnNameNode, ., getString, (, ), ), ., srcref, (, fnNameNode, ), ;, Node, var, =, IR, .]
[), ., srcref, (, fnNameNode, ), ;, Node, var, =, IR, ., var, (, name, ), ., srcref, (, n]
[., getString, (, ), ), ., srcref, (, fnNameNode, ), ;, Node, var, =, IR, ., var, (, name, )]
[), ;, Node, var, =, IR, ., var, (, name, ), ., srcref, (, n, ), ;, fnNameNode, ., setString]
[;, fnNameNode, ., setString, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, var, )]
[., srcref, (, n, ), ;, fnNameNode, ., setString, (, "", ), ;, n, ., getParent, (, ), ., replaceChild]
[., var, (, name, ), ., srcref, (, n, ), ;, fnNameNode, ., setString, (, "", ), ;, n, .]
[), ., srcref, (, n, ), ;, fnNameNode, ., setString, (, "", ), ;, n, ., getParent, (, ), .]
[), ;, fnNameNode, ., setString, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, var]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, var, ), ;, name, ., addChildToFront, (, n, )]
[., setString, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, var, ), ;, name]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, var, ), ;, name, ., addChildToFront, (, n]
[;, name, ., addChildToFront, (, n, ), ;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild]
[., replaceChild, (, n, ,, var, ), ;, name, ., addChildToFront, (, n, ), ;, }, return, ;, }, for]
[., getParent, (, ), ., replaceChild, (, n, ,, var, ), ;, name, ., addChildToFront, (, n, ), ;, }]
[,, var, ), ;, name, ., addChildToFront, (, n, ), ;, }, return, ;, }, for, (, Node, c, =]
[), ;, name, ., addChildToFront, (, n, ), ;, }, return, ;, }, for, (, Node, c, =, n, .]
[;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ,, next, ;, c, !=]
[., addChildToFront, (, n, ), ;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, )]
[), ;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ,, next, ;, c]
[,, next, ;, c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;]
[., getFirstChild, (, ), ,, next, ;, c, !=, null, ;, c, =, next, ), {, next, =, c, .]
[;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, rewriteFunctionDeclarations, (, c, ), ;, }]
[!=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, rewriteFunctionDeclarations, (, c, )]
[;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, rewriteFunctionDeclarations, (, c, ), ;, }]
[=, next, ), {, next, =, c, ., getNext, (, ), ;, rewriteFunctionDeclarations, (, c, ), ;, }, }, private]
[), {, next, =, c, ., getNext, (, ), ;, rewriteFunctionDeclarations, (, c, ), ;, }, }, private, void, fixUnitializedVarDeclarations]
[=, c, ., getNext, (, ), ;, rewriteFunctionDeclarations, (, c, ), ;, }, }, private, void, fixUnitializedVarDeclarations, (, Node, n]
[;, rewriteFunctionDeclarations, (, c, ), ;, }, }, private, void, fixUnitializedVarDeclarations, (, Node, n, ), {, if, (, NodeUtil, .]
[., getNext, (, ), ;, rewriteFunctionDeclarations, (, c, ), ;, }, }, private, void, fixUnitializedVarDeclarations, (, Node, n, ), {]
[;, }, }, private, void, fixUnitializedVarDeclarations, (, Node, n, ), {, if, (, NodeUtil, ., isLoopStructure, (, n, ), )]
[), ;, }, }, private, void, fixUnitializedVarDeclarations, (, Node, n, ), {, if, (, NodeUtil, ., isLoopStructure, (, n, )]
[), {, return, ;, }, if, (, n, ., isVar, (, ), ), {, Node, name, =, n, ., getFirstChild]
[., isLoopStructure, (, n, ), ), {, return, ;, }, if, (, n, ., isVar, (, ), ), {, Node]
[), ), {, return, ;, }, if, (, n, ., isVar, (, ), ), {, Node, name, =, n, .]
[), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, name, ., hasChildren, (, ), )]
[., isVar, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, name, .]
[;, if, (, !, name, ., hasChildren, (, ), ), {, Node, srcLocation, =, name, ;, name, ., addChildToBack, (]
[., getFirstChild, (, ), ;, if, (, !, name, ., hasChildren, (, ), ), {, Node, srcLocation, =, name, ;]
[), {, Node, srcLocation, =, name, ;, name, ., addChildToBack, (, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }]
[), {, Node, srcLocation, =, name, ;, name, ., addChildToBack, (, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }]
[., hasChildren, (, ), ), {, Node, srcLocation, =, name, ;, name, ., addChildToBack, (, NodeUtil, ., newUndefinedNode, (, srcLocation]
[;, name, ., addChildToBack, (, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }, return, ;, }, for, (, Node]
[;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[., addChildToBack, (, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }, return, ;, }, for, (, Node, c, =]
[), ;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[., newUndefinedNode, (, srcLocation, ), ), ;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (]
[), ), ;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, fixUnitializedVarDeclarations, (, c, ), ;, }]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, fixUnitializedVarDeclarations, (]
[;, c, =, c, ., getNext, (, ), ), {, fixUnitializedVarDeclarations, (, c, ), ;, }, }, private, void, makeLocalNamesUnique]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, fixUnitializedVarDeclarations, (, c, ), ;, }, }, private]
[;, c, =, c, ., getNext, (, ), ), {, fixUnitializedVarDeclarations, (, c, ), ;, }, }, private, void, makeLocalNamesUnique]
[=, c, ., getNext, (, ), ), {, fixUnitializedVarDeclarations, (, c, ), ;, }, }, private, void, makeLocalNamesUnique, (, Node]
[), {, fixUnitializedVarDeclarations, (, c, ), ;, }, }, private, void, makeLocalNamesUnique, (, Node, fnNode, ,, boolean, isCallInLoop, ), {]
[., getNext, (, ), ), {, fixUnitializedVarDeclarations, (, c, ), ;, }, }, private, void, makeLocalNamesUnique, (, Node, fnNode, ,]
[;, }, }, private, void, makeLocalNamesUnique, (, Node, fnNode, ,, boolean, isCallInLoop, ), {, Supplier, <, String, >, idSupplier, =]
[), ;, }, }, private, void, makeLocalNamesUnique, (, Node, fnNode, ,, boolean, isCallInLoop, ), {, Supplier, <, String, >, idSupplier]
[;, NodeTraversal, ., traverse, (, compiler, ,, fnNode, ,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop]
[., getUniqueNameIdSupplier, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, fnNode, ,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier]
[;, new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (, idSupplier, ), ,, false, ), ., process, (, null, ,, fnNode]
[., traverse, (, compiler, ,, fnNode, ,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop, ), )]
[,, fnNode, ,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop, ), ), ), ;, new, RenameLabels]
[,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop, ), ), ), ;, new, RenameLabels, (, compiler]
[), ;, new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (, idSupplier, ), ,, false, ), ., process, (, null, ,]
[), ), ;, new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (, idSupplier, ), ,, false, ), ., process, (, null]
[,, "inline_", ,, isCallInLoop, ), ), ), ;, new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (, idSupplier, ), ,, false]
[,, isCallInLoop, ), ), ), ;, new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (, idSupplier, ), ,, false, ), .]
[), ), ), ;, new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (, idSupplier, ), ,, false, ), ., process, (]
[;, }, static, class, LabelNameSupplier, implements, Supplier, <, String, >, {, final, Supplier, <, String, >, idSupplier, ;, LabelNameSupplier, (]
[., process, (, null, ,, fnNode, ), ;, }, static, class, LabelNameSupplier, implements, Supplier, <, String, >, {, final, Supplier]
[,, new, LabelNameSupplier, (, idSupplier, ), ,, false, ), ., process, (, null, ,, fnNode, ), ;, }, static, class]
[,, false, ), ., process, (, null, ,, fnNode, ), ;, }, static, class, LabelNameSupplier, implements, Supplier, <, String, >]
[), ,, false, ), ., process, (, null, ,, fnNode, ), ;, }, static, class, LabelNameSupplier, implements, Supplier, <, String]
[), ., process, (, null, ,, fnNode, ), ;, }, static, class, LabelNameSupplier, implements, Supplier, <, String, >, {, final]
[,, fnNode, ), ;, }, static, class, LabelNameSupplier, implements, Supplier, <, String, >, {, final, Supplier, <, String, >, idSupplier]
[), ;, }, static, class, LabelNameSupplier, implements, Supplier, <, String, >, {, final, Supplier, <, String, >, idSupplier, ;, LabelNameSupplier]
[=, idSupplier, ;, }, @, Override, public, String, get, (, ), {, return, "JSCompiler_inline_label_", +, idSupplier, ., get, (, )]
[., idSupplier, =, idSupplier, ;, }, @, Override, public, String, get, (, ), {, return, "JSCompiler_inline_label_", +, idSupplier, ., get]
[;, }, @, Override, public, String, get, (, ), {, return, "JSCompiler_inline_label_", +, idSupplier, ., get, (, ), ;, }]
[;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =, (, fnName, ==, null, ||, fnName]
[+, idSupplier, ., get, (, ), ;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =]
[;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =, (, fnName, ==, null, ||, fnName]
[., get, (, ), ;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =, (, fnName]
[;, return, "JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName, (, )]
[?, "anon", :, fnName, ;, return, "JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, }, private]
[), ?, "anon", :, fnName, ;, return, "JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, }]
[||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return, "JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier]
[==, null, ||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return, "JSCompiler_inline_label_", +, name, +, "_"]
[||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return, "JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier]
[), ?, "anon", :, fnName, ;, return, "JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, }]
[., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return, "JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier, ., get]
[:, fnName, ;, return, "JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName]
[;, return, "JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName, (, )]
[;, }, private, String, getUniqueThisName, (, ), {, return, "JSCompiler_inline_this_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, Node]
[+, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName, (, ), {, return, "JSCompiler_inline_this_", +, safeNameIdSupplier, ., get]
[+, "_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName, (, ), {, return, "JSCompiler_inline_this_", +, safeNameIdSupplier]
[+, name, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName, (, ), {, return, "JSCompiler_inline_this_"]
[+, "_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName, (, ), {, return, "JSCompiler_inline_this_", +, safeNameIdSupplier]
[+, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName, (, ), {, return, "JSCompiler_inline_this_", +, safeNameIdSupplier, ., get]
[;, }, private, String, getUniqueThisName, (, ), {, return, "JSCompiler_inline_this_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, Node]
[., get, (, ), ;, }, private, String, getUniqueThisName, (, ), {, return, "JSCompiler_inline_this_", +, safeNameIdSupplier, ., get, (, )]
[;, }, private, Node, aliasAndInlineArguments, (, Node, fnTemplateRoot, ,, LinkedHashMap, <, String, ,, Node, >, argMap, ,, Set, <, String]
[+, safeNameIdSupplier, ., get, (, ), ;, }, private, Node, aliasAndInlineArguments, (, Node, fnTemplateRoot, ,, LinkedHashMap, <, String, ,, Node]
[;, }, private, Node, aliasAndInlineArguments, (, Node, fnTemplateRoot, ,, LinkedHashMap, <, String, ,, Node, >, argMap, ,, Set, <, String]
[., get, (, ), ;, }, private, Node, aliasAndInlineArguments, (, Node, fnTemplateRoot, ,, LinkedHashMap, <, String, ,, Node, >, argMap]
[), {, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, argMap, ), ;, Preconditions, .]
[||, namesToAlias, ., isEmpty, (, ), ), {, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null]
[==, null, ||, namesToAlias, ., isEmpty, (, ), ), {, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot]
[||, namesToAlias, ., isEmpty, (, ), ), {, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null]
[), {, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, argMap, ), ;, Preconditions, .]
[., isEmpty, (, ), ), {, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, argMap]
[;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, return, result, ;, }, else, {, Map, <, String, ,]
[., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, argMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, )]
[,, fnTemplateRoot, ,, null, ,, argMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, return, result, ;]
[,, null, ,, argMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, return, result, ;, }, else]
[,, argMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, return, result, ;, }, else, {, Map]
[), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, return, result, ;, }, else, {, Map, <, String]
[;, return, result, ;, }, else, {, Map, <, String, ,, Node, >, newArgMap, =, Maps, ., newHashMap, (, argMap]
[., checkState, (, result, ==, fnTemplateRoot, ), ;, return, result, ;, }, else, {, Map, <, String, ,, Node, >]
[), ;, return, result, ;, }, else, {, Map, <, String, ,, Node, >, newArgMap, =, Maps, ., newHashMap, (]
[==, fnTemplateRoot, ), ;, return, result, ;, }, else, {, Map, <, String, ,, Node, >, newArgMap, =, Maps, .]
[), ;, return, result, ;, }, else, {, Map, <, String, ,, Node, >, newArgMap, =, Maps, ., newHashMap, (]
[;, }, else, {, Map, <, String, ,, Node, >, newArgMap, =, Maps, ., newHashMap, (, argMap, ), ;, List]
[;, List, <, Node, >, newVars, =, Lists, ., newLinkedList, (, ), ;, for, (, Entry, <, String, ,, Node]
[., newHashMap, (, argMap, ), ;, List, <, Node, >, newVars, =, Lists, ., newLinkedList, (, ), ;, for, (]
[), ;, List, <, Node, >, newVars, =, Lists, ., newLinkedList, (, ), ;, for, (, Entry, <, String, ,]
[;, for, (, Entry, <, String, ,, Node, >, entry, :, argMap, ., entrySet, (, ), ), {, String, name]
[., newLinkedList, (, ), ;, for, (, Entry, <, String, ,, Node, >, entry, :, argMap, ., entrySet, (, )]
[), {, String, name, =, entry, ., getKey, (, ), ;, if, (, namesToAlias, ., contains, (, name, ), )]
[., entrySet, (, ), ), {, String, name, =, entry, ., getKey, (, ), ;, if, (, namesToAlias, ., contains]
[;, if, (, namesToAlias, ., contains, (, name, ), ), {, if, (, name, ., equals, (, THIS_MARKER, ), )]
[., getKey, (, ), ;, if, (, namesToAlias, ., contains, (, name, ), ), {, if, (, name, ., equals]
[), {, if, (, name, ., equals, (, THIS_MARKER, ), ), {, boolean, referencesThis, =, NodeUtil, ., referencesThis, (, fnTemplateRoot]
[., contains, (, name, ), ), {, if, (, name, ., equals, (, THIS_MARKER, ), ), {, boolean, referencesThis, =]
[), ), {, if, (, name, ., equals, (, THIS_MARKER, ), ), {, boolean, referencesThis, =, NodeUtil, ., referencesThis, (]
[), {, boolean, referencesThis, =, NodeUtil, ., referencesThis, (, fnTemplateRoot, ), ;, Node, value, =, entry, ., getValue, (, )]
[., equals, (, THIS_MARKER, ), ), {, boolean, referencesThis, =, NodeUtil, ., referencesThis, (, fnTemplateRoot, ), ;, Node, value, =]
[), ), {, boolean, referencesThis, =, NodeUtil, ., referencesThis, (, fnTemplateRoot, ), ;, Node, value, =, entry, ., getValue, (]
[;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !, value, ., isThis, (, ), &&, (]
[., referencesThis, (, fnTemplateRoot, ), ;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !, value, .]
[), ;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !, value, ., isThis, (, ), &&]
[;, if, (, !, value, ., isThis, (, ), &&, (, referencesThis, ||, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler]
[., getValue, (, ), ;, if, (, !, value, ., isThis, (, ), &&, (, referencesThis, ||, NodeUtil, ., mayHaveSideEffects]
[), {, String, newName, =, getUniqueThisName, (, ), ;, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (]
[&&, (, referencesThis, ||, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ), {, String, newName, =, getUniqueThisName, (]
[&&, (, referencesThis, ||, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ), {, String, newName, =, getUniqueThisName, (]
[., isThis, (, ), &&, (, referencesThis, ||, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ), {, String]
[), {, String, newName, =, getUniqueThisName, (, ), ;, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (]
[), ), {, String, newName, =, getUniqueThisName, (, ), ;, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree]
[||, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ), {, String, newName, =, getUniqueThisName, (, ), ;, Node]
[), ), {, String, newName, =, getUniqueThisName, (, ), ;, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree]
[., mayHaveSideEffects, (, value, ,, compiler, ), ), ), {, String, newName, =, getUniqueThisName, (, ), ;, Node, newValue, =]
[,, compiler, ), ), ), {, String, newName, =, getUniqueThisName, (, ), ;, Node, newValue, =, entry, ., getValue, (]
[), ), ), {, String, newName, =, getUniqueThisName, (, ), ;, Node, newValue, =, entry, ., getValue, (, ), .]
[;, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =, NodeUtil, ., newVarNode]
[;, Node, newNode, =, NodeUtil, ., newVarNode, (, newName, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, .]
[., cloneTree, (, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, newName, ,, newValue, ), ., copyInformationFromForTree, (, newValue]
[., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, newName, ,, newValue, )]
[;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., put, (, THIS_MARKER, ,, IR, ., name, (]
[., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., put, (, THIS_MARKER]
[., newVarNode, (, newName, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode]
[,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, .]
[), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., put, (]
[), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., put, (, THIS_MARKER, ,, IR, ., name]
[;, newArgMap, ., put, (, THIS_MARKER, ,, IR, ., name, (, newName, ), ., srcrefTree, (, newValue, ), ), ;]
[., add, (, 0, ,, newNode, ), ;, newArgMap, ., put, (, THIS_MARKER, ,, IR, ., name, (, newName, )]
[,, newNode, ), ;, newArgMap, ., put, (, THIS_MARKER, ,, IR, ., name, (, newName, ), ., srcrefTree, (, newValue]
[), ;, newArgMap, ., put, (, THIS_MARKER, ,, IR, ., name, (, newName, ), ., srcrefTree, (, newValue, ), )]
[;, }, }, else, {, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode]
[., put, (, THIS_MARKER, ,, IR, ., name, (, newName, ), ., srcrefTree, (, newValue, ), ), ;, }, }]
[,, IR, ., name, (, newName, ), ., srcrefTree, (, newValue, ), ), ;, }, }, else, {, Node, newValue]
[), ;, }, }, else, {, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node]
[., srcrefTree, (, newValue, ), ), ;, }, }, else, {, Node, newValue, =, entry, ., getValue, (, ), .]
[., name, (, newName, ), ., srcrefTree, (, newValue, ), ), ;, }, }, else, {, Node, newValue, =, entry]
[), ., srcrefTree, (, newValue, ), ), ;, }, }, else, {, Node, newValue, =, entry, ., getValue, (, )]
[), ), ;, }, }, else, {, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;]
[;, Node, newNode, =, NodeUtil, ., newVarNode, (, name, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, .]
[., cloneTree, (, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, name, ,, newValue, ), ., copyInformationFromForTree, (, newValue]
[., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, name, ,, newValue, )]
[;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., remove, (, name, ), ;, }, }, }]
[., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., remove, (, name]
[., newVarNode, (, name, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode]
[,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, .]
[), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., remove, (]
[), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., remove, (, name, ), ;, }, }]
[;, newArgMap, ., remove, (, name, ), ;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,]
[., add, (, 0, ,, newNode, ), ;, newArgMap, ., remove, (, name, ), ;, }, }, }, Node, result]
[,, newNode, ), ;, newArgMap, ., remove, (, name, ), ;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject]
[), ;, newArgMap, ., remove, (, name, ), ;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler]
[;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, newArgMap, ), ;]
[., remove, (, name, ), ;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,]
[), ;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, newArgMap, )]
[;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, for, (, Node, n, :, newVars, ), {, fnTemplateRoot, .]
[., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, newArgMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, )]
[,, fnTemplateRoot, ,, null, ,, newArgMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, for, (, Node]
[,, null, ,, newArgMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, for, (, Node, n, :]
[,, newArgMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, for, (, Node, n, :, newVars, )]
[), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, for, (, Node, n, :, newVars, ), {, fnTemplateRoot]
[;, for, (, Node, n, :, newVars, ), {, fnTemplateRoot, ., addChildToFront, (, n, ), ;, }, return, result, ;]
[., checkState, (, result, ==, fnTemplateRoot, ), ;, for, (, Node, n, :, newVars, ), {, fnTemplateRoot, ., addChildToFront, (]
[), ;, for, (, Node, n, :, newVars, ), {, fnTemplateRoot, ., addChildToFront, (, n, ), ;, }, return, result]
[==, fnTemplateRoot, ), ;, for, (, Node, n, :, newVars, ), {, fnTemplateRoot, ., addChildToFront, (, n, ), ;, }]
[), ;, for, (, Node, n, :, newVars, ), {, fnTemplateRoot, ., addChildToFront, (, n, ), ;, }, return, result]
[), {, fnTemplateRoot, ., addChildToFront, (, n, ), ;, }, return, result, ;, }, }, private, static, Node, replaceReturns, (]
[;, }, return, result, ;, }, }, private, static, Node, replaceReturns, (, Node, block, ,, String, resultName, ,, String, labelName]
[., addChildToFront, (, n, ), ;, }, return, result, ;, }, }, private, static, Node, replaceReturns, (, Node, block, ,]
[), ;, }, return, result, ;, }, }, private, static, Node, replaceReturns, (, Node, block, ,, String, resultName, ,, String]
[;, }, }, private, static, Node, replaceReturns, (, Node, block, ,, String, resultName, ,, String, labelName, ,, boolean, resultMustBeSet, )]
[;, Preconditions, ., checkNotNull, (, labelName, ), ;, Node, root, =, block, ;, boolean, hasReturnAtExit, =, false, ;, int, returnCount]
[., checkNotNull, (, block, ), ;, Preconditions, ., checkNotNull, (, labelName, ), ;, Node, root, =, block, ;, boolean, hasReturnAtExit]
[), ;, Preconditions, ., checkNotNull, (, labelName, ), ;, Node, root, =, block, ;, boolean, hasReturnAtExit, =, false, ;, int]
[;, Node, root, =, block, ;, boolean, hasReturnAtExit, =, false, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block, ,]
[., checkNotNull, (, labelName, ), ;, Node, root, =, block, ;, boolean, hasReturnAtExit, =, false, ;, int, returnCount, =, NodeUtil]
[), ;, Node, root, =, block, ;, boolean, hasReturnAtExit, =, false, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block]
[;, boolean, hasReturnAtExit, =, false, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new]
[;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, )]
[;, if, (, returnCount, >, 0, ), {, hasReturnAtExit, =, hasReturnAtExit, (, block, ), ;, if, (, hasReturnAtExit, ), {]
[., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, if, (, returnCount]
[,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, if, (, returnCount, >, 0, ), {]
[,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, if, (, returnCount, >, 0, ), {, hasReturnAtExit, =, hasReturnAtExit, (]
[., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, if, (, returnCount, >, 0, ), {, hasReturnAtExit, =]
[), ;, if, (, returnCount, >, 0, ), {, hasReturnAtExit, =, hasReturnAtExit, (, block, ), ;, if, (, hasReturnAtExit, )]
[), {, hasReturnAtExit, =, hasReturnAtExit, (, block, ), ;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,, resultName, )]
[>, 0, ), {, hasReturnAtExit, =, hasReturnAtExit, (, block, ), ;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,]
[), {, hasReturnAtExit, =, hasReturnAtExit, (, block, ), ;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,, resultName, )]
[=, hasReturnAtExit, (, block, ), ;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,, resultName, ), ;, returnCount, --]
[;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,, resultName, ), ;, returnCount, --, ;, }, if, (, returnCount]
[), ;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,, resultName, ), ;, returnCount, --, ;, }, if, (]
[), {, convertLastReturnToStatement, (, block, ,, resultName, ), ;, returnCount, --, ;, }, if, (, returnCount, >, 0, ), {]
[;, returnCount, --, ;, }, if, (, returnCount, >, 0, ), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,]
[,, resultName, ), ;, returnCount, --, ;, }, if, (, returnCount, >, 0, ), {, replaceReturnWithBreak, (, block, ,, null]
[), ;, returnCount, --, ;, }, if, (, returnCount, >, 0, ), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName]
[;, }, if, (, returnCount, >, 0, ), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,, labelName, ), ;]
[--, ;, }, if, (, returnCount, >, 0, ), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,, labelName, )]
[), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,, labelName, ), ;, Node, name, =, IR, ., labelName, (]
[>, 0, ), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,, labelName, ), ;, Node, name, =, IR, .]
[), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,, labelName, ), ;, Node, name, =, IR, ., labelName, (]
[;, Node, name, =, IR, ., labelName, (, labelName, ), ., srcref, (, block, ), ;, Node, label, =, IR]
[,, null, ,, resultName, ,, labelName, ), ;, Node, name, =, IR, ., labelName, (, labelName, ), ., srcref, (]
[,, resultName, ,, labelName, ), ;, Node, name, =, IR, ., labelName, (, labelName, ), ., srcref, (, block, )]
[,, labelName, ), ;, Node, name, =, IR, ., labelName, (, labelName, ), ., srcref, (, block, ), ;, Node]
[), ;, Node, name, =, IR, ., labelName, (, labelName, ), ., srcref, (, block, ), ;, Node, label, =]
[;, Node, label, =, IR, ., label, (, name, ,, block, ), ., srcref, (, block, ), ;, Node, newRoot]
[., srcref, (, block, ), ;, Node, label, =, IR, ., label, (, name, ,, block, ), ., srcref, (]
[., labelName, (, labelName, ), ., srcref, (, block, ), ;, Node, label, =, IR, ., label, (, name, ,]
[), ., srcref, (, block, ), ;, Node, label, =, IR, ., label, (, name, ,, block, ), ., srcref]
[), ;, Node, label, =, IR, ., label, (, name, ,, block, ), ., srcref, (, block, ), ;, Node]
[;, Node, newRoot, =, IR, ., block, (, ), ., srcref, (, block, ), ;, newRoot, ., addChildrenToBack, (, label]
[., srcref, (, block, ), ;, Node, newRoot, =, IR, ., block, (, ), ., srcref, (, block, ), ;]
[., label, (, name, ,, block, ), ., srcref, (, block, ), ;, Node, newRoot, =, IR, ., block, (]
[,, block, ), ., srcref, (, block, ), ;, Node, newRoot, =, IR, ., block, (, ), ., srcref, (]
[), ., srcref, (, block, ), ;, Node, newRoot, =, IR, ., block, (, ), ., srcref, (, block, )]
[), ;, Node, newRoot, =, IR, ., block, (, ), ., srcref, (, block, ), ;, newRoot, ., addChildrenToBack, (]
[;, newRoot, ., addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit]
[., srcref, (, block, ), ;, newRoot, ., addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if]
[., block, (, ), ., srcref, (, block, ), ;, newRoot, ., addChildrenToBack, (, label, ), ;, root, =, newRoot]
[), ;, newRoot, ., addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !]
[;, root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit, &&, resultName, !=, null, ), {, addDummyAssignment]
[., addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit, &&, resultName]
[), ;, root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit, &&, resultName, !=, null, ), {]
[=, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit, &&, resultName, !=, null, ), {, addDummyAssignment, (, block]
[;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit, &&, resultName, !=, null, ), {, addDummyAssignment, (, block, ,, resultName]
[), {, addDummyAssignment, (, block, ,, resultName, ), ;, }, return, root, ;, }, private, static, void, addDummyAssignment, (, Node]
[&&, resultName, !=, null, ), {, addDummyAssignment, (, block, ,, resultName, ), ;, }, return, root, ;, }, private, static]
[&&, !, hasReturnAtExit, &&, resultName, !=, null, ), {, addDummyAssignment, (, block, ,, resultName, ), ;, }, return, root, ;]
[&&, resultName, !=, null, ), {, addDummyAssignment, (, block, ,, resultName, ), ;, }, return, root, ;, }, private, static]
[&&, resultName, !=, null, ), {, addDummyAssignment, (, block, ,, resultName, ), ;, }, return, root, ;, }, private, static]
[), {, addDummyAssignment, (, block, ,, resultName, ), ;, }, return, root, ;, }, private, static, void, addDummyAssignment, (, Node]
[!=, null, ), {, addDummyAssignment, (, block, ,, resultName, ), ;, }, return, root, ;, }, private, static, void, addDummyAssignment]
[), {, addDummyAssignment, (, block, ,, resultName, ), ;, }, return, root, ;, }, private, static, void, addDummyAssignment, (, Node]
[;, }, return, root, ;, }, private, static, void, addDummyAssignment, (, Node, node, ,, String, resultName, ), {, Preconditions, .]
[,, resultName, ), ;, }, return, root, ;, }, private, static, void, addDummyAssignment, (, Node, node, ,, String, resultName, )]
[), ;, }, return, root, ;, }, private, static, void, addDummyAssignment, (, Node, node, ,, String, resultName, ), {, Preconditions]
[;, }, private, static, void, addDummyAssignment, (, Node, node, ,, String, resultName, ), {, Preconditions, ., checkArgument, (, node, .]
[;, Node, srcLocation, =, node, ;, Node, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, Node, resultNode, =, createAssignStatementNode]
[., checkArgument, (, node, ., isBlock, (, ), ), ;, Node, srcLocation, =, node, ;, Node, retVal, =, NodeUtil, .]
[), ;, Node, srcLocation, =, node, ;, Node, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, Node, resultNode, =]
[., isBlock, (, ), ), ;, Node, srcLocation, =, node, ;, Node, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, )]
[;, Node, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, Node, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, )]
[;, Node, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, resultNode, ., copyInformationFromForTree, (, node, ), ;, node, .]
[., newUndefinedNode, (, srcLocation, ), ;, Node, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, resultNode, ., copyInformationFromForTree, (]
[), ;, Node, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, resultNode, ., copyInformationFromForTree, (, node, ), ;, node]
[;, resultNode, ., copyInformationFromForTree, (, node, ), ;, node, ., addChildrenToBack, (, resultNode, ), ;, }, private, static, void, convertLastReturnToStatement]
[,, retVal, ), ;, resultNode, ., copyInformationFromForTree, (, node, ), ;, node, ., addChildrenToBack, (, resultNode, ), ;, }, private]
[), ;, resultNode, ., copyInformationFromForTree, (, node, ), ;, node, ., addChildrenToBack, (, resultNode, ), ;, }, private, static, void]
[;, node, ., addChildrenToBack, (, resultNode, ), ;, }, private, static, void, convertLastReturnToStatement, (, Node, block, ,, String, resultName, )]
[., copyInformationFromForTree, (, node, ), ;, node, ., addChildrenToBack, (, resultNode, ), ;, }, private, static, void, convertLastReturnToStatement, (, Node]
[), ;, node, ., addChildrenToBack, (, resultNode, ), ;, }, private, static, void, convertLastReturnToStatement, (, Node, block, ,, String, resultName]
[;, }, private, static, void, convertLastReturnToStatement, (, Node, block, ,, String, resultName, ), {, Node, ret, =, block, ., getLastChild]
[., addChildrenToBack, (, resultNode, ), ;, }, private, static, void, convertLastReturnToStatement, (, Node, block, ,, String, resultName, ), {, Node]
[), ;, }, private, static, void, convertLastReturnToStatement, (, Node, block, ,, String, resultName, ), {, Node, ret, =, block, .]
[;, Preconditions, ., checkArgument, (, ret, ., isReturn, (, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, ret, ,, resultName]
[., getLastChild, (, ), ;, Preconditions, ., checkArgument, (, ret, ., isReturn, (, ), ), ;, Node, resultNode, =, getReplacementReturnStatement]
[;, Node, resultNode, =, getReplacementReturnStatement, (, ret, ,, resultName, ), ;, if, (, resultNode, ==, null, ), {, block, .]
[., checkArgument, (, ret, ., isReturn, (, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, ret, ,, resultName, ), ;]
[), ;, Node, resultNode, =, getReplacementReturnStatement, (, ret, ,, resultName, ), ;, if, (, resultNode, ==, null, ), {, block]
[., isReturn, (, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, ret, ,, resultName, ), ;, if, (, resultNode, ==]
[;, if, (, resultNode, ==, null, ), {, block, ., removeChild, (, ret, ), ;, }, else, {, resultNode, .]
[,, resultName, ), ;, if, (, resultNode, ==, null, ), {, block, ., removeChild, (, ret, ), ;, }, else]
[), ;, if, (, resultNode, ==, null, ), {, block, ., removeChild, (, ret, ), ;, }, else, {, resultNode]
[), {, block, ., removeChild, (, ret, ), ;, }, else, {, resultNode, ., copyInformationFromForTree, (, ret, ), ;, block]
[==, null, ), {, block, ., removeChild, (, ret, ), ;, }, else, {, resultNode, ., copyInformationFromForTree, (, ret, )]
[), {, block, ., removeChild, (, ret, ), ;, }, else, {, resultNode, ., copyInformationFromForTree, (, ret, ), ;, block]
[;, }, else, {, resultNode, ., copyInformationFromForTree, (, ret, ), ;, block, ., replaceChild, (, ret, ,, resultNode, ), ;]
[., removeChild, (, ret, ), ;, }, else, {, resultNode, ., copyInformationFromForTree, (, ret, ), ;, block, ., replaceChild, (]
[), ;, }, else, {, resultNode, ., copyInformationFromForTree, (, ret, ), ;, block, ., replaceChild, (, ret, ,, resultNode, )]
[;, block, ., replaceChild, (, ret, ,, resultNode, ), ;, }, }, private, static, Node, createAssignStatementNode, (, String, name, ,]
[., copyInformationFromForTree, (, ret, ), ;, block, ., replaceChild, (, ret, ,, resultNode, ), ;, }, }, private, static, Node]
[), ;, block, ., replaceChild, (, ret, ,, resultNode, ), ;, }, }, private, static, Node, createAssignStatementNode, (, String, name]
[;, }, }, private, static, Node, createAssignStatementNode, (, String, name, ,, Node, expression, ), {, Node, nameNode, =, IR, .]
[., replaceChild, (, ret, ,, resultNode, ), ;, }, }, private, static, Node, createAssignStatementNode, (, String, name, ,, Node, expression]
[,, resultNode, ), ;, }, }, private, static, Node, createAssignStatementNode, (, String, name, ,, Node, expression, ), {, Node, nameNode]
[), ;, }, }, private, static, Node, createAssignStatementNode, (, String, name, ,, Node, expression, ), {, Node, nameNode, =, IR]
[;, Node, assign, =, IR, ., assign, (, nameNode, ,, expression, ), ;, return, NodeUtil, ., newExpr, (, assign, )]
[., name, (, name, ), ;, Node, assign, =, IR, ., assign, (, nameNode, ,, expression, ), ;, return, NodeUtil]
[), ;, Node, assign, =, IR, ., assign, (, nameNode, ,, expression, ), ;, return, NodeUtil, ., newExpr, (, assign]
[;, return, NodeUtil, ., newExpr, (, assign, ), ;, }, private, static, Node, getReplacementReturnStatement, (, Node, node, ,, String, resultName]
[., assign, (, nameNode, ,, expression, ), ;, return, NodeUtil, ., newExpr, (, assign, ), ;, }, private, static, Node]
[,, expression, ), ;, return, NodeUtil, ., newExpr, (, assign, ), ;, }, private, static, Node, getReplacementReturnStatement, (, Node, node]
[), ;, return, NodeUtil, ., newExpr, (, assign, ), ;, }, private, static, Node, getReplacementReturnStatement, (, Node, node, ,, String]
[;, }, private, static, Node, getReplacementReturnStatement, (, Node, node, ,, String, resultName, ), {, Node, resultNode, =, null, ;, Node]
[., newExpr, (, assign, ), ;, }, private, static, Node, getReplacementReturnStatement, (, Node, node, ,, String, resultName, ), {, Node]
[), ;, }, private, static, Node, getReplacementReturnStatement, (, Node, node, ,, String, resultName, ), {, Node, resultNode, =, null, ;]
[;, Node, retVal, =, null, ;, if, (, node, ., hasChildren, (, ), ), {, retVal, =, node, ., getFirstChild]
[;, if, (, node, ., hasChildren, (, ), ), {, retVal, =, node, ., getFirstChild, (, ), ., cloneTree, (]
[), {, retVal, =, node, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, if, (, resultName, ==, null]
[., hasChildren, (, ), ), {, retVal, =, node, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, if]
[=, node, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, if, (, resultName, ==, null, ), {, if]
[;, }, if, (, resultName, ==, null, ), {, if, (, retVal, !=, null, ), {, resultNode, =, NodeUtil, .]
[., cloneTree, (, ), ;, }, if, (, resultName, ==, null, ), {, if, (, retVal, !=, null, ), {]
[., getFirstChild, (, ), ., cloneTree, (, ), ;, }, if, (, resultName, ==, null, ), {, if, (, retVal]
[), {, if, (, retVal, !=, null, ), {, resultNode, =, NodeUtil, ., newExpr, (, retVal, ), ;, }, }]
[==, null, ), {, if, (, retVal, !=, null, ), {, resultNode, =, NodeUtil, ., newExpr, (, retVal, ), ;]
[), {, if, (, retVal, !=, null, ), {, resultNode, =, NodeUtil, ., newExpr, (, retVal, ), ;, }, }]
[), {, resultNode, =, NodeUtil, ., newExpr, (, retVal, ), ;, }, }, else, {, if, (, retVal, ==, null]
[!=, null, ), {, resultNode, =, NodeUtil, ., newExpr, (, retVal, ), ;, }, }, else, {, if, (, retVal]
[), {, resultNode, =, NodeUtil, ., newExpr, (, retVal, ), ;, }, }, else, {, if, (, retVal, ==, null]
[=, NodeUtil, ., newExpr, (, retVal, ), ;, }, }, else, {, if, (, retVal, ==, null, ), {, Node]
[;, }, }, else, {, if, (, retVal, ==, null, ), {, Node, srcLocation, =, node, ;, retVal, =, NodeUtil]
[., newExpr, (, retVal, ), ;, }, }, else, {, if, (, retVal, ==, null, ), {, Node, srcLocation, =]
[), ;, }, }, else, {, if, (, retVal, ==, null, ), {, Node, srcLocation, =, node, ;, retVal, =]
[), {, Node, srcLocation, =, node, ;, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, resultNode, =, createAssignStatementNode]
[==, null, ), {, Node, srcLocation, =, node, ;, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, resultNode]
[), {, Node, srcLocation, =, node, ;, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, resultNode, =, createAssignStatementNode]
[;, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;]
[=, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, }, return]
[;, }, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, }, return, resultNode, ;, }, private, static, boolean, hasReturnAtExit]
[., newUndefinedNode, (, srcLocation, ), ;, }, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, }, return, resultNode, ;]
[), ;, }, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, }, return, resultNode, ;, }, private, static, boolean]
[=, createAssignStatementNode, (, resultName, ,, retVal, ), ;, }, return, resultNode, ;, }, private, static, boolean, hasReturnAtExit, (, Node, block]
[;, }, return, resultNode, ;, }, private, static, boolean, hasReturnAtExit, (, Node, block, ), {, return, (, block, ., getLastChild]
[,, retVal, ), ;, }, return, resultNode, ;, }, private, static, boolean, hasReturnAtExit, (, Node, block, ), {, return, (]
[), ;, }, return, resultNode, ;, }, private, static, boolean, hasReturnAtExit, (, Node, block, ), {, return, (, block, .]
[;, }, private, static, boolean, hasReturnAtExit, (, Node, block, ), {, return, (, block, ., getLastChild, (, ), ., isReturn]
[;, }, private, static, Node, replaceReturnWithBreak, (, Node, current, ,, Node, parent, ,, String, resultName, ,, String, labelName, ), {]
[), ;, }, private, static, Node, replaceReturnWithBreak, (, Node, current, ,, Node, parent, ,, String, resultName, ,, String, labelName, )]
[., isReturn, (, ), ), ;, }, private, static, Node, replaceReturnWithBreak, (, Node, current, ,, Node, parent, ,, String, resultName]
[., getLastChild, (, ), ., isReturn, (, ), ), ;, }, private, static, Node, replaceReturnWithBreak, (, Node, current, ,, Node]
[), {, return, current, ;, }, if, (, current, ., isReturn, (, ), ), {, Preconditions, ., checkState, (, NodeUtil]
[||, current, ., isExprResult, (, ), ), {, return, current, ;, }, if, (, current, ., isReturn, (, ), )]
[., isFunction, (, ), ||, current, ., isExprResult, (, ), ), {, return, current, ;, }, if, (, current, .]
[), {, return, current, ;, }, if, (, current, ., isReturn, (, ), ), {, Preconditions, ., checkState, (, NodeUtil]
[., isExprResult, (, ), ), {, return, current, ;, }, if, (, current, ., isReturn, (, ), ), {, Preconditions]
[;, }, if, (, current, ., isReturn, (, ), ), {, Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent]
[), {, Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, current]
[., isReturn, (, ), ), {, Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Node, resultNode]
[;, Node, resultNode, =, getReplacementReturnStatement, (, current, ,, resultName, ), ;, Node, breakNode, =, IR, ., breakNode, (, IR, .]
[., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, current, ,, resultName, )]
[), ;, Node, resultNode, =, getReplacementReturnStatement, (, current, ,, resultName, ), ;, Node, breakNode, =, IR, ., breakNode, (, IR]
[., isStatementBlock, (, parent, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, current, ,, resultName, ), ;, Node, breakNode, =]
[), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, current, ,, resultName, ), ;, Node, breakNode, =, IR, ., breakNode, (]
[;, Node, breakNode, =, IR, ., breakNode, (, IR, ., labelName, (, labelName, ), ), ;, breakNode, ., copyInformationFromForTree, (]
[,, resultName, ), ;, Node, breakNode, =, IR, ., breakNode, (, IR, ., labelName, (, labelName, ), ), ;, breakNode]
[), ;, Node, breakNode, =, IR, ., breakNode, (, IR, ., labelName, (, labelName, ), ), ;, breakNode, ., copyInformationFromForTree]
[;, breakNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., replaceChild, (, current, ,, breakNode, ), ;, if, (, resultNode]
[., breakNode, (, IR, ., labelName, (, labelName, ), ), ;, breakNode, ., copyInformationFromForTree, (, current, ), ;, parent, .]
[), ;, breakNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., replaceChild, (, current, ,, breakNode, ), ;, if, (]
[., labelName, (, labelName, ), ), ;, breakNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., replaceChild, (, current, ,]
[), ), ;, breakNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., replaceChild, (, current, ,, breakNode, ), ;, if]
[;, parent, ., replaceChild, (, current, ,, breakNode, ), ;, if, (, resultNode, !=, null, ), {, resultNode, ., copyInformationFromForTree]
[., copyInformationFromForTree, (, current, ), ;, parent, ., replaceChild, (, current, ,, breakNode, ), ;, if, (, resultNode, !=, null]
[), ;, parent, ., replaceChild, (, current, ,, breakNode, ), ;, if, (, resultNode, !=, null, ), {, resultNode, .]
[;, if, (, resultNode, !=, null, ), {, resultNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., addChildBefore, (, resultNode]
[., replaceChild, (, current, ,, breakNode, ), ;, if, (, resultNode, !=, null, ), {, resultNode, ., copyInformationFromForTree, (, current]
[,, breakNode, ), ;, if, (, resultNode, !=, null, ), {, resultNode, ., copyInformationFromForTree, (, current, ), ;, parent, .]
[), ;, if, (, resultNode, !=, null, ), {, resultNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., addChildBefore, (]
[), {, resultNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., addChildBefore, (, resultNode, ,, breakNode, ), ;, }, current]
[!=, null, ), {, resultNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., addChildBefore, (, resultNode, ,, breakNode, ), ;]
[), {, resultNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., addChildBefore, (, resultNode, ,, breakNode, ), ;, }, current]
[;, parent, ., addChildBefore, (, resultNode, ,, breakNode, ), ;, }, current, =, breakNode, ;, }, else, {, for, (]
[., copyInformationFromForTree, (, current, ), ;, parent, ., addChildBefore, (, resultNode, ,, breakNode, ), ;, }, current, =, breakNode, ;]
[), ;, parent, ., addChildBefore, (, resultNode, ,, breakNode, ), ;, }, current, =, breakNode, ;, }, else, {, for]
[;, }, current, =, breakNode, ;, }, else, {, for, (, Node, c, =, current, ., getFirstChild, (, ), ;]
[., addChildBefore, (, resultNode, ,, breakNode, ), ;, }, current, =, breakNode, ;, }, else, {, for, (, Node, c]
[,, breakNode, ), ;, }, current, =, breakNode, ;, }, else, {, for, (, Node, c, =, current, ., getFirstChild]
[), ;, }, current, =, breakNode, ;, }, else, {, for, (, Node, c, =, current, ., getFirstChild, (, )]
[=, breakNode, ;, }, else, {, for, (, Node, c, =, current, ., getFirstChild, (, ), ;, c, !=, null]
[;, }, else, {, for, (, Node, c, =, current, ., getFirstChild, (, ), ;, c, !=, null, ;, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, c, =, replaceReturnWithBreak, (, c, ,]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, c, =]
[;, c, =, c, ., getNext, (, ), ), {, c, =, replaceReturnWithBreak, (, c, ,, current, ,, resultName, ,]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, c, =, replaceReturnWithBreak, (, c, ,, current, ,]
[;, c, =, c, ., getNext, (, ), ), {, c, =, replaceReturnWithBreak, (, c, ,, current, ,, resultName, ,]
[=, c, ., getNext, (, ), ), {, c, =, replaceReturnWithBreak, (, c, ,, current, ,, resultName, ,, labelName, )]
[), {, c, =, replaceReturnWithBreak, (, c, ,, current, ,, resultName, ,, labelName, ), ;, }, }, return, current, ;]
[., getNext, (, ), ), {, c, =, replaceReturnWithBreak, (, c, ,, current, ,, resultName, ,, labelName, ), ;, }]
[=, replaceReturnWithBreak, (, c, ,, current, ,, resultName, ,, labelName, ), ;, }, }, return, current, ;, }, }]
[;, }, }, return, current, ;, }, }]
[,, current, ,, resultName, ,, labelName, ), ;, }, }, return, current, ;, }, }]
[,, resultName, ,, labelName, ), ;, }, }, return, current, ;, }, }]
[,, labelName, ), ;, }, }, return, current, ;, }, }]
[), ;, }, }, return, current, ;, }, }]
[;, }, }]
