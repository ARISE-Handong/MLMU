[,, checkDuplicatedMessages, ,, style, ,, idGenerator, ), ;, }, private, static, Node, getChromeI18nGetMessageNode, (, String, messageId, ), {, Node, chromeI18n]
[,, style, ,, idGenerator, ), ;, }, private, static, Node, getChromeI18nGetMessageNode, (, String, messageId, ), {, Node, chromeI18n, =, IR]
[,, idGenerator, ), ;, }, private, static, Node, getChromeI18nGetMessageNode, (, String, messageId, ), {, Node, chromeI18n, =, IR, ., getprop]
[), ;, }, private, static, Node, getChromeI18nGetMessageNode, (, String, messageId, ), {, Node, chromeI18n, =, IR, ., getprop, (, IR]
[;, Node, getMessage, =, IR, ., getprop, (, chromeI18n, ,, IR, ., string, (, "getMessage", ), ), ;, return, IR]
[., getprop, (, IR, ., name, (, "chrome", ), ,, IR, ., string, (, "i18n", ), ), ;, Node, getMessage]
[,, IR, ., string, (, "i18n", ), ), ;, Node, getMessage, =, IR, ., getprop, (, chromeI18n, ,, IR, .]
[., name, (, "chrome", ), ,, IR, ., string, (, "i18n", ), ), ;, Node, getMessage, =, IR, ., getprop]
[), ,, IR, ., string, (, "i18n", ), ), ;, Node, getMessage, =, IR, ., getprop, (, chromeI18n, ,, IR]
[), ;, Node, getMessage, =, IR, ., getprop, (, chromeI18n, ,, IR, ., string, (, "getMessage", ), ), ;, return]
[., string, (, "i18n", ), ), ;, Node, getMessage, =, IR, ., getprop, (, chromeI18n, ,, IR, ., string, (]
[), ), ;, Node, getMessage, =, IR, ., getprop, (, chromeI18n, ,, IR, ., string, (, "getMessage", ), ), ;]
[;, return, IR, ., call, (, getMessage, ,, IR, ., string, (, messageId, ), ), ;, }, @, Override, protected]
[., getprop, (, chromeI18n, ,, IR, ., string, (, "getMessage", ), ), ;, return, IR, ., call, (, getMessage, ,]
[,, IR, ., string, (, "getMessage", ), ), ;, return, IR, ., call, (, getMessage, ,, IR, ., string, (]
[), ;, return, IR, ., call, (, getMessage, ,, IR, ., string, (, messageId, ), ), ;, }, @, Override]
[., string, (, "getMessage", ), ), ;, return, IR, ., call, (, getMessage, ,, IR, ., string, (, messageId, )]
[), ), ;, return, IR, ., call, (, getMessage, ,, IR, ., string, (, messageId, ), ), ;, }, @]
[;, }, @, Override, protected, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, try, {, Node, msgNode, =]
[., call, (, getMessage, ,, IR, ., string, (, messageId, ), ), ;, }, @, Override, protected, void, processJsMessage, (]
[,, IR, ., string, (, messageId, ), ), ;, }, @, Override, protected, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition]
[), ;, }, @, Override, protected, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, try, {, Node, msgNode]
[., string, (, messageId, ), ), ;, }, @, Override, protected, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, )]
[), ), ;, }, @, Override, protected, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, try, {, Node]
[;, Node, newValue, =, getNewValueNode, (, msgNode, ,, message, ), ;, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, .]
[., getMessageNode, (, ), ;, Node, newValue, =, getNewValueNode, (, msgNode, ,, message, ), ;, newValue, ., copyInformationFromForTree, (, msgNode]
[;, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, )]
[,, message, ), ;, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode]
[), ;, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue]
[;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;, compiler]
[), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;, compiler, ., reportCodeChange, (, )]
[;, compiler, ., reportCodeChange, (, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, .]
[., replaceChild, (, msgNode, ,, newValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, catch, (, MalformedException, e, )]
[., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, catch]
[,, newValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError]
[;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (]
[., reportCodeChange, (, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[;, }, }, private, Node, getNewValueNode, (, Node, origNode, ,, JsMessage, message, ), throws, MalformedException, {, Node, newValueNode, =, getChromeI18nGetMessageNode]
[., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED]
[), ;, }, }, private, Node, getNewValueNode, (, Node, origNode, ,, JsMessage, message, ), throws, MalformedException, {, Node, newValueNode, =]
[., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage]
[,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), ), ;, }, }, private]
[., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), )]
[,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), ), ;, }, }, private, Node, getNewValueNode, (, Node, origNode, ,]
[., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), ), ;, }, }, private, Node, getNewValueNode]
[,, e, ., getMessage, (, ), ), ), ;, }, }, private, Node, getNewValueNode, (, Node, origNode, ,, JsMessage, message]
[), ), ;, }, }, private, Node, getNewValueNode, (, Node, origNode, ,, JsMessage, message, ), throws, MalformedException, {, Node, newValueNode]
[., getMessage, (, ), ), ), ;, }, }, private, Node, getNewValueNode, (, Node, origNode, ,, JsMessage, message, ), throws]
[;, if, (, !, message, ., placeholders, (, ), ., isEmpty, (, ), ), {, Node, placeholderValues, =, origNode, .]
[), ;, if, (, !, message, ., placeholders, (, ), ., isEmpty, (, ), ), {, Node, placeholderValues, =, origNode]
[., getId, (, ), ), ;, if, (, !, message, ., placeholders, (, ), ., isEmpty, (, ), ), {]
[), {, Node, placeholderValues, =, origNode, ., getLastChild, (, ), ;, checkNode, (, placeholderValues, ,, Token, ., OBJECTLIT, ), ;]
[), {, Node, placeholderValues, =, origNode, ., getLastChild, (, ), ;, checkNode, (, placeholderValues, ,, Token, ., OBJECTLIT, ), ;]
[., isEmpty, (, ), ), {, Node, placeholderValues, =, origNode, ., getLastChild, (, ), ;, checkNode, (, placeholderValues, ,, Token]
[., placeholders, (, ), ., isEmpty, (, ), ), {, Node, placeholderValues, =, origNode, ., getLastChild, (, ), ;, checkNode]
[;, checkNode, (, placeholderValues, ,, Token, ., OBJECTLIT, ), ;, List, <, String, >, placeholderNames, =, Lists, ., newArrayList, (]
[., getLastChild, (, ), ;, checkNode, (, placeholderValues, ,, Token, ., OBJECTLIT, ), ;, List, <, String, >, placeholderNames, =]
[;, List, <, String, >, placeholderNames, =, Lists, ., newArrayList, (, ), ;, for, (, CharSequence, cs, :, message, .]
[,, Token, ., OBJECTLIT, ), ;, List, <, String, >, placeholderNames, =, Lists, ., newArrayList, (, ), ;, for, (]
[), ;, List, <, String, >, placeholderNames, =, Lists, ., newArrayList, (, ), ;, for, (, CharSequence, cs, :, message]
[., OBJECTLIT, ), ;, List, <, String, >, placeholderNames, =, Lists, ., newArrayList, (, ), ;, for, (, CharSequence, cs]
[;, for, (, CharSequence, cs, :, message, ., parts, (, ), ), {, if, (, cs, instanceof, PlaceholderReference, ), {]
[., newArrayList, (, ), ;, for, (, CharSequence, cs, :, message, ., parts, (, ), ), {, if, (, cs]
[), {, if, (, cs, instanceof, PlaceholderReference, ), {, String, placeholderName, =, (, (, PlaceholderReference, ), cs, ), ., getName]
[., parts, (, ), ), {, if, (, cs, instanceof, PlaceholderReference, ), {, String, placeholderName, =, (, (, PlaceholderReference, )]
[), {, String, placeholderName, =, (, (, PlaceholderReference, ), cs, ), ., getName, (, ), ;, placeholderNames, ., add, (]
[instanceof, PlaceholderReference, ), {, String, placeholderName, =, (, (, PlaceholderReference, ), cs, ), ., getName, (, ), ;, placeholderNames, .]
[;, placeholderNames, ., add, (, placeholderName, ), ;, }, }, Collections, ., sort, (, placeholderNames, ), ;, Node, placeholderValueArray, =]
[., getName, (, ), ;, placeholderNames, ., add, (, placeholderName, ), ;, }, }, Collections, ., sort, (, placeholderNames, )]
[), ., getName, (, ), ;, placeholderNames, ., add, (, placeholderName, ), ;, }, }, Collections, ., sort, (, placeholderNames]
[), ., getName, (, ), ;, placeholderNames, ., add, (, placeholderName, ), ;, }, }, Collections, ., sort, (, placeholderNames]
[;, }, }, Collections, ., sort, (, placeholderNames, ), ;, Node, placeholderValueArray, =, IR, ., arraylit, (, ), ;, for]
[., add, (, placeholderName, ), ;, }, }, Collections, ., sort, (, placeholderNames, ), ;, Node, placeholderValueArray, =, IR, .]
[), ;, }, }, Collections, ., sort, (, placeholderNames, ), ;, Node, placeholderValueArray, =, IR, ., arraylit, (, ), ;]
[;, Node, placeholderValueArray, =, IR, ., arraylit, (, ), ;, for, (, String, name, :, placeholderNames, ), {, Node, value]
[., sort, (, placeholderNames, ), ;, Node, placeholderValueArray, =, IR, ., arraylit, (, ), ;, for, (, String, name, :]
[), ;, Node, placeholderValueArray, =, IR, ., arraylit, (, ), ;, for, (, String, name, :, placeholderNames, ), {, Node]
[;, for, (, String, name, :, placeholderNames, ), {, Node, value, =, getPlaceholderValue, (, placeholderValues, ,, name, ), ;, if]
[., arraylit, (, ), ;, for, (, String, name, :, placeholderNames, ), {, Node, value, =, getPlaceholderValue, (, placeholderValues, ,]
[), {, Node, value, =, getPlaceholderValue, (, placeholderValues, ,, name, ), ;, if, (, value, ==, null, ), {, throw]
[;, if, (, value, ==, null, ), {, throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,, origNode, ), ;, }]
[,, name, ), ;, if, (, value, ==, null, ), {, throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,, origNode]
[), ;, if, (, value, ==, null, ), {, throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,, origNode, ), ;]
[), {, throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,, origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (, value, )]
[==, null, ), {, throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,, origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (]
[), {, throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,, origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (, value, )]
[;, }, placeholderValueArray, ., addChildToBack, (, value, ), ;, }, newValueNode, ., addChildToBack, (, placeholderValueArray, ), ;, }, newValueNode, .]
[,, origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (, value, ), ;, }, newValueNode, ., addChildToBack, (, placeholderValueArray, ), ;]
[+, name, ,, origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (, value, ), ;, }, newValueNode, ., addChildToBack, (, placeholderValueArray]
[,, origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (, value, ), ;, }, newValueNode, ., addChildToBack, (, placeholderValueArray, ), ;]
[), ;, }, placeholderValueArray, ., addChildToBack, (, value, ), ;, }, newValueNode, ., addChildToBack, (, placeholderValueArray, ), ;, }, newValueNode]
[;, }, newValueNode, ., addChildToBack, (, placeholderValueArray, ), ;, }, newValueNode, ., copyInformationFromForTree, (, origNode, ), ;, return, newValueNode, ;]
[., addChildToBack, (, value, ), ;, }, newValueNode, ., addChildToBack, (, placeholderValueArray, ), ;, }, newValueNode, ., copyInformationFromForTree, (, origNode]
[), ;, }, newValueNode, ., addChildToBack, (, placeholderValueArray, ), ;, }, newValueNode, ., copyInformationFromForTree, (, origNode, ), ;, return, newValueNode]
[;, }, newValueNode, ., copyInformationFromForTree, (, origNode, ), ;, return, newValueNode, ;, }, private, Node, getPlaceholderValue, (, Node, placeholderValues, ,]
[., addChildToBack, (, placeholderValueArray, ), ;, }, newValueNode, ., copyInformationFromForTree, (, origNode, ), ;, return, newValueNode, ;, }, private, Node]
[), ;, }, newValueNode, ., copyInformationFromForTree, (, origNode, ), ;, return, newValueNode, ;, }, private, Node, getPlaceholderValue, (, Node, placeholderValues]
[;, return, newValueNode, ;, }, private, Node, getPlaceholderValue, (, Node, placeholderValues, ,, String, placeholderName, ), {, for, (, Node, key]
[., copyInformationFromForTree, (, origNode, ), ;, return, newValueNode, ;, }, private, Node, getPlaceholderValue, (, Node, placeholderValues, ,, String, placeholderName, )]
[), ;, return, newValueNode, ;, }, private, Node, getPlaceholderValue, (, Node, placeholderValues, ,, String, placeholderName, ), {, for, (, Node]
[;, }, private, Node, getPlaceholderValue, (, Node, placeholderValues, ,, String, placeholderName, ), {, for, (, Node, key, :, placeholderValues, .]
[), {, if, (, key, ., getString, (, ), ., equals, (, placeholderName, ), ), {, return, key, ., getFirstChild]
[., children, (, ), ), {, if, (, key, ., getString, (, ), ., equals, (, placeholderName, ), ), {]
[), {, return, key, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, }, return, null, ;, }, }]
[., equals, (, placeholderName, ), ), {, return, key, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, }]
[., getString, (, ), ., equals, (, placeholderName, ), ), {, return, key, ., getFirstChild, (, ), ., cloneTree, (]
[), ), {, return, key, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, }, return, null, ;, }]
[;, }, }, return, null, ;, }, }]
[., cloneTree, (, ), ;, }, }, return, null, ;, }, }]
[., getFirstChild, (, ), ., cloneTree, (, ), ;, }, }, return, null, ;, }, }]
[;, }, }]
