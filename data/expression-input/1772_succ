[;, private, double, initialTime, ;, private, double, finalTime, ;, private, boolean, forward, ;, private, int, index, ;, private, List, <]
[;, private, double, initialTime, ;, private, double, finalTime, ;, private, boolean, forward, ;, private, int, index, ;, private, List, <]
[=, new, ArrayList, <, StepInterpolator, >, (, ), ;, initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN]
[;, initialTime, =, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;, index, =, 0]
[=, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;, index, =, 0, ;, }]
[;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;, index, =, 0, ;, }, public, void, append, (]
[., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;, index, =, 0, ;, }, public, void]
[=, Double, ., NaN, ;, forward, =, true, ;, index, =, 0, ;, }, public, void, append, (, final, ContinuousOutputModel]
[;, forward, =, true, ;, index, =, 0, ;, }, public, void, append, (, final, ContinuousOutputModel, model, ), throws, MathIllegalArgumentException]
[., NaN, ;, forward, =, true, ;, index, =, 0, ;, }, public, void, append, (, final, ContinuousOutputModel, model, )]
[=, true, ;, index, =, 0, ;, }, public, void, append, (, final, ContinuousOutputModel, model, ), throws, MathIllegalArgumentException, ,, MaxCountExceededException]
[;, index, =, 0, ;, }, public, void, append, (, final, ContinuousOutputModel, model, ), throws, MathIllegalArgumentException, ,, MaxCountExceededException, {, if]
[=, 0, ;, }, public, void, append, (, final, ContinuousOutputModel, model, ), throws, MathIllegalArgumentException, ,, MaxCountExceededException, {, if, (, model]
[;, }, public, void, append, (, final, ContinuousOutputModel, model, ), throws, MathIllegalArgumentException, ,, MaxCountExceededException, {, if, (, model, ., steps]
[), {, return, ;, }, if, (, steps, ., size, (, ), ==, 0, ), {, initialTime, =, model, .]
[==, 0, ), {, return, ;, }, if, (, steps, ., size, (, ), ==, 0, ), {, initialTime, =]
[., size, (, ), ==, 0, ), {, return, ;, }, if, (, steps, ., size, (, ), ==, 0]
[., steps, ., size, (, ), ==, 0, ), {, return, ;, }, if, (, steps, ., size, (, )]
[), {, return, ;, }, if, (, steps, ., size, (, ), ==, 0, ), {, initialTime, =, model, .]
[), {, initialTime, =, model, ., initialTime, ;, forward, =, model, ., forward, ;, }, else, {, if, (, getInterpolatedState]
[==, 0, ), {, initialTime, =, model, ., initialTime, ;, forward, =, model, ., forward, ;, }, else, {, if]
[., size, (, ), ==, 0, ), {, initialTime, =, model, ., initialTime, ;, forward, =, model, ., forward, ;]
[), {, initialTime, =, model, ., initialTime, ;, forward, =, model, ., forward, ;, }, else, {, if, (, getInterpolatedState]
[=, model, ., initialTime, ;, forward, =, model, ., forward, ;, }, else, {, if, (, getInterpolatedState, (, ), .]
[;, forward, =, model, ., forward, ;, }, else, {, if, (, getInterpolatedState, (, ), ., length, !=, model, .]
[., initialTime, ;, forward, =, model, ., forward, ;, }, else, {, if, (, getInterpolatedState, (, ), ., length, !=]
[=, model, ., forward, ;, }, else, {, if, (, getInterpolatedState, (, ), ., length, !=, model, ., getInterpolatedState, (]
[;, }, else, {, if, (, getInterpolatedState, (, ), ., length, !=, model, ., getInterpolatedState, (, ), ., length, )]
[., forward, ;, }, else, {, if, (, getInterpolatedState, (, ), ., length, !=, model, ., getInterpolatedState, (, ), .]
[), {, throw, new, DimensionMismatchException, (, model, ., getInterpolatedState, (, ), ., length, ,, getInterpolatedState, (, ), ., length, )]
[!=, model, ., getInterpolatedState, (, ), ., length, ), {, throw, new, DimensionMismatchException, (, model, ., getInterpolatedState, (, ), .]
[., length, !=, model, ., getInterpolatedState, (, ), ., length, ), {, throw, new, DimensionMismatchException, (, model, ., getInterpolatedState, (]
[), {, throw, new, DimensionMismatchException, (, model, ., getInterpolatedState, (, ), ., length, ,, getInterpolatedState, (, ), ., length, )]
[., length, ), {, throw, new, DimensionMismatchException, (, model, ., getInterpolatedState, (, ), ., length, ,, getInterpolatedState, (, ), .]
[., getInterpolatedState, (, ), ., length, ), {, throw, new, DimensionMismatchException, (, model, ., getInterpolatedState, (, ), ., length, ,]
[;, }, if, (, forward, ^, model, ., forward, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., PROPAGATION_DIRECTION_MISMATCH, ), ;]
[,, getInterpolatedState, (, ), ., length, ), ;, }, if, (, forward, ^, model, ., forward, ), {, throw, new]
[., length, ,, getInterpolatedState, (, ), ., length, ), ;, }, if, (, forward, ^, model, ., forward, ), {]
[., getInterpolatedState, (, ), ., length, ,, getInterpolatedState, (, ), ., length, ), ;, }, if, (, forward, ^, model]
[), ;, }, if, (, forward, ^, model, ., forward, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., PROPAGATION_DIRECTION_MISMATCH, )]
[., length, ), ;, }, if, (, forward, ^, model, ., forward, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., PROPAGATION_DIRECTION_MISMATCH, ), ;, }, final, StepInterpolator, lastInterpolator, =, steps, ., get, (]
[^, model, ., forward, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., PROPAGATION_DIRECTION_MISMATCH, ), ;, }, final, StepInterpolator, lastInterpolator, =]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., PROPAGATION_DIRECTION_MISMATCH, ), ;, }, final, StepInterpolator, lastInterpolator, =, steps, ., get, (]
[., forward, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., PROPAGATION_DIRECTION_MISMATCH, ), ;, }, final, StepInterpolator, lastInterpolator, =, steps, .]
[;, }, final, StepInterpolator, lastInterpolator, =, steps, ., get, (, index, ), ;, final, double, current, =, lastInterpolator, ., getCurrentTime]
[), ;, }, final, StepInterpolator, lastInterpolator, =, steps, ., get, (, index, ), ;, final, double, current, =, lastInterpolator, .]
[., PROPAGATION_DIRECTION_MISMATCH, ), ;, }, final, StepInterpolator, lastInterpolator, =, steps, ., get, (, index, ), ;, final, double, current, =]
[;, final, double, current, =, lastInterpolator, ., getCurrentTime, (, ), ;, final, double, previous, =, lastInterpolator, ., getPreviousTime, (, )]
[., get, (, index, ), ;, final, double, current, =, lastInterpolator, ., getCurrentTime, (, ), ;, final, double, previous, =]
[), ;, final, double, current, =, lastInterpolator, ., getCurrentTime, (, ), ;, final, double, previous, =, lastInterpolator, ., getPreviousTime, (]
[;, final, double, previous, =, lastInterpolator, ., getPreviousTime, (, ), ;, final, double, step, =, current, -, previous, ;, final]
[., getCurrentTime, (, ), ;, final, double, previous, =, lastInterpolator, ., getPreviousTime, (, ), ;, final, double, step, =, current]
[;, final, double, step, =, current, -, previous, ;, final, double, gap, =, model, ., getInitialTime, (, ), -, current]
[., getPreviousTime, (, ), ;, final, double, step, =, current, -, previous, ;, final, double, gap, =, model, ., getInitialTime]
[;, final, double, gap, =, model, ., getInitialTime, (, ), -, current, ;, if, (, FastMath, ., abs, (, gap]
[-, previous, ;, final, double, gap, =, model, ., getInitialTime, (, ), -, current, ;, if, (, FastMath, ., abs]
[;, final, double, gap, =, model, ., getInitialTime, (, ), -, current, ;, if, (, FastMath, ., abs, (, gap]
[;, if, (, FastMath, ., abs, (, gap, ), >, 1.0e-3, *, FastMath, ., abs, (, step, ), ), {]
[-, current, ;, if, (, FastMath, ., abs, (, gap, ), >, 1.0e-3, *, FastMath, ., abs, (, step, )]
[., getInitialTime, (, ), -, current, ;, if, (, FastMath, ., abs, (, gap, ), >, 1.0e-3, *, FastMath, .]
[;, if, (, FastMath, ., abs, (, gap, ), >, 1.0e-3, *, FastMath, ., abs, (, step, ), ), {]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,, FastMath, ., abs, (, gap, ), ), ;, }, }]
[>, 1.0e-3, *, FastMath, ., abs, (, step, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,, FastMath]
[., abs, (, gap, ), >, 1.0e-3, *, FastMath, ., abs, (, step, ), ), {, throw, new, MathIllegalArgumentException, (]
[), >, 1.0e-3, *, FastMath, ., abs, (, step, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,, FastMath, ., abs, (, gap, ), ), ;, }, }]
[*, FastMath, ., abs, (, step, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,, FastMath, ., abs]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,, FastMath, ., abs, (, gap, ), ), ;, }, }]
[., abs, (, step, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,, FastMath, ., abs, (, gap]
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., HOLE_BETWEEN_MODELS_TIME_RANGES, ,, FastMath, ., abs, (, gap, ), ), ;, }]
[;, }, }, for, (, StepInterpolator, interpolator, :, model, ., steps, ), {, steps, ., add, (, interpolator, ., copy]
[,, FastMath, ., abs, (, gap, ), ), ;, }, }, for, (, StepInterpolator, interpolator, :, model, ., steps, )]
[., HOLE_BETWEEN_MODELS_TIME_RANGES, ,, FastMath, ., abs, (, gap, ), ), ;, }, }, for, (, StepInterpolator, interpolator, :, model, .]
[), ;, }, }, for, (, StepInterpolator, interpolator, :, model, ., steps, ), {, steps, ., add, (, interpolator, .]
[., abs, (, gap, ), ), ;, }, }, for, (, StepInterpolator, interpolator, :, model, ., steps, ), {, steps]
[), ), ;, }, }, for, (, StepInterpolator, interpolator, :, model, ., steps, ), {, steps, ., add, (, interpolator]
[), {, steps, ., add, (, interpolator, ., copy, (, ), ), ;, }, index, =, steps, ., size, (]
[., steps, ), {, steps, ., add, (, interpolator, ., copy, (, ), ), ;, }, index, =, steps, .]
[;, }, index, =, steps, ., size, (, ), -, 1, ;, finalTime, =, (, steps, ., get, (, index]
[., add, (, interpolator, ., copy, (, ), ), ;, }, index, =, steps, ., size, (, ), -, 1]
[), ;, }, index, =, steps, ., size, (, ), -, 1, ;, finalTime, =, (, steps, ., get, (]
[., copy, (, ), ), ;, }, index, =, steps, ., size, (, ), -, 1, ;, finalTime, =, (]
[=, steps, ., size, (, ), -, 1, ;, finalTime, =, (, steps, ., get, (, index, ), ), .]
[;, finalTime, =, (, steps, ., get, (, index, ), ), ., getCurrentTime, (, ), ;, }, public, void, init]
[-, 1, ;, finalTime, =, (, steps, ., get, (, index, ), ), ., getCurrentTime, (, ), ;, }, public]
[., size, (, ), -, 1, ;, finalTime, =, (, steps, ., get, (, index, ), ), ., getCurrentTime, (]
[;, finalTime, =, (, steps, ., get, (, index, ), ), ., getCurrentTime, (, ), ;, }, public, void, init]
[=, (, steps, ., get, (, index, ), ), ., getCurrentTime, (, ), ;, }, public, void, init, (, double]
[;, }, public, void, init, (, double, t0, ,, double, [, ], y0, ,, double, t, ), {, initialTime, =]
[., getCurrentTime, (, ), ;, }, public, void, init, (, double, t0, ,, double, [, ], y0, ,, double, t]
[), ., getCurrentTime, (, ), ;, }, public, void, init, (, double, t0, ,, double, [, ], y0, ,, double]
[., get, (, index, ), ), ., getCurrentTime, (, ), ;, }, public, void, init, (, double, t0, ,, double]
[), ), ., getCurrentTime, (, ), ;, }, public, void, init, (, double, t0, ,, double, [, ], y0, ,]
[=, Double, ., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;, index, =, 0, ;, steps]
[;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;, index, =, 0, ;, steps, ., clear, (, )]
[., NaN, ;, finalTime, =, Double, ., NaN, ;, forward, =, true, ;, index, =, 0, ;, steps, ., clear]
[=, Double, ., NaN, ;, forward, =, true, ;, index, =, 0, ;, steps, ., clear, (, ), ;, }]
[;, forward, =, true, ;, index, =, 0, ;, steps, ., clear, (, ), ;, }, public, void, handleStep, (]
[., NaN, ;, forward, =, true, ;, index, =, 0, ;, steps, ., clear, (, ), ;, }, public, void]
[=, true, ;, index, =, 0, ;, steps, ., clear, (, ), ;, }, public, void, handleStep, (, final, StepInterpolator]
[;, index, =, 0, ;, steps, ., clear, (, ), ;, }, public, void, handleStep, (, final, StepInterpolator, interpolator, ,]
[=, 0, ;, steps, ., clear, (, ), ;, }, public, void, handleStep, (, final, StepInterpolator, interpolator, ,, final, boolean]
[;, steps, ., clear, (, ), ;, }, public, void, handleStep, (, final, StepInterpolator, interpolator, ,, final, boolean, isLast, )]
[;, }, public, void, handleStep, (, final, StepInterpolator, interpolator, ,, final, boolean, isLast, ), throws, MaxCountExceededException, {, if, (, steps]
[., clear, (, ), ;, }, public, void, handleStep, (, final, StepInterpolator, interpolator, ,, final, boolean, isLast, ), throws, MaxCountExceededException]
[), {, initialTime, =, interpolator, ., getPreviousTime, (, ), ;, forward, =, interpolator, ., isForward, (, ), ;, }, steps]
[==, 0, ), {, initialTime, =, interpolator, ., getPreviousTime, (, ), ;, forward, =, interpolator, ., isForward, (, ), ;]
[., size, (, ), ==, 0, ), {, initialTime, =, interpolator, ., getPreviousTime, (, ), ;, forward, =, interpolator, .]
[), {, initialTime, =, interpolator, ., getPreviousTime, (, ), ;, forward, =, interpolator, ., isForward, (, ), ;, }, steps]
[=, interpolator, ., getPreviousTime, (, ), ;, forward, =, interpolator, ., isForward, (, ), ;, }, steps, ., add, (]
[;, forward, =, interpolator, ., isForward, (, ), ;, }, steps, ., add, (, interpolator, ., copy, (, ), )]
[., getPreviousTime, (, ), ;, forward, =, interpolator, ., isForward, (, ), ;, }, steps, ., add, (, interpolator, .]
[=, interpolator, ., isForward, (, ), ;, }, steps, ., add, (, interpolator, ., copy, (, ), ), ;, if]
[;, }, steps, ., add, (, interpolator, ., copy, (, ), ), ;, if, (, isLast, ), {, finalTime, =]
[., isForward, (, ), ;, }, steps, ., add, (, interpolator, ., copy, (, ), ), ;, if, (, isLast]
[;, if, (, isLast, ), {, finalTime, =, interpolator, ., getCurrentTime, (, ), ;, index, =, steps, ., size, (]
[., add, (, interpolator, ., copy, (, ), ), ;, if, (, isLast, ), {, finalTime, =, interpolator, ., getCurrentTime]
[), ;, if, (, isLast, ), {, finalTime, =, interpolator, ., getCurrentTime, (, ), ;, index, =, steps, ., size]
[., copy, (, ), ), ;, if, (, isLast, ), {, finalTime, =, interpolator, ., getCurrentTime, (, ), ;, index]
[), {, finalTime, =, interpolator, ., getCurrentTime, (, ), ;, index, =, steps, ., size, (, ), -, 1, ;]
[=, interpolator, ., getCurrentTime, (, ), ;, index, =, steps, ., size, (, ), -, 1, ;, }, }, public]
[;, index, =, steps, ., size, (, ), -, 1, ;, }, }, public, double, getInitialTime, (, ), {, return]
[., getCurrentTime, (, ), ;, index, =, steps, ., size, (, ), -, 1, ;, }, }, public, double, getInitialTime]
[=, steps, ., size, (, ), -, 1, ;, }, }, public, double, getInitialTime, (, ), {, return, initialTime, ;]
[;, }, }, public, double, getInitialTime, (, ), {, return, initialTime, ;, }, public, double, getFinalTime, (, ), {, return]
[-, 1, ;, }, }, public, double, getInitialTime, (, ), {, return, initialTime, ;, }, public, double, getFinalTime, (, )]
[., size, (, ), -, 1, ;, }, }, public, double, getInitialTime, (, ), {, return, initialTime, ;, }, public]
[;, }, }, public, double, getInitialTime, (, ), {, return, initialTime, ;, }, public, double, getFinalTime, (, ), {, return]
[;, }, public, double, getFinalTime, (, ), {, return, finalTime, ;, }, public, double, getInterpolatedTime, (, ), {, return, steps]
[;, }, public, double, getInterpolatedTime, (, ), {, return, steps, ., get, (, index, ), ., getInterpolatedTime, (, ), ;]
[;, }, public, void, setInterpolatedTime, (, final, double, time, ), {, int, iMin, =, 0, ;, final, StepInterpolator, sMin, =]
[., getInterpolatedTime, (, ), ;, }, public, void, setInterpolatedTime, (, final, double, time, ), {, int, iMin, =, 0, ;]
[., get, (, index, ), ., getInterpolatedTime, (, ), ;, }, public, void, setInterpolatedTime, (, final, double, time, ), {]
[), ., getInterpolatedTime, (, ), ;, }, public, void, setInterpolatedTime, (, final, double, time, ), {, int, iMin, =, 0]
[;, final, StepInterpolator, sMin, =, steps, ., get, (, iMin, ), ;, double, tMin, =, 0.5, *, (, sMin, .]
[;, double, tMin, =, 0.5, *, (, sMin, ., getPreviousTime, (, ), +, sMin, ., getCurrentTime, (, ), ), ;]
[., get, (, iMin, ), ;, double, tMin, =, 0.5, *, (, sMin, ., getPreviousTime, (, ), +, sMin, .]
[), ;, double, tMin, =, 0.5, *, (, sMin, ., getPreviousTime, (, ), +, sMin, ., getCurrentTime, (, ), )]
[;, int, iMax, =, steps, ., size, (, ), -, 1, ;, final, StepInterpolator, sMax, =, steps, ., get, (]
[*, (, sMin, ., getPreviousTime, (, ), +, sMin, ., getCurrentTime, (, ), ), ;, int, iMax, =, steps, .]
[;, int, iMax, =, steps, ., size, (, ), -, 1, ;, final, StepInterpolator, sMax, =, steps, ., get, (]
[), ;, int, iMax, =, steps, ., size, (, ), -, 1, ;, final, StepInterpolator, sMax, =, steps, ., get]
[+, sMin, ., getCurrentTime, (, ), ), ;, int, iMax, =, steps, ., size, (, ), -, 1, ;, final]
[., getPreviousTime, (, ), +, sMin, ., getCurrentTime, (, ), ), ;, int, iMax, =, steps, ., size, (, )]
[), ;, int, iMax, =, steps, ., size, (, ), -, 1, ;, final, StepInterpolator, sMax, =, steps, ., get]
[., getCurrentTime, (, ), ), ;, int, iMax, =, steps, ., size, (, ), -, 1, ;, final, StepInterpolator, sMax]
[;, final, StepInterpolator, sMax, =, steps, ., get, (, iMax, ), ;, double, tMax, =, 0.5, *, (, sMax, .]
[-, 1, ;, final, StepInterpolator, sMax, =, steps, ., get, (, iMax, ), ;, double, tMax, =, 0.5, *, (]
[., size, (, ), -, 1, ;, final, StepInterpolator, sMax, =, steps, ., get, (, iMax, ), ;, double, tMax]
[;, final, StepInterpolator, sMax, =, steps, ., get, (, iMax, ), ;, double, tMax, =, 0.5, *, (, sMax, .]
[;, double, tMax, =, 0.5, *, (, sMax, ., getPreviousTime, (, ), +, sMax, ., getCurrentTime, (, ), ), ;]
[., get, (, iMax, ), ;, double, tMax, =, 0.5, *, (, sMax, ., getPreviousTime, (, ), +, sMax, .]
[), ;, double, tMax, =, 0.5, *, (, sMax, ., getPreviousTime, (, ), +, sMax, ., getCurrentTime, (, ), )]
[;, if, (, locatePoint, (, time, ,, sMin, ), <=, 0, ), {, index, =, iMin, ;, sMin, ., setInterpolatedTime]
[*, (, sMax, ., getPreviousTime, (, ), +, sMax, ., getCurrentTime, (, ), ), ;, if, (, locatePoint, (, time]
[;, if, (, locatePoint, (, time, ,, sMin, ), <=, 0, ), {, index, =, iMin, ;, sMin, ., setInterpolatedTime]
[), ;, if, (, locatePoint, (, time, ,, sMin, ), <=, 0, ), {, index, =, iMin, ;, sMin, .]
[+, sMax, ., getCurrentTime, (, ), ), ;, if, (, locatePoint, (, time, ,, sMin, ), <=, 0, ), {]
[., getPreviousTime, (, ), +, sMax, ., getCurrentTime, (, ), ), ;, if, (, locatePoint, (, time, ,, sMin, )]
[), ;, if, (, locatePoint, (, time, ,, sMin, ), <=, 0, ), {, index, =, iMin, ;, sMin, .]
[., getCurrentTime, (, ), ), ;, if, (, locatePoint, (, time, ,, sMin, ), <=, 0, ), {, index, =]
[), {, index, =, iMin, ;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;, }, if, (, locatePoint, (]
[<=, 0, ), {, index, =, iMin, ;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;, }, if, (]
[,, sMin, ), <=, 0, ), {, index, =, iMin, ;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;]
[), <=, 0, ), {, index, =, iMin, ;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;, }, if]
[), {, index, =, iMin, ;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;, }, if, (, locatePoint, (]
[=, iMin, ;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;, }, if, (, locatePoint, (, time, ,, sMax]
[;, sMin, ., setInterpolatedTime, (, time, ), ;, return, ;, }, if, (, locatePoint, (, time, ,, sMax, ), >=]
[;, return, ;, }, if, (, locatePoint, (, time, ,, sMax, ), >=, 0, ), {, index, =, iMax, ;]
[., setInterpolatedTime, (, time, ), ;, return, ;, }, if, (, locatePoint, (, time, ,, sMax, ), >=, 0, )]
[), ;, return, ;, }, if, (, locatePoint, (, time, ,, sMax, ), >=, 0, ), {, index, =, iMax]
[), {, index, =, iMax, ;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;, }, while, (, iMax, -]
[>=, 0, ), {, index, =, iMax, ;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;, }, while, (]
[,, sMax, ), >=, 0, ), {, index, =, iMax, ;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;]
[), >=, 0, ), {, index, =, iMax, ;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;, }, while]
[), {, index, =, iMax, ;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;, }, while, (, iMax, -]
[=, iMax, ;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;, }, while, (, iMax, -, iMin, >, 5]
[;, sMax, ., setInterpolatedTime, (, time, ), ;, return, ;, }, while, (, iMax, -, iMin, >, 5, ), {]
[;, return, ;, }, while, (, iMax, -, iMin, >, 5, ), {, final, StepInterpolator, si, =, steps, ., get]
[., setInterpolatedTime, (, time, ), ;, return, ;, }, while, (, iMax, -, iMin, >, 5, ), {, final, StepInterpolator]
[), ;, return, ;, }, while, (, iMax, -, iMin, >, 5, ), {, final, StepInterpolator, si, =, steps, .]
[), {, final, StepInterpolator, si, =, steps, ., get, (, index, ), ;, final, int, location, =, locatePoint, (, time]
[>, 5, ), {, final, StepInterpolator, si, =, steps, ., get, (, index, ), ;, final, int, location, =, locatePoint]
[-, iMin, >, 5, ), {, final, StepInterpolator, si, =, steps, ., get, (, index, ), ;, final, int, location]
[>, 5, ), {, final, StepInterpolator, si, =, steps, ., get, (, index, ), ;, final, int, location, =, locatePoint]
[), {, final, StepInterpolator, si, =, steps, ., get, (, index, ), ;, final, int, location, =, locatePoint, (, time]
[;, final, int, location, =, locatePoint, (, time, ,, si, ), ;, if, (, location, <, 0, ), {, iMax]
[., get, (, index, ), ;, final, int, location, =, locatePoint, (, time, ,, si, ), ;, if, (, location]
[), ;, final, int, location, =, locatePoint, (, time, ,, si, ), ;, if, (, location, <, 0, ), {]
[;, if, (, location, <, 0, ), {, iMax, =, index, ;, tMax, =, 0.5, *, (, si, ., getPreviousTime]
[,, si, ), ;, if, (, location, <, 0, ), {, iMax, =, index, ;, tMax, =, 0.5, *, (]
[), ;, if, (, location, <, 0, ), {, iMax, =, index, ;, tMax, =, 0.5, *, (, si, .]
[), {, iMax, =, index, ;, tMax, =, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime]
[<, 0, ), {, iMax, =, index, ;, tMax, =, 0.5, *, (, si, ., getPreviousTime, (, ), +, si]
[), {, iMax, =, index, ;, tMax, =, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime]
[=, index, ;, tMax, =, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), )]
[;, tMax, =, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }]
[=, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, if]
[;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;, tMin, =, 0.5, *, (, si]
[*, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, if, (, location]
[;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;, tMin, =, 0.5, *, (, si]
[), ;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;, tMin, =, 0.5, *, (]
[+, si, ., getCurrentTime, (, ), ), ;, }, else, if, (, location, >, 0, ), {, iMin, =, index]
[., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, if, (, location, >, 0, )]
[), ;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;, tMin, =, 0.5, *, (]
[., getCurrentTime, (, ), ), ;, }, else, if, (, location, >, 0, ), {, iMin, =, index, ;, tMin]
[), {, iMin, =, index, ;, tMin, =, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime]
[>, 0, ), {, iMin, =, index, ;, tMin, =, 0.5, *, (, si, ., getPreviousTime, (, ), +, si]
[), {, iMin, =, index, ;, tMin, =, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime]
[=, index, ;, tMin, =, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), )]
[;, tMin, =, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }]
[=, 0.5, *, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, {]
[;, }, else, {, si, ., setInterpolatedTime, (, time, ), ;, return, ;, }, final, int, iMed, =, (, iMin]
[*, (, si, ., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, {, si, .]
[;, }, else, {, si, ., setInterpolatedTime, (, time, ), ;, return, ;, }, final, int, iMed, =, (, iMin]
[), ;, }, else, {, si, ., setInterpolatedTime, (, time, ), ;, return, ;, }, final, int, iMed, =, (]
[+, si, ., getCurrentTime, (, ), ), ;, }, else, {, si, ., setInterpolatedTime, (, time, ), ;, return, ;]
[., getPreviousTime, (, ), +, si, ., getCurrentTime, (, ), ), ;, }, else, {, si, ., setInterpolatedTime, (, time]
[), ;, }, else, {, si, ., setInterpolatedTime, (, time, ), ;, return, ;, }, final, int, iMed, =, (]
[., getCurrentTime, (, ), ), ;, }, else, {, si, ., setInterpolatedTime, (, time, ), ;, return, ;, }, final]
[;, return, ;, }, final, int, iMed, =, (, iMin, +, iMax, ), /, 2, ;, final, StepInterpolator, sMed, =]
[., setInterpolatedTime, (, time, ), ;, return, ;, }, final, int, iMed, =, (, iMin, +, iMax, ), /, 2]
[), ;, return, ;, }, final, int, iMed, =, (, iMin, +, iMax, ), /, 2, ;, final, StepInterpolator, sMed]
[;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed, =, 0.5, *, (, sMed]
[/, 2, ;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed, =, 0.5, *]
[), /, 2, ;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed, =, 0.5]
[+, iMax, ), /, 2, ;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed]
[), /, 2, ;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed, =, 0.5]
[;, final, StepInterpolator, sMed, =, steps, ., get, (, iMed, ), ;, final, double, tMed, =, 0.5, *, (, sMed]
[;, final, double, tMed, =, 0.5, *, (, sMed, ., getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, ), )]
[., get, (, iMed, ), ;, final, double, tMed, =, 0.5, *, (, sMed, ., getPreviousTime, (, ), +, sMed]
[), ;, final, double, tMed, =, 0.5, *, (, sMed, ., getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, )]
[;, if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (, FastMath, ., abs]
[*, (, sMed, ., getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, ), ), ;, if, (, (, FastMath, .]
[;, if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (, FastMath, ., abs]
[), ;, if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (, FastMath, .]
[+, sMed, ., getCurrentTime, (, ), ), ;, if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <]
[., getPreviousTime, (, ), +, sMed, ., getCurrentTime, (, ), ), ;, if, (, (, FastMath, ., abs, (, tMed]
[), ;, if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (, FastMath, .]
[., getCurrentTime, (, ), ), ;, if, (, (, FastMath, ., abs, (, tMed, -, tMin, ), <, 1e-6, )]
[), {, index, =, iMed, ;, }, else, {, final, double, d12, =, tMax, -, tMed, ;, final, double, d23]
[||, (, FastMath, ., abs, (, tMax, -, tMed, ), <, 1e-6, ), ), {, index, =, iMed, ;, }]
[), ||, (, FastMath, ., abs, (, tMax, -, tMed, ), <, 1e-6, ), ), {, index, =, iMed, ;]
[<, 1e-6, ), ||, (, FastMath, ., abs, (, tMax, -, tMed, ), <, 1e-6, ), ), {, index, =]
[., abs, (, tMed, -, tMin, ), <, 1e-6, ), ||, (, FastMath, ., abs, (, tMax, -, tMed, )]
[), <, 1e-6, ), ||, (, FastMath, ., abs, (, tMax, -, tMed, ), <, 1e-6, ), ), {, index]
[-, tMin, ), <, 1e-6, ), ||, (, FastMath, ., abs, (, tMax, -, tMed, ), <, 1e-6, ), )]
[), <, 1e-6, ), ||, (, FastMath, ., abs, (, tMax, -, tMed, ), <, 1e-6, ), ), {, index]
[), ||, (, FastMath, ., abs, (, tMax, -, tMed, ), <, 1e-6, ), ), {, index, =, iMed, ;]
[), {, index, =, iMed, ;, }, else, {, final, double, d12, =, tMax, -, tMed, ;, final, double, d23]
[), ), {, index, =, iMed, ;, }, else, {, final, double, d12, =, tMax, -, tMed, ;, final, double]
[<, 1e-6, ), ), {, index, =, iMed, ;, }, else, {, final, double, d12, =, tMax, -, tMed, ;]
[., abs, (, tMax, -, tMed, ), <, 1e-6, ), ), {, index, =, iMed, ;, }, else, {, final]
[), <, 1e-6, ), ), {, index, =, iMed, ;, }, else, {, final, double, d12, =, tMax, -, tMed]
[-, tMed, ), <, 1e-6, ), ), {, index, =, iMed, ;, }, else, {, final, double, d12, =, tMax]
[), <, 1e-6, ), ), {, index, =, iMed, ;, }, else, {, final, double, d12, =, tMax, -, tMed]
[), ), {, index, =, iMed, ;, }, else, {, final, double, d12, =, tMax, -, tMed, ;, final, double]
[=, iMed, ;, }, else, {, final, double, d12, =, tMax, -, tMed, ;, final, double, d23, =, tMed, -]
[;, }, else, {, final, double, d12, =, tMax, -, tMed, ;, final, double, d23, =, tMed, -, tMin, ;]
[;, final, double, d23, =, tMed, -, tMin, ;, final, double, d13, =, tMax, -, tMin, ;, final, double, dt1]
[-, tMed, ;, final, double, d23, =, tMed, -, tMin, ;, final, double, d13, =, tMax, -, tMin, ;, final]
[;, final, double, d23, =, tMed, -, tMin, ;, final, double, d13, =, tMax, -, tMin, ;, final, double, dt1]
[;, final, double, d13, =, tMax, -, tMin, ;, final, double, dt1, =, time, -, tMax, ;, final, double, dt2]
[-, tMin, ;, final, double, d13, =, tMax, -, tMin, ;, final, double, dt1, =, time, -, tMax, ;, final]
[;, final, double, d13, =, tMax, -, tMin, ;, final, double, dt1, =, time, -, tMax, ;, final, double, dt2]
[;, final, double, dt1, =, time, -, tMax, ;, final, double, dt2, =, time, -, tMed, ;, final, double, dt3]
[-, tMin, ;, final, double, dt1, =, time, -, tMax, ;, final, double, dt2, =, time, -, tMed, ;, final]
[;, final, double, dt1, =, time, -, tMax, ;, final, double, dt2, =, time, -, tMed, ;, final, double, dt3]
[;, final, double, dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange]
[-, tMax, ;, final, double, dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final]
[;, final, double, dt2, =, time, -, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange]
[;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23]
[-, tMed, ;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3]
[;, final, double, dt3, =, time, -, tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23]
[;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23, ), *, iMax, -, (, dt1, *, dt3]
[-, tMin, ;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23, ), *, iMax, -, (, dt1]
[;, final, double, iLagrange, =, (, (, dt2, *, dt3, *, d23, ), *, iMax, -, (, dt1, *, dt3]
[;, index, =, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, .]
[/, (, d12, *, d23, *, d13, ), ;, index, =, (, int, ), FastMath, ., rint, (, iLagrange, )]
[), /, (, d12, *, d23, *, d13, ), ;, index, =, (, int, ), FastMath, ., rint, (, iLagrange]
[+, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;]
[-, (, dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin]
[*, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, )]
[), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12]
[*, d23, ), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2]
[*, dt3, *, d23, ), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1]
[*, d23, ), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2]
[), *, iMax, -, (, dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12]
[-, (, dt1, *, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin]
[+, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;]
[*, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *, d23, *, d13]
[), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *, d23, *]
[*, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *]
[*, dt3, *, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (]
[*, d13, ), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *]
[), *, iMed, +, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *, d23, *]
[+, (, dt1, *, dt2, *, d12, ), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;]
[), /, (, d12, *, d23, *, d13, ), ;, index, =, (, int, ), FastMath, ., rint, (, iLagrange]
[*, iMin, ), /, (, d12, *, d23, *, d13, ), ;, index, =, (, int, ), FastMath, ., rint]
[), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;, index, =, (, int, ), FastMath, .]
[*, d12, ), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;, index, =, (, int, )]
[*, dt2, *, d12, ), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;, index, =, (]
[*, d12, ), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;, index, =, (, int, )]
[), *, iMin, ), /, (, d12, *, d23, *, d13, ), ;, index, =, (, int, ), FastMath, .]
[), /, (, d12, *, d23, *, d13, ), ;, index, =, (, int, ), FastMath, ., rint, (, iLagrange]
[;, index, =, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, .]
[), ;, index, =, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath]
[*, d13, ), ;, index, =, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low]
[*, d23, *, d13, ), ;, index, =, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final]
[*, d13, ), ;, index, =, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low]
[), ;, index, =, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath]
[=, (, int, ), FastMath, ., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, ., max, (]
[;, }, final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,, (, 9, *, iMin, +, iMax]
[;, }, final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,, (, 9, *, iMin, +, iMax]
[., rint, (, iLagrange, ), ;, }, final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,, (]
[), ;, }, final, int, low, =, FastMath, ., max, (, iMin, +, 1, ,, (, 9, *, iMin, +]
[;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (, iMin, +, 9, *, iMax, )]
[., max, (, iMin, +, 1, ,, (, 9, *, iMin, +, iMax, ), /, 10, ), ;, final, int]
[,, (, 9, *, iMin, +, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (]
[+, 1, ,, (, 9, *, iMin, +, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, .]
[,, (, 9, *, iMin, +, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (]
[), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (, iMin, +, 9, *, iMax]
[/, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (, iMin, +, 9]
[), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (, iMin, +]
[+, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (]
[*, iMin, +, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1]
[+, iMax, ), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (]
[), /, 10, ), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (, iMin, +]
[), ;, final, int, high, =, FastMath, ., min, (, iMax, -, 1, ,, (, iMin, +, 9, *, iMax]
[;, if, (, index, <, low, ), {, index, =, low, ;, }, else, if, (, index, >, high, )]
[., min, (, iMax, -, 1, ,, (, iMin, +, 9, *, iMax, ), /, 10, ), ;, if, (]
[,, (, iMin, +, 9, *, iMax, ), /, 10, ), ;, if, (, index, <, low, ), {, index]
[-, 1, ,, (, iMin, +, 9, *, iMax, ), /, 10, ), ;, if, (, index, <, low, )]
[,, (, iMin, +, 9, *, iMax, ), /, 10, ), ;, if, (, index, <, low, ), {, index]
[), ;, if, (, index, <, low, ), {, index, =, low, ;, }, else, if, (, index, >, high]
[/, 10, ), ;, if, (, index, <, low, ), {, index, =, low, ;, }, else, if, (, index]
[), /, 10, ), ;, if, (, index, <, low, ), {, index, =, low, ;, }, else, if, (]
[+, 9, *, iMax, ), /, 10, ), ;, if, (, index, <, low, ), {, index, =, low, ;]
[), /, 10, ), ;, if, (, index, <, low, ), {, index, =, low, ;, }, else, if, (]
[*, iMax, ), /, 10, ), ;, if, (, index, <, low, ), {, index, =, low, ;, }, else]
[), /, 10, ), ;, if, (, index, <, low, ), {, index, =, low, ;, }, else, if, (]
[), ;, if, (, index, <, low, ), {, index, =, low, ;, }, else, if, (, index, >, high]
[), {, index, =, low, ;, }, else, if, (, index, >, high, ), {, index, =, high, ;, }]
[<, low, ), {, index, =, low, ;, }, else, if, (, index, >, high, ), {, index, =, high]
[), {, index, =, low, ;, }, else, if, (, index, >, high, ), {, index, =, high, ;, }]
[=, low, ;, }, else, if, (, index, >, high, ), {, index, =, high, ;, }, }, index, =]
[;, }, else, if, (, index, >, high, ), {, index, =, high, ;, }, }, index, =, iMin, ;]
[), {, index, =, high, ;, }, }, index, =, iMin, ;, while, (, (, index, <=, iMax, ), &&]
[>, high, ), {, index, =, high, ;, }, }, index, =, iMin, ;, while, (, (, index, <=, iMax]
[), {, index, =, high, ;, }, }, index, =, iMin, ;, while, (, (, index, <=, iMax, ), &&]
[=, high, ;, }, }, index, =, iMin, ;, while, (, (, index, <=, iMax, ), &&, (, locatePoint, (]
[;, }, }, index, =, iMin, ;, while, (, (, index, <=, iMax, ), &&, (, locatePoint, (, time, ,]
[=, iMin, ;, while, (, (, index, <=, iMax, ), &&, (, locatePoint, (, time, ,, steps, ., get, (]
[;, while, (, (, index, <=, iMax, ), &&, (, locatePoint, (, time, ,, steps, ., get, (, index, )]
[), {, ++, index, ;, }, steps, ., get, (, index, ), ., setInterpolatedTime, (, time, ), ;, }, public]
[&&, (, locatePoint, (, time, ,, steps, ., get, (, index, ), ), >, 0, ), ), {, ++, index]
[), &&, (, locatePoint, (, time, ,, steps, ., get, (, index, ), ), >, 0, ), ), {, ++]
[<=, iMax, ), &&, (, locatePoint, (, time, ,, steps, ., get, (, index, ), ), >, 0, ), )]
[), &&, (, locatePoint, (, time, ,, steps, ., get, (, index, ), ), >, 0, ), ), {, ++]
[), {, ++, index, ;, }, steps, ., get, (, index, ), ., setInterpolatedTime, (, time, ), ;, }, public]
[), ), {, ++, index, ;, }, steps, ., get, (, index, ), ., setInterpolatedTime, (, time, ), ;, }]
[>, 0, ), ), {, ++, index, ;, }, steps, ., get, (, index, ), ., setInterpolatedTime, (, time, )]
[,, steps, ., get, (, index, ), ), >, 0, ), ), {, ++, index, ;, }, steps, ., get]
[), >, 0, ), ), {, ++, index, ;, }, steps, ., get, (, index, ), ., setInterpolatedTime, (, time]
[., get, (, index, ), ), >, 0, ), ), {, ++, index, ;, }, steps, ., get, (, index]
[), ), >, 0, ), ), {, ++, index, ;, }, steps, ., get, (, index, ), ., setInterpolatedTime, (]
[), ), {, ++, index, ;, }, steps, ., get, (, index, ), ., setInterpolatedTime, (, time, ), ;, }]
[;, }, steps, ., get, (, index, ), ., setInterpolatedTime, (, time, ), ;, }, public, double, [, ], getInterpolatedState]
[;, }, steps, ., get, (, index, ), ., setInterpolatedTime, (, time, ), ;, }, public, double, [, ], getInterpolatedState]
[;, }, public, double, [, ], getInterpolatedState, (, ), throws, MaxCountExceededException, {, return, steps, ., get, (, index, ), .]
[., setInterpolatedTime, (, time, ), ;, }, public, double, [, ], getInterpolatedState, (, ), throws, MaxCountExceededException, {, return, steps, .]
[., get, (, index, ), ., setInterpolatedTime, (, time, ), ;, }, public, double, [, ], getInterpolatedState, (, ), throws]
[), ., setInterpolatedTime, (, time, ), ;, }, public, double, [, ], getInterpolatedState, (, ), throws, MaxCountExceededException, {, return, steps]
[), ;, }, public, double, [, ], getInterpolatedState, (, ), throws, MaxCountExceededException, {, return, steps, ., get, (, index, )]
[;, }, public, double, [, ], getInterpolatedSecondaryState, (, final, int, secondaryStateIndex, ), throws, MaxCountExceededException, {, return, steps, ., get, (]
[., getInterpolatedState, (, ), ;, }, public, double, [, ], getInterpolatedSecondaryState, (, final, int, secondaryStateIndex, ), throws, MaxCountExceededException, {, return]
[., get, (, index, ), ., getInterpolatedState, (, ), ;, }, public, double, [, ], getInterpolatedSecondaryState, (, final, int, secondaryStateIndex]
[), ., getInterpolatedState, (, ), ;, }, public, double, [, ], getInterpolatedSecondaryState, (, final, int, secondaryStateIndex, ), throws, MaxCountExceededException, {]
[;, }, private, int, locatePoint, (, final, double, time, ,, final, StepInterpolator, interval, ), {, if, (, forward, ), {]
[., getInterpolatedSecondaryState, (, secondaryStateIndex, ), ;, }, private, int, locatePoint, (, final, double, time, ,, final, StepInterpolator, interval, ), {]
[., get, (, index, ), ., getInterpolatedSecondaryState, (, secondaryStateIndex, ), ;, }, private, int, locatePoint, (, final, double, time, ,]
[), ., getInterpolatedSecondaryState, (, secondaryStateIndex, ), ;, }, private, int, locatePoint, (, final, double, time, ,, final, StepInterpolator, interval, )]
[), ;, }, private, int, locatePoint, (, final, double, time, ,, final, StepInterpolator, interval, ), {, if, (, forward, )]
[), {, if, (, time, <, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if]
[), {, return, -, 1, ;, }, else, if, (, time, >, interval, ., getCurrentTime, (, ), ), {, return]
[<, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (, time, >, interval, .]
[), {, return, -, 1, ;, }, else, if, (, time, >, interval, ., getCurrentTime, (, ), ), {, return]
[., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (, time, >, interval, ., getCurrentTime, (]
[;, }, else, if, (, time, >, interval, ., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else]
[;, }, else, if, (, time, >, interval, ., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else]
[), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, if, (, time, >, interval, .]
[>, interval, ., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }]
[), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, if, (, time, >, interval, .]
[., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, if, (]
[;, }, else, {, return, 0, ;, }, }, if, (, time, >, interval, ., getPreviousTime, (, ), ), {]
[;, }, else, {, return, 0, ;, }, }, if, (, time, >, interval, ., getPreviousTime, (, ), ), {]
[;, }, }, if, (, time, >, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else]
[), {, return, -, 1, ;, }, else, if, (, time, <, interval, ., getCurrentTime, (, ), ), {, return]
[>, interval, ., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (, time, <, interval, .]
[), {, return, -, 1, ;, }, else, if, (, time, <, interval, ., getCurrentTime, (, ), ), {, return]
[., getPreviousTime, (, ), ), {, return, -, 1, ;, }, else, if, (, time, <, interval, ., getCurrentTime, (]
[;, }, else, if, (, time, <, interval, ., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else]
[;, }, else, if, (, time, <, interval, ., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else]
[), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }]
[<, interval, ., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }]
[), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }]
[., getCurrentTime, (, ), ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }]
[;, }, else, {, return, 0, ;, }, }, }]
[;, }, else, {, return, 0, ;, }, }, }]
[;, }, }, }]
