[;, OptimizeParameters, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, @, VisibleForTesting, public, void]
[., newArrayList, (, ), ;, OptimizeParameters, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override]
[=, compiler, ;, }, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions]
[., compiler, =, compiler, ;, }, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, )]
[;, }, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState]
[;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, process]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (]
[), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;]
[==, LifeCycleStage, ., NORMALIZED, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs]
[., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder]
[), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;]
[., NORMALIZED, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root]
[;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }]
[), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;]
[;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs, ,]
[., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override]
[,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (]
[), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, for, (]
[,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder]
[,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, )]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, for]
[), {, if, (, canChangeSignature, (, defSite, ,, definitions, ), ), {, tryEliminateConstantArgs, (, defSite, ,, definitions, ), ;, tryEliminateOptionalArgs]
[., getDefinitionSites, (, ), ), {, if, (, canChangeSignature, (, defSite, ,, definitions, ), ), {, tryEliminateConstantArgs, (, defSite, ,]
[), {, tryEliminateConstantArgs, (, defSite, ,, definitions, ), ;, tryEliminateOptionalArgs, (, defSite, ,, definitions, ), ;, }, }, for, (]
[,, definitions, ), ), {, tryEliminateConstantArgs, (, defSite, ,, definitions, ), ;, tryEliminateOptionalArgs, (, defSite, ,, definitions, ), ;, }]
[), ), {, tryEliminateConstantArgs, (, defSite, ,, definitions, ), ;, tryEliminateOptionalArgs, (, defSite, ,, definitions, ), ;, }, }, for]
[;, tryEliminateOptionalArgs, (, defSite, ,, definitions, ), ;, }, }, for, (, Node, n, :, removedNodes, ), {, definitions, .]
[,, definitions, ), ;, tryEliminateOptionalArgs, (, defSite, ,, definitions, ), ;, }, }, for, (, Node, n, :, removedNodes, )]
[), ;, tryEliminateOptionalArgs, (, defSite, ,, definitions, ), ;, }, }, for, (, Node, n, :, removedNodes, ), {, definitions]
[;, }, }, for, (, Node, n, :, removedNodes, ), {, definitions, ., removeReferences, (, n, ), ;, }, }]
[,, definitions, ), ;, }, }, for, (, Node, n, :, removedNodes, ), {, definitions, ., removeReferences, (, n, )]
[), ;, }, }, for, (, Node, n, :, removedNodes, ), {, definitions, ., removeReferences, (, n, ), ;, }]
[), {, definitions, ., removeReferences, (, n, ), ;, }, }, private, boolean, canChangeSignature, (, DefinitionSite, definitionSite, ,, SimpleDefinitionFinder, defFinder]
[;, }, }, private, boolean, canChangeSignature, (, DefinitionSite, definitionSite, ,, SimpleDefinitionFinder, defFinder, ), {, Definition, definition, =, definitionSite, ., definition]
[., removeReferences, (, n, ), ;, }, }, private, boolean, canChangeSignature, (, DefinitionSite, definitionSite, ,, SimpleDefinitionFinder, defFinder, ), {, Definition]
[), ;, }, }, private, boolean, canChangeSignature, (, DefinitionSite, definitionSite, ,, SimpleDefinitionFinder, defFinder, ), {, Definition, definition, =, definitionSite, .]
[;, if, (, definitionSite, ., inExterns, ), {, return, false, ;, }, Node, rValue, =, definition, ., getRValue, (, )]
[., definition, ;, if, (, definitionSite, ., inExterns, ), {, return, false, ;, }, Node, rValue, =, definition, ., getRValue]
[), {, return, false, ;, }, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null]
[., inExterns, ), {, return, false, ;, }, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue]
[;, }, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue, .]
[;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, )]
[., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||, NodeUtil, .]
[), {, return, false, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, false, ;]
[||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (]
[||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }]
[==, null, ||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false]
[||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }]
[||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (]
[||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (]
[., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, false, ;]
[., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, )]
[), ), {, return, false, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, false]
[;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, false, ;]
[., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, false, ;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, )]
[), ), {, return, false, ;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, false]
[;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, false, ;, }, Collection, <, UseSite]
[), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, if]
[), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, if]
[., canModifyDefinition, (, definition, ), ), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites]
[), ), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;]
[;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, if, (, useSites, ., isEmpty]
[;, if, (, useSites, ., isEmpty, (, ), ), {, return, false, ;, }, for, (, UseSite, site, :, useSites]
[., getUseSites, (, definition, ), ;, if, (, useSites, ., isEmpty, (, ), ), {, return, false, ;, }, for]
[), ;, if, (, useSites, ., isEmpty, (, ), ), {, return, false, ;, }, for, (, UseSite, site, :]
[), {, return, false, ;, }, for, (, UseSite, site, :, useSites, ), {, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite]
[., isEmpty, (, ), ), {, return, false, ;, }, for, (, UseSite, site, :, useSites, ), {, if, (]
[;, }, for, (, UseSite, site, :, useSites, ), {, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), )]
[), {, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, return, false, ;, }, Node, nameNode, =]
[), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder]
[), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder]
[., isCallOrNewSite, (, site, ), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <]
[), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =]
[;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode]
[;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size, (]
[., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, .]
[;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (]
[., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;]
[), ;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState]
[), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, .]
[>, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;]
[., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty]
[), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, .]
[;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, .]
[;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return, true, ;, }, private, void]
[., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition]
[), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return, true, ;, }, private]
[), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return, true, ;, }, private]
[., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return]
[;, }, return, true, ;, }, private, void, tryEliminateOptionalArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, int, maxArgs, =]
[., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return, true, ;, }, private, void, tryEliminateOptionalArgs, (]
[), ;, }, return, true, ;, }, private, void, tryEliminateOptionalArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, int, maxArgs]
[., contains, (, definition, ), ), ;, }, return, true, ;, }, private, void, tryEliminateOptionalArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder]
[), ), ;, }, return, true, ;, }, private, void, tryEliminateOptionalArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, int]
[;, }, private, void, tryEliminateOptionalArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, int, maxArgs, =, -, 1, ;, Definition]
[;, Definition, definition, =, defSite, ., definition, ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, )]
[;, Definition, definition, =, defSite, ., definition, ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, )]
[;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites]
[., definition, ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site]
[;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), )]
[., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, .]
[), ;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, )]
[), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node]
[;, Node, call, =, site, ., node, ., getParent, (, ), ;, int, numArgs, =, call, ., getChildCount, (, )]
[., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (]
[), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, int, numArgs, =, call, ., getChildCount, (]
[., isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, int, numArgs]
[), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, int, numArgs, =, call, ., getChildCount]
[;, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, if, (, numArgs, >, maxArgs, ), {, maxArgs]
[., getParent, (, ), ;, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, if, (, numArgs, >]
[., node, ., getParent, (, ), ;, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, if, (]
[;, if, (, numArgs, >, maxArgs, ), {, maxArgs, =, numArgs, ;, }, }, eliminateParamsAfter, (, definition, ., getRValue, (]
[-, 1, ;, if, (, numArgs, >, maxArgs, ), {, maxArgs, =, numArgs, ;, }, }, eliminateParamsAfter, (, definition, .]
[., getChildCount, (, ), -, 1, ;, if, (, numArgs, >, maxArgs, ), {, maxArgs, =, numArgs, ;, }, }]
[;, if, (, numArgs, >, maxArgs, ), {, maxArgs, =, numArgs, ;, }, }, eliminateParamsAfter, (, definition, ., getRValue, (]
[), {, maxArgs, =, numArgs, ;, }, }, eliminateParamsAfter, (, definition, ., getRValue, (, ), ,, maxArgs, ), ;, }]
[>, maxArgs, ), {, maxArgs, =, numArgs, ;, }, }, eliminateParamsAfter, (, definition, ., getRValue, (, ), ,, maxArgs, )]
[), {, maxArgs, =, numArgs, ;, }, }, eliminateParamsAfter, (, definition, ., getRValue, (, ), ,, maxArgs, ), ;, }]
[=, numArgs, ;, }, }, eliminateParamsAfter, (, definition, ., getRValue, (, ), ,, maxArgs, ), ;, }, private, void, tryEliminateConstantArgs]
[;, }, }, eliminateParamsAfter, (, definition, ., getRValue, (, ), ,, maxArgs, ), ;, }, private, void, tryEliminateConstantArgs, (, DefinitionSite]
[;, }, private, void, tryEliminateConstantArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, List, <, Parameter, >, parameters, =, Lists]
[,, maxArgs, ), ;, }, private, void, tryEliminateConstantArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, List, <, Parameter, >]
[., getRValue, (, ), ,, maxArgs, ), ;, }, private, void, tryEliminateConstantArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {]
[), ;, }, private, void, tryEliminateConstantArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, List, <, Parameter, >, parameters, =]
[;, boolean, firstCall, =, true, ;, Definition, definition, =, defSite, ., definition, ;, Collection, <, UseSite, >, useSites, =, defFinder]
[., newArrayList, (, ), ;, boolean, firstCall, =, true, ;, Definition, definition, =, defSite, ., definition, ;, Collection, <, UseSite]
[;, Definition, definition, =, defSite, ., definition, ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, )]
[;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, boolean, continueLooking, =, false, ;, for]
[., definition, ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, boolean, continueLooking, =, false]
[;, boolean, continueLooking, =, false, ;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, .]
[., getUseSites, (, definition, ), ;, boolean, continueLooking, =, false, ;, for, (, UseSite, site, :, useSites, ), {, Preconditions]
[), ;, boolean, continueLooking, =, false, ;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder]
[;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), )]
[), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node]
[;, Node, call, =, site, ., node, ., getParent, (, ), ;, Node, cur, =, call, ., getFirstChild, (, )]
[., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (]
[), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, Node, cur, =, call, ., getFirstChild, (]
[., isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, Node, cur]
[), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, Node, cur, =, call, ., getFirstChild]
[;, Node, cur, =, call, ., getFirstChild, (, ), ;, if, (, firstCall, ), {, continueLooking, =, buildParameterList, (, parameters]
[., getParent, (, ), ;, Node, cur, =, call, ., getFirstChild, (, ), ;, if, (, firstCall, ), {, continueLooking]
[., node, ., getParent, (, ), ;, Node, cur, =, call, ., getFirstChild, (, ), ;, if, (, firstCall, )]
[;, if, (, firstCall, ), {, continueLooking, =, buildParameterList, (, parameters, ,, cur, ,, site, ., scope, ), ;, firstCall]
[., getFirstChild, (, ), ;, if, (, firstCall, ), {, continueLooking, =, buildParameterList, (, parameters, ,, cur, ,, site, .]
[), {, continueLooking, =, buildParameterList, (, parameters, ,, cur, ,, site, ., scope, ), ;, firstCall, =, false, ;, }]
[=, buildParameterList, (, parameters, ,, cur, ,, site, ., scope, ), ;, firstCall, =, false, ;, }, else, {, continueLooking]
[;, firstCall, =, false, ;, }, else, {, continueLooking, =, findFixedParameters, (, parameters, ,, cur, ), ;, }, if, (]
[,, cur, ,, site, ., scope, ), ;, firstCall, =, false, ;, }, else, {, continueLooking, =, findFixedParameters, (, parameters]
[,, site, ., scope, ), ;, firstCall, =, false, ;, }, else, {, continueLooking, =, findFixedParameters, (, parameters, ,, cur]
[), ;, firstCall, =, false, ;, }, else, {, continueLooking, =, findFixedParameters, (, parameters, ,, cur, ), ;, }, if]
[., scope, ), ;, firstCall, =, false, ;, }, else, {, continueLooking, =, findFixedParameters, (, parameters, ,, cur, ), ;]
[=, false, ;, }, else, {, continueLooking, =, findFixedParameters, (, parameters, ,, cur, ), ;, }, if, (, !, continueLooking]
[;, }, else, {, continueLooking, =, findFixedParameters, (, parameters, ,, cur, ), ;, }, if, (, !, continueLooking, ), {]
[=, findFixedParameters, (, parameters, ,, cur, ), ;, }, if, (, !, continueLooking, ), {, return, ;, }, }, continueLooking]
[;, }, if, (, !, continueLooking, ), {, return, ;, }, }, continueLooking, =, adjustForSideEffects, (, parameters, ), ;, if]
[,, cur, ), ;, }, if, (, !, continueLooking, ), {, return, ;, }, }, continueLooking, =, adjustForSideEffects, (, parameters]
[), ;, }, if, (, !, continueLooking, ), {, return, ;, }, }, continueLooking, =, adjustForSideEffects, (, parameters, ), ;]
[), {, return, ;, }, }, continueLooking, =, adjustForSideEffects, (, parameters, ), ;, if, (, !, continueLooking, ), {, return]
[), {, return, ;, }, }, continueLooking, =, adjustForSideEffects, (, parameters, ), ;, if, (, !, continueLooking, ), {, return]
[=, adjustForSideEffects, (, parameters, ), ;, if, (, !, continueLooking, ), {, return, ;, }, for, (, UseSite, site, :]
[;, if, (, !, continueLooking, ), {, return, ;, }, for, (, UseSite, site, :, useSites, ), {, Preconditions, .]
[), ;, if, (, !, continueLooking, ), {, return, ;, }, for, (, UseSite, site, :, useSites, ), {, Preconditions]
[), {, return, ;, }, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite]
[), {, return, ;, }, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite]
[), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node]
[;, Node, call, =, site, ., node, ., getParent, (, ), ;, optimizeCallSite, (, defFinder, ,, parameters, ,, call, )]
[., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (]
[), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, optimizeCallSite, (, defFinder, ,, parameters, ,, call]
[., isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, optimizeCallSite, (]
[), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, optimizeCallSite, (, defFinder, ,, parameters, ,]
[;, optimizeCallSite, (, defFinder, ,, parameters, ,, call, ), ;, }, Node, function, =, definition, ., getRValue, (, ), ;]
[., getParent, (, ), ;, optimizeCallSite, (, defFinder, ,, parameters, ,, call, ), ;, }, Node, function, =, definition, .]
[., node, ., getParent, (, ), ;, optimizeCallSite, (, defFinder, ,, parameters, ,, call, ), ;, }, Node, function, =]
[;, }, Node, function, =, definition, ., getRValue, (, ), ;, if, (, function, ., isFunction, (, ), ), {]
[,, parameters, ,, call, ), ;, }, Node, function, =, definition, ., getRValue, (, ), ;, if, (, function, .]
[,, call, ), ;, }, Node, function, =, definition, ., getRValue, (, ), ;, if, (, function, ., isFunction, (]
[), ;, }, Node, function, =, definition, ., getRValue, (, ), ;, if, (, function, ., isFunction, (, ), )]
[;, if, (, function, ., isFunction, (, ), ), {, optimizeFunctionDefinition, (, parameters, ,, function, ), ;, }, }, private]
[., getRValue, (, ), ;, if, (, function, ., isFunction, (, ), ), {, optimizeFunctionDefinition, (, parameters, ,, function, )]
[), {, optimizeFunctionDefinition, (, parameters, ,, function, ), ;, }, }, private, boolean, adjustForSideEffects, (, List, <, Parameter, >, parameters]
[., isFunction, (, ), ), {, optimizeFunctionDefinition, (, parameters, ,, function, ), ;, }, }, private, boolean, adjustForSideEffects, (, List]
[;, }, }, private, boolean, adjustForSideEffects, (, List, <, Parameter, >, parameters, ), {, boolean, anyMovable, =, false, ;, boolean]
[,, function, ), ;, }, }, private, boolean, adjustForSideEffects, (, List, <, Parameter, >, parameters, ), {, boolean, anyMovable, =]
[), ;, }, }, private, boolean, adjustForSideEffects, (, List, <, Parameter, >, parameters, ), {, boolean, anyMovable, =, false, ;]
[;, boolean, seenUnmovableSideEffects, =, false, ;, boolean, seenUnmoveableSideEfffected, =, false, ;, for, (, int, i, =, parameters, ., size, (]
[;, boolean, seenUnmoveableSideEfffected, =, false, ;, for, (, int, i, =, parameters, ., size, (, ), -, 1, ;, i]
[;, for, (, int, i, =, parameters, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --]
[;, i, >=, 0, ;, i, --, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, Parameter, current, =, parameters, ., get, (, i, )]
[., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, Parameter, current, =, parameters, .]
[;, i, >=, 0, ;, i, --, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if]
[;, i, --, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current, ., shouldRemove]
[>=, 0, ;, i, --, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current]
[;, i, --, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current, ., shouldRemove]
[), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current, ., shouldRemove, &&, (, (]
[--, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current, ., shouldRemove, &&, (]
[;, if, (, current, ., shouldRemove, &&, (, (, seenUnmovableSideEffects, &&, current, ., canBeSideEffected, (, ), ), ||, (, seenUnmoveableSideEfffected]
[., get, (, i, ), ;, if, (, current, ., shouldRemove, &&, (, (, seenUnmovableSideEffects, &&, current, ., canBeSideEffected, (]
[), ;, if, (, current, ., shouldRemove, &&, (, (, seenUnmovableSideEffects, &&, current, ., canBeSideEffected, (, ), ), ||, (]
[), {, current, ., shouldRemove, =, false, ;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =, true, ;]
[&&, (, (, seenUnmovableSideEffects, &&, current, ., canBeSideEffected, (, ), ), ||, (, seenUnmoveableSideEfffected, &&, current, ., hasSideEffects, (, )]
[., shouldRemove, &&, (, (, seenUnmovableSideEffects, &&, current, ., canBeSideEffected, (, ), ), ||, (, seenUnmoveableSideEfffected, &&, current, ., hasSideEffects]
[), {, current, ., shouldRemove, =, false, ;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =, true, ;]
[), ), {, current, ., shouldRemove, =, false, ;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =, true]
[||, (, seenUnmoveableSideEfffected, &&, current, ., hasSideEffects, (, ), ), ), ), {, current, ., shouldRemove, =, false, ;, }]
[), ||, (, seenUnmoveableSideEfffected, &&, current, ., hasSideEffects, (, ), ), ), ), {, current, ., shouldRemove, =, false, ;]
[&&, current, ., canBeSideEffected, (, ), ), ||, (, seenUnmoveableSideEfffected, &&, current, ., hasSideEffects, (, ), ), ), ), {]
[), ||, (, seenUnmoveableSideEfffected, &&, current, ., hasSideEffects, (, ), ), ), ), {, current, ., shouldRemove, =, false, ;]
[., canBeSideEffected, (, ), ), ||, (, seenUnmoveableSideEfffected, &&, current, ., hasSideEffects, (, ), ), ), ), {, current, .]
[), ), {, current, ., shouldRemove, =, false, ;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =, true]
[), ), ), {, current, ., shouldRemove, =, false, ;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =]
[&&, current, ., hasSideEffects, (, ), ), ), ), {, current, ., shouldRemove, =, false, ;, }, if, (, current]
[), ), ), {, current, ., shouldRemove, =, false, ;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =]
[., hasSideEffects, (, ), ), ), ), {, current, ., shouldRemove, =, false, ;, }, if, (, current, ., shouldRemove]
[=, false, ;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =, true, ;, }, else, {, if, (]
[., shouldRemove, =, false, ;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =, true, ;, }, else, {]
[;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =, true, ;, }, else, {, if, (, current, .]
[), {, anyMovable, =, true, ;, }, else, {, if, (, current, ., canBeSideEffected, ), {, seenUnmoveableSideEfffected, =, true, ;]
[., shouldRemove, ), {, anyMovable, =, true, ;, }, else, {, if, (, current, ., canBeSideEffected, ), {, seenUnmoveableSideEfffected, =]
[=, true, ;, }, else, {, if, (, current, ., canBeSideEffected, ), {, seenUnmoveableSideEfffected, =, true, ;, }, if, (]
[;, }, else, {, if, (, current, ., canBeSideEffected, ), {, seenUnmoveableSideEfffected, =, true, ;, }, if, (, current, .]
[), {, seenUnmoveableSideEfffected, =, true, ;, }, if, (, current, ., hasSideEffects, ), {, seenUnmovableSideEffects, =, true, ;, }, }]
[., canBeSideEffected, ), {, seenUnmoveableSideEfffected, =, true, ;, }, if, (, current, ., hasSideEffects, ), {, seenUnmovableSideEffects, =, true, ;]
[=, true, ;, }, if, (, current, ., hasSideEffects, ), {, seenUnmovableSideEffects, =, true, ;, }, }, }, return, anyMovable]
[;, }, if, (, current, ., hasSideEffects, ), {, seenUnmovableSideEffects, =, true, ;, }, }, }, return, anyMovable, ;, }]
[), {, seenUnmovableSideEffects, =, true, ;, }, }, }, return, anyMovable, ;, }, private, boolean, findFixedParameters, (, List, <, Parameter]
[., hasSideEffects, ), {, seenUnmovableSideEffects, =, true, ;, }, }, }, return, anyMovable, ;, }, private, boolean, findFixedParameters, (, List]
[=, true, ;, }, }, }, return, anyMovable, ;, }, private, boolean, findFixedParameters, (, List, <, Parameter, >, parameters, ,]
[;, }, }, }, return, anyMovable, ;, }, private, boolean, findFixedParameters, (, List, <, Parameter, >, parameters, ,, Node, cur]
[;, }, private, boolean, findFixedParameters, (, List, <, Parameter, >, parameters, ,, Node, cur, ), {, boolean, anyMovable, =, false]
[;, int, index, =, 0, ;, while, (, (, cur, =, cur, ., getNext, (, ), ), !=, null, )]
[;, while, (, (, cur, =, cur, ., getNext, (, ), ), !=, null, ), {, Parameter, p, ;, if]
[), {, Parameter, p, ;, if, (, index, >=, parameters, ., size, (, ), ), {, p, =, new, Parameter]
[!=, null, ), {, Parameter, p, ;, if, (, index, >=, parameters, ., size, (, ), ), {, p, =]
[=, cur, ., getNext, (, ), ), !=, null, ), {, Parameter, p, ;, if, (, index, >=, parameters, .]
[), !=, null, ), {, Parameter, p, ;, if, (, index, >=, parameters, ., size, (, ), ), {, p]
[., getNext, (, ), ), !=, null, ), {, Parameter, p, ;, if, (, index, >=, parameters, ., size, (]
[), {, Parameter, p, ;, if, (, index, >=, parameters, ., size, (, ), ), {, p, =, new, Parameter]
[), {, p, =, new, Parameter, (, cur, ,, false, ), ;, parameters, ., add, (, p, ), ;, }]
[>=, parameters, ., size, (, ), ), {, p, =, new, Parameter, (, cur, ,, false, ), ;, parameters, .]
[), {, p, =, new, Parameter, (, cur, ,, false, ), ;, parameters, ., add, (, p, ), ;, }]
[., size, (, ), ), {, p, =, new, Parameter, (, cur, ,, false, ), ;, parameters, ., add, (]
[=, new, Parameter, (, cur, ,, false, ), ;, parameters, ., add, (, p, ), ;, }, else, {, p]
[;, parameters, ., add, (, p, ), ;, }, else, {, p, =, parameters, ., get, (, index, ), ;]
[,, false, ), ;, parameters, ., add, (, p, ), ;, }, else, {, p, =, parameters, ., get, (]
[), ;, parameters, ., add, (, p, ), ;, }, else, {, p, =, parameters, ., get, (, index, )]
[;, }, else, {, p, =, parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove, (, )]
[., add, (, p, ), ;, }, else, {, p, =, parameters, ., get, (, index, ), ;, if, (]
[), ;, }, else, {, p, =, parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove, (]
[=, parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove, (, ), ), {, Node, value, =]
[;, if, (, p, ., shouldRemove, (, ), ), {, Node, value, =, p, ., getArg, (, ), ;, if]
[., get, (, index, ), ;, if, (, p, ., shouldRemove, (, ), ), {, Node, value, =, p, .]
[), ;, if, (, p, ., shouldRemove, (, ), ), {, Node, value, =, p, ., getArg, (, ), ;]
[), {, Node, value, =, p, ., getArg, (, ), ;, if, (, !, cur, ., isEquivalentTo, (, value, )]
[., shouldRemove, (, ), ), {, Node, value, =, p, ., getArg, (, ), ;, if, (, !, cur, .]
[;, if, (, !, cur, ., isEquivalentTo, (, value, ), ), {, p, ., setShouldRemove, (, false, ), ;, }]
[., getArg, (, ), ;, if, (, !, cur, ., isEquivalentTo, (, value, ), ), {, p, ., setShouldRemove, (]
[), {, p, ., setShouldRemove, (, false, ), ;, }, else, {, anyMovable, =, true, ;, }, }, }, setParameterSideEffectInfo]
[), {, p, ., setShouldRemove, (, false, ), ;, }, else, {, anyMovable, =, true, ;, }, }, }, setParameterSideEffectInfo]
[., isEquivalentTo, (, value, ), ), {, p, ., setShouldRemove, (, false, ), ;, }, else, {, anyMovable, =, true]
[), ), {, p, ., setShouldRemove, (, false, ), ;, }, else, {, anyMovable, =, true, ;, }, }, }]
[;, }, else, {, anyMovable, =, true, ;, }, }, }, setParameterSideEffectInfo, (, p, ,, cur, ), ;, index, ++]
[., setShouldRemove, (, false, ), ;, }, else, {, anyMovable, =, true, ;, }, }, }, setParameterSideEffectInfo, (, p, ,]
[), ;, }, else, {, anyMovable, =, true, ;, }, }, }, setParameterSideEffectInfo, (, p, ,, cur, ), ;, index]
[=, true, ;, }, }, }, setParameterSideEffectInfo, (, p, ,, cur, ), ;, index, ++, ;, }, for, (, ;]
[;, }, }, }, setParameterSideEffectInfo, (, p, ,, cur, ), ;, index, ++, ;, }, for, (, ;, index, <]
[;, index, ++, ;, }, for, (, ;, index, <, parameters, ., size, (, ), ;, index, ++, ), {]
[,, cur, ), ;, index, ++, ;, }, for, (, ;, index, <, parameters, ., size, (, ), ;, index]
[), ;, index, ++, ;, }, for, (, ;, index, <, parameters, ., size, (, ), ;, index, ++, )]
[;, }, for, (, ;, index, <, parameters, ., size, (, ), ;, index, ++, ), {, parameters, ., get]
[++, ;, }, for, (, ;, index, <, parameters, ., size, (, ), ;, index, ++, ), {, parameters, .]
[;, index, ++, ), {, parameters, ., get, (, index, ), ., setShouldRemove, (, false, ), ;, }, return, anyMovable]
[<, parameters, ., size, (, ), ;, index, ++, ), {, parameters, ., get, (, index, ), ., setShouldRemove, (]
[;, index, ++, ), {, parameters, ., get, (, index, ), ., setShouldRemove, (, false, ), ;, }, return, anyMovable]
[., size, (, ), ;, index, ++, ), {, parameters, ., get, (, index, ), ., setShouldRemove, (, false, )]
[), {, parameters, ., get, (, index, ), ., setShouldRemove, (, false, ), ;, }, return, anyMovable, ;, }, private]
[++, ), {, parameters, ., get, (, index, ), ., setShouldRemove, (, false, ), ;, }, return, anyMovable, ;, }]
[;, }, return, anyMovable, ;, }, private, boolean, buildParameterList, (, List, <, Parameter, >, parameters, ,, Node, cur, ,, Scope]
[., setShouldRemove, (, false, ), ;, }, return, anyMovable, ;, }, private, boolean, buildParameterList, (, List, <, Parameter, >, parameters]
[., get, (, index, ), ., setShouldRemove, (, false, ), ;, }, return, anyMovable, ;, }, private, boolean, buildParameterList, (]
[), ., setShouldRemove, (, false, ), ;, }, return, anyMovable, ;, }, private, boolean, buildParameterList, (, List, <, Parameter, >]
[), ;, }, return, anyMovable, ;, }, private, boolean, buildParameterList, (, List, <, Parameter, >, parameters, ,, Node, cur, ,]
[;, }, private, boolean, buildParameterList, (, List, <, Parameter, >, parameters, ,, Node, cur, ,, Scope, s, ), {, boolean]
[;, while, (, (, cur, =, cur, ., getNext, (, ), ), !=, null, ), {, boolean, movable, =, isMovableValue]
[), {, boolean, movable, =, isMovableValue, (, cur, ,, s, ), ;, Parameter, p, =, new, Parameter, (, cur, ,]
[!=, null, ), {, boolean, movable, =, isMovableValue, (, cur, ,, s, ), ;, Parameter, p, =, new, Parameter, (]
[=, cur, ., getNext, (, ), ), !=, null, ), {, boolean, movable, =, isMovableValue, (, cur, ,, s, )]
[), !=, null, ), {, boolean, movable, =, isMovableValue, (, cur, ,, s, ), ;, Parameter, p, =, new, Parameter]
[., getNext, (, ), ), !=, null, ), {, boolean, movable, =, isMovableValue, (, cur, ,, s, ), ;, Parameter]
[), {, boolean, movable, =, isMovableValue, (, cur, ,, s, ), ;, Parameter, p, =, new, Parameter, (, cur, ,]
[;, Parameter, p, =, new, Parameter, (, cur, ,, movable, ), ;, setParameterSideEffectInfo, (, p, ,, cur, ), ;, parameters]
[,, s, ), ;, Parameter, p, =, new, Parameter, (, cur, ,, movable, ), ;, setParameterSideEffectInfo, (, p, ,, cur]
[), ;, Parameter, p, =, new, Parameter, (, cur, ,, movable, ), ;, setParameterSideEffectInfo, (, p, ,, cur, ), ;]
[;, setParameterSideEffectInfo, (, p, ,, cur, ), ;, parameters, ., add, (, p, ), ;, if, (, movable, ), {]
[,, movable, ), ;, setParameterSideEffectInfo, (, p, ,, cur, ), ;, parameters, ., add, (, p, ), ;, if, (]
[), ;, setParameterSideEffectInfo, (, p, ,, cur, ), ;, parameters, ., add, (, p, ), ;, if, (, movable, )]
[;, parameters, ., add, (, p, ), ;, if, (, movable, ), {, anyMovable, =, true, ;, }, }, return]
[,, cur, ), ;, parameters, ., add, (, p, ), ;, if, (, movable, ), {, anyMovable, =, true, ;]
[), ;, parameters, ., add, (, p, ), ;, if, (, movable, ), {, anyMovable, =, true, ;, }, }]
[;, if, (, movable, ), {, anyMovable, =, true, ;, }, }, return, anyMovable, ;, }, private, void, setParameterSideEffectInfo, (]
[., add, (, p, ), ;, if, (, movable, ), {, anyMovable, =, true, ;, }, }, return, anyMovable, ;]
[), ;, if, (, movable, ), {, anyMovable, =, true, ;, }, }, return, anyMovable, ;, }, private, void, setParameterSideEffectInfo]
[), {, anyMovable, =, true, ;, }, }, return, anyMovable, ;, }, private, void, setParameterSideEffectInfo, (, Parameter, p, ,, Node]
[=, true, ;, }, }, return, anyMovable, ;, }, private, void, setParameterSideEffectInfo, (, Parameter, p, ,, Node, value, ), {]
[;, }, }, return, anyMovable, ;, }, private, void, setParameterSideEffectInfo, (, Parameter, p, ,, Node, value, ), {, if, (]
[;, }, private, void, setParameterSideEffectInfo, (, Parameter, p, ,, Node, value, ), {, if, (, !, p, ., hasSideEffects, (]
[), {, p, ., setHasSideEffects, (, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ;, }, if, (, !]
[), {, p, ., setHasSideEffects, (, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ;, }, if, (, !]
[., hasSideEffects, (, ), ), {, p, ., setHasSideEffects, (, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ;]
[;, }, if, (, !, p, ., canBeSideEffected, (, ), ), {, p, ., setCanBeSideEffected, (, NodeUtil, ., canBeSideEffected, (]
[., setHasSideEffects, (, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ;, }, if, (, !, p, ., canBeSideEffected]
[), ;, }, if, (, !, p, ., canBeSideEffected, (, ), ), {, p, ., setCanBeSideEffected, (, NodeUtil, ., canBeSideEffected]
[., mayHaveSideEffects, (, value, ,, compiler, ), ), ;, }, if, (, !, p, ., canBeSideEffected, (, ), ), {]
[,, compiler, ), ), ;, }, if, (, !, p, ., canBeSideEffected, (, ), ), {, p, ., setCanBeSideEffected, (]
[), ), ;, }, if, (, !, p, ., canBeSideEffected, (, ), ), {, p, ., setCanBeSideEffected, (, NodeUtil, .]
[), {, p, ., setCanBeSideEffected, (, NodeUtil, ., canBeSideEffected, (, value, ), ), ;, }, }, private, boolean, isMovableValue, (]
[), {, p, ., setCanBeSideEffected, (, NodeUtil, ., canBeSideEffected, (, value, ), ), ;, }, }, private, boolean, isMovableValue, (]
[., canBeSideEffected, (, ), ), {, p, ., setCanBeSideEffected, (, NodeUtil, ., canBeSideEffected, (, value, ), ), ;, }, }]
[;, }, }, private, boolean, isMovableValue, (, Node, n, ,, Scope, s, ), {, switch, (, n, ., getType, (]
[., setCanBeSideEffected, (, NodeUtil, ., canBeSideEffected, (, value, ), ), ;, }, }, private, boolean, isMovableValue, (, Node, n, ,]
[), ;, }, }, private, boolean, isMovableValue, (, Node, n, ,, Scope, s, ), {, switch, (, n, ., getType]
[., canBeSideEffected, (, value, ), ), ;, }, }, private, boolean, isMovableValue, (, Node, n, ,, Scope, s, ), {]
[), ), ;, }, }, private, boolean, isMovableValue, (, Node, n, ,, Scope, s, ), {, switch, (, n, .]
[), {, case, Token, ., THIS, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token]
[., getType, (, ), ), {, case, Token, ., THIS, :, return, false, ;, case, Token, ., FUNCTION, :, return]
[:, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., NAME, :, if, (, n]
[., THIS, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., NAME, :, if]
[;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., NAME, :, if, (, n, ., getString, (]
[:, return, false, ;, case, Token, ., NAME, :, if, (, n, ., getString, (, ), ., equals, (, "arguments"]
[., FUNCTION, :, return, false, ;, case, Token, ., NAME, :, if, (, n, ., getString, (, ), ., equals]
[;, case, Token, ., NAME, :, if, (, n, ., getString, (, ), ., equals, (, "arguments", ), ), {]
[:, if, (, n, ., getString, (, ), ., equals, (, "arguments", ), ), {, return, false, ;, }, else]
[., NAME, :, if, (, n, ., getString, (, ), ., equals, (, "arguments", ), ), {, return, false, ;]
[), {, return, false, ;, }, else, {, Var, v, =, s, ., getVar, (, n, ., getString, (, )]
[., equals, (, "arguments", ), ), {, return, false, ;, }, else, {, Var, v, =, s, ., getVar, (]
[., getString, (, ), ., equals, (, "arguments", ), ), {, return, false, ;, }, else, {, Var, v, =]
[), ), {, return, false, ;, }, else, {, Var, v, =, s, ., getVar, (, n, ., getString, (]
[;, }, else, {, Var, v, =, s, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[;, if, (, v, !=, null, &&, (, v, ., isLocal, (, ), ||, v, ., nameNode, ., getParent, (]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, v, !=, null, &&, (, v, ., isLocal]
[), ;, if, (, v, !=, null, &&, (, v, ., isLocal, (, ), ||, v, ., nameNode, ., getParent]
[., getString, (, ), ), ;, if, (, v, !=, null, &&, (, v, ., isLocal, (, ), ||, v]
[), {, return, false, ;, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, )]
[&&, (, v, ., isLocal, (, ), ||, v, ., nameNode, ., getParent, (, ), ., isCatch, (, ), )]
[!=, null, &&, (, v, ., isLocal, (, ), ||, v, ., nameNode, ., getParent, (, ), ., isCatch, (]
[&&, (, v, ., isLocal, (, ), ||, v, ., nameNode, ., getParent, (, ), ., isCatch, (, ), )]
[), {, return, false, ;, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, )]
[), ), {, return, false, ;, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (]
[||, v, ., nameNode, ., getParent, (, ), ., isCatch, (, ), ), ), {, return, false, ;, }, }]
[., isLocal, (, ), ||, v, ., nameNode, ., getParent, (, ), ., isCatch, (, ), ), ), {, return]
[), ), {, return, false, ;, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (]
[., isCatch, (, ), ), ), {, return, false, ;, }, }, break, ;, }, for, (, Node, c, =]
[., getParent, (, ), ., isCatch, (, ), ), ), {, return, false, ;, }, }, break, ;, }, for]
[., nameNode, ., getParent, (, ), ., isCatch, (, ), ), ), {, return, false, ;, }, }, break, ;]
[;, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, !, isMovableValue, (, c]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[;, c, =, c, ., getNext, (, ), ), {, if, (, !, isMovableValue, (, c, ,, s, ), )]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, !, isMovableValue, (, c, ,, s]
[;, c, =, c, ., getNext, (, ), ), {, if, (, !, isMovableValue, (, c, ,, s, ), )]
[=, c, ., getNext, (, ), ), {, if, (, !, isMovableValue, (, c, ,, s, ), ), {, return]
[), {, if, (, !, isMovableValue, (, c, ,, s, ), ), {, return, false, ;, }, }, return, true]
[., getNext, (, ), ), {, if, (, !, isMovableValue, (, c, ,, s, ), ), {, return, false, ;]
[), {, return, false, ;, }, }, return, true, ;, }, private, void, optimizeFunctionDefinition, (, List, <, Parameter, >, parameters]
[), {, return, false, ;, }, }, return, true, ;, }, private, void, optimizeFunctionDefinition, (, List, <, Parameter, >, parameters]
[,, s, ), ), {, return, false, ;, }, }, return, true, ;, }, private, void, optimizeFunctionDefinition, (, List, <]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, void, optimizeFunctionDefinition, (, List, <, Parameter, >]
[;, }, }, return, true, ;, }, private, void, optimizeFunctionDefinition, (, List, <, Parameter, >, parameters, ,, Node, function, )]
[;, }, private, void, optimizeFunctionDefinition, (, List, <, Parameter, >, parameters, ,, Node, function, ), {, for, (, int, index]
[;, index, >=, 0, ;, index, --, ), {, if, (, parameters, ., get, (, index, ), ., shouldRemove, (]
[-, 1, ;, index, >=, 0, ;, index, --, ), {, if, (, parameters, ., get, (, index, ), .]
[., size, (, ), -, 1, ;, index, >=, 0, ;, index, --, ), {, if, (, parameters, ., get]
[;, index, >=, 0, ;, index, --, ), {, if, (, parameters, ., get, (, index, ), ., shouldRemove, (]
[;, index, --, ), {, if, (, parameters, ., get, (, index, ), ., shouldRemove, (, ), ), {, Node]
[>=, 0, ;, index, --, ), {, if, (, parameters, ., get, (, index, ), ., shouldRemove, (, ), )]
[;, index, --, ), {, if, (, parameters, ., get, (, index, ), ., shouldRemove, (, ), ), {, Node]
[), {, if, (, parameters, ., get, (, index, ), ., shouldRemove, (, ), ), {, Node, paramName, =, eliminateFunctionParamAt]
[--, ), {, if, (, parameters, ., get, (, index, ), ., shouldRemove, (, ), ), {, Node, paramName, =]
[), {, Node, paramName, =, eliminateFunctionParamAt, (, function, ,, index, ), ;, addVariableToFunction, (, function, ,, paramName, ,, parameters, .]
[., shouldRemove, (, ), ), {, Node, paramName, =, eliminateFunctionParamAt, (, function, ,, index, ), ;, addVariableToFunction, (, function, ,]
[., get, (, index, ), ., shouldRemove, (, ), ), {, Node, paramName, =, eliminateFunctionParamAt, (, function, ,, index, )]
[), ., shouldRemove, (, ), ), {, Node, paramName, =, eliminateFunctionParamAt, (, function, ,, index, ), ;, addVariableToFunction, (, function]
[;, addVariableToFunction, (, function, ,, paramName, ,, parameters, ., get, (, index, ), ., getArg, (, ), ), ;, }]
[,, index, ), ;, addVariableToFunction, (, function, ,, paramName, ,, parameters, ., get, (, index, ), ., getArg, (, )]
[), ;, addVariableToFunction, (, function, ,, paramName, ,, parameters, ., get, (, index, ), ., getArg, (, ), ), ;]
[;, }, }, }, private, void, optimizeCallSite, (, SimpleDefinitionFinder, defFinder, ,, List, <, Parameter, >, parameters, ,, Node, call, )]
[,, paramName, ,, parameters, ., get, (, index, ), ., getArg, (, ), ), ;, }, }, }, private, void]
[,, parameters, ., get, (, index, ), ., getArg, (, ), ), ;, }, }, }, private, void, optimizeCallSite, (]
[), ;, }, }, }, private, void, optimizeCallSite, (, SimpleDefinitionFinder, defFinder, ,, List, <, Parameter, >, parameters, ,, Node, call]
[., getArg, (, ), ), ;, }, }, }, private, void, optimizeCallSite, (, SimpleDefinitionFinder, defFinder, ,, List, <, Parameter, >]
[., get, (, index, ), ., getArg, (, ), ), ;, }, }, }, private, void, optimizeCallSite, (, SimpleDefinitionFinder, defFinder]
[), ., getArg, (, ), ), ;, }, }, }, private, void, optimizeCallSite, (, SimpleDefinitionFinder, defFinder, ,, List, <, Parameter]
[;, index, >=, 0, ;, index, --, ), {, Parameter, p, =, parameters, ., get, (, index, ), ;, if]
[-, 1, ;, index, >=, 0, ;, index, --, ), {, Parameter, p, =, parameters, ., get, (, index, )]
[., size, (, ), -, 1, ;, index, >=, 0, ;, index, --, ), {, Parameter, p, =, parameters, .]
[;, index, >=, 0, ;, index, --, ), {, Parameter, p, =, parameters, ., get, (, index, ), ;, if]
[;, index, --, ), {, Parameter, p, =, parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove]
[>=, 0, ;, index, --, ), {, Parameter, p, =, parameters, ., get, (, index, ), ;, if, (, p]
[;, index, --, ), {, Parameter, p, =, parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove]
[), {, Parameter, p, =, parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove, (, ), )]
[--, ), {, Parameter, p, =, parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove, (, )]
[;, if, (, p, ., shouldRemove, (, ), ), {, eliminateCallParamAt, (, defFinder, ,, p, ,, call, ,, index, )]
[., get, (, index, ), ;, if, (, p, ., shouldRemove, (, ), ), {, eliminateCallParamAt, (, defFinder, ,, p]
[), ;, if, (, p, ., shouldRemove, (, ), ), {, eliminateCallParamAt, (, defFinder, ,, p, ,, call, ,, index]
[), {, eliminateCallParamAt, (, defFinder, ,, p, ,, call, ,, index, ), ;, }, }, }, private, static, class, Parameter]
[., shouldRemove, (, ), ), {, eliminateCallParamAt, (, defFinder, ,, p, ,, call, ,, index, ), ;, }, }, }]
[;, }, }, }, private, static, class, Parameter, {, private, final, Node, arg, ;, private, boolean, shouldRemove, ;, private, boolean]
[,, p, ,, call, ,, index, ), ;, }, }, }, private, static, class, Parameter, {, private, final, Node, arg]
[,, call, ,, index, ), ;, }, }, }, private, static, class, Parameter, {, private, final, Node, arg, ;, private]
[,, index, ), ;, }, }, }, private, static, class, Parameter, {, private, final, Node, arg, ;, private, boolean, shouldRemove]
[), ;, }, }, }, private, static, class, Parameter, {, private, final, Node, arg, ;, private, boolean, shouldRemove, ;, private]
[=, shouldRemove, ;, this, ., arg, =, arg, ;, }, public, Node, getArg, (, ), {, return, arg, ;, }]
[., shouldRemove, =, shouldRemove, ;, this, ., arg, =, arg, ;, }, public, Node, getArg, (, ), {, return, arg]
[;, this, ., arg, =, arg, ;, }, public, Node, getArg, (, ), {, return, arg, ;, }, public, boolean]
[=, arg, ;, }, public, Node, getArg, (, ), {, return, arg, ;, }, public, boolean, shouldRemove, (, ), {]
[., arg, =, arg, ;, }, public, Node, getArg, (, ), {, return, arg, ;, }, public, boolean, shouldRemove, (]
[;, }, public, Node, getArg, (, ), {, return, arg, ;, }, public, boolean, shouldRemove, (, ), {, return, shouldRemove]
[;, }, public, boolean, shouldRemove, (, ), {, return, shouldRemove, ;, }, public, void, setShouldRemove, (, boolean, value, ), {]
[;, }, public, void, setShouldRemove, (, boolean, value, ), {, shouldRemove, =, value, ;, }, public, void, setHasSideEffects, (, boolean]
[=, value, ;, }, public, void, setHasSideEffects, (, boolean, hasSideEffects, ), {, this, ., hasSideEffects, =, hasSideEffects, ;, }, public]
[;, }, public, void, setHasSideEffects, (, boolean, hasSideEffects, ), {, this, ., hasSideEffects, =, hasSideEffects, ;, }, public, boolean, hasSideEffects]
[=, hasSideEffects, ;, }, public, boolean, hasSideEffects, (, ), {, return, hasSideEffects, ;, }, public, void, setCanBeSideEffected, (, boolean, canBeSideEffected]
[., hasSideEffects, =, hasSideEffects, ;, }, public, boolean, hasSideEffects, (, ), {, return, hasSideEffects, ;, }, public, void, setCanBeSideEffected, (]
[;, }, public, boolean, hasSideEffects, (, ), {, return, hasSideEffects, ;, }, public, void, setCanBeSideEffected, (, boolean, canBeSideEffected, ), {]
[;, }, public, void, setCanBeSideEffected, (, boolean, canBeSideEffected, ), {, this, ., canBeSideEffected, =, canBeSideEffected, ;, }, public, boolean, canBeSideEffected]
[=, canBeSideEffected, ;, }, public, boolean, canBeSideEffected, (, ), {, return, canBeSideEffected, ;, }, }, private, void, addVariableToFunction, (, Node]
[., canBeSideEffected, =, canBeSideEffected, ;, }, public, boolean, canBeSideEffected, (, ), {, return, canBeSideEffected, ;, }, }, private, void, addVariableToFunction]
[;, }, public, boolean, canBeSideEffected, (, ), {, return, canBeSideEffected, ;, }, }, private, void, addVariableToFunction, (, Node, function, ,]
[;, }, }, private, void, addVariableToFunction, (, Node, function, ,, Node, varName, ,, Node, value, ), {, Preconditions, ., checkArgument]
[;, Node, block, =, function, ., getLastChild, (, ), ;, Preconditions, ., checkArgument, (, block, ., isBlock, (, ), ,]
[., checkArgument, (, function, ., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, block, =, function, ., getLastChild, (, )]
[,, "Node must be a function.", ), ;, Node, block, =, function, ., getLastChild, (, ), ;, Preconditions, ., checkArgument, (, block, ., isBlock]
[., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, block, =, function, ., getLastChild, (, ), ;, Preconditions, ., checkArgument]
[), ;, Node, block, =, function, ., getLastChild, (, ), ;, Preconditions, ., checkArgument, (, block, ., isBlock, (, )]
[;, Preconditions, ., checkArgument, (, block, ., isBlock, (, ), ,, "Node must be a block.", ), ;, Preconditions, ., checkState, (, value, .]
[., getLastChild, (, ), ;, Preconditions, ., checkArgument, (, block, ., isBlock, (, ), ,, "Node must be a block.", ), ;, Preconditions, .]
[;, Preconditions, ., checkState, (, value, ., getParent, (, ), ==, null, ), ;, Node, stmt, ;, if, (, varName]
[., checkArgument, (, block, ., isBlock, (, ), ,, "Node must be a block.", ), ;, Preconditions, ., checkState, (, value, ., getParent, (]
[,, "Node must be a block.", ), ;, Preconditions, ., checkState, (, value, ., getParent, (, ), ==, null, ), ;, Node, stmt, ;]
[., isBlock, (, ), ,, "Node must be a block.", ), ;, Preconditions, ., checkState, (, value, ., getParent, (, ), ==, null, )]
[), ;, Preconditions, ., checkState, (, value, ., getParent, (, ), ==, null, ), ;, Node, stmt, ;, if, (]
[;, Node, stmt, ;, if, (, varName, !=, null, ), {, stmt, =, NodeUtil, ., newVarNode, (, varName, ., getString]
[., checkState, (, value, ., getParent, (, ), ==, null, ), ;, Node, stmt, ;, if, (, varName, !=, null]
[), ;, Node, stmt, ;, if, (, varName, !=, null, ), {, stmt, =, NodeUtil, ., newVarNode, (, varName, .]
[==, null, ), ;, Node, stmt, ;, if, (, varName, !=, null, ), {, stmt, =, NodeUtil, ., newVarNode, (]
[., getParent, (, ), ==, null, ), ;, Node, stmt, ;, if, (, varName, !=, null, ), {, stmt, =]
[), ;, Node, stmt, ;, if, (, varName, !=, null, ), {, stmt, =, NodeUtil, ., newVarNode, (, varName, .]
[), {, stmt, =, NodeUtil, ., newVarNode, (, varName, ., getString, (, ), ,, value, ), ;, }, else, {]
[!=, null, ), {, stmt, =, NodeUtil, ., newVarNode, (, varName, ., getString, (, ), ,, value, ), ;, }]
[), {, stmt, =, NodeUtil, ., newVarNode, (, varName, ., getString, (, ), ,, value, ), ;, }, else, {]
[=, NodeUtil, ., newVarNode, (, varName, ., getString, (, ), ,, value, ), ;, }, else, {, stmt, =, IR]
[;, }, else, {, stmt, =, IR, ., exprResult, (, value, ), ;, }, block, ., addChildToFront, (, stmt, )]
[., newVarNode, (, varName, ., getString, (, ), ,, value, ), ;, }, else, {, stmt, =, IR, ., exprResult]
[,, value, ), ;, }, else, {, stmt, =, IR, ., exprResult, (, value, ), ;, }, block, ., addChildToFront]
[., getString, (, ), ,, value, ), ;, }, else, {, stmt, =, IR, ., exprResult, (, value, ), ;]
[), ;, }, else, {, stmt, =, IR, ., exprResult, (, value, ), ;, }, block, ., addChildToFront, (, stmt]
[=, IR, ., exprResult, (, value, ), ;, }, block, ., addChildToFront, (, stmt, ), ;, compiler, ., reportCodeChange, (]
[;, }, block, ., addChildToFront, (, stmt, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, eliminateParamsAfter, (]
[., exprResult, (, value, ), ;, }, block, ., addChildToFront, (, stmt, ), ;, compiler, ., reportCodeChange, (, ), ;]
[), ;, }, block, ., addChildToFront, (, stmt, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, eliminateParamsAfter]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, function, ,, int, argIndex, ), {, boolean]
[., addChildToFront, (, stmt, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, function, ,]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, function, ,, int, argIndex, ), {]
[;, }, private, boolean, eliminateParamsAfter, (, Node, function, ,, int, argIndex, ), {, boolean, paramRemoved, =, false, ;, Node, formalArgPtr]
[., reportCodeChange, (, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, function, ,, int, argIndex, ), {, boolean, paramRemoved, =]
[;, Node, formalArgPtr, =, function, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, while, (]
[;, while, (, argIndex, !=, 0, &&, formalArgPtr, !=, null, ), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;]
[., getFirstChild, (, ), ;, while, (, argIndex, !=, 0, &&, formalArgPtr, !=, null, ), {, formalArgPtr, =, formalArgPtr, .]
[., getNext, (, ), ., getFirstChild, (, ), ;, while, (, argIndex, !=, 0, &&, formalArgPtr, !=, null, ), {]
[., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, while, (, argIndex, !=, 0, &&, formalArgPtr]
[), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;, argIndex, --, ;, }, return, eliminateParamsAfter, (, function, ,, formalArgPtr]
[&&, formalArgPtr, !=, null, ), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;, argIndex, --, ;, }, return, eliminateParamsAfter]
[!=, 0, &&, formalArgPtr, !=, null, ), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;, argIndex, --, ;, }]
[&&, formalArgPtr, !=, null, ), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;, argIndex, --, ;, }, return, eliminateParamsAfter]
[), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;, argIndex, --, ;, }, return, eliminateParamsAfter, (, function, ,, formalArgPtr]
[!=, null, ), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;, argIndex, --, ;, }, return, eliminateParamsAfter, (, function]
[), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;, argIndex, --, ;, }, return, eliminateParamsAfter, (, function, ,, formalArgPtr]
[=, formalArgPtr, ., getNext, (, ), ;, argIndex, --, ;, }, return, eliminateParamsAfter, (, function, ,, formalArgPtr, ), ;, }]
[;, argIndex, --, ;, }, return, eliminateParamsAfter, (, function, ,, formalArgPtr, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, fnNode]
[., getNext, (, ), ;, argIndex, --, ;, }, return, eliminateParamsAfter, (, function, ,, formalArgPtr, ), ;, }, private, boolean]
[;, }, return, eliminateParamsAfter, (, function, ,, formalArgPtr, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, fnNode, ,, Node, argNode]
[--, ;, }, return, eliminateParamsAfter, (, function, ,, formalArgPtr, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, fnNode, ,, Node]
[;, }, private, boolean, eliminateParamsAfter, (, Node, fnNode, ,, Node, argNode, ), {, if, (, argNode, !=, null, ), {]
[,, formalArgPtr, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, fnNode, ,, Node, argNode, ), {, if, (, argNode, !=]
[), ;, }, private, boolean, eliminateParamsAfter, (, Node, fnNode, ,, Node, argNode, ), {, if, (, argNode, !=, null, )]
[), {, eliminateParamsAfter, (, fnNode, ,, argNode, ., getNext, (, ), ), ;, argNode, ., detachFromParent, (, ), ;, Node]
[!=, null, ), {, eliminateParamsAfter, (, fnNode, ,, argNode, ., getNext, (, ), ), ;, argNode, ., detachFromParent, (, )]
[), {, eliminateParamsAfter, (, fnNode, ,, argNode, ., getNext, (, ), ), ;, argNode, ., detachFromParent, (, ), ;, Node]
[;, argNode, ., detachFromParent, (, ), ;, Node, var, =, IR, ., var, (, argNode, ), ., copyInformationFrom, (, argNode]
[,, argNode, ., getNext, (, ), ), ;, argNode, ., detachFromParent, (, ), ;, Node, var, =, IR, ., var]
[), ;, argNode, ., detachFromParent, (, ), ;, Node, var, =, IR, ., var, (, argNode, ), ., copyInformationFrom, (]
[., getNext, (, ), ), ;, argNode, ., detachFromParent, (, ), ;, Node, var, =, IR, ., var, (, argNode]
[;, Node, var, =, IR, ., var, (, argNode, ), ., copyInformationFrom, (, argNode, ), ;, fnNode, ., getLastChild, (]
[., detachFromParent, (, ), ;, Node, var, =, IR, ., var, (, argNode, ), ., copyInformationFrom, (, argNode, ), ;]
[;, fnNode, ., getLastChild, (, ), ., addChildrenToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, return, true]
[., copyInformationFrom, (, argNode, ), ;, fnNode, ., getLastChild, (, ), ., addChildrenToFront, (, var, ), ;, compiler, ., reportCodeChange]
[., var, (, argNode, ), ., copyInformationFrom, (, argNode, ), ;, fnNode, ., getLastChild, (, ), ., addChildrenToFront, (, var]
[), ., copyInformationFrom, (, argNode, ), ;, fnNode, ., getLastChild, (, ), ., addChildrenToFront, (, var, ), ;, compiler, .]
[), ;, fnNode, ., getLastChild, (, ), ., addChildrenToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, return]
[;, compiler, ., reportCodeChange, (, ), ;, return, true, ;, }, return, false, ;, }, private, Node, eliminateFunctionParamAt, (, Node]
[., addChildrenToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, return, true, ;, }, return, false, ;, }]
[., getLastChild, (, ), ., addChildrenToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, return, true, ;, }]
[), ;, compiler, ., reportCodeChange, (, ), ;, return, true, ;, }, return, false, ;, }, private, Node, eliminateFunctionParamAt, (]
[;, return, true, ;, }, return, false, ;, }, private, Node, eliminateFunctionParamAt, (, Node, function, ,, int, argIndex, ), {]
[., reportCodeChange, (, ), ;, return, true, ;, }, return, false, ;, }, private, Node, eliminateFunctionParamAt, (, Node, function, ,]
[;, }, return, false, ;, }, private, Node, eliminateFunctionParamAt, (, Node, function, ,, int, argIndex, ), {, Preconditions, ., checkArgument]
[;, }, private, Node, eliminateFunctionParamAt, (, Node, function, ,, int, argIndex, ), {, Preconditions, ., checkArgument, (, function, ., isFunction]
[;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {]
[., checkArgument, (, function, ., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function]
[,, "Node must be a function.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,, argIndex, ), ;, if, (, formalArgPtr, !=]
[., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,, argIndex, ), ;]
[), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, )]
[;, if, (, formalArgPtr, !=, null, ), {, function, ., getFirstChild, (, ), ., getNext, (, ), ., removeChild, (]
[., getArgumentForFunction, (, function, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {, function, ., getFirstChild, (, )]
[,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {, function, ., getFirstChild, (, ), ., getNext, (, )]
[), ;, if, (, formalArgPtr, !=, null, ), {, function, ., getFirstChild, (, ), ., getNext, (, ), ., removeChild]
[), {, function, ., getFirstChild, (, ), ., getNext, (, ), ., removeChild, (, formalArgPtr, ), ;, }, return, formalArgPtr]
[!=, null, ), {, function, ., getFirstChild, (, ), ., getNext, (, ), ., removeChild, (, formalArgPtr, ), ;, }]
[), {, function, ., getFirstChild, (, ), ., getNext, (, ), ., removeChild, (, formalArgPtr, ), ;, }, return, formalArgPtr]
[;, }, return, formalArgPtr, ;, }, private, Node, eliminateCallParamAt, (, SimpleDefinitionFinder, defFinder, ,, Parameter, p, ,, Node, call, ,, int]
[., removeChild, (, formalArgPtr, ), ;, }, return, formalArgPtr, ;, }, private, Node, eliminateCallParamAt, (, SimpleDefinitionFinder, defFinder, ,, Parameter, p]
[., getNext, (, ), ., removeChild, (, formalArgPtr, ), ;, }, return, formalArgPtr, ;, }, private, Node, eliminateCallParamAt, (, SimpleDefinitionFinder]
[., getFirstChild, (, ), ., getNext, (, ), ., removeChild, (, formalArgPtr, ), ;, }, return, formalArgPtr, ;, }, private]
[), ;, }, return, formalArgPtr, ;, }, private, Node, eliminateCallParamAt, (, SimpleDefinitionFinder, defFinder, ,, Parameter, p, ,, Node, call, ,]
[;, }, private, Node, eliminateCallParamAt, (, SimpleDefinitionFinder, defFinder, ,, Parameter, p, ,, Node, call, ,, int, argIndex, ), {, Preconditions]
[;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (, call, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {]
[., checkArgument, (, NodeUtil, ., isCallOrNew, (, call, ), ,, "Node must be a call or new.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (]
[,, "Node must be a call or new.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (, call, ,, argIndex, ), ;, if, (, formalArgPtr, !=]
[., isCallOrNew, (, call, ), ,, "Node must be a call or new.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (, call, ,, argIndex, )]
[), ,, "Node must be a call or new.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (, call, ,, argIndex, ), ;, if, (, formalArgPtr]
[), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (, call, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, )]
[;, if, (, formalArgPtr, !=, null, ), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (, p, ., getArg]
[., getArgumentForCallOrNew, (, call, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {, call, ., removeChild, (, formalArgPtr]
[,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (]
[), ;, if, (, formalArgPtr, !=, null, ), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (, p, .]
[), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (, p, ., getArg, (, ), !=, formalArgPtr, ), {]
[!=, null, ), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (, p, ., getArg, (, ), !=, formalArgPtr]
[), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (, p, ., getArg, (, ), !=, formalArgPtr, ), {]
[;, if, (, p, ., getArg, (, ), !=, formalArgPtr, ), {, removedNodes, ., add, (, formalArgPtr, ), ;, }]
[., removeChild, (, formalArgPtr, ), ;, if, (, p, ., getArg, (, ), !=, formalArgPtr, ), {, removedNodes, ., add]
[), ;, if, (, p, ., getArg, (, ), !=, formalArgPtr, ), {, removedNodes, ., add, (, formalArgPtr, ), ;]
[), {, removedNodes, ., add, (, formalArgPtr, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, return, formalArgPtr, ;]
[!=, formalArgPtr, ), {, removedNodes, ., add, (, formalArgPtr, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, return]
[., getArg, (, ), !=, formalArgPtr, ), {, removedNodes, ., add, (, formalArgPtr, ), ;, }, compiler, ., reportCodeChange, (]
[), {, removedNodes, ., add, (, formalArgPtr, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, return, formalArgPtr, ;]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, return, formalArgPtr, ;, }, }]
[., add, (, formalArgPtr, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, return, formalArgPtr, ;, }, }]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, return, formalArgPtr, ;, }, }]
[;, }, return, formalArgPtr, ;, }, }]
[., reportCodeChange, (, ), ;, }, return, formalArgPtr, ;, }, }]
[;, }, }]
