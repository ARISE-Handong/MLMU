[., Node, ;, class, CollapseAnonymousFunctions, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, CollapseAnonymousFunctions, (, AbstractCompiler, compiler, ), {]
[., Node, ;, class, CollapseAnonymousFunctions, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, CollapseAnonymousFunctions, (, AbstractCompiler, compiler, ), {]
[CollapseAnonymousFunctions, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, CollapseAnonymousFunctions, (, AbstractCompiler, compiler, ), {, Preconditions, ., checkArgument, (]
[CollapseAnonymousFunctions, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, CollapseAnonymousFunctions, (, AbstractCompiler, compiler, ), {, Preconditions, ., checkArgument, (]
[CollapseAnonymousFunctions, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, CollapseAnonymousFunctions, (, AbstractCompiler, compiler, ), {, Preconditions, ., checkArgument, (]
[(, AbstractCompiler, compiler, ), {, Preconditions, ., checkArgument, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[(, AbstractCompiler, compiler, ), {, Preconditions, ., checkArgument, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[{, Preconditions, ., checkArgument, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[Node, parent, ), {, if, (, !, n, ., isVar, (, ), ), {, return, ;, }, Node, grandparent, =]
[Node, parent, ), {, if, (, !, n, ., isVar, (, ), ), {, return, ;, }, Node, grandparent, =]
[., isVar, (, ), ), {, return, ;, }, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (]
[isVar, (, ), ), {, return, ;, }, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, !]
[(, ), ), {, return, ;, }, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, !, (]
[(, ), ), {, return, ;, }, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, !, (]
[(, ), ), {, return, ;, }, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, !, (]
[}, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, !, (, parent, ., isScript, (, ), ||]
[}, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, !, (, parent, ., isScript, (, ), ||]
[}, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, !, (, parent, ., isScript, (, ), ||]
[}, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, !, (, parent, ., isScript, (, ), ||]
[grandparent, =, parent, ., getParent, (, ), ;, if, (, !, (, parent, ., isScript, (, ), ||, grandparent, !=]
[parent, ., getParent, (, ), ;, if, (, !, (, parent, ., isScript, (, ), ||, grandparent, !=, null, &&]
[parent, ., getParent, (, ), ;, if, (, !, (, parent, ., isScript, (, ), ||, grandparent, !=, null, &&]
[if, (, !, (, parent, ., isScript, (, ), ||, grandparent, !=, null, &&, grandparent, ., isFunction, (, ), &&]
[if, (, !, (, parent, ., isScript, (, ), ||, grandparent, !=, null, &&, grandparent, ., isFunction, (, ), &&]
[!=, null, &&, grandparent, ., isFunction, (, ), &&, parent, ., isBlock, (, ), ), ), {, return, ;, }]
[!=, null, &&, grandparent, ., isFunction, (, ), &&, parent, ., isBlock, (, ), ), ), {, return, ;, }]
[., isFunction, (, ), &&, parent, ., isBlock, (, ), ), ), {, return, ;, }, Preconditions, ., checkState, (]
[., isFunction, (, ), &&, parent, ., isBlock, (, ), ), ), {, return, ;, }, Preconditions, ., checkState, (]
[), ), {, return, ;, }, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, name, =]
[), ), {, return, ;, }, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, name, =]
[(, n, ., hasOneChild, (, ), ), ;, Node, name, =, n, ., getFirstChild, (, ), ;, Node, value, =]
[(, n, ., hasOneChild, (, ), ), ;, Node, name, =, n, ., getFirstChild, (, ), ;, Node, value, =]
[Node, name, =, n, ., getFirstChild, (, ), ;, Node, value, =, name, ., getFirstChild, (, ), ;, if, (]
[Node, name, =, n, ., getFirstChild, (, ), ;, Node, value, =, name, ., getFirstChild, (, ), ;, if, (]
[Node, name, =, n, ., getFirstChild, (, ), ;, Node, value, =, name, ., getFirstChild, (, ), ;, if, (]
[Node, name, =, n, ., getFirstChild, (, ), ;, Node, value, =, name, ., getFirstChild, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ;, Node, value, =, name, ., getFirstChild, (, ), ;, if, (, value, !=]
[., getFirstChild, (, ), ;, Node, value, =, name, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&]
[., getFirstChild, (, ), ;, Node, value, =, name, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&]
[value, =, name, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&, value, ., isFunction, (, ), &&]
[=, name, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&, value, ., isFunction, (, ), &&, !]
[., getFirstChild, (, ), ;, if, (, value, !=, null, &&, value, ., isFunction, (, ), &&, !, isRecursiveFunction, (]
[value, !=, null, &&, value, ., isFunction, (, ), &&, !, isRecursiveFunction, (, value, ), ), {, Node, fnName, =]
[value, !=, null, &&, value, ., isFunction, (, ), &&, !, isRecursiveFunction, (, value, ), ), {, Node, fnName, =]
[isFunction, (, ), &&, !, isRecursiveFunction, (, value, ), ), {, Node, fnName, =, value, ., getFirstChild, (, ), ;]
[isFunction, (, ), &&, !, isRecursiveFunction, (, value, ), ), {, Node, fnName, =, value, ., getFirstChild, (, ), ;]
[!, isRecursiveFunction, (, value, ), ), {, Node, fnName, =, value, ., getFirstChild, (, ), ;, fnName, ., setString, (]
[!, isRecursiveFunction, (, value, ), ), {, Node, fnName, =, value, ., getFirstChild, (, ), ;, fnName, ., setString, (]
[Node, fnName, =, value, ., getFirstChild, (, ), ;, fnName, ., setString, (, name, ., getString, (, ), ), ;]
[Node, fnName, =, value, ., getFirstChild, (, ), ;, fnName, ., setString, (, name, ., getString, (, ), ), ;]
[., getFirstChild, (, ), ;, fnName, ., setString, (, name, ., getString, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (]
[(, ), ;, fnName, ., setString, (, name, ., getString, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, name, ,]
[fnName, ., setString, (, name, ., getString, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, name, ,, fnName, ), ;]
[fnName, ., setString, (, name, ., getString, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, name, ,, fnName, ), ;]
[name, ., getString, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, name, ,, fnName, ), ;, name, ., removeChild, (]
[(, ), ), ;, NodeUtil, ., copyNameAnnotations, (, name, ,, fnName, ), ;, name, ., removeChild, (, value, ), ;]
[(, ), ), ;, NodeUtil, ., copyNameAnnotations, (, name, ,, fnName, ), ;, name, ., removeChild, (, value, ), ;]
[NodeUtil, ., copyNameAnnotations, (, name, ,, fnName, ), ;, name, ., removeChild, (, value, ), ;, parent, ., replaceChild, (]
[copyNameAnnotations, (, name, ,, fnName, ), ;, name, ., removeChild, (, value, ), ;, parent, ., replaceChild, (, n, ,]
[), ;, name, ., removeChild, (, value, ), ;, parent, ., replaceChild, (, n, ,, value, ), ;, if, (]
[), ;, name, ., removeChild, (, value, ), ;, parent, ., replaceChild, (, n, ,, value, ), ;, if, (]
[;, name, ., removeChild, (, value, ), ;, parent, ., replaceChild, (, n, ,, value, ), ;, if, (, !]
[;, name, ., removeChild, (, value, ), ;, parent, ., replaceChild, (, n, ,, value, ), ;, if, (, !]
[), ;, parent, ., replaceChild, (, n, ,, value, ), ;, if, (, !, t, ., inGlobalScope, (, ), &&]
[), ;, parent, ., replaceChild, (, n, ,, value, ), ;, if, (, !, t, ., inGlobalScope, (, ), &&]
[replaceChild, (, n, ,, value, ), ;, if, (, !, t, ., inGlobalScope, (, ), &&, NodeUtil, ., isHoistedFunctionDeclaration, (]
[value, ), ;, if, (, !, t, ., inGlobalScope, (, ), &&, NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), ), {]
[value, ), ;, if, (, !, t, ., inGlobalScope, (, ), &&, NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), ), {]
[(, !, t, ., inGlobalScope, (, ), &&, NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), ), {, parent, ., addChildToFront, (]
[(, !, t, ., inGlobalScope, (, ), &&, NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), ), {, parent, ., addChildToFront, (]
[NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), ), {, parent, ., addChildToFront, (, value, ., detachFromParent, (, ), ), ;, }]
[NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), ), {, parent, ., addChildToFront, (, value, ., detachFromParent, (, ), ), ;, }]
[}, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, isRecursiveFunction, (, Node, function, ), {, Node, name, =]
[}, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, isRecursiveFunction, (, Node, function, ), {, Node, name, =]
[}, private, boolean, isRecursiveFunction, (, Node, function, ), {, Node, name, =, function, ., getFirstChild, (, ), ;, if, (]
[}, private, boolean, isRecursiveFunction, (, Node, function, ), {, Node, name, =, function, ., getFirstChild, (, ), ;, if, (]
[}, private, boolean, isRecursiveFunction, (, Node, function, ), {, Node, name, =, function, ., getFirstChild, (, ), ;, if, (]
[function, ., getFirstChild, (, ), ;, if, (, name, ., getString, (, ), ., isEmpty, (, ), ), {, return]
[if, (, name, ., getString, (, ), ., isEmpty, (, ), ), {, return, false, ;, }, Node, args, =]
[if, (, name, ., getString, (, ), ., isEmpty, (, ), ), {, return, false, ;, }, Node, args, =]
[(, ), ), {, return, false, ;, }, Node, args, =, name, ., getNext, (, ), ;, Node, body, =]
[(, ), ), {, return, false, ;, }, Node, args, =, name, ., getNext, (, ), ;, Node, body, =]
[}, Node, args, =, name, ., getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;, return]
[args, =, name, ., getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;, return, containsName, (]
[name, ., getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;, return, containsName, (, body, ,]
[name, ., getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;, return, containsName, (, body, ,]
[., getString, (, ), ), ;, }, private, boolean, containsName, (, Node, n, ,, String, name, ), {, if, (]
[., getString, (, ), ), ;, }, private, boolean, containsName, (, Node, n, ,, String, name, ), {, if, (]
[., getString, (, ), ), ;, }, private, boolean, containsName, (, Node, n, ,, String, name, ), {, if, (]
[}, private, boolean, containsName, (, Node, n, ,, String, name, ), {, if, (, n, ., isName, (, ), &&]
[}, private, boolean, containsName, (, Node, n, ,, String, name, ), {, if, (, n, ., isName, (, ), &&]
[}, private, boolean, containsName, (, Node, n, ,, String, name, ), {, if, (, n, ., isName, (, ), &&]
[String, name, ), {, if, (, n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (]
[(, n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, name, ), ), {, return]
[., getString, (, ), ., equals, (, name, ), ), {, return, true, ;, }, for, (, Node, child, :]
[., getString, (, ), ., equals, (, name, ), ), {, return, true, ;, }, for, (, Node, child, :]
[), {, return, true, ;, }, for, (, Node, child, :, n, ., children, (, ), ), {, if, (]
[return, true, ;, }, for, (, Node, child, :, n, ., children, (, ), ), {, if, (, containsName, (]
[;, }, for, (, Node, child, :, n, ., children, (, ), ), {, if, (, containsName, (, child, ,]
[child, :, n, ., children, (, ), ), {, if, (, containsName, (, child, ,, name, ), ), {, return]
[(, ), ), {, if, (, containsName, (, child, ,, name, ), ), {, return, true, ;, }, }, return]
