[cachedR, ;, private, RealMatrix, cachedH, ;, private, final, double, threshold, ;, public, QRDecomposition, (, RealMatrix, matrix, ), {, this, (]
[private, RealMatrix, cachedH, ;, private, final, double, threshold, ;, public, QRDecomposition, (, RealMatrix, matrix, ), {, this, (, matrix, ,]
[), {, this, (, matrix, ,, 0d, ), ;, }, public, QRDecomposition, (, RealMatrix, matrix, ,, double, threshold, ), {]
[), {, this, (, matrix, ,, 0d, ), ;, }, public, QRDecomposition, (, RealMatrix, matrix, ,, double, threshold, ), {]
[matrix, ,, 0d, ), ;, }, public, QRDecomposition, (, RealMatrix, matrix, ,, double, threshold, ), {, this, ., threshold, =]
[public, QRDecomposition, (, RealMatrix, matrix, ,, double, threshold, ), {, this, ., threshold, =, threshold, ;, final, int, m, =]
[public, QRDecomposition, (, RealMatrix, matrix, ,, double, threshold, ), {, this, ., threshold, =, threshold, ;, final, int, m, =]
[this, ., threshold, =, threshold, ;, final, int, m, =, matrix, ., getRowDimension, (, ), ;, final, int, n, =]
[this, ., threshold, =, threshold, ;, final, int, m, =, matrix, ., getRowDimension, (, ), ;, final, int, n, =]
[final, int, m, =, matrix, ., getRowDimension, (, ), ;, final, int, n, =, matrix, ., getColumnDimension, (, ), ;]
[m, =, matrix, ., getRowDimension, (, ), ;, final, int, n, =, matrix, ., getColumnDimension, (, ), ;, qrt, =]
[m, =, matrix, ., getRowDimension, (, ), ;, final, int, n, =, matrix, ., getColumnDimension, (, ), ;, qrt, =]
[m, =, matrix, ., getRowDimension, (, ), ;, final, int, n, =, matrix, ., getColumnDimension, (, ), ;, qrt, =]
[n, =, matrix, ., getColumnDimension, (, ), ;, qrt, =, matrix, ., transpose, (, ), ., getData, (, ), ;]
[matrix, ., getColumnDimension, (, ), ;, qrt, =, matrix, ., transpose, (, ), ., getData, (, ), ;, rDiag, =]
[(, ), ;, qrt, =, matrix, ., transpose, (, ), ., getData, (, ), ;, rDiag, =, new, double, []
[(, ), ;, qrt, =, matrix, ., transpose, (, ), ., getData, (, ), ;, rDiag, =, new, double, []
[=, matrix, ., transpose, (, ), ., getData, (, ), ;, rDiag, =, new, double, [, FastMath, ., min, (]
[., transpose, (, ), ., getData, (, ), ;, rDiag, =, new, double, [, FastMath, ., min, (, m, ,]
[., getData, (, ), ;, rDiag, =, new, double, [, FastMath, ., min, (, m, ,, n, ), ], ;]
[(, ), ;, rDiag, =, new, double, [, FastMath, ., min, (, m, ,, n, ), ], ;, cachedQ, =]
[;, rDiag, =, new, double, [, FastMath, ., min, (, m, ,, n, ), ], ;, cachedQ, =, null, ;]
[=, new, double, [, FastMath, ., min, (, m, ,, n, ), ], ;, cachedQ, =, null, ;, cachedQT, =]
[double, [, FastMath, ., min, (, m, ,, n, ), ], ;, cachedQ, =, null, ;, cachedQT, =, null, ;]
[FastMath, ., min, (, m, ,, n, ), ], ;, cachedQ, =, null, ;, cachedQT, =, null, ;, cachedR, =]
[min, (, m, ,, n, ), ], ;, cachedQ, =, null, ;, cachedQT, =, null, ;, cachedR, =, null, ;]
[m, ,, n, ), ], ;, cachedQ, =, null, ;, cachedQT, =, null, ;, cachedR, =, null, ;, cachedH, =]
[n, ), ], ;, cachedQ, =, null, ;, cachedQT, =, null, ;, cachedR, =, null, ;, cachedH, =, null, ;]
[], ;, cachedQ, =, null, ;, cachedQT, =, null, ;, cachedR, =, null, ;, cachedH, =, null, ;, decompose, (]
[), ;, }, protected, void, decompose, (, double, [, ], [, ], matrix, ), {, for, (, int, minor, =]
[}, protected, void, decompose, (, double, [, ], [, ], matrix, ), {, for, (, int, minor, =, 0, ;]
[}, protected, void, decompose, (, double, [, ], [, ], matrix, ), {, for, (, int, minor, =, 0, ;]
[void, decompose, (, double, [, ], [, ], matrix, ), {, for, (, int, minor, =, 0, ;, minor, <]
[void, decompose, (, double, [, ], [, ], matrix, ), {, for, (, int, minor, =, 0, ;, minor, <]
[[, ], [, ], matrix, ), {, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (]
[[, ], [, ], matrix, ), {, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (]
[matrix, ), {, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, qrt, ., length, ,]
[matrix, ), {, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, qrt, ., length, ,]
[matrix, ), {, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, qrt, ., length, ,]
[{, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, qrt, ., length, ,, qrt, []
[0, ;, minor, <, FastMath, ., min, (, qrt, ., length, ,, qrt, [, 0, ], ., length, ), ;]
[0, ;, minor, <, FastMath, ., min, (, qrt, ., length, ,, qrt, [, 0, ], ., length, ), ;]
[FastMath, ., min, (, qrt, ., length, ,, qrt, [, 0, ], ., length, ), ;, minor, ++, ), {]
[min, (, qrt, ., length, ,, qrt, [, 0, ], ., length, ), ;, minor, ++, ), {, performHouseholderReflection, (]
[qrt, ., length, ,, qrt, [, 0, ], ., length, ), ;, minor, ++, ), {, performHouseholderReflection, (, minor, ,]
[void, performHouseholderReflection, (, int, minor, ,, double, [, ], [, ], matrix, ), {, final, double, [, ], qrtMinor, =]
[void, performHouseholderReflection, (, int, minor, ,, double, [, ], [, ], matrix, ), {, final, double, [, ], qrtMinor, =]
[(, int, minor, ,, double, [, ], [, ], matrix, ), {, final, double, [, ], qrtMinor, =, qrt, []
[], [, ], matrix, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, double, xNormSqr, =]
[double, [, ], qrtMinor, =, qrt, [, minor, ], ;, double, xNormSqr, =, 0, ;, for, (, int, row, =]
[], qrtMinor, =, qrt, [, minor, ], ;, double, xNormSqr, =, 0, ;, for, (, int, row, =, minor, ;]
[], qrtMinor, =, qrt, [, minor, ], ;, double, xNormSqr, =, 0, ;, for, (, int, row, =, minor, ;]
[=, qrt, [, minor, ], ;, double, xNormSqr, =, 0, ;, for, (, int, row, =, minor, ;, row, <]
[=, qrt, [, minor, ], ;, double, xNormSqr, =, 0, ;, for, (, int, row, =, minor, ;, row, <]
[], ;, double, xNormSqr, =, 0, ;, for, (, int, row, =, minor, ;, row, <, qrtMinor, ., length, ;]
[], ;, double, xNormSqr, =, 0, ;, for, (, int, row, =, minor, ;, row, <, qrtMinor, ., length, ;]
[(, int, row, =, minor, ;, row, <, qrtMinor, ., length, ;, row, ++, ), {, final, double, c, =]
[(, int, row, =, minor, ;, row, <, qrtMinor, ., length, ;, row, ++, ), {, final, double, c, =]
[row, =, minor, ;, row, <, qrtMinor, ., length, ;, row, ++, ), {, final, double, c, =, qrtMinor, []
[;, row, <, qrtMinor, ., length, ;, row, ++, ), {, final, double, c, =, qrtMinor, [, row, ], ;]
[<, qrtMinor, ., length, ;, row, ++, ), {, final, double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=]
[<, qrtMinor, ., length, ;, row, ++, ), {, final, double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=]
[., length, ;, row, ++, ), {, final, double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *]
[final, double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =]
[final, double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =]
[double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (]
[double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (]
[double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (]
[=, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, qrtMinor, []
[row, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, qrtMinor, [, minor, ], >]
[xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, qrtMinor, [, minor, ], >, 0, ), ?]
[+=, c, *, c, ;, }, final, double, a, =, (, qrtMinor, [, minor, ], >, 0, ), ?, -]
[+=, c, *, c, ;, }, final, double, a, =, (, qrtMinor, [, minor, ], >, 0, ), ?, -]
[;, }, final, double, a, =, (, qrtMinor, [, minor, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[double, a, =, (, qrtMinor, [, minor, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[double, a, =, (, qrtMinor, [, minor, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[qrtMinor, [, minor, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, []
[-, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ], =]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ], =, a, ;, if, (]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ], =, a, ;, if, (]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ], =, a, ;, if, (, a, !=]
[., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[(, xNormSqr, ), ;, rDiag, [, minor, ], =, a, ;, if, (, a, !=, 0.0, ), {, qrtMinor, []
[;, rDiag, [, minor, ], =, a, ;, if, (, a, !=, 0.0, ), {, qrtMinor, [, minor, ], -=]
[;, if, (, a, !=, 0.0, ), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int, col, =]
[;, if, (, a, !=, 0.0, ), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int, col, =]
[(, a, !=, 0.0, ), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int, col, =, minor, +]
[!=, 0.0, ), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int, col, =, minor, +, 1, ;]
[!=, 0.0, ), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int, col, =, minor, +, 1, ;]
[), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int, col, =, minor, +, 1, ;, col, <]
[), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int, col, =, minor, +, 1, ;, col, <]
[minor, ], -=, a, ;, for, (, int, col, =, minor, +, 1, ;, col, <, qrt, ., length, ;]
[minor, ], -=, a, ;, for, (, int, col, =, minor, +, 1, ;, col, <, qrt, ., length, ;]
[minor, +, 1, ;, col, <, qrt, ., length, ;, col, ++, ), {, final, double, [, ], qrtCol, =]
[minor, +, 1, ;, col, <, qrt, ., length, ;, col, ++, ), {, final, double, [, ], qrtCol, =]
[1, ;, col, <, qrt, ., length, ;, col, ++, ), {, final, double, [, ], qrtCol, =, qrt, []
[length, ;, col, ++, ), {, final, double, [, ], qrtCol, =, qrt, [, col, ], ;, double, alpha, =]
[double, [, ], qrtCol, =, qrt, [, col, ], ;, double, alpha, =, 0, ;, for, (, int, row, =]
[], qrtCol, =, qrt, [, col, ], ;, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;]
[], qrtCol, =, qrt, [, col, ], ;, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;]
[=, qrt, [, col, ], ;, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <]
[=, qrt, [, col, ], ;, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <]
[], ;, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;]
[], ;, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;]
[=, 0, ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {]
[;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, alpha, -=]
[;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, alpha, -=]
[;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, alpha, -=]
[(, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, alpha, -=, qrtCol, []
[=, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, alpha, -=, qrtCol, [, row, ], *]
[=, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, alpha, -=, qrtCol, [, row, ], *]
[;, row, <, qrtCol, ., length, ;, row, ++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, []
[., length, ;, row, ++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }]
[;, row, ++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=]
[;, row, ++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=]
[++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, a, *]
[++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, a, *]
[{, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, a, *, qrtMinor, []
[qrtMinor, [, row, ], ;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =]
[row, ], ;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;]
[row, ], ;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;]
[;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <]
[;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <]
[a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;]
[a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;]
[minor, ], ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {]
[minor, ], ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {]
[;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, qrtCol, []
[int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, qrtCol, [, row, ], -=]
[int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, qrtCol, [, row, ], -=]
[=, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, qrtCol, [, row, ], -=, alpha, *]
[=, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, qrtCol, [, row, ], -=, alpha, *]
[;, row, <, qrtCol, ., length, ;, row, ++, ), {, qrtCol, [, row, ], -=, alpha, *, qrtMinor, []
[-=, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, public, RealMatrix, getR, (, ), {, if, (]
[-=, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, public, RealMatrix, getR, (, ), {, if, (]
[*, qrtMinor, [, row, ], ;, }, }, }, }, public, RealMatrix, getR, (, ), {, if, (, cachedR, ==]
[}, }, }, public, RealMatrix, getR, (, ), {, if, (, cachedR, ==, null, ), {, final, int, n, =]
[}, }, }, public, RealMatrix, getR, (, ), {, if, (, cachedR, ==, null, ), {, final, int, n, =]
[{, if, (, cachedR, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[{, if, (, cachedR, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[{, if, (, cachedR, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[(, cachedR, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, []
[length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], ra, =]
[int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], ra, =, new, double, []
[qrt, [, 0, ], ., length, ;, double, [, ], [, ], ra, =, new, double, [, m, ], []
[[, ], [, ], ra, =, new, double, [, m, ], [, n, ], ;, for, (, int, row, =]
[[, ], [, ], ra, =, new, double, [, m, ], [, n, ], ;, for, (, int, row, =]
[[, ], [, ], ra, =, new, double, [, m, ], [, n, ], ;, for, (, int, row, =]
[ra, =, new, double, [, m, ], [, n, ], ;, for, (, int, row, =, FastMath, ., min, (]
[new, double, [, m, ], [, n, ], ;, for, (, int, row, =, FastMath, ., min, (, m, ,]
[m, ], [, n, ], ;, for, (, int, row, =, FastMath, ., min, (, m, ,, n, ), -]
[[, n, ], ;, for, (, int, row, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;]
[[, n, ], ;, for, (, int, row, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;]
[], ;, for, (, int, row, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;, row, >=]
[for, (, int, row, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;, row, >=, 0, ;]
[for, (, int, row, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;, row, >=, 0, ;]
[=, FastMath, ., min, (, m, ,, n, ), -, 1, ;, row, >=, 0, ;, row, --, ), {]
[=, FastMath, ., min, (, m, ,, n, ), -, 1, ;, row, >=, 0, ;, row, --, ), {]
[=, FastMath, ., min, (, m, ,, n, ), -, 1, ;, row, >=, 0, ;, row, --, ), {]
[., min, (, m, ,, n, ), -, 1, ;, row, >=, 0, ;, row, --, ), {, ra, []
[m, ,, n, ), -, 1, ;, row, >=, 0, ;, row, --, ), {, ra, [, row, ], []
[), -, 1, ;, row, >=, 0, ;, row, --, ), {, ra, [, row, ], [, row, ], =]
[), -, 1, ;, row, >=, 0, ;, row, --, ), {, ra, [, row, ], [, row, ], =]
[1, ;, row, >=, 0, ;, row, --, ), {, ra, [, row, ], [, row, ], =, rDiag, []
[), {, ra, [, row, ], [, row, ], =, rDiag, [, row, ], ;, for, (, int, col, =]
[), {, ra, [, row, ], [, row, ], =, rDiag, [, row, ], ;, for, (, int, col, =]
[ra, [, row, ], [, row, ], =, rDiag, [, row, ], ;, for, (, int, col, =, row, +]
[row, ], [, row, ], =, rDiag, [, row, ], ;, for, (, int, col, =, row, +, 1, ;]
[row, ], [, row, ], =, rDiag, [, row, ], ;, for, (, int, col, =, row, +, 1, ;]
[[, row, ], =, rDiag, [, row, ], ;, for, (, int, col, =, row, +, 1, ;, col, <]
[], =, rDiag, [, row, ], ;, for, (, int, col, =, row, +, 1, ;, col, <, n, ;]
[], =, rDiag, [, row, ], ;, for, (, int, col, =, row, +, 1, ;, col, <, n, ;]
[row, ], ;, for, (, int, col, =, row, +, 1, ;, col, <, n, ;, col, ++, ), {]
[row, ], ;, for, (, int, col, =, row, +, 1, ;, col, <, n, ;, col, ++, ), {]
[row, ], ;, for, (, int, col, =, row, +, 1, ;, col, <, n, ;, col, ++, ), {]
[;, for, (, int, col, =, row, +, 1, ;, col, <, n, ;, col, ++, ), {, ra, []
[int, col, =, row, +, 1, ;, col, <, n, ;, col, ++, ), {, ra, [, row, ], []
[row, +, 1, ;, col, <, n, ;, col, ++, ), {, ra, [, row, ], [, col, ], =]
[row, +, 1, ;, col, <, n, ;, col, ++, ), {, ra, [, row, ], [, col, ], =]
[row, +, 1, ;, col, <, n, ;, col, ++, ), {, ra, [, row, ], [, col, ], =]
[1, ;, col, <, n, ;, col, ++, ), {, ra, [, row, ], [, col, ], =, qrt, []
[<, n, ;, col, ++, ), {, ra, [, row, ], [, col, ], =, qrt, [, col, ], []
[), {, ra, [, row, ], [, col, ], =, qrt, [, col, ], [, row, ], ;, }, }]
[ra, [, row, ], [, col, ], =, qrt, [, col, ], [, row, ], ;, }, }, cachedR, =]
[ra, [, row, ], [, col, ], =, qrt, [, col, ], [, row, ], ;, }, }, cachedR, =]
[[, col, ], =, qrt, [, col, ], [, row, ], ;, }, }, cachedR, =, MatrixUtils, ., createRealMatrix, (]
[[, col, ], [, row, ], ;, }, }, cachedR, =, MatrixUtils, ., createRealMatrix, (, ra, ), ;, }, return]
[MatrixUtils, ., createRealMatrix, (, ra, ), ;, }, return, cachedR, ;, }, public, RealMatrix, getQ, (, ), {, if, (]
[MatrixUtils, ., createRealMatrix, (, ra, ), ;, }, return, cachedR, ;, }, public, RealMatrix, getQ, (, ), {, if, (]
[createRealMatrix, (, ra, ), ;, }, return, cachedR, ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==]
[), ;, }, return, cachedR, ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, ), {]
[}, return, cachedR, ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, ), {, cachedQ, =]
[}, return, cachedR, ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, ), {, cachedQ, =]
[{, if, (, cachedQ, ==, null, ), {, cachedQ, =, getQT, (, ), ., transpose, (, ), ;, }, return]
[(, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (]
[(, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (]
[., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQT, ==]
[cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQT, ==, null, ), {, final, int, n, =]
[cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQT, ==, null, ), {, final, int, n, =]
[{, if, (, cachedQT, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[{, if, (, cachedQT, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[{, if, (, cachedQT, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[(, cachedQT, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, []
[length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], qta, =]
[int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], qta, =, new, double, []
[qrt, [, 0, ], ., length, ;, double, [, ], [, ], qta, =, new, double, [, m, ], []
[[, ], [, ], qta, =, new, double, [, m, ], [, m, ], ;, for, (, int, minor, =]
[[, ], [, ], qta, =, new, double, [, m, ], [, m, ], ;, for, (, int, minor, =]
[[, ], qta, =, new, double, [, m, ], [, m, ], ;, for, (, int, minor, =, m, -]
[qta, =, new, double, [, m, ], [, m, ], ;, for, (, int, minor, =, m, -, 1, ;]
[qta, =, new, double, [, m, ], [, m, ], ;, for, (, int, minor, =, m, -, 1, ;]
[new, double, [, m, ], [, m, ], ;, for, (, int, minor, =, m, -, 1, ;, minor, >=]
[new, double, [, m, ], [, m, ], ;, for, (, int, minor, =, m, -, 1, ;, minor, >=]
[], [, m, ], ;, for, (, int, minor, =, m, -, 1, ;, minor, >=, FastMath, ., min, (]
[m, ], ;, for, (, int, minor, =, m, -, 1, ;, minor, >=, FastMath, ., min, (, m, ,]
[for, (, int, minor, =, m, -, 1, ;, minor, >=, FastMath, ., min, (, m, ,, n, ), ;]
[for, (, int, minor, =, m, -, 1, ;, minor, >=, FastMath, ., min, (, m, ,, n, ), ;]
[=, m, -, 1, ;, minor, >=, FastMath, ., min, (, m, ,, n, ), ;, minor, --, ), {]
[=, m, -, 1, ;, minor, >=, FastMath, ., min, (, m, ,, n, ), ;, minor, --, ), {]
[=, m, -, 1, ;, minor, >=, FastMath, ., min, (, m, ,, n, ), ;, minor, --, ), {]
[-, 1, ;, minor, >=, FastMath, ., min, (, m, ,, n, ), ;, minor, --, ), {, qta, []
[minor, >=, FastMath, ., min, (, m, ,, n, ), ;, minor, --, ), {, qta, [, minor, ], []
[., min, (, m, ,, n, ), ;, minor, --, ), {, qta, [, minor, ], [, minor, ], =]
[minor, --, ), {, qta, [, minor, ], [, minor, ], =, 1.0d, ;, }, for, (, int, minor, =]
[minor, --, ), {, qta, [, minor, ], [, minor, ], =, 1.0d, ;, }, for, (, int, minor, =]
[minor, --, ), {, qta, [, minor, ], [, minor, ], =, 1.0d, ;, }, for, (, int, minor, =]
[qta, [, minor, ], [, minor, ], =, 1.0d, ;, }, for, (, int, minor, =, FastMath, ., min, (]
[minor, ], [, minor, ], =, 1.0d, ;, }, for, (, int, minor, =, FastMath, ., min, (, m, ,]
[minor, ], =, 1.0d, ;, }, for, (, int, minor, =, FastMath, ., min, (, m, ,, n, ), -]
[=, 1.0d, ;, }, for, (, int, minor, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;]
[=, 1.0d, ;, }, for, (, int, minor, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;]
[;, }, for, (, int, minor, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;, minor, >=]
[for, (, int, minor, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;, minor, >=, 0, ;]
[for, (, int, minor, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;, minor, >=, 0, ;]
[,, n, ), -, 1, ;, minor, >=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =]
[,, n, ), -, 1, ;, minor, >=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =]
[), -, 1, ;, minor, >=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, []
[;, minor, >=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;]
[;, minor, >=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;]
[;, minor, >=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;]
[>=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, qta, []
[minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, qta, [, minor, ], []
[{, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, qta, [, minor, ], [, minor, ], =]
[], qrtMinor, =, qrt, [, minor, ], ;, qta, [, minor, ], [, minor, ], =, 1.0d, ;, if, (]
[], qrtMinor, =, qrt, [, minor, ], ;, qta, [, minor, ], [, minor, ], =, 1.0d, ;, if, (]
[], qrtMinor, =, qrt, [, minor, ], ;, qta, [, minor, ], [, minor, ], =, 1.0d, ;, if, (]
[=, qrt, [, minor, ], ;, qta, [, minor, ], [, minor, ], =, 1.0d, ;, if, (, qrtMinor, []
[minor, ], ;, qta, [, minor, ], [, minor, ], =, 1.0d, ;, if, (, qrtMinor, [, minor, ], !=]
[minor, ], =, 1.0d, ;, if, (, qrtMinor, [, minor, ], !=, 0.0, ), {, for, (, int, col, =]
[=, 1.0d, ;, if, (, qrtMinor, [, minor, ], !=, 0.0, ), {, for, (, int, col, =, minor, ;]
[=, 1.0d, ;, if, (, qrtMinor, [, minor, ], !=, 0.0, ), {, for, (, int, col, =, minor, ;]
[;, if, (, qrtMinor, [, minor, ], !=, 0.0, ), {, for, (, int, col, =, minor, ;, col, <]
[(, qrtMinor, [, minor, ], !=, 0.0, ), {, for, (, int, col, =, minor, ;, col, <, m, ;]
[(, qrtMinor, [, minor, ], !=, 0.0, ), {, for, (, int, col, =, minor, ;, col, <, m, ;]
[), {, for, (, int, col, =, minor, ;, col, <, m, ;, col, ++, ), {, double, alpha, =]
[minor, ;, col, <, m, ;, col, ++, ), {, double, alpha, =, 0, ;, for, (, int, row, =]
[col, <, m, ;, col, ++, ), {, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;]
[col, <, m, ;, col, ++, ), {, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;]
[m, ;, col, ++, ), {, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <]
[col, ++, ), {, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[col, ++, ), {, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {]
[=, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, alpha, -=]
[=, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, alpha, -=]
[=, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, alpha, -=]
[=, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, alpha, -=]
[;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, alpha, -=, qta, []
[int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, alpha, -=, qta, [, col, ], []
[minor, ;, row, <, m, ;, row, ++, ), {, alpha, -=, qta, [, col, ], [, row, ], *]
[minor, ;, row, <, m, ;, row, ++, ), {, alpha, -=, qta, [, col, ], [, row, ], *]
[row, <, m, ;, row, ++, ), {, alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor, []
[row, ++, ), {, alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor, [, row, ], ;, }]
[), {, alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=]
[), {, alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=]
[), {, alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=]
[alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, rDiag, []
[[, col, ], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, rDiag, [, minor, ], *]
[[, col, ], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, rDiag, [, minor, ], *]
[], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, rDiag, [, minor, ], *, qrtMinor, []
[], ;, }, alpha, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =]
[}, alpha, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;]
[}, alpha, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;]
[/=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <]
[[, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[[, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {]
[qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {]
[qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {]
[minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, qta, []
[for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, qta, [, col, ], []
[row, =, minor, ;, row, <, m, ;, row, ++, ), {, qta, [, col, ], [, row, ], +=]
[row, =, minor, ;, row, <, m, ;, row, ++, ), {, qta, [, col, ], [, row, ], +=]
[=, minor, ;, row, <, m, ;, row, ++, ), {, qta, [, col, ], [, row, ], +=, -]
[;, row, <, m, ;, row, ++, ), {, qta, [, col, ], [, row, ], +=, -, alpha, *]
[;, row, <, m, ;, row, ++, ), {, qta, [, col, ], [, row, ], +=, -, alpha, *]
[<, m, ;, row, ++, ), {, qta, [, col, ], [, row, ], +=, -, alpha, *, qrtMinor, []
[qta, [, col, ], [, row, ], +=, -, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }]
[col, ], [, row, ], +=, -, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, cachedQT, =]
[col, ], [, row, ], +=, -, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, cachedQT, =]
[], +=, -, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, cachedQT, =, MatrixUtils, ., createRealMatrix, (]
[qrtMinor, [, row, ], ;, }, }, }, }, cachedQT, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return]
[MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQT, ;, }, public, RealMatrix, getH, (, ), {, if, (]
[MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQT, ;, }, public, RealMatrix, getH, (, ), {, if, (]
[createRealMatrix, (, qta, ), ;, }, return, cachedQT, ;, }, public, RealMatrix, getH, (, ), {, if, (, cachedH, ==]
[cachedQT, ;, }, public, RealMatrix, getH, (, ), {, if, (, cachedH, ==, null, ), {, final, int, n, =]
[cachedQT, ;, }, public, RealMatrix, getH, (, ), {, if, (, cachedH, ==, null, ), {, final, int, n, =]
[{, if, (, cachedH, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[{, if, (, cachedH, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[{, if, (, cachedH, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[(, cachedH, ==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, []
[length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], ha, =]
[int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], ha, =, new, double, []
[qrt, [, 0, ], ., length, ;, double, [, ], [, ], ha, =, new, double, [, m, ], []
[[, ], [, ], ha, =, new, double, [, m, ], [, n, ], ;, for, (, int, i, =]
[[, ], ha, =, new, double, [, m, ], [, n, ], ;, for, (, int, i, =, 0, ;]
[[, ], ha, =, new, double, [, m, ], [, n, ], ;, for, (, int, i, =, 0, ;]
[ha, =, new, double, [, m, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, m, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;]
[double, [, m, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[=, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[<, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, FastMath, ., min, (]
[<, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, FastMath, ., min, (]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, FastMath, ., min, (, i, +]
[i, ), {, for, (, int, j, =, 0, ;, j, <, FastMath, ., min, (, i, +, 1, ,]
[for, (, int, j, =, 0, ;, j, <, FastMath, ., min, (, i, +, 1, ,, n, ), ;]
[(, int, j, =, 0, ;, j, <, FastMath, ., min, (, i, +, 1, ,, n, ), ;, ++]
[=, 0, ;, j, <, FastMath, ., min, (, i, +, 1, ,, n, ), ;, ++, j, ), {]
[=, 0, ;, j, <, FastMath, ., min, (, i, +, 1, ,, n, ), ;, ++, j, ), {]
[=, 0, ;, j, <, FastMath, ., min, (, i, +, 1, ,, n, ), ;, ++, j, ), {]
[;, j, <, FastMath, ., min, (, i, +, 1, ,, n, ), ;, ++, j, ), {, ha, []
[FastMath, ., min, (, i, +, 1, ,, n, ), ;, ++, j, ), {, ha, [, i, ], []
[(, i, +, 1, ,, n, ), ;, ++, j, ), {, ha, [, i, ], [, j, ], =]
[(, i, +, 1, ,, n, ), ;, ++, j, ), {, ha, [, i, ], [, j, ], =]
[(, i, +, 1, ,, n, ), ;, ++, j, ), {, ha, [, i, ], [, j, ], =]
[(, i, +, 1, ,, n, ), ;, ++, j, ), {, ha, [, i, ], [, j, ], =]
[+, 1, ,, n, ), ;, ++, j, ), {, ha, [, i, ], [, j, ], =, qrt, []
[n, ), ;, ++, j, ), {, ha, [, i, ], [, j, ], =, qrt, [, j, ], []
[++, j, ), {, ha, [, i, ], [, j, ], =, qrt, [, j, ], [, i, ], /]
[j, ), {, ha, [, i, ], [, j, ], =, qrt, [, j, ], [, i, ], /, -]
[j, ), {, ha, [, i, ], [, j, ], =, qrt, [, j, ], [, i, ], /, -]
[{, ha, [, i, ], [, j, ], =, qrt, [, j, ], [, i, ], /, -, rDiag, []
[[, j, ], =, qrt, [, j, ], [, i, ], /, -, rDiag, [, j, ], ;, }, }]
[], =, qrt, [, j, ], [, i, ], /, -, rDiag, [, j, ], ;, }, }, cachedH, =]
[], =, qrt, [, j, ], [, i, ], /, -, rDiag, [, j, ], ;, }, }, cachedH, =]
[j, ], [, i, ], /, -, rDiag, [, j, ], ;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (]
[/, -, rDiag, [, j, ], ;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (, ha, ), ;, }, return]
[=, MatrixUtils, ., createRealMatrix, (, ha, ), ;, }, return, cachedH, ;, }, public, DecompositionSolver, getSolver, (, ), {, return]
[createRealMatrix, (, ha, ), ;, }, return, cachedH, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (]
[ha, ), ;, }, return, cachedH, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, qrt, ,]
[;, }, return, cachedH, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, qrt, ,, rDiag, ,]
[(, final, double, [, ], [, ], qrt, ,, final, double, [, ], rDiag, ,, final, double, threshold, ), {]
[(, final, double, [, ], [, ], qrt, ,, final, double, [, ], rDiag, ,, final, double, threshold, ), {]
[], [, ], qrt, ,, final, double, [, ], rDiag, ,, final, double, threshold, ), {, this, ., qrt, =]
[], qrt, ,, final, double, [, ], rDiag, ,, final, double, threshold, ), {, this, ., qrt, =, qrt, ;]
[], qrt, ,, final, double, [, ], rDiag, ,, final, double, threshold, ), {, this, ., qrt, =, qrt, ;]
[double, [, ], rDiag, ,, final, double, threshold, ), {, this, ., qrt, =, qrt, ;, this, ., rDiag, =]
[], rDiag, ,, final, double, threshold, ), {, this, ., qrt, =, qrt, ;, this, ., rDiag, =, rDiag, ;]
[], rDiag, ,, final, double, threshold, ), {, this, ., qrt, =, qrt, ;, this, ., rDiag, =, rDiag, ;]
[double, threshold, ), {, this, ., qrt, =, qrt, ;, this, ., rDiag, =, rDiag, ;, this, ., threshold, =]
[rDiag, ;, this, ., threshold, =, threshold, ;, }, public, boolean, isNonSingular, (, ), {, for, (, double, diag, :]
[=, threshold, ;, }, public, boolean, isNonSingular, (, ), {, for, (, double, diag, :, rDiag, ), {, if, (]
[=, threshold, ;, }, public, boolean, isNonSingular, (, ), {, for, (, double, diag, :, rDiag, ), {, if, (]
[=, threshold, ;, }, public, boolean, isNonSingular, (, ), {, for, (, double, diag, :, rDiag, ), {, if, (]
[public, boolean, isNonSingular, (, ), {, for, (, double, diag, :, rDiag, ), {, if, (, FastMath, ., abs, (]
[(, ), {, for, (, double, diag, :, rDiag, ), {, if, (, FastMath, ., abs, (, diag, ), <=]
[(, double, diag, :, rDiag, ), {, if, (, FastMath, ., abs, (, diag, ), <=, threshold, ), {, return]
[), {, if, (, FastMath, ., abs, (, diag, ), <=, threshold, ), {, return, false, ;, }, }, return]
[false, ;, }, }, return, true, ;, }, public, RealVector, solve, (, RealVector, b, ), {, final, int, n, =]
[false, ;, }, }, return, true, ;, }, public, RealVector, solve, (, RealVector, b, ), {, final, int, n, =]
[public, RealVector, solve, (, RealVector, b, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[public, RealVector, solve, (, RealVector, b, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[public, RealVector, solve, (, RealVector, b, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[solve, (, RealVector, b, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, []
[int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (]
[int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (]
[int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (]
[;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (, b, ., getDimension, (, ), !=]
[=, qrt, [, 0, ], ., length, ;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw]
[0, ], ., length, ;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (]
[0, ], ., length, ;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (]
[(, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,]
[!=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, if, (]
[m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, if, (, !]
[(, b, ., getDimension, (, ), ,, m, ), ;, }, if, (, !, isNonSingular, (, ), ), {, throw]
[(, !, isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, double, [, ], x, =]
[(, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, double, [, ], x, =, new, double, []
[;, }, final, double, [, ], x, =, new, double, [, n, ], ;, final, double, [, ], y, =]
[;, }, final, double, [, ], x, =, new, double, [, n, ], ;, final, double, [, ], y, =]
[n, ], ;, final, double, [, ], y, =, b, ., toArray, (, ), ;, for, (, int, minor, =]
[;, final, double, [, ], y, =, b, ., toArray, (, ), ;, for, (, int, minor, =, 0, ;]
[;, final, double, [, ], y, =, b, ., toArray, (, ), ;, for, (, int, minor, =, 0, ;]
[double, [, ], y, =, b, ., toArray, (, ), ;, for, (, int, minor, =, 0, ;, minor, <]
[double, [, ], y, =, b, ., toArray, (, ), ;, for, (, int, minor, =, 0, ;, minor, <]
[=, b, ., toArray, (, ), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (]
[., toArray, (, ), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,]
[), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,, n, ), ;]
[), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,, n, ), ;]
[<, FastMath, ., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =]
[<, FastMath, ., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =]
[., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, []
[), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, double, dotProduct, =]
[double, [, ], qrtMinor, =, qrt, [, minor, ], ;, double, dotProduct, =, 0, ;, for, (, int, row, =]
[], qrtMinor, =, qrt, [, minor, ], ;, double, dotProduct, =, 0, ;, for, (, int, row, =, minor, ;]
[], qrtMinor, =, qrt, [, minor, ], ;, double, dotProduct, =, 0, ;, for, (, int, row, =, minor, ;]
[=, qrt, [, minor, ], ;, double, dotProduct, =, 0, ;, for, (, int, row, =, minor, ;, row, <]
[[, minor, ], ;, double, dotProduct, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[[, minor, ], ;, double, dotProduct, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[double, dotProduct, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {]
[=, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, dotProduct, +=]
[=, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, dotProduct, +=]
[=, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, dotProduct, +=]
[;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, dotProduct, +=, y, []
[int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, dotProduct, +=, y, [, row, ], *]
[int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, dotProduct, +=, y, [, row, ], *]
[=, minor, ;, row, <, m, ;, row, ++, ), {, dotProduct, +=, y, [, row, ], *, qrtMinor, []
[<, m, ;, row, ++, ), {, dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }]
[;, row, ++, ), {, dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=]
[;, row, ++, ), {, dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=]
[;, row, ++, ), {, dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=]
[++, ), {, dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=, rDiag, []
[dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=, rDiag, [, minor, ], *]
[dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=, rDiag, [, minor, ], *]
[y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor, []
[], ;, }, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =]
[}, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;]
[}, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;]
[/=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <]
[[, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[[, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {]
[qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {]
[minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, y, []
[for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, y, [, row, ], +=]
[for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, y, [, row, ], +=]
[int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, y, [, row, ], +=, dotProduct, *]
[int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, y, [, row, ], +=, dotProduct, *]
[=, minor, ;, row, <, m, ;, row, ++, ), {, y, [, row, ], +=, dotProduct, *, qrtMinor, []
[{, y, [, row, ], +=, dotProduct, *, qrtMinor, [, row, ], ;, }, }, for, (, int, row, =]
[{, y, [, row, ], +=, dotProduct, *, qrtMinor, [, row, ], ;, }, }, for, (, int, row, =]
[{, y, [, row, ], +=, dotProduct, *, qrtMinor, [, row, ], ;, }, }, for, (, int, row, =]
[], +=, dotProduct, *, qrtMinor, [, row, ], ;, }, }, for, (, int, row, =, rDiag, ., length, -]
[dotProduct, *, qrtMinor, [, row, ], ;, }, }, for, (, int, row, =, rDiag, ., length, -, 1, ;]
[dotProduct, *, qrtMinor, [, row, ], ;, }, }, for, (, int, row, =, rDiag, ., length, -, 1, ;]
[qrtMinor, [, row, ], ;, }, }, for, (, int, row, =, rDiag, ., length, -, 1, ;, row, >=]
[row, ], ;, }, }, for, (, int, row, =, rDiag, ., length, -, 1, ;, row, >=, 0, ;]
[], ;, }, }, for, (, int, row, =, rDiag, ., length, -, 1, ;, row, >=, 0, ;, --]
[}, for, (, int, row, =, rDiag, ., length, -, 1, ;, row, >=, 0, ;, --, row, ), {]
[}, for, (, int, row, =, rDiag, ., length, -, 1, ;, row, >=, 0, ;, --, row, ), {]
[(, int, row, =, rDiag, ., length, -, 1, ;, row, >=, 0, ;, --, row, ), {, y, []
[=, rDiag, ., length, -, 1, ;, row, >=, 0, ;, --, row, ), {, y, [, row, ], /=]
[=, rDiag, ., length, -, 1, ;, row, >=, 0, ;, --, row, ), {, y, [, row, ], /=]
[., length, -, 1, ;, row, >=, 0, ;, --, row, ), {, y, [, row, ], /=, rDiag, []
[0, ;, --, row, ), {, y, [, row, ], /=, rDiag, [, row, ], ;, final, double, yRow, =]
[0, ;, --, row, ), {, y, [, row, ], /=, rDiag, [, row, ], ;, final, double, yRow, =]
[--, row, ), {, y, [, row, ], /=, rDiag, [, row, ], ;, final, double, yRow, =, y, []
[rDiag, [, row, ], ;, final, double, yRow, =, y, [, row, ], ;, final, double, [, ], qrtRow, =]
[rDiag, [, row, ], ;, final, double, yRow, =, y, [, row, ], ;, final, double, [, ], qrtRow, =]
[row, ], ;, final, double, yRow, =, y, [, row, ], ;, final, double, [, ], qrtRow, =, qrt, []
[final, double, yRow, =, y, [, row, ], ;, final, double, [, ], qrtRow, =, qrt, [, row, ], ;]
[final, double, yRow, =, y, [, row, ], ;, final, double, [, ], qrtRow, =, qrt, [, row, ], ;]
[yRow, =, y, [, row, ], ;, final, double, [, ], qrtRow, =, qrt, [, row, ], ;, x, []
[[, row, ], ;, final, double, [, ], qrtRow, =, qrt, [, row, ], ;, x, [, row, ], =]
[], qrtRow, =, qrt, [, row, ], ;, x, [, row, ], =, yRow, ;, for, (, int, i, =]
[=, qrt, [, row, ], ;, x, [, row, ], =, yRow, ;, for, (, int, i, =, 0, ;]
[=, qrt, [, row, ], ;, x, [, row, ], =, yRow, ;, for, (, int, i, =, 0, ;]
[[, row, ], ;, x, [, row, ], =, yRow, ;, for, (, int, i, =, 0, ;, i, <]
[], ;, x, [, row, ], =, yRow, ;, for, (, int, i, =, 0, ;, i, <, row, ;]
[], ;, x, [, row, ], =, yRow, ;, for, (, int, i, =, 0, ;, i, <, row, ;]
[row, ], =, yRow, ;, for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, ), {]
[row, ], =, yRow, ;, for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, ), {]
[=, yRow, ;, for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, ), {, y, []
[for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, ), {, y, [, i, ], -=]
[for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, ), {, y, [, i, ], -=]
[int, i, =, 0, ;, i, <, row, ;, i, ++, ), {, y, [, i, ], -=, yRow, *]
[int, i, =, 0, ;, i, <, row, ;, i, ++, ), {, y, [, i, ], -=, yRow, *]
[=, 0, ;, i, <, row, ;, i, ++, ), {, y, [, i, ], -=, yRow, *, qrtRow, []
[;, i, ++, ), {, y, [, i, ], -=, yRow, *, qrtRow, [, i, ], ;, }, }, return]
[), {, y, [, i, ], -=, yRow, *, qrtRow, [, i, ], ;, }, }, return, new, ArrayRealVector, (]
[y, [, i, ], -=, yRow, *, qrtRow, [, i, ], ;, }, }, return, new, ArrayRealVector, (, x, ,]
[ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, n, =]
[ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, n, =]
[public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =]
[solve, (, RealMatrix, b, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, []
[int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (]
[int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (]
[int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (]
[;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (, b, ., getRowDimension, (, ), !=]
[=, qrt, [, 0, ], ., length, ;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw]
[0, ], ., length, ;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (]
[0, ], ., length, ;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (]
[(, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,]
[!=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, if, (]
[m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, if, (, !]
[(, b, ., getRowDimension, (, ), ,, m, ), ;, }, if, (, !, isNonSingular, (, ), ), {, throw]
[}, if, (, !, isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, int, columns, =]
[}, if, (, !, isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, int, columns, =]
[new, SingularMatrixException, (, ), ;, }, final, int, columns, =, b, ., getColumnDimension, (, ), ;, final, int, blockSize, =]
[new, SingularMatrixException, (, ), ;, }, final, int, columns, =, b, ., getColumnDimension, (, ), ;, final, int, blockSize, =]
[columns, =, b, ., getColumnDimension, (, ), ;, final, int, blockSize, =, BlockRealMatrix, ., BLOCK_SIZE, ;, final, int, cBlocks, =]
[columns, =, b, ., getColumnDimension, (, ), ;, final, int, blockSize, =, BlockRealMatrix, ., BLOCK_SIZE, ;, final, int, cBlocks, =]
[=, b, ., getColumnDimension, (, ), ;, final, int, blockSize, =, BlockRealMatrix, ., BLOCK_SIZE, ;, final, int, cBlocks, =, (]
[=, b, ., getColumnDimension, (, ), ;, final, int, blockSize, =, BlockRealMatrix, ., BLOCK_SIZE, ;, final, int, cBlocks, =, (]
[=, b, ., getColumnDimension, (, ), ;, final, int, blockSize, =, BlockRealMatrix, ., BLOCK_SIZE, ;, final, int, cBlocks, =, (]
[., getColumnDimension, (, ), ;, final, int, blockSize, =, BlockRealMatrix, ., BLOCK_SIZE, ;, final, int, cBlocks, =, (, columns, +]
[(, ), ;, final, int, blockSize, =, BlockRealMatrix, ., BLOCK_SIZE, ;, final, int, cBlocks, =, (, columns, +, blockSize, -]
[final, int, blockSize, =, BlockRealMatrix, ., BLOCK_SIZE, ;, final, int, cBlocks, =, (, columns, +, blockSize, -, 1, ), /]
[cBlocks, =, (, columns, +, blockSize, -, 1, ), /, blockSize, ;, final, double, [, ], [, ], xBlocks, =]
[cBlocks, =, (, columns, +, blockSize, -, 1, ), /, blockSize, ;, final, double, [, ], [, ], xBlocks, =]
[+, blockSize, -, 1, ), /, blockSize, ;, final, double, [, ], [, ], xBlocks, =, BlockRealMatrix, ., createBlocksLayout, (]
[-, 1, ), /, blockSize, ;, final, double, [, ], [, ], xBlocks, =, BlockRealMatrix, ., createBlocksLayout, (, n, ,]
[], xBlocks, =, BlockRealMatrix, ., createBlocksLayout, (, n, ,, columns, ), ;, final, double, [, ], [, ], y, =]
[BlockRealMatrix, ., createBlocksLayout, (, n, ,, columns, ), ;, final, double, [, ], [, ], y, =, new, double, []
[BlockRealMatrix, ., createBlocksLayout, (, n, ,, columns, ), ;, final, double, [, ], [, ], y, =, new, double, []
[), ;, final, double, [, ], [, ], y, =, new, double, [, b, ., getRowDimension, (, ), ], []
[=, new, double, [, b, ., getRowDimension, (, ), ], [, blockSize, ], ;, final, double, [, ], alpha, =]
[[, b, ., getRowDimension, (, ), ], [, blockSize, ], ;, final, double, [, ], alpha, =, new, double, []
[blockSize, ], ;, final, double, [, ], alpha, =, new, double, [, blockSize, ], ;, for, (, int, kBlock, =]
[;, final, double, [, ], alpha, =, new, double, [, blockSize, ], ;, for, (, int, kBlock, =, 0, ;]
[;, final, double, [, ], alpha, =, new, double, [, blockSize, ], ;, for, (, int, kBlock, =, 0, ;]
[double, [, ], alpha, =, new, double, [, blockSize, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <]
[], alpha, =, new, double, [, blockSize, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, cBlocks, ;]
[alpha, =, new, double, [, blockSize, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, cBlocks, ;, ++]
[;, for, (, int, kBlock, =, 0, ;, kBlock, <, cBlocks, ;, ++, kBlock, ), {, final, int, kStart, =]
[;, for, (, int, kBlock, =, 0, ;, kBlock, <, cBlocks, ;, ++, kBlock, ), {, final, int, kStart, =]
[(, int, kBlock, =, 0, ;, kBlock, <, cBlocks, ;, ++, kBlock, ), {, final, int, kStart, =, kBlock, *]
[kBlock, <, cBlocks, ;, ++, kBlock, ), {, final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd, =]
[kBlock, <, cBlocks, ;, ++, kBlock, ), {, final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd, =]
[++, kBlock, ), {, final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd, =, FastMath, ., min, (]
[++, kBlock, ), {, final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd, =, FastMath, ., min, (]
[), {, final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd, =, FastMath, ., min, (, kStart, +]
[final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd, =, FastMath, ., min, (, kStart, +, blockSize, ,]
[;, final, int, kEnd, =, FastMath, ., min, (, kStart, +, blockSize, ,, columns, ), ;, final, int, kWidth, =]
[;, final, int, kEnd, =, FastMath, ., min, (, kStart, +, blockSize, ,, columns, ), ;, final, int, kWidth, =]
[int, kEnd, =, FastMath, ., min, (, kStart, +, blockSize, ,, columns, ), ;, final, int, kWidth, =, kEnd, -]
[=, FastMath, ., min, (, kStart, +, blockSize, ,, columns, ), ;, final, int, kWidth, =, kEnd, -, kStart, ;]
[=, FastMath, ., min, (, kStart, +, blockSize, ,, columns, ), ;, final, int, kWidth, =, kEnd, -, kStart, ;]
[(, kStart, +, blockSize, ,, columns, ), ;, final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (]
[+, blockSize, ,, columns, ), ;, final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,]
[+, blockSize, ,, columns, ), ;, final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,]
[,, columns, ), ;, final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,, m, -]
[), ;, final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,, m, -, 1, ,]
[final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,, m, -, 1, ,, kStart, ,]
[final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,, m, -, 1, ,, kStart, ,]
[kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,, m, -, 1, ,, kStart, ,, kEnd, -]
[kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,, m, -, 1, ,, kStart, ,, kEnd, -, 1, ,]
[0, ,, m, -, 1, ,, kStart, ,, kEnd, -, 1, ,, y, ), ;, for, (, int, minor, =]
[m, -, 1, ,, kStart, ,, kEnd, -, 1, ,, y, ), ;, for, (, int, minor, =, 0, ;]
[m, -, 1, ,, kStart, ,, kEnd, -, 1, ,, y, ), ;, for, (, int, minor, =, 0, ;]
[1, ,, kStart, ,, kEnd, -, 1, ,, y, ), ;, for, (, int, minor, =, 0, ;, minor, <]
[1, ,, kStart, ,, kEnd, -, 1, ,, y, ), ;, for, (, int, minor, =, 0, ;, minor, <]
[kEnd, -, 1, ,, y, ), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (]
[1, ,, y, ), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,]
[), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,, n, ), ;]
[), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,, n, ), ;]
[<, FastMath, ., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =]
[<, FastMath, ., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =]
[., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, []
[;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =]
[;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =]
[++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =, 1.0, /]
[), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =, 1.0, /, (]
[), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =, 1.0, /, (]
[), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =, 1.0, /, (]
[final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =, 1.0, /, (, rDiag, []
[], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =, 1.0, /, (, rDiag, [, minor, ], *]
[], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =, 1.0, /, (, rDiag, [, minor, ], *]
[=, qrt, [, minor, ], ;, final, double, factor, =, 1.0, /, (, rDiag, [, minor, ], *, qrtMinor, []
[], ;, final, double, factor, =, 1.0, /, (, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ), ;]
[], ;, final, double, factor, =, 1.0, /, (, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ), ;]
[factor, =, 1.0, /, (, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ), ;, Arrays, ., fill, (]
[1.0, /, (, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ), ;, Arrays, ., fill, (, alpha, ,]
[(, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ), ;, Arrays, ., fill, (, alpha, ,, 0, ,]
[[, minor, ], *, qrtMinor, [, minor, ], ), ;, Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,]
[), ;, Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =]
[Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =, minor, ;]
[Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =, minor, ;]
[fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =, minor, ;, row, <]
[alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =, minor, ;, row, <, m, ;, ++]
[;, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {, final, double, d, =]
[;, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {, final, double, d, =]
[(, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {, final, double, d, =, qrtMinor, []
[;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =]
[;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =]
[row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =, y, []
[[, row, ], ;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =]
[], ;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;]
[], ;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;]
[final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;, k, <]
[[, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;]
[], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++]
[y, [, row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {]
[y, [, row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {]
[row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, []
[for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, [, k, ], +=]
[for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, [, k, ], +=]
[int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, [, k, ], +=, d, *]
[int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, [, k, ], +=, d, *]
[=, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, [, k, ], +=, d, *, yRow, []
[{, alpha, [, k, ], +=, d, *, yRow, [, k, ], ;, }, }, for, (, int, k, =]
[[, k, ], +=, d, *, yRow, [, k, ], ;, }, }, for, (, int, k, =, 0, ;]
[[, k, ], +=, d, *, yRow, [, k, ], ;, }, }, for, (, int, k, =, 0, ;]
[], +=, d, *, yRow, [, k, ], ;, }, }, for, (, int, k, =, 0, ;, k, <]
[d, *, yRow, [, k, ], ;, }, }, for, (, int, k, =, 0, ;, k, <, kWidth, ;]
[*, yRow, [, k, ], ;, }, }, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++]
[k, ], ;, }, }, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {]
[k, ], ;, }, }, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {]
[;, }, }, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, []
[for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, [, k, ], *=]
[<, kWidth, ;, ++, k, ), {, alpha, [, k, ], *=, factor, ;, }, for, (, int, row, =]
[;, ++, k, ), {, alpha, [, k, ], *=, factor, ;, }, for, (, int, row, =, minor, ;]
[;, ++, k, ), {, alpha, [, k, ], *=, factor, ;, }, for, (, int, row, =, minor, ;]
[k, ), {, alpha, [, k, ], *=, factor, ;, }, for, (, int, row, =, minor, ;, row, <]
[{, alpha, [, k, ], *=, factor, ;, }, for, (, int, row, =, minor, ;, row, <, m, ;]
[alpha, [, k, ], *=, factor, ;, }, for, (, int, row, =, minor, ;, row, <, m, ;, ++]
[}, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {, final, double, d, =]
[}, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {, final, double, d, =]
[(, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {, final, double, d, =, qrtMinor, []
[;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =]
[;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =]
[row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =, y, []
[[, row, ], ;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =]
[], ;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;]
[], ;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;]
[final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;, k, <]
[[, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;]
[], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++]
[y, [, row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {]
[y, [, row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {]
[row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yRow, []
[for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yRow, [, k, ], +=]
[for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yRow, [, k, ], +=]
[for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yRow, [, k, ], +=]
[int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yRow, [, k, ], +=, alpha, []
[0, ;, k, <, kWidth, ;, ++, k, ), {, yRow, [, k, ], +=, alpha, [, k, ], *]
[yRow, [, k, ], +=, alpha, [, k, ], *, d, ;, }, }, }, for, (, int, j, =]
[yRow, [, k, ], +=, alpha, [, k, ], *, d, ;, }, }, }, for, (, int, j, =]
[yRow, [, k, ], +=, alpha, [, k, ], *, d, ;, }, }, }, for, (, int, j, =]
[+=, alpha, [, k, ], *, d, ;, }, }, }, for, (, int, j, =, rDiag, ., length, -]
[[, k, ], *, d, ;, }, }, }, for, (, int, j, =, rDiag, ., length, -, 1, ;]
[[, k, ], *, d, ;, }, }, }, for, (, int, j, =, rDiag, ., length, -, 1, ;]
[], *, d, ;, }, }, }, for, (, int, j, =, rDiag, ., length, -, 1, ;, j, >=]
[d, ;, }, }, }, for, (, int, j, =, rDiag, ., length, -, 1, ;, j, >=, 0, ;]
[;, }, }, }, for, (, int, j, =, rDiag, ., length, -, 1, ;, j, >=, 0, ;, --]
[j, =, rDiag, ., length, -, 1, ;, j, >=, 0, ;, --, j, ), {, final, int, jBlock, =]
[j, =, rDiag, ., length, -, 1, ;, j, >=, 0, ;, --, j, ), {, final, int, jBlock, =]
[rDiag, ., length, -, 1, ;, j, >=, 0, ;, --, j, ), {, final, int, jBlock, =, j, /]
[j, >=, 0, ;, --, j, ), {, final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart, =]
[j, >=, 0, ;, --, j, ), {, final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart, =]
[0, ;, --, j, ), {, final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart, =, jBlock, *]
[final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart, =, jBlock, *, blockSize, ;, final, double, factor, =]
[final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart, =, jBlock, *, blockSize, ;, final, double, factor, =]
[jBlock, =, j, /, blockSize, ;, final, int, jStart, =, jBlock, *, blockSize, ;, final, double, factor, =, 1.0, /]
[jBlock, =, j, /, blockSize, ;, final, int, jStart, =, jBlock, *, blockSize, ;, final, double, factor, =, 1.0, /]
[j, /, blockSize, ;, final, int, jStart, =, jBlock, *, blockSize, ;, final, double, factor, =, 1.0, /, rDiag, []
[*, blockSize, ;, final, double, factor, =, 1.0, /, rDiag, [, j, ], ;, final, double, [, ], yJ, =]
[*, blockSize, ;, final, double, factor, =, 1.0, /, rDiag, [, j, ], ;, final, double, [, ], yJ, =]
[;, final, double, factor, =, 1.0, /, rDiag, [, j, ], ;, final, double, [, ], yJ, =, y, []
[j, ], ;, final, double, [, ], yJ, =, y, [, j, ], ;, final, double, [, ], xBlock, =]
[j, ], ;, final, double, [, ], yJ, =, y, [, j, ], ;, final, double, [, ], xBlock, =]
[;, final, double, [, ], yJ, =, y, [, j, ], ;, final, double, [, ], xBlock, =, xBlocks, []
[;, final, double, [, ], yJ, =, y, [, j, ], ;, final, double, [, ], xBlock, =, xBlocks, []
[;, final, double, [, ], yJ, =, y, [, j, ], ;, final, double, [, ], xBlock, =, xBlocks, []
[double, [, ], yJ, =, y, [, j, ], ;, final, double, [, ], xBlock, =, xBlocks, [, jBlock, *]
[], yJ, =, y, [, j, ], ;, final, double, [, ], xBlock, =, xBlocks, [, jBlock, *, cBlocks, +]
[], ;, final, double, [, ], xBlock, =, xBlocks, [, jBlock, *, cBlocks, +, kBlock, ], ;, int, index, =]
[], ;, final, double, [, ], xBlock, =, xBlocks, [, jBlock, *, cBlocks, +, kBlock, ], ;, int, index, =]
[;, final, double, [, ], xBlock, =, xBlocks, [, jBlock, *, cBlocks, +, kBlock, ], ;, int, index, =, (]
[;, final, double, [, ], xBlock, =, xBlocks, [, jBlock, *, cBlocks, +, kBlock, ], ;, int, index, =, (]
[double, [, ], xBlock, =, xBlocks, [, jBlock, *, cBlocks, +, kBlock, ], ;, int, index, =, (, j, -]
[xBlock, =, xBlocks, [, jBlock, *, cBlocks, +, kBlock, ], ;, int, index, =, (, j, -, jStart, ), *]
[+, kBlock, ], ;, int, index, =, (, j, -, jStart, ), *, kWidth, ;, for, (, int, k, =]
[], ;, int, index, =, (, j, -, jStart, ), *, kWidth, ;, for, (, int, k, =, 0, ;]
[], ;, int, index, =, (, j, -, jStart, ), *, kWidth, ;, for, (, int, k, =, 0, ;]
[int, index, =, (, j, -, jStart, ), *, kWidth, ;, for, (, int, k, =, 0, ;, k, <]
[=, (, j, -, jStart, ), *, kWidth, ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;]
[(, j, -, jStart, ), *, kWidth, ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++]
[jStart, ), *, kWidth, ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {]
[jStart, ), *, kWidth, ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {]
[*, kWidth, ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yJ, []
[for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yJ, [, k, ], *=]
[int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yJ, [, k, ], *=, factor, ;]
[int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yJ, [, k, ], *=, factor, ;]
[=, 0, ;, k, <, kWidth, ;, ++, k, ), {, yJ, [, k, ], *=, factor, ;, xBlock, []
[=, 0, ;, k, <, kWidth, ;, ++, k, ), {, yJ, [, k, ], *=, factor, ;, xBlock, []
[<, kWidth, ;, ++, k, ), {, yJ, [, k, ], *=, factor, ;, xBlock, [, index, ++, ], =]
[<, kWidth, ;, ++, k, ), {, yJ, [, k, ], *=, factor, ;, xBlock, [, index, ++, ], =]
[;, ++, k, ), {, yJ, [, k, ], *=, factor, ;, xBlock, [, index, ++, ], =, yJ, []
[factor, ;, xBlock, [, index, ++, ], =, yJ, [, k, ], ;, }, final, double, [, ], qrtJ, =]
[factor, ;, xBlock, [, index, ++, ], =, yJ, [, k, ], ;, }, final, double, [, ], qrtJ, =]
[xBlock, [, index, ++, ], =, yJ, [, k, ], ;, }, final, double, [, ], qrtJ, =, qrt, []
[k, ], ;, }, final, double, [, ], qrtJ, =, qrt, [, j, ], ;, for, (, int, i, =]
[;, }, final, double, [, ], qrtJ, =, qrt, [, j, ], ;, for, (, int, i, =, 0, ;]
[;, }, final, double, [, ], qrtJ, =, qrt, [, j, ], ;, for, (, int, i, =, 0, ;]
[final, double, [, ], qrtJ, =, qrt, [, j, ], ;, for, (, int, i, =, 0, ;, i, <]
[[, ], qrtJ, =, qrt, [, j, ], ;, for, (, int, i, =, 0, ;, i, <, j, ;]
[], qrtJ, =, qrt, [, j, ], ;, for, (, int, i, =, 0, ;, i, <, j, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, final, double, rIJ, =]
[;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, final, double, rIJ, =]
[(, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, final, double, rIJ, =, qrtJ, []
[;, ++, i, ), {, final, double, rIJ, =, qrtJ, [, i, ], ;, final, double, [, ], yI, =]
[;, ++, i, ), {, final, double, rIJ, =, qrtJ, [, i, ], ;, final, double, [, ], yI, =]
[i, ), {, final, double, rIJ, =, qrtJ, [, i, ], ;, final, double, [, ], yI, =, y, []
[[, i, ], ;, final, double, [, ], yI, =, y, [, i, ], ;, for, (, int, k, =]
[], ;, final, double, [, ], yI, =, y, [, i, ], ;, for, (, int, k, =, 0, ;]
[], ;, final, double, [, ], yI, =, y, [, i, ], ;, for, (, int, k, =, 0, ;]
[final, double, [, ], yI, =, y, [, i, ], ;, for, (, int, k, =, 0, ;, k, <]
[[, ], yI, =, y, [, i, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;]
[], yI, =, y, [, i, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++]
[y, [, i, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {]
[y, [, i, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {]
[i, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yI, []
[for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yI, [, k, ], -=]
[for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yI, [, k, ], -=]
[for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yI, [, k, ], -=]
[int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yI, [, k, ], -=, yJ, []
[0, ;, k, <, kWidth, ;, ++, k, ), {, yI, [, k, ], -=, yJ, [, k, ], *]
[k, ), {, yI, [, k, ], -=, yJ, [, k, ], *, rIJ, ;, }, }, }, }, return]
[yI, [, k, ], -=, yJ, [, k, ], *, rIJ, ;, }, }, }, }, return, new, BlockRealMatrix, (]
[k, ], -=, yJ, [, k, ], *, rIJ, ;, }, }, }, }, return, new, BlockRealMatrix, (, n, ,]
[-=, yJ, [, k, ], *, rIJ, ;, }, }, }, }, return, new, BlockRealMatrix, (, n, ,, columns, ,]
[[, k, ], *, rIJ, ;, }, }, }, }, return, new, BlockRealMatrix, (, n, ,, columns, ,, xBlocks, ,]
[new, BlockRealMatrix, (, n, ,, columns, ,, xBlocks, ,, false, ), ;, }, public, RealMatrix, getInverse, (, ), {, return]
[(, n, ,, columns, ,, xBlocks, ,, false, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (]
[(, n, ,, columns, ,, xBlocks, ,, false, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (]
[,, xBlocks, ,, false, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (]
[,, xBlocks, ,, false, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (]
