[=, mask, ;, int, count, =, 0, ;, int, bit_pattern, =, mask, ;, if, (, bit_pattern, !=, 0, ), {]
[;, int, count, =, 0, ;, int, bit_pattern, =, mask, ;, if, (, bit_pattern, !=, 0, ), {, while, (]
[;, int, bit_pattern, =, mask, ;, if, (, bit_pattern, !=, 0, ), {, while, (, (, bit_pattern, &, 1, )]
[;, if, (, bit_pattern, !=, 0, ), {, while, (, (, bit_pattern, &, 1, ), ==, 0, ), {, count]
[), {, while, (, (, bit_pattern, &, 1, ), ==, 0, ), {, count, ++, ;, bit_pattern, >>=, 1, ;]
[!=, 0, ), {, while, (, (, bit_pattern, &, 1, ), ==, 0, ), {, count, ++, ;, bit_pattern, >>=]
[), {, while, (, (, bit_pattern, &, 1, ), ==, 0, ), {, count, ++, ;, bit_pattern, >>=, 1, ;]
[), {, count, ++, ;, bit_pattern, >>=, 1, ;, }, }, _shift_count, =, count, ;, }, public, int, getValue, (]
[==, 0, ), {, count, ++, ;, bit_pattern, >>=, 1, ;, }, }, _shift_count, =, count, ;, }, public, int]
[), ==, 0, ), {, count, ++, ;, bit_pattern, >>=, 1, ;, }, }, _shift_count, =, count, ;, }, public]
[&, 1, ), ==, 0, ), {, count, ++, ;, bit_pattern, >>=, 1, ;, }, }, _shift_count, =, count, ;]
[), ==, 0, ), {, count, ++, ;, bit_pattern, >>=, 1, ;, }, }, _shift_count, =, count, ;, }, public]
[), {, count, ++, ;, bit_pattern, >>=, 1, ;, }, }, _shift_count, =, count, ;, }, public, int, getValue, (]
[;, bit_pattern, >>=, 1, ;, }, }, _shift_count, =, count, ;, }, public, int, getValue, (, final, int, holder, )]
[++, ;, bit_pattern, >>=, 1, ;, }, }, _shift_count, =, count, ;, }, public, int, getValue, (, final, int, holder]
[>>=, 1, ;, }, }, _shift_count, =, count, ;, }, public, int, getValue, (, final, int, holder, ), {, return]
[;, }, }, _shift_count, =, count, ;, }, public, int, getValue, (, final, int, holder, ), {, return, getRawValue, (]
[=, count, ;, }, public, int, getValue, (, final, int, holder, ), {, return, getRawValue, (, holder, ), >, >]
[;, }, public, int, getValue, (, final, int, holder, ), {, return, getRawValue, (, holder, ), >, >, _shift_count, ;]
[;, }, public, short, getShortValue, (, final, short, holder, ), {, return, (, short, ), getValue, (, holder, ), ;]
[>, >, _shift_count, ;, }, public, short, getShortValue, (, final, short, holder, ), {, return, (, short, ), getValue, (]
[), >, >, _shift_count, ;, }, public, short, getShortValue, (, final, short, holder, ), {, return, (, short, ), getValue]
[;, }, public, short, getShortValue, (, final, short, holder, ), {, return, (, short, ), getValue, (, holder, ), ;]
[;, }, public, int, getRawValue, (, final, int, holder, ), {, return, holder, &, _mask, ;, }, public, short, getShortRawValue]
[;, }, public, int, getRawValue, (, final, int, holder, ), {, return, holder, &, _mask, ;, }, public, short, getShortRawValue]
[), ;, }, public, int, getRawValue, (, final, int, holder, ), {, return, holder, &, _mask, ;, }, public, short]
[;, }, public, short, getShortRawValue, (, final, short, holder, ), {, return, (, short, ), getRawValue, (, holder, ), ;]
[&, _mask, ;, }, public, short, getShortRawValue, (, final, short, holder, ), {, return, (, short, ), getRawValue, (, holder]
[;, }, public, short, getShortRawValue, (, final, short, holder, ), {, return, (, short, ), getRawValue, (, holder, ), ;]
[;, }, public, boolean, isSet, (, final, int, holder, ), {, return, (, holder, &, _mask, ), !=, 0, ;]
[;, }, public, boolean, isSet, (, final, int, holder, ), {, return, (, holder, &, _mask, ), !=, 0, ;]
[), ;, }, public, boolean, isSet, (, final, int, holder, ), {, return, (, holder, &, _mask, ), !=, 0]
[;, }, public, boolean, isAllSet, (, final, int, holder, ), {, return, (, holder, &, _mask, ), ==, _mask, ;]
[!=, 0, ;, }, public, boolean, isAllSet, (, final, int, holder, ), {, return, (, holder, &, _mask, ), ==]
[), !=, 0, ;, }, public, boolean, isAllSet, (, final, int, holder, ), {, return, (, holder, &, _mask, )]
[&, _mask, ), !=, 0, ;, }, public, boolean, isAllSet, (, final, int, holder, ), {, return, (, holder, &]
[), !=, 0, ;, }, public, boolean, isAllSet, (, final, int, holder, ), {, return, (, holder, &, _mask, )]
[;, }, public, boolean, isAllSet, (, final, int, holder, ), {, return, (, holder, &, _mask, ), ==, _mask, ;]
[;, }, public, int, setValue, (, final, int, holder, ,, final, int, value, ), {, return, (, holder, &, ~]
[==, _mask, ;, }, public, int, setValue, (, final, int, holder, ,, final, int, value, ), {, return, (, holder]
[), ==, _mask, ;, }, public, int, setValue, (, final, int, holder, ,, final, int, value, ), {, return, (]
[&, _mask, ), ==, _mask, ;, }, public, int, setValue, (, final, int, holder, ,, final, int, value, ), {]
[), ==, _mask, ;, }, public, int, setValue, (, final, int, holder, ,, final, int, value, ), {, return, (]
[;, }, public, int, setValue, (, final, int, holder, ,, final, int, value, ), {, return, (, holder, &, ~]
[;, }, public, short, setShortValue, (, final, short, holder, ,, final, short, value, ), {, return, (, short, ), setValue]
[|, (, (, value, <<, _shift_count, ), &, _mask, ), ;, }, public, short, setShortValue, (, final, short, holder, ,]
[), |, (, (, value, <<, _shift_count, ), &, _mask, ), ;, }, public, short, setShortValue, (, final, short, holder]
[&, ~, _mask, ), |, (, (, value, <<, _shift_count, ), &, _mask, ), ;, }, public, short, setShortValue, (]
[), |, (, (, value, <<, _shift_count, ), &, _mask, ), ;, }, public, short, setShortValue, (, final, short, holder]
[), |, (, (, value, <<, _shift_count, ), &, _mask, ), ;, }, public, short, setShortValue, (, final, short, holder]
[;, }, public, short, setShortValue, (, final, short, holder, ,, final, short, value, ), {, return, (, short, ), setValue]
[), ;, }, public, short, setShortValue, (, final, short, holder, ,, final, short, value, ), {, return, (, short, )]
[&, _mask, ), ;, }, public, short, setShortValue, (, final, short, holder, ,, final, short, value, ), {, return, (]
[), &, _mask, ), ;, }, public, short, setShortValue, (, final, short, holder, ,, final, short, value, ), {, return]
[<<, _shift_count, ), &, _mask, ), ;, }, public, short, setShortValue, (, final, short, holder, ,, final, short, value, )]
[), &, _mask, ), ;, }, public, short, setShortValue, (, final, short, holder, ,, final, short, value, ), {, return]
[), ;, }, public, short, setShortValue, (, final, short, holder, ,, final, short, value, ), {, return, (, short, )]
[;, }, public, int, clear, (, final, int, holder, ), {, return, holder, &, ~, _mask, ;, }, public, short]
[;, }, public, int, clear, (, final, int, holder, ), {, return, holder, &, ~, _mask, ;, }, public, short]
[,, value, ), ;, }, public, int, clear, (, final, int, holder, ), {, return, holder, &, ~, _mask, ;]
[), ;, }, public, int, clear, (, final, int, holder, ), {, return, holder, &, ~, _mask, ;, }, public]
[;, }, public, short, clearShort, (, final, short, holder, ), {, return, (, short, ), clear, (, holder, ), ;]
[&, ~, _mask, ;, }, public, short, clearShort, (, final, short, holder, ), {, return, (, short, ), clear, (]
[;, }, public, short, clearShort, (, final, short, holder, ), {, return, (, short, ), clear, (, holder, ), ;]
[;, }, public, short, clearShort, (, final, short, holder, ), {, return, (, short, ), clear, (, holder, ), ;]
[;, }, public, byte, clearByte, (, final, byte, holder, ), {, return, (, byte, ), clear, (, holder, ), ;]
[;, }, public, byte, clearByte, (, final, byte, holder, ), {, return, (, byte, ), clear, (, holder, ), ;]
[), ;, }, public, byte, clearByte, (, final, byte, holder, ), {, return, (, byte, ), clear, (, holder, )]
[;, }, public, int, set, (, final, int, holder, ), {, return, holder, |, _mask, ;, }, public, short, setShort]
[;, }, public, int, set, (, final, int, holder, ), {, return, holder, |, _mask, ;, }, public, short, setShort]
[), ;, }, public, int, set, (, final, int, holder, ), {, return, holder, |, _mask, ;, }, public, short]
[;, }, public, short, setShort, (, final, short, holder, ), {, return, (, short, ), set, (, holder, ), ;]
[|, _mask, ;, }, public, short, setShort, (, final, short, holder, ), {, return, (, short, ), set, (, holder]
[;, }, public, short, setShort, (, final, short, holder, ), {, return, (, short, ), set, (, holder, ), ;]
[;, }, public, byte, setByte, (, final, byte, holder, ), {, return, (, byte, ), set, (, holder, ), ;]
[;, }, public, byte, setByte, (, final, byte, holder, ), {, return, (, byte, ), set, (, holder, ), ;]
[), ;, }, public, byte, setByte, (, final, byte, holder, ), {, return, (, byte, ), set, (, holder, )]
[;, }, public, int, setBoolean, (, final, int, holder, ,, final, boolean, flag, ), {, return, flag, ?, set, (]
[;, }, public, int, setBoolean, (, final, int, holder, ,, final, boolean, flag, ), {, return, flag, ?, set, (]
[), ;, }, public, int, setBoolean, (, final, int, holder, ,, final, boolean, flag, ), {, return, flag, ?, set]
[;, }, public, short, setShortBoolean, (, final, short, holder, ,, final, boolean, flag, ), {, return, flag, ?, setShort, (]
[?, set, (, holder, ), :, clear, (, holder, ), ;, }, public, short, setShortBoolean, (, final, short, holder, ,]
[:, clear, (, holder, ), ;, }, public, short, setShortBoolean, (, final, short, holder, ,, final, boolean, flag, ), {]
[), :, clear, (, holder, ), ;, }, public, short, setShortBoolean, (, final, short, holder, ,, final, boolean, flag, )]
[;, }, public, short, setShortBoolean, (, final, short, holder, ,, final, boolean, flag, ), {, return, flag, ?, setShort, (]
[), ;, }, public, short, setShortBoolean, (, final, short, holder, ,, final, boolean, flag, ), {, return, flag, ?, setShort]
[;, }, public, byte, setByteBoolean, (, final, byte, holder, ,, final, boolean, flag, ), {, return, flag, ?, setByte, (]
[?, setShort, (, holder, ), :, clearShort, (, holder, ), ;, }, public, byte, setByteBoolean, (, final, byte, holder, ,]
[:, clearShort, (, holder, ), ;, }, public, byte, setByteBoolean, (, final, byte, holder, ,, final, boolean, flag, ), {]
[), :, clearShort, (, holder, ), ;, }, public, byte, setByteBoolean, (, final, byte, holder, ,, final, boolean, flag, )]
[;, }, public, byte, setByteBoolean, (, final, byte, holder, ,, final, boolean, flag, ), {, return, flag, ?, setByte, (]
[), ;, }, public, byte, setByteBoolean, (, final, byte, holder, ,, final, boolean, flag, ), {, return, flag, ?, setByte]
[;, }, }]
[?, setByte, (, holder, ), :, clearByte, (, holder, ), ;, }, }]
[:, clearByte, (, holder, ), ;, }, }]
[), :, clearByte, (, holder, ), ;, }, }]
[;, }, }]
[), ;, }, }]
