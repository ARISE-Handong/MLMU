[;, private, T, [, ], [, ], data, ;, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ), {]
[), ;, }, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rowDimension, ,, final, int, columnDimension]
[,, rowDimension, ,, columnDimension, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, rowDimension, ,, columnDimension, ), ;, }]
[,, columnDimension, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, rowDimension, ,, columnDimension, ), ;, }, public, Array2DRowFieldMatrix]
[), ;, data, =, MathArrays, ., buildArray, (, field, ,, rowDimension, ,, columnDimension, ), ;, }, public, Array2DRowFieldMatrix, (, final]
[=, MathArrays, ., buildArray, (, field, ,, rowDimension, ,, columnDimension, ), ;, }, public, Array2DRowFieldMatrix, (, final, T, [, ]]
[;, }, public, Array2DRowFieldMatrix, (, final, T, [, ], [, ], d, ), throws, DimensionMismatchException, ,, NullArgumentException, ,, NoDataException, {]
[., buildArray, (, field, ,, rowDimension, ,, columnDimension, ), ;, }, public, Array2DRowFieldMatrix, (, final, T, [, ], [, ]]
[,, rowDimension, ,, columnDimension, ), ;, }, public, Array2DRowFieldMatrix, (, final, T, [, ], [, ], d, ), throws, DimensionMismatchException]
[,, columnDimension, ), ;, }, public, Array2DRowFieldMatrix, (, final, T, [, ], [, ], d, ), throws, DimensionMismatchException, ,, NullArgumentException]
[), ;, }, public, Array2DRowFieldMatrix, (, final, T, [, ], [, ], d, ), throws, DimensionMismatchException, ,, NullArgumentException, ,, NoDataException]
[,, d, ), ;, }, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, T, [, ], []
[), ,, d, ), ;, }, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, T, [, ]]
[), ;, }, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, T, [, ], [, ], d]
[), ;, copyIn, (, d, ), ;, }, public, Array2DRowFieldMatrix, (, final, T, [, ], [, ], d, ,, final]
[;, }, public, Array2DRowFieldMatrix, (, final, T, [, ], [, ], d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,]
[), ;, }, public, Array2DRowFieldMatrix, (, final, T, [, ], [, ], d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException]
[,, d, ,, copyArray, ), ;, }, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, T, []
[), ,, d, ,, copyArray, ), ;, }, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, T]
[,, copyArray, ), ;, }, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, T, [, ], []
[), ;, }, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, T, [, ], [, ], d]
[), ;, if, (, copyArray, ), {, copyIn, (, d, ), ;, }, else, {, MathUtils, ., checkNotNull, (, d]
[), {, copyIn, (, d, ), ;, }, else, {, MathUtils, ., checkNotNull, (, d, ), ;, final, int, nRows]
[;, }, else, {, MathUtils, ., checkNotNull, (, d, ), ;, final, int, nRows, =, d, ., length, ;, if]
[), ;, }, else, {, MathUtils, ., checkNotNull, (, d, ), ;, final, int, nRows, =, d, ., length, ;]
[;, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[., checkNotNull, (, d, ), ;, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==, 0, )]
[), ;, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException]
[;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int]
[., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ]]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, []
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ]]
[;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {]
[), ;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==, 0, )]
[., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==]
[;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (]
[., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }]
[[, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN]
[], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r]
[;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (, d]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (]
[., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {]
[;, r, <, nRows, ;, r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, )]
[;, r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[<, nRows, ;, r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw]
[;, r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols]
[), {, throw, new, DimensionMismatchException, (, nCols, ,, d, [, r, ], ., length, ), ;, }, }, data, =]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, d, [, r, ], ., length, ), ;, }, }]
[., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, d, [, r, ], ., length, ), ;]
[[, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, d, [, r, ], .]
[], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, d, [, r, ], ., length, )]
[), {, throw, new, DimensionMismatchException, (, nCols, ,, d, [, r, ], ., length, ), ;, }, }, data, =]
[;, }, }, data, =, d, ;, }, }, public, Array2DRowFieldMatrix, (, final, T, [, ], v, ), throws, NoDataException]
[,, d, [, r, ], ., length, ), ;, }, }, data, =, d, ;, }, }, public, Array2DRowFieldMatrix, (]
[), ;, }, }, data, =, d, ;, }, }, public, Array2DRowFieldMatrix, (, final, T, [, ], v, ), throws]
[., length, ), ;, }, }, data, =, d, ;, }, }, public, Array2DRowFieldMatrix, (, final, T, [, ], v]
[[, r, ], ., length, ), ;, }, }, data, =, d, ;, }, }, public, Array2DRowFieldMatrix, (, final, T]
[], ., length, ), ;, }, }, data, =, d, ;, }, }, public, Array2DRowFieldMatrix, (, final, T, [, ]]
[=, d, ;, }, }, public, Array2DRowFieldMatrix, (, final, T, [, ], v, ), throws, NoDataException, {, this, (, extractField]
[;, }, }, public, Array2DRowFieldMatrix, (, final, T, [, ], v, ), throws, NoDataException, {, this, (, extractField, (, v]
[,, v, ), ;, }, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, T, [, ], v]
[), ,, v, ), ;, }, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, T, [, ]]
[), ;, }, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, T, [, ], v, ), {]
[), ;, final, int, nRows, =, v, ., length, ;, data, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[;, data, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, row]
[., length, ;, data, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, 1, ), ;, for, (]
[=, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, row, =, 0]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row, ]]
[., buildArray, (, getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, row, =, 0, ;, row]
[,, nRows, ,, 1, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, )]
[,, 1, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data]
[), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row]
[;, row, <, nRows, ;, row, ++, ), {, data, [, row, ], [, 0, ], =, v, [, row]
[;, row, ++, ), {, data, [, row, ], [, 0, ], =, v, [, row, ], ;, }, }]
[<, nRows, ;, row, ++, ), {, data, [, row, ], [, 0, ], =, v, [, row, ], ;]
[;, row, ++, ), {, data, [, row, ], [, 0, ], =, v, [, row, ], ;, }, }]
[), {, data, [, row, ], [, 0, ], =, v, [, row, ], ;, }, }, @, Override, public]
[++, ), {, data, [, row, ], [, 0, ], =, v, [, row, ], ;, }, }, @, Override]
[=, v, [, row, ], ;, }, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, final, int, rowDimension]
[[, 0, ], =, v, [, row, ], ;, }, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (]
[[, row, ], [, 0, ], =, v, [, row, ], ;, }, }, @, Override, public, FieldMatrix, <, T]
[], [, 0, ], =, v, [, row, ], ;, }, }, @, Override, public, FieldMatrix, <, T, >, createMatrix]
[], =, v, [, row, ], ;, }, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, final, int]
[;, }, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, )]
[[, row, ], ;, }, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, final, int, rowDimension, ,, final]
[], ;, }, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension]
[;, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, return, new, Array2DRowFieldMatrix, <, T, >, (]
[,, rowDimension, ,, columnDimension, ), ;, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, return, new]
[,, columnDimension, ), ;, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, return, new, Array2DRowFieldMatrix, <]
[), ;, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, return, new, Array2DRowFieldMatrix, <, T, >]
[;, }, public, Array2DRowFieldMatrix, <, T, >, add, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, checkAdditionCompatible]
[,, copyOut, (, ), ,, false, ), ;, }, public, Array2DRowFieldMatrix, <, T, >, add, (, final, Array2DRowFieldMatrix, <, T]
[,, false, ), ;, }, public, Array2DRowFieldMatrix, <, T, >, add, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws]
[), ;, }, public, Array2DRowFieldMatrix, <, T, >, add, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {]
[;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, T, []
[), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, T]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray]
[;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, rowCount, ,, columnCount]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, T, [, ]]
[., buildArray, (, getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row]
[,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, )]
[,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final]
[), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, T, []
[;, row, <, rowCount, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;]
[;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ]]
[<, rowCount, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T]
[;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ]]
[), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =, m]
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =]
[;, final, T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, [, ], outDataRow, =]
[[, row, ], ;, final, T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, []
[], ;, final, T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, [, ], outDataRow]
[;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col]
[[, row, ], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =]
[., data, [, row, ], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int]
[], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ]]
[[, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow]
[], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col]
[;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., add]
[;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., add, (, mRow, [, col]
[<, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., add, (, mRow]
[;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., add, (, mRow, [, col]
[), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., add, (, mRow, [, col, ], ), ;]
[++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., add, (, mRow, [, col, ], )]
[=, dataRow, [, col, ], ., add, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <]
[[, col, ], =, dataRow, [, col, ], ., add, (, mRow, [, col, ], ), ;, }, }, return]
[], =, dataRow, [, col, ], ., add, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix]
[;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,, false, ), ;, }]
[., add, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (]
[[, col, ], ., add, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >]
[], ., add, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField]
[), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,, false, ), ;]
[[, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,]
[], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,, false, )]
[;, }, public, Array2DRowFieldMatrix, <, T, >, subtract, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, checkSubtractionCompatible]
[,, outData, ,, false, ), ;, }, public, Array2DRowFieldMatrix, <, T, >, subtract, (, final, Array2DRowFieldMatrix, <, T, >, m]
[,, false, ), ;, }, public, Array2DRowFieldMatrix, <, T, >, subtract, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws]
[), ;, }, public, Array2DRowFieldMatrix, <, T, >, subtract, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {]
[;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, T, []
[), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, T]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray]
[;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, rowCount, ,, columnCount]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, T, [, ]]
[., buildArray, (, getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row]
[,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, )]
[,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final]
[), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, T, []
[;, row, <, rowCount, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;]
[;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ]]
[<, rowCount, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T]
[;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ]]
[), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =, m]
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =]
[;, final, T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, [, ], outDataRow, =]
[[, row, ], ;, final, T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, []
[], ;, final, T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, [, ], outDataRow]
[;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col]
[[, row, ], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =]
[., data, [, row, ], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int]
[], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ]]
[[, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow]
[], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col]
[;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., subtract]
[;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., subtract, (, mRow, [, col]
[<, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., subtract, (, mRow]
[;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., subtract, (, mRow, [, col]
[), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., subtract, (, mRow, [, col, ], ), ;]
[++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., subtract, (, mRow, [, col, ], )]
[=, dataRow, [, col, ], ., subtract, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <]
[[, col, ], =, dataRow, [, col, ], ., subtract, (, mRow, [, col, ], ), ;, }, }, return]
[], =, dataRow, [, col, ], ., subtract, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix]
[;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,, false, ), ;, }]
[., subtract, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (]
[[, col, ], ., subtract, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >]
[], ., subtract, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField]
[), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,, false, ), ;]
[[, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,]
[], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,, false, )]
[;, }, public, Array2DRowFieldMatrix, <, T, >, multiply, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, checkMultiplicationCompatible]
[,, outData, ,, false, ), ;, }, public, Array2DRowFieldMatrix, <, T, >, multiply, (, final, Array2DRowFieldMatrix, <, T, >, m]
[,, false, ), ;, }, public, Array2DRowFieldMatrix, <, T, >, multiply, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws]
[), ;, }, public, Array2DRowFieldMatrix, <, T, >, multiply, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {]
[;, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, )]
[), ;, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (]
[;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =, this, ., getColumnDimension, (, )]
[., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =, this]
[;, final, int, nSum, =, this, ., getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =, MathArrays]
[., getColumnDimension, (, ), ;, final, int, nSum, =, this, ., getColumnDimension, (, ), ;, final, T, [, ], []
[;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, nCols]
[., getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (, getField, (, )]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, T, [, ]]
[., buildArray, (, getField, (, ), ,, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;, row]
[,, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, )]
[,, nCols, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final]
[), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, T, []
[;, row, <, nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;]
[;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ]]
[<, nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T]
[;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ]]
[), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], outDataRow, =, outData]
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], outDataRow, =]
[;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col]
[[, row, ], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =]
[], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[;, for, (, int, col, =, 0, ;, col, <, nCols, ;, col, ++, ), {, T, sum, =, getField]
[[, row, ], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, col, ++, ), {, T]
[], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, col, ++, ), {, T, sum, =]
[;, col, <, nCols, ;, col, ++, ), {, T, sum, =, getField, (, ), ., getZero, (, ), ;]
[;, col, ++, ), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i]
[<, nCols, ;, col, ++, ), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (]
[;, col, ++, ), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i]
[), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;]
[++, ), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, =, sum, .]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {]
[;, i, <, nSum, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], .]
[;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (, m, .]
[<, nSum, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (]
[;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (, m, .]
[), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (, m, ., data, [, i]
[++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (, m, ., data, []
[=, sum, ., add, (, dataRow, [, i, ], ., multiply, (, m, ., data, [, i, ], [, col]
[;, }, outDataRow, [, col, ], =, sum, ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (]
[., add, (, dataRow, [, i, ], ., multiply, (, m, ., data, [, i, ], [, col, ], )]
[), ;, }, outDataRow, [, col, ], =, sum, ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField]
[., multiply, (, m, ., data, [, i, ], [, col, ], ), ), ;, }, outDataRow, [, col, ]]
[[, i, ], ., multiply, (, m, ., data, [, i, ], [, col, ], ), ), ;, }, outDataRow]
[], ., multiply, (, m, ., data, [, i, ], [, col, ], ), ), ;, }, outDataRow, [, col]
[), ), ;, }, outDataRow, [, col, ], =, sum, ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (]
[[, col, ], ), ), ;, }, outDataRow, [, col, ], =, sum, ;, }, }, return, new, Array2DRowFieldMatrix, <]
[[, i, ], [, col, ], ), ), ;, }, outDataRow, [, col, ], =, sum, ;, }, }, return]
[., data, [, i, ], [, col, ], ), ), ;, }, outDataRow, [, col, ], =, sum, ;, }]
[], [, col, ], ), ), ;, }, outDataRow, [, col, ], =, sum, ;, }, }, return, new, Array2DRowFieldMatrix]
[], ), ), ;, }, outDataRow, [, col, ], =, sum, ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >]
[=, sum, ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,, false, )]
[[, col, ], =, sum, ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData]
[], =, sum, ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,, false]
[;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,, false, ), ;, }]
[;, }, @, Override, public, T, [, ], [, ], getData, (, ), {, return, copyOut, (, ), ;, }]
[,, outData, ,, false, ), ;, }, @, Override, public, T, [, ], [, ], getData, (, ), {, return]
[,, false, ), ;, }, @, Override, public, T, [, ], [, ], getData, (, ), {, return, copyOut, (]
[), ;, }, @, Override, public, T, [, ], [, ], getData, (, ), {, return, copyOut, (, ), ;]
[;, }, public, T, [, ], [, ], getDataRef, (, ), {, return, data, ;, }, @, Override, public, void]
[;, }, @, Override, public, void, setSubMatrix, (, final, T, [, ], [, ], subMatrix, ,, final, int, row, ,]
[), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;]
[==, null, ), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row]
[), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, )]
[>, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, )]
[;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;]
[,, row, ), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,]
[., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, .]
[), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, )]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, final, int, nRows, =, subMatrix, .]
[>, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, final, int, nRows, =]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, final, int, nRows, =, subMatrix, .]
[;, }, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException]
[,, column, ), ;, }, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {]
[., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0]
[), ;, }, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new]
[;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int]
[., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ]]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, []
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ]]
[;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {]
[), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, )]
[., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==]
[;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =]
[., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }]
[[, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN]
[], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, MathArrays, ., buildArray, (, getField, (]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, MathArrays, ., buildArray, (]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, MathArrays, ., buildArray, (, getField, (]
[;, }, data, =, MathArrays, ., buildArray, (, getField, (, ), ,, subMatrix, ., length, ,, nCols, ), ;, for]
[), ;, }, data, =, MathArrays, ., buildArray, (, getField, (, ), ,, subMatrix, ., length, ,, nCols, ), ;]
[., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, MathArrays, ., buildArray, (, getField, (, ), ,, subMatrix, ., length, ,, nCols]
[=, MathArrays, ., buildArray, (, getField, (, ), ,, subMatrix, ., length, ,, nCols, ), ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[., buildArray, (, getField, (, ), ,, subMatrix, ., length, ,, nCols, ), ;, for, (, int, i, =, 0]
[,, subMatrix, ., length, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length]
[,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, )]
[., length, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if]
[;, i, <, data, ., length, ;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=]
[;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[<, data, ., length, ;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, )]
[;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[., length, ;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw]
[), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, i, ], ., length, ), ;, }, System, ., arraycopy]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, i, ], ., length, ), ;, }, System]
[., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, i, ], ., length, ), ;]
[[, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, i, ], .]
[], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, i, ], ., length, )]
[), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, i, ], ., length, ), ;, }, System, ., arraycopy]
[;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +, row, ], ,]
[,, subMatrix, [, i, ], ., length, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0]
[), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +, row, ]]
[., length, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +]
[[, i, ], ., length, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data]
[], ., length, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i]
[;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column, ), ;, }, }, @, Override]
[., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols]
[,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super]
[[, i, ], ,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }]
[], ,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {]
[,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix]
[,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column, )]
[[, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix]
[], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column]
[+, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row]
[], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column]
[,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column, ), ;, }]
[), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column, ), ;, }, }, @]
[;, }, }, @, Override, public, T, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {]
[., setSubMatrix, (, subMatrix, ,, row, ,, column, ), ;, }, }, @, Override, public, T, getEntry, (, final, int]
[,, row, ,, column, ), ;, }, }, @, Override, public, T, getEntry, (, final, int, row, ,, final, int]
[,, column, ), ;, }, }, @, Override, public, T, getEntry, (, final, int, row, ,, final, int, column, )]
[), ;, }, }, @, Override, public, T, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException]
[;, checkColumnIndex, (, column, ), ;, return, data, [, row, ], [, column, ], ;, }, @, Override, public, void]
[), ;, checkColumnIndex, (, column, ), ;, return, data, [, row, ], [, column, ], ;, }, @, Override, public]
[;, return, data, [, row, ], [, column, ], ;, }, @, Override, public, void, setEntry, (, final, int, row]
[), ;, return, data, [, row, ], [, column, ], ;, }, @, Override, public, void, setEntry, (, final, int]
[;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, T, value, )]
[[, column, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final]
[[, row, ], [, column, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int]
[], [, column, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,]
[], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, T, value]
[;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =, value, ;, }, @, Override, public]
[), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =, value, ;, }, @, Override]
[;, data, [, row, ], [, column, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int]
[), ;, data, [, row, ], [, column, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final]
[=, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, T]
[[, column, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column]
[[, row, ], [, column, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,]
[], [, column, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int]
[], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final]
[;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, T, increment, )]
[;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =, data, [, row, ], [, column]
[), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =, data, [, row, ], []
[;, data, [, row, ], [, column, ], =, data, [, row, ], [, column, ], ., add, (, increment]
[), ;, data, [, row, ], [, column, ], =, data, [, row, ], [, column, ], ., add, (]
[=, data, [, row, ], [, column, ], ., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry]
[[, column, ], =, data, [, row, ], [, column, ], ., add, (, increment, ), ;, }, @, Override]
[[, row, ], [, column, ], =, data, [, row, ], [, column, ], ., add, (, increment, ), ;]
[], [, column, ], =, data, [, row, ], [, column, ], ., add, (, increment, ), ;, }, @]
[], =, data, [, row, ], [, column, ], ., add, (, increment, ), ;, }, @, Override, public, void]
[;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, T, factor, )]
[., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column]
[[, column, ], ., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,]
[[, row, ], [, column, ], ., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry, (, final]
[], [, column, ], ., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry, (, final, int, row]
[], ., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int]
[), ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, T, factor]
[;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =, data, [, row, ], [, column]
[), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =, data, [, row, ], []
[;, data, [, row, ], [, column, ], =, data, [, row, ], [, column, ], ., multiply, (, factor]
[), ;, data, [, row, ], [, column, ], =, data, [, row, ], [, column, ], ., multiply, (]
[=, data, [, row, ], [, column, ], ., multiply, (, factor, ), ;, }, @, Override, public, int, getRowDimension]
[[, column, ], =, data, [, row, ], [, column, ], ., multiply, (, factor, ), ;, }, @, Override]
[[, row, ], [, column, ], =, data, [, row, ], [, column, ], ., multiply, (, factor, ), ;]
[], [, column, ], =, data, [, row, ], [, column, ], ., multiply, (, factor, ), ;, }, @]
[], =, data, [, row, ], [, column, ], ., multiply, (, factor, ), ;, }, @, Override, public, int]
[;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null, ), ?, 0, :, data]
[., multiply, (, factor, ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null]
[[, column, ], ., multiply, (, factor, ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (]
[[, row, ], [, column, ], ., multiply, (, factor, ), ;, }, @, Override, public, int, getRowDimension, (, )]
[], [, column, ], ., multiply, (, factor, ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return]
[], ., multiply, (, factor, ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==]
[), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null, ), ?, 0, :]
[;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (, data]
[?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data]
[), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (]
[==, null, ), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (]
[:, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null]
[;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (, data]
[., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||]
[;, }, @, Override, public, T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, final]
[?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, T, [, ], operate, (, final]
[), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, T, [, ], operate, (]
[||, (, data, [, 0, ], ==, null, ), ), ?, 0, :, data, [, 0, ], ., length, ;]
[), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :, data, [, 0, ], ., length]
[==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :, data, [, 0, ]]
[), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :, data, [, 0, ], ., length]
[), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, T, [, ], operate, (]
[), ), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, T, [, ], operate]
[==, null, ), ), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, T, []
[[, 0, ], ==, null, ), ), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override]
[], ==, null, ), ), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, T]
[), ), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, T, [, ], operate]
[:, data, [, 0, ], ., length, ;, }, @, Override, public, T, [, ], operate, (, final, T, []
[;, }, @, Override, public, T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, final]
[., length, ;, }, @, Override, public, T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException]
[[, 0, ], ., length, ;, }, @, Override, public, T, [, ], operate, (, final, T, [, ], v]
[], ., length, ;, }, @, Override, public, T, [, ], operate, (, final, T, [, ], v, ), throws]
[;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {]
[., getRowDimension, (, ), ;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (, v, ., length]
[;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, )]
[., getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, .]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, T, [, ], out, =]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, T, [, ]]
[., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, T]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, T, [, ], out, =]
[;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ), ;, for]
[,, nCols, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows]
[., length, ,, nCols, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, )]
[), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ), ;]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, T, [, ]]
[., buildArray, (, getField, (, ), ,, nRows, ), ;, for, (, int, row, =, 0, ;, row, <, nRows]
[,, nRows, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final]
[), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, T, []
[;, row, <, nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;]
[;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, T, sum, =, getField]
[<, nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, T, sum]
[;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, T, sum, =, getField]
[), {, final, T, [, ], dataRow, =, data, [, row, ], ;, T, sum, =, getField, (, ), .]
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, T, sum, =, getField, (, )]
[;, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i]
[[, row, ], ;, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =]
[], ;, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, =, sum, .]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {]
[;, i, <, nCols, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], .]
[;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (, v, []
[<, nCols, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (]
[;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (, v, []
[), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (, v, [, i, ], )]
[++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (, v, [, i, ]]
[=, sum, ., add, (, dataRow, [, i, ], ., multiply, (, v, [, i, ], ), ), ;, }]
[;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, T, [, ]]
[., add, (, dataRow, [, i, ], ., multiply, (, v, [, i, ], ), ), ;, }, out, []
[), ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, T, []
[., multiply, (, v, [, i, ], ), ), ;, }, out, [, row, ], =, sum, ;, }, return]
[[, i, ], ., multiply, (, v, [, i, ], ), ), ;, }, out, [, row, ], =, sum]
[], ., multiply, (, v, [, i, ], ), ), ;, }, out, [, row, ], =, sum, ;, }]
[), ), ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, T]
[[, i, ], ), ), ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @]
[], ), ), ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public]
[=, sum, ;, }, return, out, ;, }, @, Override, public, T, [, ], preMultiply, (, final, T, [, ]]
[[, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, T, [, ], preMultiply, (, final]
[], =, sum, ;, }, return, out, ;, }, @, Override, public, T, [, ], preMultiply, (, final, T, []
[;, }, return, out, ;, }, @, Override, public, T, [, ], preMultiply, (, final, T, [, ], v, )]
[;, }, @, Override, public, T, [, ], preMultiply, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, final]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new]
[;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, )]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, T, [, ], out, =]
[!=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, T, [, ]]
[., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, T]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, T, [, ], out, =]
[;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nCols, ), ;, for]
[,, nRows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nCols]
[., length, ,, nRows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, )]
[), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nCols, ), ;]
[;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T, sum, =, getField]
[., buildArray, (, getField, (, ), ,, nCols, ), ;, for, (, int, col, =, 0, ;, col, <, nCols]
[,, nCols, ), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T]
[), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T, sum, =]
[;, col, <, nCols, ;, ++, col, ), {, T, sum, =, getField, (, ), ., getZero, (, ), ;]
[;, ++, col, ), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i]
[<, nCols, ;, ++, col, ), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (]
[;, ++, col, ), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i]
[), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;]
[), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, .]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (, data, [, i, ], []
[;, ++, i, ), {, sum, =, sum, ., add, (, data, [, i, ], [, col, ], ., multiply]
[<, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (, data, [, i, ], [, col, ]]
[;, ++, i, ), {, sum, =, sum, ., add, (, data, [, i, ], [, col, ], ., multiply]
[), {, sum, =, sum, ., add, (, data, [, i, ], [, col, ], ., multiply, (, v, []
[), {, sum, =, sum, ., add, (, data, [, i, ], [, col, ], ., multiply, (, v, []
[=, sum, ., add, (, data, [, i, ], [, col, ], ., multiply, (, v, [, i, ], )]
[;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, @, Override, public, T, walkInRowOrder, (]
[., add, (, data, [, i, ], [, col, ], ., multiply, (, v, [, i, ], ), ), ;]
[), ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, @, Override, public, T, walkInRowOrder]
[., multiply, (, v, [, i, ], ), ), ;, }, out, [, col, ], =, sum, ;, }, return]
[[, col, ], ., multiply, (, v, [, i, ], ), ), ;, }, out, [, col, ], =, sum]
[[, i, ], [, col, ], ., multiply, (, v, [, i, ], ), ), ;, }, out, [, col]
[], [, col, ], ., multiply, (, v, [, i, ], ), ), ;, }, out, [, col, ], =]
[], ., multiply, (, v, [, i, ], ), ), ;, }, out, [, col, ], =, sum, ;, }]
[), ), ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, @, Override, public, T]
[[, i, ], ), ), ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, @]
[], ), ), ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, @, Override, public]
[=, sum, ;, }, return, out, ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor]
[[, col, ], =, sum, ;, }, return, out, ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <]
[], =, sum, ;, }, return, out, ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >]
[;, }, return, out, ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, final, int, rows, =]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, [, ]]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, )]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, []
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, []
[;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[<, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (]
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ]]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI]
[], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, [, j]
[;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[<, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[=, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, .]
[[, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }]
[], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, final, int, rows, =]
[., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, [, ]]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, )]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, []
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, []
[;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[<, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (]
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor]
[], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit]
[;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j]
[;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }]
[<, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }]
[), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final]
[., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ]]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, )]
[,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final]
[), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, []
[;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[<=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (]
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ]]
[[, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI]
[], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j]
[;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[<=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[=, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, .]
[[, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }]
[], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final]
[., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ]]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, )]
[,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final]
[), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, []
[;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[<=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (]
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (]
[[, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor]
[], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit]
[;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j]
[;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }]
[<=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }]
[), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final]
[;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, final, int, rows, =]
[., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, )]
[), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int]
[-, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for]
[), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int]
[;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[<, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, []
[), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, []
[;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ]]
[<, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, []
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ]]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, .]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, .]
[;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;]
[[, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j]
[], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[=, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, .]
[[, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }]
[], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final]
[;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, final, int, rows, =]
[., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, )]
[), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int]
[-, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for]
[), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int]
[;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[<, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit]
[), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit]
[;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i]
[;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ]]
[<, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], []
[;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ]]
[), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }]
[), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <]
[., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor]
[,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, )]
[,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder]
[[, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override]
[], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final]
[;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final]
[., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, )]
[,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for]
[), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int]
[;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[<=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, []
[), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, []
[;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ]]
[<=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, []
[;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ]]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, .]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, .]
[;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;]
[[, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j]
[], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[=, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, .]
[[, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }]
[], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final]
[;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final]
[., end, (, ), ;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, )]
[,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for]
[), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int]
[;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[<=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit]
[), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit]
[;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i]
[;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ]]
[<=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], []
[;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ]]
[), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }]
[), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, private, T, [, ], [, ], copyOut, (, )]
[., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor]
[,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, )]
[,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, private, T, [, ], [, ], copyOut, (]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, private, T, [, ], []
[[, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, private, T]
[], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, private, T, [, ]]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, private, T, [, ], [, ], copyOut]
[;, }, private, T, [, ], [, ], copyOut, (, ), {, final, int, nRows, =, this, ., getRowDimension, (]
[., end, (, ), ;, }, private, T, [, ], [, ], copyOut, (, ), {, final, int, nRows, =]
[;, final, T, [, ], [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, getColumnDimension]
[., getRowDimension, (, ), ;, final, T, [, ], [, ], out, =, MathArrays, ., buildArray, (, getField, (, )]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (]
[., buildArray, (, getField, (, ), ,, nRows, ,, getColumnDimension, (, ), ), ;, for, (, int, i, =, 0]
[,, nRows, ,, getColumnDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i]
[,, getColumnDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy]
[;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,]
[;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ]]
[<, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, []
[;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ]]
[), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,]
[++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0]
[;, }, return, out, ;, }, private, void, copyIn, (, final, T, [, ], [, ], in, ), throws, NullArgumentException]
[., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,, data, [, i]
[,, 0, ,, out, [, i, ], ,, 0, ,, data, [, i, ], ., length, ), ;, }, return]
[[, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,, data, [, i, ], ., length, )]
[], ,, 0, ,, out, [, i, ], ,, 0, ,, data, [, i, ], ., length, ), ;, }]
[,, out, [, i, ], ,, 0, ,, data, [, i, ], ., length, ), ;, }, return, out, ;]
[,, 0, ,, data, [, i, ], ., length, ), ;, }, return, out, ;, }, private, void, copyIn, (]
[[, i, ], ,, 0, ,, data, [, i, ], ., length, ), ;, }, return, out, ;, }, private]
[], ,, 0, ,, data, [, i, ], ., length, ), ;, }, return, out, ;, }, private, void, copyIn]
[,, data, [, i, ], ., length, ), ;, }, return, out, ;, }, private, void, copyIn, (, final, T]
[), ;, }, return, out, ;, }, private, void, copyIn, (, final, T, [, ], [, ], in, ), throws]
[., length, ), ;, }, return, out, ;, }, private, void, copyIn, (, final, T, [, ], [, ], in]
[[, i, ], ., length, ), ;, }, return, out, ;, }, private, void, copyIn, (, final, T, [, ]]
[], ., length, ), ;, }, return, out, ;, }, private, void, copyIn, (, final, T, [, ], [, ]]
[;, }, private, void, copyIn, (, final, T, [, ], [, ], in, ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException]
[;, }, }]
[,, 0, ,, 0, ), ;, }, }]
[,, 0, ), ;, }, }]
[), ;, }, }]
