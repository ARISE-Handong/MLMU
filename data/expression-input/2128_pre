[joda, ., time, ., format, ., DateTimeFormat, ;, public, class, IllegalInstantException, extends, IllegalArgumentException, {, private, static, final, long, serialVersionUID, =]
[extends, IllegalArgumentException, {, private, static, final, long, serialVersionUID, =, 2858712538216L, ;, public, IllegalInstantException, (, String, message, ), {, super, (]
[), {, super, (, message, ), ;, }, public, IllegalInstantException, (, long, instantLocal, ,, String, zoneId, ), {, super, (]
[super, (, message, ), ;, }, public, IllegalInstantException, (, long, instantLocal, ,, String, zoneId, ), {, super, (, createMessage, (]
[message, ), ;, }, public, IllegalInstantException, (, long, instantLocal, ,, String, zoneId, ), {, super, (, createMessage, (, instantLocal, ,]
[zoneId, ), ), ;, }, private, static, String, createMessage, (, long, instantLocal, ,, String, zoneId, ), {, String, localDateTime, =]
[zoneId, ), ), ;, }, private, static, String, createMessage, (, long, instantLocal, ,, String, zoneId, ), {, String, localDateTime, =]
[zoneId, ), ), ;, }, private, static, String, createMessage, (, long, instantLocal, ,, String, zoneId, ), {, String, localDateTime, =]
[}, private, static, String, createMessage, (, long, instantLocal, ,, String, zoneId, ), {, String, localDateTime, =, DateTimeFormat, ., forPattern, (]
[(, long, instantLocal, ,, String, zoneId, ), {, String, localDateTime, =, DateTimeFormat, ., forPattern, (, "yyyy-MM-dd'T'HH:mm:ss.SSS", ), ., print, (]
[,, String, zoneId, ), {, String, localDateTime, =, DateTimeFormat, ., forPattern, (, "yyyy-MM-dd'T'HH:mm:ss.SSS", ), ., print, (, new, Instant, (]
[=, DateTimeFormat, ., forPattern, (, "yyyy-MM-dd'T'HH:mm:ss.SSS", ), ., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =]
[DateTimeFormat, ., forPattern, (, "yyyy-MM-dd'T'HH:mm:ss.SSS", ), ., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (]
[DateTimeFormat, ., forPattern, (, "yyyy-MM-dd'T'HH:mm:ss.SSS", ), ., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (]
[DateTimeFormat, ., forPattern, (, "yyyy-MM-dd'T'HH:mm:ss.SSS", ), ., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (]
[forPattern, (, "yyyy-MM-dd'T'HH:mm:ss.SSS", ), ., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (, zoneId, !=]
["yyyy-MM-dd'T'HH:mm:ss.SSS", ), ., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (, zoneId, !=, null, ?]
["yyyy-MM-dd'T'HH:mm:ss.SSS", ), ., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (, zoneId, !=, null, ?]
["yyyy-MM-dd'T'HH:mm:ss.SSS", ), ., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (, zoneId, !=, null, ?]
[., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (, zoneId, !=, null, ?, " (", +]
[(, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (, zoneId, !=, null, ?, " (", +, zoneId, +]
[Instant, (, instantLocal, ), ), ;, String, zone, =, (, zoneId, !=, null, ?, " (", +, zoneId, +, ")", :]
[), ;, String, zone, =, (, zoneId, !=, null, ?, " (", +, zoneId, +, ")", :, "", ), ;, return]
[), ;, String, zone, =, (, zoneId, !=, null, ?, " (", +, zoneId, +, ")", :, "", ), ;, return]
[), ;, String, zone, =, (, zoneId, !=, null, ?, " (", +, zoneId, +, ")", :, "", ), ;, return]
[String, zone, =, (, zoneId, !=, null, ?, " (", +, zoneId, +, ")", :, "", ), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +]
[=, (, zoneId, !=, null, ?, " (", +, zoneId, +, ")", :, "", ), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +]
[;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (]
[;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (]
[zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (, ex, instanceof, IllegalInstantException, ), {, return]
[boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (, ex, instanceof, IllegalInstantException, ), {, return, true, ;, }, while, (]
[boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (, ex, instanceof, IllegalInstantException, ), {, return, true, ;, }, while, (]
[boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (, ex, instanceof, IllegalInstantException, ), {, return, true, ;, }, while, (]
[boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (, ex, instanceof, IllegalInstantException, ), {, return, true, ;, }, while, (]
[{, if, (, ex, instanceof, IllegalInstantException, ), {, return, true, ;, }, while, (, ex, ., getCause, (, ), !=]
[(, ex, instanceof, IllegalInstantException, ), {, return, true, ;, }, while, (, ex, ., getCause, (, ), !=, null, &&]
[(, ex, instanceof, IllegalInstantException, ), {, return, true, ;, }, while, (, ex, ., getCause, (, ), !=, null, &&]
[(, ex, instanceof, IllegalInstantException, ), {, return, true, ;, }, while, (, ex, ., getCause, (, ), !=, null, &&]
[return, true, ;, }, while, (, ex, ., getCause, (, ), !=, null, &&, ex, ., getCause, (, ), !=]
[while, (, ex, ., getCause, (, ), !=, null, &&, ex, ., getCause, (, ), !=, ex, ), {, return]
[ex, ., getCause, (, ), !=, null, &&, ex, ., getCause, (, ), !=, ex, ), {, return, isIllegalInstant, (]
[ex, ., getCause, (, ), !=, null, &&, ex, ., getCause, (, ), !=, ex, ), {, return, isIllegalInstant, (]
[., getCause, (, ), !=, ex, ), {, return, isIllegalInstant, (, ex, ., getCause, (, ), ), ;, }, return]
