[=, startNode, ;, this, ., endNode, =, endNode, ;, this, ., parent, =, parent, ;, }, }, private, final, List]
[., startNode, =, startNode, ;, this, ., endNode, =, endNode, ;, this, ., parent, =, parent, ;, }, }, private]
[;, this, ., endNode, =, endNode, ;, this, ., parent, =, parent, ;, }, }, private, final, List, <, Collapse]
[=, endNode, ;, this, ., parent, =, parent, ;, }, }, private, final, List, <, Collapse, >, collapses, =, Lists]
[., endNode, =, endNode, ;, this, ., parent, =, parent, ;, }, }, private, final, List, <, Collapse, >, collapses]
[;, this, ., parent, =, parent, ;, }, }, private, final, List, <, Collapse, >, collapses, =, Lists, ., newArrayList]
[=, parent, ;, }, }, private, final, List, <, Collapse, >, collapses, =, Lists, ., newArrayList, (, ), ;, private]
[., parent, =, parent, ;, }, }, private, final, List, <, Collapse, >, collapses, =, Lists, ., newArrayList, (, )]
[;, }, }, private, final, List, <, Collapse, >, collapses, =, Lists, ., newArrayList, (, ), ;, private, final, Set]
[;, private, final, Set, <, Node, >, nodesToCollapse, =, Sets, ., newHashSet, (, ), ;, CollapseVariableDeclarations, (, AbstractCompiler, compiler, )]
[., newArrayList, (, ), ;, private, final, Set, <, Node, >, nodesToCollapse, =, Sets, ., newHashSet, (, ), ;, CollapseVariableDeclarations]
[;, CollapseVariableDeclarations, (, AbstractCompiler, compiler, ), {, Preconditions, ., checkState, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (]
[., newHashSet, (, ), ;, CollapseVariableDeclarations, (, AbstractCompiler, compiler, ), {, Preconditions, ., checkState, (, !, compiler, ., getLifeCycleStage, (]
[;, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., checkState, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =, compiler]
[), ;, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[), ;, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;, }, @, Override, public]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, collapses, ., clear]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, collapses]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, collapses, ., clear, (, )]
[;, nodesToCollapse, ., clear, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherCollapses, (, ), )]
[., clear, (, ), ;, nodesToCollapse, ., clear, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherCollapses, (, ), ), ;, if, (, !, collapses, .]
[., clear, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherCollapses, (, ), ), ;, if]
[;, if, (, !, collapses, ., isEmpty, (, ), ), {, applyCollapses, (, ), ;, compiler, ., reportCodeChange, (, )]
[., traverse, (, compiler, ,, root, ,, new, GatherCollapses, (, ), ), ;, if, (, !, collapses, ., isEmpty, (]
[,, root, ,, new, GatherCollapses, (, ), ), ;, if, (, !, collapses, ., isEmpty, (, ), ), {, applyCollapses]
[,, new, GatherCollapses, (, ), ), ;, if, (, !, collapses, ., isEmpty, (, ), ), {, applyCollapses, (, )]
[), ;, if, (, !, collapses, ., isEmpty, (, ), ), {, applyCollapses, (, ), ;, compiler, ., reportCodeChange, (]
[), {, applyCollapses, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, class, GatherCollapses, extends, AbstractPostOrderCallback, {]
[), {, applyCollapses, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, class, GatherCollapses, extends, AbstractPostOrderCallback, {]
[., isEmpty, (, ), ), {, applyCollapses, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, class]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, class, GatherCollapses, extends, AbstractPostOrderCallback, {, private, final, Set, <, Var]
[;, }, }, private, class, GatherCollapses, extends, AbstractPostOrderCallback, {, private, final, Set, <, Var, >, blacklistedVars, =, Sets, ., newHashSet]
[., reportCodeChange, (, ), ;, }, }, private, class, GatherCollapses, extends, AbstractPostOrderCallback, {, private, final, Set, <, Var, >, blacklistedVars]
[;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n]
[., newHashSet, (, ), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), {, blacklistStubVars, (, t, ,, n, ), ;, }, if, (, !, n, ., isVar, (, ), &&, !]
[., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, }, if, (, !, n, ., isVar]
[;, }, if, (, !, n, ., isVar, (, ), &&, !, canBeRedeclared, (, n, ,, t, ., getScope, (]
[,, n, ), ;, }, if, (, !, n, ., isVar, (, ), &&, !, canBeRedeclared, (, n, ,, t]
[), ;, }, if, (, !, n, ., isVar, (, ), &&, !, canBeRedeclared, (, n, ,, t, ., getScope]
[), return, ;, if, (, nodesToCollapse, ., contains, (, n, ), ), return, ;, if, (, parent, ., isIf, (]
[&&, !, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), return, ;, if, (, nodesToCollapse, ., contains]
[&&, !, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), return, ;, if, (, nodesToCollapse, ., contains]
[., isVar, (, ), &&, !, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), return, ;, if]
[), return, ;, if, (, nodesToCollapse, ., contains, (, n, ), ), return, ;, if, (, parent, ., isIf, (]
[), return, ;, if, (, nodesToCollapse, ., contains, (, n, ), ), return, ;, if, (, parent, ., isIf, (]
[,, t, ., getScope, (, ), ), ), return, ;, if, (, nodesToCollapse, ., contains, (, n, ), ), return]
[), ), return, ;, if, (, nodesToCollapse, ., contains, (, n, ), ), return, ;, if, (, parent, ., isIf]
[., getScope, (, ), ), ), return, ;, if, (, nodesToCollapse, ., contains, (, n, ), ), return, ;, if]
[), return, ;, if, (, parent, ., isIf, (, ), ), return, ;, Node, varNode, =, n, ;, boolean, hasVar]
[., contains, (, n, ), ), return, ;, if, (, parent, ., isIf, (, ), ), return, ;, Node, varNode]
[), ), return, ;, if, (, parent, ., isIf, (, ), ), return, ;, Node, varNode, =, n, ;, boolean]
[), return, ;, Node, varNode, =, n, ;, boolean, hasVar, =, n, ., isVar, (, ), ;, n, =, n]
[., isIf, (, ), ), return, ;, Node, varNode, =, n, ;, boolean, hasVar, =, n, ., isVar, (, )]
[;, boolean, hasVar, =, n, ., isVar, (, ), ;, n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse]
[;, n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (, n, !=, null, &&]
[., isVar, (, ), ;, n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (]
[=, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (, n, !=, null, &&, (, n]
[;, boolean, hasNodesToCollapse, =, false, ;, while, (, n, !=, null, &&, (, n, ., isVar, (, ), ||, canBeRedeclared]
[., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (, n, !=, null, &&, (, n, ., isVar]
[;, while, (, n, !=, null, &&, (, n, ., isVar, (, ), ||, canBeRedeclared, (, n, ,, t, .]
[), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, hasVar, =]
[&&, (, n, ., isVar, (, ), ||, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), )]
[!=, null, &&, (, n, ., isVar, (, ), ||, canBeRedeclared, (, n, ,, t, ., getScope, (, ), )]
[&&, (, n, ., isVar, (, ), ||, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), )]
[), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, hasVar, =]
[), ), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, hasVar]
[||, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), ), {, if, (, n, ., isVar, (]
[., isVar, (, ), ||, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), ), {, if, (]
[), ), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, hasVar]
[,, t, ., getScope, (, ), ), ), ), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars]
[), ), ), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;]
[., getScope, (, ), ), ), ), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t]
[), {, blacklistStubVars, (, t, ,, n, ), ;, hasVar, =, true, ;, }, nodesToCollapse, ., add, (, n, )]
[., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, hasVar, =, true, ;, }, nodesToCollapse, .]
[;, hasVar, =, true, ;, }, nodesToCollapse, ., add, (, n, ), ;, hasNodesToCollapse, =, true, ;, n, =, n]
[,, n, ), ;, hasVar, =, true, ;, }, nodesToCollapse, ., add, (, n, ), ;, hasNodesToCollapse, =, true, ;]
[), ;, hasVar, =, true, ;, }, nodesToCollapse, ., add, (, n, ), ;, hasNodesToCollapse, =, true, ;, n, =]
[=, true, ;, }, nodesToCollapse, ., add, (, n, ), ;, hasNodesToCollapse, =, true, ;, n, =, n, ., getNext]
[;, }, nodesToCollapse, ., add, (, n, ), ;, hasNodesToCollapse, =, true, ;, n, =, n, ., getNext, (, )]
[;, hasNodesToCollapse, =, true, ;, n, =, n, ., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&, hasVar, )]
[., add, (, n, ), ;, hasNodesToCollapse, =, true, ;, n, =, n, ., getNext, (, ), ;, }, if]
[), ;, hasNodesToCollapse, =, true, ;, n, =, n, ., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&, hasVar]
[=, true, ;, n, =, n, ., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&, hasVar, ), {, nodesToCollapse]
[;, n, =, n, ., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&, hasVar, ), {, nodesToCollapse, ., add]
[=, n, ., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&, hasVar, ), {, nodesToCollapse, ., add, (, varNode]
[;, }, if, (, hasNodesToCollapse, &&, hasVar, ), {, nodesToCollapse, ., add, (, varNode, ), ;, collapses, ., add, (]
[., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&, hasVar, ), {, nodesToCollapse, ., add, (, varNode, ), ;]
[), {, nodesToCollapse, ., add, (, varNode, ), ;, collapses, ., add, (, new, Collapse, (, varNode, ,, n, ,]
[&&, hasVar, ), {, nodesToCollapse, ., add, (, varNode, ), ;, collapses, ., add, (, new, Collapse, (, varNode, ,]
[), {, nodesToCollapse, ., add, (, varNode, ), ;, collapses, ., add, (, new, Collapse, (, varNode, ,, n, ,]
[;, collapses, ., add, (, new, Collapse, (, varNode, ,, n, ,, parent, ), ), ;, }, }, private, void]
[., add, (, varNode, ), ;, collapses, ., add, (, new, Collapse, (, varNode, ,, n, ,, parent, ), )]
[), ;, collapses, ., add, (, new, Collapse, (, varNode, ,, n, ,, parent, ), ), ;, }, }, private]
[;, }, }, private, void, blacklistStubVars, (, NodeTraversal, t, ,, Node, varNode, ), {, for, (, Node, child, =, varNode]
[., add, (, new, Collapse, (, varNode, ,, n, ,, parent, ), ), ;, }, }, private, void, blacklistStubVars, (]
[), ;, }, }, private, void, blacklistStubVars, (, NodeTraversal, t, ,, Node, varNode, ), {, for, (, Node, child, =]
[,, n, ,, parent, ), ), ;, }, }, private, void, blacklistStubVars, (, NodeTraversal, t, ,, Node, varNode, ), {]
[,, parent, ), ), ;, }, }, private, void, blacklistStubVars, (, NodeTraversal, t, ,, Node, varNode, ), {, for, (]
[), ), ;, }, }, private, void, blacklistStubVars, (, NodeTraversal, t, ,, Node, varNode, ), {, for, (, Node, child]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., getFirstChild, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., getFirstChild, (, ), ==, null, )]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., getFirstChild, (, ), ==]
[;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., getFirstChild, (, ), ==, null, )]
[=, child, ., getNext, (, ), ), {, if, (, child, ., getFirstChild, (, ), ==, null, ), {, blacklistedVars]
[), {, if, (, child, ., getFirstChild, (, ), ==, null, ), {, blacklistedVars, ., add, (, t, ., getScope]
[., getNext, (, ), ), {, if, (, child, ., getFirstChild, (, ), ==, null, ), {, blacklistedVars, ., add]
[), {, blacklistedVars, ., add, (, t, ., getScope, (, ), ., getVar, (, child, ., getString, (, ), )]
[==, null, ), {, blacklistedVars, ., add, (, t, ., getScope, (, ), ., getVar, (, child, ., getString, (]
[., getFirstChild, (, ), ==, null, ), {, blacklistedVars, ., add, (, t, ., getScope, (, ), ., getVar, (]
[), {, blacklistedVars, ., add, (, t, ., getScope, (, ), ., getVar, (, child, ., getString, (, ), )]
[;, }, }, }, private, boolean, canBeRedeclared, (, Node, n, ,, Scope, s, ), {, if, (, !, NodeUtil, .]
[., add, (, t, ., getScope, (, ), ., getVar, (, child, ., getString, (, ), ), ), ;, }]
[), ;, }, }, }, private, boolean, canBeRedeclared, (, Node, n, ,, Scope, s, ), {, if, (, !, NodeUtil]
[., getVar, (, child, ., getString, (, ), ), ), ;, }, }, }, private, boolean, canBeRedeclared, (, Node, n]
[., getScope, (, ), ., getVar, (, child, ., getString, (, ), ), ), ;, }, }, }, private, boolean]
[), ), ;, }, }, }, private, boolean, canBeRedeclared, (, Node, n, ,, Scope, s, ), {, if, (, !]
[., getString, (, ), ), ), ;, }, }, }, private, boolean, canBeRedeclared, (, Node, n, ,, Scope, s, )]
[), {, return, false, ;, }, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, .]
[), {, return, false, ;, }, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, .]
[., isExprAssign, (, n, ), ), {, return, false, ;, }, Node, assign, =, n, ., getFirstChild, (, ), ;]
[), ), {, return, false, ;, }, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign]
[;, }, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;]
[;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (, !, lhs, ., isName, (, ), ), {]
[., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (, !, lhs, ., isName]
[;, if, (, !, lhs, ., isName, (, ), ), {, return, false, ;, }, Var, var, =, s, .]
[., getFirstChild, (, ), ;, if, (, !, lhs, ., isName, (, ), ), {, return, false, ;, }, Var]
[), {, return, false, ;, }, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;]
[), {, return, false, ;, }, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;]
[., isName, (, ), ), {, return, false, ;, }, Var, var, =, s, ., getVar, (, lhs, ., getString]
[;, }, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;, return, var, !=, null]
[;, return, var, !=, null, &&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, ), &&]
[., getVar, (, lhs, ., getString, (, ), ), ;, return, var, !=, null, &&, var, ., getScope, (, )]
[), ;, return, var, !=, null, &&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, )]
[., getString, (, ), ), ;, return, var, !=, null, &&, var, ., getScope, (, ), ==, s, &&, !]
[;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {, return, v, ., getParentNode, (, ), ., isParamList, (]
[&&, !, blacklistedVars, ., contains, (, var, ), ;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {, return]
[&&, !, isNamedParameter, (, var, ), &&, !, blacklistedVars, ., contains, (, var, ), ;, }, }, private, boolean, isNamedParameter]
[&&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, ), &&, !, blacklistedVars, ., contains, (]
[!=, null, &&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, ), &&, !, blacklistedVars, .]
[&&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, ), &&, !, blacklistedVars, ., contains, (]
[&&, !, isNamedParameter, (, var, ), &&, !, blacklistedVars, ., contains, (, var, ), ;, }, }, private, boolean, isNamedParameter]
[==, s, &&, !, isNamedParameter, (, var, ), &&, !, blacklistedVars, ., contains, (, var, ), ;, }, }, private]
[., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, ), &&, !, blacklistedVars, ., contains, (, var, )]
[&&, !, isNamedParameter, (, var, ), &&, !, blacklistedVars, ., contains, (, var, ), ;, }, }, private, boolean, isNamedParameter]
[&&, !, blacklistedVars, ., contains, (, var, ), ;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {, return]
[&&, !, blacklistedVars, ., contains, (, var, ), ;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {, return]
[), &&, !, blacklistedVars, ., contains, (, var, ), ;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {]
[;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {, return, v, ., getParentNode, (, ), ., isParamList, (]
[;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {, return, v, ., getParentNode, (, ), ., isParamList, (]
[., contains, (, var, ), ;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {, return, v, ., getParentNode]
[), ;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {, return, v, ., getParentNode, (, ), ., isParamList]
[;, }, private, void, applyCollapses, (, ), {, for, (, Collapse, collapse, :, collapses, ), {, Node, var, =, new]
[., isParamList, (, ), ;, }, private, void, applyCollapses, (, ), {, for, (, Collapse, collapse, :, collapses, ), {]
[., getParentNode, (, ), ., isParamList, (, ), ;, }, private, void, applyCollapses, (, ), {, for, (, Collapse, collapse]
[), {, Node, var, =, new, Node, (, Token, ., VAR, ), ;, var, ., copyInformationFrom, (, collapse, ., startNode]
[;, var, ., copyInformationFrom, (, collapse, ., startNode, ), ;, collapse, ., parent, ., addChildBefore, (, var, ,, collapse, .]
[), ;, var, ., copyInformationFrom, (, collapse, ., startNode, ), ;, collapse, ., parent, ., addChildBefore, (, var, ,, collapse]
[., VAR, ), ;, var, ., copyInformationFrom, (, collapse, ., startNode, ), ;, collapse, ., parent, ., addChildBefore, (, var]
[;, collapse, ., parent, ., addChildBefore, (, var, ,, collapse, ., startNode, ), ;, boolean, redeclaration, =, false, ;, for]
[., copyInformationFrom, (, collapse, ., startNode, ), ;, collapse, ., parent, ., addChildBefore, (, var, ,, collapse, ., startNode, )]
[), ;, collapse, ., parent, ., addChildBefore, (, var, ,, collapse, ., startNode, ), ;, boolean, redeclaration, =, false, ;]
[., startNode, ), ;, collapse, ., parent, ., addChildBefore, (, var, ,, collapse, ., startNode, ), ;, boolean, redeclaration, =]
[;, boolean, redeclaration, =, false, ;, for, (, Node, n, =, collapse, ., startNode, ;, n, !=, collapse, ., endNode]
[., addChildBefore, (, var, ,, collapse, ., startNode, ), ;, boolean, redeclaration, =, false, ;, for, (, Node, n, =]
[., parent, ., addChildBefore, (, var, ,, collapse, ., startNode, ), ;, boolean, redeclaration, =, false, ;, for, (, Node]
[,, collapse, ., startNode, ), ;, boolean, redeclaration, =, false, ;, for, (, Node, n, =, collapse, ., startNode, ;]
[), ;, boolean, redeclaration, =, false, ;, for, (, Node, n, =, collapse, ., startNode, ;, n, !=, collapse, .]
[., startNode, ), ;, boolean, redeclaration, =, false, ;, for, (, Node, n, =, collapse, ., startNode, ;, n, !=]
[;, for, (, Node, n, =, collapse, ., startNode, ;, n, !=, collapse, ., endNode, ;, ), {, Node, next]
[;, n, !=, collapse, ., endNode, ;, ), {, Node, next, =, n, ., getNext, (, ), ;, Preconditions, .]
[., startNode, ;, n, !=, collapse, ., endNode, ;, ), {, Node, next, =, n, ., getNext, (, ), ;]
[;, ), {, Node, next, =, n, ., getNext, (, ), ;, Preconditions, ., checkState, (, var, ., getNext, (]
[!=, collapse, ., endNode, ;, ), {, Node, next, =, n, ., getNext, (, ), ;, Preconditions, ., checkState, (]
[;, ), {, Node, next, =, n, ., getNext, (, ), ;, Preconditions, ., checkState, (, var, ., getNext, (]
[., endNode, ;, ), {, Node, next, =, n, ., getNext, (, ), ;, Preconditions, ., checkState, (, var, .]
[;, Preconditions, ., checkState, (, var, ., getNext, (, ), ==, n, ), ;, collapse, ., parent, ., removeChildAfter, (]
[., getNext, (, ), ;, Preconditions, ., checkState, (, var, ., getNext, (, ), ==, n, ), ;, collapse, .]
[;, collapse, ., parent, ., removeChildAfter, (, var, ), ;, if, (, n, ., isVar, (, ), ), {, while]
[., checkState, (, var, ., getNext, (, ), ==, n, ), ;, collapse, ., parent, ., removeChildAfter, (, var, )]
[), ;, collapse, ., parent, ., removeChildAfter, (, var, ), ;, if, (, n, ., isVar, (, ), ), {]
[==, n, ), ;, collapse, ., parent, ., removeChildAfter, (, var, ), ;, if, (, n, ., isVar, (, )]
[., getNext, (, ), ==, n, ), ;, collapse, ., parent, ., removeChildAfter, (, var, ), ;, if, (, n]
[), ;, collapse, ., parent, ., removeChildAfter, (, var, ), ;, if, (, n, ., isVar, (, ), ), {]
[;, if, (, n, ., isVar, (, ), ), {, while, (, n, ., hasChildren, (, ), ), {, var]
[., removeChildAfter, (, var, ), ;, if, (, n, ., isVar, (, ), ), {, while, (, n, ., hasChildren]
[., parent, ., removeChildAfter, (, var, ), ;, if, (, n, ., isVar, (, ), ), {, while, (, n]
[), ;, if, (, n, ., isVar, (, ), ), {, while, (, n, ., hasChildren, (, ), ), {]
[), {, while, (, n, ., hasChildren, (, ), ), {, var, ., addChildToBack, (, n, ., removeFirstChild, (, )]
[., isVar, (, ), ), {, while, (, n, ., hasChildren, (, ), ), {, var, ., addChildToBack, (, n]
[), {, var, ., addChildToBack, (, n, ., removeFirstChild, (, ), ), ;, }, }, else, {, Node, assign, =]
[., hasChildren, (, ), ), {, var, ., addChildToBack, (, n, ., removeFirstChild, (, ), ), ;, }, }, else]
[;, }, }, else, {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild]
[., addChildToBack, (, n, ., removeFirstChild, (, ), ), ;, }, }, else, {, Node, assign, =, n, ., getFirstChild]
[), ;, }, }, else, {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, .]
[., removeFirstChild, (, ), ), ;, }, }, else, {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node]
[;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, lhs, ., isName, (, ), )]
[., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, lhs, .]
[;, Preconditions, ., checkState, (, lhs, ., isName, (, ), ), ;, Node, rhs, =, assign, ., getLastChild, (, )]
[., getFirstChild, (, ), ;, Preconditions, ., checkState, (, lhs, ., isName, (, ), ), ;, Node, rhs, =, assign]
[;, Node, rhs, =, assign, ., getLastChild, (, ), ;, lhs, ., addChildToBack, (, rhs, ., detachFromParent, (, ), )]
[., checkState, (, lhs, ., isName, (, ), ), ;, Node, rhs, =, assign, ., getLastChild, (, ), ;, lhs]
[), ;, Node, rhs, =, assign, ., getLastChild, (, ), ;, lhs, ., addChildToBack, (, rhs, ., detachFromParent, (, )]
[., isName, (, ), ), ;, Node, rhs, =, assign, ., getLastChild, (, ), ;, lhs, ., addChildToBack, (, rhs]
[;, lhs, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, var, ., addChildToBack, (, lhs, ., detachFromParent, (]
[., getLastChild, (, ), ;, lhs, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, var, ., addChildToBack, (]
[;, var, ., addChildToBack, (, lhs, ., detachFromParent, (, ), ), ;, redeclaration, =, true, ;, }, n, =, next]
[., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, var, ., addChildToBack, (, lhs, ., detachFromParent, (, ), )]
[), ;, var, ., addChildToBack, (, lhs, ., detachFromParent, (, ), ), ;, redeclaration, =, true, ;, }, n, =]
[., detachFromParent, (, ), ), ;, var, ., addChildToBack, (, lhs, ., detachFromParent, (, ), ), ;, redeclaration, =, true]
[;, redeclaration, =, true, ;, }, n, =, next, ;, }, if, (, redeclaration, ), {, JSDocInfo, info, =, new]
[., addChildToBack, (, lhs, ., detachFromParent, (, ), ), ;, redeclaration, =, true, ;, }, n, =, next, ;, }]
[), ;, redeclaration, =, true, ;, }, n, =, next, ;, }, if, (, redeclaration, ), {, JSDocInfo, info, =]
[., detachFromParent, (, ), ), ;, redeclaration, =, true, ;, }, n, =, next, ;, }, if, (, redeclaration, )]
[=, true, ;, }, n, =, next, ;, }, if, (, redeclaration, ), {, JSDocInfo, info, =, new, JSDocInfo, (]
[;, }, n, =, next, ;, }, if, (, redeclaration, ), {, JSDocInfo, info, =, new, JSDocInfo, (, ), ;]
[=, next, ;, }, if, (, redeclaration, ), {, JSDocInfo, info, =, new, JSDocInfo, (, ), ;, info, ., addSuppression]
[;, }, if, (, redeclaration, ), {, JSDocInfo, info, =, new, JSDocInfo, (, ), ;, info, ., addSuppression, (, "duplicate"]
[), {, JSDocInfo, info, =, new, JSDocInfo, (, ), ;, info, ., addSuppression, (, "duplicate", ), ;, var, ., setJSDocInfo]
[;, info, ., addSuppression, (, "duplicate", ), ;, var, ., setJSDocInfo, (, info, ), ;, }, }, }, }]
[;, var, ., setJSDocInfo, (, info, ), ;, }, }, }, }]
[., addSuppression, (, "duplicate", ), ;, var, ., setJSDocInfo, (, info, ), ;, }, }, }, }]
[), ;, var, ., setJSDocInfo, (, info, ), ;, }, }, }, }]
[;, }, }, }, }]
[., setJSDocInfo, (, info, ), ;, }, }, }, }]
[), ;, }, }, }, }]
