[;, private, Supplier, <, String, >, safeNameIdSupplier, ;, FunctionToBlockMutator, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {]
[;, private, Supplier, <, String, >, safeNameIdSupplier, ;, FunctionToBlockMutator, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {]
[String, >, safeNameIdSupplier, ;, FunctionToBlockMutator, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {, this, ., compiler, =]
[safeNameIdSupplier, ;, FunctionToBlockMutator, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {, this, ., compiler, =, compiler, ;]
[safeNameIdSupplier, ;, FunctionToBlockMutator, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =]
[,, Node, fnNode, ,, Node, callNode, ,, String, resultName, ,, boolean, needsDefaultResult, ,, boolean, isCallInLoop, ), {, Node, newFnNode, =]
[,, Node, fnNode, ,, Node, callNode, ,, String, resultName, ,, boolean, needsDefaultResult, ,, boolean, isCallInLoop, ), {, Node, newFnNode, =]
[,, String, resultName, ,, boolean, needsDefaultResult, ,, boolean, isCallInLoop, ), {, Node, newFnNode, =, fnNode, ., cloneTree, (, ), ;]
[resultName, ,, boolean, needsDefaultResult, ,, boolean, isCallInLoop, ), {, Node, newFnNode, =, fnNode, ., cloneTree, (, ), ;, makeLocalNamesUnique, (]
[boolean, needsDefaultResult, ,, boolean, isCallInLoop, ), {, Node, newFnNode, =, fnNode, ., cloneTree, (, ), ;, makeLocalNamesUnique, (, newFnNode, ,]
[boolean, isCallInLoop, ), {, Node, newFnNode, =, fnNode, ., cloneTree, (, ), ;, makeLocalNamesUnique, (, newFnNode, ,, isCallInLoop, ), ;]
[), {, Node, newFnNode, =, fnNode, ., cloneTree, (, ), ;, makeLocalNamesUnique, (, newFnNode, ,, isCallInLoop, ), ;, rewriteFunctionDeclarations, (]
[), {, Node, newFnNode, =, fnNode, ., cloneTree, (, ), ;, makeLocalNamesUnique, (, newFnNode, ,, isCallInLoop, ), ;, rewriteFunctionDeclarations, (]
[newFnNode, ,, isCallInLoop, ), ;, rewriteFunctionDeclarations, (, newFnNode, ., getLastChild, (, ), ), ;, Set, <, String, >, namesToAlias, =]
[newFnNode, ,, isCallInLoop, ), ;, rewriteFunctionDeclarations, (, newFnNode, ., getLastChild, (, ), ), ;, Set, <, String, >, namesToAlias, =]
[;, rewriteFunctionDeclarations, (, newFnNode, ., getLastChild, (, ), ), ;, Set, <, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters, (]
[<, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters, (, newFnNode, ), ;, LinkedHashMap, <, String, ,, Node, >, args, =]
[<, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters, (, newFnNode, ), ;, LinkedHashMap, <, String, ,, Node, >, args, =]
[=, FunctionArgumentInjector, ., findModifiedParameters, (, newFnNode, ), ;, LinkedHashMap, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (]
[., findModifiedParameters, (, newFnNode, ), ;, LinkedHashMap, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, newFnNode, ,]
[(, newFnNode, ), ;, LinkedHashMap, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, newFnNode, ,, callNode, ,]
[(, newFnNode, ), ;, LinkedHashMap, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, newFnNode, ,, callNode, ,]
[Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, newFnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =]
[>, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, newFnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !]
[>, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, newFnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !]
[,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (]
[this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {]
[this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {]
[;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (]
[hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, newFnNode, ,]
[!, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, newFnNode, ,, args, ,]
[., isEmpty, (, ), ;, if, (, hasArgs, ), {, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, newFnNode, ,, args, ,, namesToAlias, ,]
[., isEmpty, (, ), ;, if, (, hasArgs, ), {, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, newFnNode, ,, args, ,, namesToAlias, ,]
[., maybeAddTempsForCallArguments, (, newFnNode, ,, args, ,, namesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, }, Node, newBlock, =]
[., maybeAddTempsForCallArguments, (, newFnNode, ,, args, ,, namesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, }, Node, newBlock, =]
[,, args, ,, namesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, }, Node, newBlock, =, NodeUtil, ., getFunctionBody, (]
[namesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, }, Node, newBlock, =, NodeUtil, ., getFunctionBody, (, newFnNode, ), ;]
[namesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, }, Node, newBlock, =, NodeUtil, ., getFunctionBody, (, newFnNode, ), ;]
[;, }, Node, newBlock, =, NodeUtil, ., getFunctionBody, (, newFnNode, ), ;, newBlock, ., detachFromParent, (, ), ;, if, (]
[., getFunctionBody, (, newFnNode, ), ;, newBlock, ., detachFromParent, (, ), ;, if, (, hasArgs, ), {, Node, inlineResult, =]
[(, newFnNode, ), ;, newBlock, ., detachFromParent, (, ), ;, if, (, hasArgs, ), {, Node, inlineResult, =, aliasAndInlineArguments, (]
[), ;, newBlock, ., detachFromParent, (, ), ;, if, (, hasArgs, ), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,]
[newBlock, ., detachFromParent, (, ), ;, if, (, hasArgs, ), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,, args, ,]
[(, ), ;, if, (, hasArgs, ), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,, args, ,, namesToAlias, ), ;]
[(, ), ;, if, (, hasArgs, ), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,, args, ,, namesToAlias, ), ;]
[(, hasArgs, ), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,, args, ,, namesToAlias, ), ;, Preconditions, ., checkState, (]
[(, hasArgs, ), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,, args, ,, namesToAlias, ), ;, Preconditions, ., checkState, (]
[), {, Node, inlineResult, =, aliasAndInlineArguments, (, newBlock, ,, args, ,, namesToAlias, ), ;, Preconditions, ., checkState, (, newBlock, ==]
[(, newBlock, ,, args, ,, namesToAlias, ), ;, Preconditions, ., checkState, (, newBlock, ==, inlineResult, ), ;, }, if, (]
[args, ,, namesToAlias, ), ;, Preconditions, ., checkState, (, newBlock, ==, inlineResult, ), ;, }, if, (, isCallInLoop, ), {]
[namesToAlias, ), ;, Preconditions, ., checkState, (, newBlock, ==, inlineResult, ), ;, }, if, (, isCallInLoop, ), {, fixUnitializedVarDeclarations, (]
[newBlock, ==, inlineResult, ), ;, }, if, (, isCallInLoop, ), {, fixUnitializedVarDeclarations, (, newBlock, ), ;, }, String, labelName, =]
[inlineResult, ), ;, }, if, (, isCallInLoop, ), {, fixUnitializedVarDeclarations, (, newBlock, ), ;, }, String, labelName, =, getLabelNameForFunction, (]
[isCallInLoop, ), {, fixUnitializedVarDeclarations, (, newBlock, ), ;, }, String, labelName, =, getLabelNameForFunction, (, fnName, ), ;, Node, injectableBlock, =]
[{, fixUnitializedVarDeclarations, (, newBlock, ), ;, }, String, labelName, =, getLabelNameForFunction, (, fnName, ), ;, Node, injectableBlock, =, replaceReturns, (]
[(, newBlock, ), ;, }, String, labelName, =, getLabelNameForFunction, (, fnName, ), ;, Node, injectableBlock, =, replaceReturns, (, newBlock, ,]
[), ;, }, String, labelName, =, getLabelNameForFunction, (, fnName, ), ;, Node, injectableBlock, =, replaceReturns, (, newBlock, ,, resultName, ,]
[}, String, labelName, =, getLabelNameForFunction, (, fnName, ), ;, Node, injectableBlock, =, replaceReturns, (, newBlock, ,, resultName, ,, labelName, ,]
[=, getLabelNameForFunction, (, fnName, ), ;, Node, injectableBlock, =, replaceReturns, (, newBlock, ,, resultName, ,, labelName, ,, needsDefaultResult, ), ;]
[=, getLabelNameForFunction, (, fnName, ), ;, Node, injectableBlock, =, replaceReturns, (, newBlock, ,, resultName, ,, labelName, ,, needsDefaultResult, ), ;]
[), ;, Node, injectableBlock, =, replaceReturns, (, newBlock, ,, resultName, ,, labelName, ,, needsDefaultResult, ), ;, Preconditions, ., checkState, (]
[), ;, Node, injectableBlock, =, replaceReturns, (, newBlock, ,, resultName, ,, labelName, ,, needsDefaultResult, ), ;, Preconditions, ., checkState, (]
[Node, injectableBlock, =, replaceReturns, (, newBlock, ,, resultName, ,, labelName, ,, needsDefaultResult, ), ;, Preconditions, ., checkState, (, injectableBlock, !=]
[(, newBlock, ,, resultName, ,, labelName, ,, needsDefaultResult, ), ;, Preconditions, ., checkState, (, injectableBlock, !=, null, ), ;, return]
[(, injectableBlock, !=, null, ), ;, return, injectableBlock, ;, }, private, void, rewriteFunctionDeclarations, (, Node, n, ), {, if, (]
[(, injectableBlock, !=, null, ), ;, return, injectableBlock, ;, }, private, void, rewriteFunctionDeclarations, (, Node, n, ), {, if, (]
[}, private, void, rewriteFunctionDeclarations, (, Node, n, ), {, if, (, n, ., isFunction, (, ), ), {, if, (]
[}, private, void, rewriteFunctionDeclarations, (, Node, n, ), {, if, (, n, ., isFunction, (, ), ), {, if, (]
[(, Node, n, ), {, if, (, n, ., isFunction, (, ), ), {, if, (, NodeUtil, ., isFunctionDeclaration, (]
[n, ., isFunction, (, ), ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, fnNameNode, =]
[n, ., isFunction, (, ), ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, fnNameNode, =]
[NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, Node, name, =]
[NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, Node, name, =]
[NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, Node, name, =]
[n, ), ), {, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, Node, name, =, IR, ., name, (]
[n, ), ), {, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, Node, name, =, IR, ., name, (]
[getFirstChild, (, ), ;, Node, name, =, IR, ., name, (, fnNameNode, ., getString, (, ), ), ., srcref, (]
[=, IR, ., name, (, fnNameNode, ., getString, (, ), ), ., srcref, (, fnNameNode, ), ;, Node, var, =]
[=, IR, ., name, (, fnNameNode, ., getString, (, ), ), ., srcref, (, fnNameNode, ), ;, Node, var, =]
[=, IR, ., name, (, fnNameNode, ., getString, (, ), ), ., srcref, (, fnNameNode, ), ;, Node, var, =]
[(, fnNameNode, ., getString, (, ), ), ., srcref, (, fnNameNode, ), ;, Node, var, =, IR, ., var, (]
[), ), ., srcref, (, fnNameNode, ), ;, Node, var, =, IR, ., var, (, name, ), ., srcref, (]
[srcref, (, fnNameNode, ), ;, Node, var, =, IR, ., var, (, name, ), ., srcref, (, n, ), ;]
[srcref, (, fnNameNode, ), ;, Node, var, =, IR, ., var, (, name, ), ., srcref, (, n, ), ;]
[;, Node, var, =, IR, ., var, (, name, ), ., srcref, (, n, ), ;, fnNameNode, ., setString, (]
[=, IR, ., var, (, name, ), ., srcref, (, n, ), ;, fnNameNode, ., setString, (, "", ), ;]
[=, IR, ., var, (, name, ), ., srcref, (, n, ), ;, fnNameNode, ., setString, (, "", ), ;]
[=, IR, ., var, (, name, ), ., srcref, (, n, ), ;, fnNameNode, ., setString, (, "", ), ;]
[srcref, (, n, ), ;, fnNameNode, ., setString, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (]
[n, ), ;, fnNameNode, ., setString, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[fnNameNode, ., setString, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, var, ), ;]
[fnNameNode, ., setString, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, var, ), ;]
["", ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, var, ), ;, name, ., addChildToFront, (]
[,, var, ), ;, name, ., addChildToFront, (, n, ), ;, }, return, ;, }, for, (, Node, c, =]
[,, var, ), ;, name, ., addChildToFront, (, n, ), ;, }, return, ;, }, for, (, Node, c, =]
[n, ), ;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ,, next, ;]
[n, ), ;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ,, next, ;]
[;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ,, next, ;, c, !=]
[return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ,, next, ;, c, !=, null, ;]
[}, for, (, Node, c, =, n, ., getFirstChild, (, ), ,, next, ;, c, !=, null, ;, c, =]
[Node, c, =, n, ., getFirstChild, (, ), ,, next, ;, c, !=, null, ;, c, =, next, ), {]
[=, n, ., getFirstChild, (, ), ,, next, ;, c, !=, null, ;, c, =, next, ), {, next, =]
[=, n, ., getFirstChild, (, ), ,, next, ;, c, !=, null, ;, c, =, next, ), {, next, =]
[,, next, ;, c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;]
[;, c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, rewriteFunctionDeclarations, (]
[(, ), ;, rewriteFunctionDeclarations, (, c, ), ;, }, }, private, void, fixUnitializedVarDeclarations, (, Node, n, ), {, if, (]
[(, ), ;, rewriteFunctionDeclarations, (, c, ), ;, }, }, private, void, fixUnitializedVarDeclarations, (, Node, n, ), {, if, (]
[(, c, ), ;, }, }, private, void, fixUnitializedVarDeclarations, (, Node, n, ), {, if, (, NodeUtil, ., isLoopStructure, (]
[(, Node, n, ), {, if, (, NodeUtil, ., isLoopStructure, (, n, ), ), {, return, ;, }, if, (]
[(, Node, n, ), {, if, (, NodeUtil, ., isLoopStructure, (, n, ), ), {, return, ;, }, if, (]
[(, n, ), ), {, return, ;, }, if, (, n, ., isVar, (, ), ), {, Node, name, =]
[(, n, ), ), {, return, ;, }, if, (, n, ., isVar, (, ), ), {, Node, name, =]
[if, (, n, ., isVar, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (]
[(, n, ., isVar, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !]
[(, n, ., isVar, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !]
[=, n, ., getFirstChild, (, ), ;, if, (, !, name, ., hasChildren, (, ), ), {, Node, srcLocation, =]
[., getFirstChild, (, ), ;, if, (, !, name, ., hasChildren, (, ), ), {, Node, srcLocation, =, name, ;]
[., getFirstChild, (, ), ;, if, (, !, name, ., hasChildren, (, ), ), {, Node, srcLocation, =, name, ;]
[;, if, (, !, name, ., hasChildren, (, ), ), {, Node, srcLocation, =, name, ;, name, ., addChildToBack, (]
[;, if, (, !, name, ., hasChildren, (, ), ), {, Node, srcLocation, =, name, ;, name, ., addChildToBack, (]
[name, ., hasChildren, (, ), ), {, Node, srcLocation, =, name, ;, name, ., addChildToBack, (, NodeUtil, ., newUndefinedNode, (]
[., addChildToBack, (, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }, return, ;, }, for, (, Node, c, =]
[., addChildToBack, (, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }, return, ;, }, for, (, Node, c, =]
[(, srcLocation, ), ), ;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[(, srcLocation, ), ), ;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[), ), ;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[;, }, return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[return, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, fixUnitializedVarDeclarations, (]
[;, }, }, private, void, makeLocalNamesUnique, (, Node, fnNode, ,, boolean, isCallInLoop, ), {, Supplier, <, String, >, idSupplier, =]
[;, }, }, private, void, makeLocalNamesUnique, (, Node, fnNode, ,, boolean, isCallInLoop, ), {, Supplier, <, String, >, idSupplier, =]
[(, Node, fnNode, ,, boolean, isCallInLoop, ), {, Supplier, <, String, >, idSupplier, =, compiler, ., getUniqueNameIdSupplier, (, ), ;]
[(, Node, fnNode, ,, boolean, isCallInLoop, ), {, Supplier, <, String, >, idSupplier, =, compiler, ., getUniqueNameIdSupplier, (, ), ;]
[boolean, isCallInLoop, ), {, Supplier, <, String, >, idSupplier, =, compiler, ., getUniqueNameIdSupplier, (, ), ;, NodeTraversal, ., traverse, (]
[), {, Supplier, <, String, >, idSupplier, =, compiler, ., getUniqueNameIdSupplier, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[Supplier, <, String, >, idSupplier, =, compiler, ., getUniqueNameIdSupplier, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, fnNode, ,]
[>, idSupplier, =, compiler, ., getUniqueNameIdSupplier, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, fnNode, ,, new, MakeDeclaredNamesUnique, (]
[compiler, ., getUniqueNameIdSupplier, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, fnNode, ,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (]
[getUniqueNameIdSupplier, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, fnNode, ,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, fnNode, ,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,, "inline_", ,]
[(, compiler, ,, fnNode, ,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop, ), ), ), ;]
[(, compiler, ,, fnNode, ,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop, ), ), ), ;]
[fnNode, ,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop, ), ), ), ;, new, RenameLabels, (]
[new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop, ), ), ), ;, new, RenameLabels, (, compiler, ,]
[new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop, ), ), ), ;, new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (]
[idSupplier, ,, "inline_", ,, isCallInLoop, ), ), ), ;, new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (, idSupplier, ), ,]
[), ), ), ;, new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (, idSupplier, ), ,, false, ), ., process, (]
[), ;, new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (, idSupplier, ), ,, false, ), ., process, (, null, ,]
[<, String, >, {, final, Supplier, <, String, >, idSupplier, ;, LabelNameSupplier, (, Supplier, <, String, >, idSupplier, ), {]
[<, String, >, {, final, Supplier, <, String, >, idSupplier, ;, LabelNameSupplier, (, Supplier, <, String, >, idSupplier, ), {]
[final, Supplier, <, String, >, idSupplier, ;, LabelNameSupplier, (, Supplier, <, String, >, idSupplier, ), {, this, ., idSupplier, =]
[>, idSupplier, ), {, this, ., idSupplier, =, idSupplier, ;, }, @, Override, public, String, get, (, ), {, return]
[>, idSupplier, ), {, this, ., idSupplier, =, idSupplier, ;, }, @, Override, public, String, get, (, ), {, return]
[), {, this, ., idSupplier, =, idSupplier, ;, }, @, Override, public, String, get, (, ), {, return, "JSCompiler_inline_label_", +]
[), {, this, ., idSupplier, =, idSupplier, ;, }, @, Override, public, String, get, (, ), {, return, "JSCompiler_inline_label_", +]
[+, idSupplier, ., get, (, ), ;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =]
[+, idSupplier, ., get, (, ), ;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =]
[idSupplier, ., get, (, ), ;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =, (]
[idSupplier, ., get, (, ), ;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =, (]
[idSupplier, ., get, (, ), ;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =, (]
[get, (, ), ;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =, (, fnName, ==]
[), ;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =, (, fnName, ==, null, ||]
[), ;, }, }, private, String, getLabelNameForFunction, (, String, fnName, ), {, String, name, =, (, fnName, ==, null, ||]
[(, String, fnName, ), {, String, name, =, (, fnName, ==, null, ||, fnName, ., isEmpty, (, ), ), ?]
[fnName, ), {, String, name, =, (, fnName, ==, null, ||, fnName, ., isEmpty, (, ), ), ?, "anon", :]
[String, name, =, (, fnName, ==, null, ||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return]
[String, name, =, (, fnName, ==, null, ||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return]
[String, name, =, (, fnName, ==, null, ||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return]
[String, name, =, (, fnName, ==, null, ||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return]
[=, (, fnName, ==, null, ||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return, "JSCompiler_inline_label_", +]
[fnName, ==, null, ||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return, "JSCompiler_inline_label_", +, name, +]
[null, ||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return, "JSCompiler_inline_label_", +, name, +, "_", +]
[null, ||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName, ;, return, "JSCompiler_inline_label_", +, name, +, "_", +]
["JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName, (, ), {, return]
["JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName, (, ), {, return]
[name, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName, (, ), {, return, "JSCompiler_inline_this_", +]
[name, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, }, private, String, getUniqueThisName, (, ), {, return, "JSCompiler_inline_this_", +]
[Node, fnTemplateRoot, ,, LinkedHashMap, <, String, ,, Node, >, argMap, ,, Set, <, String, >, namesToAlias, ), {, if, (]
[Node, fnTemplateRoot, ,, LinkedHashMap, <, String, ,, Node, >, argMap, ,, Set, <, String, >, namesToAlias, ), {, if, (]
[Node, fnTemplateRoot, ,, LinkedHashMap, <, String, ,, Node, >, argMap, ,, Set, <, String, >, namesToAlias, ), {, if, (]
[,, LinkedHashMap, <, String, ,, Node, >, argMap, ,, Set, <, String, >, namesToAlias, ), {, if, (, namesToAlias, ==]
[<, String, ,, Node, >, argMap, ,, Set, <, String, >, namesToAlias, ), {, if, (, namesToAlias, ==, null, ||]
[<, String, ,, Node, >, argMap, ,, Set, <, String, >, namesToAlias, ), {, if, (, namesToAlias, ==, null, ||]
[>, namesToAlias, ), {, if, (, namesToAlias, ==, null, ||, namesToAlias, ., isEmpty, (, ), ), {, Node, result, =]
[>, namesToAlias, ), {, if, (, namesToAlias, ==, null, ||, namesToAlias, ., isEmpty, (, ), ), {, Node, result, =]
[if, (, namesToAlias, ==, null, ||, namesToAlias, ., isEmpty, (, ), ), {, Node, result, =, FunctionArgumentInjector, ., inject, (]
[namesToAlias, ==, null, ||, namesToAlias, ., isEmpty, (, ), ), {, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,]
[null, ||, namesToAlias, ., isEmpty, (, ), ), {, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,]
[namesToAlias, ., isEmpty, (, ), ), {, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,]
[(, ), ), {, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, argMap, ), ;]
[(, ), ), {, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, argMap, ), ;]
[Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, argMap, ), ;, Preconditions, ., checkState, (]
[Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, argMap, ), ;, Preconditions, ., checkState, (]
[=, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, argMap, ), ;, Preconditions, ., checkState, (, result, ==]
[(, compiler, ,, fnTemplateRoot, ,, null, ,, argMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, return]
[(, result, ==, fnTemplateRoot, ), ;, return, result, ;, }, else, {, Map, <, String, ,, Node, >, newArgMap, =]
[(, result, ==, fnTemplateRoot, ), ;, return, result, ;, }, else, {, Map, <, String, ,, Node, >, newArgMap, =]
[), ;, return, result, ;, }, else, {, Map, <, String, ,, Node, >, newArgMap, =, Maps, ., newHashMap, (]
[<, String, ,, Node, >, newArgMap, =, Maps, ., newHashMap, (, argMap, ), ;, List, <, Node, >, newVars, =]
[<, String, ,, Node, >, newArgMap, =, Maps, ., newHashMap, (, argMap, ), ;, List, <, Node, >, newVars, =]
[Node, >, newVars, =, Lists, ., newLinkedList, (, ), ;, for, (, Entry, <, String, ,, Node, >, entry, :]
[Node, >, newVars, =, Lists, ., newLinkedList, (, ), ;, for, (, Entry, <, String, ,, Node, >, entry, :]
[for, (, Entry, <, String, ,, Node, >, entry, :, argMap, ., entrySet, (, ), ), {, String, name, =]
[for, (, Entry, <, String, ,, Node, >, entry, :, argMap, ., entrySet, (, ), ), {, String, name, =]
[entry, :, argMap, ., entrySet, (, ), ), {, String, name, =, entry, ., getKey, (, ), ;, if, (]
[entry, :, argMap, ., entrySet, (, ), ), {, String, name, =, entry, ., getKey, (, ), ;, if, (]
[entrySet, (, ), ), {, String, name, =, entry, ., getKey, (, ), ;, if, (, namesToAlias, ., contains, (]
[name, =, entry, ., getKey, (, ), ;, if, (, namesToAlias, ., contains, (, name, ), ), {, if, (]
[name, =, entry, ., getKey, (, ), ;, if, (, namesToAlias, ., contains, (, name, ), ), {, if, (]
[getKey, (, ), ;, if, (, namesToAlias, ., contains, (, name, ), ), {, if, (, name, ., equals, (]
[., contains, (, name, ), ), {, if, (, name, ., equals, (, THIS_MARKER, ), ), {, boolean, referencesThis, =]
[., contains, (, name, ), ), {, if, (, name, ., equals, (, THIS_MARKER, ), ), {, boolean, referencesThis, =]
[), ), {, if, (, name, ., equals, (, THIS_MARKER, ), ), {, boolean, referencesThis, =, NodeUtil, ., referencesThis, (]
[., equals, (, THIS_MARKER, ), ), {, boolean, referencesThis, =, NodeUtil, ., referencesThis, (, fnTemplateRoot, ), ;, Node, value, =]
[., equals, (, THIS_MARKER, ), ), {, boolean, referencesThis, =, NodeUtil, ., referencesThis, (, fnTemplateRoot, ), ;, Node, value, =]
[referencesThis, =, NodeUtil, ., referencesThis, (, fnTemplateRoot, ), ;, Node, value, =, entry, ., getValue, (, ), ;, if, (]
[referencesThis, =, NodeUtil, ., referencesThis, (, fnTemplateRoot, ), ;, Node, value, =, entry, ., getValue, (, ), ;, if, (]
[=, NodeUtil, ., referencesThis, (, fnTemplateRoot, ), ;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !]
[=, NodeUtil, ., referencesThis, (, fnTemplateRoot, ), ;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !]
[), ;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !, value, ., isThis, (, ), &&]
[;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !, value, ., isThis, (, ), &&, (]
[;, Node, value, =, entry, ., getValue, (, ), ;, if, (, !, value, ., isThis, (, ), &&, (]
[value, =, entry, ., getValue, (, ), ;, if, (, !, value, ., isThis, (, ), &&, (, referencesThis, ||]
[value, =, entry, ., getValue, (, ), ;, if, (, !, value, ., isThis, (, ), &&, (, referencesThis, ||]
[getValue, (, ), ;, if, (, !, value, ., isThis, (, ), &&, (, referencesThis, ||, NodeUtil, ., mayHaveSideEffects, (]
[), ;, if, (, !, value, ., isThis, (, ), &&, (, referencesThis, ||, NodeUtil, ., mayHaveSideEffects, (, value, ,]
[(, ), &&, (, referencesThis, ||, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ), {, String, newName, =]
[., mayHaveSideEffects, (, value, ,, compiler, ), ), ), {, String, newName, =, getUniqueThisName, (, ), ;, Node, newValue, =]
[., mayHaveSideEffects, (, value, ,, compiler, ), ), ), {, String, newName, =, getUniqueThisName, (, ), ;, Node, newValue, =]
[., mayHaveSideEffects, (, value, ,, compiler, ), ), ), {, String, newName, =, getUniqueThisName, (, ), ;, Node, newValue, =]
[getUniqueThisName, (, ), ;, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =]
[getUniqueThisName, (, ), ;, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =]
[getUniqueThisName, (, ), ;, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =]
[Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (]
[=, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, newName, ,]
[), ., cloneTree, (, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, newName, ,, newValue, ), ., copyInformationFromForTree, (]
[(, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, newName, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;]
[(, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, newName, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;]
[newNode, =, NodeUtil, ., newVarNode, (, newName, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (]
[NodeUtil, ., newVarNode, (, newName, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,]
[(, newName, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;]
[(, newName, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;]
[), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., put, (]
[copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., put, (, THIS_MARKER, ,]
[copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., put, (, THIS_MARKER, ,]
[copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., put, (, THIS_MARKER, ,]
[;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., put, (, THIS_MARKER, ,, IR, ., name, (]
[0, ,, newNode, ), ;, newArgMap, ., put, (, THIS_MARKER, ,, IR, ., name, (, newName, ), ., srcrefTree, (]
[IR, ., name, (, newName, ), ., srcrefTree, (, newValue, ), ), ;, }, }, else, {, Node, newValue, =]
[IR, ., name, (, newName, ), ., srcrefTree, (, newValue, ), ), ;, }, }, else, {, Node, newValue, =]
[IR, ., name, (, newName, ), ., srcrefTree, (, newValue, ), ), ;, }, }, else, {, Node, newValue, =]
[}, }, else, {, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =]
[}, }, else, {, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =]
[}, }, else, {, Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =]
[Node, newValue, =, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (]
[=, entry, ., getValue, (, ), ., cloneTree, (, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, name, ,]
[), ., cloneTree, (, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, name, ,, newValue, ), ., copyInformationFromForTree, (]
[(, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, name, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;]
[(, ), ;, Node, newNode, =, NodeUtil, ., newVarNode, (, name, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;]
[newNode, =, NodeUtil, ., newVarNode, (, name, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (]
[NodeUtil, ., newVarNode, (, name, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,]
[(, name, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;]
[(, name, ,, newValue, ), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;]
[), ., copyInformationFromForTree, (, newValue, ), ;, newVars, ., add, (, 0, ,, newNode, ), ;, newArgMap, ., remove, (]
[add, (, 0, ,, newNode, ), ;, newArgMap, ., remove, (, name, ), ;, }, }, }, Node, result, =]
[add, (, 0, ,, newNode, ), ;, newArgMap, ., remove, (, name, ), ;, }, }, }, Node, result, =]
[newNode, ), ;, newArgMap, ., remove, (, name, ), ;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject, (]
[;, newArgMap, ., remove, (, name, ), ;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,]
[., remove, (, name, ), ;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,]
[(, name, ), ;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,]
[;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, newArgMap, ), ;]
[;, }, }, }, Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, newArgMap, ), ;]
[Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, newArgMap, ), ;, Preconditions, ., checkState, (]
[Node, result, =, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, newArgMap, ), ;, Preconditions, ., checkState, (]
[=, FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, newArgMap, ), ;, Preconditions, ., checkState, (, result, ==]
[,, null, ,, newArgMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, for, (, Node, n, :]
[newArgMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, for, (, Node, n, :, newVars, ), {]
[newArgMap, ), ;, Preconditions, ., checkState, (, result, ==, fnTemplateRoot, ), ;, for, (, Node, n, :, newVars, ), {]
[., checkState, (, result, ==, fnTemplateRoot, ), ;, for, (, Node, n, :, newVars, ), {, fnTemplateRoot, ., addChildToFront, (]
[fnTemplateRoot, ), ;, for, (, Node, n, :, newVars, ), {, fnTemplateRoot, ., addChildToFront, (, n, ), ;, }, return]
[}, }, private, static, Node, replaceReturns, (, Node, block, ,, String, resultName, ,, String, labelName, ,, boolean, resultMustBeSet, ), {]
[}, }, private, static, Node, replaceReturns, (, Node, block, ,, String, resultName, ,, String, labelName, ,, boolean, resultMustBeSet, ), {]
[Node, replaceReturns, (, Node, block, ,, String, resultName, ,, String, labelName, ,, boolean, resultMustBeSet, ), {, Preconditions, ., checkNotNull, (]
[Node, block, ,, String, resultName, ,, String, labelName, ,, boolean, resultMustBeSet, ), {, Preconditions, ., checkNotNull, (, block, ), ;]
[Node, block, ,, String, resultName, ,, String, labelName, ,, boolean, resultMustBeSet, ), {, Preconditions, ., checkNotNull, (, block, ), ;]
[resultName, ,, String, labelName, ,, boolean, resultMustBeSet, ), {, Preconditions, ., checkNotNull, (, block, ), ;, Preconditions, ., checkNotNull, (]
[resultMustBeSet, ), {, Preconditions, ., checkNotNull, (, block, ), ;, Preconditions, ., checkNotNull, (, labelName, ), ;, Node, root, =]
[checkNotNull, (, block, ), ;, Preconditions, ., checkNotNull, (, labelName, ), ;, Node, root, =, block, ;, boolean, hasReturnAtExit, =]
[Preconditions, ., checkNotNull, (, labelName, ), ;, Node, root, =, block, ;, boolean, hasReturnAtExit, =, false, ;, int, returnCount, =]
[Preconditions, ., checkNotNull, (, labelName, ), ;, Node, root, =, block, ;, boolean, hasReturnAtExit, =, false, ;, int, returnCount, =]
[labelName, ), ;, Node, root, =, block, ;, boolean, hasReturnAtExit, =, false, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (]
[;, Node, root, =, block, ;, boolean, hasReturnAtExit, =, false, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block, ,]
[;, Node, root, =, block, ;, boolean, hasReturnAtExit, =, false, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block, ,]
[block, ;, boolean, hasReturnAtExit, =, false, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,]
[NodeUtil, ., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, if, (]
[NodeUtil, ., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, if, (]
[getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, if, (, returnCount, >]
[,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, if, (, returnCount, >, 0, ), {]
[., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, if, (, returnCount, >, 0, ), {, hasReturnAtExit, =]
[,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, if, (, returnCount, >, 0, ), {, hasReturnAtExit, =, hasReturnAtExit, (]
[(, ), ), ;, if, (, returnCount, >, 0, ), {, hasReturnAtExit, =, hasReturnAtExit, (, block, ), ;, if, (]
[;, if, (, returnCount, >, 0, ), {, hasReturnAtExit, =, hasReturnAtExit, (, block, ), ;, if, (, hasReturnAtExit, ), {]
[(, returnCount, >, 0, ), {, hasReturnAtExit, =, hasReturnAtExit, (, block, ), ;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (]
[>, 0, ), {, hasReturnAtExit, =, hasReturnAtExit, (, block, ), ;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,]
[{, hasReturnAtExit, =, hasReturnAtExit, (, block, ), ;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,, resultName, ), ;]
[{, hasReturnAtExit, =, hasReturnAtExit, (, block, ), ;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,, resultName, ), ;]
[), ;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,, resultName, ), ;, returnCount, --, ;, }, if, (]
[), ;, if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,, resultName, ), ;, returnCount, --, ;, }, if, (]
[if, (, hasReturnAtExit, ), {, convertLastReturnToStatement, (, block, ,, resultName, ), ;, returnCount, --, ;, }, if, (, returnCount, >]
[), {, convertLastReturnToStatement, (, block, ,, resultName, ), ;, returnCount, --, ;, }, if, (, returnCount, >, 0, ), {]
[convertLastReturnToStatement, (, block, ,, resultName, ), ;, returnCount, --, ;, }, if, (, returnCount, >, 0, ), {, replaceReturnWithBreak, (]
[block, ,, resultName, ), ;, returnCount, --, ;, }, if, (, returnCount, >, 0, ), {, replaceReturnWithBreak, (, block, ,]
[resultName, ), ;, returnCount, --, ;, }, if, (, returnCount, >, 0, ), {, replaceReturnWithBreak, (, block, ,, null, ,]
[;, returnCount, --, ;, }, if, (, returnCount, >, 0, ), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,]
[(, returnCount, >, 0, ), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,, labelName, ), ;, Node, name, =]
[(, returnCount, >, 0, ), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,, labelName, ), ;, Node, name, =]
[(, returnCount, >, 0, ), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,, labelName, ), ;, Node, name, =]
[), {, replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,, labelName, ), ;, Node, name, =, IR, ., labelName, (]
[,, null, ,, resultName, ,, labelName, ), ;, Node, name, =, IR, ., labelName, (, labelName, ), ., srcref, (]
[), ;, Node, name, =, IR, ., labelName, (, labelName, ), ., srcref, (, block, ), ;, Node, label, =]
[), ;, Node, name, =, IR, ., labelName, (, labelName, ), ., srcref, (, block, ), ;, Node, label, =]
[), ;, Node, name, =, IR, ., labelName, (, labelName, ), ., srcref, (, block, ), ;, Node, label, =]
[=, IR, ., labelName, (, labelName, ), ., srcref, (, block, ), ;, Node, label, =, IR, ., label, (]
[., labelName, (, labelName, ), ., srcref, (, block, ), ;, Node, label, =, IR, ., label, (, name, ,]
[., srcref, (, block, ), ;, Node, label, =, IR, ., label, (, name, ,, block, ), ., srcref, (]
[Node, label, =, IR, ., label, (, name, ,, block, ), ., srcref, (, block, ), ;, Node, newRoot, =]
[Node, label, =, IR, ., label, (, name, ,, block, ), ., srcref, (, block, ), ;, Node, newRoot, =]
[Node, label, =, IR, ., label, (, name, ,, block, ), ., srcref, (, block, ), ;, Node, newRoot, =]
[,, block, ), ., srcref, (, block, ), ;, Node, newRoot, =, IR, ., block, (, ), ., srcref, (]
[., srcref, (, block, ), ;, Node, newRoot, =, IR, ., block, (, ), ., srcref, (, block, ), ;]
[., srcref, (, block, ), ;, Node, newRoot, =, IR, ., block, (, ), ., srcref, (, block, ), ;]
[), ;, Node, newRoot, =, IR, ., block, (, ), ., srcref, (, block, ), ;, newRoot, ., addChildrenToBack, (]
[newRoot, =, IR, ., block, (, ), ., srcref, (, block, ), ;, newRoot, ., addChildrenToBack, (, label, ), ;]
[IR, ., block, (, ), ., srcref, (, block, ), ;, newRoot, ., addChildrenToBack, (, label, ), ;, root, =]
[srcref, (, block, ), ;, newRoot, ., addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if, (]
[srcref, (, block, ), ;, newRoot, ., addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if, (]
[srcref, (, block, ), ;, newRoot, ., addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if, (]
[block, ), ;, newRoot, ., addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&]
[), ;, newRoot, ., addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !]
[newRoot, ., addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit, &&]
[newRoot, ., addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit, &&]
[addChildrenToBack, (, label, ), ;, root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit, &&, resultName, !=]
[), ;, root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit, &&, resultName, !=, null, ), {]
[root, =, newRoot, ;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit, &&, resultName, !=, null, ), {, addDummyAssignment, (]
[newRoot, ;, }, }, if, (, resultMustBeSet, &&, !, hasReturnAtExit, &&, resultName, !=, null, ), {, addDummyAssignment, (, block, ,]
[(, resultMustBeSet, &&, !, hasReturnAtExit, &&, resultName, !=, null, ), {, addDummyAssignment, (, block, ,, resultName, ), ;, }, return]
[resultName, ), ;, }, return, root, ;, }, private, static, void, addDummyAssignment, (, Node, node, ,, String, resultName, ), {]
[resultName, ), ;, }, return, root, ;, }, private, static, void, addDummyAssignment, (, Node, node, ,, String, resultName, ), {]
[return, root, ;, }, private, static, void, addDummyAssignment, (, Node, node, ,, String, resultName, ), {, Preconditions, ., checkArgument, (]
[return, root, ;, }, private, static, void, addDummyAssignment, (, Node, node, ,, String, resultName, ), {, Preconditions, ., checkArgument, (]
[node, ,, String, resultName, ), {, Preconditions, ., checkArgument, (, node, ., isBlock, (, ), ), ;, Node, srcLocation, =]
[{, Preconditions, ., checkArgument, (, node, ., isBlock, (, ), ), ;, Node, srcLocation, =, node, ;, Node, retVal, =]
[{, Preconditions, ., checkArgument, (, node, ., isBlock, (, ), ), ;, Node, srcLocation, =, node, ;, Node, retVal, =]
[(, node, ., isBlock, (, ), ), ;, Node, srcLocation, =, node, ;, Node, retVal, =, NodeUtil, ., newUndefinedNode, (]
[), ;, Node, srcLocation, =, node, ;, Node, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, Node, resultNode, =]
[Node, srcLocation, =, node, ;, Node, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, Node, resultNode, =, createAssignStatementNode, (]
[=, node, ;, Node, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, Node, resultNode, =, createAssignStatementNode, (, resultName, ,]
[Node, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, Node, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;]
[Node, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, Node, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;]
[., newUndefinedNode, (, srcLocation, ), ;, Node, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, resultNode, ., copyInformationFromForTree, (]
[srcLocation, ), ;, Node, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, resultNode, ., copyInformationFromForTree, (, node, ), ;]
[srcLocation, ), ;, Node, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, resultNode, ., copyInformationFromForTree, (, node, ), ;]
[resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, resultNode, ., copyInformationFromForTree, (, node, ), ;, node, ., addChildrenToBack, (]
[(, resultNode, ), ;, }, private, static, void, convertLastReturnToStatement, (, Node, block, ,, String, resultName, ), {, Node, ret, =]
[(, resultNode, ), ;, }, private, static, void, convertLastReturnToStatement, (, Node, block, ,, String, resultName, ), {, Node, ret, =]
[static, void, convertLastReturnToStatement, (, Node, block, ,, String, resultName, ), {, Node, ret, =, block, ., getLastChild, (, ), ;]
[static, void, convertLastReturnToStatement, (, Node, block, ,, String, resultName, ), {, Node, ret, =, block, ., getLastChild, (, ), ;]
[Node, block, ,, String, resultName, ), {, Node, ret, =, block, ., getLastChild, (, ), ;, Preconditions, ., checkArgument, (]
[Node, block, ,, String, resultName, ), {, Node, ret, =, block, ., getLastChild, (, ), ;, Preconditions, ., checkArgument, (]
[block, ., getLastChild, (, ), ;, Preconditions, ., checkArgument, (, ret, ., isReturn, (, ), ), ;, Node, resultNode, =]
[getLastChild, (, ), ;, Preconditions, ., checkArgument, (, ret, ., isReturn, (, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (]
[), ;, Preconditions, ., checkArgument, (, ret, ., isReturn, (, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, ret, ,]
[(, ret, ., isReturn, (, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, ret, ,, resultName, ), ;, if, (]
[(, ret, ., isReturn, (, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, ret, ,, resultName, ), ;, if, (]
[., isReturn, (, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, ret, ,, resultName, ), ;, if, (, resultNode, ==]
[), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, ret, ,, resultName, ), ;, if, (, resultNode, ==, null, ), {]
[), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, ret, ,, resultName, ), ;, if, (, resultNode, ==, null, ), {]
[resultNode, =, getReplacementReturnStatement, (, ret, ,, resultName, ), ;, if, (, resultNode, ==, null, ), {, block, ., removeChild, (]
[resultName, ), ;, if, (, resultNode, ==, null, ), {, block, ., removeChild, (, ret, ), ;, }, else, {]
[resultName, ), ;, if, (, resultNode, ==, null, ), {, block, ., removeChild, (, ret, ), ;, }, else, {]
[(, resultNode, ==, null, ), {, block, ., removeChild, (, ret, ), ;, }, else, {, resultNode, ., copyInformationFromForTree, (]
[null, ), {, block, ., removeChild, (, ret, ), ;, }, else, {, resultNode, ., copyInformationFromForTree, (, ret, ), ;]
[null, ), {, block, ., removeChild, (, ret, ), ;, }, else, {, resultNode, ., copyInformationFromForTree, (, ret, ), ;]
[., removeChild, (, ret, ), ;, }, else, {, resultNode, ., copyInformationFromForTree, (, ret, ), ;, block, ., replaceChild, (]
[(, ret, ), ;, }, else, {, resultNode, ., copyInformationFromForTree, (, ret, ), ;, block, ., replaceChild, (, ret, ,]
[resultNode, ), ;, }, }, private, static, Node, createAssignStatementNode, (, String, name, ,, Node, expression, ), {, Node, nameNode, =]
[resultNode, ), ;, }, }, private, static, Node, createAssignStatementNode, (, String, name, ,, Node, expression, ), {, Node, nameNode, =]
[}, private, static, Node, createAssignStatementNode, (, String, name, ,, Node, expression, ), {, Node, nameNode, =, IR, ., name, (]
[String, name, ,, Node, expression, ), {, Node, nameNode, =, IR, ., name, (, name, ), ;, Node, assign, =]
[String, name, ,, Node, expression, ), {, Node, nameNode, =, IR, ., name, (, name, ), ;, Node, assign, =]
[expression, ), {, Node, nameNode, =, IR, ., name, (, name, ), ;, Node, assign, =, IR, ., assign, (]
[{, Node, nameNode, =, IR, ., name, (, name, ), ;, Node, assign, =, IR, ., assign, (, nameNode, ,]
[IR, ., name, (, name, ), ;, Node, assign, =, IR, ., assign, (, nameNode, ,, expression, ), ;, return]
[IR, ., name, (, name, ), ;, Node, assign, =, IR, ., assign, (, nameNode, ,, expression, ), ;, return]
[name, ), ;, Node, assign, =, IR, ., assign, (, nameNode, ,, expression, ), ;, return, NodeUtil, ., newExpr, (]
[(, assign, ), ;, }, private, static, Node, getReplacementReturnStatement, (, Node, node, ,, String, resultName, ), {, Node, resultNode, =]
[private, static, Node, getReplacementReturnStatement, (, Node, node, ,, String, resultName, ), {, Node, resultNode, =, null, ;, Node, retVal, =]
[(, Node, node, ,, String, resultName, ), {, Node, resultNode, =, null, ;, Node, retVal, =, null, ;, if, (]
[(, Node, node, ,, String, resultName, ), {, Node, resultNode, =, null, ;, Node, retVal, =, null, ;, if, (]
[{, Node, resultNode, =, null, ;, Node, retVal, =, null, ;, if, (, node, ., hasChildren, (, ), ), {]
[resultNode, =, null, ;, Node, retVal, =, null, ;, if, (, node, ., hasChildren, (, ), ), {, retVal, =]
[resultNode, =, null, ;, Node, retVal, =, null, ;, if, (, node, ., hasChildren, (, ), ), {, retVal, =]
[resultNode, =, null, ;, Node, retVal, =, null, ;, if, (, node, ., hasChildren, (, ), ), {, retVal, =]
[hasChildren, (, ), ), {, retVal, =, node, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, if, (]
[hasChildren, (, ), ), {, retVal, =, node, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, if, (]
[), ), {, retVal, =, node, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, if, (, resultName, ==]
[node, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, if, (, resultName, ==, null, ), {, if, (]
[node, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, if, (, resultName, ==, null, ), {, if, (]
[getFirstChild, (, ), ., cloneTree, (, ), ;, }, if, (, resultName, ==, null, ), {, if, (, retVal, !=]
[., cloneTree, (, ), ;, }, if, (, resultName, ==, null, ), {, if, (, retVal, !=, null, ), {]
[(, ), ;, }, if, (, resultName, ==, null, ), {, if, (, retVal, !=, null, ), {, resultNode, =]
[(, ), ;, }, if, (, resultName, ==, null, ), {, if, (, retVal, !=, null, ), {, resultNode, =]
[if, (, resultName, ==, null, ), {, if, (, retVal, !=, null, ), {, resultNode, =, NodeUtil, ., newExpr, (]
[retVal, !=, null, ), {, resultNode, =, NodeUtil, ., newExpr, (, retVal, ), ;, }, }, else, {, if, (]
[retVal, !=, null, ), {, resultNode, =, NodeUtil, ., newExpr, (, retVal, ), ;, }, }, else, {, if, (]
[null, ), {, resultNode, =, NodeUtil, ., newExpr, (, retVal, ), ;, }, }, else, {, if, (, retVal, ==]
[., newExpr, (, retVal, ), ;, }, }, else, {, if, (, retVal, ==, null, ), {, Node, srcLocation, =]
[(, retVal, ), ;, }, }, else, {, if, (, retVal, ==, null, ), {, Node, srcLocation, =, node, ;]
[), ;, }, }, else, {, if, (, retVal, ==, null, ), {, Node, srcLocation, =, node, ;, retVal, =]
[), ;, }, }, else, {, if, (, retVal, ==, null, ), {, Node, srcLocation, =, node, ;, retVal, =]
[else, {, if, (, retVal, ==, null, ), {, Node, srcLocation, =, node, ;, retVal, =, NodeUtil, ., newUndefinedNode, (]
[retVal, ==, null, ), {, Node, srcLocation, =, node, ;, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }]
[null, ), {, Node, srcLocation, =, node, ;, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, resultNode, =]
[{, Node, srcLocation, =, node, ;, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, resultNode, =, createAssignStatementNode, (]
[srcLocation, =, node, ;, retVal, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, resultNode, =, createAssignStatementNode, (, resultName, ,]
[=, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, resultNode, =, createAssignStatementNode, (, resultName, ,, retVal, ), ;, }, return]
[resultName, ,, retVal, ), ;, }, return, resultNode, ;, }, private, static, boolean, hasReturnAtExit, (, Node, block, ), {, return]
[,, retVal, ), ;, }, return, resultNode, ;, }, private, static, boolean, hasReturnAtExit, (, Node, block, ), {, return, (]
[,, retVal, ), ;, }, return, resultNode, ;, }, private, static, boolean, hasReturnAtExit, (, Node, block, ), {, return, (]
[,, retVal, ), ;, }, return, resultNode, ;, }, private, static, boolean, hasReturnAtExit, (, Node, block, ), {, return, (]
[private, static, Node, replaceReturnWithBreak, (, Node, current, ,, Node, parent, ,, String, resultName, ,, String, labelName, ), {, if, (]
[private, static, Node, replaceReturnWithBreak, (, Node, current, ,, Node, parent, ,, String, resultName, ,, String, labelName, ), {, if, (]
[private, static, Node, replaceReturnWithBreak, (, Node, current, ,, Node, parent, ,, String, resultName, ,, String, labelName, ), {, if, (]
[current, ,, Node, parent, ,, String, resultName, ,, String, labelName, ), {, if, (, current, ., isFunction, (, ), ||]
[current, ,, Node, parent, ,, String, resultName, ,, String, labelName, ), {, if, (, current, ., isFunction, (, ), ||]
[String, labelName, ), {, if, (, current, ., isFunction, (, ), ||, current, ., isExprResult, (, ), ), {, return]
[(, current, ., isFunction, (, ), ||, current, ., isExprResult, (, ), ), {, return, current, ;, }, if, (]
[(, current, ., isFunction, (, ), ||, current, ., isExprResult, (, ), ), {, return, current, ;, }, if, (]
[current, ., isExprResult, (, ), ), {, return, current, ;, }, if, (, current, ., isReturn, (, ), ), {]
[current, ., isExprResult, (, ), ), {, return, current, ;, }, if, (, current, ., isReturn, (, ), ), {]
[), ), {, return, current, ;, }, if, (, current, ., isReturn, (, ), ), {, Preconditions, ., checkState, (]
[), ), {, return, current, ;, }, if, (, current, ., isReturn, (, ), ), {, Preconditions, ., checkState, (]
[current, ;, }, if, (, current, ., isReturn, (, ), ), {, Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (]
[isReturn, (, ), ), {, Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Node, resultNode, =]
[), ), {, Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (]
[{, Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, current, ,]
[., isStatementBlock, (, parent, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, current, ,, resultName, ), ;, Node, breakNode, =]
[., isStatementBlock, (, parent, ), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, current, ,, resultName, ), ;, Node, breakNode, =]
[), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, current, ,, resultName, ), ;, Node, breakNode, =, IR, ., breakNode, (]
[), ), ;, Node, resultNode, =, getReplacementReturnStatement, (, current, ,, resultName, ), ;, Node, breakNode, =, IR, ., breakNode, (]
[resultNode, =, getReplacementReturnStatement, (, current, ,, resultName, ), ;, Node, breakNode, =, IR, ., breakNode, (, IR, ., labelName, (]
[current, ,, resultName, ), ;, Node, breakNode, =, IR, ., breakNode, (, IR, ., labelName, (, labelName, ), ), ;]
[current, ,, resultName, ), ;, Node, breakNode, =, IR, ., breakNode, (, IR, ., labelName, (, labelName, ), ), ;]
[;, Node, breakNode, =, IR, ., breakNode, (, IR, ., labelName, (, labelName, ), ), ;, breakNode, ., copyInformationFromForTree, (]
[=, IR, ., breakNode, (, IR, ., labelName, (, labelName, ), ), ;, breakNode, ., copyInformationFromForTree, (, current, ), ;]
[=, IR, ., breakNode, (, IR, ., labelName, (, labelName, ), ), ;, breakNode, ., copyInformationFromForTree, (, current, ), ;]
[(, IR, ., labelName, (, labelName, ), ), ;, breakNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., replaceChild, (]
[., labelName, (, labelName, ), ), ;, breakNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., replaceChild, (, current, ,]
[), ;, breakNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., replaceChild, (, current, ,, breakNode, ), ;, if, (]
[), ;, breakNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., replaceChild, (, current, ,, breakNode, ), ;, if, (]
[breakNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., replaceChild, (, current, ,, breakNode, ), ;, if, (, resultNode, !=]
[(, current, ), ;, parent, ., replaceChild, (, current, ,, breakNode, ), ;, if, (, resultNode, !=, null, ), {]
[(, current, ), ;, parent, ., replaceChild, (, current, ,, breakNode, ), ;, if, (, resultNode, !=, null, ), {]
[parent, ., replaceChild, (, current, ,, breakNode, ), ;, if, (, resultNode, !=, null, ), {, resultNode, ., copyInformationFromForTree, (]
[(, current, ,, breakNode, ), ;, if, (, resultNode, !=, null, ), {, resultNode, ., copyInformationFromForTree, (, current, ), ;]
[(, current, ,, breakNode, ), ;, if, (, resultNode, !=, null, ), {, resultNode, ., copyInformationFromForTree, (, current, ), ;]
[), ;, if, (, resultNode, !=, null, ), {, resultNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., addChildBefore, (]
[if, (, resultNode, !=, null, ), {, resultNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., addChildBefore, (, resultNode, ,]
[null, ), {, resultNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., addChildBefore, (, resultNode, ,, breakNode, ), ;, }]
[{, resultNode, ., copyInformationFromForTree, (, current, ), ;, parent, ., addChildBefore, (, resultNode, ,, breakNode, ), ;, }, current, =]
[addChildBefore, (, resultNode, ,, breakNode, ), ;, }, current, =, breakNode, ;, }, else, {, for, (, Node, c, =]
[addChildBefore, (, resultNode, ,, breakNode, ), ;, }, current, =, breakNode, ;, }, else, {, for, (, Node, c, =]
[;, }, current, =, breakNode, ;, }, else, {, for, (, Node, c, =, current, ., getFirstChild, (, ), ;]
[;, }, current, =, breakNode, ;, }, else, {, for, (, Node, c, =, current, ., getFirstChild, (, ), ;]
[current, =, breakNode, ;, }, else, {, for, (, Node, c, =, current, ., getFirstChild, (, ), ;, c, !=]
[breakNode, ;, }, else, {, for, (, Node, c, =, current, ., getFirstChild, (, ), ;, c, !=, null, ;]
[}, else, {, for, (, Node, c, =, current, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[}, else, {, for, (, Node, c, =, current, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, current, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, c, =]
[(, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, c, =, replaceReturnWithBreak, (]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, c, =, replaceReturnWithBreak, (, c, ,]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, c, =, replaceReturnWithBreak, (, c, ,, current, ,]
[;, c, =, c, ., getNext, (, ), ), {, c, =, replaceReturnWithBreak, (, c, ,, current, ,, resultName, ,]
[(, ), ), {, c, =, replaceReturnWithBreak, (, c, ,, current, ,, resultName, ,, labelName, ), ;, }, }, return]
