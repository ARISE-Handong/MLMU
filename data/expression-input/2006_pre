[(, final, RandomGenerator, generator, ,, final, double, alpha, ,, final, double, beta, ), throws, NullArgumentException, ,, OutOfRangeException, {, if, (]
[(, final, RandomGenerator, generator, ,, final, double, alpha, ,, final, double, beta, ), throws, NullArgumentException, ,, OutOfRangeException, {, if, (]
[RandomGenerator, generator, ,, final, double, alpha, ,, final, double, beta, ), throws, NullArgumentException, ,, OutOfRangeException, {, if, (, generator, ==]
[double, alpha, ,, final, double, beta, ), throws, NullArgumentException, ,, OutOfRangeException, {, if, (, generator, ==, null, ), {, throw]
[NullArgumentException, ,, OutOfRangeException, {, if, (, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[,, OutOfRangeException, {, if, (, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, !]
[OutOfRangeException, {, if, (, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, !, (]
[OutOfRangeException, {, if, (, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, !, (]
[OutOfRangeException, {, if, (, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, !, (]
[if, (, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, !, (, alpha, >]
[generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, !, (, alpha, >, 0d, &&]
[generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, !, (, alpha, >, 0d, &&]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, !, (, alpha, >, 0d, &&, alpha, <=]
[NullArgumentException, (, ), ;, }, if, (, !, (, alpha, >, 0d, &&, alpha, <=, 2d, ), ), {, throw]
[;, }, if, (, !, (, alpha, >, 0d, &&, alpha, <=, 2d, ), ), {, throw, new, OutOfRangeException, (]
[;, }, if, (, !, (, alpha, >, 0d, &&, alpha, <=, 2d, ), ), {, throw, new, OutOfRangeException, (]
[!, (, alpha, >, 0d, &&, alpha, <=, 2d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,]
[alpha, >, 0d, &&, alpha, <=, 2d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,]
[0d, &&, alpha, <=, 2d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (]
[{, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (, !]
[throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (, !, (]
[throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (, !, (]
[throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (, !, (]
[OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (, !, (, beta, >=]
[(, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (, !, (, beta, >=, -]
[., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (, !, (, beta, >=, -, 1d, &&]
[., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (, !, (, beta, >=, -, 1d, &&]
[,, alpha, ,, 0, ,, 2, ), ;, }, if, (, !, (, beta, >=, -, 1d, &&, beta, <=]
[2, ), ;, }, if, (, !, (, beta, >=, -, 1d, &&, beta, <=, 1d, ), ), {, throw]
[}, if, (, !, (, beta, >=, -, 1d, &&, beta, <=, 1d, ), ), {, throw, new, OutOfRangeException, (]
[}, if, (, !, (, beta, >=, -, 1d, &&, beta, <=, 1d, ), ), {, throw, new, OutOfRangeException, (]
[(, beta, >=, -, 1d, &&, beta, <=, 1d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,]
[>=, -, 1d, &&, beta, <=, 1d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,]
[-, 1d, &&, beta, <=, 1d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -]
[&&, beta, <=, 1d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, ), ;, }]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, ), ;, }]
[new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, ), ;, }, this, ., generator, =]
[(, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, ), ;, }, this, ., generator, =, generator, ;]
[(, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, ), ;, }, this, ., generator, =, generator, ;]
[,, beta, ,, -, 1, ,, 1, ), ;, }, this, ., generator, =, generator, ;, this, ., alpha, =]
[,, -, 1, ,, 1, ), ;, }, this, ., generator, =, generator, ;, this, ., alpha, =, alpha, ;]
[,, -, 1, ,, 1, ), ;, }, this, ., generator, =, generator, ;, this, ., alpha, =, alpha, ;]
[1, ), ;, }, this, ., generator, =, generator, ;, this, ., alpha, =, alpha, ;, this, ., beta, =]
[this, ., generator, =, generator, ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, if, (]
[this, ., generator, =, generator, ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, if, (]
[this, ., generator, =, generator, ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, if, (]
[generator, =, generator, ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, if, (, alpha, <]
[generator, ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, if, (, alpha, <, 2d, &&]
[generator, ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, if, (, alpha, <, 2d, &&]
[this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, if, (, alpha, <, 2d, &&, beta, !=]
[=, alpha, ;, this, ., beta, =, beta, ;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {]
[;, this, ., beta, =, beta, ;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =]
[;, this, ., beta, =, beta, ;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =]
[., beta, =, beta, ;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =, beta, *]
[., beta, =, beta, ;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =, beta, *]
[;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =, beta, *, FastMath, ., tan, (]
[;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =, beta, *, FastMath, ., tan, (]
[;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =, beta, *, FastMath, ., tan, (]
[;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =, beta, *, FastMath, ., tan, (]
[<, 2d, &&, beta, !=, 0d, ), {, zeta, =, beta, *, FastMath, ., tan, (, FastMath, ., PI, *]
[&&, beta, !=, 0d, ), {, zeta, =, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /]
[zeta, =, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }, else, {]
[beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }, else, {, zeta, =]
[), ;, }, else, {, zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double, omega, =]
[;, }, else, {, zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double, omega, =, -]
[;, }, else, {, zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double, omega, =, -]
[zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double, omega, =, -, FastMath, ., log, (]
[zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double, omega, =, -, FastMath, ., log, (]
[), {, double, omega, =, -, FastMath, ., log, (, generator, ., nextDouble, (, ), ), ;, double, phi, =]
[), {, double, omega, =, -, FastMath, ., log, (, generator, ., nextDouble, (, ), ), ;, double, phi, =]
[), {, double, omega, =, -, FastMath, ., log, (, generator, ., nextDouble, (, ), ), ;, double, phi, =]
[=, -, FastMath, ., log, (, generator, ., nextDouble, (, ), ), ;, double, phi, =, FastMath, ., PI, *]
[-, FastMath, ., log, (, generator, ., nextDouble, (, ), ), ;, double, phi, =, FastMath, ., PI, *, (]
[-, FastMath, ., log, (, generator, ., nextDouble, (, ), ), ;, double, phi, =, FastMath, ., PI, *, (]
[-, FastMath, ., log, (, generator, ., nextDouble, (, ), ), ;, double, phi, =, FastMath, ., PI, *, (]
[., nextDouble, (, ), ), ;, double, phi, =, FastMath, ., PI, *, (, generator, ., nextDouble, (, ), -]
[;, double, phi, =, FastMath, ., PI, *, (, generator, ., nextDouble, (, ), -, 0.5, ), ;, if, (]
[;, double, phi, =, FastMath, ., PI, *, (, generator, ., nextDouble, (, ), -, 0.5, ), ;, if, (]
[phi, =, FastMath, ., PI, *, (, generator, ., nextDouble, (, ), -, 0.5, ), ;, if, (, alpha, ==]
[PI, *, (, generator, ., nextDouble, (, ), -, 0.5, ), ;, if, (, alpha, ==, 2d, ), {, return]
[PI, *, (, generator, ., nextDouble, (, ), -, 0.5, ), ;, if, (, alpha, ==, 2d, ), {, return]
[PI, *, (, generator, ., nextDouble, (, ), -, 0.5, ), ;, if, (, alpha, ==, 2d, ), {, return]
[., nextDouble, (, ), -, 0.5, ), ;, if, (, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (]
[., nextDouble, (, ), -, 0.5, ), ;, if, (, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (]
[(, ), -, 0.5, ), ;, if, (, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (, 2d, *]
[0.5, ), ;, if, (, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (, 2d, *, omega, ), *]
[0.5, ), ;, if, (, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (, 2d, *, omega, ), *]
[(, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (, 2d, *, omega, ), *, FastMath, ., sin, (]
[sqrt, (, 2d, *, omega, ), *, FastMath, ., sin, (, phi, ), ;, }, double, x, ;, if, (]
[sqrt, (, 2d, *, omega, ), *, FastMath, ., sin, (, phi, ), ;, }, double, x, ;, if, (]
[2d, *, omega, ), *, FastMath, ., sin, (, phi, ), ;, }, double, x, ;, if, (, beta, ==]
[FastMath, ., sin, (, phi, ), ;, }, double, x, ;, if, (, beta, ==, 0d, ), {, if, (]
[FastMath, ., sin, (, phi, ), ;, }, double, x, ;, if, (, beta, ==, 0d, ), {, if, (]
[sin, (, phi, ), ;, }, double, x, ;, if, (, beta, ==, 0d, ), {, if, (, alpha, ==]
[), ;, }, double, x, ;, if, (, beta, ==, 0d, ), {, if, (, alpha, ==, 1d, ), {]
[}, double, x, ;, if, (, beta, ==, 0d, ), {, if, (, alpha, ==, 1d, ), {, x, =]
[}, double, x, ;, if, (, beta, ==, 0d, ), {, if, (, alpha, ==, 1d, ), {, x, =]
[if, (, beta, ==, 0d, ), {, if, (, alpha, ==, 1d, ), {, x, =, FastMath, ., tan, (]
[{, if, (, alpha, ==, 1d, ), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else, {]
[(, alpha, ==, 1d, ), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =]
[(, alpha, ==, 1d, ), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =]
[(, alpha, ==, 1d, ), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =]
[(, alpha, ==, 1d, ), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =]
[), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (]
[), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (]
[x, =, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (, omega, *]
[x, =, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (, omega, *]
[tan, (, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (, omega, *, FastMath, ., cos, (]
[tan, (, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (, omega, *, FastMath, ., cos, (]
[(, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (, omega, *, FastMath, ., cos, (, (]
[(, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (, omega, *, FastMath, ., cos, (, (]
[), ;, }, else, {, x, =, FastMath, ., pow, (, omega, *, FastMath, ., cos, (, (, 1, -]
[else, {, x, =, FastMath, ., pow, (, omega, *, FastMath, ., cos, (, (, 1, -, alpha, ), *]
[=, FastMath, ., pow, (, omega, *, FastMath, ., cos, (, (, 1, -, alpha, ), *, phi, ), ,]
[=, FastMath, ., pow, (, omega, *, FastMath, ., cos, (, (, 1, -, alpha, ), *, phi, ), ,]
[=, FastMath, ., pow, (, omega, *, FastMath, ., cos, (, (, 1, -, alpha, ), *, phi, ), ,]
[., pow, (, omega, *, FastMath, ., cos, (, (, 1, -, alpha, ), *, phi, ), ,, 1d, /]
[(, omega, *, FastMath, ., cos, (, (, 1, -, alpha, ), *, phi, ), ,, 1d, /, alpha, -]
[FastMath, ., cos, (, (, 1, -, alpha, ), *, phi, ), ,, 1d, /, alpha, -, 1d, ), *]
[FastMath, ., cos, (, (, 1, -, alpha, ), *, phi, ), ,, 1d, /, alpha, -, 1d, ), *]
[(, 1, -, alpha, ), *, phi, ), ,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (]
[(, 1, -, alpha, ), *, phi, ), ,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (]
[-, alpha, ), *, phi, ), ,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *]
[*, phi, ), ,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /]
[*, phi, ), ,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /]
[1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (]
[1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (]
[1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (, FastMath, ., cos, (]
[FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (, FastMath, ., cos, (, phi, ), ,]
[FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (, FastMath, ., cos, (, phi, ), ,]
[sin, (, alpha, *, phi, ), /, FastMath, ., pow, (, FastMath, ., cos, (, phi, ), ,, 1d, /]
[(, FastMath, ., cos, (, phi, ), ,, 1d, /, alpha, ), ;, }, }, else, {, double, cosPhi, =]
[(, FastMath, ., cos, (, phi, ), ,, 1d, /, alpha, ), ;, }, }, else, {, double, cosPhi, =]
[(, phi, ), ,, 1d, /, alpha, ), ;, }, }, else, {, double, cosPhi, =, FastMath, ., cos, (]
[/, alpha, ), ;, }, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (]
[/, alpha, ), ;, }, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (]
[/, alpha, ), ;, }, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (]
[}, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (, FastMath, ., abs, (]
[}, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (, FastMath, ., abs, (]
[else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (, FastMath, ., abs, (, alpha, -]
[cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (, FastMath, ., abs, (, alpha, -, 1d, ), >]
[phi, ), ;, if, (, FastMath, ., abs, (, alpha, -, 1d, ), >, 1e-8, ), {, double, alphaPhi, =]
[phi, ), ;, if, (, FastMath, ., abs, (, alpha, -, 1d, ), >, 1e-8, ), {, double, alphaPhi, =]
[;, if, (, FastMath, ., abs, (, alpha, -, 1d, ), >, 1e-8, ), {, double, alphaPhi, =, alpha, *]
[abs, (, alpha, -, 1d, ), >, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =]
[abs, (, alpha, -, 1d, ), >, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =]
[alpha, -, 1d, ), >, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -]
[1d, ), >, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;]
[>, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =]
[>, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =]
[>, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =]
[>, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =]
[1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (]
[1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (]
[1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (]
[alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (, FastMath, ., sin, (]
[*, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (, FastMath, ., sin, (, alphaPhi, ), +]
[*, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (, FastMath, ., sin, (, alphaPhi, ), +]
[;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (, FastMath, ., sin, (, alphaPhi, ), +, zeta, *]
[;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (, FastMath, ., sin, (, alphaPhi, ), +, zeta, *]
[phi, -, alphaPhi, ;, x, =, (, FastMath, ., sin, (, alphaPhi, ), +, zeta, *, FastMath, ., cos, (]
[x, =, (, FastMath, ., sin, (, alphaPhi, ), +, zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /]
[(, FastMath, ., sin, (, alphaPhi, ), +, zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *]
[FastMath, ., sin, (, alphaPhi, ), +, zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (]
[FastMath, ., sin, (, alphaPhi, ), +, zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (]
[FastMath, ., sin, (, alphaPhi, ), +, zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (]
[alphaPhi, ), +, zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (, FastMath, ., cos, (]
[zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +]
[zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +]
[FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *]
[FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *]
[alphaPhi, ), ), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (]
[cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /]
[cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /]
[., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (]
[., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (]
[(, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (, omega, *]
[), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (, omega, *, cosPhi, ,]
[), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (, omega, *, cosPhi, ,]
[+, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (, omega, *, cosPhi, ,, (]
[+, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (, omega, *, cosPhi, ,, (]
[*, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (, omega, *, cosPhi, ,, (, 1, -]
[sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (, omega, *, cosPhi, ,, (, 1, -, alpha, ), /]
[(, omega, *, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =]
[(, omega, *, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =]
[(, omega, *, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =]
[(, omega, *, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =]
[,, (, 1, -, alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /]
[1, -, alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +]
[1, -, alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +]
[alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *]
[/, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;]
[), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =]
[), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =]
[), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =]
[}, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =, 2d, /]
[}, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =, 2d, /]
[betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =, 2d, /, FastMath, ., PI, *]
[=, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =, 2d, /, FastMath, ., PI, *, (]
[=, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =, 2d, /, FastMath, ., PI, *, (]
[=, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =, 2d, /, FastMath, ., PI, *, (]
[., PI, /, 2, +, beta, *, phi, ;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *]
[., PI, /, 2, +, beta, *, phi, ;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *]
[+, beta, *, phi, ;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (]
[phi, ;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -]
[phi, ;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -]
[x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *]
[x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *]
[FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (]
[FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (]
[FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (]
[FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (]
[FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (]
[FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (]
[(, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (, FastMath, ., PI, /]
[*, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (, FastMath, ., PI, /, 2d, *]
[., tan, (, phi, ), -, beta, *, FastMath, ., log, (, FastMath, ., PI, /, 2d, *, omega, *]
[(, phi, ), -, beta, *, FastMath, ., log, (, FastMath, ., PI, /, 2d, *, omega, *, cosPhi, /]
[FastMath, ., log, (, FastMath, ., PI, /, 2d, *, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (]
[FastMath, ., log, (, FastMath, ., PI, /, 2d, *, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (]
[log, (, FastMath, ., PI, /, 2d, *, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=]
[., PI, /, 2d, *, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {]
[/, 2d, *, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =]
[/, 2d, *, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =]
[*, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +]
[*, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +]
[*, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *]
[*, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *]
[), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (]
[), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (]
[), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (]
[), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (]
[(, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (, FastMath, ., PI, *]
[!=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /]
[+, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }, }, }, return]
