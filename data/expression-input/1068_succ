[), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0]
[), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {]
[;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }]
[), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;]
[), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, min, =, array, [, 0, ], ;, for, (]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, min, =, array, [, 0, ], ;]
[., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, min, =, array, [, 0]
[), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, min, =, array, [, 0, ], ;, for, (]
[;, }, double, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, array]
[), ;, }, double, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <]
[;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min, =]
[[, 0, ], ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, )]
[], ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min]
[;, i, <, array, ., length, ;, i, ++, ), {, min, =, min, (, array, [, i, ], ,]
[;, i, ++, ), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }, return, min]
[<, array, ., length, ;, i, ++, ), {, min, =, min, (, array, [, i, ], ,, min, )]
[;, i, ++, ), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }, return, min]
[., length, ;, i, ++, ), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }]
[), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }, return, min, ;, }, public]
[++, ), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }, return, min, ;, }]
[=, min, (, array, [, i, ], ,, min, ), ;, }, return, min, ;, }, public, static, float, min]
[;, }, return, min, ;, }, public, static, float, min, (, final, float, [, ], array, ), {, if, (]
[,, min, ), ;, }, return, min, ;, }, public, static, float, min, (, final, float, [, ], array, )]
[[, i, ], ,, min, ), ;, }, return, min, ;, }, public, static, float, min, (, final, float, []
[], ,, min, ), ;, }, return, min, ;, }, public, static, float, min, (, final, float, [, ], array]
[), ;, }, return, min, ;, }, public, static, float, min, (, final, float, [, ], array, ), {, if]
[;, }, public, static, float, min, (, final, float, [, ], array, ), {, if, (, array, ==, null, )]
[), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0]
[), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {]
[;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }]
[), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;]
[), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, min, =, array, [, 0, ], ;, for, (]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, min, =, array, [, 0, ], ;]
[., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, min, =, array, [, 0]
[), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, min, =, array, [, 0, ], ;, for, (]
[;, }, float, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, array]
[), ;, }, float, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <]
[;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min, =]
[[, 0, ], ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, )]
[], ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min]
[;, i, <, array, ., length, ;, i, ++, ), {, min, =, min, (, array, [, i, ], ,]
[;, i, ++, ), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }, return, min]
[<, array, ., length, ;, i, ++, ), {, min, =, min, (, array, [, i, ], ,, min, )]
[;, i, ++, ), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }, return, min]
[., length, ;, i, ++, ), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }]
[), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }, return, min, ;, }, public]
[++, ), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }, return, min, ;, }]
[=, min, (, array, [, i, ], ,, min, ), ;, }, return, min, ;, }, public, static, double, min]
[;, }, return, min, ;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ,, final]
[,, min, ), ;, }, return, min, ;, }, public, static, double, min, (, final, double, a, ,, final, double]
[[, i, ], ,, min, ), ;, }, return, min, ;, }, public, static, double, min, (, final, double, a]
[], ,, min, ), ;, }, return, min, ;, }, public, static, double, min, (, final, double, a, ,, final]
[), ;, }, return, min, ;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ,]
[;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ,, final, double, c, ), {]
[;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ), {, if, (, Double, .]
[,, c, ), ;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ), {, if]
[,, b, ), ,, c, ), ;, }, public, static, double, min, (, final, double, a, ,, final, double, b]
[), ,, c, ), ;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ), {]
[), ;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ), {, if, (, Double]
[), {, return, b, ;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;]
[., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (, Double, ., isNaN, (, b, )]
[), ), {, return, b, ;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return, a]
[;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,, b, ), ;, }, }]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,]
[), ), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,, b, ), ;, }]
[;, }, else, {, return, Math, ., min, (, a, ,, b, ), ;, }, }, public, static, float, min]
[;, }, }, public, static, float, min, (, final, float, a, ,, final, float, b, ,, final, float, c, )]
[., min, (, a, ,, b, ), ;, }, }, public, static, float, min, (, final, float, a, ,, final]
[,, b, ), ;, }, }, public, static, float, min, (, final, float, a, ,, final, float, b, ,, final]
[), ;, }, }, public, static, float, min, (, final, float, a, ,, final, float, b, ,, final, float, c]
[;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if, (, Float, .]
[,, c, ), ;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if]
[,, b, ), ,, c, ), ;, }, public, static, float, min, (, final, float, a, ,, final, float, b]
[), ,, c, ), ;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {]
[), ;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if, (, Float]
[), {, return, b, ;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return, a, ;]
[., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (, Float, ., isNaN, (, b, )]
[), ), {, return, b, ;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return, a]
[;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,, b, ), ;, }, }]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,]
[), ), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,, b, ), ;, }]
[;, }, else, {, return, Math, ., min, (, a, ,, b, ), ;, }, }, public, static, double, max]
[;, }, }, public, static, double, max, (, final, double, [, ], array, ), {, if, (, array, ==, null]
[., min, (, a, ,, b, ), ;, }, }, public, static, double, max, (, final, double, [, ], array]
[,, b, ), ;, }, }, public, static, double, max, (, final, double, [, ], array, ), {, if, (]
[), ;, }, }, public, static, double, max, (, final, double, [, ], array, ), {, if, (, array, ==]
[), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0]
[), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {]
[;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }]
[), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;]
[), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, max, =, array, [, 0, ], ;, for, (]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, max, =, array, [, 0, ], ;]
[., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, max, =, array, [, 0]
[), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, max, =, array, [, 0, ], ;, for, (]
[;, }, double, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <, array]
[), ;, }, double, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <]
[;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max, =]
[[, 0, ], ;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, )]
[], ;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max]
[;, j, <, array, ., length, ;, j, ++, ), {, max, =, max, (, array, [, j, ], ,]
[;, j, ++, ), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }, return, max]
[<, array, ., length, ;, j, ++, ), {, max, =, max, (, array, [, j, ], ,, max, )]
[;, j, ++, ), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }, return, max]
[., length, ;, j, ++, ), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }]
[), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }, return, max, ;, }, public]
[++, ), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }, return, max, ;, }]
[=, max, (, array, [, j, ], ,, max, ), ;, }, return, max, ;, }, public, static, float, max]
[;, }, return, max, ;, }, public, static, float, max, (, final, float, [, ], array, ), {, if, (]
[,, max, ), ;, }, return, max, ;, }, public, static, float, max, (, final, float, [, ], array, )]
[[, j, ], ,, max, ), ;, }, return, max, ;, }, public, static, float, max, (, final, float, []
[], ,, max, ), ;, }, return, max, ;, }, public, static, float, max, (, final, float, [, ], array]
[), ;, }, return, max, ;, }, public, static, float, max, (, final, float, [, ], array, ), {, if]
[;, }, public, static, float, max, (, final, float, [, ], array, ), {, if, (, array, ==, null, )]
[), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0]
[), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {]
[;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }]
[), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;]
[), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, max, =, array, [, 0, ], ;, for, (]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, max, =, array, [, 0, ], ;]
[., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, max, =, array, [, 0]
[), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, max, =, array, [, 0, ], ;, for, (]
[;, }, float, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <, array]
[), ;, }, float, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <]
[;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max, =]
[[, 0, ], ;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, )]
[], ;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max]
[;, j, <, array, ., length, ;, j, ++, ), {, max, =, max, (, array, [, j, ], ,]
[;, j, ++, ), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }, return, max]
[<, array, ., length, ;, j, ++, ), {, max, =, max, (, array, [, j, ], ,, max, )]
[;, j, ++, ), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }, return, max]
[., length, ;, j, ++, ), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }]
[), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }, return, max, ;, }, public]
[++, ), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }, return, max, ;, }]
[=, max, (, array, [, j, ], ,, max, ), ;, }, return, max, ;, }, public, static, double, max]
[;, }, return, max, ;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ,, final]
[,, max, ), ;, }, return, max, ;, }, public, static, double, max, (, final, double, a, ,, final, double]
[[, j, ], ,, max, ), ;, }, return, max, ;, }, public, static, double, max, (, final, double, a]
[], ,, max, ), ;, }, return, max, ;, }, public, static, double, max, (, final, double, a, ,, final]
[), ;, }, return, max, ;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ,]
[;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ,, final, double, c, ), {]
[;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ), {, if, (, Double, .]
[,, c, ), ;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ), {, if]
[,, b, ), ,, c, ), ;, }, public, static, double, max, (, final, double, a, ,, final, double, b]
[), ,, c, ), ;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ), {]
[), ;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ), {, if, (, Double]
[), {, return, b, ;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;]
[., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (, Double, ., isNaN, (, b, )]
[), ), {, return, b, ;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return, a]
[;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,, b, ), ;, }, }]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,]
[), ), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,, b, ), ;, }]
[;, }, else, {, return, Math, ., max, (, a, ,, b, ), ;, }, }, public, static, float, max]
[;, }, }, public, static, float, max, (, final, float, a, ,, final, float, b, ,, final, float, c, )]
[., max, (, a, ,, b, ), ;, }, }, public, static, float, max, (, final, float, a, ,, final]
[,, b, ), ;, }, }, public, static, float, max, (, final, float, a, ,, final, float, b, ,, final]
[), ;, }, }, public, static, float, max, (, final, float, a, ,, final, float, b, ,, final, float, c]
[;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if, (, Float, .]
[,, c, ), ;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if]
[,, b, ), ,, c, ), ;, }, public, static, float, max, (, final, float, a, ,, final, float, b]
[), ,, c, ), ;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {]
[), ;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if, (, Float]
[), {, return, b, ;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return, a, ;]
[., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (, Float, ., isNaN, (, b, )]
[), ), {, return, b, ;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return, a]
[;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,, b, ), ;, }, }]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,]
[), ), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,, b, ), ;, }]
[;, }, else, {, return, Math, ., max, (, a, ,, b, ), ;, }, }, }]
[;, }, }, }]
[., max, (, a, ,, b, ), ;, }, }, }]
[,, b, ), ;, }, }, }]
[), ;, }, }, }]
