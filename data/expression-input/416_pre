[static, double, solve, (, UnivariateFunction, function, ,, double, x0, ,, double, x1, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (]
[static, double, solve, (, UnivariateFunction, function, ,, double, x0, ,, double, x1, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (]
[solve, (, UnivariateFunction, function, ,, double, x0, ,, double, x1, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==]
[,, double, x0, ,, double, x1, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw]
[,, double, x1, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (]
[,, double, x1, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (]
[(, function, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =]
[throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, ), ;, return]
[throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, ), ;, return]
[LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, ), ;, return, solver, ., solve, (]
[LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, ), ;, return, solver, ., solve, (]
[;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, ), ;, return, solver, ., solve, (, Integer, ., MAX_VALUE, ,]
[final, UnivariateSolver, solver, =, new, BrentSolver, (, ), ;, return, solver, ., solve, (, Integer, ., MAX_VALUE, ,, function, ,]
[solver, =, new, BrentSolver, (, ), ;, return, solver, ., solve, (, Integer, ., MAX_VALUE, ,, function, ,, x0, ,]
[(, UnivariateFunction, function, ,, double, x0, ,, double, x1, ,, double, absoluteAccuracy, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (]
[(, UnivariateFunction, function, ,, double, x0, ,, double, x1, ,, double, absoluteAccuracy, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (]
[function, ,, double, x0, ,, double, x1, ,, double, absoluteAccuracy, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==]
[,, double, x1, ,, double, absoluteAccuracy, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw]
[,, double, absoluteAccuracy, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (]
[,, double, absoluteAccuracy, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (]
[(, function, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =]
[null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (]
[new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, absoluteAccuracy, ), ;, return]
[new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, absoluteAccuracy, ), ;, return]
[., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, absoluteAccuracy, ), ;, return, solver, ., solve, (]
[., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, absoluteAccuracy, ), ;, return, solver, ., solve, (]
[}, final, UnivariateSolver, solver, =, new, BrentSolver, (, absoluteAccuracy, ), ;, return, solver, ., solve, (, Integer, ., MAX_VALUE, ,]
[UnivariateSolver, solver, =, new, BrentSolver, (, absoluteAccuracy, ), ;, return, solver, ., solve, (, Integer, ., MAX_VALUE, ,, function, ,]
[=, new, BrentSolver, (, absoluteAccuracy, ), ;, return, solver, ., solve, (, Integer, ., MAX_VALUE, ,, function, ,, x0, ,]
[double, baseRoot, ,, final, double, min, ,, final, double, max, ,, final, AllowedSolution, allowedSolution, ), throws, NoBracketingException, {, if, (]
[double, baseRoot, ,, final, double, min, ,, final, double, max, ,, final, AllowedSolution, allowedSolution, ), throws, NoBracketingException, {, if, (]
[,, final, double, min, ,, final, double, max, ,, final, AllowedSolution, allowedSolution, ), throws, NoBracketingException, {, if, (, allowedSolution, ==]
[,, final, double, min, ,, final, double, max, ,, final, AllowedSolution, allowedSolution, ), throws, NoBracketingException, {, if, (, allowedSolution, ==]
[double, max, ,, final, AllowedSolution, allowedSolution, ), throws, NoBracketingException, {, if, (, allowedSolution, ==, AllowedSolution, ., ANY_SIDE, ), {, return]
[throws, NoBracketingException, {, if, (, allowedSolution, ==, AllowedSolution, ., ANY_SIDE, ), {, return, baseRoot, ;, }, final, double, step, =]
[throws, NoBracketingException, {, if, (, allowedSolution, ==, AllowedSolution, ., ANY_SIDE, ), {, return, baseRoot, ;, }, final, double, step, =]
[(, allowedSolution, ==, AllowedSolution, ., ANY_SIDE, ), {, return, baseRoot, ;, }, final, double, step, =, FastMath, ., max, (]
[(, allowedSolution, ==, AllowedSolution, ., ANY_SIDE, ), {, return, baseRoot, ;, }, final, double, step, =, FastMath, ., max, (]
[), {, return, baseRoot, ;, }, final, double, step, =, FastMath, ., max, (, bracketing, ., getAbsoluteAccuracy, (, ), ,]
[), {, return, baseRoot, ;, }, final, double, step, =, FastMath, ., max, (, bracketing, ., getAbsoluteAccuracy, (, ), ,]
[;, }, final, double, step, =, FastMath, ., max, (, bracketing, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (]
[;, }, final, double, step, =, FastMath, ., max, (, bracketing, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (]
[final, double, step, =, FastMath, ., max, (, bracketing, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (, baseRoot, *]
[final, double, step, =, FastMath, ., max, (, bracketing, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (, baseRoot, *]
[(, ), ,, FastMath, ., abs, (, baseRoot, *, bracketing, ., getRelativeAccuracy, (, ), ), ), ;, double, xLo, =]
[(, ), ,, FastMath, ., abs, (, baseRoot, *, bracketing, ., getRelativeAccuracy, (, ), ), ), ;, double, xLo, =]
[., abs, (, baseRoot, *, bracketing, ., getRelativeAccuracy, (, ), ), ), ;, double, xLo, =, FastMath, ., max, (]
[(, baseRoot, *, bracketing, ., getRelativeAccuracy, (, ), ), ), ;, double, xLo, =, FastMath, ., max, (, min, ,]
[(, baseRoot, *, bracketing, ., getRelativeAccuracy, (, ), ), ), ;, double, xLo, =, FastMath, ., max, (, min, ,]
[*, bracketing, ., getRelativeAccuracy, (, ), ), ), ;, double, xLo, =, FastMath, ., max, (, min, ,, baseRoot, -]
[), ), ;, double, xLo, =, FastMath, ., max, (, min, ,, baseRoot, -, step, ), ;, double, fLo, =]
[), ), ;, double, xLo, =, FastMath, ., max, (, min, ,, baseRoot, -, step, ), ;, double, fLo, =]
[xLo, =, FastMath, ., max, (, min, ,, baseRoot, -, step, ), ;, double, fLo, =, f, ., value, (]
[min, ,, baseRoot, -, step, ), ;, double, fLo, =, f, ., value, (, xLo, ), ;, double, xHi, =]
[min, ,, baseRoot, -, step, ), ;, double, fLo, =, f, ., value, (, xLo, ), ;, double, xHi, =]
[step, ), ;, double, fLo, =, f, ., value, (, xLo, ), ;, double, xHi, =, FastMath, ., min, (]
[;, double, fLo, =, f, ., value, (, xLo, ), ;, double, xHi, =, FastMath, ., min, (, max, ,]
[;, double, fLo, =, f, ., value, (, xLo, ), ;, double, xHi, =, FastMath, ., min, (, max, ,]
[fLo, =, f, ., value, (, xLo, ), ;, double, xHi, =, FastMath, ., min, (, max, ,, baseRoot, +]
[xLo, ), ;, double, xHi, =, FastMath, ., min, (, max, ,, baseRoot, +, step, ), ;, double, fHi, =]
[xLo, ), ;, double, xHi, =, FastMath, ., min, (, max, ,, baseRoot, +, step, ), ;, double, fHi, =]
[xHi, =, FastMath, ., min, (, max, ,, baseRoot, +, step, ), ;, double, fHi, =, f, ., value, (]
[max, ,, baseRoot, +, step, ), ;, double, fHi, =, f, ., value, (, xHi, ), ;, int, remainingEval, =]
[max, ,, baseRoot, +, step, ), ;, double, fHi, =, f, ., value, (, xHi, ), ;, int, remainingEval, =]
[baseRoot, +, step, ), ;, double, fHi, =, f, ., value, (, xHi, ), ;, int, remainingEval, =, maxEval, -]
[;, double, fHi, =, f, ., value, (, xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while, (]
[;, double, fHi, =, f, ., value, (, xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while, (]
[fHi, =, f, ., value, (, xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >]
[(, xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {, if, (]
[(, xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {, if, (]
[xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {, if, (, (]
[xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {, if, (, (]
[xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {, if, (, (]
[;, int, remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=]
[remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=, 0, &&]
[remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=, 0, &&]
[maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=]
[;, while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||]
[while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (]
[while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (]
[while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (]
[remainingEval, >, 0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=]
[0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&]
[0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&]
[{, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=]
[>=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return]
[>=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return]
[<=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (]
[), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,]
[(, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,]
[<=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,]
[&&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,]
[>=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,, baseRoot, ,]
[., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,, baseRoot, ,, allowedSolution, ), ;, }, boolean, changeLo, =]
[f, ,, xLo, ,, xHi, ,, baseRoot, ,, allowedSolution, ), ;, }, boolean, changeLo, =, false, ;, boolean, changeHi, =]
[xHi, ,, baseRoot, ,, allowedSolution, ), ;, }, boolean, changeLo, =, false, ;, boolean, changeHi, =, false, ;, if, (]
[xHi, ,, baseRoot, ,, allowedSolution, ), ;, }, boolean, changeLo, =, false, ;, boolean, changeHi, =, false, ;, if, (]
[baseRoot, ,, allowedSolution, ), ;, }, boolean, changeLo, =, false, ;, boolean, changeHi, =, false, ;, if, (, fLo, <]
[}, boolean, changeLo, =, false, ;, boolean, changeHi, =, false, ;, if, (, fLo, <, fHi, ), {, if, (]
[}, boolean, changeLo, =, false, ;, boolean, changeHi, =, false, ;, if, (, fLo, <, fHi, ), {, if, (]
[changeLo, =, false, ;, boolean, changeHi, =, false, ;, if, (, fLo, <, fHi, ), {, if, (, fLo, >=]
[;, boolean, changeHi, =, false, ;, if, (, fLo, <, fHi, ), {, if, (, fLo, >=, 0, ), {]
[changeHi, =, false, ;, if, (, fLo, <, fHi, ), {, if, (, fLo, >=, 0, ), {, changeLo, =]
[(, fLo, <, fHi, ), {, if, (, fLo, >=, 0, ), {, changeLo, =, true, ;, }, else, {]
[<, fHi, ), {, if, (, fLo, >=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =]
[>=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, if, (]
[>=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, if, (]
[), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, if, (, fLo, >]
[;, }, else, {, changeHi, =, true, ;, }, }, else, if, (, fLo, >, fHi, ), {, if, (]
[;, }, else, {, changeHi, =, true, ;, }, }, else, if, (, fLo, >, fHi, ), {, if, (]
[else, {, changeHi, =, true, ;, }, }, else, if, (, fLo, >, fHi, ), {, if, (, fLo, <=]
[=, true, ;, }, }, else, if, (, fLo, >, fHi, ), {, if, (, fLo, <=, 0, ), {]
[;, }, }, else, if, (, fLo, >, fHi, ), {, if, (, fLo, <=, 0, ), {, changeLo, =]
[(, fLo, >, fHi, ), {, if, (, fLo, <=, 0, ), {, changeLo, =, true, ;, }, else, {]
[>, fHi, ), {, if, (, fLo, <=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =]
[fLo, <=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, {]
[0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, {, changeLo, =]
[{, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, {, changeLo, =, true, ;]
[=, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, {, changeLo, =, true, ;, changeHi, =]
[{, changeHi, =, true, ;, }, }, else, {, changeLo, =, true, ;, changeHi, =, true, ;, }, if, (]
[true, ;, }, }, else, {, changeLo, =, true, ;, changeHi, =, true, ;, }, if, (, changeLo, ), {]
[}, }, else, {, changeLo, =, true, ;, changeHi, =, true, ;, }, if, (, changeLo, ), {, xLo, =]
[}, }, else, {, changeLo, =, true, ;, changeHi, =, true, ;, }, if, (, changeLo, ), {, xLo, =]
[changeLo, =, true, ;, changeHi, =, true, ;, }, if, (, changeLo, ), {, xLo, =, FastMath, ., max, (]
[true, ;, changeHi, =, true, ;, }, if, (, changeLo, ), {, xLo, =, FastMath, ., max, (, min, ,]
[true, ;, changeHi, =, true, ;, }, if, (, changeLo, ), {, xLo, =, FastMath, ., max, (, min, ,]
[changeHi, =, true, ;, }, if, (, changeLo, ), {, xLo, =, FastMath, ., max, (, min, ,, xLo, -]
[;, }, if, (, changeLo, ), {, xLo, =, FastMath, ., max, (, min, ,, xLo, -, step, ), ;]
[if, (, changeLo, ), {, xLo, =, FastMath, ., max, (, min, ,, xLo, -, step, ), ;, fLo, =]
[if, (, changeLo, ), {, xLo, =, FastMath, ., max, (, min, ,, xLo, -, step, ), ;, fLo, =]
[{, xLo, =, FastMath, ., max, (, min, ,, xLo, -, step, ), ;, fLo, =, f, ., value, (]
[FastMath, ., max, (, min, ,, xLo, -, step, ), ;, fLo, =, f, ., value, (, xLo, ), ;]
[FastMath, ., max, (, min, ,, xLo, -, step, ), ;, fLo, =, f, ., value, (, xLo, ), ;]
[xLo, -, step, ), ;, fLo, =, f, ., value, (, xLo, ), ;, remainingEval, --, ;, }, if, (]
[), ;, fLo, =, f, ., value, (, xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi, ), {]
[fLo, =, f, ., value, (, xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi, ), {, xHi, =]
[fLo, =, f, ., value, (, xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi, ), {, xHi, =]
[value, (, xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi, ), {, xHi, =, FastMath, ., min, (]
[xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi, ), {, xHi, =, FastMath, ., min, (, max, ,]
[xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi, ), {, xHi, =, FastMath, ., min, (, max, ,]
[;, remainingEval, --, ;, }, if, (, changeHi, ), {, xHi, =, FastMath, ., min, (, max, ,, xHi, +]
[;, }, if, (, changeHi, ), {, xHi, =, FastMath, ., min, (, max, ,, xHi, +, step, ), ;]
[if, (, changeHi, ), {, xHi, =, FastMath, ., min, (, max, ,, xHi, +, step, ), ;, fHi, =]
[if, (, changeHi, ), {, xHi, =, FastMath, ., min, (, max, ,, xHi, +, step, ), ;, fHi, =]
[{, xHi, =, FastMath, ., min, (, max, ,, xHi, +, step, ), ;, fHi, =, f, ., value, (]
[FastMath, ., min, (, max, ,, xHi, +, step, ), ;, fHi, =, f, ., value, (, xHi, ), ;]
[FastMath, ., min, (, max, ,, xHi, +, step, ), ;, fHi, =, f, ., value, (, xHi, ), ;]
[xHi, +, step, ), ;, fHi, =, f, ., value, (, xHi, ), ;, remainingEval, --, ;, }, }, throw]
[), ;, fHi, =, f, ., value, (, xHi, ), ;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (]
[), ;, fHi, =, f, ., value, (, xHi, ), ;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (]
[f, ., value, (, xHi, ), ;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,]
[value, (, xHi, ), ;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,]
[xHi, ), ;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,]
[;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,]
[--, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,, fHi, ,]
[--, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,, fHi, ,]
[}, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,, fHi, ,, maxEval, -]
[throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,, fHi, ,, maxEval, -, remainingEval, ,]
[NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,, fHi, ,, maxEval, -, remainingEval, ,, maxEval, ,]
[LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,, fHi, ,, maxEval, -, remainingEval, ,, maxEval, ,, baseRoot, ,]
[FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,, fHi, ,, maxEval, -, remainingEval, ,, maxEval, ,, baseRoot, ,, min, ,]
[UnivariateFunction, function, ,, double, initial, ,, double, lowerBound, ,, double, upperBound, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, return]
[,, double, initial, ,, double, lowerBound, ,, double, upperBound, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, return, bracket, (]
[initial, ,, double, lowerBound, ,, double, upperBound, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, return, bracket, (, function, ,]
[double, lowerBound, ,, double, upperBound, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, return, bracket, (, function, ,, initial, ,]
[,, double, upperBound, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, return, bracket, (, function, ,, initial, ,, lowerBound, ,]
[upperBound, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, return, bracket, (, function, ,, initial, ,, lowerBound, ,, upperBound, ,]
[upperBound, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, return, bracket, (, function, ,, initial, ,, lowerBound, ,, upperBound, ,]
[initial, ,, double, lowerBound, ,, double, upperBound, ,, int, maximumIterations, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, if, (]
[initial, ,, double, lowerBound, ,, double, upperBound, ,, int, maximumIterations, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, if, (]
[double, lowerBound, ,, double, upperBound, ,, int, maximumIterations, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, if, (, function, ==]
[upperBound, ,, int, maximumIterations, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw]
[maximumIterations, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (]
[maximumIterations, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (]
[{, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, if, (]
[{, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, if, (]
[(, function, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, if, (, maximumIterations, <=]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, if, (, maximumIterations, <=, 0, ), {, throw]
[new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, if, (, maximumIterations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, if, (, maximumIterations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[., FUNCTION, ), ;, }, if, (, maximumIterations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,]
[}, if, (, maximumIterations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,, maximumIterations, ), ;, }]
[(, maximumIterations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,, maximumIterations, ), ;, }, verifySequence, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,, maximumIterations, ), ;, }, verifySequence, (, lowerBound, ,]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,, maximumIterations, ), ;, }, verifySequence, (, lowerBound, ,, initial, ,]
[LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,, maximumIterations, ), ;, }, verifySequence, (, lowerBound, ,, initial, ,, upperBound, ), ;, double, a, =]
[), ;, }, verifySequence, (, lowerBound, ,, initial, ,, upperBound, ), ;, double, a, =, initial, ;, double, b, =]
[;, double, a, =, initial, ;, double, b, =, initial, ;, double, fa, ;, double, fb, ;, int, numIterations, =]
[initial, ;, double, b, =, initial, ;, double, fa, ;, double, fb, ;, int, numIterations, =, 0, ;, do, {]
[double, b, =, initial, ;, double, fa, ;, double, fb, ;, int, numIterations, =, 0, ;, do, {, a, =]
[double, b, =, initial, ;, double, fa, ;, double, fb, ;, int, numIterations, =, 0, ;, do, {, a, =]
[;, double, fa, ;, double, fb, ;, int, numIterations, =, 0, ;, do, {, a, =, FastMath, ., max, (]
[;, double, fa, ;, double, fb, ;, int, numIterations, =, 0, ;, do, {, a, =, FastMath, ., max, (]
[fa, ;, double, fb, ;, int, numIterations, =, 0, ;, do, {, a, =, FastMath, ., max, (, a, -]
[double, fb, ;, int, numIterations, =, 0, ;, do, {, a, =, FastMath, ., max, (, a, -, 1.0, ,]
[int, numIterations, =, 0, ;, do, {, a, =, FastMath, ., max, (, a, -, 1.0, ,, lowerBound, ), ;]
[=, 0, ;, do, {, a, =, FastMath, ., max, (, a, -, 1.0, ,, lowerBound, ), ;, b, =]
[=, 0, ;, do, {, a, =, FastMath, ., max, (, a, -, 1.0, ,, lowerBound, ), ;, b, =]
[{, a, =, FastMath, ., max, (, a, -, 1.0, ,, lowerBound, ), ;, b, =, FastMath, ., min, (]
[{, a, =, FastMath, ., max, (, a, -, 1.0, ,, lowerBound, ), ;, b, =, FastMath, ., min, (]
[=, FastMath, ., max, (, a, -, 1.0, ,, lowerBound, ), ;, b, =, FastMath, ., min, (, b, +]
[., max, (, a, -, 1.0, ,, lowerBound, ), ;, b, =, FastMath, ., min, (, b, +, 1.0, ,]
[a, -, 1.0, ,, lowerBound, ), ;, b, =, FastMath, ., min, (, b, +, 1.0, ,, upperBound, ), ;]
[1.0, ,, lowerBound, ), ;, b, =, FastMath, ., min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =]
[1.0, ,, lowerBound, ), ;, b, =, FastMath, ., min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =]
[;, b, =, FastMath, ., min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =, function, ., value, (]
[FastMath, ., min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =, function, ., value, (, a, ), ;]
[min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =, function, ., value, (, a, ), ;, fb, =]
[min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =, function, ., value, (, a, ), ;, fb, =]
[1.0, ,, upperBound, ), ;, fa, =, function, ., value, (, a, ), ;, fb, =, function, ., value, (]
[), ;, fa, =, function, ., value, (, a, ), ;, fb, =, function, ., value, (, b, ), ;]
[;, fa, =, function, ., value, (, a, ), ;, fb, =, function, ., value, (, b, ), ;, ++]
[value, (, a, ), ;, fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while, (]
[value, (, a, ), ;, fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while, (]
[value, (, a, ), ;, fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while, (]
[(, a, ), ;, fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while, (, (]
[(, a, ), ;, fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while, (, (]
[(, a, ), ;, fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while, (, (]
[), ;, fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while, (, (, fa, *]
[fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while, (, (, fa, *, fb, >]
[., value, (, b, ), ;, ++, numIterations, ;, }, while, (, (, fa, *, fb, >, 0.0, ), &&]
[value, (, b, ), ;, ++, numIterations, ;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (]
[value, (, b, ), ;, ++, numIterations, ;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (]
[b, ), ;, ++, numIterations, ;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (, numIterations, <]
[++, numIterations, ;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&]
[numIterations, ;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (]
[numIterations, ;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (]
[;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (]
[;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (]
[while, (, (, fa, *, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (, a, >]
[fa, *, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||]
[*, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (]
[*, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (]
[>, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (, b, <]
[maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, ), ), ), ;, if, (]
[maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, ), ), ), ;, if, (]
[maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, ), ), ), ;, if, (]
[&&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, ), ), ), ;, if, (, fa, *]
[(, a, >, lowerBound, ), ||, (, b, <, upperBound, ), ), ), ;, if, (, fa, *, fb, >]
[), ||, (, b, <, upperBound, ), ), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw]
[b, <, upperBound, ), ), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (]
[b, <, upperBound, ), ), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (]
[), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,]
[;, if, (, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,]
[(, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,]
[*, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,]
[>, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,, fb, ,]
[), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,, fb, ,, numIterations, ,]
[throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,, fb, ,, numIterations, ,, maximumIterations, ,]
[NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,, fb, ,, numIterations, ,, maximumIterations, ,, initial, ,]
[LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,, fb, ,, numIterations, ,, maximumIterations, ,, initial, ,, lowerBound, ,]
[,, b, ,, fa, ,, fb, ,, numIterations, ,, maximumIterations, ,, initial, ,, lowerBound, ,, upperBound, ), ;, }, return]
[,, fb, ,, numIterations, ,, maximumIterations, ,, initial, ,, lowerBound, ,, upperBound, ), ;, }, return, new, double, [, ]]
[fb, ,, numIterations, ,, maximumIterations, ,, initial, ,, lowerBound, ,, upperBound, ), ;, }, return, new, double, [, ], {]
[numIterations, ,, maximumIterations, ,, initial, ,, lowerBound, ,, upperBound, ), ;, }, return, new, double, [, ], {, a, ,]
[{, a, ,, b, }, ;, }, public, static, double, midpoint, (, double, a, ,, double, b, ), {, return]
[{, a, ,, b, }, ;, }, public, static, double, midpoint, (, double, a, ,, double, b, ), {, return]
[a, ,, b, }, ;, }, public, static, double, midpoint, (, double, a, ,, double, b, ), {, return, (]
[a, ,, b, }, ;, }, public, static, double, midpoint, (, double, a, ,, double, b, ), {, return, (]
[b, }, ;, }, public, static, double, midpoint, (, double, a, ,, double, b, ), {, return, (, a, +]
[}, public, static, double, midpoint, (, double, a, ,, double, b, ), {, return, (, a, +, b, ), *]
[static, boolean, isBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper, ), throws, NullArgumentException, {, if, (]
[static, boolean, isBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper, ), throws, NullArgumentException, {, if, (]
[isBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper, ), throws, NullArgumentException, {, if, (, function, ==]
[,, final, double, lower, ,, final, double, upper, ), throws, NullArgumentException, {, if, (, function, ==, null, ), {, throw]
[lower, ,, final, double, upper, ), throws, NullArgumentException, {, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (]
[lower, ,, final, double, upper, ), throws, NullArgumentException, {, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (]
[(, function, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, double, fLo, =]
[(, function, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, double, fLo, =]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, double, fLo, =, function, ., value, (]
[., FUNCTION, ), ;, }, final, double, fLo, =, function, ., value, (, lower, ), ;, final, double, fHi, =]
[., FUNCTION, ), ;, }, final, double, fLo, =, function, ., value, (, lower, ), ;, final, double, fHi, =]
[}, final, double, fLo, =, function, ., value, (, lower, ), ;, final, double, fHi, =, function, ., value, (]
[=, function, ., value, (, lower, ), ;, final, double, fHi, =, function, ., value, (, upper, ), ;, return]
[=, function, ., value, (, lower, ), ;, final, double, fHi, =, function, ., value, (, upper, ), ;, return]
[function, ., value, (, lower, ), ;, final, double, fHi, =, function, ., value, (, upper, ), ;, return, (]
[function, ., value, (, lower, ), ;, final, double, fHi, =, function, ., value, (, upper, ), ;, return, (]
[function, ., value, (, lower, ), ;, final, double, fHi, =, function, ., value, (, upper, ), ;, return, (]
[value, (, lower, ), ;, final, double, fHi, =, function, ., value, (, upper, ), ;, return, (, fLo, >=]
[lower, ), ;, final, double, fHi, =, function, ., value, (, upper, ), ;, return, (, fLo, >=, 0, &&]
[lower, ), ;, final, double, fHi, =, function, ., value, (, upper, ), ;, return, (, fLo, >=, 0, &&]
[;, final, double, fHi, =, function, ., value, (, upper, ), ;, return, (, fLo, >=, 0, &&, fHi, <=]
[fHi, =, function, ., value, (, upper, ), ;, return, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||]
[=, function, ., value, (, upper, ), ;, return, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (]
[=, function, ., value, (, upper, ), ;, return, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (]
[=, function, ., value, (, upper, ), ;, return, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (]
[., value, (, upper, ), ;, return, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=]
[(, upper, ), ;, return, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&]
[(, upper, ), ;, return, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&]
[), ;, return, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=]
[}, public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,, final, double, end, ), {, return]
[}, public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,, final, double, end, ), {, return]
[public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,, final, double, end, ), {, return, (]
[public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,, final, double, end, ), {, return, (]
[boolean, isSequence, (, final, double, start, ,, final, double, mid, ,, final, double, end, ), {, return, (, start, <]
[final, double, start, ,, final, double, mid, ,, final, double, end, ), {, return, (, start, <, mid, ), &&]
[double, start, ,, final, double, mid, ,, final, double, end, ), {, return, (, start, <, mid, ), &&, (]
[double, start, ,, final, double, mid, ,, final, double, end, ), {, return, (, start, <, mid, ), &&, (]
[,, final, double, mid, ,, final, double, end, ), {, return, (, start, <, mid, ), &&, (, mid, <]
[;, }, public, static, void, verifyInterval, (, final, double, lower, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, if, (]
[;, }, public, static, void, verifyInterval, (, final, double, lower, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, if, (]
[public, static, void, verifyInterval, (, final, double, lower, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=]
[(, final, double, lower, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw]
[lower, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[lower, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., ENDPOINTS_NOT_AN_INTERVAL, ,]
[throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., ENDPOINTS_NOT_AN_INTERVAL, ,, lower, ,]
[{, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., ENDPOINTS_NOT_AN_INTERVAL, ,, lower, ,, upper, ,]
[public, static, void, verifySequence, (, final, double, lower, ,, final, double, initial, ,, final, double, upper, ), throws, NumberIsTooLargeException, {]
[void, verifySequence, (, final, double, lower, ,, final, double, initial, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, verifyInterval, (]
[(, final, double, lower, ,, final, double, initial, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, verifyInterval, (, lower, ,]
[lower, ,, final, double, initial, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, verifyInterval, (, lower, ,, initial, ), ;]
[final, double, initial, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, verifyInterval, (, lower, ,, initial, ), ;, verifyInterval, (]
[initial, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, verifyInterval, (, lower, ,, initial, ), ;, verifyInterval, (, initial, ,]
[verifyBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (]
[verifyBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (]
[UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==]
[double, lower, ,, final, double, upper, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw]
[final, double, upper, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (]
[final, double, upper, ), throws, NullArgumentException, ,, NoBracketingException, {, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (]
[,, NoBracketingException, {, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }]
[{, if, (, function, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, verifyInterval, (]
[(, function, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, verifyInterval, (, lower, ,]
[{, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, verifyInterval, (, lower, ,, upper, ), ;, if, (]
[throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, verifyInterval, (, lower, ,, upper, ), ;, if, (, !]
[NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, verifyInterval, (, lower, ,, upper, ), ;, if, (, !, isBracketing, (]
[LocalizedFormats, ., FUNCTION, ), ;, }, verifyInterval, (, lower, ,, upper, ), ;, if, (, !, isBracketing, (, function, ,]
[FUNCTION, ), ;, }, verifyInterval, (, lower, ,, upper, ), ;, if, (, !, isBracketing, (, function, ,, lower, ,]
[(, lower, ,, upper, ), ;, if, (, !, isBracketing, (, function, ,, lower, ,, upper, ), ), {, throw]
[upper, ), ;, if, (, !, isBracketing, (, function, ,, lower, ,, upper, ), ), {, throw, new, NoBracketingException, (]
[;, if, (, !, isBracketing, (, function, ,, lower, ,, upper, ), ), {, throw, new, NoBracketingException, (, lower, ,]
[(, !, isBracketing, (, function, ,, lower, ,, upper, ), ), {, throw, new, NoBracketingException, (, lower, ,, upper, ,]
[(, !, isBracketing, (, function, ,, lower, ,, upper, ), ), {, throw, new, NoBracketingException, (, lower, ,, upper, ,]
[function, ,, lower, ,, upper, ), ), {, throw, new, NoBracketingException, (, lower, ,, upper, ,, function, ., value, (]
[,, upper, ), ), {, throw, new, NoBracketingException, (, lower, ,, upper, ,, function, ., value, (, lower, ), ,]
[,, upper, ), ), {, throw, new, NoBracketingException, (, lower, ,, upper, ,, function, ., value, (, lower, ), ,]
[{, throw, new, NoBracketingException, (, lower, ,, upper, ,, function, ., value, (, lower, ), ,, function, ., value, (]
