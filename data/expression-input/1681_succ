[;, MathUtils, ., checkNotNull, (, upper, ), ;, MathUtils, ., checkNotNull, (, scale, ), ;, if, (, lower, ., length]
[., checkNotNull, (, lower, ), ;, MathUtils, ., checkNotNull, (, upper, ), ;, MathUtils, ., checkNotNull, (, scale, ), ;]
[), ;, MathUtils, ., checkNotNull, (, upper, ), ;, MathUtils, ., checkNotNull, (, scale, ), ;, if, (, lower, .]
[;, MathUtils, ., checkNotNull, (, scale, ), ;, if, (, lower, ., length, !=, upper, ., length, ), {, throw]
[., checkNotNull, (, upper, ), ;, MathUtils, ., checkNotNull, (, scale, ), ;, if, (, lower, ., length, !=, upper]
[), ;, MathUtils, ., checkNotNull, (, scale, ), ;, if, (, lower, ., length, !=, upper, ., length, ), {]
[;, if, (, lower, ., length, !=, upper, ., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length, ,]
[., checkNotNull, (, scale, ), ;, if, (, lower, ., length, !=, upper, ., length, ), {, throw, new, DimensionMismatchException]
[), ;, if, (, lower, ., length, !=, upper, ., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length]
[), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, upper, ., length, ), ;, }, if, (, lower, .]
[!=, upper, ., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, upper, ., length, ), ;, }]
[., length, !=, upper, ., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, upper, ., length, )]
[), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, upper, ., length, ), ;, }, if, (, lower, .]
[., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, upper, ., length, ), ;, }, if, (]
[;, }, if, (, lower, ., length, !=, scale, ., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length]
[,, upper, ., length, ), ;, }, if, (, lower, ., length, !=, scale, ., length, ), {, throw, new]
[., length, ,, upper, ., length, ), ;, }, if, (, lower, ., length, !=, scale, ., length, ), {]
[), ;, }, if, (, lower, ., length, !=, scale, ., length, ), {, throw, new, DimensionMismatchException, (, lower, .]
[., length, ), ;, }, if, (, lower, ., length, !=, scale, ., length, ), {, throw, new, DimensionMismatchException, (]
[), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, scale, ., length, ), ;, }, for, (, int, i]
[!=, scale, ., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, scale, ., length, ), ;, }]
[., length, !=, scale, ., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, scale, ., length, )]
[), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, scale, ., length, ), ;, }, for, (, int, i]
[., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, scale, ., length, ), ;, }, for, (]
[;, }, for, (, int, i, =, 0, ;, i, <, lower, ., length, ;, ++, i, ), {, if]
[,, scale, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, lower, ., length, ;]
[., length, ,, scale, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, lower, .]
[), ;, }, for, (, int, i, =, 0, ;, i, <, lower, ., length, ;, ++, i, ), {]
[., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, lower, ., length, ;, ++, i]
[;, i, <, lower, ., length, ;, ++, i, ), {, if, (, !, (, upper, [, i, ], >=]
[;, ++, i, ), {, if, (, !, (, upper, [, i, ], >=, lower, [, i, ], ), )]
[<, lower, ., length, ;, ++, i, ), {, if, (, !, (, upper, [, i, ], >=, lower, []
[;, ++, i, ), {, if, (, !, (, upper, [, i, ], >=, lower, [, i, ], ), )]
[., length, ;, ++, i, ), {, if, (, !, (, upper, [, i, ], >=, lower, [, i, ]]
[), {, if, (, !, (, upper, [, i, ], >=, lower, [, i, ], ), ), {, throw, new]
[), {, if, (, !, (, upper, [, i, ], >=, lower, [, i, ], ), ), {, throw, new]
[), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,, true, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,, true, ), ;, }]
[), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,, true, ), ;]
[>=, lower, [, i, ], ), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i]
[[, i, ], >=, lower, [, i, ], ), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,]
[], >=, lower, [, i, ], ), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, []
[), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,, true, ), ;]
[[, i, ], ), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,]
[], ), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,, true, )]
[;, }, }, this, ., bounded, =, bounded, ;, this, ., lower, =, lower, ., clone, (, ), ;, this]
[,, lower, [, i, ], ,, true, ), ;, }, }, this, ., bounded, =, bounded, ;, this, ., lower]
[[, i, ], ,, lower, [, i, ], ,, true, ), ;, }, }, this, ., bounded, =, bounded, ;]
[], ,, lower, [, i, ], ,, true, ), ;, }, }, this, ., bounded, =, bounded, ;, this, .]
[,, true, ), ;, }, }, this, ., bounded, =, bounded, ;, this, ., lower, =, lower, ., clone, (]
[[, i, ], ,, true, ), ;, }, }, this, ., bounded, =, bounded, ;, this, ., lower, =, lower]
[], ,, true, ), ;, }, }, this, ., bounded, =, bounded, ;, this, ., lower, =, lower, ., clone]
[), ;, }, }, this, ., bounded, =, bounded, ;, this, ., lower, =, lower, ., clone, (, ), ;]
[=, bounded, ;, this, ., lower, =, lower, ., clone, (, ), ;, this, ., upper, =, upper, ., clone]
[., bounded, =, bounded, ;, this, ., lower, =, lower, ., clone, (, ), ;, this, ., upper, =, upper]
[;, this, ., lower, =, lower, ., clone, (, ), ;, this, ., upper, =, upper, ., clone, (, )]
[=, lower, ., clone, (, ), ;, this, ., upper, =, upper, ., clone, (, ), ;, this, ., offset]
[., lower, =, lower, ., clone, (, ), ;, this, ., upper, =, upper, ., clone, (, ), ;, this]
[;, this, ., upper, =, upper, ., clone, (, ), ;, this, ., offset, =, offset, ;, this, ., scale]
[., clone, (, ), ;, this, ., upper, =, upper, ., clone, (, ), ;, this, ., offset, =, offset]
[=, upper, ., clone, (, ), ;, this, ., offset, =, offset, ;, this, ., scale, =, scale, ., clone]
[., upper, =, upper, ., clone, (, ), ;, this, ., offset, =, offset, ;, this, ., scale, =, scale]
[;, this, ., offset, =, offset, ;, this, ., scale, =, scale, ., clone, (, ), ;, }, public, double]
[., clone, (, ), ;, this, ., offset, =, offset, ;, this, ., scale, =, scale, ., clone, (, )]
[=, offset, ;, this, ., scale, =, scale, ., clone, (, ), ;, }, public, double, value, (, double, []
[., offset, =, offset, ;, this, ., scale, =, scale, ., clone, (, ), ;, }, public, double, value, (]
[;, this, ., scale, =, scale, ., clone, (, ), ;, }, public, double, value, (, double, [, ], point]
[=, scale, ., clone, (, ), ;, }, public, double, value, (, double, [, ], point, ), {, for, (]
[., scale, =, scale, ., clone, (, ), ;, }, public, double, value, (, double, [, ], point, ), {]
[;, }, public, double, value, (, double, [, ], point, ), {, for, (, int, i, =, 0, ;, i]
[., clone, (, ), ;, }, public, double, value, (, double, [, ], point, ), {, for, (, int, i]
[;, i, <, scale, ., length, ;, ++, i, ), {, if, (, (, point, [, i, ], <, lower]
[;, ++, i, ), {, if, (, (, point, [, i, ], <, lower, [, i, ], ), ||, (]
[<, scale, ., length, ;, ++, i, ), {, if, (, (, point, [, i, ], <, lower, [, i]
[;, ++, i, ), {, if, (, (, point, [, i, ], <, lower, [, i, ], ), ||, (]
[., length, ;, ++, i, ), {, if, (, (, point, [, i, ], <, lower, [, i, ], )]
[), {, if, (, (, point, [, i, ], <, lower, [, i, ], ), ||, (, point, [, i]
[), {, if, (, (, point, [, i, ], <, lower, [, i, ], ), ||, (, point, [, i]
[), {, double, sum, =, 0, ;, for, (, int, j, =, i, ;, j, <, scale, ., length, ;]
[||, (, point, [, i, ], >, upper, [, i, ], ), ), {, double, sum, =, 0, ;, for]
[), ||, (, point, [, i, ], >, upper, [, i, ], ), ), {, double, sum, =, 0, ;]
[<, lower, [, i, ], ), ||, (, point, [, i, ], >, upper, [, i, ], ), ), {]
[[, i, ], <, lower, [, i, ], ), ||, (, point, [, i, ], >, upper, [, i, ]]
[], <, lower, [, i, ], ), ||, (, point, [, i, ], >, upper, [, i, ], ), )]
[), ||, (, point, [, i, ], >, upper, [, i, ], ), ), {, double, sum, =, 0, ;]
[[, i, ], ), ||, (, point, [, i, ], >, upper, [, i, ], ), ), {, double, sum]
[], ), ||, (, point, [, i, ], >, upper, [, i, ], ), ), {, double, sum, =, 0]
[), {, double, sum, =, 0, ;, for, (, int, j, =, i, ;, j, <, scale, ., length, ;]
[), ), {, double, sum, =, 0, ;, for, (, int, j, =, i, ;, j, <, scale, ., length]
[>, upper, [, i, ], ), ), {, double, sum, =, 0, ;, for, (, int, j, =, i, ;]
[[, i, ], >, upper, [, i, ], ), ), {, double, sum, =, 0, ;, for, (, int, j]
[], >, upper, [, i, ], ), ), {, double, sum, =, 0, ;, for, (, int, j, =, i]
[), ), {, double, sum, =, 0, ;, for, (, int, j, =, i, ;, j, <, scale, ., length]
[[, i, ], ), ), {, double, sum, =, 0, ;, for, (, int, j, =, i, ;, j, <]
[], ), ), {, double, sum, =, 0, ;, for, (, int, j, =, i, ;, j, <, scale, .]
[;, for, (, int, j, =, i, ;, j, <, scale, ., length, ;, ++, j, ), {, final, double]
[;, j, <, scale, ., length, ;, ++, j, ), {, final, double, overshoot, ;, if, (, point, [, j]
[;, ++, j, ), {, final, double, overshoot, ;, if, (, point, [, j, ], <, lower, [, j, ]]
[<, scale, ., length, ;, ++, j, ), {, final, double, overshoot, ;, if, (, point, [, j, ], <]
[;, ++, j, ), {, final, double, overshoot, ;, if, (, point, [, j, ], <, lower, [, j, ]]
[., length, ;, ++, j, ), {, final, double, overshoot, ;, if, (, point, [, j, ], <, lower, []
[), {, final, double, overshoot, ;, if, (, point, [, j, ], <, lower, [, j, ], ), {, overshoot]
[), {, final, double, overshoot, ;, if, (, point, [, j, ], <, lower, [, j, ], ), {, overshoot]
[), {, overshoot, =, scale, [, j, ], *, (, lower, [, j, ], -, point, [, j, ], )]
[<, lower, [, j, ], ), {, overshoot, =, scale, [, j, ], *, (, lower, [, j, ], -]
[[, j, ], <, lower, [, j, ], ), {, overshoot, =, scale, [, j, ], *, (, lower, []
[], <, lower, [, j, ], ), {, overshoot, =, scale, [, j, ], *, (, lower, [, j, ]]
[), {, overshoot, =, scale, [, j, ], *, (, lower, [, j, ], -, point, [, j, ], )]
[[, j, ], ), {, overshoot, =, scale, [, j, ], *, (, lower, [, j, ], -, point, []
[], ), {, overshoot, =, scale, [, j, ], *, (, lower, [, j, ], -, point, [, j, ]]
[=, scale, [, j, ], *, (, lower, [, j, ], -, point, [, j, ], ), ;, }, else]
[;, }, else, if, (, point, [, j, ], >, upper, [, j, ], ), {, overshoot, =, scale, []
[*, (, lower, [, j, ], -, point, [, j, ], ), ;, }, else, if, (, point, [, j]
[[, j, ], *, (, lower, [, j, ], -, point, [, j, ], ), ;, }, else, if, (]
[], *, (, lower, [, j, ], -, point, [, j, ], ), ;, }, else, if, (, point, []
[;, }, else, if, (, point, [, j, ], >, upper, [, j, ], ), {, overshoot, =, scale, []
[), ;, }, else, if, (, point, [, j, ], >, upper, [, j, ], ), {, overshoot, =, scale]
[-, point, [, j, ], ), ;, }, else, if, (, point, [, j, ], >, upper, [, j, ]]
[[, j, ], -, point, [, j, ], ), ;, }, else, if, (, point, [, j, ], >, upper]
[], -, point, [, j, ], ), ;, }, else, if, (, point, [, j, ], >, upper, [, j]
[), ;, }, else, if, (, point, [, j, ], >, upper, [, j, ], ), {, overshoot, =, scale]
[[, j, ], ), ;, }, else, if, (, point, [, j, ], >, upper, [, j, ], ), {]
[], ), ;, }, else, if, (, point, [, j, ], >, upper, [, j, ], ), {, overshoot, =]
[), {, overshoot, =, scale, [, j, ], *, (, point, [, j, ], -, upper, [, j, ], )]
[>, upper, [, j, ], ), {, overshoot, =, scale, [, j, ], *, (, point, [, j, ], -]
[[, j, ], >, upper, [, j, ], ), {, overshoot, =, scale, [, j, ], *, (, point, []
[], >, upper, [, j, ], ), {, overshoot, =, scale, [, j, ], *, (, point, [, j, ]]
[), {, overshoot, =, scale, [, j, ], *, (, point, [, j, ], -, upper, [, j, ], )]
[[, j, ], ), {, overshoot, =, scale, [, j, ], *, (, point, [, j, ], -, upper, []
[], ), {, overshoot, =, scale, [, j, ], *, (, point, [, j, ], -, upper, [, j, ]]
[=, scale, [, j, ], *, (, point, [, j, ], -, upper, [, j, ], ), ;, }, else]
[;, }, else, {, overshoot, =, 0, ;, }, sum, +=, FastMath, ., sqrt, (, overshoot, ), ;, }, return]
[*, (, point, [, j, ], -, upper, [, j, ], ), ;, }, else, {, overshoot, =, 0, ;]
[[, j, ], *, (, point, [, j, ], -, upper, [, j, ], ), ;, }, else, {, overshoot]
[], *, (, point, [, j, ], -, upper, [, j, ], ), ;, }, else, {, overshoot, =, 0]
[;, }, else, {, overshoot, =, 0, ;, }, sum, +=, FastMath, ., sqrt, (, overshoot, ), ;, }, return]
[), ;, }, else, {, overshoot, =, 0, ;, }, sum, +=, FastMath, ., sqrt, (, overshoot, ), ;, }]
[-, upper, [, j, ], ), ;, }, else, {, overshoot, =, 0, ;, }, sum, +=, FastMath, ., sqrt]
[[, j, ], -, upper, [, j, ], ), ;, }, else, {, overshoot, =, 0, ;, }, sum, +=]
[], -, upper, [, j, ], ), ;, }, else, {, overshoot, =, 0, ;, }, sum, +=, FastMath, .]
[), ;, }, else, {, overshoot, =, 0, ;, }, sum, +=, FastMath, ., sqrt, (, overshoot, ), ;, }]
[[, j, ], ), ;, }, else, {, overshoot, =, 0, ;, }, sum, +=, FastMath, ., sqrt, (, overshoot]
[], ), ;, }, else, {, overshoot, =, 0, ;, }, sum, +=, FastMath, ., sqrt, (, overshoot, ), ;]
[=, 0, ;, }, sum, +=, FastMath, ., sqrt, (, overshoot, ), ;, }, return, offset, +, sum, ;, }]
[;, }, sum, +=, FastMath, ., sqrt, (, overshoot, ), ;, }, return, offset, +, sum, ;, }, }, return]
[+=, FastMath, ., sqrt, (, overshoot, ), ;, }, return, offset, +, sum, ;, }, }, return, bounded, ., value]
[;, }, return, offset, +, sum, ;, }, }, return, bounded, ., value, (, point, ), ;, }, }]
[., sqrt, (, overshoot, ), ;, }, return, offset, +, sum, ;, }, }, return, bounded, ., value, (, point]
[), ;, }, return, offset, +, sum, ;, }, }, return, bounded, ., value, (, point, ), ;, }, }]
[;, }, }, return, bounded, ., value, (, point, ), ;, }, }]
[+, sum, ;, }, }, return, bounded, ., value, (, point, ), ;, }, }]
[;, }, }, return, bounded, ., value, (, point, ), ;, }, }]
[;, }, }]
[., value, (, point, ), ;, }, }]
[), ;, }, }]
