[;, class, ExploitAssigns, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, for, (, Node, child, =]
[;, class, ExploitAssigns, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, for, (, Node, child, =]
[@, Override, Node, optimizeSubtree, (, Node, subtree, ), {, for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;]
[@, Override, Node, optimizeSubtree, (, Node, subtree, ), {, for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;]
[Node, optimizeSubtree, (, Node, subtree, ), {, for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;, child, !=]
[for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =]
[for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =]
[(, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, if, (]
[(, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, if, (]
[!=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, if, (, NodeUtil, ., isExprAssign, (]
[{, Node, next, =, child, ., getNext, (, ), ;, if, (, NodeUtil, ., isExprAssign, (, child, ), ), {]
[next, =, child, ., getNext, (, ), ;, if, (, NodeUtil, ., isExprAssign, (, child, ), ), {, collapseAssign, (]
[next, =, child, ., getNext, (, ), ;, if, (, NodeUtil, ., isExprAssign, (, child, ), ), {, collapseAssign, (]
[), ;, if, (, NodeUtil, ., isExprAssign, (, child, ), ), {, collapseAssign, (, child, ., getFirstChild, (, ), ,]
[if, (, NodeUtil, ., isExprAssign, (, child, ), ), {, collapseAssign, (, child, ., getFirstChild, (, ), ,, child, ,]
[isExprAssign, (, child, ), ), {, collapseAssign, (, child, ., getFirstChild, (, ), ,, child, ,, subtree, ), ;, }]
[child, ), ), {, collapseAssign, (, child, ., getFirstChild, (, ), ,, child, ,, subtree, ), ;, }, child, =]
[collapseAssign, (, child, ., getFirstChild, (, ), ,, child, ,, subtree, ), ;, }, child, =, next, ;, }, return]
[subtree, ;, }, private, void, collapseAssign, (, Node, assign, ,, Node, expr, ,, Node, exprParent, ), {, Node, leftValue, =]
[subtree, ;, }, private, void, collapseAssign, (, Node, assign, ,, Node, expr, ,, Node, exprParent, ), {, Node, leftValue, =]
[,, Node, expr, ,, Node, exprParent, ), {, Node, leftValue, =, assign, ., getFirstChild, (, ), ;, Node, rightValue, =]
[,, Node, expr, ,, Node, exprParent, ), {, Node, leftValue, =, assign, ., getFirstChild, (, ), ;, Node, rightValue, =]
[Node, leftValue, =, assign, ., getFirstChild, (, ), ;, Node, rightValue, =, leftValue, ., getNext, (, ), ;, if, (]
[Node, leftValue, =, assign, ., getFirstChild, (, ), ;, Node, rightValue, =, leftValue, ., getNext, (, ), ;, if, (]
[=, assign, ., getFirstChild, (, ), ;, Node, rightValue, =, leftValue, ., getNext, (, ), ;, if, (, isCollapsibleValue, (]
[., getFirstChild, (, ), ;, Node, rightValue, =, leftValue, ., getNext, (, ), ;, if, (, isCollapsibleValue, (, leftValue, ,]
[), ;, Node, rightValue, =, leftValue, ., getNext, (, ), ;, if, (, isCollapsibleValue, (, leftValue, ,, true, ), &&]
[Node, rightValue, =, leftValue, ., getNext, (, ), ;, if, (, isCollapsibleValue, (, leftValue, ,, true, ), &&, collapseAssignEqualTo, (]
[=, leftValue, ., getNext, (, ), ;, if, (, isCollapsibleValue, (, leftValue, ,, true, ), &&, collapseAssignEqualTo, (, expr, ,]
[., getNext, (, ), ;, if, (, isCollapsibleValue, (, leftValue, ,, true, ), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,]
[;, if, (, isCollapsibleValue, (, leftValue, ,, true, ), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, leftValue, ), ), {]
[), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, leftValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (]
[), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, leftValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (]
[collapseAssignEqualTo, (, expr, ,, exprParent, ,, leftValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (, isCollapsibleValue, (]
[expr, ,, exprParent, ,, leftValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (, isCollapsibleValue, (, rightValue, ,]
[,, leftValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (, isCollapsibleValue, (, rightValue, ,, false, ), &&]
[), ), {, reportCodeChange, (, ), ;, }, else, if, (, isCollapsibleValue, (, rightValue, ,, false, ), &&, collapseAssignEqualTo, (]
[{, reportCodeChange, (, ), ;, }, else, if, (, isCollapsibleValue, (, rightValue, ,, false, ), &&, collapseAssignEqualTo, (, expr, ,]
[(, ), ;, }, else, if, (, isCollapsibleValue, (, rightValue, ,, false, ), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,]
[else, if, (, isCollapsibleValue, (, rightValue, ,, false, ), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, rightValue, ), ), {]
[), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, rightValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (]
[), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, rightValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (]
[,, rightValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (, rightValue, ., isAssign, (, ), ), {]
[), ), {, reportCodeChange, (, ), ;, }, else, if, (, rightValue, ., isAssign, (, ), ), {, collapseAssign, (]
[{, reportCodeChange, (, ), ;, }, else, if, (, rightValue, ., isAssign, (, ), ), {, collapseAssign, (, rightValue, ,]
[(, ), ;, }, else, if, (, rightValue, ., isAssign, (, ), ), {, collapseAssign, (, rightValue, ,, expr, ,]
[expr, ,, exprParent, ), ;, }, }, private, boolean, isCollapsibleValue, (, Node, value, ,, boolean, isLValue, ), {, switch, (]
[expr, ,, exprParent, ), ;, }, }, private, boolean, isCollapsibleValue, (, Node, value, ,, boolean, isLValue, ), {, switch, (]
[boolean, isCollapsibleValue, (, Node, value, ,, boolean, isLValue, ), {, switch, (, value, ., getType, (, ), ), {, case]
[boolean, isCollapsibleValue, (, Node, value, ,, boolean, isLValue, ), {, switch, (, value, ., getType, (, ), ), {, case]
[,, boolean, isLValue, ), {, switch, (, value, ., getType, (, ), ), {, case, Token, ., GETPROP, :, return]
[,, boolean, isLValue, ), {, switch, (, value, ., getType, (, ), ), {, case, Token, ., GETPROP, :, return]
[boolean, isLValue, ), {, switch, (, value, ., getType, (, ), ), {, case, Token, ., GETPROP, :, return, !]
[), {, switch, (, value, ., getType, (, ), ), {, case, Token, ., GETPROP, :, return, !, isLValue, ||]
[), {, switch, (, value, ., getType, (, ), ), {, case, Token, ., GETPROP, :, return, !, isLValue, ||]
[), {, switch, (, value, ., getType, (, ), ), {, case, Token, ., GETPROP, :, return, !, isLValue, ||]
[case, Token, ., GETPROP, :, return, !, isLValue, ||, value, ., getFirstChild, (, ), ., isThis, (, ), ;, case]
[case, Token, ., GETPROP, :, return, !, isLValue, ||, value, ., getFirstChild, (, ), ., isThis, (, ), ;, case]
[return, !, isLValue, ||, value, ., getFirstChild, (, ), ., isThis, (, ), ;, case, Token, ., NAME, :, return]
[., getFirstChild, (, ), ., isThis, (, ), ;, case, Token, ., NAME, :, return, true, ;, default, :, return]
[., getFirstChild, (, ), ., isThis, (, ), ;, case, Token, ., NAME, :, return, true, ;, default, :, return]
[., isThis, (, ), ;, case, Token, ., NAME, :, return, true, ;, default, :, return, NodeUtil, ., isImmutableValue, (]
[;, }, }, private, boolean, collapseAssignEqualTo, (, Node, expr, ,, Node, exprParent, ,, Node, value, ), {, Node, assign, =]
[;, }, }, private, boolean, collapseAssignEqualTo, (, Node, expr, ,, Node, exprParent, ,, Node, value, ), {, Node, assign, =]
[,, Node, exprParent, ,, Node, value, ), {, Node, assign, =, expr, ., getFirstChild, (, ), ;, Node, parent, =]
[value, ), {, Node, assign, =, expr, ., getFirstChild, (, ), ;, Node, parent, =, exprParent, ;, Node, next, =]
[value, ), {, Node, assign, =, expr, ., getFirstChild, (, ), ;, Node, parent, =, exprParent, ;, Node, next, =]
[getFirstChild, (, ), ;, Node, parent, =, exprParent, ;, Node, next, =, expr, ., getNext, (, ), ;, while, (]
[getFirstChild, (, ), ;, Node, parent, =, exprParent, ;, Node, next, =, expr, ., getNext, (, ), ;, while, (]
[), ;, Node, parent, =, exprParent, ;, Node, next, =, expr, ., getNext, (, ), ;, while, (, next, !=]
[exprParent, ;, Node, next, =, expr, ., getNext, (, ), ;, while, (, next, !=, null, ), {, switch, (]
[exprParent, ;, Node, next, =, expr, ., getNext, (, ), ;, while, (, next, !=, null, ), {, switch, (]
[(, ), ;, while, (, next, !=, null, ), {, switch, (, next, ., getType, (, ), ), {, case]
[(, ), ;, while, (, next, !=, null, ), {, switch, (, next, ., getType, (, ), ), {, case]
[next, !=, null, ), {, switch, (, next, ., getType, (, ), ), {, case, Token, ., AND, :, case]
[next, !=, null, ), {, switch, (, next, ., getType, (, ), ), {, case, Token, ., AND, :, case]
[switch, (, next, ., getType, (, ), ), {, case, Token, ., AND, :, case, Token, ., OR, :, case]
[switch, (, next, ., getType, (, ), ), {, case, Token, ., AND, :, case, Token, ., OR, :, case]
[(, ), ), {, case, Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, case]
[(, ), ), {, case, Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, case]
[Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case]
[Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case]
[Token, ., OR, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., RETURN, :, case]
[Token, ., OR, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., RETURN, :, case]
[case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :]
[., HOOK, :, case, Token, ., IF, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, parent, =]
[:, case, Token, ., IF, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, parent, =, next, ;]
[Token, ., IF, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, parent, =, next, ;, next, =]
[Token, ., IF, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, parent, =, next, ;, next, =]
[case, Token, ., EXPR_RESULT, :, parent, =, next, ;, next, =, next, ., getFirstChild, (, ), ;, break, ;, case]
[case, Token, ., EXPR_RESULT, :, parent, =, next, ;, next, =, next, ., getFirstChild, (, ), ;, break, ;, case]
[=, next, ;, next, =, next, ., getFirstChild, (, ), ;, break, ;, case, Token, ., VAR, :, if, (]
[=, next, ;, next, =, next, ., getFirstChild, (, ), ;, break, ;, case, Token, ., VAR, :, if, (]
[=, next, ;, next, =, next, ., getFirstChild, (, ), ;, break, ;, case, Token, ., VAR, :, if, (]
[break, ;, case, Token, ., VAR, :, if, (, next, ., getFirstChild, (, ), ., hasChildren, (, ), ), {]
[case, Token, ., VAR, :, if, (, next, ., getFirstChild, (, ), ., hasChildren, (, ), ), {, parent, =]
[case, Token, ., VAR, :, if, (, next, ., getFirstChild, (, ), ., hasChildren, (, ), ), {, parent, =]
[(, next, ., getFirstChild, (, ), ., hasChildren, (, ), ), {, parent, =, next, ., getFirstChild, (, ), ;]
[., getFirstChild, (, ), ., hasChildren, (, ), ), {, parent, =, next, ., getFirstChild, (, ), ;, next, =]
[., getFirstChild, (, ), ., hasChildren, (, ), ), {, parent, =, next, ., getFirstChild, (, ), ;, next, =]
[parent, =, next, ., getFirstChild, (, ), ;, next, =, parent, ., getFirstChild, (, ), ;, break, ;, }, return]
[., getFirstChild, (, ), ;, next, =, parent, ., getFirstChild, (, ), ;, break, ;, }, return, false, ;, case]
[., getFirstChild, (, ), ;, next, =, parent, ., getFirstChild, (, ), ;, break, ;, }, return, false, ;, case]
[next, =, parent, ., getFirstChild, (, ), ;, break, ;, }, return, false, ;, case, Token, ., GETPROP, :, case]
[next, =, parent, ., getFirstChild, (, ), ;, break, ;, }, return, false, ;, case, Token, ., GETPROP, :, case]
[), ;, break, ;, }, return, false, ;, case, Token, ., GETPROP, :, case, Token, ., NAME, :, if, (]
[), ;, break, ;, }, return, false, ;, case, Token, ., GETPROP, :, case, Token, ., NAME, :, if, (]
[., GETPROP, :, case, Token, ., NAME, :, if, (, next, ., isQualifiedName, (, ), ), {, String, nextName, =]
[., GETPROP, :, case, Token, ., NAME, :, if, (, next, ., isQualifiedName, (, ), ), {, String, nextName, =]
[if, (, next, ., isQualifiedName, (, ), ), {, String, nextName, =, next, ., getQualifiedName, (, ), ;, if, (]
[if, (, next, ., isQualifiedName, (, ), ), {, String, nextName, =, next, ., getQualifiedName, (, ), ;, if, (]
[if, (, next, ., isQualifiedName, (, ), ), {, String, nextName, =, next, ., getQualifiedName, (, ), ;, if, (]
[), ), {, String, nextName, =, next, ., getQualifiedName, (, ), ;, if, (, value, ., isQualifiedName, (, ), &&]
[), ), {, String, nextName, =, next, ., getQualifiedName, (, ), ;, if, (, value, ., isQualifiedName, (, ), &&]
[nextName, =, next, ., getQualifiedName, (, ), ;, if, (, value, ., isQualifiedName, (, ), &&, nextName, ., equals, (]
[nextName, =, next, ., getQualifiedName, (, ), ;, if, (, value, ., isQualifiedName, (, ), &&, nextName, ., equals, (]
[value, ., isQualifiedName, (, ), &&, nextName, ., equals, (, value, ., getQualifiedName, (, ), ), ), {, if, (]
[., isQualifiedName, (, ), &&, nextName, ., equals, (, value, ., getQualifiedName, (, ), ), ), {, if, (, !]
[(, ), &&, nextName, ., equals, (, value, ., getQualifiedName, (, ), ), ), {, if, (, !, isSafeReplacement, (]
[&&, nextName, ., equals, (, value, ., getQualifiedName, (, ), ), ), {, if, (, !, isSafeReplacement, (, next, ,]
[value, ., getQualifiedName, (, ), ), ), {, if, (, !, isSafeReplacement, (, next, ,, assign, ), ), {, return]
[(, ), ), ), {, if, (, !, isSafeReplacement, (, next, ,, assign, ), ), {, return, false, ;, }]
[(, ), ), ), {, if, (, !, isSafeReplacement, (, next, ,, assign, ), ), {, return, false, ;, }]
[{, if, (, !, isSafeReplacement, (, next, ,, assign, ), ), {, return, false, ;, }, exprParent, ., removeChild, (]
[!, isSafeReplacement, (, next, ,, assign, ), ), {, return, false, ;, }, exprParent, ., removeChild, (, expr, ), ;]
[!, isSafeReplacement, (, next, ,, assign, ), ), {, return, false, ;, }, exprParent, ., removeChild, (, expr, ), ;]
[,, assign, ), ), {, return, false, ;, }, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (]
[), {, return, false, ;, }, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;]
[), {, return, false, ;, }, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;]
[;, }, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (]
[exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,]
[expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return]
[removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, }, return]
[), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, }, return, false, ;, case]
[), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, }, return, false, ;, case]
[,, assign, ), ;, return, true, ;, }, }, return, false, ;, case, Token, ., ASSIGN, :, Node, leftSide, =]
[,, assign, ), ;, return, true, ;, }, }, return, false, ;, case, Token, ., ASSIGN, :, Node, leftSide, =]
[}, return, false, ;, case, Token, ., ASSIGN, :, Node, leftSide, =, next, ., getFirstChild, (, ), ;, if, (]
[}, return, false, ;, case, Token, ., ASSIGN, :, Node, leftSide, =, next, ., getFirstChild, (, ), ;, if, (]
[}, return, false, ;, case, Token, ., ASSIGN, :, Node, leftSide, =, next, ., getFirstChild, (, ), ;, if, (]
[., ASSIGN, :, Node, leftSide, =, next, ., getFirstChild, (, ), ;, if, (, leftSide, ., isName, (, ), ||]
[., ASSIGN, :, Node, leftSide, =, next, ., getFirstChild, (, ), ;, if, (, leftSide, ., isName, (, ), ||]
[., ASSIGN, :, Node, leftSide, =, next, ., getFirstChild, (, ), ;, if, (, leftSide, ., isName, (, ), ||]
[next, ., getFirstChild, (, ), ;, if, (, leftSide, ., isName, (, ), ||, leftSide, ., isGetProp, (, ), &&]
[next, ., getFirstChild, (, ), ;, if, (, leftSide, ., isName, (, ), ||, leftSide, ., isGetProp, (, ), &&]
[next, ., getFirstChild, (, ), ;, if, (, leftSide, ., isName, (, ), ||, leftSide, ., isGetProp, (, ), &&]
[(, ), ||, leftSide, ., isGetProp, (, ), &&, leftSide, ., getFirstChild, (, ), ., isThis, (, ), ), {]
[||, leftSide, ., isGetProp, (, ), &&, leftSide, ., getFirstChild, (, ), ., isThis, (, ), ), {, parent, =]
[., isGetProp, (, ), &&, leftSide, ., getFirstChild, (, ), ., isThis, (, ), ), {, parent, =, next, ;]
[(, ), &&, leftSide, ., getFirstChild, (, ), ., isThis, (, ), ), {, parent, =, next, ;, next, =]
[(, ), &&, leftSide, ., getFirstChild, (, ), ., isThis, (, ), ), {, parent, =, next, ;, next, =]
[), {, parent, =, next, ;, next, =, leftSide, ., getNext, (, ), ;, break, ;, }, else, {, return]
[=, leftSide, ., getNext, (, ), ;, break, ;, }, else, {, return, false, ;, }, default, :, if, (]
[=, leftSide, ., getNext, (, ), ;, break, ;, }, else, {, return, false, ;, }, default, :, if, (]
[=, leftSide, ., getNext, (, ), ;, break, ;, }, else, {, return, false, ;, }, default, :, if, (]
[(, ), ;, break, ;, }, else, {, return, false, ;, }, default, :, if, (, NodeUtil, ., isImmutableValue, (]
[break, ;, }, else, {, return, false, ;, }, default, :, if, (, NodeUtil, ., isImmutableValue, (, next, ), &&]
[break, ;, }, else, {, return, false, ;, }, default, :, if, (, NodeUtil, ., isImmutableValue, (, next, ), &&]
[{, return, false, ;, }, default, :, if, (, NodeUtil, ., isImmutableValue, (, next, ), &&, next, ., isEquivalentTo, (]
[}, default, :, if, (, NodeUtil, ., isImmutableValue, (, next, ), &&, next, ., isEquivalentTo, (, value, ), ), {]
[}, default, :, if, (, NodeUtil, ., isImmutableValue, (, next, ), &&, next, ., isEquivalentTo, (, value, ), ), {]
[(, NodeUtil, ., isImmutableValue, (, next, ), &&, next, ., isEquivalentTo, (, value, ), ), {, exprParent, ., removeChild, (]
[isImmutableValue, (, next, ), &&, next, ., isEquivalentTo, (, value, ), ), {, exprParent, ., removeChild, (, expr, ), ;]
[isImmutableValue, (, next, ), &&, next, ., isEquivalentTo, (, value, ), ), {, exprParent, ., removeChild, (, expr, ), ;]
[&&, next, ., isEquivalentTo, (, value, ), ), {, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (]
[isEquivalentTo, (, value, ), ), {, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;]
[isEquivalentTo, (, value, ), ), {, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;]
[), {, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (]
[exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,]
[expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return]
[., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, return]
[;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, return, false, ;, }, }, return]
[;, }, }, return, false, ;, }, private, boolean, isSafeReplacement, (, Node, node, ,, Node, replacement, ), {, if, (]
[;, }, }, return, false, ;, }, private, boolean, isSafeReplacement, (, Node, node, ,, Node, replacement, ), {, if, (]
[boolean, isSafeReplacement, (, Node, node, ,, Node, replacement, ), {, if, (, node, ., isName, (, ), ), {, return]
[Node, node, ,, Node, replacement, ), {, if, (, node, ., isName, (, ), ), {, return, true, ;, }]
[Node, node, ,, Node, replacement, ), {, if, (, node, ., isName, (, ), ), {, return, true, ;, }]
[replacement, ), {, if, (, node, ., isName, (, ), ), {, return, true, ;, }, Preconditions, ., checkArgument, (]
[replacement, ), {, if, (, node, ., isName, (, ), ), {, return, true, ;, }, Preconditions, ., checkArgument, (]
[), {, return, true, ;, }, Preconditions, ., checkArgument, (, node, ., isGetProp, (, ), ), ;, Node, name, =]
[), {, return, true, ;, }, Preconditions, ., checkArgument, (, node, ., isGetProp, (, ), ), ;, Node, name, =]
[checkArgument, (, node, ., isGetProp, (, ), ), ;, Node, name, =, node, ., getFirstChild, (, ), ;, if, (]
[checkArgument, (, node, ., isGetProp, (, ), ), ;, Node, name, =, node, ., getFirstChild, (, ), ;, if, (]
[checkArgument, (, node, ., isGetProp, (, ), ), ;, Node, name, =, node, ., getFirstChild, (, ), ;, if, (]
[), ), ;, Node, name, =, node, ., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&]
[;, Node, name, =, node, ., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&, isNameAssignedTo, (]
[;, Node, name, =, node, ., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&, isNameAssignedTo, (]
[getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&, isNameAssignedTo, (, name, ., getString, (, ), ,]
[(, name, ., isName, (, ), &&, isNameAssignedTo, (, name, ., getString, (, ), ,, replacement, ), ), {, return]
[(, ), &&, isNameAssignedTo, (, name, ., getString, (, ), ,, replacement, ), ), {, return, false, ;, }, return]
[return, true, ;, }, private, boolean, isNameAssignedTo, (, String, name, ,, Node, node, ), {, for, (, Node, c, =]
[return, true, ;, }, private, boolean, isNameAssignedTo, (, String, name, ,, Node, node, ), {, for, (, Node, c, =]
[isNameAssignedTo, (, String, name, ,, Node, node, ), {, for, (, Node, c, =, node, ., getFirstChild, (, ), ;]
[isNameAssignedTo, (, String, name, ,, Node, node, ), {, for, (, Node, c, =, node, ., getFirstChild, (, ), ;]
[String, name, ,, Node, node, ), {, for, (, Node, c, =, node, ., getFirstChild, (, ), ;, c, !=]
[,, Node, node, ), {, for, (, Node, c, =, node, ., getFirstChild, (, ), ;, c, !=, null, ;]
[node, ), {, for, (, Node, c, =, node, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[node, ), {, for, (, Node, c, =, node, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[(, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, isNameAssignedTo, (]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, isNameAssignedTo, (, name, ,]
[c, =, c, ., getNext, (, ), ), {, if, (, isNameAssignedTo, (, name, ,, c, ), ), {, return]
[), ), {, if, (, isNameAssignedTo, (, name, ,, c, ), ), {, return, true, ;, }, }, if, (]
[), ), {, if, (, isNameAssignedTo, (, name, ,, c, ), ), {, return, true, ;, }, }, if, (]
[), ), {, return, true, ;, }, }, if, (, node, ., isName, (, ), ), {, Node, parent, =]
[), ), {, return, true, ;, }, }, if, (, node, ., isName, (, ), ), {, Node, parent, =]
[if, (, node, ., isName, (, ), ), {, Node, parent, =, node, ., getParent, (, ), ;, if, (]
[if, (, node, ., isName, (, ), ), {, Node, parent, =, node, ., getParent, (, ), ;, if, (]
[if, (, node, ., isName, (, ), ), {, Node, parent, =, node, ., getParent, (, ), ;, if, (]
[), ), {, Node, parent, =, node, ., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&]
[), ), {, Node, parent, =, node, ., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&]
[), ), {, Node, parent, =, node, ., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&]
[node, ., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==]
[;, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, node, ), {, if, (]
[;, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, node, ), {, if, (]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, node, ), {, if, (, name, ., equals, (]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, node, ), {, if, (, name, ., equals, (]
[), ==, node, ), {, if, (, name, ., equals, (, node, ., getString, (, ), ), ), {, return]
[(, name, ., equals, (, node, ., getString, (, ), ), ), {, return, true, ;, }, }, }, return]
