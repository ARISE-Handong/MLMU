[;, private, static, final, long, serialVersionUID, =, 8772222695580707260L, ;, private, final, OpenIntToDoubleHashMap, entries, ;, private, final, int, virtualSize, ;, private]
[;, private, final, OpenIntToDoubleHashMap, entries, ;, private, final, int, virtualSize, ;, private, final, double, epsilon, ;, public, OpenMapRealVector, (, )]
[,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ), {, this, (, dimension, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }]
[), ;, }, public, OpenMapRealVector, (, int, dimension, ), {, this, (, dimension, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector]
[,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ,, double, epsilon, ), {, virtualSize, =, dimension, ;, entries]
[), ;, }, public, OpenMapRealVector, (, int, dimension, ,, double, epsilon, ), {, virtualSize, =, dimension, ;, entries, =, new]
[=, dimension, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, }, protected, OpenMapRealVector]
[;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, }, protected, OpenMapRealVector, (, OpenMapRealVector]
[=, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, }, protected, OpenMapRealVector, (, OpenMapRealVector, v, ,]
[;, this, ., epsilon, =, epsilon, ;, }, protected, OpenMapRealVector, (, OpenMapRealVector, v, ,, int, resize, ), {, virtualSize, =]
[), ;, this, ., epsilon, =, epsilon, ;, }, protected, OpenMapRealVector, (, OpenMapRealVector, v, ,, int, resize, ), {, virtualSize]
[=, epsilon, ;, }, protected, OpenMapRealVector, (, OpenMapRealVector, v, ,, int, resize, ), {, virtualSize, =, v, ., getDimension, (]
[., epsilon, =, epsilon, ;, }, protected, OpenMapRealVector, (, OpenMapRealVector, v, ,, int, resize, ), {, virtualSize, =, v, .]
[;, }, protected, OpenMapRealVector, (, OpenMapRealVector, v, ,, int, resize, ), {, virtualSize, =, v, ., getDimension, (, ), +]
[=, v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., entries, ), ;, epsilon]
[;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., entries, ), ;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector]
[+, resize, ;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., entries, ), ;, epsilon, =, v, ., epsilon, ;, }]
[., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., entries, ), ;, epsilon, =, v]
[;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., entries, ), ;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector]
[=, new, OpenIntToDoubleHashMap, (, v, ., entries, ), ;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector, (, int]
[;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ), {, this, (]
[), ;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ), {, this]
[., entries, ), ;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, )]
[=, v, ., epsilon, ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ), {, this, (, dimension, ,]
[;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ), {, this, (, dimension, ,, expectedSize, ,, DEFAULT_ZERO_TOLERANCE, )]
[., epsilon, ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ), {, this, (, dimension, ,, expectedSize, ,]
[,, expectedSize, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ,, double, epsilon, ), {]
[,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ,, double, epsilon, ), {, virtualSize, =]
[), ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ,, double, epsilon, ), {, virtualSize, =, dimension, ;]
[=, dimension, ;, entries, =, new, OpenIntToDoubleHashMap, (, expectedSize, ,, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, }]
[;, entries, =, new, OpenIntToDoubleHashMap, (, expectedSize, ,, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, }, public, OpenMapRealVector]
[=, new, OpenIntToDoubleHashMap, (, expectedSize, ,, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, }, public, OpenMapRealVector, (, double]
[;, this, ., epsilon, =, epsilon, ;, }, public, OpenMapRealVector, (, double, [, ], values, ), {, this, (, values]
[,, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, }, public, OpenMapRealVector, (, double, [, ], values, ), {]
[), ;, this, ., epsilon, =, epsilon, ;, }, public, OpenMapRealVector, (, double, [, ], values, ), {, this, (]
[=, epsilon, ;, }, public, OpenMapRealVector, (, double, [, ], values, ), {, this, (, values, ,, DEFAULT_ZERO_TOLERANCE, ), ;]
[., epsilon, =, epsilon, ;, }, public, OpenMapRealVector, (, double, [, ], values, ), {, this, (, values, ,, DEFAULT_ZERO_TOLERANCE]
[;, }, public, OpenMapRealVector, (, double, [, ], values, ), {, this, (, values, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public]
[,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, double, [, ], values, ,, double, epsilon, ), {, virtualSize, =, values]
[), ;, }, public, OpenMapRealVector, (, double, [, ], values, ,, double, epsilon, ), {, virtualSize, =, values, ., length]
[=, values, ., length, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for]
[;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =]
[., length, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int]
[=, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;]
[;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;]
[), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length]
[=, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {]
[., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++]
[;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, double, value]
[;, key, <, values, ., length, ;, key, ++, ), {, double, value, =, values, [, key, ], ;, if]
[;, key, ++, ), {, double, value, =, values, [, key, ], ;, if, (, !, isDefaultValue, (, value, )]
[<, values, ., length, ;, key, ++, ), {, double, value, =, values, [, key, ], ;, if, (, !]
[;, key, ++, ), {, double, value, =, values, [, key, ], ;, if, (, !, isDefaultValue, (, value, )]
[., length, ;, key, ++, ), {, double, value, =, values, [, key, ], ;, if, (, !, isDefaultValue, (]
[), {, double, value, =, values, [, key, ], ;, if, (, !, isDefaultValue, (, value, ), ), {, entries]
[++, ), {, double, value, =, values, [, key, ], ;, if, (, !, isDefaultValue, (, value, ), ), {]
[;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key, ,, value, ), ;, }]
[[, key, ], ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key, ,, value]
[], ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key, ,, value, ), ;]
[), {, entries, ., put, (, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, Double, [, ]]
[), {, entries, ., put, (, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, Double, [, ]]
[), ), {, entries, ., put, (, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, Double, []
[;, }, }, }, public, OpenMapRealVector, (, Double, [, ], values, ), {, this, (, values, ,, DEFAULT_ZERO_TOLERANCE, ), ;]
[., put, (, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, Double, [, ], values, ), {]
[,, value, ), ;, }, }, }, public, OpenMapRealVector, (, Double, [, ], values, ), {, this, (, values, ,]
[), ;, }, }, }, public, OpenMapRealVector, (, Double, [, ], values, ), {, this, (, values, ,, DEFAULT_ZERO_TOLERANCE, )]
[,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, Double, [, ], values, ,, double, epsilon, ), {, virtualSize, =, values]
[), ;, }, public, OpenMapRealVector, (, Double, [, ], values, ,, double, epsilon, ), {, virtualSize, =, values, ., length]
[=, values, ., length, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for]
[;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =]
[., length, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int]
[=, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;]
[;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;]
[), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length]
[=, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {]
[., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++]
[;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, double, value]
[;, key, <, values, ., length, ;, key, ++, ), {, double, value, =, values, [, key, ], ., doubleValue]
[;, key, ++, ), {, double, value, =, values, [, key, ], ., doubleValue, (, ), ;, if, (, !]
[<, values, ., length, ;, key, ++, ), {, double, value, =, values, [, key, ], ., doubleValue, (, )]
[;, key, ++, ), {, double, value, =, values, [, key, ], ., doubleValue, (, ), ;, if, (, !]
[., length, ;, key, ++, ), {, double, value, =, values, [, key, ], ., doubleValue, (, ), ;, if]
[), {, double, value, =, values, [, key, ], ., doubleValue, (, ), ;, if, (, !, isDefaultValue, (, value]
[++, ), {, double, value, =, values, [, key, ], ., doubleValue, (, ), ;, if, (, !, isDefaultValue, (]
[;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key, ,, value, ), ;, }]
[., doubleValue, (, ), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key, ,]
[[, key, ], ., doubleValue, (, ), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put]
[], ., doubleValue, (, ), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key]
[), {, entries, ., put, (, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v, )]
[), {, entries, ., put, (, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v, )]
[), ), {, entries, ., put, (, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v]
[;, }, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;, entries]
[., put, (, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v, ), {, virtualSize, =]
[,, value, ), ;, }, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v, ), {, virtualSize, =, v, ., getDimension, (]
[), ;, }, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;]
[=, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., getEntries, (, ), ), ;, epsilon]
[;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., getEntries, (, ), ), ;, epsilon, =, v, ., epsilon, ;, }]
[., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., getEntries, (, ), ), ;, epsilon, =, v]
[=, new, OpenIntToDoubleHashMap, (, v, ., getEntries, (, ), ), ;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector]
[;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector, (, RealVector, v, ), {, virtualSize, =, v, ., getDimension]
[), ;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector, (, RealVector, v, ), {, virtualSize, =, v, .]
[., getEntries, (, ), ), ;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector, (, RealVector, v, ), {]
[=, v, ., epsilon, ;, }, public, OpenMapRealVector, (, RealVector, v, ), {, virtualSize, =, v, ., getDimension, (, )]
[;, }, public, OpenMapRealVector, (, RealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new]
[., epsilon, ;, }, public, OpenMapRealVector, (, RealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;, entries]
[=, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for]
[;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;]
[., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for, (, int]
[=, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;, key, <]
[;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;, key, <, virtualSize, ;, key, ++, ), {]
[), ;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;, key, <, virtualSize, ;, key, ++, )]
[=, DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;, key, <, virtualSize, ;, key, ++, ), {, double, value]
[;, for, (, int, key, =, 0, ;, key, <, virtualSize, ;, key, ++, ), {, double, value, =, v]
[;, key, <, virtualSize, ;, key, ++, ), {, double, value, =, v, ., getEntry, (, key, ), ;, if]
[;, key, ++, ), {, double, value, =, v, ., getEntry, (, key, ), ;, if, (, !, isDefaultValue, (]
[<, virtualSize, ;, key, ++, ), {, double, value, =, v, ., getEntry, (, key, ), ;, if, (, !]
[;, key, ++, ), {, double, value, =, v, ., getEntry, (, key, ), ;, if, (, !, isDefaultValue, (]
[), {, double, value, =, v, ., getEntry, (, key, ), ;, if, (, !, isDefaultValue, (, value, ), )]
[++, ), {, double, value, =, v, ., getEntry, (, key, ), ;, if, (, !, isDefaultValue, (, value, )]
[;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key, ,, value, ), ;, }]
[., getEntry, (, key, ), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key]
[), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key, ,, value, ), ;]
[), {, entries, ., put, (, key, ,, value, ), ;, }, }, }, private, OpenIntToDoubleHashMap, getEntries, (, ), {]
[), {, entries, ., put, (, key, ,, value, ), ;, }, }, }, private, OpenIntToDoubleHashMap, getEntries, (, ), {]
[), ), {, entries, ., put, (, key, ,, value, ), ;, }, }, }, private, OpenIntToDoubleHashMap, getEntries, (, )]
[;, }, }, }, private, OpenIntToDoubleHashMap, getEntries, (, ), {, return, entries, ;, }, protected, boolean, isDefaultValue, (, double, value]
[., put, (, key, ,, value, ), ;, }, }, }, private, OpenIntToDoubleHashMap, getEntries, (, ), {, return, entries, ;]
[,, value, ), ;, }, }, }, private, OpenIntToDoubleHashMap, getEntries, (, ), {, return, entries, ;, }, protected, boolean, isDefaultValue]
[), ;, }, }, }, private, OpenIntToDoubleHashMap, getEntries, (, ), {, return, entries, ;, }, protected, boolean, isDefaultValue, (, double]
[;, }, protected, boolean, isDefaultValue, (, double, value, ), {, return, FastMath, ., abs, (, value, ), <, epsilon, ;]
[;, }, @, Override, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[<, epsilon, ;, }, @, Override, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, .]
[., abs, (, value, ), <, epsilon, ;, }, @, Override, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException]
[), <, epsilon, ;, }, @, Override, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v]
[;, }, @, Override, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[;, if, (, v, instanceof, OpenMapRealVector, ), {, return, add, (, (, OpenMapRealVector, ), v, ), ;, }, else, {]
[), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, add, (, (, OpenMapRealVector, ), v, ), ;, }, else]
[., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, add, (, (, OpenMapRealVector, ), v]
[), {, return, add, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., add, (, v]
[instanceof, OpenMapRealVector, ), {, return, add, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., add]
[;, }, else, {, return, super, ., add, (, v, ), ;, }, }, public, OpenMapRealVector, add, (, OpenMapRealVector, v]
[), ;, }, else, {, return, super, ., add, (, v, ), ;, }, }, public, OpenMapRealVector, add, (, OpenMapRealVector]
[), ;, }, else, {, return, super, ., add, (, v, ), ;, }, }, public, OpenMapRealVector, add, (, OpenMapRealVector]
[;, }, }, public, OpenMapRealVector, add, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, )]
[., add, (, v, ), ;, }, }, public, OpenMapRealVector, add, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[), ;, }, }, public, OpenMapRealVector, add, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[;, boolean, copyThis, =, entries, ., size, (, ), >, v, ., entries, ., size, (, ), ;, OpenMapRealVector, res]
[), ;, boolean, copyThis, =, entries, ., size, (, ), >, v, ., entries, ., size, (, ), ;, OpenMapRealVector]
[., getDimension, (, ), ), ;, boolean, copyThis, =, entries, ., size, (, ), >, v, ., entries, ., size]
[;, OpenMapRealVector, res, =, copyThis, ?, this, ., copy, (, ), :, v, ., copy, (, ), ;, Iterator, iter]
[>, v, ., entries, ., size, (, ), ;, OpenMapRealVector, res, =, copyThis, ?, this, ., copy, (, ), :]
[., size, (, ), >, v, ., entries, ., size, (, ), ;, OpenMapRealVector, res, =, copyThis, ?, this, .]
[;, OpenMapRealVector, res, =, copyThis, ?, this, ., copy, (, ), :, v, ., copy, (, ), ;, Iterator, iter]
[., size, (, ), ;, OpenMapRealVector, res, =, copyThis, ?, this, ., copy, (, ), :, v, ., copy, (]
[., entries, ., size, (, ), ;, OpenMapRealVector, res, =, copyThis, ?, this, ., copy, (, ), :, v, .]
[;, Iterator, iter, =, copyThis, ?, v, ., entries, ., iterator, (, ), :, entries, ., iterator, (, ), ;]
[?, this, ., copy, (, ), :, v, ., copy, (, ), ;, Iterator, iter, =, copyThis, ?, v, .]
[:, v, ., copy, (, ), ;, Iterator, iter, =, copyThis, ?, v, ., entries, ., iterator, (, ), :]
[., copy, (, ), :, v, ., copy, (, ), ;, Iterator, iter, =, copyThis, ?, v, ., entries, .]
[;, Iterator, iter, =, copyThis, ?, v, ., entries, ., iterator, (, ), :, entries, ., iterator, (, ), ;]
[., copy, (, ), ;, Iterator, iter, =, copyThis, ?, v, ., entries, ., iterator, (, ), :, entries, .]
[;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :, v, ., entries, ;, while, (, iter, ., hasNext, (, ), )]
[?, v, ., entries, ., iterator, (, ), :, entries, ., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?]
[:, entries, ., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :, v, ., entries, ;, while, (]
[., iterator, (, ), :, entries, ., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :, v, .]
[., entries, ., iterator, (, ), :, entries, ., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :]
[;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :, v, ., entries, ;, while, (, iter, ., hasNext, (, ), )]
[., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :, v, ., entries, ;, while, (, iter, .]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter]
[?, entries, :, v, ., entries, ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (]
[:, v, ., entries, ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter]
[., entries, ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, randomAccess]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, )]
[;, int, key, =, iter, ., key, (, ), ;, if, (, randomAccess, ., containsKey, (, key, ), ), {]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, randomAccess, ., containsKey, (]
[;, if, (, randomAccess, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, randomAccess, ., get]
[., key, (, ), ;, if, (, randomAccess, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key]
[), {, res, ., setEntry, (, key, ,, randomAccess, ., get, (, key, ), +, iter, ., value, (, )]
[., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, randomAccess, ., get, (, key, ), +]
[), ), {, res, ., setEntry, (, key, ,, randomAccess, ., get, (, key, ), +, iter, ., value, (]
[;, }, else, {, res, ., setEntry, (, key, ,, iter, ., value, (, ), ), ;, }, }, return]
[., setEntry, (, key, ,, randomAccess, ., get, (, key, ), +, iter, ., value, (, ), ), ;, }]
[,, randomAccess, ., get, (, key, ), +, iter, ., value, (, ), ), ;, }, else, {, res, .]
[), ;, }, else, {, res, ., setEntry, (, key, ,, iter, ., value, (, ), ), ;, }, }]
[+, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (, key, ,, iter, ., value]
[., get, (, key, ), +, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (]
[), +, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (, key, ,, iter, .]
[), ;, }, else, {, res, ., setEntry, (, key, ,, iter, ., value, (, ), ), ;, }, }]
[., value, (, ), ), ;, }, else, {, res, ., setEntry, (, key, ,, iter, ., value, (, )]
[;, }, }, return, res, ;, }, public, OpenMapRealVector, append, (, OpenMapRealVector, v, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector]
[., setEntry, (, key, ,, iter, ., value, (, ), ), ;, }, }, return, res, ;, }, public, OpenMapRealVector]
[,, iter, ., value, (, ), ), ;, }, }, return, res, ;, }, public, OpenMapRealVector, append, (, OpenMapRealVector, v]
[), ;, }, }, return, res, ;, }, public, OpenMapRealVector, append, (, OpenMapRealVector, v, ), {, OpenMapRealVector, res, =, new]
[., value, (, ), ), ;, }, }, return, res, ;, }, public, OpenMapRealVector, append, (, OpenMapRealVector, v, ), {]
[;, }, public, OpenMapRealVector, append, (, OpenMapRealVector, v, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, v, .]
[;, Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), )]
[,, v, ., getDimension, (, ), ), ;, Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while]
[), ;, Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, )]
[., getDimension, (, ), ), ;, Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (, iter]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (]
[), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), +, virtualSize, ,]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (]
[;, res, ., setEntry, (, iter, ., key, (, ), +, virtualSize, ,, iter, ., value, (, ), ), ;]
[., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), +, virtualSize, ,, iter, ., value]
[;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, append, (, RealVector, v, ), {, if, (, v, instanceof]
[., setEntry, (, iter, ., key, (, ), +, virtualSize, ,, iter, ., value, (, ), ), ;, }, return]
[,, iter, ., value, (, ), ), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, append, (, RealVector]
[+, virtualSize, ,, iter, ., value, (, ), ), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, append]
[., key, (, ), +, virtualSize, ,, iter, ., value, (, ), ), ;, }, return, res, ;, }, @]
[,, iter, ., value, (, ), ), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, append, (, RealVector]
[), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, append, (, RealVector, v, ), {, if, (, v]
[., value, (, ), ), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, append, (, RealVector, v, )]
[;, }, @, Override, public, OpenMapRealVector, append, (, RealVector, v, ), {, if, (, v, instanceof, OpenMapRealVector, ), {, return]
[), {, return, append, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, final, OpenMapRealVector, res, =, new, OpenMapRealVector]
[instanceof, OpenMapRealVector, ), {, return, append, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, final, OpenMapRealVector, res, =]
[;, }, else, {, final, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, v, ., getDimension, (, ), ), ;]
[), ;, }, else, {, final, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, v, ., getDimension, (, ), )]
[), ;, }, else, {, final, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, v, ., getDimension, (, ), )]
[;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {]
[,, v, ., getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension]
[), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, )]
[., getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, )]
[;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize]
[;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), )]
[<, v, ., getDimension, (, ), ;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v]
[;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), )]
[., getDimension, (, ), ;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry]
[), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), ), ;, }, return]
[++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), ), ;, }]
[;, }, return, res, ;, }, }, @, Override, public, OpenMapRealVector, append, (, double, d, ), {, OpenMapRealVector, res, =]
[., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), ), ;, }, return, res, ;, }]
[,, v, ., getEntry, (, i, ), ), ;, }, return, res, ;, }, }, @, Override, public, OpenMapRealVector, append]
[+, virtualSize, ,, v, ., getEntry, (, i, ), ), ;, }, return, res, ;, }, }, @, Override, public]
[,, v, ., getEntry, (, i, ), ), ;, }, return, res, ;, }, }, @, Override, public, OpenMapRealVector, append]
[), ;, }, return, res, ;, }, }, @, Override, public, OpenMapRealVector, append, (, double, d, ), {, OpenMapRealVector, res]
[., getEntry, (, i, ), ), ;, }, return, res, ;, }, }, @, Override, public, OpenMapRealVector, append, (, double]
[), ), ;, }, return, res, ;, }, }, @, Override, public, OpenMapRealVector, append, (, double, d, ), {, OpenMapRealVector]
[;, }, }, @, Override, public, OpenMapRealVector, append, (, double, d, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this]
[;, res, ., setEntry, (, virtualSize, ,, d, ), ;, return, res, ;, }, @, Override, public, OpenMapRealVector, copy, (]
[,, 1, ), ;, res, ., setEntry, (, virtualSize, ,, d, ), ;, return, res, ;, }, @, Override, public]
[), ;, res, ., setEntry, (, virtualSize, ,, d, ), ;, return, res, ;, }, @, Override, public, OpenMapRealVector, copy]
[;, return, res, ;, }, @, Override, public, OpenMapRealVector, copy, (, ), {, return, new, OpenMapRealVector, (, this, ), ;]
[., setEntry, (, virtualSize, ,, d, ), ;, return, res, ;, }, @, Override, public, OpenMapRealVector, copy, (, ), {]
[,, d, ), ;, return, res, ;, }, @, Override, public, OpenMapRealVector, copy, (, ), {, return, new, OpenMapRealVector, (]
[), ;, return, res, ;, }, @, Override, public, OpenMapRealVector, copy, (, ), {, return, new, OpenMapRealVector, (, this, )]
[;, }, @, Override, public, OpenMapRealVector, copy, (, ), {, return, new, OpenMapRealVector, (, this, ), ;, }, @, Deprecated]
[;, }, @, Deprecated, public, double, dotProduct, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, return, dotProduct, (, (, RealVector, )]
[), ;, }, @, Deprecated, public, double, dotProduct, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, return, dotProduct, (, (, RealVector]
[;, }, @, Override, public, OpenMapRealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[), ;, }, @, Override, public, OpenMapRealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension]
[), ;, }, @, Override, public, OpenMapRealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension]
[;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ), ;, final, int, n, =, getDimension, (, ), ;, for, (]
[), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ), ;, final, int, n, =, getDimension, (, ), ;, for]
[., getDimension, (, ), ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ), ;, final, int, n, =, getDimension]
[;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[), ;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (]
[;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,, this, ., getEntry, (, i]
[;, i, ++, ), {, res, ., setEntry, (, i, ,, this, ., getEntry, (, i, ), /, v, .]
[<, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,, this, ., getEntry, (, i, ), /]
[;, i, ++, ), {, res, ., setEntry, (, i, ,, this, ., getEntry, (, i, ), /, v, .]
[), {, res, ., setEntry, (, i, ,, this, ., getEntry, (, i, ), /, v, ., getEntry, (, i]
[++, ), {, res, ., setEntry, (, i, ,, this, ., getEntry, (, i, ), /, v, ., getEntry, (]
[;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[., setEntry, (, i, ,, this, ., getEntry, (, i, ), /, v, ., getEntry, (, i, ), ), ;]
[,, this, ., getEntry, (, i, ), /, v, ., getEntry, (, i, ), ), ;, }, return, res, ;]
[), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[/, v, ., getEntry, (, i, ), ), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, ebeMultiply, (]
[., getEntry, (, i, ), /, v, ., getEntry, (, i, ), ), ;, }, return, res, ;, }, @]
[), /, v, ., getEntry, (, i, ), ), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, ebeMultiply]
[), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[., getEntry, (, i, ), ), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, ebeMultiply, (, RealVector, v]
[), ), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {]
[;, }, @, Override, public, OpenMapRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ), ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while]
[), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ), ;, Iterator, iter, =, entries, ., iterator, (, ), ;]
[., getDimension, (, ), ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ), ;, Iterator, iter, =, entries, .]
[;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter]
[), ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, .]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (]
[;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), *, v, ., getEntry]
[., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, )]
[;, }, if, (, v, ., isNaN, (, ), ||, v, ., isInfinite, (, ), ), {, final, int, n]
[., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), *, v, ., getEntry, (, iter]
[,, iter, ., value, (, ), *, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, }]
[., key, (, ), ,, iter, ., value, (, ), *, v, ., getEntry, (, iter, ., key, (, )]
[), ;, }, if, (, v, ., isNaN, (, ), ||, v, ., isInfinite, (, ), ), {, final, int]
[*, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, }, if, (, v, ., isNaN, (]
[., value, (, ), *, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, }, if, (]
[), ;, }, if, (, v, ., isNaN, (, ), ||, v, ., isInfinite, (, ), ), {, final, int]
[., getEntry, (, iter, ., key, (, ), ), ), ;, }, if, (, v, ., isNaN, (, ), ||]
[), ), ;, }, if, (, v, ., isNaN, (, ), ||, v, ., isInfinite, (, ), ), {, final]
[., key, (, ), ), ), ;, }, if, (, v, ., isNaN, (, ), ||, v, ., isInfinite, (]
[), {, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n]
[||, v, ., isInfinite, (, ), ), {, final, int, n, =, getDimension, (, ), ;, for, (, int, i]
[., isNaN, (, ), ||, v, ., isInfinite, (, ), ), {, final, int, n, =, getDimension, (, ), ;]
[), {, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n]
[., isInfinite, (, ), ), {, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, y, =]
[;, i, <, n, ;, i, ++, ), {, final, double, y, =, v, ., getEntry, (, i, ), ;]
[;, i, ++, ), {, final, double, y, =, v, ., getEntry, (, i, ), ;, if, (, Double, .]
[<, n, ;, i, ++, ), {, final, double, y, =, v, ., getEntry, (, i, ), ;, if, (]
[;, i, ++, ), {, final, double, y, =, v, ., getEntry, (, i, ), ;, if, (, Double, .]
[), {, final, double, y, =, v, ., getEntry, (, i, ), ;, if, (, Double, ., isNaN, (, y]
[++, ), {, final, double, y, =, v, ., getEntry, (, i, ), ;, if, (, Double, ., isNaN, (]
[;, if, (, Double, ., isNaN, (, y, ), ), {, res, ., setEntry, (, i, ,, Double, ., NaN]
[., getEntry, (, i, ), ;, if, (, Double, ., isNaN, (, y, ), ), {, res, ., setEntry, (]
[), ;, if, (, Double, ., isNaN, (, y, ), ), {, res, ., setEntry, (, i, ,, Double, .]
[), {, res, ., setEntry, (, i, ,, Double, ., NaN, ), ;, }, else, if, (, Double, ., isInfinite]
[., isNaN, (, y, ), ), {, res, ., setEntry, (, i, ,, Double, ., NaN, ), ;, }, else]
[), ), {, res, ., setEntry, (, i, ,, Double, ., NaN, ), ;, }, else, if, (, Double, .]
[;, }, else, if, (, Double, ., isInfinite, (, y, ), ), {, final, double, x, =, this, ., getEntry]
[., setEntry, (, i, ,, Double, ., NaN, ), ;, }, else, if, (, Double, ., isInfinite, (, y, )]
[,, Double, ., NaN, ), ;, }, else, if, (, Double, ., isInfinite, (, y, ), ), {, final, double]
[), ;, }, else, if, (, Double, ., isInfinite, (, y, ), ), {, final, double, x, =, this, .]
[., NaN, ), ;, }, else, if, (, Double, ., isInfinite, (, y, ), ), {, final, double, x, =]
[), {, final, double, x, =, this, ., getEntry, (, i, ), ;, res, ., setEntry, (, i, ,, x]
[., isInfinite, (, y, ), ), {, final, double, x, =, this, ., getEntry, (, i, ), ;, res, .]
[), ), {, final, double, x, =, this, ., getEntry, (, i, ), ;, res, ., setEntry, (, i, ,]
[;, res, ., setEntry, (, i, ,, x, *, y, ), ;, }, }, }, return, res, ;, }, @]
[., getEntry, (, i, ), ;, res, ., setEntry, (, i, ,, x, *, y, ), ;, }, }, }]
[), ;, res, ., setEntry, (, i, ,, x, *, y, ), ;, }, }, }, return, res, ;, }]
[;, }, }, }, return, res, ;, }, @, Override, public, OpenMapRealVector, getSubVector, (, int, index, ,, int, n, )]
[., setEntry, (, i, ,, x, *, y, ), ;, }, }, }, return, res, ;, }, @, Override, public]
[,, x, *, y, ), ;, }, }, }, return, res, ;, }, @, Override, public, OpenMapRealVector, getSubVector, (, int]
[), ;, }, }, }, return, res, ;, }, @, Override, public, OpenMapRealVector, getSubVector, (, int, index, ,, int, n]
[*, y, ), ;, }, }, }, return, res, ;, }, @, Override, public, OpenMapRealVector, getSubVector, (, int, index, ,]
[), ;, }, }, }, return, res, ;, }, @, Override, public, OpenMapRealVector, getSubVector, (, int, index, ,, int, n]
[;, }, @, Override, public, OpenMapRealVector, getSubVector, (, int, index, ,, int, n, ), throws, NotPositiveException, ,, OutOfRangeException, {, checkIndex]
[;, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }]
[), ;, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, +, n, -]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, +]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, +, n, -]
[;, }, checkIndex, (, index, +, n, -, 1, ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;]
[,, n, ), ;, }, checkIndex, (, index, +, n, -, 1, ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (]
[., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, +, n, -, 1, ), ;, OpenMapRealVector, res, =, new]
[), ;, }, checkIndex, (, index, +, n, -, 1, ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, )]
[;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;, int, end, =, index, +, n, ;, Iterator, iter, =]
[), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;, int, end, =, index, +, n, ;, Iterator, iter]
[-, 1, ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;, int, end, =, index, +, n, ;]
[+, n, -, 1, ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;, int, end, =, index, +]
[-, 1, ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;, int, end, =, index, +, n, ;]
[), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;, int, end, =, index, +, n, ;, Iterator, iter]
[;, int, end, =, index, +, n, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter]
[), ;, int, end, =, index, +, n, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter]
[+, n, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), )]
[;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, )]
[;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, )]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&]
[;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,]
[., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (]
[), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }, }, return]
[&&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), )]
[>=, index, &&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (]
[&&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), )]
[), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }, }, return]
[<, end, ), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }]
[), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }, }, return]
[;, }, }, return, res, ;, }, @, Override, public, int, getDimension, (, ), {, return, virtualSize, ;, }, public]
[., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }, }, return, res, ;, }]
[,, iter, ., value, (, ), ), ;, }, }, return, res, ;, }, @, Override, public, int, getDimension, (]
[-, index, ,, iter, ., value, (, ), ), ;, }, }, return, res, ;, }, @, Override, public, int]
[,, iter, ., value, (, ), ), ;, }, }, return, res, ;, }, @, Override, public, int, getDimension, (]
[), ;, }, }, return, res, ;, }, @, Override, public, int, getDimension, (, ), {, return, virtualSize, ;, }]
[., value, (, ), ), ;, }, }, return, res, ;, }, @, Override, public, int, getDimension, (, ), {]
[;, }, @, Override, public, int, getDimension, (, ), {, return, virtualSize, ;, }, public, double, getDistance, (, OpenMapRealVector, v]
[;, }, public, double, getDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), )]
[;, Iterator, iter, =, entries, ., iterator, (, ), ;, double, res, =, 0, ;, while, (, iter, ., hasNext]
[), ;, Iterator, iter, =, entries, ., iterator, (, ), ;, double, res, =, 0, ;, while, (, iter, .]
[., getDimension, (, ), ), ;, Iterator, iter, =, entries, ., iterator, (, ), ;, double, res, =, 0, ;]
[;, double, res, =, 0, ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, )]
[., iterator, (, ), ;, double, res, =, 0, ;, while, (, iter, ., hasNext, (, ), ), {, iter]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, double, delta, ;]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, )]
[;, int, key, =, iter, ., key, (, ), ;, double, delta, ;, delta, =, iter, ., value, (, )]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, double, delta, ;, delta, =, iter]
[;, double, delta, ;, delta, =, iter, ., value, (, ), -, v, ., getEntry, (, key, ), ;, res]
[., key, (, ), ;, double, delta, ;, delta, =, iter, ., value, (, ), -, v, ., getEntry, (]
[=, iter, ., value, (, ), -, v, ., getEntry, (, key, ), ;, res, +=, delta, *, delta, ;]
[;, res, +=, delta, *, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;]
[-, v, ., getEntry, (, key, ), ;, res, +=, delta, *, delta, ;, }, iter, =, v, ., getEntries]
[., value, (, ), -, v, ., getEntry, (, key, ), ;, res, +=, delta, *, delta, ;, }, iter]
[;, res, +=, delta, *, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;]
[., getEntry, (, key, ), ;, res, +=, delta, *, delta, ;, }, iter, =, v, ., getEntries, (, )]
[), ;, res, +=, delta, *, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, )]
[+=, delta, *, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (]
[*, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, .]
[;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, .]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, )]
[;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), )]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey]
[;, if, (, !, entries, ., containsKey, (, key, ), ), {, final, double, value, =, iter, ., value, (]
[., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), ), {, final, double, value, =]
[), {, final, double, value, =, iter, ., value, (, ), ;, res, +=, value, *, value, ;, }, }]
[), {, final, double, value, =, iter, ., value, (, ), ;, res, +=, value, *, value, ;, }, }]
[., containsKey, (, key, ), ), {, final, double, value, =, iter, ., value, (, ), ;, res, +=, value]
[), ), {, final, double, value, =, iter, ., value, (, ), ;, res, +=, value, *, value, ;, }]
[;, res, +=, value, *, value, ;, }, }, return, FastMath, ., sqrt, (, res, ), ;, }, @, Override]
[., value, (, ), ;, res, +=, value, *, value, ;, }, }, return, FastMath, ., sqrt, (, res, )]
[+=, value, *, value, ;, }, }, return, FastMath, ., sqrt, (, res, ), ;, }, @, Override, public, double]
[;, }, }, return, FastMath, ., sqrt, (, res, ), ;, }, @, Override, public, double, getDistance, (, RealVector, v]
[*, value, ;, }, }, return, FastMath, ., sqrt, (, res, ), ;, }, @, Override, public, double, getDistance, (]
[;, }, }, return, FastMath, ., sqrt, (, res, ), ;, }, @, Override, public, double, getDistance, (, RealVector, v]
[;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[., sqrt, (, res, ), ;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[), ;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension]
[;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {]
[), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else]
[., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getDistance, (, (, OpenMapRealVector, ), v]
[), {, return, getDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., getDistance, (, v]
[instanceof, OpenMapRealVector, ), {, return, getDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., getDistance]
[;, }, else, {, return, super, ., getDistance, (, v, ), ;, }, }, @, Override, public, double, getEntry, (]
[), ;, }, else, {, return, super, ., getDistance, (, v, ), ;, }, }, @, Override, public, double, getEntry]
[), ;, }, else, {, return, super, ., getDistance, (, v, ), ;, }, }, @, Override, public, double, getEntry]
[;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;]
[., getDistance, (, v, ), ;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {]
[), ;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, checkIndex, (, index, )]
[;, return, entries, ., get, (, index, ), ;, }, public, double, getL1Distance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {]
[), ;, return, entries, ., get, (, index, ), ;, }, public, double, getL1Distance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException]
[;, }, public, double, getL1Distance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), )]
[., get, (, index, ), ;, }, public, double, getL1Distance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v]
[), ;, }, public, double, getL1Distance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, )]
[;, double, max, =, 0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[), ;, double, max, =, 0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, .]
[., getDimension, (, ), ), ;, double, max, =, 0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;]
[;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =, FastMath]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, )]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (, iter]
[;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -, v, ., getEntry, (, iter, .]
[., advance, (, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -, v, .]
[;, max, +=, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[., abs, (, iter, ., value, (, ), -, v, ., getEntry, (, iter, ., key, (, ), ), )]
[), ;, max, +=, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while]
[-, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, max, +=, delta, ;, }, iter, =]
[., value, (, ), -, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, max, +=, delta]
[), ;, max, +=, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while]
[., getEntry, (, iter, ., key, (, ), ), ), ;, max, +=, delta, ;, }, iter, =, v, .]
[), ), ;, max, +=, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;]
[., key, (, ), ), ), ;, max, +=, delta, ;, }, iter, =, v, ., getEntries, (, ), .]
[+=, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, .]
[;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, .]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, )]
[;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), )]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey]
[;, if, (, !, entries, ., containsKey, (, key, ), ), {, double, delta, =, FastMath, ., abs, (, iter]
[., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), ), {, double, delta, =, FastMath]
[), {, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), ), ;, max, +=, FastMath, .]
[), {, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), ), ;, max, +=, FastMath, .]
[., containsKey, (, key, ), ), {, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), )]
[), ), {, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), ), ;, max, +=, FastMath]
[;, max, +=, FastMath, ., abs, (, delta, ), ;, }, }, return, max, ;, }, @, Override, public, double]
[., abs, (, iter, ., value, (, ), ), ;, max, +=, FastMath, ., abs, (, delta, ), ;, }]
[), ;, max, +=, FastMath, ., abs, (, delta, ), ;, }, }, return, max, ;, }, @, Override, public]
[., value, (, ), ), ;, max, +=, FastMath, ., abs, (, delta, ), ;, }, }, return, max, ;]
[+=, FastMath, ., abs, (, delta, ), ;, }, }, return, max, ;, }, @, Override, public, double, getL1Distance, (]
[;, }, }, return, max, ;, }, @, Override, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[., abs, (, delta, ), ;, }, }, return, max, ;, }, @, Override, public, double, getL1Distance, (, RealVector, v]
[), ;, }, }, return, max, ;, }, @, Override, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {]
[;, }, @, Override, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getL1Distance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {]
[), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getL1Distance, (, (, OpenMapRealVector, ), v, ), ;, }, else]
[., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getL1Distance, (, (, OpenMapRealVector, ), v]
[), {, return, getL1Distance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., getL1Distance, (, v]
[instanceof, OpenMapRealVector, ), {, return, getL1Distance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., getL1Distance]
[;, }, else, {, return, super, ., getL1Distance, (, v, ), ;, }, }, private, double, getLInfDistance, (, OpenMapRealVector, v]
[), ;, }, else, {, return, super, ., getL1Distance, (, v, ), ;, }, }, private, double, getLInfDistance, (, OpenMapRealVector]
[), ;, }, else, {, return, super, ., getL1Distance, (, v, ), ;, }, }, private, double, getLInfDistance, (, OpenMapRealVector]
[;, }, }, private, double, getLInfDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, )]
[., getL1Distance, (, v, ), ;, }, }, private, double, getLInfDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[), ;, }, }, private, double, getLInfDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[;, double, max, =, 0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[), ;, double, max, =, 0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, .]
[., getDimension, (, ), ), ;, double, max, =, 0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;]
[;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =, FastMath]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, )]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (, iter]
[;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -, v, ., getEntry, (, iter, .]
[., advance, (, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -, v, .]
[;, if, (, delta, >, max, ), {, max, =, delta, ;, }, }, iter, =, v, ., getEntries, (]
[., abs, (, iter, ., value, (, ), -, v, ., getEntry, (, iter, ., key, (, ), ), )]
[), ;, if, (, delta, >, max, ), {, max, =, delta, ;, }, }, iter, =, v, ., getEntries]
[-, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, if, (, delta, >, max, ), {]
[., value, (, ), -, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, if, (, delta]
[), ;, if, (, delta, >, max, ), {, max, =, delta, ;, }, }, iter, =, v, ., getEntries]
[., getEntry, (, iter, ., key, (, ), ), ), ;, if, (, delta, >, max, ), {, max, =]
[), ), ;, if, (, delta, >, max, ), {, max, =, delta, ;, }, }, iter, =, v, .]
[., key, (, ), ), ), ;, if, (, delta, >, max, ), {, max, =, delta, ;, }, }]
[), {, max, =, delta, ;, }, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;]
[>, max, ), {, max, =, delta, ;, }, }, iter, =, v, ., getEntries, (, ), ., iterator, (]
[), {, max, =, delta, ;, }, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;]
[=, delta, ;, }, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter]
[;, }, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, .]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, )]
[;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), &&]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey]
[;, if, (, !, entries, ., containsKey, (, key, ), &&, iter, ., value, (, ), >, max, ), {]
[., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), &&, iter, ., value, (, )]
[), {, max, =, iter, ., value, (, ), ;, }, }, return, max, ;, }, @, Override, public, double]
[&&, iter, ., value, (, ), >, max, ), {, max, =, iter, ., value, (, ), ;, }, }]
[&&, iter, ., value, (, ), >, max, ), {, max, =, iter, ., value, (, ), ;, }, }]
[., containsKey, (, key, ), &&, iter, ., value, (, ), >, max, ), {, max, =, iter, ., value]
[), &&, iter, ., value, (, ), >, max, ), {, max, =, iter, ., value, (, ), ;, }]
[), {, max, =, iter, ., value, (, ), ;, }, }, return, max, ;, }, @, Override, public, double]
[>, max, ), {, max, =, iter, ., value, (, ), ;, }, }, return, max, ;, }, @, Override]
[., value, (, ), >, max, ), {, max, =, iter, ., value, (, ), ;, }, }, return, max]
[), {, max, =, iter, ., value, (, ), ;, }, }, return, max, ;, }, @, Override, public, double]
[=, iter, ., value, (, ), ;, }, }, return, max, ;, }, @, Override, public, double, getLInfDistance, (, RealVector]
[;, }, }, return, max, ;, }, @, Override, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[., value, (, ), ;, }, }, return, max, ;, }, @, Override, public, double, getLInfDistance, (, RealVector, v, )]
[;, }, @, Override, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getLInfDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {]
[), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getLInfDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else]
[., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getLInfDistance, (, (, OpenMapRealVector, ), v]
[), {, return, getLInfDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., getLInfDistance, (, v]
[instanceof, OpenMapRealVector, ), {, return, getLInfDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., getLInfDistance]
[;, }, else, {, return, super, ., getLInfDistance, (, v, ), ;, }, }, @, Override, public, boolean, isInfinite, (]
[), ;, }, else, {, return, super, ., getLInfDistance, (, v, ), ;, }, }, @, Override, public, boolean, isInfinite]
[), ;, }, else, {, return, super, ., getLInfDistance, (, v, ), ;, }, }, @, Override, public, boolean, isInfinite]
[;, }, }, @, Override, public, boolean, isInfinite, (, ), {, boolean, infiniteFound, =, false, ;, Iterator, iter, =, entries]
[., getLInfDistance, (, v, ), ;, }, }, @, Override, public, boolean, isInfinite, (, ), {, boolean, infiniteFound, =, false]
[), ;, }, }, @, Override, public, boolean, isInfinite, (, ), {, boolean, infiniteFound, =, false, ;, Iterator, iter, =]
[;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, final, double, value, =]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, final, double, value, =, iter, ., value, (, ), ;, if, (]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, final, double, value, =, iter, ., value, (]
[;, final, double, value, =, iter, ., value, (, ), ;, if, (, Double, ., isNaN, (, value, ), )]
[., advance, (, ), ;, final, double, value, =, iter, ., value, (, ), ;, if, (, Double, ., isNaN]
[;, if, (, Double, ., isNaN, (, value, ), ), {, return, false, ;, }, if, (, Double, ., isInfinite]
[., value, (, ), ;, if, (, Double, ., isNaN, (, value, ), ), {, return, false, ;, }, if]
[), {, return, false, ;, }, if, (, Double, ., isInfinite, (, value, ), ), {, infiniteFound, =, true, ;]
[., isNaN, (, value, ), ), {, return, false, ;, }, if, (, Double, ., isInfinite, (, value, ), )]
[), ), {, return, false, ;, }, if, (, Double, ., isInfinite, (, value, ), ), {, infiniteFound, =, true]
[;, }, if, (, Double, ., isInfinite, (, value, ), ), {, infiniteFound, =, true, ;, }, }, return, infiniteFound]
[), {, infiniteFound, =, true, ;, }, }, return, infiniteFound, ;, }, @, Override, public, boolean, isNaN, (, ), {]
[., isInfinite, (, value, ), ), {, infiniteFound, =, true, ;, }, }, return, infiniteFound, ;, }, @, Override, public]
[), ), {, infiniteFound, =, true, ;, }, }, return, infiniteFound, ;, }, @, Override, public, boolean, isNaN, (, )]
[=, true, ;, }, }, return, infiniteFound, ;, }, @, Override, public, boolean, isNaN, (, ), {, Iterator, iter, =]
[;, }, }, return, infiniteFound, ;, }, @, Override, public, boolean, isNaN, (, ), {, Iterator, iter, =, entries, .]
[;, }, @, Override, public, boolean, isNaN, (, ), {, Iterator, iter, =, entries, ., iterator, (, ), ;, while]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, if, (, Double, .]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, if, (, Double, ., isNaN, (, iter, ., value, (, ), )]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, if, (, Double, ., isNaN, (, iter, .]
[;, if, (, Double, ., isNaN, (, iter, ., value, (, ), ), ), {, return, true, ;, }, }]
[., advance, (, ), ;, if, (, Double, ., isNaN, (, iter, ., value, (, ), ), ), {, return]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, OpenMapRealVector, mapAdd, (, double, d, )]
[., isNaN, (, iter, ., value, (, ), ), ), {, return, true, ;, }, }, return, false, ;, }]
[), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, OpenMapRealVector, mapAdd, (, double, d]
[., value, (, ), ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, OpenMapRealVector]
[;, }, }, return, false, ;, }, @, Override, public, OpenMapRealVector, mapAdd, (, double, d, ), {, return, copy, (]
[;, }, @, Override, public, OpenMapRealVector, mapAdd, (, double, d, ), {, return, copy, (, ), ., mapAddToSelf, (, d]
[;, }, @, Override, public, OpenMapRealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i]
[., mapAddToSelf, (, d, ), ;, }, @, Override, public, OpenMapRealVector, mapAddToSelf, (, double, d, ), {, for, (, int]
[), ;, }, @, Override, public, OpenMapRealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;]
[;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, getEntry, (, i, ), +, d, )]
[;, i, ++, ), {, setEntry, (, i, ,, getEntry, (, i, ), +, d, ), ;, }, return, this]
[<, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, getEntry, (, i, ), +, d, ), ;, }]
[;, i, ++, ), {, setEntry, (, i, ,, getEntry, (, i, ), +, d, ), ;, }, return, this]
[), {, setEntry, (, i, ,, getEntry, (, i, ), +, d, ), ;, }, return, this, ;, }, @]
[++, ), {, setEntry, (, i, ,, getEntry, (, i, ), +, d, ), ;, }, return, this, ;, }]
[;, }, return, this, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException]
[,, getEntry, (, i, ), +, d, ), ;, }, return, this, ;, }, @, Override, public, void, setEntry, (]
[), ;, }, return, this, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws]
[+, d, ), ;, }, return, this, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value]
[), +, d, ), ;, }, return, this, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double]
[), ;, }, return, this, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws]
[;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException, {, checkIndex, (, index]
[;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, index, ,, value, ), ;, }]
[), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, index, ,, value, ), ;]
[), {, entries, ., put, (, index, ,, value, ), ;, }, else, if, (, entries, ., containsKey, (, index]
[), {, entries, ., put, (, index, ,, value, ), ;, }, else, if, (, entries, ., containsKey, (, index]
[), ), {, entries, ., put, (, index, ,, value, ), ;, }, else, if, (, entries, ., containsKey, (]
[;, }, else, if, (, entries, ., containsKey, (, index, ), ), {, entries, ., remove, (, index, ), ;]
[., put, (, index, ,, value, ), ;, }, else, if, (, entries, ., containsKey, (, index, ), ), {]
[,, value, ), ;, }, else, if, (, entries, ., containsKey, (, index, ), ), {, entries, ., remove, (]
[), ;, }, else, if, (, entries, ., containsKey, (, index, ), ), {, entries, ., remove, (, index, )]
[), {, entries, ., remove, (, index, ), ;, }, }, @, Override, public, void, setSubVector, (, int, index, ,]
[., containsKey, (, index, ), ), {, entries, ., remove, (, index, ), ;, }, }, @, Override, public, void]
[), ), {, entries, ., remove, (, index, ), ;, }, }, @, Override, public, void, setSubVector, (, int, index]
[;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, checkIndex, (]
[., remove, (, index, ), ;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, )]
[), ;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, checkIndex]
[;, checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, for, (, int, i, =, 0]
[), ;, checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {]
[), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, )]
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i]
[+, v, ., getDimension, (, ), -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, v]
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i]
[., getDimension, (, ), -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension]
[), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, )]
[;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {, setEntry, (, i, +, index, ,, v]
[;, i, ++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry, (, i, ), ), ;, }]
[<, v, ., getDimension, (, ), ;, i, ++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry]
[;, i, ++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry, (, i, ), ), ;, }]
[., getDimension, (, ), ;, i, ++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry, (, i]
[), {, setEntry, (, i, +, index, ,, v, ., getEntry, (, i, ), ), ;, }, }, @, Override]
[++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry, (, i, ), ), ;, }, }, @]
[;, }, }, @, Override, public, void, set, (, double, value, ), {, for, (, int, i, =, 0, ;]
[,, v, ., getEntry, (, i, ), ), ;, }, }, @, Override, public, void, set, (, double, value, )]
[+, index, ,, v, ., getEntry, (, i, ), ), ;, }, }, @, Override, public, void, set, (, double]
[,, v, ., getEntry, (, i, ), ), ;, }, }, @, Override, public, void, set, (, double, value, )]
[), ;, }, }, @, Override, public, void, set, (, double, value, ), {, for, (, int, i, =, 0]
[., getEntry, (, i, ), ), ;, }, }, @, Override, public, void, set, (, double, value, ), {, for]
[), ), ;, }, }, @, Override, public, void, set, (, double, value, ), {, for, (, int, i, =]
[;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, value, ), ;, }, }, public, OpenMapRealVector]
[;, i, ++, ), {, setEntry, (, i, ,, value, ), ;, }, }, public, OpenMapRealVector, subtract, (, OpenMapRealVector, v]
[<, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, value, ), ;, }, }, public, OpenMapRealVector, subtract, (]
[;, i, ++, ), {, setEntry, (, i, ,, value, ), ;, }, }, public, OpenMapRealVector, subtract, (, OpenMapRealVector, v]
[), {, setEntry, (, i, ,, value, ), ;, }, }, public, OpenMapRealVector, subtract, (, OpenMapRealVector, v, ), throws, DimensionMismatchException]
[++, ), {, setEntry, (, i, ,, value, ), ;, }, }, public, OpenMapRealVector, subtract, (, OpenMapRealVector, v, ), throws]
[;, }, }, public, OpenMapRealVector, subtract, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, )]
[,, value, ), ;, }, }, public, OpenMapRealVector, subtract, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, .]
[), ;, }, }, public, OpenMapRealVector, subtract, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[;, OpenMapRealVector, res, =, copy, (, ), ;, Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, )]
[), ;, OpenMapRealVector, res, =, copy, (, ), ;, Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (]
[., getDimension, (, ), ), ;, OpenMapRealVector, res, =, copy, (, ), ;, Iterator, iter, =, v, ., getEntries, (]
[;, Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, .]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, entries]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, )]
[;, int, key, =, iter, ., key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, entries, ., containsKey, (]
[;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get]
[., key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key]
[), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), -, iter, ., value, (, )]
[., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), -]
[), ), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), -, iter, ., value, (]
[;, }, else, {, res, ., setEntry, (, key, ,, -, iter, ., value, (, ), ), ;, }, }]
[., setEntry, (, key, ,, entries, ., get, (, key, ), -, iter, ., value, (, ), ), ;, }]
[,, entries, ., get, (, key, ), -, iter, ., value, (, ), ), ;, }, else, {, res, .]
[), ;, }, else, {, res, ., setEntry, (, key, ,, -, iter, ., value, (, ), ), ;, }]
[-, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (, key, ,, -, iter, .]
[., get, (, key, ), -, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (]
[), -, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (, key, ,, -, iter]
[), ;, }, else, {, res, ., setEntry, (, key, ,, -, iter, ., value, (, ), ), ;, }]
[., value, (, ), ), ;, }, else, {, res, ., setEntry, (, key, ,, -, iter, ., value, (]
[;, }, }, return, res, ;, }, @, Override, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[., setEntry, (, key, ,, -, iter, ., value, (, ), ), ;, }, }, return, res, ;, }, @]
[,, -, iter, ., value, (, ), ), ;, }, }, return, res, ;, }, @, Override, public, RealVector, subtract]
[), ;, }, }, return, res, ;, }, @, Override, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {]
[), ;, }, }, return, res, ;, }, @, Override, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {]
[., value, (, ), ), ;, }, }, return, res, ;, }, @, Override, public, RealVector, subtract, (, RealVector, v]
[;, }, @, Override, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[;, if, (, v, instanceof, OpenMapRealVector, ), {, return, subtract, (, (, OpenMapRealVector, ), v, ), ;, }, else, {]
[), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, subtract, (, (, OpenMapRealVector, ), v, ), ;, }, else]
[., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, subtract, (, (, OpenMapRealVector, ), v]
[), {, return, subtract, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., subtract, (, v]
[instanceof, OpenMapRealVector, ), {, return, subtract, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., subtract]
[;, }, else, {, return, super, ., subtract, (, v, ), ;, }, }, @, Override, public, OpenMapRealVector, unitVector, (]
[), ;, }, else, {, return, super, ., subtract, (, v, ), ;, }, }, @, Override, public, OpenMapRealVector, unitVector]
[), ;, }, else, {, return, super, ., subtract, (, v, ), ;, }, }, @, Override, public, OpenMapRealVector, unitVector]
[;, }, }, @, Override, public, OpenMapRealVector, unitVector, (, ), throws, MathArithmeticException, {, OpenMapRealVector, res, =, copy, (, ), ;]
[., subtract, (, v, ), ;, }, }, @, Override, public, OpenMapRealVector, unitVector, (, ), throws, MathArithmeticException, {, OpenMapRealVector, res]
[), ;, }, }, @, Override, public, OpenMapRealVector, unitVector, (, ), throws, MathArithmeticException, {, OpenMapRealVector, res, =, copy, (, )]
[;, res, ., unitize, (, ), ;, return, res, ;, }, @, Override, public, void, unitize, (, ), throws, MathArithmeticException]
[;, return, res, ;, }, @, Override, public, void, unitize, (, ), throws, MathArithmeticException, {, double, norm, =, getNorm, (]
[., unitize, (, ), ;, return, res, ;, }, @, Override, public, void, unitize, (, ), throws, MathArithmeticException, {, double]
[;, }, @, Override, public, void, unitize, (, ), throws, MathArithmeticException, {, double, norm, =, getNorm, (, ), ;, if]
[;, if, (, isDefaultValue, (, norm, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, Iterator]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, Iterator, iter, =, entries, ., iterator, (, )]
[), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, Iterator, iter, =, entries, ., iterator, (]
[;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), )]
[., ZERO_NORM, ), ;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,, iter, .]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (]
[;, entries, ., put, (, iter, ., key, (, ), ,, iter, ., value, (, ), /, norm, ), ;]
[., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,, iter, ., value, (, )]
[;, }, }, @, Override, public, double, [, ], toArray, (, ), {, double, [, ], res, =, new, double]
[., put, (, iter, ., key, (, ), ,, iter, ., value, (, ), /, norm, ), ;, }, }]
[,, iter, ., value, (, ), /, norm, ), ;, }, }, @, Override, public, double, [, ], toArray, (]
[., key, (, ), ,, iter, ., value, (, ), /, norm, ), ;, }, }, @, Override, public, double]
[), ;, }, }, @, Override, public, double, [, ], toArray, (, ), {, double, [, ], res, =, new]
[/, norm, ), ;, }, }, @, Override, public, double, [, ], toArray, (, ), {, double, [, ], res]
[., value, (, ), /, norm, ), ;, }, }, @, Override, public, double, [, ], toArray, (, ), {]
[), ;, }, }, @, Override, public, double, [, ], toArray, (, ), {, double, [, ], res, =, new]
[;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter]
[], ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, [, iter, .]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, res, [, iter, ., key, (, ), ], =, iter, ., value]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, [, iter, ., key, (, ), ]]
[;, res, [, iter, ., key, (, ), ], =, iter, ., value, (, ), ;, }, return, res, ;]
[., advance, (, ), ;, res, [, iter, ., key, (, ), ], =, iter, ., value, (, ), ;]
[=, iter, ., value, (, ), ;, }, return, res, ;, }, @, Override, public, int, hashCode, (, ), {]
[[, iter, ., key, (, ), ], =, iter, ., value, (, ), ;, }, return, res, ;, }, @]
[], =, iter, ., value, (, ), ;, }, return, res, ;, }, @, Override, public, int, hashCode, (, )]
[., key, (, ), ], =, iter, ., value, (, ), ;, }, return, res, ;, }, @, Override, public]
[;, }, return, res, ;, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;]
[., value, (, ), ;, }, return, res, ;, }, @, Override, public, int, hashCode, (, ), {, final, int]
[;, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1]
[;, int, result, =, 1, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =]
[;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =, prime, *, result, +, (]
[=, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^]
[;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[., doubleToLongBits, (, epsilon, ), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (, temp]
[), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32]
[=, prime, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, result, =, prime, *]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, result, =]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, result, =, prime, *]
[;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[), ;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while]
[^, (, temp, >, >, >, 32, ), ), ;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter]
[), ;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while]
[), ), ;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;]
[>, >, >, 32, ), ), ;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =, entries, .]
[), ), ;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;]
[=, prime, *, result, +, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, .]
[;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter]
[+, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), )]
[*, result, +, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (]
[+, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), )]
[;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, temp, =, Double, .]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, temp, =, Double, ., doubleToLongBits, (, iter, ., value, (, ), )]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, temp, =, Double, ., doubleToLongBits, (, iter, .]
[;, temp, =, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =, prime, *, result, +]
[., advance, (, ), ;, temp, =, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =]
[=, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =, prime, *, result, +, (, int]
[;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, 32, ), )]
[., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =, prime, *, result, +, (, int, ), (]
[), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, 32, )]
[., value, (, ), ), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (, temp]
[=, prime, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, 32, ), ), ;, }]
[;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[+, (, int, ), (, temp, ^, (, temp, >, >, 32, ), ), ;, }, return, result, ;, }]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, 32, ), ), ;, }, return, result]
[+, (, int, ), (, temp, ^, (, temp, >, >, 32, ), ), ;, }, return, result, ;, }]
[;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[), ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this]
[^, (, temp, >, >, 32, ), ), ;, }, return, result, ;, }, @, Override, public, boolean, equals, (]
[), ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this]
[), ), ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[>, >, 32, ), ), ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, )]
[), ), ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, OpenMapRealVector, ), ), {, return, false, ;, }]
[==, obj, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, OpenMapRealVector, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, OpenMapRealVector, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, OpenMapRealVector, ), ), {, return, false, ;, }, OpenMapRealVector, other, =, (]
[), {, return, false, ;, }, OpenMapRealVector, other, =, (, OpenMapRealVector, ), obj, ;, if, (, virtualSize, !=, other, .]
[), {, return, false, ;, }, OpenMapRealVector, other, =, (, OpenMapRealVector, ), obj, ;, if, (, virtualSize, !=, other, .]
[), ), {, return, false, ;, }, OpenMapRealVector, other, =, (, OpenMapRealVector, ), obj, ;, if, (, virtualSize, !=, other]
[instanceof, OpenMapRealVector, ), ), {, return, false, ;, }, OpenMapRealVector, other, =, (, OpenMapRealVector, ), obj, ;, if, (, virtualSize]
[;, }, OpenMapRealVector, other, =, (, OpenMapRealVector, ), obj, ;, if, (, virtualSize, !=, other, ., virtualSize, ), {, return]
[;, if, (, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, if, (, Double, ., doubleToLongBits, (]
[;, if, (, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, if, (, Double, ., doubleToLongBits, (]
[), {, return, false, ;, }, if, (, Double, ., doubleToLongBits, (, epsilon, ), !=, Double, ., doubleToLongBits, (, other]
[!=, other, ., virtualSize, ), {, return, false, ;, }, if, (, Double, ., doubleToLongBits, (, epsilon, ), !=, Double]
[), {, return, false, ;, }, if, (, Double, ., doubleToLongBits, (, epsilon, ), !=, Double, ., doubleToLongBits, (, other]
[., virtualSize, ), {, return, false, ;, }, if, (, Double, ., doubleToLongBits, (, epsilon, ), !=, Double, ., doubleToLongBits]
[;, }, if, (, Double, ., doubleToLongBits, (, epsilon, ), !=, Double, ., doubleToLongBits, (, other, ., epsilon, ), )]
[), {, return, false, ;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[!=, Double, ., doubleToLongBits, (, other, ., epsilon, ), ), {, return, false, ;, }, Iterator, iter, =, entries, .]
[., doubleToLongBits, (, epsilon, ), !=, Double, ., doubleToLongBits, (, other, ., epsilon, ), ), {, return, false, ;, }]
[), !=, Double, ., doubleToLongBits, (, other, ., epsilon, ), ), {, return, false, ;, }, Iterator, iter, =, entries]
[), {, return, false, ;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[., doubleToLongBits, (, other, ., epsilon, ), ), {, return, false, ;, }, Iterator, iter, =, entries, ., iterator, (]
[), ), {, return, false, ;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, .]
[., epsilon, ), ), {, return, false, ;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, test, =, other]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, double, test, =, other, ., getEntry, (, iter, ., key, (, )]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, test, =, other, ., getEntry, (, iter]
[;, double, test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (, Double, ., doubleToLongBits]
[., advance, (, ), ;, double, test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if]
[;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (, iter, ., value, (, ), )]
[., getEntry, (, iter, ., key, (, ), ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double]
[), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (, iter, ., value, (, )]
[., key, (, ), ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (, iter]
[), {, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;, while]
[!=, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }, iter, =]
[., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ), {, return, false]
[), !=, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }, iter]
[), {, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;, while]
[., doubleToLongBits, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }, iter, =, other, .]
[), ), {, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;]
[., value, (, ), ), ), {, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), .]
[;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext]
[=, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, test, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, .]
[), {, iter, ., advance, (, ), ;, double, test, =, iter, ., value, (, ), ;, if, (, Double]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, test, =, iter, ., value, (, )]
[;, double, test, =, iter, ., value, (, ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double]
[., advance, (, ), ;, double, test, =, iter, ., value, (, ), ;, if, (, Double, ., doubleToLongBits, (]
[;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (, getEntry, (, iter, ., key, (]
[., value, (, ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (, getEntry, (]
[), {, return, false, ;, }, }, return, true, ;, }, public, double, getSparsity, (, ), {, return, (, double]
[!=, Double, ., doubleToLongBits, (, getEntry, (, iter, ., key, (, ), ), ), ), {, return, false, ;, }]
[., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (, getEntry, (, iter, ., key, (, ), ), ), )]
[), !=, Double, ., doubleToLongBits, (, getEntry, (, iter, ., key, (, ), ), ), ), {, return, false, ;]
[), {, return, false, ;, }, }, return, true, ;, }, public, double, getSparsity, (, ), {, return, (, double]
[., doubleToLongBits, (, getEntry, (, iter, ., key, (, ), ), ), ), {, return, false, ;, }, }, return]
[), ), {, return, false, ;, }, }, return, true, ;, }, public, double, getSparsity, (, ), {, return, (]
[), ), ), {, return, false, ;, }, }, return, true, ;, }, public, double, getSparsity, (, ), {, return]
[., key, (, ), ), ), ), {, return, false, ;, }, }, return, true, ;, }, public, double, getSparsity]
[;, }, }, return, true, ;, }, public, double, getSparsity, (, ), {, return, (, double, ), entries, ., size]
[;, }, public, double, getSparsity, (, ), {, return, (, double, ), entries, ., size, (, ), /, (, double]
[;, }, @, Override, public, java, ., util, ., Iterator, <, Entry, >, sparseIterator, (, ), {, return, new, OpenMapSparseIterator]
[/, (, double, ), getDimension, (, ), ;, }, @, Override, public, java, ., util, ., Iterator, <, Entry, >]
[/, (, double, ), getDimension, (, ), ;, }, @, Override, public, java, ., util, ., Iterator, <, Entry, >]
[., size, (, ), /, (, double, ), getDimension, (, ), ;, }, @, Override, public, java, ., util, .]
[;, }, @, Override, public, java, ., util, ., Iterator, <, Entry, >, sparseIterator, (, ), {, return, new, OpenMapSparseIterator]
[;, }, @, Override, public, java, ., util, ., Iterator, <, Entry, >, sparseIterator, (, ), {, return, new, OpenMapSparseIterator]
[;, }, protected, class, OpenMapEntry, extends, Entry, {, private, final, Iterator, iter, ;, protected, OpenMapEntry, (, Iterator, iter, ), {]
[=, iter, ;, }, @, Override, public, double, getValue, (, ), {, return, iter, ., value, (, ), ;, }]
[., iter, =, iter, ;, }, @, Override, public, double, getValue, (, ), {, return, iter, ., value, (, )]
[;, }, @, Override, public, double, getValue, (, ), {, return, iter, ., value, (, ), ;, }, @, Override]
[;, }, @, Override, public, void, setValue, (, double, value, ), {, entries, ., put, (, iter, ., key, (]
[., value, (, ), ;, }, @, Override, public, void, setValue, (, double, value, ), {, entries, ., put, (]
[;, }, @, Override, public, int, getIndex, (, ), {, return, iter, ., key, (, ), ;, }, }, protected]
[., put, (, iter, ., key, (, ), ,, value, ), ;, }, @, Override, public, int, getIndex, (, )]
[,, value, ), ;, }, @, Override, public, int, getIndex, (, ), {, return, iter, ., key, (, ), ;]
[., key, (, ), ,, value, ), ;, }, @, Override, public, int, getIndex, (, ), {, return, iter, .]
[), ;, }, @, Override, public, int, getIndex, (, ), {, return, iter, ., key, (, ), ;, }, }]
[;, }, }, protected, class, OpenMapSparseIterator, implements, java, ., util, ., Iterator, <, Entry, >, {, private, final, Iterator, iter]
[., key, (, ), ;, }, }, protected, class, OpenMapSparseIterator, implements, java, ., util, ., Iterator, <, Entry, >, {]
[=, entries, ., iterator, (, ), ;, current, =, new, OpenMapEntry, (, iter, ), ;, }, public, boolean, hasNext, (]
[;, current, =, new, OpenMapEntry, (, iter, ), ;, }, public, boolean, hasNext, (, ), {, return, iter, ., hasNext]
[., iterator, (, ), ;, current, =, new, OpenMapEntry, (, iter, ), ;, }, public, boolean, hasNext, (, ), {]
[=, new, OpenMapEntry, (, iter, ), ;, }, public, boolean, hasNext, (, ), {, return, iter, ., hasNext, (, )]
[;, }, public, boolean, hasNext, (, ), {, return, iter, ., hasNext, (, ), ;, }, public, Entry, next, (]
[), ;, }, public, boolean, hasNext, (, ), {, return, iter, ., hasNext, (, ), ;, }, public, Entry, next]
[;, }, public, Entry, next, (, ), {, iter, ., advance, (, ), ;, return, current, ;, }, public, void]
[., hasNext, (, ), ;, }, public, Entry, next, (, ), {, iter, ., advance, (, ), ;, return, current]
[;, return, current, ;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "Not supported", ), ;, }, }]
[., advance, (, ), ;, return, current, ;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "Not supported"]
[;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "Not supported", ), ;, }, }, }]
[;, }, }, }]
[), ;, }, }, }]
