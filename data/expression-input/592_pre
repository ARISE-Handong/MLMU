[., Name, ,, NameReferenceGraph, ., Reference, >, implements, DefinitionProvider, {, private, final, Multimap, <, Node, ,, Name, >, referenceMap, =]
[., Name, ,, NameReferenceGraph, ., Reference, >, implements, DefinitionProvider, {, private, final, Multimap, <, Node, ,, Name, >, referenceMap, =]
[,, Name, >, referenceMap, =, HashMultimap, ., create, (, ), ;, private, Map, <, String, ,, Name, >, nameMap, =]
[,, Name, >, referenceMap, =, HashMultimap, ., create, (, ), ;, private, Map, <, String, ,, Name, >, nameMap, =]
[Name, MAIN, ;, final, Name, WINDOW, ;, final, AbstractCompiler, compiler, ;, public, NameReferenceGraph, (, AbstractCompiler, compiler, ), {, super, (]
[;, final, Name, WINDOW, ;, final, AbstractCompiler, compiler, ;, public, NameReferenceGraph, (, AbstractCompiler, compiler, ), {, super, (, true, ,]
[WINDOW, ;, final, AbstractCompiler, compiler, ;, public, NameReferenceGraph, (, AbstractCompiler, compiler, ), {, super, (, true, ,, true, ), ;]
[WINDOW, ;, final, AbstractCompiler, compiler, ;, public, NameReferenceGraph, (, AbstractCompiler, compiler, ), {, super, (, true, ,, true, ), ;]
[compiler, ;, public, NameReferenceGraph, (, AbstractCompiler, compiler, ), {, super, (, true, ,, true, ), ;, this, ., compiler, =]
[public, NameReferenceGraph, (, AbstractCompiler, compiler, ), {, super, (, true, ,, true, ), ;, this, ., compiler, =, compiler, ;]
[(, AbstractCompiler, compiler, ), {, super, (, true, ,, true, ), ;, this, ., compiler, =, compiler, ;, UNKNOWN, =]
[), {, super, (, true, ,, true, ), ;, this, ., compiler, =, compiler, ;, UNKNOWN, =, new, Name, (]
[super, (, true, ,, true, ), ;, this, ., compiler, =, compiler, ;, UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,]
[,, true, ), ;, this, ., compiler, =, compiler, ;, UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;]
[,, true, ), ;, this, ., compiler, =, compiler, ;, UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;]
[this, ., compiler, =, compiler, ;, UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;, UNKNOWN, ., isAliased, =]
[compiler, =, compiler, ;, UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;, UNKNOWN, ., isAliased, =, true, ;]
[compiler, =, compiler, ;, UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;, UNKNOWN, ., isAliased, =, true, ;]
[UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;, UNKNOWN, ., isAliased, =, true, ;, UNKNOWN, ., type, =]
[UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;, UNKNOWN, ., isAliased, =, true, ;, UNKNOWN, ., type, =]
[UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;, UNKNOWN, ., isAliased, =, true, ;, UNKNOWN, ., type, =]
[), ;, UNKNOWN, ., isAliased, =, true, ;, UNKNOWN, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[), ;, UNKNOWN, ., isAliased, =, true, ;, UNKNOWN, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[=, true, ;, UNKNOWN, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;]
[=, true, ;, UNKNOWN, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;]
[., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, this, ., createNode, (]
[compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, this, ., createNode, (, UNKNOWN, ), ;]
[getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, this, ., createNode, (, UNKNOWN, ), ;, MAIN, =]
[., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, this, ., createNode, (, UNKNOWN, ), ;, MAIN, =, new, Name, (]
[(, JSTypeNative, ., NO_TYPE, ), ;, this, ., createNode, (, UNKNOWN, ), ;, MAIN, =, new, Name, (, "{Global Main}", ,]
[NO_TYPE, ), ;, this, ., createNode, (, UNKNOWN, ), ;, MAIN, =, new, Name, (, "{Global Main}", ,, true, ), ;]
[NO_TYPE, ), ;, this, ., createNode, (, UNKNOWN, ), ;, MAIN, =, new, Name, (, "{Global Main}", ,, true, ), ;]
[., createNode, (, UNKNOWN, ), ;, MAIN, =, new, Name, (, "{Global Main}", ,, true, ), ;, this, ., createNode, (]
[UNKNOWN, ), ;, MAIN, =, new, Name, (, "{Global Main}", ,, true, ), ;, this, ., createNode, (, MAIN, ), ;]
[;, MAIN, =, new, Name, (, "{Global Main}", ,, true, ), ;, this, ., createNode, (, MAIN, ), ;, WINDOW, =]
[new, Name, (, "{Global Main}", ,, true, ), ;, this, ., createNode, (, MAIN, ), ;, WINDOW, =, new, Name, (]
[(, "{Global Main}", ,, true, ), ;, this, ., createNode, (, MAIN, ), ;, WINDOW, =, new, Name, (, "window", ,]
[true, ), ;, this, ., createNode, (, MAIN, ), ;, WINDOW, =, new, Name, (, "window", ,, true, ), ;]
[true, ), ;, this, ., createNode, (, MAIN, ), ;, WINDOW, =, new, Name, (, "window", ,, true, ), ;]
[., createNode, (, MAIN, ), ;, WINDOW, =, new, Name, (, "window", ,, true, ), ;, this, ., createNode, (]
[createNode, (, WINDOW, ), ;, }, public, Name, defineNameIfNotExists, (, String, name, ,, boolean, isExtern, ), {, Name, symbol, =]
[;, }, public, Name, defineNameIfNotExists, (, String, name, ,, boolean, isExtern, ), {, Name, symbol, =, null, ;, if, (]
[;, }, public, Name, defineNameIfNotExists, (, String, name, ,, boolean, isExtern, ), {, Name, symbol, =, null, ;, if, (]
[defineNameIfNotExists, (, String, name, ,, boolean, isExtern, ), {, Name, symbol, =, null, ;, if, (, nameMap, ., containsKey, (]
[,, boolean, isExtern, ), {, Name, symbol, =, null, ;, if, (, nameMap, ., containsKey, (, name, ), ), {]
[isExtern, ), {, Name, symbol, =, null, ;, if, (, nameMap, ., containsKey, (, name, ), ), {, symbol, =]
[isExtern, ), {, Name, symbol, =, null, ;, if, (, nameMap, ., containsKey, (, name, ), ), {, symbol, =]
[symbol, =, null, ;, if, (, nameMap, ., containsKey, (, name, ), ), {, symbol, =, nameMap, ., get, (]
[nameMap, ., containsKey, (, name, ), ), {, symbol, =, nameMap, ., get, (, name, ), ;, }, else, {]
[containsKey, (, name, ), ), {, symbol, =, nameMap, ., get, (, name, ), ;, }, else, {, symbol, =]
[), ), {, symbol, =, nameMap, ., get, (, name, ), ;, }, else, {, symbol, =, new, Name, (]
[{, symbol, =, nameMap, ., get, (, name, ), ;, }, else, {, symbol, =, new, Name, (, name, ,]
[nameMap, ., get, (, name, ), ;, }, else, {, symbol, =, new, Name, (, name, ,, isExtern, ), ;]
[nameMap, ., get, (, name, ), ;, }, else, {, symbol, =, new, Name, (, name, ,, isExtern, ), ;]
[name, ), ;, }, else, {, symbol, =, new, Name, (, name, ,, isExtern, ), ;, nameMap, ., put, (]
[;, }, else, {, symbol, =, new, Name, (, name, ,, isExtern, ), ;, nameMap, ., put, (, name, ,]
[{, symbol, =, new, Name, (, name, ,, isExtern, ), ;, nameMap, ., put, (, name, ,, symbol, ), ;]
[=, new, Name, (, name, ,, isExtern, ), ;, nameMap, ., put, (, name, ,, symbol, ), ;, createNode, (]
[,, isExtern, ), ;, nameMap, ., put, (, name, ,, symbol, ), ;, createNode, (, symbol, ), ;, }, return]
[(, symbol, ), ;, }, return, symbol, ;, }, public, List, <, Name, >, getReferencesAt, (, Node, site, ), {]
[(, symbol, ), ;, }, return, symbol, ;, }, public, List, <, Name, >, getReferencesAt, (, Node, site, ), {]
[}, return, symbol, ;, }, public, List, <, Name, >, getReferencesAt, (, Node, site, ), {, Preconditions, ., checkArgument, (]
[}, return, symbol, ;, }, public, List, <, Name, >, getReferencesAt, (, Node, site, ), {, Preconditions, ., checkArgument, (]
[}, return, symbol, ;, }, public, List, <, Name, >, getReferencesAt, (, Node, site, ), {, Preconditions, ., checkArgument, (]
[List, <, Name, >, getReferencesAt, (, Node, site, ), {, Preconditions, ., checkArgument, (, site, ., isGetProp, (, ), ||]
[List, <, Name, >, getReferencesAt, (, Node, site, ), {, Preconditions, ., checkArgument, (, site, ., isGetProp, (, ), ||]
[(, site, ., isGetProp, (, ), ||, site, ., isName, (, ), ), ;, List, <, Name, >, result, =]
[;, List, <, Name, >, result, =, new, ArrayList, <, Name, >, (, ), ;, for, (, Name, target, :]
[;, List, <, Name, >, result, =, new, ArrayList, <, Name, >, (, ), ;, for, (, Name, target, :]
[>, result, =, new, ArrayList, <, Name, >, (, ), ;, for, (, Name, target, :, referenceMap, ., get, (]
[ArrayList, <, Name, >, (, ), ;, for, (, Name, target, :, referenceMap, ., get, (, site, ), ), {]
[ArrayList, <, Name, >, (, ), ;, for, (, Name, target, :, referenceMap, ., get, (, site, ), ), {]
[(, ), ;, for, (, Name, target, :, referenceMap, ., get, (, site, ), ), {, result, ., add, (]
[Name, target, :, referenceMap, ., get, (, site, ), ), {, result, ., add, (, target, ), ;, }, return]
[}, @, Override, public, Collection, <, Definition, >, getDefinitionsReferencedAt, (, Node, useSite, ), {, List, <, Name, >, nameRefs, =]
[Override, public, Collection, <, Definition, >, getDefinitionsReferencedAt, (, Node, useSite, ), {, List, <, Name, >, nameRefs, =, getReferencesAt, (]
[>, getDefinitionsReferencedAt, (, Node, useSite, ), {, List, <, Name, >, nameRefs, =, getReferencesAt, (, useSite, ), ;, if, (]
[>, getDefinitionsReferencedAt, (, Node, useSite, ), {, List, <, Name, >, nameRefs, =, getReferencesAt, (, useSite, ), ;, if, (]
[<, Name, >, nameRefs, =, getReferencesAt, (, useSite, ), ;, if, (, nameRefs, ., isEmpty, (, ), ), {, return]
[;, if, (, nameRefs, ., isEmpty, (, ), ), {, return, null, ;, }, List, <, Definition, >, result, =]
[;, if, (, nameRefs, ., isEmpty, (, ), ), {, return, null, ;, }, List, <, Definition, >, result, =]
[null, ;, }, List, <, Definition, >, result, =, Lists, ., newArrayList, (, ), ;, for, (, Name, nameRef, :]
[Lists, ., newArrayList, (, ), ;, for, (, Name, nameRef, :, nameRefs, ), {, List, <, Definition, >, decls, =]
[Lists, ., newArrayList, (, ), ;, for, (, Name, nameRef, :, nameRefs, ), {, List, <, Definition, >, decls, =]
[Name, nameRef, :, nameRefs, ), {, List, <, Definition, >, decls, =, nameRef, ., getDeclarations, (, ), ;, if, (]
[nameRef, :, nameRefs, ), {, List, <, Definition, >, decls, =, nameRef, ., getDeclarations, (, ), ;, if, (, !]
[nameRef, :, nameRefs, ), {, List, <, Definition, >, decls, =, nameRef, ., getDeclarations, (, ), ;, if, (, !]
[Definition, >, decls, =, nameRef, ., getDeclarations, (, ), ;, if, (, !, decls, ., isEmpty, (, ), ), {]
[Definition, >, decls, =, nameRef, ., getDeclarations, (, ), ;, if, (, !, decls, ., isEmpty, (, ), ), {]
[nameRef, ., getDeclarations, (, ), ;, if, (, !, decls, ., isEmpty, (, ), ), {, result, ., addAll, (]
[(, !, decls, ., isEmpty, (, ), ), {, result, ., addAll, (, decls, ), ;, }, }, if, (]
[!, decls, ., isEmpty, (, ), ), {, result, ., addAll, (, decls, ), ;, }, }, if, (, !]
[!, decls, ., isEmpty, (, ), ), {, result, ., addAll, (, decls, ), ;, }, }, if, (, !]
[result, ., addAll, (, decls, ), ;, }, }, if, (, !, result, ., isEmpty, (, ), ), {, return]
[;, }, }, if, (, !, result, ., isEmpty, (, ), ), {, return, result, ;, }, else, {, return]
[return, result, ;, }, else, {, return, null, ;, }, }, public, Name, getSymbol, (, String, name, ), {, return]
[return, result, ;, }, else, {, return, null, ;, }, }, public, Name, getSymbol, (, String, name, ), {, return]
[else, {, return, null, ;, }, }, public, Name, getSymbol, (, String, name, ), {, return, nameMap, ., get, (]
[(, name, ), ;, }, @, Override, public, GraphNode, <, Name, ,, Reference, >, createNode, (, Name, value, ), {]
[(, name, ), ;, }, @, Override, public, GraphNode, <, Name, ,, Reference, >, createNode, (, Name, value, ), {]
[}, @, Override, public, GraphNode, <, Name, ,, Reference, >, createNode, (, Name, value, ), {, nameMap, ., put, (]
[}, @, Override, public, GraphNode, <, Name, ,, Reference, >, createNode, (, Name, value, ), {, nameMap, ., put, (]
[GraphNode, <, Name, ,, Reference, >, createNode, (, Name, value, ), {, nameMap, ., put, (, value, ., qName, ,]
[Reference, >, createNode, (, Name, value, ), {, nameMap, ., put, (, value, ., qName, ,, value, ), ;, return]
[Reference, >, createNode, (, Name, value, ), {, nameMap, ., put, (, value, ., qName, ,, value, ), ;, return]
[Name, value, ), {, nameMap, ., put, (, value, ., qName, ,, value, ), ;, return, super, ., createNode, (]
[value, ), ;, }, @, Override, public, void, connect, (, Name, src, ,, Reference, ref, ,, Name, dest, ), {]
[value, ), ;, }, @, Override, public, void, connect, (, Name, src, ,, Reference, ref, ,, Name, dest, ), {]
[@, Override, public, void, connect, (, Name, src, ,, Reference, ref, ,, Name, dest, ), {, super, ., connect, (]
[public, void, connect, (, Name, src, ,, Reference, ref, ,, Name, dest, ), {, super, ., connect, (, src, ,]
[connect, (, Name, src, ,, Reference, ref, ,, Name, dest, ), {, super, ., connect, (, src, ,, ref, ,]
[src, ,, Reference, ref, ,, Name, dest, ), {, super, ., connect, (, src, ,, ref, ,, dest, ), ;]
[src, ,, Reference, ref, ,, Name, dest, ), {, super, ., connect, (, src, ,, ref, ,, dest, ), ;]
[,, Name, dest, ), {, super, ., connect, (, src, ,, ref, ,, dest, ), ;, referenceMap, ., put, (]
[,, Name, dest, ), {, super, ., connect, (, src, ,, ref, ,, dest, ), ;, referenceMap, ., put, (]
[{, super, ., connect, (, src, ,, ref, ,, dest, ), ;, referenceMap, ., put, (, ref, ., site, ,]
[}, class, Name, {, private, final, String, qName, ;, private, JSType, type, ;, private, List, <, Definition, >, declarations, =]
[}, class, Name, {, private, final, String, qName, ;, private, JSType, type, ;, private, List, <, Definition, >, declarations, =]
[List, <, Definition, >, declarations, =, Lists, ., newLinkedList, (, ), ;, final, boolean, isExtern, ;, private, boolean, isExported, =]
[Lists, ., newLinkedList, (, ), ;, final, boolean, isExtern, ;, private, boolean, isExported, =, false, ;, private, boolean, isAliased, =]
[final, boolean, isExtern, ;, private, boolean, isExported, =, false, ;, private, boolean, isAliased, =, false, ;, private, boolean, exposedToCallOrApply, =]
[isAliased, =, false, ;, private, boolean, exposedToCallOrApply, =, false, ;, public, Name, (, String, qName, ,, boolean, isExtern, ), {]
[isAliased, =, false, ;, private, boolean, exposedToCallOrApply, =, false, ;, public, Name, (, String, qName, ,, boolean, isExtern, ), {]
[private, boolean, exposedToCallOrApply, =, false, ;, public, Name, (, String, qName, ,, boolean, isExtern, ), {, this, ., qName, =]
[exposedToCallOrApply, =, false, ;, public, Name, (, String, qName, ,, boolean, isExtern, ), {, this, ., qName, =, qName, ;]
[exposedToCallOrApply, =, false, ;, public, Name, (, String, qName, ,, boolean, isExtern, ), {, this, ., qName, =, qName, ;]
[public, Name, (, String, qName, ,, boolean, isExtern, ), {, this, ., qName, =, qName, ;, this, ., isExtern, =]
[,, boolean, isExtern, ), {, this, ., qName, =, qName, ;, this, ., isExtern, =, isExtern, ;, int, lastDot, =]
[,, boolean, isExtern, ), {, this, ., qName, =, qName, ;, this, ., isExtern, =, isExtern, ;, int, lastDot, =]
[{, this, ., qName, =, qName, ;, this, ., isExtern, =, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (]
[;, this, ., isExtern, =, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String, name, =]
[;, this, ., isExtern, =, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String, name, =]
[this, ., isExtern, =, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String, name, =, (]
[this, ., isExtern, =, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String, name, =, (]
[isExtern, =, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String, name, =, (, lastDot, ==]
[=, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String, name, =, (, lastDot, ==, -]
[int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String, name, =, (, lastDot, ==, -, 1, ), ?]
[=, qName, ., lastIndexOf, (, '.', ), ;, String, name, =, (, lastDot, ==, -, 1, ), ?, qName, :]
[=, qName, ., lastIndexOf, (, '.', ), ;, String, name, =, (, lastDot, ==, -, 1, ), ?, qName, :]
[(, '.', ), ;, String, name, =, (, lastDot, ==, -, 1, ), ?, qName, :, qName, ., substring, (]
[(, '.', ), ;, String, name, =, (, lastDot, ==, -, 1, ), ?, qName, :, qName, ., substring, (]
[), ;, String, name, =, (, lastDot, ==, -, 1, ), ?, qName, :, qName, ., substring, (, lastDot, +]
[name, =, (, lastDot, ==, -, 1, ), ?, qName, :, qName, ., substring, (, lastDot, +, 1, ), ;]
[name, =, (, lastDot, ==, -, 1, ), ?, qName, :, qName, ., substring, (, lastDot, +, 1, ), ;]
[==, -, 1, ), ?, qName, :, qName, ., substring, (, lastDot, +, 1, ), ;, this, ., isExported, =]
[==, -, 1, ), ?, qName, :, qName, ., substring, (, lastDot, +, 1, ), ;, this, ., isExported, =]
[==, -, 1, ), ?, qName, :, qName, ., substring, (, lastDot, +, 1, ), ;, this, ., isExported, =]
[., substring, (, lastDot, +, 1, ), ;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (]
[lastDot, +, 1, ), ;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;]
[lastDot, +, 1, ), ;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;]
[;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;, this, ., type, =]
[;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;, this, ., type, =]
[;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;, this, ., type, =]
[(, ), ., isExported, (, name, ), ;, this, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[(, ), ., isExported, (, name, ), ;, this, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, public, JSType, getType, (, ), {, return]
[;, }, public, JSType, getType, (, ), {, return, type, ;, }, public, void, setType, (, JSType, type, ), {]
[;, }, public, JSType, getType, (, ), {, return, type, ;, }, public, void, setType, (, JSType, type, ), {]
[getType, (, ), {, return, type, ;, }, public, void, setType, (, JSType, type, ), {, this, ., type, =]
[type, ), {, this, ., type, =, type, ;, }, public, List, <, Definition, >, getDeclarations, (, ), {, return]
[List, <, Definition, >, getDeclarations, (, ), {, return, declarations, ;, }, public, void, addAssignmentDeclaration, (, Node, node, ), {]
[List, <, Definition, >, getDeclarations, (, ), {, return, declarations, ;, }, public, void, addAssignmentDeclaration, (, Node, node, ), {]
[getDeclarations, (, ), {, return, declarations, ;, }, public, void, addAssignmentDeclaration, (, Node, node, ), {, declarations, ., add, (]
[{, return, declarations, ;, }, public, void, addAssignmentDeclaration, (, Node, node, ), {, declarations, ., add, (, new, AssignmentDefinition, (]
[declarations, ;, }, public, void, addAssignmentDeclaration, (, Node, node, ), {, declarations, ., add, (, new, AssignmentDefinition, (, node, ,]
[add, (, new, AssignmentDefinition, (, node, ,, isExtern, ), ), ;, }, public, void, addFunctionDeclaration, (, Node, node, ), {]
[add, (, new, AssignmentDefinition, (, node, ,, isExtern, ), ), ;, }, public, void, addFunctionDeclaration, (, Node, node, ), {]
[(, node, ,, isExtern, ), ), ;, }, public, void, addFunctionDeclaration, (, Node, node, ), {, declarations, ., add, (]
[isExtern, ), ), ;, }, public, void, addFunctionDeclaration, (, Node, node, ), {, declarations, ., add, (, new, NamedFunctionDefinition, (]
[), ;, }, public, void, addFunctionDeclaration, (, Node, node, ), {, declarations, ., add, (, new, NamedFunctionDefinition, (, node, ,]
[., add, (, new, NamedFunctionDefinition, (, node, ,, isExtern, ), ), ;, }, public, boolean, isExtern, (, ), {, return]
[), ), ;, }, public, boolean, isExtern, (, ), {, return, isExtern, ;, }, public, void, markExported, (, ), {]
[), ), ;, }, public, boolean, isExtern, (, ), {, return, isExtern, ;, }, public, void, markExported, (, ), {]
[public, boolean, isExtern, (, ), {, return, isExtern, ;, }, public, void, markExported, (, ), {, this, ., isExported, =]
[public, void, markExported, (, ), {, this, ., isExported, =, true, ;, }, public, boolean, isExported, (, ), {, return]
[isExported, (, ), {, return, isExported, ;, }, public, final, void, remove, (, ), {, for, (, Definition, declaration, :]
[isExported, ;, }, public, final, void, remove, (, ), {, for, (, Definition, declaration, :, getDeclarations, (, ), ), {]
[isExported, ;, }, public, final, void, remove, (, ), {, for, (, Definition, declaration, :, getDeclarations, (, ), ), {]
[getDeclarations, (, ), ), {, declaration, ., remove, (, ), ;, }, }, public, boolean, isAliased, (, ), {, return]
[}, }, public, boolean, isAliased, (, ), {, return, isAliased, ;, }, public, void, setAliased, (, boolean, isAliased, ), {]
[}, }, public, boolean, isAliased, (, ), {, return, isAliased, ;, }, public, void, setAliased, (, boolean, isAliased, ), {]
[isAliased, (, ), {, return, isAliased, ;, }, public, void, setAliased, (, boolean, isAliased, ), {, this, ., isAliased, =]
[setAliased, (, boolean, isAliased, ), {, this, ., isAliased, =, isAliased, ;, }, public, boolean, hasSideEffect, (, ), {, return]
[}, public, boolean, hasSideEffect, (, ), {, return, isCallable, (, ), ;, }, public, String, getQualifiedName, (, ), {, return]
[}, public, String, getQualifiedName, (, ), {, return, qName, ;, }, public, String, getPropertyName, (, ), {, int, lastIndexOfDot, =]
[}, public, String, getQualifiedName, (, ), {, return, qName, ;, }, public, String, getPropertyName, (, ), {, int, lastIndexOfDot, =]
[(, ), {, return, qName, ;, }, public, String, getPropertyName, (, ), {, int, lastIndexOfDot, =, qName, ., lastIndexOf, (]
[;, }, public, String, getPropertyName, (, ), {, int, lastIndexOfDot, =, qName, ., lastIndexOf, (, '.', ), ;, if, (]
[;, }, public, String, getPropertyName, (, ), {, int, lastIndexOfDot, =, qName, ., lastIndexOf, (, '.', ), ;, if, (]
[public, String, getPropertyName, (, ), {, int, lastIndexOfDot, =, qName, ., lastIndexOf, (, '.', ), ;, if, (, lastIndexOfDot, ==]
[String, getPropertyName, (, ), {, int, lastIndexOfDot, =, qName, ., lastIndexOf, (, '.', ), ;, if, (, lastIndexOfDot, ==, -]
[{, int, lastIndexOfDot, =, qName, ., lastIndexOf, (, '.', ), ;, if, (, lastIndexOfDot, ==, -, 1, ), {, return]
[lastIndexOf, (, '.', ), ;, if, (, lastIndexOfDot, ==, -, 1, ), {, return, null, ;, }, else, {, return]
[lastIndexOf, (, '.', ), ;, if, (, lastIndexOfDot, ==, -, 1, ), {, return, null, ;, }, else, {, return]
[;, if, (, lastIndexOfDot, ==, -, 1, ), {, return, null, ;, }, else, {, return, qName, ., substring, (]
[;, if, (, lastIndexOfDot, ==, -, 1, ), {, return, null, ;, }, else, {, return, qName, ., substring, (]
[(, lastIndexOfDot, ==, -, 1, ), {, return, null, ;, }, else, {, return, qName, ., substring, (, lastIndexOfDot, +]
[{, return, qName, ., substring, (, lastIndexOfDot, +, 1, ), ;, }, }, public, boolean, isCallable, (, ), {, return]
[{, return, qName, ., substring, (, lastIndexOfDot, +, 1, ), ;, }, }, public, boolean, isCallable, (, ), {, return]
[boolean, isCallable, (, ), {, return, type, ., canBeCalled, (, ), ;, }, public, boolean, exposedToCallOrApply, (, ), {, return]
[(, ), ;, }, public, boolean, exposedToCallOrApply, (, ), {, return, exposedToCallOrApply, ;, }, public, void, markExposedToCallOrApply, (, ), {]
[;, }, public, boolean, exposedToCallOrApply, (, ), {, return, exposedToCallOrApply, ;, }, public, void, markExposedToCallOrApply, (, ), {, exposedToCallOrApply, =]
[public, void, markExposedToCallOrApply, (, ), {, exposedToCallOrApply, =, true, ;, }, @, Override, public, String, toString, (, ), {, return]
[public, void, markExposedToCallOrApply, (, ), {, exposedToCallOrApply, =, true, ;, }, @, Override, public, String, toString, (, ), {, return]
[public, void, markExposedToCallOrApply, (, ), {, exposedToCallOrApply, =, true, ;, }, @, Override, public, String, toString, (, ), {, return]
[markExposedToCallOrApply, (, ), {, exposedToCallOrApply, =, true, ;, }, @, Override, public, String, toString, (, ), {, return, qName, +]
[), {, exposedToCallOrApply, =, true, ;, }, @, Override, public, String, toString, (, ), {, return, qName, +, " : ", +]
[(, ), {, return, qName, +, " : ", +, type, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, ), {, return, qName, +, " : ", +, type, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[int, hashCode, (, ), {, return, qName, ., hashCode, (, ), ;, }, public, boolean, canChangeSignature, (, ), {, return]
[hashCode, (, ), {, return, qName, ., hashCode, (, ), ;, }, public, boolean, canChangeSignature, (, ), {, return, !]
[(, ), {, return, qName, ., hashCode, (, ), ;, }, public, boolean, canChangeSignature, (, ), {, return, !, (]
[(, ), {, return, qName, ., hashCode, (, ), ;, }, public, boolean, canChangeSignature, (, ), {, return, !, (]
[(, ), {, return, qName, ., hashCode, (, ), ;, }, public, boolean, canChangeSignature, (, ), {, return, !, (]
[(, ), {, return, qName, ., hashCode, (, ), ;, }, public, boolean, canChangeSignature, (, ), {, return, !, (]
[(, ), {, return, qName, ., hashCode, (, ), ;, }, public, boolean, canChangeSignature, (, ), {, return, !, (]
[(, ), {, return, qName, ., hashCode, (, ), ;, }, public, boolean, canChangeSignature, (, ), {, return, !, (]
[qName, ., hashCode, (, ), ;, }, public, boolean, canChangeSignature, (, ), {, return, !, (, isExtern, (, ), ||]
[., hashCode, (, ), ;, }, public, boolean, canChangeSignature, (, ), {, return, !, (, isExtern, (, ), ||, !]
[;, }, public, boolean, canChangeSignature, (, ), {, return, !, (, isExtern, (, ), ||, !, isCallable, (, ), ||]
[canChangeSignature, (, ), {, return, !, (, isExtern, (, ), ||, !, isCallable, (, ), ||, isAliased, (, ), ||]
[return, !, (, isExtern, (, ), ||, !, isCallable, (, ), ||, isAliased, (, ), ||, isExported, (, ), ||]
[(, ), ||, !, isCallable, (, ), ||, isAliased, (, ), ||, isExported, (, ), ||, exposedToCallOrApply, (, ), ||]
[(, ), ||, nameUsesArgumentsProperty, (, ), ), ;, }, private, boolean, nameUsesArgumentsProperty, (, ), {, for, (, Definition, definition, :]
[;, }, private, boolean, nameUsesArgumentsProperty, (, ), {, for, (, Definition, definition, :, getDeclarations, (, ), ), {, if, (]
[;, }, private, boolean, nameUsesArgumentsProperty, (, ), {, for, (, Definition, definition, :, getDeclarations, (, ), ), {, if, (]
[nameUsesArgumentsProperty, (, ), {, for, (, Definition, definition, :, getDeclarations, (, ), ), {, if, (, NodeUtil, ., isVarArgsFunction, (]
[nameUsesArgumentsProperty, (, ), {, for, (, Definition, definition, :, getDeclarations, (, ), ), {, if, (, NodeUtil, ., isVarArgsFunction, (]
[getDeclarations, (, ), ), {, if, (, NodeUtil, ., isVarArgsFunction, (, definition, ., getRValue, (, ), ), ), {, return]
[if, (, NodeUtil, ., isVarArgsFunction, (, definition, ., getRValue, (, ), ), ), {, return, true, ;, }, }, return]
[}, }, static, class, Reference, {, public, final, Node, site, ;, public, final, Node, parent, ;, private, JSModule, module, =]
[public, final, Node, site, ;, public, final, Node, parent, ;, private, JSModule, module, =, null, ;, private, boolean, isUnknown, =]
[module, =, null, ;, private, boolean, isUnknown, =, false, ;, public, Reference, (, Node, site, ,, Node, parent, ), {]
[module, =, null, ;, private, boolean, isUnknown, =, false, ;, public, Reference, (, Node, site, ,, Node, parent, ), {]
[private, boolean, isUnknown, =, false, ;, public, Reference, (, Node, site, ,, Node, parent, ), {, this, ., site, =]
[isUnknown, =, false, ;, public, Reference, (, Node, site, ,, Node, parent, ), {, this, ., site, =, site, ;]
[isUnknown, =, false, ;, public, Reference, (, Node, site, ,, Node, parent, ), {, this, ., site, =, site, ;]
[public, Reference, (, Node, site, ,, Node, parent, ), {, this, ., site, =, site, ;, this, ., parent, =]
[this, ., site, =, site, ;, this, ., parent, =, parent, ;, }, public, boolean, isUnknown, (, ), {, return]
[;, }, public, boolean, isUnknown, (, ), {, return, isUnknown, ;, }, public, void, setUnknown, (, boolean, isUnknown, ), {]
[;, }, public, boolean, isUnknown, (, ), {, return, isUnknown, ;, }, public, void, setUnknown, (, boolean, isUnknown, ), {]
[isUnknown, (, ), {, return, isUnknown, ;, }, public, void, setUnknown, (, boolean, isUnknown, ), {, this, ., isUnknown, =]
[setUnknown, (, boolean, isUnknown, ), {, this, ., isUnknown, =, isUnknown, ;, }, public, JSModule, getModule, (, ), {, return]
[;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {]
[;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {]
[getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {, this, ., module, =]
[void, setModule, (, JSModule, module, ), {, this, ., module, =, module, ;, }, boolean, isCall, (, ), {, return]
[void, setModule, (, JSModule, module, ), {, this, ., module, =, module, ;, }, boolean, isCall, (, ), {, return]
[boolean, isCall, (, ), {, return, site, ., isCall, (, ), ;, }, public, Node, getSite, (, ), {, return]
