[BooleanLiteralSet, {, EMPTY, ,, TRUE, ,, FALSE, ,, BOTH, ;, private, BooleanLiteralSet, fromOrdinal, (, int, ordinal, ), {, switch, (]
[TRUE, ,, FALSE, ,, BOTH, ;, private, BooleanLiteralSet, fromOrdinal, (, int, ordinal, ), {, switch, (, ordinal, ), {, case]
[,, BOTH, ;, private, BooleanLiteralSet, fromOrdinal, (, int, ordinal, ), {, switch, (, ordinal, ), {, case, 0, :, return]
[private, BooleanLiteralSet, fromOrdinal, (, int, ordinal, ), {, switch, (, ordinal, ), {, case, 0, :, return, EMPTY, ;, case]
[(, int, ordinal, ), {, switch, (, ordinal, ), {, case, 0, :, return, EMPTY, ;, case, 1, :, return]
[), {, switch, (, ordinal, ), {, case, 0, :, return, EMPTY, ;, case, 1, :, return, TRUE, ;, case]
[(, ordinal, ), {, case, 0, :, return, EMPTY, ;, case, 1, :, return, TRUE, ;, case, 2, :, return]
[{, case, 0, :, return, EMPTY, ;, case, 1, :, return, TRUE, ;, case, 2, :, return, FALSE, ;, case]
[:, return, EMPTY, ;, case, 1, :, return, TRUE, ;, case, 2, :, return, FALSE, ;, case, 3, :, return]
[1, :, return, TRUE, ;, case, 2, :, return, FALSE, ;, case, 3, :, return, BOTH, ;, default, :, throw]
[TRUE, ;, case, 2, :, return, FALSE, ;, case, 3, :, return, BOTH, ;, default, :, throw, new, IllegalArgumentException, (]
[TRUE, ;, case, 2, :, return, FALSE, ;, case, 3, :, return, BOTH, ;, default, :, throw, new, IllegalArgumentException, (]
[case, 2, :, return, FALSE, ;, case, 3, :, return, BOTH, ;, default, :, throw, new, IllegalArgumentException, (, "Ordinal: ", +]
[throw, new, IllegalArgumentException, (, "Ordinal: ", +, ordinal, ), ;, }, }, public, BooleanLiteralSet, intersection, (, BooleanLiteralSet, that, ), {, return]
[IllegalArgumentException, (, "Ordinal: ", +, ordinal, ), ;, }, }, public, BooleanLiteralSet, intersection, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (]
[IllegalArgumentException, (, "Ordinal: ", +, ordinal, ), ;, }, }, public, BooleanLiteralSet, intersection, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (]
[IllegalArgumentException, (, "Ordinal: ", +, ordinal, ), ;, }, }, public, BooleanLiteralSet, intersection, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (]
[;, }, }, public, BooleanLiteralSet, intersection, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, ., ordinal, (, ), &]
[;, }, }, public, BooleanLiteralSet, intersection, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, ., ordinal, (, ), &]
[(, ), &, that, ., ordinal, (, ), ), ;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, ), {, return]
[&, that, ., ordinal, (, ), ), ;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (]
[&, that, ., ordinal, (, ), ), ;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (]
[&, that, ., ordinal, (, ), ), ;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (]
[), ;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, ., ordinal, (, ), |]
[), ;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, ., ordinal, (, ), |]
[), |, that, ., ordinal, (, ), ), ;, }, public, boolean, contains, (, boolean, literalValue, ), {, switch, (]
[), |, that, ., ordinal, (, ), ), ;, }, public, boolean, contains, (, boolean, literalValue, ), {, switch, (]
[;, }, public, boolean, contains, (, boolean, literalValue, ), {, switch, (, this, ., ordinal, (, ), ), {, case]
[boolean, contains, (, boolean, literalValue, ), {, switch, (, this, ., ordinal, (, ), ), {, case, 0, :, return]
[boolean, literalValue, ), {, switch, (, this, ., ordinal, (, ), ), {, case, 0, :, return, false, ;, case]
[{, switch, (, this, ., ordinal, (, ), ), {, case, 0, :, return, false, ;, case, 1, :, return]
[this, ., ordinal, (, ), ), {, case, 0, :, return, false, ;, case, 1, :, return, literalValue, ;, case]
[(, ), ), {, case, 0, :, return, false, ;, case, 1, :, return, literalValue, ;, case, 2, :, return]
[), ), {, case, 0, :, return, false, ;, case, 1, :, return, literalValue, ;, case, 2, :, return, !]
[case, 0, :, return, false, ;, case, 1, :, return, literalValue, ;, case, 2, :, return, !, literalValue, ;, case]
[return, false, ;, case, 1, :, return, literalValue, ;, case, 2, :, return, !, literalValue, ;, case, 3, :, return]
[:, return, literalValue, ;, case, 2, :, return, !, literalValue, ;, case, 3, :, return, true, ;, default, :, throw]
[;, case, 2, :, return, !, literalValue, ;, case, 3, :, return, true, ;, default, :, throw, new, IndexOutOfBoundsException, (]
[;, case, 2, :, return, !, literalValue, ;, case, 3, :, return, true, ;, default, :, throw, new, IndexOutOfBoundsException, (]
[2, :, return, !, literalValue, ;, case, 3, :, return, true, ;, default, :, throw, new, IndexOutOfBoundsException, (, "Ordinal: ", +]
[2, :, return, !, literalValue, ;, case, 3, :, return, true, ;, default, :, throw, new, IndexOutOfBoundsException, (, "Ordinal: ", +]
[+, this, ., ordinal, (, ), ), ;, }, }, public, static, BooleanLiteralSet, get, (, boolean, literalValue, ), {, return]
[+, this, ., ordinal, (, ), ), ;, }, }, public, static, BooleanLiteralSet, get, (, boolean, literalValue, ), {, return]
[., ordinal, (, ), ), ;, }, }, public, static, BooleanLiteralSet, get, (, boolean, literalValue, ), {, return, literalValue, ?]
[(, ), ), ;, }, }, public, static, BooleanLiteralSet, get, (, boolean, literalValue, ), {, return, literalValue, ?, TRUE, :]
