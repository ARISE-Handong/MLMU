[., Set, ;, class, DefinitionsRemover, {, static, Definition, getDefinition, (, Node, n, ,, boolean, isExtern, ), {, Node, parent, =]
[., Set, ;, class, DefinitionsRemover, {, static, Definition, getDefinition, (, Node, n, ,, boolean, isExtern, ), {, Node, parent, =]
[getDefinition, (, Node, n, ,, boolean, isExtern, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[getDefinition, (, Node, n, ,, boolean, isExtern, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[Node, n, ,, boolean, isExtern, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, ==]
[isExtern, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return]
[=, n, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, null, ;, }, if, (]
[=, n, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, null, ;, }, if, (]
[=, n, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, null, ;, }, if, (]
[(, ), ;, if, (, parent, ==, null, ), {, return, null, ;, }, if, (, NodeUtil, ., isVarDeclaration, (]
[if, (, parent, ==, null, ), {, return, null, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&]
[if, (, parent, ==, null, ), {, return, null, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&]
[null, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, ), ), {, return]
[if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, ), ), {, return, new, VarDefinition, (]
[NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, ), ), {, return, new, VarDefinition, (, n, ,]
[n, ., hasChildren, (, ), ), {, return, new, VarDefinition, (, n, ,, isExtern, ), ;, }, else, if, (]
[n, ., hasChildren, (, ), ), {, return, new, VarDefinition, (, n, ,, isExtern, ), ;, }, else, if, (]
[n, ., hasChildren, (, ), ), {, return, new, VarDefinition, (, n, ,, isExtern, ), ;, }, else, if, (]
[{, return, new, VarDefinition, (, n, ,, isExtern, ), ;, }, else, if, (, parent, ., isFunction, (, ), &&]
[{, return, new, VarDefinition, (, n, ,, isExtern, ), ;, }, else, if, (, parent, ., isFunction, (, ), &&]
[{, return, new, VarDefinition, (, n, ,, isExtern, ), ;, }, else, if, (, parent, ., isFunction, (, ), &&]
[,, isExtern, ), ;, }, else, if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==]
[else, if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (]
[if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (, !]
[if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (, !]
[isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (]
[., getFirstChild, (, ), ==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return]
[), ==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, new, NamedFunctionDefinition, (]
[n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, new, NamedFunctionDefinition, (, parent, ,]
[., isFunctionExpression, (, parent, ), ), {, return, new, NamedFunctionDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (]
[isFunctionExpression, (, parent, ), ), {, return, new, NamedFunctionDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, !]
[isFunctionExpression, (, parent, ), ), {, return, new, NamedFunctionDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, !]
[isFunctionExpression, (, parent, ), ), {, return, new, NamedFunctionDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, !]
[NamedFunctionDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, !, n, ., getString, (, ), ., equals, (]
[), ;, }, else, if, (, !, n, ., getString, (, ), ., equals, (, "", ), ), {, return]
[else, if, (, !, n, ., getString, (, ), ., equals, (, "", ), ), {, return, new, FunctionExpressionDefinition, (]
[(, !, n, ., getString, (, ), ., equals, (, "", ), ), {, return, new, FunctionExpressionDefinition, (, parent, ,]
[equals, (, "", ), ), {, return, new, FunctionExpressionDefinition, (, parent, ,, isExtern, ), ;, }, }, else, if, (]
[equals, (, "", ), ), {, return, new, FunctionExpressionDefinition, (, parent, ,, isExtern, ), ;, }, }, else, if, (]
[equals, (, "", ), ), {, return, new, FunctionExpressionDefinition, (, parent, ,, isExtern, ), ;, }, }, else, if, (]
[return, new, FunctionExpressionDefinition, (, parent, ,, isExtern, ), ;, }, }, else, if, (, parent, ., isAssign, (, ), &&]
[return, new, FunctionExpressionDefinition, (, parent, ,, isExtern, ), ;, }, }, else, if, (, parent, ., isAssign, (, ), &&]
[return, new, FunctionExpressionDefinition, (, parent, ,, isExtern, ), ;, }, }, else, if, (, parent, ., isAssign, (, ), &&]
[isExtern, ), ;, }, }, else, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==]
[}, else, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, return]
[(, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, return, new, AssignmentDefinition, (]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, return, new, AssignmentDefinition, (, parent, ,]
[getFirstChild, (, ), ==, n, ), {, return, new, AssignmentDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (]
[getFirstChild, (, ), ==, n, ), {, return, new, AssignmentDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (]
[n, ), {, return, new, AssignmentDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (]
[{, return, new, AssignmentDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,]
[parent, ,, isExtern, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return]
[), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, new, ObjectLiteralPropertyDefinition, (]
[}, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, new, ObjectLiteralPropertyDefinition, (, parent, ,]
[if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, new, ObjectLiteralPropertyDefinition, (, parent, ,, n, ,]
[if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, new, ObjectLiteralPropertyDefinition, (, parent, ,, n, ,]
[n, ,, parent, ), ), {, return, new, ObjectLiteralPropertyDefinition, (, parent, ,, n, ,, n, ., getFirstChild, (, ), ,]
[new, ObjectLiteralPropertyDefinition, (, parent, ,, n, ,, n, ., getFirstChild, (, ), ,, isExtern, ), ;, }, else, if, (]
[new, ObjectLiteralPropertyDefinition, (, parent, ,, n, ,, n, ., getFirstChild, (, ), ,, isExtern, ), ;, }, else, if, (]
[(, ), ,, isExtern, ), ;, }, else, if, (, parent, ., isParamList, (, ), ), {, Node, function, =]
[(, ), ,, isExtern, ), ;, }, else, if, (, parent, ., isParamList, (, ), ), {, Node, function, =]
[else, if, (, parent, ., isParamList, (, ), ), {, Node, function, =, parent, ., getParent, (, ), ;, return]
[parent, ., isParamList, (, ), ), {, Node, function, =, parent, ., getParent, (, ), ;, return, new, FunctionArgumentDefinition, (]
[isParamList, (, ), ), {, Node, function, =, parent, ., getParent, (, ), ;, return, new, FunctionArgumentDefinition, (, function, ,]
[), ), {, Node, function, =, parent, ., getParent, (, ), ;, return, new, FunctionArgumentDefinition, (, function, ,, n, ,]
[=, parent, ., getParent, (, ), ;, return, new, FunctionArgumentDefinition, (, function, ,, n, ,, isExtern, ), ;, }, return]
[,, isExtern, ), ;, }, return, null, ;, }, static, boolean, isDefinitionNode, (, Node, n, ), {, Node, parent, =]
[,, isExtern, ), ;, }, return, null, ;, }, static, boolean, isDefinitionNode, (, Node, n, ), {, Node, parent, =]
[}, static, boolean, isDefinitionNode, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[}, static, boolean, isDefinitionNode, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[boolean, isDefinitionNode, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, ==]
[n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return]
[=, n, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, false, ;, }, if, (]
[=, n, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, false, ;, }, if, (]
[=, n, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, false, ;, }, if, (]
[(, ), ;, if, (, parent, ==, null, ), {, return, false, ;, }, if, (, NodeUtil, ., isVarDeclaration, (]
[if, (, parent, ==, null, ), {, return, false, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&]
[if, (, parent, ==, null, ), {, return, false, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&]
[false, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, ), ), {, return]
[., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (]
[., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (]
[., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (]
[n, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (, parent, ., isFunction, (, ), &&]
[n, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (, parent, ., isFunction, (, ), &&]
[n, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (, parent, ., isFunction, (, ), &&]
[{, return, true, ;, }, else, if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==]
[else, if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (]
[if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (, !]
[if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (, !]
[isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (]
[., getFirstChild, (, ), ==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return]
[), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, true, ;, }, else, if, (]
[{, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, true, ;, }, else, if, (, !]
[{, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, true, ;, }, else, if, (, !]
[{, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, true, ;, }, else, if, (, !]
[parent, ), ), {, return, true, ;, }, else, if, (, !, n, ., getString, (, ), ., equals, (]
[true, ;, }, else, if, (, !, n, ., getString, (, ), ., equals, (, "", ), ), {, return]
[n, ., getString, (, ), ., equals, (, "", ), ), {, return, true, ;, }, }, else, if, (]
[n, ., getString, (, ), ., equals, (, "", ), ), {, return, true, ;, }, }, else, if, (]
[n, ., getString, (, ), ., equals, (, "", ), ), {, return, true, ;, }, }, else, if, (]
[equals, (, "", ), ), {, return, true, ;, }, }, else, if, (, parent, ., isAssign, (, ), &&]
[equals, (, "", ), ), {, return, true, ;, }, }, else, if, (, parent, ., isAssign, (, ), &&]
[equals, (, "", ), ), {, return, true, ;, }, }, else, if, (, parent, ., isAssign, (, ), &&]
[return, true, ;, }, }, else, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==]
[}, else, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, return]
[isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, return, true, ;, }, else, if, (]
[isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, return, true, ;, }, else, if, (]
[parent, ., getFirstChild, (, ), ==, n, ), {, return, true, ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (]
[getFirstChild, (, ), ==, n, ), {, return, true, ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,]
[), {, return, true, ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return]
[else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, true, ;, }, else, if, (]
[else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, true, ;, }, else, if, (]
[,, parent, ), ), {, return, true, ;, }, else, if, (, parent, ., isParamList, (, ), ), {, return]
[{, return, true, ;, }, else, if, (, parent, ., isParamList, (, ), ), {, return, true, ;, }, return]
[return, false, ;, }, static, abstract, class, Definition, {, private, final, boolean, isExtern, ;, Definition, (, boolean, isExtern, ), {]
[return, false, ;, }, static, abstract, class, Definition, {, private, final, boolean, isExtern, ;, Definition, (, boolean, isExtern, ), {]
[static, abstract, class, Definition, {, private, final, boolean, isExtern, ;, Definition, (, boolean, isExtern, ), {, this, ., isExtern, =]
[(, boolean, isExtern, ), {, this, ., isExtern, =, isExtern, ;, }, public, void, remove, (, ), {, if, (]
[boolean, isExtern, ), {, this, ., isExtern, =, isExtern, ;, }, public, void, remove, (, ), {, if, (, !]
[{, this, ., isExtern, =, isExtern, ;, }, public, void, remove, (, ), {, if, (, !, isExtern, ), {]
[public, void, remove, (, ), {, if, (, !, isExtern, ), {, performRemove, (, ), ;, }, else, {, throw]
[(, ), {, if, (, !, isExtern, ), {, performRemove, (, ), ;, }, else, {, throw, new, IllegalStateException, (]
[(, ), {, if, (, !, isExtern, ), {, performRemove, (, ), ;, }, else, {, throw, new, IllegalStateException, (]
[{, if, (, !, isExtern, ), {, performRemove, (, ), ;, }, else, {, throw, new, IllegalStateException, (, "Attempt to remove() an extern", +]
[abstract, Node, getLValue, (, ), ;, public, abstract, Node, getRValue, (, ), ;, public, boolean, isExtern, (, ), {, return]
[isExtern, ;, }, }, abstract, static, class, IncompleteDefinition, extends, Definition, {, private, static, final, Set, <, Integer, >, ALLOWED_TYPES, =]
[isExtern, ;, }, }, abstract, static, class, IncompleteDefinition, extends, Definition, {, private, static, final, Set, <, Integer, >, ALLOWED_TYPES, =]
[abstract, static, class, IncompleteDefinition, extends, Definition, {, private, static, final, Set, <, Integer, >, ALLOWED_TYPES, =, ImmutableSet, ., of, (]
[abstract, static, class, IncompleteDefinition, extends, Definition, {, private, static, final, Set, <, Integer, >, ALLOWED_TYPES, =, ImmutableSet, ., of, (]
[extends, Definition, {, private, static, final, Set, <, Integer, >, ALLOWED_TYPES, =, ImmutableSet, ., of, (, Token, ., NAME, ,]
[extends, Definition, {, private, static, final, Set, <, Integer, >, ALLOWED_TYPES, =, ImmutableSet, ., of, (, Token, ., NAME, ,]
[static, final, Set, <, Integer, >, ALLOWED_TYPES, =, ImmutableSet, ., of, (, Token, ., NAME, ,, Token, ., GETPROP, ,]
[static, final, Set, <, Integer, >, ALLOWED_TYPES, =, ImmutableSet, ., of, (, Token, ., NAME, ,, Token, ., GETPROP, ,]
[., GETELEM, ), ;, private, final, Node, lValue, ;, IncompleteDefinition, (, Node, lValue, ,, boolean, inExterns, ), {, super, (]
[;, private, final, Node, lValue, ;, IncompleteDefinition, (, Node, lValue, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;]
[;, private, final, Node, lValue, ;, IncompleteDefinition, (, Node, lValue, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;]
[lValue, ;, IncompleteDefinition, (, Node, lValue, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkNotNull, (]
[(, Node, lValue, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;]
[(, Node, lValue, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;]
[boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;, Preconditions, ., checkArgument, (]
[boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;, Preconditions, ., checkArgument, (]
[super, (, inExterns, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;, Preconditions, ., checkArgument, (, ALLOWED_TYPES, ., contains, (]
[super, (, inExterns, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;, Preconditions, ., checkArgument, (, ALLOWED_TYPES, ., contains, (]
[checkNotNull, (, lValue, ), ;, Preconditions, ., checkArgument, (, ALLOWED_TYPES, ., contains, (, lValue, ., getType, (, ), ), ,]
[lValue, ), ;, Preconditions, ., checkArgument, (, ALLOWED_TYPES, ., contains, (, lValue, ., getType, (, ), ), ,, "Unexpected lValue type %s", ,]
[lValue, ), ;, Preconditions, ., checkArgument, (, ALLOWED_TYPES, ., contains, (, lValue, ., getType, (, ), ), ,, "Unexpected lValue type %s", ,]
[., checkArgument, (, ALLOWED_TYPES, ., contains, (, lValue, ., getType, (, ), ), ,, "Unexpected lValue type %s", ,, Token, ., name, (]
[., checkArgument, (, ALLOWED_TYPES, ., contains, (, lValue, ., getType, (, ), ), ,, "Unexpected lValue type %s", ,, Token, ., name, (]
[., getType, (, ), ), ,, "Unexpected lValue type %s", ,, Token, ., name, (, lValue, ., getType, (, ), ), ), ;]
[., getType, (, ), ), ,, "Unexpected lValue type %s", ,, Token, ., name, (, lValue, ., getType, (, ), ), ), ;]
[), ,, "Unexpected lValue type %s", ,, Token, ., name, (, lValue, ., getType, (, ), ), ), ;, this, ., lValue, =]
[), ), ), ;, this, ., lValue, =, lValue, ;, }, @, Override, public, Node, getLValue, (, ), {, return]
[Override, public, Node, getLValue, (, ), {, return, lValue, ;, }, @, Override, public, Node, getRValue, (, ), {, return]
[}, }, static, final, class, UnknownDefinition, extends, IncompleteDefinition, {, UnknownDefinition, (, Node, lValue, ,, boolean, inExterns, ), {, super, (]
[static, final, class, UnknownDefinition, extends, IncompleteDefinition, {, UnknownDefinition, (, Node, lValue, ,, boolean, inExterns, ), {, super, (, lValue, ,]
[inExterns, ), {, super, (, lValue, ,, inExterns, ), ;, }, @, Override, public, void, performRemove, (, ), {, throw]
[super, (, lValue, ,, inExterns, ), ;, }, @, Override, public, void, performRemove, (, ), {, throw, new, IllegalArgumentException, (]
["Can't remove an UnknownDefinition", ), ;, }, }, static, final, class, ExternalNameOnlyDefinition, extends, IncompleteDefinition, {, ExternalNameOnlyDefinition, (, Node, lValue, ), {, super, (]
[;, }, }, static, final, class, ExternalNameOnlyDefinition, extends, IncompleteDefinition, {, ExternalNameOnlyDefinition, (, Node, lValue, ), {, super, (, lValue, ,]
[lValue, ), {, super, (, lValue, ,, true, ), ;, }, @, Override, public, void, performRemove, (, ), {, throw]
[super, (, lValue, ,, true, ), ;, }, @, Override, public, void, performRemove, (, ), {, throw, new, IllegalArgumentException, (]
[final, class, FunctionArgumentDefinition, extends, IncompleteDefinition, {, FunctionArgumentDefinition, (, Node, function, ,, Node, argumentName, ,, boolean, inExterns, ), {, super, (]
[FunctionArgumentDefinition, extends, IncompleteDefinition, {, FunctionArgumentDefinition, (, Node, function, ,, Node, argumentName, ,, boolean, inExterns, ), {, super, (, argumentName, ,]
[{, FunctionArgumentDefinition, (, Node, function, ,, Node, argumentName, ,, boolean, inExterns, ), {, super, (, argumentName, ,, inExterns, ), ;]
[{, FunctionArgumentDefinition, (, Node, function, ,, Node, argumentName, ,, boolean, inExterns, ), {, super, (, argumentName, ,, inExterns, ), ;]
[function, ,, Node, argumentName, ,, boolean, inExterns, ), {, super, (, argumentName, ,, inExterns, ), ;, Preconditions, ., checkArgument, (]
[function, ,, Node, argumentName, ,, boolean, inExterns, ), {, super, (, argumentName, ,, inExterns, ), ;, Preconditions, ., checkArgument, (]
[), {, super, (, argumentName, ,, inExterns, ), ;, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ), ;]
[), {, super, (, argumentName, ,, inExterns, ), ;, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ), ;]
[argumentName, ,, inExterns, ), ;, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (]
[argumentName, ,, inExterns, ), ;, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, argumentName, ., isName, (, ), ), ;, }, @, Override, public, void, performRemove, (, ), {, throw]
[argumentName, ., isName, (, ), ), ;, }, @, Override, public, void, performRemove, (, ), {, throw, new, IllegalArgumentException, (]
[FunctionDefinition, extends, Definition, {, protected, final, Node, function, ;, FunctionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (]
[{, protected, final, Node, function, ;, FunctionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;]
[{, protected, final, Node, function, ;, FunctionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;]
[function, ;, FunctionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (]
[function, ;, FunctionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (]
[boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (, node, ., isFunction, (, ), ), ;]
[), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (, node, ., isFunction, (, ), ), ;, function, =]
[., isFunction, (, ), ), ;, function, =, node, ;, }, @, Override, public, Node, getLValue, (, ), {, return]
[., isFunction, (, ), ), ;, function, =, node, ;, }, @, Override, public, Node, getLValue, (, ), {, return]
[(, ), {, return, function, ., getFirstChild, (, ), ;, }, @, Override, public, Node, getRValue, (, ), {, return]
[}, }, static, final, class, NamedFunctionDefinition, extends, FunctionDefinition, {, NamedFunctionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (]
[static, final, class, NamedFunctionDefinition, extends, FunctionDefinition, {, NamedFunctionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, node, ,]
[boolean, inExterns, ), {, super, (, node, ,, inExterns, ), ;, }, @, Override, public, void, performRemove, (, ), {]
[boolean, inExterns, ), {, super, (, node, ,, inExterns, ), ;, }, @, Override, public, void, performRemove, (, ), {]
[}, }, static, final, class, FunctionExpressionDefinition, extends, FunctionDefinition, {, FunctionExpressionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (]
[static, final, class, FunctionExpressionDefinition, extends, FunctionDefinition, {, FunctionExpressionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, node, ,]
[FunctionExpressionDefinition, extends, FunctionDefinition, {, FunctionExpressionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, node, ,, inExterns, ), ;]
[FunctionExpressionDefinition, extends, FunctionDefinition, {, FunctionExpressionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, node, ,, inExterns, ), ;]
[FunctionExpressionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, node, ,, inExterns, ), ;, Preconditions, ., checkArgument, (]
[FunctionExpressionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, node, ,, inExterns, ), ;, Preconditions, ., checkArgument, (]
[,, boolean, inExterns, ), {, super, (, node, ,, inExterns, ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isFunctionExpression, (]
[., checkArgument, (, NodeUtil, ., isFunctionExpression, (, node, ), ), ;, }, @, Override, public, void, performRemove, (, ), {]
[., checkArgument, (, NodeUtil, ., isFunctionExpression, (, node, ), ), ;, }, @, Override, public, void, performRemove, (, ), {]
[., isFunctionExpression, (, node, ), ), ;, }, @, Override, public, void, performRemove, (, ), {, function, ., replaceChild, (]
[., isFunctionExpression, (, node, ), ), ;, }, @, Override, public, void, performRemove, (, ), {, function, ., replaceChild, (]
[;, }, @, Override, public, void, performRemove, (, ), {, function, ., replaceChild, (, function, ., getFirstChild, (, ), ,]
[;, }, @, Override, public, void, performRemove, (, ), {, function, ., replaceChild, (, function, ., getFirstChild, (, ), ,]
[public, void, performRemove, (, ), {, function, ., replaceChild, (, function, ., getFirstChild, (, ), ,, IR, ., name, (]
[AssignmentDefinition, extends, Definition, {, private, final, Node, assignment, ;, AssignmentDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (]
[{, private, final, Node, assignment, ;, AssignmentDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;]
[{, private, final, Node, assignment, ;, AssignmentDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;]
[assignment, ;, AssignmentDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (]
[assignment, ;, AssignmentDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (]
[boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (, node, ., isAssign, (, ), ), ;]
[), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (, node, ., isAssign, (, ), ), ;, assignment, =]
[(, ), ), ;, assignment, =, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, parent, =]
[(, ), ), ;, assignment, =, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, parent, =]
[@, Override, public, void, performRemove, (, ), {, Node, parent, =, assignment, ., getParent, (, ), ;, Node, last, =]
[@, Override, public, void, performRemove, (, ), {, Node, parent, =, assignment, ., getParent, (, ), ;, Node, last, =]
[), {, Node, parent, =, assignment, ., getParent, (, ), ;, Node, last, =, assignment, ., getLastChild, (, ), ;]
[), {, Node, parent, =, assignment, ., getParent, (, ), ;, Node, last, =, assignment, ., getLastChild, (, ), ;]
[=, assignment, ., getParent, (, ), ;, Node, last, =, assignment, ., getLastChild, (, ), ;, assignment, ., removeChild, (]
[getParent, (, ), ;, Node, last, =, assignment, ., getLastChild, (, ), ;, assignment, ., removeChild, (, last, ), ;]
[getParent, (, ), ;, Node, last, =, assignment, ., getLastChild, (, ), ;, assignment, ., removeChild, (, last, ), ;]
[Node, last, =, assignment, ., getLastChild, (, ), ;, assignment, ., removeChild, (, last, ), ;, parent, ., replaceChild, (]
[=, assignment, ., getLastChild, (, ), ;, assignment, ., removeChild, (, last, ), ;, parent, ., replaceChild, (, assignment, ,]
[;, parent, ., replaceChild, (, assignment, ,, last, ), ;, }, @, Override, public, Node, getLValue, (, ), {, return]
[;, parent, ., replaceChild, (, assignment, ,, last, ), ;, }, @, Override, public, Node, getLValue, (, ), {, return]
[(, ), {, return, assignment, ., getFirstChild, (, ), ;, }, @, Override, public, Node, getRValue, (, ), {, return]
[(, ), {, return, assignment, ., getFirstChild, (, ), ;, }, @, Override, public, Node, getRValue, (, ), {, return]
[Node, value, ;, ObjectLiteralPropertyDefinition, (, Node, lit, ,, Node, name, ,, Node, value, ,, boolean, isExtern, ), {, super, (]
[ObjectLiteralPropertyDefinition, (, Node, lit, ,, Node, name, ,, Node, value, ,, boolean, isExtern, ), {, super, (, isExtern, ), ;]
[ObjectLiteralPropertyDefinition, (, Node, lit, ,, Node, name, ,, Node, value, ,, boolean, isExtern, ), {, super, (, isExtern, ), ;]
[,, Node, name, ,, Node, value, ,, boolean, isExtern, ), {, super, (, isExtern, ), ;, this, ., literal, =]
[name, ,, Node, value, ,, boolean, isExtern, ), {, super, (, isExtern, ), ;, this, ., literal, =, lit, ;]
[name, ,, Node, value, ,, boolean, isExtern, ), {, super, (, isExtern, ), ;, this, ., literal, =, lit, ;]
[,, boolean, isExtern, ), {, super, (, isExtern, ), ;, this, ., literal, =, lit, ;, this, ., name, =]
[isExtern, ), {, super, (, isExtern, ), ;, this, ., literal, =, lit, ;, this, ., name, =, name, ;]
[isExtern, ), {, super, (, isExtern, ), ;, this, ., literal, =, lit, ;, this, ., name, =, name, ;]
[(, isExtern, ), ;, this, ., literal, =, lit, ;, this, ., name, =, name, ;, this, ., value, =]
[., name, =, name, ;, this, ., value, =, value, ;, }, @, Override, public, void, performRemove, (, ), {]
[., name, =, name, ;, this, ., value, =, value, ;, }, @, Override, public, void, performRemove, (, ), {]
[;, this, ., value, =, value, ;, }, @, Override, public, void, performRemove, (, ), {, literal, ., removeChild, (]
[), {, literal, ., removeChild, (, name, ), ;, }, @, Override, public, Node, getLValue, (, ), {, switch, (]
[), {, literal, ., removeChild, (, name, ), ;, }, @, Override, public, Node, getLValue, (, ), {, switch, (]
[;, }, @, Override, public, Node, getLValue, (, ), {, switch, (, name, ., getType, (, ), ), {, case]
[;, }, @, Override, public, Node, getLValue, (, ), {, switch, (, name, ., getType, (, ), ), {, case]
[Node, getLValue, (, ), {, switch, (, name, ., getType, (, ), ), {, case, Token, ., SETTER_DEF, :, case]
[Node, getLValue, (, ), {, switch, (, name, ., getType, (, ), ), {, case, Token, ., SETTER_DEF, :, case]
[switch, (, name, ., getType, (, ), ), {, case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :, case]
[switch, (, name, ., getType, (, ), ), {, case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :, case]
[(, ), ), {, case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :, case, Token, ., STRING_KEY, :, return]
[(, ), ), {, case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :, case, Token, ., STRING_KEY, :, return]
[case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :, case, Token, ., STRING_KEY, :, return, IR, ., getprop, (]
[case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :, case, Token, ., STRING_KEY, :, return, IR, ., getprop, (]
[Token, ., GETTER_DEF, :, case, Token, ., STRING_KEY, :, return, IR, ., getprop, (, IR, ., objectlit, (, ), ,]
[Token, ., GETTER_DEF, :, case, Token, ., STRING_KEY, :, return, IR, ., getprop, (, IR, ., objectlit, (, ), ,]
[case, Token, ., STRING_KEY, :, return, IR, ., getprop, (, IR, ., objectlit, (, ), ,, IR, ., string, (]
[case, Token, ., STRING_KEY, :, return, IR, ., getprop, (, IR, ., objectlit, (, ), ,, IR, ., string, (]
[., objectlit, (, ), ,, IR, ., string, (, name, ., getString, (, ), ), ), ;, default, :, throw]
[), ,, IR, ., string, (, name, ., getString, (, ), ), ), ;, default, :, throw, new, IllegalStateException, (]
[default, :, throw, new, IllegalStateException, (, "unexpected", ), ;, }, }, @, Override, public, Node, getRValue, (, ), {, return]
[VarDefinition, extends, Definition, {, private, final, Node, name, ;, VarDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (]
[{, private, final, Node, name, ;, VarDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;]
[{, private, final, Node, name, ;, VarDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;]
[name, ;, VarDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (]
[name, ;, VarDefinition, (, Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (]
[Node, node, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isVarDeclaration, (]
[inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isVarDeclaration, (, node, ), ), ;]
[inExterns, ), {, super, (, inExterns, ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isVarDeclaration, (, node, ), ), ;]
[(, inExterns, ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Preconditions, ., checkArgument, (]
[(, inExterns, ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Preconditions, ., checkArgument, (]
[checkArgument, (, NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Preconditions, ., checkArgument, (, node, ., hasChildren, (, ), ,]
[NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Preconditions, ., checkArgument, (, node, ., hasChildren, (, ), ,, "VAR Declaration of %sshould be assigned a value.", ,]
[NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Preconditions, ., checkArgument, (, node, ., hasChildren, (, ), ,, "VAR Declaration of %sshould be assigned a value.", ,]
[;, Preconditions, ., checkArgument, (, node, ., hasChildren, (, ), ,, "VAR Declaration of %sshould be assigned a value.", ,, node, ., getString, (, ), ), ;]
[., checkArgument, (, node, ., hasChildren, (, ), ,, "VAR Declaration of %sshould be assigned a value.", ,, node, ., getString, (, ), ), ;, name, =]
[(, ), ), ;, name, =, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, var, =]
[(, ), ), ;, name, =, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, var, =]
[node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, var, =, name, ., getParent, (, ), ;]
[node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, var, =, name, ., getParent, (, ), ;]
[Override, public, void, performRemove, (, ), {, Node, var, =, name, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[Override, public, void, performRemove, (, ), {, Node, var, =, name, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[Override, public, void, performRemove, (, ), {, Node, var, =, name, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[{, Node, var, =, name, ., getParent, (, ), ;, Preconditions, ., checkState, (, var, ., getFirstChild, (, ), ==]
[{, Node, var, =, name, ., getParent, (, ), ;, Preconditions, ., checkState, (, var, ., getFirstChild, (, ), ==]
[getParent, (, ), ;, Preconditions, ., checkState, (, var, ., getFirstChild, (, ), ==, var, ., getLastChild, (, ), ,]
[checkState, (, var, ., getFirstChild, (, ), ==, var, ., getLastChild, (, ), ,, "AST should be normalized first", ), ;, Node, parent, =]
[checkState, (, var, ., getFirstChild, (, ), ==, var, ., getLastChild, (, ), ,, "AST should be normalized first", ), ;, Node, parent, =]
[., getLastChild, (, ), ,, "AST should be normalized first", ), ;, Node, parent, =, var, ., getParent, (, ), ;, Node, rValue, =]
[., getLastChild, (, ), ,, "AST should be normalized first", ), ;, Node, parent, =, var, ., getParent, (, ), ;, Node, rValue, =]
[), ;, Node, parent, =, var, ., getParent, (, ), ;, Node, rValue, =, name, ., removeFirstChild, (, ), ;]
[), ;, Node, parent, =, var, ., getParent, (, ), ;, Node, rValue, =, name, ., removeFirstChild, (, ), ;]
[=, var, ., getParent, (, ), ;, Node, rValue, =, name, ., removeFirstChild, (, ), ;, Preconditions, ., checkState, (]
[var, ., getParent, (, ), ;, Node, rValue, =, name, ., removeFirstChild, (, ), ;, Preconditions, ., checkState, (, !]
[var, ., getParent, (, ), ;, Node, rValue, =, name, ., removeFirstChild, (, ), ;, Preconditions, ., checkState, (, !]
[rValue, =, name, ., removeFirstChild, (, ), ;, Preconditions, ., checkState, (, !, parent, ., isFor, (, ), ), ;]
[rValue, =, name, ., removeFirstChild, (, ), ;, Preconditions, ., checkState, (, !, parent, ., isFor, (, ), ), ;]
[removeFirstChild, (, ), ;, Preconditions, ., checkState, (, !, parent, ., isFor, (, ), ), ;, parent, ., replaceChild, (]
[), ;, Preconditions, ., checkState, (, !, parent, ., isFor, (, ), ), ;, parent, ., replaceChild, (, var, ,]
[), ;, Preconditions, ., checkState, (, !, parent, ., isFor, (, ), ), ;, parent, ., replaceChild, (, var, ,]
[checkState, (, !, parent, ., isFor, (, ), ), ;, parent, ., replaceChild, (, var, ,, NodeUtil, ., newExpr, (]
[var, ,, NodeUtil, ., newExpr, (, rValue, ), ), ;, }, @, Override, public, Node, getLValue, (, ), {, return]
[Override, public, Node, getLValue, (, ), {, return, name, ;, }, @, Override, public, Node, getRValue, (, ), {, return]
[Override, public, Node, getLValue, (, ), {, return, name, ;, }, @, Override, public, Node, getRValue, (, ), {, return]
