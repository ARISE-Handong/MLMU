[Normalize, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, boolean, assertOnChange, ;, private, static, final, boolean, CONVERT_WHILE_TO_FOR, =]
[compiler, ;, private, final, boolean, assertOnChange, ;, private, static, final, boolean, CONVERT_WHILE_TO_FOR, =, true, ;, static, final, boolean, MAKE_LOCAL_NAMES_UNIQUE, =]
[static, final, boolean, CONVERT_WHILE_TO_FOR, =, true, ;, static, final, boolean, MAKE_LOCAL_NAMES_UNIQUE, =, true, ;, public, static, final, DiagnosticType, CATCH_BLOCK_VAR_ERROR, =]
[static, final, boolean, CONVERT_WHILE_TO_FOR, =, true, ;, static, final, boolean, MAKE_LOCAL_NAMES_UNIQUE, =, true, ;, public, static, final, DiagnosticType, CATCH_BLOCK_VAR_ERROR, =]
[=, true, ;, static, final, boolean, MAKE_LOCAL_NAMES_UNIQUE, =, true, ;, public, static, final, DiagnosticType, CATCH_BLOCK_VAR_ERROR, =, DiagnosticType, ., error, (]
[;, static, final, boolean, MAKE_LOCAL_NAMES_UNIQUE, =, true, ;, public, static, final, DiagnosticType, CATCH_BLOCK_VAR_ERROR, =, DiagnosticType, ., error, (, "JSC_CATCH_BLOCK_VAR_ERROR", ,]
[;, static, final, boolean, MAKE_LOCAL_NAMES_UNIQUE, =, true, ;, public, static, final, DiagnosticType, CATCH_BLOCK_VAR_ERROR, =, DiagnosticType, ., error, (, "JSC_CATCH_BLOCK_VAR_ERROR", ,]
[final, boolean, MAKE_LOCAL_NAMES_UNIQUE, =, true, ;, public, static, final, DiagnosticType, CATCH_BLOCK_VAR_ERROR, =, DiagnosticType, ., error, (, "JSC_CATCH_BLOCK_VAR_ERROR", ,, "The use of scope variable {0} is not allowed within a catch block ", +]
[DiagnosticType, ., error, (, "JSC_CATCH_BLOCK_VAR_ERROR", ,, "The use of scope variable {0} is not allowed within a catch block ", +, "with a catch exception of the same name.", ), ;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {]
[DiagnosticType, ., error, (, "JSC_CATCH_BLOCK_VAR_ERROR", ,, "The use of scope variable {0} is not allowed within a catch block ", +, "with a catch exception of the same name.", ), ;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {]
["JSC_CATCH_BLOCK_VAR_ERROR", ,, "The use of scope variable {0} is not allowed within a catch block ", +, "with a catch exception of the same name.", ), ;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =]
["The use of scope variable {0} is not allowed within a catch block ", +, "with a catch exception of the same name.", ), ;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =, compiler, ;]
["The use of scope variable {0} is not allowed within a catch block ", +, "with a catch exception of the same name.", ), ;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =, compiler, ;]
[;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =, compiler, ;, this, ., assertOnChange, =]
[assertOnChange, ;, }, static, Node, parseAndNormalizeSyntheticCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =]
[assertOnChange, ;, }, static, Node, parseAndNormalizeSyntheticCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =]
[Node, parseAndNormalizeSyntheticCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =, compiler, ., parseSyntheticCode, (]
[AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =, compiler, ., parseSyntheticCode, (, code, ), ;]
[AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =, compiler, ., parseSyntheticCode, (, code, ), ;]
[code, ,, String, prefix, ), {, Node, js, =, compiler, ., parseSyntheticCode, (, code, ), ;, NodeTraversal, ., traverse, (]
[String, prefix, ), {, Node, js, =, compiler, ., parseSyntheticCode, (, code, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), {, Node, js, =, compiler, ., parseSyntheticCode, (, code, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,]
[compiler, ., parseSyntheticCode, (, code, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (]
[parseSyntheticCode, (, code, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,]
[;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;]
[;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;]
[(, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (]
[,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,]
[., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (]
[compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (]
[compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (]
[NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (, compiler, ., getUniqueNameIdSupplier, (, ), ,]
[js, ,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (, compiler, ., getUniqueNameIdSupplier, (, ), ,, prefix, ), ), ), ;, return]
[js, ;, }, static, Node, parseAndNormalizeTestCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =]
[js, ;, }, static, Node, parseAndNormalizeTestCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =]
[Node, parseAndNormalizeTestCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =, compiler, ., parseTestCode, (]
[AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =, compiler, ., parseTestCode, (, code, ), ;]
[AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =, compiler, ., parseTestCode, (, code, ), ;]
[code, ,, String, prefix, ), {, Node, js, =, compiler, ., parseTestCode, (, code, ), ;, NodeTraversal, ., traverse, (]
[String, prefix, ), {, Node, js, =, compiler, ., parseTestCode, (, code, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), {, Node, js, =, compiler, ., parseTestCode, (, code, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,]
[compiler, ., parseTestCode, (, code, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (]
[parseTestCode, (, code, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,]
[;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;]
[;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;]
[(, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (]
[,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,]
[,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, ), ), ;, return]
[new, MakeDeclaredNamesUnique, (, ), ), ;, return, js, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (]
[), ;, return, js, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw]
[js, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (]
[js, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (]
[}, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (, "Normalize constraints violated:\n", +]
[(, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (, "Normalize constraints violated:\n", +, changeDescription, ), ;, }]
[(, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (, "Normalize constraints violated:\n", +, changeDescription, ), ;, }]
[compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[(, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,, new, NormalizeStatements, (]
[void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,, new, NormalizeStatements, (, compiler, ,]
[Node, root, ), {, new, NodeTraversal, (, compiler, ,, new, NormalizeStatements, (, compiler, ,, assertOnChange, ), ), ., traverseRoots, (]
[), {, new, NodeTraversal, (, compiler, ,, new, NormalizeStatements, (, compiler, ,, assertOnChange, ), ), ., traverseRoots, (, externs, ,]
[compiler, ,, new, NormalizeStatements, (, compiler, ,, assertOnChange, ), ), ., traverseRoots, (, externs, ,, root, ), ;, if, (]
[,, assertOnChange, ), ), ., traverseRoots, (, externs, ,, root, ), ;, if, (, MAKE_LOCAL_NAMES_UNIQUE, ), {, MakeDeclaredNamesUnique, renamer, =]
[,, root, ), ;, if, (, MAKE_LOCAL_NAMES_UNIQUE, ), {, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique, (, ), ;, NodeTraversal, t, =]
[;, if, (, MAKE_LOCAL_NAMES_UNIQUE, ), {, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique, (, ), ;, NodeTraversal, t, =, new, NodeTraversal, (]
[(, MAKE_LOCAL_NAMES_UNIQUE, ), {, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique, (, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,]
[{, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique, (, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, renamer, ), ;]
[{, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique, (, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, renamer, ), ;]
[new, MakeDeclaredNamesUnique, (, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, renamer, ), ;, t, ., traverseRoots, (]
[(, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, renamer, ), ;, t, ., traverseRoots, (, externs, ,]
[t, =, new, NodeTraversal, (, compiler, ,, renamer, ), ;, t, ., traverseRoots, (, externs, ,, root, ), ;, }]
[new, NodeTraversal, (, compiler, ,, renamer, ), ;, t, ., traverseRoots, (, externs, ,, root, ), ;, }, removeDuplicateDeclarations, (]
[(, compiler, ,, renamer, ), ;, t, ., traverseRoots, (, externs, ,, root, ), ;, }, removeDuplicateDeclarations, (, externs, ,]
[renamer, ), ;, t, ., traverseRoots, (, externs, ,, root, ), ;, }, removeDuplicateDeclarations, (, externs, ,, root, ), ;]
[renamer, ), ;, t, ., traverseRoots, (, externs, ,, root, ), ;, }, removeDuplicateDeclarations, (, externs, ,, root, ), ;]
[t, ., traverseRoots, (, externs, ,, root, ), ;, }, removeDuplicateDeclarations, (, externs, ,, root, ), ;, new, PropagateConstantAnnotationsOverVars, (]
[traverseRoots, (, externs, ,, root, ), ;, }, removeDuplicateDeclarations, (, externs, ,, root, ), ;, new, PropagateConstantAnnotationsOverVars, (, compiler, ,]
[), ;, }, removeDuplicateDeclarations, (, externs, ,, root, ), ;, new, PropagateConstantAnnotationsOverVars, (, compiler, ,, assertOnChange, ), ., process, (]
[}, removeDuplicateDeclarations, (, externs, ,, root, ), ;, new, PropagateConstantAnnotationsOverVars, (, compiler, ,, assertOnChange, ), ., process, (, externs, ,]
[), ;, new, PropagateConstantAnnotationsOverVars, (, compiler, ,, assertOnChange, ), ., process, (, externs, ,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =]
[compiler, ,, assertOnChange, ), ., process, (, externs, ,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;]
[compiler, ,, assertOnChange, ), ., process, (, externs, ,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;]
[., process, (, externs, ,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse, (]
[(, externs, ,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, findExposeAnnotations, ), ;, if, (]
[=, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, findExposeAnnotations, ), ;, if, (, !]
[=, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, findExposeAnnotations, ), ;, if, (, !]
[=, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, findExposeAnnotations, ), ;, if, (, !]
[(, compiler, ,, root, ,, findExposeAnnotations, ), ;, if, (, !, findExposeAnnotations, ., exposedProperties, ., isEmpty, (, ), ), {]
[(, compiler, ,, root, ,, findExposeAnnotations, ), ;, if, (, !, findExposeAnnotations, ., exposedProperties, ., isEmpty, (, ), ), {]
[,, findExposeAnnotations, ), ;, if, (, !, findExposeAnnotations, ., exposedProperties, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (]
[), ;, if, (, !, findExposeAnnotations, ., exposedProperties, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,]
[if, (, !, findExposeAnnotations, ., exposedProperties, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[findExposeAnnotations, ., exposedProperties, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (]
[findExposeAnnotations, ., exposedProperties, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties, ), ), ;, }, if, (]
[., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties, ), ), ;, }, if, (, !]
[., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties, ), ), ;, }, if, (, !]
[., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties, ), ), ;, }, if, (, !]
[., exposedProperties, ), ), ;, }, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {]
[., exposedProperties, ), ), ;, }, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {]
[;, }, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, compiler, ., setLifeCycleStage, (]
[;, }, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, compiler, ., setLifeCycleStage, (]
[NORMALIZED, ), ;, }, }, private, static, class, FindExposeAnnotations, extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, exposedProperties, =]
[NORMALIZED, ), ;, }, }, private, static, class, FindExposeAnnotations, extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, exposedProperties, =]
[), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isExprAssign, (]
[Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, Node, assign, =]
[Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, Node, assign, =]
[NodeUtil, ., isExprAssign, (, n, ), ), {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =]
[NodeUtil, ., isExprAssign, (, n, ), ), {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =]
[Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (]
[Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (]
[Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (]
[(, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (, lhs, ., isGetProp, (, ), &&]
[;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (, lhs, ., isGetProp, (, ), &&, isMarkedExpose, (]
[assign, ., getFirstChild, (, ), ;, if, (, lhs, ., isGetProp, (, ), &&, isMarkedExpose, (, assign, ), ), {]
[assign, ., getFirstChild, (, ), ;, if, (, lhs, ., isGetProp, (, ), &&, isMarkedExpose, (, assign, ), ), {]
[), ;, if, (, lhs, ., isGetProp, (, ), &&, isMarkedExpose, (, assign, ), ), {, exposedProperties, ., add, (]
[), ;, if, (, lhs, ., isGetProp, (, ), &&, isMarkedExpose, (, assign, ), ), {, exposedProperties, ., add, (]
[), ;, if, (, lhs, ., isGetProp, (, ), &&, isMarkedExpose, (, assign, ), ), {, exposedProperties, ., add, (]
[exposedProperties, ., add, (, lhs, ., getLastChild, (, ), ., getString, (, ), ), ;, }, }, else, if, (]
[exposedProperties, ., add, (, lhs, ., getLastChild, (, ), ., getString, (, ), ), ;, }, }, else, if, (]
[exposedProperties, ., add, (, lhs, ., getLastChild, (, ), ., getString, (, ), ), ;, }, }, else, if, (]
[getLastChild, (, ), ., getString, (, ), ), ;, }, }, else, if, (, n, ., isStringKey, (, ), &&]
[), ., getString, (, ), ), ;, }, }, else, if, (, n, ., isStringKey, (, ), &&, isMarkedExpose, (]
[), ), ;, }, }, else, if, (, n, ., isStringKey, (, ), &&, isMarkedExpose, (, n, ), ), {]
[), ), ;, }, }, else, if, (, n, ., isStringKey, (, ), &&, isMarkedExpose, (, n, ), ), {]
[}, else, if, (, n, ., isStringKey, (, ), &&, isMarkedExpose, (, n, ), ), {, exposedProperties, ., add, (]
[}, else, if, (, n, ., isStringKey, (, ), &&, isMarkedExpose, (, n, ), ), {, exposedProperties, ., add, (]
[n, ., getString, (, ), ), ;, }, }, private, boolean, isMarkedExpose, (, Node, n, ), {, JSDocInfo, info, =]
[n, ., getString, (, ), ), ;, }, }, private, boolean, isMarkedExpose, (, Node, n, ), {, JSDocInfo, info, =]
[}, }, private, boolean, isMarkedExpose, (, Node, n, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, return]
[}, }, private, boolean, isMarkedExpose, (, Node, n, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, return]
[}, }, private, boolean, isMarkedExpose, (, Node, n, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, return]
[private, boolean, isMarkedExpose, (, Node, n, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, return, info, !=]
[isMarkedExpose, (, Node, n, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[isMarkedExpose, (, Node, n, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, exposedProperties, ;, RewriteExposedProperties, (, Set, <, String, >, exposedProperties, ), {]
[extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, exposedProperties, ;, RewriteExposedProperties, (, Set, <, String, >, exposedProperties, ), {]
[final, Set, <, String, >, exposedProperties, ;, RewriteExposedProperties, (, Set, <, String, >, exposedProperties, ), {, this, ., exposedProperties, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, String, propName, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, String, propName, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, String, propName, =]
[isGetProp, (, ), ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[isGetProp, (, ), ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[{, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, exposedProperties, ., contains, (]
[(, ), ., getString, (, ), ;, if, (, exposedProperties, ., contains, (, propName, ), ), {, Node, obj, =]
[(, ), ., getString, (, ), ;, if, (, exposedProperties, ., contains, (, propName, ), ), {, Node, obj, =]
[exposedProperties, ., contains, (, propName, ), ), {, Node, obj, =, n, ., removeFirstChild, (, ), ;, Node, prop, =]
[exposedProperties, ., contains, (, propName, ), ), {, Node, obj, =, n, ., removeFirstChild, (, ), ;, Node, prop, =]
[), {, Node, obj, =, n, ., removeFirstChild, (, ), ;, Node, prop, =, n, ., removeFirstChild, (, ), ;]
[), {, Node, obj, =, n, ., removeFirstChild, (, ), ;, Node, prop, =, n, ., removeFirstChild, (, ), ;]
[), {, Node, obj, =, n, ., removeFirstChild, (, ), ;, Node, prop, =, n, ., removeFirstChild, (, ), ;]
[(, ), ;, Node, prop, =, n, ., removeFirstChild, (, ), ;, n, ., getParent, (, ), ., replaceChild, (]
[;, Node, prop, =, n, ., removeFirstChild, (, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[;, Node, prop, =, n, ., removeFirstChild, (, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[n, ., removeFirstChild, (, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, IR, ., getelem, (]
[removeFirstChild, (, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, IR, ., getelem, (, obj, ,]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, IR, ., getelem, (, obj, ,, prop, ), ), ;]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, IR, ., getelem, (, obj, ,, prop, ), ), ;]
[., getelem, (, obj, ,, prop, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[., getelem, (, obj, ,, prop, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[., reportCodeChange, (, ), ;, }, }, else, if, (, n, ., isStringKey, (, ), ), {, String, propName, =]
[., reportCodeChange, (, ), ;, }, }, else, if, (, n, ., isStringKey, (, ), ), {, String, propName, =]
[if, (, n, ., isStringKey, (, ), ), {, String, propName, =, n, ., getString, (, ), ;, if, (]
[if, (, n, ., isStringKey, (, ), ), {, String, propName, =, n, ., getString, (, ), ;, if, (]
[isStringKey, (, ), ), {, String, propName, =, n, ., getString, (, ), ;, if, (, exposedProperties, ., contains, (]
[{, String, propName, =, n, ., getString, (, ), ;, if, (, exposedProperties, ., contains, (, propName, ), ), {]
[{, String, propName, =, n, ., getString, (, ), ;, if, (, exposedProperties, ., contains, (, propName, ), ), {]
[getString, (, ), ;, if, (, exposedProperties, ., contains, (, propName, ), ), {, n, ., setQuotedString, (, ), ;]
[getString, (, ), ;, if, (, exposedProperties, ., contains, (, propName, ), ), {, n, ., setQuotedString, (, ), ;]
[{, private, final, AbstractCompiler, compiler, ;, private, final, boolean, assertOnChange, ;, PropagateConstantAnnotationsOverVars, (, AbstractCompiler, compiler, ,, boolean, forbidChanges, ), {]
[{, private, final, AbstractCompiler, compiler, ;, private, final, boolean, assertOnChange, ;, PropagateConstantAnnotationsOverVars, (, AbstractCompiler, compiler, ,, boolean, forbidChanges, ), {]
[compiler, ;, private, final, boolean, assertOnChange, ;, PropagateConstantAnnotationsOverVars, (, AbstractCompiler, compiler, ,, boolean, forbidChanges, ), {, this, ., compiler, =]
[private, final, boolean, assertOnChange, ;, PropagateConstantAnnotationsOverVars, (, AbstractCompiler, compiler, ,, boolean, forbidChanges, ), {, this, ., compiler, =, compiler, ;]
[private, final, boolean, assertOnChange, ;, PropagateConstantAnnotationsOverVars, (, AbstractCompiler, compiler, ,, boolean, forbidChanges, ), {, this, ., compiler, =, compiler, ;]
[;, PropagateConstantAnnotationsOverVars, (, AbstractCompiler, compiler, ,, boolean, forbidChanges, ), {, this, ., compiler, =, compiler, ;, this, ., assertOnChange, =]
[this, ., assertOnChange, =, forbidChanges, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., assertOnChange, =, forbidChanges, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[=, forbidChanges, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,, this, ), ., traverseRoots, (]
[(, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,, this, ), ., traverseRoots, (, externs, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, if, (]
[{, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, JSDocInfo, info, =]
[getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, JSDocInfo, info, =, null, ;, Var, var, =]
[getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, JSDocInfo, info, =, null, ;, Var, var, =]
[getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, JSDocInfo, info, =, null, ;, Var, var, =]
[{, return, ;, }, JSDocInfo, info, =, null, ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[{, return, ;, }, JSDocInfo, info, =, null, ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[=, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=]
[getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, ), {]
[), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, info, =]
[), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, info, =]
[;, if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =]
[;, if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =]
[if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (]
[if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (]
[if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (]
[var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (, info, !=]
[null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (, info, !=, null, &&]
[null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (, info, !=, null, &&]
[getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (, info, !=, null, &&, info, ., isConstant, (, ), ), ||]
[getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (, info, !=, null, &&, info, ., isConstant, (, ), ), ||]
[}, boolean, shouldBeConstant, =, (, info, !=, null, &&, info, ., isConstant, (, ), ), ||, NodeUtil, ., isConstantByConvention, (]
[}, boolean, shouldBeConstant, =, (, info, !=, null, &&, info, ., isConstant, (, ), ), ||, NodeUtil, ., isConstantByConvention, (]
[!=, null, &&, info, ., isConstant, (, ), ), ||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,]
[&&, info, ., isConstant, (, ), ), ||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,]
[), ||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ;, boolean, isMarkedConstant, =]
[), ||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ;, boolean, isMarkedConstant, =]
[isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (]
[isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (]
[,, n, ,, parent, ), ;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (]
[,, n, ,, parent, ), ;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (]
[,, parent, ), ;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, shouldBeConstant, &&]
[parent, ), ;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, shouldBeConstant, &&, !]
[=, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, shouldBeConstant, &&, !, isMarkedConstant, ), {, if, (]
[., IS_CONSTANT_NAME, ), ;, if, (, shouldBeConstant, &&, !, isMarkedConstant, ), {, if, (, assertOnChange, ), {, String, name, =]
[., IS_CONSTANT_NAME, ), ;, if, (, shouldBeConstant, &&, !, isMarkedConstant, ), {, if, (, assertOnChange, ), {, String, name, =]
[&&, !, isMarkedConstant, ), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +]
[assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +]
[{, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +]
[name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +]
[n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +]
[n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +]
[n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +]
["  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }]
["  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }]
["\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (]
["\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (]
[n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[{, final, private, AbstractCompiler, compiler, ;, final, private, boolean, checkUserDeclarations, ;, VerifyConstants, (, AbstractCompiler, compiler, ,, boolean, checkUserDeclarations, ), {]
[{, final, private, AbstractCompiler, compiler, ;, final, private, boolean, checkUserDeclarations, ;, VerifyConstants, (, AbstractCompiler, compiler, ,, boolean, checkUserDeclarations, ), {]
[compiler, ;, final, private, boolean, checkUserDeclarations, ;, VerifyConstants, (, AbstractCompiler, compiler, ,, boolean, checkUserDeclarations, ), {, this, ., compiler, =]
[final, private, boolean, checkUserDeclarations, ;, VerifyConstants, (, AbstractCompiler, compiler, ,, boolean, checkUserDeclarations, ), {, this, ., compiler, =, compiler, ;]
[final, private, boolean, checkUserDeclarations, ;, VerifyConstants, (, AbstractCompiler, compiler, ,, boolean, checkUserDeclarations, ), {, this, ., compiler, =, compiler, ;]
[;, VerifyConstants, (, AbstractCompiler, compiler, ,, boolean, checkUserDeclarations, ), {, this, ., compiler, =, compiler, ;, this, ., checkUserDeclarations, =]
[=, checkUserDeclarations, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Node, externsAndJs, =]
[=, checkUserDeclarations, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Node, externsAndJs, =]
[public, void, process, (, Node, externs, ,, Node, root, ), {, Node, externsAndJs, =, root, ., getParent, (, ), ;]
[public, void, process, (, Node, externs, ,, Node, root, ), {, Node, externsAndJs, =, root, ., getParent, (, ), ;]
[Node, externs, ,, Node, root, ), {, Node, externsAndJs, =, root, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[Node, externs, ,, Node, root, ), {, Node, externsAndJs, =, root, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[,, Node, root, ), {, Node, externsAndJs, =, root, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=]
[), {, Node, externsAndJs, =, root, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;]
[), {, Node, externsAndJs, =, root, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;]
[=, root, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (]
[=, root, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (]
[(, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (]
[., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;]
[., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;]
[!=, null, ), ;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;, NodeTraversal, ., traverseRoots, (]
[), ;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,]
[), ;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,]
[checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (]
[externsAndJs, ., hasChild, (, externs, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,]
[(, externs, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,]
[newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, private, Map, <, String, ,, Boolean, >, constantMap, =]
[newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, private, Map, <, String, ,, Boolean, >, constantMap, =]
[), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, String, name, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, String, name, =]
[if, (, n, ., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[if, (, n, ., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[if, (, n, ., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[;, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, boolean, isConst, =]
[;, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, boolean, isConst, =]
[., getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, boolean, isConst, =, n, ., getBooleanProp, (]
[., getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, boolean, isConst, =, n, ., getBooleanProp, (]
[), ), {, return, ;, }, boolean, isConst, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (]
[boolean, isConst, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, checkUserDeclarations, ), {, boolean, expectedConst, =]
[getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, checkUserDeclarations, ), {, boolean, expectedConst, =, false, ;, CodingConvention, convention, =]
[getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, checkUserDeclarations, ), {, boolean, expectedConst, =, false, ;, CodingConvention, convention, =]
[(, checkUserDeclarations, ), {, boolean, expectedConst, =, false, ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[(, checkUserDeclarations, ), {, boolean, expectedConst, =, false, ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[(, checkUserDeclarations, ), {, boolean, expectedConst, =, false, ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[boolean, expectedConst, =, false, ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, NodeUtil, ., isConstantName, (]
[false, ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, NodeUtil, ., isConstantName, (, n, ), ||]
[false, ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, NodeUtil, ., isConstantName, (, n, ), ||]
[=, compiler, ., getCodingConvention, (, ), ;, if, (, NodeUtil, ., isConstantName, (, n, ), ||, NodeUtil, ., isConstantByConvention, (]
[., getCodingConvention, (, ), ;, if, (, NodeUtil, ., isConstantName, (, n, ), ||, NodeUtil, ., isConstantByConvention, (, convention, ,]
[(, ), ;, if, (, NodeUtil, ., isConstantName, (, n, ), ||, NodeUtil, ., isConstantByConvention, (, convention, ,, n, ,]
[(, NodeUtil, ., isConstantName, (, n, ), ||, NodeUtil, ., isConstantByConvention, (, convention, ,, n, ,, parent, ), ), {]
[., isConstantName, (, n, ), ||, NodeUtil, ., isConstantByConvention, (, convention, ,, n, ,, parent, ), ), {, expectedConst, =]
[||, NodeUtil, ., isConstantByConvention, (, convention, ,, n, ,, parent, ), ), {, expectedConst, =, true, ;, }, else, {]
[., isConstantByConvention, (, convention, ,, n, ,, parent, ), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =]
[n, ,, parent, ), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, JSDocInfo, info, =]
[{, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, JSDocInfo, info, =, null, ;, Var, var, =]
[{, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, JSDocInfo, info, =, null, ;, Var, var, =]
[{, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, JSDocInfo, info, =, null, ;, Var, var, =]
[expectedConst, =, false, ;, JSDocInfo, info, =, null, ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[expectedConst, =, false, ;, JSDocInfo, info, =, null, ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[=, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=]
[getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, ), {]
[), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, info, =]
[), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, info, =]
[), ;, if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, if, (]
[), ;, if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, if, (]
[), ;, if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, if, (]
[if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, if, (, info, !=]
[var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&]
[var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&]
[var, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isConstant, (, ), ), {]
[getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isConstant, (, ), ), {, expectedConst, =]
[if, (, info, !=, null, &&, info, ., isConstant, (, ), ), {, expectedConst, =, true, ;, }, else, {]
[info, !=, null, &&, info, ., isConstant, (, ), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =]
[isConstant, (, ), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, }, }, if, (]
[), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, }, }, if, (, expectedConst, ), {]
[), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, }, }, if, (, expectedConst, ), {]
[true, ;, }, else, {, expectedConst, =, false, ;, }, }, if, (, expectedConst, ), {, Preconditions, ., checkState, (]
[true, ;, }, else, {, expectedConst, =, false, ;, }, }, if, (, expectedConst, ), {, Preconditions, ., checkState, (]
[}, else, {, expectedConst, =, false, ;, }, }, if, (, expectedConst, ), {, Preconditions, ., checkState, (, expectedConst, ==]
[{, expectedConst, =, false, ;, }, }, if, (, expectedConst, ), {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,]
[=, false, ;, }, }, if, (, expectedConst, ), {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,]
[(, expectedConst, ), {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {]
[(, expectedConst, ), {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {]
[Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {, Preconditions, ., checkState, (]
[Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {, Preconditions, ., checkState, (]
[checkState, (, expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {, Preconditions, ., checkState, (, expectedConst, ==]
[expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,]
[isConst, ,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant.", ,]
[else, {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant.", ,, name, ), ;, }, }, Boolean, value, =]
[else, {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant.", ,, name, ), ;, }, }, Boolean, value, =]
[checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant.", ,, name, ), ;, }, }, Boolean, value, =, constantMap, ., get, (]
[,, "The name %s should not be annotated as constant.", ,, name, ), ;, }, }, Boolean, value, =, constantMap, ., get, (, name, ), ;, if, (]
[,, "The name %s should not be annotated as constant.", ,, name, ), ;, }, }, Boolean, value, =, constantMap, ., get, (, name, ), ;, if, (]
[,, name, ), ;, }, }, Boolean, value, =, constantMap, ., get, (, name, ), ;, if, (, value, ==]
[;, }, }, Boolean, value, =, constantMap, ., get, (, name, ), ;, if, (, value, ==, null, ), {]
[;, }, }, Boolean, value, =, constantMap, ., get, (, name, ), ;, if, (, value, ==, null, ), {]
[value, =, constantMap, ., get, (, name, ), ;, if, (, value, ==, null, ), {, constantMap, ., put, (]
[constantMap, ., get, (, name, ), ;, if, (, value, ==, null, ), {, constantMap, ., put, (, name, ,]
[;, if, (, value, ==, null, ), {, constantMap, ., put, (, name, ,, isConst, ), ;, }, else, {]
[;, if, (, value, ==, null, ), {, constantMap, ., put, (, name, ,, isConst, ), ;, }, else, {]
[==, null, ), {, constantMap, ., put, (, name, ,, isConst, ), ;, }, else, {, Preconditions, ., checkState, (]
[==, null, ), {, constantMap, ., put, (, name, ,, isConst, ), ;, }, else, {, Preconditions, ., checkState, (]
[==, null, ), {, constantMap, ., put, (, name, ,, isConst, ), ;, }, else, {, Preconditions, ., checkState, (]
[put, (, name, ,, isConst, ), ;, }, else, {, Preconditions, ., checkState, (, value, ., booleanValue, (, ), ==]
[name, ,, isConst, ), ;, }, else, {, Preconditions, ., checkState, (, value, ., booleanValue, (, ), ==, isConst, ,]
[isConst, ), ;, }, else, {, Preconditions, ., checkState, (, value, ., booleanValue, (, ), ==, isConst, ,, "The name %s is not consistently annotated as constant.", ,]
[{, private, final, AbstractCompiler, compiler, ;, private, final, boolean, assertOnChange, ;, NormalizeStatements, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {]
[{, private, final, AbstractCompiler, compiler, ;, private, final, boolean, assertOnChange, ;, NormalizeStatements, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {]
[compiler, ;, private, final, boolean, assertOnChange, ;, NormalizeStatements, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =]
[private, final, boolean, assertOnChange, ;, NormalizeStatements, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =, compiler, ;]
[private, final, boolean, assertOnChange, ;, NormalizeStatements, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =, compiler, ;]
[;, NormalizeStatements, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =, compiler, ;, this, ., assertOnChange, =]
[=, compiler, ;, this, ., assertOnChange, =, assertOnChange, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (]
[., assertOnChange, =, assertOnChange, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw]
[assertOnChange, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (]
[assertOnChange, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (]
[}, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (, "Normalize constraints violated:\n", +]
[(, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (, "Normalize constraints violated:\n", +, changeDescription, ), ;, }]
[(, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (, "Normalize constraints violated:\n", +, changeDescription, ), ;, }]
[(, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, doStatementNormalizations, (]
[@, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, doStatementNormalizations, (, t, ,]
[public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, doStatementNormalizations, (, t, ,, n, ,]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, doStatementNormalizations, (, t, ,, n, ,, parent, ), ;, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., WHILE, :, if, (]
[n, ., getType, (, ), ), {, case, Token, ., WHILE, :, if, (, CONVERT_WHILE_TO_FOR, ), {, Node, expr, =]
[n, ., getType, (, ), ), {, case, Token, ., WHILE, :, if, (, CONVERT_WHILE_TO_FOR, ), {, Node, expr, =]
[{, case, Token, ., WHILE, :, if, (, CONVERT_WHILE_TO_FOR, ), {, Node, expr, =, n, ., getFirstChild, (, ), ;]
[{, case, Token, ., WHILE, :, if, (, CONVERT_WHILE_TO_FOR, ), {, Node, expr, =, n, ., getFirstChild, (, ), ;]
[WHILE, :, if, (, CONVERT_WHILE_TO_FOR, ), {, Node, expr, =, n, ., getFirstChild, (, ), ;, n, ., setType, (]
[WHILE, :, if, (, CONVERT_WHILE_TO_FOR, ), {, Node, expr, =, n, ., getFirstChild, (, ), ;, n, ., setType, (]
[expr, =, n, ., getFirstChild, (, ), ;, n, ., setType, (, Token, ., FOR, ), ;, Node, empty, =]
[expr, =, n, ., getFirstChild, (, ), ;, n, ., setType, (, Token, ., FOR, ), ;, Node, empty, =]
[), ;, n, ., setType, (, Token, ., FOR, ), ;, Node, empty, =, IR, ., empty, (, ), ;]
[), ;, n, ., setType, (, Token, ., FOR, ), ;, Node, empty, =, IR, ., empty, (, ), ;]
[setType, (, Token, ., FOR, ), ;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (]
[., FOR, ), ;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, n, ), ;]
[., FOR, ), ;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, n, ), ;]
[Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, n, ), ;, n, ., addChildBefore, (]
[=, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, n, ), ;, n, ., addChildBefore, (, empty, ,]
[empty, (, ), ;, empty, ., copyInformationFrom, (, n, ), ;, n, ., addChildBefore, (, empty, ,, expr, ), ;]
[empty, (, ), ;, empty, ., copyInformationFrom, (, n, ), ;, n, ., addChildBefore, (, empty, ,, expr, ), ;]
[empty, ., copyInformationFrom, (, n, ), ;, n, ., addChildBefore, (, empty, ,, expr, ), ;, n, ., addChildAfter, (]
[empty, ., copyInformationFrom, (, n, ), ;, n, ., addChildBefore, (, empty, ,, expr, ), ;, n, ., addChildAfter, (]
[;, n, ., addChildBefore, (, empty, ,, expr, ), ;, n, ., addChildAfter, (, empty, ., cloneNode, (, ), ,]
[addChildBefore, (, empty, ,, expr, ), ;, n, ., addChildAfter, (, empty, ., cloneNode, (, ), ,, expr, ), ;]
[empty, ,, expr, ), ;, n, ., addChildAfter, (, empty, ., cloneNode, (, ), ,, expr, ), ;, reportCodeChange, (]
[addChildAfter, (, empty, ., cloneNode, (, ), ,, expr, ), ;, reportCodeChange, (, "WHILE node", ), ;, }, break, ;, case]
[addChildAfter, (, empty, ., cloneNode, (, ), ,, expr, ), ;, reportCodeChange, (, "WHILE node", ), ;, }, break, ;, case]
[cloneNode, (, ), ,, expr, ), ;, reportCodeChange, (, "WHILE node", ), ;, }, break, ;, case, Token, ., FUNCTION, :]
[), ,, expr, ), ;, reportCodeChange, (, "WHILE node", ), ;, }, break, ;, case, Token, ., FUNCTION, :, normalizeFunctionDeclaration, (]
[(, "WHILE node", ), ;, }, break, ;, case, Token, ., FUNCTION, :, normalizeFunctionDeclaration, (, n, ), ;, break, ;, case]
[(, "WHILE node", ), ;, }, break, ;, case, Token, ., FUNCTION, :, normalizeFunctionDeclaration, (, n, ), ;, break, ;, case]
[break, ;, case, Token, ., FUNCTION, :, normalizeFunctionDeclaration, (, n, ), ;, break, ;, case, Token, ., NAME, :, case]
[break, ;, case, Token, ., FUNCTION, :, normalizeFunctionDeclaration, (, n, ), ;, break, ;, case, Token, ., NAME, :, case]
[FUNCTION, :, normalizeFunctionDeclaration, (, n, ), ;, break, ;, case, Token, ., NAME, :, case, Token, ., STRING, :, case]
[FUNCTION, :, normalizeFunctionDeclaration, (, n, ), ;, break, ;, case, Token, ., NAME, :, case, Token, ., STRING, :, case]
[), ;, break, ;, case, Token, ., NAME, :, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, case]
[), ;, break, ;, case, Token, ., NAME, :, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, case]
[Token, ., NAME, :, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, case, Token, ., GETTER_DEF, :, case]
[Token, ., NAME, :, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, case, Token, ., GETTER_DEF, :, case]
[., STRING, :, case, Token, ., STRING_KEY, :, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, if, (]
[STRING, :, case, Token, ., STRING_KEY, :, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, if, (, !]
[STRING, :, case, Token, ., STRING_KEY, :, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, if, (, !]
[STRING, :, case, Token, ., STRING_KEY, :, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, if, (, !]
[:, case, Token, ., SETTER_DEF, :, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, ), ), {]
[Token, ., SETTER_DEF, :, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, ), ), {, annotateConstantsByConvention, (]
[SETTER_DEF, :, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, ), ), {, annotateConstantsByConvention, (, n, ,]
[getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, ), ), {, annotateConstantsByConvention, (, n, ,, parent, ), ;, }, break, ;, case]
[getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, ), ), {, annotateConstantsByConvention, (, n, ,, parent, ), ;, }, break, ;, case]
[isNormalizedObfuscated, (, ), ), {, annotateConstantsByConvention, (, n, ,, parent, ), ;, }, break, ;, case, Token, ., CAST, :]
[isNormalizedObfuscated, (, ), ), {, annotateConstantsByConvention, (, n, ,, parent, ), ;, }, break, ;, case, Token, ., CAST, :]
[{, annotateConstantsByConvention, (, n, ,, parent, ), ;, }, break, ;, case, Token, ., CAST, :, parent, ., replaceChild, (]
[(, n, ,, parent, ), ;, }, break, ;, case, Token, ., CAST, :, parent, ., replaceChild, (, n, ,]
[(, n, ,, parent, ), ;, }, break, ;, case, Token, ., CAST, :, parent, ., replaceChild, (, n, ,]
[removeFirstChild, (, ), ), ;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {]
[removeFirstChild, (, ), ), ;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {]
[;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ||]
[void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ||]
[Node, parent, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ||, n, ., isString, (, ), ||]
[Node, parent, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ||, n, ., isString, (, ), ||]
[checkState, (, n, ., isName, (, ), ||, n, ., isString, (, ), ||, n, ., isStringKey, (, ), ||]
[checkState, (, n, ., isName, (, ), ||, n, ., isString, (, ), ||, n, ., isStringKey, (, ), ||]
[), ||, n, ., isString, (, ), ||, n, ., isStringKey, (, ), ||, n, ., isGetterDef, (, ), ||]
[), ||, n, ., isString, (, ), ||, n, ., isStringKey, (, ), ||, n, ., isGetterDef, (, ), ||]
[isStringKey, (, ), ||, n, ., isGetterDef, (, ), ||, n, ., isSetterDef, (, ), ), ;, boolean, isObjLitKey, =]
[isStringKey, (, ), ||, n, ., isGetterDef, (, ), ||, n, ., isSetterDef, (, ), ), ;, boolean, isObjLitKey, =]
[n, ., isGetterDef, (, ), ||, n, ., isSetterDef, (, ), ), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (]
[isGetterDef, (, ), ||, n, ., isSetterDef, (, ), ), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,]
[isSetterDef, (, ), ), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =]
[isSetterDef, (, ), ), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =]
[), ), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||]
[), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||, (]
[), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||, (]
[), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||, (]
[., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&]
[., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&]
[., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&]
[), ;, boolean, isProperty, =, isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&, parent, ., getLastChild, (, ), ==]
[isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&, parent, ., getLastChild, (, ), ==, n, ), ;, if, (]
[isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&, parent, ., getLastChild, (, ), ==, n, ), ;, if, (]
[isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&, parent, ., getLastChild, (, ), ==, n, ), ;, if, (]
[(, ), &&, parent, ., getLastChild, (, ), ==, n, ), ;, if, (, n, ., isName, (, ), ||]
[(, ), ==, n, ), ;, if, (, n, ., isName, (, ), ||, isProperty, ), {, boolean, isMarkedConstant, =]
[(, ), ==, n, ), ;, if, (, n, ., isName, (, ), ||, isProperty, ), {, boolean, isMarkedConstant, =]
[), ;, if, (, n, ., isName, (, ), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (]
[), ;, if, (, n, ., isName, (, ), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (]
[(, ), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (]
[(, ), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (]
[), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, !]
[isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, !, isMarkedConstant, &&]
[isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, !, isMarkedConstant, &&]
[isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, !, isMarkedConstant, &&, NodeUtil, ., isConstantByConvention, (]
[isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, !, isMarkedConstant, &&, NodeUtil, ., isConstantByConvention, (]
[Node, ., IS_CONSTANT_NAME, ), ;, if, (, !, isMarkedConstant, &&, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,]
[IS_CONSTANT_NAME, ), ;, if, (, !, isMarkedConstant, &&, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,]
[isMarkedConstant, &&, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ), {, if, (]
[compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ), {, if, (, assertOnChange, ), {, String, name, =]
[compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ), {, if, (, assertOnChange, ), {, String, name, =]
[,, parent, ), ), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +]
[assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +]
[{, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +]
[name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +]
[n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +]
[n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +]
[n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +]
["  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }]
["  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }]
["\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (]
["\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (]
[n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, private, void, normalizeFunctionDeclaration, (, Node, n, ), {]
[putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, private, void, normalizeFunctionDeclaration, (, Node, n, ), {]
[IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, private, void, normalizeFunctionDeclaration, (, Node, n, ), {, Preconditions, ., checkState, (]
[IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, private, void, normalizeFunctionDeclaration, (, Node, n, ), {, Preconditions, ., checkState, (]
[void, normalizeFunctionDeclaration, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, if, (]
[void, normalizeFunctionDeclaration, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, if, (]
[normalizeFunctionDeclaration, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, if, (, !]
[normalizeFunctionDeclaration, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, if, (, !]
[), {, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, if, (, !, NodeUtil, ., isFunctionExpression, (]
[., checkState, (, n, ., isFunction, (, ), ), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), &&]
[checkState, (, n, ., isFunction, (, ), ), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), &&, !]
[checkState, (, n, ., isFunction, (, ), ), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), &&, !]
[isFunction, (, ), ), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (]
[;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {]
[(, !, NodeUtil, ., isFunctionExpression, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, rewriteFunctionDeclaration, (]
[), {, rewriteFunctionDeclaration, (, n, ), ;, }, }, private, void, rewriteFunctionDeclaration, (, Node, n, ), {, Node, oldNameNode, =]
[), {, rewriteFunctionDeclaration, (, n, ), ;, }, }, private, void, rewriteFunctionDeclaration, (, Node, n, ), {, Node, oldNameNode, =]
[private, void, rewriteFunctionDeclaration, (, Node, n, ), {, Node, oldNameNode, =, n, ., getFirstChild, (, ), ;, Node, fnNameNode, =]
[private, void, rewriteFunctionDeclaration, (, Node, n, ), {, Node, oldNameNode, =, n, ., getFirstChild, (, ), ;, Node, fnNameNode, =]
[oldNameNode, =, n, ., getFirstChild, (, ), ;, Node, fnNameNode, =, oldNameNode, ., cloneNode, (, ), ;, Node, var, =]
[oldNameNode, =, n, ., getFirstChild, (, ), ;, Node, fnNameNode, =, oldNameNode, ., cloneNode, (, ), ;, Node, var, =]
[oldNameNode, =, n, ., getFirstChild, (, ), ;, Node, fnNameNode, =, oldNameNode, ., cloneNode, (, ), ;, Node, var, =]
[getFirstChild, (, ), ;, Node, fnNameNode, =, oldNameNode, ., cloneNode, (, ), ;, Node, var, =, IR, ., var, (]
[fnNameNode, =, oldNameNode, ., cloneNode, (, ), ;, Node, var, =, IR, ., var, (, fnNameNode, ), ., srcref, (]
[., cloneNode, (, ), ;, Node, var, =, IR, ., var, (, fnNameNode, ), ., srcref, (, n, ), ;]
[., cloneNode, (, ), ;, Node, var, =, IR, ., var, (, fnNameNode, ), ., srcref, (, n, ), ;]
[;, Node, var, =, IR, ., var, (, fnNameNode, ), ., srcref, (, n, ), ;, oldNameNode, ., setString, (]
[var, (, fnNameNode, ), ., srcref, (, n, ), ;, oldNameNode, ., setString, (, "", ), ;, Node, parent, =]
[var, (, fnNameNode, ), ., srcref, (, n, ), ;, oldNameNode, ., setString, (, "", ), ;, Node, parent, =]
[(, n, ), ;, oldNameNode, ., setString, (, "", ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[(, n, ), ;, oldNameNode, ., setString, (, "", ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[oldNameNode, ., setString, (, "", ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (]
[setString, (, "", ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, var, ), ;]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, var, ), ;]
[=, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, var, ), ;, fnNameNode, ., addChildToFront, (]
[getParent, (, ), ;, parent, ., replaceChild, (, n, ,, var, ), ;, fnNameNode, ., addChildToFront, (, n, ), ;]
[), ;, parent, ., replaceChild, (, n, ,, var, ), ;, fnNameNode, ., addChildToFront, (, n, ), ;, reportCodeChange, (]
["Function declaration", ), ;, }, private, void, doStatementNormalizations, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
["Function declaration", ), ;, }, private, void, doStatementNormalizations, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isLabel, (, ), ), {]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isLabel, (, ), ), {, normalizeLabels, (]
[parent, ), {, if, (, n, ., isLabel, (, ), ), {, normalizeLabels, (, n, ), ;, }, if, (]
[parent, ), {, if, (, n, ., isLabel, (, ), ), {, normalizeLabels, (, n, ), ;, }, if, (]
[parent, ), {, if, (, n, ., isLabel, (, ), ), {, normalizeLabels, (, n, ), ;, }, if, (]
[(, n, ., isLabel, (, ), ), {, normalizeLabels, (, n, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (]
[isLabel, (, ), ), {, normalizeLabels, (, n, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ||]
[isLabel, (, ), ), {, normalizeLabels, (, n, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ||]
[n, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ||, n, ., isLabel, (, ), ), {]
[;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ||, n, ., isLabel, (, ), ), {, extractForInitializer, (]
[if, (, NodeUtil, ., isStatementBlock, (, n, ), ||, n, ., isLabel, (, ), ), {, extractForInitializer, (, n, ,]
[NodeUtil, ., isStatementBlock, (, n, ), ||, n, ., isLabel, (, ), ), {, extractForInitializer, (, n, ,, null, ,]
[||, n, ., isLabel, (, ), ), {, extractForInitializer, (, n, ,, null, ,, null, ), ;, }, if, (]
[||, n, ., isLabel, (, ), ), {, extractForInitializer, (, n, ,, null, ,, null, ), ;, }, if, (]
[(, ), ), {, extractForInitializer, (, n, ,, null, ,, null, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (]
[extractForInitializer, (, n, ,, null, ,, null, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ), {]
[n, ,, null, ,, null, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ), {, splitVarDeclarations, (]
[;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ), {, splitVarDeclarations, (, n, ), ;, }, if, (]
[;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ), {, splitVarDeclarations, (, n, ), ;, }, if, (]
[(, n, ), ), {, splitVarDeclarations, (, n, ), ;, }, if, (, n, ., isFunction, (, ), ), {]
[), ), {, splitVarDeclarations, (, n, ), ;, }, if, (, n, ., isFunction, (, ), ), {, moveNamedFunctions, (]
[), ), {, splitVarDeclarations, (, n, ), ;, }, if, (, n, ., isFunction, (, ), ), {, moveNamedFunctions, (]
[{, moveNamedFunctions, (, n, ., getLastChild, (, ), ), ;, }, }, private, void, normalizeLabels, (, Node, n, ), {]
[{, moveNamedFunctions, (, n, ., getLastChild, (, ), ), ;, }, }, private, void, normalizeLabels, (, Node, n, ), {]
[., getLastChild, (, ), ), ;, }, }, private, void, normalizeLabels, (, Node, n, ), {, Preconditions, ., checkArgument, (]
[., getLastChild, (, ), ), ;, }, }, private, void, normalizeLabels, (, Node, n, ), {, Preconditions, ., checkArgument, (]
[normalizeLabels, (, Node, n, ), {, Preconditions, ., checkArgument, (, n, ., isLabel, (, ), ), ;, Node, last, =]
[normalizeLabels, (, Node, n, ), {, Preconditions, ., checkArgument, (, n, ., isLabel, (, ), ), ;, Node, last, =]
[checkArgument, (, n, ., isLabel, (, ), ), ;, Node, last, =, n, ., getLastChild, (, ), ;, switch, (]
[checkArgument, (, n, ., isLabel, (, ), ), ;, Node, last, =, n, ., getLastChild, (, ), ;, switch, (]
[;, Node, last, =, n, ., getLastChild, (, ), ;, switch, (, last, ., getType, (, ), ), {, case]
[;, Node, last, =, n, ., getLastChild, (, ), ;, switch, (, last, ., getType, (, ), ), {, case]
[., getLastChild, (, ), ;, switch, (, last, ., getType, (, ), ), {, case, Token, ., LABEL, :, case]
[., getLastChild, (, ), ;, switch, (, last, ., getType, (, ), ), {, case, Token, ., LABEL, :, case]
[switch, (, last, ., getType, (, ), ), {, case, Token, ., LABEL, :, case, Token, ., BLOCK, :, case]
[switch, (, last, ., getType, (, ), ), {, case, Token, ., LABEL, :, case, Token, ., BLOCK, :, case]
[(, ), ), {, case, Token, ., LABEL, :, case, Token, ., BLOCK, :, case, Token, ., FOR, :, case]
[(, ), ), {, case, Token, ., LABEL, :, case, Token, ., BLOCK, :, case, Token, ., FOR, :, case]
[Token, ., LABEL, :, case, Token, ., BLOCK, :, case, Token, ., FOR, :, case, Token, ., WHILE, :, case]
[Token, ., LABEL, :, case, Token, ., BLOCK, :, case, Token, ., FOR, :, case, Token, ., WHILE, :, case]
[., FOR, :, case, Token, ., WHILE, :, case, Token, ., DO, :, return, ;, default, :, Node, block, =]
[., FOR, :, case, Token, ., WHILE, :, case, Token, ., DO, :, return, ;, default, :, Node, block, =]
[WHILE, :, case, Token, ., DO, :, return, ;, default, :, Node, block, =, IR, ., block, (, ), ;]
[WHILE, :, case, Token, ., DO, :, return, ;, default, :, Node, block, =, IR, ., block, (, ), ;]
[., DO, :, return, ;, default, :, Node, block, =, IR, ., block, (, ), ;, block, ., copyInformationFrom, (]
[return, ;, default, :, Node, block, =, IR, ., block, (, ), ;, block, ., copyInformationFrom, (, last, ), ;]
[return, ;, default, :, Node, block, =, IR, ., block, (, ), ;, block, ., copyInformationFrom, (, last, ), ;]
[Node, block, =, IR, ., block, (, ), ;, block, ., copyInformationFrom, (, last, ), ;, n, ., replaceChild, (]
[=, IR, ., block, (, ), ;, block, ., copyInformationFrom, (, last, ), ;, n, ., replaceChild, (, last, ,]
[block, (, ), ;, block, ., copyInformationFrom, (, last, ), ;, n, ., replaceChild, (, last, ,, block, ), ;]
[block, (, ), ;, block, ., copyInformationFrom, (, last, ), ;, n, ., replaceChild, (, last, ,, block, ), ;]
[block, ., copyInformationFrom, (, last, ), ;, n, ., replaceChild, (, last, ,, block, ), ;, block, ., addChildToFront, (]
[(, last, ), ;, n, ., replaceChild, (, last, ,, block, ), ;, block, ., addChildToFront, (, last, ), ;]
[), ;, n, ., replaceChild, (, last, ,, block, ), ;, block, ., addChildToFront, (, last, ), ;, reportCodeChange, (]
[void, extractForInitializer, (, Node, n, ,, Node, before, ,, Node, beforeParent, ), {, for, (, Node, next, ,, c, =]
[void, extractForInitializer, (, Node, n, ,, Node, before, ,, Node, beforeParent, ), {, for, (, Node, next, ,, c, =]
[Node, before, ,, Node, beforeParent, ), {, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;]
[Node, before, ,, Node, beforeParent, ), {, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;]
[,, Node, beforeParent, ), {, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[beforeParent, ), {, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[{, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[Node, next, ,, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, next, ), {]
[,, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, next, ), {, next, =]
[,, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, next, ), {, next, =]
[c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =]
[c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =]
[!=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =, (]
[!=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =, (]
[;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =, (, before, ==]
[next, ), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =, (, before, ==, null, ), ?]
[{, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =, (, before, ==, null, ), ?, c, :]
[getNext, (, ), ;, Node, insertBefore, =, (, before, ==, null, ), ?, c, :, before, ;, Node, insertBeforeParent, =]
[getNext, (, ), ;, Node, insertBefore, =, (, before, ==, null, ), ?, c, :, before, ;, Node, insertBeforeParent, =]
[(, ), ;, Node, insertBefore, =, (, before, ==, null, ), ?, c, :, before, ;, Node, insertBeforeParent, =, (]
[(, ), ;, Node, insertBefore, =, (, before, ==, null, ), ?, c, :, before, ;, Node, insertBeforeParent, =, (]
[;, Node, insertBefore, =, (, before, ==, null, ), ?, c, :, before, ;, Node, insertBeforeParent, =, (, before, ==]
[=, (, before, ==, null, ), ?, c, :, before, ;, Node, insertBeforeParent, =, (, before, ==, null, ), ?]
[before, ==, null, ), ?, c, :, before, ;, Node, insertBeforeParent, =, (, before, ==, null, ), ?, n, :]
[?, c, :, before, ;, Node, insertBeforeParent, =, (, before, ==, null, ), ?, n, :, beforeParent, ;, switch, (]
[?, c, :, before, ;, Node, insertBeforeParent, =, (, before, ==, null, ), ?, n, :, beforeParent, ;, switch, (]
[(, before, ==, null, ), ?, n, :, beforeParent, ;, switch, (, c, ., getType, (, ), ), {, case]
[(, before, ==, null, ), ?, n, :, beforeParent, ;, switch, (, c, ., getType, (, ), ), {, case]
[), ?, n, :, beforeParent, ;, switch, (, c, ., getType, (, ), ), {, case, Token, ., LABEL, :]
[n, :, beforeParent, ;, switch, (, c, ., getType, (, ), ), {, case, Token, ., LABEL, :, extractForInitializer, (]
[beforeParent, ;, switch, (, c, ., getType, (, ), ), {, case, Token, ., LABEL, :, extractForInitializer, (, c, ,]
[switch, (, c, ., getType, (, ), ), {, case, Token, ., LABEL, :, extractForInitializer, (, c, ,, insertBefore, ,]
[), ), {, case, Token, ., LABEL, :, extractForInitializer, (, c, ,, insertBefore, ,, insertBeforeParent, ), ;, break, ;, case]
[), ), {, case, Token, ., LABEL, :, extractForInitializer, (, c, ,, insertBefore, ,, insertBeforeParent, ), ;, break, ;, case]
[LABEL, :, extractForInitializer, (, c, ,, insertBefore, ,, insertBeforeParent, ), ;, break, ;, case, Token, ., FOR, :, if, (]
[LABEL, :, extractForInitializer, (, c, ,, insertBefore, ,, insertBeforeParent, ), ;, break, ;, case, Token, ., FOR, :, if, (]
[c, ,, insertBefore, ,, insertBeforeParent, ), ;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (]
[break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, c, ), ), {, Node, first, =]
[break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, c, ), ), {, Node, first, =]
[(, NodeUtil, ., isForIn, (, c, ), ), {, Node, first, =, c, ., getFirstChild, (, ), ;, if, (]
[(, NodeUtil, ., isForIn, (, c, ), ), {, Node, first, =, c, ., getFirstChild, (, ), ;, if, (]
[first, =, c, ., getFirstChild, (, ), ;, if, (, first, ., isVar, (, ), ), {, Node, newStatement, =]
[(, ), ;, if, (, first, ., isVar, (, ), ), {, Node, newStatement, =, first, ;, Node, name, =]
[(, ), ;, if, (, first, ., isVar, (, ), ), {, Node, newStatement, =, first, ;, Node, name, =]
[(, ), ;, if, (, first, ., isVar, (, ), ), {, Node, newStatement, =, first, ;, Node, name, =]
[), {, Node, newStatement, =, first, ;, Node, name, =, newStatement, ., getFirstChild, (, ), ., cloneNode, (, ), ;]
[), {, Node, newStatement, =, first, ;, Node, name, =, newStatement, ., getFirstChild, (, ), ., cloneNode, (, ), ;]
[), {, Node, newStatement, =, first, ;, Node, name, =, newStatement, ., getFirstChild, (, ), ., cloneNode, (, ), ;]
[name, =, newStatement, ., getFirstChild, (, ), ., cloneNode, (, ), ;, first, ., getParent, (, ), ., replaceChild, (]
[newStatement, ., getFirstChild, (, ), ., cloneNode, (, ), ;, first, ., getParent, (, ), ., replaceChild, (, first, ,]
[(, ), ., cloneNode, (, ), ;, first, ., getParent, (, ), ., replaceChild, (, first, ,, name, ), ;]
[(, ), ., cloneNode, (, ), ;, first, ., getParent, (, ), ., replaceChild, (, first, ,, name, ), ;]
[(, ), ;, first, ., getParent, (, ), ., replaceChild, (, first, ,, name, ), ;, insertBeforeParent, ., addChildBefore, (]
[;, first, ., getParent, (, ), ., replaceChild, (, first, ,, name, ), ;, insertBeforeParent, ., addChildBefore, (, newStatement, ,]
[getParent, (, ), ., replaceChild, (, first, ,, name, ), ;, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;]
[), ., replaceChild, (, first, ,, name, ), ;, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (]
[;, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR-IN var declaration", ), ;, }, }, else, if, (]
[insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR-IN var declaration", ), ;, }, }, else, if, (, !]
[insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR-IN var declaration", ), ;, }, }, else, if, (, !]
[insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR-IN var declaration", ), ;, }, }, else, if, (, !]
[}, }, else, if, (, !, c, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, Node, init, =]
[}, }, else, if, (, !, c, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, Node, init, =]
[(, ), ., isEmpty, (, ), ), {, Node, init, =, c, ., getFirstChild, (, ), ;, Node, empty, =]
[(, ), ., isEmpty, (, ), ), {, Node, init, =, c, ., getFirstChild, (, ), ;, Node, empty, =]
[), {, Node, init, =, c, ., getFirstChild, (, ), ;, Node, empty, =, IR, ., empty, (, ), ;]
[), {, Node, init, =, c, ., getFirstChild, (, ), ;, Node, empty, =, IR, ., empty, (, ), ;]
[=, c, ., getFirstChild, (, ), ;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (]
[getFirstChild, (, ), ;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, c, ), ;]
[getFirstChild, (, ), ;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, c, ), ;]
[Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, c, ), ;, c, ., replaceChild, (]
[=, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, c, ), ;, c, ., replaceChild, (, init, ,]
[., copyInformationFrom, (, c, ), ;, c, ., replaceChild, (, init, ,, empty, ), ;, Node, newStatement, ;, if, (]
[., copyInformationFrom, (, c, ), ;, c, ., replaceChild, (, init, ,, empty, ), ;, Node, newStatement, ;, if, (]
[., replaceChild, (, init, ,, empty, ), ;, Node, newStatement, ;, if, (, init, ., isVar, (, ), ), {]
[(, init, ,, empty, ), ;, Node, newStatement, ;, if, (, init, ., isVar, (, ), ), {, newStatement, =]
[;, Node, newStatement, ;, if, (, init, ., isVar, (, ), ), {, newStatement, =, init, ;, }, else, {]
[newStatement, ;, if, (, init, ., isVar, (, ), ), {, newStatement, =, init, ;, }, else, {, newStatement, =]
[newStatement, ;, if, (, init, ., isVar, (, ), ), {, newStatement, =, init, ;, }, else, {, newStatement, =]
[init, ., isVar, (, ), ), {, newStatement, =, init, ;, }, else, {, newStatement, =, NodeUtil, ., newExpr, (]
[), ), {, newStatement, =, init, ;, }, else, {, newStatement, =, NodeUtil, ., newExpr, (, init, ), ;, }]
[), ), {, newStatement, =, init, ;, }, else, {, newStatement, =, NodeUtil, ., newExpr, (, init, ), ;, }]
[=, init, ;, }, else, {, newStatement, =, NodeUtil, ., newExpr, (, init, ), ;, }, insertBeforeParent, ., addChildBefore, (]
[;, }, else, {, newStatement, =, NodeUtil, ., newExpr, (, init, ), ;, }, insertBeforeParent, ., addChildBefore, (, newStatement, ,]
[{, newStatement, =, NodeUtil, ., newExpr, (, init, ), ;, }, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;]
[=, NodeUtil, ., newExpr, (, init, ), ;, }, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (]
[break, ;, }, }, }, private, void, splitVarDeclarations, (, Node, n, ), {, for, (, Node, next, ,, c, =]
[break, ;, }, }, }, private, void, splitVarDeclarations, (, Node, n, ), {, for, (, Node, next, ,, c, =]
[void, splitVarDeclarations, (, Node, n, ), {, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;]
[void, splitVarDeclarations, (, Node, n, ), {, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;]
[(, Node, n, ), {, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[n, ), {, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[{, for, (, Node, next, ,, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[Node, next, ,, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, next, ), {]
[,, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, next, ), {, next, =]
[,, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, next, ), {, next, =]
[;, c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, if, (]
[;, c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, if, (]
[{, next, =, c, ., getNext, (, ), ;, if, (, c, ., isVar, (, ), ), {, if, (]
[{, next, =, c, ., getNext, (, ), ;, if, (, c, ., isVar, (, ), ), {, if, (]
[=, c, ., getNext, (, ), ;, if, (, c, ., isVar, (, ), ), {, if, (, assertOnChange, &&]
[c, ., getNext, (, ), ;, if, (, c, ., isVar, (, ), ), {, if, (, assertOnChange, &&, !]
[c, ., getNext, (, ), ;, if, (, c, ., isVar, (, ), ), {, if, (, assertOnChange, &&, !]
[c, ., isVar, (, ), ), {, if, (, assertOnChange, &&, !, c, ., hasChildren, (, ), ), {, throw]
[(, ), ), {, if, (, assertOnChange, &&, !, c, ., hasChildren, (, ), ), {, throw, new, IllegalStateException, (]
[assertOnChange, &&, !, c, ., hasChildren, (, ), ), {, throw, new, IllegalStateException, (, "Empty VAR node.", ), ;, }, while, (]
[assertOnChange, &&, !, c, ., hasChildren, (, ), ), {, throw, new, IllegalStateException, (, "Empty VAR node.", ), ;, }, while, (]
[assertOnChange, &&, !, c, ., hasChildren, (, ), ), {, throw, new, IllegalStateException, (, "Empty VAR node.", ), ;, }, while, (]
[(, ), ), {, throw, new, IllegalStateException, (, "Empty VAR node.", ), ;, }, while, (, c, ., getFirstChild, (, ), !=]
[(, ), ), {, throw, new, IllegalStateException, (, "Empty VAR node.", ), ;, }, while, (, c, ., getFirstChild, (, ), !=]
[;, }, while, (, c, ., getFirstChild, (, ), !=, c, ., getLastChild, (, ), ), {, Node, name, =]
[;, }, while, (, c, ., getFirstChild, (, ), !=, c, ., getLastChild, (, ), ), {, Node, name, =]
[getFirstChild, (, ), !=, c, ., getLastChild, (, ), ), {, Node, name, =, c, ., getFirstChild, (, ), ;]
[getFirstChild, (, ), !=, c, ., getLastChild, (, ), ), {, Node, name, =, c, ., getFirstChild, (, ), ;]
[c, ., getLastChild, (, ), ), {, Node, name, =, c, ., getFirstChild, (, ), ;, c, ., removeChild, (]
[{, Node, name, =, c, ., getFirstChild, (, ), ;, c, ., removeChild, (, name, ), ;, Node, newVar, =]
[{, Node, name, =, c, ., getFirstChild, (, ), ;, c, ., removeChild, (, name, ), ;, Node, newVar, =]
[{, Node, name, =, c, ., getFirstChild, (, ), ;, c, ., removeChild, (, name, ), ;, Node, newVar, =]
[c, ., getFirstChild, (, ), ;, c, ., removeChild, (, name, ), ;, Node, newVar, =, IR, ., var, (]
[;, c, ., removeChild, (, name, ), ;, Node, newVar, =, IR, ., var, (, name, ), ., srcref, (]
[removeChild, (, name, ), ;, Node, newVar, =, IR, ., var, (, name, ), ., srcref, (, n, ), ;]
[removeChild, (, name, ), ;, Node, newVar, =, IR, ., var, (, name, ), ., srcref, (, n, ), ;]
[;, Node, newVar, =, IR, ., var, (, name, ), ., srcref, (, n, ), ;, n, ., addChildBefore, (]
[newVar, =, IR, ., var, (, name, ), ., srcref, (, n, ), ;, n, ., addChildBefore, (, newVar, ,]
[., var, (, name, ), ., srcref, (, n, ), ;, n, ., addChildBefore, (, newVar, ,, c, ), ;]
[(, name, ), ., srcref, (, n, ), ;, n, ., addChildBefore, (, newVar, ,, c, ), ;, reportCodeChange, (]
[c, ), ;, reportCodeChange, (, "VAR with multiple children", ), ;, }, }, }, }, private, void, moveNamedFunctions, (, Node, functionBody, ), {]
[c, ), ;, reportCodeChange, (, "VAR with multiple children", ), ;, }, }, }, }, private, void, moveNamedFunctions, (, Node, functionBody, ), {]
[(, "VAR with multiple children", ), ;, }, }, }, }, private, void, moveNamedFunctions, (, Node, functionBody, ), {, Preconditions, ., checkState, (]
[(, "VAR with multiple children", ), ;, }, }, }, }, private, void, moveNamedFunctions, (, Node, functionBody, ), {, Preconditions, ., checkState, (]
[(, "VAR with multiple children", ), ;, }, }, }, }, private, void, moveNamedFunctions, (, Node, functionBody, ), {, Preconditions, ., checkState, (]
[), {, Preconditions, ., checkState, (, functionBody, ., getParent, (, ), ., isFunction, (, ), ), ;, Node, previous, =]
[(, functionBody, ., getParent, (, ), ., isFunction, (, ), ), ;, Node, previous, =, null, ;, Node, current, =]
[(, functionBody, ., getParent, (, ), ., isFunction, (, ), ), ;, Node, previous, =, null, ;, Node, current, =]
[(, ), ), ;, Node, previous, =, null, ;, Node, current, =, functionBody, ., getFirstChild, (, ), ;, while, (]
[(, ), ), ;, Node, previous, =, null, ;, Node, current, =, functionBody, ., getFirstChild, (, ), ;, while, (]
[(, ), ), ;, Node, previous, =, null, ;, Node, current, =, functionBody, ., getFirstChild, (, ), ;, while, (]
[), ;, Node, previous, =, null, ;, Node, current, =, functionBody, ., getFirstChild, (, ), ;, while, (, current, !=]
[Node, previous, =, null, ;, Node, current, =, functionBody, ., getFirstChild, (, ), ;, while, (, current, !=, null, &&]
[Node, previous, =, null, ;, Node, current, =, functionBody, ., getFirstChild, (, ), ;, while, (, current, !=, null, &&]
[;, Node, current, =, functionBody, ., getFirstChild, (, ), ;, while, (, current, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (]
[functionBody, ., getFirstChild, (, ), ;, while, (, current, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {]
[getFirstChild, (, ), ;, while, (, current, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, previous, =]
[), ;, while, (, current, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, previous, =, current, ;]
[while, (, current, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, previous, =, current, ;, current, =]
[while, (, current, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, previous, =, current, ;, current, =]
[current, ), ), {, previous, =, current, ;, current, =, current, ., getNext, (, ), ;, }, Node, insertAfter, =]
[previous, =, current, ;, current, =, current, ., getNext, (, ), ;, }, Node, insertAfter, =, previous, ;, while, (]
[previous, =, current, ;, current, =, current, ., getNext, (, ), ;, }, Node, insertAfter, =, previous, ;, while, (]
[current, ;, current, =, current, ., getNext, (, ), ;, }, Node, insertAfter, =, previous, ;, while, (, current, !=]
[getNext, (, ), ;, }, Node, insertAfter, =, previous, ;, while, (, current, !=, null, ), {, Node, next, =]
[getNext, (, ), ;, }, Node, insertAfter, =, previous, ;, while, (, current, !=, null, ), {, Node, next, =]
[previous, ;, while, (, current, !=, null, ), {, Node, next, =, current, ., getNext, (, ), ;, if, (]
[previous, ;, while, (, current, !=, null, ), {, Node, next, =, current, ., getNext, (, ), ;, if, (]
[current, !=, null, ), {, Node, next, =, current, ., getNext, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (]
[{, Node, next, =, current, ., getNext, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {]
[{, Node, next, =, current, ., getNext, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {]
[current, ., getNext, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, Preconditions, ., checkNotNull, (]
[(, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, Preconditions, ., checkNotNull, (, previous, ), ;]
[(, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, Preconditions, ., checkNotNull, (, previous, ), ;]
[(, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, Preconditions, ., checkNotNull, (, previous, ), ;, functionBody, ., removeChildAfter, (]
[isFunctionDeclaration, (, current, ), ), {, Preconditions, ., checkNotNull, (, previous, ), ;, functionBody, ., removeChildAfter, (, previous, ), ;]
[current, ), ), {, Preconditions, ., checkNotNull, (, previous, ), ;, functionBody, ., removeChildAfter, (, previous, ), ;, insertAfter, =]
[), {, Preconditions, ., checkNotNull, (, previous, ), ;, functionBody, ., removeChildAfter, (, previous, ), ;, insertAfter, =, addToFront, (]
[Preconditions, ., checkNotNull, (, previous, ), ;, functionBody, ., removeChildAfter, (, previous, ), ;, insertAfter, =, addToFront, (, functionBody, ,]
[checkNotNull, (, previous, ), ;, functionBody, ., removeChildAfter, (, previous, ), ;, insertAfter, =, addToFront, (, functionBody, ,, current, ,]
[), ;, functionBody, ., removeChildAfter, (, previous, ), ;, insertAfter, =, addToFront, (, functionBody, ,, current, ,, insertAfter, ), ;]
[functionBody, ., removeChildAfter, (, previous, ), ;, insertAfter, =, addToFront, (, functionBody, ,, current, ,, insertAfter, ), ;, reportCodeChange, (]
[;, insertAfter, =, addToFront, (, functionBody, ,, current, ,, insertAfter, ), ;, reportCodeChange, (, "Move function declaration not at top of function", ), ;, }, else, {]
[=, addToFront, (, functionBody, ,, current, ,, insertAfter, ), ;, reportCodeChange, (, "Move function declaration not at top of function", ), ;, }, else, {, previous, =]
[functionBody, ,, current, ,, insertAfter, ), ;, reportCodeChange, (, "Move function declaration not at top of function", ), ;, }, else, {, previous, =, current, ;, }]
[current, ,, insertAfter, ), ;, reportCodeChange, (, "Move function declaration not at top of function", ), ;, }, else, {, previous, =, current, ;, }, current, =]
[next, ;, }, }, private, Node, addToFront, (, Node, parent, ,, Node, newChild, ,, Node, after, ), {, if, (]
[next, ;, }, }, private, Node, addToFront, (, Node, parent, ,, Node, newChild, ,, Node, after, ), {, if, (]
[}, }, private, Node, addToFront, (, Node, parent, ,, Node, newChild, ,, Node, after, ), {, if, (, after, ==]
[Node, addToFront, (, Node, parent, ,, Node, newChild, ,, Node, after, ), {, if, (, after, ==, null, ), {]
[Node, addToFront, (, Node, parent, ,, Node, newChild, ,, Node, after, ), {, if, (, after, ==, null, ), {]
[parent, ,, Node, newChild, ,, Node, after, ), {, if, (, after, ==, null, ), {, parent, ., addChildToFront, (]
[after, ), {, if, (, after, ==, null, ), {, parent, ., addChildToFront, (, newChild, ), ;, }, else, {]
[after, ), {, if, (, after, ==, null, ), {, parent, ., addChildToFront, (, newChild, ), ;, }, else, {]
[(, after, ==, null, ), {, parent, ., addChildToFront, (, newChild, ), ;, }, else, {, parent, ., addChildAfter, (]
[==, null, ), {, parent, ., addChildToFront, (, newChild, ), ;, }, else, {, parent, ., addChildAfter, (, newChild, ,]
[., addChildToFront, (, newChild, ), ;, }, else, {, parent, ., addChildAfter, (, newChild, ,, after, ), ;, }, return]
[}, return, newChild, ;, }, }, private, void, removeDuplicateDeclarations, (, Node, externs, ,, Node, root, ), {, Callback, tickler, =]
[removeDuplicateDeclarations, (, Node, externs, ,, Node, root, ), {, Callback, tickler, =, new, ScopeTicklingCallback, (, ), ;, ScopeCreator, scopeCreator, =]
[externs, ,, Node, root, ), {, Callback, tickler, =, new, ScopeTicklingCallback, (, ), ;, ScopeCreator, scopeCreator, =, new, SyntacticScopeCreator, (]
[Node, root, ), {, Callback, tickler, =, new, ScopeTicklingCallback, (, ), ;, ScopeCreator, scopeCreator, =, new, SyntacticScopeCreator, (, compiler, ,]
[(, ), ;, ScopeCreator, scopeCreator, =, new, SyntacticScopeCreator, (, compiler, ,, new, DuplicateDeclarationHandler, (, ), ), ;, NodeTraversal, t, =]
[ScopeCreator, scopeCreator, =, new, SyntacticScopeCreator, (, compiler, ,, new, DuplicateDeclarationHandler, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (]
[=, new, SyntacticScopeCreator, (, compiler, ,, new, DuplicateDeclarationHandler, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,]
[SyntacticScopeCreator, (, compiler, ,, new, DuplicateDeclarationHandler, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, tickler, ,]
[,, new, DuplicateDeclarationHandler, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, tickler, ,, scopeCreator, ), ;]
[,, new, DuplicateDeclarationHandler, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, tickler, ,, scopeCreator, ), ;]
[), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, tickler, ,, scopeCreator, ), ;, t, ., traverseRoots, (]
[;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, tickler, ,, scopeCreator, ), ;, t, ., traverseRoots, (, externs, ,]
[root, ), ;, }, private, final, class, DuplicateDeclarationHandler, implements, SyntacticScopeCreator, ., RedeclarationHandler, {, private, Set, <, Var, >, hasOkDuplicateDeclaration, =]
[root, ), ;, }, private, final, class, DuplicateDeclarationHandler, implements, SyntacticScopeCreator, ., RedeclarationHandler, {, private, Set, <, Var, >, hasOkDuplicateDeclaration, =]
[;, @, Override, public, void, onRedeclaration, (, Scope, s, ,, String, name, ,, Node, n, ,, CompilerInput, input, ), {]
[;, @, Override, public, void, onRedeclaration, (, Scope, s, ,, String, name, ,, Node, n, ,, CompilerInput, input, ), {]
[void, onRedeclaration, (, Scope, s, ,, String, name, ,, Node, n, ,, CompilerInput, input, ), {, Preconditions, ., checkState, (]
[void, onRedeclaration, (, Scope, s, ,, String, name, ,, Node, n, ,, CompilerInput, input, ), {, Preconditions, ., checkState, (]
[n, ,, CompilerInput, input, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, Node, parent, =]
[n, ,, CompilerInput, input, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, Node, parent, =]
[(, n, ., isName, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Var, v, =]
[(, n, ., isName, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Var, v, =]
[(, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Var, v, =, s, ., getVar, (]
[parent, =, n, ., getParent, (, ), ;, Var, v, =, s, ., getVar, (, name, ), ;, if, (]
[parent, =, n, ., getParent, (, ), ;, Var, v, =, s, ., getVar, (, name, ), ;, if, (]
[parent, =, n, ., getParent, (, ), ;, Var, v, =, s, ., getVar, (, name, ), ;, if, (]
[n, ., getParent, (, ), ;, Var, v, =, s, ., getVar, (, name, ), ;, if, (, v, !=]
[getParent, (, ), ;, Var, v, =, s, ., getVar, (, name, ), ;, if, (, v, !=, null, &&]
[getParent, (, ), ;, Var, v, =, s, ., getVar, (, name, ), ;, if, (, v, !=, null, &&]
[getVar, (, name, ), ;, if, (, v, !=, null, &&, s, ., isGlobal, (, ), ), {, if, (]
[getVar, (, name, ), ;, if, (, v, !=, null, &&, s, ., isGlobal, (, ), ), {, if, (]
[getVar, (, name, ), ;, if, (, v, !=, null, &&, s, ., isGlobal, (, ), ), {, if, (]
[(, v, !=, null, &&, s, ., isGlobal, (, ), ), {, if, (, v, ., isExtern, (, ), &&]
[v, !=, null, &&, s, ., isGlobal, (, ), ), {, if, (, v, ., isExtern, (, ), &&, !]
[v, !=, null, &&, s, ., isGlobal, (, ), ), {, if, (, v, ., isExtern, (, ), &&, !]
[), {, if, (, v, ., isExtern, (, ), &&, !, input, ., isExtern, (, ), ), {, if, (]
[), {, if, (, v, ., isExtern, (, ), &&, !, input, ., isExtern, (, ), ), {, if, (]
[v, ., isExtern, (, ), &&, !, input, ., isExtern, (, ), ), {, if, (, hasOkDuplicateDeclaration, ., add, (]
[), ), {, if, (, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return, ;, }, }, }, if, (]
[), ), {, if, (, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return, ;, }, }, }, if, (]
[), ), {, if, (, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return, ;, }, }, }, if, (]
[{, if, (, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return, ;, }, }, }, if, (, v, !=]
[(, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return, ;, }, }, }, if, (, v, !=, null, &&]
[(, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return, ;, }, }, }, if, (, v, !=, null, &&]
[(, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return, ;, }, }, }, if, (, v, !=, null, &&]
[}, }, }, if, (, v, !=, null, &&, v, ., getParentNode, (, ), ., isCatch, (, ), ), {]
[}, if, (, v, !=, null, &&, v, ., getParentNode, (, ), ., isCatch, (, ), ), {, name, =]
[}, if, (, v, !=, null, &&, v, ., getParentNode, (, ), ., isCatch, (, ), ), {, name, =]
[}, if, (, v, !=, null, &&, v, ., getParentNode, (, ), ., isCatch, (, ), ), {, name, =]
[&&, v, ., getParentNode, (, ), ., isCatch, (, ), ), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (]
[getParentNode, (, ), ., isCatch, (, ), ), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;]
[getParentNode, (, ), ., isCatch, (, ), ), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;]
[isCatch, (, ), ), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, compiler, ., report, (]
[isCatch, (, ), ), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, compiler, ., report, (]
[{, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, compiler, ., report, (, JSError, ., make, (]
[{, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, compiler, ., report, (, JSError, ., make, (]
[., getOrginalName, (, name, ), ;, compiler, ., report, (, JSError, ., make, (, input, ., getName, (, ), ,]
[(, name, ), ;, compiler, ., report, (, JSError, ., make, (, input, ., getName, (, ), ,, n, ,]
[), ;, compiler, ., report, (, JSError, ., make, (, input, ., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,]
[make, (, input, ., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, ), ), ;, }, else, if, (]
[make, (, input, ., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, ), ), ;, }, else, if, (]
[make, (, input, ., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, ), ), ;, }, else, if, (]
[input, ., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, ), ), ;, }, else, if, (, v, !=]
[getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, ), ), ;, }, else, if, (, v, !=, null, &&]
[getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, ), ), ;, }, else, if, (, v, !=, null, &&]
[), ), ;, }, else, if, (, v, !=, null, &&, parent, ., isFunction, (, ), ), {, if, (]
[), ), ;, }, else, if, (, v, !=, null, &&, parent, ., isFunction, (, ), ), {, if, (]
[), ), ;, }, else, if, (, v, !=, null, &&, parent, ., isFunction, (, ), ), {, if, (]
[parent, ., isFunction, (, ), ), {, if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {]
[parent, ., isFunction, (, ), ), {, if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {]
[), ), {, if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {, s, ., undeclare, (]
[if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {, s, ., undeclare, (, v, ), ;]
[if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {, s, ., undeclare, (, v, ), ;]
[getParentNode, (, ), ., isVar, (, ), ), {, s, ., undeclare, (, v, ), ;, s, ., declare, (]
[), ., isVar, (, ), ), {, s, ., undeclare, (, v, ), ;, s, ., declare, (, name, ,]
[isVar, (, ), ), {, s, ., undeclare, (, v, ), ;, s, ., declare, (, name, ,, n, ,]
[isVar, (, ), ), {, s, ., undeclare, (, v, ), ;, s, ., declare, (, name, ,, n, ,]
[., undeclare, (, v, ), ;, s, ., declare, (, name, ,, n, ,, n, ., getJSType, (, ), ,]
[., undeclare, (, v, ), ;, s, ., declare, (, name, ,, n, ,, n, ., getJSType, (, ), ,]
[;, s, ., declare, (, name, ,, n, ,, n, ., getJSType, (, ), ,, v, ., input, ), ;]
[., declare, (, name, ,, n, ,, n, ., getJSType, (, ), ,, v, ., input, ), ;, replaceVarWithAssignment, (]
[., declare, (, name, ,, n, ,, n, ., getJSType, (, ), ,, v, ., input, ), ;, replaceVarWithAssignment, (]
[,, n, ., getJSType, (, ), ,, v, ., input, ), ;, replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,]
[,, n, ., getJSType, (, ), ,, v, ., input, ), ;, replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,]
[,, v, ., input, ), ;, replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,, v, ., getParentNode, (, ), ,]
[,, v, ., input, ), ;, replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,, v, ., getParentNode, (, ), ,]
[,, v, ., input, ), ;, replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,, v, ., getParentNode, (, ), ,]
[getParentNode, (, ), ,, v, ., getParentNode, (, ), ., getParent, (, ), ), ;, }, }, else, if, (]
[getParentNode, (, ), ,, v, ., getParentNode, (, ), ., getParent, (, ), ), ;, }, }, else, if, (]
[(, ), ., getParent, (, ), ), ;, }, }, else, if, (, parent, ., isVar, (, ), ), {]
[(, ), ., getParent, (, ), ), ;, }, }, else, if, (, parent, ., isVar, (, ), ), {]
[(, ), ), ;, }, }, else, if, (, parent, ., isVar, (, ), ), {, Preconditions, ., checkState, (]
[(, ), ), ;, }, }, else, if, (, parent, ., isVar, (, ), ), {, Preconditions, ., checkState, (]
[if, (, parent, ., isVar, (, ), ), {, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;]
[parent, ., isVar, (, ), ), {, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceVarWithAssignment, (]
[isVar, (, ), ), {, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceVarWithAssignment, (, n, ,]
[), ), {, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceVarWithAssignment, (, n, ,, parent, ,]
[), ), {, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceVarWithAssignment, (, n, ,, parent, ,]
[), ;, }, }, private, void, replaceVarWithAssignment, (, Node, n, ,, Node, parent, ,, Node, gramps, ), {, if, (]
[), ;, }, }, private, void, replaceVarWithAssignment, (, Node, n, ,, Node, parent, ,, Node, gramps, ), {, if, (]
[(, Node, n, ,, Node, parent, ,, Node, gramps, ), {, if, (, n, ., hasChildren, (, ), ), {]
[(, Node, n, ,, Node, parent, ,, Node, gramps, ), {, if, (, n, ., hasChildren, (, ), ), {]
[Node, parent, ,, Node, gramps, ), {, if, (, n, ., hasChildren, (, ), ), {, parent, ., removeChild, (]
[{, if, (, n, ., hasChildren, (, ), ), {, parent, ., removeChild, (, n, ), ;, Node, value, =]
[{, if, (, n, ., hasChildren, (, ), ), {, parent, ., removeChild, (, n, ), ;, Node, value, =]
[(, ), ), {, parent, ., removeChild, (, n, ), ;, Node, value, =, n, ., getFirstChild, (, ), ;]
[(, ), ), {, parent, ., removeChild, (, n, ), ;, Node, value, =, n, ., getFirstChild, (, ), ;]
[parent, ., removeChild, (, n, ), ;, Node, value, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (]
[;, Node, value, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, value, ), ;, Node, replacement, =]
[;, Node, value, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, value, ), ;, Node, replacement, =]
[n, ., getFirstChild, (, ), ;, n, ., removeChild, (, value, ), ;, Node, replacement, =, IR, ., assign, (]
[getFirstChild, (, ), ;, n, ., removeChild, (, value, ), ;, Node, replacement, =, IR, ., assign, (, n, ,]
[;, n, ., removeChild, (, value, ), ;, Node, replacement, =, IR, ., assign, (, n, ,, value, ), ;]
[;, n, ., removeChild, (, value, ), ;, Node, replacement, =, IR, ., assign, (, n, ,, value, ), ;]
[(, value, ), ;, Node, replacement, =, IR, ., assign, (, n, ,, value, ), ;, replacement, ., copyInformationFrom, (]
[;, Node, replacement, =, IR, ., assign, (, n, ,, value, ), ;, replacement, ., copyInformationFrom, (, parent, ), ;]
[;, Node, replacement, =, IR, ., assign, (, n, ,, value, ), ;, replacement, ., copyInformationFrom, (, parent, ), ;]
[IR, ., assign, (, n, ,, value, ), ;, replacement, ., copyInformationFrom, (, parent, ), ;, gramps, ., replaceChild, (]
[assign, (, n, ,, value, ), ;, replacement, ., copyInformationFrom, (, parent, ), ;, gramps, ., replaceChild, (, parent, ,]
[assign, (, n, ,, value, ), ;, replacement, ., copyInformationFrom, (, parent, ), ;, gramps, ., replaceChild, (, parent, ,]
[value, ), ;, replacement, ., copyInformationFrom, (, parent, ), ;, gramps, ., replaceChild, (, parent, ,, NodeUtil, ., newExpr, (]
[;, gramps, ., replaceChild, (, parent, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {, if, (]
[;, gramps, ., replaceChild, (, parent, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {, if, (]
[(, parent, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {, if, (, NodeUtil, ., isStatementBlock, (]
[., newExpr, (, replacement, ), ), ;, }, else, {, if, (, NodeUtil, ., isStatementBlock, (, gramps, ), ), {]
[., newExpr, (, replacement, ), ), ;, }, else, {, if, (, NodeUtil, ., isStatementBlock, (, gramps, ), ), {]
[), ), ;, }, else, {, if, (, NodeUtil, ., isStatementBlock, (, gramps, ), ), {, gramps, ., removeChild, (]
[(, NodeUtil, ., isStatementBlock, (, gramps, ), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, if, (]
[(, NodeUtil, ., isStatementBlock, (, gramps, ), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, if, (]
[), {, gramps, ., removeChild, (, parent, ), ;, }, else, if, (, gramps, ., isFor, (, ), ), {]
[), {, gramps, ., removeChild, (, parent, ), ;, }, else, if, (, gramps, ., isFor, (, ), ), {]
[removeChild, (, parent, ), ;, }, else, if, (, gramps, ., isFor, (, ), ), {, parent, ., removeChild, (]
[), ;, }, else, if, (, gramps, ., isFor, (, ), ), {, parent, ., removeChild, (, n, ), ;]
[), ;, }, else, if, (, gramps, ., isFor, (, ), ), {, parent, ., removeChild, (, n, ), ;]
[if, (, gramps, ., isFor, (, ), ), {, parent, ., removeChild, (, n, ), ;, gramps, ., replaceChild, (]
[gramps, ., isFor, (, ), ), {, parent, ., removeChild, (, n, ), ;, gramps, ., replaceChild, (, parent, ,]
[{, parent, ., removeChild, (, n, ), ;, gramps, ., replaceChild, (, parent, ,, n, ), ;, }, else, {]
[{, parent, ., removeChild, (, n, ), ;, gramps, ., replaceChild, (, parent, ,, n, ), ;, }, else, {]
[(, n, ), ;, gramps, ., replaceChild, (, parent, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (]
[(, n, ), ;, gramps, ., replaceChild, (, parent, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (]
[parent, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (, gramps, ., isLabel, (, ), ), ;, throw]
[), ;, }, else, {, Preconditions, ., checkState, (, gramps, ., isLabel, (, ), ), ;, throw, new, IllegalStateException, (]
[Preconditions, ., checkState, (, gramps, ., isLabel, (, ), ), ;, throw, new, IllegalStateException, (, "Unexpected LABEL", ), ;, }, }]
[checkState, (, gramps, ., isLabel, (, ), ), ;, throw, new, IllegalStateException, (, "Unexpected LABEL", ), ;, }, }, reportCodeChange, (]
[}, private, final, class, ScopeTicklingCallback, implements, NodeTraversal, ., ScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[}, private, final, class, ScopeTicklingCallback, implements, NodeTraversal, ., ScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[), {, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
