[;, import, java, ., util, ., TreeSet, ;, public, class, UnionType, extends, JSType, {, private, static, final, long, serialVersionUID, =]
[;, private, final, int, hashcode, ;, UnionType, (, JSTypeRegistry, registry, ,, Collection, <, JSType, >, alternates, ), {, super, (]
[int, hashcode, ;, UnionType, (, JSTypeRegistry, registry, ,, Collection, <, JSType, >, alternates, ), {, super, (, registry, ), ;]
[int, hashcode, ;, UnionType, (, JSTypeRegistry, registry, ,, Collection, <, JSType, >, alternates, ), {, super, (, registry, ), ;]
[(, JSTypeRegistry, registry, ,, Collection, <, JSType, >, alternates, ), {, super, (, registry, ), ;, this, ., alternates, =]
[registry, ,, Collection, <, JSType, >, alternates, ), {, super, (, registry, ), ;, this, ., alternates, =, alternates, ;]
[registry, ,, Collection, <, JSType, >, alternates, ), {, super, (, registry, ), ;, this, ., alternates, =, alternates, ;]
[JSType, >, alternates, ), {, super, (, registry, ), ;, this, ., alternates, =, alternates, ;, this, ., hashcode, =]
[JSType, >, alternates, ), {, super, (, registry, ), ;, this, ., alternates, =, alternates, ;, this, ., hashcode, =]
[JSType, >, alternates, ), {, super, (, registry, ), ;, this, ., alternates, =, alternates, ;, this, ., hashcode, =]
[=, this, ., alternates, ., hashCode, (, ), ;, }, public, Iterable, <, JSType, >, getAlternates, (, ), {, return]
[(, ), {, return, alternates, ;, }, @, Override, public, boolean, matchesNumberContext, (, ), {, for, (, JSType, t, :]
[;, }, @, Override, public, boolean, matchesNumberContext, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[;, }, @, Override, public, boolean, matchesNumberContext, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[), {, for, (, JSType, t, :, alternates, ), {, if, (, t, ., matchesNumberContext, (, ), ), {, return]
[t, :, alternates, ), {, if, (, t, ., matchesNumberContext, (, ), ), {, return, true, ;, }, }, return]
[;, }, }, return, false, ;, }, @, Override, public, boolean, matchesStringContext, (, ), {, for, (, JSType, t, :]
[;, }, @, Override, public, boolean, matchesStringContext, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[;, }, @, Override, public, boolean, matchesStringContext, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[), {, for, (, JSType, t, :, alternates, ), {, if, (, t, ., matchesStringContext, (, ), ), {, return]
[t, :, alternates, ), {, if, (, t, ., matchesStringContext, (, ), ), {, return, true, ;, }, }, return]
[;, }, }, return, false, ;, }, @, Override, public, boolean, matchesObjectContext, (, ), {, for, (, JSType, t, :]
[;, }, @, Override, public, boolean, matchesObjectContext, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[;, }, @, Override, public, boolean, matchesObjectContext, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[), {, for, (, JSType, t, :, alternates, ), {, if, (, t, ., matchesObjectContext, (, ), ), {, return]
[t, :, alternates, ), {, if, (, t, ., matchesObjectContext, (, ), ), {, return, true, ;, }, }, return]
[;, }, }, return, false, ;, }, @, Override, public, JSType, findPropertyType, (, String, propertyName, ), {, JSType, propertyType, =]
[@, Override, public, JSType, findPropertyType, (, String, propertyName, ), {, JSType, propertyType, =, null, ;, for, (, JSType, alternate, :]
[propertyName, ), {, JSType, propertyType, =, null, ;, for, (, JSType, alternate, :, getAlternates, (, ), ), {, if, (]
[propertyName, ), {, JSType, propertyType, =, null, ;, for, (, JSType, alternate, :, getAlternates, (, ), ), {, if, (]
[propertyName, ), {, JSType, propertyType, =, null, ;, for, (, JSType, alternate, :, getAlternates, (, ), ), {, if, (]
[null, ;, for, (, JSType, alternate, :, getAlternates, (, ), ), {, if, (, alternate, ., isNullType, (, ), ||]
[null, ;, for, (, JSType, alternate, :, getAlternates, (, ), ), {, if, (, alternate, ., isNullType, (, ), ||]
[(, alternate, ., isNullType, (, ), ||, alternate, ., isVoidType, (, ), ), {, continue, ;, }, JSType, altPropertyType, =]
[(, alternate, ., isNullType, (, ), ||, alternate, ., isVoidType, (, ), ), {, continue, ;, }, JSType, altPropertyType, =]
[(, ), ||, alternate, ., isVoidType, (, ), ), {, continue, ;, }, JSType, altPropertyType, =, alternate, ., findPropertyType, (]
[isVoidType, (, ), ), {, continue, ;, }, JSType, altPropertyType, =, alternate, ., findPropertyType, (, propertyName, ), ;, if, (]
[isVoidType, (, ), ), {, continue, ;, }, JSType, altPropertyType, =, alternate, ., findPropertyType, (, propertyName, ), ;, if, (]
[), ), {, continue, ;, }, JSType, altPropertyType, =, alternate, ., findPropertyType, (, propertyName, ), ;, if, (, altPropertyType, ==]
[=, alternate, ., findPropertyType, (, propertyName, ), ;, if, (, altPropertyType, ==, null, ), {, continue, ;, }, if, (]
[=, alternate, ., findPropertyType, (, propertyName, ), ;, if, (, altPropertyType, ==, null, ), {, continue, ;, }, if, (]
[., findPropertyType, (, propertyName, ), ;, if, (, altPropertyType, ==, null, ), {, continue, ;, }, if, (, propertyType, ==]
[propertyName, ), ;, if, (, altPropertyType, ==, null, ), {, continue, ;, }, if, (, propertyType, ==, null, ), {]
[;, if, (, altPropertyType, ==, null, ), {, continue, ;, }, if, (, propertyType, ==, null, ), {, propertyType, =]
[null, ), {, continue, ;, }, if, (, propertyType, ==, null, ), {, propertyType, =, altPropertyType, ;, }, else, {]
[{, continue, ;, }, if, (, propertyType, ==, null, ), {, propertyType, =, altPropertyType, ;, }, else, {, propertyType, =]
[{, continue, ;, }, if, (, propertyType, ==, null, ), {, propertyType, =, altPropertyType, ;, }, else, {, propertyType, =]
[if, (, propertyType, ==, null, ), {, propertyType, =, altPropertyType, ;, }, else, {, propertyType, =, propertyType, ., getLeastSupertype, (]
[{, propertyType, =, altPropertyType, ;, }, else, {, propertyType, =, propertyType, ., getLeastSupertype, (, altPropertyType, ), ;, }, }, return]
[;, }, }, return, propertyType, ;, }, @, Override, public, boolean, canBeCalled, (, ), {, for, (, JSType, t, :]
[;, }, @, Override, public, boolean, canBeCalled, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[}, @, Override, public, boolean, canBeCalled, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (, !]
[}, @, Override, public, boolean, canBeCalled, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (, !]
[{, for, (, JSType, t, :, alternates, ), {, if, (, !, t, ., canBeCalled, (, ), ), {, return]
[:, alternates, ), {, if, (, !, t, ., canBeCalled, (, ), ), {, return, false, ;, }, }, return]
[return, false, ;, }, }, return, true, ;, }, @, Override, public, JSType, autobox, (, ), {, UnionTypeBuilder, restricted, =]
[}, }, return, true, ;, }, @, Override, public, JSType, autobox, (, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (]
[public, JSType, autobox, (, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :]
[(, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {]
[(, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {]
[restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (]
[restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (]
[(, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (, t, ., autobox, (, ), ), ;, }, return]
[(, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (, t, ., autobox, (, ), ), ;, }, return]
[}, return, restricted, ., build, (, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, ), {, UnionTypeBuilder, restricted, =]
[., build, (, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (]
[public, JSType, restrictByNotNullOrUndefined, (, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :]
[(, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {]
[(, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {]
[restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (]
[restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (]
[(, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (, t, ., restrictByNotNullOrUndefined, (, ), ), ;, }, return]
[(, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (, t, ., restrictByNotNullOrUndefined, (, ), ), ;, }, return]
[restricted, ., build, (, ), ;, }, @, Override, public, TernaryValue, testForEquality, (, JSType, that, ), {, TernaryValue, result, =]
[@, Override, public, TernaryValue, testForEquality, (, JSType, that, ), {, TernaryValue, result, =, null, ;, for, (, JSType, t, :]
[JSType, that, ), {, TernaryValue, result, =, null, ;, for, (, JSType, t, :, alternates, ), {, TernaryValue, test, =]
[JSType, that, ), {, TernaryValue, result, =, null, ;, for, (, JSType, t, :, alternates, ), {, TernaryValue, test, =]
[TernaryValue, result, =, null, ;, for, (, JSType, t, :, alternates, ), {, TernaryValue, test, =, t, ., testForEquality, (]
[for, (, JSType, t, :, alternates, ), {, TernaryValue, test, =, t, ., testForEquality, (, that, ), ;, if, (]
[for, (, JSType, t, :, alternates, ), {, TernaryValue, test, =, t, ., testForEquality, (, that, ), ;, if, (]
[JSType, t, :, alternates, ), {, TernaryValue, test, =, t, ., testForEquality, (, that, ), ;, if, (, result, ==]
[alternates, ), {, TernaryValue, test, =, t, ., testForEquality, (, that, ), ;, if, (, result, ==, null, ), {]
[{, TernaryValue, test, =, t, ., testForEquality, (, that, ), ;, if, (, result, ==, null, ), {, result, =]
[testForEquality, (, that, ), ;, if, (, result, ==, null, ), {, result, =, test, ;, }, else, if, (]
[(, that, ), ;, if, (, result, ==, null, ), {, result, =, test, ;, }, else, if, (, !]
[(, that, ), ;, if, (, result, ==, null, ), {, result, =, test, ;, }, else, if, (, !]
[if, (, result, ==, null, ), {, result, =, test, ;, }, else, if, (, !, result, ., equals, (]
[), {, result, =, test, ;, }, else, if, (, !, result, ., equals, (, test, ), ), {, return]
[;, }, else, if, (, !, result, ., equals, (, test, ), ), {, return, UNKNOWN, ;, }, }, return]
[;, }, }, return, result, ;, }, @, Override, public, boolean, isNullable, (, ), {, for, (, JSType, t, :]
[;, }, @, Override, public, boolean, isNullable, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[;, }, @, Override, public, boolean, isNullable, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[), {, for, (, JSType, t, :, alternates, ), {, if, (, t, ., isNullable, (, ), ), {, return]
[t, :, alternates, ), {, if, (, t, ., isNullable, (, ), ), {, return, true, ;, }, }, return]
[;, }, }, return, false, ;, }, @, Override, public, boolean, isUnknownType, (, ), {, for, (, JSType, t, :]
[;, }, @, Override, public, boolean, isUnknownType, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[;, }, @, Override, public, boolean, isUnknownType, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[), {, for, (, JSType, t, :, alternates, ), {, if, (, t, ., isUnknownType, (, ), ), {, return]
[t, :, alternates, ), {, if, (, t, ., isUnknownType, (, ), ), {, return, true, ;, }, }, return]
[;, }, }, return, false, ;, }, @, Override, public, boolean, isStruct, (, ), {, for, (, JSType, typ, :]
[@, Override, public, boolean, isStruct, (, ), {, for, (, JSType, typ, :, getAlternates, (, ), ), {, if, (]
[@, Override, public, boolean, isStruct, (, ), {, for, (, JSType, typ, :, getAlternates, (, ), ), {, if, (]
[for, (, JSType, typ, :, getAlternates, (, ), ), {, if, (, typ, ., isStruct, (, ), ), {, return]
[getAlternates, (, ), ), {, if, (, typ, ., isStruct, (, ), ), {, return, true, ;, }, }, return]
[;, }, }, return, false, ;, }, @, Override, public, boolean, isDict, (, ), {, for, (, JSType, typ, :]
[@, Override, public, boolean, isDict, (, ), {, for, (, JSType, typ, :, getAlternates, (, ), ), {, if, (]
[@, Override, public, boolean, isDict, (, ), {, for, (, JSType, typ, :, getAlternates, (, ), ), {, if, (]
[for, (, JSType, typ, :, getAlternates, (, ), ), {, if, (, typ, ., isDict, (, ), ), {, return]
[getAlternates, (, ), ), {, if, (, typ, ., isDict, (, ), ), {, return, true, ;, }, }, return]
[true, ;, }, }, return, false, ;, }, @, Override, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (]
[true, ;, }, }, return, false, ;, }, @, Override, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (]
[;, }, }, return, false, ;, }, @, Override, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (, !]
[;, }, }, return, false, ;, }, @, Override, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (, !]
[}, @, Override, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (, !, that, ., isUnknownType, (, ), &&]
[@, Override, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (, !, that, ., isUnknownType, (, ), &&, !]
[@, Override, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (, !, that, ., isUnknownType, (, ), &&, !]
[!, that, ., isUnknownType, (, ), &&, !, that, ., isUnionType, (, ), ), {, for, (, JSType, alternate, :]
[), &&, !, that, ., isUnionType, (, ), ), {, for, (, JSType, alternate, :, alternates, ), {, if, (]
[), &&, !, that, ., isUnionType, (, ), ), {, for, (, JSType, alternate, :, alternates, ), {, if, (]
[&&, !, that, ., isUnionType, (, ), ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !]
[&&, !, that, ., isUnionType, (, ), ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !]
[), ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !, alternate, ., isUnknownType, (, ), &&]
[), ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !, alternate, ., isUnknownType, (, ), &&]
[(, JSType, alternate, :, alternates, ), {, if, (, !, alternate, ., isUnknownType, (, ), &&, that, ., isSubtype, (]
[), {, if, (, !, alternate, ., isUnknownType, (, ), &&, that, ., isSubtype, (, alternate, ), ), {, return]
[., isUnknownType, (, ), &&, that, ., isSubtype, (, alternate, ), ), {, return, this, ;, }, }, }, return]
[(, ), &&, that, ., isSubtype, (, alternate, ), ), {, return, this, ;, }, }, }, return, getLeastSupertype, (]
[&&, that, ., isSubtype, (, alternate, ), ), {, return, this, ;, }, }, }, return, getLeastSupertype, (, this, ,]
[}, return, getLeastSupertype, (, this, ,, that, ), ;, }, JSType, meet, (, JSType, that, ), {, UnionTypeBuilder, builder, =]
[(, this, ,, that, ), ;, }, JSType, meet, (, JSType, that, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (]
[meet, (, JSType, that, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, alternate, :]
[{, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, alternate, :, alternates, ), {, if, (]
[{, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, alternate, :, alternates, ), {, if, (]
[new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, alternate, :, alternates, ), {, if, (, alternate, ., isSubtype, (]
[), ;, for, (, JSType, alternate, :, alternates, ), {, if, (, alternate, ., isSubtype, (, that, ), ), {]
[), ;, for, (, JSType, alternate, :, alternates, ), {, if, (, alternate, ., isSubtype, (, that, ), ), {]
[JSType, alternate, :, alternates, ), {, if, (, alternate, ., isSubtype, (, that, ), ), {, builder, ., addAlternate, (]
[(, alternate, ., isSubtype, (, that, ), ), {, builder, ., addAlternate, (, alternate, ), ;, }, }, if, (]
[(, alternate, ., isSubtype, (, that, ), ), {, builder, ., addAlternate, (, alternate, ), ;, }, }, if, (]
[(, alternate, ), ;, }, }, if, (, that, ., isUnionType, (, ), ), {, for, (, JSType, otherAlternate, :]
[(, alternate, ), ;, }, }, if, (, that, ., isUnionType, (, ), ), {, for, (, JSType, otherAlternate, :]
[(, alternate, ), ;, }, }, if, (, that, ., isUnionType, (, ), ), {, for, (, JSType, otherAlternate, :]
[(, ), ), {, for, (, JSType, otherAlternate, :, that, ., toMaybeUnionType, (, ), ., alternates, ), {, if, (]
[(, ), ), {, for, (, JSType, otherAlternate, :, that, ., toMaybeUnionType, (, ), ., alternates, ), {, if, (]
[for, (, JSType, otherAlternate, :, that, ., toMaybeUnionType, (, ), ., alternates, ), {, if, (, otherAlternate, ., isSubtype, (]
[:, that, ., toMaybeUnionType, (, ), ., alternates, ), {, if, (, otherAlternate, ., isSubtype, (, this, ), ), {]
[:, that, ., toMaybeUnionType, (, ), ., alternates, ), {, if, (, otherAlternate, ., isSubtype, (, this, ), ), {]
[(, ), ., alternates, ), {, if, (, otherAlternate, ., isSubtype, (, this, ), ), {, builder, ., addAlternate, (]
[., isSubtype, (, this, ), ), {, builder, ., addAlternate, (, otherAlternate, ), ;, }, }, }, else, if, (]
[., isSubtype, (, this, ), ), {, builder, ., addAlternate, (, otherAlternate, ), ;, }, }, }, else, if, (]
[), ), {, builder, ., addAlternate, (, otherAlternate, ), ;, }, }, }, else, if, (, that, ., isSubtype, (]
[., addAlternate, (, otherAlternate, ), ;, }, }, }, else, if, (, that, ., isSubtype, (, this, ), ), {]
[., addAlternate, (, otherAlternate, ), ;, }, }, }, else, if, (, that, ., isSubtype, (, this, ), ), {]
[), ;, }, }, }, else, if, (, that, ., isSubtype, (, this, ), ), {, builder, ., addAlternate, (]
[(, that, ., isSubtype, (, this, ), ), {, builder, ., addAlternate, (, that, ), ;, }, JSType, result, =]
[(, that, ., isSubtype, (, this, ), ), {, builder, ., addAlternate, (, that, ), ;, }, JSType, result, =]
[{, builder, ., addAlternate, (, that, ), ;, }, JSType, result, =, builder, ., build, (, ), ;, if, (]
[builder, ., addAlternate, (, that, ), ;, }, JSType, result, =, builder, ., build, (, ), ;, if, (, !]
[builder, ., addAlternate, (, that, ), ;, }, JSType, result, =, builder, ., build, (, ), ;, if, (, !]
[JSType, result, =, builder, ., build, (, ), ;, if, (, !, result, ., isNoType, (, ), ), {, return]
[(, ), ;, if, (, !, result, ., isNoType, (, ), ), {, return, result, ;, }, else, if, (]
[(, ), ;, if, (, !, result, ., isNoType, (, ), ), {, return, result, ;, }, else, if, (]
[(, ), ;, if, (, !, result, ., isNoType, (, ), ), {, return, result, ;, }, else, if, (]
[result, ., isNoType, (, ), ), {, return, result, ;, }, else, if, (, this, ., isObject, (, ), &&]
[., isNoType, (, ), ), {, return, result, ;, }, else, if, (, this, ., isObject, (, ), &&, (]
[., isNoType, (, ), ), {, return, result, ;, }, else, if, (, this, ., isObject, (, ), &&, (]
[., isNoType, (, ), ), {, return, result, ;, }, else, if, (, this, ., isObject, (, ), &&, (]
[return, result, ;, }, else, if, (, this, ., isObject, (, ), &&, (, that, ., isObject, (, ), &&]
[result, ;, }, else, if, (, this, ., isObject, (, ), &&, (, that, ., isObject, (, ), &&, !]
[result, ;, }, else, if, (, this, ., isObject, (, ), &&, (, that, ., isObject, (, ), &&, !]
[(, ), &&, (, that, ., isObject, (, ), &&, !, that, ., isNoType, (, ), ), ), {, return]
[&&, (, that, ., isObject, (, ), &&, !, that, ., isNoType, (, ), ), ), {, return, getNativeType, (]
[&&, (, that, ., isObject, (, ), &&, !, that, ., isNoType, (, ), ), ), {, return, getNativeType, (]
[that, ., isNoType, (, ), ), ), {, return, getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, else, {, return]
[isNoType, (, ), ), ), {, return, getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, else, {, return, getNativeType, (]
[isNoType, (, ), ), ), {, return, getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, else, {, return, getNativeType, (]
[(, JSTypeNative, ., NO_TYPE, ), ;, }, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (]
[(, JSTypeNative, ., NO_TYPE, ), ;, }, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (]
[(, JSTypeNative, ., NO_TYPE, ), ;, }, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (]
[., NO_TYPE, ), ;, }, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, eqMethod, ==]
[., NO_TYPE, ), ;, }, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, eqMethod, ==]
[}, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, &&]
[}, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, &&]
[}, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, &&]
[that, ,, EquivalenceMethod, eqMethod, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, &&, alternates, ., size, (, ), !=]
[that, ,, EquivalenceMethod, eqMethod, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, &&, alternates, ., size, (, ), !=]
[that, ,, EquivalenceMethod, eqMethod, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, &&, alternates, ., size, (, ), !=]
[EquivalenceMethod, ., IDENTITY, &&, alternates, ., size, (, ), !=, that, ., alternates, ., size, (, ), ), {, return]
[), !=, that, ., alternates, ., size, (, ), ), {, return, false, ;, }, for, (, JSType, alternate, :]
[), !=, that, ., alternates, ., size, (, ), ), {, return, false, ;, }, for, (, JSType, alternate, :]
[(, ), ), {, return, false, ;, }, for, (, JSType, alternate, :, that, ., alternates, ), {, if, (]
[), ), {, return, false, ;, }, for, (, JSType, alternate, :, that, ., alternates, ), {, if, (, !]
[{, return, false, ;, }, for, (, JSType, alternate, :, that, ., alternates, ), {, if, (, !, hasAlternate, (]
[false, ;, }, for, (, JSType, alternate, :, that, ., alternates, ), {, if, (, !, hasAlternate, (, alternate, ,]
[JSType, alternate, :, that, ., alternates, ), {, if, (, !, hasAlternate, (, alternate, ,, eqMethod, ), ), {, return]
[alternates, ), {, if, (, !, hasAlternate, (, alternate, ,, eqMethod, ), ), {, return, false, ;, }, }, return]
[return, true, ;, }, private, boolean, hasAlternate, (, JSType, type, ,, EquivalenceMethod, eqMethod, ), {, for, (, JSType, alternate, :]
[boolean, hasAlternate, (, JSType, type, ,, EquivalenceMethod, eqMethod, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (]
[boolean, hasAlternate, (, JSType, type, ,, EquivalenceMethod, eqMethod, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (]
[type, ,, EquivalenceMethod, eqMethod, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, alternate, ., checkEquivalenceHelper, (]
[EquivalenceMethod, eqMethod, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, alternate, ., checkEquivalenceHelper, (, type, ,]
[(, JSType, alternate, :, alternates, ), {, if, (, alternate, ., checkEquivalenceHelper, (, type, ,, eqMethod, ), ), {, return]
[), {, if, (, alternate, ., checkEquivalenceHelper, (, type, ,, eqMethod, ), ), {, return, true, ;, }, }, return]
[}, return, false, ;, }, @, Override, public, boolean, hasProperty, (, String, pname, ), {, for, (, JSType, alternate, :]
[@, Override, public, boolean, hasProperty, (, String, pname, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (]
[@, Override, public, boolean, hasProperty, (, String, pname, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (]
[hasProperty, (, String, pname, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, alternate, ., hasProperty, (]
[{, for, (, JSType, alternate, :, alternates, ), {, if, (, alternate, ., hasProperty, (, pname, ), ), {, return]
[:, alternates, ), {, if, (, alternate, ., hasProperty, (, pname, ), ), {, return, true, ;, }, }, return]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[int, hashCode, (, ), {, return, this, ., hashcode, ;, }, @, Override, public, UnionType, toMaybeUnionType, (, ), {, return]
[(, ), {, return, this, ;, }, @, Override, public, boolean, isObject, (, ), {, for, (, JSType, alternate, :]
[;, }, @, Override, public, boolean, isObject, (, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (]
[}, @, Override, public, boolean, isObject, (, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !]
[}, @, Override, public, boolean, isObject, (, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !]
[{, for, (, JSType, alternate, :, alternates, ), {, if, (, !, alternate, ., isObject, (, ), ), {, return]
[:, alternates, ), {, if, (, !, alternate, ., isObject, (, ), ), {, return, false, ;, }, }, return]
[;, }, }, return, true, ;, }, public, boolean, contains, (, JSType, type, ), {, for, (, JSType, alt, :]
[;, }, public, boolean, contains, (, JSType, type, ), {, for, (, JSType, alt, :, alternates, ), {, if, (]
[;, }, public, boolean, contains, (, JSType, type, ), {, for, (, JSType, alt, :, alternates, ), {, if, (]
[contains, (, JSType, type, ), {, for, (, JSType, alt, :, alternates, ), {, if, (, alt, ., isEquivalentTo, (]
[{, for, (, JSType, alt, :, alternates, ), {, if, (, alt, ., isEquivalentTo, (, type, ), ), {, return]
[:, alternates, ), {, if, (, alt, ., isEquivalentTo, (, type, ), ), {, return, true, ;, }, }, return]
[return, true, ;, }, }, return, false, ;, }, public, JSType, getRestrictedUnion, (, JSType, type, ), {, UnionTypeBuilder, restricted, =]
[}, }, return, false, ;, }, public, JSType, getRestrictedUnion, (, JSType, type, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (]
[getRestrictedUnion, (, JSType, type, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :]
[{, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {, if, (]
[{, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {, if, (]
[{, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {, if, (]
[{, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, t, :, alternates, ), {, if, (]
[(, registry, ), ;, for, (, JSType, t, :, alternates, ), {, if, (, t, ., isUnknownType, (, ), ||]
[(, registry, ), ;, for, (, JSType, t, :, alternates, ), {, if, (, t, ., isUnknownType, (, ), ||]
[JSType, t, :, alternates, ), {, if, (, t, ., isUnknownType, (, ), ||, t, ., isNoResolvedType, (, ), ||]
[t, :, alternates, ), {, if, (, t, ., isUnknownType, (, ), ||, t, ., isNoResolvedType, (, ), ||, !]
[t, :, alternates, ), {, if, (, t, ., isUnknownType, (, ), ||, t, ., isNoResolvedType, (, ), ||, !]
[{, if, (, t, ., isUnknownType, (, ), ||, t, ., isNoResolvedType, (, ), ||, !, t, ., isSubtype, (]
[., isUnknownType, (, ), ||, t, ., isNoResolvedType, (, ), ||, !, t, ., isSubtype, (, type, ), ), {]
[., isUnknownType, (, ), ||, t, ., isNoResolvedType, (, ), ||, !, t, ., isSubtype, (, type, ), ), {]
[||, t, ., isNoResolvedType, (, ), ||, !, t, ., isSubtype, (, type, ), ), {, restricted, ., addAlternate, (]
[||, !, t, ., isSubtype, (, type, ), ), {, restricted, ., addAlternate, (, t, ), ;, }, }, return]
[||, !, t, ., isSubtype, (, type, ), ), {, restricted, ., addAlternate, (, t, ), ;, }, }, return]
[return, restricted, ., build, (, ), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, StringBuilder, result, =]
[@, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, firstAlternate, =]
[String, toStringHelper, (, boolean, forAnnotations, ), {, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, firstAlternate, =, true, ;]
[String, toStringHelper, (, boolean, forAnnotations, ), {, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, firstAlternate, =, true, ;]
[forAnnotations, ), {, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, firstAlternate, =, true, ;, result, ., append, (]
[), ;, boolean, firstAlternate, =, true, ;, result, ., append, (, "(", ), ;, SortedSet, <, JSType, >, sorted, =]
[;, result, ., append, (, "(", ), ;, SortedSet, <, JSType, >, sorted, =, new, TreeSet, <, JSType, >, (]
[append, (, "(", ), ;, SortedSet, <, JSType, >, sorted, =, new, TreeSet, <, JSType, >, (, ALPHA, ), ;]
[append, (, "(", ), ;, SortedSet, <, JSType, >, sorted, =, new, TreeSet, <, JSType, >, (, ALPHA, ), ;]
[;, SortedSet, <, JSType, >, sorted, =, new, TreeSet, <, JSType, >, (, ALPHA, ), ;, sorted, ., addAll, (]
[TreeSet, <, JSType, >, (, ALPHA, ), ;, sorted, ., addAll, (, alternates, ), ;, for, (, JSType, t, :]
[ALPHA, ), ;, sorted, ., addAll, (, alternates, ), ;, for, (, JSType, t, :, sorted, ), {, if, (]
[), ;, sorted, ., addAll, (, alternates, ), ;, for, (, JSType, t, :, sorted, ), {, if, (, !]
[., addAll, (, alternates, ), ;, for, (, JSType, t, :, sorted, ), {, if, (, !, firstAlternate, ), {]
[., addAll, (, alternates, ), ;, for, (, JSType, t, :, sorted, ), {, if, (, !, firstAlternate, ), {]
[), ;, for, (, JSType, t, :, sorted, ), {, if, (, !, firstAlternate, ), {, result, ., append, (]
[JSType, t, :, sorted, ), {, if, (, !, firstAlternate, ), {, result, ., append, (, "|", ), ;, }]
[JSType, t, :, sorted, ), {, if, (, !, firstAlternate, ), {, result, ., append, (, "|", ), ;, }]
[), {, if, (, !, firstAlternate, ), {, result, ., append, (, "|", ), ;, }, result, ., append, (]
[), {, if, (, !, firstAlternate, ), {, result, ., append, (, "|", ), ;, }, result, ., append, (]
[!, firstAlternate, ), {, result, ., append, (, "|", ), ;, }, result, ., append, (, t, ., toStringHelper, (]
[result, ., append, (, "|", ), ;, }, result, ., append, (, t, ., toStringHelper, (, forAnnotations, ), ), ;]
[append, (, "|", ), ;, }, result, ., append, (, t, ., toStringHelper, (, forAnnotations, ), ), ;, firstAlternate, =]
[), ;, }, result, ., append, (, t, ., toStringHelper, (, forAnnotations, ), ), ;, firstAlternate, =, false, ;, }]
[), ;, }, result, ., append, (, t, ., toStringHelper, (, forAnnotations, ), ), ;, firstAlternate, =, false, ;, }]
[., append, (, t, ., toStringHelper, (, forAnnotations, ), ), ;, firstAlternate, =, false, ;, }, result, ., append, (]
[., toStringHelper, (, forAnnotations, ), ), ;, firstAlternate, =, false, ;, }, result, ., append, (, ")", ), ;, return]
[., toStringHelper, (, forAnnotations, ), ), ;, firstAlternate, =, false, ;, }, result, ., append, (, ")", ), ;, return]
[return, result, ., toString, (, ), ;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (]
[return, result, ., toString, (, ), ;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (]
[@, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (, that, ., isUnknownType, (, ), ), {, return]
[(, JSType, that, ), {, if, (, that, ., isUnknownType, (, ), ), {, return, true, ;, }, if, (]
[(, JSType, that, ), {, if, (, that, ., isUnknownType, (, ), ), {, return, true, ;, }, if, (]
[., isUnknownType, (, ), ), {, return, true, ;, }, if, (, that, ., isAllType, (, ), ), {, return]
[;, }, if, (, that, ., isAllType, (, ), ), {, return, true, ;, }, for, (, JSType, element, :]
[., isAllType, (, ), ), {, return, true, ;, }, for, (, JSType, element, :, alternates, ), {, if, (]
[isAllType, (, ), ), {, return, true, ;, }, for, (, JSType, element, :, alternates, ), {, if, (, !]
[isAllType, (, ), ), {, return, true, ;, }, for, (, JSType, element, :, alternates, ), {, if, (, !]
[{, return, true, ;, }, for, (, JSType, element, :, alternates, ), {, if, (, !, element, ., isSubtype, (]
[for, (, JSType, element, :, alternates, ), {, if, (, !, element, ., isSubtype, (, that, ), ), {, return]
[alternates, ), {, if, (, !, element, ., isSubtype, (, that, ), ), {, return, false, ;, }, }, return]
[;, }, }, return, true, ;, }, @, Override, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, UnionTypeBuilder, restricted, =]
[return, true, ;, }, @, Override, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (]
[getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :]
[outcome, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {]
[outcome, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {]
[restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, restricted, ., addAlternate, (]
[restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, restricted, ., addAlternate, (]
[(, registry, ), ;, for, (, JSType, element, :, alternates, ), {, restricted, ., addAlternate, (, element, ., getRestrictedTypeGivenToBooleanOutcome, (]
[JSType, element, :, alternates, ), {, restricted, ., addAlternate, (, element, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }, return]
[JSType, element, :, alternates, ), {, restricted, ., addAlternate, (, element, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }, return]
[}, return, restricted, ., build, (, ), ;, }, @, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {, BooleanLiteralSet, literals, =]
[}, return, restricted, ., build, (, ), ;, }, @, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {, BooleanLiteralSet, literals, =]
[@, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {, BooleanLiteralSet, literals, =, BooleanLiteralSet, ., EMPTY, ;, for, (, JSType, element, :]
[BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {, BooleanLiteralSet, literals, =, BooleanLiteralSet, ., EMPTY, ;, for, (, JSType, element, :, alternates, ), {]
[(, ), {, BooleanLiteralSet, literals, =, BooleanLiteralSet, ., EMPTY, ;, for, (, JSType, element, :, alternates, ), {, literals, =]
[(, ), {, BooleanLiteralSet, literals, =, BooleanLiteralSet, ., EMPTY, ;, for, (, JSType, element, :, alternates, ), {, literals, =]
[literals, =, BooleanLiteralSet, ., EMPTY, ;, for, (, JSType, element, :, alternates, ), {, literals, =, literals, ., union, (]
[literals, =, BooleanLiteralSet, ., EMPTY, ;, for, (, JSType, element, :, alternates, ), {, literals, =, literals, ., union, (]
[element, :, alternates, ), {, literals, =, literals, ., union, (, element, ., getPossibleToBooleanOutcomes, (, ), ), ;, if, (]
[element, :, alternates, ), {, literals, =, literals, ., union, (, element, ., getPossibleToBooleanOutcomes, (, ), ), ;, if, (]
[alternates, ), {, literals, =, literals, ., union, (, element, ., getPossibleToBooleanOutcomes, (, ), ), ;, if, (, literals, ==]
[alternates, ), {, literals, =, literals, ., union, (, element, ., getPossibleToBooleanOutcomes, (, ), ), ;, if, (, literals, ==]
[., getPossibleToBooleanOutcomes, (, ), ), ;, if, (, literals, ==, BooleanLiteralSet, ., BOTH, ), {, break, ;, }, }, return]
[;, }, }, return, literals, ;, }, @, Override, public, TypePair, getTypesUnderEquality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =]
[return, literals, ;, }, @, Override, public, TypePair, getTypesUnderEquality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (]
[public, TypePair, getTypesUnderEquality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, UnionTypeBuilder, thatRestricted, =]
[(, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (]
[new, UnionTypeBuilder, (, registry, ), ;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :]
[UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =]
[UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =]
[UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderEquality, (]
[for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderEquality, (, that, ), ;, if, (]
[for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderEquality, (, that, ), ;, if, (]
[for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderEquality, (, that, ), ;, if, (]
[:, alternates, ), {, TypePair, p, =, element, ., getTypesUnderEquality, (, that, ), ;, if, (, p, ., typeA, !=]
[{, TypePair, p, =, element, ., getTypesUnderEquality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {]
[{, TypePair, p, =, element, ., getTypesUnderEquality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {]
[element, ., getTypesUnderEquality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (]
[element, ., getTypesUnderEquality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (]
[(, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (]
[(, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (]
[(, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (]
[!=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=]
[{, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {]
[{, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {]
[(, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (]
[(, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (]
[(, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return]
[typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (]
[typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (]
[., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,]
[., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,]
[., build, (, ), ), ;, }, @, Override, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =]
[), ), ;, }, @, Override, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (]
[public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, UnionTypeBuilder, thatRestricted, =]
[(, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (]
[new, UnionTypeBuilder, (, registry, ), ;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :]
[UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =]
[UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =]
[UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderInequality, (]
[for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderInequality, (, that, ), ;, if, (]
[for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderInequality, (, that, ), ;, if, (]
[for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderInequality, (, that, ), ;, if, (]
[:, alternates, ), {, TypePair, p, =, element, ., getTypesUnderInequality, (, that, ), ;, if, (, p, ., typeA, !=]
[{, TypePair, p, =, element, ., getTypesUnderInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {]
[{, TypePair, p, =, element, ., getTypesUnderInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {]
[element, ., getTypesUnderInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (]
[element, ., getTypesUnderInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (]
[(, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (]
[(, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (]
[(, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (]
[!=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=]
[{, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {]
[{, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {]
[(, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (]
[(, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (]
[(, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return]
[typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (]
[typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (]
[., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,]
[., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,]
[., build, (, ), ), ;, }, @, Override, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =]
[), ), ;, }, @, Override, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (]
[public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, UnionTypeBuilder, thatRestricted, =]
[(, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (]
[new, UnionTypeBuilder, (, registry, ), ;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :]
[UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =]
[UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =]
[UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderShallowInequality, (]
[for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderShallowInequality, (, that, ), ;, if, (]
[for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderShallowInequality, (, that, ), ;, if, (]
[for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderShallowInequality, (, that, ), ;, if, (]
[:, alternates, ), {, TypePair, p, =, element, ., getTypesUnderShallowInequality, (, that, ), ;, if, (, p, ., typeA, !=]
[{, TypePair, p, =, element, ., getTypesUnderShallowInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {]
[{, TypePair, p, =, element, ., getTypesUnderShallowInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {]
[element, ., getTypesUnderShallowInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (]
[element, ., getTypesUnderShallowInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (]
[(, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (]
[(, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (]
[(, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (]
[!=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=]
[{, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {]
[{, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {]
[(, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (]
[(, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (]
[(, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return]
[typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (]
[typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (]
[., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,]
[., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,]
[), ;, }, @, Override, public, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), {, return]
[), ;, }, @, Override, public, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), {, return]
[Override, public, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), {, return, visitor, ., caseUnionType, (]
[}, @, Override, <, T, >, T, visit, (, RelationshipVisitor, <, T, >, visitor, ,, JSType, that, ), {, return]
[}, @, Override, <, T, >, T, visit, (, RelationshipVisitor, <, T, >, visitor, ,, JSType, that, ), {, return]
[T, >, T, visit, (, RelationshipVisitor, <, T, >, visitor, ,, JSType, that, ), {, return, visitor, ., caseUnionType, (]
[T, visit, (, RelationshipVisitor, <, T, >, visitor, ,, JSType, that, ), {, return, visitor, ., caseUnionType, (, this, ,]
[,, that, ), ;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {]
[), ;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, setResolvedTypeInternal, (]
[resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, setResolvedTypeInternal, (, this, ), ;, boolean, changed, =]
[), {, setResolvedTypeInternal, (, this, ), ;, boolean, changed, =, false, ;, ImmutableList, ., Builder, <, JSType, >, resolvedTypes, =]
[), {, setResolvedTypeInternal, (, this, ), ;, boolean, changed, =, false, ;, ImmutableList, ., Builder, <, JSType, >, resolvedTypes, =]
[;, ImmutableList, ., Builder, <, JSType, >, resolvedTypes, =, ImmutableList, ., builder, (, ), ;, for, (, JSType, alternate, :]
[>, resolvedTypes, =, ImmutableList, ., builder, (, ), ;, for, (, JSType, alternate, :, alternates, ), {, JSType, newAlternate, =]
[>, resolvedTypes, =, ImmutableList, ., builder, (, ), ;, for, (, JSType, alternate, :, alternates, ), {, JSType, newAlternate, =]
[., builder, (, ), ;, for, (, JSType, alternate, :, alternates, ), {, JSType, newAlternate, =, alternate, ., resolve, (]
[(, ), ;, for, (, JSType, alternate, :, alternates, ), {, JSType, newAlternate, =, alternate, ., resolve, (, t, ,]
[for, (, JSType, alternate, :, alternates, ), {, JSType, newAlternate, =, alternate, ., resolve, (, t, ,, scope, ), ;]
[JSType, alternate, :, alternates, ), {, JSType, newAlternate, =, alternate, ., resolve, (, t, ,, scope, ), ;, changed, |=]
[alternate, :, alternates, ), {, JSType, newAlternate, =, alternate, ., resolve, (, t, ,, scope, ), ;, changed, |=, (]
[alternate, :, alternates, ), {, JSType, newAlternate, =, alternate, ., resolve, (, t, ,, scope, ), ;, changed, |=, (]
[alternates, ), {, JSType, newAlternate, =, alternate, ., resolve, (, t, ,, scope, ), ;, changed, |=, (, alternate, !=]
[JSType, newAlternate, =, alternate, ., resolve, (, t, ,, scope, ), ;, changed, |=, (, alternate, !=, newAlternate, ), ;]
[JSType, newAlternate, =, alternate, ., resolve, (, t, ,, scope, ), ;, changed, |=, (, alternate, !=, newAlternate, ), ;]
[., resolve, (, t, ,, scope, ), ;, changed, |=, (, alternate, !=, newAlternate, ), ;, resolvedTypes, ., add, (]
[), ;, changed, |=, (, alternate, !=, newAlternate, ), ;, resolvedTypes, ., add, (, alternate, ), ;, }, if, (]
[;, resolvedTypes, ., add, (, alternate, ), ;, }, if, (, changed, ), {, Collection, <, JSType, >, newAlternates, =]
[;, resolvedTypes, ., add, (, alternate, ), ;, }, if, (, changed, ), {, Collection, <, JSType, >, newAlternates, =]
[), ;, }, if, (, changed, ), {, Collection, <, JSType, >, newAlternates, =, resolvedTypes, ., build, (, ), ;]
[), ;, }, if, (, changed, ), {, Collection, <, JSType, >, newAlternates, =, resolvedTypes, ., build, (, ), ;]
[(, changed, ), {, Collection, <, JSType, >, newAlternates, =, resolvedTypes, ., build, (, ), ;, Preconditions, ., checkState, (]
[(, changed, ), {, Collection, <, JSType, >, newAlternates, =, resolvedTypes, ., build, (, ), ;, Preconditions, ., checkState, (]
[(, changed, ), {, Collection, <, JSType, >, newAlternates, =, resolvedTypes, ., build, (, ), ;, Preconditions, ., checkState, (]
[JSType, >, newAlternates, =, resolvedTypes, ., build, (, ), ;, Preconditions, ., checkState, (, newAlternates, ., hashCode, (, ), ==]
[JSType, >, newAlternates, =, resolvedTypes, ., build, (, ), ;, Preconditions, ., checkState, (, newAlternates, ., hashCode, (, ), ==]
[., build, (, ), ;, Preconditions, ., checkState, (, newAlternates, ., hashCode, (, ), ==, this, ., hashcode, ), ;]
[(, ), ;, Preconditions, ., checkState, (, newAlternates, ., hashCode, (, ), ==, this, ., hashcode, ), ;, alternates, =]
[., checkState, (, newAlternates, ., hashCode, (, ), ==, this, ., hashcode, ), ;, alternates, =, newAlternates, ;, }, return]
[;, }, return, this, ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, List, <, String, >, hashCodes, =]
[;, }, return, this, ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, List, <, String, >, hashCodes, =]
[(, ), {, List, <, String, >, hashCodes, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, a, :]
[List, <, String, >, hashCodes, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, a, :, alternates, ), {]
[List, <, String, >, hashCodes, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, a, :, alternates, ), {]
[hashCodes, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, a, :, alternates, ), {, hashCodes, ., add, (]
[hashCodes, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, a, :, alternates, ), {, hashCodes, ., add, (]
[(, JSType, a, :, alternates, ), {, hashCodes, ., add, (, a, ., toDebugHashCodeString, (, ), ), ;, }, return]
[(, JSType, a, :, alternates, ), {, hashCodes, ., add, (, a, ., toDebugHashCodeString, (, ), ), ;, }, return]
[(, JSType, a, :, alternates, ), {, hashCodes, ., add, (, a, ., toDebugHashCodeString, (, ), ), ;, }, return]
[a, :, alternates, ), {, hashCodes, ., add, (, a, ., toDebugHashCodeString, (, ), ), ;, }, return, "{(", +]
[a, :, alternates, ), {, hashCodes, ., add, (, a, ., toDebugHashCodeString, (, ), ), ;, }, return, "{(", +]
[a, :, alternates, ), {, hashCodes, ., add, (, a, ., toDebugHashCodeString, (, ), ), ;, }, return, "{(", +]
[{, hashCodes, ., add, (, a, ., toDebugHashCodeString, (, ), ), ;, }, return, "{(", +, Joiner, ., on, (]
[a, ., toDebugHashCodeString, (, ), ), ;, }, return, "{(", +, Joiner, ., on, (, ",", ), ., join, (]
[(, ), ), ;, }, return, "{(", +, Joiner, ., on, (, ",", ), ., join, (, hashCodes, ), +]
[;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, for, (, JSType, a, :]
[Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, for, (, JSType, a, :, alternates, ), {]
[Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, for, (, JSType, a, :, alternates, ), {]
[(, Predicate, <, JSType, >, validator, ), {, for, (, JSType, a, :, alternates, ), {, a, ., setValidator, (]
[validator, ), {, for, (, JSType, a, :, alternates, ), {, a, ., setValidator, (, validator, ), ;, }, return]
[(, validator, ), ;, }, return, true, ;, }, @, Override, public, JSType, collapseUnion, (, ), {, JSType, currentValue, =]
[return, true, ;, }, @, Override, public, JSType, collapseUnion, (, ), {, JSType, currentValue, =, null, ;, ObjectType, currentCommonSuper, =]
[JSType, collapseUnion, (, ), {, JSType, currentValue, =, null, ;, ObjectType, currentCommonSuper, =, null, ;, for, (, JSType, a, :]
[JSType, currentValue, =, null, ;, ObjectType, currentCommonSuper, =, null, ;, for, (, JSType, a, :, alternates, ), {, if, (]
[JSType, currentValue, =, null, ;, ObjectType, currentCommonSuper, =, null, ;, for, (, JSType, a, :, alternates, ), {, if, (]
[null, ;, for, (, JSType, a, :, alternates, ), {, if, (, a, ., isUnknownType, (, ), ), {, return]
[for, (, JSType, a, :, alternates, ), {, if, (, a, ., isUnknownType, (, ), ), {, return, getNativeType, (]
[for, (, JSType, a, :, alternates, ), {, if, (, a, ., isUnknownType, (, ), ), {, return, getNativeType, (]
[(, a, ., isUnknownType, (, ), ), {, return, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, ObjectType, obj, =]
[(, a, ., isUnknownType, (, ), ), {, return, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, ObjectType, obj, =]
[return, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, ObjectType, obj, =, a, ., toObjectType, (, ), ;, if, (]
[return, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, ObjectType, obj, =, a, ., toObjectType, (, ), ;, if, (]
[(, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, ObjectType, obj, =, a, ., toObjectType, (, ), ;, if, (, obj, ==]
[;, }, ObjectType, obj, =, a, ., toObjectType, (, ), ;, if, (, obj, ==, null, ), {, if, (]
[;, }, ObjectType, obj, =, a, ., toObjectType, (, ), ;, if, (, obj, ==, null, ), {, if, (]
[;, }, ObjectType, obj, =, a, ., toObjectType, (, ), ;, if, (, obj, ==, null, ), {, if, (]
[ObjectType, obj, =, a, ., toObjectType, (, ), ;, if, (, obj, ==, null, ), {, if, (, currentValue, ==]
[=, a, ., toObjectType, (, ), ;, if, (, obj, ==, null, ), {, if, (, currentValue, ==, null, &&]
[=, a, ., toObjectType, (, ), ;, if, (, obj, ==, null, ), {, if, (, currentValue, ==, null, &&]
[., toObjectType, (, ), ;, if, (, obj, ==, null, ), {, if, (, currentValue, ==, null, &&, currentCommonSuper, ==]
[), ;, if, (, obj, ==, null, ), {, if, (, currentValue, ==, null, &&, currentCommonSuper, ==, null, ), {]
[if, (, obj, ==, null, ), {, if, (, currentValue, ==, null, &&, currentCommonSuper, ==, null, ), {, currentValue, =]
[{, if, (, currentValue, ==, null, &&, currentCommonSuper, ==, null, ), {, currentValue, =, a, ;, }, else, {, return]
[(, currentValue, ==, null, &&, currentCommonSuper, ==, null, ), {, currentValue, =, a, ;, }, else, {, return, getNativeType, (]
[(, currentValue, ==, null, &&, currentCommonSuper, ==, null, ), {, currentValue, =, a, ;, }, else, {, return, getNativeType, (]
[currentValue, =, a, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, }, else, if, (]
[currentValue, =, a, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, }, else, if, (]
[a, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, }, else, if, (, currentValue, !=]
[{, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, }, else, if, (, currentValue, !=, null, ), {, return]
[getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, }, else, if, (, currentValue, !=, null, ), {, return, getNativeType, (]
[getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, }, else, if, (, currentValue, !=, null, ), {, return, getNativeType, (]
[else, if, (, currentValue, !=, null, ), {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, else, if, (]
[else, if, (, currentValue, !=, null, ), {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, else, if, (]
[(, currentValue, !=, null, ), {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, else, if, (, currentCommonSuper, ==]
[null, ), {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, else, if, (, currentCommonSuper, ==, null, ), {]
[{, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, else, if, (, currentCommonSuper, ==, null, ), {, currentCommonSuper, =]
[., ALL_TYPE, ), ;, }, else, if, (, currentCommonSuper, ==, null, ), {, currentCommonSuper, =, obj, ;, }, else, {]
[), ;, }, else, if, (, currentCommonSuper, ==, null, ), {, currentCommonSuper, =, obj, ;, }, else, {, currentCommonSuper, =]
[), ;, }, else, if, (, currentCommonSuper, ==, null, ), {, currentCommonSuper, =, obj, ;, }, else, {, currentCommonSuper, =]
[if, (, currentCommonSuper, ==, null, ), {, currentCommonSuper, =, obj, ;, }, else, {, currentCommonSuper, =, registry, ., findCommonSuperObject, (]
[currentCommonSuper, ==, null, ), {, currentCommonSuper, =, obj, ;, }, else, {, currentCommonSuper, =, registry, ., findCommonSuperObject, (, currentCommonSuper, ,]
[=, obj, ;, }, else, {, currentCommonSuper, =, registry, ., findCommonSuperObject, (, currentCommonSuper, ,, obj, ), ;, }, }, return]
[}, return, currentCommonSuper, ;, }, @, Override, public, void, matchConstraint, (, JSType, constraint, ), {, for, (, JSType, alternate, :]
[;, }, @, Override, public, void, matchConstraint, (, JSType, constraint, ), {, for, (, JSType, alternate, :, alternates, ), {]
[;, }, @, Override, public, void, matchConstraint, (, JSType, constraint, ), {, for, (, JSType, alternate, :, alternates, ), {]
[public, void, matchConstraint, (, JSType, constraint, ), {, for, (, JSType, alternate, :, alternates, ), {, alternate, ., matchConstraint, (]
[matchConstraint, (, constraint, ), ;, }, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, for, (, JSType, alternate, :]
[}, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (]
[}, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (]
[), {, for, (, JSType, alternate, :, alternates, ), {, if, (, alternate, ., hasAnyTemplateTypes, (, ), ), {, return]
[alternate, :, alternates, ), {, if, (, alternate, ., hasAnyTemplateTypes, (, ), ), {, return, true, ;, }, }, return]
