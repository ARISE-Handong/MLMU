[,, ROUND_HALF_UP, ,, ROUND_HALF_DOWN, ,, ROUND_HALF_EVEN, ,, ROUND_HALF_ODD, ,, ROUND_CEIL, ,, ROUND_FLOOR, ;, }, public, static, final, int, FLAG_INVALID, =]
[,, ROUND_CEIL, ,, ROUND_FLOOR, ;, }, public, static, final, int, FLAG_INVALID, =, 1, ;, public, static, final, int, FLAG_DIV_ZERO, =]
[final, int, FLAG_INVALID, =, 1, ;, public, static, final, int, FLAG_DIV_ZERO, =, 2, ;, public, static, final, int, FLAG_OVERFLOW, =]
[final, int, FLAG_DIV_ZERO, =, 2, ;, public, static, final, int, FLAG_OVERFLOW, =, 4, ;, public, static, final, int, FLAG_UNDERFLOW, =]
[final, int, FLAG_OVERFLOW, =, 4, ;, public, static, final, int, FLAG_UNDERFLOW, =, 8, ;, public, static, final, int, FLAG_INEXACT, =]
[ln10, ;, private, RoundingMode, rMode, ;, private, int, ieeeFlags, ;, public, DfpField, (, final, int, decimalDigits, ), {, this, (]
[private, RoundingMode, rMode, ;, private, int, ieeeFlags, ;, public, DfpField, (, final, int, decimalDigits, ), {, this, (, decimalDigits, ,]
[this, (, decimalDigits, ,, true, ), ;, }, private, DfpField, (, final, int, decimalDigits, ,, final, boolean, computeConstants, ), {]
[this, (, decimalDigits, ,, true, ), ;, }, private, DfpField, (, final, int, decimalDigits, ,, final, boolean, computeConstants, ), {]
[true, ), ;, }, private, DfpField, (, final, int, decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits, =]
[true, ), ;, }, private, DfpField, (, final, int, decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits, =]
[), ;, }, private, DfpField, (, final, int, decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits, =, (]
[), ;, }, private, DfpField, (, final, int, decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits, =, (]
[}, private, DfpField, (, final, int, decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits, =, (, decimalDigits, <]
[(, final, int, decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits, =, (, decimalDigits, <, 13, ), ?]
[int, decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits, =, (, decimalDigits, <, 13, ), ?, 4, :]
[int, decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits, =, (, decimalDigits, <, 13, ), ?, 4, :]
[decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits, =, (, decimalDigits, <, 13, ), ?, 4, :, (]
[decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits, =, (, decimalDigits, <, 13, ), ?, 4, :, (]
[final, boolean, computeConstants, ), {, this, ., radixDigits, =, (, decimalDigits, <, 13, ), ?, 4, :, (, decimalDigits, +]
[), {, this, ., radixDigits, =, (, decimalDigits, <, 13, ), ?, 4, :, (, decimalDigits, +, 3, ), /]
[this, ., radixDigits, =, (, decimalDigits, <, 13, ), ?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;]
[this, ., radixDigits, =, (, decimalDigits, <, 13, ), ?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;]
[(, decimalDigits, <, 13, ), ?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;, this, ., rMode, =]
[(, decimalDigits, <, 13, ), ?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;, this, ., rMode, =]
[), ?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;]
[), ?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;]
[(, decimalDigits, +, 3, ), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =]
[+, 3, ), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;]
[+, 3, ), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;]
[4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =]
[., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =, new, Dfp, (]
[=, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =, new, Dfp, (, this, ,]
[ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =, new, Dfp, (, this, ,, 0, ), ;]
[ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =, new, Dfp, (, this, ,, 0, ), ;]
[ieeeFlags, =, 0, ;, this, ., zero, =, new, Dfp, (, this, ,, 0, ), ;, this, ., one, =]
[;, this, ., zero, =, new, Dfp, (, this, ,, 0, ), ;, this, ., one, =, new, Dfp, (]
[., zero, =, new, Dfp, (, this, ,, 0, ), ;, this, ., one, =, new, Dfp, (, this, ,]
[new, Dfp, (, this, ,, 0, ), ;, this, ., one, =, new, Dfp, (, this, ,, 1, ), ;]
[new, Dfp, (, this, ,, 0, ), ;, this, ., one, =, new, Dfp, (, this, ,, 1, ), ;]
[,, 0, ), ;, this, ., one, =, new, Dfp, (, this, ,, 1, ), ;, this, ., two, =]
[;, this, ., one, =, new, Dfp, (, this, ,, 1, ), ;, this, ., two, =, new, Dfp, (]
[., one, =, new, Dfp, (, this, ,, 1, ), ;, this, ., two, =, new, Dfp, (, this, ,]
[(, this, ,, 1, ), ;, this, ., two, =, new, Dfp, (, this, ,, 2, ), ;, if, (]
[;, this, ., two, =, new, Dfp, (, this, ,, 2, ), ;, if, (, computeConstants, ), {, synchronized, (]
[new, Dfp, (, this, ,, 2, ), ;, if, (, computeConstants, ), {, synchronized, (, DfpField, ., class, ), {]
[(, this, ,, 2, ), ;, if, (, computeConstants, ), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (]
[(, this, ,, 2, ), ;, if, (, computeConstants, ), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (]
[this, ,, 2, ), ;, if, (, computeConstants, ), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (]
[this, ,, 2, ), ;, if, (, computeConstants, ), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (]
[2, ), ;, if, (, computeConstants, ), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (, decimalDigits, <]
[if, (, computeConstants, ), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (, decimalDigits, <, 67, ), ?]
[computeConstants, ), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (, decimalDigits, <, 67, ), ?, 200, :]
[), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (, decimalDigits, <, 67, ), ?, 200, :, (]
[), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (, decimalDigits, <, 67, ), ?, 200, :, (]
[synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (, decimalDigits, <, 67, ), ?, 200, :, (, 3, *]
[class, ), {, computeStringConstants, (, (, decimalDigits, <, 67, ), ?, 200, :, (, 3, *, decimalDigits, ), ), ;]
[{, computeStringConstants, (, (, decimalDigits, <, 67, ), ?, 200, :, (, 3, *, decimalDigits, ), ), ;, sqr2, =]
[(, decimalDigits, <, 67, ), ?, 200, :, (, 3, *, decimalDigits, ), ), ;, sqr2, =, new, Dfp, (]
[<, 67, ), ?, 200, :, (, 3, *, decimalDigits, ), ), ;, sqr2, =, new, Dfp, (, this, ,]
[?, 200, :, (, 3, *, decimalDigits, ), ), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;]
[:, (, 3, *, decimalDigits, ), ), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =]
[3, *, decimalDigits, ), ), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =, split, (]
[), ), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;]
[;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal, =]
[new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal, =, new, Dfp, (]
[(, this, ,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal, =, new, Dfp, (, this, ,]
[sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal, =, new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;]
[;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal, =, new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;, sqr3, =]
[split, (, sqr2String, ), ;, sqr2Reciprocal, =, new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;, sqr3, =, new, Dfp, (]
[sqr2String, ), ;, sqr2Reciprocal, =, new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;, sqr3, =, new, Dfp, (, this, ,]
[sqr2Reciprocal, =, new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;, sqr3, =, new, Dfp, (, this, ,, sqr3String, ), ;]
[new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;, sqr3, =, new, Dfp, (, this, ,, sqr3String, ), ;, sqr3Reciprocal, =]
[this, ,, sqr2ReciprocalString, ), ;, sqr3, =, new, Dfp, (, this, ,, sqr3String, ), ;, sqr3Reciprocal, =, new, Dfp, (]
[sqr2ReciprocalString, ), ;, sqr3, =, new, Dfp, (, this, ,, sqr3String, ), ;, sqr3Reciprocal, =, new, Dfp, (, this, ,]
[sqr3, =, new, Dfp, (, this, ,, sqr3String, ), ;, sqr3Reciprocal, =, new, Dfp, (, this, ,, sqr3ReciprocalString, ), ;]
[new, Dfp, (, this, ,, sqr3String, ), ;, sqr3Reciprocal, =, new, Dfp, (, this, ,, sqr3ReciprocalString, ), ;, pi, =]
[this, ,, sqr3String, ), ;, sqr3Reciprocal, =, new, Dfp, (, this, ,, sqr3ReciprocalString, ), ;, pi, =, new, Dfp, (]
[sqr3String, ), ;, sqr3Reciprocal, =, new, Dfp, (, this, ,, sqr3ReciprocalString, ), ;, pi, =, new, Dfp, (, this, ,]
[sqr3Reciprocal, =, new, Dfp, (, this, ,, sqr3ReciprocalString, ), ;, pi, =, new, Dfp, (, this, ,, piString, ), ;]
[new, Dfp, (, this, ,, sqr3ReciprocalString, ), ;, pi, =, new, Dfp, (, this, ,, piString, ), ;, piSplit, =]
[(, this, ,, sqr3ReciprocalString, ), ;, pi, =, new, Dfp, (, this, ,, piString, ), ;, piSplit, =, split, (]
[sqr3ReciprocalString, ), ;, pi, =, new, Dfp, (, this, ,, piString, ), ;, piSplit, =, split, (, piString, ), ;]
[;, pi, =, new, Dfp, (, this, ,, piString, ), ;, piSplit, =, split, (, piString, ), ;, e, =]
[new, Dfp, (, this, ,, piString, ), ;, piSplit, =, split, (, piString, ), ;, e, =, new, Dfp, (]
[(, this, ,, piString, ), ;, piSplit, =, split, (, piString, ), ;, e, =, new, Dfp, (, this, ,]
[piString, ), ;, piSplit, =, split, (, piString, ), ;, e, =, new, Dfp, (, this, ,, eString, ), ;]
[;, piSplit, =, split, (, piString, ), ;, e, =, new, Dfp, (, this, ,, eString, ), ;, eSplit, =]
[=, split, (, piString, ), ;, e, =, new, Dfp, (, this, ,, eString, ), ;, eSplit, =, split, (]
[piString, ), ;, e, =, new, Dfp, (, this, ,, eString, ), ;, eSplit, =, split, (, eString, ), ;]
[;, e, =, new, Dfp, (, this, ,, eString, ), ;, eSplit, =, split, (, eString, ), ;, ln2, =]
[new, Dfp, (, this, ,, eString, ), ;, eSplit, =, split, (, eString, ), ;, ln2, =, new, Dfp, (]
[(, this, ,, eString, ), ;, eSplit, =, split, (, eString, ), ;, ln2, =, new, Dfp, (, this, ,]
[eString, ), ;, eSplit, =, split, (, eString, ), ;, ln2, =, new, Dfp, (, this, ,, ln2String, ), ;]
[;, eSplit, =, split, (, eString, ), ;, ln2, =, new, Dfp, (, this, ,, ln2String, ), ;, ln2Split, =]
[=, split, (, eString, ), ;, ln2, =, new, Dfp, (, this, ,, ln2String, ), ;, ln2Split, =, split, (]
[eString, ), ;, ln2, =, new, Dfp, (, this, ,, ln2String, ), ;, ln2Split, =, split, (, ln2String, ), ;]
[;, ln2, =, new, Dfp, (, this, ,, ln2String, ), ;, ln2Split, =, split, (, ln2String, ), ;, ln5, =]
[new, Dfp, (, this, ,, ln2String, ), ;, ln2Split, =, split, (, ln2String, ), ;, ln5, =, new, Dfp, (]
[(, this, ,, ln2String, ), ;, ln2Split, =, split, (, ln2String, ), ;, ln5, =, new, Dfp, (, this, ,]
[ln2String, ), ;, ln2Split, =, split, (, ln2String, ), ;, ln5, =, new, Dfp, (, this, ,, ln5String, ), ;]
[;, ln2Split, =, split, (, ln2String, ), ;, ln5, =, new, Dfp, (, this, ,, ln5String, ), ;, ln5Split, =]
[=, split, (, ln2String, ), ;, ln5, =, new, Dfp, (, this, ,, ln5String, ), ;, ln5Split, =, split, (]
[ln2String, ), ;, ln5, =, new, Dfp, (, this, ,, ln5String, ), ;, ln5Split, =, split, (, ln5String, ), ;]
[;, ln5, =, new, Dfp, (, this, ,, ln5String, ), ;, ln5Split, =, split, (, ln5String, ), ;, ln10, =]
[new, Dfp, (, this, ,, ln5String, ), ;, ln5Split, =, split, (, ln5String, ), ;, ln10, =, new, Dfp, (]
[(, this, ,, ln5String, ), ;, ln5Split, =, split, (, ln5String, ), ;, ln10, =, new, Dfp, (, this, ,]
[=, split, (, ln5String, ), ;, ln10, =, new, Dfp, (, this, ,, ln10String, ), ;, }, }, else, {]
[(, ln5String, ), ;, ln10, =, new, Dfp, (, this, ,, ln10String, ), ;, }, }, else, {, sqr2, =]
[), ;, ln10, =, new, Dfp, (, this, ,, ln10String, ), ;, }, }, else, {, sqr2, =, null, ;]
[ln10, =, new, Dfp, (, this, ,, ln10String, ), ;, }, }, else, {, sqr2, =, null, ;, sqr2Split, =]
[new, Dfp, (, this, ,, ln10String, ), ;, }, }, else, {, sqr2, =, null, ;, sqr2Split, =, null, ;]
[(, this, ,, ln10String, ), ;, }, }, else, {, sqr2, =, null, ;, sqr2Split, =, null, ;, sqr2Reciprocal, =]
[,, ln10String, ), ;, }, }, else, {, sqr2, =, null, ;, sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;]
[), ;, }, }, else, {, sqr2, =, null, ;, sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;, sqr3, =]
[}, }, else, {, sqr2, =, null, ;, sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;, sqr3, =, null, ;]
[else, {, sqr2, =, null, ;, sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;, sqr3, =, null, ;, sqr3Reciprocal, =]
[sqr2, =, null, ;, sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;]
[null, ;, sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi, =]
[sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi, =, null, ;]
[null, ;, sqr2Reciprocal, =, null, ;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit, =]
[sqr2Reciprocal, =, null, ;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit, =, null, ;]
[null, ;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit, =, null, ;, e, =]
[sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit, =, null, ;, e, =, null, ;]
[null, ;, sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit, =, null, ;, e, =, null, ;, eSplit, =]
[sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit, =, null, ;, e, =, null, ;, eSplit, =, null, ;]
[null, ;, pi, =, null, ;, piSplit, =, null, ;, e, =, null, ;, eSplit, =, null, ;, ln2, =]
[pi, =, null, ;, piSplit, =, null, ;, e, =, null, ;, eSplit, =, null, ;, ln2, =, null, ;]
[null, ;, piSplit, =, null, ;, e, =, null, ;, eSplit, =, null, ;, ln2, =, null, ;, ln2Split, =]
[piSplit, =, null, ;, e, =, null, ;, eSplit, =, null, ;, ln2, =, null, ;, ln2Split, =, null, ;]
[null, ;, e, =, null, ;, eSplit, =, null, ;, ln2, =, null, ;, ln2Split, =, null, ;, ln5, =]
[e, =, null, ;, eSplit, =, null, ;, ln2, =, null, ;, ln2Split, =, null, ;, ln5, =, null, ;]
[null, ;, eSplit, =, null, ;, ln2, =, null, ;, ln2Split, =, null, ;, ln5, =, null, ;, ln5Split, =]
[eSplit, =, null, ;, ln2, =, null, ;, ln2Split, =, null, ;, ln5, =, null, ;, ln5Split, =, null, ;]
[null, ;, ln2, =, null, ;, ln2Split, =, null, ;, ln5, =, null, ;, ln5Split, =, null, ;, ln10, =]
[=, null, ;, ln5Split, =, null, ;, ln10, =, null, ;, }, }, public, int, getRadixDigits, (, ), {, return]
[}, public, int, getRadixDigits, (, ), {, return, radixDigits, ;, }, public, void, setRoundingMode, (, final, RoundingMode, mode, ), {]
[int, getRadixDigits, (, ), {, return, radixDigits, ;, }, public, void, setRoundingMode, (, final, RoundingMode, mode, ), {, rMode, =]
[void, setRoundingMode, (, final, RoundingMode, mode, ), {, rMode, =, mode, ;, }, public, RoundingMode, getRoundingMode, (, ), {, return]
[mode, ;, }, public, RoundingMode, getRoundingMode, (, ), {, return, rMode, ;, }, public, int, getIEEEFlags, (, ), {, return]
[return, rMode, ;, }, public, int, getIEEEFlags, (, ), {, return, ieeeFlags, ;, }, public, void, clearIEEEFlags, (, ), {]
[;, }, public, int, getIEEEFlags, (, ), {, return, ieeeFlags, ;, }, public, void, clearIEEEFlags, (, ), {, ieeeFlags, =]
[public, void, clearIEEEFlags, (, ), {, ieeeFlags, =, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags, ), {]
[clearIEEEFlags, (, ), {, ieeeFlags, =, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =]
[clearIEEEFlags, (, ), {, ieeeFlags, =, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =]
[), {, ieeeFlags, =, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &]
[{, ieeeFlags, =, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &, (]
[{, ieeeFlags, =, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &, (]
[{, ieeeFlags, =, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &, (]
[{, ieeeFlags, =, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &, (]
[{, ieeeFlags, =, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &, (]
[=, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &, (, FLAG_INVALID, |]
[;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |]
[public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |]
[setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |]
[|, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {]
[|, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=]
[|, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=]
[|, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &]
[FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (]
[FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (]
[FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (]
[FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (]
[FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (]
[FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (, FLAG_INVALID, |]
[;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |]
[public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |]
[setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |]
[(, FLAG_INVALID, |, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, Dfp, newDfp, (, ), {, return]
[FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp, (]
[), {, return, new, Dfp, (, this, ), ;, }, public, Dfp, newDfp, (, final, byte, x, ), {, return]
[new, Dfp, (, this, ), ;, }, public, Dfp, newDfp, (, final, byte, x, ), {, return, new, Dfp, (]
[(, this, ), ;, }, public, Dfp, newDfp, (, final, byte, x, ), {, return, new, Dfp, (, this, ,]
[return, new, Dfp, (, this, ,, x, ), ;, }, public, Dfp, newDfp, (, final, int, x, ), {, return]
[(, this, ,, x, ), ;, }, public, Dfp, newDfp, (, final, int, x, ), {, return, new, Dfp, (]
[,, x, ), ;, }, public, Dfp, newDfp, (, final, int, x, ), {, return, new, Dfp, (, this, ,]
[return, new, Dfp, (, this, ,, x, ), ;, }, public, Dfp, newDfp, (, final, long, x, ), {, return]
[(, this, ,, x, ), ;, }, public, Dfp, newDfp, (, final, long, x, ), {, return, new, Dfp, (]
[,, x, ), ;, }, public, Dfp, newDfp, (, final, long, x, ), {, return, new, Dfp, (, this, ,]
[return, new, Dfp, (, this, ,, x, ), ;, }, public, Dfp, newDfp, (, final, double, x, ), {, return]
[(, this, ,, x, ), ;, }, public, Dfp, newDfp, (, final, double, x, ), {, return, new, Dfp, (]
[,, x, ), ;, }, public, Dfp, newDfp, (, final, double, x, ), {, return, new, Dfp, (, this, ,]
[{, return, new, Dfp, (, this, ,, x, ), ;, }, public, Dfp, newDfp, (, Dfp, d, ), {, return]
[Dfp, (, this, ,, x, ), ;, }, public, Dfp, newDfp, (, Dfp, d, ), {, return, new, Dfp, (]
[), {, return, new, Dfp, (, d, ), ;, }, public, Dfp, newDfp, (, final, String, s, ), {, return]
[new, Dfp, (, d, ), ;, }, public, Dfp, newDfp, (, final, String, s, ), {, return, new, Dfp, (]
[(, d, ), ;, }, public, Dfp, newDfp, (, final, String, s, ), {, return, new, Dfp, (, this, ,]
[this, ,, s, ), ;, }, public, Dfp, newDfp, (, final, byte, sign, ,, final, byte, nans, ), {, return]
[), ;, }, public, Dfp, newDfp, (, final, byte, sign, ,, final, byte, nans, ), {, return, new, Dfp, (]
[}, public, Dfp, newDfp, (, final, byte, sign, ,, final, byte, nans, ), {, return, new, Dfp, (, this, ,]
[Dfp, newDfp, (, final, byte, sign, ,, final, byte, nans, ), {, return, new, Dfp, (, this, ,, sign, ,]
[{, return, new, Dfp, (, this, ,, sign, ,, nans, ), ;, }, public, Dfp, getZero, (, ), {, return]
[), ;, }, public, Dfp, getZero, (, ), {, return, zero, ;, }, public, Dfp, getOne, (, ), {, return]
[{, return, one, ;, }, public, Class, <, ?, extends, FieldElement, <, Dfp, >, >, getRuntimeClass, (, ), {, return]
[Dfp, >, >, getRuntimeClass, (, ), {, return, Dfp, ., class, ;, }, public, Dfp, getTwo, (, ), {, return]
[class, ;, }, public, Dfp, getTwo, (, ), {, return, two, ;, }, public, Dfp, getSqr2, (, ), {, return]
[}, public, Dfp, getSqr2, (, ), {, return, sqr2, ;, }, public, Dfp, [, ], getSqr2Split, (, ), {, return]
[}, public, Dfp, getSqr2, (, ), {, return, sqr2, ;, }, public, Dfp, [, ], getSqr2Split, (, ), {, return]
[], getSqr2Split, (, ), {, return, sqr2Split, ., clone, (, ), ;, }, public, Dfp, getSqr2Reciprocal, (, ), {, return]
[), ;, }, public, Dfp, getSqr2Reciprocal, (, ), {, return, sqr2Reciprocal, ;, }, public, Dfp, getSqr3, (, ), {, return]
[sqr2Reciprocal, ;, }, public, Dfp, getSqr3, (, ), {, return, sqr3, ;, }, public, Dfp, getSqr3Reciprocal, (, ), {, return]
[sqr3, ;, }, public, Dfp, getSqr3Reciprocal, (, ), {, return, sqr3Reciprocal, ;, }, public, Dfp, getPi, (, ), {, return]
[}, public, Dfp, getPi, (, ), {, return, pi, ;, }, public, Dfp, [, ], getPiSplit, (, ), {, return]
[}, public, Dfp, getPi, (, ), {, return, pi, ;, }, public, Dfp, [, ], getPiSplit, (, ), {, return]
[], getPiSplit, (, ), {, return, piSplit, ., clone, (, ), ;, }, public, Dfp, getE, (, ), {, return]
[}, public, Dfp, getE, (, ), {, return, e, ;, }, public, Dfp, [, ], getESplit, (, ), {, return]
[}, public, Dfp, getE, (, ), {, return, e, ;, }, public, Dfp, [, ], getESplit, (, ), {, return]
[], getESplit, (, ), {, return, eSplit, ., clone, (, ), ;, }, public, Dfp, getLn2, (, ), {, return]
[}, public, Dfp, getLn2, (, ), {, return, ln2, ;, }, public, Dfp, [, ], getLn2Split, (, ), {, return]
[}, public, Dfp, getLn2, (, ), {, return, ln2, ;, }, public, Dfp, [, ], getLn2Split, (, ), {, return]
[], getLn2Split, (, ), {, return, ln2Split, ., clone, (, ), ;, }, public, Dfp, getLn5, (, ), {, return]
[}, public, Dfp, getLn5, (, ), {, return, ln5, ;, }, public, Dfp, [, ], getLn5Split, (, ), {, return]
[}, public, Dfp, getLn5, (, ), {, return, ln5, ;, }, public, Dfp, [, ], getLn5Split, (, ), {, return]
[], getLn5Split, (, ), {, return, ln5Split, ., clone, (, ), ;, }, public, Dfp, getLn10, (, ), {, return]
[return, ln10, ;, }, private, Dfp, [, ], split, (, final, String, a, ), {, Dfp, result, [, ], =]
[}, private, Dfp, [, ], split, (, final, String, a, ), {, Dfp, result, [, ], =, new, Dfp, []
[(, final, String, a, ), {, Dfp, result, [, ], =, new, Dfp, [, 2, ], ;, boolean, leading, =]
[{, Dfp, result, [, ], =, new, Dfp, [, 2, ], ;, boolean, leading, =, true, ;, int, sp, =]
[=, new, Dfp, [, 2, ], ;, boolean, leading, =, true, ;, int, sp, =, 0, ;, int, sig, =]
[boolean, leading, =, true, ;, int, sp, =, 0, ;, int, sig, =, 0, ;, char, [, ], buf, =]
[true, ;, int, sp, =, 0, ;, int, sig, =, 0, ;, char, [, ], buf, =, new, char, []
[true, ;, int, sp, =, 0, ;, int, sig, =, 0, ;, char, [, ], buf, =, new, char, []
[char, [, ], buf, =, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =]
[], buf, =, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;]
[], buf, =, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;]
[a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;]
[), ], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {]
[), ], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, []
[int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =]
[int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =]
[;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, []
[{, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&]
[], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, []
[., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=]
[i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {]
[;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =]
[i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (]
[i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (]
[i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (]
[>=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, []
[buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==]
[], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {]
['9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=]
['9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=]
[), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (]
[), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (]
[leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -]
[;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %]
[if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;]
[buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =]
['.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (]
['.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (]
[{, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==]
[{, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==]
[sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (]
[sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (]
[(, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, radixDigits, /]
[sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, radixDigits, /, 2, ), *]
[4, ;, leading, =, false, ;, }, if, (, sig, ==, (, radixDigits, /, 2, ), *, 4, ), {]
[leading, =, false, ;, }, if, (, sig, ==, (, radixDigits, /, 2, ), *, 4, ), {, sp, =]
[sig, ==, (, radixDigits, /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (]
[sig, ==, (, radixDigits, /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (]
[sig, ==, (, radixDigits, /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (]
[sig, ==, (, radixDigits, /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (]
[sig, ==, (, radixDigits, /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (]
[(, radixDigits, /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, []
[2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=]
[*, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&]
[*, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&]
[*, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&]
[), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, []
[=, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=]
[;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&]
[break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, !]
[if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {]
[if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {]
[], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }]
[], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }]
['0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, []
[[, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =]
[<=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp, (]
[&&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,]
[), {, sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,, new, String, (]
[sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,, new, String, (, buf, ,]
[;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,, new, String, (, buf, ,, 0, ,]
[Dfp, (, this, ,, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =]
[this, ,, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;]
[this, ,, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;]
[new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;]
[,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;]
[), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, []
[int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =]
[int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =]
[;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, []
[{, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&]
[], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, []
[., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=]
[(, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&]
[(, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&]
[), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <]
[(, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {]
[(, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {]
[[, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, []
[>=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =]
[[, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }]
[[, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }]
[], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, []
[&&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =]
[sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =, new, Dfp, (]
[{, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =, new, Dfp, (, this, ,]
[i, ], =, '0', ;, }, }, result, [, 1, ], =, new, Dfp, (, this, ,, new, String, (]
[}, }, result, [, 1, ], =, new, Dfp, (, this, ,, new, String, (, buf, ), ), ;, return]
[buf, ), ), ;, return, result, ;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (]
[buf, ), ), ;, return, result, ;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (]
[buf, ), ), ;, return, result, ;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (]
[), ;, return, result, ;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (, sqr2String, ==]
[return, result, ;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (, sqr2String, ==, null, ||]
[return, result, ;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (, sqr2String, ==, null, ||]
[return, result, ;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (, sqr2String, ==, null, ||]
[void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (, sqr2String, ==, null, ||, sqr2String, ., length, (, ), <]
[void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (, sqr2String, ==, null, ||, sqr2String, ., length, (, ), <]
[(, final, int, highPrecisionDecimalDigits, ), {, if, (, sqr2String, ==, null, ||, sqr2String, ., length, (, ), <, highPrecisionDecimalDigits, -]
[(, sqr2String, ==, null, ||, sqr2String, ., length, (, ), <, highPrecisionDecimalDigits, -, 3, ), {, final, DfpField, highPrecisionField, =]
[null, ||, sqr2String, ., length, (, ), <, highPrecisionDecimalDigits, -, 3, ), {, final, DfpField, highPrecisionField, =, new, DfpField, (]
[sqr2String, ., length, (, ), <, highPrecisionDecimalDigits, -, 3, ), {, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits, ,]
[-, 3, ), {, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits, ,, false, ), ;, final, Dfp, highPrecisionOne, =]
[{, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits, ,, false, ), ;, final, Dfp, highPrecisionOne, =, new, Dfp, (]
[DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits, ,, false, ), ;, final, Dfp, highPrecisionOne, =, new, Dfp, (, highPrecisionField, ,]
[,, false, ), ;, final, Dfp, highPrecisionOne, =, new, Dfp, (, highPrecisionField, ,, 1, ), ;, final, Dfp, highPrecisionTwo, =]
[;, final, Dfp, highPrecisionOne, =, new, Dfp, (, highPrecisionField, ,, 1, ), ;, final, Dfp, highPrecisionTwo, =, new, Dfp, (]
[Dfp, highPrecisionOne, =, new, Dfp, (, highPrecisionField, ,, 1, ), ;, final, Dfp, highPrecisionTwo, =, new, Dfp, (, highPrecisionField, ,]
[,, 1, ), ;, final, Dfp, highPrecisionTwo, =, new, Dfp, (, highPrecisionField, ,, 2, ), ;, final, Dfp, highPrecisionThree, =]
[;, final, Dfp, highPrecisionTwo, =, new, Dfp, (, highPrecisionField, ,, 2, ), ;, final, Dfp, highPrecisionThree, =, new, Dfp, (]
[Dfp, highPrecisionTwo, =, new, Dfp, (, highPrecisionField, ,, 2, ), ;, final, Dfp, highPrecisionThree, =, new, Dfp, (, highPrecisionField, ,]
[,, 2, ), ;, final, Dfp, highPrecisionThree, =, new, Dfp, (, highPrecisionField, ,, 3, ), ;, final, Dfp, highPrecisionSqr2, =]
[,, 2, ), ;, final, Dfp, highPrecisionThree, =, new, Dfp, (, highPrecisionField, ,, 3, ), ;, final, Dfp, highPrecisionSqr2, =]
[highPrecisionThree, =, new, Dfp, (, highPrecisionField, ,, 3, ), ;, final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, ., sqrt, (, ), ;]
[new, Dfp, (, highPrecisionField, ,, 3, ), ;, final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, ., sqrt, (, ), ;, sqr2String, =]
[new, Dfp, (, highPrecisionField, ,, 3, ), ;, final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, ., sqrt, (, ), ;, sqr2String, =]
[), ;, final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, ., sqrt, (, ), ;, sqr2String, =, highPrecisionSqr2, ., toString, (, ), ;]
[final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, ., sqrt, (, ), ;, sqr2String, =, highPrecisionSqr2, ., toString, (, ), ;, sqr2ReciprocalString, =]
[final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, ., sqrt, (, ), ;, sqr2String, =, highPrecisionSqr2, ., toString, (, ), ;, sqr2ReciprocalString, =]
[final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, ., sqrt, (, ), ;, sqr2String, =, highPrecisionSqr2, ., toString, (, ), ;, sqr2ReciprocalString, =]
[highPrecisionTwo, ., sqrt, (, ), ;, sqr2String, =, highPrecisionSqr2, ., toString, (, ), ;, sqr2ReciprocalString, =, highPrecisionOne, ., divide, (]
[(, ), ;, sqr2ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr2, ), ., toString, (, ), ;, final, Dfp, highPrecisionSqr3, =]
[(, ), ;, sqr2ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr2, ), ., toString, (, ), ;, final, Dfp, highPrecisionSqr3, =]
[., divide, (, highPrecisionSqr2, ), ., toString, (, ), ;, final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (, ), ;]
[(, highPrecisionSqr2, ), ., toString, (, ), ;, final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (, ), ;, sqr3String, =]
[(, highPrecisionSqr2, ), ., toString, (, ), ;, final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (, ), ;, sqr3String, =]
[), ;, final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (, ), ;, sqr3String, =, highPrecisionSqr3, ., toString, (, ), ;]
[final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (, ), ;, sqr3String, =, highPrecisionSqr3, ., toString, (, ), ;, sqr3ReciprocalString, =]
[final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (, ), ;, sqr3String, =, highPrecisionSqr3, ., toString, (, ), ;, sqr3ReciprocalString, =]
[final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (, ), ;, sqr3String, =, highPrecisionSqr3, ., toString, (, ), ;, sqr3ReciprocalString, =]
[highPrecisionThree, ., sqrt, (, ), ;, sqr3String, =, highPrecisionSqr3, ., toString, (, ), ;, sqr3ReciprocalString, =, highPrecisionOne, ., divide, (]
[=, highPrecisionSqr3, ., toString, (, ), ;, sqr3ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr3, ), ., toString, (, ), ;]
[., toString, (, ), ;, sqr3ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr3, ), ., toString, (, ), ;, piString, =]
[., toString, (, ), ;, sqr3ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr3, ), ., toString, (, ), ;, piString, =]
[(, ), ;, sqr3ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr3, ), ., toString, (, ), ;, piString, =, computePi, (]
[;, sqr3ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr3, ), ., toString, (, ), ;, piString, =, computePi, (, highPrecisionOne, ,]
[=, highPrecisionOne, ., divide, (, highPrecisionSqr3, ), ., toString, (, ), ;, piString, =, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,]
[., toString, (, ), ;, piString, =, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,, highPrecisionThree, ), ., toString, (, ), ;]
[(, ), ;, piString, =, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,, highPrecisionThree, ), ., toString, (, ), ;, eString, =]
[(, ), ;, piString, =, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,, highPrecisionThree, ), ., toString, (, ), ;, eString, =]
[;, piString, =, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,, highPrecisionThree, ), ., toString, (, ), ;, eString, =, computeExp, (]
[=, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,, highPrecisionThree, ), ., toString, (, ), ;, eString, =, computeExp, (, highPrecisionOne, ,]
[highPrecisionThree, ), ., toString, (, ), ;, eString, =, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString, (, ), ;]
[., toString, (, ), ;, eString, =, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString, (, ), ;, ln2String, =]
[., toString, (, ), ;, eString, =, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString, (, ), ;, ln2String, =]
[(, ), ;, eString, =, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString, (, ), ;, ln2String, =, computeLn, (]
[;, eString, =, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString, (, ), ;, ln2String, =, computeLn, (, highPrecisionTwo, ,]
[=, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString, (, ), ;, ln2String, =, computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,]
[., toString, (, ), ;, ln2String, =, computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;]
[(, ), ;, ln2String, =, computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln5String, =]
[(, ), ;, ln2String, =, computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln5String, =]
[;, ln2String, =, computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln5String, =, computeLn, (]
[computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln5String, =, computeLn, (, new, Dfp, (]
[highPrecisionTwo, ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln5String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,]
[,, highPrecisionTwo, ), ., toString, (, ), ;, ln5String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 5, ), ,]
[), ., toString, (, ), ;, ln5String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 5, ), ,, highPrecisionOne, ,]
[=, computeLn, (, new, Dfp, (, highPrecisionField, ,, 5, ), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;]
[(, new, Dfp, (, highPrecisionField, ,, 5, ), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln10String, =]
[(, new, Dfp, (, highPrecisionField, ,, 5, ), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln10String, =]
[Dfp, (, highPrecisionField, ,, 5, ), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln10String, =, computeLn, (]
[,, 5, ), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln10String, =, computeLn, (, new, Dfp, (]
[), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln10String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,]
[,, highPrecisionTwo, ), ., toString, (, ), ;, ln10String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 10, ), ,]
[), ., toString, (, ), ;, ln10String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 10, ), ,, highPrecisionOne, ,]
[static, Dfp, computePi, (, final, Dfp, one, ,, final, Dfp, two, ,, final, Dfp, three, ), {, Dfp, sqrt2, =]
[static, Dfp, computePi, (, final, Dfp, one, ,, final, Dfp, two, ,, final, Dfp, three, ), {, Dfp, sqrt2, =]
[Dfp, two, ,, final, Dfp, three, ), {, Dfp, sqrt2, =, two, ., sqrt, (, ), ;, Dfp, yk, =]
[Dfp, two, ,, final, Dfp, three, ), {, Dfp, sqrt2, =, two, ., sqrt, (, ), ;, Dfp, yk, =]
[Dfp, three, ), {, Dfp, sqrt2, =, two, ., sqrt, (, ), ;, Dfp, yk, =, sqrt2, ., subtract, (]
[=, two, ., sqrt, (, ), ;, Dfp, yk, =, sqrt2, ., subtract, (, one, ), ;, Dfp, four, =]
[=, two, ., sqrt, (, ), ;, Dfp, yk, =, sqrt2, ., subtract, (, one, ), ;, Dfp, four, =]
[(, ), ;, Dfp, yk, =, sqrt2, ., subtract, (, one, ), ;, Dfp, four, =, two, ., add, (]
[sqrt2, ., subtract, (, one, ), ;, Dfp, four, =, two, ., add, (, two, ), ;, Dfp, two2kp3, =]
[), ;, Dfp, four, =, two, ., add, (, two, ), ;, Dfp, two2kp3, =, two, ;, Dfp, ak, =]
[), ;, Dfp, four, =, two, ., add, (, two, ), ;, Dfp, two2kp3, =, two, ;, Dfp, ak, =]
[=, two, ., add, (, two, ), ;, Dfp, two2kp3, =, two, ;, Dfp, ak, =, two, ., multiply, (]
[=, two, ., add, (, two, ), ;, Dfp, two2kp3, =, two, ;, Dfp, ak, =, two, ., multiply, (]
[(, two, ), ;, Dfp, two2kp3, =, two, ;, Dfp, ak, =, two, ., multiply, (, three, ., subtract, (]
[(, two, ), ;, Dfp, two2kp3, =, two, ;, Dfp, ak, =, two, ., multiply, (, three, ., subtract, (]
[Dfp, two2kp3, =, two, ;, Dfp, ak, =, two, ., multiply, (, three, ., subtract, (, two, ., multiply, (]
[multiply, (, three, ., subtract, (, two, ., multiply, (, sqrt2, ), ), ), ;, for, (, int, i, =]
[three, ., subtract, (, two, ., multiply, (, sqrt2, ), ), ), ;, for, (, int, i, =, 1, ;]
[three, ., subtract, (, two, ., multiply, (, sqrt2, ), ), ), ;, for, (, int, i, =, 1, ;]
[subtract, (, two, ., multiply, (, sqrt2, ), ), ), ;, for, (, int, i, =, 1, ;, i, <]
[two, ., multiply, (, sqrt2, ), ), ), ;, for, (, int, i, =, 1, ;, i, <, 20, ;]
[two, ., multiply, (, sqrt2, ), ), ), ;, for, (, int, i, =, 1, ;, i, <, 20, ;]
[;, for, (, int, i, =, 1, ;, i, <, 20, ;, i, ++, ), {, final, Dfp, ykM1, =]
[1, ;, i, <, 20, ;, i, ++, ), {, final, Dfp, ykM1, =, yk, ;, final, Dfp, y2, =]
[1, ;, i, <, 20, ;, i, ++, ), {, final, Dfp, ykM1, =, yk, ;, final, Dfp, y2, =]
[20, ;, i, ++, ), {, final, Dfp, ykM1, =, yk, ;, final, Dfp, y2, =, yk, ., multiply, (]
[Dfp, ykM1, =, yk, ;, final, Dfp, y2, =, yk, ., multiply, (, yk, ), ;, final, Dfp, oneMinusY4, =]
[Dfp, ykM1, =, yk, ;, final, Dfp, y2, =, yk, ., multiply, (, yk, ), ;, final, Dfp, oneMinusY4, =]
[;, final, Dfp, y2, =, yk, ., multiply, (, yk, ), ;, final, Dfp, oneMinusY4, =, one, ., subtract, (]
[;, final, Dfp, y2, =, yk, ., multiply, (, yk, ), ;, final, Dfp, oneMinusY4, =, one, ., subtract, (]
[=, yk, ., multiply, (, yk, ), ;, final, Dfp, oneMinusY4, =, one, ., subtract, (, y2, ., multiply, (]
[final, Dfp, oneMinusY4, =, one, ., subtract, (, y2, ., multiply, (, y2, ), ), ;, final, Dfp, s, =]
[final, Dfp, oneMinusY4, =, one, ., subtract, (, y2, ., multiply, (, y2, ), ), ;, final, Dfp, s, =]
[final, Dfp, oneMinusY4, =, one, ., subtract, (, y2, ., multiply, (, y2, ), ), ;, final, Dfp, s, =]
[multiply, (, y2, ), ), ;, final, Dfp, s, =, oneMinusY4, ., sqrt, (, ), ., sqrt, (, ), ;]
[y2, ), ), ;, final, Dfp, s, =, oneMinusY4, ., sqrt, (, ), ., sqrt, (, ), ;, yk, =]
[y2, ), ), ;, final, Dfp, s, =, oneMinusY4, ., sqrt, (, ), ., sqrt, (, ), ;, yk, =]
[y2, ), ), ;, final, Dfp, s, =, oneMinusY4, ., sqrt, (, ), ., sqrt, (, ), ;, yk, =]
[final, Dfp, s, =, oneMinusY4, ., sqrt, (, ), ., sqrt, (, ), ;, yk, =, one, ., subtract, (]
[., sqrt, (, ), ., sqrt, (, ), ;, yk, =, one, ., subtract, (, s, ), ., divide, (]
[., sqrt, (, ), ., sqrt, (, ), ;, yk, =, one, ., subtract, (, s, ), ., divide, (]
[., sqrt, (, ), ;, yk, =, one, ., subtract, (, s, ), ., divide, (, one, ., add, (]
[;, yk, =, one, ., subtract, (, s, ), ., divide, (, one, ., add, (, s, ), ), ;]
[=, one, ., subtract, (, s, ), ., divide, (, one, ., add, (, s, ), ), ;, two2kp3, =]
[=, one, ., subtract, (, s, ), ., divide, (, one, ., add, (, s, ), ), ;, two2kp3, =]
[(, s, ), ., divide, (, one, ., add, (, s, ), ), ;, two2kp3, =, two2kp3, ., multiply, (]
[., add, (, s, ), ), ;, two2kp3, =, two2kp3, ., multiply, (, four, ), ;, final, Dfp, p, =]
[., add, (, s, ), ), ;, two2kp3, =, two2kp3, ., multiply, (, four, ), ;, final, Dfp, p, =]
[), ), ;, two2kp3, =, two2kp3, ., multiply, (, four, ), ;, final, Dfp, p, =, one, ., add, (]
[multiply, (, four, ), ;, final, Dfp, p, =, one, ., add, (, yk, ), ;, final, Dfp, p2, =]
[multiply, (, four, ), ;, final, Dfp, p, =, one, ., add, (, yk, ), ;, final, Dfp, p2, =]
[;, final, Dfp, p, =, one, ., add, (, yk, ), ;, final, Dfp, p2, =, p, ., multiply, (]
[p, =, one, ., add, (, yk, ), ;, final, Dfp, p2, =, p, ., multiply, (, p, ), ;]
[one, ., add, (, yk, ), ;, final, Dfp, p2, =, p, ., multiply, (, p, ), ;, ak, =]
[one, ., add, (, yk, ), ;, final, Dfp, p2, =, p, ., multiply, (, p, ), ;, ak, =]
[one, ., add, (, yk, ), ;, final, Dfp, p2, =, p, ., multiply, (, p, ), ;, ak, =]
[yk, ), ;, final, Dfp, p2, =, p, ., multiply, (, p, ), ;, ak, =, ak, ., multiply, (]
[yk, ), ;, final, Dfp, p2, =, p, ., multiply, (, p, ), ;, ak, =, ak, ., multiply, (]
[Dfp, p2, =, p, ., multiply, (, p, ), ;, ak, =, ak, ., multiply, (, p2, ., multiply, (]
[(, p, ), ;, ak, =, ak, ., multiply, (, p2, ., multiply, (, p2, ), ), ., subtract, (]
[(, p, ), ;, ak, =, ak, ., multiply, (, p2, ., multiply, (, p2, ), ), ., subtract, (]
[(, p, ), ;, ak, =, ak, ., multiply, (, p2, ., multiply, (, p2, ), ), ., subtract, (]
[ak, =, ak, ., multiply, (, p2, ., multiply, (, p2, ), ), ., subtract, (, two2kp3, ., multiply, (]
[(, p2, ., multiply, (, p2, ), ), ., subtract, (, two2kp3, ., multiply, (, yk, ), ., multiply, (]
[(, p2, ., multiply, (, p2, ), ), ., subtract, (, two2kp3, ., multiply, (, yk, ), ., multiply, (]
[(, p2, ., multiply, (, p2, ), ), ., subtract, (, two2kp3, ., multiply, (, yk, ), ., multiply, (]
[(, p2, ), ), ., subtract, (, two2kp3, ., multiply, (, yk, ), ., multiply, (, one, ., add, (]
[subtract, (, two2kp3, ., multiply, (, yk, ), ., multiply, (, one, ., add, (, yk, ), ., add, (]
[subtract, (, two2kp3, ., multiply, (, yk, ), ., multiply, (, one, ., add, (, yk, ), ., add, (]
[multiply, (, yk, ), ., multiply, (, one, ., add, (, yk, ), ., add, (, yk, ., multiply, (]
[., add, (, yk, ), ., add, (, yk, ., multiply, (, yk, ), ), ), ), ;, if, (]
[., add, (, yk, ), ., add, (, yk, ., multiply, (, yk, ), ), ), ), ;, if, (]
[), ., add, (, yk, ., multiply, (, yk, ), ), ), ), ;, if, (, yk, ., equals, (]
[), ), ), ), ;, if, (, yk, ., equals, (, ykM1, ), ), {, break, ;, }, }, return]
[), ), ), ), ;, if, (, yk, ., equals, (, ykM1, ), ), {, break, ;, }, }, return]
[;, if, (, yk, ., equals, (, ykM1, ), ), {, break, ;, }, }, return, one, ., divide, (]
[), ;, }, public, static, Dfp, computeExp, (, final, Dfp, a, ,, final, Dfp, one, ), {, Dfp, y, =]
[public, static, Dfp, computeExp, (, final, Dfp, a, ,, final, Dfp, one, ), {, Dfp, y, =, new, Dfp, (]
[Dfp, a, ,, final, Dfp, one, ), {, Dfp, y, =, new, Dfp, (, one, ), ;, Dfp, py, =]
[final, Dfp, one, ), {, Dfp, y, =, new, Dfp, (, one, ), ;, Dfp, py, =, new, Dfp, (]
[y, =, new, Dfp, (, one, ), ;, Dfp, py, =, new, Dfp, (, one, ), ;, Dfp, f, =]
[Dfp, (, one, ), ;, Dfp, py, =, new, Dfp, (, one, ), ;, Dfp, f, =, new, Dfp, (]
[py, =, new, Dfp, (, one, ), ;, Dfp, f, =, new, Dfp, (, one, ), ;, Dfp, fi, =]
[Dfp, (, one, ), ;, Dfp, f, =, new, Dfp, (, one, ), ;, Dfp, fi, =, new, Dfp, (]
[f, =, new, Dfp, (, one, ), ;, Dfp, fi, =, new, Dfp, (, one, ), ;, Dfp, x, =]
[Dfp, (, one, ), ;, Dfp, fi, =, new, Dfp, (, one, ), ;, Dfp, x, =, new, Dfp, (]
[new, Dfp, (, one, ), ;, Dfp, x, =, new, Dfp, (, one, ), ;, for, (, int, i, =]
[(, one, ), ;, Dfp, x, =, new, Dfp, (, one, ), ;, for, (, int, i, =, 0, ;]
[(, one, ), ;, Dfp, x, =, new, Dfp, (, one, ), ;, for, (, int, i, =, 0, ;]
[), ;, Dfp, x, =, new, Dfp, (, one, ), ;, for, (, int, i, =, 0, ;, i, <]
[Dfp, x, =, new, Dfp, (, one, ), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;]
[Dfp, x, =, new, Dfp, (, one, ), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;]
[Dfp, (, one, ), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {]
[one, ), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, x, =]
[one, ), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, x, =]
[(, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, x, =, x, ., multiply, (]
[=, 0, ;, i, <, 10000, ;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;]
[;, i, <, 10000, ;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, y, =]
[;, i, <, 10000, ;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, y, =]
[;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, y, =, y, ., add, (]
[;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, y, =, y, ., add, (]
[{, x, =, x, ., multiply, (, a, ), ;, y, =, y, ., add, (, x, ., divide, (]
[., multiply, (, a, ), ;, y, =, y, ., add, (, x, ., divide, (, f, ), ), ;]
[(, a, ), ;, y, =, y, ., add, (, x, ., divide, (, f, ), ), ;, fi, =]
[(, a, ), ;, y, =, y, ., add, (, x, ., divide, (, f, ), ), ;, fi, =]
[y, =, y, ., add, (, x, ., divide, (, f, ), ), ;, fi, =, fi, ., add, (]
[., add, (, x, ., divide, (, f, ), ), ;, fi, =, fi, ., add, (, one, ), ;]
[(, x, ., divide, (, f, ), ), ;, fi, =, fi, ., add, (, one, ), ;, f, =]
[(, x, ., divide, (, f, ), ), ;, fi, =, fi, ., add, (, one, ), ;, f, =]
[(, f, ), ), ;, fi, =, fi, ., add, (, one, ), ;, f, =, f, ., multiply, (]
[fi, =, fi, ., add, (, one, ), ;, f, =, f, ., multiply, (, fi, ), ;, if, (]
[fi, =, fi, ., add, (, one, ), ;, f, =, f, ., multiply, (, fi, ), ;, if, (]
[add, (, one, ), ;, f, =, f, ., multiply, (, fi, ), ;, if, (, y, ., equals, (]
[f, ., multiply, (, fi, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }]
[multiply, (, fi, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[static, Dfp, computeLn, (, final, Dfp, a, ,, final, Dfp, one, ,, final, Dfp, two, ), {, int, den, =]
[Dfp, a, ,, final, Dfp, one, ,, final, Dfp, two, ), {, int, den, =, 1, ;, Dfp, x, =]
[Dfp, a, ,, final, Dfp, one, ,, final, Dfp, two, ), {, int, den, =, 1, ;, Dfp, x, =]
[Dfp, a, ,, final, Dfp, one, ,, final, Dfp, two, ), {, int, den, =, 1, ;, Dfp, x, =]
[Dfp, one, ,, final, Dfp, two, ), {, int, den, =, 1, ;, Dfp, x, =, a, ., add, (]
[final, Dfp, two, ), {, int, den, =, 1, ;, Dfp, x, =, a, ., add, (, new, Dfp, (]
[final, Dfp, two, ), {, int, den, =, 1, ;, Dfp, x, =, a, ., add, (, new, Dfp, (]
[den, =, 1, ;, Dfp, x, =, a, ., add, (, new, Dfp, (, a, ., getField, (, ), ,]
[=, 1, ;, Dfp, x, =, a, ., add, (, new, Dfp, (, a, ., getField, (, ), ,, -]
[a, ., add, (, new, Dfp, (, a, ., getField, (, ), ,, -, 1, ), ), ., divide, (]
[a, ., add, (, new, Dfp, (, a, ., getField, (, ), ,, -, 1, ), ), ., divide, (]
[new, Dfp, (, a, ., getField, (, ), ,, -, 1, ), ), ., divide, (, a, ., add, (]
[), ,, -, 1, ), ), ., divide, (, a, ., add, (, one, ), ), ;, Dfp, y, =]
[1, ), ), ., divide, (, a, ., add, (, one, ), ), ;, Dfp, y, =, new, Dfp, (]
[a, ., add, (, one, ), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =]
[(, one, ), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (]
[y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (, x, ), ;, Dfp, py, =]
[Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (, x, ), ;, Dfp, py, =, new, Dfp, (]
[new, Dfp, (, x, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =]
[(, x, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 0, ;]
[(, x, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 0, ;]
[), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 0, ;, i, <]
[Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;]
[Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;]
[Dfp, (, y, ), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {]
[y, ), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, num, =]
[y, ), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, num, =]
[(, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (]
[=, 0, ;, i, <, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;]
[;, i, <, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =]
[;, i, <, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =]
[;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (]
[), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;]
[num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =]
[num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =]
[num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +]
[), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, Dfp, t, =]
[), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, Dfp, t, =]
[num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, Dfp, t, =, num, ., divide, (]
[(, x, ), ;, den, =, den, +, 2, ;, Dfp, t, =, num, ., divide, (, den, ), ;]
[), ;, den, =, den, +, 2, ;, Dfp, t, =, num, ., divide, (, den, ), ;, y, =]
[), ;, den, =, den, +, 2, ;, Dfp, t, =, num, ., divide, (, den, ), ;, y, =]
[den, +, 2, ;, Dfp, t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (]
[t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;, if, (]
[t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;, if, (]
[divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;, if, (, y, ., equals, (]
[y, ., add, (, t, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }]
[add, (, t, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ., multiply, (]
