[;, public, void, newSampleData, (, double, [, ], y, ,, double, [, ], [, ], x, ), throws, MathIllegalArgumentException, {]
[;, newYSampleData, (, y, ), ;, newXSampleData, (, x, ), ;, }, @, Override, public, void, newSampleData, (, double, []
[,, y, ), ;, newYSampleData, (, y, ), ;, newXSampleData, (, x, ), ;, }, @, Override, public, void, newSampleData]
[), ;, newYSampleData, (, y, ), ;, newXSampleData, (, x, ), ;, }, @, Override, public, void, newSampleData, (, double]
[;, newXSampleData, (, x, ), ;, }, @, Override, public, void, newSampleData, (, double, [, ], data, ,, int, nobs]
[), ;, newXSampleData, (, x, ), ;, }, @, Override, public, void, newSampleData, (, double, [, ], data, ,, int]
[;, }, @, Override, public, void, newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars, ), {]
[), ;, }, @, Override, public, void, newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars, )]
[;, qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, public, RealMatrix, calculateHat, (, ), {, RealMatrix, Q]
[., newSampleData, (, data, ,, nobs, ,, nvars, ), ;, qr, =, new, QRDecomposition, (, getX, (, ), ), ;]
[,, nobs, ,, nvars, ), ;, qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, public, RealMatrix, calculateHat]
[,, nvars, ), ;, qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, public, RealMatrix, calculateHat, (, )]
[), ;, qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, public, RealMatrix, calculateHat, (, ), {, RealMatrix]
[=, new, QRDecomposition, (, getX, (, ), ), ;, }, public, RealMatrix, calculateHat, (, ), {, RealMatrix, Q, =, qr]
[;, }, public, RealMatrix, calculateHat, (, ), {, RealMatrix, Q, =, qr, ., getQ, (, ), ;, final, int, p]
[), ;, }, public, RealMatrix, calculateHat, (, ), {, RealMatrix, Q, =, qr, ., getQ, (, ), ;, final, int]
[;, final, int, p, =, qr, ., getR, (, ), ., getColumnDimension, (, ), ;, final, int, n, =, Q]
[., getQ, (, ), ;, final, int, p, =, qr, ., getR, (, ), ., getColumnDimension, (, ), ;, final]
[;, final, int, n, =, Q, ., getColumnDimension, (, ), ;, Array2DRowRealMatrix, augI, =, new, Array2DRowRealMatrix, (, n, ,, n]
[., getColumnDimension, (, ), ;, final, int, n, =, Q, ., getColumnDimension, (, ), ;, Array2DRowRealMatrix, augI, =, new, Array2DRowRealMatrix]
[., getR, (, ), ., getColumnDimension, (, ), ;, final, int, n, =, Q, ., getColumnDimension, (, ), ;, Array2DRowRealMatrix]
[;, Array2DRowRealMatrix, augI, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;, double, [, ], [, ], augIData, =, augI]
[., getColumnDimension, (, ), ;, Array2DRowRealMatrix, augI, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;, double, [, ], []
[;, double, [, ], [, ], augIData, =, augI, ., getDataRef, (, ), ;, for, (, int, i, =, 0]
[,, n, ), ;, double, [, ], [, ], augIData, =, augI, ., getDataRef, (, ), ;, for, (, int]
[), ;, double, [, ], [, ], augIData, =, augI, ., getDataRef, (, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j]
[., getDataRef, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[<, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, if, (, i]
[++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, if, (]
[;, j, <, n, ;, j, ++, ), {, if, (, i, ==, j, &&, i, <, p, ), {]
[;, j, ++, ), {, if, (, i, ==, j, &&, i, <, p, ), {, augIData, [, i, ]]
[<, n, ;, j, ++, ), {, if, (, i, ==, j, &&, i, <, p, ), {, augIData, []
[;, j, ++, ), {, if, (, i, ==, j, &&, i, <, p, ), {, augIData, [, i, ]]
[), {, if, (, i, ==, j, &&, i, <, p, ), {, augIData, [, i, ], [, j, ]]
[++, ), {, if, (, i, ==, j, &&, i, <, p, ), {, augIData, [, i, ], [, j]
[), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else, {, augIData, [, i, ], []
[&&, i, <, p, ), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else, {, augIData]
[==, j, &&, i, <, p, ), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else]
[&&, i, <, p, ), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else, {, augIData]
[), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else, {, augIData, [, i, ], []
[<, p, ), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else, {, augIData, [, i]
[), {, augIData, [, i, ], [, j, ], =, 1d, ;, }, else, {, augIData, [, i, ], []
[=, 1d, ;, }, else, {, augIData, [, i, ], [, j, ], =, 0d, ;, }, }, }, return]
[[, j, ], =, 1d, ;, }, else, {, augIData, [, i, ], [, j, ], =, 0d, ;, }]
[[, i, ], [, j, ], =, 1d, ;, }, else, {, augIData, [, i, ], [, j, ], =]
[], [, j, ], =, 1d, ;, }, else, {, augIData, [, i, ], [, j, ], =, 0d, ;]
[], =, 1d, ;, }, else, {, augIData, [, i, ], [, j, ], =, 0d, ;, }, }, }]
[;, }, else, {, augIData, [, i, ], [, j, ], =, 0d, ;, }, }, }, return, Q, .]
[=, 0d, ;, }, }, }, return, Q, ., multiply, (, augI, ), ., multiply, (, Q, ., transpose, (]
[[, j, ], =, 0d, ;, }, }, }, return, Q, ., multiply, (, augI, ), ., multiply, (, Q]
[[, i, ], [, j, ], =, 0d, ;, }, }, }, return, Q, ., multiply, (, augI, ), .]
[], [, j, ], =, 0d, ;, }, }, }, return, Q, ., multiply, (, augI, ), ., multiply, (]
[], =, 0d, ;, }, }, }, return, Q, ., multiply, (, augI, ), ., multiply, (, Q, ., transpose]
[;, }, }, }, return, Q, ., multiply, (, augI, ), ., multiply, (, Q, ., transpose, (, ), )]
[;, }, public, double, calculateTotalSumOfSquares, (, ), throws, MathIllegalArgumentException, {, if, (, isNoIntercept, (, ), ), {, return, StatUtils, .]
[., multiply, (, Q, ., transpose, (, ), ), ;, }, public, double, calculateTotalSumOfSquares, (, ), throws, MathIllegalArgumentException, {, if]
[., multiply, (, augI, ), ., multiply, (, Q, ., transpose, (, ), ), ;, }, public, double, calculateTotalSumOfSquares, (]
[), ., multiply, (, Q, ., transpose, (, ), ), ;, }, public, double, calculateTotalSumOfSquares, (, ), throws, MathIllegalArgumentException, {]
[), ;, }, public, double, calculateTotalSumOfSquares, (, ), throws, MathIllegalArgumentException, {, if, (, isNoIntercept, (, ), ), {, return, StatUtils]
[., transpose, (, ), ), ;, }, public, double, calculateTotalSumOfSquares, (, ), throws, MathIllegalArgumentException, {, if, (, isNoIntercept, (, )]
[), {, return, StatUtils, ., sumSq, (, getY, (, ), ., toArray, (, ), ), ;, }, else, {, return]
[;, }, else, {, return, new, SecondMoment, (, ), ., evaluate, (, getY, (, ), ., toArray, (, ), )]
[., sumSq, (, getY, (, ), ., toArray, (, ), ), ;, }, else, {, return, new, SecondMoment, (, )]
[), ;, }, else, {, return, new, SecondMoment, (, ), ., evaluate, (, getY, (, ), ., toArray, (, )]
[., toArray, (, ), ), ;, }, else, {, return, new, SecondMoment, (, ), ., evaluate, (, getY, (, )]
[;, }, }, public, double, calculateResidualSumOfSquares, (, ), {, final, RealVector, residuals, =, calculateResiduals, (, ), ;, return, residuals, .]
[., evaluate, (, getY, (, ), ., toArray, (, ), ), ;, }, }, public, double, calculateResidualSumOfSquares, (, ), {]
[), ;, }, }, public, double, calculateResidualSumOfSquares, (, ), {, final, RealVector, residuals, =, calculateResiduals, (, ), ;, return, residuals]
[., toArray, (, ), ), ;, }, }, public, double, calculateResidualSumOfSquares, (, ), {, final, RealVector, residuals, =, calculateResiduals, (]
[;, return, residuals, ., dotProduct, (, residuals, ), ;, }, public, double, calculateRSquared, (, ), throws, MathIllegalArgumentException, {, return, 1]
[;, }, public, double, calculateRSquared, (, ), throws, MathIllegalArgumentException, {, return, 1, -, calculateResidualSumOfSquares, (, ), /, calculateTotalSumOfSquares, (, )]
[., dotProduct, (, residuals, ), ;, }, public, double, calculateRSquared, (, ), throws, MathIllegalArgumentException, {, return, 1, -, calculateResidualSumOfSquares, (]
[), ;, }, public, double, calculateRSquared, (, ), throws, MathIllegalArgumentException, {, return, 1, -, calculateResidualSumOfSquares, (, ), /, calculateTotalSumOfSquares, (]
[;, }, public, double, calculateAdjustedRSquared, (, ), throws, MathIllegalArgumentException, {, final, double, n, =, getX, (, ), ., getRowDimension, (]
[-, calculateResidualSumOfSquares, (, ), /, calculateTotalSumOfSquares, (, ), ;, }, public, double, calculateAdjustedRSquared, (, ), throws, MathIllegalArgumentException, {, final, double]
[;, }, public, double, calculateAdjustedRSquared, (, ), throws, MathIllegalArgumentException, {, final, double, n, =, getX, (, ), ., getRowDimension, (]
[/, calculateTotalSumOfSquares, (, ), ;, }, public, double, calculateAdjustedRSquared, (, ), throws, MathIllegalArgumentException, {, final, double, n, =, getX, (]
[;, }, public, double, calculateAdjustedRSquared, (, ), throws, MathIllegalArgumentException, {, final, double, n, =, getX, (, ), ., getRowDimension, (]
[;, if, (, isNoIntercept, (, ), ), {, return, 1, -, (, 1, -, calculateRSquared, (, ), ), *, (]
[., getRowDimension, (, ), ;, if, (, isNoIntercept, (, ), ), {, return, 1, -, (, 1, -, calculateRSquared, (]
[), {, return, 1, -, (, 1, -, calculateRSquared, (, ), ), *, (, n, /, (, n, -, getX]
[;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /, (]
[-, (, 1, -, calculateRSquared, (, ), ), *, (, n, /, (, n, -, getX, (, ), ., getColumnDimension]
[;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /, (]
[*, (, n, /, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, else, {]
[), *, (, n, /, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, else]
[-, calculateRSquared, (, ), ), *, (, n, /, (, n, -, getX, (, ), ., getColumnDimension, (, ), )]
[), *, (, n, /, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, else]
[;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /, (]
[), ;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /]
[/, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, else, {, return, 1, -]
[), ;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /]
[), ), ;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), )]
[-, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (]
[), ), ;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), )]
[., getColumnDimension, (, ), ), ), ;, }, else, {, return, 1, -, (, calculateResidualSumOfSquares, (, ), *, (, n]
[;, }, }, @, Override, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, super, ., newXSampleData]
[-, (, calculateResidualSumOfSquares, (, ), *, (, n, -, 1, ), ), /, (, calculateTotalSumOfSquares, (, ), *, (, n]
[;, }, }, @, Override, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, super, ., newXSampleData]
[/, (, calculateTotalSumOfSquares, (, ), *, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }]
[), /, (, calculateTotalSumOfSquares, (, ), *, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;]
[*, (, n, -, 1, ), ), /, (, calculateTotalSumOfSquares, (, ), *, (, n, -, getX, (, ), .]
[), /, (, calculateTotalSumOfSquares, (, ), *, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;]
[), ), /, (, calculateTotalSumOfSquares, (, ), *, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), )]
[-, 1, ), ), /, (, calculateTotalSumOfSquares, (, ), *, (, n, -, getX, (, ), ., getColumnDimension, (, )]
[), ), /, (, calculateTotalSumOfSquares, (, ), *, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), )]
[;, }, }, @, Override, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, super, ., newXSampleData]
[), ;, }, }, @, Override, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, super, .]
[*, (, n, -, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, }, @, Override, protected, void]
[), ;, }, }, @, Override, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, super, .]
[), ), ;, }, }, @, Override, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, super]
[-, getX, (, ), ., getColumnDimension, (, ), ), ), ;, }, }, @, Override, protected, void, newXSampleData, (, double]
[), ), ;, }, }, @, Override, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, super]
[., getColumnDimension, (, ), ), ), ;, }, }, @, Override, protected, void, newXSampleData, (, double, [, ], [, ]]
[;, qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, @, Override, protected, RealVector, calculateBeta, (, ), {]
[., newXSampleData, (, x, ), ;, qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, @, Override, protected]
[), ;, qr, =, new, QRDecomposition, (, getX, (, ), ), ;, }, @, Override, protected, RealVector, calculateBeta, (, )]
[=, new, QRDecomposition, (, getX, (, ), ), ;, }, @, Override, protected, RealVector, calculateBeta, (, ), {, return, qr]
[;, }, @, Override, protected, RealVector, calculateBeta, (, ), {, return, qr, ., getSolver, (, ), ., solve, (, getY]
[), ;, }, @, Override, protected, RealVector, calculateBeta, (, ), {, return, qr, ., getSolver, (, ), ., solve, (]
[;, }, @, Override, protected, RealMatrix, calculateBetaVariance, (, ), {, int, p, =, getX, (, ), ., getColumnDimension, (, )]
[., solve, (, getY, (, ), ), ;, }, @, Override, protected, RealMatrix, calculateBetaVariance, (, ), {, int, p, =]
[., getSolver, (, ), ., solve, (, getY, (, ), ), ;, }, @, Override, protected, RealMatrix, calculateBetaVariance, (, )]
[), ;, }, @, Override, protected, RealMatrix, calculateBetaVariance, (, ), {, int, p, =, getX, (, ), ., getColumnDimension, (]
[;, RealMatrix, Raug, =, qr, ., getR, (, ), ., getSubMatrix, (, 0, ,, p, -, 1, ,, 0, ,]
[., getColumnDimension, (, ), ;, RealMatrix, Raug, =, qr, ., getR, (, ), ., getSubMatrix, (, 0, ,, p, -]
[;, RealMatrix, Rinv, =, new, LUDecomposition, (, Raug, ), ., getSolver, (, ), ., getInverse, (, ), ;, return, Rinv]
[., getSubMatrix, (, 0, ,, p, -, 1, ,, 0, ,, p, -, 1, ), ;, RealMatrix, Rinv, =, new]
[., getR, (, ), ., getSubMatrix, (, 0, ,, p, -, 1, ,, 0, ,, p, -, 1, ), ;]
[,, p, -, 1, ,, 0, ,, p, -, 1, ), ;, RealMatrix, Rinv, =, new, LUDecomposition, (, Raug, )]
[,, 0, ,, p, -, 1, ), ;, RealMatrix, Rinv, =, new, LUDecomposition, (, Raug, ), ., getSolver, (, )]
[-, 1, ,, 0, ,, p, -, 1, ), ;, RealMatrix, Rinv, =, new, LUDecomposition, (, Raug, ), ., getSolver]
[,, 0, ,, p, -, 1, ), ;, RealMatrix, Rinv, =, new, LUDecomposition, (, Raug, ), ., getSolver, (, )]
[,, p, -, 1, ), ;, RealMatrix, Rinv, =, new, LUDecomposition, (, Raug, ), ., getSolver, (, ), ., getInverse]
[), ;, RealMatrix, Rinv, =, new, LUDecomposition, (, Raug, ), ., getSolver, (, ), ., getInverse, (, ), ;, return]
[-, 1, ), ;, RealMatrix, Rinv, =, new, LUDecomposition, (, Raug, ), ., getSolver, (, ), ., getInverse, (, )]
[), ;, RealMatrix, Rinv, =, new, LUDecomposition, (, Raug, ), ., getSolver, (, ), ., getInverse, (, ), ;, return]
[;, return, Rinv, ., multiply, (, Rinv, ., transpose, (, ), ), ;, }, }]
[., getInverse, (, ), ;, return, Rinv, ., multiply, (, Rinv, ., transpose, (, ), ), ;, }, }]
[., getSolver, (, ), ., getInverse, (, ), ;, return, Rinv, ., multiply, (, Rinv, ., transpose, (, ), )]
[), ., getSolver, (, ), ., getInverse, (, ), ;, return, Rinv, ., multiply, (, Rinv, ., transpose, (, )]
[;, }, }]
[., multiply, (, Rinv, ., transpose, (, ), ), ;, }, }]
[), ;, }, }]
[., transpose, (, ), ), ;, }, }]
