[import, java, ., util, ., logging, ., *, ;, class, NameAnonymousFunctions, implements, CompilerPass, {, private, static, final, Logger, logger, =]
[import, java, ., util, ., logging, ., *, ;, class, NameAnonymousFunctions, implements, CompilerPass, {, private, static, final, Logger, logger, =]
[., logging, ., *, ;, class, NameAnonymousFunctions, implements, CompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[., logging, ., *, ;, class, NameAnonymousFunctions, implements, CompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[logger, =, Logger, ., getLogger, (, NameAnonymousFunctions, ., class, ., getName, (, ), ), ;, static, final, char, DELIMITER, =]
[(, ), ), ;, static, final, char, DELIMITER, =, '$', ;, private, final, AbstractCompiler, compiler, ;, private, int, namedCount, =]
[char, DELIMITER, =, '$', ;, private, final, AbstractCompiler, compiler, ;, private, int, namedCount, =, 0, ;, private, int, bytesUsed, =]
[compiler, ;, private, int, namedCount, =, 0, ;, private, int, bytesUsed, =, 0, ;, NameAnonymousFunctions, (, AbstractCompiler, compiler, ), {]
[compiler, ;, private, int, namedCount, =, 0, ;, private, int, bytesUsed, =, 0, ;, NameAnonymousFunctions, (, AbstractCompiler, compiler, ), {]
[namedCount, =, 0, ;, private, int, bytesUsed, =, 0, ;, NameAnonymousFunctions, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, AnonymousFunctionNamingCallback, namingCallback, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (]
[(, Node, externs, ,, Node, root, ), {, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, new, AnonymousFunctionNamer, (, ), ), ;]
[(, Node, externs, ,, Node, root, ), {, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, new, AnonymousFunctionNamer, (, ), ), ;]
[Node, root, ), {, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, new, AnonymousFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (]
[), {, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, new, AnonymousFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, new, AnonymousFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[new, AnonymousFunctionNamingCallback, (, new, AnonymousFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;]
[new, AnonymousFunctionNamingCallback, (, new, AnonymousFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;]
[AnonymousFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (]
[AnonymousFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (]
[AnonymousFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (]
[AnonymousFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (]
[AnonymousFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (, "Named ", +]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (, "Named ", +, namedCount, +]
[., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (, "Named ", +, namedCount, +, " anon functions using ", +]
[(, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (, "Named ", +, namedCount, +, " anon functions using ", +, bytesUsed, +]
[" bytes", ), ;, }, private, class, AnonymousFunctionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, private, NodeNameExtractor, nameExtractor, ;, AnonymousFunctionNamer, (, ), {]
[" bytes", ), ;, }, private, class, AnonymousFunctionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, private, NodeNameExtractor, nameExtractor, ;, AnonymousFunctionNamer, (, ), {]
[private, class, AnonymousFunctionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, private, NodeNameExtractor, nameExtractor, ;, AnonymousFunctionNamer, (, ), {, this, ., nameExtractor, =]
[implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, private, NodeNameExtractor, nameExtractor, ;, AnonymousFunctionNamer, (, ), {, this, ., nameExtractor, =, new, NodeNameExtractor, (]
[this, ., nameExtractor, =, new, NodeNameExtractor, (, DELIMITER, ), ;, }, private, String, getLikelyNonConflictingName, (, String, name, ), {, return]
[this, ., nameExtractor, =, new, NodeNameExtractor, (, DELIMITER, ), ;, }, private, String, getLikelyNonConflictingName, (, String, name, ), {, return]
[this, ., nameExtractor, =, new, NodeNameExtractor, (, DELIMITER, ), ;, }, private, String, getLikelyNonConflictingName, (, String, name, ), {, return]
[nameExtractor, =, new, NodeNameExtractor, (, DELIMITER, ), ;, }, private, String, getLikelyNonConflictingName, (, String, name, ), {, return, DELIMITER, +]
[new, NodeNameExtractor, (, DELIMITER, ), ;, }, private, String, getLikelyNonConflictingName, (, String, name, ), {, return, DELIMITER, +, name, +]
[return, DELIMITER, +, name, +, DELIMITER, ;, }, @, Override, public, final, String, getName, (, Node, node, ), {, return]
[return, DELIMITER, +, name, +, DELIMITER, ;, }, @, Override, public, final, String, getName, (, Node, node, ), {, return]
[+, DELIMITER, ;, }, @, Override, public, final, String, getName, (, Node, node, ), {, return, nameExtractor, ., getName, (]
[), ;, }, @, Override, public, final, void, setFunctionName, (, String, name, ,, Node, fnNode, ), {, Node, fnNameNode, =]
[), ;, }, @, Override, public, final, void, setFunctionName, (, String, name, ,, Node, fnNode, ), {, Node, fnNameNode, =]
[(, String, name, ,, Node, fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, uniqueName, =]
[name, ,, Node, fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, uniqueName, =, getLikelyNonConflictingName, (]
[fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, uniqueName, =, getLikelyNonConflictingName, (, name, ), ;]
[fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, uniqueName, =, getLikelyNonConflictingName, (, name, ), ;]
[fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, uniqueName, =, getLikelyNonConflictingName, (, name, ), ;, fnNameNode, ., setString, (]
[., getFirstChild, (, ), ;, String, uniqueName, =, getLikelyNonConflictingName, (, name, ), ;, fnNameNode, ., setString, (, uniqueName, ), ;]
[., getFirstChild, (, ), ;, String, uniqueName, =, getLikelyNonConflictingName, (, name, ), ;, fnNameNode, ., setString, (, uniqueName, ), ;]
[uniqueName, =, getLikelyNonConflictingName, (, name, ), ;, fnNameNode, ., setString, (, uniqueName, ), ;, compiler, ., reportCodeChange, (, ), ;]
[uniqueName, =, getLikelyNonConflictingName, (, name, ), ;, fnNameNode, ., setString, (, uniqueName, ), ;, compiler, ., reportCodeChange, (, ), ;]
[(, name, ), ;, fnNameNode, ., setString, (, uniqueName, ), ;, compiler, ., reportCodeChange, (, ), ;, namedCount, ++, ;]
[), ;, fnNameNode, ., setString, (, uniqueName, ), ;, compiler, ., reportCodeChange, (, ), ;, namedCount, ++, ;, bytesUsed, +=]
[), ;, fnNameNode, ., setString, (, uniqueName, ), ;, compiler, ., reportCodeChange, (, ), ;, namedCount, ++, ;, bytesUsed, +=]
[length, (, ), ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return]
[length, (, ), ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return]
[length, (, ), ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return]
[), ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return, lhs, +]
[}, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return, lhs, +, DELIMITER, +]
