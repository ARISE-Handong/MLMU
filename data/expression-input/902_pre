[remainingRegion, ;, protected, AbstractSubHyperplane, (, final, Hyperplane, <, S, >, hyperplane, ,, final, Region, <, T, >, remainingRegion, ), {]
[remainingRegion, ;, protected, AbstractSubHyperplane, (, final, Hyperplane, <, S, >, hyperplane, ,, final, Region, <, T, >, remainingRegion, ), {]
[(, final, Hyperplane, <, S, >, hyperplane, ,, final, Region, <, T, >, remainingRegion, ), {, this, ., hyperplane, =]
[Hyperplane, <, S, >, hyperplane, ,, final, Region, <, T, >, remainingRegion, ), {, this, ., hyperplane, =, hyperplane, ;]
[Hyperplane, <, S, >, hyperplane, ,, final, Region, <, T, >, remainingRegion, ), {, this, ., hyperplane, =, hyperplane, ;]
[hyperplane, ,, final, Region, <, T, >, remainingRegion, ), {, this, ., hyperplane, =, hyperplane, ;, this, ., remainingRegion, =]
[final, Region, <, T, >, remaining, ), ;, public, AbstractSubHyperplane, <, S, ,, T, >, copySelf, (, ), {, return]
[<, T, >, remaining, ), ;, public, AbstractSubHyperplane, <, S, ,, T, >, copySelf, (, ), {, return, buildNew, (]
[>, remaining, ), ;, public, AbstractSubHyperplane, <, S, ,, T, >, copySelf, (, ), {, return, buildNew, (, hyperplane, ,]
[{, return, buildNew, (, hyperplane, ,, remainingRegion, ), ;, }, public, Hyperplane, <, S, >, getHyperplane, (, ), {, return]
[S, >, getHyperplane, (, ), {, return, hyperplane, ;, }, public, Region, <, T, >, getRemainingRegion, (, ), {, return]
[public, Region, <, T, >, getRemainingRegion, (, ), {, return, remainingRegion, ;, }, public, double, getSize, (, ), {, return]
[public, Region, <, T, >, getRemainingRegion, (, ), {, return, remainingRegion, ;, }, public, double, getSize, (, ), {, return]
[), ;, }, public, AbstractSubHyperplane, <, S, ,, T, >, reunite, (, final, SubHyperplane, <, S, >, other, ), {]
[public, AbstractSubHyperplane, <, S, ,, T, >, reunite, (, final, SubHyperplane, <, S, >, other, ), {, @, SuppressWarnings, (]
[SubHyperplane, <, S, >, other, ), {, @, SuppressWarnings, (, "unchecked", ), AbstractSubHyperplane, <, S, ,, T, >, o, =]
[SuppressWarnings, (, "unchecked", ), AbstractSubHyperplane, <, S, ,, T, >, o, =, (, AbstractSubHyperplane, <, S, ,, T, >, )]
[), AbstractSubHyperplane, <, S, ,, T, >, o, =, (, AbstractSubHyperplane, <, S, ,, T, >, ), other, ;, return]
[<, S, ,, T, >, o, =, (, AbstractSubHyperplane, <, S, ,, T, >, ), other, ;, return, buildNew, (]
[,, T, >, o, =, (, AbstractSubHyperplane, <, S, ,, T, >, ), other, ;, return, buildNew, (, hyperplane, ,]
[,, T, >, o, =, (, AbstractSubHyperplane, <, S, ,, T, >, ), other, ;, return, buildNew, (, hyperplane, ,]
[T, >, ), other, ;, return, buildNew, (, hyperplane, ,, new, RegionFactory, <, T, >, (, ), ., union, (]
[), other, ;, return, buildNew, (, hyperplane, ,, new, RegionFactory, <, T, >, (, ), ., union, (, remainingRegion, ,]
[), other, ;, return, buildNew, (, hyperplane, ,, new, RegionFactory, <, T, >, (, ), ., union, (, remainingRegion, ,]
[>, applyTransform, (, final, Transform, <, S, ,, T, >, transform, ), {, final, Hyperplane, <, S, >, tHyperplane, =]
[>, applyTransform, (, final, Transform, <, S, ,, T, >, transform, ), {, final, Hyperplane, <, S, >, tHyperplane, =]
[Transform, <, S, ,, T, >, transform, ), {, final, Hyperplane, <, S, >, tHyperplane, =, transform, ., apply, (]
[Hyperplane, <, S, >, tHyperplane, =, transform, ., apply, (, hyperplane, ), ;, final, BSPTree, <, T, >, tTree, =]
[S, >, tHyperplane, =, transform, ., apply, (, hyperplane, ), ;, final, BSPTree, <, T, >, tTree, =, recurseTransform, (]
[S, >, tHyperplane, =, transform, ., apply, (, hyperplane, ), ;, final, BSPTree, <, T, >, tTree, =, recurseTransform, (]
[transform, ., apply, (, hyperplane, ), ;, final, BSPTree, <, T, >, tTree, =, recurseTransform, (, remainingRegion, ., getTree, (]
[(, hyperplane, ), ;, final, BSPTree, <, T, >, tTree, =, recurseTransform, (, remainingRegion, ., getTree, (, false, ), ,]
[), ;, final, BSPTree, <, T, >, tTree, =, recurseTransform, (, remainingRegion, ., getTree, (, false, ), ,, tHyperplane, ,]
[<, T, >, tTree, =, recurseTransform, (, remainingRegion, ., getTree, (, false, ), ,, tHyperplane, ,, transform, ), ;, return]
[>, tTree, =, recurseTransform, (, remainingRegion, ., getTree, (, false, ), ,, tHyperplane, ,, transform, ), ;, return, buildNew, (]
[=, recurseTransform, (, remainingRegion, ., getTree, (, false, ), ,, tHyperplane, ,, transform, ), ;, return, buildNew, (, tHyperplane, ,]
[=, recurseTransform, (, remainingRegion, ., getTree, (, false, ), ,, tHyperplane, ,, transform, ), ;, return, buildNew, (, tHyperplane, ,]
[., getTree, (, false, ), ,, tHyperplane, ,, transform, ), ;, return, buildNew, (, tHyperplane, ,, remainingRegion, ., buildNew, (]
[,, final, Hyperplane, <, S, >, transformed, ,, final, Transform, <, S, ,, T, >, transform, ), {, if, (]
[,, final, Hyperplane, <, S, >, transformed, ,, final, Transform, <, S, ,, T, >, transform, ), {, if, (]
[,, final, Hyperplane, <, S, >, transformed, ,, final, Transform, <, S, ,, T, >, transform, ), {, if, (]
[transformed, ,, final, Transform, <, S, ,, T, >, transform, ), {, if, (, node, ., getCut, (, ), ==]
[<, S, ,, T, >, transform, ), {, if, (, node, ., getCut, (, ), ==, null, ), {, return]
[), {, if, (, node, ., getCut, (, ), ==, null, ), {, return, new, BSPTree, <, T, >, (]
[), {, if, (, node, ., getCut, (, ), ==, null, ), {, return, new, BSPTree, <, T, >, (]
[), ==, null, ), {, return, new, BSPTree, <, T, >, (, node, ., getAttribute, (, ), ), ;, }]
[), {, return, new, BSPTree, <, T, >, (, node, ., getAttribute, (, ), ), ;, }, @, SuppressWarnings, (]
[(, node, ., getAttribute, (, ), ), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, T, >, attribute, =]
[), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, T, >, attribute, =, (, BoundaryAttribute, <, T, >, )]
[), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, T, >, attribute, =, (, BoundaryAttribute, <, T, >, )]
[BoundaryAttribute, <, T, >, attribute, =, (, BoundaryAttribute, <, T, >, ), node, ., getAttribute, (, ), ;, if, (]
[BoundaryAttribute, <, T, >, attribute, =, (, BoundaryAttribute, <, T, >, ), node, ., getAttribute, (, ), ;, if, (]
[T, >, attribute, =, (, BoundaryAttribute, <, T, >, ), node, ., getAttribute, (, ), ;, if, (, attribute, !=]
[node, ., getAttribute, (, ), ;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, T, >, tPO, =]
[node, ., getAttribute, (, ), ;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, T, >, tPO, =]
[., getAttribute, (, ), ;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, T, >, tPO, =, (]
[., getAttribute, (, ), ;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, T, >, tPO, =, (]
[., getAttribute, (, ), ;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, T, >, tPO, =, (]
[(, attribute, !=, null, ), {, final, SubHyperplane, <, T, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==]
[null, ), {, final, SubHyperplane, <, T, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==, null, ), ?]
[{, final, SubHyperplane, <, T, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null, :]
[{, final, SubHyperplane, <, T, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null, :]
[T, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null, :, transform, ., apply, (]
[T, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null, :, transform, ., apply, (]
[., getPlusOutside, (, ), ==, null, ), ?, null, :, transform, ., apply, (, attribute, ., getPlusOutside, (, ), ,]
[(, ), ==, null, ), ?, null, :, transform, ., apply, (, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,]
[apply, (, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,, transformed, ), ;, final, SubHyperplane, <, T, >, tPI, =]
[apply, (, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,, transformed, ), ;, final, SubHyperplane, <, T, >, tPI, =]
[(, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,, transformed, ), ;, final, SubHyperplane, <, T, >, tPI, =, (]
[(, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,, transformed, ), ;, final, SubHyperplane, <, T, >, tPI, =, (]
[(, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,, transformed, ), ;, final, SubHyperplane, <, T, >, tPI, =, (]
[,, hyperplane, ,, transformed, ), ;, final, SubHyperplane, <, T, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==]
[transformed, ), ;, final, SubHyperplane, <, T, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?]
[;, final, SubHyperplane, <, T, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null, :]
[;, final, SubHyperplane, <, T, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null, :]
[T, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null, :, transform, ., apply, (]
[T, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null, :, transform, ., apply, (]
[., getPlusInside, (, ), ==, null, ), ?, null, :, transform, ., apply, (, attribute, ., getPlusInside, (, ), ,]
[(, ), ==, null, ), ?, null, :, transform, ., apply, (, attribute, ., getPlusInside, (, ), ,, hyperplane, ,]
[null, ), ?, null, :, transform, ., apply, (, attribute, ., getPlusInside, (, ), ,, hyperplane, ,, transformed, ), ;]
[?, null, :, transform, ., apply, (, attribute, ., getPlusInside, (, ), ,, hyperplane, ,, transformed, ), ;, attribute, =]
[(, attribute, ., getPlusInside, (, ), ,, hyperplane, ,, transformed, ), ;, attribute, =, new, BoundaryAttribute, <, T, >, (]
[., getPlusInside, (, ), ,, hyperplane, ,, transformed, ), ;, attribute, =, new, BoundaryAttribute, <, T, >, (, tPO, ,]
[hyperplane, ,, transformed, ), ;, attribute, =, new, BoundaryAttribute, <, T, >, (, tPO, ,, tPI, ), ;, }, return]
[=, new, BoundaryAttribute, <, T, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <, T, >, (]
[=, new, BoundaryAttribute, <, T, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <, T, >, (]
[T, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <, T, >, (, transform, ., apply, (]
[T, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <, T, >, (, transform, ., apply, (]
[), ;, }, return, new, BSPTree, <, T, >, (, transform, ., apply, (, node, ., getCut, (, ), ,]
[}, return, new, BSPTree, <, T, >, (, transform, ., apply, (, node, ., getCut, (, ), ,, hyperplane, ,]
[BSPTree, <, T, >, (, transform, ., apply, (, node, ., getCut, (, ), ,, hyperplane, ,, transformed, ), ,]
[T, >, (, transform, ., apply, (, node, ., getCut, (, ), ,, hyperplane, ,, transformed, ), ,, recurseTransform, (]
[T, >, (, transform, ., apply, (, node, ., getCut, (, ), ,, hyperplane, ,, transformed, ), ,, recurseTransform, (]
[(, node, ., getCut, (, ), ,, hyperplane, ,, transformed, ), ,, recurseTransform, (, node, ., getPlus, (, ), ,]
[., getCut, (, ), ,, hyperplane, ,, transformed, ), ,, recurseTransform, (, node, ., getPlus, (, ), ,, transformed, ,]
[), ,, hyperplane, ,, transformed, ), ,, recurseTransform, (, node, ., getPlus, (, ), ,, transformed, ,, transform, ), ,]
[hyperplane, ,, transformed, ), ,, recurseTransform, (, node, ., getPlus, (, ), ,, transformed, ,, transform, ), ,, recurseTransform, (]
[hyperplane, ,, transformed, ), ,, recurseTransform, (, node, ., getPlus, (, ), ,, transformed, ,, transform, ), ,, recurseTransform, (]
[(, node, ., getPlus, (, ), ,, transformed, ,, transform, ), ,, recurseTransform, (, node, ., getMinus, (, ), ,]
[., getPlus, (, ), ,, transformed, ,, transform, ), ,, recurseTransform, (, node, ., getMinus, (, ), ,, transformed, ,]
[), ,, transformed, ,, transform, ), ,, recurseTransform, (, node, ., getMinus, (, ), ,, transformed, ,, transform, ), ,]
[SplitSubHyperplane, <, S, >, split, (, Hyperplane, <, S, >, hyper, ), ;, public, boolean, isEmpty, (, ), {, return]
[SplitSubHyperplane, <, S, >, split, (, Hyperplane, <, S, >, hyper, ), ;, public, boolean, isEmpty, (, ), {, return]
