[;, import, javax, ., annotation, ., Nullable, ;, class, ProcessClosurePrimitives, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, NULL_ARGUMENT_ERROR, =]
[;, import, javax, ., annotation, ., Nullable, ;, class, ProcessClosurePrimitives, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, NULL_ARGUMENT_ERROR, =]
[annotation, ., Nullable, ;, class, ProcessClosurePrimitives, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, NULL_ARGUMENT_ERROR, =, DiagnosticType, ., error, (]
[Nullable, ;, class, ProcessClosurePrimitives, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, NULL_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_NULL_ARGUMENT_ERROR", ,]
[{, static, final, DiagnosticType, NULL_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_NULL_ARGUMENT_ERROR", ,, "method \"{0}\" called without an argument", ), ;, static, final, DiagnosticType, EXPECTED_OBJECTLIT_ERROR, =]
[{, static, final, DiagnosticType, NULL_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_NULL_ARGUMENT_ERROR", ,, "method \"{0}\" called without an argument", ), ;, static, final, DiagnosticType, EXPECTED_OBJECTLIT_ERROR, =]
[NULL_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_NULL_ARGUMENT_ERROR", ,, "method \"{0}\" called without an argument", ), ;, static, final, DiagnosticType, EXPECTED_OBJECTLIT_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_NULL_ARGUMENT_ERROR", ,, "method \"{0}\" called without an argument", ), ;, static, final, DiagnosticType, EXPECTED_OBJECTLIT_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_OBJECTLIT_ERROR", ,]
[;, static, final, DiagnosticType, EXPECTED_OBJECTLIT_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_OBJECTLIT_ERROR", ,, "method \"{0}\" expected an object literal argument", ), ;, static, final, DiagnosticType, EXPECTED_STRING_ERROR, =]
[;, static, final, DiagnosticType, EXPECTED_OBJECTLIT_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_OBJECTLIT_ERROR", ,, "method \"{0}\" expected an object literal argument", ), ;, static, final, DiagnosticType, EXPECTED_STRING_ERROR, =]
[EXPECTED_OBJECTLIT_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_OBJECTLIT_ERROR", ,, "method \"{0}\" expected an object literal argument", ), ;, static, final, DiagnosticType, EXPECTED_STRING_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_EXPECTED_OBJECTLIT_ERROR", ,, "method \"{0}\" expected an object literal argument", ), ;, static, final, DiagnosticType, EXPECTED_STRING_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_STRING_ERROR", ,]
[;, static, final, DiagnosticType, EXPECTED_STRING_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_STRING_ERROR", ,, "method \"{0}\" expected an object string argument", ), ;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR, =]
[;, static, final, DiagnosticType, EXPECTED_STRING_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_STRING_ERROR", ,, "method \"{0}\" expected an object string argument", ), ;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR, =]
[EXPECTED_STRING_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_STRING_ERROR", ,, "method \"{0}\" expected an object string argument", ), ;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_EXPECTED_STRING_ERROR", ,, "method \"{0}\" expected an object string argument", ), ;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_ARGUMENT_ERROR", ,]
[;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_ARGUMENT_ERROR", ,, "method \"{0}\" called with invalid argument", ), ;, static, final, DiagnosticType, INVALID_STYLE_ERROR, =]
[;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_ARGUMENT_ERROR", ,, "method \"{0}\" called with invalid argument", ), ;, static, final, DiagnosticType, INVALID_STYLE_ERROR, =]
[INVALID_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_ARGUMENT_ERROR", ,, "method \"{0}\" called with invalid argument", ), ;, static, final, DiagnosticType, INVALID_STYLE_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_INVALID_ARGUMENT_ERROR", ,, "method \"{0}\" called with invalid argument", ), ;, static, final, DiagnosticType, INVALID_STYLE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", ,]
[;, static, final, DiagnosticType, INVALID_STYLE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", ,, "Invalid CSS name map style {0}", ), ;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR, =]
[;, static, final, DiagnosticType, INVALID_STYLE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", ,, "Invalid CSS name map style {0}", ), ;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR, =]
[INVALID_STYLE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", ,, "Invalid CSS name map style {0}", ), ;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", ,, "Invalid CSS name map style {0}", ), ;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_TOO_MANY_ARGUMENTS_ERROR", ,]
[;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_TOO_MANY_ARGUMENTS_ERROR", ,, "method \"{0}\" called with more than one argument", ), ;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR, =]
[;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_TOO_MANY_ARGUMENTS_ERROR", ,, "method \"{0}\" called with more than one argument", ), ;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR, =]
[TOO_MANY_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_TOO_MANY_ARGUMENTS_ERROR", ,, "method \"{0}\" called with more than one argument", ), ;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_TOO_MANY_ARGUMENTS_ERROR", ,, "method \"{0}\" called with more than one argument", ), ;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_NAMESPACE_ERROR", ,]
[;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_NAMESPACE_ERROR", ,, "namespace \"{0}\" cannot be provided twice", ), ;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR, =]
[;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_NAMESPACE_ERROR", ,, "namespace \"{0}\" cannot be provided twice", ), ;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR, =]
[DUPLICATE_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_NAMESPACE_ERROR", ,, "namespace \"{0}\" cannot be provided twice", ), ;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_DUPLICATE_NAMESPACE_ERROR", ,, "namespace \"{0}\" cannot be provided twice", ), ;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_FUNCTION_NAMESPACE_ERROR", ,]
[;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_FUNCTION_NAMESPACE_ERROR", ,, "\"{0}\" cannot be both provided and declared as a function", ), ;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR, =]
[;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_FUNCTION_NAMESPACE_ERROR", ,, "\"{0}\" cannot be both provided and declared as a function", ), ;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR, =]
[FUNCTION_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_FUNCTION_NAMESPACE_ERROR", ,, "\"{0}\" cannot be both provided and declared as a function", ), ;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_FUNCTION_NAMESPACE_ERROR", ,, "\"{0}\" cannot be both provided and declared as a function", ), ;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_PROVIDE_ERROR", ,]
[;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_PROVIDE_ERROR", ,, "required \"{0}\" namespace never provided", ), ;, static, final, DiagnosticType, LATE_PROVIDE_ERROR, =]
[;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_PROVIDE_ERROR", ,, "required \"{0}\" namespace never provided", ), ;, static, final, DiagnosticType, LATE_PROVIDE_ERROR, =]
[MISSING_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_PROVIDE_ERROR", ,, "required \"{0}\" namespace never provided", ), ;, static, final, DiagnosticType, LATE_PROVIDE_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_MISSING_PROVIDE_ERROR", ,, "required \"{0}\" namespace never provided", ), ;, static, final, DiagnosticType, LATE_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_LATE_PROVIDE_ERROR", ,]
[;, static, final, DiagnosticType, LATE_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_LATE_PROVIDE_ERROR", ,, "required \"{0}\" namespace not provided yet", ), ;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR, =]
[;, static, final, DiagnosticType, LATE_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_LATE_PROVIDE_ERROR", ,, "required \"{0}\" namespace not provided yet", ), ;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR, =]
[LATE_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_LATE_PROVIDE_ERROR", ,, "required \"{0}\" namespace not provided yet", ), ;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_LATE_PROVIDE_ERROR", ,, "required \"{0}\" namespace not provided yet", ), ;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_PROVIDE_ERROR", ,]
[;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name", ), ;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR, =]
[;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name", ), ;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR, =]
[INVALID_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name", ), ;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name", ), ;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR, =, DiagnosticType, ., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,]
[DiagnosticType, ., error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name", ), ;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR, =, DiagnosticType, ., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,]
[error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name", ), ;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR, =, DiagnosticType, ., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,, "namespace \"{0}\" provided in module {1} ", +]
[final, DiagnosticType, XMODULE_REQUIRE_ERROR, =, DiagnosticType, ., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,, "namespace \"{0}\" provided in module {1} ", +, "but required in module {2}", ), ;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =]
[final, DiagnosticType, XMODULE_REQUIRE_ERROR, =, DiagnosticType, ., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,, "namespace \"{0}\" provided in module {1} ", +, "but required in module {2}", ), ;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =]
[DiagnosticType, ., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,, "namespace \"{0}\" provided in module {1} ", +, "but required in module {2}", ), ;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =, DiagnosticType, ., error, (]
[warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,, "namespace \"{0}\" provided in module {1} ", +, "but required in module {2}", ), ;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,]
[;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,, "goog.setCssNameMapping only takes an object literal with string values", ), ;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP, =]
[;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,, "goog.setCssNameMapping only takes an object literal with string values", ), ;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP, =]
[NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,, "goog.setCssNameMapping only takes an object literal with string values", ), ;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,, "goog.setCssNameMapping only takes an object literal with string values", ), ;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP, =, DiagnosticType, ., warning, (, "INVALID_CSS_RENAMING_MAP", ,]
[;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP, =, DiagnosticType, ., warning, (, "INVALID_CSS_RENAMING_MAP", ,, "Invalid entries in css renaming map: {0}", ), ;, static, final, DiagnosticType, BASE_CLASS_ERROR, =]
[;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP, =, DiagnosticType, ., warning, (, "INVALID_CSS_RENAMING_MAP", ,, "Invalid entries in css renaming map: {0}", ), ;, static, final, DiagnosticType, BASE_CLASS_ERROR, =]
[INVALID_CSS_RENAMING_MAP, =, DiagnosticType, ., warning, (, "INVALID_CSS_RENAMING_MAP", ,, "Invalid entries in css renaming map: {0}", ), ;, static, final, DiagnosticType, BASE_CLASS_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., warning, (, "INVALID_CSS_RENAMING_MAP", ,, "Invalid entries in css renaming map: {0}", ), ;, static, final, DiagnosticType, BASE_CLASS_ERROR, =, DiagnosticType, ., error, (, "JSC_BASE_CLASS_ERROR", ,]
[;, static, final, DiagnosticType, BASE_CLASS_ERROR, =, DiagnosticType, ., error, (, "JSC_BASE_CLASS_ERROR", ,, "incorrect use of goog.base: {0}", ), ;, static, final, String, GOOG, =]
[private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph, ;, private, final, Map, <, String, ,, ProvidedName, >, providedNames, =]
[private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph, ;, private, final, Map, <, String, ,, ProvidedName, >, providedNames, =]
[String, ,, ProvidedName, >, providedNames, =, Maps, ., newTreeMap, (, ), ;, private, final, List, <, UnrecognizedRequire, >, unrecognizedRequires, =]
[String, ,, ProvidedName, >, providedNames, =, Maps, ., newTreeMap, (, ), ;, private, final, List, <, UnrecognizedRequire, >, unrecognizedRequires, =]
[List, <, UnrecognizedRequire, >, unrecognizedRequires, =, Lists, ., newArrayList, (, ), ;, private, final, Set, <, String, >, exportedVariables, =]
[List, <, UnrecognizedRequire, >, unrecognizedRequires, =, Lists, ., newArrayList, (, ), ;, private, final, Set, <, String, >, exportedVariables, =]
[;, private, final, PreprocessorSymbolTable, preprocessorSymbolTable, ;, ProcessClosurePrimitives, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, CheckLevel, requiresLevel, ), {]
[;, private, final, PreprocessorSymbolTable, preprocessorSymbolTable, ;, ProcessClosurePrimitives, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, CheckLevel, requiresLevel, ), {]
[preprocessorSymbolTable, ;, ProcessClosurePrimitives, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, CheckLevel, requiresLevel, ), {, this, ., compiler, =]
[ProcessClosurePrimitives, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, CheckLevel, requiresLevel, ), {, this, ., compiler, =, compiler, ;]
[ProcessClosurePrimitives, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, CheckLevel, requiresLevel, ), {, this, ., compiler, =, compiler, ;]
[,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, CheckLevel, requiresLevel, ), {, this, ., compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =]
[Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, CheckLevel, requiresLevel, ), {, this, ., compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;]
[Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, CheckLevel, requiresLevel, ), {, this, ., compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;]
[CheckLevel, requiresLevel, ), {, this, ., compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., moduleGraph, =]
[CheckLevel, requiresLevel, ), {, this, ., compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., moduleGraph, =]
[compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;]
[compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;]
[this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., requiresLevel, =]
[preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., requiresLevel, =, requiresLevel, ;]
[preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., requiresLevel, =, requiresLevel, ;]
[this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., requiresLevel, =, requiresLevel, ;, providedNames, ., put, (]
[moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., requiresLevel, =, requiresLevel, ;, providedNames, ., put, (, GOOG, ,]
[., getModuleGraph, (, ), ;, this, ., requiresLevel, =, requiresLevel, ;, providedNames, ., put, (, GOOG, ,, new, ProvidedName, (]
[(, ), ;, this, ., requiresLevel, =, requiresLevel, ;, providedNames, ., put, (, GOOG, ,, new, ProvidedName, (, GOOG, ,]
[;, this, ., requiresLevel, =, requiresLevel, ;, providedNames, ., put, (, GOOG, ,, new, ProvidedName, (, GOOG, ,, null, ,]
[., requiresLevel, =, requiresLevel, ;, providedNames, ., put, (, GOOG, ,, new, ProvidedName, (, GOOG, ,, null, ,, null, ,]
[GOOG, ,, null, ,, null, ,, false, ), ), ;, }, Set, <, String, >, getExportedVariableNames, (, ), {, return]
[(, ), {, return, exportedVariables, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[(, ), {, return, exportedVariables, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[return, exportedVariables, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,, this, ), ., traverse, (]
[), {, new, NodeTraversal, (, compiler, ,, this, ), ., traverse, (, root, ), ;, for, (, ProvidedName, pn, :]
[), {, new, NodeTraversal, (, compiler, ,, this, ), ., traverse, (, root, ), ;, for, (, ProvidedName, pn, :]
[this, ), ., traverse, (, root, ), ;, for, (, ProvidedName, pn, :, providedNames, ., values, (, ), ), {]
[this, ), ., traverse, (, root, ), ;, for, (, ProvidedName, pn, :, providedNames, ., values, (, ), ), {]
[(, ProvidedName, pn, :, providedNames, ., values, (, ), ), {, pn, ., replace, (, ), ;, }, if, (]
[(, ProvidedName, pn, :, providedNames, ., values, (, ), ), {, pn, ., replace, (, ), ;, }, if, (]
[., replace, (, ), ;, }, if, (, requiresLevel, ., isOn, (, ), ), {, for, (, UnrecognizedRequire, r, :]
[., isOn, (, ), ), {, for, (, UnrecognizedRequire, r, :, unrecognizedRequires, ), {, DiagnosticType, error, ;, ProvidedName, expectedName, =]
[., isOn, (, ), ), {, for, (, UnrecognizedRequire, r, :, unrecognizedRequires, ), {, DiagnosticType, error, ;, ProvidedName, expectedName, =]
[), {, for, (, UnrecognizedRequire, r, :, unrecognizedRequires, ), {, DiagnosticType, error, ;, ProvidedName, expectedName, =, providedNames, ., get, (]
[), {, for, (, UnrecognizedRequire, r, :, unrecognizedRequires, ), {, DiagnosticType, error, ;, ProvidedName, expectedName, =, providedNames, ., get, (]
[unrecognizedRequires, ), {, DiagnosticType, error, ;, ProvidedName, expectedName, =, providedNames, ., get, (, r, ., namespace, ), ;, if, (]
[unrecognizedRequires, ), {, DiagnosticType, error, ;, ProvidedName, expectedName, =, providedNames, ., get, (, r, ., namespace, ), ;, if, (]
[unrecognizedRequires, ), {, DiagnosticType, error, ;, ProvidedName, expectedName, =, providedNames, ., get, (, r, ., namespace, ), ;, if, (]
[{, DiagnosticType, error, ;, ProvidedName, expectedName, =, providedNames, ., get, (, r, ., namespace, ), ;, if, (, expectedName, !=]
[error, ;, ProvidedName, expectedName, =, providedNames, ., get, (, r, ., namespace, ), ;, if, (, expectedName, !=, null, &&]
[error, ;, ProvidedName, expectedName, =, providedNames, ., get, (, r, ., namespace, ), ;, if, (, expectedName, !=, null, &&]
[error, ;, ProvidedName, expectedName, =, providedNames, ., get, (, r, ., namespace, ), ;, if, (, expectedName, !=, null, &&]
[=, providedNames, ., get, (, r, ., namespace, ), ;, if, (, expectedName, !=, null, &&, expectedName, ., firstNode, !=]
[get, (, r, ., namespace, ), ;, if, (, expectedName, !=, null, &&, expectedName, ., firstNode, !=, null, ), {]
[r, ., namespace, ), ;, if, (, expectedName, !=, null, &&, expectedName, ., firstNode, !=, null, ), {, error, =]
[if, (, expectedName, !=, null, &&, expectedName, ., firstNode, !=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {]
[expectedName, !=, null, &&, expectedName, ., firstNode, !=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =]
[&&, expectedName, ., firstNode, !=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }]
[&&, expectedName, ., firstNode, !=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }]
[!=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (]
[!=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (]
[error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (, JSError, ., make, (]
[error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (, JSError, ., make, (]
[}, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (, JSError, ., make, (, r, ., inputName, ,]
[}, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (, JSError, ., make, (, r, ., inputName, ,]
[=, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (, JSError, ., make, (, r, ., inputName, ,, r, ., requireNode, ,]
[;, }, compiler, ., report, (, JSError, ., make, (, r, ., inputName, ,, r, ., requireNode, ,, requiresLevel, ,]
[compiler, ., report, (, JSError, ., make, (, r, ., inputName, ,, r, ., requireNode, ,, requiresLevel, ,, error, ,]
[compiler, ., report, (, JSError, ., make, (, r, ., inputName, ,, r, ., requireNode, ,, requiresLevel, ,, error, ,]
[namespace, ), ), ;, }, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[namespace, ), ), ;, }, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[namespace, ), ), ;, }, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[}, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, this, ., compiler, ., process, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :, boolean, isExpr, =]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :, boolean, isExpr, =]
[), ), {, case, Token, ., CALL, :, boolean, isExpr, =, parent, ., isExprResult, (, ), ;, Node, left, =]
[), ), {, case, Token, ., CALL, :, boolean, isExpr, =, parent, ., isExprResult, (, ), ;, Node, left, =]
[boolean, isExpr, =, parent, ., isExprResult, (, ), ;, Node, left, =, n, ., getFirstChild, (, ), ;, if, (]
[boolean, isExpr, =, parent, ., isExprResult, (, ), ;, Node, left, =, n, ., getFirstChild, (, ), ;, if, (]
[left, =, n, ., getFirstChild, (, ), ;, if, (, left, ., isGetProp, (, ), ), {, Node, name, =]
[left, =, n, ., getFirstChild, (, ), ;, if, (, left, ., isGetProp, (, ), ), {, Node, name, =]
[if, (, left, ., isGetProp, (, ), ), {, Node, name, =, left, ., getFirstChild, (, ), ;, if, (]
[if, (, left, ., isGetProp, (, ), ), {, Node, name, =, left, ., getFirstChild, (, ), ;, if, (]
[if, (, left, ., isGetProp, (, ), ), {, Node, name, =, left, ., getFirstChild, (, ), ;, if, (]
[), ), {, Node, name, =, left, ., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&]
[), ), {, Node, name, =, left, ., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&]
[name, =, left, ., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&, GOOG, ., equals, (]
[name, =, left, ., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&, GOOG, ., equals, (]
[., isName, (, ), &&, GOOG, ., equals, (, name, ., getString, (, ), ), ), {, String, methodName, =]
[., isName, (, ), &&, GOOG, ., equals, (, name, ., getString, (, ), ), ), {, String, methodName, =]
[., isName, (, ), &&, GOOG, ., equals, (, name, ., getString, (, ), ), ), {, String, methodName, =]
[(, ), ), ), {, String, methodName, =, name, ., getNext, (, ), ., getString, (, ), ;, if, (]
[(, ), ), ), {, String, methodName, =, name, ., getNext, (, ), ., getString, (, ), ;, if, (]
[{, String, methodName, =, name, ., getNext, (, ), ., getString, (, ), ;, if, (, "base", ., equals, (]
[name, ., getNext, (, ), ., getString, (, ), ;, if, (, "base", ., equals, (, methodName, ), ), {]
[getNext, (, ), ., getString, (, ), ;, if, (, "base", ., equals, (, methodName, ), ), {, processBaseClassCall, (]
[), ., getString, (, ), ;, if, (, "base", ., equals, (, methodName, ), ), {, processBaseClassCall, (, t, ,]
[(, "base", ., equals, (, methodName, ), ), {, processBaseClassCall, (, t, ,, n, ), ;, }, else, if, (]
["base", ., equals, (, methodName, ), ), {, processBaseClassCall, (, t, ,, n, ), ;, }, else, if, (, !]
[(, t, ,, n, ), ;, }, else, if, (, !, isExpr, ), {, break, ;, }, else, if, (]
[(, t, ,, n, ), ;, }, else, if, (, !, isExpr, ), {, break, ;, }, else, if, (]
[), ;, }, else, if, (, !, isExpr, ), {, break, ;, }, else, if, (, "require", ., equals, (]
[if, (, !, isExpr, ), {, break, ;, }, else, if, (, "require", ., equals, (, methodName, ), ), {]
[!, isExpr, ), {, break, ;, }, else, if, (, "require", ., equals, (, methodName, ), ), {, processRequireCall, (]
[), {, break, ;, }, else, if, (, "require", ., equals, (, methodName, ), ), {, processRequireCall, (, t, ,]
[break, ;, }, else, if, (, "require", ., equals, (, methodName, ), ), {, processRequireCall, (, t, ,, n, ,]
[., equals, (, methodName, ), ), {, processRequireCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (]
[., equals, (, methodName, ), ), {, processRequireCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (]
[), ), {, processRequireCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (, "provide", ., equals, (]
[(, t, ,, n, ,, parent, ), ;, }, else, if, (, "provide", ., equals, (, methodName, ), ), {]
[,, n, ,, parent, ), ;, }, else, if, (, "provide", ., equals, (, methodName, ), ), {, processProvideCall, (]
[,, parent, ), ;, }, else, if, (, "provide", ., equals, (, methodName, ), ), {, processProvideCall, (, t, ,]
[), ;, }, else, if, (, "provide", ., equals, (, methodName, ), ), {, processProvideCall, (, t, ,, n, ,]
[., equals, (, methodName, ), ), {, processProvideCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (]
[., equals, (, methodName, ), ), {, processProvideCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (]
[), ), {, processProvideCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (, "exportSymbol", ., equals, (]
[n, ,, parent, ), ;, }, else, if, (, "exportSymbol", ., equals, (, methodName, ), ), {, Node, arg, =]
[n, ,, parent, ), ;, }, else, if, (, "exportSymbol", ., equals, (, methodName, ), ), {, Node, arg, =]
[(, "exportSymbol", ., equals, (, methodName, ), ), {, Node, arg, =, left, ., getNext, (, ), ;, if, (]
[(, "exportSymbol", ., equals, (, methodName, ), ), {, Node, arg, =, left, ., getNext, (, ), ;, if, (]
[arg, =, left, ., getNext, (, ), ;, if, (, arg, ., isString, (, ), ), {, int, dot, =]
[arg, =, left, ., getNext, (, ), ;, if, (, arg, ., isString, (, ), ), {, int, dot, =]
[arg, =, left, ., getNext, (, ), ;, if, (, arg, ., isString, (, ), ), {, int, dot, =]
[if, (, arg, ., isString, (, ), ), {, int, dot, =, arg, ., getString, (, ), ., indexOf, (]
[(, ), ), {, int, dot, =, arg, ., getString, (, ), ., indexOf, (, '.', ), ;, if, (]
[(, ), ), {, int, dot, =, arg, ., getString, (, ), ., indexOf, (, '.', ), ;, if, (]
[), {, int, dot, =, arg, ., getString, (, ), ., indexOf, (, '.', ), ;, if, (, dot, ==]
[{, int, dot, =, arg, ., getString, (, ), ., indexOf, (, '.', ), ;, if, (, dot, ==, -]
[=, arg, ., getString, (, ), ., indexOf, (, '.', ), ;, if, (, dot, ==, -, 1, ), {]
[=, arg, ., getString, (, ), ., indexOf, (, '.', ), ;, if, (, dot, ==, -, 1, ), {]
[(, ), ., indexOf, (, '.', ), ;, if, (, dot, ==, -, 1, ), {, exportedVariables, ., add, (]
[(, ), ., indexOf, (, '.', ), ;, if, (, dot, ==, -, 1, ), {, exportedVariables, ., add, (]
[dot, ==, -, 1, ), {, exportedVariables, ., add, (, arg, ., getString, (, ), ), ;, }, else, {]
[dot, ==, -, 1, ), {, exportedVariables, ., add, (, arg, ., getString, (, ), ), ;, }, else, {]
[), {, exportedVariables, ., add, (, arg, ., getString, (, ), ), ;, }, else, {, exportedVariables, ., add, (]
[), {, exportedVariables, ., add, (, arg, ., getString, (, ), ), ;, }, else, {, exportedVariables, ., add, (]
[), {, exportedVariables, ., add, (, arg, ., getString, (, ), ), ;, }, else, {, exportedVariables, ., add, (]
[getString, (, ), ), ;, }, else, {, exportedVariables, ., add, (, arg, ., getString, (, ), ., substring, (]
[), ), ;, }, else, {, exportedVariables, ., add, (, arg, ., getString, (, ), ., substring, (, 0, ,]
[arg, ., getString, (, ), ., substring, (, 0, ,, dot, ), ), ;, }, }, }, else, if, (]
[arg, ., getString, (, ), ., substring, (, 0, ,, dot, ), ), ;, }, }, }, else, if, (]
[), ., substring, (, 0, ,, dot, ), ), ;, }, }, }, else, if, (, "addDependency", ., equals, (]
[), ), ;, }, }, }, else, if, (, "addDependency", ., equals, (, methodName, ), ), {, CodingConvention, convention, =]
[), ), ;, }, }, }, else, if, (, "addDependency", ., equals, (, methodName, ), ), {, CodingConvention, convention, =]
[(, methodName, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, List, <, String, >, typeDecls, =]
[(, methodName, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, List, <, String, >, typeDecls, =]
[{, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, List, <, String, >, typeDecls, =, convention, ., identifyTypeDeclarationCall, (]
[., getCodingConvention, (, ), ;, List, <, String, >, typeDecls, =, convention, ., identifyTypeDeclarationCall, (, n, ), ;, if, (]
[., getCodingConvention, (, ), ;, List, <, String, >, typeDecls, =, convention, ., identifyTypeDeclarationCall, (, n, ), ;, if, (]
[(, ), ;, List, <, String, >, typeDecls, =, convention, ., identifyTypeDeclarationCall, (, n, ), ;, if, (, typeDecls, !=]
[=, convention, ., identifyTypeDeclarationCall, (, n, ), ;, if, (, typeDecls, !=, null, ), {, for, (, String, typeDecl, :]
[identifyTypeDeclarationCall, (, n, ), ;, if, (, typeDecls, !=, null, ), {, for, (, String, typeDecl, :, typeDecls, ), {]
[identifyTypeDeclarationCall, (, n, ), ;, if, (, typeDecls, !=, null, ), {, for, (, String, typeDecl, :, typeDecls, ), {]
[identifyTypeDeclarationCall, (, n, ), ;, if, (, typeDecls, !=, null, ), {, for, (, String, typeDecl, :, typeDecls, ), {]
[!=, null, ), {, for, (, String, typeDecl, :, typeDecls, ), {, compiler, ., getTypeRegistry, (, ), ., forwardDeclareType, (]
[(, String, typeDecl, :, typeDecls, ), {, compiler, ., getTypeRegistry, (, ), ., forwardDeclareType, (, typeDecl, ), ;, }, }]
[(, String, typeDecl, :, typeDecls, ), {, compiler, ., getTypeRegistry, (, ), ., forwardDeclareType, (, typeDecl, ), ;, }, }]
[typeDecls, ), {, compiler, ., getTypeRegistry, (, ), ., forwardDeclareType, (, typeDecl, ), ;, }, }, parent, ., replaceChild, (]
[{, compiler, ., getTypeRegistry, (, ), ., forwardDeclareType, (, typeDecl, ), ;, }, }, parent, ., replaceChild, (, n, ,]
[{, compiler, ., getTypeRegistry, (, ), ., forwardDeclareType, (, typeDecl, ), ;, }, }, parent, ., replaceChild, (, n, ,]
[(, ), ., forwardDeclareType, (, typeDecl, ), ;, }, }, parent, ., replaceChild, (, n, ,, IR, ., number, (]
[(, typeDecl, ), ;, }, }, parent, ., replaceChild, (, n, ,, IR, ., number, (, 0, ), ), ;]
[(, typeDecl, ), ;, }, }, parent, ., replaceChild, (, n, ,, IR, ., number, (, 0, ), ), ;]
[n, ,, IR, ., number, (, 0, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (]
[n, ,, IR, ., number, (, 0, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (]
[number, (, 0, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, "setCssNameMapping", ., equals, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, "setCssNameMapping", ., equals, (, methodName, ), ), {]
[compiler, ., reportCodeChange, (, ), ;, }, else, if, (, "setCssNameMapping", ., equals, (, methodName, ), ), {, processSetCssNameMapping, (]
[reportCodeChange, (, ), ;, }, else, if, (, "setCssNameMapping", ., equals, (, methodName, ), ), {, processSetCssNameMapping, (, t, ,]
[), ;, }, else, if, (, "setCssNameMapping", ., equals, (, methodName, ), ), {, processSetCssNameMapping, (, t, ,, n, ,]
[(, methodName, ), ), {, processSetCssNameMapping, (, t, ,, n, ,, parent, ), ;, }, }, }, break, ;, case]
[(, methodName, ), ), {, processSetCssNameMapping, (, t, ,, n, ,, parent, ), ;, }, }, }, break, ;, case]
[processSetCssNameMapping, (, t, ,, n, ,, parent, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case]
[processSetCssNameMapping, (, t, ,, n, ,, parent, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case]
[n, ,, parent, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., NAME, :]
[parent, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., NAME, :, handleCandidateProvideDefinition, (]
[;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., NAME, :, handleCandidateProvideDefinition, (, t, ,]
[}, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., NAME, :, handleCandidateProvideDefinition, (, t, ,, n, ,]
[., ASSIGN, :, case, Token, ., NAME, :, handleCandidateProvideDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[., ASSIGN, :, case, Token, ., NAME, :, handleCandidateProvideDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[Token, ., NAME, :, handleCandidateProvideDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :]
[NAME, :, handleCandidateProvideDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, handleTypedefDefinition, (]
[handleCandidateProvideDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, handleTypedefDefinition, (, t, ,]
[t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, handleTypedefDefinition, (, t, ,, n, ,]
[;, break, ;, case, Token, ., EXPR_RESULT, :, handleTypedefDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[;, break, ;, case, Token, ., EXPR_RESULT, :, handleTypedefDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[EXPR_RESULT, :, handleTypedefDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (]
[EXPR_RESULT, :, handleTypedefDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (]
[EXPR_RESULT, :, handleTypedefDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (]
[n, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., inGlobalScope, (, ), &&]
[,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., inGlobalScope, (, ), &&, !]
[,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., inGlobalScope, (, ), &&, !]
[break, ;, case, Token, ., FUNCTION, :, if, (, t, ., inGlobalScope, (, ), &&, !, NodeUtil, ., isFunctionExpression, (]
[if, (, t, ., inGlobalScope, (, ), &&, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {, String, name, =]
[if, (, t, ., inGlobalScope, (, ), &&, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {, String, name, =]
[if, (, t, ., inGlobalScope, (, ), &&, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {, String, name, =]
[n, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, ProvidedName, pn, =]
[n, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, ProvidedName, pn, =]
[String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, ProvidedName, pn, =, providedNames, ., get, (]
[getFirstChild, (, ), ., getString, (, ), ;, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (]
[getFirstChild, (, ), ., getString, (, ), ;, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (]
[), ., getString, (, ), ;, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=]
[(, ), ;, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {]
[(, ), ;, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {]
[pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {, compiler, ., report, (]
[pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {, compiler, ., report, (]
[get, (, name, ), ;, if, (, pn, !=, null, ), {, compiler, ., report, (, t, ., makeError, (]
[name, ), ;, if, (, pn, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[;, if, (, pn, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR, ,]
[., report, (, t, ., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }, break, ;, case]
[., report, (, t, ., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }, break, ;, case]
[(, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }, break, ;, case, Token, ., GETPROP, :, if, (]
[(, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }, break, ;, case, Token, ., GETPROP, :, if, (]
[(, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }, break, ;, case, Token, ., GETPROP, :, if, (]
[(, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }, break, ;, case, Token, ., GETPROP, :, if, (]
[(, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }, break, ;, case, Token, ., GETPROP, :, if, (]
[(, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }, break, ;, case, Token, ., GETPROP, :, if, (]
[}, break, ;, case, Token, ., GETPROP, :, if, (, n, ., getFirstChild, (, ), ., isName, (, ), &&]
[break, ;, case, Token, ., GETPROP, :, if, (, n, ., getFirstChild, (, ), ., isName, (, ), &&, !]
[break, ;, case, Token, ., GETPROP, :, if, (, n, ., getFirstChild, (, ), ., isName, (, ), &&, !]
[:, if, (, n, ., getFirstChild, (, ), ., isName, (, ), &&, !, parent, ., isCall, (, ), &&]
[if, (, n, ., getFirstChild, (, ), ., isName, (, ), &&, !, parent, ., isCall, (, ), &&, !]
[if, (, n, ., getFirstChild, (, ), ., isName, (, ), &&, !, parent, ., isCall, (, ), &&, !]
[), ., isName, (, ), &&, !, parent, ., isCall, (, ), &&, !, parent, ., isAssign, (, ), &&]
[), ., isName, (, ), &&, !, parent, ., isCall, (, ), &&, !, parent, ., isAssign, (, ), &&]
[), &&, !, parent, ., isCall, (, ), &&, !, parent, ., isAssign, (, ), &&, "goog.base", ., equals, (]
[), &&, !, parent, ., isCall, (, ), &&, !, parent, ., isAssign, (, ), &&, "goog.base", ., equals, (]
[&&, !, parent, ., isAssign, (, ), &&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), ), ), {]
[parent, ., isAssign, (, ), &&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), ), ), {, reportBadBaseClassUse, (]
[isAssign, (, ), &&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), ), ), {, reportBadBaseClassUse, (, t, ,]
[), &&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), ), ), {, reportBadBaseClassUse, (, t, ,, n, ,]
[;, }, }, private, void, processRequireCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, left, =]
[;, }, }, private, void, processRequireCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, left, =]
[,, Node, n, ,, Node, parent, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, arg, =]
[,, Node, n, ,, Node, parent, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, arg, =]
[Node, left, =, n, ., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifyArgument, (]
[., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifyArgument, (, t, ,]
[(, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifyArgument, (, t, ,, left, ,]
[., getNext, (, ), ;, if, (, verifyArgument, (, t, ,, left, ,, arg, ), ), {, String, ns, =]
[., getNext, (, ), ;, if, (, verifyArgument, (, t, ,, left, ,, arg, ), ), {, String, ns, =]
[t, ,, left, ,, arg, ), ), {, String, ns, =, arg, ., getString, (, ), ;, ProvidedName, provided, =]
[t, ,, left, ,, arg, ), ), {, String, ns, =, arg, ., getString, (, ), ;, ProvidedName, provided, =]
[arg, ), ), {, String, ns, =, arg, ., getString, (, ), ;, ProvidedName, provided, =, providedNames, ., get, (]
[ns, =, arg, ., getString, (, ), ;, ProvidedName, provided, =, providedNames, ., get, (, ns, ), ;, if, (]
[ns, =, arg, ., getString, (, ), ;, ProvidedName, provided, =, providedNames, ., get, (, ns, ), ;, if, (]
[ns, =, arg, ., getString, (, ), ;, ProvidedName, provided, =, providedNames, ., get, (, ns, ), ;, if, (]
[arg, ., getString, (, ), ;, ProvidedName, provided, =, providedNames, ., get, (, ns, ), ;, if, (, provided, ==]
[getString, (, ), ;, ProvidedName, provided, =, providedNames, ., get, (, ns, ), ;, if, (, provided, ==, null, ||]
[(, ), ;, ProvidedName, provided, =, providedNames, ., get, (, ns, ), ;, if, (, provided, ==, null, ||, !]
[(, ), ;, ProvidedName, provided, =, providedNames, ., get, (, ns, ), ;, if, (, provided, ==, null, ||, !]
[., get, (, ns, ), ;, if, (, provided, ==, null, ||, !, provided, ., isExplicitlyProvided, (, ), ), {]
[., get, (, ns, ), ;, if, (, provided, ==, null, ||, !, provided, ., isExplicitlyProvided, (, ), ), {]
[), ;, if, (, provided, ==, null, ||, !, provided, ., isExplicitlyProvided, (, ), ), {, unrecognizedRequires, ., add, (]
[(, provided, ==, null, ||, !, provided, ., isExplicitlyProvided, (, ), ), {, unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (]
[==, null, ||, !, provided, ., isExplicitlyProvided, (, ), ), {, unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (, n, ,]
[||, !, provided, ., isExplicitlyProvided, (, ), ), {, unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (, n, ,, ns, ,]
[||, !, provided, ., isExplicitlyProvided, (, ), ), {, unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (, n, ,, ns, ,]
[UnrecognizedRequire, (, n, ,, ns, ,, t, ., getSourceName, (, ), ), ), ;, }, else, {, JSModule, providedModule, =]
[UnrecognizedRequire, (, n, ,, ns, ,, t, ., getSourceName, (, ), ), ), ;, }, else, {, JSModule, providedModule, =]
[ns, ,, t, ., getSourceName, (, ), ), ), ;, }, else, {, JSModule, providedModule, =, provided, ., explicitModule, ;]
[ns, ,, t, ., getSourceName, (, ), ), ), ;, }, else, {, JSModule, providedModule, =, provided, ., explicitModule, ;]
[getSourceName, (, ), ), ), ;, }, else, {, JSModule, providedModule, =, provided, ., explicitModule, ;, Preconditions, ., checkNotNull, (]
[}, else, {, JSModule, providedModule, =, provided, ., explicitModule, ;, Preconditions, ., checkNotNull, (, providedModule, ), ;, JSModule, module, =]
[}, else, {, JSModule, providedModule, =, provided, ., explicitModule, ;, Preconditions, ., checkNotNull, (, providedModule, ), ;, JSModule, module, =]
[explicitModule, ;, Preconditions, ., checkNotNull, (, providedModule, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, if, (]
[explicitModule, ;, Preconditions, ., checkNotNull, (, providedModule, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, if, (]
[explicitModule, ;, Preconditions, ., checkNotNull, (, providedModule, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, if, (]
[explicitModule, ;, Preconditions, ., checkNotNull, (, providedModule, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, if, (]
[Preconditions, ., checkNotNull, (, providedModule, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, if, (, moduleGraph, !=]
[checkNotNull, (, providedModule, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, if, (, moduleGraph, !=, null, &&]
[checkNotNull, (, providedModule, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, if, (, moduleGraph, !=, null, &&]
[providedModule, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, if, (, moduleGraph, !=, null, &&, module, !=]
[;, JSModule, module, =, t, ., getModule, (, ), ;, if, (, moduleGraph, !=, null, &&, module, !=, providedModule, &&]
[JSModule, module, =, t, ., getModule, (, ), ;, if, (, moduleGraph, !=, null, &&, module, !=, providedModule, &&, !]
[JSModule, module, =, t, ., getModule, (, ), ;, if, (, moduleGraph, !=, null, &&, module, !=, providedModule, &&, !]
[., getModule, (, ), ;, if, (, moduleGraph, !=, null, &&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (]
[(, ), ;, if, (, moduleGraph, !=, null, &&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (, module, ,]
[(, moduleGraph, !=, null, &&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {]
[(, moduleGraph, !=, null, &&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {]
[&&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (]
[&&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (]
[&&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (, t, ., makeError, (]
[moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,]
[module, ,, providedModule, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,]
[module, ,, providedModule, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,]
[compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName, (, ), ,]
[compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName, (, ), ,]
[XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName, (, ), ,, module, ., getName, (, ), ), ), ;, }, }]
[ns, ,, providedModule, ., getName, (, ), ,, module, ., getName, (, ), ), ), ;, }, }, maybeAddToSymbolTable, (]
[., getName, (, ), ,, module, ., getName, (, ), ), ), ;, }, }, maybeAddToSymbolTable, (, left, ), ;]
[(, ), ,, module, ., getName, (, ), ), ), ;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (]
[getName, (, ), ), ), ;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (]
[getName, (, ), ), ), ;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (]
[getName, (, ), ), ), ;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (]
[), ), ), ;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, provided, !=]
[), ;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, provided, !=, null, ||]
[), ;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, provided, !=, null, ||]
[), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, provided, !=, null, ||, requiresLevel, ., isOn, (, ), ), {]
[), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, provided, !=, null, ||, requiresLevel, ., isOn, (, ), ), {]
[;, if, (, provided, !=, null, ||, requiresLevel, ., isOn, (, ), ), {, parent, ., detachFromParent, (, ), ;]
[;, if, (, provided, !=, null, ||, requiresLevel, ., isOn, (, ), ), {, parent, ., detachFromParent, (, ), ;]
[}, }, }, private, void, processProvideCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, left, =]
[}, }, }, private, void, processProvideCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, left, =]
[,, Node, n, ,, Node, parent, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, arg, =]
[,, Node, n, ,, Node, parent, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, arg, =]
[Node, left, =, n, ., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifyProvide, (]
[., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifyProvide, (, t, ,]
[(, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifyProvide, (, t, ,, left, ,]
[., getNext, (, ), ;, if, (, verifyProvide, (, t, ,, left, ,, arg, ), ), {, String, ns, =]
[., getNext, (, ), ;, if, (, verifyProvide, (, t, ,, left, ,, arg, ), ), {, String, ns, =]
[(, verifyProvide, (, t, ,, left, ,, arg, ), ), {, String, ns, =, arg, ., getString, (, ), ;]
[(, t, ,, left, ,, arg, ), ), {, String, ns, =, arg, ., getString, (, ), ;, maybeAddToSymbolTable, (]
[left, ,, arg, ), ), {, String, ns, =, arg, ., getString, (, ), ;, maybeAddToSymbolTable, (, left, ), ;]
[arg, ), ), {, String, ns, =, arg, ., getString, (, ), ;, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (]
[ns, =, arg, ., getString, (, ), ;, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (]
[ns, =, arg, ., getString, (, ), ;, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (]
[getString, (, ), ;, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, providedNames, ., containsKey, (]
[), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, providedNames, ., containsKey, (, ns, ), ), {, ProvidedName, previouslyProvided, =]
[), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, providedNames, ., containsKey, (, ns, ), ), {, ProvidedName, previouslyProvided, =]
[arg, ), ;, if, (, providedNames, ., containsKey, (, ns, ), ), {, ProvidedName, previouslyProvided, =, providedNames, ., get, (]
[providedNames, ., containsKey, (, ns, ), ), {, ProvidedName, previouslyProvided, =, providedNames, ., get, (, ns, ), ;, if, (]
[., containsKey, (, ns, ), ), {, ProvidedName, previouslyProvided, =, providedNames, ., get, (, ns, ), ;, if, (, !]
[., containsKey, (, ns, ), ), {, ProvidedName, previouslyProvided, =, providedNames, ., get, (, ns, ), ;, if, (, !]
[ProvidedName, previouslyProvided, =, providedNames, ., get, (, ns, ), ;, if, (, !, previouslyProvided, ., isExplicitlyProvided, (, ), ), {]
[ProvidedName, previouslyProvided, =, providedNames, ., get, (, ns, ), ;, if, (, !, previouslyProvided, ., isExplicitlyProvided, (, ), ), {]
[., get, (, ns, ), ;, if, (, !, previouslyProvided, ., isExplicitlyProvided, (, ), ), {, previouslyProvided, ., addProvide, (]
[(, ns, ), ;, if, (, !, previouslyProvided, ., isExplicitlyProvided, (, ), ), {, previouslyProvided, ., addProvide, (, parent, ,]
[(, ns, ), ;, if, (, !, previouslyProvided, ., isExplicitlyProvided, (, ), ), {, previouslyProvided, ., addProvide, (, parent, ,]
[!, previouslyProvided, ., isExplicitlyProvided, (, ), ), {, previouslyProvided, ., addProvide, (, parent, ,, t, ., getModule, (, ), ,]
[), {, previouslyProvided, ., addProvide, (, parent, ,, t, ., getModule, (, ), ,, true, ), ;, }, else, {]
[), {, previouslyProvided, ., addProvide, (, parent, ,, t, ., getModule, (, ), ,, true, ), ;, }, else, {]
[addProvide, (, parent, ,, t, ., getModule, (, ), ,, true, ), ;, }, else, {, compiler, ., report, (]
[addProvide, (, parent, ,, t, ., getModule, (, ), ,, true, ), ;, }, else, {, compiler, ., report, (]
[t, ., getModule, (, ), ,, true, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (]
[getModule, (, ), ,, true, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,]
[), ,, true, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,]
[compiler, ., report, (, t, ., makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns, ), ), ;, }, }, else, {]
[report, (, t, ., makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns, ), ), ;, }, }, else, {, registerAnyProvidedPrefixes, (]
[t, ., makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns, ), ), ;, }, }, else, {, registerAnyProvidedPrefixes, (, ns, ,]
[makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns, ), ), ;, }, }, else, {, registerAnyProvidedPrefixes, (, ns, ,, parent, ,]
[makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns, ), ), ;, }, }, else, {, registerAnyProvidedPrefixes, (, ns, ,, parent, ,]
[), ), ;, }, }, else, {, registerAnyProvidedPrefixes, (, ns, ,, parent, ,, t, ., getModule, (, ), ), ;]
[), ), ;, }, }, else, {, registerAnyProvidedPrefixes, (, ns, ,, parent, ,, t, ., getModule, (, ), ), ;]
[}, else, {, registerAnyProvidedPrefixes, (, ns, ,, parent, ,, t, ., getModule, (, ), ), ;, providedNames, ., put, (]
[{, registerAnyProvidedPrefixes, (, ns, ,, parent, ,, t, ., getModule, (, ), ), ;, providedNames, ., put, (, ns, ,]
[ns, ,, parent, ,, t, ., getModule, (, ), ), ;, providedNames, ., put, (, ns, ,, new, ProvidedName, (]
[parent, ,, t, ., getModule, (, ), ), ;, providedNames, ., put, (, ns, ,, new, ProvidedName, (, ns, ,]
[t, ., getModule, (, ), ), ;, providedNames, ., put, (, ns, ,, new, ProvidedName, (, ns, ,, parent, ,]
[t, ., getModule, (, ), ), ;, providedNames, ., put, (, ns, ,, new, ProvidedName, (, ns, ,, parent, ,]
[;, providedNames, ., put, (, ns, ,, new, ProvidedName, (, ns, ,, parent, ,, t, ., getModule, (, ), ,]
[}, }, }, private, void, handleTypedefDefinition, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, info, =]
[}, }, }, private, void, handleTypedefDefinition, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, info, =]
[}, }, }, private, void, handleTypedefDefinition, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, info, =]
[,, Node, parent, ), {, JSDocInfo, info, =, n, ., getFirstChild, (, ), ., getJSDocInfo, (, ), ;, if, (]
[,, Node, parent, ), {, JSDocInfo, info, =, n, ., getFirstChild, (, ), ., getJSDocInfo, (, ), ;, if, (]
[,, Node, parent, ), {, JSDocInfo, info, =, n, ., getFirstChild, (, ), ., getJSDocInfo, (, ), ;, if, (]
[,, Node, parent, ), {, JSDocInfo, info, =, n, ., getFirstChild, (, ), ., getJSDocInfo, (, ), ;, if, (]
[info, =, n, ., getFirstChild, (, ), ., getJSDocInfo, (, ), ;, if, (, t, ., inGlobalScope, (, ), &&]
[info, =, n, ., getFirstChild, (, ), ., getJSDocInfo, (, ), ;, if, (, t, ., inGlobalScope, (, ), &&]
[n, ., getFirstChild, (, ), ., getJSDocInfo, (, ), ;, if, (, t, ., inGlobalScope, (, ), &&, info, !=]
[getFirstChild, (, ), ., getJSDocInfo, (, ), ;, if, (, t, ., inGlobalScope, (, ), &&, info, !=, null, &&]
[getFirstChild, (, ), ., getJSDocInfo, (, ), ;, if, (, t, ., inGlobalScope, (, ), &&, info, !=, null, &&]
[t, ., inGlobalScope, (, ), &&, info, !=, null, &&, info, ., hasTypedefType, (, ), ), {, String, name, =]
[t, ., inGlobalScope, (, ), &&, info, !=, null, &&, info, ., hasTypedefType, (, ), ), {, String, name, =]
[t, ., inGlobalScope, (, ), &&, info, !=, null, &&, info, ., hasTypedefType, (, ), ), {, String, name, =]
[hasTypedefType, (, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[hasTypedefType, (, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[), ), {, String, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, name, !=]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, ProvidedName, pn, =]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, ProvidedName, pn, =]
[), ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, ProvidedName, pn, =, providedNames, ., get, (]
[;, if, (, name, !=, null, ), {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (]
[;, if, (, name, !=, null, ), {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (]
[(, name, !=, null, ), {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=]
[null, ), {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {]
[null, ), {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {]
[pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (]
[providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (, n, ,]
[providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (, n, ,]
[}, }, }, }, private, void, handleCandidateProvideDefinition, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, }, }, }, private, void, handleCandidateProvideDefinition, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, String, name, =]
[Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, String, name, =, null, ;, if, (]
[Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, String, name, =, null, ;, if, (]
[Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, String, name, =, null, ;, if, (]
[t, ., inGlobalScope, (, ), ), {, String, name, =, null, ;, if, (, n, ., isName, (, ), &&]
[t, ., inGlobalScope, (, ), ), {, String, name, =, null, ;, if, (, n, ., isName, (, ), &&]
[String, name, =, null, ;, if, (, n, ., isName, (, ), &&, parent, ., isVar, (, ), ), {]
[=, null, ;, if, (, n, ., isName, (, ), &&, parent, ., isVar, (, ), ), {, name, =]
[=, null, ;, if, (, n, ., isName, (, ), &&, parent, ., isVar, (, ), ), {, name, =]
[&&, parent, ., isVar, (, ), ), {, name, =, n, ., getString, (, ), ;, }, else, if, (]
[&&, parent, ., isVar, (, ), ), {, name, =, n, ., getString, (, ), ;, }, else, if, (]
[&&, parent, ., isVar, (, ), ), {, name, =, n, ., getString, (, ), ;, }, else, if, (]
[), {, name, =, n, ., getString, (, ), ;, }, else, if, (, n, ., isAssign, (, ), &&]
[), {, name, =, n, ., getString, (, ), ;, }, else, if, (, n, ., isAssign, (, ), &&]
[(, ), ;, }, else, if, (, n, ., isAssign, (, ), &&, parent, ., isExprResult, (, ), ), {]
[;, }, else, if, (, n, ., isAssign, (, ), &&, parent, ., isExprResult, (, ), ), {, name, =]
[;, }, else, if, (, n, ., isAssign, (, ), &&, parent, ., isExprResult, (, ), ), {, name, =]
[;, }, else, if, (, n, ., isAssign, (, ), &&, parent, ., isExprResult, (, ), ), {, name, =]
[isExprResult, (, ), ), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, if, (]
[isExprResult, (, ), ), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, if, (]
[), ), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, if, (, name, !=]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, if, (, name, !=, null, ), {, if, (]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, if, (, name, !=, null, ), {, if, (]
[), ., getQualifiedName, (, ), ;, }, if, (, name, !=, null, ), {, if, (, parent, ., getBooleanProp, (]
[), ., getQualifiedName, (, ), ;, }, if, (, name, !=, null, ), {, if, (, parent, ., getBooleanProp, (]
[}, if, (, name, !=, null, ), {, if, (, parent, ., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {]
[(, name, !=, null, ), {, if, (, parent, ., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, processProvideFromPreviousPass, (]
[!=, null, ), {, if, (, parent, ., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, processProvideFromPreviousPass, (, t, ,]
[), {, if, (, parent, ., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, processProvideFromPreviousPass, (, t, ,, name, ,]
[., IS_NAMESPACE, ), ), {, processProvideFromPreviousPass, (, t, ,, name, ,, parent, ), ;, }, else, {, ProvidedName, pn, =]
[., IS_NAMESPACE, ), ), {, processProvideFromPreviousPass, (, t, ,, name, ,, parent, ), ;, }, else, {, ProvidedName, pn, =]
[{, processProvideFromPreviousPass, (, t, ,, name, ,, parent, ), ;, }, else, {, ProvidedName, pn, =, providedNames, ., get, (]
[name, ,, parent, ), ;, }, else, {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (]
[name, ,, parent, ), ;, }, else, {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (]
[parent, ), ;, }, else, {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=]
[}, else, {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {]
[}, else, {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {]
[pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (]
[providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (, parent, ,]
[providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (, parent, ,]
[;, }, }, }, }, }, private, void, processBaseClassCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, callee, =]
[;, }, }, }, }, }, private, void, processBaseClassCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, callee, =]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, callee, =, n, ., getFirstChild, (, ), ;, Node, thisArg, =]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, callee, =, n, ., getFirstChild, (, ), ;, Node, thisArg, =]
[Node, callee, =, n, ., getFirstChild, (, ), ;, Node, thisArg, =, callee, ., getNext, (, ), ;, if, (]
[Node, callee, =, n, ., getFirstChild, (, ), ;, Node, thisArg, =, callee, ., getNext, (, ), ;, if, (]
[Node, callee, =, n, ., getFirstChild, (, ), ;, Node, thisArg, =, callee, ., getNext, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ;, Node, thisArg, =, callee, ., getNext, (, ), ;, if, (, thisArg, ==]
[., getFirstChild, (, ), ;, Node, thisArg, =, callee, ., getNext, (, ), ;, if, (, thisArg, ==, null, ||]
[getFirstChild, (, ), ;, Node, thisArg, =, callee, ., getNext, (, ), ;, if, (, thisArg, ==, null, ||, !]
[getFirstChild, (, ), ;, Node, thisArg, =, callee, ., getNext, (, ), ;, if, (, thisArg, ==, null, ||, !]
[callee, ., getNext, (, ), ;, if, (, thisArg, ==, null, ||, !, thisArg, ., isThis, (, ), ), {]
[getNext, (, ), ;, if, (, thisArg, ==, null, ||, !, thisArg, ., isThis, (, ), ), {, reportBadBaseClassUse, (]
[), ;, if, (, thisArg, ==, null, ||, !, thisArg, ., isThis, (, ), ), {, reportBadBaseClassUse, (, t, ,]
[if, (, thisArg, ==, null, ||, !, thisArg, ., isThis, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,]
[isThis, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "First argument must be 'this'.", ), ;, return, ;, }, Node, enclosingFnNameNode, =]
[), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "First argument must be 'this'.", ), ;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (]
[t, ,, n, ,, "First argument must be 'this'.", ), ;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t, ), ;, if, (]
[t, ,, n, ,, "First argument must be 'this'.", ), ;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t, ), ;, if, (]
[n, ,, "First argument must be 'this'.", ), ;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t, ), ;, if, (, enclosingFnNameNode, ==]
[), ;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t, ), ;, if, (, enclosingFnNameNode, ==, null, ), {]
[return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t, ), ;, if, (, enclosingFnNameNode, ==, null, ), {, reportBadBaseClassUse, (]
[}, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t, ), ;, if, (, enclosingFnNameNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,]
[enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t, ), ;, if, (, enclosingFnNameNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,]
[enclosingFnNameNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find enclosing method.", ), ;, return, ;, }, String, enclosingQname, =]
[enclosingFnNameNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find enclosing method.", ), ;, return, ;, }, String, enclosingQname, =]
[,, n, ,, "Could not find enclosing method.", ), ;, return, ;, }, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName, (, ), ;, if, (]
[,, n, ,, "Could not find enclosing method.", ), ;, return, ;, }, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName, (, ), ;, if, (]
[,, n, ,, "Could not find enclosing method.", ), ;, return, ;, }, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName, (, ), ;, if, (]
[), ;, return, ;, }, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName, (, ), ;, if, (, enclosingQname, ., indexOf, (]
[;, }, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName, (, ), ;, if, (, enclosingQname, ., indexOf, (, ".prototype.", ), ==]
[}, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName, (, ), ;, if, (, enclosingQname, ., indexOf, (, ".prototype.", ), ==, -]
[getQualifiedName, (, ), ;, if, (, enclosingQname, ., indexOf, (, ".prototype.", ), ==, -, 1, ), {, Node, enclosingParent, =]
[getQualifiedName, (, ), ;, if, (, enclosingQname, ., indexOf, (, ".prototype.", ), ==, -, 1, ), {, Node, enclosingParent, =]
[(, ".prototype.", ), ==, -, 1, ), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =]
[(, ".prototype.", ), ==, -, 1, ), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =]
[".prototype.", ), ==, -, 1, ), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =, (]
[".prototype.", ), ==, -, 1, ), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =, (]
[".prototype.", ), ==, -, 1, ), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =, (]
[{, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =, (, enclosingParent, ., isAssign, (, ), ?]
[{, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =, (, enclosingParent, ., isAssign, (, ), ?]
[getParent, (, ), ;, Node, maybeInheritsExpr, =, (, enclosingParent, ., isAssign, (, ), ?, enclosingParent, ., getParent, (, ), :]
[isAssign, (, ), ?, enclosingParent, ., getParent, (, ), :, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode, =]
[enclosingParent, ., getParent, (, ), :, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (]
[enclosingParent, ., getParent, (, ), :, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (]
[enclosingParent, ., getParent, (, ), :, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (]
[enclosingParent, ., getParent, (, ), :, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (]
[getParent, (, ), :, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr, !=]
[), :, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr, !=, null, &&]
[), :, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr, !=, null, &&]
[(, ), ;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr, !=, null, &&, maybeInheritsExpr, ., isExprResult, (, ), &&]
[(, ), ;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr, !=, null, &&, maybeInheritsExpr, ., isExprResult, (, ), &&]
[(, ), ;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr, !=, null, &&, maybeInheritsExpr, ., isExprResult, (, ), &&]
[maybeInheritsExpr, ., isExprResult, (, ), &&, maybeInheritsExpr, ., getFirstChild, (, ), ., isCall, (, ), ), {, Node, callNode, =]
[maybeInheritsExpr, ., isExprResult, (, ), &&, maybeInheritsExpr, ., getFirstChild, (, ), ., isCall, (, ), ), {, Node, callNode, =]
[getFirstChild, (, ), ., isCall, (, ), ), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, ), ;, if, (]
[getFirstChild, (, ), ., isCall, (, ), ), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, ), ;, if, (]
[getFirstChild, (, ), ., isCall, (, ), ), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, ), ;, if, (]
[isCall, (, ), ), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, ), ;, if, (, "goog.inherits", ., equals, (]
[isCall, (, ), ), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, ), ;, if, (, "goog.inherits", ., equals, (]
[isCall, (, ), ), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, ), ;, if, (, "goog.inherits", ., equals, (]
[(, ), ;, if, (, "goog.inherits", ., equals, (, callNode, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&]
[(, ), ;, if, (, "goog.inherits", ., equals, (, callNode, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&]
[(, ), ;, if, (, "goog.inherits", ., equals, (, callNode, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&]
[getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, callNode, ., getLastChild, (, ), ., isQualifiedName, (, ), ), {]
[), ., getQualifiedName, (, ), ), &&, callNode, ., getLastChild, (, ), ., isQualifiedName, (, ), ), {, baseClassNode, =]
[), ., getQualifiedName, (, ), ), &&, callNode, ., getLastChild, (, ), ., isQualifiedName, (, ), ), {, baseClassNode, =]
[(, ), ., isQualifiedName, (, ), ), {, baseClassNode, =, callNode, ., getLastChild, (, ), ;, }, }, if, (]
[(, ), ., isQualifiedName, (, ), ), {, baseClassNode, =, callNode, ., getLastChild, (, ), ;, }, }, if, (]
[., isQualifiedName, (, ), ), {, baseClassNode, =, callNode, ., getLastChild, (, ), ;, }, }, if, (, baseClassNode, ==]
[), ), {, baseClassNode, =, callNode, ., getLastChild, (, ), ;, }, }, if, (, baseClassNode, ==, null, ), {]
[{, baseClassNode, =, callNode, ., getLastChild, (, ), ;, }, }, if, (, baseClassNode, ==, null, ), {, reportBadBaseClassUse, (]
[=, callNode, ., getLastChild, (, ), ;, }, }, if, (, baseClassNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,]
[., getLastChild, (, ), ;, }, }, if, (, baseClassNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,]
[}, if, (, baseClassNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find goog.inherits for base class", ), ;, return, ;, }]
[}, if, (, baseClassNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find goog.inherits for base class", ), ;, return, ;, }]
[==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find goog.inherits for base class", ), ;, return, ;, }, n, ., replaceChild, (]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find goog.inherits for base class", ), ;, return, ;, }, n, ., replaceChild, (, callee, ,]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find goog.inherits for base class", ), ;, return, ;, }, n, ., replaceChild, (, callee, ,]
[t, ,, n, ,, "Could not find goog.inherits for base class", ), ;, return, ;, }, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (]
[t, ,, n, ,, "Could not find goog.inherits for base class", ), ;, return, ;, }, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (]
[;, return, ;, }, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[;, return, ;, }, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (]
[replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.call", ,]
[replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.call", ,]
[(, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName, (, ), ), ,]
[., getCodingConvention, (, ), ,, String, ., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName, (, ), ), ,, callee, ,]
[,, String, ., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName, (, ), ), ,, callee, ,, "goog.base", ), ), ;]
[,, String, ., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName, (, ), ), ,, callee, ,, "goog.base", ), ), ;]
[), ,, callee, ,, "goog.base", ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =]
[), ,, callee, ,, "goog.base", ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =]
[compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, ), ;, if, (]
[compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, ), ;, if, (]
[compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, ), ;, if, (]
[reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, ), ;, if, (, methodNameNode, ==]
[), ;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, ), ;, if, (, methodNameNode, ==, null, ||]
[;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, ), ;, if, (, methodNameNode, ==, null, ||, !]
[;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, ), ;, if, (, methodNameNode, ==, null, ||, !]
[thisArg, ., getNext, (, ), ;, if, (, methodNameNode, ==, null, ||, !, methodNameNode, ., isString, (, ), ), {]
[getNext, (, ), ;, if, (, methodNameNode, ==, null, ||, !, methodNameNode, ., isString, (, ), ), {, reportBadBaseClassUse, (]
[), ;, if, (, methodNameNode, ==, null, ||, !, methodNameNode, ., isString, (, ), ), {, reportBadBaseClassUse, (, t, ,]
[if, (, methodNameNode, ==, null, ||, !, methodNameNode, ., isString, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,]
[isString, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Second argument must name a method.", ), ;, return, ;, }, String, methodName, =]
[isString, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Second argument must name a method.", ), ;, return, ;, }, String, methodName, =]
[n, ,, "Second argument must name a method.", ), ;, return, ;, }, String, methodName, =, methodNameNode, ., getString, (, ), ;, String, ending, =]
[n, ,, "Second argument must name a method.", ), ;, return, ;, }, String, methodName, =, methodNameNode, ., getString, (, ), ;, String, ending, =]
["Second argument must name a method.", ), ;, return, ;, }, String, methodName, =, methodNameNode, ., getString, (, ), ;, String, ending, =, ".prototype.", +]
[;, }, String, methodName, =, methodNameNode, ., getString, (, ), ;, String, ending, =, ".prototype.", +, methodName, ;, if, (]
[;, }, String, methodName, =, methodNameNode, ., getString, (, ), ;, String, ending, =, ".prototype.", +, methodName, ;, if, (]
[;, }, String, methodName, =, methodNameNode, ., getString, (, ), ;, String, ending, =, ".prototype.", +, methodName, ;, if, (]
[String, methodName, =, methodNameNode, ., getString, (, ), ;, String, ending, =, ".prototype.", +, methodName, ;, if, (, enclosingQname, ==]
[=, methodNameNode, ., getString, (, ), ;, String, ending, =, ".prototype.", +, methodName, ;, if, (, enclosingQname, ==, null, ||]
[methodNameNode, ., getString, (, ), ;, String, ending, =, ".prototype.", +, methodName, ;, if, (, enclosingQname, ==, null, ||, !]
[methodNameNode, ., getString, (, ), ;, String, ending, =, ".prototype.", +, methodName, ;, if, (, enclosingQname, ==, null, ||, !]
[), ;, String, ending, =, ".prototype.", +, methodName, ;, if, (, enclosingQname, ==, null, ||, !, enclosingQname, ., endsWith, (]
[=, ".prototype.", +, methodName, ;, if, (, enclosingQname, ==, null, ||, !, enclosingQname, ., endsWith, (, ending, ), ), {]
[+, methodName, ;, if, (, enclosingQname, ==, null, ||, !, enclosingQname, ., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (]
[;, if, (, enclosingQname, ==, null, ||, !, enclosingQname, ., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (, t, ,]
[(, enclosingQname, ==, null, ||, !, enclosingQname, ., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,]
[(, enclosingQname, ==, null, ||, !, enclosingQname, ., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,]
[==, null, ||, !, enclosingQname, ., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +]
[), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +, methodName, ), ;, return, ;, }, Node, className, =]
[), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +, methodName, ), ;, return, ;, }, Node, className, =]
[), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +, methodName, ), ;, return, ;, }, Node, className, =]
[+, methodName, ), ;, return, ;, }, Node, className, =, enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, ), ;]
[+, methodName, ), ;, return, ;, }, Node, className, =, enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, ), ;]
[return, ;, }, Node, className, =, enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, n, ., replaceChild, (]
[}, Node, className, =, enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, n, ., replaceChild, (, callee, ,]
[}, Node, className, =, enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, n, ., replaceChild, (, callee, ,]
[enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (]
[enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (]
[getFirstChild, (, ), ;, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[getFirstChild, (, ), ;, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (]
[replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.superClass_.%s.call", ,]
[replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.superClass_.%s.call", ,]
[newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, ), ,]
[., getCodingConvention, (, ), ,, String, ., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, ), ,, methodName, ), ,]
[(, ), ,, String, ., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, ), ,, methodName, ), ,, callee, ,]
[., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, ), ,, methodName, ), ,, callee, ,, "goog.base", ), ), ;]
[., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, ), ,, methodName, ), ,, callee, ,, "goog.base", ), ), ;]
[,, className, ., getQualifiedName, (, ), ,, methodName, ), ,, callee, ,, "goog.base", ), ), ;, n, ., removeChild, (]
[getQualifiedName, (, ), ,, methodName, ), ,, callee, ,, "goog.base", ), ), ;, n, ., removeChild, (, methodNameNode, ), ;]
[getQualifiedName, (, ), ,, methodName, ), ,, callee, ,, "goog.base", ), ), ;, n, ., removeChild, (, methodNameNode, ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getEnclosingDeclNameNode, (, NodeTraversal, t, ), {, Node, scopeRoot, =]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getEnclosingDeclNameNode, (, NodeTraversal, t, ), {, Node, scopeRoot, =]
[}, private, Node, getEnclosingDeclNameNode, (, NodeTraversal, t, ), {, Node, scopeRoot, =, t, ., getScopeRoot, (, ), ;, if, (]
[}, private, Node, getEnclosingDeclNameNode, (, NodeTraversal, t, ), {, Node, scopeRoot, =, t, ., getScopeRoot, (, ), ;, if, (]
[(, NodeTraversal, t, ), {, Node, scopeRoot, =, t, ., getScopeRoot, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (]
[Node, scopeRoot, =, t, ., getScopeRoot, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, scopeRoot, ), ), {, return]
[Node, scopeRoot, =, t, ., getScopeRoot, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, scopeRoot, ), ), {, return]
[., isFunctionDeclaration, (, scopeRoot, ), ), {, return, scopeRoot, ., getFirstChild, (, ), ;, }, else, {, Node, parent, =]
[., isFunctionDeclaration, (, scopeRoot, ), ), {, return, scopeRoot, ., getFirstChild, (, ), ;, }, else, {, Node, parent, =]
[scopeRoot, ., getFirstChild, (, ), ;, }, else, {, Node, parent, =, scopeRoot, ., getParent, (, ), ;, if, (]
[scopeRoot, ., getFirstChild, (, ), ;, }, else, {, Node, parent, =, scopeRoot, ., getParent, (, ), ;, if, (]
[getFirstChild, (, ), ;, }, else, {, Node, parent, =, scopeRoot, ., getParent, (, ), ;, if, (, parent, !=]
[else, {, Node, parent, =, scopeRoot, ., getParent, (, ), ;, if, (, parent, !=, null, ), {, if, (]
[else, {, Node, parent, =, scopeRoot, ., getParent, (, ), ;, if, (, parent, !=, null, ), {, if, (]
[else, {, Node, parent, =, scopeRoot, ., getParent, (, ), ;, if, (, parent, !=, null, ), {, if, (]
[., getParent, (, ), ;, if, (, parent, !=, null, ), {, if, (, parent, ., isAssign, (, ), ||]
[., getParent, (, ), ;, if, (, parent, !=, null, ), {, if, (, parent, ., isAssign, (, ), ||]
[., getParent, (, ), ;, if, (, parent, !=, null, ), {, if, (, parent, ., isAssign, (, ), ||]
[., getParent, (, ), ;, if, (, parent, !=, null, ), {, if, (, parent, ., isAssign, (, ), ||]
[(, parent, !=, null, ), {, if, (, parent, ., isAssign, (, ), ||, parent, ., getLastChild, (, ), ==]
[!=, null, ), {, if, (, parent, ., isAssign, (, ), ||, parent, ., getLastChild, (, ), ==, scopeRoot, &&]
[!=, null, ), {, if, (, parent, ., isAssign, (, ), ||, parent, ., getLastChild, (, ), ==, scopeRoot, &&]
[!=, null, ), {, if, (, parent, ., isAssign, (, ), ||, parent, ., getLastChild, (, ), ==, scopeRoot, &&]
[parent, ., getLastChild, (, ), ==, scopeRoot, &&, parent, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, return]
[parent, ., getLastChild, (, ), ==, scopeRoot, &&, parent, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, return]
[getFirstChild, (, ), ., isQualifiedName, (, ), ), {, return, parent, ., getFirstChild, (, ), ;, }, else, if, (]
[getFirstChild, (, ), ., isQualifiedName, (, ), ), {, return, parent, ., getFirstChild, (, ), ;, }, else, if, (]
[{, return, parent, ., getFirstChild, (, ), ;, }, else, if, (, parent, ., isName, (, ), ), {, return]
[), ;, }, else, if, (, parent, ., isName, (, ), ), {, return, parent, ;, }, }, }, return]
[}, }, return, null, ;, }, private, void, reportBadBaseClassUse, (, NodeTraversal, t, ,, Node, n, ,, String, extraMessage, ), {]
[}, }, return, null, ;, }, private, void, reportBadBaseClassUse, (, NodeTraversal, t, ,, Node, n, ,, String, extraMessage, ), {]
[;, }, private, void, reportBadBaseClassUse, (, NodeTraversal, t, ,, Node, n, ,, String, extraMessage, ), {, compiler, ., report, (]
[;, }, private, void, reportBadBaseClassUse, (, NodeTraversal, t, ,, Node, n, ,, String, extraMessage, ), {, compiler, ., report, (]
[reportBadBaseClassUse, (, NodeTraversal, t, ,, Node, n, ,, String, extraMessage, ), {, compiler, ., report, (, t, ., makeError, (]
[NodeTraversal, t, ,, Node, n, ,, String, extraMessage, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[,, Node, n, ,, String, extraMessage, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, BASE_CLASS_ERROR, ,]
[), ), ;, }, private, void, processProvideFromPreviousPass, (, NodeTraversal, t, ,, String, name, ,, Node, parent, ), {, if, (]
[), ;, }, private, void, processProvideFromPreviousPass, (, NodeTraversal, t, ,, String, name, ,, Node, parent, ), {, if, (, !]
[), ;, }, private, void, processProvideFromPreviousPass, (, NodeTraversal, t, ,, String, name, ,, Node, parent, ), {, if, (, !]
[void, processProvideFromPreviousPass, (, NodeTraversal, t, ,, String, name, ,, Node, parent, ), {, if, (, !, providedNames, ., containsKey, (]
[name, ,, Node, parent, ), {, if, (, !, providedNames, ., containsKey, (, name, ), ), {, Node, expr, =]
[parent, ), {, if, (, !, providedNames, ., containsKey, (, name, ), ), {, Node, expr, =, new, Node, (]
[parent, ), {, if, (, !, providedNames, ., containsKey, (, name, ), ), {, Node, expr, =, new, Node, (]
[!, providedNames, ., containsKey, (, name, ), ), {, Node, expr, =, new, Node, (, Token, ., EXPR_RESULT, ), ;]
[!, providedNames, ., containsKey, (, name, ), ), {, Node, expr, =, new, Node, (, Token, ., EXPR_RESULT, ), ;]
[(, name, ), ), {, Node, expr, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, expr, ., copyInformationFromForTree, (]
[), {, Node, expr, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, expr, ., copyInformationFromForTree, (, parent, ), ;]
[), {, Node, expr, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, expr, ., copyInformationFromForTree, (, parent, ), ;]
[), {, Node, expr, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, expr, ., copyInformationFromForTree, (, parent, ), ;]
[Token, ., EXPR_RESULT, ), ;, expr, ., copyInformationFromForTree, (, parent, ), ;, parent, ., getParent, (, ), ., addChildBefore, (]
[EXPR_RESULT, ), ;, expr, ., copyInformationFromForTree, (, parent, ), ;, parent, ., getParent, (, ), ., addChildBefore, (, expr, ,]
[expr, ., copyInformationFromForTree, (, parent, ), ;, parent, ., getParent, (, ), ., addChildBefore, (, expr, ,, parent, ), ;]
[expr, ., copyInformationFromForTree, (, parent, ), ;, parent, ., getParent, (, ), ., addChildBefore, (, expr, ,, parent, ), ;]
[getParent, (, ), ., addChildBefore, (, expr, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =]
[getParent, (, ), ., addChildBefore, (, expr, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =]
[expr, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;]
[parent, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, registerAnyProvidedPrefixes, (]
[;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, registerAnyProvidedPrefixes, (, name, ,]
[., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, registerAnyProvidedPrefixes, (, name, ,, expr, ,]
[module, =, t, ., getModule, (, ), ;, registerAnyProvidedPrefixes, (, name, ,, expr, ,, module, ), ;, ProvidedName, provided, =]
[., getModule, (, ), ;, registerAnyProvidedPrefixes, (, name, ,, expr, ,, module, ), ;, ProvidedName, provided, =, new, ProvidedName, (]
[(, ), ;, registerAnyProvidedPrefixes, (, name, ,, expr, ,, module, ), ;, ProvidedName, provided, =, new, ProvidedName, (, name, ,]
[;, registerAnyProvidedPrefixes, (, name, ,, expr, ,, module, ), ;, ProvidedName, provided, =, new, ProvidedName, (, name, ,, expr, ,]
[(, name, ,, expr, ,, module, ), ;, ProvidedName, provided, =, new, ProvidedName, (, name, ,, expr, ,, module, ,]
[expr, ,, module, ), ;, ProvidedName, provided, =, new, ProvidedName, (, name, ,, expr, ,, module, ,, true, ), ;]
[expr, ,, module, ), ;, ProvidedName, provided, =, new, ProvidedName, (, name, ,, expr, ,, module, ,, true, ), ;]
[;, ProvidedName, provided, =, new, ProvidedName, (, name, ,, expr, ,, module, ,, true, ), ;, providedNames, ., put, (]
[provided, =, new, ProvidedName, (, name, ,, expr, ,, module, ,, true, ), ;, providedNames, ., put, (, name, ,]
[ProvidedName, (, name, ,, expr, ,, module, ,, true, ), ;, providedNames, ., put, (, name, ,, provided, ), ;]
[ProvidedName, (, name, ,, expr, ,, module, ,, true, ), ;, providedNames, ., put, (, name, ,, provided, ), ;]
[expr, ,, module, ,, true, ), ;, providedNames, ., put, (, name, ,, provided, ), ;, provided, ., addDefinition, (]
[module, ,, true, ), ;, providedNames, ., put, (, name, ,, provided, ), ;, provided, ., addDefinition, (, parent, ,]
[(, name, ,, provided, ), ;, provided, ., addDefinition, (, parent, ,, module, ), ;, }, else, {, if, (]
[,, provided, ), ;, provided, ., addDefinition, (, parent, ,, module, ), ;, }, else, {, if, (, isNamespacePlaceholder, (]
[provided, ., addDefinition, (, parent, ,, module, ), ;, }, else, {, if, (, isNamespacePlaceholder, (, parent, ), ), {]
[provided, ., addDefinition, (, parent, ,, module, ), ;, }, else, {, if, (, isNamespacePlaceholder, (, parent, ), ), {]
[provided, ., addDefinition, (, parent, ,, module, ), ;, }, else, {, if, (, isNamespacePlaceholder, (, parent, ), ), {]
[;, }, else, {, if, (, isNamespacePlaceholder, (, parent, ), ), {, parent, ., getParent, (, ), ., removeChild, (]
[{, if, (, isNamespacePlaceholder, (, parent, ), ), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;]
[{, if, (, isNamespacePlaceholder, (, parent, ), ), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;]
[}, }, }, private, void, processSetCssNameMapping, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, left, =]
[}, }, }, private, void, processSetCssNameMapping, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, left, =]
[,, Node, n, ,, Node, parent, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, arg, =]
[,, Node, n, ,, Node, parent, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, arg, =]
[Node, left, =, n, ., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifySetCssNameMapping, (]
[., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifySetCssNameMapping, (, t, ,]
[(, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifySetCssNameMapping, (, t, ,, left, ,]
[(, verifySetCssNameMapping, (, t, ,, left, ,, arg, ), ), {, final, Map, <, String, ,, String, >, cssNames, =]
[(, verifySetCssNameMapping, (, t, ,, left, ,, arg, ), ), {, final, Map, <, String, ,, String, >, cssNames, =]
[final, Map, <, String, ,, String, >, cssNames, =, Maps, ., newHashMap, (, ), ;, for, (, Node, key, =]
[final, Map, <, String, ,, String, >, cssNames, =, Maps, ., newHashMap, (, ), ;, for, (, Node, key, =]
[>, cssNames, =, Maps, ., newHashMap, (, ), ;, for, (, Node, key, =, arg, ., getFirstChild, (, ), ;]
[>, cssNames, =, Maps, ., newHashMap, (, ), ;, for, (, Node, key, =, arg, ., getFirstChild, (, ), ;]
[=, Maps, ., newHashMap, (, ), ;, for, (, Node, key, =, arg, ., getFirstChild, (, ), ;, key, !=]
[., newHashMap, (, ), ;, for, (, Node, key, =, arg, ., getFirstChild, (, ), ;, key, !=, null, ;]
[(, ), ;, for, (, Node, key, =, arg, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[(, ), ;, for, (, Node, key, =, arg, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value, =]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value, =]
[key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, if, (]
[key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, if, (]
[key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, if, (]
[=, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, if, (, !]
[=, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, if, (, !]
[), {, Node, value, =, key, ., getFirstChild, (, ), ;, if, (, !, key, ., isStringKey, (, ), ||]
[), {, Node, value, =, key, ., getFirstChild, (, ), ;, if, (, !, key, ., isStringKey, (, ), ||]
[Node, value, =, key, ., getFirstChild, (, ), ;, if, (, !, key, ., isStringKey, (, ), ||, value, ==]
[=, key, ., getFirstChild, (, ), ;, if, (, !, key, ., isStringKey, (, ), ||, value, ==, null, ||]
[key, ., getFirstChild, (, ), ;, if, (, !, key, ., isStringKey, (, ), ||, value, ==, null, ||, !]
[key, ., getFirstChild, (, ), ;, if, (, !, key, ., isStringKey, (, ), ||, value, ==, null, ||, !]
[(, !, key, ., isStringKey, (, ), ||, value, ==, null, ||, !, value, ., isString, (, ), ), {]
[(, !, key, ., isStringKey, (, ), ||, value, ==, null, ||, !, value, ., isString, (, ), ), {]
[isStringKey, (, ), ||, value, ==, null, ||, !, value, ., isString, (, ), ), {, compiler, ., report, (]
[isStringKey, (, ), ||, value, ==, null, ||, !, value, ., isString, (, ), ), {, compiler, ., report, (]
[value, ==, null, ||, !, value, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[null, ||, !, value, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }]
[), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }]
[., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }, cssNames, ., put, (]
[., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }, cssNames, ., put, (]
[(, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }, cssNames, ., put, (, key, ., getString, (, ), ,]
[(, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }, cssNames, ., put, (, key, ., getString, (, ), ,]
[., put, (, key, ., getString, (, ), ,, value, ., getString, (, ), ), ;, }, String, styleStr, =]
[., getString, (, ), ,, value, ., getString, (, ), ), ;, }, String, styleStr, =, "BY_PART", ;, if, (]
[., getString, (, ), ,, value, ., getString, (, ), ), ;, }, String, styleStr, =, "BY_PART", ;, if, (]
[., getString, (, ), ,, value, ., getString, (, ), ), ;, }, String, styleStr, =, "BY_PART", ;, if, (]
[., getString, (, ), ), ;, }, String, styleStr, =, "BY_PART", ;, if, (, arg, ., getNext, (, ), !=]
[), ), ;, }, String, styleStr, =, "BY_PART", ;, if, (, arg, ., getNext, (, ), !=, null, ), {]
[;, }, String, styleStr, =, "BY_PART", ;, if, (, arg, ., getNext, (, ), !=, null, ), {, styleStr, =]
[;, }, String, styleStr, =, "BY_PART", ;, if, (, arg, ., getNext, (, ), !=, null, ), {, styleStr, =]
[;, }, String, styleStr, =, "BY_PART", ;, if, (, arg, ., getNext, (, ), !=, null, ), {, styleStr, =]
[=, arg, ., getNext, (, ), ., getString, (, ), ;, }, final, CssRenamingMap, ., Style, style, ;, try, {]
[., getNext, (, ), ., getString, (, ), ;, }, final, CssRenamingMap, ., Style, style, ;, try, {, style, =]
[., getNext, (, ), ., getString, (, ), ;, }, final, CssRenamingMap, ., Style, style, ;, try, {, style, =]
[., getNext, (, ), ., getString, (, ), ;, }, final, CssRenamingMap, ., Style, style, ;, try, {, style, =]
[(, ), ;, }, final, CssRenamingMap, ., Style, style, ;, try, {, style, =, CssRenamingMap, ., Style, ., valueOf, (]
[try, {, style, =, CssRenamingMap, ., Style, ., valueOf, (, styleStr, ), ;, }, catch, (, IllegalArgumentException, e, ), {]
[try, {, style, =, CssRenamingMap, ., Style, ., valueOf, (, styleStr, ), ;, }, catch, (, IllegalArgumentException, e, ), {]
[CssRenamingMap, ., Style, ., valueOf, (, styleStr, ), ;, }, catch, (, IllegalArgumentException, e, ), {, compiler, ., report, (]
[CssRenamingMap, ., Style, ., valueOf, (, styleStr, ), ;, }, catch, (, IllegalArgumentException, e, ), {, compiler, ., report, (]
[valueOf, (, styleStr, ), ;, }, catch, (, IllegalArgumentException, e, ), {, compiler, ., report, (, t, ., makeError, (]
[styleStr, ), ;, }, catch, (, IllegalArgumentException, e, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[;, }, catch, (, IllegalArgumentException, e, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_STYLE_ERROR, ,]
[., report, (, t, ., makeError, (, n, ,, INVALID_STYLE_ERROR, ,, styleStr, ), ), ;, return, ;, }, if, (]
[., report, (, t, ., makeError, (, n, ,, INVALID_STYLE_ERROR, ,, styleStr, ), ), ;, return, ;, }, if, (]
[(, t, ., makeError, (, n, ,, INVALID_STYLE_ERROR, ,, styleStr, ), ), ;, return, ;, }, if, (, style, ==]
[(, t, ., makeError, (, n, ,, INVALID_STYLE_ERROR, ,, styleStr, ), ), ;, return, ;, }, if, (, style, ==]
[(, t, ., makeError, (, n, ,, INVALID_STYLE_ERROR, ,, styleStr, ), ), ;, return, ;, }, if, (, style, ==]
[return, ;, }, if, (, style, ==, CssRenamingMap, ., Style, ., BY_PART, ), {, List, <, String, >, errors, =]
[return, ;, }, if, (, style, ==, CssRenamingMap, ., Style, ., BY_PART, ), {, List, <, String, >, errors, =]
[BY_PART, ), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, for, (, String, key, :]
[BY_PART, ), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, for, (, String, key, :]
[Lists, ., newArrayList, (, ), ;, for, (, String, key, :, cssNames, ., keySet, (, ), ), {, if, (]
[Lists, ., newArrayList, (, ), ;, for, (, String, key, :, cssNames, ., keySet, (, ), ), {, if, (]
[), ;, for, (, String, key, :, cssNames, ., keySet, (, ), ), {, if, (, key, ., contains, (]
[String, key, :, cssNames, ., keySet, (, ), ), {, if, (, key, ., contains, (, "-", ), ), {]
[String, key, :, cssNames, ., keySet, (, ), ), {, if, (, key, ., contains, (, "-", ), ), {]
[., keySet, (, ), ), {, if, (, key, ., contains, (, "-", ), ), {, errors, ., add, (]
[(, key, ., contains, (, "-", ), ), {, errors, ., add, (, key, ), ;, }, }, if, (]
[(, key, ., contains, (, "-", ), ), {, errors, ., add, (, key, ), ;, }, }, if, (]
[(, key, ., contains, (, "-", ), ), {, errors, ., add, (, key, ), ;, }, }, if, (]
[), ), {, errors, ., add, (, key, ), ;, }, }, if, (, errors, ., size, (, ), !=]
[errors, ., add, (, key, ), ;, }, }, if, (, errors, ., size, (, ), !=, 0, ), {]
[errors, ., add, (, key, ), ;, }, }, if, (, errors, ., size, (, ), !=, 0, ), {]
[key, ), ;, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (]
[key, ), ;, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (]
[}, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (, t, ., makeError, (]
[(, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[., size, (, ), !=, 0, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,]
[., size, (, ), !=, 0, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,]
[., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }, }, else, if, (]
[., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }, }, else, if, (]
[(, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }, }, else, if, (, style, ==]
[(, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }, }, else, if, (, style, ==]
[(, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }, }, else, if, (, style, ==]
[}, }, else, if, (, style, ==, CssRenamingMap, ., Style, ., BY_WHOLE, ), {, List, <, String, >, errors, =]
[}, }, else, if, (, style, ==, CssRenamingMap, ., Style, ., BY_WHOLE, ), {, List, <, String, >, errors, =]
[errors, =, Lists, ., newArrayList, (, ), ;, for, (, Map, ., Entry, <, String, ,, String, >, b, :]
[errors, =, Lists, ., newArrayList, (, ), ;, for, (, Map, ., Entry, <, String, ,, String, >, b, :]
[(, Map, ., Entry, <, String, ,, String, >, b, :, cssNames, ., entrySet, (, ), ), {, if, (]
[(, Map, ., Entry, <, String, ,, String, >, b, :, cssNames, ., entrySet, (, ), ), {, if, (]
[(, Map, ., Entry, <, String, ,, String, >, b, :, cssNames, ., entrySet, (, ), ), {, if, (]
[(, Map, ., Entry, <, String, ,, String, >, b, :, cssNames, ., entrySet, (, ), ), {, if, (]
[:, cssNames, ., entrySet, (, ), ), {, if, (, b, ., getKey, (, ), ., length, (, ), >]
[length, (, ), >, 10, ), continue, ;, for, (, Map, ., Entry, <, String, ,, String, >, a, :]
[length, (, ), >, 10, ), continue, ;, for, (, Map, ., Entry, <, String, ,, String, >, a, :]
[Map, ., Entry, <, String, ,, String, >, a, :, cssNames, ., entrySet, (, ), ), {, String, combined, =]
[Map, ., Entry, <, String, ,, String, >, a, :, cssNames, ., entrySet, (, ), ), {, String, combined, =]
[String, ,, String, >, a, :, cssNames, ., entrySet, (, ), ), {, String, combined, =, cssNames, ., get, (]
[String, ,, String, >, a, :, cssNames, ., entrySet, (, ), ), {, String, combined, =, cssNames, ., get, (]
[String, ,, String, >, a, :, cssNames, ., entrySet, (, ), ), {, String, combined, =, cssNames, ., get, (]
[String, ,, String, >, a, :, cssNames, ., entrySet, (, ), ), {, String, combined, =, cssNames, ., get, (]
[cssNames, ., entrySet, (, ), ), {, String, combined, =, cssNames, ., get, (, a, ., getKey, (, ), +]
[entrySet, (, ), ), {, String, combined, =, cssNames, ., get, (, a, ., getKey, (, ), +, "-", +]
[entrySet, (, ), ), {, String, combined, =, cssNames, ., get, (, a, ., getKey, (, ), +, "-", +]
[., get, (, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), ), ;, if, (]
[., get, (, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), ), ;, if, (]
[., get, (, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), ), ;, if, (]
[(, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), ), ;, if, (, combined, !=]
[., getKey, (, ), +, "-", +, b, ., getKey, (, ), ), ;, if, (, combined, !=, null, &&]
[getKey, (, ), +, "-", +, b, ., getKey, (, ), ), ;, if, (, combined, !=, null, &&, !]
[getKey, (, ), +, "-", +, b, ., getKey, (, ), ), ;, if, (, combined, !=, null, &&, !]
["-", +, b, ., getKey, (, ), ), ;, if, (, combined, !=, null, &&, !, combined, ., equals, (]
["-", +, b, ., getKey, (, ), ), ;, if, (, combined, !=, null, &&, !, combined, ., equals, (]
["-", +, b, ., getKey, (, ), ), ;, if, (, combined, !=, null, &&, !, combined, ., equals, (]
["-", +, b, ., getKey, (, ), ), ;, if, (, combined, !=, null, &&, !, combined, ., equals, (]
[), ), ;, if, (, combined, !=, null, &&, !, combined, ., equals, (, a, ., getValue, (, ), +]
[;, if, (, combined, !=, null, &&, !, combined, ., equals, (, a, ., getValue, (, ), +, "-", +]
[;, if, (, combined, !=, null, &&, !, combined, ., equals, (, a, ., getValue, (, ), +, "-", +]
[combined, ., equals, (, a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {]
[combined, ., equals, (, a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {]
[a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (]
[a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (]
[a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (]
[a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (]
[a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (]
[a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (]
[a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (]
[a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (]
[a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (]
[getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (, "map(", +]
[getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (, "map(", +]
[b, ., getValue, (, ), ), ), {, errors, ., add, (, "map(", +, a, ., getKey, (, ), +]
[getValue, (, ), ), ), {, errors, ., add, (, "map(", +, a, ., getKey, (, ), +, "-", +]
[getValue, (, ), ), ), {, errors, ., add, (, "map(", +, a, ., getKey, (, ), +, "-", +]
[errors, ., add, (, "map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), +]
[add, (, "map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map(", +]
[add, (, "map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map(", +]
[getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +]
[), +, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +]
[), +, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +]
[getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +, b, ., getKey, (, ), +]
[getKey, (, ), +, ")-map(", +, b, ., getKey, (, ), +, ")", ), ;, }, }, }, if, (]
[getKey, (, ), +, ")-map(", +, b, ., getKey, (, ), +, ")", ), ;, }, }, }, if, (]
[getKey, (, ), +, ")-map(", +, b, ., getKey, (, ), +, ")", ), ;, }, }, }, if, (]
[b, ., getKey, (, ), +, ")", ), ;, }, }, }, if, (, errors, ., size, (, ), !=]
[(, ), +, ")", ), ;, }, }, }, if, (, errors, ., size, (, ), !=, 0, ), {]
[(, ), +, ")", ), ;, }, }, }, if, (, errors, ., size, (, ), !=, 0, ), {]
[), ;, }, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (]
[), ;, }, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (]
[}, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (, t, ., makeError, (]
[(, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[., size, (, ), !=, 0, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,]
[., size, (, ), !=, 0, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,]
[., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }, }, CssRenamingMap, cssRenamingMap, =]
[CssRenamingMap, cssRenamingMap, =, new, CssRenamingMap, (, ), {, @, Override, public, String, get, (, String, value, ), {, if, (]
[CssRenamingMap, cssRenamingMap, =, new, CssRenamingMap, (, ), {, @, Override, public, String, get, (, String, value, ), {, if, (]
[CssRenamingMap, (, ), {, @, Override, public, String, get, (, String, value, ), {, if, (, cssNames, ., containsKey, (]
[Override, public, String, get, (, String, value, ), {, if, (, cssNames, ., containsKey, (, value, ), ), {, return]
[Override, public, String, get, (, String, value, ), {, if, (, cssNames, ., containsKey, (, value, ), ), {, return]
[(, String, value, ), {, if, (, cssNames, ., containsKey, (, value, ), ), {, return, cssNames, ., get, (]
[cssNames, ., containsKey, (, value, ), ), {, return, cssNames, ., get, (, value, ), ;, }, else, {, return]
[;, }, else, {, return, value, ;, }, }, @, Override, public, CssRenamingMap, ., Style, getStyle, (, ), {, return]
[value, ;, }, }, @, Override, public, CssRenamingMap, ., Style, getStyle, (, ), {, return, style, ;, }, }, ;]
[value, ;, }, }, @, Override, public, CssRenamingMap, ., Style, getStyle, (, ), {, return, style, ;, }, }, ;]
[@, Override, public, CssRenamingMap, ., Style, getStyle, (, ), {, return, style, ;, }, }, ;, compiler, ., setCssRenamingMap, (]
[CssRenamingMap, ., Style, getStyle, (, ), {, return, style, ;, }, }, ;, compiler, ., setCssRenamingMap, (, cssRenamingMap, ), ;]
[CssRenamingMap, ., Style, getStyle, (, ), {, return, style, ;, }, }, ;, compiler, ., setCssRenamingMap, (, cssRenamingMap, ), ;]
[CssRenamingMap, ., Style, getStyle, (, ), {, return, style, ;, }, }, ;, compiler, ., setCssRenamingMap, (, cssRenamingMap, ), ;]
[style, ;, }, }, ;, compiler, ., setCssRenamingMap, (, cssRenamingMap, ), ;, parent, ., getParent, (, ), ., removeChild, (]
[}, ;, compiler, ., setCssRenamingMap, (, cssRenamingMap, ), ;, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;]
[}, ;, compiler, ., setCssRenamingMap, (, cssRenamingMap, ), ;, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;]
[), ;, }, }, private, boolean, verifyProvide, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, if, (]
[;, }, }, private, boolean, verifyProvide, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, if, (, !]
[}, private, boolean, verifyProvide, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, if, (, !, verifyArgument, (]
[boolean, verifyProvide, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, if, (, !, verifyArgument, (, t, ,]
[(, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, if, (, !, verifyArgument, (, t, ,, methodName, ,]
[methodName, ,, Node, arg, ), {, if, (, !, verifyArgument, (, t, ,, methodName, ,, arg, ), ), {, return]
[!, verifyArgument, (, t, ,, methodName, ,, arg, ), ), {, return, false, ;, }, for, (, String, part, :]
[!, verifyArgument, (, t, ,, methodName, ,, arg, ), ), {, return, false, ;, }, for, (, String, part, :]
[!, verifyArgument, (, t, ,, methodName, ,, arg, ), ), {, return, false, ;, }, for, (, String, part, :]
[), ), {, return, false, ;, }, for, (, String, part, :, arg, ., getString, (, ), ., split, (]
[}, for, (, String, part, :, arg, ., getString, (, ), ., split, (, "\\.", ), ), {, if, (]
[for, (, String, part, :, arg, ., getString, (, ), ., split, (, "\\.", ), ), {, if, (, !]
[for, (, String, part, :, arg, ., getString, (, ), ., split, (, "\\.", ), ), {, if, (, !]
[:, arg, ., getString, (, ), ., split, (, "\\.", ), ), {, if, (, !, NodeUtil, ., isValidPropertyName, (]
[(, ), ., split, (, "\\.", ), ), {, if, (, !, NodeUtil, ., isValidPropertyName, (, part, ), ), {]
[(, ), ., split, (, "\\.", ), ), {, if, (, !, NodeUtil, ., isValidPropertyName, (, part, ), ), {]
[(, "\\.", ), ), {, if, (, !, NodeUtil, ., isValidPropertyName, (, part, ), ), {, compiler, ., report, (]
[(, "\\.", ), ), {, if, (, !, NodeUtil, ., isValidPropertyName, (, part, ), ), {, compiler, ., report, (]
[{, if, (, !, NodeUtil, ., isValidPropertyName, (, part, ), ), {, compiler, ., report, (, t, ., makeError, (]
[(, !, NodeUtil, ., isValidPropertyName, (, part, ), ), {, compiler, ., report, (, t, ., makeError, (, arg, ,]
[NodeUtil, ., isValidPropertyName, (, part, ), ), {, compiler, ., report, (, t, ., makeError, (, arg, ,, INVALID_PROVIDE_ERROR, ,]
[), ), {, compiler, ., report, (, t, ., makeError, (, arg, ,, INVALID_PROVIDE_ERROR, ,, part, ), ), ;, return]
[report, (, t, ., makeError, (, arg, ,, INVALID_PROVIDE_ERROR, ,, part, ), ), ;, return, false, ;, }, }, return]
[}, return, true, ;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, return]
[true, ;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, return, verifyArgument, (]
[}, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, return, verifyArgument, (, t, ,]
[boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, return, verifyArgument, (, t, ,, methodName, ,]
[(, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, return, verifyArgument, (, t, ,, methodName, ,, arg, ,]
[(, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, return, verifyArgument, (, t, ,, methodName, ,, arg, ,]
[private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ,, int, desiredType, ), {, DiagnosticType, diagnostic, =]
[NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ,, int, desiredType, ), {, DiagnosticType, diagnostic, =, null, ;, if, (]
[NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ,, int, desiredType, ), {, DiagnosticType, diagnostic, =, null, ;, if, (]
[,, Node, methodName, ,, Node, arg, ,, int, desiredType, ), {, DiagnosticType, diagnostic, =, null, ;, if, (, arg, ==]
[,, Node, arg, ,, int, desiredType, ), {, DiagnosticType, diagnostic, =, null, ;, if, (, arg, ==, null, ), {]
[arg, ,, int, desiredType, ), {, DiagnosticType, diagnostic, =, null, ;, if, (, arg, ==, null, ), {, diagnostic, =]
[DiagnosticType, diagnostic, =, null, ;, if, (, arg, ==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (]
[DiagnosticType, diagnostic, =, null, ;, if, (, arg, ==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (]
[DiagnosticType, diagnostic, =, null, ;, if, (, arg, ==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (]
[(, arg, ==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getType, (, ), !=]
[null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getType, (, ), !=, desiredType, ), {]
[{, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getType, (, ), !=, desiredType, ), {, diagnostic, =]
[else, if, (, arg, ., getType, (, ), !=, desiredType, ), {, diagnostic, =, INVALID_ARGUMENT_ERROR, ;, }, else, if, (]
[else, if, (, arg, ., getType, (, ), !=, desiredType, ), {, diagnostic, =, INVALID_ARGUMENT_ERROR, ;, }, else, if, (]
[else, if, (, arg, ., getType, (, ), !=, desiredType, ), {, diagnostic, =, INVALID_ARGUMENT_ERROR, ;, }, else, if, (]
[(, ), !=, desiredType, ), {, diagnostic, =, INVALID_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getNext, (, ), !=]
[desiredType, ), {, diagnostic, =, INVALID_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getNext, (, ), !=, null, ), {]
[{, diagnostic, =, INVALID_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getNext, (, ), !=, null, ), {, diagnostic, =]
[}, else, if, (, arg, ., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (]
[}, else, if, (, arg, ., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (]
[if, (, arg, ., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=]
[., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=, null, ), {]
[., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=, null, ), {]
[!=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (]
[!=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (]
[diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (]
[TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, methodName, ,]
[}, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,]
[}, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,]
[., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), ), ;, return]
[., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), ), ;, return, false, ;, }, return]
[true, ;, }, private, boolean, verifySetCssNameMapping, (, NodeTraversal, t, ,, Node, methodName, ,, Node, firstArg, ), {, DiagnosticType, diagnostic, =]
[boolean, verifySetCssNameMapping, (, NodeTraversal, t, ,, Node, methodName, ,, Node, firstArg, ), {, DiagnosticType, diagnostic, =, null, ;, if, (]
[boolean, verifySetCssNameMapping, (, NodeTraversal, t, ,, Node, methodName, ,, Node, firstArg, ), {, DiagnosticType, diagnostic, =, null, ;, if, (]
[(, NodeTraversal, t, ,, Node, methodName, ,, Node, firstArg, ), {, DiagnosticType, diagnostic, =, null, ;, if, (, firstArg, ==]
[,, Node, methodName, ,, Node, firstArg, ), {, DiagnosticType, diagnostic, =, null, ;, if, (, firstArg, ==, null, ), {]
[methodName, ,, Node, firstArg, ), {, DiagnosticType, diagnostic, =, null, ;, if, (, firstArg, ==, null, ), {, diagnostic, =]
[DiagnosticType, diagnostic, =, null, ;, if, (, firstArg, ==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (]
[diagnostic, =, null, ;, if, (, firstArg, ==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, !]
[diagnostic, =, null, ;, if, (, firstArg, ==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, !]
[==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, !, firstArg, ., isObjectLit, (, ), ), {]
[), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, !, firstArg, ., isObjectLit, (, ), ), {, diagnostic, =]
[}, else, if, (, !, firstArg, ., isObjectLit, (, ), ), {, diagnostic, =, EXPECTED_OBJECTLIT_ERROR, ;, }, else, if, (]
[}, else, if, (, !, firstArg, ., isObjectLit, (, ), ), {, diagnostic, =, EXPECTED_OBJECTLIT_ERROR, ;, }, else, if, (]
[}, else, if, (, !, firstArg, ., isObjectLit, (, ), ), {, diagnostic, =, EXPECTED_OBJECTLIT_ERROR, ;, }, else, if, (]
[., isObjectLit, (, ), ), {, diagnostic, =, EXPECTED_OBJECTLIT_ERROR, ;, }, else, if, (, firstArg, ., getNext, (, ), !=]
[diagnostic, =, EXPECTED_OBJECTLIT_ERROR, ;, }, else, if, (, firstArg, ., getNext, (, ), !=, null, ), {, Node, secondArg, =]
[diagnostic, =, EXPECTED_OBJECTLIT_ERROR, ;, }, else, if, (, firstArg, ., getNext, (, ), !=, null, ), {, Node, secondArg, =]
[firstArg, ., getNext, (, ), !=, null, ), {, Node, secondArg, =, firstArg, ., getNext, (, ), ;, if, (]
[., getNext, (, ), !=, null, ), {, Node, secondArg, =, firstArg, ., getNext, (, ), ;, if, (, !]
[., getNext, (, ), !=, null, ), {, Node, secondArg, =, firstArg, ., getNext, (, ), ;, if, (, !]
[{, Node, secondArg, =, firstArg, ., getNext, (, ), ;, if, (, !, secondArg, ., isString, (, ), ), {]
[secondArg, =, firstArg, ., getNext, (, ), ;, if, (, !, secondArg, ., isString, (, ), ), {, diagnostic, =]
[), ;, if, (, !, secondArg, ., isString, (, ), ), {, diagnostic, =, EXPECTED_STRING_ERROR, ;, }, else, if, (]
[), ;, if, (, !, secondArg, ., isString, (, ), ), {, diagnostic, =, EXPECTED_STRING_ERROR, ;, }, else, if, (]
[), ;, if, (, !, secondArg, ., isString, (, ), ), {, diagnostic, =, EXPECTED_STRING_ERROR, ;, }, else, if, (]
[., isString, (, ), ), {, diagnostic, =, EXPECTED_STRING_ERROR, ;, }, else, if, (, secondArg, ., getNext, (, ), !=]
[), ), {, diagnostic, =, EXPECTED_STRING_ERROR, ;, }, else, if, (, secondArg, ., getNext, (, ), !=, null, ), {]
[{, diagnostic, =, EXPECTED_STRING_ERROR, ;, }, else, if, (, secondArg, ., getNext, (, ), !=, null, ), {, diagnostic, =]
[else, if, (, secondArg, ., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (]
[else, if, (, secondArg, ., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (]
[(, secondArg, ., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (, diagnostic, !=]
[getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (, diagnostic, !=, null, ), {]
[getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (, diagnostic, !=, null, ), {]
[null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (]
[null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (]
[=, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (]
[;, }, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, methodName, ,]
[}, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,]
[}, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,]
[., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), ), ;, return]
[., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), ), ;, return, false, ;, }, return]
[true, ;, }, private, void, registerAnyProvidedPrefixes, (, String, ns, ,, Node, node, ,, JSModule, module, ), {, int, pos, =]
[true, ;, }, private, void, registerAnyProvidedPrefixes, (, String, ns, ,, Node, node, ,, JSModule, module, ), {, int, pos, =]
[void, registerAnyProvidedPrefixes, (, String, ns, ,, Node, node, ,, JSModule, module, ), {, int, pos, =, ns, ., indexOf, (]
[,, Node, node, ,, JSModule, module, ), {, int, pos, =, ns, ., indexOf, (, '.', ), ;, while, (]
[,, Node, node, ,, JSModule, module, ), {, int, pos, =, ns, ., indexOf, (, '.', ), ;, while, (]
[node, ,, JSModule, module, ), {, int, pos, =, ns, ., indexOf, (, '.', ), ;, while, (, pos, !=]
[,, JSModule, module, ), {, int, pos, =, ns, ., indexOf, (, '.', ), ;, while, (, pos, !=, -]
[pos, =, ns, ., indexOf, (, '.', ), ;, while, (, pos, !=, -, 1, ), {, String, prefixNs, =]
[pos, =, ns, ., indexOf, (, '.', ), ;, while, (, pos, !=, -, 1, ), {, String, prefixNs, =]
[indexOf, (, '.', ), ;, while, (, pos, !=, -, 1, ), {, String, prefixNs, =, ns, ., substring, (]
['.', ), ;, while, (, pos, !=, -, 1, ), {, String, prefixNs, =, ns, ., substring, (, 0, ,]
[while, (, pos, !=, -, 1, ), {, String, prefixNs, =, ns, ., substring, (, 0, ,, pos, ), ;]
[pos, !=, -, 1, ), {, String, prefixNs, =, ns, ., substring, (, 0, ,, pos, ), ;, pos, =]
[pos, !=, -, 1, ), {, String, prefixNs, =, ns, ., substring, (, 0, ,, pos, ), ;, pos, =]
[), {, String, prefixNs, =, ns, ., substring, (, 0, ,, pos, ), ;, pos, =, ns, ., indexOf, (]
[String, prefixNs, =, ns, ., substring, (, 0, ,, pos, ), ;, pos, =, ns, ., indexOf, (, '.', ,]
[String, prefixNs, =, ns, ., substring, (, 0, ,, pos, ), ;, pos, =, ns, ., indexOf, (, '.', ,]
[=, ns, ., substring, (, 0, ,, pos, ), ;, pos, =, ns, ., indexOf, (, '.', ,, pos, +]
[0, ,, pos, ), ;, pos, =, ns, ., indexOf, (, '.', ,, pos, +, 1, ), ;, if, (]
[0, ,, pos, ), ;, pos, =, ns, ., indexOf, (, '.', ,, pos, +, 1, ), ;, if, (]
[;, pos, =, ns, ., indexOf, (, '.', ,, pos, +, 1, ), ;, if, (, providedNames, ., containsKey, (]
[., indexOf, (, '.', ,, pos, +, 1, ), ;, if, (, providedNames, ., containsKey, (, prefixNs, ), ), {]
[., indexOf, (, '.', ,, pos, +, 1, ), ;, if, (, providedNames, ., containsKey, (, prefixNs, ), ), {]
[., indexOf, (, '.', ,, pos, +, 1, ), ;, if, (, providedNames, ., containsKey, (, prefixNs, ), ), {]
[,, pos, +, 1, ), ;, if, (, providedNames, ., containsKey, (, prefixNs, ), ), {, providedNames, ., get, (]
[;, if, (, providedNames, ., containsKey, (, prefixNs, ), ), {, providedNames, ., get, (, prefixNs, ), ., addProvide, (]
[(, providedNames, ., containsKey, (, prefixNs, ), ), {, providedNames, ., get, (, prefixNs, ), ., addProvide, (, node, ,]
[., containsKey, (, prefixNs, ), ), {, providedNames, ., get, (, prefixNs, ), ., addProvide, (, node, ,, module, ,]
[{, providedNames, ., get, (, prefixNs, ), ., addProvide, (, node, ,, module, ,, false, ), ;, }, else, {]
[{, providedNames, ., get, (, prefixNs, ), ., addProvide, (, node, ,, module, ,, false, ), ;, }, else, {]
[(, prefixNs, ), ., addProvide, (, node, ,, module, ,, false, ), ;, }, else, {, providedNames, ., put, (]
[), ., addProvide, (, node, ,, module, ,, false, ), ;, }, else, {, providedNames, ., put, (, prefixNs, ,]
[(, node, ,, module, ,, false, ), ;, }, else, {, providedNames, ., put, (, prefixNs, ,, new, ProvidedName, (]
[,, module, ,, false, ), ;, }, else, {, providedNames, ., put, (, prefixNs, ,, new, ProvidedName, (, prefixNs, ,]
[,, false, ), ;, }, else, {, providedNames, ., put, (, prefixNs, ,, new, ProvidedName, (, prefixNs, ,, node, ,]
[), ;, }, else, {, providedNames, ., put, (, prefixNs, ,, new, ProvidedName, (, prefixNs, ,, node, ,, module, ,]
[{, private, final, String, namespace, ;, private, final, Node, firstNode, ;, private, final, JSModule, firstModule, ;, private, Node, explicitNode, =]
[private, final, Node, firstNode, ;, private, final, JSModule, firstModule, ;, private, Node, explicitNode, =, null, ;, private, JSModule, explicitModule, =]
[final, JSModule, firstModule, ;, private, Node, explicitNode, =, null, ;, private, JSModule, explicitModule, =, null, ;, private, Node, candidateDefinition, =]
[explicitNode, =, null, ;, private, JSModule, explicitModule, =, null, ;, private, Node, candidateDefinition, =, null, ;, private, JSModule, minimumModule, =]
[explicitModule, =, null, ;, private, Node, candidateDefinition, =, null, ;, private, JSModule, minimumModule, =, null, ;, private, Node, replacementNode, =]
[Node, replacementNode, =, null, ;, ProvidedName, (, String, namespace, ,, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {]
[Node, replacementNode, =, null, ;, ProvidedName, (, String, namespace, ,, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {]
[;, ProvidedName, (, String, namespace, ,, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, Preconditions, ., checkArgument, (]
[;, ProvidedName, (, String, namespace, ,, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, Preconditions, ., checkArgument, (]
[;, ProvidedName, (, String, namespace, ,, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, Preconditions, ., checkArgument, (]
[(, String, namespace, ,, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, Preconditions, ., checkArgument, (, node, ==]
[namespace, ,, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, Preconditions, ., checkArgument, (, node, ==, null, ||]
[namespace, ,, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, Preconditions, ., checkArgument, (, node, ==, null, ||]
[,, boolean, explicit, ), {, Preconditions, ., checkArgument, (, node, ==, null, ||, node, ., isExprResult, (, ), ), ;]
[,, boolean, explicit, ), {, Preconditions, ., checkArgument, (, node, ==, null, ||, node, ., isExprResult, (, ), ), ;]
[{, Preconditions, ., checkArgument, (, node, ==, null, ||, node, ., isExprResult, (, ), ), ;, this, ., namespace, =]
[., checkArgument, (, node, ==, null, ||, node, ., isExprResult, (, ), ), ;, this, ., namespace, =, namespace, ;]
[., checkArgument, (, node, ==, null, ||, node, ., isExprResult, (, ), ), ;, this, ., namespace, =, namespace, ;]
[==, null, ||, node, ., isExprResult, (, ), ), ;, this, ., namespace, =, namespace, ;, this, ., firstNode, =]
[||, node, ., isExprResult, (, ), ), ;, this, ., namespace, =, namespace, ;, this, ., firstNode, =, node, ;]
[||, node, ., isExprResult, (, ), ), ;, this, ., namespace, =, namespace, ;, this, ., firstNode, =, node, ;]
[(, ), ), ;, this, ., namespace, =, namespace, ;, this, ., firstNode, =, node, ;, this, ., firstModule, =]
[), ;, this, ., namespace, =, namespace, ;, this, ., firstNode, =, node, ;, this, ., firstModule, =, module, ;]
[this, ., namespace, =, namespace, ;, this, ., firstNode, =, node, ;, this, ., firstModule, =, module, ;, addProvide, (]
[namespace, =, namespace, ;, this, ., firstNode, =, node, ;, this, ., firstModule, =, module, ;, addProvide, (, node, ,]
[namespace, ;, this, ., firstNode, =, node, ;, this, ., firstModule, =, module, ;, addProvide, (, node, ,, module, ,]
[,, explicit, ), ;, }, void, addProvide, (, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, if, (]
[;, }, void, addProvide, (, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, if, (, explicit, ), {]
[;, }, void, addProvide, (, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, if, (, explicit, ), {]
[(, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, if, (, explicit, ), {, Preconditions, ., checkState, (]
[(, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, if, (, explicit, ), {, Preconditions, ., checkState, (]
[node, ,, JSModule, module, ,, boolean, explicit, ), {, if, (, explicit, ), {, Preconditions, ., checkState, (, explicitNode, ==]
[module, ,, boolean, explicit, ), {, if, (, explicit, ), {, Preconditions, ., checkState, (, explicitNode, ==, null, ), ;]
[module, ,, boolean, explicit, ), {, if, (, explicit, ), {, Preconditions, ., checkState, (, explicitNode, ==, null, ), ;]
[), {, if, (, explicit, ), {, Preconditions, ., checkState, (, explicitNode, ==, null, ), ;, Preconditions, ., checkArgument, (]
[), {, if, (, explicit, ), {, Preconditions, ., checkState, (, explicitNode, ==, null, ), ;, Preconditions, ., checkArgument, (]
[Preconditions, ., checkState, (, explicitNode, ==, null, ), ;, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ), ;]
[checkState, (, explicitNode, ==, null, ), ;, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ), ;, explicitNode, =]
[explicitNode, ==, null, ), ;, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ), ;, explicitNode, =, node, ;]
[null, ), ;, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ), ;, explicitNode, =, node, ;, explicitModule, =]
[Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ), ;, explicitNode, =, node, ;, explicitModule, =, module, ;, }]
[checkArgument, (, node, ., isExprResult, (, ), ), ;, explicitNode, =, node, ;, explicitModule, =, module, ;, }, updateMinimumModule, (]
[=, node, ;, explicitModule, =, module, ;, }, updateMinimumModule, (, module, ), ;, }, boolean, isExplicitlyProvided, (, ), {, return]
[=, node, ;, explicitModule, =, module, ;, }, updateMinimumModule, (, module, ), ;, }, boolean, isExplicitlyProvided, (, ), {, return]
[;, explicitModule, =, module, ;, }, updateMinimumModule, (, module, ), ;, }, boolean, isExplicitlyProvided, (, ), {, return, explicitNode, !=]
[isExplicitlyProvided, (, ), {, return, explicitNode, !=, null, ;, }, void, addDefinition, (, Node, node, ,, JSModule, module, ), {]
[isExplicitlyProvided, (, ), {, return, explicitNode, !=, null, ;, }, void, addDefinition, (, Node, node, ,, JSModule, module, ), {]
[return, explicitNode, !=, null, ;, }, void, addDefinition, (, Node, node, ,, JSModule, module, ), {, Preconditions, ., checkArgument, (]
[return, explicitNode, !=, null, ;, }, void, addDefinition, (, Node, node, ,, JSModule, module, ), {, Preconditions, ., checkArgument, (]
[return, explicitNode, !=, null, ;, }, void, addDefinition, (, Node, node, ,, JSModule, module, ), {, Preconditions, ., checkArgument, (]
[return, explicitNode, !=, null, ;, }, void, addDefinition, (, Node, node, ,, JSModule, module, ), {, Preconditions, ., checkArgument, (]
[void, addDefinition, (, Node, node, ,, JSModule, module, ), {, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ||]
[void, addDefinition, (, Node, node, ,, JSModule, module, ), {, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ||]
[JSModule, module, ), {, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ||, node, ., isFunction, (, ), ||]
[JSModule, module, ), {, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ||, node, ., isFunction, (, ), ||]
[(, node, ., isExprResult, (, ), ||, node, ., isFunction, (, ), ||, node, ., isVar, (, ), ), ;]
[(, node, ., isExprResult, (, ), ||, node, ., isFunction, (, ), ||, node, ., isVar, (, ), ), ;]
[(, ), ||, node, ., isFunction, (, ), ||, node, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (]
[(, ), ||, node, ., isFunction, (, ), ||, node, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (]
[||, node, ., isFunction, (, ), ||, node, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=]
[), ||, node, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (]
[), ||, node, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (]
[||, node, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (]
[||, node, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (]
[., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (, candidateDefinition, ==]
[), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (, candidateDefinition, ==, null, ), ||]
[), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (, candidateDefinition, ==, null, ), ||, !]
[), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (, candidateDefinition, ==, null, ), ||, !]
[!=, node, ), ;, if, (, (, candidateDefinition, ==, null, ), ||, !, node, ., isExprResult, (, ), ), {]
[), ;, if, (, (, candidateDefinition, ==, null, ), ||, !, node, ., isExprResult, (, ), ), {, candidateDefinition, =]
[if, (, (, candidateDefinition, ==, null, ), ||, !, node, ., isExprResult, (, ), ), {, candidateDefinition, =, node, ;]
[(, candidateDefinition, ==, null, ), ||, !, node, ., isExprResult, (, ), ), {, candidateDefinition, =, node, ;, updateMinimumModule, (]
[=, node, ;, updateMinimumModule, (, module, ), ;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, ), {, if, (]
[=, node, ;, updateMinimumModule, (, module, ), ;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, ), {, if, (]
[;, updateMinimumModule, (, module, ), ;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, ), {, if, (, minimumModule, ==]
[module, ), ;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, ), {, if, (, minimumModule, ==, null, ), {]
[;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, ), {, if, (, minimumModule, ==, null, ), {, minimumModule, =]
[(, JSModule, newModule, ), {, if, (, minimumModule, ==, null, ), {, minimumModule, =, newModule, ;, }, else, if, (]
[(, JSModule, newModule, ), {, if, (, minimumModule, ==, null, ), {, minimumModule, =, newModule, ;, }, else, if, (]
[newModule, ), {, if, (, minimumModule, ==, null, ), {, minimumModule, =, newModule, ;, }, else, if, (, moduleGraph, !=]
[if, (, minimumModule, ==, null, ), {, minimumModule, =, newModule, ;, }, else, if, (, moduleGraph, !=, null, ), {]
[minimumModule, ==, null, ), {, minimumModule, =, newModule, ;, }, else, if, (, moduleGraph, !=, null, ), {, minimumModule, =]
[minimumModule, ==, null, ), {, minimumModule, =, newModule, ;, }, else, if, (, moduleGraph, !=, null, ), {, minimumModule, =]
[{, minimumModule, =, newModule, ;, }, else, if, (, moduleGraph, !=, null, ), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (]
[=, newModule, ;, }, else, if, (, moduleGraph, !=, null, ), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,]
[(, moduleGraph, !=, null, ), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, ), ;, }, else, {]
[(, moduleGraph, !=, null, ), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, ), ;, }, else, {]
[), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, ), ;, }, else, {, Preconditions, ., checkState, (]
[), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, ), ;, }, else, {, Preconditions, ., checkState, (]
[minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, ), ;, }, else, {, Preconditions, ., checkState, (, newModule, ==]
[moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, ), ;, }, else, {, Preconditions, ., checkState, (, newModule, ==, minimumModule, ,]
[Preconditions, ., checkState, (, newModule, ==, minimumModule, ,, "Missing module graph", ), ;, }, }, void, replace, (, ), {, if, (]
[Preconditions, ., checkState, (, newModule, ==, minimumModule, ,, "Missing module graph", ), ;, }, }, void, replace, (, ), {, if, (]
[checkState, (, newModule, ==, minimumModule, ,, "Missing module graph", ), ;, }, }, void, replace, (, ), {, if, (, firstNode, ==]
[==, minimumModule, ,, "Missing module graph", ), ;, }, }, void, replace, (, ), {, if, (, firstNode, ==, null, ), {]
[,, "Missing module graph", ), ;, }, }, void, replace, (, ), {, if, (, firstNode, ==, null, ), {, replacementNode, =]
[replace, (, ), {, if, (, firstNode, ==, null, ), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (]
[replace, (, ), {, if, (, firstNode, ==, null, ), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (]
[replace, (, ), {, if, (, firstNode, ==, null, ), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (]
[), {, if, (, firstNode, ==, null, ), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (, candidateDefinition, !=]
[if, (, firstNode, ==, null, ), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (, candidateDefinition, !=, null, &&]
[if, (, firstNode, ==, null, ), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (, candidateDefinition, !=, null, &&]
[firstNode, ==, null, ), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (, candidateDefinition, !=, null, &&, explicitNode, !=]
[), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (, candidateDefinition, !=, null, &&, explicitNode, !=, null, ), {]
[), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (, candidateDefinition, !=, null, &&, explicitNode, !=, null, ), {]
[return, ;, }, if, (, candidateDefinition, !=, null, &&, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;]
[return, ;, }, if, (, candidateDefinition, !=, null, &&, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;]
[!=, null, &&, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;]
[&&, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =]
[), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (]
[), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (]
[), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (, candidateDefinition, ., isExprResult, (, ), &&]
[;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (, candidateDefinition, ., isExprResult, (, ), &&, !]
[;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (, candidateDefinition, ., isExprResult, (, ), &&, !]
[;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (, candidateDefinition, ., isExprResult, (, ), &&, !]
[if, (, candidateDefinition, ., isExprResult, (, ), &&, !, candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {]
[if, (, candidateDefinition, ., isExprResult, (, ), &&, !, candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {]
[isExprResult, (, ), &&, !, candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, candidateDefinition, ., putBooleanProp, (]
[isExprResult, (, ), &&, !, candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, candidateDefinition, ., putBooleanProp, (]
[!, candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, candidateDefinition, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,]
[., isQualifiedName, (, ), ), {, candidateDefinition, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, Node, assignNode, =]
[., isQualifiedName, (, ), ), {, candidateDefinition, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, Node, assignNode, =]
[(, Node, ., IS_NAMESPACE, ,, true, ), ;, Node, assignNode, =, candidateDefinition, ., getFirstChild, (, ), ;, Node, nameNode, =]
[(, Node, ., IS_NAMESPACE, ,, true, ), ;, Node, assignNode, =, candidateDefinition, ., getFirstChild, (, ), ;, Node, nameNode, =]
[Node, assignNode, =, candidateDefinition, ., getFirstChild, (, ), ;, Node, nameNode, =, assignNode, ., getFirstChild, (, ), ;, if, (]
[Node, assignNode, =, candidateDefinition, ., getFirstChild, (, ), ;, Node, nameNode, =, assignNode, ., getFirstChild, (, ), ;, if, (]
[nameNode, =, assignNode, ., getFirstChild, (, ), ;, if, (, nameNode, ., isName, (, ), ), {, Node, valueNode, =]
[nameNode, =, assignNode, ., getFirstChild, (, ), ;, if, (, nameNode, ., isName, (, ), ), {, Node, valueNode, =]
[), ;, if, (, nameNode, ., isName, (, ), ), {, Node, valueNode, =, nameNode, ., getNext, (, ), ;]
[), ;, if, (, nameNode, ., isName, (, ), ), {, Node, valueNode, =, nameNode, ., getNext, (, ), ;]
[nameNode, ., isName, (, ), ), {, Node, valueNode, =, nameNode, ., getNext, (, ), ;, assignNode, ., removeChild, (]
[(, ), ), {, Node, valueNode, =, nameNode, ., getNext, (, ), ;, assignNode, ., removeChild, (, nameNode, ), ;]
[(, ), ), {, Node, valueNode, =, nameNode, ., getNext, (, ), ;, assignNode, ., removeChild, (, nameNode, ), ;]
[Node, valueNode, =, nameNode, ., getNext, (, ), ;, assignNode, ., removeChild, (, nameNode, ), ;, assignNode, ., removeChild, (]
[nameNode, ., getNext, (, ), ;, assignNode, ., removeChild, (, nameNode, ), ;, assignNode, ., removeChild, (, valueNode, ), ;]
[nameNode, ., getNext, (, ), ;, assignNode, ., removeChild, (, nameNode, ), ;, assignNode, ., removeChild, (, valueNode, ), ;]
[), ;, assignNode, ., removeChild, (, nameNode, ), ;, assignNode, ., removeChild, (, valueNode, ), ;, nameNode, ., addChildToFront, (]
[nameNode, ), ;, assignNode, ., removeChild, (, valueNode, ), ;, nameNode, ., addChildToFront, (, valueNode, ), ;, Node, varNode, =]
[nameNode, ), ;, assignNode, ., removeChild, (, valueNode, ), ;, nameNode, ., addChildToFront, (, valueNode, ), ;, Node, varNode, =]
[., removeChild, (, valueNode, ), ;, nameNode, ., addChildToFront, (, valueNode, ), ;, Node, varNode, =, IR, ., var, (]
[valueNode, ), ;, nameNode, ., addChildToFront, (, valueNode, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;]
[valueNode, ), ;, nameNode, ., addChildToFront, (, valueNode, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;]
[., addChildToFront, (, valueNode, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, varNode, ., copyInformationFrom, (]
[valueNode, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, varNode, ., copyInformationFrom, (, candidateDefinition, ), ;]
[valueNode, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, varNode, ., copyInformationFrom, (, candidateDefinition, ), ;]
[valueNode, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, varNode, ., copyInformationFrom, (, candidateDefinition, ), ;]
[var, (, nameNode, ), ;, varNode, ., copyInformationFrom, (, candidateDefinition, ), ;, candidateDefinition, ., getParent, (, ), ., replaceChild, (]
[nameNode, ), ;, varNode, ., copyInformationFrom, (, candidateDefinition, ), ;, candidateDefinition, ., getParent, (, ), ., replaceChild, (, candidateDefinition, ,]
[varNode, ., copyInformationFrom, (, candidateDefinition, ), ;, candidateDefinition, ., getParent, (, ), ., replaceChild, (, candidateDefinition, ,, varNode, ), ;]
[varNode, ., copyInformationFrom, (, candidateDefinition, ), ;, candidateDefinition, ., getParent, (, ), ., replaceChild, (, candidateDefinition, ,, varNode, ), ;]
[candidateDefinition, ), ;, candidateDefinition, ., getParent, (, ), ., replaceChild, (, candidateDefinition, ,, varNode, ), ;, nameNode, ., setJSDocInfo, (]
[candidateDefinition, ), ;, candidateDefinition, ., getParent, (, ), ., replaceChild, (, candidateDefinition, ,, varNode, ), ;, nameNode, ., setJSDocInfo, (]
[), ., replaceChild, (, candidateDefinition, ,, varNode, ), ;, nameNode, ., setJSDocInfo, (, assignNode, ., getJSDocInfo, (, ), ), ;]
[), ., replaceChild, (, candidateDefinition, ,, varNode, ), ;, nameNode, ., setJSDocInfo, (, assignNode, ., getJSDocInfo, (, ), ), ;]
[varNode, ), ;, nameNode, ., setJSDocInfo, (, assignNode, ., getJSDocInfo, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;]
[;, nameNode, ., setJSDocInfo, (, assignNode, ., getJSDocInfo, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =]
[getJSDocInfo, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, varNode, ;, }, }, }, else, {]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, varNode, ;, }, }, }, else, {, replacementNode, =]
[(, ), ;, replacementNode, =, varNode, ;, }, }, }, else, {, replacementNode, =, createDeclarationNode, (, ), ;, if, (]
[(, ), ;, replacementNode, =, varNode, ;, }, }, }, else, {, replacementNode, =, createDeclarationNode, (, ), ;, if, (]
[;, replacementNode, =, varNode, ;, }, }, }, else, {, replacementNode, =, createDeclarationNode, (, ), ;, if, (, firstModule, ==]
[varNode, ;, }, }, }, else, {, replacementNode, =, createDeclarationNode, (, ), ;, if, (, firstModule, ==, minimumModule, ), {]
[varNode, ;, }, }, }, else, {, replacementNode, =, createDeclarationNode, (, ), ;, if, (, firstModule, ==, minimumModule, ), {]
[varNode, ;, }, }, }, else, {, replacementNode, =, createDeclarationNode, (, ), ;, if, (, firstModule, ==, minimumModule, ), {]
[=, createDeclarationNode, (, ), ;, if, (, firstModule, ==, minimumModule, ), {, firstNode, ., getParent, (, ), ., addChildBefore, (]
[(, ), ;, if, (, firstModule, ==, minimumModule, ), {, firstNode, ., getParent, (, ), ., addChildBefore, (, replacementNode, ,]
[{, firstNode, ., getParent, (, ), ., addChildBefore, (, replacementNode, ,, firstNode, ), ;, }, else, {, int, indexOfDot, =]
[{, firstNode, ., getParent, (, ), ., addChildBefore, (, replacementNode, ,, firstNode, ), ;, }, else, {, int, indexOfDot, =]
[(, ), ., addChildBefore, (, replacementNode, ,, firstNode, ), ;, }, else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (]
[replacementNode, ,, firstNode, ), ;, }, else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (, '.', ), ;, if, (]
[replacementNode, ,, firstNode, ), ;, }, else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (, '.', ), ;, if, (]
[firstNode, ), ;, }, else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (, '.', ), ;, if, (, indexOfDot, ==]
[), ;, }, else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (, '.', ), ;, if, (, indexOfDot, ==, -]
[else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (, '.', ), ;, if, (, indexOfDot, ==, -, 1, ), {]
[else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (, '.', ), ;, if, (, indexOfDot, ==, -, 1, ), {]
[else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (, '.', ), ;, if, (, indexOfDot, ==, -, 1, ), {]
[=, namespace, ., lastIndexOf, (, '.', ), ;, if, (, indexOfDot, ==, -, 1, ), {, compiler, ., getNodeForCodeInsertion, (]
['.', ), ;, if, (, indexOfDot, ==, -, 1, ), {, compiler, ., getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (]
[), {, compiler, ., getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =]
[), {, compiler, ., getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =]
[getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =, providedNames, ., get, (]
[getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =, providedNames, ., get, (]
[., addChildToBack, (, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =, providedNames, ., get, (, namespace, ., substring, (]
[(, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =, providedNames, ., get, (, namespace, ., substring, (, 0, ,]
[}, else, {, ProvidedName, parentName, =, providedNames, ., get, (, namespace, ., substring, (, 0, ,, indexOfDot, ), ), ;]
[}, else, {, ProvidedName, parentName, =, providedNames, ., get, (, namespace, ., substring, (, 0, ,, indexOfDot, ), ), ;]
[parentName, =, providedNames, ., get, (, namespace, ., substring, (, 0, ,, indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (]
[., get, (, namespace, ., substring, (, 0, ,, indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;]
[., get, (, namespace, ., substring, (, 0, ,, indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;]
[., substring, (, 0, ,, indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (]
[., substring, (, 0, ,, indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (]
[indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, ), ;]
[indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, ), ;]
[indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, ), ;]
[indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, ), ;]
[;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, ), ;, parentName, ., replacementNode, ., getParent, (, ), ., addChildAfter, (]
[., checkNotNull, (, parentName, ., replacementNode, ), ;, parentName, ., replacementNode, ., getParent, (, ), ., addChildAfter, (, replacementNode, ,]
[., checkNotNull, (, parentName, ., replacementNode, ), ;, parentName, ., replacementNode, ., getParent, (, ), ., addChildAfter, (, replacementNode, ,]
[., replacementNode, ., getParent, (, ), ., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, ), ;, }, }, if, (]
[., replacementNode, ., getParent, (, ), ., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, ), ;, }, }, if, (]
[., getParent, (, ), ., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, ), ;, }, }, if, (, explicitNode, !=]
[), ., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, ), ;, }, }, if, (, explicitNode, !=, null, ), {]
[), ., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, ), ;, }, }, if, (, explicitNode, !=, null, ), {]
[., replacementNode, ), ;, }, }, if, (, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, }]
[., replacementNode, ), ;, }, }, if, (, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, }]
[(, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, createDeclarationNode, (, ), {, if, (]
[(, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, createDeclarationNode, (, ), {, if, (]
[(, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, createDeclarationNode, (, ), {, if, (]
[compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, createDeclarationNode, (, ), {, if, (, namespace, ., indexOf, (]
[(, ), ;, }, }, private, Node, createDeclarationNode, (, ), {, if, (, namespace, ., indexOf, (, '.', ), ==]
[), ;, }, }, private, Node, createDeclarationNode, (, ), {, if, (, namespace, ., indexOf, (, '.', ), ==, -]
[private, Node, createDeclarationNode, (, ), {, if, (, namespace, ., indexOf, (, '.', ), ==, -, 1, ), {, return]
[namespace, ., indexOf, (, '.', ), ==, -, 1, ), {, return, makeVarDeclNode, (, ), ;, }, else, {, return]
[;, }, else, {, return, makeAssignmentExprNode, (, ), ;, }, }, private, Node, makeVarDeclNode, (, ), {, Node, name, =]
[;, }, else, {, return, makeAssignmentExprNode, (, ), ;, }, }, private, Node, makeVarDeclNode, (, ), {, Node, name, =]
[return, makeAssignmentExprNode, (, ), ;, }, }, private, Node, makeVarDeclNode, (, ), {, Node, name, =, IR, ., name, (]
[), ;, }, }, private, Node, makeVarDeclNode, (, ), {, Node, name, =, IR, ., name, (, namespace, ), ;]
[), ;, }, }, private, Node, makeVarDeclNode, (, ), {, Node, name, =, IR, ., name, (, namespace, ), ;]
[private, Node, makeVarDeclNode, (, ), {, Node, name, =, IR, ., name, (, namespace, ), ;, name, ., addChildToFront, (]
[=, IR, ., name, (, namespace, ), ;, name, ., addChildToFront, (, createNamespaceLiteral, (, ), ), ;, Node, decl, =]
[=, IR, ., name, (, namespace, ), ;, name, ., addChildToFront, (, createNamespaceLiteral, (, ), ), ;, Node, decl, =]
[(, namespace, ), ;, name, ., addChildToFront, (, createNamespaceLiteral, (, ), ), ;, Node, decl, =, IR, ., var, (]
[;, name, ., addChildToFront, (, createNamespaceLiteral, (, ), ), ;, Node, decl, =, IR, ., var, (, name, ), ;]
[;, name, ., addChildToFront, (, createNamespaceLiteral, (, ), ), ;, Node, decl, =, IR, ., var, (, name, ), ;]
[(, createNamespaceLiteral, (, ), ), ;, Node, decl, =, IR, ., var, (, name, ), ;, decl, ., putBooleanProp, (]
[(, createNamespaceLiteral, (, ), ), ;, Node, decl, =, IR, ., var, (, name, ), ;, decl, ., putBooleanProp, (]
[), ;, Node, decl, =, IR, ., var, (, name, ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,]
[IR, ., var, (, name, ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (]
[IR, ., var, (, name, ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (]
[IR, ., var, (, name, ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (]
[., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (]
[., IS_NAMESPACE, ,, true, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, namespace, ), ), {]
[., IS_NAMESPACE, ,, true, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, namespace, ), ), {]
[), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, namespace, ), ), {, name, ., putBooleanProp, (]
[), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, namespace, ), ), {, name, ., putBooleanProp, (]
[compiler, ., getCodingConvention, (, ), ., isConstant, (, namespace, ), ), {, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[isConstant, (, namespace, ), ), {, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (]
[isConstant, (, namespace, ), ), {, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (]
[namespace, ), ), {, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, candidateDefinition, ==]
[{, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, candidateDefinition, ==, null, ), {]
[{, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, candidateDefinition, ==, null, ), {]
[(, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, candidateDefinition, ==, null, ), {, name, ., setJSDocInfo, (]
[), ;, }, if, (, candidateDefinition, ==, null, ), {, name, ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }]
[), ;, }, if, (, candidateDefinition, ==, null, ), {, name, ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }]
[(, candidateDefinition, ==, null, ), {, name, ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (]
[==, null, ), {, name, ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (]
[name, ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;]
[setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo, (]
[), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo, (, decl, ), ;, return]
[), ;, setSourceInfo, (, decl, ), ;, return, decl, ;, }, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =]
[), ;, setSourceInfo, (, decl, ), ;, return, decl, ;, }, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =]
[;, return, decl, ;, }, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =, IR, ., objectlit, (, ), ;]
[;, return, decl, ;, }, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =, IR, ., objectlit, (, ), ;]
[}, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =, IR, ., objectlit, (, ), ;, objlit, ., setJSType, (]
[}, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =, IR, ., objectlit, (, ), ;, objlit, ., setJSType, (]
[}, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =, IR, ., objectlit, (, ), ;, objlit, ., setJSType, (]
[objlit, =, IR, ., objectlit, (, ), ;, objlit, ., setJSType, (, compiler, ., getTypeRegistry, (, ), ., createAnonymousObjectType, (]
[(, ), ;, objlit, ., setJSType, (, compiler, ., getTypeRegistry, (, ), ., createAnonymousObjectType, (, null, ), ), ;, return]
[., createAnonymousObjectType, (, null, ), ), ;, return, objlit, ;, }, private, Node, makeAssignmentExprNode, (, ), {, Node, decl, =]
[., createAnonymousObjectType, (, null, ), ), ;, return, objlit, ;, }, private, Node, makeAssignmentExprNode, (, ), {, Node, decl, =]
[), ), ;, return, objlit, ;, }, private, Node, makeAssignmentExprNode, (, ), {, Node, decl, =, IR, ., exprResult, (]
[), ), ;, return, objlit, ;, }, private, Node, makeAssignmentExprNode, (, ), {, Node, decl, =, IR, ., exprResult, (]
[objlit, ;, }, private, Node, makeAssignmentExprNode, (, ), {, Node, decl, =, IR, ., exprResult, (, IR, ., assign, (]
[objlit, ;, }, private, Node, makeAssignmentExprNode, (, ), {, Node, decl, =, IR, ., exprResult, (, IR, ., assign, (]
[Node, makeAssignmentExprNode, (, ), {, Node, decl, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (]
[Node, makeAssignmentExprNode, (, ), {, Node, decl, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (]
[decl, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, namespace, ,]
[exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, namespace, ,, firstNode, ,]
[., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, namespace, ,, firstNode, ,, namespace, ), ,]
[(, compiler, ., getCodingConvention, (, ), ,, namespace, ,, firstNode, ,, namespace, ), ,, createNamespaceLiteral, (, ), ), ), ;]
[(, compiler, ., getCodingConvention, (, ), ,, namespace, ,, firstNode, ,, namespace, ), ,, createNamespaceLiteral, (, ), ), ), ;]
[(, ), ,, namespace, ,, firstNode, ,, namespace, ), ,, createNamespaceLiteral, (, ), ), ), ;, decl, ., putBooleanProp, (]
[(, ), ,, namespace, ,, firstNode, ,, namespace, ), ,, createNamespaceLiteral, (, ), ), ), ;, decl, ., putBooleanProp, (]
[,, firstNode, ,, namespace, ), ,, createNamespaceLiteral, (, ), ), ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,]
[,, createNamespaceLiteral, (, ), ), ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (]
[,, createNamespaceLiteral, (, ), ), ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (]
[(, ), ), ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, candidateDefinition, ==]
[), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, candidateDefinition, ==, null, ), {]
[), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, candidateDefinition, ==, null, ), {]
[), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, candidateDefinition, ==, null, ), {]
[IS_NAMESPACE, ,, true, ), ;, if, (, candidateDefinition, ==, null, ), {, decl, ., getFirstChild, (, ), ., setJSDocInfo, (]
[(, candidateDefinition, ==, null, ), {, decl, ., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }]
[(, candidateDefinition, ==, null, ), {, decl, ., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }]
[), {, decl, ., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (]
[decl, ., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (]
[), ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;]
[setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo, (]
[), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo, (, decl, ), ;, return]
[), ;, setSourceInfo, (, decl, ), ;, return, decl, ;, }, private, JSDocInfo, createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder, =]
[(, decl, ), ;, return, decl, ;, }, private, JSDocInfo, createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (]
[;, return, decl, ;, }, private, JSDocInfo, createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;]
[;, return, decl, ;, }, private, JSDocInfo, createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;]
[createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordConstancy, (, ), ;, return]
[createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordConstancy, (, ), ;, return]
[JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordConstancy, (, ), ;, return, builder, ., build, (]
[return, builder, ., build, (, null, ), ;, }, private, void, setSourceInfo, (, Node, newNode, ), {, Node, provideStringNode, =]
[;, }, private, void, setSourceInfo, (, Node, newNode, ), {, Node, provideStringNode, =, getProvideStringNode, (, ), ;, int, offset, =]
[private, void, setSourceInfo, (, Node, newNode, ), {, Node, provideStringNode, =, getProvideStringNode, (, ), ;, int, offset, =, getSourceInfoOffset, (]
[), {, Node, provideStringNode, =, getProvideStringNode, (, ), ;, int, offset, =, getSourceInfoOffset, (, provideStringNode, ), ;, Node, sourceInfoNode, =]
[), {, Node, provideStringNode, =, getProvideStringNode, (, ), ;, int, offset, =, getSourceInfoOffset, (, provideStringNode, ), ;, Node, sourceInfoNode, =]
[), {, Node, provideStringNode, =, getProvideStringNode, (, ), ;, int, offset, =, getSourceInfoOffset, (, provideStringNode, ), ;, Node, sourceInfoNode, =]
[Node, provideStringNode, =, getProvideStringNode, (, ), ;, int, offset, =, getSourceInfoOffset, (, provideStringNode, ), ;, Node, sourceInfoNode, =, provideStringNode, ==]
[=, getProvideStringNode, (, ), ;, int, offset, =, getSourceInfoOffset, (, provideStringNode, ), ;, Node, sourceInfoNode, =, provideStringNode, ==, null, ?]
[(, ), ;, int, offset, =, getSourceInfoOffset, (, provideStringNode, ), ;, Node, sourceInfoNode, =, provideStringNode, ==, null, ?, firstNode, :]
[;, int, offset, =, getSourceInfoOffset, (, provideStringNode, ), ;, Node, sourceInfoNode, =, provideStringNode, ==, null, ?, firstNode, :, provideStringNode, ;]
[;, int, offset, =, getSourceInfoOffset, (, provideStringNode, ), ;, Node, sourceInfoNode, =, provideStringNode, ==, null, ?, firstNode, :, provideStringNode, ;]
[getSourceInfoOffset, (, provideStringNode, ), ;, Node, sourceInfoNode, =, provideStringNode, ==, null, ?, firstNode, :, provideStringNode, ;, newNode, ., copyInformationFromForTree, (]
[Node, sourceInfoNode, =, provideStringNode, ==, null, ?, firstNode, :, provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (]
[Node, sourceInfoNode, =, provideStringNode, ==, null, ?, firstNode, :, provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (]
[=, provideStringNode, ==, null, ?, firstNode, :, provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=]
[null, ?, firstNode, :, provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {]
[null, ?, firstNode, :, provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {]
[provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {, newNode, ., setSourceEncodedPositionForTree, (]
[provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {, newNode, ., setSourceEncodedPositionForTree, (]
[provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {, newNode, ., setSourceEncodedPositionForTree, (]
[sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {, newNode, ., setSourceEncodedPositionForTree, (, sourceInfoNode, ., getSourcePosition, (, ), +]
[., getSourcePosition, (, ), +, offset, ), ;, }, }, private, int, getSourceInfoOffset, (, Node, provideStringNode, ), {, if, (]
[., getSourcePosition, (, ), +, offset, ), ;, }, }, private, int, getSourceInfoOffset, (, Node, provideStringNode, ), {, if, (]
[(, ), +, offset, ), ;, }, }, private, int, getSourceInfoOffset, (, Node, provideStringNode, ), {, if, (, provideStringNode, ==]
[), ;, }, }, private, int, getSourceInfoOffset, (, Node, provideStringNode, ), {, if, (, provideStringNode, ==, null, ), {, return]
[getSourceInfoOffset, (, Node, provideStringNode, ), {, if, (, provideStringNode, ==, null, ), {, return, 0, ;, }, int, indexOfLastDot, =]
[getSourceInfoOffset, (, Node, provideStringNode, ), {, if, (, provideStringNode, ==, null, ), {, return, 0, ;, }, int, indexOfLastDot, =]
[), {, if, (, provideStringNode, ==, null, ), {, return, 0, ;, }, int, indexOfLastDot, =, namespace, ., lastIndexOf, (]
[provideStringNode, ==, null, ), {, return, 0, ;, }, int, indexOfLastDot, =, namespace, ., lastIndexOf, (, '.', ), ;, return]
[provideStringNode, ==, null, ), {, return, 0, ;, }, int, indexOfLastDot, =, namespace, ., lastIndexOf, (, '.', ), ;, return]
[null, ), {, return, 0, ;, }, int, indexOfLastDot, =, namespace, ., lastIndexOf, (, '.', ), ;, return, 2, +]
[namespace, ., lastIndexOf, (, '.', ), ;, return, 2, +, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return]
[namespace, ., lastIndexOf, (, '.', ), ;, return, 2, +, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return]
[., lastIndexOf, (, '.', ), ;, return, 2, +, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return, (]
[., lastIndexOf, (, '.', ), ;, return, 2, +, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return, (]
[., lastIndexOf, (, '.', ), ;, return, 2, +, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return, (]
[., lastIndexOf, (, '.', ), ;, return, 2, +, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return, (]
[return, 2, +, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return, (, firstNode, ., getFirstChild, (, ), !=]
[+, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return, (, firstNode, ., getFirstChild, (, ), !=, null, &&]
[+, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return, (, firstNode, ., getFirstChild, (, ), !=, null, &&]
[private, Node, getProvideStringNode, (, ), {, return, (, firstNode, ., getFirstChild, (, ), !=, null, &&, NodeUtil, ., isExprCall, (]
[), {, return, (, firstNode, ., getFirstChild, (, ), !=, null, &&, NodeUtil, ., isExprCall, (, firstNode, ), ), ?]
[), {, return, (, firstNode, ., getFirstChild, (, ), !=, null, &&, NodeUtil, ., isExprCall, (, firstNode, ), ), ?]
[), {, return, (, firstNode, ., getFirstChild, (, ), !=, null, &&, NodeUtil, ., isExprCall, (, firstNode, ), ), ?]
[null, &&, NodeUtil, ., isExprCall, (, firstNode, ), ), ?, firstNode, ., getFirstChild, (, ), ., getLastChild, (, ), :]
[., getLastChild, (, ), :, null, ;, }, }, private, static, boolean, isNamespacePlaceholder, (, Node, n, ), {, if, (]
[getLastChild, (, ), :, null, ;, }, }, private, static, boolean, isNamespacePlaceholder, (, Node, n, ), {, if, (, !]
[getLastChild, (, ), :, null, ;, }, }, private, static, boolean, isNamespacePlaceholder, (, Node, n, ), {, if, (, !]
[null, ;, }, }, private, static, boolean, isNamespacePlaceholder, (, Node, n, ), {, if, (, !, n, ., getBooleanProp, (]
[null, ;, }, }, private, static, boolean, isNamespacePlaceholder, (, Node, n, ), {, if, (, !, n, ., getBooleanProp, (]
[isNamespacePlaceholder, (, Node, n, ), {, if, (, !, n, ., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, return]
[if, (, !, n, ., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, return, false, ;, }, Node, value, =]
[., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, return, false, ;, }, Node, value, =, null, ;, if, (]
[., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, return, false, ;, }, Node, value, =, null, ;, if, (]
[false, ;, }, Node, value, =, null, ;, if, (, n, ., isExprResult, (, ), ), {, Node, assign, =]
[false, ;, }, Node, value, =, null, ;, if, (, n, ., isExprResult, (, ), ), {, Node, assign, =]
[null, ;, if, (, n, ., isExprResult, (, ), ), {, Node, assign, =, n, ., getFirstChild, (, ), ;]
[if, (, n, ., isExprResult, (, ), ), {, Node, assign, =, n, ., getFirstChild, (, ), ;, value, =]
[if, (, n, ., isExprResult, (, ), ), {, Node, assign, =, n, ., getFirstChild, (, ), ;, value, =]
[assign, =, n, ., getFirstChild, (, ), ;, value, =, assign, ., getLastChild, (, ), ;, }, else, if, (]
[assign, =, n, ., getFirstChild, (, ), ;, value, =, assign, ., getLastChild, (, ), ;, }, else, if, (]
[assign, ., getLastChild, (, ), ;, }, else, if, (, n, ., isVar, (, ), ), {, Node, name, =]
[assign, ., getLastChild, (, ), ;, }, else, if, (, n, ., isVar, (, ), ), {, Node, name, =]
[}, else, if, (, n, ., isVar, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;]
[if, (, n, ., isVar, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, value, =]
[if, (, n, ., isVar, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, value, =]
[{, Node, name, =, n, ., getFirstChild, (, ), ;, value, =, name, ., getFirstChild, (, ), ;, }, return]
[{, Node, name, =, n, ., getFirstChild, (, ), ;, value, =, name, ., getFirstChild, (, ), ;, }, return]
[{, Node, name, =, n, ., getFirstChild, (, ), ;, value, =, name, ., getFirstChild, (, ), ;, }, return]
[{, Node, name, =, n, ., getFirstChild, (, ), ;, value, =, name, ., getFirstChild, (, ), ;, }, return]
[name, =, n, ., getFirstChild, (, ), ;, value, =, name, ., getFirstChild, (, ), ;, }, return, value, !=]
[n, ., getFirstChild, (, ), ;, value, =, name, ., getFirstChild, (, ), ;, }, return, value, !=, null, &&]
[n, ., getFirstChild, (, ), ;, value, =, name, ., getFirstChild, (, ), ;, }, return, value, !=, null, &&]
[value, =, name, ., getFirstChild, (, ), ;, }, return, value, !=, null, &&, value, ., isObjectLit, (, ), &&]
[=, name, ., getFirstChild, (, ), ;, }, return, value, !=, null, &&, value, ., isObjectLit, (, ), &&, !]
[=, name, ., getFirstChild, (, ), ;, }, return, value, !=, null, &&, value, ., isObjectLit, (, ), &&, !]
[), &&, !, value, ., hasChildren, (, ), ;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node, n, ), {, if, (]
[), &&, !, value, ., hasChildren, (, ), ;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node, n, ), {, if, (]
[!, value, ., hasChildren, (, ), ;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, ==]
[void, maybeAddStringNodeToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, ==, null, ), {, return, ;, }, String, name, =]
[void, maybeAddStringNodeToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, ==, null, ), {, return, ;, }, String, name, =]
[preprocessorSymbolTable, ==, null, ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Node, syntheticRef, =]
[preprocessorSymbolTable, ==, null, ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Node, syntheticRef, =]
[{, return, ;, }, String, name, =, n, ., getString, (, ), ;, Node, syntheticRef, =, NodeUtil, ., newQualifiedNameNode, (]
[{, return, ;, }, String, name, =, n, ., getString, (, ), ;, Node, syntheticRef, =, NodeUtil, ., newQualifiedNameNode, (]
[=, n, ., getString, (, ), ;, Node, syntheticRef, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[., getString, (, ), ;, Node, syntheticRef, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,]
[(, ), ;, Node, syntheticRef, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, n, ,]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, n, ,, name, ), ;, final, int, FOR_QUOTE, =]
[(, ), ,, name, ,, n, ,, name, ), ;, final, int, FOR_QUOTE, =, 1, ;, final, int, FOR_DOT, =]
[n, ,, name, ), ;, final, int, FOR_QUOTE, =, 1, ;, final, int, FOR_DOT, =, 1, ;, Node, current, =]
[;, final, int, FOR_QUOTE, =, 1, ;, final, int, FOR_DOT, =, 1, ;, Node, current, =, null, ;, for, (]
[int, FOR_QUOTE, =, 1, ;, final, int, FOR_DOT, =, 1, ;, Node, current, =, null, ;, for, (, current, =]
[=, 1, ;, final, int, FOR_DOT, =, 1, ;, Node, current, =, null, ;, for, (, current, =, syntheticRef, ;]
[=, 1, ;, final, int, FOR_DOT, =, 1, ;, Node, current, =, null, ;, for, (, current, =, syntheticRef, ;]
[=, 1, ;, Node, current, =, null, ;, for, (, current, =, syntheticRef, ;, current, ., isGetProp, (, ), ;]
[;, Node, current, =, null, ;, for, (, current, =, syntheticRef, ;, current, ., isGetProp, (, ), ;, current, =]
[;, Node, current, =, null, ;, for, (, current, =, syntheticRef, ;, current, ., isGetProp, (, ), ;, current, =]
[syntheticRef, ;, current, ., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, int, fullLen, =]
[syntheticRef, ;, current, ., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, int, fullLen, =]
[syntheticRef, ;, current, ., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, int, fullLen, =]
[(, ), ), {, int, fullLen, =, current, ., getQualifiedName, (, ), ., length, (, ), ;, int, namespaceLen, =]
[(, ), ), {, int, fullLen, =, current, ., getQualifiedName, (, ), ., length, (, ), ;, int, namespaceLen, =]
[(, ), ), {, int, fullLen, =, current, ., getQualifiedName, (, ), ., length, (, ), ;, int, namespaceLen, =]
[(, ), ), {, int, fullLen, =, current, ., getQualifiedName, (, ), ., length, (, ), ;, int, namespaceLen, =]
[(, ), ;, int, namespaceLen, =, current, ., getFirstChild, (, ), ., getQualifiedName, (, ), ., length, (, ), ;]
[(, ), ;, int, namespaceLen, =, current, ., getFirstChild, (, ), ., getQualifiedName, (, ), ., length, (, ), ;]
[namespaceLen, =, current, ., getFirstChild, (, ), ., getQualifiedName, (, ), ., length, (, ), ;, current, ., setSourceEncodedPosition, (]
[namespaceLen, =, current, ., getFirstChild, (, ), ., getQualifiedName, (, ), ., length, (, ), ;, current, ., setSourceEncodedPosition, (]
[namespaceLen, =, current, ., getFirstChild, (, ), ., getQualifiedName, (, ), ., length, (, ), ;, current, ., setSourceEncodedPosition, (]
[), ., getQualifiedName, (, ), ., length, (, ), ;, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +]
[(, ), ., length, (, ), ;, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;]
[(, ), ., length, (, ), ;, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;]
[(, ), ;, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (]
[current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, ), ;]
[current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, ), ;]
[current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, ), ;]
[), +, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (]
[), +, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (]
[), +, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (]
[), +, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (]
[), +, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (]
[., setLength, (, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +]
[(, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, namespaceLen, +]
[), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +]
[., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, ), ;]
[., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, ), ;]
[., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, ), ;]
[., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, ), ;, current, ., getLastChild, (, ), ., setLength, (]
[., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, ), ;, current, ., getLastChild, (, ), ., setLength, (]
[., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, ), ;, current, ., getLastChild, (, ), ., setLength, (]
[., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, ), ;, current, ., getLastChild, (, ), ., setLength, (]
[), ., setLength, (, current, ., getLastChild, (, ), ., getString, (, ), ., length, (, ), ), ;, }]
[), ., setLength, (, current, ., getLastChild, (, ), ., getString, (, ), ., length, (, ), ), ;, }]
[current, ., getLastChild, (, ), ., getString, (, ), ., length, (, ), ), ;, }, current, ., setSourceEncodedPosition, (]
[current, ., getLastChild, (, ), ., getString, (, ), ., length, (, ), ), ;, }, current, ., setSourceEncodedPosition, (]
[current, ., getLastChild, (, ), ., getString, (, ), ., length, (, ), ), ;, }, current, ., setSourceEncodedPosition, (]
[getString, (, ), ., length, (, ), ), ;, }, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +]
[., length, (, ), ), ;, }, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;]
[., length, (, ), ), ;, }, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;]
[), ;, }, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (]
[), ;, }, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (]
[), ;, }, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (]
[), +, FOR_QUOTE, ), ;, current, ., setLength, (, current, ., getString, (, ), ., length, (, ), ), ;]
[FOR_QUOTE, ), ;, current, ., setLength, (, current, ., getString, (, ), ., length, (, ), ), ;, maybeAddToSymbolTable, (]
[(, ), ), ;, maybeAddToSymbolTable, (, syntheticRef, ), ;, }, private, void, maybeAddToSymbolTable, (, Node, n, ), {, if, (]
[(, ), ), ;, maybeAddToSymbolTable, (, syntheticRef, ), ;, }, private, void, maybeAddToSymbolTable, (, Node, n, ), {, if, (]
[), ;, maybeAddToSymbolTable, (, syntheticRef, ), ;, }, private, void, maybeAddToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, !=]
[(, syntheticRef, ), ;, }, private, void, maybeAddToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, !=, null, ), {]
[(, syntheticRef, ), ;, }, private, void, maybeAddToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, !=, null, ), {]
[}, private, void, maybeAddToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, !=, null, ), {, preprocessorSymbolTable, ., addReference, (]
[final, String, namespace, ;, final, String, inputName, ;, UnrecognizedRequire, (, Node, requireNode, ,, String, namespace, ,, String, inputName, ), {]
[final, String, namespace, ;, final, String, inputName, ;, UnrecognizedRequire, (, Node, requireNode, ,, String, namespace, ,, String, inputName, ), {]
[final, String, inputName, ;, UnrecognizedRequire, (, Node, requireNode, ,, String, namespace, ,, String, inputName, ), {, this, ., requireNode, =]
[inputName, ;, UnrecognizedRequire, (, Node, requireNode, ,, String, namespace, ,, String, inputName, ), {, this, ., requireNode, =, requireNode, ;]
[inputName, ;, UnrecognizedRequire, (, Node, requireNode, ,, String, namespace, ,, String, inputName, ), {, this, ., requireNode, =, requireNode, ;]
[Node, requireNode, ,, String, namespace, ,, String, inputName, ), {, this, ., requireNode, =, requireNode, ;, this, ., namespace, =]
[,, String, namespace, ,, String, inputName, ), {, this, ., requireNode, =, requireNode, ;, this, ., namespace, =, namespace, ;]
[,, String, namespace, ,, String, inputName, ), {, this, ., requireNode, =, requireNode, ;, this, ., namespace, =, namespace, ;]
[String, inputName, ), {, this, ., requireNode, =, requireNode, ;, this, ., namespace, =, namespace, ;, this, ., inputName, =]
