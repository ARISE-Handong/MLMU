[), {, super, (, ), ;, }, public, PolygonsSet, (, final, BSPTree, <, Euclidean2D, >, tree, ), {, super, (]
[tree, ), ;, }, public, PolygonsSet, (, final, Collection, <, SubHyperplane, <, Euclidean2D, >, >, boundary, ), {, super, (]
[(, final, double, xMin, ,, final, double, xMax, ,, final, double, yMin, ,, final, double, yMax, ), {, super, (]
[double, xMin, ,, final, double, xMax, ,, final, double, yMin, ,, final, double, yMax, ), {, super, (, boxBoundary, (]
[,, final, double, xMax, ,, final, double, yMin, ,, final, double, yMax, ), {, super, (, boxBoundary, (, xMin, ,]
[double, xMax, ,, final, double, yMin, ,, final, double, yMax, ), {, super, (, boxBoundary, (, xMin, ,, xMax, ,]
[,, final, double, yMin, ,, final, double, yMax, ), {, super, (, boxBoundary, (, xMin, ,, xMax, ,, yMin, ,]
[yMax, ), ), ;, }, public, PolygonsSet, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {, super, (]
[), ;, }, public, PolygonsSet, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {, super, (, verticesToTree, (]
[}, public, PolygonsSet, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {, super, (, verticesToTree, (, hyperplaneThickness, ,]
[double, xMin, ,, final, double, xMax, ,, final, double, yMin, ,, final, double, yMax, ), {, final, Vector2D, minMin, =]
[final, double, xMax, ,, final, double, yMin, ,, final, double, yMax, ), {, final, Vector2D, minMin, =, new, Vector2D, (]
[xMax, ,, final, double, yMin, ,, final, double, yMax, ), {, final, Vector2D, minMin, =, new, Vector2D, (, xMin, ,]
[double, yMax, ), {, final, Vector2D, minMin, =, new, Vector2D, (, xMin, ,, yMin, ), ;, final, Vector2D, minMax, =]
[{, final, Vector2D, minMin, =, new, Vector2D, (, xMin, ,, yMin, ), ;, final, Vector2D, minMax, =, new, Vector2D, (]
[Vector2D, minMin, =, new, Vector2D, (, xMin, ,, yMin, ), ;, final, Vector2D, minMax, =, new, Vector2D, (, xMin, ,]
[,, yMin, ), ;, final, Vector2D, minMax, =, new, Vector2D, (, xMin, ,, yMax, ), ;, final, Vector2D, maxMin, =]
[;, final, Vector2D, minMax, =, new, Vector2D, (, xMin, ,, yMax, ), ;, final, Vector2D, maxMin, =, new, Vector2D, (]
[Vector2D, minMax, =, new, Vector2D, (, xMin, ,, yMax, ), ;, final, Vector2D, maxMin, =, new, Vector2D, (, xMax, ,]
[,, yMax, ), ;, final, Vector2D, maxMin, =, new, Vector2D, (, xMax, ,, yMin, ), ;, final, Vector2D, maxMax, =]
[;, final, Vector2D, maxMin, =, new, Vector2D, (, xMax, ,, yMin, ), ;, final, Vector2D, maxMax, =, new, Vector2D, (]
[Vector2D, maxMin, =, new, Vector2D, (, xMax, ,, yMin, ), ;, final, Vector2D, maxMax, =, new, Vector2D, (, xMax, ,]
[Vector2D, (, xMax, ,, yMin, ), ;, final, Vector2D, maxMax, =, new, Vector2D, (, xMax, ,, yMax, ), ;, return]
[yMin, ), ;, final, Vector2D, maxMax, =, new, Vector2D, (, xMax, ,, yMax, ), ;, return, new, Line, [, ]]
[), ;, final, Vector2D, maxMax, =, new, Vector2D, (, xMax, ,, yMax, ), ;, return, new, Line, [, ], {]
[Vector2D, maxMax, =, new, Vector2D, (, xMax, ,, yMax, ), ;, return, new, Line, [, ], {, new, Line, (]
[=, new, Vector2D, (, xMax, ,, yMax, ), ;, return, new, Line, [, ], {, new, Line, (, minMin, ,]
[(, xMax, ,, yMax, ), ;, return, new, Line, [, ], {, new, Line, (, minMin, ,, maxMin, ), ,]
[yMax, ), ;, return, new, Line, [, ], {, new, Line, (, minMin, ,, maxMin, ), ,, new, Line, (]
[;, return, new, Line, [, ], {, new, Line, (, minMin, ,, maxMin, ), ,, new, Line, (, maxMin, ,]
[Line, [, ], {, new, Line, (, minMin, ,, maxMin, ), ,, new, Line, (, maxMin, ,, maxMax, ), ,]
[{, new, Line, (, minMin, ,, maxMin, ), ,, new, Line, (, maxMin, ,, maxMax, ), ,, new, Line, (]
[Line, (, minMin, ,, maxMin, ), ,, new, Line, (, maxMin, ,, maxMax, ), ,, new, Line, (, maxMax, ,]
[,, maxMin, ), ,, new, Line, (, maxMin, ,, maxMax, ), ,, new, Line, (, maxMax, ,, minMax, ), ,]
[,, new, Line, (, maxMin, ,, maxMax, ), ,, new, Line, (, maxMax, ,, minMax, ), ,, new, Line, (]
[Line, (, maxMin, ,, maxMax, ), ,, new, Line, (, maxMax, ,, minMax, ), ,, new, Line, (, minMax, ,]
[BSPTree, <, Euclidean2D, >, verticesToTree, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {, final, int, n, =]
[BSPTree, <, Euclidean2D, >, verticesToTree, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {, final, int, n, =]
[final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {, final, int, n, =, vertices, ., length, ;, if, (]
[final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {, final, int, n, =, vertices, ., length, ;, if, (]
[hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {, final, int, n, =, vertices, ., length, ;, if, (, n, ==]
[..., vertices, ), {, final, int, n, =, vertices, ., length, ;, if, (, n, ==, 0, ), {, return]
[n, =, vertices, ., length, ;, if, (, n, ==, 0, ), {, return, new, BSPTree, <, Euclidean2D, >, (]
[n, =, vertices, ., length, ;, if, (, n, ==, 0, ), {, return, new, BSPTree, <, Euclidean2D, >, (]
[{, return, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., TRUE, ), ;, }, final, Vertex, [, ], vArray, =]
[BSPTree, <, Euclidean2D, >, (, Boolean, ., TRUE, ), ;, }, final, Vertex, [, ], vArray, =, new, Vertex, []
[), ;, }, final, Vertex, [, ], vArray, =, new, Vertex, [, n, ], ;, for, (, int, i, =]
[}, final, Vertex, [, ], vArray, =, new, Vertex, [, n, ], ;, for, (, int, i, =, 0, ;]
[}, final, Vertex, [, ], vArray, =, new, Vertex, [, n, ], ;, for, (, int, i, =, 0, ;]
[Vertex, [, ], vArray, =, new, Vertex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], vArray, =, new, Vertex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[vArray, =, new, Vertex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[Vertex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[Vertex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, vArray, []
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, vArray, [, i, ], =]
[i, =, 0, ;, i, <, n, ;, ++, i, ), {, vArray, [, i, ], =, new, Vertex, (]
[i, =, 0, ;, i, <, n, ;, ++, i, ), {, vArray, [, i, ], =, new, Vertex, (]
[0, ;, i, <, n, ;, ++, i, ), {, vArray, [, i, ], =, new, Vertex, (, vertices, []
[[, i, ], =, new, Vertex, (, vertices, [, i, ], ), ;, }, List, <, Edge, >, edges, =]
[(, vertices, [, i, ], ), ;, }, List, <, Edge, >, edges, =, new, ArrayList, <, Edge, >, (]
[List, <, Edge, >, edges, =, new, ArrayList, <, Edge, >, (, n, ), ;, for, (, int, i, =]
[Edge, >, edges, =, new, ArrayList, <, Edge, >, (, n, ), ;, for, (, int, i, =, 0, ;]
[Edge, >, edges, =, new, ArrayList, <, Edge, >, (, n, ), ;, for, (, int, i, =, 0, ;]
[edges, =, new, ArrayList, <, Edge, >, (, n, ), ;, for, (, int, i, =, 0, ;, i, <]
[new, ArrayList, <, Edge, >, (, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[ArrayList, <, Edge, >, (, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, Vertex, start, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, Vertex, start, =]
[(, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, Vertex, start, =, vArray, []
[<, n, ;, ++, i, ), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =]
[<, n, ;, ++, i, ), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =]
[;, ++, i, ), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =, vArray, []
[;, ++, i, ), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =, vArray, []
[++, i, ), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =, vArray, [, (]
[++, i, ), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =, vArray, [, (]
[), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =, vArray, [, (, i, +]
[Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =, vArray, [, (, i, +, 1, ), %]
[], ;, final, Vertex, end, =, vArray, [, (, i, +, 1, ), %, n, ], ;, Line, line, =]
[], ;, final, Vertex, end, =, vArray, [, (, i, +, 1, ), %, n, ], ;, Line, line, =]
[end, =, vArray, [, (, i, +, 1, ), %, n, ], ;, Line, line, =, start, ., sharedLineWith, (]
[i, +, 1, ), %, n, ], ;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (]
[i, +, 1, ), %, n, ], ;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (]
[1, ), %, n, ], ;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (, line, ==]
[n, ], ;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (, line, ==, null, ), {]
[;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (, line, ==, null, ), {, line, =]
[=, start, ., sharedLineWith, (, end, ), ;, if, (, line, ==, null, ), {, line, =, new, Line, (]
[=, start, ., sharedLineWith, (, end, ), ;, if, (, line, ==, null, ), {, line, =, new, Line, (]
[), ;, if, (, line, ==, null, ), {, line, =, new, Line, (, start, ., getLocation, (, ), ,]
[), ;, if, (, line, ==, null, ), {, line, =, new, Line, (, start, ., getLocation, (, ), ,]
[{, line, =, new, Line, (, start, ., getLocation, (, ), ,, end, ., getLocation, (, ), ), ;, }]
[{, line, =, new, Line, (, start, ., getLocation, (, ), ,, end, ., getLocation, (, ), ), ;, }]
[Line, (, start, ., getLocation, (, ), ,, end, ., getLocation, (, ), ), ;, }, edges, ., add, (]
[., getLocation, (, ), ,, end, ., getLocation, (, ), ), ;, }, edges, ., add, (, new, Edge, (]
[(, ), ,, end, ., getLocation, (, ), ), ;, }, edges, ., add, (, new, Edge, (, start, ,]
[,, end, ., getLocation, (, ), ), ;, }, edges, ., add, (, new, Edge, (, start, ,, end, ,]
[., add, (, new, Edge, (, start, ,, end, ,, line, ), ), ;, for, (, final, Vertex, vertex, :]
[(, start, ,, end, ,, line, ), ), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (]
[(, start, ,, end, ,, line, ), ), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (]
[(, start, ,, end, ,, line, ), ), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (]
[(, start, ,, end, ,, line, ), ), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (]
[,, end, ,, line, ), ), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=]
[,, line, ), ), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&]
[,, line, ), ), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&]
[), ), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&, vertex, !=]
[;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&, vertex, !=, end, &&]
[;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&, vertex, !=, end, &&]
[;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&, vertex, !=, end, &&]
[Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&, vertex, !=, end, &&, FastMath, ., abs, (]
[Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&, vertex, !=, end, &&, FastMath, ., abs, (]
[), {, if, (, vertex, !=, start, &&, vertex, !=, end, &&, FastMath, ., abs, (, line, ., getOffset, (]
[), {, if, (, vertex, !=, start, &&, vertex, !=, end, &&, FastMath, ., abs, (, line, ., getOffset, (]
[vertex, !=, end, &&, FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), ), <=]
[&&, FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), ), <=, hyperplaneThickness, ), {]
[&&, FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), ), <=, hyperplaneThickness, ), {]
[(, line, ., getOffset, (, vertex, ., getLocation, (, ), ), ), <=, hyperplaneThickness, ), {, vertex, ., bindWith, (]
[hyperplaneThickness, ), {, vertex, ., bindWith, (, line, ), ;, }, }, }, final, BSPTree, <, Euclidean2D, >, tree, =]
[), ;, }, }, }, final, BSPTree, <, Euclidean2D, >, tree, =, new, BSPTree, <, Euclidean2D, >, (, ), ;]
[}, }, }, final, BSPTree, <, Euclidean2D, >, tree, =, new, BSPTree, <, Euclidean2D, >, (, ), ;, insertEdges, (]
[}, final, BSPTree, <, Euclidean2D, >, tree, =, new, BSPTree, <, Euclidean2D, >, (, ), ;, insertEdges, (, hyperplaneThickness, ,]
[BSPTree, <, Euclidean2D, >, tree, =, new, BSPTree, <, Euclidean2D, >, (, ), ;, insertEdges, (, hyperplaneThickness, ,, tree, ,]
[tree, =, new, BSPTree, <, Euclidean2D, >, (, ), ;, insertEdges, (, hyperplaneThickness, ,, tree, ,, edges, ), ;, return]
[hyperplaneThickness, ,, final, BSPTree, <, Euclidean2D, >, node, ,, final, List, <, Edge, >, edges, ), {, int, index, =]
[Euclidean2D, >, node, ,, final, List, <, Edge, >, edges, ), {, int, index, =, 0, ;, Edge, inserted, =]
[final, List, <, Edge, >, edges, ), {, int, index, =, 0, ;, Edge, inserted, =, null, ;, while, (]
[final, List, <, Edge, >, edges, ), {, int, index, =, 0, ;, Edge, inserted, =, null, ;, while, (]
[final, List, <, Edge, >, edges, ), {, int, index, =, 0, ;, Edge, inserted, =, null, ;, while, (]
[<, Edge, >, edges, ), {, int, index, =, 0, ;, Edge, inserted, =, null, ;, while, (, inserted, ==]
[>, edges, ), {, int, index, =, 0, ;, Edge, inserted, =, null, ;, while, (, inserted, ==, null, &&]
[>, edges, ), {, int, index, =, 0, ;, Edge, inserted, =, null, ;, while, (, inserted, ==, null, &&]
[), {, int, index, =, 0, ;, Edge, inserted, =, null, ;, while, (, inserted, ==, null, &&, index, <]
[), {, int, index, =, 0, ;, Edge, inserted, =, null, ;, while, (, inserted, ==, null, &&, index, <]
[Edge, inserted, =, null, ;, while, (, inserted, ==, null, &&, index, <, edges, ., size, (, ), ), {]
[=, null, ;, while, (, inserted, ==, null, &&, index, <, edges, ., size, (, ), ), {, inserted, =]
[=, null, ;, while, (, inserted, ==, null, &&, index, <, edges, ., size, (, ), ), {, inserted, =]
[(, inserted, ==, null, &&, index, <, edges, ., size, (, ), ), {, inserted, =, edges, ., get, (]
[(, inserted, ==, null, &&, index, <, edges, ., size, (, ), ), {, inserted, =, edges, ., get, (]
[<, edges, ., size, (, ), ), {, inserted, =, edges, ., get, (, index, ++, ), ;, if, (]
[<, edges, ., size, (, ), ), {, inserted, =, edges, ., get, (, index, ++, ), ;, if, (]
[<, edges, ., size, (, ), ), {, inserted, =, edges, ., get, (, index, ++, ), ;, if, (]
[), {, inserted, =, edges, ., get, (, index, ++, ), ;, if, (, inserted, ., getNode, (, ), ==]
[., get, (, index, ++, ), ;, if, (, inserted, ., getNode, (, ), ==, null, ), {, if, (]
[., get, (, index, ++, ), ;, if, (, inserted, ., getNode, (, ), ==, null, ), {, if, (]
[++, ), ;, if, (, inserted, ., getNode, (, ), ==, null, ), {, if, (, node, ., insertCut, (]
[++, ), ;, if, (, inserted, ., getNode, (, ), ==, null, ), {, if, (, node, ., insertCut, (]
[(, ), ==, null, ), {, if, (, node, ., insertCut, (, inserted, ., getLine, (, ), ), ), {]
[(, ), ==, null, ), {, if, (, node, ., insertCut, (, inserted, ., getLine, (, ), ), ), {]
[), {, if, (, node, ., insertCut, (, inserted, ., getLine, (, ), ), ), {, inserted, ., setNode, (]
[insertCut, (, inserted, ., getLine, (, ), ), ), {, inserted, ., setNode, (, node, ), ;, }, else, {]
[inserted, ., getLine, (, ), ), ), {, inserted, ., setNode, (, node, ), ;, }, else, {, inserted, =]
[), {, inserted, ., setNode, (, node, ), ;, }, else, {, inserted, =, null, ;, }, }, else, {]
[inserted, ., setNode, (, node, ), ;, }, else, {, inserted, =, null, ;, }, }, else, {, inserted, =]
[;, }, else, {, inserted, =, null, ;, }, }, else, {, inserted, =, null, ;, }, }, if, (]
[;, }, else, {, inserted, =, null, ;, }, }, else, {, inserted, =, null, ;, }, }, if, (]
[else, {, inserted, =, null, ;, }, }, else, {, inserted, =, null, ;, }, }, if, (, inserted, ==]
[inserted, =, null, ;, }, }, if, (, inserted, ==, null, ), {, final, BSPTree, <, Euclidean2D, >, parent, =]
[inserted, =, null, ;, }, }, if, (, inserted, ==, null, ), {, final, BSPTree, <, Euclidean2D, >, parent, =]
[inserted, ==, null, ), {, final, BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent, (, ), ;, if, (]
[inserted, ==, null, ), {, final, BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent, (, ), ;, if, (]
[inserted, ==, null, ), {, final, BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent, (, ), ;, if, (]
[null, ), {, final, BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent, (, ), ;, if, (, parent, ==]
[{, final, BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent, (, ), ;, if, (, parent, ==, null, ||]
[{, final, BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent, (, ), ;, if, (, parent, ==, null, ||]
[BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent, (, ), ;, if, (, parent, ==, null, ||, node, ==]
[BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent, (, ), ;, if, (, parent, ==, null, ||, node, ==]
[., getParent, (, ), ;, if, (, parent, ==, null, ||, node, ==, parent, ., getMinus, (, ), ), {]
[., getParent, (, ), ;, if, (, parent, ==, null, ||, node, ==, parent, ., getMinus, (, ), ), {]
[;, if, (, parent, ==, null, ||, node, ==, parent, ., getMinus, (, ), ), {, node, ., setAttribute, (]
[;, if, (, parent, ==, null, ||, node, ==, parent, ., getMinus, (, ), ), {, node, ., setAttribute, (]
[==, parent, ., getMinus, (, ), ), {, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, else, {]
[==, parent, ., getMinus, (, ), ), {, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, else, {]
[(, ), ), {, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, else, {, node, ., setAttribute, (]
[(, ), ), {, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, else, {, node, ., setAttribute, (]
[node, ., setAttribute, (, Boolean, ., FALSE, ), ;, }, return, ;, }, final, List, <, Edge, >, plusList, =]
[<, Edge, >, plusList, =, new, ArrayList, <, Edge, >, (, ), ;, final, List, <, Edge, >, minusList, =]
[List, <, Edge, >, minusList, =, new, ArrayList, <, Edge, >, (, ), ;, for, (, final, Edge, edge, :]
[=, new, ArrayList, <, Edge, >, (, ), ;, for, (, final, Edge, edge, :, edges, ), {, if, (]
[=, new, ArrayList, <, Edge, >, (, ), ;, for, (, final, Edge, edge, :, edges, ), {, if, (]
[ArrayList, <, Edge, >, (, ), ;, for, (, final, Edge, edge, :, edges, ), {, if, (, edge, !=]
[for, (, final, Edge, edge, :, edges, ), {, if, (, edge, !=, inserted, ), {, final, double, startOffset, =]
[for, (, final, Edge, edge, :, edges, ), {, if, (, edge, !=, inserted, ), {, final, double, startOffset, =]
[for, (, final, Edge, edge, :, edges, ), {, if, (, edge, !=, inserted, ), {, final, double, startOffset, =]
[{, if, (, edge, !=, inserted, ), {, final, double, startOffset, =, inserted, ., getLine, (, ), ., getOffset, (]
[{, if, (, edge, !=, inserted, ), {, final, double, startOffset, =, inserted, ., getLine, (, ), ., getOffset, (]
[{, if, (, edge, !=, inserted, ), {, final, double, startOffset, =, inserted, ., getLine, (, ), ., getOffset, (]
[(, ), ., getOffset, (, edge, ., getStart, (, ), ., getLocation, (, ), ), ;, final, double, endOffset, =]
[(, ), ., getOffset, (, edge, ., getStart, (, ), ., getLocation, (, ), ), ;, final, double, endOffset, =]
[(, ), ., getOffset, (, edge, ., getStart, (, ), ., getLocation, (, ), ), ;, final, double, endOffset, =]
[(, ), ., getLocation, (, ), ), ;, final, double, endOffset, =, inserted, ., getLine, (, ), ., getOffset, (]
[(, ), ., getLocation, (, ), ), ;, final, double, endOffset, =, inserted, ., getLine, (, ), ., getOffset, (]
[(, ), ., getLocation, (, ), ), ;, final, double, endOffset, =, inserted, ., getLine, (, ), ., getOffset, (]
[getLine, (, ), ., getOffset, (, edge, ., getEnd, (, ), ., getLocation, (, ), ), ;, Side, startSide, =]
[getLine, (, ), ., getOffset, (, edge, ., getEnd, (, ), ., getLocation, (, ), ), ;, Side, startSide, =]
[(, ), ., getOffset, (, edge, ., getEnd, (, ), ., getLocation, (, ), ), ;, Side, startSide, =, (]
[(, ), ., getOffset, (, edge, ., getEnd, (, ), ., getLocation, (, ), ), ;, Side, startSide, =, (]
[(, ), ., getOffset, (, edge, ., getEnd, (, ), ., getLocation, (, ), ), ;, Side, startSide, =, (]
[(, edge, ., getEnd, (, ), ., getLocation, (, ), ), ;, Side, startSide, =, (, FastMath, ., abs, (]
[getEnd, (, ), ., getLocation, (, ), ), ;, Side, startSide, =, (, FastMath, ., abs, (, startOffset, ), <=]
[., getLocation, (, ), ), ;, Side, startSide, =, (, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?]
[., getLocation, (, ), ), ;, Side, startSide, =, (, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?]
[), ;, Side, startSide, =, (, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :]
[;, Side, startSide, =, (, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (]
[;, Side, startSide, =, (, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (]
[Side, startSide, =, (, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (]
[Side, startSide, =, (, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (]
[=, (, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, startOffset, <]
[., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, startOffset, <, 0, ), ?]
[., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, startOffset, <, 0, ), ?]
[), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :]
[), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :]
[:, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =]
[:, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =]
[(, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =, (]
[(, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =, (]
[(, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =, (]
[0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =, (, FastMath, ., abs, (]
[Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=]
[:, Side, ., PLUS, ), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?]
[:, Side, ., PLUS, ), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?]
[), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :]
[;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (]
[;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (]
[Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (]
[Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (]
[=, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, endOffset, <]
[., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, endOffset, <, 0, ), ?]
[., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, endOffset, <, 0, ), ?]
[), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, endOffset, <, 0, ), ?, Side, ., MINUS, :]
[), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, endOffset, <, 0, ), ?, Side, ., MINUS, :]
[HYPER, :, (, (, endOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, switch, (]
[endOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, switch, (, startSide, ), {, case]
[?, Side, ., MINUS, :, Side, ., PLUS, ), ;, switch, (, startSide, ), {, case, PLUS, :, if, (]
[?, Side, ., MINUS, :, Side, ., PLUS, ), ;, switch, (, startSide, ), {, case, PLUS, :, if, (]
[., MINUS, :, Side, ., PLUS, ), ;, switch, (, startSide, ), {, case, PLUS, :, if, (, endSide, ==]
[., MINUS, :, Side, ., PLUS, ), ;, switch, (, startSide, ), {, case, PLUS, :, if, (, endSide, ==]
[(, startSide, ), {, case, PLUS, :, if, (, endSide, ==, Side, ., MINUS, ), {, final, Vertex, splitPoint, =]
[(, startSide, ), {, case, PLUS, :, if, (, endSide, ==, Side, ., MINUS, ), {, final, Vertex, splitPoint, =]
[case, PLUS, :, if, (, endSide, ==, Side, ., MINUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (]
[case, PLUS, :, if, (, endSide, ==, Side, ., MINUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (]
[Side, ., MINUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;]
[Side, ., MINUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;]
[{, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add, (]
[{, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add, (]
[split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;]
[split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;]
[getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;, plusList, ., add, (]
[getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;, plusList, ., add, (]
[., getOutgoing, (, ), ), ;, plusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;, }, else, {]
[., getOutgoing, (, ), ), ;, plusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;, }, else, {]
[), ;, plusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;, }, else, {, plusList, ., add, (]
[., getIncoming, (, ), ), ;, }, else, {, plusList, ., add, (, edge, ), ;, }, break, ;, case]
[), ;, }, else, {, plusList, ., add, (, edge, ), ;, }, break, ;, case, MINUS, :, if, (]
[), ;, }, else, {, plusList, ., add, (, edge, ), ;, }, break, ;, case, MINUS, :, if, (]
[}, else, {, plusList, ., add, (, edge, ), ;, }, break, ;, case, MINUS, :, if, (, endSide, ==]
[}, else, {, plusList, ., add, (, edge, ), ;, }, break, ;, case, MINUS, :, if, (, endSide, ==]
[;, }, break, ;, case, MINUS, :, if, (, endSide, ==, Side, ., PLUS, ), {, final, Vertex, splitPoint, =]
[;, }, break, ;, case, MINUS, :, if, (, endSide, ==, Side, ., PLUS, ), {, final, Vertex, splitPoint, =]
[case, MINUS, :, if, (, endSide, ==, Side, ., PLUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (]
[case, MINUS, :, if, (, endSide, ==, Side, ., PLUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (]
[Side, ., PLUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;]
[Side, ., PLUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;]
[{, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add, (]
[{, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add, (]
[split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;]
[split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;]
[getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;, plusList, ., add, (]
[getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;, plusList, ., add, (]
[., getIncoming, (, ), ), ;, plusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;, }, else, {]
[., getIncoming, (, ), ), ;, plusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;, }, else, {]
[), ;, plusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;, }, else, {, minusList, ., add, (]
[), ), ;, }, else, {, minusList, ., add, (, edge, ), ;, }, break, ;, default, :, if, (]
[), ), ;, }, else, {, minusList, ., add, (, edge, ), ;, }, break, ;, default, :, if, (]
[;, }, else, {, minusList, ., add, (, edge, ), ;, }, break, ;, default, :, if, (, endSide, ==]
[;, }, else, {, minusList, ., add, (, edge, ), ;, }, break, ;, default, :, if, (, endSide, ==]
[., add, (, edge, ), ;, }, break, ;, default, :, if, (, endSide, ==, Side, ., PLUS, ), {]
[., add, (, edge, ), ;, }, break, ;, default, :, if, (, endSide, ==, Side, ., PLUS, ), {]
[), ;, }, break, ;, default, :, if, (, endSide, ==, Side, ., PLUS, ), {, plusList, ., add, (]
[if, (, endSide, ==, Side, ., PLUS, ), {, plusList, ., add, (, edge, ), ;, }, else, if, (]
[if, (, endSide, ==, Side, ., PLUS, ), {, plusList, ., add, (, edge, ), ;, }, else, if, (]
[endSide, ==, Side, ., PLUS, ), {, plusList, ., add, (, edge, ), ;, }, else, if, (, endSide, ==]
[endSide, ==, Side, ., PLUS, ), {, plusList, ., add, (, edge, ), ;, }, else, if, (, endSide, ==]
[), {, plusList, ., add, (, edge, ), ;, }, else, if, (, endSide, ==, Side, ., MINUS, ), {]
[), {, plusList, ., add, (, edge, ), ;, }, else, if, (, endSide, ==, Side, ., MINUS, ), {]
[add, (, edge, ), ;, }, else, if, (, endSide, ==, Side, ., MINUS, ), {, minusList, ., add, (]
[Side, ., MINUS, ), {, minusList, ., add, (, edge, ), ;, }, break, ;, }, }, }, if, (]
[., MINUS, ), {, minusList, ., add, (, edge, ), ;, }, break, ;, }, }, }, if, (, !]
[., MINUS, ), {, minusList, ., add, (, edge, ), ;, }, break, ;, }, }, }, if, (, !]
[(, edge, ), ;, }, break, ;, }, }, }, if, (, !, plusList, ., isEmpty, (, ), ), {]
[), ;, }, break, ;, }, }, }, if, (, !, plusList, ., isEmpty, (, ), ), {, insertEdges, (]
[}, break, ;, }, }, }, if, (, !, plusList, ., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness, ,]
[}, break, ;, }, }, }, if, (, !, plusList, ., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness, ,]
[if, (, !, plusList, ., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getPlus, (, ), ,]
[(, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getPlus, (, ), ,, plusList, ), ;, }, else, {]
[(, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getPlus, (, ), ,, plusList, ), ;, }, else, {]
[(, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getPlus, (, ), ,, plusList, ), ;, }, else, {]
[node, ., getPlus, (, ), ,, plusList, ), ;, }, else, {, node, ., getPlus, (, ), ., setAttribute, (]
[node, ., getPlus, (, ), ,, plusList, ), ;, }, else, {, node, ., getPlus, (, ), ., setAttribute, (]
[;, }, else, {, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, }, if, (]
[}, else, {, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, }, if, (, !]
[}, else, {, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, }, if, (, !]
[), ., setAttribute, (, Boolean, ., FALSE, ), ;, }, if, (, !, minusList, ., isEmpty, (, ), ), {]
[setAttribute, (, Boolean, ., FALSE, ), ;, }, if, (, !, minusList, ., isEmpty, (, ), ), {, insertEdges, (]
[Boolean, ., FALSE, ), ;, }, if, (, !, minusList, ., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness, ,]
[Boolean, ., FALSE, ), ;, }, if, (, !, minusList, ., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness, ,]
[if, (, !, minusList, ., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getMinus, (, ), ,]
[(, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getMinus, (, ), ,, minusList, ), ;, }, else, {]
[(, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getMinus, (, ), ,, minusList, ), ;, }, else, {]
[(, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getMinus, (, ), ,, minusList, ), ;, }, else, {]
[node, ., getMinus, (, ), ,, minusList, ), ;, }, else, {, node, ., getMinus, (, ), ., setAttribute, (]
[node, ., getMinus, (, ), ,, minusList, ), ;, }, else, {, node, ., getMinus, (, ), ., setAttribute, (]
[private, Edge, outgoing, ;, private, final, List, <, Line, >, lines, ;, public, Vertex, (, final, Vector2D, location, ), {]
[private, Edge, outgoing, ;, private, final, List, <, Line, >, lines, ;, public, Vertex, (, final, Vector2D, location, ), {]
[private, final, List, <, Line, >, lines, ;, public, Vertex, (, final, Vector2D, location, ), {, this, ., location, =]
[List, <, Line, >, lines, ;, public, Vertex, (, final, Vector2D, location, ), {, this, ., location, =, location, ;]
[List, <, Line, >, lines, ;, public, Vertex, (, final, Vector2D, location, ), {, this, ., location, =, location, ;]
[lines, ;, public, Vertex, (, final, Vector2D, location, ), {, this, ., location, =, location, ;, this, ., incoming, =]
[public, Vertex, (, final, Vector2D, location, ), {, this, ., location, =, location, ;, this, ., incoming, =, null, ;]
[public, Vertex, (, final, Vector2D, location, ), {, this, ., location, =, location, ;, this, ., incoming, =, null, ;]
[Vector2D, location, ), {, this, ., location, =, location, ;, this, ., incoming, =, null, ;, this, ., outgoing, =]
[), {, this, ., location, =, location, ;, this, ., incoming, =, null, ;, this, ., outgoing, =, null, ;]
[), {, this, ., location, =, location, ;, this, ., incoming, =, null, ;, this, ., outgoing, =, null, ;]
[location, =, location, ;, this, ., incoming, =, null, ;, this, ., outgoing, =, null, ;, this, ., lines, =]
[this, ., lines, =, new, ArrayList, <, Line, >, (, ), ;, }, public, Vector2D, getLocation, (, ), {, return]
[}, public, Vector2D, getLocation, (, ), {, return, location, ;, }, public, void, bindWith, (, final, Line, line, ), {]
[}, public, Vector2D, getLocation, (, ), {, return, location, ;, }, public, void, bindWith, (, final, Line, line, ), {]
[(, ), {, return, location, ;, }, public, void, bindWith, (, final, Line, line, ), {, lines, ., add, (]
[(, line, ), ;, }, public, Line, sharedLineWith, (, final, Vertex, vertex, ), {, for, (, final, Line, line1, :]
[final, Vertex, vertex, ), {, for, (, final, Line, line1, :, lines, ), {, for, (, final, Line, line2, :]
[final, Vertex, vertex, ), {, for, (, final, Line, line1, :, lines, ), {, for, (, final, Line, line2, :]
[final, Line, line1, :, lines, ), {, for, (, final, Line, line2, :, vertex, ., lines, ), {, if, (]
[final, Line, line1, :, lines, ), {, for, (, final, Line, line2, :, vertex, ., lines, ), {, if, (]
[line1, :, lines, ), {, for, (, final, Line, line2, :, vertex, ., lines, ), {, if, (, line1, ==]
[{, for, (, final, Line, line2, :, vertex, ., lines, ), {, if, (, line1, ==, line2, ), {, return]
[:, vertex, ., lines, ), {, if, (, line1, ==, line2, ), {, return, line1, ;, }, }, }, return]
[{, return, line1, ;, }, }, }, return, null, ;, }, public, void, setIncoming, (, final, Edge, incoming, ), {]
[{, return, line1, ;, }, }, }, return, null, ;, }, public, void, setIncoming, (, final, Edge, incoming, ), {]
[}, }, }, return, null, ;, }, public, void, setIncoming, (, final, Edge, incoming, ), {, this, ., incoming, =]
[}, return, null, ;, }, public, void, setIncoming, (, final, Edge, incoming, ), {, this, ., incoming, =, incoming, ;]
[null, ;, }, public, void, setIncoming, (, final, Edge, incoming, ), {, this, ., incoming, =, incoming, ;, bindWith, (]
[null, ;, }, public, void, setIncoming, (, final, Edge, incoming, ), {, this, ., incoming, =, incoming, ;, bindWith, (]
[=, incoming, ;, bindWith, (, incoming, ., getLine, (, ), ), ;, }, public, Edge, getIncoming, (, ), {, return]
[}, public, Edge, getIncoming, (, ), {, return, incoming, ;, }, public, void, setOutgoing, (, final, Edge, outgoing, ), {]
[}, public, Edge, getIncoming, (, ), {, return, incoming, ;, }, public, void, setOutgoing, (, final, Edge, outgoing, ), {]
[(, ), {, return, incoming, ;, }, public, void, setOutgoing, (, final, Edge, outgoing, ), {, this, ., outgoing, =]
[{, return, incoming, ;, }, public, void, setOutgoing, (, final, Edge, outgoing, ), {, this, ., outgoing, =, outgoing, ;]
[incoming, ;, }, public, void, setOutgoing, (, final, Edge, outgoing, ), {, this, ., outgoing, =, outgoing, ;, bindWith, (]
[incoming, ;, }, public, void, setOutgoing, (, final, Edge, outgoing, ), {, this, ., outgoing, =, outgoing, ;, bindWith, (]
[=, outgoing, ;, bindWith, (, outgoing, ., getLine, (, ), ), ;, }, public, Edge, getOutgoing, (, ), {, return]
[Euclidean2D, >, node, ;, public, Edge, (, final, Vertex, start, ,, final, Vertex, end, ,, final, Line, line, ), {]
[Euclidean2D, >, node, ;, public, Edge, (, final, Vertex, start, ,, final, Vertex, end, ,, final, Line, line, ), {]
[public, Edge, (, final, Vertex, start, ,, final, Vertex, end, ,, final, Line, line, ), {, this, ., start, =]
[(, final, Vertex, start, ,, final, Vertex, end, ,, final, Line, line, ), {, this, ., start, =, start, ;]
[(, final, Vertex, start, ,, final, Vertex, end, ,, final, Line, line, ), {, this, ., start, =, start, ;]
[,, final, Vertex, end, ,, final, Line, line, ), {, this, ., start, =, start, ;, this, ., end, =]
[Vertex, end, ,, final, Line, line, ), {, this, ., start, =, start, ;, this, ., end, =, end, ;]
[Vertex, end, ,, final, Line, line, ), {, this, ., start, =, start, ;, this, ., end, =, end, ;]
[Line, line, ), {, this, ., start, =, start, ;, this, ., end, =, end, ;, this, ., line, =]
[), {, this, ., start, =, start, ;, this, ., end, =, end, ;, this, ., line, =, line, ;]
[), {, this, ., start, =, start, ;, this, ., end, =, end, ;, this, ., line, =, line, ;]
[start, =, start, ;, this, ., end, =, end, ;, this, ., line, =, line, ;, this, ., node, =]
[start, ;, this, ., end, =, end, ;, this, ., line, =, line, ;, this, ., node, =, null, ;]
[start, ;, this, ., end, =, end, ;, this, ., line, =, line, ;, this, ., node, =, null, ;]
[end, =, end, ;, this, ., line, =, line, ;, this, ., node, =, null, ;, start, ., setOutgoing, (]
[;, this, ., line, =, line, ;, this, ., node, =, null, ;, start, ., setOutgoing, (, this, ), ;]
[;, this, ., line, =, line, ;, this, ., node, =, null, ;, start, ., setOutgoing, (, this, ), ;]
[=, line, ;, this, ., node, =, null, ;, start, ., setOutgoing, (, this, ), ;, end, ., setIncoming, (]
[setOutgoing, (, this, ), ;, end, ., setIncoming, (, this, ), ;, }, public, Vertex, getStart, (, ), {, return]
[), ;, }, public, Vertex, getStart, (, ), {, return, start, ;, }, public, Vertex, getEnd, (, ), {, return]
[start, ;, }, public, Vertex, getEnd, (, ), {, return, end, ;, }, public, Line, getLine, (, ), {, return]
[getLine, (, ), {, return, line, ;, }, public, void, setNode, (, final, BSPTree, <, Euclidean2D, >, node, ), {]
[getLine, (, ), {, return, line, ;, }, public, void, setNode, (, final, BSPTree, <, Euclidean2D, >, node, ), {]
[return, line, ;, }, public, void, setNode, (, final, BSPTree, <, Euclidean2D, >, node, ), {, this, ., node, =]
[node, ), {, this, ., node, =, node, ;, }, public, BSPTree, <, Euclidean2D, >, getNode, (, ), {, return]
[(, ), {, return, node, ;, }, public, Vertex, split, (, final, Line, splitLine, ), {, final, Vertex, splitVertex, =]
[return, node, ;, }, public, Vertex, split, (, final, Line, splitLine, ), {, final, Vertex, splitVertex, =, new, Vertex, (]
[return, node, ;, }, public, Vertex, split, (, final, Line, splitLine, ), {, final, Vertex, splitVertex, =, new, Vertex, (]
[public, Vertex, split, (, final, Line, splitLine, ), {, final, Vertex, splitVertex, =, new, Vertex, (, line, ., intersection, (]
[final, Line, splitLine, ), {, final, Vertex, splitVertex, =, new, Vertex, (, line, ., intersection, (, splitLine, ), ), ;]
[final, Line, splitLine, ), {, final, Vertex, splitVertex, =, new, Vertex, (, line, ., intersection, (, splitLine, ), ), ;]
[{, final, Vertex, splitVertex, =, new, Vertex, (, line, ., intersection, (, splitLine, ), ), ;, splitVertex, ., bindWith, (]
[(, line, ., intersection, (, splitLine, ), ), ;, splitVertex, ., bindWith, (, splitLine, ), ;, final, Edge, startHalf, =]
[intersection, (, splitLine, ), ), ;, splitVertex, ., bindWith, (, splitLine, ), ;, final, Edge, startHalf, =, new, Edge, (]
[splitLine, ), ), ;, splitVertex, ., bindWith, (, splitLine, ), ;, final, Edge, startHalf, =, new, Edge, (, start, ,]
[), ;, splitVertex, ., bindWith, (, splitLine, ), ;, final, Edge, startHalf, =, new, Edge, (, start, ,, splitVertex, ,]
[), ;, final, Edge, startHalf, =, new, Edge, (, start, ,, splitVertex, ,, line, ), ;, final, Edge, endHalf, =]
[Edge, startHalf, =, new, Edge, (, start, ,, splitVertex, ,, line, ), ;, final, Edge, endHalf, =, new, Edge, (]
[=, new, Edge, (, start, ,, splitVertex, ,, line, ), ;, final, Edge, endHalf, =, new, Edge, (, splitVertex, ,]
[Edge, (, start, ,, splitVertex, ,, line, ), ;, final, Edge, endHalf, =, new, Edge, (, splitVertex, ,, end, ,]
[,, splitVertex, ,, line, ), ;, final, Edge, endHalf, =, new, Edge, (, splitVertex, ,, end, ,, line, ), ;]
[,, splitVertex, ,, line, ), ;, final, Edge, endHalf, =, new, Edge, (, splitVertex, ,, end, ,, line, ), ;]
[), ;, final, Edge, endHalf, =, new, Edge, (, splitVertex, ,, end, ,, line, ), ;, startHalf, ., node, =]
[final, Edge, endHalf, =, new, Edge, (, splitVertex, ,, end, ,, line, ), ;, startHalf, ., node, =, node, ;]
[final, Edge, endHalf, =, new, Edge, (, splitVertex, ,, end, ,, line, ), ;, startHalf, ., node, =, node, ;]
[new, Edge, (, splitVertex, ,, end, ,, line, ), ;, startHalf, ., node, =, node, ;, endHalf, ., node, =]
[splitVertex, ,, end, ,, line, ), ;, startHalf, ., node, =, node, ;, endHalf, ., node, =, node, ;, return]
[return, splitVertex, ;, }, }, @, Override, public, PolygonsSet, buildNew, (, final, BSPTree, <, Euclidean2D, >, tree, ), {, return]
[}, }, @, Override, public, PolygonsSet, buildNew, (, final, BSPTree, <, Euclidean2D, >, tree, ), {, return, new, PolygonsSet, (]
[tree, ), ;, }, @, Override, protected, void, computeGeometricalProperties, (, ), {, final, Vector2D, [, ], [, ], v, =]
[protected, void, computeGeometricalProperties, (, ), {, final, Vector2D, [, ], [, ], v, =, getVertices, (, ), ;, if, (]
[protected, void, computeGeometricalProperties, (, ), {, final, Vector2D, [, ], [, ], v, =, getVertices, (, ), ;, if, (]
[protected, void, computeGeometricalProperties, (, ), {, final, Vector2D, [, ], [, ], v, =, getVertices, (, ), ;, if, (]
[), {, final, Vector2D, [, ], [, ], v, =, getVertices, (, ), ;, if, (, v, ., length, ==]
[getVertices, (, ), ;, if, (, v, ., length, ==, 0, ), {, final, BSPTree, <, Euclidean2D, >, tree, =]
[), ;, if, (, v, ., length, ==, 0, ), {, final, BSPTree, <, Euclidean2D, >, tree, =, getTree, (]
[., length, ==, 0, ), {, final, BSPTree, <, Euclidean2D, >, tree, =, getTree, (, false, ), ;, if, (]
[., length, ==, 0, ), {, final, BSPTree, <, Euclidean2D, >, tree, =, getTree, (, false, ), ;, if, (]
[., length, ==, 0, ), {, final, BSPTree, <, Euclidean2D, >, tree, =, getTree, (, false, ), ;, if, (]
[., length, ==, 0, ), {, final, BSPTree, <, Euclidean2D, >, tree, =, getTree, (, false, ), ;, if, (]
[final, BSPTree, <, Euclidean2D, >, tree, =, getTree, (, false, ), ;, if, (, tree, ., getCut, (, ), ==]
[<, Euclidean2D, >, tree, =, getTree, (, false, ), ;, if, (, tree, ., getCut, (, ), ==, null, &&]
[tree, =, getTree, (, false, ), ;, if, (, tree, ., getCut, (, ), ==, null, &&, (, Boolean, )]
[tree, =, getTree, (, false, ), ;, if, (, tree, ., getCut, (, ), ==, null, &&, (, Boolean, )]
[if, (, tree, ., getCut, (, ), ==, null, &&, (, Boolean, ), tree, ., getAttribute, (, ), ), {]
[tree, ., getCut, (, ), ==, null, &&, (, Boolean, ), tree, ., getAttribute, (, ), ), {, setSize, (]
[tree, ., getCut, (, ), ==, null, &&, (, Boolean, ), tree, ., getAttribute, (, ), ), {, setSize, (]
[==, null, &&, (, Boolean, ), tree, ., getAttribute, (, ), ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;]
[&&, (, Boolean, ), tree, ., getAttribute, (, ), ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (]
[&&, (, Boolean, ), tree, ., getAttribute, (, ), ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (]
[), ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {]
[{, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (]
[Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, 0, ), ;]
[POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, 0, ), ;, setBarycenter, (]
[setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, 0, ), ;, setBarycenter, (, new, Vector2D, (]
[Vector2D, ., NaN, ), ;, }, else, {, setSize, (, 0, ), ;, setBarycenter, (, new, Vector2D, (, 0, ,]
[(, 0, ), ;, setBarycenter, (, new, Vector2D, (, 0, ,, 0, ), ), ;, }, }, else, if, (]
[(, 0, ), ;, setBarycenter, (, new, Vector2D, (, 0, ,, 0, ), ), ;, }, }, else, if, (]
[(, 0, ), ;, setBarycenter, (, new, Vector2D, (, 0, ,, 0, ), ), ;, }, }, else, if, (]
[(, 0, ), ;, setBarycenter, (, new, Vector2D, (, 0, ,, 0, ), ), ;, }, }, else, if, (]
[), ;, setBarycenter, (, new, Vector2D, (, 0, ,, 0, ), ), ;, }, }, else, if, (, v, []
[(, new, Vector2D, (, 0, ,, 0, ), ), ;, }, }, else, if, (, v, [, 0, ], []
[(, 0, ,, 0, ), ), ;, }, }, else, if, (, v, [, 0, ], [, 0, ], ==]
[0, ), ), ;, }, }, else, if, (, v, [, 0, ], [, 0, ], ==, null, ), {]
[), ;, }, }, else, if, (, v, [, 0, ], [, 0, ], ==, null, ), {, setSize, (]
[), ;, }, }, else, if, (, v, [, 0, ], [, 0, ], ==, null, ), {, setSize, (]
[if, (, v, [, 0, ], [, 0, ], ==, null, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;]
[v, [, 0, ], [, 0, ], ==, null, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (]
[v, [, 0, ], [, 0, ], ==, null, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (]
[setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, double, sum, =]
[), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, double, sum, =, 0, ;, double, sumX, =]
[., NaN, ), ;, }, else, {, double, sum, =, 0, ;, double, sumX, =, 0, ;, double, sumY, =]
[=, 0, ;, double, sumX, =, 0, ;, double, sumY, =, 0, ;, for, (, Vector2D, [, ], loop, :]
[0, ;, double, sumY, =, 0, ;, for, (, Vector2D, [, ], loop, :, v, ), {, double, x1, =]
[0, ;, double, sumY, =, 0, ;, for, (, Vector2D, [, ], loop, :, v, ), {, double, x1, =]
[0, ;, double, sumY, =, 0, ;, for, (, Vector2D, [, ], loop, :, v, ), {, double, x1, =]
[double, sumY, =, 0, ;, for, (, Vector2D, [, ], loop, :, v, ), {, double, x1, =, loop, []
[double, sumY, =, 0, ;, for, (, Vector2D, [, ], loop, :, v, ), {, double, x1, =, loop, []
[double, sumY, =, 0, ;, for, (, Vector2D, [, ], loop, :, v, ), {, double, x1, =, loop, []
[;, for, (, Vector2D, [, ], loop, :, v, ), {, double, x1, =, loop, [, loop, ., length, -]
[{, double, x1, =, loop, [, loop, ., length, -, 1, ], ., getX, (, ), ;, double, y1, =]
[{, double, x1, =, loop, [, loop, ., length, -, 1, ], ., getX, (, ), ;, double, y1, =]
[{, double, x1, =, loop, [, loop, ., length, -, 1, ], ., getX, (, ), ;, double, y1, =]
[x1, =, loop, [, loop, ., length, -, 1, ], ., getX, (, ), ;, double, y1, =, loop, []
[x1, =, loop, [, loop, ., length, -, 1, ], ., getX, (, ), ;, double, y1, =, loop, []
[x1, =, loop, [, loop, ., length, -, 1, ], ., getX, (, ), ;, double, y1, =, loop, []
[loop, ., length, -, 1, ], ., getX, (, ), ;, double, y1, =, loop, [, loop, ., length, -]
[=, loop, [, loop, ., length, -, 1, ], ., getY, (, ), ;, for, (, final, Vector2D, point, :]
[1, ], ., getY, (, ), ;, for, (, final, Vector2D, point, :, loop, ), {, final, double, x0, =]
[;, for, (, final, Vector2D, point, :, loop, ), {, final, double, x0, =, x1, ;, final, double, y0, =]
[(, final, Vector2D, point, :, loop, ), {, final, double, x0, =, x1, ;, final, double, y0, =, y1, ;]
[Vector2D, point, :, loop, ), {, final, double, x0, =, x1, ;, final, double, y0, =, y1, ;, x1, =]
[Vector2D, point, :, loop, ), {, final, double, x0, =, x1, ;, final, double, y0, =, y1, ;, x1, =]
[final, double, x0, =, x1, ;, final, double, y0, =, y1, ;, x1, =, point, ., getX, (, ), ;]
[x0, =, x1, ;, final, double, y0, =, y1, ;, x1, =, point, ., getX, (, ), ;, y1, =]
[x0, =, x1, ;, final, double, y0, =, y1, ;, x1, =, point, ., getX, (, ), ;, y1, =]
[x1, =, point, ., getX, (, ), ;, y1, =, point, ., getY, (, ), ;, final, double, factor, =]
[x1, =, point, ., getX, (, ), ;, y1, =, point, ., getY, (, ), ;, final, double, factor, =]
[x1, =, point, ., getX, (, ), ;, y1, =, point, ., getY, (, ), ;, final, double, factor, =]
[point, ., getX, (, ), ;, y1, =, point, ., getY, (, ), ;, final, double, factor, =, x0, *]
[getX, (, ), ;, y1, =, point, ., getY, (, ), ;, final, double, factor, =, x0, *, y1, -]
[getX, (, ), ;, y1, =, point, ., getY, (, ), ;, final, double, factor, =, x0, *, y1, -]
[), ;, y1, =, point, ., getY, (, ), ;, final, double, factor, =, x0, *, y1, -, y0, *]
[y1, =, point, ., getY, (, ), ;, final, double, factor, =, x0, *, y1, -, y0, *, x1, ;]
[point, ., getY, (, ), ;, final, double, factor, =, x0, *, y1, -, y0, *, x1, ;, sum, +=]
[getY, (, ), ;, final, double, factor, =, x0, *, y1, -, y0, *, x1, ;, sum, +=, factor, ;]
[), ;, final, double, factor, =, x0, *, y1, -, y0, *, x1, ;, sum, +=, factor, ;, sumX, +=]
[), ;, final, double, factor, =, x0, *, y1, -, y0, *, x1, ;, sum, +=, factor, ;, sumX, +=]
[final, double, factor, =, x0, *, y1, -, y0, *, x1, ;, sum, +=, factor, ;, sumX, +=, factor, *]
[double, factor, =, x0, *, y1, -, y0, *, x1, ;, sum, +=, factor, ;, sumX, +=, factor, *, (]
[double, factor, =, x0, *, y1, -, y0, *, x1, ;, sum, +=, factor, ;, sumX, +=, factor, *, (]
[=, x0, *, y1, -, y0, *, x1, ;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +]
[y1, -, y0, *, x1, ;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;]
[y0, *, x1, ;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=]
[y0, *, x1, ;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=]
[x1, ;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=, factor, *]
[;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=, factor, *, (]
[;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=, factor, *, (]
[+=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=, factor, *, (, y0, +]
[(, x0, +, x1, ), ;, sumY, +=, factor, *, (, y0, +, y1, ), ;, }, }, if, (]
[(, x0, +, x1, ), ;, sumY, +=, factor, *, (, y0, +, y1, ), ;, }, }, if, (]
[+, x1, ), ;, sumY, +=, factor, *, (, y0, +, y1, ), ;, }, }, if, (, sum, <]
[;, sumY, +=, factor, *, (, y0, +, y1, ), ;, }, }, if, (, sum, <, 0, ), {]
[+=, factor, *, (, y0, +, y1, ), ;, }, }, if, (, sum, <, 0, ), {, setSize, (]
[+=, factor, *, (, y0, +, y1, ), ;, }, }, if, (, sum, <, 0, ), {, setSize, (]
[+, y1, ), ;, }, }, if, (, sum, <, 0, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;]
[), ;, }, }, if, (, sum, <, 0, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (]
[), ;, }, }, if, (, sum, <, 0, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (]
[0, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {]
[{, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (]
[{, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (]
[(, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, sum, /]
[POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, sum, /, 2, ), ;]
[;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter, (]
[Vector2D, ., NaN, ), ;, }, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (]
[Vector2D, ., NaN, ), ;, }, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (]
[NaN, ), ;, }, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /]
[), ;, }, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (]
[), ;, }, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (]
[}, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *]
[setSize, (, sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,]
[setSize, (, sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,]
[sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,, sumY, /]
[/, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,, sumY, /, (]
[/, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,, sumY, /, (]
[), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,, sumY, /, (, 3, *]
[sum, ), ), ), ;, }, }, }, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (]
[sum, ), ), ), ;, }, }, }, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (]
[), ), ;, }, }, }, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (, vertices, ==]
[}, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (, vertices, ==, null, ), {, if, (]
[}, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (, vertices, ==, null, ), {, if, (]
[}, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (, vertices, ==, null, ), {, if, (]
[Vector2D, [, ], [, ], getVertices, (, ), {, if, (, vertices, ==, null, ), {, if, (, getTree, (]
[), {, if, (, vertices, ==, null, ), {, if, (, getTree, (, false, ), ., getCut, (, ), ==]
[(, vertices, ==, null, ), {, if, (, getTree, (, false, ), ., getCut, (, ), ==, null, ), {]
[==, null, ), {, if, (, getTree, (, false, ), ., getCut, (, ), ==, null, ), {, vertices, =]
[{, if, (, getTree, (, false, ), ., getCut, (, ), ==, null, ), {, vertices, =, new, Vector2D, []
[null, ), {, vertices, =, new, Vector2D, [, 0, ], [, ], ;, }, else, {, final, SegmentsBuilder, visitor, =]
[new, Vector2D, [, 0, ], [, ], ;, }, else, {, final, SegmentsBuilder, visitor, =, new, SegmentsBuilder, (, ), ;]
[new, Vector2D, [, 0, ], [, ], ;, }, else, {, final, SegmentsBuilder, visitor, =, new, SegmentsBuilder, (, ), ;]
[[, 0, ], [, ], ;, }, else, {, final, SegmentsBuilder, visitor, =, new, SegmentsBuilder, (, ), ;, getTree, (]
[;, }, else, {, final, SegmentsBuilder, visitor, =, new, SegmentsBuilder, (, ), ;, getTree, (, true, ), ., visit, (]
[(, ), ;, getTree, (, true, ), ., visit, (, visitor, ), ;, final, AVLTree, <, ComparableSegment, >, sorted, =]
[(, ), ;, getTree, (, true, ), ., visit, (, visitor, ), ;, final, AVLTree, <, ComparableSegment, >, sorted, =]
[ComparableSegment, >, sorted, =, visitor, ., getSorted, (, ), ;, final, ArrayList, <, List, <, ComparableSegment, >, >, loops, =]
[List, <, ComparableSegment, >, >, loops, =, new, ArrayList, <, List, <, ComparableSegment, >, >, (, ), ;, while, (]
[<, ComparableSegment, >, >, loops, =, new, ArrayList, <, List, <, ComparableSegment, >, >, (, ), ;, while, (, !]
[<, ComparableSegment, >, >, loops, =, new, ArrayList, <, List, <, ComparableSegment, >, >, (, ), ;, while, (, !]
[;, while, (, !, sorted, ., isEmpty, (, ), ), {, final, AVLTree, <, ComparableSegment, >, ., Node, node, =]
[;, while, (, !, sorted, ., isEmpty, (, ), ), {, final, AVLTree, <, ComparableSegment, >, ., Node, node, =]
[<, ComparableSegment, >, ., Node, node, =, sorted, ., getSmallest, (, ), ;, final, List, <, ComparableSegment, >, loop, =]
[>, ., Node, node, =, sorted, ., getSmallest, (, ), ;, final, List, <, ComparableSegment, >, loop, =, followLoop, (]
[Node, node, =, sorted, ., getSmallest, (, ), ;, final, List, <, ComparableSegment, >, loop, =, followLoop, (, node, ,]
[getSmallest, (, ), ;, final, List, <, ComparableSegment, >, loop, =, followLoop, (, node, ,, sorted, ), ;, if, (]
[getSmallest, (, ), ;, final, List, <, ComparableSegment, >, loop, =, followLoop, (, node, ,, sorted, ), ;, if, (]
[), ;, final, List, <, ComparableSegment, >, loop, =, followLoop, (, node, ,, sorted, ), ;, if, (, loop, !=]
[List, <, ComparableSegment, >, loop, =, followLoop, (, node, ,, sorted, ), ;, if, (, loop, !=, null, ), {]
[List, <, ComparableSegment, >, loop, =, followLoop, (, node, ,, sorted, ), ;, if, (, loop, !=, null, ), {]
[loop, =, followLoop, (, node, ,, sorted, ), ;, if, (, loop, !=, null, ), {, loops, ., add, (]
[,, sorted, ), ;, if, (, loop, !=, null, ), {, loops, ., add, (, loop, ), ;, }, }]
[), ;, if, (, loop, !=, null, ), {, loops, ., add, (, loop, ), ;, }, }, vertices, =]
[(, loop, !=, null, ), {, loops, ., add, (, loop, ), ;, }, }, vertices, =, new, Vector2D, []
[(, loop, !=, null, ), {, loops, ., add, (, loop, ), ;, }, }, vertices, =, new, Vector2D, []
[;, }, }, vertices, =, new, Vector2D, [, loops, ., size, (, ), ], [, ], ;, int, i, =]
[(, ), ], [, ], ;, int, i, =, 0, ;, for, (, final, List, <, ComparableSegment, >, loop, :]
[;, int, i, =, 0, ;, for, (, final, List, <, ComparableSegment, >, loop, :, loops, ), {, if, (]
[;, int, i, =, 0, ;, for, (, final, List, <, ComparableSegment, >, loop, :, loops, ), {, if, (]
[;, int, i, =, 0, ;, for, (, final, List, <, ComparableSegment, >, loop, :, loops, ), {, if, (]
[for, (, final, List, <, ComparableSegment, >, loop, :, loops, ), {, if, (, loop, ., size, (, ), <]
[loop, :, loops, ), {, if, (, loop, ., size, (, ), <, 2, ), {, final, Line, line, =]
[loop, :, loops, ), {, if, (, loop, ., size, (, ), <, 2, ), {, final, Line, line, =]
[loop, :, loops, ), {, if, (, loop, ., size, (, ), <, 2, ), {, final, Line, line, =]
[{, if, (, loop, ., size, (, ), <, 2, ), {, final, Line, line, =, loop, ., get, (]
[), <, 2, ), {, final, Line, line, =, loop, ., get, (, 0, ), ., getLine, (, ), ;]
[), <, 2, ), {, final, Line, line, =, loop, ., get, (, 0, ), ., getLine, (, ), ;]
[2, ), {, final, Line, line, =, loop, ., get, (, 0, ), ., getLine, (, ), ;, vertices, []
[2, ), {, final, Line, line, =, loop, ., get, (, 0, ), ., getLine, (, ), ;, vertices, []
[Line, line, =, loop, ., get, (, 0, ), ., getLine, (, ), ;, vertices, [, i, ++, ], =]
[., get, (, 0, ), ., getLine, (, ), ;, vertices, [, i, ++, ], =, new, Vector2D, [, ]]
[get, (, 0, ), ., getLine, (, ), ;, vertices, [, i, ++, ], =, new, Vector2D, [, ], {]
[0, ), ., getLine, (, ), ;, vertices, [, i, ++, ], =, new, Vector2D, [, ], {, null, ,]
[0, ), ., getLine, (, ), ;, vertices, [, i, ++, ], =, new, Vector2D, [, ], {, null, ,]
[(, ), ;, vertices, [, i, ++, ], =, new, Vector2D, [, ], {, null, ,, line, ., toSpace, (]
[vertices, [, i, ++, ], =, new, Vector2D, [, ], {, null, ,, line, ., toSpace, (, new, Vector1D, (]
[[, i, ++, ], =, new, Vector2D, [, ], {, null, ,, line, ., toSpace, (, new, Vector1D, (, -]
[[, i, ++, ], =, new, Vector2D, [, ], {, null, ,, line, ., toSpace, (, new, Vector1D, (, -]
[Vector2D, [, ], {, null, ,, line, ., toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, ), ), ,]
[Vector2D, [, ], {, null, ,, line, ., toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, ), ), ,]
[null, ,, line, ., toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, ), ), ,, line, ., toSpace, (]
[., toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, ), ), ,, line, ., toSpace, (, new, Vector1D, (]
[toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, ), ), ,, line, ., toSpace, (, new, Vector1D, (, +]
[toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, ), ), ,, line, ., toSpace, (, new, Vector1D, (, +]
[,, line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }, ;, }, else, if, (]
[,, line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }, ;, }, else, if, (]
[,, line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }, ;, }, else, if, (]
[,, line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }, ;, }, else, if, (]
[(, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }, ;, }, else, if, (, loop, ., get, (]
[MAX_VALUE, ), ), }, ;, }, else, if, (, loop, ., get, (, 0, ), ., getStart, (, ), ==]
[loop, ., get, (, 0, ), ., getStart, (, ), ==, null, ), {, final, Vector2D, [, ], array, =]
[(, 0, ), ., getStart, (, ), ==, null, ), {, final, Vector2D, [, ], array, =, new, Vector2D, []
[(, 0, ), ., getStart, (, ), ==, null, ), {, final, Vector2D, [, ], array, =, new, Vector2D, []
[(, 0, ), ., getStart, (, ), ==, null, ), {, final, Vector2D, [, ], array, =, new, Vector2D, []
[), ==, null, ), {, final, Vector2D, [, ], array, =, new, Vector2D, [, loop, ., size, (, ), +]
[Vector2D, [, ], array, =, new, Vector2D, [, loop, ., size, (, ), +, 2, ], ;, int, j, =]
[[, loop, ., size, (, ), +, 2, ], ;, int, j, =, 0, ;, for, (, Segment, segment, :]
[), +, 2, ], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, if, (]
[), +, 2, ], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, if, (]
[2, ], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, if, (, j, ==]
[0, ;, for, (, Segment, segment, :, loop, ), {, if, (, j, ==, 0, ), {, double, x, =]
[0, ;, for, (, Segment, segment, :, loop, ), {, if, (, j, ==, 0, ), {, double, x, =]
[0, ;, for, (, Segment, segment, :, loop, ), {, if, (, j, ==, 0, ), {, double, x, =]
[0, ;, for, (, Segment, segment, :, loop, ), {, if, (, j, ==, 0, ), {, double, x, =]
[), {, if, (, j, ==, 0, ), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (]
[), {, if, (, j, ==, 0, ), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (]
[=, segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getEnd, (, ), ), ., getX, (, ), ;]
[., getLine, (, ), ., toSubSpace, (, segment, ., getEnd, (, ), ), ., getX, (, ), ;, x, -=]
[., getLine, (, ), ., toSubSpace, (, segment, ., getEnd, (, ), ), ., getX, (, ), ;, x, -=]
[., toSubSpace, (, segment, ., getEnd, (, ), ), ., getX, (, ), ;, x, -=, FastMath, ., max, (]
[(, segment, ., getEnd, (, ), ), ., getX, (, ), ;, x, -=, FastMath, ., max, (, 1.0, ,]
[(, segment, ., getEnd, (, ), ), ., getX, (, ), ;, x, -=, FastMath, ., max, (, 1.0, ,]
[(, ), ), ., getX, (, ), ;, x, -=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (]
[(, ), ), ., getX, (, ), ;, x, -=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (]
[), ., getX, (, ), ;, x, -=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /]
[), ;, x, -=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;]
[), ;, x, -=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;]
[x, -=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, []
[x, -=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, []
[max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =]
[1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =, null, ;]
[1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =, null, ;]
[FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =, null, ;, array, []
[FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =, null, ;, array, []
[x, /, 2, ), ), ;, array, [, j, ++, ], =, null, ;, array, [, j, ++, ], =]
[x, /, 2, ), ), ;, array, [, j, ++, ], =, null, ;, array, [, j, ++, ], =]
[x, /, 2, ), ), ;, array, [, j, ++, ], =, null, ;, array, [, j, ++, ], =]
[j, ++, ], =, null, ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (]
[=, null, ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (]
[], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if, (]
[], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if, (]
[segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if, (, j, <]
[., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if, (, j, <, (]
[., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if, (, j, <, (]
[., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if, (, j, <, (]
[., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if, (, j, <, (, array, ., length, -]
[Vector1D, (, x, ), ), ;, }, if, (, j, <, (, array, ., length, -, 1, ), ), {]
[Vector1D, (, x, ), ), ;, }, if, (, j, <, (, array, ., length, -, 1, ), ), {]
[x, ), ), ;, }, if, (, j, <, (, array, ., length, -, 1, ), ), {, array, []
[x, ), ), ;, }, if, (, j, <, (, array, ., length, -, 1, ), ), {, array, []
[}, if, (, j, <, (, array, ., length, -, 1, ), ), {, array, [, j, ++, ], =]
[}, if, (, j, <, (, array, ., length, -, 1, ), ), {, array, [, j, ++, ], =]
[-, 1, ), ), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (]
[-, 1, ), ), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (]
[), ), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==]
[), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==, (]
[), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==, (]
[), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==, (]
[j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==, (, array, ., length, -]
[(, ), ;, }, if, (, j, ==, (, array, ., length, -, 1, ), ), {, double, x, =]
[(, ), ;, }, if, (, j, ==, (, array, ., length, -, 1, ), ), {, double, x, =]
[(, ), ;, }, if, (, j, ==, (, array, ., length, -, 1, ), ), {, double, x, =]
[(, ), ;, }, if, (, j, ==, (, array, ., length, -, 1, ), ), {, double, x, =]
[(, array, ., length, -, 1, ), ), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (]
[(, array, ., length, -, 1, ), ), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (]
[=, segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getStart, (, ), ), ., getX, (, ), ;]
[., getLine, (, ), ., toSubSpace, (, segment, ., getStart, (, ), ), ., getX, (, ), ;, x, +=]
[., getLine, (, ), ., toSubSpace, (, segment, ., getStart, (, ), ), ., getX, (, ), ;, x, +=]
[., toSubSpace, (, segment, ., getStart, (, ), ), ., getX, (, ), ;, x, +=, FastMath, ., max, (]
[(, segment, ., getStart, (, ), ), ., getX, (, ), ;, x, +=, FastMath, ., max, (, 1.0, ,]
[(, segment, ., getStart, (, ), ), ., getX, (, ), ;, x, +=, FastMath, ., max, (, 1.0, ,]
[(, ), ), ., getX, (, ), ;, x, +=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (]
[(, ), ), ., getX, (, ), ;, x, +=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (]
[), ., getX, (, ), ;, x, +=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /]
[), ;, x, +=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;]
[), ;, x, +=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;]
[x, +=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, []
[x, +=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, []
[max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =]
[max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =]
[max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =]
[x, /, 2, ), ), ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (]
[), ), ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (]
[++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, }]
[++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, }]
[=, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, }, vertices, []
[=, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, }, vertices, []
[(, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, }, vertices, [, i, ++, ], =]
[;, }, }, vertices, [, i, ++, ], =, array, ;, }, else, {, final, Vector2D, [, ], array, =]
[vertices, [, i, ++, ], =, array, ;, }, else, {, final, Vector2D, [, ], array, =, new, Vector2D, []
[vertices, [, i, ++, ], =, array, ;, }, else, {, final, Vector2D, [, ], array, =, new, Vector2D, []
[{, final, Vector2D, [, ], array, =, new, Vector2D, [, loop, ., size, (, ), ], ;, int, j, =]
[new, Vector2D, [, loop, ., size, (, ), ], ;, int, j, =, 0, ;, for, (, Segment, segment, :]
[loop, ., size, (, ), ], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {]
[loop, ., size, (, ), ], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {]
[size, (, ), ], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, array, []
[size, (, ), ], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, array, []
[;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, array, [, j, ++, ], =]
[;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, array, [, j, ++, ], =]
[(, Segment, segment, :, loop, ), {, array, [, j, ++, ], =, segment, ., getStart, (, ), ;, }]
[(, Segment, segment, :, loop, ), {, array, [, j, ++, ], =, segment, ., getStart, (, ), ;, }]
[segment, :, loop, ), {, array, [, j, ++, ], =, segment, ., getStart, (, ), ;, }, vertices, []
[segment, :, loop, ), {, array, [, j, ++, ], =, segment, ., getStart, (, ), ;, }, vertices, []
[{, array, [, j, ++, ], =, segment, ., getStart, (, ), ;, }, vertices, [, i, ++, ], =]
[segment, ., getStart, (, ), ;, }, vertices, [, i, ++, ], =, array, ;, }, }, }, }, return]
[segment, ., getStart, (, ), ;, }, vertices, [, i, ++, ], =, array, ;, }, }, }, }, return]
[>, ., Node, node, ,, final, AVLTree, <, ComparableSegment, >, sorted, ), {, final, ArrayList, <, ComparableSegment, >, loop, =]
[), {, final, ArrayList, <, ComparableSegment, >, loop, =, new, ArrayList, <, ComparableSegment, >, (, ), ;, ComparableSegment, segment, =]
[), {, final, ArrayList, <, ComparableSegment, >, loop, =, new, ArrayList, <, ComparableSegment, >, (, ), ;, ComparableSegment, segment, =]
[>, loop, =, new, ArrayList, <, ComparableSegment, >, (, ), ;, ComparableSegment, segment, =, node, ., getElement, (, ), ;]
[>, loop, =, new, ArrayList, <, ComparableSegment, >, (, ), ;, ComparableSegment, segment, =, node, ., getElement, (, ), ;]
[ArrayList, <, ComparableSegment, >, (, ), ;, ComparableSegment, segment, =, node, ., getElement, (, ), ;, loop, ., add, (]
[ComparableSegment, segment, =, node, ., getElement, (, ), ;, loop, ., add, (, segment, ), ;, final, Vector2D, globalStart, =]
[ComparableSegment, segment, =, node, ., getElement, (, ), ;, loop, ., add, (, segment, ), ;, final, Vector2D, globalStart, =]
[loop, ., add, (, segment, ), ;, final, Vector2D, globalStart, =, segment, ., getStart, (, ), ;, Vector2D, end, =]
[loop, ., add, (, segment, ), ;, final, Vector2D, globalStart, =, segment, ., getStart, (, ), ;, Vector2D, end, =]
[;, final, Vector2D, globalStart, =, segment, ., getStart, (, ), ;, Vector2D, end, =, segment, ., getEnd, (, ), ;]
[;, final, Vector2D, globalStart, =, segment, ., getStart, (, ), ;, Vector2D, end, =, segment, ., getEnd, (, ), ;]
[;, Vector2D, end, =, segment, ., getEnd, (, ), ;, node, ., delete, (, ), ;, final, boolean, open, =]
[;, Vector2D, end, =, segment, ., getEnd, (, ), ;, node, ., delete, (, ), ;, final, boolean, open, =]
[;, Vector2D, end, =, segment, ., getEnd, (, ), ;, node, ., delete, (, ), ;, final, boolean, open, =]
[getEnd, (, ), ;, node, ., delete, (, ), ;, final, boolean, open, =, segment, ., getStart, (, ), ==]
[node, ., delete, (, ), ;, final, boolean, open, =, segment, ., getStart, (, ), ==, null, ;, while, (]
[node, ., delete, (, ), ;, final, boolean, open, =, segment, ., getStart, (, ), ==, null, ;, while, (]
[., delete, (, ), ;, final, boolean, open, =, segment, ., getStart, (, ), ==, null, ;, while, (, (]
[., delete, (, ), ;, final, boolean, open, =, segment, ., getStart, (, ), ==, null, ;, while, (, (]
[(, ), ;, final, boolean, open, =, segment, ., getStart, (, ), ==, null, ;, while, (, (, end, !=]
[final, boolean, open, =, segment, ., getStart, (, ), ==, null, ;, while, (, (, end, !=, null, ), &&]
[boolean, open, =, segment, ., getStart, (, ), ==, null, ;, while, (, (, end, !=, null, ), &&, (]
[boolean, open, =, segment, ., getStart, (, ), ==, null, ;, while, (, (, end, !=, null, ), &&, (]
[=, segment, ., getStart, (, ), ==, null, ;, while, (, (, end, !=, null, ), &&, (, open, ||]
[segment, ., getStart, (, ), ==, null, ;, while, (, (, end, !=, null, ), &&, (, open, ||, (]
[segment, ., getStart, (, ), ==, null, ;, while, (, (, end, !=, null, ), &&, (, open, ||, (]
[segment, ., getStart, (, ), ==, null, ;, while, (, (, end, !=, null, ), &&, (, open, ||, (]
[), ==, null, ;, while, (, (, end, !=, null, ), &&, (, open, ||, (, globalStart, ., distance, (]
[;, while, (, (, end, !=, null, ), &&, (, open, ||, (, globalStart, ., distance, (, end, ), >]
[globalStart, ., distance, (, end, ), >, 1.0e-10, ), ), ), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =]
[), >, 1.0e-10, ), ), ), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null, ;, ComparableSegment, selectedSegment, =]
[), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null, ;, ComparableSegment, selectedSegment, =, null, ;, double, selectedDistance, =]
[), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null, ;, ComparableSegment, selectedSegment, =, null, ;, double, selectedDistance, =]
[selectedNode, =, null, ;, ComparableSegment, selectedSegment, =, null, ;, double, selectedDistance, =, Double, ., POSITIVE_INFINITY, ;, final, ComparableSegment, lowerLeft, =]
[;, ComparableSegment, selectedSegment, =, null, ;, double, selectedDistance, =, Double, ., POSITIVE_INFINITY, ;, final, ComparableSegment, lowerLeft, =, new, ComparableSegment, (]
[selectedSegment, =, null, ;, double, selectedDistance, =, Double, ., POSITIVE_INFINITY, ;, final, ComparableSegment, lowerLeft, =, new, ComparableSegment, (, end, ,]
[=, null, ;, double, selectedDistance, =, Double, ., POSITIVE_INFINITY, ;, final, ComparableSegment, lowerLeft, =, new, ComparableSegment, (, end, ,, -]
[;, double, selectedDistance, =, Double, ., POSITIVE_INFINITY, ;, final, ComparableSegment, lowerLeft, =, new, ComparableSegment, (, end, ,, -, 1.0e-10, ,]
[double, selectedDistance, =, Double, ., POSITIVE_INFINITY, ;, final, ComparableSegment, lowerLeft, =, new, ComparableSegment, (, end, ,, -, 1.0e-10, ,, -]
[final, ComparableSegment, lowerLeft, =, new, ComparableSegment, (, end, ,, -, 1.0e-10, ,, -, 1.0e-10, ), ;, final, ComparableSegment, upperRight, =]
[=, new, ComparableSegment, (, end, ,, -, 1.0e-10, ,, -, 1.0e-10, ), ;, final, ComparableSegment, upperRight, =, new, ComparableSegment, (]
[ComparableSegment, (, end, ,, -, 1.0e-10, ,, -, 1.0e-10, ), ;, final, ComparableSegment, upperRight, =, new, ComparableSegment, (, end, ,]
[(, end, ,, -, 1.0e-10, ,, -, 1.0e-10, ), ;, final, ComparableSegment, upperRight, =, new, ComparableSegment, (, end, ,, +]
[,, -, 1.0e-10, ,, -, 1.0e-10, ), ;, final, ComparableSegment, upperRight, =, new, ComparableSegment, (, end, ,, +, 1.0e-10, ,]
[-, 1.0e-10, ,, -, 1.0e-10, ), ;, final, ComparableSegment, upperRight, =, new, ComparableSegment, (, end, ,, +, 1.0e-10, ,, +]
[(, end, ,, +, 1.0e-10, ,, +, 1.0e-10, ), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =]
[(, end, ,, +, 1.0e-10, ,, +, 1.0e-10, ), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =]
[1.0e-10, ,, +, 1.0e-10, ), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (]
[1.0e-10, ), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;]
[1.0e-10, ), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;]
[), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;, (]
[), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;, (]
[for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;, (, n, !=]
[<, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;, (, n, !=, null, ), &&]
[ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;, (, n, !=, null, ), &&, (]
[ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;, (, n, !=, null, ), &&, (]
[ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;, (, n, !=, null, ), &&, (]
[ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;, (, n, !=, null, ), &&, (]
[getNotSmaller, (, lowerLeft, ), ;, (, n, !=, null, ), &&, (, n, ., getElement, (, ), ., compareTo, (]
[), ;, (, n, !=, null, ), &&, (, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=]
[n, !=, null, ), &&, (, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0, ), ;]
[null, ), &&, (, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0, ), ;, n, =]
[null, ), &&, (, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0, ), ;, n, =]
[(, ), ., compareTo, (, upperRight, ), <=, 0, ), ;, n, =, n, ., getNext, (, ), ), {]
[., compareTo, (, upperRight, ), <=, 0, ), ;, n, =, n, ., getNext, (, ), ), {, segment, =]
[., compareTo, (, upperRight, ), <=, 0, ), ;, n, =, n, ., getNext, (, ), ), {, segment, =]
[=, n, ., getNext, (, ), ), {, segment, =, n, ., getElement, (, ), ;, final, double, distance, =]
[=, n, ., getNext, (, ), ), {, segment, =, n, ., getElement, (, ), ;, final, double, distance, =]
[(, ), ), {, segment, =, n, ., getElement, (, ), ;, final, double, distance, =, end, ., distance, (]
[(, ), ), {, segment, =, n, ., getElement, (, ), ;, final, double, distance, =, end, ., distance, (]
[(, ), ;, final, double, distance, =, end, ., distance, (, segment, ., getStart, (, ), ), ;, if, (]
[(, ), ;, final, double, distance, =, end, ., distance, (, segment, ., getStart, (, ), ), ;, if, (]
[;, final, double, distance, =, end, ., distance, (, segment, ., getStart, (, ), ), ;, if, (, distance, <]
[distance, =, end, ., distance, (, segment, ., getStart, (, ), ), ;, if, (, distance, <, selectedDistance, ), {]
[end, ., distance, (, segment, ., getStart, (, ), ), ;, if, (, distance, <, selectedDistance, ), {, selectedNode, =]
[distance, (, segment, ., getStart, (, ), ), ;, if, (, distance, <, selectedDistance, ), {, selectedNode, =, n, ;]
[segment, ., getStart, (, ), ), ;, if, (, distance, <, selectedDistance, ), {, selectedNode, =, n, ;, selectedSegment, =]
[getStart, (, ), ), ;, if, (, distance, <, selectedDistance, ), {, selectedNode, =, n, ;, selectedSegment, =, segment, ;]
[), ), ;, if, (, distance, <, selectedDistance, ), {, selectedNode, =, n, ;, selectedSegment, =, segment, ;, selectedDistance, =]
[<, selectedDistance, ), {, selectedNode, =, n, ;, selectedSegment, =, segment, ;, selectedDistance, =, distance, ;, }, }, if, (]
[<, selectedDistance, ), {, selectedNode, =, n, ;, selectedSegment, =, segment, ;, selectedDistance, =, distance, ;, }, }, if, (]
[), {, selectedNode, =, n, ;, selectedSegment, =, segment, ;, selectedDistance, =, distance, ;, }, }, if, (, selectedDistance, >]
[n, ;, selectedSegment, =, segment, ;, selectedDistance, =, distance, ;, }, }, if, (, selectedDistance, >, 1.0e-10, ), {, return]
[=, segment, ;, selectedDistance, =, distance, ;, }, }, if, (, selectedDistance, >, 1.0e-10, ), {, return, null, ;, }]
[;, selectedDistance, =, distance, ;, }, }, if, (, selectedDistance, >, 1.0e-10, ), {, return, null, ;, }, end, =]
[;, selectedDistance, =, distance, ;, }, }, if, (, selectedDistance, >, 1.0e-10, ), {, return, null, ;, }, end, =]
[}, if, (, selectedDistance, >, 1.0e-10, ), {, return, null, ;, }, end, =, selectedSegment, ., getEnd, (, ), ;]
[}, if, (, selectedDistance, >, 1.0e-10, ), {, return, null, ;, }, end, =, selectedSegment, ., getEnd, (, ), ;]
[>, 1.0e-10, ), {, return, null, ;, }, end, =, selectedSegment, ., getEnd, (, ), ;, loop, ., add, (]
[{, return, null, ;, }, end, =, selectedSegment, ., getEnd, (, ), ;, loop, ., add, (, selectedSegment, ), ;]
[{, return, null, ;, }, end, =, selectedSegment, ., getEnd, (, ), ;, loop, ., add, (, selectedSegment, ), ;]
[getEnd, (, ), ;, loop, ., add, (, selectedSegment, ), ;, selectedNode, ., delete, (, ), ;, }, if, (]
[getEnd, (, ), ;, loop, ., add, (, selectedSegment, ), ;, selectedNode, ., delete, (, ), ;, }, if, (]
[(, ), ;, loop, ., add, (, selectedSegment, ), ;, selectedNode, ., delete, (, ), ;, }, if, (, (]
[(, ), ;, loop, ., add, (, selectedSegment, ), ;, selectedNode, ., delete, (, ), ;, }, if, (, (]
[(, ), ;, loop, ., add, (, selectedSegment, ), ;, selectedNode, ., delete, (, ), ;, }, if, (, (]
[(, selectedSegment, ), ;, selectedNode, ., delete, (, ), ;, }, if, (, (, loop, ., size, (, ), ==]
[;, selectedNode, ., delete, (, ), ;, }, if, (, (, loop, ., size, (, ), ==, 2, ), &&]
[selectedNode, ., delete, (, ), ;, }, if, (, (, loop, ., size, (, ), ==, 2, ), &&, !]
[), ;, }, if, (, (, loop, ., size, (, ), ==, 2, ), &&, !, open, ), {, return]
[(, loop, ., size, (, ), ==, 2, ), &&, !, open, ), {, return, null, ;, }, if, (]
[(, loop, ., size, (, ), ==, 2, ), &&, !, open, ), {, return, null, ;, }, if, (]
[loop, ., size, (, ), ==, 2, ), &&, !, open, ), {, return, null, ;, }, if, (, (]
[loop, ., size, (, ), ==, 2, ), &&, !, open, ), {, return, null, ;, }, if, (, (]
[size, (, ), ==, 2, ), &&, !, open, ), {, return, null, ;, }, if, (, (, end, ==]
[==, 2, ), &&, !, open, ), {, return, null, ;, }, if, (, (, end, ==, null, ), &&]
[2, ), &&, !, open, ), {, return, null, ;, }, if, (, (, end, ==, null, ), &&, !]
[open, ), {, return, null, ;, }, if, (, (, end, ==, null, ), &&, !, open, ), {, throw]
[if, (, (, end, ==, null, ), &&, !, open, ), {, throw, new, MathInternalError, (, ), ;, }, return]
[sortingKey, ;, public, ComparableSegment, (, final, Vector2D, start, ,, final, Vector2D, end, ,, final, Line, line, ), {, super, (]
[public, ComparableSegment, (, final, Vector2D, start, ,, final, Vector2D, end, ,, final, Line, line, ), {, super, (, start, ,]
[(, final, Vector2D, start, ,, final, Vector2D, end, ,, final, Line, line, ), {, super, (, start, ,, end, ,]
[start, ,, final, Vector2D, end, ,, final, Line, line, ), {, super, (, start, ,, end, ,, line, ), ;]
[final, Vector2D, end, ,, final, Line, line, ), {, super, (, start, ,, end, ,, line, ), ;, sortingKey, =]
[final, Vector2D, end, ,, final, Line, line, ), {, super, (, start, ,, end, ,, line, ), ;, sortingKey, =]
[Vector2D, end, ,, final, Line, line, ), {, super, (, start, ,, end, ,, line, ), ;, sortingKey, =, (]
[Vector2D, end, ,, final, Line, line, ), {, super, (, start, ,, end, ,, line, ), ;, sortingKey, =, (]
[,, final, Line, line, ), {, super, (, start, ,, end, ,, line, ), ;, sortingKey, =, (, start, ==]
[line, ), {, super, (, start, ,, end, ,, line, ), ;, sortingKey, =, (, start, ==, null, ), ?]
[super, (, start, ,, end, ,, line, ), ;, sortingKey, =, (, start, ==, null, ), ?, new, OrderedTuple, (]
[super, (, start, ,, end, ,, line, ), ;, sortingKey, =, (, start, ==, null, ), ?, new, OrderedTuple, (]
[end, ,, line, ), ;, sortingKey, =, (, start, ==, null, ), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,]
[end, ,, line, ), ;, sortingKey, =, (, start, ==, null, ), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,]
[sortingKey, =, (, start, ==, null, ), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :]
[start, ==, null, ), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (]
[start, ==, null, ), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (]
[OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (, start, ., getX, (, ), ,]
[OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (, start, ., getX, (, ), ,]
[;, }, public, ComparableSegment, (, final, Vector2D, start, ,, final, double, dx, ,, final, double, dy, ), {, super, (]
[public, ComparableSegment, (, final, Vector2D, start, ,, final, double, dx, ,, final, double, dy, ), {, super, (, null, ,]
[(, final, Vector2D, start, ,, final, double, dx, ,, final, double, dy, ), {, super, (, null, ,, null, ,]
[start, ,, final, double, dx, ,, final, double, dy, ), {, super, (, null, ,, null, ,, null, ), ;]
[final, double, dx, ,, final, double, dy, ), {, super, (, null, ,, null, ,, null, ), ;, sortingKey, =]
[,, final, double, dy, ), {, super, (, null, ,, null, ,, null, ), ;, sortingKey, =, new, OrderedTuple, (]
[,, final, double, dy, ), {, super, (, null, ,, null, ,, null, ), ;, sortingKey, =, new, OrderedTuple, (]
[,, final, double, dy, ), {, super, (, null, ,, null, ,, null, ), ;, sortingKey, =, new, OrderedTuple, (]
[super, (, null, ,, null, ,, null, ), ;, sortingKey, =, new, OrderedTuple, (, start, ., getX, (, ), +]
[null, ,, null, ,, null, ), ;, sortingKey, =, new, OrderedTuple, (, start, ., getX, (, ), +, dx, ,]
[null, ,, null, ,, null, ), ;, sortingKey, =, new, OrderedTuple, (, start, ., getX, (, ), +, dx, ,]
[null, ,, null, ,, null, ), ;, sortingKey, =, new, OrderedTuple, (, start, ., getX, (, ), +, dx, ,]
[;, sortingKey, =, new, OrderedTuple, (, start, ., getX, (, ), +, dx, ,, start, ., getY, (, ), +]
[start, ., getY, (, ), +, dy, ), ;, }, public, int, compareTo, (, final, ComparableSegment, o, ), {, return]
[start, ., getY, (, ), +, dy, ), ;, }, public, int, compareTo, (, final, ComparableSegment, o, ), {, return]
[), +, dy, ), ;, }, public, int, compareTo, (, final, ComparableSegment, o, ), {, return, sortingKey, ., compareTo, (]
[), +, dy, ), ;, }, public, int, compareTo, (, final, ComparableSegment, o, ), {, return, sortingKey, ., compareTo, (]
[(, o, ., sortingKey, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (]
[(, o, ., sortingKey, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (]
[., sortingKey, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, this, ==]
[}, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, this, ==, other, ), {, return]
[(, final, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, else, if, (]
[(, final, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, else, if, (]
[if, (, this, ==, other, ), {, return, true, ;, }, else, if, (, other, instanceof, ComparableSegment, ), {, return]
[if, (, this, ==, other, ), {, return, true, ;, }, else, if, (, other, instanceof, ComparableSegment, ), {, return]
[this, ==, other, ), {, return, true, ;, }, else, if, (, other, instanceof, ComparableSegment, ), {, return, compareTo, (]
[), {, return, true, ;, }, else, if, (, other, instanceof, ComparableSegment, ), {, return, compareTo, (, (, ComparableSegment, )]
[true, ;, }, else, if, (, other, instanceof, ComparableSegment, ), {, return, compareTo, (, (, ComparableSegment, ), other, ), ==]
[other, instanceof, ComparableSegment, ), {, return, compareTo, (, (, ComparableSegment, ), other, ), ==, 0, ;, }, else, {, return]
[==, 0, ;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, return]
[==, 0, ;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, return]
[==, 0, ;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, return]
[==, 0, ;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, return]
[==, 0, ;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, return]
[;, }, }, @, Override, public, int, hashCode, (, ), {, return, getStart, (, ), ., hashCode, (, ), ^]
[;, }, }, @, Override, public, int, hashCode, (, ), {, return, getStart, (, ), ., hashCode, (, ), ^]
[(, ), {, return, getStart, (, ), ., hashCode, (, ), ^, getEnd, (, ), ., hashCode, (, ), ^]
[(, ), {, return, getStart, (, ), ., hashCode, (, ), ^, getEnd, (, ), ., hashCode, (, ), ^]
[hashCode, (, ), ^, getEnd, (, ), ., hashCode, (, ), ^, getLine, (, ), ., hashCode, (, ), ^]
[hashCode, (, ), ^, getEnd, (, ), ., hashCode, (, ), ^, getLine, (, ), ., hashCode, (, ), ^]
[class, SegmentsBuilder, implements, BSPTreeVisitor, <, Euclidean2D, >, {, private, AVLTree, <, ComparableSegment, >, sorted, ;, public, SegmentsBuilder, (, ), {]
[implements, BSPTreeVisitor, <, Euclidean2D, >, {, private, AVLTree, <, ComparableSegment, >, sorted, ;, public, SegmentsBuilder, (, ), {, sorted, =]
[<, ComparableSegment, >, (, ), ;, }, public, Order, visitOrder, (, final, BSPTree, <, Euclidean2D, >, node, ), {, return]
[<, ComparableSegment, >, (, ), ;, }, public, Order, visitOrder, (, final, BSPTree, <, Euclidean2D, >, node, ), {, return]
[), {, return, Order, ., MINUS_SUB_PLUS, ;, }, public, void, visitInternalNode, (, final, BSPTree, <, Euclidean2D, >, node, ), {]
[Order, ., MINUS_SUB_PLUS, ;, }, public, void, visitInternalNode, (, final, BSPTree, <, Euclidean2D, >, node, ), {, @, SuppressWarnings, (]
[final, BSPTree, <, Euclidean2D, >, node, ), {, @, SuppressWarnings, (, "unchecked", ), final, BoundaryAttribute, <, Euclidean2D, >, attribute, =]
[), {, @, SuppressWarnings, (, "unchecked", ), final, BoundaryAttribute, <, Euclidean2D, >, attribute, =, (, BoundaryAttribute, <, Euclidean2D, >, )]
[), {, @, SuppressWarnings, (, "unchecked", ), final, BoundaryAttribute, <, Euclidean2D, >, attribute, =, (, BoundaryAttribute, <, Euclidean2D, >, )]
[BoundaryAttribute, <, Euclidean2D, >, attribute, =, (, BoundaryAttribute, <, Euclidean2D, >, ), node, ., getAttribute, (, ), ;, if, (]
[BoundaryAttribute, <, Euclidean2D, >, attribute, =, (, BoundaryAttribute, <, Euclidean2D, >, ), node, ., getAttribute, (, ), ;, if, (]
[BoundaryAttribute, <, Euclidean2D, >, attribute, =, (, BoundaryAttribute, <, Euclidean2D, >, ), node, ., getAttribute, (, ), ;, if, (]
[(, BoundaryAttribute, <, Euclidean2D, >, ), node, ., getAttribute, (, ), ;, if, (, attribute, ., getPlusOutside, (, ), !=]
[Euclidean2D, >, ), node, ., getAttribute, (, ), ;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {]
[), node, ., getAttribute, (, ), ;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (]
[), node, ., getAttribute, (, ), ;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (]
[;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,]
[(, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (]
[(, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (]
[(, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (]
[addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=]
[., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {]
[(, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (]
[(, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (]
[}, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusInside, (, ), ,]
[node, ), {, }, private, void, addContribution, (, final, SubHyperplane, <, Euclidean2D, >, sub, ,, final, boolean, reversed, ), {]
[}, private, void, addContribution, (, final, SubHyperplane, <, Euclidean2D, >, sub, ,, final, boolean, reversed, ), {, @, SuppressWarnings, (]
[,, final, boolean, reversed, ), {, @, SuppressWarnings, (, "unchecked", ), final, AbstractSubHyperplane, <, Euclidean2D, ,, Euclidean1D, >, absSub, =]
[(, "unchecked", ), final, AbstractSubHyperplane, <, Euclidean2D, ,, Euclidean1D, >, absSub, =, (, AbstractSubHyperplane, <, Euclidean2D, ,, Euclidean1D, >, )]
[Euclidean2D, ,, Euclidean1D, >, absSub, =, (, AbstractSubHyperplane, <, Euclidean2D, ,, Euclidean1D, >, ), sub, ;, final, Line, line, =]
[>, absSub, =, (, AbstractSubHyperplane, <, Euclidean2D, ,, Euclidean1D, >, ), sub, ;, final, Line, line, =, (, Line, )]
[>, absSub, =, (, AbstractSubHyperplane, <, Euclidean2D, ,, Euclidean1D, >, ), sub, ;, final, Line, line, =, (, Line, )]
[final, Line, line, =, (, Line, ), sub, ., getHyperplane, (, ), ;, final, List, <, Interval, >, intervals, =]
[final, Line, line, =, (, Line, ), sub, ., getHyperplane, (, ), ;, final, List, <, Interval, >, intervals, =]
[Line, line, =, (, Line, ), sub, ., getHyperplane, (, ), ;, final, List, <, Interval, >, intervals, =, (]
[(, Line, ), sub, ., getHyperplane, (, ), ;, final, List, <, Interval, >, intervals, =, (, (, IntervalsSet, )]
[(, Line, ), sub, ., getHyperplane, (, ), ;, final, List, <, Interval, >, intervals, =, (, (, IntervalsSet, )]
[(, IntervalsSet, ), absSub, ., getRemainingRegion, (, ), ), ., asList, (, ), ;, for, (, final, Interval, i, :]
[), ), ., asList, (, ), ;, for, (, final, Interval, i, :, intervals, ), {, final, Vector2D, start, =]
[), ), ., asList, (, ), ;, for, (, final, Interval, i, :, intervals, ), {, final, Vector2D, start, =]
[), ), ., asList, (, ), ;, for, (, final, Interval, i, :, intervals, ), {, final, Vector2D, start, =]
[(, ), ;, for, (, final, Interval, i, :, intervals, ), {, final, Vector2D, start, =, Double, ., isInfinite, (]
[(, ), ;, for, (, final, Interval, i, :, intervals, ), {, final, Vector2D, start, =, Double, ., isInfinite, (]
[i, :, intervals, ), {, final, Vector2D, start, =, Double, ., isInfinite, (, i, ., getInf, (, ), ), ?]
[intervals, ), {, final, Vector2D, start, =, Double, ., isInfinite, (, i, ., getInf, (, ), ), ?, null, :]
[final, Vector2D, start, =, Double, ., isInfinite, (, i, ., getInf, (, ), ), ?, null, :, (, Vector2D, )]
[final, Vector2D, start, =, Double, ., isInfinite, (, i, ., getInf, (, ), ), ?, null, :, (, Vector2D, )]
[Double, ., isInfinite, (, i, ., getInf, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (]
[(, i, ., getInf, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (]
[(, i, ., getInf, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (]
[), line, ., toSpace, (, new, Vector1D, (, i, ., getInf, (, ), ), ), ;, final, Vector2D, end, =]
[), line, ., toSpace, (, new, Vector1D, (, i, ., getInf, (, ), ), ), ;, final, Vector2D, end, =]
[), line, ., toSpace, (, new, Vector1D, (, i, ., getInf, (, ), ), ), ;, final, Vector2D, end, =]
[(, new, Vector1D, (, i, ., getInf, (, ), ), ), ;, final, Vector2D, end, =, Double, ., isInfinite, (]
[(, new, Vector1D, (, i, ., getInf, (, ), ), ), ;, final, Vector2D, end, =, Double, ., isInfinite, (]
[(, ), ), ), ;, final, Vector2D, end, =, Double, ., isInfinite, (, i, ., getSup, (, ), ), ?]
[), ), ;, final, Vector2D, end, =, Double, ., isInfinite, (, i, ., getSup, (, ), ), ?, null, :]
[final, Vector2D, end, =, Double, ., isInfinite, (, i, ., getSup, (, ), ), ?, null, :, (, Vector2D, )]
[final, Vector2D, end, =, Double, ., isInfinite, (, i, ., getSup, (, ), ), ?, null, :, (, Vector2D, )]
[Double, ., isInfinite, (, i, ., getSup, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (]
[(, i, ., getSup, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (]
[(, i, ., getSup, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (]
[(, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, ., getSup, (, ), ), ), ;, if, (]
[line, ., toSpace, (, new, Vector1D, (, i, ., getSup, (, ), ), ), ;, if, (, reversed, ), {]
[line, ., toSpace, (, new, Vector1D, (, i, ., getSup, (, ), ), ), ;, if, (, reversed, ), {]
[new, Vector1D, (, i, ., getSup, (, ), ), ), ;, if, (, reversed, ), {, sorted, ., insert, (]
[i, ., getSup, (, ), ), ), ;, if, (, reversed, ), {, sorted, ., insert, (, new, ComparableSegment, (]
[getSup, (, ), ), ), ;, if, (, reversed, ), {, sorted, ., insert, (, new, ComparableSegment, (, end, ,]
[), ), ), ;, if, (, reversed, ), {, sorted, ., insert, (, new, ComparableSegment, (, end, ,, start, ,]
[), ), ), ;, if, (, reversed, ), {, sorted, ., insert, (, new, ComparableSegment, (, end, ,, start, ,]
[insert, (, new, ComparableSegment, (, end, ,, start, ,, line, ., getReverse, (, ), ), ), ;, }, else, {]
[insert, (, new, ComparableSegment, (, end, ,, start, ,, line, ., getReverse, (, ), ), ), ;, }, else, {]
[(, end, ,, start, ,, line, ., getReverse, (, ), ), ), ;, }, else, {, sorted, ., insert, (]
[start, ,, line, ., getReverse, (, ), ), ), ;, }, else, {, sorted, ., insert, (, new, ComparableSegment, (]
[line, ., getReverse, (, ), ), ), ;, }, else, {, sorted, ., insert, (, new, ComparableSegment, (, start, ,]
[getReverse, (, ), ), ), ;, }, else, {, sorted, ., insert, (, new, ComparableSegment, (, start, ,, end, ,]
[,, end, ,, line, ), ), ;, }, }, }, public, AVLTree, <, ComparableSegment, >, getSorted, (, ), {, return]
