[;, static, final, DiagnosticType, STRIP_ASSIGNMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_STRIP_ASSIGNMENT_ERROR", ,, "Unable to strip assignment to {0}", ), ;, StripCode, (, AbstractCompiler, compiler, ,]
[., error, (, "JSC_STRIP_TYPE_INHERIT_ERROR", ,, "Non-strip type {0} cannot inherit from strip type {1}", ), ;, static, final, DiagnosticType, STRIP_ASSIGNMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_STRIP_ASSIGNMENT_ERROR", ,, "Unable to strip assignment to {0}"]
[,, "Non-strip type {0} cannot inherit from strip type {1}", ), ;, static, final, DiagnosticType, STRIP_ASSIGNMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_STRIP_ASSIGNMENT_ERROR", ,, "Unable to strip assignment to {0}", ), ;, StripCode, (]
[), ;, static, final, DiagnosticType, STRIP_ASSIGNMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_STRIP_ASSIGNMENT_ERROR", ,, "Unable to strip assignment to {0}", ), ;, StripCode, (, AbstractCompiler, compiler]
[;, StripCode, (, AbstractCompiler, compiler, ,, Set, <, String, >, stripTypes, ,, Set, <, String, >, stripNameSuffixes, ,, Set, <]
[., error, (, "JSC_STRIP_ASSIGNMENT_ERROR", ,, "Unable to strip assignment to {0}", ), ;, StripCode, (, AbstractCompiler, compiler, ,, Set, <, String, >, stripTypes, ,, Set]
[,, "Unable to strip assignment to {0}", ), ;, StripCode, (, AbstractCompiler, compiler, ,, Set, <, String, >, stripTypes, ,, Set, <, String, >, stripNameSuffixes]
[), ;, StripCode, (, AbstractCompiler, compiler, ,, Set, <, String, >, stripTypes, ,, Set, <, String, >, stripNameSuffixes, ,, Set]
[=, compiler, ;, this, ., stripTypes, =, Sets, ., newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =, Sets, .]
[., compiler, =, compiler, ;, this, ., stripTypes, =, Sets, ., newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =]
[;, this, ., stripTypes, =, Sets, ., newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (]
[=, Sets, ., newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;, this]
[., stripTypes, =, Sets, ., newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, )]
[;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (]
[., newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes]
[), ;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =, Sets, ., newHashSet]
[=, Sets, ., newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;, this]
[., stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, )]
[;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =, Sets, ., newHashSet, (]
[., newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes]
[), ;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =, Sets, ., newHashSet]
[=, Sets, ., newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =, Sets, ., newHashSet, (, stripNamePrefixes, ), ;, this]
[., stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =, Sets, ., newHashSet, (, stripNamePrefixes, )]
[;, this, ., stripNamePrefixes, =, Sets, ., newHashSet, (, stripNamePrefixes, ), ;, this, ., varsToRemove, =, Sets, ., newHashSet, (]
[., newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =, Sets, ., newHashSet, (, stripNamePrefixes, ), ;, this, ., varsToRemove]
[), ;, this, ., stripNamePrefixes, =, Sets, ., newHashSet, (, stripNamePrefixes, ), ;, this, ., varsToRemove, =, Sets, ., newHashSet]
[=, Sets, ., newHashSet, (, stripNamePrefixes, ), ;, this, ., varsToRemove, =, Sets, ., newHashSet, (, ), ;, }, public]
[., stripNamePrefixes, =, Sets, ., newHashSet, (, stripNamePrefixes, ), ;, this, ., varsToRemove, =, Sets, ., newHashSet, (, ), ;]
[;, this, ., varsToRemove, =, Sets, ., newHashSet, (, ), ;, }, public, void, enableTweakStripping, (, ), {, stripTypes, .]
[., newHashSet, (, stripNamePrefixes, ), ;, this, ., varsToRemove, =, Sets, ., newHashSet, (, ), ;, }, public, void, enableTweakStripping]
[), ;, this, ., varsToRemove, =, Sets, ., newHashSet, (, ), ;, }, public, void, enableTweakStripping, (, ), {, stripTypes]
[=, Sets, ., newHashSet, (, ), ;, }, public, void, enableTweakStripping, (, ), {, stripTypes, ., add, (, "goog.tweak", )]
[., varsToRemove, =, Sets, ., newHashSet, (, ), ;, }, public, void, enableTweakStripping, (, ), {, stripTypes, ., add, (]
[;, }, public, void, enableTweakStripping, (, ), {, stripTypes, ., add, (, "goog.tweak", ), ;, }, @, Override, public, void]
[., newHashSet, (, ), ;, }, public, void, enableTweakStripping, (, ), {, stripTypes, ., add, (, "goog.tweak", ), ;, }]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[., add, (, "goog.tweak", ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[;, }, private, class, Strip, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., traverse, (, compiler, ,, root, ,, new, Strip, (, ), ), ;, }, private, class, Strip, extends, AbstractPostOrderCallback, {]
[,, root, ,, new, Strip, (, ), ), ;, }, private, class, Strip, extends, AbstractPostOrderCallback, {, @, Override, public, void]
[,, new, Strip, (, ), ), ;, }, private, class, Strip, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[), ;, }, private, class, Strip, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), {, case, Token, ., VAR, :, removeVarDeclarationsByNameOrRvalue, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token]
[., getType, (, ), ), {, case, Token, ., VAR, :, removeVarDeclarationsByNameOrRvalue, (, t, ,, n, ,, parent, ), ;]
[:, removeVarDeclarationsByNameOrRvalue, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t]
[., VAR, :, removeVarDeclarationsByNameOrRvalue, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., NAME, :, maybeRemoveReferenceToRemovedVariable]
[;, break, ;, case, Token, ., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[,, n, ,, parent, ), ;, break, ;, case, Token, ., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,, parent]
[,, parent, ), ;, break, ;, case, Token, ., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,, parent, ), ;]
[), ;, break, ;, case, Token, ., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,, parent, ), ;, break, ;]
[:, maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, case, Token, .]
[., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, case]
[;, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token]
[,, n, ,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token]
[,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR]
[), ;, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[:, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH]
[., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token]
[:, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH]
[., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token]
[:, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH]
[., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token]
[:, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD]
[., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token]
[:, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB]
[., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token]
[:, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL]
[., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token]
[:, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV]
[., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token]
[:, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD]
[., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,]
[., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (]
[:, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,, parent, ), ;]
[., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,, parent]
[:, case, Token, ., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, .]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[:, maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., CALL, :, case, Token, .]
[., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., CALL, :, case]
[;, break, ;, case, Token, ., CALL, :, case, Token, ., NEW, :, maybeRemoveCall, (, t, ,, n, ,, parent]
[,, n, ,, parent, ), ;, break, ;, case, Token, ., CALL, :, case, Token, ., NEW, :, maybeRemoveCall, (]
[,, parent, ), ;, break, ;, case, Token, ., CALL, :, case, Token, ., NEW, :, maybeRemoveCall, (, t, ,]
[), ;, break, ;, case, Token, ., CALL, :, case, Token, ., NEW, :, maybeRemoveCall, (, t, ,, n, ,]
[:, case, Token, ., NEW, :, maybeRemoveCall, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, .]
[., CALL, :, case, Token, ., NEW, :, maybeRemoveCall, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[:, maybeRemoveCall, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t]
[., NEW, :, maybeRemoveCall, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit]
[;, break, ;, case, Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;, break, ;, case, Token, .]
[,, n, ,, parent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;]
[,, parent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;, break, ;]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;, break, ;, case, Token]
[:, eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, maybeEliminateExpressionByName, (, t, ,, n]
[., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, maybeEliminateExpressionByName, (, t]
[;, break, ;, case, Token, ., EXPR_RESULT, :, maybeEliminateExpressionByName, (, t, ,, n, ,, parent, ), ;, break, ;, }]
[,, n, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, maybeEliminateExpressionByName, (, t, ,, n, ,, parent, ), ;]
[), ;, break, ;, case, Token, ., EXPR_RESULT, :, maybeEliminateExpressionByName, (, t, ,, n, ,, parent, ), ;, break, ;]
[:, maybeEliminateExpressionByName, (, t, ,, n, ,, parent, ), ;, break, ;, }, }, void, removeVarDeclarationsByNameOrRvalue, (, NodeTraversal, t, ,]
[., EXPR_RESULT, :, maybeEliminateExpressionByName, (, t, ,, n, ,, parent, ), ;, break, ;, }, }, void, removeVarDeclarationsByNameOrRvalue, (, NodeTraversal]
[;, break, ;, }, }, void, removeVarDeclarationsByNameOrRvalue, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for, (]
[,, n, ,, parent, ), ;, break, ;, }, }, void, removeVarDeclarationsByNameOrRvalue, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, parent, ), ;, break, ;, }, }, void, removeVarDeclarationsByNameOrRvalue, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, break, ;, }, }, void, removeVarDeclarationsByNameOrRvalue, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for]
[;, nameNode, !=, null, ;, nameNode, =, nameNode, ., getNext, (, ), ), {, String, name, =, nameNode, ., getString]
[., getFirstChild, (, ), ;, nameNode, !=, null, ;, nameNode, =, nameNode, ., getNext, (, ), ), {, String, name]
[;, nameNode, =, nameNode, ., getNext, (, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, if]
[!=, null, ;, nameNode, =, nameNode, ., getNext, (, ), ), {, String, name, =, nameNode, ., getString, (, )]
[;, nameNode, =, nameNode, ., getNext, (, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, if]
[=, nameNode, ., getNext, (, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, if, (, isStripName]
[), {, String, name, =, nameNode, ., getString, (, ), ;, if, (, isStripName, (, name, ), ||, isCallWhoseReturnValueShouldBeStripped, (]
[., getNext, (, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, if, (, isStripName, (, name]
[;, if, (, isStripName, (, name, ), ||, isCallWhoseReturnValueShouldBeStripped, (, nameNode, ., getFirstChild, (, ), ), ), {, Scope, scope]
[., getString, (, ), ;, if, (, isStripName, (, name, ), ||, isCallWhoseReturnValueShouldBeStripped, (, nameNode, ., getFirstChild, (, ), )]
[), {, Scope, scope, =, t, ., getScope, (, ), ;, varsToRemove, ., add, (, scope, ., getVar, (, name]
[||, isCallWhoseReturnValueShouldBeStripped, (, nameNode, ., getFirstChild, (, ), ), ), {, Scope, scope, =, t, ., getScope, (, ), ;]
[), ||, isCallWhoseReturnValueShouldBeStripped, (, nameNode, ., getFirstChild, (, ), ), ), {, Scope, scope, =, t, ., getScope, (, )]
[), {, Scope, scope, =, t, ., getScope, (, ), ;, varsToRemove, ., add, (, scope, ., getVar, (, name]
[), ), {, Scope, scope, =, t, ., getScope, (, ), ;, varsToRemove, ., add, (, scope, ., getVar, (]
[., getFirstChild, (, ), ), ), {, Scope, scope, =, t, ., getScope, (, ), ;, varsToRemove, ., add, (]
[;, varsToRemove, ., add, (, scope, ., getVar, (, name, ), ), ;, n, ., removeChild, (, nameNode, ), ;]
[., getScope, (, ), ;, varsToRemove, ., add, (, scope, ., getVar, (, name, ), ), ;, n, ., removeChild]
[;, n, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, if, (, !, n]
[., add, (, scope, ., getVar, (, name, ), ), ;, n, ., removeChild, (, nameNode, ), ;, compiler, .]
[), ;, n, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, if, (, !]
[., getVar, (, name, ), ), ;, n, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;]
[), ), ;, n, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, if, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, if, (, !, n, ., hasChildren, (, ), ), {, replaceWithEmpty]
[., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, if, (, !, n, ., hasChildren]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, if, (, !, n, ., hasChildren, (, ), ), {]
[;, }, }, if, (, !, n, ., hasChildren, (, ), ), {, replaceWithEmpty, (, n, ,, parent, ), ;]
[., reportCodeChange, (, ), ;, }, }, if, (, !, n, ., hasChildren, (, ), ), {, replaceWithEmpty, (, n]
[), {, replaceWithEmpty, (, n, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, void, maybeRemoveReferenceToRemovedVariable, (]
[), {, replaceWithEmpty, (, n, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, void, maybeRemoveReferenceToRemovedVariable, (]
[., hasChildren, (, ), ), {, replaceWithEmpty, (, n, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, void, maybeRemoveReferenceToRemovedVariable, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, void, maybeRemoveReferenceToRemovedVariable, (, NodeTraversal, t, ,, Node, n]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, void, maybeRemoveReferenceToRemovedVariable, (, NodeTraversal, t, ,, Node, n, ,, Node]
[;, }, }, void, maybeRemoveReferenceToRemovedVariable, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, parent, .]
[., reportCodeChange, (, ), ;, }, }, void, maybeRemoveReferenceToRemovedVariable, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[), {, case, Token, ., VAR, :, break, ;, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, if]
[., getType, (, ), ), {, case, Token, ., VAR, :, break, ;, case, Token, ., GETPROP, :, case, Token]
[:, break, ;, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, if, (, parent, ., getFirstChild, (, )]
[., VAR, :, break, ;, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, if, (, parent, ., getFirstChild]
[:, case, Token, ., GETELEM, :, if, (, parent, ., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (, t, ,]
[., GETPROP, :, case, Token, ., GETELEM, :, if, (, parent, ., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (]
[:, if, (, parent, ., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceHighestNestedCallWithNull]
[., GETELEM, :, if, (, parent, ., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (, t, ,, n, ), )]
[), {, replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN]
[&&, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, ), ), ;]
[==, n, &&, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, )]
[., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceHighestNestedCallWithNull, (, parent, ,, parent]
[&&, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, ), ), ;]
[), {, replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN]
[,, n, ), ), {, replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, ), ), ;, }, break, ;, case]
[), ), {, replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, ), ), ;, }, break, ;, case, Token, .]
[;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[,, parent, ., getParent, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR]
[), ;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :]
[., getParent, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case]
[:, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH]
[., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token]
[:, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH]
[., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token]
[:, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH]
[., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token]
[:, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD]
[., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token]
[:, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB]
[., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token]
[:, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL]
[., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token]
[:, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV]
[., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token]
[:, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD]
[., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (]
[., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, if, (]
[:, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), )]
[., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (, t, ,, n]
[:, case, Token, ., ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, if, (, parent, .]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, if, (]
[:, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, if, (, parent, ., getFirstChild, (, ), ==, n]
[., ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, if, (, parent, ., getFirstChild, (, )]
[), {, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, Node, gramps, =, parent, ., getParent, (]
[,, n, ), ), {, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, Node, gramps, =, parent]
[), ), {, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, Node, gramps, =, parent, ., getParent]
[), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ., isExprResult, (, ), ), {]
[==, n, ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ., isExprResult, (, )]
[., getFirstChild, (, ), ==, n, ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps]
[), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ., isExprResult, (, ), ), {]
[;, if, (, gramps, ., isExprResult, (, ), ), {, Node, greatGramps, =, gramps, ., getParent, (, ), ;, replaceWithEmpty]
[., getParent, (, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, Node, greatGramps, =, gramps, ., getParent]
[), {, Node, greatGramps, =, gramps, ., getParent, (, ), ;, replaceWithEmpty, (, gramps, ,, greatGramps, ), ;, compiler, .]
[., isExprResult, (, ), ), {, Node, greatGramps, =, gramps, ., getParent, (, ), ;, replaceWithEmpty, (, gramps, ,, greatGramps]
[;, replaceWithEmpty, (, gramps, ,, greatGramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, rvalue, =]
[., getParent, (, ), ;, replaceWithEmpty, (, gramps, ,, greatGramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else]
[;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, rvalue, =, n, ., getNext, (, ), ;, parent]
[,, greatGramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, rvalue, =, n, ., getNext, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, rvalue, =, n, ., getNext, (, ), ;]
[;, }, else, {, Node, rvalue, =, n, ., getNext, (, ), ;, parent, ., removeChild, (, rvalue, ), ;]
[., reportCodeChange, (, ), ;, }, else, {, Node, rvalue, =, n, ., getNext, (, ), ;, parent, ., removeChild]
[;, parent, ., removeChild, (, rvalue, ), ;, gramps, ., replaceChild, (, parent, ,, rvalue, ), ;, compiler, ., reportCodeChange]
[., getNext, (, ), ;, parent, ., removeChild, (, rvalue, ), ;, gramps, ., replaceChild, (, parent, ,, rvalue, )]
[;, gramps, ., replaceChild, (, parent, ,, rvalue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {]
[., removeChild, (, rvalue, ), ;, gramps, ., replaceChild, (, parent, ,, rvalue, ), ;, compiler, ., reportCodeChange, (, )]
[), ;, gramps, ., replaceChild, (, parent, ,, rvalue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, replaceWithNull, (, n, ,, parent, ), ;, compiler, .]
[., replaceChild, (, parent, ,, rvalue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, replaceWithNull, (]
[,, rvalue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, replaceWithNull, (, n, ,, parent, )]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, replaceWithNull, (, n, ,, parent, ), ;, compiler]
[;, }, }, else, {, replaceWithNull, (, n, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[., reportCodeChange, (, ), ;, }, }, else, {, replaceWithNull, (, n, ,, parent, ), ;, compiler, ., reportCodeChange, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, break, ;, default, :, if, (, isReferenceToRemovedVar, (, t, ,, n]
[,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, break, ;, default, :, if, (, isReferenceToRemovedVar, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, break, ;, default, :, if, (, isReferenceToRemovedVar, (, t, ,]
[;, }, }, break, ;, default, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceWithNull, (, n]
[., reportCodeChange, (, ), ;, }, }, break, ;, default, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), )]
[), {, replaceWithNull, (, n, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, }, }]
[,, n, ), ), {, replaceWithNull, (, n, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break]
[), ), {, replaceWithNull, (, n, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, }, }, void, replaceHighestNestedCallWithNull, (, Node, node, ,, Node, parent]
[,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, }, }, void, replaceHighestNestedCallWithNull, (, Node, node]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, }, }, void, replaceHighestNestedCallWithNull, (, Node, node, ,, Node]
[;, }, break, ;, }, }, void, replaceHighestNestedCallWithNull, (, Node, node, ,, Node, parent, ), {, Node, ancestor, =, parent]
[., reportCodeChange, (, ), ;, }, break, ;, }, }, void, replaceHighestNestedCallWithNull, (, Node, node, ,, Node, parent, ), {]
[;, Node, ancestorChild, =, node, ;, while, (, true, ), {, if, (, ancestor, ., getFirstChild, (, ), !=, ancestorChild]
[;, while, (, true, ), {, if, (, ancestor, ., getFirstChild, (, ), !=, ancestorChild, ), {, replaceWithNull, (, ancestorChild]
[), {, if, (, ancestor, ., getFirstChild, (, ), !=, ancestorChild, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;]
[), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, if, (, ancestor, ., isExprResult, (, ), )]
[!=, ancestorChild, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, if, (, ancestor, ., isExprResult, (]
[., getFirstChild, (, ), !=, ancestorChild, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, if, (]
[), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, if, (, ancestor, ., isExprResult, (, ), )]
[;, break, ;, }, if, (, ancestor, ., isExprResult, (, ), ), {, Node, ancParent, =, ancestor, ., getParent, (]
[,, ancestor, ), ;, break, ;, }, if, (, ancestor, ., isExprResult, (, ), ), {, Node, ancParent, =, ancestor]
[), ;, break, ;, }, if, (, ancestor, ., isExprResult, (, ), ), {, Node, ancParent, =, ancestor, ., getParent]
[), {, Node, ancParent, =, ancestor, ., getParent, (, ), ;, replaceWithEmpty, (, ancestor, ,, ancParent, ), ;, break, ;]
[., isExprResult, (, ), ), {, Node, ancParent, =, ancestor, ., getParent, (, ), ;, replaceWithEmpty, (, ancestor, ,, ancParent]
[;, replaceWithEmpty, (, ancestor, ,, ancParent, ), ;, break, ;, }, int, type, =, ancestor, ., getType, (, ), ;]
[., getParent, (, ), ;, replaceWithEmpty, (, ancestor, ,, ancParent, ), ;, break, ;, }, int, type, =, ancestor, .]
[;, break, ;, }, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, !=, Token, ., GETPROP]
[,, ancParent, ), ;, break, ;, }, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, !=]
[), ;, break, ;, }, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, !=, Token, .]
[;, if, (, type, !=, Token, ., GETPROP, &&, type, !=, Token, ., GETELEM, &&, type, !=, Token, ., CALL]
[., getType, (, ), ;, if, (, type, !=, Token, ., GETPROP, &&, type, !=, Token, ., GETELEM, &&, type]
[), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =, ancestor, ;, ancestor, =, ancestor, .]
[&&, type, !=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =]
[&&, type, !=, Token, ., GETELEM, &&, type, !=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, )]
[!=, Token, ., GETPROP, &&, type, !=, Token, ., GETELEM, &&, type, !=, Token, ., CALL, ), {, replaceWithNull, (]
[&&, type, !=, Token, ., GETELEM, &&, type, !=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, )]
[., GETPROP, &&, type, !=, Token, ., GETELEM, &&, type, !=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,]
[&&, type, !=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =]
[!=, Token, ., GETELEM, &&, type, !=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break]
[&&, type, !=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =]
[., GETELEM, &&, type, !=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }]
[), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =, ancestor, ;, ancestor, =, ancestor, .]
[!=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =, ancestor, ;]
[), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =, ancestor, ;, ancestor, =, ancestor, .]
[., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =, ancestor, ;, ancestor, =]
[;, break, ;, }, ancestorChild, =, ancestor, ;, ancestor, =, ancestor, ., getParent, (, ), ;, }, compiler, ., reportCodeChange]
[,, ancestor, ), ;, break, ;, }, ancestorChild, =, ancestor, ;, ancestor, =, ancestor, ., getParent, (, ), ;, }]
[), ;, break, ;, }, ancestorChild, =, ancestor, ;, ancestor, =, ancestor, ., getParent, (, ), ;, }, compiler, .]
[=, ancestor, ;, ancestor, =, ancestor, ., getParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, void]
[;, ancestor, =, ancestor, ., getParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, void, maybeEliminateAssignmentByLvalueName, (]
[=, ancestor, ., getParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, void, maybeEliminateAssignmentByLvalueName, (, NodeTraversal, t]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, void, maybeEliminateAssignmentByLvalueName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[., getParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, void, maybeEliminateAssignmentByLvalueName, (, NodeTraversal, t, ,, Node]
[;, }, void, maybeEliminateAssignmentByLvalueName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, lvalue, =, n, .]
[., reportCodeChange, (, ), ;, }, void, maybeEliminateAssignmentByLvalueName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node]
[;, if, (, nameEndsWithFieldNameToStrip, (, lvalue, ), ||, qualifiedNameBeginsWithStripType, (, lvalue, ), ), {, if, (, parent, ., isExprResult, (]
[., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (, lvalue, ), ||, qualifiedNameBeginsWithStripType, (, lvalue, ), ), {, if, (]
[), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;]
[||, qualifiedNameBeginsWithStripType, (, lvalue, ), ), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent]
[), ||, qualifiedNameBeginsWithStripType, (, lvalue, ), ), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =]
[), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;]
[), ), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, )]
[), {, Node, gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;, compiler, .]
[., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps]
[;, replaceWithEmpty, (, parent, ,, gramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, t, ., report]
[., getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else]
[;, compiler, ., reportCodeChange, (, ), ;, }, else, {, t, ., report, (, n, ,, STRIP_ASSIGNMENT_ERROR, ,, lvalue, .]
[,, gramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, t, ., report, (, n, ,, STRIP_ASSIGNMENT_ERROR]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, t, ., report, (, n, ,, STRIP_ASSIGNMENT_ERROR, ,, lvalue]
[;, }, else, {, t, ., report, (, n, ,, STRIP_ASSIGNMENT_ERROR, ,, lvalue, ., getQualifiedName, (, ), ), ;, }]
[., reportCodeChange, (, ), ;, }, else, {, t, ., report, (, n, ,, STRIP_ASSIGNMENT_ERROR, ,, lvalue, ., getQualifiedName, (]
[;, }, }, }, void, maybeEliminateExpressionByName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, expression, =]
[., report, (, n, ,, STRIP_ASSIGNMENT_ERROR, ,, lvalue, ., getQualifiedName, (, ), ), ;, }, }, }, void, maybeEliminateExpressionByName, (]
[,, STRIP_ASSIGNMENT_ERROR, ,, lvalue, ., getQualifiedName, (, ), ), ;, }, }, }, void, maybeEliminateExpressionByName, (, NodeTraversal, t, ,, Node]
[,, lvalue, ., getQualifiedName, (, ), ), ;, }, }, }, void, maybeEliminateExpressionByName, (, NodeTraversal, t, ,, Node, n, ,]
[), ;, }, }, }, void, maybeEliminateExpressionByName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, expression]
[., getQualifiedName, (, ), ), ;, }, }, }, void, maybeEliminateExpressionByName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, if, (, nameEndsWithFieldNameToStrip, (, expression, ), ||, qualifiedNameBeginsWithStripType, (, expression, ), ), {, if, (, parent, ., isExprResult, (]
[., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (, expression, ), ||, qualifiedNameBeginsWithStripType, (, expression, ), ), {, if, (]
[), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;]
[||, qualifiedNameBeginsWithStripType, (, expression, ), ), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent]
[), ||, qualifiedNameBeginsWithStripType, (, expression, ), ), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =]
[), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;]
[), ), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, )]
[), {, Node, gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;, }, else]
[., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps]
[;, replaceWithEmpty, (, parent, ,, gramps, ), ;, }, else, {, replaceWithEmpty, (, n, ,, parent, ), ;, }, compiler]
[., getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;, }, else, {, replaceWithEmpty, (, n, ,, parent]
[;, }, else, {, replaceWithEmpty, (, n, ,, parent, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }]
[,, gramps, ), ;, }, else, {, replaceWithEmpty, (, n, ,, parent, ), ;, }, compiler, ., reportCodeChange, (, )]
[), ;, }, else, {, replaceWithEmpty, (, n, ,, parent, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, void, maybeRemoveCall, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, parent, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, void, maybeRemoveCall, (, NodeTraversal, t, ,, Node]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, void, maybeRemoveCall, (, NodeTraversal, t, ,, Node, n, ,]
[;, }, }, void, maybeRemoveCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isMethodOrCtorCallThatTriggersRemoval, (]
[., reportCodeChange, (, ), ;, }, }, void, maybeRemoveCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[), {, replaceHighestNestedCallWithNull, (, n, ,, parent, ), ;, }, }, void, eliminateKeysWithStripNamesFromObjLit, (, NodeTraversal, t, ,, Node, n, )]
[,, n, ,, parent, ), ), {, replaceHighestNestedCallWithNull, (, n, ,, parent, ), ;, }, }, void, eliminateKeysWithStripNamesFromObjLit, (, NodeTraversal]
[,, parent, ), ), {, replaceHighestNestedCallWithNull, (, n, ,, parent, ), ;, }, }, void, eliminateKeysWithStripNamesFromObjLit, (, NodeTraversal, t, ,]
[), ), {, replaceHighestNestedCallWithNull, (, n, ,, parent, ), ;, }, }, void, eliminateKeysWithStripNamesFromObjLit, (, NodeTraversal, t, ,, Node, n]
[;, }, }, void, eliminateKeysWithStripNamesFromObjLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, key, =, n, ., getFirstChild, (]
[,, parent, ), ;, }, }, void, eliminateKeysWithStripNamesFromObjLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, key, =, n]
[), ;, }, }, void, eliminateKeysWithStripNamesFromObjLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, key, =, n, ., getFirstChild]
[;, while, (, key, !=, null, ), {, if, (, isStripName, (, key, ., getString, (, ), ), ), {]
[., getFirstChild, (, ), ;, while, (, key, !=, null, ), {, if, (, isStripName, (, key, ., getString, (]
[), {, if, (, isStripName, (, key, ., getString, (, ), ), ), {, Node, value, =, key, ., getFirstChild]
[!=, null, ), {, if, (, isStripName, (, key, ., getString, (, ), ), ), {, Node, value, =, key]
[), {, if, (, isStripName, (, key, ., getString, (, ), ), ), {, Node, value, =, key, ., getFirstChild]
[), {, Node, value, =, key, ., getFirstChild, (, ), ;, Node, next, =, key, ., getNext, (, ), ;]
[), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, Node, next, =, key, ., getNext, (, )]
[., getString, (, ), ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, Node, next, =, key]
[;, Node, next, =, key, ., getNext, (, ), ;, n, ., removeChild, (, key, ), ;, key, =, next]
[., getFirstChild, (, ), ;, Node, next, =, key, ., getNext, (, ), ;, n, ., removeChild, (, key, )]
[;, n, ., removeChild, (, key, ), ;, key, =, next, ;, compiler, ., reportCodeChange, (, ), ;, }, else]
[., getNext, (, ), ;, n, ., removeChild, (, key, ), ;, key, =, next, ;, compiler, ., reportCodeChange, (]
[;, key, =, next, ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, key, =, key, ., getNext, (]
[., removeChild, (, key, ), ;, key, =, next, ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, key]
[), ;, key, =, next, ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, key, =, key, ., getNext]
[=, next, ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, key, =, key, ., getNext, (, ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, else, {, key, =, key, ., getNext, (, ), ;, }, }]
[;, }, else, {, key, =, key, ., getNext, (, ), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable]
[., reportCodeChange, (, ), ;, }, else, {, key, =, key, ., getNext, (, ), ;, }, }, }, boolean]
[=, key, ., getNext, (, ), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return]
[;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return, n, !=, null, &&, (, n]
[., getNext, (, ), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return, n, !=]
[;, }, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {, String, name, =, n, ., getQualifiedName, (, ), ;, return, qualifiedNameBeginsWithStripType]
[&&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (, n, ., getFirstChild, (, ), ), )]
[&&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (, n]
[&&, (, n, ., isCall, (, ), ||, n, ., isNew, (, ), ), &&, n, ., hasChildren, (, )]
[!=, null, &&, (, n, ., isCall, (, ), ||, n, ., isNew, (, ), ), &&, n, ., hasChildren]
[&&, (, n, ., isCall, (, ), ||, n, ., isNew, (, ), ), &&, n, ., hasChildren, (, )]
[&&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (, n]
[), &&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (]
[||, n, ., isNew, (, ), ), &&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild]
[., isCall, (, ), ||, n, ., isNew, (, ), ), &&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType]
[), &&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (]
[., isNew, (, ), ), &&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, )]
[&&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (, n, ., getFirstChild, (, ), ), )]
[., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (, n, ., getFirstChild]
[;, }, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {, String, name, =, n, ., getQualifiedName, (, ), ;, return, qualifiedNameBeginsWithStripType]
[), ;, }, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {, String, name, =, n, ., getQualifiedName, (, ), ;, return]
[||, nameEndsWithFieldNameToStrip, (, n, ., getFirstChild, (, ), ), ), ;, }, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {, String]
[), ||, nameEndsWithFieldNameToStrip, (, n, ., getFirstChild, (, ), ), ), ;, }, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {]
[., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (, n, ., getFirstChild, (, ), ), ), ;, }, boolean, qualifiedNameBeginsWithStripType, (]
[), ;, }, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {, String, name, =, n, ., getQualifiedName, (, ), ;, return]
[), ), ;, }, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {, String, name, =, n, ., getQualifiedName, (, ), ;]
[., getFirstChild, (, ), ), ), ;, }, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {, String, name, =, n, .]
[;, return, qualifiedNameBeginsWithStripType, (, name, ), ;, }, boolean, qualifiedNameBeginsWithStripType, (, String, name, ), {, if, (, name, !=, null]
[., getQualifiedName, (, ), ;, return, qualifiedNameBeginsWithStripType, (, name, ), ;, }, boolean, qualifiedNameBeginsWithStripType, (, String, name, ), {, if]
[;, }, boolean, qualifiedNameBeginsWithStripType, (, String, name, ), {, if, (, name, !=, null, ), {, for, (, String, type]
[), ;, }, boolean, qualifiedNameBeginsWithStripType, (, String, name, ), {, if, (, name, !=, null, ), {, for, (, String]
[), {, for, (, String, type, :, stripTypes, ), {, if, (, name, ., equals, (, type, ), ||, name]
[!=, null, ), {, for, (, String, type, :, stripTypes, ), {, if, (, name, ., equals, (, type, )]
[), {, for, (, String, type, :, stripTypes, ), {, if, (, name, ., equals, (, type, ), ||, name]
[), {, if, (, name, ., equals, (, type, ), ||, name, ., startsWith, (, type, +, ".", ), )]
[), {, return, true, ;, }, }, for, (, String, type, :, stripTypePrefixes, ), {, if, (, name, ., startsWith]
[||, name, ., startsWith, (, type, +, ".", ), ), {, return, true, ;, }, }, for, (, String, type]
[., equals, (, type, ), ||, name, ., startsWith, (, type, +, ".", ), ), {, return, true, ;, }]
[), ||, name, ., startsWith, (, type, +, ".", ), ), {, return, true, ;, }, }, for, (, String]
[), {, return, true, ;, }, }, for, (, String, type, :, stripTypePrefixes, ), {, if, (, name, ., startsWith]
[., startsWith, (, type, +, ".", ), ), {, return, true, ;, }, }, for, (, String, type, :, stripTypePrefixes]
[), ), {, return, true, ;, }, }, for, (, String, type, :, stripTypePrefixes, ), {, if, (, name, .]
[+, ".", ), ), {, return, true, ;, }, }, for, (, String, type, :, stripTypePrefixes, ), {, if, (]
[), ), {, return, true, ;, }, }, for, (, String, type, :, stripTypePrefixes, ), {, if, (, name, .]
[;, }, }, for, (, String, type, :, stripTypePrefixes, ), {, if, (, name, ., startsWith, (, type, ), )]
[), {, if, (, name, ., startsWith, (, type, ), ), {, return, true, ;, }, }, }, return, false]
[), {, return, true, ;, }, }, }, return, false, ;, }, boolean, isReferenceToRemovedVar, (, NodeTraversal, t, ,, Node, n]
[., startsWith, (, type, ), ), {, return, true, ;, }, }, }, return, false, ;, }, boolean, isReferenceToRemovedVar, (]
[), ), {, return, true, ;, }, }, }, return, false, ;, }, boolean, isReferenceToRemovedVar, (, NodeTraversal, t, ,, Node]
[;, }, }, }, return, false, ;, }, boolean, isReferenceToRemovedVar, (, NodeTraversal, t, ,, Node, n, ), {, String, name]
[;, }, boolean, isReferenceToRemovedVar, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =, n, ., getString, (, )]
[;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, name]
[., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope]
[;, Scope, ., Var, var, =, scope, ., getVar, (, name, ), ;, return, varsToRemove, ., contains, (, var, )]
[., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, name, ), ;, return, varsToRemove, .]
[;, return, varsToRemove, ., contains, (, var, ), ;, }, boolean, isMethodOrCtorCallThatTriggersRemoval, (, NodeTraversal, t, ,, Node, n, ,, Node]
[., getVar, (, name, ), ;, return, varsToRemove, ., contains, (, var, ), ;, }, boolean, isMethodOrCtorCallThatTriggersRemoval, (, NodeTraversal, t]
[), ;, return, varsToRemove, ., contains, (, var, ), ;, }, boolean, isMethodOrCtorCallThatTriggersRemoval, (, NodeTraversal, t, ,, Node, n, ,]
[;, }, boolean, isMethodOrCtorCallThatTriggersRemoval, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, function, =, n, .]
[., contains, (, var, ), ;, }, boolean, isMethodOrCtorCallThatTriggersRemoval, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[), ;, }, boolean, isMethodOrCtorCallThatTriggersRemoval, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, function, =, n]
[;, if, (, function, ==, null, ||, !, function, ., isGetProp, (, ), ), {, return, false, ;, }, if]
[., getFirstChild, (, ), ;, if, (, function, ==, null, ||, !, function, ., isGetProp, (, ), ), {, return]
[), {, return, false, ;, }, if, (, parent, !=, null, &&, parent, ., isName, (, ), ), {, Node]
[||, !, function, ., isGetProp, (, ), ), {, return, false, ;, }, if, (, parent, !=, null, &&, parent]
[==, null, ||, !, function, ., isGetProp, (, ), ), {, return, false, ;, }, if, (, parent, !=, null]
[||, !, function, ., isGetProp, (, ), ), {, return, false, ;, }, if, (, parent, !=, null, &&, parent]
[), {, return, false, ;, }, if, (, parent, !=, null, &&, parent, ., isName, (, ), ), {, Node]
[), {, return, false, ;, }, if, (, parent, !=, null, &&, parent, ., isName, (, ), ), {, Node]
[., isGetProp, (, ), ), {, return, false, ;, }, if, (, parent, !=, null, &&, parent, ., isName, (]
[;, }, if, (, parent, !=, null, &&, parent, ., isName, (, ), ), {, Node, gramps, =, parent, .]
[), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, !=, null, &&, gramps, ., isVar]
[&&, parent, ., isName, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps]
[!=, null, &&, parent, ., isName, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if]
[&&, parent, ., isName, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps]
[), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, !=, null, &&, gramps, ., isVar]
[., isName, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, !=, null]
[;, if, (, gramps, !=, null, &&, gramps, ., isVar, (, ), ), {, return, false, ;, }, }, Node]
[., getParent, (, ), ;, if, (, gramps, !=, null, &&, gramps, ., isVar, (, ), ), {, return, false]
[), {, return, false, ;, }, }, Node, callee, =, function, ., getFirstChild, (, ), ;, return, nameEndsWithFieldNameToStrip, (, callee]
[&&, gramps, ., isVar, (, ), ), {, return, false, ;, }, }, Node, callee, =, function, ., getFirstChild, (]
[!=, null, &&, gramps, ., isVar, (, ), ), {, return, false, ;, }, }, Node, callee, =, function, .]
[&&, gramps, ., isVar, (, ), ), {, return, false, ;, }, }, Node, callee, =, function, ., getFirstChild, (]
[), {, return, false, ;, }, }, Node, callee, =, function, ., getFirstChild, (, ), ;, return, nameEndsWithFieldNameToStrip, (, callee]
[., isVar, (, ), ), {, return, false, ;, }, }, Node, callee, =, function, ., getFirstChild, (, ), ;]
[;, }, }, Node, callee, =, function, ., getFirstChild, (, ), ;, return, nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (]
[;, return, nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (, function, ), ||, qualifiedNameBeginsWithStripType, (, function, ), ||, actsOnStripType, (, t]
[., getFirstChild, (, ), ;, return, nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (, function, ), ||, qualifiedNameBeginsWithStripType, (, function, )]
[;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (, n, !=, null, &&, n, ., isGetProp]
[||, actsOnStripType, (, t, ,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (]
[||, qualifiedNameBeginsWithStripType, (, function, ), ||, actsOnStripType, (, t, ,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node]
[||, nameEndsWithFieldNameToStrip, (, function, ), ||, qualifiedNameBeginsWithStripType, (, function, ), ||, actsOnStripType, (, t, ,, n, ), ;, }, boolean]
[), ||, nameEndsWithFieldNameToStrip, (, function, ), ||, qualifiedNameBeginsWithStripType, (, function, ), ||, actsOnStripType, (, t, ,, n, ), ;, }]
[||, qualifiedNameBeginsWithStripType, (, function, ), ||, actsOnStripType, (, t, ,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node]
[), ||, qualifiedNameBeginsWithStripType, (, function, ), ||, actsOnStripType, (, t, ,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable]
[||, actsOnStripType, (, t, ,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (]
[), ||, actsOnStripType, (, t, ,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if]
[;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (, n, !=, null, &&, n, ., isGetProp]
[,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (, n, !=, null, &&]
[), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (, n, !=, null, &&, n, .]
[), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return, propNode, !=, null, &&, propNode, ., isString, (]
[&&, n, ., isGetProp, (, ), ), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return, propNode, !=]
[!=, null, &&, n, ., isGetProp, (, ), ), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return]
[&&, n, ., isGetProp, (, ), ), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return, propNode, !=]
[), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return, propNode, !=, null, &&, propNode, ., isString, (]
[., isGetProp, (, ), ), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return, propNode, !=, null, &&]
[;, return, propNode, !=, null, &&, propNode, ., isString, (, ), &&, isStripName, (, propNode, ., getString, (, ), )]
[., getLastChild, (, ), ;, return, propNode, !=, null, &&, propNode, ., isString, (, ), &&, isStripName, (, propNode, .]
[;, }, return, false, ;, }, private, boolean, actsOnStripType, (, NodeTraversal, t, ,, Node, callNode, ), {, SubclassRelationship, classes, =]
[&&, isStripName, (, propNode, ., getString, (, ), ), ;, }, return, false, ;, }, private, boolean, actsOnStripType, (, NodeTraversal]
[&&, propNode, ., isString, (, ), &&, isStripName, (, propNode, ., getString, (, ), ), ;, }, return, false, ;]
[!=, null, &&, propNode, ., isString, (, ), &&, isStripName, (, propNode, ., getString, (, ), ), ;, }, return]
[&&, propNode, ., isString, (, ), &&, isStripName, (, propNode, ., getString, (, ), ), ;, }, return, false, ;]
[&&, isStripName, (, propNode, ., getString, (, ), ), ;, }, return, false, ;, }, private, boolean, actsOnStripType, (, NodeTraversal]
[., isString, (, ), &&, isStripName, (, propNode, ., getString, (, ), ), ;, }, return, false, ;, }, private]
[;, }, return, false, ;, }, private, boolean, actsOnStripType, (, NodeTraversal, t, ,, Node, callNode, ), {, SubclassRelationship, classes, =]
[), ;, }, return, false, ;, }, private, boolean, actsOnStripType, (, NodeTraversal, t, ,, Node, callNode, ), {, SubclassRelationship, classes]
[., getString, (, ), ), ;, }, return, false, ;, }, private, boolean, actsOnStripType, (, NodeTraversal, t, ,, Node, callNode]
[;, }, private, boolean, actsOnStripType, (, NodeTraversal, t, ,, Node, callNode, ), {, SubclassRelationship, classes, =, compiler, ., getCodingConvention, (]
[;, if, (, classes, !=, null, ), {, if, (, qualifiedNameBeginsWithStripType, (, classes, ., subclassName, ), ), {, return, true]
[., getClassesDefinedByCall, (, callNode, ), ;, if, (, classes, !=, null, ), {, if, (, qualifiedNameBeginsWithStripType, (, classes, ., subclassName]
[., getCodingConvention, (, ), ., getClassesDefinedByCall, (, callNode, ), ;, if, (, classes, !=, null, ), {, if, (, qualifiedNameBeginsWithStripType]
[), ;, if, (, classes, !=, null, ), {, if, (, qualifiedNameBeginsWithStripType, (, classes, ., subclassName, ), ), {, return]
[), {, if, (, qualifiedNameBeginsWithStripType, (, classes, ., subclassName, ), ), {, return, true, ;, }, if, (, qualifiedNameBeginsWithStripType, (]
[!=, null, ), {, if, (, qualifiedNameBeginsWithStripType, (, classes, ., subclassName, ), ), {, return, true, ;, }, if, (]
[), {, if, (, qualifiedNameBeginsWithStripType, (, classes, ., subclassName, ), ), {, return, true, ;, }, if, (, qualifiedNameBeginsWithStripType, (]
[), {, return, true, ;, }, if, (, qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {, t, ., report, (]
[), ), {, return, true, ;, }, if, (, qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {, t, ., report]
[., subclassName, ), ), {, return, true, ;, }, if, (, qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {, t]
[;, }, if, (, qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {, t, ., report, (, callNode, ,, STRIP_TYPE_INHERIT_ERROR, ,]
[), {, t, ., report, (, callNode, ,, STRIP_TYPE_INHERIT_ERROR, ,, classes, ., subclassName, ,, classes, ., superclassName, ), ;, }]
[), ), {, t, ., report, (, callNode, ,, STRIP_TYPE_INHERIT_ERROR, ,, classes, ., subclassName, ,, classes, ., superclassName, ), ;]
[., superclassName, ), ), {, t, ., report, (, callNode, ,, STRIP_TYPE_INHERIT_ERROR, ,, classes, ., subclassName, ,, classes, ., superclassName]
[;, }, }, return, false, ;, }, boolean, isStripName, (, String, name, ), {, if, (, stripNameSuffixes, ., contains, (]
[., report, (, callNode, ,, STRIP_TYPE_INHERIT_ERROR, ,, classes, ., subclassName, ,, classes, ., superclassName, ), ;, }, }, return, false]
[,, STRIP_TYPE_INHERIT_ERROR, ,, classes, ., subclassName, ,, classes, ., superclassName, ), ;, }, }, return, false, ;, }, boolean, isStripName]
[,, classes, ., subclassName, ,, classes, ., superclassName, ), ;, }, }, return, false, ;, }, boolean, isStripName, (, String]
[,, classes, ., superclassName, ), ;, }, }, return, false, ;, }, boolean, isStripName, (, String, name, ), {, if]
[., subclassName, ,, classes, ., superclassName, ), ;, }, }, return, false, ;, }, boolean, isStripName, (, String, name, )]
[), ;, }, }, return, false, ;, }, boolean, isStripName, (, String, name, ), {, if, (, stripNameSuffixes, ., contains]
[., superclassName, ), ;, }, }, return, false, ;, }, boolean, isStripName, (, String, name, ), {, if, (, stripNameSuffixes]
[;, }, boolean, isStripName, (, String, name, ), {, if, (, stripNameSuffixes, ., contains, (, name, ), ||, stripNamePrefixes, .]
[), {, return, true, ;, }, if, (, (, name, ., length, (, ), ==, 0, ), ||, Character, .]
[||, stripNamePrefixes, ., contains, (, name, ), ), {, return, true, ;, }, if, (, (, name, ., length, (]
[., contains, (, name, ), ||, stripNamePrefixes, ., contains, (, name, ), ), {, return, true, ;, }, if, (]
[), ||, stripNamePrefixes, ., contains, (, name, ), ), {, return, true, ;, }, if, (, (, name, ., length]
[), {, return, true, ;, }, if, (, (, name, ., length, (, ), ==, 0, ), ||, Character, .]
[., contains, (, name, ), ), {, return, true, ;, }, if, (, (, name, ., length, (, ), ==]
[), ), {, return, true, ;, }, if, (, (, name, ., length, (, ), ==, 0, ), ||, Character]
[;, }, if, (, (, name, ., length, (, ), ==, 0, ), ||, Character, ., isUpperCase, (, name, .]
[), {, return, false, ;, }, String, lcName, =, name, ., toLowerCase, (, ), ;, for, (, String, stripName, :]
[||, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), ), {, return, false, ;, }, String, lcName]
[), ||, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), ), {, return, false, ;, }, String]
[==, 0, ), ||, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), ), {, return, false, ;]
[., length, (, ), ==, 0, ), ||, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), )]
[), ||, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), ), {, return, false, ;, }, String]
[), {, return, false, ;, }, String, lcName, =, name, ., toLowerCase, (, ), ;, for, (, String, stripName, :]
[., isUpperCase, (, name, ., charAt, (, 0, ), ), ), {, return, false, ;, }, String, lcName, =, name]
[), ), {, return, false, ;, }, String, lcName, =, name, ., toLowerCase, (, ), ;, for, (, String, stripName]
[., charAt, (, 0, ), ), ), {, return, false, ;, }, String, lcName, =, name, ., toLowerCase, (, )]
[), ), ), {, return, false, ;, }, String, lcName, =, name, ., toLowerCase, (, ), ;, for, (, String]
[;, }, String, lcName, =, name, ., toLowerCase, (, ), ;, for, (, String, stripName, :, stripNamePrefixes, ), {, if]
[;, for, (, String, stripName, :, stripNamePrefixes, ), {, if, (, lcName, ., startsWith, (, stripName, ., toLowerCase, (, )]
[., toLowerCase, (, ), ;, for, (, String, stripName, :, stripNamePrefixes, ), {, if, (, lcName, ., startsWith, (, stripName]
[), {, if, (, lcName, ., startsWith, (, stripName, ., toLowerCase, (, ), ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, for, (, String, stripName, :, stripNameSuffixes, ), {, if, (, lcName, ., endsWith]
[., startsWith, (, stripName, ., toLowerCase, (, ), ), ), {, return, true, ;, }, }, for, (, String, stripName]
[), ), {, return, true, ;, }, }, for, (, String, stripName, :, stripNameSuffixes, ), {, if, (, lcName, .]
[., toLowerCase, (, ), ), ), {, return, true, ;, }, }, for, (, String, stripName, :, stripNameSuffixes, ), {]
[;, }, }, for, (, String, stripName, :, stripNameSuffixes, ), {, if, (, lcName, ., endsWith, (, stripName, ., toLowerCase]
[), {, if, (, lcName, ., endsWith, (, stripName, ., toLowerCase, (, ), ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, void, replaceWithNull, (, Node, n, ,, Node, parent, )]
[., endsWith, (, stripName, ., toLowerCase, (, ), ), ), {, return, true, ;, }, }, return, false, ;, }]
[), ), {, return, true, ;, }, }, return, false, ;, }, void, replaceWithNull, (, Node, n, ,, Node, parent]
[., toLowerCase, (, ), ), ), {, return, true, ;, }, }, return, false, ;, }, void, replaceWithNull, (, Node]
[;, }, }, return, false, ;, }, void, replaceWithNull, (, Node, n, ,, Node, parent, ), {, parent, ., replaceChild]
[;, }, void, replaceWithNull, (, Node, n, ,, Node, parent, ), {, parent, ., replaceChild, (, n, ,, IR, .]
[;, }, void, replaceWithEmpty, (, Node, n, ,, Node, parent, ), {, NodeUtil, ., removeChild, (, parent, ,, n, )]
[., replaceChild, (, n, ,, IR, ., nullNode, (, ), ), ;, }, void, replaceWithEmpty, (, Node, n, ,, Node]
[,, IR, ., nullNode, (, ), ), ;, }, void, replaceWithEmpty, (, Node, n, ,, Node, parent, ), {, NodeUtil]
[), ;, }, void, replaceWithEmpty, (, Node, n, ,, Node, parent, ), {, NodeUtil, ., removeChild, (, parent, ,, n]
[., nullNode, (, ), ), ;, }, void, replaceWithEmpty, (, Node, n, ,, Node, parent, ), {, NodeUtil, ., removeChild]
[;, }, }, }]
[., removeChild, (, parent, ,, n, ), ;, }, }, }]
[,, n, ), ;, }, }, }]
[), ;, }, }, }]
