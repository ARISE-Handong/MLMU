[;, private, final, double, coefficients, [, ], ;, public, PolynomialFunction, (, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException]
[;, private, final, double, coefficients, [, ], ;, public, PolynomialFunction, (, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException]
[;, int, n, =, c, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats]
[., checkNotNull, (, c, ), ;, int, n, =, c, ., length, ;, if, (, n, ==, 0, ), {]
[), ;, int, n, =, c, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (]
[., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1, ), &&]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1, ), &&]
[;, }, while, (, (, n, >, 1, ), &&, (, c, [, n, -, 1, ], ==, 0, )]
[), ;, }, while, (, (, n, >, 1, ), &&, (, c, [, n, -, 1, ], ==, 0]
[., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1, ), &&, (, c, [, n, -, 1, ]]
[), {, --, n, ;, }, this, ., coefficients, =, new, double, [, n, ], ;, System, ., arraycopy, (]
[&&, (, c, [, n, -, 1, ], ==, 0, ), ), {, --, n, ;, }, this, ., coefficients]
[), &&, (, c, [, n, -, 1, ], ==, 0, ), ), {, --, n, ;, }, this, .]
[>, 1, ), &&, (, c, [, n, -, 1, ], ==, 0, ), ), {, --, n, ;, }]
[), &&, (, c, [, n, -, 1, ], ==, 0, ), ), {, --, n, ;, }, this, .]
[), {, --, n, ;, }, this, ., coefficients, =, new, double, [, n, ], ;, System, ., arraycopy, (]
[), ), {, --, n, ;, }, this, ., coefficients, =, new, double, [, n, ], ;, System, ., arraycopy]
[==, 0, ), ), {, --, n, ;, }, this, ., coefficients, =, new, double, [, n, ], ;, System]
[[, n, -, 1, ], ==, 0, ), ), {, --, n, ;, }, this, ., coefficients, =, new, double]
[], ==, 0, ), ), {, --, n, ;, }, this, ., coefficients, =, new, double, [, n, ], ;]
[-, 1, ], ==, 0, ), ), {, --, n, ;, }, this, ., coefficients, =, new, double, [, n]
[], ==, 0, ), ), {, --, n, ;, }, this, ., coefficients, =, new, double, [, n, ], ;]
[), ), {, --, n, ;, }, this, ., coefficients, =, new, double, [, n, ], ;, System, ., arraycopy]
[;, }, this, ., coefficients, =, new, double, [, n, ], ;, System, ., arraycopy, (, c, ,, 0, ,]
[;, }, this, ., coefficients, =, new, double, [, n, ], ;, System, ., arraycopy, (, c, ,, 0, ,]
[=, new, double, [, n, ], ;, System, ., arraycopy, (, c, ,, 0, ,, this, ., coefficients, ,, 0]
[., coefficients, =, new, double, [, n, ], ;, System, ., arraycopy, (, c, ,, 0, ,, this, ., coefficients]
[;, System, ., arraycopy, (, c, ,, 0, ,, this, ., coefficients, ,, 0, ,, n, ), ;, }, public]
[], ;, System, ., arraycopy, (, c, ,, 0, ,, this, ., coefficients, ,, 0, ,, n, ), ;, }]
[;, }, public, double, value, (, double, x, ), {, return, evaluate, (, coefficients, ,, x, ), ;, }, public]
[., arraycopy, (, c, ,, 0, ,, this, ., coefficients, ,, 0, ,, n, ), ;, }, public, double, value]
[,, 0, ,, this, ., coefficients, ,, 0, ,, n, ), ;, }, public, double, value, (, double, x, )]
[,, this, ., coefficients, ,, 0, ,, n, ), ;, }, public, double, value, (, double, x, ), {, return]
[,, 0, ,, n, ), ;, }, public, double, value, (, double, x, ), {, return, evaluate, (, coefficients, ,]
[., coefficients, ,, 0, ,, n, ), ;, }, public, double, value, (, double, x, ), {, return, evaluate, (]
[,, n, ), ;, }, public, double, value, (, double, x, ), {, return, evaluate, (, coefficients, ,, x, )]
[), ;, }, public, double, value, (, double, x, ), {, return, evaluate, (, coefficients, ,, x, ), ;, }]
[;, }, public, int, degree, (, ), {, return, coefficients, ., length, -, 1, ;, }, public, double, [, ]]
[,, x, ), ;, }, public, int, degree, (, ), {, return, coefficients, ., length, -, 1, ;, }, public]
[), ;, }, public, int, degree, (, ), {, return, coefficients, ., length, -, 1, ;, }, public, double, []
[;, }, public, double, [, ], getCoefficients, (, ), {, return, coefficients, ., clone, (, ), ;, }, protected, static]
[-, 1, ;, }, public, double, [, ], getCoefficients, (, ), {, return, coefficients, ., clone, (, ), ;, }]
[., length, -, 1, ;, }, public, double, [, ], getCoefficients, (, ), {, return, coefficients, ., clone, (, )]
[;, }, public, double, [, ], getCoefficients, (, ), {, return, coefficients, ., clone, (, ), ;, }, protected, static]
[;, }, protected, static, double, evaluate, (, double, [, ], coefficients, ,, double, argument, ), throws, NullArgumentException, ,, NoDataException, {]
[., clone, (, ), ;, }, protected, static, double, evaluate, (, double, [, ], coefficients, ,, double, argument, ), throws]
[;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats]
[., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {]
[), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result]
[., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result, =, coefficients, [, n, -, 1]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result, =, coefficients, [, n]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result, =, coefficients, [, n, -, 1]
[;, }, double, result, =, coefficients, [, n, -, 1, ], ;, for, (, int, j, =, n, -, 2]
[), ;, }, double, result, =, coefficients, [, n, -, 1, ], ;, for, (, int, j, =, n, -]
[., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result, =, coefficients, [, n, -, 1, ], ;, for, (, int, j, =]
[;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =]
[[, n, -, 1, ], ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j]
[], ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result]
[-, 1, ], ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, )]
[], ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result]
[;, j, >=, 0, ;, j, --, ), {, result, =, argument, *, result, +, coefficients, [, j, ], ;]
[-, 2, ;, j, >=, 0, ;, j, --, ), {, result, =, argument, *, result, +, coefficients, [, j]
[;, j, >=, 0, ;, j, --, ), {, result, =, argument, *, result, +, coefficients, [, j, ], ;]
[;, j, --, ), {, result, =, argument, *, result, +, coefficients, [, j, ], ;, }, return, result, ;]
[>=, 0, ;, j, --, ), {, result, =, argument, *, result, +, coefficients, [, j, ], ;, }, return]
[;, j, --, ), {, result, =, argument, *, result, +, coefficients, [, j, ], ;, }, return, result, ;]
[), {, result, =, argument, *, result, +, coefficients, [, j, ], ;, }, return, result, ;, }, public, DerivativeStructure]
[--, ), {, result, =, argument, *, result, +, coefficients, [, j, ], ;, }, return, result, ;, }, public]
[=, argument, *, result, +, coefficients, [, j, ], ;, }, return, result, ;, }, public, DerivativeStructure, value, (, final]
[;, }, return, result, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils]
[+, coefficients, [, j, ], ;, }, return, result, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws]
[*, result, +, coefficients, [, j, ], ;, }, return, result, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t]
[+, coefficients, [, j, ], ;, }, return, result, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws]
[;, }, return, result, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils]
[[, j, ], ;, }, return, result, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NullArgumentException, ,]
[], ;, }, return, result, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NullArgumentException, ,, NoDataException, {]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients]
[;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats]
[., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {]
[), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, DerivativeStructure, result]
[., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, DerivativeStructure, result, =, new, DerivativeStructure, (, t, .]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, DerivativeStructure, result, =, new, DerivativeStructure, (]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, DerivativeStructure, result, =, new, DerivativeStructure, (, t, .]
[;, }, DerivativeStructure, result, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, t, ., getOrder, (, ), ,]
[), ;, }, DerivativeStructure, result, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, t, ., getOrder, (, )]
[., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, DerivativeStructure, result, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, t, ., getOrder]
[;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =]
[,, t, ., getOrder, (, ), ,, coefficients, [, n, -, 1, ], ), ;, for, (, int, j, =]
[., getFreeParameters, (, ), ,, t, ., getOrder, (, ), ,, coefficients, [, n, -, 1, ], ), ;, for]
[,, coefficients, [, n, -, 1, ], ), ;, for, (, int, j, =, n, -, 2, ;, j, >=]
[., getOrder, (, ), ,, coefficients, [, n, -, 1, ], ), ;, for, (, int, j, =, n, -]
[), ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result]
[[, n, -, 1, ], ), ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;]
[], ), ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {]
[-, 1, ], ), ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --]
[], ), ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {]
[;, j, >=, 0, ;, j, --, ), {, result, =, result, ., multiply, (, t, ), ., add, (]
[-, 2, ;, j, >=, 0, ;, j, --, ), {, result, =, result, ., multiply, (, t, ), .]
[;, j, >=, 0, ;, j, --, ), {, result, =, result, ., multiply, (, t, ), ., add, (]
[;, j, --, ), {, result, =, result, ., multiply, (, t, ), ., add, (, coefficients, [, j, ]]
[>=, 0, ;, j, --, ), {, result, =, result, ., multiply, (, t, ), ., add, (, coefficients, []
[;, j, --, ), {, result, =, result, ., multiply, (, t, ), ., add, (, coefficients, [, j, ]]
[), {, result, =, result, ., multiply, (, t, ), ., add, (, coefficients, [, j, ], ), ;, }]
[--, ), {, result, =, result, ., multiply, (, t, ), ., add, (, coefficients, [, j, ], ), ;]
[=, result, ., multiply, (, t, ), ., add, (, coefficients, [, j, ], ), ;, }, return, result, ;]
[;, }, return, result, ;, }, public, PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final, int, lowLength, =, FastMath]
[., add, (, coefficients, [, j, ], ), ;, }, return, result, ;, }, public, PolynomialFunction, add, (, final, PolynomialFunction]
[., multiply, (, t, ), ., add, (, coefficients, [, j, ], ), ;, }, return, result, ;, }, public]
[), ., add, (, coefficients, [, j, ], ), ;, }, return, result, ;, }, public, PolynomialFunction, add, (, final]
[), ;, }, return, result, ;, }, public, PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final, int, lowLength, =]
[[, j, ], ), ;, }, return, result, ;, }, public, PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final]
[], ), ;, }, return, result, ;, }, public, PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final, int, lowLength]
[;, }, public, PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final, int, lowLength, =, FastMath, ., min, (, coefficients]
[;, final, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;]
[., min, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, final, int, highLength, =, FastMath, .]
[,, p, ., coefficients, ., length, ), ;, final, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,]
[., length, ,, p, ., coefficients, ., length, ), ;, final, int, highLength, =, FastMath, ., max, (, coefficients, .]
[), ;, final, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,, p, ., coefficients, ., length, )]
[., length, ), ;, final, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,, p, ., coefficients, .]
[., coefficients, ., length, ), ;, final, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,, p, .]
[;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i]
[., max, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, double, [, ], newCoefficients, =, new]
[,, p, ., coefficients, ., length, ), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for]
[., length, ,, p, ., coefficients, ., length, ), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ]]
[), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;]
[., length, ), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =]
[., coefficients, ., length, ), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i]
[;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +, p]
[;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +, p, ., coefficients, [, i]
[<, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +, p, ., coefficients]
[;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +, p, ., coefficients, [, i]
[), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }]
[), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }]
[=, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (, coefficients]
[[, i, ], =, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy]
[], =, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (]
[;, }, System, ., arraycopy, (, (, coefficients, ., length, <, p, ., coefficients, ., length, ), ?, p, .]
[+, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (, coefficients, ., length, <, p, .]
[[, i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (, coefficients, ., length]
[], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (, coefficients, ., length, <, p]
[;, }, System, ., arraycopy, (, (, coefficients, ., length, <, p, ., coefficients, ., length, ), ?, p, .]
[[, i, ], ;, }, System, ., arraycopy, (, (, coefficients, ., length, <, p, ., coefficients, ., length, )]
[., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (, coefficients, ., length, <, p, ., coefficients, .]
[], ;, }, System, ., arraycopy, (, (, coefficients, ., length, <, p, ., coefficients, ., length, ), ?, p]
[;, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int, lowLength]
[., arraycopy, (, (, coefficients, ., length, <, p, ., coefficients, ., length, ), ?, p, ., coefficients, :, coefficients]
[,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, return, new, PolynomialFunction, (, newCoefficients, ), ;, }]
[?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, return, new]
[), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, return]
[<, p, ., coefficients, ., length, ), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,]
[., length, <, p, ., coefficients, ., length, ), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,]
[), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, return]
[., length, ), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, )]
[., coefficients, ., length, ), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -]
[:, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, return, new, PolynomialFunction, (, newCoefficients, )]
[., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, return, new, PolynomialFunction, (]
[,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, return, new, PolynomialFunction, (, newCoefficients, ), ;, }]
[,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction]
[,, lowLength, ,, highLength, -, lowLength, ), ;, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, subtract, (]
[,, highLength, -, lowLength, ), ;, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, subtract, (, final, PolynomialFunction]
[), ;, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int]
[-, lowLength, ), ;, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, )]
[), ;, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int]
[;, }, public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int, lowLength, =, FastMath, ., min, (, coefficients, .]
[), ;, }, public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int, lowLength, =, FastMath, ., min, (, coefficients]
[;, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, double]
[., min, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, int, highLength, =, FastMath, ., max]
[,, p, ., coefficients, ., length, ), ;, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,, p]
[., length, ,, p, ., coefficients, ., length, ), ;, int, highLength, =, FastMath, ., max, (, coefficients, ., length]
[), ;, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;]
[., length, ), ;, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,, p, ., coefficients, ., length]
[., coefficients, ., length, ), ;, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,, p, ., coefficients]
[;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i]
[., max, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, double, [, ], newCoefficients, =, new]
[,, p, ., coefficients, ., length, ), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for]
[., length, ,, p, ., coefficients, ., length, ), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ]]
[), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;]
[., length, ), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =]
[., coefficients, ., length, ), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i]
[;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], -, p]
[;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], -, p, ., coefficients, [, i]
[<, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], -, p, ., coefficients]
[;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], -, p, ., coefficients, [, i]
[), {, newCoefficients, [, i, ], =, coefficients, [, i, ], -, p, ., coefficients, [, i, ], ;, }]
[), {, newCoefficients, [, i, ], =, coefficients, [, i, ], -, p, ., coefficients, [, i, ], ;, }]
[=, coefficients, [, i, ], -, p, ., coefficients, [, i, ], ;, }, if, (, coefficients, ., length, <]
[[, i, ], =, coefficients, [, i, ], -, p, ., coefficients, [, i, ], ;, }, if, (, coefficients]
[], =, coefficients, [, i, ], -, p, ., coefficients, [, i, ], ;, }, if, (, coefficients, ., length]
[;, }, if, (, coefficients, ., length, <, p, ., coefficients, ., length, ), {, for, (, int, i, =]
[-, p, ., coefficients, [, i, ], ;, }, if, (, coefficients, ., length, <, p, ., coefficients, ., length]
[[, i, ], -, p, ., coefficients, [, i, ], ;, }, if, (, coefficients, ., length, <, p, .]
[], -, p, ., coefficients, [, i, ], ;, }, if, (, coefficients, ., length, <, p, ., coefficients, .]
[;, }, if, (, coefficients, ., length, <, p, ., coefficients, ., length, ), {, for, (, int, i, =]
[[, i, ], ;, }, if, (, coefficients, ., length, <, p, ., coefficients, ., length, ), {, for, (]
[., coefficients, [, i, ], ;, }, if, (, coefficients, ., length, <, p, ., coefficients, ., length, ), {]
[], ;, }, if, (, coefficients, ., length, <, p, ., coefficients, ., length, ), {, for, (, int, i]
[), {, for, (, int, i, =, lowLength, ;, i, <, highLength, ;, ++, i, ), {, newCoefficients, [, i]
[<, p, ., coefficients, ., length, ), {, for, (, int, i, =, lowLength, ;, i, <, highLength, ;, ++]
[., length, <, p, ., coefficients, ., length, ), {, for, (, int, i, =, lowLength, ;, i, <, highLength]
[), {, for, (, int, i, =, lowLength, ;, i, <, highLength, ;, ++, i, ), {, newCoefficients, [, i]
[., length, ), {, for, (, int, i, =, lowLength, ;, i, <, highLength, ;, ++, i, ), {, newCoefficients]
[., coefficients, ., length, ), {, for, (, int, i, =, lowLength, ;, i, <, highLength, ;, ++, i, )]
[;, i, <, highLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, -, p, ., coefficients, [, i]
[;, ++, i, ), {, newCoefficients, [, i, ], =, -, p, ., coefficients, [, i, ], ;, }, }]
[<, highLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, -, p, ., coefficients, [, i, ], ;]
[;, ++, i, ), {, newCoefficients, [, i, ], =, -, p, ., coefficients, [, i, ], ;, }, }]
[), {, newCoefficients, [, i, ], =, -, p, ., coefficients, [, i, ], ;, }, }, else, {, System]
[), {, newCoefficients, [, i, ], =, -, p, ., coefficients, [, i, ], ;, }, }, else, {, System]
[=, -, p, ., coefficients, [, i, ], ;, }, }, else, {, System, ., arraycopy, (, coefficients, ,, lowLength]
[[, i, ], =, -, p, ., coefficients, [, i, ], ;, }, }, else, {, System, ., arraycopy, (]
[], =, -, p, ., coefficients, [, i, ], ;, }, }, else, {, System, ., arraycopy, (, coefficients, ,]
[;, }, }, else, {, System, ., arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength]
[;, }, }, else, {, System, ., arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength]
[[, i, ], ;, }, }, else, {, System, ., arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,]
[., coefficients, [, i, ], ;, }, }, else, {, System, ., arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,]
[], ;, }, }, else, {, System, ., arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -]
[;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, negate, (, ), {, double, [, ], newCoefficients]
[., arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, }, return, new, PolynomialFunction]
[,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;]
[,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public]
[,, lowLength, ,, highLength, -, lowLength, ), ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, negate]
[,, highLength, -, lowLength, ), ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, negate, (, )]
[), ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, negate, (, ), {, double, [, ]]
[-, lowLength, ), ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, negate, (, ), {, double]
[), ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, negate, (, ), {, double, [, ]]
[;, }, public, PolynomialFunction, negate, (, ), {, double, [, ], newCoefficients, =, new, double, [, coefficients, ., length, ]]
[), ;, }, public, PolynomialFunction, negate, (, ), {, double, [, ], newCoefficients, =, new, double, [, coefficients, ., length]
[;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, ++, i, ), {, newCoefficients, []
[], ;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, ++, i, ), {, newCoefficients]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, ++, i, )]
[;, i, <, coefficients, ., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, -, coefficients, [, i]
[;, ++, i, ), {, newCoefficients, [, i, ], =, -, coefficients, [, i, ], ;, }, return, new, PolynomialFunction]
[<, coefficients, ., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, -, coefficients, [, i, ], ;]
[;, ++, i, ), {, newCoefficients, [, i, ], =, -, coefficients, [, i, ], ;, }, return, new, PolynomialFunction]
[., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, -, coefficients, [, i, ], ;, }, return]
[), {, newCoefficients, [, i, ], =, -, coefficients, [, i, ], ;, }, return, new, PolynomialFunction, (, newCoefficients, )]
[), {, newCoefficients, [, i, ], =, -, coefficients, [, i, ], ;, }, return, new, PolynomialFunction, (, newCoefficients, )]
[=, -, coefficients, [, i, ], ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, multiply, (]
[[, i, ], =, -, coefficients, [, i, ], ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public]
[], =, -, coefficients, [, i, ], ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, multiply]
[;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double]
[;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double]
[[, i, ], ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, multiply, (, final, PolynomialFunction, p]
[], ;, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {]
[;, }, public, PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double, [, ], newCoefficients, =, new, double, [, coefficients]
[), ;, }, public, PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double, [, ], newCoefficients, =, new, double, []
[;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length, ;, ++, i, ), {, newCoefficients, []
[], ;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length, ;, ++, i, ), {, newCoefficients]
[-, 1, ], ;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length, ;, ++, i, )]
[+, p, ., coefficients, ., length, -, 1, ], ;, for, (, int, i, =, 0, ;, i, <, newCoefficients]
[., length, +, p, ., coefficients, ., length, -, 1, ], ;, for, (, int, i, =, 0, ;, i]
[-, 1, ], ;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length, ;, ++, i, )]
[., length, -, 1, ], ;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length, ;, ++]
[., coefficients, ., length, -, 1, ], ;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length]
[], ;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length, ;, ++, i, ), {, newCoefficients]
[;, i, <, newCoefficients, ., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, 0.0, ;, for, (]
[;, ++, i, ), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max]
[<, newCoefficients, ., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j]
[;, ++, i, ), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max]
[., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =, FastMath]
[), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,]
[), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,]
[=, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,, i, +, 1, -, p, .]
[[, i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,, i, +, 1]
[], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,, i, +, 1, -, p]
[;, for, (, int, j, =, FastMath, ., max, (, 0, ,, i, +, 1, -, p, ., coefficients, .]
[;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++, j, ), {]
[., max, (, 0, ,, i, +, 1, -, p, ., coefficients, ., length, ), ;, j, <, FastMath, .]
[,, i, +, 1, -, p, ., coefficients, ., length, ), ;, j, <, FastMath, ., min, (, coefficients, .]
[), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++, j, )]
[-, p, ., coefficients, ., length, ), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +]
[+, 1, -, p, ., coefficients, ., length, ), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,]
[-, p, ., coefficients, ., length, ), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +]
[), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++, j, )]
[., length, ), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++]
[., coefficients, ., length, ), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +, 1, )]
[;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *, p, ., coefficients, [, i]
[<, FastMath, ., min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, []
[;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *, p, ., coefficients, [, i]
[., min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, [, i, ]]
[,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *]
[., length, ,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j]
[), ;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *, p, ., coefficients, []
[+, 1, ), ;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *, p, .]
[), ;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *, p, ., coefficients, []
[), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *, p, ., coefficients, [, i, -, j, ]]
[), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *, p, ., coefficients, [, i, -, j, ]]
[+=, coefficients, [, j, ], *, p, ., coefficients, [, i, -, j, ], ;, }, }, return, new, PolynomialFunction]
[[, i, ], +=, coefficients, [, j, ], *, p, ., coefficients, [, i, -, j, ], ;, }, }]
[], +=, coefficients, [, j, ], *, p, ., coefficients, [, i, -, j, ], ;, }, }, return, new]
[;, }, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, protected, static, double, [, ], differentiate, (, double, []
[*, p, ., coefficients, [, i, -, j, ], ;, }, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }]
[[, j, ], *, p, ., coefficients, [, i, -, j, ], ;, }, }, return, new, PolynomialFunction, (, newCoefficients]
[], *, p, ., coefficients, [, i, -, j, ], ;, }, }, return, new, PolynomialFunction, (, newCoefficients, ), ;]
[;, }, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, protected, static, double, [, ], differentiate, (, double, []
[[, i, -, j, ], ;, }, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, protected, static, double, []
[., coefficients, [, i, -, j, ], ;, }, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, protected, static]
[], ;, }, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, protected, static, double, [, ], differentiate, (, double]
[-, j, ], ;, }, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, protected, static, double, [, ], differentiate]
[], ;, }, }, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, protected, static, double, [, ], differentiate, (, double]
[;, }, protected, static, double, [, ], differentiate, (, double, [, ], coefficients, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils]
[), ;, }, protected, static, double, [, ], differentiate, (, double, [, ], coefficients, ), throws, NullArgumentException, ,, NoDataException, {]
[;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats]
[., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {]
[), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (]
[., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, n, ==, 1, ), {, return]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, n, ==, 1, )]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, n, ==, 1, ), {, return]
[;, }, if, (, n, ==, 1, ), {, return, new, double, [, ], {, 0, }, ;, }, double]
[), ;, }, if, (, n, ==, 1, ), {, return, new, double, [, ], {, 0, }, ;, }]
[., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, n, ==, 1, ), {, return, new, double, [, ], {, 0, }]
[), {, return, new, double, [, ], {, 0, }, ;, }, double, [, ], result, =, new, double, []
[==, 1, ), {, return, new, double, [, ], {, 0, }, ;, }, double, [, ], result, =, new]
[), {, return, new, double, [, ], {, 0, }, ;, }, double, [, ], result, =, new, double, []
[;, }, double, [, ], result, =, new, double, [, n, -, 1, ], ;, for, (, int, i, =]
[;, }, double, [, ], result, =, new, double, [, n, -, 1, ], ;, for, (, int, i, =]
[}, ;, }, double, [, ], result, =, new, double, [, n, -, 1, ], ;, for, (, int, i]
[;, for, (, int, i, =, n, -, 1, ;, i, >, 0, ;, i, --, ), {, result, []
[], ;, for, (, int, i, =, n, -, 1, ;, i, >, 0, ;, i, --, ), {, result]
[-, 1, ], ;, for, (, int, i, =, n, -, 1, ;, i, >, 0, ;, i, --, )]
[], ;, for, (, int, i, =, n, -, 1, ;, i, >, 0, ;, i, --, ), {, result]
[;, i, >, 0, ;, i, --, ), {, result, [, i, -, 1, ], =, i, *, coefficients, []
[-, 1, ;, i, >, 0, ;, i, --, ), {, result, [, i, -, 1, ], =, i, *]
[;, i, >, 0, ;, i, --, ), {, result, [, i, -, 1, ], =, i, *, coefficients, []
[;, i, --, ), {, result, [, i, -, 1, ], =, i, *, coefficients, [, i, ], ;, }]
[>, 0, ;, i, --, ), {, result, [, i, -, 1, ], =, i, *, coefficients, [, i, ]]
[;, i, --, ), {, result, [, i, -, 1, ], =, i, *, coefficients, [, i, ], ;, }]
[), {, result, [, i, -, 1, ], =, i, *, coefficients, [, i, ], ;, }, return, result, ;]
[--, ), {, result, [, i, -, 1, ], =, i, *, coefficients, [, i, ], ;, }, return, result]
[=, i, *, coefficients, [, i, ], ;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (, ), {, return]
[[, i, -, 1, ], =, i, *, coefficients, [, i, ], ;, }, return, result, ;, }, public, PolynomialFunction]
[], =, i, *, coefficients, [, i, ], ;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (, ), {]
[-, 1, ], =, i, *, coefficients, [, i, ], ;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (]
[], =, i, *, coefficients, [, i, ], ;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (, ), {]
[;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (, ), {, return, new, PolynomialFunction, (, differentiate, (, coefficients, )]
[*, coefficients, [, i, ], ;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (, ), {, return, new, PolynomialFunction]
[;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (, ), {, return, new, PolynomialFunction, (, differentiate, (, coefficients, )]
[[, i, ], ;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (, ), {, return, new, PolynomialFunction, (, differentiate]
[], ;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (, ), {, return, new, PolynomialFunction, (, differentiate, (, coefficients]
[;, }, public, PolynomialFunction, polynomialDerivative, (, ), {, return, new, PolynomialFunction, (, differentiate, (, coefficients, ), ), ;, }, public]
[;, }, public, UnivariateFunction, derivative, (, ), {, return, polynomialDerivative, (, ), ;, }, @, Override, public, String, toString, (]
[), ;, }, public, UnivariateFunction, derivative, (, ), {, return, polynomialDerivative, (, ), ;, }, @, Override, public, String, toString]
[), ), ;, }, public, UnivariateFunction, derivative, (, ), {, return, polynomialDerivative, (, ), ;, }, @, Override, public, String]
[;, }, @, Override, public, String, toString, (, ), {, StringBuilder, s, =, new, StringBuilder, (, ), ;, if, (]
[;, if, (, coefficients, [, 0, ], ==, 0.0, ), {, if, (, coefficients, ., length, ==, 1, ), {]
[), {, if, (, coefficients, ., length, ==, 1, ), {, return, "0", ;, }, }, else, {, s, .]
[==, 0.0, ), {, if, (, coefficients, ., length, ==, 1, ), {, return, "0", ;, }, }, else, {]
[[, 0, ], ==, 0.0, ), {, if, (, coefficients, ., length, ==, 1, ), {, return, "0", ;, }]
[], ==, 0.0, ), {, if, (, coefficients, ., length, ==, 1, ), {, return, "0", ;, }, }, else]
[), {, if, (, coefficients, ., length, ==, 1, ), {, return, "0", ;, }, }, else, {, s, .]
[), {, return, "0", ;, }, }, else, {, s, ., append, (, toString, (, coefficients, [, 0, ], )]
[==, 1, ), {, return, "0", ;, }, }, else, {, s, ., append, (, toString, (, coefficients, [, 0]
[., length, ==, 1, ), {, return, "0", ;, }, }, else, {, s, ., append, (, toString, (, coefficients]
[), {, return, "0", ;, }, }, else, {, s, ., append, (, toString, (, coefficients, [, 0, ], )]
[;, }, }, else, {, s, ., append, (, toString, (, coefficients, [, 0, ], ), ), ;, }, for]
[;, }, for, (, int, i, =, 1, ;, i, <, coefficients, ., length, ;, ++, i, ), {, if]
[., append, (, toString, (, coefficients, [, 0, ], ), ), ;, }, for, (, int, i, =, 1, ;]
[), ;, }, for, (, int, i, =, 1, ;, i, <, coefficients, ., length, ;, ++, i, ), {]
[), ), ;, }, for, (, int, i, =, 1, ;, i, <, coefficients, ., length, ;, ++, i, )]
[[, 0, ], ), ), ;, }, for, (, int, i, =, 1, ;, i, <, coefficients, ., length, ;]
[], ), ), ;, }, for, (, int, i, =, 1, ;, i, <, coefficients, ., length, ;, ++, i]
[;, i, <, coefficients, ., length, ;, ++, i, ), {, if, (, coefficients, [, i, ], !=, 0, )]
[;, ++, i, ), {, if, (, coefficients, [, i, ], !=, 0, ), {, if, (, s, ., length]
[<, coefficients, ., length, ;, ++, i, ), {, if, (, coefficients, [, i, ], !=, 0, ), {, if]
[;, ++, i, ), {, if, (, coefficients, [, i, ], !=, 0, ), {, if, (, s, ., length]
[., length, ;, ++, i, ), {, if, (, coefficients, [, i, ], !=, 0, ), {, if, (, s]
[), {, if, (, coefficients, [, i, ], !=, 0, ), {, if, (, s, ., length, (, ), >]
[), {, if, (, coefficients, [, i, ], !=, 0, ), {, if, (, s, ., length, (, ), >]
[), {, if, (, s, ., length, (, ), >, 0, ), {, if, (, coefficients, [, i, ], <]
[!=, 0, ), {, if, (, s, ., length, (, ), >, 0, ), {, if, (, coefficients, [, i]
[[, i, ], !=, 0, ), {, if, (, s, ., length, (, ), >, 0, ), {, if, (]
[], !=, 0, ), {, if, (, s, ., length, (, ), >, 0, ), {, if, (, coefficients, []
[), {, if, (, s, ., length, (, ), >, 0, ), {, if, (, coefficients, [, i, ], <]
[), {, if, (, coefficients, [, i, ], <, 0, ), {, s, ., append, (, " - ", ), ;, }]
[>, 0, ), {, if, (, coefficients, [, i, ], <, 0, ), {, s, ., append, (, " - ", )]
[., length, (, ), >, 0, ), {, if, (, coefficients, [, i, ], <, 0, ), {, s, .]
[), {, if, (, coefficients, [, i, ], <, 0, ), {, s, ., append, (, " - ", ), ;, }]
[), {, s, ., append, (, " - ", ), ;, }, else, {, s, ., append, (, " + ", ), ;, }]
[<, 0, ), {, s, ., append, (, " - ", ), ;, }, else, {, s, ., append, (, " + ", )]
[[, i, ], <, 0, ), {, s, ., append, (, " - ", ), ;, }, else, {, s, ., append]
[], <, 0, ), {, s, ., append, (, " - ", ), ;, }, else, {, s, ., append, (, " + "]
[), {, s, ., append, (, " - ", ), ;, }, else, {, s, ., append, (, " + ", ), ;, }]
[;, }, else, {, s, ., append, (, " + ", ), ;, }, }, else, {, if, (, coefficients, [, i]
[., append, (, " - ", ), ;, }, else, {, s, ., append, (, " + ", ), ;, }, }, else, {]
[), ;, }, else, {, s, ., append, (, " + ", ), ;, }, }, else, {, if, (, coefficients, []
[;, }, }, else, {, if, (, coefficients, [, i, ], <, 0, ), {, s, ., append, (, "-"]
[., append, (, " + ", ), ;, }, }, else, {, if, (, coefficients, [, i, ], <, 0, ), {]
[), ;, }, }, else, {, if, (, coefficients, [, i, ], <, 0, ), {, s, ., append, (]
[), {, s, ., append, (, "-", ), ;, }, }, double, absAi, =, FastMath, ., abs, (, coefficients, []
[<, 0, ), {, s, ., append, (, "-", ), ;, }, }, double, absAi, =, FastMath, ., abs, (]
[[, i, ], <, 0, ), {, s, ., append, (, "-", ), ;, }, }, double, absAi, =, FastMath]
[], <, 0, ), {, s, ., append, (, "-", ), ;, }, }, double, absAi, =, FastMath, ., abs]
[), {, s, ., append, (, "-", ), ;, }, }, double, absAi, =, FastMath, ., abs, (, coefficients, []
[;, }, }, double, absAi, =, FastMath, ., abs, (, coefficients, [, i, ], ), ;, if, (, (, absAi]
[., append, (, "-", ), ;, }, }, double, absAi, =, FastMath, ., abs, (, coefficients, [, i, ], )]
[), ;, }, }, double, absAi, =, FastMath, ., abs, (, coefficients, [, i, ], ), ;, if, (, (]
[;, if, (, (, absAi, -, 1, ), !=, 0, ), {, s, ., append, (, toString, (, absAi, )]
[., abs, (, coefficients, [, i, ], ), ;, if, (, (, absAi, -, 1, ), !=, 0, ), {]
[), ;, if, (, (, absAi, -, 1, ), !=, 0, ), {, s, ., append, (, toString, (, absAi]
[[, i, ], ), ;, if, (, (, absAi, -, 1, ), !=, 0, ), {, s, ., append, (]
[], ), ;, if, (, (, absAi, -, 1, ), !=, 0, ), {, s, ., append, (, toString, (]
[), {, s, ., append, (, toString, (, absAi, ), ), ;, s, ., append, (, ' ', ), ;, }]
[!=, 0, ), {, s, ., append, (, toString, (, absAi, ), ), ;, s, ., append, (, ' ', )]
[), !=, 0, ), {, s, ., append, (, toString, (, absAi, ), ), ;, s, ., append, (, ' ']
[-, 1, ), !=, 0, ), {, s, ., append, (, toString, (, absAi, ), ), ;, s, ., append]
[), !=, 0, ), {, s, ., append, (, toString, (, absAi, ), ), ;, s, ., append, (, ' ']
[), {, s, ., append, (, toString, (, absAi, ), ), ;, s, ., append, (, ' ', ), ;, }]
[;, s, ., append, (, ' ', ), ;, }, s, ., append, (, "x", ), ;, if, (, i, >]
[., append, (, toString, (, absAi, ), ), ;, s, ., append, (, ' ', ), ;, }, s, ., append]
[), ;, s, ., append, (, ' ', ), ;, }, s, ., append, (, "x", ), ;, if, (, i]
[), ), ;, s, ., append, (, ' ', ), ;, }, s, ., append, (, "x", ), ;, if, (]
[;, }, s, ., append, (, "x", ), ;, if, (, i, >, 1, ), {, s, ., append, (]
[., append, (, ' ', ), ;, }, s, ., append, (, "x", ), ;, if, (, i, >, 1, )]
[), ;, }, s, ., append, (, "x", ), ;, if, (, i, >, 1, ), {, s, ., append]
[;, if, (, i, >, 1, ), {, s, ., append, (, '^', ), ;, s, ., append, (, Integer]
[., append, (, "x", ), ;, if, (, i, >, 1, ), {, s, ., append, (, '^', ), ;]
[), ;, if, (, i, >, 1, ), {, s, ., append, (, '^', ), ;, s, ., append, (]
[), {, s, ., append, (, '^', ), ;, s, ., append, (, Integer, ., toString, (, i, ), )]
[>, 1, ), {, s, ., append, (, '^', ), ;, s, ., append, (, Integer, ., toString, (, i]
[), {, s, ., append, (, '^', ), ;, s, ., append, (, Integer, ., toString, (, i, ), )]
[;, s, ., append, (, Integer, ., toString, (, i, ), ), ;, }, }, }, return, s, ., toString]
[., append, (, '^', ), ;, s, ., append, (, Integer, ., toString, (, i, ), ), ;, }, }]
[), ;, s, ., append, (, Integer, ., toString, (, i, ), ), ;, }, }, }, return, s, .]
[;, }, }, }, return, s, ., toString, (, ), ;, }, private, static, String, toString, (, double, coeff, )]
[., append, (, Integer, ., toString, (, i, ), ), ;, }, }, }, return, s, ., toString, (, )]
[), ;, }, }, }, return, s, ., toString, (, ), ;, }, private, static, String, toString, (, double, coeff]
[., toString, (, i, ), ), ;, }, }, }, return, s, ., toString, (, ), ;, }, private, static]
[), ), ;, }, }, }, return, s, ., toString, (, ), ;, }, private, static, String, toString, (, double]
[;, }, private, static, String, toString, (, double, coeff, ), {, final, String, c, =, Double, ., toString, (, coeff]
[., toString, (, ), ;, }, private, static, String, toString, (, double, coeff, ), {, final, String, c, =, Double]
[;, if, (, c, ., endsWith, (, ".0", ), ), {, return, c, ., substring, (, 0, ,, c, .]
[., toString, (, coeff, ), ;, if, (, c, ., endsWith, (, ".0", ), ), {, return, c, ., substring]
[), ;, if, (, c, ., endsWith, (, ".0", ), ), {, return, c, ., substring, (, 0, ,, c]
[), {, return, c, ., substring, (, 0, ,, c, ., length, (, ), -, 2, ), ;, }, else]
[., endsWith, (, ".0", ), ), {, return, c, ., substring, (, 0, ,, c, ., length, (, ), -]
[), ), {, return, c, ., substring, (, 0, ,, c, ., length, (, ), -, 2, ), ;, }]
[;, }, else, {, return, c, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, prime]
[., substring, (, 0, ,, c, ., length, (, ), -, 2, ), ;, }, else, {, return, c, ;]
[,, c, ., length, (, ), -, 2, ), ;, }, else, {, return, c, ;, }, }, @, Override]
[), ;, }, else, {, return, c, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int]
[-, 2, ), ;, }, else, {, return, c, ;, }, }, @, Override, public, int, hashCode, (, ), {]
[., length, (, ), -, 2, ), ;, }, else, {, return, c, ;, }, }, @, Override, public, int]
[), ;, }, else, {, return, c, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int]
[;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =]
[;, int, result, =, 1, ;, result, =, prime, *, result, +, Arrays, ., hashCode, (, coefficients, ), ;, return]
[;, result, =, prime, *, result, +, Arrays, ., hashCode, (, coefficients, ), ;, return, result, ;, }, @, Override]
[=, prime, *, result, +, Arrays, ., hashCode, (, coefficients, ), ;, return, result, ;, }, @, Override, public, boolean]
[;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj]
[+, Arrays, ., hashCode, (, coefficients, ), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj]
[*, result, +, Arrays, ., hashCode, (, coefficients, ), ;, return, result, ;, }, @, Override, public, boolean, equals, (]
[+, Arrays, ., hashCode, (, coefficients, ), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj]
[;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj]
[., hashCode, (, coefficients, ), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {]
[), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, PolynomialFunction, ), ), {, return, false, ;, }]
[==, obj, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, PolynomialFunction, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, PolynomialFunction, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, PolynomialFunction, ), ), {, return, false, ;, }, PolynomialFunction, other, =, (]
[), {, return, false, ;, }, PolynomialFunction, other, =, (, PolynomialFunction, ), obj, ;, if, (, !, Arrays, ., equals]
[), {, return, false, ;, }, PolynomialFunction, other, =, (, PolynomialFunction, ), obj, ;, if, (, !, Arrays, ., equals]
[), ), {, return, false, ;, }, PolynomialFunction, other, =, (, PolynomialFunction, ), obj, ;, if, (, !, Arrays, .]
[instanceof, PolynomialFunction, ), ), {, return, false, ;, }, PolynomialFunction, other, =, (, PolynomialFunction, ), obj, ;, if, (, !]
[;, }, PolynomialFunction, other, =, (, PolynomialFunction, ), obj, ;, if, (, !, Arrays, ., equals, (, coefficients, ,, other]
[;, if, (, !, Arrays, ., equals, (, coefficients, ,, other, ., coefficients, ), ), {, return, false, ;, }]
[;, if, (, !, Arrays, ., equals, (, coefficients, ,, other, ., coefficients, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, return, true, ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, []
[), {, return, false, ;, }, return, true, ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, []
[., equals, (, coefficients, ,, other, ., coefficients, ), ), {, return, false, ;, }, return, true, ;, }, public]
[,, other, ., coefficients, ), ), {, return, false, ;, }, return, true, ;, }, public, static, class, Parametric, implements]
[), ), {, return, false, ;, }, return, true, ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double]
[., coefficients, ), ), {, return, false, ;, }, return, true, ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {]
[;, }, return, true, ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, [, ], gradient, (, double]
[;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, [, ], gradient, (, double, x, ,, double, ...]
[;, double, xn, =, 1.0, ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++]
[], ;, double, xn, =, 1.0, ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;]
[., length, ], ;, double, xn, =, 1.0, ;, for, (, int, i, =, 0, ;, i, <, parameters, .]
[;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {, gradient, []
[;, i, <, parameters, ., length, ;, ++, i, ), {, gradient, [, i, ], =, xn, ;, xn, *=]
[;, ++, i, ), {, gradient, [, i, ], =, xn, ;, xn, *=, x, ;, }, return, gradient, ;]
[<, parameters, ., length, ;, ++, i, ), {, gradient, [, i, ], =, xn, ;, xn, *=, x, ;]
[;, ++, i, ), {, gradient, [, i, ], =, xn, ;, xn, *=, x, ;, }, return, gradient, ;]
[., length, ;, ++, i, ), {, gradient, [, i, ], =, xn, ;, xn, *=, x, ;, }, return]
[), {, gradient, [, i, ], =, xn, ;, xn, *=, x, ;, }, return, gradient, ;, }, public, double]
[), {, gradient, [, i, ], =, xn, ;, xn, *=, x, ;, }, return, gradient, ;, }, public, double]
[=, xn, ;, xn, *=, x, ;, }, return, gradient, ;, }, public, double, value, (, final, double, x, ,]
[[, i, ], =, xn, ;, xn, *=, x, ;, }, return, gradient, ;, }, public, double, value, (, final]
[], =, xn, ;, xn, *=, x, ;, }, return, gradient, ;, }, public, double, value, (, final, double, x]
[;, xn, *=, x, ;, }, return, gradient, ;, }, public, double, value, (, final, double, x, ,, final, double]
[*=, x, ;, }, return, gradient, ;, }, public, double, value, (, final, double, x, ,, final, double, ..., parameters]
[;, }, return, gradient, ;, }, public, double, value, (, final, double, x, ,, final, double, ..., parameters, ), throws]
[;, }, public, double, value, (, final, double, x, ,, final, double, ..., parameters, ), throws, NoDataException, {, return, PolynomialFunction]
[;, }, }, }]
[., evaluate, (, parameters, ,, x, ), ;, }, }, }]
[,, x, ), ;, }, }, }]
[), ;, }, }, }]
