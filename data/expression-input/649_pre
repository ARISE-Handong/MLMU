[math3, ., util, ., MathUtils, ;, public, class, Array2DRowRealMatrix, extends, AbstractRealMatrix, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[., util, ., MathUtils, ;, public, class, Array2DRowRealMatrix, extends, AbstractRealMatrix, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[(, ), {, }, public, Array2DRowRealMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, super, (]
[{, }, public, Array2DRowRealMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, super, (, rowDimension, ,]
[Array2DRowRealMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, super, (, rowDimension, ,, columnDimension, ), ;]
[final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, super, (, rowDimension, ,, columnDimension, ), ;, data, =]
[,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, super, (, rowDimension, ,, columnDimension, ), ;, data, =, new, double, []
[columnDimension, ), throws, NotStrictlyPositiveException, {, super, (, rowDimension, ,, columnDimension, ), ;, data, =, new, double, [, rowDimension, ], []
[;, }, public, Array2DRowRealMatrix, (, final, double, [, ], [, ], d, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {]
[public, Array2DRowRealMatrix, (, final, double, [, ], [, ], d, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, copyIn, (]
[double, [, ], [, ], d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (]
[[, ], d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, copyArray, ), {]
[d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, copyArray, ), {, copyIn, (]
[,, NoDataException, ,, NullArgumentException, {, if, (, copyArray, ), {, copyIn, (, d, ), ;, }, else, {, if, (]
[,, NoDataException, ,, NullArgumentException, {, if, (, copyArray, ), {, copyIn, (, d, ), ;, }, else, {, if, (]
[,, NullArgumentException, {, if, (, copyArray, ), {, copyIn, (, d, ), ;, }, else, {, if, (, d, ==]
[(, copyArray, ), {, copyIn, (, d, ), ;, }, else, {, if, (, d, ==, null, ), {, throw]
[else, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =]
[else, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, d, ., length, ;, if, (]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, d, ., length, ;, if, (]
[{, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==]
[(, ), ;, }, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==, 0, ), {, throw]
[}, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[}, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, []
[(, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (]
[(, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (]
[., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==]
[}, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw]
[nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =]
[0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;]
[0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;]
[{, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <]
[new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;]
[new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (]
[}, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (, d, []
[=, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (, d, [, r, ], ., length, !=]
[<, nRows, ;, r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw]
[r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, d, []
[[, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, d, [, r, ], ., length, ,]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, d, [, r, ], ., length, ,, nCols, ), ;, }, }]
[), {, throw, new, DimensionMismatchException, (, d, [, r, ], ., length, ,, nCols, ), ;, }, }, data, =]
[data, =, d, ;, }, }, public, Array2DRowRealMatrix, (, final, double, [, ], v, ), {, final, int, nRows, =]
[data, =, d, ;, }, }, public, Array2DRowRealMatrix, (, final, double, [, ], v, ), {, final, int, nRows, =]
[}, }, public, Array2DRowRealMatrix, (, final, double, [, ], v, ), {, final, int, nRows, =, v, ., length, ;]
[public, Array2DRowRealMatrix, (, final, double, [, ], v, ), {, final, int, nRows, =, v, ., length, ;, data, =]
[final, double, [, ], v, ), {, final, int, nRows, =, v, ., length, ;, data, =, new, double, []
[], v, ), {, final, int, nRows, =, v, ., length, ;, data, =, new, double, [, nRows, ], []
[v, ., length, ;, data, =, new, double, [, nRows, ], [, 1, ], ;, for, (, int, row, =]
[length, ;, data, =, new, double, [, nRows, ], [, 1, ], ;, for, (, int, row, =, 0, ;]
[length, ;, data, =, new, double, [, nRows, ], [, 1, ], ;, for, (, int, row, =, 0, ;]
[data, =, new, double, [, nRows, ], [, 1, ], ;, for, (, int, row, =, 0, ;, row, <]
[new, double, [, nRows, ], [, 1, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[new, double, [, nRows, ], [, 1, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[], [, 1, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {]
[], [, 1, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {]
[], [, 1, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {]
[1, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, []
[for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row, ], []
[row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row, ], [, 0, ], =]
[row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row, ], [, 0, ], =]
[0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row, ], [, 0, ], =, v, []
[}, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, return]
[Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, return, new, Array2DRowRealMatrix, (]
[RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, return, new, Array2DRowRealMatrix, (, rowDimension, ,]
[{, return, new, Array2DRowRealMatrix, (, rowDimension, ,, columnDimension, ), ;, }, @, Override, public, RealMatrix, copy, (, ), {, return]
[Array2DRowRealMatrix, (, rowDimension, ,, columnDimension, ), ;, }, @, Override, public, RealMatrix, copy, (, ), {, return, new, Array2DRowRealMatrix, (]
[columnDimension, ), ;, }, @, Override, public, RealMatrix, copy, (, ), {, return, new, Array2DRowRealMatrix, (, copyOut, (, ), ,]
[(, copyOut, (, ), ,, false, ), ;, }, public, Array2DRowRealMatrix, add, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[(, copyOut, (, ), ,, false, ), ;, }, public, Array2DRowRealMatrix, add, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[,, false, ), ;, }, public, Array2DRowRealMatrix, add, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (]
[), ;, }, public, Array2DRowRealMatrix, add, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,]
[final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =]
[., checkAdditionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =, new, double, []
[columnCount, =, getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =, new, double, [, rowCount, ], []
[[, ], [, ], outData, =, new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =]
[[, ], outData, =, new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =, 0, ;]
[[, ], outData, =, new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =, 0, ;]
[outData, =, new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =, 0, ;, row, <]
[new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[(, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, double, [, ], dataRow, =]
[(, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, double, [, ], dataRow, =]
[row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, []
[++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =]
[++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =]
[++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =]
[double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =, m, ., data, []
[;, final, double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, [, ], outDataRow, =]
[;, final, double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, [, ], outDataRow, =]
[double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, [, ], outDataRow, =, outData, []
[[, row, ], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =]
[], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <]
[[, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[[, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {]
[outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {]
[row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, []
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, []
[0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], +]
[0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], +]
[col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], +, mRow, []
[), {, outDataRow, [, col, ], =, dataRow, [, col, ], +, mRow, [, col, ], ;, }, }, return]
[[, col, ], =, dataRow, [, col, ], +, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (]
[], =, dataRow, [, col, ], +, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,]
[new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, subtract, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, subtract, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[,, false, ), ;, }, public, Array2DRowRealMatrix, subtract, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (]
[), ;, }, public, Array2DRowRealMatrix, subtract, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (, this, ,]
[final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =]
[., checkSubtractionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =, new, double, []
[columnCount, =, getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =, new, double, [, rowCount, ], []
[[, ], [, ], outData, =, new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =]
[[, ], outData, =, new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =, 0, ;]
[[, ], outData, =, new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =, 0, ;]
[outData, =, new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =, 0, ;, row, <]
[new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[new, double, [, rowCount, ], [, columnCount, ], ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[(, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, double, [, ], dataRow, =]
[(, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, double, [, ], dataRow, =]
[row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, []
[++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =]
[++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =]
[++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =]
[double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =, m, ., data, []
[;, final, double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, [, ], outDataRow, =]
[;, final, double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, [, ], outDataRow, =]
[double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, [, ], outDataRow, =, outData, []
[[, row, ], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =]
[], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <]
[[, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[[, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {]
[outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {]
[row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, []
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, []
[0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], -]
[0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], -]
[col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], -, mRow, []
[), {, outDataRow, [, col, ], =, dataRow, [, col, ], -, mRow, [, col, ], ;, }, }, return]
[[, col, ], =, dataRow, [, col, ], -, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (]
[], =, dataRow, [, col, ], -, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,]
[new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, multiply, (, final, Array2DRowRealMatrix, m, ), throws, DimensionMismatchException, {]
[new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, multiply, (, final, Array2DRowRealMatrix, m, ), throws, DimensionMismatchException, {]
[,, false, ), ;, }, public, Array2DRowRealMatrix, multiply, (, final, Array2DRowRealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (]
[), ;, }, public, Array2DRowRealMatrix, multiply, (, final, Array2DRowRealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,]
[final, Array2DRowRealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =]
[final, Array2DRowRealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =]
[(, this, ,, m, ), ;, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =]
[(, this, ,, m, ), ;, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =]
[this, ., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =]
[this, ., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =]
[), ;, final, int, nSum, =, this, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =]
[int, nSum, =, this, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =, new, double, []
[this, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =, new, double, [, nRows, ], []
[], [, ], outData, =, new, double, [, nRows, ], [, nCols, ], ;, final, double, [, ], mCol, =]
[outData, =, new, double, [, nRows, ], [, nCols, ], ;, final, double, [, ], mCol, =, new, double, []
[final, double, [, ], mCol, =, new, double, [, nSum, ], ;, final, double, [, ], [, ], mData, =]
[final, double, [, ], mCol, =, new, double, [, nSum, ], ;, final, double, [, ], [, ], mData, =]
[nSum, ], ;, final, double, [, ], [, ], mData, =, m, ., data, ;, for, (, int, col, =]
[;, final, double, [, ], [, ], mData, =, m, ., data, ;, for, (, int, col, =, 0, ;]
[;, final, double, [, ], [, ], mData, =, m, ., data, ;, for, (, int, col, =, 0, ;]
[double, [, ], [, ], mData, =, m, ., data, ;, for, (, int, col, =, 0, ;, col, <]
[], [, ], mData, =, m, ., data, ;, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[], [, ], mData, =, m, ., data, ;, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[for, (, int, col, =, 0, ;, col, <, nCols, ;, col, ++, ), {, for, (, int, mRow, =]
[int, col, =, 0, ;, col, <, nCols, ;, col, ++, ), {, for, (, int, mRow, =, 0, ;]
[int, col, =, 0, ;, col, <, nCols, ;, col, ++, ), {, for, (, int, mRow, =, 0, ;]
[=, 0, ;, col, <, nCols, ;, col, ++, ), {, for, (, int, mRow, =, 0, ;, mRow, <]
[;, col, <, nCols, ;, col, ++, ), {, for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;]
[;, col, <, nCols, ;, col, ++, ), {, for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;]
[;, col, ++, ), {, for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++, ), {]
[;, col, ++, ), {, for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++, ), {]
[++, ), {, for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++, ), {, mCol, []
[for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++, ), {, mCol, [, mRow, ], =]
[for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++, ), {, mCol, [, mRow, ], =]
[for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++, ), {, mCol, [, mRow, ], =]
[int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++, ), {, mCol, [, mRow, ], =, mData, []
[0, ;, mRow, <, nSum, ;, mRow, ++, ), {, mCol, [, mRow, ], =, mData, [, mRow, ], []
[{, mCol, [, mRow, ], =, mData, [, mRow, ], [, col, ], ;, }, for, (, int, row, =]
[[, mRow, ], =, mData, [, mRow, ], [, col, ], ;, }, for, (, int, row, =, 0, ;]
[[, mRow, ], =, mData, [, mRow, ], [, col, ], ;, }, for, (, int, row, =, 0, ;]
[], =, mData, [, mRow, ], [, col, ], ;, }, for, (, int, row, =, 0, ;, row, <]
[mData, [, mRow, ], [, col, ], ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[mData, [, mRow, ], [, col, ], ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[(, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =]
[(, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =]
[row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, []
[nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =]
[double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[], dataRow, =, data, [, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[], dataRow, =, data, [, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[=, data, [, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[[, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;]
[[, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;]
[double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, +=, dataRow, []
[int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *]
[int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *]
[=, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, mCol, []
[<, nSum, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, mCol, [, i, ], ;, }]
[<, nSum, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, mCol, [, i, ], ;, }]
[<, nSum, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, mCol, [, i, ], ;, }]
[;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, mCol, [, i, ], ;, }, outData, []
[), {, sum, +=, dataRow, [, i, ], *, mCol, [, i, ], ;, }, outData, [, row, ], []
[+=, dataRow, [, i, ], *, mCol, [, i, ], ;, }, outData, [, row, ], [, col, ], =]
[*, mCol, [, i, ], ;, }, outData, [, row, ], [, col, ], =, sum, ;, }, }, return]
[i, ], ;, }, outData, [, row, ], [, col, ], =, sum, ;, }, }, return, new, Array2DRowRealMatrix, (]
[;, }, outData, [, row, ], [, col, ], =, sum, ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,]
[(, outData, ,, false, ), ;, }, @, Override, public, double, [, ], [, ], getData, (, ), {, return]
[(, ), {, return, copyOut, (, ), ;, }, public, double, [, ], [, ], getDataRef, (, ), {, return]
[,, final, int, row, ,, final, int, column, ), throws, NoDataException, ,, OutOfRangeException, ,, DimensionMismatchException, ,, NullArgumentException, {, if, (]
[,, final, int, row, ,, final, int, column, ), throws, NoDataException, ,, OutOfRangeException, ,, DimensionMismatchException, ,, NullArgumentException, {, if, (]
[int, row, ,, final, int, column, ), throws, NoDataException, ,, OutOfRangeException, ,, DimensionMismatchException, ,, NullArgumentException, {, if, (, data, ==]
[column, ), throws, NoDataException, ,, OutOfRangeException, ,, DimensionMismatchException, ,, NullArgumentException, {, if, (, data, ==, null, ), {, if, (]
[column, ), throws, NoDataException, ,, OutOfRangeException, ,, DimensionMismatchException, ,, NullArgumentException, {, if, (, data, ==, null, ), {, if, (]
[throws, NoDataException, ,, OutOfRangeException, ,, DimensionMismatchException, ,, NullArgumentException, {, if, (, data, ==, null, ), {, if, (, row, >]
[,, DimensionMismatchException, ,, NullArgumentException, {, if, (, data, ==, null, ), {, if, (, row, >, 0, ), {, throw]
[NullArgumentException, {, if, (, data, ==, null, ), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (]
[NullArgumentException, {, if, (, data, ==, null, ), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (]
[data, ==, null, ), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,]
[(, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (]
[(, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (]
[>, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >]
[throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, ), {, throw]
[(, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (]
[(, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (]
[,, row, ), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,]
[}, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }]
[}, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }]
[>, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, MathUtils, ., checkNotNull, (]
[(, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =]
[(, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =]
[), ;, }, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (]
[), ;, }, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (]
[}, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==]
[(, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw]
[;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, []
[(, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (]
[(, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (]
[., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==]
[}, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw]
[nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }]
[;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =]
[nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, new, double, []
[nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, new, double, []
[throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, new, double, [, subMatrix, ., length, ], []
[;, }, data, =, new, double, [, subMatrix, ., length, ], [, nCols, ], ;, for, (, int, i, =]
[data, =, new, double, [, subMatrix, ., length, ], [, nCols, ], ;, for, (, int, i, =, 0, ;]
[data, =, new, double, [, subMatrix, ., length, ], [, nCols, ], ;, for, (, int, i, =, 0, ;]
[new, double, [, subMatrix, ., length, ], [, nCols, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, subMatrix, ., length, ], [, nCols, ], ;, for, (, int, i, =, 0, ;, i, <]
[., length, ], [, nCols, ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[length, ], [, nCols, ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (, subMatrix, []
[;, i, <, data, ., length, ;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=]
[., length, ;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw]
[++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, subMatrix, []
[[, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,]
[length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,, nCols, ), ;, }]
[length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,, nCols, ), ;, }]
[{, throw, new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,, nCols, ), ;, }, System, ., arraycopy, (]
[{, throw, new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,, nCols, ), ;, }, System, ., arraycopy, (]
[new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,, nCols, ), ;, }, System, ., arraycopy, (, subMatrix, []
[subMatrix, [, i, ], ., length, ,, nCols, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,]
[i, ], ., length, ,, nCols, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,]
[i, ], ., length, ,, nCols, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,]
[., length, ,, nCols, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, []
[., length, ,, nCols, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, []
[,, nCols, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +]
[;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +, row, ], ,]
[System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +, row, ], ,, column, ,]
[], ,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {]
[], ,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {]
[data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (]
[i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,]
[row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,]
[;, }, }, @, Override, public, double, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {]
[;, }, }, @, Override, public, double, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {]
[Override, public, double, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (]
[double, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,]
[(, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,]
[,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return]
[,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return]
[,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return]
[int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return, data, []
[throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return, data, [, row, ], []
[Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, double, value, ), throws, OutOfRangeException, {]
[Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, double, value, ), throws, OutOfRangeException, {]
[(, final, int, row, ,, final, int, column, ,, final, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (]
[int, row, ,, final, int, column, ,, final, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,]
[,, final, int, column, ,, final, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,]
[column, ,, final, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;]
[column, ,, final, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;]
[column, ,, final, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;]
[final, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, []
[), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, [, row, ], []
[{, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, [, row, ], [, column, ], =]
[Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, double, increment, ), throws, OutOfRangeException, {]
[Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, double, increment, ), throws, OutOfRangeException, {]
[(, final, int, row, ,, final, int, column, ,, final, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (]
[int, row, ,, final, int, column, ,, final, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,]
[,, final, int, column, ,, final, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,]
[column, ,, final, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;]
[column, ,, final, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;]
[column, ,, final, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;]
[final, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, []
[), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, [, row, ], []
[{, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, [, row, ], [, column, ], +=]
[Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, double, factor, ), throws, OutOfRangeException, {]
[Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, double, factor, ), throws, OutOfRangeException, {]
[(, final, int, row, ,, final, int, column, ,, final, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (]
[int, row, ,, final, int, column, ,, final, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,]
[,, final, int, column, ,, final, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,]
[column, ,, final, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;]
[column, ,, final, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;]
[column, ,, final, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;]
[final, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, []
[), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, [, row, ], []
[{, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, [, row, ], [, column, ], *=]
[data, [, row, ], [, column, ], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return]
[data, [, row, ], [, column, ], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return]
[[, row, ], [, column, ], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (]
[[, row, ], [, column, ], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (]
[], [, column, ], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==]
[], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null, ), ?]
[factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null, ), ?, 0, :]
[factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null, ), ?, 0, :]
[==, null, ), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[==, null, ), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[null, ), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (]
[null, ), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (]
[), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (]
[), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (]
[0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==]
[., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||]
[length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (]
[length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (]
[length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (]
[}, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (, data, []
[public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (, data, [, 0, ], ==]
[), {, return, (, (, data, ==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?]
[return, (, (, data, ==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :]
[return, (, (, data, ==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :]
[return, (, (, data, ==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :]
[(, data, ==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :, data, []
[Override, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =]
[Override, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =]
[], v, ), throws, DimensionMismatchException, {, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =]
[], v, ), throws, DimensionMismatchException, {, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =]
[nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (]
[nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (]
[nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (]
[getRowDimension, (, ), ;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (, v, ., length, !=]
[final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw]
[=, this, ., getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[=, this, ., getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[(, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double, [, ], out, =]
[new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double, [, ], out, =, new, double, []
[), ;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =]
[}, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;]
[}, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;]
[double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;, row, <]
[], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[(, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =]
[(, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =]
[row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, []
[nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =]
[double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[], dataRow, =, data, [, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[], dataRow, =, data, [, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[=, data, [, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[[, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[[, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, +=, dataRow, []
[int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *]
[int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *]
[=, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, v, []
[<, nCols, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, v, [, i, ], ;, }]
[<, nCols, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, v, [, i, ], ;, }]
[;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, v, [, i, ], ;, }, out, []
[), {, sum, +=, dataRow, [, i, ], *, v, [, i, ], ;, }, out, [, row, ], =]
[dataRow, [, i, ], *, v, [, i, ], ;, }, out, [, row, ], =, sum, ;, }, return]
[Override, public, double, [, ], preMultiply, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =]
[double, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (]
[(, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double, [, ], out, =]
[new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double, [, ], out, =, new, double, []
[), ;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =]
[}, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;]
[}, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;]
[double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;, col, <]
[], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++]
[], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =]
[0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =]
[col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, data, []
[int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, data, [, i, ], []
[0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, data, [, i, ], [, col, ], *]
[0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, data, [, i, ], [, col, ], *]
[i, <, nRows, ;, ++, i, ), {, sum, +=, data, [, i, ], [, col, ], *, v, []
[++, i, ), {, sum, +=, data, [, i, ], [, col, ], *, v, [, i, ], ;, }]
[++, i, ), {, sum, +=, data, [, i, ], [, col, ], *, v, [, i, ], ;, }]
[), {, sum, +=, data, [, i, ], [, col, ], *, v, [, i, ], ;, }, out, []
[+=, data, [, i, ], [, col, ], *, v, [, i, ], ;, }, out, [, col, ], =]
[], [, col, ], *, v, [, i, ], ;, }, out, [, col, ], =, sum, ;, }, return]
[}, return, out, ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =]
[double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, []
[++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[[, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;]
[], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {]
[data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {]
[i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, []
[for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ], =]
[=, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (]
[;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[<, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[<, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =]
[double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, []
[++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[[, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;]
[], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {]
[data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (]
[(, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,]
[j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,]
[j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,]
[0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,]
[,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,]
[int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[(, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, []
[++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=]
[[, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;]
[], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, []
[for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =]
[for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =]
[=, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (]
[;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[<=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[<=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,]
[,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,]
[int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[(, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, []
[++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=]
[[, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;]
[], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (]
[(, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,]
[j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,]
[j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,]
[startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =]
[double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =]
[int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;]
[int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;]
[=, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <]
[;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;]
[j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, []
[;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;]
[;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;]
[<, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, []
[++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =]
[++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =]
[final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (]
[[, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =]
[double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =]
[int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;]
[int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;]
[=, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <]
[;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;]
[j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[{, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, []
[<, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], []
[visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return]
[visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,]
[,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,]
[int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[(, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =]
[int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;]
[int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;]
[=, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=]
[;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, []
[;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;]
[;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;]
[<=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, []
[++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =]
[++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =]
[final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (]
[[, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,]
[,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,]
[int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[{, MatrixUtils, ., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[(, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =]
[int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;]
[int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;]
[=, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=]
[;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[{, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, []
[<=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], []
[visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return]
[visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return]
[., end, (, ), ;, }, private, double, [, ], [, ], copyOut, (, ), {, final, int, nRows, =]
[., end, (, ), ;, }, private, double, [, ], [, ], copyOut, (, ), {, final, int, nRows, =]
[), {, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, double, [, ], [, ], out, =]
[int, nRows, =, this, ., getRowDimension, (, ), ;, final, double, [, ], [, ], out, =, new, double, []
[this, ., getRowDimension, (, ), ;, final, double, [, ], [, ], out, =, new, double, [, nRows, ], []
[this, ., getRowDimension, (, ), ;, final, double, [, ], [, ], out, =, new, double, [, nRows, ], []
[out, =, new, double, [, nRows, ], [, this, ., getColumnDimension, (, ), ], ;, for, (, int, i, =]
[new, double, [, nRows, ], [, this, ., getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;]
[new, double, [, nRows, ], [, this, ., getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;]
[[, nRows, ], [, this, ., getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[], [, this, ., getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[], [, this, ., getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {]
[getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (]
[(, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, []
[=, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,]
[;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,]
[;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,]
[<, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, []
[i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,]
[), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,]
[), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,]
[), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,]
[System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,, data, []
[,, 0, ,, out, [, i, ], ,, 0, ,, data, [, i, ], ., length, ), ;, }, return]
[}, private, void, copyIn, (, final, double, [, ], [, ], in, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {]
[void, copyIn, (, final, double, [, ], [, ], in, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, setSubMatrix, (]
[(, final, double, [, ], [, ], in, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, setSubMatrix, (, in, ,]
[double, [, ], [, ], in, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, setSubMatrix, (, in, ,, 0, ,]
