[typeRegistry, ;, private, ChainableReverseAbstractInterpreter, firstLink, ;, private, ChainableReverseAbstractInterpreter, nextLink, ;, public, ChainableReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {]
[typeRegistry, ;, private, ChainableReverseAbstractInterpreter, firstLink, ;, private, ChainableReverseAbstractInterpreter, nextLink, ;, public, ChainableReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {]
[firstLink, ;, private, ChainableReverseAbstractInterpreter, nextLink, ;, public, ChainableReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, Preconditions, ., checkNotNull, (]
[ChainableReverseAbstractInterpreter, nextLink, ;, public, ChainableReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, Preconditions, ., checkNotNull, (, convention, ), ;]
[ChainableReverseAbstractInterpreter, nextLink, ;, public, ChainableReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, Preconditions, ., checkNotNull, (, convention, ), ;]
[ChainableReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, Preconditions, ., checkNotNull, (, convention, ), ;, this, ., convention, =]
[CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, Preconditions, ., checkNotNull, (, convention, ), ;, this, ., convention, =, convention, ;]
[CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, Preconditions, ., checkNotNull, (, convention, ), ;, this, ., convention, =, convention, ;]
[typeRegistry, ), {, Preconditions, ., checkNotNull, (, convention, ), ;, this, ., convention, =, convention, ;, this, ., typeRegistry, =]
[{, Preconditions, ., checkNotNull, (, convention, ), ;, this, ., convention, =, convention, ;, this, ., typeRegistry, =, typeRegistry, ;]
[., checkNotNull, (, convention, ), ;, this, ., convention, =, convention, ;, this, ., typeRegistry, =, typeRegistry, ;, firstLink, =]
[(, convention, ), ;, this, ., convention, =, convention, ;, this, ., typeRegistry, =, typeRegistry, ;, firstLink, =, this, ;]
[), ;, this, ., convention, =, convention, ;, this, ., typeRegistry, =, typeRegistry, ;, firstLink, =, this, ;, nextLink, =]
[=, typeRegistry, ;, firstLink, =, this, ;, nextLink, =, null, ;, }, public, ChainableReverseAbstractInterpreter, append, (, ChainableReverseAbstractInterpreter, lastLink, ), {]
[=, typeRegistry, ;, firstLink, =, this, ;, nextLink, =, null, ;, }, public, ChainableReverseAbstractInterpreter, append, (, ChainableReverseAbstractInterpreter, lastLink, ), {]
[=, this, ;, nextLink, =, null, ;, }, public, ChainableReverseAbstractInterpreter, append, (, ChainableReverseAbstractInterpreter, lastLink, ), {, Preconditions, ., checkArgument, (]
[=, this, ;, nextLink, =, null, ;, }, public, ChainableReverseAbstractInterpreter, append, (, ChainableReverseAbstractInterpreter, lastLink, ), {, Preconditions, ., checkArgument, (]
[=, this, ;, nextLink, =, null, ;, }, public, ChainableReverseAbstractInterpreter, append, (, ChainableReverseAbstractInterpreter, lastLink, ), {, Preconditions, ., checkArgument, (]
[=, null, ;, }, public, ChainableReverseAbstractInterpreter, append, (, ChainableReverseAbstractInterpreter, lastLink, ), {, Preconditions, ., checkArgument, (, lastLink, ., nextLink, ==]
[}, public, ChainableReverseAbstractInterpreter, append, (, ChainableReverseAbstractInterpreter, lastLink, ), {, Preconditions, ., checkArgument, (, lastLink, ., nextLink, ==, null, ), ;]
[}, public, ChainableReverseAbstractInterpreter, append, (, ChainableReverseAbstractInterpreter, lastLink, ), {, Preconditions, ., checkArgument, (, lastLink, ., nextLink, ==, null, ), ;]
[(, ChainableReverseAbstractInterpreter, lastLink, ), {, Preconditions, ., checkArgument, (, lastLink, ., nextLink, ==, null, ), ;, this, ., nextLink, =]
[lastLink, ), {, Preconditions, ., checkArgument, (, lastLink, ., nextLink, ==, null, ), ;, this, ., nextLink, =, lastLink, ;]
[lastLink, ), {, Preconditions, ., checkArgument, (, lastLink, ., nextLink, ==, null, ), ;, this, ., nextLink, =, lastLink, ;]
[., checkArgument, (, lastLink, ., nextLink, ==, null, ), ;, this, ., nextLink, =, lastLink, ;, lastLink, ., firstLink, =]
[., checkArgument, (, lastLink, ., nextLink, ==, null, ), ;, this, ., nextLink, =, lastLink, ;, lastLink, ., firstLink, =]
[nextLink, ==, null, ), ;, this, ., nextLink, =, lastLink, ;, lastLink, ., firstLink, =, this, ., firstLink, ;, return]
[;, lastLink, ., firstLink, =, this, ., firstLink, ;, return, lastLink, ;, }, public, ChainableReverseAbstractInterpreter, getFirst, (, ), {, return]
[{, return, firstLink, ;, }, protected, FlowScope, firstPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return]
[{, return, firstLink, ;, }, protected, FlowScope, firstPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return]
[}, protected, FlowScope, firstPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return, firstLink, ., getPreciserScopeKnowingConditionOutcome, (]
[FlowScope, firstPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return, firstLink, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,]
[(, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return, firstLink, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, blindScope, ,]
[,, outcome, ), ;, }, protected, FlowScope, nextPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return]
[,, outcome, ), ;, }, protected, FlowScope, nextPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return]
[,, outcome, ), ;, }, protected, FlowScope, nextPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return]
[), ;, }, protected, FlowScope, nextPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return, nextLink, !=]
[}, protected, FlowScope, nextPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return, nextLink, !=, null, ?]
[}, protected, FlowScope, nextPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return, nextLink, !=, null, ?]
[(, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return, nextLink, !=, null, ?, nextLink, ., getPreciserScopeKnowingConditionOutcome, (]
[condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, return, nextLink, !=, null, ?, nextLink, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,]
[FlowScope, blindScope, ,, boolean, outcome, ), {, return, nextLink, !=, null, ?, nextLink, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, blindScope, ,]
[boolean, outcome, ), {, return, nextLink, !=, null, ?, nextLink, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, blindScope, ,, outcome, ), :]
[,, outcome, ), :, blindScope, ;, }, protected, JSType, getTypeIfRefinable, (, Node, node, ,, FlowScope, scope, ), {, switch, (]
[,, outcome, ), :, blindScope, ;, }, protected, JSType, getTypeIfRefinable, (, Node, node, ,, FlowScope, scope, ), {, switch, (]
[JSType, getTypeIfRefinable, (, Node, node, ,, FlowScope, scope, ), {, switch, (, node, ., getType, (, ), ), {, case]
[JSType, getTypeIfRefinable, (, Node, node, ,, FlowScope, scope, ), {, switch, (, node, ., getType, (, ), ), {, case]
[switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, StaticSlot, <, JSType, >, nameVar, =]
[switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, StaticSlot, <, JSType, >, nameVar, =]
[getType, (, ), ), {, case, Token, ., NAME, :, StaticSlot, <, JSType, >, nameVar, =, scope, ., getSlot, (]
[getType, (, ), ), {, case, Token, ., NAME, :, StaticSlot, <, JSType, >, nameVar, =, scope, ., getSlot, (]
[:, StaticSlot, <, JSType, >, nameVar, =, scope, ., getSlot, (, node, ., getString, (, ), ), ;, if, (]
[:, StaticSlot, <, JSType, >, nameVar, =, scope, ., getSlot, (, node, ., getString, (, ), ), ;, if, (]
[<, JSType, >, nameVar, =, scope, ., getSlot, (, node, ., getString, (, ), ), ;, if, (, nameVar, !=]
[., getSlot, (, node, ., getString, (, ), ), ;, if, (, nameVar, !=, null, ), {, JSType, nameVarType, =]
[., getSlot, (, node, ., getString, (, ), ), ;, if, (, nameVar, !=, null, ), {, JSType, nameVarType, =]
[), ;, if, (, nameVar, !=, null, ), {, JSType, nameVarType, =, nameVar, ., getType, (, ), ;, if, (]
[), ;, if, (, nameVar, !=, null, ), {, JSType, nameVarType, =, nameVar, ., getType, (, ), ;, if, (]
[if, (, nameVar, !=, null, ), {, JSType, nameVarType, =, nameVar, ., getType, (, ), ;, if, (, nameVarType, ==]
[!=, null, ), {, JSType, nameVarType, =, nameVar, ., getType, (, ), ;, if, (, nameVarType, ==, null, ), {]
[), {, JSType, nameVarType, =, nameVar, ., getType, (, ), ;, if, (, nameVarType, ==, null, ), {, nameVarType, =]
[), {, JSType, nameVarType, =, nameVar, ., getType, (, ), ;, if, (, nameVarType, ==, null, ), {, nameVarType, =]
[(, ), ;, if, (, nameVarType, ==, null, ), {, nameVarType, =, node, ., getJSType, (, ), ;, }, return]
[(, nameVarType, ==, null, ), {, nameVarType, =, node, ., getJSType, (, ), ;, }, return, nameVarType, ;, }, return]
[null, ), {, nameVarType, =, node, ., getJSType, (, ), ;, }, return, nameVarType, ;, }, return, null, ;, case]
[null, ), {, nameVarType, =, node, ., getJSType, (, ), ;, }, return, nameVarType, ;, }, return, null, ;, case]
[getJSType, (, ), ;, }, return, nameVarType, ;, }, return, null, ;, case, Token, ., GETPROP, :, String, qualifiedName, =]
[getJSType, (, ), ;, }, return, nameVarType, ;, }, return, null, ;, case, Token, ., GETPROP, :, String, qualifiedName, =]
[}, return, null, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, node, ., getQualifiedName, (, ), ;, if, (]
[}, return, null, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, node, ., getQualifiedName, (, ), ;, if, (]
[null, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, node, ., getQualifiedName, (, ), ;, if, (, qualifiedName, ==]
[., GETPROP, :, String, qualifiedName, =, node, ., getQualifiedName, (, ), ;, if, (, qualifiedName, ==, null, ), {, return]
[(, ), ;, if, (, qualifiedName, ==, null, ), {, return, null, ;, }, StaticSlot, <, JSType, >, propVar, =]
[(, ), ;, if, (, qualifiedName, ==, null, ), {, return, null, ;, }, StaticSlot, <, JSType, >, propVar, =]
[(, qualifiedName, ==, null, ), {, return, null, ;, }, StaticSlot, <, JSType, >, propVar, =, scope, ., getSlot, (]
[return, null, ;, }, StaticSlot, <, JSType, >, propVar, =, scope, ., getSlot, (, qualifiedName, ), ;, JSType, propVarType, =]
[StaticSlot, <, JSType, >, propVar, =, scope, ., getSlot, (, qualifiedName, ), ;, JSType, propVarType, =, null, ;, if, (]
[StaticSlot, <, JSType, >, propVar, =, scope, ., getSlot, (, qualifiedName, ), ;, JSType, propVarType, =, null, ;, if, (]
[JSType, >, propVar, =, scope, ., getSlot, (, qualifiedName, ), ;, JSType, propVarType, =, null, ;, if, (, propVar, !=]
[=, scope, ., getSlot, (, qualifiedName, ), ;, JSType, propVarType, =, null, ;, if, (, propVar, !=, null, ), {]
[., getSlot, (, qualifiedName, ), ;, JSType, propVarType, =, null, ;, if, (, propVar, !=, null, ), {, propVarType, =]
[., getSlot, (, qualifiedName, ), ;, JSType, propVarType, =, null, ;, if, (, propVar, !=, null, ), {, propVarType, =]
[null, ;, if, (, propVar, !=, null, ), {, propVarType, =, propVar, ., getType, (, ), ;, }, if, (]
[null, ;, if, (, propVar, !=, null, ), {, propVarType, =, propVar, ., getType, (, ), ;, }, if, (]
[if, (, propVar, !=, null, ), {, propVarType, =, propVar, ., getType, (, ), ;, }, if, (, propVarType, ==]
[!=, null, ), {, propVarType, =, propVar, ., getType, (, ), ;, }, if, (, propVarType, ==, null, ), {]
[), {, propVarType, =, propVar, ., getType, (, ), ;, }, if, (, propVarType, ==, null, ), {, propVarType, =]
[), {, propVarType, =, propVar, ., getType, (, ), ;, }, if, (, propVarType, ==, null, ), {, propVarType, =]
[;, }, if, (, propVarType, ==, null, ), {, propVarType, =, node, ., getJSType, (, ), ;, }, if, (]
[;, }, if, (, propVarType, ==, null, ), {, propVarType, =, node, ., getJSType, (, ), ;, }, if, (]
[if, (, propVarType, ==, null, ), {, propVarType, =, node, ., getJSType, (, ), ;, }, if, (, propVarType, ==]
[==, null, ), {, propVarType, =, node, ., getJSType, (, ), ;, }, if, (, propVarType, ==, null, ), {]
[), {, propVarType, =, node, ., getJSType, (, ), ;, }, if, (, propVarType, ==, null, ), {, propVarType, =]
[propVarType, =, node, ., getJSType, (, ), ;, }, if, (, propVarType, ==, null, ), {, propVarType, =, getNativeType, (]
[(, ), ;, }, if, (, propVarType, ==, null, ), {, propVarType, =, getNativeType, (, UNKNOWN_TYPE, ), ;, }, return]
[if, (, propVarType, ==, null, ), {, propVarType, =, getNativeType, (, UNKNOWN_TYPE, ), ;, }, return, propVarType, ;, }, return]
[return, null, ;, }, protected, void, declareNameInScope, (, FlowScope, scope, ,, Node, node, ,, JSType, type, ), {, switch, (]
[return, null, ;, }, protected, void, declareNameInScope, (, FlowScope, scope, ,, Node, node, ,, JSType, type, ), {, switch, (]
[FlowScope, scope, ,, Node, node, ,, JSType, type, ), {, switch, (, node, ., getType, (, ), ), {, case]
[FlowScope, scope, ,, Node, node, ,, JSType, type, ), {, switch, (, node, ., getType, (, ), ), {, case]
[node, ,, JSType, type, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :]
[node, ,, JSType, type, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :]
[), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, scope, ., inferSlotType, (]
[), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, scope, ., inferSlotType, (]
[getType, (, ), ), {, case, Token, ., NAME, :, scope, ., inferSlotType, (, node, ., getString, (, ), ,]
[Token, ., NAME, :, scope, ., inferSlotType, (, node, ., getString, (, ), ,, type, ), ;, break, ;, case]
[Token, ., NAME, :, scope, ., inferSlotType, (, node, ., getString, (, ), ,, type, ), ;, break, ;, case]
[(, node, ., getString, (, ), ,, type, ), ;, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =]
[(, node, ., getString, (, ), ,, type, ), ;, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =]
[,, type, ), ;, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, node, ., getQualifiedName, (, ), ;]
[,, type, ), ;, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, node, ., getQualifiedName, (, ), ;]
[break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, node, ., getQualifiedName, (, ), ;, Preconditions, ., checkNotNull, (]
[:, String, qualifiedName, =, node, ., getQualifiedName, (, ), ;, Preconditions, ., checkNotNull, (, qualifiedName, ), ;, JSType, origType, =]
[:, String, qualifiedName, =, node, ., getQualifiedName, (, ), ;, Preconditions, ., checkNotNull, (, qualifiedName, ), ;, JSType, origType, =]
[getQualifiedName, (, ), ;, Preconditions, ., checkNotNull, (, qualifiedName, ), ;, JSType, origType, =, node, ., getJSType, (, ), ;]
[), ;, Preconditions, ., checkNotNull, (, qualifiedName, ), ;, JSType, origType, =, node, ., getJSType, (, ), ;, origType, =]
[), ;, Preconditions, ., checkNotNull, (, qualifiedName, ), ;, JSType, origType, =, node, ., getJSType, (, ), ;, origType, =]
[), ;, Preconditions, ., checkNotNull, (, qualifiedName, ), ;, JSType, origType, =, node, ., getJSType, (, ), ;, origType, =]
[Preconditions, ., checkNotNull, (, qualifiedName, ), ;, JSType, origType, =, node, ., getJSType, (, ), ;, origType, =, origType, ==]
[checkNotNull, (, qualifiedName, ), ;, JSType, origType, =, node, ., getJSType, (, ), ;, origType, =, origType, ==, null, ?]
[qualifiedName, ), ;, JSType, origType, =, node, ., getJSType, (, ), ;, origType, =, origType, ==, null, ?, getNativeType, (]
[JSType, origType, =, node, ., getJSType, (, ), ;, origType, =, origType, ==, null, ?, getNativeType, (, UNKNOWN_TYPE, ), :]
[=, node, ., getJSType, (, ), ;, origType, =, origType, ==, null, ?, getNativeType, (, UNKNOWN_TYPE, ), :, origType, ;]
[=, node, ., getJSType, (, ), ;, origType, =, origType, ==, null, ?, getNativeType, (, UNKNOWN_TYPE, ), :, origType, ;]
[(, ), ;, origType, =, origType, ==, null, ?, getNativeType, (, UNKNOWN_TYPE, ), :, origType, ;, scope, ., inferQualifiedSlot, (]
[;, origType, =, origType, ==, null, ?, getNativeType, (, UNKNOWN_TYPE, ), :, origType, ;, scope, ., inferQualifiedSlot, (, node, ,]
[=, origType, ==, null, ?, getNativeType, (, UNKNOWN_TYPE, ), :, origType, ;, scope, ., inferQualifiedSlot, (, node, ,, qualifiedName, ,]
[==, null, ?, getNativeType, (, UNKNOWN_TYPE, ), :, origType, ;, scope, ., inferQualifiedSlot, (, node, ,, qualifiedName, ,, origType, ,]
[), :, origType, ;, scope, ., inferQualifiedSlot, (, node, ,, qualifiedName, ,, origType, ,, type, ), ;, break, ;, case]
[), :, origType, ;, scope, ., inferQualifiedSlot, (, node, ,, qualifiedName, ,, origType, ,, type, ), ;, break, ;, case]
[,, qualifiedName, ,, origType, ,, type, ), ;, break, ;, case, Token, ., THIS, :, break, ;, default, :, throw]
[origType, ,, type, ), ;, break, ;, case, Token, ., THIS, :, break, ;, default, :, throw, new, IllegalArgumentException, (]
[origType, ,, type, ), ;, break, ;, case, Token, ., THIS, :, break, ;, default, :, throw, new, IllegalArgumentException, (]
[type, ), ;, break, ;, case, Token, ., THIS, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "Node cannot be refined. \n", +]
[type, ), ;, break, ;, case, Token, ., THIS, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "Node cannot be refined. \n", +]
[(, "Node cannot be refined. \n", +, node, ., toStringTree, (, ), ), ;, }, }, private, final, Visitor, <, JSType, >, restrictUndefinedVisitor, =]
[Visitor, <, JSType, >, (, ), {, @, Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =]
[Visitor, <, JSType, >, (, ), {, @, Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =]
[Visitor, <, JSType, >, (, ), {, @, Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =]
[Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (]
[EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (]
[EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (]
[EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (]
[), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=]
[JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=, null, &&]
[JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=, null, &&]
[JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=, null, &&]
[., visit, (, this, ), ;, if, (, type, !=, null, &&, enumElementType, ., getPrimitiveType, (, ), ., isEquivalentTo, (]
[;, if, (, type, !=, null, &&, enumElementType, ., getPrimitiveType, (, ), ., isEquivalentTo, (, type, ), ), {, return]
[&&, enumElementType, ., getPrimitiveType, (, ), ., isEquivalentTo, (, type, ), ), {, return, enumElementType, ;, }, else, {, return]
[return, enumElementType, ;, }, else, {, return, type, ;, }, }, @, Override, public, JSType, caseAllType, (, ), {, return]
[return, enumElementType, ;, }, else, {, return, type, ;, }, }, @, Override, public, JSType, caseAllType, (, ), {, return]
[else, {, return, type, ;, }, }, @, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (]
[return, type, ;, }, }, @, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (, OBJECT_TYPE, ,]
[;, }, }, @, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (, OBJECT_TYPE, ,, NUMBER_TYPE, ,]
[}, @, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (, OBJECT_TYPE, ,, NUMBER_TYPE, ,, STRING_TYPE, ,]
[Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (, OBJECT_TYPE, ,, NUMBER_TYPE, ,, STRING_TYPE, ,, BOOLEAN_TYPE, ,]
[,, NUMBER_TYPE, ,, STRING_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ), ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return]
[,, STRING_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ), ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return, getNativeType, (]
[caseNoObjectType, (, ), {, return, getNativeType, (, NO_OBJECT_TYPE, ), ;, }, @, Override, public, JSType, caseNoType, (, ), {, return]
[), {, return, getNativeType, (, NO_OBJECT_TYPE, ), ;, }, @, Override, public, JSType, caseNoType, (, ), {, return, getNativeType, (]
[caseNoType, (, ), {, return, getNativeType, (, NO_TYPE, ), ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return]
[), {, return, getNativeType, (, NO_TYPE, ), ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return, getNativeType, (]
[), {, return, getNativeType, (, BOOLEAN_TYPE, ), ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return]
[JSType, caseFunctionType, (, FunctionType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseNullType, (, ), {, return]
[(, FunctionType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseNullType, (, ), {, return, getNativeType, (]
[caseNullType, (, ), {, return, getNativeType, (, NULL_TYPE, ), ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return]
[), {, return, getNativeType, (, NULL_TYPE, ), ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return, getNativeType, (]
[), {, return, getNativeType, (, NUMBER_TYPE, ), ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return]
[JSType, caseObjectType, (, ObjectType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return]
[(, ObjectType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return, getNativeType, (]
[), {, return, getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return]
[), {, return, getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return]
[(, STRING_TYPE, ), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return, type, ., getRestrictedUnion, (]
[), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return, type, ., getRestrictedUnion, (, getNativeType, (]
[type, ., getRestrictedUnion, (, getNativeType, (, VOID_TYPE, ), ), ;, }, @, Override, public, JSType, caseUnknownType, (, ), {, return]
[getRestrictedUnion, (, getNativeType, (, VOID_TYPE, ), ), ;, }, @, Override, public, JSType, caseUnknownType, (, ), {, return, getNativeType, (]
[caseUnknownType, (, ), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public, JSType, caseVoidType, (, ), {, return]
[JSType, caseVoidType, (, ), {, return, null, ;, }, @, Override, public, JSType, caseParameterizedType, (, ParameterizedType, type, ), {, return]
[(, ), {, return, null, ;, }, @, Override, public, JSType, caseParameterizedType, (, ParameterizedType, type, ), {, return, caseObjectType, (]
[), {, return, caseObjectType, (, type, ), ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, templateType, ), {, return]
[return, caseObjectType, (, type, ), ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, templateType, ), {, return, caseObjectType, (]
[templateType, ), {, return, caseObjectType, (, templateType, ), ;, }, }, ;, private, final, Visitor, <, JSType, >, restrictNullVisitor, =]
[Visitor, <, JSType, >, (, ), {, @, Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =]
[Visitor, <, JSType, >, (, ), {, @, Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =]
[Visitor, <, JSType, >, (, ), {, @, Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =]
[Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (]
[EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (]
[EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (]
[EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (]
[), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=]
[JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=, null, &&]
[JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=, null, &&]
[JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=, null, &&]
[., visit, (, this, ), ;, if, (, type, !=, null, &&, enumElementType, ., getPrimitiveType, (, ), ., isEquivalentTo, (]
[;, if, (, type, !=, null, &&, enumElementType, ., getPrimitiveType, (, ), ., isEquivalentTo, (, type, ), ), {, return]
[&&, enumElementType, ., getPrimitiveType, (, ), ., isEquivalentTo, (, type, ), ), {, return, enumElementType, ;, }, else, {, return]
[return, enumElementType, ;, }, else, {, return, type, ;, }, }, @, Override, public, JSType, caseAllType, (, ), {, return]
[return, enumElementType, ;, }, else, {, return, type, ;, }, }, @, Override, public, JSType, caseAllType, (, ), {, return]
[else, {, return, type, ;, }, }, @, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (]
[return, type, ;, }, }, @, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (, OBJECT_TYPE, ,]
[;, }, }, @, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (, OBJECT_TYPE, ,, NUMBER_TYPE, ,]
[}, @, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (, OBJECT_TYPE, ,, NUMBER_TYPE, ,, STRING_TYPE, ,]
[Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (, OBJECT_TYPE, ,, NUMBER_TYPE, ,, STRING_TYPE, ,, BOOLEAN_TYPE, ,]
[,, NUMBER_TYPE, ,, STRING_TYPE, ,, BOOLEAN_TYPE, ,, VOID_TYPE, ), ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return]
[,, STRING_TYPE, ,, BOOLEAN_TYPE, ,, VOID_TYPE, ), ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return, getNativeType, (]
[caseNoObjectType, (, ), {, return, getNativeType, (, NO_OBJECT_TYPE, ), ;, }, @, Override, public, JSType, caseNoType, (, ), {, return]
[), {, return, getNativeType, (, NO_OBJECT_TYPE, ), ;, }, @, Override, public, JSType, caseNoType, (, ), {, return, getNativeType, (]
[caseNoType, (, ), {, return, getNativeType, (, NO_TYPE, ), ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return]
[), {, return, getNativeType, (, NO_TYPE, ), ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return, getNativeType, (]
[), {, return, getNativeType, (, BOOLEAN_TYPE, ), ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return]
[JSType, caseFunctionType, (, FunctionType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseNullType, (, ), {, return]
[Override, public, JSType, caseNullType, (, ), {, return, null, ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return]
[JSType, caseNullType, (, ), {, return, null, ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return, getNativeType, (]
[), {, return, getNativeType, (, NUMBER_TYPE, ), ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return]
[JSType, caseObjectType, (, ObjectType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return]
[(, ObjectType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return, getNativeType, (]
[), {, return, getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return]
[), {, return, getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return]
[(, STRING_TYPE, ), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return, type, ., getRestrictedUnion, (]
[), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return, type, ., getRestrictedUnion, (, getNativeType, (]
[type, ., getRestrictedUnion, (, getNativeType, (, NULL_TYPE, ), ), ;, }, @, Override, public, JSType, caseUnknownType, (, ), {, return]
[getRestrictedUnion, (, getNativeType, (, NULL_TYPE, ), ), ;, }, @, Override, public, JSType, caseUnknownType, (, ), {, return, getNativeType, (]
[caseUnknownType, (, ), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public, JSType, caseVoidType, (, ), {, return]
[), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public, JSType, caseVoidType, (, ), {, return, getNativeType, (]
[), {, return, getNativeType, (, VOID_TYPE, ), ;, }, @, Override, public, JSType, caseParameterizedType, (, ParameterizedType, type, ), {, return]
[return, getNativeType, (, VOID_TYPE, ), ;, }, @, Override, public, JSType, caseParameterizedType, (, ParameterizedType, type, ), {, return, caseObjectType, (]
[), {, return, caseObjectType, (, type, ), ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, templateType, ), {, return]
[return, caseObjectType, (, type, ), ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, templateType, ), {, return, caseObjectType, (]
[>, {, protected, abstract, JSType, caseTopType, (, JSType, topType, ), ;, @, Override, public, JSType, caseAllType, (, ), {, return]
[protected, abstract, JSType, caseTopType, (, JSType, topType, ), ;, @, Override, public, JSType, caseAllType, (, ), {, return, caseTopType, (]
[JSType, caseTopType, (, JSType, topType, ), ;, @, Override, public, JSType, caseAllType, (, ), {, return, caseTopType, (, getNativeType, (]
[{, return, caseTopType, (, getNativeType, (, ALL_TYPE, ), ), ;, }, @, Override, public, JSType, caseUnknownType, (, ), {, return]
[caseTopType, (, getNativeType, (, ALL_TYPE, ), ), ;, }, @, Override, public, JSType, caseUnknownType, (, ), {, return, caseTopType, (]
[getNativeType, (, ALL_TYPE, ), ), ;, }, @, Override, public, JSType, caseUnknownType, (, ), {, return, caseTopType, (, getNativeType, (]
[getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, JSType, restricted, =]
[@, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, JSType, restricted, =, null, ;, for, (, JSType, alternate, :]
[@, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, JSType, restricted, =, null, ;, for, (, JSType, alternate, :]
[JSType, restricted, =, null, ;, for, (, JSType, alternate, :, type, ., getAlternates, (, ), ), {, JSType, restrictedAlternate, =]
[JSType, restricted, =, null, ;, for, (, JSType, alternate, :, type, ., getAlternates, (, ), ), {, JSType, restrictedAlternate, =]
[;, for, (, JSType, alternate, :, type, ., getAlternates, (, ), ), {, JSType, restrictedAlternate, =, alternate, ., visit, (]
[:, type, ., getAlternates, (, ), ), {, JSType, restrictedAlternate, =, alternate, ., visit, (, this, ), ;, if, (]
[:, type, ., getAlternates, (, ), ), {, JSType, restrictedAlternate, =, alternate, ., visit, (, this, ), ;, if, (]
[., getAlternates, (, ), ), {, JSType, restrictedAlternate, =, alternate, ., visit, (, this, ), ;, if, (, restrictedAlternate, !=]
[{, JSType, restrictedAlternate, =, alternate, ., visit, (, this, ), ;, if, (, restrictedAlternate, !=, null, ), {, if, (]
[{, JSType, restrictedAlternate, =, alternate, ., visit, (, this, ), ;, if, (, restrictedAlternate, !=, null, ), {, if, (]
[restrictedAlternate, =, alternate, ., visit, (, this, ), ;, if, (, restrictedAlternate, !=, null, ), {, if, (, restricted, ==]
[., visit, (, this, ), ;, if, (, restrictedAlternate, !=, null, ), {, if, (, restricted, ==, null, ), {]
[(, this, ), ;, if, (, restrictedAlternate, !=, null, ), {, if, (, restricted, ==, null, ), {, restricted, =]
[(, restrictedAlternate, !=, null, ), {, if, (, restricted, ==, null, ), {, restricted, =, restrictedAlternate, ;, }, else, {]
[!=, null, ), {, if, (, restricted, ==, null, ), {, restricted, =, restrictedAlternate, ;, }, else, {, restricted, =]
[!=, null, ), {, if, (, restricted, ==, null, ), {, restricted, =, restrictedAlternate, ;, }, else, {, restricted, =]
[if, (, restricted, ==, null, ), {, restricted, =, restrictedAlternate, ;, }, else, {, restricted, =, restrictedAlternate, ., getLeastSupertype, (]
[restricted, =, restrictedAlternate, ;, }, else, {, restricted, =, restrictedAlternate, ., getLeastSupertype, (, restricted, ), ;, }, }, }, return]
[(, restricted, ), ;, }, }, }, return, restricted, ;, }, @, Override, public, JSType, caseNoType, (, ), {, return]
[), ;, }, }, }, return, restricted, ;, }, @, Override, public, JSType, caseNoType, (, ), {, return, getNativeType, (]
[return, getNativeType, (, NO_TYPE, ), ;, }, @, Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =]
[return, getNativeType, (, NO_TYPE, ), ;, }, @, Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =]
[return, getNativeType, (, NO_TYPE, ), ;, }, @, Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =]
[Override, public, JSType, caseEnumElementType, (, EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (]
[EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (]
[EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (]
[EnumElementType, enumElementType, ), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (]
[), {, JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=]
[JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=, null, &&]
[JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=, null, &&]
[JSType, type, =, enumElementType, ., getPrimitiveType, (, ), ., visit, (, this, ), ;, if, (, type, !=, null, &&]
[., visit, (, this, ), ;, if, (, type, !=, null, &&, enumElementType, ., getPrimitiveType, (, ), ., isEquivalentTo, (]
[;, if, (, type, !=, null, &&, enumElementType, ., getPrimitiveType, (, ), ., isEquivalentTo, (, type, ), ), {, return]
[&&, enumElementType, ., getPrimitiveType, (, ), ., isEquivalentTo, (, type, ), ), {, return, enumElementType, ;, }, else, {, return]
[;, }, else, {, return, type, ;, }, }, @, Override, public, JSType, caseParameterizedType, (, ParameterizedType, type, ), {, return]
[else, {, return, type, ;, }, }, @, Override, public, JSType, caseParameterizedType, (, ParameterizedType, type, ), {, return, caseObjectType, (]
[), {, return, caseObjectType, (, type, ), ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, templateType, ), {, return]
[return, caseObjectType, (, type, ), ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, templateType, ), {, return, caseObjectType, (]
[templateType, ), ;, }, }, abstract, class, RestrictByTrueTypeOfResultVisitor, extends, RestrictByTypeOfResultVisitor, {, @, Override, public, JSType, caseNoObjectType, (, ), {, return]
[Override, public, JSType, caseNoObjectType, (, ), {, return, null, ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return]
[JSType, caseBooleanType, (, ), {, return, null, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return]
[JSType, caseFunctionType, (, FunctionType, type, ), {, return, null, ;, }, @, Override, public, JSType, caseNullType, (, ), {, return]
[Override, public, JSType, caseNullType, (, ), {, return, null, ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return]
[JSType, caseNumberType, (, ), {, return, null, ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return]
[JSType, caseObjectType, (, ObjectType, type, ), {, return, null, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return]
[Override, public, JSType, caseStringType, (, ), {, return, null, ;, }, @, Override, public, JSType, caseVoidType, (, ), {, return]
[;, }, }, abstract, class, RestrictByFalseTypeOfResultVisitor, extends, RestrictByTypeOfResultVisitor, {, @, Override, protected, JSType, caseTopType, (, JSType, topType, ), {, return]
[JSType, caseTopType, (, JSType, topType, ), {, return, topType, ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return]
[(, JSType, topType, ), {, return, topType, ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return, getNativeType, (]
[caseNoObjectType, (, ), {, return, getNativeType, (, NO_OBJECT_TYPE, ), ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return]
[), {, return, getNativeType, (, NO_OBJECT_TYPE, ), ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return, getNativeType, (]
[), {, return, getNativeType, (, BOOLEAN_TYPE, ), ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return]
[JSType, caseFunctionType, (, FunctionType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseNullType, (, ), {, return]
[(, FunctionType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseNullType, (, ), {, return, getNativeType, (]
[caseNullType, (, ), {, return, getNativeType, (, NULL_TYPE, ), ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return]
[), {, return, getNativeType, (, NULL_TYPE, ), ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return, getNativeType, (]
[), {, return, getNativeType, (, NUMBER_TYPE, ), ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return]
[JSType, caseObjectType, (, ObjectType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return]
[(, ObjectType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return, getNativeType, (]
[caseStringType, (, ), {, return, getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public, JSType, caseVoidType, (, ), {, return]
[), {, return, getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public, JSType, caseVoidType, (, ), {, return, getNativeType, (]
[{, private, final, String, value, ;, private, final, boolean, resultEqualsValue, ;, RestrictByOneTypeOfResultVisitor, (, String, value, ,, boolean, resultEqualsValue, ), {]
[{, private, final, String, value, ;, private, final, boolean, resultEqualsValue, ;, RestrictByOneTypeOfResultVisitor, (, String, value, ,, boolean, resultEqualsValue, ), {]
[value, ;, private, final, boolean, resultEqualsValue, ;, RestrictByOneTypeOfResultVisitor, (, String, value, ,, boolean, resultEqualsValue, ), {, this, ., value, =]
[private, final, boolean, resultEqualsValue, ;, RestrictByOneTypeOfResultVisitor, (, String, value, ,, boolean, resultEqualsValue, ), {, this, ., value, =, value, ;]
[private, final, boolean, resultEqualsValue, ;, RestrictByOneTypeOfResultVisitor, (, String, value, ,, boolean, resultEqualsValue, ), {, this, ., value, =, value, ;]
[;, RestrictByOneTypeOfResultVisitor, (, String, value, ,, boolean, resultEqualsValue, ), {, this, ., value, =, value, ;, this, ., resultEqualsValue, =]
[value, =, value, ;, this, ., resultEqualsValue, =, resultEqualsValue, ;, }, private, boolean, matchesExpectation, (, String, result, ), {, return]
[value, =, value, ;, this, ., resultEqualsValue, =, resultEqualsValue, ;, }, private, boolean, matchesExpectation, (, String, result, ), {, return]
[value, =, value, ;, this, ., resultEqualsValue, =, resultEqualsValue, ;, }, private, boolean, matchesExpectation, (, String, result, ), {, return]
[this, ., resultEqualsValue, =, resultEqualsValue, ;, }, private, boolean, matchesExpectation, (, String, result, ), {, return, result, ., equals, (]
[=, resultEqualsValue, ;, }, private, boolean, matchesExpectation, (, String, result, ), {, return, result, ., equals, (, value, ), ==]
[(, value, ), ==, resultEqualsValue, ;, }, @, Override, protected, JSType, caseTopType, (, JSType, topType, ), {, JSType, result, =]
[resultEqualsValue, ;, }, @, Override, protected, JSType, caseTopType, (, JSType, topType, ), {, JSType, result, =, topType, ;, if, (]
[JSType, caseTopType, (, JSType, topType, ), {, JSType, result, =, topType, ;, if, (, resultEqualsValue, ), {, JSType, typeByName, =]
[(, JSType, topType, ), {, JSType, result, =, topType, ;, if, (, resultEqualsValue, ), {, JSType, typeByName, =, getNativeTypeForTypeOf, (]
[JSType, result, =, topType, ;, if, (, resultEqualsValue, ), {, JSType, typeByName, =, getNativeTypeForTypeOf, (, value, ), ;, if, (]
[JSType, result, =, topType, ;, if, (, resultEqualsValue, ), {, JSType, typeByName, =, getNativeTypeForTypeOf, (, value, ), ;, if, (]
[=, topType, ;, if, (, resultEqualsValue, ), {, JSType, typeByName, =, getNativeTypeForTypeOf, (, value, ), ;, if, (, typeByName, !=]
[if, (, resultEqualsValue, ), {, JSType, typeByName, =, getNativeTypeForTypeOf, (, value, ), ;, if, (, typeByName, !=, null, ), {]
[resultEqualsValue, ), {, JSType, typeByName, =, getNativeTypeForTypeOf, (, value, ), ;, if, (, typeByName, !=, null, ), {, result, =]
[=, getNativeTypeForTypeOf, (, value, ), ;, if, (, typeByName, !=, null, ), {, result, =, typeByName, ;, }, }, return]
[{, result, =, typeByName, ;, }, }, return, result, ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return]
[{, result, =, typeByName, ;, }, }, return, result, ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return]
[{, result, =, typeByName, ;, }, }, return, result, ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return]
[result, =, typeByName, ;, }, }, return, result, ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return, (]
[result, =, typeByName, ;, }, }, return, result, ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return, (]
[result, =, typeByName, ;, }, }, return, result, ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return, (]
[}, }, return, result, ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return, (, value, ., equals, (]
[result, ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return, (, value, ., equals, (, "object", ), ||]
[result, ;, }, @, Override, public, JSType, caseNoObjectType, (, ), {, return, (, value, ., equals, (, "object", ), ||]
[Override, public, JSType, caseNoObjectType, (, ), {, return, (, value, ., equals, (, "object", ), ||, value, ., equals, (]
[(, ), {, return, (, value, ., equals, (, "object", ), ||, value, ., equals, (, "function", ), ), ==]
[{, return, (, value, ., equals, (, "object", ), ||, value, ., equals, (, "function", ), ), ==, resultEqualsValue, ?]
[(, value, ., equals, (, "object", ), ||, value, ., equals, (, "function", ), ), ==, resultEqualsValue, ?, getNativeType, (]
[equals, (, "object", ), ||, value, ., equals, (, "function", ), ), ==, resultEqualsValue, ?, getNativeType, (, NO_OBJECT_TYPE, ), :]
[==, resultEqualsValue, ?, getNativeType, (, NO_OBJECT_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return]
[==, resultEqualsValue, ?, getNativeType, (, NO_OBJECT_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return]
[?, getNativeType, (, NO_OBJECT_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return, matchesExpectation, (]
[NO_OBJECT_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return, matchesExpectation, (, "boolean", ), ?]
[:, null, ;, }, @, Override, public, JSType, caseBooleanType, (, ), {, return, matchesExpectation, (, "boolean", ), ?, getNativeType, (]
[}, @, Override, public, JSType, caseBooleanType, (, ), {, return, matchesExpectation, (, "boolean", ), ?, getNativeType, (, BOOLEAN_TYPE, ), :]
[?, getNativeType, (, BOOLEAN_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return]
[?, getNativeType, (, BOOLEAN_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return]
[(, BOOLEAN_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return, matchesExpectation, (]
[:, null, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return, matchesExpectation, (, "function", ), ?]
[;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return, matchesExpectation, (, "function", ), ?, type, :]
[return, matchesExpectation, (, "function", ), ?, type, :, null, ;, }, @, Override, public, JSType, caseNullType, (, ), {, return]
[return, matchesExpectation, (, "function", ), ?, type, :, null, ;, }, @, Override, public, JSType, caseNullType, (, ), {, return]
[(, "function", ), ?, type, :, null, ;, }, @, Override, public, JSType, caseNullType, (, ), {, return, matchesExpectation, (]
[?, type, :, null, ;, }, @, Override, public, JSType, caseNullType, (, ), {, return, matchesExpectation, (, "object", ), ?]
[:, null, ;, }, @, Override, public, JSType, caseNullType, (, ), {, return, matchesExpectation, (, "object", ), ?, getNativeType, (]
[}, @, Override, public, JSType, caseNullType, (, ), {, return, matchesExpectation, (, "object", ), ?, getNativeType, (, NULL_TYPE, ), :]
["object", ), ?, getNativeType, (, NULL_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return]
["object", ), ?, getNativeType, (, NULL_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return]
[?, getNativeType, (, NULL_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return, matchesExpectation, (]
[NULL_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return, matchesExpectation, (, "number", ), ?]
[:, null, ;, }, @, Override, public, JSType, caseNumberType, (, ), {, return, matchesExpectation, (, "number", ), ?, getNativeType, (]
[}, @, Override, public, JSType, caseNumberType, (, ), {, return, matchesExpectation, (, "number", ), ?, getNativeType, (, NUMBER_TYPE, ), :]
[getNativeType, (, NUMBER_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, if, (]
[getNativeType, (, NUMBER_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, if, (]
[:, null, ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, if, (, value, ., equals, (]
[JSType, caseObjectType, (, ObjectType, type, ), {, if, (, value, ., equals, (, "function", ), ), {, JSType, ctorType, =]
[(, ObjectType, type, ), {, if, (, value, ., equals, (, "function", ), ), {, JSType, ctorType, =, getNativeType, (]
[if, (, value, ., equals, (, "function", ), ), {, JSType, ctorType, =, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ;, if, (]
[equals, (, "function", ), ), {, JSType, ctorType, =, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ;, if, (, resultEqualsValue, ), {, return]
[equals, (, "function", ), ), {, JSType, ctorType, =, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ;, if, (, resultEqualsValue, ), {, return]
[), {, JSType, ctorType, =, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ;, if, (, resultEqualsValue, ), {, return, ctorType, ., getGreatestSubtype, (]
[U2U_CONSTRUCTOR_TYPE, ), ;, if, (, resultEqualsValue, ), {, return, ctorType, ., getGreatestSubtype, (, type, ), ;, }, else, {, return]
[U2U_CONSTRUCTOR_TYPE, ), ;, if, (, resultEqualsValue, ), {, return, ctorType, ., getGreatestSubtype, (, type, ), ;, }, else, {, return]
[U2U_CONSTRUCTOR_TYPE, ), ;, if, (, resultEqualsValue, ), {, return, ctorType, ., getGreatestSubtype, (, type, ), ;, }, else, {, return]
[(, resultEqualsValue, ), {, return, ctorType, ., getGreatestSubtype, (, type, ), ;, }, else, {, return, type, ., isSubtype, (]
[{, return, ctorType, ., getGreatestSubtype, (, type, ), ;, }, else, {, return, type, ., isSubtype, (, ctorType, ), ?]
[ctorType, ., getGreatestSubtype, (, type, ), ;, }, else, {, return, type, ., isSubtype, (, ctorType, ), ?, null, :]
[), ;, }, else, {, return, type, ., isSubtype, (, ctorType, ), ?, null, :, type, ;, }, }, return]
[), ;, }, else, {, return, type, ., isSubtype, (, ctorType, ), ?, null, :, type, ;, }, }, return]
[}, else, {, return, type, ., isSubtype, (, ctorType, ), ?, null, :, type, ;, }, }, return, matchesExpectation, (]
[return, type, ., isSubtype, (, ctorType, ), ?, null, :, type, ;, }, }, return, matchesExpectation, (, "object", ), ?]
[., isSubtype, (, ctorType, ), ?, null, :, type, ;, }, }, return, matchesExpectation, (, "object", ), ?, type, :]
[return, matchesExpectation, (, "object", ), ?, type, :, null, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return]
[return, matchesExpectation, (, "object", ), ?, type, :, null, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return]
[(, "object", ), ?, type, :, null, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return, matchesExpectation, (]
[?, type, :, null, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return, matchesExpectation, (, "string", ), ?]
[:, null, ;, }, @, Override, public, JSType, caseStringType, (, ), {, return, matchesExpectation, (, "string", ), ?, getNativeType, (]
[}, @, Override, public, JSType, caseStringType, (, ), {, return, matchesExpectation, (, "string", ), ?, getNativeType, (, STRING_TYPE, ), :]
["string", ), ?, getNativeType, (, STRING_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseVoidType, (, ), {, return]
["string", ), ?, getNativeType, (, STRING_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseVoidType, (, ), {, return]
[?, getNativeType, (, STRING_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseVoidType, (, ), {, return, matchesExpectation, (]
[STRING_TYPE, ), :, null, ;, }, @, Override, public, JSType, caseVoidType, (, ), {, return, matchesExpectation, (, "undefined", ), ?]
[:, null, ;, }, @, Override, public, JSType, caseVoidType, (, ), {, return, matchesExpectation, (, "undefined", ), ?, getNativeType, (]
[}, @, Override, public, JSType, caseVoidType, (, ), {, return, matchesExpectation, (, "undefined", ), ?, getNativeType, (, VOID_TYPE, ), :]
[?, getNativeType, (, VOID_TYPE, ), :, null, ;, }, }, protected, final, JSType, getRestrictedWithoutUndefined, (, JSType, type, ), {, return]
[?, getNativeType, (, VOID_TYPE, ), :, null, ;, }, }, protected, final, JSType, getRestrictedWithoutUndefined, (, JSType, type, ), {, return]
[?, getNativeType, (, VOID_TYPE, ), :, null, ;, }, }, protected, final, JSType, getRestrictedWithoutUndefined, (, JSType, type, ), {, return]
[(, VOID_TYPE, ), :, null, ;, }, }, protected, final, JSType, getRestrictedWithoutUndefined, (, JSType, type, ), {, return, type, ==]
[), :, null, ;, }, }, protected, final, JSType, getRestrictedWithoutUndefined, (, JSType, type, ), {, return, type, ==, null, ?]
[null, ;, }, }, protected, final, JSType, getRestrictedWithoutUndefined, (, JSType, type, ), {, return, type, ==, null, ?, null, :]
[null, ;, }, }, protected, final, JSType, getRestrictedWithoutUndefined, (, JSType, type, ), {, return, type, ==, null, ?, null, :]
[protected, final, JSType, getRestrictedWithoutUndefined, (, JSType, type, ), {, return, type, ==, null, ?, null, :, type, ., visit, (]
[null, :, type, ., visit, (, restrictUndefinedVisitor, ), ;, }, protected, final, JSType, getRestrictedWithoutNull, (, JSType, type, ), {, return]
[null, :, type, ., visit, (, restrictUndefinedVisitor, ), ;, }, protected, final, JSType, getRestrictedWithoutNull, (, JSType, type, ), {, return]
[null, :, type, ., visit, (, restrictUndefinedVisitor, ), ;, }, protected, final, JSType, getRestrictedWithoutNull, (, JSType, type, ), {, return]
[type, ., visit, (, restrictUndefinedVisitor, ), ;, }, protected, final, JSType, getRestrictedWithoutNull, (, JSType, type, ), {, return, type, ==]
[visit, (, restrictUndefinedVisitor, ), ;, }, protected, final, JSType, getRestrictedWithoutNull, (, JSType, type, ), {, return, type, ==, null, ?]
[restrictUndefinedVisitor, ), ;, }, protected, final, JSType, getRestrictedWithoutNull, (, JSType, type, ), {, return, type, ==, null, ?, null, :]
[restrictUndefinedVisitor, ), ;, }, protected, final, JSType, getRestrictedWithoutNull, (, JSType, type, ), {, return, type, ==, null, ?, null, :]
[protected, final, JSType, getRestrictedWithoutNull, (, JSType, type, ), {, return, type, ==, null, ?, null, :, type, ., visit, (]
[(, restrictNullVisitor, ), ;, }, JSType, getRestrictedByTypeOfResult, (, JSType, type, ,, String, value, ,, boolean, resultEqualsValue, ), {, if, (]
[(, restrictNullVisitor, ), ;, }, JSType, getRestrictedByTypeOfResult, (, JSType, type, ,, String, value, ,, boolean, resultEqualsValue, ), {, if, (]
[), ;, }, JSType, getRestrictedByTypeOfResult, (, JSType, type, ,, String, value, ,, boolean, resultEqualsValue, ), {, if, (, type, ==]
[(, JSType, type, ,, String, value, ,, boolean, resultEqualsValue, ), {, if, (, type, ==, null, ), {, if, (]
[,, boolean, resultEqualsValue, ), {, if, (, type, ==, null, ), {, if, (, resultEqualsValue, ), {, JSType, result, =]
[resultEqualsValue, ), {, if, (, type, ==, null, ), {, if, (, resultEqualsValue, ), {, JSType, result, =, getNativeTypeForTypeOf, (]
[(, type, ==, null, ), {, if, (, resultEqualsValue, ), {, JSType, result, =, getNativeTypeForTypeOf, (, value, ), ;, return]
[(, type, ==, null, ), {, if, (, resultEqualsValue, ), {, JSType, result, =, getNativeTypeForTypeOf, (, value, ), ;, return]
[(, type, ==, null, ), {, if, (, resultEqualsValue, ), {, JSType, result, =, getNativeTypeForTypeOf, (, value, ), ;, return]
[==, null, ), {, if, (, resultEqualsValue, ), {, JSType, result, =, getNativeTypeForTypeOf, (, value, ), ;, return, result, ==]
[), {, if, (, resultEqualsValue, ), {, JSType, result, =, getNativeTypeForTypeOf, (, value, ), ;, return, result, ==, null, ?]
[if, (, resultEqualsValue, ), {, JSType, result, =, getNativeTypeForTypeOf, (, value, ), ;, return, result, ==, null, ?, getNativeType, (]
[), {, JSType, result, =, getNativeTypeForTypeOf, (, value, ), ;, return, result, ==, null, ?, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), :]
[(, value, ), ;, return, result, ==, null, ?, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), :, result, ;, }, else, {, return]
[result, ==, null, ?, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), :, result, ;, }, else, {, return, null, ;, }, }, return]
[result, ==, null, ?, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), :, result, ;, }, else, {, return, null, ;, }, }, return]
[getNativeType, (, CHECKED_UNKNOWN_TYPE, ), :, result, ;, }, else, {, return, null, ;, }, }, return, type, ., visit, (]
[), :, result, ;, }, else, {, return, null, ;, }, }, return, type, ., visit, (, new, RestrictByOneTypeOfResultVisitor, (]
[result, ;, }, else, {, return, null, ;, }, }, return, type, ., visit, (, new, RestrictByOneTypeOfResultVisitor, (, value, ,]
[visit, (, new, RestrictByOneTypeOfResultVisitor, (, value, ,, resultEqualsValue, ), ), ;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return]
[visit, (, new, RestrictByOneTypeOfResultVisitor, (, value, ,, resultEqualsValue, ), ), ;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return]
[(, value, ,, resultEqualsValue, ), ), ;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, ., getNativeType, (]
[{, return, typeRegistry, ., getNativeType, (, typeId, ), ;, }, private, JSType, getNativeTypeForTypeOf, (, String, value, ), {, if, (]
[{, return, typeRegistry, ., getNativeType, (, typeId, ), ;, }, private, JSType, getNativeTypeForTypeOf, (, String, value, ), {, if, (]
[getNativeType, (, typeId, ), ;, }, private, JSType, getNativeTypeForTypeOf, (, String, value, ), {, if, (, value, ., equals, (]
[}, private, JSType, getNativeTypeForTypeOf, (, String, value, ), {, if, (, value, ., equals, (, "number", ), ), {, return]
[JSType, getNativeTypeForTypeOf, (, String, value, ), {, if, (, value, ., equals, (, "number", ), ), {, return, getNativeType, (]
[if, (, value, ., equals, (, "number", ), ), {, return, getNativeType, (, NUMBER_TYPE, ), ;, }, else, if, (]
[if, (, value, ., equals, (, "number", ), ), {, return, getNativeType, (, NUMBER_TYPE, ), ;, }, else, if, (]
[equals, (, "number", ), ), {, return, getNativeType, (, NUMBER_TYPE, ), ;, }, else, if, (, value, ., equals, (]
[{, return, getNativeType, (, NUMBER_TYPE, ), ;, }, else, if, (, value, ., equals, (, "boolean", ), ), {, return]
[getNativeType, (, NUMBER_TYPE, ), ;, }, else, if, (, value, ., equals, (, "boolean", ), ), {, return, getNativeType, (]
[if, (, value, ., equals, (, "boolean", ), ), {, return, getNativeType, (, BOOLEAN_TYPE, ), ;, }, else, if, (]
[if, (, value, ., equals, (, "boolean", ), ), {, return, getNativeType, (, BOOLEAN_TYPE, ), ;, }, else, if, (]
[equals, (, "boolean", ), ), {, return, getNativeType, (, BOOLEAN_TYPE, ), ;, }, else, if, (, value, ., equals, (]
[{, return, getNativeType, (, BOOLEAN_TYPE, ), ;, }, else, if, (, value, ., equals, (, "string", ), ), {, return]
[getNativeType, (, BOOLEAN_TYPE, ), ;, }, else, if, (, value, ., equals, (, "string", ), ), {, return, getNativeType, (]
[if, (, value, ., equals, (, "string", ), ), {, return, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (]
[if, (, value, ., equals, (, "string", ), ), {, return, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (]
[equals, (, "string", ), ), {, return, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, value, ., equals, (]
[{, return, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, value, ., equals, (, "undefined", ), ), {, return]
[getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, value, ., equals, (, "undefined", ), ), {, return, getNativeType, (]
[if, (, value, ., equals, (, "undefined", ), ), {, return, getNativeType, (, VOID_TYPE, ), ;, }, else, if, (]
[if, (, value, ., equals, (, "undefined", ), ), {, return, getNativeType, (, VOID_TYPE, ), ;, }, else, if, (]
[equals, (, "undefined", ), ), {, return, getNativeType, (, VOID_TYPE, ), ;, }, else, if, (, value, ., equals, (]
[{, return, getNativeType, (, VOID_TYPE, ), ;, }, else, if, (, value, ., equals, (, "function", ), ), {, return]
[getNativeType, (, VOID_TYPE, ), ;, }, else, if, (, value, ., equals, (, "function", ), ), {, return, getNativeType, (]
[if, (, value, ., equals, (, "function", ), ), {, return, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ;, }, else, {, return]
