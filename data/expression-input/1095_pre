[., Node, ;, public, class, PeepholeCollectPropertyAssignments, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (]
[., Node, ;, public, class, PeepholeCollectPropertyAssignments, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (]
[Node, ;, public, class, PeepholeCollectPropertyAssignments, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, !]
[Node, ;, public, class, PeepholeCollectPropertyAssignments, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, !]
[AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, !, subtree, ., isScript, (, ), &&]
[{, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, !, subtree, ., isScript, (, ), &&, !]
[{, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, !, subtree, ., isScript, (, ), &&, !]
[), {, if, (, !, subtree, ., isScript, (, ), &&, !, subtree, ., isBlock, (, ), ), {, return]
[., isScript, (, ), &&, !, subtree, ., isBlock, (, ), ), {, return, subtree, ;, }, boolean, codeChanged, =]
[., isBlock, (, ), ), {, return, subtree, ;, }, boolean, codeChanged, =, false, ;, for, (, Node, child, =]
[., isBlock, (, ), ), {, return, subtree, ;, }, boolean, codeChanged, =, false, ;, for, (, Node, child, =]
[return, subtree, ;, }, boolean, codeChanged, =, false, ;, for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;]
[return, subtree, ;, }, boolean, codeChanged, =, false, ;, for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;]
[;, }, boolean, codeChanged, =, false, ;, for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;, child, !=]
[boolean, codeChanged, =, false, ;, for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;, child, !=, null, ;]
[=, false, ;, for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[=, false, ;, for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, !]
[getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, !]
[null, ;, child, =, child, ., getNext, (, ), ), {, if, (, !, child, ., isVar, (, ), &&]
[;, child, =, child, ., getNext, (, ), ), {, if, (, !, child, ., isVar, (, ), &&, !]
[;, child, =, child, ., getNext, (, ), ), {, if, (, !, child, ., isVar, (, ), &&, !]
[., getNext, (, ), ), {, if, (, !, child, ., isVar, (, ), &&, !, NodeUtil, ., isExprAssign, (]
[child, ., isVar, (, ), &&, !, NodeUtil, ., isExprAssign, (, child, ), ), {, continue, ;, }, if, (]
[., isVar, (, ), &&, !, NodeUtil, ., isExprAssign, (, child, ), ), {, continue, ;, }, if, (, !]
[(, ), &&, !, NodeUtil, ., isExprAssign, (, child, ), ), {, continue, ;, }, if, (, !, isPropertyAssignmentToName, (]
[(, ), &&, !, NodeUtil, ., isExprAssign, (, child, ), ), {, continue, ;, }, if, (, !, isPropertyAssignmentToName, (]
[{, continue, ;, }, if, (, !, isPropertyAssignmentToName, (, child, ., getNext, (, ), ), ), {, continue, ;, }]
[{, continue, ;, }, if, (, !, isPropertyAssignmentToName, (, child, ., getNext, (, ), ), ), {, continue, ;, }]
[if, (, !, isPropertyAssignmentToName, (, child, ., getNext, (, ), ), ), {, continue, ;, }, Preconditions, ., checkState, (]
[if, (, !, isPropertyAssignmentToName, (, child, ., getNext, (, ), ), ), {, continue, ;, }, Preconditions, ., checkState, (]
[), ), {, continue, ;, }, Preconditions, ., checkState, (, child, ., hasOneChild, (, ), ), ;, Node, name, =]
[{, continue, ;, }, Preconditions, ., checkState, (, child, ., hasOneChild, (, ), ), ;, Node, name, =, getName, (]
[., checkState, (, child, ., hasOneChild, (, ), ), ;, Node, name, =, getName, (, child, ), ;, if, (]
[checkState, (, child, ., hasOneChild, (, ), ), ;, Node, name, =, getName, (, child, ), ;, if, (, !]
[checkState, (, child, ., hasOneChild, (, ), ), ;, Node, name, =, getName, (, child, ), ;, if, (, !]
[(, child, ), ;, if, (, !, name, ., isName, (, ), ), {, continue, ;, }, Node, value, =]
[), ;, if, (, !, name, ., isName, (, ), ), {, continue, ;, }, Node, value, =, getValue, (]
[name, ., isName, (, ), ), {, continue, ;, }, Node, value, =, getValue, (, child, ), ;, if, (]
[name, ., isName, (, ), ), {, continue, ;, }, Node, value, =, getValue, (, child, ), ;, if, (]
[name, ., isName, (, ), ), {, continue, ;, }, Node, value, =, getValue, (, child, ), ;, if, (]
[isName, (, ), ), {, continue, ;, }, Node, value, =, getValue, (, child, ), ;, if, (, value, ==]
[), ), {, continue, ;, }, Node, value, =, getValue, (, child, ), ;, if, (, value, ==, null, ||]
[), {, continue, ;, }, Node, value, =, getValue, (, child, ), ;, if, (, value, ==, null, ||, !]
[continue, ;, }, Node, value, =, getValue, (, child, ), ;, if, (, value, ==, null, ||, !, isInterestingValue, (]
[(, value, ==, null, ||, !, isInterestingValue, (, value, ), ), {, continue, ;, }, Node, propertyCandidate, ;, while, (]
[(, value, ==, null, ||, !, isInterestingValue, (, value, ), ), {, continue, ;, }, Node, propertyCandidate, ;, while, (]
[value, ==, null, ||, !, isInterestingValue, (, value, ), ), {, continue, ;, }, Node, propertyCandidate, ;, while, (, (]
[null, ||, !, isInterestingValue, (, value, ), ), {, continue, ;, }, Node, propertyCandidate, ;, while, (, (, propertyCandidate, =]
[null, ||, !, isInterestingValue, (, value, ), ), {, continue, ;, }, Node, propertyCandidate, ;, while, (, (, propertyCandidate, =]
[), {, continue, ;, }, Node, propertyCandidate, ;, while, (, (, propertyCandidate, =, child, ., getNext, (, ), ), !=]
[Node, propertyCandidate, ;, while, (, (, propertyCandidate, =, child, ., getNext, (, ), ), !=, null, ), {, if, (]
[propertyCandidate, ;, while, (, (, propertyCandidate, =, child, ., getNext, (, ), ), !=, null, ), {, if, (, !]
[while, (, (, propertyCandidate, =, child, ., getNext, (, ), ), !=, null, ), {, if, (, !, collectProperty, (]
[(, propertyCandidate, =, child, ., getNext, (, ), ), !=, null, ), {, if, (, !, collectProperty, (, propertyCandidate, ,]
[(, propertyCandidate, =, child, ., getNext, (, ), ), !=, null, ), {, if, (, !, collectProperty, (, propertyCandidate, ,]
[(, ), ), !=, null, ), {, if, (, !, collectProperty, (, propertyCandidate, ,, name, ., getString, (, ), ,]
[if, (, !, collectProperty, (, propertyCandidate, ,, name, ., getString, (, ), ,, value, ), ), {, break, ;, }]
[!, collectProperty, (, propertyCandidate, ,, name, ., getString, (, ), ,, value, ), ), {, break, ;, }, codeChanged, =]
[., getString, (, ), ,, value, ), ), {, break, ;, }, codeChanged, =, true, ;, }, }, if, (]
[), ,, value, ), ), {, break, ;, }, codeChanged, =, true, ;, }, }, if, (, codeChanged, ), {]
[break, ;, }, codeChanged, =, true, ;, }, }, if, (, codeChanged, ), {, reportCodeChange, (, ), ;, }, return]
[{, reportCodeChange, (, ), ;, }, return, subtree, ;, }, private, Node, getName, (, Node, n, ), {, if, (]
[{, reportCodeChange, (, ), ;, }, return, subtree, ;, }, private, Node, getName, (, Node, n, ), {, if, (]
[;, }, private, Node, getName, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {, return]
[;, }, private, Node, getName, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {, return]
[if, (, n, ., isVar, (, ), ), {, return, n, ., getFirstChild, (, ), ;, }, else, if, (]
[if, (, n, ., isVar, (, ), ), {, return, n, ., getFirstChild, (, ), ;, }, else, if, (]
[isVar, (, ), ), {, return, n, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (]
[return, n, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return]
[return, n, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return]
[return, n, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return]
[., isExprAssign, (, n, ), ), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, throw]
[), ;, }, throw, new, IllegalStateException, (, ), ;, }, private, Node, getValue, (, Node, n, ), {, if, (]
[), ;, }, throw, new, IllegalStateException, (, ), ;, }, private, Node, getValue, (, Node, n, ), {, if, (]
[;, }, private, Node, getValue, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {, return]
[;, }, private, Node, getValue, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {, return]
[;, }, private, Node, getValue, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {, return]
[isVar, (, ), ), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, else, if, (]
[isVar, (, ), ), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, else, if, (]
[{, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (]
[(, ), ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return]
[(, ), ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return]
[(, ), ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return]
[., isExprAssign, (, n, ), ), {, return, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, }, throw]
[getLastChild, (, ), ;, }, throw, new, IllegalStateException, (, ), ;, }, boolean, isInterestingValue, (, Node, n, ), {, return]
[getLastChild, (, ), ;, }, throw, new, IllegalStateException, (, ), ;, }, boolean, isInterestingValue, (, Node, n, ), {, return]
[getLastChild, (, ), ;, }, throw, new, IllegalStateException, (, ), ;, }, boolean, isInterestingValue, (, Node, n, ), {, return]
[new, IllegalStateException, (, ), ;, }, boolean, isInterestingValue, (, Node, n, ), {, return, n, ., isObjectLit, (, ), ||]
[new, IllegalStateException, (, ), ;, }, boolean, isInterestingValue, (, Node, n, ), {, return, n, ., isObjectLit, (, ), ||]
[(, ), ||, n, ., isArrayLit, (, ), ;, }, private, boolean, isPropertyAssignmentToName, (, Node, propertyCandidate, ), {, if, (]
[(, ), ||, n, ., isArrayLit, (, ), ;, }, private, boolean, isPropertyAssignmentToName, (, Node, propertyCandidate, ), {, if, (]
[||, n, ., isArrayLit, (, ), ;, }, private, boolean, isPropertyAssignmentToName, (, Node, propertyCandidate, ), {, if, (, propertyCandidate, ==]
[(, ), ;, }, private, boolean, isPropertyAssignmentToName, (, Node, propertyCandidate, ), {, if, (, propertyCandidate, ==, null, ), {, return]
[boolean, isPropertyAssignmentToName, (, Node, propertyCandidate, ), {, if, (, propertyCandidate, ==, null, ), {, return, false, ;, }, if, (]
[isPropertyAssignmentToName, (, Node, propertyCandidate, ), {, if, (, propertyCandidate, ==, null, ), {, return, false, ;, }, if, (, !]
[isPropertyAssignmentToName, (, Node, propertyCandidate, ), {, if, (, propertyCandidate, ==, null, ), {, return, false, ;, }, if, (, !]
[), {, if, (, propertyCandidate, ==, null, ), {, return, false, ;, }, if, (, !, NodeUtil, ., isExprAssign, (]
[==, null, ), {, return, false, ;, }, if, (, !, NodeUtil, ., isExprAssign, (, propertyCandidate, ), ), {, return]
[;, }, if, (, !, NodeUtil, ., isExprAssign, (, propertyCandidate, ), ), {, return, false, ;, }, Node, expr, =]
[;, }, if, (, !, NodeUtil, ., isExprAssign, (, propertyCandidate, ), ), {, return, false, ;, }, Node, expr, =]
[propertyCandidate, ), ), {, return, false, ;, }, Node, expr, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =]
[propertyCandidate, ), ), {, return, false, ;, }, Node, expr, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =]
[Node, expr, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =, expr, ., getFirstChild, (, ), ;, if, (]
[expr, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =, expr, ., getFirstChild, (, ), ;, if, (, !]
[expr, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =, expr, ., getFirstChild, (, ), ;, if, (, !]
[getFirstChild, (, ), ;, Node, lhs, =, expr, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (]
[lhs, =, expr, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (, lhs, ), ), {, return]
[), ;, if, (, !, NodeUtil, ., isGet, (, lhs, ), ), {, return, false, ;, }, Node, obj, =]
[), ;, if, (, !, NodeUtil, ., isGet, (, lhs, ), ), {, return, false, ;, }, Node, obj, =]
[(, lhs, ), ), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, if, (]
[lhs, ), ), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, if, (, !]
[lhs, ), ), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, if, (, !]
[Node, obj, =, lhs, ., getFirstChild, (, ), ;, if, (, !, obj, ., isName, (, ), ), {, return]
[., getFirstChild, (, ), ;, if, (, !, obj, ., isName, (, ), ), {, return, false, ;, }, return]
[return, true, ;, }, private, boolean, collectProperty, (, Node, propertyCandidate, ,, String, name, ,, Node, value, ), {, if, (]
[true, ;, }, private, boolean, collectProperty, (, Node, propertyCandidate, ,, String, name, ,, Node, value, ), {, if, (, !]
[}, private, boolean, collectProperty, (, Node, propertyCandidate, ,, String, name, ,, Node, value, ), {, if, (, !, isPropertyAssignmentToName, (]
[Node, propertyCandidate, ,, String, name, ,, Node, value, ), {, if, (, !, isPropertyAssignmentToName, (, propertyCandidate, ), ), {, return]
[Node, value, ), {, if, (, !, isPropertyAssignmentToName, (, propertyCandidate, ), ), {, return, false, ;, }, Node, lhs, =]
[Node, value, ), {, if, (, !, isPropertyAssignmentToName, (, propertyCandidate, ), ), {, return, false, ;, }, Node, lhs, =]
[Node, value, ), {, if, (, !, isPropertyAssignmentToName, (, propertyCandidate, ), ), {, return, false, ;, }, Node, lhs, =]
[{, return, false, ;, }, Node, lhs, =, propertyCandidate, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (]
[return, false, ;, }, Node, lhs, =, propertyCandidate, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, !]
[return, false, ;, }, Node, lhs, =, propertyCandidate, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, !]
[Node, lhs, =, propertyCandidate, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, !, name, ., equals, (]
[Node, lhs, =, propertyCandidate, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, !, name, ., equals, (]
[Node, lhs, =, propertyCandidate, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, !, name, ., equals, (]
[if, (, !, name, ., equals, (, lhs, ., getFirstChild, (, ), ., getString, (, ), ), ), {, return]
[(, lhs, ., getFirstChild, (, ), ., getString, (, ), ), ), {, return, false, ;, }, Node, rhs, =]
[(, lhs, ., getFirstChild, (, ), ., getString, (, ), ), ), {, return, false, ;, }, Node, rhs, =]
[(, ), ), ), {, return, false, ;, }, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (]
[(, ), ), ), {, return, false, ;, }, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (]
[), ), {, return, false, ;, }, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, mayHaveSideEffects, (]
[return, false, ;, }, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, mayHaveSideEffects, (, rhs, ), ||]
[return, false, ;, }, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, mayHaveSideEffects, (, rhs, ), ||]
[Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, mayHaveSideEffects, (, rhs, ), ||, NodeUtil, ., canBeSideEffected, (]
[getNext, (, ), ;, if, (, mayHaveSideEffects, (, rhs, ), ||, NodeUtil, ., canBeSideEffected, (, rhs, ), ), {, return]
[(, mayHaveSideEffects, (, rhs, ), ||, NodeUtil, ., canBeSideEffected, (, rhs, ), ), {, return, false, ;, }, if, (]
[(, mayHaveSideEffects, (, rhs, ), ||, NodeUtil, ., canBeSideEffected, (, rhs, ), ), {, return, false, ;, }, if, (]
[mayHaveSideEffects, (, rhs, ), ||, NodeUtil, ., canBeSideEffected, (, rhs, ), ), {, return, false, ;, }, if, (, !]
[mayHaveSideEffects, (, rhs, ), ||, NodeUtil, ., canBeSideEffected, (, rhs, ), ), {, return, false, ;, }, if, (, !]
[||, NodeUtil, ., canBeSideEffected, (, rhs, ), ), {, return, false, ;, }, if, (, !, NodeUtil, ., isLiteralValue, (]
[., canBeSideEffected, (, rhs, ), ), {, return, false, ;, }, if, (, !, NodeUtil, ., isLiteralValue, (, rhs, ,]
[rhs, ), ), {, return, false, ;, }, if, (, !, NodeUtil, ., isLiteralValue, (, rhs, ,, true, ), &&]
[), {, return, false, ;, }, if, (, !, NodeUtil, ., isLiteralValue, (, rhs, ,, true, ), &&, mightContainForwardReference, (]
[return, false, ;, }, if, (, !, NodeUtil, ., isLiteralValue, (, rhs, ,, true, ), &&, mightContainForwardReference, (, rhs, ,]
[(, !, NodeUtil, ., isLiteralValue, (, rhs, ,, true, ), &&, mightContainForwardReference, (, rhs, ,, name, ), ), {, return]
[(, rhs, ,, true, ), &&, mightContainForwardReference, (, rhs, ,, name, ), ), {, return, false, ;, }, switch, (]
[(, rhs, ,, true, ), &&, mightContainForwardReference, (, rhs, ,, name, ), ), {, return, false, ;, }, switch, (]
[rhs, ,, name, ), ), {, return, false, ;, }, switch, (, value, ., getType, (, ), ), {, case]
[rhs, ,, name, ), ), {, return, false, ;, }, switch, (, value, ., getType, (, ), ), {, case]
[return, false, ;, }, switch, (, value, ., getType, (, ), ), {, case, Token, ., ARRAYLIT, :, if, (]
[false, ;, }, switch, (, value, ., getType, (, ), ), {, case, Token, ., ARRAYLIT, :, if, (, !]
[}, switch, (, value, ., getType, (, ), ), {, case, Token, ., ARRAYLIT, :, if, (, !, collectArrayProperty, (]
[(, value, ., getType, (, ), ), {, case, Token, ., ARRAYLIT, :, if, (, !, collectArrayProperty, (, value, ,]
[), ), {, case, Token, ., ARRAYLIT, :, if, (, !, collectArrayProperty, (, value, ,, propertyCandidate, ), ), {, return]
[ARRAYLIT, :, if, (, !, collectArrayProperty, (, value, ,, propertyCandidate, ), ), {, return, false, ;, }, break, ;, case]
[ARRAYLIT, :, if, (, !, collectArrayProperty, (, value, ,, propertyCandidate, ), ), {, return, false, ;, }, break, ;, case]
[(, value, ,, propertyCandidate, ), ), {, return, false, ;, }, break, ;, case, Token, ., OBJECTLIT, :, if, (]
[value, ,, propertyCandidate, ), ), {, return, false, ;, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !]
[propertyCandidate, ), ), {, return, false, ;, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, collectObjectProperty, (]
[), {, return, false, ;, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, collectObjectProperty, (, value, ,]
[}, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, collectObjectProperty, (, value, ,, propertyCandidate, ), ), {, return]
[if, (, !, collectObjectProperty, (, value, ,, propertyCandidate, ), ), {, return, false, ;, }, break, ;, default, :, throw]
[propertyCandidate, ), ), {, return, false, ;, }, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }, return]
[;, }, return, true, ;, }, private, boolean, collectArrayProperty, (, Node, arrayLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =]
[;, }, return, true, ;, }, private, boolean, collectArrayProperty, (, Node, arrayLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =]
[Node, arrayLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =, propertyCandidate, ., getFirstChild, (, ), ;, final, int, sizeOfArrayAtStart, =]
[Node, arrayLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =, propertyCandidate, ., getFirstChild, (, ), ;, final, int, sizeOfArrayAtStart, =]
[=, propertyCandidate, ., getFirstChild, (, ), ;, final, int, sizeOfArrayAtStart, =, arrayLiteral, ., getChildCount, (, ), ;, int, maxIndexAssigned, =]
[=, propertyCandidate, ., getFirstChild, (, ), ;, final, int, sizeOfArrayAtStart, =, arrayLiteral, ., getChildCount, (, ), ;, int, maxIndexAssigned, =]
[., getFirstChild, (, ), ;, final, int, sizeOfArrayAtStart, =, arrayLiteral, ., getChildCount, (, ), ;, int, maxIndexAssigned, =, sizeOfArrayAtStart, -]
[final, int, sizeOfArrayAtStart, =, arrayLiteral, ., getChildCount, (, ), ;, int, maxIndexAssigned, =, sizeOfArrayAtStart, -, 1, ;, Node, lhs, =]
[final, int, sizeOfArrayAtStart, =, arrayLiteral, ., getChildCount, (, ), ;, int, maxIndexAssigned, =, sizeOfArrayAtStart, -, 1, ;, Node, lhs, =]
[;, int, maxIndexAssigned, =, sizeOfArrayAtStart, -, 1, ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, rhs, =]
[;, int, maxIndexAssigned, =, sizeOfArrayAtStart, -, 1, ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, rhs, =]
[Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (]
[lhs, =, assignment, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, !]
[lhs, =, assignment, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, !]
[Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, !, lhs, ., isGetElem, (, ), ), {, return]
[(, ), ;, if, (, !, lhs, ., isGetElem, (, ), ), {, return, false, ;, }, Node, obj, =]
[(, ), ;, if, (, !, lhs, ., isGetElem, (, ), ), {, return, false, ;, }, Node, obj, =]
[(, ), ), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =]
[(, ), ), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =]
[Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =, obj, ., getNext, (, ), ;, if, (]
[obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =, obj, ., getNext, (, ), ;, if, (, !]
[obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =, obj, ., getNext, (, ), ;, if, (, !]
[Node, property, =, obj, ., getNext, (, ), ;, if, (, !, property, ., isNumber, (, ), ), {, return]
[(, ), ;, if, (, !, property, ., isNumber, (, ), ), {, return, false, ;, }, double, dindex, =]
[(, ), ;, if, (, !, property, ., isNumber, (, ), ), {, return, false, ;, }, double, dindex, =]
[isNumber, (, ), ), {, return, false, ;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (]
[isNumber, (, ), ), {, return, false, ;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (]
[isNumber, (, ), ), {, return, false, ;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (]
[(, ), ), {, return, false, ;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (, !]
[), ), {, return, false, ;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (, !, (]
[), ), {, return, false, ;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (, !, (]
[{, return, false, ;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (, !, (, dindex, >=]
[;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (, !, (, dindex, >=, 0, ), ||]
[;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (, !, (, dindex, >=, 0, ), ||]
[=, property, ., getDouble, (, ), ;, if, (, !, (, dindex, >=, 0, ), ||, Double, ., isInfinite, (]
[getDouble, (, ), ;, if, (, !, (, dindex, >=, 0, ), ||, Double, ., isInfinite, (, dindex, ), ||]
[getDouble, (, ), ;, if, (, !, (, dindex, >=, 0, ), ||, Double, ., isInfinite, (, dindex, ), ||]
[), ;, if, (, !, (, dindex, >=, 0, ), ||, Double, ., isInfinite, (, dindex, ), ||, dindex, >]
[!, (, dindex, >=, 0, ), ||, Double, ., isInfinite, (, dindex, ), ||, dindex, >, 0x7fffffffL, ), {, return]
[||, Double, ., isInfinite, (, dindex, ), ||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index, =]
[isInfinite, (, dindex, ), ||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index, =, (, int, )]
[||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index, =, (, int, ), dindex, ;, if, (]
[||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index, =, (, int, ), dindex, ;, if, (]
[>, 0x7fffffffL, ), {, return, false, ;, }, int, index, =, (, int, ), dindex, ;, if, (, dindex, !=]
[return, false, ;, }, int, index, =, (, int, ), dindex, ;, if, (, dindex, !=, index, ), {, return]
[index, =, (, int, ), dindex, ;, if, (, dindex, !=, index, ), {, return, false, ;, }, if, (]
[index, =, (, int, ), dindex, ;, if, (, dindex, !=, index, ), {, return, false, ;, }, if, (]
[index, =, (, int, ), dindex, ;, if, (, dindex, !=, index, ), {, return, false, ;, }, if, (]
[(, int, ), dindex, ;, if, (, dindex, !=, index, ), {, return, false, ;, }, if, (, maxIndexAssigned, +]
[), dindex, ;, if, (, dindex, !=, index, ), {, return, false, ;, }, if, (, maxIndexAssigned, +, 4, <]
[(, dindex, !=, index, ), {, return, false, ;, }, if, (, maxIndexAssigned, +, 4, <, index, ), {, return]
[{, return, false, ;, }, if, (, maxIndexAssigned, +, 4, <, index, ), {, return, false, ;, }, if, (]
[{, return, false, ;, }, if, (, maxIndexAssigned, +, 4, <, index, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, maxIndexAssigned, +, 4, <, index, ), {, return, false, ;, }, if, (, index, >]
[maxIndexAssigned, +, 4, <, index, ), {, return, false, ;, }, if, (, index, >, maxIndexAssigned, ), {, while, (]
[maxIndexAssigned, +, 4, <, index, ), {, return, false, ;, }, if, (, index, >, maxIndexAssigned, ), {, while, (]
[4, <, index, ), {, return, false, ;, }, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <]
[4, <, index, ), {, return, false, ;, }, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <]
[index, ), {, return, false, ;, }, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <, index, -]
[}, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <, index, -, 1, ), {, Node, emptyNode, =]
[}, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <, index, -, 1, ), {, Node, emptyNode, =]
[}, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <, index, -, 1, ), {, Node, emptyNode, =]
[while, (, maxIndexAssigned, <, index, -, 1, ), {, Node, emptyNode, =, IR, ., empty, (, ), ., srcref, (]
[<, index, -, 1, ), {, Node, emptyNode, =, IR, ., empty, (, ), ., srcref, (, arrayLiteral, ), ;]
[<, index, -, 1, ), {, Node, emptyNode, =, IR, ., empty, (, ), ., srcref, (, arrayLiteral, ), ;]
[), {, Node, emptyNode, =, IR, ., empty, (, ), ., srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (]
[emptyNode, =, IR, ., empty, (, ), ., srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (, emptyNode, ), ;]
[=, IR, ., empty, (, ), ., srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (, emptyNode, ), ;, ++]
[empty, (, ), ., srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (, emptyNode, ), ;, ++, maxIndexAssigned, ;, }]
[empty, (, ), ., srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (, emptyNode, ), ;, ++, maxIndexAssigned, ;, }]
[srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (, emptyNode, ), ;, ++, maxIndexAssigned, ;, }, arrayLiteral, ., addChildToBack, (]
[srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (, emptyNode, ), ;, ++, maxIndexAssigned, ;, }, arrayLiteral, ., addChildToBack, (]
[maxIndexAssigned, ;, }, arrayLiteral, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, }, else, {, Node, currentValue, =]
[maxIndexAssigned, ;, }, arrayLiteral, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, }, else, {, Node, currentValue, =]
[., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, }, else, {, Node, currentValue, =, arrayLiteral, ., getChildAtIndex, (]
[detachFromParent, (, ), ), ;, }, else, {, Node, currentValue, =, arrayLiteral, ., getChildAtIndex, (, index, ), ;, if, (]
[(, ), ), ;, }, else, {, Node, currentValue, =, arrayLiteral, ., getChildAtIndex, (, index, ), ;, if, (, !]
[(, ), ), ;, }, else, {, Node, currentValue, =, arrayLiteral, ., getChildAtIndex, (, index, ), ;, if, (, !]
[currentValue, =, arrayLiteral, ., getChildAtIndex, (, index, ), ;, if, (, !, currentValue, ., isEmpty, (, ), ), {, return]
[., getChildAtIndex, (, index, ), ;, if, (, !, currentValue, ., isEmpty, (, ), ), {, return, false, ;, }]
[., getChildAtIndex, (, index, ), ;, if, (, !, currentValue, ., isEmpty, (, ), ), {, return, false, ;, }]
[), ;, if, (, !, currentValue, ., isEmpty, (, ), ), {, return, false, ;, }, arrayLiteral, ., replaceChild, (]
[if, (, !, currentValue, ., isEmpty, (, ), ), {, return, false, ;, }, arrayLiteral, ., replaceChild, (, currentValue, ,]
[if, (, !, currentValue, ., isEmpty, (, ), ), {, return, false, ;, }, arrayLiteral, ., replaceChild, (, currentValue, ,]
[), {, return, false, ;, }, arrayLiteral, ., replaceChild, (, currentValue, ,, rhs, ., detachFromParent, (, ), ), ;, }]
[), {, return, false, ;, }, arrayLiteral, ., replaceChild, (, currentValue, ,, rhs, ., detachFromParent, (, ), ), ;, }]
[., replaceChild, (, currentValue, ,, rhs, ., detachFromParent, (, ), ), ;, }, propertyCandidate, ., detachFromParent, (, ), ;, return]
[), ;, return, true, ;, }, private, boolean, collectObjectProperty, (, Node, objectLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =]
[), ;, return, true, ;, }, private, boolean, collectObjectProperty, (, Node, objectLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =]
[(, Node, objectLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =]
[(, Node, objectLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =]
[Node, assignment, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ,, rhs, =]
[Node, assignment, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ,, rhs, =]
[Node, lhs, =, assignment, ., getFirstChild, (, ), ,, rhs, =, lhs, ., getNext, (, ), ;, Node, obj, =]
[Node, lhs, =, assignment, ., getFirstChild, (, ), ,, rhs, =, lhs, ., getNext, (, ), ;, Node, obj, =]
[rhs, =, lhs, ., getNext, (, ), ;, Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =]
[rhs, =, lhs, ., getNext, (, ), ;, Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =]
[Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =, obj, ., getNext, (, ), ;, if, (]
[Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =, obj, ., getNext, (, ), ;, if, (]
[Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =, obj, ., getNext, (, ), ;, if, (]
[(, ), ;, Node, property, =, obj, ., getNext, (, ), ;, if, (, lhs, ., isGetElem, (, ), &&]
[), ;, Node, property, =, obj, ., getNext, (, ), ;, if, (, lhs, ., isGetElem, (, ), &&, (]
[), ;, Node, property, =, obj, ., getNext, (, ), ;, if, (, lhs, ., isGetElem, (, ), &&, (]
[;, Node, property, =, obj, ., getNext, (, ), ;, if, (, lhs, ., isGetElem, (, ), &&, (, !]
[;, Node, property, =, obj, ., getNext, (, ), ;, if, (, lhs, ., isGetElem, (, ), &&, (, !]
[getNext, (, ), ;, if, (, lhs, ., isGetElem, (, ), &&, (, !, property, ., isString, (, ), &&]
[(, ), ;, if, (, lhs, ., isGetElem, (, ), &&, (, !, property, ., isString, (, ), &&, !]
[(, ), ;, if, (, lhs, ., isGetElem, (, ), &&, (, !, property, ., isString, (, ), &&, !]
[), &&, (, !, property, ., isString, (, ), &&, !, property, ., isNumber, (, ), ), ), {, return]
[), &&, !, property, ., isNumber, (, ), ), ), {, return, false, ;, }, String, propertyName, ;, if, (]
[), &&, !, property, ., isNumber, (, ), ), ), {, return, false, ;, }, String, propertyName, ;, if, (]
[), ), ), {, return, false, ;, }, String, propertyName, ;, if, (, property, ., isNumber, (, ), ), {]
[), {, return, false, ;, }, String, propertyName, ;, if, (, property, ., isNumber, (, ), ), {, propertyName, =]
[), {, return, false, ;, }, String, propertyName, ;, if, (, property, ., isNumber, (, ), ), {, propertyName, =]
[;, }, String, propertyName, ;, if, (, property, ., isNumber, (, ), ), {, propertyName, =, NodeUtil, ., getStringValue, (]
[(, property, ., isNumber, (, ), ), {, propertyName, =, NodeUtil, ., getStringValue, (, property, ), ;, }, else, {]
[., isNumber, (, ), ), {, propertyName, =, NodeUtil, ., getStringValue, (, property, ), ;, }, else, {, propertyName, =]
[., isNumber, (, ), ), {, propertyName, =, NodeUtil, ., getStringValue, (, property, ), ;, }, else, {, propertyName, =]
[getStringValue, (, property, ), ;, }, else, {, propertyName, =, property, ., getString, (, ), ;, }, Node, newProperty, =]
[getStringValue, (, property, ), ;, }, else, {, propertyName, =, property, ., getString, (, ), ;, }, Node, newProperty, =]
[getStringValue, (, property, ), ;, }, else, {, propertyName, =, property, ., getString, (, ), ;, }, Node, newProperty, =]
[;, }, else, {, propertyName, =, property, ., getString, (, ), ;, }, Node, newProperty, =, IR, ., stringKey, (]
[=, property, ., getString, (, ), ;, }, Node, newProperty, =, IR, ., stringKey, (, propertyName, ), ., copyInformationFrom, (]
[), ;, }, Node, newProperty, =, IR, ., stringKey, (, propertyName, ), ., copyInformationFrom, (, property, ), ;, if, (]
[), ;, }, Node, newProperty, =, IR, ., stringKey, (, propertyName, ), ., copyInformationFrom, (, property, ), ;, if, (]
[., stringKey, (, propertyName, ), ., copyInformationFrom, (, property, ), ;, if, (, lhs, ., isGetElem, (, ), ), {]
[., stringKey, (, propertyName, ), ., copyInformationFrom, (, property, ), ;, if, (, lhs, ., isGetElem, (, ), ), {]
[;, if, (, lhs, ., isGetElem, (, ), ), {, newProperty, ., setQuotedString, (, ), ;, }, Node, newValue, =]
[;, if, (, lhs, ., isGetElem, (, ), ), {, newProperty, ., setQuotedString, (, ), ;, }, Node, newValue, =]
[(, ), ), {, newProperty, ., setQuotedString, (, ), ;, }, Node, newValue, =, rhs, ., detachFromParent, (, ), ;]
[(, ), ), {, newProperty, ., setQuotedString, (, ), ;, }, Node, newValue, =, rhs, ., detachFromParent, (, ), ;]
[newProperty, ., setQuotedString, (, ), ;, }, Node, newValue, =, rhs, ., detachFromParent, (, ), ;, newProperty, ., addChildToBack, (]
[(, ), ;, }, Node, newValue, =, rhs, ., detachFromParent, (, ), ;, newProperty, ., addChildToBack, (, newValue, ), ;]
[(, ), ;, }, Node, newValue, =, rhs, ., detachFromParent, (, ), ;, newProperty, ., addChildToBack, (, newValue, ), ;]
[Node, newValue, =, rhs, ., detachFromParent, (, ), ;, newProperty, ., addChildToBack, (, newValue, ), ;, objectLiteral, ., addChildToBack, (]
[rhs, ., detachFromParent, (, ), ;, newProperty, ., addChildToBack, (, newValue, ), ;, objectLiteral, ., addChildToBack, (, newProperty, ), ;]
[rhs, ., detachFromParent, (, ), ;, newProperty, ., addChildToBack, (, newValue, ), ;, objectLiteral, ., addChildToBack, (, newProperty, ), ;]
[., addChildToBack, (, newValue, ), ;, objectLiteral, ., addChildToBack, (, newProperty, ), ;, propertyCandidate, ., detachFromParent, (, ), ;, return]
[), ;, return, true, ;, }, private, static, boolean, mightContainForwardReference, (, Node, node, ,, String, varName, ), {, if, (]
[), ;, return, true, ;, }, private, static, boolean, mightContainForwardReference, (, Node, node, ,, String, varName, ), {, if, (]
[boolean, mightContainForwardReference, (, Node, node, ,, String, varName, ), {, if, (, node, ., isName, (, ), ), {, return]
[boolean, mightContainForwardReference, (, Node, node, ,, String, varName, ), {, if, (, node, ., isName, (, ), ), {, return]
[node, ,, String, varName, ), {, if, (, node, ., isName, (, ), ), {, return, varName, ., equals, (]
[node, ,, String, varName, ), {, if, (, node, ., isName, (, ), ), {, return, varName, ., equals, (]
[), {, return, varName, ., equals, (, node, ., getString, (, ), ), ;, }, for, (, Node, child, =]
[), {, return, varName, ., equals, (, node, ., getString, (, ), ), ;, }, for, (, Node, child, =]
[(, node, ., getString, (, ), ), ;, }, for, (, Node, child, =, node, ., getFirstChild, (, ), ;]
[(, node, ., getString, (, ), ), ;, }, for, (, Node, child, =, node, ., getFirstChild, (, ), ;]
[., getString, (, ), ), ;, }, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=]
[(, ), ), ;, }, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;]
[), ;, }, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[), ;, }, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, mightContainForwardReference, (]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, mightContainForwardReference, (, child, ,]
[child, =, child, ., getNext, (, ), ), {, if, (, mightContainForwardReference, (, child, ,, varName, ), ), {, return]
[(, ), ), {, if, (, mightContainForwardReference, (, child, ,, varName, ), ), {, return, true, ;, }, }, return]
