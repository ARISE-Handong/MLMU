[), ;, setStepSizeControl, (, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, resetInternalState, (, ), ;, }, public, AdaptiveStepsizeIntegrator]
[;, resetInternalState, (, ), ;, }, public, AdaptiveStepsizeIntegrator, (, final, String, name, ,, final, double, minStep, ,, final, double, maxStep]
[,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, resetInternalState, (, ), ;, }, public, AdaptiveStepsizeIntegrator, (, final, String, name, ,]
[,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, resetInternalState, (, ), ;, }, public, AdaptiveStepsizeIntegrator, (, final, String, name, ,, final, double]
[,, scalRelativeTolerance, ), ;, resetInternalState, (, ), ;, }, public, AdaptiveStepsizeIntegrator, (, final, String, name, ,, final, double, minStep, ,]
[), ;, resetInternalState, (, ), ;, }, public, AdaptiveStepsizeIntegrator, (, final, String, name, ,, final, double, minStep, ,, final, double]
[;, }, public, AdaptiveStepsizeIntegrator, (, final, String, name, ,, final, double, minStep, ,, final, double, maxStep, ,, final, double, []
[), ;, setStepSizeControl, (, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, resetInternalState, (, ), ;, }, public, void]
[;, resetInternalState, (, ), ;, }, public, void, setStepSizeControl, (, final, double, minimalStep, ,, final, double, maximalStep, ,, final, double]
[,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, resetInternalState, (, ), ;, }, public, void, setStepSizeControl, (, final, double, minimalStep]
[,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, resetInternalState, (, ), ;, }, public, void, setStepSizeControl, (, final, double, minimalStep, ,, final]
[,, vecRelativeTolerance, ), ;, resetInternalState, (, ), ;, }, public, void, setStepSizeControl, (, final, double, minimalStep, ,, final, double, maximalStep]
[), ;, resetInternalState, (, ), ;, }, public, void, setStepSizeControl, (, final, double, minimalStep, ,, final, double, maximalStep, ,, final]
[;, }, public, void, setStepSizeControl, (, final, double, minimalStep, ,, final, double, maximalStep, ,, final, double, absoluteTolerance, ,, final, double]
[=, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -]
[;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance]
[., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;]
[), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;]
[=, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance]
[;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance, ;, vecAbsoluteTolerance, =, null, ;, vecRelativeTolerance, =]
[., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance, ;, vecAbsoluteTolerance]
[), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance, ;, vecAbsoluteTolerance, =, null, ;, vecRelativeTolerance]
[=, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance, ;, vecAbsoluteTolerance, =, null, ;, vecRelativeTolerance, =, null, ;]
[;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance, ;, vecAbsoluteTolerance, =, null, ;, vecRelativeTolerance, =, null, ;, }, public, void]
[;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance, ;, vecAbsoluteTolerance, =, null, ;, vecRelativeTolerance, =, null, ;, }, public, void]
[=, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance, ;, vecAbsoluteTolerance, =, null, ;, vecRelativeTolerance, =, null, ;, }, public, void, setStepSizeControl, (]
[;, scalRelativeTolerance, =, relativeTolerance, ;, vecAbsoluteTolerance, =, null, ;, vecRelativeTolerance, =, null, ;, }, public, void, setStepSizeControl, (, final, double]
[=, relativeTolerance, ;, vecAbsoluteTolerance, =, null, ;, vecRelativeTolerance, =, null, ;, }, public, void, setStepSizeControl, (, final, double, minimalStep, ,]
[;, vecAbsoluteTolerance, =, null, ;, vecRelativeTolerance, =, null, ;, }, public, void, setStepSizeControl, (, final, double, minimalStep, ,, final, double]
[=, null, ;, vecRelativeTolerance, =, null, ;, }, public, void, setStepSizeControl, (, final, double, minimalStep, ,, final, double, maximalStep, ,]
[;, vecRelativeTolerance, =, null, ;, }, public, void, setStepSizeControl, (, final, double, minimalStep, ,, final, double, maximalStep, ,, final, double]
[=, null, ;, }, public, void, setStepSizeControl, (, final, double, minimalStep, ,, final, double, maximalStep, ,, final, double, [, ]]
[;, }, public, void, setStepSizeControl, (, final, double, minimalStep, ,, final, double, maximalStep, ,, final, double, [, ], absoluteTolerance, ,]
[=, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -]
[;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance]
[., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;]
[), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, 0, ;]
[=, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0]
[;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone, (]
[., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance]
[), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone]
[=, -, 1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone, (, ), ;]
[;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone, (, ), ;, vecRelativeTolerance, =, relativeTolerance]
[;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone, (, ), ;, vecRelativeTolerance, =, relativeTolerance]
[=, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone, (, ), ;, vecRelativeTolerance, =, relativeTolerance, ., clone]
[;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone, (, ), ;, vecRelativeTolerance, =, relativeTolerance, ., clone, (, )]
[=, 0, ;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone, (, ), ;, vecRelativeTolerance, =, relativeTolerance, ., clone, (, ), ;, }]
[;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone, (, ), ;, vecRelativeTolerance, =, relativeTolerance, ., clone, (, ), ;, }, public, void]
[=, absoluteTolerance, ., clone, (, ), ;, vecRelativeTolerance, =, relativeTolerance, ., clone, (, ), ;, }, public, void, setInitialStepSize, (]
[;, vecRelativeTolerance, =, relativeTolerance, ., clone, (, ), ;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if]
[., clone, (, ), ;, vecRelativeTolerance, =, relativeTolerance, ., clone, (, ), ;, }, public, void, setInitialStepSize, (, final, double]
[=, relativeTolerance, ., clone, (, ), ;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (, (]
[;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (, (, initialStepSize, <, minStep, ), ||, (]
[., clone, (, ), ;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (, (, initialStepSize, <]
[), {, initialStep, =, -, 1.0, ;, }, else, {, initialStep, =, initialStepSize, ;, }, }, @, Override, protected, void]
[||, (, initialStepSize, >, maxStep, ), ), {, initialStep, =, -, 1.0, ;, }, else, {, initialStep, =, initialStepSize, ;]
[), ||, (, initialStepSize, >, maxStep, ), ), {, initialStep, =, -, 1.0, ;, }, else, {, initialStep, =, initialStepSize]
[<, minStep, ), ||, (, initialStepSize, >, maxStep, ), ), {, initialStep, =, -, 1.0, ;, }, else, {, initialStep]
[), ||, (, initialStepSize, >, maxStep, ), ), {, initialStep, =, -, 1.0, ;, }, else, {, initialStep, =, initialStepSize]
[), {, initialStep, =, -, 1.0, ;, }, else, {, initialStep, =, initialStepSize, ;, }, }, @, Override, protected, void]
[), ), {, initialStep, =, -, 1.0, ;, }, else, {, initialStep, =, initialStepSize, ;, }, }, @, Override, protected]
[>, maxStep, ), ), {, initialStep, =, -, 1.0, ;, }, else, {, initialStep, =, initialStepSize, ;, }, }, @]
[), ), {, initialStep, =, -, 1.0, ;, }, else, {, initialStep, =, initialStepSize, ;, }, }, @, Override, protected]
[=, -, 1.0, ;, }, else, {, initialStep, =, initialStepSize, ;, }, }, @, Override, protected, void, sanityChecks, (, final]
[;, }, else, {, initialStep, =, initialStepSize, ;, }, }, @, Override, protected, void, sanityChecks, (, final, ExpandableStatefulODE, equations, ,]
[;, }, else, {, initialStep, =, initialStepSize, ;, }, }, @, Override, protected, void, sanityChecks, (, final, ExpandableStatefulODE, equations, ,]
[=, initialStepSize, ;, }, }, @, Override, protected, void, sanityChecks, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws]
[;, }, }, @, Override, protected, void, sanityChecks, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, DimensionMismatchException, ,]
[;, mainSetDimension, =, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance, !=, null, )]
[., sanityChecks, (, equations, ,, t, ), ;, mainSetDimension, =, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;]
[,, t, ), ;, mainSetDimension, =, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance]
[), ;, mainSetDimension, =, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance, !=, null]
[=, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance, !=, null, ), &&, (]
[;, if, (, (, vecAbsoluteTolerance, !=, null, ), &&, (, vecAbsoluteTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new]
[., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance, !=, null, ), &&, (, vecAbsoluteTolerance, ., length, !=, mainSetDimension, )]
[., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance, !=, null, ), &&, (, vecAbsoluteTolerance, .]
[), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (, vecRelativeTolerance, !=, null]
[&&, (, vecAbsoluteTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, )]
[), &&, (, vecAbsoluteTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length]
[!=, null, ), &&, (, vecAbsoluteTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance]
[), &&, (, vecAbsoluteTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length]
[), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (, vecRelativeTolerance, !=, null]
[), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (, vecRelativeTolerance, !=]
[!=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (]
[., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if]
[), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (, vecRelativeTolerance, !=]
[;, }, if, (, (, vecRelativeTolerance, !=, null, ), &&, (, vecRelativeTolerance, ., length, !=, mainSetDimension, ), ), {, throw]
[,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (, vecRelativeTolerance, !=, null, ), &&, (, vecRelativeTolerance, ., length, !=]
[), ;, }, if, (, (, vecRelativeTolerance, !=, null, ), &&, (, vecRelativeTolerance, ., length, !=, mainSetDimension, ), ), {]
[., length, ), ;, }, if, (, (, vecRelativeTolerance, !=, null, ), &&, (, vecRelativeTolerance, ., length, !=, mainSetDimension, )]
[), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecRelativeTolerance, ., length, ), ;, }, }, public, double, initializeStep, (, final]
[&&, (, vecRelativeTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecRelativeTolerance, ., length, )]
[), &&, (, vecRelativeTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecRelativeTolerance, ., length]
[!=, null, ), &&, (, vecRelativeTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecRelativeTolerance]
[), &&, (, vecRelativeTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecRelativeTolerance, ., length]
[), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecRelativeTolerance, ., length, ), ;, }, }, public, double, initializeStep, (, final]
[), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecRelativeTolerance, ., length, ), ;, }, }, public, double, initializeStep, (]
[!=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecRelativeTolerance, ., length, ), ;, }, }, public, double]
[., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecRelativeTolerance, ., length, ), ;, }, }]
[), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecRelativeTolerance, ., length, ), ;, }, }, public, double, initializeStep, (]
[;, }, }, public, double, initializeStep, (, final, boolean, forward, ,, final, int, order, ,, final, double, [, ], scale]
[,, vecRelativeTolerance, ., length, ), ;, }, }, public, double, initializeStep, (, final, boolean, forward, ,, final, int, order, ,]
[), ;, }, }, public, double, initializeStep, (, final, boolean, forward, ,, final, int, order, ,, final, double, [, ]]
[., length, ), ;, }, }, public, double, initializeStep, (, final, boolean, forward, ,, final, int, order, ,, final, double]
[), {, return, forward, ?, initialStep, :, -, initialStep, ;, }, double, ratio, ;, double, yOnScale2, =, 0, ;, double]
[>, 0, ), {, return, forward, ?, initialStep, :, -, initialStep, ;, }, double, ratio, ;, double, yOnScale2, =, 0]
[), {, return, forward, ?, initialStep, :, -, initialStep, ;, }, double, ratio, ;, double, yOnScale2, =, 0, ;, double]
[;, }, double, ratio, ;, double, yOnScale2, =, 0, ;, double, yDotOnScale2, =, 0, ;, for, (, int, j, =]
[?, initialStep, :, -, initialStep, ;, }, double, ratio, ;, double, yOnScale2, =, 0, ;, double, yDotOnScale2, =, 0, ;]
[:, -, initialStep, ;, }, double, ratio, ;, double, yOnScale2, =, 0, ;, double, yDotOnScale2, =, 0, ;, for, (]
[;, }, double, ratio, ;, double, yOnScale2, =, 0, ;, double, yDotOnScale2, =, 0, ;, for, (, int, j, =]
[;, }, double, ratio, ;, double, yOnScale2, =, 0, ;, double, yDotOnScale2, =, 0, ;, for, (, int, j, =]
[;, double, yDotOnScale2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++]
[;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =]
[;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, y0, [, j, ], /, scale, []
[;, ++, j, ), {, ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio]
[<, scale, ., length, ;, ++, j, ), {, ratio, =, y0, [, j, ], /, scale, [, j, ]]
[;, ++, j, ), {, ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio]
[., length, ;, ++, j, ), {, ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2]
[), {, ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;]
[), {, ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;]
[=, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0]
[;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2]
[/, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /, scale]
[[, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j]
[], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /]
[;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2]
[[, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /, scale, [, j]
[], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /, scale, [, j, ], ;]
[+=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio]
[;, ratio, =, yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }]
[*, ratio, ;, ratio, =, yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio]
[;, ratio, =, yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }]
[=, yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h]
[;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2]
[/, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2, <]
[[, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (]
[], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2]
[;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2]
[[, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, )]
[], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (]
[+=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10]
[;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6]
[*, ratio, ;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), )]
[;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6]
[;, if, (, !, forward, ), {, h, =, -, h, ;, }, for, (, int, j, =, 0, ;]
[?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (, !, forward]
[), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (, !]
[||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2]
[), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /]
[<, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (]
[), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /]
[), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (, !]
[), ), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (]
[<, 1.0e-10, ), ), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;]
[), ), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (]
[:, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (, !, forward, ), {]
[;, if, (, !, forward, ), {, h, =, -, h, ;, }, for, (, int, j, =, 0, ;]
[), ;, if, (, !, forward, ), {, h, =, -, h, ;, }, for, (, int, j, =, 0]
[*, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (, !, forward, ), {, h, =, -]
[), ;, if, (, !, forward, ), {, h, =, -, h, ;, }, for, (, int, j, =, 0]
[., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (, !, forward, ), {, h, =, -, h, ;]
[), ), ;, if, (, !, forward, ), {, h, =, -, h, ;, }, for, (, int, j, =]
[/, yDotOnScale2, ), ), ;, if, (, !, forward, ), {, h, =, -, h, ;, }, for, (, int]
[), ), ;, if, (, !, forward, ), {, h, =, -, h, ;, }, for, (, int, j, =]
[), {, h, =, -, h, ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length]
[), {, h, =, -, h, ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length]
[=, -, h, ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j]
[;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, y1]
[;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, y1]
[;, j, <, y0, ., length, ;, ++, j, ), {, y1, [, j, ], =, y0, [, j, ]]
[;, ++, j, ), {, y1, [, j, ], =, y0, [, j, ], +, h, *, yDot0, [, j]
[<, y0, ., length, ;, ++, j, ), {, y1, [, j, ], =, y0, [, j, ], +, h]
[;, ++, j, ), {, y1, [, j, ], =, y0, [, j, ], +, h, *, yDot0, [, j]
[., length, ;, ++, j, ), {, y1, [, j, ], =, y0, [, j, ], +, h, *, yDot0]
[), {, y1, [, j, ], =, y0, [, j, ], +, h, *, yDot0, [, j, ], ;, }]
[), {, y1, [, j, ], =, y0, [, j, ], +, h, *, yDot0, [, j, ], ;, }]
[=, y0, [, j, ], +, h, *, yDot0, [, j, ], ;, }, computeDerivatives, (, t0, +, h, ,]
[[, j, ], =, y0, [, j, ], +, h, *, yDot0, [, j, ], ;, }, computeDerivatives, (, t0]
[], =, y0, [, j, ], +, h, *, yDot0, [, j, ], ;, }, computeDerivatives, (, t0, +, h]
[;, }, computeDerivatives, (, t0, +, h, ,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (]
[+, h, *, yDot0, [, j, ], ;, }, computeDerivatives, (, t0, +, h, ,, y1, ,, yDot1, ), ;]
[[, j, ], +, h, *, yDot0, [, j, ], ;, }, computeDerivatives, (, t0, +, h, ,, y1, ,]
[], +, h, *, yDot0, [, j, ], ;, }, computeDerivatives, (, t0, +, h, ,, y1, ,, yDot1, )]
[;, }, computeDerivatives, (, t0, +, h, ,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (]
[*, yDot0, [, j, ], ;, }, computeDerivatives, (, t0, +, h, ,, y1, ,, yDot1, ), ;, double, yDDotOnScale]
[;, }, computeDerivatives, (, t0, +, h, ,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (]
[[, j, ], ;, }, computeDerivatives, (, t0, +, h, ,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0]
[], ;, }, computeDerivatives, (, t0, +, h, ,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for]
[;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++]
[,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[+, h, ,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;]
[,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;, j, <, scale, .]
[), ;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;]
[;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =]
[;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, (, yDot1, [, j, ], -, yDot0]
[;, ++, j, ), {, ratio, =, (, yDot1, [, j, ], -, yDot0, [, j, ], ), /, scale]
[<, scale, ., length, ;, ++, j, ), {, ratio, =, (, yDot1, [, j, ], -, yDot0, [, j]
[;, ++, j, ), {, ratio, =, (, yDot1, [, j, ], -, yDot0, [, j, ], ), /, scale]
[., length, ;, ++, j, ), {, ratio, =, (, yDot1, [, j, ], -, yDot0, [, j, ], )]
[), {, ratio, =, (, yDot1, [, j, ], -, yDot0, [, j, ], ), /, scale, [, j, ]]
[), {, ratio, =, (, yDot1, [, j, ], -, yDot0, [, j, ], ), /, scale, [, j, ]]
[=, (, yDot1, [, j, ], -, yDot0, [, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=]
[;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;, final]
[/, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale]
[), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (]
[-, yDot0, [, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale]
[[, j, ], -, yDot0, [, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio]
[], -, yDot0, [, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }]
[), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (]
[[, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath]
[], ), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt]
[;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;, final]
[[, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /]
[], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;]
[+=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;, final, double, maxInv2]
[;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;, final, double, maxInv2, =, FastMath, ., max]
[*, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;, final, double, maxInv2, =, FastMath]
[;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;, final, double, maxInv2, =, FastMath, ., max]
[=, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;, final, double, maxInv2, =, FastMath, ., max, (, FastMath, .]
[;, final, double, maxInv2, =, FastMath, ., max, (, FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, ), ;, final]
[/, h, ;, final, double, maxInv2, =, FastMath, ., max, (, FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, )]
[., sqrt, (, yDDotOnScale, ), /, h, ;, final, double, maxInv2, =, FastMath, ., max, (, FastMath, ., sqrt, (]
[), /, h, ;, final, double, maxInv2, =, FastMath, ., max, (, FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale]
[;, final, double, maxInv2, =, FastMath, ., max, (, FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, ), ;, final]
[;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6, ,, 0.001, *, FastMath]
[., max, (, FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, ), ;, final, double, h1, =, (, maxInv2, <]
[,, yDDotOnScale, ), ;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6, ,]
[., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, ), ;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?, FastMath]
[), ,, yDDotOnScale, ), ;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6]
[), ;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6, ,, 0.001, *]
[;, h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;, h]
[?, FastMath, ., max, (, 1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :, FastMath, ., pow]
[), ?, FastMath, ., max, (, 1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :, FastMath, .]
[<, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :]
[), ?, FastMath, ., max, (, 1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :, FastMath, .]
[:, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;, h, =, FastMath, ., min, (]
[., max, (, 1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :, FastMath, ., pow, (, 0.01]
[,, 0.001, *, FastMath, ., abs, (, h, ), ), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0]
[), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;, h, =, FastMath, ., min]
[*, FastMath, ., abs, (, h, ), ), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order]
[), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;, h, =, FastMath, ., min]
[., abs, (, h, ), ), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;]
[), ), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;, h, =, FastMath, .]
[;, h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;, h]
[., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;, h, =, FastMath, ., min, (, 100.0, *]
[,, 1.0, /, order, ), ;, h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, )]
[/, maxInv2, ,, 1.0, /, order, ), ;, h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (]
[,, 1.0, /, order, ), ;, h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, )]
[), ;, h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;]
[/, order, ), ;, h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, ), ,, h1]
[), ;, h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;]
[=, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;, h, =, FastMath]
[;, h, =, FastMath, ., max, (, h, ,, 1.0e-12, *, FastMath, ., abs, (, t0, ), ), ;, if]
[., min, (, 100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;, h, =, FastMath, ., max]
[,, h1, ), ;, h, =, FastMath, ., max, (, h, ,, 1.0e-12, *, FastMath, ., abs, (, t0, )]
[*, FastMath, ., abs, (, h, ), ,, h1, ), ;, h, =, FastMath, ., max, (, h, ,, 1.0e-12]
[,, h1, ), ;, h, =, FastMath, ., max, (, h, ,, 1.0e-12, *, FastMath, ., abs, (, t0, )]
[., abs, (, h, ), ,, h1, ), ;, h, =, FastMath, ., max, (, h, ,, 1.0e-12, *, FastMath]
[), ,, h1, ), ;, h, =, FastMath, ., max, (, h, ,, 1.0e-12, *, FastMath, ., abs, (, t0]
[), ;, h, =, FastMath, ., max, (, h, ,, 1.0e-12, *, FastMath, ., abs, (, t0, ), ), ;]
[=, FastMath, ., max, (, h, ,, 1.0e-12, *, FastMath, ., abs, (, t0, ), ), ;, if, (, h]
[;, if, (, h, <, getMinStep, (, ), ), {, h, =, getMinStep, (, ), ;, }, if, (, h]
[., max, (, h, ,, 1.0e-12, *, FastMath, ., abs, (, t0, ), ), ;, if, (, h, <, getMinStep]
[,, 1.0e-12, *, FastMath, ., abs, (, t0, ), ), ;, if, (, h, <, getMinStep, (, ), ), {]
[), ;, if, (, h, <, getMinStep, (, ), ), {, h, =, getMinStep, (, ), ;, }, if, (]
[*, FastMath, ., abs, (, t0, ), ), ;, if, (, h, <, getMinStep, (, ), ), {, h, =]
[), ;, if, (, h, <, getMinStep, (, ), ), {, h, =, getMinStep, (, ), ;, }, if, (]
[., abs, (, t0, ), ), ;, if, (, h, <, getMinStep, (, ), ), {, h, =, getMinStep, (]
[), ), ;, if, (, h, <, getMinStep, (, ), ), {, h, =, getMinStep, (, ), ;, }, if]
[), {, h, =, getMinStep, (, ), ;, }, if, (, h, >, getMaxStep, (, ), ), {, h, =]
[<, getMinStep, (, ), ), {, h, =, getMinStep, (, ), ;, }, if, (, h, >, getMaxStep, (, )]
[), {, h, =, getMinStep, (, ), ;, }, if, (, h, >, getMaxStep, (, ), ), {, h, =]
[=, getMinStep, (, ), ;, }, if, (, h, >, getMaxStep, (, ), ), {, h, =, getMaxStep, (, )]
[;, }, if, (, h, >, getMaxStep, (, ), ), {, h, =, getMaxStep, (, ), ;, }, if, (]
[), {, h, =, getMaxStep, (, ), ;, }, if, (, !, forward, ), {, h, =, -, h, ;]
[>, getMaxStep, (, ), ), {, h, =, getMaxStep, (, ), ;, }, if, (, !, forward, ), {, h]
[), {, h, =, getMaxStep, (, ), ;, }, if, (, !, forward, ), {, h, =, -, h, ;]
[=, getMaxStep, (, ), ;, }, if, (, !, forward, ), {, h, =, -, h, ;, }, return, h]
[;, }, if, (, !, forward, ), {, h, =, -, h, ;, }, return, h, ;, }, protected, double]
[), {, h, =, -, h, ;, }, return, h, ;, }, protected, double, filterStep, (, final, double, h, ,]
[), {, h, =, -, h, ;, }, return, h, ;, }, protected, double, filterStep, (, final, double, h, ,]
[=, -, h, ;, }, return, h, ;, }, protected, double, filterStep, (, final, double, h, ,, final, boolean, forward]
[;, }, return, h, ;, }, protected, double, filterStep, (, final, double, h, ,, final, boolean, forward, ,, final, boolean]
[;, }, return, h, ;, }, protected, double, filterStep, (, final, double, h, ,, final, boolean, forward, ,, final, boolean]
[;, }, protected, double, filterStep, (, final, double, h, ,, final, boolean, forward, ,, final, boolean, acceptSmall, ), throws, NumberIsTooSmallException]
[;, if, (, FastMath, ., abs, (, h, ), <, minStep, ), {, if, (, acceptSmall, ), {, filteredH, =]
[), {, if, (, acceptSmall, ), {, filteredH, =, forward, ?, minStep, :, -, minStep, ;, }, else, {, throw]
[<, minStep, ), {, if, (, acceptSmall, ), {, filteredH, =, forward, ?, minStep, :, -, minStep, ;, }, else]
[., abs, (, h, ), <, minStep, ), {, if, (, acceptSmall, ), {, filteredH, =, forward, ?, minStep, :]
[), <, minStep, ), {, if, (, acceptSmall, ), {, filteredH, =, forward, ?, minStep, :, -, minStep, ;, }]
[), {, if, (, acceptSmall, ), {, filteredH, =, forward, ?, minStep, :, -, minStep, ;, }, else, {, throw]
[), {, filteredH, =, forward, ?, minStep, :, -, minStep, ;, }, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, .]
[=, forward, ?, minStep, :, -, minStep, ;, }, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath]
[;, }, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs, (, h, ), ,, minStep]
[?, minStep, :, -, minStep, ;, }, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs]
[:, -, minStep, ;, }, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs, (, h]
[;, }, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs, (, h, ), ,, minStep]
[;, }, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs, (, h, ), ,, minStep]
[;, }, }, if, (, filteredH, >, maxStep, ), {, filteredH, =, maxStep, ;, }, else, if, (, filteredH, <]
[,, FastMath, ., abs, (, h, ), ,, minStep, ,, true, ), ;, }, }, if, (, filteredH, >, maxStep]
[., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs, (, h, ), ,, minStep, ,, true, ), ;, }, }, if, (, filteredH]
[,, minStep, ,, true, ), ;, }, }, if, (, filteredH, >, maxStep, ), {, filteredH, =, maxStep, ;, }]
[., abs, (, h, ), ,, minStep, ,, true, ), ;, }, }, if, (, filteredH, >, maxStep, ), {]
[), ,, minStep, ,, true, ), ;, }, }, if, (, filteredH, >, maxStep, ), {, filteredH, =, maxStep, ;]
[,, true, ), ;, }, }, if, (, filteredH, >, maxStep, ), {, filteredH, =, maxStep, ;, }, else, if]
[), ;, }, }, if, (, filteredH, >, maxStep, ), {, filteredH, =, maxStep, ;, }, else, if, (, filteredH]
[), {, filteredH, =, maxStep, ;, }, else, if, (, filteredH, <, -, maxStep, ), {, filteredH, =, -, maxStep]
[>, maxStep, ), {, filteredH, =, maxStep, ;, }, else, if, (, filteredH, <, -, maxStep, ), {, filteredH, =]
[), {, filteredH, =, maxStep, ;, }, else, if, (, filteredH, <, -, maxStep, ), {, filteredH, =, -, maxStep]
[=, maxStep, ;, }, else, if, (, filteredH, <, -, maxStep, ), {, filteredH, =, -, maxStep, ;, }, return]
[;, }, else, if, (, filteredH, <, -, maxStep, ), {, filteredH, =, -, maxStep, ;, }, return, filteredH, ;]
[), {, filteredH, =, -, maxStep, ;, }, return, filteredH, ;, }, @, Override, public, abstract, void, integrate, (, ExpandableStatefulODE]
[<, -, maxStep, ), {, filteredH, =, -, maxStep, ;, }, return, filteredH, ;, }, @, Override, public, abstract, void]
[), {, filteredH, =, -, maxStep, ;, }, return, filteredH, ;, }, @, Override, public, abstract, void, integrate, (, ExpandableStatefulODE]
[), {, filteredH, =, -, maxStep, ;, }, return, filteredH, ;, }, @, Override, public, abstract, void, integrate, (, ExpandableStatefulODE]
[=, -, maxStep, ;, }, return, filteredH, ;, }, @, Override, public, abstract, void, integrate, (, ExpandableStatefulODE, equations, ,, double]
[;, }, return, filteredH, ;, }, @, Override, public, abstract, void, integrate, (, ExpandableStatefulODE, equations, ,, double, t, ), throws]
[;, }, return, filteredH, ;, }, @, Override, public, abstract, void, integrate, (, ExpandableStatefulODE, equations, ,, double, t, ), throws]
[;, }, @, Override, public, abstract, void, integrate, (, ExpandableStatefulODE, equations, ,, double, t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,]
[;, }, protected, void, resetInternalState, (, ), {, stepStart, =, Double, ., NaN, ;, stepSize, =, FastMath, ., sqrt, (]
[=, Double, ., NaN, ;, stepSize, =, FastMath, ., sqrt, (, minStep, *, maxStep, ), ;, }, public, double, getMinStep]
[;, stepSize, =, FastMath, ., sqrt, (, minStep, *, maxStep, ), ;, }, public, double, getMinStep, (, ), {, return]
[., NaN, ;, stepSize, =, FastMath, ., sqrt, (, minStep, *, maxStep, ), ;, }, public, double, getMinStep, (, )]
[=, FastMath, ., sqrt, (, minStep, *, maxStep, ), ;, }, public, double, getMinStep, (, ), {, return, minStep, ;]
[;, }, public, double, getMinStep, (, ), {, return, minStep, ;, }, public, double, getMaxStep, (, ), {, return, maxStep]
[., sqrt, (, minStep, *, maxStep, ), ;, }, public, double, getMinStep, (, ), {, return, minStep, ;, }, public]
[), ;, }, public, double, getMinStep, (, ), {, return, minStep, ;, }, public, double, getMaxStep, (, ), {, return]
[*, maxStep, ), ;, }, public, double, getMinStep, (, ), {, return, minStep, ;, }, public, double, getMaxStep, (, )]
[), ;, }, public, double, getMinStep, (, ), {, return, minStep, ;, }, public, double, getMaxStep, (, ), {, return]
[;, }, public, double, getMaxStep, (, ), {, return, maxStep, ;, }, }]
[;, }, }]
