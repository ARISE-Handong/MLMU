[<, String, >, ,, Cloneable, {, private, static, final, StrTokenizer, CSV_TOKENIZER_PROTOTYPE, ;, private, static, final, StrTokenizer, TSV_TOKENIZER_PROTOTYPE, ;, static, {]
[>, ,, Cloneable, {, private, static, final, StrTokenizer, CSV_TOKENIZER_PROTOTYPE, ;, private, static, final, StrTokenizer, TSV_TOKENIZER_PROTOTYPE, ;, static, {, CSV_TOKENIZER_PROTOTYPE, =]
[static, final, StrTokenizer, CSV_TOKENIZER_PROTOTYPE, ;, private, static, final, StrTokenizer, TSV_TOKENIZER_PROTOTYPE, ;, static, {, CSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;]
[static, final, StrTokenizer, CSV_TOKENIZER_PROTOTYPE, ;, private, static, final, StrTokenizer, TSV_TOKENIZER_PROTOTYPE, ;, static, {, CSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;]
[;, private, static, final, StrTokenizer, TSV_TOKENIZER_PROTOTYPE, ;, static, {, CSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (]
[;, private, static, final, StrTokenizer, TSV_TOKENIZER_PROTOTYPE, ;, static, {, CSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (]
[static, {, CSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., commaMatcher, (, ), ), ;]
[static, {, CSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., commaMatcher, (, ), ), ;]
[new, StrTokenizer, (, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., commaMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (]
[new, StrTokenizer, (, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., commaMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (]
[setDelimiterMatcher, (, StrMatcher, ., commaMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;]
[setDelimiterMatcher, (, StrMatcher, ., commaMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;]
[commaMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (]
[commaMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (]
[setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;]
[setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;]
[doubleQuoteMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (]
[doubleQuoteMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (]
[setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;]
[setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;]
[noneMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (]
[), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;]
[), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;]
[setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (]
[., trimMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;]
[(, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, =]
[., setEmptyTokenAsNull, (, false, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;]
[., setEmptyTokenAsNull, (, false, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;]
[), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (]
[), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (]
[), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., tabMatcher, (, ), ), ;]
[), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., tabMatcher, (, ), ), ;]
[new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., tabMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (]
[new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., tabMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (]
[setDelimiterMatcher, (, StrMatcher, ., tabMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;]
[setDelimiterMatcher, (, StrMatcher, ., tabMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;]
[tabMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (]
[tabMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (]
[setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;]
[setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;]
[doubleQuoteMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (]
[doubleQuoteMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (]
[setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;]
[setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;]
[noneMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (]
[), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;]
[), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;]
[setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (]
[private, char, chars, [, ], ;, private, String, tokens, [, ], ;, private, int, tokenPos, ;, private, StrMatcher, delimMatcher, =]
[private, char, chars, [, ], ;, private, String, tokens, [, ], ;, private, int, tokenPos, ;, private, StrMatcher, delimMatcher, =]
[], ;, private, int, tokenPos, ;, private, StrMatcher, delimMatcher, =, StrMatcher, ., splitMatcher, (, ), ;, private, StrMatcher, quoteMatcher, =]
[], ;, private, int, tokenPos, ;, private, StrMatcher, delimMatcher, =, StrMatcher, ., splitMatcher, (, ), ;, private, StrMatcher, quoteMatcher, =]
[StrMatcher, ., splitMatcher, (, ), ;, private, StrMatcher, quoteMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, StrMatcher, ignoredMatcher, =]
[StrMatcher, ., splitMatcher, (, ), ;, private, StrMatcher, quoteMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, StrMatcher, ignoredMatcher, =]
[StrMatcher, ., noneMatcher, (, ), ;, private, StrMatcher, ignoredMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, StrMatcher, trimmerMatcher, =]
[StrMatcher, ., noneMatcher, (, ), ;, private, StrMatcher, ignoredMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, StrMatcher, trimmerMatcher, =]
[StrMatcher, ., noneMatcher, (, ), ;, private, StrMatcher, trimmerMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, boolean, emptyAsNull, =]
[private, StrMatcher, trimmerMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, boolean, emptyAsNull, =, false, ;, private, boolean, ignoreEmptyTokens, =]
[private, boolean, emptyAsNull, =, false, ;, private, boolean, ignoreEmptyTokens, =, true, ;, private, static, StrTokenizer, getCSVClone, (, ), {, return]
[=, false, ;, private, boolean, ignoreEmptyTokens, =, true, ;, private, static, StrTokenizer, getCSVClone, (, ), {, return, (, StrTokenizer, )]
[=, false, ;, private, boolean, ignoreEmptyTokens, =, true, ;, private, static, StrTokenizer, getCSVClone, (, ), {, return, (, StrTokenizer, )]
[{, return, (, StrTokenizer, ), CSV_TOKENIZER_PROTOTYPE, ., clone, (, ), ;, }, public, static, StrTokenizer, getCSVInstance, (, ), {, return]
[return, getCSVClone, (, ), ;, }, public, static, StrTokenizer, getCSVInstance, (, final, String, input, ), {, final, StrTokenizer, tok, =]
[;, }, public, static, StrTokenizer, getCSVInstance, (, final, String, input, ), {, final, StrTokenizer, tok, =, getCSVClone, (, ), ;]
[;, }, public, static, StrTokenizer, getCSVInstance, (, final, String, input, ), {, final, StrTokenizer, tok, =, getCSVClone, (, ), ;]
[StrTokenizer, getCSVInstance, (, final, String, input, ), {, final, StrTokenizer, tok, =, getCSVClone, (, ), ;, tok, ., reset, (]
[String, input, ), {, final, StrTokenizer, tok, =, getCSVClone, (, ), ;, tok, ., reset, (, input, ), ;, return]
[return, tok, ;, }, public, static, StrTokenizer, getCSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer, tok, =]
[public, static, StrTokenizer, getCSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer, tok, =, getCSVClone, (, ), ;]
[public, static, StrTokenizer, getCSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer, tok, =, getCSVClone, (, ), ;]
[(, final, char, [, ], input, ), {, final, StrTokenizer, tok, =, getCSVClone, (, ), ;, tok, ., reset, (]
[], input, ), {, final, StrTokenizer, tok, =, getCSVClone, (, ), ;, tok, ., reset, (, input, ), ;, return]
[;, tok, ., reset, (, input, ), ;, return, tok, ;, }, private, static, StrTokenizer, getTSVClone, (, ), {, return]
[reset, (, input, ), ;, return, tok, ;, }, private, static, StrTokenizer, getTSVClone, (, ), {, return, (, StrTokenizer, )]
[reset, (, input, ), ;, return, tok, ;, }, private, static, StrTokenizer, getTSVClone, (, ), {, return, (, StrTokenizer, )]
[{, return, (, StrTokenizer, ), TSV_TOKENIZER_PROTOTYPE, ., clone, (, ), ;, }, public, static, StrTokenizer, getTSVInstance, (, ), {, return]
[return, getTSVClone, (, ), ;, }, public, static, StrTokenizer, getTSVInstance, (, final, String, input, ), {, final, StrTokenizer, tok, =]
[;, }, public, static, StrTokenizer, getTSVInstance, (, final, String, input, ), {, final, StrTokenizer, tok, =, getTSVClone, (, ), ;]
[;, }, public, static, StrTokenizer, getTSVInstance, (, final, String, input, ), {, final, StrTokenizer, tok, =, getTSVClone, (, ), ;]
[StrTokenizer, getTSVInstance, (, final, String, input, ), {, final, StrTokenizer, tok, =, getTSVClone, (, ), ;, tok, ., reset, (]
[String, input, ), {, final, StrTokenizer, tok, =, getTSVClone, (, ), ;, tok, ., reset, (, input, ), ;, return]
[return, tok, ;, }, public, static, StrTokenizer, getTSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer, tok, =]
[public, static, StrTokenizer, getTSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer, tok, =, getTSVClone, (, ), ;]
[public, static, StrTokenizer, getTSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer, tok, =, getTSVClone, (, ), ;]
[(, final, char, [, ], input, ), {, final, StrTokenizer, tok, =, getTSVClone, (, ), ;, tok, ., reset, (]
[], input, ), {, final, StrTokenizer, tok, =, getTSVClone, (, ), ;, tok, ., reset, (, input, ), ;, return]
[tok, ., reset, (, input, ), ;, return, tok, ;, }, public, StrTokenizer, (, ), {, super, (, ), ;]
[tok, ., reset, (, input, ), ;, return, tok, ;, }, public, StrTokenizer, (, ), {, super, (, ), ;]
[input, ), ;, return, tok, ;, }, public, StrTokenizer, (, ), {, super, (, ), ;, this, ., chars, =]
[., chars, =, null, ;, }, public, StrTokenizer, (, final, String, input, ), {, super, (, ), ;, if, (]
[., chars, =, null, ;, }, public, StrTokenizer, (, final, String, input, ), {, super, (, ), ;, if, (]
[=, null, ;, }, public, StrTokenizer, (, final, String, input, ), {, super, (, ), ;, if, (, input, !=]
[}, public, StrTokenizer, (, final, String, input, ), {, super, (, ), ;, if, (, input, !=, null, ), {]
[StrTokenizer, (, final, String, input, ), {, super, (, ), ;, if, (, input, !=, null, ), {, chars, =]
[StrTokenizer, (, final, String, input, ), {, super, (, ), ;, if, (, input, !=, null, ), {, chars, =]
[), ;, if, (, input, !=, null, ), {, chars, =, input, ., toCharArray, (, ), ;, }, else, {]
[if, (, input, !=, null, ), {, chars, =, input, ., toCharArray, (, ), ;, }, else, {, chars, =]
[chars, =, null, ;, }, }, public, StrTokenizer, (, final, String, input, ,, final, char, delim, ), {, this, (]
[;, }, }, public, StrTokenizer, (, final, String, input, ,, final, char, delim, ), {, this, (, input, ), ;]
[}, public, StrTokenizer, (, final, String, input, ,, final, char, delim, ), {, this, (, input, ), ;, setDelimiterChar, (]
[setDelimiterChar, (, delim, ), ;, }, public, StrTokenizer, (, final, String, input, ,, final, String, delim, ), {, this, (]
[), ;, }, public, StrTokenizer, (, final, String, input, ,, final, String, delim, ), {, this, (, input, ), ;]
[}, public, StrTokenizer, (, final, String, input, ,, final, String, delim, ), {, this, (, input, ), ;, setDelimiterString, (]
[setDelimiterString, (, delim, ), ;, }, public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim, ), {, this, (]
[), ;, }, public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim, ), {, this, (, input, ), ;]
[}, public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim, ), {, this, (, input, ), ;, setDelimiterMatcher, (]
[;, }, public, StrTokenizer, (, final, String, input, ,, final, char, delim, ,, final, char, quote, ), {, this, (]
[public, StrTokenizer, (, final, String, input, ,, final, char, delim, ,, final, char, quote, ), {, this, (, input, ,]
[final, String, input, ,, final, char, delim, ,, final, char, quote, ), {, this, (, input, ,, delim, ), ;]
[input, ,, final, char, delim, ,, final, char, quote, ), {, this, (, input, ,, delim, ), ;, setQuoteChar, (]
[;, }, public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, ), {, this, (]
[public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, ), {, this, (, input, ,]
[final, String, input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, ), {, this, (, input, ,, delim, ), ;]
[input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, ), {, this, (, input, ,, delim, ), ;, setQuoteMatcher, (]
[setQuoteMatcher, (, quote, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ), {, super, (, ), ;]
[setQuoteMatcher, (, quote, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ), {, super, (, ), ;]
[;, }, public, StrTokenizer, (, final, char, [, ], input, ), {, super, (, ), ;, this, ., chars, =]
[;, }, public, StrTokenizer, (, final, char, [, ], input, ), {, super, (, ), ;, this, ., chars, =]
[(, final, char, [, ], input, ), {, super, (, ), ;, this, ., chars, =, ArrayUtils, ., clone, (]
[input, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, char, delim, ), {, this, (]
[}, public, StrTokenizer, (, final, char, [, ], input, ,, final, char, delim, ), {, this, (, input, ), ;]
[StrTokenizer, (, final, char, [, ], input, ,, final, char, delim, ), {, this, (, input, ), ;, setDelimiterChar, (]
[delim, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, String, delim, ), {, this, (]
[}, public, StrTokenizer, (, final, char, [, ], input, ,, final, String, delim, ), {, this, (, input, ), ;]
[StrTokenizer, (, final, char, [, ], input, ,, final, String, delim, ), {, this, (, input, ), ;, setDelimiterString, (]
[delim, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, StrMatcher, delim, ), {, this, (]
[}, public, StrTokenizer, (, final, char, [, ], input, ,, final, StrMatcher, delim, ), {, this, (, input, ), ;]
[StrTokenizer, (, final, char, [, ], input, ,, final, StrMatcher, delim, ), {, this, (, input, ), ;, setDelimiterMatcher, (]
[public, StrTokenizer, (, final, char, [, ], input, ,, final, char, delim, ,, final, char, quote, ), {, this, (]
[(, final, char, [, ], input, ,, final, char, delim, ,, final, char, quote, ), {, this, (, input, ,]
[[, ], input, ,, final, char, delim, ,, final, char, quote, ), {, this, (, input, ,, delim, ), ;]
[input, ,, final, char, delim, ,, final, char, quote, ), {, this, (, input, ,, delim, ), ;, setQuoteChar, (]
[public, StrTokenizer, (, final, char, [, ], input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, ), {, this, (]
[(, final, char, [, ], input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, ), {, this, (, input, ,]
[[, ], input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, ), {, this, (, input, ,, delim, ), ;]
[input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, ), {, this, (, input, ,, delim, ), ;, setQuoteMatcher, (]
[{, this, (, input, ,, delim, ), ;, setQuoteMatcher, (, quote, ), ;, }, public, int, size, (, ), {]
[delim, ), ;, setQuoteMatcher, (, quote, ), ;, }, public, int, size, (, ), {, checkTokenized, (, ), ;, return]
[delim, ), ;, setQuoteMatcher, (, quote, ), ;, }, public, int, size, (, ), {, checkTokenized, (, ), ;, return]
[), {, checkTokenized, (, ), ;, return, tokens, ., length, ;, }, public, String, nextToken, (, ), {, if, (]
[return, tokens, ., length, ;, }, public, String, nextToken, (, ), {, if, (, hasNext, (, ), ), {, return]
[return, tokens, ., length, ;, }, public, String, nextToken, (, ), {, if, (, hasNext, (, ), ), {, return]
[., length, ;, }, public, String, nextToken, (, ), {, if, (, hasNext, (, ), ), {, return, tokens, []
[., length, ;, }, public, String, nextToken, (, ), {, if, (, hasNext, (, ), ), {, return, tokens, []
[nextToken, (, ), {, if, (, hasNext, (, ), ), {, return, tokens, [, tokenPos, ++, ], ;, }, return]
[return, tokens, [, tokenPos, ++, ], ;, }, return, null, ;, }, public, String, previousToken, (, ), {, if, (]
[;, }, return, null, ;, }, public, String, previousToken, (, ), {, if, (, hasPrevious, (, ), ), {, return]
[;, }, return, null, ;, }, public, String, previousToken, (, ), {, if, (, hasPrevious, (, ), ), {, return]
[return, null, ;, }, public, String, previousToken, (, ), {, if, (, hasPrevious, (, ), ), {, return, tokens, []
[null, ;, }, public, String, previousToken, (, ), {, if, (, hasPrevious, (, ), ), {, return, tokens, [, --]
[previousToken, (, ), {, if, (, hasPrevious, (, ), ), {, return, tokens, [, --, tokenPos, ], ;, }, return]
[return, tokens, [, --, tokenPos, ], ;, }, return, null, ;, }, public, String, [, ], getTokenArray, (, ), {]
[], ;, }, return, null, ;, }, public, String, [, ], getTokenArray, (, ), {, checkTokenized, (, ), ;, return]
[], ;, }, return, null, ;, }, public, String, [, ], getTokenArray, (, ), {, checkTokenized, (, ), ;, return]
[(, ), ;, return, tokens, ., clone, (, ), ;, }, public, List, <, String, >, getTokenList, (, ), {]
[public, List, <, String, >, getTokenList, (, ), {, checkTokenized, (, ), ;, final, List, <, String, >, list, =]
[(, ), {, checkTokenized, (, ), ;, final, List, <, String, >, list, =, new, ArrayList, <, String, >, (]
[(, ), {, checkTokenized, (, ), ;, final, List, <, String, >, list, =, new, ArrayList, <, String, >, (]
[>, list, =, new, ArrayList, <, String, >, (, tokens, ., length, ), ;, for, (, final, String, element, :]
[new, ArrayList, <, String, >, (, tokens, ., length, ), ;, for, (, final, String, element, :, tokens, ), {]
[new, ArrayList, <, String, >, (, tokens, ., length, ), ;, for, (, final, String, element, :, tokens, ), {]
[>, (, tokens, ., length, ), ;, for, (, final, String, element, :, tokens, ), {, list, ., add, (]
[), ;, for, (, final, String, element, :, tokens, ), {, list, ., add, (, element, ), ;, }, return]
[), {, list, ., add, (, element, ), ;, }, return, list, ;, }, public, StrTokenizer, reset, (, ), {]
[list, ., add, (, element, ), ;, }, return, list, ;, }, public, StrTokenizer, reset, (, ), {, tokenPos, =]
[add, (, element, ), ;, }, return, list, ;, }, public, StrTokenizer, reset, (, ), {, tokenPos, =, 0, ;]
[element, ), ;, }, return, list, ;, }, public, StrTokenizer, reset, (, ), {, tokenPos, =, 0, ;, tokens, =]
[}, return, list, ;, }, public, StrTokenizer, reset, (, ), {, tokenPos, =, 0, ;, tokens, =, null, ;, return]
[=, 0, ;, tokens, =, null, ;, return, this, ;, }, public, StrTokenizer, reset, (, final, String, input, ), {]
[;, return, this, ;, }, public, StrTokenizer, reset, (, final, String, input, ), {, reset, (, ), ;, if, (]
[;, return, this, ;, }, public, StrTokenizer, reset, (, final, String, input, ), {, reset, (, ), ;, if, (]
[this, ;, }, public, StrTokenizer, reset, (, final, String, input, ), {, reset, (, ), ;, if, (, input, !=]
[public, StrTokenizer, reset, (, final, String, input, ), {, reset, (, ), ;, if, (, input, !=, null, ), {]
[public, StrTokenizer, reset, (, final, String, input, ), {, reset, (, ), ;, if, (, input, !=, null, ), {]
[final, String, input, ), {, reset, (, ), ;, if, (, input, !=, null, ), {, this, ., chars, =]
[final, String, input, ), {, reset, (, ), ;, if, (, input, !=, null, ), {, this, ., chars, =]
[if, (, input, !=, null, ), {, this, ., chars, =, input, ., toCharArray, (, ), ;, }, else, {]
[if, (, input, !=, null, ), {, this, ., chars, =, input, ., toCharArray, (, ), ;, }, else, {]
[null, ), {, this, ., chars, =, input, ., toCharArray, (, ), ;, }, else, {, this, ., chars, =]
[., chars, =, input, ., toCharArray, (, ), ;, }, else, {, this, ., chars, =, null, ;, }, return]
[chars, =, null, ;, }, return, this, ;, }, public, StrTokenizer, reset, (, final, char, [, ], input, ), {]
[}, return, this, ;, }, public, StrTokenizer, reset, (, final, char, [, ], input, ), {, reset, (, ), ;]
[}, return, this, ;, }, public, StrTokenizer, reset, (, final, char, [, ], input, ), {, reset, (, ), ;]
[}, public, StrTokenizer, reset, (, final, char, [, ], input, ), {, reset, (, ), ;, this, ., chars, =]
[}, public, StrTokenizer, reset, (, final, char, [, ], input, ), {, reset, (, ), ;, this, ., chars, =]
[(, final, char, [, ], input, ), {, reset, (, ), ;, this, ., chars, =, ArrayUtils, ., clone, (]
[], input, ), {, reset, (, ), ;, this, ., chars, =, ArrayUtils, ., clone, (, input, ), ;, return]
[=, ArrayUtils, ., clone, (, input, ), ;, return, this, ;, }, @, Override, public, boolean, hasNext, (, ), {]
[input, ), ;, return, this, ;, }, @, Override, public, boolean, hasNext, (, ), {, checkTokenized, (, ), ;, return]
[input, ), ;, return, this, ;, }, @, Override, public, boolean, hasNext, (, ), {, checkTokenized, (, ), ;, return]
[;, return, this, ;, }, @, Override, public, boolean, hasNext, (, ), {, checkTokenized, (, ), ;, return, tokenPos, <]
[;, return, this, ;, }, @, Override, public, boolean, hasNext, (, ), {, checkTokenized, (, ), ;, return, tokenPos, <]
[), ;, return, tokenPos, <, tokens, ., length, ;, }, @, Override, public, String, next, (, ), {, if, (]
[., length, ;, }, @, Override, public, String, next, (, ), {, if, (, hasNext, (, ), ), {, return]
[., length, ;, }, @, Override, public, String, next, (, ), {, if, (, hasNext, (, ), ), {, return]
[;, }, @, Override, public, String, next, (, ), {, if, (, hasNext, (, ), ), {, return, tokens, []
[;, }, @, Override, public, String, next, (, ), {, if, (, hasNext, (, ), ), {, return, tokens, []
[next, (, ), {, if, (, hasNext, (, ), ), {, return, tokens, [, tokenPos, ++, ], ;, }, throw]
[++, ], ;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, nextIndex, (, ), {, return]
[@, Override, public, int, nextIndex, (, ), {, return, tokenPos, ;, }, @, Override, public, boolean, hasPrevious, (, ), {]
[(, ), {, return, tokenPos, ;, }, @, Override, public, boolean, hasPrevious, (, ), {, checkTokenized, (, ), ;, return]
[(, ), {, return, tokenPos, ;, }, @, Override, public, boolean, hasPrevious, (, ), {, checkTokenized, (, ), ;, return]
[{, return, tokenPos, ;, }, @, Override, public, boolean, hasPrevious, (, ), {, checkTokenized, (, ), ;, return, tokenPos, >]
[checkTokenized, (, ), ;, return, tokenPos, >, 0, ;, }, @, Override, public, String, previous, (, ), {, if, (]
[>, 0, ;, }, @, Override, public, String, previous, (, ), {, if, (, hasPrevious, (, ), ), {, return]
[>, 0, ;, }, @, Override, public, String, previous, (, ), {, if, (, hasPrevious, (, ), ), {, return]
[;, }, @, Override, public, String, previous, (, ), {, if, (, hasPrevious, (, ), ), {, return, tokens, []
[}, @, Override, public, String, previous, (, ), {, if, (, hasPrevious, (, ), ), {, return, tokens, [, --]
[previous, (, ), {, if, (, hasPrevious, (, ), ), {, return, tokens, [, --, tokenPos, ], ;, }, throw]
[tokenPos, ], ;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, previousIndex, (, ), {, return]
[tokenPos, ], ;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, previousIndex, (, ), {, return]
[;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, previousIndex, (, ), {, return, tokenPos, -]
[int, previousIndex, (, ), {, return, tokenPos, -, 1, ;, }, @, Override, public, void, remove, (, ), {, throw]
[), {, return, tokenPos, -, 1, ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (]
[throw, new, UnsupportedOperationException, (, "remove() is unsupported", ), ;, }, @, Override, public, void, set, (, final, String, obj, ), {, throw]
[(, "remove() is unsupported", ), ;, }, @, Override, public, void, set, (, final, String, obj, ), {, throw, new, UnsupportedOperationException, (]
[throw, new, UnsupportedOperationException, (, "set() is unsupported", ), ;, }, @, Override, public, void, add, (, final, String, obj, ), {, throw]
[(, "set() is unsupported", ), ;, }, @, Override, public, void, add, (, final, String, obj, ), {, throw, new, UnsupportedOperationException, (]
[String, obj, ), {, throw, new, UnsupportedOperationException, (, "add() is unsupported", ), ;, }, private, void, checkTokenized, (, ), {, if, (]
[String, obj, ), {, throw, new, UnsupportedOperationException, (, "add() is unsupported", ), ;, }, private, void, checkTokenized, (, ), {, if, (]
[), {, throw, new, UnsupportedOperationException, (, "add() is unsupported", ), ;, }, private, void, checkTokenized, (, ), {, if, (, tokens, ==]
[(, "add() is unsupported", ), ;, }, private, void, checkTokenized, (, ), {, if, (, tokens, ==, null, ), {, if, (]
[(, "add() is unsupported", ), ;, }, private, void, checkTokenized, (, ), {, if, (, tokens, ==, null, ), {, if, (]
[), ;, }, private, void, checkTokenized, (, ), {, if, (, tokens, ==, null, ), {, if, (, chars, ==]
[(, tokens, ==, null, ), {, if, (, chars, ==, null, ), {, final, List, <, String, >, split, =]
[==, null, ), {, if, (, chars, ==, null, ), {, final, List, <, String, >, split, =, tokenize, (]
[), {, if, (, chars, ==, null, ), {, final, List, <, String, >, split, =, tokenize, (, null, ,]
[if, (, chars, ==, null, ), {, final, List, <, String, >, split, =, tokenize, (, null, ,, 0, ,]
[==, null, ), {, final, List, <, String, >, split, =, tokenize, (, null, ,, 0, ,, 0, ), ;]
[), {, final, List, <, String, >, split, =, tokenize, (, null, ,, 0, ,, 0, ), ;, tokens, =]
[), {, final, List, <, String, >, split, =, tokenize, (, null, ,, 0, ,, 0, ), ;, tokens, =]
[<, String, >, split, =, tokenize, (, null, ,, 0, ,, 0, ), ;, tokens, =, split, ., toArray, (]
[split, =, tokenize, (, null, ,, 0, ,, 0, ), ;, tokens, =, split, ., toArray, (, new, String, []
[split, =, tokenize, (, null, ,, 0, ,, 0, ), ;, tokens, =, split, ., toArray, (, new, String, []
[String, [, split, ., size, (, ), ], ), ;, }, else, {, final, List, <, String, >, split, =]
[split, ., size, (, ), ], ), ;, }, else, {, final, List, <, String, >, split, =, tokenize, (]
[size, (, ), ], ), ;, }, else, {, final, List, <, String, >, split, =, tokenize, (, chars, ,]
[), ], ), ;, }, else, {, final, List, <, String, >, split, =, tokenize, (, chars, ,, 0, ,]
[), ], ), ;, }, else, {, final, List, <, String, >, split, =, tokenize, (, chars, ,, 0, ,]
[else, {, final, List, <, String, >, split, =, tokenize, (, chars, ,, 0, ,, chars, ., length, ), ;]
[final, List, <, String, >, split, =, tokenize, (, chars, ,, 0, ,, chars, ., length, ), ;, tokens, =]
[final, List, <, String, >, split, =, tokenize, (, chars, ,, 0, ,, chars, ., length, ), ;, tokens, =]
[>, split, =, tokenize, (, chars, ,, 0, ,, chars, ., length, ), ;, tokens, =, split, ., toArray, (]
[tokenize, (, chars, ,, 0, ,, chars, ., length, ), ;, tokens, =, split, ., toArray, (, new, String, []
[tokenize, (, chars, ,, 0, ,, chars, ., length, ), ;, tokens, =, split, ., toArray, (, new, String, []
[>, tokenize, (, final, char, [, ], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (]
[>, tokenize, (, final, char, [, ], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (]
[>, tokenize, (, final, char, [, ], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (]
[(, final, char, [, ], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (, chars, ==]
[char, [, ], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (, chars, ==, null, ||]
[char, [, ], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (, chars, ==, null, ||]
[], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (, chars, ==, null, ||, count, ==]
[int, offset, ,, final, int, count, ), {, if, (, chars, ==, null, ||, count, ==, 0, ), {, return]
[int, offset, ,, final, int, count, ), {, if, (, chars, ==, null, ||, count, ==, 0, ), {, return]
[==, null, ||, count, ==, 0, ), {, return, Collections, ., emptyList, (, ), ;, }, final, StrBuilder, buf, =]
[(, ), ;, }, final, StrBuilder, buf, =, new, StrBuilder, (, ), ;, final, List, <, String, >, tokens, =]
[), ;, final, List, <, String, >, tokens, =, new, ArrayList, <, String, >, (, ), ;, int, pos, =]
[<, String, >, tokens, =, new, ArrayList, <, String, >, (, ), ;, int, pos, =, offset, ;, while, (]
[<, String, >, tokens, =, new, ArrayList, <, String, >, (, ), ;, int, pos, =, offset, ;, while, (]
[<, String, >, tokens, =, new, ArrayList, <, String, >, (, ), ;, int, pos, =, offset, ;, while, (]
[>, tokens, =, new, ArrayList, <, String, >, (, ), ;, int, pos, =, offset, ;, while, (, pos, >=]
[=, new, ArrayList, <, String, >, (, ), ;, int, pos, =, offset, ;, while, (, pos, >=, 0, &&]
[=, new, ArrayList, <, String, >, (, ), ;, int, pos, =, offset, ;, while, (, pos, >=, 0, &&]
[ArrayList, <, String, >, (, ), ;, int, pos, =, offset, ;, while, (, pos, >=, 0, &&, pos, <]
[>, (, ), ;, int, pos, =, offset, ;, while, (, pos, >=, 0, &&, pos, <, count, ), {]
[), ;, int, pos, =, offset, ;, while, (, pos, >=, 0, &&, pos, <, count, ), {, pos, =]
[int, pos, =, offset, ;, while, (, pos, >=, 0, &&, pos, <, count, ), {, pos, =, readNextToken, (]
[=, offset, ;, while, (, pos, >=, 0, &&, pos, <, count, ), {, pos, =, readNextToken, (, chars, ,]
[;, while, (, pos, >=, 0, &&, pos, <, count, ), {, pos, =, readNextToken, (, chars, ,, pos, ,]
[(, pos, >=, 0, &&, pos, <, count, ), {, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,]
[>=, 0, &&, pos, <, count, ), {, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,]
[count, ), {, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,, tokens, ), ;, if, (]
[count, ), {, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,, tokens, ), ;, if, (]
[{, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,, tokens, ), ;, if, (, pos, >=]
[readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,, tokens, ), ;, if, (, pos, >=, count, ), {]
[chars, ,, pos, ,, count, ,, buf, ,, tokens, ), ;, if, (, pos, >=, count, ), {, addToken, (]
[pos, ,, count, ,, buf, ,, tokens, ), ;, if, (, pos, >=, count, ), {, addToken, (, tokens, ,]
[tokens, ), ;, if, (, pos, >=, count, ), {, addToken, (, tokens, ,, "", ), ;, }, }, return]
[tokens, ;, }, private, void, addToken, (, final, List, <, String, >, list, ,, String, tok, ), {, if, (]
[tokens, ;, }, private, void, addToken, (, final, List, <, String, >, list, ,, String, tok, ), {, if, (]
[void, addToken, (, final, List, <, String, >, list, ,, String, tok, ), {, if, (, StringUtils, ., isEmpty, (]
[String, >, list, ,, String, tok, ), {, if, (, StringUtils, ., isEmpty, (, tok, ), ), {, if, (]
[StringUtils, ., isEmpty, (, tok, ), ), {, if, (, isIgnoreEmptyTokens, (, ), ), {, return, ;, }, if, (]
[), ), {, if, (, isIgnoreEmptyTokens, (, ), ), {, return, ;, }, if, (, isEmptyTokenAsNull, (, ), ), {]
[{, if, (, isIgnoreEmptyTokens, (, ), ), {, return, ;, }, if, (, isEmptyTokenAsNull, (, ), ), {, tok, =]
[(, ), ), {, return, ;, }, if, (, isEmptyTokenAsNull, (, ), ), {, tok, =, null, ;, }, }]
[(, ), ), {, return, ;, }, if, (, isEmptyTokenAsNull, (, ), ), {, tok, =, null, ;, }, }]
[return, ;, }, if, (, isEmptyTokenAsNull, (, ), ), {, tok, =, null, ;, }, }, list, ., add, (]
[start, ,, final, int, len, ,, final, StrBuilder, workArea, ,, final, List, <, String, >, tokens, ), {, while, (]
[start, ,, final, int, len, ,, final, StrBuilder, workArea, ,, final, List, <, String, >, tokens, ), {, while, (]
[final, int, len, ,, final, StrBuilder, workArea, ,, final, List, <, String, >, tokens, ), {, while, (, start, <]
[,, final, List, <, String, >, tokens, ), {, while, (, start, <, len, ), {, final, int, removeLen, =]
[,, final, List, <, String, >, tokens, ), {, while, (, start, <, len, ), {, final, int, removeLen, =]
[String, >, tokens, ), {, while, (, start, <, len, ), {, final, int, removeLen, =, Math, ., max, (]
[String, >, tokens, ), {, while, (, start, <, len, ), {, final, int, removeLen, =, Math, ., max, (]
[(, start, <, len, ), {, final, int, removeLen, =, Math, ., max, (, getIgnoredMatcher, (, ), ., isMatch, (]
[<, len, ), {, final, int, removeLen, =, Math, ., max, (, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,]
[), {, final, int, removeLen, =, Math, ., max, (, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, start, ,]
[final, int, removeLen, =, Math, ., max, (, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,]
[=, Math, ., max, (, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ,]
[=, Math, ., max, (, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ,]
[(, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ,, getTrimmerMatcher, (, ), ., isMatch, (]
[., isMatch, (, chars, ,, start, ,, start, ,, len, ), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,]
[(, chars, ,, start, ,, start, ,, len, ), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,]
[,, start, ,, start, ,, len, ), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,]
[), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;, if, (]
[), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;, if, (]
[), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;, if, (]
[), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;, if, (]
[getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;, if, (, removeLen, ==]
[), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;, if, (, removeLen, ==, 0, ||]
[), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;, if, (, removeLen, ==, 0, ||]
[), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;, if, (, removeLen, ==, 0, ||]
[start, ,, start, ,, len, ), ), ;, if, (, removeLen, ==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (]
[start, ,, len, ), ), ;, if, (, removeLen, ==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,]
[len, ), ), ;, if, (, removeLen, ==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,]
[), ;, if, (, removeLen, ==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,]
[(, removeLen, ==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >]
[==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ||]
[==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ||]
[==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ||]
[., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ||, getQuoteMatcher, (, ), ., isMatch, (]
[(, chars, ,, start, ,, start, ,, len, ), >, 0, ||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,]
[,, start, ,, start, ,, len, ), >, 0, ||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,]
[,, start, ,, len, ), >, 0, ||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,]
[len, ), >, 0, ||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >]
[(, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ), {, break, ;, }]
[., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ), {, break, ;, }, start, +=]
[start, ,, start, ,, len, ), >, 0, ), {, break, ;, }, start, +=, removeLen, ;, }, if, (]
[start, ,, start, ,, len, ), >, 0, ), {, break, ;, }, start, +=, removeLen, ;, }, if, (]
[start, ,, len, ), >, 0, ), {, break, ;, }, start, +=, removeLen, ;, }, if, (, start, >=]
[), >, 0, ), {, break, ;, }, start, +=, removeLen, ;, }, if, (, start, >=, len, ), {]
[0, ), {, break, ;, }, start, +=, removeLen, ;, }, if, (, start, >=, len, ), {, addToken, (]
[{, break, ;, }, start, +=, removeLen, ;, }, if, (, start, >=, len, ), {, addToken, (, tokens, ,]
[start, +=, removeLen, ;, }, if, (, start, >=, len, ), {, addToken, (, tokens, ,, "", ), ;, return]
[+=, removeLen, ;, }, if, (, start, >=, len, ), {, addToken, (, tokens, ,, "", ), ;, return, -]
[>=, len, ), {, addToken, (, tokens, ,, "", ), ;, return, -, 1, ;, }, final, int, delimLen, =]
[>=, len, ), {, addToken, (, tokens, ,, "", ), ;, return, -, 1, ;, }, final, int, delimLen, =]
[tokens, ,, "", ), ;, return, -, 1, ;, }, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (]
["", ), ;, return, -, 1, ;, }, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,]
[;, return, -, 1, ;, }, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,]
[-, 1, ;, }, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,]
[int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ;, if, (]
[int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ;, if, (]
[=, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ;, if, (, delimLen, >]
[), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {]
[isMatch, (, chars, ,, start, ,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (]
[chars, ,, start, ,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,]
[start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, "", ), ;, return]
[start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, "", ), ;, return]
[len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, "", ), ;, return, start, +]
[0, ), {, addToken, (, tokens, ,, "", ), ;, return, start, +, delimLen, ;, }, final, int, quoteLen, =]
[0, ), {, addToken, (, tokens, ,, "", ), ;, return, start, +, delimLen, ;, }, final, int, quoteLen, =]
[,, "", ), ;, return, start, +, delimLen, ;, }, final, int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (]
[), ;, return, start, +, delimLen, ;, }, final, int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (, chars, ,]
[return, start, +, delimLen, ;, }, final, int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,]
[+, delimLen, ;, }, final, int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,]
[int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ;, if, (]
[int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ;, if, (]
[=, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ;, if, (, quoteLen, >]
[., isMatch, (, chars, ,, start, ,, start, ,, len, ), ;, if, (, quoteLen, >, 0, ), {, return]
[(, chars, ,, start, ,, start, ,, len, ), ;, if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (]
[,, start, ,, start, ,, len, ), ;, if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,]
[,, start, ,, start, ,, len, ), ;, if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,]
[,, start, ,, len, ), ;, if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,, start, +]
[,, len, ), ;, if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,, start, +, quoteLen, ,]
[), ;, if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,, start, +, quoteLen, ,, len, ,]
[if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,, start, +, quoteLen, ,, len, ,, workArea, ,]
[quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,, start, +, quoteLen, ,, len, ,, workArea, ,, tokens, ,]
[0, ), {, return, readWithQuotes, (, chars, ,, start, +, quoteLen, ,, len, ,, workArea, ,, tokens, ,, start, ,]
[(, chars, ,, start, +, quoteLen, ,, len, ,, workArea, ,, tokens, ,, start, ,, quoteLen, ), ;, }, return]
[,, start, +, quoteLen, ,, len, ,, workArea, ,, tokens, ,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (]
[+, quoteLen, ,, len, ,, workArea, ,, tokens, ,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,]
[,, len, ,, workArea, ,, tokens, ,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,, start, ,]
[,, workArea, ,, tokens, ,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,, start, ,, len, ,]
[,, tokens, ,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,, start, ,, len, ,, workArea, ,]
[,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,, start, ,, len, ,, workArea, ,, tokens, ,]
[,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,, start, ,, len, ,, workArea, ,, tokens, ,, 0, ,]
[final, StrBuilder, workArea, ,, final, List, <, String, >, tokens, ,, final, int, quoteStart, ,, final, int, quoteLen, ), {]
[final, StrBuilder, workArea, ,, final, List, <, String, >, tokens, ,, final, int, quoteStart, ,, final, int, quoteLen, ), {]
[tokens, ,, final, int, quoteStart, ,, final, int, quoteLen, ), {, workArea, ., clear, (, ), ;, int, pos, =]
[,, final, int, quoteLen, ), {, workArea, ., clear, (, ), ;, int, pos, =, start, ;, boolean, quoting, =]
[,, final, int, quoteLen, ), {, workArea, ., clear, (, ), ;, int, pos, =, start, ;, boolean, quoting, =]
[int, quoteLen, ), {, workArea, ., clear, (, ), ;, int, pos, =, start, ;, boolean, quoting, =, quoteLen, >]
[., clear, (, ), ;, int, pos, =, start, ;, boolean, quoting, =, quoteLen, >, 0, ;, int, trimStart, =]
[;, int, pos, =, start, ;, boolean, quoting, =, quoteLen, >, 0, ;, int, trimStart, =, 0, ;, while, (]
[;, int, pos, =, start, ;, boolean, quoting, =, quoteLen, >, 0, ;, int, trimStart, =, 0, ;, while, (]
[pos, =, start, ;, boolean, quoting, =, quoteLen, >, 0, ;, int, trimStart, =, 0, ;, while, (, pos, <]
[quoting, =, quoteLen, >, 0, ;, int, trimStart, =, 0, ;, while, (, pos, <, len, ), {, if, (]
[;, int, trimStart, =, 0, ;, while, (, pos, <, len, ), {, if, (, quoting, ), {, if, (]
[trimStart, =, 0, ;, while, (, pos, <, len, ), {, if, (, quoting, ), {, if, (, isQuote, (]
[0, ;, while, (, pos, <, len, ), {, if, (, quoting, ), {, if, (, isQuote, (, chars, ,]
[while, (, pos, <, len, ), {, if, (, quoting, ), {, if, (, isQuote, (, chars, ,, pos, ,]
[pos, <, len, ), {, if, (, quoting, ), {, if, (, isQuote, (, chars, ,, pos, ,, len, ,]
[len, ), {, if, (, quoting, ), {, if, (, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,]
[), {, if, (, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, if, (]
[if, (, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, if, (, isQuote, (]
[isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, if, (, isQuote, (, chars, ,]
[isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, if, (, isQuote, (, chars, ,]
[chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, if, (, isQuote, (, chars, ,, pos, +]
[pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, if, (, isQuote, (, chars, ,, pos, +, quoteLen, ,]
[len, ,, quoteStart, ,, quoteLen, ), ), {, if, (, isQuote, (, chars, ,, pos, +, quoteLen, ,, len, ,]
[quoteStart, ,, quoteLen, ), ), {, if, (, isQuote, (, chars, ,, pos, +, quoteLen, ,, len, ,, quoteStart, ,]
[), {, if, (, isQuote, (, chars, ,, pos, +, quoteLen, ,, len, ,, quoteStart, ,, quoteLen, ), ), {]
[), {, if, (, isQuote, (, chars, ,, pos, +, quoteLen, ,, len, ,, quoteStart, ,, quoteLen, ), ), {]
[isQuote, (, chars, ,, pos, +, quoteLen, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, workArea, ., append, (]
[chars, ,, pos, +, quoteLen, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, workArea, ., append, (, chars, ,]
[pos, +, quoteLen, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, workArea, ., append, (, chars, ,, pos, ,]
[,, len, ,, quoteStart, ,, quoteLen, ), ), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;]
[,, quoteStart, ,, quoteLen, ), ), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;, pos, +=]
[,, quoteStart, ,, quoteLen, ), ), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;, pos, +=]
[,, quoteLen, ), ), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;, pos, +=, quoteLen, *]
[), ), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;, pos, +=, quoteLen, *, 2, ;]
[{, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;, pos, +=, quoteLen, *, 2, ;, trimStart, =]
[{, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;, pos, +=, quoteLen, *, 2, ;, trimStart, =]
[quoteLen, ), ;, pos, +=, quoteLen, *, 2, ;, trimStart, =, workArea, ., size, (, ), ;, continue, ;, }]
[;, pos, +=, quoteLen, *, 2, ;, trimStart, =, workArea, ., size, (, ), ;, continue, ;, }, quoting, =]
[+=, quoteLen, *, 2, ;, trimStart, =, workArea, ., size, (, ), ;, continue, ;, }, quoting, =, false, ;]
[*, 2, ;, trimStart, =, workArea, ., size, (, ), ;, continue, ;, }, quoting, =, false, ;, pos, +=]
[workArea, ., size, (, ), ;, continue, ;, }, quoting, =, false, ;, pos, +=, quoteLen, ;, continue, ;, }]
[workArea, ., size, (, ), ;, continue, ;, }, quoting, =, false, ;, pos, +=, quoteLen, ;, continue, ;, }]
[), ;, continue, ;, }, quoting, =, false, ;, pos, +=, quoteLen, ;, continue, ;, }, workArea, ., append, (]
[), ;, continue, ;, }, quoting, =, false, ;, pos, +=, quoteLen, ;, continue, ;, }, workArea, ., append, (]
[continue, ;, }, quoting, =, false, ;, pos, +=, quoteLen, ;, continue, ;, }, workArea, ., append, (, chars, []
[continue, ;, }, quoting, =, false, ;, pos, +=, quoteLen, ;, continue, ;, }, workArea, ., append, (, chars, []
[false, ;, pos, +=, quoteLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;]
[pos, +=, quoteLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;, trimStart, =]
[pos, +=, quoteLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;, trimStart, =]
[pos, ++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, else, {, final, int, delimLen, =]
[pos, ++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, else, {, final, int, delimLen, =]
[=, workArea, ., size, (, ), ;, }, else, {, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (]
[., size, (, ), ;, }, else, {, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,]
[(, ), ;, }, else, {, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, pos, ,]
[;, }, else, {, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,]
[int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (]
[int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (]
[=, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, delimLen, >]
[), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {]
[isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (]
[chars, ,, pos, ,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,]
[chars, ,, pos, ,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,]
[start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, workArea, ., substring, (]
[len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,]
[delimLen, >, 0, ), {, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return]
[delimLen, >, 0, ), {, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return]
[0, ), {, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, pos, +]
[tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, pos, +, delimLen, ;, }, if, (]
[tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, pos, +, delimLen, ;, }, if, (]
[tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, pos, +, delimLen, ;, }, if, (]
[workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, pos, +, delimLen, ;, }, if, (, quoteLen, >]
[substring, (, 0, ,, trimStart, ), ), ;, return, pos, +, delimLen, ;, }, if, (, quoteLen, >, 0, &&]
[0, ,, trimStart, ), ), ;, return, pos, +, delimLen, ;, }, if, (, quoteLen, >, 0, &&, isQuote, (]
[trimStart, ), ), ;, return, pos, +, delimLen, ;, }, if, (, quoteLen, >, 0, &&, isQuote, (, chars, ,]
[), ;, return, pos, +, delimLen, ;, }, if, (, quoteLen, >, 0, &&, isQuote, (, chars, ,, pos, ,]
[return, pos, +, delimLen, ;, }, if, (, quoteLen, >, 0, &&, isQuote, (, chars, ,, pos, ,, len, ,]
[+, delimLen, ;, }, if, (, quoteLen, >, 0, &&, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,]
[if, (, quoteLen, >, 0, &&, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {]
[quoteLen, >, 0, &&, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, quoting, =]
[0, &&, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, quoting, =, true, ;]
[isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, quoting, =, true, ;, pos, +=]
[,, quoteLen, ), ), {, quoting, =, true, ;, pos, +=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =]
[,, quoteLen, ), ), {, quoting, =, true, ;, pos, +=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =]
[=, true, ;, pos, +=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =, getIgnoredMatcher, (, ), ., isMatch, (]
[;, pos, +=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,]
[+=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, pos, ,]
[;, continue, ;, }, final, int, ignoredLen, =, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,]
[int, ignoredLen, =, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (]
[int, ignoredLen, =, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (]
[=, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, ignoredLen, >]
[), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, ignoredLen, >, 0, ), {]
[isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, ignoredLen, >, 0, ), {, pos, +=]
[), ;, if, (, ignoredLen, >, 0, ), {, pos, +=, ignoredLen, ;, continue, ;, }, final, int, trimmedLen, =]
[), ;, if, (, ignoredLen, >, 0, ), {, pos, +=, ignoredLen, ;, continue, ;, }, final, int, trimmedLen, =]
[0, ), {, pos, +=, ignoredLen, ;, continue, ;, }, final, int, trimmedLen, =, getTrimmerMatcher, (, ), ., isMatch, (]
[{, pos, +=, ignoredLen, ;, continue, ;, }, final, int, trimmedLen, =, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,]
[+=, ignoredLen, ;, continue, ;, }, final, int, trimmedLen, =, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, pos, ,]
[;, continue, ;, }, final, int, trimmedLen, =, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,]
[int, trimmedLen, =, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (]
[int, trimmedLen, =, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (]
[=, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, trimmedLen, >]
[), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, trimmedLen, >, 0, ), {]
[), ., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, trimmedLen, >, 0, ), {]
[chars, ,, pos, ,, start, ,, len, ), ;, if, (, trimmedLen, >, 0, ), {, workArea, ., append, (]
[pos, ,, start, ,, len, ), ;, if, (, trimmedLen, >, 0, ), {, workArea, ., append, (, chars, ,]
[start, ,, len, ), ;, if, (, trimmedLen, >, 0, ), {, workArea, ., append, (, chars, ,, pos, ,]
[), ;, if, (, trimmedLen, >, 0, ), {, workArea, ., append, (, chars, ,, pos, ,, trimmedLen, ), ;]
[if, (, trimmedLen, >, 0, ), {, workArea, ., append, (, chars, ,, pos, ,, trimmedLen, ), ;, pos, +=]
[), {, workArea, ., append, (, chars, ,, pos, ,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue, ;, }]
[), {, workArea, ., append, (, chars, ,, pos, ,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue, ;, }]
[append, (, chars, ,, pos, ,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append, (]
[append, (, chars, ,, pos, ,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append, (]
[chars, ,, pos, ,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append, (, chars, []
[chars, ,, pos, ,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append, (, chars, []
[), ;, pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;]
[pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;, trimStart, =]
[pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;, trimStart, =]
[., append, (, chars, [, pos, ++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, }]
[(, chars, [, pos, ++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, }, addToken, (]
[[, pos, ++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, }, addToken, (, tokens, ,]
[[, pos, ++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, }, addToken, (, tokens, ,]
[), ;, trimStart, =, workArea, ., size, (, ), ;, }, }, addToken, (, tokens, ,, workArea, ., substring, (]
[trimStart, =, workArea, ., size, (, ), ;, }, }, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,]
[(, ), ;, }, }, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return]
[), ;, }, }, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, -]
[pos, ,, final, int, len, ,, final, int, quoteStart, ,, final, int, quoteLen, ), {, for, (, int, i, =]
[final, int, len, ,, final, int, quoteStart, ,, final, int, quoteLen, ), {, for, (, int, i, =, 0, ;]
[final, int, len, ,, final, int, quoteStart, ,, final, int, quoteLen, ), {, for, (, int, i, =, 0, ;]
[len, ,, final, int, quoteStart, ,, final, int, quoteLen, ), {, for, (, int, i, =, 0, ;, i, <]
[final, int, quoteStart, ,, final, int, quoteLen, ), {, for, (, int, i, =, 0, ;, i, <, quoteLen, ;]
[final, int, quoteStart, ,, final, int, quoteLen, ), {, for, (, int, i, =, 0, ;, i, <, quoteLen, ;]
[quoteLen, ), {, for, (, int, i, =, 0, ;, i, <, quoteLen, ;, i, ++, ), {, if, (]
[quoteLen, ), {, for, (, int, i, =, 0, ;, i, <, quoteLen, ;, i, ++, ), {, if, (]
[quoteLen, ), {, for, (, int, i, =, 0, ;, i, <, quoteLen, ;, i, ++, ), {, if, (]
[quoteLen, ), {, for, (, int, i, =, 0, ;, i, <, quoteLen, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, quoteLen, ;, i, ++, ), {, if, (, pos, +]
[(, int, i, =, 0, ;, i, <, quoteLen, ;, i, ++, ), {, if, (, pos, +, i, >=]
[i, =, 0, ;, i, <, quoteLen, ;, i, ++, ), {, if, (, pos, +, i, >=, len, ||]
[i, =, 0, ;, i, <, quoteLen, ;, i, ++, ), {, if, (, pos, +, i, >=, len, ||]
[i, =, 0, ;, i, <, quoteLen, ;, i, ++, ), {, if, (, pos, +, i, >=, len, ||]
[0, ;, i, <, quoteLen, ;, i, ++, ), {, if, (, pos, +, i, >=, len, ||, chars, []
[0, ;, i, <, quoteLen, ;, i, ++, ), {, if, (, pos, +, i, >=, len, ||, chars, []
[i, <, quoteLen, ;, i, ++, ), {, if, (, pos, +, i, >=, len, ||, chars, [, pos, +]
[;, i, ++, ), {, if, (, pos, +, i, >=, len, ||, chars, [, pos, +, i, ], !=]
[;, i, ++, ), {, if, (, pos, +, i, >=, len, ||, chars, [, pos, +, i, ], !=]
[++, ), {, if, (, pos, +, i, >=, len, ||, chars, [, pos, +, i, ], !=, chars, []
[++, ), {, if, (, pos, +, i, >=, len, ||, chars, [, pos, +, i, ], !=, chars, []
[{, if, (, pos, +, i, >=, len, ||, chars, [, pos, +, i, ], !=, chars, [, quoteStart, +]
[i, >=, len, ||, chars, [, pos, +, i, ], !=, chars, [, quoteStart, +, i, ], ), {, return]
[[, pos, +, i, ], !=, chars, [, quoteStart, +, i, ], ), {, return, false, ;, }, }, return]
[i, ], ), {, return, false, ;, }, }, return, true, ;, }, public, StrMatcher, getDelimiterMatcher, (, ), {, return]
[i, ], ), {, return, false, ;, }, }, return, true, ;, }, public, StrMatcher, getDelimiterMatcher, (, ), {, return]
[(, ), {, return, this, ., delimMatcher, ;, }, public, StrTokenizer, setDelimiterMatcher, (, final, StrMatcher, delim, ), {, if, (]
[(, ), {, return, this, ., delimMatcher, ;, }, public, StrTokenizer, setDelimiterMatcher, (, final, StrMatcher, delim, ), {, if, (]
[{, return, this, ., delimMatcher, ;, }, public, StrTokenizer, setDelimiterMatcher, (, final, StrMatcher, delim, ), {, if, (, delim, ==]
[., delimMatcher, ;, }, public, StrTokenizer, setDelimiterMatcher, (, final, StrMatcher, delim, ), {, if, (, delim, ==, null, ), {]
[., delimMatcher, ;, }, public, StrTokenizer, setDelimiterMatcher, (, final, StrMatcher, delim, ), {, if, (, delim, ==, null, ), {]
[public, StrTokenizer, setDelimiterMatcher, (, final, StrMatcher, delim, ), {, if, (, delim, ==, null, ), {, this, ., delimMatcher, =]
[public, StrTokenizer, setDelimiterMatcher, (, final, StrMatcher, delim, ), {, if, (, delim, ==, null, ), {, this, ., delimMatcher, =]
[if, (, delim, ==, null, ), {, this, ., delimMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, }, else, {]
[if, (, delim, ==, null, ), {, this, ., delimMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, }, else, {]
[null, ), {, this, ., delimMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, }, else, {, this, ., delimMatcher, =]
[., delimMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, }, else, {, this, ., delimMatcher, =, delim, ;, }, return]
[., delimMatcher, =, delim, ;, }, return, this, ;, }, public, StrTokenizer, setDelimiterChar, (, final, char, delim, ), {, return]
[=, delim, ;, }, return, this, ;, }, public, StrTokenizer, setDelimiterChar, (, final, char, delim, ), {, return, setDelimiterMatcher, (]
[=, delim, ;, }, return, this, ;, }, public, StrTokenizer, setDelimiterChar, (, final, char, delim, ), {, return, setDelimiterMatcher, (]
[return, this, ;, }, public, StrTokenizer, setDelimiterChar, (, final, char, delim, ), {, return, setDelimiterMatcher, (, StrMatcher, ., charMatcher, (]
[(, StrMatcher, ., charMatcher, (, delim, ), ), ;, }, public, StrTokenizer, setDelimiterString, (, final, String, delim, ), {, return]
[., charMatcher, (, delim, ), ), ;, }, public, StrTokenizer, setDelimiterString, (, final, String, delim, ), {, return, setDelimiterMatcher, (]
[., charMatcher, (, delim, ), ), ;, }, public, StrTokenizer, setDelimiterString, (, final, String, delim, ), {, return, setDelimiterMatcher, (]
[), ), ;, }, public, StrTokenizer, setDelimiterString, (, final, String, delim, ), {, return, setDelimiterMatcher, (, StrMatcher, ., stringMatcher, (]
[{, return, setDelimiterMatcher, (, StrMatcher, ., stringMatcher, (, delim, ), ), ;, }, public, StrMatcher, getQuoteMatcher, (, ), {, return]
[StrMatcher, getQuoteMatcher, (, ), {, return, quoteMatcher, ;, }, public, StrTokenizer, setQuoteMatcher, (, final, StrMatcher, quote, ), {, if, (]
[StrMatcher, getQuoteMatcher, (, ), {, return, quoteMatcher, ;, }, public, StrTokenizer, setQuoteMatcher, (, final, StrMatcher, quote, ), {, if, (]
[(, ), {, return, quoteMatcher, ;, }, public, StrTokenizer, setQuoteMatcher, (, final, StrMatcher, quote, ), {, if, (, quote, !=]
[return, quoteMatcher, ;, }, public, StrTokenizer, setQuoteMatcher, (, final, StrMatcher, quote, ), {, if, (, quote, !=, null, ), {]
[return, quoteMatcher, ;, }, public, StrTokenizer, setQuoteMatcher, (, final, StrMatcher, quote, ), {, if, (, quote, !=, null, ), {]
[public, StrTokenizer, setQuoteMatcher, (, final, StrMatcher, quote, ), {, if, (, quote, !=, null, ), {, this, ., quoteMatcher, =]
[final, StrMatcher, quote, ), {, if, (, quote, !=, null, ), {, this, ., quoteMatcher, =, quote, ;, }, return]
[., quoteMatcher, =, quote, ;, }, return, this, ;, }, public, StrTokenizer, setQuoteChar, (, final, char, quote, ), {, return]
[=, quote, ;, }, return, this, ;, }, public, StrTokenizer, setQuoteChar, (, final, char, quote, ), {, return, setQuoteMatcher, (]
[=, quote, ;, }, return, this, ;, }, public, StrTokenizer, setQuoteChar, (, final, char, quote, ), {, return, setQuoteMatcher, (]
[return, this, ;, }, public, StrTokenizer, setQuoteChar, (, final, char, quote, ), {, return, setQuoteMatcher, (, StrMatcher, ., charMatcher, (]
[{, return, setQuoteMatcher, (, StrMatcher, ., charMatcher, (, quote, ), ), ;, }, public, StrMatcher, getIgnoredMatcher, (, ), {, return]
[StrMatcher, getIgnoredMatcher, (, ), {, return, ignoredMatcher, ;, }, public, StrTokenizer, setIgnoredMatcher, (, final, StrMatcher, ignored, ), {, if, (]
[StrMatcher, getIgnoredMatcher, (, ), {, return, ignoredMatcher, ;, }, public, StrTokenizer, setIgnoredMatcher, (, final, StrMatcher, ignored, ), {, if, (]
[(, ), {, return, ignoredMatcher, ;, }, public, StrTokenizer, setIgnoredMatcher, (, final, StrMatcher, ignored, ), {, if, (, ignored, !=]
[return, ignoredMatcher, ;, }, public, StrTokenizer, setIgnoredMatcher, (, final, StrMatcher, ignored, ), {, if, (, ignored, !=, null, ), {]
[return, ignoredMatcher, ;, }, public, StrTokenizer, setIgnoredMatcher, (, final, StrMatcher, ignored, ), {, if, (, ignored, !=, null, ), {]
[public, StrTokenizer, setIgnoredMatcher, (, final, StrMatcher, ignored, ), {, if, (, ignored, !=, null, ), {, this, ., ignoredMatcher, =]
[final, StrMatcher, ignored, ), {, if, (, ignored, !=, null, ), {, this, ., ignoredMatcher, =, ignored, ;, }, return]
[., ignoredMatcher, =, ignored, ;, }, return, this, ;, }, public, StrTokenizer, setIgnoredChar, (, final, char, ignored, ), {, return]
[=, ignored, ;, }, return, this, ;, }, public, StrTokenizer, setIgnoredChar, (, final, char, ignored, ), {, return, setIgnoredMatcher, (]
[=, ignored, ;, }, return, this, ;, }, public, StrTokenizer, setIgnoredChar, (, final, char, ignored, ), {, return, setIgnoredMatcher, (]
[return, this, ;, }, public, StrTokenizer, setIgnoredChar, (, final, char, ignored, ), {, return, setIgnoredMatcher, (, StrMatcher, ., charMatcher, (]
[{, return, setIgnoredMatcher, (, StrMatcher, ., charMatcher, (, ignored, ), ), ;, }, public, StrMatcher, getTrimmerMatcher, (, ), {, return]
[StrMatcher, getTrimmerMatcher, (, ), {, return, trimmerMatcher, ;, }, public, StrTokenizer, setTrimmerMatcher, (, final, StrMatcher, trimmer, ), {, if, (]
[StrMatcher, getTrimmerMatcher, (, ), {, return, trimmerMatcher, ;, }, public, StrTokenizer, setTrimmerMatcher, (, final, StrMatcher, trimmer, ), {, if, (]
[(, ), {, return, trimmerMatcher, ;, }, public, StrTokenizer, setTrimmerMatcher, (, final, StrMatcher, trimmer, ), {, if, (, trimmer, !=]
[return, trimmerMatcher, ;, }, public, StrTokenizer, setTrimmerMatcher, (, final, StrMatcher, trimmer, ), {, if, (, trimmer, !=, null, ), {]
[return, trimmerMatcher, ;, }, public, StrTokenizer, setTrimmerMatcher, (, final, StrMatcher, trimmer, ), {, if, (, trimmer, !=, null, ), {]
[public, StrTokenizer, setTrimmerMatcher, (, final, StrMatcher, trimmer, ), {, if, (, trimmer, !=, null, ), {, this, ., trimmerMatcher, =]
[final, StrMatcher, trimmer, ), {, if, (, trimmer, !=, null, ), {, this, ., trimmerMatcher, =, trimmer, ;, }, return]
[), {, this, ., trimmerMatcher, =, trimmer, ;, }, return, this, ;, }, public, boolean, isEmptyTokenAsNull, (, ), {, return]
[), {, this, ., trimmerMatcher, =, trimmer, ;, }, return, this, ;, }, public, boolean, isEmptyTokenAsNull, (, ), {, return]
[boolean, isEmptyTokenAsNull, (, ), {, return, this, ., emptyAsNull, ;, }, public, StrTokenizer, setEmptyTokenAsNull, (, final, boolean, emptyAsNull, ), {]
[boolean, isEmptyTokenAsNull, (, ), {, return, this, ., emptyAsNull, ;, }, public, StrTokenizer, setEmptyTokenAsNull, (, final, boolean, emptyAsNull, ), {]
[{, return, this, ., emptyAsNull, ;, }, public, StrTokenizer, setEmptyTokenAsNull, (, final, boolean, emptyAsNull, ), {, this, ., emptyAsNull, =]
[., emptyAsNull, ;, }, public, StrTokenizer, setEmptyTokenAsNull, (, final, boolean, emptyAsNull, ), {, this, ., emptyAsNull, =, emptyAsNull, ;, return]
[emptyAsNull, ), {, this, ., emptyAsNull, =, emptyAsNull, ;, return, this, ;, }, public, boolean, isIgnoreEmptyTokens, (, ), {, return]
[}, public, boolean, isIgnoreEmptyTokens, (, ), {, return, ignoreEmptyTokens, ;, }, public, StrTokenizer, setIgnoreEmptyTokens, (, final, boolean, ignoreEmptyTokens, ), {]
[}, public, boolean, isIgnoreEmptyTokens, (, ), {, return, ignoreEmptyTokens, ;, }, public, StrTokenizer, setIgnoreEmptyTokens, (, final, boolean, ignoreEmptyTokens, ), {]
[(, ), {, return, ignoreEmptyTokens, ;, }, public, StrTokenizer, setIgnoreEmptyTokens, (, final, boolean, ignoreEmptyTokens, ), {, this, ., ignoreEmptyTokens, =]
[return, ignoreEmptyTokens, ;, }, public, StrTokenizer, setIgnoreEmptyTokens, (, final, boolean, ignoreEmptyTokens, ), {, this, ., ignoreEmptyTokens, =, ignoreEmptyTokens, ;, return]
[), {, this, ., ignoreEmptyTokens, =, ignoreEmptyTokens, ;, return, this, ;, }, public, String, getContent, (, ), {, if, (]
[), {, this, ., ignoreEmptyTokens, =, ignoreEmptyTokens, ;, return, this, ;, }, public, String, getContent, (, ), {, if, (]
[this, ., ignoreEmptyTokens, =, ignoreEmptyTokens, ;, return, this, ;, }, public, String, getContent, (, ), {, if, (, chars, ==]
[ignoreEmptyTokens, ;, return, this, ;, }, public, String, getContent, (, ), {, if, (, chars, ==, null, ), {, return]
[;, }, public, String, getContent, (, ), {, if, (, chars, ==, null, ), {, return, null, ;, }, return]
[String, getContent, (, ), {, if, (, chars, ==, null, ), {, return, null, ;, }, return, new, String, (]
[}, return, new, String, (, chars, ), ;, }, @, Override, public, Object, clone, (, ), {, try, {, return]
[clone, (, ), {, try, {, return, cloneReset, (, ), ;, }, catch, (, final, CloneNotSupportedException, ex, ), {, return]
[CloneNotSupportedException, ex, ), {, return, null, ;, }, }, Object, cloneReset, (, ), throws, CloneNotSupportedException, {, final, StrTokenizer, cloned, =]
[{, return, null, ;, }, }, Object, cloneReset, (, ), throws, CloneNotSupportedException, {, final, StrTokenizer, cloned, =, (, StrTokenizer, )]
[{, return, null, ;, }, }, Object, cloneReset, (, ), throws, CloneNotSupportedException, {, final, StrTokenizer, cloned, =, (, StrTokenizer, )]
[(, ), throws, CloneNotSupportedException, {, final, StrTokenizer, cloned, =, (, StrTokenizer, ), super, ., clone, (, ), ;, if, (]
[(, ), throws, CloneNotSupportedException, {, final, StrTokenizer, cloned, =, (, StrTokenizer, ), super, ., clone, (, ), ;, if, (]
[(, ), throws, CloneNotSupportedException, {, final, StrTokenizer, cloned, =, (, StrTokenizer, ), super, ., clone, (, ), ;, if, (]
[{, final, StrTokenizer, cloned, =, (, StrTokenizer, ), super, ., clone, (, ), ;, if, (, cloned, ., chars, !=]
[cloned, =, (, StrTokenizer, ), super, ., clone, (, ), ;, if, (, cloned, ., chars, !=, null, ), {]
[cloned, =, (, StrTokenizer, ), super, ., clone, (, ), ;, if, (, cloned, ., chars, !=, null, ), {]
[), super, ., clone, (, ), ;, if, (, cloned, ., chars, !=, null, ), {, cloned, ., chars, =]
[), super, ., clone, (, ), ;, if, (, cloned, ., chars, !=, null, ), {, cloned, ., chars, =]
[), super, ., clone, (, ), ;, if, (, cloned, ., chars, !=, null, ), {, cloned, ., chars, =]
[cloned, ., chars, !=, null, ), {, cloned, ., chars, =, cloned, ., chars, ., clone, (, ), ;, }]
[cloned, ., chars, !=, null, ), {, cloned, ., chars, =, cloned, ., chars, ., clone, (, ), ;, }]
[cloned, ., chars, =, cloned, ., chars, ., clone, (, ), ;, }, cloned, ., reset, (, ), ;, return]
[cloned, ., reset, (, ), ;, return, cloned, ;, }, @, Override, public, String, toString, (, ), {, if, (]
[cloned, ., reset, (, ), ;, return, cloned, ;, }, @, Override, public, String, toString, (, ), {, if, (]
[reset, (, ), ;, return, cloned, ;, }, @, Override, public, String, toString, (, ), {, if, (, tokens, ==]
[return, cloned, ;, }, @, Override, public, String, toString, (, ), {, if, (, tokens, ==, null, ), {, return]
[@, Override, public, String, toString, (, ), {, if, (, tokens, ==, null, ), {, return, "StrTokenizer[not tokenized yet]", ;, }, return]
[@, Override, public, String, toString, (, ), {, if, (, tokens, ==, null, ), {, return, "StrTokenizer[not tokenized yet]", ;, }, return]
[public, String, toString, (, ), {, if, (, tokens, ==, null, ), {, return, "StrTokenizer[not tokenized yet]", ;, }, return, "StrTokenizer", +]
