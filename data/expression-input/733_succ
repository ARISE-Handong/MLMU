[;, @, Deprecated, protected, double, [, ], [, ], weightedResidualJacobian, ;, @, Deprecated, protected, int, cols, ;, @, Deprecated, protected]
[), ;, }, public, int, getJacobianEvaluations, (, ), {, return, jacobianEvaluations, ;, }, @, Deprecated, protected, void, updateJacobian, (, )]
[;, }, @, Deprecated, protected, void, updateJacobian, (, ), {, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (, point, ), ;, weightedResidualJacobian]
[;, weightedResidualJacobian, =, weightedJacobian, ., scalarMultiply, (, -, 1, ), ., getData, (, ), ;, }, protected, RealMatrix, computeWeightedJacobian, (]
[), ;, weightedResidualJacobian, =, weightedJacobian, ., scalarMultiply, (, -, 1, ), ., getData, (, ), ;, }, protected, RealMatrix, computeWeightedJacobian]
[=, weightedJacobian, ., scalarMultiply, (, -, 1, ), ., getData, (, ), ;, }, protected, RealMatrix, computeWeightedJacobian, (, double, []
[;, }, protected, RealMatrix, computeWeightedJacobian, (, double, [, ], params, ), {, ++, jacobianEvaluations, ;, final, DerivativeStructure, [, ], dsPoint]
[., getData, (, ), ;, }, protected, RealMatrix, computeWeightedJacobian, (, double, [, ], params, ), {, ++, jacobianEvaluations, ;, final]
[., scalarMultiply, (, -, 1, ), ., getData, (, ), ;, }, protected, RealMatrix, computeWeightedJacobian, (, double, [, ], params]
[), ., getData, (, ), ;, }, protected, RealMatrix, computeWeightedJacobian, (, double, [, ], params, ), {, ++, jacobianEvaluations, ;]
[), ., getData, (, ), ;, }, protected, RealMatrix, computeWeightedJacobian, (, double, [, ], params, ), {, ++, jacobianEvaluations, ;]
[;, final, DerivativeStructure, [, ], dsPoint, =, new, DerivativeStructure, [, params, ., length, ], ;, final, int, nC, =, params]
[;, final, DerivativeStructure, [, ], dsPoint, =, new, DerivativeStructure, [, params, ., length, ], ;, final, int, nC, =, params]
[;, final, int, nC, =, params, ., length, ;, for, (, int, i, =, 0, ;, i, <, nC, ;]
[], ;, final, int, nC, =, params, ., length, ;, for, (, int, i, =, 0, ;, i, <, nC]
[., length, ], ;, final, int, nC, =, params, ., length, ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {, dsPoint, [, i, ]]
[., length, ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {, dsPoint, []
[;, i, <, nC, ;, ++, i, ), {, dsPoint, [, i, ], =, new, DerivativeStructure, (, nC, ,, 1]
[;, ++, i, ), {, dsPoint, [, i, ], =, new, DerivativeStructure, (, nC, ,, 1, ,, i, ,, params]
[<, nC, ;, ++, i, ), {, dsPoint, [, i, ], =, new, DerivativeStructure, (, nC, ,, 1, ,, i]
[;, ++, i, ), {, dsPoint, [, i, ], =, new, DerivativeStructure, (, nC, ,, 1, ,, i, ,, params]
[), {, dsPoint, [, i, ], =, new, DerivativeStructure, (, nC, ,, 1, ,, i, ,, params, [, i, ]]
[), {, dsPoint, [, i, ], =, new, DerivativeStructure, (, nC, ,, 1, ,, i, ,, params, [, i, ]]
[=, new, DerivativeStructure, (, nC, ,, 1, ,, i, ,, params, [, i, ], ), ;, }, final, DerivativeStructure, []
[[, i, ], =, new, DerivativeStructure, (, nC, ,, 1, ,, i, ,, params, [, i, ], ), ;, }]
[], =, new, DerivativeStructure, (, nC, ,, 1, ,, i, ,, params, [, i, ], ), ;, }, final, DerivativeStructure]
[;, }, final, DerivativeStructure, [, ], dsValue, =, jF, ., value, (, dsPoint, ), ;, final, int, nR, =, getTarget]
[,, 1, ,, i, ,, params, [, i, ], ), ;, }, final, DerivativeStructure, [, ], dsValue, =, jF, .]
[,, i, ,, params, [, i, ], ), ;, }, final, DerivativeStructure, [, ], dsValue, =, jF, ., value, (]
[,, params, [, i, ], ), ;, }, final, DerivativeStructure, [, ], dsValue, =, jF, ., value, (, dsPoint, )]
[), ;, }, final, DerivativeStructure, [, ], dsValue, =, jF, ., value, (, dsPoint, ), ;, final, int, nR, =]
[[, i, ], ), ;, }, final, DerivativeStructure, [, ], dsValue, =, jF, ., value, (, dsPoint, ), ;, final]
[], ), ;, }, final, DerivativeStructure, [, ], dsValue, =, jF, ., value, (, dsPoint, ), ;, final, int, nR]
[;, final, int, nR, =, getTarget, (, ), ., length, ;, if, (, dsValue, ., length, !=, nR, ), {]
[., value, (, dsPoint, ), ;, final, int, nR, =, getTarget, (, ), ., length, ;, if, (, dsValue, .]
[), ;, final, int, nR, =, getTarget, (, ), ., length, ;, if, (, dsValue, ., length, !=, nR, )]
[;, if, (, dsValue, ., length, !=, nR, ), {, throw, new, DimensionMismatchException, (, dsValue, ., length, ,, nR, )]
[., length, ;, if, (, dsValue, ., length, !=, nR, ), {, throw, new, DimensionMismatchException, (, dsValue, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, dsValue, ., length, ,, nR, ), ;, }, final, double, [, ], [, ]]
[!=, nR, ), {, throw, new, DimensionMismatchException, (, dsValue, ., length, ,, nR, ), ;, }, final, double, [, ]]
[., length, !=, nR, ), {, throw, new, DimensionMismatchException, (, dsValue, ., length, ,, nR, ), ;, }, final, double]
[), {, throw, new, DimensionMismatchException, (, dsValue, ., length, ,, nR, ), ;, }, final, double, [, ], [, ]]
[;, }, final, double, [, ], [, ], jacobianData, =, new, double, [, nR, ], [, nC, ], ;, for]
[,, nR, ), ;, }, final, double, [, ], [, ], jacobianData, =, new, double, [, nR, ], [, nC]
[., length, ,, nR, ), ;, }, final, double, [, ], [, ], jacobianData, =, new, double, [, nR, ]]
[), ;, }, final, double, [, ], [, ], jacobianData, =, new, double, [, nR, ], [, nC, ], ;]
[;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {, int, [, ], orders]
[], [, nC, ], ;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {, int, [, ]]
[;, i, <, nR, ;, ++, i, ), {, int, [, ], orders, =, new, int, [, nC, ], ;]
[;, ++, i, ), {, int, [, ], orders, =, new, int, [, nC, ], ;, for, (, int, j]
[<, nR, ;, ++, i, ), {, int, [, ], orders, =, new, int, [, nC, ], ;, for, (]
[;, ++, i, ), {, int, [, ], orders, =, new, int, [, nC, ], ;, for, (, int, j]
[), {, int, [, ], orders, =, new, int, [, nC, ], ;, for, (, int, j, =, 0, ;]
[), {, int, [, ], orders, =, new, int, [, nC, ], ;, for, (, int, j, =, 0, ;]
[;, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, orders, [, j, ]]
[], ;, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, orders, [, j]
[;, j, <, nC, ;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobianData, [, i, ]]
[;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobianData, [, i, ], [, j, ], =]
[<, nC, ;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobianData, [, i, ], [, j]
[;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobianData, [, i, ], [, j, ], =]
[), {, orders, [, j, ], =, 1, ;, jacobianData, [, i, ], [, j, ], =, dsValue, [, i]
[), {, orders, [, j, ], =, 1, ;, jacobianData, [, i, ], [, j, ], =, dsValue, [, i]
[=, 1, ;, jacobianData, [, i, ], [, j, ], =, dsValue, [, i, ], ., getPartialDerivative, (, orders, )]
[[, j, ], =, 1, ;, jacobianData, [, i, ], [, j, ], =, dsValue, [, i, ], ., getPartialDerivative]
[], =, 1, ;, jacobianData, [, i, ], [, j, ], =, dsValue, [, i, ], ., getPartialDerivative, (, orders]
[;, jacobianData, [, i, ], [, j, ], =, dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders]
[=, dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }]
[[, j, ], =, dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0]
[[, i, ], [, j, ], =, dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j]
[], [, j, ], =, dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =]
[], =, dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }]
[;, orders, [, j, ], =, 0, ;, }, }, return, weightMatrixSqrt, ., multiply, (, MatrixUtils, ., createRealMatrix, (, jacobianData]
[., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return, weightMatrixSqrt, ., multiply, (]
[[, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return, weightMatrixSqrt]
[], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return, weightMatrixSqrt, ., multiply]
[), ;, orders, [, j, ], =, 0, ;, }, }, return, weightMatrixSqrt, ., multiply, (, MatrixUtils, ., createRealMatrix, (]
[=, 0, ;, }, }, return, weightMatrixSqrt, ., multiply, (, MatrixUtils, ., createRealMatrix, (, jacobianData, ), ), ;, }, @]
[[, j, ], =, 0, ;, }, }, return, weightMatrixSqrt, ., multiply, (, MatrixUtils, ., createRealMatrix, (, jacobianData, ), )]
[], =, 0, ;, }, }, return, weightMatrixSqrt, ., multiply, (, MatrixUtils, ., createRealMatrix, (, jacobianData, ), ), ;, }]
[;, }, }, return, weightMatrixSqrt, ., multiply, (, MatrixUtils, ., createRealMatrix, (, jacobianData, ), ), ;, }, @, Deprecated, protected]
[;, }, @, Deprecated, protected, void, updateResidualsAndCost, (, ), {, objective, =, computeObjectiveValue, (, point, ), ;, final, double, []
[., multiply, (, MatrixUtils, ., createRealMatrix, (, jacobianData, ), ), ;, }, @, Deprecated, protected, void, updateResidualsAndCost, (, ), {]
[), ;, }, @, Deprecated, protected, void, updateResidualsAndCost, (, ), {, objective, =, computeObjectiveValue, (, point, ), ;, final, double]
[., createRealMatrix, (, jacobianData, ), ), ;, }, @, Deprecated, protected, void, updateResidualsAndCost, (, ), {, objective, =, computeObjectiveValue, (]
[), ), ;, }, @, Deprecated, protected, void, updateResidualsAndCost, (, ), {, objective, =, computeObjectiveValue, (, point, ), ;, final]
[=, computeObjectiveValue, (, point, ), ;, final, double, [, ], res, =, computeResiduals, (, objective, ), ;, cost, =, computeCost]
[;, final, double, [, ], res, =, computeResiduals, (, objective, ), ;, cost, =, computeCost, (, res, ), ;, final]
[), ;, final, double, [, ], res, =, computeResiduals, (, objective, ), ;, cost, =, computeCost, (, res, ), ;]
[;, cost, =, computeCost, (, res, ), ;, final, ArrayRealVector, residuals, =, new, ArrayRealVector, (, res, ), ;, weightedResiduals, =]
[), ;, cost, =, computeCost, (, res, ), ;, final, ArrayRealVector, residuals, =, new, ArrayRealVector, (, res, ), ;, weightedResiduals]
[=, computeCost, (, res, ), ;, final, ArrayRealVector, residuals, =, new, ArrayRealVector, (, res, ), ;, weightedResiduals, =, weightMatrixSqrt, .]
[;, final, ArrayRealVector, residuals, =, new, ArrayRealVector, (, res, ), ;, weightedResiduals, =, weightMatrixSqrt, ., operate, (, residuals, ), .]
[), ;, final, ArrayRealVector, residuals, =, new, ArrayRealVector, (, res, ), ;, weightedResiduals, =, weightMatrixSqrt, ., operate, (, residuals, )]
[;, weightedResiduals, =, weightMatrixSqrt, ., operate, (, residuals, ), ., toArray, (, ), ;, }, protected, double, computeCost, (, double]
[), ;, weightedResiduals, =, weightMatrixSqrt, ., operate, (, residuals, ), ., toArray, (, ), ;, }, protected, double, computeCost, (]
[=, weightMatrixSqrt, ., operate, (, residuals, ), ., toArray, (, ), ;, }, protected, double, computeCost, (, double, [, ]]
[;, }, protected, double, computeCost, (, double, [, ], residuals, ), {, final, ArrayRealVector, r, =, new, ArrayRealVector, (, residuals]
[., toArray, (, ), ;, }, protected, double, computeCost, (, double, [, ], residuals, ), {, final, ArrayRealVector, r, =]
[., operate, (, residuals, ), ., toArray, (, ), ;, }, protected, double, computeCost, (, double, [, ], residuals, )]
[), ., toArray, (, ), ;, }, protected, double, computeCost, (, double, [, ], residuals, ), {, final, ArrayRealVector, r]
[;, return, FastMath, ., sqrt, (, r, ., dotProduct, (, getWeight, (, ), ., operate, (, r, ), ), )]
[), ;, return, FastMath, ., sqrt, (, r, ., dotProduct, (, getWeight, (, ), ., operate, (, r, ), )]
[;, }, public, double, getRMS, (, ), {, return, FastMath, ., sqrt, (, getChiSquare, (, ), /, rows, ), ;]
[., sqrt, (, r, ., dotProduct, (, getWeight, (, ), ., operate, (, r, ), ), ), ;, }, public]
[), ;, }, public, double, getRMS, (, ), {, return, FastMath, ., sqrt, (, getChiSquare, (, ), /, rows, )]
[., dotProduct, (, getWeight, (, ), ., operate, (, r, ), ), ), ;, }, public, double, getRMS, (, )]
[), ), ;, }, public, double, getRMS, (, ), {, return, FastMath, ., sqrt, (, getChiSquare, (, ), /, rows]
[., operate, (, r, ), ), ), ;, }, public, double, getRMS, (, ), {, return, FastMath, ., sqrt, (]
[), ), ), ;, }, public, double, getRMS, (, ), {, return, FastMath, ., sqrt, (, getChiSquare, (, ), /]
[;, }, public, double, getChiSquare, (, ), {, return, cost, *, cost, ;, }, public, RealMatrix, getWeightSquareRoot, (, ), {]
[., sqrt, (, getChiSquare, (, ), /, rows, ), ;, }, public, double, getChiSquare, (, ), {, return, cost, *]
[), ;, }, public, double, getChiSquare, (, ), {, return, cost, *, cost, ;, }, public, RealMatrix, getWeightSquareRoot, (, )]
[/, rows, ), ;, }, public, double, getChiSquare, (, ), {, return, cost, *, cost, ;, }, public, RealMatrix, getWeightSquareRoot]
[), ;, }, public, double, getChiSquare, (, ), {, return, cost, *, cost, ;, }, public, RealMatrix, getWeightSquareRoot, (, )]
[;, }, public, RealMatrix, getWeightSquareRoot, (, ), {, return, weightMatrixSqrt, ., copy, (, ), ;, }, protected, void, setCost, (]
[*, cost, ;, }, public, RealMatrix, getWeightSquareRoot, (, ), {, return, weightMatrixSqrt, ., copy, (, ), ;, }, protected, void]
[;, }, public, RealMatrix, getWeightSquareRoot, (, ), {, return, weightMatrixSqrt, ., copy, (, ), ;, }, protected, void, setCost, (]
[;, }, protected, void, setCost, (, double, cost, ), {, this, ., cost, =, cost, ;, }, @, Deprecated, public]
[., copy, (, ), ;, }, protected, void, setCost, (, double, cost, ), {, this, ., cost, =, cost, ;]
[=, cost, ;, }, @, Deprecated, public, double, [, ], [, ], getCovariances, (, ), {, return, getCovariances, (, DEFAULT_SINGULARITY_THRESHOLD]
[., cost, =, cost, ;, }, @, Deprecated, public, double, [, ], [, ], getCovariances, (, ), {, return, getCovariances]
[;, }, @, Deprecated, public, double, [, ], [, ], getCovariances, (, ), {, return, getCovariances, (, DEFAULT_SINGULARITY_THRESHOLD, ), ;]
[;, }, @, Deprecated, public, double, [, ], [, ], getCovariances, (, double, threshold, ), {, return, computeCovariances, (, point]
[), ;, }, @, Deprecated, public, double, [, ], [, ], getCovariances, (, double, threshold, ), {, return, computeCovariances, (]
[;, }, public, double, [, ], [, ], computeCovariances, (, double, [, ], params, ,, double, threshold, ), {, final]
[,, threshold, ), ;, }, public, double, [, ], [, ], computeCovariances, (, double, [, ], params, ,, double, threshold]
[), ;, }, public, double, [, ], [, ], computeCovariances, (, double, [, ], params, ,, double, threshold, ), {]
[;, final, RealMatrix, jTj, =, j, ., transpose, (, ), ., multiply, (, j, ), ;, final, DecompositionSolver, solver, =]
[), ;, final, RealMatrix, jTj, =, j, ., transpose, (, ), ., multiply, (, j, ), ;, final, DecompositionSolver, solver]
[;, final, DecompositionSolver, solver, =, new, QRDecomposition, (, jTj, ,, threshold, ), ., getSolver, (, ), ;, return, solver, .]
[., multiply, (, j, ), ;, final, DecompositionSolver, solver, =, new, QRDecomposition, (, jTj, ,, threshold, ), ., getSolver, (]
[., transpose, (, ), ., multiply, (, j, ), ;, final, DecompositionSolver, solver, =, new, QRDecomposition, (, jTj, ,, threshold]
[), ;, final, DecompositionSolver, solver, =, new, QRDecomposition, (, jTj, ,, threshold, ), ., getSolver, (, ), ;, return, solver]
[;, return, solver, ., getInverse, (, ), ., getData, (, ), ;, }, @, Deprecated, public, double, [, ], guessParametersErrors]
[., getSolver, (, ), ;, return, solver, ., getInverse, (, ), ., getData, (, ), ;, }, @, Deprecated, public]
[,, threshold, ), ., getSolver, (, ), ;, return, solver, ., getInverse, (, ), ., getData, (, ), ;, }]
[), ., getSolver, (, ), ;, return, solver, ., getInverse, (, ), ., getData, (, ), ;, }, @, Deprecated]
[;, }, @, Deprecated, public, double, [, ], guessParametersErrors, (, ), {, if, (, rows, <=, cols, ), {, throw]
[., getData, (, ), ;, }, @, Deprecated, public, double, [, ], guessParametersErrors, (, ), {, if, (, rows, <=]
[., getInverse, (, ), ., getData, (, ), ;, }, @, Deprecated, public, double, [, ], guessParametersErrors, (, ), {]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NO_DEGREES_OF_FREEDOM, ,, rows, ,, cols, ,, false, ), ;, }, double, []
[<=, cols, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NO_DEGREES_OF_FREEDOM, ,, rows, ,, cols, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NO_DEGREES_OF_FREEDOM, ,, rows, ,, cols, ,, false, ), ;, }, double, []
[;, }, double, [, ], errors, =, new, double, [, cols, ], ;, final, double, c, =, FastMath, ., sqrt]
[,, rows, ,, cols, ,, false, ), ;, }, double, [, ], errors, =, new, double, [, cols, ], ;]
[., NO_DEGREES_OF_FREEDOM, ,, rows, ,, cols, ,, false, ), ;, }, double, [, ], errors, =, new, double, [, cols]
[,, cols, ,, false, ), ;, }, double, [, ], errors, =, new, double, [, cols, ], ;, final, double]
[,, false, ), ;, }, double, [, ], errors, =, new, double, [, cols, ], ;, final, double, c, =]
[), ;, }, double, [, ], errors, =, new, double, [, cols, ], ;, final, double, c, =, FastMath, .]
[;, final, double, c, =, FastMath, ., sqrt, (, getChiSquare, (, ), /, (, rows, -, cols, ), ), ;]
[], ;, final, double, c, =, FastMath, ., sqrt, (, getChiSquare, (, ), /, (, rows, -, cols, ), )]
[;, double, [, ], [, ], covar, =, computeCovariances, (, point, ,, 1e-14, ), ;, for, (, int, i, =]
[., sqrt, (, getChiSquare, (, ), /, (, rows, -, cols, ), ), ;, double, [, ], [, ], covar]
[), ;, double, [, ], [, ], covar, =, computeCovariances, (, point, ,, 1e-14, ), ;, for, (, int, i]
[/, (, rows, -, cols, ), ), ;, double, [, ], [, ], covar, =, computeCovariances, (, point, ,, 1e-14]
[), ;, double, [, ], [, ], covar, =, computeCovariances, (, point, ,, 1e-14, ), ;, for, (, int, i]
[), ), ;, double, [, ], [, ], covar, =, computeCovariances, (, point, ,, 1e-14, ), ;, for, (, int]
[-, cols, ), ), ;, double, [, ], [, ], covar, =, computeCovariances, (, point, ,, 1e-14, ), ;, for]
[), ), ;, double, [, ], [, ], covar, =, computeCovariances, (, point, ,, 1e-14, ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, errors, ., length, ;, ++, i, ), {, errors, []
[,, 1e-14, ), ;, for, (, int, i, =, 0, ;, i, <, errors, ., length, ;, ++, i, )]
[), ;, for, (, int, i, =, 0, ;, i, <, errors, ., length, ;, ++, i, ), {, errors]
[;, i, <, errors, ., length, ;, ++, i, ), {, errors, [, i, ], =, FastMath, ., sqrt, (]
[;, ++, i, ), {, errors, [, i, ], =, FastMath, ., sqrt, (, covar, [, i, ], [, i]
[<, errors, ., length, ;, ++, i, ), {, errors, [, i, ], =, FastMath, ., sqrt, (, covar, []
[;, ++, i, ), {, errors, [, i, ], =, FastMath, ., sqrt, (, covar, [, i, ], [, i]
[., length, ;, ++, i, ), {, errors, [, i, ], =, FastMath, ., sqrt, (, covar, [, i, ]]
[), {, errors, [, i, ], =, FastMath, ., sqrt, (, covar, [, i, ], [, i, ], ), *]
[), {, errors, [, i, ], =, FastMath, ., sqrt, (, covar, [, i, ], [, i, ], ), *]
[=, FastMath, ., sqrt, (, covar, [, i, ], [, i, ], ), *, c, ;, }, return, errors, ;]
[[, i, ], =, FastMath, ., sqrt, (, covar, [, i, ], [, i, ], ), *, c, ;, }]
[], =, FastMath, ., sqrt, (, covar, [, i, ], [, i, ], ), *, c, ;, }, return, errors]
[;, }, return, errors, ;, }, public, double, [, ], computeSigma, (, double, [, ], params, ,, double, covarianceSingularityThreshold, )]
[*, c, ;, }, return, errors, ;, }, public, double, [, ], computeSigma, (, double, [, ], params, ,, double]
[., sqrt, (, covar, [, i, ], [, i, ], ), *, c, ;, }, return, errors, ;, }, public]
[), *, c, ;, }, return, errors, ;, }, public, double, [, ], computeSigma, (, double, [, ], params, ,]
[[, i, ], ), *, c, ;, }, return, errors, ;, }, public, double, [, ], computeSigma, (, double, []
[[, i, ], [, i, ], ), *, c, ;, }, return, errors, ;, }, public, double, [, ], computeSigma]
[], [, i, ], ), *, c, ;, }, return, errors, ;, }, public, double, [, ], computeSigma, (, double]
[], ), *, c, ;, }, return, errors, ;, }, public, double, [, ], computeSigma, (, double, [, ], params]
[;, }, return, errors, ;, }, public, double, [, ], computeSigma, (, double, [, ], params, ,, double, covarianceSingularityThreshold, )]
[;, }, public, double, [, ], computeSigma, (, double, [, ], params, ,, double, covarianceSingularityThreshold, ), {, final, int, nC]
[;, final, double, [, ], sig, =, new, double, [, nC, ], ;, final, double, [, ], [, ], cov]
[., length, ;, final, double, [, ], sig, =, new, double, [, nC, ], ;, final, double, [, ], []
[;, final, double, [, ], [, ], cov, =, computeCovariances, (, params, ,, covarianceSingularityThreshold, ), ;, for, (, int, i]
[], ;, final, double, [, ], [, ], cov, =, computeCovariances, (, params, ,, covarianceSingularityThreshold, ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {, sig, [, i, ]]
[,, covarianceSingularityThreshold, ), ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {, sig]
[), ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {, sig, [, i]
[;, i, <, nC, ;, ++, i, ), {, sig, [, i, ], =, FastMath, ., sqrt, (, cov, []
[;, ++, i, ), {, sig, [, i, ], =, FastMath, ., sqrt, (, cov, [, i, ], [, i]
[<, nC, ;, ++, i, ), {, sig, [, i, ], =, FastMath, ., sqrt, (, cov, [, i, ]]
[;, ++, i, ), {, sig, [, i, ], =, FastMath, ., sqrt, (, cov, [, i, ], [, i]
[), {, sig, [, i, ], =, FastMath, ., sqrt, (, cov, [, i, ], [, i, ], ), ;]
[), {, sig, [, i, ], =, FastMath, ., sqrt, (, cov, [, i, ], [, i, ], ), ;]
[=, FastMath, ., sqrt, (, cov, [, i, ], [, i, ], ), ;, }, return, sig, ;, }, @]
[[, i, ], =, FastMath, ., sqrt, (, cov, [, i, ], [, i, ], ), ;, }, return, sig]
[], =, FastMath, ., sqrt, (, cov, [, i, ], [, i, ], ), ;, }, return, sig, ;, }]
[;, }, return, sig, ;, }, @, Override, @, Deprecated, public, PointVectorValuePair, optimize, (, int, maxEval, ,, final, DifferentiableMultivariateVectorFunction, f]
[., sqrt, (, cov, [, i, ], [, i, ], ), ;, }, return, sig, ;, }, @, Override, @]
[), ;, }, return, sig, ;, }, @, Override, @, Deprecated, public, PointVectorValuePair, optimize, (, int, maxEval, ,, final, DifferentiableMultivariateVectorFunction]
[[, i, ], ), ;, }, return, sig, ;, }, @, Override, @, Deprecated, public, PointVectorValuePair, optimize, (, int, maxEval]
[[, i, ], [, i, ], ), ;, }, return, sig, ;, }, @, Override, @, Deprecated, public, PointVectorValuePair, optimize]
[], [, i, ], ), ;, }, return, sig, ;, }, @, Override, @, Deprecated, public, PointVectorValuePair, optimize, (, int]
[], ), ;, }, return, sig, ;, }, @, Override, @, Deprecated, public, PointVectorValuePair, optimize, (, int, maxEval, ,, final]
[;, }, @, Override, @, Deprecated, public, PointVectorValuePair, optimize, (, int, maxEval, ,, final, DifferentiableMultivariateVectorFunction, f, ,, final, double, []
[;, }, @, Deprecated, public, PointVectorValuePair, optimize, (, final, int, maxEval, ,, final, MultivariateDifferentiableVectorFunction, f, ,, final, double, [, ]]
[,, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, f, ), ,, new, Target, (, target, ), ,, new, Weight, (, weights, ), ,]
[,, new, Target, (, target, ), ,, new, Weight, (, weights, ), ,, new, InitialGuess, (, startPoint, ), ), ;]
[., toMultivariateDifferentiableVectorFunction, (, f, ), ,, new, Target, (, target, ), ,, new, Weight, (, weights, ), ,, new, InitialGuess]
[), ,, new, Target, (, target, ), ,, new, Weight, (, weights, ), ,, new, InitialGuess, (, startPoint, ), )]
[,, new, Weight, (, weights, ), ,, new, InitialGuess, (, startPoint, ), ), ;, }, @, Deprecated, public, PointVectorValuePair, optimize]
[), ,, new, Weight, (, weights, ), ,, new, InitialGuess, (, startPoint, ), ), ;, }, @, Deprecated, public, PointVectorValuePair]
[,, new, InitialGuess, (, startPoint, ), ), ;, }, @, Deprecated, public, PointVectorValuePair, optimize, (, final, int, maxEval, ,, final]
[), ,, new, InitialGuess, (, startPoint, ), ), ;, }, @, Deprecated, public, PointVectorValuePair, optimize, (, final, int, maxEval, ,]
[), ;, }, @, Deprecated, public, PointVectorValuePair, optimize, (, final, int, maxEval, ,, final, MultivariateDifferentiableVectorFunction, f, ,, final, double, []
[), ), ;, }, @, Deprecated, public, PointVectorValuePair, optimize, (, final, int, maxEval, ,, final, MultivariateDifferentiableVectorFunction, f, ,, final, double]
[;, }, @, Deprecated, protected, PointVectorValuePair, optimizeInternal, (, final, int, maxEval, ,, final, MultivariateDifferentiableVectorFunction, f, ,, OptimizationData, ..., optData, )]
[,, f, ,, new, Target, (, target, ), ,, new, Weight, (, weights, ), ,, new, InitialGuess, (, startPoint, )]
[,, new, Target, (, target, ), ,, new, Weight, (, weights, ), ,, new, InitialGuess, (, startPoint, ), ), ;]
[,, new, Weight, (, weights, ), ,, new, InitialGuess, (, startPoint, ), ), ;, }, @, Deprecated, protected, PointVectorValuePair, optimizeInternal]
[), ,, new, Weight, (, weights, ), ,, new, InitialGuess, (, startPoint, ), ), ;, }, @, Deprecated, protected, PointVectorValuePair]
[,, new, InitialGuess, (, startPoint, ), ), ;, }, @, Deprecated, protected, PointVectorValuePair, optimizeInternal, (, final, int, maxEval, ,, final]
[), ,, new, InitialGuess, (, startPoint, ), ), ;, }, @, Deprecated, protected, PointVectorValuePair, optimizeInternal, (, final, int, maxEval, ,]
[), ;, }, @, Deprecated, protected, PointVectorValuePair, optimizeInternal, (, final, int, maxEval, ,, final, MultivariateDifferentiableVectorFunction, f, ,, OptimizationData, ..., optData]
[), ), ;, }, @, Deprecated, protected, PointVectorValuePair, optimizeInternal, (, final, int, maxEval, ,, final, MultivariateDifferentiableVectorFunction, f, ,, OptimizationData, ...]
[;, }, @, Override, protected, void, setUp, (, ), {, super, ., setUp, (, ), ;, jacobianEvaluations, =, 0, ;]
[., optimizeInternal, (, maxEval, ,, FunctionUtils, ., toDifferentiableMultivariateVectorFunction, (, f, ), ,, optData, ), ;, }, @, Override, protected, void]
[,, FunctionUtils, ., toDifferentiableMultivariateVectorFunction, (, f, ), ,, optData, ), ;, }, @, Override, protected, void, setUp, (, ), {]
[,, optData, ), ;, }, @, Override, protected, void, setUp, (, ), {, super, ., setUp, (, ), ;, jacobianEvaluations]
[., toDifferentiableMultivariateVectorFunction, (, f, ), ,, optData, ), ;, }, @, Override, protected, void, setUp, (, ), {, super, .]
[), ,, optData, ), ;, }, @, Override, protected, void, setUp, (, ), {, super, ., setUp, (, ), ;]
[), ;, }, @, Override, protected, void, setUp, (, ), {, super, ., setUp, (, ), ;, jacobianEvaluations, =, 0]
[;, jacobianEvaluations, =, 0, ;, weightMatrixSqrt, =, squareRoot, (, getWeight, (, ), ), ;, jF, =, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (]
[., setUp, (, ), ;, jacobianEvaluations, =, 0, ;, weightMatrixSqrt, =, squareRoot, (, getWeight, (, ), ), ;, jF, =]
[=, 0, ;, weightMatrixSqrt, =, squareRoot, (, getWeight, (, ), ), ;, jF, =, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction]
[;, weightMatrixSqrt, =, squareRoot, (, getWeight, (, ), ), ;, jF, =, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, ), getObjectiveFunction]
[=, squareRoot, (, getWeight, (, ), ), ;, jF, =, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, ), getObjectiveFunction, (, )]
[;, jF, =, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, ), getObjectiveFunction, (, ), ), ;, point, =, getStartPoint, (, )]
[), ;, jF, =, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, ), getObjectiveFunction, (, ), ), ;, point, =, getStartPoint, (]
[=, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, ), getObjectiveFunction, (, ), ), ;, point, =, getStartPoint, (, ), ;, rows]
[;, point, =, getStartPoint, (, ), ;, rows, =, getTarget, (, ), ., length, ;, cols, =, point, ., length]
[., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, ), getObjectiveFunction, (, ), ), ;, point, =, getStartPoint, (, ), ;, rows, =, getTarget]
[), ;, point, =, getStartPoint, (, ), ;, rows, =, getTarget, (, ), ., length, ;, cols, =, point, .]
[), ;, point, =, getStartPoint, (, ), ;, rows, =, getTarget, (, ), ., length, ;, cols, =, point, .]
[=, getStartPoint, (, ), ;, rows, =, getTarget, (, ), ., length, ;, cols, =, point, ., length, ;, }]
[;, rows, =, getTarget, (, ), ., length, ;, cols, =, point, ., length, ;, }, protected, double, [, ]]
[=, getTarget, (, ), ., length, ;, cols, =, point, ., length, ;, }, protected, double, [, ], computeResiduals, (]
[;, cols, =, point, ., length, ;, }, protected, double, [, ], computeResiduals, (, double, [, ], objectiveValue, ), {]
[., length, ;, cols, =, point, ., length, ;, }, protected, double, [, ], computeResiduals, (, double, [, ], objectiveValue]
[=, point, ., length, ;, }, protected, double, [, ], computeResiduals, (, double, [, ], objectiveValue, ), {, final, double]
[;, }, protected, double, [, ], computeResiduals, (, double, [, ], objectiveValue, ), {, final, double, [, ], target, =]
[., length, ;, }, protected, double, [, ], computeResiduals, (, double, [, ], objectiveValue, ), {, final, double, [, ]]
[;, if, (, objectiveValue, ., length, !=, target, ., length, ), {, throw, new, DimensionMismatchException, (, target, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, target, ., length, ,, objectiveValue, ., length, ), ;, }, final, double, [, ]]
[!=, target, ., length, ), {, throw, new, DimensionMismatchException, (, target, ., length, ,, objectiveValue, ., length, ), ;, }]
[., length, !=, target, ., length, ), {, throw, new, DimensionMismatchException, (, target, ., length, ,, objectiveValue, ., length, )]
[), {, throw, new, DimensionMismatchException, (, target, ., length, ,, objectiveValue, ., length, ), ;, }, final, double, [, ]]
[., length, ), {, throw, new, DimensionMismatchException, (, target, ., length, ,, objectiveValue, ., length, ), ;, }, final, double]
[;, }, final, double, [, ], residuals, =, new, double, [, target, ., length, ], ;, for, (, int, i]
[,, objectiveValue, ., length, ), ;, }, final, double, [, ], residuals, =, new, double, [, target, ., length, ]]
[., length, ,, objectiveValue, ., length, ), ;, }, final, double, [, ], residuals, =, new, double, [, target, .]
[), ;, }, final, double, [, ], residuals, =, new, double, [, target, ., length, ], ;, for, (, int]
[., length, ), ;, }, final, double, [, ], residuals, =, new, double, [, target, ., length, ], ;, for]
[;, for, (, int, i, =, 0, ;, i, <, target, ., length, ;, i, ++, ), {, residuals, []
[], ;, for, (, int, i, =, 0, ;, i, <, target, ., length, ;, i, ++, ), {, residuals]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, target, ., length, ;, i, ++, )]
[;, i, <, target, ., length, ;, i, ++, ), {, residuals, [, i, ], =, target, [, i, ]]
[;, i, ++, ), {, residuals, [, i, ], =, target, [, i, ], -, objectiveValue, [, i, ], ;]
[<, target, ., length, ;, i, ++, ), {, residuals, [, i, ], =, target, [, i, ], -, objectiveValue]
[;, i, ++, ), {, residuals, [, i, ], =, target, [, i, ], -, objectiveValue, [, i, ], ;]
[., length, ;, i, ++, ), {, residuals, [, i, ], =, target, [, i, ], -, objectiveValue, [, i]
[), {, residuals, [, i, ], =, target, [, i, ], -, objectiveValue, [, i, ], ;, }, return, residuals]
[++, ), {, residuals, [, i, ], =, target, [, i, ], -, objectiveValue, [, i, ], ;, }, return]
[=, target, [, i, ], -, objectiveValue, [, i, ], ;, }, return, residuals, ;, }, private, RealMatrix, squareRoot, (]
[[, i, ], =, target, [, i, ], -, objectiveValue, [, i, ], ;, }, return, residuals, ;, }, private]
[], =, target, [, i, ], -, objectiveValue, [, i, ], ;, }, return, residuals, ;, }, private, RealMatrix, squareRoot]
[;, }, return, residuals, ;, }, private, RealMatrix, squareRoot, (, RealMatrix, m, ), {, if, (, m, instanceof, DiagonalMatrix, )]
[-, objectiveValue, [, i, ], ;, }, return, residuals, ;, }, private, RealMatrix, squareRoot, (, RealMatrix, m, ), {, if]
[[, i, ], -, objectiveValue, [, i, ], ;, }, return, residuals, ;, }, private, RealMatrix, squareRoot, (, RealMatrix, m]
[], -, objectiveValue, [, i, ], ;, }, return, residuals, ;, }, private, RealMatrix, squareRoot, (, RealMatrix, m, ), {]
[;, }, return, residuals, ;, }, private, RealMatrix, squareRoot, (, RealMatrix, m, ), {, if, (, m, instanceof, DiagonalMatrix, )]
[[, i, ], ;, }, return, residuals, ;, }, private, RealMatrix, squareRoot, (, RealMatrix, m, ), {, if, (, m]
[], ;, }, return, residuals, ;, }, private, RealMatrix, squareRoot, (, RealMatrix, m, ), {, if, (, m, instanceof, DiagonalMatrix]
[;, }, private, RealMatrix, squareRoot, (, RealMatrix, m, ), {, if, (, m, instanceof, DiagonalMatrix, ), {, final, int, dim]
[), {, final, int, dim, =, m, ., getRowDimension, (, ), ;, final, RealMatrix, sqrtM, =, new, DiagonalMatrix, (, dim]
[instanceof, DiagonalMatrix, ), {, final, int, dim, =, m, ., getRowDimension, (, ), ;, final, RealMatrix, sqrtM, =, new, DiagonalMatrix]
[;, final, RealMatrix, sqrtM, =, new, DiagonalMatrix, (, dim, ), ;, for, (, int, i, =, 0, ;, i, <]
[., getRowDimension, (, ), ;, final, RealMatrix, sqrtM, =, new, DiagonalMatrix, (, dim, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, sqrtM, ., setEntry, (]
[), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, sqrtM, ., setEntry]
[;, i, <, dim, ;, i, ++, ), {, sqrtM, ., setEntry, (, i, ,, i, ,, FastMath, ., sqrt]
[;, i, ++, ), {, sqrtM, ., setEntry, (, i, ,, i, ,, FastMath, ., sqrt, (, m, ., getEntry]
[<, dim, ;, i, ++, ), {, sqrtM, ., setEntry, (, i, ,, i, ,, FastMath, ., sqrt, (, m]
[;, i, ++, ), {, sqrtM, ., setEntry, (, i, ,, i, ,, FastMath, ., sqrt, (, m, ., getEntry]
[), {, sqrtM, ., setEntry, (, i, ,, i, ,, FastMath, ., sqrt, (, m, ., getEntry, (, i, ,]
[++, ), {, sqrtM, ., setEntry, (, i, ,, i, ,, FastMath, ., sqrt, (, m, ., getEntry, (, i]
[;, }, return, sqrtM, ;, }, else, {, final, EigenDecomposition, dec, =, new, EigenDecomposition, (, m, ), ;, return, dec]
[., setEntry, (, i, ,, i, ,, FastMath, ., sqrt, (, m, ., getEntry, (, i, ,, i, ), )]
[,, i, ,, FastMath, ., sqrt, (, m, ., getEntry, (, i, ,, i, ), ), ), ;, }, return]
[,, FastMath, ., sqrt, (, m, ., getEntry, (, i, ,, i, ), ), ), ;, }, return, sqrtM, ;]
[), ;, }, return, sqrtM, ;, }, else, {, final, EigenDecomposition, dec, =, new, EigenDecomposition, (, m, ), ;, return]
[., sqrt, (, m, ., getEntry, (, i, ,, i, ), ), ), ;, }, return, sqrtM, ;, }, else]
[), ), ;, }, return, sqrtM, ;, }, else, {, final, EigenDecomposition, dec, =, new, EigenDecomposition, (, m, ), ;]
[., getEntry, (, i, ,, i, ), ), ), ;, }, return, sqrtM, ;, }, else, {, final, EigenDecomposition, dec]
[,, i, ), ), ), ;, }, return, sqrtM, ;, }, else, {, final, EigenDecomposition, dec, =, new, EigenDecomposition, (]
[), ), ), ;, }, return, sqrtM, ;, }, else, {, final, EigenDecomposition, dec, =, new, EigenDecomposition, (, m, )]
[;, }, else, {, final, EigenDecomposition, dec, =, new, EigenDecomposition, (, m, ), ;, return, dec, ., getSquareRoot, (, )]
[;, return, dec, ., getSquareRoot, (, ), ;, }, }, }]
[), ;, return, dec, ., getSquareRoot, (, ), ;, }, }, }]
[;, }, }, }]
[., getSquareRoot, (, ), ;, }, }, }]
