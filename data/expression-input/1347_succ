[,, new, ReachingUsesJoinOp, (, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet]
[), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (]
[=, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler]
[., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped]
[;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;]
[=, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, static, final, class]
[., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, static]
[;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, static, final, class, ReachingUses, implements, LatticeElement, {, final, Multimap]
[., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, static, final, class, ReachingUses, implements]
[;, }, static, final, class, ReachingUses, implements, LatticeElement, {, final, Multimap, <, Var, ,, Node, >, mayUseMap, ;, public, ReachingUses]
[,, escaped, ,, compiler, ), ;, }, static, final, class, ReachingUses, implements, LatticeElement, {, final, Multimap, <, Var, ,, Node]
[,, compiler, ), ;, }, static, final, class, ReachingUses, implements, LatticeElement, {, final, Multimap, <, Var, ,, Node, >, mayUseMap]
[), ;, }, static, final, class, ReachingUses, implements, LatticeElement, {, final, Multimap, <, Var, ,, Node, >, mayUseMap, ;, public]
[=, HashMultimap, ., create, (, ), ;, }, public, ReachingUses, (, ReachingUses, other, ), {, mayUseMap, =, HashMultimap, ., create]
[;, }, public, ReachingUses, (, ReachingUses, other, ), {, mayUseMap, =, HashMultimap, ., create, (, other, ., mayUseMap, ), ;]
[., create, (, ), ;, }, public, ReachingUses, (, ReachingUses, other, ), {, mayUseMap, =, HashMultimap, ., create, (, other]
[=, HashMultimap, ., create, (, other, ., mayUseMap, ), ;, }, @, Override, public, boolean, equals, (, Object, other, )]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, ReachingUses, ), &&, (]
[., create, (, other, ., mayUseMap, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, ReachingUses, ), &&]
[., mayUseMap, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, ReachingUses]
[;, }, @, Override, public, int, hashCode, (, ), {, return, mayUseMap, ., hashCode, (, ), ;, }, }, private]
[&&, (, (, ReachingUses, ), other, ), ., mayUseMap, ., equals, (, this, ., mayUseMap, ), ;, }, @, Override]
[), &&, (, (, ReachingUses, ), other, ), ., mayUseMap, ., equals, (, this, ., mayUseMap, ), ;, }, @]
[instanceof, ReachingUses, ), &&, (, (, ReachingUses, ), other, ), ., mayUseMap, ., equals, (, this, ., mayUseMap, ), ;]
[;, }, @, Override, public, int, hashCode, (, ), {, return, mayUseMap, ., hashCode, (, ), ;, }, }, private]
[., equals, (, this, ., mayUseMap, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, mayUseMap, .]
[., mayUseMap, ., equals, (, this, ., mayUseMap, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), ., mayUseMap, ., equals, (, this, ., mayUseMap, ), ;, }, @, Override, public, int, hashCode, (, ), {]
[), ., mayUseMap, ., equals, (, this, ., mayUseMap, ), ;, }, @, Override, public, int, hashCode, (, ), {]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, mayUseMap, ., hashCode, (, ), ;, }, }]
[., mayUseMap, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, mayUseMap, ., hashCode, (, ), ;]
[;, }, }, private, static, class, ReachingUsesJoinOp, implements, JoinOp, <, ReachingUses, >, {, @, Override, public, ReachingUses, apply, (, List]
[., hashCode, (, ), ;, }, }, private, static, class, ReachingUsesJoinOp, implements, JoinOp, <, ReachingUses, >, {, @, Override, public]
[;, for, (, ReachingUses, uses, :, from, ), {, result, ., mayUseMap, ., putAll, (, uses, ., mayUseMap, ), ;]
[), {, result, ., mayUseMap, ., putAll, (, uses, ., mayUseMap, ), ;, }, return, result, ;, }, }, @]
[;, }, return, result, ;, }, }, @, Override, boolean, isForward, (, ), {, return, false, ;, }, @, Override]
[., putAll, (, uses, ., mayUseMap, ), ;, }, return, result, ;, }, }, @, Override, boolean, isForward, (, )]
[., mayUseMap, ., putAll, (, uses, ., mayUseMap, ), ;, }, return, result, ;, }, }, @, Override, boolean, isForward]
[), ;, }, return, result, ;, }, }, @, Override, boolean, isForward, (, ), {, return, false, ;, }, @]
[., mayUseMap, ), ;, }, return, result, ;, }, }, @, Override, boolean, isForward, (, ), {, return, false, ;]
[;, }, }, @, Override, boolean, isForward, (, ), {, return, false, ;, }, @, Override, ReachingUses, createEntryLattice, (, )]
[;, }, @, Override, ReachingUses, createEntryLattice, (, ), {, return, new, ReachingUses, (, ), ;, }, @, Override, ReachingUses, createInitialEstimateLattice]
[;, }, @, Override, ReachingUses, createInitialEstimateLattice, (, ), {, return, new, ReachingUses, (, ), ;, }, @, Override, ReachingUses, flowThrough]
[;, }, @, Override, ReachingUses, flowThrough, (, Node, n, ,, ReachingUses, input, ), {, ReachingUses, output, =, new, ReachingUses, (]
[;, boolean, conditional, =, hasExceptionHandler, (, n, ), ;, computeMayUse, (, n, ,, n, ,, output, ,, conditional, ), ;]
[), ;, boolean, conditional, =, hasExceptionHandler, (, n, ), ;, computeMayUse, (, n, ,, n, ,, output, ,, conditional, )]
[;, computeMayUse, (, n, ,, n, ,, output, ,, conditional, ), ;, return, output, ;, }, private, boolean, hasExceptionHandler, (]
[), ;, computeMayUse, (, n, ,, n, ,, output, ,, conditional, ), ;, return, output, ;, }, private, boolean, hasExceptionHandler]
[;, return, output, ;, }, private, boolean, hasExceptionHandler, (, Node, cfgNode, ), {, List, <, DiGraphEdge, <, Node, ,, Branch]
[,, n, ,, output, ,, conditional, ), ;, return, output, ;, }, private, boolean, hasExceptionHandler, (, Node, cfgNode, ), {]
[,, output, ,, conditional, ), ;, return, output, ;, }, private, boolean, hasExceptionHandler, (, Node, cfgNode, ), {, List, <]
[,, conditional, ), ;, return, output, ;, }, private, boolean, hasExceptionHandler, (, Node, cfgNode, ), {, List, <, DiGraphEdge, <]
[), ;, return, output, ;, }, private, boolean, hasExceptionHandler, (, Node, cfgNode, ), {, List, <, DiGraphEdge, <, Node, ,]
[;, }, private, boolean, hasExceptionHandler, (, Node, cfgNode, ), {, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, branchEdges]
[;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, branchEdges, ), {, if, (, edge, ., getValue, (]
[., getOutEdges, (, cfgNode, ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, branchEdges, ), {, if]
[), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, branchEdges, ), {, if, (, edge, ., getValue]
[), {, if, (, edge, ., getValue, (, ), ==, Branch, ., ON_EX, ), {, return, true, ;, }, }]
[), {, return, true, ;, }, }, return, false, ;, }, private, void, computeMayUse, (, Node, n, ,, Node, cfgNode]
[==, Branch, ., ON_EX, ), {, return, true, ;, }, }, return, false, ;, }, private, void, computeMayUse, (, Node]
[., getValue, (, ), ==, Branch, ., ON_EX, ), {, return, true, ;, }, }, return, false, ;, }, private]
[), {, return, true, ;, }, }, return, false, ;, }, private, void, computeMayUse, (, Node, n, ,, Node, cfgNode]
[., ON_EX, ), {, return, true, ;, }, }, return, false, ;, }, private, void, computeMayUse, (, Node, n, ,]
[;, }, }, return, false, ;, }, private, void, computeMayUse, (, Node, n, ,, Node, cfgNode, ,, ReachingUses, output, ,]
[;, }, private, void, computeMayUse, (, Node, n, ,, Node, cfgNode, ,, ReachingUses, output, ,, boolean, conditional, ), {, switch]
[), {, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., NAME, :, addToUseIfLocal]
[., getType, (, ), ), {, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token]
[:, case, Token, ., FUNCTION, :, return, ;, case, Token, ., NAME, :, addToUseIfLocal, (, n, ., getString, (, )]
[., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., NAME, :, addToUseIfLocal, (, n, ., getString]
[:, return, ;, case, Token, ., NAME, :, addToUseIfLocal, (, n, ., getString, (, ), ,, cfgNode, ,, output, )]
[., FUNCTION, :, return, ;, case, Token, ., NAME, :, addToUseIfLocal, (, n, ., getString, (, ), ,, cfgNode, ,]
[:, addToUseIfLocal, (, n, ., getString, (, ), ,, cfgNode, ,, output, ), ;, return, ;, case, Token, ., WHILE]
[., NAME, :, addToUseIfLocal, (, n, ., getString, (, ), ,, cfgNode, ,, output, ), ;, return, ;, case, Token]
[;, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeMayUse, (]
[,, cfgNode, ,, output, ), ;, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token]
[., getString, (, ), ,, cfgNode, ,, output, ), ;, return, ;, case, Token, ., WHILE, :, case, Token, .]
[,, output, ), ;, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF]
[), ;, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeMayUse]
[:, case, Token, ., DO, :, case, Token, ., IF, :, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,]
[., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n]
[:, case, Token, ., IF, :, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional]
[., DO, :, case, Token, ., IF, :, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output]
[:, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[., IF, :, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return]
[;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMayUse]
[,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, .]
[., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :]
[), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil]
[,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (]
[,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, )]
[), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {]
[:, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, )]
[., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMayUse, (, NodeUtil, ., getConditionExpression, (]
[), {, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else]
[), {, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else]
[., isForIn, (, n, ), ), {, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,]
[), ), {, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }]
[;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (]
[,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;]
[., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n]
[), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, )]
[,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs]
[,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs]
[), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext]
[;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs]
[., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (]
[;, if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if]
[., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (]
[), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), &&, !]
[., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName]
[=, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), &&, !, conditional, ), {]
[;, }, if, (, lhs, ., isName, (, ), &&, !, conditional, ), {, removeFromUseIfLocal, (, lhs, ., getString, (]
[., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), &&, !, conditional, ), {, removeFromUseIfLocal, (]
[), {, removeFromUseIfLocal, (, lhs, ., getString, (, ), ,, output, ), ;, }, computeMayUse, (, rhs, ,, cfgNode, ,]
[&&, !, conditional, ), {, removeFromUseIfLocal, (, lhs, ., getString, (, ), ,, output, ), ;, }, computeMayUse, (, rhs]
[., isName, (, ), &&, !, conditional, ), {, removeFromUseIfLocal, (, lhs, ., getString, (, ), ,, output, ), ;]
[), {, removeFromUseIfLocal, (, lhs, ., getString, (, ), ,, output, ), ;, }, computeMayUse, (, rhs, ,, cfgNode, ,]
[), {, removeFromUseIfLocal, (, lhs, ., getString, (, ), ,, output, ), ;, }, computeMayUse, (, rhs, ,, cfgNode, ,]
[;, }, computeMayUse, (, rhs, ,, cfgNode, ,, output, ,, conditional, ), ;, }, return, ;, case, Token, ., AND]
[,, output, ), ;, }, computeMayUse, (, rhs, ,, cfgNode, ,, output, ,, conditional, ), ;, }, return, ;, case]
[., getString, (, ), ,, output, ), ;, }, computeMayUse, (, rhs, ,, cfgNode, ,, output, ,, conditional, ), ;]
[), ;, }, computeMayUse, (, rhs, ,, cfgNode, ,, output, ,, conditional, ), ;, }, return, ;, case, Token, .]
[;, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMayUse, (, n, ., getLastChild, (]
[,, cfgNode, ,, output, ,, conditional, ), ;, }, return, ;, case, Token, ., AND, :, case, Token, ., OR]
[,, output, ,, conditional, ), ;, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMayUse]
[,, conditional, ), ;, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMayUse, (, n]
[), ;, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMayUse, (, n, ., getLastChild]
[:, case, Token, ., OR, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, )]
[., AND, :, case, Token, ., OR, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,]
[:, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, .]
[., OR, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (]
[;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token]
[,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,]
[., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,]
[,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return]
[), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[;, return, ;, case, Token, ., HOOK, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,]
[,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., HOOK, :, computeMayUse, (, n, ., getLastChild]
[., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., HOOK, :, computeMayUse]
[,, output, ,, conditional, ), ;, return, ;, case, Token, ., HOOK, :, computeMayUse, (, n, ., getLastChild, (, )]
[,, conditional, ), ;, return, ;, case, Token, ., HOOK, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode]
[), ;, return, ;, case, Token, ., HOOK, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output]
[:, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, .]
[., HOOK, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (]
[;, computeMayUse, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;]
[,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,]
[., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), .]
[,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,]
[,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,]
[), ;, computeMayUse, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, )]
[;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token]
[,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,]
[., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,]
[., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, .]
[,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return]
[), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[;, return, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;, Preconditions, ., checkState]
[,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., VAR, :, Node, varName, =, n, .]
[., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., VAR, :, Node]
[,, output, ,, conditional, ), ;, return, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (]
[,, conditional, ), ;, return, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;]
[), ;, return, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;, Preconditions, .]
[:, Node, varName, =, n, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, n, ., hasChildren, (, ), ,]
[., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, n, ., hasChildren, (]
[;, Preconditions, ., checkState, (, n, ., hasChildren, (, ), ,, "AST should be normalized", ), ;, if, (, varName, ., hasChildren, (]
[., getFirstChild, (, ), ;, Preconditions, ., checkState, (, n, ., hasChildren, (, ), ,, "AST should be normalized", ), ;, if, (]
[;, if, (, varName, ., hasChildren, (, ), ), {, computeMayUse, (, varName, ., getFirstChild, (, ), ,, cfgNode, ,]
[., checkState, (, n, ., hasChildren, (, ), ,, "AST should be normalized", ), ;, if, (, varName, ., hasChildren, (, ), )]
[,, "AST should be normalized", ), ;, if, (, varName, ., hasChildren, (, ), ), {, computeMayUse, (, varName, ., getFirstChild, (, )]
[., hasChildren, (, ), ,, "AST should be normalized", ), ;, if, (, varName, ., hasChildren, (, ), ), {, computeMayUse, (, varName]
[), ;, if, (, varName, ., hasChildren, (, ), ), {, computeMayUse, (, varName, ., getFirstChild, (, ), ,, cfgNode]
[), {, computeMayUse, (, varName, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, if, (, !]
[., hasChildren, (, ), ), {, computeMayUse, (, varName, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[;, if, (, !, conditional, ), {, removeFromUseIfLocal, (, varName, ., getString, (, ), ,, output, ), ;, }, }]
[,, cfgNode, ,, output, ,, conditional, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (, varName, ., getString, (]
[., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (]
[,, output, ,, conditional, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (, varName, ., getString, (, ), ,]
[,, conditional, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (, varName, ., getString, (, ), ,, output, )]
[), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (, varName, ., getString, (, ), ,, output, ), ;, }]
[), {, removeFromUseIfLocal, (, varName, ., getString, (, ), ,, output, ), ;, }, }, return, ;, default, :, if]
[), {, removeFromUseIfLocal, (, varName, ., getString, (, ), ,, output, ), ;, }, }, return, ;, default, :, if]
[;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (]
[,, output, ), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, n]
[., getString, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (]
[), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, n, ., getFirstChild]
[), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (, name]
[&&, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (, )]
[., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =]
[), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (]
[), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (, name]
[., isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, )]
[., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if]
[;, if, (, !, conditional, ), {, removeFromUseIfLocal, (, name, ., getString, (, ), ,, output, ), ;, }, if]
[., getFirstChild, (, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (, name, ., getString, (, ), ,, output]
[), {, removeFromUseIfLocal, (, name, ., getString, (, ), ,, output, ), ;, }, if, (, !, n, ., isAssign]
[), {, removeFromUseIfLocal, (, name, ., getString, (, ), ,, output, ), ;, }, if, (, !, n, ., isAssign]
[;, }, if, (, !, n, ., isAssign, (, ), ), {, addToUseIfLocal, (, name, ., getString, (, ), ,]
[,, output, ), ;, }, if, (, !, n, ., isAssign, (, ), ), {, addToUseIfLocal, (, name, ., getString]
[., getString, (, ), ,, output, ), ;, }, if, (, !, n, ., isAssign, (, ), ), {, addToUseIfLocal]
[), ;, }, if, (, !, n, ., isAssign, (, ), ), {, addToUseIfLocal, (, name, ., getString, (, )]
[), {, addToUseIfLocal, (, name, ., getString, (, ), ,, cfgNode, ,, output, ), ;, }, computeMayUse, (, name, .]
[), {, addToUseIfLocal, (, name, ., getString, (, ), ,, cfgNode, ,, output, ), ;, }, computeMayUse, (, name, .]
[., isAssign, (, ), ), {, addToUseIfLocal, (, name, ., getString, (, ), ,, cfgNode, ,, output, ), ;, }]
[;, }, computeMayUse, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {]
[,, cfgNode, ,, output, ), ;, }, computeMayUse, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,, conditional]
[., getString, (, ), ,, cfgNode, ,, output, ), ;, }, computeMayUse, (, name, ., getNext, (, ), ,, cfgNode]
[,, output, ), ;, }, computeMayUse, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;]
[), ;, }, computeMayUse, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else]
[;, }, else, {, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=, null, ;, c]
[,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getLastChild, (]
[., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, for, (, Node, c, =]
[,, output, ,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getLastChild, (, ), ;]
[,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=]
[), ;, }, else, {, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=, null, ;]
[;, c, !=, null, ;, c, =, n, ., getChildBefore, (, c, ), ), {, computeMayUse, (, c, ,, cfgNode]
[., getLastChild, (, ), ;, c, !=, null, ;, c, =, n, ., getChildBefore, (, c, ), ), {, computeMayUse]
[;, c, =, n, ., getChildBefore, (, c, ), ), {, computeMayUse, (, c, ,, cfgNode, ,, output, ,, conditional]
[!=, null, ;, c, =, n, ., getChildBefore, (, c, ), ), {, computeMayUse, (, c, ,, cfgNode, ,, output]
[;, c, =, n, ., getChildBefore, (, c, ), ), {, computeMayUse, (, c, ,, cfgNode, ,, output, ,, conditional]
[=, n, ., getChildBefore, (, c, ), ), {, computeMayUse, (, c, ,, cfgNode, ,, output, ,, conditional, ), ;]
[), {, computeMayUse, (, c, ,, cfgNode, ,, output, ,, conditional, ), ;, }, }, }, }, private, void, addToUseIfLocal]
[., getChildBefore, (, c, ), ), {, computeMayUse, (, c, ,, cfgNode, ,, output, ,, conditional, ), ;, }, }]
[), ), {, computeMayUse, (, c, ,, cfgNode, ,, output, ,, conditional, ), ;, }, }, }, }, private, void]
[;, }, }, }, }, private, void, addToUseIfLocal, (, String, name, ,, Node, node, ,, ReachingUses, use, ), {, Var]
[,, cfgNode, ,, output, ,, conditional, ), ;, }, }, }, }, private, void, addToUseIfLocal, (, String, name, ,, Node]
[,, output, ,, conditional, ), ;, }, }, }, }, private, void, addToUseIfLocal, (, String, name, ,, Node, node, ,]
[,, conditional, ), ;, }, }, }, }, private, void, addToUseIfLocal, (, String, name, ,, Node, node, ,, ReachingUses, use]
[), ;, }, }, }, }, private, void, addToUseIfLocal, (, String, name, ,, Node, node, ,, ReachingUses, use, ), {]
[;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !]
[., getVar, (, name, ), ;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return]
[), ;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (]
[), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {, use, ., mayUseMap, .]
[||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, )]
[==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (]
[||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, )]
[), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {, use, ., mayUseMap, .]
[!=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {, use, .]
[., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {]
[), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {, use, ., mayUseMap, .]
[), {, use, ., mayUseMap, ., put, (, var, ,, node, ), ;, }, }, private, void, removeFromUseIfLocal, (, String]
[), {, use, ., mayUseMap, ., put, (, var, ,, node, ), ;, }, }, private, void, removeFromUseIfLocal, (, String]
[., contains, (, var, ), ), {, use, ., mayUseMap, ., put, (, var, ,, node, ), ;, }, }]
[), ), {, use, ., mayUseMap, ., put, (, var, ,, node, ), ;, }, }, private, void, removeFromUseIfLocal, (]
[;, }, }, private, void, removeFromUseIfLocal, (, String, name, ,, ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar]
[., put, (, var, ,, node, ), ;, }, }, private, void, removeFromUseIfLocal, (, String, name, ,, ReachingUses, use, )]
[., mayUseMap, ., put, (, var, ,, node, ), ;, }, }, private, void, removeFromUseIfLocal, (, String, name, ,, ReachingUses]
[,, node, ), ;, }, }, private, void, removeFromUseIfLocal, (, String, name, ,, ReachingUses, use, ), {, Var, var, =]
[), ;, }, }, private, void, removeFromUseIfLocal, (, String, name, ,, ReachingUses, use, ), {, Var, var, =, jsScope, .]
[;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !]
[., getVar, (, name, ), ;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return]
[), ;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (]
[), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {, use, ., mayUseMap, .]
[||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, )]
[==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (]
[||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, )]
[), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {, use, ., mayUseMap, .]
[!=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {, use, .]
[., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {]
[), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {, use, ., mayUseMap, .]
[), {, use, ., mayUseMap, ., removeAll, (, var, ), ;, }, }, Collection, <, Node, >, getUses, (, String]
[), {, use, ., mayUseMap, ., removeAll, (, var, ), ;, }, }, Collection, <, Node, >, getUses, (, String]
[., contains, (, var, ), ), {, use, ., mayUseMap, ., removeAll, (, var, ), ;, }, }, Collection, <]
[), ), {, use, ., mayUseMap, ., removeAll, (, var, ), ;, }, }, Collection, <, Node, >, getUses, (]
[;, }, }, Collection, <, Node, >, getUses, (, String, name, ,, Node, defNode, ), {, GraphNode, <, Node, ,]
[., removeAll, (, var, ), ;, }, }, Collection, <, Node, >, getUses, (, String, name, ,, Node, defNode, )]
[., mayUseMap, ., removeAll, (, var, ), ;, }, }, Collection, <, Node, >, getUses, (, String, name, ,, Node]
[), ;, }, }, Collection, <, Node, >, getUses, (, String, name, ,, Node, defNode, ), {, GraphNode, <, Node]
[;, Preconditions, ., checkNotNull, (, n, ), ;, FlowState, <, ReachingUses, >, state, =, n, ., getAnnotation, (, ), ;]
[., getNode, (, defNode, ), ;, Preconditions, ., checkNotNull, (, n, ), ;, FlowState, <, ReachingUses, >, state, =, n]
[), ;, Preconditions, ., checkNotNull, (, n, ), ;, FlowState, <, ReachingUses, >, state, =, n, ., getAnnotation, (, )]
[;, FlowState, <, ReachingUses, >, state, =, n, ., getAnnotation, (, ), ;, return, state, ., getOut, (, ), .]
[., checkNotNull, (, n, ), ;, FlowState, <, ReachingUses, >, state, =, n, ., getAnnotation, (, ), ;, return, state]
[), ;, FlowState, <, ReachingUses, >, state, =, n, ., getAnnotation, (, ), ;, return, state, ., getOut, (, )]
[;, return, state, ., getOut, (, ), ., mayUseMap, ., get, (, jsScope, ., getVar, (, name, ), ), ;]
[., getAnnotation, (, ), ;, return, state, ., getOut, (, ), ., mayUseMap, ., get, (, jsScope, ., getVar, (]
[;, }, }]
[., get, (, jsScope, ., getVar, (, name, ), ), ;, }, }]
[., mayUseMap, ., get, (, jsScope, ., getVar, (, name, ), ), ;, }, }]
[., getOut, (, ), ., mayUseMap, ., get, (, jsScope, ., getVar, (, name, ), ), ;, }, }]
[), ;, }, }]
[., getVar, (, name, ), ), ;, }, }]
[), ), ;, }, }]
