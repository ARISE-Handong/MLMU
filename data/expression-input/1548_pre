[PointVectorValuePair, ,, OPTIM, >, >, {, public, double, [, ], fit, (, Collection, <, WeightedObservedPoint, >, points, ), {, return]
[PointVectorValuePair, ,, OPTIM, >, >, {, public, double, [, ], fit, (, Collection, <, WeightedObservedPoint, >, points, ), {, return]
[PointVectorValuePair, ,, OPTIM, >, >, {, public, double, [, ], fit, (, Collection, <, WeightedObservedPoint, >, points, ), {, return]
[OPTIM, >, >, {, public, double, [, ], fit, (, Collection, <, WeightedObservedPoint, >, points, ), {, return, getOptimizer, (]
[double, [, ], points, ;, public, TheoreticalValuesFunction, (, final, ParametricUnivariateFunction, f, ,, final, Collection, <, WeightedObservedPoint, >, observations, ), {]
[double, [, ], points, ;, public, TheoreticalValuesFunction, (, final, ParametricUnivariateFunction, f, ,, final, Collection, <, WeightedObservedPoint, >, observations, ), {]
[;, public, TheoreticalValuesFunction, (, final, ParametricUnivariateFunction, f, ,, final, Collection, <, WeightedObservedPoint, >, observations, ), {, this, ., f, =]
[f, ,, final, Collection, <, WeightedObservedPoint, >, observations, ), {, this, ., f, =, f, ;, final, int, len, =]
[f, ,, final, Collection, <, WeightedObservedPoint, >, observations, ), {, this, ., f, =, f, ;, final, int, len, =]
[>, observations, ), {, this, ., f, =, f, ;, final, int, len, =, observations, ., size, (, ), ;]
[>, observations, ), {, this, ., f, =, f, ;, final, int, len, =, observations, ., size, (, ), ;]
[this, ., f, =, f, ;, final, int, len, =, observations, ., size, (, ), ;, this, ., points, =]
[=, f, ;, final, int, len, =, observations, ., size, (, ), ;, this, ., points, =, new, double, []
[=, observations, ., size, (, ), ;, this, ., points, =, new, double, [, len, ], ;, int, i, =]
[this, ., points, =, new, double, [, len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :]
[=, new, double, [, len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {]
[=, new, double, [, len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {]
[=, new, double, [, len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {]
[len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {, this, ., points, []
[len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {, this, ., points, []
[i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {, this, ., points, [, i, ++, ], =]
[i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {, this, ., points, [, i, ++, ], =]
[[, i, ++, ], =, obs, ., getX, (, ), ;, }, }, public, MultivariateVectorFunction, getModelFunction, (, ), {, return]
[MultivariateVectorFunction, (, ), {, public, double, [, ], value, (, double, [, ], p, ), {, final, int, len, =]
[MultivariateVectorFunction, (, ), {, public, double, [, ], value, (, double, [, ], p, ), {, final, int, len, =]
[double, [, ], p, ), {, final, int, len, =, points, ., length, ;, final, double, [, ], values, =]
[p, ), {, final, int, len, =, points, ., length, ;, final, double, [, ], values, =, new, double, []
[., length, ;, final, double, [, ], values, =, new, double, [, len, ], ;, for, (, int, i, =]
[;, final, double, [, ], values, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], values, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], values, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <]
[], values, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[], values, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, values, []
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, values, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, values, [, i, ], =]
[=, 0, ;, i, <, len, ;, i, ++, ), {, values, [, i, ], =, f, ., value, (]
[=, 0, ;, i, <, len, ;, i, ++, ), {, values, [, i, ], =, f, ., value, (]
[;, i, <, len, ;, i, ++, ), {, values, [, i, ], =, f, ., value, (, points, []
[len, ;, i, ++, ), {, values, [, i, ], =, f, ., value, (, points, [, i, ], ,]
[{, values, [, i, ], =, f, ., value, (, points, [, i, ], ,, p, ), ;, }, return]
[], ,, p, ), ;, }, return, values, ;, }, }, ;, }, public, MultivariateMatrixFunction, getModelFunctionJacobian, (, ), {, return]
[), {, public, double, [, ], [, ], value, (, double, [, ], p, ), {, final, int, len, =]
[), {, public, double, [, ], [, ], value, (, double, [, ], p, ), {, final, int, len, =]
[], p, ), {, final, int, len, =, points, ., length, ;, final, double, [, ], [, ], jacobian, =]
[{, final, int, len, =, points, ., length, ;, final, double, [, ], [, ], jacobian, =, new, double, []
[double, [, ], [, ], jacobian, =, new, double, [, len, ], [, ], ;, for, (, int, i, =]
[], [, ], jacobian, =, new, double, [, len, ], [, ], ;, for, (, int, i, =, 0, ;]
[], [, ], jacobian, =, new, double, [, len, ], [, ], ;, for, (, int, i, =, 0, ;]
[], jacobian, =, new, double, [, len, ], [, ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, double, [, len, ], [, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[=, new, double, [, len, ], [, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[len, ], [, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[len, ], [, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[[, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, jacobian, []
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, jacobian, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, jacobian, [, i, ], =]
[=, 0, ;, i, <, len, ;, i, ++, ), {, jacobian, [, i, ], =, f, ., gradient, (]
[=, 0, ;, i, <, len, ;, i, ++, ), {, jacobian, [, i, ], =, f, ., gradient, (]
[;, i, <, len, ;, i, ++, ), {, jacobian, [, i, ], =, f, ., gradient, (, points, []
[len, ;, i, ++, ), {, jacobian, [, i, ], =, f, ., gradient, (, points, [, i, ], ,]
[{, jacobian, [, i, ], =, f, ., gradient, (, points, [, i, ], ,, p, ), ;, }, return]
