[., apache, ., commons, ., lang3, ., StringUtils, ;, public, abstract, class, StrMatcher, {, private, static, final, StrMatcher, COMMA_MATCHER, =]
[commons, ., lang3, ., StringUtils, ;, public, abstract, class, StrMatcher, {, private, static, final, StrMatcher, COMMA_MATCHER, =, new, CharMatcher, (]
[StrMatcher, {, private, static, final, StrMatcher, COMMA_MATCHER, =, new, CharMatcher, (, ',', ), ;, private, static, final, StrMatcher, TAB_MATCHER, =]
[static, final, StrMatcher, COMMA_MATCHER, =, new, CharMatcher, (, ',', ), ;, private, static, final, StrMatcher, TAB_MATCHER, =, new, CharMatcher, (]
[), ;, private, static, final, StrMatcher, TAB_MATCHER, =, new, CharMatcher, (, '\t', ), ;, private, static, final, StrMatcher, SPACE_MATCHER, =]
[static, final, StrMatcher, TAB_MATCHER, =, new, CharMatcher, (, '\t', ), ;, private, static, final, StrMatcher, SPACE_MATCHER, =, new, CharMatcher, (]
[), ;, private, static, final, StrMatcher, SPACE_MATCHER, =, new, CharMatcher, (, ' ', ), ;, private, static, final, StrMatcher, SPLIT_MATCHER, =]
[static, final, StrMatcher, SPACE_MATCHER, =, new, CharMatcher, (, ' ', ), ;, private, static, final, StrMatcher, SPLIT_MATCHER, =, new, CharSetMatcher, (]
[static, final, StrMatcher, SPACE_MATCHER, =, new, CharMatcher, (, ' ', ), ;, private, static, final, StrMatcher, SPLIT_MATCHER, =, new, CharSetMatcher, (]
[final, StrMatcher, SPLIT_MATCHER, =, new, CharSetMatcher, (, " \t\n\r\f", ., toCharArray, (, ), ), ;, private, static, final, StrMatcher, TRIM_MATCHER, =]
[), ), ;, private, static, final, StrMatcher, TRIM_MATCHER, =, new, TrimMatcher, (, ), ;, private, static, final, StrMatcher, SINGLE_QUOTE_MATCHER, =]
[private, static, final, StrMatcher, TRIM_MATCHER, =, new, TrimMatcher, (, ), ;, private, static, final, StrMatcher, SINGLE_QUOTE_MATCHER, =, new, CharMatcher, (]
[), ;, private, static, final, StrMatcher, SINGLE_QUOTE_MATCHER, =, new, CharMatcher, (, '\'', ), ;, private, static, final, StrMatcher, DOUBLE_QUOTE_MATCHER, =]
[static, final, StrMatcher, SINGLE_QUOTE_MATCHER, =, new, CharMatcher, (, '\'', ), ;, private, static, final, StrMatcher, DOUBLE_QUOTE_MATCHER, =, new, CharMatcher, (]
[), ;, private, static, final, StrMatcher, DOUBLE_QUOTE_MATCHER, =, new, CharMatcher, (, '"', ), ;, private, static, final, StrMatcher, QUOTE_MATCHER, =]
[static, final, StrMatcher, DOUBLE_QUOTE_MATCHER, =, new, CharMatcher, (, '"', ), ;, private, static, final, StrMatcher, QUOTE_MATCHER, =, new, CharSetMatcher, (]
[static, final, StrMatcher, DOUBLE_QUOTE_MATCHER, =, new, CharMatcher, (, '"', ), ;, private, static, final, StrMatcher, QUOTE_MATCHER, =, new, CharSetMatcher, (]
[final, StrMatcher, QUOTE_MATCHER, =, new, CharSetMatcher, (, "'\"", ., toCharArray, (, ), ), ;, private, static, final, StrMatcher, NONE_MATCHER, =]
[;, private, static, final, StrMatcher, NONE_MATCHER, =, new, NoMatcher, (, ), ;, public, static, StrMatcher, commaMatcher, (, ), {, return]
[;, public, static, StrMatcher, commaMatcher, (, ), {, return, COMMA_MATCHER, ;, }, public, static, StrMatcher, tabMatcher, (, ), {, return]
[}, public, static, StrMatcher, tabMatcher, (, ), {, return, TAB_MATCHER, ;, }, public, static, StrMatcher, spaceMatcher, (, ), {, return]
[}, public, static, StrMatcher, spaceMatcher, (, ), {, return, SPACE_MATCHER, ;, }, public, static, StrMatcher, splitMatcher, (, ), {, return]
[}, public, static, StrMatcher, splitMatcher, (, ), {, return, SPLIT_MATCHER, ;, }, public, static, StrMatcher, trimMatcher, (, ), {, return]
[}, public, static, StrMatcher, trimMatcher, (, ), {, return, TRIM_MATCHER, ;, }, public, static, StrMatcher, singleQuoteMatcher, (, ), {, return]
[}, public, static, StrMatcher, singleQuoteMatcher, (, ), {, return, SINGLE_QUOTE_MATCHER, ;, }, public, static, StrMatcher, doubleQuoteMatcher, (, ), {, return]
[}, public, static, StrMatcher, doubleQuoteMatcher, (, ), {, return, DOUBLE_QUOTE_MATCHER, ;, }, public, static, StrMatcher, quoteMatcher, (, ), {, return]
[}, public, static, StrMatcher, quoteMatcher, (, ), {, return, QUOTE_MATCHER, ;, }, public, static, StrMatcher, noneMatcher, (, ), {, return]
[StrMatcher, noneMatcher, (, ), {, return, NONE_MATCHER, ;, }, public, static, StrMatcher, charMatcher, (, final, char, ch, ), {, return]
[), {, return, NONE_MATCHER, ;, }, public, static, StrMatcher, charMatcher, (, final, char, ch, ), {, return, new, CharMatcher, (]
[new, CharMatcher, (, ch, ), ;, }, public, static, StrMatcher, charSetMatcher, (, final, char, ..., chars, ), {, if, (]
[new, CharMatcher, (, ch, ), ;, }, public, static, StrMatcher, charSetMatcher, (, final, char, ..., chars, ), {, if, (]
[new, CharMatcher, (, ch, ), ;, }, public, static, StrMatcher, charSetMatcher, (, final, char, ..., chars, ), {, if, (]
[(, ch, ), ;, }, public, static, StrMatcher, charSetMatcher, (, final, char, ..., chars, ), {, if, (, chars, ==]
[), ;, }, public, static, StrMatcher, charSetMatcher, (, final, char, ..., chars, ), {, if, (, chars, ==, null, ||]
[), ;, }, public, static, StrMatcher, charSetMatcher, (, final, char, ..., chars, ), {, if, (, chars, ==, null, ||]
[), ;, }, public, static, StrMatcher, charSetMatcher, (, final, char, ..., chars, ), {, if, (, chars, ==, null, ||]
[static, StrMatcher, charSetMatcher, (, final, char, ..., chars, ), {, if, (, chars, ==, null, ||, chars, ., length, ==]
[final, char, ..., chars, ), {, if, (, chars, ==, null, ||, chars, ., length, ==, 0, ), {, return]
[{, if, (, chars, ==, null, ||, chars, ., length, ==, 0, ), {, return, NONE_MATCHER, ;, }, if, (]
[{, if, (, chars, ==, null, ||, chars, ., length, ==, 0, ), {, return, NONE_MATCHER, ;, }, if, (]
[{, if, (, chars, ==, null, ||, chars, ., length, ==, 0, ), {, return, NONE_MATCHER, ;, }, if, (]
[==, null, ||, chars, ., length, ==, 0, ), {, return, NONE_MATCHER, ;, }, if, (, chars, ., length, ==]
[., length, ==, 0, ), {, return, NONE_MATCHER, ;, }, if, (, chars, ., length, ==, 1, ), {, return]
[0, ), {, return, NONE_MATCHER, ;, }, if, (, chars, ., length, ==, 1, ), {, return, new, CharMatcher, (]
[0, ), {, return, NONE_MATCHER, ;, }, if, (, chars, ., length, ==, 1, ), {, return, new, CharMatcher, (]
[{, return, NONE_MATCHER, ;, }, if, (, chars, ., length, ==, 1, ), {, return, new, CharMatcher, (, chars, []
[(, chars, ., length, ==, 1, ), {, return, new, CharMatcher, (, chars, [, 0, ], ), ;, }, return]
[length, ==, 1, ), {, return, new, CharMatcher, (, chars, [, 0, ], ), ;, }, return, new, CharSetMatcher, (]
[return, new, CharSetMatcher, (, chars, ), ;, }, public, static, StrMatcher, charSetMatcher, (, final, String, chars, ), {, if, (]
[return, new, CharSetMatcher, (, chars, ), ;, }, public, static, StrMatcher, charSetMatcher, (, final, String, chars, ), {, if, (]
[chars, ), ;, }, public, static, StrMatcher, charSetMatcher, (, final, String, chars, ), {, if, (, StringUtils, ., isEmpty, (]
[static, StrMatcher, charSetMatcher, (, final, String, chars, ), {, if, (, StringUtils, ., isEmpty, (, chars, ), ), {, return]
[String, chars, ), {, if, (, StringUtils, ., isEmpty, (, chars, ), ), {, return, NONE_MATCHER, ;, }, if, (]
[String, chars, ), {, if, (, StringUtils, ., isEmpty, (, chars, ), ), {, return, NONE_MATCHER, ;, }, if, (]
[String, chars, ), {, if, (, StringUtils, ., isEmpty, (, chars, ), ), {, return, NONE_MATCHER, ;, }, if, (]
[StringUtils, ., isEmpty, (, chars, ), ), {, return, NONE_MATCHER, ;, }, if, (, chars, ., length, (, ), ==]
[chars, ), ), {, return, NONE_MATCHER, ;, }, if, (, chars, ., length, (, ), ==, 1, ), {, return]
[{, return, NONE_MATCHER, ;, }, if, (, chars, ., length, (, ), ==, 1, ), {, return, new, CharMatcher, (]
[{, return, NONE_MATCHER, ;, }, if, (, chars, ., length, (, ), ==, 1, ), {, return, new, CharMatcher, (]
[}, if, (, chars, ., length, (, ), ==, 1, ), {, return, new, CharMatcher, (, chars, ., charAt, (]
[(, ), ==, 1, ), {, return, new, CharMatcher, (, chars, ., charAt, (, 0, ), ), ;, }, return]
[1, ), {, return, new, CharMatcher, (, chars, ., charAt, (, 0, ), ), ;, }, return, new, CharSetMatcher, (]
[1, ), {, return, new, CharMatcher, (, chars, ., charAt, (, 0, ), ), ;, }, return, new, CharSetMatcher, (]
[chars, ., toCharArray, (, ), ), ;, }, public, static, StrMatcher, stringMatcher, (, final, String, str, ), {, if, (]
[chars, ., toCharArray, (, ), ), ;, }, public, static, StrMatcher, stringMatcher, (, final, String, str, ), {, if, (]
[), ), ;, }, public, static, StrMatcher, stringMatcher, (, final, String, str, ), {, if, (, StringUtils, ., isEmpty, (]
[static, StrMatcher, stringMatcher, (, final, String, str, ), {, if, (, StringUtils, ., isEmpty, (, str, ), ), {, return]
[final, String, str, ), {, if, (, StringUtils, ., isEmpty, (, str, ), ), {, return, NONE_MATCHER, ;, }, return]
[), {, if, (, StringUtils, ., isEmpty, (, str, ), ), {, return, NONE_MATCHER, ;, }, return, new, StringMatcher, (]
[int, bufferEnd, ), ;, public, int, isMatch, (, final, char, [, ], buffer, ,, final, int, pos, ), {, return]
[), ;, public, int, isMatch, (, final, char, [, ], buffer, ,, final, int, pos, ), {, return, isMatch, (]
[public, int, isMatch, (, final, char, [, ], buffer, ,, final, int, pos, ), {, return, isMatch, (, buffer, ,]
[isMatch, (, final, char, [, ], buffer, ,, final, int, pos, ), {, return, isMatch, (, buffer, ,, pos, ,]
[final, char, [, ], buffer, ,, final, int, pos, ), {, return, isMatch, (, buffer, ,, pos, ,, 0, ,]
[final, char, [, ], buffer, ,, final, int, pos, ), {, return, isMatch, (, buffer, ,, pos, ,, 0, ,]
[private, final, char, [, ], chars, ;, CharSetMatcher, (, final, char, chars, [, ], ), {, super, (, ), ;]
[private, final, char, [, ], chars, ;, CharSetMatcher, (, final, char, chars, [, ], ), {, super, (, ), ;]
[], chars, ;, CharSetMatcher, (, final, char, chars, [, ], ), {, super, (, ), ;, this, ., chars, =]
[], chars, ;, CharSetMatcher, (, final, char, chars, [, ], ), {, super, (, ), ;, this, ., chars, =]
[char, chars, [, ], ), {, super, (, ), ;, this, ., chars, =, chars, ., clone, (, ), ;]
[char, chars, [, ], ), {, super, (, ), ;, this, ., chars, =, chars, ., clone, (, ), ;]
[), {, super, (, ), ;, this, ., chars, =, chars, ., clone, (, ), ;, Arrays, ., sort, (]
[), {, super, (, ), ;, this, ., chars, =, chars, ., clone, (, ), ;, Arrays, ., sort, (]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, Arrays, ., binarySearch, (]
[final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, Arrays, ., binarySearch, (, chars, ,]
[final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, Arrays, ., binarySearch, (, chars, ,]
[pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, Arrays, ., binarySearch, (, chars, ,, buffer, []
[bufferStart, ,, final, int, bufferEnd, ), {, return, Arrays, ., binarySearch, (, chars, ,, buffer, [, pos, ], ), >=]
[final, int, bufferEnd, ), {, return, Arrays, ., binarySearch, (, chars, ,, buffer, [, pos, ], ), >=, 0, ?]
[bufferEnd, ), {, return, Arrays, ., binarySearch, (, chars, ,, buffer, [, pos, ], ), >=, 0, ?, 1, :]
[CharMatcher, extends, StrMatcher, {, private, final, char, ch, ;, CharMatcher, (, final, char, ch, ), {, super, (, ), ;]
[CharMatcher, extends, StrMatcher, {, private, final, char, ch, ;, CharMatcher, (, final, char, ch, ), {, super, (, ), ;]
[private, final, char, ch, ;, CharMatcher, (, final, char, ch, ), {, super, (, ), ;, this, ., ch, =]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[[, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, ch, ==]
[[, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, ch, ==]
[buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, ch, ==, buffer, []
[int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, ch, ==, buffer, [, pos, ], ?]
[,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, ch, ==, buffer, [, pos, ], ?, 1, :]
[StrMatcher, {, private, final, char, [, ], chars, ;, StringMatcher, (, final, String, str, ), {, super, (, ), ;]
[private, final, char, [, ], chars, ;, StringMatcher, (, final, String, str, ), {, super, (, ), ;, chars, =]
[private, final, char, [, ], chars, ;, StringMatcher, (, final, String, str, ), {, super, (, ), ;, chars, =]
[[, ], buffer, ,, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, final, int, len, =]
[[, ], buffer, ,, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, final, int, len, =]
[,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, final, int, len, =, chars, ., length, ;, if, (]
[,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, final, int, len, =, chars, ., length, ;, if, (]
[,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, final, int, len, =, chars, ., length, ;, if, (]
[int, bufferStart, ,, final, int, bufferEnd, ), {, final, int, len, =, chars, ., length, ;, if, (, pos, +]
[,, final, int, bufferEnd, ), {, final, int, len, =, chars, ., length, ;, if, (, pos, +, len, >]
[), {, final, int, len, =, chars, ., length, ;, if, (, pos, +, len, >, bufferEnd, ), {, return]
[length, ;, if, (, pos, +, len, >, bufferEnd, ), {, return, 0, ;, }, for, (, int, i, =]
[if, (, pos, +, len, >, bufferEnd, ), {, return, 0, ;, }, for, (, int, i, =, 0, ;]
[if, (, pos, +, len, >, bufferEnd, ), {, return, 0, ;, }, for, (, int, i, =, 0, ;]
[pos, +, len, >, bufferEnd, ), {, return, 0, ;, }, for, (, int, i, =, 0, ;, i, <]
[pos, +, len, >, bufferEnd, ), {, return, 0, ;, }, for, (, int, i, =, 0, ;, i, <]
[bufferEnd, ), {, return, 0, ;, }, for, (, int, i, =, 0, ;, i, <, chars, ., length, ;]
[bufferEnd, ), {, return, 0, ;, }, for, (, int, i, =, 0, ;, i, <, chars, ., length, ;]
[return, 0, ;, }, for, (, int, i, =, 0, ;, i, <, chars, ., length, ;, i, ++, ,]
[return, 0, ;, }, for, (, int, i, =, 0, ;, i, <, chars, ., length, ;, i, ++, ,]
[int, i, =, 0, ;, i, <, chars, ., length, ;, i, ++, ,, pos, ++, ), {, if, (]
[int, i, =, 0, ;, i, <, chars, ., length, ;, i, ++, ,, pos, ++, ), {, if, (]
[int, i, =, 0, ;, i, <, chars, ., length, ;, i, ++, ,, pos, ++, ), {, if, (]
[=, 0, ;, i, <, chars, ., length, ;, i, ++, ,, pos, ++, ), {, if, (, chars, []
[i, <, chars, ., length, ;, i, ++, ,, pos, ++, ), {, if, (, chars, [, i, ], !=]
[i, <, chars, ., length, ;, i, ++, ,, pos, ++, ), {, if, (, chars, [, i, ], !=]
[chars, ., length, ;, i, ++, ,, pos, ++, ), {, if, (, chars, [, i, ], !=, buffer, []
[++, ,, pos, ++, ), {, if, (, chars, [, i, ], !=, buffer, [, pos, ], ), {, return]
[{, if, (, chars, [, i, ], !=, buffer, [, pos, ], ), {, return, 0, ;, }, }, return]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[final, char, [, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return]
[[, ], buffer, ,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, buffer, []
[,, final, int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, buffer, [, pos, ], <=]
[int, pos, ,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, buffer, [, pos, ], <=, 32, ?]
[,, final, int, bufferStart, ,, final, int, bufferEnd, ), {, return, buffer, [, pos, ], <=, 32, ?, 1, :]
