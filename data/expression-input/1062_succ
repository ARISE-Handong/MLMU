[;, public, MidPointIntegrator, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, )]
[,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount]
[,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT]
[,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false]
[), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, MidPointIntegrator, (, final, int]
[>, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, MidPointIntegrator, (]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, MidPointIntegrator, (, final, int]
[;, }, }, public, MidPointIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException]
[,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, MidPointIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws]
[,, false, ), ;, }, }, public, MidPointIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,]
[), ;, }, }, public, MidPointIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,]
[,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false]
[), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, MidPointIntegrator, (, ), {]
[>, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, MidPointIntegrator, (]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, MidPointIntegrator, (, ), {]
[;, }, }, public, MidPointIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ), ;, }, private, double, stage, (]
[,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, MidPointIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ), ;]
[,, false, ), ;, }, }, public, MidPointIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ), ;, }, private]
[), ;, }, }, public, MidPointIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ), ;, }, private, double, stage]
[,, MIDPOINT_MAX_ITERATIONS_COUNT, ), ;, }, private, double, stage, (, final, int, n, ,, double, previousStageResult, ,, double, min, ,, double]
[), ;, }, private, double, stage, (, final, int, n, ,, double, previousStageResult, ,, double, min, ,, double, diffMaxMin, )]
[;, double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /, np, ;, double, x, =, min, +, 0.5]
[<<, (, n, -, 1, ), ;, double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /, np, ;]
[;, double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /, np, ;, double, x, =, min, +, 0.5]
[), ;, double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /, np, ;, double, x, =, min, +]
[-, 1, ), ;, double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /, np, ;, double, x, =]
[), ;, double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /, np, ;, double, x, =, min, +]
[;, final, double, spacing, =, diffMaxMin, /, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (]
[;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np]
[/, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i]
[;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np]
[;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=, computeObjectiveValue, (]
[+, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {]
[;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=, computeObjectiveValue, (]
[*, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=]
[;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=, computeObjectiveValue, (]
[;, i, <, np, ;, i, ++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;]
[;, i, ++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return, 0.5, *]
[<, np, ;, i, ++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return]
[;, i, ++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return, 0.5, *]
[), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return, 0.5, *, (, previousStageResult, +]
[++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return, 0.5, *, (, previousStageResult]
[+=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return, 0.5, *, (, previousStageResult, +, sum, *, spacing]
[;, x, +=, spacing, ;, }, return, 0.5, *, (, previousStageResult, +, sum, *, spacing, ), ;, }, @, Override]
[), ;, x, +=, spacing, ;, }, return, 0.5, *, (, previousStageResult, +, sum, *, spacing, ), ;, }, @]
[+=, spacing, ;, }, return, 0.5, *, (, previousStageResult, +, sum, *, spacing, ), ;, }, @, Override, protected, double]
[;, }, return, 0.5, *, (, previousStageResult, +, sum, *, spacing, ), ;, }, @, Override, protected, double, doIntegrate, (]
[;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, double, min, =]
[*, (, previousStageResult, +, sum, *, spacing, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,]
[;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, double, min, =]
[), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, double, min]
[+, sum, *, spacing, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException]
[), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, double, min]
[*, spacing, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, final]
[), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, double, min]
[;, final, double, diff, =, getMax, (, ), -, min, ;, final, double, midPoint, =, min, +, 0.5, *, diff]
[;, final, double, midPoint, =, min, +, 0.5, *, diff, ;, double, oldt, =, diff, *, computeObjectiveValue, (, midPoint, )]
[-, min, ;, final, double, midPoint, =, min, +, 0.5, *, diff, ;, double, oldt, =, diff, *, computeObjectiveValue, (]
[;, final, double, midPoint, =, min, +, 0.5, *, diff, ;, double, oldt, =, diff, *, computeObjectiveValue, (, midPoint, )]
[;, double, oldt, =, diff, *, computeObjectiveValue, (, midPoint, ), ;, while, (, true, ), {, iterations, ., incrementCount, (]
[+, 0.5, *, diff, ;, double, oldt, =, diff, *, computeObjectiveValue, (, midPoint, ), ;, while, (, true, ), {]
[;, double, oldt, =, diff, *, computeObjectiveValue, (, midPoint, ), ;, while, (, true, ), {, iterations, ., incrementCount, (]
[*, diff, ;, double, oldt, =, diff, *, computeObjectiveValue, (, midPoint, ), ;, while, (, true, ), {, iterations, .]
[;, double, oldt, =, diff, *, computeObjectiveValue, (, midPoint, ), ;, while, (, true, ), {, iterations, ., incrementCount, (]
[;, while, (, true, ), {, iterations, ., incrementCount, (, ), ;, final, int, i, =, iterations, ., getCount, (]
[*, computeObjectiveValue, (, midPoint, ), ;, while, (, true, ), {, iterations, ., incrementCount, (, ), ;, final, int, i]
[;, while, (, true, ), {, iterations, ., incrementCount, (, ), ;, final, int, i, =, iterations, ., getCount, (]
[), ;, while, (, true, ), {, iterations, ., incrementCount, (, ), ;, final, int, i, =, iterations, ., getCount]
[), {, iterations, ., incrementCount, (, ), ;, final, int, i, =, iterations, ., getCount, (, ), ;, final, double]
[;, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, t, =, stage, (, i, ,, oldt]
[., incrementCount, (, ), ;, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, t, =, stage]
[;, final, double, t, =, stage, (, i, ,, oldt, ,, min, ,, diff, ), ;, if, (, i, >=]
[., getCount, (, ), ;, final, double, t, =, stage, (, i, ,, oldt, ,, min, ,, diff, ), ;]
[;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, t, -]
[,, oldt, ,, min, ,, diff, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta]
[,, min, ,, diff, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath]
[,, diff, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs]
[), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, t]
[), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy]
[>=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final]
[), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy]
[;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs]
[., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs]
[), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, .]
[-, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +]
[), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, .]
[;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t]
[*, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {]
[*, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if]
[*, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {]
[), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), )]
[+, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta]
[), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||]
[), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), )]
[., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=]
[), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), )]
[;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t]
[), {, return, t, ;, }, }, oldt, =, t, ;, }, }, }]
[||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =, t, ;, }]
[), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =, t, ;]
[<=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =]
[), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =, t, ;]
[), {, return, t, ;, }, }, oldt, =, t, ;, }, }, }]
[), ), {, return, t, ;, }, }, oldt, =, t, ;, }, }, }]
[<=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =, t, ;, }, }, }]
[), ), {, return, t, ;, }, }, oldt, =, t, ;, }, }, }]
[;, }, }, oldt, =, t, ;, }, }, }]
[=, t, ;, }, }, }]
[;, }, }, }]
