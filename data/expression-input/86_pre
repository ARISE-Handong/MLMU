[FunctionUtils, {, private, FunctionUtils, (, ), {, }, public, static, UnivariateFunction, compose, (, final, UnivariateFunction, ..., f, ), {, return]
[f, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[), {, public, double, value, (, double, x, ), {, double, r, =, x, ;, for, (, int, i, =]
[), {, public, double, value, (, double, x, ), {, double, r, =, x, ;, for, (, int, i, =]
[), {, public, double, value, (, double, x, ), {, double, r, =, x, ;, for, (, int, i, =]
[value, (, double, x, ), {, double, r, =, x, ;, for, (, int, i, =, f, ., length, -]
[double, x, ), {, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;]
[double, x, ), {, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;]
[), {, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=]
[double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;]
[double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;]
[;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, []
[-, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (]
[0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return]
[}, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, compose, (, final, UnivariateDifferentiableFunction, ..., f, ), {, return]
[), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =]
[{, public, double, value, (, final, double, t, ), {, double, r, =, t, ;, for, (, int, i, =]
[{, public, double, value, (, final, double, t, ), {, double, r, =, t, ;, for, (, int, i, =]
[{, public, double, value, (, final, double, t, ), {, double, r, =, t, ;, for, (, int, i, =]
[(, final, double, t, ), {, double, r, =, t, ;, for, (, int, i, =, f, ., length, -]
[double, t, ), {, double, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;]
[double, t, ), {, double, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;]
[), {, double, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=]
[double, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;]
[double, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;]
[;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, []
[-, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (]
[0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return]
[r, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =]
[}, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, t, ;, for, (, int, i, =]
[}, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, t, ;, for, (, int, i, =]
[}, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, t, ;, for, (, int, i, =]
[(, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, t, ;, for, (, int, i, =, f, ., length, -]
[DerivativeStructure, t, ), {, DerivativeStructure, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;]
[DerivativeStructure, t, ), {, DerivativeStructure, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;]
[), {, DerivativeStructure, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=]
[DerivativeStructure, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;]
[DerivativeStructure, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;]
[;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, []
[-, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (]
[0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return]
[r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, compose, (, final, DifferentiableUnivariateFunction, ..., f, ), {, return]
[f, ), {, return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[), {, public, double, value, (, double, x, ), {, double, r, =, x, ;, for, (, int, i, =]
[), {, public, double, value, (, double, x, ), {, double, r, =, x, ;, for, (, int, i, =]
[), {, public, double, value, (, double, x, ), {, double, r, =, x, ;, for, (, int, i, =]
[value, (, double, x, ), {, double, r, =, x, ;, for, (, int, i, =, f, ., length, -]
[double, x, ), {, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;]
[double, x, ), {, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;]
[), {, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=]
[double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;]
[double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;]
[;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =]
[i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, []
[-, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (]
[0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return]
[i, ], ., value, (, r, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return]
[(, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, p, =]
[UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, p, =, 1, ;, double, r, =]
[(, double, x, ), {, double, p, =, 1, ;, double, r, =, x, ;, for, (, int, i, =]
[(, double, x, ), {, double, p, =, 1, ;, double, r, =, x, ;, for, (, int, i, =]
[(, double, x, ), {, double, p, =, 1, ;, double, r, =, x, ;, for, (, int, i, =]
[{, double, p, =, 1, ;, double, r, =, x, ;, for, (, int, i, =, f, ., length, -]
[p, =, 1, ;, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;]
[p, =, 1, ;, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;]
[1, ;, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=]
[double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;]
[double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;]
[;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, p, *=]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, p, *=]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, p, *=]
[(, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, p, *=]
[i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, p, *=, f, []
[>=, 0, ;, i, --, ), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (]
[i, --, ), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (, r, ), ;]
[), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (, r, ), ;, r, =]
[), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (, r, ), ;, r, =]
[), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (, r, ), ;, r, =]
[p, *=, f, [, i, ], ., derivative, (, ), ., value, (, r, ), ;, r, =, f, []
[], ., derivative, (, ), ., value, (, r, ), ;, r, =, f, [, i, ], ., value, (]
[., value, (, r, ), ;, r, =, f, [, i, ], ., value, (, r, ), ;, }, return]
[;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction, add, (, final, UnivariateFunction, ..., f, ), {, return]
[f, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[f, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[f, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[{, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, f, []
[), {, public, double, value, (, double, x, ), {, double, r, =, f, [, 0, ], ., value, (]
[), {, double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =]
[double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;]
[double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;]
[=, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <]
[=, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[(, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, []
[;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (]
[length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return]
[}, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, add, (, final, UnivariateDifferentiableFunction, ..., f, ), {, return]
[), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =]
[), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =]
[), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =]
[return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =, f, []
[{, public, double, value, (, final, double, t, ), {, double, r, =, f, [, 0, ], ., value, (]
[), {, double, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =]
[double, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;]
[double, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;]
[=, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <]
[=, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[(, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, []
[;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (]
[length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, t, ), ;, }, return]
[;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, DerivativeStructure, r, =]
[;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, DerivativeStructure, r, =]
[;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, DerivativeStructure, r, =]
[return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, DerivativeStructure, r, =, f, []
[DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, DerivativeStructure, r, =, f, [, 0, ], ., value, (]
[DimensionMismatchException, {, DerivativeStructure, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =]
[DerivativeStructure, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;]
[DerivativeStructure, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;]
[=, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <]
[=, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =]
[i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., add, (]
[i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., add, (]
[i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., add, (]
[1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., add, (, f, []
[., length, ;, i, ++, ), {, r, =, r, ., add, (, f, [, i, ], ., value, (]
[{, r, =, r, ., add, (, f, [, i, ], ., value, (, t, ), ), ;, }, return]
[r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, add, (, final, DifferentiableUnivariateFunction, ..., f, ), {, return]
[f, ), {, return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[f, ), {, return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[f, ), {, return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[{, return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, f, []
[), {, public, double, value, (, double, x, ), {, double, r, =, f, [, 0, ], ., value, (]
[), {, double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =]
[double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;]
[double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;]
[=, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <]
[=, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[(, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, []
[;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (]
[length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return]
[i, ], ., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return]
[(, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[(, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[(, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[(, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[{, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, f, []
[value, (, double, x, ), {, double, r, =, f, [, 0, ], ., derivative, (, ), ., value, (]
[=, f, [, 0, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, i, =]
[[, 0, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, i, =, 1, ;]
[[, 0, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, i, =, 1, ;]
[], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <]
[], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <]
[), ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[), ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[(, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, []
[., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., derivative, (, ), ., value, (]
[), {, r, +=, f, [, i, ], ., derivative, (, ), ., value, (, x, ), ;, }, return]
[;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction, multiply, (, final, UnivariateFunction, ..., f, ), {, return]
[f, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[f, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[f, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[{, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, f, []
[), {, public, double, value, (, double, x, ), {, double, r, =, f, [, 0, ], ., value, (]
[), {, double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =]
[double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;]
[double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;]
[=, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <]
[=, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[(, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, []
[;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (]
[length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return]
[}, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, multiply, (, final, UnivariateDifferentiableFunction, ..., f, ), {, return]
[), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =]
[), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =]
[), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =]
[return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =, f, []
[{, public, double, value, (, final, double, t, ), {, double, r, =, f, [, 0, ], ., value, (]
[), {, double, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =]
[double, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;]
[double, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;]
[=, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <]
[=, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[(, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, []
[;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (]
[length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, t, ), ;, }, return]
[t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =]
[t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =]
[t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =]
[;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, f, []
[}, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, f, [, 0, ], ., value, (]
[), {, DerivativeStructure, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =]
[DerivativeStructure, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;]
[DerivativeStructure, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;]
[=, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <]
[=, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =]
[i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., multiply, (]
[i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., multiply, (]
[i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., multiply, (]
[1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., multiply, (, f, []
[., length, ;, i, ++, ), {, r, =, r, ., multiply, (, f, [, i, ], ., value, (]
[{, r, =, r, ., multiply, (, f, [, i, ], ., value, (, t, ), ), ;, }, return]
[r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, multiply, (, final, DifferentiableUnivariateFunction, ..., f, ), {, return]
[f, ), {, return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[f, ), {, return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[f, ), {, return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =]
[{, return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, f, []
[), {, public, double, value, (, double, x, ), {, double, r, =, f, [, 0, ], ., value, (]
[), {, double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =]
[double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;]
[double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;]
[=, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <]
[=, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[(, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, []
[;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (]
[length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return]
[i, ], ., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return]
[(, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, sum, =]
[), {, public, double, value, (, double, x, ), {, double, sum, =, 0, ;, for, (, int, i, =]
[public, double, value, (, double, x, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[public, double, value, (, double, x, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[value, (, double, x, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[value, (, double, x, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, f, ., length, ;]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, f, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, double, prod, =]
[for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, double, prod, =]
[for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, double, prod, =]
[for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, double, prod, =]
[int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, double, prod, =, f, []
[length, ;, i, ++, ), {, double, prod, =, f, [, i, ], ., derivative, (, ), ., value, (]
[=, f, [, i, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, j, =]
[[, i, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, j, =, 0, ;]
[[, i, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, j, =, 0, ;]
[], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, j, =, 0, ;, j, <]
[], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, j, =, 0, ;, j, <]
[), ., value, (, x, ), ;, for, (, int, j, =, 0, ;, j, <, f, ., length, ;]
[), ., value, (, x, ), ;, for, (, int, j, =, 0, ;, j, <, f, ., length, ;]
[;, for, (, int, j, =, 0, ;, j, <, f, ., length, ;, j, ++, ), {, if, (]
[;, for, (, int, j, =, 0, ;, j, <, f, ., length, ;, j, ++, ), {, if, (]
[(, int, j, =, 0, ;, j, <, f, ., length, ;, j, ++, ), {, if, (, i, !=]
[=, 0, ;, j, <, f, ., length, ;, j, ++, ), {, if, (, i, !=, j, ), {]
[;, j, <, f, ., length, ;, j, ++, ), {, if, (, i, !=, j, ), {, prod, *=]
[;, j, <, f, ., length, ;, j, ++, ), {, if, (, i, !=, j, ), {, prod, *=]
[;, j, <, f, ., length, ;, j, ++, ), {, if, (, i, !=, j, ), {, prod, *=]
[<, f, ., length, ;, j, ++, ), {, if, (, i, !=, j, ), {, prod, *=, f, []
[j, ++, ), {, if, (, i, !=, j, ), {, prod, *=, f, [, j, ], ., value, (]
[(, i, !=, j, ), {, prod, *=, f, [, j, ], ., value, (, x, ), ;, }, }]
[!=, j, ), {, prod, *=, f, [, j, ], ., value, (, x, ), ;, }, }, sum, +=]
[prod, *=, f, [, j, ], ., value, (, x, ), ;, }, }, sum, +=, prod, ;, }, return]
[}, public, static, UnivariateFunction, combine, (, final, BivariateFunction, combiner, ,, final, UnivariateFunction, f, ,, final, UnivariateFunction, g, ), {, return]
[final, UnivariateFunction, g, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return]
[final, UnivariateFunction, g, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return]
[{, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return, combiner, ., value, (]
[{, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return, combiner, ., value, (]
[(, ), {, public, double, value, (, double, x, ), {, return, combiner, ., value, (, f, ., value, (]
[public, double, value, (, double, x, ), {, return, combiner, ., value, (, f, ., value, (, x, ), ,]
[public, double, value, (, double, x, ), {, return, combiner, ., value, (, f, ., value, (, x, ), ,]
[double, x, ), {, return, combiner, ., value, (, f, ., value, (, x, ), ,, g, ., value, (]
[}, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final, UnivariateFunction, f, ,, final, double, initialValue, ), {, return]
[{, return, new, MultivariateFunction, (, ), {, public, double, value, (, double, [, ], point, ), {, double, result, =]
[{, return, new, MultivariateFunction, (, ), {, public, double, value, (, double, [, ], point, ), {, double, result, =]
[(, ), {, public, double, value, (, double, [, ], point, ), {, double, result, =, combiner, ., value, (]
[{, public, double, value, (, double, [, ], point, ), {, double, result, =, combiner, ., value, (, initialValue, ,]
[{, public, double, value, (, double, [, ], point, ), {, double, result, =, combiner, ., value, (, initialValue, ,]
[(, double, [, ], point, ), {, double, result, =, combiner, ., value, (, initialValue, ,, f, ., value, (]
[(, double, [, ], point, ), {, double, result, =, combiner, ., value, (, initialValue, ,, f, ., value, (]
[[, ], point, ), {, double, result, =, combiner, ., value, (, initialValue, ,, f, ., value, (, point, []
[value, (, initialValue, ,, f, ., value, (, point, [, 0, ], ), ), ;, for, (, int, i, =]
[initialValue, ,, f, ., value, (, point, [, 0, ], ), ), ;, for, (, int, i, =, 1, ;]
[initialValue, ,, f, ., value, (, point, [, 0, ], ), ), ;, for, (, int, i, =, 1, ;]
[f, ., value, (, point, [, 0, ], ), ), ;, for, (, int, i, =, 1, ;, i, <]
[f, ., value, (, point, [, 0, ], ), ), ;, for, (, int, i, =, 1, ;, i, <]
[point, [, 0, ], ), ), ;, for, (, int, i, =, 1, ;, i, <, point, ., length, ;]
[point, [, 0, ], ), ), ;, for, (, int, i, =, 1, ;, i, <, point, ., length, ;]
[), ), ;, for, (, int, i, =, 1, ;, i, <, point, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, point, ., length, ;, i, ++, ), {, result, =]
[;, for, (, int, i, =, 1, ;, i, <, point, ., length, ;, i, ++, ), {, result, =]
[i, =, 1, ;, i, <, point, ., length, ;, i, ++, ), {, result, =, combiner, ., value, (]
[1, ;, i, <, point, ., length, ;, i, ++, ), {, result, =, combiner, ., value, (, result, ,]
[1, ;, i, <, point, ., length, ;, i, ++, ), {, result, =, combiner, ., value, (, result, ,]
[point, ., length, ;, i, ++, ), {, result, =, combiner, ., value, (, result, ,, f, ., value, (]
[point, ., length, ;, i, ++, ), {, result, =, combiner, ., value, (, result, ,, f, ., value, (]
[length, ;, i, ++, ), {, result, =, combiner, ., value, (, result, ,, f, ., value, (, point, []
[=, combiner, ., value, (, result, ,, f, ., value, (, point, [, i, ], ), ), ;, }, return]
[;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final, double, initialValue, ), {, return]
[}, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final, double, initialValue, ), {, return, collector, (]
[}, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final, double, initialValue, ), {, return, collector, (, combiner, ,]
[(, final, BivariateFunction, combiner, ,, final, double, initialValue, ), {, return, collector, (, combiner, ,, new, Identity, (, ), ,]
[,, initialValue, ), ;, }, public, static, UnivariateFunction, fix1stArgument, (, final, BivariateFunction, f, ,, final, double, fixed, ), {, return]
[final, double, fixed, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return]
[final, double, fixed, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return]
[{, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return, f, ., value, (]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return, f, ., value, (, fixed, ,]
[;, }, }, ;, }, public, static, UnivariateFunction, fix2ndArgument, (, final, BivariateFunction, f, ,, final, double, fixed, ), {, return]
[final, double, fixed, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return]
[final, double, fixed, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return]
[{, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return, f, ., value, (]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return, f, ., value, (, x, ,]
[(, UnivariateFunction, f, ,, double, min, ,, double, max, ,, int, n, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (]
[(, UnivariateFunction, f, ,, double, min, ,, double, max, ,, int, n, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (]
[f, ,, double, min, ,, double, max, ,, int, n, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (, n, <=]
[,, double, max, ,, int, n, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw]
[,, int, n, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[,, int, n, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,]
[throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,]
[{, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, Integer, ., valueOf, (]
[{, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, Integer, ., valueOf, (, n, ), ), ;, }, if, (]
[{, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, Integer, ., valueOf, (, n, ), ), ;, }, if, (]
[new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, Integer, ., valueOf, (, n, ), ), ;, }, if, (, min, >=]
[., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, Integer, ., valueOf, (, n, ), ), ;, }, if, (, min, >=, max, ), {, throw]
[Integer, ., valueOf, (, n, ), ), ;, }, if, (, min, >=, max, ), {, throw, new, NumberIsTooLargeException, (]
[valueOf, (, n, ), ), ;, }, if, (, min, >=, max, ), {, throw, new, NumberIsTooLargeException, (, min, ,]
[n, ), ), ;, }, if, (, min, >=, max, ), {, throw, new, NumberIsTooLargeException, (, min, ,, max, ,]
[), {, throw, new, NumberIsTooLargeException, (, min, ,, max, ,, false, ), ;, }, final, double, [, ], s, =]
[new, NumberIsTooLargeException, (, min, ,, max, ,, false, ), ;, }, final, double, [, ], s, =, new, double, []
[false, ), ;, }, final, double, [, ], s, =, new, double, [, n, ], ;, final, double, h, =]
[false, ), ;, }, final, double, [, ], s, =, new, double, [, n, ], ;, final, double, h, =]
[), ;, }, final, double, [, ], s, =, new, double, [, n, ], ;, final, double, h, =, (]
[), ;, }, final, double, [, ], s, =, new, double, [, n, ], ;, final, double, h, =, (]
[}, final, double, [, ], s, =, new, double, [, n, ], ;, final, double, h, =, (, max, -]
[[, ], s, =, new, double, [, n, ], ;, final, double, h, =, (, max, -, min, ), /]
[n, ], ;, final, double, h, =, (, max, -, min, ), /, n, ;, for, (, int, i, =]
[;, final, double, h, =, (, max, -, min, ), /, n, ;, for, (, int, i, =, 0, ;]
[;, final, double, h, =, (, max, -, min, ), /, n, ;, for, (, int, i, =, 0, ;]
[double, h, =, (, max, -, min, ), /, n, ;, for, (, int, i, =, 0, ;, i, <]
[=, (, max, -, min, ), /, n, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, (, max, -, min, ), /, n, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[min, ), /, n, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[min, ), /, n, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[/, n, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, s, []
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, s, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, s, [, i, ], =]
[=, 0, ;, i, <, n, ;, i, ++, ), {, s, [, i, ], =, f, ., value, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, s, [, i, ], =, f, ., value, (]
[;, i, <, n, ;, i, ++, ), {, s, [, i, ], =, f, ., value, (, min, +]
[;, i, <, n, ;, i, ++, ), {, s, [, i, ], =, f, ., value, (, min, +]
[<, n, ;, i, ++, ), {, s, [, i, ], =, f, ., value, (, min, +, i, *]
[), {, s, [, i, ], =, f, ., value, (, min, +, i, *, h, ), ;, }, return]
[), ;, }, return, s, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, toDifferentiableUnivariateFunction, (, final, UnivariateDifferentiableFunction, f, ), {, return]
[UnivariateDifferentiableFunction, f, ), {, return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return]
[UnivariateDifferentiableFunction, f, ), {, return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return]
[return, new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return, f, ., value, (]
[double, x, ), {, return, f, ., value, (, x, ), ;, }, public, UnivariateFunction, derivative, (, ), {, return]
[derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return]
[derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return]
[derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return]
[return, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return, f, ., value, (]
[(, ), {, public, double, value, (, final, double, x, ), {, return, f, ., value, (, new, DerivativeStructure, (]
[{, public, double, value, (, final, double, x, ), {, return, f, ., value, (, new, DerivativeStructure, (, 1, ,]
[double, value, (, final, double, x, ), {, return, f, ., value, (, new, DerivativeStructure, (, 1, ,, 1, ,]
[(, final, double, x, ), {, return, f, ., value, (, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,]
[return, f, ., value, (, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, ), ), ., getPartialDerivative, (]
[}, }, ;, }, }, ;, }, @, Deprecated, public, static, UnivariateDifferentiableFunction, toUnivariateDifferential, (, final, DifferentiableUnivariateFunction, f, ), {, return]
[DifferentiableUnivariateFunction, f, ), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, x, ), {, return]
[DifferentiableUnivariateFunction, f, ), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, x, ), {, return]
[return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, x, ), {, return, f, ., value, (]
[., value, (, x, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NumberIsTooLargeException, {, switch, (]
[., value, (, x, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NumberIsTooLargeException, {, switch, (]
[DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NumberIsTooLargeException, {, switch, (, t, ., getOrder, (, ), ), {, case]
[final, DerivativeStructure, t, ), throws, NumberIsTooLargeException, {, switch, (, t, ., getOrder, (, ), ), {, case, 0, :, return]
[), throws, NumberIsTooLargeException, {, switch, (, t, ., getOrder, (, ), ), {, case, 0, :, return, new, DerivativeStructure, (]
[), throws, NumberIsTooLargeException, {, switch, (, t, ., getOrder, (, ), ), {, case, 0, :, return, new, DerivativeStructure, (]
[t, ., getOrder, (, ), ), {, case, 0, :, return, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,]
[getOrder, (, ), ), {, case, 0, :, return, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, 0, ,]
[getOrder, (, ), ), {, case, 0, :, return, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, 0, ,]
[{, case, 0, :, return, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, 0, ,, f, ., value, (]
[{, case, 0, :, return, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, 0, ,, f, ., value, (]
[., getFreeParameters, (, ), ,, 0, ,, f, ., value, (, t, ., getValue, (, ), ), ), ;, case]
[f, ., value, (, t, ., getValue, (, ), ), ), ;, case, 1, :, {, final, int, parameters, =]
[f, ., value, (, t, ., getValue, (, ), ), ), ;, case, 1, :, {, final, int, parameters, =]
[case, 1, :, {, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =]
[{, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, new, double, []
[{, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, new, double, []
[int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +]
[t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;]
[t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;]
[getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, []
[;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =]
[;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =]
[], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =, f, ., value, (]
[], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =, f, ., value, (]
[derivatives, [, 0, ], =, f, ., value, (, t, ., getValue, (, ), ), ;, final, double, fPrime, =]
[derivatives, [, 0, ], =, f, ., value, (, t, ., getValue, (, ), ), ;, final, double, fPrime, =]
[derivatives, [, 0, ], =, f, ., value, (, t, ., getValue, (, ), ), ;, final, double, fPrime, =]
[(, t, ., getValue, (, ), ), ;, final, double, fPrime, =, f, ., derivative, (, ), ., value, (]
[(, t, ., getValue, (, ), ), ;, final, double, fPrime, =, f, ., derivative, (, ), ., value, (]
[f, ., derivative, (, ), ., value, (, t, ., getValue, (, ), ), ;, int, [, ], orders, =]
[(, ), ., value, (, t, ., getValue, (, ), ), ;, int, [, ], orders, =, new, int, []
[(, ), ), ;, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =]
[), ;, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;]
[), ;, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;]
[int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <]
[], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;]
[orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++]
[int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {]
[int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {]
[parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, []
[for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =]
[int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;]
[int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;]
[=, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, []
[=, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, []
[;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +]
[parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +, 1, ], =]
[parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +, 1, ], =]
[++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime, *]
[++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime, *]
[orders, [, i, ], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime, *, t, ., getPartialDerivative, (]
[], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;]
[], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;]
[1, ;, derivatives, [, i, +, 1, ], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;, orders, []
[[, i, +, 1, ], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =]
[], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return]
[*, t, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (]
[., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,]
[(, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,]
[], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, ), ;, }, default, :, throw]
[;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, ), ;, }, default, :, throw, new, NumberIsTooLargeException, (]
[;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, ), ;, }, default, :, throw, new, NumberIsTooLargeException, (]
[parameters, ,, 1, ,, derivatives, ), ;, }, default, :, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,]
[1, ,, derivatives, ), ;, }, default, :, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, 1, ,]
[), ;, }, }, }, ;, }, @, Deprecated, public, static, DifferentiableMultivariateFunction, toDifferentiableMultivariateFunction, (, final, MultivariateDifferentiableFunction, f, ), {, return]
[), {, return, new, DifferentiableMultivariateFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, return]
[), {, return, new, DifferentiableMultivariateFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, return]
[DifferentiableMultivariateFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, return, f, ., value, (]
[{, return, f, ., value, (, x, ), ;, }, public, MultivariateFunction, partialDerivative, (, final, int, k, ), {, return]
[new, MultivariateFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, final, int, n, =]
[new, MultivariateFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, final, int, n, =]
[double, [, ], x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =]
[x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, []
[., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =]
[;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, i, ==]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, i, ==, k, ), {]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, i, ==, k, ), {]
[=, 0, ;, i, <, n, ;, ++, i, ), {, if, (, i, ==, k, ), {, dsX, []
[i, <, n, ;, ++, i, ), {, if, (, i, ==, k, ), {, dsX, [, i, ], =]
[;, ++, i, ), {, if, (, i, ==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (]
[i, ), {, if, (, i, ==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,]
[{, if, (, i, ==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,]
[(, i, ==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,]
[(, i, ==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,]
[==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, []
[], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, [, i, ], ), ;, }, else, {]
[], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, [, i, ], ), ;, }, else, {]
[new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, [, i, ], ), ;, }, else, {, dsX, []
[1, ,, 1, ,, 0, ,, x, [, i, ], ), ;, }, else, {, dsX, [, i, ], =]
[,, 0, ,, x, [, i, ], ), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (]
[,, x, [, i, ], ), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,]
[[, i, ], ), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,]
[[, i, ], ), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,]
[], ), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, x, []
[=, new, DerivativeStructure, (, 1, ,, 1, ,, x, [, i, ], ), ;, }, }, final, DerivativeStructure, y, =]
[=, new, DerivativeStructure, (, 1, ,, 1, ,, x, [, i, ], ), ;, }, }, final, DerivativeStructure, y, =]
[1, ,, 1, ,, x, [, i, ], ), ;, }, }, final, DerivativeStructure, y, =, f, ., value, (]
[x, [, i, ], ), ;, }, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, return]
[x, [, i, ], ), ;, }, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, return]
[), ;, }, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, return, y, ., getPartialDerivative, (]
[;, return, y, ., getPartialDerivative, (, 1, ), ;, }, }, ;, }, public, MultivariateVectorFunction, gradient, (, ), {, return]
[(, ), {, public, double, [, ], value, (, final, double, [, ], x, ), {, final, int, n, =]
[(, ), {, public, double, [, ], value, (, final, double, [, ], x, ), {, final, int, n, =]
[double, [, ], x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =]
[x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, []
[., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =]
[;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, []
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =]
[i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (]
[0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,]
[i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,]
[n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,]
[n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,]
[++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, []
[new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, y, =]
[new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, y, =]
[,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, y, =, f, ., value, (]
[), ;, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, final, double, [, ], gradient, =]
[final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, final, double, [, ], gradient, =, new, double, []
[), ;, final, double, [, ], gradient, =, new, double, [, n, ], ;, final, int, [, ], orders, =]
[double, [, ], gradient, =, new, double, [, n, ], ;, final, int, [, ], orders, =, new, int, []
[n, ], ;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =]
[;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;]
[int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, orders, []
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, orders, [, i, ], =]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, orders, [, i, ], =, 1, ;]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, orders, [, i, ], =, 1, ;]
[=, 0, ;, i, <, n, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, gradient, []
[i, <, n, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, gradient, [, i, ], =]
[i, <, n, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, gradient, [, i, ], =]
[++, i, ), {, orders, [, i, ], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (]
[{, orders, [, i, ], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, ), ;]
[{, orders, [, i, ], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, ), ;]
[[, i, ], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, ), ;, orders, []
[=, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =]
[[, i, ], =, y, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return]
[}, }, ;, }, }, ;, }, @, Deprecated, public, static, MultivariateDifferentiableFunction, toMultivariateDifferentiableFunction, (, final, DifferentiableMultivariateFunction, f, ), {, return]
[), {, return, new, MultivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, return]
[), {, return, new, MultivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, return]
[MultivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, return, f, ., value, (]
[}, public, DerivativeStructure, value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int, parameters, =]
[}, public, DerivativeStructure, value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int, parameters, =]
[}, public, DerivativeStructure, value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int, parameters, =]
[DerivativeStructure, value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int, parameters, =, t, []
[,, NumberIsTooLargeException, {, final, int, parameters, =, t, [, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =]
[,, NumberIsTooLargeException, {, final, int, parameters, =, t, [, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =]
[,, NumberIsTooLargeException, {, final, int, parameters, =, t, [, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =]
[{, final, int, parameters, =, t, [, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =, t, []
[(, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =]
[(, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =]
[=, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (]
[=, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (]
[[, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >]
[getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, ), {, throw]
[;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (]
[int, n, =, t, ., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,]
[=, t, ., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,]
[1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =]
[{, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;]
[{, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;]
[new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[}, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, t, []
[;, i, <, n, ;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=]
[;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw]
[), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (]
[if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, []
[getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,]
[{, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (]
[{, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (]
[{, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (]
[{, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (]
[new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, []
[., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=]
[,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw]
[;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (]
[;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (]
[;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (]
[if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, []
[getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,]
[t, [, i, ], ., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =]
[], ., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =, new, double, []
[;, }, }, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =]
[}, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[}, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, []
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ], =]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ], =, t, []
[{, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, value, =]
[{, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, value, =]
[], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, value, =, f, ., value, (]
[), ;, }, final, double, value, =, f, ., value, (, point, ), ;, final, double, [, ], gradient, =]
[), ;, }, final, double, value, =, f, ., value, (, point, ), ;, final, double, [, ], gradient, =]
[), ;, }, final, double, value, =, f, ., value, (, point, ), ;, final, double, [, ], gradient, =]
[., value, (, point, ), ;, final, double, [, ], gradient, =, f, ., gradient, (, ), ., value, (]
[], gradient, =, f, ., gradient, (, ), ., value, (, point, ), ;, final, double, [, ], derivatives, =]
[f, ., gradient, (, ), ., value, (, point, ), ;, final, double, [, ], derivatives, =, new, double, []
[f, ., gradient, (, ), ., value, (, point, ), ;, final, double, [, ], derivatives, =, new, double, []
[gradient, (, ), ., value, (, point, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +]
[., value, (, point, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;]
[., value, (, point, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;]
[(, point, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, []
[;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =]
[double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =, value, ;, final, int, [, ], orders, =]
[+, 1, ], ;, derivatives, [, 0, ], =, value, ;, final, int, [, ], orders, =, new, int, []
[=, value, ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =]
[;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;]
[;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;]
[int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <]
[], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;]
[orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++]
[int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {]
[int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {]
[parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, []
[for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =]
[i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =]
[parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;]
[parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;]
[++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <]
[), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[{, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++]
[i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {]
[i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {]
[=, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, []
[=, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, []
[;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +]
[int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=]
[int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=]
[int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=]
[=, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, gradient, []
[j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, gradient, [, j, ], *]
[j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, gradient, [, j, ], *]
[j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, gradient, [, j, ], *]
[n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, gradient, [, j, ], *, t, []
[{, derivatives, [, i, +, 1, ], +=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative, (]
[+, 1, ], +=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }]
[+, 1, ], +=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }]
[], +=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, []
[[, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =]
[t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, return]
[], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (]
[getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,]
[orders, ), ;, }, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, order, ,]
[derivatives, ), ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableMultivariateVectorFunction, toDifferentiableMultivariateVectorFunction, (, final, MultivariateDifferentiableVectorFunction, f, ), {, return]
[return, new, DifferentiableMultivariateVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ], x, ), {, return]
[return, new, DifferentiableMultivariateVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ], x, ), {, return]
[), {, public, double, [, ], value, (, final, double, [, ], x, ), {, return, f, ., value, (]
[], x, ), {, return, f, ., value, (, x, ), ;, }, public, MultivariateMatrixFunction, jacobian, (, ), {, return]
[{, public, double, [, ], [, ], value, (, final, double, [, ], x, ), {, final, int, n, =]
[{, public, double, [, ], [, ], value, (, final, double, [, ], x, ), {, final, int, n, =]
[double, [, ], x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =]
[x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, []
[., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =]
[;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, []
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =]
[i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (]
[0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,]
[i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,]
[n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,]
[n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,]
[++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, []
[(, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, [, ], y, =]
[(, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, [, ], y, =]
[,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, [, ], y, =, f, ., value, (]
[DerivativeStructure, [, ], y, =, f, ., value, (, dsX, ), ;, final, double, [, ], [, ], jacobian, =]
[y, =, f, ., value, (, dsX, ), ;, final, double, [, ], [, ], jacobian, =, new, double, []
[y, =, f, ., value, (, dsX, ), ;, final, double, [, ], [, ], jacobian, =, new, double, []
[(, dsX, ), ;, final, double, [, ], [, ], jacobian, =, new, double, [, y, ., length, ], []
[], jacobian, =, new, double, [, y, ., length, ], [, n, ], ;, final, int, [, ], orders, =]
[new, double, [, y, ., length, ], [, n, ], ;, final, int, [, ], orders, =, new, int, []
[n, ], ;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =]
[;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;]
[int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, y, ., length, ;]
[new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, y, ., length, ;, ++]
[int, i, =, 0, ;, i, <, y, ., length, ;, ++, i, ), {, for, (, int, j, =]
[=, 0, ;, i, <, y, ., length, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, y, ., length, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[;, i, <, y, ., length, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[<, y, ., length, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[y, ., length, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, ++]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {]
[i, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, orders, []
[for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, orders, [, j, ], =]
[int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, orders, [, j, ], =, 1, ;]
[int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, orders, [, j, ], =, 1, ;]
[int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, orders, [, j, ], =, 1, ;]
[=, 0, ;, j, <, n, ;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobian, []
[j, <, n, ;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], []
[;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =]
[;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =]
[;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =]
[j, ), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =, y, []
[j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =, y, [, i, ], ., getPartialDerivative, (]
[1, ;, jacobian, [, i, ], [, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders, ), ;]
[1, ;, jacobian, [, i, ], [, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders, ), ;]
[jacobian, [, i, ], [, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, []
[], [, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =]
[y, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return]
[}, }, ;, }, }, ;, }, @, Deprecated, public, static, MultivariateDifferentiableVectorFunction, toMultivariateDifferentiableVectorFunction, (, final, DifferentiableMultivariateVectorFunction, f, ), {, return]
[return, new, MultivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ], x, ), {, return]
[return, new, MultivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ], x, ), {, return]
[), {, public, double, [, ], value, (, final, double, [, ], x, ), {, return, f, ., value, (]
[DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int, parameters, =]
[DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int, parameters, =]
[DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int, parameters, =]
[], value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int, parameters, =, t, []
[,, NumberIsTooLargeException, {, final, int, parameters, =, t, [, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =]
[,, NumberIsTooLargeException, {, final, int, parameters, =, t, [, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =]
[,, NumberIsTooLargeException, {, final, int, parameters, =, t, [, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =]
[{, final, int, parameters, =, t, [, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =, t, []
[(, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =]
[(, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =]
[=, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (]
[=, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (]
[[, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >]
[getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, ), {, throw]
[;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (]
[int, n, =, t, ., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,]
[=, t, ., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,]
[1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =]
[{, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;]
[{, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;]
[new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[}, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, t, []
[;, i, <, n, ;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=]
[;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw]
[), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (]
[if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, []
[getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,]
[{, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (]
[{, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (]
[{, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (]
[{, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (]
[new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, []
[., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=]
[,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw]
[;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (]
[;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (]
[;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (]
[if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, []
[getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,]
[t, [, i, ], ., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =]
[], ., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =, new, double, []
[;, }, }, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =]
[}, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[}, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, []
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ], =]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ], =, t, []
[[, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, [, ], value, =]
[[, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, [, ], value, =]
[t, [, i, ], ., getValue, (, ), ;, }, final, double, [, ], value, =, f, ., value, (]
[double, [, ], value, =, f, ., value, (, point, ), ;, final, double, [, ], [, ], jacobian, =]
[double, [, ], value, =, f, ., value, (, point, ), ;, final, double, [, ], [, ], jacobian, =]
[double, [, ], value, =, f, ., value, (, point, ), ;, final, double, [, ], [, ], jacobian, =]
[(, point, ), ;, final, double, [, ], [, ], jacobian, =, f, ., jacobian, (, ), ., value, (]
[], jacobian, =, f, ., jacobian, (, ), ., value, (, point, ), ;, final, DerivativeStructure, [, ], merged, =]
[f, ., jacobian, (, ), ., value, (, point, ), ;, final, DerivativeStructure, [, ], merged, =, new, DerivativeStructure, []
[f, ., jacobian, (, ), ., value, (, point, ), ;, final, DerivativeStructure, [, ], merged, =, new, DerivativeStructure, []
[;, final, DerivativeStructure, [, ], merged, =, new, DerivativeStructure, [, value, ., length, ], ;, for, (, int, k, =]
[DerivativeStructure, [, ], merged, =, new, DerivativeStructure, [, value, ., length, ], ;, for, (, int, k, =, 0, ;]
[DerivativeStructure, [, ], merged, =, new, DerivativeStructure, [, value, ., length, ], ;, for, (, int, k, =, 0, ;]
[], merged, =, new, DerivativeStructure, [, value, ., length, ], ;, for, (, int, k, =, 0, ;, k, <]
[], merged, =, new, DerivativeStructure, [, value, ., length, ], ;, for, (, int, k, =, 0, ;, k, <]
[DerivativeStructure, [, value, ., length, ], ;, for, (, int, k, =, 0, ;, k, <, merged, ., length, ;]
[[, value, ., length, ], ;, for, (, int, k, =, 0, ;, k, <, merged, ., length, ;, ++]
[k, =, 0, ;, k, <, merged, ., length, ;, ++, k, ), {, final, double, [, ], derivatives, =]
[;, k, <, merged, ., length, ;, ++, k, ), {, final, double, [, ], derivatives, =, new, double, []
[;, k, <, merged, ., length, ;, ++, k, ), {, final, double, [, ], derivatives, =, new, double, []
[<, merged, ., length, ;, ++, k, ), {, final, double, [, ], derivatives, =, new, double, [, parameters, +]
[length, ;, ++, k, ), {, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;]
[length, ;, ++, k, ), {, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;]
[++, k, ), {, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, []
[{, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =]
[{, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =]
[double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =, value, []
[+, 1, ], ;, derivatives, [, 0, ], =, value, [, k, ], ;, final, int, [, ], orders, =]
[;, derivatives, [, 0, ], =, value, [, k, ], ;, final, int, [, ], orders, =, new, int, []
[k, ], ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =]
[;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;]
[;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;]
[int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <]
[], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;]
[orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++]
[int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {]
[int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {]
[parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, []
[for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =]
[i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =]
[parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;]
[parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;]
[++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <]
[), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[{, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++]
[i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {]
[i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {]
[=, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, []
[=, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, []
[;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +]
[int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=]
[int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=]
[int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=]
[int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=]
[=, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, jacobian, []
[j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ], []
[;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ], [, j, ], *]
[;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ], [, j, ], *]
[;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ], [, j, ], *]
[j, ), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ], [, j, ], *, t, []
[i, +, 1, ], +=, jacobian, [, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative, (]
[+=, jacobian, [, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }]
[+=, jacobian, [, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }]
[[, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, []
[[, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =]
[*, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }]
[*, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }]
[[, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, merged, []
[., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, merged, [, k, ], =]
[orders, ), ;, }, orders, [, i, ], =, 0, ;, }, merged, [, k, ], =, new, DerivativeStructure, (]
[;, }, orders, [, i, ], =, 0, ;, }, merged, [, k, ], =, new, DerivativeStructure, (, parameters, ,]
[orders, [, i, ], =, 0, ;, }, merged, [, k, ], =, new, DerivativeStructure, (, parameters, ,, order, ,]
[0, ;, }, merged, [, k, ], =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }, return]
