[;, private, final, Map, <, InputId, ,, Integer, >, inputOrder, ;, GlobalVarReferenceMap, (, List, <, CompilerInput, >, inputs, ,, List]
[=, Maps, ., newHashMap, (, ), ;, int, ind, =, 0, ;, for, (, CompilerInput, extern, :, externs, ), {]
[;, int, ind, =, 0, ;, for, (, CompilerInput, extern, :, externs, ), {, inputOrder, ., put, (, extern, .]
[., newHashMap, (, ), ;, int, ind, =, 0, ;, for, (, CompilerInput, extern, :, externs, ), {, inputOrder, .]
[;, for, (, CompilerInput, extern, :, externs, ), {, inputOrder, ., put, (, extern, ., getInputId, (, ), ,, ind]
[), {, inputOrder, ., put, (, extern, ., getInputId, (, ), ,, ind, ), ;, ind, ++, ;, }, for]
[;, ind, ++, ;, }, for, (, CompilerInput, input, :, inputs, ), {, inputOrder, ., put, (, input, ., getInputId]
[., put, (, extern, ., getInputId, (, ), ,, ind, ), ;, ind, ++, ;, }, for, (, CompilerInput, input]
[,, ind, ), ;, ind, ++, ;, }, for, (, CompilerInput, input, :, inputs, ), {, inputOrder, ., put, (]
[., getInputId, (, ), ,, ind, ), ;, ind, ++, ;, }, for, (, CompilerInput, input, :, inputs, ), {]
[), ;, ind, ++, ;, }, for, (, CompilerInput, input, :, inputs, ), {, inputOrder, ., put, (, input, .]
[;, }, for, (, CompilerInput, input, :, inputs, ), {, inputOrder, ., put, (, input, ., getInputId, (, ), ,]
[++, ;, }, for, (, CompilerInput, input, :, inputs, ), {, inputOrder, ., put, (, input, ., getInputId, (, )]
[), {, inputOrder, ., put, (, input, ., getInputId, (, ), ,, ind, ), ;, ind, ++, ;, }, }]
[;, ind, ++, ;, }, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, if, (, !, var]
[., put, (, input, ., getInputId, (, ), ,, ind, ), ;, ind, ++, ;, }, }, @, Override, public]
[,, ind, ), ;, ind, ++, ;, }, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, if]
[., getInputId, (, ), ,, ind, ), ;, ind, ++, ;, }, }, @, Override, public, ReferenceCollection, getReferences, (, Var]
[), ;, ind, ++, ;, }, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, if, (, !]
[;, }, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, if, (, !, var, ., isGlobal, (]
[++, ;, }, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, if, (, !, var, ., isGlobal]
[), {, return, null, ;, }, return, refMap, ., get, (, var, ., getName, (, ), ), ;, }, private]
[), {, return, null, ;, }, return, refMap, ., get, (, var, ., getName, (, ), ), ;, }, private]
[., isGlobal, (, ), ), {, return, null, ;, }, return, refMap, ., get, (, var, ., getName, (, )]
[;, }, return, refMap, ., get, (, var, ., getName, (, ), ), ;, }, private, void, resetGlobalVarReferences, (, Map]
[;, }, private, void, resetGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, globalRefMap, ), {, refMap, =, Maps, ., newHashMap]
[., get, (, var, ., getName, (, ), ), ;, }, private, void, resetGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection]
[), ;, }, private, void, resetGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, globalRefMap, ), {, refMap, =, Maps, .]
[., getName, (, ), ), ;, }, private, void, resetGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, globalRefMap, ), {]
[=, Maps, ., newHashMap, (, ), ;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :, globalRefMap, ., entrySet]
[;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :, globalRefMap, ., entrySet, (, ), ), {, Var, var]
[., newHashMap, (, ), ;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :, globalRefMap, ., entrySet, (, )]
[), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, var, ., isGlobal, (, ), ), {]
[., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, var, ., isGlobal]
[;, if, (, var, ., isGlobal, (, ), ), {, refMap, ., put, (, var, ., getName, (, ), ,]
[., getKey, (, ), ;, if, (, var, ., isGlobal, (, ), ), {, refMap, ., put, (, var, .]
[), {, refMap, ., put, (, var, ., getName, (, ), ,, entry, ., getValue, (, ), ), ;, }]
[., isGlobal, (, ), ), {, refMap, ., put, (, var, ., getName, (, ), ,, entry, ., getValue, (]
[;, }, }, }, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, root, ), {, if]
[., put, (, var, ., getName, (, ), ,, entry, ., getValue, (, ), ), ;, }, }, }, void]
[,, entry, ., getValue, (, ), ), ;, }, }, }, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >]
[., getName, (, ), ,, entry, ., getValue, (, ), ), ;, }, }, }, void, updateGlobalVarReferences, (, Map, <]
[), ;, }, }, }, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, root, ), {]
[., getValue, (, ), ), ;, }, }, }, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,]
[), {, resetGlobalVarReferences, (, refMapPatch, ), ;, return, ;, }, InputId, inputId, =, root, ., getInputId, (, ), ;, Preconditions]
[||, !, root, ., isScript, (, ), ), {, resetGlobalVarReferences, (, refMapPatch, ), ;, return, ;, }, InputId, inputId, =]
[==, null, ||, !, root, ., isScript, (, ), ), {, resetGlobalVarReferences, (, refMapPatch, ), ;, return, ;, }, InputId]
[||, !, root, ., isScript, (, ), ), {, resetGlobalVarReferences, (, refMapPatch, ), ;, return, ;, }, InputId, inputId, =]
[), {, resetGlobalVarReferences, (, refMapPatch, ), ;, return, ;, }, InputId, inputId, =, root, ., getInputId, (, ), ;, Preconditions]
[), {, resetGlobalVarReferences, (, refMapPatch, ), ;, return, ;, }, InputId, inputId, =, root, ., getInputId, (, ), ;, Preconditions]
[., isScript, (, ), ), {, resetGlobalVarReferences, (, refMapPatch, ), ;, return, ;, }, InputId, inputId, =, root, ., getInputId]
[;, return, ;, }, InputId, inputId, =, root, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;]
[), ;, return, ;, }, InputId, inputId, =, root, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, )]
[;, Preconditions, ., checkNotNull, (, inputId, ), ;, removeScriptReferences, (, inputId, ), ;, for, (, Entry, <, Var, ,, ReferenceCollection]
[., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;, removeScriptReferences, (, inputId, ), ;, for, (, Entry]
[;, removeScriptReferences, (, inputId, ), ;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :, refMapPatch, ., entrySet, (]
[., checkNotNull, (, inputId, ), ;, removeScriptReferences, (, inputId, ), ;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry]
[), ;, removeScriptReferences, (, inputId, ), ;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :, refMapPatch, ., entrySet]
[;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :, refMapPatch, ., entrySet, (, ), ), {, Var, var]
[), ;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :, refMapPatch, ., entrySet, (, ), ), {, Var]
[), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, var, ., isGlobal, (, ), ), {]
[., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, var, ., isGlobal]
[;, if, (, var, ., isGlobal, (, ), ), {, replaceReferences, (, var, ., getName, (, ), ,, inputId, ,]
[., getKey, (, ), ;, if, (, var, ., isGlobal, (, ), ), {, replaceReferences, (, var, ., getName, (]
[), {, replaceReferences, (, var, ., getName, (, ), ,, inputId, ,, entry, ., getValue, (, ), ), ;, }]
[., isGlobal, (, ), ), {, replaceReferences, (, var, ., getName, (, ), ,, inputId, ,, entry, ., getValue, (]
[;, }, }, }, private, void, removeScriptReferences, (, InputId, inputId, ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, if]
[,, inputId, ,, entry, ., getValue, (, ), ), ;, }, }, }, private, void, removeScriptReferences, (, InputId, inputId, )]
[., getName, (, ), ,, inputId, ,, entry, ., getValue, (, ), ), ;, }, }, }, private, void, removeScriptReferences]
[,, entry, ., getValue, (, ), ), ;, }, }, }, private, void, removeScriptReferences, (, InputId, inputId, ), {, Preconditions]
[), ;, }, }, }, private, void, removeScriptReferences, (, InputId, inputId, ), {, Preconditions, ., checkNotNull, (, inputId, ), ;]
[., getValue, (, ), ), ;, }, }, }, private, void, removeScriptReferences, (, InputId, inputId, ), {, Preconditions, ., checkNotNull]
[;, if, (, !, inputOrder, ., containsKey, (, inputId, ), ), {, return, ;, }, for, (, ReferenceCollection, collection, :]
[., checkNotNull, (, inputId, ), ;, if, (, !, inputOrder, ., containsKey, (, inputId, ), ), {, return, ;, }]
[), ;, if, (, !, inputOrder, ., containsKey, (, inputId, ), ), {, return, ;, }, for, (, ReferenceCollection, collection]
[), {, return, ;, }, for, (, ReferenceCollection, collection, :, refMap, ., values, (, ), ), {, if, (, collection]
[), {, return, ;, }, for, (, ReferenceCollection, collection, :, refMap, ., values, (, ), ), {, if, (, collection]
[., containsKey, (, inputId, ), ), {, return, ;, }, for, (, ReferenceCollection, collection, :, refMap, ., values, (, )]
[), ), {, return, ;, }, for, (, ReferenceCollection, collection, :, refMap, ., values, (, ), ), {, if, (]
[), {, if, (, collection, ==, null, ), {, continue, ;, }, List, <, Reference, >, oldRefs, =, collection, .]
[., values, (, ), ), {, if, (, collection, ==, null, ), {, continue, ;, }, List, <, Reference, >]
[), {, continue, ;, }, List, <, Reference, >, oldRefs, =, collection, ., references, ;, SourceRefRange, range, =, findSourceRefRange, (]
[==, null, ), {, continue, ;, }, List, <, Reference, >, oldRefs, =, collection, ., references, ;, SourceRefRange, range, =]
[), {, continue, ;, }, List, <, Reference, >, oldRefs, =, collection, ., references, ;, SourceRefRange, range, =, findSourceRefRange, (]
[;, SourceRefRange, range, =, findSourceRefRange, (, oldRefs, ,, inputId, ), ;, List, <, Reference, >, newRefs, =, Lists, ., newArrayList]
[., references, ;, SourceRefRange, range, =, findSourceRefRange, (, oldRefs, ,, inputId, ), ;, List, <, Reference, >, newRefs, =, Lists]
[;, List, <, Reference, >, newRefs, =, Lists, ., newArrayList, (, range, ., refsBefore, (, ), ), ;, newRefs, .]
[,, inputId, ), ;, List, <, Reference, >, newRefs, =, Lists, ., newArrayList, (, range, ., refsBefore, (, ), )]
[), ;, List, <, Reference, >, newRefs, =, Lists, ., newArrayList, (, range, ., refsBefore, (, ), ), ;, newRefs]
[;, newRefs, ., addAll, (, range, ., refsAfter, (, ), ), ;, collection, ., references, =, newRefs, ;, }, }]
[., newArrayList, (, range, ., refsBefore, (, ), ), ;, newRefs, ., addAll, (, range, ., refsAfter, (, ), )]
[), ;, newRefs, ., addAll, (, range, ., refsAfter, (, ), ), ;, collection, ., references, =, newRefs, ;, }]
[., refsBefore, (, ), ), ;, newRefs, ., addAll, (, range, ., refsAfter, (, ), ), ;, collection, ., references]
[;, collection, ., references, =, newRefs, ;, }, }, private, void, replaceReferences, (, String, varName, ,, InputId, inputId, ,, ReferenceCollection]
[., addAll, (, range, ., refsAfter, (, ), ), ;, collection, ., references, =, newRefs, ;, }, }, private, void]
[), ;, collection, ., references, =, newRefs, ;, }, }, private, void, replaceReferences, (, String, varName, ,, InputId, inputId, ,]
[., refsAfter, (, ), ), ;, collection, ., references, =, newRefs, ;, }, }, private, void, replaceReferences, (, String, varName]
[=, newRefs, ;, }, }, private, void, replaceReferences, (, String, varName, ,, InputId, inputId, ,, ReferenceCollection, newSourceCollection, ), {, ReferenceCollection]
[., references, =, newRefs, ;, }, }, private, void, replaceReferences, (, String, varName, ,, InputId, inputId, ,, ReferenceCollection, newSourceCollection, )]
[;, }, }, private, void, replaceReferences, (, String, varName, ,, InputId, inputId, ,, ReferenceCollection, newSourceCollection, ), {, ReferenceCollection, combined, =]
[;, List, <, Reference, >, combinedRefs, =, combined, ., references, ;, ReferenceCollection, oldCollection, =, refMap, ., get, (, varName, )]
[;, ReferenceCollection, oldCollection, =, refMap, ., get, (, varName, ), ;, refMap, ., put, (, varName, ,, combined, ), ;]
[., references, ;, ReferenceCollection, oldCollection, =, refMap, ., get, (, varName, ), ;, refMap, ., put, (, varName, ,, combined]
[;, refMap, ., put, (, varName, ,, combined, ), ;, if, (, oldCollection, ==, null, ), {, combinedRefs, ., addAll]
[., get, (, varName, ), ;, refMap, ., put, (, varName, ,, combined, ), ;, if, (, oldCollection, ==, null]
[), ;, refMap, ., put, (, varName, ,, combined, ), ;, if, (, oldCollection, ==, null, ), {, combinedRefs, .]
[;, if, (, oldCollection, ==, null, ), {, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, return, ;, }]
[., put, (, varName, ,, combined, ), ;, if, (, oldCollection, ==, null, ), {, combinedRefs, ., addAll, (, newSourceCollection]
[,, combined, ), ;, if, (, oldCollection, ==, null, ), {, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;]
[), ;, if, (, oldCollection, ==, null, ), {, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, return, ;]
[), {, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (, oldCollection]
[==, null, ), {, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, return, ;, }, SourceRefRange, range, =, findSourceRefRange]
[), {, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (, oldCollection]
[;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (, oldCollection, ., references, ,, inputId, ), ;, combinedRefs, ., addAll, (]
[., addAll, (, newSourceCollection, ., references, ), ;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (, oldCollection, ., references, ,]
[), ;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (, oldCollection, ., references, ,, inputId, ), ;, combinedRefs, ., addAll]
[., references, ), ;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (, oldCollection, ., references, ,, inputId, ), ;, combinedRefs]
[;, combinedRefs, ., addAll, (, range, ., refsBefore, (, ), ), ;, combinedRefs, ., addAll, (, newSourceCollection, ., references, )]
[,, inputId, ), ;, combinedRefs, ., addAll, (, range, ., refsBefore, (, ), ), ;, combinedRefs, ., addAll, (, newSourceCollection]
[., references, ,, inputId, ), ;, combinedRefs, ., addAll, (, range, ., refsBefore, (, ), ), ;, combinedRefs, ., addAll]
[), ;, combinedRefs, ., addAll, (, range, ., refsBefore, (, ), ), ;, combinedRefs, ., addAll, (, newSourceCollection, ., references]
[;, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, combinedRefs, ., addAll, (, range, ., refsAfter, (, ), )]
[., addAll, (, range, ., refsBefore, (, ), ), ;, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, combinedRefs]
[), ;, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, combinedRefs, ., addAll, (, range, ., refsAfter, (, )]
[., refsBefore, (, ), ), ;, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, combinedRefs, ., addAll, (, range]
[;, combinedRefs, ., addAll, (, range, ., refsAfter, (, ), ), ;, }, private, SourceRefRange, findSourceRefRange, (, List, <, Reference]
[., addAll, (, newSourceCollection, ., references, ), ;, combinedRefs, ., addAll, (, range, ., refsAfter, (, ), ), ;, }]
[), ;, combinedRefs, ., addAll, (, range, ., refsAfter, (, ), ), ;, }, private, SourceRefRange, findSourceRefRange, (, List, <]
[., references, ), ;, combinedRefs, ., addAll, (, range, ., refsAfter, (, ), ), ;, }, private, SourceRefRange, findSourceRefRange, (]
[;, }, private, SourceRefRange, findSourceRefRange, (, List, <, Reference, >, refList, ,, InputId, inputId, ), {, Preconditions, ., checkNotNull, (]
[., addAll, (, range, ., refsAfter, (, ), ), ;, }, private, SourceRefRange, findSourceRefRange, (, List, <, Reference, >, refList]
[), ;, }, private, SourceRefRange, findSourceRefRange, (, List, <, Reference, >, refList, ,, InputId, inputId, ), {, Preconditions, ., checkNotNull]
[., refsAfter, (, ), ), ;, }, private, SourceRefRange, findSourceRefRange, (, List, <, Reference, >, refList, ,, InputId, inputId, )]
[;, int, lastBefore, =, -, 1, ;, int, firstAfter, =, refList, ., size, (, ), ;, int, index, =, 0]
[., checkNotNull, (, inputId, ), ;, int, lastBefore, =, -, 1, ;, int, firstAfter, =, refList, ., size, (, )]
[), ;, int, lastBefore, =, -, 1, ;, int, firstAfter, =, refList, ., size, (, ), ;, int, index, =]
[;, int, firstAfter, =, refList, ., size, (, ), ;, int, index, =, 0, ;, Preconditions, ., checkState, (, inputOrder]
[;, int, firstAfter, =, refList, ., size, (, ), ;, int, index, =, 0, ;, Preconditions, ., checkState, (, inputOrder]
[;, int, index, =, 0, ;, Preconditions, ., checkState, (, inputOrder, ., containsKey, (, inputId, ), ,, inputId, ., getIdName]
[., size, (, ), ;, int, index, =, 0, ;, Preconditions, ., checkState, (, inputOrder, ., containsKey, (, inputId, )]
[;, Preconditions, ., checkState, (, inputOrder, ., containsKey, (, inputId, ), ,, inputId, ., getIdName, (, ), ), ;, int]
[;, int, sourceInputOrder, =, inputOrder, ., get, (, inputId, ), ;, for, (, Reference, ref, :, refList, ), {, Preconditions]
[., checkState, (, inputOrder, ., containsKey, (, inputId, ), ,, inputId, ., getIdName, (, ), ), ;, int, sourceInputOrder, =]
[,, inputId, ., getIdName, (, ), ), ;, int, sourceInputOrder, =, inputOrder, ., get, (, inputId, ), ;, for, (]
[., containsKey, (, inputId, ), ,, inputId, ., getIdName, (, ), ), ;, int, sourceInputOrder, =, inputOrder, ., get, (]
[), ,, inputId, ., getIdName, (, ), ), ;, int, sourceInputOrder, =, inputOrder, ., get, (, inputId, ), ;, for]
[), ;, int, sourceInputOrder, =, inputOrder, ., get, (, inputId, ), ;, for, (, Reference, ref, :, refList, ), {]
[., getIdName, (, ), ), ;, int, sourceInputOrder, =, inputOrder, ., get, (, inputId, ), ;, for, (, Reference, ref]
[;, for, (, Reference, ref, :, refList, ), {, Preconditions, ., checkNotNull, (, ref, ., getInputId, (, ), ), ;]
[., get, (, inputId, ), ;, for, (, Reference, ref, :, refList, ), {, Preconditions, ., checkNotNull, (, ref, .]
[), ;, for, (, Reference, ref, :, refList, ), {, Preconditions, ., checkNotNull, (, ref, ., getInputId, (, ), )]
[), {, Preconditions, ., checkNotNull, (, ref, ., getInputId, (, ), ), ;, int, order, =, inputOrder, ., get, (]
[;, int, order, =, inputOrder, ., get, (, ref, ., getInputId, (, ), ), ;, if, (, order, <, sourceInputOrder]
[., checkNotNull, (, ref, ., getInputId, (, ), ), ;, int, order, =, inputOrder, ., get, (, ref, ., getInputId]
[), ;, int, order, =, inputOrder, ., get, (, ref, ., getInputId, (, ), ), ;, if, (, order, <]
[., getInputId, (, ), ), ;, int, order, =, inputOrder, ., get, (, ref, ., getInputId, (, ), ), ;]
[;, if, (, order, <, sourceInputOrder, ), {, lastBefore, =, index, ;, }, else, if, (, order, >, sourceInputOrder, )]
[., get, (, ref, ., getInputId, (, ), ), ;, if, (, order, <, sourceInputOrder, ), {, lastBefore, =, index]
[), ;, if, (, order, <, sourceInputOrder, ), {, lastBefore, =, index, ;, }, else, if, (, order, >, sourceInputOrder]
[., getInputId, (, ), ), ;, if, (, order, <, sourceInputOrder, ), {, lastBefore, =, index, ;, }, else, if]
[), {, lastBefore, =, index, ;, }, else, if, (, order, >, sourceInputOrder, ), {, firstAfter, =, index, ;, break]
[<, sourceInputOrder, ), {, lastBefore, =, index, ;, }, else, if, (, order, >, sourceInputOrder, ), {, firstAfter, =, index]
[), {, lastBefore, =, index, ;, }, else, if, (, order, >, sourceInputOrder, ), {, firstAfter, =, index, ;, break]
[=, index, ;, }, else, if, (, order, >, sourceInputOrder, ), {, firstAfter, =, index, ;, break, ;, }, index]
[;, }, else, if, (, order, >, sourceInputOrder, ), {, firstAfter, =, index, ;, break, ;, }, index, ++, ;]
[), {, firstAfter, =, index, ;, break, ;, }, index, ++, ;, }, return, new, SourceRefRange, (, refList, ,, lastBefore]
[>, sourceInputOrder, ), {, firstAfter, =, index, ;, break, ;, }, index, ++, ;, }, return, new, SourceRefRange, (, refList]
[), {, firstAfter, =, index, ;, break, ;, }, index, ++, ;, }, return, new, SourceRefRange, (, refList, ,, lastBefore]
[=, index, ;, break, ;, }, index, ++, ;, }, return, new, SourceRefRange, (, refList, ,, lastBefore, ,, firstAfter, )]
[;, break, ;, }, index, ++, ;, }, return, new, SourceRefRange, (, refList, ,, lastBefore, ,, firstAfter, ), ;, }]
[;, }, return, new, SourceRefRange, (, refList, ,, lastBefore, ,, firstAfter, ), ;, }, private, static, class, SourceRefRange, {, private]
[++, ;, }, return, new, SourceRefRange, (, refList, ,, lastBefore, ,, firstAfter, ), ;, }, private, static, class, SourceRefRange, {]
[;, }, private, static, class, SourceRefRange, {, private, final, int, lastBefore, ;, private, final, int, firstAfter, ;, private, final, List]
[,, lastBefore, ,, firstAfter, ), ;, }, private, static, class, SourceRefRange, {, private, final, int, lastBefore, ;, private, final, int]
[,, firstAfter, ), ;, }, private, static, class, SourceRefRange, {, private, final, int, lastBefore, ;, private, final, int, firstAfter, ;]
[), ;, }, private, static, class, SourceRefRange, {, private, final, int, lastBefore, ;, private, final, int, firstAfter, ;, private, final]
[=, Math, ., max, (, lastBefore, ,, -, 1, ), ;, this, ., firstAfter, =, Math, ., min, (, firstAfter]
[., lastBefore, =, Math, ., max, (, lastBefore, ,, -, 1, ), ;, this, ., firstAfter, =, Math, ., min]
[;, this, ., firstAfter, =, Math, ., min, (, firstAfter, ,, refList, ., size, (, ), ), ;, this, .]
[., max, (, lastBefore, ,, -, 1, ), ;, this, ., firstAfter, =, Math, ., min, (, firstAfter, ,, refList]
[,, -, 1, ), ;, this, ., firstAfter, =, Math, ., min, (, firstAfter, ,, refList, ., size, (, )]
[), ;, this, ., firstAfter, =, Math, ., min, (, firstAfter, ,, refList, ., size, (, ), ), ;, this]
[), ;, this, ., firstAfter, =, Math, ., min, (, firstAfter, ,, refList, ., size, (, ), ), ;, this]
[=, Math, ., min, (, firstAfter, ,, refList, ., size, (, ), ), ;, this, ., refList, =, refList, ;]
[., firstAfter, =, Math, ., min, (, firstAfter, ,, refList, ., size, (, ), ), ;, this, ., refList, =]
[;, this, ., refList, =, refList, ;, }, List, <, Reference, >, refsBefore, (, ), {, return, refList, ., subList]
[., min, (, firstAfter, ,, refList, ., size, (, ), ), ;, this, ., refList, =, refList, ;, }, List]
[,, refList, ., size, (, ), ), ;, this, ., refList, =, refList, ;, }, List, <, Reference, >, refsBefore]
[), ;, this, ., refList, =, refList, ;, }, List, <, Reference, >, refsBefore, (, ), {, return, refList, .]
[., size, (, ), ), ;, this, ., refList, =, refList, ;, }, List, <, Reference, >, refsBefore, (, )]
[=, refList, ;, }, List, <, Reference, >, refsBefore, (, ), {, return, refList, ., subList, (, 0, ,, lastBefore]
[., refList, =, refList, ;, }, List, <, Reference, >, refsBefore, (, ), {, return, refList, ., subList, (, 0]
[;, }, List, <, Reference, >, refsBefore, (, ), {, return, refList, ., subList, (, 0, ,, lastBefore, +, 1]
[;, }, List, <, Reference, >, refsAfter, (, ), {, return, refList, ., subList, (, firstAfter, ,, refList, ., size]
[., subList, (, 0, ,, lastBefore, +, 1, ), ;, }, List, <, Reference, >, refsAfter, (, ), {, return]
[,, lastBefore, +, 1, ), ;, }, List, <, Reference, >, refsAfter, (, ), {, return, refList, ., subList, (]
[), ;, }, List, <, Reference, >, refsAfter, (, ), {, return, refList, ., subList, (, firstAfter, ,, refList, .]
[+, 1, ), ;, }, List, <, Reference, >, refsAfter, (, ), {, return, refList, ., subList, (, firstAfter, ,]
[), ;, }, List, <, Reference, >, refsAfter, (, ), {, return, refList, ., subList, (, firstAfter, ,, refList, .]
[;, }, }, public, void, updateReferencesWithGlobalScope, (, Scope, globalScope, ), {, for, (, ReferenceCollection, collection, :, refMap, ., values, (]
[., subList, (, firstAfter, ,, refList, ., size, (, ), ), ;, }, }, public, void, updateReferencesWithGlobalScope, (, Scope, globalScope]
[,, refList, ., size, (, ), ), ;, }, }, public, void, updateReferencesWithGlobalScope, (, Scope, globalScope, ), {, for, (]
[), ;, }, }, public, void, updateReferencesWithGlobalScope, (, Scope, globalScope, ), {, for, (, ReferenceCollection, collection, :, refMap, ., values]
[., size, (, ), ), ;, }, }, public, void, updateReferencesWithGlobalScope, (, Scope, globalScope, ), {, for, (, ReferenceCollection, collection]
[), {, List, <, Reference, >, newRefs, =, Lists, ., newArrayListWithCapacity, (, collection, ., references, ., size, (, ), )]
[., values, (, ), ), {, List, <, Reference, >, newRefs, =, Lists, ., newArrayListWithCapacity, (, collection, ., references, .]
[;, for, (, Reference, ref, :, collection, ., references, ), {, if, (, ref, ., getScope, (, ), !=, globalScope]
[., newArrayListWithCapacity, (, collection, ., references, ., size, (, ), ), ;, for, (, Reference, ref, :, collection, ., references]
[), ;, for, (, Reference, ref, :, collection, ., references, ), {, if, (, ref, ., getScope, (, ), !=]
[., size, (, ), ), ;, for, (, Reference, ref, :, collection, ., references, ), {, if, (, ref, .]
[., references, ., size, (, ), ), ;, for, (, Reference, ref, :, collection, ., references, ), {, if, (]
[), {, if, (, ref, ., getScope, (, ), !=, globalScope, ), {, newRefs, ., add, (, ref, ., cloneWithNewScope]
[., references, ), {, if, (, ref, ., getScope, (, ), !=, globalScope, ), {, newRefs, ., add, (, ref]
[), {, newRefs, ., add, (, ref, ., cloneWithNewScope, (, globalScope, ), ), ;, }, else, {, newRefs, ., add]
[!=, globalScope, ), {, newRefs, ., add, (, ref, ., cloneWithNewScope, (, globalScope, ), ), ;, }, else, {, newRefs]
[., getScope, (, ), !=, globalScope, ), {, newRefs, ., add, (, ref, ., cloneWithNewScope, (, globalScope, ), ), ;]
[), {, newRefs, ., add, (, ref, ., cloneWithNewScope, (, globalScope, ), ), ;, }, else, {, newRefs, ., add]
[;, }, else, {, newRefs, ., add, (, ref, ), ;, }, }, collection, ., references, =, newRefs, ;, }]
[., add, (, ref, ., cloneWithNewScope, (, globalScope, ), ), ;, }, else, {, newRefs, ., add, (, ref, )]
[), ;, }, else, {, newRefs, ., add, (, ref, ), ;, }, }, collection, ., references, =, newRefs, ;]
[., cloneWithNewScope, (, globalScope, ), ), ;, }, else, {, newRefs, ., add, (, ref, ), ;, }, }, collection]
[), ), ;, }, else, {, newRefs, ., add, (, ref, ), ;, }, }, collection, ., references, =, newRefs]
[;, }, }, collection, ., references, =, newRefs, ;, }, }, static, class, GlobalVarRefCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler]
[., add, (, ref, ), ;, }, }, collection, ., references, =, newRefs, ;, }, }, static, class, GlobalVarRefCleanupPass, implements]
[), ;, }, }, collection, ., references, =, newRefs, ;, }, }, static, class, GlobalVarRefCleanupPass, implements, HotSwapCompilerPass, {, private, final]
[=, newRefs, ;, }, }, static, class, GlobalVarRefCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, GlobalVarRefCleanupPass, (, AbstractCompiler]
[., references, =, newRefs, ;, }, }, static, class, GlobalVarRefCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, GlobalVarRefCleanupPass]
[;, }, }, static, class, GlobalVarRefCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, GlobalVarRefCleanupPass, (, AbstractCompiler, compiler, )]
[=, compiler, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, GlobalVarReferenceMap, refMap, =]
[., compiler, =, compiler, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, GlobalVarReferenceMap]
[;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, GlobalVarReferenceMap, refMap, =, compiler, .]
[;, if, (, refMap, !=, null, ), {, refMap, ., updateReferencesWithGlobalScope, (, compiler, ., getTopScope, (, ), ), ;, }]
[., getGlobalVarReferences, (, ), ;, if, (, refMap, !=, null, ), {, refMap, ., updateReferencesWithGlobalScope, (, compiler, ., getTopScope, (]
[), {, refMap, ., updateReferencesWithGlobalScope, (, compiler, ., getTopScope, (, ), ), ;, }, }, @, Override, public, void, process]
[!=, null, ), {, refMap, ., updateReferencesWithGlobalScope, (, compiler, ., getTopScope, (, ), ), ;, }, }, @, Override, public]
[), {, refMap, ., updateReferencesWithGlobalScope, (, compiler, ., getTopScope, (, ), ), ;, }, }, @, Override, public, void, process]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, }, }, }]
[., updateReferencesWithGlobalScope, (, compiler, ., getTopScope, (, ), ), ;, }, }, @, Override, public, void, process, (, Node, externs]
[), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, }, }, }]
[., getTopScope, (, ), ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
