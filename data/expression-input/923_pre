[;, public, abstract, class, AbstractMultipleLinearRegression, implements, MultipleLinearRegression, {, private, RealMatrix, xMatrix, ;, private, RealVector, yVector, ;, private, boolean, noIntercept, =]
[RealMatrix, xMatrix, ;, private, RealVector, yVector, ;, private, boolean, noIntercept, =, false, ;, protected, RealMatrix, getX, (, ), {, return]
[=, false, ;, protected, RealMatrix, getX, (, ), {, return, xMatrix, ;, }, protected, RealVector, getY, (, ), {, return]
[xMatrix, ;, }, protected, RealVector, getY, (, ), {, return, yVector, ;, }, public, boolean, isNoIntercept, (, ), {, return]
[;, }, public, boolean, isNoIntercept, (, ), {, return, noIntercept, ;, }, public, void, setNoIntercept, (, boolean, noIntercept, ), {]
[;, }, public, boolean, isNoIntercept, (, ), {, return, noIntercept, ;, }, public, void, setNoIntercept, (, boolean, noIntercept, ), {]
[isNoIntercept, (, ), {, return, noIntercept, ;, }, public, void, setNoIntercept, (, boolean, noIntercept, ), {, this, ., noIntercept, =]
[;, }, public, void, newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars, ), {, if, (]
[;, }, public, void, newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars, ), {, if, (]
[public, void, newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars, ), {, if, (, data, ==]
[double, [, ], data, ,, int, nobs, ,, int, nvars, ), {, if, (, data, ==, null, ), {, throw]
[int, nvars, ), {, if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[int, nvars, ), {, if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[int, nvars, ), {, if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, !=]
[if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, !=]
[data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, !=, nobs, *]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, !=, nobs, *, (]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, !=, nobs, *, (]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, !=, nobs, *, (, nvars, +]
[(, ), ;, }, if, (, data, ., length, !=, nobs, *, (, nvars, +, 1, ), ), {, throw]
[}, if, (, data, ., length, !=, nobs, *, (, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException, (]
[}, if, (, data, ., length, !=, nobs, *, (, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException, (]
[., length, !=, nobs, *, (, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,]
[., length, !=, nobs, *, (, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,]
[!=, nobs, *, (, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *]
[nobs, *, (, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (]
[nobs, *, (, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (]
[(, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (, nvars, +]
[throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (, nvars, +, 1, ), ), ;, }, if, (]
[throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (, nvars, +, 1, ), ), ;, }, if, (]
[DimensionMismatchException, (, data, ., length, ,, nobs, *, (, nvars, +, 1, ), ), ;, }, if, (, nobs, <=]
[length, ,, nobs, *, (, nvars, +, 1, ), ), ;, }, if, (, nobs, <=, nvars, ), {, throw]
[*, (, nvars, +, 1, ), ), ;, }, if, (, nobs, <=, nvars, ), {, throw, new, NumberIsTooSmallException, (]
[nvars, +, 1, ), ), ;, }, if, (, nobs, <=, nvars, ), {, throw, new, NumberIsTooSmallException, (, nobs, ,]
[1, ), ), ;, }, if, (, nobs, <=, nvars, ), {, throw, new, NumberIsTooSmallException, (, nobs, ,, nvars, ,]
[nvars, ), {, throw, new, NumberIsTooSmallException, (, nobs, ,, nvars, ,, false, ), ;, }, double, [, ], y, =]
[throw, new, NumberIsTooSmallException, (, nobs, ,, nvars, ,, false, ), ;, }, double, [, ], y, =, new, double, []
[,, false, ), ;, }, double, [, ], y, =, new, double, [, nobs, ], ;, final, int, cols, =]
[,, false, ), ;, }, double, [, ], y, =, new, double, [, nobs, ], ;, final, int, cols, =]
[), ;, }, double, [, ], y, =, new, double, [, nobs, ], ;, final, int, cols, =, noIntercept, ?]
[}, double, [, ], y, =, new, double, [, nobs, ], ;, final, int, cols, =, noIntercept, ?, nvars, :]
[}, double, [, ], y, =, new, double, [, nobs, ], ;, final, int, cols, =, noIntercept, ?, nvars, :]
[[, ], y, =, new, double, [, nobs, ], ;, final, int, cols, =, noIntercept, ?, nvars, :, nvars, +]
[;, final, int, cols, =, noIntercept, ?, nvars, :, nvars, +, 1, ;, double, [, ], [, ], x, =]
[cols, =, noIntercept, ?, nvars, :, nvars, +, 1, ;, double, [, ], [, ], x, =, new, double, []
[?, nvars, :, nvars, +, 1, ;, double, [, ], [, ], x, =, new, double, [, nobs, ], []
[;, double, [, ], [, ], x, =, new, double, [, nobs, ], [, cols, ], ;, int, pointer, =]
[=, new, double, [, nobs, ], [, cols, ], ;, int, pointer, =, 0, ;, for, (, int, i, =]
[double, [, nobs, ], [, cols, ], ;, int, pointer, =, 0, ;, for, (, int, i, =, 0, ;]
[double, [, nobs, ], [, cols, ], ;, int, pointer, =, 0, ;, for, (, int, i, =, 0, ;]
[nobs, ], [, cols, ], ;, int, pointer, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[[, cols, ], ;, int, pointer, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nobs, ;]
[[, cols, ], ;, int, pointer, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nobs, ;]
[int, pointer, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nobs, ;, i, ++, ), {]
[int, pointer, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nobs, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nobs, ;, i, ++, ), {, y, []
[for, (, int, i, =, 0, ;, i, <, nobs, ;, i, ++, ), {, y, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, nobs, ;, i, ++, ), {, y, [, i, ], =]
[int, i, =, 0, ;, i, <, nobs, ;, i, ++, ), {, y, [, i, ], =, data, []
[int, i, =, 0, ;, i, <, nobs, ;, i, ++, ), {, y, [, i, ], =, data, []
[<, nobs, ;, i, ++, ), {, y, [, i, ], =, data, [, pointer, ++, ], ;, if, (]
[nobs, ;, i, ++, ), {, y, [, i, ], =, data, [, pointer, ++, ], ;, if, (, !]
[++, ), {, y, [, i, ], =, data, [, pointer, ++, ], ;, if, (, !, noIntercept, ), {]
[++, ), {, y, [, i, ], =, data, [, pointer, ++, ], ;, if, (, !, noIntercept, ), {]
[++, ), {, y, [, i, ], =, data, [, pointer, ++, ], ;, if, (, !, noIntercept, ), {]
[{, y, [, i, ], =, data, [, pointer, ++, ], ;, if, (, !, noIntercept, ), {, x, []
[i, ], =, data, [, pointer, ++, ], ;, if, (, !, noIntercept, ), {, x, [, i, ], []
[data, [, pointer, ++, ], ;, if, (, !, noIntercept, ), {, x, [, i, ], [, 0, ], =]
[!, noIntercept, ), {, x, [, i, ], [, 0, ], =, 1.0d, ;, }, for, (, int, j, =]
[!, noIntercept, ), {, x, [, i, ], [, 0, ], =, 1.0d, ;, }, for, (, int, j, =]
[), {, x, [, i, ], [, 0, ], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?]
[x, [, i, ], [, 0, ], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?, 0, :]
[i, ], [, 0, ], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;]
[i, ], [, 0, ], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;]
[[, 0, ], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;, j, <]
[], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;, j, <, cols, ;]
[], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;, j, <, cols, ;]
[}, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;, j, <, cols, ;, j, ++, ), {]
[}, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;, j, <, cols, ;, j, ++, ), {]
[}, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;, j, <, cols, ;, j, ++, ), {]
[(, int, j, =, noIntercept, ?, 0, :, 1, ;, j, <, cols, ;, j, ++, ), {, x, []
[=, noIntercept, ?, 0, :, 1, ;, j, <, cols, ;, j, ++, ), {, x, [, i, ], []
[0, :, 1, ;, j, <, cols, ;, j, ++, ), {, x, [, i, ], [, j, ], =]
[0, :, 1, ;, j, <, cols, ;, j, ++, ), {, x, [, i, ], [, j, ], =]
[1, ;, j, <, cols, ;, j, ++, ), {, x, [, i, ], [, j, ], =, data, []
[1, ;, j, <, cols, ;, j, ++, ), {, x, [, i, ], [, j, ], =, data, []
[j, ++, ), {, x, [, i, ], [, j, ], =, data, [, pointer, ++, ], ;, }, }]
[j, ++, ), {, x, [, i, ], [, j, ], =, data, [, pointer, ++, ], ;, }, }]
[x, [, i, ], [, j, ], =, data, [, pointer, ++, ], ;, }, }, this, ., xMatrix, =]
[], [, j, ], =, data, [, pointer, ++, ], ;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (]
[], =, data, [, pointer, ++, ], ;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ), ;]
[], =, data, [, pointer, ++, ], ;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ), ;]
[pointer, ++, ], ;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ), ;, this, ., yVector, =]
[;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ), ;, this, ., yVector, =, new, ArrayRealVector, (]
[=, new, ArrayRealVector, (, y, ), ;, }, protected, void, newYSampleData, (, double, [, ], y, ), {, if, (]
[=, new, ArrayRealVector, (, y, ), ;, }, protected, void, newYSampleData, (, double, [, ], y, ), {, if, (]
[ArrayRealVector, (, y, ), ;, }, protected, void, newYSampleData, (, double, [, ], y, ), {, if, (, y, ==]
[;, }, protected, void, newYSampleData, (, double, [, ], y, ), {, if, (, y, ==, null, ), {, throw]
[], y, ), {, if, (, y, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[], y, ), {, if, (, y, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[], y, ), {, if, (, y, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, y, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, ==]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, ==, 0, ), {, throw]
[(, ), ;, }, if, (, y, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }]
[(, ), ;, }, if, (, y, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }]
[if, (, y, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, this, ., yVector, =]
[., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, this, ., yVector, =, new, ArrayRealVector, (]
[ArrayRealVector, (, y, ), ;, }, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, if, (]
[ArrayRealVector, (, y, ), ;, }, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, if, (]
[y, ), ;, }, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, if, (, x, ==]
[protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, if, (, x, ==, null, ), {, throw]
[], x, ), {, if, (, x, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[], x, ), {, if, (, x, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[], x, ), {, if, (, x, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, x, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, ==]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw]
[;, }, if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[(, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, noIntercept, ), {]
[(, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, noIntercept, ), {]
[==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, noIntercept, ), {, this, ., xMatrix, =]
[{, throw, new, NoDataException, (, ), ;, }, if, (, noIntercept, ), {, this, ., xMatrix, =, new, Array2DRowRealMatrix, (]
[new, NoDataException, (, ), ;, }, if, (, noIntercept, ), {, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ,]
[{, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ,, true, ), ;, }, else, {, final, int, nVars, =]
[{, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ,, true, ), ;, }, else, {, final, int, nVars, =]
[{, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ,, true, ), ;, }, else, {, final, int, nVars, =]
[., xMatrix, =, new, Array2DRowRealMatrix, (, x, ,, true, ), ;, }, else, {, final, int, nVars, =, x, []
[{, final, int, nVars, =, x, [, 0, ], ., length, ;, final, double, [, ], [, ], xAug, =]
[nVars, =, x, [, 0, ], ., length, ;, final, double, [, ], [, ], xAug, =, new, double, []
[nVars, =, x, [, 0, ], ., length, ;, final, double, [, ], [, ], xAug, =, new, double, []
[], ., length, ;, final, double, [, ], [, ], xAug, =, new, double, [, x, ., length, ], []
[], ., length, ;, final, double, [, ], [, ], xAug, =, new, double, [, x, ., length, ], []
[length, ;, final, double, [, ], [, ], xAug, =, new, double, [, x, ., length, ], [, nVars, +]
[xAug, =, new, double, [, x, ., length, ], [, nVars, +, 1, ], ;, for, (, int, i, =]
[new, double, [, x, ., length, ], [, nVars, +, 1, ], ;, for, (, int, i, =, 0, ;]
[new, double, [, x, ., length, ], [, nVars, +, 1, ], ;, for, (, int, i, =, 0, ;]
[[, x, ., length, ], [, nVars, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <]
[[, x, ., length, ], [, nVars, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <]
[], [, nVars, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;]
[], [, nVars, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (, x, []
[;, i, <, x, ., length, ;, i, ++, ), {, if, (, x, [, i, ], ., length, !=]
[., length, ;, i, ++, ), {, if, (, x, [, i, ], ., length, !=, nVars, ), {, throw]
[i, ++, ), {, if, (, x, [, i, ], ., length, !=, nVars, ), {, throw, new, DimensionMismatchException, (]
[i, ++, ), {, if, (, x, [, i, ], ., length, !=, nVars, ), {, throw, new, DimensionMismatchException, (]
[i, ++, ), {, if, (, x, [, i, ], ., length, !=, nVars, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, x, [, i, ], ., length, !=, nVars, ), {, throw, new, DimensionMismatchException, (, x, []
[[, i, ], ., length, !=, nVars, ), {, throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,]
[length, !=, nVars, ), {, throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,, nVars, ), ;, }]
[length, !=, nVars, ), {, throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,, nVars, ), ;, }]
[length, !=, nVars, ), {, throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,, nVars, ), ;, }]
[nVars, ), {, throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,, nVars, ), ;, }, xAug, []
[throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,, nVars, ), ;, }, xAug, [, i, ], []
[(, x, [, i, ], ., length, ,, nVars, ), ;, }, xAug, [, i, ], [, 0, ], =]
[[, i, ], ., length, ,, nVars, ), ;, }, xAug, [, i, ], [, 0, ], =, 1.0d, ;]
[[, i, ], ., length, ,, nVars, ), ;, }, xAug, [, i, ], [, 0, ], =, 1.0d, ;]
[length, ,, nVars, ), ;, }, xAug, [, i, ], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (]
[length, ,, nVars, ), ;, }, xAug, [, i, ], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (]
[nVars, ), ;, }, xAug, [, i, ], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (, x, []
[}, xAug, [, i, ], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (, x, [, i, ], ,]
[[, i, ], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (, x, [, i, ], ,, 0, ,]
[[, i, ], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (, x, [, i, ], ,, 0, ,]
[], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (, x, [, i, ], ,, 0, ,, xAug, []
[], =, 1.0d, ;, System, ., arraycopy, (, x, [, i, ], ,, 0, ,, xAug, [, i, ], ,]
[1.0d, ;, System, ., arraycopy, (, x, [, i, ], ,, 0, ,, xAug, [, i, ], ,, 1, ,]
[arraycopy, (, x, [, i, ], ,, 0, ,, xAug, [, i, ], ,, 1, ,, nVars, ), ;, }]
[arraycopy, (, x, [, i, ], ,, 0, ,, xAug, [, i, ], ,, 1, ,, nVars, ), ;, }]
[i, ], ,, 0, ,, xAug, [, i, ], ,, 1, ,, nVars, ), ;, }, this, ., xMatrix, =]
[0, ,, xAug, [, i, ], ,, 1, ,, nVars, ), ;, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (]
[xAug, [, i, ], ,, 1, ,, nVars, ), ;, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, xAug, ,]
[void, validateSampleData, (, double, [, ], [, ], x, ,, double, [, ], y, ), throws, MathIllegalArgumentException, {, if, (]
[void, validateSampleData, (, double, [, ], [, ], x, ,, double, [, ], y, ), throws, MathIllegalArgumentException, {, if, (]
[validateSampleData, (, double, [, ], [, ], x, ,, double, [, ], y, ), throws, MathIllegalArgumentException, {, if, (, (]
[validateSampleData, (, double, [, ], [, ], x, ,, double, [, ], y, ), throws, MathIllegalArgumentException, {, if, (, (]
[double, [, ], [, ], x, ,, double, [, ], y, ), throws, MathIllegalArgumentException, {, if, (, (, x, ==]
[[, ], x, ,, double, [, ], y, ), throws, MathIllegalArgumentException, {, if, (, (, x, ==, null, ), ||]
[], x, ,, double, [, ], y, ), throws, MathIllegalArgumentException, {, if, (, (, x, ==, null, ), ||, (]
[], x, ,, double, [, ], y, ), throws, MathIllegalArgumentException, {, if, (, (, x, ==, null, ), ||, (]
[,, double, [, ], y, ), throws, MathIllegalArgumentException, {, if, (, (, x, ==, null, ), ||, (, y, ==]
[), throws, MathIllegalArgumentException, {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, throw]
[==, null, ), ||, (, y, ==, null, ), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[==, null, ), ||, (, y, ==, null, ), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[==, null, ), ||, (, y, ==, null, ), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[(, y, ==, null, ), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, !=]
[(, y, ==, null, ), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, !=]
[{, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, throw]
[NullArgumentException, (, ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, throw, new, DimensionMismatchException, (]
[NullArgumentException, (, ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, throw, new, DimensionMismatchException, (]
[}, if, (, x, ., length, !=, y, ., length, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,]
[}, if, (, x, ., length, !=, y, ., length, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,]
[., length, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,, x, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,, x, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,, x, ., length, ), ;, }, if, (]
[throw, new, DimensionMismatchException, (, y, ., length, ,, x, ., length, ), ;, }, if, (, x, ., length, ==]
[y, ., length, ,, x, ., length, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw]
[;, }, if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[;, }, if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[;, }, if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[;, }, if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[;, }, if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, x, []
[==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, x, [, 0, ], ., length, +]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, x, [, 0, ], ., length, +, 1, >]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, x, [, 0, ], ., length, +, 1, >]
[), ;, }, if, (, x, [, 0, ], ., length, +, 1, >, x, ., length, ), {, throw]
[if, (, x, [, 0, ], ., length, +, 1, >, x, ., length, ), {, throw, new, MathIllegalArgumentException, (]
[if, (, x, [, 0, ], ., length, +, 1, >, x, ., length, ), {, throw, new, MathIllegalArgumentException, (]
[0, ], ., length, +, 1, >, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,]
[0, ], ., length, +, 1, >, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,]
[+, 1, >, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,]
[+, 1, >, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,]
[+, 1, >, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,]
[>, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, []
[void, validateCovarianceData, (, double, [, ], [, ], x, ,, double, [, ], [, ], covariance, ), {, if, (]
[void, validateCovarianceData, (, double, [, ], [, ], x, ,, double, [, ], [, ], covariance, ), {, if, (]
[void, validateCovarianceData, (, double, [, ], [, ], x, ,, double, [, ], [, ], covariance, ), {, if, (]
[[, ], [, ], x, ,, double, [, ], [, ], covariance, ), {, if, (, x, ., length, !=]
[[, ], [, ], x, ,, double, [, ], [, ], covariance, ), {, if, (, x, ., length, !=]
[double, [, ], [, ], covariance, ), {, if, (, x, ., length, !=, covariance, ., length, ), {, throw]
[[, ], covariance, ), {, if, (, x, ., length, !=, covariance, ., length, ), {, throw, new, DimensionMismatchException, (]
[[, ], covariance, ), {, if, (, x, ., length, !=, covariance, ., length, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, x, ., length, !=, covariance, ., length, ), {, throw, new, DimensionMismatchException, (, x, ., length, ,]
[{, if, (, x, ., length, !=, covariance, ., length, ), {, throw, new, DimensionMismatchException, (, x, ., length, ,]
[., length, ), {, throw, new, DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }, if, (]
[throw, new, DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }, if, (, covariance, ., length, >]
[DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }, if, (, covariance, ., length, >, 0, &&]
[DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }, if, (, covariance, ., length, >, 0, &&]
[DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }, if, (, covariance, ., length, >, 0, &&]
[length, ,, covariance, ., length, ), ;, }, if, (, covariance, ., length, >, 0, &&, covariance, ., length, !=]
[length, ,, covariance, ., length, ), ;, }, if, (, covariance, ., length, >, 0, &&, covariance, ., length, !=]
[length, ,, covariance, ., length, ), ;, }, if, (, covariance, ., length, >, 0, &&, covariance, ., length, !=]
[covariance, ., length, ), ;, }, if, (, covariance, ., length, >, 0, &&, covariance, ., length, !=, covariance, []
[(, covariance, ., length, >, 0, &&, covariance, ., length, !=, covariance, [, 0, ], ., length, ), {, throw]
[length, >, 0, &&, covariance, ., length, !=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (]
[length, >, 0, &&, covariance, ., length, !=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (]
[covariance, ., length, !=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,]
[covariance, ., length, !=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,]
[covariance, ., length, !=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,]
[length, !=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,, covariance, []
[[, 0, ], ., length, ), ;, }, }, public, double, [, ], estimateRegressionParameters, (, ), {, RealVector, b, =]
[), ;, }, }, public, double, [, ], estimateRegressionParameters, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return]
[), ;, }, }, public, double, [, ], estimateRegressionParameters, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return]
[;, return, b, ., toArray, (, ), ;, }, public, double, [, ], estimateResiduals, (, ), {, RealVector, b, =]
[;, }, public, double, [, ], estimateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, RealVector, e, =]
[;, }, public, double, [, ], estimateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, RealVector, e, =]
[[, ], estimateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, RealVector, e, =, yVector, ., subtract, (]
[[, ], estimateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, RealVector, e, =, yVector, ., subtract, (]
[), {, RealVector, b, =, calculateBeta, (, ), ;, RealVector, e, =, yVector, ., subtract, (, xMatrix, ., operate, (]
[calculateBeta, (, ), ;, RealVector, e, =, yVector, ., subtract, (, xMatrix, ., operate, (, b, ), ), ;, return]
[calculateBeta, (, ), ;, RealVector, e, =, yVector, ., subtract, (, xMatrix, ., operate, (, b, ), ), ;, return]
[;, return, e, ., toArray, (, ), ;, }, public, double, [, ], [, ], estimateRegressionParametersVariance, (, ), {, return]
[;, return, e, ., toArray, (, ), ;, }, public, double, [, ], [, ], estimateRegressionParametersVariance, (, ), {, return]
[getData, (, ), ;, }, public, double, [, ], estimateRegressionParametersStandardErrors, (, ), {, double, [, ], [, ], betaVariance, =]
[[, ], estimateRegressionParametersStandardErrors, (, ), {, double, [, ], [, ], betaVariance, =, estimateRegressionParametersVariance, (, ), ;, double, sigma, =]
[[, ], [, ], betaVariance, =, estimateRegressionParametersVariance, (, ), ;, double, sigma, =, calculateErrorVariance, (, ), ;, int, length, =]
[[, ], [, ], betaVariance, =, estimateRegressionParametersVariance, (, ), ;, double, sigma, =, calculateErrorVariance, (, ), ;, int, length, =]
[[, ], [, ], betaVariance, =, estimateRegressionParametersVariance, (, ), ;, double, sigma, =, calculateErrorVariance, (, ), ;, int, length, =]
[[, ], betaVariance, =, estimateRegressionParametersVariance, (, ), ;, double, sigma, =, calculateErrorVariance, (, ), ;, int, length, =, betaVariance, []
[=, calculateErrorVariance, (, ), ;, int, length, =, betaVariance, [, 0, ], ., length, ;, double, [, ], result, =]
[), ;, int, length, =, betaVariance, [, 0, ], ., length, ;, double, [, ], result, =, new, double, []
[], ., length, ;, double, [, ], result, =, new, double, [, length, ], ;, for, (, int, i, =]
[length, ;, double, [, ], result, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;]
[length, ;, double, [, ], result, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], result, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;, i, <]
[], result, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;, i, <, length, ;]
[], result, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;, i, <, length, ;]
[double, [, length, ], ;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {]
[double, [, length, ], ;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, result, []
[for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, result, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, result, [, i, ], =]
[=, 0, ;, i, <, length, ;, i, ++, ), {, result, [, i, ], =, FastMath, ., sqrt, (]
[=, 0, ;, i, <, length, ;, i, ++, ), {, result, [, i, ], =, FastMath, ., sqrt, (]
[;, i, <, length, ;, i, ++, ), {, result, [, i, ], =, FastMath, ., sqrt, (, sigma, *]
[;, i, <, length, ;, i, ++, ), {, result, [, i, ], =, FastMath, ., sqrt, (, sigma, *]
[;, i, <, length, ;, i, ++, ), {, result, [, i, ], =, FastMath, ., sqrt, (, sigma, *]
[<, length, ;, i, ++, ), {, result, [, i, ], =, FastMath, ., sqrt, (, sigma, *, betaVariance, []
[i, ++, ), {, result, [, i, ], =, FastMath, ., sqrt, (, sigma, *, betaVariance, [, i, ], []
[i, ], =, FastMath, ., sqrt, (, sigma, *, betaVariance, [, i, ], [, i, ], ), ;, }, return]
[[, i, ], [, i, ], ), ;, }, return, result, ;, }, public, double, estimateRegressandVariance, (, ), {, return]
[}, public, double, estimateRegressandVariance, (, ), {, return, calculateYVariance, (, ), ;, }, public, double, estimateErrorVariance, (, ), {, return]
[}, public, double, estimateErrorVariance, (, ), {, return, calculateErrorVariance, (, ), ;, }, public, double, estimateRegressionStandardError, (, ), {, return]
[}, public, double, estimateErrorVariance, (, ), {, return, calculateErrorVariance, (, ), ;, }, public, double, estimateRegressionStandardError, (, ), {, return]
[(, ), {, return, calculateErrorVariance, (, ), ;, }, public, double, estimateRegressionStandardError, (, ), {, return, Math, ., sqrt, (]
[abstract, RealVector, calculateBeta, (, ), ;, protected, abstract, RealMatrix, calculateBetaVariance, (, ), ;, protected, double, calculateYVariance, (, ), {, return]
[abstract, RealVector, calculateBeta, (, ), ;, protected, abstract, RealMatrix, calculateBetaVariance, (, ), ;, protected, double, calculateYVariance, (, ), {, return]
[abstract, RealMatrix, calculateBetaVariance, (, ), ;, protected, double, calculateYVariance, (, ), {, return, new, Variance, (, ), ., evaluate, (]
[abstract, RealMatrix, calculateBetaVariance, (, ), ;, protected, double, calculateYVariance, (, ), {, return, new, Variance, (, ), ., evaluate, (]
[., evaluate, (, yVector, ., toArray, (, ), ), ;, }, protected, double, calculateErrorVariance, (, ), {, RealVector, residuals, =]
[toArray, (, ), ), ;, }, protected, double, calculateErrorVariance, (, ), {, RealVector, residuals, =, calculateResiduals, (, ), ;, return]
[toArray, (, ), ), ;, }, protected, double, calculateErrorVariance, (, ), {, RealVector, residuals, =, calculateResiduals, (, ), ;, return]
[toArray, (, ), ), ;, }, protected, double, calculateErrorVariance, (, ), {, RealVector, residuals, =, calculateResiduals, (, ), ;, return]
[;, }, protected, double, calculateErrorVariance, (, ), {, RealVector, residuals, =, calculateResiduals, (, ), ;, return, residuals, ., dotProduct, (]
[double, calculateErrorVariance, (, ), {, RealVector, residuals, =, calculateResiduals, (, ), ;, return, residuals, ., dotProduct, (, residuals, ), /]
[calculateErrorVariance, (, ), {, RealVector, residuals, =, calculateResiduals, (, ), ;, return, residuals, ., dotProduct, (, residuals, ), /, (]
[calculateErrorVariance, (, ), {, RealVector, residuals, =, calculateResiduals, (, ), ;, return, residuals, ., dotProduct, (, residuals, ), /, (]
[calculateErrorVariance, (, ), {, RealVector, residuals, =, calculateResiduals, (, ), ;, return, residuals, ., dotProduct, (, residuals, ), /, (]
[=, calculateResiduals, (, ), ;, return, residuals, ., dotProduct, (, residuals, ), /, (, xMatrix, ., getRowDimension, (, ), -]
[=, calculateResiduals, (, ), ;, return, residuals, ., dotProduct, (, residuals, ), /, (, xMatrix, ., getRowDimension, (, ), -]
[(, ), -, xMatrix, ., getColumnDimension, (, ), ), ;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector, b, =]
[getColumnDimension, (, ), ), ;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return]
[getColumnDimension, (, ), ), ;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return]
[;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return, yVector, ., subtract, (]
[;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return, yVector, ., subtract, (]
[calculateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return, yVector, ., subtract, (, xMatrix, ., operate, (]
