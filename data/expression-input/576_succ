[=, new, ArrayList, <, double, [, ], >, (, ), ;, sigma, =, error, ;, }, public, void, addPoint, (]
[;, sigma, =, error, ;, }, public, void, addPoint, (, double, px, ,, double, py, ), {, points, ., add]
[=, error, ;, }, public, void, addPoint, (, double, px, ,, double, py, ), {, points, ., add, (, new]
[;, }, public, void, addPoint, (, double, px, ,, double, py, ), {, points, ., add, (, new, double, []
[;, }, public, double, [, ], x, (, ), {, final, double, [, ], v, =, new, double, [, points]
[., add, (, new, double, [, ], {, px, ,, py, }, ), ;, }, public, double, [, ], x]
[), ;, }, public, double, [, ], x, (, ), {, final, double, [, ], v, =, new, double, []
[), ;, }, public, double, [, ], x, (, ), {, final, double, [, ], v, =, new, double, []
[,, py, }, ), ;, }, public, double, [, ], x, (, ), {, final, double, [, ], v, =]
[}, ), ;, }, public, double, [, ], x, (, ), {, final, double, [, ], v, =, new, double]
[;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, )]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, )]
[;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points]
[;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, []
[<, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get]
[;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, []
[., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i]
[), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, [, i, ], =]
[++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, [, i, ]]
[;, v, [, i, ], =, p, [, 0, ], ;, }, return, v, ;, }, public, double, [, ]]
[., get, (, i, ), ;, v, [, i, ], =, p, [, 0, ], ;, }, return, v, ;]
[), ;, v, [, i, ], =, p, [, 0, ], ;, }, return, v, ;, }, public, double, []
[=, p, [, 0, ], ;, }, return, v, ;, }, public, double, [, ], y, (, ), {, final]
[[, i, ], =, p, [, 0, ], ;, }, return, v, ;, }, public, double, [, ], y, (]
[], =, p, [, 0, ], ;, }, return, v, ;, }, public, double, [, ], y, (, ), {]
[;, }, return, v, ;, }, public, double, [, ], y, (, ), {, final, double, [, ], v, =]
[[, 0, ], ;, }, return, v, ;, }, public, double, [, ], y, (, ), {, final, double, []
[], ;, }, return, v, ;, }, public, double, [, ], y, (, ), {, final, double, [, ], v]
[;, }, public, double, [, ], y, (, ), {, final, double, [, ], v, =, new, double, [, points]
[;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, )]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, )]
[;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points]
[;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, []
[<, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get]
[;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, []
[., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i]
[), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, [, i, ], =]
[++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, [, i, ]]
[;, v, [, i, ], =, p, [, 1, ], ;, }, return, v, ;, }, public, double, [, ]]
[., get, (, i, ), ;, v, [, i, ], =, p, [, 1, ], ;, }, return, v, ;]
[), ;, v, [, i, ], =, p, [, 1, ], ;, }, return, v, ;, }, public, double, []
[=, p, [, 1, ], ;, }, return, v, ;, }, public, double, [, ], target, (, ), {, return]
[[, i, ], =, p, [, 1, ], ;, }, return, v, ;, }, public, double, [, ], target, (]
[], =, p, [, 1, ], ;, }, return, v, ;, }, public, double, [, ], target, (, ), {]
[;, }, return, v, ;, }, public, double, [, ], target, (, ), {, return, y, (, ), ;, }]
[[, 1, ], ;, }, return, v, ;, }, public, double, [, ], target, (, ), {, return, y, (]
[], ;, }, return, v, ;, }, public, double, [, ], target, (, ), {, return, y, (, ), ;]
[;, }, public, double, [, ], target, (, ), {, return, y, (, ), ;, }, public, double, [, ]]
[;, }, public, double, [, ], weight, (, ), {, final, double, weight, =, 1, /, (, sigma, *, sigma]
[;, final, double, [, ], w, =, new, double, [, points, ., size, (, ), ], ;, for, (, int]
[/, (, sigma, *, sigma, ), ;, final, double, [, ], w, =, new, double, [, points, ., size, (]
[;, final, double, [, ], w, =, new, double, [, points, ., size, (, ), ], ;, for, (, int]
[), ;, final, double, [, ], w, =, new, double, [, points, ., size, (, ), ], ;, for, (]
[*, sigma, ), ;, final, double, [, ], w, =, new, double, [, points, ., size, (, ), ], ;]
[), ;, final, double, [, ], w, =, new, double, [, points, ., size, (, ), ], ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, )]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, )]
[;, i, <, points, ., size, (, ), ;, i, ++, ), {, w, [, i, ], =, weight, ;]
[;, i, ++, ), {, w, [, i, ], =, weight, ;, }, return, w, ;, }, public, double, []
[<, points, ., size, (, ), ;, i, ++, ), {, w, [, i, ], =, weight, ;, }, return]
[;, i, ++, ), {, w, [, i, ], =, weight, ;, }, return, w, ;, }, public, double, []
[., size, (, ), ;, i, ++, ), {, w, [, i, ], =, weight, ;, }, return, w, ;]
[), {, w, [, i, ], =, weight, ;, }, return, w, ;, }, public, double, [, ], value, (]
[++, ), {, w, [, i, ], =, weight, ;, }, return, w, ;, }, public, double, [, ], value]
[=, weight, ;, }, return, w, ;, }, public, double, [, ], value, (, double, [, ], params, ), {]
[[, i, ], =, weight, ;, }, return, w, ;, }, public, double, [, ], value, (, double, [, ]]
[], =, weight, ;, }, return, w, ;, }, public, double, [, ], value, (, double, [, ], params, )]
[;, }, return, w, ;, }, public, double, [, ], value, (, double, [, ], params, ), {, final, Model]
[;, }, public, double, [, ], value, (, double, [, ], params, ), {, final, Model, line, =, new, Model]
[;, final, double, [, ], model, =, new, double, [, points, ., size, (, ), ], ;, for, (, int]
[,, new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 1, ], ), ), ;, final, double, [, ], model]
[,, 0, ,, params, [, 0, ], ), ,, new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 1, ]]
[,, params, [, 0, ], ), ,, new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 1, ], ), )]
[), ,, new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 1, ], ), ), ;, final, double, [, ]]
[[, 0, ], ), ,, new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 1, ], ), ), ;, final]
[], ), ,, new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 1, ], ), ), ;, final, double, []
[), ;, final, double, [, ], model, =, new, double, [, points, ., size, (, ), ], ;, for, (]
[,, 0, ,, params, [, 1, ], ), ), ;, final, double, [, ], model, =, new, double, [, points]
[,, params, [, 1, ], ), ), ;, final, double, [, ], model, =, new, double, [, points, ., size]
[), ), ;, final, double, [, ], model, =, new, double, [, points, ., size, (, ), ], ;, for]
[[, 1, ], ), ), ;, final, double, [, ], model, =, new, double, [, points, ., size, (, )]
[], ), ), ;, final, double, [, ], model, =, new, double, [, points, ., size, (, ), ], ;]
[;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, )]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, )]
[;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points]
[;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, model, []
[<, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get]
[;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, model, []
[., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i]
[), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, model, [, i, ], =]
[++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, model, [, i, ]]
[;, model, [, i, ], =, line, ., value, (, p, [, 0, ], ), ;, }, return, model, ;]
[., get, (, i, ), ;, model, [, i, ], =, line, ., value, (, p, [, 0, ], )]
[), ;, model, [, i, ], =, line, ., value, (, p, [, 0, ], ), ;, }, return, model]
[=, line, ., value, (, p, [, 0, ], ), ;, }, return, model, ;, }, public, DerivativeStructure, [, ]]
[[, i, ], =, line, ., value, (, p, [, 0, ], ), ;, }, return, model, ;, }, public]
[], =, line, ., value, (, p, [, 0, ], ), ;, }, return, model, ;, }, public, DerivativeStructure, []
[;, }, return, model, ;, }, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], params, ), {, final, Model]
[., value, (, p, [, 0, ], ), ;, }, return, model, ;, }, public, DerivativeStructure, [, ], value, (]
[), ;, }, return, model, ;, }, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], params, ), {, final]
[[, 0, ], ), ;, }, return, model, ;, }, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], params]
[], ), ;, }, return, model, ;, }, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], params, ), {]
[;, }, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], params, ), {, final, Model, line, =, new, Model]
[;, final, DerivativeStructure, [, ], model, =, new, DerivativeStructure, [, points, ., size, (, ), ], ;, for, (, int]
[,, params, [, 1, ], ), ;, final, DerivativeStructure, [, ], model, =, new, DerivativeStructure, [, points, ., size, (]
[[, 0, ], ,, params, [, 1, ], ), ;, final, DerivativeStructure, [, ], model, =, new, DerivativeStructure, [, points]
[], ,, params, [, 1, ], ), ;, final, DerivativeStructure, [, ], model, =, new, DerivativeStructure, [, points, ., size]
[), ;, final, DerivativeStructure, [, ], model, =, new, DerivativeStructure, [, points, ., size, (, ), ], ;, for, (]
[[, 1, ], ), ;, final, DerivativeStructure, [, ], model, =, new, DerivativeStructure, [, points, ., size, (, ), ]]
[], ), ;, final, DerivativeStructure, [, ], model, =, new, DerivativeStructure, [, points, ., size, (, ), ], ;, for]
[;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, )]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, )]
[;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, DerivativeStructure, p0, =, params, [, 0]
[;, i, ++, ), {, final, DerivativeStructure, p0, =, params, [, 0, ], ., getField, (, ), ., getZero, (]
[<, points, ., size, (, ), ;, i, ++, ), {, final, DerivativeStructure, p0, =, params, [, 0, ], .]
[;, i, ++, ), {, final, DerivativeStructure, p0, =, params, [, 0, ], ., getField, (, ), ., getZero, (]
[., size, (, ), ;, i, ++, ), {, final, DerivativeStructure, p0, =, params, [, 0, ], ., getField, (]
[), {, final, DerivativeStructure, p0, =, params, [, 0, ], ., getField, (, ), ., getZero, (, ), ., add]
[++, ), {, final, DerivativeStructure, p0, =, params, [, 0, ], ., getField, (, ), ., getZero, (, ), .]
[;, model, [, i, ], =, line, ., value, (, p0, ), ;, }, return, model, ;, }, public, double]
[., add, (, points, ., get, (, i, ), [, 0, ], ), ;, model, [, i, ], =, line]
[., getZero, (, ), ., add, (, points, ., get, (, i, ), [, 0, ], ), ;, model, []
[., getField, (, ), ., getZero, (, ), ., add, (, points, ., get, (, i, ), [, 0, ]]
[[, 0, ], ., getField, (, ), ., getZero, (, ), ., add, (, points, ., get, (, i, )]
[], ., getField, (, ), ., getZero, (, ), ., add, (, points, ., get, (, i, ), [, 0]
[), ;, model, [, i, ], =, line, ., value, (, p0, ), ;, }, return, model, ;, }, public]
[[, 0, ], ), ;, model, [, i, ], =, line, ., value, (, p0, ), ;, }, return, model]
[., get, (, i, ), [, 0, ], ), ;, model, [, i, ], =, line, ., value, (, p0]
[), [, 0, ], ), ;, model, [, i, ], =, line, ., value, (, p0, ), ;, }, return]
[], ), ;, model, [, i, ], =, line, ., value, (, p0, ), ;, }, return, model, ;, }]
[=, line, ., value, (, p0, ), ;, }, return, model, ;, }, public, double, [, ], solve, (, )]
[[, i, ], =, line, ., value, (, p0, ), ;, }, return, model, ;, }, public, double, [, ]]
[], =, line, ., value, (, p0, ), ;, }, return, model, ;, }, public, double, [, ], solve, (]
[;, }, return, model, ;, }, public, double, [, ], solve, (, ), {, final, SimpleRegression, regress, =, new, SimpleRegression]
[., value, (, p0, ), ;, }, return, model, ;, }, public, double, [, ], solve, (, ), {, final]
[), ;, }, return, model, ;, }, public, double, [, ], solve, (, ), {, final, SimpleRegression, regress, =, new]
[;, }, public, double, [, ], solve, (, ), {, final, SimpleRegression, regress, =, new, SimpleRegression, (, true, ), ;]
[;, for, (, double, [, ], d, :, points, ), {, regress, ., addData, (, d, [, 0, ], ,]
[), ;, for, (, double, [, ], d, :, points, ), {, regress, ., addData, (, d, [, 0, ]]
[), {, regress, ., addData, (, d, [, 0, ], ,, d, [, 1, ], ), ;, }, final, double]
[;, }, final, double, [, ], result, =, {, regress, ., getSlope, (, ), ,, regress, ., getIntercept, (, )]
[., addData, (, d, [, 0, ], ,, d, [, 1, ], ), ;, }, final, double, [, ], result]
[,, d, [, 1, ], ), ;, }, final, double, [, ], result, =, {, regress, ., getSlope, (, )]
[[, 0, ], ,, d, [, 1, ], ), ;, }, final, double, [, ], result, =, {, regress, .]
[], ,, d, [, 1, ], ), ;, }, final, double, [, ], result, =, {, regress, ., getSlope, (]
[), ;, }, final, double, [, ], result, =, {, regress, ., getSlope, (, ), ,, regress, ., getIntercept, (]
[[, 1, ], ), ;, }, final, double, [, ], result, =, {, regress, ., getSlope, (, ), ,, regress]
[], ), ;, }, final, double, [, ], result, =, {, regress, ., getSlope, (, ), ,, regress, ., getIntercept]
[;, return, result, ;, }, public, static, class, Model, implements, UnivariateDifferentiableFunction, {, final, DerivativeStructure, a, ;, final, DerivativeStructure, b, ;]
[,, regress, ., getIntercept, (, ), }, ;, return, result, ;, }, public, static, class, Model, implements, UnivariateDifferentiableFunction, {, final]
[., getSlope, (, ), ,, regress, ., getIntercept, (, ), }, ;, return, result, ;, }, public, static, class, Model]
[}, ;, return, result, ;, }, public, static, class, Model, implements, UnivariateDifferentiableFunction, {, final, DerivativeStructure, a, ;, final, DerivativeStructure, b]
[., getIntercept, (, ), }, ;, return, result, ;, }, public, static, class, Model, implements, UnivariateDifferentiableFunction, {, final, DerivativeStructure, a]
[;, }, public, static, class, Model, implements, UnivariateDifferentiableFunction, {, final, DerivativeStructure, a, ;, final, DerivativeStructure, b, ;, public, Model, (]
[=, a, ;, this, ., b, =, b, ;, }, public, double, value, (, double, x, ), {, return, a]
[., a, =, a, ;, this, ., b, =, b, ;, }, public, double, value, (, double, x, ), {]
[;, this, ., b, =, b, ;, }, public, double, value, (, double, x, ), {, return, a, ., getValue]
[=, b, ;, }, public, double, value, (, double, x, ), {, return, a, ., getValue, (, ), *, x]
[., b, =, b, ;, }, public, double, value, (, double, x, ), {, return, a, ., getValue, (, )]
[;, }, public, double, value, (, double, x, ), {, return, a, ., getValue, (, ), *, x, +, b]
[;, }, public, DerivativeStructure, value, (, DerivativeStructure, x, ), {, return, x, ., multiply, (, a, ), ., add, (]
[+, b, ., getValue, (, ), ;, }, public, DerivativeStructure, value, (, DerivativeStructure, x, ), {, return, x, ., multiply]
[*, x, +, b, ., getValue, (, ), ;, }, public, DerivativeStructure, value, (, DerivativeStructure, x, ), {, return, x]
[., getValue, (, ), *, x, +, b, ., getValue, (, ), ;, }, public, DerivativeStructure, value, (, DerivativeStructure, x]
[+, b, ., getValue, (, ), ;, }, public, DerivativeStructure, value, (, DerivativeStructure, x, ), {, return, x, ., multiply]
[;, }, public, DerivativeStructure, value, (, DerivativeStructure, x, ), {, return, x, ., multiply, (, a, ), ., add, (]
[., getValue, (, ), ;, }, public, DerivativeStructure, value, (, DerivativeStructure, x, ), {, return, x, ., multiply, (, a]
[;, }, }, }]
[., add, (, b, ), ;, }, }, }]
[., multiply, (, a, ), ., add, (, b, ), ;, }, }, }]
[), ., add, (, b, ), ;, }, }, }]
[), ;, }, }, }]
