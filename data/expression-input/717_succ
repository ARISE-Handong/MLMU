[;, private, final, Map, <, Node, ,, String, >, anonFns, =, Maps, ., newHashMap, (, ), ;, private, final, AbstractCompiler]
[., newHashMap, (, ), ;, private, final, Map, <, Node, ,, String, >, anonFns, =, Maps, ., newHashMap, (, )]
[;, private, final, AbstractCompiler, compiler, ;, private, final, FunctionInjector, injector, ;, private, final, boolean, blockFunctionInliningEnabled, ;, private, final, boolean, inlineGlobalFunctions]
[., newHashMap, (, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, FunctionInjector, injector, ;, private, final, boolean, blockFunctionInliningEnabled, ;]
[;, Preconditions, ., checkArgument, (, safeNameIdSupplier, !=, null, ), ;, this, ., compiler, =, compiler, ;, this, ., inlineGlobalFunctions, =]
[., checkArgument, (, compiler, !=, null, ), ;, Preconditions, ., checkArgument, (, safeNameIdSupplier, !=, null, ), ;, this, ., compiler]
[), ;, Preconditions, ., checkArgument, (, safeNameIdSupplier, !=, null, ), ;, this, ., compiler, =, compiler, ;, this, ., inlineGlobalFunctions]
[!=, null, ), ;, Preconditions, ., checkArgument, (, safeNameIdSupplier, !=, null, ), ;, this, ., compiler, =, compiler, ;, this]
[), ;, Preconditions, ., checkArgument, (, safeNameIdSupplier, !=, null, ), ;, this, ., compiler, =, compiler, ;, this, ., inlineGlobalFunctions]
[;, this, ., compiler, =, compiler, ;, this, ., inlineGlobalFunctions, =, inlineGlobalFunctions, ;, this, ., inlineLocalFunctions, =, inlineLocalFunctions, ;, this]
[., checkArgument, (, safeNameIdSupplier, !=, null, ), ;, this, ., compiler, =, compiler, ;, this, ., inlineGlobalFunctions, =, inlineGlobalFunctions, ;]
[), ;, this, ., compiler, =, compiler, ;, this, ., inlineGlobalFunctions, =, inlineGlobalFunctions, ;, this, ., inlineLocalFunctions, =, inlineLocalFunctions, ;]
[!=, null, ), ;, this, ., compiler, =, compiler, ;, this, ., inlineGlobalFunctions, =, inlineGlobalFunctions, ;, this, ., inlineLocalFunctions, =]
[), ;, this, ., compiler, =, compiler, ;, this, ., inlineGlobalFunctions, =, inlineGlobalFunctions, ;, this, ., inlineLocalFunctions, =, inlineLocalFunctions, ;]
[=, compiler, ;, this, ., inlineGlobalFunctions, =, inlineGlobalFunctions, ;, this, ., inlineLocalFunctions, =, inlineLocalFunctions, ;, this, ., blockFunctionInliningEnabled, =, blockFunctionInliningEnabled]
[., compiler, =, compiler, ;, this, ., inlineGlobalFunctions, =, inlineGlobalFunctions, ;, this, ., inlineLocalFunctions, =, inlineLocalFunctions, ;, this, ., blockFunctionInliningEnabled]
[;, this, ., inlineGlobalFunctions, =, inlineGlobalFunctions, ;, this, ., inlineLocalFunctions, =, inlineLocalFunctions, ;, this, ., blockFunctionInliningEnabled, =, blockFunctionInliningEnabled, ;, this]
[=, inlineGlobalFunctions, ;, this, ., inlineLocalFunctions, =, inlineLocalFunctions, ;, this, ., blockFunctionInliningEnabled, =, blockFunctionInliningEnabled, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture]
[., inlineGlobalFunctions, =, inlineGlobalFunctions, ;, this, ., inlineLocalFunctions, =, inlineLocalFunctions, ;, this, ., blockFunctionInliningEnabled, =, blockFunctionInliningEnabled, ;, this, ., assumeMinimumCapture]
[;, this, ., inlineLocalFunctions, =, inlineLocalFunctions, ;, this, ., blockFunctionInliningEnabled, =, blockFunctionInliningEnabled, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, this]
[=, inlineLocalFunctions, ;, this, ., blockFunctionInliningEnabled, =, blockFunctionInliningEnabled, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, this, ., injector, =, new]
[., inlineLocalFunctions, =, inlineLocalFunctions, ;, this, ., blockFunctionInliningEnabled, =, blockFunctionInliningEnabled, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, this, ., injector]
[;, this, ., blockFunctionInliningEnabled, =, blockFunctionInliningEnabled, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, this, ., injector, =, new, FunctionInjector, (]
[=, blockFunctionInliningEnabled, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, this, ., injector, =, new, FunctionInjector, (, compiler, ,, safeNameIdSupplier, ,]
[., blockFunctionInliningEnabled, =, blockFunctionInliningEnabled, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, this, ., injector, =, new, FunctionInjector, (, compiler, ,]
[;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, this, ., injector, =, new, FunctionInjector, (, compiler, ,, safeNameIdSupplier, ,, true, ,]
[=, assumeMinimumCapture, ;, this, ., injector, =, new, FunctionInjector, (, compiler, ,, safeNameIdSupplier, ,, true, ,, assumeStrictThis, ,, assumeMinimumCapture, )]
[., assumeMinimumCapture, =, assumeMinimumCapture, ;, this, ., injector, =, new, FunctionInjector, (, compiler, ,, safeNameIdSupplier, ,, true, ,, assumeStrictThis, ,]
[;, this, ., injector, =, new, FunctionInjector, (, compiler, ,, safeNameIdSupplier, ,, true, ,, assumeStrictThis, ,, assumeMinimumCapture, ), ;, }]
[=, new, FunctionInjector, (, compiler, ,, safeNameIdSupplier, ,, true, ,, assumeStrictThis, ,, assumeMinimumCapture, ), ;, }, FunctionState, getOrCreateFunctionState, (, String]
[., injector, =, new, FunctionInjector, (, compiler, ,, safeNameIdSupplier, ,, true, ,, assumeStrictThis, ,, assumeMinimumCapture, ), ;, }, FunctionState, getOrCreateFunctionState]
[;, }, FunctionState, getOrCreateFunctionState, (, String, fnName, ), {, FunctionState, fs, =, fns, ., get, (, fnName, ), ;, if]
[,, safeNameIdSupplier, ,, true, ,, assumeStrictThis, ,, assumeMinimumCapture, ), ;, }, FunctionState, getOrCreateFunctionState, (, String, fnName, ), {, FunctionState, fs]
[,, true, ,, assumeStrictThis, ,, assumeMinimumCapture, ), ;, }, FunctionState, getOrCreateFunctionState, (, String, fnName, ), {, FunctionState, fs, =, fns]
[,, assumeStrictThis, ,, assumeMinimumCapture, ), ;, }, FunctionState, getOrCreateFunctionState, (, String, fnName, ), {, FunctionState, fs, =, fns, ., get]
[,, assumeMinimumCapture, ), ;, }, FunctionState, getOrCreateFunctionState, (, String, fnName, ), {, FunctionState, fs, =, fns, ., get, (, fnName]
[), ;, }, FunctionState, getOrCreateFunctionState, (, String, fnName, ), {, FunctionState, fs, =, fns, ., get, (, fnName, ), ;]
[;, if, (, fs, ==, null, ), {, fs, =, new, FunctionState, (, ), ;, fns, ., put, (, fnName]
[., get, (, fnName, ), ;, if, (, fs, ==, null, ), {, fs, =, new, FunctionState, (, ), ;]
[), ;, if, (, fs, ==, null, ), {, fs, =, new, FunctionState, (, ), ;, fns, ., put, (]
[), {, fs, =, new, FunctionState, (, ), ;, fns, ., put, (, fnName, ,, fs, ), ;, }, return]
[==, null, ), {, fs, =, new, FunctionState, (, ), ;, fns, ., put, (, fnName, ,, fs, ), ;]
[), {, fs, =, new, FunctionState, (, ), ;, fns, ., put, (, fnName, ,, fs, ), ;, }, return]
[=, new, FunctionState, (, ), ;, fns, ., put, (, fnName, ,, fs, ), ;, }, return, fs, ;, }]
[;, fns, ., put, (, fnName, ,, fs, ), ;, }, return, fs, ;, }, @, Override, public, void, enableSpecialization]
[;, }, return, fs, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, specializationState, ), {, this, .]
[., put, (, fnName, ,, fs, ), ;, }, return, fs, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule]
[,, fs, ), ;, }, return, fs, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, specializationState, )]
[), ;, }, return, fs, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, specializationState, ), {, this]
[;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, specializationState, ), {, this, ., specializationState, =, specializationState, ;]
[=, specializationState, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState]
[., specializationState, =, specializationState, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, compiler]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindCandidateFunctions, (, ), ), ;, if, (, fns, ., isEmpty]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindCandidateFunctions, (, ), ), ;, if, (, fns, .]
[., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindCandidateFunctions, (, ), ), ;]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindCandidateFunctions]
[;, if, (, fns, ., isEmpty, (, ), ), {, return, ;, }, NodeTraversal, ., traverse, (, compiler, ,, root]
[., traverse, (, compiler, ,, root, ,, new, FindCandidateFunctions, (, ), ), ;, if, (, fns, ., isEmpty, (, )]
[,, root, ,, new, FindCandidateFunctions, (, ), ), ;, if, (, fns, ., isEmpty, (, ), ), {, return, ;]
[,, new, FindCandidateFunctions, (, ), ), ;, if, (, fns, ., isEmpty, (, ), ), {, return, ;, }, NodeTraversal]
[), ;, if, (, fns, ., isEmpty, (, ), ), {, return, ;, }, NodeTraversal, ., traverse, (, compiler, ,]
[), {, return, ;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindCandidatesReferences, (, fns, ,, anonFns, )]
[., isEmpty, (, ), ), {, return, ;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindCandidatesReferences, (]
[;, trimCanidatesNotMeetingMinimumRequirements, (, ), ;, if, (, fns, ., isEmpty, (, ), ), {, return, ;, }, Set, <, String]
[., traverse, (, compiler, ,, root, ,, new, FindCandidatesReferences, (, fns, ,, anonFns, ), ), ;, trimCanidatesNotMeetingMinimumRequirements, (, ), ;]
[,, root, ,, new, FindCandidatesReferences, (, fns, ,, anonFns, ), ), ;, trimCanidatesNotMeetingMinimumRequirements, (, ), ;, if, (, fns, .]
[,, new, FindCandidatesReferences, (, fns, ,, anonFns, ), ), ;, trimCanidatesNotMeetingMinimumRequirements, (, ), ;, if, (, fns, ., isEmpty, (]
[), ;, trimCanidatesNotMeetingMinimumRequirements, (, ), ;, if, (, fns, ., isEmpty, (, ), ), {, return, ;, }, Set, <]
[,, anonFns, ), ), ;, trimCanidatesNotMeetingMinimumRequirements, (, ), ;, if, (, fns, ., isEmpty, (, ), ), {, return, ;]
[), ), ;, trimCanidatesNotMeetingMinimumRequirements, (, ), ;, if, (, fns, ., isEmpty, (, ), ), {, return, ;, }, Set]
[;, if, (, fns, ., isEmpty, (, ), ), {, return, ;, }, Set, <, String, >, fnNames, =, Sets]
[), {, return, ;, }, Set, <, String, >, fnNames, =, Sets, ., newHashSet, (, fns, ., keySet, (, )]
[., isEmpty, (, ), ), {, return, ;, }, Set, <, String, >, fnNames, =, Sets, ., newHashSet, (, fns]
[;, injector, ., setKnownConstants, (, fnNames, ), ;, trimCanidatesUsingOnCost, (, ), ;, if, (, fns, ., isEmpty, (, ), )]
[., newHashSet, (, fns, ., keySet, (, ), ), ;, injector, ., setKnownConstants, (, fnNames, ), ;, trimCanidatesUsingOnCost, (, )]
[), ;, injector, ., setKnownConstants, (, fnNames, ), ;, trimCanidatesUsingOnCost, (, ), ;, if, (, fns, ., isEmpty, (, )]
[., keySet, (, ), ), ;, injector, ., setKnownConstants, (, fnNames, ), ;, trimCanidatesUsingOnCost, (, ), ;, if, (, fns]
[;, trimCanidatesUsingOnCost, (, ), ;, if, (, fns, ., isEmpty, (, ), ), {, return, ;, }, resolveInlineConflicts, (, )]
[., setKnownConstants, (, fnNames, ), ;, trimCanidatesUsingOnCost, (, ), ;, if, (, fns, ., isEmpty, (, ), ), {, return]
[), ;, trimCanidatesUsingOnCost, (, ), ;, if, (, fns, ., isEmpty, (, ), ), {, return, ;, }, resolveInlineConflicts, (]
[;, if, (, fns, ., isEmpty, (, ), ), {, return, ;, }, resolveInlineConflicts, (, ), ;, decomposeExpressions, (, fnNames]
[), {, return, ;, }, resolveInlineConflicts, (, ), ;, decomposeExpressions, (, fnNames, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[., isEmpty, (, ), ), {, return, ;, }, resolveInlineConflicts, (, ), ;, decomposeExpressions, (, fnNames, ), ;, NodeTraversal, .]
[;, decomposeExpressions, (, fnNames, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, CallVisitor, (, fns, ,, anonFns]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, CallVisitor, (, fns, ,, anonFns, ,, new, Inline, (, injector]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, CallVisitor, (, fns, ,, anonFns, ,, new, Inline, (]
[;, removeInlinedFunctions, (, ), ;, }, private, class, FindCandidateFunctions, implements, Callback, {, private, int, callsSeen, =, 0, ;, @, Override]
[., traverse, (, compiler, ,, root, ,, new, CallVisitor, (, fns, ,, anonFns, ,, new, Inline, (, injector, ,, specializationState]
[,, root, ,, new, CallVisitor, (, fns, ,, anonFns, ,, new, Inline, (, injector, ,, specializationState, ), ), ), ;]
[,, new, CallVisitor, (, fns, ,, anonFns, ,, new, Inline, (, injector, ,, specializationState, ), ), ), ;, removeInlinedFunctions, (]
[), ;, removeInlinedFunctions, (, ), ;, }, private, class, FindCandidateFunctions, implements, Callback, {, private, int, callsSeen, =, 0, ;, @]
[,, anonFns, ,, new, Inline, (, injector, ,, specializationState, ), ), ), ;, removeInlinedFunctions, (, ), ;, }, private, class]
[,, new, Inline, (, injector, ,, specializationState, ), ), ), ;, removeInlinedFunctions, (, ), ;, }, private, class, FindCandidateFunctions, implements]
[), ), ;, removeInlinedFunctions, (, ), ;, }, private, class, FindCandidateFunctions, implements, Callback, {, private, int, callsSeen, =, 0, ;]
[,, specializationState, ), ), ), ;, removeInlinedFunctions, (, ), ;, }, private, class, FindCandidateFunctions, implements, Callback, {, private, int, callsSeen]
[), ), ), ;, removeInlinedFunctions, (, ), ;, }, private, class, FindCandidateFunctions, implements, Callback, {, private, int, callsSeen, =, 0]
[;, }, private, class, FindCandidateFunctions, implements, Callback, {, private, int, callsSeen, =, 0, ;, @, Override, public, boolean, shouldTraverse, (]
[;, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, inlineLocalFunctions, ||]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[||, nodeTraversal, ., inGlobalScope, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., inGlobalScope, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), {, findNamedFunctions, (, t, ,, n, ,, parent, ), ;, findFunctionExpressions, (, t, ,, n, ), ;, }, }]
[||, (, !, t, ., inGlobalScope, (, ), &&, inlineLocalFunctions, ), ), {, findNamedFunctions, (, t, ,, n, ,, parent]
[), ||, (, !, t, ., inGlobalScope, (, ), &&, inlineLocalFunctions, ), ), {, findNamedFunctions, (, t, ,, n, ,]
[&&, inlineGlobalFunctions, ), ||, (, !, t, ., inGlobalScope, (, ), &&, inlineLocalFunctions, ), ), {, findNamedFunctions, (, t, ,]
[., inGlobalScope, (, ), &&, inlineGlobalFunctions, ), ||, (, !, t, ., inGlobalScope, (, ), &&, inlineLocalFunctions, ), ), {]
[), ||, (, !, t, ., inGlobalScope, (, ), &&, inlineLocalFunctions, ), ), {, findNamedFunctions, (, t, ,, n, ,]
[), {, findNamedFunctions, (, t, ,, n, ,, parent, ), ;, findFunctionExpressions, (, t, ,, n, ), ;, }, }]
[), ), {, findNamedFunctions, (, t, ,, n, ,, parent, ), ;, findFunctionExpressions, (, t, ,, n, ), ;, }]
[&&, inlineLocalFunctions, ), ), {, findNamedFunctions, (, t, ,, n, ,, parent, ), ;, findFunctionExpressions, (, t, ,, n, )]
[&&, inlineLocalFunctions, ), ), {, findNamedFunctions, (, t, ,, n, ,, parent, ), ;, findFunctionExpressions, (, t, ,, n, )]
[., inGlobalScope, (, ), &&, inlineLocalFunctions, ), ), {, findNamedFunctions, (, t, ,, n, ,, parent, ), ;, findFunctionExpressions, (]
[), ), {, findNamedFunctions, (, t, ,, n, ,, parent, ), ;, findFunctionExpressions, (, t, ,, n, ), ;, }]
[;, findFunctionExpressions, (, t, ,, n, ), ;, }, }, public, void, findNamedFunctions, (, NodeTraversal, t, ,, Node, n, ,]
[,, n, ,, parent, ), ;, findFunctionExpressions, (, t, ,, n, ), ;, }, }, public, void, findNamedFunctions, (, NodeTraversal]
[,, parent, ), ;, findFunctionExpressions, (, t, ,, n, ), ;, }, }, public, void, findNamedFunctions, (, NodeTraversal, t, ,]
[), ;, findFunctionExpressions, (, t, ,, n, ), ;, }, }, public, void, findNamedFunctions, (, NodeTraversal, t, ,, Node, n]
[;, }, }, public, void, findNamedFunctions, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[,, n, ), ;, }, }, public, void, findNamedFunctions, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[), ;, }, }, public, void, findNamedFunctions, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, return, ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, Preconditions]
[), {, return, ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, Preconditions]
[., isStatement, (, n, ), ), {, return, ;, }, switch, (, n, ., getType, (, ), ), {, case]
[), ), {, return, ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :]
[), {, case, Token, ., VAR, :, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, nameNode]
[., getType, (, ), ), {, case, Token, ., VAR, :, Preconditions, ., checkState, (, n, ., hasOneChild, (, )]
[:, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, nameNode, =, n, ., getFirstChild, (, )]
[., VAR, :, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, nameNode, =, n, ., getFirstChild]
[;, Node, nameNode, =, n, ., getFirstChild, (, ), ;, if, (, nameNode, ., isName, (, ), &&, nameNode, .]
[., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, nameNode, =, n, ., getFirstChild, (, ), ;, if]
[), ;, Node, nameNode, =, n, ., getFirstChild, (, ), ;, if, (, nameNode, ., isName, (, ), &&, nameNode]
[., hasOneChild, (, ), ), ;, Node, nameNode, =, n, ., getFirstChild, (, ), ;, if, (, nameNode, ., isName]
[;, if, (, nameNode, ., isName, (, ), &&, nameNode, ., hasChildren, (, ), &&, nameNode, ., getFirstChild, (, )]
[., getFirstChild, (, ), ;, if, (, nameNode, ., isName, (, ), &&, nameNode, ., hasChildren, (, ), &&, nameNode]
[), {, maybeAddFunction, (, new, FunctionVar, (, n, ), ,, t, ., getModule, (, ), ), ;, }, break, ;]
[&&, nameNode, ., getFirstChild, (, ), ., isFunction, (, ), ), {, maybeAddFunction, (, new, FunctionVar, (, n, ), ,]
[&&, nameNode, ., hasChildren, (, ), &&, nameNode, ., getFirstChild, (, ), ., isFunction, (, ), ), {, maybeAddFunction, (]
[., isName, (, ), &&, nameNode, ., hasChildren, (, ), &&, nameNode, ., getFirstChild, (, ), ., isFunction, (, )]
[&&, nameNode, ., getFirstChild, (, ), ., isFunction, (, ), ), {, maybeAddFunction, (, new, FunctionVar, (, n, ), ,]
[., hasChildren, (, ), &&, nameNode, ., getFirstChild, (, ), ., isFunction, (, ), ), {, maybeAddFunction, (, new, FunctionVar]
[), {, maybeAddFunction, (, new, FunctionVar, (, n, ), ,, t, ., getModule, (, ), ), ;, }, break, ;]
[., isFunction, (, ), ), {, maybeAddFunction, (, new, FunctionVar, (, n, ), ,, t, ., getModule, (, ), )]
[., getFirstChild, (, ), ., isFunction, (, ), ), {, maybeAddFunction, (, new, FunctionVar, (, n, ), ,, t, .]
[;, }, break, ;, case, Token, ., FUNCTION, :, Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), ||]
[,, t, ., getModule, (, ), ), ;, }, break, ;, case, Token, ., FUNCTION, :, Preconditions, ., checkState, (]
[), ,, t, ., getModule, (, ), ), ;, }, break, ;, case, Token, ., FUNCTION, :, Preconditions, ., checkState]
[), ;, }, break, ;, case, Token, ., FUNCTION, :, Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent, )]
[., getModule, (, ), ), ;, }, break, ;, case, Token, ., FUNCTION, :, Preconditions, ., checkState, (, NodeUtil, .]
[:, Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), ||, parent, ., isLabel, (, ), ), ;, if]
[., FUNCTION, :, Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), ||, parent, ., isLabel, (, ), )]
[;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {, Function, fn, =, new, NamedFunction, (, n, )]
[., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), ||, parent, ., isLabel, (, ), ), ;, if, (, !]
[), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {, Function, fn, =, new, NamedFunction, (, n]
[||, parent, ., isLabel, (, ), ), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {, Function]
[., isStatementBlock, (, parent, ), ||, parent, ., isLabel, (, ), ), ;, if, (, !, NodeUtil, ., isFunctionExpression, (]
[), ||, parent, ., isLabel, (, ), ), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {]
[), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {, Function, fn, =, new, NamedFunction, (, n]
[., isLabel, (, ), ), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {, Function, fn, =]
[), {, Function, fn, =, new, NamedFunction, (, n, ), ;, maybeAddFunction, (, fn, ,, t, ., getModule, (, )]
[), {, Function, fn, =, new, NamedFunction, (, n, ), ;, maybeAddFunction, (, fn, ,, t, ., getModule, (, )]
[., isFunctionExpression, (, n, ), ), {, Function, fn, =, new, NamedFunction, (, n, ), ;, maybeAddFunction, (, fn, ,]
[), ), {, Function, fn, =, new, NamedFunction, (, n, ), ;, maybeAddFunction, (, fn, ,, t, ., getModule, (]
[;, maybeAddFunction, (, fn, ,, t, ., getModule, (, ), ), ;, }, break, ;, }, }, public, void, findFunctionExpressions]
[), ;, maybeAddFunction, (, fn, ,, t, ., getModule, (, ), ), ;, }, break, ;, }, }, public, void]
[;, }, break, ;, }, }, public, void, findFunctionExpressions, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n]
[,, t, ., getModule, (, ), ), ;, }, break, ;, }, }, public, void, findFunctionExpressions, (, NodeTraversal, t, ,]
[), ;, }, break, ;, }, }, public, void, findFunctionExpressions, (, NodeTraversal, t, ,, Node, n, ), {, switch, (]
[., getModule, (, ), ), ;, }, break, ;, }, }, public, void, findFunctionExpressions, (, NodeTraversal, t, ,, Node, n]
[), {, case, Token, ., CALL, :, Node, fnNode, =, null, ;, if, (, n, ., getFirstChild, (, ), .]
[., getType, (, ), ), {, case, Token, ., CALL, :, Node, fnNode, =, null, ;, if, (, n, .]
[:, Node, fnNode, =, null, ;, if, (, n, ., getFirstChild, (, ), ., isFunction, (, ), ), {, fnNode]
[., CALL, :, Node, fnNode, =, null, ;, if, (, n, ., getFirstChild, (, ), ., isFunction, (, ), )]
[;, if, (, n, ., getFirstChild, (, ), ., isFunction, (, ), ), {, fnNode, =, n, ., getFirstChild, (]
[), {, fnNode, =, n, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isFunctionObjectCall, (, n, )]
[., isFunction, (, ), ), {, fnNode, =, n, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, .]
[., getFirstChild, (, ), ., isFunction, (, ), ), {, fnNode, =, n, ., getFirstChild, (, ), ;, }, else]
[=, n, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isFunctionObjectCall, (, n, ), ), {, Node]
[;, }, else, if, (, NodeUtil, ., isFunctionObjectCall, (, n, ), ), {, Node, fnIdentifingNode, =, n, ., getFirstChild, (]
[., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isFunctionObjectCall, (, n, ), ), {, Node, fnIdentifingNode, =]
[), {, Node, fnIdentifingNode, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, fnIdentifingNode, ., isFunction]
[., isFunctionObjectCall, (, n, ), ), {, Node, fnIdentifingNode, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;]
[), ), {, Node, fnIdentifingNode, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, fnIdentifingNode, .]
[;, if, (, fnIdentifingNode, ., isFunction, (, ), ), {, fnNode, =, fnIdentifingNode, ;, }, }, if, (, fnNode, !=]
[., getFirstChild, (, ), ;, if, (, fnIdentifingNode, ., isFunction, (, ), ), {, fnNode, =, fnIdentifingNode, ;, }, }]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, fnIdentifingNode, ., isFunction, (, ), ), {, fnNode, =]
[), {, fnNode, =, fnIdentifingNode, ;, }, }, if, (, fnNode, !=, null, ), {, Function, fn, =, new, FunctionExpression]
[., isFunction, (, ), ), {, fnNode, =, fnIdentifingNode, ;, }, }, if, (, fnNode, !=, null, ), {, Function]
[=, fnIdentifingNode, ;, }, }, if, (, fnNode, !=, null, ), {, Function, fn, =, new, FunctionExpression, (, fnNode, ,]
[;, }, }, if, (, fnNode, !=, null, ), {, Function, fn, =, new, FunctionExpression, (, fnNode, ,, callsSeen, ++]
[), {, Function, fn, =, new, FunctionExpression, (, fnNode, ,, callsSeen, ++, ), ;, maybeAddFunction, (, fn, ,, t, .]
[!=, null, ), {, Function, fn, =, new, FunctionExpression, (, fnNode, ,, callsSeen, ++, ), ;, maybeAddFunction, (, fn, ,]
[), {, Function, fn, =, new, FunctionExpression, (, fnNode, ,, callsSeen, ++, ), ;, maybeAddFunction, (, fn, ,, t, .]
[;, maybeAddFunction, (, fn, ,, t, ., getModule, (, ), ), ;, anonFns, ., put, (, fnNode, ,, fn, .]
[,, callsSeen, ++, ), ;, maybeAddFunction, (, fn, ,, t, ., getModule, (, ), ), ;, anonFns, ., put, (]
[), ;, maybeAddFunction, (, fn, ,, t, ., getModule, (, ), ), ;, anonFns, ., put, (, fnNode, ,, fn]
[++, ), ;, maybeAddFunction, (, fn, ,, t, ., getModule, (, ), ), ;, anonFns, ., put, (, fnNode, ,]
[;, anonFns, ., put, (, fnNode, ,, fn, ., getName, (, ), ), ;, }, break, ;, }, }, }]
[,, t, ., getModule, (, ), ), ;, anonFns, ., put, (, fnNode, ,, fn, ., getName, (, ), )]
[), ;, anonFns, ., put, (, fnNode, ,, fn, ., getName, (, ), ), ;, }, break, ;, }, }]
[., getModule, (, ), ), ;, anonFns, ., put, (, fnNode, ,, fn, ., getName, (, ), ), ;, }]
[;, }, break, ;, }, }, }, private, void, maybeAddFunction, (, Function, fn, ,, JSModule, module, ), {, String, name]
[., put, (, fnNode, ,, fn, ., getName, (, ), ), ;, }, break, ;, }, }, }, private, void]
[,, fn, ., getName, (, ), ), ;, }, break, ;, }, }, }, private, void, maybeAddFunction, (, Function, fn]
[), ;, }, break, ;, }, }, }, private, void, maybeAddFunction, (, Function, fn, ,, JSModule, module, ), {, String]
[., getName, (, ), ), ;, }, break, ;, }, }, }, private, void, maybeAddFunction, (, Function, fn, ,, JSModule]
[;, FunctionState, fs, =, getOrCreateFunctionState, (, name, ), ;, if, (, fs, ., hasExistingFunctionDefinition, (, ), ), {, fs, .]
[., getName, (, ), ;, FunctionState, fs, =, getOrCreateFunctionState, (, name, ), ;, if, (, fs, ., hasExistingFunctionDefinition, (, )]
[;, if, (, fs, ., hasExistingFunctionDefinition, (, ), ), {, fs, ., setInline, (, false, ), ;, }, else, {]
[), ;, if, (, fs, ., hasExistingFunctionDefinition, (, ), ), {, fs, ., setInline, (, false, ), ;, }, else]
[), {, fs, ., setInline, (, false, ), ;, }, else, {, if, (, fs, ., canInline, (, ), )]
[., hasExistingFunctionDefinition, (, ), ), {, fs, ., setInline, (, false, ), ;, }, else, {, if, (, fs, .]
[;, }, else, {, if, (, fs, ., canInline, (, ), ), {, fs, ., setFn, (, fn, ), ;]
[., setInline, (, false, ), ;, }, else, {, if, (, fs, ., canInline, (, ), ), {, fs, .]
[), ;, }, else, {, if, (, fs, ., canInline, (, ), ), {, fs, ., setFn, (, fn, )]
[), {, fs, ., setFn, (, fn, ), ;, if, (, injector, ., isDirectCallNodeReplacementPossible, (, fn, ., getFunctionNode, (, )]
[., canInline, (, ), ), {, fs, ., setFn, (, fn, ), ;, if, (, injector, ., isDirectCallNodeReplacementPossible, (, fn]
[;, if, (, injector, ., isDirectCallNodeReplacementPossible, (, fn, ., getFunctionNode, (, ), ), ), {, fs, ., inlineDirectly, (, true]
[., setFn, (, fn, ), ;, if, (, injector, ., isDirectCallNodeReplacementPossible, (, fn, ., getFunctionNode, (, ), ), ), {]
[), ;, if, (, injector, ., isDirectCallNodeReplacementPossible, (, fn, ., getFunctionNode, (, ), ), ), {, fs, ., inlineDirectly, (]
[), {, fs, ., inlineDirectly, (, true, ), ;, }, if, (, !, isCandidateFunction, (, fn, ), ), {, fs]
[., isDirectCallNodeReplacementPossible, (, fn, ., getFunctionNode, (, ), ), ), {, fs, ., inlineDirectly, (, true, ), ;, }, if]
[), ), {, fs, ., inlineDirectly, (, true, ), ;, }, if, (, !, isCandidateFunction, (, fn, ), ), {]
[., getFunctionNode, (, ), ), ), {, fs, ., inlineDirectly, (, true, ), ;, }, if, (, !, isCandidateFunction, (]
[;, }, if, (, !, isCandidateFunction, (, fn, ), ), {, fs, ., setInline, (, false, ), ;, }, if]
[., inlineDirectly, (, true, ), ;, }, if, (, !, isCandidateFunction, (, fn, ), ), {, fs, ., setInline, (]
[), ;, }, if, (, !, isCandidateFunction, (, fn, ), ), {, fs, ., setInline, (, false, ), ;, }]
[), {, fs, ., setInline, (, false, ), ;, }, if, (, fs, ., canInline, (, ), ), {, fs]
[), {, fs, ., setInline, (, false, ), ;, }, if, (, fs, ., canInline, (, ), ), {, fs]
[), ), {, fs, ., setInline, (, false, ), ;, }, if, (, fs, ., canInline, (, ), ), {]
[;, }, if, (, fs, ., canInline, (, ), ), {, fs, ., setModule, (, module, ), ;, Node, fnNode]
[., setInline, (, false, ), ;, }, if, (, fs, ., canInline, (, ), ), {, fs, ., setModule, (]
[), ;, }, if, (, fs, ., canInline, (, ), ), {, fs, ., setModule, (, module, ), ;, Node]
[), {, fs, ., setModule, (, module, ), ;, Node, fnNode, =, fn, ., getFunctionNode, (, ), ;, Set, <]
[., canInline, (, ), ), {, fs, ., setModule, (, module, ), ;, Node, fnNode, =, fn, ., getFunctionNode, (]
[;, Node, fnNode, =, fn, ., getFunctionNode, (, ), ;, Set, <, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters, (]
[., setModule, (, module, ), ;, Node, fnNode, =, fn, ., getFunctionNode, (, ), ;, Set, <, String, >, namesToAlias]
[), ;, Node, fnNode, =, fn, ., getFunctionNode, (, ), ;, Set, <, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters]
[;, Set, <, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters, (, fnNode, ), ;, if, (, !, namesToAlias, ., isEmpty]
[., getFunctionNode, (, ), ;, Set, <, String, >, namesToAlias, =, FunctionArgumentInjector, ., findModifiedParameters, (, fnNode, ), ;, if, (]
[;, if, (, !, namesToAlias, ., isEmpty, (, ), ), {, fs, ., inlineDirectly, (, false, ), ;, fs, .]
[., findModifiedParameters, (, fnNode, ), ;, if, (, !, namesToAlias, ., isEmpty, (, ), ), {, fs, ., inlineDirectly, (]
[), ;, if, (, !, namesToAlias, ., isEmpty, (, ), ), {, fs, ., inlineDirectly, (, false, ), ;, fs]
[), {, fs, ., inlineDirectly, (, false, ), ;, fs, ., setNamesToAlias, (, namesToAlias, ), ;, }, Node, block, =]
[), {, fs, ., inlineDirectly, (, false, ), ;, fs, ., setNamesToAlias, (, namesToAlias, ), ;, }, Node, block, =]
[., isEmpty, (, ), ), {, fs, ., inlineDirectly, (, false, ), ;, fs, ., setNamesToAlias, (, namesToAlias, ), ;]
[;, fs, ., setNamesToAlias, (, namesToAlias, ), ;, }, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if]
[., inlineDirectly, (, false, ), ;, fs, ., setNamesToAlias, (, namesToAlias, ), ;, }, Node, block, =, NodeUtil, ., getFunctionBody]
[), ;, fs, ., setNamesToAlias, (, namesToAlias, ), ;, }, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;]
[;, }, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (, NodeUtil, ., referencesThis, (, block, )]
[., setNamesToAlias, (, namesToAlias, ), ;, }, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (, NodeUtil]
[), ;, }, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (, NodeUtil, ., referencesThis, (, block]
[;, if, (, NodeUtil, ., referencesThis, (, block, ), ), {, fs, ., setReferencesThis, (, true, ), ;, }, if]
[., getFunctionBody, (, fnNode, ), ;, if, (, NodeUtil, ., referencesThis, (, block, ), ), {, fs, ., setReferencesThis, (]
[), ;, if, (, NodeUtil, ., referencesThis, (, block, ), ), {, fs, ., setReferencesThis, (, true, ), ;, }]
[), {, fs, ., setReferencesThis, (, true, ), ;, }, if, (, NodeUtil, ., containsFunction, (, block, ), ), {]
[., referencesThis, (, block, ), ), {, fs, ., setReferencesThis, (, true, ), ;, }, if, (, NodeUtil, ., containsFunction]
[), ), {, fs, ., setReferencesThis, (, true, ), ;, }, if, (, NodeUtil, ., containsFunction, (, block, ), )]
[;, }, if, (, NodeUtil, ., containsFunction, (, block, ), ), {, fs, ., setHasInnerFunctions, (, true, ), ;, if]
[., setReferencesThis, (, true, ), ;, }, if, (, NodeUtil, ., containsFunction, (, block, ), ), {, fs, ., setHasInnerFunctions]
[), ;, }, if, (, NodeUtil, ., containsFunction, (, block, ), ), {, fs, ., setHasInnerFunctions, (, true, ), ;]
[), {, fs, ., setHasInnerFunctions, (, true, ), ;, if, (, !, assumeMinimumCapture, &&, hasLocalNames, (, fnNode, ), ), {]
[., containsFunction, (, block, ), ), {, fs, ., setHasInnerFunctions, (, true, ), ;, if, (, !, assumeMinimumCapture, &&, hasLocalNames]
[), ), {, fs, ., setHasInnerFunctions, (, true, ), ;, if, (, !, assumeMinimumCapture, &&, hasLocalNames, (, fnNode, ), )]
[;, if, (, !, assumeMinimumCapture, &&, hasLocalNames, (, fnNode, ), ), {, fs, ., setInline, (, false, ), ;, }]
[., setHasInnerFunctions, (, true, ), ;, if, (, !, assumeMinimumCapture, &&, hasLocalNames, (, fnNode, ), ), {, fs, ., setInline]
[), ;, if, (, !, assumeMinimumCapture, &&, hasLocalNames, (, fnNode, ), ), {, fs, ., setInline, (, false, ), ;]
[), {, fs, ., setInline, (, false, ), ;, }, }, }, if, (, fs, ., canInline, (, ), &&]
[&&, hasLocalNames, (, fnNode, ), ), {, fs, ., setInline, (, false, ), ;, }, }, }, if, (, fs]
[&&, hasLocalNames, (, fnNode, ), ), {, fs, ., setInline, (, false, ), ;, }, }, }, if, (, fs]
[), {, fs, ., setInline, (, false, ), ;, }, }, }, if, (, fs, ., canInline, (, ), &&]
[), ), {, fs, ., setInline, (, false, ), ;, }, }, }, if, (, fs, ., canInline, (, )]
[;, }, }, }, if, (, fs, ., canInline, (, ), &&, !, fs, ., canInlineDirectly, (, ), ), {]
[., setInline, (, false, ), ;, }, }, }, if, (, fs, ., canInline, (, ), &&, !, fs, .]
[), ;, }, }, }, if, (, fs, ., canInline, (, ), &&, !, fs, ., canInlineDirectly, (, ), )]
[), {, if, (, !, blockFunctionInliningEnabled, ), {, fs, ., setInline, (, false, ), ;, }, }, }, }, }]
[&&, !, fs, ., canInlineDirectly, (, ), ), {, if, (, !, blockFunctionInliningEnabled, ), {, fs, ., setInline, (, false]
[., canInline, (, ), &&, !, fs, ., canInlineDirectly, (, ), ), {, if, (, !, blockFunctionInliningEnabled, ), {, fs]
[), {, if, (, !, blockFunctionInliningEnabled, ), {, fs, ., setInline, (, false, ), ;, }, }, }, }, }]
[), {, if, (, !, blockFunctionInliningEnabled, ), {, fs, ., setInline, (, false, ), ;, }, }, }, }, }]
[., canInlineDirectly, (, ), ), {, if, (, !, blockFunctionInliningEnabled, ), {, fs, ., setInline, (, false, ), ;, }]
[), {, fs, ., setInline, (, false, ), ;, }, }, }, }, }, private, boolean, hasLocalNames, (, Node, fnNode]
[), {, fs, ., setInline, (, false, ), ;, }, }, }, }, }, private, boolean, hasLocalNames, (, Node, fnNode]
[;, }, }, }, }, }, private, boolean, hasLocalNames, (, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody]
[., setInline, (, false, ), ;, }, }, }, }, }, private, boolean, hasLocalNames, (, Node, fnNode, ), {, Node]
[), ;, }, }, }, }, }, private, boolean, hasLocalNames, (, Node, fnNode, ), {, Node, block, =, NodeUtil, .]
[;, return, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., hasChildren, (, ), ||, NodeUtil, ., has, (, block, ,, new]
[., getFunctionBody, (, fnNode, ), ;, return, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., hasChildren, (, ), ||, NodeUtil, .]
[), ;, return, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., hasChildren, (, ), ||, NodeUtil, ., has, (, block, ,]
[;, }, private, static, Node, getContainingFunction, (, NodeTraversal, t, ), {, return, (, t, ., inGlobalScope, (, ), ), ?]
[||, NodeUtil, ., has, (, block, ,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, )]
[., hasChildren, (, ), ||, NodeUtil, ., has, (, block, ,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil]
[., getFunctionParameters, (, fnNode, ), ., hasChildren, (, ), ||, NodeUtil, ., has, (, block, ,, new, NodeUtil, ., MatchDeclaration]
[), ., hasChildren, (, ), ||, NodeUtil, ., has, (, block, ,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new]
[;, }, private, static, Node, getContainingFunction, (, NodeTraversal, t, ), {, return, (, t, ., inGlobalScope, (, ), ), ?]
[., has, (, block, ,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;]
[,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, }, private, static, Node]
[,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, }, private, static, Node, getContainingFunction, (, NodeTraversal, t, ), {, return]
[), ;, }, private, static, Node, getContainingFunction, (, NodeTraversal, t, ), {, return, (, t, ., inGlobalScope, (, ), )]
[;, }, private, boolean, isCandidateFunction, (, Function, fn, ), {, String, fnName, =, fn, ., getName, (, ), ;, if]
[?, null, :, t, ., getScopeRoot, (, ), ;, }, private, boolean, isCandidateFunction, (, Function, fn, ), {, String, fnName]
[), ?, null, :, t, ., getScopeRoot, (, ), ;, }, private, boolean, isCandidateFunction, (, Function, fn, ), {, String]
[., inGlobalScope, (, ), ), ?, null, :, t, ., getScopeRoot, (, ), ;, }, private, boolean, isCandidateFunction, (, Function]
[:, t, ., getScopeRoot, (, ), ;, }, private, boolean, isCandidateFunction, (, Function, fn, ), {, String, fnName, =, fn]
[;, }, private, boolean, isCandidateFunction, (, Function, fn, ), {, String, fnName, =, fn, ., getName, (, ), ;, if]
[., getScopeRoot, (, ), ;, }, private, boolean, isCandidateFunction, (, Function, fn, ), {, String, fnName, =, fn, ., getName]
[;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, fnName, ), ), {, return, false, ;, }, if]
[., getName, (, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, fnName, ), ), {, return]
[), {, return, false, ;, }, if, (, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ), ), {, return, false]
[., isExported, (, fnName, ), ), {, return, false, ;, }, if, (, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName]
[., getCodingConvention, (, ), ., isExported, (, fnName, ), ), {, return, false, ;, }, if, (, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME]
[), ), {, return, false, ;, }, if, (, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ), ), {, return]
[;, }, if, (, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ), ), {, return, false, ;, }, if, (]
[), {, return, false, ;, }, if, (, specializationState, !=, null, &&, !, specializationState, ., canFixupFunction, (, fn, ., getFunctionNode]
[., equals, (, fnName, ), ), {, return, false, ;, }, if, (, specializationState, !=, null, &&, !, specializationState, .]
[., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ), ), {, return, false, ;, }, if, (, specializationState, !=, null, &&, !]
[), ), {, return, false, ;, }, if, (, specializationState, !=, null, &&, !, specializationState, ., canFixupFunction, (, fn, .]
[;, }, if, (, specializationState, !=, null, &&, !, specializationState, ., canFixupFunction, (, fn, ., getFunctionNode, (, ), ), )]
[), {, return, false, ;, }, Node, fnNode, =, fn, ., getFunctionNode, (, ), ;, return, injector, ., doesFunctionMeetMinimumRequirements, (]
[&&, !, specializationState, ., canFixupFunction, (, fn, ., getFunctionNode, (, ), ), ), {, return, false, ;, }, Node, fnNode]
[!=, null, &&, !, specializationState, ., canFixupFunction, (, fn, ., getFunctionNode, (, ), ), ), {, return, false, ;, }]
[&&, !, specializationState, ., canFixupFunction, (, fn, ., getFunctionNode, (, ), ), ), {, return, false, ;, }, Node, fnNode]
[), {, return, false, ;, }, Node, fnNode, =, fn, ., getFunctionNode, (, ), ;, return, injector, ., doesFunctionMeetMinimumRequirements, (]
[), {, return, false, ;, }, Node, fnNode, =, fn, ., getFunctionNode, (, ), ;, return, injector, ., doesFunctionMeetMinimumRequirements, (]
[., canFixupFunction, (, fn, ., getFunctionNode, (, ), ), ), {, return, false, ;, }, Node, fnNode, =, fn, .]
[), ), {, return, false, ;, }, Node, fnNode, =, fn, ., getFunctionNode, (, ), ;, return, injector, ., doesFunctionMeetMinimumRequirements]
[., getFunctionNode, (, ), ), ), {, return, false, ;, }, Node, fnNode, =, fn, ., getFunctionNode, (, ), ;]
[;, }, Node, fnNode, =, fn, ., getFunctionNode, (, ), ;, return, injector, ., doesFunctionMeetMinimumRequirements, (, fnName, ,, fnNode, )]
[;, return, injector, ., doesFunctionMeetMinimumRequirements, (, fnName, ,, fnNode, ), ;, }, private, interface, CallVisitorCallback, {, public, void, visitCallSite, (]
[., getFunctionNode, (, ), ;, return, injector, ., doesFunctionMeetMinimumRequirements, (, fnName, ,, fnNode, ), ;, }, private, interface, CallVisitorCallback, {]
[;, }, private, interface, CallVisitorCallback, {, public, void, visitCallSite, (, NodeTraversal, t, ,, Node, callNode, ,, Node, parent, ,, FunctionState]
[., doesFunctionMeetMinimumRequirements, (, fnName, ,, fnNode, ), ;, }, private, interface, CallVisitorCallback, {, public, void, visitCallSite, (, NodeTraversal, t, ,]
[,, fnNode, ), ;, }, private, interface, CallVisitorCallback, {, public, void, visitCallSite, (, NodeTraversal, t, ,, Node, callNode, ,, Node]
[), ;, }, private, interface, CallVisitorCallback, {, public, void, visitCallSite, (, NodeTraversal, t, ,, Node, callNode, ,, Node, parent, ,]
[=, fns, ;, this, ., anonFunctionMap, =, anonFns, ;, this, ., callback, =, callback, ;, }, @, Override, public, void]
[., functionMap, =, fns, ;, this, ., anonFunctionMap, =, anonFns, ;, this, ., callback, =, callback, ;, }, @, Override]
[;, this, ., anonFunctionMap, =, anonFns, ;, this, ., callback, =, callback, ;, }, @, Override, public, void, visit, (]
[=, anonFns, ;, this, ., callback, =, callback, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[., anonFunctionMap, =, anonFns, ;, this, ., callback, =, callback, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[;, this, ., callback, =, callback, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[=, callback, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., callback, =, callback, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[), {, case, Token, ., CALL, :, Node, child, =, n, ., getFirstChild, (, ), ;, String, name, =, null]
[., getType, (, ), ), {, case, Token, ., CALL, :, Node, child, =, n, ., getFirstChild, (, ), ;]
[:, Node, child, =, n, ., getFirstChild, (, ), ;, String, name, =, null, ;, if, (, child, ., isName]
[., CALL, :, Node, child, =, n, ., getFirstChild, (, ), ;, String, name, =, null, ;, if, (, child]
[;, String, name, =, null, ;, if, (, child, ., isName, (, ), ), {, name, =, child, ., getString]
[., getFirstChild, (, ), ;, String, name, =, null, ;, if, (, child, ., isName, (, ), ), {, name]
[;, if, (, child, ., isName, (, ), ), {, name, =, child, ., getString, (, ), ;, }, else]
[), {, name, =, child, ., getString, (, ), ;, }, else, if, (, child, ., isFunction, (, ), )]
[., isName, (, ), ), {, name, =, child, ., getString, (, ), ;, }, else, if, (, child, .]
[=, child, ., getString, (, ), ;, }, else, if, (, child, ., isFunction, (, ), ), {, name, =]
[;, }, else, if, (, child, ., isFunction, (, ), ), {, name, =, anonFunctionMap, ., get, (, child, )]
[., getString, (, ), ;, }, else, if, (, child, ., isFunction, (, ), ), {, name, =, anonFunctionMap, .]
[), {, name, =, anonFunctionMap, ., get, (, child, ), ;, }, else, if, (, NodeUtil, ., isFunctionObjectCall, (, n]
[., isFunction, (, ), ), {, name, =, anonFunctionMap, ., get, (, child, ), ;, }, else, if, (, NodeUtil]
[=, anonFunctionMap, ., get, (, child, ), ;, }, else, if, (, NodeUtil, ., isFunctionObjectCall, (, n, ), ), {]
[;, }, else, if, (, NodeUtil, ., isFunctionObjectCall, (, n, ), ), {, Preconditions, ., checkState, (, NodeUtil, ., isGet]
[., get, (, child, ), ;, }, else, if, (, NodeUtil, ., isFunctionObjectCall, (, n, ), ), {, Preconditions, .]
[), ;, }, else, if, (, NodeUtil, ., isFunctionObjectCall, (, n, ), ), {, Preconditions, ., checkState, (, NodeUtil, .]
[), {, Preconditions, ., checkState, (, NodeUtil, ., isGet, (, child, ), ), ;, Node, fnIdentifingNode, =, child, ., getFirstChild]
[., isFunctionObjectCall, (, n, ), ), {, Preconditions, ., checkState, (, NodeUtil, ., isGet, (, child, ), ), ;, Node]
[), ), {, Preconditions, ., checkState, (, NodeUtil, ., isGet, (, child, ), ), ;, Node, fnIdentifingNode, =, child, .]
[;, Node, fnIdentifingNode, =, child, ., getFirstChild, (, ), ;, if, (, fnIdentifingNode, ., isName, (, ), ), {, name]
[., checkState, (, NodeUtil, ., isGet, (, child, ), ), ;, Node, fnIdentifingNode, =, child, ., getFirstChild, (, ), ;]
[), ;, Node, fnIdentifingNode, =, child, ., getFirstChild, (, ), ;, if, (, fnIdentifingNode, ., isName, (, ), ), {]
[., isGet, (, child, ), ), ;, Node, fnIdentifingNode, =, child, ., getFirstChild, (, ), ;, if, (, fnIdentifingNode, .]
[), ), ;, Node, fnIdentifingNode, =, child, ., getFirstChild, (, ), ;, if, (, fnIdentifingNode, ., isName, (, ), )]
[;, if, (, fnIdentifingNode, ., isName, (, ), ), {, name, =, fnIdentifingNode, ., getString, (, ), ;, }, else]
[., getFirstChild, (, ), ;, if, (, fnIdentifingNode, ., isName, (, ), ), {, name, =, fnIdentifingNode, ., getString, (]
[), {, name, =, fnIdentifingNode, ., getString, (, ), ;, }, else, if, (, fnIdentifingNode, ., isFunction, (, ), )]
[., isName, (, ), ), {, name, =, fnIdentifingNode, ., getString, (, ), ;, }, else, if, (, fnIdentifingNode, .]
[=, fnIdentifingNode, ., getString, (, ), ;, }, else, if, (, fnIdentifingNode, ., isFunction, (, ), ), {, name, =]
[;, }, else, if, (, fnIdentifingNode, ., isFunction, (, ), ), {, name, =, anonFunctionMap, ., get, (, fnIdentifingNode, )]
[., getString, (, ), ;, }, else, if, (, fnIdentifingNode, ., isFunction, (, ), ), {, name, =, anonFunctionMap, .]
[), {, name, =, anonFunctionMap, ., get, (, fnIdentifingNode, ), ;, }, }, if, (, name, !=, null, ), {]
[., isFunction, (, ), ), {, name, =, anonFunctionMap, ., get, (, fnIdentifingNode, ), ;, }, }, if, (, name]
[=, anonFunctionMap, ., get, (, fnIdentifingNode, ), ;, }, }, if, (, name, !=, null, ), {, FunctionState, fs, =]
[;, }, }, if, (, name, !=, null, ), {, FunctionState, fs, =, functionMap, ., get, (, name, ), ;]
[., get, (, fnIdentifingNode, ), ;, }, }, if, (, name, !=, null, ), {, FunctionState, fs, =, functionMap, .]
[), ;, }, }, if, (, name, !=, null, ), {, FunctionState, fs, =, functionMap, ., get, (, name, )]
[), {, FunctionState, fs, =, functionMap, ., get, (, name, ), ;, if, (, fs, !=, null, ), {, callback]
[!=, null, ), {, FunctionState, fs, =, functionMap, ., get, (, name, ), ;, if, (, fs, !=, null, )]
[), {, FunctionState, fs, =, functionMap, ., get, (, name, ), ;, if, (, fs, !=, null, ), {, callback]
[;, if, (, fs, !=, null, ), {, callback, ., visitCallSite, (, t, ,, n, ,, parent, ,, fs, )]
[., get, (, name, ), ;, if, (, fs, !=, null, ), {, callback, ., visitCallSite, (, t, ,, n]
[), ;, if, (, fs, !=, null, ), {, callback, ., visitCallSite, (, t, ,, n, ,, parent, ,, fs]
[), {, callback, ., visitCallSite, (, t, ,, n, ,, parent, ,, fs, ), ;, }, }, break, ;, }]
[!=, null, ), {, callback, ., visitCallSite, (, t, ,, n, ,, parent, ,, fs, ), ;, }, }, break]
[), {, callback, ., visitCallSite, (, t, ,, n, ,, parent, ,, fs, ), ;, }, }, break, ;, }]
[;, }, }, break, ;, }, }, }, static, boolean, isCandidateUsage, (, Node, name, ), {, Node, parent, =, name]
[., visitCallSite, (, t, ,, n, ,, parent, ,, fs, ), ;, }, }, break, ;, }, }, }, static]
[,, n, ,, parent, ,, fs, ), ;, }, }, break, ;, }, }, }, static, boolean, isCandidateUsage, (, Node]
[,, parent, ,, fs, ), ;, }, }, break, ;, }, }, }, static, boolean, isCandidateUsage, (, Node, name, )]
[,, fs, ), ;, }, }, break, ;, }, }, }, static, boolean, isCandidateUsage, (, Node, name, ), {, Node]
[), ;, }, }, break, ;, }, }, }, static, boolean, isCandidateUsage, (, Node, name, ), {, Node, parent, =]
[;, Preconditions, ., checkState, (, name, ., isName, (, ), ), ;, if, (, parent, ., isVar, (, ), ||]
[., getParent, (, ), ;, Preconditions, ., checkState, (, name, ., isName, (, ), ), ;, if, (, parent, .]
[;, if, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ), {, return, true, ;, }]
[., checkState, (, name, ., isName, (, ), ), ;, if, (, parent, ., isVar, (, ), ||, parent, .]
[), ;, if, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ), {, return, true, ;]
[., isName, (, ), ), ;, if, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), )]
[), {, return, true, ;, }, if, (, parent, ., isCall, (, ), &&, parent, ., getFirstChild, (, ), ==]
[||, parent, ., isFunction, (, ), ), {, return, true, ;, }, if, (, parent, ., isCall, (, ), &&]
[., isVar, (, ), ||, parent, ., isFunction, (, ), ), {, return, true, ;, }, if, (, parent, .]
[), {, return, true, ;, }, if, (, parent, ., isCall, (, ), &&, parent, ., getFirstChild, (, ), ==]
[., isFunction, (, ), ), {, return, true, ;, }, if, (, parent, ., isCall, (, ), &&, parent, .]
[;, }, if, (, parent, ., isCall, (, ), &&, parent, ., getFirstChild, (, ), ==, name, ), {, return]
[), {, return, true, ;, }, if, (, NodeUtil, ., isGet, (, parent, ), &&, name, ==, parent, ., getFirstChild]
[&&, parent, ., getFirstChild, (, ), ==, name, ), {, return, true, ;, }, if, (, NodeUtil, ., isGet, (]
[., isCall, (, ), &&, parent, ., getFirstChild, (, ), ==, name, ), {, return, true, ;, }, if, (]
[), {, return, true, ;, }, if, (, NodeUtil, ., isGet, (, parent, ), &&, name, ==, parent, ., getFirstChild]
[==, name, ), {, return, true, ;, }, if, (, NodeUtil, ., isGet, (, parent, ), &&, name, ==, parent]
[., getFirstChild, (, ), ==, name, ), {, return, true, ;, }, if, (, NodeUtil, ., isGet, (, parent, )]
[), {, return, true, ;, }, if, (, NodeUtil, ., isGet, (, parent, ), &&, name, ==, parent, ., getFirstChild]
[;, }, if, (, NodeUtil, ., isGet, (, parent, ), &&, name, ==, parent, ., getFirstChild, (, ), &&, name]
[), {, Node, gramps, =, name, ., getAncestor, (, 2, ), ;, if, (, gramps, ., isCall, (, ), &&]
[&&, name, ., getNext, (, ), ., getString, (, ), ., equals, (, "call", ), ), {, Node, gramps, =]
[&&, name, ., getNext, (, ), ., isString, (, ), &&, name, ., getNext, (, ), ., getString, (, )]
[&&, name, ==, parent, ., getFirstChild, (, ), &&, name, ., getNext, (, ), ., isString, (, ), &&, name]
[., isGet, (, parent, ), &&, name, ==, parent, ., getFirstChild, (, ), &&, name, ., getNext, (, ), .]
[), &&, name, ==, parent, ., getFirstChild, (, ), &&, name, ., getNext, (, ), ., isString, (, ), &&]
[&&, name, ., getNext, (, ), ., isString, (, ), &&, name, ., getNext, (, ), ., getString, (, )]
[==, parent, ., getFirstChild, (, ), &&, name, ., getNext, (, ), ., isString, (, ), &&, name, ., getNext]
[&&, name, ., getNext, (, ), ., isString, (, ), &&, name, ., getNext, (, ), ., getString, (, )]
[., getFirstChild, (, ), &&, name, ., getNext, (, ), ., isString, (, ), &&, name, ., getNext, (, )]
[&&, name, ., getNext, (, ), ., getString, (, ), ., equals, (, "call", ), ), {, Node, gramps, =]
[., isString, (, ), &&, name, ., getNext, (, ), ., getString, (, ), ., equals, (, "call", ), )]
[., getNext, (, ), ., isString, (, ), &&, name, ., getNext, (, ), ., getString, (, ), ., equals]
[), {, Node, gramps, =, name, ., getAncestor, (, 2, ), ;, if, (, gramps, ., isCall, (, ), &&]
[., equals, (, "call", ), ), {, Node, gramps, =, name, ., getAncestor, (, 2, ), ;, if, (, gramps]
[., getString, (, ), ., equals, (, "call", ), ), {, Node, gramps, =, name, ., getAncestor, (, 2, )]
[., getNext, (, ), ., getString, (, ), ., equals, (, "call", ), ), {, Node, gramps, =, name, .]
[), ), {, Node, gramps, =, name, ., getAncestor, (, 2, ), ;, if, (, gramps, ., isCall, (, )]
[;, if, (, gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return, true]
[., getAncestor, (, 2, ), ;, if, (, gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==]
[), ;, if, (, gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return]
[), {, return, true, ;, }, }, return, false, ;, }, private, class, FindCandidatesReferences, extends, CallVisitor, implements, CallVisitorCallback, {, FindCandidatesReferences]
[&&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return, true, ;, }, }, return, false, ;, }, private]
[., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return, true, ;, }, }, return]
[), {, return, true, ;, }, }, return, false, ;, }, private, class, FindCandidatesReferences, extends, CallVisitor, implements, CallVisitorCallback, {, FindCandidatesReferences]
[==, parent, ), {, return, true, ;, }, }, return, false, ;, }, private, class, FindCandidatesReferences, extends, CallVisitor, implements, CallVisitorCallback]
[., getFirstChild, (, ), ==, parent, ), {, return, true, ;, }, }, return, false, ;, }, private, class, FindCandidatesReferences]
[), {, return, true, ;, }, }, return, false, ;, }, private, class, FindCandidatesReferences, extends, CallVisitor, implements, CallVisitorCallback, {, FindCandidatesReferences]
[;, }, }, return, false, ;, }, private, class, FindCandidatesReferences, extends, CallVisitor, implements, CallVisitorCallback, {, FindCandidatesReferences, (, Map, <, String]
[;, }, private, class, FindCandidatesReferences, extends, CallVisitor, implements, CallVisitorCallback, {, FindCandidatesReferences, (, Map, <, String, ,, FunctionState, >, fns, ,]
[,, anonFns, ,, null, ), ;, this, ., callback, =, this, ;, }, @, Override, public, void, visit, (, NodeTraversal]
[,, null, ), ;, this, ., callback, =, this, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[), ;, this, ., callback, =, this, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[=, this, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., callback, =, this, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, super, .]
[;, if, (, n, ., isName, (, ), ), {, checkNameUsage, (, t, ,, n, ,, parent, ), ;, }]
[., visit, (, t, ,, n, ,, parent, ), ;, if, (, n, ., isName, (, ), ), {, checkNameUsage]
[,, n, ,, parent, ), ;, if, (, n, ., isName, (, ), ), {, checkNameUsage, (, t, ,, n]
[,, parent, ), ;, if, (, n, ., isName, (, ), ), {, checkNameUsage, (, t, ,, n, ,, parent]
[), ;, if, (, n, ., isName, (, ), ), {, checkNameUsage, (, t, ,, n, ,, parent, ), ;]
[), {, checkNameUsage, (, t, ,, n, ,, parent, ), ;, }, }, @, Override, public, void, visitCallSite, (, NodeTraversal]
[., isName, (, ), ), {, checkNameUsage, (, t, ,, n, ,, parent, ), ;, }, }, @, Override, public]
[;, }, }, @, Override, public, void, visitCallSite, (, NodeTraversal, t, ,, Node, callNode, ,, Node, parent, ,, FunctionState, fs]
[,, n, ,, parent, ), ;, }, }, @, Override, public, void, visitCallSite, (, NodeTraversal, t, ,, Node, callNode, ,]
[,, parent, ), ;, }, }, @, Override, public, void, visitCallSite, (, NodeTraversal, t, ,, Node, callNode, ,, Node, parent]
[), ;, }, }, @, Override, public, void, visitCallSite, (, NodeTraversal, t, ,, Node, callNode, ,, Node, parent, ,, FunctionState]
[;, }, void, maybeAddReference, (, NodeTraversal, t, ,, FunctionState, fs, ,, Node, callNode, ,, JSModule, module, ), {, if, (]
[,, fs, ,, callNode, ,, t, ., getModule, (, ), ), ;, }, void, maybeAddReference, (, NodeTraversal, t, ,, FunctionState]
[,, callNode, ,, t, ., getModule, (, ), ), ;, }, void, maybeAddReference, (, NodeTraversal, t, ,, FunctionState, fs, ,]
[,, t, ., getModule, (, ), ), ;, }, void, maybeAddReference, (, NodeTraversal, t, ,, FunctionState, fs, ,, Node, callNode]
[), ;, }, void, maybeAddReference, (, NodeTraversal, t, ,, FunctionState, fs, ,, Node, callNode, ,, JSModule, module, ), {, if]
[., getModule, (, ), ), ;, }, void, maybeAddReference, (, NodeTraversal, t, ,, FunctionState, fs, ,, Node, callNode, ,, JSModule]
[), {, return, ;, }, boolean, referenceAdded, =, false, ;, InliningMode, mode, =, fs, ., canInlineDirectly, (, ), ?, InliningMode]
[), {, return, ;, }, boolean, referenceAdded, =, false, ;, InliningMode, mode, =, fs, ., canInlineDirectly, (, ), ?, InliningMode]
[., canInline, (, ), ), {, return, ;, }, boolean, referenceAdded, =, false, ;, InliningMode, mode, =, fs, ., canInlineDirectly]
[;, InliningMode, mode, =, fs, ., canInlineDirectly, (, ), ?, InliningMode, ., DIRECT, :, InliningMode, ., BLOCK, ;, referenceAdded, =]
[;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode, ), ;, if, (, !, referenceAdded]
[?, InliningMode, ., DIRECT, :, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module]
[., canInlineDirectly, (, ), ?, InliningMode, ., DIRECT, :, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs]
[:, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode, ), ;]
[., DIRECT, :, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode]
[;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode, ), ;, if, (, !, referenceAdded]
[., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode, ), ;, if, (]
[=, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode, ), ;, if, (, !, referenceAdded, &&, mode]
[;, if, (, !, referenceAdded, &&, mode, ==, InliningMode, ., DIRECT, &&, blockFunctionInliningEnabled, ), {, mode, =, InliningMode, ., BLOCK]
[,, fs, ,, callNode, ,, module, ,, mode, ), ;, if, (, !, referenceAdded, &&, mode, ==, InliningMode, ., DIRECT]
[,, callNode, ,, module, ,, mode, ), ;, if, (, !, referenceAdded, &&, mode, ==, InliningMode, ., DIRECT, &&, blockFunctionInliningEnabled]
[,, module, ,, mode, ), ;, if, (, !, referenceAdded, &&, mode, ==, InliningMode, ., DIRECT, &&, blockFunctionInliningEnabled, ), {]
[,, mode, ), ;, if, (, !, referenceAdded, &&, mode, ==, InliningMode, ., DIRECT, &&, blockFunctionInliningEnabled, ), {, mode, =]
[), ;, if, (, !, referenceAdded, &&, mode, ==, InliningMode, ., DIRECT, &&, blockFunctionInliningEnabled, ), {, mode, =, InliningMode, .]
[), {, mode, =, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,]
[&&, blockFunctionInliningEnabled, ), {, mode, =, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,]
[&&, mode, ==, InliningMode, ., DIRECT, &&, blockFunctionInliningEnabled, ), {, mode, =, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (]
[&&, mode, ==, InliningMode, ., DIRECT, &&, blockFunctionInliningEnabled, ), {, mode, =, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (]
[&&, blockFunctionInliningEnabled, ), {, mode, =, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,]
[==, InliningMode, ., DIRECT, &&, blockFunctionInliningEnabled, ), {, mode, =, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,]
[&&, blockFunctionInliningEnabled, ), {, mode, =, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,]
[., DIRECT, &&, blockFunctionInliningEnabled, ), {, mode, =, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,]
[), {, mode, =, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,]
[=, InliningMode, ., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode, ), ;]
[;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode, ), ;, }, if, (, !]
[., BLOCK, ;, referenceAdded, =, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode, ), ;, }, if]
[=, maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode, ), ;, }, if, (, !, referenceAdded, )]
[;, }, if, (, !, referenceAdded, ), {, fs, ., setRemove, (, false, ), ;, }, }, private, boolean, maybeAddReferenceUsingMode]
[,, fs, ,, callNode, ,, module, ,, mode, ), ;, }, if, (, !, referenceAdded, ), {, fs, ., setRemove]
[,, callNode, ,, module, ,, mode, ), ;, }, if, (, !, referenceAdded, ), {, fs, ., setRemove, (, false]
[,, module, ,, mode, ), ;, }, if, (, !, referenceAdded, ), {, fs, ., setRemove, (, false, ), ;]
[,, mode, ), ;, }, if, (, !, referenceAdded, ), {, fs, ., setRemove, (, false, ), ;, }, }]
[), ;, }, if, (, !, referenceAdded, ), {, fs, ., setRemove, (, false, ), ;, }, }, private, boolean]
[), {, fs, ., setRemove, (, false, ), ;, }, }, private, boolean, maybeAddReferenceUsingMode, (, NodeTraversal, t, ,, FunctionState, fs]
[), {, fs, ., setRemove, (, false, ), ;, }, }, private, boolean, maybeAddReferenceUsingMode, (, NodeTraversal, t, ,, FunctionState, fs]
[;, }, }, private, boolean, maybeAddReferenceUsingMode, (, NodeTraversal, t, ,, FunctionState, fs, ,, Node, callNode, ,, JSModule, module, ,, InliningMode]
[., setRemove, (, false, ), ;, }, }, private, boolean, maybeAddReferenceUsingMode, (, NodeTraversal, t, ,, FunctionState, fs, ,, Node, callNode]
[), ;, }, }, private, boolean, maybeAddReferenceUsingMode, (, NodeTraversal, t, ,, FunctionState, fs, ,, Node, callNode, ,, JSModule, module, ,]
[), {, Node, containingFunction, =, getContainingFunction, (, t, ), ;, if, (, containingFunction, !=, null, &&, !, specializationState, ., canFixupFunction]
[!=, null, ), {, Node, containingFunction, =, getContainingFunction, (, t, ), ;, if, (, containingFunction, !=, null, &&, !, specializationState]
[), {, Node, containingFunction, =, getContainingFunction, (, t, ), ;, if, (, containingFunction, !=, null, &&, !, specializationState, ., canFixupFunction]
[;, if, (, containingFunction, !=, null, &&, !, specializationState, ., canFixupFunction, (, containingFunction, ), ), {, return, false, ;, }]
[), ;, if, (, containingFunction, !=, null, &&, !, specializationState, ., canFixupFunction, (, containingFunction, ), ), {, return, false, ;]
[), {, return, false, ;, }, }, CanInlineResult, result, =, injector, ., canInlineReferenceToFunction, (, t, ,, callNode, ,, fs, .]
[&&, !, specializationState, ., canFixupFunction, (, containingFunction, ), ), {, return, false, ;, }, }, CanInlineResult, result, =, injector, .]
[!=, null, &&, !, specializationState, ., canFixupFunction, (, containingFunction, ), ), {, return, false, ;, }, }, CanInlineResult, result, =]
[&&, !, specializationState, ., canFixupFunction, (, containingFunction, ), ), {, return, false, ;, }, }, CanInlineResult, result, =, injector, .]
[), {, return, false, ;, }, }, CanInlineResult, result, =, injector, ., canInlineReferenceToFunction, (, t, ,, callNode, ,, fs, .]
[), {, return, false, ;, }, }, CanInlineResult, result, =, injector, ., canInlineReferenceToFunction, (, t, ,, callNode, ,, fs, .]
[., canFixupFunction, (, containingFunction, ), ), {, return, false, ;, }, }, CanInlineResult, result, =, injector, ., canInlineReferenceToFunction, (, t]
[), ), {, return, false, ;, }, }, CanInlineResult, result, =, injector, ., canInlineReferenceToFunction, (, t, ,, callNode, ,, fs]
[;, }, }, CanInlineResult, result, =, injector, ., canInlineReferenceToFunction, (, t, ,, callNode, ,, fs, ., getFn, (, ), .]
[;, if, (, result, !=, CanInlineResult, ., NO, ), {, boolean, decompose, =, (, result, ==, CanInlineResult, ., AFTER_PREPARATION, )]
[., canInlineReferenceToFunction, (, t, ,, callNode, ,, fs, ., getFn, (, ), ., getFunctionNode, (, ), ,, fs, ., getNamesToAlias]
[,, callNode, ,, fs, ., getFn, (, ), ., getFunctionNode, (, ), ,, fs, ., getNamesToAlias, (, ), ,, mode]
[,, fs, ., getFn, (, ), ., getFunctionNode, (, ), ,, fs, ., getNamesToAlias, (, ), ,, mode, ,, fs]
[,, fs, ., getNamesToAlias, (, ), ,, mode, ,, fs, ., getReferencesThis, (, ), ,, fs, ., hasInnerFunctions, (, )]
[., getFunctionNode, (, ), ,, fs, ., getNamesToAlias, (, ), ,, mode, ,, fs, ., getReferencesThis, (, ), ,, fs]
[., getFn, (, ), ., getFunctionNode, (, ), ,, fs, ., getNamesToAlias, (, ), ,, mode, ,, fs, ., getReferencesThis]
[,, mode, ,, fs, ., getReferencesThis, (, ), ,, fs, ., hasInnerFunctions, (, ), ), ;, if, (, result, !=]
[., getNamesToAlias, (, ), ,, mode, ,, fs, ., getReferencesThis, (, ), ,, fs, ., hasInnerFunctions, (, ), ), ;]
[,, fs, ., getReferencesThis, (, ), ,, fs, ., hasInnerFunctions, (, ), ), ;, if, (, result, !=, CanInlineResult, .]
[,, fs, ., hasInnerFunctions, (, ), ), ;, if, (, result, !=, CanInlineResult, ., NO, ), {, boolean, decompose, =]
[., getReferencesThis, (, ), ,, fs, ., hasInnerFunctions, (, ), ), ;, if, (, result, !=, CanInlineResult, ., NO, )]
[), ;, if, (, result, !=, CanInlineResult, ., NO, ), {, boolean, decompose, =, (, result, ==, CanInlineResult, ., AFTER_PREPARATION]
[., hasInnerFunctions, (, ), ), ;, if, (, result, !=, CanInlineResult, ., NO, ), {, boolean, decompose, =, (, result]
[), {, boolean, decompose, =, (, result, ==, CanInlineResult, ., AFTER_PREPARATION, ), ;, fs, ., addReference, (, new, Reference, (]
[!=, CanInlineResult, ., NO, ), {, boolean, decompose, =, (, result, ==, CanInlineResult, ., AFTER_PREPARATION, ), ;, fs, ., addReference]
[), {, boolean, decompose, =, (, result, ==, CanInlineResult, ., AFTER_PREPARATION, ), ;, fs, ., addReference, (, new, Reference, (]
[., NO, ), {, boolean, decompose, =, (, result, ==, CanInlineResult, ., AFTER_PREPARATION, ), ;, fs, ., addReference, (, new]
[;, fs, ., addReference, (, new, Reference, (, callNode, ,, module, ,, mode, ,, decompose, ), ), ;, return, true]
[), ;, fs, ., addReference, (, new, Reference, (, callNode, ,, module, ,, mode, ,, decompose, ), ), ;, return]
[==, CanInlineResult, ., AFTER_PREPARATION, ), ;, fs, ., addReference, (, new, Reference, (, callNode, ,, module, ,, mode, ,, decompose]
[), ;, fs, ., addReference, (, new, Reference, (, callNode, ,, module, ,, mode, ,, decompose, ), ), ;, return]
[., AFTER_PREPARATION, ), ;, fs, ., addReference, (, new, Reference, (, callNode, ,, module, ,, mode, ,, decompose, ), )]
[;, return, true, ;, }, return, false, ;, }, private, void, checkNameUsage, (, NodeTraversal, t, ,, Node, n, ,, Node]
[., addReference, (, new, Reference, (, callNode, ,, module, ,, mode, ,, decompose, ), ), ;, return, true, ;, }]
[), ;, return, true, ;, }, return, false, ;, }, private, void, checkNameUsage, (, NodeTraversal, t, ,, Node, n, ,]
[,, module, ,, mode, ,, decompose, ), ), ;, return, true, ;, }, return, false, ;, }, private, void, checkNameUsage]
[,, mode, ,, decompose, ), ), ;, return, true, ;, }, return, false, ;, }, private, void, checkNameUsage, (, NodeTraversal]
[,, decompose, ), ), ;, return, true, ;, }, return, false, ;, }, private, void, checkNameUsage, (, NodeTraversal, t, ,]
[), ), ;, return, true, ;, }, return, false, ;, }, private, void, checkNameUsage, (, NodeTraversal, t, ,, Node, n]
[;, }, return, false, ;, }, private, void, checkNameUsage, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[;, }, private, void, checkNameUsage, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[;, if, (, isCandidateUsage, (, n, ), ), {, return, ;, }, String, name, =, n, ., getString, (, )]
[., checkState, (, n, ., isName, (, ), ), ;, if, (, isCandidateUsage, (, n, ), ), {, return, ;]
[), ;, if, (, isCandidateUsage, (, n, ), ), {, return, ;, }, String, name, =, n, ., getString, (]
[., isName, (, ), ), ;, if, (, isCandidateUsage, (, n, ), ), {, return, ;, }, String, name, =]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, FunctionState, fs, =, fns, ., get]
[), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, FunctionState, fs, =, fns, .]
[;, FunctionState, fs, =, fns, ., get, (, name, ), ;, if, (, fs, ==, null, ), {, return, ;]
[., getString, (, ), ;, FunctionState, fs, =, fns, ., get, (, name, ), ;, if, (, fs, ==, null]
[;, if, (, fs, ==, null, ), {, return, ;, }, if, (, parent, ., isNew, (, ), ), {]
[., get, (, name, ), ;, if, (, fs, ==, null, ), {, return, ;, }, if, (, parent, .]
[), ;, if, (, fs, ==, null, ), {, return, ;, }, if, (, parent, ., isNew, (, ), )]
[), {, return, ;, }, if, (, parent, ., isNew, (, ), ), {, Node, target, =, parent, ., getFirstChild]
[==, null, ), {, return, ;, }, if, (, parent, ., isNew, (, ), ), {, Node, target, =, parent]
[), {, return, ;, }, if, (, parent, ., isNew, (, ), ), {, Node, target, =, parent, ., getFirstChild]
[), {, Node, target, =, parent, ., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), &&, target]
[., isNew, (, ), ), {, Node, target, =, parent, ., getFirstChild, (, ), ;, if, (, target, ., isName]
[;, if, (, target, ., isName, (, ), &&, target, ., getString, (, ), ., equals, (, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING]
[., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), &&, target, ., getString, (, ), ., equals]
[), {, fs, ., setInline, (, false, ), ;, }, }, if, (, parent, ., isAssign, (, ), &&, parent]
[&&, target, ., getString, (, ), ., equals, (, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, ), ), {, fs, ., setInline, (, false]
[., isName, (, ), &&, target, ., getString, (, ), ., equals, (, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, ), ), {, fs]
[), {, fs, ., setInline, (, false, ), ;, }, }, if, (, parent, ., isAssign, (, ), &&, parent]
[., equals, (, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, ), ), {, fs, ., setInline, (, false, ), ;, }, }, if, (]
[., getString, (, ), ., equals, (, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, ), ), {, fs, ., setInline, (, false, ), ;]
[), ), {, fs, ., setInline, (, false, ), ;, }, }, if, (, parent, ., isAssign, (, ), &&]
[., EXTERN_OBJECT_PROPERTY_STRING, ), ), {, fs, ., setInline, (, false, ), ;, }, }, if, (, parent, ., isAssign, (]
[;, }, }, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[., setInline, (, false, ), ;, }, }, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (]
[), ;, }, }, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[), {, fs, ., setInline, (, false, ), ;, }, else, {, fs, ., setRemove, (, false, ), ;, }]
[&&, parent, ., getFirstChild, (, ), ==, n, ), {, fs, ., setInline, (, false, ), ;, }, else, {]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, fs, ., setInline, (, false, )]
[), {, fs, ., setInline, (, false, ), ;, }, else, {, fs, ., setRemove, (, false, ), ;, }]
[==, n, ), {, fs, ., setInline, (, false, ), ;, }, else, {, fs, ., setRemove, (, false, )]
[., getFirstChild, (, ), ==, n, ), {, fs, ., setInline, (, false, ), ;, }, else, {, fs, .]
[), {, fs, ., setInline, (, false, ), ;, }, else, {, fs, ., setRemove, (, false, ), ;, }]
[;, }, else, {, fs, ., setRemove, (, false, ), ;, }, }, }, private, static, class, Inline, implements, CallVisitorCallback]
[., setInline, (, false, ), ;, }, else, {, fs, ., setRemove, (, false, ), ;, }, }, }, private]
[), ;, }, else, {, fs, ., setRemove, (, false, ), ;, }, }, }, private, static, class, Inline, implements]
[;, }, }, }, private, static, class, Inline, implements, CallVisitorCallback, {, private, final, FunctionInjector, injector, ;, private, final, SpecializeModule, .]
[., setRemove, (, false, ), ;, }, }, }, private, static, class, Inline, implements, CallVisitorCallback, {, private, final, FunctionInjector, injector]
[), ;, }, }, }, private, static, class, Inline, implements, CallVisitorCallback, {, private, final, FunctionInjector, injector, ;, private, final, SpecializeModule]
[=, injector, ;, this, ., specializationState, =, specializationState, ;, }, @, Override, public, void, visitCallSite, (, NodeTraversal, t, ,, Node]
[., injector, =, injector, ;, this, ., specializationState, =, specializationState, ;, }, @, Override, public, void, visitCallSite, (, NodeTraversal, t]
[;, this, ., specializationState, =, specializationState, ;, }, @, Override, public, void, visitCallSite, (, NodeTraversal, t, ,, Node, callNode, ,]
[=, specializationState, ;, }, @, Override, public, void, visitCallSite, (, NodeTraversal, t, ,, Node, callNode, ,, Node, parent, ,, FunctionState]
[., specializationState, =, specializationState, ;, }, @, Override, public, void, visitCallSite, (, NodeTraversal, t, ,, Node, callNode, ,, Node, parent]
[;, }, @, Override, public, void, visitCallSite, (, NodeTraversal, t, ,, Node, callNode, ,, Node, parent, ,, FunctionState, fs, )]
[;, if, (, fs, ., canInline, (, ), ), {, Reference, ref, =, fs, ., getReference, (, callNode, ), ;]
[., checkState, (, fs, ., hasExistingFunctionDefinition, (, ), ), ;, if, (, fs, ., canInline, (, ), ), {, Reference]
[), ;, if, (, fs, ., canInline, (, ), ), {, Reference, ref, =, fs, ., getReference, (, callNode, )]
[., hasExistingFunctionDefinition, (, ), ), ;, if, (, fs, ., canInline, (, ), ), {, Reference, ref, =, fs, .]
[), {, Reference, ref, =, fs, ., getReference, (, callNode, ), ;, if, (, ref, !=, null, ), {, if]
[., canInline, (, ), ), {, Reference, ref, =, fs, ., getReference, (, callNode, ), ;, if, (, ref, !=]
[;, if, (, ref, !=, null, ), {, if, (, specializationState, !=, null, ), {, Node, containingFunction, =, getContainingFunction, (]
[., getReference, (, callNode, ), ;, if, (, ref, !=, null, ), {, if, (, specializationState, !=, null, ), {]
[), ;, if, (, ref, !=, null, ), {, if, (, specializationState, !=, null, ), {, Node, containingFunction, =, getContainingFunction]
[), {, if, (, specializationState, !=, null, ), {, Node, containingFunction, =, getContainingFunction, (, t, ), ;, if, (, containingFunction]
[!=, null, ), {, if, (, specializationState, !=, null, ), {, Node, containingFunction, =, getContainingFunction, (, t, ), ;, if]
[), {, if, (, specializationState, !=, null, ), {, Node, containingFunction, =, getContainingFunction, (, t, ), ;, if, (, containingFunction]
[), {, Node, containingFunction, =, getContainingFunction, (, t, ), ;, if, (, containingFunction, !=, null, ), {, specializationState, ., reportSpecializedFunction]
[!=, null, ), {, Node, containingFunction, =, getContainingFunction, (, t, ), ;, if, (, containingFunction, !=, null, ), {, specializationState]
[), {, Node, containingFunction, =, getContainingFunction, (, t, ), ;, if, (, containingFunction, !=, null, ), {, specializationState, ., reportSpecializedFunction]
[;, if, (, containingFunction, !=, null, ), {, specializationState, ., reportSpecializedFunction, (, containingFunction, ), ;, }, }, inlineFunction, (, t]
[), ;, if, (, containingFunction, !=, null, ), {, specializationState, ., reportSpecializedFunction, (, containingFunction, ), ;, }, }, inlineFunction, (]
[), {, specializationState, ., reportSpecializedFunction, (, containingFunction, ), ;, }, }, inlineFunction, (, t, ,, callNode, ,, fs, ,, ref]
[!=, null, ), {, specializationState, ., reportSpecializedFunction, (, containingFunction, ), ;, }, }, inlineFunction, (, t, ,, callNode, ,, fs]
[), {, specializationState, ., reportSpecializedFunction, (, containingFunction, ), ;, }, }, inlineFunction, (, t, ,, callNode, ,, fs, ,, ref]
[;, }, }, inlineFunction, (, t, ,, callNode, ,, fs, ,, ref, ., mode, ), ;, ref, ., inlined, =]
[., reportSpecializedFunction, (, containingFunction, ), ;, }, }, inlineFunction, (, t, ,, callNode, ,, fs, ,, ref, ., mode, )]
[), ;, }, }, inlineFunction, (, t, ,, callNode, ,, fs, ,, ref, ., mode, ), ;, ref, ., inlined]
[;, ref, ., inlined, =, true, ;, }, }, }, private, void, inlineFunction, (, NodeTraversal, t, ,, Node, callNode, ,]
[,, callNode, ,, fs, ,, ref, ., mode, ), ;, ref, ., inlined, =, true, ;, }, }, }, private]
[,, fs, ,, ref, ., mode, ), ;, ref, ., inlined, =, true, ;, }, }, }, private, void, inlineFunction]
[,, ref, ., mode, ), ;, ref, ., inlined, =, true, ;, }, }, }, private, void, inlineFunction, (, NodeTraversal]
[), ;, ref, ., inlined, =, true, ;, }, }, }, private, void, inlineFunction, (, NodeTraversal, t, ,, Node, callNode]
[., mode, ), ;, ref, ., inlined, =, true, ;, }, }, }, private, void, inlineFunction, (, NodeTraversal, t, ,]
[=, true, ;, }, }, }, private, void, inlineFunction, (, NodeTraversal, t, ,, Node, callNode, ,, FunctionState, fs, ,, InliningMode]
[., inlined, =, true, ;, }, }, }, private, void, inlineFunction, (, NodeTraversal, t, ,, Node, callNode, ,, FunctionState, fs]
[;, }, }, }, private, void, inlineFunction, (, NodeTraversal, t, ,, Node, callNode, ,, FunctionState, fs, ,, InliningMode, mode, )]
[;, String, fnName, =, fn, ., getName, (, ), ;, Node, fnNode, =, fs, ., getSafeFnNode, (, ), ;, Node]
[., getFn, (, ), ;, String, fnName, =, fn, ., getName, (, ), ;, Node, fnNode, =, fs, ., getSafeFnNode]
[;, Node, fnNode, =, fs, ., getSafeFnNode, (, ), ;, Node, newCode, =, injector, ., inline, (, t, ,, callNode]
[., getName, (, ), ;, Node, fnNode, =, fs, ., getSafeFnNode, (, ), ;, Node, newCode, =, injector, ., inline]
[;, Node, newCode, =, injector, ., inline, (, t, ,, callNode, ,, fnName, ,, fnNode, ,, mode, ), ;, t]
[., getSafeFnNode, (, ), ;, Node, newCode, =, injector, ., inline, (, t, ,, callNode, ,, fnName, ,, fnNode, ,]
[;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, t, ., getCompiler, (, ), ., addToDebugLog, (, "Inlined function: "]
[., inline, (, t, ,, callNode, ,, fnName, ,, fnNode, ,, mode, ), ;, t, ., getCompiler, (, ), .]
[,, callNode, ,, fnName, ,, fnNode, ,, mode, ), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;]
[,, fnName, ,, fnNode, ,, mode, ), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, t, .]
[,, fnNode, ,, mode, ), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, t, ., getCompiler, (]
[,, mode, ), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, t, ., getCompiler, (, ), .]
[), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, t, ., getCompiler, (, ), ., addToDebugLog, (]
[;, t, ., getCompiler, (, ), ., addToDebugLog, (, "Inlined function: ", +, fn, ., getName, (, ), ), ;, }, }]
[., reportCodeChange, (, ), ;, t, ., getCompiler, (, ), ., addToDebugLog, (, "Inlined function: ", +, fn, ., getName, (, )]
[., getCompiler, (, ), ., reportCodeChange, (, ), ;, t, ., getCompiler, (, ), ., addToDebugLog, (, "Inlined function: ", +, fn]
[;, }, }, private, void, trimCanidatesNotMeetingMinimumRequirements, (, ), {, Iterator, <, Entry, <, String, ,, FunctionState, >, >, i, ;]
[., addToDebugLog, (, "Inlined function: ", +, fn, ., getName, (, ), ), ;, }, }, private, void, trimCanidatesNotMeetingMinimumRequirements, (, ), {]
[., getCompiler, (, ), ., addToDebugLog, (, "Inlined function: ", +, fn, ., getName, (, ), ), ;, }, }, private, void]
[), ;, }, }, private, void, trimCanidatesNotMeetingMinimumRequirements, (, ), {, Iterator, <, Entry, <, String, ,, FunctionState, >, >, i]
[+, fn, ., getName, (, ), ), ;, }, }, private, void, trimCanidatesNotMeetingMinimumRequirements, (, ), {, Iterator, <, Entry, <]
[), ;, }, }, private, void, trimCanidatesNotMeetingMinimumRequirements, (, ), {, Iterator, <, Entry, <, String, ,, FunctionState, >, >, i]
[., getName, (, ), ), ;, }, }, private, void, trimCanidatesNotMeetingMinimumRequirements, (, ), {, Iterator, <, Entry, <, String, ,]
[=, fns, ., entrySet, (, ), ., iterator, (, ), ;, i, ., hasNext, (, ), ;, ), {, FunctionState]
[;, i, ., hasNext, (, ), ;, ), {, FunctionState, fs, =, i, ., next, (, ), ., getValue, (]
[., iterator, (, ), ;, i, ., hasNext, (, ), ;, ), {, FunctionState, fs, =, i, ., next, (]
[., entrySet, (, ), ., iterator, (, ), ;, i, ., hasNext, (, ), ;, ), {, FunctionState, fs, =]
[;, ), {, FunctionState, fs, =, i, ., next, (, ), ., getValue, (, ), ;, if, (, !, fs]
[., hasNext, (, ), ;, ), {, FunctionState, fs, =, i, ., next, (, ), ., getValue, (, ), ;]
[;, if, (, !, fs, ., hasExistingFunctionDefinition, (, ), ||, !, fs, ., canInline, (, ), ), {, i, .]
[., getValue, (, ), ;, if, (, !, fs, ., hasExistingFunctionDefinition, (, ), ||, !, fs, ., canInline, (, )]
[., next, (, ), ., getValue, (, ), ;, if, (, !, fs, ., hasExistingFunctionDefinition, (, ), ||, !, fs]
[), {, i, ., remove, (, ), ;, }, }, }, void, trimCanidatesUsingOnCost, (, ), {, Iterator, <, Entry, <]
[||, !, fs, ., canInline, (, ), ), {, i, ., remove, (, ), ;, }, }, }, void, trimCanidatesUsingOnCost]
[||, !, fs, ., canInline, (, ), ), {, i, ., remove, (, ), ;, }, }, }, void, trimCanidatesUsingOnCost]
[., hasExistingFunctionDefinition, (, ), ||, !, fs, ., canInline, (, ), ), {, i, ., remove, (, ), ;, }]
[), {, i, ., remove, (, ), ;, }, }, }, void, trimCanidatesUsingOnCost, (, ), {, Iterator, <, Entry, <]
[), {, i, ., remove, (, ), ;, }, }, }, void, trimCanidatesUsingOnCost, (, ), {, Iterator, <, Entry, <]
[., canInline, (, ), ), {, i, ., remove, (, ), ;, }, }, }, void, trimCanidatesUsingOnCost, (, ), {]
[;, }, }, }, void, trimCanidatesUsingOnCost, (, ), {, Iterator, <, Entry, <, String, ,, FunctionState, >, >, i, ;]
[., remove, (, ), ;, }, }, }, void, trimCanidatesUsingOnCost, (, ), {, Iterator, <, Entry, <, String, ,, FunctionState]
[=, fns, ., entrySet, (, ), ., iterator, (, ), ;, i, ., hasNext, (, ), ;, ), {, FunctionState]
[;, i, ., hasNext, (, ), ;, ), {, FunctionState, fs, =, i, ., next, (, ), ., getValue, (]
[., iterator, (, ), ;, i, ., hasNext, (, ), ;, ), {, FunctionState, fs, =, i, ., next, (]
[., entrySet, (, ), ., iterator, (, ), ;, i, ., hasNext, (, ), ;, ), {, FunctionState, fs, =]
[;, ), {, FunctionState, fs, =, i, ., next, (, ), ., getValue, (, ), ;, if, (, fs, .]
[., hasNext, (, ), ;, ), {, FunctionState, fs, =, i, ., next, (, ), ., getValue, (, ), ;]
[;, if, (, fs, ., hasReferences, (, ), ), {, boolean, lowersCost, =, mimimizeCost, (, fs, ), ;, if, (]
[., getValue, (, ), ;, if, (, fs, ., hasReferences, (, ), ), {, boolean, lowersCost, =, mimimizeCost, (, fs]
[., next, (, ), ., getValue, (, ), ;, if, (, fs, ., hasReferences, (, ), ), {, boolean, lowersCost]
[), {, boolean, lowersCost, =, mimimizeCost, (, fs, ), ;, if, (, !, lowersCost, ), {, i, ., remove, (]
[., hasReferences, (, ), ), {, boolean, lowersCost, =, mimimizeCost, (, fs, ), ;, if, (, !, lowersCost, ), {]
[;, if, (, !, lowersCost, ), {, i, ., remove, (, ), ;, }, }, else, if, (, !, fs]
[), ;, if, (, !, lowersCost, ), {, i, ., remove, (, ), ;, }, }, else, if, (, !]
[), {, i, ., remove, (, ), ;, }, }, else, if, (, !, fs, ., canRemove, (, ), )]
[), {, i, ., remove, (, ), ;, }, }, else, if, (, !, fs, ., canRemove, (, ), )]
[;, }, }, else, if, (, !, fs, ., canRemove, (, ), ), {, i, ., remove, (, ), ;]
[., remove, (, ), ;, }, }, else, if, (, !, fs, ., canRemove, (, ), ), {, i, .]
[), {, i, ., remove, (, ), ;, }, }, }, private, boolean, mimimizeCost, (, FunctionState, fs, ), {, if]
[), {, i, ., remove, (, ), ;, }, }, }, private, boolean, mimimizeCost, (, FunctionState, fs, ), {, if]
[., canRemove, (, ), ), {, i, ., remove, (, ), ;, }, }, }, private, boolean, mimimizeCost, (, FunctionState]
[;, }, }, }, private, boolean, mimimizeCost, (, FunctionState, fs, ), {, if, (, !, inliningLowersCost, (, fs, ), )]
[., remove, (, ), ;, }, }, }, private, boolean, mimimizeCost, (, FunctionState, fs, ), {, if, (, !, inliningLowersCost]
[), {, if, (, fs, ., hasBlockInliningReferences, (, ), ), {, fs, ., setRemove, (, false, ), ;, fs, .]
[), {, if, (, fs, ., hasBlockInliningReferences, (, ), ), {, fs, ., setRemove, (, false, ), ;, fs, .]
[), ), {, if, (, fs, ., hasBlockInliningReferences, (, ), ), {, fs, ., setRemove, (, false, ), ;, fs]
[), {, fs, ., setRemove, (, false, ), ;, fs, ., removeBlockInliningReferences, (, ), ;, if, (, !, fs, .]
[., hasBlockInliningReferences, (, ), ), {, fs, ., setRemove, (, false, ), ;, fs, ., removeBlockInliningReferences, (, ), ;, if]
[;, fs, ., removeBlockInliningReferences, (, ), ;, if, (, !, fs, ., hasReferences, (, ), ||, !, inliningLowersCost, (, fs]
[., setRemove, (, false, ), ;, fs, ., removeBlockInliningReferences, (, ), ;, if, (, !, fs, ., hasReferences, (, )]
[), ;, fs, ., removeBlockInliningReferences, (, ), ;, if, (, !, fs, ., hasReferences, (, ), ||, !, inliningLowersCost, (]
[;, if, (, !, fs, ., hasReferences, (, ), ||, !, inliningLowersCost, (, fs, ), ), {, return, false, ;]
[., removeBlockInliningReferences, (, ), ;, if, (, !, fs, ., hasReferences, (, ), ||, !, inliningLowersCost, (, fs, ), )]
[), {, return, false, ;, }, }, else, {, return, false, ;, }, }, return, true, ;, }, private, boolean]
[||, !, inliningLowersCost, (, fs, ), ), {, return, false, ;, }, }, else, {, return, false, ;, }, }]
[||, !, inliningLowersCost, (, fs, ), ), {, return, false, ;, }, }, else, {, return, false, ;, }, }]
[., hasReferences, (, ), ||, !, inliningLowersCost, (, fs, ), ), {, return, false, ;, }, }, else, {, return]
[), {, return, false, ;, }, }, else, {, return, false, ;, }, }, return, true, ;, }, private, boolean]
[), {, return, false, ;, }, }, else, {, return, false, ;, }, }, return, true, ;, }, private, boolean]
[), ), {, return, false, ;, }, }, else, {, return, false, ;, }, }, return, true, ;, }, private]
[;, }, }, else, {, return, false, ;, }, }, return, true, ;, }, private, boolean, inliningLowersCost, (, FunctionState, fs]
[;, }, }, return, true, ;, }, private, boolean, inliningLowersCost, (, FunctionState, fs, ), {, return, injector, ., inliningLowersCost, (]
[;, }, private, boolean, inliningLowersCost, (, FunctionState, fs, ), {, return, injector, ., inliningLowersCost, (, fs, ., getModule, (, )]
[;, }, private, void, resolveInlineConflicts, (, ), {, for, (, FunctionState, fs, :, fns, ., values, (, ), ), {]
[., inliningLowersCost, (, fs, ., getModule, (, ), ,, fs, ., getFn, (, ), ., getFunctionNode, (, ), ,, fs]
[,, fs, ., getFn, (, ), ., getFunctionNode, (, ), ,, fs, ., getReferences, (, ), ,, fs, ., getNamesToAlias]
[., getModule, (, ), ,, fs, ., getFn, (, ), ., getFunctionNode, (, ), ,, fs, ., getReferences, (, )]
[,, fs, ., getReferences, (, ), ,, fs, ., getNamesToAlias, (, ), ,, fs, ., canRemove, (, ), ,, fs]
[., getFunctionNode, (, ), ,, fs, ., getReferences, (, ), ,, fs, ., getNamesToAlias, (, ), ,, fs, ., canRemove]
[., getFn, (, ), ., getFunctionNode, (, ), ,, fs, ., getReferences, (, ), ,, fs, ., getNamesToAlias, (, )]
[,, fs, ., getNamesToAlias, (, ), ,, fs, ., canRemove, (, ), ,, fs, ., getReferencesThis, (, ), ), ;]
[., getReferences, (, ), ,, fs, ., getNamesToAlias, (, ), ,, fs, ., canRemove, (, ), ,, fs, ., getReferencesThis]
[,, fs, ., canRemove, (, ), ,, fs, ., getReferencesThis, (, ), ), ;, }, private, void, resolveInlineConflicts, (, )]
[., getNamesToAlias, (, ), ,, fs, ., canRemove, (, ), ,, fs, ., getReferencesThis, (, ), ), ;, }, private]
[,, fs, ., getReferencesThis, (, ), ), ;, }, private, void, resolveInlineConflicts, (, ), {, for, (, FunctionState, fs, :]
[., canRemove, (, ), ,, fs, ., getReferencesThis, (, ), ), ;, }, private, void, resolveInlineConflicts, (, ), {, for]
[), ;, }, private, void, resolveInlineConflicts, (, ), {, for, (, FunctionState, fs, :, fns, ., values, (, ), )]
[., getReferencesThis, (, ), ), ;, }, private, void, resolveInlineConflicts, (, ), {, for, (, FunctionState, fs, :, fns, .]
[), {, resolveInlineConflictsForFunction, (, fs, ), ;, }, }, private, void, resolveInlineConflictsForFunction, (, FunctionState, fs, ), {, if, (, !]
[., values, (, ), ), {, resolveInlineConflictsForFunction, (, fs, ), ;, }, }, private, void, resolveInlineConflictsForFunction, (, FunctionState, fs, )]
[;, }, }, private, void, resolveInlineConflictsForFunction, (, FunctionState, fs, ), {, if, (, !, fs, ., hasReferences, (, ), ||]
[), ;, }, }, private, void, resolveInlineConflictsForFunction, (, FunctionState, fs, ), {, if, (, !, fs, ., hasReferences, (, )]
[), {, return, ;, }, Node, fnNode, =, fs, ., getFn, (, ), ., getFunctionNode, (, ), ;, Set, <]
[||, !, fs, ., canInline, (, ), ), {, return, ;, }, Node, fnNode, =, fs, ., getFn, (, )]
[||, !, fs, ., canInline, (, ), ), {, return, ;, }, Node, fnNode, =, fs, ., getFn, (, )]
[., hasReferences, (, ), ||, !, fs, ., canInline, (, ), ), {, return, ;, }, Node, fnNode, =, fs]
[), {, return, ;, }, Node, fnNode, =, fs, ., getFn, (, ), ., getFunctionNode, (, ), ;, Set, <]
[), {, return, ;, }, Node, fnNode, =, fs, ., getFn, (, ), ., getFunctionNode, (, ), ;, Set, <]
[., canInline, (, ), ), {, return, ;, }, Node, fnNode, =, fs, ., getFn, (, ), ., getFunctionNode, (]
[;, Set, <, String, >, names, =, findCalledFunctions, (, fnNode, ), ;, if, (, !, names, ., isEmpty, (, )]
[., getFunctionNode, (, ), ;, Set, <, String, >, names, =, findCalledFunctions, (, fnNode, ), ;, if, (, !, names]
[., getFn, (, ), ., getFunctionNode, (, ), ;, Set, <, String, >, names, =, findCalledFunctions, (, fnNode, ), ;]
[;, if, (, !, names, ., isEmpty, (, ), ), {, for, (, String, name, :, names, ), {, FunctionState]
[), ;, if, (, !, names, ., isEmpty, (, ), ), {, for, (, String, name, :, names, ), {]
[), {, for, (, String, name, :, names, ), {, FunctionState, fsCalled, =, fns, ., get, (, name, ), ;]
[), {, for, (, String, name, :, names, ), {, FunctionState, fsCalled, =, fns, ., get, (, name, ), ;]
[., isEmpty, (, ), ), {, for, (, String, name, :, names, ), {, FunctionState, fsCalled, =, fns, ., get]
[), {, FunctionState, fsCalled, =, fns, ., get, (, name, ), ;, if, (, fsCalled, !=, null, &&, fsCalled, .]
[;, if, (, fsCalled, !=, null, &&, fsCalled, ., canRemove, (, ), ), {, fsCalled, ., setRemove, (, false, )]
[., get, (, name, ), ;, if, (, fsCalled, !=, null, &&, fsCalled, ., canRemove, (, ), ), {, fsCalled]
[), ;, if, (, fsCalled, !=, null, &&, fsCalled, ., canRemove, (, ), ), {, fsCalled, ., setRemove, (, false]
[), {, fsCalled, ., setRemove, (, false, ), ;, if, (, !, mimimizeCost, (, fsCalled, ), ), {, fsCalled, .]
[&&, fsCalled, ., canRemove, (, ), ), {, fsCalled, ., setRemove, (, false, ), ;, if, (, !, mimimizeCost, (]
[!=, null, &&, fsCalled, ., canRemove, (, ), ), {, fsCalled, ., setRemove, (, false, ), ;, if, (, !]
[&&, fsCalled, ., canRemove, (, ), ), {, fsCalled, ., setRemove, (, false, ), ;, if, (, !, mimimizeCost, (]
[), {, fsCalled, ., setRemove, (, false, ), ;, if, (, !, mimimizeCost, (, fsCalled, ), ), {, fsCalled, .]
[., canRemove, (, ), ), {, fsCalled, ., setRemove, (, false, ), ;, if, (, !, mimimizeCost, (, fsCalled, )]
[;, if, (, !, mimimizeCost, (, fsCalled, ), ), {, fsCalled, ., setInline, (, false, ), ;, }, }, }]
[., setRemove, (, false, ), ;, if, (, !, mimimizeCost, (, fsCalled, ), ), {, fsCalled, ., setInline, (, false]
[), ;, if, (, !, mimimizeCost, (, fsCalled, ), ), {, fsCalled, ., setInline, (, false, ), ;, }, }]
[), {, fsCalled, ., setInline, (, false, ), ;, }, }, }, fs, ., setSafeFnNode, (, fs, ., getFn, (]
[), {, fsCalled, ., setInline, (, false, ), ;, }, }, }, fs, ., setSafeFnNode, (, fs, ., getFn, (]
[), ), {, fsCalled, ., setInline, (, false, ), ;, }, }, }, fs, ., setSafeFnNode, (, fs, ., getFn]
[;, }, }, }, fs, ., setSafeFnNode, (, fs, ., getFn, (, ), ., getFunctionNode, (, ), ., cloneTree, (]
[., setInline, (, false, ), ;, }, }, }, fs, ., setSafeFnNode, (, fs, ., getFn, (, ), ., getFunctionNode]
[), ;, }, }, }, fs, ., setSafeFnNode, (, fs, ., getFn, (, ), ., getFunctionNode, (, ), ., cloneTree]
[;, }, }, private, Set, <, String, >, findCalledFunctions, (, Node, node, ), {, Set, <, String, >, changed, =]
[., setSafeFnNode, (, fs, ., getFn, (, ), ., getFunctionNode, (, ), ., cloneTree, (, ), ), ;, }, }]
[), ;, }, }, private, Set, <, String, >, findCalledFunctions, (, Node, node, ), {, Set, <, String, >, changed]
[., cloneTree, (, ), ), ;, }, }, private, Set, <, String, >, findCalledFunctions, (, Node, node, ), {, Set]
[., getFunctionNode, (, ), ., cloneTree, (, ), ), ;, }, }, private, Set, <, String, >, findCalledFunctions, (, Node]
[., getFn, (, ), ., getFunctionNode, (, ), ., cloneTree, (, ), ), ;, }, }, private, Set, <, String]
[;, findCalledFunctions, (, NodeUtil, ., getFunctionBody, (, node, ), ,, changed, ), ;, return, changed, ;, }, private, void, findCalledFunctions]
[., newHashSet, (, ), ;, findCalledFunctions, (, NodeUtil, ., getFunctionBody, (, node, ), ,, changed, ), ;, return, changed, ;]
[;, return, changed, ;, }, private, void, findCalledFunctions, (, Node, node, ,, Set, <, String, >, changed, ), {, Preconditions]
[,, changed, ), ;, return, changed, ;, }, private, void, findCalledFunctions, (, Node, node, ,, Set, <, String, >, changed]
[., getFunctionBody, (, node, ), ,, changed, ), ;, return, changed, ;, }, private, void, findCalledFunctions, (, Node, node, ,]
[), ,, changed, ), ;, return, changed, ;, }, private, void, findCalledFunctions, (, Node, node, ,, Set, <, String, >]
[), ;, return, changed, ;, }, private, void, findCalledFunctions, (, Node, node, ,, Set, <, String, >, changed, ), {]
[;, }, private, void, findCalledFunctions, (, Node, node, ,, Set, <, String, >, changed, ), {, Preconditions, ., checkArgument, (]
[;, if, (, node, ., isName, (, ), ), {, if, (, isCandidateUsage, (, node, ), ), {, changed, .]
[., checkArgument, (, changed, !=, null, ), ;, if, (, node, ., isName, (, ), ), {, if, (, isCandidateUsage]
[), ;, if, (, node, ., isName, (, ), ), {, if, (, isCandidateUsage, (, node, ), ), {, changed]
[!=, null, ), ;, if, (, node, ., isName, (, ), ), {, if, (, isCandidateUsage, (, node, ), )]
[), ;, if, (, node, ., isName, (, ), ), {, if, (, isCandidateUsage, (, node, ), ), {, changed]
[), {, if, (, isCandidateUsage, (, node, ), ), {, changed, ., add, (, node, ., getString, (, ), )]
[., isName, (, ), ), {, if, (, isCandidateUsage, (, node, ), ), {, changed, ., add, (, node, .]
[), {, changed, ., add, (, node, ., getString, (, ), ), ;, }, }, for, (, Node, c, =]
[), ), {, changed, ., add, (, node, ., getString, (, ), ), ;, }, }, for, (, Node, c]
[;, }, }, for, (, Node, c, =, node, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[., add, (, node, ., getString, (, ), ), ;, }, }, for, (, Node, c, =, node, ., getFirstChild]
[), ;, }, }, for, (, Node, c, =, node, ., getFirstChild, (, ), ;, c, !=, null, ;, c]
[., getString, (, ), ), ;, }, }, for, (, Node, c, =, node, ., getFirstChild, (, ), ;, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, findCalledFunctions, (, c, ,, changed, )]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, findCalledFunctions, (]
[;, c, =, c, ., getNext, (, ), ), {, findCalledFunctions, (, c, ,, changed, ), ;, }, }, private]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, findCalledFunctions, (, c, ,, changed, ), ;, }]
[;, c, =, c, ., getNext, (, ), ), {, findCalledFunctions, (, c, ,, changed, ), ;, }, }, private]
[=, c, ., getNext, (, ), ), {, findCalledFunctions, (, c, ,, changed, ), ;, }, }, private, void, decomposeExpressions]
[), {, findCalledFunctions, (, c, ,, changed, ), ;, }, }, private, void, decomposeExpressions, (, Set, <, String, >, fnNames]
[., getNext, (, ), ), {, findCalledFunctions, (, c, ,, changed, ), ;, }, }, private, void, decomposeExpressions, (, Set]
[;, }, }, private, void, decomposeExpressions, (, Set, <, String, >, fnNames, ), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (]
[,, changed, ), ;, }, }, private, void, decomposeExpressions, (, Set, <, String, >, fnNames, ), {, ExpressionDecomposer, decomposer, =]
[), ;, }, }, private, void, decomposeExpressions, (, Set, <, String, >, fnNames, ), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer]
[;, for, (, FunctionState, fs, :, fns, ., values, (, ), ), {, if, (, fs, ., canInline, (, )]
[,, compiler, ., getUniqueNameIdSupplier, (, ), ,, fnNames, ), ;, for, (, FunctionState, fs, :, fns, ., values, (, )]
[,, fnNames, ), ;, for, (, FunctionState, fs, :, fns, ., values, (, ), ), {, if, (, fs, .]
[., getUniqueNameIdSupplier, (, ), ,, fnNames, ), ;, for, (, FunctionState, fs, :, fns, ., values, (, ), ), {]
[), ;, for, (, FunctionState, fs, :, fns, ., values, (, ), ), {, if, (, fs, ., canInline, (]
[), {, if, (, fs, ., canInline, (, ), ), {, for, (, Reference, ref, :, fs, ., getReferences, (]
[., values, (, ), ), {, if, (, fs, ., canInline, (, ), ), {, for, (, Reference, ref, :]
[), {, for, (, Reference, ref, :, fs, ., getReferences, (, ), ), {, if, (, ref, ., requiresDecomposition, )]
[., canInline, (, ), ), {, for, (, Reference, ref, :, fs, ., getReferences, (, ), ), {, if, (]
[), {, if, (, ref, ., requiresDecomposition, ), {, injector, ., maybePrepareCall, (, ref, ., callNode, ), ;, }, }]
[., getReferences, (, ), ), {, if, (, ref, ., requiresDecomposition, ), {, injector, ., maybePrepareCall, (, ref, ., callNode]
[), {, injector, ., maybePrepareCall, (, ref, ., callNode, ), ;, }, }, }, }, }, void, removeInlinedFunctions, (, )]
[., requiresDecomposition, ), {, injector, ., maybePrepareCall, (, ref, ., callNode, ), ;, }, }, }, }, }, void, removeInlinedFunctions]
[;, }, }, }, }, }, void, removeInlinedFunctions, (, ), {, for, (, FunctionState, fs, :, fns, ., values, (]
[., maybePrepareCall, (, ref, ., callNode, ), ;, }, }, }, }, }, void, removeInlinedFunctions, (, ), {, for, (]
[), ;, }, }, }, }, }, void, removeInlinedFunctions, (, ), {, for, (, FunctionState, fs, :, fns, ., values]
[., callNode, ), ;, }, }, }, }, }, void, removeInlinedFunctions, (, ), {, for, (, FunctionState, fs, :, fns]
[), {, if, (, fs, ., canRemove, (, ), ), {, Function, fn, =, fs, ., getFn, (, ), ;]
[., values, (, ), ), {, if, (, fs, ., canRemove, (, ), ), {, Function, fn, =, fs, .]
[), {, Function, fn, =, fs, ., getFn, (, ), ;, Preconditions, ., checkState, (, fs, ., canInline, (, )]
[., canRemove, (, ), ), {, Function, fn, =, fs, ., getFn, (, ), ;, Preconditions, ., checkState, (, fs]
[;, Preconditions, ., checkState, (, fs, ., canInline, (, ), ), ;, Preconditions, ., checkState, (, fn, !=, null, )]
[., getFn, (, ), ;, Preconditions, ., checkState, (, fs, ., canInline, (, ), ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, fn, !=, null, ), ;, verifyAllReferencesInlined, (, fs, ), ;, if, (, specializationState, !=, null]
[., checkState, (, fs, ., canInline, (, ), ), ;, Preconditions, ., checkState, (, fn, !=, null, ), ;, verifyAllReferencesInlined]
[), ;, Preconditions, ., checkState, (, fn, !=, null, ), ;, verifyAllReferencesInlined, (, fs, ), ;, if, (, specializationState, !=]
[., canInline, (, ), ), ;, Preconditions, ., checkState, (, fn, !=, null, ), ;, verifyAllReferencesInlined, (, fs, ), ;]
[;, verifyAllReferencesInlined, (, fs, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, fn, ., getFunctionNode]
[., checkState, (, fn, !=, null, ), ;, verifyAllReferencesInlined, (, fs, ), ;, if, (, specializationState, !=, null, ), {]
[), ;, verifyAllReferencesInlined, (, fs, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, fn, .]
[!=, null, ), ;, verifyAllReferencesInlined, (, fs, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (]
[), ;, verifyAllReferencesInlined, (, fs, ), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, fn, .]
[;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, fn, ., getFunctionNode, (, ), ,, fn, .]
[), ;, if, (, specializationState, !=, null, ), {, specializationState, ., reportRemovedFunction, (, fn, ., getFunctionNode, (, ), ,, fn]
[), {, specializationState, ., reportRemovedFunction, (, fn, ., getFunctionNode, (, ), ,, fn, ., getDeclaringBlock, (, ), ), ;, }]
[!=, null, ), {, specializationState, ., reportRemovedFunction, (, fn, ., getFunctionNode, (, ), ,, fn, ., getDeclaringBlock, (, ), )]
[), {, specializationState, ., reportRemovedFunction, (, fn, ., getFunctionNode, (, ), ,, fn, ., getDeclaringBlock, (, ), ), ;, }]
[;, }, fn, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, void, verifyAllReferencesInlined, (]
[., reportRemovedFunction, (, fn, ., getFunctionNode, (, ), ,, fn, ., getDeclaringBlock, (, ), ), ;, }, fn, ., remove]
[,, fn, ., getDeclaringBlock, (, ), ), ;, }, fn, ., remove, (, ), ;, compiler, ., reportCodeChange, (, )]
[., getFunctionNode, (, ), ,, fn, ., getDeclaringBlock, (, ), ), ;, }, fn, ., remove, (, ), ;, compiler]
[), ;, }, fn, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, void, verifyAllReferencesInlined]
[., getDeclaringBlock, (, ), ), ;, }, fn, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, void, verifyAllReferencesInlined, (, FunctionState, fs, ), {, for, (, Reference]
[., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, void, verifyAllReferencesInlined, (, FunctionState, fs, )]
[;, }, }, }, void, verifyAllReferencesInlined, (, FunctionState, fs, ), {, for, (, Reference, ref, :, fs, ., getReferences, (]
[., reportCodeChange, (, ), ;, }, }, }, void, verifyAllReferencesInlined, (, FunctionState, fs, ), {, for, (, Reference, ref, :]
[), {, if, (, !, ref, ., inlined, ), {, throw, new, IllegalStateException, (, "Call site missed.\n call: ", +, ref, ., callNode, .]
[., getReferences, (, ), ), {, if, (, !, ref, ., inlined, ), {, throw, new, IllegalStateException, (, "Call site missed.\n call: ", +]
[), {, throw, new, IllegalStateException, (, "Call site missed.\n call: ", +, ref, ., callNode, ., toStringTree, (, ), +, "\n parent:  ", +, ref, .]
[), {, throw, new, IllegalStateException, (, "Call site missed.\n call: ", +, ref, ., callNode, ., toStringTree, (, ), +, "\n parent:  ", +, ref, .]
[., inlined, ), {, throw, new, IllegalStateException, (, "Call site missed.\n call: ", +, ref, ., callNode, ., toStringTree, (, ), +, "\n parent:  ", +]
[;, }, }, }, private, static, class, FunctionState, {, private, Function, fn, =, null, ;, private, Node, safeFnNode, =, null]
[), ;, }, }, }, private, static, class, FunctionState, {, private, Function, fn, =, null, ;, private, Node, safeFnNode, =]
[+, ref, ., callNode, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, }, }, private, static, class]
[+, "\n parent:  ", +, ref, ., callNode, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, }, }, private]
[+, ref, ., callNode, ., toStringTree, (, ), +, "\n parent:  ", +, ref, ., callNode, ., getParent, (, ), ., toStringTree]
[+, "\n parent:  ", +, ref, ., callNode, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, }, }, private]
[., toStringTree, (, ), +, "\n parent:  ", +, ref, ., callNode, ., getParent, (, ), ., toStringTree, (, ), ), ;]
[., callNode, ., toStringTree, (, ), +, "\n parent:  ", +, ref, ., callNode, ., getParent, (, ), ., toStringTree, (, )]
[+, ref, ., callNode, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, }, }, private, static, class]
[), ;, }, }, }, private, static, class, FunctionState, {, private, Function, fn, =, null, ;, private, Node, safeFnNode, =]
[., toStringTree, (, ), ), ;, }, }, }, private, static, class, FunctionState, {, private, Function, fn, =, null, ;]
[., getParent, (, ), ., toStringTree, (, ), ), ;, }, }, }, private, static, class, FunctionState, {, private, Function]
[., callNode, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, }, }, private, static, class, FunctionState, {]
[;, private, Node, safeFnNode, =, null, ;, private, boolean, inline, =, true, ;, private, boolean, remove, =, true, ;, private]
[;, private, boolean, inline, =, true, ;, private, boolean, remove, =, true, ;, private, boolean, inlineDirectly, =, false, ;, private]
[;, private, boolean, remove, =, true, ;, private, boolean, inlineDirectly, =, false, ;, private, boolean, referencesThis, =, false, ;, private]
[;, private, boolean, inlineDirectly, =, false, ;, private, boolean, referencesThis, =, false, ;, private, boolean, hasInnerFunctions, =, false, ;, private]
[;, private, boolean, referencesThis, =, false, ;, private, boolean, hasInnerFunctions, =, false, ;, private, Map, <, Node, ,, Reference, >]
[;, private, boolean, hasInnerFunctions, =, false, ;, private, Map, <, Node, ,, Reference, >, references, =, null, ;, private, JSModule]
[;, private, Map, <, Node, ,, Reference, >, references, =, null, ;, private, JSModule, module, =, null, ;, private, Set]
[;, private, JSModule, module, =, null, ;, private, Set, <, String, >, namesToAlias, =, null, ;, boolean, hasExistingFunctionDefinition, (, )]
[;, private, Set, <, String, >, namesToAlias, =, null, ;, boolean, hasExistingFunctionDefinition, (, ), {, return, (, fn, !=, null]
[;, boolean, hasExistingFunctionDefinition, (, ), {, return, (, fn, !=, null, ), ;, }, public, void, setReferencesThis, (, boolean, referencesThis]
[;, }, public, void, setReferencesThis, (, boolean, referencesThis, ), {, this, ., referencesThis, =, referencesThis, ;, }, public, boolean, getReferencesThis]
[), ;, }, public, void, setReferencesThis, (, boolean, referencesThis, ), {, this, ., referencesThis, =, referencesThis, ;, }, public, boolean]
[!=, null, ), ;, }, public, void, setReferencesThis, (, boolean, referencesThis, ), {, this, ., referencesThis, =, referencesThis, ;, }]
[), ;, }, public, void, setReferencesThis, (, boolean, referencesThis, ), {, this, ., referencesThis, =, referencesThis, ;, }, public, boolean]
[=, referencesThis, ;, }, public, boolean, getReferencesThis, (, ), {, return, this, ., referencesThis, ;, }, public, void, setHasInnerFunctions, (]
[., referencesThis, =, referencesThis, ;, }, public, boolean, getReferencesThis, (, ), {, return, this, ., referencesThis, ;, }, public, void]
[;, }, public, boolean, getReferencesThis, (, ), {, return, this, ., referencesThis, ;, }, public, void, setHasInnerFunctions, (, boolean, hasInnerFunctions]
[;, }, public, void, setHasInnerFunctions, (, boolean, hasInnerFunctions, ), {, this, ., hasInnerFunctions, =, hasInnerFunctions, ;, }, public, boolean, hasInnerFunctions]
[., referencesThis, ;, }, public, void, setHasInnerFunctions, (, boolean, hasInnerFunctions, ), {, this, ., hasInnerFunctions, =, hasInnerFunctions, ;, }, public]
[=, hasInnerFunctions, ;, }, public, boolean, hasInnerFunctions, (, ), {, return, hasInnerFunctions, ;, }, void, removeBlockInliningReferences, (, ), {, Iterator]
[., hasInnerFunctions, =, hasInnerFunctions, ;, }, public, boolean, hasInnerFunctions, (, ), {, return, hasInnerFunctions, ;, }, void, removeBlockInliningReferences, (, )]
[;, }, public, boolean, hasInnerFunctions, (, ), {, return, hasInnerFunctions, ;, }, void, removeBlockInliningReferences, (, ), {, Iterator, <, Entry]
[;, }, void, removeBlockInliningReferences, (, ), {, Iterator, <, Entry, <, Node, ,, Reference, >, >, i, ;, for, (]
[=, getReferencesInternal, (, ), ., entrySet, (, ), ., iterator, (, ), ;, i, ., hasNext, (, ), ;, )]
[;, i, ., hasNext, (, ), ;, ), {, Entry, <, Node, ,, Reference, >, entry, =, i, ., next]
[., iterator, (, ), ;, i, ., hasNext, (, ), ;, ), {, Entry, <, Node, ,, Reference, >, entry]
[., entrySet, (, ), ., iterator, (, ), ;, i, ., hasNext, (, ), ;, ), {, Entry, <, Node]
[;, ), {, Entry, <, Node, ,, Reference, >, entry, =, i, ., next, (, ), ;, if, (, entry]
[., hasNext, (, ), ;, ), {, Entry, <, Node, ,, Reference, >, entry, =, i, ., next, (, )]
[;, if, (, entry, ., getValue, (, ), ., mode, ==, InliningMode, ., BLOCK, ), {, i, ., remove, (]
[., next, (, ), ;, if, (, entry, ., getValue, (, ), ., mode, ==, InliningMode, ., BLOCK, ), {]
[), {, i, ., remove, (, ), ;, }, }, }, public, boolean, hasBlockInliningReferences, (, ), {, for, (, Reference]
[==, InliningMode, ., BLOCK, ), {, i, ., remove, (, ), ;, }, }, }, public, boolean, hasBlockInliningReferences, (, )]
[., mode, ==, InliningMode, ., BLOCK, ), {, i, ., remove, (, ), ;, }, }, }, public, boolean, hasBlockInliningReferences]
[., getValue, (, ), ., mode, ==, InliningMode, ., BLOCK, ), {, i, ., remove, (, ), ;, }, }]
[), {, i, ., remove, (, ), ;, }, }, }, public, boolean, hasBlockInliningReferences, (, ), {, for, (, Reference]
[., BLOCK, ), {, i, ., remove, (, ), ;, }, }, }, public, boolean, hasBlockInliningReferences, (, ), {, for]
[;, }, }, }, public, boolean, hasBlockInliningReferences, (, ), {, for, (, Reference, r, :, getReferencesInternal, (, ), ., values]
[., remove, (, ), ;, }, }, }, public, boolean, hasBlockInliningReferences, (, ), {, for, (, Reference, r, :, getReferencesInternal]
[), {, if, (, r, ., mode, ==, InliningMode, ., BLOCK, ), {, return, true, ;, }, }, return, false]
[., values, (, ), ), {, if, (, r, ., mode, ==, InliningMode, ., BLOCK, ), {, return, true, ;]
[), {, return, true, ;, }, }, return, false, ;, }, public, Function, getFn, (, ), {, return, fn, ;]
[==, InliningMode, ., BLOCK, ), {, return, true, ;, }, }, return, false, ;, }, public, Function, getFn, (, )]
[., mode, ==, InliningMode, ., BLOCK, ), {, return, true, ;, }, }, return, false, ;, }, public, Function, getFn]
[), {, return, true, ;, }, }, return, false, ;, }, public, Function, getFn, (, ), {, return, fn, ;]
[., BLOCK, ), {, return, true, ;, }, }, return, false, ;, }, public, Function, getFn, (, ), {, return]
[;, }, }, return, false, ;, }, public, Function, getFn, (, ), {, return, fn, ;, }, public, void, setFn]
[;, }, public, Function, getFn, (, ), {, return, fn, ;, }, public, void, setFn, (, Function, fn, ), {]
[;, }, public, void, setFn, (, Function, fn, ), {, Preconditions, ., checkState, (, this, ., fn, ==, null, )]
[;, this, ., fn, =, fn, ;, }, public, Node, getSafeFnNode, (, ), {, return, (, safeFnNode, !=, null, )]
[., checkState, (, this, ., fn, ==, null, ), ;, this, ., fn, =, fn, ;, }, public, Node, getSafeFnNode]
[), ;, this, ., fn, =, fn, ;, }, public, Node, getSafeFnNode, (, ), {, return, (, safeFnNode, !=, null]
[==, null, ), ;, this, ., fn, =, fn, ;, }, public, Node, getSafeFnNode, (, ), {, return, (, safeFnNode]
[., fn, ==, null, ), ;, this, ., fn, =, fn, ;, }, public, Node, getSafeFnNode, (, ), {, return]
[), ;, this, ., fn, =, fn, ;, }, public, Node, getSafeFnNode, (, ), {, return, (, safeFnNode, !=, null]
[=, fn, ;, }, public, Node, getSafeFnNode, (, ), {, return, (, safeFnNode, !=, null, ), ?, safeFnNode, :, fn]
[., fn, =, fn, ;, }, public, Node, getSafeFnNode, (, ), {, return, (, safeFnNode, !=, null, ), ?, safeFnNode]
[;, }, public, Node, getSafeFnNode, (, ), {, return, (, safeFnNode, !=, null, ), ?, safeFnNode, :, fn, ., getFunctionNode]
[;, }, public, void, setSafeFnNode, (, Node, safeFnNode, ), {, this, ., safeFnNode, =, safeFnNode, ;, }, public, boolean, canInline]
[?, safeFnNode, :, fn, ., getFunctionNode, (, ), ;, }, public, void, setSafeFnNode, (, Node, safeFnNode, ), {, this, .]
[), ?, safeFnNode, :, fn, ., getFunctionNode, (, ), ;, }, public, void, setSafeFnNode, (, Node, safeFnNode, ), {, this]
[!=, null, ), ?, safeFnNode, :, fn, ., getFunctionNode, (, ), ;, }, public, void, setSafeFnNode, (, Node, safeFnNode, )]
[), ?, safeFnNode, :, fn, ., getFunctionNode, (, ), ;, }, public, void, setSafeFnNode, (, Node, safeFnNode, ), {, this]
[:, fn, ., getFunctionNode, (, ), ;, }, public, void, setSafeFnNode, (, Node, safeFnNode, ), {, this, ., safeFnNode, =]
[;, }, public, void, setSafeFnNode, (, Node, safeFnNode, ), {, this, ., safeFnNode, =, safeFnNode, ;, }, public, boolean, canInline]
[., getFunctionNode, (, ), ;, }, public, void, setSafeFnNode, (, Node, safeFnNode, ), {, this, ., safeFnNode, =, safeFnNode, ;]
[=, safeFnNode, ;, }, public, boolean, canInline, (, ), {, return, inline, ;, }, public, void, setInline, (, boolean, inline]
[., safeFnNode, =, safeFnNode, ;, }, public, boolean, canInline, (, ), {, return, inline, ;, }, public, void, setInline, (]
[;, }, public, boolean, canInline, (, ), {, return, inline, ;, }, public, void, setInline, (, boolean, inline, ), {]
[;, }, public, void, setInline, (, boolean, inline, ), {, this, ., inline, =, inline, ;, if, (, inline, ==]
[=, inline, ;, if, (, inline, ==, false, ), {, references, =, null, ;, remove, =, false, ;, }, }]
[., inline, =, inline, ;, if, (, inline, ==, false, ), {, references, =, null, ;, remove, =, false, ;]
[;, if, (, inline, ==, false, ), {, references, =, null, ;, remove, =, false, ;, }, }, public, boolean]
[), {, references, =, null, ;, remove, =, false, ;, }, }, public, boolean, canRemove, (, ), {, return, remove]
[==, false, ), {, references, =, null, ;, remove, =, false, ;, }, }, public, boolean, canRemove, (, ), {]
[), {, references, =, null, ;, remove, =, false, ;, }, }, public, boolean, canRemove, (, ), {, return, remove]
[=, null, ;, remove, =, false, ;, }, }, public, boolean, canRemove, (, ), {, return, remove, ;, }, public]
[;, remove, =, false, ;, }, }, public, boolean, canRemove, (, ), {, return, remove, ;, }, public, void, setRemove]
[=, false, ;, }, }, public, boolean, canRemove, (, ), {, return, remove, ;, }, public, void, setRemove, (, boolean]
[;, }, }, public, boolean, canRemove, (, ), {, return, remove, ;, }, public, void, setRemove, (, boolean, remove, )]
[;, }, public, void, setRemove, (, boolean, remove, ), {, this, ., remove, =, remove, ;, }, public, boolean, canInlineDirectly]
[=, remove, ;, }, public, boolean, canInlineDirectly, (, ), {, return, inlineDirectly, ;, }, public, void, inlineDirectly, (, boolean, directReplacement]
[., remove, =, remove, ;, }, public, boolean, canInlineDirectly, (, ), {, return, inlineDirectly, ;, }, public, void, inlineDirectly, (]
[;, }, public, boolean, canInlineDirectly, (, ), {, return, inlineDirectly, ;, }, public, void, inlineDirectly, (, boolean, directReplacement, ), {]
[;, }, public, void, inlineDirectly, (, boolean, directReplacement, ), {, this, ., inlineDirectly, =, directReplacement, ;, }, public, boolean, hasReferences]
[=, directReplacement, ;, }, public, boolean, hasReferences, (, ), {, return, (, references, !=, null, &&, !, references, ., isEmpty]
[., inlineDirectly, =, directReplacement, ;, }, public, boolean, hasReferences, (, ), {, return, (, references, !=, null, &&, !, references]
[;, }, public, boolean, hasReferences, (, ), {, return, (, references, !=, null, &&, !, references, ., isEmpty, (, )]
[;, }, private, Map, <, Node, ,, Reference, >, getReferencesInternal, (, ), {, if, (, references, ==, null, ), {]
[), ;, }, private, Map, <, Node, ,, Reference, >, getReferencesInternal, (, ), {, if, (, references, ==, null, )]
[&&, !, references, ., isEmpty, (, ), ), ;, }, private, Map, <, Node, ,, Reference, >, getReferencesInternal, (, )]
[!=, null, &&, !, references, ., isEmpty, (, ), ), ;, }, private, Map, <, Node, ,, Reference, >, getReferencesInternal]
[&&, !, references, ., isEmpty, (, ), ), ;, }, private, Map, <, Node, ,, Reference, >, getReferencesInternal, (, )]
[), ;, }, private, Map, <, Node, ,, Reference, >, getReferencesInternal, (, ), {, if, (, references, ==, null, )]
[), ;, }, private, Map, <, Node, ,, Reference, >, getReferencesInternal, (, ), {, if, (, references, ==, null, )]
[., isEmpty, (, ), ), ;, }, private, Map, <, Node, ,, Reference, >, getReferencesInternal, (, ), {, if, (]
[), {, return, Collections, ., emptyMap, (, ), ;, }, return, references, ;, }, public, void, addReference, (, Reference, ref]
[==, null, ), {, return, Collections, ., emptyMap, (, ), ;, }, return, references, ;, }, public, void, addReference, (]
[), {, return, Collections, ., emptyMap, (, ), ;, }, return, references, ;, }, public, void, addReference, (, Reference, ref]
[;, }, return, references, ;, }, public, void, addReference, (, Reference, ref, ), {, if, (, references, ==, null, )]
[., emptyMap, (, ), ;, }, return, references, ;, }, public, void, addReference, (, Reference, ref, ), {, if, (]
[;, }, public, void, addReference, (, Reference, ref, ), {, if, (, references, ==, null, ), {, references, =, Maps]
[), {, references, =, Maps, ., newHashMap, (, ), ;, }, references, ., put, (, ref, ., callNode, ,, ref]
[==, null, ), {, references, =, Maps, ., newHashMap, (, ), ;, }, references, ., put, (, ref, ., callNode]
[), {, references, =, Maps, ., newHashMap, (, ), ;, }, references, ., put, (, ref, ., callNode, ,, ref]
[=, Maps, ., newHashMap, (, ), ;, }, references, ., put, (, ref, ., callNode, ,, ref, ), ;, }]
[;, }, references, ., put, (, ref, ., callNode, ,, ref, ), ;, }, public, Collection, <, Reference, >, getReferences]
[., newHashMap, (, ), ;, }, references, ., put, (, ref, ., callNode, ,, ref, ), ;, }, public, Collection]
[;, }, public, Collection, <, Reference, >, getReferences, (, ), {, return, getReferencesInternal, (, ), ., values, (, ), ;]
[., put, (, ref, ., callNode, ,, ref, ), ;, }, public, Collection, <, Reference, >, getReferences, (, ), {]
[,, ref, ), ;, }, public, Collection, <, Reference, >, getReferences, (, ), {, return, getReferencesInternal, (, ), ., values]
[., callNode, ,, ref, ), ;, }, public, Collection, <, Reference, >, getReferences, (, ), {, return, getReferencesInternal, (, )]
[), ;, }, public, Collection, <, Reference, >, getReferences, (, ), {, return, getReferencesInternal, (, ), ., values, (, )]
[;, }, public, Reference, getReference, (, Node, n, ), {, return, getReferencesInternal, (, ), ., get, (, n, ), ;]
[., values, (, ), ;, }, public, Reference, getReference, (, Node, n, ), {, return, getReferencesInternal, (, ), ., get]
[;, }, public, Set, <, String, >, getNamesToAlias, (, ), {, if, (, namesToAlias, ==, null, ), {, return, Collections]
[., get, (, n, ), ;, }, public, Set, <, String, >, getNamesToAlias, (, ), {, if, (, namesToAlias, ==]
[), ;, }, public, Set, <, String, >, getNamesToAlias, (, ), {, if, (, namesToAlias, ==, null, ), {, return]
[), {, return, Collections, ., emptySet, (, ), ;, }, return, Collections, ., unmodifiableSet, (, namesToAlias, ), ;, }, public]
[==, null, ), {, return, Collections, ., emptySet, (, ), ;, }, return, Collections, ., unmodifiableSet, (, namesToAlias, ), ;]
[), {, return, Collections, ., emptySet, (, ), ;, }, return, Collections, ., unmodifiableSet, (, namesToAlias, ), ;, }, public]
[;, }, return, Collections, ., unmodifiableSet, (, namesToAlias, ), ;, }, public, void, setNamesToAlias, (, Set, <, String, >, names]
[., emptySet, (, ), ;, }, return, Collections, ., unmodifiableSet, (, namesToAlias, ), ;, }, public, void, setNamesToAlias, (, Set]
[;, }, public, void, setNamesToAlias, (, Set, <, String, >, names, ), {, namesToAlias, =, names, ;, }, public, void]
[., unmodifiableSet, (, namesToAlias, ), ;, }, public, void, setNamesToAlias, (, Set, <, String, >, names, ), {, namesToAlias, =]
[), ;, }, public, void, setNamesToAlias, (, Set, <, String, >, names, ), {, namesToAlias, =, names, ;, }, public]
[=, names, ;, }, public, void, setModule, (, JSModule, module, ), {, this, ., module, =, module, ;, }, public]
[;, }, public, void, setModule, (, JSModule, module, ), {, this, ., module, =, module, ;, }, public, JSModule, getModule]
[=, module, ;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, }, private, static, interface, Function, {]
[., module, =, module, ;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, }, private, static, interface]
[;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, }, private, static, interface, Function, {, public, String]
[;, }, }, private, static, interface, Function, {, public, String, getName, (, ), ;, public, Node, getFunctionNode, (, ), ;]
[=, fn, ;, }, @, Override, public, String, getName, (, ), {, return, fn, ., getFirstChild, (, ), ., getString]
[., fn, =, fn, ;, }, @, Override, public, String, getName, (, ), {, return, fn, ., getFirstChild, (, )]
[;, }, @, Override, public, String, getName, (, ), {, return, fn, ., getFirstChild, (, ), ., getString, (, )]
[;, }, @, Override, public, Node, getFunctionNode, (, ), {, return, fn, ;, }, @, Override, public, void, remove, (]
[., getString, (, ), ;, }, @, Override, public, Node, getFunctionNode, (, ), {, return, fn, ;, }, @, Override]
[., getFirstChild, (, ), ., getString, (, ), ;, }, @, Override, public, Node, getFunctionNode, (, ), {, return, fn]
[;, }, @, Override, public, void, remove, (, ), {, NodeUtil, ., removeChild, (, fn, ., getParent, (, ), ,]
[;, }, @, Override, public, Node, getDeclaringBlock, (, ), {, return, fn, ., getParent, (, ), ;, }, }, private]
[., removeChild, (, fn, ., getParent, (, ), ,, fn, ), ;, }, @, Override, public, Node, getDeclaringBlock, (, )]
[,, fn, ), ;, }, @, Override, public, Node, getDeclaringBlock, (, ), {, return, fn, ., getParent, (, ), ;]
[., getParent, (, ), ,, fn, ), ;, }, @, Override, public, Node, getDeclaringBlock, (, ), {, return, fn, .]
[), ;, }, @, Override, public, Node, getDeclaringBlock, (, ), {, return, fn, ., getParent, (, ), ;, }, }]
[;, }, }, private, static, class, FunctionVar, implements, Function, {, private, final, Node, var, ;, public, FunctionVar, (, Node, var]
[., getParent, (, ), ;, }, }, private, static, class, FunctionVar, implements, Function, {, private, final, Node, var, ;, public]
[=, var, ;, }, @, Override, public, String, getName, (, ), {, return, var, ., getFirstChild, (, ), ., getString]
[., var, =, var, ;, }, @, Override, public, String, getName, (, ), {, return, var, ., getFirstChild, (, )]
[;, }, @, Override, public, String, getName, (, ), {, return, var, ., getFirstChild, (, ), ., getString, (, )]
[;, }, @, Override, public, Node, getFunctionNode, (, ), {, return, var, ., getFirstChild, (, ), ., getFirstChild, (, )]
[., getString, (, ), ;, }, @, Override, public, Node, getFunctionNode, (, ), {, return, var, ., getFirstChild, (, )]
[., getFirstChild, (, ), ., getString, (, ), ;, }, @, Override, public, Node, getFunctionNode, (, ), {, return, var]
[;, }, @, Override, public, void, remove, (, ), {, NodeUtil, ., removeChild, (, var, ., getParent, (, ), ,]
[., getFirstChild, (, ), ;, }, @, Override, public, void, remove, (, ), {, NodeUtil, ., removeChild, (, var, .]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, @, Override, public, void, remove, (, ), {, NodeUtil, .]
[;, }, @, Override, public, Node, getDeclaringBlock, (, ), {, return, var, ., getParent, (, ), ;, }, }, private]
[., removeChild, (, var, ., getParent, (, ), ,, var, ), ;, }, @, Override, public, Node, getDeclaringBlock, (, )]
[,, var, ), ;, }, @, Override, public, Node, getDeclaringBlock, (, ), {, return, var, ., getParent, (, ), ;]
[., getParent, (, ), ,, var, ), ;, }, @, Override, public, Node, getDeclaringBlock, (, ), {, return, var, .]
[), ;, }, @, Override, public, Node, getDeclaringBlock, (, ), {, return, var, ., getParent, (, ), ;, }, }]
[;, }, }, private, static, class, FunctionExpression, implements, Function, {, private, final, Node, fn, ;, private, final, String, fakeName, ;]
[., getParent, (, ), ;, }, }, private, static, class, FunctionExpression, implements, Function, {, private, final, Node, fn, ;, private]
[=, fn, ;, this, ., fakeName, =, String, ., valueOf, (, index, ), ;, }, @, Override, public, String, getName]
[., fn, =, fn, ;, this, ., fakeName, =, String, ., valueOf, (, index, ), ;, }, @, Override, public]
[;, this, ., fakeName, =, String, ., valueOf, (, index, ), ;, }, @, Override, public, String, getName, (, )]
[=, String, ., valueOf, (, index, ), ;, }, @, Override, public, String, getName, (, ), {, return, fakeName, ;]
[., fakeName, =, String, ., valueOf, (, index, ), ;, }, @, Override, public, String, getName, (, ), {, return]
[;, }, @, Override, public, String, getName, (, ), {, return, fakeName, ;, }, @, Override, public, Node, getFunctionNode, (]
[., valueOf, (, index, ), ;, }, @, Override, public, String, getName, (, ), {, return, fakeName, ;, }, @]
[), ;, }, @, Override, public, String, getName, (, ), {, return, fakeName, ;, }, @, Override, public, Node, getFunctionNode]
[;, }, @, Override, public, Node, getFunctionNode, (, ), {, return, fn, ;, }, @, Override, public, void, remove, (]
[;, }, @, Override, public, void, remove, (, ), {, }, @, Override, public, Node, getDeclaringBlock, (, ), {, return]
[;, }, }, class, Reference, extends, FunctionInjector, ., Reference, {, final, boolean, requiresDecomposition, ;, boolean, inlined, =, false, ;, Reference]
[;, Reference, (, Node, callNode, ,, JSModule, module, ,, InliningMode, mode, ,, boolean, decompose, ), {, super, (, callNode, ,]
[,, module, ,, mode, ), ;, this, ., requiresDecomposition, =, decompose, ;, }, }, }]
[,, mode, ), ;, this, ., requiresDecomposition, =, decompose, ;, }, }, }]
[), ;, this, ., requiresDecomposition, =, decompose, ;, }, }, }]
[=, decompose, ;, }, }, }]
[., requiresDecomposition, =, decompose, ;, }, }, }]
[;, }, }, }]
