[;, private, double, data, [, ], [, ], ;, public, Array2DRowRealMatrix, (, ), {, }, public, Array2DRowRealMatrix, (, final, int]
[;, private, double, data, [, ], [, ], ;, public, Array2DRowRealMatrix, (, ), {, }, public, Array2DRowRealMatrix, (, final, int]
[,, columnDimension, ), ;, data, =, new, double, [, rowDimension, ], [, columnDimension, ], ;, }, public, Array2DRowRealMatrix, (, final]
[), ;, data, =, new, double, [, rowDimension, ], [, columnDimension, ], ;, }, public, Array2DRowRealMatrix, (, final, double, []
[=, new, double, [, rowDimension, ], [, columnDimension, ], ;, }, public, Array2DRowRealMatrix, (, final, double, [, ], [, ]]
[;, }, public, Array2DRowRealMatrix, (, final, double, [, ], [, ], d, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {]
[], [, columnDimension, ], ;, }, public, Array2DRowRealMatrix, (, final, double, [, ], [, ], d, ), throws, DimensionMismatchException, ,]
[], ;, }, public, Array2DRowRealMatrix, (, final, double, [, ], [, ], d, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException]
[;, }, public, Array2DRowRealMatrix, (, final, double, [, ], [, ], d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,]
[), ;, }, public, Array2DRowRealMatrix, (, final, double, [, ], [, ], d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException]
[), {, copyIn, (, d, ), ;, }, else, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException]
[;, }, else, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int]
[), ;, }, else, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, d, ., length, ;, if, (, nRows]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, d, ., length, ;, if]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, d, ., length, ;, if, (, nRows]
[;, }, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException]
[;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int]
[., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ]]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, []
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ]]
[;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {]
[), ;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==, 0, )]
[., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==]
[;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (]
[., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }]
[[, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN]
[], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r]
[;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (, d]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (]
[., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {]
[;, r, <, nRows, ;, r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, )]
[;, r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[<, nRows, ;, r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw]
[;, r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, d, []
[++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, d]
[), {, throw, new, DimensionMismatchException, (, d, [, r, ], ., length, ,, nCols, ), ;, }, }, data, =]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, d, [, r, ], ., length, ,, nCols, ), ;, }, }]
[., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, d, [, r, ], ., length, ,, nCols, ), ;]
[[, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, d, [, r, ], ., length, ,]
[], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, d, [, r, ], ., length, ,, nCols, )]
[), {, throw, new, DimensionMismatchException, (, d, [, r, ], ., length, ,, nCols, ), ;, }, }, data, =]
[;, }, }, data, =, d, ;, }, }, public, Array2DRowRealMatrix, (, final, double, [, ], v, ), {, final]
[,, nCols, ), ;, }, }, data, =, d, ;, }, }, public, Array2DRowRealMatrix, (, final, double, [, ], v]
[., length, ,, nCols, ), ;, }, }, data, =, d, ;, }, }, public, Array2DRowRealMatrix, (, final, double, []
[[, r, ], ., length, ,, nCols, ), ;, }, }, data, =, d, ;, }, }, public, Array2DRowRealMatrix, (]
[], ., length, ,, nCols, ), ;, }, }, data, =, d, ;, }, }, public, Array2DRowRealMatrix, (, final, double]
[), ;, }, }, data, =, d, ;, }, }, public, Array2DRowRealMatrix, (, final, double, [, ], v, ), {]
[=, d, ;, }, }, public, Array2DRowRealMatrix, (, final, double, [, ], v, ), {, final, int, nRows, =, v]
[;, }, }, public, Array2DRowRealMatrix, (, final, double, [, ], v, ), {, final, int, nRows, =, v, ., length]
[;, data, =, new, double, [, nRows, ], [, 1, ], ;, for, (, int, row, =, 0, ;, row]
[., length, ;, data, =, new, double, [, nRows, ], [, 1, ], ;, for, (, int, row, =, 0]
[=, new, double, [, nRows, ], [, 1, ], ;, for, (, int, row, =, 0, ;, row, <, nRows]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row, ]]
[], [, 1, ], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {]
[], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row]
[;, row, <, nRows, ;, row, ++, ), {, data, [, row, ], [, 0, ], =, v, [, row]
[;, row, ++, ), {, data, [, row, ], [, 0, ], =, v, [, row, ], ;, }, }]
[<, nRows, ;, row, ++, ), {, data, [, row, ], [, 0, ], =, v, [, row, ], ;]
[;, row, ++, ), {, data, [, row, ], [, 0, ], =, v, [, row, ], ;, }, }]
[), {, data, [, row, ], [, 0, ], =, v, [, row, ], ;, }, }, @, Override, public]
[++, ), {, data, [, row, ], [, 0, ], =, v, [, row, ], ;, }, }, @, Override]
[=, v, [, row, ], ;, }, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int]
[[, 0, ], =, v, [, row, ], ;, }, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension]
[[, row, ], [, 0, ], =, v, [, row, ], ;, }, }, @, Override, public, RealMatrix, createMatrix, (]
[], [, 0, ], =, v, [, row, ], ;, }, }, @, Override, public, RealMatrix, createMatrix, (, final, int]
[], =, v, [, row, ], ;, }, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final]
[;, }, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {]
[[, row, ], ;, }, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, )]
[], ;, }, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException]
[;, }, @, Override, public, RealMatrix, copy, (, ), {, return, new, Array2DRowRealMatrix, (, copyOut, (, ), ,, false, )]
[,, columnDimension, ), ;, }, @, Override, public, RealMatrix, copy, (, ), {, return, new, Array2DRowRealMatrix, (, copyOut, (, )]
[), ;, }, @, Override, public, RealMatrix, copy, (, ), {, return, new, Array2DRowRealMatrix, (, copyOut, (, ), ,, false]
[;, }, public, Array2DRowRealMatrix, add, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m]
[,, false, ), ;, }, public, Array2DRowRealMatrix, add, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (]
[), ;, }, public, Array2DRowRealMatrix, add, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,]
[;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, double, []
[., checkAdditionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;]
[), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, double]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =, new, double, []
[;, final, double, [, ], [, ], outData, =, new, double, [, rowCount, ], [, columnCount, ], ;, for, (]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, double, [, ]]
[], [, columnCount, ], ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {]
[], ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, double, []
[;, row, <, rowCount, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;]
[;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ]]
[<, rowCount, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double]
[;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ]]
[), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =, m]
[++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =]
[;, final, double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, [, ], outDataRow, =]
[[, row, ], ;, final, double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, []
[], ;, final, double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, [, ], outDataRow]
[;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col]
[[, row, ], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =]
[., data, [, row, ], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int]
[], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ]]
[[, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow]
[], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col]
[;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], +, mRow]
[;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], +, mRow, [, col, ], ;]
[<, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], +, mRow, [, col]
[;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], +, mRow, [, col, ], ;]
[), {, outDataRow, [, col, ], =, dataRow, [, col, ], +, mRow, [, col, ], ;, }, }, return]
[++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], +, mRow, [, col, ], ;, }, }]
[=, dataRow, [, col, ], +, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false]
[[, col, ], =, dataRow, [, col, ], +, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (]
[], =, dataRow, [, col, ], +, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,]
[;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, subtract, (, final, Array2DRowRealMatrix, m]
[+, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix]
[[, col, ], +, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;]
[], +, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public]
[;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, subtract, (, final, Array2DRowRealMatrix, m]
[[, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, subtract, (]
[], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, subtract, (, final, Array2DRowRealMatrix]
[;, }, public, Array2DRowRealMatrix, subtract, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (, this, ,, m]
[,, false, ), ;, }, public, Array2DRowRealMatrix, subtract, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (]
[), ;, }, public, Array2DRowRealMatrix, subtract, (, final, Array2DRowRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (, this, ,]
[;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, double, []
[., checkSubtractionCompatible, (, this, ,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[,, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;]
[), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, double]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =, new, double, []
[;, final, double, [, ], [, ], outData, =, new, double, [, rowCount, ], [, columnCount, ], ;, for, (]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, double, [, ]]
[], [, columnCount, ], ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {]
[], ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, double, []
[;, row, <, rowCount, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;]
[;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ]]
[<, rowCount, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double]
[;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ]]
[), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =, m]
[++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, final, double, [, ], mRow, =]
[;, final, double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, [, ], outDataRow, =]
[[, row, ], ;, final, double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, []
[], ;, final, double, [, ], mRow, =, m, ., data, [, row, ], ;, final, double, [, ], outDataRow]
[;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col]
[[, row, ], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =]
[., data, [, row, ], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int]
[], ;, final, double, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ]]
[[, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow]
[], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col]
[;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], -, mRow]
[;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], -, mRow, [, col, ], ;]
[<, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], -, mRow, [, col]
[;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], -, mRow, [, col, ], ;]
[), {, outDataRow, [, col, ], =, dataRow, [, col, ], -, mRow, [, col, ], ;, }, }, return]
[++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], -, mRow, [, col, ], ;, }, }]
[=, dataRow, [, col, ], -, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false]
[[, col, ], =, dataRow, [, col, ], -, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (]
[], =, dataRow, [, col, ], -, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,]
[;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, multiply, (, final, Array2DRowRealMatrix, m]
[-, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix]
[[, col, ], -, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;]
[], -, mRow, [, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public]
[;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, multiply, (, final, Array2DRowRealMatrix, m]
[[, col, ], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, multiply, (]
[], ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, public, Array2DRowRealMatrix, multiply, (, final, Array2DRowRealMatrix]
[;, }, public, Array2DRowRealMatrix, multiply, (, final, Array2DRowRealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m]
[,, false, ), ;, }, public, Array2DRowRealMatrix, multiply, (, final, Array2DRowRealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (]
[), ;, }, public, Array2DRowRealMatrix, multiply, (, final, Array2DRowRealMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,]
[;, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, )]
[., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int]
[,, m, ), ;, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =, m, .]
[), ;, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (]
[;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =, this, ., getColumnDimension, (, )]
[., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =, this]
[;, final, int, nSum, =, this, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =, new]
[., getColumnDimension, (, ), ;, final, int, nSum, =, this, ., getColumnDimension, (, ), ;, final, double, [, ], []
[;, final, double, [, ], [, ], outData, =, new, double, [, nRows, ], [, nCols, ], ;, final, double]
[., getColumnDimension, (, ), ;, final, double, [, ], [, ], outData, =, new, double, [, nRows, ], [, nCols]
[;, final, double, [, ], mCol, =, new, double, [, nSum, ], ;, final, double, [, ], [, ], mData]
[], [, nCols, ], ;, final, double, [, ], mCol, =, new, double, [, nSum, ], ;, final, double, []
[], ;, final, double, [, ], mCol, =, new, double, [, nSum, ], ;, final, double, [, ], [, ]]
[;, final, double, [, ], [, ], mData, =, m, ., data, ;, for, (, int, col, =, 0, ;]
[], ;, final, double, [, ], [, ], mData, =, m, ., data, ;, for, (, int, col, =, 0]
[;, for, (, int, col, =, 0, ;, col, <, nCols, ;, col, ++, ), {, for, (, int, mRow]
[., data, ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, col, ++, ), {, for, (]
[;, col, <, nCols, ;, col, ++, ), {, for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;]
[;, col, ++, ), {, for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++, ), {]
[<, nCols, ;, col, ++, ), {, for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++]
[;, col, ++, ), {, for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++, ), {]
[), {, for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++, ), {, mCol, [, mRow]
[++, ), {, for, (, int, mRow, =, 0, ;, mRow, <, nSum, ;, mRow, ++, ), {, mCol, []
[;, mRow, <, nSum, ;, mRow, ++, ), {, mCol, [, mRow, ], =, mData, [, mRow, ], [, col]
[;, mRow, ++, ), {, mCol, [, mRow, ], =, mData, [, mRow, ], [, col, ], ;, }, for]
[<, nSum, ;, mRow, ++, ), {, mCol, [, mRow, ], =, mData, [, mRow, ], [, col, ], ;]
[;, mRow, ++, ), {, mCol, [, mRow, ], =, mData, [, mRow, ], [, col, ], ;, }, for]
[), {, mCol, [, mRow, ], =, mData, [, mRow, ], [, col, ], ;, }, for, (, int, row]
[++, ), {, mCol, [, mRow, ], =, mData, [, mRow, ], [, col, ], ;, }, for, (, int]
[=, mData, [, mRow, ], [, col, ], ;, }, for, (, int, row, =, 0, ;, row, <, nRows]
[[, mRow, ], =, mData, [, mRow, ], [, col, ], ;, }, for, (, int, row, =, 0, ;]
[], =, mData, [, mRow, ], [, col, ], ;, }, for, (, int, row, =, 0, ;, row, <]
[;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, double, []
[[, col, ], ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {]
[[, mRow, ], [, col, ], ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, row]
[], [, col, ], ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, )]
[], ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, double]
[;, row, <, nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;]
[;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =, 0]
[<, nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum]
[;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =, 0]
[), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =, 0, ;, for, (]
[++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =, 0, ;, for]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, )]
[[, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;]
[], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, +=, dataRow, []
[;, i, <, nSum, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, mCol, [, i, ]]
[;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, mCol, [, i, ], ;, }, outData, []
[<, nSum, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, mCol, [, i, ], ;, }]
[;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, mCol, [, i, ], ;, }, outData, []
[), {, sum, +=, dataRow, [, i, ], *, mCol, [, i, ], ;, }, outData, [, row, ], []
[++, ), {, sum, +=, dataRow, [, i, ], *, mCol, [, i, ], ;, }, outData, [, row, ]]
[+=, dataRow, [, i, ], *, mCol, [, i, ], ;, }, outData, [, row, ], [, col, ], =]
[;, }, outData, [, row, ], [, col, ], =, sum, ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,]
[*, mCol, [, i, ], ;, }, outData, [, row, ], [, col, ], =, sum, ;, }, }, return]
[[, i, ], *, mCol, [, i, ], ;, }, outData, [, row, ], [, col, ], =, sum, ;]
[], *, mCol, [, i, ], ;, }, outData, [, row, ], [, col, ], =, sum, ;, }, }]
[;, }, outData, [, row, ], [, col, ], =, sum, ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,]
[[, i, ], ;, }, outData, [, row, ], [, col, ], =, sum, ;, }, }, return, new, Array2DRowRealMatrix]
[], ;, }, outData, [, row, ], [, col, ], =, sum, ;, }, }, return, new, Array2DRowRealMatrix, (, outData]
[=, sum, ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, @, Override, public, double, []
[[, col, ], =, sum, ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, @, Override]
[[, row, ], [, col, ], =, sum, ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;]
[], [, col, ], =, sum, ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, @]
[], =, sum, ;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, @, Override, public, double]
[;, }, }, return, new, Array2DRowRealMatrix, (, outData, ,, false, ), ;, }, @, Override, public, double, [, ], []
[;, }, @, Override, public, double, [, ], [, ], getData, (, ), {, return, copyOut, (, ), ;, }]
[,, false, ), ;, }, @, Override, public, double, [, ], [, ], getData, (, ), {, return, copyOut, (]
[), ;, }, @, Override, public, double, [, ], [, ], getData, (, ), {, return, copyOut, (, ), ;]
[;, }, public, double, [, ], [, ], getDataRef, (, ), {, return, data, ;, }, @, Override, public, void]
[;, }, @, Override, public, void, setSubMatrix, (, final, double, [, ], [, ], subMatrix, ,, final, int, row, ,]
[), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;]
[==, null, ), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row]
[), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, )]
[>, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, )]
[;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;]
[,, row, ), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,]
[., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, .]
[), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, )]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, MathUtils, ., checkNotNull, (, subMatrix, )]
[>, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, MathUtils, ., checkNotNull, (]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, MathUtils, ., checkNotNull, (, subMatrix, )]
[;, }, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows]
[,, column, ), ;, }, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;]
[., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, .]
[), ;, }, MathUtils, ., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (]
[;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[., checkNotNull, (, subMatrix, ), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, )]
[), ;, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException]
[;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int]
[., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ]]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, []
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ]]
[;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {]
[), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, )]
[., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==]
[;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =]
[., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }]
[[, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN]
[], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, new, double, [, subMatrix, ., length]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, new, double, [, subMatrix]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, new, double, [, subMatrix, ., length]
[;, }, data, =, new, double, [, subMatrix, ., length, ], [, nCols, ], ;, for, (, int, i, =]
[), ;, }, data, =, new, double, [, subMatrix, ., length, ], [, nCols, ], ;, for, (, int, i]
[., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, new, double, [, subMatrix, ., length, ], [, nCols, ], ;, for, (]
[=, new, double, [, subMatrix, ., length, ], [, nCols, ], ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[], [, nCols, ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i]
[., length, ], [, nCols, ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if]
[;, i, <, data, ., length, ;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=]
[;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[<, data, ., length, ;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, )]
[;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[., length, ;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw]
[), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, subMatrix, []
[), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, subMatrix, []
[), {, throw, new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,, nCols, ), ;, }, System, ., arraycopy]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,, nCols, ), ;, }, System]
[., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,, nCols, ), ;]
[[, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,]
[], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,, nCols, )]
[), {, throw, new, DimensionMismatchException, (, subMatrix, [, i, ], ., length, ,, nCols, ), ;, }, System, ., arraycopy]
[;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +, row, ], ,]
[,, nCols, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +]
[., length, ,, nCols, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, []
[[, i, ], ., length, ,, nCols, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0]
[], ., length, ,, nCols, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data]
[), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +, row, ]]
[;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column, ), ;, }, }, @, Override]
[., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols]
[,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super]
[[, i, ], ,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }]
[], ,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {]
[,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix]
[,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column, )]
[[, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix]
[], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column]
[+, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row]
[], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column]
[,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column, ), ;, }]
[), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,, column, ), ;, }, }, @]
[;, }, }, @, Override, public, double, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {]
[., setSubMatrix, (, subMatrix, ,, row, ,, column, ), ;, }, }, @, Override, public, double, getEntry, (, final, int]
[,, row, ,, column, ), ;, }, }, @, Override, public, double, getEntry, (, final, int, row, ,, final, int]
[,, column, ), ;, }, }, @, Override, public, double, getEntry, (, final, int, row, ,, final, int, column, )]
[), ;, }, }, @, Override, public, double, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException]
[;, return, data, [, row, ], [, column, ], ;, }, @, Override, public, void, setEntry, (, final, int, row]
[., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return, data, [, row, ], [, column, ], ;, }]
[,, row, ,, column, ), ;, return, data, [, row, ], [, column, ], ;, }, @, Override, public, void]
[,, column, ), ;, return, data, [, row, ], [, column, ], ;, }, @, Override, public, void, setEntry, (]
[), ;, return, data, [, row, ], [, column, ], ;, }, @, Override, public, void, setEntry, (, final, int]
[;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, double, value, )]
[[, column, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final]
[[, row, ], [, column, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int]
[], [, column, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,]
[], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, double, value]
[;, data, [, row, ], [, column, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int]
[., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, [, row, ], [, column, ], =, value, ;]
[,, row, ,, column, ), ;, data, [, row, ], [, column, ], =, value, ;, }, @, Override, public]
[,, column, ), ;, data, [, row, ], [, column, ], =, value, ;, }, @, Override, public, void, addToEntry]
[), ;, data, [, row, ], [, column, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final]
[=, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, double]
[[, column, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column]
[[, row, ], [, column, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,]
[], [, column, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int]
[], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final]
[;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, double, increment, )]
[;, data, [, row, ], [, column, ], +=, increment, ;, }, @, Override, public, void, multiplyEntry, (, final, int]
[., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, [, row, ], [, column, ], +=, increment, ;]
[,, row, ,, column, ), ;, data, [, row, ], [, column, ], +=, increment, ;, }, @, Override, public]
[,, column, ), ;, data, [, row, ], [, column, ], +=, increment, ;, }, @, Override, public, void, multiplyEntry]
[), ;, data, [, row, ], [, column, ], +=, increment, ;, }, @, Override, public, void, multiplyEntry, (, final]
[+=, increment, ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, double]
[[, column, ], +=, increment, ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column]
[[, row, ], [, column, ], +=, increment, ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,]
[], [, column, ], +=, increment, ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int]
[], +=, increment, ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final]
[;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, double, factor, )]
[;, data, [, row, ], [, column, ], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {]
[., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, data, [, row, ], [, column, ], *=, factor, ;]
[,, row, ,, column, ), ;, data, [, row, ], [, column, ], *=, factor, ;, }, @, Override, public]
[,, column, ), ;, data, [, row, ], [, column, ], *=, factor, ;, }, @, Override, public, int, getRowDimension]
[), ;, data, [, row, ], [, column, ], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, )]
[*=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null, ), ?, 0]
[[, column, ], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null]
[[, row, ], [, column, ], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (]
[], [, column, ], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==]
[], *=, factor, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null, ), ?]
[;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null, ), ?, 0, :, data]
[;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (, data]
[?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data]
[), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (]
[==, null, ), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (]
[:, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null]
[;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (, data]
[., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||]
[;, }, @, Override, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, final]
[?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, double, [, ], operate, (, final]
[), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, double, [, ], operate, (]
[||, (, data, [, 0, ], ==, null, ), ), ?, 0, :, data, [, 0, ], ., length, ;]
[), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :, data, [, 0, ], ., length]
[==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :, data, [, 0, ]]
[), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :, data, [, 0, ], ., length]
[), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, double, [, ], operate, (]
[), ), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, double, [, ], operate]
[==, null, ), ), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, double, []
[[, 0, ], ==, null, ), ), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override]
[], ==, null, ), ), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, double]
[), ), ?, 0, :, data, [, 0, ], ., length, ;, }, @, Override, public, double, [, ], operate]
[:, data, [, 0, ], ., length, ;, }, @, Override, public, double, [, ], operate, (, final, double, []
[;, }, @, Override, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, final]
[., length, ;, }, @, Override, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException]
[[, 0, ], ., length, ;, }, @, Override, public, double, [, ], operate, (, final, double, [, ], v]
[], ., length, ;, }, @, Override, public, double, [, ], operate, (, final, double, [, ], v, ), throws]
[;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {]
[., getRowDimension, (, ), ;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (, v, ., length]
[;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, )]
[., getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, .]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double, [, ], out, =]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double, [, ]]
[., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, double, [, ], out, =]
[;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =, 0]
[,, nCols, ), ;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int]
[., length, ,, nCols, ), ;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for]
[), ;, }, final, double, [, ], out, =, new, double, [, nRows, ], ;, for, (, int, row, =]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, double, [, ]]
[], ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, double, []
[;, row, <, nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;]
[;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =, 0]
[<, nRows, ;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum]
[;, row, ++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =, 0]
[), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =, 0, ;, for, (]
[++, ), {, final, double, [, ], dataRow, =, data, [, row, ], ;, double, sum, =, 0, ;, for]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, )]
[[, row, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, +=, dataRow, []
[;, i, <, nCols, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, v, [, i, ]]
[;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, v, [, i, ], ;, }, out, []
[<, nCols, ;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, v, [, i, ], ;, }]
[;, i, ++, ), {, sum, +=, dataRow, [, i, ], *, v, [, i, ], ;, }, out, []
[), {, sum, +=, dataRow, [, i, ], *, v, [, i, ], ;, }, out, [, row, ], =]
[++, ), {, sum, +=, dataRow, [, i, ], *, v, [, i, ], ;, }, out, [, row, ]]
[+=, dataRow, [, i, ], *, v, [, i, ], ;, }, out, [, row, ], =, sum, ;, }]
[;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, double, [, ]]
[*, v, [, i, ], ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @]
[[, i, ], *, v, [, i, ], ;, }, out, [, row, ], =, sum, ;, }, return, out]
[], *, v, [, i, ], ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }]
[;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, double, [, ]]
[[, i, ], ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public]
[], ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, double, []
[=, sum, ;, }, return, out, ;, }, @, Override, public, double, [, ], preMultiply, (, final, double, [, ]]
[[, row, ], =, sum, ;, }, return, out, ;, }, @, Override, public, double, [, ], preMultiply, (, final]
[], =, sum, ;, }, return, out, ;, }, @, Override, public, double, [, ], preMultiply, (, final, double, []
[;, }, return, out, ;, }, @, Override, public, double, [, ], preMultiply, (, final, double, [, ], v, )]
[;, }, @, Override, public, double, [, ], preMultiply, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, final]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new]
[;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, )]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double, [, ], out, =]
[!=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double, [, ]]
[., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, double, [, ], out, =]
[;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =, 0]
[,, nRows, ), ;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int]
[., length, ,, nRows, ), ;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for]
[), ;, }, final, double, [, ], out, =, new, double, [, nCols, ], ;, for, (, int, col, =]
[;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =, 0]
[], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, double, sum, =]
[;, col, <, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0]
[;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows]
[<, nCols, ;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i]
[;, ++, col, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, +=, data, []
[;, i, <, nRows, ;, ++, i, ), {, sum, +=, data, [, i, ], [, col, ], *, v]
[;, ++, i, ), {, sum, +=, data, [, i, ], [, col, ], *, v, [, i, ], ;]
[<, nRows, ;, ++, i, ), {, sum, +=, data, [, i, ], [, col, ], *, v, [, i]
[;, ++, i, ), {, sum, +=, data, [, i, ], [, col, ], *, v, [, i, ], ;]
[), {, sum, +=, data, [, i, ], [, col, ], *, v, [, i, ], ;, }, out, []
[), {, sum, +=, data, [, i, ], [, col, ], *, v, [, i, ], ;, }, out, []
[+=, data, [, i, ], [, col, ], *, v, [, i, ], ;, }, out, [, col, ], =]
[;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, @, Override, public, double, walkInRowOrder, (]
[*, v, [, i, ], ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, @]
[[, col, ], *, v, [, i, ], ;, }, out, [, col, ], =, sum, ;, }, return, out]
[[, i, ], [, col, ], *, v, [, i, ], ;, }, out, [, col, ], =, sum, ;]
[], [, col, ], *, v, [, i, ], ;, }, out, [, col, ], =, sum, ;, }, return]
[], *, v, [, i, ], ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }]
[;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, @, Override, public, double, walkInRowOrder, (]
[[, i, ], ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, @, Override, public]
[], ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, @, Override, public, double, walkInRowOrder]
[=, sum, ;, }, return, out, ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final]
[[, col, ], =, sum, ;, }, return, out, ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor]
[], =, sum, ;, }, return, out, ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ), {]
[;, }, return, out, ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows]
[;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, )]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, [, ]]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, )]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, []
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, []
[;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[<, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (]
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ]]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI]
[], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, [, j]
[;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[<, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[=, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, .]
[[, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }]
[], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final]
[;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, )]
[., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, [, ]]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, )]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, []
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, []
[;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[<, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (]
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor]
[], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit]
[;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j]
[;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }]
[<, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }]
[), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final]
[;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,]
[., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final, int, startRow, ,]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ]]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, )]
[,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final]
[), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, []
[;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[<=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (]
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ]]
[[, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI]
[], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j]
[;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[<=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[=, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, .]
[[, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }]
[], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final]
[;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,]
[., end, (, ), ;, }, @, Override, public, double, walkInRowOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ]]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, )]
[,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final]
[), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, []
[;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[<=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (]
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (]
[[, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor]
[], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit]
[;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j]
[;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }]
[<=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }]
[), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final]
[;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, )]
[., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ), {, final, int, rows]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, )]
[), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int]
[-, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for]
[), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int]
[;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[<, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, []
[), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, double, []
[;, i, <, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ]]
[<, rows, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, []
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ]]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, .]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, .]
[;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;]
[[, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j]
[], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[=, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, .]
[[, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }]
[], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final]
[;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows, =, getRowDimension, (, )]
[., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ), {, final, int, rows]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, )]
[), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int]
[-, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for]
[), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int]
[;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[<, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit]
[), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit]
[;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i]
[;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ]]
[<, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], []
[;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ]]
[), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }]
[), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor]
[., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor]
[,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, )]
[,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder]
[[, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override]
[], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final]
[;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,]
[., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixChangingVisitor, visitor, ,, final, int, startRow, ,]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, )]
[,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for]
[), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int]
[;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[<=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, []
[), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, double, []
[;, i, <=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ]]
[<=, endRow, ;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, []
[;, ++, i, ), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ]]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, .]
[), {, final, double, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, .]
[;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;]
[[, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j]
[], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], )]
[=, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, .]
[[, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }]
[], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor]
[., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (]
[,, j, ,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[,, rowI, [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final]
[;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,, final, int, endRow, ,]
[., end, (, ), ;, }, @, Override, public, double, walkInColumnOrder, (, final, RealMatrixPreservingVisitor, visitor, ,, final, int, startRow, ,]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[., checkSubMatrixIndex, (, this, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, )]
[,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for]
[), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int]
[;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[<=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit]
[), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit]
[;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i]
[;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ]]
[<=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], []
[;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ]]
[), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }]
[), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, private, double, [, ], [, ], copyOut, (, )]
[., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor]
[,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, )]
[,, data, [, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, private, double, [, ], [, ], copyOut, (]
[[, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, private, double, [, ], []
[[, i, ], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, private, double]
[], [, j, ], ), ;, }, }, return, visitor, ., end, (, ), ;, }, private, double, [, ]]
[], ), ;, }, }, return, visitor, ., end, (, ), ;, }, private, double, [, ], [, ], copyOut]
[;, }, private, double, [, ], [, ], copyOut, (, ), {, final, int, nRows, =, this, ., getRowDimension, (]
[., end, (, ), ;, }, private, double, [, ], [, ], copyOut, (, ), {, final, int, nRows, =]
[;, final, double, [, ], [, ], out, =, new, double, [, nRows, ], [, this, ., getColumnDimension, (, )]
[., getRowDimension, (, ), ;, final, double, [, ], [, ], out, =, new, double, [, nRows, ], [, this]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (]
[], [, this, ., getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy]
[., getColumnDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, )]
[;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,]
[;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ]]
[<, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, []
[;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ]]
[), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,]
[++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0]
[;, }, return, out, ;, }, private, void, copyIn, (, final, double, [, ], [, ], in, ), throws, DimensionMismatchException]
[., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,, data, [, i]
[,, 0, ,, out, [, i, ], ,, 0, ,, data, [, i, ], ., length, ), ;, }, return]
[[, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,, data, [, i, ], ., length, )]
[], ,, 0, ,, out, [, i, ], ,, 0, ,, data, [, i, ], ., length, ), ;, }]
[,, out, [, i, ], ,, 0, ,, data, [, i, ], ., length, ), ;, }, return, out, ;]
[,, 0, ,, data, [, i, ], ., length, ), ;, }, return, out, ;, }, private, void, copyIn, (]
[[, i, ], ,, 0, ,, data, [, i, ], ., length, ), ;, }, return, out, ;, }, private]
[], ,, 0, ,, data, [, i, ], ., length, ), ;, }, return, out, ;, }, private, void, copyIn]
[,, data, [, i, ], ., length, ), ;, }, return, out, ;, }, private, void, copyIn, (, final, double]
[), ;, }, return, out, ;, }, private, void, copyIn, (, final, double, [, ], [, ], in, ), throws]
[., length, ), ;, }, return, out, ;, }, private, void, copyIn, (, final, double, [, ], [, ], in]
[[, i, ], ., length, ), ;, }, return, out, ;, }, private, void, copyIn, (, final, double, [, ]]
[], ., length, ), ;, }, return, out, ;, }, private, void, copyIn, (, final, double, [, ], [, ]]
[;, }, private, void, copyIn, (, final, double, [, ], [, ], in, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException]
[;, }, }]
[,, 0, ,, 0, ), ;, }, }]
[,, 0, ), ;, }, }]
[), ;, }, }]
