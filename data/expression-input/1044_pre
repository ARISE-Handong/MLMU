[google, ., javascript, ., rhino, ., TokenStream, ;, class, NodeNameExtractor, {, private, final, char, delimiter, ;, private, int, nextUniqueInt, =]
[class, NodeNameExtractor, {, private, final, char, delimiter, ;, private, int, nextUniqueInt, =, 0, ;, NodeNameExtractor, (, char, delimiter, ), {]
[class, NodeNameExtractor, {, private, final, char, delimiter, ;, private, int, nextUniqueInt, =, 0, ;, NodeNameExtractor, (, char, delimiter, ), {]
[final, char, delimiter, ;, private, int, nextUniqueInt, =, 0, ;, NodeNameExtractor, (, char, delimiter, ), {, this, ., delimiter, =]
[char, delimiter, ), {, this, ., delimiter, =, delimiter, ;, }, String, getName, (, Node, node, ), {, switch, (]
[char, delimiter, ), {, this, ., delimiter, =, delimiter, ;, }, String, getName, (, Node, node, ), {, switch, (]
[delimiter, ;, }, String, getName, (, Node, node, ), {, switch, (, node, ., getType, (, ), ), {, case]
[delimiter, ;, }, String, getName, (, Node, node, ), {, switch, (, node, ., getType, (, ), ), {, case]
[node, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =]
[node, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =]
[getType, (, ), ), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =, node, ., getFirstChild, (, ), ;, return]
[getType, (, ), ), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =, node, ., getFirstChild, (, ), ;, return]
[., FUNCTION, :, Node, functionNameNode, =, node, ., getFirstChild, (, ), ;, return, functionNameNode, ., getString, (, ), ;, case]
[., FUNCTION, :, Node, functionNameNode, =, node, ., getFirstChild, (, ), ;, return, functionNameNode, ., getString, (, ), ;, case]
[., getFirstChild, (, ), ;, return, functionNameNode, ., getString, (, ), ;, case, Token, ., GETPROP, :, Node, lhsOfDot, =]
[., getFirstChild, (, ), ;, return, functionNameNode, ., getString, (, ), ;, case, Token, ., GETPROP, :, Node, lhsOfDot, =]
[(, ), ;, case, Token, ., GETPROP, :, Node, lhsOfDot, =, node, ., getFirstChild, (, ), ;, Node, rhsOfDot, =]
[(, ), ;, case, Token, ., GETPROP, :, Node, lhsOfDot, =, node, ., getFirstChild, (, ), ;, Node, rhsOfDot, =]
[lhsOfDot, =, node, ., getFirstChild, (, ), ;, Node, rhsOfDot, =, lhsOfDot, ., getNext, (, ), ;, String, lhsOfDotName, =]
[node, ., getFirstChild, (, ), ;, Node, rhsOfDot, =, lhsOfDot, ., getNext, (, ), ;, String, lhsOfDotName, =, getName, (]
[Node, rhsOfDot, =, lhsOfDot, ., getNext, (, ), ;, String, lhsOfDotName, =, getName, (, lhsOfDot, ), ;, String, rhsOfDotName, =]
[=, lhsOfDot, ., getNext, (, ), ;, String, lhsOfDotName, =, getName, (, lhsOfDot, ), ;, String, rhsOfDotName, =, getName, (]
[), ;, String, lhsOfDotName, =, getName, (, lhsOfDot, ), ;, String, rhsOfDotName, =, getName, (, rhsOfDot, ), ;, if, (]
[), ;, String, lhsOfDotName, =, getName, (, lhsOfDot, ), ;, String, rhsOfDotName, =, getName, (, rhsOfDot, ), ;, if, (]
[=, getName, (, lhsOfDot, ), ;, String, rhsOfDotName, =, getName, (, rhsOfDot, ), ;, if, (, "prototype", ., equals, (]
[;, String, rhsOfDotName, =, getName, (, rhsOfDot, ), ;, if, (, "prototype", ., equals, (, rhsOfDotName, ), ), {, return]
[;, String, rhsOfDotName, =, getName, (, rhsOfDot, ), ;, if, (, "prototype", ., equals, (, rhsOfDotName, ), ), {, return]
[rhsOfDotName, =, getName, (, rhsOfDot, ), ;, if, (, "prototype", ., equals, (, rhsOfDotName, ), ), {, return, lhsOfDotName, +]
[;, if, (, "prototype", ., equals, (, rhsOfDotName, ), ), {, return, lhsOfDotName, +, delimiter, ;, }, else, {, return]
[;, if, (, "prototype", ., equals, (, rhsOfDotName, ), ), {, return, lhsOfDotName, +, delimiter, ;, }, else, {, return]
[;, if, (, "prototype", ., equals, (, rhsOfDotName, ), ), {, return, lhsOfDotName, +, delimiter, ;, }, else, {, return]
[(, "prototype", ., equals, (, rhsOfDotName, ), ), {, return, lhsOfDotName, +, delimiter, ;, }, else, {, return, lhsOfDotName, +]
[., equals, (, rhsOfDotName, ), ), {, return, lhsOfDotName, +, delimiter, ;, }, else, {, return, lhsOfDotName, +, delimiter, +]
[), ), {, return, lhsOfDotName, +, delimiter, ;, }, else, {, return, lhsOfDotName, +, delimiter, +, rhsOfDotName, ;, }, case]
[), ), {, return, lhsOfDotName, +, delimiter, ;, }, else, {, return, lhsOfDotName, +, delimiter, +, rhsOfDotName, ;, }, case]
[;, }, else, {, return, lhsOfDotName, +, delimiter, +, rhsOfDotName, ;, }, case, Token, ., GETELEM, :, Node, outsideBrackets, =]
[;, }, else, {, return, lhsOfDotName, +, delimiter, +, rhsOfDotName, ;, }, case, Token, ., GETELEM, :, Node, outsideBrackets, =]
[rhsOfDotName, ;, }, case, Token, ., GETELEM, :, Node, outsideBrackets, =, node, ., getFirstChild, (, ), ;, Node, insideBrackets, =]
[rhsOfDotName, ;, }, case, Token, ., GETELEM, :, Node, outsideBrackets, =, node, ., getFirstChild, (, ), ;, Node, insideBrackets, =]
[outsideBrackets, =, node, ., getFirstChild, (, ), ;, Node, insideBrackets, =, outsideBrackets, ., getNext, (, ), ;, String, nameOutsideBrackets, =]
[node, ., getFirstChild, (, ), ;, Node, insideBrackets, =, outsideBrackets, ., getNext, (, ), ;, String, nameOutsideBrackets, =, getName, (]
[Node, insideBrackets, =, outsideBrackets, ., getNext, (, ), ;, String, nameOutsideBrackets, =, getName, (, outsideBrackets, ), ;, String, nameInsideBrackets, =]
[=, outsideBrackets, ., getNext, (, ), ;, String, nameOutsideBrackets, =, getName, (, outsideBrackets, ), ;, String, nameInsideBrackets, =, getName, (]
[), ;, String, nameOutsideBrackets, =, getName, (, outsideBrackets, ), ;, String, nameInsideBrackets, =, getName, (, insideBrackets, ), ;, if, (]
[), ;, String, nameOutsideBrackets, =, getName, (, outsideBrackets, ), ;, String, nameInsideBrackets, =, getName, (, insideBrackets, ), ;, if, (]
[=, getName, (, outsideBrackets, ), ;, String, nameInsideBrackets, =, getName, (, insideBrackets, ), ;, if, (, "prototype", ., equals, (]
[;, String, nameInsideBrackets, =, getName, (, insideBrackets, ), ;, if, (, "prototype", ., equals, (, nameInsideBrackets, ), ), {, return]
[;, String, nameInsideBrackets, =, getName, (, insideBrackets, ), ;, if, (, "prototype", ., equals, (, nameInsideBrackets, ), ), {, return]
[nameInsideBrackets, =, getName, (, insideBrackets, ), ;, if, (, "prototype", ., equals, (, nameInsideBrackets, ), ), {, return, nameOutsideBrackets, +]
[;, if, (, "prototype", ., equals, (, nameInsideBrackets, ), ), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {, return]
[;, if, (, "prototype", ., equals, (, nameInsideBrackets, ), ), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {, return]
[;, if, (, "prototype", ., equals, (, nameInsideBrackets, ), ), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {, return]
[(, "prototype", ., equals, (, nameInsideBrackets, ), ), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {, return, nameOutsideBrackets, +]
[., equals, (, nameInsideBrackets, ), ), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {, return, nameOutsideBrackets, +, delimiter, +]
[), ), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {, return, nameOutsideBrackets, +, delimiter, +, nameInsideBrackets, ;, }, case]
[), ), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {, return, nameOutsideBrackets, +, delimiter, +, nameInsideBrackets, ;, }, case]
[+, delimiter, ;, }, else, {, return, nameOutsideBrackets, +, delimiter, +, nameInsideBrackets, ;, }, case, Token, ., NAME, :, return]
[+, delimiter, ;, }, else, {, return, nameOutsideBrackets, +, delimiter, +, nameInsideBrackets, ;, }, case, Token, ., NAME, :, return]
[nameOutsideBrackets, +, delimiter, +, nameInsideBrackets, ;, }, case, Token, ., NAME, :, return, node, ., getString, (, ), ;, case]
[nameOutsideBrackets, +, delimiter, +, nameInsideBrackets, ;, }, case, Token, ., NAME, :, return, node, ., getString, (, ), ;, case]
[;, }, case, Token, ., NAME, :, return, node, ., getString, (, ), ;, case, Token, ., STRING, :, case]
[;, }, case, Token, ., NAME, :, return, node, ., getString, (, ), ;, case, Token, ., STRING, :, case]
[NAME, :, return, node, ., getString, (, ), ;, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return]
[NAME, :, return, node, ., getString, (, ), ;, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return]
[NAME, :, return, node, ., getString, (, ), ;, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return]
[., getString, (, ), ;, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return, TokenStream, ., isJSIdentifier, (]
[., getString, (, ), ;, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return, TokenStream, ., isJSIdentifier, (]
[., STRING, :, case, Token, ., STRING_KEY, :, return, TokenStream, ., isJSIdentifier, (, node, ., getString, (, ), ), ?]
[., STRING, :, case, Token, ., STRING_KEY, :, return, TokenStream, ., isJSIdentifier, (, node, ., getString, (, ), ), ?]
[STRING_KEY, :, return, TokenStream, ., isJSIdentifier, (, node, ., getString, (, ), ), ?, node, ., getString, (, ), :]
[:, return, TokenStream, ., isJSIdentifier, (, node, ., getString, (, ), ), ?, node, ., getString, (, ), :, (]
[:, return, TokenStream, ., isJSIdentifier, (, node, ., getString, (, ), ), ?, node, ., getString, (, ), :, (]
[TokenStream, ., isJSIdentifier, (, node, ., getString, (, ), ), ?, node, ., getString, (, ), :, (, "__", +]
[TokenStream, ., isJSIdentifier, (, node, ., getString, (, ), ), ?, node, ., getString, (, ), :, (, "__", +]
[., getString, (, ), ), ?, node, ., getString, (, ), :, (, "__", +, nextUniqueInt, ++, ), ;, case]
[., getString, (, ), ), ?, node, ., getString, (, ), :, (, "__", +, nextUniqueInt, ++, ), ;, case]
[?, node, ., getString, (, ), :, (, "__", +, nextUniqueInt, ++, ), ;, case, Token, ., NUMBER, :, return]
[?, node, ., getString, (, ), :, (, "__", +, nextUniqueInt, ++, ), ;, case, Token, ., NUMBER, :, return]
[(, ), :, (, "__", +, nextUniqueInt, ++, ), ;, case, Token, ., NUMBER, :, return, NodeUtil, ., getStringValue, (]
["__", +, nextUniqueInt, ++, ), ;, case, Token, ., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case]
["__", +, nextUniqueInt, ++, ), ;, case, Token, ., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case]
[;, case, Token, ., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case, Token, ., THIS, :, return]
[., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case, Token, ., THIS, :, return, "this", ;, case]
[., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case, Token, ., THIS, :, return, "this", ;, case]
[., getStringValue, (, node, ), ;, case, Token, ., THIS, :, return, "this", ;, case, Token, ., CALL, :, return]
[(, node, ), ;, case, Token, ., THIS, :, return, "this", ;, case, Token, ., CALL, :, return, getName, (]
[(, node, ), ;, case, Token, ., THIS, :, return, "this", ;, case, Token, ., CALL, :, return, getName, (]
[case, Token, ., CALL, :, return, getName, (, node, ., getFirstChild, (, ), ), ;, default, :, StringBuilder, sb, =]
[getFirstChild, (, ), ), ;, default, :, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, =]
[getFirstChild, (, ), ), ;, default, :, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, =]
[:, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, =, node, ., getFirstChild, (, ), ;]
[:, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, =, node, ., getFirstChild, (, ), ;]
[sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=]
[new, StringBuilder, (, ), ;, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;]
[(, ), ;, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[(, ), ;, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, sb, ., length, (, ), >]
[child, =, child, ., getNext, (, ), ), {, if, (, sb, ., length, (, ), >, 0, ), {]
[child, =, child, ., getNext, (, ), ), {, if, (, sb, ., length, (, ), >, 0, ), {]
[getNext, (, ), ), {, if, (, sb, ., length, (, ), >, 0, ), {, sb, ., append, (]
[{, if, (, sb, ., length, (, ), >, 0, ), {, sb, ., append, (, delimiter, ), ;, }]
[{, if, (, sb, ., length, (, ), >, 0, ), {, sb, ., append, (, delimiter, ), ;, }]
[., length, (, ), >, 0, ), {, sb, ., append, (, delimiter, ), ;, }, sb, ., append, (]
[(, ), >, 0, ), {, sb, ., append, (, delimiter, ), ;, }, sb, ., append, (, getName, (]
[sb, ., append, (, delimiter, ), ;, }, sb, ., append, (, getName, (, child, ), ), ;, }, return]
[sb, ., append, (, delimiter, ), ;, }, sb, ., append, (, getName, (, child, ), ), ;, }, return]
