[;, private, final, int, numberOfPoints, ;, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy]
[,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats]
[,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_POINTS]
[,, maximalIterationCount, ), ;, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_POINTS, ,, n]
[), ;, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_POINTS, ,, n, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_POINTS, ,, n, ), ;, }, numberOfPoints, =, n, ;, }, public]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_POINTS, ,, n, ), ;, }, numberOfPoints, =, n, ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_POINTS, ,, n, ), ;, }, numberOfPoints, =, n, ;, }, public]
[;, }, numberOfPoints, =, n, ;, }, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy, ,, final, double]
[,, n, ), ;, }, numberOfPoints, =, n, ;, }, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy]
[., NUMBER_OF_POINTS, ,, n, ), ;, }, numberOfPoints, =, n, ;, }, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final]
[), ;, }, numberOfPoints, =, n, ;, }, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy, ,, final]
[=, n, ;, }, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws]
[;, }, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, NotStrictlyPositiveException, {]
[,, relativeAccuracy, ,, absoluteAccuracy, ,, DEFAULT_MIN_ITERATIONS_COUNT, ,, DEFAULT_MAX_ITERATIONS_COUNT, ), ;, }, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, int]
[,, absoluteAccuracy, ,, DEFAULT_MIN_ITERATIONS_COUNT, ,, DEFAULT_MAX_ITERATIONS_COUNT, ), ;, }, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, int, minimalIterationCount, ,]
[,, DEFAULT_MIN_ITERATIONS_COUNT, ,, DEFAULT_MAX_ITERATIONS_COUNT, ), ;, }, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, int, minimalIterationCount, ,, final, int]
[,, DEFAULT_MAX_ITERATIONS_COUNT, ), ;, }, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, )]
[), ;, }, public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException]
[,, DEFAULT_RELATIVE_ACCURACY, ,, DEFAULT_ABSOLUTE_ACCURACY, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException]
[,, DEFAULT_ABSOLUTE_ACCURACY, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException]
[,, minimalIterationCount, ,, maximalIterationCount, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException]
[,, maximalIterationCount, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double]
[), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =]
[;, int, n, =, 2, ;, while, (, true, ), {, final, double, t, =, stage, (, n, ), ;]
[), ;, int, n, =, 2, ;, while, (, true, ), {, final, double, t, =, stage, (, n, )]
[;, while, (, true, ), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =, FastMath]
[), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =, FastMath, ., abs, (, t]
[;, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, .]
[), ;, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath]
[;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, .]
[., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,]
[), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath]
[-, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *]
[), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath]
[;, if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&, delta, <=, limit, ), {]
[., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath]
[,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), )]
[), ;, if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&, delta, <=, limit, )]
[*, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&, delta, <=]
[*, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;]
[*, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&, delta, <=]
[), *, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&, delta]
[+, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +]
[., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, iterations]
[), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, iterations, ., getCount, (, )]
[), *, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&, delta]
[., abs, (, t, ), ), *, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +, 1, >=]
[), ), *, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&]
[), ;, if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&, delta, <=, limit, )]
[), {, return, t, ;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (]
[&&, delta, <=, limit, ), {, return, t, ;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,]
[>=, getMinimalIterationCount, (, ), &&, delta, <=, limit, ), {, return, t, ;, }, final, double, ratio, =, FastMath, .]
[+, 1, >=, getMinimalIterationCount, (, ), &&, delta, <=, limit, ), {, return, t, ;, }, final, double, ratio, =]
[., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&, delta, <=, limit, ), {, return, t, ;, }]
[>=, getMinimalIterationCount, (, ), &&, delta, <=, limit, ), {, return, t, ;, }, final, double, ratio, =, FastMath, .]
[&&, delta, <=, limit, ), {, return, t, ;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,]
[), {, return, t, ;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (]
[<=, limit, ), {, return, t, ;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, .]
[), {, return, t, ;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (]
[;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,]
[;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, )]
[., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /, numberOfPoints, ), ), ;, n]
[,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /, numberOfPoints, ), ), ;, n, =, FastMath, ., max]
[), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1]
[., pow, (, delta, /, limit, ,, 0.5, /, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (, (]
[,, 0.5, /, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n]
[/, limit, ,, 0.5, /, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio]
[,, 0.5, /, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n]
[), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +]
[/, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,]
[), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +]
[=, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;, oldt]
[;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int, n]
[., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;, oldt, =, t]
[,, n, +, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double]
[,, n, +, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double]
[), ,, n, +, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private]
[*, n, ), ,, n, +, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }]
[), ,, n, +, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private]
[), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int]
[+, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (]
[), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int]
[=, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int, n, ), throws]
[;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {]
[;, }, }, private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {, final, UnivariateFunction, f, =, new, UnivariateFunction]
[., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {, final, UnivariateFunction]
[;, final, double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;, final, double, step]
[;, }, }, ;, final, double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;]
[), ;, }, }, ;, final, double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, )]
[;, final, double, max, =, getMax, (, ), ;, final, double, step, =, (, max, -, min, ), /, n]
[;, final, double, step, =, (, max, -, min, ), /, n, ;, double, sum, =, 0, ;, for, (]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[/, n, ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[), /, n, ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[-, min, ), /, n, ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), /, n, ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, a, =]
[;, i, <, n, ;, i, ++, ), {, final, double, a, =, min, +, i, *, step, ;, final]
[;, i, ++, ), {, final, double, a, =, min, +, i, *, step, ;, final, double, b, =, a]
[<, n, ;, i, ++, ), {, final, double, a, =, min, +, i, *, step, ;, final, double, b]
[;, i, ++, ), {, final, double, a, =, min, +, i, *, step, ;, final, double, b, =, a]
[), {, final, double, a, =, min, +, i, *, step, ;, final, double, b, =, a, +, step, ;]
[++, ), {, final, double, a, =, min, +, i, *, step, ;, final, double, b, =, a, +, step]
[;, final, double, b, =, a, +, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,, a]
[+, i, *, step, ;, final, double, b, =, a, +, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision]
[;, final, double, b, =, a, +, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,, a]
[*, step, ;, final, double, b, =, a, +, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints]
[;, final, double, b, =, a, +, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,, a]
[;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,, a, ,, b, ), ;, sum, +=, g, .]
[+, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,, a, ,, b, ), ;, sum, +=]
[;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,, a, ,, b, ), ;, sum, +=, g, .]
[;, sum, +=, g, ., integrate, (, f, ), ;, }, return, sum, ;, }, }]
[., legendreHighPrecision, (, numberOfPoints, ,, a, ,, b, ), ;, sum, +=, g, ., integrate, (, f, ), ;, }]
[,, a, ,, b, ), ;, sum, +=, g, ., integrate, (, f, ), ;, }, return, sum, ;, }]
[,, b, ), ;, sum, +=, g, ., integrate, (, f, ), ;, }, return, sum, ;, }, }]
[), ;, sum, +=, g, ., integrate, (, f, ), ;, }, return, sum, ;, }, }]
[+=, g, ., integrate, (, f, ), ;, }, return, sum, ;, }, }]
[;, }, return, sum, ;, }, }]
[., integrate, (, f, ), ;, }, return, sum, ;, }, }]
[), ;, }, return, sum, ;, }, }]
[;, }, }]
