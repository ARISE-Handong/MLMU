[;, import, org, ., jfree, ., data, ., Range, ;, public, class, RectangleConstraint, {, public, static, final, RectangleConstraint, NONE, =]
[., jfree, ., data, ., Range, ;, public, class, RectangleConstraint, {, public, static, final, RectangleConstraint, NONE, =, new, RectangleConstraint, (]
[., data, ., Range, ;, public, class, RectangleConstraint, {, public, static, final, RectangleConstraint, NONE, =, new, RectangleConstraint, (, 0.0, ,]
[., Range, ;, public, class, RectangleConstraint, {, public, static, final, RectangleConstraint, NONE, =, new, RectangleConstraint, (, 0.0, ,, null, ,]
[., Range, ;, public, class, RectangleConstraint, {, public, static, final, RectangleConstraint, NONE, =, new, RectangleConstraint, (, 0.0, ,, null, ,]
[class, RectangleConstraint, {, public, static, final, RectangleConstraint, NONE, =, new, RectangleConstraint, (, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ,]
[{, public, static, final, RectangleConstraint, NONE, =, new, RectangleConstraint, (, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ,, 0.0, ,]
[static, final, RectangleConstraint, NONE, =, new, RectangleConstraint, (, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ,, 0.0, ,, null, ,]
[static, final, RectangleConstraint, NONE, =, new, RectangleConstraint, (, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ,, 0.0, ,, null, ,]
[private, Range, heightRange, ;, private, LengthConstraintType, heightConstraintType, ;, public, RectangleConstraint, (, double, w, ,, double, h, ), {, this, (]
[heightRange, ;, private, LengthConstraintType, heightConstraintType, ;, public, RectangleConstraint, (, double, w, ,, double, h, ), {, this, (, w, ,]
[private, LengthConstraintType, heightConstraintType, ;, public, RectangleConstraint, (, double, w, ,, double, h, ), {, this, (, w, ,, null, ,]
[private, LengthConstraintType, heightConstraintType, ;, public, RectangleConstraint, (, double, w, ,, double, h, ), {, this, (, w, ,, null, ,]
[public, RectangleConstraint, (, double, w, ,, double, h, ), {, this, (, w, ,, null, ,, LengthConstraintType, ., FIXED, ,]
[(, double, w, ,, double, h, ), {, this, (, w, ,, null, ,, LengthConstraintType, ., FIXED, ,, h, ,]
[w, ,, double, h, ), {, this, (, w, ,, null, ,, LengthConstraintType, ., FIXED, ,, h, ,, null, ,]
[w, ,, double, h, ), {, this, (, w, ,, null, ,, LengthConstraintType, ., FIXED, ,, h, ,, null, ,]
[null, ,, LengthConstraintType, ., FIXED, ), ;, }, public, RectangleConstraint, (, Range, w, ,, Range, h, ), {, this, (]
[LengthConstraintType, ., FIXED, ), ;, }, public, RectangleConstraint, (, Range, w, ,, Range, h, ), {, this, (, 0.0, ,]
[FIXED, ), ;, }, public, RectangleConstraint, (, Range, w, ,, Range, h, ), {, this, (, 0.0, ,, w, ,]
[FIXED, ), ;, }, public, RectangleConstraint, (, Range, w, ,, Range, h, ), {, this, (, 0.0, ,, w, ,]
[public, RectangleConstraint, (, Range, w, ,, Range, h, ), {, this, (, 0.0, ,, w, ,, LengthConstraintType, ., RANGE, ,]
[(, Range, w, ,, Range, h, ), {, this, (, 0.0, ,, w, ,, LengthConstraintType, ., RANGE, ,, 0.0, ,]
[w, ,, Range, h, ), {, this, (, 0.0, ,, w, ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, h, ,]
[w, ,, Range, h, ), {, this, (, 0.0, ,, w, ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, h, ,]
[h, ,, LengthConstraintType, ., RANGE, ), ;, }, public, RectangleConstraint, (, Range, w, ,, double, h, ), {, this, (]
[LengthConstraintType, ., RANGE, ), ;, }, public, RectangleConstraint, (, Range, w, ,, double, h, ), {, this, (, 0.0, ,]
[RANGE, ), ;, }, public, RectangleConstraint, (, Range, w, ,, double, h, ), {, this, (, 0.0, ,, w, ,]
[RANGE, ), ;, }, public, RectangleConstraint, (, Range, w, ,, double, h, ), {, this, (, 0.0, ,, w, ,]
[public, RectangleConstraint, (, Range, w, ,, double, h, ), {, this, (, 0.0, ,, w, ,, LengthConstraintType, ., RANGE, ,]
[(, Range, w, ,, double, h, ), {, this, (, 0.0, ,, w, ,, LengthConstraintType, ., RANGE, ,, h, ,]
[w, ,, double, h, ), {, this, (, 0.0, ,, w, ,, LengthConstraintType, ., RANGE, ,, h, ,, null, ,]
[w, ,, double, h, ), {, this, (, 0.0, ,, w, ,, LengthConstraintType, ., RANGE, ,, h, ,, null, ,]
[null, ,, LengthConstraintType, ., FIXED, ), ;, }, public, RectangleConstraint, (, double, w, ,, Range, h, ), {, this, (]
[LengthConstraintType, ., FIXED, ), ;, }, public, RectangleConstraint, (, double, w, ,, Range, h, ), {, this, (, w, ,]
[FIXED, ), ;, }, public, RectangleConstraint, (, double, w, ,, Range, h, ), {, this, (, w, ,, null, ,]
[FIXED, ), ;, }, public, RectangleConstraint, (, double, w, ,, Range, h, ), {, this, (, w, ,, null, ,]
[public, RectangleConstraint, (, double, w, ,, Range, h, ), {, this, (, w, ,, null, ,, LengthConstraintType, ., FIXED, ,]
[(, double, w, ,, Range, h, ), {, this, (, w, ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,]
[w, ,, Range, h, ), {, this, (, w, ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, h, ,]
[w, ,, Range, h, ), {, this, (, w, ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, h, ,]
[w, ,, Range, widthRange, ,, LengthConstraintType, widthConstraintType, ,, double, h, ,, Range, heightRange, ,, LengthConstraintType, heightConstraintType, ), {, if, (]
[w, ,, Range, widthRange, ,, LengthConstraintType, widthConstraintType, ,, double, h, ,, Range, heightRange, ,, LengthConstraintType, heightConstraintType, ), {, if, (]
[Range, widthRange, ,, LengthConstraintType, widthConstraintType, ,, double, h, ,, Range, heightRange, ,, LengthConstraintType, heightConstraintType, ), {, if, (, widthConstraintType, ==]
[widthConstraintType, ,, double, h, ,, Range, heightRange, ,, LengthConstraintType, heightConstraintType, ), {, if, (, widthConstraintType, ==, null, ), {, throw]
[h, ,, Range, heightRange, ,, LengthConstraintType, heightConstraintType, ), {, if, (, widthConstraintType, ==, null, ), {, throw, new, IllegalArgumentException, (]
[heightConstraintType, ), {, if, (, widthConstraintType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'widthType' argument.", ), ;, }, if, (]
[heightConstraintType, ), {, if, (, widthConstraintType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'widthType' argument.", ), ;, }, if, (]
[{, if, (, widthConstraintType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'widthType' argument.", ), ;, }, if, (, heightConstraintType, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'widthType' argument.", ), ;, }, if, (, heightConstraintType, ==, null, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'widthType' argument.", ), ;, }, if, (, heightConstraintType, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, "Null 'widthType' argument.", ), ;, }, if, (, heightConstraintType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'heightType' argument.", ), ;, }]
[(, "Null 'widthType' argument.", ), ;, }, if, (, heightConstraintType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'heightType' argument.", ), ;, }]
[}, if, (, heightConstraintType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'heightType' argument.", ), ;, }, this, ., width, =]
[(, heightConstraintType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'heightType' argument.", ), ;, }, this, ., width, =, w, ;]
[(, heightConstraintType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'heightType' argument.", ), ;, }, this, ., width, =, w, ;]
[), {, throw, new, IllegalArgumentException, (, "Null 'heightType' argument.", ), ;, }, this, ., width, =, w, ;, this, ., widthRange, =]
[throw, new, IllegalArgumentException, (, "Null 'heightType' argument.", ), ;, }, this, ., width, =, w, ;, this, ., widthRange, =, widthRange, ;]
[throw, new, IllegalArgumentException, (, "Null 'heightType' argument.", ), ;, }, this, ., width, =, w, ;, this, ., widthRange, =, widthRange, ;]
["Null 'heightType' argument.", ), ;, }, this, ., width, =, w, ;, this, ., widthRange, =, widthRange, ;, this, ., widthConstraintType, =]
[;, }, this, ., width, =, w, ;, this, ., widthRange, =, widthRange, ;, this, ., widthConstraintType, =, widthConstraintType, ;]
[;, }, this, ., width, =, w, ;, this, ., widthRange, =, widthRange, ;, this, ., widthConstraintType, =, widthConstraintType, ;]
[width, =, w, ;, this, ., widthRange, =, widthRange, ;, this, ., widthConstraintType, =, widthConstraintType, ;, this, ., height, =]
[w, ;, this, ., widthRange, =, widthRange, ;, this, ., widthConstraintType, =, widthConstraintType, ;, this, ., height, =, h, ;]
[w, ;, this, ., widthRange, =, widthRange, ;, this, ., widthConstraintType, =, widthConstraintType, ;, this, ., height, =, h, ;]
[widthRange, =, widthRange, ;, this, ., widthConstraintType, =, widthConstraintType, ;, this, ., height, =, h, ;, this, ., heightRange, =]
[widthRange, ;, this, ., widthConstraintType, =, widthConstraintType, ;, this, ., height, =, h, ;, this, ., heightRange, =, heightRange, ;]
[widthRange, ;, this, ., widthConstraintType, =, widthConstraintType, ;, this, ., height, =, h, ;, this, ., heightRange, =, heightRange, ;]
[widthConstraintType, =, widthConstraintType, ;, this, ., height, =, h, ;, this, ., heightRange, =, heightRange, ;, this, ., heightConstraintType, =]
[this, ., heightRange, =, heightRange, ;, this, ., heightConstraintType, =, heightConstraintType, ;, }, public, double, getWidth, (, ), {, return]
[this, ., heightRange, =, heightRange, ;, this, ., heightConstraintType, =, heightConstraintType, ;, }, public, double, getWidth, (, ), {, return]
[}, public, double, getWidth, (, ), {, return, this, ., width, ;, }, public, Range, getWidthRange, (, ), {, return]
[}, public, double, getWidth, (, ), {, return, this, ., width, ;, }, public, Range, getWidthRange, (, ), {, return]
[}, public, Range, getWidthRange, (, ), {, return, this, ., widthRange, ;, }, public, LengthConstraintType, getWidthConstraintType, (, ), {, return]
[}, public, Range, getWidthRange, (, ), {, return, this, ., widthRange, ;, }, public, LengthConstraintType, getWidthConstraintType, (, ), {, return]
[}, public, LengthConstraintType, getWidthConstraintType, (, ), {, return, this, ., widthConstraintType, ;, }, public, double, getHeight, (, ), {, return]
[}, public, LengthConstraintType, getWidthConstraintType, (, ), {, return, this, ., widthConstraintType, ;, }, public, double, getHeight, (, ), {, return]
[}, public, double, getHeight, (, ), {, return, this, ., height, ;, }, public, Range, getHeightRange, (, ), {, return]
[}, public, double, getHeight, (, ), {, return, this, ., height, ;, }, public, Range, getHeightRange, (, ), {, return]
[}, public, Range, getHeightRange, (, ), {, return, this, ., heightRange, ;, }, public, LengthConstraintType, getHeightConstraintType, (, ), {, return]
[}, public, Range, getHeightRange, (, ), {, return, this, ., heightRange, ;, }, public, LengthConstraintType, getHeightConstraintType, (, ), {, return]
[public, LengthConstraintType, getHeightConstraintType, (, ), {, return, this, ., heightConstraintType, ;, }, public, RectangleConstraint, toUnconstrainedWidth, (, ), {, if, (]
[public, LengthConstraintType, getHeightConstraintType, (, ), {, return, this, ., heightConstraintType, ;, }, public, RectangleConstraint, toUnconstrainedWidth, (, ), {, if, (]
[public, LengthConstraintType, getHeightConstraintType, (, ), {, return, this, ., heightConstraintType, ;, }, public, RectangleConstraint, toUnconstrainedWidth, (, ), {, if, (]
[), {, return, this, ., heightConstraintType, ;, }, public, RectangleConstraint, toUnconstrainedWidth, (, ), {, if, (, this, ., widthConstraintType, ==]
[), {, return, this, ., heightConstraintType, ;, }, public, RectangleConstraint, toUnconstrainedWidth, (, ), {, if, (, this, ., widthConstraintType, ==]
[;, }, public, RectangleConstraint, toUnconstrainedWidth, (, ), {, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., NONE, ), {, return]
[), {, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., NONE, ), {, return, this, ;, }, else, {, return]
[(, this, ., widthConstraintType, ==, LengthConstraintType, ., NONE, ), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (]
[(, this, ., widthConstraintType, ==, LengthConstraintType, ., NONE, ), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (]
[==, LengthConstraintType, ., NONE, ), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (, this, ., width, ,]
[==, LengthConstraintType, ., NONE, ), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (, this, ., width, ,]
[), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,]
[), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,]
[;, }, else, {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, LengthConstraintType, ., NONE, ,]
[;, }, else, {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, LengthConstraintType, ., NONE, ,]
[return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, LengthConstraintType, ., NONE, ,, this, ., height, ,]
[return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, LengthConstraintType, ., NONE, ,, this, ., height, ,]
[this, ., width, ,, this, ., widthRange, ,, LengthConstraintType, ., NONE, ,, this, ., height, ,, this, ., heightRange, ,]
[this, ., width, ,, this, ., widthRange, ,, LengthConstraintType, ., NONE, ,, this, ., height, ,, this, ., heightRange, ,]
[,, this, ., heightRange, ,, this, ., heightConstraintType, ), ;, }, }, public, RectangleConstraint, toUnconstrainedHeight, (, ), {, if, (]
[,, this, ., heightRange, ,, this, ., heightConstraintType, ), ;, }, }, public, RectangleConstraint, toUnconstrainedHeight, (, ), {, if, (]
[,, this, ., heightRange, ,, this, ., heightConstraintType, ), ;, }, }, public, RectangleConstraint, toUnconstrainedHeight, (, ), {, if, (]
[,, this, ., heightConstraintType, ), ;, }, }, public, RectangleConstraint, toUnconstrainedHeight, (, ), {, if, (, this, ., heightConstraintType, ==]
[,, this, ., heightConstraintType, ), ;, }, }, public, RectangleConstraint, toUnconstrainedHeight, (, ), {, if, (, this, ., heightConstraintType, ==]
[}, }, public, RectangleConstraint, toUnconstrainedHeight, (, ), {, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, return]
[), {, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, return, this, ;, }, else, {, return]
[(, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (]
[(, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (]
[==, LengthConstraintType, ., NONE, ), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (, this, ., width, ,]
[==, LengthConstraintType, ., NONE, ), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (, this, ., width, ,]
[), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,]
[), {, return, this, ;, }, else, {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,]
[;, }, else, {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,]
[else, {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,, 0.0, ,]
[else, {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,, 0.0, ,]
[RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,, 0.0, ,, this, ., heightRange, ,]
[RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,, 0.0, ,, this, ., heightRange, ,]
[this, ., heightRange, ,, LengthConstraintType, ., NONE, ), ;, }, }, public, RectangleConstraint, toFixedWidth, (, double, width, ), {, return]
[,, LengthConstraintType, ., NONE, ), ;, }, }, public, RectangleConstraint, toFixedWidth, (, double, width, ), {, return, new, RectangleConstraint, (]
[., NONE, ), ;, }, }, public, RectangleConstraint, toFixedWidth, (, double, width, ), {, return, new, RectangleConstraint, (, width, ,]
[., NONE, ), ;, }, }, public, RectangleConstraint, toFixedWidth, (, double, width, ), {, return, new, RectangleConstraint, (, width, ,]
[}, }, public, RectangleConstraint, toFixedWidth, (, double, width, ), {, return, new, RectangleConstraint, (, width, ,, this, ., widthRange, ,]
[}, }, public, RectangleConstraint, toFixedWidth, (, double, width, ), {, return, new, RectangleConstraint, (, width, ,, this, ., widthRange, ,]
[toFixedWidth, (, double, width, ), {, return, new, RectangleConstraint, (, width, ,, this, ., widthRange, ,, LengthConstraintType, ., FIXED, ,]
[toFixedWidth, (, double, width, ), {, return, new, RectangleConstraint, (, width, ,, this, ., widthRange, ,, LengthConstraintType, ., FIXED, ,]
[), {, return, new, RectangleConstraint, (, width, ,, this, ., widthRange, ,, LengthConstraintType, ., FIXED, ,, this, ., height, ,]
[), {, return, new, RectangleConstraint, (, width, ,, this, ., widthRange, ,, LengthConstraintType, ., FIXED, ,, this, ., height, ,]
[RectangleConstraint, (, width, ,, this, ., widthRange, ,, LengthConstraintType, ., FIXED, ,, this, ., height, ,, this, ., heightRange, ,]
[RectangleConstraint, (, width, ,, this, ., widthRange, ,, LengthConstraintType, ., FIXED, ,, this, ., height, ,, this, ., heightRange, ,]
[,, this, ., heightRange, ,, this, ., heightConstraintType, ), ;, }, public, RectangleConstraint, toFixedHeight, (, double, height, ), {, return]
[heightRange, ,, this, ., heightConstraintType, ), ;, }, public, RectangleConstraint, toFixedHeight, (, double, height, ), {, return, new, RectangleConstraint, (]
[heightRange, ,, this, ., heightConstraintType, ), ;, }, public, RectangleConstraint, toFixedHeight, (, double, height, ), {, return, new, RectangleConstraint, (]
[heightConstraintType, ), ;, }, public, RectangleConstraint, toFixedHeight, (, double, height, ), {, return, new, RectangleConstraint, (, this, ., width, ,]
[heightConstraintType, ), ;, }, public, RectangleConstraint, toFixedHeight, (, double, height, ), {, return, new, RectangleConstraint, (, this, ., width, ,]
[public, RectangleConstraint, toFixedHeight, (, double, height, ), {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,]
[public, RectangleConstraint, toFixedHeight, (, double, height, ), {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,]
[double, height, ), {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,]
[), {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,, height, ,]
[), {, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,, height, ,]
[RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,, height, ,, this, ., heightRange, ,]
[RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,, height, ,, this, ., heightRange, ,]
[this, ., heightRange, ,, LengthConstraintType, ., FIXED, ), ;, }, public, RectangleConstraint, toRangeWidth, (, Range, range, ), {, if, (]
[this, ., heightRange, ,, LengthConstraintType, ., FIXED, ), ;, }, public, RectangleConstraint, toRangeWidth, (, Range, range, ), {, if, (]
[heightRange, ,, LengthConstraintType, ., FIXED, ), ;, }, public, RectangleConstraint, toRangeWidth, (, Range, range, ), {, if, (, range, ==]
[FIXED, ), ;, }, public, RectangleConstraint, toRangeWidth, (, Range, range, ), {, if, (, range, ==, null, ), {, throw]
[}, public, RectangleConstraint, toRangeWidth, (, Range, range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (]
[Range, range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return]
[{, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (]
[{, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (, range, ., getUpperBound, (, ), ,]
[throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (, range, ., getUpperBound, (, ), ,, range, ,]
[throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (, range, ., getUpperBound, (, ), ,, range, ,]
["Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (, range, ., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ,]
["Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (, range, ., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ,]
[return, new, RectangleConstraint, (, range, ., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ,, this, ., height, ,]
[return, new, RectangleConstraint, (, range, ., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ,, this, ., height, ,]
[range, ., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ,, this, ., height, ,, this, ., heightRange, ,]
[range, ., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ,, this, ., height, ,, this, ., heightRange, ,]
[this, ., heightRange, ,, this, ., heightConstraintType, ), ;, }, public, RectangleConstraint, toRangeHeight, (, Range, range, ), {, if, (]
[this, ., heightRange, ,, this, ., heightConstraintType, ), ;, }, public, RectangleConstraint, toRangeHeight, (, Range, range, ), {, if, (]
[heightRange, ,, this, ., heightConstraintType, ), ;, }, public, RectangleConstraint, toRangeHeight, (, Range, range, ), {, if, (, range, ==]
[heightConstraintType, ), ;, }, public, RectangleConstraint, toRangeHeight, (, Range, range, ), {, if, (, range, ==, null, ), {, throw]
[}, public, RectangleConstraint, toRangeHeight, (, Range, range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (]
[Range, range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return]
[{, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (]
[{, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (, this, ., width, ,]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (, this, ., width, ,]
[throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,]
[throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,]
["Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,]
["Null 'range' argument.", ), ;, }, return, new, RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,]
[RectangleConstraint, (, this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,, range, ., getUpperBound, (, ), ,]
[this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,, range, ., getUpperBound, (, ), ,, range, ,]
[this, ., width, ,, this, ., widthRange, ,, this, ., widthConstraintType, ,, range, ., getUpperBound, (, ), ,, range, ,]
[., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ), ;, }, public, String, toString, (, ), {, return]
[., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ), ;, }, public, String, toString, (, ), {, return]
[., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ), ;, }, public, String, toString, (, ), {, return]
[., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ), ;, }, public, String, toString, (, ), {, return]
[., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ), ;, }, public, String, toString, (, ), {, return]
[., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ), ;, }, public, String, toString, (, ), {, return]
[., getUpperBound, (, ), ,, range, ,, LengthConstraintType, ., RANGE, ), ;, }, public, String, toString, (, ), {, return]
[(, ), ,, range, ,, LengthConstraintType, ., RANGE, ), ;, }, public, String, toString, (, ), {, return, "RectangleConstraint[", +]
[(, ), ,, range, ,, LengthConstraintType, ., RANGE, ), ;, }, public, String, toString, (, ), {, return, "RectangleConstraint[", +]
[(, ), ,, range, ,, LengthConstraintType, ., RANGE, ), ;, }, public, String, toString, (, ), {, return, "RectangleConstraint[", +]
[), ;, }, public, String, toString, (, ), {, return, "RectangleConstraint[", +, this, ., widthConstraintType, ., toString, (, ), +]
[}, public, String, toString, (, ), {, return, "RectangleConstraint[", +, this, ., widthConstraintType, ., toString, (, ), +, ": width=", +]
[}, public, String, toString, (, ), {, return, "RectangleConstraint[", +, this, ., widthConstraintType, ., toString, (, ), +, ": width=", +]
[(, ), {, return, "RectangleConstraint[", +, this, ., widthConstraintType, ., toString, (, ), +, ": width=", +, this, ., width, +]
[{, return, "RectangleConstraint[", +, this, ., widthConstraintType, ., toString, (, ), +, ": width=", +, this, ., width, +, ", height=", +]
[{, return, "RectangleConstraint[", +, this, ., widthConstraintType, ., toString, (, ), +, ": width=", +, this, ., width, +, ", height=", +]
[this, ., widthConstraintType, ., toString, (, ), +, ": width=", +, this, ., width, +, ", height=", +, this, ., height, +]
[", height=", +, this, ., height, +, "]", ;, }, public, Size2D, calculateConstrainedSize, (, Size2D, base, ), {, Size2D, result, =]
[;, }, public, Size2D, calculateConstrainedSize, (, Size2D, base, ), {, Size2D, result, =, new, Size2D, (, ), ;, if, (]
[;, }, public, Size2D, calculateConstrainedSize, (, Size2D, base, ), {, Size2D, result, =, new, Size2D, (, ), ;, if, (]
[;, }, public, Size2D, calculateConstrainedSize, (, Size2D, base, ), {, Size2D, result, =, new, Size2D, (, ), ;, if, (]
[calculateConstrainedSize, (, Size2D, base, ), {, Size2D, result, =, new, Size2D, (, ), ;, if, (, this, ., widthConstraintType, ==]
[calculateConstrainedSize, (, Size2D, base, ), {, Size2D, result, =, new, Size2D, (, ), ;, if, (, this, ., widthConstraintType, ==]
[{, Size2D, result, =, new, Size2D, (, ), ;, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., NONE, ), {]
[{, Size2D, result, =, new, Size2D, (, ), ;, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., NONE, ), {]
[new, Size2D, (, ), ;, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., width, =]
[new, Size2D, (, ), ;, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., width, =]
[(, this, ., widthConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., width, =, base, ., width, ;, if, (]
[(, this, ., widthConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., width, =, base, ., width, ;, if, (]
[(, this, ., widthConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., width, =, base, ., width, ;, if, (]
[==, LengthConstraintType, ., NONE, ), {, result, ., width, =, base, ., width, ;, if, (, this, ., heightConstraintType, ==]
[==, LengthConstraintType, ., NONE, ), {, result, ., width, =, base, ., width, ;, if, (, this, ., heightConstraintType, ==]
[{, result, ., width, =, base, ., width, ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {]
[{, result, ., width, =, base, ., width, ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {]
[=, base, ., width, ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =]
[=, base, ., width, ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =]
[., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (]
[., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (]
[., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (]
[., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==]
[., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==]
[., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {]
[., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {]
[., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =]
[., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =]
[., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =]
[(, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =, this, ., heightRange, ., constrain, (]
[(, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =, this, ., heightRange, ., constrain, (]
[{, result, ., height, =, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (]
[{, result, ., height, =, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (]
[{, result, ., height, =, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (]
[=, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==]
[=, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==]
[constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {]
[constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {]
[height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =]
[height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =]
[heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =, this, ., height, ;, }, }, else, if, (]
[heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =, this, ., height, ;, }, }, else, if, (]
[heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =, this, ., height, ;, }, }, else, if, (]
[FIXED, ), {, result, ., height, =, this, ., height, ;, }, }, else, if, (, this, ., widthConstraintType, ==]
[FIXED, ), {, result, ., height, =, this, ., height, ;, }, }, else, if, (, this, ., widthConstraintType, ==]
[height, =, this, ., height, ;, }, }, else, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., RANGE, ), {]
[height, =, this, ., height, ;, }, }, else, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., RANGE, ), {]
[height, ;, }, }, else, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., width, =]
[height, ;, }, }, else, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., width, =]
[height, ;, }, }, else, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., width, =]
[(, this, ., widthConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., width, =, this, ., widthRange, ., constrain, (]
[(, this, ., widthConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., width, =, this, ., widthRange, ., constrain, (]
[RANGE, ), {, result, ., width, =, this, ., widthRange, ., constrain, (, base, ., width, ), ;, if, (]
[RANGE, ), {, result, ., width, =, this, ., widthRange, ., constrain, (, base, ., width, ), ;, if, (]
[RANGE, ), {, result, ., width, =, this, ., widthRange, ., constrain, (, base, ., width, ), ;, if, (]
[., width, =, this, ., widthRange, ., constrain, (, base, ., width, ), ;, if, (, this, ., heightConstraintType, ==]
[., width, =, this, ., widthRange, ., constrain, (, base, ., width, ), ;, if, (, this, ., heightConstraintType, ==]
[widthRange, ., constrain, (, base, ., width, ), ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {]
[widthRange, ., constrain, (, base, ., width, ), ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {]
[base, ., width, ), ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =]
[base, ., width, ), ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =]
[., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (]
[., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (]
[., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (]
[., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==]
[., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==]
[., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {]
[., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {]
[., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =]
[., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =]
[., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =]
[(, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =, this, ., heightRange, ., constrain, (]
[(, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =, this, ., heightRange, ., constrain, (]
[{, result, ., height, =, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (]
[{, result, ., height, =, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (]
[{, result, ., height, =, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (]
[=, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==]
[=, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==]
[constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {]
[constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {]
[height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =]
[height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =]
[heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =, this, ., height, ;, }, }, else, if, (]
[heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =, this, ., height, ;, }, }, else, if, (]
[heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =, this, ., height, ;, }, }, else, if, (]
[FIXED, ), {, result, ., height, =, this, ., height, ;, }, }, else, if, (, this, ., widthConstraintType, ==]
[FIXED, ), {, result, ., height, =, this, ., height, ;, }, }, else, if, (, this, ., widthConstraintType, ==]
[height, =, this, ., height, ;, }, }, else, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., FIXED, ), {]
[height, =, this, ., height, ;, }, }, else, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., FIXED, ), {]
[height, ;, }, }, else, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., width, =]
[height, ;, }, }, else, if, (, this, ., widthConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., width, =]
[(, this, ., widthConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., width, =, this, ., width, ;, if, (]
[(, this, ., widthConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., width, =, this, ., width, ;, if, (]
[(, this, ., widthConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., width, =, this, ., width, ;, if, (]
[==, LengthConstraintType, ., FIXED, ), {, result, ., width, =, this, ., width, ;, if, (, this, ., heightConstraintType, ==]
[==, LengthConstraintType, ., FIXED, ), {, result, ., width, =, this, ., width, ;, if, (, this, ., heightConstraintType, ==]
[{, result, ., width, =, this, ., width, ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {]
[{, result, ., width, =, this, ., width, ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {]
[=, this, ., width, ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =]
[=, this, ., width, ;, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =]
[., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (]
[., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (]
[., heightConstraintType, ==, LengthConstraintType, ., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (]
[., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==]
[., NONE, ), {, result, ., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==]
[., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {]
[., height, =, base, ., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {]
[., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =]
[., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =]
[., height, ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =]
[(, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =, this, ., heightRange, ., constrain, (]
[(, this, ., heightConstraintType, ==, LengthConstraintType, ., RANGE, ), {, result, ., height, =, this, ., heightRange, ., constrain, (]
[{, result, ., height, =, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (]
[{, result, ., height, =, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (]
[{, result, ., height, =, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (]
[=, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==]
[=, this, ., heightRange, ., constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==]
[constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {]
[constrain, (, base, ., height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {]
[height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =]
[height, ), ;, }, else, if, (, this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =]
[this, ., heightConstraintType, ==, LengthConstraintType, ., FIXED, ), {, result, ., height, =, this, ., height, ;, }, }, return]
