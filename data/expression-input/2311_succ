[;, public, static, final, int, FLAG_DIV_ZERO, =, 2, ;, public, static, final, int, FLAG_OVERFLOW, =, 4, ;, public, static, final]
[;, public, static, final, int, FLAG_OVERFLOW, =, 4, ;, public, static, final, int, FLAG_UNDERFLOW, =, 8, ;, public, static, final]
[;, public, static, final, int, FLAG_UNDERFLOW, =, 8, ;, public, static, final, int, FLAG_INEXACT, =, 16, ;, private, static, String]
[;, public, static, final, int, FLAG_INEXACT, =, 16, ;, private, static, String, sqr2String, ;, private, static, String, sqr2ReciprocalString, ;, private]
[;, private, static, String, sqr2String, ;, private, static, String, sqr2ReciprocalString, ;, private, static, String, sqr3String, ;, private, static, String, sqr3ReciprocalString]
[,, true, ), ;, }, private, DfpField, (, final, int, decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits]
[), ;, }, private, DfpField, (, final, int, decimalDigits, ,, final, boolean, computeConstants, ), {, this, ., radixDigits, =, (]
[=, (, decimalDigits, <, 13, ), ?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;, this, ., rMode]
[., radixDigits, =, (, decimalDigits, <, 13, ), ?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;, this]
[;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =, new]
[?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this]
[), ?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;]
[<, 13, ), ?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;, this, ., rMode, =, RoundingMode, .]
[), ?, 4, :, (, decimalDigits, +, 3, ), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;]
[:, (, decimalDigits, +, 3, ), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags]
[;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =, new]
[/, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero]
[), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, .]
[+, 3, ), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;]
[), /, 4, ;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, .]
[;, this, ., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =, new]
[=, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =, new, Dfp, (, this, ,]
[., rMode, =, RoundingMode, ., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =, new, Dfp, (]
[;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =, new, Dfp, (, this, ,, 0, ), ;, this]
[., ROUND_HALF_EVEN, ;, this, ., ieeeFlags, =, 0, ;, this, ., zero, =, new, Dfp, (, this, ,, 0, )]
[=, 0, ;, this, ., zero, =, new, Dfp, (, this, ,, 0, ), ;, this, ., one, =, new]
[., ieeeFlags, =, 0, ;, this, ., zero, =, new, Dfp, (, this, ,, 0, ), ;, this, ., one]
[;, this, ., zero, =, new, Dfp, (, this, ,, 0, ), ;, this, ., one, =, new, Dfp, (]
[=, new, Dfp, (, this, ,, 0, ), ;, this, ., one, =, new, Dfp, (, this, ,, 1, )]
[., zero, =, new, Dfp, (, this, ,, 0, ), ;, this, ., one, =, new, Dfp, (, this, ,]
[;, this, ., one, =, new, Dfp, (, this, ,, 1, ), ;, this, ., two, =, new, Dfp, (]
[,, 0, ), ;, this, ., one, =, new, Dfp, (, this, ,, 1, ), ;, this, ., two, =]
[), ;, this, ., one, =, new, Dfp, (, this, ,, 1, ), ;, this, ., two, =, new, Dfp]
[=, new, Dfp, (, this, ,, 1, ), ;, this, ., two, =, new, Dfp, (, this, ,, 2, )]
[., one, =, new, Dfp, (, this, ,, 1, ), ;, this, ., two, =, new, Dfp, (, this, ,]
[;, this, ., two, =, new, Dfp, (, this, ,, 2, ), ;, if, (, computeConstants, ), {, synchronized, (]
[,, 1, ), ;, this, ., two, =, new, Dfp, (, this, ,, 2, ), ;, if, (, computeConstants, )]
[), ;, this, ., two, =, new, Dfp, (, this, ,, 2, ), ;, if, (, computeConstants, ), {, synchronized]
[=, new, Dfp, (, this, ,, 2, ), ;, if, (, computeConstants, ), {, synchronized, (, DfpField, ., class, )]
[., two, =, new, Dfp, (, this, ,, 2, ), ;, if, (, computeConstants, ), {, synchronized, (, DfpField, .]
[;, if, (, computeConstants, ), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (, decimalDigits, <, 67, )]
[,, 2, ), ;, if, (, computeConstants, ), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (, decimalDigits]
[), ;, if, (, computeConstants, ), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (, decimalDigits, <, 67]
[), {, synchronized, (, DfpField, ., class, ), {, computeStringConstants, (, (, decimalDigits, <, 67, ), ?, 200, :, (]
[), {, computeStringConstants, (, (, decimalDigits, <, 67, ), ?, 200, :, (, 3, *, decimalDigits, ), ), ;, sqr2]
[;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal, =]
[), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal]
[?, 200, :, (, 3, *, decimalDigits, ), ), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;]
[), ?, 200, :, (, 3, *, decimalDigits, ), ), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, )]
[<, 67, ), ?, 200, :, (, 3, *, decimalDigits, ), ), ;, sqr2, =, new, Dfp, (, this, ,]
[), ?, 200, :, (, 3, *, decimalDigits, ), ), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, )]
[:, (, 3, *, decimalDigits, ), ), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =]
[), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal]
[), ), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;]
[*, decimalDigits, ), ), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String]
[), ), ;, sqr2, =, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;]
[=, new, Dfp, (, this, ,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal, =, new, Dfp]
[;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal, =, new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;, sqr3, =]
[,, sqr2String, ), ;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal, =, new, Dfp, (, this, ,, sqr2ReciprocalString, )]
[), ;, sqr2Split, =, split, (, sqr2String, ), ;, sqr2Reciprocal, =, new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;, sqr3]
[=, split, (, sqr2String, ), ;, sqr2Reciprocal, =, new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;, sqr3, =, new, Dfp]
[;, sqr2Reciprocal, =, new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;, sqr3, =, new, Dfp, (, this, ,, sqr3String, )]
[), ;, sqr2Reciprocal, =, new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;, sqr3, =, new, Dfp, (, this, ,, sqr3String]
[=, new, Dfp, (, this, ,, sqr2ReciprocalString, ), ;, sqr3, =, new, Dfp, (, this, ,, sqr3String, ), ;, sqr3Reciprocal]
[;, sqr3, =, new, Dfp, (, this, ,, sqr3String, ), ;, sqr3Reciprocal, =, new, Dfp, (, this, ,, sqr3ReciprocalString, )]
[,, sqr2ReciprocalString, ), ;, sqr3, =, new, Dfp, (, this, ,, sqr3String, ), ;, sqr3Reciprocal, =, new, Dfp, (, this]
[), ;, sqr3, =, new, Dfp, (, this, ,, sqr3String, ), ;, sqr3Reciprocal, =, new, Dfp, (, this, ,, sqr3ReciprocalString]
[=, new, Dfp, (, this, ,, sqr3String, ), ;, sqr3Reciprocal, =, new, Dfp, (, this, ,, sqr3ReciprocalString, ), ;, pi]
[;, sqr3Reciprocal, =, new, Dfp, (, this, ,, sqr3ReciprocalString, ), ;, pi, =, new, Dfp, (, this, ,, piString, )]
[,, sqr3String, ), ;, sqr3Reciprocal, =, new, Dfp, (, this, ,, sqr3ReciprocalString, ), ;, pi, =, new, Dfp, (, this]
[), ;, sqr3Reciprocal, =, new, Dfp, (, this, ,, sqr3ReciprocalString, ), ;, pi, =, new, Dfp, (, this, ,, piString]
[=, new, Dfp, (, this, ,, sqr3ReciprocalString, ), ;, pi, =, new, Dfp, (, this, ,, piString, ), ;, piSplit]
[;, pi, =, new, Dfp, (, this, ,, piString, ), ;, piSplit, =, split, (, piString, ), ;, e, =]
[,, sqr3ReciprocalString, ), ;, pi, =, new, Dfp, (, this, ,, piString, ), ;, piSplit, =, split, (, piString, )]
[), ;, pi, =, new, Dfp, (, this, ,, piString, ), ;, piSplit, =, split, (, piString, ), ;, e]
[=, new, Dfp, (, this, ,, piString, ), ;, piSplit, =, split, (, piString, ), ;, e, =, new, Dfp]
[;, piSplit, =, split, (, piString, ), ;, e, =, new, Dfp, (, this, ,, eString, ), ;, eSplit, =]
[,, piString, ), ;, piSplit, =, split, (, piString, ), ;, e, =, new, Dfp, (, this, ,, eString, )]
[), ;, piSplit, =, split, (, piString, ), ;, e, =, new, Dfp, (, this, ,, eString, ), ;, eSplit]
[=, split, (, piString, ), ;, e, =, new, Dfp, (, this, ,, eString, ), ;, eSplit, =, split, (]
[;, e, =, new, Dfp, (, this, ,, eString, ), ;, eSplit, =, split, (, eString, ), ;, ln2, =]
[), ;, e, =, new, Dfp, (, this, ,, eString, ), ;, eSplit, =, split, (, eString, ), ;, ln2]
[=, new, Dfp, (, this, ,, eString, ), ;, eSplit, =, split, (, eString, ), ;, ln2, =, new, Dfp]
[;, eSplit, =, split, (, eString, ), ;, ln2, =, new, Dfp, (, this, ,, ln2String, ), ;, ln2Split, =]
[,, eString, ), ;, eSplit, =, split, (, eString, ), ;, ln2, =, new, Dfp, (, this, ,, ln2String, )]
[), ;, eSplit, =, split, (, eString, ), ;, ln2, =, new, Dfp, (, this, ,, ln2String, ), ;, ln2Split]
[=, split, (, eString, ), ;, ln2, =, new, Dfp, (, this, ,, ln2String, ), ;, ln2Split, =, split, (]
[;, ln2, =, new, Dfp, (, this, ,, ln2String, ), ;, ln2Split, =, split, (, ln2String, ), ;, ln5, =]
[), ;, ln2, =, new, Dfp, (, this, ,, ln2String, ), ;, ln2Split, =, split, (, ln2String, ), ;, ln5]
[=, new, Dfp, (, this, ,, ln2String, ), ;, ln2Split, =, split, (, ln2String, ), ;, ln5, =, new, Dfp]
[;, ln2Split, =, split, (, ln2String, ), ;, ln5, =, new, Dfp, (, this, ,, ln5String, ), ;, ln5Split, =]
[,, ln2String, ), ;, ln2Split, =, split, (, ln2String, ), ;, ln5, =, new, Dfp, (, this, ,, ln5String, )]
[), ;, ln2Split, =, split, (, ln2String, ), ;, ln5, =, new, Dfp, (, this, ,, ln5String, ), ;, ln5Split]
[=, split, (, ln2String, ), ;, ln5, =, new, Dfp, (, this, ,, ln5String, ), ;, ln5Split, =, split, (]
[;, ln5, =, new, Dfp, (, this, ,, ln5String, ), ;, ln5Split, =, split, (, ln5String, ), ;, ln10, =]
[), ;, ln5, =, new, Dfp, (, this, ,, ln5String, ), ;, ln5Split, =, split, (, ln5String, ), ;, ln10]
[=, new, Dfp, (, this, ,, ln5String, ), ;, ln5Split, =, split, (, ln5String, ), ;, ln10, =, new, Dfp]
[;, ln5Split, =, split, (, ln5String, ), ;, ln10, =, new, Dfp, (, this, ,, ln10String, ), ;, }, }]
[,, ln5String, ), ;, ln5Split, =, split, (, ln5String, ), ;, ln10, =, new, Dfp, (, this, ,, ln10String, )]
[), ;, ln5Split, =, split, (, ln5String, ), ;, ln10, =, new, Dfp, (, this, ,, ln10String, ), ;, }]
[=, split, (, ln5String, ), ;, ln10, =, new, Dfp, (, this, ,, ln10String, ), ;, }, }, else, {]
[;, ln10, =, new, Dfp, (, this, ,, ln10String, ), ;, }, }, else, {, sqr2, =, null, ;, sqr2Split]
[), ;, ln10, =, new, Dfp, (, this, ,, ln10String, ), ;, }, }, else, {, sqr2, =, null, ;]
[=, new, Dfp, (, this, ,, ln10String, ), ;, }, }, else, {, sqr2, =, null, ;, sqr2Split, =, null]
[;, }, }, else, {, sqr2, =, null, ;, sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;, sqr3, =, null]
[,, ln10String, ), ;, }, }, else, {, sqr2, =, null, ;, sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;]
[), ;, }, }, else, {, sqr2, =, null, ;, sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;, sqr3, =]
[=, null, ;, sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi]
[;, sqr2Split, =, null, ;, sqr2Reciprocal, =, null, ;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi, =, null]
[=, null, ;, sqr2Reciprocal, =, null, ;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit]
[;, sqr2Reciprocal, =, null, ;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit, =, null]
[=, null, ;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit, =, null, ;, e]
[;, sqr3, =, null, ;, sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit, =, null, ;, e, =, null]
[=, null, ;, sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit, =, null, ;, e, =, null, ;, eSplit]
[;, sqr3Reciprocal, =, null, ;, pi, =, null, ;, piSplit, =, null, ;, e, =, null, ;, eSplit, =, null]
[=, null, ;, pi, =, null, ;, piSplit, =, null, ;, e, =, null, ;, eSplit, =, null, ;, ln2]
[;, pi, =, null, ;, piSplit, =, null, ;, e, =, null, ;, eSplit, =, null, ;, ln2, =, null]
[=, null, ;, piSplit, =, null, ;, e, =, null, ;, eSplit, =, null, ;, ln2, =, null, ;, ln2Split]
[;, piSplit, =, null, ;, e, =, null, ;, eSplit, =, null, ;, ln2, =, null, ;, ln2Split, =, null]
[=, null, ;, e, =, null, ;, eSplit, =, null, ;, ln2, =, null, ;, ln2Split, =, null, ;, ln5]
[;, e, =, null, ;, eSplit, =, null, ;, ln2, =, null, ;, ln2Split, =, null, ;, ln5, =, null]
[=, null, ;, eSplit, =, null, ;, ln2, =, null, ;, ln2Split, =, null, ;, ln5, =, null, ;, ln5Split]
[;, eSplit, =, null, ;, ln2, =, null, ;, ln2Split, =, null, ;, ln5, =, null, ;, ln5Split, =, null]
[=, null, ;, ln2, =, null, ;, ln2Split, =, null, ;, ln5, =, null, ;, ln5Split, =, null, ;, ln10]
[;, ln2, =, null, ;, ln2Split, =, null, ;, ln5, =, null, ;, ln5Split, =, null, ;, ln10, =, null]
[=, null, ;, ln2Split, =, null, ;, ln5, =, null, ;, ln5Split, =, null, ;, ln10, =, null, ;, }]
[;, ln2Split, =, null, ;, ln5, =, null, ;, ln5Split, =, null, ;, ln10, =, null, ;, }, }, public]
[=, null, ;, ln5, =, null, ;, ln5Split, =, null, ;, ln10, =, null, ;, }, }, public, int, getRadixDigits]
[;, ln5, =, null, ;, ln5Split, =, null, ;, ln10, =, null, ;, }, }, public, int, getRadixDigits, (, )]
[=, null, ;, ln5Split, =, null, ;, ln10, =, null, ;, }, }, public, int, getRadixDigits, (, ), {, return]
[;, ln5Split, =, null, ;, ln10, =, null, ;, }, }, public, int, getRadixDigits, (, ), {, return, radixDigits, ;]
[=, null, ;, ln10, =, null, ;, }, }, public, int, getRadixDigits, (, ), {, return, radixDigits, ;, }, public]
[;, ln10, =, null, ;, }, }, public, int, getRadixDigits, (, ), {, return, radixDigits, ;, }, public, void, setRoundingMode]
[=, null, ;, }, }, public, int, getRadixDigits, (, ), {, return, radixDigits, ;, }, public, void, setRoundingMode, (, final]
[;, }, }, public, int, getRadixDigits, (, ), {, return, radixDigits, ;, }, public, void, setRoundingMode, (, final, RoundingMode, mode]
[;, }, public, void, setRoundingMode, (, final, RoundingMode, mode, ), {, rMode, =, mode, ;, }, public, RoundingMode, getRoundingMode, (]
[=, mode, ;, }, public, RoundingMode, getRoundingMode, (, ), {, return, rMode, ;, }, public, int, getIEEEFlags, (, ), {]
[;, }, public, RoundingMode, getRoundingMode, (, ), {, return, rMode, ;, }, public, int, getIEEEFlags, (, ), {, return, ieeeFlags]
[;, }, public, int, getIEEEFlags, (, ), {, return, ieeeFlags, ;, }, public, void, clearIEEEFlags, (, ), {, ieeeFlags, =]
[;, }, public, void, clearIEEEFlags, (, ), {, ieeeFlags, =, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags]
[=, 0, ;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &, (, FLAG_INVALID, |]
[;, }, public, void, setIEEEFlags, (, final, int, flags, ), {, ieeeFlags, =, flags, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |]
[=, flags, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (]
[;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |]
[&, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int]
[;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |]
[), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO]
[|, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (, FLAG_INVALID]
[|, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &]
[|, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=]
[|, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {]
[|, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=]
[|, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &]
[|, FLAG_INEXACT, ), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (, FLAG_INVALID]
[), ;, }, public, void, setIEEEFlagsBits, (, final, int, bits, ), {, ieeeFlags, |=, bits, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO]
[|=, bits, &, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, Dfp, newDfp, (]
[;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp, (, this, ), ;, }, public, Dfp, newDfp, (]
[&, (, FLAG_INVALID, |, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, Dfp, newDfp, (, ), {]
[;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp, (, this, ), ;, }, public, Dfp, newDfp, (]
[), ;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp, (, this, ), ;, }, public, Dfp, newDfp]
[|, FLAG_INEXACT, ), ;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp, (, this, ), ;, }, public]
[|, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp, (, this, ), ;]
[|, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp, (, this]
[|, FLAG_DIV_ZERO, |, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp]
[|, FLAG_OVERFLOW, |, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp, (, this]
[|, FLAG_UNDERFLOW, |, FLAG_INEXACT, ), ;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp, (, this, ), ;]
[|, FLAG_INEXACT, ), ;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp, (, this, ), ;, }, public]
[), ;, }, public, Dfp, newDfp, (, ), {, return, new, Dfp, (, this, ), ;, }, public, Dfp, newDfp]
[;, }, public, Dfp, newDfp, (, final, byte, x, ), {, return, new, Dfp, (, this, ,, x, ), ;]
[), ;, }, public, Dfp, newDfp, (, final, byte, x, ), {, return, new, Dfp, (, this, ,, x, )]
[;, }, public, Dfp, newDfp, (, final, int, x, ), {, return, new, Dfp, (, this, ,, x, ), ;]
[,, x, ), ;, }, public, Dfp, newDfp, (, final, int, x, ), {, return, new, Dfp, (, this, ,]
[), ;, }, public, Dfp, newDfp, (, final, int, x, ), {, return, new, Dfp, (, this, ,, x, )]
[;, }, public, Dfp, newDfp, (, final, long, x, ), {, return, new, Dfp, (, this, ,, x, ), ;]
[,, x, ), ;, }, public, Dfp, newDfp, (, final, long, x, ), {, return, new, Dfp, (, this, ,]
[), ;, }, public, Dfp, newDfp, (, final, long, x, ), {, return, new, Dfp, (, this, ,, x, )]
[;, }, public, Dfp, newDfp, (, final, double, x, ), {, return, new, Dfp, (, this, ,, x, ), ;]
[,, x, ), ;, }, public, Dfp, newDfp, (, final, double, x, ), {, return, new, Dfp, (, this, ,]
[), ;, }, public, Dfp, newDfp, (, final, double, x, ), {, return, new, Dfp, (, this, ,, x, )]
[;, }, public, Dfp, newDfp, (, Dfp, d, ), {, return, new, Dfp, (, d, ), ;, }, public, Dfp]
[,, x, ), ;, }, public, Dfp, newDfp, (, Dfp, d, ), {, return, new, Dfp, (, d, ), ;]
[), ;, }, public, Dfp, newDfp, (, Dfp, d, ), {, return, new, Dfp, (, d, ), ;, }, public]
[;, }, public, Dfp, newDfp, (, final, String, s, ), {, return, new, Dfp, (, this, ,, s, ), ;]
[), ;, }, public, Dfp, newDfp, (, final, String, s, ), {, return, new, Dfp, (, this, ,, s, )]
[;, }, public, Dfp, newDfp, (, final, byte, sign, ,, final, byte, nans, ), {, return, new, Dfp, (, this]
[,, s, ), ;, }, public, Dfp, newDfp, (, final, byte, sign, ,, final, byte, nans, ), {, return, new]
[), ;, }, public, Dfp, newDfp, (, final, byte, sign, ,, final, byte, nans, ), {, return, new, Dfp, (]
[;, }, public, Dfp, getZero, (, ), {, return, zero, ;, }, public, Dfp, getOne, (, ), {, return, one]
[,, sign, ,, nans, ), ;, }, public, Dfp, getZero, (, ), {, return, zero, ;, }, public, Dfp, getOne]
[,, nans, ), ;, }, public, Dfp, getZero, (, ), {, return, zero, ;, }, public, Dfp, getOne, (, )]
[), ;, }, public, Dfp, getZero, (, ), {, return, zero, ;, }, public, Dfp, getOne, (, ), {, return]
[;, }, public, Dfp, getOne, (, ), {, return, one, ;, }, public, Class, <, ?, extends, FieldElement, <, Dfp]
[;, }, public, Class, <, ?, extends, FieldElement, <, Dfp, >, >, getRuntimeClass, (, ), {, return, Dfp, ., class]
[;, }, public, Dfp, getTwo, (, ), {, return, two, ;, }, public, Dfp, getSqr2, (, ), {, return, sqr2]
[;, }, public, Dfp, getSqr2, (, ), {, return, sqr2, ;, }, public, Dfp, [, ], getSqr2Split, (, ), {]
[;, }, public, Dfp, [, ], getSqr2Split, (, ), {, return, sqr2Split, ., clone, (, ), ;, }, public, Dfp]
[;, }, public, Dfp, getSqr2Reciprocal, (, ), {, return, sqr2Reciprocal, ;, }, public, Dfp, getSqr3, (, ), {, return, sqr3]
[., clone, (, ), ;, }, public, Dfp, getSqr2Reciprocal, (, ), {, return, sqr2Reciprocal, ;, }, public, Dfp, getSqr3, (]
[;, }, public, Dfp, getSqr3, (, ), {, return, sqr3, ;, }, public, Dfp, getSqr3Reciprocal, (, ), {, return, sqr3Reciprocal]
[;, }, public, Dfp, getSqr3Reciprocal, (, ), {, return, sqr3Reciprocal, ;, }, public, Dfp, getPi, (, ), {, return, pi]
[;, }, public, Dfp, getPi, (, ), {, return, pi, ;, }, public, Dfp, [, ], getPiSplit, (, ), {]
[;, }, public, Dfp, [, ], getPiSplit, (, ), {, return, piSplit, ., clone, (, ), ;, }, public, Dfp]
[;, }, public, Dfp, getE, (, ), {, return, e, ;, }, public, Dfp, [, ], getESplit, (, ), {]
[., clone, (, ), ;, }, public, Dfp, getE, (, ), {, return, e, ;, }, public, Dfp, [, ]]
[;, }, public, Dfp, [, ], getESplit, (, ), {, return, eSplit, ., clone, (, ), ;, }, public, Dfp]
[;, }, public, Dfp, getLn2, (, ), {, return, ln2, ;, }, public, Dfp, [, ], getLn2Split, (, ), {]
[., clone, (, ), ;, }, public, Dfp, getLn2, (, ), {, return, ln2, ;, }, public, Dfp, [, ]]
[;, }, public, Dfp, [, ], getLn2Split, (, ), {, return, ln2Split, ., clone, (, ), ;, }, public, Dfp]
[;, }, public, Dfp, getLn5, (, ), {, return, ln5, ;, }, public, Dfp, [, ], getLn5Split, (, ), {]
[., clone, (, ), ;, }, public, Dfp, getLn5, (, ), {, return, ln5, ;, }, public, Dfp, [, ]]
[;, }, public, Dfp, [, ], getLn5Split, (, ), {, return, ln5Split, ., clone, (, ), ;, }, public, Dfp]
[;, }, public, Dfp, getLn10, (, ), {, return, ln10, ;, }, private, Dfp, [, ], split, (, final, String]
[., clone, (, ), ;, }, public, Dfp, getLn10, (, ), {, return, ln10, ;, }, private, Dfp, [, ]]
[;, }, private, Dfp, [, ], split, (, final, String, a, ), {, Dfp, result, [, ], =, new, Dfp]
[;, boolean, leading, =, true, ;, int, sp, =, 0, ;, int, sig, =, 0, ;, char, [, ], buf]
[], ;, boolean, leading, =, true, ;, int, sp, =, 0, ;, int, sig, =, 0, ;, char, [, ]]
[;, int, sp, =, 0, ;, int, sig, =, 0, ;, char, [, ], buf, =, new, char, [, a]
[;, int, sig, =, 0, ;, char, [, ], buf, =, new, char, [, a, ., length, (, ), ]]
[;, char, [, ], buf, =, new, char, [, a, ., length, (, ), ], ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, []
[], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf]
[., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i]
[;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (]
[;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf]
[<, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, )]
[;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf]
[., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if]
[), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ]]
[++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i]
[=, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&]
[], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, []
[;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =]
[., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=]
[), ;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading]
[), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (]
[&&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ]]
[>=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, []
[[, i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if]
[], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf]
[&&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ]]
[), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (]
[<=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig]
[[, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.']
[], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {]
[), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (]
[=, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig]
[;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %]
[), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig]
[==, '.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if]
[[, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false]
[], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }]
[), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig]
[+=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, radixDigits]
[;, leading, =, false, ;, }, if, (, sig, ==, (, radixDigits, /, 2, ), *, 4, ), {, sp]
[%, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, radixDigits, /, 2, ), *, 4, )]
[), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, radixDigits, /, 2, ), *, 4]
[-, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, radixDigits, /, 2, )]
[), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, radixDigits, /, 2, ), *, 4]
[;, leading, =, false, ;, }, if, (, sig, ==, (, radixDigits, /, 2, ), *, 4, ), {, sp]
[=, false, ;, }, if, (, sig, ==, (, radixDigits, /, 2, ), *, 4, ), {, sp, =, i]
[;, }, if, (, sig, ==, (, radixDigits, /, 2, ), *, 4, ), {, sp, =, i, ;, break]
[), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, []
[==, (, radixDigits, /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf]
[), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, []
[*, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&]
[), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0']
[/, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ]]
[), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0']
[), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, []
[=, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=]
[;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&]
[), {, sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,, new, String, (]
[&&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,]
[&&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0]
[>=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result]
[[, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;]
[], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }]
[&&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0]
[&&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,]
[<=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp, (]
[[, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =]
[], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp]
[&&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,]
[), {, sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,, new, String, (]
[), {, sig, ++, ;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,, new, String, (]
[;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,, new, String, (, buf, ,, 0, ,]
[++, ;, }, }, result, [, 0, ], =, new, Dfp, (, this, ,, new, String, (, buf, ,, 0]
[=, new, Dfp, (, this, ,, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int]
[[, 0, ], =, new, Dfp, (, this, ,, new, String, (, buf, ,, 0, ,, sp, ), ), ;]
[], =, new, Dfp, (, this, ,, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, []
[,, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf]
[,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;]
[,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++]
[), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {]
[;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (]
[;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf]
[<, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, )]
[;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf]
[., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if]
[), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ]]
[++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i]
[=, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&]
[], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, []
[;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp]
[., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=]
[), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <]
[), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =, new, Dfp, (, this]
[&&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =]
[&&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;]
[>=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =]
[[, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, []
[], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ]]
[&&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;]
[&&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =]
[<=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1]
[[, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }]
[], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, []
[&&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =]
[), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =, new, Dfp, (, this]
[<, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =, new, Dfp]
[), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =, new, Dfp, (, this]
[=, '0', ;, }, }, result, [, 1, ], =, new, Dfp, (, this, ,, new, String, (, buf, )]
[[, i, ], =, '0', ;, }, }, result, [, 1, ], =, new, Dfp, (, this, ,, new, String]
[], =, '0', ;, }, }, result, [, 1, ], =, new, Dfp, (, this, ,, new, String, (, buf]
[;, }, }, result, [, 1, ], =, new, Dfp, (, this, ,, new, String, (, buf, ), ), ;]
[=, new, Dfp, (, this, ,, new, String, (, buf, ), ), ;, return, result, ;, }, private, static, void]
[[, 1, ], =, new, Dfp, (, this, ,, new, String, (, buf, ), ), ;, return, result, ;, }]
[], =, new, Dfp, (, this, ,, new, String, (, buf, ), ), ;, return, result, ;, }, private, static]
[;, return, result, ;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (, sqr2String, ==, null]
[,, new, String, (, buf, ), ), ;, return, result, ;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits]
[), ;, return, result, ;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (, sqr2String, ==]
[), ), ;, return, result, ;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (, sqr2String]
[;, }, private, static, void, computeStringConstants, (, final, int, highPrecisionDecimalDigits, ), {, if, (, sqr2String, ==, null, ||, sqr2String, .]
[), {, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits, ,, false, ), ;, final, Dfp, highPrecisionOne, =, new, Dfp]
[||, sqr2String, ., length, (, ), <, highPrecisionDecimalDigits, -, 3, ), {, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits]
[==, null, ||, sqr2String, ., length, (, ), <, highPrecisionDecimalDigits, -, 3, ), {, final, DfpField, highPrecisionField, =, new, DfpField]
[||, sqr2String, ., length, (, ), <, highPrecisionDecimalDigits, -, 3, ), {, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits]
[), {, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits, ,, false, ), ;, final, Dfp, highPrecisionOne, =, new, Dfp]
[<, highPrecisionDecimalDigits, -, 3, ), {, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits, ,, false, ), ;, final, Dfp]
[., length, (, ), <, highPrecisionDecimalDigits, -, 3, ), {, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits, ,, false]
[), {, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits, ,, false, ), ;, final, Dfp, highPrecisionOne, =, new, Dfp]
[-, 3, ), {, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits, ,, false, ), ;, final, Dfp, highPrecisionOne, =]
[), {, final, DfpField, highPrecisionField, =, new, DfpField, (, highPrecisionDecimalDigits, ,, false, ), ;, final, Dfp, highPrecisionOne, =, new, Dfp]
[;, final, Dfp, highPrecisionOne, =, new, Dfp, (, highPrecisionField, ,, 1, ), ;, final, Dfp, highPrecisionTwo, =, new, Dfp, (]
[,, false, ), ;, final, Dfp, highPrecisionOne, =, new, Dfp, (, highPrecisionField, ,, 1, ), ;, final, Dfp, highPrecisionTwo, =]
[), ;, final, Dfp, highPrecisionOne, =, new, Dfp, (, highPrecisionField, ,, 1, ), ;, final, Dfp, highPrecisionTwo, =, new, Dfp]
[;, final, Dfp, highPrecisionTwo, =, new, Dfp, (, highPrecisionField, ,, 2, ), ;, final, Dfp, highPrecisionThree, =, new, Dfp, (]
[,, 1, ), ;, final, Dfp, highPrecisionTwo, =, new, Dfp, (, highPrecisionField, ,, 2, ), ;, final, Dfp, highPrecisionThree, =]
[), ;, final, Dfp, highPrecisionTwo, =, new, Dfp, (, highPrecisionField, ,, 2, ), ;, final, Dfp, highPrecisionThree, =, new, Dfp]
[;, final, Dfp, highPrecisionThree, =, new, Dfp, (, highPrecisionField, ,, 3, ), ;, final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, ., sqrt]
[,, 2, ), ;, final, Dfp, highPrecisionThree, =, new, Dfp, (, highPrecisionField, ,, 3, ), ;, final, Dfp, highPrecisionSqr2, =]
[), ;, final, Dfp, highPrecisionThree, =, new, Dfp, (, highPrecisionField, ,, 3, ), ;, final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, .]
[;, final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, ., sqrt, (, ), ;, sqr2String, =, highPrecisionSqr2, ., toString, (, ), ;, sqr2ReciprocalString]
[,, 3, ), ;, final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, ., sqrt, (, ), ;, sqr2String, =, highPrecisionSqr2, ., toString, (]
[), ;, final, Dfp, highPrecisionSqr2, =, highPrecisionTwo, ., sqrt, (, ), ;, sqr2String, =, highPrecisionSqr2, ., toString, (, ), ;]
[;, sqr2String, =, highPrecisionSqr2, ., toString, (, ), ;, sqr2ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr2, ), ., toString, (]
[., sqrt, (, ), ;, sqr2String, =, highPrecisionSqr2, ., toString, (, ), ;, sqr2ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr2]
[=, highPrecisionSqr2, ., toString, (, ), ;, sqr2ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr2, ), ., toString, (, ), ;]
[;, sqr2ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr2, ), ., toString, (, ), ;, final, Dfp, highPrecisionSqr3, =, highPrecisionThree, .]
[., toString, (, ), ;, sqr2ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr2, ), ., toString, (, ), ;, final, Dfp]
[=, highPrecisionOne, ., divide, (, highPrecisionSqr2, ), ., toString, (, ), ;, final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (]
[;, final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (, ), ;, sqr3String, =, highPrecisionSqr3, ., toString, (, ), ;, sqr3ReciprocalString]
[., toString, (, ), ;, final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (, ), ;, sqr3String, =, highPrecisionSqr3, ., toString]
[., divide, (, highPrecisionSqr2, ), ., toString, (, ), ;, final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (, ), ;]
[), ., toString, (, ), ;, final, Dfp, highPrecisionSqr3, =, highPrecisionThree, ., sqrt, (, ), ;, sqr3String, =, highPrecisionSqr3, .]
[;, sqr3String, =, highPrecisionSqr3, ., toString, (, ), ;, sqr3ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr3, ), ., toString, (]
[., sqrt, (, ), ;, sqr3String, =, highPrecisionSqr3, ., toString, (, ), ;, sqr3ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr3]
[=, highPrecisionSqr3, ., toString, (, ), ;, sqr3ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr3, ), ., toString, (, ), ;]
[;, sqr3ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr3, ), ., toString, (, ), ;, piString, =, computePi, (, highPrecisionOne, ,]
[., toString, (, ), ;, sqr3ReciprocalString, =, highPrecisionOne, ., divide, (, highPrecisionSqr3, ), ., toString, (, ), ;, piString, =]
[=, highPrecisionOne, ., divide, (, highPrecisionSqr3, ), ., toString, (, ), ;, piString, =, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,]
[;, piString, =, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,, highPrecisionThree, ), ., toString, (, ), ;, eString, =, computeExp, (]
[., toString, (, ), ;, piString, =, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,, highPrecisionThree, ), ., toString, (, ), ;]
[., divide, (, highPrecisionSqr3, ), ., toString, (, ), ;, piString, =, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,, highPrecisionThree, )]
[), ., toString, (, ), ;, piString, =, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,, highPrecisionThree, ), ., toString, (, )]
[=, computePi, (, highPrecisionOne, ,, highPrecisionTwo, ,, highPrecisionThree, ), ., toString, (, ), ;, eString, =, computeExp, (, highPrecisionOne, ,]
[;, eString, =, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString, (, ), ;, ln2String, =, computeLn, (, highPrecisionTwo, ,]
[., toString, (, ), ;, eString, =, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString, (, ), ;, ln2String, =]
[,, highPrecisionTwo, ,, highPrecisionThree, ), ., toString, (, ), ;, eString, =, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString]
[,, highPrecisionThree, ), ., toString, (, ), ;, eString, =, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString, (, )]
[), ., toString, (, ), ;, eString, =, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString, (, ), ;, ln2String]
[=, computeExp, (, highPrecisionOne, ,, highPrecisionOne, ), ., toString, (, ), ;, ln2String, =, computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,]
[;, ln2String, =, computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln5String, =, computeLn, (]
[., toString, (, ), ;, ln2String, =, computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;]
[,, highPrecisionOne, ), ., toString, (, ), ;, ln2String, =, computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString]
[), ., toString, (, ), ;, ln2String, =, computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, )]
[=, computeLn, (, highPrecisionTwo, ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln5String, =, computeLn, (, new, Dfp]
[;, ln5String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 5, ), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (]
[., toString, (, ), ;, ln5String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 5, ), ,, highPrecisionOne, ,, highPrecisionTwo]
[,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln5String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 5]
[,, highPrecisionTwo, ), ., toString, (, ), ;, ln5String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 5, ), ,]
[), ., toString, (, ), ;, ln5String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 5, ), ,, highPrecisionOne, ,]
[=, computeLn, (, new, Dfp, (, highPrecisionField, ,, 5, ), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;]
[;, ln10String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 10, ), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (]
[., toString, (, ), ;, ln10String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 10, ), ,, highPrecisionOne, ,, highPrecisionTwo]
[,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln10String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 10]
[,, 5, ), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln10String, =, computeLn, (, new, Dfp, (]
[), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, ln10String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,]
[,, highPrecisionTwo, ), ., toString, (, ), ;, ln10String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 10, ), ,]
[), ., toString, (, ), ;, ln10String, =, computeLn, (, new, Dfp, (, highPrecisionField, ,, 10, ), ,, highPrecisionOne, ,]
[=, computeLn, (, new, Dfp, (, highPrecisionField, ,, 10, ), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;]
[;, }, }, private, static, Dfp, computePi, (, final, Dfp, one, ,, final, Dfp, two, ,, final, Dfp, three, )]
[., toString, (, ), ;, }, }, private, static, Dfp, computePi, (, final, Dfp, one, ,, final, Dfp, two, ,]
[,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, }, }, private, static, Dfp, computePi, (, final, Dfp, one]
[,, 10, ), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, }, }, private, static, Dfp, computePi, (]
[), ,, highPrecisionOne, ,, highPrecisionTwo, ), ., toString, (, ), ;, }, }, private, static, Dfp, computePi, (, final, Dfp]
[,, highPrecisionTwo, ), ., toString, (, ), ;, }, }, private, static, Dfp, computePi, (, final, Dfp, one, ,, final]
[), ., toString, (, ), ;, }, }, private, static, Dfp, computePi, (, final, Dfp, one, ,, final, Dfp, two]
[;, Dfp, yk, =, sqrt2, ., subtract, (, one, ), ;, Dfp, four, =, two, ., add, (, two, )]
[., sqrt, (, ), ;, Dfp, yk, =, sqrt2, ., subtract, (, one, ), ;, Dfp, four, =, two, .]
[;, Dfp, four, =, two, ., add, (, two, ), ;, Dfp, two2kp3, =, two, ;, Dfp, ak, =, two]
[., subtract, (, one, ), ;, Dfp, four, =, two, ., add, (, two, ), ;, Dfp, two2kp3, =, two]
[), ;, Dfp, four, =, two, ., add, (, two, ), ;, Dfp, two2kp3, =, two, ;, Dfp, ak, =]
[;, Dfp, two2kp3, =, two, ;, Dfp, ak, =, two, ., multiply, (, three, ., subtract, (, two, ., multiply]
[., add, (, two, ), ;, Dfp, two2kp3, =, two, ;, Dfp, ak, =, two, ., multiply, (, three, .]
[), ;, Dfp, two2kp3, =, two, ;, Dfp, ak, =, two, ., multiply, (, three, ., subtract, (, two, .]
[;, Dfp, ak, =, two, ., multiply, (, three, ., subtract, (, two, ., multiply, (, sqrt2, ), ), )]
[;, for, (, int, i, =, 1, ;, i, <, 20, ;, i, ++, ), {, final, Dfp, ykM1, =]
[., multiply, (, three, ., subtract, (, two, ., multiply, (, sqrt2, ), ), ), ;, for, (, int, i]
[), ;, for, (, int, i, =, 1, ;, i, <, 20, ;, i, ++, ), {, final, Dfp, ykM1]
[., subtract, (, two, ., multiply, (, sqrt2, ), ), ), ;, for, (, int, i, =, 1, ;, i]
[), ), ;, for, (, int, i, =, 1, ;, i, <, 20, ;, i, ++, ), {, final, Dfp]
[., multiply, (, sqrt2, ), ), ), ;, for, (, int, i, =, 1, ;, i, <, 20, ;, i]
[), ), ), ;, for, (, int, i, =, 1, ;, i, <, 20, ;, i, ++, ), {, final]
[;, i, <, 20, ;, i, ++, ), {, final, Dfp, ykM1, =, yk, ;, final, Dfp, y2, =, yk]
[;, i, ++, ), {, final, Dfp, ykM1, =, yk, ;, final, Dfp, y2, =, yk, ., multiply, (, yk]
[<, 20, ;, i, ++, ), {, final, Dfp, ykM1, =, yk, ;, final, Dfp, y2, =, yk, ., multiply]
[;, i, ++, ), {, final, Dfp, ykM1, =, yk, ;, final, Dfp, y2, =, yk, ., multiply, (, yk]
[), {, final, Dfp, ykM1, =, yk, ;, final, Dfp, y2, =, yk, ., multiply, (, yk, ), ;, final]
[++, ), {, final, Dfp, ykM1, =, yk, ;, final, Dfp, y2, =, yk, ., multiply, (, yk, ), ;]
[;, final, Dfp, y2, =, yk, ., multiply, (, yk, ), ;, final, Dfp, oneMinusY4, =, one, ., subtract, (]
[;, final, Dfp, oneMinusY4, =, one, ., subtract, (, y2, ., multiply, (, y2, ), ), ;, final, Dfp, s]
[., multiply, (, yk, ), ;, final, Dfp, oneMinusY4, =, one, ., subtract, (, y2, ., multiply, (, y2, )]
[), ;, final, Dfp, oneMinusY4, =, one, ., subtract, (, y2, ., multiply, (, y2, ), ), ;, final, Dfp]
[;, final, Dfp, s, =, oneMinusY4, ., sqrt, (, ), ., sqrt, (, ), ;, yk, =, one, ., subtract]
[., subtract, (, y2, ., multiply, (, y2, ), ), ;, final, Dfp, s, =, oneMinusY4, ., sqrt, (, )]
[), ;, final, Dfp, s, =, oneMinusY4, ., sqrt, (, ), ., sqrt, (, ), ;, yk, =, one, .]
[., multiply, (, y2, ), ), ;, final, Dfp, s, =, oneMinusY4, ., sqrt, (, ), ., sqrt, (, )]
[), ), ;, final, Dfp, s, =, oneMinusY4, ., sqrt, (, ), ., sqrt, (, ), ;, yk, =, one]
[;, yk, =, one, ., subtract, (, s, ), ., divide, (, one, ., add, (, s, ), ), ;]
[., sqrt, (, ), ;, yk, =, one, ., subtract, (, s, ), ., divide, (, one, ., add, (]
[., sqrt, (, ), ., sqrt, (, ), ;, yk, =, one, ., subtract, (, s, ), ., divide, (]
[=, one, ., subtract, (, s, ), ., divide, (, one, ., add, (, s, ), ), ;, two2kp3, =]
[;, two2kp3, =, two2kp3, ., multiply, (, four, ), ;, final, Dfp, p, =, one, ., add, (, yk, )]
[., divide, (, one, ., add, (, s, ), ), ;, two2kp3, =, two2kp3, ., multiply, (, four, ), ;]
[., subtract, (, s, ), ., divide, (, one, ., add, (, s, ), ), ;, two2kp3, =, two2kp3, .]
[), ., divide, (, one, ., add, (, s, ), ), ;, two2kp3, =, two2kp3, ., multiply, (, four, )]
[), ;, two2kp3, =, two2kp3, ., multiply, (, four, ), ;, final, Dfp, p, =, one, ., add, (, yk]
[., add, (, s, ), ), ;, two2kp3, =, two2kp3, ., multiply, (, four, ), ;, final, Dfp, p, =]
[), ), ;, two2kp3, =, two2kp3, ., multiply, (, four, ), ;, final, Dfp, p, =, one, ., add, (]
[=, two2kp3, ., multiply, (, four, ), ;, final, Dfp, p, =, one, ., add, (, yk, ), ;, final]
[;, final, Dfp, p, =, one, ., add, (, yk, ), ;, final, Dfp, p2, =, p, ., multiply, (]
[., multiply, (, four, ), ;, final, Dfp, p, =, one, ., add, (, yk, ), ;, final, Dfp, p2]
[), ;, final, Dfp, p, =, one, ., add, (, yk, ), ;, final, Dfp, p2, =, p, ., multiply]
[;, final, Dfp, p2, =, p, ., multiply, (, p, ), ;, ak, =, ak, ., multiply, (, p2, .]
[., add, (, yk, ), ;, final, Dfp, p2, =, p, ., multiply, (, p, ), ;, ak, =, ak]
[), ;, final, Dfp, p2, =, p, ., multiply, (, p, ), ;, ak, =, ak, ., multiply, (, p2]
[;, ak, =, ak, ., multiply, (, p2, ., multiply, (, p2, ), ), ., subtract, (, two2kp3, ., multiply]
[., multiply, (, p, ), ;, ak, =, ak, ., multiply, (, p2, ., multiply, (, p2, ), ), .]
[), ;, ak, =, ak, ., multiply, (, p2, ., multiply, (, p2, ), ), ., subtract, (, two2kp3, .]
[=, ak, ., multiply, (, p2, ., multiply, (, p2, ), ), ., subtract, (, two2kp3, ., multiply, (, yk]
[;, if, (, yk, ., equals, (, ykM1, ), ), {, break, ;, }, }, return, one, ., divide, (]
[., subtract, (, two2kp3, ., multiply, (, yk, ), ., multiply, (, one, ., add, (, yk, ), ., add]
[., multiply, (, p2, ., multiply, (, p2, ), ), ., subtract, (, two2kp3, ., multiply, (, yk, ), .]
[), ., subtract, (, two2kp3, ., multiply, (, yk, ), ., multiply, (, one, ., add, (, yk, ), .]
[., multiply, (, p2, ), ), ., subtract, (, two2kp3, ., multiply, (, yk, ), ., multiply, (, one, .]
[), ), ., subtract, (, two2kp3, ., multiply, (, yk, ), ., multiply, (, one, ., add, (, yk, )]
[), ;, if, (, yk, ., equals, (, ykM1, ), ), {, break, ;, }, }, return, one, ., divide]
[., multiply, (, one, ., add, (, yk, ), ., add, (, yk, ., multiply, (, yk, ), ), )]
[., multiply, (, yk, ), ., multiply, (, one, ., add, (, yk, ), ., add, (, yk, ., multiply]
[), ., multiply, (, one, ., add, (, yk, ), ., add, (, yk, ., multiply, (, yk, ), )]
[), ), ;, if, (, yk, ., equals, (, ykM1, ), ), {, break, ;, }, }, return, one, .]
[., add, (, yk, ., multiply, (, yk, ), ), ), ), ;, if, (, yk, ., equals, (, ykM1]
[., add, (, yk, ), ., add, (, yk, ., multiply, (, yk, ), ), ), ), ;, if, (]
[), ., add, (, yk, ., multiply, (, yk, ), ), ), ), ;, if, (, yk, ., equals, (]
[), ), ), ;, if, (, yk, ., equals, (, ykM1, ), ), {, break, ;, }, }, return, one]
[., multiply, (, yk, ), ), ), ), ;, if, (, yk, ., equals, (, ykM1, ), ), {, break]
[), ), ), ), ;, if, (, yk, ., equals, (, ykM1, ), ), {, break, ;, }, }, return]
[), {, break, ;, }, }, return, one, ., divide, (, ak, ), ;, }, public, static, Dfp, computeExp, (]
[., equals, (, ykM1, ), ), {, break, ;, }, }, return, one, ., divide, (, ak, ), ;, }]
[), ), {, break, ;, }, }, return, one, ., divide, (, ak, ), ;, }, public, static, Dfp, computeExp]
[;, }, public, static, Dfp, computeExp, (, final, Dfp, a, ,, final, Dfp, one, ), {, Dfp, y, =, new]
[., divide, (, ak, ), ;, }, public, static, Dfp, computeExp, (, final, Dfp, a, ,, final, Dfp, one, )]
[), ;, }, public, static, Dfp, computeExp, (, final, Dfp, a, ,, final, Dfp, one, ), {, Dfp, y, =]
[;, Dfp, py, =, new, Dfp, (, one, ), ;, Dfp, f, =, new, Dfp, (, one, ), ;, Dfp]
[), ;, Dfp, py, =, new, Dfp, (, one, ), ;, Dfp, f, =, new, Dfp, (, one, ), ;]
[;, Dfp, f, =, new, Dfp, (, one, ), ;, Dfp, fi, =, new, Dfp, (, one, ), ;, Dfp]
[), ;, Dfp, f, =, new, Dfp, (, one, ), ;, Dfp, fi, =, new, Dfp, (, one, ), ;]
[;, Dfp, fi, =, new, Dfp, (, one, ), ;, Dfp, x, =, new, Dfp, (, one, ), ;, for]
[), ;, Dfp, fi, =, new, Dfp, (, one, ), ;, Dfp, x, =, new, Dfp, (, one, ), ;]
[;, Dfp, x, =, new, Dfp, (, one, ), ;, for, (, int, i, =, 0, ;, i, <, 10000]
[), ;, Dfp, x, =, new, Dfp, (, one, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, x, =, x, .]
[), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, x, =, x]
[;, i, <, 10000, ;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, y, =]
[;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, y, =, y, ., add, (]
[<, 10000, ;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, y, =, y, .]
[;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, y, =, y, ., add, (]
[), {, x, =, x, ., multiply, (, a, ), ;, y, =, y, ., add, (, x, ., divide]
[++, ), {, x, =, x, ., multiply, (, a, ), ;, y, =, y, ., add, (, x, .]
[=, x, ., multiply, (, a, ), ;, y, =, y, ., add, (, x, ., divide, (, f, )]
[;, y, =, y, ., add, (, x, ., divide, (, f, ), ), ;, fi, =, fi, ., add]
[., multiply, (, a, ), ;, y, =, y, ., add, (, x, ., divide, (, f, ), ), ;]
[), ;, y, =, y, ., add, (, x, ., divide, (, f, ), ), ;, fi, =, fi, .]
[=, y, ., add, (, x, ., divide, (, f, ), ), ;, fi, =, fi, ., add, (, one]
[;, fi, =, fi, ., add, (, one, ), ;, f, =, f, ., multiply, (, fi, ), ;, if]
[., add, (, x, ., divide, (, f, ), ), ;, fi, =, fi, ., add, (, one, ), ;]
[), ;, fi, =, fi, ., add, (, one, ), ;, f, =, f, ., multiply, (, fi, ), ;]
[., divide, (, f, ), ), ;, fi, =, fi, ., add, (, one, ), ;, f, =, f, .]
[), ), ;, fi, =, fi, ., add, (, one, ), ;, f, =, f, ., multiply, (, fi, )]
[=, fi, ., add, (, one, ), ;, f, =, f, ., multiply, (, fi, ), ;, if, (, y]
[;, f, =, f, ., multiply, (, fi, ), ;, if, (, y, ., equals, (, py, ), ), {]
[., add, (, one, ), ;, f, =, f, ., multiply, (, fi, ), ;, if, (, y, ., equals]
[), ;, f, =, f, ., multiply, (, fi, ), ;, if, (, y, ., equals, (, py, ), )]
[=, f, ., multiply, (, fi, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;]
[;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y]
[., multiply, (, fi, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ;, }, public, static]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ;, }, public]
[=, new, Dfp, (, y, ), ;, }, return, y, ;, }, public, static, Dfp, computeLn, (, final, Dfp, a]
[;, }, return, y, ;, }, public, static, Dfp, computeLn, (, final, Dfp, a, ,, final, Dfp, one, ,, final]
[), ;, }, return, y, ;, }, public, static, Dfp, computeLn, (, final, Dfp, a, ,, final, Dfp, one, ,]
[;, }, public, static, Dfp, computeLn, (, final, Dfp, a, ,, final, Dfp, one, ,, final, Dfp, two, ), {]
[;, Dfp, x, =, a, ., add, (, new, Dfp, (, a, ., getField, (, ), ,, -, 1, )]
[;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (, x, ), ;, Dfp]
[., divide, (, a, ., add, (, one, ), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;]
[., add, (, new, Dfp, (, a, ., getField, (, ), ,, -, 1, ), ), ., divide, (, a]
[), ., divide, (, a, ., add, (, one, ), ), ;, Dfp, y, =, new, Dfp, (, x, )]
[,, -, 1, ), ), ., divide, (, a, ., add, (, one, ), ), ;, Dfp, y, =, new]
[., getField, (, ), ,, -, 1, ), ), ., divide, (, a, ., add, (, one, ), ), ;]
[), ), ., divide, (, a, ., add, (, one, ), ), ;, Dfp, y, =, new, Dfp, (, x]
[), ), ., divide, (, a, ., add, (, one, ), ), ;, Dfp, y, =, new, Dfp, (, x]
[), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (, x, ), ;]
[., add, (, one, ), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new]
[), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (, x, )]
[;, Dfp, num, =, new, Dfp, (, x, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for]
[), ;, Dfp, num, =, new, Dfp, (, x, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;]
[;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 0, ;, i, <, 10000]
[), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, num, =, num, .]
[), ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, num, =, num]
[;, i, <, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =]
[;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (]
[<, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, .]
[;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (]
[), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;]
[++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, )]
[=, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den]
[;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, Dfp, t, =, num]
[., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +, 2]
[), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, Dfp, t, =]
[=, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, Dfp, t, =, num, ., divide]
[;, den, =, den, +, 2, ;, Dfp, t, =, num, ., divide, (, den, ), ;, y, =, y]
[., multiply, (, x, ), ;, den, =, den, +, 2, ;, Dfp, t, =, num, ., divide, (, den]
[), ;, den, =, den, +, 2, ;, Dfp, t, =, num, ., divide, (, den, ), ;, y, =]
[=, den, +, 2, ;, Dfp, t, =, num, ., divide, (, den, ), ;, y, =, y, ., add]
[;, Dfp, t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;]
[+, 2, ;, Dfp, t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (, t]
[;, Dfp, t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;]
[;, y, =, y, ., add, (, t, ), ;, if, (, y, ., equals, (, py, ), ), {]
[., divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;, if, (, y, ., equals]
[), ;, y, =, y, ., add, (, t, ), ;, if, (, y, ., equals, (, py, ), )]
[=, y, ., add, (, t, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;]
[;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y]
[., add, (, t, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ., multiply, (, two]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ., multiply, (]
[=, new, Dfp, (, y, ), ;, }, return, y, ., multiply, (, two, ), ;, }, }]
[;, }, return, y, ., multiply, (, two, ), ;, }, }]
[), ;, }, return, y, ., multiply, (, two, ), ;, }, }]
[;, }, }]
[., multiply, (, two, ), ;, }, }]
[), ;, }, }]
