[commons, ., math3, ., random, ., Well19937c, ;, public, class, ParetoDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =]
[public, class, ParetoDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =]
[double, scale, ;, private, final, double, shape, ;, private, final, double, solverAbsoluteAccuracy, ;, public, ParetoDistribution, (, ), {, this, (]
[;, private, final, double, shape, ;, private, final, double, solverAbsoluteAccuracy, ;, public, ParetoDistribution, (, ), {, this, (, 1, ,]
[1, ,, 1, ), ;, }, public, ParetoDistribution, (, double, scale, ,, double, shape, ), throws, NotStrictlyPositiveException, {, this, (]
[1, ), ;, }, public, ParetoDistribution, (, double, scale, ,, double, shape, ), throws, NotStrictlyPositiveException, {, this, (, scale, ,]
[;, }, public, ParetoDistribution, (, double, scale, ,, double, shape, ), throws, NotStrictlyPositiveException, {, this, (, scale, ,, shape, ,]
[), ;, }, public, ParetoDistribution, (, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[(, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,]
[scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,, scale, ,]
[double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,, scale, ,, shape, ,]
[public, ParetoDistribution, (, RandomGenerator, rng, ,, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (]
[,, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[,, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, scale, <=]
[,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, scale, <=, 0, ), {, throw]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[super, (, rng, ), ;, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,]
[(, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, if, (]
[(, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, if, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, if, (, shape, <=]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, if, (, shape, <=, 0, ), {, throw]
[(, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[(, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[,, scale, ), ;, }, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,]
[}, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }]
[}, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;]
[NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =]
[LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;]
[LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;]
[shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =]
[this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return]
[inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double, getShape, (, ), {, return]
[public, double, getShape, (, ), {, return, shape, ;, }, public, double, density, (, double, x, ), {, if, (]
[public, double, getShape, (, ), {, return, shape, ;, }, public, double, density, (, double, x, ), {, if, (]
[getShape, (, ), {, return, shape, ;, }, public, double, density, (, double, x, ), {, if, (, x, <]
[return, shape, ;, }, public, double, density, (, double, x, ), {, if, (, x, <, scale, ), {, return]
[public, double, density, (, double, x, ), {, if, (, x, <, scale, ), {, return, 0, ;, }, return]
[public, double, density, (, double, x, ), {, if, (, x, <, scale, ), {, return, 0, ;, }, return]
[public, double, density, (, double, x, ), {, if, (, x, <, scale, ), {, return, 0, ;, }, return]
[public, double, density, (, double, x, ), {, if, (, x, <, scale, ), {, return, 0, ;, }, return]
[double, x, ), {, if, (, x, <, scale, ), {, return, 0, ;, }, return, FastMath, ., pow, (]
[), {, if, (, x, <, scale, ), {, return, 0, ;, }, return, FastMath, ., pow, (, scale, ,]
[(, x, <, scale, ), {, return, 0, ;, }, return, FastMath, ., pow, (, scale, ,, shape, ), /]
[(, x, <, scale, ), {, return, 0, ;, }, return, FastMath, ., pow, (, scale, ,, shape, ), /]
[), {, return, 0, ;, }, return, FastMath, ., pow, (, scale, ,, shape, ), /, FastMath, ., pow, (]
[return, 0, ;, }, return, FastMath, ., pow, (, scale, ,, shape, ), /, FastMath, ., pow, (, x, ,]
[return, 0, ;, }, return, FastMath, ., pow, (, scale, ,, shape, ), /, FastMath, ., pow, (, x, ,]
[;, }, return, FastMath, ., pow, (, scale, ,, shape, ), /, FastMath, ., pow, (, x, ,, shape, +]
[FastMath, ., pow, (, scale, ,, shape, ), /, FastMath, ., pow, (, x, ,, shape, +, 1, ), *]
[x, ,, shape, +, 1, ), *, shape, ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (]
[x, ,, shape, +, 1, ), *, shape, ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (]
[shape, +, 1, ), *, shape, ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=]
[*, shape, ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale, ), {, return]
[public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale, ), {, return, 0, ;, }, return]
[public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale, ), {, return, 0, ;, }, return]
[cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale, ), {, return, 0, ;, }, return, 1, -]
[cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale, ), {, return, 0, ;, }, return, 1, -]
[), {, if, (, x, <=, scale, ), {, return, 0, ;, }, return, 1, -, FastMath, ., pow, (]
[), {, if, (, x, <=, scale, ), {, return, 0, ;, }, return, 1, -, FastMath, ., pow, (]
[if, (, x, <=, scale, ), {, return, 0, ;, }, return, 1, -, FastMath, ., pow, (, scale, /]
[x, <=, scale, ), {, return, 0, ;, }, return, 1, -, FastMath, ., pow, (, scale, /, x, ,]
[;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[@, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return, probability, (]
[@, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return, probability, (, x0, ,]
[NumberIsTooLargeException, {, return, probability, (, x0, ,, x1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[@, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, if, (]
[@, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, if, (]
[protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, if, (, shape, <=]
[), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, if, (, shape, <=, 1, ), {, return]
[), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, if, (, shape, <=, 1, ), {, return]
[public, double, getNumericalMean, (, ), {, if, (, shape, <=, 1, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return]
[public, double, getNumericalMean, (, ), {, if, (, shape, <=, 1, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return]
[public, double, getNumericalMean, (, ), {, if, (, shape, <=, 1, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return]
[getNumericalMean, (, ), {, if, (, shape, <=, 1, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, shape, *]
[), {, if, (, shape, <=, 1, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, shape, *, scale, /]
[{, if, (, shape, <=, 1, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, shape, *, scale, /, (]
[{, if, (, shape, <=, 1, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, shape, *, scale, /, (]
[(, shape, <=, 1, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, shape, *, scale, /, (, shape, -]
[return, shape, *, scale, /, (, shape, -, 1, ), ;, }, public, double, getNumericalVariance, (, ), {, if, (]
[return, shape, *, scale, /, (, shape, -, 1, ), ;, }, public, double, getNumericalVariance, (, ), {, if, (]
[*, scale, /, (, shape, -, 1, ), ;, }, public, double, getNumericalVariance, (, ), {, if, (, shape, <=]
[shape, -, 1, ), ;, }, public, double, getNumericalVariance, (, ), {, if, (, shape, <=, 2, ), {, return]
[shape, -, 1, ), ;, }, public, double, getNumericalVariance, (, ), {, if, (, shape, <=, 2, ), {, return]
[getNumericalVariance, (, ), {, if, (, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =]
[getNumericalVariance, (, ), {, if, (, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =]
[), {, if, (, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -]
[(, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return]
[(, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return]
[(, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return]
[(, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return]
[(, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return]
[<=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return, scale, *]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return, scale, *, scale, *]
[return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return, scale, *, scale, *, shape, /]
[Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return, scale, *, scale, *, shape, /, (]
[Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return, scale, *, scale, *, shape, /, (]
[POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return, scale, *, scale, *, shape, /, (, s, *]
[double, s, =, shape, -, 1, ;, return, scale, *, scale, *, shape, /, (, s, *, s, ), /]
[s, =, shape, -, 1, ;, return, scale, *, scale, *, shape, /, (, s, *, s, ), /, (]
[s, =, shape, -, 1, ;, return, scale, *, scale, *, shape, /, (, s, *, s, ), /, (]
[shape, -, 1, ;, return, scale, *, scale, *, shape, /, (, s, *, s, ), /, (, shape, -]
[(, s, *, s, ), /, (, shape, -, 2, ), ;, }, public, double, getSupportLowerBound, (, ), {, return]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return]
[isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, final, double, n, =]
[isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, final, double, n, =]
[}, @, Override, public, double, sample, (, ), {, final, double, n, =, random, ., nextDouble, (, ), ;, return]
[}, @, Override, public, double, sample, (, ), {, final, double, n, =, random, ., nextDouble, (, ), ;, return]
[Override, public, double, sample, (, ), {, final, double, n, =, random, ., nextDouble, (, ), ;, return, scale, /]
[Override, public, double, sample, (, ), {, final, double, n, =, random, ., nextDouble, (, ), ;, return, scale, /]
[(, ), {, final, double, n, =, random, ., nextDouble, (, ), ;, return, scale, /, FastMath, ., pow, (]
[{, final, double, n, =, random, ., nextDouble, (, ), ;, return, scale, /, FastMath, ., pow, (, n, ,]
[{, final, double, n, =, random, ., nextDouble, (, ), ;, return, scale, /, FastMath, ., pow, (, n, ,]
[double, n, =, random, ., nextDouble, (, ), ;, return, scale, /, FastMath, ., pow, (, n, ,, 1, /]
