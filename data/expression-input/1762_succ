[;, private, final, Field, <, T, >, field, ;, private, final, OpenIntToFieldHashMap, <, T, >, entries, ;, private, final, int]
[,, 0, ), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ), {, this, .]
[), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ), {, this, ., field, =]
[=, field, ;, virtualSize, =, dimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, protected]
[., field, =, field, ;, virtualSize, =, dimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;]
[;, virtualSize, =, dimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, protected, SparseFieldVector, (]
[=, dimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, protected, SparseFieldVector, (, SparseFieldVector, <]
[;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, protected, SparseFieldVector, (, SparseFieldVector, <, T, >]
[=, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, protected, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ,]
[;, }, protected, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ,, int, resize, ), {, field, =, v, ., field]
[), ;, }, protected, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ,, int, resize, ), {, field, =, v, .]
[=, v, ., field, ;, virtualSize, =, v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToFieldHashMap, <]
[;, virtualSize, =, v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, v]
[., field, ;, virtualSize, =, v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >]
[=, v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, v, ., entries]
[;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, v, ., entries, ), ;, }, public, SparseFieldVector, (, Field, <]
[+, resize, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, v, ., entries, ), ;, }, public, SparseFieldVector, (]
[., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, v, ., entries, ), ;]
[;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, v, ., entries, ), ;, }, public, SparseFieldVector, (, Field, <]
[=, new, OpenIntToFieldHashMap, <, T, >, (, v, ., entries, ), ;, }, public, SparseFieldVector, (, Field, <, T, >]
[;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ,, int, expectedSize, ), {, this, .]
[), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ,, int, expectedSize, ), {, this]
[., entries, ), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ,, int, expectedSize, )]
[=, field, ;, virtualSize, =, dimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ,, expectedSize, ), ;]
[., field, =, field, ;, virtualSize, =, dimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ,, expectedSize]
[;, virtualSize, =, dimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ,, expectedSize, ), ;, }, public]
[=, dimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ,, expectedSize, ), ;, }, public, SparseFieldVector, (]
[;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ,, expectedSize, ), ;, }, public, SparseFieldVector, (, Field, <]
[=, new, OpenIntToFieldHashMap, <, T, >, (, field, ,, expectedSize, ), ;, }, public, SparseFieldVector, (, Field, <, T, >]
[;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, T, [, ], values, ), throws, NullArgumentException, {, MathUtils]
[,, expectedSize, ), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, T, [, ], values, ), throws]
[), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, T, [, ], values, ), throws, NullArgumentException, {]
[;, this, ., field, =, field, ;, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >]
[., checkNotNull, (, values, ), ;, this, ., field, =, field, ;, virtualSize, =, values, ., length, ;, entries, =]
[), ;, this, ., field, =, field, ;, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToFieldHashMap, <, T]
[=, field, ;, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;]
[., field, =, field, ;, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field]
[;, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, for, (]
[=, values, ., length, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, for, (, int, key]
[;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, for, (, int, key, =, 0, ;, key]
[., length, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, for, (, int, key, =, 0]
[=, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, for, (, int, key, =, 0, ;, key, <, values]
[;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, T, value]
[), ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, T]
[;, key, <, values, ., length, ;, key, ++, ), {, T, value, =, values, [, key, ], ;, entries]
[;, key, ++, ), {, T, value, =, values, [, key, ], ;, entries, ., put, (, key, ,, value]
[<, values, ., length, ;, key, ++, ), {, T, value, =, values, [, key, ], ;, entries, ., put]
[;, key, ++, ), {, T, value, =, values, [, key, ], ;, entries, ., put, (, key, ,, value]
[., length, ;, key, ++, ), {, T, value, =, values, [, key, ], ;, entries, ., put, (, key]
[), {, T, value, =, values, [, key, ], ;, entries, ., put, (, key, ,, value, ), ;, }]
[++, ), {, T, value, =, values, [, key, ], ;, entries, ., put, (, key, ,, value, ), ;]
[;, entries, ., put, (, key, ,, value, ), ;, }, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >, v]
[[, key, ], ;, entries, ., put, (, key, ,, value, ), ;, }, }, public, SparseFieldVector, (, SparseFieldVector, <]
[], ;, entries, ., put, (, key, ,, value, ), ;, }, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >]
[;, }, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ), {, field, =, v, ., field, ;, virtualSize]
[., put, (, key, ,, value, ), ;, }, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ), {]
[,, value, ), ;, }, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ), {, field, =, v, .]
[), ;, }, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ), {, field, =, v, ., field, ;]
[=, v, ., field, ;, virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >]
[;, virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, v, ., getEntries]
[., field, ;, virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, v]
[=, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, v, ., getEntries, (, )]
[;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, v, ., getEntries, (, ), ), ;, }, private, OpenIntToFieldHashMap, <]
[., getDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, v, ., getEntries, (, ), ), ;]
[=, new, OpenIntToFieldHashMap, <, T, >, (, v, ., getEntries, (, ), ), ;, }, private, OpenIntToFieldHashMap, <, T, >]
[;, }, private, OpenIntToFieldHashMap, <, T, >, getEntries, (, ), {, return, entries, ;, }, public, FieldVector, <, T, >]
[), ;, }, private, OpenIntToFieldHashMap, <, T, >, getEntries, (, ), {, return, entries, ;, }, public, FieldVector, <, T]
[., getEntries, (, ), ), ;, }, private, OpenIntToFieldHashMap, <, T, >, getEntries, (, ), {, return, entries, ;, }]
[;, }, public, FieldVector, <, T, >, add, (, SparseFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[;, SparseFieldVector, <, T, >, res, =, (, SparseFieldVector, <, T, >, ), copy, (, ), ;, OpenIntToFieldHashMap, <, T]
[), ;, SparseFieldVector, <, T, >, res, =, (, SparseFieldVector, <, T, >, ), copy, (, ), ;, OpenIntToFieldHashMap, <]
[., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =, (, SparseFieldVector, <, T, >, ), copy, (]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, .]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, T, value, =]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, )]
[;, int, key, =, iter, ., key, (, ), ;, T, value, =, iter, ., value, (, ), ;, if]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, T, value, =, iter, ., value]
[;, T, value, =, iter, ., value, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {]
[., key, (, ), ;, T, value, =, iter, ., value, (, ), ;, if, (, entries, ., containsKey, (]
[;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get]
[., value, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key]
[), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), ., add, (, value, ), )]
[., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), .]
[), ), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), ., add, (, value, )]
[;, }, else, {, res, ., setEntry, (, key, ,, value, ), ;, }, }, return, res, ;, }, public]
[., setEntry, (, key, ,, entries, ., get, (, key, ), ., add, (, value, ), ), ;, }, else]
[,, entries, ., get, (, key, ), ., add, (, value, ), ), ;, }, else, {, res, ., setEntry]
[), ;, }, else, {, res, ., setEntry, (, key, ,, value, ), ;, }, }, return, res, ;, }]
[., add, (, value, ), ), ;, }, else, {, res, ., setEntry, (, key, ,, value, ), ;, }]
[., get, (, key, ), ., add, (, value, ), ), ;, }, else, {, res, ., setEntry, (, key]
[), ., add, (, value, ), ), ;, }, else, {, res, ., setEntry, (, key, ,, value, ), ;]
[), ), ;, }, else, {, res, ., setEntry, (, key, ,, value, ), ;, }, }, return, res, ;]
[;, }, }, return, res, ;, }, public, FieldVector, <, T, >, append, (, SparseFieldVector, <, T, >, v, )]
[., setEntry, (, key, ,, value, ), ;, }, }, return, res, ;, }, public, FieldVector, <, T, >, append]
[,, value, ), ;, }, }, return, res, ;, }, public, FieldVector, <, T, >, append, (, SparseFieldVector, <, T]
[), ;, }, }, return, res, ;, }, public, FieldVector, <, T, >, append, (, SparseFieldVector, <, T, >, v]
[;, }, public, FieldVector, <, T, >, append, (, SparseFieldVector, <, T, >, v, ), {, SparseFieldVector, <, T, >]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (, iter]
[,, v, ., getDimension, (, ), ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., entries, .]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (]
[., getDimension, (, ), ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., entries, ., iterator, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (]
[), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), +, virtualSize, ,]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (]
[;, res, ., setEntry, (, iter, ., key, (, ), +, virtualSize, ,, iter, ., value, (, ), ), ;]
[., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), +, virtualSize, ,, iter, ., value]
[;, }, return, res, ;, }, public, FieldVector, <, T, >, append, (, FieldVector, <, T, >, v, ), {]
[., setEntry, (, iter, ., key, (, ), +, virtualSize, ,, iter, ., value, (, ), ), ;, }, return]
[,, iter, ., value, (, ), ), ;, }, return, res, ;, }, public, FieldVector, <, T, >, append, (]
[+, virtualSize, ,, iter, ., value, (, ), ), ;, }, return, res, ;, }, public, FieldVector, <, T, >]
[., key, (, ), +, virtualSize, ,, iter, ., value, (, ), ), ;, }, return, res, ;, }, public]
[,, iter, ., value, (, ), ), ;, }, return, res, ;, }, public, FieldVector, <, T, >, append, (]
[), ;, }, return, res, ;, }, public, FieldVector, <, T, >, append, (, FieldVector, <, T, >, v, )]
[., value, (, ), ), ;, }, return, res, ;, }, public, FieldVector, <, T, >, append, (, FieldVector, <]
[;, }, public, FieldVector, <, T, >, append, (, FieldVector, <, T, >, v, ), {, if, (, v, instanceof]
[), {, return, append, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n]
[instanceof, SparseFieldVector, <, ?, >, ), {, return, append, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }]
[;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, FieldVector, <, T, >, res, =]
[), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, FieldVector, <, T, >, res]
[), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, FieldVector, <, T, >, res]
[;, FieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,, n, ), ;, for, (]
[., getDimension, (, ), ;, FieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,, n]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (]
[,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry]
[;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), )]
[<, n, ;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i]
[;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), )]
[), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), ), ;, }, return]
[++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), ), ;, }]
[;, }, return, res, ;, }, }, public, FieldVector, <, T, >, append, (, T, d, ), throws, NullArgumentException, {]
[., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), ), ;, }, return, res, ;, }]
[,, v, ., getEntry, (, i, ), ), ;, }, return, res, ;, }, }, public, FieldVector, <, T, >]
[+, virtualSize, ,, v, ., getEntry, (, i, ), ), ;, }, return, res, ;, }, }, public, FieldVector, <]
[,, v, ., getEntry, (, i, ), ), ;, }, return, res, ;, }, }, public, FieldVector, <, T, >]
[), ;, }, return, res, ;, }, }, public, FieldVector, <, T, >, append, (, T, d, ), throws, NullArgumentException]
[., getEntry, (, i, ), ), ;, }, return, res, ;, }, }, public, FieldVector, <, T, >, append, (]
[), ), ;, }, return, res, ;, }, }, public, FieldVector, <, T, >, append, (, T, d, ), throws]
[;, }, }, public, FieldVector, <, T, >, append, (, T, d, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[;, FieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,, 1, ), ;, res, .]
[., checkNotNull, (, d, ), ;, FieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,]
[), ;, FieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,, 1, ), ;, res]
[;, res, ., setEntry, (, virtualSize, ,, d, ), ;, return, res, ;, }, public, FieldVector, <, T, >, copy]
[,, 1, ), ;, res, ., setEntry, (, virtualSize, ,, d, ), ;, return, res, ;, }, public, FieldVector, <]
[), ;, res, ., setEntry, (, virtualSize, ,, d, ), ;, return, res, ;, }, public, FieldVector, <, T, >]
[;, return, res, ;, }, public, FieldVector, <, T, >, copy, (, ), {, return, new, SparseFieldVector, <, T, >]
[., setEntry, (, virtualSize, ,, d, ), ;, return, res, ;, }, public, FieldVector, <, T, >, copy, (, )]
[,, d, ), ;, return, res, ;, }, public, FieldVector, <, T, >, copy, (, ), {, return, new, SparseFieldVector]
[), ;, return, res, ;, }, public, FieldVector, <, T, >, copy, (, ), {, return, new, SparseFieldVector, <, T]
[;, }, public, FieldVector, <, T, >, copy, (, ), {, return, new, SparseFieldVector, <, T, >, (, this, )]
[;, }, public, T, dotProduct, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension]
[), ;, }, public, T, dotProduct, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, .]
[;, T, res, =, field, ., getZero, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, .]
[), ;, T, res, =, field, ., getZero, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries]
[., getDimension, (, ), ), ;, T, res, =, field, ., getZero, (, ), ;, OpenIntToFieldHashMap, <, T, >, .]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[., getZero, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, =, res, .]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, res, =, res, ., add, (, v, ., getEntry, (, iter, .]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, =, res, ., add, (, v, .]
[;, res, =, res, ., add, (, v, ., getEntry, (, iter, ., key, (, ), ), ., multiply, (]
[., advance, (, ), ;, res, =, res, ., add, (, v, ., getEntry, (, iter, ., key, (, )]
[=, res, ., add, (, v, ., getEntry, (, iter, ., key, (, ), ), ., multiply, (, iter, .]
[;, }, return, res, ;, }, public, FieldVector, <, T, >, ebeDivide, (, FieldVector, <, T, >, v, ), throws]
[., add, (, v, ., getEntry, (, iter, ., key, (, ), ), ., multiply, (, iter, ., value, (]
[), ;, }, return, res, ;, }, public, FieldVector, <, T, >, ebeDivide, (, FieldVector, <, T, >, v, )]
[., multiply, (, iter, ., value, (, ), ), ), ;, }, return, res, ;, }, public, FieldVector, <, T]
[., getEntry, (, iter, ., key, (, ), ), ., multiply, (, iter, ., value, (, ), ), ), ;]
[), ., multiply, (, iter, ., value, (, ), ), ), ;, }, return, res, ;, }, public, FieldVector, <]
[., key, (, ), ), ., multiply, (, iter, ., value, (, ), ), ), ;, }, return, res, ;]
[), ), ;, }, return, res, ;, }, public, FieldVector, <, T, >, ebeDivide, (, FieldVector, <, T, >, v]
[., value, (, ), ), ), ;, }, return, res, ;, }, public, FieldVector, <, T, >, ebeDivide, (, FieldVector]
[;, }, public, FieldVector, <, T, >, ebeDivide, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {]
[;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, OpenIntToFieldHashMap, <, T, >]
[), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, OpenIntToFieldHashMap, <, T]
[., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, )]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (, iter]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (]
[), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, .]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (]
[;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., divide, (, v]
[., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, )]
[;, }, return, res, ;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T, >, v, ), throws]
[., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., divide, (, v, ., getEntry]
[,, iter, ., value, (, ), ., divide, (, v, ., getEntry, (, iter, ., key, (, ), ), )]
[., key, (, ), ,, iter, ., value, (, ), ., divide, (, v, ., getEntry, (, iter, ., key]
[), ;, }, return, res, ;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T, >, v, )]
[., divide, (, v, ., getEntry, (, iter, ., key, (, ), ), ), ), ;, }, return, res, ;]
[., value, (, ), ., divide, (, v, ., getEntry, (, iter, ., key, (, ), ), ), ), ;]
[), ), ;, }, return, res, ;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T, >, v]
[., getEntry, (, iter, ., key, (, ), ), ), ), ;, }, return, res, ;, }, public, FieldVector, <]
[), ), ), ;, }, return, res, ;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T, >]
[., key, (, ), ), ), ), ;, }, return, res, ;, }, public, FieldVector, <, T, >, ebeMultiply, (]
[;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, OpenIntToFieldHashMap, <, T, >]
[), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, OpenIntToFieldHashMap, <, T]
[., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, )]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (, iter]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (]
[), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, .]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (]
[;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (, v]
[., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, )]
[;, }, return, res, ;, }, @, Deprecated, public, T, [, ], getData, (, ), {, return, toArray, (, )]
[., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (, v, ., getEntry]
[,, iter, ., value, (, ), ., multiply, (, v, ., getEntry, (, iter, ., key, (, ), ), )]
[., key, (, ), ,, iter, ., value, (, ), ., multiply, (, v, ., getEntry, (, iter, ., key]
[), ;, }, return, res, ;, }, @, Deprecated, public, T, [, ], getData, (, ), {, return, toArray, (]
[., multiply, (, v, ., getEntry, (, iter, ., key, (, ), ), ), ), ;, }, return, res, ;]
[., value, (, ), ., multiply, (, v, ., getEntry, (, iter, ., key, (, ), ), ), ), ;]
[), ), ;, }, return, res, ;, }, @, Deprecated, public, T, [, ], getData, (, ), {, return, toArray]
[., getEntry, (, iter, ., key, (, ), ), ), ), ;, }, return, res, ;, }, @, Deprecated, public]
[), ), ), ;, }, return, res, ;, }, @, Deprecated, public, T, [, ], getData, (, ), {, return]
[., key, (, ), ), ), ), ;, }, return, res, ;, }, @, Deprecated, public, T, [, ], getData]
[;, }, @, Deprecated, public, T, [, ], getData, (, ), {, return, toArray, (, ), ;, }, public, int]
[;, }, public, int, getDimension, (, ), {, return, virtualSize, ;, }, public, T, getEntry, (, int, index, ), throws]
[;, }, public, T, getEntry, (, int, index, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, return, entries, .]
[;, return, entries, ., get, (, index, ), ;, }, public, Field, <, T, >, getField, (, ), {, return]
[), ;, return, entries, ., get, (, index, ), ;, }, public, Field, <, T, >, getField, (, ), {]
[;, }, public, Field, <, T, >, getField, (, ), {, return, field, ;, }, public, FieldVector, <, T, >]
[., get, (, index, ), ;, }, public, Field, <, T, >, getField, (, ), {, return, field, ;, }]
[), ;, }, public, Field, <, T, >, getField, (, ), {, return, field, ;, }, public, FieldVector, <, T]
[;, }, public, FieldVector, <, T, >, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, ), ;, checkIndex]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, )]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, ), ;, checkIndex]
[;, }, checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -, 1, ), ;, SparseFieldVector, <, T, >]
[,, n, ), ;, }, checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -, 1, ), ;, SparseFieldVector]
[., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -, 1, )]
[), ;, }, checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -, 1, ), ;, SparseFieldVector, <, T]
[;, checkIndex, (, index, +, n, -, 1, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T]
[), ;, checkIndex, (, index, +, n, -, 1, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <]
[;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,, n, ), ;, int, end]
[), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,, n, ), ;, int]
[-, 1, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,, n, )]
[+, n, -, 1, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,]
[-, 1, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,, n, )]
[), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,, n, ), ;, int]
[;, int, end, =, index, +, n, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (]
[,, n, ), ;, int, end, =, index, +, n, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries]
[), ;, int, end, =, index, +, n, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[+, n, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, )]
[;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, )]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&]
[;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,]
[., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (]
[), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }, }, return]
[&&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), )]
[>=, index, &&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (]
[&&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), )]
[), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }, }, return]
[<, end, ), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }]
[), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }, }, return]
[;, }, }, return, res, ;, }, public, FieldVector, <, T, >, mapAdd, (, T, d, ), throws, NullArgumentException, {]
[., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }, }, return, res, ;, }]
[,, iter, ., value, (, ), ), ;, }, }, return, res, ;, }, public, FieldVector, <, T, >, mapAdd]
[-, index, ,, iter, ., value, (, ), ), ;, }, }, return, res, ;, }, public, FieldVector, <, T]
[,, iter, ., value, (, ), ), ;, }, }, return, res, ;, }, public, FieldVector, <, T, >, mapAdd]
[), ;, }, }, return, res, ;, }, public, FieldVector, <, T, >, mapAdd, (, T, d, ), throws, NullArgumentException]
[., value, (, ), ), ;, }, }, return, res, ;, }, public, FieldVector, <, T, >, mapAdd, (, T]
[;, }, public, FieldVector, <, T, >, mapAdd, (, T, d, ), throws, NullArgumentException, {, return, copy, (, ), .]
[;, }, public, FieldVector, <, T, >, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i, =]
[., mapAddToSelf, (, d, ), ;, }, public, FieldVector, <, T, >, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {]
[), ;, }, public, FieldVector, <, T, >, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i]
[;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, getEntry, (, i, ), ., add, (]
[;, i, ++, ), {, setEntry, (, i, ,, getEntry, (, i, ), ., add, (, d, ), ), ;]
[<, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, getEntry, (, i, ), ., add, (, d, )]
[;, i, ++, ), {, setEntry, (, i, ,, getEntry, (, i, ), ., add, (, d, ), ), ;]
[), {, setEntry, (, i, ,, getEntry, (, i, ), ., add, (, d, ), ), ;, }, return, this]
[++, ), {, setEntry, (, i, ,, getEntry, (, i, ), ., add, (, d, ), ), ;, }, return]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapDivide, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException]
[,, getEntry, (, i, ), ., add, (, d, ), ), ;, }, return, this, ;, }, public, FieldVector, <]
[), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapDivide, (, T, d, ), throws, NullArgumentException, ,]
[., add, (, d, ), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapDivide, (, T]
[), ., add, (, d, ), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapDivide, (]
[), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapDivide, (, T, d, ), throws, NullArgumentException]
[;, }, public, FieldVector, <, T, >, mapDivide, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {, return, copy, (]
[;, }, public, FieldVector, <, T, >, mapDivideToSelf, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {, OpenIntToFieldHashMap, <, T]
[., mapDivideToSelf, (, d, ), ;, }, public, FieldVector, <, T, >, mapDivideToSelf, (, T, d, ), throws, NullArgumentException, ,]
[), ;, }, public, FieldVector, <, T, >, mapDivideToSelf, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {, OpenIntToFieldHashMap, <]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,, iter, .]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (]
[;, entries, ., put, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., divide, (, d]
[., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,, iter, ., value, (, )]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapInv, (, ), throws, MathArithmeticException, {, return, copy, (]
[., put, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., divide, (, d, ), )]
[,, iter, ., value, (, ), ., divide, (, d, ), ), ;, }, return, this, ;, }, public, FieldVector]
[., key, (, ), ,, iter, ., value, (, ), ., divide, (, d, ), ), ;, }, return, this]
[), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapInv, (, ), throws, MathArithmeticException, {, return, copy]
[., divide, (, d, ), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapInv, (, )]
[., value, (, ), ., divide, (, d, ), ), ;, }, return, this, ;, }, public, FieldVector, <, T]
[), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapInv, (, ), throws, MathArithmeticException, {, return]
[;, }, public, FieldVector, <, T, >, mapInv, (, ), throws, MathArithmeticException, {, return, copy, (, ), ., mapInvToSelf, (]
[;, }, public, FieldVector, <, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, for, (, int, i, =, 0, ;]
[., mapInvToSelf, (, ), ;, }, public, FieldVector, <, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, for, (, int]
[;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, field, ., getOne, (, ), ., divide]
[;, i, ++, ), {, setEntry, (, i, ,, field, ., getOne, (, ), ., divide, (, getEntry, (, i]
[<, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, field, ., getOne, (, ), ., divide, (, getEntry]
[;, i, ++, ), {, setEntry, (, i, ,, field, ., getOne, (, ), ., divide, (, getEntry, (, i]
[), {, setEntry, (, i, ,, field, ., getOne, (, ), ., divide, (, getEntry, (, i, ), ), )]
[++, ), {, setEntry, (, i, ,, field, ., getOne, (, ), ., divide, (, getEntry, (, i, ), )]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapMultiply, (, T, d, ), throws, NullArgumentException, {, return]
[,, field, ., getOne, (, ), ., divide, (, getEntry, (, i, ), ), ), ;, }, return, this, ;]
[), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapMultiply, (, T, d, ), throws, NullArgumentException, {]
[., divide, (, getEntry, (, i, ), ), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >]
[., getOne, (, ), ., divide, (, getEntry, (, i, ), ), ), ;, }, return, this, ;, }, public]
[), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapMultiply, (, T, d, ), throws, NullArgumentException]
[), ), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapMultiply, (, T, d, ), throws]
[;, }, public, FieldVector, <, T, >, mapMultiply, (, T, d, ), throws, NullArgumentException, {, return, copy, (, ), .]
[;, }, public, FieldVector, <, T, >, mapMultiplyToSelf, (, T, d, ), throws, NullArgumentException, {, OpenIntToFieldHashMap, <, T, >, .]
[., mapMultiplyToSelf, (, d, ), ;, }, public, FieldVector, <, T, >, mapMultiplyToSelf, (, T, d, ), throws, NullArgumentException, {]
[), ;, }, public, FieldVector, <, T, >, mapMultiplyToSelf, (, T, d, ), throws, NullArgumentException, {, OpenIntToFieldHashMap, <, T, >]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,, iter, .]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (]
[;, entries, ., put, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (, d]
[., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,, iter, ., value, (, )]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapSubtract, (, T, d, ), throws, NullArgumentException, {, return]
[., put, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (, d, ), )]
[,, iter, ., value, (, ), ., multiply, (, d, ), ), ;, }, return, this, ;, }, public, FieldVector]
[., key, (, ), ,, iter, ., value, (, ), ., multiply, (, d, ), ), ;, }, return, this]
[), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapSubtract, (, T, d, ), throws, NullArgumentException, {]
[., multiply, (, d, ), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapSubtract, (, T]
[., value, (, ), ., multiply, (, d, ), ), ;, }, return, this, ;, }, public, FieldVector, <, T]
[), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapSubtract, (, T, d, ), throws, NullArgumentException]
[;, }, public, FieldVector, <, T, >, mapSubtract, (, T, d, ), throws, NullArgumentException, {, return, copy, (, ), .]
[;, }, public, FieldVector, <, T, >, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {, return, mapAddToSelf, (, field, .]
[., mapSubtractToSelf, (, d, ), ;, }, public, FieldVector, <, T, >, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {]
[), ;, }, public, FieldVector, <, T, >, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {, return, mapAddToSelf, (, field]
[;, }, public, FieldMatrix, <, T, >, outerProduct, (, SparseFieldVector, <, T, >, v, ), {, final, int, n, =]
[), ;, }, public, FieldMatrix, <, T, >, outerProduct, (, SparseFieldVector, <, T, >, v, ), {, final, int, n]
[., subtract, (, d, ), ), ;, }, public, FieldMatrix, <, T, >, outerProduct, (, SparseFieldVector, <, T, >, v]
[., getZero, (, ), ., subtract, (, d, ), ), ;, }, public, FieldMatrix, <, T, >, outerProduct, (, SparseFieldVector]
[), ), ;, }, public, FieldMatrix, <, T, >, outerProduct, (, SparseFieldVector, <, T, >, v, ), {, final, int]
[;, SparseFieldMatrix, <, T, >, res, =, new, SparseFieldMatrix, <, T, >, (, field, ,, virtualSize, ,, n, ), ;]
[., getDimension, (, ), ;, SparseFieldMatrix, <, T, >, res, =, new, SparseFieldMatrix, <, T, >, (, field, ,, virtualSize]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[,, virtualSize, ,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;]
[,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, .]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, OpenIntToFieldHashMap, <, T, >]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter2, =, v, ., entries, .]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter2, =]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter2, =, v, ., entries, ., iterator, (, ), ;, while, (, iter2]
[., advance, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter2, =, v, ., entries, ., iterator, (, )]
[;, while, (, iter2, ., hasNext, (, ), ), {, iter2, ., advance, (, ), ;, res, ., setEntry, (]
[., iterator, (, ), ;, while, (, iter2, ., hasNext, (, ), ), {, iter2, ., advance, (, ), ;]
[., entries, ., iterator, (, ), ;, while, (, iter2, ., hasNext, (, ), ), {, iter2, ., advance, (]
[), {, iter2, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter2, .]
[., hasNext, (, ), ), {, iter2, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (]
[;, res, ., setEntry, (, iter, ., key, (, ), ,, iter2, ., key, (, ), ,, iter, ., value]
[., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter2, ., key, (, )]
[;, }, }, return, res, ;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >, v, )]
[., setEntry, (, iter, ., key, (, ), ,, iter2, ., key, (, ), ,, iter, ., value, (, )]
[,, iter2, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (, iter2, ., value, (, )]
[., key, (, ), ,, iter2, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (, iter2]
[,, iter, ., value, (, ), ., multiply, (, iter2, ., value, (, ), ), ), ;, }, }, return]
[., key, (, ), ,, iter, ., value, (, ), ., multiply, (, iter2, ., value, (, ), ), )]
[), ;, }, }, return, res, ;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >, v]
[., multiply, (, iter2, ., value, (, ), ), ), ;, }, }, return, res, ;, }, public, FieldMatrix, <]
[., value, (, ), ., multiply, (, iter2, ., value, (, ), ), ), ;, }, }, return, res, ;]
[), ), ;, }, }, return, res, ;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >]
[., value, (, ), ), ), ;, }, }, return, res, ;, }, public, FieldMatrix, <, T, >, outerProduct, (]
[;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >, v, ), {, if, (, v, instanceof]
[), {, return, outerProduct, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n]
[instanceof, SparseFieldVector, <, ?, >, ), {, return, outerProduct, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }]
[;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, FieldMatrix, <, T, >, res, =]
[), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, FieldMatrix, <, T, >, res]
[), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, FieldMatrix, <, T, >, res]
[;, FieldMatrix, <, T, >, res, =, new, SparseFieldMatrix, <, T, >, (, field, ,, virtualSize, ,, n, ), ;]
[., getDimension, (, ), ;, FieldMatrix, <, T, >, res, =, new, SparseFieldMatrix, <, T, >, (, field, ,, virtualSize]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[,, virtualSize, ,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;]
[,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, .]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, row, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, int, row, =, iter, ., key, (, ), ;, FieldElement, <, T]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, row, =, iter, ., key, (, )]
[;, int, row, =, iter, ., key, (, ), ;, FieldElement, <, T, >, value, =, iter, ., value, (]
[., advance, (, ), ;, int, row, =, iter, ., key, (, ), ;, FieldElement, <, T, >, value, =]
[;, FieldElement, <, T, >, value, =, iter, ., value, (, ), ;, for, (, int, col, =, 0, ;]
[., key, (, ), ;, FieldElement, <, T, >, value, =, iter, ., value, (, ), ;, for, (, int]
[;, for, (, int, col, =, 0, ;, col, <, n, ;, col, ++, ), {, res, ., setEntry, (]
[., value, (, ), ;, for, (, int, col, =, 0, ;, col, <, n, ;, col, ++, ), {]
[;, col, <, n, ;, col, ++, ), {, res, ., setEntry, (, row, ,, col, ,, value, ., multiply]
[;, col, ++, ), {, res, ., setEntry, (, row, ,, col, ,, value, ., multiply, (, v, ., getEntry]
[<, n, ;, col, ++, ), {, res, ., setEntry, (, row, ,, col, ,, value, ., multiply, (, v]
[;, col, ++, ), {, res, ., setEntry, (, row, ,, col, ,, value, ., multiply, (, v, ., getEntry]
[), {, res, ., setEntry, (, row, ,, col, ,, value, ., multiply, (, v, ., getEntry, (, col, )]
[++, ), {, res, ., setEntry, (, row, ,, col, ,, value, ., multiply, (, v, ., getEntry, (, col]
[;, }, }, return, res, ;, }, }, public, FieldVector, <, T, >, projection, (, FieldVector, <, T, >, v]
[., setEntry, (, row, ,, col, ,, value, ., multiply, (, v, ., getEntry, (, col, ), ), ), ;]
[,, col, ,, value, ., multiply, (, v, ., getEntry, (, col, ), ), ), ;, }, }, return, res]
[,, value, ., multiply, (, v, ., getEntry, (, col, ), ), ), ;, }, }, return, res, ;, }]
[), ;, }, }, return, res, ;, }, }, public, FieldVector, <, T, >, projection, (, FieldVector, <, T, >]
[., multiply, (, v, ., getEntry, (, col, ), ), ), ;, }, }, return, res, ;, }, }, public]
[), ), ;, }, }, return, res, ;, }, }, public, FieldVector, <, T, >, projection, (, FieldVector, <, T]
[., getEntry, (, col, ), ), ), ;, }, }, return, res, ;, }, }, public, FieldVector, <, T, >]
[), ), ), ;, }, }, return, res, ;, }, }, public, FieldVector, <, T, >, projection, (, FieldVector, <]
[;, }, }, public, FieldVector, <, T, >, projection, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException]
[;, return, v, ., mapMultiply, (, dotProduct, (, v, ), ., divide, (, v, ., dotProduct, (, v, ), )]
[), ;, return, v, ., mapMultiply, (, dotProduct, (, v, ), ., divide, (, v, ., dotProduct, (, v, )]
[., getDimension, (, ), ), ;, return, v, ., mapMultiply, (, dotProduct, (, v, ), ., divide, (, v, .]
[;, }, public, void, set, (, T, value, ), {, MathUtils, ., checkNotNull, (, value, ), ;, for, (, int]
[., mapMultiply, (, dotProduct, (, v, ), ., divide, (, v, ., dotProduct, (, v, ), ), ), ;, }]
[), ;, }, public, void, set, (, T, value, ), {, MathUtils, ., checkNotNull, (, value, ), ;, for, (]
[., divide, (, v, ., dotProduct, (, v, ), ), ), ;, }, public, void, set, (, T, value, )]
[), ., divide, (, v, ., dotProduct, (, v, ), ), ), ;, }, public, void, set, (, T, value]
[), ), ;, }, public, void, set, (, T, value, ), {, MathUtils, ., checkNotNull, (, value, ), ;, for]
[., dotProduct, (, v, ), ), ), ;, }, public, void, set, (, T, value, ), {, MathUtils, ., checkNotNull]
[), ), ), ;, }, public, void, set, (, T, value, ), {, MathUtils, ., checkNotNull, (, value, ), ;]
[;, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,]
[., checkNotNull, (, value, ), ;, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i]
[;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, value, ), ;, }, }, public, void]
[;, i, ++, ), {, setEntry, (, i, ,, value, ), ;, }, }, public, void, setEntry, (, int, index]
[<, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, value, ), ;, }, }, public, void, setEntry, (]
[;, i, ++, ), {, setEntry, (, i, ,, value, ), ;, }, }, public, void, setEntry, (, int, index]
[), {, setEntry, (, i, ,, value, ), ;, }, }, public, void, setEntry, (, int, index, ,, T, value]
[++, ), {, setEntry, (, i, ,, value, ), ;, }, }, public, void, setEntry, (, int, index, ,, T]
[;, }, }, public, void, setEntry, (, int, index, ,, T, value, ), throws, NullArgumentException, ,, OutOfRangeException, {, MathUtils, .]
[,, value, ), ;, }, }, public, void, setEntry, (, int, index, ,, T, value, ), throws, NullArgumentException, ,, OutOfRangeException]
[), ;, }, }, public, void, setEntry, (, int, index, ,, T, value, ), throws, NullArgumentException, ,, OutOfRangeException, {, MathUtils]
[;, checkIndex, (, index, ), ;, entries, ., put, (, index, ,, value, ), ;, }, public, void, setSubVector, (]
[., checkNotNull, (, value, ), ;, checkIndex, (, index, ), ;, entries, ., put, (, index, ,, value, ), ;]
[), ;, checkIndex, (, index, ), ;, entries, ., put, (, index, ,, value, ), ;, }, public, void, setSubVector]
[;, entries, ., put, (, index, ,, value, ), ;, }, public, void, setSubVector, (, int, index, ,, FieldVector, <]
[), ;, entries, ., put, (, index, ,, value, ), ;, }, public, void, setSubVector, (, int, index, ,, FieldVector]
[;, }, public, void, setSubVector, (, int, index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {, checkIndex, (]
[., put, (, index, ,, value, ), ;, }, public, void, setSubVector, (, int, index, ,, FieldVector, <, T, >]
[,, value, ), ;, }, public, void, setSubVector, (, int, index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException]
[), ;, }, public, void, setSubVector, (, int, index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {, checkIndex]
[;, checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, final, int, n, =, v, .]
[), ;, checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, final, int, n, =, v]
[;, final, int, n, =, v, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ;, final, int, n, =, v, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i]
[-, 1, ), ;, final, int, n, =, v, ., getDimension, (, ), ;, for, (, int, i, =, 0]
[+, v, ., getDimension, (, ), -, 1, ), ;, final, int, n, =, v, ., getDimension, (, ), ;]
[-, 1, ), ;, final, int, n, =, v, ., getDimension, (, ), ;, for, (, int, i, =, 0]
[., getDimension, (, ), -, 1, ), ;, final, int, n, =, v, ., getDimension, (, ), ;, for, (]
[), ;, final, int, n, =, v, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, setEntry, (, i, +]
[., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, i, <, n, ;, i, ++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry, (, i]
[;, i, ++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry, (, i, ), ), ;, }]
[<, n, ;, i, ++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry, (, i, ), )]
[;, i, ++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry, (, i, ), ), ;, }]
[), {, setEntry, (, i, +, index, ,, v, ., getEntry, (, i, ), ), ;, }, }, public, SparseFieldVector]
[++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry, (, i, ), ), ;, }, }, public]
[;, }, }, public, SparseFieldVector, <, T, >, subtract, (, SparseFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[,, v, ., getEntry, (, i, ), ), ;, }, }, public, SparseFieldVector, <, T, >, subtract, (, SparseFieldVector, <]
[+, index, ,, v, ., getEntry, (, i, ), ), ;, }, }, public, SparseFieldVector, <, T, >, subtract, (]
[,, v, ., getEntry, (, i, ), ), ;, }, }, public, SparseFieldVector, <, T, >, subtract, (, SparseFieldVector, <]
[), ;, }, }, public, SparseFieldVector, <, T, >, subtract, (, SparseFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {]
[., getEntry, (, i, ), ), ;, }, }, public, SparseFieldVector, <, T, >, subtract, (, SparseFieldVector, <, T, >]
[), ), ;, }, }, public, SparseFieldVector, <, T, >, subtract, (, SparseFieldVector, <, T, >, v, ), throws, DimensionMismatchException]
[;, SparseFieldVector, <, T, >, res, =, (, SparseFieldVector, <, T, >, ), copy, (, ), ;, OpenIntToFieldHashMap, <, T]
[), ;, SparseFieldVector, <, T, >, res, =, (, SparseFieldVector, <, T, >, ), copy, (, ), ;, OpenIntToFieldHashMap, <]
[., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =, (, SparseFieldVector, <, T, >, ), copy, (]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, .]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, entries]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, )]
[;, int, key, =, iter, ., key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, entries, ., containsKey, (]
[;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get]
[., key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key]
[), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), ., subtract, (, iter, ., value]
[., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), .]
[), ), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), ., subtract, (, iter, .]
[;, }, else, {, res, ., setEntry, (, key, ,, field, ., getZero, (, ), ., subtract, (, iter, .]
[., setEntry, (, key, ,, entries, ., get, (, key, ), ., subtract, (, iter, ., value, (, ), )]
[,, entries, ., get, (, key, ), ., subtract, (, iter, ., value, (, ), ), ), ;, }, else]
[), ;, }, else, {, res, ., setEntry, (, key, ,, field, ., getZero, (, ), ., subtract, (, iter]
[., subtract, (, iter, ., value, (, ), ), ), ;, }, else, {, res, ., setEntry, (, key, ,]
[., get, (, key, ), ., subtract, (, iter, ., value, (, ), ), ), ;, }, else, {, res]
[), ., subtract, (, iter, ., value, (, ), ), ), ;, }, else, {, res, ., setEntry, (, key]
[), ), ;, }, else, {, res, ., setEntry, (, key, ,, field, ., getZero, (, ), ., subtract, (]
[., value, (, ), ), ), ;, }, else, {, res, ., setEntry, (, key, ,, field, ., getZero, (]
[;, }, }, return, res, ;, }, public, FieldVector, <, T, >, subtract, (, FieldVector, <, T, >, v, )]
[., setEntry, (, key, ,, field, ., getZero, (, ), ., subtract, (, iter, ., value, (, ), ), )]
[,, field, ., getZero, (, ), ., subtract, (, iter, ., value, (, ), ), ), ;, }, }, return]
[), ;, }, }, return, res, ;, }, public, FieldVector, <, T, >, subtract, (, FieldVector, <, T, >, v]
[., subtract, (, iter, ., value, (, ), ), ), ;, }, }, return, res, ;, }, public, FieldVector, <]
[., getZero, (, ), ., subtract, (, iter, ., value, (, ), ), ), ;, }, }, return, res, ;]
[), ), ;, }, }, return, res, ;, }, public, FieldVector, <, T, >, subtract, (, FieldVector, <, T, >]
[., value, (, ), ), ), ;, }, }, return, res, ;, }, public, FieldVector, <, T, >, subtract, (]
[;, }, public, FieldVector, <, T, >, subtract, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, if, (]
[), {, return, subtract, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n]
[instanceof, SparseFieldVector, <, ?, >, ), {, return, subtract, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }]
[;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, checkVectorDimensions, (, n, ), ;, SparseFieldVector]
[), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, checkVectorDimensions, (, n, ), ;]
[), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, checkVectorDimensions, (, n, ), ;]
[;, checkVectorDimensions, (, n, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, )]
[., getDimension, (, ), ;, checkVectorDimensions, (, n, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T]
[;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, for, (, int, i]
[), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, entries, .]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, entries]
[;, i, <, n, ;, i, ++, ), {, if, (, entries, ., containsKey, (, i, ), ), {, res]
[;, i, ++, ), {, if, (, entries, ., containsKey, (, i, ), ), {, res, ., setEntry, (, i]
[<, n, ;, i, ++, ), {, if, (, entries, ., containsKey, (, i, ), ), {, res, ., setEntry]
[;, i, ++, ), {, if, (, entries, ., containsKey, (, i, ), ), {, res, ., setEntry, (, i]
[), {, if, (, entries, ., containsKey, (, i, ), ), {, res, ., setEntry, (, i, ,, entries, .]
[++, ), {, if, (, entries, ., containsKey, (, i, ), ), {, res, ., setEntry, (, i, ,, entries]
[), {, res, ., setEntry, (, i, ,, entries, ., get, (, i, ), ., subtract, (, v, ., getEntry]
[., containsKey, (, i, ), ), {, res, ., setEntry, (, i, ,, entries, ., get, (, i, ), .]
[), ), {, res, ., setEntry, (, i, ,, entries, ., get, (, i, ), ., subtract, (, v, .]
[;, }, else, {, res, ., setEntry, (, i, ,, field, ., getZero, (, ), ., subtract, (, v, .]
[., setEntry, (, i, ,, entries, ., get, (, i, ), ., subtract, (, v, ., getEntry, (, i, )]
[,, entries, ., get, (, i, ), ., subtract, (, v, ., getEntry, (, i, ), ), ), ;, }]
[), ;, }, else, {, res, ., setEntry, (, i, ,, field, ., getZero, (, ), ., subtract, (, v]
[., subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, else, {, res, ., setEntry, (, i]
[., get, (, i, ), ., subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, else, {]
[), ., subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, else, {, res, ., setEntry, (]
[), ), ;, }, else, {, res, ., setEntry, (, i, ,, field, ., getZero, (, ), ., subtract, (]
[., getEntry, (, i, ), ), ), ;, }, else, {, res, ., setEntry, (, i, ,, field, ., getZero]
[), ), ), ;, }, else, {, res, ., setEntry, (, i, ,, field, ., getZero, (, ), ., subtract]
[;, }, }, return, res, ;, }, }, public, T, [, ], toArray, (, ), {, T, [, ], res]
[., setEntry, (, i, ,, field, ., getZero, (, ), ., subtract, (, v, ., getEntry, (, i, ), )]
[,, field, ., getZero, (, ), ., subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, }]
[), ;, }, }, return, res, ;, }, }, public, T, [, ], toArray, (, ), {, T, [, ]]
[., subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, }, return, res, ;, }, }, public]
[., getZero, (, ), ., subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, }, return, res]
[), ), ;, }, }, return, res, ;, }, }, public, T, [, ], toArray, (, ), {, T, []
[., getEntry, (, i, ), ), ), ;, }, }, return, res, ;, }, }, public, T, [, ], toArray]
[), ), ), ;, }, }, return, res, ;, }, }, public, T, [, ], toArray, (, ), {, T]
[;, }, }, public, T, [, ], toArray, (, ), {, T, [, ], res, =, MathArrays, ., buildArray, (]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[., buildArray, (, field, ,, virtualSize, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (]
[,, virtualSize, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, .]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, [, iter, .]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, res, [, iter, ., key, (, ), ], =, iter, ., value]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, [, iter, ., key, (, ), ]]
[;, res, [, iter, ., key, (, ), ], =, iter, ., value, (, ), ;, }, return, res, ;]
[., advance, (, ), ;, res, [, iter, ., key, (, ), ], =, iter, ., value, (, ), ;]
[=, iter, ., value, (, ), ;, }, return, res, ;, }, private, void, checkIndex, (, final, int, index, )]
[[, iter, ., key, (, ), ], =, iter, ., value, (, ), ;, }, return, res, ;, }, private]
[], =, iter, ., value, (, ), ;, }, return, res, ;, }, private, void, checkIndex, (, final, int, index]
[., key, (, ), ], =, iter, ., value, (, ), ;, }, return, res, ;, }, private, void, checkIndex]
[;, }, return, res, ;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index]
[., value, (, ), ;, }, return, res, ;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException]
[;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||, index]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, protected]
[||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, getDimension, (, ), -]
[<, 0, ||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, getDimension, (]
[||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, getDimension, (, ), -]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, protected]
[>=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, getDimension, (, ), -, 1, )]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, protected]
[;, }, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, getDimension, (, ), !=, n]
[,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, protected, void, checkVectorDimensions, (, int, n, ), throws]
[,, getDimension, (, ), -, 1, ), ;, }, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {]
[), ;, }, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, getDimension, (, ), !=]
[-, 1, ), ;, }, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, getDimension, (]
[), ;, }, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, getDimension, (, ), !=]
[), {, throw, new, DimensionMismatchException, (, getDimension, (, ), ,, n, ), ;, }, }, public, FieldVector, <, T, >]
[!=, n, ), {, throw, new, DimensionMismatchException, (, getDimension, (, ), ,, n, ), ;, }, }, public, FieldVector, <]
[), {, throw, new, DimensionMismatchException, (, getDimension, (, ), ,, n, ), ;, }, }, public, FieldVector, <, T, >]
[;, }, }, public, FieldVector, <, T, >, add, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, if]
[,, n, ), ;, }, }, public, FieldVector, <, T, >, add, (, FieldVector, <, T, >, v, ), throws]
[), ;, }, }, public, FieldVector, <, T, >, add, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {]
[), {, return, add, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n]
[instanceof, SparseFieldVector, <, ?, >, ), {, return, add, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }]
[;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, checkVectorDimensions, (, n, ), ;, SparseFieldVector]
[), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, checkVectorDimensions, (, n, ), ;]
[), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, checkVectorDimensions, (, n, ), ;]
[;, checkVectorDimensions, (, n, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,]
[., getDimension, (, ), ;, checkVectorDimensions, (, n, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T]
[;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,, getDimension, (, ), ), ;]
[), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,, getDimension, (, ), )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (]
[,, getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,, v, ., getEntry, (, i]
[;, i, ++, ), {, res, ., setEntry, (, i, ,, v, ., getEntry, (, i, ), ., add, (]
[<, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,, v, ., getEntry, (, i, ), .]
[;, i, ++, ), {, res, ., setEntry, (, i, ,, v, ., getEntry, (, i, ), ., add, (]
[), {, res, ., setEntry, (, i, ,, v, ., getEntry, (, i, ), ., add, (, getEntry, (, i]
[++, ), {, res, ., setEntry, (, i, ,, v, ., getEntry, (, i, ), ., add, (, getEntry, (]
[;, }, return, res, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31]
[., setEntry, (, i, ,, v, ., getEntry, (, i, ), ., add, (, getEntry, (, i, ), ), )]
[,, v, ., getEntry, (, i, ), ., add, (, getEntry, (, i, ), ), ), ;, }, return, res]
[), ;, }, return, res, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =]
[., add, (, getEntry, (, i, ), ), ), ;, }, return, res, ;, }, }, @, Override, public, int]
[., getEntry, (, i, ), ., add, (, getEntry, (, i, ), ), ), ;, }, return, res, ;, }]
[), ., add, (, getEntry, (, i, ), ), ), ;, }, return, res, ;, }, }, @, Override, public]
[), ), ;, }, return, res, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, prime]
[), ), ), ;, }, return, res, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int]
[;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =]
[;, int, result, =, 1, ;, result, =, prime, *, result, +, (, (, field, ==, null, ), ?, 0]
[;, result, =, prime, *, result, +, (, (, field, ==, null, ), ?, 0, :, field, ., hashCode, (]
[=, prime, *, result, +, (, (, field, ==, null, ), ?, 0, :, field, ., hashCode, (, ), )]
[;, result, =, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator]
[+, (, (, field, ==, null, ), ?, 0, :, field, ., hashCode, (, ), ), ;, result, =, prime]
[*, result, +, (, (, field, ==, null, ), ?, 0, :, field, ., hashCode, (, ), ), ;, result]
[+, (, (, field, ==, null, ), ?, 0, :, field, ., hashCode, (, ), ), ;, result, =, prime]
[;, result, =, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator]
[), ;, result, =, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, .]
[?, 0, :, field, ., hashCode, (, ), ), ;, result, =, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap, <]
[), ?, 0, :, field, ., hashCode, (, ), ), ;, result, =, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap]
[==, null, ), ?, 0, :, field, ., hashCode, (, ), ), ;, result, =, prime, *, result, +, virtualSize]
[), ?, 0, :, field, ., hashCode, (, ), ), ;, result, =, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap]
[:, field, ., hashCode, (, ), ), ;, result, =, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >]
[), ;, result, =, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, .]
[., hashCode, (, ), ), ;, result, =, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator]
[=, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, )]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[+, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter]
[*, result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while]
[+, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter]
[;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, temp, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, int, temp, =, iter, ., value, (, ), ., hashCode, (, )]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, temp, =, iter, ., value, (, )]
[;, int, temp, =, iter, ., value, (, ), ., hashCode, (, ), ;, result, =, prime, *, result, +]
[., advance, (, ), ;, int, temp, =, iter, ., value, (, ), ., hashCode, (, ), ;, result, =]
[;, result, =, prime, *, result, +, temp, ;, }, return, result, ;, }, @, Override, public, boolean, equals, (]
[., hashCode, (, ), ;, result, =, prime, *, result, +, temp, ;, }, return, result, ;, }, @, Override]
[., value, (, ), ., hashCode, (, ), ;, result, =, prime, *, result, +, temp, ;, }, return, result]
[=, prime, *, result, +, temp, ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj]
[;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[+, temp, ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[*, result, +, temp, ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {]
[+, temp, ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, SparseFieldVector, <, ?, >, ), ), {, return]
[==, obj, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, SparseFieldVector, <, ?, >, ), )]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, SparseFieldVector, <, ?, >, ), ), {, return]
[;, }, if, (, !, (, obj, instanceof, SparseFieldVector, <, ?, >, ), ), {, return, false, ;, }, @]
[), {, return, false, ;, }, @, SuppressWarnings, (, "unchecked", ), SparseFieldVector, <, T, >, other, =, (, SparseFieldVector, <]
[), {, return, false, ;, }, @, SuppressWarnings, (, "unchecked", ), SparseFieldVector, <, T, >, other, =, (, SparseFieldVector, <]
[), ), {, return, false, ;, }, @, SuppressWarnings, (, "unchecked", ), SparseFieldVector, <, T, >, other, =, (, SparseFieldVector]
[instanceof, SparseFieldVector, <, ?, >, ), ), {, return, false, ;, }, @, SuppressWarnings, (, "unchecked", ), SparseFieldVector, <, T]
[;, }, @, SuppressWarnings, (, "unchecked", ), SparseFieldVector, <, T, >, other, =, (, SparseFieldVector, <, T, >, ), obj]
[SparseFieldVector, <, T, >, other, =, (, SparseFieldVector, <, T, >, ), obj, ;, if, (, field, ==, null, )]
[), SparseFieldVector, <, T, >, other, =, (, SparseFieldVector, <, T, >, ), obj, ;, if, (, field, ==, null]
[;, if, (, field, ==, null, ), {, if, (, other, ., field, !=, null, ), {, return, false, ;]
[;, if, (, field, ==, null, ), {, if, (, other, ., field, !=, null, ), {, return, false, ;]
[), {, if, (, other, ., field, !=, null, ), {, return, false, ;, }, }, else, if, (, !]
[==, null, ), {, if, (, other, ., field, !=, null, ), {, return, false, ;, }, }, else, if]
[), {, if, (, other, ., field, !=, null, ), {, return, false, ;, }, }, else, if, (, !]
[), {, return, false, ;, }, }, else, if, (, !, field, ., equals, (, other, ., field, ), )]
[!=, null, ), {, return, false, ;, }, }, else, if, (, !, field, ., equals, (, other, ., field]
[., field, !=, null, ), {, return, false, ;, }, }, else, if, (, !, field, ., equals, (, other]
[), {, return, false, ;, }, }, else, if, (, !, field, ., equals, (, other, ., field, ), )]
[;, }, }, else, if, (, !, field, ., equals, (, other, ., field, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, OpenIntToFieldHashMap]
[), {, return, false, ;, }, if, (, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, OpenIntToFieldHashMap]
[., equals, (, other, ., field, ), ), {, return, false, ;, }, if, (, virtualSize, !=, other, ., virtualSize]
[), ), {, return, false, ;, }, if, (, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }]
[., field, ), ), {, return, false, ;, }, if, (, virtualSize, !=, other, ., virtualSize, ), {, return, false]
[;, }, if, (, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, OpenIntToFieldHashMap, <, T, >, .]
[), {, return, false, ;, }, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;]
[!=, other, ., virtualSize, ), {, return, false, ;, }, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, .]
[), {, return, false, ;, }, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;]
[., virtualSize, ), {, return, false, ;, }, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (]
[;, }, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, .]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, T, test, =, other]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[), {, iter, ., advance, (, ), ;, T, test, =, other, ., getEntry, (, iter, ., key, (, )]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, T, test, =, other, ., getEntry, (, iter]
[;, T, test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (, !, test, .]
[., advance, (, ), ;, T, test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if]
[;, if, (, !, test, ., equals, (, iter, ., value, (, ), ), ), {, return, false, ;, }]
[., getEntry, (, iter, ., key, (, ), ), ;, if, (, !, test, ., equals, (, iter, ., value]
[), ;, if, (, !, test, ., equals, (, iter, ., value, (, ), ), ), {, return, false, ;]
[., key, (, ), ), ;, if, (, !, test, ., equals, (, iter, ., value, (, ), ), )]
[), {, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;, while]
[), {, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;, while]
[., equals, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }, iter, =, other, .]
[), ), {, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;]
[., value, (, ), ), ), {, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), .]
[;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext]
[=, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, T, test, =, iter]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, .]
[), {, iter, ., advance, (, ), ;, T, test, =, iter, ., value, (, ), ;, if, (, !]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, T, test, =, iter, ., value, (, )]
[;, T, test, =, iter, ., value, (, ), ;, if, (, !, test, ., equals, (, getEntry, (, iter]
[., advance, (, ), ;, T, test, =, iter, ., value, (, ), ;, if, (, !, test, ., equals]
[;, if, (, !, test, ., equals, (, getEntry, (, iter, ., key, (, ), ), ), ), {, return]
[., value, (, ), ;, if, (, !, test, ., equals, (, getEntry, (, iter, ., key, (, ), )]
[), {, return, false, ;, }, }, return, true, ;, }, }]
[), {, return, false, ;, }, }, return, true, ;, }, }]
[., equals, (, getEntry, (, iter, ., key, (, ), ), ), ), {, return, false, ;, }, }, return]
[), ), {, return, false, ;, }, }, return, true, ;, }, }]
[), ), ), {, return, false, ;, }, }, return, true, ;, }, }]
[., key, (, ), ), ), ), {, return, false, ;, }, }, return, true, ;, }, }]
[;, }, }, return, true, ;, }, }]
[;, }, }]
