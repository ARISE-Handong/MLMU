[math3, ., util, ., Precision, ;, public, class, DiagonalMatrix, extends, AbstractRealMatrix, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[;, private, final, double, [, ], data, ;, public, DiagonalMatrix, (, final, int, dimension, ), throws, NotStrictlyPositiveException, {, super, (]
[final, double, [, ], data, ;, public, DiagonalMatrix, (, final, int, dimension, ), throws, NotStrictlyPositiveException, {, super, (, dimension, ,]
[], data, ;, public, DiagonalMatrix, (, final, int, dimension, ), throws, NotStrictlyPositiveException, {, super, (, dimension, ,, dimension, ), ;]
[;, public, DiagonalMatrix, (, final, int, dimension, ), throws, NotStrictlyPositiveException, {, super, (, dimension, ,, dimension, ), ;, data, =]
[(, final, int, dimension, ), throws, NotStrictlyPositiveException, {, super, (, dimension, ,, dimension, ), ;, data, =, new, double, []
[=, new, double, [, dimension, ], ;, }, public, DiagonalMatrix, (, final, double, [, ], d, ), {, this, (]
[double, [, dimension, ], ;, }, public, DiagonalMatrix, (, final, double, [, ], d, ), {, this, (, d, ,]
[true, ), ;, }, public, DiagonalMatrix, (, final, double, [, ], d, ,, final, boolean, copyArray, ), throws, NullArgumentException, {]
[true, ), ;, }, public, DiagonalMatrix, (, final, double, [, ], d, ,, final, boolean, copyArray, ), throws, NullArgumentException, {]
[public, DiagonalMatrix, (, final, double, [, ], d, ,, final, boolean, copyArray, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[final, double, [, ], d, ,, final, boolean, copyArray, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, d, ), ;]
[[, ], d, ,, final, boolean, copyArray, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, d, ), ;, data, =]
[[, ], d, ,, final, boolean, copyArray, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, d, ), ;, data, =]
[d, ,, final, boolean, copyArray, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, d, ), ;, data, =, copyArray, ?]
[d, ,, final, boolean, copyArray, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, d, ), ;, data, =, copyArray, ?]
[throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, d, ), ;, data, =, copyArray, ?, d, ., clone, (, ), :]
[Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (]
[Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (]
[RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, rowDimension, !=]
[int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, rowDimension, !=, columnDimension, ), {, throw]
[final, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, rowDimension, !=, columnDimension, ), {, throw, new, DimensionMismatchException, (]
[columnDimension, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, rowDimension, !=, columnDimension, ), {, throw, new, DimensionMismatchException, (, rowDimension, ,]
[DimensionMismatchException, {, if, (, rowDimension, !=, columnDimension, ), {, throw, new, DimensionMismatchException, (, rowDimension, ,, columnDimension, ), ;, }, return]
[(, rowDimension, !=, columnDimension, ), {, throw, new, DimensionMismatchException, (, rowDimension, ,, columnDimension, ), ;, }, return, new, DiagonalMatrix, (]
[), ;, }, return, new, DiagonalMatrix, (, rowDimension, ), ;, }, @, Override, public, RealMatrix, copy, (, ), {, return]
[return, new, DiagonalMatrix, (, rowDimension, ), ;, }, @, Override, public, RealMatrix, copy, (, ), {, return, new, DiagonalMatrix, (]
[{, return, new, DiagonalMatrix, (, data, ), ;, }, public, DiagonalMatrix, add, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[{, return, new, DiagonalMatrix, (, data, ), ;, }, public, DiagonalMatrix, add, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[(, data, ), ;, }, public, DiagonalMatrix, add, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (]
[), ;, }, public, DiagonalMatrix, add, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,]
[final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m, ), ;, final, int, dim, =]
[(, this, ,, m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =]
[m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double, []
[(, ), ;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =]
[;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <]
[], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, []
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =]
[int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, []
[0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], +]
[0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], +]
[0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], +]
[dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], +, m, ., data, []
[{, outData, [, i, ], =, data, [, i, ], +, m, ., data, [, i, ], ;, }, return]
[i, ], =, data, [, i, ], +, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (]
[=, data, [, i, ], +, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,]
[new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, subtract, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, subtract, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[,, false, ), ;, }, public, DiagonalMatrix, subtract, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (]
[), ;, }, public, DiagonalMatrix, subtract, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (, this, ,]
[final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (, this, ,, m, ), ;, final, int, dim, =]
[(, this, ,, m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =]
[m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double, []
[(, ), ;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =]
[;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <]
[], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, []
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =]
[int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, []
[0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], -]
[0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], -]
[0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], -]
[dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], -, m, ., data, []
[{, outData, [, i, ], =, data, [, i, ], -, m, ., data, [, i, ], ;, }, return]
[i, ], =, data, [, i, ], -, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (]
[=, data, [, i, ], -, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,]
[new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, multiply, (, final, DiagonalMatrix, m, ), throws, DimensionMismatchException, {]
[new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, multiply, (, final, DiagonalMatrix, m, ), throws, DimensionMismatchException, {]
[,, false, ), ;, }, public, DiagonalMatrix, multiply, (, final, DiagonalMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (]
[), ;, }, public, DiagonalMatrix, multiply, (, final, DiagonalMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,]
[final, DiagonalMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, dim, =]
[(, this, ,, m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =]
[m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double, []
[(, ), ;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =]
[;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <]
[], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, []
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =]
[int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, []
[0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], *]
[0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], *]
[0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], *]
[dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], *, m, ., data, []
[{, outData, [, i, ], =, data, [, i, ], *, m, ., data, [, i, ], ;, }, return]
[i, ], =, data, [, i, ], *, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (]
[=, data, [, i, ], *, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,]
[,, false, ), ;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, if, (]
[,, false, ), ;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, if, (]
[Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, if, (, m, instanceof, DiagonalMatrix, ), {, return]
[RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, if, (, m, instanceof, DiagonalMatrix, ), {, return, multiply, (]
[final, RealMatrix, m, ), throws, DimensionMismatchException, {, if, (, m, instanceof, DiagonalMatrix, ), {, return, multiply, (, (, DiagonalMatrix, )]
[{, if, (, m, instanceof, DiagonalMatrix, ), {, return, multiply, (, (, DiagonalMatrix, ), m, ), ;, }, else, {]
[{, if, (, m, instanceof, DiagonalMatrix, ), {, return, multiply, (, (, DiagonalMatrix, ), m, ), ;, }, else, {]
[instanceof, DiagonalMatrix, ), {, return, multiply, (, (, DiagonalMatrix, ), m, ), ;, }, else, {, MatrixUtils, ., checkMultiplicationCompatible, (]
[), {, return, multiply, (, (, DiagonalMatrix, ), m, ), ;, }, else, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,]
[), m, ), ;, }, else, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =]
[), m, ), ;, }, else, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =]
[(, this, ,, m, ), ;, final, int, nRows, =, m, ., getRowDimension, (, ), ;, final, int, nCols, =]
[(, this, ,, m, ), ;, final, int, nRows, =, m, ., getRowDimension, (, ), ;, final, int, nCols, =]
[), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], product, =]
[int, nCols, =, m, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], product, =, new, double, []
[m, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], product, =, new, double, [, nRows, ], []
[[, ], [, ], product, =, new, double, [, nRows, ], [, nCols, ], ;, for, (, int, r, =]
[[, ], product, =, new, double, [, nRows, ], [, nCols, ], ;, for, (, int, r, =, 0, ;]
[[, ], product, =, new, double, [, nRows, ], [, nCols, ], ;, for, (, int, r, =, 0, ;]
[product, =, new, double, [, nRows, ], [, nCols, ], ;, for, (, int, r, =, 0, ;, r, <]
[new, double, [, nRows, ], [, nCols, ], ;, for, (, int, r, =, 0, ;, r, <, nRows, ;]
[new, double, [, nRows, ], [, nCols, ], ;, for, (, int, r, =, 0, ;, r, <, nRows, ;]
[for, (, int, r, =, 0, ;, r, <, nRows, ;, r, ++, ), {, for, (, int, c, =]
[int, r, =, 0, ;, r, <, nRows, ;, r, ++, ), {, for, (, int, c, =, 0, ;]
[int, r, =, 0, ;, r, <, nRows, ;, r, ++, ), {, for, (, int, c, =, 0, ;]
[=, 0, ;, r, <, nRows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <]
[;, r, <, nRows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, nCols, ;]
[;, r, <, nRows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, nCols, ;]
[;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, nCols, ;, c, ++, ), {]
[;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, nCols, ;, c, ++, ), {]
[;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, nCols, ;, c, ++, ), {]
[++, ), {, for, (, int, c, =, 0, ;, c, <, nCols, ;, c, ++, ), {, product, []
[for, (, int, c, =, 0, ;, c, <, nCols, ;, c, ++, ), {, product, [, r, ], []
[c, =, 0, ;, c, <, nCols, ;, c, ++, ), {, product, [, r, ], [, c, ], =]
[c, =, 0, ;, c, <, nCols, ;, c, ++, ), {, product, [, r, ], [, c, ], =]
[c, =, 0, ;, c, <, nCols, ;, c, ++, ), {, product, [, r, ], [, c, ], =]
[0, ;, c, <, nCols, ;, c, ++, ), {, product, [, r, ], [, c, ], =, data, []
[<, nCols, ;, c, ++, ), {, product, [, r, ], [, c, ], =, data, [, r, ], *]
[<, nCols, ;, c, ++, ), {, product, [, r, ], [, c, ], =, data, [, r, ], *]
[++, ), {, product, [, r, ], [, c, ], =, data, [, r, ], *, m, ., getEntry, (]
[{, product, [, r, ], [, c, ], =, data, [, r, ], *, m, ., getEntry, (, r, ,]
[c, ], =, data, [, r, ], *, m, ., getEntry, (, r, ,, c, ), ;, }, }, return]
[data, [, r, ], *, m, ., getEntry, (, r, ,, c, ), ;, }, }, return, new, Array2DRowRealMatrix, (]
[r, ], *, m, ., getEntry, (, r, ,, c, ), ;, }, }, return, new, Array2DRowRealMatrix, (, product, ,]
[), ;, }, }, @, Override, public, double, [, ], [, ], getData, (, ), {, final, int, dim, =]
[getData, (, ), {, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], [, ], out, =]
[{, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], [, ], out, =, new, double, []
[dim, =, getRowDimension, (, ), ;, final, double, [, ], [, ], out, =, new, double, [, dim, ], []
[[, ], [, ], out, =, new, double, [, dim, ], [, dim, ], ;, for, (, int, i, =]
[[, ], out, =, new, double, [, dim, ], [, dim, ], ;, for, (, int, i, =, 0, ;]
[[, ], out, =, new, double, [, dim, ], [, dim, ], ;, for, (, int, i, =, 0, ;]
[out, =, new, double, [, dim, ], [, dim, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, dim, ], [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[new, double, [, dim, ], [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[], [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[], [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[], [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, out, []
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, out, [, i, ], []
[i, =, 0, ;, i, <, dim, ;, i, ++, ), {, out, [, i, ], [, i, ], =]
[i, =, 0, ;, i, <, dim, ;, i, ++, ), {, out, [, i, ], [, i, ], =]
[0, ;, i, <, dim, ;, i, ++, ), {, out, [, i, ], [, i, ], =, data, []
[;, i, ++, ), {, out, [, i, ], [, i, ], =, data, [, i, ], ;, }, return]
[=, data, [, i, ], ;, }, return, out, ;, }, public, double, [, ], getDataRef, (, ), {, return]
[data, ;, }, @, Override, public, double, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {]
[data, ;, }, @, Override, public, double, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {]
[Override, public, double, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (]
[double, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,]
[(, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,]
[,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return]
[,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return]
[,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return]
[int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return, row, ==]
[), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return, row, ==, column, ?]
[), throws, OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return, row, ==, column, ?]
[OutOfRangeException, {, MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return, row, ==, column, ?, data, []
[., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return, row, ==, column, ?, data, [, row, ], :]
[(, final, int, row, ,, final, int, column, ,, final, double, value, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (]
[(, final, int, row, ,, final, int, column, ,, final, double, value, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (]
[int, row, ,, final, int, column, ,, final, double, value, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==]
[final, int, column, ,, final, double, value, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {]
[final, int, column, ,, final, double, value, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {]
[final, double, value, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (]
[value, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,]
[OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[NumberIsTooLargeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, []
[(, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], =]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], =, value, ;, }, else, {]
[., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], =, value, ;, }, else, {, ensureZero, (]
[(, final, int, row, ,, final, int, column, ,, final, double, increment, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (]
[(, final, int, row, ,, final, int, column, ,, final, double, increment, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (]
[int, row, ,, final, int, column, ,, final, double, increment, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==]
[final, int, column, ,, final, double, increment, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {]
[final, int, column, ,, final, double, increment, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {]
[final, double, increment, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (]
[increment, ), throws, OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,]
[OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[OutOfRangeException, ,, NumberIsTooLargeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[NumberIsTooLargeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, []
[(, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], +=]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], +=, increment, ;, }, else, {]
[., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], +=, increment, ;, }, else, {, ensureZero, (]
[void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, double, factor, ), throws, OutOfRangeException, {, if, (]
[void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, double, factor, ), throws, OutOfRangeException, {, if, (]
[(, final, int, row, ,, final, int, column, ,, final, double, factor, ), throws, OutOfRangeException, {, if, (, row, ==]
[row, ,, final, int, column, ,, final, double, factor, ), throws, OutOfRangeException, {, if, (, row, ==, column, ), {]
[row, ,, final, int, column, ,, final, double, factor, ), throws, OutOfRangeException, {, if, (, row, ==, column, ), {]
[column, ,, final, double, factor, ), throws, OutOfRangeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (]
[final, double, factor, ), throws, OutOfRangeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,]
[), throws, OutOfRangeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[), throws, OutOfRangeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[OutOfRangeException, {, if, (, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, []
[(, row, ==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], *=]
[), ;, data, [, row, ], *=, factor, ;, }, }, @, Override, public, int, getRowDimension, (, ), {, return]
[), ;, data, [, row, ], *=, factor, ;, }, }, @, Override, public, int, getRowDimension, (, ), {, return]
[int, getRowDimension, (, ), {, return, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[int, getRowDimension, (, ), {, return, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[;, }, @, Override, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, return]
[;, }, @, Override, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, return]
[@, Override, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, return, multiply, (]
[double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, return, multiply, (, new, DiagonalMatrix, (]
[], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, return, multiply, (, new, DiagonalMatrix, (, v, ,]
[;, }, @, Override, public, double, [, ], preMultiply, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, return]
[@, Override, public, double, [, ], preMultiply, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, return, operate, (]
[Override, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, final, double, [, ], vectorData, ;, if, (]
[Override, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, final, double, [, ], vectorData, ;, if, (]
[final, RealVector, v, ), throws, DimensionMismatchException, {, final, double, [, ], vectorData, ;, if, (, v, instanceof, ArrayRealVector, ), {]
[v, ), throws, DimensionMismatchException, {, final, double, [, ], vectorData, ;, if, (, v, instanceof, ArrayRealVector, ), {, vectorData, =]
[v, ), throws, DimensionMismatchException, {, final, double, [, ], vectorData, ;, if, (, v, instanceof, ArrayRealVector, ), {, vectorData, =]
[), throws, DimensionMismatchException, {, final, double, [, ], vectorData, ;, if, (, v, instanceof, ArrayRealVector, ), {, vectorData, =, (]
[{, final, double, [, ], vectorData, ;, if, (, v, instanceof, ArrayRealVector, ), {, vectorData, =, (, (, ArrayRealVector, )]
[instanceof, ArrayRealVector, ), {, vectorData, =, (, (, ArrayRealVector, ), v, ), ., getDataRef, (, ), ;, }, else, {]
[), {, vectorData, =, (, (, ArrayRealVector, ), v, ), ., getDataRef, (, ), ;, }, else, {, vectorData, =]
[), {, vectorData, =, (, (, ArrayRealVector, ), v, ), ., getDataRef, (, ), ;, }, else, {, vectorData, =]
[v, ), ., getDataRef, (, ), ;, }, else, {, vectorData, =, v, ., toArray, (, ), ;, }, return]
[v, ), ., getDataRef, (, ), ;, }, else, {, vectorData, =, v, ., toArray, (, ), ;, }, return]
[(, ), ;, }, else, {, vectorData, =, v, ., toArray, (, ), ;, }, return, MatrixUtils, ., createRealVector, (]
[;, }, else, {, vectorData, =, v, ., toArray, (, ), ;, }, return, MatrixUtils, ., createRealVector, (, preMultiply, (]
[preMultiply, (, vectorData, ), ), ;, }, private, void, ensureZero, (, final, double, value, ), throws, NumberIsTooLargeException, {, if, (]
[(, vectorData, ), ), ;, }, private, void, ensureZero, (, final, double, value, ), throws, NumberIsTooLargeException, {, if, (, !]
[(, vectorData, ), ), ;, }, private, void, ensureZero, (, final, double, value, ), throws, NumberIsTooLargeException, {, if, (, !]
[;, }, private, void, ensureZero, (, final, double, value, ), throws, NumberIsTooLargeException, {, if, (, !, Precision, ., equals, (]
[private, void, ensureZero, (, final, double, value, ), throws, NumberIsTooLargeException, {, if, (, !, Precision, ., equals, (, 0.0, ,]
[ensureZero, (, final, double, value, ), throws, NumberIsTooLargeException, {, if, (, !, Precision, ., equals, (, 0.0, ,, value, ,]
[), throws, NumberIsTooLargeException, {, if, (, !, Precision, ., equals, (, 0.0, ,, value, ,, 1, ), ), {, throw]
[{, if, (, !, Precision, ., equals, (, 0.0, ,, value, ,, 1, ), ), {, throw, new, NumberIsTooLargeException, (]
[{, if, (, !, Precision, ., equals, (, 0.0, ,, value, ,, 1, ), ), {, throw, new, NumberIsTooLargeException, (]
[Precision, ., equals, (, 0.0, ,, value, ,, 1, ), ), {, throw, new, NumberIsTooLargeException, (, FastMath, ., abs, (]
[(, 0.0, ,, value, ,, 1, ), ), {, throw, new, NumberIsTooLargeException, (, FastMath, ., abs, (, value, ), ,]
[,, value, ,, 1, ), ), {, throw, new, NumberIsTooLargeException, (, FastMath, ., abs, (, value, ), ,, 0, ,]
