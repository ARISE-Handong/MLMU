[time, ., TimePeriod, ;, public, class, Task, implements, Cloneable, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[private, Double, percentComplete, ;, private, List, subtasks, ;, public, Task, (, String, description, ,, TimePeriod, duration, ), {, if, (]
[private, Double, percentComplete, ;, private, List, subtasks, ;, public, Task, (, String, description, ,, TimePeriod, duration, ), {, if, (]
[percentComplete, ;, private, List, subtasks, ;, public, Task, (, String, description, ,, TimePeriod, duration, ), {, if, (, description, ==]
[subtasks, ;, public, Task, (, String, description, ,, TimePeriod, duration, ), {, if, (, description, ==, null, ), {, throw]
[Task, (, String, description, ,, TimePeriod, duration, ), {, if, (, description, ==, null, ), {, throw, new, IllegalArgumentException, (]
[,, TimePeriod, duration, ), {, if, (, description, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }]
[,, TimePeriod, duration, ), {, if, (, description, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }]
[{, if, (, description, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =]
[(, description, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;]
[(, description, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;]
[), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, this, ., duration, =]
[throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, this, ., duration, =, duration, ;]
[throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, this, ., duration, =, duration, ;]
["Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, this, ., duration, =, duration, ;, this, ., percentComplete, =]
[;, }, this, ., description, =, description, ;, this, ., duration, =, duration, ;, this, ., percentComplete, =, null, ;]
[;, }, this, ., description, =, description, ;, this, ., duration, =, duration, ;, this, ., percentComplete, =, null, ;]
[description, =, description, ;, this, ., duration, =, duration, ;, this, ., percentComplete, =, null, ;, this, ., subtasks, =]
[ArrayList, (, ), ;, }, public, Task, (, String, description, ,, Date, start, ,, Date, end, ), {, this, (]
[), ;, }, public, Task, (, String, description, ,, Date, start, ,, Date, end, ), {, this, (, description, ,]
[public, Task, (, String, description, ,, Date, start, ,, Date, end, ), {, this, (, description, ,, new, SimpleTimePeriod, (]
[(, String, description, ,, Date, start, ,, Date, end, ), {, this, (, description, ,, new, SimpleTimePeriod, (, start, ,]
[(, description, ,, new, SimpleTimePeriod, (, start, ,, end, ), ), ;, }, public, String, getDescription, (, ), {, return]
[(, description, ,, new, SimpleTimePeriod, (, start, ,, end, ), ), ;, }, public, String, getDescription, (, ), {, return]
[getDescription, (, ), {, return, this, ., description, ;, }, public, void, setDescription, (, String, description, ), {, if, (]
[getDescription, (, ), {, return, this, ., description, ;, }, public, void, setDescription, (, String, description, ), {, if, (]
[), {, return, this, ., description, ;, }, public, void, setDescription, (, String, description, ), {, if, (, description, ==]
[., description, ;, }, public, void, setDescription, (, String, description, ), {, if, (, description, ==, null, ), {, throw]
[}, public, void, setDescription, (, String, description, ), {, if, (, description, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, String, description, ), {, if, (, description, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }]
[(, String, description, ), {, if, (, description, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }]
[{, if, (, description, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =]
[IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, }, public, TimePeriod, getDuration, (, ), {, return]
[IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, }, public, TimePeriod, getDuration, (, ), {, return]
[public, TimePeriod, getDuration, (, ), {, return, this, ., duration, ;, }, public, void, setDuration, (, TimePeriod, duration, ), {]
[public, TimePeriod, getDuration, (, ), {, return, this, ., duration, ;, }, public, void, setDuration, (, TimePeriod, duration, ), {]
[), {, return, this, ., duration, ;, }, public, void, setDuration, (, TimePeriod, duration, ), {, this, ., duration, =]
[setDuration, (, TimePeriod, duration, ), {, this, ., duration, =, duration, ;, }, public, Double, getPercentComplete, (, ), {, return]
[setDuration, (, TimePeriod, duration, ), {, this, ., duration, =, duration, ;, }, public, Double, getPercentComplete, (, ), {, return]
[public, Double, getPercentComplete, (, ), {, return, this, ., percentComplete, ;, }, public, void, setPercentComplete, (, Double, percent, ), {]
[public, Double, getPercentComplete, (, ), {, return, this, ., percentComplete, ;, }, public, void, setPercentComplete, (, Double, percent, ), {]
[), {, return, this, ., percentComplete, ;, }, public, void, setPercentComplete, (, Double, percent, ), {, this, ., percentComplete, =]
[(, Double, percent, ), {, this, ., percentComplete, =, percent, ;, }, public, void, setPercentComplete, (, double, percent, ), {]
[percent, ), {, this, ., percentComplete, =, percent, ;, }, public, void, setPercentComplete, (, double, percent, ), {, setPercentComplete, (]
[this, ., percentComplete, =, percent, ;, }, public, void, setPercentComplete, (, double, percent, ), {, setPercentComplete, (, new, Double, (]
[setPercentComplete, (, new, Double, (, percent, ), ), ;, }, public, void, addSubtask, (, Task, subtask, ), {, if, (]
[setPercentComplete, (, new, Double, (, percent, ), ), ;, }, public, void, addSubtask, (, Task, subtask, ), {, if, (]
[new, Double, (, percent, ), ), ;, }, public, void, addSubtask, (, Task, subtask, ), {, if, (, subtask, ==]
[), ), ;, }, public, void, addSubtask, (, Task, subtask, ), {, if, (, subtask, ==, null, ), {, throw]
[}, public, void, addSubtask, (, Task, subtask, ), {, if, (, subtask, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Task, subtask, ), {, if, (, subtask, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subtask' argument.", ), ;, }]
[(, Task, subtask, ), {, if, (, subtask, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subtask' argument.", ), ;, }]
[(, Task, subtask, ), {, if, (, subtask, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subtask' argument.", ), ;, }]
[(, subtask, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subtask' argument.", ), ;, }, this, ., subtasks, ., add, (]
[;, }, this, ., subtasks, ., add, (, subtask, ), ;, }, public, void, removeSubtask, (, Task, subtask, ), {]
[;, }, this, ., subtasks, ., add, (, subtask, ), ;, }, public, void, removeSubtask, (, Task, subtask, ), {]
[;, }, this, ., subtasks, ., add, (, subtask, ), ;, }, public, void, removeSubtask, (, Task, subtask, ), {]
[add, (, subtask, ), ;, }, public, void, removeSubtask, (, Task, subtask, ), {, this, ., subtasks, ., remove, (]
[subtask, ), {, this, ., subtasks, ., remove, (, subtask, ), ;, }, public, int, getSubtaskCount, (, ), {, return]
[subtask, ), {, this, ., subtasks, ., remove, (, subtask, ), ;, }, public, int, getSubtaskCount, (, ), {, return]
[subtask, ), {, this, ., subtasks, ., remove, (, subtask, ), ;, }, public, int, getSubtaskCount, (, ), {, return]
[{, return, this, ., subtasks, ., size, (, ), ;, }, public, Task, getSubtask, (, int, index, ), {, return]
[., subtasks, ., size, (, ), ;, }, public, Task, getSubtask, (, int, index, ), {, return, (, Task, )]
[., subtasks, ., size, (, ), ;, }, public, Task, getSubtask, (, int, index, ), {, return, (, Task, )]
[., subtasks, ., size, (, ), ;, }, public, Task, getSubtask, (, int, index, ), {, return, (, Task, )]
[;, }, public, Task, getSubtask, (, int, index, ), {, return, (, Task, ), this, ., subtasks, ., get, (]
[this, ., subtasks, ., get, (, index, ), ;, }, public, boolean, equals, (, Object, object, ), {, if, (]
[this, ., subtasks, ., get, (, index, ), ;, }, public, boolean, equals, (, Object, object, ), {, if, (]
[subtasks, ., get, (, index, ), ;, }, public, boolean, equals, (, Object, object, ), {, if, (, object, ==]
[index, ), ;, }, public, boolean, equals, (, Object, object, ), {, if, (, object, ==, this, ), {, return]
[boolean, equals, (, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (, !, (]
[object, ==, this, ), {, return, true, ;, }, if, (, !, (, object, instanceof, Task, ), ), {, return]
[true, ;, }, if, (, !, (, object, instanceof, Task, ), ), {, return, false, ;, }, Task, that, =]
[if, (, !, (, object, instanceof, Task, ), ), {, return, false, ;, }, Task, that, =, (, Task, )]
[object, instanceof, Task, ), ), {, return, false, ;, }, Task, that, =, (, Task, ), object, ;, if, (]
[instanceof, Task, ), ), {, return, false, ;, }, Task, that, =, (, Task, ), object, ;, if, (, !]
[instanceof, Task, ), ), {, return, false, ;, }, Task, that, =, (, Task, ), object, ;, if, (, !]
[{, return, false, ;, }, Task, that, =, (, Task, ), object, ;, if, (, !, ObjectUtilities, ., equal, (]
[{, return, false, ;, }, Task, that, =, (, Task, ), object, ;, if, (, !, ObjectUtilities, ., equal, (]
[}, Task, that, =, (, Task, ), object, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., description, ,]
[}, Task, that, =, (, Task, ), object, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., description, ,]
[object, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., description, ,, that, ., description, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., description, ,, that, ., description, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., description, ,, that, ., description, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., description, ,, that, ., description, ), ), {, return, false, ;, }, if, (, !]
[., description, ,, that, ., description, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., description, ,, that, ., description, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., description, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., duration, ,]
[., description, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., duration, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., duration, ,, that, ., duration, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., duration, ,, that, ., duration, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., duration, ,, that, ., duration, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., duration, ,, that, ., duration, ), ), {, return, false, ;, }, if, (, !]
[., duration, ,, that, ., duration, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., duration, ,, that, ., duration, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., duration, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., percentComplete, ,]
[., duration, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., percentComplete, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., percentComplete, ,, that, ., percentComplete, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., percentComplete, ,, that, ., percentComplete, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., percentComplete, ,, that, ., percentComplete, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., percentComplete, ,, that, ., percentComplete, ), ), {, return, false, ;, }, if, (, !]
[., percentComplete, ,, that, ., percentComplete, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., percentComplete, ,, that, ., percentComplete, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., percentComplete, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subtasks, ,]
[., percentComplete, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subtasks, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subtasks, ,, that, ., subtasks, ), ), {, return]
[!, ObjectUtilities, ., equal, (, this, ., subtasks, ,, that, ., subtasks, ), ), {, return, false, ;, }, return]
[{, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, Task, clone, =]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, Task, clone, =, (, Task, )]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, Task, clone, =, (, Task, )]
[Object, clone, (, ), throws, CloneNotSupportedException, {, Task, clone, =, (, Task, ), super, ., clone, (, ), ;, return]
