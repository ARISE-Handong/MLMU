[;, private, final, int, numberOfSuccesses, ;, private, final, int, populationSize, ;, private, final, int, sampleSize, ;, private, double, numericalVariance, =]
[;, private, final, int, numberOfSuccesses, ;, private, final, int, populationSize, ;, private, final, int, sampleSize, ;, private, double, numericalVariance, =]
[;, private, boolean, numericalVarianceIsCalculated, =, false, ;, public, HypergeometricDistribution, (, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws]
[., NaN, ;, private, boolean, numericalVarianceIsCalculated, =, false, ;, public, HypergeometricDistribution, (, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize]
[;, public, HypergeometricDistribution, (, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {]
[,, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, }, public, HypergeometricDistribution, (, RandomGenerator, rng, ,, int, populationSize, ,, int, numberOfSuccesses]
[,, numberOfSuccesses, ,, sampleSize, ), ;, }, public, HypergeometricDistribution, (, RandomGenerator, rng, ,, int, populationSize, ,, int, numberOfSuccesses, ,, int]
[,, sampleSize, ), ;, }, public, HypergeometricDistribution, (, RandomGenerator, rng, ,, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, )]
[), ;, }, public, HypergeometricDistribution, (, RandomGenerator, rng, ,, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException]
[), ;, if, (, populationSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., POPULATION_SIZE, ,, populationSize, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., POPULATION_SIZE, ,, populationSize, ), ;, }, if, (, numberOfSuccesses, <, 0, )]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., POPULATION_SIZE, ,, populationSize, ), ;, }, if, (, numberOfSuccesses, <]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., POPULATION_SIZE, ,, populationSize, ), ;, }, if, (, numberOfSuccesses, <, 0, )]
[;, }, if, (, numberOfSuccesses, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, ), ;]
[,, populationSize, ), ;, }, if, (, numberOfSuccesses, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,]
[., POPULATION_SIZE, ,, populationSize, ), ;, }, if, (, numberOfSuccesses, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, .]
[), ;, }, if, (, numberOfSuccesses, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, )]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, ), ;, }, if, (, sampleSize, <, 0, )]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, ), ;, }, if, (, sampleSize, <]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, ), ;, }, if, (, sampleSize, <, 0, )]
[;, }, if, (, sampleSize, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;]
[,, numberOfSuccesses, ), ;, }, if, (, sampleSize, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,]
[., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, ), ;, }, if, (, sampleSize, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, .]
[), ;, }, if, (, sampleSize, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, )]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, numberOfSuccesses, >, populationSize, )]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, numberOfSuccesses, >]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, numberOfSuccesses, >, populationSize, )]
[;, }, if, (, numberOfSuccesses, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,, populationSize]
[,, sampleSize, ), ;, }, if, (, numberOfSuccesses, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,]
[., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, numberOfSuccesses, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, .]
[), ;, }, if, (, numberOfSuccesses, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,, populationSize, ,, true, ), ;, }, if, (]
[>, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,, populationSize, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,, populationSize, ,, true, ), ;, }, if, (]
[;, }, if, (, sampleSize, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize]
[,, numberOfSuccesses, ,, populationSize, ,, true, ), ;, }, if, (, sampleSize, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (]
[., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,, populationSize, ,, true, ), ;, }, if, (, sampleSize, >, populationSize, ), {, throw, new]
[,, populationSize, ,, true, ), ;, }, if, (, sampleSize, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, .]
[,, true, ), ;, }, if, (, sampleSize, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,]
[), ;, }, if, (, sampleSize, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize, ,, true, ), ;, }, this, .]
[>, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize, ,, true, ), ;, }, this, .]
[;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;, this, ., populationSize, =, populationSize, ;, this, ., sampleSize, =, sampleSize, ;]
[,, sampleSize, ,, populationSize, ,, true, ), ;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;, this, ., populationSize, =, populationSize]
[., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize, ,, true, ), ;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;, this, ., populationSize]
[,, populationSize, ,, true, ), ;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;, this, ., populationSize, =, populationSize, ;, this]
[,, true, ), ;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;, this, ., populationSize, =, populationSize, ;, this, ., sampleSize]
[), ;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;, this, ., populationSize, =, populationSize, ;, this, ., sampleSize, =, sampleSize]
[=, numberOfSuccesses, ;, this, ., populationSize, =, populationSize, ;, this, ., sampleSize, =, sampleSize, ;, }, public, double, cumulativeProbability, (]
[., numberOfSuccesses, =, numberOfSuccesses, ;, this, ., populationSize, =, populationSize, ;, this, ., sampleSize, =, sampleSize, ;, }, public, double]
[;, this, ., populationSize, =, populationSize, ;, this, ., sampleSize, =, sampleSize, ;, }, public, double, cumulativeProbability, (, int, x]
[=, populationSize, ;, this, ., sampleSize, =, sampleSize, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret]
[., populationSize, =, populationSize, ;, this, ., sampleSize, =, sampleSize, ;, }, public, double, cumulativeProbability, (, int, x, ), {]
[;, this, ., sampleSize, =, sampleSize, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, int]
[=, sampleSize, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =]
[., sampleSize, =, sampleSize, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, int, [, ]]
[;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =, getDomain, (]
[;, if, (, x, <, domain, [, 0, ], ), {, ret, =, 0.0, ;, }, else, if, (, x]
[,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ), {, ret, =, 0.0, ;]
[,, sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ), {, ret, =, 0.0, ;, }, else]
[), ;, if, (, x, <, domain, [, 0, ], ), {, ret, =, 0.0, ;, }, else, if, (]
[), {, ret, =, 0.0, ;, }, else, if, (, x, >=, domain, [, 1, ], ), {, ret, =]
[<, domain, [, 0, ], ), {, ret, =, 0.0, ;, }, else, if, (, x, >=, domain, [, 1]
[), {, ret, =, 0.0, ;, }, else, if, (, x, >=, domain, [, 1, ], ), {, ret, =]
[[, 0, ], ), {, ret, =, 0.0, ;, }, else, if, (, x, >=, domain, [, 1, ], )]
[], ), {, ret, =, 0.0, ;, }, else, if, (, x, >=, domain, [, 1, ], ), {, ret]
[=, 0.0, ;, }, else, if, (, x, >=, domain, [, 1, ], ), {, ret, =, 1.0, ;, }]
[;, }, else, if, (, x, >=, domain, [, 1, ], ), {, ret, =, 1.0, ;, }, else, {]
[), {, ret, =, 1.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 0, ], ,, x, ,]
[>=, domain, [, 1, ], ), {, ret, =, 1.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, []
[), {, ret, =, 1.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 0, ], ,, x, ,]
[[, 1, ], ), {, ret, =, 1.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 0, ]]
[], ), {, ret, =, 1.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 0, ], ,, x]
[=, 1.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 0, ], ,, x, ,, 1, ), ;]
[;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 0, ], ,, x, ,, 1, ), ;, }, return]
[=, innerCumulativeProbability, (, domain, [, 0, ], ,, x, ,, 1, ), ;, }, return, ret, ;, }, private, int]
[;, }, return, ret, ;, }, private, int, [, ], getDomain, (, int, n, ,, int, m, ,, int, k]
[,, x, ,, 1, ), ;, }, return, ret, ;, }, private, int, [, ], getDomain, (, int, n, ,]
[[, 0, ], ,, x, ,, 1, ), ;, }, return, ret, ;, }, private, int, [, ], getDomain, (]
[], ,, x, ,, 1, ), ;, }, return, ret, ;, }, private, int, [, ], getDomain, (, int, n]
[,, 1, ), ;, }, return, ret, ;, }, private, int, [, ], getDomain, (, int, n, ,, int, m]
[), ;, }, return, ret, ;, }, private, int, [, ], getDomain, (, int, n, ,, int, m, ,, int]
[;, }, private, int, [, ], getDomain, (, int, n, ,, int, m, ,, int, k, ), {, return, new]
[;, }, private, int, getLowerDomain, (, int, n, ,, int, m, ,, int, k, ), {, return, FastMath, ., max]
[;, }, private, int, getLowerDomain, (, int, n, ,, int, m, ,, int, k, ), {, return, FastMath, ., max]
[,, getUpperDomain, (, m, ,, k, ), }, ;, }, private, int, getLowerDomain, (, int, n, ,, int, m, ,]
[,, m, ,, k, ), ,, getUpperDomain, (, m, ,, k, ), }, ;, }, private, int, getLowerDomain, (, int]
[,, k, ), ,, getUpperDomain, (, m, ,, k, ), }, ;, }, private, int, getLowerDomain, (, int, n, ,]
[), ,, getUpperDomain, (, m, ,, k, ), }, ;, }, private, int, getLowerDomain, (, int, n, ,, int, m]
[}, ;, }, private, int, getLowerDomain, (, int, n, ,, int, m, ,, int, k, ), {, return, FastMath, .]
[,, k, ), }, ;, }, private, int, getLowerDomain, (, int, n, ,, int, m, ,, int, k, ), {]
[), }, ;, }, private, int, getLowerDomain, (, int, n, ,, int, m, ,, int, k, ), {, return, FastMath]
[;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, int, getPopulationSize, (, ), {, return, populationSize]
[., max, (, 0, ,, m, -, (, n, -, k, ), ), ;, }, public, int, getNumberOfSuccesses, (, )]
[,, m, -, (, n, -, k, ), ), ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;]
[), ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, int, getPopulationSize, (, ), {, return]
[-, (, n, -, k, ), ), ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public]
[), ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, int, getPopulationSize, (, ), {, return]
[), ), ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, int, getPopulationSize, (, ), {]
[-, k, ), ), ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, int, getPopulationSize, (]
[), ), ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, int, getPopulationSize, (, ), {]
[;, }, public, int, getPopulationSize, (, ), {, return, populationSize, ;, }, public, int, getSampleSize, (, ), {, return, sampleSize]
[;, }, public, int, getSampleSize, (, ), {, return, sampleSize, ;, }, private, int, getUpperDomain, (, int, m, ,, int]
[;, }, private, int, getUpperDomain, (, int, m, ,, int, k, ), {, return, FastMath, ., min, (, k, ,]
[;, }, public, double, probability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =, getDomain, (]
[., min, (, k, ,, m, ), ;, }, public, double, probability, (, int, x, ), {, double, ret, ;]
[,, m, ), ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, int, [, ], domain]
[), ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =, getDomain]
[;, if, (, x, <, domain, [, 0, ], ||, x, >, domain, [, 1, ], ), {, ret, =]
[,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ||, x, >, domain, [, 1]
[,, sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ||, x, >, domain, [, 1, ], )]
[), ;, if, (, x, <, domain, [, 0, ], ||, x, >, domain, [, 1, ], ), {, ret]
[), {, ret, =, 0.0, ;, }, else, {, double, p, =, (, double, ), sampleSize, /, (, double, )]
[||, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, double, p, =, (]
[<, domain, [, 0, ], ||, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else]
[||, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, double, p, =, (]
[[, 0, ], ||, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, double]
[], ||, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, double, p, =]
[), {, ret, =, 0.0, ;, }, else, {, double, p, =, (, double, ), sampleSize, /, (, double, )]
[>, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, double, p, =, (, double, )]
[), {, ret, =, 0.0, ;, }, else, {, double, p, =, (, double, ), sampleSize, /, (, double, )]
[[, 1, ], ), {, ret, =, 0.0, ;, }, else, {, double, p, =, (, double, ), sampleSize, /]
[], ), {, ret, =, 0.0, ;, }, else, {, double, p, =, (, double, ), sampleSize, /, (, double]
[=, 0.0, ;, }, else, {, double, p, =, (, double, ), sampleSize, /, (, double, ), populationSize, ;, double]
[;, }, else, {, double, p, =, (, double, ), sampleSize, /, (, double, ), populationSize, ;, double, q, =]
[;, double, q, =, (, double, ), (, populationSize, -, sampleSize, ), /, (, double, ), populationSize, ;, double, p1]
[/, (, double, ), populationSize, ;, double, q, =, (, double, ), (, populationSize, -, sampleSize, ), /, (, double]
[/, (, double, ), populationSize, ;, double, q, =, (, double, ), (, populationSize, -, sampleSize, ), /, (, double]
[;, double, q, =, (, double, ), (, populationSize, -, sampleSize, ), /, (, double, ), populationSize, ;, double, p1]
[;, double, q, =, (, double, ), (, populationSize, -, sampleSize, ), /, (, double, ), populationSize, ;, double, p1]
[;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =]
[/, (, double, ), populationSize, ;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,, q]
[/, (, double, ), populationSize, ;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,, q]
[), /, (, double, ), populationSize, ;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,]
[-, sampleSize, ), /, (, double, ), populationSize, ;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,]
[), /, (, double, ), populationSize, ;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,]
[;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =]
[;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =]
[;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,, populationSize, -, numberOfSuccesses, ,, p, ,, q, )]
[., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize]
[,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,, populationSize]
[,, p, ,, q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,, populationSize, -, numberOfSuccesses]
[,, q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,, populationSize, -, numberOfSuccesses, ,, p]
[), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,, populationSize, -, numberOfSuccesses, ,, p, ,, q]
[;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q, ), ;, ret, =, FastMath]
[., logBinomialProbability, (, sampleSize, -, x, ,, populationSize, -, numberOfSuccesses, ,, p, ,, q, ), ;, double, p3, =, SaddlePointExpansion]
[,, populationSize, -, numberOfSuccesses, ,, p, ,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize]
[-, x, ,, populationSize, -, numberOfSuccesses, ,, p, ,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize]
[,, populationSize, -, numberOfSuccesses, ,, p, ,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize]
[,, p, ,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q]
[-, numberOfSuccesses, ,, p, ,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p]
[,, p, ,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q]
[,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q, ), ;]
[), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q, ), ;, ret, =]
[;, ret, =, FastMath, ., exp, (, p1, +, p2, -, p3, ), ;, }, return, ret, ;, }, public]
[., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q, ), ;, ret, =, FastMath, ., exp, (, p1, +]
[,, populationSize, ,, p, ,, q, ), ;, ret, =, FastMath, ., exp, (, p1, +, p2, -, p3, )]
[,, p, ,, q, ), ;, ret, =, FastMath, ., exp, (, p1, +, p2, -, p3, ), ;, }]
[,, q, ), ;, ret, =, FastMath, ., exp, (, p1, +, p2, -, p3, ), ;, }, return, ret]
[), ;, ret, =, FastMath, ., exp, (, p1, +, p2, -, p3, ), ;, }, return, ret, ;, }]
[=, FastMath, ., exp, (, p1, +, p2, -, p3, ), ;, }, return, ret, ;, }, public, double, upperCumulativeProbability]
[;, }, return, ret, ;, }, public, double, upperCumulativeProbability, (, int, x, ), {, double, ret, ;, final, int, []
[., exp, (, p1, +, p2, -, p3, ), ;, }, return, ret, ;, }, public, double, upperCumulativeProbability, (, int]
[), ;, }, return, ret, ;, }, public, double, upperCumulativeProbability, (, int, x, ), {, double, ret, ;, final, int]
[-, p3, ), ;, }, return, ret, ;, }, public, double, upperCumulativeProbability, (, int, x, ), {, double, ret, ;]
[+, p2, -, p3, ), ;, }, return, ret, ;, }, public, double, upperCumulativeProbability, (, int, x, ), {, double]
[-, p3, ), ;, }, return, ret, ;, }, public, double, upperCumulativeProbability, (, int, x, ), {, double, ret, ;]
[), ;, }, return, ret, ;, }, public, double, upperCumulativeProbability, (, int, x, ), {, double, ret, ;, final, int]
[;, }, public, double, upperCumulativeProbability, (, int, x, ), {, double, ret, ;, final, int, [, ], domain, =, getDomain]
[;, if, (, x, <=, domain, [, 0, ], ), {, ret, =, 1.0, ;, }, else, if, (, x]
[,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <=, domain, [, 0, ], ), {, ret, =, 1.0, ;]
[,, sampleSize, ), ;, if, (, x, <=, domain, [, 0, ], ), {, ret, =, 1.0, ;, }, else]
[), ;, if, (, x, <=, domain, [, 0, ], ), {, ret, =, 1.0, ;, }, else, if, (]
[), {, ret, =, 1.0, ;, }, else, if, (, x, >, domain, [, 1, ], ), {, ret, =]
[<=, domain, [, 0, ], ), {, ret, =, 1.0, ;, }, else, if, (, x, >, domain, [, 1]
[), {, ret, =, 1.0, ;, }, else, if, (, x, >, domain, [, 1, ], ), {, ret, =]
[[, 0, ], ), {, ret, =, 1.0, ;, }, else, if, (, x, >, domain, [, 1, ], )]
[], ), {, ret, =, 1.0, ;, }, else, if, (, x, >, domain, [, 1, ], ), {, ret]
[=, 1.0, ;, }, else, if, (, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }]
[;, }, else, if, (, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {]
[), {, ret, =, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 1, ], ,, x, ,]
[>, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, []
[), {, ret, =, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 1, ], ,, x, ,]
[[, 1, ], ), {, ret, =, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 1, ]]
[], ), {, ret, =, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 1, ], ,, x]
[=, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 1, ], ,, x, ,, -, 1, )]
[;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 1, ], ,, x, ,, -, 1, ), ;, }]
[=, innerCumulativeProbability, (, domain, [, 1, ], ,, x, ,, -, 1, ), ;, }, return, ret, ;, }, private]
[;, }, return, ret, ;, }, private, double, innerCumulativeProbability, (, int, x0, ,, int, x1, ,, int, dx, ), {]
[,, x, ,, -, 1, ), ;, }, return, ret, ;, }, private, double, innerCumulativeProbability, (, int, x0, ,, int]
[[, 1, ], ,, x, ,, -, 1, ), ;, }, return, ret, ;, }, private, double, innerCumulativeProbability, (, int]
[], ,, x, ,, -, 1, ), ;, }, return, ret, ;, }, private, double, innerCumulativeProbability, (, int, x0, ,]
[,, -, 1, ), ;, }, return, ret, ;, }, private, double, innerCumulativeProbability, (, int, x0, ,, int, x1, ,]
[), ;, }, return, ret, ;, }, private, double, innerCumulativeProbability, (, int, x0, ,, int, x1, ,, int, dx, )]
[), ;, }, return, ret, ;, }, private, double, innerCumulativeProbability, (, int, x0, ,, int, x1, ,, int, dx, )]
[;, }, private, double, innerCumulativeProbability, (, int, x0, ,, int, x1, ,, int, dx, ), {, double, ret, =, probability]
[;, while, (, x0, !=, x1, ), {, x0, +=, dx, ;, ret, +=, probability, (, x0, ), ;, }]
[), ;, while, (, x0, !=, x1, ), {, x0, +=, dx, ;, ret, +=, probability, (, x0, ), ;]
[), {, x0, +=, dx, ;, ret, +=, probability, (, x0, ), ;, }, return, ret, ;, }, public, double]
[!=, x1, ), {, x0, +=, dx, ;, ret, +=, probability, (, x0, ), ;, }, return, ret, ;, }]
[), {, x0, +=, dx, ;, ret, +=, probability, (, x0, ), ;, }, return, ret, ;, }, public, double]
[+=, dx, ;, ret, +=, probability, (, x0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, )]
[;, ret, +=, probability, (, x0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return]
[+=, probability, (, x0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return, getSampleSize, (]
[;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return, getSampleSize, (, ), *, (, getNumberOfSuccesses, (]
[), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return, getSampleSize, (, ), *, (, getNumberOfSuccesses]
[;, }, public, double, getNumericalMean, (, ), {, return, getSampleSize, (, ), *, (, getNumberOfSuccesses, (, ), /, (, double]
[;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;]
[*, (, getNumberOfSuccesses, (, ), /, (, double, ), getPopulationSize, (, ), ), ;, }, public, double, getNumericalVariance, (, )]
[;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;]
[), ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, )]
[/, (, double, ), getPopulationSize, (, ), ), ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated]
[), ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, )]
[), ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, )]
[), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance]
[), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance]
[=, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {]
[;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, N, =]
[=, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, N, =, getPopulationSize, (]
[;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, N, =, getPopulationSize, (, ), ;]
[;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, N, =, getPopulationSize, (, ), ;, final, double, m, =]
[;, final, double, m, =, getNumberOfSuccesses, (, ), ;, final, double, n, =, getSampleSize, (, ), ;, return, (, n]
[;, final, double, n, =, getSampleSize, (, ), ;, return, (, n, *, m, *, (, N, -, n, )]
[;, return, (, n, *, m, *, (, N, -, n, ), *, (, N, -, m, ), ), /]
[;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,, getSampleSize, (, ), +, getNumberOfSuccesses]
[/, (, N, *, N, *, (, N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, ), {]
[), /, (, N, *, N, *, (, N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, )]
[*, (, N, -, m, ), ), /, (, N, *, N, *, (, N, -, 1, ), ), ;]
[*, (, N, -, n, ), *, (, N, -, m, ), ), /, (, N, *, N, *, (]
[*, m, *, (, N, -, n, ), *, (, N, -, m, ), ), /, (, N, *, N]
[*, (, N, -, n, ), *, (, N, -, m, ), ), /, (, N, *, N, *, (]
[*, (, N, -, m, ), ), /, (, N, *, N, *, (, N, -, 1, ), ), ;]
[), *, (, N, -, m, ), ), /, (, N, *, N, *, (, N, -, 1, ), )]
[-, n, ), *, (, N, -, m, ), ), /, (, N, *, N, *, (, N, -, 1]
[), *, (, N, -, m, ), ), /, (, N, *, N, *, (, N, -, 1, ), )]
[), /, (, N, *, N, *, (, N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, )]
[), ), /, (, N, *, N, *, (, N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (]
[-, m, ), ), /, (, N, *, N, *, (, N, -, 1, ), ), ;, }, public, int]
[), ), /, (, N, *, N, *, (, N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (]
[;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,, getSampleSize, (, ), +, getNumberOfSuccesses]
[), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,, getSampleSize, (, ), +]
[*, (, N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (]
[*, N, *, (, N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, .]
[*, (, N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (]
[), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,, getSampleSize, (, ), +]
[), ), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,, getSampleSize, (, )]
[-, 1, ), ), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,, getSampleSize]
[), ), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,, getSampleSize, (, )]
[;, }, public, int, getSupportUpperBound, (, ), {, return, FastMath, ., min, (, getNumberOfSuccesses, (, ), ,, getSampleSize, (, )]
[., max, (, 0, ,, getSampleSize, (, ), +, getNumberOfSuccesses, (, ), -, getPopulationSize, (, ), ), ;, }, public]
[,, getSampleSize, (, ), +, getNumberOfSuccesses, (, ), -, getPopulationSize, (, ), ), ;, }, public, int, getSupportUpperBound, (, )]
[), ;, }, public, int, getSupportUpperBound, (, ), {, return, FastMath, ., min, (, getNumberOfSuccesses, (, ), ,, getSampleSize, (]
[-, getPopulationSize, (, ), ), ;, }, public, int, getSupportUpperBound, (, ), {, return, FastMath, ., min, (, getNumberOfSuccesses, (]
[+, getNumberOfSuccesses, (, ), -, getPopulationSize, (, ), ), ;, }, public, int, getSupportUpperBound, (, ), {, return, FastMath, .]
[-, getPopulationSize, (, ), ), ;, }, public, int, getSupportUpperBound, (, ), {, return, FastMath, ., min, (, getNumberOfSuccesses, (]
[), ;, }, public, int, getSupportUpperBound, (, ), {, return, FastMath, ., min, (, getNumberOfSuccesses, (, ), ,, getSampleSize, (]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[., min, (, getNumberOfSuccesses, (, ), ,, getSampleSize, (, ), ), ;, }, public, boolean, isSupportConnected, (, ), {, return]
[,, getSampleSize, (, ), ), ;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[), ;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[;, }, }]
