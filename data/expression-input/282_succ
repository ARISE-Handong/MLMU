[;, public, static, final, double, LOG10_VALUE, =, Math, ., log, (, 10.0, ), ;, public, static, final, double, SMALL_LOG_VALUE, =]
[;, public, static, final, double, SMALL_LOG_VALUE, =, 1e-100, ;, protected, boolean, allowNegativesFlag, =, false, ;, protected, boolean, strictValuesFlag, =, true]
[., log, (, 10.0, ), ;, public, static, final, double, SMALL_LOG_VALUE, =, 1e-100, ;, protected, boolean, allowNegativesFlag, =, false, ;]
[), ;, public, static, final, double, SMALL_LOG_VALUE, =, 1e-100, ;, protected, boolean, allowNegativesFlag, =, false, ;, protected, boolean, strictValuesFlag, =]
[;, protected, boolean, allowNegativesFlag, =, false, ;, protected, boolean, strictValuesFlag, =, true, ;, protected, final, NumberFormat, numberFormatterObj, =, NumberFormat, .]
[;, protected, boolean, strictValuesFlag, =, true, ;, protected, final, NumberFormat, numberFormatterObj, =, NumberFormat, ., getInstance, (, ), ;, protected, boolean]
[;, protected, final, NumberFormat, numberFormatterObj, =, NumberFormat, ., getInstance, (, ), ;, protected, boolean, expTickLabelsFlag, =, false, ;, protected, boolean]
[;, protected, boolean, expTickLabelsFlag, =, false, ;, protected, boolean, log10TickLabelsFlag, =, false, ;, protected, boolean, autoRangeNextLogFlag, =, false, ;, protected]
[., getInstance, (, ), ;, protected, boolean, expTickLabelsFlag, =, false, ;, protected, boolean, log10TickLabelsFlag, =, false, ;, protected, boolean, autoRangeNextLogFlag]
[;, protected, boolean, log10TickLabelsFlag, =, false, ;, protected, boolean, autoRangeNextLogFlag, =, false, ;, protected, boolean, smallLogFlag, =, false, ;, public]
[;, protected, boolean, autoRangeNextLogFlag, =, false, ;, protected, boolean, smallLogFlag, =, false, ;, public, LogarithmicAxis, (, String, label, ), {]
[;, protected, boolean, smallLogFlag, =, false, ;, public, LogarithmicAxis, (, String, label, ), {, super, (, label, ), ;, setupNumberFmtObj]
[;, public, LogarithmicAxis, (, String, label, ), {, super, (, label, ), ;, setupNumberFmtObj, (, ), ;, }, public, void]
[), ;, setupNumberFmtObj, (, ), ;, }, public, void, setAllowNegativesFlag, (, boolean, flgVal, ), {, this, ., allowNegativesFlag, =, flgVal]
[;, }, public, void, setAllowNegativesFlag, (, boolean, flgVal, ), {, this, ., allowNegativesFlag, =, flgVal, ;, }, public, boolean, getAllowNegativesFlag]
[=, flgVal, ;, }, public, boolean, getAllowNegativesFlag, (, ), {, return, this, ., allowNegativesFlag, ;, }, public, void, setStrictValuesFlag, (]
[., allowNegativesFlag, =, flgVal, ;, }, public, boolean, getAllowNegativesFlag, (, ), {, return, this, ., allowNegativesFlag, ;, }, public, void]
[;, }, public, boolean, getAllowNegativesFlag, (, ), {, return, this, ., allowNegativesFlag, ;, }, public, void, setStrictValuesFlag, (, boolean, flgVal]
[;, }, public, void, setStrictValuesFlag, (, boolean, flgVal, ), {, this, ., strictValuesFlag, =, flgVal, ;, }, public, boolean, getStrictValuesFlag]
[., allowNegativesFlag, ;, }, public, void, setStrictValuesFlag, (, boolean, flgVal, ), {, this, ., strictValuesFlag, =, flgVal, ;, }, public]
[=, flgVal, ;, }, public, boolean, getStrictValuesFlag, (, ), {, return, this, ., strictValuesFlag, ;, }, public, void, setExpTickLabelsFlag, (]
[., strictValuesFlag, =, flgVal, ;, }, public, boolean, getStrictValuesFlag, (, ), {, return, this, ., strictValuesFlag, ;, }, public, void]
[;, }, public, boolean, getStrictValuesFlag, (, ), {, return, this, ., strictValuesFlag, ;, }, public, void, setExpTickLabelsFlag, (, boolean, flgVal]
[;, }, public, void, setExpTickLabelsFlag, (, boolean, flgVal, ), {, this, ., expTickLabelsFlag, =, flgVal, ;, setupNumberFmtObj, (, ), ;]
[., strictValuesFlag, ;, }, public, void, setExpTickLabelsFlag, (, boolean, flgVal, ), {, this, ., expTickLabelsFlag, =, flgVal, ;, setupNumberFmtObj, (]
[=, flgVal, ;, setupNumberFmtObj, (, ), ;, }, public, boolean, getExpTickLabelsFlag, (, ), {, return, this, ., expTickLabelsFlag, ;, }]
[., expTickLabelsFlag, =, flgVal, ;, setupNumberFmtObj, (, ), ;, }, public, boolean, getExpTickLabelsFlag, (, ), {, return, this, ., expTickLabelsFlag]
[;, setupNumberFmtObj, (, ), ;, }, public, boolean, getExpTickLabelsFlag, (, ), {, return, this, ., expTickLabelsFlag, ;, }, public, void]
[;, }, public, boolean, getExpTickLabelsFlag, (, ), {, return, this, ., expTickLabelsFlag, ;, }, public, void, setLog10TickLabelsFlag, (, boolean, flag]
[;, }, public, void, setLog10TickLabelsFlag, (, boolean, flag, ), {, this, ., log10TickLabelsFlag, =, flag, ;, }, public, boolean, getLog10TickLabelsFlag]
[., expTickLabelsFlag, ;, }, public, void, setLog10TickLabelsFlag, (, boolean, flag, ), {, this, ., log10TickLabelsFlag, =, flag, ;, }, public]
[=, flag, ;, }, public, boolean, getLog10TickLabelsFlag, (, ), {, return, this, ., log10TickLabelsFlag, ;, }, public, void, setAutoRangeNextLogFlag, (]
[., log10TickLabelsFlag, =, flag, ;, }, public, boolean, getLog10TickLabelsFlag, (, ), {, return, this, ., log10TickLabelsFlag, ;, }, public, void]
[;, }, public, boolean, getLog10TickLabelsFlag, (, ), {, return, this, ., log10TickLabelsFlag, ;, }, public, void, setAutoRangeNextLogFlag, (, boolean, flag]
[;, }, public, void, setAutoRangeNextLogFlag, (, boolean, flag, ), {, this, ., autoRangeNextLogFlag, =, flag, ;, }, public, boolean, getAutoRangeNextLogFlag]
[., log10TickLabelsFlag, ;, }, public, void, setAutoRangeNextLogFlag, (, boolean, flag, ), {, this, ., autoRangeNextLogFlag, =, flag, ;, }, public]
[=, flag, ;, }, public, boolean, getAutoRangeNextLogFlag, (, ), {, return, this, ., autoRangeNextLogFlag, ;, }, public, void, setRange, (]
[., autoRangeNextLogFlag, =, flag, ;, }, public, boolean, getAutoRangeNextLogFlag, (, ), {, return, this, ., autoRangeNextLogFlag, ;, }, public, void]
[;, }, public, boolean, getAutoRangeNextLogFlag, (, ), {, return, this, ., autoRangeNextLogFlag, ;, }, public, void, setRange, (, Range, range]
[;, }, public, void, setRange, (, Range, range, ), {, super, ., setRange, (, range, ), ;, setupSmallLogFlag, (, )]
[., autoRangeNextLogFlag, ;, }, public, void, setRange, (, Range, range, ), {, super, ., setRange, (, range, ), ;, setupSmallLogFlag]
[;, setupSmallLogFlag, (, ), ;, }, protected, void, setupSmallLogFlag, (, ), {, double, lowerVal, =, getRange, (, ), ., getLowerBound]
[., setRange, (, range, ), ;, setupSmallLogFlag, (, ), ;, }, protected, void, setupSmallLogFlag, (, ), {, double, lowerVal, =]
[), ;, setupSmallLogFlag, (, ), ;, }, protected, void, setupSmallLogFlag, (, ), {, double, lowerVal, =, getRange, (, ), .]
[;, }, protected, void, setupSmallLogFlag, (, ), {, double, lowerVal, =, getRange, (, ), ., getLowerBound, (, ), ;, this]
[;, this, ., smallLogFlag, =, (, !, this, ., allowNegativesFlag, &&, lowerVal, <, 10.0, &&, lowerVal, >, 0.0, ), ;]
[., getLowerBound, (, ), ;, this, ., smallLogFlag, =, (, !, this, ., allowNegativesFlag, &&, lowerVal, <, 10.0, &&, lowerVal]
[=, (, !, this, ., allowNegativesFlag, &&, lowerVal, <, 10.0, &&, lowerVal, >, 0.0, ), ;, }, protected, void, setupNumberFmtObj]
[., smallLogFlag, =, (, !, this, ., allowNegativesFlag, &&, lowerVal, <, 10.0, &&, lowerVal, >, 0.0, ), ;, }, protected]
[;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {, (, (, DecimalFormat]
[), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {, (, (]
[&&, lowerVal, >, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat]
[&&, lowerVal, <, 10.0, &&, lowerVal, >, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this]
[&&, lowerVal, <, 10.0, &&, lowerVal, >, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this]
[., allowNegativesFlag, &&, lowerVal, <, 10.0, &&, lowerVal, >, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if]
[&&, lowerVal, >, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat]
[<, 10.0, &&, lowerVal, >, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj]
[&&, lowerVal, >, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat]
[), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {, (, (]
[>, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {]
[), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {, (, (]
[), {, (, (, DecimalFormat, ), this, ., numberFormatterObj, ), ., applyPattern, (, this, ., expTickLabelsFlag, ?, "0E0", :, "0.###"]
[instanceof, DecimalFormat, ), {, (, (, DecimalFormat, ), this, ., numberFormatterObj, ), ., applyPattern, (, this, ., expTickLabelsFlag, ?, "0E0"]
[., numberFormatterObj, instanceof, DecimalFormat, ), {, (, (, DecimalFormat, ), this, ., numberFormatterObj, ), ., applyPattern, (, this, ., expTickLabelsFlag]
[;, }, }, protected, double, switchedLog10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., log, (]
[., applyPattern, (, this, ., expTickLabelsFlag, ?, "0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double, val]
[), ., applyPattern, (, this, ., expTickLabelsFlag, ?, "0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double]
[), ., applyPattern, (, this, ., expTickLabelsFlag, ?, "0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double]
[., numberFormatterObj, ), ., applyPattern, (, this, ., expTickLabelsFlag, ?, "0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10]
[), ;, }, }, protected, double, switchedLog10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., log]
[?, "0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double, val, ), {, return, this, ., smallLogFlag]
[., expTickLabelsFlag, ?, "0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double, val, ), {, return, this]
[:, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math]
[), ;, }, }, protected, double, switchedLog10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., log]
[;, }, public, double, switchedPow10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., pow, (, 10.0]
[?, Math, ., log, (, val, ), /, LOG10_VALUE, :, adjustedLog10, (, val, ), ;, }, public, double, switchedPow10, (]
[., smallLogFlag, ?, Math, ., log, (, val, ), /, LOG10_VALUE, :, adjustedLog10, (, val, ), ;, }, public, double]
[:, adjustedLog10, (, val, ), ;, }, public, double, switchedPow10, (, double, val, ), {, return, this, ., smallLogFlag, ?]
[/, LOG10_VALUE, :, adjustedLog10, (, val, ), ;, }, public, double, switchedPow10, (, double, val, ), {, return, this, .]
[., log, (, val, ), /, LOG10_VALUE, :, adjustedLog10, (, val, ), ;, }, public, double, switchedPow10, (, double, val]
[), /, LOG10_VALUE, :, adjustedLog10, (, val, ), ;, }, public, double, switchedPow10, (, double, val, ), {, return, this]
[:, adjustedLog10, (, val, ), ;, }, public, double, switchedPow10, (, double, val, ), {, return, this, ., smallLogFlag, ?]
[;, }, public, double, switchedPow10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., pow, (, 10.0]
[), ;, }, public, double, switchedPow10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., pow, (]
[;, }, public, double, adjustedLog10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if]
[?, Math, ., pow, (, 10.0, ,, val, ), :, adjustedPow10, (, val, ), ;, }, public, double, adjustedLog10, (]
[., smallLogFlag, ?, Math, ., pow, (, 10.0, ,, val, ), :, adjustedPow10, (, val, ), ;, }, public, double]
[:, adjustedPow10, (, val, ), ;, }, public, double, adjustedLog10, (, double, val, ), {, boolean, negFlag, =, (, val]
[., pow, (, 10.0, ,, val, ), :, adjustedPow10, (, val, ), ;, }, public, double, adjustedLog10, (, double, val]
[,, val, ), :, adjustedPow10, (, val, ), ;, }, public, double, adjustedLog10, (, double, val, ), {, boolean, negFlag]
[), :, adjustedPow10, (, val, ), ;, }, public, double, adjustedLog10, (, double, val, ), {, boolean, negFlag, =, (]
[;, }, public, double, adjustedLog10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if]
[), ;, }, public, double, adjustedLog10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;]
[;, if, (, negFlag, ), {, val, =, -, val, ;, }, if, (, val, <, 10.0, ), {, val]
[), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, if, (, val, <, 10.0, ), {]
[<, 0.0, ), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, if, (, val, <, 10.0]
[), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, if, (, val, <, 10.0, ), {]
[), {, val, =, -, val, ;, }, if, (, val, <, 10.0, ), {, val, +=, (, 10.0, -]
[=, -, val, ;, }, if, (, val, <, 10.0, ), {, val, +=, (, 10.0, -, val, ), /]
[;, }, if, (, val, <, 10.0, ), {, val, +=, (, 10.0, -, val, ), /, 10.0, ;, }]
[;, }, if, (, val, <, 10.0, ), {, val, +=, (, 10.0, -, val, ), /, 10.0, ;, }]
[), {, val, +=, (, 10.0, -, val, ), /, 10.0, ;, }, double, res, =, Math, ., log, (]
[<, 10.0, ), {, val, +=, (, 10.0, -, val, ), /, 10.0, ;, }, double, res, =, Math, .]
[), {, val, +=, (, 10.0, -, val, ), /, 10.0, ;, }, double, res, =, Math, ., log, (]
[+=, (, 10.0, -, val, ), /, 10.0, ;, }, double, res, =, Math, ., log, (, val, ), /]
[;, }, double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return, negFlag, ?, (, -, res]
[/, 10.0, ;, }, double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return, negFlag, ?, (]
[), /, 10.0, ;, }, double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return, negFlag, ?]
[-, val, ), /, 10.0, ;, }, double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return]
[), /, 10.0, ;, }, double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return, negFlag, ?]
[;, }, double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return, negFlag, ?, (, -, res]
[;, return, negFlag, ?, (, -, res, ), :, res, ;, }, public, double, adjustedPow10, (, double, val, ), {]
[/, LOG10_VALUE, ;, return, negFlag, ?, (, -, res, ), :, res, ;, }, public, double, adjustedPow10, (, double, val]
[., log, (, val, ), /, LOG10_VALUE, ;, return, negFlag, ?, (, -, res, ), :, res, ;, }, public]
[), /, LOG10_VALUE, ;, return, negFlag, ?, (, -, res, ), :, res, ;, }, public, double, adjustedPow10, (, double]
[;, return, negFlag, ?, (, -, res, ), :, res, ;, }, public, double, adjustedPow10, (, double, val, ), {]
[;, }, public, double, adjustedPow10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if]
[?, (, -, res, ), :, res, ;, }, public, double, adjustedPow10, (, double, val, ), {, boolean, negFlag, =]
[:, res, ;, }, public, double, adjustedPow10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, )]
[), :, res, ;, }, public, double, adjustedPow10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0]
[), :, res, ;, }, public, double, adjustedPow10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0]
[;, }, public, double, adjustedPow10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if]
[;, if, (, negFlag, ), {, val, =, -, val, ;, }, double, res, ;, if, (, val, <, 1.0]
[), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, double, res, ;, if, (, val, <]
[<, 0.0, ), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, double, res, ;, if, (]
[), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, double, res, ;, if, (, val, <]
[), {, val, =, -, val, ;, }, double, res, ;, if, (, val, <, 1.0, ), {, res, =]
[=, -, val, ;, }, double, res, ;, if, (, val, <, 1.0, ), {, res, =, (, Math, .]
[;, }, double, res, ;, if, (, val, <, 1.0, ), {, res, =, (, Math, ., pow, (, 10]
[;, }, double, res, ;, if, (, val, <, 1.0, ), {, res, =, (, Math, ., pow, (, 10]
[), {, res, =, (, Math, ., pow, (, 10, ,, val, +, 1.0, ), -, 10.0, ), /, 9.0]
[<, 1.0, ), {, res, =, (, Math, ., pow, (, 10, ,, val, +, 1.0, ), -, 10.0, )]
[), {, res, =, (, Math, ., pow, (, 10, ,, val, +, 1.0, ), -, 10.0, ), /, 9.0]
[=, (, Math, ., pow, (, 10, ,, val, +, 1.0, ), -, 10.0, ), /, 9.0, ;, }, else]
[;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, ), ;, }, return, negFlag, ?, (]
[/, 9.0, ;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, ), ;, }, return, negFlag]
[), /, 9.0, ;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, ), ;, }, return]
[-, 10.0, ), /, 9.0, ;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, ), ;]
[., pow, (, 10, ,, val, +, 1.0, ), -, 10.0, ), /, 9.0, ;, }, else, {, res, =]
[,, val, +, 1.0, ), -, 10.0, ), /, 9.0, ;, }, else, {, res, =, Math, ., pow, (]
[), -, 10.0, ), /, 9.0, ;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, )]
[+, 1.0, ), -, 10.0, ), /, 9.0, ;, }, else, {, res, =, Math, ., pow, (, 10, ,]
[), -, 10.0, ), /, 9.0, ;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, )]
[), /, 9.0, ;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, ), ;, }, return]
[;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, ), ;, }, return, negFlag, ?, (]
[=, Math, ., pow, (, 10, ,, val, ), ;, }, return, negFlag, ?, (, -, res, ), :, res]
[;, }, return, negFlag, ?, (, -, res, ), :, res, ;, }, protected, double, computeLogFloor, (, double, lower, )]
[., pow, (, 10, ,, val, ), ;, }, return, negFlag, ?, (, -, res, ), :, res, ;, }]
[,, val, ), ;, }, return, negFlag, ?, (, -, res, ), :, res, ;, }, protected, double, computeLogFloor, (]
[), ;, }, return, negFlag, ?, (, -, res, ), :, res, ;, }, protected, double, computeLogFloor, (, double, lower]
[;, }, protected, double, computeLogFloor, (, double, lower, ), {, double, logFloor, ;, if, (, this, ., allowNegativesFlag, ), {]
[?, (, -, res, ), :, res, ;, }, protected, double, computeLogFloor, (, double, lower, ), {, double, logFloor, ;]
[:, res, ;, }, protected, double, computeLogFloor, (, double, lower, ), {, double, logFloor, ;, if, (, this, ., allowNegativesFlag]
[), :, res, ;, }, protected, double, computeLogFloor, (, double, lower, ), {, double, logFloor, ;, if, (, this, .]
[), :, res, ;, }, protected, double, computeLogFloor, (, double, lower, ), {, double, logFloor, ;, if, (, this, .]
[;, }, protected, double, computeLogFloor, (, double, lower, ), {, double, logFloor, ;, if, (, this, ., allowNegativesFlag, ), {]
[), {, if, (, lower, >, 10.0, ), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;]
[., allowNegativesFlag, ), {, if, (, lower, >, 10.0, ), {, logFloor, =, Math, ., log, (, lower, ), /]
[), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor]
[>, 10.0, ), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor]
[), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor]
[=, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor]
[;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, )]
[/, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,]
[., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math]
[), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10]
[;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, )]
[=, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }]
[;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, if, (, lower, <, -, 10.0]
[., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, if]
[), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, if, (, lower, <, -]
[=, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, if, (, lower, <, -, 10.0, ), {]
[;, }, else, if, (, lower, <, -, 10.0, ), {, logFloor, =, Math, ., log, (, -, lower, )]
[., pow, (, 10, ,, logFloor, ), ;, }, else, if, (, lower, <, -, 10.0, ), {, logFloor, =]
[,, logFloor, ), ;, }, else, if, (, lower, <, -, 10.0, ), {, logFloor, =, Math, ., log, (]
[), ;, }, else, if, (, lower, <, -, 10.0, ), {, logFloor, =, Math, ., log, (, -, lower]
[), {, logFloor, =, Math, ., log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (]
[<, -, 10.0, ), {, logFloor, =, Math, ., log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math]
[), {, logFloor, =, Math, ., log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (]
[), {, logFloor, =, Math, ., log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (]
[=, Math, ., log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, -, logFloor, )]
[;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor, =, -, Math, ., pow, (, 10, ,]
[/, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor, =, -, Math, ., pow, (]
[., log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor]
[), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor, =, -, Math, ., pow]
[), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor, =, -, Math, ., pow]
[;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor, =, -, Math, ., pow, (, 10, ,]
[=, Math, ., floor, (, -, logFloor, ), ;, logFloor, =, -, Math, ., pow, (, 10, ,, -, logFloor]
[;, logFloor, =, -, Math, ., pow, (, 10, ,, -, logFloor, ), ;, }, else, {, logFloor, =, Math]
[., floor, (, -, logFloor, ), ;, logFloor, =, -, Math, ., pow, (, 10, ,, -, logFloor, ), ;]
[), ;, logFloor, =, -, Math, ., pow, (, 10, ,, -, logFloor, ), ;, }, else, {, logFloor, =]
[), ;, logFloor, =, -, Math, ., pow, (, 10, ,, -, logFloor, ), ;, }, else, {, logFloor, =]
[=, -, Math, ., pow, (, 10, ,, -, logFloor, ), ;, }, else, {, logFloor, =, Math, ., floor]
[;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, else, {, if, (, lower]
[;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, else, {, if, (, lower]
[., pow, (, 10, ,, -, logFloor, ), ;, }, else, {, logFloor, =, Math, ., floor, (, lower, )]
[,, -, logFloor, ), ;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, else]
[), ;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, else, {, if, (]
[), ;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, else, {, if, (]
[=, Math, ., floor, (, lower, ), ;, }, }, else, {, if, (, lower, >, 0.0, ), {, logFloor]
[;, }, }, else, {, if, (, lower, >, 0.0, ), {, logFloor, =, Math, ., log, (, lower, )]
[., floor, (, lower, ), ;, }, }, else, {, if, (, lower, >, 0.0, ), {, logFloor, =, Math]
[), ;, }, }, else, {, if, (, lower, >, 0.0, ), {, logFloor, =, Math, ., log, (, lower]
[), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor]
[>, 0.0, ), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor]
[), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor]
[=, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor]
[;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, )]
[/, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,]
[., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math]
[), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10]
[;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, )]
[=, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }]
[;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, {, logFloor, =, Math, ., floor]
[., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, {]
[), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, {, logFloor, =, Math, .]
[=, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, {, logFloor, =, Math, ., floor, (, lower]
[;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, return, logFloor, ;, }, protected]
[., pow, (, 10, ,, logFloor, ), ;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;]
[,, logFloor, ), ;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, return, logFloor]
[), ;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, return, logFloor, ;, }]
[=, Math, ., floor, (, lower, ), ;, }, }, return, logFloor, ;, }, protected, double, computeLogCeil, (, double, upper]
[;, }, }, return, logFloor, ;, }, protected, double, computeLogCeil, (, double, upper, ), {, double, logCeil, ;, if, (]
[., floor, (, lower, ), ;, }, }, return, logFloor, ;, }, protected, double, computeLogCeil, (, double, upper, ), {]
[), ;, }, }, return, logFloor, ;, }, protected, double, computeLogCeil, (, double, upper, ), {, double, logCeil, ;, if]
[;, }, protected, double, computeLogCeil, (, double, upper, ), {, double, logCeil, ;, if, (, this, ., allowNegativesFlag, ), {]
[), {, if, (, upper, >, 10.0, ), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;]
[., allowNegativesFlag, ), {, if, (, upper, >, 10.0, ), {, logCeil, =, Math, ., log, (, upper, ), /]
[), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil]
[>, 10.0, ), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil]
[), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil]
[=, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil]
[;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, )]
[/, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,]
[., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math]
[), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10]
[;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, )]
[=, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }]
[;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, if, (, upper, <, -, 10.0]
[., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, if]
[), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, if, (, upper, <, -]
[=, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, if, (, upper, <, -, 10.0, ), {]
[;, }, else, if, (, upper, <, -, 10.0, ), {, logCeil, =, Math, ., log, (, -, upper, )]
[., pow, (, 10, ,, logCeil, ), ;, }, else, if, (, upper, <, -, 10.0, ), {, logCeil, =]
[,, logCeil, ), ;, }, else, if, (, upper, <, -, 10.0, ), {, logCeil, =, Math, ., log, (]
[), ;, }, else, if, (, upper, <, -, 10.0, ), {, logCeil, =, Math, ., log, (, -, upper]
[), {, logCeil, =, Math, ., log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (]
[<, -, 10.0, ), {, logCeil, =, Math, ., log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math]
[), {, logCeil, =, Math, ., log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (]
[), {, logCeil, =, Math, ., log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (]
[=, Math, ., log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, -, logCeil, )]
[;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =, -, Math, ., pow, (, 10, ,]
[/, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =, -, Math, ., pow, (]
[., log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil]
[), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =, -, Math, ., pow]
[), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =, -, Math, ., pow]
[;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =, -, Math, ., pow, (, 10, ,]
[=, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =, -, Math, ., pow, (, 10, ,, -, logCeil]
[;, logCeil, =, -, Math, ., pow, (, 10, ,, -, logCeil, ), ;, }, else, {, logCeil, =, Math]
[., ceil, (, -, logCeil, ), ;, logCeil, =, -, Math, ., pow, (, 10, ,, -, logCeil, ), ;]
[), ;, logCeil, =, -, Math, ., pow, (, 10, ,, -, logCeil, ), ;, }, else, {, logCeil, =]
[), ;, logCeil, =, -, Math, ., pow, (, 10, ,, -, logCeil, ), ;, }, else, {, logCeil, =]
[=, -, Math, ., pow, (, 10, ,, -, logCeil, ), ;, }, else, {, logCeil, =, Math, ., ceil]
[;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (, upper]
[;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (, upper]
[., pow, (, 10, ,, -, logCeil, ), ;, }, else, {, logCeil, =, Math, ., ceil, (, upper, )]
[,, -, logCeil, ), ;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, else]
[), ;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (]
[), ;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (]
[=, Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (, upper, >, 0.0, ), {, logCeil]
[;, }, }, else, {, if, (, upper, >, 0.0, ), {, logCeil, =, Math, ., log, (, upper, )]
[., ceil, (, upper, ), ;, }, }, else, {, if, (, upper, >, 0.0, ), {, logCeil, =, Math]
[), ;, }, }, else, {, if, (, upper, >, 0.0, ), {, logCeil, =, Math, ., log, (, upper]
[), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil]
[>, 0.0, ), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil]
[), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil]
[=, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil]
[;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, )]
[/, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,]
[., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math]
[), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10]
[;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, )]
[=, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }]
[;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, {, logCeil, =, Math, ., ceil]
[., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, {]
[), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, {, logCeil, =, Math, .]
[=, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, {, logCeil, =, Math, ., ceil, (, upper]
[;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, return, logCeil, ;, }, public]
[., pow, (, 10, ,, logCeil, ), ;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;]
[,, logCeil, ), ;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, return, logCeil]
[), ;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, return, logCeil, ;, }]
[=, Math, ., ceil, (, upper, ), ;, }, }, return, logCeil, ;, }, public, void, autoAdjustRange, (, ), {]
[;, }, }, return, logCeil, ;, }, public, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;]
[., ceil, (, upper, ), ;, }, }, return, logCeil, ;, }, public, void, autoAdjustRange, (, ), {, Plot, plot]
[), ;, }, }, return, logCeil, ;, }, public, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, )]
[;, }, public, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==, null]
[;, if, (, plot, ==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap]
[), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;]
[==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, )]
[), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;]
[), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, double, lower, ;, Range, r, =, vap, ., getDataRange, (]
[instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, double, lower, ;, Range, r, =, vap, .]
[;, double, lower, ;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (, r, ==, null, )]
[;, double, lower, ;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (, r, ==, null, )]
[;, if, (, r, ==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, lower, =, r, ., getLowerBound, (]
[., getDataRange, (, this, ), ;, if, (, r, ==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, lower]
[), ;, if, (, r, ==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, lower, =, r, ., getLowerBound]
[), {, r, =, getDefaultAutoRange, (, ), ;, lower, =, r, ., getLowerBound, (, ), ;, }, else, {, lower]
[==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, lower, =, r, ., getLowerBound, (, ), ;, }, else]
[), {, r, =, getDefaultAutoRange, (, ), ;, lower, =, r, ., getLowerBound, (, ), ;, }, else, {, lower]
[=, getDefaultAutoRange, (, ), ;, lower, =, r, ., getLowerBound, (, ), ;, }, else, {, lower, =, r, .]
[;, lower, =, r, ., getLowerBound, (, ), ;, }, else, {, lower, =, r, ., getLowerBound, (, ), ;]
[=, r, ., getLowerBound, (, ), ;, }, else, {, lower, =, r, ., getLowerBound, (, ), ;, if, (]
[;, }, else, {, lower, =, r, ., getLowerBound, (, ), ;, if, (, this, ., strictValuesFlag, &&, !, this]
[., getLowerBound, (, ), ;, }, else, {, lower, =, r, ., getLowerBound, (, ), ;, if, (, this, .]
[=, r, ., getLowerBound, (, ), ;, if, (, this, ., strictValuesFlag, &&, !, this, ., allowNegativesFlag, &&, lower, <=]
[;, if, (, this, ., strictValuesFlag, &&, !, this, ., allowNegativesFlag, &&, lower, <=, 0.0, ), {, throw, new, RuntimeException]
[., getLowerBound, (, ), ;, if, (, this, ., strictValuesFlag, &&, !, this, ., allowNegativesFlag, &&, lower, <=, 0.0, )]
[), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (, lower]
[&&, lower, <=, 0.0, ), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin]
[&&, !, this, ., allowNegativesFlag, &&, lower, <=, 0.0, ), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;]
[., strictValuesFlag, &&, !, this, ., allowNegativesFlag, &&, lower, <=, 0.0, ), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis"]
[&&, lower, <=, 0.0, ), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin]
[&&, lower, <=, 0.0, ), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin]
[., allowNegativesFlag, &&, lower, <=, 0.0, ), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final]
[), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (, lower]
[<=, 0.0, ), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if]
[), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (, lower]
[;, }, }, final, double, lowerMargin, ;, if, (, lower, >, 0.0, &&, (, lowerMargin, =, getLowerMargin, (, ), )]
[), ;, }, }, final, double, lowerMargin, ;, if, (, lower, >, 0.0, &&, (, lowerMargin, =, getLowerMargin, (, )]
[+, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (, lower, >, 0.0, &&, (, lowerMargin, =, getLowerMargin]
[), ;, }, }, final, double, lowerMargin, ;, if, (, lower, >, 0.0, &&, (, lowerMargin, =, getLowerMargin, (, )]
[), {, final, double, logLower, =, (, Math, ., log, (, lower, ), /, LOG10_VALUE, ), ;, double, logAbs, ;]
[&&, (, lowerMargin, =, getLowerMargin, (, ), ), >, 0.0, ), {, final, double, logLower, =, (, Math, ., log]
[>, 0.0, &&, (, lowerMargin, =, getLowerMargin, (, ), ), >, 0.0, ), {, final, double, logLower, =, (, Math]
[&&, (, lowerMargin, =, getLowerMargin, (, ), ), >, 0.0, ), {, final, double, logLower, =, (, Math, ., log]
[), {, final, double, logLower, =, (, Math, ., log, (, lower, ), /, LOG10_VALUE, ), ;, double, logAbs, ;]
[>, 0.0, ), {, final, double, logLower, =, (, Math, ., log, (, lower, ), /, LOG10_VALUE, ), ;, double]
[=, getLowerMargin, (, ), ), >, 0.0, ), {, final, double, logLower, =, (, Math, ., log, (, lower, )]
[), >, 0.0, ), {, final, double, logLower, =, (, Math, ., log, (, lower, ), /, LOG10_VALUE, ), ;]
[), {, final, double, logLower, =, (, Math, ., log, (, lower, ), /, LOG10_VALUE, ), ;, double, logAbs, ;]
[;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logLower, ), ), <, 1.0, ), {]
[), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logLower, ), ), <, 1.0, )]
[/, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logLower, ), ), <]
[., log, (, lower, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs]
[), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logLower, ), )]
[), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logLower, ), ), <, 1.0, )]
[), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (, logLower, -, (, logAbs]
[<, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (, logLower, -]
[=, Math, ., abs, (, logLower, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math]
[), <, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (, logLower]
[., abs, (, logLower, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow]
[), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (]
[), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (, logLower, -, (, logAbs]
[=, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (, logLower, -, (, logAbs, *, lowerMargin, )]
[;, }, lower, =, Math, ., pow, (, 10, ,, (, logLower, -, (, logAbs, *, lowerMargin, ), ), )]
[=, Math, ., pow, (, 10, ,, (, logLower, -, (, logAbs, *, lowerMargin, ), ), ), ;, }, if]
[;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (, !]
[., pow, (, 10, ,, (, logLower, -, (, logAbs, *, lowerMargin, ), ), ), ;, }, if, (, this]
[,, (, logLower, -, (, logAbs, *, lowerMargin, ), ), ), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {]
[), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (]
[), ), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if]
[-, (, logAbs, *, lowerMargin, ), ), ), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor]
[), ), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if]
[), ), ), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }]
[*, lowerMargin, ), ), ), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, )]
[), ), ), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }]
[), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, lower, >=, 0.0]
[., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, lower]
[=, computeLogFloor, (, lower, ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, lower, >=, 0.0, &&, lower, <]
[;, }, if, (, !, this, ., allowNegativesFlag, &&, lower, >=, 0.0, &&, lower, <, SMALL_LOG_VALUE, ), {, lower, =]
[), ;, }, if, (, !, this, ., allowNegativesFlag, &&, lower, >=, 0.0, &&, lower, <, SMALL_LOG_VALUE, ), {, lower]
[), {, lower, =, r, ., getLowerBound, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;]
[&&, lower, <, SMALL_LOG_VALUE, ), {, lower, =, r, ., getLowerBound, (, ), ;, }, double, upper, =, r, .]
[&&, lower, >=, 0.0, &&, lower, <, SMALL_LOG_VALUE, ), {, lower, =, r, ., getLowerBound, (, ), ;, }, double]
[&&, lower, >=, 0.0, &&, lower, <, SMALL_LOG_VALUE, ), {, lower, =, r, ., getLowerBound, (, ), ;, }, double]
[., allowNegativesFlag, &&, lower, >=, 0.0, &&, lower, <, SMALL_LOG_VALUE, ), {, lower, =, r, ., getLowerBound, (, ), ;]
[&&, lower, <, SMALL_LOG_VALUE, ), {, lower, =, r, ., getLowerBound, (, ), ;, }, double, upper, =, r, .]
[>=, 0.0, &&, lower, <, SMALL_LOG_VALUE, ), {, lower, =, r, ., getLowerBound, (, ), ;, }, double, upper, =]
[&&, lower, <, SMALL_LOG_VALUE, ), {, lower, =, r, ., getLowerBound, (, ), ;, }, double, upper, =, r, .]
[), {, lower, =, r, ., getLowerBound, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;]
[<, SMALL_LOG_VALUE, ), {, lower, =, r, ., getLowerBound, (, ), ;, }, double, upper, =, r, ., getUpperBound, (]
[), {, lower, =, r, ., getLowerBound, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;]
[=, r, ., getLowerBound, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, final, double, upperMargin]
[;, }, double, upper, =, r, ., getUpperBound, (, ), ;, final, double, upperMargin, ;, if, (, upper, >, 0.0]
[., getLowerBound, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, final, double, upperMargin, ;, if]
[;, final, double, upperMargin, ;, if, (, upper, >, 0.0, &&, (, upperMargin, =, getUpperMargin, (, ), ), >, 0.0]
[., getUpperBound, (, ), ;, final, double, upperMargin, ;, if, (, upper, >, 0.0, &&, (, upperMargin, =, getUpperMargin, (]
[), {, final, double, logUpper, =, (, Math, ., log, (, upper, ), /, LOG10_VALUE, ), ;, double, logAbs, ;]
[&&, (, upperMargin, =, getUpperMargin, (, ), ), >, 0.0, ), {, final, double, logUpper, =, (, Math, ., log]
[>, 0.0, &&, (, upperMargin, =, getUpperMargin, (, ), ), >, 0.0, ), {, final, double, logUpper, =, (, Math]
[&&, (, upperMargin, =, getUpperMargin, (, ), ), >, 0.0, ), {, final, double, logUpper, =, (, Math, ., log]
[), {, final, double, logUpper, =, (, Math, ., log, (, upper, ), /, LOG10_VALUE, ), ;, double, logAbs, ;]
[>, 0.0, ), {, final, double, logUpper, =, (, Math, ., log, (, upper, ), /, LOG10_VALUE, ), ;, double]
[=, getUpperMargin, (, ), ), >, 0.0, ), {, final, double, logUpper, =, (, Math, ., log, (, upper, )]
[), >, 0.0, ), {, final, double, logUpper, =, (, Math, ., log, (, upper, ), /, LOG10_VALUE, ), ;]
[), {, final, double, logUpper, =, (, Math, ., log, (, upper, ), /, LOG10_VALUE, ), ;, double, logAbs, ;]
[;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logUpper, ), ), <, 1.0, ), {]
[), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logUpper, ), ), <, 1.0, )]
[/, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logUpper, ), ), <]
[., log, (, upper, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs]
[), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logUpper, ), )]
[), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logUpper, ), ), <, 1.0, )]
[), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (, logUpper, +, (, logAbs]
[<, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (, logUpper, +]
[=, Math, ., abs, (, logUpper, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math]
[), <, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (, logUpper]
[., abs, (, logUpper, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow]
[), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (]
[), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (, logUpper, +, (, logAbs]
[=, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (, logUpper, +, (, logAbs, *, upperMargin, )]
[;, }, upper, =, Math, ., pow, (, 10, ,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), )]
[=, Math, ., pow, (, 10, ,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if]
[;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&, lower, >, 0.0]
[., pow, (, 10, ,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (, !]
[,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&]
[), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&, lower, >]
[), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&, lower]
[+, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0]
[), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&, lower]
[), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&]
[*, upperMargin, ), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >]
[), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&]
[), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (]
[&&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =]
[&&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /]
[&&, upper, <, 1.0, &&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log]
[&&, upper, <, 1.0, &&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log]
[., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =, Math]
[&&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /]
[<, 1.0, &&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper]
[&&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /]
[&&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =]
[>, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;]
[&&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =]
[), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (]
[>, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, .]
[), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (]
[;, expVal, =, Math, ., ceil, (, -, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow, (, 10]
[/, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (, -, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow]
[., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (, -, expVal, +, 0.001, ), ;]
[), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (, -, expVal, +, 0.001, ), ;, expVal, =, Math, .]
[;, expVal, =, Math, ., ceil, (, -, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow, (, 10]
[=, Math, ., ceil, (, -, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow, (, 10, ,, expVal]
[;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >, 0.0, ), ?]
[., ceil, (, -, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;]
[), ;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >, 0.0, )]
[+, 0.001, ), ;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >]
[+, 0.001, ), ;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >]
[), ;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >, 0.0, )]
[=, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >, 0.0, ), ?, Math, .]
[;, upper, =, (, expVal, >, 0.0, ), ?, Math, ., ceil, (, upper, *, expVal, ), /, expVal, :]
[., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >, 0.0, ), ?, Math, ., ceil, (]
[,, expVal, ), ;, upper, =, (, expVal, >, 0.0, ), ?, Math, ., ceil, (, upper, *, expVal, )]
[), ;, upper, =, (, expVal, >, 0.0, ), ?, Math, ., ceil, (, upper, *, expVal, ), /, expVal]
[=, (, expVal, >, 0.0, ), ?, Math, ., ceil, (, upper, *, expVal, ), /, expVal, :, Math, .]
[;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag, ), ?, computeLogCeil, (, upper, ), :, Math, ., ceil]
[?, Math, ., ceil, (, upper, *, expVal, ), /, expVal, :, Math, ., ceil, (, upper, ), ;, }]
[), ?, Math, ., ceil, (, upper, *, expVal, ), /, expVal, :, Math, ., ceil, (, upper, ), ;]
[>, 0.0, ), ?, Math, ., ceil, (, upper, *, expVal, ), /, expVal, :, Math, ., ceil, (, upper]
[), ?, Math, ., ceil, (, upper, *, expVal, ), /, expVal, :, Math, ., ceil, (, upper, ), ;]
[:, Math, ., ceil, (, upper, ), ;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag, ), ?, computeLogCeil]
[/, expVal, :, Math, ., ceil, (, upper, ), ;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag, )]
[., ceil, (, upper, *, expVal, ), /, expVal, :, Math, ., ceil, (, upper, ), ;, }, else, {]
[), /, expVal, :, Math, ., ceil, (, upper, ), ;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag]
[*, expVal, ), /, expVal, :, Math, ., ceil, (, upper, ), ;, }, else, {, upper, =, (, this]
[), /, expVal, :, Math, ., ceil, (, upper, ), ;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag]
[:, Math, ., ceil, (, upper, ), ;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag, ), ?, computeLogCeil]
[;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag, ), ?, computeLogCeil, (, upper, ), :, Math, ., ceil]
[., ceil, (, upper, ), ;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag, ), ?, computeLogCeil, (, upper]
[), ;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag, ), ?, computeLogCeil, (, upper, ), :, Math, .]
[=, (, this, ., autoRangeNextLogFlag, ), ?, computeLogCeil, (, upper, ), :, Math, ., ceil, (, upper, ), ;, }]
[;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <, minRange, ), {, upper, =]
[?, computeLogCeil, (, upper, ), :, Math, ., ceil, (, upper, ), ;, }, double, minRange, =, getAutoRangeMinimumSize, (, )]
[), ?, computeLogCeil, (, upper, ), :, Math, ., ceil, (, upper, ), ;, }, double, minRange, =, getAutoRangeMinimumSize, (]
[., autoRangeNextLogFlag, ), ?, computeLogCeil, (, upper, ), :, Math, ., ceil, (, upper, ), ;, }, double, minRange, =]
[:, Math, ., ceil, (, upper, ), ;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -]
[), :, Math, ., ceil, (, upper, ), ;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper]
[;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <, minRange, ), {, upper, =]
[., ceil, (, upper, ), ;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <]
[), ;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <, minRange, ), {, upper]
[;, if, (, upper, -, lower, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /]
[), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower]
[<, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper]
[-, lower, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =]
[<, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper]
[), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower]
[=, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, )]
[;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (, upper, -, lower, <, minRange]
[/, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (, upper, -, lower]
[), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (, upper, -]
[+, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (]
[+, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;]
[+, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (]
[), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (, upper, -]
[;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (, upper, -, lower, <, minRange]
[=, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (, upper, -, lower, <, minRange, ), {]
[;, if, (, upper, -, lower, <, minRange, ), {, double, absUpper, =, Math, ., abs, (, upper, ), ;]
[/, 2, ;, if, (, upper, -, lower, <, minRange, ), {, double, absUpper, =, Math, ., abs, (, upper]
[), /, 2, ;, if, (, upper, -, lower, <, minRange, ), {, double, absUpper, =, Math, ., abs, (]
[-, minRange, ), /, 2, ;, if, (, upper, -, lower, <, minRange, ), {, double, absUpper, =, Math, .]
[+, lower, -, minRange, ), /, 2, ;, if, (, upper, -, lower, <, minRange, ), {, double, absUpper, =]
[-, minRange, ), /, 2, ;, if, (, upper, -, lower, <, minRange, ), {, double, absUpper, =, Math, .]
[), /, 2, ;, if, (, upper, -, lower, <, minRange, ), {, double, absUpper, =, Math, ., abs, (]
[;, if, (, upper, -, lower, <, minRange, ), {, double, absUpper, =, Math, ., abs, (, upper, ), ;]
[), {, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, )]
[<, minRange, ), {, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =, (, absUpper, >]
[-, lower, <, minRange, ), {, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =, (]
[<, minRange, ), {, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =, (, absUpper, >]
[), {, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, )]
[;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (, upper]
[., abs, (, upper, ), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01]
[), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (]
[;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (, upper, +, lower, -]
[?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower]
[), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;]
[>, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /]
[), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;]
[:, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (, upper, +]
[/, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (]
[:, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (, upper, +]
[;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (, upper, +, lower, -]
[=, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (, upper, +, lower, -, adjVal, )]
[;, lower, =, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }, setRange, (, new, Range, (]
[/, 2, ;, lower, =, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }, setRange, (, new]
[), /, 2, ;, lower, =, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }, setRange, (]
[+, adjVal, ), /, 2, ;, lower, =, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }]
[+, lower, +, adjVal, ), /, 2, ;, lower, =, (, upper, +, lower, -, adjVal, ), /, 2, ;]
[+, adjVal, ), /, 2, ;, lower, =, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }]
[), /, 2, ;, lower, =, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }, setRange, (]
[;, lower, =, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }, setRange, (, new, Range, (]
[=, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }, setRange, (, new, Range, (, lower, ,]
[;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, ), ;, setupSmallLogFlag, (]
[/, 2, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, ), ;]
[), /, 2, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, )]
[-, adjVal, ), /, 2, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,]
[+, lower, -, adjVal, ), /, 2, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,]
[-, adjVal, ), /, 2, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,]
[), /, 2, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, )]
[;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, ), ;, setupSmallLogFlag, (]
[;, setupSmallLogFlag, (, ), ;, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, )]
[,, false, ,, false, ), ;, setupSmallLogFlag, (, ), ;, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D]
[,, upper, ), ,, false, ,, false, ), ;, setupSmallLogFlag, (, ), ;, }, }, public, double, valueToJava2D, (, double]
[), ,, false, ,, false, ), ;, setupSmallLogFlag, (, ), ;, }, }, public, double, valueToJava2D, (, double, value, ,]
[,, false, ), ;, setupSmallLogFlag, (, ), ;, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, plotArea, ,]
[), ;, setupSmallLogFlag, (, ), ;, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge]
[;, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range, =]
[;, double, axisMin, =, switchedLog10, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, switchedLog10, (, range, .]
[;, double, axisMax, =, switchedLog10, (, range, ., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double, max]
[), ;, double, axisMax, =, switchedLog10, (, range, ., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double]
[., getLowerBound, (, ), ), ;, double, axisMax, =, switchedLog10, (, range, ., getUpperBound, (, ), ), ;, double, min]
[;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), )]
[), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, )]
[., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, .]
[;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, plotArea, .]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, plotArea, ., getMinX, (, ), ;, max]
[), {, min, =, plotArea, ., getMinX, (, ), ;, max, =, plotArea, ., getMaxX, (, ), ;, }, else]
[., isTopOrBottom, (, edge, ), ), {, min, =, plotArea, ., getMinX, (, ), ;, max, =, plotArea, ., getMaxX]
[), ), {, min, =, plotArea, ., getMinX, (, ), ;, max, =, plotArea, ., getMaxX, (, ), ;, }]
[=, plotArea, ., getMinX, (, ), ;, max, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge]
[;, max, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), )]
[., getMinX, (, ), ;, max, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[=, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, plotArea, ., getMaxY, (, )]
[., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, plotArea]
[), {, min, =, plotArea, ., getMaxY, (, ), ;, max, =, plotArea, ., getMinY, (, ), ;, }, value]
[., isLeftOrRight, (, edge, ), ), {, min, =, plotArea, ., getMaxY, (, ), ;, max, =, plotArea, ., getMinY]
[), ), {, min, =, plotArea, ., getMaxY, (, ), ;, max, =, plotArea, ., getMinY, (, ), ;, }]
[=, plotArea, ., getMaxY, (, ), ;, max, =, plotArea, ., getMinY, (, ), ;, }, value, =, switchedLog10, (]
[;, max, =, plotArea, ., getMinY, (, ), ;, }, value, =, switchedLog10, (, value, ), ;, if, (, isInverted]
[., getMaxY, (, ), ;, max, =, plotArea, ., getMinY, (, ), ;, }, value, =, switchedLog10, (, value, )]
[=, plotArea, ., getMinY, (, ), ;, }, value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, )]
[;, }, value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return, max, -, (]
[., getMinY, (, ), ;, }, value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {]
[=, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return, max, -, (, (, (, value]
[;, if, (, isInverted, (, ), ), {, return, max, -, (, (, (, value, -, axisMin, ), /, (]
[), ;, if, (, isInverted, (, ), ), {, return, max, -, (, (, (, value, -, axisMin, ), /]
[), {, return, max, -, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *]
[;, }, else, {, return, min, +, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, )]
[-, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min]
[;, }, else, {, return, min, +, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, )]
[), ;, }, else, {, return, min, +, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin]
[*, (, max, -, min, ), ), ;, }, else, {, return, min, +, (, (, (, value, -, axisMin]
[), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (, (, (, value, -]
[/, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return, min]
[), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return]
[-, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else]
[), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return]
[), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (, (, (, value, -]
[), ), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (, (, (, value]
[-, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (, (]
[), ), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (, (, (, value]
[), ;, }, else, {, return, min, +, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin]
[), ), ;, }, else, {, return, min, +, (, (, (, value, -, axisMin, ), /, (, axisMax, -]
[-, min, ), ), ;, }, else, {, return, min, +, (, (, (, value, -, axisMin, ), /, (]
[), ), ;, }, else, {, return, min, +, (, (, (, value, -, axisMin, ), /, (, axisMax, -]
[;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range, =]
[+, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min]
[;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range, =]
[), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range]
[*, (, max, -, min, ), ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, plotArea, ,]
[), *, (, max, -, min, ), ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, plotArea]
[/, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, }, public, double, java2DToValue]
[), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, }, public, double]
[-, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, }]
[), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, }, public, double]
[), *, (, max, -, min, ), ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, plotArea]
[), ), *, (, max, -, min, ), ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D]
[-, axisMin, ), ), *, (, max, -, min, ), ), ;, }, }, public, double, java2DToValue, (, double, java2DValue]
[), ), *, (, max, -, min, ), ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D]
[), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range]
[), ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range]
[-, min, ), ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, )]
[), ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range]
[;, double, axisMin, =, switchedLog10, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, switchedLog10, (, range, .]
[;, double, axisMax, =, switchedLog10, (, range, ., getUpperBound, (, ), ), ;, double, plotMin, =, 0.0, ;, double, plotMax]
[), ;, double, axisMax, =, switchedLog10, (, range, ., getUpperBound, (, ), ), ;, double, plotMin, =, 0.0, ;, double]
[., getLowerBound, (, ), ), ;, double, axisMax, =, switchedLog10, (, range, ., getUpperBound, (, ), ), ;, double, plotMin]
[;, double, plotMin, =, 0.0, ;, double, plotMax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), )]
[), ;, double, plotMin, =, 0.0, ;, double, plotMax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, )]
[., getUpperBound, (, ), ), ;, double, plotMin, =, 0.0, ;, double, plotMax, =, 0.0, ;, if, (, RectangleEdge, .]
[;, double, plotMax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, plotMin, =, plotArea, .]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, plotMin, =, plotArea, ., getX, (, ), ;, plotMax]
[), {, plotMin, =, plotArea, ., getX, (, ), ;, plotMax, =, plotArea, ., getMaxX, (, ), ;, }, else]
[., isTopOrBottom, (, edge, ), ), {, plotMin, =, plotArea, ., getX, (, ), ;, plotMax, =, plotArea, ., getMaxX]
[), ), {, plotMin, =, plotArea, ., getX, (, ), ;, plotMax, =, plotArea, ., getMaxX, (, ), ;, }]
[=, plotArea, ., getX, (, ), ;, plotMax, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge]
[;, plotMax, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), )]
[., getX, (, ), ;, plotMax, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[=, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, plotMin]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, plotMin, =, plotArea, ., getMaxY, (, )]
[., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, plotMin, =, plotArea]
[), {, plotMin, =, plotArea, ., getMaxY, (, ), ;, plotMax, =, plotArea, ., getMinY, (, ), ;, }, if]
[., isLeftOrRight, (, edge, ), ), {, plotMin, =, plotArea, ., getMaxY, (, ), ;, plotMax, =, plotArea, ., getMinY]
[), ), {, plotMin, =, plotArea, ., getMaxY, (, ), ;, plotMax, =, plotArea, ., getMinY, (, ), ;, }]
[=, plotArea, ., getMaxY, (, ), ;, plotMax, =, plotArea, ., getMinY, (, ), ;, }, if, (, isInverted, (]
[;, plotMax, =, plotArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (]
[., getMaxY, (, ), ;, plotMax, =, plotArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), )]
[=, plotArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -]
[;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -, (, (, java2DValue, -, plotMin, )]
[., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -, (, (]
[), {, return, switchedPow10, (, axisMax, -, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin, ), )]
[;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin]
[), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -]
[-, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, )]
[), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -]
[*, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -]
[), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue]
[/, (, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10]
[), /, (, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return]
[-, plotMin, ), /, (, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else]
[), /, (, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return]
[), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue]
[), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (]
[-, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +]
[), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (]
[), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -]
[), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (, plotMax]
[-, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /]
[), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (, plotMax]
[;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, startLog, =, switchedLog10, (, getRange]
[), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, startLog, =, switchedLog10, (]
[+, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, )]
[), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, startLog, =, switchedLog10, (]
[*, (, axisMax, -, axisMin, ), ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, )]
[), *, (, axisMax, -, axisMin, ), ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent]
[/, (, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, }, public, void, zoomRange]
[), /, (, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, }, public, void]
[-, plotMin, ), /, (, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, }]
[), /, (, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, }, public, void]
[), *, (, axisMax, -, axisMin, ), ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent]
[), ), *, (, axisMax, -, axisMin, ), ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double]
[-, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, }, public, void, zoomRange, (, double, lowerPercent]
[), ), *, (, axisMax, -, axisMin, ), ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double]
[), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, startLog, =, switchedLog10, (]
[), ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, startLog, =, switchedLog10]
[-, axisMin, ), ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, startLog]
[), ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, startLog, =, switchedLog10]
[;, double, lengthLog, =, switchedLog10, (, getRange, (, ), ., getUpperBound, (, ), ), -, startLog, ;, Range, adjusted, ;]
[), ;, double, lengthLog, =, switchedLog10, (, getRange, (, ), ., getUpperBound, (, ), ), -, startLog, ;, Range, adjusted]
[., getLowerBound, (, ), ), ;, double, lengthLog, =, switchedLog10, (, getRange, (, ), ., getUpperBound, (, ), ), -]
[;, Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +]
[-, startLog, ;, Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (]
[), -, startLog, ;, Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10]
[., getUpperBound, (, ), ), -, startLog, ;, Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =]
[;, Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +]
[), {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, upperPercent, ), )]
[=, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, upperPercent, ), ), ), ,, switchedPow10]
[;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, ), ), ,]
[,, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, lowerPercent, ), ), ), ), ;, }, else, {]
[), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, lowerPercent, ), ), ), ), ;, }, else]
[+, (, lengthLog, *, (, 1, -, upperPercent, ), ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (]
[), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, lowerPercent, ), ), ), ), ;, }, else]
[), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, lowerPercent, ), ), ), ), ;, }]
[*, (, 1, -, upperPercent, ), ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, lowerPercent]
[), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, lowerPercent, ), ), ), ), ;, }]
[), ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, lowerPercent, ), ), ), ), ;]
[-, upperPercent, ), ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, lowerPercent, ), ), )]
[), ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, lowerPercent, ), ), ), ), ;]
[), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, ), )]
[), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, )]
[+, (, lengthLog, *, (, 1, -, lowerPercent, ), ), ), ), ;, }, else, {, adjusted, =, new, Range]
[), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, )]
[), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent]
[*, (, 1, -, lowerPercent, ), ), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (]
[), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent]
[), ), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *]
[-, lowerPercent, ), ), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (]
[), ), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *]
[=, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, ), ), ,, switchedPow10, (, startLog, +, (]
[;, }, setRange, (, adjusted, ), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[,, switchedPow10, (, startLog, +, (, lengthLog, *, upperPercent, ), ), ), ;, }, setRange, (, adjusted, ), ;, }]
[), ,, switchedPow10, (, startLog, +, (, lengthLog, *, upperPercent, ), ), ), ;, }, setRange, (, adjusted, ), ;]
[+, (, lengthLog, *, lowerPercent, ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, upperPercent, ), ), ), ;]
[), ,, switchedPow10, (, startLog, +, (, lengthLog, *, upperPercent, ), ), ), ;, }, setRange, (, adjusted, ), ;]
[), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, upperPercent, ), ), ), ;, }, setRange, (, adjusted, )]
[*, lowerPercent, ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, upperPercent, ), ), ), ;, }, setRange, (]
[), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, upperPercent, ), ), ), ;, }, setRange, (, adjusted, )]
[), ;, }, setRange, (, adjusted, ), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[), ), ;, }, setRange, (, adjusted, ), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,]
[+, (, lengthLog, *, upperPercent, ), ), ), ;, }, setRange, (, adjusted, ), ;, }, protected, List, refreshTicksHorizontal, (]
[), ), ;, }, setRange, (, adjusted, ), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,]
[), ), ), ;, }, setRange, (, adjusted, ), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea]
[*, upperPercent, ), ), ), ;, }, setRange, (, adjusted, ), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,]
[), ), ), ;, }, setRange, (, adjusted, ), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea]
[;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =, new]
[), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =]
[;, Range, range, =, getRange, (, ), ;, double, lowerBoundVal, =, range, ., getLowerBound, (, ), ;, if, (, this]
[;, double, lowerBoundVal, =, range, ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, )]
[;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =]
[., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;]
[), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, range, ., getUpperBound, (, ), ;, int, iBegCount, =, (]
[&&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, range, ., getUpperBound, (, ), ;]
[., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, range, ., getUpperBound, (]
[), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, range, ., getUpperBound, (, ), ;, int, iBegCount, =, (]
[<, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, range, ., getUpperBound, (, ), ;, int, iBegCount]
[), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, range, ., getUpperBound, (, ), ;, int, iBegCount, =, (]
[=, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, range, ., getUpperBound, (, ), ;, int, iBegCount, =, (, int, ), Math]
[;, }, double, upperBoundVal, =, range, ., getUpperBound, (, ), ;, int, iBegCount, =, (, int, ), Math, ., rint]
[;, int, iBegCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =]
[., getUpperBound, (, ), ;, int, iBegCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), )]
[;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount]
[;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount]
[., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10]
[), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (]
[), ), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if]
[;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >]
[;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >]
[., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math]
[), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, )]
[), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount]
[), {, --, iBegCount, ;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int]
[&&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, currentTickValue, ;]
[&&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;]
[==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --]
[&&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;]
[&&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, currentTickValue, ;]
[>, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double]
[&&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, currentTickValue, ;]
[), {, --, iBegCount, ;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int]
[>, lowerBoundVal, ), {, --, iBegCount, ;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for]
[., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, currentTickValue, ;, String, tickLabel]
[,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =]
[), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;]
[), {, --, iBegCount, ;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int]
[;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;]
[;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;]
[;, for, (, int, i, =, iBegCount, ;, i, <=, iEndCount, ;, i, ++, ), {, for, (, int, j]
[;, i, <=, iEndCount, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, 10, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, 10, ;, ++, j, ), {]
[<=, iEndCount, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, 10, ;, ++, j]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, 10, ;, ++, j, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, 10, ;, ++, j, ), {, if, (, this]
[++, ), {, for, (, int, j, =, 0, ;, j, <, 10, ;, ++, j, ), {, if, (]
[;, j, <, 10, ;, ++, j, ), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, .]
[;, ++, j, ), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (, 10, ,]
[<, 10, ;, ++, j, ), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (]
[;, ++, j, ), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (, 10, ,]
[), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (, 10, ,, i, ), +]
[), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (, 10, ,, i, ), +]
[), {, currentTickValue, =, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,]
[., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (]
[=, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *]
[;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, )]
[+, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||]
[., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, )]
[,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, this]
[), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag]
[;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, )]
[), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0]
[*, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue]
[., pow, (, 10, ,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <]
[,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >]
[), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&]
[), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0]
[), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||, currentTickValue]
[||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==]
[., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (]
[), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||, currentTickValue]
[), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||]
[&&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j]
[&&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >]
[<, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (]
[&&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >]
[&&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j]
[>, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4]
[&&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j]
[), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||]
[<, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2]
[), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||]
[), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (, currentTickValue, ,, true, )]
[||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (]
[||, (, i, >, -, 4, &&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj]
[==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this]
[||, (, i, >, -, 4, &&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj]
[||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (]
[), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel]
[&&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, )]
[>, -, 4, &&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (]
[&&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, )]
[&&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, )]
[), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel]
[<, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel]
[), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel]
[), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (, currentTickValue, ,, true, )]
[>=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (, currentTickValue, ,]
[), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (, currentTickValue, ,, true, )]
[;, tickLabel, =, makeTickLabel, (, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else]
[., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (, currentTickValue, ,, true, ), ;, }, else, {, tickLabel]
[., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (, currentTickValue, ,, true, ), ;, }, else]
[), ;, tickLabel, =, makeTickLabel, (, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }]
[), ;, tickLabel, =, makeTickLabel, (, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }]
[=, makeTickLabel, (, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel]
[;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (, j, <, 1, ||, (]
[,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (, j, <]
[), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (, j, <, 1, ||]
[=, "", ;, }, }, else, {, tickLabel, =, (, j, <, 1, ||, (, i, <, 1, &&, j]
[;, }, }, else, {, tickLabel, =, (, j, <, 1, ||, (, i, <, 1, &&, j, <, 5]
[=, (, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4]
[;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =, (, i, >=, 0]
[?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;]
[), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j]
[||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag]
[||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, ""]
[||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue]
[<, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, )]
[||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue]
[||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, ""]
[), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :]
[&&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel]
[<, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, )]
[&&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel]
[), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :]
[<, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue]
[), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :]
[||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag]
[), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (]
[<, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }]
[), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (]
[-, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {]
[), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (]
[), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j]
[>=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {]
[), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j]
[:, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =, (, i]
[), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =, (]
[;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =, (, i, >=, 0]
[), {, --, j, ;, }, currentTickValue, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,]
[;, }, currentTickValue, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (]
[;, }, currentTickValue, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (]
[=, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow]
[;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&]
[?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *]
[), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, )]
[>=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,]
[), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, )]
[:, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,]
[+, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (]
[., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, )]
[,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math]
[), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow]
[:, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,]
[), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10]
[*, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow]
[., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -]
[,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (]
[), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, .]
[), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10]
[;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&]
[;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&]
[), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001]
[-, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (]
[., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,, -, i, -, 1]
[,, -, i, ), -, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, )]
[), -, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if]
[), -, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if]
[), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001]
[), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <]
[*, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0]
[., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (, !, zeroTickFlag, )]
[,, -, i, -, 1, ), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math]
[), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -]
[-, 1, ), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (]
[-, 1, ), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (]
[), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -]
[), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <]
[), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal]
[), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal]
[), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel]
[&&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =]
[&&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }]
[<, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;]
[., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue]
[), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true]
[-, 1.0, ), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag]
[), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true]
[&&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }]
[&&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =]
[<=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {]
[&&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =]
[), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel]
[>=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;]
[), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel]
[=, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (]
[;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (, this, .]
[=, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&]
[;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <]
[=, false, ;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1]
[;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1, ||, (]
[=, (, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1, ||, (, i, <, 1]
[;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, currentTickValue, >=, lowerBoundVal, -, SMALL_LOG_VALUE]
[?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;, }]
[), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;]
[||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, )]
[||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, ""]
[||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue]
[||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -]
[), ||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4]
[&&, j, <, 2, ), ||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||]
[., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5]
[), ||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4]
[<, 2, ), ||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j]
[), ||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4]
[||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue]
[<, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, )]
[||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue]
[||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, ""]
[), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :]
[&&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel]
[<, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, )]
[&&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel]
[), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :]
[<, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue]
[), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :]
[||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, )]
[), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal]
[<, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if]
[), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal]
[-, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue]
[), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal]
[), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;]
[>=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return]
[), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;]
[:, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, currentTickValue, >=, lowerBoundVal]
[), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, currentTickValue, >=]
[;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, currentTickValue, >=, lowerBoundVal, -, SMALL_LOG_VALUE]
[), {, return, ticks, ;, }, if, (, currentTickValue, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;]
[>, upperBoundVal, ), {, return, ticks, ;, }, if, (, currentTickValue, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =]
[), {, return, ticks, ;, }, if, (, currentTickValue, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;]
[;, }, if, (, currentTickValue, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null]
[), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels]
[>=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0]
[), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels]
[-, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if]
[), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =]
[;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor]
[;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, .]
[=, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, .]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =]
[=, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else]
[., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;]
[), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /]
[==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -]
[), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /]
[., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, .]
[=, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }]
[;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge]
[/, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if]
[., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else]
[;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge]
[=, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, )]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[/, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, .]
[/, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, .]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor]
[==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else]
[), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor]
[., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor]
[=, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;]
[;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, .]
[., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =]
[=, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;]
[;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick]
[., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }]
[=, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new]
[;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, )]
[., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (]
[=, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel]
[;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor]
[., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor]
[;, ticks, ., add, (, tick, ), ;, }, }, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D]
[,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, }]
[), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }]
[,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, }, return, ticks]
[,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, }, return, ticks, ;, }]
[,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, }, return, ticks, ;, }, protected, List]
[), ;, ticks, ., add, (, tick, ), ;, }, }, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (]
[;, }, }, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[., add, (, tick, ), ;, }, }, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,]
[), ;, }, }, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =, new]
[;, double, lowerBoundVal, =, getRange, (, ), ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <]
[;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =]
[., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;]
[), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, getRange, (, ), ., getUpperBound, (, ), ;, int, iBegCount]
[&&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, getRange, (, ), ., getUpperBound, (]
[., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, getRange, (, ), .]
[), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, getRange, (, ), ., getUpperBound, (, ), ;, int, iBegCount]
[<, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, getRange, (, ), ., getUpperBound, (, ), ;]
[), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, getRange, (, ), ., getUpperBound, (, ), ;, int, iBegCount]
[=, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, getRange, (, ), ., getUpperBound, (, ), ;, int, iBegCount, =, (, int]
[;, }, double, upperBoundVal, =, getRange, (, ), ., getUpperBound, (, ), ;, int, iBegCount, =, (, int, ), Math]
[;, int, iBegCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =]
[., getUpperBound, (, ), ;, int, iBegCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), )]
[;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount]
[;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount]
[., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10]
[), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (]
[), ), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if]
[;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >]
[;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >]
[., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math]
[), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, )]
[), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount]
[), {, --, iBegCount, ;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int]
[&&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, tickVal, ;]
[&&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;]
[==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --]
[&&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;]
[&&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, tickVal, ;]
[>, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double]
[&&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, tickVal, ;]
[), {, --, iBegCount, ;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int]
[>, lowerBoundVal, ), {, --, iBegCount, ;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for]
[., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, tickVal, ;, String, tickLabel]
[,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =]
[), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;]
[), {, --, iBegCount, ;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int]
[;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;]
[;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;]
[;, for, (, int, i, =, iBegCount, ;, i, <=, iEndCount, ;, i, ++, ), {, int, jEndCount, =, 10]
[;, i, <=, iEndCount, ;, i, ++, ), {, int, jEndCount, =, 10, ;, if, (, i, ==, iEndCount, )]
[;, i, ++, ), {, int, jEndCount, =, 10, ;, if, (, i, ==, iEndCount, ), {, jEndCount, =, 1]
[<=, iEndCount, ;, i, ++, ), {, int, jEndCount, =, 10, ;, if, (, i, ==, iEndCount, ), {, jEndCount]
[;, i, ++, ), {, int, jEndCount, =, 10, ;, if, (, i, ==, iEndCount, ), {, jEndCount, =, 1]
[), {, int, jEndCount, =, 10, ;, if, (, i, ==, iEndCount, ), {, jEndCount, =, 1, ;, }, for]
[++, ), {, int, jEndCount, =, 10, ;, if, (, i, ==, iEndCount, ), {, jEndCount, =, 1, ;, }]
[;, if, (, i, ==, iEndCount, ), {, jEndCount, =, 1, ;, }, for, (, int, j, =, 0, ;]
[), {, jEndCount, =, 1, ;, }, for, (, int, j, =, 0, ;, j, <, jEndCount, ;, j, ++]
[==, iEndCount, ), {, jEndCount, =, 1, ;, }, for, (, int, j, =, 0, ;, j, <, jEndCount, ;]
[), {, jEndCount, =, 1, ;, }, for, (, int, j, =, 0, ;, j, <, jEndCount, ;, j, ++]
[=, 1, ;, }, for, (, int, j, =, 0, ;, j, <, jEndCount, ;, j, ++, ), {, if]
[;, }, for, (, int, j, =, 0, ;, j, <, jEndCount, ;, j, ++, ), {, if, (, this]
[;, j, <, jEndCount, ;, j, ++, ), {, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, .]
[;, j, ++, ), {, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, ., pow, (, 10, ,]
[<, jEndCount, ;, j, ++, ), {, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, ., pow, (]
[;, j, ++, ), {, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, ., pow, (, 10, ,]
[), {, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, ., pow, (, 10, ,, i, ), +]
[++, ), {, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, ., pow, (, 10, ,, i, )]
[), {, tickVal, =, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,]
[., smallLogFlag, ), {, tickVal, =, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (]
[=, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *]
[;, if, (, j, ==, 0, ), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +, i]
[+, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, j, ==, 0, )]
[., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, )]
[,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, j]
[), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, j, ==, 0]
[;, if, (, j, ==, 0, ), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +, i]
[), ;, if, (, j, ==, 0, ), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +]
[*, j, ), ;, if, (, j, ==, 0, ), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =]
[., pow, (, 10, ,, i, ), *, j, ), ;, if, (, j, ==, 0, ), {, if, (]
[,, i, ), *, j, ), ;, if, (, j, ==, 0, ), {, if, (, this, ., log10TickLabelsFlag, )]
[), *, j, ), ;, if, (, j, ==, 0, ), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel]
[), ;, if, (, j, ==, 0, ), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +]
[), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +, i, ;, }, else, {, if, (]
[==, 0, ), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +, i, ;, }, else, {]
[), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +, i, ;, }, else, {, if, (]
[), {, tickLabel, =, "10^", +, i, ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =]
[., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +, i, ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {]
[=, "10^", +, i, ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, "1e", +, i]
[;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, "1e", +, i, ;, }, else, {]
[+, i, ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, "1e", +, i, ;, }]
[;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, "1e", +, i, ;, }, else, {]
[), {, tickLabel, =, "1e", +, i, ;, }, else, {, if, (, i, >=, 0, ), {, NumberFormat, format]
[., expTickLabelsFlag, ), {, tickLabel, =, "1e", +, i, ;, }, else, {, if, (, i, >=, 0, ), {]
[=, "1e", +, i, ;, }, else, {, if, (, i, >=, 0, ), {, NumberFormat, format, =, getNumberFormatOverride, (]
[;, }, else, {, if, (, i, >=, 0, ), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (]
[+, i, ;, }, else, {, if, (, i, >=, 0, ), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;]
[;, }, else, {, if, (, i, >=, 0, ), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (]
[), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel, =, format, .]
[>=, 0, ), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel, =]
[), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel, =, format, .]
[;, if, (, format, !=, null, ), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {]
[), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (]
[!=, null, ), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, .]
[), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (]
[=, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, )]
[;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, ), Math, ., rint, (, tickVal, ), )]
[., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, ), Math, .]
[), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, ), Math, ., rint, (, tickVal, )]
[=, Long, ., toString, (, (, long, ), Math, ., rint, (, tickVal, ), ), ;, }, }, else, {]
[;, }, }, else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, this, ., numberFormatterObj]
[., toString, (, (, long, ), Math, ., rint, (, tickVal, ), ), ;, }, }, else, {, this, .]
[), ;, }, }, else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, this, .]
[), ;, }, }, else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, this, .]
[., rint, (, tickVal, ), ), ;, }, }, else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, )]
[), ), ;, }, }, else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, this]
[;, tickLabel, =, this, ., numberFormatterObj, ., format, (, tickVal, ), ;, }, }, }, }, else, {, tickLabel, =]
[., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, this, ., numberFormatterObj, ., format, (, tickVal, ), ;, }, }]
[., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, this, ., numberFormatterObj, ., format, (, tickVal, ), ;]
[), ;, tickLabel, =, this, ., numberFormatterObj, ., format, (, tickVal, ), ;, }, }, }, }, else, {, tickLabel]
[), ;, tickLabel, =, this, ., numberFormatterObj, ., format, (, tickVal, ), ;, }, }, }, }, else, {, tickLabel]
[=, this, ., numberFormatterObj, ., format, (, tickVal, ), ;, }, }, }, }, else, {, tickLabel, =, "", ;]
[;, }, }, }, }, else, {, tickLabel, =, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {]
[., format, (, tickVal, ), ;, }, }, }, }, else, {, tickLabel, =, "", ;, }, }, else, {]
[., numberFormatterObj, ., format, (, tickVal, ), ;, }, }, }, }, else, {, tickLabel, =, "", ;, }, }]
[), ;, }, }, }, }, else, {, tickLabel, =, "", ;, }, }, else, {, if, (, zeroTickFlag, )]
[=, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, tickVal, =, (, i]
[;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, tickVal, =, (, i, >=, 0]
[), {, --, j, ;, }, tickVal, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,]
[;, }, tickVal, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (]
[;, }, tickVal, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (]
[=, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow]
[;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&]
[?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *]
[), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, )]
[>=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,]
[), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, )]
[:, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,]
[+, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (]
[., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, )]
[,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math]
[), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow]
[:, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,]
[), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10]
[*, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow]
[., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -]
[,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (]
[), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, .]
[), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10]
[;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&]
[;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&]
[), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount]
[-, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (]
[., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,, -, i, -, 1]
[,, -, i, ), -, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, )]
[), -, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if]
[), -, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if]
[), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount]
[), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >]
[*, j, ), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (]
[., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (, j, ==, 0]
[,, -, i, -, 1, ), *, j, ), ), ;, if, (, j, ==, 0, ), {, if, (]
[), *, j, ), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if]
[-, 1, ), *, j, ), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, )]
[-, 1, ), *, j, ), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, )]
[), *, j, ), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if]
[), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >]
[), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&, Math, .]
[==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&]
[), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&, Math, .]
[), {, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&, Math, ., abs, (, tickVal, -, 1.0, )]
[), {, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&, Math, ., abs, (, tickVal, -, 1.0, )]
[), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this]
[&&, Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true]
[&&, i, <, iEndCount, &&, Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0]
[>, iBegCount, &&, i, <, iEndCount, &&, Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal]
[&&, i, <, iEndCount, &&, Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0]
[&&, Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true]
[<, iEndCount, &&, Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag]
[&&, Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true]
[), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this]
[<, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {, if]
[., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel]
[), <, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {]
[-, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }]
[), <, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {]
[), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this]
[=, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, )]
[;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel]
[=, true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (]
[;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (, (, (]
[=, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <]
[;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, )]
[), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "10^", +, Math]
[., log10TickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "10^"]
[=, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "10^", +, Math, ., abs, (]
[;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, )]
[), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0]
[+, Math, ., abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel]
[+, "10^", +, Math, ., abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, )]
[), +, "10^", +, Math, ., abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag]
[?, "-", :, "", ), +, "10^", +, Math, ., abs, (, i, ), ), ;, }, else, {, if]
[), ?, "-", :, "", ), +, "10^", +, Math, ., abs, (, i, ), ), ;, }, else, {]
[<, 0, ), ?, "-", :, "", ), +, "10^", +, Math, ., abs, (, i, ), ), ;, }]
[), ?, "-", :, "", ), +, "10^", +, Math, ., abs, (, i, ), ), ;, }, else, {]
[:, "", ), +, "10^", +, Math, ., abs, (, i, ), ), ;, }, else, {, if, (, this]
[), +, "10^", +, Math, ., abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag]
[+, Math, ., abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel]
[), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0]
[., abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (]
[), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <]
[), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "1e", +, Math]
[., expTickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "1e"]
[=, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "1e", +, Math, ., abs, (]
[;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel, =]
[), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel]
[+, Math, ., abs, (, i, ), ), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if]
[+, "1e", +, Math, ., abs, (, i, ), ), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, )]
[), +, "1e", +, Math, ., abs, (, i, ), ), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (]
[?, "-", :, "", ), +, "1e", +, Math, ., abs, (, i, ), ), ;, }, else, {, NumberFormat]
[), ?, "-", :, "", ), +, "1e", +, Math, ., abs, (, i, ), ), ;, }, else, {]
[<, 0, ), ?, "-", :, "", ), +, "1e", +, Math, ., abs, (, i, ), ), ;, }]
[), ?, "-", :, "", ), +, "1e", +, Math, ., abs, (, i, ), ), ;, }, else, {]
[:, "", ), +, "1e", +, Math, ., abs, (, i, ), ), ;, }, else, {, NumberFormat, format, =]
[), +, "1e", +, Math, ., abs, (, i, ), ), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (]
[+, Math, ., abs, (, i, ), ), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if]
[), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel]
[., abs, (, i, ), ), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format]
[), ), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {]
[;, if, (, format, !=, null, ), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {]
[), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (]
[!=, null, ), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, .]
[), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (]
[=, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, )]
[;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, ), Math, ., rint, (, tickVal, ), )]
[., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, ), Math, .]
[), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, ), Math, ., rint, (, tickVal, )]
[=, Long, ., toString, (, (, long, ), Math, ., rint, (, tickVal, ), ), ;, }, }, }, }]
[;, }, }, }, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, else, {]
[., toString, (, (, long, ), Math, ., rint, (, tickVal, ), ), ;, }, }, }, }, }, else]
[), ;, }, }, }, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, else]
[), ;, }, }, }, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, else]
[., rint, (, tickVal, ), ), ;, }, }, }, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =]
[), ), ;, }, }, }, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }]
[=, "", ;, zeroTickFlag, =, false, ;, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }]
[;, zeroTickFlag, =, false, ;, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, if]
[=, false, ;, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, if, (, tickVal]
[;, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, if, (, tickVal, >, upperBoundVal]
[=, "", ;, zeroTickFlag, =, false, ;, }, }, if, (, tickVal, >, upperBoundVal, ), {, return, ticks, ;, }]
[;, zeroTickFlag, =, false, ;, }, }, if, (, tickVal, >, upperBoundVal, ), {, return, ticks, ;, }, if, (]
[=, false, ;, }, }, if, (, tickVal, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, tickVal, >=]
[;, }, }, if, (, tickVal, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, tickVal, >=, lowerBoundVal, -]
[), {, return, ticks, ;, }, if, (, tickVal, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;]
[>, upperBoundVal, ), {, return, ticks, ;, }, if, (, tickVal, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =]
[), {, return, ticks, ;, }, if, (, tickVal, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;]
[;, }, if, (, tickVal, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null]
[), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels]
[>=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0]
[), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels]
[-, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if]
[), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (]
[;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT]
[;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor]
[), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor]
[), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -, Math, ., PI]
[==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =]
[), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -, Math, ., PI]
[., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -, Math]
[=, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -, Math, ., PI, /, 2.0, ;]
[;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor]
[., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else]
[=, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor]
[;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor]
[., BOTTOM_CENTER, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER]
[=, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor]
[;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, Math, .]
[/, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =]
[/, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =]
[., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, Math, .]
[=, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, Math, ., PI, /, 2.0, ;, }]
[;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if]
[., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else]
[=, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge]
[;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT]
[., BOTTOM_CENTER, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge]
[=, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[/, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, .]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor]
[==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else]
[), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor]
[., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor]
[=, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;]
[;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, .]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =]
[=, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;]
[;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, ticks, .]
[., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }]
[=, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, ticks, ., add, (, new, NumberTick, (]
[;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, ticks, ., add, (, new, NumberTick, (, new, Double, (, tickVal]
[., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, ticks, ., add, (, new, NumberTick, (, new, Double]
[=, TextAnchor, ., CENTER_LEFT, ;, }, }, ticks, ., add, (, new, NumberTick, (, new, Double, (, tickVal, ), ,]
[;, }, }, ticks, ., add, (, new, NumberTick, (, new, Double, (, tickVal, ), ,, tickLabel, ,, anchor, ,]
[., CENTER_LEFT, ;, }, }, ticks, ., add, (, new, NumberTick, (, new, Double, (, tickVal, ), ,, tickLabel, ,]
[;, }, }, }, return, ticks, ;, }, protected, String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, ), {, if]
[., add, (, new, NumberTick, (, new, Double, (, tickVal, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, )]
[), ;, }, }, }, return, ticks, ;, }, protected, String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, ), {]
[,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ), ;, }, }, }, return, ticks, ;, }, protected, String]
[), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ), ;, }, }, }, return, ticks, ;, }, protected]
[,, anchor, ,, rotationAnchor, ,, angle, ), ), ;, }, }, }, return, ticks, ;, }, protected, String, makeTickLabel, (]
[,, rotationAnchor, ,, angle, ), ), ;, }, }, }, return, ticks, ;, }, protected, String, makeTickLabel, (, double, val]
[,, angle, ), ), ;, }, }, }, return, ticks, ;, }, protected, String, makeTickLabel, (, double, val, ,, boolean]
[), ), ;, }, }, }, return, ticks, ;, }, protected, String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, )]
[;, }, protected, String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, ), {, if, (, this, ., expTickLabelsFlag, ||, forceFmtFlag]
[), {, return, this, ., numberFormatterObj, ., format, (, val, ), ., toLowerCase, (, ), ;, }, return, getTickUnit, (]
[||, forceFmtFlag, ), {, return, this, ., numberFormatterObj, ., format, (, val, ), ., toLowerCase, (, ), ;, }, return]
[., expTickLabelsFlag, ||, forceFmtFlag, ), {, return, this, ., numberFormatterObj, ., format, (, val, ), ., toLowerCase, (, ), ;]
[), {, return, this, ., numberFormatterObj, ., format, (, val, ), ., toLowerCase, (, ), ;, }, return, getTickUnit, (]
[;, }, return, getTickUnit, (, ), ., valueToString, (, val, ), ;, }, protected, String, makeTickLabel, (, double, val, )]
[., toLowerCase, (, ), ;, }, return, getTickUnit, (, ), ., valueToString, (, val, ), ;, }, protected, String, makeTickLabel]
[., format, (, val, ), ., toLowerCase, (, ), ;, }, return, getTickUnit, (, ), ., valueToString, (, val, )]
[., numberFormatterObj, ., format, (, val, ), ., toLowerCase, (, ), ;, }, return, getTickUnit, (, ), ., valueToString, (]
[), ., toLowerCase, (, ), ;, }, return, getTickUnit, (, ), ., valueToString, (, val, ), ;, }, protected, String]
[;, }, protected, String, makeTickLabel, (, double, val, ), {, return, makeTickLabel, (, val, ,, false, ), ;, }, }]
[., valueToString, (, val, ), ;, }, protected, String, makeTickLabel, (, double, val, ), {, return, makeTickLabel, (, val, ,]
[), ;, }, protected, String, makeTickLabel, (, double, val, ), {, return, makeTickLabel, (, val, ,, false, ), ;, }]
[;, }, }]
[,, false, ), ;, }, }]
[), ;, }, }]
