[;, private, final, Set, <, String, >, objectPrototypeProps, =, Sets, ., newHashSet, (, ), ;, private, final, Set, <, String]
[;, private, final, Set, <, String, >, functionPrototypeProps, =, Sets, ., newHashSet, (, ), ;, static, final, DiagnosticType, UNDEFINED_NAME_WARNING, =]
[., newHashSet, (, ), ;, private, final, Set, <, String, >, functionPrototypeProps, =, Sets, ., newHashSet, (, ), ;, static]
[;, static, final, DiagnosticType, UNDEFINED_NAME_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_NAME", ,, "{0} is never defined", ), ;, static, final, DiagnosticType, NAME_DEFINED_LATE_WARNING, =]
[., newHashSet, (, ), ;, static, final, DiagnosticType, UNDEFINED_NAME_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_NAME", ,, "{0} is never defined", ), ;, static]
[;, static, final, DiagnosticType, NAME_DEFINED_LATE_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAME_DEFINED_LATE", ,, "{0} defined before its owner. {1} is defined at {2}:{3}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME, =]
[., warning, (, "JSC_UNDEFINED_NAME", ,, "{0} is never defined", ), ;, static, final, DiagnosticType, NAME_DEFINED_LATE_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAME_DEFINED_LATE", ,, "{0} defined before its owner. {1} is defined at {2}:{3}"]
[,, "{0} is never defined", ), ;, static, final, DiagnosticType, NAME_DEFINED_LATE_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAME_DEFINED_LATE", ,, "{0} defined before its owner. {1} is defined at {2}:{3}", ), ;, static, final]
[), ;, static, final, DiagnosticType, NAME_DEFINED_LATE_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAME_DEFINED_LATE", ,, "{0} defined before its owner. {1} is defined at {2}:{3}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME]
[;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEP_QNAME", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, CheckGlobalNames, (, AbstractCompiler]
[., warning, (, "JSC_NAME_DEFINED_LATE", ,, "{0} defined before its owner. {1} is defined at {2}:{3}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEP_QNAME", ,, "module {0} cannot reference {2}, defined in "]
[,, "{0} defined before its owner. {1} is defined at {2}:{3}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEP_QNAME", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;]
[), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEP_QNAME", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, CheckGlobalNames, (]
[;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., convention, =]
[., disabled, (, "JSC_STRICT_MODULE_DEP_QNAME", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this]
[,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler]
[), ;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., convention]
[+, "module {1}", ), ;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this]
[), ;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., convention]
[=, compiler, ;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;, this, ., level, =, level, ;, }]
[., compiler, =, compiler, ;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;, this, ., level, =, level]
[;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;, this, ., level, =, level, ;, }, CheckGlobalNames, injectNamespace]
[=, compiler, ., getCodingConvention, (, ), ;, this, ., level, =, level, ;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, )]
[., convention, =, compiler, ., getCodingConvention, (, ), ;, this, ., level, =, level, ;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace]
[;, this, ., level, =, level, ;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, ), {, Preconditions, ., checkArgument, (, namespace]
[., getCodingConvention, (, ), ;, this, ., level, =, level, ;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, ), {, Preconditions]
[=, level, ;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, ), {, Preconditions, ., checkArgument, (, namespace, ., hasExternsRoot, (, )]
[., level, =, level, ;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, ), {, Preconditions, ., checkArgument, (, namespace, ., hasExternsRoot]
[;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, ), {, Preconditions, ., checkArgument, (, namespace, ., hasExternsRoot, (, ), ), ;]
[;, this, ., namespace, =, namespace, ;, return, this, ;, }, @, Override, public, void, process, (, Node, externs, ,]
[., checkArgument, (, namespace, ., hasExternsRoot, (, ), ), ;, this, ., namespace, =, namespace, ;, return, this, ;, }]
[), ;, this, ., namespace, =, namespace, ;, return, this, ;, }, @, Override, public, void, process, (, Node, externs]
[., hasExternsRoot, (, ), ), ;, this, ., namespace, =, namespace, ;, return, this, ;, }, @, Override, public, void]
[=, namespace, ;, return, this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., namespace, =, namespace, ;, return, this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[;, return, this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, namespace, ==, null]
[), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, Preconditions, ., checkState, (, namespace]
[==, null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, Preconditions, ., checkState]
[), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, Preconditions, ., checkState, (, namespace]
[=, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, Preconditions, ., checkState, (, namespace, ., hasExternsRoot, (]
[;, }, Preconditions, ., checkState, (, namespace, ., hasExternsRoot, (, ), ), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;]
[,, externs, ,, root, ), ;, }, Preconditions, ., checkState, (, namespace, ., hasExternsRoot, (, ), ), ;, findPrototypeProps, (]
[,, root, ), ;, }, Preconditions, ., checkState, (, namespace, ., hasExternsRoot, (, ), ), ;, findPrototypeProps, (, "Object", ,]
[), ;, }, Preconditions, ., checkState, (, namespace, ., hasExternsRoot, (, ), ), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, )]
[;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;, findPrototypeProps, (, "Function", ,, functionPrototypeProps, ), ;, objectPrototypeProps, ., addAll, (, convention]
[., checkState, (, namespace, ., hasExternsRoot, (, ), ), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;, findPrototypeProps, (, "Function"]
[), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;, findPrototypeProps, (, "Function", ,, functionPrototypeProps, ), ;, objectPrototypeProps, ., addAll, (]
[., hasExternsRoot, (, ), ), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;, findPrototypeProps, (, "Function", ,, functionPrototypeProps, ), ;]
[;, findPrototypeProps, (, "Function", ,, functionPrototypeProps, ), ;, objectPrototypeProps, ., addAll, (, convention, ., getIndirectlyDeclaredProperties, (, ), ), ;, for]
[,, objectPrototypeProps, ), ;, findPrototypeProps, (, "Function", ,, functionPrototypeProps, ), ;, objectPrototypeProps, ., addAll, (, convention, ., getIndirectlyDeclaredProperties, (, )]
[), ;, findPrototypeProps, (, "Function", ,, functionPrototypeProps, ), ;, objectPrototypeProps, ., addAll, (, convention, ., getIndirectlyDeclaredProperties, (, ), ), ;]
[;, objectPrototypeProps, ., addAll, (, convention, ., getIndirectlyDeclaredProperties, (, ), ), ;, for, (, Name, name, :, namespace, ., getNameForest]
[,, functionPrototypeProps, ), ;, objectPrototypeProps, ., addAll, (, convention, ., getIndirectlyDeclaredProperties, (, ), ), ;, for, (, Name, name, :]
[), ;, objectPrototypeProps, ., addAll, (, convention, ., getIndirectlyDeclaredProperties, (, ), ), ;, for, (, Name, name, :, namespace, .]
[;, for, (, Name, name, :, namespace, ., getNameForest, (, ), ), {, if, (, name, ., inExterns, ), {]
[., addAll, (, convention, ., getIndirectlyDeclaredProperties, (, ), ), ;, for, (, Name, name, :, namespace, ., getNameForest, (, )]
[), ;, for, (, Name, name, :, namespace, ., getNameForest, (, ), ), {, if, (, name, ., inExterns, )]
[., getIndirectlyDeclaredProperties, (, ), ), ;, for, (, Name, name, :, namespace, ., getNameForest, (, ), ), {, if, (]
[), {, if, (, name, ., inExterns, ), {, continue, ;, }, checkDescendantNames, (, name, ,, name, ., globalSets, +]
[., getNameForest, (, ), ), {, if, (, name, ., inExterns, ), {, continue, ;, }, checkDescendantNames, (, name, ,]
[), {, continue, ;, }, checkDescendantNames, (, name, ,, name, ., globalSets, +, name, ., localSets, >, 0, ), ;]
[., inExterns, ), {, continue, ;, }, checkDescendantNames, (, name, ,, name, ., globalSets, +, name, ., localSets, >, 0]
[;, }, }, private, void, findPrototypeProps, (, String, type, ,, Set, <, String, >, props, ), {, Name, slot, =]
[,, name, ., globalSets, +, name, ., localSets, >, 0, ), ;, }, }, private, void, findPrototypeProps, (, String, type]
[), ;, }, }, private, void, findPrototypeProps, (, String, type, ,, Set, <, String, >, props, ), {, Name, slot]
[>, 0, ), ;, }, }, private, void, findPrototypeProps, (, String, type, ,, Set, <, String, >, props, ), {]
[+, name, ., localSets, >, 0, ), ;, }, }, private, void, findPrototypeProps, (, String, type, ,, Set, <, String]
[., globalSets, +, name, ., localSets, >, 0, ), ;, }, }, private, void, findPrototypeProps, (, String, type, ,, Set]
[>, 0, ), ;, }, }, private, void, findPrototypeProps, (, String, type, ,, Set, <, String, >, props, ), {]
[., localSets, >, 0, ), ;, }, }, private, void, findPrototypeProps, (, String, type, ,, Set, <, String, >, props]
[), ;, }, }, private, void, findPrototypeProps, (, String, type, ,, Set, <, String, >, props, ), {, Name, slot]
[;, if, (, slot, !=, null, ), {, for, (, Ref, ref, :, slot, ., getRefs, (, ), ), {]
[., getSlot, (, type, ), ;, if, (, slot, !=, null, ), {, for, (, Ref, ref, :, slot, .]
[), ;, if, (, slot, !=, null, ), {, for, (, Ref, ref, :, slot, ., getRefs, (, ), )]
[), {, for, (, Ref, ref, :, slot, ., getRefs, (, ), ), {, if, (, ref, ., type, ==]
[!=, null, ), {, for, (, Ref, ref, :, slot, ., getRefs, (, ), ), {, if, (, ref, .]
[), {, for, (, Ref, ref, :, slot, ., getRefs, (, ), ), {, if, (, ref, ., type, ==]
[), {, if, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), {, Node, fullName, =, ref, .]
[., getRefs, (, ), ), {, if, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), {, Node]
[), {, Node, fullName, =, ref, ., getNode, (, ), ., getParent, (, ), ., getParent, (, ), ;, if]
[==, Ref, ., Type, ., PROTOTYPE_GET, ), {, Node, fullName, =, ref, ., getNode, (, ), ., getParent, (, )]
[., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), {, Node, fullName, =, ref, ., getNode, (, ), ., getParent]
[), {, Node, fullName, =, ref, ., getNode, (, ), ., getParent, (, ), ., getParent, (, ), ;, if]
[., PROTOTYPE_GET, ), {, Node, fullName, =, ref, ., getNode, (, ), ., getParent, (, ), ., getParent, (, )]
[., Type, ., PROTOTYPE_GET, ), {, Node, fullName, =, ref, ., getNode, (, ), ., getParent, (, ), ., getParent]
[;, if, (, fullName, ., isGetProp, (, ), ), {, props, ., add, (, fullName, ., getLastChild, (, ), .]
[., getParent, (, ), ;, if, (, fullName, ., isGetProp, (, ), ), {, props, ., add, (, fullName, .]
[., getParent, (, ), ., getParent, (, ), ;, if, (, fullName, ., isGetProp, (, ), ), {, props, .]
[., getNode, (, ), ., getParent, (, ), ., getParent, (, ), ;, if, (, fullName, ., isGetProp, (, )]
[), {, props, ., add, (, fullName, ., getLastChild, (, ), ., getString, (, ), ), ;, }, }, }]
[., isGetProp, (, ), ), {, props, ., add, (, fullName, ., getLastChild, (, ), ., getString, (, ), )]
[;, }, }, }, }, }, private, void, checkDescendantNames, (, Name, name, ,, boolean, nameIsDefined, ), {, if, (, name]
[., add, (, fullName, ., getLastChild, (, ), ., getString, (, ), ), ;, }, }, }, }, }, private]
[), ;, }, }, }, }, }, private, void, checkDescendantNames, (, Name, name, ,, boolean, nameIsDefined, ), {, if, (]
[., getString, (, ), ), ;, }, }, }, }, }, private, void, checkDescendantNames, (, Name, name, ,, boolean, nameIsDefined]
[., getLastChild, (, ), ., getString, (, ), ), ;, }, }, }, }, }, private, void, checkDescendantNames, (, Name]
[), {, for, (, Name, prop, :, name, ., props, ), {, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined]
[!=, null, ), {, for, (, Name, prop, :, name, ., props, ), {, boolean, propIsDefined, =, false, ;, if]
[., props, !=, null, ), {, for, (, Name, prop, :, name, ., props, ), {, boolean, propIsDefined, =, false]
[), {, for, (, Name, prop, :, name, ., props, ), {, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined]
[), {, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (, prop, )]
[., props, ), {, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (]
[;, if, (, nameIsDefined, ), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (, prop, ), ||, prop, ., globalSets, +, prop]
[), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (, prop, ), ||, prop, ., globalSets, +, prop, ., localSets, >, 0]
[=, (, !, propertyMustBeInitializedByFullName, (, prop, ), ||, prop, ., globalSets, +, prop, ., localSets, >, 0, ), ;, }]
[;, }, validateName, (, prop, ,, propIsDefined, ), ;, checkDescendantNames, (, prop, ,, propIsDefined, ), ;, }, }, }, private]
[), ;, }, validateName, (, prop, ,, propIsDefined, ), ;, checkDescendantNames, (, prop, ,, propIsDefined, ), ;, }, }, }]
[||, prop, ., globalSets, +, prop, ., localSets, >, 0, ), ;, }, validateName, (, prop, ,, propIsDefined, ), ;]
[||, prop, ., globalSets, +, prop, ., localSets, >, 0, ), ;, }, validateName, (, prop, ,, propIsDefined, ), ;]
[), ||, prop, ., globalSets, +, prop, ., localSets, >, 0, ), ;, }, validateName, (, prop, ,, propIsDefined, )]
[), ;, }, validateName, (, prop, ,, propIsDefined, ), ;, checkDescendantNames, (, prop, ,, propIsDefined, ), ;, }, }, }]
[>, 0, ), ;, }, validateName, (, prop, ,, propIsDefined, ), ;, checkDescendantNames, (, prop, ,, propIsDefined, ), ;, }]
[+, prop, ., localSets, >, 0, ), ;, }, validateName, (, prop, ,, propIsDefined, ), ;, checkDescendantNames, (, prop, ,]
[., globalSets, +, prop, ., localSets, >, 0, ), ;, }, validateName, (, prop, ,, propIsDefined, ), ;, checkDescendantNames, (]
[>, 0, ), ;, }, validateName, (, prop, ,, propIsDefined, ), ;, checkDescendantNames, (, prop, ,, propIsDefined, ), ;, }]
[., localSets, >, 0, ), ;, }, validateName, (, prop, ,, propIsDefined, ), ;, checkDescendantNames, (, prop, ,, propIsDefined, )]
[), ;, }, validateName, (, prop, ,, propIsDefined, ), ;, checkDescendantNames, (, prop, ,, propIsDefined, ), ;, }, }, }]
[;, checkDescendantNames, (, prop, ,, propIsDefined, ), ;, }, }, }, private, void, validateName, (, Name, name, ,, boolean, isDefined]
[,, propIsDefined, ), ;, checkDescendantNames, (, prop, ,, propIsDefined, ), ;, }, }, }, private, void, validateName, (, Name, name]
[), ;, checkDescendantNames, (, prop, ,, propIsDefined, ), ;, }, }, }, private, void, validateName, (, Name, name, ,, boolean]
[;, }, }, }, private, void, validateName, (, Name, name, ,, boolean, isDefined, ), {, Ref, declaration, =, name, .]
[,, propIsDefined, ), ;, }, }, }, private, void, validateName, (, Name, name, ,, boolean, isDefined, ), {, Ref, declaration]
[), ;, }, }, }, private, void, validateName, (, Name, name, ,, boolean, isDefined, ), {, Ref, declaration, =, name]
[;, Name, parent, =, name, ., parent, ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Ref]
[., getDeclaration, (, ), ;, Name, parent, =, name, ., parent, ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, )]
[;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Ref, ref, :, name, ., getRefs, (, )]
[., parent, ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Ref, ref, :, name, ., getRefs]
[;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, boolean, isGlobalExpr, =, ref, ., getNode, (]
[., getModuleGraph, (, ), ;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, boolean, isGlobalExpr, =]
[), {, boolean, isGlobalExpr, =, ref, ., getNode, (, ), ., getParent, (, ), ., isExprResult, (, ), ;, if]
[., getRefs, (, ), ), {, boolean, isGlobalExpr, =, ref, ., getNode, (, ), ., getParent, (, ), ., isExprResult]
[;, if, (, !, isDefined, &&, !, isTypedef, (, ref, ), ), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName]
[., isExprResult, (, ), ;, if, (, !, isDefined, &&, !, isTypedef, (, ref, ), ), {, if, (, !]
[., getParent, (, ), ., isExprResult, (, ), ;, if, (, !, isDefined, &&, !, isTypedef, (, ref, ), )]
[., getNode, (, ), ., getParent, (, ), ., isExprResult, (, ), ;, if, (, !, isDefined, &&, !, isTypedef]
[), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (]
[&&, !, isTypedef, (, ref, ), ), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, )]
[&&, !, isTypedef, (, ref, ), ), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, )]
[), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (]
[), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (]
[), ), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if]
[), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (, declaration, !=, null, &&, ref, .]
[), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (, declaration, !=, null, &&, ref, .]
[;, }, }, else, if, (, declaration, !=, null, &&, ref, ., getModule, (, ), !=, declaration, ., getModule, (]
[,, ref, ), ;, }, }, else, if, (, declaration, !=, null, &&, ref, ., getModule, (, ), !=, declaration]
[), ;, }, }, else, if, (, declaration, !=, null, &&, ref, ., getModule, (, ), !=, declaration, ., getModule]
[), {, reportBadModuleReference, (, name, ,, ref, ), ;, }, else, {, if, (, ref, ., scope, ., isGlobal, (]
[&&, !, moduleGraph, ., dependsOn, (, ref, ., getModule, (, ), ,, declaration, ., getModule, (, ), ), ), {]
[&&, ref, ., getModule, (, ), !=, declaration, ., getModule, (, ), &&, !, moduleGraph, ., dependsOn, (, ref, .]
[!=, null, &&, ref, ., getModule, (, ), !=, declaration, ., getModule, (, ), &&, !, moduleGraph, ., dependsOn, (]
[&&, ref, ., getModule, (, ), !=, declaration, ., getModule, (, ), &&, !, moduleGraph, ., dependsOn, (, ref, .]
[&&, !, moduleGraph, ., dependsOn, (, ref, ., getModule, (, ), ,, declaration, ., getModule, (, ), ), ), {]
[!=, declaration, ., getModule, (, ), &&, !, moduleGraph, ., dependsOn, (, ref, ., getModule, (, ), ,, declaration, .]
[., getModule, (, ), !=, declaration, ., getModule, (, ), &&, !, moduleGraph, ., dependsOn, (, ref, ., getModule, (]
[&&, !, moduleGraph, ., dependsOn, (, ref, ., getModule, (, ), ,, declaration, ., getModule, (, ), ), ), {]
[., getModule, (, ), &&, !, moduleGraph, ., dependsOn, (, ref, ., getModule, (, ), ,, declaration, ., getModule, (]
[), {, reportBadModuleReference, (, name, ,, ref, ), ;, }, else, {, if, (, ref, ., scope, ., isGlobal, (]
[), {, reportBadModuleReference, (, name, ,, ref, ), ;, }, else, {, if, (, ref, ., scope, ., isGlobal, (]
[., dependsOn, (, ref, ., getModule, (, ), ,, declaration, ., getModule, (, ), ), ), {, reportBadModuleReference, (, name]
[,, declaration, ., getModule, (, ), ), ), {, reportBadModuleReference, (, name, ,, ref, ), ;, }, else, {, if]
[., getModule, (, ), ,, declaration, ., getModule, (, ), ), ), {, reportBadModuleReference, (, name, ,, ref, ), ;]
[), ), {, reportBadModuleReference, (, name, ,, ref, ), ;, }, else, {, if, (, ref, ., scope, ., isGlobal]
[., getModule, (, ), ), ), {, reportBadModuleReference, (, name, ,, ref, ), ;, }, else, {, if, (, ref]
[;, }, else, {, if, (, ref, ., scope, ., isGlobal, (, ), ), {, boolean, isPrototypeGet, =, (, ref]
[,, ref, ), ;, }, else, {, if, (, ref, ., scope, ., isGlobal, (, ), ), {, boolean, isPrototypeGet]
[), ;, }, else, {, if, (, ref, ., scope, ., isGlobal, (, ), ), {, boolean, isPrototypeGet, =, (]
[), {, boolean, isPrototypeGet, =, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =]
[., isGlobal, (, ), ), {, boolean, isPrototypeGet, =, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, )]
[., scope, ., isGlobal, (, ), ), {, boolean, isPrototypeGet, =, (, ref, ., type, ==, Ref, ., Type, .]
[;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, ., getDeclaration]
[), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, .]
[==, Ref, ., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =]
[., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean]
[), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, .]
[., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&]
[., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=]
[;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==]
[?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, ., getDeclaration, (, ), !=, null, &&]
[:, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, ., getDeclaration, (, ), !=, null, &&, owner, .]
[;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==]
[;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName]
[&&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref]
[&&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&, owner]
[!=, null, &&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl]
[&&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&, owner]
[&&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref]
[!=, null, &&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex]
[., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration]
[&&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref]
[;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName]
[==, 0, ;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex, ), {]
[., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex]
[;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName]
[), {, String, refName, =, isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, )]
[&&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName, =, isPrototypeGet, ?, name]
[), {, String, refName, =, isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, )]
[>, ref, ., preOrderIndex, ), {, String, refName, =, isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype", :, name]
[., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName, =, isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype"]
[., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName, =, isPrototypeGet, ?, name, ., getFullName]
[), {, String, refName, =, isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, )]
[., preOrderIndex, ), {, String, refName, =, isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype", :, name, ., getFullName]
[;, compiler, ., report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node]
[?, name, ., getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, ), ;, compiler, ., report, (, JSError]
[:, name, ., getFullName, (, ), ;, compiler, ., report, (, JSError, ., make, (, ref, ., source, ., getName]
[+, ".prototype", :, name, ., getFullName, (, ), ;, compiler, ., report, (, JSError, ., make, (, ref, ., source]
[., getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, ), ;, compiler, ., report, (, JSError, ., make]
[:, name, ., getFullName, (, ), ;, compiler, ., report, (, JSError, ., make, (, ref, ., source, ., getName]
[;, compiler, ., report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node]
[., getFullName, (, ), ;, compiler, ., report, (, JSError, ., make, (, ref, ., source, ., getName, (, )]
[;, }, }, }, }, }, private, boolean, isTypedef, (, Ref, ref, ), {, Node, parent, =, ref, ., node]
[., report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING]
[), ;, }, }, }, }, }, private, boolean, isTypedef, (, Ref, ref, ), {, Node, parent, =, ref, .]
[., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING, ,, refName, ,, owner]
[,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING, ,, refName, ,, owner, ., getFullName, (, ), ,, owner, ., getDeclaration, (, )]
[., getName, (, ), ,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING, ,, refName, ,, owner, ., getFullName, (, ), ,, owner]
[., source, ., getName, (, ), ,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING, ,, refName, ,, owner, ., getFullName, (, )]
[,, NAME_DEFINED_LATE_WARNING, ,, refName, ,, owner, ., getFullName, (, ), ,, owner, ., getDeclaration, (, ), ., source, ., getName]
[., node, ,, NAME_DEFINED_LATE_WARNING, ,, refName, ,, owner, ., getFullName, (, ), ,, owner, ., getDeclaration, (, ), ., source]
[,, refName, ,, owner, ., getFullName, (, ), ,, owner, ., getDeclaration, (, ), ., source, ., getName, (, )]
[,, owner, ., getFullName, (, ), ,, owner, ., getDeclaration, (, ), ., source, ., getName, (, ), ,, String]
[,, owner, ., getDeclaration, (, ), ., source, ., getName, (, ), ,, String, ., valueOf, (, owner, ., getDeclaration]
[., getFullName, (, ), ,, owner, ., getDeclaration, (, ), ., source, ., getName, (, ), ,, String, ., valueOf]
[,, String, ., valueOf, (, owner, ., getDeclaration, (, ), ., node, ., getLineno, (, ), ), ), ), ;]
[., getName, (, ), ,, String, ., valueOf, (, owner, ., getDeclaration, (, ), ., node, ., getLineno, (, )]
[., source, ., getName, (, ), ,, String, ., valueOf, (, owner, ., getDeclaration, (, ), ., node, ., getLineno]
[., getDeclaration, (, ), ., source, ., getName, (, ), ,, String, ., valueOf, (, owner, ., getDeclaration, (, )]
[), ), ;, }, }, }, }, }, private, boolean, isTypedef, (, Ref, ref, ), {, Node, parent, =, ref]
[., valueOf, (, owner, ., getDeclaration, (, ), ., node, ., getLineno, (, ), ), ), ), ;, }, }]
[), ), ), ;, }, }, }, }, }, private, boolean, isTypedef, (, Ref, ref, ), {, Node, parent, =]
[., getLineno, (, ), ), ), ), ;, }, }, }, }, }, private, boolean, isTypedef, (, Ref, ref, )]
[., node, ., getLineno, (, ), ), ), ), ;, }, }, }, }, }, private, boolean, isTypedef, (, Ref]
[., getDeclaration, (, ), ., node, ., getLineno, (, ), ), ), ), ;, }, }, }, }, }, private]
[;, if, (, parent, ., isExprResult, (, ), ), {, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, )]
[., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {, JSDocInfo, info, =, ref, ., node]
[., node, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {, JSDocInfo, info, =, ref]
[), {, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info]
[., isExprResult, (, ), ), {, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (, info]
[;, if, (, info, !=, null, &&, info, ., hasTypedefType, (, ), ), {, return, true, ;, }, }, return]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasTypedefType, (, ), ), {, return, true]
[., node, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasTypedefType, (, ), ), {]
[), {, return, true, ;, }, }, return, false, ;, }, private, void, reportBadModuleReference, (, Name, name, ,, Ref, ref]
[&&, info, ., hasTypedefType, (, ), ), {, return, true, ;, }, }, return, false, ;, }, private, void, reportBadModuleReference]
[!=, null, &&, info, ., hasTypedefType, (, ), ), {, return, true, ;, }, }, return, false, ;, }, private]
[&&, info, ., hasTypedefType, (, ), ), {, return, true, ;, }, }, return, false, ;, }, private, void, reportBadModuleReference]
[), {, return, true, ;, }, }, return, false, ;, }, private, void, reportBadModuleReference, (, Name, name, ,, Ref, ref]
[., hasTypedefType, (, ), ), {, return, true, ;, }, }, return, false, ;, }, private, void, reportBadModuleReference, (, Name]
[;, }, }, return, false, ;, }, private, void, reportBadModuleReference, (, Name, name, ,, Ref, ref, ), {, compiler, .]
[;, }, private, void, reportBadModuleReference, (, Name, name, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make]
[;, }, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (, name, ., parent, !=, null]
[., report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME]
[), ;, }, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (, name, ., parent, !=]
[., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME, ,, ref, ., getModule]
[,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME, ,, ref, ., getModule, (, ), ., getName, (, ), ,, name, ., getDeclaration]
[., getName, (, ), ,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME, ,, ref, ., getModule, (, ), ., getName, (, )]
[., source, ., getName, (, ), ,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME, ,, ref, ., getModule, (, ), ., getName]
[,, STRICT_MODULE_DEP_QNAME, ,, ref, ., getModule, (, ), ., getName, (, ), ,, name, ., getDeclaration, (, ), ., getModule]
[., node, ,, STRICT_MODULE_DEP_QNAME, ,, ref, ., getModule, (, ), ., getName, (, ), ,, name, ., getDeclaration, (, )]
[,, ref, ., getModule, (, ), ., getName, (, ), ,, name, ., getDeclaration, (, ), ., getModule, (, )]
[,, name, ., getDeclaration, (, ), ., getModule, (, ), ., getName, (, ), ,, name, ., getFullName, (, )]
[., getName, (, ), ,, name, ., getDeclaration, (, ), ., getModule, (, ), ., getName, (, ), ,, name]
[., getModule, (, ), ., getName, (, ), ,, name, ., getDeclaration, (, ), ., getModule, (, ), ., getName]
[,, name, ., getFullName, (, ), ), ), ;, }, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, )]
[., getName, (, ), ,, name, ., getFullName, (, ), ), ), ;, }, private, void, reportRefToUndefinedName, (, Name, name]
[., getModule, (, ), ., getName, (, ), ,, name, ., getFullName, (, ), ), ), ;, }, private, void]
[., getDeclaration, (, ), ., getModule, (, ), ., getName, (, ), ,, name, ., getFullName, (, ), ), )]
[), ), ;, }, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (, name, ., parent]
[., getFullName, (, ), ), ), ;, }, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while]
[), {, name, =, name, ., parent, ;, }, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName]
[&&, name, ., parent, ., globalSets, +, name, ., parent, ., localSets, ==, 0, ), {, name, =, name, .]
[!=, null, &&, name, ., parent, ., globalSets, +, name, ., parent, ., localSets, ==, 0, ), {, name, =]
[., parent, !=, null, &&, name, ., parent, ., globalSets, +, name, ., parent, ., localSets, ==, 0, ), {]
[&&, name, ., parent, ., globalSets, +, name, ., parent, ., localSets, ==, 0, ), {, name, =, name, .]
[), {, name, =, name, ., parent, ;, }, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName]
[==, 0, ), {, name, =, name, ., parent, ;, }, compiler, ., report, (, JSError, ., make, (, ref]
[+, name, ., parent, ., localSets, ==, 0, ), {, name, =, name, ., parent, ;, }, compiler, ., report]
[., globalSets, +, name, ., parent, ., localSets, ==, 0, ), {, name, =, name, ., parent, ;, }, compiler]
[., parent, ., globalSets, +, name, ., parent, ., localSets, ==, 0, ), {, name, =, name, ., parent, ;]
[==, 0, ), {, name, =, name, ., parent, ;, }, compiler, ., report, (, JSError, ., make, (, ref]
[., localSets, ==, 0, ), {, name, =, name, ., parent, ;, }, compiler, ., report, (, JSError, ., make]
[., parent, ., localSets, ==, 0, ), {, name, =, name, ., parent, ;, }, compiler, ., report, (, JSError]
[), {, name, =, name, ., parent, ;, }, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName]
[=, name, ., parent, ;, }, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,]
[;, }, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,]
[., parent, ;, }, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, .]
[;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name, ), {, if, (, name, ., parent, ==, null, ), {, return]
[., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, level, ,, UNDEFINED_NAME_WARNING]
[), ;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name, ), {, if, (, name, ., parent, ==, null, ), {]
[., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, level, ,, UNDEFINED_NAME_WARNING, ,, name, ., getFullName]
[,, ref, ., node, ,, level, ,, UNDEFINED_NAME_WARNING, ,, name, ., getFullName, (, ), ), ), ;, }, private, boolean]
[., getSourceName, (, ), ,, ref, ., node, ,, level, ,, UNDEFINED_NAME_WARNING, ,, name, ., getFullName, (, ), ), )]
[,, level, ,, UNDEFINED_NAME_WARNING, ,, name, ., getFullName, (, ), ), ), ;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name]
[., node, ,, level, ,, UNDEFINED_NAME_WARNING, ,, name, ., getFullName, (, ), ), ), ;, }, private, boolean, propertyMustBeInitializedByFullName, (]
[,, UNDEFINED_NAME_WARNING, ,, name, ., getFullName, (, ), ), ), ;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name, ), {]
[,, name, ., getFullName, (, ), ), ), ;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name, ), {, if, (]
[), ), ;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name, ), {, if, (, name, ., parent, ==, null, )]
[., getFullName, (, ), ), ), ;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name, ), {, if, (, name, .]
[), {, return, false, ;, }, boolean, parentIsAliased, =, false, ;, if, (, name, ., parent, ., aliasingGets, >, 0]
[==, null, ), {, return, false, ;, }, boolean, parentIsAliased, =, false, ;, if, (, name, ., parent, ., aliasingGets]
[., parent, ==, null, ), {, return, false, ;, }, boolean, parentIsAliased, =, false, ;, if, (, name, ., parent]
[), {, return, false, ;, }, boolean, parentIsAliased, =, false, ;, if, (, name, ., parent, ., aliasingGets, >, 0]
[;, }, boolean, parentIsAliased, =, false, ;, if, (, name, ., parent, ., aliasingGets, >, 0, ), {, for, (]
[;, if, (, name, ., parent, ., aliasingGets, >, 0, ), {, for, (, Ref, ref, :, name, ., parent]
[), {, for, (, Ref, ref, :, name, ., parent, ., getRefs, (, ), ), {, if, (, ref, .]
[>, 0, ), {, for, (, Ref, ref, :, name, ., parent, ., getRefs, (, ), ), {, if, (]
[., aliasingGets, >, 0, ), {, for, (, Ref, ref, :, name, ., parent, ., getRefs, (, ), ), {]
[., parent, ., aliasingGets, >, 0, ), {, for, (, Ref, ref, :, name, ., parent, ., getRefs, (, )]
[), {, for, (, Ref, ref, :, name, ., parent, ., getRefs, (, ), ), {, if, (, ref, .]
[), {, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, ), {, Node, aliaser, =, ref, .]
[., getRefs, (, ), ), {, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, ), {, Node]
[., parent, ., getRefs, (, ), ), {, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, )]
[), {, Node, aliaser, =, ref, ., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =, aliaser, .]
[==, Ref, ., Type, ., ALIASING_GET, ), {, Node, aliaser, =, ref, ., getNode, (, ), ., getParent, (, )]
[., type, ==, Ref, ., Type, ., ALIASING_GET, ), {, Node, aliaser, =, ref, ., getNode, (, ), ., getParent]
[), {, Node, aliaser, =, ref, ., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =, aliaser, .]
[., ALIASING_GET, ), {, Node, aliaser, =, ref, ., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =]
[., Type, ., ALIASING_GET, ), {, Node, aliaser, =, ref, ., getNode, (, ), ., getParent, (, ), ;, boolean]
[;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (, convention, ., getClassesDefinedByCall, (, aliaser, ), !=, null, ||]
[., getParent, (, ), ;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (, convention, ., getClassesDefinedByCall, (, aliaser]
[., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (, convention]
[;, if, (, !, isKnownAlias, ), {, parentIsAliased, =, true, ;, }, }, }, }, if, (, parentIsAliased, ), {]
[&&, (, convention, ., getClassesDefinedByCall, (, aliaser, ), !=, null, ||, convention, ., getSingletonGetterClassName, (, aliaser, ), !=, null, )]
[., isCall, (, ), &&, (, convention, ., getClassesDefinedByCall, (, aliaser, ), !=, null, ||, convention, ., getSingletonGetterClassName, (, aliaser]
[;, if, (, !, isKnownAlias, ), {, parentIsAliased, =, true, ;, }, }, }, }, if, (, parentIsAliased, ), {]
[), ;, if, (, !, isKnownAlias, ), {, parentIsAliased, =, true, ;, }, }, }, }, if, (, parentIsAliased, )]
[||, convention, ., getSingletonGetterClassName, (, aliaser, ), !=, null, ), ;, if, (, !, isKnownAlias, ), {, parentIsAliased, =, true]
[!=, null, ||, convention, ., getSingletonGetterClassName, (, aliaser, ), !=, null, ), ;, if, (, !, isKnownAlias, ), {, parentIsAliased]
[., getClassesDefinedByCall, (, aliaser, ), !=, null, ||, convention, ., getSingletonGetterClassName, (, aliaser, ), !=, null, ), ;, if, (]
[), !=, null, ||, convention, ., getSingletonGetterClassName, (, aliaser, ), !=, null, ), ;, if, (, !, isKnownAlias, ), {]
[||, convention, ., getSingletonGetterClassName, (, aliaser, ), !=, null, ), ;, if, (, !, isKnownAlias, ), {, parentIsAliased, =, true]
[), ;, if, (, !, isKnownAlias, ), {, parentIsAliased, =, true, ;, }, }, }, }, if, (, parentIsAliased, )]
[!=, null, ), ;, if, (, !, isKnownAlias, ), {, parentIsAliased, =, true, ;, }, }, }, }, if, (]
[., getSingletonGetterClassName, (, aliaser, ), !=, null, ), ;, if, (, !, isKnownAlias, ), {, parentIsAliased, =, true, ;, }]
[), !=, null, ), ;, if, (, !, isKnownAlias, ), {, parentIsAliased, =, true, ;, }, }, }, }, if]
[), ;, if, (, !, isKnownAlias, ), {, parentIsAliased, =, true, ;, }, }, }, }, if, (, parentIsAliased, )]
[), {, parentIsAliased, =, true, ;, }, }, }, }, if, (, parentIsAliased, ), {, return, false, ;, }, if]
[), {, parentIsAliased, =, true, ;, }, }, }, }, if, (, parentIsAliased, ), {, return, false, ;, }, if]
[=, true, ;, }, }, }, }, if, (, parentIsAliased, ), {, return, false, ;, }, if, (, objectPrototypeProps, .]
[;, }, }, }, }, if, (, parentIsAliased, ), {, return, false, ;, }, if, (, objectPrototypeProps, ., contains, (]
[), {, return, false, ;, }, if, (, objectPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {]
[;, }, if, (, objectPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {, return, false, ;, }]
[), {, return, false, ;, }, if, (, name, ., parent, ., type, ==, Name, ., Type, ., OBJECTLIT, )]
[., contains, (, name, ., getBaseName, (, ), ), ), {, return, false, ;, }, if, (, name, ., parent]
[), ), {, return, false, ;, }, if, (, name, ., parent, ., type, ==, Name, ., Type, ., OBJECTLIT]
[., getBaseName, (, ), ), ), {, return, false, ;, }, if, (, name, ., parent, ., type, ==, Name]
[;, }, if, (, name, ., parent, ., type, ==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, name, ., parent, ., type, ==, Name, ., Type, ., FUNCTION, &&]
[==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (, name, ., parent, ., type, ==]
[., type, ==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (, name, ., parent, .]
[., parent, ., type, ==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (, name, .]
[), {, return, true, ;, }, if, (, name, ., parent, ., type, ==, Name, ., Type, ., FUNCTION, &&]
[., OBJECTLIT, ), {, return, true, ;, }, if, (, name, ., parent, ., type, ==, Name, ., Type, .]
[., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (, name, ., parent, ., type, ==, Name, .]
[;, }, if, (, name, ., parent, ., type, ==, Name, ., Type, ., FUNCTION, &&, name, ., parent, .]
[), {, return, true, ;, }, return, false, ;, }, }]
[&&, !, functionPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {, return, true, ;, }, return, false]
[&&, name, ., parent, ., isDeclaredType, (, ), &&, !, functionPrototypeProps, ., contains, (, name, ., getBaseName, (, ), )]
[==, Name, ., Type, ., FUNCTION, &&, name, ., parent, ., isDeclaredType, (, ), &&, !, functionPrototypeProps, ., contains, (]
[., type, ==, Name, ., Type, ., FUNCTION, &&, name, ., parent, ., isDeclaredType, (, ), &&, !, functionPrototypeProps, .]
[., parent, ., type, ==, Name, ., Type, ., FUNCTION, &&, name, ., parent, ., isDeclaredType, (, ), &&, !]
[&&, name, ., parent, ., isDeclaredType, (, ), &&, !, functionPrototypeProps, ., contains, (, name, ., getBaseName, (, ), )]
[., FUNCTION, &&, name, ., parent, ., isDeclaredType, (, ), &&, !, functionPrototypeProps, ., contains, (, name, ., getBaseName, (]
[., Type, ., FUNCTION, &&, name, ., parent, ., isDeclaredType, (, ), &&, !, functionPrototypeProps, ., contains, (, name, .]
[&&, !, functionPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {, return, true, ;, }, return, false]
[., isDeclaredType, (, ), &&, !, functionPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {, return, true]
[., parent, ., isDeclaredType, (, ), &&, !, functionPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {]
[), {, return, true, ;, }, return, false, ;, }, }]
[), {, return, true, ;, }, return, false, ;, }, }]
[., contains, (, name, ., getBaseName, (, ), ), ), {, return, true, ;, }, return, false, ;, }, }]
[), ), {, return, true, ;, }, return, false, ;, }, }]
[., getBaseName, (, ), ), ), {, return, true, ;, }, return, false, ;, }, }]
[;, }, return, false, ;, }, }]
[;, }, }]
