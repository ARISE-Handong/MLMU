[double, anovaFValue, (, final, Collection, <, double, [, ], >, categoryData, ), throws, NullArgumentException, ,, DimensionMismatchException, {, AnovaStats, a, =]
[(, final, Collection, <, double, [, ], >, categoryData, ), throws, NullArgumentException, ,, DimensionMismatchException, {, AnovaStats, a, =, anovaStats, (]
[double, [, ], >, categoryData, ), throws, NullArgumentException, ,, DimensionMismatchException, {, AnovaStats, a, =, anovaStats, (, categoryData, ), ;, return]
[double, [, ], >, categoryData, ), throws, NullArgumentException, ,, DimensionMismatchException, {, AnovaStats, a, =, anovaStats, (, categoryData, ), ;, return]
[Collection, <, double, [, ], >, categoryData, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, ConvergenceException, ,, MaxCountExceededException, {, AnovaStats, a, =]
[double, [, ], >, categoryData, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, ConvergenceException, ,, MaxCountExceededException, {, AnovaStats, a, =, anovaStats, (]
[throws, NullArgumentException, ,, DimensionMismatchException, ,, ConvergenceException, ,, MaxCountExceededException, {, AnovaStats, a, =, anovaStats, (, categoryData, ), ;, FDistribution, fdist, =]
[DimensionMismatchException, ,, ConvergenceException, ,, MaxCountExceededException, {, AnovaStats, a, =, anovaStats, (, categoryData, ), ;, FDistribution, fdist, =, new, FDistribution, (]
[DimensionMismatchException, ,, ConvergenceException, ,, MaxCountExceededException, {, AnovaStats, a, =, anovaStats, (, categoryData, ), ;, FDistribution, fdist, =, new, FDistribution, (]
[MaxCountExceededException, {, AnovaStats, a, =, anovaStats, (, categoryData, ), ;, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,]
[MaxCountExceededException, {, AnovaStats, a, =, anovaStats, (, categoryData, ), ;, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,]
[(, categoryData, ), ;, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return]
[(, categoryData, ), ;, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return]
[), ;, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return, 1.0, -]
[), ;, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return, 1.0, -]
[=, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return, 1.0, -, fdist, ., cumulativeProbability, (]
[=, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return, 1.0, -, fdist, ., cumulativeProbability, (]
[>, categoryData, ,, final, boolean, allowOneElementData, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, ConvergenceException, ,, MaxCountExceededException, {, final, AnovaStats, a, =]
[,, final, boolean, allowOneElementData, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, ConvergenceException, ,, MaxCountExceededException, {, final, AnovaStats, a, =, anovaStats, (]
[boolean, allowOneElementData, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, ConvergenceException, ,, MaxCountExceededException, {, final, AnovaStats, a, =, anovaStats, (, categoryData, ,]
[,, ConvergenceException, ,, MaxCountExceededException, {, final, AnovaStats, a, =, anovaStats, (, categoryData, ,, allowOneElementData, ), ;, final, FDistribution, fdist, =]
[MaxCountExceededException, {, final, AnovaStats, a, =, anovaStats, (, categoryData, ,, allowOneElementData, ), ;, final, FDistribution, fdist, =, new, FDistribution, (]
[MaxCountExceededException, {, final, AnovaStats, a, =, anovaStats, (, categoryData, ,, allowOneElementData, ), ;, final, FDistribution, fdist, =, new, FDistribution, (]
[a, =, anovaStats, (, categoryData, ,, allowOneElementData, ), ;, final, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,]
[a, =, anovaStats, (, categoryData, ,, allowOneElementData, ), ;, final, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,]
[allowOneElementData, ), ;, final, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return]
[allowOneElementData, ), ;, final, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return]
[;, final, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return, 1.0, -]
[;, final, FDistribution, fdist, =, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return, 1.0, -]
[=, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return, 1.0, -, fdist, ., cumulativeProbability, (]
[=, new, FDistribution, (, a, ., dfbg, ,, a, ., dfwg, ), ;, return, 1.0, -, fdist, ., cumulativeProbability, (]
[;, }, private, AnovaStats, anovaStats, (, final, Collection, <, double, [, ], >, categoryData, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[;, }, private, AnovaStats, anovaStats, (, final, Collection, <, double, [, ], >, categoryData, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[anovaStats, (, final, Collection, <, double, [, ], >, categoryData, ), throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (]
[), throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, categoryData, ), ;, final, Collection, <, SummaryStatistics, >, categoryDataSummaryStatistics, =]
[MathUtils, ., checkNotNull, (, categoryData, ), ;, final, Collection, <, SummaryStatistics, >, categoryDataSummaryStatistics, =, new, ArrayList, <, SummaryStatistics, >, (]
[MathUtils, ., checkNotNull, (, categoryData, ), ;, final, Collection, <, SummaryStatistics, >, categoryDataSummaryStatistics, =, new, ArrayList, <, SummaryStatistics, >, (]
[ArrayList, <, SummaryStatistics, >, (, categoryData, ., size, (, ), ), ;, for, (, final, double, [, ], data, :]
[size, (, ), ), ;, for, (, final, double, [, ], data, :, categoryData, ), {, final, SummaryStatistics, dataSummaryStatistics, =]
[for, (, final, double, [, ], data, :, categoryData, ), {, final, SummaryStatistics, dataSummaryStatistics, =, new, SummaryStatistics, (, ), ;]
[for, (, final, double, [, ], data, :, categoryData, ), {, final, SummaryStatistics, dataSummaryStatistics, =, new, SummaryStatistics, (, ), ;]
[[, ], data, :, categoryData, ), {, final, SummaryStatistics, dataSummaryStatistics, =, new, SummaryStatistics, (, ), ;, categoryDataSummaryStatistics, ., add, (]
[dataSummaryStatistics, =, new, SummaryStatistics, (, ), ;, categoryDataSummaryStatistics, ., add, (, dataSummaryStatistics, ), ;, for, (, final, double, val, :]
[SummaryStatistics, (, ), ;, categoryDataSummaryStatistics, ., add, (, dataSummaryStatistics, ), ;, for, (, final, double, val, :, data, ), {]
[SummaryStatistics, (, ), ;, categoryDataSummaryStatistics, ., add, (, dataSummaryStatistics, ), ;, for, (, final, double, val, :, data, ), {]
[categoryDataSummaryStatistics, ., add, (, dataSummaryStatistics, ), ;, for, (, final, double, val, :, data, ), {, dataSummaryStatistics, ., addValue, (]
[;, for, (, final, double, val, :, data, ), {, dataSummaryStatistics, ., addValue, (, val, ), ;, }, }, return]
[(, final, double, val, :, data, ), {, dataSummaryStatistics, ., addValue, (, val, ), ;, }, }, return, anovaStats, (]
[double, val, :, data, ), {, dataSummaryStatistics, ., addValue, (, val, ), ;, }, }, return, anovaStats, (, categoryDataSummaryStatistics, ,]
[>, categoryData, ,, final, double, alpha, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, OutOfRangeException, ,, ConvergenceException, ,, MaxCountExceededException, {, if, (]
[>, categoryData, ,, final, double, alpha, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, OutOfRangeException, ,, ConvergenceException, ,, MaxCountExceededException, {, if, (]
[categoryData, ,, final, double, alpha, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, OutOfRangeException, ,, ConvergenceException, ,, MaxCountExceededException, {, if, (, (]
[categoryData, ,, final, double, alpha, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, OutOfRangeException, ,, ConvergenceException, ,, MaxCountExceededException, {, if, (, (]
[final, double, alpha, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, OutOfRangeException, ,, ConvergenceException, ,, MaxCountExceededException, {, if, (, (, alpha, <=]
[), throws, NullArgumentException, ,, DimensionMismatchException, ,, OutOfRangeException, ,, ConvergenceException, ,, MaxCountExceededException, {, if, (, (, alpha, <=, 0, ), ||]
[throws, NullArgumentException, ,, DimensionMismatchException, ,, OutOfRangeException, ,, ConvergenceException, ,, MaxCountExceededException, {, if, (, (, alpha, <=, 0, ), ||, (]
[throws, NullArgumentException, ,, DimensionMismatchException, ,, OutOfRangeException, ,, ConvergenceException, ,, MaxCountExceededException, {, if, (, (, alpha, <=, 0, ), ||, (]
[,, DimensionMismatchException, ,, OutOfRangeException, ,, ConvergenceException, ,, MaxCountExceededException, {, if, (, (, alpha, <=, 0, ), ||, (, alpha, >]
[ConvergenceException, ,, MaxCountExceededException, {, if, (, (, alpha, <=, 0, ), ||, (, alpha, >, 0.5, ), ), {, throw]
[{, if, (, (, alpha, <=, 0, ), ||, (, alpha, >, 0.5, ), ), {, throw, new, OutOfRangeException, (]
[{, if, (, (, alpha, <=, 0, ), ||, (, alpha, >, 0.5, ), ), {, throw, new, OutOfRangeException, (]
[alpha, <=, 0, ), ||, (, alpha, >, 0.5, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_BOUND_SIGNIFICANCE_LEVEL, ,]
[0, ), ||, (, alpha, >, 0.5, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_BOUND_SIGNIFICANCE_LEVEL, ,, alpha, ,]
[||, (, alpha, >, 0.5, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_BOUND_SIGNIFICANCE_LEVEL, ,, alpha, ,, 0, ,]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_BOUND_SIGNIFICANCE_LEVEL, ,, alpha, ,, 0, ,, 0.5, ), ;, }, return]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_BOUND_SIGNIFICANCE_LEVEL, ,, alpha, ,, 0, ,, 0.5, ), ;, }, return]
[{, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_BOUND_SIGNIFICANCE_LEVEL, ,, alpha, ,, 0, ,, 0.5, ), ;, }, return, anovaPValue, (]
[OutOfRangeException, (, LocalizedFormats, ., OUT_OF_BOUND_SIGNIFICANCE_LEVEL, ,, alpha, ,, 0, ,, 0.5, ), ;, }, return, anovaPValue, (, categoryData, ), <]
[private, AnovaStats, anovaStats, (, final, Collection, <, SummaryStatistics, >, categoryData, ,, final, boolean, allowOneElementData, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[private, AnovaStats, anovaStats, (, final, Collection, <, SummaryStatistics, >, categoryData, ,, final, boolean, allowOneElementData, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[final, Collection, <, SummaryStatistics, >, categoryData, ,, final, boolean, allowOneElementData, ), throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (]
[categoryData, ,, final, boolean, allowOneElementData, ), throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, categoryData, ), ;, if, (]
[,, final, boolean, allowOneElementData, ), throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, categoryData, ), ;, if, (, !]
[throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, categoryData, ), ;, if, (, !, allowOneElementData, ), {, if, (]
[throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, categoryData, ), ;, if, (, !, allowOneElementData, ), {, if, (]
[throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, categoryData, ), ;, if, (, !, allowOneElementData, ), {, if, (]
[., checkNotNull, (, categoryData, ), ;, if, (, !, allowOneElementData, ), {, if, (, categoryData, ., size, (, ), <]
[), ;, if, (, !, allowOneElementData, ), {, if, (, categoryData, ., size, (, ), <, 2, ), {, throw]
[(, !, allowOneElementData, ), {, if, (, categoryData, ., size, (, ), <, 2, ), {, throw, new, DimensionMismatchException, (]
[(, !, allowOneElementData, ), {, if, (, categoryData, ., size, (, ), <, 2, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, categoryData, ., size, (, ), <, 2, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., TWO_OR_MORE_CATEGORIES_REQUIRED, ,]
[{, if, (, categoryData, ., size, (, ), <, 2, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., TWO_OR_MORE_CATEGORIES_REQUIRED, ,]
[(, ), <, 2, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., TWO_OR_MORE_CATEGORIES_REQUIRED, ,, categoryData, ., size, (, ), ,]
[LocalizedFormats, ., TWO_OR_MORE_CATEGORIES_REQUIRED, ,, categoryData, ., size, (, ), ,, 2, ), ;, }, for, (, final, SummaryStatistics, array, :]
[., size, (, ), ,, 2, ), ;, }, for, (, final, SummaryStatistics, array, :, categoryData, ), {, if, (]
[., size, (, ), ,, 2, ), ;, }, for, (, final, SummaryStatistics, array, :, categoryData, ), {, if, (]
[., size, (, ), ,, 2, ), ;, }, for, (, final, SummaryStatistics, array, :, categoryData, ), {, if, (]
[), ;, }, for, (, final, SummaryStatistics, array, :, categoryData, ), {, if, (, array, ., getN, (, ), <=]
[(, final, SummaryStatistics, array, :, categoryData, ), {, if, (, array, ., getN, (, ), <=, 1, ), {, throw]
[array, :, categoryData, ), {, if, (, array, ., getN, (, ), <=, 1, ), {, throw, new, DimensionMismatchException, (]
[array, :, categoryData, ), {, if, (, array, ., getN, (, ), <=, 1, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, array, ., getN, (, ), <=, 1, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED, ,]
[array, ., getN, (, ), <=, 1, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED, ,, (, int, )]
[array, ., getN, (, ), <=, 1, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED, ,, (, int, )]
[1, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED, ,, (, int, ), array, ., getN, (, ), ,]
[TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED, ,, (, int, ), array, ., getN, (, ), ,, 2, ), ;, }, }, }, int, dfwg, =]
[array, ., getN, (, ), ,, 2, ), ;, }, }, }, int, dfwg, =, 0, ;, double, sswg, =]
[,, 2, ), ;, }, }, }, int, dfwg, =, 0, ;, double, sswg, =, 0, ;, double, totsum, =]
[}, }, int, dfwg, =, 0, ;, double, sswg, =, 0, ;, double, totsum, =, 0, ;, double, totsumsq, =]
[0, ;, double, sswg, =, 0, ;, double, totsum, =, 0, ;, double, totsumsq, =, 0, ;, int, totnum, =]
[totsum, =, 0, ;, double, totsumsq, =, 0, ;, int, totnum, =, 0, ;, for, (, final, SummaryStatistics, data, :]
[0, ;, int, totnum, =, 0, ;, for, (, final, SummaryStatistics, data, :, categoryData, ), {, final, double, sum, =]
[0, ;, int, totnum, =, 0, ;, for, (, final, SummaryStatistics, data, :, categoryData, ), {, final, double, sum, =]
[SummaryStatistics, data, :, categoryData, ), {, final, double, sum, =, data, ., getSum, (, ), ;, final, double, sumsq, =]
[SummaryStatistics, data, :, categoryData, ), {, final, double, sum, =, data, ., getSum, (, ), ;, final, double, sumsq, =]
[data, ., getSum, (, ), ;, final, double, sumsq, =, data, ., getSumsq, (, ), ;, final, int, num, =]
[(, ), ;, final, double, sumsq, =, data, ., getSumsq, (, ), ;, final, int, num, =, (, int, )]
[(, ), ;, final, double, sumsq, =, data, ., getSumsq, (, ), ;, final, int, num, =, (, int, )]
[=, data, ., getSumsq, (, ), ;, final, int, num, =, (, int, ), data, ., getN, (, ), ;]
[., getSumsq, (, ), ;, final, int, num, =, (, int, ), data, ., getN, (, ), ;, totnum, +=]
[(, ), ;, final, int, num, =, (, int, ), data, ., getN, (, ), ;, totnum, +=, num, ;]
[;, final, int, num, =, (, int, ), data, ., getN, (, ), ;, totnum, +=, num, ;, totsum, +=]
[int, num, =, (, int, ), data, ., getN, (, ), ;, totnum, +=, num, ;, totsum, +=, sum, ;]
[=, (, int, ), data, ., getN, (, ), ;, totnum, +=, num, ;, totsum, +=, sum, ;, totsumsq, +=]
[int, ), data, ., getN, (, ), ;, totnum, +=, num, ;, totsum, +=, sum, ;, totsumsq, +=, sumsq, ;]
[data, ., getN, (, ), ;, totnum, +=, num, ;, totsum, +=, sum, ;, totsumsq, +=, sumsq, ;, dfwg, +=]
[data, ., getN, (, ), ;, totnum, +=, num, ;, totsum, +=, sum, ;, totsumsq, +=, sumsq, ;, dfwg, +=]
[getN, (, ), ;, totnum, +=, num, ;, totsum, +=, sum, ;, totsumsq, +=, sumsq, ;, dfwg, +=, num, -]
[num, ;, totsum, +=, sum, ;, totsumsq, +=, sumsq, ;, dfwg, +=, num, -, 1, ;, final, double, ss, =]
[num, ;, totsum, +=, sum, ;, totsumsq, +=, sumsq, ;, dfwg, +=, num, -, 1, ;, final, double, ss, =]
[totsum, +=, sum, ;, totsumsq, +=, sumsq, ;, dfwg, +=, num, -, 1, ;, final, double, ss, =, sumsq, -]
[+=, sum, ;, totsumsq, +=, sumsq, ;, dfwg, +=, num, -, 1, ;, final, double, ss, =, sumsq, -, (]
[+=, sum, ;, totsumsq, +=, sumsq, ;, dfwg, +=, num, -, 1, ;, final, double, ss, =, sumsq, -, (]
[sum, ;, totsumsq, +=, sumsq, ;, dfwg, +=, num, -, 1, ;, final, double, ss, =, sumsq, -, (, (]
[sum, ;, totsumsq, +=, sumsq, ;, dfwg, +=, num, -, 1, ;, final, double, ss, =, sumsq, -, (, (]
[totsumsq, +=, sumsq, ;, dfwg, +=, num, -, 1, ;, final, double, ss, =, sumsq, -, (, (, sum, *]
[;, dfwg, +=, num, -, 1, ;, final, double, ss, =, sumsq, -, (, (, sum, *, sum, ), /]
[num, -, 1, ;, final, double, ss, =, sumsq, -, (, (, sum, *, sum, ), /, num, ), ;]
[1, ;, final, double, ss, =, sumsq, -, (, (, sum, *, sum, ), /, num, ), ;, sswg, +=]
[-, (, (, sum, *, sum, ), /, num, ), ;, sswg, +=, ss, ;, }, final, double, sst, =]
[-, (, (, sum, *, sum, ), /, num, ), ;, sswg, +=, ss, ;, }, final, double, sst, =]
[(, sum, *, sum, ), /, num, ), ;, sswg, +=, ss, ;, }, final, double, sst, =, totsumsq, -]
[sum, *, sum, ), /, num, ), ;, sswg, +=, ss, ;, }, final, double, sst, =, totsumsq, -, (]
[sum, *, sum, ), /, num, ), ;, sswg, +=, ss, ;, }, final, double, sst, =, totsumsq, -, (]
[*, sum, ), /, num, ), ;, sswg, +=, ss, ;, }, final, double, sst, =, totsumsq, -, (, (]
[*, sum, ), /, num, ), ;, sswg, +=, ss, ;, }, final, double, sst, =, totsumsq, -, (, (]
[), /, num, ), ;, sswg, +=, ss, ;, }, final, double, sst, =, totsumsq, -, (, (, totsum, *]
[), ;, sswg, +=, ss, ;, }, final, double, sst, =, totsumsq, -, (, (, totsum, *, totsum, ), /]
[final, double, sst, =, totsumsq, -, (, (, totsum, *, totsum, ), /, totnum, ), ;, final, double, ssbg, =]
[final, double, sst, =, totsumsq, -, (, (, totsum, *, totsum, ), /, totnum, ), ;, final, double, ssbg, =]
[sst, =, totsumsq, -, (, (, totsum, *, totsum, ), /, totnum, ), ;, final, double, ssbg, =, sst, -]
[totsum, *, totsum, ), /, totnum, ), ;, final, double, ssbg, =, sst, -, sswg, ;, final, int, dfbg, =]
[totsum, *, totsum, ), /, totnum, ), ;, final, double, ssbg, =, sst, -, sswg, ;, final, int, dfbg, =]
[totsum, *, totsum, ), /, totnum, ), ;, final, double, ssbg, =, sst, -, sswg, ;, final, int, dfbg, =]
[), ;, final, double, ssbg, =, sst, -, sswg, ;, final, int, dfbg, =, categoryData, ., size, (, ), -]
[sst, -, sswg, ;, final, int, dfbg, =, categoryData, ., size, (, ), -, 1, ;, final, double, msbg, =]
[sst, -, sswg, ;, final, int, dfbg, =, categoryData, ., size, (, ), -, 1, ;, final, double, msbg, =]
[sswg, ;, final, int, dfbg, =, categoryData, ., size, (, ), -, 1, ;, final, double, msbg, =, ssbg, /]
[categoryData, ., size, (, ), -, 1, ;, final, double, msbg, =, ssbg, /, dfbg, ;, final, double, mswg, =]
[categoryData, ., size, (, ), -, 1, ;, final, double, msbg, =, ssbg, /, dfbg, ;, final, double, mswg, =]
[size, (, ), -, 1, ;, final, double, msbg, =, ssbg, /, dfbg, ;, final, double, mswg, =, sswg, /]
[final, double, msbg, =, ssbg, /, dfbg, ;, final, double, mswg, =, sswg, /, dfwg, ;, final, double, F, =]
[final, double, msbg, =, ssbg, /, dfbg, ;, final, double, mswg, =, sswg, /, dfwg, ;, final, double, F, =]
[msbg, =, ssbg, /, dfbg, ;, final, double, mswg, =, sswg, /, dfwg, ;, final, double, F, =, msbg, /]
[/, dfbg, ;, final, double, mswg, =, sswg, /, dfwg, ;, final, double, F, =, msbg, /, mswg, ;, return]
[final, double, mswg, =, sswg, /, dfwg, ;, final, double, F, =, msbg, /, mswg, ;, return, new, AnovaStats, (]
[mswg, =, sswg, /, dfwg, ;, final, double, F, =, msbg, /, mswg, ;, return, new, AnovaStats, (, dfbg, ,]
[sswg, /, dfwg, ;, final, double, F, =, msbg, /, mswg, ;, return, new, AnovaStats, (, dfbg, ,, dfwg, ,]
[dfwg, ;, private, final, double, F, ;, private, AnovaStats, (, int, dfbg, ,, int, dfwg, ,, double, F, ), {]
[dfwg, ;, private, final, double, F, ;, private, AnovaStats, (, int, dfbg, ,, int, dfwg, ,, double, F, ), {]
[double, F, ;, private, AnovaStats, (, int, dfbg, ,, int, dfwg, ,, double, F, ), {, this, ., dfbg, =]
[;, private, AnovaStats, (, int, dfbg, ,, int, dfwg, ,, double, F, ), {, this, ., dfbg, =, dfbg, ;]
[;, private, AnovaStats, (, int, dfbg, ,, int, dfwg, ,, double, F, ), {, this, ., dfbg, =, dfbg, ;]
[int, dfbg, ,, int, dfwg, ,, double, F, ), {, this, ., dfbg, =, dfbg, ;, this, ., dfwg, =]
[,, int, dfwg, ,, double, F, ), {, this, ., dfbg, =, dfbg, ;, this, ., dfwg, =, dfwg, ;]
[,, int, dfwg, ,, double, F, ), {, this, ., dfbg, =, dfbg, ;, this, ., dfwg, =, dfwg, ;]
[double, F, ), {, this, ., dfbg, =, dfbg, ;, this, ., dfwg, =, dfwg, ;, this, ., F, =]
