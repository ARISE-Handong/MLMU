[., math3, ., exception, ., util, ., LocalizedFormats, ;, public, abstract, class, ContinuedFraction, {, private, static, final, double, DEFAULT_EPSILON, =]
[getB, (, int, n, ,, double, x, ), ;, public, double, evaluate, (, double, x, ), throws, ConvergenceException, {, return]
[int, n, ,, double, x, ), ;, public, double, evaluate, (, double, x, ), throws, ConvergenceException, {, return, evaluate, (]
[,, double, x, ), ;, public, double, evaluate, (, double, x, ), throws, ConvergenceException, {, return, evaluate, (, x, ,]
[x, ), ;, public, double, evaluate, (, double, x, ), throws, ConvergenceException, {, return, evaluate, (, x, ,, DEFAULT_EPSILON, ,]
[x, ), ;, public, double, evaluate, (, double, x, ), throws, ConvergenceException, {, return, evaluate, (, x, ,, DEFAULT_EPSILON, ,]
[Integer, ., MAX_VALUE, ), ;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ), throws, ConvergenceException, {, return]
[MAX_VALUE, ), ;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ), throws, ConvergenceException, {, return, evaluate, (]
[;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ), throws, ConvergenceException, {, return, evaluate, (, x, ,]
[public, double, evaluate, (, double, x, ,, double, epsilon, ), throws, ConvergenceException, {, return, evaluate, (, x, ,, epsilon, ,]
[public, double, evaluate, (, double, x, ,, double, epsilon, ), throws, ConvergenceException, {, return, evaluate, (, x, ,, epsilon, ,]
[MAX_VALUE, ), ;, }, public, double, evaluate, (, double, x, ,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {, return]
[;, }, public, double, evaluate, (, double, x, ,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {, return, evaluate, (]
[public, double, evaluate, (, double, x, ,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {, return, evaluate, (, x, ,]
[evaluate, (, double, x, ,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {, return, evaluate, (, x, ,, DEFAULT_EPSILON, ,]
[evaluate, (, double, x, ,, double, epsilon, ,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {, final, double, small, =]
[double, epsilon, ,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {, final, double, small, =, 1e-50, ;, double, hPrev, =]
[,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {, final, double, small, =, 1e-50, ;, double, hPrev, =, getA, (]
[maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {, final, double, small, =, 1e-50, ;, double, hPrev, =, getA, (, 0, ,]
[MaxCountExceededException, {, final, double, small, =, 1e-50, ;, double, hPrev, =, getA, (, 0, ,, x, ), ;, if, (]
[MaxCountExceededException, {, final, double, small, =, 1e-50, ;, double, hPrev, =, getA, (, 0, ,, x, ), ;, if, (]
[small, =, 1e-50, ;, double, hPrev, =, getA, (, 0, ,, x, ), ;, if, (, Precision, ., equals, (]
[1e-50, ;, double, hPrev, =, getA, (, 0, ,, x, ), ;, if, (, Precision, ., equals, (, hPrev, ,]
[double, hPrev, =, getA, (, 0, ,, x, ), ;, if, (, Precision, ., equals, (, hPrev, ,, 0.0, ,]
[(, 0, ,, x, ), ;, if, (, Precision, ., equals, (, hPrev, ,, 0.0, ,, small, ), ), {]
[,, x, ), ;, if, (, Precision, ., equals, (, hPrev, ,, 0.0, ,, small, ), ), {, hPrev, =]
[Precision, ., equals, (, hPrev, ,, 0.0, ,, small, ), ), {, hPrev, =, small, ;, }, int, n, =]
[,, 0.0, ,, small, ), ), {, hPrev, =, small, ;, }, int, n, =, 1, ;, double, dPrev, =]
[), {, hPrev, =, small, ;, }, int, n, =, 1, ;, double, dPrev, =, 0.0, ;, double, cPrev, =]
[;, }, int, n, =, 1, ;, double, dPrev, =, 0.0, ;, double, cPrev, =, hPrev, ;, double, hN, =]
[=, 1, ;, double, dPrev, =, 0.0, ;, double, cPrev, =, hPrev, ;, double, hN, =, hPrev, ;, while, (]
[=, 1, ;, double, dPrev, =, 0.0, ;, double, cPrev, =, hPrev, ;, double, hN, =, hPrev, ;, while, (]
[;, double, dPrev, =, 0.0, ;, double, cPrev, =, hPrev, ;, double, hN, =, hPrev, ;, while, (, n, <]
[cPrev, =, hPrev, ;, double, hN, =, hPrev, ;, while, (, n, <, maxIterations, ), {, final, double, a, =]
[hPrev, ;, double, hN, =, hPrev, ;, while, (, n, <, maxIterations, ), {, final, double, a, =, getA, (]
[double, hN, =, hPrev, ;, while, (, n, <, maxIterations, ), {, final, double, a, =, getA, (, n, ,]
[n, <, maxIterations, ), {, final, double, a, =, getA, (, n, ,, x, ), ;, final, double, b, =]
[maxIterations, ), {, final, double, a, =, getA, (, n, ,, x, ), ;, final, double, b, =, getB, (]
[{, final, double, a, =, getA, (, n, ,, x, ), ;, final, double, b, =, getB, (, n, ,]
[(, n, ,, x, ), ;, final, double, b, =, getB, (, n, ,, x, ), ;, double, dN, =]
[(, n, ,, x, ), ;, final, double, b, =, getB, (, n, ,, x, ), ;, double, dN, =]
[,, x, ), ;, final, double, b, =, getB, (, n, ,, x, ), ;, double, dN, =, a, +]
[,, x, ), ;, final, double, b, =, getB, (, n, ,, x, ), ;, double, dN, =, a, +]
[), ;, final, double, b, =, getB, (, n, ,, x, ), ;, double, dN, =, a, +, b, *]
[b, =, getB, (, n, ,, x, ), ;, double, dN, =, a, +, b, *, dPrev, ;, if, (]
[b, =, getB, (, n, ,, x, ), ;, double, dN, =, a, +, b, *, dPrev, ;, if, (]
[n, ,, x, ), ;, double, dN, =, a, +, b, *, dPrev, ;, if, (, Precision, ., equals, (]
[x, ), ;, double, dN, =, a, +, b, *, dPrev, ;, if, (, Precision, ., equals, (, dN, ,]
[;, double, dN, =, a, +, b, *, dPrev, ;, if, (, Precision, ., equals, (, dN, ,, 0.0, ,]
[a, +, b, *, dPrev, ;, if, (, Precision, ., equals, (, dN, ,, 0.0, ,, small, ), ), {]
[b, *, dPrev, ;, if, (, Precision, ., equals, (, dN, ,, 0.0, ,, small, ), ), {, dN, =]
[Precision, ., equals, (, dN, ,, 0.0, ,, small, ), ), {, dN, =, small, ;, }, double, cN, =]
[Precision, ., equals, (, dN, ,, 0.0, ,, small, ), ), {, dN, =, small, ;, }, double, cN, =]
[equals, (, dN, ,, 0.0, ,, small, ), ), {, dN, =, small, ;, }, double, cN, =, a, +]
[equals, (, dN, ,, 0.0, ,, small, ), ), {, dN, =, small, ;, }, double, cN, =, a, +]
[dN, ,, 0.0, ,, small, ), ), {, dN, =, small, ;, }, double, cN, =, a, +, b, /]
[small, ), ), {, dN, =, small, ;, }, double, cN, =, a, +, b, /, cPrev, ;, if, (]
[small, ), ), {, dN, =, small, ;, }, double, cN, =, a, +, b, /, cPrev, ;, if, (]
[dN, =, small, ;, }, double, cN, =, a, +, b, /, cPrev, ;, if, (, Precision, ., equals, (]
[small, ;, }, double, cN, =, a, +, b, /, cPrev, ;, if, (, Precision, ., equals, (, cN, ,]
[}, double, cN, =, a, +, b, /, cPrev, ;, if, (, Precision, ., equals, (, cN, ,, 0.0, ,]
[a, +, b, /, cPrev, ;, if, (, Precision, ., equals, (, cN, ,, 0.0, ,, small, ), ), {]
[b, /, cPrev, ;, if, (, Precision, ., equals, (, cN, ,, 0.0, ,, small, ), ), {, cN, =]
[;, if, (, Precision, ., equals, (, cN, ,, 0.0, ,, small, ), ), {, cN, =, small, ;, }]
[(, Precision, ., equals, (, cN, ,, 0.0, ,, small, ), ), {, cN, =, small, ;, }, dN, =]
[(, Precision, ., equals, (, cN, ,, 0.0, ,, small, ), ), {, cN, =, small, ;, }, dN, =]
[., equals, (, cN, ,, 0.0, ,, small, ), ), {, cN, =, small, ;, }, dN, =, 1, /]
[,, small, ), ), {, cN, =, small, ;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =]
[,, small, ), ), {, cN, =, small, ;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =]
[), ), {, cN, =, small, ;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =, cN, *]
[{, cN, =, small, ;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =, cN, *, dN, ;]
[=, small, ;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =, cN, *, dN, ;, hN, =]
[=, small, ;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =, cN, *, dN, ;, hN, =]
[;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =, cN, *, dN, ;, hN, =, hPrev, *]
[1, /, dN, ;, final, double, deltaN, =, cN, *, dN, ;, hN, =, hPrev, *, deltaN, ;, if, (]
[1, /, dN, ;, final, double, deltaN, =, cN, *, dN, ;, hN, =, hPrev, *, deltaN, ;, if, (]
[final, double, deltaN, =, cN, *, dN, ;, hN, =, hPrev, *, deltaN, ;, if, (, Double, ., isInfinite, (]
[*, dN, ;, hN, =, hPrev, *, deltaN, ;, if, (, Double, ., isInfinite, (, hN, ), ), {, throw]
[hN, =, hPrev, *, deltaN, ;, if, (, Double, ., isInfinite, (, hN, ), ), {, throw, new, ConvergenceException, (]
[hN, =, hPrev, *, deltaN, ;, if, (, Double, ., isInfinite, (, hN, ), ), {, throw, new, ConvergenceException, (]
[deltaN, ;, if, (, Double, ., isInfinite, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,]
[isInfinite, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x, ), ;, }, if, (]
[isInfinite, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x, ), ;, }, if, (]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x, ), ;, }, if, (, Double, ., isNaN, (]
[(, LocalizedFormats, ., CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x, ), ;, }, if, (, Double, ., isNaN, (, hN, ), ), {, throw]
[CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x, ), ;, }, if, (, Double, ., isNaN, (, hN, ), ), {, throw, new, ConvergenceException, (]
[CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x, ), ;, }, if, (, Double, ., isNaN, (, hN, ), ), {, throw, new, ConvergenceException, (]
[;, }, if, (, Double, ., isNaN, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,]
[isNaN, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,, x, ), ;, }, if, (]
[isNaN, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,, x, ), ;, }, if, (]
[isNaN, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,, x, ), ;, }, if, (]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,, x, ), ;, }, if, (, FastMath, ., abs, (]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,, x, ), ;, }, if, (, FastMath, ., abs, (]
[throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,, x, ), ;, }, if, (, FastMath, ., abs, (, deltaN, -]
[(, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,, x, ), ;, }, if, (, FastMath, ., abs, (, deltaN, -, 1.0, ), <]
[), ;, }, if, (, FastMath, ., abs, (, deltaN, -, 1.0, ), <, epsilon, ), {, break, ;, }]
[}, if, (, FastMath, ., abs, (, deltaN, -, 1.0, ), <, epsilon, ), {, break, ;, }, dPrev, =]
[(, FastMath, ., abs, (, deltaN, -, 1.0, ), <, epsilon, ), {, break, ;, }, dPrev, =, dN, ;]
[., abs, (, deltaN, -, 1.0, ), <, epsilon, ), {, break, ;, }, dPrev, =, dN, ;, cPrev, =]
[(, deltaN, -, 1.0, ), <, epsilon, ), {, break, ;, }, dPrev, =, dN, ;, cPrev, =, cN, ;]
[-, 1.0, ), <, epsilon, ), {, break, ;, }, dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =]
[), <, epsilon, ), {, break, ;, }, dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =, hN, ;]
[), <, epsilon, ), {, break, ;, }, dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =, hN, ;]
[;, }, dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =, hN, ;, n, ++, ;, }, if, (]
[;, }, dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =, hN, ;, n, ++, ;, }, if, (]
[dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =, hN, ;, n, ++, ;, }, if, (, n, >=]
[cPrev, =, cN, ;, hPrev, =, hN, ;, n, ++, ;, }, if, (, n, >=, maxIterations, ), {, throw]
[;, hPrev, =, hN, ;, n, ++, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (]
[;, hPrev, =, hN, ;, n, ++, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (]
[;, n, ++, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, LocalizedFormats, ., NON_CONVERGENT_CONTINUED_FRACTION, ,]
[++, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, LocalizedFormats, ., NON_CONVERGENT_CONTINUED_FRACTION, ,, maxIterations, ,]
[n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, LocalizedFormats, ., NON_CONVERGENT_CONTINUED_FRACTION, ,, maxIterations, ,, x, ), ;, }, return]
