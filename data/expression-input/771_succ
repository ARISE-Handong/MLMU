[;, private, static, final, String, ARROW, =, " -> ", ;, private, static, final, String, LINE, =, " -- ", ;, private, HashMap, <]
[;, private, static, final, String, LINE, =, " -- ", ;, private, HashMap, <, Node, ,, Integer, >, assignments, =, new, HashMap]
[;, private, HashMap, <, Node, ,, Integer, >, assignments, =, new, HashMap, <, Node, ,, Integer, >, (, ), ;]
[;, private, int, keyCount, =, 0, ;, private, Appendable, builder, ;, private, final, ControlFlowGraph, <, Node, >, cfg, ;, private]
[;, private, Appendable, builder, ;, private, final, ControlFlowGraph, <, Node, >, cfg, ;, private, final, boolean, printAnnotations, ;, private, DotFormatter]
[=, new, StringBuilder, (, ), ;, this, ., cfg, =, null, ;, this, ., printAnnotations, =, false, ;, }, private]
[., builder, =, new, StringBuilder, (, ), ;, this, ., cfg, =, null, ;, this, ., printAnnotations, =, false, ;]
[;, this, ., cfg, =, null, ;, this, ., printAnnotations, =, false, ;, }, private, DotFormatter, (, Node, n, ,]
[=, null, ;, this, ., printAnnotations, =, false, ;, }, private, DotFormatter, (, Node, n, ,, ControlFlowGraph, <, Node, >]
[., cfg, =, null, ;, this, ., printAnnotations, =, false, ;, }, private, DotFormatter, (, Node, n, ,, ControlFlowGraph, <]
[;, this, ., printAnnotations, =, false, ;, }, private, DotFormatter, (, Node, n, ,, ControlFlowGraph, <, Node, >, cfg, ,]
[=, false, ;, }, private, DotFormatter, (, Node, n, ,, ControlFlowGraph, <, Node, >, cfg, ,, Appendable, builder, ,, boolean]
[., printAnnotations, =, false, ;, }, private, DotFormatter, (, Node, n, ,, ControlFlowGraph, <, Node, >, cfg, ,, Appendable, builder]
[;, }, private, DotFormatter, (, Node, n, ,, ControlFlowGraph, <, Node, >, cfg, ,, Appendable, builder, ,, boolean, printAnnotations, )]
[=, cfg, ;, this, ., builder, =, builder, ;, this, ., printAnnotations, =, printAnnotations, ;, formatPreamble, (, ), ;, traverseNodes]
[., cfg, =, cfg, ;, this, ., builder, =, builder, ;, this, ., printAnnotations, =, printAnnotations, ;, formatPreamble, (, )]
[;, this, ., builder, =, builder, ;, this, ., printAnnotations, =, printAnnotations, ;, formatPreamble, (, ), ;, traverseNodes, (, n]
[=, builder, ;, this, ., printAnnotations, =, printAnnotations, ;, formatPreamble, (, ), ;, traverseNodes, (, n, ), ;, formatConclusion, (]
[., builder, =, builder, ;, this, ., printAnnotations, =, printAnnotations, ;, formatPreamble, (, ), ;, traverseNodes, (, n, ), ;]
[;, this, ., printAnnotations, =, printAnnotations, ;, formatPreamble, (, ), ;, traverseNodes, (, n, ), ;, formatConclusion, (, ), ;]
[=, printAnnotations, ;, formatPreamble, (, ), ;, traverseNodes, (, n, ), ;, formatConclusion, (, ), ;, }, public, static, String]
[., printAnnotations, =, printAnnotations, ;, formatPreamble, (, ), ;, traverseNodes, (, n, ), ;, formatConclusion, (, ), ;, }, public]
[;, formatPreamble, (, ), ;, traverseNodes, (, n, ), ;, formatConclusion, (, ), ;, }, public, static, String, toDot, (]
[;, traverseNodes, (, n, ), ;, formatConclusion, (, ), ;, }, public, static, String, toDot, (, Node, n, ), throws]
[;, formatConclusion, (, ), ;, }, public, static, String, toDot, (, Node, n, ), throws, IOException, {, return, toDot, (]
[), ;, formatConclusion, (, ), ;, }, public, static, String, toDot, (, Node, n, ), throws, IOException, {, return, toDot]
[;, }, public, static, String, toDot, (, Node, n, ), throws, IOException, {, return, toDot, (, n, ,, null, )]
[;, }, static, String, toDot, (, Node, n, ,, ControlFlowGraph, <, Node, >, inCFG, ,, boolean, printAnnotations, ), throws, IOException]
[,, null, ), ;, }, static, String, toDot, (, Node, n, ,, ControlFlowGraph, <, Node, >, inCFG, ,, boolean, printAnnotations]
[), ;, }, static, String, toDot, (, Node, n, ,, ControlFlowGraph, <, Node, >, inCFG, ,, boolean, printAnnotations, ), throws]
[;, new, DotFormatter, (, n, ,, inCFG, ,, builder, ,, printAnnotations, ), ;, return, builder, ., toString, (, ), ;]
[;, return, builder, ., toString, (, ), ;, }, static, String, toDot, (, Node, n, ,, ControlFlowGraph, <, Node, >]
[,, inCFG, ,, builder, ,, printAnnotations, ), ;, return, builder, ., toString, (, ), ;, }, static, String, toDot, (]
[,, builder, ,, printAnnotations, ), ;, return, builder, ., toString, (, ), ;, }, static, String, toDot, (, Node, n]
[,, printAnnotations, ), ;, return, builder, ., toString, (, ), ;, }, static, String, toDot, (, Node, n, ,, ControlFlowGraph]
[), ;, return, builder, ., toString, (, ), ;, }, static, String, toDot, (, Node, n, ,, ControlFlowGraph, <, Node]
[;, }, static, String, toDot, (, Node, n, ,, ControlFlowGraph, <, Node, >, inCFG, ), throws, IOException, {, StringBuilder, builder]
[., toString, (, ), ;, }, static, String, toDot, (, Node, n, ,, ControlFlowGraph, <, Node, >, inCFG, ), throws]
[;, new, DotFormatter, (, n, ,, inCFG, ,, builder, ,, false, ), ;, return, builder, ., toString, (, ), ;]
[;, return, builder, ., toString, (, ), ;, }, static, void, appendDot, (, Node, n, ,, ControlFlowGraph, <, Node, >]
[,, inCFG, ,, builder, ,, false, ), ;, return, builder, ., toString, (, ), ;, }, static, void, appendDot, (]
[,, builder, ,, false, ), ;, return, builder, ., toString, (, ), ;, }, static, void, appendDot, (, Node, n]
[,, false, ), ;, return, builder, ., toString, (, ), ;, }, static, void, appendDot, (, Node, n, ,, ControlFlowGraph]
[), ;, return, builder, ., toString, (, ), ;, }, static, void, appendDot, (, Node, n, ,, ControlFlowGraph, <, Node]
[;, }, static, void, appendDot, (, Node, n, ,, ControlFlowGraph, <, Node, >, inCFG, ,, Appendable, builder, ), throws, IOException]
[., toString, (, ), ;, }, static, void, appendDot, (, Node, n, ,, ControlFlowGraph, <, Node, >, inCFG, ,, Appendable]
[;, }, static, DotFormatter, newInstanceForTesting, (, ), {, return, new, DotFormatter, (, ), ;, }, private, void, traverseNodes, (, Node]
[,, inCFG, ,, builder, ,, false, ), ;, }, static, DotFormatter, newInstanceForTesting, (, ), {, return, new, DotFormatter, (, )]
[,, builder, ,, false, ), ;, }, static, DotFormatter, newInstanceForTesting, (, ), {, return, new, DotFormatter, (, ), ;, }]
[,, false, ), ;, }, static, DotFormatter, newInstanceForTesting, (, ), {, return, new, DotFormatter, (, ), ;, }, private, void]
[), ;, }, static, DotFormatter, newInstanceForTesting, (, ), {, return, new, DotFormatter, (, ), ;, }, private, void, traverseNodes, (]
[;, }, private, void, traverseNodes, (, Node, parent, ), throws, IOException, {, int, keyParent, =, key, (, parent, ), ;]
[;, for, (, Node, child, =, parent, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, .]
[), ;, for, (, Node, child, =, parent, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, int, keyChild, =, key, (, child]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, int, keyChild]
[;, child, =, child, ., getNext, (, ), ), {, int, keyChild, =, key, (, child, ), ;, builder, .]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, int, keyChild, =, key, (, child, ), ;]
[;, child, =, child, ., getNext, (, ), ), {, int, keyChild, =, key, (, child, ), ;, builder, .]
[=, child, ., getNext, (, ), ), {, int, keyChild, =, key, (, child, ), ;, builder, ., append, (]
[), {, int, keyChild, =, key, (, child, ), ;, builder, ., append, (, INDENT, ), ;, builder, ., append]
[., getNext, (, ), ), {, int, keyChild, =, key, (, child, ), ;, builder, ., append, (, INDENT, )]
[;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, formatNodeName, (, keyParent, ), ), ;, builder, .]
[), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, formatNodeName, (, keyParent, ), ), ;, builder]
[;, builder, ., append, (, formatNodeName, (, keyParent, ), ), ;, builder, ., append, (, ARROW, ), ;, builder, .]
[., append, (, INDENT, ), ;, builder, ., append, (, formatNodeName, (, keyParent, ), ), ;, builder, ., append, (]
[), ;, builder, ., append, (, formatNodeName, (, keyParent, ), ), ;, builder, ., append, (, ARROW, ), ;, builder]
[;, builder, ., append, (, ARROW, ), ;, builder, ., append, (, formatNodeName, (, keyChild, ), ), ;, builder, .]
[., append, (, formatNodeName, (, keyParent, ), ), ;, builder, ., append, (, ARROW, ), ;, builder, ., append, (]
[), ;, builder, ., append, (, ARROW, ), ;, builder, ., append, (, formatNodeName, (, keyChild, ), ), ;, builder]
[), ), ;, builder, ., append, (, ARROW, ), ;, builder, ., append, (, formatNodeName, (, keyChild, ), ), ;]
[;, builder, ., append, (, formatNodeName, (, keyChild, ), ), ;, builder, ., append, (, " [weight=1];\n", ), ;, traverseNodes, (]
[., append, (, ARROW, ), ;, builder, ., append, (, formatNodeName, (, keyChild, ), ), ;, builder, ., append, (]
[), ;, builder, ., append, (, formatNodeName, (, keyChild, ), ), ;, builder, ., append, (, " [weight=1];\n", ), ;, traverseNodes]
[;, builder, ., append, (, " [weight=1];\n", ), ;, traverseNodes, (, child, ), ;, }, if, (, cfg, !=, null, &&]
[., append, (, formatNodeName, (, keyChild, ), ), ;, builder, ., append, (, " [weight=1];\n", ), ;, traverseNodes, (, child, )]
[), ;, builder, ., append, (, " [weight=1];\n", ), ;, traverseNodes, (, child, ), ;, }, if, (, cfg, !=, null]
[), ), ;, builder, ., append, (, " [weight=1];\n", ), ;, traverseNodes, (, child, ), ;, }, if, (, cfg, !=]
[;, traverseNodes, (, child, ), ;, }, if, (, cfg, !=, null, &&, cfg, ., hasNode, (, parent, ), )]
[., append, (, " [weight=1];\n", ), ;, traverseNodes, (, child, ), ;, }, if, (, cfg, !=, null, &&, cfg, .]
[), ;, traverseNodes, (, child, ), ;, }, if, (, cfg, !=, null, &&, cfg, ., hasNode, (, parent, )]
[;, }, if, (, cfg, !=, null, &&, cfg, ., hasNode, (, parent, ), ), {, List, <, DiGraphEdge, <]
[), ;, }, if, (, cfg, !=, null, &&, cfg, ., hasNode, (, parent, ), ), {, List, <, DiGraphEdge]
[), {, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, outEdges, =, cfg, ., getOutEdges, (, parent, ), ;]
[&&, cfg, ., hasNode, (, parent, ), ), {, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, outEdges, =]
[!=, null, &&, cfg, ., hasNode, (, parent, ), ), {, List, <, DiGraphEdge, <, Node, ,, Branch, >, >]
[&&, cfg, ., hasNode, (, parent, ), ), {, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, outEdges, =]
[), {, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, outEdges, =, cfg, ., getOutEdges, (, parent, ), ;]
[., hasNode, (, parent, ), ), {, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, outEdges, =, cfg, .]
[), ), {, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, outEdges, =, cfg, ., getOutEdges, (, parent, )]
[;, String, [, ], edgeList, =, new, String, [, outEdges, ., size, (, ), ], ;, for, (, int, i]
[., getOutEdges, (, parent, ), ;, String, [, ], edgeList, =, new, String, [, outEdges, ., size, (, ), ]]
[), ;, String, [, ], edgeList, =, new, String, [, outEdges, ., size, (, ), ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, edgeList, ., length, ;, i, ++, ), {, DiGraphEdge, <]
[], ;, for, (, int, i, =, 0, ;, i, <, edgeList, ., length, ;, i, ++, ), {, DiGraphEdge]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, edgeList, ., length, ;, i]
[;, i, <, edgeList, ., length, ;, i, ++, ), {, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, edge]
[;, i, ++, ), {, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, edge, =, outEdges, ., get, (, i]
[<, edgeList, ., length, ;, i, ++, ), {, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, edge, =, outEdges]
[;, i, ++, ), {, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, edge, =, outEdges, ., get, (, i]
[., length, ;, i, ++, ), {, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, edge, =, outEdges, ., get]
[), {, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, edge, =, outEdges, ., get, (, i, ), ;, DiGraphNode]
[++, ), {, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, edge, =, outEdges, ., get, (, i, ), ;]
[;, DiGraphNode, <, Node, ,, Branch, >, succ, =, edge, ., getDestination, (, ), ;, String, toNode, =, null, ;]
[., get, (, i, ), ;, DiGraphNode, <, Node, ,, Branch, >, succ, =, edge, ., getDestination, (, ), ;]
[), ;, DiGraphNode, <, Node, ,, Branch, >, succ, =, edge, ., getDestination, (, ), ;, String, toNode, =, null]
[;, String, toNode, =, null, ;, if, (, succ, ==, cfg, ., getImplicitReturn, (, ), ), {, toNode, =, "RETURN"]
[., getDestination, (, ), ;, String, toNode, =, null, ;, if, (, succ, ==, cfg, ., getImplicitReturn, (, ), )]
[;, if, (, succ, ==, cfg, ., getImplicitReturn, (, ), ), {, toNode, =, "RETURN", ;, }, else, {, int]
[), {, toNode, =, "RETURN", ;, }, else, {, int, keySucc, =, key, (, succ, ., getValue, (, ), )]
[==, cfg, ., getImplicitReturn, (, ), ), {, toNode, =, "RETURN", ;, }, else, {, int, keySucc, =, key, (]
[), {, toNode, =, "RETURN", ;, }, else, {, int, keySucc, =, key, (, succ, ., getValue, (, ), )]
[., getImplicitReturn, (, ), ), {, toNode, =, "RETURN", ;, }, else, {, int, keySucc, =, key, (, succ, .]
[=, "RETURN", ;, }, else, {, int, keySucc, =, key, (, succ, ., getValue, (, ), ), ;, toNode, =]
[;, }, else, {, int, keySucc, =, key, (, succ, ., getValue, (, ), ), ;, toNode, =, formatNodeName, (]
[;, toNode, =, formatNodeName, (, keySucc, ), ;, }, edgeList, [, i, ], =, formatNodeName, (, keyParent, ), +, ARROW]
[), ;, toNode, =, formatNodeName, (, keySucc, ), ;, }, edgeList, [, i, ], =, formatNodeName, (, keyParent, ), +]
[., getValue, (, ), ), ;, toNode, =, formatNodeName, (, keySucc, ), ;, }, edgeList, [, i, ], =, formatNodeName]
[=, formatNodeName, (, keySucc, ), ;, }, edgeList, [, i, ], =, formatNodeName, (, keyParent, ), +, ARROW, +, toNode]
[;, }, edgeList, [, i, ], =, formatNodeName, (, keyParent, ), +, ARROW, +, toNode, +, " [label=\"", +, edge, .]
[), ;, }, edgeList, [, i, ], =, formatNodeName, (, keyParent, ), +, ARROW, +, toNode, +, " [label=\"", +, edge]
[=, formatNodeName, (, keyParent, ), +, ARROW, +, toNode, +, " [label=\"", +, edge, ., getValue, (, ), ., toString, (]
[[, i, ], =, formatNodeName, (, keyParent, ), +, ARROW, +, toNode, +, " [label=\"", +, edge, ., getValue, (, )]
[], =, formatNodeName, (, keyParent, ), +, ARROW, +, toNode, +, " [label=\"", +, edge, ., getValue, (, ), ., toString]
[;, }, Arrays, ., sort, (, edgeList, ), ;, for, (, int, i, =, 0, ;, i, <, edgeList, .]
[+, "weight=0.01, color=\"red\"];\n", ;, }, Arrays, ., sort, (, edgeList, ), ;, for, (, int, i, =, 0, ;, i, <]
[+, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n", ;, }, Arrays, ., sort, (, edgeList, ), ;, for, (, int, i, =, 0, ;]
[+, "\", ", +, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n", ;, }, Arrays, ., sort, (, edgeList, ), ;, for, (, int, i, =]
[+, edge, ., getValue, (, ), ., toString, (, ), +, "\", ", +, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n", ;, }, Arrays, .]
[+, " [label=\"", +, edge, ., getValue, (, ), ., toString, (, ), +, "\", ", +, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n", ;, }]
[+, toNode, +, " [label=\"", +, edge, ., getValue, (, ), ., toString, (, ), +, "\", ", +, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n"]
[+, ARROW, +, toNode, +, " [label=\"", +, edge, ., getValue, (, ), ., toString, (, ), +, "\", ", +, "fontcolor=\"red\", "]
[), +, ARROW, +, toNode, +, " [label=\"", +, edge, ., getValue, (, ), ., toString, (, ), +, "\", ", +]
[+, toNode, +, " [label=\"", +, edge, ., getValue, (, ), ., toString, (, ), +, "\", ", +, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n"]
[+, " [label=\"", +, edge, ., getValue, (, ), ., toString, (, ), +, "\", ", +, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n", ;, }]
[+, edge, ., getValue, (, ), ., toString, (, ), +, "\", ", +, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n", ;, }, Arrays, .]
[+, "\", ", +, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n", ;, }, Arrays, ., sort, (, edgeList, ), ;, for, (, int, i, =]
[., toString, (, ), +, "\", ", +, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n", ;, }, Arrays, ., sort, (, edgeList, ), ;, for]
[., getValue, (, ), ., toString, (, ), +, "\", ", +, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n", ;, }, Arrays, ., sort, (]
[+, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n", ;, }, Arrays, ., sort, (, edgeList, ), ;, for, (, int, i, =, 0, ;]
[+, "weight=0.01, color=\"red\"];\n", ;, }, Arrays, ., sort, (, edgeList, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, }, Arrays, ., sort, (, edgeList, ), ;, for, (, int, i, =, 0, ;, i, <, edgeList, .]
[;, for, (, int, i, =, 0, ;, i, <, edgeList, ., length, ;, i, ++, ), {, builder, .]
[., sort, (, edgeList, ), ;, for, (, int, i, =, 0, ;, i, <, edgeList, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, edgeList, ., length, ;, i, ++, ), {, builder]
[;, i, <, edgeList, ., length, ;, i, ++, ), {, builder, ., append, (, INDENT, ), ;, builder, .]
[;, i, ++, ), {, builder, ., append, (, INDENT, ), ;, builder, ., append, (, edgeList, [, i, ]]
[<, edgeList, ., length, ;, i, ++, ), {, builder, ., append, (, INDENT, ), ;, builder, ., append, (]
[;, i, ++, ), {, builder, ., append, (, INDENT, ), ;, builder, ., append, (, edgeList, [, i, ]]
[., length, ;, i, ++, ), {, builder, ., append, (, INDENT, ), ;, builder, ., append, (, edgeList, []
[), {, builder, ., append, (, INDENT, ), ;, builder, ., append, (, edgeList, [, i, ], ), ;, }]
[++, ), {, builder, ., append, (, INDENT, ), ;, builder, ., append, (, edgeList, [, i, ], ), ;]
[;, builder, ., append, (, edgeList, [, i, ], ), ;, }, }, }, int, key, (, Node, n, )]
[., append, (, INDENT, ), ;, builder, ., append, (, edgeList, [, i, ], ), ;, }, }, }, int]
[), ;, builder, ., append, (, edgeList, [, i, ], ), ;, }, }, }, int, key, (, Node, n]
[;, }, }, }, int, key, (, Node, n, ), throws, IOException, {, Integer, key, =, assignments, ., get, (]
[., append, (, edgeList, [, i, ], ), ;, }, }, }, int, key, (, Node, n, ), throws, IOException]
[), ;, }, }, }, int, key, (, Node, n, ), throws, IOException, {, Integer, key, =, assignments, ., get]
[[, i, ], ), ;, }, }, }, int, key, (, Node, n, ), throws, IOException, {, Integer, key, =]
[], ), ;, }, }, }, int, key, (, Node, n, ), throws, IOException, {, Integer, key, =, assignments, .]
[;, if, (, key, ==, null, ), {, key, =, keyCount, ++, ;, assignments, ., put, (, n, ,, key]
[., get, (, n, ), ;, if, (, key, ==, null, ), {, key, =, keyCount, ++, ;, assignments, .]
[), ;, if, (, key, ==, null, ), {, key, =, keyCount, ++, ;, assignments, ., put, (, n, ,]
[), {, key, =, keyCount, ++, ;, assignments, ., put, (, n, ,, key, ), ;, builder, ., append, (]
[==, null, ), {, key, =, keyCount, ++, ;, assignments, ., put, (, n, ,, key, ), ;, builder, .]
[), {, key, =, keyCount, ++, ;, assignments, ., put, (, n, ,, key, ), ;, builder, ., append, (]
[=, keyCount, ++, ;, assignments, ., put, (, n, ,, key, ), ;, builder, ., append, (, INDENT, ), ;]
[;, assignments, ., put, (, n, ,, key, ), ;, builder, ., append, (, INDENT, ), ;, builder, ., append]
[++, ;, assignments, ., put, (, n, ,, key, ), ;, builder, ., append, (, INDENT, ), ;, builder, .]
[;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, formatNodeName, (, key, ), ), ;, builder, .]
[., put, (, n, ,, key, ), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, formatNodeName]
[,, key, ), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, formatNodeName, (, key, ), )]
[), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, formatNodeName, (, key, ), ), ;, builder]
[;, builder, ., append, (, formatNodeName, (, key, ), ), ;, builder, ., append, (, " [label=\"", ), ;, builder, .]
[., append, (, INDENT, ), ;, builder, ., append, (, formatNodeName, (, key, ), ), ;, builder, ., append, (]
[), ;, builder, ., append, (, formatNodeName, (, key, ), ), ;, builder, ., append, (, " [label=\"", ), ;, builder]
[;, builder, ., append, (, " [label=\"", ), ;, builder, ., append, (, name, (, n, ), ), ;, JSType, type]
[., append, (, formatNodeName, (, key, ), ), ;, builder, ., append, (, " [label=\"", ), ;, builder, ., append, (]
[), ;, builder, ., append, (, " [label=\"", ), ;, builder, ., append, (, name, (, n, ), ), ;, JSType]
[), ), ;, builder, ., append, (, " [label=\"", ), ;, builder, ., append, (, name, (, n, ), ), ;]
[;, builder, ., append, (, name, (, n, ), ), ;, JSType, type, =, n, ., getJSType, (, ), ;]
[., append, (, " [label=\"", ), ;, builder, ., append, (, name, (, n, ), ), ;, JSType, type, =, n]
[), ;, builder, ., append, (, name, (, n, ), ), ;, JSType, type, =, n, ., getJSType, (, )]
[;, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, !=, null, ), {, builder, ., append]
[., append, (, name, (, n, ), ), ;, JSType, type, =, n, ., getJSType, (, ), ;, if, (]
[), ;, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, !=, null, ), {, builder, .]
[), ), ;, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, !=, null, ), {, builder]
[;, if, (, type, !=, null, ), {, builder, ., append, (, " : ", ), ;, builder, ., append, (, type]
[., getJSType, (, ), ;, if, (, type, !=, null, ), {, builder, ., append, (, " : ", ), ;, builder]
[), {, builder, ., append, (, " : ", ), ;, builder, ., append, (, type, ., toString, (, ), ), ;]
[!=, null, ), {, builder, ., append, (, " : ", ), ;, builder, ., append, (, type, ., toString, (, )]
[), {, builder, ., append, (, " : ", ), ;, builder, ., append, (, type, ., toString, (, ), ), ;]
[;, builder, ., append, (, type, ., toString, (, ), ), ;, }, if, (, printAnnotations, &&, cfg, !=, null]
[., append, (, " : ", ), ;, builder, ., append, (, type, ., toString, (, ), ), ;, }, if, (]
[), ;, builder, ., append, (, type, ., toString, (, ), ), ;, }, if, (, printAnnotations, &&, cfg, !=]
[;, }, if, (, printAnnotations, &&, cfg, !=, null, &&, cfg, ., hasNode, (, n, ), ), {, Object, annotation]
[., append, (, type, ., toString, (, ), ), ;, }, if, (, printAnnotations, &&, cfg, !=, null, &&, cfg]
[), ;, }, if, (, printAnnotations, &&, cfg, !=, null, &&, cfg, ., hasNode, (, n, ), ), {, Object]
[., toString, (, ), ), ;, }, if, (, printAnnotations, &&, cfg, !=, null, &&, cfg, ., hasNode, (, n]
[), {, Object, annotation, =, cfg, ., getNode, (, n, ), ., getAnnotation, (, ), ;, if, (, annotation, !=]
[&&, cfg, ., hasNode, (, n, ), ), {, Object, annotation, =, cfg, ., getNode, (, n, ), ., getAnnotation]
[&&, cfg, !=, null, &&, cfg, ., hasNode, (, n, ), ), {, Object, annotation, =, cfg, ., getNode, (]
[&&, cfg, ., hasNode, (, n, ), ), {, Object, annotation, =, cfg, ., getNode, (, n, ), ., getAnnotation]
[!=, null, &&, cfg, ., hasNode, (, n, ), ), {, Object, annotation, =, cfg, ., getNode, (, n, )]
[&&, cfg, ., hasNode, (, n, ), ), {, Object, annotation, =, cfg, ., getNode, (, n, ), ., getAnnotation]
[), {, Object, annotation, =, cfg, ., getNode, (, n, ), ., getAnnotation, (, ), ;, if, (, annotation, !=]
[., hasNode, (, n, ), ), {, Object, annotation, =, cfg, ., getNode, (, n, ), ., getAnnotation, (, )]
[), ), {, Object, annotation, =, cfg, ., getNode, (, n, ), ., getAnnotation, (, ), ;, if, (, annotation]
[;, if, (, annotation, !=, null, ), {, builder, ., append, (, "\\n", ), ;, builder, ., append, (, annotation]
[., getAnnotation, (, ), ;, if, (, annotation, !=, null, ), {, builder, ., append, (, "\\n", ), ;, builder]
[., getNode, (, n, ), ., getAnnotation, (, ), ;, if, (, annotation, !=, null, ), {, builder, ., append]
[), ., getAnnotation, (, ), ;, if, (, annotation, !=, null, ), {, builder, ., append, (, "\\n", ), ;]
[), {, builder, ., append, (, "\\n", ), ;, builder, ., append, (, annotation, ., toString, (, ), ), ;]
[!=, null, ), {, builder, ., append, (, "\\n", ), ;, builder, ., append, (, annotation, ., toString, (, )]
[), {, builder, ., append, (, "\\n", ), ;, builder, ., append, (, annotation, ., toString, (, ), ), ;]
[;, builder, ., append, (, annotation, ., toString, (, ), ), ;, }, }, builder, ., append, (, "\"", )]
[., append, (, "\\n", ), ;, builder, ., append, (, annotation, ., toString, (, ), ), ;, }, }, builder]
[), ;, builder, ., append, (, annotation, ., toString, (, ), ), ;, }, }, builder, ., append, (, "\""]
[;, }, }, builder, ., append, (, "\"", ), ;, if, (, n, ., getJSDocInfo, (, ), !=, null, )]
[., append, (, annotation, ., toString, (, ), ), ;, }, }, builder, ., append, (, "\"", ), ;, if]
[), ;, }, }, builder, ., append, (, "\"", ), ;, if, (, n, ., getJSDocInfo, (, ), !=, null]
[., toString, (, ), ), ;, }, }, builder, ., append, (, "\"", ), ;, if, (, n, ., getJSDocInfo]
[;, if, (, n, ., getJSDocInfo, (, ), !=, null, ), {, builder, ., append, (, " color=\"green\"", ), ;, }]
[., append, (, "\"", ), ;, if, (, n, ., getJSDocInfo, (, ), !=, null, ), {, builder, ., append]
[), ;, if, (, n, ., getJSDocInfo, (, ), !=, null, ), {, builder, ., append, (, " color=\"green\"", ), ;]
[), {, builder, ., append, (, " color=\"green\"", ), ;, }, builder, ., append, (, "];\n", ), ;, }, return, key]
[!=, null, ), {, builder, ., append, (, " color=\"green\"", ), ;, }, builder, ., append, (, "];\n", ), ;, }]
[., getJSDocInfo, (, ), !=, null, ), {, builder, ., append, (, " color=\"green\"", ), ;, }, builder, ., append, (]
[), {, builder, ., append, (, " color=\"green\"", ), ;, }, builder, ., append, (, "];\n", ), ;, }, return, key]
[;, }, builder, ., append, (, "];\n", ), ;, }, return, key, ;, }, private, String, name, (, Node, n]
[., append, (, " color=\"green\"", ), ;, }, builder, ., append, (, "];\n", ), ;, }, return, key, ;, }, private]
[), ;, }, builder, ., append, (, "];\n", ), ;, }, return, key, ;, }, private, String, name, (, Node]
[;, }, return, key, ;, }, private, String, name, (, Node, n, ), {, int, type, =, n, ., getType]
[., append, (, "];\n", ), ;, }, return, key, ;, }, private, String, name, (, Node, n, ), {, int]
[), ;, }, return, key, ;, }, private, String, name, (, Node, n, ), {, int, type, =, n, .]
[;, }, private, String, name, (, Node, n, ), {, int, type, =, n, ., getType, (, ), ;, switch]
[;, switch, (, type, ), {, case, Token, ., VOID, :, return, "VOID", ;, default, :, return, Token, ., name]
[., getType, (, ), ;, switch, (, type, ), {, case, Token, ., VOID, :, return, "VOID", ;, default, :]
[), {, case, Token, ., VOID, :, return, "VOID", ;, default, :, return, Token, ., name, (, type, ), ;]
[:, return, "VOID", ;, default, :, return, Token, ., name, (, type, ), ;, }, }, private, String, formatNodeName, (]
[., VOID, :, return, "VOID", ;, default, :, return, Token, ., name, (, type, ), ;, }, }, private, String]
[;, default, :, return, Token, ., name, (, type, ), ;, }, }, private, String, formatNodeName, (, Integer, key, )]
[;, }, }, private, String, formatNodeName, (, Integer, key, ), {, return, "node", +, key, ;, }, private, void, formatPreamble]
[., name, (, type, ), ;, }, }, private, String, formatNodeName, (, Integer, key, ), {, return, "node", +, key]
[), ;, }, }, private, String, formatNodeName, (, Integer, key, ), {, return, "node", +, key, ;, }, private, void]
[;, }, private, void, formatPreamble, (, ), throws, IOException, {, builder, ., append, (, "digraph AST {\n", ), ;, builder, ., append]
[+, key, ;, }, private, void, formatPreamble, (, ), throws, IOException, {, builder, ., append, (, "digraph AST {\n", ), ;, builder]
[;, }, private, void, formatPreamble, (, ), throws, IOException, {, builder, ., append, (, "digraph AST {\n", ), ;, builder, ., append]
[;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;, }, private, void, formatConclusion, (]
[., append, (, "digraph AST {\n", ), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;]
[), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;, }, private, void, formatConclusion]
[;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;, }, private, void, formatConclusion, (, ), throws, IOException, {, builder, ., append]
[., append, (, INDENT, ), ;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;, }, private, void, formatConclusion, (, ), throws]
[), ;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;, }, private, void, formatConclusion, (, ), throws, IOException, {, builder, .]
[;, }, private, void, formatConclusion, (, ), throws, IOException, {, builder, ., append, (, "}\n", ), ;, }, public, static]
[., append, (, "node [color=lightblue2, style=filled];\n", ), ;, }, private, void, formatConclusion, (, ), throws, IOException, {, builder, ., append, (, "}\n"]
[), ;, }, private, void, formatConclusion, (, ), throws, IOException, {, builder, ., append, (, "}\n", ), ;, }, public]
[;, }, public, static, String, toDot, (, GraphvizGraph, graph, ), {, StringBuilder, builder, =, new, StringBuilder, (, ), ;, builder]
[., append, (, "}\n", ), ;, }, public, static, String, toDot, (, GraphvizGraph, graph, ), {, StringBuilder, builder, =, new]
[), ;, }, public, static, String, toDot, (, GraphvizGraph, graph, ), {, StringBuilder, builder, =, new, StringBuilder, (, ), ;]
[;, builder, ., append, (, graph, ., isDirected, (, ), ?, "digraph", :, "graph", ), ;, builder, ., append, (]
[;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, graph, ., getName, (, ), ), ;, builder]
[., append, (, graph, ., isDirected, (, ), ?, "digraph", :, "graph", ), ;, builder, ., append, (, INDENT, )]
[), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, graph, ., getName, (, ), ), ;]
[?, "digraph", :, "graph", ), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, graph, ., getName]
[., isDirected, (, ), ?, "digraph", :, "graph", ), ;, builder, ., append, (, INDENT, ), ;, builder, ., append]
[:, "graph", ), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, graph, ., getName, (, )]
[), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, graph, ., getName, (, ), ), ;]
[;, builder, ., append, (, graph, ., getName, (, ), ), ;, builder, ., append, (, " {\n", ), ;, builder]
[., append, (, INDENT, ), ;, builder, ., append, (, graph, ., getName, (, ), ), ;, builder, ., append]
[), ;, builder, ., append, (, graph, ., getName, (, ), ), ;, builder, ., append, (, " {\n", ), ;]
[;, builder, ., append, (, " {\n", ), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, "node [color=lightblue2, style=filled];\n"]
[., append, (, graph, ., getName, (, ), ), ;, builder, ., append, (, " {\n", ), ;, builder, ., append]
[), ;, builder, ., append, (, " {\n", ), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (]
[., getName, (, ), ), ;, builder, ., append, (, " {\n", ), ;, builder, ., append, (, INDENT, ), ;]
[;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;, final, String, edgeSymbol, =, graph]
[., append, (, " {\n", ), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;]
[), ;, builder, ., append, (, INDENT, ), ;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;, final, String, edgeSymbol, =]
[;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;, final, String, edgeSymbol, =, graph, ., isDirected, (, ), ?, ARROW, :]
[., append, (, INDENT, ), ;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;, final, String, edgeSymbol, =, graph, ., isDirected]
[), ;, builder, ., append, (, "node [color=lightblue2, style=filled];\n", ), ;, final, String, edgeSymbol, =, graph, ., isDirected, (, ), ?, ARROW]
[;, final, String, edgeSymbol, =, graph, ., isDirected, (, ), ?, ARROW, :, LINE, ;, List, <, GraphvizNode, >, nodes]
[., append, (, "node [color=lightblue2, style=filled];\n", ), ;, final, String, edgeSymbol, =, graph, ., isDirected, (, ), ?, ARROW, :, LINE, ;]
[), ;, final, String, edgeSymbol, =, graph, ., isDirected, (, ), ?, ARROW, :, LINE, ;, List, <, GraphvizNode, >]
[;, List, <, GraphvizNode, >, nodes, =, graph, ., getGraphvizNodes, (, ), ;, String, [, ], nodeNames, =, new, String]
[?, ARROW, :, LINE, ;, List, <, GraphvizNode, >, nodes, =, graph, ., getGraphvizNodes, (, ), ;, String, [, ]]
[., isDirected, (, ), ?, ARROW, :, LINE, ;, List, <, GraphvizNode, >, nodes, =, graph, ., getGraphvizNodes, (, )]
[:, LINE, ;, List, <, GraphvizNode, >, nodes, =, graph, ., getGraphvizNodes, (, ), ;, String, [, ], nodeNames, =]
[;, List, <, GraphvizNode, >, nodes, =, graph, ., getGraphvizNodes, (, ), ;, String, [, ], nodeNames, =, new, String]
[;, String, [, ], nodeNames, =, new, String, [, nodes, ., size, (, ), ], ;, for, (, int, i]
[., getGraphvizNodes, (, ), ;, String, [, ], nodeNames, =, new, String, [, nodes, ., size, (, ), ], ;]
[;, for, (, int, i, =, 0, ;, i, <, nodeNames, ., length, ;, i, ++, ), {, GraphvizNode, gNode]
[], ;, for, (, int, i, =, 0, ;, i, <, nodeNames, ., length, ;, i, ++, ), {, GraphvizNode]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, nodeNames, ., length, ;, i]
[;, i, <, nodeNames, ., length, ;, i, ++, ), {, GraphvizNode, gNode, =, nodes, ., get, (, i, )]
[;, i, ++, ), {, GraphvizNode, gNode, =, nodes, ., get, (, i, ), ;, nodeNames, [, i, ], =]
[<, nodeNames, ., length, ;, i, ++, ), {, GraphvizNode, gNode, =, nodes, ., get, (, i, ), ;, nodeNames]
[;, i, ++, ), {, GraphvizNode, gNode, =, nodes, ., get, (, i, ), ;, nodeNames, [, i, ], =]
[., length, ;, i, ++, ), {, GraphvizNode, gNode, =, nodes, ., get, (, i, ), ;, nodeNames, [, i]
[), {, GraphvizNode, gNode, =, nodes, ., get, (, i, ), ;, nodeNames, [, i, ], =, gNode, ., getId]
[++, ), {, GraphvizNode, gNode, =, nodes, ., get, (, i, ), ;, nodeNames, [, i, ], =, gNode, .]
[;, nodeNames, [, i, ], =, gNode, ., getId, (, ), +, " [label=\"", +, gNode, ., getLabel, (, ), +]
[., get, (, i, ), ;, nodeNames, [, i, ], =, gNode, ., getId, (, ), +, " [label=\"", +, gNode]
[), ;, nodeNames, [, i, ], =, gNode, ., getId, (, ), +, " [label=\"", +, gNode, ., getLabel, (, )]
[=, gNode, ., getId, (, ), +, " [label=\"", +, gNode, ., getLabel, (, ), +, "\" color=\"", +, gNode, ., getColor]
[[, i, ], =, gNode, ., getId, (, ), +, " [label=\"", +, gNode, ., getLabel, (, ), +, "\" color=\"", +]
[], =, gNode, ., getId, (, ), +, " [label=\"", +, gNode, ., getLabel, (, ), +, "\" color=\"", +, gNode, .]
[;, }, Arrays, ., sort, (, nodeNames, ), ;, for, (, String, nodeName, :, nodeNames, ), {, builder, ., append]
[+, "\"]", ;, }, Arrays, ., sort, (, nodeNames, ), ;, for, (, String, nodeName, :, nodeNames, ), {, builder]
[+, gNode, ., getColor, (, ), +, "\"]", ;, }, Arrays, ., sort, (, nodeNames, ), ;, for, (, String]
[+, "\" color=\"", +, gNode, ., getColor, (, ), +, "\"]", ;, }, Arrays, ., sort, (, nodeNames, ), ;, for]
[+, gNode, ., getLabel, (, ), +, "\" color=\"", +, gNode, ., getColor, (, ), +, "\"]", ;, }, Arrays, .]
[+, " [label=\"", +, gNode, ., getLabel, (, ), +, "\" color=\"", +, gNode, ., getColor, (, ), +, "\"]", ;, }]
[., getId, (, ), +, " [label=\"", +, gNode, ., getLabel, (, ), +, "\" color=\"", +, gNode, ., getColor, (, )]
[+, gNode, ., getLabel, (, ), +, "\" color=\"", +, gNode, ., getColor, (, ), +, "\"]", ;, }, Arrays, .]
[+, "\" color=\"", +, gNode, ., getColor, (, ), +, "\"]", ;, }, Arrays, ., sort, (, nodeNames, ), ;, for]
[., getLabel, (, ), +, "\" color=\"", +, gNode, ., getColor, (, ), +, "\"]", ;, }, Arrays, ., sort, (]
[+, gNode, ., getColor, (, ), +, "\"]", ;, }, Arrays, ., sort, (, nodeNames, ), ;, for, (, String]
[+, "\"]", ;, }, Arrays, ., sort, (, nodeNames, ), ;, for, (, String, nodeName, :, nodeNames, ), {, builder]
[., getColor, (, ), +, "\"]", ;, }, Arrays, ., sort, (, nodeNames, ), ;, for, (, String, nodeName, :]
[;, }, Arrays, ., sort, (, nodeNames, ), ;, for, (, String, nodeName, :, nodeNames, ), {, builder, ., append]
[;, for, (, String, nodeName, :, nodeNames, ), {, builder, ., append, (, INDENT, ), ;, builder, ., append, (]
[., sort, (, nodeNames, ), ;, for, (, String, nodeName, :, nodeNames, ), {, builder, ., append, (, INDENT, )]
[), ;, for, (, String, nodeName, :, nodeNames, ), {, builder, ., append, (, INDENT, ), ;, builder, ., append]
[), {, builder, ., append, (, INDENT, ), ;, builder, ., append, (, nodeName, ), ;, builder, ., append, (]
[;, builder, ., append, (, nodeName, ), ;, builder, ., append, (, ";\n", ), ;, }, List, <, GraphvizEdge, >]
[., append, (, INDENT, ), ;, builder, ., append, (, nodeName, ), ;, builder, ., append, (, ";\n", ), ;]
[), ;, builder, ., append, (, nodeName, ), ;, builder, ., append, (, ";\n", ), ;, }, List, <, GraphvizEdge]
[;, builder, ., append, (, ";\n", ), ;, }, List, <, GraphvizEdge, >, edges, =, graph, ., getGraphvizEdges, (, )]
[., append, (, nodeName, ), ;, builder, ., append, (, ";\n", ), ;, }, List, <, GraphvizEdge, >, edges, =]
[), ;, builder, ., append, (, ";\n", ), ;, }, List, <, GraphvizEdge, >, edges, =, graph, ., getGraphvizEdges, (]
[;, }, List, <, GraphvizEdge, >, edges, =, graph, ., getGraphvizEdges, (, ), ;, String, [, ], edgeNames, =, new]
[., append, (, ";\n", ), ;, }, List, <, GraphvizEdge, >, edges, =, graph, ., getGraphvizEdges, (, ), ;, String]
[), ;, }, List, <, GraphvizEdge, >, edges, =, graph, ., getGraphvizEdges, (, ), ;, String, [, ], edgeNames, =]
[;, String, [, ], edgeNames, =, new, String, [, edges, ., size, (, ), ], ;, for, (, int, i]
[., getGraphvizEdges, (, ), ;, String, [, ], edgeNames, =, new, String, [, edges, ., size, (, ), ], ;]
[;, for, (, int, i, =, 0, ;, i, <, edgeNames, ., length, ;, i, ++, ), {, GraphvizEdge, edge]
[], ;, for, (, int, i, =, 0, ;, i, <, edgeNames, ., length, ;, i, ++, ), {, GraphvizEdge]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, edgeNames, ., length, ;, i]
[;, i, <, edgeNames, ., length, ;, i, ++, ), {, GraphvizEdge, edge, =, edges, ., get, (, i, )]
[;, i, ++, ), {, GraphvizEdge, edge, =, edges, ., get, (, i, ), ;, edgeNames, [, i, ], =]
[<, edgeNames, ., length, ;, i, ++, ), {, GraphvizEdge, edge, =, edges, ., get, (, i, ), ;, edgeNames]
[;, i, ++, ), {, GraphvizEdge, edge, =, edges, ., get, (, i, ), ;, edgeNames, [, i, ], =]
[., length, ;, i, ++, ), {, GraphvizEdge, edge, =, edges, ., get, (, i, ), ;, edgeNames, [, i]
[), {, GraphvizEdge, edge, =, edges, ., get, (, i, ), ;, edgeNames, [, i, ], =, edge, ., getNode1Id]
[++, ), {, GraphvizEdge, edge, =, edges, ., get, (, i, ), ;, edgeNames, [, i, ], =, edge, .]
[;, edgeNames, [, i, ], =, edge, ., getNode1Id, (, ), +, edgeSymbol, +, edge, ., getNode2Id, (, ), ;]
[., get, (, i, ), ;, edgeNames, [, i, ], =, edge, ., getNode1Id, (, ), +, edgeSymbol, +, edge]
[), ;, edgeNames, [, i, ], =, edge, ., getNode1Id, (, ), +, edgeSymbol, +, edge, ., getNode2Id, (, )]
[=, edge, ., getNode1Id, (, ), +, edgeSymbol, +, edge, ., getNode2Id, (, ), ;, }, Arrays, ., sort, (]
[[, i, ], =, edge, ., getNode1Id, (, ), +, edgeSymbol, +, edge, ., getNode2Id, (, ), ;, }, Arrays]
[], =, edge, ., getNode1Id, (, ), +, edgeSymbol, +, edge, ., getNode2Id, (, ), ;, }, Arrays, ., sort]
[;, }, Arrays, ., sort, (, edgeNames, ), ;, for, (, String, edgeName, :, edgeNames, ), {, builder, ., append]
[+, edge, ., getNode2Id, (, ), ;, }, Arrays, ., sort, (, edgeNames, ), ;, for, (, String, edgeName, :]
[+, edgeSymbol, +, edge, ., getNode2Id, (, ), ;, }, Arrays, ., sort, (, edgeNames, ), ;, for, (, String]
[., getNode1Id, (, ), +, edgeSymbol, +, edge, ., getNode2Id, (, ), ;, }, Arrays, ., sort, (, edgeNames, )]
[+, edge, ., getNode2Id, (, ), ;, }, Arrays, ., sort, (, edgeNames, ), ;, for, (, String, edgeName, :]
[;, }, Arrays, ., sort, (, edgeNames, ), ;, for, (, String, edgeName, :, edgeNames, ), {, builder, ., append]
[., getNode2Id, (, ), ;, }, Arrays, ., sort, (, edgeNames, ), ;, for, (, String, edgeName, :, edgeNames, )]
[;, for, (, String, edgeName, :, edgeNames, ), {, builder, ., append, (, INDENT, ), ;, builder, ., append, (]
[., sort, (, edgeNames, ), ;, for, (, String, edgeName, :, edgeNames, ), {, builder, ., append, (, INDENT, )]
[), ;, for, (, String, edgeName, :, edgeNames, ), {, builder, ., append, (, INDENT, ), ;, builder, ., append]
[), {, builder, ., append, (, INDENT, ), ;, builder, ., append, (, edgeName, ), ;, builder, ., append, (]
[;, builder, ., append, (, edgeName, ), ;, builder, ., append, (, ";\n", ), ;, }, builder, ., append, (]
[., append, (, INDENT, ), ;, builder, ., append, (, edgeName, ), ;, builder, ., append, (, ";\n", ), ;]
[), ;, builder, ., append, (, edgeName, ), ;, builder, ., append, (, ";\n", ), ;, }, builder, ., append]
[;, builder, ., append, (, ";\n", ), ;, }, builder, ., append, (, "}\n", ), ;, return, builder, ., toString]
[., append, (, edgeName, ), ;, builder, ., append, (, ";\n", ), ;, }, builder, ., append, (, "}\n", )]
[), ;, builder, ., append, (, ";\n", ), ;, }, builder, ., append, (, "}\n", ), ;, return, builder, .]
[;, }, builder, ., append, (, "}\n", ), ;, return, builder, ., toString, (, ), ;, }, }]
[., append, (, ";\n", ), ;, }, builder, ., append, (, "}\n", ), ;, return, builder, ., toString, (, )]
[), ;, }, builder, ., append, (, "}\n", ), ;, return, builder, ., toString, (, ), ;, }, }]
[;, return, builder, ., toString, (, ), ;, }, }]
[., append, (, "}\n", ), ;, return, builder, ., toString, (, ), ;, }, }]
[), ;, return, builder, ., toString, (, ), ;, }, }]
[;, }, }]
[., toString, (, ), ;, }, }]
