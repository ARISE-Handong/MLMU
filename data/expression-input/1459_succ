[;, private, static, final, String, STRING_ALIAS_PREFIX, =, "$$S_", ;, private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph, ;, private]
[., getLogger, (, AliasStrings, ., class, ., getName, (, ), ), ;, private, static, final, String, STRING_ALIAS_PREFIX, =, "$$S_", ;]
[), ;, private, static, final, String, STRING_ALIAS_PREFIX, =, "$$S_", ;, private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph, ;]
[., getName, (, ), ), ;, private, static, final, String, STRING_ALIAS_PREFIX, =, "$$S_", ;, private, final, AbstractCompiler, compiler, ;, private]
[;, private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph, ;, private, Matcher, blacklist, =, null, ;, private, final, Set]
[;, private, final, Set, <, String, >, aliasableStrings, ;, private, final, boolean, outputStringUsage, ;, private, final, SortedMap, <, String, ,]
[;, private, final, Set, <, String, >, usedHashedAliases, =, new, LinkedHashSet, <, String, >, (, ), ;, private, final, Map]
[., newTreeMap, (, ), ;, private, final, Set, <, String, >, usedHashedAliases, =, new, LinkedHashSet, <, String, >, (, )]
[;, private, final, Map, <, JSModule, ,, Node, >, moduleVarParentMap, =, new, HashMap, <, JSModule, ,, Node, >, (, )]
[;, long, unitTestHashReductionMask, =, ~, 0L, ;, AliasStrings, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, Set, <, String, >, strings]
[;, AliasStrings, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, Set, <, String, >, strings, ,, String, blacklistRegex, ,, boolean, outputStringUsage]
[;, AliasStrings, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, Set, <, String, >, strings, ,, String, blacklistRegex, ,, boolean, outputStringUsage]
[=, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length]
[., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., aliasableStrings, =, strings, ;, if, (, blacklistRegex]
[;, this, ., moduleGraph, =, moduleGraph, ;, this, ., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length, (, )]
[=, moduleGraph, ;, this, ., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length, (, ), !=, 0, ), {]
[., moduleGraph, =, moduleGraph, ;, this, ., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length, (, ), !=, 0]
[;, this, ., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length, (, ), !=, 0, ), {, this, .]
[=, strings, ;, if, (, blacklistRegex, ., length, (, ), !=, 0, ), {, this, ., blacklist, =, Pattern, .]
[., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length, (, ), !=, 0, ), {, this, ., blacklist, =]
[;, if, (, blacklistRegex, ., length, (, ), !=, 0, ), {, this, ., blacklist, =, Pattern, ., compile, (]
[), {, this, ., blacklist, =, Pattern, ., compile, (, blacklistRegex, ), ., matcher, (, "", ), ;, }, else]
[!=, 0, ), {, this, ., blacklist, =, Pattern, ., compile, (, blacklistRegex, ), ., matcher, (, "", ), ;]
[., length, (, ), !=, 0, ), {, this, ., blacklist, =, Pattern, ., compile, (, blacklistRegex, ), ., matcher]
[), {, this, ., blacklist, =, Pattern, ., compile, (, blacklistRegex, ), ., matcher, (, "", ), ;, }, else]
[=, Pattern, ., compile, (, blacklistRegex, ), ., matcher, (, "", ), ;, }, else, {, this, ., blacklist, =]
[., blacklist, =, Pattern, ., compile, (, blacklistRegex, ), ., matcher, (, "", ), ;, }, else, {, this, .]
[;, }, else, {, this, ., blacklist, =, null, ;, }, this, ., outputStringUsage, =, outputStringUsage, ;, }, @, Override]
[., matcher, (, "", ), ;, }, else, {, this, ., blacklist, =, null, ;, }, this, ., outputStringUsage, =]
[., compile, (, blacklistRegex, ), ., matcher, (, "", ), ;, }, else, {, this, ., blacklist, =, null, ;]
[), ., matcher, (, "", ), ;, }, else, {, this, ., blacklist, =, null, ;, }, this, ., outputStringUsage]
[), ;, }, else, {, this, ., blacklist, =, null, ;, }, this, ., outputStringUsage, =, outputStringUsage, ;, }, @]
[=, null, ;, }, this, ., outputStringUsage, =, outputStringUsage, ;, }, @, Override, public, void, process, (, Node, externs, ,]
[., blacklist, =, null, ;, }, this, ., outputStringUsage, =, outputStringUsage, ;, }, @, Override, public, void, process, (, Node]
[;, }, this, ., outputStringUsage, =, outputStringUsage, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[=, outputStringUsage, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine]
[., outputStringUsage, =, outputStringUsage, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (, "Aliasing common strings"]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, replaceStringsWithAliases, (, ), ;, addAliasDeclarationNodes, (, ), ;]
[., fine, (, "Aliasing common strings", ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, replaceStringsWithAliases, (, )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, replaceStringsWithAliases, (, ), ;, addAliasDeclarationNodes, (, )]
[;, replaceStringsWithAliases, (, ), ;, addAliasDeclarationNodes, (, ), ;, if, (, outputStringUsage, ), {, outputStringUsage, (, ), ;, }, }]
[., traverse, (, compiler, ,, root, ,, this, ), ;, replaceStringsWithAliases, (, ), ;, addAliasDeclarationNodes, (, ), ;, if, (]
[,, root, ,, this, ), ;, replaceStringsWithAliases, (, ), ;, addAliasDeclarationNodes, (, ), ;, if, (, outputStringUsage, ), {, outputStringUsage]
[,, this, ), ;, replaceStringsWithAliases, (, ), ;, addAliasDeclarationNodes, (, ), ;, if, (, outputStringUsage, ), {, outputStringUsage, (, )]
[), ;, replaceStringsWithAliases, (, ), ;, addAliasDeclarationNodes, (, ), ;, if, (, outputStringUsage, ), {, outputStringUsage, (, ), ;, }]
[;, addAliasDeclarationNodes, (, ), ;, if, (, outputStringUsage, ), {, outputStringUsage, (, ), ;, }, }, @, Override, public, void]
[;, if, (, outputStringUsage, ), {, outputStringUsage, (, ), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, t]
[), {, outputStringUsage, (, ), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[;, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), {, String, str, =, n, ., getString, (, ), ;, if, (, "undefined", ., equals, (, str, ), )]
[&&, !, parent, ., isRegExp, (, ), ), {, String, str, =, n, ., getString, (, ), ;, if, (]
[&&, !, parent, ., isGetProp, (, ), &&, !, parent, ., isRegExp, (, ), ), {, String, str, =, n]
[., isString, (, ), &&, !, parent, ., isGetProp, (, ), &&, !, parent, ., isRegExp, (, ), ), {]
[&&, !, parent, ., isRegExp, (, ), ), {, String, str, =, n, ., getString, (, ), ;, if, (]
[&&, !, parent, ., isRegExp, (, ), ), {, String, str, =, n, ., getString, (, ), ;, if, (]
[., isGetProp, (, ), &&, !, parent, ., isRegExp, (, ), ), {, String, str, =, n, ., getString, (]
[), {, String, str, =, n, ., getString, (, ), ;, if, (, "undefined", ., equals, (, str, ), )]
[), {, String, str, =, n, ., getString, (, ), ;, if, (, "undefined", ., equals, (, str, ), )]
[., isRegExp, (, ), ), {, String, str, =, n, ., getString, (, ), ;, if, (, "undefined", ., equals]
[;, if, (, "undefined", ., equals, (, str, ), ), {, return, ;, }, if, (, blacklist, !=, null, &&]
[., getString, (, ), ;, if, (, "undefined", ., equals, (, str, ), ), {, return, ;, }, if, (]
[), {, return, ;, }, if, (, blacklist, !=, null, &&, blacklist, ., reset, (, str, ), ., find, (]
[., equals, (, str, ), ), {, return, ;, }, if, (, blacklist, !=, null, &&, blacklist, ., reset, (]
[), ), {, return, ;, }, if, (, blacklist, !=, null, &&, blacklist, ., reset, (, str, ), ., find]
[), {, return, ;, }, if, (, aliasableStrings, ==, null, ||, aliasableStrings, ., contains, (, str, ), ), {, StringOccurrence]
[&&, blacklist, ., reset, (, str, ), ., find, (, ), ), {, return, ;, }, if, (, aliasableStrings, ==]
[!=, null, &&, blacklist, ., reset, (, str, ), ., find, (, ), ), {, return, ;, }, if, (]
[&&, blacklist, ., reset, (, str, ), ., find, (, ), ), {, return, ;, }, if, (, aliasableStrings, ==]
[), {, return, ;, }, if, (, aliasableStrings, ==, null, ||, aliasableStrings, ., contains, (, str, ), ), {, StringOccurrence]
[., find, (, ), ), {, return, ;, }, if, (, aliasableStrings, ==, null, ||, aliasableStrings, ., contains, (, str]
[., reset, (, str, ), ., find, (, ), ), {, return, ;, }, if, (, aliasableStrings, ==, null, ||]
[), ., find, (, ), ), {, return, ;, }, if, (, aliasableStrings, ==, null, ||, aliasableStrings, ., contains, (]
[), {, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (, str, )]
[||, aliasableStrings, ., contains, (, str, ), ), {, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent, ), ;]
[==, null, ||, aliasableStrings, ., contains, (, str, ), ), {, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent]
[||, aliasableStrings, ., contains, (, str, ), ), {, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent, ), ;]
[), {, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (, str, )]
[., contains, (, str, ), ), {, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent, ), ;, StringInfo, info]
[), ), {, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (, str]
[;, StringInfo, info, =, getOrCreateStringInfo, (, str, ), ;, info, ., occurrences, ., add, (, occurrence, ), ;, info, .]
[,, parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (, str, ), ;, info, ., occurrences, ., add, (, occurrence, )]
[), ;, StringInfo, info, =, getOrCreateStringInfo, (, str, ), ;, info, ., occurrences, ., add, (, occurrence, ), ;, info]
[;, info, ., occurrences, ., add, (, occurrence, ), ;, info, ., numOccurrences, ++, ;, if, (, t, ., inGlobalScope]
[), ;, info, ., occurrences, ., add, (, occurrence, ), ;, info, ., numOccurrences, ++, ;, if, (, t, .]
[;, info, ., numOccurrences, ++, ;, if, (, t, ., inGlobalScope, (, ), ||, isInThrowExpression, (, n, ), ), {]
[., add, (, occurrence, ), ;, info, ., numOccurrences, ++, ;, if, (, t, ., inGlobalScope, (, ), ||, isInThrowExpression]
[., occurrences, ., add, (, occurrence, ), ;, info, ., numOccurrences, ++, ;, if, (, t, ., inGlobalScope, (, )]
[), ;, info, ., numOccurrences, ++, ;, if, (, t, ., inGlobalScope, (, ), ||, isInThrowExpression, (, n, ), )]
[;, if, (, t, ., inGlobalScope, (, ), ||, isInThrowExpression, (, n, ), ), {, info, ., numOccurrencesInfrequentlyExecuted, ++, ;]
[++, ;, if, (, t, ., inGlobalScope, (, ), ||, isInThrowExpression, (, n, ), ), {, info, ., numOccurrencesInfrequentlyExecuted, ++]
[., numOccurrences, ++, ;, if, (, t, ., inGlobalScope, (, ), ||, isInThrowExpression, (, n, ), ), {, info, .]
[), {, info, ., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =, t, ., getModule, (, ), ;, if, (, info]
[||, isInThrowExpression, (, n, ), ), {, info, ., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =, t, ., getModule, (]
[., inGlobalScope, (, ), ||, isInThrowExpression, (, n, ), ), {, info, ., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =]
[), {, info, ., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =, t, ., getModule, (, ), ;, if, (, info]
[), ), {, info, ., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =, t, ., getModule, (, ), ;, if, (]
[;, }, JSModule, module, =, t, ., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, ), {]
[++, ;, }, JSModule, module, =, t, ., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, )]
[., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =, t, ., getModule, (, ), ;, if, (, info, ., numOccurrences, !=]
[;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=]
[., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (, module, !=, null, &&]
[), {, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&]
[!=, 1, ), {, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, .]
[., numOccurrences, !=, 1, ), {, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=]
[), {, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&]
[), {, module, =, moduleGraph, ., getDeepestCommonDependency, (, module, ,, info, ., moduleToContainDecl, ), ;, }, else, {, return, ;]
[&&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {, module, =, moduleGraph, ., getDeepestCommonDependency, (]
[&&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {]
[&&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,]
[!=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (]
[&&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,]
[&&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {]
[!=, null, &&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, )]
[., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,, info, .]
[&&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {]
[&&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {, module, =, moduleGraph, ., getDeepestCommonDependency, (]
[!=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {, module, =]
[&&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {, module, =, moduleGraph, ., getDeepestCommonDependency, (]
[., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {, module, =, moduleGraph, .]
[), {, module, =, moduleGraph, ., getDeepestCommonDependency, (, module, ,, info, ., moduleToContainDecl, ), ;, }, else, {, return, ;]
[), {, module, =, moduleGraph, ., getDeepestCommonDependency, (, module, ,, info, ., moduleToContainDecl, ), ;, }, else, {, return, ;]
[., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {, module, =, moduleGraph, ., getDeepestCommonDependency, (, module, ,, info]
[,, info, ., moduleToContainDecl, ), ), {, module, =, moduleGraph, ., getDeepestCommonDependency, (, module, ,, info, ., moduleToContainDecl, ), ;]
[), ), {, module, =, moduleGraph, ., getDeepestCommonDependency, (, module, ,, info, ., moduleToContainDecl, ), ;, }, else, {, return]
[., moduleToContainDecl, ), ), {, module, =, moduleGraph, ., getDeepestCommonDependency, (, module, ,, info, ., moduleToContainDecl, ), ;, }, else]
[=, moduleGraph, ., getDeepestCommonDependency, (, module, ,, info, ., moduleToContainDecl, ), ;, }, else, {, return, ;, }, }, Node]
[;, }, else, {, return, ;, }, }, Node, varParent, =, moduleVarParentMap, ., get, (, module, ), ;, if, (]
[., getDeepestCommonDependency, (, module, ,, info, ., moduleToContainDecl, ), ;, }, else, {, return, ;, }, }, Node, varParent, =]
[,, info, ., moduleToContainDecl, ), ;, }, else, {, return, ;, }, }, Node, varParent, =, moduleVarParentMap, ., get, (]
[), ;, }, else, {, return, ;, }, }, Node, varParent, =, moduleVarParentMap, ., get, (, module, ), ;, if]
[., moduleToContainDecl, ), ;, }, else, {, return, ;, }, }, Node, varParent, =, moduleVarParentMap, ., get, (, module, )]
[;, if, (, varParent, ==, null, ), {, varParent, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, ., put]
[., get, (, module, ), ;, if, (, varParent, ==, null, ), {, varParent, =, compiler, ., getNodeForCodeInsertion, (, module]
[), ;, if, (, varParent, ==, null, ), {, varParent, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, .]
[), {, varParent, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, ., put, (, module, ,, varParent, ), ;]
[==, null, ), {, varParent, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, ., put, (, module, ,, varParent]
[), {, varParent, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, ., put, (, module, ,, varParent, ), ;]
[=, compiler, ., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, ., put, (, module, ,, varParent, ), ;, }, info, .]
[;, moduleVarParentMap, ., put, (, module, ,, varParent, ), ;, }, info, ., moduleToContainDecl, =, module, ;, info, ., parentForNewVarDecl]
[., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, ., put, (, module, ,, varParent, ), ;, }, info, ., moduleToContainDecl, =]
[), ;, moduleVarParentMap, ., put, (, module, ,, varParent, ), ;, }, info, ., moduleToContainDecl, =, module, ;, info, .]
[;, }, info, ., moduleToContainDecl, =, module, ;, info, ., parentForNewVarDecl, =, varParent, ;, info, ., siblingToInsertVarDeclBefore, =, varParent, .]
[., put, (, module, ,, varParent, ), ;, }, info, ., moduleToContainDecl, =, module, ;, info, ., parentForNewVarDecl, =, varParent]
[,, varParent, ), ;, }, info, ., moduleToContainDecl, =, module, ;, info, ., parentForNewVarDecl, =, varParent, ;, info, ., siblingToInsertVarDeclBefore]
[), ;, }, info, ., moduleToContainDecl, =, module, ;, info, ., parentForNewVarDecl, =, varParent, ;, info, ., siblingToInsertVarDeclBefore, =, varParent]
[=, module, ;, info, ., parentForNewVarDecl, =, varParent, ;, info, ., siblingToInsertVarDeclBefore, =, varParent, ., getFirstChild, (, ), ;, }]
[., moduleToContainDecl, =, module, ;, info, ., parentForNewVarDecl, =, varParent, ;, info, ., siblingToInsertVarDeclBefore, =, varParent, ., getFirstChild, (, )]
[;, info, ., parentForNewVarDecl, =, varParent, ;, info, ., siblingToInsertVarDeclBefore, =, varParent, ., getFirstChild, (, ), ;, }, }, }]
[=, varParent, ;, info, ., siblingToInsertVarDeclBefore, =, varParent, ., getFirstChild, (, ), ;, }, }, }, private, StringInfo, getOrCreateStringInfo, (]
[., parentForNewVarDecl, =, varParent, ;, info, ., siblingToInsertVarDeclBefore, =, varParent, ., getFirstChild, (, ), ;, }, }, }, private, StringInfo]
[;, info, ., siblingToInsertVarDeclBefore, =, varParent, ., getFirstChild, (, ), ;, }, }, }, private, StringInfo, getOrCreateStringInfo, (, String, string]
[=, varParent, ., getFirstChild, (, ), ;, }, }, }, private, StringInfo, getOrCreateStringInfo, (, String, string, ), {, StringInfo, info]
[., siblingToInsertVarDeclBefore, =, varParent, ., getFirstChild, (, ), ;, }, }, }, private, StringInfo, getOrCreateStringInfo, (, String, string, ), {]
[;, }, }, }, private, StringInfo, getOrCreateStringInfo, (, String, string, ), {, StringInfo, info, =, stringInfoMap, ., get, (, string]
[., getFirstChild, (, ), ;, }, }, }, private, StringInfo, getOrCreateStringInfo, (, String, string, ), {, StringInfo, info, =, stringInfoMap]
[;, if, (, info, ==, null, ), {, info, =, new, StringInfo, (, stringInfoMap, ., size, (, ), ), ;]
[., get, (, string, ), ;, if, (, info, ==, null, ), {, info, =, new, StringInfo, (, stringInfoMap, .]
[), ;, if, (, info, ==, null, ), {, info, =, new, StringInfo, (, stringInfoMap, ., size, (, ), )]
[), {, info, =, new, StringInfo, (, stringInfoMap, ., size, (, ), ), ;, stringInfoMap, ., put, (, string, ,]
[==, null, ), {, info, =, new, StringInfo, (, stringInfoMap, ., size, (, ), ), ;, stringInfoMap, ., put, (]
[), {, info, =, new, StringInfo, (, stringInfoMap, ., size, (, ), ), ;, stringInfoMap, ., put, (, string, ,]
[=, new, StringInfo, (, stringInfoMap, ., size, (, ), ), ;, stringInfoMap, ., put, (, string, ,, info, ), ;]
[;, stringInfoMap, ., put, (, string, ,, info, ), ;, }, return, info, ;, }, private, static, boolean, isInThrowExpression, (]
[), ;, stringInfoMap, ., put, (, string, ,, info, ), ;, }, return, info, ;, }, private, static, boolean, isInThrowExpression]
[., size, (, ), ), ;, stringInfoMap, ., put, (, string, ,, info, ), ;, }, return, info, ;, }]
[;, }, return, info, ;, }, private, static, boolean, isInThrowExpression, (, Node, n, ), {, for, (, Node, ancestor, :]
[., put, (, string, ,, info, ), ;, }, return, info, ;, }, private, static, boolean, isInThrowExpression, (, Node, n]
[,, info, ), ;, }, return, info, ;, }, private, static, boolean, isInThrowExpression, (, Node, n, ), {, for, (]
[), ;, }, return, info, ;, }, private, static, boolean, isInThrowExpression, (, Node, n, ), {, for, (, Node, ancestor]
[;, }, private, static, boolean, isInThrowExpression, (, Node, n, ), {, for, (, Node, ancestor, :, n, ., getAncestors, (]
[), {, switch, (, ancestor, ., getType, (, ), ), {, case, Token, ., THROW, :, return, true, ;, case]
[., getAncestors, (, ), ), {, switch, (, ancestor, ., getType, (, ), ), {, case, Token, ., THROW, :]
[), {, case, Token, ., THROW, :, return, true, ;, case, Token, ., IF, :, case, Token, ., WHILE, :]
[., getType, (, ), ), {, case, Token, ., THROW, :, return, true, ;, case, Token, ., IF, :, case]
[:, return, true, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[., THROW, :, return, true, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO]
[;, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR]
[:, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., SWITCH]
[., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, case, Token]
[:, case, Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., SWITCH, :, case, Token, ., CASE]
[., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., SWITCH, :, case, Token]
[:, case, Token, ., FOR, :, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., DEFAULT_CASE]
[., DO, :, case, Token, ., FOR, :, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token]
[:, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., BLOCK]
[., FOR, :, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., DEFAULT_CASE, :, case, Token]
[:, case, Token, ., CASE, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., BLOCK, :, case, Token, ., SCRIPT]
[., SWITCH, :, case, Token, ., CASE, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., BLOCK, :, case, Token]
[:, case, Token, ., DEFAULT_CASE, :, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FUNCTION]
[., CASE, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token]
[:, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FUNCTION, :, case, Token, ., TRY]
[., DEFAULT_CASE, :, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FUNCTION, :, case, Token]
[:, case, Token, ., SCRIPT, :, case, Token, ., FUNCTION, :, case, Token, ., TRY, :, case, Token, ., CATCH]
[., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FUNCTION, :, case, Token, ., TRY, :, case, Token]
[:, case, Token, ., FUNCTION, :, case, Token, ., TRY, :, case, Token, ., CATCH, :, case, Token, ., RETURN]
[., SCRIPT, :, case, Token, ., FUNCTION, :, case, Token, ., TRY, :, case, Token, ., CATCH, :, case, Token]
[:, case, Token, ., TRY, :, case, Token, ., CATCH, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT]
[., FUNCTION, :, case, Token, ., TRY, :, case, Token, ., CATCH, :, case, Token, ., RETURN, :, case, Token]
[:, case, Token, ., CATCH, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, return, false, ;, }]
[., TRY, :, case, Token, ., CATCH, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, return, false]
[:, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, return, false, ;, }, }, return, false, ;, }]
[., CATCH, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, return, false, ;, }, }, return, false]
[:, case, Token, ., EXPR_RESULT, :, return, false, ;, }, }, return, false, ;, }, private, void, replaceStringsWithAliases, (, )]
[., RETURN, :, case, Token, ., EXPR_RESULT, :, return, false, ;, }, }, return, false, ;, }, private, void, replaceStringsWithAliases]
[:, return, false, ;, }, }, return, false, ;, }, private, void, replaceStringsWithAliases, (, ), {, for, (, Entry, <]
[., EXPR_RESULT, :, return, false, ;, }, }, return, false, ;, }, private, void, replaceStringsWithAliases, (, ), {, for, (]
[;, }, }, return, false, ;, }, private, void, replaceStringsWithAliases, (, ), {, for, (, Entry, <, String, ,, StringInfo]
[;, }, private, void, replaceStringsWithAliases, (, ), {, for, (, Entry, <, String, ,, StringInfo, >, entry, :, stringInfoMap, .]
[), {, String, literal, =, entry, ., getKey, (, ), ;, StringInfo, info, =, entry, ., getValue, (, ), ;]
[., entrySet, (, ), ), {, String, literal, =, entry, ., getKey, (, ), ;, StringInfo, info, =, entry, .]
[;, StringInfo, info, =, entry, ., getValue, (, ), ;, if, (, shouldReplaceWithAlias, (, literal, ,, info, ), ), {]
[., getKey, (, ), ;, StringInfo, info, =, entry, ., getValue, (, ), ;, if, (, shouldReplaceWithAlias, (, literal, ,]
[;, if, (, shouldReplaceWithAlias, (, literal, ,, info, ), ), {, for, (, StringOccurrence, occurrence, :, info, ., occurrences, )]
[., getValue, (, ), ;, if, (, shouldReplaceWithAlias, (, literal, ,, info, ), ), {, for, (, StringOccurrence, occurrence, :]
[), {, for, (, StringOccurrence, occurrence, :, info, ., occurrences, ), {, replaceStringWithAliasName, (, occurrence, ,, info, ., getVariableName, (]
[,, info, ), ), {, for, (, StringOccurrence, occurrence, :, info, ., occurrences, ), {, replaceStringWithAliasName, (, occurrence, ,, info]
[), ), {, for, (, StringOccurrence, occurrence, :, info, ., occurrences, ), {, replaceStringWithAliasName, (, occurrence, ,, info, ., getVariableName]
[), {, replaceStringWithAliasName, (, occurrence, ,, info, ., getVariableName, (, literal, ), ,, info, ), ;, }, }, }, }]
[., occurrences, ), {, replaceStringWithAliasName, (, occurrence, ,, info, ., getVariableName, (, literal, ), ,, info, ), ;, }, }]
[;, }, }, }, }, private, void, addAliasDeclarationNodes, (, ), {, for, (, Entry, <, String, ,, StringInfo, >, entry]
[,, info, ., getVariableName, (, literal, ), ,, info, ), ;, }, }, }, }, private, void, addAliasDeclarationNodes, (, )]
[,, info, ), ;, }, }, }, }, private, void, addAliasDeclarationNodes, (, ), {, for, (, Entry, <, String, ,]
[., getVariableName, (, literal, ), ,, info, ), ;, }, }, }, }, private, void, addAliasDeclarationNodes, (, ), {, for]
[), ,, info, ), ;, }, }, }, }, private, void, addAliasDeclarationNodes, (, ), {, for, (, Entry, <, String]
[), ;, }, }, }, }, private, void, addAliasDeclarationNodes, (, ), {, for, (, Entry, <, String, ,, StringInfo, >]
[), {, StringInfo, info, =, entry, ., getValue, (, ), ;, if, (, !, info, ., isAliased, ), {, continue]
[., entrySet, (, ), ), {, StringInfo, info, =, entry, ., getValue, (, ), ;, if, (, !, info, .]
[;, if, (, !, info, ., isAliased, ), {, continue, ;, }, String, alias, =, info, ., getVariableName, (, entry]
[., getValue, (, ), ;, if, (, !, info, ., isAliased, ), {, continue, ;, }, String, alias, =, info]
[), {, continue, ;, }, String, alias, =, info, ., getVariableName, (, entry, ., getKey, (, ), ), ;, Node]
[), {, continue, ;, }, String, alias, =, info, ., getVariableName, (, entry, ., getKey, (, ), ), ;, Node]
[., isAliased, ), {, continue, ;, }, String, alias, =, info, ., getVariableName, (, entry, ., getKey, (, ), )]
[;, Node, var, =, IR, ., var, (, IR, ., name, (, alias, ), ,, IR, ., string, (, entry]
[., getVariableName, (, entry, ., getKey, (, ), ), ;, Node, var, =, IR, ., var, (, IR, ., name]
[), ;, Node, var, =, IR, ., var, (, IR, ., name, (, alias, ), ,, IR, ., string, (]
[., getKey, (, ), ), ;, Node, var, =, IR, ., var, (, IR, ., name, (, alias, ), ,]
[;, if, (, info, ., siblingToInsertVarDeclBefore, ==, null, ), {, info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }]
[., var, (, IR, ., name, (, alias, ), ,, IR, ., string, (, entry, ., getKey, (, ), )]
[,, IR, ., string, (, entry, ., getKey, (, ), ), ), ;, if, (, info, ., siblingToInsertVarDeclBefore, ==, null]
[., name, (, alias, ), ,, IR, ., string, (, entry, ., getKey, (, ), ), ), ;, if, (]
[), ,, IR, ., string, (, entry, ., getKey, (, ), ), ), ;, if, (, info, ., siblingToInsertVarDeclBefore, ==]
[), ;, if, (, info, ., siblingToInsertVarDeclBefore, ==, null, ), {, info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;]
[., string, (, entry, ., getKey, (, ), ), ), ;, if, (, info, ., siblingToInsertVarDeclBefore, ==, null, ), {]
[), ), ;, if, (, info, ., siblingToInsertVarDeclBefore, ==, null, ), {, info, ., parentForNewVarDecl, ., addChildToFront, (, var, )]
[., getKey, (, ), ), ), ;, if, (, info, ., siblingToInsertVarDeclBefore, ==, null, ), {, info, ., parentForNewVarDecl, .]
[), {, info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }, else, {, info, ., parentForNewVarDecl, ., addChildBefore, (]
[==, null, ), {, info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }, else, {, info, ., parentForNewVarDecl, .]
[., siblingToInsertVarDeclBefore, ==, null, ), {, info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }, else, {, info, .]
[), {, info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }, else, {, info, ., parentForNewVarDecl, ., addChildBefore, (]
[;, }, else, {, info, ., parentForNewVarDecl, ., addChildBefore, (, var, ,, info, ., siblingToInsertVarDeclBefore, ), ;, }, compiler, .]
[., addChildToFront, (, var, ), ;, }, else, {, info, ., parentForNewVarDecl, ., addChildBefore, (, var, ,, info, ., siblingToInsertVarDeclBefore]
[., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }, else, {, info, ., parentForNewVarDecl, ., addChildBefore, (, var, ,, info]
[), ;, }, else, {, info, ., parentForNewVarDecl, ., addChildBefore, (, var, ,, info, ., siblingToInsertVarDeclBefore, ), ;, }, compiler]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, static, boolean, shouldReplaceWithAlias, (, String, str, ,, StringInfo, info]
[., addChildBefore, (, var, ,, info, ., siblingToInsertVarDeclBefore, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private]
[., parentForNewVarDecl, ., addChildBefore, (, var, ,, info, ., siblingToInsertVarDeclBefore, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }]
[,, info, ., siblingToInsertVarDeclBefore, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, static, boolean, shouldReplaceWithAlias, (]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, static, boolean, shouldReplaceWithAlias, (, String, str, ,, StringInfo]
[., siblingToInsertVarDeclBefore, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, static, boolean, shouldReplaceWithAlias, (, String, str]
[;, }, }, private, static, boolean, shouldReplaceWithAlias, (, String, str, ,, StringInfo, info, ), {, if, (, info, ., numOccurrences]
[., reportCodeChange, (, ), ;, }, }, private, static, boolean, shouldReplaceWithAlias, (, String, str, ,, StringInfo, info, ), {, if]
[), {, return, true, ;, }, int, sizeOfLiteral, =, 2, +, str, ., length, (, ), ;, int, sizeOfStrings, =]
[>, info, ., numOccurrencesInfrequentlyExecuted, ), {, return, true, ;, }, int, sizeOfLiteral, =, 2, +, str, ., length, (, )]
[., numOccurrences, >, info, ., numOccurrencesInfrequentlyExecuted, ), {, return, true, ;, }, int, sizeOfLiteral, =, 2, +, str, ., length]
[), {, return, true, ;, }, int, sizeOfLiteral, =, 2, +, str, ., length, (, ), ;, int, sizeOfStrings, =]
[., numOccurrencesInfrequentlyExecuted, ), {, return, true, ;, }, int, sizeOfLiteral, =, 2, +, str, ., length, (, ), ;, int]
[;, }, int, sizeOfLiteral, =, 2, +, str, ., length, (, ), ;, int, sizeOfStrings, =, info, ., numOccurrences, *]
[;, int, sizeOfStrings, =, info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +]
[+, str, ., length, (, ), ;, int, sizeOfStrings, =, info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3]
[;, int, sizeOfStrings, =, info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +]
[., length, (, ), ;, int, sizeOfStrings, =, info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int]
[;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +, info, ., numOccurrences, *, sizeOfVariable]
[*, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +, info, ., numOccurrences]
[., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +, info]
[;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +, info, ., numOccurrences, *, sizeOfVariable]
[;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +, info, ., numOccurrences, *, sizeOfVariable, ;, return, sizeOfAliases, <, sizeOfStrings]
[;, return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, )]
[+, info, ., numOccurrences, *, sizeOfVariable, ;, return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,]
[+, sizeOfLiteral, +, info, ., numOccurrences, *, sizeOfVariable, ;, return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence]
[+, sizeOfVariable, +, sizeOfLiteral, +, info, ., numOccurrences, *, sizeOfVariable, ;, return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName]
[+, sizeOfLiteral, +, info, ., numOccurrences, *, sizeOfVariable, ;, return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence]
[+, info, ., numOccurrences, *, sizeOfVariable, ;, return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,]
[;, return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, )]
[*, sizeOfVariable, ;, return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo]
[., numOccurrences, *, sizeOfVariable, ;, return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name]
[;, return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, )]
[;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, ), {, occurrence, ., parent, .]
[<, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, ), {, occurrence, .]
[;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, ), {, occurrence, ., parent, .]
[;, info, ., isAliased, =, true, ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, outputStringUsage, (, ), {]
[., replaceChild, (, occurrence, ., node, ,, IR, ., name, (, name, ), ), ;, info, ., isAliased, =, true]
[., parent, ., replaceChild, (, occurrence, ., node, ,, IR, ., name, (, name, ), ), ;, info, ., isAliased]
[,, IR, ., name, (, name, ), ), ;, info, ., isAliased, =, true, ;, compiler, ., reportCodeChange, (, )]
[., node, ,, IR, ., name, (, name, ), ), ;, info, ., isAliased, =, true, ;, compiler, ., reportCodeChange]
[), ;, info, ., isAliased, =, true, ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, outputStringUsage, (, )]
[., name, (, name, ), ), ;, info, ., isAliased, =, true, ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ), ;, info, ., isAliased, =, true, ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, outputStringUsage, (]
[=, true, ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, outputStringUsage, (, ), {, StringBuilder, sb, =, new]
[., isAliased, =, true, ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, outputStringUsage, (, ), {, StringBuilder, sb]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, outputStringUsage, (, ), {, StringBuilder, sb, =, new, StringBuilder, (]
[;, }, private, void, outputStringUsage, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, "Strings used more than once:\n", ), ;, for, (, Entry]
[., reportCodeChange, (, ), ;, }, private, void, outputStringUsage, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, "Strings used more than once:\n", )]
[;, for, (, Entry, <, String, ,, StringInfo, >, stringInfoEntry, :, stringInfoMap, ., entrySet, (, ), ), {, StringInfo, info]
[), ;, for, (, Entry, <, String, ,, StringInfo, >, stringInfoEntry, :, stringInfoMap, ., entrySet, (, ), ), {, StringInfo]
[), {, StringInfo, info, =, stringInfoEntry, ., getValue, (, ), ;, if, (, info, ., numOccurrences, >, 1, ), {]
[., entrySet, (, ), ), {, StringInfo, info, =, stringInfoEntry, ., getValue, (, ), ;, if, (, info, ., numOccurrences]
[;, if, (, info, ., numOccurrences, >, 1, ), {, sb, ., append, (, info, ., numOccurrences, ), ;, sb]
[., getValue, (, ), ;, if, (, info, ., numOccurrences, >, 1, ), {, sb, ., append, (, info, .]
[), {, sb, ., append, (, info, ., numOccurrences, ), ;, sb, ., append, (, ": ", ), ;, sb, .]
[>, 1, ), {, sb, ., append, (, info, ., numOccurrences, ), ;, sb, ., append, (, ": ", ), ;]
[., numOccurrences, >, 1, ), {, sb, ., append, (, info, ., numOccurrences, ), ;, sb, ., append, (, ": "]
[), {, sb, ., append, (, info, ., numOccurrences, ), ;, sb, ., append, (, ": ", ), ;, sb, .]
[;, sb, ., append, (, ": ", ), ;, sb, ., append, (, stringInfoEntry, ., getKey, (, ), ), ;, sb]
[., append, (, info, ., numOccurrences, ), ;, sb, ., append, (, ": ", ), ;, sb, ., append, (, stringInfoEntry]
[), ;, sb, ., append, (, ": ", ), ;, sb, ., append, (, stringInfoEntry, ., getKey, (, ), ), ;]
[., numOccurrences, ), ;, sb, ., append, (, ": ", ), ;, sb, ., append, (, stringInfoEntry, ., getKey, (, )]
[;, sb, ., append, (, stringInfoEntry, ., getKey, (, ), ), ;, sb, ., append, (, '\n', ), ;, }]
[., append, (, ": ", ), ;, sb, ., append, (, stringInfoEntry, ., getKey, (, ), ), ;, sb, ., append]
[), ;, sb, ., append, (, stringInfoEntry, ., getKey, (, ), ), ;, sb, ., append, (, '\n', ), ;]
[;, sb, ., append, (, '\n', ), ;, }, }, logger, ., fine, (, sb, ., toString, (, ), )]
[., append, (, stringInfoEntry, ., getKey, (, ), ), ;, sb, ., append, (, '\n', ), ;, }, }, logger]
[), ;, sb, ., append, (, '\n', ), ;, }, }, logger, ., fine, (, sb, ., toString, (, )]
[., getKey, (, ), ), ;, sb, ., append, (, '\n', ), ;, }, }, logger, ., fine, (, sb]
[;, }, }, logger, ., fine, (, sb, ., toString, (, ), ), ;, }, private, static, final, class, StringOccurrence]
[., append, (, '\n', ), ;, }, }, logger, ., fine, (, sb, ., toString, (, ), ), ;, }]
[), ;, }, }, logger, ., fine, (, sb, ., toString, (, ), ), ;, }, private, static, final, class]
[;, }, private, static, final, class, StringOccurrence, {, final, Node, node, ;, final, Node, parent, ;, StringOccurrence, (, Node, node]
[., fine, (, sb, ., toString, (, ), ), ;, }, private, static, final, class, StringOccurrence, {, final, Node, node]
[), ;, }, private, static, final, class, StringOccurrence, {, final, Node, node, ;, final, Node, parent, ;, StringOccurrence, (, Node]
[., toString, (, ), ), ;, }, private, static, final, class, StringOccurrence, {, final, Node, node, ;, final, Node, parent]
[=, node, ;, this, ., parent, =, parent, ;, }, }, private, final, class, StringInfo, {, final, int, id, ;]
[., node, =, node, ;, this, ., parent, =, parent, ;, }, }, private, final, class, StringInfo, {, final, int]
[;, this, ., parent, =, parent, ;, }, }, private, final, class, StringInfo, {, final, int, id, ;, boolean, isAliased]
[=, parent, ;, }, }, private, final, class, StringInfo, {, final, int, id, ;, boolean, isAliased, ;, final, List, <]
[., parent, =, parent, ;, }, }, private, final, class, StringInfo, {, final, int, id, ;, boolean, isAliased, ;, final]
[;, }, }, private, final, class, StringInfo, {, final, int, id, ;, boolean, isAliased, ;, final, List, <, StringOccurrence, >]
[=, id, ;, this, ., occurrences, =, new, ArrayList, <, StringOccurrence, >, (, ), ;, this, ., isAliased, =, false]
[., id, =, id, ;, this, ., occurrences, =, new, ArrayList, <, StringOccurrence, >, (, ), ;, this, ., isAliased]
[;, this, ., occurrences, =, new, ArrayList, <, StringOccurrence, >, (, ), ;, this, ., isAliased, =, false, ;, }]
[=, new, ArrayList, <, StringOccurrence, >, (, ), ;, this, ., isAliased, =, false, ;, }, String, getVariableName, (, String]
[., occurrences, =, new, ArrayList, <, StringOccurrence, >, (, ), ;, this, ., isAliased, =, false, ;, }, String, getVariableName]
[;, this, ., isAliased, =, false, ;, }, String, getVariableName, (, String, stringLiteral, ), {, if, (, aliasName, ==, null]
[=, false, ;, }, String, getVariableName, (, String, stringLiteral, ), {, if, (, aliasName, ==, null, ), {, aliasName, =]
[., isAliased, =, false, ;, }, String, getVariableName, (, String, stringLiteral, ), {, if, (, aliasName, ==, null, ), {]
[;, }, String, getVariableName, (, String, stringLiteral, ), {, if, (, aliasName, ==, null, ), {, aliasName, =, encodeStringAsIdentifier, (]
[), {, aliasName, =, encodeStringAsIdentifier, (, STRING_ALIAS_PREFIX, ,, stringLiteral, ), ;, }, return, aliasName, ;, }, String, encodeStringAsIdentifier, (, String]
[==, null, ), {, aliasName, =, encodeStringAsIdentifier, (, STRING_ALIAS_PREFIX, ,, stringLiteral, ), ;, }, return, aliasName, ;, }, String, encodeStringAsIdentifier]
[), {, aliasName, =, encodeStringAsIdentifier, (, STRING_ALIAS_PREFIX, ,, stringLiteral, ), ;, }, return, aliasName, ;, }, String, encodeStringAsIdentifier, (, String]
[=, encodeStringAsIdentifier, (, STRING_ALIAS_PREFIX, ,, stringLiteral, ), ;, }, return, aliasName, ;, }, String, encodeStringAsIdentifier, (, String, prefix, ,, String]
[;, }, return, aliasName, ;, }, String, encodeStringAsIdentifier, (, String, prefix, ,, String, s, ), {, final, int, MAX_LIMIT, =]
[,, stringLiteral, ), ;, }, return, aliasName, ;, }, String, encodeStringAsIdentifier, (, String, prefix, ,, String, s, ), {, final]
[), ;, }, return, aliasName, ;, }, String, encodeStringAsIdentifier, (, String, prefix, ,, String, s, ), {, final, int, MAX_LIMIT]
[;, }, String, encodeStringAsIdentifier, (, String, prefix, ,, String, s, ), {, final, int, MAX_LIMIT, =, 20, ;, final, int]
[;, final, int, length, =, s, ., length, (, ), ;, final, int, limit, =, Math, ., min, (, length]
[;, final, int, limit, =, Math, ., min, (, length, ,, MAX_LIMIT, ), ;, StringBuilder, sb, =, new, StringBuilder, (]
[., length, (, ), ;, final, int, limit, =, Math, ., min, (, length, ,, MAX_LIMIT, ), ;, StringBuilder, sb]
[;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, prefix, ), ;, boolean, protectHex, =, false]
[., min, (, length, ,, MAX_LIMIT, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[,, MAX_LIMIT, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, prefix, ), ;, boolean]
[), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, prefix, ), ;, boolean, protectHex, =]
[;, sb, ., append, (, prefix, ), ;, boolean, protectHex, =, false, ;, for, (, int, i, =, 0, ;]
[;, boolean, protectHex, =, false, ;, for, (, int, i, =, 0, ;, i, <, limit, ;, i, ++, )]
[., append, (, prefix, ), ;, boolean, protectHex, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, boolean, protectHex, =, false, ;, for, (, int, i, =, 0, ;, i, <, limit, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, limit, ;, i, ++, ), {, char, ch, =, s]
[;, i, <, limit, ;, i, ++, ), {, char, ch, =, s, ., charAt, (, i, ), ;, if]
[;, i, ++, ), {, char, ch, =, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {]
[<, limit, ;, i, ++, ), {, char, ch, =, s, ., charAt, (, i, ), ;, if, (, protectHex]
[;, i, ++, ), {, char, ch, =, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {]
[), {, char, ch, =, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (, (]
[++, ), {, char, ch, =, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (]
[;, if, (, protectHex, ), {, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch]
[., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (, (, ch, >=, '0', &&, ch, <=]
[), ;, if, (, protectHex, ), {, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (]
[), {, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'a', &&, ch]
[), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (, ch, >=]
[||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {, sb, ., append, (, '_', ), ;, }]
[), ||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {, sb, ., append, (, '_', ), ;]
[&&, ch, <=, '9', ), ||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {, sb, ., append]
[>=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {, sb]
[&&, ch, <=, '9', ), ||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {, sb, ., append]
[), ||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {, sb, ., append, (, '_', ), ;]
[<=, '9', ), ||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {, sb, ., append, (, '_']
[), ||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {, sb, ., append, (, '_', ), ;]
[), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (, ch, >=]
[), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (, ch]
[&&, ch, <=, 'f', ), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }]
[>=, 'a', &&, ch, <=, 'f', ), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false]
[&&, ch, <=, 'f', ), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }]
[), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (, ch]
[<=, 'f', ), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (]
[), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (, ch]
[;, }, protectHex, =, false, ;, }, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (]
[., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (, ch, >=, '0', &&, ch]
[), ;, }, protectHex, =, false, ;, }, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||]
[=, false, ;, }, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A']
[;, }, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch]
[), {, sb, ., append, (, ch, ), ;, }, else, {, sb, ., append, (, '$', ), ;, sb]
[||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append, (, ch, ), ;, }]
[||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z', )]
[), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z']
[&&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a']
[>=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch]
[&&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a']
[), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z']
[<=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch]
[), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z']
[||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append, (, ch, ), ;, }]
[), ||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append, (, ch, ), ;]
[&&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append]
[>=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb]
[&&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append]
[), ||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append, (, ch, ), ;]
[<=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append, (, ch]
[), ||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append, (, ch, ), ;]
[), {, sb, ., append, (, ch, ), ;, }, else, {, sb, ., append, (, '$', ), ;, sb]
[), ), {, sb, ., append, (, ch, ), ;, }, else, {, sb, ., append, (, '$', ), ;]
[&&, ch, <=, 'z', ), ), {, sb, ., append, (, ch, ), ;, }, else, {, sb, ., append]
[>=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append, (, ch, ), ;, }, else, {, sb]
[&&, ch, <=, 'z', ), ), {, sb, ., append, (, ch, ), ;, }, else, {, sb, ., append]
[), ), {, sb, ., append, (, ch, ), ;, }, else, {, sb, ., append, (, '$', ), ;]
[<=, 'z', ), ), {, sb, ., append, (, ch, ), ;, }, else, {, sb, ., append, (, '$']
[), ), {, sb, ., append, (, ch, ), ;, }, else, {, sb, ., append, (, '$', ), ;]
[;, }, else, {, sb, ., append, (, '$', ), ;, sb, ., append, (, Integer, ., toHexString, (, ch]
[., append, (, ch, ), ;, }, else, {, sb, ., append, (, '$', ), ;, sb, ., append, (]
[), ;, }, else, {, sb, ., append, (, '$', ), ;, sb, ., append, (, Integer, ., toHexString, (]
[;, sb, ., append, (, Integer, ., toHexString, (, ch, ), ), ;, protectHex, =, true, ;, }, }, if]
[., append, (, '$', ), ;, sb, ., append, (, Integer, ., toHexString, (, ch, ), ), ;, protectHex, =]
[), ;, sb, ., append, (, Integer, ., toHexString, (, ch, ), ), ;, protectHex, =, true, ;, }, }]
[;, protectHex, =, true, ;, }, }, if, (, length, ==, limit, ), {, return, sb, ., toString, (, )]
[., append, (, Integer, ., toHexString, (, ch, ), ), ;, protectHex, =, true, ;, }, }, if, (, length]
[), ;, protectHex, =, true, ;, }, }, if, (, length, ==, limit, ), {, return, sb, ., toString, (]
[., toHexString, (, ch, ), ), ;, protectHex, =, true, ;, }, }, if, (, length, ==, limit, ), {]
[), ), ;, protectHex, =, true, ;, }, }, if, (, length, ==, limit, ), {, return, sb, ., toString]
[=, true, ;, }, }, if, (, length, ==, limit, ), {, return, sb, ., toString, (, ), ;, }]
[;, }, }, if, (, length, ==, limit, ), {, return, sb, ., toString, (, ), ;, }, CRC32, crc32]
[), {, return, sb, ., toString, (, ), ;, }, CRC32, crc32, =, new, CRC32, (, ), ;, crc32, .]
[==, limit, ), {, return, sb, ., toString, (, ), ;, }, CRC32, crc32, =, new, CRC32, (, ), ;]
[), {, return, sb, ., toString, (, ), ;, }, CRC32, crc32, =, new, CRC32, (, ), ;, crc32, .]
[;, }, CRC32, crc32, =, new, CRC32, (, ), ;, crc32, ., update, (, s, ., getBytes, (, ), )]
[., toString, (, ), ;, }, CRC32, crc32, =, new, CRC32, (, ), ;, crc32, ., update, (, s, .]
[;, crc32, ., update, (, s, ., getBytes, (, ), ), ;, long, hash, =, crc32, ., getValue, (, )]
[;, long, hash, =, crc32, ., getValue, (, ), &, unitTestHashReductionMask, ;, sb, ., append, (, '_', ), ;, sb]
[., update, (, s, ., getBytes, (, ), ), ;, long, hash, =, crc32, ., getValue, (, ), &, unitTestHashReductionMask]
[), ;, long, hash, =, crc32, ., getValue, (, ), &, unitTestHashReductionMask, ;, sb, ., append, (, '_', ), ;]
[., getBytes, (, ), ), ;, long, hash, =, crc32, ., getValue, (, ), &, unitTestHashReductionMask, ;, sb, ., append]
[;, sb, ., append, (, '_', ), ;, sb, ., append, (, Long, ., toHexString, (, hash, ), ), ;]
[&, unitTestHashReductionMask, ;, sb, ., append, (, '_', ), ;, sb, ., append, (, Long, ., toHexString, (, hash, )]
[., getValue, (, ), &, unitTestHashReductionMask, ;, sb, ., append, (, '_', ), ;, sb, ., append, (, Long, .]
[;, sb, ., append, (, '_', ), ;, sb, ., append, (, Long, ., toHexString, (, hash, ), ), ;]
[;, sb, ., append, (, Long, ., toHexString, (, hash, ), ), ;, String, encoded, =, sb, ., toString, (]
[., append, (, '_', ), ;, sb, ., append, (, Long, ., toHexString, (, hash, ), ), ;, String, encoded]
[), ;, sb, ., append, (, Long, ., toHexString, (, hash, ), ), ;, String, encoded, =, sb, ., toString]
[;, String, encoded, =, sb, ., toString, (, ), ;, if, (, !, usedHashedAliases, ., add, (, encoded, ), )]
[., append, (, Long, ., toHexString, (, hash, ), ), ;, String, encoded, =, sb, ., toString, (, ), ;]
[), ;, String, encoded, =, sb, ., toString, (, ), ;, if, (, !, usedHashedAliases, ., add, (, encoded, )]
[., toHexString, (, hash, ), ), ;, String, encoded, =, sb, ., toString, (, ), ;, if, (, !, usedHashedAliases]
[), ), ;, String, encoded, =, sb, ., toString, (, ), ;, if, (, !, usedHashedAliases, ., add, (, encoded]
[;, if, (, !, usedHashedAliases, ., add, (, encoded, ), ), {, encoded, +=, "_", +, id, ;, }, return]
[., toString, (, ), ;, if, (, !, usedHashedAliases, ., add, (, encoded, ), ), {, encoded, +=, "_", +]
[), {, encoded, +=, "_", +, id, ;, }, return, encoded, ;, }, }, }]
[), {, encoded, +=, "_", +, id, ;, }, return, encoded, ;, }, }, }]
[., add, (, encoded, ), ), {, encoded, +=, "_", +, id, ;, }, return, encoded, ;, }, }, }]
[), ), {, encoded, +=, "_", +, id, ;, }, return, encoded, ;, }, }, }]
[+=, "_", +, id, ;, }, return, encoded, ;, }, }, }]
[;, }, return, encoded, ;, }, }, }]
[+, id, ;, }, return, encoded, ;, }, }, }]
[;, }, return, encoded, ;, }, }, }]
[;, }, }, }]
