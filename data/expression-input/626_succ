[;, static, final, DiagnosticType, INVALID_NUM_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_NUM_ARGS", ,, "goog.getCssName called with \"{0}\" arguments, expected 1 or 2.", ), ;, static, final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =]
[;, static, final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType]
[., error, (, "JSC_GETCSSNAME_NUM_ARGS", ,, "goog.getCssName called with \"{0}\" arguments, expected 1 or 2.", ), ;, static, final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal "]
[,, "goog.getCssName called with \"{0}\" arguments, expected 1 or 2.", ), ;, static, final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;]
[), ;, static, final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final]
[;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;, static]
[., error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL"]
[,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean "]
[), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;]
[+, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?"]
[), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;]
[;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning, (, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", ,, "goog.getCssName called with unrecognized symbol \"{0}\" in class ", +, "\"{1}\".", ), ;, private, final, AbstractCompiler]
[., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning]
[,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning, (, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", ,, "goog.getCssName called with unrecognized symbol \"{0}\" in class "]
[), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning, (, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", ,, "goog.getCssName called with unrecognized symbol \"{0}\" in class ", +, "\"{1}\".", ), ;, private, final]
[+, "goog.getCssName(\"{0}-{1}\")?", ), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning, (, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", ,, "goog.getCssName called with unrecognized symbol \"{0}\" in class ", +, "\"{1}\".", ), ;]
[+, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning, (, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", ,, "goog.getCssName called with unrecognized symbol \"{0}\" in class ", +, "\"{1}\"."]
[+, "goog.getCssName(\"{0}-{1}\")?", ), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning, (, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", ,, "goog.getCssName called with unrecognized symbol \"{0}\" in class ", +, "\"{1}\".", ), ;]
[), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning, (, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", ,, "goog.getCssName called with unrecognized symbol \"{0}\" in class ", +, "\"{1}\".", ), ;, private, final]
[;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, Integer, >, cssNames, ;, private, CssRenamingMap, symbolMap, ;]
[., warning, (, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", ,, "goog.getCssName called with unrecognized symbol \"{0}\" in class ", +, "\"{1}\".", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String]
[,, "goog.getCssName called with unrecognized symbol \"{0}\" in class ", +, "\"{1}\".", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, Integer, >, cssNames]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, Integer, >, cssNames, ;, private, CssRenamingMap, symbolMap]
[+, "\"{1}\".", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, Integer, >, cssNames, ;, private]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, Integer, >, cssNames, ;, private, CssRenamingMap, symbolMap]
[=, compiler, ;, this, ., cssNames, =, cssNames, ;, this, ., whitelist, =, whitelist, ;, this, ., nativeStringType, =, compiler]
[., compiler, =, compiler, ;, this, ., cssNames, =, cssNames, ;, this, ., whitelist, =, whitelist, ;, this, ., nativeStringType]
[;, this, ., cssNames, =, cssNames, ;, this, ., whitelist, =, whitelist, ;, this, ., nativeStringType, =, compiler, ., getTypeRegistry]
[=, cssNames, ;, this, ., whitelist, =, whitelist, ;, this, ., nativeStringType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType]
[., cssNames, =, cssNames, ;, this, ., whitelist, =, whitelist, ;, this, ., nativeStringType, =, compiler, ., getTypeRegistry, (, )]
[;, this, ., whitelist, =, whitelist, ;, this, ., nativeStringType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, STRING_TYPE]
[=, whitelist, ;, this, ., nativeStringType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, STRING_TYPE, ), ;, }, @]
[., whitelist, =, whitelist, ;, this, ., nativeStringType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, STRING_TYPE, ), ;]
[;, this, ., nativeStringType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public]
[=, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public, void, process, (, Node]
[., nativeStringType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public, void, process]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, symbolMap, =, getCssRenamingMap, (, )]
[., getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., getTypeRegistry, (, ), ., getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public, void, process, (, Node, externs, ,]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, symbolMap, =, getCssRenamingMap, (]
[=, getCssRenamingMap, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, Traversal, (, ), ), ;, }]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, Traversal, (, ), ), ;, }, @, VisibleForTesting, protected, CssRenamingMap]
[;, }, @, VisibleForTesting, protected, CssRenamingMap, getCssRenamingMap, (, ), {, return, compiler, ., getCssRenamingMap, (, ), ;, }, private, class]
[., traverse, (, compiler, ,, root, ,, new, Traversal, (, ), ), ;, }, @, VisibleForTesting, protected, CssRenamingMap, getCssRenamingMap, (]
[,, root, ,, new, Traversal, (, ), ), ;, }, @, VisibleForTesting, protected, CssRenamingMap, getCssRenamingMap, (, ), {, return, compiler]
[,, new, Traversal, (, ), ), ;, }, @, VisibleForTesting, protected, CssRenamingMap, getCssRenamingMap, (, ), {, return, compiler, ., getCssRenamingMap]
[), ;, }, @, VisibleForTesting, protected, CssRenamingMap, getCssRenamingMap, (, ), {, return, compiler, ., getCssRenamingMap, (, ), ;, }, private]
[;, }, private, class, Traversal, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., getCssRenamingMap, (, ), ;, }, private, class, Traversal, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t]
[), {, int, count, =, n, ., getChildCount, (, ), ;, Node, first, =, n, ., getFirstChild, (, ), .]
[&&, GET_CSS_NAME_FUNCTION, ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ), {, int, count, =]
[., isCall, (, ), &&, GET_CSS_NAME_FUNCTION, ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), )]
[), {, int, count, =, n, ., getChildCount, (, ), ;, Node, first, =, n, ., getFirstChild, (, ), .]
[., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ), {, int, count, =, n, .]
[), ), {, int, count, =, n, ., getChildCount, (, ), ;, Node, first, =, n, ., getFirstChild, (, )]
[., getQualifiedName, (, ), ), ), {, int, count, =, n, ., getChildCount, (, ), ;, Node, first, =, n]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ), ), {, int, count, =, n, ., getChildCount, (, ), ;]
[;, Node, first, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, switch, (, count, ), {, case]
[., getChildCount, (, ), ;, Node, first, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, switch, (]
[;, switch, (, count, ), {, case, 2, :, if, (, first, ., isString, (, ), ), {, processStringNode, (]
[., getNext, (, ), ;, switch, (, count, ), {, case, 2, :, if, (, first, ., isString, (, )]
[., getFirstChild, (, ), ., getNext, (, ), ;, switch, (, count, ), {, case, 2, :, if, (, first]
[), {, case, 2, :, if, (, first, ., isString, (, ), ), {, processStringNode, (, t, ,, first, )]
[:, if, (, first, ., isString, (, ), ), {, processStringNode, (, t, ,, first, ), ;, n, ., removeChild]
[), {, processStringNode, (, t, ,, first, ), ;, n, ., removeChild, (, first, ), ;, parent, ., replaceChild, (]
[., isString, (, ), ), {, processStringNode, (, t, ,, first, ), ;, n, ., removeChild, (, first, ), ;]
[;, n, ., removeChild, (, first, ), ;, parent, ., replaceChild, (, n, ,, first, ), ;, compiler, ., reportCodeChange]
[,, first, ), ;, n, ., removeChild, (, first, ), ;, parent, ., replaceChild, (, n, ,, first, ), ;]
[), ;, n, ., removeChild, (, first, ), ;, parent, ., replaceChild, (, n, ,, first, ), ;, compiler, .]
[;, parent, ., replaceChild, (, n, ,, first, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, compiler]
[., removeChild, (, first, ), ;, parent, ., replaceChild, (, n, ,, first, ), ;, compiler, ., reportCodeChange, (, )]
[), ;, parent, ., replaceChild, (, n, ,, first, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {]
[;, compiler, ., reportCodeChange, (, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,]
[., replaceChild, (, n, ,, first, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, compiler, ., report]
[,, first, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, compiler, ., report, (, t, ., makeError]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n]
[;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (]
[., reportCodeChange, (, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,]
[;, }, break, ;, case, 3, :, Node, second, =, first, ., getNext, (, ), ;, if, (, !, second]
[., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (, first, ., getType, (, )]
[), ;, }, break, ;, case, 3, :, Node, second, =, first, ., getNext, (, ), ;, if, (, !]
[., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (, first, ., getType, (, ), ), ), ), ;]
[,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (, first, ., getType, (, ), ), ), ), ;, }, break, ;, case]
[,, Token, ., name, (, first, ., getType, (, ), ), ), ), ;, }, break, ;, case, 3, :]
[), ), ;, }, break, ;, case, 3, :, Node, second, =, first, ., getNext, (, ), ;, if, (]
[., name, (, first, ., getType, (, ), ), ), ), ;, }, break, ;, case, 3, :, Node, second]
[), ), ), ;, }, break, ;, case, 3, :, Node, second, =, first, ., getNext, (, ), ;, if]
[., getType, (, ), ), ), ), ;, }, break, ;, case, 3, :, Node, second, =, first, ., getNext]
[:, Node, second, =, first, ., getNext, (, ), ;, if, (, !, second, ., isString, (, ), ), {]
[;, if, (, !, second, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n]
[., getNext, (, ), ;, if, (, !, second, ., isString, (, ), ), {, compiler, ., report, (, t]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (, second, .]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (, second, .]
[., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, .]
[;, }, else, if, (, first, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (, second, ., getType, (, )]
[), ;, }, else, if, (, first, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError]
[., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (, second, ., getType, (, ), ), ), ), ;]
[,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (, second, ., getType, (, ), ), ), ), ;, }, else, if, (]
[,, Token, ., name, (, second, ., getType, (, ), ), ), ), ;, }, else, if, (, first, .]
[), ), ;, }, else, if, (, first, ., isString, (, ), ), {, compiler, ., report, (, t, .]
[., name, (, second, ., getType, (, ), ), ), ), ;, }, else, if, (, first, ., isString, (]
[), ), ), ;, }, else, if, (, first, ., isString, (, ), ), {, compiler, ., report, (, t]
[., getType, (, ), ), ), ), ;, }, else, if, (, first, ., isString, (, ), ), {, compiler]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNEXPECTED_STRING_LITERAL_ERROR, ,, first, ., getString, (, ), ,]
[., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNEXPECTED_STRING_LITERAL_ERROR, ,, first, .]
[;, }, else, {, processStringNode, (, t, ,, second, ), ;, n, ., removeChild, (, first, ), ;, Node, replacement]
[., report, (, t, ., makeError, (, n, ,, UNEXPECTED_STRING_LITERAL_ERROR, ,, first, ., getString, (, ), ,, second, ., getString]
[), ;, }, else, {, processStringNode, (, t, ,, second, ), ;, n, ., removeChild, (, first, ), ;, Node]
[., makeError, (, n, ,, UNEXPECTED_STRING_LITERAL_ERROR, ,, first, ., getString, (, ), ,, second, ., getString, (, ), ), )]
[,, UNEXPECTED_STRING_LITERAL_ERROR, ,, first, ., getString, (, ), ,, second, ., getString, (, ), ), ), ;, }, else, {]
[,, first, ., getString, (, ), ,, second, ., getString, (, ), ), ), ;, }, else, {, processStringNode, (]
[,, second, ., getString, (, ), ), ), ;, }, else, {, processStringNode, (, t, ,, second, ), ;, n]
[., getString, (, ), ,, second, ., getString, (, ), ), ), ;, }, else, {, processStringNode, (, t, ,]
[), ), ;, }, else, {, processStringNode, (, t, ,, second, ), ;, n, ., removeChild, (, first, ), ;]
[., getString, (, ), ), ), ;, }, else, {, processStringNode, (, t, ,, second, ), ;, n, ., removeChild]
[;, n, ., removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (, first, ,, IR, ., string]
[,, second, ), ;, n, ., removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (, first, ,]
[), ;, n, ., removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (, first, ,, IR, .]
[;, Node, replacement, =, IR, ., add, (, first, ,, IR, ., string, (, "-", +, second, ., getString, (]
[., removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (, first, ,, IR, ., string, (, "-"]
[), ;, Node, replacement, =, IR, ., add, (, first, ,, IR, ., string, (, "-", +, second, ., getString]
[;, replacement, ., setJSType, (, nativeStringType, ), ;, parent, ., replaceChild, (, n, ,, replacement, ), ;, compiler, ., reportCodeChange]
[., copyInformationFrom, (, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;, parent, ., replaceChild, (, n, ,, replacement]
[., add, (, first, ,, IR, ., string, (, "-", +, second, ., getString, (, ), ), ., copyInformationFrom, (]
[,, IR, ., string, (, "-", +, second, ., getString, (, ), ), ., copyInformationFrom, (, second, ), ), .]
[), ., copyInformationFrom, (, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;, parent, ., replaceChild, (, n, ,]
[., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;, parent]
[., string, (, "-", +, second, ., getString, (, ), ), ., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (]
[), ., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;]
[+, second, ., getString, (, ), ), ., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (, n, ), ;, replacement]
[), ., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;]
[., getString, (, ), ), ., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (, n, ), ;, replacement, ., setJSType]
[), ), ., copyInformationFrom, (, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;, parent, ., replaceChild, (, n]
[), ;, replacement, ., setJSType, (, nativeStringType, ), ;, parent, ., replaceChild, (, n, ,, replacement, ), ;, compiler, .]
[;, parent, ., replaceChild, (, n, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, default]
[., setJSType, (, nativeStringType, ), ;, parent, ., replaceChild, (, n, ,, replacement, ), ;, compiler, ., reportCodeChange, (, )]
[), ;, parent, ., replaceChild, (, n, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, default, :, compiler, ., report, (, t, ., makeError, (]
[., replaceChild, (, n, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, default, :, compiler]
[,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, default, :, compiler, ., report, (, t]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, default, :, compiler, ., report, (, t, ., makeError]
[;, }, break, ;, default, :, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_NUM_ARGUMENTS_ERROR, ,, String, .]
[., reportCodeChange, (, ), ;, }, break, ;, default, :, compiler, ., report, (, t, ., makeError, (, n, ,]
[;, }, }, }, private, void, processStringNode, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =, n, .]
[., report, (, t, ., makeError, (, n, ,, INVALID_NUM_ARGUMENTS_ERROR, ,, String, ., valueOf, (, count, ), ), ), ;]
[), ;, }, }, }, private, void, processStringNode, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =, n]
[., makeError, (, n, ,, INVALID_NUM_ARGUMENTS_ERROR, ,, String, ., valueOf, (, count, ), ), ), ;, }, }, }, private]
[,, INVALID_NUM_ARGUMENTS_ERROR, ,, String, ., valueOf, (, count, ), ), ), ;, }, }, }, private, void, processStringNode, (, NodeTraversal]
[,, String, ., valueOf, (, count, ), ), ), ;, }, }, }, private, void, processStringNode, (, NodeTraversal, t, ,]
[), ), ;, }, }, }, private, void, processStringNode, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =]
[., valueOf, (, count, ), ), ), ;, }, }, }, private, void, processStringNode, (, NodeTraversal, t, ,, Node, n]
[), ), ), ;, }, }, }, private, void, processStringNode, (, NodeTraversal, t, ,, Node, n, ), {, String, name]
[;, if, (, whitelist, !=, null, &&, whitelist, ., contains, (, name, ), ), {, return, ;, }, String, []
[., getString, (, ), ;, if, (, whitelist, !=, null, &&, whitelist, ., contains, (, name, ), ), {, return]
[), {, return, ;, }, String, [, ], parts, =, name, ., split, (, "-", ), ;, if, (, symbolMap]
[&&, whitelist, ., contains, (, name, ), ), {, return, ;, }, String, [, ], parts, =, name, ., split]
[!=, null, &&, whitelist, ., contains, (, name, ), ), {, return, ;, }, String, [, ], parts, =, name]
[&&, whitelist, ., contains, (, name, ), ), {, return, ;, }, String, [, ], parts, =, name, ., split]
[), {, return, ;, }, String, [, ], parts, =, name, ., split, (, "-", ), ;, if, (, symbolMap]
[., contains, (, name, ), ), {, return, ;, }, String, [, ], parts, =, name, ., split, (, "-"]
[), ), {, return, ;, }, String, [, ], parts, =, name, ., split, (, "-", ), ;, if, (]
[;, if, (, symbolMap, !=, null, ), {, String, replacement, =, null, ;, switch, (, symbolMap, ., getStyle, (, )]
[., split, (, "-", ), ;, if, (, symbolMap, !=, null, ), {, String, replacement, =, null, ;, switch, (]
[), ;, if, (, symbolMap, !=, null, ), {, String, replacement, =, null, ;, switch, (, symbolMap, ., getStyle, (]
[), {, String, replacement, =, null, ;, switch, (, symbolMap, ., getStyle, (, ), ), {, case, BY_WHOLE, :, replacement]
[!=, null, ), {, String, replacement, =, null, ;, switch, (, symbolMap, ., getStyle, (, ), ), {, case, BY_WHOLE]
[), {, String, replacement, =, null, ;, switch, (, symbolMap, ., getStyle, (, ), ), {, case, BY_WHOLE, :, replacement]
[;, switch, (, symbolMap, ., getStyle, (, ), ), {, case, BY_WHOLE, :, replacement, =, symbolMap, ., get, (, name]
[), {, case, BY_WHOLE, :, replacement, =, symbolMap, ., get, (, name, ), ;, if, (, replacement, ==, null, )]
[., getStyle, (, ), ), {, case, BY_WHOLE, :, replacement, =, symbolMap, ., get, (, name, ), ;, if, (]
[:, replacement, =, symbolMap, ., get, (, name, ), ;, if, (, replacement, ==, null, ), {, compiler, ., report]
[=, symbolMap, ., get, (, name, ), ;, if, (, replacement, ==, null, ), {, compiler, ., report, (, t]
[;, if, (, replacement, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,]
[., get, (, name, ), ;, if, (, replacement, ==, null, ), {, compiler, ., report, (, t, ., makeError]
[), ;, if, (, replacement, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, name, ,, name, ), ), ;]
[==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, name, ,, name, )]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, name, ,, name, ), ), ;]
[;, return, ;, }, break, ;, case, BY_PART, :, String, [, ], replaced, =, new, String, [, parts, ., length]
[., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, name, ,, name, ), ), ;, return, ;, }]
[), ;, return, ;, }, break, ;, case, BY_PART, :, String, [, ], replaced, =, new, String, [, parts, .]
[., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, name, ,, name, ), ), ;, return, ;, }, break, ;, case, BY_PART]
[,, UNKNOWN_SYMBOL_WARNING, ,, name, ,, name, ), ), ;, return, ;, }, break, ;, case, BY_PART, :, String, [, ]]
[,, name, ,, name, ), ), ;, return, ;, }, break, ;, case, BY_PART, :, String, [, ], replaced, =]
[,, name, ), ), ;, return, ;, }, break, ;, case, BY_PART, :, String, [, ], replaced, =, new, String]
[), ), ;, return, ;, }, break, ;, case, BY_PART, :, String, [, ], replaced, =, new, String, [, parts]
[:, String, [, ], replaced, =, new, String, [, parts, ., length, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, String, part]
[], ;, for, (, int, i, =, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, String]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, parts, ., length, ;, i, ++, )]
[;, i, <, parts, ., length, ;, i, ++, ), {, String, part, =, symbolMap, ., get, (, parts, []
[;, i, ++, ), {, String, part, =, symbolMap, ., get, (, parts, [, i, ], ), ;, if, (]
[<, parts, ., length, ;, i, ++, ), {, String, part, =, symbolMap, ., get, (, parts, [, i, ]]
[;, i, ++, ), {, String, part, =, symbolMap, ., get, (, parts, [, i, ], ), ;, if, (]
[., length, ;, i, ++, ), {, String, part, =, symbolMap, ., get, (, parts, [, i, ], ), ;]
[), {, String, part, =, symbolMap, ., get, (, parts, [, i, ], ), ;, if, (, part, ==, null]
[++, ), {, String, part, =, symbolMap, ., get, (, parts, [, i, ], ), ;, if, (, part, ==]
[;, if, (, part, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,]
[., get, (, parts, [, i, ], ), ;, if, (, part, ==, null, ), {, compiler, ., report, (]
[), ;, if, (, part, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING]
[[, i, ], ), ;, if, (, part, ==, null, ), {, compiler, ., report, (, t, ., makeError, (]
[], ), ;, if, (, part, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, parts, [, i, ], ,, name]
[==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, parts, [, i, ]]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, parts, [, i, ], ,, name]
[;, return, ;, }, replaced, [, i, ], =, part, ;, }, replacement, =, Joiner, ., on, (, "-", )]
[., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, parts, [, i, ], ,, name, ), ), ;]
[), ;, return, ;, }, replaced, [, i, ], =, part, ;, }, replacement, =, Joiner, ., on, (, "-"]
[., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, parts, [, i, ], ,, name, ), ), ;, return, ;, }, replaced]
[,, UNKNOWN_SYMBOL_WARNING, ,, parts, [, i, ], ,, name, ), ), ;, return, ;, }, replaced, [, i, ], =]
[,, parts, [, i, ], ,, name, ), ), ;, return, ;, }, replaced, [, i, ], =, part, ;]
[,, name, ), ), ;, return, ;, }, replaced, [, i, ], =, part, ;, }, replacement, =, Joiner, .]
[[, i, ], ,, name, ), ), ;, return, ;, }, replaced, [, i, ], =, part, ;, }, replacement]
[], ,, name, ), ), ;, return, ;, }, replaced, [, i, ], =, part, ;, }, replacement, =, Joiner]
[), ), ;, return, ;, }, replaced, [, i, ], =, part, ;, }, replacement, =, Joiner, ., on, (]
[=, part, ;, }, replacement, =, Joiner, ., on, (, "-", ), ., join, (, replaced, ), ;, break, ;]
[[, i, ], =, part, ;, }, replacement, =, Joiner, ., on, (, "-", ), ., join, (, replaced, )]
[], =, part, ;, }, replacement, =, Joiner, ., on, (, "-", ), ., join, (, replaced, ), ;, break]
[;, }, replacement, =, Joiner, ., on, (, "-", ), ., join, (, replaced, ), ;, break, ;, default, :]
[=, Joiner, ., on, (, "-", ), ., join, (, replaced, ), ;, break, ;, default, :, throw, new, IllegalStateException]
[;, break, ;, default, :, throw, new, IllegalStateException, (, "Unknown replacement style: ", +, symbolMap, ., getStyle, (, ), ), ;, }, n]
[., join, (, replaced, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unknown replacement style: ", +, symbolMap, ., getStyle, (]
[., on, (, "-", ), ., join, (, replaced, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unknown replacement style: "]
[), ., join, (, replaced, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unknown replacement style: ", +, symbolMap, ., getStyle]
[), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unknown replacement style: ", +, symbolMap, ., getStyle, (, ), ), ;, }]
[;, }, n, ., setString, (, replacement, ), ;, }, if, (, cssNames, !=, null, ), {, for, (, int]
[), ;, }, n, ., setString, (, replacement, ), ;, }, if, (, cssNames, !=, null, ), {, for, (]
[+, symbolMap, ., getStyle, (, ), ), ;, }, n, ., setString, (, replacement, ), ;, }, if, (, cssNames]
[), ;, }, n, ., setString, (, replacement, ), ;, }, if, (, cssNames, !=, null, ), {, for, (]
[., getStyle, (, ), ), ;, }, n, ., setString, (, replacement, ), ;, }, if, (, cssNames, !=, null]
[;, }, if, (, cssNames, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, parts, .]
[., setString, (, replacement, ), ;, }, if, (, cssNames, !=, null, ), {, for, (, int, i, =, 0]
[), ;, }, if, (, cssNames, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, parts]
[), {, for, (, int, i, =, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, Integer]
[!=, null, ), {, for, (, int, i, =, 0, ;, i, <, parts, ., length, ;, i, ++, )]
[), {, for, (, int, i, =, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, Integer]
[;, i, <, parts, ., length, ;, i, ++, ), {, Integer, count, =, cssNames, ., get, (, parts, []
[;, i, ++, ), {, Integer, count, =, cssNames, ., get, (, parts, [, i, ], ), ;, if, (]
[<, parts, ., length, ;, i, ++, ), {, Integer, count, =, cssNames, ., get, (, parts, [, i, ]]
[;, i, ++, ), {, Integer, count, =, cssNames, ., get, (, parts, [, i, ], ), ;, if, (]
[., length, ;, i, ++, ), {, Integer, count, =, cssNames, ., get, (, parts, [, i, ], ), ;]
[), {, Integer, count, =, cssNames, ., get, (, parts, [, i, ], ), ;, if, (, count, ==, null]
[++, ), {, Integer, count, =, cssNames, ., get, (, parts, [, i, ], ), ;, if, (, count, ==]
[;, if, (, count, ==, null, ), {, count, =, Integer, ., valueOf, (, 0, ), ;, }, cssNames, .]
[., get, (, parts, [, i, ], ), ;, if, (, count, ==, null, ), {, count, =, Integer, .]
[), ;, if, (, count, ==, null, ), {, count, =, Integer, ., valueOf, (, 0, ), ;, }, cssNames]
[[, i, ], ), ;, if, (, count, ==, null, ), {, count, =, Integer, ., valueOf, (, 0, )]
[], ), ;, if, (, count, ==, null, ), {, count, =, Integer, ., valueOf, (, 0, ), ;, }]
[), {, count, =, Integer, ., valueOf, (, 0, ), ;, }, cssNames, ., put, (, parts, [, i, ]]
[==, null, ), {, count, =, Integer, ., valueOf, (, 0, ), ;, }, cssNames, ., put, (, parts, []
[), {, count, =, Integer, ., valueOf, (, 0, ), ;, }, cssNames, ., put, (, parts, [, i, ]]
[=, Integer, ., valueOf, (, 0, ), ;, }, cssNames, ., put, (, parts, [, i, ], ,, count, .]
[;, }, cssNames, ., put, (, parts, [, i, ], ,, count, ., intValue, (, ), +, 1, ), ;]
[., valueOf, (, 0, ), ;, }, cssNames, ., put, (, parts, [, i, ], ,, count, ., intValue, (]
[), ;, }, cssNames, ., put, (, parts, [, i, ], ,, count, ., intValue, (, ), +, 1, )]
[;, }, }, }, }, }]
[., put, (, parts, [, i, ], ,, count, ., intValue, (, ), +, 1, ), ;, }, }, }]
[,, count, ., intValue, (, ), +, 1, ), ;, }, }, }, }, }]
[[, i, ], ,, count, ., intValue, (, ), +, 1, ), ;, }, }, }, }, }]
[], ,, count, ., intValue, (, ), +, 1, ), ;, }, }, }, }, }]
[), ;, }, }, }, }, }]
[+, 1, ), ;, }, }, }, }, }]
[., intValue, (, ), +, 1, ), ;, }, }, }, }, }]
[), ;, }, }, }, }, }]
