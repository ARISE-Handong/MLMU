[UUID, ;, public, class, Conversion, {, public, static, int, hexDigitToInt, (, final, char, hexDigit, ), {, final, int, digit, =]
[UUID, ;, public, class, Conversion, {, public, static, int, hexDigitToInt, (, final, char, hexDigit, ), {, final, int, digit, =]
[Conversion, {, public, static, int, hexDigitToInt, (, final, char, hexDigit, ), {, final, int, digit, =, Character, ., digit, (]
[public, static, int, hexDigitToInt, (, final, char, hexDigit, ), {, final, int, digit, =, Character, ., digit, (, hexDigit, ,]
[final, char, hexDigit, ), {, final, int, digit, =, Character, ., digit, (, hexDigit, ,, 16, ), ;, if, (]
[final, char, hexDigit, ), {, final, int, digit, =, Character, ., digit, (, hexDigit, ,, 16, ), ;, if, (]
[hexDigit, ), {, final, int, digit, =, Character, ., digit, (, hexDigit, ,, 16, ), ;, if, (, digit, <]
[int, digit, =, Character, ., digit, (, hexDigit, ,, 16, ), ;, if, (, digit, <, 0, ), {, throw]
[Character, ., digit, (, hexDigit, ,, 16, ), ;, if, (, digit, <, 0, ), {, throw, new, IllegalArgumentException, (]
[Character, ., digit, (, hexDigit, ,, 16, ), ;, if, (, digit, <, 0, ), {, throw, new, IllegalArgumentException, (]
[Character, ., digit, (, hexDigit, ,, 16, ), ;, if, (, digit, <, 0, ), {, throw, new, IllegalArgumentException, (]
[digit, (, hexDigit, ,, 16, ), ;, if, (, digit, <, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot interpret '", +]
[hexDigit, ,, 16, ), ;, if, (, digit, <, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot interpret '", +, hexDigit, +]
[if, (, digit, <, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot interpret '", +, hexDigit, +, "' as a hexadecimal digit", ), ;, }, return]
["' as a hexadecimal digit", ), ;, }, return, digit, ;, }, public, static, int, hexDigitMsb0ToInt, (, final, char, hexDigit, ), {, switch, (]
[return, digit, ;, }, public, static, int, hexDigitMsb0ToInt, (, final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case]
[}, public, static, int, hexDigitMsb0ToInt, (, final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case, '0', :, return]
[int, hexDigitMsb0ToInt, (, final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case, '0', :, return, 0x0, ;, case]
[final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case, '0', :, return, 0x0, ;, case, '1', :, return]
[), {, switch, (, hexDigit, ), {, case, '0', :, return, 0x0, ;, case, '1', :, return, 0x8, ;, case]
[(, hexDigit, ), {, case, '0', :, return, 0x0, ;, case, '1', :, return, 0x8, ;, case, '2', :, return]
[{, case, '0', :, return, 0x0, ;, case, '1', :, return, 0x8, ;, case, '2', :, return, 0x4, ;, case]
[:, return, 0x0, ;, case, '1', :, return, 0x8, ;, case, '2', :, return, 0x4, ;, case, '3', :, return]
[;, case, '1', :, return, 0x8, ;, case, '2', :, return, 0x4, ;, case, '3', :, return, 0xC, ;, case]
[:, return, 0x8, ;, case, '2', :, return, 0x4, ;, case, '3', :, return, 0xC, ;, case, '4', :, return]
[;, case, '2', :, return, 0x4, ;, case, '3', :, return, 0xC, ;, case, '4', :, return, 0x2, ;, case]
[:, return, 0x4, ;, case, '3', :, return, 0xC, ;, case, '4', :, return, 0x2, ;, case, '5', :, return]
[;, case, '3', :, return, 0xC, ;, case, '4', :, return, 0x2, ;, case, '5', :, return, 0xA, ;, case]
[:, return, 0xC, ;, case, '4', :, return, 0x2, ;, case, '5', :, return, 0xA, ;, case, '6', :, return]
[;, case, '4', :, return, 0x2, ;, case, '5', :, return, 0xA, ;, case, '6', :, return, 0x6, ;, case]
[:, return, 0x2, ;, case, '5', :, return, 0xA, ;, case, '6', :, return, 0x6, ;, case, '7', :, return]
[;, case, '5', :, return, 0xA, ;, case, '6', :, return, 0x6, ;, case, '7', :, return, 0xE, ;, case]
[:, return, 0xA, ;, case, '6', :, return, 0x6, ;, case, '7', :, return, 0xE, ;, case, '8', :, return]
[;, case, '6', :, return, 0x6, ;, case, '7', :, return, 0xE, ;, case, '8', :, return, 0x1, ;, case]
[:, return, 0x6, ;, case, '7', :, return, 0xE, ;, case, '8', :, return, 0x1, ;, case, '9', :, return]
[;, case, '7', :, return, 0xE, ;, case, '8', :, return, 0x1, ;, case, '9', :, return, 0x9, ;, case]
[:, return, 0xE, ;, case, '8', :, return, 0x1, ;, case, '9', :, return, 0x9, ;, case, 'a', :, case]
[;, case, '8', :, return, 0x1, ;, case, '9', :, return, 0x9, ;, case, 'a', :, case, 'A', :, return]
[:, return, 0x1, ;, case, '9', :, return, 0x9, ;, case, 'a', :, case, 'A', :, return, 0x5, ;, case]
[;, case, '9', :, return, 0x9, ;, case, 'a', :, case, 'A', :, return, 0x5, ;, case, 'b', :, case]
[:, return, 0x9, ;, case, 'a', :, case, 'A', :, return, 0x5, ;, case, 'b', :, case, 'B', :, return]
[;, case, 'a', :, case, 'A', :, return, 0x5, ;, case, 'b', :, case, 'B', :, return, 0xD, ;, case]
[:, case, 'A', :, return, 0x5, ;, case, 'b', :, case, 'B', :, return, 0xD, ;, case, 'c', :, case]
[:, return, 0x5, ;, case, 'b', :, case, 'B', :, return, 0xD, ;, case, 'c', :, case, 'C', :, return]
[;, case, 'b', :, case, 'B', :, return, 0xD, ;, case, 'c', :, case, 'C', :, return, 0x3, ;, case]
[:, case, 'B', :, return, 0xD, ;, case, 'c', :, case, 'C', :, return, 0x3, ;, case, 'd', :, case]
[:, return, 0xD, ;, case, 'c', :, case, 'C', :, return, 0x3, ;, case, 'd', :, case, 'D', :, return]
[;, case, 'c', :, case, 'C', :, return, 0x3, ;, case, 'd', :, case, 'D', :, return, 0xB, ;, case]
[:, case, 'C', :, return, 0x3, ;, case, 'd', :, case, 'D', :, return, 0xB, ;, case, 'e', :, case]
[:, return, 0x3, ;, case, 'd', :, case, 'D', :, return, 0xB, ;, case, 'e', :, case, 'E', :, return]
[;, case, 'd', :, case, 'D', :, return, 0xB, ;, case, 'e', :, case, 'E', :, return, 0x7, ;, case]
[:, case, 'D', :, return, 0xB, ;, case, 'e', :, case, 'E', :, return, 0x7, ;, case, 'f', :, case]
[:, return, 0xB, ;, case, 'e', :, case, 'E', :, return, 0x7, ;, case, 'f', :, case, 'F', :, return]
['e', :, case, 'E', :, return, 0x7, ;, case, 'f', :, case, 'F', :, return, 0xF, ;, default, :, throw]
['E', :, return, 0x7, ;, case, 'f', :, case, 'F', :, return, 0xF, ;, default, :, throw, new, IllegalArgumentException, (]
['E', :, return, 0x7, ;, case, 'f', :, case, 'F', :, return, 0xF, ;, default, :, throw, new, IllegalArgumentException, (]
['E', :, return, 0x7, ;, case, 'f', :, case, 'F', :, return, 0xF, ;, default, :, throw, new, IllegalArgumentException, (]
[return, 0x7, ;, case, 'f', :, case, 'F', :, return, 0xF, ;, default, :, throw, new, IllegalArgumentException, (, "Cannot interpret '", +]
[;, case, 'f', :, case, 'F', :, return, 0xF, ;, default, :, throw, new, IllegalArgumentException, (, "Cannot interpret '", +, hexDigit, +]
[+, "' as a hexadecimal digit", ), ;, }, }, public, static, boolean, [, ], hexDigitToBinary, (, final, char, hexDigit, ), {, switch, (]
[}, }, public, static, boolean, [, ], hexDigitToBinary, (, final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case]
[static, boolean, [, ], hexDigitToBinary, (, final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case, '0', :, return]
[hexDigitToBinary, (, final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case, '0', :, return, new, boolean, [, ]]
[(, final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case, '0', :, return, new, boolean, [, ], {]
[char, hexDigit, ), {, switch, (, hexDigit, ), {, case, '0', :, return, new, boolean, [, ], {, false, ,]
[), {, switch, (, hexDigit, ), {, case, '0', :, return, new, boolean, [, ], {, false, ,, false, ,]
[switch, (, hexDigit, ), {, case, '0', :, return, new, boolean, [, ], {, false, ,, false, ,, false, ,]
[{, case, '0', :, return, new, boolean, [, ], {, false, ,, false, ,, false, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, false, ,, false, ,, false, }, ;, case, '1', :, return]
[[, ], {, false, ,, false, ,, false, ,, false, }, ;, case, '1', :, return, new, boolean, [, ]]
[], {, false, ,, false, ,, false, ,, false, }, ;, case, '1', :, return, new, boolean, [, ], {]
[false, ,, false, ,, false, ,, false, }, ;, case, '1', :, return, new, boolean, [, ], {, true, ,]
[false, ,, false, ,, false, }, ;, case, '1', :, return, new, boolean, [, ], {, true, ,, false, ,]
[false, ,, false, }, ;, case, '1', :, return, new, boolean, [, ], {, true, ,, false, ,, false, ,]
[;, case, '1', :, return, new, boolean, [, ], {, true, ,, false, ,, false, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, false, ,, false, ,, false, }, ;, case, '2', :, return]
[[, ], {, true, ,, false, ,, false, ,, false, }, ;, case, '2', :, return, new, boolean, [, ]]
[], {, true, ,, false, ,, false, ,, false, }, ;, case, '2', :, return, new, boolean, [, ], {]
[true, ,, false, ,, false, ,, false, }, ;, case, '2', :, return, new, boolean, [, ], {, false, ,]
[false, ,, false, ,, false, }, ;, case, '2', :, return, new, boolean, [, ], {, false, ,, true, ,]
[false, ,, false, }, ;, case, '2', :, return, new, boolean, [, ], {, false, ,, true, ,, false, ,]
[;, case, '2', :, return, new, boolean, [, ], {, false, ,, true, ,, false, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, true, ,, false, ,, false, }, ;, case, '3', :, return]
[[, ], {, false, ,, true, ,, false, ,, false, }, ;, case, '3', :, return, new, boolean, [, ]]
[], {, false, ,, true, ,, false, ,, false, }, ;, case, '3', :, return, new, boolean, [, ], {]
[false, ,, true, ,, false, ,, false, }, ;, case, '3', :, return, new, boolean, [, ], {, true, ,]
[true, ,, false, ,, false, }, ;, case, '3', :, return, new, boolean, [, ], {, true, ,, true, ,]
[false, ,, false, }, ;, case, '3', :, return, new, boolean, [, ], {, true, ,, true, ,, false, ,]
[;, case, '3', :, return, new, boolean, [, ], {, true, ,, true, ,, false, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, true, ,, false, ,, false, }, ;, case, '4', :, return]
[[, ], {, true, ,, true, ,, false, ,, false, }, ;, case, '4', :, return, new, boolean, [, ]]
[], {, true, ,, true, ,, false, ,, false, }, ;, case, '4', :, return, new, boolean, [, ], {]
[true, ,, true, ,, false, ,, false, }, ;, case, '4', :, return, new, boolean, [, ], {, false, ,]
[true, ,, false, ,, false, }, ;, case, '4', :, return, new, boolean, [, ], {, false, ,, false, ,]
[false, ,, false, }, ;, case, '4', :, return, new, boolean, [, ], {, false, ,, false, ,, true, ,]
[;, case, '4', :, return, new, boolean, [, ], {, false, ,, false, ,, true, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, false, ,, true, ,, false, }, ;, case, '5', :, return]
[[, ], {, false, ,, false, ,, true, ,, false, }, ;, case, '5', :, return, new, boolean, [, ]]
[], {, false, ,, false, ,, true, ,, false, }, ;, case, '5', :, return, new, boolean, [, ], {]
[false, ,, false, ,, true, ,, false, }, ;, case, '5', :, return, new, boolean, [, ], {, true, ,]
[false, ,, true, ,, false, }, ;, case, '5', :, return, new, boolean, [, ], {, true, ,, false, ,]
[true, ,, false, }, ;, case, '5', :, return, new, boolean, [, ], {, true, ,, false, ,, true, ,]
[;, case, '5', :, return, new, boolean, [, ], {, true, ,, false, ,, true, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, false, ,, true, ,, false, }, ;, case, '6', :, return]
[[, ], {, true, ,, false, ,, true, ,, false, }, ;, case, '6', :, return, new, boolean, [, ]]
[], {, true, ,, false, ,, true, ,, false, }, ;, case, '6', :, return, new, boolean, [, ], {]
[true, ,, false, ,, true, ,, false, }, ;, case, '6', :, return, new, boolean, [, ], {, false, ,]
[false, ,, true, ,, false, }, ;, case, '6', :, return, new, boolean, [, ], {, false, ,, true, ,]
[true, ,, false, }, ;, case, '6', :, return, new, boolean, [, ], {, false, ,, true, ,, true, ,]
[;, case, '6', :, return, new, boolean, [, ], {, false, ,, true, ,, true, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, true, ,, true, ,, false, }, ;, case, '7', :, return]
[[, ], {, false, ,, true, ,, true, ,, false, }, ;, case, '7', :, return, new, boolean, [, ]]
[], {, false, ,, true, ,, true, ,, false, }, ;, case, '7', :, return, new, boolean, [, ], {]
[false, ,, true, ,, true, ,, false, }, ;, case, '7', :, return, new, boolean, [, ], {, true, ,]
[true, ,, true, ,, false, }, ;, case, '7', :, return, new, boolean, [, ], {, true, ,, true, ,]
[true, ,, false, }, ;, case, '7', :, return, new, boolean, [, ], {, true, ,, true, ,, true, ,]
[;, case, '7', :, return, new, boolean, [, ], {, true, ,, true, ,, true, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, true, ,, true, ,, false, }, ;, case, '8', :, return]
[[, ], {, true, ,, true, ,, true, ,, false, }, ;, case, '8', :, return, new, boolean, [, ]]
[], {, true, ,, true, ,, true, ,, false, }, ;, case, '8', :, return, new, boolean, [, ], {]
[true, ,, true, ,, true, ,, false, }, ;, case, '8', :, return, new, boolean, [, ], {, false, ,]
[true, ,, true, ,, false, }, ;, case, '8', :, return, new, boolean, [, ], {, false, ,, false, ,]
[true, ,, false, }, ;, case, '8', :, return, new, boolean, [, ], {, false, ,, false, ,, false, ,]
[;, case, '8', :, return, new, boolean, [, ], {, false, ,, false, ,, false, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, false, ,, false, ,, true, }, ;, case, '9', :, return]
[[, ], {, false, ,, false, ,, false, ,, true, }, ;, case, '9', :, return, new, boolean, [, ]]
[], {, false, ,, false, ,, false, ,, true, }, ;, case, '9', :, return, new, boolean, [, ], {]
[false, ,, false, ,, false, ,, true, }, ;, case, '9', :, return, new, boolean, [, ], {, true, ,]
[false, ,, false, ,, true, }, ;, case, '9', :, return, new, boolean, [, ], {, true, ,, false, ,]
[false, ,, true, }, ;, case, '9', :, return, new, boolean, [, ], {, true, ,, false, ,, false, ,]
[;, case, '9', :, return, new, boolean, [, ], {, true, ,, false, ,, false, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, false, ,, false, ,, true, }, ;, case, 'a', :, case]
[boolean, [, ], {, true, ,, false, ,, false, ,, true, }, ;, case, 'a', :, case, 'A', :, return]
[true, ,, false, ,, false, ,, true, }, ;, case, 'a', :, case, 'A', :, return, new, boolean, [, ]]
[,, false, ,, false, ,, true, }, ;, case, 'a', :, case, 'A', :, return, new, boolean, [, ], {]
[,, false, ,, true, }, ;, case, 'a', :, case, 'A', :, return, new, boolean, [, ], {, false, ,]
[,, true, }, ;, case, 'a', :, case, 'A', :, return, new, boolean, [, ], {, false, ,, true, ,]
[}, ;, case, 'a', :, case, 'A', :, return, new, boolean, [, ], {, false, ,, true, ,, false, ,]
[:, case, 'A', :, return, new, boolean, [, ], {, false, ,, true, ,, false, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, true, ,, false, ,, true, }, ;, case, 'b', :, case]
[boolean, [, ], {, false, ,, true, ,, false, ,, true, }, ;, case, 'b', :, case, 'B', :, return]
[false, ,, true, ,, false, ,, true, }, ;, case, 'b', :, case, 'B', :, return, new, boolean, [, ]]
[,, true, ,, false, ,, true, }, ;, case, 'b', :, case, 'B', :, return, new, boolean, [, ], {]
[,, false, ,, true, }, ;, case, 'b', :, case, 'B', :, return, new, boolean, [, ], {, true, ,]
[,, true, }, ;, case, 'b', :, case, 'B', :, return, new, boolean, [, ], {, true, ,, true, ,]
[}, ;, case, 'b', :, case, 'B', :, return, new, boolean, [, ], {, true, ,, true, ,, false, ,]
[:, case, 'B', :, return, new, boolean, [, ], {, true, ,, true, ,, false, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, true, ,, false, ,, true, }, ;, case, 'c', :, case]
[boolean, [, ], {, true, ,, true, ,, false, ,, true, }, ;, case, 'c', :, case, 'C', :, return]
[true, ,, true, ,, false, ,, true, }, ;, case, 'c', :, case, 'C', :, return, new, boolean, [, ]]
[,, true, ,, false, ,, true, }, ;, case, 'c', :, case, 'C', :, return, new, boolean, [, ], {]
[,, false, ,, true, }, ;, case, 'c', :, case, 'C', :, return, new, boolean, [, ], {, false, ,]
[,, true, }, ;, case, 'c', :, case, 'C', :, return, new, boolean, [, ], {, false, ,, false, ,]
[}, ;, case, 'c', :, case, 'C', :, return, new, boolean, [, ], {, false, ,, false, ,, true, ,]
[:, case, 'C', :, return, new, boolean, [, ], {, false, ,, false, ,, true, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, false, ,, true, ,, true, }, ;, case, 'd', :, case]
[boolean, [, ], {, false, ,, false, ,, true, ,, true, }, ;, case, 'd', :, case, 'D', :, return]
[false, ,, false, ,, true, ,, true, }, ;, case, 'd', :, case, 'D', :, return, new, boolean, [, ]]
[,, false, ,, true, ,, true, }, ;, case, 'd', :, case, 'D', :, return, new, boolean, [, ], {]
[,, true, ,, true, }, ;, case, 'd', :, case, 'D', :, return, new, boolean, [, ], {, true, ,]
[,, true, }, ;, case, 'd', :, case, 'D', :, return, new, boolean, [, ], {, true, ,, false, ,]
[}, ;, case, 'd', :, case, 'D', :, return, new, boolean, [, ], {, true, ,, false, ,, true, ,]
[:, case, 'D', :, return, new, boolean, [, ], {, true, ,, false, ,, true, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, false, ,, true, ,, true, }, ;, case, 'e', :, case]
[boolean, [, ], {, true, ,, false, ,, true, ,, true, }, ;, case, 'e', :, case, 'E', :, return]
[true, ,, false, ,, true, ,, true, }, ;, case, 'e', :, case, 'E', :, return, new, boolean, [, ]]
[,, false, ,, true, ,, true, }, ;, case, 'e', :, case, 'E', :, return, new, boolean, [, ], {]
[,, true, ,, true, }, ;, case, 'e', :, case, 'E', :, return, new, boolean, [, ], {, false, ,]
[,, true, }, ;, case, 'e', :, case, 'E', :, return, new, boolean, [, ], {, false, ,, true, ,]
[}, ;, case, 'e', :, case, 'E', :, return, new, boolean, [, ], {, false, ,, true, ,, true, ,]
[:, case, 'E', :, return, new, boolean, [, ], {, false, ,, true, ,, true, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, true, ,, true, ,, true, }, ;, case, 'f', :, case]
[boolean, [, ], {, false, ,, true, ,, true, ,, true, }, ;, case, 'f', :, case, 'F', :, return]
[false, ,, true, ,, true, ,, true, }, ;, case, 'f', :, case, 'F', :, return, new, boolean, [, ]]
[,, true, ,, true, ,, true, }, ;, case, 'f', :, case, 'F', :, return, new, boolean, [, ], {]
[,, true, ,, true, }, ;, case, 'f', :, case, 'F', :, return, new, boolean, [, ], {, true, ,]
[,, true, }, ;, case, 'f', :, case, 'F', :, return, new, boolean, [, ], {, true, ,, true, ,]
[}, ;, case, 'f', :, case, 'F', :, return, new, boolean, [, ], {, true, ,, true, ,, true, ,]
['F', :, return, new, boolean, [, ], {, true, ,, true, ,, true, ,, true, }, ;, default, :, throw]
[new, boolean, [, ], {, true, ,, true, ,, true, ,, true, }, ;, default, :, throw, new, IllegalArgumentException, (]
[new, boolean, [, ], {, true, ,, true, ,, true, ,, true, }, ;, default, :, throw, new, IllegalArgumentException, (]
[new, boolean, [, ], {, true, ,, true, ,, true, ,, true, }, ;, default, :, throw, new, IllegalArgumentException, (]
[[, ], {, true, ,, true, ,, true, ,, true, }, ;, default, :, throw, new, IllegalArgumentException, (, "Cannot interpret '", +]
[{, true, ,, true, ,, true, ,, true, }, ;, default, :, throw, new, IllegalArgumentException, (, "Cannot interpret '", +, hexDigit, +]
[+, "' as a hexadecimal digit", ), ;, }, }, public, static, boolean, [, ], hexDigitMsb0ToBinary, (, final, char, hexDigit, ), {, switch, (]
[}, }, public, static, boolean, [, ], hexDigitMsb0ToBinary, (, final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case]
[static, boolean, [, ], hexDigitMsb0ToBinary, (, final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case, '0', :, return]
[hexDigitMsb0ToBinary, (, final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case, '0', :, return, new, boolean, [, ]]
[(, final, char, hexDigit, ), {, switch, (, hexDigit, ), {, case, '0', :, return, new, boolean, [, ], {]
[char, hexDigit, ), {, switch, (, hexDigit, ), {, case, '0', :, return, new, boolean, [, ], {, false, ,]
[), {, switch, (, hexDigit, ), {, case, '0', :, return, new, boolean, [, ], {, false, ,, false, ,]
[switch, (, hexDigit, ), {, case, '0', :, return, new, boolean, [, ], {, false, ,, false, ,, false, ,]
[{, case, '0', :, return, new, boolean, [, ], {, false, ,, false, ,, false, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, false, ,, false, ,, false, }, ;, case, '1', :, return]
[[, ], {, false, ,, false, ,, false, ,, false, }, ;, case, '1', :, return, new, boolean, [, ]]
[], {, false, ,, false, ,, false, ,, false, }, ;, case, '1', :, return, new, boolean, [, ], {]
[false, ,, false, ,, false, ,, false, }, ;, case, '1', :, return, new, boolean, [, ], {, false, ,]
[false, ,, false, ,, false, }, ;, case, '1', :, return, new, boolean, [, ], {, false, ,, false, ,]
[false, ,, false, }, ;, case, '1', :, return, new, boolean, [, ], {, false, ,, false, ,, false, ,]
[;, case, '1', :, return, new, boolean, [, ], {, false, ,, false, ,, false, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, false, ,, false, ,, true, }, ;, case, '2', :, return]
[[, ], {, false, ,, false, ,, false, ,, true, }, ;, case, '2', :, return, new, boolean, [, ]]
[], {, false, ,, false, ,, false, ,, true, }, ;, case, '2', :, return, new, boolean, [, ], {]
[false, ,, false, ,, false, ,, true, }, ;, case, '2', :, return, new, boolean, [, ], {, false, ,]
[false, ,, false, ,, true, }, ;, case, '2', :, return, new, boolean, [, ], {, false, ,, false, ,]
[false, ,, true, }, ;, case, '2', :, return, new, boolean, [, ], {, false, ,, false, ,, true, ,]
[;, case, '2', :, return, new, boolean, [, ], {, false, ,, false, ,, true, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, false, ,, true, ,, false, }, ;, case, '3', :, return]
[[, ], {, false, ,, false, ,, true, ,, false, }, ;, case, '3', :, return, new, boolean, [, ]]
[], {, false, ,, false, ,, true, ,, false, }, ;, case, '3', :, return, new, boolean, [, ], {]
[false, ,, false, ,, true, ,, false, }, ;, case, '3', :, return, new, boolean, [, ], {, false, ,]
[false, ,, true, ,, false, }, ;, case, '3', :, return, new, boolean, [, ], {, false, ,, false, ,]
[true, ,, false, }, ;, case, '3', :, return, new, boolean, [, ], {, false, ,, false, ,, true, ,]
[;, case, '3', :, return, new, boolean, [, ], {, false, ,, false, ,, true, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, false, ,, true, ,, true, }, ;, case, '4', :, return]
[[, ], {, false, ,, false, ,, true, ,, true, }, ;, case, '4', :, return, new, boolean, [, ]]
[], {, false, ,, false, ,, true, ,, true, }, ;, case, '4', :, return, new, boolean, [, ], {]
[false, ,, false, ,, true, ,, true, }, ;, case, '4', :, return, new, boolean, [, ], {, false, ,]
[false, ,, true, ,, true, }, ;, case, '4', :, return, new, boolean, [, ], {, false, ,, true, ,]
[true, ,, true, }, ;, case, '4', :, return, new, boolean, [, ], {, false, ,, true, ,, false, ,]
[;, case, '4', :, return, new, boolean, [, ], {, false, ,, true, ,, false, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, true, ,, false, ,, false, }, ;, case, '5', :, return]
[[, ], {, false, ,, true, ,, false, ,, false, }, ;, case, '5', :, return, new, boolean, [, ]]
[], {, false, ,, true, ,, false, ,, false, }, ;, case, '5', :, return, new, boolean, [, ], {]
[false, ,, true, ,, false, ,, false, }, ;, case, '5', :, return, new, boolean, [, ], {, false, ,]
[true, ,, false, ,, false, }, ;, case, '5', :, return, new, boolean, [, ], {, false, ,, true, ,]
[false, ,, false, }, ;, case, '5', :, return, new, boolean, [, ], {, false, ,, true, ,, false, ,]
[;, case, '5', :, return, new, boolean, [, ], {, false, ,, true, ,, false, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, true, ,, false, ,, true, }, ;, case, '6', :, return]
[[, ], {, false, ,, true, ,, false, ,, true, }, ;, case, '6', :, return, new, boolean, [, ]]
[], {, false, ,, true, ,, false, ,, true, }, ;, case, '6', :, return, new, boolean, [, ], {]
[false, ,, true, ,, false, ,, true, }, ;, case, '6', :, return, new, boolean, [, ], {, false, ,]
[true, ,, false, ,, true, }, ;, case, '6', :, return, new, boolean, [, ], {, false, ,, true, ,]
[false, ,, true, }, ;, case, '6', :, return, new, boolean, [, ], {, false, ,, true, ,, true, ,]
[;, case, '6', :, return, new, boolean, [, ], {, false, ,, true, ,, true, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, true, ,, true, ,, false, }, ;, case, '7', :, return]
[[, ], {, false, ,, true, ,, true, ,, false, }, ;, case, '7', :, return, new, boolean, [, ]]
[], {, false, ,, true, ,, true, ,, false, }, ;, case, '7', :, return, new, boolean, [, ], {]
[false, ,, true, ,, true, ,, false, }, ;, case, '7', :, return, new, boolean, [, ], {, false, ,]
[true, ,, true, ,, false, }, ;, case, '7', :, return, new, boolean, [, ], {, false, ,, true, ,]
[true, ,, false, }, ;, case, '7', :, return, new, boolean, [, ], {, false, ,, true, ,, true, ,]
[;, case, '7', :, return, new, boolean, [, ], {, false, ,, true, ,, true, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, false, ,, true, ,, true, ,, true, }, ;, case, '8', :, return]
[[, ], {, false, ,, true, ,, true, ,, true, }, ;, case, '8', :, return, new, boolean, [, ]]
[], {, false, ,, true, ,, true, ,, true, }, ;, case, '8', :, return, new, boolean, [, ], {]
[false, ,, true, ,, true, ,, true, }, ;, case, '8', :, return, new, boolean, [, ], {, true, ,]
[true, ,, true, ,, true, }, ;, case, '8', :, return, new, boolean, [, ], {, true, ,, false, ,]
[true, ,, true, }, ;, case, '8', :, return, new, boolean, [, ], {, true, ,, false, ,, false, ,]
[;, case, '8', :, return, new, boolean, [, ], {, true, ,, false, ,, false, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, false, ,, false, ,, false, }, ;, case, '9', :, return]
[[, ], {, true, ,, false, ,, false, ,, false, }, ;, case, '9', :, return, new, boolean, [, ]]
[], {, true, ,, false, ,, false, ,, false, }, ;, case, '9', :, return, new, boolean, [, ], {]
[true, ,, false, ,, false, ,, false, }, ;, case, '9', :, return, new, boolean, [, ], {, true, ,]
[false, ,, false, ,, false, }, ;, case, '9', :, return, new, boolean, [, ], {, true, ,, false, ,]
[false, ,, false, }, ;, case, '9', :, return, new, boolean, [, ], {, true, ,, false, ,, false, ,]
[;, case, '9', :, return, new, boolean, [, ], {, true, ,, false, ,, false, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, false, ,, false, ,, true, }, ;, case, 'a', :, case]
[boolean, [, ], {, true, ,, false, ,, false, ,, true, }, ;, case, 'a', :, case, 'A', :, return]
[true, ,, false, ,, false, ,, true, }, ;, case, 'a', :, case, 'A', :, return, new, boolean, [, ]]
[,, false, ,, false, ,, true, }, ;, case, 'a', :, case, 'A', :, return, new, boolean, [, ], {]
[,, false, ,, true, }, ;, case, 'a', :, case, 'A', :, return, new, boolean, [, ], {, true, ,]
[,, true, }, ;, case, 'a', :, case, 'A', :, return, new, boolean, [, ], {, true, ,, false, ,]
[}, ;, case, 'a', :, case, 'A', :, return, new, boolean, [, ], {, true, ,, false, ,, true, ,]
[:, case, 'A', :, return, new, boolean, [, ], {, true, ,, false, ,, true, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, false, ,, true, ,, false, }, ;, case, 'b', :, case]
[boolean, [, ], {, true, ,, false, ,, true, ,, false, }, ;, case, 'b', :, case, 'B', :, return]
[true, ,, false, ,, true, ,, false, }, ;, case, 'b', :, case, 'B', :, return, new, boolean, [, ]]
[,, false, ,, true, ,, false, }, ;, case, 'b', :, case, 'B', :, return, new, boolean, [, ], {]
[,, true, ,, false, }, ;, case, 'b', :, case, 'B', :, return, new, boolean, [, ], {, true, ,]
[,, false, }, ;, case, 'b', :, case, 'B', :, return, new, boolean, [, ], {, true, ,, false, ,]
[}, ;, case, 'b', :, case, 'B', :, return, new, boolean, [, ], {, true, ,, false, ,, true, ,]
[:, case, 'B', :, return, new, boolean, [, ], {, true, ,, false, ,, true, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, false, ,, true, ,, true, }, ;, case, 'c', :, case]
[boolean, [, ], {, true, ,, false, ,, true, ,, true, }, ;, case, 'c', :, case, 'C', :, return]
[true, ,, false, ,, true, ,, true, }, ;, case, 'c', :, case, 'C', :, return, new, boolean, [, ]]
[,, false, ,, true, ,, true, }, ;, case, 'c', :, case, 'C', :, return, new, boolean, [, ], {]
[,, true, ,, true, }, ;, case, 'c', :, case, 'C', :, return, new, boolean, [, ], {, true, ,]
[,, true, }, ;, case, 'c', :, case, 'C', :, return, new, boolean, [, ], {, true, ,, true, ,]
[}, ;, case, 'c', :, case, 'C', :, return, new, boolean, [, ], {, true, ,, true, ,, false, ,]
[:, case, 'C', :, return, new, boolean, [, ], {, true, ,, true, ,, false, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, true, ,, false, ,, false, }, ;, case, 'd', :, case]
[boolean, [, ], {, true, ,, true, ,, false, ,, false, }, ;, case, 'd', :, case, 'D', :, return]
[true, ,, true, ,, false, ,, false, }, ;, case, 'd', :, case, 'D', :, return, new, boolean, [, ]]
[,, true, ,, false, ,, false, }, ;, case, 'd', :, case, 'D', :, return, new, boolean, [, ], {]
[,, false, ,, false, }, ;, case, 'd', :, case, 'D', :, return, new, boolean, [, ], {, true, ,]
[,, false, }, ;, case, 'd', :, case, 'D', :, return, new, boolean, [, ], {, true, ,, true, ,]
[}, ;, case, 'd', :, case, 'D', :, return, new, boolean, [, ], {, true, ,, true, ,, false, ,]
[:, case, 'D', :, return, new, boolean, [, ], {, true, ,, true, ,, false, ,, true, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, true, ,, false, ,, true, }, ;, case, 'e', :, case]
[boolean, [, ], {, true, ,, true, ,, false, ,, true, }, ;, case, 'e', :, case, 'E', :, return]
[true, ,, true, ,, false, ,, true, }, ;, case, 'e', :, case, 'E', :, return, new, boolean, [, ]]
[,, true, ,, false, ,, true, }, ;, case, 'e', :, case, 'E', :, return, new, boolean, [, ], {]
[,, false, ,, true, }, ;, case, 'e', :, case, 'E', :, return, new, boolean, [, ], {, true, ,]
[,, true, }, ;, case, 'e', :, case, 'E', :, return, new, boolean, [, ], {, true, ,, true, ,]
[}, ;, case, 'e', :, case, 'E', :, return, new, boolean, [, ], {, true, ,, true, ,, true, ,]
[:, case, 'E', :, return, new, boolean, [, ], {, true, ,, true, ,, true, ,, false, }, ;, case]
[:, return, new, boolean, [, ], {, true, ,, true, ,, true, ,, false, }, ;, case, 'f', :, case]
[boolean, [, ], {, true, ,, true, ,, true, ,, false, }, ;, case, 'f', :, case, 'F', :, return]
[true, ,, true, ,, true, ,, false, }, ;, case, 'f', :, case, 'F', :, return, new, boolean, [, ]]
[,, true, ,, true, ,, false, }, ;, case, 'f', :, case, 'F', :, return, new, boolean, [, ], {]
[,, true, ,, false, }, ;, case, 'f', :, case, 'F', :, return, new, boolean, [, ], {, true, ,]
[,, false, }, ;, case, 'f', :, case, 'F', :, return, new, boolean, [, ], {, true, ,, true, ,]
[}, ;, case, 'f', :, case, 'F', :, return, new, boolean, [, ], {, true, ,, true, ,, true, ,]
['F', :, return, new, boolean, [, ], {, true, ,, true, ,, true, ,, true, }, ;, default, :, throw]
[new, boolean, [, ], {, true, ,, true, ,, true, ,, true, }, ;, default, :, throw, new, IllegalArgumentException, (]
[new, boolean, [, ], {, true, ,, true, ,, true, ,, true, }, ;, default, :, throw, new, IllegalArgumentException, (]
[new, boolean, [, ], {, true, ,, true, ,, true, ,, true, }, ;, default, :, throw, new, IllegalArgumentException, (]
[[, ], {, true, ,, true, ,, true, ,, true, }, ;, default, :, throw, new, IllegalArgumentException, (, "Cannot interpret '", +]
[{, true, ,, true, ,, true, ,, true, }, ;, default, :, throw, new, IllegalArgumentException, (, "Cannot interpret '", +, hexDigit, +]
[hexDigit, +, "' as a hexadecimal digit", ), ;, }, }, public, static, char, binaryToHexDigit, (, final, boolean, [, ], src, ), {, return]
["' as a hexadecimal digit", ), ;, }, }, public, static, char, binaryToHexDigit, (, final, boolean, [, ], src, ), {, return, binaryToHexDigit, (]
[;, }, }, public, static, char, binaryToHexDigit, (, final, boolean, [, ], src, ), {, return, binaryToHexDigit, (, src, ,]
[;, }, public, static, char, binaryToHexDigit, (, final, boolean, [, ], src, ,, final, int, srcPos, ), {, if, (]
[;, }, public, static, char, binaryToHexDigit, (, final, boolean, [, ], src, ,, final, int, srcPos, ), {, if, (]
[;, }, public, static, char, binaryToHexDigit, (, final, boolean, [, ], src, ,, final, int, srcPos, ), {, if, (]
[char, binaryToHexDigit, (, final, boolean, [, ], src, ,, final, int, srcPos, ), {, if, (, src, ., length, ==]
[boolean, [, ], src, ,, final, int, srcPos, ), {, if, (, src, ., length, ==, 0, ), {, throw]
[src, ,, final, int, srcPos, ), {, if, (, src, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, src, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (]
[{, if, (, src, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (]
[{, if, (, src, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (]
[{, if, (, src, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (]
[., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (, src, ., length, >]
[., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (, src, ., length, >]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (, src, ., length, >, srcPos, +]
[), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (, src, ., length, >, srcPos, +, 3, &&]
[), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (, src, ., length, >, srcPos, +, 3, &&]
[throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, if, (]
[length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, if, (, src, ., length, >]
[length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, if, (, src, ., length, >]
[srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, if, (, src, ., length, >, srcPos, +]
[3, &&, src, [, srcPos, +, 3, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&]
[3, &&, src, [, srcPos, +, 3, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&]
[src, [, srcPos, +, 3, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
[src, [, srcPos, +, 3, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
[srcPos, +, 3, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&]
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
[srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, []
[+, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return]
[+, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return, 'f', ;, }, else, {, return]
[[, srcPos, ], ), {, return, 'f', ;, }, else, {, return, 'e', ;, }, }, else, {, if, (]
[[, srcPos, ], ), {, return, 'f', ;, }, else, {, return, 'e', ;, }, }, else, {, if, (]
[], ), {, return, 'f', ;, }, else, {, return, 'e', ;, }, }, else, {, if, (, src, []
[;, }, else, {, return, 'e', ;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return]
[;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return, 'd', ;, }, else, {, return]
[srcPos, ], ), {, return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (]
[srcPos, ], ), {, return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (]
[srcPos, ], ), {, return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (]
[srcPos, ], ), {, return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (]
[return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >]
[return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >]
[;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +]
[else, {, return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&]
[else, {, return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&]
[return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
[return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
[;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, []
[+, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return]
[+, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return, 'b', ;, }, else, {, return]
[[, srcPos, ], ), {, return, 'b', ;, }, else, {, return, 'a', ;, }, }, else, {, if, (]
[[, srcPos, ], ), {, return, 'b', ;, }, else, {, return, 'a', ;, }, }, else, {, if, (]
[], ), {, return, 'b', ;, }, else, {, return, 'a', ;, }, }, else, {, if, (, src, []
[;, }, else, {, return, 'a', ;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return]
[;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return, '9', ;, }, else, {, return]
[], ), {, return, '9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (]
[], ), {, return, '9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (]
[], ), {, return, '9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (]
[], ), {, return, '9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (]
['9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (, src, ., length, >]
['9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (, src, ., length, >]
[}, else, {, return, '8', ;, }, }, }, }, else, {, if, (, src, ., length, >, srcPos, +]
[{, return, '8', ;, }, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&]
[{, return, '8', ;, }, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&]
['8', ;, }, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
['8', ;, }, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
[}, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&]
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
[srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, []
[+, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return]
[+, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return, '7', ;, }, else, {, return]
[[, srcPos, ], ), {, return, '7', ;, }, else, {, return, '6', ;, }, }, else, {, if, (]
[[, srcPos, ], ), {, return, '7', ;, }, else, {, return, '6', ;, }, }, else, {, if, (]
[], ), {, return, '7', ;, }, else, {, return, '6', ;, }, }, else, {, if, (, src, []
[;, }, else, {, return, '6', ;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return]
[;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return, '5', ;, }, else, {, return]
[srcPos, ], ), {, return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (]
[srcPos, ], ), {, return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (]
[srcPos, ], ), {, return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (]
[srcPos, ], ), {, return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (]
[return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (, src, ., length, >]
[return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (, src, ., length, >]
[;, }, else, {, return, '4', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +]
[else, {, return, '4', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&]
[else, {, return, '4', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&]
[return, '4', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
[return, '4', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
[;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, []
[+, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return]
[+, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return, '3', ;, }, else, {, return]
[[, srcPos, ], ), {, return, '3', ;, }, else, {, return, '2', ;, }, }, else, {, if, (]
[[, srcPos, ], ), {, return, '3', ;, }, else, {, return, '2', ;, }, }, else, {, if, (]
[], ), {, return, '3', ;, }, else, {, return, '2', ;, }, }, else, {, if, (, src, []
[;, }, else, {, return, '2', ;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return]
[;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return, '1', ;, }, else, {, return]
['0', ;, }, }, }, }, }, public, static, char, binaryToHexDigitMsb0_4bits, (, final, boolean, [, ], src, ), {, return]
[}, }, }, }, }, public, static, char, binaryToHexDigitMsb0_4bits, (, final, boolean, [, ], src, ), {, return, binaryToHexDigitMsb0_4bits, (]
[}, }, }, public, static, char, binaryToHexDigitMsb0_4bits, (, final, boolean, [, ], src, ), {, return, binaryToHexDigitMsb0_4bits, (, src, ,]
[;, }, public, static, char, binaryToHexDigitMsb0_4bits, (, final, boolean, [, ], src, ,, final, int, srcPos, ), {, if, (]
[;, }, public, static, char, binaryToHexDigitMsb0_4bits, (, final, boolean, [, ], src, ,, final, int, srcPos, ), {, if, (]
[;, }, public, static, char, binaryToHexDigitMsb0_4bits, (, final, boolean, [, ], src, ,, final, int, srcPos, ), {, if, (]
[char, binaryToHexDigitMsb0_4bits, (, final, boolean, [, ], src, ,, final, int, srcPos, ), {, if, (, src, ., length, >]
[boolean, [, ], src, ,, final, int, srcPos, ), {, if, (, src, ., length, >, 8, ), {, throw]
[src, ,, final, int, srcPos, ), {, if, (, src, ., length, >, 8, ), {, throw, new, IllegalArgumentException, (]
[src, ,, final, int, srcPos, ), {, if, (, src, ., length, >, 8, ), {, throw, new, IllegalArgumentException, (]
[final, int, srcPos, ), {, if, (, src, ., length, >, 8, ), {, throw, new, IllegalArgumentException, (, "src.length>8: src.length=", +]
[final, int, srcPos, ), {, if, (, src, ., length, >, 8, ), {, throw, new, IllegalArgumentException, (, "src.length>8: src.length=", +]
[., length, >, 8, ), {, throw, new, IllegalArgumentException, (, "src.length>8: src.length=", +, src, ., length, ), ;, }, if, (]
[., length, >, 8, ), {, throw, new, IllegalArgumentException, (, "src.length>8: src.length=", +, src, ., length, ), ;, }, if, (]
[., length, >, 8, ), {, throw, new, IllegalArgumentException, (, "src.length>8: src.length=", +, src, ., length, ), ;, }, if, (]
[., length, >, 8, ), {, throw, new, IllegalArgumentException, (, "src.length>8: src.length=", +, src, ., length, ), ;, }, if, (]
[), {, throw, new, IllegalArgumentException, (, "src.length>8: src.length=", +, src, ., length, ), ;, }, if, (, src, ., length, -]
[throw, new, IllegalArgumentException, (, "src.length>8: src.length=", +, src, ., length, ), ;, }, if, (, src, ., length, -, srcPos, <]
["src.length>8: src.length=", +, src, ., length, ), ;, }, if, (, src, ., length, -, srcPos, <, 4, ), {, throw]
[., length, ), ;, }, if, (, src, ., length, -, srcPos, <, 4, ), {, throw, new, IllegalArgumentException, (]
[., length, ), ;, }, if, (, src, ., length, -, srcPos, <, 4, ), {, throw, new, IllegalArgumentException, (]
[., length, ), ;, }, if, (, src, ., length, -, srcPos, <, 4, ), {, throw, new, IllegalArgumentException, (]
[., length, ), ;, }, if, (, src, ., length, -, srcPos, <, 4, ), {, throw, new, IllegalArgumentException, (]
[), ;, }, if, (, src, ., length, -, srcPos, <, 4, ), {, throw, new, IllegalArgumentException, (, "src.length-srcPos<4: src.length=", +]
[), ;, }, if, (, src, ., length, -, srcPos, <, 4, ), {, throw, new, IllegalArgumentException, (, "src.length-srcPos<4: src.length=", +]
[(, src, ., length, -, srcPos, <, 4, ), {, throw, new, IllegalArgumentException, (, "src.length-srcPos<4: src.length=", +, src, ., length, +]
[., length, -, srcPos, <, 4, ), {, throw, new, IllegalArgumentException, (, "src.length-srcPos<4: src.length=", +, src, ., length, +, ", srcPos=", +]
[), {, throw, new, IllegalArgumentException, (, "src.length-srcPos<4: src.length=", +, src, ., length, +, ", srcPos=", +, srcPos, ), ;, }, if, (]
[), {, throw, new, IllegalArgumentException, (, "src.length-srcPos<4: src.length=", +, src, ., length, +, ", srcPos=", +, srcPos, ), ;, }, if, (]
[throw, new, IllegalArgumentException, (, "src.length-srcPos<4: src.length=", +, src, ., length, +, ", srcPos=", +, srcPos, ), ;, }, if, (, src, []
[throw, new, IllegalArgumentException, (, "src.length-srcPos<4: src.length=", +, src, ., length, +, ", srcPos=", +, srcPos, ), ;, }, if, (, src, []
[IllegalArgumentException, (, "src.length-srcPos<4: src.length=", +, src, ., length, +, ", srcPos=", +, srcPos, ), ;, }, if, (, src, [, srcPos, +]
[length, +, ", srcPos=", +, srcPos, ), ;, }, if, (, src, [, srcPos, +, 3, ], ), {, if, (]
[length, +, ", srcPos=", +, srcPos, ), ;, }, if, (, src, [, srcPos, +, 3, ], ), {, if, (]
[", srcPos=", +, srcPos, ), ;, }, if, (, src, [, srcPos, +, 3, ], ), {, if, (, src, []
[", srcPos=", +, srcPos, ), ;, }, if, (, src, [, srcPos, +, 3, ], ), {, if, (, src, []
[srcPos, ), ;, }, if, (, src, [, srcPos, +, 3, ], ), {, if, (, src, [, srcPos, +]
[src, [, srcPos, +, 3, ], ), {, if, (, src, [, srcPos, +, 2, ], ), {, if, (]
[src, [, srcPos, +, 3, ], ), {, if, (, src, [, srcPos, +, 2, ], ), {, if, (]
[srcPos, +, 3, ], ), {, if, (, src, [, srcPos, +, 2, ], ), {, if, (, src, []
[srcPos, +, 3, ], ), {, if, (, src, [, srcPos, +, 2, ], ), {, if, (, src, []
[3, ], ), {, if, (, src, [, srcPos, +, 2, ], ), {, if, (, src, [, srcPos, +]
[src, [, srcPos, +, 2, ], ), {, if, (, src, [, srcPos, +, 1, ], ), {, if, (]
[src, [, srcPos, +, 2, ], ), {, if, (, src, [, srcPos, +, 1, ], ), {, if, (]
[srcPos, +, 2, ], ), {, if, (, src, [, srcPos, +, 1, ], ), {, if, (, src, []
[{, if, (, src, [, srcPos, +, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return]
[+, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return, 'f', ;, }, else, {, return]
[[, srcPos, ], ), {, return, 'f', ;, }, else, {, return, '7', ;, }, }, else, {, if, (]
[[, srcPos, ], ), {, return, 'f', ;, }, else, {, return, '7', ;, }, }, else, {, if, (]
[], ), {, return, 'f', ;, }, else, {, return, '7', ;, }, }, else, {, if, (, src, []
[;, }, else, {, return, '7', ;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return]
[;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return, 'b', ;, }, else, {, return]
[srcPos, ], ), {, return, 'b', ;, }, else, {, return, '3', ;, }, }, }, else, {, if, (]
[srcPos, ], ), {, return, 'b', ;, }, else, {, return, '3', ;, }, }, }, else, {, if, (]
[), {, return, 'b', ;, }, else, {, return, '3', ;, }, }, }, else, {, if, (, src, []
[), {, return, 'b', ;, }, else, {, return, '3', ;, }, }, }, else, {, if, (, src, []
[return, 'b', ;, }, else, {, return, '3', ;, }, }, }, else, {, if, (, src, [, srcPos, +]
[return, '3', ;, }, }, }, else, {, if, (, src, [, srcPos, +, 1, ], ), {, if, (]
[return, '3', ;, }, }, }, else, {, if, (, src, [, srcPos, +, 1, ], ), {, if, (]
[;, }, }, }, else, {, if, (, src, [, srcPos, +, 1, ], ), {, if, (, src, []
[{, if, (, src, [, srcPos, +, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return]
[+, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return, 'd', ;, }, else, {, return]
[[, srcPos, ], ), {, return, 'd', ;, }, else, {, return, '5', ;, }, }, else, {, if, (]
[[, srcPos, ], ), {, return, 'd', ;, }, else, {, return, '5', ;, }, }, else, {, if, (]
[], ), {, return, 'd', ;, }, else, {, return, '5', ;, }, }, else, {, if, (, src, []
[;, }, else, {, return, '5', ;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return]
[;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return, '9', ;, }, else, {, return]
[], ), {, return, '9', ;, }, else, {, return, '1', ;, }, }, }, }, else, {, if, (]
[], ), {, return, '9', ;, }, else, {, return, '1', ;, }, }, }, }, else, {, if, (]
[{, return, '9', ;, }, else, {, return, '1', ;, }, }, }, }, else, {, if, (, src, []
[{, return, '9', ;, }, else, {, return, '1', ;, }, }, }, }, else, {, if, (, src, []
['9', ;, }, else, {, return, '1', ;, }, }, }, }, else, {, if, (, src, [, srcPos, +]
['1', ;, }, }, }, }, else, {, if, (, src, [, srcPos, +, 2, ], ), {, if, (]
['1', ;, }, }, }, }, else, {, if, (, src, [, srcPos, +, 2, ], ), {, if, (]
[}, }, }, }, else, {, if, (, src, [, srcPos, +, 2, ], ), {, if, (, src, []
[}, }, }, }, else, {, if, (, src, [, srcPos, +, 2, ], ), {, if, (, src, []
[}, }, else, {, if, (, src, [, srcPos, +, 2, ], ), {, if, (, src, [, srcPos, +]
[src, [, srcPos, +, 2, ], ), {, if, (, src, [, srcPos, +, 1, ], ), {, if, (]
[src, [, srcPos, +, 2, ], ), {, if, (, src, [, srcPos, +, 1, ], ), {, if, (]
[srcPos, +, 2, ], ), {, if, (, src, [, srcPos, +, 1, ], ), {, if, (, src, []
[{, if, (, src, [, srcPos, +, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return]
[+, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return, 'e', ;, }, else, {, return]
[[, srcPos, ], ), {, return, 'e', ;, }, else, {, return, '6', ;, }, }, else, {, if, (]
[[, srcPos, ], ), {, return, 'e', ;, }, else, {, return, '6', ;, }, }, else, {, if, (]
[], ), {, return, 'e', ;, }, else, {, return, '6', ;, }, }, else, {, if, (, src, []
[;, }, else, {, return, '6', ;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return]
[;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return, 'a', ;, }, else, {, return]
[srcPos, ], ), {, return, 'a', ;, }, else, {, return, '2', ;, }, }, }, else, {, if, (]
[srcPos, ], ), {, return, 'a', ;, }, else, {, return, '2', ;, }, }, }, else, {, if, (]
[), {, return, 'a', ;, }, else, {, return, '2', ;, }, }, }, else, {, if, (, src, []
[), {, return, 'a', ;, }, else, {, return, '2', ;, }, }, }, else, {, if, (, src, []
[return, 'a', ;, }, else, {, return, '2', ;, }, }, }, else, {, if, (, src, [, srcPos, +]
[return, '2', ;, }, }, }, else, {, if, (, src, [, srcPos, +, 1, ], ), {, if, (]
[return, '2', ;, }, }, }, else, {, if, (, src, [, srcPos, +, 1, ], ), {, if, (]
[;, }, }, }, else, {, if, (, src, [, srcPos, +, 1, ], ), {, if, (, src, []
[{, if, (, src, [, srcPos, +, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return]
[+, 1, ], ), {, if, (, src, [, srcPos, ], ), {, return, 'c', ;, }, else, {, return]
[[, srcPos, ], ), {, return, 'c', ;, }, else, {, return, '4', ;, }, }, else, {, if, (]
[[, srcPos, ], ), {, return, 'c', ;, }, else, {, return, '4', ;, }, }, else, {, if, (]
[], ), {, return, 'c', ;, }, else, {, return, '4', ;, }, }, else, {, if, (, src, []
[;, }, else, {, return, '4', ;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return]
[;, }, }, else, {, if, (, src, [, srcPos, ], ), {, return, '8', ;, }, else, {, return]
['0', ;, }, }, }, }, }, public, static, char, binaryBeMsb0ToHexDigit, (, final, boolean, [, ], src, ), {, return]
[}, }, }, }, }, public, static, char, binaryBeMsb0ToHexDigit, (, final, boolean, [, ], src, ), {, return, binaryBeMsb0ToHexDigit, (]
[}, }, }, public, static, char, binaryBeMsb0ToHexDigit, (, final, boolean, [, ], src, ), {, return, binaryBeMsb0ToHexDigit, (, src, ,]
[0, ), ;, }, public, static, char, binaryBeMsb0ToHexDigit, (, boolean, [, ], src, ,, int, srcPos, ), {, if, (]
[0, ), ;, }, public, static, char, binaryBeMsb0ToHexDigit, (, boolean, [, ], src, ,, int, srcPos, ), {, if, (]
[0, ), ;, }, public, static, char, binaryBeMsb0ToHexDigit, (, boolean, [, ], src, ,, int, srcPos, ), {, if, (]
[public, static, char, binaryBeMsb0ToHexDigit, (, boolean, [, ], src, ,, int, srcPos, ), {, if, (, src, ., length, ==]
[(, boolean, [, ], src, ,, int, srcPos, ), {, if, (, src, ., length, ==, 0, ), {, throw]
[], src, ,, int, srcPos, ), {, if, (, src, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (]
[(, src, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, final, int, beSrcPos, =]
[(, src, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, final, int, beSrcPos, =]
[(, src, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, final, int, beSrcPos, =]
[(, src, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, final, int, beSrcPos, =]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, final, int, beSrcPos, =, src, ., length, -]
[), {, throw, new, IllegalArgumentException, (, "Cannot convert an empty array.", ), ;, }, final, int, beSrcPos, =, src, ., length, -, 1, -]
["Cannot convert an empty array.", ), ;, }, final, int, beSrcPos, =, src, ., length, -, 1, -, srcPos, ;, final, int, srcLen, =]
["Cannot convert an empty array.", ), ;, }, final, int, beSrcPos, =, src, ., length, -, 1, -, srcPos, ;, final, int, srcLen, =]
[final, int, beSrcPos, =, src, ., length, -, 1, -, srcPos, ;, final, int, srcLen, =, Math, ., min, (]
[beSrcPos, =, src, ., length, -, 1, -, srcPos, ;, final, int, srcLen, =, Math, ., min, (, 4, ,]
[beSrcPos, =, src, ., length, -, 1, -, srcPos, ;, final, int, srcLen, =, Math, ., min, (, 4, ,]
[src, ., length, -, 1, -, srcPos, ;, final, int, srcLen, =, Math, ., min, (, 4, ,, beSrcPos, +]
[int, srcLen, =, Math, ., min, (, 4, ,, beSrcPos, +, 1, ), ;, final, boolean, [, ], paddedSrc, =]
[Math, ., min, (, 4, ,, beSrcPos, +, 1, ), ;, final, boolean, [, ], paddedSrc, =, new, boolean, []
[(, 4, ,, beSrcPos, +, 1, ), ;, final, boolean, [, ], paddedSrc, =, new, boolean, [, 4, ], ;]
[(, 4, ,, beSrcPos, +, 1, ), ;, final, boolean, [, ], paddedSrc, =, new, boolean, [, 4, ], ;]
[+, 1, ), ;, final, boolean, [, ], paddedSrc, =, new, boolean, [, 4, ], ;, System, ., arraycopy, (]
[), ;, final, boolean, [, ], paddedSrc, =, new, boolean, [, 4, ], ;, System, ., arraycopy, (, src, ,]
[), ;, final, boolean, [, ], paddedSrc, =, new, boolean, [, 4, ], ;, System, ., arraycopy, (, src, ,]
[), ;, final, boolean, [, ], paddedSrc, =, new, boolean, [, 4, ], ;, System, ., arraycopy, (, src, ,]
[final, boolean, [, ], paddedSrc, =, new, boolean, [, 4, ], ;, System, ., arraycopy, (, src, ,, beSrcPos, +]
[[, ], paddedSrc, =, new, boolean, [, 4, ], ;, System, ., arraycopy, (, src, ,, beSrcPos, +, 1, -]
[paddedSrc, =, new, boolean, [, 4, ], ;, System, ., arraycopy, (, src, ,, beSrcPos, +, 1, -, srcLen, ,]
[new, boolean, [, 4, ], ;, System, ., arraycopy, (, src, ,, beSrcPos, +, 1, -, srcLen, ,, paddedSrc, ,]
[new, boolean, [, 4, ], ;, System, ., arraycopy, (, src, ,, beSrcPos, +, 1, -, srcLen, ,, paddedSrc, ,]
[[, 4, ], ;, System, ., arraycopy, (, src, ,, beSrcPos, +, 1, -, srcLen, ,, paddedSrc, ,, 4, -]
[], ;, System, ., arraycopy, (, src, ,, beSrcPos, +, 1, -, srcLen, ,, paddedSrc, ,, 4, -, srcLen, ,]
[., arraycopy, (, src, ,, beSrcPos, +, 1, -, srcLen, ,, paddedSrc, ,, 4, -, srcLen, ,, srcLen, ), ;]
[(, src, ,, beSrcPos, +, 1, -, srcLen, ,, paddedSrc, ,, 4, -, srcLen, ,, srcLen, ), ;, src, =]
[,, beSrcPos, +, 1, -, srcLen, ,, paddedSrc, ,, 4, -, srcLen, ,, srcLen, ), ;, src, =, paddedSrc, ;]
[+, 1, -, srcLen, ,, paddedSrc, ,, 4, -, srcLen, ,, srcLen, ), ;, src, =, paddedSrc, ;, srcPos, =]
[,, paddedSrc, ,, 4, -, srcLen, ,, srcLen, ), ;, src, =, paddedSrc, ;, srcPos, =, 0, ;, if, (]
[,, paddedSrc, ,, 4, -, srcLen, ,, srcLen, ), ;, src, =, paddedSrc, ;, srcPos, =, 0, ;, if, (]
[,, 4, -, srcLen, ,, srcLen, ), ;, src, =, paddedSrc, ;, srcPos, =, 0, ;, if, (, src, []
[), ;, src, =, paddedSrc, ;, srcPos, =, 0, ;, if, (, src, [, srcPos, ], ), {, if, (]
[), ;, src, =, paddedSrc, ;, srcPos, =, 0, ;, if, (, src, [, srcPos, ], ), {, if, (]
[), ;, src, =, paddedSrc, ;, srcPos, =, 0, ;, if, (, src, [, srcPos, ], ), {, if, (]
[), ;, src, =, paddedSrc, ;, srcPos, =, 0, ;, if, (, src, [, srcPos, ], ), {, if, (]
[paddedSrc, ;, srcPos, =, 0, ;, if, (, src, [, srcPos, ], ), {, if, (, src, ., length, >]
[paddedSrc, ;, srcPos, =, 0, ;, if, (, src, [, srcPos, ], ), {, if, (, src, ., length, >]
[srcPos, =, 0, ;, if, (, src, [, srcPos, ], ), {, if, (, src, ., length, >, srcPos, +]
[0, ;, if, (, src, [, srcPos, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&]
[0, ;, if, (, src, [, srcPos, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&]
[if, (, src, [, srcPos, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
[if, (, src, [, srcPos, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
[src, [, srcPos, ], ), {, if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >]
[length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >]
[srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +]
[1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&]
[1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&]
[src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
[src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
[srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&]
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +]
[{, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return]
[>, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return, 'f', ;, }, else, {, return]
[+, 3, ], ), {, return, 'f', ;, }, else, {, return, 'e', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, 'f', ;, }, else, {, return, 'e', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, 'f', ;, }, else, {, return, 'e', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, 'f', ;, }, else, {, return, 'e', ;, }, }, else, {, if, (]
[{, return, 'f', ;, }, else, {, return, 'e', ;, }, }, else, {, if, (, src, ., length, >]
[{, return, 'f', ;, }, else, {, return, 'e', ;, }, }, else, {, if, (, src, ., length, >]
['f', ;, }, else, {, return, 'e', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +]
[}, else, {, return, 'e', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&]
[}, else, {, return, 'e', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&]
[{, return, 'e', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[{, return, 'e', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
['e', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +]
[{, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return]
[>, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return, 'd', ;, }, else, {, return]
[3, ], ), {, return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (]
[3, ], ), {, return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (]
[3, ], ), {, return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (]
[3, ], ), {, return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (]
[return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >]
[return, 'd', ;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >]
[;, }, else, {, return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +]
[else, {, return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&]
[else, {, return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&]
[return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
[return, 'c', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
[;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&]
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +]
[{, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return]
[>, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return, 'b', ;, }, else, {, return]
[+, 3, ], ), {, return, 'b', ;, }, else, {, return, 'a', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, 'b', ;, }, else, {, return, 'a', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, 'b', ;, }, else, {, return, 'a', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, 'b', ;, }, else, {, return, 'a', ;, }, }, else, {, if, (]
[{, return, 'b', ;, }, else, {, return, 'a', ;, }, }, else, {, if, (, src, ., length, >]
[{, return, 'b', ;, }, else, {, return, 'a', ;, }, }, else, {, if, (, src, ., length, >]
['b', ;, }, else, {, return, 'a', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +]
[}, else, {, return, 'a', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&]
[}, else, {, return, 'a', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&]
[{, return, 'a', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[{, return, 'a', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
['a', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +]
[{, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return]
[>, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return, '9', ;, }, else, {, return]
[], ), {, return, '9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (]
[], ), {, return, '9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (]
[], ), {, return, '9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (]
[], ), {, return, '9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (]
['9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (, src, ., length, >]
['9', ;, }, else, {, return, '8', ;, }, }, }, }, else, {, if, (, src, ., length, >]
[}, else, {, return, '8', ;, }, }, }, }, else, {, if, (, src, ., length, >, srcPos, +]
[{, return, '8', ;, }, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&]
[{, return, '8', ;, }, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&]
['8', ;, }, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
['8', ;, }, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&, src, []
[}, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (]
[length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >]
[length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >]
[srcPos, +, 1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +]
[1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&]
[1, &&, src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&]
[src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
[src, [, srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
[srcPos, +, 1, ], ), {, if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&]
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +]
[{, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return]
[>, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return, '7', ;, }, else, {, return]
[+, 3, ], ), {, return, '7', ;, }, else, {, return, '6', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, '7', ;, }, else, {, return, '6', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, '7', ;, }, else, {, return, '6', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, '7', ;, }, else, {, return, '6', ;, }, }, else, {, if, (]
[{, return, '7', ;, }, else, {, return, '6', ;, }, }, else, {, if, (, src, ., length, >]
[{, return, '7', ;, }, else, {, return, '6', ;, }, }, else, {, if, (, src, ., length, >]
['7', ;, }, else, {, return, '6', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +]
[}, else, {, return, '6', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&]
[}, else, {, return, '6', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&]
[{, return, '6', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[{, return, '6', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
['6', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +]
[{, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return]
[>, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return, '5', ;, }, else, {, return]
[3, ], ), {, return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (]
[3, ], ), {, return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (]
[3, ], ), {, return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (]
[3, ], ), {, return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (]
[return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (, src, ., length, >]
[return, '5', ;, }, else, {, return, '4', ;, }, }, }, else, {, if, (, src, ., length, >]
[;, }, else, {, return, '4', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +]
[else, {, return, '4', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&]
[else, {, return, '4', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&]
[return, '4', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
[return, '4', ;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&, src, []
[;, }, }, }, else, {, if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[if, (, src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >]
[srcPos, +, 2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&]
[2, &&, src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&]
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[src, [, srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[srcPos, +, 2, ], ), {, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +]
[{, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return]
[>, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return, '3', ;, }, else, {, return]
[+, 3, ], ), {, return, '3', ;, }, else, {, return, '2', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, '3', ;, }, else, {, return, '2', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, '3', ;, }, else, {, return, '2', ;, }, }, else, {, if, (]
[+, 3, ], ), {, return, '3', ;, }, else, {, return, '2', ;, }, }, else, {, if, (]
[{, return, '3', ;, }, else, {, return, '2', ;, }, }, else, {, if, (, src, ., length, >]
[{, return, '3', ;, }, else, {, return, '2', ;, }, }, else, {, if, (, src, ., length, >]
['3', ;, }, else, {, return, '2', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +]
[}, else, {, return, '2', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&]
[}, else, {, return, '2', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&]
[{, return, '2', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
[{, return, '2', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, []
['2', ;, }, }, else, {, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +]
[{, if, (, src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return]
[>, srcPos, +, 3, &&, src, [, srcPos, +, 3, ], ), {, return, '1', ;, }, else, {, return]
[;, }, }, }, }, }, public, static, char, intToHexDigit, (, final, int, nibble, ), {, final, char, c, =]
[;, }, }, }, }, }, public, static, char, intToHexDigit, (, final, int, nibble, ), {, final, char, c, =]
[}, }, public, static, char, intToHexDigit, (, final, int, nibble, ), {, final, char, c, =, Character, ., forDigit, (]
[public, static, char, intToHexDigit, (, final, int, nibble, ), {, final, char, c, =, Character, ., forDigit, (, nibble, ,]
[final, int, nibble, ), {, final, char, c, =, Character, ., forDigit, (, nibble, ,, 16, ), ;, if, (]
[final, int, nibble, ), {, final, char, c, =, Character, ., forDigit, (, nibble, ,, 16, ), ;, if, (]
[nibble, ), {, final, char, c, =, Character, ., forDigit, (, nibble, ,, 16, ), ;, if, (, c, ==]
[nibble, ), {, final, char, c, =, Character, ., forDigit, (, nibble, ,, 16, ), ;, if, (, c, ==]
[=, Character, ., forDigit, (, nibble, ,, 16, ), ;, if, (, c, ==, Character, ., MIN_VALUE, ), {, throw]
[forDigit, (, nibble, ,, 16, ), ;, if, (, c, ==, Character, ., MIN_VALUE, ), {, throw, new, IllegalArgumentException, (]
[forDigit, (, nibble, ,, 16, ), ;, if, (, c, ==, Character, ., MIN_VALUE, ), {, throw, new, IllegalArgumentException, (]
[nibble, ,, 16, ), ;, if, (, c, ==, Character, ., MIN_VALUE, ), {, throw, new, IllegalArgumentException, (, "nibble value not between 0 and 15: ", +]
[if, (, c, ==, Character, ., MIN_VALUE, ), {, throw, new, IllegalArgumentException, (, "nibble value not between 0 and 15: ", +, nibble, ), ;, }, return]
[nibble, ), ;, }, return, c, ;, }, public, static, char, intToHexDigitMsb0, (, final, int, nibble, ), {, switch, (]
[return, c, ;, }, public, static, char, intToHexDigitMsb0, (, final, int, nibble, ), {, switch, (, nibble, ), {, case]
[}, public, static, char, intToHexDigitMsb0, (, final, int, nibble, ), {, switch, (, nibble, ), {, case, 0x0, :, return]
[char, intToHexDigitMsb0, (, final, int, nibble, ), {, switch, (, nibble, ), {, case, 0x0, :, return, '0', ;, case]
[final, int, nibble, ), {, switch, (, nibble, ), {, case, 0x0, :, return, '0', ;, case, 0x1, :, return]
[), {, switch, (, nibble, ), {, case, 0x0, :, return, '0', ;, case, 0x1, :, return, '8', ;, case]
[(, nibble, ), {, case, 0x0, :, return, '0', ;, case, 0x1, :, return, '8', ;, case, 0x2, :, return]
[{, case, 0x0, :, return, '0', ;, case, 0x1, :, return, '8', ;, case, 0x2, :, return, '4', ;, case]
[:, return, '0', ;, case, 0x1, :, return, '8', ;, case, 0x2, :, return, '4', ;, case, 0x3, :, return]
[;, case, 0x1, :, return, '8', ;, case, 0x2, :, return, '4', ;, case, 0x3, :, return, 'c', ;, case]
[:, return, '8', ;, case, 0x2, :, return, '4', ;, case, 0x3, :, return, 'c', ;, case, 0x4, :, return]
[;, case, 0x2, :, return, '4', ;, case, 0x3, :, return, 'c', ;, case, 0x4, :, return, '2', ;, case]
[:, return, '4', ;, case, 0x3, :, return, 'c', ;, case, 0x4, :, return, '2', ;, case, 0x5, :, return]
[;, case, 0x3, :, return, 'c', ;, case, 0x4, :, return, '2', ;, case, 0x5, :, return, 'a', ;, case]
[:, return, 'c', ;, case, 0x4, :, return, '2', ;, case, 0x5, :, return, 'a', ;, case, 0x6, :, return]
[;, case, 0x4, :, return, '2', ;, case, 0x5, :, return, 'a', ;, case, 0x6, :, return, '6', ;, case]
[:, return, '2', ;, case, 0x5, :, return, 'a', ;, case, 0x6, :, return, '6', ;, case, 0x7, :, return]
[;, case, 0x5, :, return, 'a', ;, case, 0x6, :, return, '6', ;, case, 0x7, :, return, 'e', ;, case]
[:, return, 'a', ;, case, 0x6, :, return, '6', ;, case, 0x7, :, return, 'e', ;, case, 0x8, :, return]
[;, case, 0x6, :, return, '6', ;, case, 0x7, :, return, 'e', ;, case, 0x8, :, return, '1', ;, case]
[:, return, '6', ;, case, 0x7, :, return, 'e', ;, case, 0x8, :, return, '1', ;, case, 0x9, :, return]
[;, case, 0x7, :, return, 'e', ;, case, 0x8, :, return, '1', ;, case, 0x9, :, return, '9', ;, case]
[:, return, 'e', ;, case, 0x8, :, return, '1', ;, case, 0x9, :, return, '9', ;, case, 0xA, :, return]
[;, case, 0x8, :, return, '1', ;, case, 0x9, :, return, '9', ;, case, 0xA, :, return, '5', ;, case]
[:, return, '1', ;, case, 0x9, :, return, '9', ;, case, 0xA, :, return, '5', ;, case, 0xB, :, return]
[;, case, 0x9, :, return, '9', ;, case, 0xA, :, return, '5', ;, case, 0xB, :, return, 'd', ;, case]
[:, return, '9', ;, case, 0xA, :, return, '5', ;, case, 0xB, :, return, 'd', ;, case, 0xC, :, return]
[;, case, 0xA, :, return, '5', ;, case, 0xB, :, return, 'd', ;, case, 0xC, :, return, '3', ;, case]
[:, return, '5', ;, case, 0xB, :, return, 'd', ;, case, 0xC, :, return, '3', ;, case, 0xD, :, return]
[;, case, 0xB, :, return, 'd', ;, case, 0xC, :, return, '3', ;, case, 0xD, :, return, 'b', ;, case]
[:, return, 'd', ;, case, 0xC, :, return, '3', ;, case, 0xD, :, return, 'b', ;, case, 0xE, :, return]
[;, case, 0xC, :, return, '3', ;, case, 0xD, :, return, 'b', ;, case, 0xE, :, return, '7', ;, case]
[:, return, '3', ;, case, 0xD, :, return, 'b', ;, case, 0xE, :, return, '7', ;, case, 0xF, :, return]
[0xD, :, return, 'b', ;, case, 0xE, :, return, '7', ;, case, 0xF, :, return, 'f', ;, default, :, throw]
['b', ;, case, 0xE, :, return, '7', ;, case, 0xF, :, return, 'f', ;, default, :, throw, new, IllegalArgumentException, (]
['b', ;, case, 0xE, :, return, '7', ;, case, 0xF, :, return, 'f', ;, default, :, throw, new, IllegalArgumentException, (]
[case, 0xE, :, return, '7', ;, case, 0xF, :, return, 'f', ;, default, :, throw, new, IllegalArgumentException, (, "nibble value not between 0 and 15: ", +]
[,, final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (]
[,, final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (, (]
[final, long, dstInit, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (, (, src, ., length, ==]
[dstInit, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (, (, src, ., length, ==, 0, &&]
[dstInit, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (, (, src, ., length, ==, 0, &&]
[final, int, dstPos, ,, final, int, nInts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==]
[,, final, int, nInts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[,, final, int, nInts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[int, nInts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==]
[if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nInts, ), {, return]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nInts, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nInts, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nInts, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nInts, ), {, return, dstInit, ;, }, if, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nInts, ), {, return, dstInit, ;, }, if, (, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nInts, ), {, return, dstInit, ;, }, if, (, (]
[&&, srcPos, ==, 0, ), ||, 0, ==, nInts, ), {, return, dstInit, ;, }, if, (, (, nInts, -]
[0, ), ||, 0, ==, nInts, ), {, return, dstInit, ;, }, if, (, (, nInts, -, 1, ), *]
[||, 0, ==, nInts, ), {, return, dstInit, ;, }, if, (, (, nInts, -, 1, ), *, 32, +]
[==, nInts, ), {, return, dstInit, ;, }, if, (, (, nInts, -, 1, ), *, 32, +, dstPos, >=]
[return, dstInit, ;, }, if, (, (, nInts, -, 1, ), *, 32, +, dstPos, >=, 64, ), {, throw]
[}, if, (, (, nInts, -, 1, ), *, 32, +, dstPos, >=, 64, ), {, throw, new, IllegalArgumentException, (]
[), *, 32, +, dstPos, >=, 64, ), {, throw, new, IllegalArgumentException, (, "(nInts-1)*32+dstPos is greather or equal to than 64", ), ;, }, long, out, =]
[>=, 64, ), {, throw, new, IllegalArgumentException, (, "(nInts-1)*32+dstPos is greather or equal to than 64", ), ;, }, long, out, =, dstInit, ;, int, shift, =]
[(, "(nInts-1)*32+dstPos is greather or equal to than 64", ), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =, i, *, 32, +]
[i, <, nInts, ;, i, ++, ), {, shift, =, i, *, 32, +, dstPos, ;, final, long, bits, =]
[<, nInts, ;, i, ++, ), {, shift, =, i, *, 32, +, dstPos, ;, final, long, bits, =, (]
[<, nInts, ;, i, ++, ), {, shift, =, i, *, 32, +, dstPos, ;, final, long, bits, =, (]
[nInts, ;, i, ++, ), {, shift, =, i, *, 32, +, dstPos, ;, final, long, bits, =, (, (]
[nInts, ;, i, ++, ), {, shift, =, i, *, 32, +, dstPos, ;, final, long, bits, =, (, (]
[i, ++, ), {, shift, =, i, *, 32, +, dstPos, ;, final, long, bits, =, (, (, 0xffffffffL, &]
[i, ++, ), {, shift, =, i, *, 32, +, dstPos, ;, final, long, bits, =, (, (, 0xffffffffL, &]
[), {, shift, =, i, *, 32, +, dstPos, ;, final, long, bits, =, (, (, 0xffffffffL, &, src, []
[), {, shift, =, i, *, 32, +, dstPos, ;, final, long, bits, =, (, (, 0xffffffffL, &, src, []
[shift, =, i, *, 32, +, dstPos, ;, final, long, bits, =, (, (, 0xffffffffL, &, src, [, i, +]
[32, +, dstPos, ;, final, long, bits, =, (, (, 0xffffffffL, &, src, [, i, +, srcPos, ], ), <<]
[=, (, (, 0xffffffffL, &, src, [, i, +, srcPos, ], ), <<, shift, ), ;, final, long, mask, =]
[=, (, (, 0xffffffffL, &, src, [, i, +, srcPos, ], ), <<, shift, ), ;, final, long, mask, =]
[(, 0xffffffffL, &, src, [, i, +, srcPos, ], ), <<, shift, ), ;, final, long, mask, =, 0xffffffffL, <<]
[&, src, [, i, +, srcPos, ], ), <<, shift, ), ;, final, long, mask, =, 0xffffffffL, <<, shift, ;]
[[, i, +, srcPos, ], ), <<, shift, ), ;, final, long, mask, =, 0xffffffffL, <<, shift, ;, out, =]
[[, i, +, srcPos, ], ), <<, shift, ), ;, final, long, mask, =, 0xffffffffL, <<, shift, ;, out, =]
[i, +, srcPos, ], ), <<, shift, ), ;, final, long, mask, =, 0xffffffffL, <<, shift, ;, out, =, (]
[i, +, srcPos, ], ), <<, shift, ), ;, final, long, mask, =, 0xffffffffL, <<, shift, ;, out, =, (]
[srcPos, ], ), <<, shift, ), ;, final, long, mask, =, 0xffffffffL, <<, shift, ;, out, =, (, out, &]
[], ), <<, shift, ), ;, final, long, mask, =, 0xffffffffL, <<, shift, ;, out, =, (, out, &, ~]
[shift, ), ;, final, long, mask, =, 0xffffffffL, <<, shift, ;, out, =, (, out, &, ~, mask, ), |]
[long, mask, =, 0xffffffffL, <<, shift, ;, out, =, (, out, &, ~, mask, ), |, bits, ;, }, return]
[,, final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (]
[,, final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (]
[final, long, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (, src, ., length, ==]
[dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&]
[dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&]
[final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==]
[,, final, int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[,, final, int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==]
[if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (, (]
[&&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (, (, nShorts, -]
[0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (, (, nShorts, -, 1, ), *]
[||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +]
[==, nShorts, ), {, return, dstInit, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +, dstPos, >=]
[return, dstInit, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +, dstPos, >=, 64, ), {, throw]
[}, if, (, (, nShorts, -, 1, ), *, 16, +, dstPos, >=, 64, ), {, throw, new, IllegalArgumentException, (]
[), *, 16, +, dstPos, >=, 64, ), {, throw, new, IllegalArgumentException, (, "(nShorts-1)*16+dstPos is greather or equal to than 64", ), ;, }, long, out, =]
[>=, 64, ), {, throw, new, IllegalArgumentException, (, "(nShorts-1)*16+dstPos is greather or equal to than 64", ), ;, }, long, out, =, dstInit, ;, int, shift, =]
[(, "(nShorts-1)*16+dstPos is greather or equal to than 64", ), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +]
[i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, long, bits, =]
[i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, long, bits, =]
[<, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, long, bits, =, (]
[<, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, long, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, long, bits, =, (, 0xffffL, &]
[;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, long, bits, =, (, 0xffffL, &]
[++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, long, bits, =, (, 0xffffL, &, src, []
[++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, long, bits, =, (, 0xffffL, &, src, []
[{, shift, =, i, *, 16, +, dstPos, ;, final, long, bits, =, (, 0xffffL, &, src, [, i, +]
[*, 16, +, dstPos, ;, final, long, bits, =, (, 0xffffL, &, src, [, i, +, srcPos, ], ), <<]
[long, bits, =, (, 0xffffL, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =]
[long, bits, =, (, 0xffffL, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =]
[=, (, 0xffffL, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffffL, <<]
[0xffffL, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffffL, <<, shift, ;]
[src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffffL, <<, shift, ;, out, =]
[src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffffL, <<, shift, ;, out, =]
[[, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffffL, <<, shift, ;, out, =, (]
[[, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffffL, <<, shift, ;, out, =, (]
[+, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffffL, <<, shift, ;, out, =, (, out, &]
[srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffffL, <<, shift, ;, out, =, (, out, &, ~]
[<<, shift, ;, final, long, mask, =, 0xffffL, <<, shift, ;, out, =, (, out, &, ~, mask, ), |]
[long, mask, =, 0xffffL, <<, shift, ;, out, =, (, out, &, ~, mask, ), |, bits, ;, }, return]
[,, final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (]
[,, final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (]
[final, int, dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (, src, ., length, ==]
[dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&]
[dstInit, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&]
[final, int, dstPos, ,, final, int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==]
[,, final, int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[,, final, int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[int, nShorts, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==]
[if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (, (]
[&&, srcPos, ==, 0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (, (, nShorts, -]
[0, ), ||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (, (, nShorts, -, 1, ), *]
[||, 0, ==, nShorts, ), {, return, dstInit, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +]
[==, nShorts, ), {, return, dstInit, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +, dstPos, >=]
[return, dstInit, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +, dstPos, >=, 32, ), {, throw]
[}, if, (, (, nShorts, -, 1, ), *, 16, +, dstPos, >=, 32, ), {, throw, new, IllegalArgumentException, (]
[), *, 16, +, dstPos, >=, 32, ), {, throw, new, IllegalArgumentException, (, "(nShorts-1)*16+dstPos is greather or equal to than 32", ), ;, }, int, out, =]
[>=, 32, ), {, throw, new, IllegalArgumentException, (, "(nShorts-1)*16+dstPos is greather or equal to than 32", ), ;, }, int, out, =, dstInit, ;, int, shift, =]
[(, "(nShorts-1)*16+dstPos is greather or equal to than 32", ), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +]
[i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, int, bits, =]
[i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, int, bits, =]
[<, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, int, bits, =, (]
[<, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, int, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, int, bits, =, (, 0xffff, &]
[;, i, ++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, int, bits, =, (, 0xffff, &]
[++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, int, bits, =, (, 0xffff, &, src, []
[++, ), {, shift, =, i, *, 16, +, dstPos, ;, final, int, bits, =, (, 0xffff, &, src, []
[{, shift, =, i, *, 16, +, dstPos, ;, final, int, bits, =, (, 0xffff, &, src, [, i, +]
[*, 16, +, dstPos, ;, final, int, bits, =, (, 0xffff, &, src, [, i, +, srcPos, ], ), <<]
[int, bits, =, (, 0xffff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =]
[int, bits, =, (, 0xffff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =]
[=, (, 0xffff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xffff, <<]
[0xffff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xffff, <<, shift, ;]
[src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xffff, <<, shift, ;, out, =]
[src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xffff, <<, shift, ;, out, =]
[[, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xffff, <<, shift, ;, out, =, (]
[[, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xffff, <<, shift, ;, out, =, (]
[+, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xffff, <<, shift, ;, out, =, (, out, &]
[srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xffff, <<, shift, ;, out, =, (, out, &, ~]
[<<, shift, ;, final, int, mask, =, 0xffff, <<, shift, ;, out, =, (, out, &, ~, mask, ), |]
[int, mask, =, 0xffff, <<, shift, ;, out, =, (, out, &, ~, mask, ), |, bits, ;, }, return]
[,, final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[,, final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==]
[dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&]
[dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&]
[final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==]
[,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==]
[if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (]
[&&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -]
[0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *]
[||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +]
[==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, dstPos, >=]
[return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, dstPos, >=, 64, ), {, throw]
[}, if, (, (, nBytes, -, 1, ), *, 8, +, dstPos, >=, 64, ), {, throw, new, IllegalArgumentException, (]
[), *, 8, +, dstPos, >=, 64, ), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+dstPos is greather or equal to than 64", ), ;, }, long, out, =]
[>=, 64, ), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+dstPos is greather or equal to than 64", ), ;, }, long, out, =, dstInit, ;, int, shift, =]
[(, "(nBytes-1)*8+dstPos is greather or equal to than 64", ), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +]
[i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, long, bits, =]
[i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, long, bits, =]
[<, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, long, bits, =, (]
[<, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, long, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, long, bits, =, (, 0xffL, &]
[;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, long, bits, =, (, 0xffL, &]
[++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, long, bits, =, (, 0xffL, &, src, []
[++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, long, bits, =, (, 0xffL, &, src, []
[{, shift, =, i, *, 8, +, dstPos, ;, final, long, bits, =, (, 0xffL, &, src, [, i, +]
[*, 8, +, dstPos, ;, final, long, bits, =, (, 0xffL, &, src, [, i, +, srcPos, ], ), <<]
[long, bits, =, (, 0xffL, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =]
[long, bits, =, (, 0xffL, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =]
[=, (, 0xffL, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffL, <<]
[0xffL, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffL, <<, shift, ;]
[src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffL, <<, shift, ;, out, =]
[src, [, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffL, <<, shift, ;, out, =]
[[, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffL, <<, shift, ;, out, =, (]
[[, i, +, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffL, <<, shift, ;, out, =, (]
[+, srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffL, <<, shift, ;, out, =, (, out, &]
[srcPos, ], ), <<, shift, ;, final, long, mask, =, 0xffL, <<, shift, ;, out, =, (, out, &, ~]
[<<, shift, ;, final, long, mask, =, 0xffL, <<, shift, ;, out, =, (, out, &, ~, mask, ), |]
[long, mask, =, 0xffL, <<, shift, ;, out, =, (, out, &, ~, mask, ), |, bits, ;, }, return]
[,, final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[,, final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==]
[dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&]
[dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&]
[final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==]
[,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==]
[if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (]
[&&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -]
[0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *]
[||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +]
[==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, dstPos, >=]
[return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, dstPos, >=, 32, ), {, throw]
[}, if, (, (, nBytes, -, 1, ), *, 8, +, dstPos, >=, 32, ), {, throw, new, IllegalArgumentException, (]
[), *, 8, +, dstPos, >=, 32, ), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+dstPos is greather or equal to than 32", ), ;, }, int, out, =]
[>=, 32, ), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+dstPos is greather or equal to than 32", ), ;, }, int, out, =, dstInit, ;, int, shift, =]
[(, "(nBytes-1)*8+dstPos is greather or equal to than 32", ), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +]
[i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =]
[i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =]
[<, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (]
[<, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &]
[;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &]
[++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &, src, []
[++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &, src, []
[{, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &, src, [, i, +]
[*, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &, src, [, i, +, srcPos, ], ), <<]
[int, bits, =, (, 0xff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =]
[int, bits, =, (, 0xff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =]
[=, (, 0xff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<]
[0xff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;]
[src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =]
[src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =]
[[, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (]
[[, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (]
[+, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (, out, &]
[srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (, out, &, ~]
[<<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (, out, &, ~, mask, ), |]
[int, mask, =, 0xff, <<, shift, ;, out, =, (, out, &, ~, mask, ), |, bits, ;, }, return]
[,, final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[,, final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (]
[final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==]
[dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&]
[dstInit, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&]
[final, int, dstPos, ,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==]
[,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[,, final, int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[int, nBytes, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==]
[if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (]
[==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (]
[&&, srcPos, ==, 0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -]
[0, ), ||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *]
[||, 0, ==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +]
[==, nBytes, ), {, return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, dstPos, >=]
[return, dstInit, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, dstPos, >=, 16, ), {, throw]
[}, if, (, (, nBytes, -, 1, ), *, 8, +, dstPos, >=, 16, ), {, throw, new, IllegalArgumentException, (]
[), *, 8, +, dstPos, >=, 16, ), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+dstPos is greather or equal to than 16", ), ;, }, short, out, =]
[>=, 16, ), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+dstPos is greather or equal to than 16", ), ;, }, short, out, =, dstInit, ;, int, shift, =]
[(, "(nBytes-1)*8+dstPos is greather or equal to than 16", ), ;, }, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +]
[i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =]
[i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =]
[<, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (]
[<, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &]
[;, i, ++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &]
[++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &, src, []
[++, ), {, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &, src, []
[{, shift, =, i, *, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &, src, [, i, +]
[*, 8, +, dstPos, ;, final, int, bits, =, (, 0xff, &, src, [, i, +, srcPos, ], ), <<]
[int, bits, =, (, 0xff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =]
[int, bits, =, (, 0xff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =]
[=, (, 0xff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<]
[0xff, &, src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;]
[src, [, i, +, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =]
[+, srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (, short, )]
[srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (, short, ), (]
[srcPos, ], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (, short, ), (]
[], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (, short, ), (, (]
[], ), <<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (, short, ), (, (]
[<<, shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (, short, ), (, (, out, &]
[shift, ;, final, int, mask, =, 0xff, <<, shift, ;, out, =, (, short, ), (, (, out, &, ~]
[int, mask, =, 0xff, <<, shift, ;, out, =, (, short, ), (, (, out, &, ~, mask, ), |]
[shift, ;, out, =, (, short, ), (, (, out, &, ~, mask, ), |, bits, ), ;, }, return]
[,, final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (]
[,, final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (]
[int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (, 0, ==]
[long, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (]
[,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (]
[int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -]
[{, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *]
[(, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +]
[==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=]
[return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=, 64, ), {, throw]
[}, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=, 64, ), {, throw, new, IllegalArgumentException, (]
[), *, 4, +, dstPos, >=, 64, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 64", ), ;, }, long, out, =]
[>=, 64, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 64", ), ;, }, long, out, =, dstInit, ;, int, shift, =]
[(, "(nHexs-1)*4+dstPos is greather or equal to than 64", ), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +]
[i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, long, bits, =]
[i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, long, bits, =]
[<, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, long, bits, =, (]
[<, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, long, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, long, bits, =, (, 0xfL, &]
[++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, long, bits, =, (, 0xfL, &, hexDigitToInt, (]
[++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, long, bits, =, (, 0xfL, &, hexDigitToInt, (]
[=, i, *, 4, +, dstPos, ;, final, long, bits, =, (, 0xfL, &, hexDigitToInt, (, src, ., charAt, (]
[=, i, *, 4, +, dstPos, ;, final, long, bits, =, (, 0xfL, &, hexDigitToInt, (, src, ., charAt, (]
[*, 4, +, dstPos, ;, final, long, bits, =, (, 0xfL, &, hexDigitToInt, (, src, ., charAt, (, i, +]
[final, long, bits, =, (, 0xfL, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<]
[&, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, long, mask, =]
[&, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, long, mask, =]
[(, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, long, mask, =, 0xfL, <<]
[., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, long, mask, =, 0xfL, <<, shift, ;]
[(, i, +, srcPos, ), ), ), <<, shift, ;, final, long, mask, =, 0xfL, <<, shift, ;, out, =]
[(, i, +, srcPos, ), ), ), <<, shift, ;, final, long, mask, =, 0xfL, <<, shift, ;, out, =]
[i, +, srcPos, ), ), ), <<, shift, ;, final, long, mask, =, 0xfL, <<, shift, ;, out, =, (]
[i, +, srcPos, ), ), ), <<, shift, ;, final, long, mask, =, 0xfL, <<, shift, ;, out, =, (]
[srcPos, ), ), ), <<, shift, ;, final, long, mask, =, 0xfL, <<, shift, ;, out, =, (, out, &]
[), ), ), <<, shift, ;, final, long, mask, =, 0xfL, <<, shift, ;, out, =, (, out, &, ~]
[<<, shift, ;, final, long, mask, =, 0xfL, <<, shift, ;, out, =, (, out, &, ~, mask, ), |]
[long, mask, =, 0xfL, <<, shift, ;, out, =, (, out, &, ~, mask, ), |, bits, ;, }, return]
[,, final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (]
[,, final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (]
[int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (, 0, ==]
[int, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (]
[,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (]
[int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -]
[{, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *]
[(, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +]
[==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=]
[return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=, 32, ), {, throw]
[}, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=, 32, ), {, throw, new, IllegalArgumentException, (]
[), *, 4, +, dstPos, >=, 32, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 32", ), ;, }, int, out, =]
[>=, 32, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 32", ), ;, }, int, out, =, dstInit, ;, int, shift, =]
[(, "(nHexs-1)*4+dstPos is greather or equal to than 32", ), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +]
[i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =]
[i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =]
[<, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (]
[<, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &]
[++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (]
[++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (]
[=, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (]
[=, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (]
[*, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +]
[final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<]
[&, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =]
[&, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =]
[(, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<]
[., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;]
[(, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =]
[(, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =]
[i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (]
[i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (]
[srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, out, &]
[), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, out, &, ~]
[<<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, out, &, ~, mask, ), |]
[int, mask, =, 0xf, <<, shift, ;, out, =, (, out, &, ~, mask, ), |, bits, ;, }, return]
[,, final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (]
[,, final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (]
[int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (, 0, ==]
[short, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (]
[,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (]
[int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -]
[{, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *]
[(, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +]
[==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=]
[return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=, 16, ), {, throw]
[}, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=, 16, ), {, throw, new, IllegalArgumentException, (]
[), *, 4, +, dstPos, >=, 16, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 16", ), ;, }, short, out, =]
[>=, 16, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 16", ), ;, }, short, out, =, dstInit, ;, int, shift, =]
[(, "(nHexs-1)*4+dstPos is greather or equal to than 16", ), ;, }, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +]
[i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =]
[i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =]
[<, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (]
[<, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &]
[++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (]
[++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (]
[=, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (]
[=, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (]
[*, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +]
[final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<]
[&, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =]
[&, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =]
[(, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<]
[., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;]
[(, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =]
[srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, short, )]
[), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, short, ), (]
[), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, short, ), (]
[), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, short, ), (, (]
[), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, short, ), (, (]
[<<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, short, ), (, (, out, &]
[shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, short, ), (, (, out, &, ~]
[int, mask, =, 0xf, <<, shift, ;, out, =, (, short, ), (, (, out, &, ~, mask, ), |]
[shift, ;, out, =, (, short, ), (, (, out, &, ~, mask, ), |, bits, ), ;, }, return]
[,, final, int, srcPos, ,, final, byte, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (]
[,, final, int, srcPos, ,, final, byte, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (]
[int, srcPos, ,, final, byte, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (, 0, ==]
[byte, dstInit, ,, final, int, dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (]
[,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (]
[,, final, int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (]
[int, nHex, ), {, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -]
[{, if, (, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *]
[(, 0, ==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +]
[==, nHex, ), {, return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=]
[return, dstInit, ;, }, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=, 8, ), {, throw]
[}, if, (, (, nHex, -, 1, ), *, 4, +, dstPos, >=, 8, ), {, throw, new, IllegalArgumentException, (]
[), *, 4, +, dstPos, >=, 8, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 8", ), ;, }, byte, out, =]
[>=, 8, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 8", ), ;, }, byte, out, =, dstInit, ;, int, shift, =]
[(, "(nHexs-1)*4+dstPos is greather or equal to than 8", ), ;, }, byte, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, byte, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, byte, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, byte, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +]
[i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =]
[i, <, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =]
[<, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (]
[<, nHex, ;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &]
[++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (]
[++, ), {, shift, =, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (]
[=, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (]
[=, i, *, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (]
[*, 4, +, dstPos, ;, final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +]
[final, int, bits, =, (, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<]
[&, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =]
[&, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =]
[(, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<]
[., charAt, (, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;]
[(, i, +, srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =]
[srcPos, ), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, byte, )]
[), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, byte, ), (]
[), ), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, byte, ), (]
[), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, byte, ), (, (]
[), ), <<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, byte, ), (, (]
[<<, shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, byte, ), (, (, out, &]
[shift, ;, final, int, mask, =, 0xf, <<, shift, ;, out, =, (, byte, ), (, (, out, &, ~]
[int, mask, =, 0xf, <<, shift, ;, out, =, (, byte, ), (, (, out, &, ~, mask, ), |]
[shift, ;, out, =, (, byte, ), (, (, out, &, ~, mask, ), |, bits, ), ;, }, return]
[,, final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[,, final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, long, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==]
[dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&]
[dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&]
[final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==]
[,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==]
[if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -]
[srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +]
[0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=]
[==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=, 64, ), {, throw]
[{, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=, 64, ), {, throw, new, IllegalArgumentException, (]
[nBools, -, 1, +, dstPos, >=, 64, ), {, throw, new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 64", ), ;, }, long, out, =]
[>=, 64, ), {, throw, new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 64", ), ;, }, long, out, =, dstInit, ;, int, shift, =]
[(, "nBools-1+dstPos is greather or equal to than 64", ), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, long, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +]
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, long, bits, =]
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, long, bits, =]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, long, bits, =, (]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, long, bits, =, (]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, long, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, long, bits, =, (, src, []
[;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, long, bits, =, (, src, []
[++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, long, bits, =, (, src, [, i, +]
[shift, =, i, *, 1, +, dstPos, ;, final, long, bits, =, (, src, [, i, +, srcPos, ], ?]
[i, *, 1, +, dstPos, ;, final, long, bits, =, (, src, [, i, +, srcPos, ], ?, 1L, :]
[+, dstPos, ;, final, long, bits, =, (, src, [, i, +, srcPos, ], ?, 1L, :, 0, ), <<]
[=, (, src, [, i, +, srcPos, ], ?, 1L, :, 0, ), <<, shift, ;, final, long, mask, =]
[=, (, src, [, i, +, srcPos, ], ?, 1L, :, 0, ), <<, shift, ;, final, long, mask, =]
[src, [, i, +, srcPos, ], ?, 1L, :, 0, ), <<, shift, ;, final, long, mask, =, 0x1L, <<]
[i, +, srcPos, ], ?, 1L, :, 0, ), <<, shift, ;, final, long, mask, =, 0x1L, <<, shift, ;]
[srcPos, ], ?, 1L, :, 0, ), <<, shift, ;, final, long, mask, =, 0x1L, <<, shift, ;, out, =]
[srcPos, ], ?, 1L, :, 0, ), <<, shift, ;, final, long, mask, =, 0x1L, <<, shift, ;, out, =]
[], ?, 1L, :, 0, ), <<, shift, ;, final, long, mask, =, 0x1L, <<, shift, ;, out, =, (]
[], ?, 1L, :, 0, ), <<, shift, ;, final, long, mask, =, 0x1L, <<, shift, ;, out, =, (]
[1L, :, 0, ), <<, shift, ;, final, long, mask, =, 0x1L, <<, shift, ;, out, =, (, out, &]
[:, 0, ), <<, shift, ;, final, long, mask, =, 0x1L, <<, shift, ;, out, =, (, out, &, ~]
[<<, shift, ;, final, long, mask, =, 0x1L, <<, shift, ;, out, =, (, out, &, ~, mask, ), |]
[long, mask, =, 0x1L, <<, shift, ;, out, =, (, out, &, ~, mask, ), |, bits, ;, }, return]
[,, final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[,, final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==]
[dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&]
[dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&]
[final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==]
[,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==]
[if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -]
[srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +]
[0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=]
[==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=, 32, ), {, throw]
[{, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=, 32, ), {, throw, new, IllegalArgumentException, (]
[nBools, -, 1, +, dstPos, >=, 32, ), {, throw, new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 32", ), ;, }, int, out, =]
[>=, 32, ), {, throw, new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 32", ), ;, }, int, out, =, dstInit, ;, int, shift, =]
[(, "nBools-1+dstPos is greather or equal to than 32", ), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, int, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +]
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =]
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, []
[;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, []
[++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, [, i, +]
[shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, [, i, +, srcPos, ], ?]
[i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, [, i, +, srcPos, ], ?, 1, :]
[+, dstPos, ;, final, int, bits, =, (, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<]
[=, (, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =]
[=, (, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =]
[src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<]
[i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;]
[srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =]
[srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =]
[], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (]
[], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (]
[1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, out, &]
[:, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, out, &, ~]
[<<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, out, &, ~, mask, ), |]
[int, mask, =, 0x1, <<, shift, ;, out, =, (, out, &, ~, mask, ), |, bits, ;, }, return]
[,, final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[,, final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, short, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==]
[dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&]
[dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&]
[final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==]
[,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==]
[if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -]
[srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +]
[0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=]
[==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=, 16, ), {, throw]
[{, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=, 16, ), {, throw, new, IllegalArgumentException, (]
[nBools, -, 1, +, dstPos, >=, 16, ), {, throw, new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 16", ), ;, }, short, out, =]
[>=, 16, ), {, throw, new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 16", ), ;, }, short, out, =, dstInit, ;, int, shift, =]
[(, "nBools-1+dstPos is greather or equal to than 16", ), ;, }, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, short, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +]
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =]
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, []
[;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, []
[++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, [, i, +]
[shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, [, i, +, srcPos, ], ?]
[i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, [, i, +, srcPos, ], ?, 1, :]
[+, dstPos, ;, final, int, bits, =, (, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<]
[=, (, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =]
[=, (, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =]
[src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<]
[i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;]
[srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =]
[1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, short, )]
[:, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, short, ), (]
[:, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, short, ), (]
[0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, short, ), (, (]
[0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, short, ), (, (]
[<<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, short, ), (, (, out, &]
[shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, short, ), (, (, out, &, ~]
[int, mask, =, 0x1, <<, shift, ;, out, =, (, short, ), (, (, out, &, ~, mask, ), |]
[shift, ;, out, =, (, short, ), (, (, out, &, ~, mask, ), |, bits, ), ;, }, return]
[,, final, int, srcPos, ,, final, byte, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[,, final, int, srcPos, ,, final, byte, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[final, int, srcPos, ,, final, byte, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, byte, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, byte, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, int, srcPos, ,, final, byte, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (]
[final, byte, dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==]
[dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&]
[dstInit, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&]
[final, int, dstPos, ,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==]
[,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[,, final, int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||]
[int, nBools, ), {, if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==]
[if, (, (, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (]
[0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -]
[srcPos, ==, 0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +]
[0, ), ||, 0, ==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=]
[==, nBools, ), {, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=, 8, ), {, throw]
[{, return, dstInit, ;, }, if, (, nBools, -, 1, +, dstPos, >=, 8, ), {, throw, new, IllegalArgumentException, (]
[nBools, -, 1, +, dstPos, >=, 8, ), {, throw, new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 8", ), ;, }, byte, out, =]
[>=, 8, ), {, throw, new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 8", ), ;, }, byte, out, =, dstInit, ;, int, shift, =]
[(, "nBools-1+dstPos is greather or equal to than 8", ), ;, }, byte, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =]
[), ;, }, byte, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, byte, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[}, byte, out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[out, =, dstInit, ;, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +]
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =]
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (]
[<, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (]
[;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, []
[;, i, ++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, []
[++, ), {, shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, [, i, +]
[shift, =, i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, [, i, +, srcPos, ], ?]
[i, *, 1, +, dstPos, ;, final, int, bits, =, (, src, [, i, +, srcPos, ], ?, 1, :]
[+, dstPos, ;, final, int, bits, =, (, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<]
[=, (, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =]
[=, (, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =]
[src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<]
[i, +, srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;]
[srcPos, ], ?, 1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =]
[1, :, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, byte, )]
[:, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, byte, ), (]
[:, 0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, byte, ), (]
[0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, byte, ), (, (]
[0, ), <<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, byte, ), (, (]
[<<, shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, byte, ), (, (, out, &]
[shift, ;, final, int, mask, =, 0x1, <<, shift, ;, out, =, (, byte, ), (, (, out, &, ~]
[int, mask, =, 0x1, <<, shift, ;, out, =, (, byte, ), (, (, out, &, ~, mask, ), |]
[shift, ;, out, =, (, byte, ), (, (, out, &, ~, mask, ), |, bits, ), ;, }, return]
[int, srcPos, ,, final, int, [, ], dst, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (]
[int, srcPos, ,, final, int, [, ], dst, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (]
[,, final, int, [, ], dst, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (, 0, ==]
[], dst, ,, final, int, dstPos, ,, final, int, nInts, ), {, if, (, 0, ==, nInts, ), {, return]
[dstPos, ,, final, int, nInts, ), {, if, (, 0, ==, nInts, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nInts, ), {, if, (, 0, ==, nInts, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nInts, ), {, if, (, 0, ==, nInts, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nInts, ), {, if, (, 0, ==, nInts, ), {, return, dst, ;, }, if, (]
[,, final, int, nInts, ), {, if, (, 0, ==, nInts, ), {, return, dst, ;, }, if, (, (]
[,, final, int, nInts, ), {, if, (, 0, ==, nInts, ), {, return, dst, ;, }, if, (, (]
[int, nInts, ), {, if, (, 0, ==, nInts, ), {, return, dst, ;, }, if, (, (, nInts, -]
[{, if, (, 0, ==, nInts, ), {, return, dst, ;, }, if, (, (, nInts, -, 1, ), *]
[(, 0, ==, nInts, ), {, return, dst, ;, }, if, (, (, nInts, -, 1, ), *, 32, +]
[==, nInts, ), {, return, dst, ;, }, if, (, (, nInts, -, 1, ), *, 32, +, srcPos, >=]
[return, dst, ;, }, if, (, (, nInts, -, 1, ), *, 32, +, srcPos, >=, 64, ), {, throw]
[}, if, (, (, nInts, -, 1, ), *, 32, +, srcPos, >=, 64, ), {, throw, new, IllegalArgumentException, (]
[), *, 32, +, srcPos, >=, 64, ), {, throw, new, IllegalArgumentException, (, "(nInts-1)*32+srcPos is greather or equal to than 64", ), ;, }, int, shift, =]
[), {, throw, new, IllegalArgumentException, (, "(nInts-1)*32+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =]
[throw, new, IllegalArgumentException, (, "(nInts-1)*32+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[throw, new, IllegalArgumentException, (, "(nInts-1)*32+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[IllegalArgumentException, (, "(nInts-1)*32+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
["(nInts-1)*32+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;]
["(nInts-1)*32+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =, i, *, 32, +]
[i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =, i, *, 32, +, srcPos, ;]
[i, =, 0, ;, i, <, nInts, ;, i, ++, ), {, shift, =, i, *, 32, +, srcPos, ;]
[0, ;, i, <, nInts, ;, i, ++, ), {, shift, =, i, *, 32, +, srcPos, ;, dst, []
[0, ;, i, <, nInts, ;, i, ++, ), {, shift, =, i, *, 32, +, srcPos, ;, dst, []
[i, <, nInts, ;, i, ++, ), {, shift, =, i, *, 32, +, srcPos, ;, dst, [, dstPos, +]
[;, i, ++, ), {, shift, =, i, *, 32, +, srcPos, ;, dst, [, dstPos, +, i, ], =]
[), {, shift, =, i, *, 32, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, int, )]
[{, shift, =, i, *, 32, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, int, ), (]
[{, shift, =, i, *, 32, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, int, ), (]
[=, i, *, 32, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, int, ), (, 0xffffffff, &]
[i, *, 32, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, int, ), (, 0xffffffff, &, (]
[i, *, 32, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, int, ), (, 0xffffffff, &, (]
[+, srcPos, ;, dst, [, dstPos, +, i, ], =, (, int, ), (, 0xffffffff, &, (, src, >, >]
[+, i, ], =, (, int, ), (, 0xffffffff, &, (, src, >, >, shift, ), ), ;, }, return]
[int, srcPos, ,, final, short, [, ], dst, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (]
[int, srcPos, ,, final, short, [, ], dst, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (]
[,, final, short, [, ], dst, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==]
[], dst, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return]
[dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (]
[,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (, (]
[,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (, (]
[int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (, (, nShorts, -]
[{, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (, (, nShorts, -, 1, ), *]
[(, 0, ==, nShorts, ), {, return, dst, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +]
[==, nShorts, ), {, return, dst, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +, srcPos, >=]
[return, dst, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +, srcPos, >=, 64, ), {, throw]
[}, if, (, (, nShorts, -, 1, ), *, 16, +, srcPos, >=, 64, ), {, throw, new, IllegalArgumentException, (]
[), *, 16, +, srcPos, >=, 64, ), {, throw, new, IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 64", ), ;, }, int, shift, =]
[), {, throw, new, IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =]
[throw, new, IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[throw, new, IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
["(nShorts-1)*16+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;]
["(nShorts-1)*16+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +]
[i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;]
[i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;]
[0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;, dst, []
[0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;, dst, []
[i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;, dst, [, dstPos, +]
[;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =]
[), {, shift, =, i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, )]
[{, shift, =, i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (]
[{, shift, =, i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (]
[=, i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (, 0xffff, &]
[i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (, 0xffff, &, (]
[i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (, 0xffff, &, (]
[+, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (, 0xffff, &, (, src, >, >]
[+, i, ], =, (, short, ), (, 0xffff, &, (, src, >, >, shift, ), ), ;, }, return]
[int, srcPos, ,, final, short, [, ], dst, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (]
[int, srcPos, ,, final, short, [, ], dst, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (]
[,, final, short, [, ], dst, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==]
[], dst, ,, final, int, dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return]
[dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (]
[,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (, (]
[,, final, int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (, (]
[int, nShorts, ), {, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (, (, nShorts, -]
[{, if, (, 0, ==, nShorts, ), {, return, dst, ;, }, if, (, (, nShorts, -, 1, ), *]
[(, 0, ==, nShorts, ), {, return, dst, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +]
[==, nShorts, ), {, return, dst, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +, srcPos, >=]
[return, dst, ;, }, if, (, (, nShorts, -, 1, ), *, 16, +, srcPos, >=, 32, ), {, throw]
[}, if, (, (, nShorts, -, 1, ), *, 16, +, srcPos, >=, 32, ), {, throw, new, IllegalArgumentException, (]
[), *, 16, +, srcPos, >=, 32, ), {, throw, new, IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 32", ), ;, }, int, shift, =]
[), {, throw, new, IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =]
[throw, new, IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[throw, new, IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
["(nShorts-1)*16+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;]
["(nShorts-1)*16+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +]
[i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;]
[i, =, 0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;]
[0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;, dst, []
[0, ;, i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;, dst, []
[i, <, nShorts, ;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;, dst, [, dstPos, +]
[;, i, ++, ), {, shift, =, i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =]
[), {, shift, =, i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, )]
[{, shift, =, i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (]
[{, shift, =, i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (]
[=, i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (, 0xffff, &]
[i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (, 0xffff, &, (]
[i, *, 16, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (, 0xffff, &, (]
[+, srcPos, ;, dst, [, dstPos, +, i, ], =, (, short, ), (, 0xffff, &, (, src, >, >]
[+, i, ], =, (, short, ), (, 0xffff, &, (, src, >, >, shift, ), ), ;, }, return]
[int, srcPos, ,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[int, srcPos, ,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==]
[], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (]
[,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (]
[int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -]
[{, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -, 1, ), *]
[(, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +]
[==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, srcPos, >=]
[return, dst, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, srcPos, >=, 64, ), {, throw]
[}, if, (, (, nBytes, -, 1, ), *, 8, +, srcPos, >=, 64, ), {, throw, new, IllegalArgumentException, (]
[), *, 8, +, srcPos, >=, 64, ), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 64", ), ;, }, int, shift, =]
[), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =]
[throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
["(nBytes-1)*8+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
["(nBytes-1)*8+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +]
[i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;]
[i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;]
[0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, []
[0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, []
[i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +]
[;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =]
[), {, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, )]
[{, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (]
[{, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (]
[=, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &]
[i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &, (]
[i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &, (]
[+, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &, (, src, >, >]
[+, i, ], =, (, byte, ), (, 0xff, &, (, src, >, >, shift, ), ), ;, }, return]
[int, srcPos, ,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[int, srcPos, ,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==]
[], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (]
[,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (]
[int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -]
[{, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -, 1, ), *]
[(, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +]
[==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, srcPos, >=]
[return, dst, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, srcPos, >=, 32, ), {, throw]
[}, if, (, (, nBytes, -, 1, ), *, 8, +, srcPos, >=, 32, ), {, throw, new, IllegalArgumentException, (]
[), *, 8, +, srcPos, >=, 32, ), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 32", ), ;, }, int, shift, =]
[), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =]
[throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
["(nBytes-1)*8+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
["(nBytes-1)*8+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +]
[i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;]
[i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;]
[0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, []
[0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, []
[i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +]
[;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =]
[), {, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, )]
[{, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (]
[{, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (]
[=, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &]
[i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &, (]
[i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &, (]
[+, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &, (, src, >, >]
[+, i, ], =, (, byte, ), (, 0xff, &, (, src, >, >, shift, ), ), ;, }, return]
[int, srcPos, ,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[int, srcPos, ,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==]
[], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (]
[,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (]
[int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -]
[{, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -, 1, ), *]
[(, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +]
[==, nBytes, ), {, return, dst, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, srcPos, >=]
[return, dst, ;, }, if, (, (, nBytes, -, 1, ), *, 8, +, srcPos, >=, 16, ), {, throw]
[}, if, (, (, nBytes, -, 1, ), *, 8, +, srcPos, >=, 16, ), {, throw, new, IllegalArgumentException, (]
[), *, 8, +, srcPos, >=, 16, ), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 16", ), ;, }, int, shift, =]
[), {, throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =]
[throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[throw, new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
["(nBytes-1)*8+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
["(nBytes-1)*8+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +]
[i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;]
[i, =, 0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;]
[0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, []
[0, ;, i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, []
[i, <, nBytes, ;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +]
[;, i, ++, ), {, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =]
[), {, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, )]
[{, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (]
[{, shift, =, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (]
[=, i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &]
[i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &, (]
[i, *, 8, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &, (]
[+, srcPos, ;, dst, [, dstPos, +, i, ], =, (, byte, ), (, 0xff, &, (, src, >, >]
[+, i, ], =, (, byte, ), (, 0xff, &, (, src, >, >, shift, ), ), ;, }, return]
[,, final, int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (]
[,, final, int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (]
[int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==]
[String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (]
[,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (]
[int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -]
[{, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *]
[(, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +]
[==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=]
[return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=, 64, ), {, throw]
[}, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=, 64, ), {, throw, new, IllegalArgumentException, (]
[*, 4, +, srcPos, >=, 64, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 64", ), ;, }, final, StringBuilder, sb, =]
[srcPos, >=, 64, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 64", ), ;, }, final, StringBuilder, sb, =, new, StringBuilder, (]
[new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 64", ), ;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =]
[;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =, 0, ;, int, append, =]
[;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =, 0, ;, int, append, =]
[;, int, shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =]
[shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;]
[int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;]
[., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +]
[i, <, nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =]
[;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, (, int, )]
[i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, (, int, ), (]
[i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, (, int, ), (]
[), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, (, int, ), (, 0xF, &]
[{, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, (, int, ), (, 0xF, &, (]
[{, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, (, int, ), (, 0xF, &, (]
[i, *, 4, +, srcPos, ;, final, int, bits, =, (, int, ), (, 0xF, &, (, src, >, >]
[final, int, bits, =, (, int, ), (, 0xF, &, (, src, >, >, shift, ), ), ;, if, (]
[final, int, bits, =, (, int, ), (, 0xF, &, (, src, >, >, shift, ), ), ;, if, (]
[final, int, bits, =, (, int, ), (, 0xF, &, (, src, >, >, shift, ), ), ;, if, (]
[bits, =, (, int, ), (, 0xF, &, (, src, >, >, shift, ), ), ;, if, (, dstPos, +]
[(, int, ), (, 0xF, &, (, src, >, >, shift, ), ), ;, if, (, dstPos, +, i, ==]
[(, 0xF, &, (, src, >, >, shift, ), ), ;, if, (, dstPos, +, i, ==, append, ), {]
[0xF, &, (, src, >, >, shift, ), ), ;, if, (, dstPos, +, i, ==, append, ), {, ++]
[(, src, >, >, shift, ), ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;]
[(, src, >, >, shift, ), ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;]
[shift, ), ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;, sb, ., append, (]
[), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (]
[==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {]
[==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {]
[++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (]
[++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (]
[;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +]
[., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +, i, ,]
[(, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (]
[}, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), ), ;, }, }, return]
[}, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), ), ;, }, }, return]
[,, final, int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (]
[,, final, int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (]
[int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==]
[String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (]
[,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (]
[int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -]
[{, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *]
[(, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +]
[==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=]
[return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=, 32, ), {, throw]
[}, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=, 32, ), {, throw, new, IllegalArgumentException, (]
[*, 4, +, srcPos, >=, 32, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 32", ), ;, }, final, StringBuilder, sb, =]
[srcPos, >=, 32, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 32", ), ;, }, final, StringBuilder, sb, =, new, StringBuilder, (]
[new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 32", ), ;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =]
[;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =, 0, ;, int, append, =]
[;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =, 0, ;, int, append, =]
[;, int, shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =]
[shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;]
[int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;]
[., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +]
[i, <, nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =]
[i, <, nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =]
[nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &]
[;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (]
[;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (]
[), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >]
[*, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (]
[*, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (]
[*, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (]
[+, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +]
[;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==]
[bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {]
[=, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++]
[&, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;]
[&, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;]
[>, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;, sb, ., append, (]
[), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (]
[==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {]
[==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {]
[++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (]
[++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (]
[;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +]
[., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +, i, ,]
[(, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (]
[}, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), ), ;, }, }, return]
[}, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), ), ;, }, }, return]
[,, final, int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (]
[,, final, int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (]
[int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==]
[String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (]
[,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (]
[int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -]
[{, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *]
[(, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +]
[==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=]
[return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=, 16, ), {, throw]
[}, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=, 16, ), {, throw, new, IllegalArgumentException, (]
[*, 4, +, srcPos, >=, 16, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 16", ), ;, }, final, StringBuilder, sb, =]
[srcPos, >=, 16, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 16", ), ;, }, final, StringBuilder, sb, =, new, StringBuilder, (]
[new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 16", ), ;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =]
[;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =, 0, ;, int, append, =]
[;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =, 0, ;, int, append, =]
[;, int, shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =]
[shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;]
[int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;]
[., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +]
[i, <, nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =]
[i, <, nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =]
[nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &]
[;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (]
[;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (]
[), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >]
[*, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (]
[*, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (]
[*, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (]
[+, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +]
[;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==]
[bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {]
[=, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++]
[&, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;]
[&, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;]
[>, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;, sb, ., append, (]
[), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (]
[==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {]
[==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {]
[++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (]
[++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (]
[;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +]
[., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +, i, ,]
[(, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (]
[}, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), ), ;, }, }, return]
[}, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), ), ;, }, }, return]
[,, final, int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (]
[,, final, int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (]
[int, srcPos, ,, final, String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==]
[String, dstInit, ,, final, int, dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[dstPos, ,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (]
[,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (]
[,, final, int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (]
[int, nHexs, ), {, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -]
[{, if, (, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *]
[(, 0, ==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +]
[==, nHexs, ), {, return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=]
[return, dstInit, ;, }, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=, 8, ), {, throw]
[}, if, (, (, nHexs, -, 1, ), *, 4, +, srcPos, >=, 8, ), {, throw, new, IllegalArgumentException, (]
[*, 4, +, srcPos, >=, 8, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 8", ), ;, }, final, StringBuilder, sb, =]
[srcPos, >=, 8, ), {, throw, new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 8", ), ;, }, final, StringBuilder, sb, =, new, StringBuilder, (]
[new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 8", ), ;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =]
[;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =, 0, ;, int, append, =]
[;, }, final, StringBuilder, sb, =, new, StringBuilder, (, dstInit, ), ;, int, shift, =, 0, ;, int, append, =]
[;, int, shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =]
[shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[shift, =, 0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[0, ;, int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;]
[int, append, =, sb, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;]
[., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +]
[i, <, nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =]
[i, <, nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =]
[nHexs, ;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &]
[;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (]
[;, i, ++, ), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (]
[), {, shift, =, i, *, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >]
[*, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (]
[*, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (]
[*, 4, +, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (]
[+, srcPos, ;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +]
[;, final, int, bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==]
[bits, =, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {]
[=, 0xF, &, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++]
[&, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;]
[&, (, src, >, >, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;]
[>, shift, ), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;, sb, ., append, (]
[), ;, if, (, dstPos, +, i, ==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (]
[==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {]
[==, append, ), {, ++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {]
[++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (]
[++, append, ;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (]
[;, sb, ., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +]
[., append, (, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +, i, ,]
[(, intToHexDigit, (, bits, ), ), ;, }, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (]
[}, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), ), ;, }, }, return]
[}, else, {, sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), ), ;, }, }, return]
[int, srcPos, ,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[int, srcPos, ,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, 0, ==]
[], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -]
[nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +]
[{, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=]
[==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=, 64, ), {, throw]
[{, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=, 64, ), {, throw, new, IllegalArgumentException, (]
[nBools, -, 1, +, srcPos, >=, 64, ), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 64", ), ;, }, int, shift, =]
[), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =]
[throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
["nBools-1+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
["nBools-1+srcPos is greather or equal to than 64", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +]
[i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;]
[i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;]
[0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, []
[0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, []
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +]
[;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =]
[i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (]
[i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (]
[++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (]
[++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (]
[{, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &]
[shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (]
[shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (]
[*, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (, src, >, >]
[;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (, src, >, >, shift, ), ), !=]
[i, ], =, (, (, 0x1, &, (, src, >, >, shift, ), ), !=, 0, ), ;, }, return]
[int, srcPos, ,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[int, srcPos, ,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, 0, ==]
[], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -]
[nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +]
[{, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=]
[==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=, 32, ), {, throw]
[{, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=, 32, ), {, throw, new, IllegalArgumentException, (]
[nBools, -, 1, +, srcPos, >=, 32, ), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 32", ), ;, }, int, shift, =]
[), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =]
[throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
["nBools-1+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
["nBools-1+srcPos is greather or equal to than 32", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +]
[i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;]
[i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;]
[0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, []
[0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, []
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +]
[;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =]
[i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (]
[i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (]
[++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (]
[++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (]
[{, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &]
[shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (]
[shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (]
[*, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (, src, >, >]
[;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (, src, >, >, shift, ), ), !=]
[i, ], =, (, (, 0x1, &, (, src, >, >, shift, ), ), !=, 0, ), ;, }, return]
[int, srcPos, ,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[int, srcPos, ,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, 0, ==]
[], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -]
[nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +]
[{, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=]
[==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=, 16, ), {, throw]
[{, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=, 16, ), {, throw, new, IllegalArgumentException, (]
[nBools, -, 1, +, srcPos, >=, 16, ), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 16", ), ;, }, int, shift, =]
[+, srcPos, >=, 16, ), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, assert]
[srcPos, >=, 16, ), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, assert, (]
[srcPos, >=, 16, ), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, assert, (]
[srcPos, >=, 16, ), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, assert, (]
[>=, 16, ), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, assert, (, (]
[>=, 16, ), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, assert, (, (]
[), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, assert, (, (, nBools, -]
[new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, assert, (, (, nBools, -, 1, ), *]
[(, "nBools-1+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, assert, (, (, nBools, -, 1, ), *, 1, <]
[(, "nBools-1+srcPos is greather or equal to than 16", ), ;, }, int, shift, =, 0, ;, assert, (, (, nBools, -, 1, ), *, 1, <]
[), ;, }, int, shift, =, 0, ;, assert, (, (, nBools, -, 1, ), *, 1, <, 16, -]
[assert, (, (, nBools, -, 1, ), *, 1, <, 16, -, srcPos, ), ;, for, (, int, i, =]
[(, nBools, -, 1, ), *, 1, <, 16, -, srcPos, ), ;, for, (, int, i, =, 0, ;]
[(, nBools, -, 1, ), *, 1, <, 16, -, srcPos, ), ;, for, (, int, i, =, 0, ;]
[-, 1, ), *, 1, <, 16, -, srcPos, ), ;, for, (, int, i, =, 0, ;, i, <]
[), *, 1, <, 16, -, srcPos, ), ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[), *, 1, <, 16, -, srcPos, ), ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[16, -, srcPos, ), ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {]
[srcPos, ), ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[srcPos, ), ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[srcPos, ), ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +]
[i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;]
[i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;]
[0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, []
[0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, []
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +]
[;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =]
[i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (]
[i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (]
[++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (]
[++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (]
[{, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &]
[shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (]
[shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (]
[*, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (, src, >, >]
[;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (, src, >, >, shift, ), ), !=]
[i, ], =, (, (, 0x1, &, (, src, >, >, shift, ), ), !=, 0, ), ;, }, return]
[int, srcPos, ,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[int, srcPos, ,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (]
[,, final, boolean, [, ], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, 0, ==]
[], dst, ,, final, int, dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (]
[final, int, nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -]
[nBools, ), {, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +]
[{, if, (, 0, ==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=]
[==, nBools, ), {, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=, 8, ), {, throw]
[{, return, dst, ;, }, if, (, nBools, -, 1, +, srcPos, >=, 8, ), {, throw, new, IllegalArgumentException, (]
[nBools, -, 1, +, srcPos, >=, 8, ), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 8", ), ;, }, int, shift, =]
[), {, throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 8", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =]
[throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 8", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[throw, new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 8", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;]
[IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 8", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
["nBools-1+srcPos is greather or equal to than 8", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
["nBools-1+srcPos is greather or equal to than 8", ), ;, }, int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;]
[int, shift, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =]
[;, for, (, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *]
[(, int, i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +]
[i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;]
[i, =, 0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;]
[0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, []
[0, ;, i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, []
[i, <, nBools, ;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +]
[;, i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =]
[i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (]
[i, ++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (]
[++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (]
[++, ), {, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (]
[{, shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &]
[shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (]
[shift, =, i, *, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (]
[*, 1, +, srcPos, ;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (, src, >, >]
[;, dst, [, dstPos, +, i, ], =, (, (, 0x1, &, (, src, >, >, shift, ), ), !=]
[i, ], =, (, (, 0x1, &, (, src, >, >, shift, ), ), !=, 0, ), ;, }, return]
[UUID, src, ,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[UUID, src, ,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (]
[,, final, byte, [, ], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==]
[], dst, ,, final, int, dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[dstPos, ,, final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (]
[final, int, nBytes, ), {, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, nBytes, >]
[{, if, (, 0, ==, nBytes, ), {, return, dst, ;, }, if, (, nBytes, >, 16, ), {, throw]
[0, ==, nBytes, ), {, return, dst, ;, }, if, (, nBytes, >, 16, ), {, throw, new, IllegalArgumentException, (]
[{, return, dst, ;, }, if, (, nBytes, >, 16, ), {, throw, new, IllegalArgumentException, (, "nBytes is greather than 16", ), ;, }]
[dst, ;, }, if, (, nBytes, >, 16, ), {, throw, new, IllegalArgumentException, (, "nBytes is greather than 16", ), ;, }, longToByteArray, (]
[dst, ;, }, if, (, nBytes, >, 16, ), {, throw, new, IllegalArgumentException, (, "nBytes is greather than 16", ), ;, }, longToByteArray, (]
[>, 16, ), {, throw, new, IllegalArgumentException, (, "nBytes is greather than 16", ), ;, }, longToByteArray, (, src, ., getMostSignificantBits, (, ), ,]
[), {, throw, new, IllegalArgumentException, (, "nBytes is greather than 16", ), ;, }, longToByteArray, (, src, ., getMostSignificantBits, (, ), ,, 0, ,]
[throw, new, IllegalArgumentException, (, "nBytes is greather than 16", ), ;, }, longToByteArray, (, src, ., getMostSignificantBits, (, ), ,, 0, ,, dst, ,]
[IllegalArgumentException, (, "nBytes is greather than 16", ), ;, }, longToByteArray, (, src, ., getMostSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, ,]
[IllegalArgumentException, (, "nBytes is greather than 16", ), ;, }, longToByteArray, (, src, ., getMostSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, ,]
[IllegalArgumentException, (, "nBytes is greather than 16", ), ;, }, longToByteArray, (, src, ., getMostSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, ,]
["nBytes is greather than 16", ), ;, }, longToByteArray, (, src, ., getMostSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, ,, nBytes, >]
[;, }, longToByteArray, (, src, ., getMostSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, ,, nBytes, >, 8, ?]
[longToByteArray, (, src, ., getMostSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, ,, nBytes, >, 8, ?, 8, :]
[(, ), ,, 0, ,, dst, ,, dstPos, ,, nBytes, >, 8, ?, 8, :, nBytes, ), ;, if, (]
[(, ), ,, 0, ,, dst, ,, dstPos, ,, nBytes, >, 8, ?, 8, :, nBytes, ), ;, if, (]
[,, 0, ,, dst, ,, dstPos, ,, nBytes, >, 8, ?, 8, :, nBytes, ), ;, if, (, nBytes, >=]
[dst, ,, dstPos, ,, nBytes, >, 8, ?, 8, :, nBytes, ), ;, if, (, nBytes, >=, 8, ), {]
[dstPos, ,, nBytes, >, 8, ?, 8, :, nBytes, ), ;, if, (, nBytes, >=, 8, ), {, longToByteArray, (]
[dstPos, ,, nBytes, >, 8, ?, 8, :, nBytes, ), ;, if, (, nBytes, >=, 8, ), {, longToByteArray, (]
[8, :, nBytes, ), ;, if, (, nBytes, >=, 8, ), {, longToByteArray, (, src, ., getLeastSignificantBits, (, ), ,]
[nBytes, ), ;, if, (, nBytes, >=, 8, ), {, longToByteArray, (, src, ., getLeastSignificantBits, (, ), ,, 0, ,]
[;, if, (, nBytes, >=, 8, ), {, longToByteArray, (, src, ., getLeastSignificantBits, (, ), ,, 0, ,, dst, ,]
[;, if, (, nBytes, >=, 8, ), {, longToByteArray, (, src, ., getLeastSignificantBits, (, ), ,, 0, ,, dst, ,]
[(, nBytes, >=, 8, ), {, longToByteArray, (, src, ., getLeastSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, +]
[>=, 8, ), {, longToByteArray, (, src, ., getLeastSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, +, 8, ,]
[>=, 8, ), {, longToByteArray, (, src, ., getLeastSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, +, 8, ,]
[), {, longToByteArray, (, src, ., getLeastSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, +, 8, ,, nBytes, -]
[., getLeastSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, +, 8, ,, nBytes, -, 8, ), ;, }, return]
[;, }, public, static, UUID, byteArrayToUuid, (, final, byte, [, ], src, ,, final, int, srcPos, ), {, if, (]
[;, }, public, static, UUID, byteArrayToUuid, (, final, byte, [, ], src, ,, final, int, srcPos, ), {, if, (]
[;, }, public, static, UUID, byteArrayToUuid, (, final, byte, [, ], src, ,, final, int, srcPos, ), {, if, (]
[;, }, public, static, UUID, byteArrayToUuid, (, final, byte, [, ], src, ,, final, int, srcPos, ), {, if, (]
[UUID, byteArrayToUuid, (, final, byte, [, ], src, ,, final, int, srcPos, ), {, if, (, src, ., length, -]
[(, final, byte, [, ], src, ,, final, int, srcPos, ), {, if, (, src, ., length, -, srcPos, <]
[], src, ,, final, int, srcPos, ), {, if, (, src, ., length, -, srcPos, <, 16, ), {, throw]
[final, int, srcPos, ), {, if, (, src, ., length, -, srcPos, <, 16, ), {, throw, new, IllegalArgumentException, (]
[if, (, src, ., length, -, srcPos, <, 16, ), {, throw, new, IllegalArgumentException, (, "Need at least 16 bytes for UUID", ), ;, }, return]
[., length, -, srcPos, <, 16, ), {, throw, new, IllegalArgumentException, (, "Need at least 16 bytes for UUID", ), ;, }, return, new, UUID, (]
[-, srcPos, <, 16, ), {, throw, new, IllegalArgumentException, (, "Need at least 16 bytes for UUID", ), ;, }, return, new, UUID, (, byteArrayToLong, (]
[<, 16, ), {, throw, new, IllegalArgumentException, (, "Need at least 16 bytes for UUID", ), ;, }, return, new, UUID, (, byteArrayToLong, (, src, ,]
[), {, throw, new, IllegalArgumentException, (, "Need at least 16 bytes for UUID", ), ;, }, return, new, UUID, (, byteArrayToLong, (, src, ,, srcPos, ,]
[throw, new, IllegalArgumentException, (, "Need at least 16 bytes for UUID", ), ;, }, return, new, UUID, (, byteArrayToLong, (, src, ,, srcPos, ,, 0, ,]
[IllegalArgumentException, (, "Need at least 16 bytes for UUID", ), ;, }, return, new, UUID, (, byteArrayToLong, (, src, ,, srcPos, ,, 0, ,, 0, ,]
[), ;, }, return, new, UUID, (, byteArrayToLong, (, src, ,, srcPos, ,, 0, ,, 0, ,, 8, ), ,]
[}, return, new, UUID, (, byteArrayToLong, (, src, ,, srcPos, ,, 0, ,, 0, ,, 8, ), ,, byteArrayToLong, (]
[new, UUID, (, byteArrayToLong, (, src, ,, srcPos, ,, 0, ,, 0, ,, 8, ), ,, byteArrayToLong, (, src, ,]
[new, UUID, (, byteArrayToLong, (, src, ,, srcPos, ,, 0, ,, 0, ,, 8, ), ,, byteArrayToLong, (, src, ,]
[(, byteArrayToLong, (, src, ,, srcPos, ,, 0, ,, 0, ,, 8, ), ,, byteArrayToLong, (, src, ,, srcPos, +]
[(, src, ,, srcPos, ,, 0, ,, 0, ,, 8, ), ,, byteArrayToLong, (, src, ,, srcPos, +, 8, ,]
[,, srcPos, ,, 0, ,, 0, ,, 8, ), ,, byteArrayToLong, (, src, ,, srcPos, +, 8, ,, 0, ,]
[,, 0, ,, 0, ,, 8, ), ,, byteArrayToLong, (, src, ,, srcPos, +, 8, ,, 0, ,, 0, ,]
