[;, private, boolean, retraverseOnChange, =, true, ;, static, private, class, ScopeState, {, boolean, changed, ;, boolean, traverseChildScopes, ;, ScopeState, (]
[;, static, private, class, ScopeState, {, boolean, changed, ;, boolean, traverseChildScopes, ;, ScopeState, (, ), {, reset, (, ), ;]
[;, }, void, reset, (, ), {, changed, =, false, ;, traverseChildScopes, =, true, ;, }, }, static, private, class]
[=, false, ;, traverseChildScopes, =, true, ;, }, }, static, private, class, StateStack, {, private, ArrayList, <, ScopeState, >, states]
[;, traverseChildScopes, =, true, ;, }, }, static, private, class, StateStack, {, private, ArrayList, <, ScopeState, >, states, =, Lists]
[=, true, ;, }, }, static, private, class, StateStack, {, private, ArrayList, <, ScopeState, >, states, =, Lists, ., newArrayList]
[;, }, }, static, private, class, StateStack, {, private, ArrayList, <, ScopeState, >, states, =, Lists, ., newArrayList, (, )]
[;, private, int, currentDepth, =, 0, ;, StateStack, (, ), {, states, ., add, (, new, ScopeState, (, ), )]
[., newArrayList, (, ), ;, private, int, currentDepth, =, 0, ;, StateStack, (, ), {, states, ., add, (, new]
[;, StateStack, (, ), {, states, ., add, (, new, ScopeState, (, ), ), ;, }, ScopeState, peek, (, )]
[;, }, ScopeState, peek, (, ), {, return, states, ., get, (, currentDepth, ), ;, }, void, push, (, )]
[., add, (, new, ScopeState, (, ), ), ;, }, ScopeState, peek, (, ), {, return, states, ., get, (]
[), ;, }, ScopeState, peek, (, ), {, return, states, ., get, (, currentDepth, ), ;, }, void, push, (]
[;, }, void, push, (, ), {, currentDepth, ++, ;, if, (, states, ., size, (, ), <=, currentDepth, )]
[., get, (, currentDepth, ), ;, }, void, push, (, ), {, currentDepth, ++, ;, if, (, states, ., size]
[), ;, }, void, push, (, ), {, currentDepth, ++, ;, if, (, states, ., size, (, ), <=, currentDepth]
[;, if, (, states, ., size, (, ), <=, currentDepth, ), {, states, ., add, (, new, ScopeState, (, )]
[++, ;, if, (, states, ., size, (, ), <=, currentDepth, ), {, states, ., add, (, new, ScopeState, (]
[), {, states, ., add, (, new, ScopeState, (, ), ), ;, }, else, {, states, ., get, (, currentDepth]
[<=, currentDepth, ), {, states, ., add, (, new, ScopeState, (, ), ), ;, }, else, {, states, ., get]
[., size, (, ), <=, currentDepth, ), {, states, ., add, (, new, ScopeState, (, ), ), ;, }, else]
[), {, states, ., add, (, new, ScopeState, (, ), ), ;, }, else, {, states, ., get, (, currentDepth]
[;, }, else, {, states, ., get, (, currentDepth, ), ., reset, (, ), ;, }, }, void, pop, (]
[., add, (, new, ScopeState, (, ), ), ;, }, else, {, states, ., get, (, currentDepth, ), ., reset]
[), ;, }, else, {, states, ., get, (, currentDepth, ), ., reset, (, ), ;, }, }, void, pop]
[;, }, }, void, pop, (, ), {, currentDepth, --, ;, }, }, private, class, PeepholeChangeHandler, implements, CodeChangeHandler, {, @]
[., reset, (, ), ;, }, }, void, pop, (, ), {, currentDepth, --, ;, }, }, private, class, PeepholeChangeHandler]
[., get, (, currentDepth, ), ., reset, (, ), ;, }, }, void, pop, (, ), {, currentDepth, --, ;]
[), ., reset, (, ), ;, }, }, void, pop, (, ), {, currentDepth, --, ;, }, }, private, class]
[;, }, }, private, class, PeepholeChangeHandler, implements, CodeChangeHandler, {, @, Override, public, void, reportChange, (, ), {, traversalState, ., peek]
[--, ;, }, }, private, class, PeepholeChangeHandler, implements, CodeChangeHandler, {, @, Override, public, void, reportChange, (, ), {, traversalState, .]
[=, true, ;, }, }, PeepholeOptimizationsPass, (, AbstractCompiler, compiler, ,, AbstractPeepholeOptimization, ..., optimizations, ), {, this, ., compiler, =, compiler]
[., changed, =, true, ;, }, }, PeepholeOptimizationsPass, (, AbstractCompiler, compiler, ,, AbstractPeepholeOptimization, ..., optimizations, ), {, this, ., compiler]
[., peek, (, ), ., changed, =, true, ;, }, }, PeepholeOptimizationsPass, (, AbstractCompiler, compiler, ,, AbstractPeepholeOptimization, ..., optimizations, )]
[;, }, }, PeepholeOptimizationsPass, (, AbstractCompiler, compiler, ,, AbstractPeepholeOptimization, ..., optimizations, ), {, this, ., compiler, =, compiler, ;, this]
[=, compiler, ;, this, ., peepholeOptimizations, =, optimizations, ;, }, PeepholeOptimizationsPass, setRetraverseOnChange, (, boolean, retraverse, ), {, this, ., retraverseOnChange]
[., compiler, =, compiler, ;, this, ., peepholeOptimizations, =, optimizations, ;, }, PeepholeOptimizationsPass, setRetraverseOnChange, (, boolean, retraverse, ), {, this]
[;, this, ., peepholeOptimizations, =, optimizations, ;, }, PeepholeOptimizationsPass, setRetraverseOnChange, (, boolean, retraverse, ), {, this, ., retraverseOnChange, =, retraverse]
[=, optimizations, ;, }, PeepholeOptimizationsPass, setRetraverseOnChange, (, boolean, retraverse, ), {, this, ., retraverseOnChange, =, retraverse, ;, return, this, ;]
[., peepholeOptimizations, =, optimizations, ;, }, PeepholeOptimizationsPass, setRetraverseOnChange, (, boolean, retraverse, ), {, this, ., retraverseOnChange, =, retraverse, ;, return]
[;, }, PeepholeOptimizationsPass, setRetraverseOnChange, (, boolean, retraverse, ), {, this, ., retraverseOnChange, =, retraverse, ;, return, this, ;, }, public]
[=, retraverse, ;, return, this, ;, }, public, AbstractCompiler, getCompiler, (, ), {, return, compiler, ;, }, @, Override, public]
[., retraverseOnChange, =, retraverse, ;, return, this, ;, }, public, AbstractCompiler, getCompiler, (, ), {, return, compiler, ;, }, @]
[;, return, this, ;, }, public, AbstractCompiler, getCompiler, (, ), {, return, compiler, ;, }, @, Override, public, void, process]
[;, }, public, AbstractCompiler, getCompiler, (, ), {, return, compiler, ;, }, @, Override, public, void, process, (, Node, externs]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, PeepholeChangeHandler, handler, =, new, PeepholeChangeHandler]
[;, compiler, ., addChangeHandler, (, handler, ), ;, beginTraversal, (, ), ;, traverse, (, root, ), ;, endTraversal, (, )]
[;, beginTraversal, (, ), ;, traverse, (, root, ), ;, endTraversal, (, ), ;, compiler, ., removeChangeHandler, (, handler, )]
[., addChangeHandler, (, handler, ), ;, beginTraversal, (, ), ;, traverse, (, root, ), ;, endTraversal, (, ), ;, compiler]
[), ;, beginTraversal, (, ), ;, traverse, (, root, ), ;, endTraversal, (, ), ;, compiler, ., removeChangeHandler, (, handler]
[;, traverse, (, root, ), ;, endTraversal, (, ), ;, compiler, ., removeChangeHandler, (, handler, ), ;, }, private, void]
[;, endTraversal, (, ), ;, compiler, ., removeChangeHandler, (, handler, ), ;, }, private, void, traverse, (, Node, node, )]
[), ;, endTraversal, (, ), ;, compiler, ., removeChangeHandler, (, handler, ), ;, }, private, void, traverse, (, Node, node]
[;, compiler, ., removeChangeHandler, (, handler, ), ;, }, private, void, traverse, (, Node, node, ), {, if, (, !]
[;, }, private, void, traverse, (, Node, node, ), {, if, (, !, shouldVisit, (, node, ), ), {, return]
[., removeChangeHandler, (, handler, ), ;, }, private, void, traverse, (, Node, node, ), {, if, (, !, shouldVisit, (]
[), ;, }, private, void, traverse, (, Node, node, ), {, if, (, !, shouldVisit, (, node, ), ), {]
[), {, return, ;, }, int, visits, =, 0, ;, do, {, Node, c, =, node, ., getFirstChild, (, )]
[), {, return, ;, }, int, visits, =, 0, ;, do, {, Node, c, =, node, ., getFirstChild, (, )]
[), ), {, return, ;, }, int, visits, =, 0, ;, do, {, Node, c, =, node, ., getFirstChild, (]
[;, do, {, Node, c, =, node, ., getFirstChild, (, ), ;, while, (, c, !=, null, ), {, Node]
[;, while, (, c, !=, null, ), {, Node, next, =, c, ., getNext, (, ), ;, traverse, (, c]
[., getFirstChild, (, ), ;, while, (, c, !=, null, ), {, Node, next, =, c, ., getNext, (, )]
[), {, Node, next, =, c, ., getNext, (, ), ;, traverse, (, c, ), ;, c, =, next, ;]
[!=, null, ), {, Node, next, =, c, ., getNext, (, ), ;, traverse, (, c, ), ;, c, =]
[), {, Node, next, =, c, ., getNext, (, ), ;, traverse, (, c, ), ;, c, =, next, ;]
[;, traverse, (, c, ), ;, c, =, next, ;, }, visit, (, node, ), ;, visits, ++, ;, Preconditions]
[., getNext, (, ), ;, traverse, (, c, ), ;, c, =, next, ;, }, visit, (, node, ), ;]
[;, c, =, next, ;, }, visit, (, node, ), ;, visits, ++, ;, Preconditions, ., checkState, (, visits, <]
[), ;, c, =, next, ;, }, visit, (, node, ), ;, visits, ++, ;, Preconditions, ., checkState, (, visits]
[=, next, ;, }, visit, (, node, ), ;, visits, ++, ;, Preconditions, ., checkState, (, visits, <, 10000, ,]
[;, }, visit, (, node, ), ;, visits, ++, ;, Preconditions, ., checkState, (, visits, <, 10000, ,, "too many interations", )]
[;, visits, ++, ;, Preconditions, ., checkState, (, visits, <, 10000, ,, "too many interations", ), ;, }, while, (, shouldRetraverse, (]
[), ;, visits, ++, ;, Preconditions, ., checkState, (, visits, <, 10000, ,, "too many interations", ), ;, }, while, (, shouldRetraverse]
[;, Preconditions, ., checkState, (, visits, <, 10000, ,, "too many interations", ), ;, }, while, (, shouldRetraverse, (, node, ), )]
[++, ;, Preconditions, ., checkState, (, visits, <, 10000, ,, "too many interations", ), ;, }, while, (, shouldRetraverse, (, node, )]
[;, }, while, (, shouldRetraverse, (, node, ), ), ;, exitNode, (, node, ), ;, }, private, boolean, shouldRetraverse, (]
[., checkState, (, visits, <, 10000, ,, "too many interations", ), ;, }, while, (, shouldRetraverse, (, node, ), ), ;, exitNode]
[,, "too many interations", ), ;, }, while, (, shouldRetraverse, (, node, ), ), ;, exitNode, (, node, ), ;, }, private]
[<, 10000, ,, "too many interations", ), ;, }, while, (, shouldRetraverse, (, node, ), ), ;, exitNode, (, node, ), ;]
[,, "too many interations", ), ;, }, while, (, shouldRetraverse, (, node, ), ), ;, exitNode, (, node, ), ;, }, private]
[), ;, }, while, (, shouldRetraverse, (, node, ), ), ;, exitNode, (, node, ), ;, }, private, boolean, shouldRetraverse]
[), ;, exitNode, (, node, ), ;, }, private, boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange, &&]
[), ), ;, exitNode, (, node, ), ;, }, private, boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange]
[;, }, private, boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange, &&, node, ., getParent, (, ), !=]
[), ;, }, private, boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange, &&, node, ., getParent, (, )]
[), {, ScopeState, state, =, traversalState, ., peek, (, ), ;, if, (, state, ., changed, ), {, state, .]
[&&, (, node, ., isFunction, (, ), ||, node, ., isScript, (, ), ), ), {, ScopeState, state, =, traversalState]
[&&, node, ., getParent, (, ), !=, null, &&, (, node, ., isFunction, (, ), ||, node, ., isScript, (]
[&&, (, node, ., isFunction, (, ), ||, node, ., isScript, (, ), ), ), {, ScopeState, state, =, traversalState]
[!=, null, &&, (, node, ., isFunction, (, ), ||, node, ., isScript, (, ), ), ), {, ScopeState, state]
[., getParent, (, ), !=, null, &&, (, node, ., isFunction, (, ), ||, node, ., isScript, (, ), )]
[&&, (, node, ., isFunction, (, ), ||, node, ., isScript, (, ), ), ), {, ScopeState, state, =, traversalState]
[), {, ScopeState, state, =, traversalState, ., peek, (, ), ;, if, (, state, ., changed, ), {, state, .]
[), ), {, ScopeState, state, =, traversalState, ., peek, (, ), ;, if, (, state, ., changed, ), {, state]
[||, node, ., isScript, (, ), ), ), {, ScopeState, state, =, traversalState, ., peek, (, ), ;, if, (]
[., isFunction, (, ), ||, node, ., isScript, (, ), ), ), {, ScopeState, state, =, traversalState, ., peek, (]
[), ), {, ScopeState, state, =, traversalState, ., peek, (, ), ;, if, (, state, ., changed, ), {, state]
[., isScript, (, ), ), ), {, ScopeState, state, =, traversalState, ., peek, (, ), ;, if, (, state, .]
[;, if, (, state, ., changed, ), {, state, ., changed, =, false, ;, state, ., traverseChildScopes, =, false, ;]
[., peek, (, ), ;, if, (, state, ., changed, ), {, state, ., changed, =, false, ;, state, .]
[), {, state, ., changed, =, false, ;, state, ., traverseChildScopes, =, false, ;, return, true, ;, }, }, return]
[., changed, ), {, state, ., changed, =, false, ;, state, ., traverseChildScopes, =, false, ;, return, true, ;, }]
[=, false, ;, state, ., traverseChildScopes, =, false, ;, return, true, ;, }, }, return, false, ;, }, private, boolean]
[., changed, =, false, ;, state, ., traverseChildScopes, =, false, ;, return, true, ;, }, }, return, false, ;, }]
[;, state, ., traverseChildScopes, =, false, ;, return, true, ;, }, }, return, false, ;, }, private, boolean, shouldVisit, (]
[=, false, ;, return, true, ;, }, }, return, false, ;, }, private, boolean, shouldVisit, (, Node, node, ), {]
[., traverseChildScopes, =, false, ;, return, true, ;, }, }, return, false, ;, }, private, boolean, shouldVisit, (, Node, node]
[;, return, true, ;, }, }, return, false, ;, }, private, boolean, shouldVisit, (, Node, node, ), {, if, (]
[;, }, }, return, false, ;, }, private, boolean, shouldVisit, (, Node, node, ), {, if, (, node, ., isFunction]
[;, }, private, boolean, shouldVisit, (, Node, node, ), {, if, (, node, ., isFunction, (, ), ||, node, .]
[), {, ScopeState, previous, =, traversalState, ., peek, (, ), ;, if, (, !, previous, ., traverseChildScopes, ), {, return]
[||, node, ., isScript, (, ), ), {, ScopeState, previous, =, traversalState, ., peek, (, ), ;, if, (, !]
[., isFunction, (, ), ||, node, ., isScript, (, ), ), {, ScopeState, previous, =, traversalState, ., peek, (, )]
[), {, ScopeState, previous, =, traversalState, ., peek, (, ), ;, if, (, !, previous, ., traverseChildScopes, ), {, return]
[., isScript, (, ), ), {, ScopeState, previous, =, traversalState, ., peek, (, ), ;, if, (, !, previous, .]
[;, if, (, !, previous, ., traverseChildScopes, ), {, return, false, ;, }, traversalState, ., push, (, ), ;, }]
[., peek, (, ), ;, if, (, !, previous, ., traverseChildScopes, ), {, return, false, ;, }, traversalState, ., push]
[), {, return, false, ;, }, traversalState, ., push, (, ), ;, }, return, true, ;, }, private, void, exitNode]
[), {, return, false, ;, }, traversalState, ., push, (, ), ;, }, return, true, ;, }, private, void, exitNode]
[., traverseChildScopes, ), {, return, false, ;, }, traversalState, ., push, (, ), ;, }, return, true, ;, }, private]
[;, }, traversalState, ., push, (, ), ;, }, return, true, ;, }, private, void, exitNode, (, Node, node, )]
[;, }, return, true, ;, }, private, void, exitNode, (, Node, node, ), {, if, (, node, ., isFunction, (]
[., push, (, ), ;, }, return, true, ;, }, private, void, exitNode, (, Node, node, ), {, if, (]
[;, }, private, void, exitNode, (, Node, node, ), {, if, (, node, ., isFunction, (, ), ||, node, .]
[), {, traversalState, ., pop, (, ), ;, }, }, public, void, visit, (, Node, n, ), {, Node, currentVersionOfNode]
[||, node, ., isScript, (, ), ), {, traversalState, ., pop, (, ), ;, }, }, public, void, visit, (]
[., isFunction, (, ), ||, node, ., isScript, (, ), ), {, traversalState, ., pop, (, ), ;, }, }]
[), {, traversalState, ., pop, (, ), ;, }, }, public, void, visit, (, Node, n, ), {, Node, currentVersionOfNode]
[., isScript, (, ), ), {, traversalState, ., pop, (, ), ;, }, }, public, void, visit, (, Node, n]
[;, }, }, public, void, visit, (, Node, n, ), {, Node, currentVersionOfNode, =, n, ;, boolean, somethingChanged, =, false]
[., pop, (, ), ;, }, }, public, void, visit, (, Node, n, ), {, Node, currentVersionOfNode, =, n, ;]
[;, boolean, somethingChanged, =, false, ;, do, {, somethingChanged, =, false, ;, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {]
[;, do, {, somethingChanged, =, false, ;, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, Node, newVersionOfNode, =, optimization, .]
[=, false, ;, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, Node, newVersionOfNode, =, optimization, ., optimizeSubtree, (, currentVersionOfNode, )]
[;, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, Node, newVersionOfNode, =, optimization, ., optimizeSubtree, (, currentVersionOfNode, ), ;, if]
[), {, Node, newVersionOfNode, =, optimization, ., optimizeSubtree, (, currentVersionOfNode, ), ;, if, (, newVersionOfNode, !=, currentVersionOfNode, ), {, somethingChanged]
[;, if, (, newVersionOfNode, !=, currentVersionOfNode, ), {, somethingChanged, =, true, ;, currentVersionOfNode, =, newVersionOfNode, ;, }, if, (, currentVersionOfNode]
[., optimizeSubtree, (, currentVersionOfNode, ), ;, if, (, newVersionOfNode, !=, currentVersionOfNode, ), {, somethingChanged, =, true, ;, currentVersionOfNode, =, newVersionOfNode]
[), ;, if, (, newVersionOfNode, !=, currentVersionOfNode, ), {, somethingChanged, =, true, ;, currentVersionOfNode, =, newVersionOfNode, ;, }, if, (]
[), {, somethingChanged, =, true, ;, currentVersionOfNode, =, newVersionOfNode, ;, }, if, (, currentVersionOfNode, ==, null, ), {, return, ;]
[!=, currentVersionOfNode, ), {, somethingChanged, =, true, ;, currentVersionOfNode, =, newVersionOfNode, ;, }, if, (, currentVersionOfNode, ==, null, ), {]
[), {, somethingChanged, =, true, ;, currentVersionOfNode, =, newVersionOfNode, ;, }, if, (, currentVersionOfNode, ==, null, ), {, return, ;]
[=, true, ;, currentVersionOfNode, =, newVersionOfNode, ;, }, if, (, currentVersionOfNode, ==, null, ), {, return, ;, }, }, }]
[;, currentVersionOfNode, =, newVersionOfNode, ;, }, if, (, currentVersionOfNode, ==, null, ), {, return, ;, }, }, }, while, (]
[=, newVersionOfNode, ;, }, if, (, currentVersionOfNode, ==, null, ), {, return, ;, }, }, }, while, (, somethingChanged, )]
[;, }, if, (, currentVersionOfNode, ==, null, ), {, return, ;, }, }, }, while, (, somethingChanged, ), ;, }]
[), {, return, ;, }, }, }, while, (, somethingChanged, ), ;, }, private, void, beginTraversal, (, ), {, for]
[==, null, ), {, return, ;, }, }, }, while, (, somethingChanged, ), ;, }, private, void, beginTraversal, (, )]
[), {, return, ;, }, }, }, while, (, somethingChanged, ), ;, }, private, void, beginTraversal, (, ), {, for]
[), ;, }, private, void, beginTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, optimization, ., beginTraversal]
[), {, optimization, ., beginTraversal, (, compiler, ), ;, }, }, private, void, endTraversal, (, ), {, for, (, AbstractPeepholeOptimization]
[;, }, }, private, void, endTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, optimization, ., endTraversal]
[., beginTraversal, (, compiler, ), ;, }, }, private, void, endTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations]
[), ;, }, }, private, void, endTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, optimization, .]
[), {, optimization, ., endTraversal, (, compiler, ), ;, }, }, }]
[;, }, }, }]
[., endTraversal, (, compiler, ), ;, }, }, }]
[), ;, }, }, }]
