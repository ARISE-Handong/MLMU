[import, java, ., awt, ., geom, ., Rectangle2D, ;, public, final, class, Align, {, public, static, final, int, CENTER, =]
[;, public, final, class, Align, {, public, static, final, int, CENTER, =, 0x00, ;, public, static, final, int, TOP, =]
[final, int, CENTER, =, 0x00, ;, public, static, final, int, TOP, =, 0x01, ;, public, static, final, int, BOTTOM, =]
[final, int, TOP, =, 0x01, ;, public, static, final, int, BOTTOM, =, 0x02, ;, public, static, final, int, LEFT, =]
[final, int, BOTTOM, =, 0x02, ;, public, static, final, int, LEFT, =, 0x04, ;, public, static, final, int, RIGHT, =]
[final, int, LEFT, =, 0x04, ;, public, static, final, int, RIGHT, =, 0x08, ;, public, static, final, int, TOP_LEFT, =]
[final, int, LEFT, =, 0x04, ;, public, static, final, int, RIGHT, =, 0x08, ;, public, static, final, int, TOP_LEFT, =]
[LEFT, =, 0x04, ;, public, static, final, int, RIGHT, =, 0x08, ;, public, static, final, int, TOP_LEFT, =, TOP, |]
[RIGHT, =, 0x08, ;, public, static, final, int, TOP_LEFT, =, TOP, |, LEFT, ;, public, static, final, int, TOP_RIGHT, =]
[RIGHT, =, 0x08, ;, public, static, final, int, TOP_LEFT, =, TOP, |, LEFT, ;, public, static, final, int, TOP_RIGHT, =]
[0x08, ;, public, static, final, int, TOP_LEFT, =, TOP, |, LEFT, ;, public, static, final, int, TOP_RIGHT, =, TOP, |]
[TOP, |, LEFT, ;, public, static, final, int, TOP_RIGHT, =, TOP, |, RIGHT, ;, public, static, final, int, BOTTOM_LEFT, =]
[TOP, |, LEFT, ;, public, static, final, int, TOP_RIGHT, =, TOP, |, RIGHT, ;, public, static, final, int, BOTTOM_LEFT, =]
[LEFT, ;, public, static, final, int, TOP_RIGHT, =, TOP, |, RIGHT, ;, public, static, final, int, BOTTOM_LEFT, =, BOTTOM, |]
[TOP, |, RIGHT, ;, public, static, final, int, BOTTOM_LEFT, =, BOTTOM, |, LEFT, ;, public, static, final, int, BOTTOM_RIGHT, =]
[TOP, |, RIGHT, ;, public, static, final, int, BOTTOM_LEFT, =, BOTTOM, |, LEFT, ;, public, static, final, int, BOTTOM_RIGHT, =]
[RIGHT, ;, public, static, final, int, BOTTOM_LEFT, =, BOTTOM, |, LEFT, ;, public, static, final, int, BOTTOM_RIGHT, =, BOTTOM, |]
[BOTTOM, |, LEFT, ;, public, static, final, int, BOTTOM_RIGHT, =, BOTTOM, |, RIGHT, ;, public, static, final, int, FIT_HORIZONTAL, =]
[BOTTOM, |, LEFT, ;, public, static, final, int, BOTTOM_RIGHT, =, BOTTOM, |, RIGHT, ;, public, static, final, int, FIT_HORIZONTAL, =]
[LEFT, ;, public, static, final, int, BOTTOM_RIGHT, =, BOTTOM, |, RIGHT, ;, public, static, final, int, FIT_HORIZONTAL, =, LEFT, |]
[BOTTOM, |, RIGHT, ;, public, static, final, int, FIT_HORIZONTAL, =, LEFT, |, RIGHT, ;, public, static, final, int, FIT_VERTICAL, =]
[BOTTOM, |, RIGHT, ;, public, static, final, int, FIT_HORIZONTAL, =, LEFT, |, RIGHT, ;, public, static, final, int, FIT_VERTICAL, =]
[RIGHT, ;, public, static, final, int, FIT_HORIZONTAL, =, LEFT, |, RIGHT, ;, public, static, final, int, FIT_VERTICAL, =, TOP, |]
[LEFT, |, RIGHT, ;, public, static, final, int, FIT_VERTICAL, =, TOP, |, BOTTOM, ;, public, static, final, int, FIT, =]
[LEFT, |, RIGHT, ;, public, static, final, int, FIT_VERTICAL, =, TOP, |, BOTTOM, ;, public, static, final, int, FIT, =]
[RIGHT, ;, public, static, final, int, FIT_VERTICAL, =, TOP, |, BOTTOM, ;, public, static, final, int, FIT, =, FIT_HORIZONTAL, |]
[TOP, |, BOTTOM, ;, public, static, final, int, FIT, =, FIT_HORIZONTAL, |, FIT_VERTICAL, ;, public, static, final, int, NORTH, =]
[FIT, =, FIT_HORIZONTAL, |, FIT_VERTICAL, ;, public, static, final, int, NORTH, =, TOP, ;, public, static, final, int, SOUTH, =]
[final, int, NORTH, =, TOP, ;, public, static, final, int, SOUTH, =, BOTTOM, ;, public, static, final, int, WEST, =]
[final, int, SOUTH, =, BOTTOM, ;, public, static, final, int, WEST, =, LEFT, ;, public, static, final, int, EAST, =]
[final, int, WEST, =, LEFT, ;, public, static, final, int, EAST, =, RIGHT, ;, public, static, final, int, NORTH_WEST, =]
[final, int, WEST, =, LEFT, ;, public, static, final, int, EAST, =, RIGHT, ;, public, static, final, int, NORTH_WEST, =]
[WEST, =, LEFT, ;, public, static, final, int, EAST, =, RIGHT, ;, public, static, final, int, NORTH_WEST, =, NORTH, |]
[EAST, =, RIGHT, ;, public, static, final, int, NORTH_WEST, =, NORTH, |, WEST, ;, public, static, final, int, NORTH_EAST, =]
[EAST, =, RIGHT, ;, public, static, final, int, NORTH_WEST, =, NORTH, |, WEST, ;, public, static, final, int, NORTH_EAST, =]
[RIGHT, ;, public, static, final, int, NORTH_WEST, =, NORTH, |, WEST, ;, public, static, final, int, NORTH_EAST, =, NORTH, |]
[NORTH, |, WEST, ;, public, static, final, int, NORTH_EAST, =, NORTH, |, EAST, ;, public, static, final, int, SOUTH_WEST, =]
[NORTH, |, WEST, ;, public, static, final, int, NORTH_EAST, =, NORTH, |, EAST, ;, public, static, final, int, SOUTH_WEST, =]
[WEST, ;, public, static, final, int, NORTH_EAST, =, NORTH, |, EAST, ;, public, static, final, int, SOUTH_WEST, =, SOUTH, |]
[NORTH, |, EAST, ;, public, static, final, int, SOUTH_WEST, =, SOUTH, |, WEST, ;, public, static, final, int, SOUTH_EAST, =]
[NORTH, |, EAST, ;, public, static, final, int, SOUTH_WEST, =, SOUTH, |, WEST, ;, public, static, final, int, SOUTH_EAST, =]
[EAST, ;, public, static, final, int, SOUTH_WEST, =, SOUTH, |, WEST, ;, public, static, final, int, SOUTH_EAST, =, SOUTH, |]
[;, }, public, static, void, align, (, Rectangle2D, rect, ,, Rectangle2D, frame, ,, int, align, ), {, double, x, =]
[;, }, public, static, void, align, (, Rectangle2D, rect, ,, Rectangle2D, frame, ,, int, align, ), {, double, x, =]
[;, }, public, static, void, align, (, Rectangle2D, rect, ,, Rectangle2D, frame, ,, int, align, ), {, double, x, =]
[(, Rectangle2D, rect, ,, Rectangle2D, frame, ,, int, align, ), {, double, x, =, frame, ., getCenterX, (, ), -]
[(, Rectangle2D, rect, ,, Rectangle2D, frame, ,, int, align, ), {, double, x, =, frame, ., getCenterX, (, ), -]
[(, Rectangle2D, rect, ,, Rectangle2D, frame, ,, int, align, ), {, double, x, =, frame, ., getCenterX, (, ), -]
[,, int, align, ), {, double, x, =, frame, ., getCenterX, (, ), -, rect, ., getWidth, (, ), /]
[double, x, =, frame, ., getCenterX, (, ), -, rect, ., getWidth, (, ), /, 2.0, ;, double, y, =]
[double, x, =, frame, ., getCenterX, (, ), -, rect, ., getWidth, (, ), /, 2.0, ;, double, y, =]
[double, x, =, frame, ., getCenterX, (, ), -, rect, ., getWidth, (, ), /, 2.0, ;, double, y, =]
[(, ), -, rect, ., getWidth, (, ), /, 2.0, ;, double, y, =, frame, ., getCenterY, (, ), -]
[(, ), -, rect, ., getWidth, (, ), /, 2.0, ;, double, y, =, frame, ., getCenterY, (, ), -]
[(, ), -, rect, ., getWidth, (, ), /, 2.0, ;, double, y, =, frame, ., getCenterY, (, ), -]
[(, ), /, 2.0, ;, double, y, =, frame, ., getCenterY, (, ), -, rect, ., getHeight, (, ), /]
[double, y, =, frame, ., getCenterY, (, ), -, rect, ., getHeight, (, ), /, 2.0, ;, double, w, =]
[double, y, =, frame, ., getCenterY, (, ), -, rect, ., getHeight, (, ), /, 2.0, ;, double, w, =]
[rect, ., getHeight, (, ), /, 2.0, ;, double, w, =, rect, ., getWidth, (, ), ;, double, h, =]
[rect, ., getHeight, (, ), /, 2.0, ;, double, w, =, rect, ., getWidth, (, ), ;, double, h, =]
[double, w, =, rect, ., getWidth, (, ), ;, double, h, =, rect, ., getHeight, (, ), ;, if, (]
[double, w, =, rect, ., getWidth, (, ), ;, double, h, =, rect, ., getHeight, (, ), ;, if, (]
[w, =, rect, ., getWidth, (, ), ;, double, h, =, rect, ., getHeight, (, ), ;, if, (, (]
[w, =, rect, ., getWidth, (, ), ;, double, h, =, rect, ., getHeight, (, ), ;, if, (, (]
[rect, ., getWidth, (, ), ;, double, h, =, rect, ., getHeight, (, ), ;, if, (, (, align, &]
[(, ), ;, double, h, =, rect, ., getHeight, (, ), ;, if, (, (, align, &, FIT_VERTICAL, ), ==]
[double, h, =, rect, ., getHeight, (, ), ;, if, (, (, align, &, FIT_VERTICAL, ), ==, FIT_VERTICAL, ), {]
[=, rect, ., getHeight, (, ), ;, if, (, (, align, &, FIT_VERTICAL, ), ==, FIT_VERTICAL, ), {, h, =]
[=, rect, ., getHeight, (, ), ;, if, (, (, align, &, FIT_VERTICAL, ), ==, FIT_VERTICAL, ), {, h, =]
[(, align, &, FIT_VERTICAL, ), ==, FIT_VERTICAL, ), {, h, =, frame, ., getHeight, (, ), ;, }, if, (]
[(, align, &, FIT_VERTICAL, ), ==, FIT_VERTICAL, ), {, h, =, frame, ., getHeight, (, ), ;, }, if, (]
[align, &, FIT_VERTICAL, ), ==, FIT_VERTICAL, ), {, h, =, frame, ., getHeight, (, ), ;, }, if, (, (]
[align, &, FIT_VERTICAL, ), ==, FIT_VERTICAL, ), {, h, =, frame, ., getHeight, (, ), ;, }, if, (, (]
[FIT_VERTICAL, ), ==, FIT_VERTICAL, ), {, h, =, frame, ., getHeight, (, ), ;, }, if, (, (, align, &]
[FIT_VERTICAL, ), {, h, =, frame, ., getHeight, (, ), ;, }, if, (, (, align, &, FIT_HORIZONTAL, ), ==]
[h, =, frame, ., getHeight, (, ), ;, }, if, (, (, align, &, FIT_HORIZONTAL, ), ==, FIT_HORIZONTAL, ), {]
[frame, ., getHeight, (, ), ;, }, if, (, (, align, &, FIT_HORIZONTAL, ), ==, FIT_HORIZONTAL, ), {, w, =]
[frame, ., getHeight, (, ), ;, }, if, (, (, align, &, FIT_HORIZONTAL, ), ==, FIT_HORIZONTAL, ), {, w, =]
[(, align, &, FIT_HORIZONTAL, ), ==, FIT_HORIZONTAL, ), {, w, =, frame, ., getWidth, (, ), ;, }, if, (]
[(, align, &, FIT_HORIZONTAL, ), ==, FIT_HORIZONTAL, ), {, w, =, frame, ., getWidth, (, ), ;, }, if, (]
[align, &, FIT_HORIZONTAL, ), ==, FIT_HORIZONTAL, ), {, w, =, frame, ., getWidth, (, ), ;, }, if, (, (]
[align, &, FIT_HORIZONTAL, ), ==, FIT_HORIZONTAL, ), {, w, =, frame, ., getWidth, (, ), ;, }, if, (, (]
[FIT_HORIZONTAL, ), ==, FIT_HORIZONTAL, ), {, w, =, frame, ., getWidth, (, ), ;, }, if, (, (, align, &]
[FIT_HORIZONTAL, ), {, w, =, frame, ., getWidth, (, ), ;, }, if, (, (, align, &, TOP, ), ==]
[w, =, frame, ., getWidth, (, ), ;, }, if, (, (, align, &, TOP, ), ==, TOP, ), {]
[frame, ., getWidth, (, ), ;, }, if, (, (, align, &, TOP, ), ==, TOP, ), {, y, =]
[frame, ., getWidth, (, ), ;, }, if, (, (, align, &, TOP, ), ==, TOP, ), {, y, =]
[(, align, &, TOP, ), ==, TOP, ), {, y, =, frame, ., getMinY, (, ), ;, }, if, (]
[(, align, &, TOP, ), ==, TOP, ), {, y, =, frame, ., getMinY, (, ), ;, }, if, (]
[align, &, TOP, ), ==, TOP, ), {, y, =, frame, ., getMinY, (, ), ;, }, if, (, (]
[align, &, TOP, ), ==, TOP, ), {, y, =, frame, ., getMinY, (, ), ;, }, if, (, (]
[TOP, ), ==, TOP, ), {, y, =, frame, ., getMinY, (, ), ;, }, if, (, (, align, &]
[TOP, ), {, y, =, frame, ., getMinY, (, ), ;, }, if, (, (, align, &, BOTTOM, ), ==]
[y, =, frame, ., getMinY, (, ), ;, }, if, (, (, align, &, BOTTOM, ), ==, BOTTOM, ), {]
[frame, ., getMinY, (, ), ;, }, if, (, (, align, &, BOTTOM, ), ==, BOTTOM, ), {, y, =]
[frame, ., getMinY, (, ), ;, }, if, (, (, align, &, BOTTOM, ), ==, BOTTOM, ), {, y, =]
[frame, ., getMinY, (, ), ;, }, if, (, (, align, &, BOTTOM, ), ==, BOTTOM, ), {, y, =]
[}, if, (, (, align, &, BOTTOM, ), ==, BOTTOM, ), {, y, =, frame, ., getMaxY, (, ), -]
[&, BOTTOM, ), ==, BOTTOM, ), {, y, =, frame, ., getMaxY, (, ), -, h, ;, }, if, (]
[&, BOTTOM, ), ==, BOTTOM, ), {, y, =, frame, ., getMaxY, (, ), -, h, ;, }, if, (]
[BOTTOM, ), ==, BOTTOM, ), {, y, =, frame, ., getMaxY, (, ), -, h, ;, }, if, (, (]
[BOTTOM, ), ==, BOTTOM, ), {, y, =, frame, ., getMaxY, (, ), -, h, ;, }, if, (, (]
[==, BOTTOM, ), {, y, =, frame, ., getMaxY, (, ), -, h, ;, }, if, (, (, align, &]
[{, y, =, frame, ., getMaxY, (, ), -, h, ;, }, if, (, (, align, &, LEFT, ), ==]
[frame, ., getMaxY, (, ), -, h, ;, }, if, (, (, align, &, LEFT, ), ==, LEFT, ), {]
[getMaxY, (, ), -, h, ;, }, if, (, (, align, &, LEFT, ), ==, LEFT, ), {, x, =]
[getMaxY, (, ), -, h, ;, }, if, (, (, align, &, LEFT, ), ==, LEFT, ), {, x, =]
[(, align, &, LEFT, ), ==, LEFT, ), {, x, =, frame, ., getX, (, ), ;, }, if, (]
[(, align, &, LEFT, ), ==, LEFT, ), {, x, =, frame, ., getX, (, ), ;, }, if, (]
[align, &, LEFT, ), ==, LEFT, ), {, x, =, frame, ., getX, (, ), ;, }, if, (, (]
[align, &, LEFT, ), ==, LEFT, ), {, x, =, frame, ., getX, (, ), ;, }, if, (, (]
[LEFT, ), ==, LEFT, ), {, x, =, frame, ., getX, (, ), ;, }, if, (, (, align, &]
[LEFT, ), {, x, =, frame, ., getX, (, ), ;, }, if, (, (, align, &, RIGHT, ), ==]
[x, =, frame, ., getX, (, ), ;, }, if, (, (, align, &, RIGHT, ), ==, RIGHT, ), {]
[frame, ., getX, (, ), ;, }, if, (, (, align, &, RIGHT, ), ==, RIGHT, ), {, x, =]
[frame, ., getX, (, ), ;, }, if, (, (, align, &, RIGHT, ), ==, RIGHT, ), {, x, =]
[frame, ., getX, (, ), ;, }, if, (, (, align, &, RIGHT, ), ==, RIGHT, ), {, x, =]
[}, if, (, (, align, &, RIGHT, ), ==, RIGHT, ), {, x, =, frame, ., getMaxX, (, ), -]
[(, align, &, RIGHT, ), ==, RIGHT, ), {, x, =, frame, ., getMaxX, (, ), -, w, ;, }]
[(, align, &, RIGHT, ), ==, RIGHT, ), {, x, =, frame, ., getMaxX, (, ), -, w, ;, }]
[), ==, RIGHT, ), {, x, =, frame, ., getMaxX, (, ), -, w, ;, }, rect, ., setRect, (]
[RIGHT, ), {, x, =, frame, ., getMaxX, (, ), -, w, ;, }, rect, ., setRect, (, x, ,]
[{, x, =, frame, ., getMaxX, (, ), -, w, ;, }, rect, ., setRect, (, x, ,, y, ,]
[=, frame, ., getMaxX, (, ), -, w, ;, }, rect, ., setRect, (, x, ,, y, ,, w, ,]
