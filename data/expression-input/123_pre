[abstract, class, AtomicInitializer, <, T, >, implements, ConcurrentInitializer, <, T, >, {, private, final, AtomicReference, <, T, >, reference, =]
[AtomicReference, <, T, >, (, ), ;, @, Override, public, T, get, (, ), throws, ConcurrentException, {, T, result, =]
[AtomicReference, <, T, >, (, ), ;, @, Override, public, T, get, (, ), throws, ConcurrentException, {, T, result, =]
[Override, public, T, get, (, ), throws, ConcurrentException, {, T, result, =, reference, ., get, (, ), ;, if, (]
[Override, public, T, get, (, ), throws, ConcurrentException, {, T, result, =, reference, ., get, (, ), ;, if, (]
[T, get, (, ), throws, ConcurrentException, {, T, result, =, reference, ., get, (, ), ;, if, (, result, ==]
[), throws, ConcurrentException, {, T, result, =, reference, ., get, (, ), ;, if, (, result, ==, null, ), {]
[ConcurrentException, {, T, result, =, reference, ., get, (, ), ;, if, (, result, ==, null, ), {, result, =]
[., get, (, ), ;, if, (, result, ==, null, ), {, result, =, initialize, (, ), ;, if, (]
[get, (, ), ;, if, (, result, ==, null, ), {, result, =, initialize, (, ), ;, if, (, !]
[get, (, ), ;, if, (, result, ==, null, ), {, result, =, initialize, (, ), ;, if, (, !]
[if, (, result, ==, null, ), {, result, =, initialize, (, ), ;, if, (, !, reference, ., compareAndSet, (]
[result, ==, null, ), {, result, =, initialize, (, ), ;, if, (, !, reference, ., compareAndSet, (, null, ,]
[{, result, =, initialize, (, ), ;, if, (, !, reference, ., compareAndSet, (, null, ,, result, ), ), {]
[=, initialize, (, ), ;, if, (, !, reference, ., compareAndSet, (, null, ,, result, ), ), {, result, =]
[=, initialize, (, ), ;, if, (, !, reference, ., compareAndSet, (, null, ,, result, ), ), {, result, =]
[., compareAndSet, (, null, ,, result, ), ), {, result, =, reference, ., get, (, ), ;, }, }, return]
