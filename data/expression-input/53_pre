[., time, ., format, ., PeriodFormatter, ;, public, final, class, Minutes, extends, BaseSingleFieldPeriod, {, public, static, final, Minutes, ZERO, =]
[format, ., PeriodFormatter, ;, public, final, class, Minutes, extends, BaseSingleFieldPeriod, {, public, static, final, Minutes, ZERO, =, new, Minutes, (]
[BaseSingleFieldPeriod, {, public, static, final, Minutes, ZERO, =, new, Minutes, (, 0, ), ;, public, static, final, Minutes, ONE, =]
[static, final, Minutes, ZERO, =, new, Minutes, (, 0, ), ;, public, static, final, Minutes, ONE, =, new, Minutes, (]
[), ;, public, static, final, Minutes, ONE, =, new, Minutes, (, 1, ), ;, public, static, final, Minutes, TWO, =]
[static, final, Minutes, ONE, =, new, Minutes, (, 1, ), ;, public, static, final, Minutes, TWO, =, new, Minutes, (]
[), ;, public, static, final, Minutes, TWO, =, new, Minutes, (, 2, ), ;, public, static, final, Minutes, THREE, =]
[static, final, Minutes, TWO, =, new, Minutes, (, 2, ), ;, public, static, final, Minutes, THREE, =, new, Minutes, (]
[), ;, public, static, final, Minutes, THREE, =, new, Minutes, (, 3, ), ;, public, static, final, Minutes, MAX_VALUE, =]
[static, final, Minutes, THREE, =, new, Minutes, (, 3, ), ;, public, static, final, Minutes, MAX_VALUE, =, new, Minutes, (]
[static, final, Minutes, THREE, =, new, Minutes, (, 3, ), ;, public, static, final, Minutes, MAX_VALUE, =, new, Minutes, (]
[public, static, final, Minutes, MAX_VALUE, =, new, Minutes, (, Integer, ., MAX_VALUE, ), ;, public, static, final, Minutes, MIN_VALUE, =]
[Minutes, MAX_VALUE, =, new, Minutes, (, Integer, ., MAX_VALUE, ), ;, public, static, final, Minutes, MIN_VALUE, =, new, Minutes, (]
[Minutes, MAX_VALUE, =, new, Minutes, (, Integer, ., MAX_VALUE, ), ;, public, static, final, Minutes, MIN_VALUE, =, new, Minutes, (]
[public, static, final, Minutes, MIN_VALUE, =, new, Minutes, (, Integer, ., MIN_VALUE, ), ;, private, static, final, PeriodFormatter, PARSER, =]
[public, static, final, Minutes, MIN_VALUE, =, new, Minutes, (, Integer, ., MIN_VALUE, ), ;, private, static, final, PeriodFormatter, PARSER, =]
[public, static, final, Minutes, MIN_VALUE, =, new, Minutes, (, Integer, ., MIN_VALUE, ), ;, private, static, final, PeriodFormatter, PARSER, =]
[(, Integer, ., MIN_VALUE, ), ;, private, static, final, PeriodFormatter, PARSER, =, ISOPeriodFormat, ., standard, (, ), ., withParseType, (]
[(, Integer, ., MIN_VALUE, ), ;, private, static, final, PeriodFormatter, PARSER, =, ISOPeriodFormat, ., standard, (, ), ., withParseType, (]
[., standard, (, ), ., withParseType, (, PeriodType, ., minutes, (, ), ), ;, private, static, final, long, serialVersionUID, =]
[;, private, static, final, long, serialVersionUID, =, 87525275727380863L, ;, public, static, Minutes, minutes, (, int, minutes, ), {, switch, (]
[long, serialVersionUID, =, 87525275727380863L, ;, public, static, Minutes, minutes, (, int, minutes, ), {, switch, (, minutes, ), {, case]
[87525275727380863L, ;, public, static, Minutes, minutes, (, int, minutes, ), {, switch, (, minutes, ), {, case, 0, :, return]
[static, Minutes, minutes, (, int, minutes, ), {, switch, (, minutes, ), {, case, 0, :, return, ZERO, ;, case]
[(, int, minutes, ), {, switch, (, minutes, ), {, case, 0, :, return, ZERO, ;, case, 1, :, return]
[), {, switch, (, minutes, ), {, case, 0, :, return, ZERO, ;, case, 1, :, return, ONE, ;, case]
[(, minutes, ), {, case, 0, :, return, ZERO, ;, case, 1, :, return, ONE, ;, case, 2, :, return]
[{, case, 0, :, return, ZERO, ;, case, 1, :, return, ONE, ;, case, 2, :, return, TWO, ;, case]
[:, return, ZERO, ;, case, 1, :, return, ONE, ;, case, 2, :, return, TWO, ;, case, 3, :, return]
[;, case, 1, :, return, ONE, ;, case, 2, :, return, TWO, ;, case, 3, :, return, THREE, ;, case]
[;, case, 1, :, return, ONE, ;, case, 2, :, return, TWO, ;, case, 3, :, return, THREE, ;, case]
[ONE, ;, case, 2, :, return, TWO, ;, case, 3, :, return, THREE, ;, case, Integer, ., MAX_VALUE, :, return]
[2, :, return, TWO, ;, case, 3, :, return, THREE, ;, case, Integer, ., MAX_VALUE, :, return, MAX_VALUE, ;, case]
[2, :, return, TWO, ;, case, 3, :, return, THREE, ;, case, Integer, ., MAX_VALUE, :, return, MAX_VALUE, ;, case]
[case, 3, :, return, THREE, ;, case, Integer, ., MAX_VALUE, :, return, MAX_VALUE, ;, case, Integer, ., MIN_VALUE, :, return]
[;, case, Integer, ., MAX_VALUE, :, return, MAX_VALUE, ;, case, Integer, ., MIN_VALUE, :, return, MIN_VALUE, ;, default, :, return]
[., MAX_VALUE, :, return, MAX_VALUE, ;, case, Integer, ., MIN_VALUE, :, return, MIN_VALUE, ;, default, :, return, new, Minutes, (]
[minutes, ), ;, }, }, public, static, Minutes, minutesBetween, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, int, amount, =]
[minutes, ), ;, }, }, public, static, Minutes, minutesBetween, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, int, amount, =]
[}, public, static, Minutes, minutesBetween, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, int, amount, =, BaseSingleFieldPeriod, ., between, (]
[static, Minutes, minutesBetween, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, int, amount, =, BaseSingleFieldPeriod, ., between, (, start, ,]
[minutesBetween, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, int, amount, =, BaseSingleFieldPeriod, ., between, (, start, ,, end, ,]
[minutesBetween, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, int, amount, =, BaseSingleFieldPeriod, ., between, (, start, ,, end, ,]
[{, int, amount, =, BaseSingleFieldPeriod, ., between, (, start, ,, end, ,, DurationFieldType, ., minutes, (, ), ), ;, return]
[{, int, amount, =, BaseSingleFieldPeriod, ., between, (, start, ,, end, ,, DurationFieldType, ., minutes, (, ), ), ;, return]
[BaseSingleFieldPeriod, ., between, (, start, ,, end, ,, DurationFieldType, ., minutes, (, ), ), ;, return, Minutes, ., minutes, (]
[minutes, (, amount, ), ;, }, public, static, Minutes, minutesBetween, (, ReadablePartial, start, ,, ReadablePartial, end, ), {, if, (]
[minutes, (, amount, ), ;, }, public, static, Minutes, minutesBetween, (, ReadablePartial, start, ,, ReadablePartial, end, ), {, if, (]
[minutes, (, amount, ), ;, }, public, static, Minutes, minutesBetween, (, ReadablePartial, start, ,, ReadablePartial, end, ), {, if, (]
[;, }, public, static, Minutes, minutesBetween, (, ReadablePartial, start, ,, ReadablePartial, end, ), {, if, (, start, instanceof, LocalTime, &&]
[;, }, public, static, Minutes, minutesBetween, (, ReadablePartial, start, ,, ReadablePartial, end, ), {, if, (, start, instanceof, LocalTime, &&]
[start, ,, ReadablePartial, end, ), {, if, (, start, instanceof, LocalTime, &&, end, instanceof, LocalTime, ), {, Chronology, chrono, =]
[start, ,, ReadablePartial, end, ), {, if, (, start, instanceof, LocalTime, &&, end, instanceof, LocalTime, ), {, Chronology, chrono, =]
[), {, if, (, start, instanceof, LocalTime, &&, end, instanceof, LocalTime, ), {, Chronology, chrono, =, DateTimeUtils, ., getChronology, (]
[), {, if, (, start, instanceof, LocalTime, &&, end, instanceof, LocalTime, ), {, Chronology, chrono, =, DateTimeUtils, ., getChronology, (]
[LocalTime, ), {, Chronology, chrono, =, DateTimeUtils, ., getChronology, (, start, ., getChronology, (, ), ), ;, int, minutes, =]
[LocalTime, ), {, Chronology, chrono, =, DateTimeUtils, ., getChronology, (, start, ., getChronology, (, ), ), ;, int, minutes, =]
[LocalTime, ), {, Chronology, chrono, =, DateTimeUtils, ., getChronology, (, start, ., getChronology, (, ), ), ;, int, minutes, =]
[getChronology, (, start, ., getChronology, (, ), ), ;, int, minutes, =, chrono, ., minutes, (, ), ., getDifference, (]
[getChronology, (, start, ., getChronology, (, ), ), ;, int, minutes, =, chrono, ., minutes, (, ), ., getDifference, (]
[(, start, ., getChronology, (, ), ), ;, int, minutes, =, chrono, ., minutes, (, ), ., getDifference, (, (]
[getChronology, (, ), ), ;, int, minutes, =, chrono, ., minutes, (, ), ., getDifference, (, (, (, LocalTime, )]
[=, chrono, ., minutes, (, ), ., getDifference, (, (, (, LocalTime, ), end, ), ., getLocalMillis, (, ), ,]
[=, chrono, ., minutes, (, ), ., getDifference, (, (, (, LocalTime, ), end, ), ., getLocalMillis, (, ), ,]
[chrono, ., minutes, (, ), ., getDifference, (, (, (, LocalTime, ), end, ), ., getLocalMillis, (, ), ,, (]
[(, ), ., getDifference, (, (, (, LocalTime, ), end, ), ., getLocalMillis, (, ), ,, (, (, LocalTime, )]
[end, ), ., getLocalMillis, (, ), ,, (, (, LocalTime, ), start, ), ., getLocalMillis, (, ), ), ;, return]
[end, ), ., getLocalMillis, (, ), ,, (, (, LocalTime, ), start, ), ., getLocalMillis, (, ), ), ;, return]
[(, ), ,, (, (, LocalTime, ), start, ), ., getLocalMillis, (, ), ), ;, return, Minutes, ., minutes, (]
[start, ), ., getLocalMillis, (, ), ), ;, return, Minutes, ., minutes, (, minutes, ), ;, }, int, amount, =]
[start, ), ., getLocalMillis, (, ), ), ;, return, Minutes, ., minutes, (, minutes, ), ;, }, int, amount, =]
[(, ), ), ;, return, Minutes, ., minutes, (, minutes, ), ;, }, int, amount, =, BaseSingleFieldPeriod, ., between, (]
[), ;, return, Minutes, ., minutes, (, minutes, ), ;, }, int, amount, =, BaseSingleFieldPeriod, ., between, (, start, ,]
[return, Minutes, ., minutes, (, minutes, ), ;, }, int, amount, =, BaseSingleFieldPeriod, ., between, (, start, ,, end, ,]
[(, minutes, ), ;, }, int, amount, =, BaseSingleFieldPeriod, ., between, (, start, ,, end, ,, ZERO, ), ;, return]
[(, minutes, ), ;, }, int, amount, =, BaseSingleFieldPeriod, ., between, (, start, ,, end, ,, ZERO, ), ;, return]
[}, int, amount, =, BaseSingleFieldPeriod, ., between, (, start, ,, end, ,, ZERO, ), ;, return, Minutes, ., minutes, (]
[return, Minutes, ., minutes, (, amount, ), ;, }, public, static, Minutes, minutesIn, (, ReadableInterval, interval, ), {, if, (]
[return, Minutes, ., minutes, (, amount, ), ;, }, public, static, Minutes, minutesIn, (, ReadableInterval, interval, ), {, if, (]
[., minutes, (, amount, ), ;, }, public, static, Minutes, minutesIn, (, ReadableInterval, interval, ), {, if, (, interval, ==]
[), ;, }, public, static, Minutes, minutesIn, (, ReadableInterval, interval, ), {, if, (, interval, ==, null, ), {, return]
[), ;, }, public, static, Minutes, minutesIn, (, ReadableInterval, interval, ), {, if, (, interval, ==, null, ), {, return]
[ReadableInterval, interval, ), {, if, (, interval, ==, null, ), {, return, Minutes, ., ZERO, ;, }, int, amount, =]
[ReadableInterval, interval, ), {, if, (, interval, ==, null, ), {, return, Minutes, ., ZERO, ;, }, int, amount, =]
[if, (, interval, ==, null, ), {, return, Minutes, ., ZERO, ;, }, int, amount, =, BaseSingleFieldPeriod, ., between, (]
[if, (, interval, ==, null, ), {, return, Minutes, ., ZERO, ;, }, int, amount, =, BaseSingleFieldPeriod, ., between, (]
[{, return, Minutes, ., ZERO, ;, }, int, amount, =, BaseSingleFieldPeriod, ., between, (, interval, ., getStart, (, ), ,]
[{, return, Minutes, ., ZERO, ;, }, int, amount, =, BaseSingleFieldPeriod, ., between, (, interval, ., getStart, (, ), ,]
[}, int, amount, =, BaseSingleFieldPeriod, ., between, (, interval, ., getStart, (, ), ,, interval, ., getEnd, (, ), ,]
[}, int, amount, =, BaseSingleFieldPeriod, ., between, (, interval, ., getStart, (, ), ,, interval, ., getEnd, (, ), ,]
[interval, ., getStart, (, ), ,, interval, ., getEnd, (, ), ,, DurationFieldType, ., minutes, (, ), ), ;, return]
[interval, ., getStart, (, ), ,, interval, ., getEnd, (, ), ,, DurationFieldType, ., minutes, (, ), ), ;, return]
[), ,, interval, ., getEnd, (, ), ,, DurationFieldType, ., minutes, (, ), ), ;, return, Minutes, ., minutes, (]
[Minutes, ., minutes, (, amount, ), ;, }, public, static, Minutes, standardMinutesIn, (, ReadablePeriod, period, ), {, int, amount, =]
[Minutes, ., minutes, (, amount, ), ;, }, public, static, Minutes, standardMinutesIn, (, ReadablePeriod, period, ), {, int, amount, =]
[amount, ), ;, }, public, static, Minutes, standardMinutesIn, (, ReadablePeriod, period, ), {, int, amount, =, BaseSingleFieldPeriod, ., standardPeriodIn, (]
[;, }, public, static, Minutes, standardMinutesIn, (, ReadablePeriod, period, ), {, int, amount, =, BaseSingleFieldPeriod, ., standardPeriodIn, (, period, ,]
[;, }, public, static, Minutes, standardMinutesIn, (, ReadablePeriod, period, ), {, int, amount, =, BaseSingleFieldPeriod, ., standardPeriodIn, (, period, ,]
[(, ReadablePeriod, period, ), {, int, amount, =, BaseSingleFieldPeriod, ., standardPeriodIn, (, period, ,, DateTimeConstants, ., MILLIS_PER_MINUTE, ), ;, return]
[(, ReadablePeriod, period, ), {, int, amount, =, BaseSingleFieldPeriod, ., standardPeriodIn, (, period, ,, DateTimeConstants, ., MILLIS_PER_MINUTE, ), ;, return]
[{, int, amount, =, BaseSingleFieldPeriod, ., standardPeriodIn, (, period, ,, DateTimeConstants, ., MILLIS_PER_MINUTE, ), ;, return, Minutes, ., minutes, (]
[., minutes, (, amount, ), ;, }, @, FromString, public, static, Minutes, parseMinutes, (, String, periodStr, ), {, if, (]
[., minutes, (, amount, ), ;, }, @, FromString, public, static, Minutes, parseMinutes, (, String, periodStr, ), {, if, (]
[(, amount, ), ;, }, @, FromString, public, static, Minutes, parseMinutes, (, String, periodStr, ), {, if, (, periodStr, ==]
[}, @, FromString, public, static, Minutes, parseMinutes, (, String, periodStr, ), {, if, (, periodStr, ==, null, ), {, return]
[}, @, FromString, public, static, Minutes, parseMinutes, (, String, periodStr, ), {, if, (, periodStr, ==, null, ), {, return]
[String, periodStr, ), {, if, (, periodStr, ==, null, ), {, return, Minutes, ., ZERO, ;, }, Period, p, =]
[String, periodStr, ), {, if, (, periodStr, ==, null, ), {, return, Minutes, ., ZERO, ;, }, Period, p, =]
[if, (, periodStr, ==, null, ), {, return, Minutes, ., ZERO, ;, }, Period, p, =, PARSER, ., parsePeriod, (]
[null, ), {, return, Minutes, ., ZERO, ;, }, Period, p, =, PARSER, ., parsePeriod, (, periodStr, ), ;, return]
[null, ), {, return, Minutes, ., ZERO, ;, }, Period, p, =, PARSER, ., parsePeriod, (, periodStr, ), ;, return]
[Minutes, ., ZERO, ;, }, Period, p, =, PARSER, ., parsePeriod, (, periodStr, ), ;, return, Minutes, ., minutes, (]
[Minutes, ., ZERO, ;, }, Period, p, =, PARSER, ., parsePeriod, (, periodStr, ), ;, return, Minutes, ., minutes, (]
[., minutes, (, p, ., getMinutes, (, ), ), ;, }, private, Minutes, (, int, minutes, ), {, super, (]
[private, Minutes, (, int, minutes, ), {, super, (, minutes, ), ;, }, private, Object, readResolve, (, ), {, return]
[private, Minutes, (, int, minutes, ), {, super, (, minutes, ), ;, }, private, Object, readResolve, (, ), {, return]
[minutes, ), {, super, (, minutes, ), ;, }, private, Object, readResolve, (, ), {, return, Minutes, ., minutes, (]
[), {, return, Minutes, ., minutes, (, getValue, (, ), ), ;, }, public, DurationFieldType, getFieldType, (, ), {, return]
[), {, return, Minutes, ., minutes, (, getValue, (, ), ), ;, }, public, DurationFieldType, getFieldType, (, ), {, return]
[DurationFieldType, getFieldType, (, ), {, return, DurationFieldType, ., minutes, (, ), ;, }, public, PeriodType, getPeriodType, (, ), {, return]
[DurationFieldType, getFieldType, (, ), {, return, DurationFieldType, ., minutes, (, ), ;, }, public, PeriodType, getPeriodType, (, ), {, return]
[PeriodType, getPeriodType, (, ), {, return, PeriodType, ., minutes, (, ), ;, }, public, Weeks, toStandardWeeks, (, ), {, return]
[PeriodType, getPeriodType, (, ), {, return, PeriodType, ., minutes, (, ), ;, }, public, Weeks, toStandardWeeks, (, ), {, return]
[{, return, PeriodType, ., minutes, (, ), ;, }, public, Weeks, toStandardWeeks, (, ), {, return, Weeks, ., weeks, (]
[{, return, PeriodType, ., minutes, (, ), ;, }, public, Weeks, toStandardWeeks, (, ), {, return, Weeks, ., weeks, (]
[minutes, (, ), ;, }, public, Weeks, toStandardWeeks, (, ), {, return, Weeks, ., weeks, (, getValue, (, ), /]
[minutes, (, ), ;, }, public, Weeks, toStandardWeeks, (, ), {, return, Weeks, ., weeks, (, getValue, (, ), /]
[., weeks, (, getValue, (, ), /, DateTimeConstants, ., MINUTES_PER_WEEK, ), ;, }, public, Days, toStandardDays, (, ), {, return]
[., weeks, (, getValue, (, ), /, DateTimeConstants, ., MINUTES_PER_WEEK, ), ;, }, public, Days, toStandardDays, (, ), {, return]
[(, ), /, DateTimeConstants, ., MINUTES_PER_WEEK, ), ;, }, public, Days, toStandardDays, (, ), {, return, Days, ., days, (]
[(, ), /, DateTimeConstants, ., MINUTES_PER_WEEK, ), ;, }, public, Days, toStandardDays, (, ), {, return, Days, ., days, (]
[., MINUTES_PER_WEEK, ), ;, }, public, Days, toStandardDays, (, ), {, return, Days, ., days, (, getValue, (, ), /]
[., MINUTES_PER_WEEK, ), ;, }, public, Days, toStandardDays, (, ), {, return, Days, ., days, (, getValue, (, ), /]
[., days, (, getValue, (, ), /, DateTimeConstants, ., MINUTES_PER_DAY, ), ;, }, public, Hours, toStandardHours, (, ), {, return]
[., days, (, getValue, (, ), /, DateTimeConstants, ., MINUTES_PER_DAY, ), ;, }, public, Hours, toStandardHours, (, ), {, return]
[(, ), /, DateTimeConstants, ., MINUTES_PER_DAY, ), ;, }, public, Hours, toStandardHours, (, ), {, return, Hours, ., hours, (]
[(, ), /, DateTimeConstants, ., MINUTES_PER_DAY, ), ;, }, public, Hours, toStandardHours, (, ), {, return, Hours, ., hours, (]
[., MINUTES_PER_DAY, ), ;, }, public, Hours, toStandardHours, (, ), {, return, Hours, ., hours, (, getValue, (, ), /]
[., MINUTES_PER_DAY, ), ;, }, public, Hours, toStandardHours, (, ), {, return, Hours, ., hours, (, getValue, (, ), /]
[., hours, (, getValue, (, ), /, DateTimeConstants, ., MINUTES_PER_HOUR, ), ;, }, public, Seconds, toStandardSeconds, (, ), {, return]
[., hours, (, getValue, (, ), /, DateTimeConstants, ., MINUTES_PER_HOUR, ), ;, }, public, Seconds, toStandardSeconds, (, ), {, return]
[(, ), /, DateTimeConstants, ., MINUTES_PER_HOUR, ), ;, }, public, Seconds, toStandardSeconds, (, ), {, return, Seconds, ., seconds, (]
[(, ), /, DateTimeConstants, ., MINUTES_PER_HOUR, ), ;, }, public, Seconds, toStandardSeconds, (, ), {, return, Seconds, ., seconds, (]
[., MINUTES_PER_HOUR, ), ;, }, public, Seconds, toStandardSeconds, (, ), {, return, Seconds, ., seconds, (, FieldUtils, ., safeMultiply, (]
[}, public, Seconds, toStandardSeconds, (, ), {, return, Seconds, ., seconds, (, FieldUtils, ., safeMultiply, (, getValue, (, ), ,]
[}, public, Seconds, toStandardSeconds, (, ), {, return, Seconds, ., seconds, (, FieldUtils, ., safeMultiply, (, getValue, (, ), ,]
[getValue, (, ), ,, DateTimeConstants, ., SECONDS_PER_MINUTE, ), ), ;, }, public, Duration, toStandardDuration, (, ), {, long, minutes, =]
[., SECONDS_PER_MINUTE, ), ), ;, }, public, Duration, toStandardDuration, (, ), {, long, minutes, =, getValue, (, ), ;, return]
[), ;, }, public, Duration, toStandardDuration, (, ), {, long, minutes, =, getValue, (, ), ;, return, new, Duration, (]
[), ;, }, public, Duration, toStandardDuration, (, ), {, long, minutes, =, getValue, (, ), ;, return, new, Duration, (]
[}, public, Duration, toStandardDuration, (, ), {, long, minutes, =, getValue, (, ), ;, return, new, Duration, (, minutes, *]
[}, public, Duration, toStandardDuration, (, ), {, long, minutes, =, getValue, (, ), ;, return, new, Duration, (, minutes, *]
[;, return, new, Duration, (, minutes, *, DateTimeConstants, ., MILLIS_PER_MINUTE, ), ;, }, public, int, getMinutes, (, ), {, return]
[getMinutes, (, ), {, return, getValue, (, ), ;, }, public, Minutes, plus, (, int, minutes, ), {, if, (]
[getMinutes, (, ), {, return, getValue, (, ), ;, }, public, Minutes, plus, (, int, minutes, ), {, if, (]
[), {, return, getValue, (, ), ;, }, public, Minutes, plus, (, int, minutes, ), {, if, (, minutes, ==]
[(, ), ;, }, public, Minutes, plus, (, int, minutes, ), {, if, (, minutes, ==, 0, ), {, return]
[public, Minutes, plus, (, int, minutes, ), {, if, (, minutes, ==, 0, ), {, return, this, ;, }, return]
[public, Minutes, plus, (, int, minutes, ), {, if, (, minutes, ==, 0, ), {, return, this, ;, }, return]
[int, minutes, ), {, if, (, minutes, ==, 0, ), {, return, this, ;, }, return, Minutes, ., minutes, (]
[int, minutes, ), {, if, (, minutes, ==, 0, ), {, return, this, ;, }, return, Minutes, ., minutes, (]
[if, (, minutes, ==, 0, ), {, return, this, ;, }, return, Minutes, ., minutes, (, FieldUtils, ., safeAdd, (]
[0, ), {, return, this, ;, }, return, Minutes, ., minutes, (, FieldUtils, ., safeAdd, (, getValue, (, ), ,]
[(, getValue, (, ), ,, minutes, ), ), ;, }, public, Minutes, plus, (, Minutes, minutes, ), {, if, (]
[(, getValue, (, ), ,, minutes, ), ), ;, }, public, Minutes, plus, (, Minutes, minutes, ), {, if, (]
[(, ), ,, minutes, ), ), ;, }, public, Minutes, plus, (, Minutes, minutes, ), {, if, (, minutes, ==]
[), ), ;, }, public, Minutes, plus, (, Minutes, minutes, ), {, if, (, minutes, ==, null, ), {, return]
[public, Minutes, plus, (, Minutes, minutes, ), {, if, (, minutes, ==, null, ), {, return, this, ;, }, return]
[plus, (, Minutes, minutes, ), {, if, (, minutes, ==, null, ), {, return, this, ;, }, return, plus, (]
[plus, (, Minutes, minutes, ), {, if, (, minutes, ==, null, ), {, return, this, ;, }, return, plus, (]
[return, plus, (, minutes, ., getValue, (, ), ), ;, }, public, Minutes, minus, (, int, minutes, ), {, return]
[(, minutes, ., getValue, (, ), ), ;, }, public, Minutes, minus, (, int, minutes, ), {, return, plus, (]
[(, minutes, ., getValue, (, ), ), ;, }, public, Minutes, minus, (, int, minutes, ), {, return, plus, (]
[(, ), ), ;, }, public, Minutes, minus, (, int, minutes, ), {, return, plus, (, FieldUtils, ., safeNegate, (]
[(, FieldUtils, ., safeNegate, (, minutes, ), ), ;, }, public, Minutes, minus, (, Minutes, minutes, ), {, if, (]
[(, FieldUtils, ., safeNegate, (, minutes, ), ), ;, }, public, Minutes, minus, (, Minutes, minutes, ), {, if, (]
[., safeNegate, (, minutes, ), ), ;, }, public, Minutes, minus, (, Minutes, minutes, ), {, if, (, minutes, ==]
[), ), ;, }, public, Minutes, minus, (, Minutes, minutes, ), {, if, (, minutes, ==, null, ), {, return]
[public, Minutes, minus, (, Minutes, minutes, ), {, if, (, minutes, ==, null, ), {, return, this, ;, }, return]
[minus, (, Minutes, minutes, ), {, if, (, minutes, ==, null, ), {, return, this, ;, }, return, minus, (]
[minus, (, Minutes, minutes, ), {, if, (, minutes, ==, null, ), {, return, this, ;, }, return, minus, (]
[return, minus, (, minutes, ., getValue, (, ), ), ;, }, public, Minutes, multipliedBy, (, int, scalar, ), {, return]
[return, minus, (, minutes, ., getValue, (, ), ), ;, }, public, Minutes, multipliedBy, (, int, scalar, ), {, return]
[., getValue, (, ), ), ;, }, public, Minutes, multipliedBy, (, int, scalar, ), {, return, Minutes, ., minutes, (]
[., getValue, (, ), ), ;, }, public, Minutes, multipliedBy, (, int, scalar, ), {, return, Minutes, ., minutes, (]
[), ;, }, public, Minutes, multipliedBy, (, int, scalar, ), {, return, Minutes, ., minutes, (, FieldUtils, ., safeMultiply, (]
[Minutes, multipliedBy, (, int, scalar, ), {, return, Minutes, ., minutes, (, FieldUtils, ., safeMultiply, (, getValue, (, ), ,]
[(, getValue, (, ), ,, scalar, ), ), ;, }, public, Minutes, dividedBy, (, int, divisor, ), {, if, (]
[(, getValue, (, ), ,, scalar, ), ), ;, }, public, Minutes, dividedBy, (, int, divisor, ), {, if, (]
[(, ), ,, scalar, ), ), ;, }, public, Minutes, dividedBy, (, int, divisor, ), {, if, (, divisor, ==]
[), ), ;, }, public, Minutes, dividedBy, (, int, divisor, ), {, if, (, divisor, ==, 1, ), {, return]
[public, Minutes, dividedBy, (, int, divisor, ), {, if, (, divisor, ==, 1, ), {, return, this, ;, }, return]
[public, Minutes, dividedBy, (, int, divisor, ), {, if, (, divisor, ==, 1, ), {, return, this, ;, }, return]
[int, divisor, ), {, if, (, divisor, ==, 1, ), {, return, this, ;, }, return, Minutes, ., minutes, (]
[int, divisor, ), {, if, (, divisor, ==, 1, ), {, return, this, ;, }, return, Minutes, ., minutes, (]
[if, (, divisor, ==, 1, ), {, return, this, ;, }, return, Minutes, ., minutes, (, getValue, (, ), /]
[return, Minutes, ., minutes, (, getValue, (, ), /, divisor, ), ;, }, public, Minutes, negated, (, ), {, return]
[return, Minutes, ., minutes, (, getValue, (, ), /, divisor, ), ;, }, public, Minutes, negated, (, ), {, return]
[(, getValue, (, ), /, divisor, ), ;, }, public, Minutes, negated, (, ), {, return, Minutes, ., minutes, (]
[(, getValue, (, ), /, divisor, ), ;, }, public, Minutes, negated, (, ), {, return, Minutes, ., minutes, (]
[/, divisor, ), ;, }, public, Minutes, negated, (, ), {, return, Minutes, ., minutes, (, FieldUtils, ., safeNegate, (]
[., safeNegate, (, getValue, (, ), ), ), ;, }, public, boolean, isGreaterThan, (, Minutes, other, ), {, if, (]
[., safeNegate, (, getValue, (, ), ), ), ;, }, public, boolean, isGreaterThan, (, Minutes, other, ), {, if, (]
[(, getValue, (, ), ), ), ;, }, public, boolean, isGreaterThan, (, Minutes, other, ), {, if, (, other, ==]
[), ), ;, }, public, boolean, isGreaterThan, (, Minutes, other, ), {, if, (, other, ==, null, ), {, return]
[), ), ;, }, public, boolean, isGreaterThan, (, Minutes, other, ), {, if, (, other, ==, null, ), {, return]
[public, boolean, isGreaterThan, (, Minutes, other, ), {, if, (, other, ==, null, ), {, return, getValue, (, ), >]
[Minutes, other, ), {, if, (, other, ==, null, ), {, return, getValue, (, ), >, 0, ;, }, return]
[Minutes, other, ), {, if, (, other, ==, null, ), {, return, getValue, (, ), >, 0, ;, }, return]
[if, (, other, ==, null, ), {, return, getValue, (, ), >, 0, ;, }, return, getValue, (, ), >]
[if, (, other, ==, null, ), {, return, getValue, (, ), >, 0, ;, }, return, getValue, (, ), >]
[(, ), >, other, ., getValue, (, ), ;, }, public, boolean, isLessThan, (, Minutes, other, ), {, if, (]
[(, ), >, other, ., getValue, (, ), ;, }, public, boolean, isLessThan, (, Minutes, other, ), {, if, (]
[>, other, ., getValue, (, ), ;, }, public, boolean, isLessThan, (, Minutes, other, ), {, if, (, other, ==]
[(, ), ;, }, public, boolean, isLessThan, (, Minutes, other, ), {, if, (, other, ==, null, ), {, return]
[(, ), ;, }, public, boolean, isLessThan, (, Minutes, other, ), {, if, (, other, ==, null, ), {, return]
[public, boolean, isLessThan, (, Minutes, other, ), {, if, (, other, ==, null, ), {, return, getValue, (, ), <]
[Minutes, other, ), {, if, (, other, ==, null, ), {, return, getValue, (, ), <, 0, ;, }, return]
[Minutes, other, ), {, if, (, other, ==, null, ), {, return, getValue, (, ), <, 0, ;, }, return]
[if, (, other, ==, null, ), {, return, getValue, (, ), <, 0, ;, }, return, getValue, (, ), <]
[if, (, other, ==, null, ), {, return, getValue, (, ), <, 0, ;, }, return, getValue, (, ), <]
[getValue, (, ), <, other, ., getValue, (, ), ;, }, @, ToString, public, String, toString, (, ), {, return]
[getValue, (, ), <, other, ., getValue, (, ), ;, }, @, ToString, public, String, toString, (, ), {, return]
[getValue, (, ), <, other, ., getValue, (, ), ;, }, @, ToString, public, String, toString, (, ), {, return]
[), <, other, ., getValue, (, ), ;, }, @, ToString, public, String, toString, (, ), {, return, "PT", +]
[), <, other, ., getValue, (, ), ;, }, @, ToString, public, String, toString, (, ), {, return, "PT", +]
[getValue, (, ), ;, }, @, ToString, public, String, toString, (, ), {, return, "PT", +, String, ., valueOf, (]
[@, ToString, public, String, toString, (, ), {, return, "PT", +, String, ., valueOf, (, getValue, (, ), ), +]
