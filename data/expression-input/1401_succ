[;, static, final, DiagnosticType, UNMATCHED_END_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_END_MARKER", ,, "Unmatched {1} - {0} not in the same block", ), ;, static, final, DiagnosticType, INVALID_MARKER_USAGE, =]
[., warning, (, "JSC_UNMATCHED_START_MARKER", ,, "Unmatched {0}", ), ;, static, final, DiagnosticType, UNMATCHED_END_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_END_MARKER", ,, "Unmatched {1} - {0} not in the same block"]
[,, "Unmatched {0}", ), ;, static, final, DiagnosticType, UNMATCHED_END_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_END_MARKER", ,, "Unmatched {1} - {0} not in the same block", ), ;, static, final]
[), ;, static, final, DiagnosticType, UNMATCHED_END_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_END_MARKER", ,, "Unmatched {1} - {0} not in the same block", ), ;, static, final, DiagnosticType, INVALID_MARKER_USAGE]
[;, static, final, DiagnosticType, INVALID_MARKER_USAGE, =, DiagnosticType, ., warning, (, "JSC_INVALID_MARKER_USAGE", ,, "Marker {0} can only be used in a simple ", +, "call expression", ), ;, private, final, AbstractCompiler]
[., warning, (, "JSC_UNMATCHED_END_MARKER", ,, "Unmatched {1} - {0} not in the same block", ), ;, static, final, DiagnosticType, INVALID_MARKER_USAGE, =, DiagnosticType, ., warning, (, "JSC_INVALID_MARKER_USAGE", ,, "Marker {0} can only be used in a simple "]
[,, "Unmatched {1} - {0} not in the same block", ), ;, static, final, DiagnosticType, INVALID_MARKER_USAGE, =, DiagnosticType, ., warning, (, "JSC_INVALID_MARKER_USAGE", ,, "Marker {0} can only be used in a simple ", +, "call expression", ), ;]
[), ;, static, final, DiagnosticType, INVALID_MARKER_USAGE, =, DiagnosticType, ., warning, (, "JSC_INVALID_MARKER_USAGE", ,, "Marker {0} can only be used in a simple ", +, "call expression", ), ;, private, final]
[;, private, final, AbstractCompiler, compiler, ;, private, final, String, startMarkerName, ;, private, final, String, endMarkerName, ;, private, final, Deque, <]
[., warning, (, "JSC_INVALID_MARKER_USAGE", ,, "Marker {0} can only be used in a simple ", +, "call expression", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, String, startMarkerName, ;]
[,, "Marker {0} can only be used in a simple ", +, "call expression", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, String, startMarkerName, ;, private, final, String, endMarkerName]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, String, startMarkerName, ;, private, final, String, endMarkerName, ;, private, final, Deque]
[+, "call expression", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, String, startMarkerName, ;, private, final, String, endMarkerName, ;, private]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, String, startMarkerName, ;, private, final, String, endMarkerName, ;, private, final, Deque]
[;, private, final, List, <, Marker, >, validMarkers, =, Lists, ., newArrayList, (, ), ;, private, class, Marker, {, final]
[;, private, class, Marker, {, final, Node, startMarker, ;, final, Node, endMarker, ;, public, Marker, (, Node, startMarker, ,, Node]
[., newArrayList, (, ), ;, private, class, Marker, {, final, Node, startMarker, ;, final, Node, endMarker, ;, public, Marker, (]
[=, startMarker, ;, this, ., endMarker, =, endMarker, ;, }, }, public, CreateSyntheticBlocks, (, AbstractCompiler, compiler, ,, String, startMarkerName, ,]
[., startMarker, =, startMarker, ;, this, ., endMarker, =, endMarker, ;, }, }, public, CreateSyntheticBlocks, (, AbstractCompiler, compiler, ,, String]
[;, this, ., endMarker, =, endMarker, ;, }, }, public, CreateSyntheticBlocks, (, AbstractCompiler, compiler, ,, String, startMarkerName, ,, String, endMarkerName]
[=, endMarker, ;, }, }, public, CreateSyntheticBlocks, (, AbstractCompiler, compiler, ,, String, startMarkerName, ,, String, endMarkerName, ), {, this, .]
[., endMarker, =, endMarker, ;, }, }, public, CreateSyntheticBlocks, (, AbstractCompiler, compiler, ,, String, startMarkerName, ,, String, endMarkerName, ), {]
[;, }, }, public, CreateSyntheticBlocks, (, AbstractCompiler, compiler, ,, String, startMarkerName, ,, String, endMarkerName, ), {, this, ., compiler, =]
[=, compiler, ;, this, ., startMarkerName, =, startMarkerName, ;, this, ., endMarkerName, =, endMarkerName, ;, }, @, Override, public, void]
[., compiler, =, compiler, ;, this, ., startMarkerName, =, startMarkerName, ;, this, ., endMarkerName, =, endMarkerName, ;, }, @, Override]
[;, this, ., startMarkerName, =, startMarkerName, ;, this, ., endMarkerName, =, endMarkerName, ;, }, @, Override, public, void, process, (]
[=, startMarkerName, ;, this, ., endMarkerName, =, endMarkerName, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., startMarkerName, =, startMarkerName, ;, this, ., endMarkerName, =, endMarkerName, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., endMarkerName, =, endMarkerName, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, endMarkerName, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., endMarkerName, =, endMarkerName, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, for, (, Node, node, :, markerStack, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName]
[., traverse, (, compiler, ,, root, ,, new, Callback, (, ), ), ;, for, (, Node, node, :, markerStack, )]
[,, root, ,, new, Callback, (, ), ), ;, for, (, Node, node, :, markerStack, ), {, compiler, ., report]
[,, new, Callback, (, ), ), ;, for, (, Node, node, :, markerStack, ), {, compiler, ., report, (, JSError]
[), ;, for, (, Node, node, :, markerStack, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, .]
[), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, node, ), ,, node, ,, UNMATCHED_START_MARKER]
[;, }, for, (, Marker, marker, :, validMarkers, ), {, addBlocks, (, marker, ), ;, }, }, private, void, addBlocks]
[., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, node, ), ,, node, ,, UNMATCHED_START_MARKER, ,, startMarkerName, )]
[), ;, }, for, (, Marker, marker, :, validMarkers, ), {, addBlocks, (, marker, ), ;, }, }, private, void]
[., make, (, NodeUtil, ., getSourceName, (, node, ), ,, node, ,, UNMATCHED_START_MARKER, ,, startMarkerName, ), ), ;, }, for]
[,, node, ,, UNMATCHED_START_MARKER, ,, startMarkerName, ), ), ;, }, for, (, Marker, marker, :, validMarkers, ), {, addBlocks, (]
[., getSourceName, (, node, ), ,, node, ,, UNMATCHED_START_MARKER, ,, startMarkerName, ), ), ;, }, for, (, Marker, marker, :]
[), ,, node, ,, UNMATCHED_START_MARKER, ,, startMarkerName, ), ), ;, }, for, (, Marker, marker, :, validMarkers, ), {, addBlocks]
[,, UNMATCHED_START_MARKER, ,, startMarkerName, ), ), ;, }, for, (, Marker, marker, :, validMarkers, ), {, addBlocks, (, marker, )]
[,, startMarkerName, ), ), ;, }, for, (, Marker, marker, :, validMarkers, ), {, addBlocks, (, marker, ), ;, }]
[), ), ;, }, for, (, Marker, marker, :, validMarkers, ), {, addBlocks, (, marker, ), ;, }, }, private]
[), {, addBlocks, (, marker, ), ;, }, }, private, void, addBlocks, (, Marker, marker, ), {, Node, originalParent, =]
[;, }, }, private, void, addBlocks, (, Marker, marker, ), {, Node, originalParent, =, marker, ., endMarker, ., getParent, (]
[), ;, }, }, private, void, addBlocks, (, Marker, marker, ), {, Node, originalParent, =, marker, ., endMarker, ., getParent]
[;, Node, outerBlock, =, IR, ., block, (, ), ;, outerBlock, ., setIsSyntheticBlock, (, true, ), ;, originalParent, ., addChildBefore]
[., getParent, (, ), ;, Node, outerBlock, =, IR, ., block, (, ), ;, outerBlock, ., setIsSyntheticBlock, (, true, )]
[., endMarker, ., getParent, (, ), ;, Node, outerBlock, =, IR, ., block, (, ), ;, outerBlock, ., setIsSyntheticBlock, (]
[;, outerBlock, ., setIsSyntheticBlock, (, true, ), ;, originalParent, ., addChildBefore, (, outerBlock, ,, marker, ., startMarker, ), ;, Node]
[., block, (, ), ;, outerBlock, ., setIsSyntheticBlock, (, true, ), ;, originalParent, ., addChildBefore, (, outerBlock, ,, marker, .]
[;, originalParent, ., addChildBefore, (, outerBlock, ,, marker, ., startMarker, ), ;, Node, innerBlock, =, IR, ., block, (, )]
[., setIsSyntheticBlock, (, true, ), ;, originalParent, ., addChildBefore, (, outerBlock, ,, marker, ., startMarker, ), ;, Node, innerBlock, =]
[), ;, originalParent, ., addChildBefore, (, outerBlock, ,, marker, ., startMarker, ), ;, Node, innerBlock, =, IR, ., block, (]
[;, Node, innerBlock, =, IR, ., block, (, ), ;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (, originalParent]
[., addChildBefore, (, outerBlock, ,, marker, ., startMarker, ), ;, Node, innerBlock, =, IR, ., block, (, ), ;, innerBlock]
[,, marker, ., startMarker, ), ;, Node, innerBlock, =, IR, ., block, (, ), ;, innerBlock, ., setIsSyntheticBlock, (, true]
[), ;, Node, innerBlock, =, IR, ., block, (, ), ;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (]
[., startMarker, ), ;, Node, innerBlock, =, IR, ., block, (, ), ;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;]
[;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,, marker, ., startMarker, ,, marker, .]
[., block, (, ), ;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,, marker, .]
[;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,, marker, ., startMarker, ,, marker, ., endMarker, ), ;, outerBlock, ., addChildToBack, (]
[., setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,, marker, ., startMarker, ,, marker, ., endMarker, )]
[), ;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,, marker, ., startMarker, ,, marker, ., endMarker, ), ;, outerBlock, ., addChildToBack]
[;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, outerBlock, ., addChildToBack, (, innerBlock, ), ;]
[,, innerBlock, ,, marker, ., startMarker, ,, marker, ., endMarker, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (]
[,, marker, ., startMarker, ,, marker, ., endMarker, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, )]
[,, marker, ., endMarker, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, outerBlock, .]
[., startMarker, ,, marker, ., endMarker, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;]
[), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, outerBlock, ., addChildToBack, (, innerBlock, )]
[., endMarker, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, outerBlock, ., addChildToBack, (]
[;, outerBlock, ., addChildToBack, (, innerBlock, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;]
[., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, outerBlock, ., addChildToBack, (, innerBlock, ), ;, outerBlock, .]
[), ;, outerBlock, ., addChildToBack, (, innerBlock, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), )]
[., removeChildAfter, (, outerBlock, ), ), ;, outerBlock, ., addChildToBack, (, innerBlock, ), ;, outerBlock, ., addChildToBack, (, originalParent, .]
[), ), ;, outerBlock, ., addChildToBack, (, innerBlock, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, )]
[;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[., addChildToBack, (, innerBlock, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, compiler, .]
[), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, compiler, ., reportCodeChange, (, ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, moveSiblingExclusive, (, Node, src, ,, Node, dest, ,, @, Nullable]
[., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, moveSiblingExclusive, (, Node, src, ,, Node, dest, ,, @]
[., removeChildAfter, (, outerBlock, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, moveSiblingExclusive, (, Node, src]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, moveSiblingExclusive, (, Node, src, ,, Node, dest, ,]
[;, }, private, void, moveSiblingExclusive, (, Node, src, ,, Node, dest, ,, @, Nullable, Node, start, ,, @, Nullable, Node]
[., reportCodeChange, (, ), ;, }, private, void, moveSiblingExclusive, (, Node, src, ,, Node, dest, ,, @, Nullable, Node, start]
[), {, Node, child, =, removeChildAfter, (, src, ,, start, ), ;, dest, ., addChildToBack, (, child, ), ;, }]
[!=, end, ), {, Node, child, =, removeChildAfter, (, src, ,, start, ), ;, dest, ., addChildToBack, (, child, )]
[,, start, ), !=, end, ), {, Node, child, =, removeChildAfter, (, src, ,, start, ), ;, dest, ., addChildToBack]
[), !=, end, ), {, Node, child, =, removeChildAfter, (, src, ,, start, ), ;, dest, ., addChildToBack, (, child]
[), {, Node, child, =, removeChildAfter, (, src, ,, start, ), ;, dest, ., addChildToBack, (, child, ), ;, }]
[;, dest, ., addChildToBack, (, child, ), ;, }, }, private, Node, childAfter, (, Node, parent, ,, @, Nullable, Node]
[,, start, ), ;, dest, ., addChildToBack, (, child, ), ;, }, }, private, Node, childAfter, (, Node, parent, ,]
[), ;, dest, ., addChildToBack, (, child, ), ;, }, }, private, Node, childAfter, (, Node, parent, ,, @, Nullable]
[;, }, }, private, Node, childAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (, siblingBefore, ==]
[., addChildToBack, (, child, ), ;, }, }, private, Node, childAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, )]
[), ;, }, }, private, Node, childAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (, siblingBefore]
[), {, return, parent, ., getFirstChild, (, ), ;, }, else, {, return, siblingBefore, ., getNext, (, ), ;, }]
[==, null, ), {, return, parent, ., getFirstChild, (, ), ;, }, else, {, return, siblingBefore, ., getNext, (, )]
[), {, return, parent, ., getFirstChild, (, ), ;, }, else, {, return, siblingBefore, ., getNext, (, ), ;, }]
[;, }, else, {, return, siblingBefore, ., getNext, (, ), ;, }, }, private, Node, removeChildAfter, (, Node, parent, ,]
[., getFirstChild, (, ), ;, }, else, {, return, siblingBefore, ., getNext, (, ), ;, }, }, private, Node, removeChildAfter]
[;, }, }, private, Node, removeChildAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (, siblingBefore, ==]
[., getNext, (, ), ;, }, }, private, Node, removeChildAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {]
[), {, return, parent, ., removeFirstChild, (, ), ;, }, else, {, return, parent, ., removeChildAfter, (, siblingBefore, ), ;]
[==, null, ), {, return, parent, ., removeFirstChild, (, ), ;, }, else, {, return, parent, ., removeChildAfter, (, siblingBefore]
[), {, return, parent, ., removeFirstChild, (, ), ;, }, else, {, return, parent, ., removeChildAfter, (, siblingBefore, ), ;]
[;, }, else, {, return, parent, ., removeChildAfter, (, siblingBefore, ), ;, }, }, private, class, Callback, extends, AbstractPostOrderCallback, {]
[., removeFirstChild, (, ), ;, }, else, {, return, parent, ., removeChildAfter, (, siblingBefore, ), ;, }, }, private, class]
[;, }, }, private, class, Callback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., removeChildAfter, (, siblingBefore, ), ;, }, }, private, class, Callback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[), ;, }, }, private, class, Callback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[), {, return, ;, }, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, callName, =, callTarget, ., getString]
[||, !, n, ., getFirstChild, (, ), ., isName, (, ), ), {, return, ;, }, Node, callTarget, =, n]
[||, !, n, ., getFirstChild, (, ), ., isName, (, ), ), {, return, ;, }, Node, callTarget, =, n]
[., isCall, (, ), ||, !, n, ., getFirstChild, (, ), ., isName, (, ), ), {, return, ;, }]
[), {, return, ;, }, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, callName, =, callTarget, ., getString]
[), {, return, ;, }, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, callName, =, callTarget, ., getString]
[., isName, (, ), ), {, return, ;, }, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, callName]
[., getFirstChild, (, ), ., isName, (, ), ), {, return, ;, }, Node, callTarget, =, n, ., getFirstChild, (]
[;, String, callName, =, callTarget, ., getString, (, ), ;, if, (, startMarkerName, ., equals, (, callName, ), ), {]
[., getFirstChild, (, ), ;, String, callName, =, callTarget, ., getString, (, ), ;, if, (, startMarkerName, ., equals, (]
[;, if, (, startMarkerName, ., equals, (, callName, ), ), {, if, (, !, parent, ., isExprResult, (, ), )]
[., getString, (, ), ;, if, (, startMarkerName, ., equals, (, callName, ), ), {, if, (, !, parent, .]
[), {, if, (, !, parent, ., isExprResult, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[., equals, (, callName, ), ), {, if, (, !, parent, ., isExprResult, (, ), ), {, compiler, ., report]
[), ), {, if, (, !, parent, ., isExprResult, (, ), ), {, compiler, ., report, (, t, ., makeError]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, startMarkerName, ), ), ;, return, ;]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, startMarkerName, ), ), ;, return, ;]
[., isExprResult, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, startMarkerName, )]
[;, return, ;, }, markerStack, ., push, (, parent, ), ;, return, ;, }, if, (, !, endMarkerName, ., equals]
[., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, startMarkerName, ), ), ;, return, ;, }, markerStack, .]
[), ;, return, ;, }, markerStack, ., push, (, parent, ), ;, return, ;, }, if, (, !, endMarkerName, .]
[., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, startMarkerName, ), ), ;, return, ;, }, markerStack, ., push, (, parent, )]
[,, INVALID_MARKER_USAGE, ,, startMarkerName, ), ), ;, return, ;, }, markerStack, ., push, (, parent, ), ;, return, ;, }]
[,, startMarkerName, ), ), ;, return, ;, }, markerStack, ., push, (, parent, ), ;, return, ;, }, if, (]
[), ), ;, return, ;, }, markerStack, ., push, (, parent, ), ;, return, ;, }, if, (, !, endMarkerName]
[;, return, ;, }, if, (, !, endMarkerName, ., equals, (, callName, ), ), {, return, ;, }, Node, endMarkerNode]
[., push, (, parent, ), ;, return, ;, }, if, (, !, endMarkerName, ., equals, (, callName, ), ), {]
[), ;, return, ;, }, if, (, !, endMarkerName, ., equals, (, callName, ), ), {, return, ;, }, Node]
[), {, return, ;, }, Node, endMarkerNode, =, parent, ;, if, (, !, endMarkerNode, ., isExprResult, (, ), ), {]
[), {, return, ;, }, Node, endMarkerNode, =, parent, ;, if, (, !, endMarkerNode, ., isExprResult, (, ), ), {]
[., equals, (, callName, ), ), {, return, ;, }, Node, endMarkerNode, =, parent, ;, if, (, !, endMarkerNode, .]
[), ), {, return, ;, }, Node, endMarkerNode, =, parent, ;, if, (, !, endMarkerNode, ., isExprResult, (, ), )]
[;, if, (, !, endMarkerNode, ., isExprResult, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, endMarkerName, ), ), ;, return, ;]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, endMarkerName, ), ), ;, return, ;]
[., isExprResult, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, endMarkerName, )]
[;, return, ;, }, if, (, markerStack, ., isEmpty, (, ), ), {, compiler, ., report, (, t, ., makeError]
[., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, endMarkerName, ), ), ;, return, ;, }, if, (]
[), ;, return, ;, }, if, (, markerStack, ., isEmpty, (, ), ), {, compiler, ., report, (, t, .]
[., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, endMarkerName, ), ), ;, return, ;, }, if, (, markerStack, ., isEmpty, (]
[,, INVALID_MARKER_USAGE, ,, endMarkerName, ), ), ;, return, ;, }, if, (, markerStack, ., isEmpty, (, ), ), {, compiler]
[,, endMarkerName, ), ), ;, return, ;, }, if, (, markerStack, ., isEmpty, (, ), ), {, compiler, ., report]
[), ), ;, return, ;, }, if, (, markerStack, ., isEmpty, (, ), ), {, compiler, ., report, (, t]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;]
[., isEmpty, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,]
[;, return, ;, }, Node, startMarkerNode, =, markerStack, ., pop, (, ), ;, if, (, endMarkerNode, ., getParent, (, )]
[., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }]
[), ;, return, ;, }, Node, startMarkerNode, =, markerStack, ., pop, (, ), ;, if, (, endMarkerNode, ., getParent, (]
[., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, Node, startMarkerNode, =, markerStack]
[,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, Node, startMarkerNode, =, markerStack, ., pop, (, )]
[,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, Node, startMarkerNode, =, markerStack, ., pop, (, ), ;, if]
[,, endMarkerName, ), ), ;, return, ;, }, Node, startMarkerNode, =, markerStack, ., pop, (, ), ;, if, (, endMarkerNode]
[), ), ;, return, ;, }, Node, startMarkerNode, =, markerStack, ., pop, (, ), ;, if, (, endMarkerNode, ., getParent]
[;, if, (, endMarkerNode, ., getParent, (, ), !=, startMarkerNode, ., getParent, (, ), ), {, compiler, ., report, (]
[., pop, (, ), ;, if, (, endMarkerNode, ., getParent, (, ), !=, startMarkerNode, ., getParent, (, ), ), {]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;]
[!=, startMarkerNode, ., getParent, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,]
[., getParent, (, ), !=, startMarkerNode, ., getParent, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;]
[., getParent, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,]
[;, return, ;, }, validMarkers, ., add, (, new, Marker, (, startMarkerNode, ,, endMarkerNode, ), ), ;, }, }, }]
[., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }]
[), ;, return, ;, }, validMarkers, ., add, (, new, Marker, (, startMarkerNode, ,, endMarkerNode, ), ), ;, }, }]
[., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, validMarkers, ., add, (]
[,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, validMarkers, ., add, (, new, Marker, (, startMarkerNode]
[,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, validMarkers, ., add, (, new, Marker, (, startMarkerNode, ,, endMarkerNode]
[,, endMarkerName, ), ), ;, return, ;, }, validMarkers, ., add, (, new, Marker, (, startMarkerNode, ,, endMarkerNode, ), )]
[), ), ;, return, ;, }, validMarkers, ., add, (, new, Marker, (, startMarkerNode, ,, endMarkerNode, ), ), ;, }]
[;, }, }, }]
[., add, (, new, Marker, (, startMarkerNode, ,, endMarkerNode, ), ), ;, }, }, }]
[), ;, }, }, }]
[,, endMarkerNode, ), ), ;, }, }, }]
[), ), ;, }, }, }]
