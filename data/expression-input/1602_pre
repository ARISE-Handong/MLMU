[., util, ., MathUtils, ;, public, class, Vector2D, implements, Vector, <, Euclidean2D, >, {, public, static, final, Vector2D, ZERO, =]
[MathUtils, ;, public, class, Vector2D, implements, Vector, <, Euclidean2D, >, {, public, static, final, Vector2D, ZERO, =, new, Vector2D, (]
[public, class, Vector2D, implements, Vector, <, Euclidean2D, >, {, public, static, final, Vector2D, ZERO, =, new, Vector2D, (, 0, ,]
[public, static, final, Vector2D, ZERO, =, new, Vector2D, (, 0, ,, 0, ), ;, public, static, final, Vector2D, NaN, =]
[Vector2D, ZERO, =, new, Vector2D, (, 0, ,, 0, ), ;, public, static, final, Vector2D, NaN, =, new, Vector2D, (]
[Vector2D, ZERO, =, new, Vector2D, (, 0, ,, 0, ), ;, public, static, final, Vector2D, NaN, =, new, Vector2D, (]
[Vector2D, (, 0, ,, 0, ), ;, public, static, final, Vector2D, NaN, =, new, Vector2D, (, Double, ., NaN, ,]
[Vector2D, (, 0, ,, 0, ), ;, public, static, final, Vector2D, NaN, =, new, Vector2D, (, Double, ., NaN, ,]
[NaN, =, new, Vector2D, (, Double, ., NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector2D, POSITIVE_INFINITY, =]
[Vector2D, (, Double, ., NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector2D, POSITIVE_INFINITY, =, new, Vector2D, (]
[Vector2D, (, Double, ., NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector2D, POSITIVE_INFINITY, =, new, Vector2D, (]
[NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector2D, POSITIVE_INFINITY, =, new, Vector2D, (, Double, ., POSITIVE_INFINITY, ,]
[NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector2D, POSITIVE_INFINITY, =, new, Vector2D, (, Double, ., POSITIVE_INFINITY, ,]
[POSITIVE_INFINITY, =, new, Vector2D, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector2D, NEGATIVE_INFINITY, =]
[Vector2D, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector2D, NEGATIVE_INFINITY, =, new, Vector2D, (]
[Vector2D, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector2D, NEGATIVE_INFINITY, =, new, Vector2D, (]
[POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector2D, NEGATIVE_INFINITY, =, new, Vector2D, (, Double, ., NEGATIVE_INFINITY, ,]
[POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector2D, NEGATIVE_INFINITY, =, new, Vector2D, (, Double, ., NEGATIVE_INFINITY, ,]
[NEGATIVE_INFINITY, =, new, Vector2D, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =]
[private, final, double, x, ;, private, final, double, y, ;, public, Vector2D, (, double, x, ,, double, y, ), {]
[private, final, double, x, ;, private, final, double, y, ;, public, Vector2D, (, double, x, ,, double, y, ), {]
[;, private, final, double, y, ;, public, Vector2D, (, double, x, ,, double, y, ), {, this, ., x, =]
[final, double, y, ;, public, Vector2D, (, double, x, ,, double, y, ), {, this, ., x, =, x, ;]
[final, double, y, ;, public, Vector2D, (, double, x, ,, double, y, ), {, this, ., x, =, x, ;]
[public, Vector2D, (, double, x, ,, double, y, ), {, this, ., x, =, x, ;, this, ., y, =]
[this, ., y, =, y, ;, }, public, Vector2D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[this, ., y, =, y, ;, }, public, Vector2D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[this, ., y, =, y, ;, }, public, Vector2D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[y, ;, }, public, Vector2D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=]
[Vector2D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, 2, ), {, throw]
[[, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (]
[[, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (]
[throws, DimensionMismatchException, {, if, (, v, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[(, v, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 2, ), ;, }]
[(, v, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 2, ), ;, }]
[!=, 2, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 2, ), ;, }, this, ., x, =]
[!=, 2, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 2, ), ;, }, this, ., x, =]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 2, ), ;, }, this, ., x, =, v, []
[new, DimensionMismatchException, (, v, ., length, ,, 2, ), ;, }, this, ., x, =, v, [, 0, ], ;]
[new, DimensionMismatchException, (, v, ., length, ,, 2, ), ;, }, this, ., x, =, v, [, 0, ], ;]
[., length, ,, 2, ), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =]
[., length, ,, 2, ), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =]
[,, 2, ), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =, v, []
[this, ., y, =, v, [, 1, ], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u, ), {]
[this, ., y, =, v, [, 1, ], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u, ), {]
[v, [, 1, ], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u, ), {, this, ., x, =]
[v, [, 1, ], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u, ), {, this, ., x, =]
[1, ], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u, ), {, this, ., x, =, a, *]
[1, ], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u, ), {, this, ., x, =, a, *]
[public, Vector2D, (, double, a, ,, Vector2D, u, ), {, this, ., x, =, a, *, u, ., x, ;]
[public, Vector2D, (, double, a, ,, Vector2D, u, ), {, this, ., x, =, a, *, u, ., x, ;]
[a, ,, Vector2D, u, ), {, this, ., x, =, a, *, u, ., x, ;, this, ., y, =]
[a, ,, Vector2D, u, ), {, this, ., x, =, a, *, u, ., x, ;, this, ., y, =]
[Vector2D, u, ), {, this, ., x, =, a, *, u, ., x, ;, this, ., y, =, a, *]
[Vector2D, u, ), {, this, ., x, =, a, *, u, ., x, ;, this, ., y, =, a, *]
[., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {]
[., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {]
[public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {, this, ., x, =]
[public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {, this, ., x, =]
[public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {, this, ., x, =]
[(, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {, this, ., x, =, a1, *]
[(, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {, this, ., x, =, a1, *]
[Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {, this, ., x, =, a1, *, u1, ., x, +]
[Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {, this, ., x, =, a1, *, u1, ., x, +]
[,, double, a2, ,, Vector2D, u2, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[,, double, a2, ,, Vector2D, u2, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[Vector2D, u2, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, ;]
[Vector2D, u2, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, ;]
[this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, ;, this, ., y, =]
[this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, ;, this, ., y, =]
[this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, ;, this, ., y, =]
[x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, ;, this, ., y, =, a1, *]
[x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, ;, this, ., y, =, a1, *]
[u1, ., x, +, a2, *, u2, ., x, ;, this, ., y, =, a1, *, u1, ., y, +]
[u1, ., x, +, a2, *, u2, ., x, ;, this, ., y, =, a1, *, u1, ., y, +]
[x, +, a2, *, u2, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *]
[x, +, a2, *, u2, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *]
[(, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ), {]
[(, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ), {]
[Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ), {, this, ., x, =]
[Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ), {, this, ., x, =]
[Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ), {, this, ., x, =]
[Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ), {, this, ., x, =]
[,, double, a2, ,, Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ), {, this, ., x, =, a1, *]
[,, double, a2, ,, Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ), {, this, ., x, =, a1, *]
[Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +]
[Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +]
[,, double, a3, ,, Vector2D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[,, double, a3, ,, Vector2D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[Vector2D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +]
[Vector2D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +]
[), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *]
[), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *]
[x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;]
[x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;]
[u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =]
[u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =]
[u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =]
[u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =]
[x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =, a1, *]
[x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =, a1, *]
[u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =, a1, *, u1, ., y, +]
[u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =, a1, *, u1, ., y, +]
[x, +, a3, *, u3, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *]
[x, +, a3, *, u3, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *]
[u3, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +]
[u3, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +]
[x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *]
[x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *]
[,, double, a2, ,, Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ,, double, a4, ,, Vector2D, u4, ), {]
[,, double, a2, ,, Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ,, double, a4, ,, Vector2D, u4, ), {]
[Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ,, double, a4, ,, Vector2D, u4, ), {, this, ., x, =]
[Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ,, double, a4, ,, Vector2D, u4, ), {, this, ., x, =]
[Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ,, double, a4, ,, Vector2D, u4, ), {, this, ., x, =]
[Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ,, double, a4, ,, Vector2D, u4, ), {, this, ., x, =]
[Vector2D, u2, ,, double, a3, ,, Vector2D, u3, ,, double, a4, ,, Vector2D, u4, ), {, this, ., x, =]
[,, double, a3, ,, Vector2D, u3, ,, double, a4, ,, Vector2D, u4, ), {, this, ., x, =, a1, *]
[,, double, a3, ,, Vector2D, u3, ,, double, a4, ,, Vector2D, u4, ), {, this, ., x, =, a1, *]
[Vector2D, u3, ,, double, a4, ,, Vector2D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +]
[Vector2D, u3, ,, double, a4, ,, Vector2D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +]
[,, double, a4, ,, Vector2D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[,, double, a4, ,, Vector2D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[Vector2D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +]
[Vector2D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +]
[), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *]
[), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *]
[x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +]
[x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +]
[a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *]
[a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *]
[x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;]
[x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;]
[u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =]
[u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =]
[u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =]
[u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =]
[u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =]
[x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =, a1, *]
[x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =, a1, *]
[u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1, ., y, +]
[u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1, ., y, +]
[x, +, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *]
[x, +, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *]
[u4, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +]
[u4, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +]
[x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *]
[x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *]
[y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y, +]
[y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y, +]
[a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y, +, a4, *]
[a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y, +, a4, *]
[a3, *, u3, ., y, +, a4, *, u4, ., y, ;, }, public, double, getX, (, ), {, return]
[y, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, double, getY, (, ), {, return]
[}, public, double, getY, (, ), {, return, y, ;, }, public, double, [, ], toArray, (, ), {, return]
[(, ), {, return, y, ;, }, public, double, [, ], toArray, (, ), {, return, new, double, [, ]]
[), {, return, y, ;, }, public, double, [, ], toArray, (, ), {, return, new, double, [, ], {]
[return, y, ;, }, public, double, [, ], toArray, (, ), {, return, new, double, [, ], {, x, ,]
[{, return, new, double, [, ], {, x, ,, y, }, ;, }, public, Space, getSpace, (, ), {, return]
[{, return, new, double, [, ], {, x, ,, y, }, ;, }, public, Space, getSpace, (, ), {, return]
[Space, getSpace, (, ), {, return, Euclidean2D, ., getInstance, (, ), ;, }, public, Vector2D, getZero, (, ), {, return]
[), ;, }, public, Vector2D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return]
[), ;, }, public, Vector2D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return]
[), ;, }, public, Vector2D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return]
[Vector2D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (]
[), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), +]
[), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), +]
[;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), +, FastMath, ., abs, (]
[abs, (, x, ), +, FastMath, ., abs, (, y, ), ;, }, public, double, getNorm, (, ), {, return]
[abs, (, x, ), +, FastMath, ., abs, (, y, ), ;, }, public, double, getNorm, (, ), {, return]
[+, FastMath, ., abs, (, y, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[+, FastMath, ., abs, (, y, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[+, FastMath, ., abs, (, y, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[., abs, (, y, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *]
[(, y, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +]
[(, y, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +]
[), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +, y, *]
[., sqrt, (, x, *, x, +, y, *, y, ), ;, }, public, double, getNormSq, (, ), {, return]
[., sqrt, (, x, *, x, +, y, *, y, ), ;, }, public, double, getNormSq, (, ), {, return]
[., sqrt, (, x, *, x, +, y, *, y, ), ;, }, public, double, getNormSq, (, ), {, return]
[(, x, *, x, +, y, *, y, ), ;, }, public, double, getNormSq, (, ), {, return, x, *]
[*, x, +, y, *, y, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +]
[*, x, +, y, *, y, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +]
[+, y, *, y, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *]
[(, ), {, return, x, *, x, +, y, *, y, ;, }, public, double, getNormInf, (, ), {, return]
[(, ), {, return, x, *, x, +, y, *, y, ;, }, public, double, getNormInf, (, ), {, return]
[x, *, x, +, y, *, y, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (]
[x, *, x, +, y, *, y, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (]
[y, *, y, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., abs, (]
[;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,]
[;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,]
[getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (]
[(, y, ), ), ;, }, public, Vector2D, add, (, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =]
[), ;, }, public, Vector2D, add, (, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, )]
[public, Vector2D, add, (, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return]
[(, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (]
[(, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (]
[<, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +]
[<, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +]
[Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +, v2, ., getX, (, ), ,]
[Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +, v2, ., getX, (, ), ,]
[=, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +, v2, ., getX, (, ), ,, y, +]
[=, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +, v2, ., getX, (, ), ,, y, +]
[), ;, }, public, Vector2D, add, (, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =]
[public, Vector2D, add, (, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, )]
[(, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return]
[,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (]
[,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (]
[<, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +]
[<, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +]
[>, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +, factor, *]
[>, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +, factor, *]
[=, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +, factor, *, v2, ., getX, (, ), ,]
[=, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, +, factor, *, v2, ., getX, (, ), ,]
[Vector2D, ), v, ;, return, new, Vector2D, (, x, +, factor, *, v2, ., getX, (, ), ,, y, +]
[Vector2D, ), v, ;, return, new, Vector2D, (, x, +, factor, *, v2, ., getX, (, ), ,, y, +]
[v, ;, return, new, Vector2D, (, x, +, factor, *, v2, ., getX, (, ), ,, y, +, factor, *]
[v, ;, return, new, Vector2D, (, x, +, factor, *, v2, ., getX, (, ), ,, y, +, factor, *]
[getY, (, ), ), ;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =]
[), ;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[public, Vector2D, subtract, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, return]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, return, new, Vector2D, (]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, return, new, Vector2D, (]
[<, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, return, new, Vector2D, (, x, -]
[<, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, return, new, Vector2D, (, x, -]
[), {, Vector2D, p3, =, (, Vector2D, ), p, ;, return, new, Vector2D, (, x, -, p3, ., x, ,]
[), {, Vector2D, p3, =, (, Vector2D, ), p, ;, return, new, Vector2D, (, x, -, p3, ., x, ,]
[Vector2D, p3, =, (, Vector2D, ), p, ;, return, new, Vector2D, (, x, -, p3, ., x, ,, y, -]
[Vector2D, p3, =, (, Vector2D, ), p, ;, return, new, Vector2D, (, x, -, p3, ., x, ,, y, -]
[), ;, }, public, Vector2D, subtract, (, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =]
[public, Vector2D, subtract, (, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, )]
[(, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return]
[,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (]
[,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (]
[<, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, -]
[<, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, -]
[>, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, -, factor, *]
[>, v, ), {, Vector2D, v2, =, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, -, factor, *]
[=, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, -, factor, *, v2, ., getX, (, ), ,]
[=, (, Vector2D, ), v, ;, return, new, Vector2D, (, x, -, factor, *, v2, ., getX, (, ), ,]
[Vector2D, ), v, ;, return, new, Vector2D, (, x, -, factor, *, v2, ., getX, (, ), ,, y, -]
[Vector2D, ), v, ;, return, new, Vector2D, (, x, -, factor, *, v2, ., getX, (, ), ,, y, -]
[v, ;, return, new, Vector2D, (, x, -, factor, *, v2, ., getX, (, ), ,, y, -, factor, *]
[v, ;, return, new, Vector2D, (, x, -, factor, *, v2, ., getX, (, ), ,, y, -, factor, *]
[*, v2, ., getY, (, ), ), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException, {, double, s, =]
[), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[}, public, Vector2D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==]
[(, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==, 0, ), {, throw]
[MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (]
[MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (]
[), ;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return]
[if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (]
[if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (]
[s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /]
[CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector2D, negate, (, ), {, return]
[}, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector2D, negate, (, ), {, return, new, Vector2D, (]
[return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector2D, negate, (, ), {, return, new, Vector2D, (, -]
[(, 1, /, s, ), ;, }, public, Vector2D, negate, (, ), {, return, new, Vector2D, (, -, x, ,]
[1, /, s, ), ;, }, public, Vector2D, negate, (, ), {, return, new, Vector2D, (, -, x, ,, -]
[new, Vector2D, (, -, x, ,, -, y, ), ;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return]
[-, x, ,, -, y, ), ;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return, new, Vector2D, (]
[-, x, ,, -, y, ), ;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return, new, Vector2D, (]
[,, -, y, ), ;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return, new, Vector2D, (, a, *]
[y, ), ;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return, new, Vector2D, (, a, *, x, ,]
[y, ), ;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return, new, Vector2D, (, a, *, x, ,]
[;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return, new, Vector2D, (, a, *, x, ,, a, *]
[new, Vector2D, (, a, *, x, ,, a, *, y, ), ;, }, public, boolean, isNaN, (, ), {, return]
[new, Vector2D, (, a, *, x, ,, a, *, y, ), ;, }, public, boolean, isNaN, (, ), {, return]
[new, Vector2D, (, a, *, x, ,, a, *, y, ), ;, }, public, boolean, isNaN, (, ), {, return]
[*, x, ,, a, *, y, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (]
[a, *, y, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||]
[a, *, y, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||]
[;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (]
[isNaN, (, x, ), ||, Double, ., isNaN, (, y, ), ;, }, public, boolean, isInfinite, (, ), {, return]
[isNaN, (, x, ), ||, Double, ., isNaN, (, y, ), ;, }, public, boolean, isInfinite, (, ), {, return]
[(, x, ), ||, Double, ., isNaN, (, y, ), ;, }, public, boolean, isInfinite, (, ), {, return, !]
[Double, ., isNaN, (, y, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&]
[., isNaN, (, y, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (]
[., isNaN, (, y, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (]
[., isNaN, (, y, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (]
[), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (]
[public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (, x, ), ||]
[public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (, x, ), ||]
[), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (]
[(, y, ), ), ;, }, public, double, distance1, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =]
[), ;, }, public, double, distance1, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =]
[>, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[>, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[>, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =]
[=, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[(, p3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -]
[-, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return]
[-, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return]
[), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return, dx, +]
[return, dx, +, dy, ;, }, public, double, distance, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =]
[dy, ;, }, public, double, distance, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =]
[>, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =, p3, ., x, -]
[=, (, Vector2D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =]
[=, (, Vector2D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =]
[=, (, Vector2D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =]
[p, ;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -]
[double, dx, =, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return]
[double, dx, =, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return]
[., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, FastMath, ., sqrt, (]
[., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, FastMath, ., sqrt, (]
[., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, FastMath, ., sqrt, (]
[-, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, FastMath, ., sqrt, (, dx, *]
[;, final, double, dy, =, p3, ., y, -, y, ;, return, FastMath, ., sqrt, (, dx, *, dx, +]
[;, final, double, dy, =, p3, ., y, -, y, ;, return, FastMath, ., sqrt, (, dx, *, dx, +]
[double, dy, =, p3, ., y, -, y, ;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *]
[dy, *, dy, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =]
[), ;, }, public, double, distanceInf, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =]
[>, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[>, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[>, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =]
[=, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[(, p3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -]
[-, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return]
[-, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return]
[final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return, FastMath, ., max, (]
[dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return, FastMath, ., max, (, dx, ,]
[dx, ,, dy, ), ;, }, public, double, distanceSq, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =]
[), ;, }, public, double, distanceSq, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =]
[>, p, ), {, Vector2D, p3, =, (, Vector2D, ), p, ;, final, double, dx, =, p3, ., x, -]
[=, (, Vector2D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =]
[=, (, Vector2D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =]
[=, (, Vector2D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =]
[p, ;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -]
[double, dx, =, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return]
[double, dx, =, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return]
[double, dx, =, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return]
[=, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, dx, *]
[., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, dx, *, dx, +]
[., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, dx, *, dx, +]
[-, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, dx, *, dx, +, dy, *]
[*, dy, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D, v2, =]
[}, public, double, dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D, v2, =, (, Vector2D, )]
[dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D, v2, =, (, Vector2D, ), v, ;, return]
[dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D, v2, =, (, Vector2D, ), v, ;, return]
[dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D, v2, =, (, Vector2D, ), v, ;, return]
[final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D, v2, =, (, Vector2D, ), v, ;, return, x, *]
[final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D, v2, =, (, Vector2D, ), v, ;, return, x, *]
[>, v, ), {, final, Vector2D, v2, =, (, Vector2D, ), v, ;, return, x, *, v2, ., x, +]
[>, v, ), {, final, Vector2D, v2, =, (, Vector2D, ), v, ;, return, x, *, v2, ., x, +]
[), {, final, Vector2D, v2, =, (, Vector2D, ), v, ;, return, x, *, v2, ., x, +, y, *]
[), {, final, Vector2D, v2, =, (, Vector2D, ), v, ;, return, x, *, v2, ., x, +, y, *]
[y, *, v2, ., y, ;, }, public, static, double, distance, (, Vector2D, p1, ,, Vector2D, p2, ), {, return]
[y, *, v2, ., y, ;, }, public, static, double, distance, (, Vector2D, p1, ,, Vector2D, p2, ), {, return]
[y, ;, }, public, static, double, distance, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1, ., distance, (]
[., distance, (, p2, ), ;, }, public, static, double, distanceInf, (, Vector2D, p1, ,, Vector2D, p2, ), {, return]
[., distance, (, p2, ), ;, }, public, static, double, distanceInf, (, Vector2D, p1, ,, Vector2D, p2, ), {, return]
[), ;, }, public, static, double, distanceInf, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1, ., distanceInf, (]
[., distanceInf, (, p2, ), ;, }, public, static, double, distanceSq, (, Vector2D, p1, ,, Vector2D, p2, ), {, return]
[., distanceInf, (, p2, ), ;, }, public, static, double, distanceSq, (, Vector2D, p1, ,, Vector2D, p2, ), {, return]
[), ;, }, public, static, double, distanceSq, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1, ., distanceSq, (]
[p1, ., distanceSq, (, p2, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[p1, ., distanceSq, (, p2, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[distanceSq, (, p2, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[this, ==, other, ), {, return, true, ;, }, if, (, other, instanceof, Vector2D, ), {, final, Vector2D, rhs, =]
[), {, return, true, ;, }, if, (, other, instanceof, Vector2D, ), {, final, Vector2D, rhs, =, (, Vector2D, )]
[;, }, if, (, other, instanceof, Vector2D, ), {, final, Vector2D, rhs, =, (, Vector2D, ), other, ;, if, (]
[;, }, if, (, other, instanceof, Vector2D, ), {, final, Vector2D, rhs, =, (, Vector2D, ), other, ;, if, (]
[{, final, Vector2D, rhs, =, (, Vector2D, ), other, ;, if, (, rhs, ., isNaN, (, ), ), {, return]
[{, final, Vector2D, rhs, =, (, Vector2D, ), other, ;, if, (, rhs, ., isNaN, (, ), ), {, return]
[other, ;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return]
[other, ;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return]
[;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (]
[;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (]
[(, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==]
[(, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==]
[), ), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&]
[), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (]
[), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (]
[return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (, y, ==]
[return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (, y, ==]
[}, return, (, x, ==, rhs, ., x, ), &&, (, y, ==, rhs, ., y, ), ;, }, return]
[rhs, ., y, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (]
[return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return]
[@, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 542, ;, }, return]
[@, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 542, ;, }, return]
[public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 542, ;, }, return, 122, *]
[int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 542, ;, }, return, 122, *, (]
[int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 542, ;, }, return, 122, *, (]
[int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 542, ;, }, return, 122, *, (]
[(, ), {, if, (, isNaN, (, ), ), {, return, 542, ;, }, return, 122, *, (, 76, *]
[(, ), {, if, (, isNaN, (, ), ), {, return, 542, ;, }, return, 122, *, (, 76, *]
[(, isNaN, (, ), ), {, return, 542, ;, }, return, 122, *, (, 76, *, MathUtils, ., hash, (]
[), ), {, return, 542, ;, }, return, 122, *, (, 76, *, MathUtils, ., hash, (, x, ), +]
[), ), {, return, 542, ;, }, return, 122, *, (, 76, *, MathUtils, ., hash, (, x, ), +]
[542, ;, }, return, 122, *, (, 76, *, MathUtils, ., hash, (, x, ), +, MathUtils, ., hash, (]
[), +, MathUtils, ., hash, (, y, ), ), ;, }, @, Override, public, String, toString, (, ), {, return]
[), +, MathUtils, ., hash, (, y, ), ), ;, }, @, Override, public, String, toString, (, ), {, return]
[), +, MathUtils, ., hash, (, y, ), ), ;, }, @, Override, public, String, toString, (, ), {, return]
[), ;, }, @, Override, public, String, toString, (, ), {, return, Vector2DFormat, ., getInstance, (, ), ., format, (]
[getInstance, (, ), ., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return]
[getInstance, (, ), ., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return]
[., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector2DFormat, (]
[;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector2DFormat, (, format, ), ., format, (]
