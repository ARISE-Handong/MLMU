[;, private, static, final, double, H0, =, 7.5112554446494248286e-1, ;, private, static, final, double, H1, =, 1.0622519320271969145, ;, @, Override, protected]
[;, private, static, final, double, H1, =, 1.0622519320271969145, ;, @, Override, protected, Pair, <, Double, [, ], ,, Double, []
[;, @, Override, protected, Pair, <, Double, [, ], ,, Double, [, ], >, computeRule, (, int, numberOfPoints, ), throws]
[), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, [, ], {]
[==, 1, ), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, []
[), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, [, ], {]
[;, }, final, int, lastNumPoints, =, numberOfPoints, -, 1, ;, final, Double, [, ], previousPoints, =, getRuleInternal, (, lastNumPoints, )]
[,, new, Double, [, ], {, SQRT_PI, }, ), ;, }, final, int, lastNumPoints, =, numberOfPoints, -, 1, ;, final]
[,, new, Double, [, ], {, SQRT_PI, }, ), ;, }, final, int, lastNumPoints, =, numberOfPoints, -, 1, ;, final]
[}, ,, new, Double, [, ], {, SQRT_PI, }, ), ;, }, final, int, lastNumPoints, =, numberOfPoints, -, 1, ;]
[), ;, }, final, int, lastNumPoints, =, numberOfPoints, -, 1, ;, final, Double, [, ], previousPoints, =, getRuleInternal, (, lastNumPoints]
[), ;, }, final, int, lastNumPoints, =, numberOfPoints, -, 1, ;, final, Double, [, ], previousPoints, =, getRuleInternal, (, lastNumPoints]
[}, ), ;, }, final, int, lastNumPoints, =, numberOfPoints, -, 1, ;, final, Double, [, ], previousPoints, =, getRuleInternal, (]
[;, final, Double, [, ], previousPoints, =, getRuleInternal, (, lastNumPoints, ), ., getFirst, (, ), ;, final, Double, [, ]]
[-, 1, ;, final, Double, [, ], previousPoints, =, getRuleInternal, (, lastNumPoints, ), ., getFirst, (, ), ;, final, Double]
[;, final, Double, [, ], previousPoints, =, getRuleInternal, (, lastNumPoints, ), ., getFirst, (, ), ;, final, Double, [, ]]
[;, final, Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;, final, Double, [, ], weights, =, new]
[., getFirst, (, ), ;, final, Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;, final, Double, []
[), ., getFirst, (, ), ;, final, Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;, final, Double]
[;, final, Double, [, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, double, sqrtTwoTimesLastNumPoints, =, FastMath, ., sqrt]
[], ;, final, Double, [, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, double, sqrtTwoTimesLastNumPoints, =, FastMath, .]
[;, final, double, sqrtTwoTimesLastNumPoints, =, FastMath, ., sqrt, (, 2, *, lastNumPoints, ), ;, final, double, sqrtTwoTimesNumPoints, =, FastMath, .]
[], ;, final, double, sqrtTwoTimesLastNumPoints, =, FastMath, ., sqrt, (, 2, *, lastNumPoints, ), ;, final, double, sqrtTwoTimesNumPoints, =, FastMath]
[;, final, double, sqrtTwoTimesNumPoints, =, FastMath, ., sqrt, (, 2, *, numberOfPoints, ), ;, final, int, iMax, =, numberOfPoints, /]
[., sqrt, (, 2, *, lastNumPoints, ), ;, final, double, sqrtTwoTimesNumPoints, =, FastMath, ., sqrt, (, 2, *, numberOfPoints, )]
[), ;, final, double, sqrtTwoTimesNumPoints, =, FastMath, ., sqrt, (, 2, *, numberOfPoints, ), ;, final, int, iMax, =, numberOfPoints]
[*, lastNumPoints, ), ;, final, double, sqrtTwoTimesNumPoints, =, FastMath, ., sqrt, (, 2, *, numberOfPoints, ), ;, final, int, iMax]
[), ;, final, double, sqrtTwoTimesNumPoints, =, FastMath, ., sqrt, (, 2, *, numberOfPoints, ), ;, final, int, iMax, =, numberOfPoints]
[;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;]
[., sqrt, (, 2, *, numberOfPoints, ), ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i]
[), ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i, <, iMax]
[*, numberOfPoints, ), ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i]
[), ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i, <, iMax]
[;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (]
[/, 2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a]
[;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (]
[;, i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints]
[;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i]
[<, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints]
[;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i]
[), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -, 1, ]]
[++, ), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -, 1]
[;, double, b, =, (, iMax, ==, 1, ), ?, -, 0.5, :, previousPoints, [, i, ], ., doubleValue, (]
[?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax]
[), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (]
[==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b]
[), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (]
[:, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, )]
[:, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, )]
[;, double, b, =, (, iMax, ==, 1, ), ?, -, 0.5, :, previousPoints, [, i, ], ., doubleValue, (]
[., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, -, 0.5, :, previousPoints, [, i]
[[, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, -]
[], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, -, 0.5, :, previousPoints, []
[-, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, -, 0.5, :]
[], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, -, 0.5, :, previousPoints, []
[;, double, hma, =, H0, ;, double, ha, =, H1, *, a, ;, double, hmb, =, H0, ;, double, hb]
[?, -, 0.5, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, hma, =, H0, ;, double, ha]
[), ?, -, 0.5, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, hma, =, H0, ;, double]
[==, 1, ), ?, -, 0.5, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, hma, =, H0]
[), ?, -, 0.5, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, hma, =, H0, ;, double]
[:, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, hma, =, H0, ;, double, ha, =, H1, *]
[:, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, hma, =, H0, ;, double, ha, =, H1, *]
[;, double, hma, =, H0, ;, double, ha, =, H1, *, a, ;, double, hmb, =, H0, ;, double, hb]
[., doubleValue, (, ), ;, double, hma, =, H0, ;, double, ha, =, H1, *, a, ;, double, hmb, =]
[[, i, ], ., doubleValue, (, ), ;, double, hma, =, H0, ;, double, ha, =, H1, *, a, ;]
[], ., doubleValue, (, ), ;, double, hma, =, H0, ;, double, ha, =, H1, *, a, ;, double, hmb]
[;, double, ha, =, H1, *, a, ;, double, hmb, =, H0, ;, double, hb, =, H1, *, b, ;]
[;, double, hmb, =, H0, ;, double, hb, =, H1, *, b, ;, for, (, int, j, =, 1, ;]
[*, a, ;, double, hmb, =, H0, ;, double, hb, =, H1, *, b, ;, for, (, int, j, =]
[;, double, hmb, =, H0, ;, double, hb, =, H1, *, b, ;, for, (, int, j, =, 1, ;]
[;, double, hb, =, H1, *, b, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =]
[*, b, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =]
[;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s]
[;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt]
[<, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath]
[;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt]
[), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2, /]
[++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2]
[;, final, double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, .]
[+, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =]
[;, final, double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, .]
[;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =, s, *]
[., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, )]
[), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =, s]
[/, jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa]
[), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =, s]
[;, final, double, hpa, =, s, *, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =, s]
[., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =, s, *, a, *, ha, -, sm, *]
[), ;, final, double, hpa, =, s, *, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =]
[/, jp1, ), ;, final, double, hpa, =, s, *, a, *, ha, -, sm, *, hma, ;, final, double]
[), ;, final, double, hpa, =, s, *, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =]
[;, final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb, ;, hma, =, ha, ;, ha]
[-, sm, *, hma, ;, final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb, ;, hma]
[*, ha, -, sm, *, hma, ;, final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb]
[*, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =, s, *, b, *, hb, -, sm]
[*, ha, -, sm, *, hma, ;, final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb]
[-, sm, *, hma, ;, final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb, ;, hma]
[;, final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb, ;, hma, =, ha, ;, ha]
[*, hma, ;, final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb, ;, hma, =, ha]
[;, final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb, ;, hma, =, ha, ;, ha]
[;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c]
[-, sm, *, hmb, ;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb]
[*, hb, -, sm, *, hmb, ;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb]
[*, b, *, hb, -, sm, *, hmb, ;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb]
[*, hb, -, sm, *, hmb, ;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb]
[-, sm, *, hmb, ;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb]
[;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c]
[*, hmb, ;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }]
[;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c]
[=, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c, =, 0.5]
[;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c, =, 0.5, *, (]
[=, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c, =, 0.5, *, (, a, +]
[;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c, =, 0.5, *, (, a, +, b, )]
[=, hb, ;, hb, =, hpb, ;, }, double, c, =, 0.5, *, (, a, +, b, ), ;, double]
[;, hb, =, hpb, ;, }, double, c, =, 0.5, *, (, a, +, b, ), ;, double, hmc, =]
[=, hpb, ;, }, double, c, =, 0.5, *, (, a, +, b, ), ;, double, hmc, =, H0, ;]
[;, }, double, c, =, 0.5, *, (, a, +, b, ), ;, double, hmc, =, H0, ;, double, hc]
[;, double, hmc, =, H0, ;, double, hc, =, H1, *, c, ;, boolean, done, =, false, ;, while, (]
[*, (, a, +, b, ), ;, double, hmc, =, H0, ;, double, hc, =, H1, *, c, ;, boolean]
[;, double, hmc, =, H0, ;, double, hc, =, H1, *, c, ;, boolean, done, =, false, ;, while, (]
[), ;, double, hmc, =, H0, ;, double, hc, =, H1, *, c, ;, boolean, done, =, false, ;, while]
[+, b, ), ;, double, hmc, =, H0, ;, double, hc, =, H1, *, c, ;, boolean, done, =, false]
[), ;, double, hmc, =, H0, ;, double, hc, =, H1, *, c, ;, boolean, done, =, false, ;, while]
[;, double, hc, =, H1, *, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done]
[;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =, b, -, a, <=, Math, .]
[*, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =, b, -, a, <=]
[;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =, b, -, a, <=, Math, .]
[;, while, (, !, done, ), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;]
[), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;, hmc, =, H0, ;, hc]
[), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;, hmc, =, H0, ;, hc]
[=, b, -, a, <=, Math, ., ulp, (, c, ), ;, hmc, =, H0, ;, hc, =, H1, *]
[;, hmc, =, H0, ;, hc, =, H1, *, c, ;, for, (, int, j, =, 1, ;, j, <]
[<=, Math, ., ulp, (, c, ), ;, hmc, =, H0, ;, hc, =, H1, *, c, ;, for, (]
[-, a, <=, Math, ., ulp, (, c, ), ;, hmc, =, H0, ;, hc, =, H1, *, c, ;]
[<=, Math, ., ulp, (, c, ), ;, hmc, =, H0, ;, hc, =, H1, *, c, ;, for, (]
[;, hmc, =, H0, ;, hc, =, H1, *, c, ;, for, (, int, j, =, 1, ;, j, <]
[., ulp, (, c, ), ;, hmc, =, H0, ;, hc, =, H1, *, c, ;, for, (, int, j]
[), ;, hmc, =, H0, ;, hc, =, H1, *, c, ;, for, (, int, j, =, 1, ;, j]
[=, H0, ;, hc, =, H1, *, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[;, hc, =, H1, *, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++]
[=, H1, *, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =]
[*, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =]
[;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s]
[;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt]
[<, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath]
[;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt]
[), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2, /]
[++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2]
[;, final, double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, .]
[+, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =]
[;, final, double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, .]
[;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =, s, *]
[., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, )]
[), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =, s]
[/, jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc]
[), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =, s]
[;, final, double, hpc, =, s, *, c, *, hc, -, sm, *, hmc, ;, hmc, =, hc, ;, hc]
[., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =, s, *, c, *, hc, -, sm, *]
[), ;, final, double, hpc, =, s, *, c, *, hc, -, sm, *, hmc, ;, hmc, =, hc, ;]
[/, jp1, ), ;, final, double, hpc, =, s, *, c, *, hc, -, sm, *, hmc, ;, hmc, =]
[), ;, final, double, hpc, =, s, *, c, *, hc, -, sm, *, hmc, ;, hmc, =, hc, ;]
[;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {, if, (, ha, *]
[-, sm, *, hmc, ;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {]
[*, hc, -, sm, *, hmc, ;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done]
[*, c, *, hc, -, sm, *, hmc, ;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (]
[*, hc, -, sm, *, hmc, ;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done]
[-, sm, *, hmc, ;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {]
[;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {, if, (, ha, *]
[*, hmc, ;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {, if, (]
[;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {, if, (, ha, *]
[=, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {, if, (, ha, *, hc, <]
[;, hc, =, hpc, ;, }, if, (, !, done, ), {, if, (, ha, *, hc, <, 0, )]
[=, hpc, ;, }, if, (, !, done, ), {, if, (, ha, *, hc, <, 0, ), {, b]
[;, }, if, (, !, done, ), {, if, (, ha, *, hc, <, 0, ), {, b, =, c]
[), {, if, (, ha, *, hc, <, 0, ), {, b, =, c, ;, hmb, =, hmc, ;, hb]
[), {, if, (, ha, *, hc, <, 0, ), {, b, =, c, ;, hmb, =, hmc, ;, hb]
[), {, b, =, c, ;, hmb, =, hmc, ;, hb, =, hc, ;, }, else, {, a, =, c]
[<, 0, ), {, b, =, c, ;, hmb, =, hmc, ;, hb, =, hc, ;, }, else, {, a]
[*, hc, <, 0, ), {, b, =, c, ;, hmb, =, hmc, ;, hb, =, hc, ;, }, else]
[<, 0, ), {, b, =, c, ;, hmb, =, hmc, ;, hb, =, hc, ;, }, else, {, a]
[), {, b, =, c, ;, hmb, =, hmc, ;, hb, =, hc, ;, }, else, {, a, =, c]
[=, c, ;, hmb, =, hmc, ;, hb, =, hc, ;, }, else, {, a, =, c, ;, hma, =]
[;, hmb, =, hmc, ;, hb, =, hc, ;, }, else, {, a, =, c, ;, hma, =, hmc, ;]
[=, hmc, ;, hb, =, hc, ;, }, else, {, a, =, c, ;, hma, =, hmc, ;, ha, =]
[;, hb, =, hc, ;, }, else, {, a, =, c, ;, hma, =, hmc, ;, ha, =, hc, ;]
[=, hc, ;, }, else, {, a, =, c, ;, hma, =, hmc, ;, ha, =, hc, ;, }, c]
[;, }, else, {, a, =, c, ;, hma, =, hmc, ;, ha, =, hc, ;, }, c, =, 0.5]
[=, c, ;, hma, =, hmc, ;, ha, =, hc, ;, }, c, =, 0.5, *, (, a, +, b]
[;, hma, =, hmc, ;, ha, =, hc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;]
[=, hmc, ;, ha, =, hc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }]
[;, ha, =, hc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double]
[=, hc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =]
[;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *]
[=, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final]
[;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /, (, d, *]
[*, (, a, +, b, ), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w]
[;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /, (, d, *]
[), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /, (, d]
[+, b, ), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /]
[), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /, (, d]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, i, ], =, c, ;]
[*, hmc, ;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, i, ], =]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, i, ], =, c, ;]
[;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, lastNumPoints]
[/, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w]
[;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, lastNumPoints]
[), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =]
[*, d, ), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int]
[), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =]
[=, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points, []
[[, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, lastNumPoints, -, i]
[], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points]
[;, weights, [, i, ], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points, [, idx, ]]
[=, w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points, [, idx, ], =, -, c, ;, weights]
[[, i, ], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points, [, idx, ], =, -]
[], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points, [, idx, ], =, -, c, ;]
[;, final, int, idx, =, lastNumPoints, -, i, ;, points, [, idx, ], =, -, c, ;, weights, [, idx]
[;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints]
[-, i, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if]
[;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints]
[=, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, )]
[[, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2]
[], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0]
[;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, hm]
[;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, hm]
[=, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, hm, =, H0, ;, for, (]
[[, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, hm, =, H0]
[], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, hm, =, H0, ;, for]
[;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, hm, =, H0, ;, for, (, int, j]
[), {, double, hm, =, H0, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=]
[!=, 0, ), {, double, hm, =, H0, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[%, 2, !=, 0, ), {, double, hm, =, H0, ;, for, (, int, j, =, 1, ;, j, <]
[!=, 0, ), {, double, hm, =, H0, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[), {, double, hm, =, H0, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, final, double, jp1]
[;, j, <, numberOfPoints, ;, j, +=, 2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =]
[;, j, +=, 2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =, -, FastMath, ., sqrt]
[<, numberOfPoints, ;, j, +=, 2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =, -, FastMath]
[;, j, +=, 2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =, -, FastMath, ., sqrt]
[+=, 2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =, -, FastMath, ., sqrt, (, j]
[), {, final, double, jp1, =, j, +, 1, ;, hm, =, -, FastMath, ., sqrt, (, j, /, jp1]
[;, hm, =, -, FastMath, ., sqrt, (, j, /, jp1, ), *, hm, ;, }, final, double, d, =]
[+, 1, ;, hm, =, -, FastMath, ., sqrt, (, j, /, jp1, ), *, hm, ;, }, final, double]
[;, hm, =, -, FastMath, ., sqrt, (, j, /, jp1, ), *, hm, ;, }, final, double, d, =]
[=, -, FastMath, ., sqrt, (, j, /, jp1, ), *, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *]
[;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (, d, *, d]
[*, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (, d]
[*, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (, d]
[., sqrt, (, j, /, jp1, ), *, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final]
[), *, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (]
[/, jp1, ), *, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2]
[), *, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (]
[;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (, d, *, d]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;]
[*, hm, ;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;]
[;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <]
[/, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w]
[;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <]
[), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair]
[*, d, ), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return]
[), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair]
[=, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double]
[[, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <, Double, []
[], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <, Double, [, ], ,]
[;, weights, [, iMax, ], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ]]
[=, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, points, ,, weights]
[[, iMax, ], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (]
[], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, points, ,]
[;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, points, ,, weights, ), ;]
[;, }, }]
[,, weights, ), ;, }, }]
[), ;, }, }]
