[util, ., MathUtils, ;, public, class, Variance, extends, AbstractStorelessUnivariateStatistic, implements, Serializable, ,, WeightedEvaluation, {, private, static, final, long, serialVersionUID, =]
[., MathUtils, ;, public, class, Variance, extends, AbstractStorelessUnivariateStatistic, implements, Serializable, ,, WeightedEvaluation, {, private, static, final, long, serialVersionUID, =, -]
[extends, AbstractStorelessUnivariateStatistic, implements, Serializable, ,, WeightedEvaluation, {, private, static, final, long, serialVersionUID, =, -, 9111962718267217978L, ;, protected, SecondMoment, moment, =]
[{, private, static, final, long, serialVersionUID, =, -, 9111962718267217978L, ;, protected, SecondMoment, moment, =, null, ;, protected, boolean, incMoment, =]
[=, -, 9111962718267217978L, ;, protected, SecondMoment, moment, =, null, ;, protected, boolean, incMoment, =, true, ;, private, boolean, isBiasCorrected, =]
[=, null, ;, protected, boolean, incMoment, =, true, ;, private, boolean, isBiasCorrected, =, true, ;, public, Variance, (, ), {]
[;, protected, boolean, incMoment, =, true, ;, private, boolean, isBiasCorrected, =, true, ;, public, Variance, (, ), {, moment, =]
[Variance, (, ), {, moment, =, new, SecondMoment, (, ), ;, }, public, Variance, (, final, SecondMoment, m2, ), {]
[), {, moment, =, new, SecondMoment, (, ), ;, }, public, Variance, (, final, SecondMoment, m2, ), {, incMoment, =]
[moment, =, new, SecondMoment, (, ), ;, }, public, Variance, (, final, SecondMoment, m2, ), {, incMoment, =, false, ;]
[moment, =, new, SecondMoment, (, ), ;, }, public, Variance, (, final, SecondMoment, m2, ), {, incMoment, =, false, ;]
[(, ), ;, }, public, Variance, (, final, SecondMoment, m2, ), {, incMoment, =, false, ;, this, ., moment, =]
[), {, incMoment, =, false, ;, this, ., moment, =, m2, ;, }, public, Variance, (, boolean, isBiasCorrected, ), {]
[incMoment, =, false, ;, this, ., moment, =, m2, ;, }, public, Variance, (, boolean, isBiasCorrected, ), {, moment, =]
[., moment, =, m2, ;, }, public, Variance, (, boolean, isBiasCorrected, ), {, moment, =, new, SecondMoment, (, ), ;]
[., moment, =, m2, ;, }, public, Variance, (, boolean, isBiasCorrected, ), {, moment, =, new, SecondMoment, (, ), ;]
[;, }, public, Variance, (, boolean, isBiasCorrected, ), {, moment, =, new, SecondMoment, (, ), ;, this, ., isBiasCorrected, =]
[(, ), ;, this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment, m2, ), {]
[;, this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment, m2, ), {, incMoment, =]
[., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment, m2, ), {, incMoment, =, false, ;]
[., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment, m2, ), {, incMoment, =, false, ;]
[;, }, public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment, m2, ), {, incMoment, =, false, ;, this, ., moment, =]
[public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment, m2, ), {, incMoment, =, false, ;, this, ., moment, =, m2, ;]
[public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment, m2, ), {, incMoment, =, false, ;, this, ., moment, =, m2, ;]
[isBiasCorrected, ,, SecondMoment, m2, ), {, incMoment, =, false, ;, this, ., moment, =, m2, ;, this, ., isBiasCorrected, =]
[moment, =, m2, ;, this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, Variance, original, ), throws, NullArgumentException, {]
[m2, ;, this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, Variance, original, ), throws, NullArgumentException, {, copy, (]
[this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, Variance, original, ), throws, NullArgumentException, {, copy, (, original, ,]
[(, original, ,, this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (]
[this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (, incMoment, ), {]
[this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (, incMoment, ), {]
[@, Override, public, void, increment, (, final, double, d, ), {, if, (, incMoment, ), {, moment, ., increment, (]
[{, moment, ., increment, (, d, ), ;, }, }, @, Override, public, double, getResult, (, ), {, if, (]
[{, moment, ., increment, (, d, ), ;, }, }, @, Override, public, double, getResult, (, ), {, if, (]
[{, moment, ., increment, (, d, ), ;, }, }, @, Override, public, double, getResult, (, ), {, if, (]
[(, d, ), ;, }, }, @, Override, public, double, getResult, (, ), {, if, (, moment, ., n, ==]
[}, }, @, Override, public, double, getResult, (, ), {, if, (, moment, ., n, ==, 0, ), {, return]
[}, }, @, Override, public, double, getResult, (, ), {, if, (, moment, ., n, ==, 0, ), {, return]
[), {, if, (, moment, ., n, ==, 0, ), {, return, Double, ., NaN, ;, }, else, if, (]
[), {, if, (, moment, ., n, ==, 0, ), {, return, Double, ., NaN, ;, }, else, if, (]
[), {, if, (, moment, ., n, ==, 0, ), {, return, Double, ., NaN, ;, }, else, if, (]
[moment, ., n, ==, 0, ), {, return, Double, ., NaN, ;, }, else, if, (, moment, ., n, ==]
[0, ), {, return, Double, ., NaN, ;, }, else, if, (, moment, ., n, ==, 1, ), {, return]
[;, }, else, if, (, moment, ., n, ==, 1, ), {, return, 0d, ;, }, else, {, if, (]
[(, moment, ., n, ==, 1, ), {, return, 0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return]
[(, moment, ., n, ==, 1, ), {, return, 0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return]
[(, moment, ., n, ==, 1, ), {, return, 0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return]
[==, 1, ), {, return, 0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return, moment, ., m2, /]
[1, ), {, return, 0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return, moment, ., m2, /, (]
[1, ), {, return, 0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return, moment, ., m2, /, (]
[1, ), {, return, 0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return, moment, ., m2, /, (]
[0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return, moment, ., m2, /, (, moment, ., n, -]
[isBiasCorrected, ), {, return, moment, ., m2, /, (, moment, ., n, -, 1d, ), ;, }, else, {, return]
[isBiasCorrected, ), {, return, moment, ., m2, /, (, moment, ., n, -, 1d, ), ;, }, else, {, return]
[isBiasCorrected, ), {, return, moment, ., m2, /, (, moment, ., n, -, 1d, ), ;, }, else, {, return]
[moment, ., m2, /, (, moment, ., n, -, 1d, ), ;, }, else, {, return, moment, ., m2, /]
[., m2, /, (, moment, ., n, -, 1d, ), ;, }, else, {, return, moment, ., m2, /, (]
[., m2, /, (, moment, ., n, -, 1d, ), ;, }, else, {, return, moment, ., m2, /, (]
[moment, ., m2, /, (, moment, ., n, ), ;, }, }, }, public, long, getN, (, ), {, return]
[moment, ., m2, /, (, moment, ., n, ), ;, }, }, }, public, long, getN, (, ), {, return]
[), {, return, moment, ., getN, (, ), ;, }, @, Override, public, void, clear, (, ), {, if, (]
[moment, ., getN, (, ), ;, }, @, Override, public, void, clear, (, ), {, if, (, incMoment, ), {]
[moment, ., getN, (, ), ;, }, @, Override, public, void, clear, (, ), {, if, (, incMoment, ), {]
[;, }, }, @, Override, public, double, evaluate, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, if, (]
[;, }, }, @, Override, public, double, evaluate, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, if, (]
[}, @, Override, public, double, evaluate, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, if, (, values, ==]
[double, evaluate, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, if, (, values, ==, null, ), {, throw]
[final, double, [, ], values, ), throws, MathIllegalArgumentException, {, if, (, values, ==, null, ), {, throw, new, NullArgumentException, (]
[final, double, [, ], values, ), throws, MathIllegalArgumentException, {, if, (, values, ==, null, ), {, throw, new, NullArgumentException, (]
[MathIllegalArgumentException, {, if, (, values, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return]
[if, (, values, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, evaluate, (]
[values, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, evaluate, (, values, ,]
[null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, evaluate, (, values, ,, 0, ,]
[null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, evaluate, (, values, ,, 0, ,]
[final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =]
[final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (]
[begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (]
[final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (, values, ,]
[length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (, values, ,, begin, ,]
[{, double, var, =, Double, ., NaN, ;, if, (, test, (, values, ,, begin, ,, length, ), ), {]
[NaN, ;, if, (, test, (, values, ,, begin, ,, length, ), ), {, clear, (, ), ;, if, (]
[NaN, ;, if, (, test, (, values, ,, begin, ,, length, ), ), {, clear, (, ), ;, if, (]
[if, (, test, (, values, ,, begin, ,, length, ), ), {, clear, (, ), ;, if, (, length, ==]
[(, values, ,, begin, ,, length, ), ), {, clear, (, ), ;, if, (, length, ==, 1, ), {]
[,, begin, ,, length, ), ), {, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =]
[{, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (]
[{, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (]
[(, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >]
[==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, Mean, mean, =]
[}, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =]
[}, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =]
[length, >, 1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (]
[1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,]
[{, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,, begin, ,]
[=, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,, begin, ,, length, ), ;]
[Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,, begin, ,, length, ), ;, var, =]
[), ;, double, m, =, mean, ., evaluate, (, values, ,, begin, ,, length, ), ;, var, =, evaluate, (]
[double, m, =, mean, ., evaluate, (, values, ,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,]
[=, mean, ., evaluate, (, values, ,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,, m, ,]
[., evaluate, (, values, ,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,, m, ,, begin, ,]
[,, length, ), ;, var, =, evaluate, (, values, ,, m, ,, begin, ,, length, ), ;, }, }, return]
[final, double, [, ], weights, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =]
[final, double, [, ], weights, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (]
[begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (]
[final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (, values, ,]
[length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (, values, ,, weights, ,]
[throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,]
[var, =, Double, ., NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,, length, ), ), {]
[if, (, test, (, values, ,, weights, ,, begin, ,, length, ), ), {, clear, (, ), ;, if, (]
[if, (, test, (, values, ,, weights, ,, begin, ,, length, ), ), {, clear, (, ), ;, if, (]
[test, (, values, ,, weights, ,, begin, ,, length, ), ), {, clear, (, ), ;, if, (, length, ==]
[,, weights, ,, begin, ,, length, ), ), {, clear, (, ), ;, if, (, length, ==, 1, ), {]
[,, begin, ,, length, ), ), {, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =]
[{, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (]
[{, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (]
[(, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >]
[==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, Mean, mean, =]
[}, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =]
[}, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =]
[length, >, 1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (]
[1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,]
[{, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,, weights, ,]
[mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,, weights, ,, begin, ,]
[Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,, weights, ,, begin, ,, length, ), ;]
[), ;, double, m, =, mean, ., evaluate, (, values, ,, weights, ,, begin, ,, length, ), ;, var, =]
[double, m, =, mean, ., evaluate, (, values, ,, weights, ,, begin, ,, length, ), ;, var, =, evaluate, (]
[=, mean, ., evaluate, (, values, ,, weights, ,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,]
[., evaluate, (, values, ,, weights, ,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,, weights, ,]
[(, values, ,, weights, ,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,, weights, ,, m, ,]
[,, weights, ,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,, weights, ,, m, ,, begin, ,]
[), ;, var, =, evaluate, (, values, ,, weights, ,, m, ,, begin, ,, length, ), ;, }, }, return]
[public, double, evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return]
[evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (]
[final, double, [, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,]
[[, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,]
[values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,, 0, ,]
[values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,, 0, ,]
[values, ,, final, double, mean, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =]
[values, ,, final, double, mean, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (]
[begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (]
[final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (, values, ,]
[length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (, values, ,, begin, ,]
[var, =, Double, ., NaN, ;, if, (, test, (, values, ,, begin, ,, length, ), ), {, if, (]
[var, =, Double, ., NaN, ;, if, (, test, (, values, ,, begin, ,, length, ), ), {, if, (]
[Double, ., NaN, ;, if, (, test, (, values, ,, begin, ,, length, ), ), {, if, (, length, ==]
[;, if, (, test, (, values, ,, begin, ,, length, ), ), {, if, (, length, ==, 1, ), {]
[(, test, (, values, ,, begin, ,, length, ), ), {, if, (, length, ==, 1, ), {, var, =]
[,, length, ), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (]
[,, length, ), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (]
[), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >]
[==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =]
[=, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =, 0.0, ;, double, dev, =]
[if, (, length, >, 1, ), {, double, accum, =, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =]
[double, accum, =, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =]
[=, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;]
[=, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;]
[;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <]
[;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <]
[dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +]
[0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[=, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =]
[(, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =, values, []
[=, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -]
[;, i, <, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;]
[<, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=]
[<, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=]
[+, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, dev, *]
[;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, dev, *, dev, ;]
[++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, dev, *, dev, ;, accum2, +=]
[[, i, ], -, mean, ;, accum, +=, dev, *, dev, ;, accum2, +=, dev, ;, }, double, len, =]
[mean, ;, accum, +=, dev, *, dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (]
[+=, dev, *, dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {]
[*, dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =]
[*, dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =]
[dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (]
[dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (]
[accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (, accum, -]
[+=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (]
[+=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (]
[+=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (]
[;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *]
[double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /]
[;, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /]
[if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /, (]
[if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /, (]
[isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /, (, len, -]
[accum, -, (, accum2, *, accum2, /, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {]
[(, accum2, *, accum2, /, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =]
[(, accum2, *, accum2, /, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =]
[accum2, *, accum2, /, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (]
[accum2, *, accum2, /, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (]
[accum2, /, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -]
[/, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (]
[/, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (]
[/, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (]
[), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *]
[/, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /]
[1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /]
[var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /, len, ;, }, }, }, return]
[;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return]
[public, double, evaluate, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, evaluate, (]
[evaluate, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,]
[final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, mean, ,]
[[, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, mean, ,, 0, ,]
[[, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, mean, ,, 0, ,]
[weights, ,, final, double, mean, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =]
[weights, ,, final, double, mean, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (]
[begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (]
[final, int, length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (, values, ,]
[length, ), throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (, values, ,, weights, ,]
[throws, MathIllegalArgumentException, {, double, var, =, Double, ., NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,]
[Double, ., NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,, length, ), ), {, if, (]
[Double, ., NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,, length, ), ), {, if, (]
[NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,, length, ), ), {, if, (, length, ==]
[(, test, (, values, ,, weights, ,, begin, ,, length, ), ), {, if, (, length, ==, 1, ), {]
[(, values, ,, weights, ,, begin, ,, length, ), ), {, if, (, length, ==, 1, ), {, var, =]
[,, length, ), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (]
[,, length, ), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (]
[), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >]
[==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =]
[=, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =, 0.0, ;, double, dev, =]
[if, (, length, >, 1, ), {, double, accum, =, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =]
[double, accum, =, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =]
[=, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;]
[=, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;]
[;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <]
[;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <]
[dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +]
[0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[=, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =]
[(, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =, values, []
[=, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -]
[;, i, <, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;]
[<, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=]
[<, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=]
[<, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=]
[+, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, weights, []
[i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, weights, [, i, ], *]
[++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, weights, [, i, ], *, (]
[++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, weights, [, i, ], *, (]
[{, dev, =, values, [, i, ], -, mean, ;, accum, +=, weights, [, i, ], *, (, dev, *]
[values, [, i, ], -, mean, ;, accum, +=, weights, [, i, ], *, (, dev, *, dev, ), ;]
[i, ], -, mean, ;, accum, +=, weights, [, i, ], *, (, dev, *, dev, ), ;, accum2, +=]
[i, ], -, mean, ;, accum, +=, weights, [, i, ], *, (, dev, *, dev, ), ;, accum2, +=]
[i, ], -, mean, ;, accum, +=, weights, [, i, ], *, (, dev, *, dev, ), ;, accum2, +=]
[-, mean, ;, accum, +=, weights, [, i, ], *, (, dev, *, dev, ), ;, accum2, +=, weights, []
[accum, +=, weights, [, i, ], *, (, dev, *, dev, ), ;, accum2, +=, weights, [, i, ], *]
[*, (, dev, *, dev, ), ;, accum2, +=, weights, [, i, ], *, dev, ;, }, double, sumWts, =]
[accum2, +=, weights, [, i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i, =]
[weights, [, i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;]
[weights, [, i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;]
[i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;, i, <]
[i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;, i, <]
[*, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +]
[;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[=, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sumWts, +=]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sumWts, +=]
[(, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sumWts, +=, weights, []
[i, <, begin, +, length, ;, i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (]
[+, length, ;, i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {]
[;, i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =]
[;, i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =]
[i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (]
[i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (]
[), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (, accum, -]
[{, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (]
[{, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (]
[{, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (]
[+=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *]
[[, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /]
[}, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /]
[if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, (]
[if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, (]
[isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, (, sumWts, -]
[accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {]
[(, accum2, *, accum2, /, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =]
[(, accum2, *, accum2, /, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =]
[accum2, *, accum2, /, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (]
[accum2, *, accum2, /, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (]
[accum2, /, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -]
[/, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (]
[/, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (]
[/, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (]
[), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *]
[/, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /]
[1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /]
[var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, sumWts, ;, }, }, }, return]
[final, double, [, ], values, ,, final, double, [, ], weights, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, double, [, ], weights, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, evaluate, (]
[values, ,, final, double, [, ], weights, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,]
[final, double, [, ], weights, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,]
[[, ], weights, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,, mean, ,]
[weights, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,, mean, ,, 0, ,]
[weights, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,, mean, ,, 0, ,]
[,, weights, ,, mean, ,, 0, ,, values, ., length, ), ;, }, public, boolean, isBiasCorrected, (, ), {, return]
[;, }, public, boolean, isBiasCorrected, (, ), {, return, isBiasCorrected, ;, }, public, void, setBiasCorrected, (, boolean, biasCorrected, ), {]
[;, }, public, boolean, isBiasCorrected, (, ), {, return, isBiasCorrected, ;, }, public, void, setBiasCorrected, (, boolean, biasCorrected, ), {]
[isBiasCorrected, (, ), {, return, isBiasCorrected, ;, }, public, void, setBiasCorrected, (, boolean, biasCorrected, ), {, this, ., isBiasCorrected, =]
[), {, this, ., isBiasCorrected, =, biasCorrected, ;, }, @, Override, public, Variance, copy, (, ), {, Variance, result, =]
[=, biasCorrected, ;, }, @, Override, public, Variance, copy, (, ), {, Variance, result, =, new, Variance, (, ), ;]
[;, }, @, Override, public, Variance, copy, (, ), {, Variance, result, =, new, Variance, (, ), ;, copy, (]
[@, Override, public, Variance, copy, (, ), {, Variance, result, =, new, Variance, (, ), ;, copy, (, this, ,]
[copy, (, ), {, Variance, result, =, new, Variance, (, ), ;, copy, (, this, ,, result, ), ;, return]
[), ;, return, result, ;, }, public, static, void, copy, (, Variance, source, ,, Variance, dest, ), throws, NullArgumentException, {]
[), ;, return, result, ;, }, public, static, void, copy, (, Variance, source, ,, Variance, dest, ), throws, NullArgumentException, {]
[;, }, public, static, void, copy, (, Variance, source, ,, Variance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[static, void, copy, (, Variance, source, ,, Variance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[static, void, copy, (, Variance, source, ,, Variance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[Variance, source, ,, Variance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (]
[Variance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;]
[Variance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;]
[NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (]
[NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (]
[), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;]
[), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;]
[checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., moment, =]
[checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., moment, =]
[checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., moment, =]
[(, source, ., getDataRef, (, ), ), ;, dest, ., moment, =, source, ., moment, ., copy, (, ), ;]
[(, source, ., getDataRef, (, ), ), ;, dest, ., moment, =, source, ., moment, ., copy, (, ), ;]
[(, ), ), ;, dest, ., moment, =, source, ., moment, ., copy, (, ), ;, dest, ., isBiasCorrected, =]
[(, ), ), ;, dest, ., moment, =, source, ., moment, ., copy, (, ), ;, dest, ., isBiasCorrected, =]
[dest, ., moment, =, source, ., moment, ., copy, (, ), ;, dest, ., isBiasCorrected, =, source, ., isBiasCorrected, ;]
[dest, ., moment, =, source, ., moment, ., copy, (, ), ;, dest, ., isBiasCorrected, =, source, ., isBiasCorrected, ;]
[source, ., moment, ., copy, (, ), ;, dest, ., isBiasCorrected, =, source, ., isBiasCorrected, ;, dest, ., incMoment, =]
[source, ., moment, ., copy, (, ), ;, dest, ., isBiasCorrected, =, source, ., isBiasCorrected, ;, dest, ., incMoment, =]
