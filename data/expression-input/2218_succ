[;, static, final, DiagnosticType, CONDITIONAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_CONDITIONAL_ID_GENERATOR_CALL", ,, "Id generator call must be unconditional", ), ;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE, =]
[., error, (, "JSC_NON_GLOBAL_ID_GENERATOR_CALL", ,, "Id generator call must be in the global scope", ), ;, static, final, DiagnosticType, CONDITIONAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_CONDITIONAL_ID_GENERATOR_CALL", ,, "Id generator call must be unconditional"]
[,, "Id generator call must be in the global scope", ), ;, static, final, DiagnosticType, CONDITIONAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_CONDITIONAL_ID_GENERATOR_CALL", ,, "Id generator call must be unconditional", ), ;, static, final]
[), ;, static, final, DiagnosticType, CONDITIONAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_CONDITIONAL_ID_GENERATOR_CALL", ,, "Id generator call must be unconditional", ), ;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE]
[;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE, =, DiagnosticType, ., error, (, "JSC_CONFLICTING_ID_GENERATOR_TYPE", ,, "Id generator can only be one of consistent, inconsistent, or stable.", ), ;, static, final, DiagnosticType, INVALID_GENERATOR_ID_MAPPING, =]
[., error, (, "JSC_CONDITIONAL_ID_GENERATOR_CALL", ,, "Id generator call must be unconditional", ), ;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE, =, DiagnosticType, ., error, (, "JSC_CONFLICTING_ID_GENERATOR_TYPE", ,, "Id generator can only be one of consistent, inconsistent, or stable."]
[,, "Id generator call must be unconditional", ), ;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE, =, DiagnosticType, ., error, (, "JSC_CONFLICTING_ID_GENERATOR_TYPE", ,, "Id generator can only be one of consistent, inconsistent, or stable.", ), ;, static, final]
[), ;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE, =, DiagnosticType, ., error, (, "JSC_CONFLICTING_ID_GENERATOR_TYPE", ,, "Id generator can only be one of consistent, inconsistent, or stable.", ), ;, static, final, DiagnosticType, INVALID_GENERATOR_ID_MAPPING]
[;, static, final, DiagnosticType, INVALID_GENERATOR_ID_MAPPING, =, DiagnosticType, ., error, (, "JSC_INVALID_GENERATOR_ID_MAPPING", ,, "Invalid generator id mapping. {0}", ), ;, private, final, AbstractCompiler, compiler, ;]
[., error, (, "JSC_CONFLICTING_ID_GENERATOR_TYPE", ,, "Id generator can only be one of consistent, inconsistent, or stable.", ), ;, static, final, DiagnosticType, INVALID_GENERATOR_ID_MAPPING, =, DiagnosticType, ., error, (, "JSC_INVALID_GENERATOR_ID_MAPPING", ,, "Invalid generator id mapping. {0}"]
[,, "Id generator can only be one of consistent, inconsistent, or stable.", ), ;, static, final, DiagnosticType, INVALID_GENERATOR_ID_MAPPING, =, DiagnosticType, ., error, (, "JSC_INVALID_GENERATOR_ID_MAPPING", ,, "Invalid generator id mapping. {0}", ), ;, private, final]
[), ;, static, final, DiagnosticType, INVALID_GENERATOR_ID_MAPPING, =, DiagnosticType, ., error, (, "JSC_INVALID_GENERATOR_ID_MAPPING", ,, "Invalid generator id mapping. {0}", ), ;, private, final, AbstractCompiler, compiler]
[;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, NameSupplier, >, nameGenerators, ;, private, final, Map, <]
[., error, (, "JSC_INVALID_GENERATOR_ID_MAPPING", ,, "Invalid generator id mapping. {0}", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, NameSupplier]
[,, "Invalid generator id mapping. {0}", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, NameSupplier, >, nameGenerators, ;, private]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, NameSupplier, >, nameGenerators, ;, private, final, Map]
[=, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps, =, Maps]
[., compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps]
[;, this, ., generatePseudoNames, =, generatePseudoNames, ;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps, =, Maps, ., newLinkedHashMap]
[=, generatePseudoNames, ;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps, =, Maps, ., newLinkedHashMap, (, ), ;, consistNameMap]
[., generatePseudoNames, =, generatePseudoNames, ;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps, =, Maps, ., newLinkedHashMap, (, )]
[;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps, =, Maps, ., newLinkedHashMap, (, ), ;, consistNameMap, =, Maps]
[=, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps, =, Maps, ., newLinkedHashMap, (, ), ;, consistNameMap, =, Maps, ., newLinkedHashMap]
[;, idGeneratorMaps, =, Maps, ., newLinkedHashMap, (, ), ;, consistNameMap, =, Maps, ., newLinkedHashMap, (, ), ;, Map, <, String]
[., newLinkedHashMap, (, ), ;, idGeneratorMaps, =, Maps, ., newLinkedHashMap, (, ), ;, consistNameMap, =, Maps, ., newLinkedHashMap, (, )]
[=, Maps, ., newLinkedHashMap, (, ), ;, consistNameMap, =, Maps, ., newLinkedHashMap, (, ), ;, Map, <, String, ,, BiMap]
[;, consistNameMap, =, Maps, ., newLinkedHashMap, (, ), ;, Map, <, String, ,, BiMap, <, String, ,, String, >, >]
[., newLinkedHashMap, (, ), ;, consistNameMap, =, Maps, ., newLinkedHashMap, (, ), ;, Map, <, String, ,, BiMap, <, String]
[=, Maps, ., newLinkedHashMap, (, ), ;, Map, <, String, ,, BiMap, <, String, ,, String, >, >, previousMap, ;]
[;, Map, <, String, ,, BiMap, <, String, ,, String, >, >, previousMap, ;, previousMap, =, parsePreviousResults, (, previousMapSerialized, )]
[., newLinkedHashMap, (, ), ;, Map, <, String, ,, BiMap, <, String, ,, String, >, >, previousMap, ;, previousMap, =]
[=, parsePreviousResults, (, previousMapSerialized, ), ;, this, ., previousMap, =, previousMap, ;, if, (, idGens, !=, null, ), {, for]
[;, this, ., previousMap, =, previousMap, ;, if, (, idGens, !=, null, ), {, for, (, String, gen, :, idGens]
[), ;, this, ., previousMap, =, previousMap, ;, if, (, idGens, !=, null, ), {, for, (, String, gen, :]
[=, previousMap, ;, if, (, idGens, !=, null, ), {, for, (, String, gen, :, idGens, ), {, nameGenerators, .]
[., previousMap, =, previousMap, ;, if, (, idGens, !=, null, ), {, for, (, String, gen, :, idGens, ), {]
[;, if, (, idGens, !=, null, ), {, for, (, String, gen, :, idGens, ), {, nameGenerators, ., put, (]
[), {, for, (, String, gen, :, idGens, ), {, nameGenerators, ., put, (, gen, ,, createNameSupplier, (, RenameStrategy, .]
[!=, null, ), {, for, (, String, gen, :, idGens, ), {, nameGenerators, ., put, (, gen, ,, createNameSupplier, (]
[), {, for, (, String, gen, :, idGens, ), {, nameGenerators, ., put, (, gen, ,, createNameSupplier, (, RenameStrategy, .]
[), {, nameGenerators, ., put, (, gen, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, gen, )]
[;, idGeneratorMaps, ., put, (, gen, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, }]
[., put, (, gen, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, gen, ), ), ), ;]
[,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, gen, ), ), ), ;, idGeneratorMaps, ., put, (]
[), ;, idGeneratorMaps, ., put, (, gen, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;]
[,, previousMap, ., get, (, gen, ), ), ), ;, idGeneratorMaps, ., put, (, gen, ,, Maps, ., <, String]
[., INCONSISTENT, ,, previousMap, ., get, (, gen, ), ), ), ;, idGeneratorMaps, ., put, (, gen, ,, Maps, .]
[), ), ;, idGeneratorMaps, ., put, (, gen, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), )]
[., get, (, gen, ), ), ), ;, idGeneratorMaps, ., put, (, gen, ,, Maps, ., <, String, ,, String]
[), ), ), ;, idGeneratorMaps, ., put, (, gen, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, )]
[;, }, }, }, private, enum, RenameStrategy, {, CONSISTENT, ,, INCONSISTENT, ,, STABLE, }, private, static, interface, NameSupplier, {, String]
[., put, (, gen, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, }, }, }]
[,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, }, }, }, private, enum, RenameStrategy, {]
[), ;, }, }, }, private, enum, RenameStrategy, {, CONSISTENT, ,, INCONSISTENT, ,, STABLE, }, private, static, interface, NameSupplier, {]
[., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, }, }, }, private, enum, RenameStrategy, {, CONSISTENT, ,]
[=, previousMappings, ., inverse, (, ), ;, this, ., generator, =, new, NameGenerator, (, previousMappings, ., keySet, (, ), ,]
[., previousMappings, =, previousMappings, ., inverse, (, ), ;, this, ., generator, =, new, NameGenerator, (, previousMappings, ., keySet, (]
[;, this, ., generator, =, new, NameGenerator, (, previousMappings, ., keySet, (, ), ,, "", ,, null, ), ;, this]
[., inverse, (, ), ;, this, ., generator, =, new, NameGenerator, (, previousMappings, ., keySet, (, ), ,, "", ,]
[=, new, NameGenerator, (, previousMappings, ., keySet, (, ), ,, "", ,, null, ), ;, this, ., renameStrategy, =, renameStrategy]
[., generator, =, new, NameGenerator, (, previousMappings, ., keySet, (, ), ,, "", ,, null, ), ;, this, ., renameStrategy]
[;, this, ., renameStrategy, =, renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name, )]
[,, "", ,, null, ), ;, this, ., renameStrategy, =, renameStrategy, ;, }, @, Override, public, String, getName, (, String]
[., keySet, (, ), ,, "", ,, null, ), ;, this, ., renameStrategy, =, renameStrategy, ;, }, @, Override, public]
[,, null, ), ;, this, ., renameStrategy, =, renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,]
[), ;, this, ., renameStrategy, =, renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name]
[=, renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, String, newName, =]
[., renameStrategy, =, renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, String]
[;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, String, newName, =, previousMappings, .]
[;, if, (, newName, ==, null, ), {, newName, =, generator, ., generateNextName, (, ), ;, }, return, newName, ;]
[., get, (, id, ), ;, if, (, newName, ==, null, ), {, newName, =, generator, ., generateNextName, (, )]
[), ;, if, (, newName, ==, null, ), {, newName, =, generator, ., generateNextName, (, ), ;, }, return, newName]
[), {, newName, =, generator, ., generateNextName, (, ), ;, }, return, newName, ;, }, @, Override, public, RenameStrategy, getRenameStrategy]
[==, null, ), {, newName, =, generator, ., generateNextName, (, ), ;, }, return, newName, ;, }, @, Override, public]
[), {, newName, =, generator, ., generateNextName, (, ), ;, }, return, newName, ;, }, @, Override, public, RenameStrategy, getRenameStrategy]
[=, generator, ., generateNextName, (, ), ;, }, return, newName, ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {]
[;, }, return, newName, ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, renameStrategy, ;, }, }, private]
[., generateNextName, (, ), ;, }, return, newName, ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, renameStrategy]
[;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, renameStrategy, ;, }, }, private, static, class, PseudoNameSuppier, implements]
[;, }, }, private, static, class, PseudoNameSuppier, implements, NameSupplier, {, private, int, counter, =, 0, ;, private, RenameStrategy, renameStrategy, ;]
[;, private, RenameStrategy, renameStrategy, ;, public, PseudoNameSuppier, (, RenameStrategy, renameStrategy, ), {, this, ., renameStrategy, =, renameStrategy, ;, }, @]
[=, renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, if, (, renameStrategy]
[., renameStrategy, =, renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, if]
[;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, if, (, renameStrategy, ==, RenameStrategy]
[), {, return, name, +, "$", +, counter, ++, ;, }, return, name, +, "$0", ;, }, @, Override, public]
[==, RenameStrategy, ., INCONSISTENT, ), {, return, name, +, "$", +, counter, ++, ;, }, return, name, +, "$0", ;]
[), {, return, name, +, "$", +, counter, ++, ;, }, return, name, +, "$0", ;, }, @, Override, public]
[., INCONSISTENT, ), {, return, name, +, "$", +, counter, ++, ;, }, return, name, +, "$0", ;, }, @]
[;, }, return, name, +, "$0", ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, renameStrategy, ;, }]
[+, counter, ++, ;, }, return, name, +, "$0", ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return]
[+, "$", +, counter, ++, ;, }, return, name, +, "$0", ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, )]
[+, counter, ++, ;, }, return, name, +, "$0", ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return]
[;, }, return, name, +, "$0", ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, renameStrategy, ;, }]
[++, ;, }, return, name, +, "$0", ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, renameStrategy, ;]
[;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, renameStrategy, ;, }, }, private, static, class, StableNameSupplier, implements]
[+, "$0", ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, renameStrategy, ;, }, }, private, static, class]
[;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, renameStrategy, ;, }, }, private, static, class, StableNameSupplier, implements]
[;, }, }, private, static, class, StableNameSupplier, implements, NameSupplier, {, @, Override, public, String, getName, (, String, id, ,, String]
[;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, RenameStrategy, ., STABLE, ;, }, }, private, NameSupplier, createNameSupplier]
[., base64EncodeInt, (, name, ., hashCode, (, ), ), ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return]
[), ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, RenameStrategy, ., STABLE, ;, }, }, private, NameSupplier]
[., hashCode, (, ), ), ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return, RenameStrategy, ., STABLE, ;]
[;, }, }, private, NameSupplier, createNameSupplier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {, previousMappings]
[., STABLE, ;, }, }, private, NameSupplier, createNameSupplier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, )]
[=, previousMappings, !=, null, ?, previousMappings, :, ImmutableBiMap, ., <, String, ,, String, >, of, (, ), ;, if, (]
[;, if, (, renameStrategy, ==, RenameStrategy, ., STABLE, ), {, return, new, StableNameSupplier, (, ), ;, }, else, if, (]
[?, previousMappings, :, ImmutableBiMap, ., <, String, ,, String, >, of, (, ), ;, if, (, renameStrategy, ==, RenameStrategy, .]
[!=, null, ?, previousMappings, :, ImmutableBiMap, ., <, String, ,, String, >, of, (, ), ;, if, (, renameStrategy, ==]
[?, previousMappings, :, ImmutableBiMap, ., <, String, ,, String, >, of, (, ), ;, if, (, renameStrategy, ==, RenameStrategy, .]
[:, ImmutableBiMap, ., <, String, ,, String, >, of, (, ), ;, if, (, renameStrategy, ==, RenameStrategy, ., STABLE, )]
[;, if, (, renameStrategy, ==, RenameStrategy, ., STABLE, ), {, return, new, StableNameSupplier, (, ), ;, }, else, if, (]
[., <, String, ,, String, >, of, (, ), ;, if, (, renameStrategy, ==, RenameStrategy, ., STABLE, ), {, return]
[), {, return, new, StableNameSupplier, (, ), ;, }, else, if, (, generatePseudoNames, ), {, return, new, PseudoNameSuppier, (, renameStrategy]
[==, RenameStrategy, ., STABLE, ), {, return, new, StableNameSupplier, (, ), ;, }, else, if, (, generatePseudoNames, ), {, return]
[), {, return, new, StableNameSupplier, (, ), ;, }, else, if, (, generatePseudoNames, ), {, return, new, PseudoNameSuppier, (, renameStrategy]
[., STABLE, ), {, return, new, StableNameSupplier, (, ), ;, }, else, if, (, generatePseudoNames, ), {, return, new, PseudoNameSuppier]
[;, }, else, if, (, generatePseudoNames, ), {, return, new, PseudoNameSuppier, (, renameStrategy, ), ;, }, else, {, return, new]
[), {, return, new, PseudoNameSuppier, (, renameStrategy, ), ;, }, else, {, return, new, ObfuscatedNameSuppier, (, renameStrategy, ,, previousMappings, )]
[;, }, else, {, return, new, ObfuscatedNameSuppier, (, renameStrategy, ,, previousMappings, ), ;, }, }, private, class, GatherGenerators, extends, AbstractPostOrderCallback]
[), ;, }, else, {, return, new, ObfuscatedNameSuppier, (, renameStrategy, ,, previousMappings, ), ;, }, }, private, class, GatherGenerators, extends]
[;, }, }, private, class, GatherGenerators, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[,, previousMappings, ), ;, }, }, private, class, GatherGenerators, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t]
[), ;, }, }, private, class, GatherGenerators, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[;, if, (, doc, ==, null, ), {, return, ;, }, int, numGeneratorAnnotations, =, (, doc, ., isConsistentIdGenerator, (, )]
[., getJSDocInfo, (, ), ;, if, (, doc, ==, null, ), {, return, ;, }, int, numGeneratorAnnotations, =, (, doc]
[), {, return, ;, }, int, numGeneratorAnnotations, =, (, doc, ., isConsistentIdGenerator, (, ), ?, 1, :, 0, ), +]
[==, null, ), {, return, ;, }, int, numGeneratorAnnotations, =, (, doc, ., isConsistentIdGenerator, (, ), ?, 1, :, 0]
[), {, return, ;, }, int, numGeneratorAnnotations, =, (, doc, ., isConsistentIdGenerator, (, ), ?, 1, :, 0, ), +]
[;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {, compiler]
[+, (, doc, ., isStableIdGenerator, (, ), ?, 1, :, 0, ), ;, if, (, numGeneratorAnnotations, ==, 0, ), {]
[+, (, doc, ., isIdGenerator, (, ), ?, 1, :, 0, ), +, (, doc, ., isStableIdGenerator, (, ), ?]
[), +, (, doc, ., isIdGenerator, (, ), ?, 1, :, 0, ), +, (, doc, ., isStableIdGenerator, (, )]
[?, 1, :, 0, ), +, (, doc, ., isIdGenerator, (, ), ?, 1, :, 0, ), +, (, doc]
[., isConsistentIdGenerator, (, ), ?, 1, :, 0, ), +, (, doc, ., isIdGenerator, (, ), ?, 1, :, 0]
[:, 0, ), +, (, doc, ., isIdGenerator, (, ), ?, 1, :, 0, ), +, (, doc, ., isStableIdGenerator]
[), +, (, doc, ., isIdGenerator, (, ), ?, 1, :, 0, ), +, (, doc, ., isStableIdGenerator, (, )]
[+, (, doc, ., isStableIdGenerator, (, ), ?, 1, :, 0, ), ;, if, (, numGeneratorAnnotations, ==, 0, ), {]
[), +, (, doc, ., isStableIdGenerator, (, ), ?, 1, :, 0, ), ;, if, (, numGeneratorAnnotations, ==, 0, )]
[?, 1, :, 0, ), +, (, doc, ., isStableIdGenerator, (, ), ?, 1, :, 0, ), ;, if, (]
[., isIdGenerator, (, ), ?, 1, :, 0, ), +, (, doc, ., isStableIdGenerator, (, ), ?, 1, :, 0]
[:, 0, ), +, (, doc, ., isStableIdGenerator, (, ), ?, 1, :, 0, ), ;, if, (, numGeneratorAnnotations, ==]
[), +, (, doc, ., isStableIdGenerator, (, ), ?, 1, :, 0, ), ;, if, (, numGeneratorAnnotations, ==, 0, )]
[;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {, compiler]
[), ;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {]
[?, 1, :, 0, ), ;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations]
[., isStableIdGenerator, (, ), ?, 1, :, 0, ), ;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }]
[:, 0, ), ;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1]
[), ;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {]
[), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {, compiler, ., report, (, t, ., makeError]
[==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {, compiler, ., report, (, t]
[), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {, compiler, ., report, (, t, ., makeError]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_GENERATOR_TYPE, ), ), ;, }, String, name, =]
[>, 1, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_GENERATOR_TYPE, ), ), ;, }, String]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_GENERATOR_TYPE, ), ), ;, }, String, name, =]
[;, }, String, name, =, null, ;, if, (, n, ., isAssign, (, ), ), {, name, =, n, .]
[., report, (, t, ., makeError, (, n, ,, CONFLICTING_GENERATOR_TYPE, ), ), ;, }, String, name, =, null, ;, if]
[), ;, }, String, name, =, null, ;, if, (, n, ., isAssign, (, ), ), {, name, =, n]
[., makeError, (, n, ,, CONFLICTING_GENERATOR_TYPE, ), ), ;, }, String, name, =, null, ;, if, (, n, ., isAssign]
[,, CONFLICTING_GENERATOR_TYPE, ), ), ;, }, String, name, =, null, ;, if, (, n, ., isAssign, (, ), ), {]
[), ), ;, }, String, name, =, null, ;, if, (, n, ., isAssign, (, ), ), {, name, =]
[;, if, (, n, ., isAssign, (, ), ), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (]
[), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, else, if, (, n, .]
[., isAssign, (, ), ), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, else]
[=, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, else, if, (, n, ., isVar, (, )]
[;, }, else, if, (, n, ., isVar, (, ), ), {, name, =, n, ., getFirstChild, (, ), .]
[., getQualifiedName, (, ), ;, }, else, if, (, n, ., isVar, (, ), ), {, name, =, n, .]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, else, if, (, n, ., isVar, (, ), ), {]
[), {, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, }, else, if, (, n, .]
[., isVar, (, ), ), {, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, }, else]
[=, n, ., getFirstChild, (, ), ., getString, (, ), ;, }, else, if, (, n, ., isFunction, (, )]
[;, }, else, if, (, n, ., isFunction, (, ), ), {, name, =, n, ., getFirstChild, (, ), .]
[., getString, (, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {, name, =, n, .]
[., getFirstChild, (, ), ., getString, (, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {]
[), {, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, name, ., isEmpty, (]
[., isFunction, (, ), ), {, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, name, ., isEmpty, (, ), ), {]
[;, if, (, name, ., isEmpty, (, ), ), {, return, ;, }, }, if, (, doc, ., isConsistentIdGenerator, (]
[., getString, (, ), ;, if, (, name, ., isEmpty, (, ), ), {, return, ;, }, }, if, (]
[., getFirstChild, (, ), ., getString, (, ), ;, if, (, name, ., isEmpty, (, ), ), {, return, ;]
[), {, return, ;, }, }, if, (, doc, ., isConsistentIdGenerator, (, ), ), {, consistNameMap, ., put, (, name]
[., isEmpty, (, ), ), {, return, ;, }, }, if, (, doc, ., isConsistentIdGenerator, (, ), ), {, consistNameMap]
[), {, consistNameMap, ., put, (, name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;]
[., isConsistentIdGenerator, (, ), ), {, consistNameMap, ., put, (, name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap]
[;, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., CONSISTENT, ,, previousMap, ., get, (, name, ), )]
[., put, (, name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, nameGenerators, ., put]
[,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, nameGenerators, ., put, (, name, ,, createNameSupplier]
[), ;, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., CONSISTENT, ,, previousMap, ., get, (, name, )]
[., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy]
[;, }, else, if, (, doc, ., isStableIdGenerator, (, ), ), {, nameGenerators, ., put, (, name, ,, createNameSupplier, (]
[., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., CONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;]
[,, createNameSupplier, (, RenameStrategy, ., CONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;, }, else, if, (]
[), ;, }, else, if, (, doc, ., isStableIdGenerator, (, ), ), {, nameGenerators, ., put, (, name, ,, createNameSupplier]
[,, previousMap, ., get, (, name, ), ), ), ;, }, else, if, (, doc, ., isStableIdGenerator, (, ), )]
[., CONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;, }, else, if, (, doc, ., isStableIdGenerator, (]
[), ), ;, }, else, if, (, doc, ., isStableIdGenerator, (, ), ), {, nameGenerators, ., put, (, name, ,]
[., get, (, name, ), ), ), ;, }, else, if, (, doc, ., isStableIdGenerator, (, ), ), {, nameGenerators]
[), ), ), ;, }, else, if, (, doc, ., isStableIdGenerator, (, ), ), {, nameGenerators, ., put, (, name]
[), {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., STABLE, ,, previousMap, ., get, (, name, )]
[., isStableIdGenerator, (, ), ), {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., STABLE, ,, previousMap, .]
[;, }, else, {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (]
[., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., STABLE, ,, previousMap, ., get, (, name, ), ), ), ;]
[,, createNameSupplier, (, RenameStrategy, ., STABLE, ,, previousMap, ., get, (, name, ), ), ), ;, }, else, {, nameGenerators]
[), ;, }, else, {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get]
[,, previousMap, ., get, (, name, ), ), ), ;, }, else, {, nameGenerators, ., put, (, name, ,, createNameSupplier]
[., STABLE, ,, previousMap, ., get, (, name, ), ), ), ;, }, else, {, nameGenerators, ., put, (, name]
[), ), ;, }, else, {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, .]
[., get, (, name, ), ), ), ;, }, else, {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy]
[), ), ), ;, }, else, {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap]
[;, }, idGeneratorMaps, ., put, (, name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;]
[., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;]
[,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;, }, idGeneratorMaps, ., put]
[), ;, }, idGeneratorMaps, ., put, (, name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), )]
[,, previousMap, ., get, (, name, ), ), ), ;, }, idGeneratorMaps, ., put, (, name, ,, Maps, ., <]
[., INCONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;, }, idGeneratorMaps, ., put, (, name, ,, Maps]
[), ), ;, }, idGeneratorMaps, ., put, (, name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, )]
[., get, (, name, ), ), ), ;, }, idGeneratorMaps, ., put, (, name, ,, Maps, ., <, String, ,]
[), ), ), ;, }, idGeneratorMaps, ., put, (, name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[., put, (, name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, }, }, @]
[,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, }, }, @, Override, public, void, process]
[), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, }, }, @, Override, public, void, process, (, Node]
[;, if, (, !, nameGenerators, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new]
[., traverse, (, compiler, ,, root, ,, new, GatherGenerators, (, ), ), ;, if, (, !, nameGenerators, ., isEmpty, (]
[,, root, ,, new, GatherGenerators, (, ), ), ;, if, (, !, nameGenerators, ., isEmpty, (, ), ), {, NodeTraversal]
[,, new, GatherGenerators, (, ), ), ;, if, (, !, nameGenerators, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse]
[), ;, if, (, !, nameGenerators, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ReplaceGenerators, (, ), ), ;, }, }, private, class]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ReplaceGenerators, (, ), ), ;, }, }, private, class]
[., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ReplaceGenerators, (, ), ), ;]
[;, }, }, private, class, ReplaceGenerators, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., traverse, (, compiler, ,, root, ,, new, ReplaceGenerators, (, ), ), ;, }, }, private, class, ReplaceGenerators, extends, AbstractPostOrderCallback]
[,, root, ,, new, ReplaceGenerators, (, ), ), ;, }, }, private, class, ReplaceGenerators, extends, AbstractPostOrderCallback, {, @, Override, public]
[,, new, ReplaceGenerators, (, ), ), ;, }, }, private, class, ReplaceGenerators, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit]
[), ;, }, }, private, class, ReplaceGenerators, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[), {, return, ;, }, String, callName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, NameSupplier, nameGenerator]
[), {, return, ;, }, String, callName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, NameSupplier, nameGenerator]
[., isCall, (, ), ), {, return, ;, }, String, callName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (]
[;, NameSupplier, nameGenerator, =, nameGenerators, ., get, (, callName, ), ;, if, (, nameGenerator, ==, null, ), {, return, ;]
[., getQualifiedName, (, ), ;, NameSupplier, nameGenerator, =, nameGenerators, ., get, (, callName, ), ;, if, (, nameGenerator, ==, null]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, NameSupplier, nameGenerator, =, nameGenerators, ., get, (, callName, ), ;, if]
[;, if, (, nameGenerator, ==, null, ), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&]
[., get, (, callName, ), ;, if, (, nameGenerator, ==, null, ), {, return, ;, }, if, (, !, t]
[), ;, if, (, nameGenerator, ==, null, ), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, )]
[), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&, nameGenerator, ., getRenameStrategy, (, ), ==]
[==, null, ), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&, nameGenerator, ., getRenameStrategy, (]
[), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&, nameGenerator, ., getRenameStrategy, (, ), ==]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, if]
[&&, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, compiler, ., report, (, t, ., makeError, (]
[&&, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, compiler, ., report, (, t, ., makeError, (]
[., inGlobalScope, (, ), &&, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, compiler, ., report, (]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, if]
[==, RenameStrategy, ., INCONSISTENT, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;]
[., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, if]
[., INCONSISTENT, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;]
[;, return, ;, }, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, for, (, Node]
[., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, if, (, nameGenerator, .]
[), ;, return, ;, }, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, for, (]
[., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, if, (, nameGenerator, ., getRenameStrategy, (, ), ==]
[,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, )]
[), ), ;, return, ;, }, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, for]
[), {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (]
[==, RenameStrategy, ., INCONSISTENT, ), {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (]
[., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, for, (, Node, ancestor, :, n, ., getAncestors, (, )]
[), {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (]
[., INCONSISTENT, ), {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (, NodeUtil, .]
[), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, compiler, ., report, (, t, ., makeError, (]
[., getAncestors, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, compiler, ., report, (]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONDITIONAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, }]
[., isControlStructure, (, ancestor, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONDITIONAL_ID_GENERATOR_CALL, ), )]
[), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONDITIONAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }]
[;, return, ;, }, }, }, Node, id, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if]
[., report, (, t, ., makeError, (, n, ,, CONDITIONAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, }, }, Node, id]
[), ;, return, ;, }, }, }, Node, id, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[., makeError, (, n, ,, CONDITIONAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, }, }, Node, id, =, n, ., getFirstChild]
[,, CONDITIONAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, }, }, Node, id, =, n, ., getFirstChild, (, ), ., getNext]
[), ), ;, return, ;, }, }, }, Node, id, =, n, ., getFirstChild, (, ), ., getNext, (, )]
[;, if, (, !, id, ., isString, (, ), ), {, return, ;, }, Map, <, String, ,, String, >]
[., getNext, (, ), ;, if, (, !, id, ., isString, (, ), ), {, return, ;, }, Map, <]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !, id, ., isString, (, ), ), {, return]
[), {, return, ;, }, Map, <, String, ,, String, >, idGeneratorMap, =, idGeneratorMaps, ., get, (, callName, ), ;]
[), {, return, ;, }, Map, <, String, ,, String, >, idGeneratorMap, =, idGeneratorMaps, ., get, (, callName, ), ;]
[., isString, (, ), ), {, return, ;, }, Map, <, String, ,, String, >, idGeneratorMap, =, idGeneratorMaps, ., get]
[;, String, rename, =, null, ;, String, name, =, id, ., getString, (, ), ;, String, instanceId, =, getIdForGeneratorNode, (]
[., get, (, callName, ), ;, String, rename, =, null, ;, String, name, =, id, ., getString, (, ), ;]
[), ;, String, rename, =, null, ;, String, name, =, id, ., getString, (, ), ;, String, instanceId, =, getIdForGeneratorNode]
[;, String, name, =, id, ., getString, (, ), ;, String, instanceId, =, getIdForGeneratorNode, (, nameGenerator, ., getRenameStrategy, (, )]
[;, String, instanceId, =, getIdForGeneratorNode, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ,, id, ), ;, if]
[., getString, (, ), ;, String, instanceId, =, getIdForGeneratorNode, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ,]
[;, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ), {, Map, <, String, ,, String, >]
[,, id, ), ;, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ), {, Map, <, String]
[==, RenameStrategy, ., CONSISTENT, ,, id, ), ;, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, )]
[., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ,, id, ), ;, if, (, nameGenerator, ., getRenameStrategy, (, ), ==]
[,, id, ), ;, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ), {, Map, <, String]
[., CONSISTENT, ,, id, ), ;, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ), {, Map]
[), ;, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ), {, Map, <, String, ,, String]
[), {, Map, <, String, ,, String, >, entry, =, consistNameMap, ., get, (, callName, ), ;, rename, =, entry]
[==, RenameStrategy, ., CONSISTENT, ), {, Map, <, String, ,, String, >, entry, =, consistNameMap, ., get, (, callName, )]
[., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ), {, Map, <, String, ,, String, >, entry, =, consistNameMap, .]
[), {, Map, <, String, ,, String, >, entry, =, consistNameMap, ., get, (, callName, ), ;, rename, =, entry]
[., CONSISTENT, ), {, Map, <, String, ,, String, >, entry, =, consistNameMap, ., get, (, callName, ), ;, rename]
[;, rename, =, entry, ., get, (, instanceId, ), ;, if, (, rename, ==, null, ), {, rename, =, nameGenerator]
[., get, (, callName, ), ;, rename, =, entry, ., get, (, instanceId, ), ;, if, (, rename, ==, null]
[), ;, rename, =, entry, ., get, (, instanceId, ), ;, if, (, rename, ==, null, ), {, rename, =]
[=, entry, ., get, (, instanceId, ), ;, if, (, rename, ==, null, ), {, rename, =, nameGenerator, ., getName]
[;, if, (, rename, ==, null, ), {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, entry]
[., get, (, instanceId, ), ;, if, (, rename, ==, null, ), {, rename, =, nameGenerator, ., getName, (, instanceId]
[), ;, if, (, rename, ==, null, ), {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;]
[), {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, entry, ., put, (, instanceId, ,, rename]
[==, null, ), {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, entry, ., put, (, instanceId]
[), {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, entry, ., put, (, instanceId, ,, rename]
[=, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, entry, ., put, (, instanceId, ,, rename, ), ;, }]
[;, entry, ., put, (, instanceId, ,, rename, ), ;, }, }, else, {, rename, =, nameGenerator, ., getName, (]
[., getName, (, instanceId, ,, name, ), ;, entry, ., put, (, instanceId, ,, rename, ), ;, }, }, else]
[,, name, ), ;, entry, ., put, (, instanceId, ,, rename, ), ;, }, }, else, {, rename, =, nameGenerator]
[), ;, entry, ., put, (, instanceId, ,, rename, ), ;, }, }, else, {, rename, =, nameGenerator, ., getName]
[;, }, }, else, {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, }, parent, ., replaceChild]
[., put, (, instanceId, ,, rename, ), ;, }, }, else, {, rename, =, nameGenerator, ., getName, (, instanceId, ,]
[,, rename, ), ;, }, }, else, {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, }]
[), ;, }, }, else, {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, }, parent, .]
[=, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, }, parent, ., replaceChild, (, n, ,, IR, ., string]
[;, }, parent, ., replaceChild, (, n, ,, IR, ., string, (, rename, ), ), ;, idGeneratorMap, ., put, (]
[., getName, (, instanceId, ,, name, ), ;, }, parent, ., replaceChild, (, n, ,, IR, ., string, (, rename]
[,, name, ), ;, }, parent, ., replaceChild, (, n, ,, IR, ., string, (, rename, ), ), ;, idGeneratorMap]
[), ;, }, parent, ., replaceChild, (, n, ,, IR, ., string, (, rename, ), ), ;, idGeneratorMap, ., put]
[;, idGeneratorMap, ., put, (, rename, ,, instanceId, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, public, String]
[., replaceChild, (, n, ,, IR, ., string, (, rename, ), ), ;, idGeneratorMap, ., put, (, rename, ,, instanceId]
[,, IR, ., string, (, rename, ), ), ;, idGeneratorMap, ., put, (, rename, ,, instanceId, ), ;, compiler, .]
[), ;, idGeneratorMap, ., put, (, rename, ,, instanceId, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, public]
[., string, (, rename, ), ), ;, idGeneratorMap, ., put, (, rename, ,, instanceId, ), ;, compiler, ., reportCodeChange, (]
[), ), ;, idGeneratorMap, ., put, (, rename, ,, instanceId, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, public, String, getSerializedIdMappings, (, ), {, StringBuilder, sb, =, new, StringBuilder]
[., put, (, rename, ,, instanceId, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, public, String, getSerializedIdMappings, (]
[,, instanceId, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, public, String, getSerializedIdMappings, (, ), {, StringBuilder, sb]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, public, String, getSerializedIdMappings, (, ), {, StringBuilder, sb, =, new]
[;, }, }, public, String, getSerializedIdMappings, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Map]
[., reportCodeChange, (, ), ;, }, }, public, String, getSerializedIdMappings, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, )]
[;, for, (, Map, ., Entry, <, String, ,, Map, <, String, ,, String, >, >, replacements, :, idGeneratorMaps, .]
[), {, if, (, !, replacements, ., getValue, (, ), ., isEmpty, (, ), ), {, sb, ., append, (]
[., entrySet, (, ), ), {, if, (, !, replacements, ., getValue, (, ), ., isEmpty, (, ), ), {]
[), {, sb, ., append, (, "[", ), ;, sb, ., append, (, replacements, ., getKey, (, ), ), ;]
[), {, sb, ., append, (, "[", ), ;, sb, ., append, (, replacements, ., getKey, (, ), ), ;]
[., isEmpty, (, ), ), {, sb, ., append, (, "[", ), ;, sb, ., append, (, replacements, ., getKey]
[., getValue, (, ), ., isEmpty, (, ), ), {, sb, ., append, (, "[", ), ;, sb, ., append]
[;, sb, ., append, (, replacements, ., getKey, (, ), ), ;, sb, ., append, (, "]\n\n", ), ;, for]
[., append, (, "[", ), ;, sb, ., append, (, replacements, ., getKey, (, ), ), ;, sb, ., append]
[), ;, sb, ., append, (, replacements, ., getKey, (, ), ), ;, sb, ., append, (, "]\n\n", ), ;]
[;, sb, ., append, (, "]\n\n", ), ;, for, (, Map, ., Entry, <, String, ,, String, >, replacement, :]
[., append, (, replacements, ., getKey, (, ), ), ;, sb, ., append, (, "]\n\n", ), ;, for, (, Map]
[), ;, sb, ., append, (, "]\n\n", ), ;, for, (, Map, ., Entry, <, String, ,, String, >, replacement]
[., getKey, (, ), ), ;, sb, ., append, (, "]\n\n", ), ;, for, (, Map, ., Entry, <, String]
[;, for, (, Map, ., Entry, <, String, ,, String, >, replacement, :, replacements, ., getValue, (, ), ., entrySet]
[., append, (, "]\n\n", ), ;, for, (, Map, ., Entry, <, String, ,, String, >, replacement, :, replacements, .]
[), ;, for, (, Map, ., Entry, <, String, ,, String, >, replacement, :, replacements, ., getValue, (, ), .]
[), {, sb, ., append, (, replacement, ., getKey, (, ), ), ;, sb, ., append, (, ':', ), ;]
[., entrySet, (, ), ), {, sb, ., append, (, replacement, ., getKey, (, ), ), ;, sb, ., append]
[., getValue, (, ), ., entrySet, (, ), ), {, sb, ., append, (, replacement, ., getKey, (, ), )]
[;, sb, ., append, (, ':', ), ;, sb, ., append, (, replacement, ., getValue, (, ), ), ;, sb]
[., append, (, replacement, ., getKey, (, ), ), ;, sb, ., append, (, ':', ), ;, sb, ., append]
[), ;, sb, ., append, (, ':', ), ;, sb, ., append, (, replacement, ., getValue, (, ), ), ;]
[., getKey, (, ), ), ;, sb, ., append, (, ':', ), ;, sb, ., append, (, replacement, ., getValue]
[;, sb, ., append, (, replacement, ., getValue, (, ), ), ;, sb, ., append, (, "\n", ), ;, }]
[., append, (, ':', ), ;, sb, ., append, (, replacement, ., getValue, (, ), ), ;, sb, ., append]
[), ;, sb, ., append, (, replacement, ., getValue, (, ), ), ;, sb, ., append, (, "\n", ), ;]
[;, sb, ., append, (, "\n", ), ;, }, sb, ., append, (, "\n", ), ;, }, }, return, sb]
[., append, (, replacement, ., getValue, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, sb, .]
[), ;, sb, ., append, (, "\n", ), ;, }, sb, ., append, (, "\n", ), ;, }, }, return]
[., getValue, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, sb, ., append, (, "\n", )]
[;, }, sb, ., append, (, "\n", ), ;, }, }, return, sb, ., toString, (, ), ;, }, private]
[., append, (, "\n", ), ;, }, sb, ., append, (, "\n", ), ;, }, }, return, sb, ., toString]
[), ;, }, sb, ., append, (, "\n", ), ;, }, }, return, sb, ., toString, (, ), ;, }]
[;, }, }, return, sb, ., toString, (, ), ;, }, private, Map, <, String, ,, BiMap, <, String, ,]
[., append, (, "\n", ), ;, }, }, return, sb, ., toString, (, ), ;, }, private, Map, <, String]
[), ;, }, }, return, sb, ., toString, (, ), ;, }, private, Map, <, String, ,, BiMap, <, String]
[;, }, private, Map, <, String, ,, BiMap, <, String, ,, String, >, >, parsePreviousResults, (, String, serializedMap, ), {]
[., toString, (, ), ;, }, private, Map, <, String, ,, BiMap, <, String, ,, String, >, >, parsePreviousResults, (]
[), {, return, Collections, ., emptyMap, (, ), ;, }, Map, <, String, ,, BiMap, <, String, ,, String, >]
[||, serializedMap, ., isEmpty, (, ), ), {, return, Collections, ., emptyMap, (, ), ;, }, Map, <, String, ,]
[==, null, ||, serializedMap, ., isEmpty, (, ), ), {, return, Collections, ., emptyMap, (, ), ;, }, Map, <]
[||, serializedMap, ., isEmpty, (, ), ), {, return, Collections, ., emptyMap, (, ), ;, }, Map, <, String, ,]
[), {, return, Collections, ., emptyMap, (, ), ;, }, Map, <, String, ,, BiMap, <, String, ,, String, >]
[., isEmpty, (, ), ), {, return, Collections, ., emptyMap, (, ), ;, }, Map, <, String, ,, BiMap, <]
[;, }, Map, <, String, ,, BiMap, <, String, ,, String, >, >, resultMap, =, Maps, ., newHashMap, (, )]
[., emptyMap, (, ), ;, }, Map, <, String, ,, BiMap, <, String, ,, String, >, >, resultMap, =, Maps]
[;, BufferedReader, reader, =, new, BufferedReader, (, new, StringReader, (, serializedMap, ), ), ;, BiMap, <, String, ,, String, >]
[., newHashMap, (, ), ;, BufferedReader, reader, =, new, BufferedReader, (, new, StringReader, (, serializedMap, ), ), ;, BiMap, <]
[;, BiMap, <, String, ,, String, >, currentSectionMap, =, null, ;, String, line, ;, int, lineIndex, =, 0, ;, try]
[), ;, BiMap, <, String, ,, String, >, currentSectionMap, =, null, ;, String, line, ;, int, lineIndex, =, 0, ;]
[), ), ;, BiMap, <, String, ,, String, >, currentSectionMap, =, null, ;, String, line, ;, int, lineIndex, =, 0]
[;, String, line, ;, int, lineIndex, =, 0, ;, try, {, while, (, (, line, =, reader, ., readLine, (]
[;, try, {, while, (, (, line, =, reader, ., readLine, (, ), ), !=, null, ), {, lineIndex, ++]
[), {, lineIndex, ++, ;, if, (, line, ., isEmpty, (, ), ), {, continue, ;, }, if, (, line]
[!=, null, ), {, lineIndex, ++, ;, if, (, line, ., isEmpty, (, ), ), {, continue, ;, }, if]
[=, reader, ., readLine, (, ), ), !=, null, ), {, lineIndex, ++, ;, if, (, line, ., isEmpty, (]
[), !=, null, ), {, lineIndex, ++, ;, if, (, line, ., isEmpty, (, ), ), {, continue, ;, }]
[., readLine, (, ), ), !=, null, ), {, lineIndex, ++, ;, if, (, line, ., isEmpty, (, ), )]
[), {, lineIndex, ++, ;, if, (, line, ., isEmpty, (, ), ), {, continue, ;, }, if, (, line]
[;, if, (, line, ., isEmpty, (, ), ), {, continue, ;, }, if, (, line, ., charAt, (, 0]
[++, ;, if, (, line, ., isEmpty, (, ), ), {, continue, ;, }, if, (, line, ., charAt, (]
[), {, continue, ;, }, if, (, line, ., charAt, (, 0, ), ==, '[', ), {, String, currentSection, =]
[., isEmpty, (, ), ), {, continue, ;, }, if, (, line, ., charAt, (, 0, ), ==, '[', )]
[), {, String, currentSection, =, line, ., substring, (, 1, ,, line, ., length, (, ), -, 1, ), ;]
[==, '[', ), {, String, currentSection, =, line, ., substring, (, 1, ,, line, ., length, (, ), -, 1]
[., charAt, (, 0, ), ==, '[', ), {, String, currentSection, =, line, ., substring, (, 1, ,, line, .]
[), ==, '[', ), {, String, currentSection, =, line, ., substring, (, 1, ,, line, ., length, (, ), -]
[), {, String, currentSection, =, line, ., substring, (, 1, ,, line, ., length, (, ), -, 1, ), ;]
[;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =, HashBiMap]
[., substring, (, 1, ,, line, ., length, (, ), -, 1, ), ;, currentSectionMap, =, resultMap, ., get, (]
[,, line, ., length, (, ), -, 1, ), ;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if]
[), ;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =]
[-, 1, ), ;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if, (, currentSectionMap, ==, null, ), {]
[., length, (, ), -, 1, ), ;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if, (, currentSectionMap]
[), ;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =]
[=, resultMap, ., get, (, currentSection, ), ;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =, HashBiMap, ., create]
[;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =, HashBiMap, ., create, (, ), ;, resultMap, ., put, (]
[., get, (, currentSection, ), ;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =, HashBiMap, ., create, (, )]
[), ;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =, HashBiMap, ., create, (, ), ;, resultMap, ., put]
[), {, currentSectionMap, =, HashBiMap, ., create, (, ), ;, resultMap, ., put, (, currentSection, ,, currentSectionMap, ), ;, }]
[==, null, ), {, currentSectionMap, =, HashBiMap, ., create, (, ), ;, resultMap, ., put, (, currentSection, ,, currentSectionMap, )]
[), {, currentSectionMap, =, HashBiMap, ., create, (, ), ;, resultMap, ., put, (, currentSection, ,, currentSectionMap, ), ;, }]
[=, HashBiMap, ., create, (, ), ;, resultMap, ., put, (, currentSection, ,, currentSectionMap, ), ;, }, else, {, reportInvalidLine]
[;, resultMap, ., put, (, currentSection, ,, currentSectionMap, ), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;]
[., create, (, ), ;, resultMap, ., put, (, currentSection, ,, currentSectionMap, ), ;, }, else, {, reportInvalidLine, (, line]
[;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return, Collections, ., emptyMap, (, ), ;, }, }]
[., put, (, currentSection, ,, currentSectionMap, ), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return, Collections]
[,, currentSectionMap, ), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return, Collections, ., emptyMap, (, )]
[), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return, Collections, ., emptyMap, (, ), ;, }]
[;, return, Collections, ., emptyMap, (, ), ;, }, }, else, {, int, split, =, line, ., indexOf, (, ':']
[,, lineIndex, ), ;, return, Collections, ., emptyMap, (, ), ;, }, }, else, {, int, split, =, line, .]
[), ;, return, Collections, ., emptyMap, (, ), ;, }, }, else, {, int, split, =, line, ., indexOf, (]
[;, }, }, else, {, int, split, =, line, ., indexOf, (, ':', ), ;, if, (, split, !=, -]
[., emptyMap, (, ), ;, }, }, else, {, int, split, =, line, ., indexOf, (, ':', ), ;, if]
[;, if, (, split, !=, -, 1, ), {, String, name, =, line, ., substring, (, 0, ,, split, )]
[., indexOf, (, ':', ), ;, if, (, split, !=, -, 1, ), {, String, name, =, line, ., substring]
[), ;, if, (, split, !=, -, 1, ), {, String, name, =, line, ., substring, (, 0, ,, split]
[), {, String, name, =, line, ., substring, (, 0, ,, split, ), ;, String, location, =, line, ., substring]
[!=, -, 1, ), {, String, name, =, line, ., substring, (, 0, ,, split, ), ;, String, location, =]
[), {, String, name, =, line, ., substring, (, 0, ,, split, ), ;, String, location, =, line, ., substring]
[), {, String, name, =, line, ., substring, (, 0, ,, split, ), ;, String, location, =, line, ., substring]
[;, String, location, =, line, ., substring, (, split, +, 1, ,, line, ., length, (, ), ), ;, currentSectionMap]
[., substring, (, 0, ,, split, ), ;, String, location, =, line, ., substring, (, split, +, 1, ,, line]
[,, split, ), ;, String, location, =, line, ., substring, (, split, +, 1, ,, line, ., length, (, )]
[), ;, String, location, =, line, ., substring, (, split, +, 1, ,, line, ., length, (, ), ), ;]
[;, currentSectionMap, ., put, (, name, ,, location, ), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;]
[., substring, (, split, +, 1, ,, line, ., length, (, ), ), ;, currentSectionMap, ., put, (, name, ,]
[,, line, ., length, (, ), ), ;, currentSectionMap, ., put, (, name, ,, location, ), ;, }, else, {]
[+, 1, ,, line, ., length, (, ), ), ;, currentSectionMap, ., put, (, name, ,, location, ), ;, }]
[,, line, ., length, (, ), ), ;, currentSectionMap, ., put, (, name, ,, location, ), ;, }, else, {]
[), ;, currentSectionMap, ., put, (, name, ,, location, ), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, )]
[., length, (, ), ), ;, currentSectionMap, ., put, (, name, ,, location, ), ;, }, else, {, reportInvalidLine, (]
[;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return, Collections, ., emptyMap, (, ), ;, }, }]
[., put, (, name, ,, location, ), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return, Collections]
[,, location, ), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return, Collections, ., emptyMap, (, )]
[), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return, Collections, ., emptyMap, (, ), ;, }]
[;, return, Collections, ., emptyMap, (, ), ;, }, }, }, }, catch, (, IOException, e, ), {, JSError, .]
[,, lineIndex, ), ;, return, Collections, ., emptyMap, (, ), ;, }, }, }, }, catch, (, IOException, e, )]
[), ;, return, Collections, ., emptyMap, (, ), ;, }, }, }, }, catch, (, IOException, e, ), {, JSError]
[;, }, }, }, }, catch, (, IOException, e, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,, e, ., getMessage]
[., emptyMap, (, ), ;, }, }, }, }, catch, (, IOException, e, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING]
[;, }, return, resultMap, ;, }, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {, JSError, ., make]
[., make, (, INVALID_GENERATOR_ID_MAPPING, ,, e, ., getMessage, (, ), ), ;, }, return, resultMap, ;, }, private, void, reportInvalidLine]
[,, e, ., getMessage, (, ), ), ;, }, return, resultMap, ;, }, private, void, reportInvalidLine, (, String, line, ,]
[), ;, }, return, resultMap, ;, }, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {, JSError, .]
[., getMessage, (, ), ), ;, }, return, resultMap, ;, }, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex]
[;, }, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,, "line("]
[;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {, Preconditions, ., checkState, (, n, ., isString, (]
[., make, (, INVALID_GENERATOR_ID_MAPPING, ,, "line(", +, line, +, "): ", +, lineIndex, ), ;, }, String, getIdForGeneratorNode, (, boolean, consistent]
[,, "line(", +, line, +, "): ", +, lineIndex, ), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, )]
[), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {, Preconditions, ., checkState, (, n, ., isString]
[+, lineIndex, ), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {, Preconditions, ., checkState, (, n]
[+, "): ", +, lineIndex, ), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {, Preconditions, ., checkState]
[+, line, +, "): ", +, lineIndex, ), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {, Preconditions]
[+, "): ", +, lineIndex, ), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {, Preconditions, ., checkState]
[+, lineIndex, ), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {, Preconditions, ., checkState, (, n]
[), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {, Preconditions, ., checkState, (, n, ., isString]
[;, if, (, consistent, ), {, return, n, ., getString, (, ), ;, }, else, {, return, n, ., getSourceFileName]
[., checkState, (, n, ., isString, (, ), ), ;, if, (, consistent, ), {, return, n, ., getString, (]
[), ;, if, (, consistent, ), {, return, n, ., getString, (, ), ;, }, else, {, return, n, .]
[., isString, (, ), ), ;, if, (, consistent, ), {, return, n, ., getString, (, ), ;, }, else]
[), {, return, n, ., getString, (, ), ;, }, else, {, return, n, ., getSourceFileName, (, ), +, ':']
[;, }, else, {, return, n, ., getSourceFileName, (, ), +, ':', +, n, ., getLineno, (, ), +, ":"]
[., getString, (, ), ;, }, else, {, return, n, ., getSourceFileName, (, ), +, ':', +, n, ., getLineno]
[;, }, }, }]
[+, n, ., getCharno, (, ), ;, }, }, }]
[+, ":", +, n, ., getCharno, (, ), ;, }, }, }]
[+, n, ., getLineno, (, ), +, ":", +, n, ., getCharno, (, ), ;, }, }, }]
[+, ':', +, n, ., getLineno, (, ), +, ":", +, n, ., getCharno, (, ), ;, }, }, }]
[., getSourceFileName, (, ), +, ':', +, n, ., getLineno, (, ), +, ":", +, n, ., getCharno, (, )]
[+, n, ., getLineno, (, ), +, ":", +, n, ., getCharno, (, ), ;, }, }, }]
[+, ":", +, n, ., getCharno, (, ), ;, }, }, }]
[., getLineno, (, ), +, ":", +, n, ., getCharno, (, ), ;, }, }, }]
[+, n, ., getCharno, (, ), ;, }, }, }]
[;, }, }, }]
[., getCharno, (, ), ;, }, }, }]
