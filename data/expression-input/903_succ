[=, null, ;, plus, =, null, ;, minus, =, null, ;, parent, =, null, ;, attribute, =, null, ;, }]
[;, plus, =, null, ;, minus, =, null, ;, parent, =, null, ;, attribute, =, null, ;, }, public, BSPTree]
[=, null, ;, minus, =, null, ;, parent, =, null, ;, attribute, =, null, ;, }, public, BSPTree, (, final]
[;, minus, =, null, ;, parent, =, null, ;, attribute, =, null, ;, }, public, BSPTree, (, final, Object, attribute]
[=, null, ;, parent, =, null, ;, attribute, =, null, ;, }, public, BSPTree, (, final, Object, attribute, ), {]
[;, parent, =, null, ;, attribute, =, null, ;, }, public, BSPTree, (, final, Object, attribute, ), {, cut, =]
[=, null, ;, attribute, =, null, ;, }, public, BSPTree, (, final, Object, attribute, ), {, cut, =, null, ;]
[;, attribute, =, null, ;, }, public, BSPTree, (, final, Object, attribute, ), {, cut, =, null, ;, plus, =]
[=, null, ;, }, public, BSPTree, (, final, Object, attribute, ), {, cut, =, null, ;, plus, =, null, ;]
[;, }, public, BSPTree, (, final, Object, attribute, ), {, cut, =, null, ;, plus, =, null, ;, minus, =]
[=, null, ;, plus, =, null, ;, minus, =, null, ;, parent, =, null, ;, this, ., attribute, =, attribute]
[;, plus, =, null, ;, minus, =, null, ;, parent, =, null, ;, this, ., attribute, =, attribute, ;, }]
[=, null, ;, minus, =, null, ;, parent, =, null, ;, this, ., attribute, =, attribute, ;, }, public, BSPTree]
[;, minus, =, null, ;, parent, =, null, ;, this, ., attribute, =, attribute, ;, }, public, BSPTree, (, final]
[=, null, ;, parent, =, null, ;, this, ., attribute, =, attribute, ;, }, public, BSPTree, (, final, SubHyperplane, <]
[;, parent, =, null, ;, this, ., attribute, =, attribute, ;, }, public, BSPTree, (, final, SubHyperplane, <, S, >]
[=, null, ;, this, ., attribute, =, attribute, ;, }, public, BSPTree, (, final, SubHyperplane, <, S, >, cut, ,]
[;, this, ., attribute, =, attribute, ;, }, public, BSPTree, (, final, SubHyperplane, <, S, >, cut, ,, final, BSPTree]
[=, attribute, ;, }, public, BSPTree, (, final, SubHyperplane, <, S, >, cut, ,, final, BSPTree, <, S, >, plus]
[., attribute, =, attribute, ;, }, public, BSPTree, (, final, SubHyperplane, <, S, >, cut, ,, final, BSPTree, <, S]
[;, }, public, BSPTree, (, final, SubHyperplane, <, S, >, cut, ,, final, BSPTree, <, S, >, plus, ,, final]
[=, cut, ;, this, ., plus, =, plus, ;, this, ., minus, =, minus, ;, this, ., parent, =, null]
[., cut, =, cut, ;, this, ., plus, =, plus, ;, this, ., minus, =, minus, ;, this, ., parent]
[;, this, ., plus, =, plus, ;, this, ., minus, =, minus, ;, this, ., parent, =, null, ;, this]
[=, plus, ;, this, ., minus, =, minus, ;, this, ., parent, =, null, ;, this, ., attribute, =, attribute]
[., plus, =, plus, ;, this, ., minus, =, minus, ;, this, ., parent, =, null, ;, this, ., attribute]
[;, this, ., minus, =, minus, ;, this, ., parent, =, null, ;, this, ., attribute, =, attribute, ;, plus]
[=, minus, ;, this, ., parent, =, null, ;, this, ., attribute, =, attribute, ;, plus, ., parent, =, this]
[., minus, =, minus, ;, this, ., parent, =, null, ;, this, ., attribute, =, attribute, ;, plus, ., parent]
[;, this, ., parent, =, null, ;, this, ., attribute, =, attribute, ;, plus, ., parent, =, this, ;, minus]
[=, null, ;, this, ., attribute, =, attribute, ;, plus, ., parent, =, this, ;, minus, ., parent, =, this]
[., parent, =, null, ;, this, ., attribute, =, attribute, ;, plus, ., parent, =, this, ;, minus, ., parent]
[;, this, ., attribute, =, attribute, ;, plus, ., parent, =, this, ;, minus, ., parent, =, this, ;, }]
[=, attribute, ;, plus, ., parent, =, this, ;, minus, ., parent, =, this, ;, }, public, boolean, insertCut, (]
[., attribute, =, attribute, ;, plus, ., parent, =, this, ;, minus, ., parent, =, this, ;, }, public, boolean]
[;, plus, ., parent, =, this, ;, minus, ., parent, =, this, ;, }, public, boolean, insertCut, (, final, Hyperplane]
[=, this, ;, minus, ., parent, =, this, ;, }, public, boolean, insertCut, (, final, Hyperplane, <, S, >, hyperplane]
[., parent, =, this, ;, minus, ., parent, =, this, ;, }, public, boolean, insertCut, (, final, Hyperplane, <, S]
[;, minus, ., parent, =, this, ;, }, public, boolean, insertCut, (, final, Hyperplane, <, S, >, hyperplane, ), {]
[=, this, ;, }, public, boolean, insertCut, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=]
[., parent, =, this, ;, }, public, boolean, insertCut, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (]
[;, }, public, boolean, insertCut, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, )]
[), {, plus, ., parent, =, null, ;, minus, ., parent, =, null, ;, }, final, SubHyperplane, <, S, >]
[!=, null, ), {, plus, ., parent, =, null, ;, minus, ., parent, =, null, ;, }, final, SubHyperplane, <]
[), {, plus, ., parent, =, null, ;, minus, ., parent, =, null, ;, }, final, SubHyperplane, <, S, >]
[=, null, ;, minus, ., parent, =, null, ;, }, final, SubHyperplane, <, S, >, chopped, =, fitToCell, (, hyperplane]
[., parent, =, null, ;, minus, ., parent, =, null, ;, }, final, SubHyperplane, <, S, >, chopped, =, fitToCell]
[;, minus, ., parent, =, null, ;, }, final, SubHyperplane, <, S, >, chopped, =, fitToCell, (, hyperplane, ., wholeHyperplane]
[=, null, ;, }, final, SubHyperplane, <, S, >, chopped, =, fitToCell, (, hyperplane, ., wholeHyperplane, (, ), ), ;]
[., parent, =, null, ;, }, final, SubHyperplane, <, S, >, chopped, =, fitToCell, (, hyperplane, ., wholeHyperplane, (, )]
[;, }, final, SubHyperplane, <, S, >, chopped, =, fitToCell, (, hyperplane, ., wholeHyperplane, (, ), ), ;, if, (]
[;, if, (, chopped, ==, null, ||, chopped, ., isEmpty, (, ), ), {, cut, =, null, ;, plus, =]
[), ;, if, (, chopped, ==, null, ||, chopped, ., isEmpty, (, ), ), {, cut, =, null, ;, plus]
[., wholeHyperplane, (, ), ), ;, if, (, chopped, ==, null, ||, chopped, ., isEmpty, (, ), ), {, cut]
[), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, return, false, ;, }, cut, =]
[||, chopped, ., isEmpty, (, ), ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;]
[==, null, ||, chopped, ., isEmpty, (, ), ), {, cut, =, null, ;, plus, =, null, ;, minus, =]
[||, chopped, ., isEmpty, (, ), ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;]
[), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, return, false, ;, }, cut, =]
[., isEmpty, (, ), ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, return, false]
[=, null, ;, plus, =, null, ;, minus, =, null, ;, return, false, ;, }, cut, =, chopped, ;, plus]
[;, plus, =, null, ;, minus, =, null, ;, return, false, ;, }, cut, =, chopped, ;, plus, =, new]
[=, null, ;, minus, =, null, ;, return, false, ;, }, cut, =, chopped, ;, plus, =, new, BSPTree, <]
[;, minus, =, null, ;, return, false, ;, }, cut, =, chopped, ;, plus, =, new, BSPTree, <, S, >]
[=, null, ;, return, false, ;, }, cut, =, chopped, ;, plus, =, new, BSPTree, <, S, >, (, )]
[;, return, false, ;, }, cut, =, chopped, ;, plus, =, new, BSPTree, <, S, >, (, ), ;, plus]
[;, }, cut, =, chopped, ;, plus, =, new, BSPTree, <, S, >, (, ), ;, plus, ., parent, =]
[=, chopped, ;, plus, =, new, BSPTree, <, S, >, (, ), ;, plus, ., parent, =, this, ;, minus]
[;, plus, =, new, BSPTree, <, S, >, (, ), ;, plus, ., parent, =, this, ;, minus, =, new]
[=, new, BSPTree, <, S, >, (, ), ;, plus, ., parent, =, this, ;, minus, =, new, BSPTree, <]
[;, plus, ., parent, =, this, ;, minus, =, new, BSPTree, <, S, >, (, ), ;, minus, ., parent]
[=, this, ;, minus, =, new, BSPTree, <, S, >, (, ), ;, minus, ., parent, =, this, ;, return]
[., parent, =, this, ;, minus, =, new, BSPTree, <, S, >, (, ), ;, minus, ., parent, =, this]
[;, minus, =, new, BSPTree, <, S, >, (, ), ;, minus, ., parent, =, this, ;, return, true, ;]
[=, new, BSPTree, <, S, >, (, ), ;, minus, ., parent, =, this, ;, return, true, ;, }, public]
[;, minus, ., parent, =, this, ;, return, true, ;, }, public, BSPTree, <, S, >, copySelf, (, ), {]
[=, this, ;, return, true, ;, }, public, BSPTree, <, S, >, copySelf, (, ), {, if, (, cut, ==]
[., parent, =, this, ;, return, true, ;, }, public, BSPTree, <, S, >, copySelf, (, ), {, if, (]
[;, return, true, ;, }, public, BSPTree, <, S, >, copySelf, (, ), {, if, (, cut, ==, null, )]
[;, }, public, BSPTree, <, S, >, copySelf, (, ), {, if, (, cut, ==, null, ), {, return, new]
[), {, return, new, BSPTree, <, S, >, (, attribute, ), ;, }, return, new, BSPTree, <, S, >, (]
[==, null, ), {, return, new, BSPTree, <, S, >, (, attribute, ), ;, }, return, new, BSPTree, <, S]
[), {, return, new, BSPTree, <, S, >, (, attribute, ), ;, }, return, new, BSPTree, <, S, >, (]
[;, }, return, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, )]
[), ;, }, return, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (]
[;, }, public, SubHyperplane, <, S, >, getCut, (, ), {, return, cut, ;, }, public, BSPTree, <, S, >]
[,, plus, ., copySelf, (, ), ,, minus, ., copySelf, (, ), ,, attribute, ), ;, }, public, SubHyperplane, <]
[., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, minus, ., copySelf, (, ), ,, attribute, ), ;]
[,, minus, ., copySelf, (, ), ,, attribute, ), ;, }, public, SubHyperplane, <, S, >, getCut, (, ), {]
[., copySelf, (, ), ,, minus, ., copySelf, (, ), ,, attribute, ), ;, }, public, SubHyperplane, <, S, >]
[,, attribute, ), ;, }, public, SubHyperplane, <, S, >, getCut, (, ), {, return, cut, ;, }, public, BSPTree]
[., copySelf, (, ), ,, attribute, ), ;, }, public, SubHyperplane, <, S, >, getCut, (, ), {, return, cut]
[), ;, }, public, SubHyperplane, <, S, >, getCut, (, ), {, return, cut, ;, }, public, BSPTree, <, S]
[;, }, public, BSPTree, <, S, >, getPlus, (, ), {, return, plus, ;, }, public, BSPTree, <, S, >]
[;, }, public, BSPTree, <, S, >, getMinus, (, ), {, return, minus, ;, }, public, BSPTree, <, S, >]
[;, }, public, BSPTree, <, S, >, getParent, (, ), {, return, parent, ;, }, public, void, setAttribute, (, final]
[;, }, public, void, setAttribute, (, final, Object, attribute, ), {, this, ., attribute, =, attribute, ;, }, public, Object]
[=, attribute, ;, }, public, Object, getAttribute, (, ), {, return, attribute, ;, }, public, void, visit, (, final, BSPTreeVisitor]
[., attribute, =, attribute, ;, }, public, Object, getAttribute, (, ), {, return, attribute, ;, }, public, void, visit, (]
[;, }, public, Object, getAttribute, (, ), {, return, attribute, ;, }, public, void, visit, (, final, BSPTreeVisitor, <, S]
[;, }, public, void, visit, (, final, BSPTreeVisitor, <, S, >, visitor, ), {, if, (, cut, ==, null, )]
[), {, visitor, ., visitLeafNode, (, this, ), ;, }, else, {, switch, (, visitor, ., visitOrder, (, this, )]
[==, null, ), {, visitor, ., visitLeafNode, (, this, ), ;, }, else, {, switch, (, visitor, ., visitOrder, (]
[), {, visitor, ., visitLeafNode, (, this, ), ;, }, else, {, switch, (, visitor, ., visitOrder, (, this, )]
[;, }, else, {, switch, (, visitor, ., visitOrder, (, this, ), ), {, case, PLUS_MINUS_SUB, :, plus, ., visit]
[., visitLeafNode, (, this, ), ;, }, else, {, switch, (, visitor, ., visitOrder, (, this, ), ), {, case]
[), ;, }, else, {, switch, (, visitor, ., visitOrder, (, this, ), ), {, case, PLUS_MINUS_SUB, :, plus, .]
[), {, case, PLUS_MINUS_SUB, :, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;, visitor]
[., visitOrder, (, this, ), ), {, case, PLUS_MINUS_SUB, :, plus, ., visit, (, visitor, ), ;, minus, ., visit]
[), ), {, case, PLUS_MINUS_SUB, :, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;]
[:, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this]
[;, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, PLUS_SUB_MINUS, :]
[., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;]
[), ;, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, PLUS_SUB_MINUS]
[;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, PLUS_SUB_MINUS, :, plus, ., visit, (, visitor, ), ;]
[., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, PLUS_SUB_MINUS, :, plus, .]
[), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, PLUS_SUB_MINUS, :, plus, ., visit, (, visitor, )]
[;, break, ;, case, PLUS_SUB_MINUS, :, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;]
[., visitInternalNode, (, this, ), ;, break, ;, case, PLUS_SUB_MINUS, :, plus, ., visit, (, visitor, ), ;, visitor, .]
[), ;, break, ;, case, PLUS_SUB_MINUS, :, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, )]
[:, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor]
[;, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB, :]
[., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;]
[), ;, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB]
[;, minus, ., visit, (, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB, :, minus, ., visit, (, visitor, ), ;]
[., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB, :, minus, .]
[), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB, :, minus, ., visit, (, visitor, )]
[;, break, ;, case, MINUS_PLUS_SUB, :, minus, ., visit, (, visitor, ), ;, plus, ., visit, (, visitor, ), ;]
[., visit, (, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB, :, minus, ., visit, (, visitor, ), ;, plus, .]
[), ;, break, ;, case, MINUS_PLUS_SUB, :, minus, ., visit, (, visitor, ), ;, plus, ., visit, (, visitor, )]
[:, minus, ., visit, (, visitor, ), ;, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this]
[;, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, MINUS_SUB_PLUS, :]
[., visit, (, visitor, ), ;, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;]
[), ;, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, MINUS_SUB_PLUS]
[;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, MINUS_SUB_PLUS, :, minus, ., visit, (, visitor, ), ;]
[., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, MINUS_SUB_PLUS, :, minus, .]
[), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, MINUS_SUB_PLUS, :, minus, ., visit, (, visitor, )]
[;, break, ;, case, MINUS_SUB_PLUS, :, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;]
[., visitInternalNode, (, this, ), ;, break, ;, case, MINUS_SUB_PLUS, :, minus, ., visit, (, visitor, ), ;, visitor, .]
[), ;, break, ;, case, MINUS_SUB_PLUS, :, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, )]
[:, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor]
[;, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS, :]
[., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;]
[), ;, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS]
[;, plus, ., visit, (, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (, this, ), ;]
[., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS, :, visitor, .]
[), ;, plus, ., visit, (, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (, this, )]
[;, break, ;, case, SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;]
[., visit, (, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (, this, ), ;, plus, .]
[), ;, break, ;, case, SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, )]
[:, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor]
[;, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS, :]
[., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;]
[), ;, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS]
[;, minus, ., visit, (, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (, this, ), ;]
[., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS, :, visitor, .]
[), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (, this, )]
[;, break, ;, case, SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;]
[., visit, (, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (, this, ), ;, minus, .]
[), ;, break, ;, case, SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, )]
[:, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;, plus, ., visit, (, visitor]
[;, minus, ., visit, (, visitor, ), ;, plus, ., visit, (, visitor, ), ;, break, ;, default, :, throw]
[., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;, plus, ., visit, (, visitor, ), ;]
[), ;, minus, ., visit, (, visitor, ), ;, plus, ., visit, (, visitor, ), ;, break, ;, default, :]
[;, plus, ., visit, (, visitor, ), ;, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }]
[., visit, (, visitor, ), ;, plus, ., visit, (, visitor, ), ;, break, ;, default, :, throw, new, MathInternalError]
[), ;, plus, ., visit, (, visitor, ), ;, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }]
[;, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, private, SubHyperplane, <, S, >, fitToCell]
[., visit, (, visitor, ), ;, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, private]
[), ;, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, private, SubHyperplane, <, S, >]
[;, }, }, }, private, SubHyperplane, <, S, >, fitToCell, (, final, SubHyperplane, <, S, >, sub, ), {, SubHyperplane]
[;, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=, null, ;, tree, =, tree]
[;, tree, ., parent, !=, null, ;, tree, =, tree, ., parent, ), {, if, (, tree, ==, tree, .]
[;, tree, =, tree, ., parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s]
[!=, null, ;, tree, =, tree, ., parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, )]
[., parent, !=, null, ;, tree, =, tree, ., parent, ), {, if, (, tree, ==, tree, ., parent, .]
[;, tree, =, tree, ., parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s]
[=, tree, ., parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s, =, s]
[), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s, =, s, ., split, (, tree]
[., parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s, =, s, ., split]
[), {, s, =, s, ., split, (, tree, ., parent, ., cut, ., getHyperplane, (, ), ), ., getPlus]
[==, tree, ., parent, ., plus, ), {, s, =, s, ., split, (, tree, ., parent, ., cut, .]
[), {, s, =, s, ., split, (, tree, ., parent, ., cut, ., getHyperplane, (, ), ), ., getPlus]
[., plus, ), {, s, =, s, ., split, (, tree, ., parent, ., cut, ., getHyperplane, (, ), )]
[., parent, ., plus, ), {, s, =, s, ., split, (, tree, ., parent, ., cut, ., getHyperplane, (]
[=, s, ., split, (, tree, ., parent, ., cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;]
[;, }, else, {, s, =, s, ., split, (, tree, ., parent, ., cut, ., getHyperplane, (, ), )]
[., getPlus, (, ), ;, }, else, {, s, =, s, ., split, (, tree, ., parent, ., cut, .]
[., split, (, tree, ., parent, ., cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else]
[), ., getPlus, (, ), ;, }, else, {, s, =, s, ., split, (, tree, ., parent, ., cut]
[., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else, {, s, =, s, ., split, (, tree]
[., cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else, {, s, =, s, ., split]
[., parent, ., cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else, {, s, =, s]
[=, s, ., split, (, tree, ., parent, ., cut, ., getHyperplane, (, ), ), ., getMinus, (, ), ;]
[;, }, }, return, s, ;, }, public, BSPTree, <, S, >, getCell, (, final, Vector, <, S, >, point]
[., getMinus, (, ), ;, }, }, return, s, ;, }, public, BSPTree, <, S, >, getCell, (, final, Vector]
[., split, (, tree, ., parent, ., cut, ., getHyperplane, (, ), ), ., getMinus, (, ), ;, }, }]
[), ., getMinus, (, ), ;, }, }, return, s, ;, }, public, BSPTree, <, S, >, getCell, (, final]
[., getHyperplane, (, ), ), ., getMinus, (, ), ;, }, }, return, s, ;, }, public, BSPTree, <, S]
[., cut, ., getHyperplane, (, ), ), ., getMinus, (, ), ;, }, }, return, s, ;, }, public, BSPTree]
[., parent, ., cut, ., getHyperplane, (, ), ), ., getMinus, (, ), ;, }, }, return, s, ;, }]
[;, }, public, BSPTree, <, S, >, getCell, (, final, Vector, <, S, >, point, ), {, if, (, cut]
[), {, return, this, ;, }, final, double, offset, =, cut, ., getHyperplane, (, ), ., getOffset, (, point, )]
[==, null, ), {, return, this, ;, }, final, double, offset, =, cut, ., getHyperplane, (, ), ., getOffset, (]
[), {, return, this, ;, }, final, double, offset, =, cut, ., getHyperplane, (, ), ., getOffset, (, point, )]
[;, }, final, double, offset, =, cut, ., getHyperplane, (, ), ., getOffset, (, point, ), ;, if, (, FastMath]
[;, if, (, FastMath, ., abs, (, offset, ), <, 1.0e-10, ), {, return, this, ;, }, else, if, (]
[., getOffset, (, point, ), ;, if, (, FastMath, ., abs, (, offset, ), <, 1.0e-10, ), {, return, this]
[., getHyperplane, (, ), ., getOffset, (, point, ), ;, if, (, FastMath, ., abs, (, offset, ), <, 1.0e-10]
[), ;, if, (, FastMath, ., abs, (, offset, ), <, 1.0e-10, ), {, return, this, ;, }, else, if]
[), {, return, this, ;, }, else, if, (, offset, <=, 0, ), {, return, minus, ., getCell, (, point]
[<, 1.0e-10, ), {, return, this, ;, }, else, if, (, offset, <=, 0, ), {, return, minus, ., getCell]
[., abs, (, offset, ), <, 1.0e-10, ), {, return, this, ;, }, else, if, (, offset, <=, 0, )]
[), <, 1.0e-10, ), {, return, this, ;, }, else, if, (, offset, <=, 0, ), {, return, minus, .]
[), {, return, this, ;, }, else, if, (, offset, <=, 0, ), {, return, minus, ., getCell, (, point]
[;, }, else, if, (, offset, <=, 0, ), {, return, minus, ., getCell, (, point, ), ;, }, else]
[), {, return, minus, ., getCell, (, point, ), ;, }, else, {, return, plus, ., getCell, (, point, )]
[<=, 0, ), {, return, minus, ., getCell, (, point, ), ;, }, else, {, return, plus, ., getCell, (]
[), {, return, minus, ., getCell, (, point, ), ;, }, else, {, return, plus, ., getCell, (, point, )]
[;, }, else, {, return, plus, ., getCell, (, point, ), ;, }, }, private, void, condense, (, ), {]
[., getCell, (, point, ), ;, }, else, {, return, plus, ., getCell, (, point, ), ;, }, }, private]
[), ;, }, else, {, return, plus, ., getCell, (, point, ), ;, }, }, private, void, condense, (, )]
[;, }, }, private, void, condense, (, ), {, if, (, (, cut, !=, null, ), &&, (, plus, .]
[., getCell, (, point, ), ;, }, }, private, void, condense, (, ), {, if, (, (, cut, !=, null]
[), ;, }, }, private, void, condense, (, ), {, if, (, (, cut, !=, null, ), &&, (, plus]
[), {, attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :, plus, ., attribute, ;]
[&&, (, (, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), ), ||]
[&&, (, minus, ., cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==, null, ), &&, (]
[&&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (, (, (]
[), &&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (, (]
[!=, null, ), &&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&]
[), &&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (, (]
[&&, (, minus, ., cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==, null, ), &&, (]
[), &&, (, minus, ., cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==, null, ), &&]
[==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==, null]
[., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (, (, (, plus, ., attribute]
[), &&, (, minus, ., cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==, null, ), &&]
[&&, (, (, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), ), ||]
[), &&, (, (, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), )]
[==, null, ), &&, (, (, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null]
[., cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute]
[), &&, (, (, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), )]
[), {, attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :, plus, ., attribute, ;]
[), ), {, attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :, plus, ., attribute]
[||, (, (, plus, ., attribute, !=, null, ), &&, plus, ., attribute, ., equals, (, minus, ., attribute, )]
[), ||, (, (, plus, ., attribute, !=, null, ), &&, plus, ., attribute, ., equals, (, minus, ., attribute]
[&&, (, minus, ., attribute, ==, null, ), ), ||, (, (, plus, ., attribute, !=, null, ), &&, plus]
[), &&, (, minus, ., attribute, ==, null, ), ), ||, (, (, plus, ., attribute, !=, null, ), &&]
[==, null, ), &&, (, minus, ., attribute, ==, null, ), ), ||, (, (, plus, ., attribute, !=, null]
[., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), ), ||, (, (, plus, ., attribute]
[), &&, (, minus, ., attribute, ==, null, ), ), ||, (, (, plus, ., attribute, !=, null, ), &&]
[), ||, (, (, plus, ., attribute, !=, null, ), &&, plus, ., attribute, ., equals, (, minus, ., attribute]
[), ), ||, (, (, plus, ., attribute, !=, null, ), &&, plus, ., attribute, ., equals, (, minus, .]
[==, null, ), ), ||, (, (, plus, ., attribute, !=, null, ), &&, plus, ., attribute, ., equals, (]
[., attribute, ==, null, ), ), ||, (, (, plus, ., attribute, !=, null, ), &&, plus, ., attribute, .]
[), ), ||, (, (, plus, ., attribute, !=, null, ), &&, plus, ., attribute, ., equals, (, minus, .]
[), ), {, attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :, plus, ., attribute]
[), ), ), {, attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :, plus, .]
[&&, plus, ., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =, (, plus, .]
[), &&, plus, ., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =, (, plus]
[!=, null, ), &&, plus, ., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =]
[., attribute, !=, null, ), &&, plus, ., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {]
[), &&, plus, ., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =, (, plus]
[), ), ), {, attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :, plus, .]
[., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =, (, plus, ., attribute, ==, null, )]
[., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =, (, plus, ., attribute, ==]
[), ), ), ), {, attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :, plus]
[., attribute, ), ), ), ), {, attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute]
[=, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :, plus, ., attribute, ;, cut, =, null]
[;, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, }, }, public, BSPTree, <, S, >]
[?, minus, ., attribute, :, plus, ., attribute, ;, cut, =, null, ;, plus, =, null, ;, minus, =, null]
[), ?, minus, ., attribute, :, plus, ., attribute, ;, cut, =, null, ;, plus, =, null, ;, minus, =]
[==, null, ), ?, minus, ., attribute, :, plus, ., attribute, ;, cut, =, null, ;, plus, =, null, ;]
[., attribute, ==, null, ), ?, minus, ., attribute, :, plus, ., attribute, ;, cut, =, null, ;, plus, =]
[), ?, minus, ., attribute, :, plus, ., attribute, ;, cut, =, null, ;, plus, =, null, ;, minus, =]
[:, plus, ., attribute, ;, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, }, }, public]
[., attribute, :, plus, ., attribute, ;, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, }]
[;, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, }, }, public, BSPTree, <, S, >]
[., attribute, ;, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, }, }, public, BSPTree, <]
[=, null, ;, plus, =, null, ;, minus, =, null, ;, }, }, public, BSPTree, <, S, >, merge, (]
[;, plus, =, null, ;, minus, =, null, ;, }, }, public, BSPTree, <, S, >, merge, (, final, BSPTree]
[=, null, ;, minus, =, null, ;, }, }, public, BSPTree, <, S, >, merge, (, final, BSPTree, <, S]
[;, minus, =, null, ;, }, }, public, BSPTree, <, S, >, merge, (, final, BSPTree, <, S, >, tree]
[=, null, ;, }, }, public, BSPTree, <, S, >, merge, (, final, BSPTree, <, S, >, tree, ,, final]
[;, }, }, public, BSPTree, <, S, >, merge, (, final, BSPTree, <, S, >, tree, ,, final, LeafMerger, <]
[;, }, private, BSPTree, <, S, >, merge, (, final, BSPTree, <, S, >, tree, ,, final, LeafMerger, <, S]
[,, leafMerger, ,, null, ,, false, ), ;, }, private, BSPTree, <, S, >, merge, (, final, BSPTree, <, S]
[,, null, ,, false, ), ;, }, private, BSPTree, <, S, >, merge, (, final, BSPTree, <, S, >, tree]
[,, false, ), ;, }, private, BSPTree, <, S, >, merge, (, final, BSPTree, <, S, >, tree, ,, final]
[), ;, }, private, BSPTree, <, S, >, merge, (, final, BSPTree, <, S, >, tree, ,, final, LeafMerger, <]
[), {, return, leafMerger, ., merge, (, this, ,, tree, ,, parentTree, ,, isPlusChild, ,, true, ), ;, }, else]
[==, null, ), {, return, leafMerger, ., merge, (, this, ,, tree, ,, parentTree, ,, isPlusChild, ,, true, ), ;]
[), {, return, leafMerger, ., merge, (, this, ,, tree, ,, parentTree, ,, isPlusChild, ,, true, ), ;, }, else]
[;, }, else, if, (, tree, ., cut, ==, null, ), {, return, leafMerger, ., merge, (, tree, ,, this]
[., merge, (, this, ,, tree, ,, parentTree, ,, isPlusChild, ,, true, ), ;, }, else, if, (, tree, .]
[,, tree, ,, parentTree, ,, isPlusChild, ,, true, ), ;, }, else, if, (, tree, ., cut, ==, null, )]
[,, parentTree, ,, isPlusChild, ,, true, ), ;, }, else, if, (, tree, ., cut, ==, null, ), {, return]
[,, isPlusChild, ,, true, ), ;, }, else, if, (, tree, ., cut, ==, null, ), {, return, leafMerger, .]
[,, true, ), ;, }, else, if, (, tree, ., cut, ==, null, ), {, return, leafMerger, ., merge, (]
[), ;, }, else, if, (, tree, ., cut, ==, null, ), {, return, leafMerger, ., merge, (, tree, ,]
[), {, return, leafMerger, ., merge, (, tree, ,, this, ,, parentTree, ,, isPlusChild, ,, false, ), ;, }, else]
[==, null, ), {, return, leafMerger, ., merge, (, tree, ,, this, ,, parentTree, ,, isPlusChild, ,, false, ), ;]
[., cut, ==, null, ), {, return, leafMerger, ., merge, (, tree, ,, this, ,, parentTree, ,, isPlusChild, ,, false]
[), {, return, leafMerger, ., merge, (, tree, ,, this, ,, parentTree, ,, isPlusChild, ,, false, ), ;, }, else]
[;, }, else, {, final, BSPTree, <, S, >, merged, =, tree, ., split, (, cut, ), ;, if, (]
[., merge, (, tree, ,, this, ,, parentTree, ,, isPlusChild, ,, false, ), ;, }, else, {, final, BSPTree, <]
[,, this, ,, parentTree, ,, isPlusChild, ,, false, ), ;, }, else, {, final, BSPTree, <, S, >, merged, =]
[,, parentTree, ,, isPlusChild, ,, false, ), ;, }, else, {, final, BSPTree, <, S, >, merged, =, tree, .]
[,, isPlusChild, ,, false, ), ;, }, else, {, final, BSPTree, <, S, >, merged, =, tree, ., split, (]
[,, false, ), ;, }, else, {, final, BSPTree, <, S, >, merged, =, tree, ., split, (, cut, )]
[), ;, }, else, {, final, BSPTree, <, S, >, merged, =, tree, ., split, (, cut, ), ;, if]
[;, if, (, parentTree, !=, null, ), {, merged, ., parent, =, parentTree, ;, if, (, isPlusChild, ), {, parentTree]
[., split, (, cut, ), ;, if, (, parentTree, !=, null, ), {, merged, ., parent, =, parentTree, ;, if]
[), ;, if, (, parentTree, !=, null, ), {, merged, ., parent, =, parentTree, ;, if, (, isPlusChild, ), {]
[), {, merged, ., parent, =, parentTree, ;, if, (, isPlusChild, ), {, parentTree, ., plus, =, merged, ;, }]
[!=, null, ), {, merged, ., parent, =, parentTree, ;, if, (, isPlusChild, ), {, parentTree, ., plus, =, merged]
[), {, merged, ., parent, =, parentTree, ;, if, (, isPlusChild, ), {, parentTree, ., plus, =, merged, ;, }]
[=, parentTree, ;, if, (, isPlusChild, ), {, parentTree, ., plus, =, merged, ;, }, else, {, parentTree, ., minus]
[., parent, =, parentTree, ;, if, (, isPlusChild, ), {, parentTree, ., plus, =, merged, ;, }, else, {, parentTree]
[;, if, (, isPlusChild, ), {, parentTree, ., plus, =, merged, ;, }, else, {, parentTree, ., minus, =, merged]
[), {, parentTree, ., plus, =, merged, ;, }, else, {, parentTree, ., minus, =, merged, ;, }, }, plus]
[=, merged, ;, }, else, {, parentTree, ., minus, =, merged, ;, }, }, plus, ., merge, (, merged, .]
[., plus, =, merged, ;, }, else, {, parentTree, ., minus, =, merged, ;, }, }, plus, ., merge, (]
[;, }, else, {, parentTree, ., minus, =, merged, ;, }, }, plus, ., merge, (, merged, ., plus, ,]
[=, merged, ;, }, }, plus, ., merge, (, merged, ., plus, ,, leafMerger, ,, merged, ,, true, ), ;]
[., minus, =, merged, ;, }, }, plus, ., merge, (, merged, ., plus, ,, leafMerger, ,, merged, ,, true]
[;, }, }, plus, ., merge, (, merged, ., plus, ,, leafMerger, ,, merged, ,, true, ), ;, minus, .]
[;, minus, ., merge, (, merged, ., minus, ,, leafMerger, ,, merged, ,, false, ), ;, merged, ., condense, (]
[., merge, (, merged, ., plus, ,, leafMerger, ,, merged, ,, true, ), ;, minus, ., merge, (, merged, .]
[,, leafMerger, ,, merged, ,, true, ), ;, minus, ., merge, (, merged, ., minus, ,, leafMerger, ,, merged, ,]
[., plus, ,, leafMerger, ,, merged, ,, true, ), ;, minus, ., merge, (, merged, ., minus, ,, leafMerger, ,]
[,, merged, ,, true, ), ;, minus, ., merge, (, merged, ., minus, ,, leafMerger, ,, merged, ,, false, )]
[,, true, ), ;, minus, ., merge, (, merged, ., minus, ,, leafMerger, ,, merged, ,, false, ), ;, merged]
[), ;, minus, ., merge, (, merged, ., minus, ,, leafMerger, ,, merged, ,, false, ), ;, merged, ., condense]
[;, merged, ., condense, (, ), ;, if, (, merged, ., cut, !=, null, ), {, merged, ., cut, =]
[., merge, (, merged, ., minus, ,, leafMerger, ,, merged, ,, false, ), ;, merged, ., condense, (, ), ;]
[,, leafMerger, ,, merged, ,, false, ), ;, merged, ., condense, (, ), ;, if, (, merged, ., cut, !=]
[., minus, ,, leafMerger, ,, merged, ,, false, ), ;, merged, ., condense, (, ), ;, if, (, merged, .]
[,, merged, ,, false, ), ;, merged, ., condense, (, ), ;, if, (, merged, ., cut, !=, null, )]
[,, false, ), ;, merged, ., condense, (, ), ;, if, (, merged, ., cut, !=, null, ), {, merged]
[), ;, merged, ., condense, (, ), ;, if, (, merged, ., cut, !=, null, ), {, merged, ., cut]
[;, if, (, merged, ., cut, !=, null, ), {, merged, ., cut, =, merged, ., fitToCell, (, merged, .]
[., condense, (, ), ;, if, (, merged, ., cut, !=, null, ), {, merged, ., cut, =, merged, .]
[), {, merged, ., cut, =, merged, ., fitToCell, (, merged, ., cut, ., getHyperplane, (, ), ., wholeHyperplane, (]
[!=, null, ), {, merged, ., cut, =, merged, ., fitToCell, (, merged, ., cut, ., getHyperplane, (, ), .]
[., cut, !=, null, ), {, merged, ., cut, =, merged, ., fitToCell, (, merged, ., cut, ., getHyperplane, (]
[), {, merged, ., cut, =, merged, ., fitToCell, (, merged, ., cut, ., getHyperplane, (, ), ., wholeHyperplane, (]
[=, merged, ., fitToCell, (, merged, ., cut, ., getHyperplane, (, ), ., wholeHyperplane, (, ), ), ;, }, return]
[., cut, =, merged, ., fitToCell, (, merged, ., cut, ., getHyperplane, (, ), ., wholeHyperplane, (, ), ), ;]
[;, }, return, merged, ;, }, }, public, interface, LeafMerger, <, S, extends, Space, >, {, BSPTree, <, S, >]
[., fitToCell, (, merged, ., cut, ., getHyperplane, (, ), ., wholeHyperplane, (, ), ), ;, }, return, merged, ;]
[), ;, }, return, merged, ;, }, }, public, interface, LeafMerger, <, S, extends, Space, >, {, BSPTree, <, S]
[., wholeHyperplane, (, ), ), ;, }, return, merged, ;, }, }, public, interface, LeafMerger, <, S, extends, Space, >]
[., getHyperplane, (, ), ., wholeHyperplane, (, ), ), ;, }, return, merged, ;, }, }, public, interface, LeafMerger, <]
[., cut, ., getHyperplane, (, ), ., wholeHyperplane, (, ), ), ;, }, return, merged, ;, }, }, public, interface]
[;, }, }, public, interface, LeafMerger, <, S, extends, Space, >, {, BSPTree, <, S, >, merge, (, BSPTree, <]
[), {, return, new, BSPTree, <, S, >, (, sub, ,, copySelf, (, ), ,, new, BSPTree, <, S, >]
[==, null, ), {, return, new, BSPTree, <, S, >, (, sub, ,, copySelf, (, ), ,, new, BSPTree, <]
[), {, return, new, BSPTree, <, S, >, (, sub, ,, copySelf, (, ), ,, new, BSPTree, <, S, >]
[;, }, final, Hyperplane, <, S, >, cHyperplane, =, cut, ., getHyperplane, (, ), ;, final, Hyperplane, <, S, >]
[,, copySelf, (, ), ,, new, BSPTree, <, S, >, (, attribute, ), ,, null, ), ;, }, final, Hyperplane]
[,, new, BSPTree, <, S, >, (, attribute, ), ,, null, ), ;, }, final, Hyperplane, <, S, >, cHyperplane]
[,, null, ), ;, }, final, Hyperplane, <, S, >, cHyperplane, =, cut, ., getHyperplane, (, ), ;, final, Hyperplane]
[), ,, null, ), ;, }, final, Hyperplane, <, S, >, cHyperplane, =, cut, ., getHyperplane, (, ), ;, final]
[), ;, }, final, Hyperplane, <, S, >, cHyperplane, =, cut, ., getHyperplane, (, ), ;, final, Hyperplane, <, S]
[;, final, Hyperplane, <, S, >, sHyperplane, =, sub, ., getHyperplane, (, ), ;, switch, (, sub, ., side, (]
[., getHyperplane, (, ), ;, final, Hyperplane, <, S, >, sHyperplane, =, sub, ., getHyperplane, (, ), ;, switch, (]
[;, switch, (, sub, ., side, (, cHyperplane, ), ), {, case, PLUS, :, {, final, BSPTree, <, S, >]
[., getHyperplane, (, ), ;, switch, (, sub, ., side, (, cHyperplane, ), ), {, case, PLUS, :, {, final]
[), {, case, PLUS, :, {, final, BSPTree, <, S, >, split, =, plus, ., split, (, sub, ), ;]
[., side, (, cHyperplane, ), ), {, case, PLUS, :, {, final, BSPTree, <, S, >, split, =, plus, .]
[), ), {, case, PLUS, :, {, final, BSPTree, <, S, >, split, =, plus, ., split, (, sub, )]
[:, {, final, BSPTree, <, S, >, split, =, plus, ., split, (, sub, ), ;, if, (, cut, .]
[;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =, new]
[., split, (, sub, ), ;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {]
[), ;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =]
[), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, split, .]
[==, Side, ., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (]
[., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >]
[), ==, Side, ., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf]
[), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, split, .]
[., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[=, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, split, ., plus, ,, minus, ., copySelf]
[., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, split, ., plus, ,, minus]
[;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {]
[,, split, ., plus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., plus, ., condense, (]
[., copySelf, (, ), ,, split, ., plus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, .]
[,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;, split, .]
[., plus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;]
[,, attribute, ), ;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;]
[., copySelf, (, ), ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;, split, ., plus, .]
[), ;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else]
[;, split, ., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S]
[., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =]
[., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {, split, .]
[=, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (]
[., parent, =, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (, cut, .]
[., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (]
[;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[=, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, split, ., minus, ,, minus, ., copySelf]
[., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, split, ., minus, ,, minus]
[;, split, ., minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return, split]
[,, split, ., minus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., minus, ., condense, (]
[., copySelf, (, ), ,, split, ., minus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, .]
[,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;, split, .]
[., minus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;]
[,, attribute, ), ;, split, ., minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;]
[., copySelf, (, ), ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;, split, ., minus, .]
[), ;, split, ., minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return]
[;, split, ., minus, ., parent, =, split, ;, }, return, split, ;, }, case, MINUS, :, {, final, BSPTree]
[., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return, split, ;, }, case, MINUS]
[., minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return, split, ;, }]
[=, split, ;, }, return, split, ;, }, case, MINUS, :, {, final, BSPTree, <, S, >, split, =, minus]
[., parent, =, split, ;, }, return, split, ;, }, case, MINUS, :, {, final, BSPTree, <, S, >, split]
[., minus, ., parent, =, split, ;, }, return, split, ;, }, case, MINUS, :, {, final, BSPTree, <, S]
[;, }, return, split, ;, }, case, MINUS, :, {, final, BSPTree, <, S, >, split, =, minus, ., split]
[;, }, case, MINUS, :, {, final, BSPTree, <, S, >, split, =, minus, ., split, (, sub, ), ;]
[:, {, final, BSPTree, <, S, >, split, =, minus, ., split, (, sub, ), ;, if, (, cut, .]
[;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =, new]
[., split, (, sub, ), ;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {]
[), ;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =]
[), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, .]
[==, Side, ., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (]
[., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >]
[), ==, Side, ., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf]
[), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, .]
[., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[=, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split]
[., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, )]
[;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {]
[,, plus, ., copySelf, (, ), ,, split, ., plus, ,, attribute, ), ;, split, ., plus, ., condense, (]
[., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split, ., plus, ,, attribute, ), ;, split, .]
[,, split, ., plus, ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;, split, ., plus, .]
[., copySelf, (, ), ,, split, ., plus, ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;]
[,, attribute, ), ;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;]
[., plus, ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =]
[), ;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else]
[;, split, ., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S]
[., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =]
[., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {, split, .]
[=, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (]
[., parent, =, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (, cut, .]
[., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (]
[;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[=, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split]
[., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, )]
[;, split, ., minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return, split]
[,, plus, ., copySelf, (, ), ,, split, ., minus, ,, attribute, ), ;, split, ., minus, ., condense, (]
[., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split, ., minus, ,, attribute, ), ;, split, .]
[,, split, ., minus, ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;, split, ., minus, .]
[., copySelf, (, ), ,, split, ., minus, ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;]
[,, attribute, ), ;, split, ., minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;]
[., minus, ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;, split, ., minus, ., parent, =]
[), ;, split, ., minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return]
[;, split, ., minus, ., parent, =, split, ;, }, return, split, ;, }, case, BOTH, :, {, final, SubHyperplane]
[., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return, split, ;, }, case, BOTH]
[., minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return, split, ;, }]
[=, split, ;, }, return, split, ;, }, case, BOTH, :, {, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, cutParts]
[., parent, =, split, ;, }, return, split, ;, }, case, BOTH, :, {, final, SubHyperplane, ., SplitSubHyperplane, <, S]
[., minus, ., parent, =, split, ;, }, return, split, ;, }, case, BOTH, :, {, final, SubHyperplane, ., SplitSubHyperplane]
[;, }, return, split, ;, }, case, BOTH, :, {, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, cutParts, =, cut]
[;, }, case, BOTH, :, {, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, cutParts, =, cut, ., split, (, sHyperplane]
[:, {, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, cutParts, =, cut, ., split, (, sHyperplane, ), ;, final, SubHyperplane]
[;, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, subParts, =, sub, ., split, (, cHyperplane, ), ;, final, BSPTree, <]
[., split, (, sHyperplane, ), ;, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, subParts, =, sub, ., split, (, cHyperplane]
[), ;, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, subParts, =, sub, ., split, (, cHyperplane, ), ;, final, BSPTree]
[;, final, BSPTree, <, S, >, split, =, new, BSPTree, <, S, >, (, sub, ,, plus, ., split, (]
[., split, (, cHyperplane, ), ;, final, BSPTree, <, S, >, split, =, new, BSPTree, <, S, >, (, sub]
[), ;, final, BSPTree, <, S, >, split, =, new, BSPTree, <, S, >, (, sub, ,, plus, ., split]
[;, split, ., plus, ., cut, =, cutParts, ., getPlus, (, ), ;, split, ., minus, ., cut, =, cutParts]
[,, plus, ., split, (, subParts, ., getPlus, (, ), ), ,, minus, ., split, (, subParts, ., getMinus, (]
[,, minus, ., split, (, subParts, ., getMinus, (, ), ), ,, null, ), ;, split, ., plus, ., cut]
[., split, (, subParts, ., getPlus, (, ), ), ,, minus, ., split, (, subParts, ., getMinus, (, ), )]
[), ,, minus, ., split, (, subParts, ., getMinus, (, ), ), ,, null, ), ;, split, ., plus, .]
[., getPlus, (, ), ), ,, minus, ., split, (, subParts, ., getMinus, (, ), ), ,, null, ), ;]
[,, null, ), ;, split, ., plus, ., cut, =, cutParts, ., getPlus, (, ), ;, split, ., minus, .]
[., split, (, subParts, ., getMinus, (, ), ), ,, null, ), ;, split, ., plus, ., cut, =, cutParts]
[), ,, null, ), ;, split, ., plus, ., cut, =, cutParts, ., getPlus, (, ), ;, split, ., minus]
[., getMinus, (, ), ), ,, null, ), ;, split, ., plus, ., cut, =, cutParts, ., getPlus, (, )]
[), ;, split, ., plus, ., cut, =, cutParts, ., getPlus, (, ), ;, split, ., minus, ., cut, =]
[=, cutParts, ., getPlus, (, ), ;, split, ., minus, ., cut, =, cutParts, ., getMinus, (, ), ;, final]
[., cut, =, cutParts, ., getPlus, (, ), ;, split, ., minus, ., cut, =, cutParts, ., getMinus, (, )]
[., plus, ., cut, =, cutParts, ., getPlus, (, ), ;, split, ., minus, ., cut, =, cutParts, ., getMinus]
[;, split, ., minus, ., cut, =, cutParts, ., getMinus, (, ), ;, final, BSPTree, <, S, >, tmp, =]
[., getPlus, (, ), ;, split, ., minus, ., cut, =, cutParts, ., getMinus, (, ), ;, final, BSPTree, <]
[=, cutParts, ., getMinus, (, ), ;, final, BSPTree, <, S, >, tmp, =, split, ., plus, ., minus, ;]
[., cut, =, cutParts, ., getMinus, (, ), ;, final, BSPTree, <, S, >, tmp, =, split, ., plus, .]
[., minus, ., cut, =, cutParts, ., getMinus, (, ), ;, final, BSPTree, <, S, >, tmp, =, split, .]
[;, final, BSPTree, <, S, >, tmp, =, split, ., plus, ., minus, ;, split, ., plus, ., minus, =]
[., getMinus, (, ), ;, final, BSPTree, <, S, >, tmp, =, split, ., plus, ., minus, ;, split, .]
[;, split, ., plus, ., minus, =, split, ., minus, ., plus, ;, split, ., plus, ., minus, ., parent]
[., minus, ;, split, ., plus, ., minus, =, split, ., minus, ., plus, ;, split, ., plus, ., minus]
[., plus, ., minus, ;, split, ., plus, ., minus, =, split, ., minus, ., plus, ;, split, ., plus]
[=, split, ., minus, ., plus, ;, split, ., plus, ., minus, ., parent, =, split, ., plus, ;, split]
[., minus, =, split, ., minus, ., plus, ;, split, ., plus, ., minus, ., parent, =, split, ., plus]
[., plus, ., minus, =, split, ., minus, ., plus, ;, split, ., plus, ., minus, ., parent, =, split]
[;, split, ., plus, ., minus, ., parent, =, split, ., plus, ;, split, ., minus, ., plus, =, tmp]
[., plus, ;, split, ., plus, ., minus, ., parent, =, split, ., plus, ;, split, ., minus, ., plus]
[., minus, ., plus, ;, split, ., plus, ., minus, ., parent, =, split, ., plus, ;, split, ., minus]
[=, split, ., plus, ;, split, ., minus, ., plus, =, tmp, ;, split, ., minus, ., plus, ., parent]
[., parent, =, split, ., plus, ;, split, ., minus, ., plus, =, tmp, ;, split, ., minus, ., plus]
[., minus, ., parent, =, split, ., plus, ;, split, ., minus, ., plus, =, tmp, ;, split, ., minus]
[., plus, ., minus, ., parent, =, split, ., plus, ;, split, ., minus, ., plus, =, tmp, ;, split]
[;, split, ., minus, ., plus, =, tmp, ;, split, ., minus, ., plus, ., parent, =, split, ., minus]
[., plus, ;, split, ., minus, ., plus, =, tmp, ;, split, ., minus, ., plus, ., parent, =, split]
[=, tmp, ;, split, ., minus, ., plus, ., parent, =, split, ., minus, ;, split, ., plus, ., condense]
[., plus, =, tmp, ;, split, ., minus, ., plus, ., parent, =, split, ., minus, ;, split, ., plus]
[., minus, ., plus, =, tmp, ;, split, ., minus, ., plus, ., parent, =, split, ., minus, ;, split]
[;, split, ., minus, ., plus, ., parent, =, split, ., minus, ;, split, ., plus, ., condense, (, )]
[=, split, ., minus, ;, split, ., plus, ., condense, (, ), ;, split, ., minus, ., condense, (, )]
[., parent, =, split, ., minus, ;, split, ., plus, ., condense, (, ), ;, split, ., minus, ., condense]
[., plus, ., parent, =, split, ., minus, ;, split, ., plus, ., condense, (, ), ;, split, ., minus]
[., minus, ., plus, ., parent, =, split, ., minus, ;, split, ., plus, ., condense, (, ), ;, split]
[;, split, ., plus, ., condense, (, ), ;, split, ., minus, ., condense, (, ), ;, return, split, ;]
[., minus, ;, split, ., plus, ., condense, (, ), ;, split, ., minus, ., condense, (, ), ;, return]
[;, split, ., minus, ., condense, (, ), ;, return, split, ;, }, default, :, return, cHyperplane, ., sameOrientationAs, (]
[., condense, (, ), ;, split, ., minus, ., condense, (, ), ;, return, split, ;, }, default, :, return]
[., plus, ., condense, (, ), ;, split, ., minus, ., condense, (, ), ;, return, split, ;, }, default]
[;, return, split, ;, }, default, :, return, cHyperplane, ., sameOrientationAs, (, sHyperplane, ), ?, new, BSPTree, <, S, >]
[., condense, (, ), ;, return, split, ;, }, default, :, return, cHyperplane, ., sameOrientationAs, (, sHyperplane, ), ?, new]
[., minus, ., condense, (, ), ;, return, split, ;, }, default, :, return, cHyperplane, ., sameOrientationAs, (, sHyperplane, )]
[;, }, default, :, return, cHyperplane, ., sameOrientationAs, (, sHyperplane, ), ?, new, BSPTree, <, S, >, (, sub, ,]
[;, }, }, public, void, insertInTree, (, final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {, parent]
[?, new, BSPTree, <, S, >, (, sub, ,, plus, ., copySelf, (, ), ,, minus, ., copySelf, (, )]
[., sameOrientationAs, (, sHyperplane, ), ?, new, BSPTree, <, S, >, (, sub, ,, plus, ., copySelf, (, ), ,]
[), ?, new, BSPTree, <, S, >, (, sub, ,, plus, ., copySelf, (, ), ,, minus, ., copySelf, (]
[:, new, BSPTree, <, S, >, (, sub, ,, minus, ., copySelf, (, ), ,, plus, ., copySelf, (, )]
[,, plus, ., copySelf, (, ), ,, minus, ., copySelf, (, ), ,, attribute, ), :, new, BSPTree, <, S]
[,, minus, ., copySelf, (, ), ,, attribute, ), :, new, BSPTree, <, S, >, (, sub, ,, minus, .]
[., copySelf, (, ), ,, minus, ., copySelf, (, ), ,, attribute, ), :, new, BSPTree, <, S, >, (]
[,, attribute, ), :, new, BSPTree, <, S, >, (, sub, ,, minus, ., copySelf, (, ), ,, plus, .]
[., copySelf, (, ), ,, attribute, ), :, new, BSPTree, <, S, >, (, sub, ,, minus, ., copySelf, (]
[), :, new, BSPTree, <, S, >, (, sub, ,, minus, ., copySelf, (, ), ,, plus, ., copySelf, (]
[;, }, }, public, void, insertInTree, (, final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {, parent]
[,, minus, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, attribute, ), ;, }, }, public, void]
[,, plus, ., copySelf, (, ), ,, attribute, ), ;, }, }, public, void, insertInTree, (, final, BSPTree, <, S]
[., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, attribute, ), ;, }, }, public, void, insertInTree, (]
[,, attribute, ), ;, }, }, public, void, insertInTree, (, final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild]
[., copySelf, (, ), ,, attribute, ), ;, }, }, public, void, insertInTree, (, final, BSPTree, <, S, >, parentTree]
[), ;, }, }, public, void, insertInTree, (, final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {]
[=, parentTree, ;, if, (, parentTree, !=, null, ), {, if, (, isPlusChild, ), {, parentTree, ., plus, =, this]
[;, if, (, parentTree, !=, null, ), {, if, (, isPlusChild, ), {, parentTree, ., plus, =, this, ;, }]
[), {, if, (, isPlusChild, ), {, parentTree, ., plus, =, this, ;, }, else, {, parentTree, ., minus, =]
[!=, null, ), {, if, (, isPlusChild, ), {, parentTree, ., plus, =, this, ;, }, else, {, parentTree, .]
[), {, if, (, isPlusChild, ), {, parentTree, ., plus, =, this, ;, }, else, {, parentTree, ., minus, =]
[), {, parentTree, ., plus, =, this, ;, }, else, {, parentTree, ., minus, =, this, ;, }, }, if]
[=, this, ;, }, else, {, parentTree, ., minus, =, this, ;, }, }, if, (, cut, !=, null, )]
[., plus, =, this, ;, }, else, {, parentTree, ., minus, =, this, ;, }, }, if, (, cut, !=]
[;, }, else, {, parentTree, ., minus, =, this, ;, }, }, if, (, cut, !=, null, ), {, for]
[=, this, ;, }, }, if, (, cut, !=, null, ), {, for, (, BSPTree, <, S, >, tree, =]
[., minus, =, this, ;, }, }, if, (, cut, !=, null, ), {, for, (, BSPTree, <, S, >]
[;, }, }, if, (, cut, !=, null, ), {, for, (, BSPTree, <, S, >, tree, =, this, ;]
[), {, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=, null, ;, tree, =]
[!=, null, ), {, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=, null, ;]
[), {, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=, null, ;, tree, =]
[;, tree, ., parent, !=, null, ;, tree, =, tree, ., parent, ), {, final, Hyperplane, <, S, >, hyperplane]
[;, tree, =, tree, ., parent, ), {, final, Hyperplane, <, S, >, hyperplane, =, tree, ., parent, ., cut]
[!=, null, ;, tree, =, tree, ., parent, ), {, final, Hyperplane, <, S, >, hyperplane, =, tree, ., parent]
[., parent, !=, null, ;, tree, =, tree, ., parent, ), {, final, Hyperplane, <, S, >, hyperplane, =, tree]
[;, tree, =, tree, ., parent, ), {, final, Hyperplane, <, S, >, hyperplane, =, tree, ., parent, ., cut]
[=, tree, ., parent, ), {, final, Hyperplane, <, S, >, hyperplane, =, tree, ., parent, ., cut, ., getHyperplane]
[), {, final, Hyperplane, <, S, >, hyperplane, =, tree, ., parent, ., cut, ., getHyperplane, (, ), ;, if]
[., parent, ), {, final, Hyperplane, <, S, >, hyperplane, =, tree, ., parent, ., cut, ., getHyperplane, (, )]
[;, if, (, tree, ==, tree, ., parent, ., plus, ), {, cut, =, cut, ., split, (, hyperplane, )]
[., getHyperplane, (, ), ;, if, (, tree, ==, tree, ., parent, ., plus, ), {, cut, =, cut, .]
[., cut, ., getHyperplane, (, ), ;, if, (, tree, ==, tree, ., parent, ., plus, ), {, cut, =]
[., parent, ., cut, ., getHyperplane, (, ), ;, if, (, tree, ==, tree, ., parent, ., plus, ), {]
[), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane]
[==, tree, ., parent, ., plus, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, )]
[), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane]
[., plus, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus]
[., parent, ., plus, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus]
[=, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus]
[;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, else, {, cut, =]
[., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }]
[., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus]
[), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;]
[;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, else, {, cut, =, cut, ., split, (, hyperplane, ), .]
[., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, else, {, cut, =, cut, .]
[), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, else, {, cut, =, cut, ., split, (, hyperplane, )]
[;, }, else, {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus]
[., chopOffMinus, (, hyperplane, ), ;, }, else, {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (]
[), ;, }, else, {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, .]
[=, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus]
[;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus, (, hyperplane, ), ;, }, }, condense, (, )]
[., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus, (, hyperplane, ), ;, }]
[., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus]
[), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus, (, hyperplane, ), ;]
[;, minus, ., chopOffPlus, (, hyperplane, ), ;, }, }, condense, (, ), ;, }, }, private, void, chopOffMinus, (]
[., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus, (, hyperplane, ), ;, }, }, condense, (, ), ;, }]
[), ;, minus, ., chopOffPlus, (, hyperplane, ), ;, }, }, condense, (, ), ;, }, }, private, void, chopOffMinus]
[;, }, }, condense, (, ), ;, }, }, private, void, chopOffMinus, (, final, Hyperplane, <, S, >, hyperplane, )]
[., chopOffPlus, (, hyperplane, ), ;, }, }, condense, (, ), ;, }, }, private, void, chopOffMinus, (, final, Hyperplane]
[), ;, }, }, condense, (, ), ;, }, }, private, void, chopOffMinus, (, final, Hyperplane, <, S, >, hyperplane]
[;, }, }, private, void, chopOffMinus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null]
[), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane]
[!=, null, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus]
[), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane]
[=, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus]
[;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, }, private, void, chopOffPlus]
[., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }]
[., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus]
[), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;]
[;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, }, private, void, chopOffPlus, (, final, Hyperplane, <, S, >, hyperplane]
[., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, }, private, void, chopOffPlus, (, final]
[), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, }, private, void, chopOffPlus, (, final, Hyperplane, <, S, >]
[;, }, }, private, void, chopOffPlus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null]
[., chopOffMinus, (, hyperplane, ), ;, }, }, private, void, chopOffPlus, (, final, Hyperplane, <, S, >, hyperplane, ), {]
[), ;, }, }, private, void, chopOffPlus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=]
[), {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane]
[!=, null, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus]
[), {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane]
[=, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus]
[;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus, (, hyperplane, ), ;, }, }, }]
[., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus, (, hyperplane, ), ;, }]
[., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus]
[), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus, (, hyperplane, ), ;]
[;, minus, ., chopOffPlus, (, hyperplane, ), ;, }, }, }]
[., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus, (, hyperplane, ), ;, }, }, }]
[), ;, minus, ., chopOffPlus, (, hyperplane, ), ;, }, }, }]
[;, }, }, }]
[., chopOffPlus, (, hyperplane, ), ;, }, }, }]
[), ;, }, }, }]
