[import, java, ., util, ., regex, ., Pattern, ;, public, class, DepsFileParser, extends, JsFileLineParser, {, private, static, Logger, logger, =]
[import, java, ., util, ., regex, ., Pattern, ;, public, class, DepsFileParser, extends, JsFileLineParser, {, private, static, Logger, logger, =]
[., regex, ., Pattern, ;, public, class, DepsFileParser, extends, JsFileLineParser, {, private, static, Logger, logger, =, Logger, ., getLogger, (]
[., regex, ., Pattern, ;, public, class, DepsFileParser, extends, JsFileLineParser, {, private, static, Logger, logger, =, Logger, ., getLogger, (]
[logger, =, Logger, ., getLogger, (, DepsFileParser, ., class, ., getName, (, ), ), ;, private, final, Matcher, depMatcher, =]
[logger, =, Logger, ., getLogger, (, DepsFileParser, ., class, ., getName, (, ), ), ;, private, final, Matcher, depMatcher, =]
[logger, =, Logger, ., getLogger, (, DepsFileParser, ., class, ., getName, (, ), ), ;, private, final, Matcher, depMatcher, =]
[getLogger, (, DepsFileParser, ., class, ., getName, (, ), ), ;, private, final, Matcher, depMatcher, =, Pattern, ., compile, (]
[., getName, (, ), ), ;, private, final, Matcher, depMatcher, =, Pattern, ., compile, (, "\\s*goog.addDependency\\((.*)\\);?\\s*", ), ., matcher, (]
[Matcher, depMatcher, =, Pattern, ., compile, (, "\\s*goog.addDependency\\((.*)\\);?\\s*", ), ., matcher, (, "", ), ;, private, final, Matcher, depArgsMatch, =]
[Matcher, depMatcher, =, Pattern, ., compile, (, "\\s*goog.addDependency\\((.*)\\);?\\s*", ), ., matcher, (, "", ), ;, private, final, Matcher, depArgsMatch, =]
[Matcher, depMatcher, =, Pattern, ., compile, (, "\\s*goog.addDependency\\((.*)\\);?\\s*", ), ., matcher, (, "", ), ;, private, final, Matcher, depArgsMatch, =]
[., compile, (, "\\s*goog.addDependency\\((.*)\\);?\\s*", ), ., matcher, (, "", ), ;, private, final, Matcher, depArgsMatch, =, Pattern, ., compile, (]
[., matcher, (, "", ), ;, private, final, Matcher, depArgsMatch, =, Pattern, ., compile, (, "\\s*([^,]*), (\\[[^\\]]*\\]), (\\[[^\\]]*\\])\\s*", ), ., matcher, (]
[;, private, final, Function, <, String, ,, String, >, pathTranslator, ;, public, DepsFileParser, (, ErrorManager, errorManager, ), {, this, (]
[;, private, final, Function, <, String, ,, String, >, pathTranslator, ;, public, DepsFileParser, (, ErrorManager, errorManager, ), {, this, (]
[pathTranslator, ;, public, DepsFileParser, (, ErrorManager, errorManager, ), {, this, (, Functions, ., <, String, >, identity, (, ), ,]
[), ;, }, public, DepsFileParser, (, Function, <, String, ,, String, >, pathTranslator, ,, ErrorManager, errorManager, ), {, super, (]
[public, DepsFileParser, (, Function, <, String, ,, String, >, pathTranslator, ,, ErrorManager, errorManager, ), {, super, (, errorManager, ), ;]
[public, DepsFileParser, (, Function, <, String, ,, String, >, pathTranslator, ,, ErrorManager, errorManager, ), {, super, (, errorManager, ), ;]
[<, String, ,, String, >, pathTranslator, ,, ErrorManager, errorManager, ), {, super, (, errorManager, ), ;, this, ., pathTranslator, =]
[., pathTranslator, =, pathTranslator, ;, }, public, List, <, DependencyInfo, >, parseFile, (, String, filePath, ), throws, IOException, {, return]
[=, pathTranslator, ;, }, public, List, <, DependencyInfo, >, parseFile, (, String, filePath, ), throws, IOException, {, return, parseFileReader, (]
[;, }, public, List, <, DependencyInfo, >, parseFile, (, String, filePath, ), throws, IOException, {, return, parseFileReader, (, filePath, ,]
[List, <, DependencyInfo, >, parseFile, (, String, filePath, ), throws, IOException, {, return, parseFileReader, (, filePath, ,, new, FileReader, (]
[filePath, ), ), ;, }, public, List, <, DependencyInfo, >, parseFile, (, String, filePath, ,, String, fileContents, ), {, return]
[), ;, }, public, List, <, DependencyInfo, >, parseFile, (, String, filePath, ,, String, fileContents, ), {, return, parseFileReader, (]
[}, public, List, <, DependencyInfo, >, parseFile, (, String, filePath, ,, String, fileContents, ), {, return, parseFileReader, (, filePath, ,]
[<, DependencyInfo, >, parseFile, (, String, filePath, ,, String, fileContents, ), {, return, parseFileReader, (, filePath, ,, new, StringReader, (]
[(, fileContents, ), ), ;, }, public, List, <, DependencyInfo, >, parseFileReader, (, String, filePath, ,, Reader, reader, ), {]
[), ), ;, }, public, List, <, DependencyInfo, >, parseFileReader, (, String, filePath, ,, Reader, reader, ), {, depInfos, =]
[), ), ;, }, public, List, <, DependencyInfo, >, parseFileReader, (, String, filePath, ,, Reader, reader, ), {, depInfos, =]
[<, DependencyInfo, >, parseFileReader, (, String, filePath, ,, Reader, reader, ), {, depInfos, =, Lists, ., newArrayList, (, ), ;]
[<, DependencyInfo, >, parseFileReader, (, String, filePath, ,, Reader, reader, ), {, depInfos, =, Lists, ., newArrayList, (, ), ;]
[(, String, filePath, ,, Reader, reader, ), {, depInfos, =, Lists, ., newArrayList, (, ), ;, logger, ., fine, (]
[(, String, filePath, ,, Reader, reader, ), {, depInfos, =, Lists, ., newArrayList, (, ), ;, logger, ., fine, (]
[filePath, ,, Reader, reader, ), {, depInfos, =, Lists, ., newArrayList, (, ), ;, logger, ., fine, (, "Parsing Dep: ", +]
[reader, ), {, depInfos, =, Lists, ., newArrayList, (, ), ;, logger, ., fine, (, "Parsing Dep: ", +, filePath, ), ;]
[{, depInfos, =, Lists, ., newArrayList, (, ), ;, logger, ., fine, (, "Parsing Dep: ", +, filePath, ), ;, doParse, (]
[=, Lists, ., newArrayList, (, ), ;, logger, ., fine, (, "Parsing Dep: ", +, filePath, ), ;, doParse, (, filePath, ,]
[(, ), ;, logger, ., fine, (, "Parsing Dep: ", +, filePath, ), ;, doParse, (, filePath, ,, reader, ), ;, return]
[;, return, depInfos, ;, }, @, Override, protected, boolean, parseLine, (, String, line, ), throws, ParseException, {, boolean, hasDependencies, =]
[}, @, Override, protected, boolean, parseLine, (, String, line, ), throws, ParseException, {, boolean, hasDependencies, =, false, ;, if, (]
[}, @, Override, protected, boolean, parseLine, (, String, line, ), throws, ParseException, {, boolean, hasDependencies, =, false, ;, if, (]
[}, @, Override, protected, boolean, parseLine, (, String, line, ), throws, ParseException, {, boolean, hasDependencies, =, false, ;, if, (]
[boolean, parseLine, (, String, line, ), throws, ParseException, {, boolean, hasDependencies, =, false, ;, if, (, line, ., indexOf, (]
[String, line, ), throws, ParseException, {, boolean, hasDependencies, =, false, ;, if, (, line, ., indexOf, (, "addDependency", ), !=]
[line, ), throws, ParseException, {, boolean, hasDependencies, =, false, ;, if, (, line, ., indexOf, (, "addDependency", ), !=, -]
[ParseException, {, boolean, hasDependencies, =, false, ;, if, (, line, ., indexOf, (, "addDependency", ), !=, -, 1, ), {]
[ParseException, {, boolean, hasDependencies, =, false, ;, if, (, line, ., indexOf, (, "addDependency", ), !=, -, 1, ), {]
[=, false, ;, if, (, line, ., indexOf, (, "addDependency", ), !=, -, 1, ), {, depMatcher, ., reset, (]
[line, ., indexOf, (, "addDependency", ), !=, -, 1, ), {, depMatcher, ., reset, (, line, ), ;, if, (]
[line, ., indexOf, (, "addDependency", ), !=, -, 1, ), {, depMatcher, ., reset, (, line, ), ;, if, (]
[-, 1, ), {, depMatcher, ., reset, (, line, ), ;, if, (, depMatcher, ., matches, (, ), ), {]
[), {, depMatcher, ., reset, (, line, ), ;, if, (, depMatcher, ., matches, (, ), ), {, hasDependencies, =]
[(, line, ), ;, if, (, depMatcher, ., matches, (, ), ), {, hasDependencies, =, true, ;, String, addDependencyParams, =]
[(, line, ), ;, if, (, depMatcher, ., matches, (, ), ), {, hasDependencies, =, true, ;, String, addDependencyParams, =]
[if, (, depMatcher, ., matches, (, ), ), {, hasDependencies, =, true, ;, String, addDependencyParams, =, depMatcher, ., group, (]
[., matches, (, ), ), {, hasDependencies, =, true, ;, String, addDependencyParams, =, depMatcher, ., group, (, 1, ), ;]
[., matches, (, ), ), {, hasDependencies, =, true, ;, String, addDependencyParams, =, depMatcher, ., group, (, 1, ), ;]
[), {, hasDependencies, =, true, ;, String, addDependencyParams, =, depMatcher, ., group, (, 1, ), ;, depArgsMatch, ., reset, (]
[;, String, addDependencyParams, =, depMatcher, ., group, (, 1, ), ;, depArgsMatch, ., reset, (, addDependencyParams, ), ;, if, (]
[String, addDependencyParams, =, depMatcher, ., group, (, 1, ), ;, depArgsMatch, ., reset, (, addDependencyParams, ), ;, if, (, !]
[String, addDependencyParams, =, depMatcher, ., group, (, 1, ), ;, depArgsMatch, ., reset, (, addDependencyParams, ), ;, if, (, !]
[), ;, depArgsMatch, ., reset, (, addDependencyParams, ), ;, if, (, !, depArgsMatch, ., matches, (, ), ), {, throw]
[., reset, (, addDependencyParams, ), ;, if, (, !, depArgsMatch, ., matches, (, ), ), {, throw, new, ParseException, (]
[., reset, (, addDependencyParams, ), ;, if, (, !, depArgsMatch, ., matches, (, ), ), {, throw, new, ParseException, (]
[(, addDependencyParams, ), ;, if, (, !, depArgsMatch, ., matches, (, ), ), {, throw, new, ParseException, (, "Invalid arguments to goog.addDependency(). Found: ", +]
[), ;, if, (, !, depArgsMatch, ., matches, (, ), ), {, throw, new, ParseException, (, "Invalid arguments to goog.addDependency(). Found: ", +, addDependencyParams, ,]
[matches, (, ), ), {, throw, new, ParseException, (, "Invalid arguments to goog.addDependency(). Found: ", +, addDependencyParams, ,, true, ), ;, }, String, path, =]
[matches, (, ), ), {, throw, new, ParseException, (, "Invalid arguments to goog.addDependency(). Found: ", +, addDependencyParams, ,, true, ), ;, }, String, path, =]
[{, throw, new, ParseException, (, "Invalid arguments to goog.addDependency(). Found: ", +, addDependencyParams, ,, true, ), ;, }, String, path, =, pathTranslator, ., apply, (]
[new, ParseException, (, "Invalid arguments to goog.addDependency(). Found: ", +, addDependencyParams, ,, true, ), ;, }, String, path, =, pathTranslator, ., apply, (, parseJsString, (]
[new, ParseException, (, "Invalid arguments to goog.addDependency(). Found: ", +, addDependencyParams, ,, true, ), ;, }, String, path, =, pathTranslator, ., apply, (, parseJsString, (]
[+, addDependencyParams, ,, true, ), ;, }, String, path, =, pathTranslator, ., apply, (, parseJsString, (, depArgsMatch, ., group, (]
[path, =, pathTranslator, ., apply, (, parseJsString, (, depArgsMatch, ., group, (, 1, ), ), ), ;, DependencyInfo, depInfo, =]
[., apply, (, parseJsString, (, depArgsMatch, ., group, (, 1, ), ), ), ;, DependencyInfo, depInfo, =, new, SimpleDependencyInfo, (]
[(, parseJsString, (, depArgsMatch, ., group, (, 1, ), ), ), ;, DependencyInfo, depInfo, =, new, SimpleDependencyInfo, (, path, ,]
[(, depArgsMatch, ., group, (, 1, ), ), ), ;, DependencyInfo, depInfo, =, new, SimpleDependencyInfo, (, path, ,, filePath, ,]
[., group, (, 1, ), ), ), ;, DependencyInfo, depInfo, =, new, SimpleDependencyInfo, (, path, ,, filePath, ,, parseJsStringArray, (]
[., group, (, 1, ), ), ), ;, DependencyInfo, depInfo, =, new, SimpleDependencyInfo, (, path, ,, filePath, ,, parseJsStringArray, (]
[), ), ), ;, DependencyInfo, depInfo, =, new, SimpleDependencyInfo, (, path, ,, filePath, ,, parseJsStringArray, (, depArgsMatch, ., group, (]
[DependencyInfo, depInfo, =, new, SimpleDependencyInfo, (, path, ,, filePath, ,, parseJsStringArray, (, depArgsMatch, ., group, (, 2, ), ), ,]
[=, new, SimpleDependencyInfo, (, path, ,, filePath, ,, parseJsStringArray, (, depArgsMatch, ., group, (, 2, ), ), ,, parseJsStringArray, (]
[=, new, SimpleDependencyInfo, (, path, ,, filePath, ,, parseJsStringArray, (, depArgsMatch, ., group, (, 2, ), ), ,, parseJsStringArray, (]
[path, ,, filePath, ,, parseJsStringArray, (, depArgsMatch, ., group, (, 2, ), ), ,, parseJsStringArray, (, depArgsMatch, ., group, (]
[., group, (, 2, ), ), ,, parseJsStringArray, (, depArgsMatch, ., group, (, 3, ), ), ), ;, if, (]
[., group, (, 2, ), ), ,, parseJsStringArray, (, depArgsMatch, ., group, (, 3, ), ), ), ;, if, (]
[), ), ,, parseJsStringArray, (, depArgsMatch, ., group, (, 3, ), ), ), ;, if, (, logger, ., isLoggable, (]
[), ), ,, parseJsStringArray, (, depArgsMatch, ., group, (, 3, ), ), ), ;, if, (, logger, ., isLoggable, (]
[., group, (, 3, ), ), ), ;, if, (, logger, ., isLoggable, (, Level, ., FINE, ), ), {]
[., group, (, 3, ), ), ), ;, if, (, logger, ., isLoggable, (, Level, ., FINE, ), ), {]
[), ), ), ;, if, (, logger, ., isLoggable, (, Level, ., FINE, ), ), {, logger, ., fine, (]
[), ), ), ;, if, (, logger, ., isLoggable, (, Level, ., FINE, ), ), {, logger, ., fine, (]
[), ;, if, (, logger, ., isLoggable, (, Level, ., FINE, ), ), {, logger, ., fine, (, "Found dep: ", +]
[logger, ., isLoggable, (, Level, ., FINE, ), ), {, logger, ., fine, (, "Found dep: ", +, depInfo, ), ;, }]
[logger, ., isLoggable, (, Level, ., FINE, ), ), {, logger, ., fine, (, "Found dep: ", +, depInfo, ), ;, }]
[Level, ., FINE, ), ), {, logger, ., fine, (, "Found dep: ", +, depInfo, ), ;, }, depInfos, ., add, (]
[logger, ., fine, (, "Found dep: ", +, depInfo, ), ;, }, depInfos, ., add, (, depInfo, ), ;, }, }, return]
[logger, ., fine, (, "Found dep: ", +, depInfo, ), ;, }, depInfos, ., add, (, depInfo, ), ;, }, }, return]
[logger, ., fine, (, "Found dep: ", +, depInfo, ), ;, }, depInfos, ., add, (, depInfo, ), ;, }, }, return]
[., fine, (, "Found dep: ", +, depInfo, ), ;, }, depInfos, ., add, (, depInfo, ), ;, }, }, return, !]
[(, "Found dep: ", +, depInfo, ), ;, }, depInfos, ., add, (, depInfo, ), ;, }, }, return, !, shortcutMode, ||]
[+, depInfo, ), ;, }, depInfos, ., add, (, depInfo, ), ;, }, }, return, !, shortcutMode, ||, hasDependencies, ||]
[+, depInfo, ), ;, }, depInfos, ., add, (, depInfo, ), ;, }, }, return, !, shortcutMode, ||, hasDependencies, ||]
[+, depInfo, ), ;, }, depInfos, ., add, (, depInfo, ), ;, }, }, return, !, shortcutMode, ||, hasDependencies, ||]
[., add, (, depInfo, ), ;, }, }, return, !, shortcutMode, ||, hasDependencies, ||, CharMatcher, ., WHITESPACE, ., matchesAllOf, (]
