[;, private, List, tickUnits, ;, public, TickUnits, (, ), {, this, ., tickUnits, =, new, ArrayList, (, ), ;, }]
[=, new, ArrayList, (, ), ;, }, public, void, add, (, TickUnit, unit, ), {, if, (, unit, ==, null]
[., tickUnits, =, new, ArrayList, (, ), ;, }, public, void, add, (, TickUnit, unit, ), {, if, (, unit]
[;, }, public, void, add, (, TickUnit, unit, ), {, if, (, unit, ==, null, ), {, throw, new, NullPointerException]
[), {, throw, new, NullPointerException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnits, ., add, (, unit, ), ;, Collections]
[==, null, ), {, throw, new, NullPointerException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnits, ., add, (, unit, )]
[), {, throw, new, NullPointerException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnits, ., add, (, unit, ), ;, Collections]
[;, }, this, ., tickUnits, ., add, (, unit, ), ;, Collections, ., sort, (, this, ., tickUnits, ), ;]
[), ;, }, this, ., tickUnits, ., add, (, unit, ), ;, Collections, ., sort, (, this, ., tickUnits, )]
[;, Collections, ., sort, (, this, ., tickUnits, ), ;, }, public, int, size, (, ), {, return, this, .]
[., add, (, unit, ), ;, Collections, ., sort, (, this, ., tickUnits, ), ;, }, public, int, size, (]
[., tickUnits, ., add, (, unit, ), ;, Collections, ., sort, (, this, ., tickUnits, ), ;, }, public, int]
[), ;, Collections, ., sort, (, this, ., tickUnits, ), ;, }, public, int, size, (, ), {, return, this]
[;, }, public, int, size, (, ), {, return, this, ., tickUnits, ., size, (, ), ;, }, public, TickUnit]
[., sort, (, this, ., tickUnits, ), ;, }, public, int, size, (, ), {, return, this, ., tickUnits, .]
[), ;, }, public, int, size, (, ), {, return, this, ., tickUnits, ., size, (, ), ;, }, public]
[., tickUnits, ), ;, }, public, int, size, (, ), {, return, this, ., tickUnits, ., size, (, ), ;]
[;, }, public, TickUnit, get, (, int, pos, ), {, return, (, TickUnit, ), this, ., tickUnits, ., get, (]
[., size, (, ), ;, }, public, TickUnit, get, (, int, pos, ), {, return, (, TickUnit, ), this, .]
[., tickUnits, ., size, (, ), ;, }, public, TickUnit, get, (, int, pos, ), {, return, (, TickUnit, )]
[;, }, public, TickUnit, getLargerTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits]
[;, }, public, TickUnit, getLargerTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits]
[., get, (, pos, ), ;, }, public, TickUnit, getLargerTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, .]
[., tickUnits, ., get, (, pos, ), ;, }, public, TickUnit, getLargerTickUnit, (, TickUnit, unit, ), {, int, index, =]
[), ;, }, public, TickUnit, getLargerTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, .]
[;, if, (, index, >=, 0, ), {, index, =, index, +, 1, ;, }, else, {, index, =, -]
[., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {, index, =, index]
[,, unit, ), ;, if, (, index, >=, 0, ), {, index, =, index, +, 1, ;, }, else, {]
[., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {, index, =, index, +, 1, ;, }]
[), ;, if, (, index, >=, 0, ), {, index, =, index, +, 1, ;, }, else, {, index, =]
[), {, index, =, index, +, 1, ;, }, else, {, index, =, -, index, ;, }, return, (, TickUnit]
[>=, 0, ), {, index, =, index, +, 1, ;, }, else, {, index, =, -, index, ;, }, return]
[), {, index, =, index, +, 1, ;, }, else, {, index, =, -, index, ;, }, return, (, TickUnit]
[=, index, +, 1, ;, }, else, {, index, =, -, index, ;, }, return, (, TickUnit, ), this, .]
[;, }, else, {, index, =, -, index, ;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (]
[+, 1, ;, }, else, {, index, =, -, index, ;, }, return, (, TickUnit, ), this, ., tickUnits, .]
[;, }, else, {, index, =, -, index, ;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (]
[=, -, index, ;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index]
[;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,, this, .]
[;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,, this, .]
[;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits]
[;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits]
[., get, (, Math, ., min, (, index, ,, this, ., tickUnits, ., size, (, ), -, 1, ), )]
[., tickUnits, ., get, (, Math, ., min, (, index, ,, this, ., tickUnits, ., size, (, ), -, 1]
[), ;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, .]
[., min, (, index, ,, this, ., tickUnits, ., size, (, ), -, 1, ), ), ;, }, public, TickUnit]
[,, this, ., tickUnits, ., size, (, ), -, 1, ), ), ;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit]
[), ), ;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this]
[-, 1, ), ), ;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch]
[., size, (, ), -, 1, ), ), ;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index]
[., tickUnits, ., size, (, ), -, 1, ), ), ;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {]
[), ), ;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this]
[;, if, (, index, >=, 0, ), {, return, (, TickUnit, ), this, ., tickUnits, ., get, (, index, )]
[., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {, return, (, TickUnit]
[,, unit, ), ;, if, (, index, >=, 0, ), {, return, (, TickUnit, ), this, ., tickUnits, ., get]
[., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {, return, (, TickUnit, ), this, ., tickUnits]
[), ;, if, (, index, >=, 0, ), {, return, (, TickUnit, ), this, ., tickUnits, ., get, (, index]
[), {, return, (, TickUnit, ), this, ., tickUnits, ., get, (, index, ), ;, }, else, {, index, =]
[>=, 0, ), {, return, (, TickUnit, ), this, ., tickUnits, ., get, (, index, ), ;, }, else, {]
[), {, return, (, TickUnit, ), this, ., tickUnits, ., get, (, index, ), ;, }, else, {, index, =]
[;, }, else, {, index, =, -, (, index, +, 1, ), ;, return, (, TickUnit, ), this, ., tickUnits]
[;, }, else, {, index, =, -, (, index, +, 1, ), ;, return, (, TickUnit, ), this, ., tickUnits]
[., get, (, index, ), ;, }, else, {, index, =, -, (, index, +, 1, ), ;, return, (]
[., tickUnits, ., get, (, index, ), ;, }, else, {, index, =, -, (, index, +, 1, ), ;]
[), ;, }, else, {, index, =, -, (, index, +, 1, ), ;, return, (, TickUnit, ), this, .]
[=, -, (, index, +, 1, ), ;, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, .]
[;, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,, this, ., tickUnits]
[;, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,, this, ., tickUnits]
[), ;, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,, this, .]
[+, 1, ), ;, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,]
[), ;, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,, this, .]
[;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return, getCeilingTickUnit, (, new, NumberTickUnit, (, size, ,, NumberFormat]
[;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return, getCeilingTickUnit, (, new, NumberTickUnit, (, size, ,, NumberFormat]
[., get, (, Math, ., min, (, index, ,, this, ., tickUnits, ., size, (, ), -, 1, ), )]
[., tickUnits, ., get, (, Math, ., min, (, index, ,, this, ., tickUnits, ., size, (, ), -, 1]
[), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return, getCeilingTickUnit, (, new, NumberTickUnit, (, size, ,]
[., min, (, index, ,, this, ., tickUnits, ., size, (, ), -, 1, ), ), ;, }, }, public]
[,, this, ., tickUnits, ., size, (, ), -, 1, ), ), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double]
[), ), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return, getCeilingTickUnit, (, new, NumberTickUnit, (, size]
[-, 1, ), ), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return, getCeilingTickUnit, (, new, NumberTickUnit]
[., size, (, ), -, 1, ), ), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return]
[., tickUnits, ., size, (, ), -, 1, ), ), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, )]
[), ), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return, getCeilingTickUnit, (, new, NumberTickUnit, (, size]
[;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, TickUnits, clone, =, (, TickUnits, ), super, ., clone, (]
[), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, TickUnits, clone, =, (, TickUnits, ), super, ., clone]
[,, NumberFormat, ., getInstance, (, ), ), ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, TickUnits, clone]
[), ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, TickUnits, clone, =, (, TickUnits, ), super, .]
[., getInstance, (, ), ), ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, TickUnits, clone, =, (]
[;, clone, ., tickUnits, =, new, java, ., util, ., ArrayList, (, this, ., tickUnits, ), ;, return, clone, ;]
[;, clone, ., tickUnits, =, new, java, ., util, ., ArrayList, (, this, ., tickUnits, ), ;, return, clone, ;]
[., clone, (, ), ;, clone, ., tickUnits, =, new, java, ., util, ., ArrayList, (, this, ., tickUnits, )]
[=, new, java, ., util, ., ArrayList, (, this, ., tickUnits, ), ;, return, clone, ;, }, public, boolean, equals]
[., tickUnits, =, new, java, ., util, ., ArrayList, (, this, ., tickUnits, ), ;, return, clone, ;, }, public]
[;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {]
[), ;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, )]
[., tickUnits, ), ;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, TickUnits, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, TickUnits, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, TickUnits, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, TickUnits, ), ), {, return, false, ;, }, TickUnits, that, =, (]
[), {, return, false, ;, }, TickUnits, that, =, (, TickUnits, ), obj, ;, return, that, ., tickUnits, ., equals]
[), {, return, false, ;, }, TickUnits, that, =, (, TickUnits, ), obj, ;, return, that, ., tickUnits, ., equals]
[), ), {, return, false, ;, }, TickUnits, that, =, (, TickUnits, ), obj, ;, return, that, ., tickUnits, .]
[instanceof, TickUnits, ), ), {, return, false, ;, }, TickUnits, that, =, (, TickUnits, ), obj, ;, return, that, .]
[;, }, TickUnits, that, =, (, TickUnits, ), obj, ;, return, that, ., tickUnits, ., equals, (, this, ., tickUnits]
[;, return, that, ., tickUnits, ., equals, (, this, ., tickUnits, ), ;, }, }]
[;, return, that, ., tickUnits, ., equals, (, this, ., tickUnits, ), ;, }, }]
[;, }, }]
[., equals, (, this, ., tickUnits, ), ;, }, }]
[., tickUnits, ., equals, (, this, ., tickUnits, ), ;, }, }]
[), ;, }, }]
[., tickUnits, ), ;, }, }]
