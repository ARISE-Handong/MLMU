[google, ., javascript, ., rhino, ., jstype, ., TernaryValue, ;, class, CheckUnreachableCode, implements, ScopedCallback, {, static, final, DiagnosticType, UNREACHABLE_CODE, =]
[google, ., javascript, ., rhino, ., jstype, ., TernaryValue, ;, class, CheckUnreachableCode, implements, ScopedCallback, {, static, final, DiagnosticType, UNREACHABLE_CODE, =]
[rhino, ., jstype, ., TernaryValue, ;, class, CheckUnreachableCode, implements, ScopedCallback, {, static, final, DiagnosticType, UNREACHABLE_CODE, =, DiagnosticType, ., error, (]
[jstype, ., TernaryValue, ;, class, CheckUnreachableCode, implements, ScopedCallback, {, static, final, DiagnosticType, UNREACHABLE_CODE, =, DiagnosticType, ., error, (, "JSC_UNREACHABLE_CODE", ,]
[;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, level, ;, CheckUnreachableCode, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {]
[;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, level, ;, CheckUnreachableCode, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {]
[compiler, ;, private, final, CheckLevel, level, ;, CheckUnreachableCode, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =]
[private, final, CheckLevel, level, ;, CheckUnreachableCode, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;]
[private, final, CheckLevel, level, ;, CheckUnreachableCode, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;]
[;, CheckUnreachableCode, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., level, =]
[=, compiler, ;, this, ., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[;, this, ., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, initScope, (]
[;, this, ., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, initScope, (]
[shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, GraphNode, <, Node, ,, Branch, >, gNode, =]
[shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, GraphNode, <, Node, ,, Branch, >, gNode, =]
[shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, GraphNode, <, Node, ,, Branch, >, gNode, =]
[Node, parent, ), {, GraphNode, <, Node, ,, Branch, >, gNode, =, t, ., getControlFlowGraph, (, ), ., getNode, (]
[<, Node, ,, Branch, >, gNode, =, t, ., getControlFlowGraph, (, ), ., getNode, (, n, ), ;, if, (]
[<, Node, ,, Branch, >, gNode, =, t, ., getControlFlowGraph, (, ), ., getNode, (, n, ), ;, if, (]
[<, Node, ,, Branch, >, gNode, =, t, ., getControlFlowGraph, (, ), ., getNode, (, n, ), ;, if, (]
[,, Branch, >, gNode, =, t, ., getControlFlowGraph, (, ), ., getNode, (, n, ), ;, if, (, gNode, !=]
[>, gNode, =, t, ., getControlFlowGraph, (, ), ., getNode, (, n, ), ;, if, (, gNode, !=, null, &&]
[>, gNode, =, t, ., getControlFlowGraph, (, ), ., getNode, (, n, ), ;, if, (, gNode, !=, null, &&]
[>, gNode, =, t, ., getControlFlowGraph, (, ), ., getNode, (, n, ), ;, if, (, gNode, !=, null, &&]
[(, ), ., getNode, (, n, ), ;, if, (, gNode, !=, null, &&, gNode, ., getAnnotation, (, ), !=]
[(, ), ., getNode, (, n, ), ;, if, (, gNode, !=, null, &&, gNode, ., getAnnotation, (, ), !=]
[;, if, (, gNode, !=, null, &&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (]
[;, if, (, gNode, !=, null, &&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (]
[;, if, (, gNode, !=, null, &&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (]
[;, if, (, gNode, !=, null, &&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (]
[;, if, (, gNode, !=, null, &&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (]
[&&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (, n, ., getLineno, (, ), !=]
[gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (, n, ., getLineno, (, ), !=, -]
[getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (, n, ., getLineno, (, ), !=, -, 1, &&]
[(, ), !=, GraphReachability, ., REACHABLE, ), {, if, (, n, ., getLineno, (, ), !=, -, 1, &&, !]
[(, ), !=, GraphReachability, ., REACHABLE, ), {, if, (, n, ., getLineno, (, ), !=, -, 1, &&, !]
[), {, if, (, n, ., getLineno, (, ), !=, -, 1, &&, !, n, ., isEmpty, (, ), &&]
[{, if, (, n, ., getLineno, (, ), !=, -, 1, &&, !, n, ., isEmpty, (, ), &&, !]
[{, if, (, n, ., getLineno, (, ), !=, -, 1, &&, !, n, ., isEmpty, (, ), &&, !]
[), !=, -, 1, &&, !, n, ., isEmpty, (, ), &&, !, n, ., isBreak, (, ), ), {]
[), !=, -, 1, &&, !, n, ., isEmpty, (, ), &&, !, n, ., isBreak, (, ), ), {]
[&&, !, n, ., isEmpty, (, ), &&, !, n, ., isBreak, (, ), ), {, compiler, ., report, (]
[&&, !, n, ., isEmpty, (, ), &&, !, n, ., isBreak, (, ), ), {, compiler, ., report, (]
[isEmpty, (, ), &&, !, n, ., isBreak, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[), &&, !, n, ., isBreak, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[!, n, ., isBreak, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, level, ,]
[(, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, level, ,, UNREACHABLE_CODE, ), ), ;]
[(, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, level, ,, UNREACHABLE_CODE, ), ), ;]
[makeError, (, n, ,, level, ,, UNREACHABLE_CODE, ), ), ;, new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (]
[makeError, (, n, ,, level, ,, UNREACHABLE_CODE, ), ), ;, new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (]
[;, new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, ), ), ., recompute, (]
[Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, ), ), ., recompute, (, n, ), ;, return]
[>, (, t, ., getControlFlowGraph, (, ), ), ., recompute, (, n, ), ;, return, false, ;, }, }, return]
[return, false, ;, }, }, return, true, ;, }, private, void, initScope, (, ControlFlowGraph, <, Node, >, controlFlowGraph, ), {]
[return, false, ;, }, }, return, true, ;, }, private, void, initScope, (, ControlFlowGraph, <, Node, >, controlFlowGraph, ), {]
[void, initScope, (, ControlFlowGraph, <, Node, >, controlFlowGraph, ), {, new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (]
[(, ControlFlowGraph, <, Node, >, controlFlowGraph, ), {, new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, controlFlowGraph, ,]
[new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, controlFlowGraph, ,, new, ReachablePredicate, (, ), ), ., compute, (]
[new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, controlFlowGraph, ,, new, ReachablePredicate, (, ), ), ., compute, (]
[new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, controlFlowGraph, ,, new, ReachablePredicate, (, ), ), ., compute, (]
[>, {, @, Override, public, boolean, apply, (, EdgeTuple, <, Node, ,, Branch, >, input, ), {, Branch, branch, =]
[>, {, @, Override, public, boolean, apply, (, EdgeTuple, <, Node, ,, Branch, >, input, ), {, Branch, branch, =]
[apply, (, EdgeTuple, <, Node, ,, Branch, >, input, ), {, Branch, branch, =, input, ., edge, ;, if, (]
[(, EdgeTuple, <, Node, ,, Branch, >, input, ), {, Branch, branch, =, input, ., edge, ;, if, (, !]
[(, EdgeTuple, <, Node, ,, Branch, >, input, ), {, Branch, branch, =, input, ., edge, ;, if, (, !]
[), {, Branch, branch, =, input, ., edge, ;, if, (, !, branch, ., isConditional, (, ), ), {, return]
[., edge, ;, if, (, !, branch, ., isConditional, (, ), ), {, return, true, ;, }, Node, predecessor, =]
[., edge, ;, if, (, !, branch, ., isConditional, (, ), ), {, return, true, ;, }, Node, predecessor, =]
[., isConditional, (, ), ), {, return, true, ;, }, Node, predecessor, =, input, ., sourceNode, ;, Node, condition, =]
[., isConditional, (, ), ), {, return, true, ;, }, Node, predecessor, =, input, ., sourceNode, ;, Node, condition, =]
[), {, return, true, ;, }, Node, predecessor, =, input, ., sourceNode, ;, Node, condition, =, NodeUtil, ., getConditionExpression, (]
[}, Node, predecessor, =, input, ., sourceNode, ;, Node, condition, =, NodeUtil, ., getConditionExpression, (, predecessor, ), ;, if, (]
[}, Node, predecessor, =, input, ., sourceNode, ;, Node, condition, =, NodeUtil, ., getConditionExpression, (, predecessor, ), ;, if, (]
[predecessor, =, input, ., sourceNode, ;, Node, condition, =, NodeUtil, ., getConditionExpression, (, predecessor, ), ;, if, (, condition, !=]
[Node, condition, =, NodeUtil, ., getConditionExpression, (, predecessor, ), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =]
[Node, condition, =, NodeUtil, ., getConditionExpression, (, predecessor, ), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =]
[., getConditionExpression, (, predecessor, ), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (]
[;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (]
[;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (]
[(, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=]
[(, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=]
[TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return]
[TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return]
[TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return]
[., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (]
[condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==]
[), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (]
[), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (]
[if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (, branch, ==]
[if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (, branch, ==]
[{, return, val, ., toBoolean, (, true, ), ==, (, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, return]
