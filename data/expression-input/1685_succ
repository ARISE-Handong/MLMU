[;, public, static, Stroke, DEFAULT_ADVANCE_LINE_STROKE, =, new, BasicStroke, (, 1.0f, ), ;, public, static, final, Paint, DEFAULT_ADVANCE_LINE_PAINT, =, Color, .]
[;, public, static, Stroke, DEFAULT_ADVANCE_LINE_STROKE, =, new, BasicStroke, (, 1.0f, ), ;, public, static, final, Paint, DEFAULT_ADVANCE_LINE_PAINT, =, Color, .]
[;, public, static, final, Paint, DEFAULT_ADVANCE_LINE_PAINT, =, Color, ., gray, ;, protected, double, offset, ;, protected, double, period, ;, protected]
[), ;, public, static, final, Paint, DEFAULT_ADVANCE_LINE_PAINT, =, Color, ., gray, ;, protected, double, offset, ;, protected, double, period, ;]
[;, protected, double, offset, ;, protected, double, period, ;, protected, boolean, boundMappedToLastCycle, ;, protected, boolean, advanceLineVisible, ;, protected, transient, Stroke]
[., gray, ;, protected, double, offset, ;, protected, double, period, ;, protected, boolean, boundMappedToLastCycle, ;, protected, boolean, advanceLineVisible, ;, protected]
[;, protected, transient, Paint, advanceLinePaint, ;, private, transient, boolean, internalMarkerWhenTicksOverlap, ;, private, transient, Tick, internalMarkerCycleBoundTick, ;, public, CyclicNumberAxis, (, double]
[,, 0.0, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, double, offset, ), {, this, (, period, ,, offset]
[), ;, }, public, CyclicNumberAxis, (, double, period, ,, double, offset, ), {, this, (, period, ,, offset, ,, null]
[,, offset, ,, null, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, String, label, ), {, this, (, 0]
[,, null, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, String, label, ), {, this, (, 0, ,, period]
[), ;, }, public, CyclicNumberAxis, (, double, period, ,, String, label, ), {, this, (, 0, ,, period, ,, label]
[,, period, ,, label, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, double, offset, ,, String, label, ), {]
[,, label, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, double, offset, ,, String, label, ), {, super, (]
[), ;, }, public, CyclicNumberAxis, (, double, period, ,, double, offset, ,, String, label, ), {, super, (, label, )]
[), ;, this, ., period, =, period, ;, this, ., offset, =, offset, ;, setFixedAutoRange, (, period, ), ;, this]
[=, period, ;, this, ., offset, =, offset, ;, setFixedAutoRange, (, period, ), ;, this, ., advanceLineVisible, =, true, ;]
[., period, =, period, ;, this, ., offset, =, offset, ;, setFixedAutoRange, (, period, ), ;, this, ., advanceLineVisible, =]
[;, this, ., offset, =, offset, ;, setFixedAutoRange, (, period, ), ;, this, ., advanceLineVisible, =, true, ;, this, .]
[=, offset, ;, setFixedAutoRange, (, period, ), ;, this, ., advanceLineVisible, =, true, ;, this, ., advanceLinePaint, =, DEFAULT_ADVANCE_LINE_PAINT, ;]
[., offset, =, offset, ;, setFixedAutoRange, (, period, ), ;, this, ., advanceLineVisible, =, true, ;, this, ., advanceLinePaint, =]
[;, setFixedAutoRange, (, period, ), ;, this, ., advanceLineVisible, =, true, ;, this, ., advanceLinePaint, =, DEFAULT_ADVANCE_LINE_PAINT, ;, }, public]
[;, this, ., advanceLineVisible, =, true, ;, this, ., advanceLinePaint, =, DEFAULT_ADVANCE_LINE_PAINT, ;, }, public, boolean, isAdvanceLineVisible, (, ), {]
[), ;, this, ., advanceLineVisible, =, true, ;, this, ., advanceLinePaint, =, DEFAULT_ADVANCE_LINE_PAINT, ;, }, public, boolean, isAdvanceLineVisible, (, )]
[=, true, ;, this, ., advanceLinePaint, =, DEFAULT_ADVANCE_LINE_PAINT, ;, }, public, boolean, isAdvanceLineVisible, (, ), {, return, this, ., advanceLineVisible]
[., advanceLineVisible, =, true, ;, this, ., advanceLinePaint, =, DEFAULT_ADVANCE_LINE_PAINT, ;, }, public, boolean, isAdvanceLineVisible, (, ), {, return, this]
[;, this, ., advanceLinePaint, =, DEFAULT_ADVANCE_LINE_PAINT, ;, }, public, boolean, isAdvanceLineVisible, (, ), {, return, this, ., advanceLineVisible, ;, }]
[=, DEFAULT_ADVANCE_LINE_PAINT, ;, }, public, boolean, isAdvanceLineVisible, (, ), {, return, this, ., advanceLineVisible, ;, }, public, void, setAdvanceLineVisible, (]
[., advanceLinePaint, =, DEFAULT_ADVANCE_LINE_PAINT, ;, }, public, boolean, isAdvanceLineVisible, (, ), {, return, this, ., advanceLineVisible, ;, }, public, void]
[;, }, public, boolean, isAdvanceLineVisible, (, ), {, return, this, ., advanceLineVisible, ;, }, public, void, setAdvanceLineVisible, (, boolean, visible]
[;, }, public, void, setAdvanceLineVisible, (, boolean, visible, ), {, this, ., advanceLineVisible, =, visible, ;, }, public, Paint, getAdvanceLinePaint]
[., advanceLineVisible, ;, }, public, void, setAdvanceLineVisible, (, boolean, visible, ), {, this, ., advanceLineVisible, =, visible, ;, }, public]
[=, visible, ;, }, public, Paint, getAdvanceLinePaint, (, ), {, return, this, ., advanceLinePaint, ;, }, public, void, setAdvanceLinePaint, (]
[., advanceLineVisible, =, visible, ;, }, public, Paint, getAdvanceLinePaint, (, ), {, return, this, ., advanceLinePaint, ;, }, public, void]
[;, }, public, Paint, getAdvanceLinePaint, (, ), {, return, this, ., advanceLinePaint, ;, }, public, void, setAdvanceLinePaint, (, Paint, paint]
[;, }, public, void, setAdvanceLinePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException]
[., advanceLinePaint, ;, }, public, void, setAdvanceLinePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., advanceLinePaint, =, paint, ;, }, public, Stroke, getAdvanceLineStroke]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., advanceLinePaint, =, paint, ;, }, public]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., advanceLinePaint, =, paint, ;, }, public, Stroke, getAdvanceLineStroke]
[;, }, this, ., advanceLinePaint, =, paint, ;, }, public, Stroke, getAdvanceLineStroke, (, ), {, return, this, ., advanceLineStroke, ;]
[), ;, }, this, ., advanceLinePaint, =, paint, ;, }, public, Stroke, getAdvanceLineStroke, (, ), {, return, this, ., advanceLineStroke]
[=, paint, ;, }, public, Stroke, getAdvanceLineStroke, (, ), {, return, this, ., advanceLineStroke, ;, }, public, void, setAdvanceLineStroke, (]
[., advanceLinePaint, =, paint, ;, }, public, Stroke, getAdvanceLineStroke, (, ), {, return, this, ., advanceLineStroke, ;, }, public, void]
[;, }, public, Stroke, getAdvanceLineStroke, (, ), {, return, this, ., advanceLineStroke, ;, }, public, void, setAdvanceLineStroke, (, Stroke, stroke]
[;, }, public, void, setAdvanceLineStroke, (, Stroke, stroke, ), {, if, (, stroke, ==, null, ), {, throw, new, IllegalArgumentException]
[., advanceLineStroke, ;, }, public, void, setAdvanceLineStroke, (, Stroke, stroke, ), {, if, (, stroke, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'stroke' argument.", ), ;, }, this, ., advanceLineStroke, =, stroke, ;, }, public, boolean, isBoundMappedToLastCycle]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'stroke' argument.", ), ;, }, this, ., advanceLineStroke, =, stroke, ;, }, public]
[), {, throw, new, IllegalArgumentException, (, "Null 'stroke' argument.", ), ;, }, this, ., advanceLineStroke, =, stroke, ;, }, public, boolean, isBoundMappedToLastCycle]
[;, }, this, ., advanceLineStroke, =, stroke, ;, }, public, boolean, isBoundMappedToLastCycle, (, ), {, return, this, ., boundMappedToLastCycle, ;]
[), ;, }, this, ., advanceLineStroke, =, stroke, ;, }, public, boolean, isBoundMappedToLastCycle, (, ), {, return, this, ., boundMappedToLastCycle]
[=, stroke, ;, }, public, boolean, isBoundMappedToLastCycle, (, ), {, return, this, ., boundMappedToLastCycle, ;, }, public, void, setBoundMappedToLastCycle, (]
[., advanceLineStroke, =, stroke, ;, }, public, boolean, isBoundMappedToLastCycle, (, ), {, return, this, ., boundMappedToLastCycle, ;, }, public, void]
[;, }, public, boolean, isBoundMappedToLastCycle, (, ), {, return, this, ., boundMappedToLastCycle, ;, }, public, void, setBoundMappedToLastCycle, (, boolean, boundMappedToLastCycle]
[;, }, public, void, setBoundMappedToLastCycle, (, boolean, boundMappedToLastCycle, ), {, this, ., boundMappedToLastCycle, =, boundMappedToLastCycle, ;, }, protected, void, selectHorizontalAutoTickUnit]
[., boundMappedToLastCycle, ;, }, public, void, setBoundMappedToLastCycle, (, boolean, boundMappedToLastCycle, ), {, this, ., boundMappedToLastCycle, =, boundMappedToLastCycle, ;, }, protected]
[=, boundMappedToLastCycle, ;, }, protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, )]
[., boundMappedToLastCycle, =, boundMappedToLastCycle, ;, }, protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[;, }, protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double]
[;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getWidth, (, ), ;]
[,, getTickUnit, (, ), ), ;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea]
[), ;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getWidth, (, )]
[;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,, false, ,, false, ), ;]
[/, dataArea, ., getWidth, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, )]
[*, tickLabelWidth, /, dataArea, ., getWidth, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (]
[., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getWidth, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (]
[/, dataArea, ., getWidth, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, )]
[;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,, false, ,, false, ), ;]
[., getWidth, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,, false]
[;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double]
[,, false, ,, false, ), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,]
[,, false, ,, false, ), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,]
[., getCeilingTickUnit, (, n, ), ,, false, ,, false, ), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D]
[), ,, false, ,, false, ), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea]
[,, false, ), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {]
[;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getHeight, (, ), ;]
[,, getTickUnit, (, ), ), ;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea]
[), ;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getHeight, (, )]
[;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,, false, ,, false, ), ;]
[/, dataArea, ., getHeight, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, )]
[*, tickLabelWidth, /, dataArea, ., getHeight, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (]
[., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getHeight, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (]
[/, dataArea, ., getHeight, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, )]
[;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,, false, ,, false, ), ;]
[., getHeight, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,, false]
[;, }, protected, static, class, CycleBoundTick, extends, NumberTick, {, public, boolean, mapToLastCycle, ;, public, CycleBoundTick, (, boolean, mapToLastCycle, ,, Number]
[,, false, ,, false, ), ;, }, protected, static, class, CycleBoundTick, extends, NumberTick, {, public, boolean, mapToLastCycle, ;, public, CycleBoundTick]
[,, false, ,, false, ), ;, }, protected, static, class, CycleBoundTick, extends, NumberTick, {, public, boolean, mapToLastCycle, ;, public, CycleBoundTick]
[., getCeilingTickUnit, (, n, ), ,, false, ,, false, ), ;, }, protected, static, class, CycleBoundTick, extends, NumberTick, {, public]
[), ,, false, ,, false, ), ;, }, protected, static, class, CycleBoundTick, extends, NumberTick, {, public, boolean, mapToLastCycle, ;, public]
[,, false, ), ;, }, protected, static, class, CycleBoundTick, extends, NumberTick, {, public, boolean, mapToLastCycle, ;, public, CycleBoundTick, (, boolean]
[), ;, }, protected, static, class, CycleBoundTick, extends, NumberTick, {, public, boolean, mapToLastCycle, ;, public, CycleBoundTick, (, boolean, mapToLastCycle, ,]
[,, label, ,, textAnchor, ,, rotationAnchor, ,, angle, ), ;, this, ., mapToLastCycle, =, mapToLastCycle, ;, }, }, protected, float]
[,, textAnchor, ,, rotationAnchor, ,, angle, ), ;, this, ., mapToLastCycle, =, mapToLastCycle, ;, }, }, protected, float, [, ]]
[,, rotationAnchor, ,, angle, ), ;, this, ., mapToLastCycle, =, mapToLastCycle, ;, }, }, protected, float, [, ], calculateAnchorPoint, (]
[,, angle, ), ;, this, ., mapToLastCycle, =, mapToLastCycle, ;, }, }, protected, float, [, ], calculateAnchorPoint, (, ValueTick, tick]
[), ;, this, ., mapToLastCycle, =, mapToLastCycle, ;, }, }, protected, float, [, ], calculateAnchorPoint, (, ValueTick, tick, ,, double]
[=, mapToLastCycle, ;, }, }, protected, float, [, ], calculateAnchorPoint, (, ValueTick, tick, ,, double, cursor, ,, Rectangle2D, dataArea, ,]
[., mapToLastCycle, =, mapToLastCycle, ;, }, }, protected, float, [, ], calculateAnchorPoint, (, ValueTick, tick, ,, double, cursor, ,, Rectangle2D]
[;, }, }, protected, float, [, ], calculateAnchorPoint, (, ValueTick, tick, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[), {, boolean, mapsav, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, (, (, CycleBoundTick, ), tick, ), .]
[instanceof, CycleBoundTick, ), {, boolean, mapsav, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, (, (, CycleBoundTick, ), tick]
[;, this, ., boundMappedToLastCycle, =, (, (, CycleBoundTick, ), tick, ), ., mapToLastCycle, ;, float, [, ], ret, =, super]
[., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, (, (, CycleBoundTick, ), tick, ), ., mapToLastCycle, ;, float, [, ], ret]
[=, (, (, CycleBoundTick, ), tick, ), ., mapToLastCycle, ;, float, [, ], ret, =, super, ., calculateAnchorPoint, (, tick]
[., boundMappedToLastCycle, =, (, (, CycleBoundTick, ), tick, ), ., mapToLastCycle, ;, float, [, ], ret, =, super, ., calculateAnchorPoint]
[;, float, [, ], ret, =, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, this]
[., mapToLastCycle, ;, float, [, ], ret, =, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, )]
[), ., mapToLastCycle, ;, float, [, ], ret, =, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge]
[), ., mapToLastCycle, ;, float, [, ], ret, =, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge]
[;, this, ., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,]
[., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, this, ., boundMappedToLastCycle, =, mapsav, ;, return, ret]
[,, cursor, ,, dataArea, ,, edge, ), ;, this, ., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return, super]
[,, dataArea, ,, edge, ), ;, this, ., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return, super, ., calculateAnchorPoint]
[,, edge, ), ;, this, ., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return, super, ., calculateAnchorPoint, (, tick]
[), ;, this, ., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return, super, ., calculateAnchorPoint, (, tick, ,, cursor]
[=, mapsav, ;, return, ret, ;, }, return, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, )]
[., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,]
[;, return, ret, ;, }, return, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, }]
[;, }, return, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, }, protected, List, refreshTicksHorizontal]
[;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, result, =, new]
[., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,]
[,, cursor, ,, dataArea, ,, edge, ), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[,, dataArea, ,, edge, ), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, )]
[,, edge, ), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List]
[), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, result, =]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, )]
[;, g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea]
[;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, double, unit]
[., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge]
[), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, double]
[), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, double, unit, =, getTickUnit, (, ), ., getSize]
[;, }, double, unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;]
[,, dataArea, ,, edge, ), ;, }, double, unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound]
[,, edge, ), ;, }, double, unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound]
[), ;, }, double, unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, )]
[;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /, unit, ), *]
[., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound]
[;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /, unit, ), *, unit, ;, double, upperValue, =, getRange, (]
[;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =]
[*, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean]
[., ceil, (, cycleBound, /, unit, ), *, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, )]
[), *, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;]
[/, unit, ), *, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =]
[), *, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;]
[;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =]
[;, boolean, cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, false, ;, CycleBoundTick]
[., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle]
[;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, false, ;, CycleBoundTick, lastTick, =, null, ;, float]
[;, this, ., boundMappedToLastCycle, =, false, ;, CycleBoundTick, lastTick, =, null, ;, float, lastX, =, 0.0f, ;, if, (, upperValue]
[., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, false, ;, CycleBoundTick, lastTick, =, null, ;, float, lastX, =, 0.0f, ;, if]
[=, false, ;, CycleBoundTick, lastTick, =, null, ;, float, lastX, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {]
[., boundMappedToLastCycle, =, false, ;, CycleBoundTick, lastTick, =, null, ;, float, lastX, =, 0.0f, ;, if, (, upperValue, ==, cycleBound]
[;, CycleBoundTick, lastTick, =, null, ;, float, lastX, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =]
[;, float, lastX, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled]
[;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, .]
[), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while]
[==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;]
[), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while]
[=, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=]
[;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean]
[=, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =]
[;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;]
[=, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue]
[., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (]
[;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit]
[), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, )]
[<=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !]
[), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, )]
[;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }]
[), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String]
[&&, !, cycled, ), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge]
[), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,]
[>, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,]
[+, unit, >, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (]
[>, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,]
[), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,]
[), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String]
[), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String]
[=, true, ;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat]
[;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=]
[,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, )]
[), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel]
[;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {]
[), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (, ), .]
[!=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (]
[), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (, ), .]
[=, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue]
[;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;, }, float, x, =, (]
[., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;]
[), ;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;, }, float, x, =]
[=, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;, }, float, x, =, (, float, ), xx, ;, TextAnchor]
[;, }, float, x, =, (, float, ), xx, ;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;]
[., valueToString, (, currentTickValue, ), ;, }, float, x, =, (, float, ), xx, ;, TextAnchor, anchor, =, null, ;]
[), ;, }, float, x, =, (, float, ), xx, ;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null]
[;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (]
[;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (]
[;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., TOP]
[;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math]
[), {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }]
[), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /]
[==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -]
[), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /]
[., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, .]
[=, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }]
[;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[/, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, anchor, =, TextAnchor, .]
[., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, anchor, =]
[;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[=, -, Math, ., PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=]
[;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x]
[/, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX]
[/, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX]
[., PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&]
[;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x]
[=, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (]
[;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, )]
[., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, .]
[&&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[!=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted]
[), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, .]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor]
[==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove]
[!=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove]
[=, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1]
[:, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, .]
[., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, .]
[., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[-, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, )]
[., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT]
[., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (]
[), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, .]
[,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle]
[., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick]
[,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this]
[., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, )]
[,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor]
[., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap]
[,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted]
[,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, )]
[), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor]
[., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }, rotationAnchor, =]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }]
[;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }, rotationAnchor, =, anchor, ;]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else]
[;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =]
[?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (, edge]
[:, TextAnchor, ., TOP_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP]
[., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (, edge, ==, RectangleEdge]
[;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =]
[., TOP_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[=, anchor, ;, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER]
[;, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if]
[), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x]
[==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&]
[), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x]
[., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX]
[=, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (]
[;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, )]
[., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, .]
[&&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[!=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted]
[), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, .]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor]
[==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove]
[!=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1]
[:, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, .]
[., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, .]
[., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[-, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, )]
[., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT]
[., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (]
[), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, .]
[,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle]
[., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick]
[,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this]
[., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, )]
[,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor]
[., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap]
[,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted]
[,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, )]
[), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor]
[., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }]
[;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else]
[;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=]
[?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor]
[:, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if]
[., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER]
[;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=]
[., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (]
[=, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&]
[;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX]
[=, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (]
[;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, )]
[., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, .]
[&&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[!=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted]
[), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, .]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor]
[==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove]
[!=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove]
[=, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1]
[:, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, .]
[., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, .]
[., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[-, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, )]
[., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT]
[., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (]
[), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, .]
[,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle]
[., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick]
[,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this]
[., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, )]
[,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor]
[., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap]
[,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted]
[,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, )]
[), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor]
[., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT, ;, }, rotationAnchor, =]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT, ;, }]
[;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT, ;, }, rotationAnchor, =, anchor, ;]
[=, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }]
[;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double]
[?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new]
[:, TextAnchor, ., TOP_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, .]
[., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (]
[;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double]
[., TOP_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[=, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, )]
[;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel]
[;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick]
[,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==]
[., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (]
[,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick]
[), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, .]
[,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick]
[,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }]
[,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, .]
[), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (]
[), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;]
[==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =]
[), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;]
[=, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastX, =, x, ;, currentTickValue]
[., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastX, =, x]
[;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastX, =, x, ;, currentTickValue, +=, unit]
[;, lastTick, =, tick, ;, lastX, =, x, ;, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =]
[., add, (, tick, ), ;, lastTick, =, tick, ;, lastX, =, x, ;, currentTickValue, +=, unit, ;, if, (]
[), ;, lastTick, =, tick, ;, lastX, =, x, ;, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue]
[=, tick, ;, lastX, =, x, ;, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (]
[;, lastX, =, x, ;, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;]
[=, x, ;, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =]
[;, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;]
[+=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =]
[;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;]
[), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =]
[=, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }]
[;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, }, this, ., boundMappedToLastCycle]
[=, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping]
[;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return]
[=, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;]
[;, this, ., boundMappedToLastCycle, =, true, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;, }, protected]
[=, true, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;, }, protected, List, refreshVerticalTicks, (, Graphics2D]
[., boundMappedToLastCycle, =, true, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;, }, protected, List, refreshVerticalTicks]
[;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;, }, protected, List, refreshVerticalTicks, (, Graphics2D, g2, ,]
[=, boundMapping, ;, return, result, ;, }, protected, List, refreshVerticalTicks, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, )]
[., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;, }, protected, List, refreshVerticalTicks, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[;, return, result, ;, }, protected, List, refreshVerticalTicks, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List]
[;, }, protected, List, refreshVerticalTicks, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, result, =, new]
[;, result, ., clear, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, )]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, )]
[., clear, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, if]
[;, g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea]
[;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, double, unit]
[., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge]
[), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, double]
[), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, double, unit, =, getTickUnit, (, ), ., getSize]
[;, }, double, unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;]
[,, dataArea, ,, edge, ), ;, }, double, unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound]
[,, edge, ), ;, }, double, unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound]
[), ;, }, double, unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, )]
[;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /, unit, ), *]
[., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound]
[;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /, unit, ), *, unit, ;, double, upperValue, =, getRange, (]
[;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =]
[*, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean]
[., ceil, (, cycleBound, /, unit, ), *, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, )]
[), *, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;]
[/, unit, ), *, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =]
[), *, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;]
[;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =]
[;, boolean, cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, true, ;, NumberTick]
[., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle]
[;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, true, ;, NumberTick, lastTick, =, null, ;, float]
[;, this, ., boundMappedToLastCycle, =, true, ;, NumberTick, lastTick, =, null, ;, float, lastY, =, 0.0f, ;, if, (, upperValue]
[., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, true, ;, NumberTick, lastTick, =, null, ;, float, lastY, =, 0.0f, ;, if]
[=, true, ;, NumberTick, lastTick, =, null, ;, float, lastY, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {]
[., boundMappedToLastCycle, =, true, ;, NumberTick, lastTick, =, null, ;, float, lastY, =, 0.0f, ;, if, (, upperValue, ==, cycleBound]
[;, NumberTick, lastTick, =, null, ;, float, lastY, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =]
[;, float, lastY, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled]
[;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, .]
[), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while]
[==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;]
[), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while]
[=, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=]
[;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean]
[=, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =]
[;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;]
[=, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue]
[., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (]
[;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit]
[), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, )]
[<=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !]
[), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, )]
[;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }]
[), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String]
[&&, !, cycled, ), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge]
[), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,]
[>, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,]
[+, unit, >, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (]
[>, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,]
[), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,]
[), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String]
[), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String]
[=, true, ;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat]
[;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=]
[,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, )]
[), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel]
[;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {]
[), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (, ), .]
[!=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (]
[), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (, ), .]
[=, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue]
[;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;, }, float, y, =, (]
[., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;]
[), ;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;, }, float, y, =]
[=, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;, }, float, y, =, (, float, ), yy, ;, TextAnchor]
[;, }, float, y, =, (, float, ), yy, ;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;]
[., valueToString, (, currentTickValue, ), ;, }, float, y, =, (, float, ), yy, ;, TextAnchor, anchor, =, null, ;]
[), ;, }, float, y, =, (, float, ), yy, ;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null]
[;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (]
[;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (]
[;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT]
[;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor]
[), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (]
[), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y]
[==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&]
[), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y]
[., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY]
[=, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, )]
[., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, .]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[!=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted]
[), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, .]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor]
[==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove]
[!=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1]
[:, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, .]
[., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, .]
[., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[-, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, )]
[., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT]
[., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (]
[), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, .]
[,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle]
[., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick]
[,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this]
[., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, )]
[,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor]
[., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap]
[,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted]
[,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, )]
[), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor]
[., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }]
[;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, angle, =]
[;, }, rotationAnchor, =, anchor, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =]
[?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, angle, =, -, Math, ., PI]
[:, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }]
[., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, angle, =, -, Math, ., PI, /, 2.0]
[;, }, rotationAnchor, =, anchor, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =]
[., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {]
[=, anchor, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER]
[;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if]
[=, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (]
[;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY]
[/, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&]
[/, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&]
[., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null]
[;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY]
[=, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, )]
[., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, .]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[!=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted]
[), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, .]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor]
[==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove]
[!=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (, result, ., size]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1]
[:, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, .]
[., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[., BOTTOM_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, .]
[., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[-, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, )]
[., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT]
[., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (]
[), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, .]
[,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle]
[., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick]
[,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this]
[., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, )]
[,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor]
[., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap]
[,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted]
[,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, )]
[), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor]
[., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }]
[;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, angle, =]
[;, }, rotationAnchor, =, anchor, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, angle, =, Math, ., PI, /]
[:, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }]
[., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, angle, =, Math, ., PI, /, 2.0, ;]
[;, }, rotationAnchor, =, anchor, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {]
[=, anchor, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge]
[;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT]
[=, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[/, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, .]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y]
[==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&]
[), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y]
[., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY]
[=, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, )]
[., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, .]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[!=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted]
[), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, .]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor]
[==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove]
[!=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1]
[:, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, .]
[., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, .]
[., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[-, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, )]
[., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT]
[., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (]
[), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, .]
[,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle]
[., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick]
[,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this]
[., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, )]
[,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor]
[., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap]
[,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted]
[,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, )]
[), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor]
[., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }]
[;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;]
[=, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else]
[;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=]
[?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor]
[:, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if]
[., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT]
[;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=]
[., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (]
[=, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&]
[;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY]
[=, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, )]
[., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, .]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[!=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted]
[), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, )]
[&&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, .]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor]
[==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT]
[), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove]
[!=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result]
[), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (, result, ., size]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1]
[:, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, .]
[., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick]
[., TOP_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, .]
[., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[-, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, )]
[., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick]
[), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick]
[;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT]
[., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (]
[), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, .]
[,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle]
[., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick]
[,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this]
[., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, )]
[,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor]
[., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap]
[,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted]
[,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, )]
[), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor]
[., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT, ;, }]
[;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;]
[=, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }]
[;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double]
[?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new]
[:, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, .]
[., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (]
[;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double]
[., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[=, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, )]
[;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel]
[;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick]
[,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==]
[., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (]
[,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick]
[), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, .]
[,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick]
[,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }]
[,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, .]
[), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (]
[), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;]
[==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =]
[), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;]
[=, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastY, =, y, ;, if]
[., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastY, =, y]
[;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastY, =, y, ;, if, (, currentTickValue]
[;, lastTick, =, tick, ;, lastY, =, y, ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =]
[., add, (, tick, ), ;, lastTick, =, tick, ;, lastY, =, y, ;, if, (, currentTickValue, ==, cycleBound, )]
[), ;, lastTick, =, tick, ;, lastY, =, y, ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick]
[=, tick, ;, lastY, =, y, ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;]
[;, lastY, =, y, ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue]
[=, y, ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue, +=, unit]
[;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue, +=, unit, ;, if]
[), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =]
[==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {]
[), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =]
[=, tick, ;, }, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue]
[., internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, )]
[;, }, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound]
[+=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =]
[;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;]
[), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =]
[=, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, false, ;, }]
[;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, false, ;, }, }, this, ., boundMappedToLastCycle]
[=, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, false, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping]
[;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, false, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return]
[=, true, ;, this, ., boundMappedToLastCycle, =, false, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;]
[;, this, ., boundMappedToLastCycle, =, false, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;, }, public]
[=, false, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;, }, public, double, java2DToValue, (, double]
[., boundMappedToLastCycle, =, false, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;, }, public, double, java2DToValue]
[;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;, }, public, double, java2DToValue, (, double, java2DValue, ,]
[=, boundMapping, ;, return, result, ;, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, )]
[., boundMappedToLastCycle, =, boundMapping, ;, return, result, ;, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[;, return, result, ;, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range]
[;, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange]
[;, double, vmax, =, range, ., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, double, jmin, =]
[;, double, vp, =, getCycleBound, (, ), ;, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (]
[., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, double, jmin, =, 0.0, ;, double, jmax, =]
[;, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), )]
[;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, .]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax]
[), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else]
[., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX]
[), ), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }]
[=, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge]
[;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), )]
[., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[=, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmin]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmin, =, dataArea, ., getMaxY, (, )]
[., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmin, =, dataArea]
[), {, jmin, =, dataArea, ., getMaxY, (, ), ;, jmax, =, dataArea, ., getMinY, (, ), ;, }, if]
[., isLeftOrRight, (, edge, ), ), {, jmin, =, dataArea, ., getMaxY, (, ), ;, jmax, =, dataArea, ., getMinY]
[), ), {, jmin, =, dataArea, ., getMaxY, (, ), ;, jmax, =, dataArea, ., getMinY, (, ), ;, }]
[=, dataArea, ., getMaxY, (, ), ;, jmax, =, dataArea, ., getMinY, (, ), ;, }, if, (, isInverted, (]
[;, jmax, =, dataArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, double, jbreak, =]
[., getMaxY, (, ), ;, jmax, =, dataArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), )]
[=, dataArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -]
[;, }, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -, (, vmax, -, vp, ), *]
[., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -, (, vmax]
[), {, double, jbreak, =, jmax, -, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this]
[;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, ), *, this, ., period]
[-, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue]
[;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, ), *, this, ., period]
[/, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, )]
[*, (, jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return]
[-, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, )]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return]
[/, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, )]
[), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue]
[-, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax]
[), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue]
[;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, ), *, this, ., period]
[., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, ), *, this]
[), {, return, vp, +, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, )]
[>=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -]
[), {, return, vp, +, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, )]
[;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -]
[+, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {]
[;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -]
[/, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this]
[*, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, java2DValue, -]
[), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, java2DValue]
[-, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -]
[), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, java2DValue]
[/, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this]
[., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, java2DValue, -, jmin, )]
[;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -]
[), ;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax]
[-, jmin, ), ;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this, ., period, /]
[), ;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax]
[;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /]
[-, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else]
[;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /]
[/, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *]
[*, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (, vmax]
[), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (]
[-, jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak]
[), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (]
[/, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *]
[., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (, vmax, -, vp]
[;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /]
[), ;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *, (, jmax, -, jmin, )]
[-, jmin, ), ;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *, (, jmax, -]
[), ;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *, (, jmax, -, jmin, )]
[;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, ), *, this, ., period]
[+, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, ), *, this]
[/, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -]
[*, (, jmax, -, jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {]
[), *, (, jmax, -, jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, )]
[-, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=]
[), *, (, jmax, -, jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, )]
[/, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -]
[), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue]
[-, jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +]
[), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue]
[+, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, ), *, this]
[., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, )]
[;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, ), *, this, ., period]
[), {, return, vp, +, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -, jmin, )]
[<=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -]
[), {, return, vp, +, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -, jmin, )]
[;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -]
[+, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {]
[;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -]
[/, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this]
[*, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, jmax, -]
[), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, jmax]
[-, jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -]
[), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, jmax]
[/, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this]
[., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, jmax, -, java2DValue, )]
[;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -]
[), ;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax]
[-, jmin, ), ;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this, ., period, /]
[), ;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax]
[;, }, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range]
[-, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, }]
[;, }, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range]
[/, (, jmax, -, jmin, ), ;, }, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, dataArea, ,]
[*, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, }, public, double, valueToJava2D, (, double, value]
[), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, }, public, double, valueToJava2D, (, double]
[-, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, }, public, double, valueToJava2D]
[), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, }, public, double, valueToJava2D, (, double]
[/, (, jmax, -, jmin, ), ;, }, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, dataArea, ,]
[., period, /, (, jmax, -, jmin, ), ;, }, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D]
[;, }, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range]
[), ;, }, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range]
[-, jmin, ), ;, }, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, )]
[), ;, }, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range]
[;, double, vmin, =, range, ., getLowerBound, (, ), ;, double, vmax, =, range, ., getUpperBound, (, ), ;, double]
[;, double, vmax, =, range, ., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, if, (, (]
[., getLowerBound, (, ), ;, double, vmax, =, range, ., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, )]
[;, double, vp, =, getCycleBound, (, ), ;, if, (, (, value, <, vmin, ), ||, (, value, >, vmax]
[., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, if, (, (, value, <, vmin, ), ||]
[;, if, (, (, value, <, vmin, ), ||, (, value, >, vmax, ), ), {, return, Double, ., NaN]
[), {, return, Double, ., NaN, ;, }, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (]
[||, (, value, >, vmax, ), ), {, return, Double, ., NaN, ;, }, double, jmin, =, 0.0, ;, double]
[), ||, (, value, >, vmax, ), ), {, return, Double, ., NaN, ;, }, double, jmin, =, 0.0, ;]
[<, vmin, ), ||, (, value, >, vmax, ), ), {, return, Double, ., NaN, ;, }, double, jmin, =]
[), ||, (, value, >, vmax, ), ), {, return, Double, ., NaN, ;, }, double, jmin, =, 0.0, ;]
[), {, return, Double, ., NaN, ;, }, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (]
[), ), {, return, Double, ., NaN, ;, }, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if]
[>, vmax, ), ), {, return, Double, ., NaN, ;, }, double, jmin, =, 0.0, ;, double, jmax, =, 0.0]
[), ), {, return, Double, ., NaN, ;, }, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if]
[;, }, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, )]
[., NaN, ;, }, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, .]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax]
[), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else]
[., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX]
[), ), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }]
[=, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge]
[;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), )]
[., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[=, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmax]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmax, =, dataArea, ., getMinY, (, )]
[., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmax, =, dataArea]
[), {, jmax, =, dataArea, ., getMinY, (, ), ;, jmin, =, dataArea, ., getMaxY, (, ), ;, }, if]
[., isLeftOrRight, (, edge, ), ), {, jmax, =, dataArea, ., getMinY, (, ), ;, jmin, =, dataArea, ., getMaxY]
[), ), {, jmax, =, dataArea, ., getMinY, (, ), ;, jmin, =, dataArea, ., getMaxY, (, ), ;, }]
[=, dataArea, ., getMinY, (, ), ;, jmin, =, dataArea, ., getMaxY, (, ), ;, }, if, (, isInverted, (]
[;, jmin, =, dataArea, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, if, (, value]
[., getMinY, (, ), ;, jmin, =, dataArea, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), )]
[=, dataArea, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, if, (, value, ==, vp]
[;, }, if, (, isInverted, (, ), ), {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle]
[., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, if, (, value, ==, vp, ), {]
[), {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else]
[), {, return, this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {]
[==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >, vp]
[), {, return, this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {]
[;, }, else, if, (, value, >, vp, ), {, return, jmax, -, (, value, -, vp, ), *, (]
[?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {, return, jmax, -, (, value, -]
[., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {, return, jmax, -, (]
[:, jmax, ;, }, else, if, (, value, >, vp, ), {, return, jmax, -, (, value, -, vp, )]
[;, }, else, if, (, value, >, vp, ), {, return, jmax, -, (, value, -, vp, ), *, (]
[), {, return, jmax, -, (, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period]
[>, vp, ), {, return, jmax, -, (, value, -, vp, ), *, (, jmax, -, jmin, ), /, this]
[), {, return, jmax, -, (, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period]
[;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (, jmax, -, jmin, ), /, this]
[-, (, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {]
[;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (, jmax, -, jmin, ), /, this]
[/, this, ., period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (, jmax, -]
[*, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +, (, vp, -]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +, (, vp]
[-, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +, (, vp]
[/, this, ., period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (, jmax, -]
[), /, this, ., period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (, jmax]
[-, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *]
[), /, this, ., period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (, jmax]
[;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (, jmax, -, jmin, ), /, this]
[., period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (, jmax, -, jmin, )]
[;, }, }, else, {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmax, :, jmin]
[+, (, vp, -, value, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, else]
[;, }, }, else, {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmax, :, jmin]
[/, this, ., period, ;, }, }, else, {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle]
[*, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, else, {, if, (, value, ==, vp]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, else, {, if, (, value, ==]
[-, value, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, else, {, if, (]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, else, {, if, (, value, ==]
[/, this, ., period, ;, }, }, else, {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle]
[), /, this, ., period, ;, }, }, else, {, if, (, value, ==, vp, ), {, return, this, .]
[-, jmin, ), /, this, ., period, ;, }, }, else, {, if, (, value, ==, vp, ), {, return]
[), /, this, ., period, ;, }, }, else, {, if, (, value, ==, vp, ), {, return, this, .]
[;, }, }, else, {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmax, :, jmin]
[., period, ;, }, }, else, {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmax]
[), {, return, this, ., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {]
[==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp]
[), {, return, this, ., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {]
[;, }, else, if, (, value, >=, vp, ), {, return, jmin, +, (, value, -, vp, ), *, (]
[?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {, return, jmin, +, (, value, -]
[., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {, return, jmin, +, (]
[:, jmin, ;, }, else, if, (, value, >=, vp, ), {, return, jmin, +, (, value, -, vp, )]
[;, }, else, if, (, value, >=, vp, ), {, return, jmin, +, (, value, -, vp, ), *, (]
[), {, return, jmin, +, (, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period]
[>=, vp, ), {, return, jmin, +, (, value, -, vp, ), *, (, jmax, -, jmin, ), /, this]
[), {, return, jmin, +, (, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period]
[;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (, jmax, -, jmin, ), /, this]
[+, (, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {]
[;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (, jmax, -, jmin, ), /, this]
[/, this, ., period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (, jmax, -]
[*, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -, (, vp, -]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -, (, vp]
[-, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -, (, vp]
[/, this, ., period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (, jmax, -]
[), /, this, ., period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (, jmax]
[-, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *]
[), /, this, ., period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (, jmax]
[;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (, jmax, -, jmin, ), /, this]
[., period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (, jmax, -, jmin, )]
[;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -, this, ., period, /]
[-, (, vp, -, value, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, }]
[;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -, this, ., period, /]
[/, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -]
[*, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, }, public, void, centerRange, (, double]
[-, value, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, }, public, void, centerRange]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, }, public, void, centerRange, (, double]
[/, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -]
[), /, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value]
[-, jmin, ), /, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange]
[), /, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value]
[;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -, this, ., period, /]
[., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -, this, .]
[;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, >, this, ., period]
[,, value, +, this, ., period, /, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify]
[-, this, ., period, /, 2.0, ,, value, +, this, ., period, /, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize]
[,, value, +, this, ., period, /, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify]
[/, 2.0, ,, value, +, this, ., period, /, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,]
[., period, /, 2.0, ,, value, +, this, ., period, /, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double]
[,, value, +, this, ., period, /, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify]
[), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, >, this, .]
[+, this, ., period, /, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {]
[), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, >, this, .]
[/, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, >]
[., period, /, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (]
[), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, >, this, .]
[), {, this, ., period, =, size, ;, }, super, ., setAutoRangeMinimumSize, (, size, ,, notify, ), ;, }, public]
[>, this, ., period, ), {, this, ., period, =, size, ;, }, super, ., setAutoRangeMinimumSize, (, size, ,, notify]
[), {, this, ., period, =, size, ;, }, super, ., setAutoRangeMinimumSize, (, size, ,, notify, ), ;, }, public]
[., period, ), {, this, ., period, =, size, ;, }, super, ., setAutoRangeMinimumSize, (, size, ,, notify, ), ;]
[=, size, ;, }, super, ., setAutoRangeMinimumSize, (, size, ,, notify, ), ;, }, public, void, setFixedAutoRange, (, double, length]
[., period, =, size, ;, }, super, ., setAutoRangeMinimumSize, (, size, ,, notify, ), ;, }, public, void, setFixedAutoRange, (]
[;, }, super, ., setAutoRangeMinimumSize, (, size, ,, notify, ), ;, }, public, void, setFixedAutoRange, (, double, length, ), {]
[;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., period, =, length, ;, super, ., setFixedAutoRange, (]
[., setAutoRangeMinimumSize, (, size, ,, notify, ), ;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., period]
[,, notify, ), ;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., period, =, length, ;, super]
[), ;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., period, =, length, ;, super, ., setFixedAutoRange]
[=, length, ;, super, ., setFixedAutoRange, (, length, ), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange]
[., period, =, length, ;, super, ., setFixedAutoRange, (, length, ), ;, }, public, void, setRange, (, Range, range, ,]
[;, super, ., setFixedAutoRange, (, length, ), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean]
[;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, double, size, =, range]
[., setFixedAutoRange, (, length, ), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, )]
[), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, double, size, =]
[;, if, (, size, >, this, ., period, ), {, this, ., period, =, size, ;, }, super, ., setRange]
[-, range, ., getLowerBound, (, ), ;, if, (, size, >, this, ., period, ), {, this, ., period, =]
[., getUpperBound, (, ), -, range, ., getLowerBound, (, ), ;, if, (, size, >, this, ., period, ), {]
[;, if, (, size, >, this, ., period, ), {, this, ., period, =, size, ;, }, super, ., setRange]
[., getLowerBound, (, ), ;, if, (, size, >, this, ., period, ), {, this, ., period, =, size, ;]
[), {, this, ., period, =, size, ;, }, super, ., setRange, (, range, ,, turnOffAutoRange, ,, notify, ), ;]
[>, this, ., period, ), {, this, ., period, =, size, ;, }, super, ., setRange, (, range, ,, turnOffAutoRange]
[), {, this, ., period, =, size, ;, }, super, ., setRange, (, range, ,, turnOffAutoRange, ,, notify, ), ;]
[., period, ), {, this, ., period, =, size, ;, }, super, ., setRange, (, range, ,, turnOffAutoRange, ,, notify]
[=, size, ;, }, super, ., setRange, (, range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (]
[., period, =, size, ;, }, super, ., setRange, (, range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double]
[;, }, super, ., setRange, (, range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {]
[;, }, public, double, getCycleBound, (, ), {, return, Math, ., floor, (, (, getRange, (, ), ., getUpperBound, (]
[., setRange, (, range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return, Math, .]
[,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return, Math, ., floor, (, (, getRange]
[,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return, Math, ., floor, (, (, getRange, (, )]
[), ;, }, public, double, getCycleBound, (, ), {, return, Math, ., floor, (, (, getRange, (, ), ., getUpperBound]
[;, }, public, double, getOffset, (, ), {, return, this, ., offset, ;, }, public, void, setOffset, (, double, offset]
[+, this, ., offset, ;, }, public, double, getOffset, (, ), {, return, this, ., offset, ;, }, public, void]
[*, this, ., period, +, this, ., offset, ;, }, public, double, getOffset, (, ), {, return, this, ., offset]
[., floor, (, (, getRange, (, ), ., getUpperBound, (, ), -, this, ., offset, ), /, this, ., period]
[), *, this, ., period, +, this, ., offset, ;, }, public, double, getOffset, (, ), {, return, this, .]
[/, this, ., period, ), *, this, ., period, +, this, ., offset, ;, }, public, double, getOffset, (, )]
[), /, this, ., period, ), *, this, ., period, +, this, ., offset, ;, }, public, double, getOffset, (]
[-, this, ., offset, ), /, this, ., period, ), *, this, ., period, +, this, ., offset, ;, }]
[., getUpperBound, (, ), -, this, ., offset, ), /, this, ., period, ), *, this, ., period, +, this]
[), /, this, ., period, ), *, this, ., period, +, this, ., offset, ;, }, public, double, getOffset, (]
[., offset, ), /, this, ., period, ), *, this, ., period, +, this, ., offset, ;, }, public, double]
[), *, this, ., period, +, this, ., offset, ;, }, public, double, getOffset, (, ), {, return, this, .]
[., period, ), *, this, ., period, +, this, ., offset, ;, }, public, double, getOffset, (, ), {, return]
[+, this, ., offset, ;, }, public, double, getOffset, (, ), {, return, this, ., offset, ;, }, public, void]
[., period, +, this, ., offset, ;, }, public, double, getOffset, (, ), {, return, this, ., offset, ;, }]
[;, }, public, double, getOffset, (, ), {, return, this, ., offset, ;, }, public, void, setOffset, (, double, offset]
[., offset, ;, }, public, double, getOffset, (, ), {, return, this, ., offset, ;, }, public, void, setOffset, (]
[;, }, public, void, setOffset, (, double, offset, ), {, this, ., offset, =, offset, ;, }, public, double, getPeriod]
[., offset, ;, }, public, void, setOffset, (, double, offset, ), {, this, ., offset, =, offset, ;, }, public]
[=, offset, ;, }, public, double, getPeriod, (, ), {, return, this, ., period, ;, }, public, void, setPeriod, (]
[., offset, =, offset, ;, }, public, double, getPeriod, (, ), {, return, this, ., period, ;, }, public, void]
[;, }, public, double, getPeriod, (, ), {, return, this, ., period, ;, }, public, void, setPeriod, (, double, period]
[;, }, public, void, setPeriod, (, double, period, ), {, this, ., period, =, period, ;, }, protected, AxisState, drawTickMarksAndLabels]
[., period, ;, }, public, void, setPeriod, (, double, period, ), {, this, ., period, =, period, ;, }, protected]
[=, period, ;, }, protected, AxisState, drawTickMarksAndLabels, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,]
[., period, =, period, ;, }, protected, AxisState, drawTickMarksAndLabels, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D]
[;, }, protected, AxisState, drawTickMarksAndLabels, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[=, false, ;, AxisState, ret, =, super, ., drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,]
[., internalMarkerWhenTicksOverlap, =, false, ;, AxisState, ret, =, super, ., drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,]
[;, AxisState, ret, =, super, ., drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, info, )]
[;, if, (, !, this, ., internalMarkerWhenTicksOverlap, ), {, return, ret, ;, }, double, ol, =, getTickMarkOutsideLength, (, ), ;]
[., drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, info, ), ;, if, (, !, this]
[,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, info, ), ;, if, (, !, this, ., internalMarkerWhenTicksOverlap, ), {]
[,, plotArea, ,, dataArea, ,, edge, ,, info, ), ;, if, (, !, this, ., internalMarkerWhenTicksOverlap, ), {, return, ret]
[,, dataArea, ,, edge, ,, info, ), ;, if, (, !, this, ., internalMarkerWhenTicksOverlap, ), {, return, ret, ;, }]
[,, edge, ,, info, ), ;, if, (, !, this, ., internalMarkerWhenTicksOverlap, ), {, return, ret, ;, }, double, ol]
[,, info, ), ;, if, (, !, this, ., internalMarkerWhenTicksOverlap, ), {, return, ret, ;, }, double, ol, =, getTickMarkOutsideLength]
[), ;, if, (, !, this, ., internalMarkerWhenTicksOverlap, ), {, return, ret, ;, }, double, ol, =, getTickMarkOutsideLength, (, )]
[), {, return, ret, ;, }, double, ol, =, getTickMarkOutsideLength, (, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (]
[), {, return, ret, ;, }, double, ol, =, getTickMarkOutsideLength, (, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (]
[., internalMarkerWhenTicksOverlap, ), {, return, ret, ;, }, double, ol, =, getTickMarkOutsideLength, (, ), ;, FontMetrics, fm, =, g2, .]
[;, }, double, ol, =, getTickMarkOutsideLength, (, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), )]
[;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, if, (, isVerticalTickLabels, (, ), ), {]
[;, if, (, isVerticalTickLabels, (, ), ), {, ol, =, fm, ., getMaxAdvance, (, ), ;, }, else, {, ol]
[., getFontMetrics, (, getTickLabelFont, (, ), ), ;, if, (, isVerticalTickLabels, (, ), ), {, ol, =, fm, ., getMaxAdvance]
[), ;, if, (, isVerticalTickLabels, (, ), ), {, ol, =, fm, ., getMaxAdvance, (, ), ;, }, else, {]
[), {, ol, =, fm, ., getMaxAdvance, (, ), ;, }, else, {, ol, =, fm, ., getHeight, (, )]
[=, fm, ., getMaxAdvance, (, ), ;, }, else, {, ol, =, fm, ., getHeight, (, ), ;, }, double]
[;, }, else, {, ol, =, fm, ., getHeight, (, ), ;, }, double, il, =, 0, ;, if, (]
[., getMaxAdvance, (, ), ;, }, else, {, ol, =, fm, ., getHeight, (, ), ;, }, double, il, =]
[=, fm, ., getHeight, (, ), ;, }, double, il, =, 0, ;, if, (, isTickMarksVisible, (, ), ), {]
[;, }, double, il, =, 0, ;, if, (, isTickMarksVisible, (, ), ), {, float, xx, =, (, float, )]
[., getHeight, (, ), ;, }, double, il, =, 0, ;, if, (, isTickMarksVisible, (, ), ), {, float, xx]
[;, if, (, isTickMarksVisible, (, ), ), {, float, xx, =, (, float, ), valueToJava2D, (, getRange, (, ), .]
[), {, float, xx, =, (, float, ), valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,]
[;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint]
[;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint]
[,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;]
[., getUpperBound, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke]
[,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, .]
[), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (]
[;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if]
[;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark]
[., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge]
[), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol]
[., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new]
[), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -]
[), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx]
[==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor]
[), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx]
[., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il]
[=, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor]
[,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[-, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark]
[,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, .]
[+, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new]
[,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, .]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (]
[), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx]
[==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor]
[), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx]
[., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il]
[=, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }]
[;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx]
[,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, )]
[+, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, )]
[,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark]
[,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, .]
[-, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new]
[,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, .]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il]
[==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il]
[., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor]
[=, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx]
[,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark]
[-, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark]
[,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (]
[+, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, .]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il]
[==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il]
[., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor]
[=, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il, ), ;, }]
[;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;, }, public, AxisState, draw, (, Graphics2D, g2]
[,, cursor, +, ol, ,, xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;]
[,, xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;]
[+, ol, ,, xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, return]
[,, xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;]
[,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;, }, public]
[), ;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;, }, public, AxisState, draw, (, Graphics2D]
[-, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;, }, public, AxisState, draw]
[), ;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;, }, public, AxisState, draw, (, Graphics2D]
[;, }, return, ret, ;, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D]
[., draw, (, mark, ), ;, }, return, ret, ;, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor]
[), ;, }, return, ret, ;, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,]
[;, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[;, if, (, isAdvanceLineVisible, (, ), ), {, double, xx, =, valueToJava2D, (, getRange, (, ), ., getUpperBound, (, )]
[., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, if, (, isAdvanceLineVisible, (]
[,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, if, (, isAdvanceLineVisible, (, ), ), {, double]
[,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, if, (, isAdvanceLineVisible, (, ), ), {, double, xx, =]
[,, dataArea, ,, edge, ,, plotState, ), ;, if, (, isAdvanceLineVisible, (, ), ), {, double, xx, =, valueToJava2D, (]
[,, edge, ,, plotState, ), ;, if, (, isAdvanceLineVisible, (, ), ), {, double, xx, =, valueToJava2D, (, getRange, (]
[,, plotState, ), ;, if, (, isAdvanceLineVisible, (, ), ), {, double, xx, =, valueToJava2D, (, getRange, (, ), .]
[), ;, if, (, isAdvanceLineVisible, (, ), ), {, double, xx, =, valueToJava2D, (, getRange, (, ), ., getUpperBound, (]
[), {, double, xx, =, valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,, edge, ), ;]
[;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getAdvanceLineStroke, (, ), ), ;, g2, ., setPaint, (, getAdvanceLinePaint]
[,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getAdvanceLineStroke, (, ), ), ;]
[., getUpperBound, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getAdvanceLineStroke]
[,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getAdvanceLineStroke, (, ), ), ;, g2, .]
[), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getAdvanceLineStroke, (, ), ), ;, g2, ., setPaint, (]
[;, g2, ., setStroke, (, getAdvanceLineStroke, (, ), ), ;, g2, ., setPaint, (, getAdvanceLinePaint, (, ), ), ;, if]
[;, g2, ., setPaint, (, getAdvanceLinePaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark]
[., setStroke, (, getAdvanceLineStroke, (, ), ), ;, g2, ., setPaint, (, getAdvanceLinePaint, (, ), ), ;, if, (, edge]
[), ;, g2, ., setPaint, (, getAdvanceLinePaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, ,, xx]
[., setPaint, (, getAdvanceLinePaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new]
[), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, ,]
[), {, mark, =, new, Line2D, ., Double, (, cursor, ,, xx, ,, cursor, +, dataArea, ., getWidth, (, )]
[==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, ,, xx, ,, cursor, +, dataArea]
[), {, mark, =, new, Line2D, ., Double, (, cursor, ,, xx, ,, cursor, +, dataArea, ., getWidth, (, )]
[., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, ,, xx, ,, cursor, +, dataArea, ., getWidth]
[=, new, Line2D, ., Double, (, cursor, ,, xx, ,, cursor, +, dataArea, ., getWidth, (, ), ,, xx, )]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor]
[,, xx, ,, cursor, +, dataArea, ., getWidth, (, ), ,, xx, ), ;, }, else, if, (, edge, ==]
[,, cursor, +, dataArea, ., getWidth, (, ), ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, .]
[+, dataArea, ., getWidth, (, ), ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, .]
[., getWidth, (, ), ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (]
[), {, mark, =, new, Line2D, ., Double, (, cursor, -, dataArea, ., getWidth, (, ), ,, xx, ,, cursor]
[==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, dataArea, ., getWidth, (, )]
[), {, mark, =, new, Line2D, ., Double, (, cursor, -, dataArea, ., getWidth, (, ), ,, xx, ,, cursor]
[., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, dataArea, ., getWidth, (, ), ,, xx]
[=, new, Line2D, ., Double, (, cursor, -, dataArea, ., getWidth, (, ), ,, xx, ,, cursor, ,, xx, )]
[;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx]
[,, xx, ,, cursor, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark]
[-, dataArea, ., getWidth, (, ), ,, xx, ,, cursor, ,, xx, ), ;, }, else, if, (, edge, ==]
[,, xx, ,, cursor, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark]
[., getWidth, (, ), ,, xx, ,, cursor, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[,, cursor, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new]
[,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, .]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, dataArea, ., getHeight, (, ), ,, xx]
[==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, dataArea, ., getHeight]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, dataArea, ., getHeight, (, ), ,, xx]
[., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, dataArea, ., getHeight, (, )]
[=, new, Line2D, ., Double, (, xx, ,, cursor, +, dataArea, ., getHeight, (, ), ,, xx, ,, cursor, )]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx]
[,, cursor, +, dataArea, ., getHeight, (, ), ,, xx, ,, cursor, ), ;, }, else, if, (, edge, ==]
[,, xx, ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new]
[+, dataArea, ., getHeight, (, ), ,, xx, ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[,, xx, ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new]
[., getHeight, (, ), ,, xx, ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, .]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,, cursor, -, dataArea, ., getHeight]
[==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,, cursor]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,, cursor, -, dataArea, ., getHeight]
[., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,, cursor, -, dataArea]
[=, new, Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,, cursor, -, dataArea, ., getHeight, (, ), )]
[;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2]
[,, cursor, ,, xx, ,, cursor, -, dataArea, ., getHeight, (, ), ), ;, }, g2, ., draw, (, mark]
[,, xx, ,, cursor, -, dataArea, ., getHeight, (, ), ), ;, }, g2, ., draw, (, mark, ), ;]
[,, cursor, -, dataArea, ., getHeight, (, ), ), ;, }, g2, ., draw, (, mark, ), ;, }, return]
[), ;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D]
[-, dataArea, ., getHeight, (, ), ), ;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;]
[), ;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D]
[., getHeight, (, ), ), ;, }, g2, ., draw, (, mark, ), ;, }, return, ret, ;, }, public]
[;, }, return, ret, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge]
[., draw, (, mark, ), ;, }, return, ret, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot]
[), ;, }, return, ret, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,]
[;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space]
[=, null, ;, AxisSpace, ret, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, )]
[., internalMarkerCycleBoundTick, =, null, ;, AxisSpace, ret, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,]
[;, AxisSpace, ret, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, if]
[;, if, (, this, ., internalMarkerCycleBoundTick, ==, null, ), {, return, ret, ;, }, FontMetrics, fm, =, g2, ., getFontMetrics]
[., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, if, (, this, ., internalMarkerCycleBoundTick, ==]
[,, plot, ,, plotArea, ,, edge, ,, space, ), ;, if, (, this, ., internalMarkerCycleBoundTick, ==, null, ), {, return]
[,, plotArea, ,, edge, ,, space, ), ;, if, (, this, ., internalMarkerCycleBoundTick, ==, null, ), {, return, ret, ;]
[,, edge, ,, space, ), ;, if, (, this, ., internalMarkerCycleBoundTick, ==, null, ), {, return, ret, ;, }, FontMetrics]
[,, space, ), ;, if, (, this, ., internalMarkerCycleBoundTick, ==, null, ), {, return, ret, ;, }, FontMetrics, fm, =]
[), ;, if, (, this, ., internalMarkerCycleBoundTick, ==, null, ), {, return, ret, ;, }, FontMetrics, fm, =, g2, .]
[), {, return, ret, ;, }, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Rectangle2D, r]
[==, null, ), {, return, ret, ;, }, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;]
[., internalMarkerCycleBoundTick, ==, null, ), {, return, ret, ;, }, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, )]
[), {, return, ret, ;, }, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Rectangle2D, r]
[;, }, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Rectangle2D, r, =, TextUtilities, ., getTextBounds]
[;, Rectangle2D, r, =, TextUtilities, ., getTextBounds, (, this, ., internalMarkerCycleBoundTick, ., getText, (, ), ,, g2, ,, fm, )]
[., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Rectangle2D, r, =, TextUtilities, ., getTextBounds, (, this, ., internalMarkerCycleBoundTick, ., getText]
[), ;, Rectangle2D, r, =, TextUtilities, ., getTextBounds, (, this, ., internalMarkerCycleBoundTick, ., getText, (, ), ,, g2, ,, fm]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, .]
[., getTextBounds, (, this, ., internalMarkerCycleBoundTick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (, RectangleEdge, .]
[,, g2, ,, fm, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, if, (, isVerticalTickLabels, (]
[., getText, (, ), ,, g2, ,, fm, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[., internalMarkerCycleBoundTick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, )]
[,, fm, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), )]
[), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {, space]
[), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, ., getHeight, (, ), /, 2]
[., isTopOrBottom, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, .]
[), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, ., getHeight, (, ), /]
[), {, space, ., add, (, r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }]
[;, }, else, {, space, ., add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., RIGHT, )]
[., add, (, r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, else, {, space]
[,, RectangleEdge, ., RIGHT, ), ;, }, else, {, space, ., add, (, r, ., getWidth, (, ), /, 2]
[/, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, else, {, space, ., add, (, r, ., getWidth, (, )]
[., getHeight, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, else, {, space, ., add, (, r]
[,, RectangleEdge, ., RIGHT, ), ;, }, else, {, space, ., add, (, r, ., getWidth, (, ), /, 2]
[), ;, }, else, {, space, ., add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., RIGHT]
[., RIGHT, ), ;, }, else, {, space, ., add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge]
[;, }, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), )]
[., add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, }, else, if]
[,, RectangleEdge, ., RIGHT, ), ;, }, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, if]
[/, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), )]
[., getWidth, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[,, RectangleEdge, ., RIGHT, ), ;, }, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, if]
[), ;, }, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, if, (, isVerticalTickLabels, (, )]
[., RIGHT, ), ;, }, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, if, (, isVerticalTickLabels]
[), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, ., getWidth, (, ), /, 2]
[., isLeftOrRight, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, .]
[), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, ., getWidth, (, ), /]
[), {, space, ., add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., TOP, ), ;, }]
[;, }, else, {, space, ., add, (, r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., TOP, )]
[., add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., TOP, ), ;, }, else, {, space]
[,, RectangleEdge, ., TOP, ), ;, }, else, {, space, ., add, (, r, ., getHeight, (, ), /, 2]
[/, 2, ,, RectangleEdge, ., TOP, ), ;, }, else, {, space, ., add, (, r, ., getHeight, (, )]
[., getWidth, (, ), /, 2, ,, RectangleEdge, ., TOP, ), ;, }, else, {, space, ., add, (, r]
[,, RectangleEdge, ., TOP, ), ;, }, else, {, space, ., add, (, r, ., getHeight, (, ), /, 2]
[), ;, }, else, {, space, ., add, (, r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., TOP]
[., TOP, ), ;, }, else, {, space, ., add, (, r, ., getHeight, (, ), /, 2, ,, RectangleEdge]
[;, }, }, return, ret, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject]
[., add, (, r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., TOP, ), ;, }, }, return, ret]
[,, RectangleEdge, ., TOP, ), ;, }, }, return, ret, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws]
[/, 2, ,, RectangleEdge, ., TOP, ), ;, }, }, return, ret, ;, }, private, void, writeObject, (, ObjectOutputStream, stream]
[., getHeight, (, ), /, 2, ,, RectangleEdge, ., TOP, ), ;, }, }, return, ret, ;, }, private, void]
[,, RectangleEdge, ., TOP, ), ;, }, }, return, ret, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws]
[), ;, }, }, return, ret, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, .]
[., TOP, ), ;, }, }, return, ret, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, .]
[;, SerialUtilities, ., writePaint, (, this, ., advanceLinePaint, ,, stream, ), ;, SerialUtilities, ., writeStroke, (, this, ., advanceLineStroke, ,]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., advanceLinePaint, ,, stream, ), ;, SerialUtilities, ., writeStroke, (]
[;, SerialUtilities, ., writeStroke, (, this, ., advanceLineStroke, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, )]
[., writePaint, (, this, ., advanceLinePaint, ,, stream, ), ;, SerialUtilities, ., writeStroke, (, this, ., advanceLineStroke, ,, stream, )]
[,, stream, ), ;, SerialUtilities, ., writeStroke, (, this, ., advanceLineStroke, ,, stream, ), ;, }, private, void, readObject, (]
[., advanceLinePaint, ,, stream, ), ;, SerialUtilities, ., writeStroke, (, this, ., advanceLineStroke, ,, stream, ), ;, }, private, void]
[), ;, SerialUtilities, ., writeStroke, (, this, ., advanceLineStroke, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[., writeStroke, (, this, ., advanceLineStroke, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException]
[,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject]
[., advanceLineStroke, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream]
[), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, )]
[;, this, ., advanceLinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., advanceLineStroke, =, SerialUtilities, ., readStroke, (]
[., defaultReadObject, (, ), ;, this, ., advanceLinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., advanceLineStroke, =]
[=, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., advanceLineStroke, =, SerialUtilities, ., readStroke, (, stream, ), ;, }]
[., advanceLinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., advanceLineStroke, =, SerialUtilities, ., readStroke, (, stream, )]
[;, this, ., advanceLineStroke, =, SerialUtilities, ., readStroke, (, stream, ), ;, }, public, boolean, equals, (, Object, obj, )]
[., readPaint, (, stream, ), ;, this, ., advanceLineStroke, =, SerialUtilities, ., readStroke, (, stream, ), ;, }, public, boolean]
[), ;, this, ., advanceLineStroke, =, SerialUtilities, ., readStroke, (, stream, ), ;, }, public, boolean, equals, (, Object, obj]
[=, SerialUtilities, ., readStroke, (, stream, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj]
[., advanceLineStroke, =, SerialUtilities, ., readStroke, (, stream, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[., readStroke, (, stream, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this]
[), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, CyclicNumberAxis, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, CyclicNumberAxis, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, CyclicNumberAxis, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, CyclicNumberAxis, ), ), {, return, false, ;, }, if, (, !, super]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false]
[instanceof, CyclicNumberAxis, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, CyclicNumberAxis, that, =]
[), {, return, false, ;, }, CyclicNumberAxis, that, =, (, CyclicNumberAxis, ), obj, ;, if, (, this, ., period, !=]
[), {, return, false, ;, }, CyclicNumberAxis, that, =, (, CyclicNumberAxis, ), obj, ;, if, (, this, ., period, !=]
[., equals, (, obj, ), ), {, return, false, ;, }, CyclicNumberAxis, that, =, (, CyclicNumberAxis, ), obj, ;, if]
[), ), {, return, false, ;, }, CyclicNumberAxis, that, =, (, CyclicNumberAxis, ), obj, ;, if, (, this, ., period]
[;, }, CyclicNumberAxis, that, =, (, CyclicNumberAxis, ), obj, ;, if, (, this, ., period, !=, that, ., period, )]
[;, if, (, this, ., period, !=, that, ., period, ), {, return, false, ;, }, if, (, this, .]
[;, if, (, this, ., period, !=, that, ., period, ), {, return, false, ;, }, if, (, this, .]
[), {, return, false, ;, }, if, (, this, ., offset, !=, that, ., offset, ), {, return, false, ;]
[!=, that, ., period, ), {, return, false, ;, }, if, (, this, ., offset, !=, that, ., offset, )]
[., period, !=, that, ., period, ), {, return, false, ;, }, if, (, this, ., offset, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., offset, !=, that, ., offset, ), {, return, false, ;]
[., period, ), {, return, false, ;, }, if, (, this, ., offset, !=, that, ., offset, ), {, return]
[;, }, if, (, this, ., offset, !=, that, ., offset, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., advanceLinePaint, ,, that, ., advanceLinePaint]
[!=, that, ., offset, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., advanceLinePaint]
[., offset, !=, that, ., offset, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., advanceLinePaint, ,, that, ., advanceLinePaint]
[., offset, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., advanceLinePaint, ,, that]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., advanceLinePaint, ,, that, ., advanceLinePaint, ), ), {, return]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,, that, ., advanceLineStroke]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,, that, ., advanceLineStroke]
[., equal, (, this, ., advanceLinePaint, ,, that, ., advanceLinePaint, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., advanceLinePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, .]
[., advanceLinePaint, ,, that, ., advanceLinePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,, that, .]
[., advanceLinePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,, that, ., advanceLineStroke, ), ), {, return]
[), {, return, false, ;, }, if, (, this, ., advanceLineVisible, !=, that, ., advanceLineVisible, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., advanceLineVisible, !=, that, ., advanceLineVisible, ), {, return, false, ;]
[., equal, (, this, ., advanceLineStroke, ,, that, ., advanceLineStroke, ), ), {, return, false, ;, }, if, (, this]
[,, that, ., advanceLineStroke, ), ), {, return, false, ;, }, if, (, this, ., advanceLineVisible, !=, that, ., advanceLineVisible]
[., advanceLineStroke, ,, that, ., advanceLineStroke, ), ), {, return, false, ;, }, if, (, this, ., advanceLineVisible, !=, that]
[), ), {, return, false, ;, }, if, (, this, ., advanceLineVisible, !=, that, ., advanceLineVisible, ), {, return, false]
[., advanceLineStroke, ), ), {, return, false, ;, }, if, (, this, ., advanceLineVisible, !=, that, ., advanceLineVisible, ), {]
[;, }, if, (, this, ., advanceLineVisible, !=, that, ., advanceLineVisible, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., boundMappedToLastCycle, !=, that, ., boundMappedToLastCycle, ), {, return, false, ;]
[!=, that, ., advanceLineVisible, ), {, return, false, ;, }, if, (, this, ., boundMappedToLastCycle, !=, that, ., boundMappedToLastCycle, )]
[., advanceLineVisible, !=, that, ., advanceLineVisible, ), {, return, false, ;, }, if, (, this, ., boundMappedToLastCycle, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., boundMappedToLastCycle, !=, that, ., boundMappedToLastCycle, ), {, return, false, ;]
[., advanceLineVisible, ), {, return, false, ;, }, if, (, this, ., boundMappedToLastCycle, !=, that, ., boundMappedToLastCycle, ), {, return]
[;, }, if, (, this, ., boundMappedToLastCycle, !=, that, ., boundMappedToLastCycle, ), {, return, false, ;, }, return, true, ;]
[), {, return, false, ;, }, return, true, ;, }, }]
[!=, that, ., boundMappedToLastCycle, ), {, return, false, ;, }, return, true, ;, }, }]
[., boundMappedToLastCycle, !=, that, ., boundMappedToLastCycle, ), {, return, false, ;, }, return, true, ;, }, }]
[), {, return, false, ;, }, return, true, ;, }, }]
[., boundMappedToLastCycle, ), {, return, false, ;, }, return, true, ;, }, }]
[;, }, return, true, ;, }, }]
[;, }, }]
