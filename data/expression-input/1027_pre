[., linear, ., RealMatrix, ;, public, class, AdamsNordsieckTransformer, {, private, static, final, Map, <, Integer, ,, AdamsNordsieckTransformer, >, CACHE, =]
[final, double, [, ], c1, ;, private, AdamsNordsieckTransformer, (, final, int, nSteps, ), {, FieldMatrix, <, BigFraction, >, bigP, =]
[[, ], c1, ;, private, AdamsNordsieckTransformer, (, final, int, nSteps, ), {, FieldMatrix, <, BigFraction, >, bigP, =, buildP, (]
[nSteps, ), {, FieldMatrix, <, BigFraction, >, bigP, =, buildP, (, nSteps, ), ;, FieldDecompositionSolver, <, BigFraction, >, pSolver, =]
[nSteps, ), {, FieldMatrix, <, BigFraction, >, bigP, =, buildP, (, nSteps, ), ;, FieldDecompositionSolver, <, BigFraction, >, pSolver, =]
[>, bigP, =, buildP, (, nSteps, ), ;, FieldDecompositionSolver, <, BigFraction, >, pSolver, =, new, FieldLUDecomposition, <, BigFraction, >, (]
[pSolver, =, new, FieldLUDecomposition, <, BigFraction, >, (, bigP, ), ., getSolver, (, ), ;, BigFraction, [, ], u, =]
[FieldLUDecomposition, <, BigFraction, >, (, bigP, ), ., getSolver, (, ), ;, BigFraction, [, ], u, =, new, BigFraction, []
[>, (, bigP, ), ., getSolver, (, ), ;, BigFraction, [, ], u, =, new, BigFraction, [, nSteps, ], ;]
[>, (, bigP, ), ., getSolver, (, ), ;, BigFraction, [, ], u, =, new, BigFraction, [, nSteps, ], ;]
[., getSolver, (, ), ;, BigFraction, [, ], u, =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (]
[(, ), ;, BigFraction, [, ], u, =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, u, ,]
[(, ), ;, BigFraction, [, ], u, =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, u, ,]
[[, nSteps, ], ;, Arrays, ., fill, (, u, ,, BigFraction, ., ONE, ), ;, BigFraction, [, ], bigC1, =]
[[, nSteps, ], ;, Arrays, ., fill, (, u, ,, BigFraction, ., ONE, ), ;, BigFraction, [, ], bigC1, =]
[[, nSteps, ], ;, Arrays, ., fill, (, u, ,, BigFraction, ., ONE, ), ;, BigFraction, [, ], bigC1, =]
[Arrays, ., fill, (, u, ,, BigFraction, ., ONE, ), ;, BigFraction, [, ], bigC1, =, pSolver, ., solve, (]
[BigFraction, ., ONE, ), ;, BigFraction, [, ], bigC1, =, pSolver, ., solve, (, new, ArrayFieldVector, <, BigFraction, >, (]
[ONE, ), ;, BigFraction, [, ], bigC1, =, pSolver, ., solve, (, new, ArrayFieldVector, <, BigFraction, >, (, u, ,]
[BigFraction, >, (, u, ,, false, ), ), ., toArray, (, ), ;, BigFraction, [, ], [, ], shiftedP, =]
[BigFraction, >, (, u, ,, false, ), ), ., toArray, (, ), ;, BigFraction, [, ], [, ], shiftedP, =]
[), ;, BigFraction, [, ], [, ], shiftedP, =, bigP, ., getData, (, ), ;, for, (, int, i, =]
[), ;, BigFraction, [, ], [, ], shiftedP, =, bigP, ., getData, (, ), ;, for, (, int, i, =]
[), ;, BigFraction, [, ], [, ], shiftedP, =, bigP, ., getData, (, ), ;, for, (, int, i, =]
[], [, ], shiftedP, =, bigP, ., getData, (, ), ;, for, (, int, i, =, shiftedP, ., length, -]
[], shiftedP, =, bigP, ., getData, (, ), ;, for, (, int, i, =, shiftedP, ., length, -, 1, ;]
[], shiftedP, =, bigP, ., getData, (, ), ;, for, (, int, i, =, shiftedP, ., length, -, 1, ;]
[=, bigP, ., getData, (, ), ;, for, (, int, i, =, shiftedP, ., length, -, 1, ;, i, >]
[., getData, (, ), ;, for, (, int, i, =, shiftedP, ., length, -, 1, ;, i, >, 0, ;]
[getData, (, ), ;, for, (, int, i, =, shiftedP, ., length, -, 1, ;, i, >, 0, ;, --]
[;, for, (, int, i, =, shiftedP, ., length, -, 1, ;, i, >, 0, ;, --, i, ), {]
[;, for, (, int, i, =, shiftedP, ., length, -, 1, ;, i, >, 0, ;, --, i, ), {]
[(, int, i, =, shiftedP, ., length, -, 1, ;, i, >, 0, ;, --, i, ), {, shiftedP, []
[=, shiftedP, ., length, -, 1, ;, i, >, 0, ;, --, i, ), {, shiftedP, [, i, ], =]
[=, shiftedP, ., length, -, 1, ;, i, >, 0, ;, --, i, ), {, shiftedP, [, i, ], =]
[., length, -, 1, ;, i, >, 0, ;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, []
[., length, -, 1, ;, i, >, 0, ;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, []
[-, 1, ;, i, >, 0, ;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, [, i, -]
[>, 0, ;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, [, i, -, 1, ], ;, }]
[>, 0, ;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, [, i, -, 1, ], ;, }]
[;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, [, i, -, 1, ], ;, }, shiftedP, []
[), {, shiftedP, [, i, ], =, shiftedP, [, i, -, 1, ], ;, }, shiftedP, [, 0, ], =]
[[, i, ], =, shiftedP, [, i, -, 1, ], ;, }, shiftedP, [, 0, ], =, new, BigFraction, []
[=, shiftedP, [, i, -, 1, ], ;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;]
[=, shiftedP, [, i, -, 1, ], ;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;]
[-, 1, ], ;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (]
[-, 1, ], ;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (]
[], ;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, shiftedP, []
[shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, shiftedP, [, 0, ], ,]
[shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, shiftedP, [, 0, ], ,]
[Arrays, ., fill, (, shiftedP, [, 0, ], ,, BigFraction, ., ZERO, ), ;, FieldMatrix, <, BigFraction, >, bigMSupdate, =]
[Arrays, ., fill, (, shiftedP, [, 0, ], ,, BigFraction, ., ZERO, ), ;, FieldMatrix, <, BigFraction, >, bigMSupdate, =]
[shiftedP, [, 0, ], ,, BigFraction, ., ZERO, ), ;, FieldMatrix, <, BigFraction, >, bigMSupdate, =, pSolver, ., solve, (]
[., ZERO, ), ;, FieldMatrix, <, BigFraction, >, bigMSupdate, =, pSolver, ., solve, (, new, Array2DRowFieldMatrix, <, BigFraction, >, (]
[), ;, FieldMatrix, <, BigFraction, >, bigMSupdate, =, pSolver, ., solve, (, new, Array2DRowFieldMatrix, <, BigFraction, >, (, shiftedP, ,]
[BigFraction, >, bigMSupdate, =, pSolver, ., solve, (, new, Array2DRowFieldMatrix, <, BigFraction, >, (, shiftedP, ,, false, ), ), ;]
[bigMSupdate, =, pSolver, ., solve, (, new, Array2DRowFieldMatrix, <, BigFraction, >, (, shiftedP, ,, false, ), ), ;, update, =]
[bigMSupdate, =, pSolver, ., solve, (, new, Array2DRowFieldMatrix, <, BigFraction, >, (, shiftedP, ,, false, ), ), ;, update, =]
[solve, (, new, Array2DRowFieldMatrix, <, BigFraction, >, (, shiftedP, ,, false, ), ), ;, update, =, MatrixUtils, ., bigFractionMatrixToRealMatrix, (]
[Array2DRowFieldMatrix, <, BigFraction, >, (, shiftedP, ,, false, ), ), ;, update, =, MatrixUtils, ., bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;]
[BigFraction, >, (, shiftedP, ,, false, ), ), ;, update, =, MatrixUtils, ., bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;, c1, =]
[shiftedP, ,, false, ), ), ;, update, =, MatrixUtils, ., bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;, c1, =, new, double, []
[MatrixUtils, ., bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;, c1, =, new, double, [, nSteps, ], ;, for, (, int, i, =]
[bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;, c1, =, new, double, [, nSteps, ], ;, for, (, int, i, =, 0, ;]
[bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;, c1, =, new, double, [, nSteps, ], ;, for, (, int, i, =, 0, ;]
[bigMSupdate, ), ;, c1, =, new, double, [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <]
[;, c1, =, new, double, [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <, nSteps, ;]
[c1, =, new, double, [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <, nSteps, ;, ++]
[double, [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <, nSteps, ;, ++, i, ), {]
[double, [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <, nSteps, ;, ++, i, ), {]
[nSteps, ], ;, for, (, int, i, =, 0, ;, i, <, nSteps, ;, ++, i, ), {, c1, []
[for, (, int, i, =, 0, ;, i, <, nSteps, ;, ++, i, ), {, c1, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, nSteps, ;, ++, i, ), {, c1, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, nSteps, ;, ++, i, ), {, c1, [, i, ], =]
[int, i, =, 0, ;, i, <, nSteps, ;, ++, i, ), {, c1, [, i, ], =, bigC1, []
[], ., doubleValue, (, ), ;, }, }, public, static, AdamsNordsieckTransformer, getInstance, (, final, int, nSteps, ), {, synchronized, (]
[}, }, public, static, AdamsNordsieckTransformer, getInstance, (, final, int, nSteps, ), {, synchronized, (, CACHE, ), {, AdamsNordsieckTransformer, t, =]
[}, }, public, static, AdamsNordsieckTransformer, getInstance, (, final, int, nSteps, ), {, synchronized, (, CACHE, ), {, AdamsNordsieckTransformer, t, =]
[AdamsNordsieckTransformer, getInstance, (, final, int, nSteps, ), {, synchronized, (, CACHE, ), {, AdamsNordsieckTransformer, t, =, CACHE, ., get, (]
[nSteps, ), {, synchronized, (, CACHE, ), {, AdamsNordsieckTransformer, t, =, CACHE, ., get, (, nSteps, ), ;, if, (]
[nSteps, ), {, synchronized, (, CACHE, ), {, AdamsNordsieckTransformer, t, =, CACHE, ., get, (, nSteps, ), ;, if, (]
[{, synchronized, (, CACHE, ), {, AdamsNordsieckTransformer, t, =, CACHE, ., get, (, nSteps, ), ;, if, (, t, ==]
[CACHE, ), {, AdamsNordsieckTransformer, t, =, CACHE, ., get, (, nSteps, ), ;, if, (, t, ==, null, ), {]
[{, AdamsNordsieckTransformer, t, =, CACHE, ., get, (, nSteps, ), ;, if, (, t, ==, null, ), {, t, =]
[=, CACHE, ., get, (, nSteps, ), ;, if, (, t, ==, null, ), {, t, =, new, AdamsNordsieckTransformer, (]
[get, (, nSteps, ), ;, if, (, t, ==, null, ), {, t, =, new, AdamsNordsieckTransformer, (, nSteps, ), ;]
[get, (, nSteps, ), ;, if, (, t, ==, null, ), {, t, =, new, AdamsNordsieckTransformer, (, nSteps, ), ;]
[;, if, (, t, ==, null, ), {, t, =, new, AdamsNordsieckTransformer, (, nSteps, ), ;, CACHE, ., put, (]
[(, t, ==, null, ), {, t, =, new, AdamsNordsieckTransformer, (, nSteps, ), ;, CACHE, ., put, (, nSteps, ,]
[{, t, =, new, AdamsNordsieckTransformer, (, nSteps, ), ;, CACHE, ., put, (, nSteps, ,, t, ), ;, }, return]
[put, (, nSteps, ,, t, ), ;, }, return, t, ;, }, }, public, int, getNSteps, (, ), {, return]
[put, (, nSteps, ,, t, ), ;, }, return, t, ;, }, }, public, int, getNSteps, (, ), {, return]
[private, FieldMatrix, <, BigFraction, >, buildP, (, final, int, nSteps, ), {, final, BigFraction, [, ], [, ], pData, =]
[BigFraction, >, buildP, (, final, int, nSteps, ), {, final, BigFraction, [, ], [, ], pData, =, new, BigFraction, []
[(, final, int, nSteps, ), {, final, BigFraction, [, ], [, ], pData, =, new, BigFraction, [, nSteps, ], []
[[, ], [, ], pData, =, new, BigFraction, [, nSteps, ], [, nSteps, ], ;, for, (, int, i, =]
[[, ], pData, =, new, BigFraction, [, nSteps, ], [, nSteps, ], ;, for, (, int, i, =, 0, ;]
[[, ], pData, =, new, BigFraction, [, nSteps, ], [, nSteps, ], ;, for, (, int, i, =, 0, ;]
[pData, =, new, BigFraction, [, nSteps, ], [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <]
[pData, =, new, BigFraction, [, nSteps, ], [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <]
[[, nSteps, ], [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <, pData, ., length, ;]
[nSteps, ], [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <, pData, ., length, ;, ++]
[i, =, 0, ;, i, <, pData, ., length, ;, ++, i, ), {, final, BigFraction, [, ], pI, =]
[i, =, 0, ;, i, <, pData, ., length, ;, ++, i, ), {, final, BigFraction, [, ], pI, =]
[0, ;, i, <, pData, ., length, ;, ++, i, ), {, final, BigFraction, [, ], pI, =, pData, []
[;, ++, i, ), {, final, BigFraction, [, ], pI, =, pData, [, i, ], ;, final, int, factor, =]
[++, i, ), {, final, BigFraction, [, ], pI, =, pData, [, i, ], ;, final, int, factor, =, -]
[i, ), {, final, BigFraction, [, ], pI, =, pData, [, i, ], ;, final, int, factor, =, -, (]
[i, ), {, final, BigFraction, [, ], pI, =, pData, [, i, ], ;, final, int, factor, =, -, (]
[{, final, BigFraction, [, ], pI, =, pData, [, i, ], ;, final, int, factor, =, -, (, i, +]
[=, pData, [, i, ], ;, final, int, factor, =, -, (, i, +, 1, ), ;, int, aj, =]
[int, factor, =, -, (, i, +, 1, ), ;, int, aj, =, factor, ;, for, (, int, j, =]
[=, -, (, i, +, 1, ), ;, int, aj, =, factor, ;, for, (, int, j, =, 0, ;]
[=, -, (, i, +, 1, ), ;, int, aj, =, factor, ;, for, (, int, j, =, 0, ;]
[(, i, +, 1, ), ;, int, aj, =, factor, ;, for, (, int, j, =, 0, ;, j, <]
[(, i, +, 1, ), ;, int, aj, =, factor, ;, for, (, int, j, =, 0, ;, j, <]
[), ;, int, aj, =, factor, ;, for, (, int, j, =, 0, ;, j, <, pI, ., length, ;]
[;, int, aj, =, factor, ;, for, (, int, j, =, 0, ;, j, <, pI, ., length, ;, ++]
[=, factor, ;, for, (, int, j, =, 0, ;, j, <, pI, ., length, ;, ++, j, ), {]
[=, factor, ;, for, (, int, j, =, 0, ;, j, <, pI, ., length, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, pI, ., length, ;, ++, j, ), {, pI, []
[int, j, =, 0, ;, j, <, pI, ., length, ;, ++, j, ), {, pI, [, j, ], =]
[0, ;, j, <, pI, ., length, ;, ++, j, ), {, pI, [, j, ], =, new, BigFraction, (]
[0, ;, j, <, pI, ., length, ;, ++, j, ), {, pI, [, j, ], =, new, BigFraction, (]
[j, <, pI, ., length, ;, ++, j, ), {, pI, [, j, ], =, new, BigFraction, (, aj, *]
[<, pI, ., length, ;, ++, j, ), {, pI, [, j, ], =, new, BigFraction, (, aj, *, (]
[<, pI, ., length, ;, ++, j, ), {, pI, [, j, ], =, new, BigFraction, (, aj, *, (]
[., length, ;, ++, j, ), {, pI, [, j, ], =, new, BigFraction, (, aj, *, (, j, +]
[j, ), {, pI, [, j, ], =, new, BigFraction, (, aj, *, (, j, +, 2, ), ), ;]
[{, pI, [, j, ], =, new, BigFraction, (, aj, *, (, j, +, 2, ), ), ;, aj, *=]
[=, new, BigFraction, (, aj, *, (, j, +, 2, ), ), ;, aj, *=, factor, ;, }, }, return]
[(, j, +, 2, ), ), ;, aj, *=, factor, ;, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (]
[+, 2, ), ), ;, aj, *=, factor, ;, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, pData, ,]
[], y, ,, final, double, [, ], [, ], yDot, ), {, final, double, [, ], [, ], a, =]
[final, double, [, ], [, ], yDot, ), {, final, double, [, ], [, ], a, =, new, double, []
[final, double, [, ], [, ], yDot, ), {, final, double, [, ], [, ], a, =, new, double, []
[[, ], [, ], yDot, ), {, final, double, [, ], [, ], a, =, new, double, [, 2, *]
[], [, ], yDot, ), {, final, double, [, ], [, ], a, =, new, double, [, 2, *, (]
[], [, ], yDot, ), {, final, double, [, ], [, ], a, =, new, double, [, 2, *, (]
[], [, ], yDot, ), {, final, double, [, ], [, ], a, =, new, double, [, 2, *, (]
[), {, final, double, [, ], [, ], a, =, new, double, [, 2, *, (, y, ., length, -]
[[, ], [, ], a, =, new, double, [, 2, *, (, y, ., length, -, 1, ), ], []
[[, ], [, ], a, =, new, double, [, 2, *, (, y, ., length, -, 1, ), ], []
[., length, -, 1, ), ], [, c1, ., length, ], ;, final, double, [, ], [, ], b, =]
[1, ), ], [, c1, ., length, ], ;, final, double, [, ], [, ], b, =, new, double, []
[1, ), ], [, c1, ., length, ], ;, final, double, [, ], [, ], b, =, new, double, []
[], [, c1, ., length, ], ;, final, double, [, ], [, ], b, =, new, double, [, 2, *]
[[, c1, ., length, ], ;, final, double, [, ], [, ], b, =, new, double, [, 2, *, (]
[[, c1, ., length, ], ;, final, double, [, ], [, ], b, =, new, double, [, 2, *, (]
[[, c1, ., length, ], ;, final, double, [, ], [, ], b, =, new, double, [, 2, *, (]
[], ;, final, double, [, ], [, ], b, =, new, double, [, 2, *, (, y, ., length, -]
[[, ], [, ], b, =, new, double, [, 2, *, (, y, ., length, -, 1, ), ], []
[[, ], [, ], b, =, new, double, [, 2, *, (, y, ., length, -, 1, ), ], []
[[, ], [, ], b, =, new, double, [, 2, *, (, y, ., length, -, 1, ), ], []
[[, ], b, =, new, double, [, 2, *, (, y, ., length, -, 1, ), ], [, y, []
[length, -, 1, ), ], [, y, [, 0, ], ., length, ], ;, final, double, [, ], y0, =]
[length, -, 1, ), ], [, y, [, 0, ], ., length, ], ;, final, double, [, ], y0, =]
[1, ), ], [, y, [, 0, ], ., length, ], ;, final, double, [, ], y0, =, y, []
[length, ], ;, final, double, [, ], y0, =, y, [, 0, ], ;, final, double, [, ], yDot0, =]
[length, ], ;, final, double, [, ], y0, =, y, [, 0, ], ;, final, double, [, ], yDot0, =]
[;, final, double, [, ], y0, =, y, [, 0, ], ;, final, double, [, ], yDot0, =, yDot, []
[[, 0, ], ;, final, double, [, ], yDot0, =, yDot, [, 0, ], ;, for, (, int, i, =]
[], ;, final, double, [, ], yDot0, =, yDot, [, 0, ], ;, for, (, int, i, =, 1, ;]
[], ;, final, double, [, ], yDot0, =, yDot, [, 0, ], ;, for, (, int, i, =, 1, ;]
[final, double, [, ], yDot0, =, yDot, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <]
[final, double, [, ], yDot0, =, yDot, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <]
[yDot0, =, yDot, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, y, ., length, ;]
[=, yDot, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, y, ., length, ;, ++]
[(, int, i, =, 1, ;, i, <, y, ., length, ;, ++, i, ), {, final, double, di, =]
[(, int, i, =, 1, ;, i, <, y, ., length, ;, ++, i, ), {, final, double, di, =]
[(, int, i, =, 1, ;, i, <, y, ., length, ;, ++, i, ), {, final, double, di, =]
[i, =, 1, ;, i, <, y, ., length, ;, ++, i, ), {, final, double, di, =, t, []
[;, i, <, y, ., length, ;, ++, i, ), {, final, double, di, =, t, [, i, ], -]
[;, i, <, y, ., length, ;, ++, i, ), {, final, double, di, =, t, [, i, ], -]
[<, y, ., length, ;, ++, i, ), {, final, double, di, =, t, [, i, ], -, t, []
[), {, final, double, di, =, t, [, i, ], -, t, [, 0, ], ;, final, double, ratio, =]
[), {, final, double, di, =, t, [, i, ], -, t, [, 0, ], ;, final, double, ratio, =]
[final, double, di, =, t, [, i, ], -, t, [, 0, ], ;, final, double, ratio, =, di, /]
[[, i, ], -, t, [, 0, ], ;, final, double, ratio, =, di, /, h, ;, double, dikM1Ohk, =]
[[, i, ], -, t, [, 0, ], ;, final, double, ratio, =, di, /, h, ;, double, dikM1Ohk, =]
[], -, t, [, 0, ], ;, final, double, ratio, =, di, /, h, ;, double, dikM1Ohk, =, 1, /]
[double, ratio, =, di, /, h, ;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ], aI, =]
[double, ratio, =, di, /, h, ;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ], aI, =]
[=, di, /, h, ;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ], aI, =, a, []
[=, di, /, h, ;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ], aI, =, a, []
[=, di, /, h, ;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ], aI, =, a, []
[/, h, ;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ], aI, =, a, [, 2, *]
[;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ], aI, =, a, [, 2, *, i, -]
[double, [, ], aI, =, a, [, 2, *, i, -, 2, ], ;, final, double, [, ], aDotI, =]
[double, [, ], aI, =, a, [, 2, *, i, -, 2, ], ;, final, double, [, ], aDotI, =]
[], aI, =, a, [, 2, *, i, -, 2, ], ;, final, double, [, ], aDotI, =, a, []
[], aI, =, a, [, 2, *, i, -, 2, ], ;, final, double, [, ], aDotI, =, a, []
[], aI, =, a, [, 2, *, i, -, 2, ], ;, final, double, [, ], aDotI, =, a, []
[=, a, [, 2, *, i, -, 2, ], ;, final, double, [, ], aDotI, =, a, [, 2, *]
[[, 2, *, i, -, 2, ], ;, final, double, [, ], aDotI, =, a, [, 2, *, i, -]
[final, double, [, ], aDotI, =, a, [, 2, *, i, -, 1, ], ;, for, (, int, j, =]
[[, ], aDotI, =, a, [, 2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;]
[[, ], aDotI, =, a, [, 2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;]
[aDotI, =, a, [, 2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <]
[aDotI, =, a, [, 2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <]
[2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <, aI, ., length, ;]
[*, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <, aI, ., length, ;, ++]
[1, ], ;, for, (, int, j, =, 0, ;, j, <, aI, ., length, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, aI, ., length, ;, ++, j, ), {, dikM1Ohk, *=]
[(, int, j, =, 0, ;, j, <, aI, ., length, ;, ++, j, ), {, dikM1Ohk, *=, ratio, ;]
[(, int, j, =, 0, ;, j, <, aI, ., length, ;, ++, j, ), {, dikM1Ohk, *=, ratio, ;]
[j, =, 0, ;, j, <, aI, ., length, ;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, []
[;, j, <, aI, ., length, ;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =]
[;, j, <, aI, ., length, ;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =]
[<, aI, ., length, ;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *]
[., length, ;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;]
[., length, ;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;]
[;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, []
[), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =]
[), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =]
[{, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =, (]
[{, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =, (]
[*=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =, (, j, +]
[aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =, (, j, +, 2, ), *]
[aDotI, [, j, ], =, (, j, +, 2, ), *, dikM1Ohk, ;, }, final, double, [, ], yI, =]
[aDotI, [, j, ], =, (, j, +, 2, ), *, dikM1Ohk, ;, }, final, double, [, ], yI, =]
[j, ], =, (, j, +, 2, ), *, dikM1Ohk, ;, }, final, double, [, ], yI, =, y, []
[dikM1Ohk, ;, }, final, double, [, ], yI, =, y, [, i, ], ;, final, double, [, ], yDotI, =]
[dikM1Ohk, ;, }, final, double, [, ], yI, =, y, [, i, ], ;, final, double, [, ], yDotI, =]
[}, final, double, [, ], yI, =, y, [, i, ], ;, final, double, [, ], yDotI, =, yDot, []
[i, ], ;, final, double, [, ], yDotI, =, yDot, [, i, ], ;, final, double, [, ], bI, =]
[i, ], ;, final, double, [, ], yDotI, =, yDot, [, i, ], ;, final, double, [, ], bI, =]
[;, final, double, [, ], yDotI, =, yDot, [, i, ], ;, final, double, [, ], bI, =, b, []
[;, final, double, [, ], yDotI, =, yDot, [, i, ], ;, final, double, [, ], bI, =, b, []
[;, final, double, [, ], yDotI, =, yDot, [, i, ], ;, final, double, [, ], bI, =, b, []
[double, [, ], yDotI, =, yDot, [, i, ], ;, final, double, [, ], bI, =, b, [, 2, *]
[], yDotI, =, yDot, [, i, ], ;, final, double, [, ], bI, =, b, [, 2, *, i, -]
[double, [, ], bI, =, b, [, 2, *, i, -, 2, ], ;, final, double, [, ], bDotI, =]
[double, [, ], bI, =, b, [, 2, *, i, -, 2, ], ;, final, double, [, ], bDotI, =]
[], bI, =, b, [, 2, *, i, -, 2, ], ;, final, double, [, ], bDotI, =, b, []
[], bI, =, b, [, 2, *, i, -, 2, ], ;, final, double, [, ], bDotI, =, b, []
[], bI, =, b, [, 2, *, i, -, 2, ], ;, final, double, [, ], bDotI, =, b, []
[=, b, [, 2, *, i, -, 2, ], ;, final, double, [, ], bDotI, =, b, [, 2, *]
[[, 2, *, i, -, 2, ], ;, final, double, [, ], bDotI, =, b, [, 2, *, i, -]
[final, double, [, ], bDotI, =, b, [, 2, *, i, -, 1, ], ;, for, (, int, j, =]
[[, ], bDotI, =, b, [, 2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;]
[[, ], bDotI, =, b, [, 2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;]
[bDotI, =, b, [, 2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <]
[bDotI, =, b, [, 2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <]
[2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <, yI, ., length, ;]
[*, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <, yI, ., length, ;, ++]
[1, ], ;, for, (, int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, ), {]
[1, ], ;, for, (, int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, ), {, bI, []
[int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, ), {, bI, [, j, ], =]
[int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, ), {, bI, [, j, ], =]
[int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, ), {, bI, [, j, ], =]
[int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, ), {, bI, [, j, ], =]
[=, 0, ;, j, <, yI, ., length, ;, ++, j, ), {, bI, [, j, ], =, yI, []
[j, <, yI, ., length, ;, ++, j, ), {, bI, [, j, ], =, yI, [, j, ], -]
[j, <, yI, ., length, ;, ++, j, ), {, bI, [, j, ], =, yI, [, j, ], -]
[yI, ., length, ;, ++, j, ), {, bI, [, j, ], =, yI, [, j, ], -, y0, []
[;, ++, j, ), {, bI, [, j, ], =, yI, [, j, ], -, y0, [, j, ], -]
[;, ++, j, ), {, bI, [, j, ], =, yI, [, j, ], -, y0, [, j, ], -]
[j, ), {, bI, [, j, ], =, yI, [, j, ], -, y0, [, j, ], -, di, *]
[j, ), {, bI, [, j, ], =, yI, [, j, ], -, y0, [, j, ], -, di, *]
[{, bI, [, j, ], =, yI, [, j, ], -, y0, [, j, ], -, di, *, yDot0, []
[j, ], =, yI, [, j, ], -, y0, [, j, ], -, di, *, yDot0, [, j, ], ;]
[j, ], =, yI, [, j, ], -, y0, [, j, ], -, di, *, yDot0, [, j, ], ;]
[=, yI, [, j, ], -, y0, [, j, ], -, di, *, yDot0, [, j, ], ;, bDotI, []
[j, ], -, y0, [, j, ], -, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =]
[j, ], -, y0, [, j, ], -, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =]
[j, ], -, y0, [, j, ], -, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =]
[-, y0, [, j, ], -, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =, yDotI, []
[j, ], -, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =, yDotI, [, j, ], -]
[j, ], -, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =, yDotI, [, j, ], -]
[-, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =, yDotI, [, j, ], -, yDot0, []
[bDotI, [, j, ], =, yDotI, [, j, ], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition, ;]
[j, ], =, yDotI, [, j, ], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition, ;, decomposition, =]
[yDotI, [, j, ], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (]
[], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new, Array2DRowRealMatrix, (]
[yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new, Array2DRowRealMatrix, (, a, ,]
[QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new, Array2DRowRealMatrix, (, a, ,, false, ), ), ;, RealMatrix, x, =]
[QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new, Array2DRowRealMatrix, (, a, ,, false, ), ), ;, RealMatrix, x, =]
[QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new, Array2DRowRealMatrix, (, a, ,, false, ), ), ;, RealMatrix, x, =]
[new, Array2DRowRealMatrix, (, a, ,, false, ), ), ;, RealMatrix, x, =, decomposition, ., getSolver, (, ), ., solve, (]
[a, ,, false, ), ), ;, RealMatrix, x, =, decomposition, ., getSolver, (, ), ., solve, (, new, Array2DRowRealMatrix, (]
[false, ), ), ;, RealMatrix, x, =, decomposition, ., getSolver, (, ), ., solve, (, new, Array2DRowRealMatrix, (, b, ,]
[x, =, decomposition, ., getSolver, (, ), ., solve, (, new, Array2DRowRealMatrix, (, b, ,, false, ), ), ;, return]
[., getSolver, (, ), ., solve, (, new, Array2DRowRealMatrix, (, b, ,, false, ), ), ;, return, new, Array2DRowRealMatrix, (]
[., getSolver, (, ), ., solve, (, new, Array2DRowRealMatrix, (, b, ,, false, ), ), ;, return, new, Array2DRowRealMatrix, (]
[(, new, Array2DRowRealMatrix, (, b, ,, false, ), ), ;, return, new, Array2DRowRealMatrix, (, x, ., getData, (, ), ,]
[x, ., getData, (, ), ,, false, ), ;, }, public, Array2DRowRealMatrix, updateHighOrderDerivativesPhase1, (, final, Array2DRowRealMatrix, highOrder, ), {, return]
[x, ., getData, (, ), ,, false, ), ;, }, public, Array2DRowRealMatrix, updateHighOrderDerivativesPhase1, (, final, Array2DRowRealMatrix, highOrder, ), {, return]
[), ,, false, ), ;, }, public, Array2DRowRealMatrix, updateHighOrderDerivativesPhase1, (, final, Array2DRowRealMatrix, highOrder, ), {, return, update, ., multiply, (]
[,, final, double, [, ], end, ,, final, Array2DRowRealMatrix, highOrder, ), {, final, double, [, ], [, ], data, =]
[,, final, double, [, ], end, ,, final, Array2DRowRealMatrix, highOrder, ), {, final, double, [, ], [, ], data, =]
[{, final, double, [, ], [, ], data, =, highOrder, ., getDataRef, (, ), ;, for, (, int, i, =]
[double, [, ], [, ], data, =, highOrder, ., getDataRef, (, ), ;, for, (, int, i, =, 0, ;]
[double, [, ], [, ], data, =, highOrder, ., getDataRef, (, ), ;, for, (, int, i, =, 0, ;]
[], [, ], data, =, highOrder, ., getDataRef, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[], [, ], data, =, highOrder, ., getDataRef, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, highOrder, ., getDataRef, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[highOrder, ., getDataRef, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, [, ], dataI, =]
[i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, [, ], dataI, =]
[0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, [, ], dataI, =, data, []
[;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, final, double, c1I, =]
[;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, final, double, c1I, =]
[i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, final, double, c1I, =, c1, []
[=, data, [, i, ], ;, final, double, c1I, =, c1, [, i, ], ;, for, (, int, j, =]
[[, i, ], ;, final, double, c1I, =, c1, [, i, ], ;, for, (, int, j, =, 0, ;]
[[, i, ], ;, final, double, c1I, =, c1, [, i, ], ;, for, (, int, j, =, 0, ;]
[], ;, final, double, c1I, =, c1, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[], ;, final, double, c1I, =, c1, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[c1I, =, c1, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;]
[=, c1, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++]
[i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {]
[i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, []
[int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], +=]
[int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], +=]
[=, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], +=, c1I, *]
[0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (]
[0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (]
[0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (]
[j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (, start, []
[., length, ;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (, start, [, j, ], -]
[., length, ;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (, start, [, j, ], -]
[;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (, start, [, j, ], -, end, []
