[Iterator, ;, import, java, ., util, ., List, ;, class, UnionTypeBuilder, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[;, class, UnionTypeBuilder, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1L, ;, private, static, final, int, DEFAULT_MAX_UNION_SIZE, =]
[static, final, int, DEFAULT_MAX_UNION_SIZE, =, 20, ;, private, final, JSTypeRegistry, registry, ;, private, final, List, <, JSType, >, alternates, =]
[static, final, int, DEFAULT_MAX_UNION_SIZE, =, 20, ;, private, final, JSTypeRegistry, registry, ;, private, final, List, <, JSType, >, alternates, =]
[registry, ;, private, final, List, <, JSType, >, alternates, =, Lists, ., newArrayList, (, ), ;, private, boolean, isAllType, =]
[JSType, >, alternates, =, Lists, ., newArrayList, (, ), ;, private, boolean, isAllType, =, false, ;, private, boolean, isNativeUnknownType, =]
[newArrayList, (, ), ;, private, boolean, isAllType, =, false, ;, private, boolean, isNativeUnknownType, =, false, ;, private, boolean, areAllUnknownsChecked, =]
[boolean, isNativeUnknownType, =, false, ;, private, boolean, areAllUnknownsChecked, =, true, ;, private, final, int, maxUnionSize, ;, private, int, functionTypePosition, =]
[isNativeUnknownType, =, false, ;, private, boolean, areAllUnknownsChecked, =, true, ;, private, final, int, maxUnionSize, ;, private, int, functionTypePosition, =, -]
[areAllUnknownsChecked, =, true, ;, private, final, int, maxUnionSize, ;, private, int, functionTypePosition, =, -, 1, ;, private, JSType, result, =]
[int, functionTypePosition, =, -, 1, ;, private, JSType, result, =, null, ;, UnionTypeBuilder, (, JSTypeRegistry, registry, ), {, this, (]
[=, -, 1, ;, private, JSType, result, =, null, ;, UnionTypeBuilder, (, JSTypeRegistry, registry, ), {, this, (, registry, ,]
[registry, ), {, this, (, registry, ,, DEFAULT_MAX_UNION_SIZE, ), ;, }, UnionTypeBuilder, (, JSTypeRegistry, registry, ,, int, maxUnionSize, ), {]
[registry, ), {, this, (, registry, ,, DEFAULT_MAX_UNION_SIZE, ), ;, }, UnionTypeBuilder, (, JSTypeRegistry, registry, ,, int, maxUnionSize, ), {]
[(, registry, ,, DEFAULT_MAX_UNION_SIZE, ), ;, }, UnionTypeBuilder, (, JSTypeRegistry, registry, ,, int, maxUnionSize, ), {, this, ., registry, =]
[,, DEFAULT_MAX_UNION_SIZE, ), ;, }, UnionTypeBuilder, (, JSTypeRegistry, registry, ,, int, maxUnionSize, ), {, this, ., registry, =, registry, ;]
[,, DEFAULT_MAX_UNION_SIZE, ), ;, }, UnionTypeBuilder, (, JSTypeRegistry, registry, ,, int, maxUnionSize, ), {, this, ., registry, =, registry, ;]
[}, UnionTypeBuilder, (, JSTypeRegistry, registry, ,, int, maxUnionSize, ), {, this, ., registry, =, registry, ;, this, ., maxUnionSize, =]
[registry, ;, this, ., maxUnionSize, =, maxUnionSize, ;, }, Iterable, <, JSType, >, getAlternates, (, ), {, JSType, specialCaseType, =]
[maxUnionSize, ;, }, Iterable, <, JSType, >, getAlternates, (, ), {, JSType, specialCaseType, =, reduceAlternatesWithoutUnion, (, ), ;, if, (]
[maxUnionSize, ;, }, Iterable, <, JSType, >, getAlternates, (, ), {, JSType, specialCaseType, =, reduceAlternatesWithoutUnion, (, ), ;, if, (]
[}, Iterable, <, JSType, >, getAlternates, (, ), {, JSType, specialCaseType, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, specialCaseType, !=]
[>, getAlternates, (, ), {, JSType, specialCaseType, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, specialCaseType, !=, null, ), {, return]
[>, getAlternates, (, ), {, JSType, specialCaseType, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, specialCaseType, !=, null, ), {, return]
[{, JSType, specialCaseType, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, specialCaseType, !=, null, ), {, return, ImmutableList, ., of, (]
[(, ), ;, if, (, specialCaseType, !=, null, ), {, return, ImmutableList, ., of, (, specialCaseType, ), ;, }, return]
[(, ), ;, if, (, specialCaseType, !=, null, ), {, return, ImmutableList, ., of, (, specialCaseType, ), ;, }, return]
[(, specialCaseType, !=, null, ), {, return, ImmutableList, ., of, (, specialCaseType, ), ;, }, return, Collections, ., unmodifiableList, (]
[;, }, return, Collections, ., unmodifiableList, (, alternates, ), ;, }, UnionTypeBuilder, addAlternate, (, JSType, alternate, ), {, if, (]
[;, }, return, Collections, ., unmodifiableList, (, alternates, ), ;, }, UnionTypeBuilder, addAlternate, (, JSType, alternate, ), {, if, (]
[), ;, }, UnionTypeBuilder, addAlternate, (, JSType, alternate, ), {, if, (, alternate, ., isNoType, (, ), ), {, return]
[UnionTypeBuilder, addAlternate, (, JSType, alternate, ), {, if, (, alternate, ., isNoType, (, ), ), {, return, this, ;, }]
[(, JSType, alternate, ), {, if, (, alternate, ., isNoType, (, ), ), {, return, this, ;, }, isAllType, =]
[(, JSType, alternate, ), {, if, (, alternate, ., isNoType, (, ), ), {, return, this, ;, }, isAllType, =]
[alternate, ), {, if, (, alternate, ., isNoType, (, ), ), {, return, this, ;, }, isAllType, =, isAllType, ||]
[alternate, ), {, if, (, alternate, ., isNoType, (, ), ), {, return, this, ;, }, isAllType, =, isAllType, ||]
[), ), {, return, this, ;, }, isAllType, =, isAllType, ||, alternate, ., isAllType, (, ), ;, boolean, isAlternateUnknown, =]
[), ), {, return, this, ;, }, isAllType, =, isAllType, ||, alternate, ., isAllType, (, ), ;, boolean, isAlternateUnknown, =]
[this, ;, }, isAllType, =, isAllType, ||, alternate, ., isAllType, (, ), ;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;]
[}, isAllType, =, isAllType, ||, alternate, ., isAllType, (, ), ;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =]
[}, isAllType, =, isAllType, ||, alternate, ., isAllType, (, ), ;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =]
[=, isAllType, ||, alternate, ., isAllType, (, ), ;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||]
[., isAllType, (, ), ;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (]
[), ;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {]
[boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =]
[boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =]
[=, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&]
[=, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&]
[isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (]
[isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (]
[;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (, !]
[(, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (, !, isAllType, &&]
[isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (, !, isAllType, &&, !]
[areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (, !, isAllType, &&, !, isNativeUnknownType, ), {, if, (]
[areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (, !, isAllType, &&, !, isNativeUnknownType, ), {, if, (]
[(, !, isAllType, &&, !, isNativeUnknownType, ), {, if, (, alternate, ., isUnionType, (, ), ), {, UnionType, union, =]
[(, !, isAllType, &&, !, isNativeUnknownType, ), {, if, (, alternate, ., isUnionType, (, ), ), {, UnionType, union, =]
[., isUnionType, (, ), ), {, UnionType, union, =, alternate, ., toMaybeUnionType, (, ), ;, for, (, JSType, unionAlt, :]
[., isUnionType, (, ), ), {, UnionType, union, =, alternate, ., toMaybeUnionType, (, ), ;, for, (, JSType, unionAlt, :]
[union, =, alternate, ., toMaybeUnionType, (, ), ;, for, (, JSType, unionAlt, :, union, ., getAlternates, (, ), ), {]
[alternate, ., toMaybeUnionType, (, ), ;, for, (, JSType, unionAlt, :, union, ., getAlternates, (, ), ), {, addAlternate, (]
[unionAlt, :, union, ., getAlternates, (, ), ), {, addAlternate, (, unionAlt, ), ;, }, }, else, {, if, (]
[unionAlt, :, union, ., getAlternates, (, ), ), {, addAlternate, (, unionAlt, ), ;, }, }, else, {, if, (]
[unionAlt, :, union, ., getAlternates, (, ), ), {, addAlternate, (, unionAlt, ), ;, }, }, else, {, if, (]
[), ), {, addAlternate, (, unionAlt, ), ;, }, }, else, {, if, (, alternates, ., size, (, ), >]
[(, unionAlt, ), ;, }, }, else, {, if, (, alternates, ., size, (, ), >, maxUnionSize, ), {, return]
[}, else, {, if, (, alternates, ., size, (, ), >, maxUnionSize, ), {, return, this, ;, }, if, (]
[}, else, {, if, (, alternates, ., size, (, ), >, maxUnionSize, ), {, return, this, ;, }, if, (]
[}, else, {, if, (, alternates, ., size, (, ), >, maxUnionSize, ), {, return, this, ;, }, if, (]
[., size, (, ), >, maxUnionSize, ), {, return, this, ;, }, if, (, alternate, ., isFunctionType, (, ), &&]
[., size, (, ), >, maxUnionSize, ), {, return, this, ;, }, if, (, alternate, ., isFunctionType, (, ), &&]
[(, ), >, maxUnionSize, ), {, return, this, ;, }, if, (, alternate, ., isFunctionType, (, ), &&, functionTypePosition, !=]
[), >, maxUnionSize, ), {, return, this, ;, }, if, (, alternate, ., isFunctionType, (, ), &&, functionTypePosition, !=, -]
[this, ;, }, if, (, alternate, ., isFunctionType, (, ), &&, functionTypePosition, !=, -, 1, ), {, FunctionType, other, =]
[this, ;, }, if, (, alternate, ., isFunctionType, (, ), &&, functionTypePosition, !=, -, 1, ), {, FunctionType, other, =]
[this, ;, }, if, (, alternate, ., isFunctionType, (, ), &&, functionTypePosition, !=, -, 1, ), {, FunctionType, other, =]
[(, alternate, ., isFunctionType, (, ), &&, functionTypePosition, !=, -, 1, ), {, FunctionType, other, =, alternates, ., get, (]
[1, ), {, FunctionType, other, =, alternates, ., get, (, functionTypePosition, ), ., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =]
[1, ), {, FunctionType, other, =, alternates, ., get, (, functionTypePosition, ), ., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =]
[1, ), {, FunctionType, other, =, alternates, ., get, (, functionTypePosition, ), ., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =]
[get, (, functionTypePosition, ), ., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =, alternate, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (]
[functionTypePosition, ), ., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =, alternate, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, other, ,]
[toMaybeFunctionType, (, ), ;, FunctionType, supremum, =, alternate, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, other, ,, true, ), ;]
[toMaybeFunctionType, (, ), ;, FunctionType, supremum, =, alternate, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, other, ,, true, ), ;]
[FunctionType, supremum, =, alternate, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, other, ,, true, ), ;, alternates, ., set, (]
[=, alternate, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, other, ,, true, ), ;, alternates, ., set, (, functionTypePosition, ,]
[toMaybeFunctionType, (, ), ., supAndInfHelper, (, other, ,, true, ), ;, alternates, ., set, (, functionTypePosition, ,, supremum, ), ;]
[), ., supAndInfHelper, (, other, ,, true, ), ;, alternates, ., set, (, functionTypePosition, ,, supremum, ), ;, result, =]
[(, other, ,, true, ), ;, alternates, ., set, (, functionTypePosition, ,, supremum, ), ;, result, =, null, ;, return]
[alternates, ., set, (, functionTypePosition, ,, supremum, ), ;, result, =, null, ;, return, this, ;, }, int, currentIndex, =]
[;, result, =, null, ;, return, this, ;, }, int, currentIndex, =, 0, ;, Iterator, <, JSType, >, it, =]
[;, result, =, null, ;, return, this, ;, }, int, currentIndex, =, 0, ;, Iterator, <, JSType, >, it, =]
[}, int, currentIndex, =, 0, ;, Iterator, <, JSType, >, it, =, alternates, ., iterator, (, ), ;, while, (]
[}, int, currentIndex, =, 0, ;, Iterator, <, JSType, >, it, =, alternates, ., iterator, (, ), ;, while, (]
[it, =, alternates, ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, boolean, removeCurrent, =]
[(, ), ;, while, (, it, ., hasNext, (, ), ), {, boolean, removeCurrent, =, false, ;, JSType, current, =]
[(, ), ;, while, (, it, ., hasNext, (, ), ), {, boolean, removeCurrent, =, false, ;, JSType, current, =]
[(, ), ), {, boolean, removeCurrent, =, false, ;, JSType, current, =, it, ., next, (, ), ;, if, (]
[(, ), ), {, boolean, removeCurrent, =, false, ;, JSType, current, =, it, ., next, (, ), ;, if, (]
[(, ), ), {, boolean, removeCurrent, =, false, ;, JSType, current, =, it, ., next, (, ), ;, if, (]
[(, ), ), {, boolean, removeCurrent, =, false, ;, JSType, current, =, it, ., next, (, ), ;, if, (]
[(, ), ), {, boolean, removeCurrent, =, false, ;, JSType, current, =, it, ., next, (, ), ;, if, (]
[(, ), ), {, boolean, removeCurrent, =, false, ;, JSType, current, =, it, ., next, (, ), ;, if, (]
[(, ), ), {, boolean, removeCurrent, =, false, ;, JSType, current, =, it, ., next, (, ), ;, if, (]
[=, false, ;, JSType, current, =, it, ., next, (, ), ;, if, (, alternate, ., isUnknownType, (, ), ||]
[=, false, ;, JSType, current, =, it, ., next, (, ), ;, if, (, alternate, ., isUnknownType, (, ), ||]
[it, ., next, (, ), ;, if, (, alternate, ., isUnknownType, (, ), ||, current, ., isUnknownType, (, ), ||]
[it, ., next, (, ), ;, if, (, alternate, ., isUnknownType, (, ), ||, current, ., isUnknownType, (, ), ||]
[if, (, alternate, ., isUnknownType, (, ), ||, current, ., isUnknownType, (, ), ||, alternate, ., isNoResolvedType, (, ), ||]
[if, (, alternate, ., isUnknownType, (, ), ||, current, ., isUnknownType, (, ), ||, alternate, ., isNoResolvedType, (, ), ||]
[), ||, current, ., isUnknownType, (, ), ||, alternate, ., isNoResolvedType, (, ), ||, current, ., isNoResolvedType, (, ), ||]
[), ||, current, ., isUnknownType, (, ), ||, alternate, ., isNoResolvedType, (, ), ||, current, ., isNoResolvedType, (, ), ||]
[), ||, alternate, ., isNoResolvedType, (, ), ||, current, ., isNoResolvedType, (, ), ||, alternate, ., hasAnyTemplateTypes, (, ), ||]
[), ||, alternate, ., isNoResolvedType, (, ), ||, current, ., isNoResolvedType, (, ), ||, alternate, ., hasAnyTemplateTypes, (, ), ||]
[., isNoResolvedType, (, ), ||, alternate, ., hasAnyTemplateTypes, (, ), ||, current, ., hasAnyTemplateTypes, (, ), ), {, if, (]
[., isNoResolvedType, (, ), ||, alternate, ., hasAnyTemplateTypes, (, ), ||, current, ., hasAnyTemplateTypes, (, ), ), {, if, (]
[||, alternate, ., hasAnyTemplateTypes, (, ), ||, current, ., hasAnyTemplateTypes, (, ), ), {, if, (, alternate, ., isEquivalentTo, (]
[), ||, current, ., hasAnyTemplateTypes, (, ), ), {, if, (, alternate, ., isEquivalentTo, (, current, ), ), {, return]
[{, if, (, alternate, ., isEquivalentTo, (, current, ), ), {, return, this, ;, }, }, else, {, if, (]
[{, if, (, alternate, ., isEquivalentTo, (, current, ), ), {, return, this, ;, }, }, else, {, if, (]
[{, if, (, alternate, ., isEquivalentTo, (, current, ), ), {, return, this, ;, }, }, else, {, if, (]
[(, current, ), ), {, return, this, ;, }, }, else, {, if, (, alternate, ., isParameterizedType, (, ), ||]
[(, current, ), ), {, return, this, ;, }, }, else, {, if, (, alternate, ., isParameterizedType, (, ), ||]
[}, else, {, if, (, alternate, ., isParameterizedType, (, ), ||, current, ., isParameterizedType, (, ), ), {, if, (]
[else, {, if, (, alternate, ., isParameterizedType, (, ), ||, current, ., isParameterizedType, (, ), ), {, if, (, !]
[else, {, if, (, alternate, ., isParameterizedType, (, ), ||, current, ., isParameterizedType, (, ), ), {, if, (, !]
[||, current, ., isParameterizedType, (, ), ), {, if, (, !, current, ., isParameterizedType, (, ), ), {, if, (]
[||, current, ., isParameterizedType, (, ), ), {, if, (, !, current, ., isParameterizedType, (, ), ), {, if, (]
[(, ), ), {, if, (, !, current, ., isParameterizedType, (, ), ), {, if, (, alternate, ., isSubtype, (]
[(, !, current, ., isParameterizedType, (, ), ), {, if, (, alternate, ., isSubtype, (, current, ), ), {, return]
[), {, if, (, alternate, ., isSubtype, (, current, ), ), {, return, this, ;, }, }, else, if, (]
[{, if, (, alternate, ., isSubtype, (, current, ), ), {, return, this, ;, }, }, else, if, (, !]
[{, if, (, alternate, ., isSubtype, (, current, ), ), {, return, this, ;, }, }, else, if, (, !]
[), {, return, this, ;, }, }, else, if, (, !, alternate, ., isParameterizedType, (, ), ), {, if, (]
[), {, return, this, ;, }, }, else, if, (, !, alternate, ., isParameterizedType, (, ), ), {, if, (]
[;, }, }, else, if, (, !, alternate, ., isParameterizedType, (, ), ), {, if, (, current, ., isSubtype, (]
[if, (, !, alternate, ., isParameterizedType, (, ), ), {, if, (, current, ., isSubtype, (, alternate, ), ), {]
[!, alternate, ., isParameterizedType, (, ), ), {, if, (, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =]
[), {, if, (, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, else, {]
[), {, if, (, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, else, {]
[current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, else, {, Preconditions, ., checkState, (]
[current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, else, {, Preconditions, ., checkState, (]
[current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, else, {, Preconditions, ., checkState, (]
[), {, removeCurrent, =, true, ;, }, }, else, {, Preconditions, ., checkState, (, current, ., isParameterizedType, (, ), &&]
[), {, removeCurrent, =, true, ;, }, }, else, {, Preconditions, ., checkState, (, current, ., isParameterizedType, (, ), &&]
[Preconditions, ., checkState, (, current, ., isParameterizedType, (, ), &&, alternate, ., isParameterizedType, (, ), ), ;, ParameterizedType, parameterizedAlternate, =]
[Preconditions, ., checkState, (, current, ., isParameterizedType, (, ), &&, alternate, ., isParameterizedType, (, ), ), ;, ParameterizedType, parameterizedAlternate, =]
[&&, alternate, ., isParameterizedType, (, ), ), ;, ParameterizedType, parameterizedAlternate, =, alternate, ., toMaybeParameterizedType, (, ), ;, ParameterizedType, parameterizedCurrent, =]
[&&, alternate, ., isParameterizedType, (, ), ), ;, ParameterizedType, parameterizedAlternate, =, alternate, ., toMaybeParameterizedType, (, ), ;, ParameterizedType, parameterizedCurrent, =]
[ParameterizedType, parameterizedAlternate, =, alternate, ., toMaybeParameterizedType, (, ), ;, ParameterizedType, parameterizedCurrent, =, current, ., toMaybeParameterizedType, (, ), ;, if, (]
[ParameterizedType, parameterizedAlternate, =, alternate, ., toMaybeParameterizedType, (, ), ;, ParameterizedType, parameterizedCurrent, =, current, ., toMaybeParameterizedType, (, ), ;, if, (]
[., toMaybeParameterizedType, (, ), ;, ParameterizedType, parameterizedCurrent, =, current, ., toMaybeParameterizedType, (, ), ;, if, (, parameterizedCurrent, ., wrapsSameRawType, (]
[=, current, ., toMaybeParameterizedType, (, ), ;, if, (, parameterizedCurrent, ., wrapsSameRawType, (, parameterizedAlternate, ), ), {, JSType, alternateTypeParameter, =]
[=, current, ., toMaybeParameterizedType, (, ), ;, if, (, parameterizedCurrent, ., wrapsSameRawType, (, parameterizedAlternate, ), ), {, JSType, alternateTypeParameter, =]
[parameterizedCurrent, ., wrapsSameRawType, (, parameterizedAlternate, ), ), {, JSType, alternateTypeParameter, =, parameterizedAlternate, ., getParameterType, (, ), ;, JSType, currentTypeParameter, =]
[parameterizedCurrent, ., wrapsSameRawType, (, parameterizedAlternate, ), ), {, JSType, alternateTypeParameter, =, parameterizedAlternate, ., getParameterType, (, ), ;, JSType, currentTypeParameter, =]
[JSType, alternateTypeParameter, =, parameterizedAlternate, ., getParameterType, (, ), ;, JSType, currentTypeParameter, =, parameterizedCurrent, ., getParameterType, (, ), ;, if, (]
[JSType, alternateTypeParameter, =, parameterizedAlternate, ., getParameterType, (, ), ;, JSType, currentTypeParameter, =, parameterizedCurrent, ., getParameterType, (, ), ;, if, (]
[., getParameterType, (, ), ;, JSType, currentTypeParameter, =, parameterizedCurrent, ., getParameterType, (, ), ;, if, (, currentTypeParameter, ., isEquivalentTo, (]
[JSType, currentTypeParameter, =, parameterizedCurrent, ., getParameterType, (, ), ;, if, (, currentTypeParameter, ., isEquivalentTo, (, parameterizedCurrent, ), ), {, return]
[;, if, (, currentTypeParameter, ., isEquivalentTo, (, parameterizedCurrent, ), ), {, return, this, ;, }, else, {, JSType, merged, =]
[;, if, (, currentTypeParameter, ., isEquivalentTo, (, parameterizedCurrent, ), ), {, return, this, ;, }, else, {, JSType, merged, =]
[parameterizedCurrent, ), ), {, return, this, ;, }, else, {, JSType, merged, =, parameterizedCurrent, ., getReferencedObjTypeInternal, (, ), ;, return]
[), {, return, this, ;, }, else, {, JSType, merged, =, parameterizedCurrent, ., getReferencedObjTypeInternal, (, ), ;, return, addAlternate, (]
[=, parameterizedCurrent, ., getReferencedObjTypeInternal, (, ), ;, return, addAlternate, (, merged, ), ;, }, }, }, }, else, if, (]
[=, parameterizedCurrent, ., getReferencedObjTypeInternal, (, ), ;, return, addAlternate, (, merged, ), ;, }, }, }, }, else, if, (]
[(, ), ;, return, addAlternate, (, merged, ), ;, }, }, }, }, else, if, (, alternate, ., isSubtype, (]
[(, merged, ), ;, }, }, }, }, else, if, (, alternate, ., isSubtype, (, current, ), ), {, return]
[}, }, else, if, (, alternate, ., isSubtype, (, current, ), ), {, return, this, ;, }, else, if, (]
[}, }, else, if, (, alternate, ., isSubtype, (, current, ), ), {, return, this, ;, }, else, if, (]
[(, alternate, ., isSubtype, (, current, ), ), {, return, this, ;, }, else, if, (, current, ., isSubtype, (]
[(, current, ), ), {, return, this, ;, }, else, if, (, current, ., isSubtype, (, alternate, ), ), {]
[), ), {, return, this, ;, }, else, if, (, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =]
[}, else, if, (, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, if, (]
[(, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, if, (, removeCurrent, ), {]
[(, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, if, (, removeCurrent, ), {]
[{, removeCurrent, =, true, ;, }, }, if, (, removeCurrent, ), {, it, ., remove, (, ), ;, if, (]
[{, removeCurrent, =, true, ;, }, }, if, (, removeCurrent, ), {, it, ., remove, (, ), ;, if, (]
[=, true, ;, }, }, if, (, removeCurrent, ), {, it, ., remove, (, ), ;, if, (, currentIndex, ==]
[}, }, if, (, removeCurrent, ), {, it, ., remove, (, ), ;, if, (, currentIndex, ==, functionTypePosition, ), {]
[if, (, removeCurrent, ), {, it, ., remove, (, ), ;, if, (, currentIndex, ==, functionTypePosition, ), {, functionTypePosition, =]
[(, removeCurrent, ), {, it, ., remove, (, ), ;, if, (, currentIndex, ==, functionTypePosition, ), {, functionTypePosition, =, -]
[remove, (, ), ;, if, (, currentIndex, ==, functionTypePosition, ), {, functionTypePosition, =, -, 1, ;, }, else, if, (]
[remove, (, ), ;, if, (, currentIndex, ==, functionTypePosition, ), {, functionTypePosition, =, -, 1, ;, }, else, if, (]
[), ;, if, (, currentIndex, ==, functionTypePosition, ), {, functionTypePosition, =, -, 1, ;, }, else, if, (, currentIndex, <]
[(, currentIndex, ==, functionTypePosition, ), {, functionTypePosition, =, -, 1, ;, }, else, if, (, currentIndex, <, functionTypePosition, ), {]
[(, currentIndex, ==, functionTypePosition, ), {, functionTypePosition, =, -, 1, ;, }, else, if, (, currentIndex, <, functionTypePosition, ), {]
[functionTypePosition, ), {, functionTypePosition, =, -, 1, ;, }, else, if, (, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --, ;]
[functionTypePosition, ), {, functionTypePosition, =, -, 1, ;, }, else, if, (, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --, ;]
[-, 1, ;, }, else, if, (, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --, ;, currentIndex, --, ;, }, }]
[-, 1, ;, }, else, if, (, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --, ;, currentIndex, --, ;, }, }]
[(, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --, ;, currentIndex, --, ;, }, }, currentIndex, ++, ;, }, if, (]
[(, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --, ;, currentIndex, --, ;, }, }, currentIndex, ++, ;, }, if, (]
[--, ;, currentIndex, --, ;, }, }, currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (, ), ), {]
[--, ;, currentIndex, --, ;, }, }, currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (, ), ), {]
[;, }, }, currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (, ), ), {, Preconditions, ., checkState, (]
[;, }, }, currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (, ), ), {, Preconditions, ., checkState, (]
[}, currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (, ), ), {, Preconditions, ., checkState, (, functionTypePosition, ==]
[currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (, ), ), {, Preconditions, ., checkState, (, functionTypePosition, ==, -]
[}, if, (, alternate, ., isFunctionType, (, ), ), {, Preconditions, ., checkState, (, functionTypePosition, ==, -, 1, ), ;]
[(, alternate, ., isFunctionType, (, ), ), {, Preconditions, ., checkState, (, functionTypePosition, ==, -, 1, ), ;, functionTypePosition, =]
[(, alternate, ., isFunctionType, (, ), ), {, Preconditions, ., checkState, (, functionTypePosition, ==, -, 1, ), ;, functionTypePosition, =]
[{, Preconditions, ., checkState, (, functionTypePosition, ==, -, 1, ), ;, functionTypePosition, =, alternates, ., size, (, ), ;, }]
[{, Preconditions, ., checkState, (, functionTypePosition, ==, -, 1, ), ;, functionTypePosition, =, alternates, ., size, (, ), ;, }]
[(, functionTypePosition, ==, -, 1, ), ;, functionTypePosition, =, alternates, ., size, (, ), ;, }, alternates, ., add, (]
[-, 1, ), ;, functionTypePosition, =, alternates, ., size, (, ), ;, }, alternates, ., add, (, alternate, ), ;]
[), ;, functionTypePosition, =, alternates, ., size, (, ), ;, }, alternates, ., add, (, alternate, ), ;, result, =]
[size, (, ), ;, }, alternates, ., add, (, alternate, ), ;, result, =, null, ;, }, }, else, {]
[), ;, }, alternates, ., add, (, alternate, ), ;, result, =, null, ;, }, }, else, {, result, =]
[., add, (, alternate, ), ;, result, =, null, ;, }, }, else, {, result, =, null, ;, }, return]
[}, else, {, result, =, null, ;, }, return, this, ;, }, private, JSType, reduceAlternatesWithoutUnion, (, ), {, if, (]
[=, null, ;, }, return, this, ;, }, private, JSType, reduceAlternatesWithoutUnion, (, ), {, if, (, isAllType, ), {, return]
[=, null, ;, }, return, this, ;, }, private, JSType, reduceAlternatesWithoutUnion, (, ), {, if, (, isAllType, ), {, return]
[return, this, ;, }, private, JSType, reduceAlternatesWithoutUnion, (, ), {, if, (, isAllType, ), {, return, registry, ., getNativeType, (]
[(, ), {, if, (, isAllType, ), {, return, registry, ., getNativeType, (, ALL_TYPE, ), ;, }, else, if, (]
[isAllType, ), {, return, registry, ., getNativeType, (, ALL_TYPE, ), ;, }, else, if, (, isNativeUnknownType, ), {, if, (]
[registry, ., getNativeType, (, ALL_TYPE, ), ;, }, else, if, (, isNativeUnknownType, ), {, if, (, areAllUnknownsChecked, ), {, return]
[registry, ., getNativeType, (, ALL_TYPE, ), ;, }, else, if, (, isNativeUnknownType, ), {, if, (, areAllUnknownsChecked, ), {, return]
[ALL_TYPE, ), ;, }, else, if, (, isNativeUnknownType, ), {, if, (, areAllUnknownsChecked, ), {, return, registry, ., getNativeType, (]
[isNativeUnknownType, ), {, if, (, areAllUnknownsChecked, ), {, return, registry, ., getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return]
[isNativeUnknownType, ), {, if, (, areAllUnknownsChecked, ), {, return, registry, ., getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return]
[(, areAllUnknownsChecked, ), {, return, registry, ., getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return, registry, ., getNativeType, (]
[), ;, }, else, {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, else, {, int, size, =]
[), ;, }, else, {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, else, {, int, size, =]
[getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, else, {, int, size, =, alternates, ., size, (, ), ;, if, (]
[getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, else, {, int, size, =, alternates, ., size, (, ), ;, if, (]
[UNKNOWN_TYPE, ), ;, }, }, else, {, int, size, =, alternates, ., size, (, ), ;, if, (, size, >]
[}, else, {, int, size, =, alternates, ., size, (, ), ;, if, (, size, >, maxUnionSize, ), {, return]
[}, else, {, int, size, =, alternates, ., size, (, ), ;, if, (, size, >, maxUnionSize, ), {, return]
[size, =, alternates, ., size, (, ), ;, if, (, size, >, maxUnionSize, ), {, return, registry, ., getNativeType, (]
[;, if, (, size, >, maxUnionSize, ), {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, if, (]
[;, if, (, size, >, maxUnionSize, ), {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, if, (]
[(, size, >, maxUnionSize, ), {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, if, (, size, >]
[), {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, if, (, size, >, 1, ), {, return]
[(, UNKNOWN_TYPE, ), ;, }, else, if, (, size, >, 1, ), {, return, null, ;, }, else, if, (]
[(, UNKNOWN_TYPE, ), ;, }, else, if, (, size, >, 1, ), {, return, null, ;, }, else, if, (]
[), ;, }, else, if, (, size, >, 1, ), {, return, null, ;, }, else, if, (, size, ==]
[if, (, size, >, 1, ), {, return, null, ;, }, else, if, (, size, ==, 1, ), {, return]
[if, (, size, >, 1, ), {, return, null, ;, }, else, if, (, size, ==, 1, ), {, return]
[if, (, size, >, 1, ), {, return, null, ;, }, else, if, (, size, ==, 1, ), {, return]
[size, ==, 1, ), {, return, alternates, ., iterator, (, ), ., next, (, ), ;, }, else, {, return]
[size, ==, 1, ), {, return, alternates, ., iterator, (, ), ., next, (, ), ;, }, else, {, return]
[{, return, alternates, ., iterator, (, ), ., next, (, ), ;, }, else, {, return, registry, ., getNativeType, (]
[else, {, return, registry, ., getNativeType, (, NO_TYPE, ), ;, }, }, }, JSType, build, (, ), {, if, (]
[else, {, return, registry, ., getNativeType, (, NO_TYPE, ), ;, }, }, }, JSType, build, (, ), {, if, (]
[return, registry, ., getNativeType, (, NO_TYPE, ), ;, }, }, }, JSType, build, (, ), {, if, (, result, ==]
[getNativeType, (, NO_TYPE, ), ;, }, }, }, JSType, build, (, ), {, if, (, result, ==, null, ), {]
[NO_TYPE, ), ;, }, }, }, JSType, build, (, ), {, if, (, result, ==, null, ), {, result, =]
[JSType, build, (, ), {, if, (, result, ==, null, ), {, result, =, reduceAlternatesWithoutUnion, (, ), ;, if, (]
[JSType, build, (, ), {, if, (, result, ==, null, ), {, result, =, reduceAlternatesWithoutUnion, (, ), ;, if, (]
[(, ), {, if, (, result, ==, null, ), {, result, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, result, ==]
[if, (, result, ==, null, ), {, result, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, result, ==, null, ), {]
[result, ==, null, ), {, result, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, result, ==, null, ), {, result, =]
[), {, result, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, result, ==, null, ), {, result, =, new, UnionType, (]
[result, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, result, ==, null, ), {, result, =, new, UnionType, (, registry, ,]
[result, ==, null, ), {, result, =, new, UnionType, (, registry, ,, getAlternateListCopy, (, ), ), ;, }, }, return]
[(, ), ), ;, }, }, return, result, ;, }, private, Collection, <, JSType, >, getAlternateListCopy, (, ), {, return]
[(, ), ), ;, }, }, return, result, ;, }, private, Collection, <, JSType, >, getAlternateListCopy, (, ), {, return]
[}, }, return, result, ;, }, private, Collection, <, JSType, >, getAlternateListCopy, (, ), {, return, ImmutableList, ., copyOf, (]
