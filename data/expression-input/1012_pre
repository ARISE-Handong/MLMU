[., Collection, ;, import, java, ., util, ., Iterator, ;, class, CrossModuleMethodMotion, implements, CompilerPass, {, static, final, DiagnosticType, NULL_COMMON_MODULE_ERROR, =]
[., Collection, ;, import, java, ., util, ., Iterator, ;, class, CrossModuleMethodMotion, implements, CompilerPass, {, static, final, DiagnosticType, NULL_COMMON_MODULE_ERROR, =]
[java, ., util, ., Iterator, ;, class, CrossModuleMethodMotion, implements, CompilerPass, {, static, final, DiagnosticType, NULL_COMMON_MODULE_ERROR, =, DiagnosticType, ., error, (]
[util, ., Iterator, ;, class, CrossModuleMethodMotion, implements, CompilerPass, {, static, final, DiagnosticType, NULL_COMMON_MODULE_ERROR, =, DiagnosticType, ., error, (, "JSC_INTERNAL_ERROR_MODULE_DEPEND", ,]
[private, final, IdGenerator, idGenerator, ;, private, final, AnalyzePrototypeProperties, analyzer, ;, private, final, JSModuleGraph, moduleGraph, ;, static, final, String, STUB_METHOD_NAME, =]
[AnalyzePrototypeProperties, analyzer, ;, private, final, JSModuleGraph, moduleGraph, ;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[;, static, final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =]
[final, String, STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =, "var JSCompiler_stubMap = [];", +]
[STUB_METHOD_NAME, =, "JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =, "var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +]
["JSCompiler_stubMethod", ;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =, "var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +]
[static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =, "var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +]
[String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =, "var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +]
[=, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =, "var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +]
[;, static, final, String, STUB_DECLARATIONS, =, "var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +]
[final, String, STUB_DECLARATIONS, =, "var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +]
[STUB_DECLARATIONS, =, "var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +]
["function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +]
["    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {]
["    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {]
["      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler, =]
["}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;]
["}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;, this, ., idGenerator, =]
[,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;, this, ., idGenerator, =, idGenerator, ;]
[,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;, this, ., idGenerator, =, idGenerator, ;]
[boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;, this, ., idGenerator, =, idGenerator, ;, this, ., moduleGraph, =]
[boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;, this, ., idGenerator, =, idGenerator, ;, this, ., moduleGraph, =]
[compiler, =, compiler, ;, this, ., idGenerator, =, idGenerator, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;]
[compiler, =, compiler, ;, this, ., idGenerator, =, idGenerator, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;]
[this, ., idGenerator, =, idGenerator, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., analyzer, =]
[=, idGenerator, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., analyzer, =, new, AnalyzePrototypeProperties, (]
[;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,]
[., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, moduleGraph, ,]
[=, compiler, ., getModuleGraph, (, ), ;, this, ., analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, moduleGraph, ,, canModifyExterns, ,]
[,, false, ), ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (]
[,, false, ), ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (]
[,, false, ), ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (]
[), ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (, moduleGraph, !=]
[}, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (, moduleGraph, !=, null, &&]
[}, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (, moduleGraph, !=, null, &&]
[}, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (, moduleGraph, !=, null, &&]
[(, Node, externRoot, ,, Node, root, ), {, if, (, moduleGraph, !=, null, &&, moduleGraph, ., getModuleCount, (, ), >]
[,, Node, root, ), {, if, (, moduleGraph, !=, null, &&, moduleGraph, ., getModuleCount, (, ), >, 1, ), {]
[,, Node, root, ), {, if, (, moduleGraph, !=, null, &&, moduleGraph, ., getModuleCount, (, ), >, 1, ), {]
[{, if, (, moduleGraph, !=, null, &&, moduleGraph, ., getModuleCount, (, ), >, 1, ), {, analyzer, ., process, (]
[(, moduleGraph, !=, null, &&, moduleGraph, ., getModuleCount, (, ), >, 1, ), {, analyzer, ., process, (, externRoot, ,]
[null, &&, moduleGraph, ., getModuleCount, (, ), >, 1, ), {, analyzer, ., process, (, externRoot, ,, root, ), ;]
[moduleGraph, ., getModuleCount, (, ), >, 1, ), {, analyzer, ., process, (, externRoot, ,, root, ), ;, moveMethods, (]
[moduleGraph, ., getModuleCount, (, ), >, 1, ), {, analyzer, ., process, (, externRoot, ,, root, ), ;, moveMethods, (]
[(, ), ), ;, }, }, private, void, moveMethods, (, Collection, <, NameInfo, >, allNameInfo, ), {, boolean, hasStubDeclaration, =]
[(, ), ), ;, }, }, private, void, moveMethods, (, Collection, <, NameInfo, >, allNameInfo, ), {, boolean, hasStubDeclaration, =]
[<, NameInfo, >, allNameInfo, ), {, boolean, hasStubDeclaration, =, idGenerator, ., hasGeneratedAnyIds, (, ), ;, for, (, NameInfo, nameInfo, :]
[{, boolean, hasStubDeclaration, =, idGenerator, ., hasGeneratedAnyIds, (, ), ;, for, (, NameInfo, nameInfo, :, allNameInfo, ), {, if, (]
[boolean, hasStubDeclaration, =, idGenerator, ., hasGeneratedAnyIds, (, ), ;, for, (, NameInfo, nameInfo, :, allNameInfo, ), {, if, (, !]
[boolean, hasStubDeclaration, =, idGenerator, ., hasGeneratedAnyIds, (, ), ;, for, (, NameInfo, nameInfo, :, allNameInfo, ), {, if, (, !]
[nameInfo, :, allNameInfo, ), {, if, (, !, nameInfo, ., isReferenced, (, ), ), {, continue, ;, }, if, (]
[nameInfo, :, allNameInfo, ), {, if, (, !, nameInfo, ., isReferenced, (, ), ), {, continue, ;, }, if, (]
[), {, continue, ;, }, if, (, nameInfo, ., readsClosureVariables, (, ), ), {, continue, ;, }, JSModule, deepestCommonModuleRef, =]
[), {, continue, ;, }, if, (, nameInfo, ., readsClosureVariables, (, ), ), {, continue, ;, }, JSModule, deepestCommonModuleRef, =]
[., readsClosureVariables, (, ), ), {, continue, ;, }, JSModule, deepestCommonModuleRef, =, nameInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (]
[., readsClosureVariables, (, ), ), {, continue, ;, }, JSModule, deepestCommonModuleRef, =, nameInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (]
[(, ), ), {, continue, ;, }, JSModule, deepestCommonModuleRef, =, nameInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, deepestCommonModuleRef, ==]
[{, continue, ;, }, JSModule, deepestCommonModuleRef, =, nameInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, deepestCommonModuleRef, ==, null, ), {]
[{, continue, ;, }, JSModule, deepestCommonModuleRef, =, nameInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, deepestCommonModuleRef, ==, null, ), {]
[JSModule, deepestCommonModuleRef, =, nameInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, deepestCommonModuleRef, ==, null, ), {, compiler, ., report, (]
[JSModule, deepestCommonModuleRef, =, nameInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, deepestCommonModuleRef, ==, null, ), {, compiler, ., report, (]
[., getDeepestCommonModuleRef, (, ), ;, if, (, deepestCommonModuleRef, ==, null, ), {, compiler, ., report, (, JSError, ., make, (]
[., report, (, JSError, ., make, (, NULL_COMMON_MODULE_ERROR, ), ), ;, continue, ;, }, Iterator, <, Symbol, >, declarations, =]
[., report, (, JSError, ., make, (, NULL_COMMON_MODULE_ERROR, ), ), ;, continue, ;, }, Iterator, <, Symbol, >, declarations, =]
[., report, (, JSError, ., make, (, NULL_COMMON_MODULE_ERROR, ), ), ;, continue, ;, }, Iterator, <, Symbol, >, declarations, =]
[;, }, Iterator, <, Symbol, >, declarations, =, nameInfo, ., getDeclarations, (, ), ., descendingIterator, (, ), ;, while, (]
[;, }, Iterator, <, Symbol, >, declarations, =, nameInfo, ., getDeclarations, (, ), ., descendingIterator, (, ), ;, while, (]
[getDeclarations, (, ), ., descendingIterator, (, ), ;, while, (, declarations, ., hasNext, (, ), ), {, Symbol, symbol, =]
[getDeclarations, (, ), ., descendingIterator, (, ), ;, while, (, declarations, ., hasNext, (, ), ), {, Symbol, symbol, =]
[while, (, declarations, ., hasNext, (, ), ), {, Symbol, symbol, =, declarations, ., next, (, ), ;, if, (]
[(, declarations, ., hasNext, (, ), ), {, Symbol, symbol, =, declarations, ., next, (, ), ;, if, (, !]
[declarations, ., hasNext, (, ), ), {, Symbol, symbol, =, declarations, ., next, (, ), ;, if, (, !, (]
[declarations, ., hasNext, (, ), ), {, Symbol, symbol, =, declarations, ., next, (, ), ;, if, (, !, (]
[next, (, ), ;, if, (, !, (, symbol, instanceof, Property, ), ), {, continue, ;, }, Property, prop, =]
[;, if, (, !, (, symbol, instanceof, Property, ), ), {, continue, ;, }, Property, prop, =, (, Property, )]
[(, symbol, instanceof, Property, ), ), {, continue, ;, }, Property, prop, =, (, Property, ), symbol, ;, if, (]
[(, symbol, instanceof, Property, ), ), {, continue, ;, }, Property, prop, =, (, Property, ), symbol, ;, if, (]
[(, symbol, instanceof, Property, ), ), {, continue, ;, }, Property, prop, =, (, Property, ), symbol, ;, if, (]
[(, symbol, instanceof, Property, ), ), {, continue, ;, }, Property, prop, =, (, Property, ), symbol, ;, if, (]
[{, continue, ;, }, Property, prop, =, (, Property, ), symbol, ;, if, (, prop, ., getRootVar, (, ), ==]
[;, }, Property, prop, =, (, Property, ), symbol, ;, if, (, prop, ., getRootVar, (, ), ==, null, ||]
[}, Property, prop, =, (, Property, ), symbol, ;, if, (, prop, ., getRootVar, (, ), ==, null, ||, !]
[}, Property, prop, =, (, Property, ), symbol, ;, if, (, prop, ., getRootVar, (, ), ==, null, ||, !]
[}, Property, prop, =, (, Property, ), symbol, ;, if, (, prop, ., getRootVar, (, ), ==, null, ||, !]
[null, ||, !, prop, ., getRootVar, (, ), ., isGlobal, (, ), ), {, continue, ;, }, Node, value, =]
[null, ||, !, prop, ., getRootVar, (, ), ., isGlobal, (, ), ), {, continue, ;, }, Node, value, =]
[., isGlobal, (, ), ), {, continue, ;, }, Node, value, =, prop, ., getValue, (, ), ;, if, (]
[., isGlobal, (, ), ), {, continue, ;, }, Node, value, =, prop, ., getValue, (, ), ;, if, (]
[., isGlobal, (, ), ), {, continue, ;, }, Node, value, =, prop, ., getValue, (, ), ;, if, (]
[), {, continue, ;, }, Node, value, =, prop, ., getValue, (, ), ;, if, (, moduleGraph, ., dependsOn, (]
[continue, ;, }, Node, value, =, prop, ., getValue, (, ), ;, if, (, moduleGraph, ., dependsOn, (, deepestCommonModuleRef, ,]
[continue, ;, }, Node, value, =, prop, ., getValue, (, ), ;, if, (, moduleGraph, ., dependsOn, (, deepestCommonModuleRef, ,]
[., getValue, (, ), ;, if, (, moduleGraph, ., dependsOn, (, deepestCommonModuleRef, ,, prop, ., getModule, (, ), ), &&]
[., getValue, (, ), ;, if, (, moduleGraph, ., dependsOn, (, deepestCommonModuleRef, ,, prop, ., getModule, (, ), ), &&]
[(, deepestCommonModuleRef, ,, prop, ., getModule, (, ), ), &&, value, ., isFunction, (, ), ), {, Node, valueParent, =]
[(, deepestCommonModuleRef, ,, prop, ., getModule, (, ), ), &&, value, ., isFunction, (, ), ), {, Node, valueParent, =]
[), &&, value, ., isFunction, (, ), ), {, Node, valueParent, =, value, ., getParent, (, ), ;, if, (]
[), &&, value, ., isFunction, (, ), ), {, Node, valueParent, =, value, ., getParent, (, ), ;, if, (]
[), &&, value, ., isFunction, (, ), ), {, Node, valueParent, =, value, ., getParent, (, ), ;, if, (]
[), ), {, Node, valueParent, =, value, ., getParent, (, ), ;, if, (, valueParent, ., isGetterDef, (, ), ||]
[), ), {, Node, valueParent, =, value, ., getParent, (, ), ;, if, (, valueParent, ., isGetterDef, (, ), ||]
[(, valueParent, ., isGetterDef, (, ), ||, valueParent, ., isSetterDef, (, ), ), {, continue, ;, }, Node, proto, =]
[(, valueParent, ., isGetterDef, (, ), ||, valueParent, ., isSetterDef, (, ), ), {, continue, ;, }, Node, proto, =]
[isSetterDef, (, ), ), {, continue, ;, }, Node, proto, =, prop, ., getPrototype, (, ), ;, int, stubId, =]
[isSetterDef, (, ), ), {, continue, ;, }, Node, proto, =, prop, ., getPrototype, (, ), ;, int, stubId, =]
[proto, =, prop, ., getPrototype, (, ), ;, int, stubId, =, idGenerator, ., newId, (, ), ;, Node, stubCall, =]
[proto, =, prop, ., getPrototype, (, ), ;, int, stubId, =, idGenerator, ., newId, (, ), ;, Node, stubCall, =]
[proto, =, prop, ., getPrototype, (, ), ;, int, stubId, =, idGenerator, ., newId, (, ), ;, Node, stubCall, =]
[getPrototype, (, ), ;, int, stubId, =, idGenerator, ., newId, (, ), ;, Node, stubCall, =, IR, ., call, (]
[getPrototype, (, ), ;, int, stubId, =, idGenerator, ., newId, (, ), ;, Node, stubCall, =, IR, ., call, (]
[int, stubId, =, idGenerator, ., newId, (, ), ;, Node, stubCall, =, IR, ., call, (, IR, ., name, (]
[idGenerator, ., newId, (, ), ;, Node, stubCall, =, IR, ., call, (, IR, ., name, (, STUB_METHOD_NAME, ), ,]
[idGenerator, ., newId, (, ), ;, Node, stubCall, =, IR, ., call, (, IR, ., name, (, STUB_METHOD_NAME, ), ,]
[), ;, Node, stubCall, =, IR, ., call, (, IR, ., name, (, STUB_METHOD_NAME, ), ,, IR, ., number, (]
[., call, (, IR, ., name, (, STUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ), ., copyInformationFromForTree, (]
[IR, ., name, (, STUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ), ., copyInformationFromForTree, (, value, ), ;]
[IR, ., name, (, STUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ), ., copyInformationFromForTree, (, value, ), ;]
[STUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ), ., copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (]
[STUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ), ., copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (]
[., number, (, stubId, ), ), ., copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[stubId, ), ), ., copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[stubId, ), ), ., copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, valueParent, ., replaceChild, (]
[value, ), ;, stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, valueParent, ., replaceChild, (, value, ,]
[(, Node, ., FREE_CALL, ,, true, ), ;, valueParent, ., replaceChild, (, value, ,, stubCall, ), ;, Node, unstubParent, =]
[(, Node, ., FREE_CALL, ,, true, ), ;, valueParent, ., replaceChild, (, value, ,, stubCall, ), ;, Node, unstubParent, =]
[,, true, ), ;, valueParent, ., replaceChild, (, value, ,, stubCall, ), ;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (]
[replaceChild, (, value, ,, stubCall, ), ;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall, =]
[replaceChild, (, value, ,, stubCall, ), ;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall, =]
[stubCall, ), ;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall, =, IR, ., call, (]
[stubCall, ), ;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall, =, IR, ., call, (]
[unstubParent, =, compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall, =, IR, ., call, (, IR, ., name, (]
[., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall, =, IR, ., call, (, IR, ., name, (, UNSTUB_METHOD_NAME, ), ,]
[., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall, =, IR, ., call, (, IR, ., name, (, UNSTUB_METHOD_NAME, ), ,]
[), ;, Node, unstubCall, =, IR, ., call, (, IR, ., name, (, UNSTUB_METHOD_NAME, ), ,, IR, ., number, (]
[unstubCall, =, IR, ., call, (, IR, ., name, (, UNSTUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ,]
[., call, (, IR, ., name, (, UNSTUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ,, value, ), ;]
[., call, (, IR, ., name, (, UNSTUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ,, value, ), ;]
[., name, (, UNSTUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ,, value, ), ;, unstubCall, ., putBooleanProp, (]
[., name, (, UNSTUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ,, value, ), ;, unstubCall, ., putBooleanProp, (]
[), ,, IR, ., number, (, stubId, ), ,, value, ), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[., number, (, stubId, ), ,, value, ), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[., number, (, stubId, ), ,, value, ), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[), ,, value, ), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (]
[), ,, value, ), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (]
[), ,, value, ), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (]
[;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (]
[;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (]
[(, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (]
[(, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (]
[,, true, ), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (]
[,, true, ), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (]
[addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, proto, ., cloneTree, (, ), ,]
[addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, proto, ., cloneTree, (, ), ,]
[exprResult, (, IR, ., assign, (, IR, ., getprop, (, proto, ., cloneTree, (, ), ,, IR, ., string, (]
[exprResult, (, IR, ., assign, (, IR, ., getprop, (, proto, ., cloneTree, (, ), ,, IR, ., string, (]
[IR, ., getprop, (, proto, ., cloneTree, (, ), ,, IR, ., string, (, nameInfo, ., name, ), ), ,]
[cloneTree, (, ), ,, IR, ., string, (, nameInfo, ., name, ), ), ,, unstubCall, ), ), ., copyInformationFromForTree, (]
[IR, ., string, (, nameInfo, ., name, ), ), ,, unstubCall, ), ), ., copyInformationFromForTree, (, value, ), ), ;]
[IR, ., string, (, nameInfo, ., name, ), ), ,, unstubCall, ), ), ., copyInformationFromForTree, (, value, ), ), ;]
[), ), ., copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, if, (]
[), ), ., copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, if, (]
[), ., copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, if, (, !]
[copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, if, (, !, hasStubDeclaration, &&]
[copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, if, (, !, hasStubDeclaration, &&]
[), ;, }, }, }, if, (, !, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds, (, ), ), {, Node, declarations, =]
[), ;, }, }, }, if, (, !, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds, (, ), ), {, Node, declarations, =]
[}, if, (, !, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds, (, ), ), {, Node, declarations, =, compiler, ., parseSyntheticCode, (]
[!, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds, (, ), ), {, Node, declarations, =, compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;]
[!, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds, (, ), ), {, Node, declarations, =, compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;]
[!, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds, (, ), ), {, Node, declarations, =, compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;]
[., hasGeneratedAnyIds, (, ), ), {, Node, declarations, =, compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;, compiler, ., getNodeForCodeInsertion, (]
[{, Node, declarations, =, compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;, compiler, ., getNodeForCodeInsertion, (, null, ), ., addChildrenToFront, (]
[{, Node, declarations, =, compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;, compiler, ., getNodeForCodeInsertion, (, null, ), ., addChildrenToFront, (]
[., removeChildren, (, ), ), ;, }, }, static, class, IdGenerator, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[}, }, static, class, IdGenerator, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 0L, ;, private, int, currentId, =]
[private, static, final, long, serialVersionUID, =, 0L, ;, private, int, currentId, =, 0, ;, boolean, hasGeneratedAnyIds, (, ), {, return]
[private, static, final, long, serialVersionUID, =, 0L, ;, private, int, currentId, =, 0, ;, boolean, hasGeneratedAnyIds, (, ), {, return]
[final, long, serialVersionUID, =, 0L, ;, private, int, currentId, =, 0, ;, boolean, hasGeneratedAnyIds, (, ), {, return, currentId, !=]
[=, 0, ;, boolean, hasGeneratedAnyIds, (, ), {, return, currentId, !=, 0, ;, }, int, newId, (, ), {, return]
[=, 0, ;, boolean, hasGeneratedAnyIds, (, ), {, return, currentId, !=, 0, ;, }, int, newId, (, ), {, return]
