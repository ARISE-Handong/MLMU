[import, java, ., util, ., Set, ;, class, MakeDeclaredNamesUnique, implements, NodeTraversal, ., ScopedCallback, {, public, static, final, String, ARGUMENTS, =]
[implements, NodeTraversal, ., ScopedCallback, {, public, static, final, String, ARGUMENTS, =, "arguments", ;, private, Deque, <, Renamer, >, nameStack, =]
[=, new, ArrayDeque, <, Renamer, >, (, ), ;, private, final, Renamer, rootRenamer, ;, MakeDeclaredNamesUnique, (, ), {, this, (]
[;, MakeDeclaredNamesUnique, (, ), {, this, (, new, ContextualRenamer, (, ), ), ;, }, MakeDeclaredNamesUnique, (, Renamer, renamer, ), {]
[;, MakeDeclaredNamesUnique, (, ), {, this, (, new, ContextualRenamer, (, ), ), ;, }, MakeDeclaredNamesUnique, (, Renamer, renamer, ), {]
[{, this, (, new, ContextualRenamer, (, ), ), ;, }, MakeDeclaredNamesUnique, (, Renamer, renamer, ), {, this, ., rootRenamer, =]
[Renamer, renamer, ), {, this, ., rootRenamer, =, renamer, ;, }, static, CompilerPass, getContextualRenameInverter, (, AbstractCompiler, compiler, ), {, return]
[{, this, ., rootRenamer, =, renamer, ;, }, static, CompilerPass, getContextualRenameInverter, (, AbstractCompiler, compiler, ), {, return, new, ContextualRenameInverter, (]
[new, ContextualRenameInverter, (, compiler, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, declarationRoot, =]
[new, ContextualRenameInverter, (, compiler, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, declarationRoot, =]
[enterScope, (, NodeTraversal, t, ), {, Node, declarationRoot, =, t, ., getScopeRoot, (, ), ;, Renamer, renamer, ;, if, (]
[enterScope, (, NodeTraversal, t, ), {, Node, declarationRoot, =, t, ., getScopeRoot, (, ), ;, Renamer, renamer, ;, if, (]
[declarationRoot, =, t, ., getScopeRoot, (, ), ;, Renamer, renamer, ;, if, (, nameStack, ., isEmpty, (, ), ), {]
[declarationRoot, =, t, ., getScopeRoot, (, ), ;, Renamer, renamer, ;, if, (, nameStack, ., isEmpty, (, ), ), {]
[getScopeRoot, (, ), ;, Renamer, renamer, ;, if, (, nameStack, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (]
[getScopeRoot, (, ), ;, Renamer, renamer, ;, if, (, nameStack, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (]
[(, ), ;, Renamer, renamer, ;, if, (, nameStack, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (, !]
[(, ), ;, Renamer, renamer, ;, if, (, nameStack, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (, !]
[if, (, nameStack, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (, !, declarationRoot, ., isFunction, (, ), ||]
[(, nameStack, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (, !, declarationRoot, ., isFunction, (, ), ||, !]
[nameStack, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (, !, declarationRoot, ., isFunction, (, ), ||, !, (]
[nameStack, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (, !, declarationRoot, ., isFunction, (, ), ||, !, (]
[{, Preconditions, ., checkState, (, !, declarationRoot, ., isFunction, (, ), ||, !, (, rootRenamer, instanceof, ContextualRenamer, ), ), ;]
[{, Preconditions, ., checkState, (, !, declarationRoot, ., isFunction, (, ), ||, !, (, rootRenamer, instanceof, ContextualRenamer, ), ), ;]
[(, !, declarationRoot, ., isFunction, (, ), ||, !, (, rootRenamer, instanceof, ContextualRenamer, ), ), ;, Preconditions, ., checkState, (]
[(, !, declarationRoot, ., isFunction, (, ), ||, !, (, rootRenamer, instanceof, ContextualRenamer, ), ), ;, Preconditions, ., checkState, (]
[||, !, (, rootRenamer, instanceof, ContextualRenamer, ), ), ;, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;]
[(, rootRenamer, instanceof, ContextualRenamer, ), ), ;, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =]
[), ;, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;, }, else, {]
[Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;, }, else, {, renamer, =]
[Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;, }, else, {, renamer, =]
[Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;, }, else, {, renamer, =]
[rootRenamer, ;, }, else, {, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, }, if, (]
[;, }, else, {, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, }, if, (, !]
[;, }, else, {, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, }, if, (, !]
[., peek, (, ), ., forChildScope, (, ), ;, }, if, (, !, declarationRoot, ., isFunction, (, ), ), {]
[(, ), ., forChildScope, (, ), ;, }, if, (, !, declarationRoot, ., isFunction, (, ), ), {, findDeclaredNames, (]
[., forChildScope, (, ), ;, }, if, (, !, declarationRoot, ., isFunction, (, ), ), {, findDeclaredNames, (, declarationRoot, ,]
[(, ), ;, }, if, (, !, declarationRoot, ., isFunction, (, ), ), {, findDeclaredNames, (, declarationRoot, ,, null, ,]
[if, (, !, declarationRoot, ., isFunction, (, ), ), {, findDeclaredNames, (, declarationRoot, ,, null, ,, renamer, ), ;, }]
[if, (, !, declarationRoot, ., isFunction, (, ), ), {, findDeclaredNames, (, declarationRoot, ,, null, ,, renamer, ), ;, }]
[., isFunction, (, ), ), {, findDeclaredNames, (, declarationRoot, ,, null, ,, renamer, ), ;, }, nameStack, ., push, (]
[nameStack, ., push, (, renamer, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[., push, (, renamer, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !]
[., push, (, renamer, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !]
[@, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (, ), ), {]
[@, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (, ), ), {]
[}, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[}, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, {, Renamer, renamer, =]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, {, Renamer, renamer, =]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, {, Renamer, renamer, =]
[., FUNCTION, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, String, name, =]
[., FUNCTION, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, String, name, =]
[., FUNCTION, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, String, name, =]
[., forChildScope, (, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[., forChildScope, (, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[., forChildScope, (, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[., forChildScope, (, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[., forChildScope, (, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[(, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, name, !=]
[;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, name, !=, null, &&]
[String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, name, !=, null, &&, !]
[String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, name, !=, null, &&, !]
[(, ), ., getString, (, ), ;, if, (, name, !=, null, &&, !, name, ., isEmpty, (, ), &&]
[(, ), ., getString, (, ), ;, if, (, name, !=, null, &&, !, name, ., isEmpty, (, ), &&]
[., getString, (, ), ;, if, (, name, !=, null, &&, !, name, ., isEmpty, (, ), &&, parent, !=]
[(, ), ;, if, (, name, !=, null, &&, !, name, ., isEmpty, (, ), &&, parent, !=, null, &&]
[), ;, if, (, name, !=, null, &&, !, name, ., isEmpty, (, ), &&, parent, !=, null, &&, !]
[), ;, if, (, name, !=, null, &&, !, name, ., isEmpty, (, ), &&, parent, !=, null, &&, !]
[name, !=, null, &&, !, name, ., isEmpty, (, ), &&, parent, !=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (]
[!, name, ., isEmpty, (, ), &&, parent, !=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[!, name, ., isEmpty, (, ), &&, parent, !=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[(, ), &&, parent, !=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (]
[!=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, name, ), ;, }]
[!=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, name, ), ;, }]
[NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, name, ), ;, }, nameStack, ., push, (]
[{, renamer, ., addDeclaredName, (, name, ), ;, }, nameStack, ., push, (, renamer, ), ;, }, break, ;, case]
[{, renamer, ., addDeclaredName, (, name, ), ;, }, nameStack, ., push, (, renamer, ), ;, }, break, ;, case]
[}, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., PARAM_LIST, :, {, Renamer, renamer, =]
[}, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., PARAM_LIST, :, {, Renamer, renamer, =]
[}, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., PARAM_LIST, :, {, Renamer, renamer, =]
[:, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, for, (, Node, c, =]
[:, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, for, (, Node, c, =]
[., peek, (, ), ., forChildScope, (, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[., peek, (, ), ., forChildScope, (, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[(, ), ., forChildScope, (, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[., forChildScope, (, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[(, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[(, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, String, name, =]
[getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, String, name, =]
[null, ;, c, =, c, ., getNext, (, ), ), {, String, name, =, c, ., getString, (, ), ;]
[null, ;, c, =, c, ., getNext, (, ), ), {, String, name, =, c, ., getString, (, ), ;]
[c, ., getNext, (, ), ), {, String, name, =, c, ., getString, (, ), ;, renamer, ., addDeclaredName, (]
[String, name, =, c, ., getString, (, ), ;, renamer, ., addDeclaredName, (, name, ), ;, }, Node, functionBody, =]
[String, name, =, c, ., getString, (, ), ;, renamer, ., addDeclaredName, (, name, ), ;, }, Node, functionBody, =]
[(, ), ;, renamer, ., addDeclaredName, (, name, ), ;, }, Node, functionBody, =, n, ., getNext, (, ), ;]
[;, renamer, ., addDeclaredName, (, name, ), ;, }, Node, functionBody, =, n, ., getNext, (, ), ;, findDeclaredNames, (]
[., addDeclaredName, (, name, ), ;, }, Node, functionBody, =, n, ., getNext, (, ), ;, findDeclaredNames, (, functionBody, ,]
[(, name, ), ;, }, Node, functionBody, =, n, ., getNext, (, ), ;, findDeclaredNames, (, functionBody, ,, null, ,]
[;, }, Node, functionBody, =, n, ., getNext, (, ), ;, findDeclaredNames, (, functionBody, ,, null, ,, renamer, ), ;]
[;, }, Node, functionBody, =, n, ., getNext, (, ), ;, findDeclaredNames, (, functionBody, ,, null, ,, renamer, ), ;]
[=, n, ., getNext, (, ), ;, findDeclaredNames, (, functionBody, ,, null, ,, renamer, ), ;, nameStack, ., push, (]
[findDeclaredNames, (, functionBody, ,, null, ,, renamer, ), ;, nameStack, ., push, (, renamer, ), ;, }, break, ;, case]
[findDeclaredNames, (, functionBody, ,, null, ,, renamer, ), ;, nameStack, ., push, (, renamer, ), ;, }, break, ;, case]
[;, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., CATCH, :, {, Renamer, renamer, =]
[;, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., CATCH, :, {, Renamer, renamer, =]
[;, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., CATCH, :, {, Renamer, renamer, =]
[., CATCH, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, String, name, =]
[., CATCH, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, String, name, =]
[., CATCH, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, String, name, =]
[(, ), ., forChildScope, (, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;]
[(, ), ., forChildScope, (, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;]
[(, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, renamer, ., addDeclaredName, (]
[String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, renamer, ., addDeclaredName, (, name, ), ;]
[String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, renamer, ., addDeclaredName, (, name, ), ;]
[., getFirstChild, (, ), ., getString, (, ), ;, renamer, ., addDeclaredName, (, name, ), ;, nameStack, ., push, (]
[;, renamer, ., addDeclaredName, (, name, ), ;, nameStack, ., push, (, renamer, ), ;, }, break, ;, }, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, String, newName, =]
[{, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, String, newName, =, getReplacementName, (]
[{, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, String, newName, =, getReplacementName, (]
[{, case, Token, ., NAME, :, String, newName, =, getReplacementName, (, n, ., getString, (, ), ), ;, if, (]
[{, case, Token, ., NAME, :, String, newName, =, getReplacementName, (, n, ., getString, (, ), ), ;, if, (]
[Token, ., NAME, :, String, newName, =, getReplacementName, (, n, ., getString, (, ), ), ;, if, (, newName, !=]
[=, getReplacementName, (, n, ., getString, (, ), ), ;, if, (, newName, !=, null, ), {, Renamer, renamer, =]
[=, getReplacementName, (, n, ., getString, (, ), ), ;, if, (, newName, !=, null, ), {, Renamer, renamer, =]
[), ;, if, (, newName, !=, null, ), {, Renamer, renamer, =, nameStack, ., peek, (, ), ;, if, (]
[), ;, if, (, newName, !=, null, ), {, Renamer, renamer, =, nameStack, ., peek, (, ), ;, if, (]
[), {, Renamer, renamer, =, nameStack, ., peek, (, ), ;, if, (, renamer, ., stripConstIfReplaced, (, ), ), {]
[), {, Renamer, renamer, =, nameStack, ., peek, (, ), ;, if, (, renamer, ., stripConstIfReplaced, (, ), ), {]
[=, nameStack, ., peek, (, ), ;, if, (, renamer, ., stripConstIfReplaced, (, ), ), {, n, ., removeProp, (]
[=, nameStack, ., peek, (, ), ;, if, (, renamer, ., stripConstIfReplaced, (, ), ), {, n, ., removeProp, (]
[;, if, (, renamer, ., stripConstIfReplaced, (, ), ), {, n, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }]
[;, if, (, renamer, ., stripConstIfReplaced, (, ), ), {, n, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }]
[., stripConstIfReplaced, (, ), ), {, n, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, n, ., setString, (]
[), ), {, n, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, n, ., setString, (, newName, ), ;]
[), ), {, n, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, n, ., setString, (, newName, ), ;]
[), ), {, n, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, n, ., setString, (, newName, ), ;]
[., setString, (, newName, ), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, break, ;, case]
[., setString, (, newName, ), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, break, ;, case]
[), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, break, ;, case, Token, ., FUNCTION, :]
[), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, break, ;, case, Token, ., FUNCTION, :]
[), ., reportCodeChange, (, ), ;, }, break, ;, case, Token, ., FUNCTION, :, nameStack, ., pop, (, ), ;]
[), ., reportCodeChange, (, ), ;, }, break, ;, case, Token, ., FUNCTION, :, nameStack, ., pop, (, ), ;]
[case, Token, ., FUNCTION, :, nameStack, ., pop, (, ), ;, nameStack, ., pop, (, ), ;, break, ;, case]
[case, Token, ., FUNCTION, :, nameStack, ., pop, (, ), ;, nameStack, ., pop, (, ), ;, break, ;, case]
[pop, (, ), ;, nameStack, ., pop, (, ), ;, break, ;, case, Token, ., PARAM_LIST, :, break, ;, case]
[pop, (, ), ;, nameStack, ., pop, (, ), ;, break, ;, case, Token, ., PARAM_LIST, :, break, ;, case]
[nameStack, ., pop, (, ), ;, break, ;, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., CATCH, :]
[nameStack, ., pop, (, ), ;, break, ;, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., CATCH, :]
[(, ), ;, break, ;, }, }, private, String, getReplacementName, (, String, oldName, ), {, for, (, Renamer, names, :]
[}, private, String, getReplacementName, (, String, oldName, ), {, for, (, Renamer, names, :, nameStack, ), {, String, newName, =]
[}, private, String, getReplacementName, (, String, oldName, ), {, for, (, Renamer, names, :, nameStack, ), {, String, newName, =]
[(, String, oldName, ), {, for, (, Renamer, names, :, nameStack, ), {, String, newName, =, names, ., getReplacementName, (]
[for, (, Renamer, names, :, nameStack, ), {, String, newName, =, names, ., getReplacementName, (, oldName, ), ;, if, (]
[for, (, Renamer, names, :, nameStack, ), {, String, newName, =, names, ., getReplacementName, (, oldName, ), ;, if, (]
[Renamer, names, :, nameStack, ), {, String, newName, =, names, ., getReplacementName, (, oldName, ), ;, if, (, newName, !=]
[), {, String, newName, =, names, ., getReplacementName, (, oldName, ), ;, if, (, newName, !=, null, ), {, return]
[names, ., getReplacementName, (, oldName, ), ;, if, (, newName, !=, null, ), {, return, newName, ;, }, }, return]
[return, null, ;, }, private, void, findDeclaredNames, (, Node, n, ,, Node, parent, ,, Renamer, renamer, ), {, if, (]
[return, null, ;, }, private, void, findDeclaredNames, (, Node, n, ,, Node, parent, ,, Renamer, renamer, ), {, if, (]
[return, null, ;, }, private, void, findDeclaredNames, (, Node, n, ,, Node, parent, ,, Renamer, renamer, ), {, if, (]
[return, null, ;, }, private, void, findDeclaredNames, (, Node, n, ,, Node, parent, ,, Renamer, renamer, ), {, if, (]
[;, }, private, void, findDeclaredNames, (, Node, n, ,, Node, parent, ,, Renamer, renamer, ), {, if, (, parent, ==]
[private, void, findDeclaredNames, (, Node, n, ,, Node, parent, ,, Renamer, renamer, ), {, if, (, parent, ==, null, ||]
[void, findDeclaredNames, (, Node, n, ,, Node, parent, ,, Renamer, renamer, ), {, if, (, parent, ==, null, ||, !]
[void, findDeclaredNames, (, Node, n, ,, Node, parent, ,, Renamer, renamer, ), {, if, (, parent, ==, null, ||, !]
[Node, parent, ,, Renamer, renamer, ), {, if, (, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||]
[Node, parent, ,, Renamer, renamer, ), {, if, (, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||]
[,, Renamer, renamer, ), {, if, (, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==]
[,, Renamer, renamer, ), {, if, (, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==]
[null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ), {, if, (]
[null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ), {, if, (]
[., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (]
[||, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {]
[||, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {]
[., getFirstChild, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (]
[., getFirstChild, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (]
[(, n, ), ), {, renamer, ., addDeclaredName, (, n, ., getString, (, ), ), ;, }, else, if, (]
[(, n, ), ), {, renamer, ., addDeclaredName, (, n, ., getString, (, ), ), ;, }, else, if, (]
[{, renamer, ., addDeclaredName, (, n, ., getString, (, ), ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (]
[getString, (, ), ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =]
[getString, (, ), ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =]
[else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;]
[else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;]
[., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, renamer, ., addDeclaredName, (]
[., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, renamer, ., addDeclaredName, (]
[(, ), ;, renamer, ., addDeclaredName, (, nameNode, ., getString, (, ), ), ;, }, for, (, Node, c, =]
[(, ), ;, renamer, ., addDeclaredName, (, nameNode, ., getString, (, ), ), ;, }, for, (, Node, c, =]
[(, nameNode, ., getString, (, ), ), ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[(, nameNode, ., getString, (, ), ), ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[., getString, (, ), ), ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[(, ), ), ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[), ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[), ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, findDeclaredNames, (]
[(, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, findDeclaredNames, (, c, ,]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, findDeclaredNames, (, c, ,, n, ,]
[static, class, ContextualRenameInverter, implements, ScopedCallback, ,, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, Set, <, String, >, referencedNames, =]
[static, class, ContextualRenameInverter, implements, ScopedCallback, ,, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, Set, <, String, >, referencedNames, =]
[String, >, referencedNames, =, ImmutableSet, ., of, (, ), ;, private, Deque, <, Set, <, String, >, >, referenceStack, =]
[Set, <, String, >, >, (, ), ;, private, Map, <, String, ,, List, <, Node, >, >, nameMap, =]
[Set, <, String, >, >, (, ), ;, private, Map, <, String, ,, List, <, Node, >, >, nameMap, =]
[List, <, Node, >, >, nameMap, =, Maps, ., newHashMap, (, ), ;, private, ContextualRenameInverter, (, AbstractCompiler, compiler, ), {]
[List, <, Node, >, >, nameMap, =, Maps, ., newHashMap, (, ), ;, private, ContextualRenameInverter, (, AbstractCompiler, compiler, ), {]
[>, nameMap, =, Maps, ., newHashMap, (, ), ;, private, ContextualRenameInverter, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse, (, compiler, ,, js, ,]
[compiler, ,, js, ,, this, ), ;, }, public, static, String, getOrginalName, (, String, name, ), {, int, index, =]
[js, ,, this, ), ;, }, public, static, String, getOrginalName, (, String, name, ), {, int, index, =, indexOfSeparator, (]
[;, }, public, static, String, getOrginalName, (, String, name, ), {, int, index, =, indexOfSeparator, (, name, ), ;, return]
[;, }, public, static, String, getOrginalName, (, String, name, ), {, int, index, =, indexOfSeparator, (, name, ), ;, return]
[}, public, static, String, getOrginalName, (, String, name, ), {, int, index, =, indexOfSeparator, (, name, ), ;, return, (]
[}, public, static, String, getOrginalName, (, String, name, ), {, int, index, =, indexOfSeparator, (, name, ), ;, return, (]
[static, String, getOrginalName, (, String, name, ), {, int, index, =, indexOfSeparator, (, name, ), ;, return, (, index, ==]
[String, getOrginalName, (, String, name, ), {, int, index, =, indexOfSeparator, (, name, ), ;, return, (, index, ==, -]
[String, name, ), {, int, index, =, indexOfSeparator, (, name, ), ;, return, (, index, ==, -, 1, ), ?]
[), {, int, index, =, indexOfSeparator, (, name, ), ;, return, (, index, ==, -, 1, ), ?, name, :]
[), {, int, index, =, indexOfSeparator, (, name, ), ;, return, (, index, ==, -, 1, ), ?, name, :]
[=, indexOfSeparator, (, name, ), ;, return, (, index, ==, -, 1, ), ?, name, :, name, ., substring, (]
[(, name, ), ;, return, (, index, ==, -, 1, ), ?, name, :, name, ., substring, (, 0, ,]
[name, ., substring, (, 0, ,, index, ), ;, }, private, static, int, indexOfSeparator, (, String, name, ), {, return]
[name, ., substring, (, 0, ,, index, ), ;, }, private, static, int, indexOfSeparator, (, String, name, ), {, return]
[0, ,, index, ), ;, }, private, static, int, indexOfSeparator, (, String, name, ), {, return, name, ., lastIndexOf, (]
[0, ,, index, ), ;, }, private, static, int, indexOfSeparator, (, String, name, ), {, return, name, ., lastIndexOf, (]
[return, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ;, }, private, boolean, containsSeparator, (, String, name, ), {, return]
[return, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ;, }, private, boolean, containsSeparator, (, String, name, ), {, return]
[return, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ;, }, private, boolean, containsSeparator, (, String, name, ), {, return]
[(, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ;, }, private, boolean, containsSeparator, (, String, name, ), {, return, name, ., indexOf, (]
[(, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ;, }, private, boolean, containsSeparator, (, String, name, ), {, return, name, ., indexOf, (]
[;, }, private, boolean, containsSeparator, (, String, name, ), {, return, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=]
[}, private, boolean, containsSeparator, (, String, name, ), {, return, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -]
[., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }]
[public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }]
[NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, referenceStack, ., push, (]
[{, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, referenceStack, ., push, (, referencedNames, ), ;]
[(, t, ., inGlobalScope, (, ), ), {, return, ;, }, referenceStack, ., push, (, referencedNames, ), ;, referencedNames, =]
[(, t, ., inGlobalScope, (, ), ), {, return, ;, }, referenceStack, ., push, (, referencedNames, ), ;, referencedNames, =]
[=, Sets, ., newHashSet, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[=, Sets, ., newHashSet, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, for, (, Iterator, <, Var, >, it, =]
[if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, for, (, Iterator, <, Var, >, it, =]
[if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, for, (, Iterator, <, Var, >, it, =]
[;, }, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[;, }, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[(, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;]
[;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, handleScopeVar, (]
[v, =, it, ., next, (, ), ;, handleScopeVar, (, v, ), ;, }, Set, <, String, >, current, =]
[it, ., next, (, ), ;, handleScopeVar, (, v, ), ;, }, Set, <, String, >, current, =, referencedNames, ;]
[next, (, ), ;, handleScopeVar, (, v, ), ;, }, Set, <, String, >, current, =, referencedNames, ;, referencedNames, =]
[next, (, ), ;, handleScopeVar, (, v, ), ;, }, Set, <, String, >, current, =, referencedNames, ;, referencedNames, =]
[;, }, Set, <, String, >, current, =, referencedNames, ;, referencedNames, =, referenceStack, ., pop, (, ), ;, if, (]
[}, Set, <, String, >, current, =, referencedNames, ;, referencedNames, =, referenceStack, ., pop, (, ), ;, if, (, !]
[}, Set, <, String, >, current, =, referencedNames, ;, referencedNames, =, referenceStack, ., pop, (, ), ;, if, (, !]
[referencedNames, ;, referencedNames, =, referenceStack, ., pop, (, ), ;, if, (, !, referenceStack, ., isEmpty, (, ), ), {]
[referencedNames, ;, referencedNames, =, referenceStack, ., pop, (, ), ;, if, (, !, referenceStack, ., isEmpty, (, ), ), {]
[referenceStack, ., pop, (, ), ;, if, (, !, referenceStack, ., isEmpty, (, ), ), {, referencedNames, ., addAll, (]
[{, referencedNames, ., addAll, (, current, ), ;, }, }, void, handleScopeVar, (, Var, v, ), {, String, name, =]
[{, referencedNames, ., addAll, (, current, ), ;, }, }, void, handleScopeVar, (, Var, v, ), {, String, name, =]
[}, }, void, handleScopeVar, (, Var, v, ), {, String, name, =, v, ., getName, (, ), ;, if, (]
[}, }, void, handleScopeVar, (, Var, v, ), {, String, name, =, v, ., getName, (, ), ;, if, (]
[void, handleScopeVar, (, Var, v, ), {, String, name, =, v, ., getName, (, ), ;, if, (, containsSeparator, (]
[Var, v, ), {, String, name, =, v, ., getName, (, ), ;, if, (, containsSeparator, (, name, ), &&]
[v, ), {, String, name, =, v, ., getName, (, ), ;, if, (, containsSeparator, (, name, ), &&, !]
[v, ), {, String, name, =, v, ., getName, (, ), ;, if, (, containsSeparator, (, name, ), &&, !]
[{, String, name, =, v, ., getName, (, ), ;, if, (, containsSeparator, (, name, ), &&, !, getOrginalName, (]
[(, containsSeparator, (, name, ), &&, !, getOrginalName, (, name, ), ., isEmpty, (, ), ), {, String, newName, =]
[(, name, ), &&, !, getOrginalName, (, name, ), ., isEmpty, (, ), ), {, String, newName, =, findReplacementName, (]
[&&, !, getOrginalName, (, name, ), ., isEmpty, (, ), ), {, String, newName, =, findReplacementName, (, name, ), ;]
[&&, !, getOrginalName, (, name, ), ., isEmpty, (, ), ), {, String, newName, =, findReplacementName, (, name, ), ;]
[name, ), ., isEmpty, (, ), ), {, String, newName, =, findReplacementName, (, name, ), ;, referencedNames, ., remove, (]
[isEmpty, (, ), ), {, String, newName, =, findReplacementName, (, name, ), ;, referencedNames, ., remove, (, name, ), ;]
[isEmpty, (, ), ), {, String, newName, =, findReplacementName, (, name, ), ;, referencedNames, ., remove, (, name, ), ;]
[{, String, newName, =, findReplacementName, (, name, ), ;, referencedNames, ., remove, (, name, ), ;, referencedNames, ., add, (]
[referencedNames, ., remove, (, name, ), ;, referencedNames, ., add, (, newName, ), ;, List, <, Node, >, references, =]
[referencedNames, ., remove, (, name, ), ;, referencedNames, ., add, (, newName, ), ;, List, <, Node, >, references, =]
[name, ), ;, referencedNames, ., add, (, newName, ), ;, List, <, Node, >, references, =, nameMap, ., get, (]
[referencedNames, ., add, (, newName, ), ;, List, <, Node, >, references, =, nameMap, ., get, (, name, ), ;]
[referencedNames, ., add, (, newName, ), ;, List, <, Node, >, references, =, nameMap, ., get, (, name, ), ;]
[newName, ), ;, List, <, Node, >, references, =, nameMap, ., get, (, name, ), ;, Preconditions, ., checkState, (]
[newName, ), ;, List, <, Node, >, references, =, nameMap, ., get, (, name, ), ;, Preconditions, ., checkState, (]
[;, List, <, Node, >, references, =, nameMap, ., get, (, name, ), ;, Preconditions, ., checkState, (, references, !=]
[., get, (, name, ), ;, Preconditions, ., checkState, (, references, !=, null, ), ;, for, (, Node, n, :]
[name, ), ;, Preconditions, ., checkState, (, references, !=, null, ), ;, for, (, Node, n, :, references, ), {]
[name, ), ;, Preconditions, ., checkState, (, references, !=, null, ), ;, for, (, Node, n, :, references, ), {]
[., checkState, (, references, !=, null, ), ;, for, (, Node, n, :, references, ), {, Preconditions, ., checkState, (]
[., checkState, (, references, !=, null, ), ;, for, (, Node, n, :, references, ), {, Preconditions, ., checkState, (]
[;, for, (, Node, n, :, references, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;]
[;, for, (, Node, n, :, references, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;]
[n, :, references, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, n, ., setString, (]
[{, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, n, ., setString, (, newName, ), ;, }]
[{, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, n, ., setString, (, newName, ), ;, }]
[., isName, (, ), ), ;, n, ., setString, (, newName, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[., isName, (, ), ), ;, n, ., setString, (, newName, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[), ;, n, ., setString, (, newName, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameMap, ., remove, (]
[nameMap, ., remove, (, name, ), ;, }, }, private, String, findReplacementName, (, String, name, ), {, String, original, =]
[remove, (, name, ), ;, }, }, private, String, findReplacementName, (, String, name, ), {, String, original, =, getOrginalName, (]
[}, private, String, findReplacementName, (, String, name, ), {, String, original, =, getOrginalName, (, name, ), ;, String, newName, =]
[String, name, ), {, String, original, =, getOrginalName, (, name, ), ;, String, newName, =, original, ;, int, i, =]
[String, original, =, getOrginalName, (, name, ), ;, String, newName, =, original, ;, int, i, =, 0, ;, while, (]
[original, =, getOrginalName, (, name, ), ;, String, newName, =, original, ;, int, i, =, 0, ;, while, (, !]
[getOrginalName, (, name, ), ;, String, newName, =, original, ;, int, i, =, 0, ;, while, (, !, isValidName, (]
[;, String, newName, =, original, ;, int, i, =, 0, ;, while, (, !, isValidName, (, newName, ), ), {]
[newName, =, original, ;, int, i, =, 0, ;, while, (, !, isValidName, (, newName, ), ), {, newName, =]
[newName, =, original, ;, int, i, =, 0, ;, while, (, !, isValidName, (, newName, ), ), {, newName, =]
[newName, =, original, ;, int, i, =, 0, ;, while, (, !, isValidName, (, newName, ), ), {, newName, =]
[original, ;, int, i, =, 0, ;, while, (, !, isValidName, (, newName, ), ), {, newName, =, original, +]
[original, ;, int, i, =, 0, ;, while, (, !, isValidName, (, newName, ), ), {, newName, =, original, +]
[=, 0, ;, while, (, !, isValidName, (, newName, ), ), {, newName, =, original, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +]
[=, 0, ;, while, (, !, isValidName, (, newName, ), ), {, newName, =, original, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +]
[(, !, isValidName, (, newName, ), ), {, newName, =, original, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, String, ., valueOf, (]
[(, !, isValidName, (, newName, ), ), {, newName, =, original, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, String, ., valueOf, (]
[), {, newName, =, original, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, String, ., valueOf, (, i, ++, ), ;, }, return]
[(, i, ++, ), ;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name, ), {, if, (]
[(, i, ++, ), ;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name, ), {, if, (]
[(, i, ++, ), ;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name, ), {, if, (]
[(, i, ++, ), ;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name, ), {, if, (]
[;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name, ), {, if, (, TokenStream, ., isJSIdentifier, (]
[newName, ;, }, private, boolean, isValidName, (, String, name, ), {, if, (, TokenStream, ., isJSIdentifier, (, name, ), &&]
[;, }, private, boolean, isValidName, (, String, name, ), {, if, (, TokenStream, ., isJSIdentifier, (, name, ), &&, !]
[;, }, private, boolean, isValidName, (, String, name, ), {, if, (, TokenStream, ., isJSIdentifier, (, name, ), &&, !]
[isValidName, (, String, name, ), {, if, (, TokenStream, ., isJSIdentifier, (, name, ), &&, !, referencedNames, ., contains, (]
[name, ), {, if, (, TokenStream, ., isJSIdentifier, (, name, ), &&, !, referencedNames, ., contains, (, name, ), &&]
[), {, if, (, TokenStream, ., isJSIdentifier, (, name, ), &&, !, referencedNames, ., contains, (, name, ), &&, !]
[), {, if, (, TokenStream, ., isJSIdentifier, (, name, ), &&, !, referencedNames, ., contains, (, name, ), &&, !]
[TokenStream, ., isJSIdentifier, (, name, ), &&, !, referencedNames, ., contains, (, name, ), &&, !, name, ., equals, (]
[), &&, !, referencedNames, ., contains, (, name, ), &&, !, name, ., equals, (, ARGUMENTS, ), ), {, return]
[., contains, (, name, ), &&, !, name, ., equals, (, ARGUMENTS, ), ), {, return, true, ;, }, return]
[false, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, if, (]
[node, ,, Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (]
[node, ,, Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (]
[), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (, NodeUtil, ., isReferenceName, (]
[(, ), ), {, return, ;, }, if, (, NodeUtil, ., isReferenceName, (, node, ), ), {, String, name, =]
[(, ), ), {, return, ;, }, if, (, NodeUtil, ., isReferenceName, (, node, ), ), {, String, name, =]
[}, if, (, NodeUtil, ., isReferenceName, (, node, ), ), {, String, name, =, node, ., getString, (, ), ;]
[}, if, (, NodeUtil, ., isReferenceName, (, node, ), ), {, String, name, =, node, ., getString, (, ), ;]
[., isReferenceName, (, node, ), ), {, String, name, =, node, ., getString, (, ), ;, referencedNames, ., add, (]
[), {, String, name, =, node, ., getString, (, ), ;, referencedNames, ., add, (, name, ), ;, if, (]
[String, name, =, node, ., getString, (, ), ;, referencedNames, ., add, (, name, ), ;, if, (, containsSeparator, (]
[., getString, (, ), ;, referencedNames, ., add, (, name, ), ;, if, (, containsSeparator, (, name, ), ), {]
[(, ), ;, referencedNames, ., add, (, name, ), ;, if, (, containsSeparator, (, name, ), ), {, addCandidateNameReference, (]
[;, referencedNames, ., add, (, name, ), ;, if, (, containsSeparator, (, name, ), ), {, addCandidateNameReference, (, name, ,]
[}, }, }, private, void, addCandidateNameReference, (, String, name, ,, Node, n, ), {, List, <, Node, >, nodes, =]
[}, }, }, private, void, addCandidateNameReference, (, String, name, ,, Node, n, ), {, List, <, Node, >, nodes, =]
[void, addCandidateNameReference, (, String, name, ,, Node, n, ), {, List, <, Node, >, nodes, =, nameMap, ., get, (]
[,, Node, n, ), {, List, <, Node, >, nodes, =, nameMap, ., get, (, name, ), ;, if, (]
[,, Node, n, ), {, List, <, Node, >, nodes, =, nameMap, ., get, (, name, ), ;, if, (]
[n, ), {, List, <, Node, >, nodes, =, nameMap, ., get, (, name, ), ;, if, (, null, ==]
[List, <, Node, >, nodes, =, nameMap, ., get, (, name, ), ;, if, (, null, ==, nodes, ), {]
[Node, >, nodes, =, nameMap, ., get, (, name, ), ;, if, (, null, ==, nodes, ), {, nodes, =]
[Node, >, nodes, =, nameMap, ., get, (, name, ), ;, if, (, null, ==, nodes, ), {, nodes, =]
[get, (, name, ), ;, if, (, null, ==, nodes, ), {, nodes, =, Lists, ., newLinkedList, (, ), ;]
[get, (, name, ), ;, if, (, null, ==, nodes, ), {, nodes, =, Lists, ., newLinkedList, (, ), ;]
[;, if, (, null, ==, nodes, ), {, nodes, =, Lists, ., newLinkedList, (, ), ;, nameMap, ., put, (]
[(, null, ==, nodes, ), {, nodes, =, Lists, ., newLinkedList, (, ), ;, nameMap, ., put, (, name, ,]
[), {, nodes, =, Lists, ., newLinkedList, (, ), ;, nameMap, ., put, (, name, ,, nodes, ), ;, }]
[), {, nodes, =, Lists, ., newLinkedList, (, ), ;, nameMap, ., put, (, name, ,, nodes, ), ;, }]
[Lists, ., newLinkedList, (, ), ;, nameMap, ., put, (, name, ,, nodes, ), ;, }, nodes, ., add, (]
[Renamer, {, private, final, Multiset, <, String, >, nameUsage, ;, private, final, Map, <, String, ,, String, >, declarations, =]
[Renamer, {, private, final, Multiset, <, String, >, nameUsage, ;, private, final, Map, <, String, ,, String, >, declarations, =]
[String, >, declarations, =, Maps, ., newHashMap, (, ), ;, private, final, boolean, global, ;, final, static, String, UNIQUE_ID_SEPARATOR, =]
[newHashMap, (, ), ;, private, final, boolean, global, ;, final, static, String, UNIQUE_ID_SEPARATOR, =, "$$", ;, ContextualRenamer, (, ), {]
[newHashMap, (, ), ;, private, final, boolean, global, ;, final, static, String, UNIQUE_ID_SEPARATOR, =, "$$", ;, ContextualRenamer, (, ), {]
[private, final, boolean, global, ;, final, static, String, UNIQUE_ID_SEPARATOR, =, "$$", ;, ContextualRenamer, (, ), {, this, ., global, =]
[boolean, global, ;, final, static, String, UNIQUE_ID_SEPARATOR, =, "$$", ;, ContextualRenamer, (, ), {, this, ., global, =, true, ;]
[;, final, static, String, UNIQUE_ID_SEPARATOR, =, "$$", ;, ContextualRenamer, (, ), {, this, ., global, =, true, ;, nameUsage, =]
[;, final, static, String, UNIQUE_ID_SEPARATOR, =, "$$", ;, ContextualRenamer, (, ), {, this, ., global, =, true, ;, nameUsage, =]
[;, nameUsage, =, HashMultiset, ., create, (, ), ;, }, private, ContextualRenamer, (, Multiset, <, String, >, nameUsage, ), {]
[;, nameUsage, =, HashMultiset, ., create, (, ), ;, }, private, ContextualRenamer, (, Multiset, <, String, >, nameUsage, ), {]
[., create, (, ), ;, }, private, ContextualRenamer, (, Multiset, <, String, >, nameUsage, ), {, this, ., global, =]
[(, ), ;, }, private, ContextualRenamer, (, Multiset, <, String, >, nameUsage, ), {, this, ., global, =, false, ;]
[(, ), ;, }, private, ContextualRenamer, (, Multiset, <, String, >, nameUsage, ), {, this, ., global, =, false, ;]
[private, ContextualRenamer, (, Multiset, <, String, >, nameUsage, ), {, this, ., global, =, false, ;, this, ., nameUsage, =]
[global, =, false, ;, this, ., nameUsage, =, nameUsage, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return]
[;, this, ., nameUsage, =, nameUsage, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, ContextualRenamer, (]
[return, new, ContextualRenamer, (, nameUsage, ), ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (]
[new, ContextualRenamer, (, nameUsage, ), ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (, !]
[new, ContextualRenamer, (, nameUsage, ), ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (, !]
[), ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (, !, name, ., equals, (]
[void, addDeclaredName, (, String, name, ), {, if, (, !, name, ., equals, (, ARGUMENTS, ), ), {, if, (]
[String, name, ), {, if, (, !, name, ., equals, (, ARGUMENTS, ), ), {, if, (, global, ), {]
[), {, if, (, !, name, ., equals, (, ARGUMENTS, ), ), {, if, (, global, ), {, reserveName, (]
[(, ARGUMENTS, ), ), {, if, (, global, ), {, reserveName, (, name, ), ;, }, else, {, if, (]
[ARGUMENTS, ), ), {, if, (, global, ), {, reserveName, (, name, ), ;, }, else, {, if, (, !]
[ARGUMENTS, ), ), {, if, (, global, ), {, reserveName, (, name, ), ;, }, else, {, if, (, !]
[if, (, global, ), {, reserveName, (, name, ), ;, }, else, {, if, (, !, declarations, ., containsKey, (]
[name, ), ;, }, else, {, if, (, !, declarations, ., containsKey, (, name, ), ), {, int, id, =]
[;, }, else, {, if, (, !, declarations, ., containsKey, (, name, ), ), {, int, id, =, incrementNameCount, (]
[!, declarations, ., containsKey, (, name, ), ), {, int, id, =, incrementNameCount, (, name, ), ;, String, newName, =]
[(, name, ), ), {, int, id, =, incrementNameCount, (, name, ), ;, String, newName, =, null, ;, if, (]
[(, name, ), ), {, int, id, =, incrementNameCount, (, name, ), ;, String, newName, =, null, ;, if, (]
[), ), {, int, id, =, incrementNameCount, (, name, ), ;, String, newName, =, null, ;, if, (, id, !=]
[int, id, =, incrementNameCount, (, name, ), ;, String, newName, =, null, ;, if, (, id, !=, 0, ), {]
[=, incrementNameCount, (, name, ), ;, String, newName, =, null, ;, if, (, id, !=, 0, ), {, newName, =]
[(, name, ), ;, String, newName, =, null, ;, if, (, id, !=, 0, ), {, newName, =, getUniqueName, (]
[), ;, String, newName, =, null, ;, if, (, id, !=, 0, ), {, newName, =, getUniqueName, (, name, ,]
[=, null, ;, if, (, id, !=, 0, ), {, newName, =, getUniqueName, (, name, ,, id, ), ;, }]
[=, null, ;, if, (, id, !=, 0, ), {, newName, =, getUniqueName, (, name, ,, id, ), ;, }]
[(, id, !=, 0, ), {, newName, =, getUniqueName, (, name, ,, id, ), ;, }, declarations, ., put, (]
[!=, 0, ), {, newName, =, getUniqueName, (, name, ,, id, ), ;, }, declarations, ., put, (, name, ,]
[name, ,, newName, ), ;, }, }, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return]
[name, ,, newName, ), ;, }, }, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return]
[;, }, }, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, declarations, ., get, (]
[declarations, ., get, (, oldName, ), ;, }, private, String, getUniqueName, (, String, name, ,, int, id, ), {, return]
[declarations, ., get, (, oldName, ), ;, }, private, String, getUniqueName, (, String, name, ,, int, id, ), {, return]
[declarations, ., get, (, oldName, ), ;, }, private, String, getUniqueName, (, String, name, ,, int, id, ), {, return]
[get, (, oldName, ), ;, }, private, String, getUniqueName, (, String, name, ,, int, id, ), {, return, name, +]
[oldName, ), ;, }, private, String, getUniqueName, (, String, name, ,, int, id, ), {, return, name, +, UNIQUE_ID_SEPARATOR, +]
[int, id, ), {, return, name, +, UNIQUE_ID_SEPARATOR, +, id, ;, }, private, void, reserveName, (, String, name, ), {]
[int, id, ), {, return, name, +, UNIQUE_ID_SEPARATOR, +, id, ;, }, private, void, reserveName, (, String, name, ), {]
[return, name, +, UNIQUE_ID_SEPARATOR, +, id, ;, }, private, void, reserveName, (, String, name, ), {, nameUsage, ., setCount, (]
[+, UNIQUE_ID_SEPARATOR, +, id, ;, }, private, void, reserveName, (, String, name, ), {, nameUsage, ., setCount, (, name, ,]
[+, id, ;, }, private, void, reserveName, (, String, name, ), {, nameUsage, ., setCount, (, name, ,, 0, ,]
[., setCount, (, name, ,, 0, ,, 1, ), ;, }, private, int, incrementNameCount, (, String, name, ), {, return]
[., setCount, (, name, ,, 0, ,, 1, ), ;, }, private, int, incrementNameCount, (, String, name, ), {, return]
[,, 0, ,, 1, ), ;, }, private, int, incrementNameCount, (, String, name, ), {, return, nameUsage, ., add, (]
[,, 1, ), ;, }, private, int, incrementNameCount, (, String, name, ), {, return, nameUsage, ., add, (, name, ,]
[return, nameUsage, ., add, (, name, ,, 1, ), ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return]
[false, ;, }, }, static, class, InlineRenamer, implements, Renamer, {, private, final, Map, <, String, ,, String, >, declarations, =]
[false, ;, }, }, static, class, InlineRenamer, implements, Renamer, {, private, final, Map, <, String, ,, String, >, declarations, =]
[private, final, boolean, removeConstness, ;, InlineRenamer, (, Supplier, <, String, >, uniqueIdSupplier, ,, String, idPrefix, ,, boolean, removeConstness, ), {]
[private, final, boolean, removeConstness, ;, InlineRenamer, (, Supplier, <, String, >, uniqueIdSupplier, ,, String, idPrefix, ,, boolean, removeConstness, ), {]
[;, InlineRenamer, (, Supplier, <, String, >, uniqueIdSupplier, ,, String, idPrefix, ,, boolean, removeConstness, ), {, this, ., uniqueIdSupplier, =]
[(, Supplier, <, String, >, uniqueIdSupplier, ,, String, idPrefix, ,, boolean, removeConstness, ), {, this, ., uniqueIdSupplier, =, uniqueIdSupplier, ;]
[(, Supplier, <, String, >, uniqueIdSupplier, ,, String, idPrefix, ,, boolean, removeConstness, ), {, this, ., uniqueIdSupplier, =, uniqueIdSupplier, ;]
[>, uniqueIdSupplier, ,, String, idPrefix, ,, boolean, removeConstness, ), {, this, ., uniqueIdSupplier, =, uniqueIdSupplier, ;, Preconditions, ., checkArgument, (]
[uniqueIdSupplier, ,, String, idPrefix, ,, boolean, removeConstness, ), {, this, ., uniqueIdSupplier, =, uniqueIdSupplier, ;, Preconditions, ., checkArgument, (, !]
[uniqueIdSupplier, ,, String, idPrefix, ,, boolean, removeConstness, ), {, this, ., uniqueIdSupplier, =, uniqueIdSupplier, ;, Preconditions, ., checkArgument, (, !]
[), {, this, ., uniqueIdSupplier, =, uniqueIdSupplier, ;, Preconditions, ., checkArgument, (, !, idPrefix, ., isEmpty, (, ), ), ;]
[), {, this, ., uniqueIdSupplier, =, uniqueIdSupplier, ;, Preconditions, ., checkArgument, (, !, idPrefix, ., isEmpty, (, ), ), ;]
[uniqueIdSupplier, =, uniqueIdSupplier, ;, Preconditions, ., checkArgument, (, !, idPrefix, ., isEmpty, (, ), ), ;, this, ., idPrefix, =]
[uniqueIdSupplier, ;, Preconditions, ., checkArgument, (, !, idPrefix, ., isEmpty, (, ), ), ;, this, ., idPrefix, =, idPrefix, ;]
[uniqueIdSupplier, ;, Preconditions, ., checkArgument, (, !, idPrefix, ., isEmpty, (, ), ), ;, this, ., idPrefix, =, idPrefix, ;]
[checkArgument, (, !, idPrefix, ., isEmpty, (, ), ), ;, this, ., idPrefix, =, idPrefix, ;, this, ., removeConstness, =]
[=, idPrefix, ;, this, ., removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {]
[=, idPrefix, ;, this, ., removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {]
[., removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, Preconditions, ., checkState, (]
[removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, Preconditions, ., checkState, (, !]
[removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, Preconditions, ., checkState, (, !]
[}, @, Override, public, void, addDeclaredName, (, String, name, ), {, Preconditions, ., checkState, (, !, name, ., equals, (]
[(, String, name, ), {, Preconditions, ., checkState, (, !, name, ., equals, (, ARGUMENTS, ), ), ;, if, (]
[String, name, ), {, Preconditions, ., checkState, (, !, name, ., equals, (, ARGUMENTS, ), ), ;, if, (, !]
[String, name, ), {, Preconditions, ., checkState, (, !, name, ., equals, (, ARGUMENTS, ), ), ;, if, (, !]
[Preconditions, ., checkState, (, !, name, ., equals, (, ARGUMENTS, ), ), ;, if, (, !, declarations, ., containsKey, (]
[!, name, ., equals, (, ARGUMENTS, ), ), ;, if, (, !, declarations, ., containsKey, (, name, ), ), {]
[!, name, ., equals, (, ARGUMENTS, ), ), ;, if, (, !, declarations, ., containsKey, (, name, ), ), {]
[(, ARGUMENTS, ), ), ;, if, (, !, declarations, ., containsKey, (, name, ), ), {, declarations, ., put, (]
[), ), ;, if, (, !, declarations, ., containsKey, (, name, ), ), {, declarations, ., put, (, name, ,]
[;, if, (, !, declarations, ., containsKey, (, name, ), ), {, declarations, ., put, (, name, ,, getUniqueName, (]
[name, ,, getUniqueName, (, name, ), ), ;, }, }, private, String, getUniqueName, (, String, name, ), {, if, (]
[name, ,, getUniqueName, (, name, ), ), ;, }, }, private, String, getUniqueName, (, String, name, ), {, if, (]
[}, }, private, String, getUniqueName, (, String, name, ), {, if, (, name, ., isEmpty, (, ), ), {, return]
[(, String, name, ), {, if, (, name, ., isEmpty, (, ), ), {, return, name, ;, }, if, (]
[(, String, name, ), {, if, (, name, ., isEmpty, (, ), ), {, return, name, ;, }, if, (]
[(, String, name, ), {, if, (, name, ., isEmpty, (, ), ), {, return, name, ;, }, if, (]
[{, if, (, name, ., isEmpty, (, ), ), {, return, name, ;, }, if, (, name, ., indexOf, (]
[{, if, (, name, ., isEmpty, (, ), ), {, return, name, ;, }, if, (, name, ., indexOf, (]
[isEmpty, (, ), ), {, return, name, ;, }, if, (, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=]
[(, ), ), {, return, name, ;, }, if, (, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -]
[{, return, name, ;, }, if, (, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ), {]
[name, ;, }, if, (, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ), {, name, =]
[name, ;, }, if, (, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ), {, name, =]
[(, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ), {, name, =, name, ., substring, (]
[., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ), {, name, =, name, ., substring, (, 0, ,]
[., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ), {, name, =, name, ., substring, (, 0, ,]
[., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ), {, name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (]
[., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ), {, name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (]
[name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return]
[name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return]
[name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return]
[name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return]
[name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return, name, +]
[name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return, name, +]
[0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return, name, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +]
[name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return, name, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, idPrefix, +]
[name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return, name, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, idPrefix, +]
[idPrefix, +, uniqueIdSupplier, ., get, (, ), ;, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return]
[idPrefix, +, uniqueIdSupplier, ., get, (, ), ;, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return]
[get, (, ), ;, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, declarations, ., get, (]
[), {, return, declarations, ., get, (, oldName, ), ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return]
[declarations, ., get, (, oldName, ), ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (]
[get, (, oldName, ), ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (, uniqueIdSupplier, ,]
[oldName, ), ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (, uniqueIdSupplier, ,, idPrefix, ,]
[new, InlineRenamer, (, uniqueIdSupplier, ,, idPrefix, ,, removeConstness, ), ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return]
[>, uniqueIdSupplier, ;, private, final, String, idPrefix, ;, BoilerplateRenamer, (, Supplier, <, String, >, uniqueIdSupplier, ,, String, idPrefix, ), {]
[>, uniqueIdSupplier, ;, private, final, String, idPrefix, ;, BoilerplateRenamer, (, Supplier, <, String, >, uniqueIdSupplier, ,, String, idPrefix, ), {]
[final, String, idPrefix, ;, BoilerplateRenamer, (, Supplier, <, String, >, uniqueIdSupplier, ,, String, idPrefix, ), {, this, ., uniqueIdSupplier, =]
[idPrefix, ;, BoilerplateRenamer, (, Supplier, <, String, >, uniqueIdSupplier, ,, String, idPrefix, ), {, this, ., uniqueIdSupplier, =, uniqueIdSupplier, ;]
[idPrefix, ;, BoilerplateRenamer, (, Supplier, <, String, >, uniqueIdSupplier, ,, String, idPrefix, ), {, this, ., uniqueIdSupplier, =, uniqueIdSupplier, ;]
[Supplier, <, String, >, uniqueIdSupplier, ,, String, idPrefix, ), {, this, ., uniqueIdSupplier, =, uniqueIdSupplier, ;, this, ., idPrefix, =]
[uniqueIdSupplier, =, uniqueIdSupplier, ;, this, ., idPrefix, =, idPrefix, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return]
[;, this, ., idPrefix, =, idPrefix, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (]
[., idPrefix, =, idPrefix, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (, uniqueIdSupplier, ,]
[=, idPrefix, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (, uniqueIdSupplier, ,, idPrefix, ,]
[;, private, Set, <, String, >, whitelist, ;, WhitelistedRenamer, (, Renamer, delegate, ,, Set, <, String, >, whitelist, ), {]
[;, private, Set, <, String, >, whitelist, ;, WhitelistedRenamer, (, Renamer, delegate, ,, Set, <, String, >, whitelist, ), {]
[String, >, whitelist, ;, WhitelistedRenamer, (, Renamer, delegate, ,, Set, <, String, >, whitelist, ), {, this, ., delegate, =]
[whitelist, ;, WhitelistedRenamer, (, Renamer, delegate, ,, Set, <, String, >, whitelist, ), {, this, ., delegate, =, delegate, ;]
[whitelist, ;, WhitelistedRenamer, (, Renamer, delegate, ,, Set, <, String, >, whitelist, ), {, this, ., delegate, =, delegate, ;]
[Renamer, delegate, ,, Set, <, String, >, whitelist, ), {, this, ., delegate, =, delegate, ;, this, ., whitelist, =]
[;, this, ., whitelist, =, whitelist, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (]
[;, this, ., whitelist, =, whitelist, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (]
[=, whitelist, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (, whitelist, ., contains, (]
[@, Override, public, void, addDeclaredName, (, String, name, ), {, if, (, whitelist, ., contains, (, name, ), ), {]
[@, Override, public, void, addDeclaredName, (, String, name, ), {, if, (, whitelist, ., contains, (, name, ), ), {]
[addDeclaredName, (, String, name, ), {, if, (, whitelist, ., contains, (, name, ), ), {, delegate, ., addDeclaredName, (]
[delegate, ., addDeclaredName, (, name, ), ;, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return]
[delegate, ., addDeclaredName, (, name, ), ;, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return]
[delegate, ., addDeclaredName, (, name, ), ;, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return]
[name, ), ;, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, whitelist, ., contains, (]
[}, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, whitelist, ., contains, (, oldName, ), ?]
[}, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, whitelist, ., contains, (, oldName, ), ?]
[public, String, getReplacementName, (, String, oldName, ), {, return, whitelist, ., contains, (, oldName, ), ?, delegate, ., getReplacementName, (]
[(, String, oldName, ), {, return, whitelist, ., contains, (, oldName, ), ?, delegate, ., getReplacementName, (, oldName, ), :]
[?, delegate, ., getReplacementName, (, oldName, ), :, null, ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return]
[?, delegate, ., getReplacementName, (, oldName, ), :, null, ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return]
[(, ), {, return, delegate, ., stripConstIfReplaced, (, ), ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return]
[return, delegate, ., stripConstIfReplaced, (, ), ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, WhitelistedRenamer, (]
[return, delegate, ., stripConstIfReplaced, (, ), ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, WhitelistedRenamer, (]
[;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, WhitelistedRenamer, (, delegate, ., forChildScope, (, ), ,]
