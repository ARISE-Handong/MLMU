[exception, ., util, ., LocalizedFormats, ;, public, class, BigFractionFormat, extends, AbstractFormat, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[., util, ., LocalizedFormats, ;, public, class, BigFractionFormat, extends, AbstractFormat, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[=, -, 2932167925527338976L, ;, public, BigFractionFormat, (, ), {, }, public, BigFractionFormat, (, final, NumberFormat, format, ), {, super, (]
[super, (, format, ), ;, }, public, BigFractionFormat, (, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super, (]
[format, ), ;, }, public, BigFractionFormat, (, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,]
[), {, super, (, numeratorFormat, ,, denominatorFormat, ), ;, }, public, static, Locale, [, ], getAvailableLocales, (, ), {, return]
[), {, super, (, numeratorFormat, ,, denominatorFormat, ), ;, }, public, static, Locale, [, ], getAvailableLocales, (, ), {, return]
[{, return, NumberFormat, ., getAvailableLocales, (, ), ;, }, public, static, String, formatBigFraction, (, final, BigFraction, f, ), {, return]
[{, return, NumberFormat, ., getAvailableLocales, (, ), ;, }, public, static, String, formatBigFraction, (, final, BigFraction, f, ), {, return]
[), ;, }, public, static, String, formatBigFraction, (, final, BigFraction, f, ), {, return, getImproperInstance, (, ), ., format, (]
[{, return, getImproperInstance, (, ), ., format, (, f, ), ;, }, public, static, BigFractionFormat, getImproperInstance, (, ), {, return]
[getImproperInstance, (, ), ., format, (, f, ), ;, }, public, static, BigFractionFormat, getImproperInstance, (, ), {, return, getImproperInstance, (]
[getImproperInstance, (, ), ., format, (, f, ), ;, }, public, static, BigFractionFormat, getImproperInstance, (, ), {, return, getImproperInstance, (]
[(, Locale, ., getDefault, (, ), ), ;, }, public, static, BigFractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return]
[getDefault, (, ), ), ;, }, public, static, BigFractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return, new, BigFractionFormat, (]
[), ), ;, }, public, static, BigFractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return, new, BigFractionFormat, (, getDefaultNumberFormat, (]
[{, return, new, BigFractionFormat, (, getDefaultNumberFormat, (, locale, ), ), ;, }, public, static, BigFractionFormat, getProperInstance, (, ), {, return]
[new, BigFractionFormat, (, getDefaultNumberFormat, (, locale, ), ), ;, }, public, static, BigFractionFormat, getProperInstance, (, ), {, return, getProperInstance, (]
[new, BigFractionFormat, (, getDefaultNumberFormat, (, locale, ), ), ;, }, public, static, BigFractionFormat, getProperInstance, (, ), {, return, getProperInstance, (]
[(, Locale, ., getDefault, (, ), ), ;, }, public, static, BigFractionFormat, getProperInstance, (, final, Locale, locale, ), {, return]
[getDefault, (, ), ), ;, }, public, static, BigFractionFormat, getProperInstance, (, final, Locale, locale, ), {, return, new, ProperBigFractionFormat, (]
[), ), ;, }, public, static, BigFractionFormat, getProperInstance, (, final, Locale, locale, ), {, return, new, ProperBigFractionFormat, (, getDefaultNumberFormat, (]
[), ;, }, public, StringBuffer, format, (, final, BigFraction, BigFraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {]
[), ;, }, public, StringBuffer, format, (, final, BigFraction, BigFraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {]
[StringBuffer, format, (, final, BigFraction, BigFraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (]
[final, BigFraction, BigFraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;]
[final, BigFraction, BigFraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;]
[final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (]
[,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;]
[,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;]
[pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (]
[pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (]
[;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, BigFraction, ., getNumerator, (, ), ,]
[., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, BigFraction, ., getNumerator, (, ), ,, toAppendTo, ,]
[0, ), ;, getNumeratorFormat, (, ), ., format, (, BigFraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;]
[0, ), ;, getNumeratorFormat, (, ), ., format, (, BigFraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;]
[(, ), ., format, (, BigFraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (]
[format, (, BigFraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;]
[format, (, BigFraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;]
[), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (]
[), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (]
[;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, BigFraction, ., getDenominator, (, ), ,]
[., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, BigFraction, ., getDenominator, (, ), ,, toAppendTo, ,]
[), ;, getDenominatorFormat, (, ), ., format, (, BigFraction, ., getDenominator, (, ), ,, toAppendTo, ,, pos, ), ;, return]
[(, final, Object, obj, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, final, StringBuffer, ret, ;, if, (]
[(, final, Object, obj, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, final, StringBuffer, ret, ;, if, (]
[final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, final, StringBuffer, ret, ;, if, (, obj, instanceof, BigFraction, ), {]
[toAppendTo, ,, final, FieldPosition, pos, ), {, final, StringBuffer, ret, ;, if, (, obj, instanceof, BigFraction, ), {, ret, =]
[final, FieldPosition, pos, ), {, final, StringBuffer, ret, ;, if, (, obj, instanceof, BigFraction, ), {, ret, =, format, (]
[), {, final, StringBuffer, ret, ;, if, (, obj, instanceof, BigFraction, ), {, ret, =, format, (, (, BigFraction, )]
[final, StringBuffer, ret, ;, if, (, obj, instanceof, BigFraction, ), {, ret, =, format, (, (, BigFraction, ), obj, ,]
[ret, ;, if, (, obj, instanceof, BigFraction, ), {, ret, =, format, (, (, BigFraction, ), obj, ,, toAppendTo, ,]
[), {, ret, =, format, (, (, BigFraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (]
[), {, ret, =, format, (, (, BigFraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (]
[(, (, BigFraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, BigInteger, ), {]
[BigFraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, BigInteger, ), {, ret, =]
[obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, BigInteger, ), {, ret, =, format, (]
[,, pos, ), ;, }, else, if, (, obj, instanceof, BigInteger, ), {, ret, =, format, (, new, BigFraction, (]
[;, }, else, if, (, obj, instanceof, BigInteger, ), {, ret, =, format, (, new, BigFraction, (, (, BigInteger, )]
[if, (, obj, instanceof, BigInteger, ), {, ret, =, format, (, new, BigFraction, (, (, BigInteger, ), obj, ), ,]
[obj, instanceof, BigInteger, ), {, ret, =, format, (, new, BigFraction, (, (, BigInteger, ), obj, ), ,, toAppendTo, ,]
[format, (, new, BigFraction, (, (, BigInteger, ), obj, ), ,, toAppendTo, ,, pos, ), ;, }, else, if, (]
[format, (, new, BigFraction, (, (, BigInteger, ), obj, ), ,, toAppendTo, ,, pos, ), ;, }, else, if, (]
[(, BigInteger, ), obj, ), ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {]
[), obj, ), ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =]
[), ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (]
[,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, BigFraction, (]
[,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, BigFraction, (]
[pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, BigFraction, (, (]
[}, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, BigFraction, (, (, (, Number, )]
[{, ret, =, format, (, new, BigFraction, (, (, (, Number, ), obj, ), ., doubleValue, (, ), ), ,]
[=, format, (, new, BigFraction, (, (, (, Number, ), obj, ), ., doubleValue, (, ), ), ,, toAppendTo, ,]
[(, Number, ), obj, ), ., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw]
[obj, ), ., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (]
[obj, ), ., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (]
[,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return]
[ret, ;, }, @, Override, public, BigFraction, parse, (, final, String, source, ), throws, MathParseException, {, final, ParsePosition, parsePosition, =]
[@, Override, public, BigFraction, parse, (, final, String, source, ), throws, MathParseException, {, final, ParsePosition, parsePosition, =, new, ParsePosition, (]
[String, source, ), throws, MathParseException, {, final, ParsePosition, parsePosition, =, new, ParsePosition, (, 0, ), ;, final, BigFraction, result, =]
[), throws, MathParseException, {, final, ParsePosition, parsePosition, =, new, ParsePosition, (, 0, ), ;, final, BigFraction, result, =, parse, (]
[MathParseException, {, final, ParsePosition, parsePosition, =, new, ParsePosition, (, 0, ), ;, final, BigFraction, result, =, parse, (, source, ,]
[=, new, ParsePosition, (, 0, ), ;, final, BigFraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (]
[=, new, ParsePosition, (, 0, ), ;, final, BigFraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (]
[=, new, ParsePosition, (, 0, ), ;, final, BigFraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (]
[;, final, BigFraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==]
[=, parse, (, source, ,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw]
[source, ,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (]
[parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,]
[parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,]
[., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,]
[{, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,, BigFraction, ., class, ), ;, }, return]
[}, @, Override, public, BigFraction, parse, (, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, initialIndex, =]
[}, @, Override, public, BigFraction, parse, (, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, initialIndex, =]
[(, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, initialIndex, =, pos, ., getIndex, (, ), ;]
[String, source, ,, final, ParsePosition, pos, ), {, final, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (]
[,, final, ParsePosition, pos, ), {, final, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,]
[int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, num, =]
[=, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, num, =, parseNextBigInteger, (]
[., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, num, =, parseNextBigInteger, (, source, ,]
[parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (]
[parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (]
[source, ,, pos, ), ;, final, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==]
[), ;, final, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {]
[), ;, final, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {]
[num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (]
[source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =]
[num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =]
[), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =]
[return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (]
[;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,]
[=, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (]
[(, ), ;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case]
[final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :, return]
[=, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, BigFraction, (]
[,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case]
[c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :]
[c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :]
[0, :, return, new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (]
[new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;]
[new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;]
[), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (]
[:, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return]
[default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }]
[pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (]
[setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,]
[setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =]
[startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (]
[;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,]
[parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (]
[parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (]
[source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==]
[), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {]
[), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {]
[den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (]
[source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return]
[den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, BigFraction, (]
[null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, BigFraction, (, num, ,]
[), ;, }, protected, BigInteger, parseNextBigInteger, (, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, start, =]
[), ;, }, protected, BigInteger, parseNextBigInteger, (, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, start, =]
[source, ,, final, ParsePosition, pos, ), {, final, int, start, =, pos, ., getIndex, (, ), ;, int, end, =]
[source, ,, final, ParsePosition, pos, ), {, final, int, start, =, pos, ., getIndex, (, ), ;, int, end, =]
[,, final, ParsePosition, pos, ), {, final, int, start, =, pos, ., getIndex, (, ), ;, int, end, =, (]
[,, final, ParsePosition, pos, ), {, final, int, start, =, pos, ., getIndex, (, ), ;, int, end, =, (]
[,, final, ParsePosition, pos, ), {, final, int, start, =, pos, ., getIndex, (, ), ;, int, end, =, (]
[), {, final, int, start, =, pos, ., getIndex, (, ), ;, int, end, =, (, source, ., charAt, (]
[int, start, =, pos, ., getIndex, (, ), ;, int, end, =, (, source, ., charAt, (, start, ), ==]
[pos, ., getIndex, (, ), ;, int, end, =, (, source, ., charAt, (, start, ), ==, '-', ), ?]
[., getIndex, (, ), ;, int, end, =, (, source, ., charAt, (, start, ), ==, '-', ), ?, (]
[., getIndex, (, ), ;, int, end, =, (, source, ., charAt, (, start, ), ==, '-', ), ?, (]
[(, ), ;, int, end, =, (, source, ., charAt, (, start, ), ==, '-', ), ?, (, start, +]
[int, end, =, (, source, ., charAt, (, start, ), ==, '-', ), ?, (, start, +, 1, ), :]
[source, ., charAt, (, start, ), ==, '-', ), ?, (, start, +, 1, ), :, start, ;, while, (]
[source, ., charAt, (, start, ), ==, '-', ), ?, (, start, +, 1, ), :, start, ;, while, (]
[., charAt, (, start, ), ==, '-', ), ?, (, start, +, 1, ), :, start, ;, while, (, (]
[., charAt, (, start, ), ==, '-', ), ?, (, start, +, 1, ), :, start, ;, while, (, (]
[(, start, ), ==, '-', ), ?, (, start, +, 1, ), :, start, ;, while, (, (, end, <]
[(, start, ), ==, '-', ), ?, (, start, +, 1, ), :, start, ;, while, (, (, end, <]
[(, start, +, 1, ), :, start, ;, while, (, (, end, <, source, ., length, (, ), ), &&]
[(, start, +, 1, ), :, start, ;, while, (, (, end, <, source, ., length, (, ), ), &&]
[), :, start, ;, while, (, (, end, <, source, ., length, (, ), ), &&, Character, ., isDigit, (]
[), :, start, ;, while, (, (, end, <, source, ., length, (, ), ), &&, Character, ., isDigit, (]
[while, (, (, end, <, source, ., length, (, ), ), &&, Character, ., isDigit, (, source, ., charAt, (]
[source, ., length, (, ), ), &&, Character, ., isDigit, (, source, ., charAt, (, end, ), ), ), {]
[., length, (, ), ), &&, Character, ., isDigit, (, source, ., charAt, (, end, ), ), ), {, ++]
[isDigit, (, source, ., charAt, (, end, ), ), ), {, ++, end, ;, }, try, {, BigInteger, n, =]
[., charAt, (, end, ), ), ), {, ++, end, ;, }, try, {, BigInteger, n, =, new, BigInteger, (]
[., charAt, (, end, ), ), ), {, ++, end, ;, }, try, {, BigInteger, n, =, new, BigInteger, (]
[), ), ), {, ++, end, ;, }, try, {, BigInteger, n, =, new, BigInteger, (, source, ., substring, (]
[), {, ++, end, ;, }, try, {, BigInteger, n, =, new, BigInteger, (, source, ., substring, (, start, ,]
[;, }, try, {, BigInteger, n, =, new, BigInteger, (, source, ., substring, (, start, ,, end, ), ), ;]
[;, }, try, {, BigInteger, n, =, new, BigInteger, (, source, ., substring, (, start, ,, end, ), ), ;]
[BigInteger, n, =, new, BigInteger, (, source, ., substring, (, start, ,, end, ), ), ;, pos, ., setIndex, (]
[BigInteger, (, source, ., substring, (, start, ,, end, ), ), ;, pos, ., setIndex, (, end, ), ;, return]
[), ), ;, pos, ., setIndex, (, end, ), ;, return, n, ;, }, catch, (, NumberFormatException, nfe, ), {]
[), ), ;, pos, ., setIndex, (, end, ), ;, return, n, ;, }, catch, (, NumberFormatException, nfe, ), {]
[., setIndex, (, end, ), ;, return, n, ;, }, catch, (, NumberFormatException, nfe, ), {, pos, ., setErrorIndex, (]
[), ;, return, n, ;, }, catch, (, NumberFormatException, nfe, ), {, pos, ., setErrorIndex, (, start, ), ;, return]
