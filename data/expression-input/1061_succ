[;, protected, ContinuedFraction, (, ), {, super, (, ), ;, }, protected, abstract, double, getA, (, int, n, ,, double]
[;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ), throws, ConvergenceException, {, return, evaluate, (, x, ,]
[,, DEFAULT_EPSILON, ,, Integer, ., MAX_VALUE, ), ;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ), throws]
[,, Integer, ., MAX_VALUE, ), ;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ), throws, ConvergenceException, {]
[), ;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ), throws, ConvergenceException, {, return, evaluate, (, x]
[., MAX_VALUE, ), ;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ), throws, ConvergenceException, {, return, evaluate]
[;, }, public, double, evaluate, (, double, x, ,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {, return, evaluate, (]
[,, epsilon, ,, Integer, ., MAX_VALUE, ), ;, }, public, double, evaluate, (, double, x, ,, int, maxIterations, ), throws]
[,, Integer, ., MAX_VALUE, ), ;, }, public, double, evaluate, (, double, x, ,, int, maxIterations, ), throws, ConvergenceException, ,]
[), ;, }, public, double, evaluate, (, double, x, ,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {, return, evaluate]
[., MAX_VALUE, ), ;, }, public, double, evaluate, (, double, x, ,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {]
[;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException, {]
[,, DEFAULT_EPSILON, ,, maxIterations, ), ;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ,, int, maxIterations, )]
[,, maxIterations, ), ;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ,, int, maxIterations, ), throws, ConvergenceException]
[), ;, }, public, double, evaluate, (, double, x, ,, double, epsilon, ,, int, maxIterations, ), throws, ConvergenceException, ,, MaxCountExceededException]
[;, double, hPrev, =, getA, (, 0, ,, x, ), ;, if, (, Precision, ., equals, (, hPrev, ,, 0.0]
[;, if, (, Precision, ., equals, (, hPrev, ,, 0.0, ,, small, ), ), {, hPrev, =, small, ;, }]
[,, x, ), ;, if, (, Precision, ., equals, (, hPrev, ,, 0.0, ,, small, ), ), {, hPrev, =]
[), ;, if, (, Precision, ., equals, (, hPrev, ,, 0.0, ,, small, ), ), {, hPrev, =, small, ;]
[), {, hPrev, =, small, ;, }, int, n, =, 1, ;, double, dPrev, =, 0.0, ;, double, cPrev, =]
[., equals, (, hPrev, ,, 0.0, ,, small, ), ), {, hPrev, =, small, ;, }, int, n, =, 1]
[,, 0.0, ,, small, ), ), {, hPrev, =, small, ;, }, int, n, =, 1, ;, double, dPrev, =]
[,, small, ), ), {, hPrev, =, small, ;, }, int, n, =, 1, ;, double, dPrev, =, 0.0, ;]
[), ), {, hPrev, =, small, ;, }, int, n, =, 1, ;, double, dPrev, =, 0.0, ;, double, cPrev]
[=, small, ;, }, int, n, =, 1, ;, double, dPrev, =, 0.0, ;, double, cPrev, =, hPrev, ;, double]
[;, }, int, n, =, 1, ;, double, dPrev, =, 0.0, ;, double, cPrev, =, hPrev, ;, double, hN, =]
[;, double, dPrev, =, 0.0, ;, double, cPrev, =, hPrev, ;, double, hN, =, hPrev, ;, while, (, n, <]
[;, double, cPrev, =, hPrev, ;, double, hN, =, hPrev, ;, while, (, n, <, maxIterations, ), {, final, double]
[;, double, hN, =, hPrev, ;, while, (, n, <, maxIterations, ), {, final, double, a, =, getA, (, n]
[;, while, (, n, <, maxIterations, ), {, final, double, a, =, getA, (, n, ,, x, ), ;, final]
[), {, final, double, a, =, getA, (, n, ,, x, ), ;, final, double, b, =, getB, (, n]
[<, maxIterations, ), {, final, double, a, =, getA, (, n, ,, x, ), ;, final, double, b, =, getB]
[), {, final, double, a, =, getA, (, n, ,, x, ), ;, final, double, b, =, getB, (, n]
[;, final, double, b, =, getB, (, n, ,, x, ), ;, double, dN, =, a, +, b, *, dPrev]
[,, x, ), ;, final, double, b, =, getB, (, n, ,, x, ), ;, double, dN, =, a, +]
[), ;, final, double, b, =, getB, (, n, ,, x, ), ;, double, dN, =, a, +, b, *]
[;, double, dN, =, a, +, b, *, dPrev, ;, if, (, Precision, ., equals, (, dN, ,, 0.0, ,]
[,, x, ), ;, double, dN, =, a, +, b, *, dPrev, ;, if, (, Precision, ., equals, (, dN]
[), ;, double, dN, =, a, +, b, *, dPrev, ;, if, (, Precision, ., equals, (, dN, ,, 0.0]
[;, if, (, Precision, ., equals, (, dN, ,, 0.0, ,, small, ), ), {, dN, =, small, ;, }]
[+, b, *, dPrev, ;, if, (, Precision, ., equals, (, dN, ,, 0.0, ,, small, ), ), {, dN]
[;, if, (, Precision, ., equals, (, dN, ,, 0.0, ,, small, ), ), {, dN, =, small, ;, }]
[*, dPrev, ;, if, (, Precision, ., equals, (, dN, ,, 0.0, ,, small, ), ), {, dN, =, small]
[;, if, (, Precision, ., equals, (, dN, ,, 0.0, ,, small, ), ), {, dN, =, small, ;, }]
[), {, dN, =, small, ;, }, double, cN, =, a, +, b, /, cPrev, ;, if, (, Precision, .]
[., equals, (, dN, ,, 0.0, ,, small, ), ), {, dN, =, small, ;, }, double, cN, =, a]
[,, 0.0, ,, small, ), ), {, dN, =, small, ;, }, double, cN, =, a, +, b, /, cPrev]
[,, small, ), ), {, dN, =, small, ;, }, double, cN, =, a, +, b, /, cPrev, ;, if]
[), ), {, dN, =, small, ;, }, double, cN, =, a, +, b, /, cPrev, ;, if, (, Precision]
[=, small, ;, }, double, cN, =, a, +, b, /, cPrev, ;, if, (, Precision, ., equals, (, cN]
[;, }, double, cN, =, a, +, b, /, cPrev, ;, if, (, Precision, ., equals, (, cN, ,, 0.0]
[;, if, (, Precision, ., equals, (, cN, ,, 0.0, ,, small, ), ), {, cN, =, small, ;, }]
[+, b, /, cPrev, ;, if, (, Precision, ., equals, (, cN, ,, 0.0, ,, small, ), ), {, cN]
[;, if, (, Precision, ., equals, (, cN, ,, 0.0, ,, small, ), ), {, cN, =, small, ;, }]
[/, cPrev, ;, if, (, Precision, ., equals, (, cN, ,, 0.0, ,, small, ), ), {, cN, =, small]
[;, if, (, Precision, ., equals, (, cN, ,, 0.0, ,, small, ), ), {, cN, =, small, ;, }]
[), {, cN, =, small, ;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =, cN, *, dN]
[., equals, (, cN, ,, 0.0, ,, small, ), ), {, cN, =, small, ;, }, dN, =, 1, /]
[,, 0.0, ,, small, ), ), {, cN, =, small, ;, }, dN, =, 1, /, dN, ;, final, double]
[,, small, ), ), {, cN, =, small, ;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =]
[), ), {, cN, =, small, ;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =, cN, *]
[=, small, ;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =, cN, *, dN, ;, hN, =]
[;, }, dN, =, 1, /, dN, ;, final, double, deltaN, =, cN, *, dN, ;, hN, =, hPrev, *]
[=, 1, /, dN, ;, final, double, deltaN, =, cN, *, dN, ;, hN, =, hPrev, *, deltaN, ;, if]
[;, final, double, deltaN, =, cN, *, dN, ;, hN, =, hPrev, *, deltaN, ;, if, (, Double, ., isInfinite]
[/, dN, ;, final, double, deltaN, =, cN, *, dN, ;, hN, =, hPrev, *, deltaN, ;, if, (, Double]
[;, final, double, deltaN, =, cN, *, dN, ;, hN, =, hPrev, *, deltaN, ;, if, (, Double, ., isInfinite]
[;, hN, =, hPrev, *, deltaN, ;, if, (, Double, ., isInfinite, (, hN, ), ), {, throw, new, ConvergenceException]
[*, dN, ;, hN, =, hPrev, *, deltaN, ;, if, (, Double, ., isInfinite, (, hN, ), ), {, throw]
[;, hN, =, hPrev, *, deltaN, ;, if, (, Double, ., isInfinite, (, hN, ), ), {, throw, new, ConvergenceException]
[=, hPrev, *, deltaN, ;, if, (, Double, ., isInfinite, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats]
[;, if, (, Double, ., isInfinite, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x]
[*, deltaN, ;, if, (, Double, ., isInfinite, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_INFINITY_DIVERGENCE]
[;, if, (, Double, ., isInfinite, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x, ), ;, }, if, (, Double, ., isNaN, (]
[., isInfinite, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x, ), ;, }, if]
[), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x, ), ;, }, if, (, Double, ., isNaN]
[;, }, if, (, Double, ., isNaN, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,]
[,, x, ), ;, }, if, (, Double, ., isNaN, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats]
[., CONTINUED_FRACTION_INFINITY_DIVERGENCE, ,, x, ), ;, }, if, (, Double, ., isNaN, (, hN, ), ), {, throw, new, ConvergenceException]
[), ;, }, if, (, Double, ., isNaN, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,, x, ), ;, }, if, (, FastMath, ., abs, (]
[., isNaN, (, hN, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,, x, ), ;, }, if]
[), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., CONTINUED_FRACTION_NAN_DIVERGENCE, ,, x, ), ;, }, if, (, FastMath, ., abs]
[;, }, if, (, FastMath, ., abs, (, deltaN, -, 1.0, ), <, epsilon, ), {, break, ;, }, dPrev]
[,, x, ), ;, }, if, (, FastMath, ., abs, (, deltaN, -, 1.0, ), <, epsilon, ), {, break]
[., CONTINUED_FRACTION_NAN_DIVERGENCE, ,, x, ), ;, }, if, (, FastMath, ., abs, (, deltaN, -, 1.0, ), <, epsilon, )]
[), ;, }, if, (, FastMath, ., abs, (, deltaN, -, 1.0, ), <, epsilon, ), {, break, ;, }]
[), {, break, ;, }, dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =, hN, ;, n, ++, ;]
[<, epsilon, ), {, break, ;, }, dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =, hN, ;, n]
[., abs, (, deltaN, -, 1.0, ), <, epsilon, ), {, break, ;, }, dPrev, =, dN, ;, cPrev, =]
[), <, epsilon, ), {, break, ;, }, dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =, hN, ;]
[-, 1.0, ), <, epsilon, ), {, break, ;, }, dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =]
[), <, epsilon, ), {, break, ;, }, dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =, hN, ;]
[), {, break, ;, }, dPrev, =, dN, ;, cPrev, =, cN, ;, hPrev, =, hN, ;, n, ++, ;]
[=, dN, ;, cPrev, =, cN, ;, hPrev, =, hN, ;, n, ++, ;, }, if, (, n, >=, maxIterations]
[;, cPrev, =, cN, ;, hPrev, =, hN, ;, n, ++, ;, }, if, (, n, >=, maxIterations, ), {]
[=, cN, ;, hPrev, =, hN, ;, n, ++, ;, }, if, (, n, >=, maxIterations, ), {, throw, new]
[;, hPrev, =, hN, ;, n, ++, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (]
[=, hN, ;, n, ++, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, LocalizedFormats, .]
[;, n, ++, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, LocalizedFormats, ., NON_CONVERGENT_CONTINUED_FRACTION, ,]
[;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, LocalizedFormats, ., NON_CONVERGENT_CONTINUED_FRACTION, ,, maxIterations, ,, x]
[++, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, LocalizedFormats, ., NON_CONVERGENT_CONTINUED_FRACTION, ,, maxIterations, ,]
[), {, throw, new, MaxCountExceededException, (, LocalizedFormats, ., NON_CONVERGENT_CONTINUED_FRACTION, ,, maxIterations, ,, x, ), ;, }, return, hN, ;, }]
[>=, maxIterations, ), {, throw, new, MaxCountExceededException, (, LocalizedFormats, ., NON_CONVERGENT_CONTINUED_FRACTION, ,, maxIterations, ,, x, ), ;, }, return, hN]
[), {, throw, new, MaxCountExceededException, (, LocalizedFormats, ., NON_CONVERGENT_CONTINUED_FRACTION, ,, maxIterations, ,, x, ), ;, }, return, hN, ;, }]
[;, }, return, hN, ;, }, }]
[,, maxIterations, ,, x, ), ;, }, return, hN, ;, }, }]
[., NON_CONVERGENT_CONTINUED_FRACTION, ,, maxIterations, ,, x, ), ;, }, return, hN, ;, }, }]
[,, x, ), ;, }, return, hN, ;, }, }]
[), ;, }, return, hN, ;, }, }]
[;, }, }]
