[commons, ., math3, ., util, ., Pair, ;, public, class, EnumeratedIntegerDistribution, extends, AbstractIntegerDistribution, {, private, static, final, long, serialVersionUID, =]
[,, final, double, [, ], probabilities, ), throws, DimensionMismatchException, ,, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, this, (]
[probabilities, ), throws, DimensionMismatchException, ,, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, this, (, new, Well19937c, (, ), ,]
[throws, DimensionMismatchException, ,, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, this, (, new, Well19937c, (, ), ,, singletons, ,]
[,, final, double, [, ], probabilities, ), throws, DimensionMismatchException, ,, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, super, (]
[probabilities, ), throws, DimensionMismatchException, ,, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, super, (, rng, ), ;, if, (]
[probabilities, ), throws, DimensionMismatchException, ,, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, super, (, rng, ), ;, if, (]
[probabilities, ), throws, DimensionMismatchException, ,, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, super, (, rng, ), ;, if, (]
[,, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, super, (, rng, ), ;, if, (, singletons, ., length, !=]
[,, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, super, (, rng, ), ;, if, (, singletons, ., length, !=]
[,, NotANumberException, {, super, (, rng, ), ;, if, (, singletons, ., length, !=, probabilities, ., length, ), {, throw]
[super, (, rng, ), ;, if, (, singletons, ., length, !=, probabilities, ., length, ), {, throw, new, DimensionMismatchException, (]
[super, (, rng, ), ;, if, (, singletons, ., length, !=, probabilities, ., length, ), {, throw, new, DimensionMismatchException, (]
[;, if, (, singletons, ., length, !=, probabilities, ., length, ), {, throw, new, DimensionMismatchException, (, probabilities, ., length, ,]
[;, if, (, singletons, ., length, !=, probabilities, ., length, ), {, throw, new, DimensionMismatchException, (, probabilities, ., length, ,]
[length, ,, singletons, ., length, ), ;, }, final, List, <, Pair, <, Integer, ,, Double, >, >, samples, =]
[Pair, <, Integer, ,, Double, >, >, samples, =, new, ArrayList, <, Pair, <, Integer, ,, Double, >, >, (]
[Pair, <, Integer, ,, Double, >, >, samples, =, new, ArrayList, <, Pair, <, Integer, ,, Double, >, >, (]
[ArrayList, <, Pair, <, Integer, ,, Double, >, >, (, singletons, ., length, ), ;, for, (, int, i, =]
[Pair, <, Integer, ,, Double, >, >, (, singletons, ., length, ), ;, for, (, int, i, =, 0, ;]
[Pair, <, Integer, ,, Double, >, >, (, singletons, ., length, ), ;, for, (, int, i, =, 0, ;]
[Integer, ,, Double, >, >, (, singletons, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[Integer, ,, Double, >, >, (, singletons, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[>, (, singletons, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, singletons, ., length, ;]
[>, (, singletons, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, singletons, ., length, ;]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, singletons, ., length, ;, i, ++, ), {]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, singletons, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, singletons, ., length, ;, i, ++, ), {, samples, ., add, (]
[singletons, ., length, ;, i, ++, ), {, samples, ., add, (, new, Pair, <, Integer, ,, Double, >, (]
[singletons, ., length, ;, i, ++, ), {, samples, ., add, (, new, Pair, <, Integer, ,, Double, >, (]
[length, ;, i, ++, ), {, samples, ., add, (, new, Pair, <, Integer, ,, Double, >, (, singletons, []
[++, ), {, samples, ., add, (, new, Pair, <, Integer, ,, Double, >, (, singletons, [, i, ], ,]
[++, ), {, samples, ., add, (, new, Pair, <, Integer, ,, Double, >, (, singletons, [, i, ], ,]
[{, samples, ., add, (, new, Pair, <, Integer, ,, Double, >, (, singletons, [, i, ], ,, probabilities, []
[Pair, <, Integer, ,, Double, >, (, singletons, [, i, ], ,, probabilities, [, i, ], ), ), ;, }]
[Integer, ,, Double, >, (, singletons, [, i, ], ,, probabilities, [, i, ], ), ), ;, }, innerDistribution, =]
[[, i, ], ,, probabilities, [, i, ], ), ), ;, }, innerDistribution, =, new, EnumeratedDistribution, <, Integer, >, (]
[], ,, probabilities, [, i, ], ), ), ;, }, innerDistribution, =, new, EnumeratedDistribution, <, Integer, >, (, rng, ,]
[<, Integer, >, (, rng, ,, samples, ), ;, }, public, double, probability, (, final, int, x, ), {, return]
[<, Integer, >, (, rng, ,, samples, ), ;, }, public, double, probability, (, final, int, x, ), {, return]
[rng, ,, samples, ), ;, }, public, double, probability, (, final, int, x, ), {, return, innerDistribution, ., probability, (]
[innerDistribution, ., probability, (, x, ), ;, }, public, double, cumulativeProbability, (, final, int, x, ), {, double, probability, =]
[int, x, ), {, double, probability, =, 0, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :]
[int, x, ), {, double, probability, =, 0, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (]
[,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), <=]
[sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), <=, x, ), {]
[innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), <=, x, ), {, probability, +=]
[innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), <=, x, ), {, probability, +=]
[sample, ., getKey, (, ), <=, x, ), {, probability, +=, sample, ., getValue, (, ), ;, }, }, return]
[., getValue, (, ), ;, }, }, return, probability, ;, }, public, double, getNumericalMean, (, ), {, double, mean, =]
[getNumericalMean, (, ), {, double, mean, =, 0, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :]
[getNumericalMean, (, ), {, double, mean, =, 0, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :]
[0, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, mean, +=]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, mean, +=]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, mean, +=]
[,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, mean, +=, sample, ., getValue, (, ), *]
[,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, mean, +=, sample, ., getValue, (, ), *]
[(, ), ), {, mean, +=, sample, ., getValue, (, ), *, sample, ., getKey, (, ), ;, }, return]
[sample, ., getKey, (, ), ;, }, return, mean, ;, }, public, double, getNumericalVariance, (, ), {, double, mean, =]
[;, }, return, mean, ;, }, public, double, getNumericalVariance, (, ), {, double, mean, =, 0, ;, double, meanOfSquares, =]
[mean, =, 0, ;, double, meanOfSquares, =, 0, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :]
[mean, =, 0, ;, double, meanOfSquares, =, 0, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :]
[0, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, mean, +=]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, mean, +=]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, mean, +=]
[,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, mean, +=, sample, ., getValue, (, ), *]
[,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, mean, +=, sample, ., getValue, (, ), *]
[., getPmf, (, ), ), {, mean, +=, sample, ., getValue, (, ), *, sample, ., getKey, (, ), ;]
[(, ), ), {, mean, +=, sample, ., getValue, (, ), *, sample, ., getKey, (, ), ;, meanOfSquares, +=]
[(, ), ), {, mean, +=, sample, ., getValue, (, ), *, sample, ., getKey, (, ), ;, meanOfSquares, +=]
[(, ), ), {, mean, +=, sample, ., getValue, (, ), *, sample, ., getKey, (, ), ;, meanOfSquares, +=]
[(, ), ), {, mean, +=, sample, ., getValue, (, ), *, sample, ., getKey, (, ), ;, meanOfSquares, +=]
[sample, ., getValue, (, ), *, sample, ., getKey, (, ), ;, meanOfSquares, +=, sample, ., getValue, (, ), *]
[sample, ., getValue, (, ), *, sample, ., getKey, (, ), ;, meanOfSquares, +=, sample, ., getValue, (, ), *]
[sample, ., getKey, (, ), ;, meanOfSquares, +=, sample, ., getValue, (, ), *, sample, ., getKey, (, ), *]
[sample, ., getKey, (, ), ;, meanOfSquares, +=, sample, ., getValue, (, ), *, sample, ., getKey, (, ), *]
[sample, ., getValue, (, ), *, sample, ., getKey, (, ), *, sample, ., getKey, (, ), ;, }, return]
[sample, ., getValue, (, ), *, sample, ., getKey, (, ), *, sample, ., getKey, (, ), ;, }, return]
[getValue, (, ), *, sample, ., getKey, (, ), *, sample, ., getKey, (, ), ;, }, return, meanOfSquares, -]
[getValue, (, ), *, sample, ., getKey, (, ), *, sample, ., getKey, (, ), ;, }, return, meanOfSquares, -]
[), *, sample, ., getKey, (, ), *, sample, ., getKey, (, ), ;, }, return, meanOfSquares, -, mean, *]
[), ;, }, return, meanOfSquares, -, mean, *, mean, ;, }, public, int, getSupportLowerBound, (, ), {, int, min, =]
[), ;, }, return, meanOfSquares, -, mean, *, mean, ;, }, public, int, getSupportLowerBound, (, ), {, int, min, =]
[), {, int, min, =, Integer, ., MAX_VALUE, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :]
[), {, int, min, =, Integer, ., MAX_VALUE, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (]
[,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), <]
[>, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), <, min, &&]
[>, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), <, min, &&]
[>, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), <, min, &&]
[(, ), ), {, if, (, sample, ., getKey, (, ), <, min, &&, sample, ., getValue, (, ), >]
[{, if, (, sample, ., getKey, (, ), <, min, &&, sample, ., getValue, (, ), >, 0, ), {]
[(, sample, ., getKey, (, ), <, min, &&, sample, ., getValue, (, ), >, 0, ), {, min, =]
[(, sample, ., getKey, (, ), <, min, &&, sample, ., getValue, (, ), >, 0, ), {, min, =]
[sample, ., getValue, (, ), >, 0, ), {, min, =, sample, ., getKey, (, ), ;, }, }, return]
[., getKey, (, ), ;, }, }, return, min, ;, }, public, int, getSupportUpperBound, (, ), {, int, max, =]
[., getKey, (, ), ;, }, }, return, min, ;, }, public, int, getSupportUpperBound, (, ), {, int, max, =]
[), {, int, max, =, Integer, ., MIN_VALUE, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :]
[), {, int, max, =, Integer, ., MIN_VALUE, ;, for, (, final, Pair, <, Integer, ,, Double, >, sample, :]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (]
[for, (, final, Pair, <, Integer, ,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (]
[,, Double, >, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), >]
[>, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), >, max, &&]
[>, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), >, max, &&]
[>, sample, :, innerDistribution, ., getPmf, (, ), ), {, if, (, sample, ., getKey, (, ), >, max, &&]
[(, ), ), {, if, (, sample, ., getKey, (, ), >, max, &&, sample, ., getValue, (, ), >]
[{, if, (, sample, ., getKey, (, ), >, max, &&, sample, ., getValue, (, ), >, 0, ), {]
[(, sample, ., getKey, (, ), >, max, &&, sample, ., getValue, (, ), >, 0, ), {, max, =]
[(, sample, ., getKey, (, ), >, max, &&, sample, ., getValue, (, ), >, 0, ), {, max, =]
[sample, ., getValue, (, ), >, 0, ), {, max, =, sample, ., getKey, (, ), ;, }, }, return]
[=, sample, ., getKey, (, ), ;, }, }, return, max, ;, }, public, boolean, isSupportConnected, (, ), {, return]
[}, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, int, sample, (, ), {, return]
[}, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, int, sample, (, ), {, return]
