[Regression, {, public, static, double, [, ], getOLSRegression, (, double, [, ], [, ], data, ), {, int, n, =]
[Regression, {, public, static, double, [, ], getOLSRegression, (, double, [, ], [, ], data, ), {, int, n, =]
[], getOLSRegression, (, double, [, ], [, ], data, ), {, int, n, =, data, ., length, ;, if, (]
[], getOLSRegression, (, double, [, ], [, ], data, ), {, int, n, =, data, ., length, ;, if, (]
[(, double, [, ], [, ], data, ), {, int, n, =, data, ., length, ;, if, (, n, <]
[[, ], data, ), {, int, n, =, data, ., length, ;, if, (, n, <, 2, ), {, throw]
[), {, int, n, =, data, ., length, ;, if, (, n, <, 2, ), {, throw, new, IllegalArgumentException, (]
[length, ;, if, (, n, <, 2, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =]
[<, 2, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =, 0, ;, double, sumY, =]
[new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =, 0, ;, double, sumY, =, 0, ;, double, sumXX, =]
[;, }, double, sumX, =, 0, ;, double, sumY, =, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =]
[double, sumY, =, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =]
[=, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;]
[=, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;]
[;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =]
[0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =]
[0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, data, []
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, data, [, i, ], []
[n, ;, i, ++, ), {, double, x, =, data, [, i, ], [, 0, ], ;, double, y, =]
[n, ;, i, ++, ), {, double, x, =, data, [, i, ], [, 0, ], ;, double, y, =]
[n, ;, i, ++, ), {, double, x, =, data, [, i, ], [, 0, ], ;, double, y, =]
[i, ++, ), {, double, x, =, data, [, i, ], [, 0, ], ;, double, y, =, data, []
[{, double, x, =, data, [, i, ], [, 0, ], ;, double, y, =, data, [, i, ], []
[=, data, [, i, ], [, 0, ], ;, double, y, =, data, [, i, ], [, 1, ], ;]
[[, i, ], [, 0, ], ;, double, y, =, data, [, i, ], [, 1, ], ;, sumX, +=]
[], [, 0, ], ;, double, y, =, data, [, i, ], [, 1, ], ;, sumX, +=, x, ;]
[0, ], ;, double, y, =, data, [, i, ], [, 1, ], ;, sumX, +=, x, ;, sumY, +=]
[=, data, [, i, ], [, 1, ], ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =]
[=, data, [, i, ], [, 1, ], ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =]
[[, i, ], [, 1, ], ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *]
[], [, 1, ], ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;]
[1, ], ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=]
[x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =]
[x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =]
[sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *]
[y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;]
[double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=]
[;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =]
[;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =]
[+=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -]
[+=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -]
[xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (]
[xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (]
[double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *]
[x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /]
[+=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =]
[+=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =]
[;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -]
[;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -]
[}, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (]
[}, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (]
[sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *]
[-, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /]
[), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =]
[), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =]
[n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /]
[sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =]
[sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =]
[(, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =, sumY, /]
[;, double, xbar, =, sumX, /, n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =]
[=, sumX, /, n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, []
[n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;]
[n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;]
[double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, []
[sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =]
[sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =]
[n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /]
[double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;]
[double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;]
[], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, []
[new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =]
[new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =]
[[, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -]
[[, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -]
[[, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -]
[], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -, result, []
[[, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -, result, [, 1, ], *]
[=, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -, result, [, 1, ], *, xbar, ;, return]
[result, ;, }, public, static, double, [, ], getOLSRegression, (, XYDataset, data, ,, int, series, ), {, int, n, =]
[result, ;, }, public, static, double, [, ], getOLSRegression, (, XYDataset, data, ,, int, series, ), {, int, n, =]
[static, double, [, ], getOLSRegression, (, XYDataset, data, ,, int, series, ), {, int, n, =, data, ., getItemCount, (]
[(, XYDataset, data, ,, int, series, ), {, int, n, =, data, ., getItemCount, (, series, ), ;, if, (]
[(, XYDataset, data, ,, int, series, ), {, int, n, =, data, ., getItemCount, (, series, ), ;, if, (]
[data, ,, int, series, ), {, int, n, =, data, ., getItemCount, (, series, ), ;, if, (, n, <]
[), {, int, n, =, data, ., getItemCount, (, series, ), ;, if, (, n, <, 2, ), {, throw]
[n, =, data, ., getItemCount, (, series, ), ;, if, (, n, <, 2, ), {, throw, new, IllegalArgumentException, (]
[), ;, if, (, n, <, 2, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =]
[<, 2, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =, 0, ;, double, sumY, =]
[new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =, 0, ;, double, sumY, =, 0, ;, double, sumXX, =]
[;, }, double, sumX, =, 0, ;, double, sumY, =, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =]
[double, sumY, =, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =]
[=, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;]
[=, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;]
[;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =]
[0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, data, ., getXValue, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, data, ., getXValue, (, series, ,]
[;, i, ++, ), {, double, x, =, data, ., getXValue, (, series, ,, i, ), ;, double, y, =]
[;, i, ++, ), {, double, x, =, data, ., getXValue, (, series, ,, i, ), ;, double, y, =]
[{, double, x, =, data, ., getXValue, (, series, ,, i, ), ;, double, y, =, data, ., getYValue, (]
[x, =, data, ., getXValue, (, series, ,, i, ), ;, double, y, =, data, ., getYValue, (, series, ,]
[., getXValue, (, series, ,, i, ), ;, double, y, =, data, ., getYValue, (, series, ,, i, ), ;]
[(, series, ,, i, ), ;, double, y, =, data, ., getYValue, (, series, ,, i, ), ;, sumX, +=]
[,, i, ), ;, double, y, =, data, ., getYValue, (, series, ,, i, ), ;, sumX, +=, x, ;]
[), ;, double, y, =, data, ., getYValue, (, series, ,, i, ), ;, sumX, +=, x, ;, sumY, +=]
[data, ., getYValue, (, series, ,, i, ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =]
[data, ., getYValue, (, series, ,, i, ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =]
[getYValue, (, series, ,, i, ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *]
[series, ,, i, ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;]
[i, ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=]
[x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =]
[x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =]
[sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *]
[y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;]
[double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=]
[;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =]
[;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =]
[+=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -]
[+=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -]
[xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (]
[xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (]
[double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *]
[x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /]
[+=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =]
[+=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =]
[;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -]
[;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -]
[}, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (]
[}, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (]
[sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *]
[-, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /]
[), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =]
[), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =]
[n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /]
[sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =]
[sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =]
[(, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =, sumY, /]
[;, double, xbar, =, sumX, /, n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =]
[=, sumX, /, n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, []
[n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;]
[n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;]
[double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, []
[sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =]
[sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =]
[n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /]
[double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;]
[double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;]
[], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, []
[new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =]
[new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =]
[[, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -]
[[, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -]
[[, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -]
[], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -, result, []
[[, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -, result, [, 1, ], *]
[=, sxy, /, sxx, ;, result, [, 0, ], =, ybar, -, result, [, 1, ], *, xbar, ;, return]
[;, }, public, static, double, [, ], getPowerRegression, (, double, [, ], [, ], data, ), {, int, n, =]
[;, }, public, static, double, [, ], getPowerRegression, (, double, [, ], [, ], data, ), {, int, n, =]
[], getPowerRegression, (, double, [, ], [, ], data, ), {, int, n, =, data, ., length, ;, if, (]
[], getPowerRegression, (, double, [, ], [, ], data, ), {, int, n, =, data, ., length, ;, if, (]
[(, double, [, ], [, ], data, ), {, int, n, =, data, ., length, ;, if, (, n, <]
[[, ], data, ), {, int, n, =, data, ., length, ;, if, (, n, <, 2, ), {, throw]
[), {, int, n, =, data, ., length, ;, if, (, n, <, 2, ), {, throw, new, IllegalArgumentException, (]
[length, ;, if, (, n, <, 2, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =]
[<, 2, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =, 0, ;, double, sumY, =]
[new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =, 0, ;, double, sumY, =, 0, ;, double, sumXX, =]
[;, }, double, sumX, =, 0, ;, double, sumY, =, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =]
[double, sumY, =, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =]
[=, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;]
[=, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;]
[;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =]
[0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, Math, ., log, (]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, Math, ., log, (]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, Math, ., log, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, Math, ., log, (, data, []
[i, <, n, ;, i, ++, ), {, double, x, =, Math, ., log, (, data, [, i, ], []
[{, double, x, =, Math, ., log, (, data, [, i, ], [, 0, ], ), ;, double, y, =]
[{, double, x, =, Math, ., log, (, data, [, i, ], [, 0, ], ), ;, double, y, =]
[Math, ., log, (, data, [, i, ], [, 0, ], ), ;, double, y, =, Math, ., log, (]
[Math, ., log, (, data, [, i, ], [, 0, ], ), ;, double, y, =, Math, ., log, (]
[Math, ., log, (, data, [, i, ], [, 0, ], ), ;, double, y, =, Math, ., log, (]
[log, (, data, [, i, ], [, 0, ], ), ;, double, y, =, Math, ., log, (, data, []
[[, i, ], [, 0, ], ), ;, double, y, =, Math, ., log, (, data, [, i, ], []
[0, ], ), ;, double, y, =, Math, ., log, (, data, [, i, ], [, 1, ], ), ;]
[), ;, double, y, =, Math, ., log, (, data, [, i, ], [, 1, ], ), ;, sumX, +=]
[double, y, =, Math, ., log, (, data, [, i, ], [, 1, ], ), ;, sumX, +=, x, ;]
[=, Math, ., log, (, data, [, i, ], [, 1, ], ), ;, sumX, +=, x, ;, sumY, +=]
[data, [, i, ], [, 1, ], ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =]
[data, [, i, ], [, 1, ], ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =]
[i, ], [, 1, ], ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *]
[[, 1, ], ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;]
[], ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=]
[x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =]
[x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =]
[sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *]
[y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;]
[double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=]
[;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =]
[;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =]
[+=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -]
[+=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -]
[xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (]
[xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (]
[double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *]
[x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /]
[+=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =]
[+=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =]
[;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -]
[;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -]
[}, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (]
[}, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (]
[sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *]
[-, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /]
[), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =]
[), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =]
[n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /]
[sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =]
[sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =]
[(, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =, sumY, /]
[;, double, xbar, =, sumX, /, n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =]
[=, sumX, /, n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, []
[n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;]
[n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;]
[double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, []
[sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =]
[sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =]
[n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /]
[double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;]
[double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;]
[], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, []
[new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =]
[new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =]
[], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, Math, ., pow, (]
[], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, Math, ., pow, (]
[1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (]
[sxy, /, sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,]
[sxy, /, sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,]
[sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -]
[sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -]
[sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -]
[result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -, result, []
[], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -, result, [, 1, ], *]
[pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -, result, [, 1, ], *, xbar, ), ;, return]
[result, ;, }, public, static, double, [, ], getPowerRegression, (, XYDataset, data, ,, int, series, ), {, int, n, =]
[result, ;, }, public, static, double, [, ], getPowerRegression, (, XYDataset, data, ,, int, series, ), {, int, n, =]
[static, double, [, ], getPowerRegression, (, XYDataset, data, ,, int, series, ), {, int, n, =, data, ., getItemCount, (]
[(, XYDataset, data, ,, int, series, ), {, int, n, =, data, ., getItemCount, (, series, ), ;, if, (]
[(, XYDataset, data, ,, int, series, ), {, int, n, =, data, ., getItemCount, (, series, ), ;, if, (]
[data, ,, int, series, ), {, int, n, =, data, ., getItemCount, (, series, ), ;, if, (, n, <]
[), {, int, n, =, data, ., getItemCount, (, series, ), ;, if, (, n, <, 2, ), {, throw]
[n, =, data, ., getItemCount, (, series, ), ;, if, (, n, <, 2, ), {, throw, new, IllegalArgumentException, (]
[), ;, if, (, n, <, 2, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =]
[<, 2, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =, 0, ;, double, sumY, =]
[new, IllegalArgumentException, (, "Not enough data.", ), ;, }, double, sumX, =, 0, ;, double, sumY, =, 0, ;, double, sumXX, =]
[;, }, double, sumX, =, 0, ;, double, sumY, =, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =]
[double, sumY, =, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =]
[=, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;]
[=, 0, ;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;]
[;, double, sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[sumXX, =, 0, ;, double, sumXY, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =]
[0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, Math, ., log, (]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, x, =, Math, ., log, (]
[;, i, <, n, ;, i, ++, ), {, double, x, =, Math, ., log, (, data, ., getXValue, (]
[<, n, ;, i, ++, ), {, double, x, =, Math, ., log, (, data, ., getXValue, (, series, ,]
[double, x, =, Math, ., log, (, data, ., getXValue, (, series, ,, i, ), ), ;, double, y, =]
[double, x, =, Math, ., log, (, data, ., getXValue, (, series, ,, i, ), ), ;, double, y, =]
[., log, (, data, ., getXValue, (, series, ,, i, ), ), ;, double, y, =, Math, ., log, (]
[., log, (, data, ., getXValue, (, series, ,, i, ), ), ;, double, y, =, Math, ., log, (]
[., getXValue, (, series, ,, i, ), ), ;, double, y, =, Math, ., log, (, data, ., getYValue, (]
[(, series, ,, i, ), ), ;, double, y, =, Math, ., log, (, data, ., getYValue, (, series, ,]
[), ), ;, double, y, =, Math, ., log, (, data, ., getYValue, (, series, ,, i, ), ), ;]
[;, double, y, =, Math, ., log, (, data, ., getYValue, (, series, ,, i, ), ), ;, sumX, +=]
[y, =, Math, ., log, (, data, ., getYValue, (, series, ,, i, ), ), ;, sumX, +=, x, ;]
[Math, ., log, (, data, ., getYValue, (, series, ,, i, ), ), ;, sumX, +=, x, ;, sumY, +=]
[., getYValue, (, series, ,, i, ), ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =]
[., getYValue, (, series, ,, i, ), ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =]
[(, series, ,, i, ), ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *]
[,, i, ), ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;]
[), ), ;, sumX, +=, x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=]
[x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =]
[x, ;, sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =]
[sumY, +=, y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *]
[y, ;, double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;]
[double, xx, =, x, *, x, ;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=]
[;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =]
[;, sumXX, +=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =]
[+=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -]
[+=, xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -]
[xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (]
[xx, ;, double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (]
[double, xy, =, x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *]
[x, *, y, ;, sumXY, +=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /]
[+=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =]
[+=, xy, ;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =]
[;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -]
[;, }, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -]
[}, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (]
[}, double, sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (]
[sxx, =, sumXX, -, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *]
[-, (, sumX, *, sumX, ), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /]
[), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =]
[), /, n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =]
[n, ;, double, sxy, =, sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /]
[sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =]
[sumXY, -, (, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =]
[(, sumX, *, sumY, ), /, n, ;, double, xbar, =, sumX, /, n, ;, double, ybar, =, sumY, /]
[;, double, xbar, =, sumX, /, n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =]
[=, sumX, /, n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, []
[n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;]
[n, ;, double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;]
[double, ybar, =, sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, []
[sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =]
[sumY, /, n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =]
[n, ;, double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /]
[double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;]
[double, [, ], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;]
[], result, =, new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, []
[new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =]
[new, double, [, 2, ], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =]
[], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, Math, ., pow, (]
[], ;, result, [, 1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, Math, ., pow, (]
[1, ], =, sxy, /, sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (]
[sxy, /, sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,]
[sxy, /, sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,]
[sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -]
[sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -]
[sxx, ;, result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -]
[result, [, 0, ], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -, result, []
[], =, Math, ., pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -, result, [, 1, ], *]
[pow, (, Math, ., exp, (, 1.0, ), ,, ybar, -, result, [, 1, ], *, xbar, ), ;, return]
[}, public, static, double, [, ], getPolynomialRegression, (, XYDataset, dataset, ,, int, series, ,, int, order, ), {, if, (]
[}, public, static, double, [, ], getPolynomialRegression, (, XYDataset, dataset, ,, int, series, ,, int, order, ), {, if, (]
[static, double, [, ], getPolynomialRegression, (, XYDataset, dataset, ,, int, series, ,, int, order, ), {, if, (, dataset, ==]
[getPolynomialRegression, (, XYDataset, dataset, ,, int, series, ,, int, order, ), {, if, (, dataset, ==, null, ), {, throw]
[dataset, ,, int, series, ,, int, order, ), {, if, (, dataset, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, dataset, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, int, itemCount, =]
[), {, if, (, dataset, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, int, itemCount, =]
[dataset, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, int, itemCount, =, dataset, ., getItemCount, (]
[throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, int, itemCount, =, dataset, ., getItemCount, (, series, ), ;, if, (]
[throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, int, itemCount, =, dataset, ., getItemCount, (, series, ), ;, if, (]
[IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, int, itemCount, =, dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, <]
[IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, int, itemCount, =, dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, <]
["Null 'dataset' argument.", ), ;, }, int, itemCount, =, dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, <, order, +]
[int, itemCount, =, dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, <, order, +, 1, ), {, throw]
[dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, <, order, +, 1, ), {, throw, new, IllegalArgumentException, (]
[if, (, itemCount, <, order, +, 1, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, int, validItems, =]
[throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, int, validItems, =, 0, ;, double, [, ], [, ], data, =]
[(, "Not enough data.", ), ;, }, int, validItems, =, 0, ;, double, [, ], [, ], data, =, new, double, []
[;, }, int, validItems, =, 0, ;, double, [, ], [, ], data, =, new, double, [, 2, ], []
[[, ], [, ], data, =, new, double, [, 2, ], [, itemCount, ], ;, for, (, int, item, =]
[[, ], data, =, new, double, [, 2, ], [, itemCount, ], ;, for, (, int, item, =, 0, ;]
[[, ], data, =, new, double, [, 2, ], [, itemCount, ], ;, for, (, int, item, =, 0, ;]
[data, =, new, double, [, 2, ], [, itemCount, ], ;, for, (, int, item, =, 0, ;, item, <]
[new, double, [, 2, ], [, itemCount, ], ;, for, (, int, item, =, 0, ;, item, <, itemCount, ;]
[new, double, [, 2, ], [, itemCount, ], ;, for, (, int, item, =, 0, ;, item, <, itemCount, ;]
[], ;, for, (, int, item, =, 0, ;, item, <, itemCount, ;, item, ++, ), {, double, x, =]
[], ;, for, (, int, item, =, 0, ;, item, <, itemCount, ;, item, ++, ), {, double, x, =]
[int, item, =, 0, ;, item, <, itemCount, ;, item, ++, ), {, double, x, =, dataset, ., getXValue, (]
[=, 0, ;, item, <, itemCount, ;, item, ++, ), {, double, x, =, dataset, ., getXValue, (, series, ,]
[;, item, ++, ), {, double, x, =, dataset, ., getXValue, (, series, ,, item, ), ;, double, y, =]
[;, item, ++, ), {, double, x, =, dataset, ., getXValue, (, series, ,, item, ), ;, double, y, =]
[{, double, x, =, dataset, ., getXValue, (, series, ,, item, ), ;, double, y, =, dataset, ., getYValue, (]
[x, =, dataset, ., getXValue, (, series, ,, item, ), ;, double, y, =, dataset, ., getYValue, (, series, ,]
[(, series, ,, item, ), ;, double, y, =, dataset, ., getYValue, (, series, ,, item, ), ;, if, (]
[(, series, ,, item, ), ;, double, y, =, dataset, ., getYValue, (, series, ,, item, ), ;, if, (]
[series, ,, item, ), ;, double, y, =, dataset, ., getYValue, (, series, ,, item, ), ;, if, (, !]
[series, ,, item, ), ;, double, y, =, dataset, ., getYValue, (, series, ,, item, ), ;, if, (, !]
[;, double, y, =, dataset, ., getYValue, (, series, ,, item, ), ;, if, (, !, Double, ., isNaN, (]
[=, dataset, ., getYValue, (, series, ,, item, ), ;, if, (, !, Double, ., isNaN, (, x, ), &&]
[dataset, ., getYValue, (, series, ,, item, ), ;, if, (, !, Double, ., isNaN, (, x, ), &&, !]
[dataset, ., getYValue, (, series, ,, item, ), ;, if, (, !, Double, ., isNaN, (, x, ), &&, !]
[series, ,, item, ), ;, if, (, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (]
[;, if, (, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (, y, ), ), {]
[;, if, (, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (, y, ), ), {]
[;, if, (, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (, y, ), ), {]
[(, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (, y, ), ), {, data, []
[., isNaN, (, x, ), &&, !, Double, ., isNaN, (, y, ), ), {, data, [, 0, ], []
[x, ), &&, !, Double, ., isNaN, (, y, ), ), {, data, [, 0, ], [, validItems, ], =]
[&&, !, Double, ., isNaN, (, y, ), ), {, data, [, 0, ], [, validItems, ], =, x, ;]
[&&, !, Double, ., isNaN, (, y, ), ), {, data, [, 0, ], [, validItems, ], =, x, ;]
[&&, !, Double, ., isNaN, (, y, ), ), {, data, [, 0, ], [, validItems, ], =, x, ;]
[Double, ., isNaN, (, y, ), ), {, data, [, 0, ], [, validItems, ], =, x, ;, data, []
[(, y, ), ), {, data, [, 0, ], [, validItems, ], =, x, ;, data, [, 1, ], []
[), {, data, [, 0, ], [, validItems, ], =, x, ;, data, [, 1, ], [, validItems, ], =]
[data, [, 0, ], [, validItems, ], =, x, ;, data, [, 1, ], [, validItems, ], =, y, ;]
[data, [, 0, ], [, validItems, ], =, x, ;, data, [, 1, ], [, validItems, ], =, y, ;]
[=, x, ;, data, [, 1, ], [, validItems, ], =, y, ;, validItems, ++, ;, }, }, if, (]
[=, x, ;, data, [, 1, ], [, validItems, ], =, y, ;, validItems, ++, ;, }, }, if, (]
[;, data, [, 1, ], [, validItems, ], =, y, ;, validItems, ++, ;, }, }, if, (, validItems, <]
[;, data, [, 1, ], [, validItems, ], =, y, ;, validItems, ++, ;, }, }, if, (, validItems, <]
[[, 1, ], [, validItems, ], =, y, ;, validItems, ++, ;, }, }, if, (, validItems, <, order, +]
[validItems, ], =, y, ;, validItems, ++, ;, }, }, if, (, validItems, <, order, +, 1, ), {, throw]
[y, ;, validItems, ++, ;, }, }, if, (, validItems, <, order, +, 1, ), {, throw, new, IllegalArgumentException, (]
[if, (, validItems, <, order, +, 1, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, int, equations, =]
[if, (, validItems, <, order, +, 1, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, int, equations, =]
[validItems, <, order, +, 1, ), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, int, equations, =, order, +]
[), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, int, equations, =, order, +, 1, ;, int, coefficients, =]
[), {, throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, int, equations, =, order, +, 1, ;, int, coefficients, =]
[throw, new, IllegalArgumentException, (, "Not enough data.", ), ;, }, int, equations, =, order, +, 1, ;, int, coefficients, =, order, +]
[}, int, equations, =, order, +, 1, ;, int, coefficients, =, order, +, 2, ;, double, [, ], result, =]
[=, order, +, 1, ;, int, coefficients, =, order, +, 2, ;, double, [, ], result, =, new, double, []
[=, order, +, 1, ;, int, coefficients, =, order, +, 2, ;, double, [, ], result, =, new, double, []
[+, 1, ;, int, coefficients, =, order, +, 2, ;, double, [, ], result, =, new, double, [, equations, +]
[double, [, ], result, =, new, double, [, equations, +, 1, ], ;, double, [, ], [, ], matrix, =]
[result, =, new, double, [, equations, +, 1, ], ;, double, [, ], [, ], matrix, =, new, double, []
[double, [, equations, +, 1, ], ;, double, [, ], [, ], matrix, =, new, double, [, equations, ], []
[;, double, [, ], [, ], matrix, =, new, double, [, equations, ], [, coefficients, ], ;, double, sumX, =]
[], matrix, =, new, double, [, equations, ], [, coefficients, ], ;, double, sumX, =, 0.0, ;, double, sumY, =]
[], [, coefficients, ], ;, double, sumX, =, 0.0, ;, double, sumY, =, 0.0, ;, for, (, int, item, =]
[coefficients, ], ;, double, sumX, =, 0.0, ;, double, sumY, =, 0.0, ;, for, (, int, item, =, 0, ;]
[coefficients, ], ;, double, sumX, =, 0.0, ;, double, sumY, =, 0.0, ;, for, (, int, item, =, 0, ;]
[;, double, sumX, =, 0.0, ;, double, sumY, =, 0.0, ;, for, (, int, item, =, 0, ;, item, <]
[sumX, =, 0.0, ;, double, sumY, =, 0.0, ;, for, (, int, item, =, 0, ;, item, <, validItems, ;]
[sumX, =, 0.0, ;, double, sumY, =, 0.0, ;, for, (, int, item, =, 0, ;, item, <, validItems, ;]
[double, sumY, =, 0.0, ;, for, (, int, item, =, 0, ;, item, <, validItems, ;, item, ++, ), {]
[=, 0.0, ;, for, (, int, item, =, 0, ;, item, <, validItems, ;, item, ++, ), {, sumX, +=]
[=, 0.0, ;, for, (, int, item, =, 0, ;, item, <, validItems, ;, item, ++, ), {, sumX, +=]
[=, 0.0, ;, for, (, int, item, =, 0, ;, item, <, validItems, ;, item, ++, ), {, sumX, +=]
[;, for, (, int, item, =, 0, ;, item, <, validItems, ;, item, ++, ), {, sumX, +=, data, []
[int, item, =, 0, ;, item, <, validItems, ;, item, ++, ), {, sumX, +=, data, [, 0, ], []
[0, ;, item, <, validItems, ;, item, ++, ), {, sumX, +=, data, [, 0, ], [, item, ], ;]
[item, <, validItems, ;, item, ++, ), {, sumX, +=, data, [, 0, ], [, item, ], ;, sumY, +=]
[item, <, validItems, ;, item, ++, ), {, sumX, +=, data, [, 0, ], [, item, ], ;, sumY, +=]
[item, <, validItems, ;, item, ++, ), {, sumX, +=, data, [, 0, ], [, item, ], ;, sumY, +=]
[validItems, ;, item, ++, ), {, sumX, +=, data, [, 0, ], [, item, ], ;, sumY, +=, data, []
[++, ), {, sumX, +=, data, [, 0, ], [, item, ], ;, sumY, +=, data, [, 1, ], []
[], [, item, ], ;, sumY, +=, data, [, 1, ], [, item, ], ;, for, (, int, eq, =]
[item, ], ;, sumY, +=, data, [, 1, ], [, item, ], ;, for, (, int, eq, =, 0, ;]
[item, ], ;, sumY, +=, data, [, 1, ], [, item, ], ;, for, (, int, eq, =, 0, ;]
[;, sumY, +=, data, [, 1, ], [, item, ], ;, for, (, int, eq, =, 0, ;, eq, <]
[+=, data, [, 1, ], [, item, ], ;, for, (, int, eq, =, 0, ;, eq, <, equations, ;]
[+=, data, [, 1, ], [, item, ], ;, for, (, int, eq, =, 0, ;, eq, <, equations, ;]
[for, (, int, eq, =, 0, ;, eq, <, equations, ;, eq, ++, ), {, for, (, int, coe, =]
[int, eq, =, 0, ;, eq, <, equations, ;, eq, ++, ), {, for, (, int, coe, =, 0, ;]
[int, eq, =, 0, ;, eq, <, equations, ;, eq, ++, ), {, for, (, int, coe, =, 0, ;]
[=, 0, ;, eq, <, equations, ;, eq, ++, ), {, for, (, int, coe, =, 0, ;, coe, <]
[=, 0, ;, eq, <, equations, ;, eq, ++, ), {, for, (, int, coe, =, 0, ;, coe, <]
[;, eq, <, equations, ;, eq, ++, ), {, for, (, int, coe, =, 0, ;, coe, <, coefficients, -]
[<, equations, ;, eq, ++, ), {, for, (, int, coe, =, 0, ;, coe, <, coefficients, -, 1, ;]
[<, equations, ;, eq, ++, ), {, for, (, int, coe, =, 0, ;, coe, <, coefficients, -, 1, ;]
[++, ), {, for, (, int, coe, =, 0, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {]
[++, ), {, for, (, int, coe, =, 0, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {]
[++, ), {, for, (, int, coe, =, 0, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {]
[{, for, (, int, coe, =, 0, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, matrix, []
[int, coe, =, 0, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, matrix, [, eq, ], []
[0, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], +=]
[0, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], +=]
[coefficients, -, 1, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], +=, Math, ., pow, (]
[coefficients, -, 1, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], +=, Math, ., pow, (]
[coefficients, -, 1, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], +=, Math, ., pow, (]
[1, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], +=, Math, ., pow, (, data, []
[++, ), {, matrix, [, eq, ], [, coe, ], +=, Math, ., pow, (, data, [, 0, ], []
[matrix, [, eq, ], [, coe, ], +=, Math, ., pow, (, data, [, 0, ], [, item, ], ,]
[matrix, [, eq, ], [, coe, ], +=, Math, ., pow, (, data, [, 0, ], [, item, ], ,]
[eq, ], [, coe, ], +=, Math, ., pow, (, data, [, 0, ], [, item, ], ,, eq, +]
[], +=, Math, ., pow, (, data, [, 0, ], [, item, ], ,, eq, +, coe, ), ;, }]
[], +=, Math, ., pow, (, data, [, 0, ], [, item, ], ,, eq, +, coe, ), ;, }]
[], +=, Math, ., pow, (, data, [, 0, ], [, item, ], ,, eq, +, coe, ), ;, }]
[Math, ., pow, (, data, [, 0, ], [, item, ], ,, eq, +, coe, ), ;, }, matrix, []
[(, data, [, 0, ], [, item, ], ,, eq, +, coe, ), ;, }, matrix, [, eq, ], []
[(, data, [, 0, ], [, item, ], ,, eq, +, coe, ), ;, }, matrix, [, eq, ], []
[[, 0, ], [, item, ], ,, eq, +, coe, ), ;, }, matrix, [, eq, ], [, coefficients, -]
[[, item, ], ,, eq, +, coe, ), ;, }, matrix, [, eq, ], [, coefficients, -, 1, ], +=]
[[, item, ], ,, eq, +, coe, ), ;, }, matrix, [, eq, ], [, coefficients, -, 1, ], +=]
[[, item, ], ,, eq, +, coe, ), ;, }, matrix, [, eq, ], [, coefficients, -, 1, ], +=]
[[, item, ], ,, eq, +, coe, ), ;, }, matrix, [, eq, ], [, coefficients, -, 1, ], +=]
[], ,, eq, +, coe, ), ;, }, matrix, [, eq, ], [, coefficients, -, 1, ], +=, data, []
[+, coe, ), ;, }, matrix, [, eq, ], [, coefficients, -, 1, ], +=, data, [, 1, ], []
[;, }, matrix, [, eq, ], [, coefficients, -, 1, ], +=, data, [, 1, ], [, item, ], *]
[;, }, matrix, [, eq, ], [, coefficients, -, 1, ], +=, data, [, 1, ], [, item, ], *]
[eq, ], [, coefficients, -, 1, ], +=, data, [, 1, ], [, item, ], *, Math, ., pow, (]
[eq, ], [, coefficients, -, 1, ], +=, data, [, 1, ], [, item, ], *, Math, ., pow, (]
[eq, ], [, coefficients, -, 1, ], +=, data, [, 1, ], [, item, ], *, Math, ., pow, (]
[[, coefficients, -, 1, ], +=, data, [, 1, ], [, item, ], *, Math, ., pow, (, data, []
[1, ], +=, data, [, 1, ], [, item, ], *, Math, ., pow, (, data, [, 0, ], []
[data, [, 1, ], [, item, ], *, Math, ., pow, (, data, [, 0, ], [, item, ], ,]
[data, [, 0, ], [, item, ], ,, eq, ), ;, }, }, double, [, ], [, ], subMatrix, =]
[0, ], [, item, ], ,, eq, ), ;, }, }, double, [, ], [, ], subMatrix, =, calculateSubMatrix, (]
[;, }, }, double, [, ], [, ], subMatrix, =, calculateSubMatrix, (, matrix, ), ;, for, (, int, eq, =]
[}, double, [, ], [, ], subMatrix, =, calculateSubMatrix, (, matrix, ), ;, for, (, int, eq, =, 1, ;]
[}, double, [, ], [, ], subMatrix, =, calculateSubMatrix, (, matrix, ), ;, for, (, int, eq, =, 1, ;]
[[, ], [, ], subMatrix, =, calculateSubMatrix, (, matrix, ), ;, for, (, int, eq, =, 1, ;, eq, <]
[[, ], subMatrix, =, calculateSubMatrix, (, matrix, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;]
[[, ], subMatrix, =, calculateSubMatrix, (, matrix, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;]
[calculateSubMatrix, (, matrix, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {]
[calculateSubMatrix, (, matrix, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {]
[calculateSubMatrix, (, matrix, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {]
[matrix, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {, matrix, []
[for, (, int, eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {, matrix, [, eq, ], []
[eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {, matrix, [, eq, ], [, 0, ], =]
[;, eq, ++, ), {, matrix, [, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =]
[++, ), {, matrix, [, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;]
[++, ), {, matrix, [, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;]
[{, matrix, [, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;, coe, <]
[[, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;]
[[, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;]
[0, ], =, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {]
[0, ], =, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {]
[0, ], =, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {]
[=, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {, matrix, []
[for, (, int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {, matrix, [, eq, ], []
[coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], =]
[coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], =]
[coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], =]
[1, ;, coe, <, coefficients, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], =, subMatrix, []
[1, ;, coe, <, coefficients, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], =, subMatrix, []
[coe, <, coefficients, ;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], =, subMatrix, [, eq, -]
[;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], =, subMatrix, [, eq, -, 1, ], []
[;, coe, ++, ), {, matrix, [, eq, ], [, coe, ], =, subMatrix, [, eq, -, 1, ], []
[++, ), {, matrix, [, eq, ], [, coe, ], =, subMatrix, [, eq, -, 1, ], [, coe, -]
[=, subMatrix, [, eq, -, 1, ], [, coe, -, 1, ], ;, }, }, for, (, int, eq, =]
[=, subMatrix, [, eq, -, 1, ], [, coe, -, 1, ], ;, }, }, for, (, int, eq, =]
[[, eq, -, 1, ], [, coe, -, 1, ], ;, }, }, for, (, int, eq, =, equations, -]
[-, 1, ], [, coe, -, 1, ], ;, }, }, for, (, int, eq, =, equations, -, 1, ;]
[-, 1, ], [, coe, -, 1, ], ;, }, }, for, (, int, eq, =, equations, -, 1, ;]
[], [, coe, -, 1, ], ;, }, }, for, (, int, eq, =, equations, -, 1, ;, eq, >]
[[, coe, -, 1, ], ;, }, }, for, (, int, eq, =, equations, -, 1, ;, eq, >, -]
[-, 1, ], ;, }, }, for, (, int, eq, =, equations, -, 1, ;, eq, >, -, 1, ;]
[-, 1, ], ;, }, }, for, (, int, eq, =, equations, -, 1, ;, eq, >, -, 1, ;]
[(, int, eq, =, equations, -, 1, ;, eq, >, -, 1, ;, eq, --, ), {, double, value, =]
[(, int, eq, =, equations, -, 1, ;, eq, >, -, 1, ;, eq, --, ), {, double, value, =]
[(, int, eq, =, equations, -, 1, ;, eq, >, -, 1, ;, eq, --, ), {, double, value, =]
[eq, =, equations, -, 1, ;, eq, >, -, 1, ;, eq, --, ), {, double, value, =, matrix, []
[-, 1, ;, eq, >, -, 1, ;, eq, --, ), {, double, value, =, matrix, [, eq, ], []
[-, 1, ;, eq, >, -, 1, ;, eq, --, ), {, double, value, =, matrix, [, eq, ], []
[;, eq, >, -, 1, ;, eq, --, ), {, double, value, =, matrix, [, eq, ], [, coefficients, -]
[), {, double, value, =, matrix, [, eq, ], [, coefficients, -, 1, ], ;, for, (, int, coe, =]
[double, value, =, matrix, [, eq, ], [, coefficients, -, 1, ], ;, for, (, int, coe, =, eq, ;]
[double, value, =, matrix, [, eq, ], [, coefficients, -, 1, ], ;, for, (, int, coe, =, eq, ;]
[=, matrix, [, eq, ], [, coefficients, -, 1, ], ;, for, (, int, coe, =, eq, ;, coe, <]
[=, matrix, [, eq, ], [, coefficients, -, 1, ], ;, for, (, int, coe, =, eq, ;, coe, <]
[[, eq, ], [, coefficients, -, 1, ], ;, for, (, int, coe, =, eq, ;, coe, <, coefficients, -]
[], [, coefficients, -, 1, ], ;, for, (, int, coe, =, eq, ;, coe, <, coefficients, -, 1, ;]
[], [, coefficients, -, 1, ], ;, for, (, int, coe, =, eq, ;, coe, <, coefficients, -, 1, ;]
[1, ], ;, for, (, int, coe, =, eq, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {]
[;, for, (, int, coe, =, eq, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, value, -=]
[;, for, (, int, coe, =, eq, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, value, -=]
[;, for, (, int, coe, =, eq, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, value, -=]
[;, for, (, int, coe, =, eq, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, value, -=]
[(, int, coe, =, eq, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, value, -=, matrix, []
[=, eq, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, value, -=, matrix, [, eq, ], []
[coe, <, coefficients, -, 1, ;, coe, ++, ), {, value, -=, matrix, [, eq, ], [, coe, ], *]
[coe, <, coefficients, -, 1, ;, coe, ++, ), {, value, -=, matrix, [, eq, ], [, coe, ], *]
[coefficients, -, 1, ;, coe, ++, ), {, value, -=, matrix, [, eq, ], [, coe, ], *, result, []
[coe, ++, ), {, value, -=, matrix, [, eq, ], [, coe, ], *, result, [, coe, ], ;, }]
[coe, ++, ), {, value, -=, matrix, [, eq, ], [, coe, ], *, result, [, coe, ], ;, }]
[), {, value, -=, matrix, [, eq, ], [, coe, ], *, result, [, coe, ], ;, }, result, []
[-=, matrix, [, eq, ], [, coe, ], *, result, [, coe, ], ;, }, result, [, eq, ], =]
[-=, matrix, [, eq, ], [, coe, ], *, result, [, coe, ], ;, }, result, [, eq, ], =]
[[, eq, ], [, coe, ], *, result, [, coe, ], ;, }, result, [, eq, ], =, value, /]
[[, eq, ], [, coe, ], *, result, [, coe, ], ;, }, result, [, eq, ], =, value, /]
[[, eq, ], [, coe, ], *, result, [, coe, ], ;, }, result, [, eq, ], =, value, /]
[], [, coe, ], *, result, [, coe, ], ;, }, result, [, eq, ], =, value, /, matrix, []
[], *, result, [, coe, ], ;, }, result, [, eq, ], =, value, /, matrix, [, eq, ], []
[}, result, [, eq, ], =, value, /, matrix, [, eq, ], [, eq, ], ;, }, double, meanY, =]
[}, result, [, eq, ], =, value, /, matrix, [, eq, ], [, eq, ], ;, }, double, meanY, =]
[[, eq, ], =, value, /, matrix, [, eq, ], [, eq, ], ;, }, double, meanY, =, sumY, /]
[/, matrix, [, eq, ], [, eq, ], ;, }, double, meanY, =, sumY, /, validItems, ;, double, yObsSquare, =]
[[, eq, ], ;, }, double, meanY, =, sumY, /, validItems, ;, double, yObsSquare, =, 0.0, ;, double, yRegSquare, =]
[=, sumY, /, validItems, ;, double, yObsSquare, =, 0.0, ;, double, yRegSquare, =, 0.0, ;, for, (, int, item, =]
[/, validItems, ;, double, yObsSquare, =, 0.0, ;, double, yRegSquare, =, 0.0, ;, for, (, int, item, =, 0, ;]
[/, validItems, ;, double, yObsSquare, =, 0.0, ;, double, yRegSquare, =, 0.0, ;, for, (, int, item, =, 0, ;]
[;, double, yObsSquare, =, 0.0, ;, double, yRegSquare, =, 0.0, ;, for, (, int, item, =, 0, ;, item, <]
[yObsSquare, =, 0.0, ;, double, yRegSquare, =, 0.0, ;, for, (, int, item, =, 0, ;, item, <, validItems, ;]
[yObsSquare, =, 0.0, ;, double, yRegSquare, =, 0.0, ;, for, (, int, item, =, 0, ;, item, <, validItems, ;]
[0.0, ;, for, (, int, item, =, 0, ;, item, <, validItems, ;, item, ++, ), {, double, yCalc, =]
[0, ;, item, <, validItems, ;, item, ++, ), {, double, yCalc, =, 0, ;, for, (, int, eq, =]
[item, <, validItems, ;, item, ++, ), {, double, yCalc, =, 0, ;, for, (, int, eq, =, 0, ;]
[item, <, validItems, ;, item, ++, ), {, double, yCalc, =, 0, ;, for, (, int, eq, =, 0, ;]
[validItems, ;, item, ++, ), {, double, yCalc, =, 0, ;, for, (, int, eq, =, 0, ;, eq, <]
[item, ++, ), {, double, yCalc, =, 0, ;, for, (, int, eq, =, 0, ;, eq, <, equations, ;]
[item, ++, ), {, double, yCalc, =, 0, ;, for, (, int, eq, =, 0, ;, eq, <, equations, ;]
[double, yCalc, =, 0, ;, for, (, int, eq, =, 0, ;, eq, <, equations, ;, eq, ++, ), {]
[=, 0, ;, for, (, int, eq, =, 0, ;, eq, <, equations, ;, eq, ++, ), {, yCalc, +=]
[=, 0, ;, for, (, int, eq, =, 0, ;, eq, <, equations, ;, eq, ++, ), {, yCalc, +=]
[=, 0, ;, for, (, int, eq, =, 0, ;, eq, <, equations, ;, eq, ++, ), {, yCalc, +=]
[;, for, (, int, eq, =, 0, ;, eq, <, equations, ;, eq, ++, ), {, yCalc, +=, result, []
[int, eq, =, 0, ;, eq, <, equations, ;, eq, ++, ), {, yCalc, +=, result, [, eq, ], *]
[int, eq, =, 0, ;, eq, <, equations, ;, eq, ++, ), {, yCalc, +=, result, [, eq, ], *]
[;, eq, <, equations, ;, eq, ++, ), {, yCalc, +=, result, [, eq, ], *, Math, ., pow, (]
[;, eq, <, equations, ;, eq, ++, ), {, yCalc, +=, result, [, eq, ], *, Math, ., pow, (]
[;, eq, <, equations, ;, eq, ++, ), {, yCalc, +=, result, [, eq, ], *, Math, ., pow, (]
[<, equations, ;, eq, ++, ), {, yCalc, +=, result, [, eq, ], *, Math, ., pow, (, data, []
[eq, ++, ), {, yCalc, +=, result, [, eq, ], *, Math, ., pow, (, data, [, 0, ], []
[{, yCalc, +=, result, [, eq, ], *, Math, ., pow, (, data, [, 0, ], [, item, ], ,]
[[, eq, ], *, Math, ., pow, (, data, [, 0, ], [, item, ], ,, eq, ), ;, }]
[], *, Math, ., pow, (, data, [, 0, ], [, item, ], ,, eq, ), ;, }, yRegSquare, +=]
[], *, Math, ., pow, (, data, [, 0, ], [, item, ], ,, eq, ), ;, }, yRegSquare, +=]
[pow, (, data, [, 0, ], [, item, ], ,, eq, ), ;, }, yRegSquare, +=, Math, ., pow, (]
[pow, (, data, [, 0, ], [, item, ], ,, eq, ), ;, }, yRegSquare, +=, Math, ., pow, (]
[data, [, 0, ], [, item, ], ,, eq, ), ;, }, yRegSquare, +=, Math, ., pow, (, yCalc, -]
[0, ], [, item, ], ,, eq, ), ;, }, yRegSquare, +=, Math, ., pow, (, yCalc, -, meanY, ,]
[item, ], ,, eq, ), ;, }, yRegSquare, +=, Math, ., pow, (, yCalc, -, meanY, ,, 2, ), ;]
[,, eq, ), ;, }, yRegSquare, +=, Math, ., pow, (, yCalc, -, meanY, ,, 2, ), ;, yObsSquare, +=]
[,, eq, ), ;, }, yRegSquare, +=, Math, ., pow, (, yCalc, -, meanY, ,, 2, ), ;, yObsSquare, +=]
[}, yRegSquare, +=, Math, ., pow, (, yCalc, -, meanY, ,, 2, ), ;, yObsSquare, +=, Math, ., pow, (]
[}, yRegSquare, +=, Math, ., pow, (, yCalc, -, meanY, ,, 2, ), ;, yObsSquare, +=, Math, ., pow, (]
[}, yRegSquare, +=, Math, ., pow, (, yCalc, -, meanY, ,, 2, ), ;, yObsSquare, +=, Math, ., pow, (]
[}, yRegSquare, +=, Math, ., pow, (, yCalc, -, meanY, ,, 2, ), ;, yObsSquare, +=, Math, ., pow, (]
[+=, Math, ., pow, (, yCalc, -, meanY, ,, 2, ), ;, yObsSquare, +=, Math, ., pow, (, data, []
[pow, (, yCalc, -, meanY, ,, 2, ), ;, yObsSquare, +=, Math, ., pow, (, data, [, 1, ], []
[-, meanY, ,, 2, ), ;, yObsSquare, +=, Math, ., pow, (, data, [, 1, ], [, item, ], -]
[,, 2, ), ;, yObsSquare, +=, Math, ., pow, (, data, [, 1, ], [, item, ], -, meanY, ,]
[., pow, (, data, [, 1, ], [, item, ], -, meanY, ,, 2, ), ;, }, double, rSquare, =]
[., pow, (, data, [, 1, ], [, item, ], -, meanY, ,, 2, ), ;, }, double, rSquare, =]
[(, data, [, 1, ], [, item, ], -, meanY, ,, 2, ), ;, }, double, rSquare, =, yRegSquare, /]
[[, 1, ], [, item, ], -, meanY, ,, 2, ), ;, }, double, rSquare, =, yRegSquare, /, yObsSquare, ;]
[[, 1, ], [, item, ], -, meanY, ,, 2, ), ;, }, double, rSquare, =, yRegSquare, /, yObsSquare, ;]
[], [, item, ], -, meanY, ,, 2, ), ;, }, double, rSquare, =, yRegSquare, /, yObsSquare, ;, result, []
[], -, meanY, ,, 2, ), ;, }, double, rSquare, =, yRegSquare, /, yObsSquare, ;, result, [, equations, ], =]
[,, 2, ), ;, }, double, rSquare, =, yRegSquare, /, yObsSquare, ;, result, [, equations, ], =, rSquare, ;, return]
[private, static, double, [, ], [, ], calculateSubMatrix, (, double, [, ], [, ], matrix, ), {, int, equations, =]
[private, static, double, [, ], [, ], calculateSubMatrix, (, double, [, ], [, ], matrix, ), {, int, equations, =]
[calculateSubMatrix, (, double, [, ], [, ], matrix, ), {, int, equations, =, matrix, ., length, ;, int, coefficients, =]
[calculateSubMatrix, (, double, [, ], [, ], matrix, ), {, int, equations, =, matrix, ., length, ;, int, coefficients, =]
[calculateSubMatrix, (, double, [, ], [, ], matrix, ), {, int, equations, =, matrix, ., length, ;, int, coefficients, =]
[double, [, ], [, ], matrix, ), {, int, equations, =, matrix, ., length, ;, int, coefficients, =, matrix, []
[., length, ;, int, coefficients, =, matrix, [, 0, ], ., length, ;, double, [, ], [, ], result, =]
[int, coefficients, =, matrix, [, 0, ], ., length, ;, double, [, ], [, ], result, =, new, double, []
[int, coefficients, =, matrix, [, 0, ], ., length, ;, double, [, ], [, ], result, =, new, double, []
[=, matrix, [, 0, ], ., length, ;, double, [, ], [, ], result, =, new, double, [, equations, -]
[0, ], ., length, ;, double, [, ], [, ], result, =, new, double, [, equations, -, 1, ], []
[0, ], ., length, ;, double, [, ], [, ], result, =, new, double, [, equations, -, 1, ], []
[., length, ;, double, [, ], [, ], result, =, new, double, [, equations, -, 1, ], [, coefficients, -]
[result, =, new, double, [, equations, -, 1, ], [, coefficients, -, 1, ], ;, for, (, int, eq, =]
[new, double, [, equations, -, 1, ], [, coefficients, -, 1, ], ;, for, (, int, eq, =, 1, ;]
[new, double, [, equations, -, 1, ], [, coefficients, -, 1, ], ;, for, (, int, eq, =, 1, ;]
[[, equations, -, 1, ], [, coefficients, -, 1, ], ;, for, (, int, eq, =, 1, ;, eq, <]
[-, 1, ], [, coefficients, -, 1, ], ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;]
[-, 1, ], [, coefficients, -, 1, ], ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;]
[], ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {, double, factor, =]
[], ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {, double, factor, =]
[], ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {, double, factor, =]
[], ;, for, (, int, eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {, double, factor, =]
[for, (, int, eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {, double, factor, =, matrix, []
[eq, =, 1, ;, eq, <, equations, ;, eq, ++, ), {, double, factor, =, matrix, [, 0, ], []
[;, eq, <, equations, ;, eq, ++, ), {, double, factor, =, matrix, [, 0, ], [, 0, ], /]
[;, eq, <, equations, ;, eq, ++, ), {, double, factor, =, matrix, [, 0, ], [, 0, ], /]
[;, eq, <, equations, ;, eq, ++, ), {, double, factor, =, matrix, [, 0, ], [, 0, ], /]
[<, equations, ;, eq, ++, ), {, double, factor, =, matrix, [, 0, ], [, 0, ], /, matrix, []
[eq, ++, ), {, double, factor, =, matrix, [, 0, ], [, 0, ], /, matrix, [, eq, ], []
[[, 0, ], [, 0, ], /, matrix, [, eq, ], [, 0, ], ;, for, (, int, coe, =]
[], [, 0, ], /, matrix, [, eq, ], [, 0, ], ;, for, (, int, coe, =, 1, ;]
[], [, 0, ], /, matrix, [, eq, ], [, 0, ], ;, for, (, int, coe, =, 1, ;]
[0, ], /, matrix, [, eq, ], [, 0, ], ;, for, (, int, coe, =, 1, ;, coe, <]
[/, matrix, [, eq, ], [, 0, ], ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;]
[/, matrix, [, eq, ], [, 0, ], ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;]
[], [, 0, ], ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {]
[], [, 0, ], ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {]
[], [, 0, ], ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {]
[0, ], ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {, result, []
[0, ], ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {, result, []
[;, for, (, int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {, result, [, eq, -]
[int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {, result, [, eq, -, 1, ], []
[int, coe, =, 1, ;, coe, <, coefficients, ;, coe, ++, ), {, result, [, eq, -, 1, ], []
[=, 1, ;, coe, <, coefficients, ;, coe, ++, ), {, result, [, eq, -, 1, ], [, coe, -]
[coe, <, coefficients, ;, coe, ++, ), {, result, [, eq, -, 1, ], [, coe, -, 1, ], =]
[coe, <, coefficients, ;, coe, ++, ), {, result, [, eq, -, 1, ], [, coe, -, 1, ], =]
[coe, <, coefficients, ;, coe, ++, ), {, result, [, eq, -, 1, ], [, coe, -, 1, ], =]
[coe, <, coefficients, ;, coe, ++, ), {, result, [, eq, -, 1, ], [, coe, -, 1, ], =]
[coefficients, ;, coe, ++, ), {, result, [, eq, -, 1, ], [, coe, -, 1, ], =, matrix, []
[++, ), {, result, [, eq, -, 1, ], [, coe, -, 1, ], =, matrix, [, 0, ], []
[result, [, eq, -, 1, ], [, coe, -, 1, ], =, matrix, [, 0, ], [, coe, ], -]
[result, [, eq, -, 1, ], [, coe, -, 1, ], =, matrix, [, 0, ], [, coe, ], -]
[result, [, eq, -, 1, ], [, coe, -, 1, ], =, matrix, [, 0, ], [, coe, ], -]
[result, [, eq, -, 1, ], [, coe, -, 1, ], =, matrix, [, 0, ], [, coe, ], -]
[eq, -, 1, ], [, coe, -, 1, ], =, matrix, [, 0, ], [, coe, ], -, matrix, []
[], [, coe, -, 1, ], =, matrix, [, 0, ], [, coe, ], -, matrix, [, eq, ], []
[-, 1, ], =, matrix, [, 0, ], [, coe, ], -, matrix, [, eq, ], [, coe, ], *]
[0, ], [, coe, ], -, matrix, [, eq, ], [, coe, ], *, factor, ;, }, }, if, (]
[0, ], [, coe, ], -, matrix, [, eq, ], [, coe, ], *, factor, ;, }, }, if, (]
[[, coe, ], -, matrix, [, eq, ], [, coe, ], *, factor, ;, }, }, if, (, equations, ==]
[matrix, [, eq, ], [, coe, ], *, factor, ;, }, }, if, (, equations, ==, 1, ), {, return]
[coe, ], *, factor, ;, }, }, if, (, equations, ==, 1, ), {, return, result, ;, }, if, (]
[coe, ], *, factor, ;, }, }, if, (, equations, ==, 1, ), {, return, result, ;, }, if, (]
[coe, ], *, factor, ;, }, }, if, (, equations, ==, 1, ), {, return, result, ;, }, if, (]
[coe, ], *, factor, ;, }, }, if, (, equations, ==, 1, ), {, return, result, ;, }, if, (]
[*, factor, ;, }, }, if, (, equations, ==, 1, ), {, return, result, ;, }, if, (, result, []
[}, }, if, (, equations, ==, 1, ), {, return, result, ;, }, if, (, result, [, 0, ], []
[(, equations, ==, 1, ), {, return, result, ;, }, if, (, result, [, 0, ], [, 0, ], ==]
[return, result, ;, }, if, (, result, [, 0, ], [, 0, ], ==, 0, ), {, boolean, found, =]
[[, 0, ], [, 0, ], ==, 0, ), {, boolean, found, =, false, ;, for, (, int, i, =]
[], [, 0, ], ==, 0, ), {, boolean, found, =, false, ;, for, (, int, i, =, 0, ;]
[], [, 0, ], ==, 0, ), {, boolean, found, =, false, ;, for, (, int, i, =, 0, ;]
[0, ], ==, 0, ), {, boolean, found, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[0, ], ==, 0, ), {, boolean, found, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[), {, boolean, found, =, false, ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;]
[), {, boolean, found, =, false, ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, result, ., length, ;, i, ++, ), {, if, (, result, []
[=, 0, ;, i, <, result, ., length, ;, i, ++, ), {, if, (, result, [, i, ], []
[i, <, result, ., length, ;, i, ++, ), {, if, (, result, [, i, ], [, 0, ], !=]
[., length, ;, i, ++, ), {, if, (, result, [, i, ], [, 0, ], !=, 0, ), {]
[;, i, ++, ), {, if, (, result, [, i, ], [, 0, ], !=, 0, ), {, found, =]
[result, [, i, ], [, 0, ], !=, 0, ), {, found, =, true, ;, double, [, ], temp, =]
[result, [, i, ], [, 0, ], !=, 0, ), {, found, =, true, ;, double, [, ], temp, =]
[i, ], [, 0, ], !=, 0, ), {, found, =, true, ;, double, [, ], temp, =, result, []
[{, found, =, true, ;, double, [, ], temp, =, result, [, 0, ], ;, for, (, int, j, =]
[=, true, ;, double, [, ], temp, =, result, [, 0, ], ;, for, (, int, j, =, 0, ;]
[=, true, ;, double, [, ], temp, =, result, [, 0, ], ;, for, (, int, j, =, 0, ;]
[;, double, [, ], temp, =, result, [, 0, ], ;, for, (, int, j, =, 0, ;, j, <]
[;, double, [, ], temp, =, result, [, 0, ], ;, for, (, int, j, =, 0, ;, j, <]
[;, double, [, ], temp, =, result, [, 0, ], ;, for, (, int, j, =, 0, ;, j, <]
[[, ], temp, =, result, [, 0, ], ;, for, (, int, j, =, 0, ;, j, <, result, []
[[, 0, ], ;, for, (, int, j, =, 0, ;, j, <, result, [, i, ], ., length, ;]
[[, 0, ], ;, for, (, int, j, =, 0, ;, j, <, result, [, i, ], ., length, ;]
[for, (, int, j, =, 0, ;, j, <, result, [, i, ], ., length, ;, j, ++, ), {]
[for, (, int, j, =, 0, ;, j, <, result, [, i, ], ., length, ;, j, ++, ), {]
[for, (, int, j, =, 0, ;, j, <, result, [, i, ], ., length, ;, j, ++, ), {]
[int, j, =, 0, ;, j, <, result, [, i, ], ., length, ;, j, ++, ), {, result, []
[0, ;, j, <, result, [, i, ], ., length, ;, j, ++, ), {, result, [, 0, ], []
[<, result, [, i, ], ., length, ;, j, ++, ), {, result, [, 0, ], [, j, ], =]
[<, result, [, i, ], ., length, ;, j, ++, ), {, result, [, 0, ], [, j, ], =]
[<, result, [, i, ], ., length, ;, j, ++, ), {, result, [, 0, ], [, j, ], =]
[[, i, ], ., length, ;, j, ++, ), {, result, [, 0, ], [, j, ], =, result, []
[., length, ;, j, ++, ), {, result, [, 0, ], [, j, ], =, result, [, i, ], []
[0, ], [, j, ], =, result, [, i, ], [, j, ], ;, }, for, (, int, j, =]
[[, j, ], =, result, [, i, ], [, j, ], ;, }, for, (, int, j, =, 0, ;]
[[, j, ], =, result, [, i, ], [, j, ], ;, }, for, (, int, j, =, 0, ;]
[], =, result, [, i, ], [, j, ], ;, }, for, (, int, j, =, 0, ;, j, <]
[], =, result, [, i, ], [, j, ], ;, }, for, (, int, j, =, 0, ;, j, <]
[i, ], [, j, ], ;, }, for, (, int, j, =, 0, ;, j, <, temp, ., length, ;]
[i, ], [, j, ], ;, }, for, (, int, j, =, 0, ;, j, <, temp, ., length, ;]
[], ;, }, for, (, int, j, =, 0, ;, j, <, temp, ., length, ;, j, ++, ), {]
[], ;, }, for, (, int, j, =, 0, ;, j, <, temp, ., length, ;, j, ++, ), {]
[], ;, }, for, (, int, j, =, 0, ;, j, <, temp, ., length, ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, temp, ., length, ;, j, ++, ), {, result, []
[int, j, =, 0, ;, j, <, temp, ., length, ;, j, ++, ), {, result, [, i, ], []
[0, ;, j, <, temp, ., length, ;, j, ++, ), {, result, [, i, ], [, j, ], =]
[0, ;, j, <, temp, ., length, ;, j, ++, ), {, result, [, i, ], [, j, ], =]
[j, <, temp, ., length, ;, j, ++, ), {, result, [, i, ], [, j, ], =, temp, []
[result, [, i, ], [, j, ], =, temp, [, j, ], ;, }, break, ;, }, }, if, (]
[[, i, ], [, j, ], =, temp, [, j, ], ;, }, break, ;, }, }, if, (, !]
[[, j, ], =, temp, [, j, ], ;, }, break, ;, }, }, if, (, !, found, ), {]
[[, j, ], =, temp, [, j, ], ;, }, break, ;, }, }, if, (, !, found, ), {]
[[, j, ], =, temp, [, j, ], ;, }, break, ;, }, }, if, (, !, found, ), {]
[j, ], ;, }, break, ;, }, }, if, (, !, found, ), {, System, ., out, ., println, (]
[break, ;, }, }, if, (, !, found, ), {, System, ., out, ., println, (, "Equation has no solution!", ), ;, return]
[}, if, (, !, found, ), {, System, ., out, ., println, (, "Equation has no solution!", ), ;, return, new, double, []
[}, if, (, !, found, ), {, System, ., out, ., println, (, "Equation has no solution!", ), ;, return, new, double, []
[(, !, found, ), {, System, ., out, ., println, (, "Equation has no solution!", ), ;, return, new, double, [, equations, -]
[), {, System, ., out, ., println, (, "Equation has no solution!", ), ;, return, new, double, [, equations, -, 1, ], []
[), {, System, ., out, ., println, (, "Equation has no solution!", ), ;, return, new, double, [, equations, -, 1, ], []
[System, ., out, ., println, (, "Equation has no solution!", ), ;, return, new, double, [, equations, -, 1, ], [, coefficients, -]
[[, equations, -, 1, ], [, coefficients, -, 1, ], ;, }, }, double, [, ], [, ], subMatrix, =]
[-, 1, ], [, coefficients, -, 1, ], ;, }, }, double, [, ], [, ], subMatrix, =, calculateSubMatrix, (]
[;, }, }, double, [, ], [, ], subMatrix, =, calculateSubMatrix, (, result, ), ;, for, (, int, eq, =]
[}, double, [, ], [, ], subMatrix, =, calculateSubMatrix, (, result, ), ;, for, (, int, eq, =, 1, ;]
[}, double, [, ], [, ], subMatrix, =, calculateSubMatrix, (, result, ), ;, for, (, int, eq, =, 1, ;]
[[, ], [, ], subMatrix, =, calculateSubMatrix, (, result, ), ;, for, (, int, eq, =, 1, ;, eq, <]
[[, ], [, ], subMatrix, =, calculateSubMatrix, (, result, ), ;, for, (, int, eq, =, 1, ;, eq, <]
[[, ], subMatrix, =, calculateSubMatrix, (, result, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, -]
[subMatrix, =, calculateSubMatrix, (, result, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, -, 1, ;]
[subMatrix, =, calculateSubMatrix, (, result, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, -, 1, ;]
[result, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, -, 1, ;, eq, ++, ), {]
[result, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, -, 1, ;, eq, ++, ), {]
[result, ), ;, for, (, int, eq, =, 1, ;, eq, <, equations, -, 1, ;, eq, ++, ), {]
[;, for, (, int, eq, =, 1, ;, eq, <, equations, -, 1, ;, eq, ++, ), {, result, []
[int, eq, =, 1, ;, eq, <, equations, -, 1, ;, eq, ++, ), {, result, [, eq, ], []
[1, ;, eq, <, equations, -, 1, ;, eq, ++, ), {, result, [, eq, ], [, 0, ], =]
[;, eq, ++, ), {, result, [, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =]
[++, ), {, result, [, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;]
[++, ), {, result, [, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;]
[{, result, [, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;, coe, <]
[{, result, [, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;, coe, <]
[[, eq, ], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, -]
[], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, -, 1, ;]
[], [, 0, ], =, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, -, 1, ;]
[=, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {]
[=, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {]
[=, 0, ;, for, (, int, coe, =, 1, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {]
[;, for, (, int, coe, =, 1, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, result, []
[int, coe, =, 1, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, result, [, eq, ], []
[1, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, result, [, eq, ], [, coe, ], =]
[1, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, result, [, eq, ], [, coe, ], =]
[1, ;, coe, <, coefficients, -, 1, ;, coe, ++, ), {, result, [, eq, ], [, coe, ], =]
[coe, <, coefficients, -, 1, ;, coe, ++, ), {, result, [, eq, ], [, coe, ], =, subMatrix, []
[coe, <, coefficients, -, 1, ;, coe, ++, ), {, result, [, eq, ], [, coe, ], =, subMatrix, []
[coefficients, -, 1, ;, coe, ++, ), {, result, [, eq, ], [, coe, ], =, subMatrix, [, eq, -]
[;, coe, ++, ), {, result, [, eq, ], [, coe, ], =, subMatrix, [, eq, -, 1, ], []
[;, coe, ++, ), {, result, [, eq, ], [, coe, ], =, subMatrix, [, eq, -, 1, ], []
[++, ), {, result, [, eq, ], [, coe, ], =, subMatrix, [, eq, -, 1, ], [, coe, -]
[], [, coe, ], =, subMatrix, [, eq, -, 1, ], [, coe, -, 1, ], ;, }, }, return]
