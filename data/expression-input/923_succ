[;, protected, RealMatrix, getX, (, ), {, return, xMatrix, ;, }, protected, RealVector, getY, (, ), {, return, yVector, ;]
[;, }, protected, RealVector, getY, (, ), {, return, yVector, ;, }, public, boolean, isNoIntercept, (, ), {, return, noIntercept]
[;, }, public, boolean, isNoIntercept, (, ), {, return, noIntercept, ;, }, public, void, setNoIntercept, (, boolean, noIntercept, ), {]
[;, }, public, void, setNoIntercept, (, boolean, noIntercept, ), {, this, ., noIntercept, =, noIntercept, ;, }, public, void, newSampleData]
[=, noIntercept, ;, }, public, void, newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars, ), {]
[., noIntercept, =, noIntercept, ;, }, public, void, newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars]
[;, }, public, void, newSampleData, (, double, [, ], data, ,, int, nobs, ,, int, nvars, ), {, if, (]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, !=, nobs, *, (, nvars, +]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, !=, nobs, *, (]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, !=, nobs, *, (, nvars, +]
[;, }, if, (, data, ., length, !=, nobs, *, (, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException]
[), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (, nvars, +, 1, ), ), ;, }]
[!=, nobs, *, (, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *]
[., length, !=, nobs, *, (, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (, nvars, +, 1, ), ), ;, }]
[*, (, nvars, +, 1, ), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (, nvars]
[), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (, nvars, +, 1, ), ), ;, }]
[), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (, nvars, +, 1, ), ), ;]
[+, 1, ), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (, nvars, +, 1, )]
[), ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, nobs, *, (, nvars, +, 1, ), ), ;]
[;, }, if, (, nobs, <=, nvars, ), {, throw, new, NumberIsTooSmallException, (, nobs, ,, nvars, ,, false, ), ;]
[,, nobs, *, (, nvars, +, 1, ), ), ;, }, if, (, nobs, <=, nvars, ), {, throw, new]
[., length, ,, nobs, *, (, nvars, +, 1, ), ), ;, }, if, (, nobs, <=, nvars, ), {]
[), ;, }, if, (, nobs, <=, nvars, ), {, throw, new, NumberIsTooSmallException, (, nobs, ,, nvars, ,, false, )]
[*, (, nvars, +, 1, ), ), ;, }, if, (, nobs, <=, nvars, ), {, throw, new, NumberIsTooSmallException, (]
[), ;, }, if, (, nobs, <=, nvars, ), {, throw, new, NumberIsTooSmallException, (, nobs, ,, nvars, ,, false, )]
[), ), ;, }, if, (, nobs, <=, nvars, ), {, throw, new, NumberIsTooSmallException, (, nobs, ,, nvars, ,, false]
[+, 1, ), ), ;, }, if, (, nobs, <=, nvars, ), {, throw, new, NumberIsTooSmallException, (, nobs, ,, nvars]
[), ), ;, }, if, (, nobs, <=, nvars, ), {, throw, new, NumberIsTooSmallException, (, nobs, ,, nvars, ,, false]
[), {, throw, new, NumberIsTooSmallException, (, nobs, ,, nvars, ,, false, ), ;, }, double, [, ], y, =, new]
[<=, nvars, ), {, throw, new, NumberIsTooSmallException, (, nobs, ,, nvars, ,, false, ), ;, }, double, [, ], y]
[), {, throw, new, NumberIsTooSmallException, (, nobs, ,, nvars, ,, false, ), ;, }, double, [, ], y, =, new]
[;, }, double, [, ], y, =, new, double, [, nobs, ], ;, final, int, cols, =, noIntercept, ?, nvars]
[,, nvars, ,, false, ), ;, }, double, [, ], y, =, new, double, [, nobs, ], ;, final, int]
[,, false, ), ;, }, double, [, ], y, =, new, double, [, nobs, ], ;, final, int, cols, =]
[), ;, }, double, [, ], y, =, new, double, [, nobs, ], ;, final, int, cols, =, noIntercept, ?]
[;, final, int, cols, =, noIntercept, ?, nvars, :, nvars, +, 1, ;, double, [, ], [, ], x, =]
[], ;, final, int, cols, =, noIntercept, ?, nvars, :, nvars, +, 1, ;, double, [, ], [, ], x]
[;, double, [, ], [, ], x, =, new, double, [, nobs, ], [, cols, ], ;, int, pointer, =]
[?, nvars, :, nvars, +, 1, ;, double, [, ], [, ], x, =, new, double, [, nobs, ], []
[:, nvars, +, 1, ;, double, [, ], [, ], x, =, new, double, [, nobs, ], [, cols, ]]
[;, double, [, ], [, ], x, =, new, double, [, nobs, ], [, cols, ], ;, int, pointer, =]
[+, 1, ;, double, [, ], [, ], x, =, new, double, [, nobs, ], [, cols, ], ;, int]
[;, double, [, ], [, ], x, =, new, double, [, nobs, ], [, cols, ], ;, int, pointer, =]
[;, int, pointer, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nobs, ;, i, ++, )]
[], [, cols, ], ;, int, pointer, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nobs]
[], ;, int, pointer, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nobs, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, nobs, ;, i, ++, ), {, y, [, i, ]]
[;, i, <, nobs, ;, i, ++, ), {, y, [, i, ], =, data, [, pointer, ++, ], ;]
[;, i, ++, ), {, y, [, i, ], =, data, [, pointer, ++, ], ;, if, (, !, noIntercept]
[<, nobs, ;, i, ++, ), {, y, [, i, ], =, data, [, pointer, ++, ], ;, if, (]
[;, i, ++, ), {, y, [, i, ], =, data, [, pointer, ++, ], ;, if, (, !, noIntercept]
[), {, y, [, i, ], =, data, [, pointer, ++, ], ;, if, (, !, noIntercept, ), {, x]
[++, ), {, y, [, i, ], =, data, [, pointer, ++, ], ;, if, (, !, noIntercept, ), {]
[=, data, [, pointer, ++, ], ;, if, (, !, noIntercept, ), {, x, [, i, ], [, 0, ]]
[[, i, ], =, data, [, pointer, ++, ], ;, if, (, !, noIntercept, ), {, x, [, i, ]]
[], =, data, [, pointer, ++, ], ;, if, (, !, noIntercept, ), {, x, [, i, ], [, 0]
[;, if, (, !, noIntercept, ), {, x, [, i, ], [, 0, ], =, 1.0d, ;, }, for, (]
[[, pointer, ++, ], ;, if, (, !, noIntercept, ), {, x, [, i, ], [, 0, ], =, 1.0d]
[], ;, if, (, !, noIntercept, ), {, x, [, i, ], [, 0, ], =, 1.0d, ;, }, for]
[++, ], ;, if, (, !, noIntercept, ), {, x, [, i, ], [, 0, ], =, 1.0d, ;, }]
[), {, x, [, i, ], [, 0, ], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?]
[), {, x, [, i, ], [, 0, ], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?]
[=, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;, j, <, cols, ;, j]
[[, 0, ], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;, j, <]
[[, i, ], [, 0, ], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?, 0, :, 1]
[], [, 0, ], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;, j]
[], =, 1.0d, ;, }, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;, j, <, cols, ;]
[;, }, for, (, int, j, =, noIntercept, ?, 0, :, 1, ;, j, <, cols, ;, j, ++, )]
[;, j, <, cols, ;, j, ++, ), {, x, [, i, ], [, j, ], =, data, [, pointer]
[?, 0, :, 1, ;, j, <, cols, ;, j, ++, ), {, x, [, i, ], [, j, ]]
[:, 1, ;, j, <, cols, ;, j, ++, ), {, x, [, i, ], [, j, ], =, data]
[;, j, <, cols, ;, j, ++, ), {, x, [, i, ], [, j, ], =, data, [, pointer]
[;, j, ++, ), {, x, [, i, ], [, j, ], =, data, [, pointer, ++, ], ;, }]
[<, cols, ;, j, ++, ), {, x, [, i, ], [, j, ], =, data, [, pointer, ++, ]]
[;, j, ++, ), {, x, [, i, ], [, j, ], =, data, [, pointer, ++, ], ;, }]
[), {, x, [, i, ], [, j, ], =, data, [, pointer, ++, ], ;, }, }, this, .]
[++, ), {, x, [, i, ], [, j, ], =, data, [, pointer, ++, ], ;, }, }, this]
[=, data, [, pointer, ++, ], ;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ), ;, this]
[[, j, ], =, data, [, pointer, ++, ], ;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x]
[[, i, ], [, j, ], =, data, [, pointer, ++, ], ;, }, }, this, ., xMatrix, =, new]
[], [, j, ], =, data, [, pointer, ++, ], ;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (]
[], =, data, [, pointer, ++, ], ;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ), ;]
[;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ), ;, this, ., yVector, =, new, ArrayRealVector, (]
[[, pointer, ++, ], ;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ), ;, this, ., yVector]
[], ;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ), ;, this, ., yVector, =, new, ArrayRealVector]
[++, ], ;, }, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ), ;, this, ., yVector, =, new]
[=, new, Array2DRowRealMatrix, (, x, ), ;, this, ., yVector, =, new, ArrayRealVector, (, y, ), ;, }, protected, void]
[., xMatrix, =, new, Array2DRowRealMatrix, (, x, ), ;, this, ., yVector, =, new, ArrayRealVector, (, y, ), ;, }]
[;, this, ., yVector, =, new, ArrayRealVector, (, y, ), ;, }, protected, void, newYSampleData, (, double, [, ], y]
[), ;, this, ., yVector, =, new, ArrayRealVector, (, y, ), ;, }, protected, void, newYSampleData, (, double, [, ]]
[=, new, ArrayRealVector, (, y, ), ;, }, protected, void, newYSampleData, (, double, [, ], y, ), {, if, (]
[., yVector, =, new, ArrayRealVector, (, y, ), ;, }, protected, void, newYSampleData, (, double, [, ], y, ), {]
[;, }, protected, void, newYSampleData, (, double, [, ], y, ), {, if, (, y, ==, null, ), {, throw]
[), ;, }, protected, void, newYSampleData, (, double, [, ], y, ), {, if, (, y, ==, null, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, ==, 0, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, ==, 0, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, ==, 0, ), {, throw, new]
[;, }, if, (, y, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, this, .]
[), {, throw, new, NoDataException, (, ), ;, }, this, ., yVector, =, new, ArrayRealVector, (, y, ), ;, }]
[==, 0, ), {, throw, new, NoDataException, (, ), ;, }, this, ., yVector, =, new, ArrayRealVector, (, y, )]
[., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, this, ., yVector, =, new, ArrayRealVector, (]
[), {, throw, new, NoDataException, (, ), ;, }, this, ., yVector, =, new, ArrayRealVector, (, y, ), ;, }]
[;, }, this, ., yVector, =, new, ArrayRealVector, (, y, ), ;, }, protected, void, newXSampleData, (, double, [, ]]
[=, new, ArrayRealVector, (, y, ), ;, }, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {]
[., yVector, =, new, ArrayRealVector, (, y, ), ;, }, protected, void, newXSampleData, (, double, [, ], [, ], x]
[;, }, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, if, (, x, ==, null, )]
[), ;, }, protected, void, newXSampleData, (, double, [, ], [, ], x, ), {, if, (, x, ==, null]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, ==, 0, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw, new]
[;, }, if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, noIntercept, ), {, this, ., xMatrix, =, new, Array2DRowRealMatrix]
[==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, noIntercept, ), {, this, ., xMatrix, =]
[., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, noIntercept, ), {, this, .]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, noIntercept, ), {, this, ., xMatrix, =, new, Array2DRowRealMatrix]
[;, }, if, (, noIntercept, ), {, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ,, true, ), ;, }]
[), {, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, x, ,, true, ), ;, }, else, {, final, int, nVars]
[=, new, Array2DRowRealMatrix, (, x, ,, true, ), ;, }, else, {, final, int, nVars, =, x, [, 0, ]]
[., xMatrix, =, new, Array2DRowRealMatrix, (, x, ,, true, ), ;, }, else, {, final, int, nVars, =, x, []
[;, }, else, {, final, int, nVars, =, x, [, 0, ], ., length, ;, final, double, [, ], []
[,, true, ), ;, }, else, {, final, int, nVars, =, x, [, 0, ], ., length, ;, final, double]
[), ;, }, else, {, final, int, nVars, =, x, [, 0, ], ., length, ;, final, double, [, ]]
[;, final, double, [, ], [, ], xAug, =, new, double, [, x, ., length, ], [, nVars, +, 1]
[., length, ;, final, double, [, ], [, ], xAug, =, new, double, [, x, ., length, ], [, nVars]
[[, 0, ], ., length, ;, final, double, [, ], [, ], xAug, =, new, double, [, x, ., length]
[], ., length, ;, final, double, [, ], [, ], xAug, =, new, double, [, x, ., length, ], []
[;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (]
[], [, nVars, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;]
[., length, ], [, nVars, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <, x, .]
[], ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if]
[+, 1, ], ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, )]
[], ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if]
[;, i, <, x, ., length, ;, i, ++, ), {, if, (, x, [, i, ], ., length, !=]
[;, i, ++, ), {, if, (, x, [, i, ], ., length, !=, nVars, ), {, throw, new, DimensionMismatchException]
[<, x, ., length, ;, i, ++, ), {, if, (, x, [, i, ], ., length, !=, nVars, )]
[;, i, ++, ), {, if, (, x, [, i, ], ., length, !=, nVars, ), {, throw, new, DimensionMismatchException]
[., length, ;, i, ++, ), {, if, (, x, [, i, ], ., length, !=, nVars, ), {, throw]
[), {, if, (, x, [, i, ], ., length, !=, nVars, ), {, throw, new, DimensionMismatchException, (, x, []
[++, ), {, if, (, x, [, i, ], ., length, !=, nVars, ), {, throw, new, DimensionMismatchException, (, x]
[), {, throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,, nVars, ), ;, }, xAug, [, i]
[!=, nVars, ), {, throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,, nVars, ), ;, }, xAug]
[., length, !=, nVars, ), {, throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,, nVars, ), ;]
[[, i, ], ., length, !=, nVars, ), {, throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,]
[], ., length, !=, nVars, ), {, throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,, nVars, )]
[), {, throw, new, DimensionMismatchException, (, x, [, i, ], ., length, ,, nVars, ), ;, }, xAug, [, i]
[;, }, xAug, [, i, ], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (, x, [, i, ]]
[,, nVars, ), ;, }, xAug, [, i, ], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (, x]
[., length, ,, nVars, ), ;, }, xAug, [, i, ], [, 0, ], =, 1.0d, ;, System, ., arraycopy]
[[, i, ], ., length, ,, nVars, ), ;, }, xAug, [, i, ], [, 0, ], =, 1.0d, ;]
[], ., length, ,, nVars, ), ;, }, xAug, [, i, ], [, 0, ], =, 1.0d, ;, System, .]
[), ;, }, xAug, [, i, ], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (, x, [, i]
[=, 1.0d, ;, System, ., arraycopy, (, x, [, i, ], ,, 0, ,, xAug, [, i, ], ,, 1]
[[, 0, ], =, 1.0d, ;, System, ., arraycopy, (, x, [, i, ], ,, 0, ,, xAug, [, i]
[[, i, ], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (, x, [, i, ], ,, 0, ,]
[], [, 0, ], =, 1.0d, ;, System, ., arraycopy, (, x, [, i, ], ,, 0, ,, xAug, []
[], =, 1.0d, ;, System, ., arraycopy, (, x, [, i, ], ,, 0, ,, xAug, [, i, ], ,]
[;, System, ., arraycopy, (, x, [, i, ], ,, 0, ,, xAug, [, i, ], ,, 1, ,, nVars]
[;, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, xAug, ,, false, ), ;, }, }, protected, void, validateSampleData, (]
[., arraycopy, (, x, [, i, ], ,, 0, ,, xAug, [, i, ], ,, 1, ,, nVars, ), ;]
[,, 0, ,, xAug, [, i, ], ,, 1, ,, nVars, ), ;, }, this, ., xMatrix, =, new, Array2DRowRealMatrix]
[[, i, ], ,, 0, ,, xAug, [, i, ], ,, 1, ,, nVars, ), ;, }, this, ., xMatrix]
[], ,, 0, ,, xAug, [, i, ], ,, 1, ,, nVars, ), ;, }, this, ., xMatrix, =, new]
[,, xAug, [, i, ], ,, 1, ,, nVars, ), ;, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, xAug]
[,, 1, ,, nVars, ), ;, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, xAug, ,, false, ), ;, }]
[[, i, ], ,, 1, ,, nVars, ), ;, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, xAug, ,, false]
[], ,, 1, ,, nVars, ), ;, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, xAug, ,, false, ), ;]
[,, nVars, ), ;, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, xAug, ,, false, ), ;, }, }, protected]
[), ;, }, this, ., xMatrix, =, new, Array2DRowRealMatrix, (, xAug, ,, false, ), ;, }, }, protected, void, validateSampleData]
[=, new, Array2DRowRealMatrix, (, xAug, ,, false, ), ;, }, }, protected, void, validateSampleData, (, double, [, ], [, ]]
[., xMatrix, =, new, Array2DRowRealMatrix, (, xAug, ,, false, ), ;, }, }, protected, void, validateSampleData, (, double, [, ]]
[;, }, }, protected, void, validateSampleData, (, double, [, ], [, ], x, ,, double, [, ], y, ), throws]
[,, false, ), ;, }, }, protected, void, validateSampleData, (, double, [, ], [, ], x, ,, double, [, ]]
[), ;, }, }, protected, void, validateSampleData, (, double, [, ], [, ], x, ,, double, [, ], y, )]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, !=, y, ., length, ), {]
[||, (, y, ==, null, ), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length]
[), ||, (, y, ==, null, ), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, .]
[==, null, ), ||, (, y, ==, null, ), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[), ||, (, y, ==, null, ), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, .]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, !=, y, ., length, ), {]
[), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, !=, y, ., length, )]
[==, null, ), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, !=, y, .]
[), ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, x, ., length, !=, y, ., length, )]
[;, }, if, (, x, ., length, !=, y, ., length, ), {, throw, new, DimensionMismatchException, (, y, ., length]
[), {, throw, new, DimensionMismatchException, (, y, ., length, ,, x, ., length, ), ;, }, if, (, x, .]
[!=, y, ., length, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,, x, ., length, ), ;, }]
[., length, !=, y, ., length, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,, x, ., length, )]
[), {, throw, new, DimensionMismatchException, (, y, ., length, ,, x, ., length, ), ;, }, if, (, x, .]
[., length, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,, x, ., length, ), ;, }, if, (]
[;, }, if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[,, x, ., length, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (]
[., length, ,, x, ., length, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw, new]
[), ;, }, if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if]
[., length, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, x, [, 0, ], ., length, +, 1, >]
[==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, x, [, 0, ], ., length, +]
[., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, x, [, 0, ], .]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, x, [, 0, ], ., length, +, 1, >]
[;, }, if, (, x, [, 0, ], ., length, +, 1, >, x, ., length, ), {, throw, new]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, [, 0, ], ., length]
[>, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, []
[+, 1, >, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,]
[., length, +, 1, >, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, .]
[[, 0, ], ., length, +, 1, >, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS]
[], ., length, +, 1, >, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x]
[>, x, ., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, []
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, [, 0, ], ., length]
[., length, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, [, 0, ]]
[;, }, }, protected, void, validateCovarianceData, (, double, [, ], [, ], x, ,, double, [, ], [, ], covariance]
[,, x, ., length, ,, x, [, 0, ], ., length, ), ;, }, }, protected, void, validateCovarianceData, (, double]
[., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, [, 0, ], ., length, ), ;, }, }, protected, void, validateCovarianceData]
[,, x, [, 0, ], ., length, ), ;, }, }, protected, void, validateCovarianceData, (, double, [, ], [, ]]
[., length, ,, x, [, 0, ], ., length, ), ;, }, }, protected, void, validateCovarianceData, (, double, [, ]]
[), ;, }, }, protected, void, validateCovarianceData, (, double, [, ], [, ], x, ,, double, [, ], [, ]]
[., length, ), ;, }, }, protected, void, validateCovarianceData, (, double, [, ], [, ], x, ,, double, [, ]]
[[, 0, ], ., length, ), ;, }, }, protected, void, validateCovarianceData, (, double, [, ], [, ], x, ,]
[], ., length, ), ;, }, }, protected, void, validateCovarianceData, (, double, [, ], [, ], x, ,, double, []
[), {, throw, new, DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }, if, (, covariance, .]
[!=, covariance, ., length, ), {, throw, new, DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }]
[., length, !=, covariance, ., length, ), {, throw, new, DimensionMismatchException, (, x, ., length, ,, covariance, ., length, )]
[), {, throw, new, DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }, if, (, covariance, .]
[., length, ), {, throw, new, DimensionMismatchException, (, x, ., length, ,, covariance, ., length, ), ;, }, if, (]
[;, }, if, (, covariance, ., length, >, 0, &&, covariance, ., length, !=, covariance, [, 0, ], ., length]
[,, covariance, ., length, ), ;, }, if, (, covariance, ., length, >, 0, &&, covariance, ., length, !=, covariance]
[., length, ,, covariance, ., length, ), ;, }, if, (, covariance, ., length, >, 0, &&, covariance, ., length]
[), ;, }, if, (, covariance, ., length, >, 0, &&, covariance, ., length, !=, covariance, [, 0, ], .]
[., length, ), ;, }, if, (, covariance, ., length, >, 0, &&, covariance, ., length, !=, covariance, [, 0]
[), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,, covariance, [, 0, ], ., length, ), ;, }, }]
[&&, covariance, ., length, !=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (, covariance, ., length]
[>, 0, &&, covariance, ., length, !=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (, covariance]
[., length, >, 0, &&, covariance, ., length, !=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException]
[&&, covariance, ., length, !=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (, covariance, ., length]
[), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,, covariance, [, 0, ], ., length, ), ;, }, }]
[!=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,, covariance, [, 0]
[., length, !=, covariance, [, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,, covariance]
[), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,, covariance, [, 0, ], ., length, ), ;, }, }]
[., length, ), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,, covariance, [, 0, ], ., length, ), ;]
[[, 0, ], ., length, ), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,, covariance, [, 0, ], .]
[], ., length, ), {, throw, new, NonSquareMatrixException, (, covariance, ., length, ,, covariance, [, 0, ], ., length, )]
[;, }, }, public, double, [, ], estimateRegressionParameters, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return, b]
[,, covariance, [, 0, ], ., length, ), ;, }, }, public, double, [, ], estimateRegressionParameters, (, ), {, RealVector]
[., length, ,, covariance, [, 0, ], ., length, ), ;, }, }, public, double, [, ], estimateRegressionParameters, (, )]
[), ;, }, }, public, double, [, ], estimateRegressionParameters, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return]
[., length, ), ;, }, }, public, double, [, ], estimateRegressionParameters, (, ), {, RealVector, b, =, calculateBeta, (, )]
[[, 0, ], ., length, ), ;, }, }, public, double, [, ], estimateRegressionParameters, (, ), {, RealVector, b, =]
[], ., length, ), ;, }, }, public, double, [, ], estimateRegressionParameters, (, ), {, RealVector, b, =, calculateBeta, (]
[;, return, b, ., toArray, (, ), ;, }, public, double, [, ], estimateResiduals, (, ), {, RealVector, b, =]
[;, }, public, double, [, ], estimateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, RealVector, e, =]
[., toArray, (, ), ;, }, public, double, [, ], estimateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, )]
[;, RealVector, e, =, yVector, ., subtract, (, xMatrix, ., operate, (, b, ), ), ;, return, e, ., toArray]
[;, return, e, ., toArray, (, ), ;, }, public, double, [, ], [, ], estimateRegressionParametersVariance, (, ), {, return]
[., subtract, (, xMatrix, ., operate, (, b, ), ), ;, return, e, ., toArray, (, ), ;, }, public]
[), ;, return, e, ., toArray, (, ), ;, }, public, double, [, ], [, ], estimateRegressionParametersVariance, (, ), {]
[., operate, (, b, ), ), ;, return, e, ., toArray, (, ), ;, }, public, double, [, ], []
[), ), ;, return, e, ., toArray, (, ), ;, }, public, double, [, ], [, ], estimateRegressionParametersVariance, (, )]
[;, }, public, double, [, ], [, ], estimateRegressionParametersVariance, (, ), {, return, calculateBetaVariance, (, ), ., getData, (, )]
[., toArray, (, ), ;, }, public, double, [, ], [, ], estimateRegressionParametersVariance, (, ), {, return, calculateBetaVariance, (, )]
[;, }, public, double, [, ], estimateRegressionParametersStandardErrors, (, ), {, double, [, ], [, ], betaVariance, =, estimateRegressionParametersVariance, (, )]
[., getData, (, ), ;, }, public, double, [, ], estimateRegressionParametersStandardErrors, (, ), {, double, [, ], [, ], betaVariance]
[;, double, sigma, =, calculateErrorVariance, (, ), ;, int, length, =, betaVariance, [, 0, ], ., length, ;, double, []
[;, int, length, =, betaVariance, [, 0, ], ., length, ;, double, [, ], result, =, new, double, [, length]
[;, double, [, ], result, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;, i]
[., length, ;, double, [, ], result, =, new, double, [, length, ], ;, for, (, int, i, =, 0]
[[, 0, ], ., length, ;, double, [, ], result, =, new, double, [, length, ], ;, for, (, int]
[], ., length, ;, double, [, ], result, =, new, double, [, length, ], ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, result, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, result, [, i]
[;, i, <, length, ;, i, ++, ), {, result, [, i, ], =, FastMath, ., sqrt, (, sigma, *]
[;, i, ++, ), {, result, [, i, ], =, FastMath, ., sqrt, (, sigma, *, betaVariance, [, i, ]]
[<, length, ;, i, ++, ), {, result, [, i, ], =, FastMath, ., sqrt, (, sigma, *, betaVariance, []
[;, i, ++, ), {, result, [, i, ], =, FastMath, ., sqrt, (, sigma, *, betaVariance, [, i, ]]
[), {, result, [, i, ], =, FastMath, ., sqrt, (, sigma, *, betaVariance, [, i, ], [, i, ]]
[++, ), {, result, [, i, ], =, FastMath, ., sqrt, (, sigma, *, betaVariance, [, i, ], [, i]
[=, FastMath, ., sqrt, (, sigma, *, betaVariance, [, i, ], [, i, ], ), ;, }, return, result, ;]
[[, i, ], =, FastMath, ., sqrt, (, sigma, *, betaVariance, [, i, ], [, i, ], ), ;, }]
[], =, FastMath, ., sqrt, (, sigma, *, betaVariance, [, i, ], [, i, ], ), ;, }, return, result]
[;, }, return, result, ;, }, public, double, estimateRegressandVariance, (, ), {, return, calculateYVariance, (, ), ;, }, public, double]
[., sqrt, (, sigma, *, betaVariance, [, i, ], [, i, ], ), ;, }, return, result, ;, }, public]
[), ;, }, return, result, ;, }, public, double, estimateRegressandVariance, (, ), {, return, calculateYVariance, (, ), ;, }, public]
[*, betaVariance, [, i, ], [, i, ], ), ;, }, return, result, ;, }, public, double, estimateRegressandVariance, (, )]
[), ;, }, return, result, ;, }, public, double, estimateRegressandVariance, (, ), {, return, calculateYVariance, (, ), ;, }, public]
[[, i, ], ), ;, }, return, result, ;, }, public, double, estimateRegressandVariance, (, ), {, return, calculateYVariance, (, )]
[[, i, ], [, i, ], ), ;, }, return, result, ;, }, public, double, estimateRegressandVariance, (, ), {, return]
[], [, i, ], ), ;, }, return, result, ;, }, public, double, estimateRegressandVariance, (, ), {, return, calculateYVariance, (]
[], ), ;, }, return, result, ;, }, public, double, estimateRegressandVariance, (, ), {, return, calculateYVariance, (, ), ;, }]
[;, }, public, double, estimateRegressandVariance, (, ), {, return, calculateYVariance, (, ), ;, }, public, double, estimateErrorVariance, (, ), {]
[;, }, public, double, estimateErrorVariance, (, ), {, return, calculateErrorVariance, (, ), ;, }, public, double, estimateRegressionStandardError, (, ), {]
[;, }, public, double, estimateRegressionStandardError, (, ), {, return, Math, ., sqrt, (, estimateErrorVariance, (, ), ), ;, }, protected]
[;, }, protected, abstract, RealVector, calculateBeta, (, ), ;, protected, abstract, RealMatrix, calculateBetaVariance, (, ), ;, protected, double, calculateYVariance, (]
[., sqrt, (, estimateErrorVariance, (, ), ), ;, }, protected, abstract, RealVector, calculateBeta, (, ), ;, protected, abstract, RealMatrix, calculateBetaVariance]
[), ;, }, protected, abstract, RealVector, calculateBeta, (, ), ;, protected, abstract, RealMatrix, calculateBetaVariance, (, ), ;, protected, double, calculateYVariance]
[;, }, protected, double, calculateErrorVariance, (, ), {, RealVector, residuals, =, calculateResiduals, (, ), ;, return, residuals, ., dotProduct, (]
[., evaluate, (, yVector, ., toArray, (, ), ), ;, }, protected, double, calculateErrorVariance, (, ), {, RealVector, residuals, =]
[), ;, }, protected, double, calculateErrorVariance, (, ), {, RealVector, residuals, =, calculateResiduals, (, ), ;, return, residuals, ., dotProduct]
[., toArray, (, ), ), ;, }, protected, double, calculateErrorVariance, (, ), {, RealVector, residuals, =, calculateResiduals, (, ), ;]
[;, return, residuals, ., dotProduct, (, residuals, ), /, (, xMatrix, ., getRowDimension, (, ), -, xMatrix, ., getColumnDimension, (]
[;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return, yVector, ., subtract, (]
[/, (, xMatrix, ., getRowDimension, (, ), -, xMatrix, ., getColumnDimension, (, ), ), ;, }, protected, RealVector, calculateResiduals, (]
[., dotProduct, (, residuals, ), /, (, xMatrix, ., getRowDimension, (, ), -, xMatrix, ., getColumnDimension, (, ), ), ;]
[), /, (, xMatrix, ., getRowDimension, (, ), -, xMatrix, ., getColumnDimension, (, ), ), ;, }, protected, RealVector, calculateResiduals]
[;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return, yVector, ., subtract, (]
[), ;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return, yVector, ., subtract]
[-, xMatrix, ., getColumnDimension, (, ), ), ;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector, b, =, calculateBeta, (]
[., getRowDimension, (, ), -, xMatrix, ., getColumnDimension, (, ), ), ;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector]
[), ;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;, return, yVector, ., subtract]
[., getColumnDimension, (, ), ), ;, }, protected, RealVector, calculateResiduals, (, ), {, RealVector, b, =, calculateBeta, (, ), ;]
[;, return, yVector, ., subtract, (, xMatrix, ., operate, (, b, ), ), ;, }, }]
[;, }, }]
[., subtract, (, xMatrix, ., operate, (, b, ), ), ;, }, }]
[), ;, }, }]
[., operate, (, b, ), ), ;, }, }]
[), ), ;, }, }]
