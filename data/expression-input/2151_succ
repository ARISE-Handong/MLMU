[,, components, ), ;, }, public, MixtureMultivariateRealDistribution, (, RandomGenerator, rng, ,, List, <, Pair, <, Double, ,, T, >, >]
[), ;, }, public, MixtureMultivariateRealDistribution, (, RandomGenerator, rng, ,, List, <, Pair, <, Double, ,, T, >, >, components, )]
[,, components, ., get, (, 0, ), ., getSecond, (, ), ., getDimension, (, ), ), ;, final, int, numComp]
[), ;, final, int, numComp, =, components, ., size, (, ), ;, final, int, dim, =, getDimension, (, ), ;]
[., getDimension, (, ), ), ;, final, int, numComp, =, components, ., size, (, ), ;, final, int, dim, =]
[., getSecond, (, ), ., getDimension, (, ), ), ;, final, int, numComp, =, components, ., size, (, ), ;]
[., get, (, 0, ), ., getSecond, (, ), ., getDimension, (, ), ), ;, final, int, numComp, =, components]
[), ., getSecond, (, ), ., getDimension, (, ), ), ;, final, int, numComp, =, components, ., size, (, )]
[;, final, int, dim, =, getDimension, (, ), ;, double, weightSum, =, 0, ;, for, (, int, i, =, 0]
[., size, (, ), ;, final, int, dim, =, getDimension, (, ), ;, double, weightSum, =, 0, ;, for, (]
[;, double, weightSum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, numComp, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, numComp, ;, i, ++, ), {, final, Pair, <, Double]
[;, i, <, numComp, ;, i, ++, ), {, final, Pair, <, Double, ,, T, >, comp, =, components, .]
[;, i, ++, ), {, final, Pair, <, Double, ,, T, >, comp, =, components, ., get, (, i, )]
[<, numComp, ;, i, ++, ), {, final, Pair, <, Double, ,, T, >, comp, =, components, ., get, (]
[;, i, ++, ), {, final, Pair, <, Double, ,, T, >, comp, =, components, ., get, (, i, )]
[), {, final, Pair, <, Double, ,, T, >, comp, =, components, ., get, (, i, ), ;, if, (]
[++, ), {, final, Pair, <, Double, ,, T, >, comp, =, components, ., get, (, i, ), ;, if]
[;, if, (, comp, ., getSecond, (, ), ., getDimension, (, ), !=, dim, ), {, throw, new, DimensionMismatchException, (]
[., get, (, i, ), ;, if, (, comp, ., getSecond, (, ), ., getDimension, (, ), !=, dim, )]
[), ;, if, (, comp, ., getSecond, (, ), ., getDimension, (, ), !=, dim, ), {, throw, new, DimensionMismatchException]
[), {, throw, new, DimensionMismatchException, (, comp, ., getSecond, (, ), ., getDimension, (, ), ,, dim, ), ;, }]
[!=, dim, ), {, throw, new, DimensionMismatchException, (, comp, ., getSecond, (, ), ., getDimension, (, ), ,, dim, )]
[., getDimension, (, ), !=, dim, ), {, throw, new, DimensionMismatchException, (, comp, ., getSecond, (, ), ., getDimension, (]
[., getSecond, (, ), ., getDimension, (, ), !=, dim, ), {, throw, new, DimensionMismatchException, (, comp, ., getSecond, (]
[), {, throw, new, DimensionMismatchException, (, comp, ., getSecond, (, ), ., getDimension, (, ), ,, dim, ), ;, }]
[;, }, if, (, comp, ., getFirst, (, ), <, 0, ), {, throw, new, NotPositiveException, (, comp, ., getFirst]
[,, dim, ), ;, }, if, (, comp, ., getFirst, (, ), <, 0, ), {, throw, new, NotPositiveException, (]
[., getDimension, (, ), ,, dim, ), ;, }, if, (, comp, ., getFirst, (, ), <, 0, ), {]
[., getSecond, (, ), ., getDimension, (, ), ,, dim, ), ;, }, if, (, comp, ., getFirst, (, )]
[), ;, }, if, (, comp, ., getFirst, (, ), <, 0, ), {, throw, new, NotPositiveException, (, comp, .]
[), {, throw, new, NotPositiveException, (, comp, ., getFirst, (, ), ), ;, }, weightSum, +=, comp, ., getFirst, (]
[<, 0, ), {, throw, new, NotPositiveException, (, comp, ., getFirst, (, ), ), ;, }, weightSum, +=, comp, .]
[., getFirst, (, ), <, 0, ), {, throw, new, NotPositiveException, (, comp, ., getFirst, (, ), ), ;, }]
[), {, throw, new, NotPositiveException, (, comp, ., getFirst, (, ), ), ;, }, weightSum, +=, comp, ., getFirst, (]
[;, }, weightSum, +=, comp, ., getFirst, (, ), ;, }, if, (, Double, ., isInfinite, (, weightSum, ), )]
[), ;, }, weightSum, +=, comp, ., getFirst, (, ), ;, }, if, (, Double, ., isInfinite, (, weightSum, )]
[., getFirst, (, ), ), ;, }, weightSum, +=, comp, ., getFirst, (, ), ;, }, if, (, Double, .]
[+=, comp, ., getFirst, (, ), ;, }, if, (, Double, ., isInfinite, (, weightSum, ), ), {, throw, new]
[;, }, if, (, Double, ., isInfinite, (, weightSum, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, )]
[., getFirst, (, ), ;, }, if, (, Double, ., isInfinite, (, weightSum, ), ), {, throw, new, MathArithmeticException, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, distribution, =, new, ArrayList, <, T, >, (]
[., isInfinite, (, weightSum, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, distribution, =, new]
[), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, distribution, =, new, ArrayList, <, T, >]
[;, }, distribution, =, new, ArrayList, <, T, >, (, ), ;, weight, =, new, double, [, numComp, ], ;]
[), ;, }, distribution, =, new, ArrayList, <, T, >, (, ), ;, weight, =, new, double, [, numComp, ]]
[., OVERFLOW, ), ;, }, distribution, =, new, ArrayList, <, T, >, (, ), ;, weight, =, new, double, []
[=, new, ArrayList, <, T, >, (, ), ;, weight, =, new, double, [, numComp, ], ;, for, (, int]
[;, weight, =, new, double, [, numComp, ], ;, for, (, int, i, =, 0, ;, i, <, numComp, ;]
[=, new, double, [, numComp, ], ;, for, (, int, i, =, 0, ;, i, <, numComp, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, numComp, ;, i, ++, ), {, final, Pair, <, Double]
[], ;, for, (, int, i, =, 0, ;, i, <, numComp, ;, i, ++, ), {, final, Pair, <]
[;, i, <, numComp, ;, i, ++, ), {, final, Pair, <, Double, ,, T, >, comp, =, components, .]
[;, i, ++, ), {, final, Pair, <, Double, ,, T, >, comp, =, components, ., get, (, i, )]
[<, numComp, ;, i, ++, ), {, final, Pair, <, Double, ,, T, >, comp, =, components, ., get, (]
[;, i, ++, ), {, final, Pair, <, Double, ,, T, >, comp, =, components, ., get, (, i, )]
[), {, final, Pair, <, Double, ,, T, >, comp, =, components, ., get, (, i, ), ;, weight, []
[++, ), {, final, Pair, <, Double, ,, T, >, comp, =, components, ., get, (, i, ), ;, weight]
[;, weight, [, i, ], =, comp, ., getFirst, (, ), /, weightSum, ;, distribution, ., add, (, comp, .]
[., get, (, i, ), ;, weight, [, i, ], =, comp, ., getFirst, (, ), /, weightSum, ;, distribution]
[), ;, weight, [, i, ], =, comp, ., getFirst, (, ), /, weightSum, ;, distribution, ., add, (, comp]
[=, comp, ., getFirst, (, ), /, weightSum, ;, distribution, ., add, (, comp, ., getSecond, (, ), ), ;]
[[, i, ], =, comp, ., getFirst, (, ), /, weightSum, ;, distribution, ., add, (, comp, ., getSecond, (]
[], =, comp, ., getFirst, (, ), /, weightSum, ;, distribution, ., add, (, comp, ., getSecond, (, ), )]
[;, distribution, ., add, (, comp, ., getSecond, (, ), ), ;, }, }, public, double, density, (, final, double]
[/, weightSum, ;, distribution, ., add, (, comp, ., getSecond, (, ), ), ;, }, }, public, double, density, (]
[., getFirst, (, ), /, weightSum, ;, distribution, ., add, (, comp, ., getSecond, (, ), ), ;, }, }]
[;, distribution, ., add, (, comp, ., getSecond, (, ), ), ;, }, }, public, double, density, (, final, double]
[;, }, }, public, double, density, (, final, double, [, ], values, ), {, double, p, =, 0, ;, for]
[., add, (, comp, ., getSecond, (, ), ), ;, }, }, public, double, density, (, final, double, [, ]]
[), ;, }, }, public, double, density, (, final, double, [, ], values, ), {, double, p, =, 0, ;]
[., getSecond, (, ), ), ;, }, }, public, double, density, (, final, double, [, ], values, ), {, double]
[;, for, (, int, i, =, 0, ;, i, <, weight, ., length, ;, i, ++, ), {, p, +=]
[;, i, <, weight, ., length, ;, i, ++, ), {, p, +=, weight, [, i, ], *, distribution, .]
[;, i, ++, ), {, p, +=, weight, [, i, ], *, distribution, ., get, (, i, ), ., density]
[<, weight, ., length, ;, i, ++, ), {, p, +=, weight, [, i, ], *, distribution, ., get, (]
[;, i, ++, ), {, p, +=, weight, [, i, ], *, distribution, ., get, (, i, ), ., density]
[., length, ;, i, ++, ), {, p, +=, weight, [, i, ], *, distribution, ., get, (, i, )]
[), {, p, +=, weight, [, i, ], *, distribution, ., get, (, i, ), ., density, (, values, )]
[++, ), {, p, +=, weight, [, i, ], *, distribution, ., get, (, i, ), ., density, (, values]
[+=, weight, [, i, ], *, distribution, ., get, (, i, ), ., density, (, values, ), ;, }, return]
[;, }, return, p, ;, }, @, Override, public, double, [, ], sample, (, ), {, double, [, ], vals]
[*, distribution, ., get, (, i, ), ., density, (, values, ), ;, }, return, p, ;, }, @, Override]
[[, i, ], *, distribution, ., get, (, i, ), ., density, (, values, ), ;, }, return, p, ;]
[], *, distribution, ., get, (, i, ), ., density, (, values, ), ;, }, return, p, ;, }, @]
[;, }, return, p, ;, }, @, Override, public, double, [, ], sample, (, ), {, double, [, ], vals]
[., density, (, values, ), ;, }, return, p, ;, }, @, Override, public, double, [, ], sample, (, )]
[., get, (, i, ), ., density, (, values, ), ;, }, return, p, ;, }, @, Override, public, double]
[), ., density, (, values, ), ;, }, return, p, ;, }, @, Override, public, double, [, ], sample, (]
[), ;, }, return, p, ;, }, @, Override, public, double, [, ], sample, (, ), {, double, [, ]]
[;, }, @, Override, public, double, [, ], sample, (, ), {, double, [, ], vals, =, null, ;, final]
[;, final, double, randomValue, =, random, ., nextDouble, (, ), ;, double, sum, =, 0, ;, for, (, int, i]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, weight, ., length, ;, i]
[., nextDouble, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, weight]
[;, for, (, int, i, =, 0, ;, i, <, weight, ., length, ;, i, ++, ), {, sum, +=]
[;, i, <, weight, ., length, ;, i, ++, ), {, sum, +=, weight, [, i, ], ;, if, (]
[;, i, ++, ), {, sum, +=, weight, [, i, ], ;, if, (, randomValue, <=, sum, ), {, vals]
[<, weight, ., length, ;, i, ++, ), {, sum, +=, weight, [, i, ], ;, if, (, randomValue, <=]
[;, i, ++, ), {, sum, +=, weight, [, i, ], ;, if, (, randomValue, <=, sum, ), {, vals]
[., length, ;, i, ++, ), {, sum, +=, weight, [, i, ], ;, if, (, randomValue, <=, sum, )]
[), {, sum, +=, weight, [, i, ], ;, if, (, randomValue, <=, sum, ), {, vals, =, distribution, .]
[++, ), {, sum, +=, weight, [, i, ], ;, if, (, randomValue, <=, sum, ), {, vals, =, distribution]
[+=, weight, [, i, ], ;, if, (, randomValue, <=, sum, ), {, vals, =, distribution, ., get, (, i]
[;, if, (, randomValue, <=, sum, ), {, vals, =, distribution, ., get, (, i, ), ., sample, (, )]
[[, i, ], ;, if, (, randomValue, <=, sum, ), {, vals, =, distribution, ., get, (, i, ), .]
[], ;, if, (, randomValue, <=, sum, ), {, vals, =, distribution, ., get, (, i, ), ., sample, (]
[), {, vals, =, distribution, ., get, (, i, ), ., sample, (, ), ;, break, ;, }, }, if]
[<=, sum, ), {, vals, =, distribution, ., get, (, i, ), ., sample, (, ), ;, break, ;, }]
[), {, vals, =, distribution, ., get, (, i, ), ., sample, (, ), ;, break, ;, }, }, if]
[=, distribution, ., get, (, i, ), ., sample, (, ), ;, break, ;, }, }, if, (, vals, ==]
[;, break, ;, }, }, if, (, vals, ==, null, ), {, vals, =, distribution, ., get, (, weight, .]
[., sample, (, ), ;, break, ;, }, }, if, (, vals, ==, null, ), {, vals, =, distribution, .]
[., get, (, i, ), ., sample, (, ), ;, break, ;, }, }, if, (, vals, ==, null, )]
[), ., sample, (, ), ;, break, ;, }, }, if, (, vals, ==, null, ), {, vals, =, distribution]
[), {, vals, =, distribution, ., get, (, weight, ., length, -, 1, ), ., sample, (, ), ;, }]
[==, null, ), {, vals, =, distribution, ., get, (, weight, ., length, -, 1, ), ., sample, (, )]
[), {, vals, =, distribution, ., get, (, weight, ., length, -, 1, ), ., sample, (, ), ;, }]
[=, distribution, ., get, (, weight, ., length, -, 1, ), ., sample, (, ), ;, }, return, vals, ;]
[;, }, return, vals, ;, }, @, Override, public, void, reseedRandomGenerator, (, long, seed, ), {, super, ., reseedRandomGenerator, (]
[., sample, (, ), ;, }, return, vals, ;, }, @, Override, public, void, reseedRandomGenerator, (, long, seed, ), {]
[., get, (, weight, ., length, -, 1, ), ., sample, (, ), ;, }, return, vals, ;, }, @]
[), ., sample, (, ), ;, }, return, vals, ;, }, @, Override, public, void, reseedRandomGenerator, (, long, seed, )]
[-, 1, ), ., sample, (, ), ;, }, return, vals, ;, }, @, Override, public, void, reseedRandomGenerator, (, long]
[., length, -, 1, ), ., sample, (, ), ;, }, return, vals, ;, }, @, Override, public, void, reseedRandomGenerator]
[), ., sample, (, ), ;, }, return, vals, ;, }, @, Override, public, void, reseedRandomGenerator, (, long, seed, )]
[;, }, @, Override, public, void, reseedRandomGenerator, (, long, seed, ), {, super, ., reseedRandomGenerator, (, seed, ), ;, for]
[;, for, (, int, i, =, 0, ;, i, <, distribution, ., size, (, ), ;, i, ++, ), {]
[., reseedRandomGenerator, (, seed, ), ;, for, (, int, i, =, 0, ;, i, <, distribution, ., size, (, )]
[), ;, for, (, int, i, =, 0, ;, i, <, distribution, ., size, (, ), ;, i, ++, )]
[;, i, <, distribution, ., size, (, ), ;, i, ++, ), {, distribution, ., get, (, i, ), .]
[;, i, ++, ), {, distribution, ., get, (, i, ), ., reseedRandomGenerator, (, i, +, 1, +, seed, )]
[<, distribution, ., size, (, ), ;, i, ++, ), {, distribution, ., get, (, i, ), ., reseedRandomGenerator, (]
[;, i, ++, ), {, distribution, ., get, (, i, ), ., reseedRandomGenerator, (, i, +, 1, +, seed, )]
[., size, (, ), ;, i, ++, ), {, distribution, ., get, (, i, ), ., reseedRandomGenerator, (, i, +]
[), {, distribution, ., get, (, i, ), ., reseedRandomGenerator, (, i, +, 1, +, seed, ), ;, }, }]
[++, ), {, distribution, ., get, (, i, ), ., reseedRandomGenerator, (, i, +, 1, +, seed, ), ;, }]
[;, }, }, public, List, <, Pair, <, Double, ,, T, >, >, getComponents, (, ), {, final, List, <]
[., reseedRandomGenerator, (, i, +, 1, +, seed, ), ;, }, }, public, List, <, Pair, <, Double, ,, T]
[., get, (, i, ), ., reseedRandomGenerator, (, i, +, 1, +, seed, ), ;, }, }, public, List, <]
[), ., reseedRandomGenerator, (, i, +, 1, +, seed, ), ;, }, }, public, List, <, Pair, <, Double, ,]
[), ;, }, }, public, List, <, Pair, <, Double, ,, T, >, >, getComponents, (, ), {, final, List]
[+, seed, ), ;, }, }, public, List, <, Pair, <, Double, ,, T, >, >, getComponents, (, ), {]
[+, 1, +, seed, ), ;, }, }, public, List, <, Pair, <, Double, ,, T, >, >, getComponents, (]
[+, seed, ), ;, }, }, public, List, <, Pair, <, Double, ,, T, >, >, getComponents, (, ), {]
[), ;, }, }, public, List, <, Pair, <, Double, ,, T, >, >, getComponents, (, ), {, final, List]
[;, for, (, int, i, =, 0, ;, i, <, weight, ., length, ;, i, ++, ), {, list, .]
[), ;, for, (, int, i, =, 0, ;, i, <, weight, ., length, ;, i, ++, ), {, list]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, weight, ., length, ;, i, ++, )]
[;, i, <, weight, ., length, ;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,]
[;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,, T, >, (, weight, [, i]
[<, weight, ., length, ;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,, T, >]
[;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,, T, >, (, weight, [, i]
[., length, ;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,, T, >, (, weight]
[), {, list, ., add, (, new, Pair, <, Double, ,, T, >, (, weight, [, i, ], ,, distribution]
[++, ), {, list, ., add, (, new, Pair, <, Double, ,, T, >, (, weight, [, i, ], ,]
[;, }, return, list, ;, }, }]
[., add, (, new, Pair, <, Double, ,, T, >, (, weight, [, i, ], ,, distribution, ., get, (]
[), ;, }, return, list, ;, }, }]
[,, distribution, ., get, (, i, ), ), ), ;, }, return, list, ;, }, }]
[[, i, ], ,, distribution, ., get, (, i, ), ), ), ;, }, return, list, ;, }, }]
[], ,, distribution, ., get, (, i, ), ), ), ;, }, return, list, ;, }, }]
[), ), ;, }, return, list, ;, }, }]
[., get, (, i, ), ), ), ;, }, return, list, ;, }, }]
[), ), ), ;, }, return, list, ;, }, }]
[;, }, }]
