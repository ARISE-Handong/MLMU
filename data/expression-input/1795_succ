[;, private, ControlFlowGraph, <, Node, >, cfg, ;, private, List, <, Candidate, >, candidates, ;, private, MustBeReachingVariableDef, reachingDef, ;, private]
[., newHashSet, (, ), ;, private, ControlFlowGraph, <, Node, >, cfg, ;, private, List, <, Candidate, >, candidates, ;, private]
[;, public, FlowSensitiveInlineVariables, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public, void, enterScope]
[), {, return, false, ;, }, if, (, n, ., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (, n, )]
[==, null, ), {, return, false, ;, }, if, (, n, ., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (]
[), {, return, false, ;, }, if, (, n, ., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (, n, )]
[;, }, if, (, n, ., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (, n, ), ), {, return, true]
[), {, return, true, ;, }, if, (, n, ., isNew, (, ), &&, NodeUtil, ., constructorCallHasSideEffects, (, n, )]
[&&, NodeUtil, ., functionCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (, n, ., isNew, (, )]
[., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (, n]
[), {, return, true, ;, }, if, (, n, ., isNew, (, ), &&, NodeUtil, ., constructorCallHasSideEffects, (, n, )]
[., functionCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (, n, ., isNew, (, ), &&, NodeUtil]
[), ), {, return, true, ;, }, if, (, n, ., isNew, (, ), &&, NodeUtil, ., constructorCallHasSideEffects, (, n]
[;, }, if, (, n, ., isNew, (, ), &&, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ), {, return, true]
[), {, return, true, ;, }, if, (, n, ., isDelProp, (, ), ), {, return, true, ;, }, for]
[&&, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (, n, ., isDelProp, (, )]
[., isNew, (, ), &&, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (, n]
[), {, return, true, ;, }, if, (, n, ., isDelProp, (, ), ), {, return, true, ;, }, for]
[., constructorCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (, n, ., isDelProp, (, ), ), {]
[), ), {, return, true, ;, }, if, (, n, ., isDelProp, (, ), ), {, return, true, ;, }]
[;, }, if, (, n, ., isDelProp, (, ), ), {, return, true, ;, }, for, (, Node, c, =]
[), {, return, true, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[., isDelProp, (, ), ), {, return, true, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, )]
[;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[;, c, =, c, ., getNext, (, ), ), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c]
[;, c, =, c, ., getNext, (, ), ), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&]
[=, c, ., getNext, (, ), ), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&, apply, (]
[), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&, apply, (, c, ), ), {, return, true]
[., getNext, (, ), ), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&, apply, (, c, )]
[), {, return, true, ;, }, }, return, false, ;, }, }, ;, public, FlowSensitiveInlineVariables, (, AbstractCompiler, compiler, ), {]
[&&, apply, (, c, ), ), {, return, true, ;, }, }, return, false, ;, }, }, ;, public, FlowSensitiveInlineVariables]
[&&, apply, (, c, ), ), {, return, true, ;, }, }, return, false, ;, }, }, ;, public, FlowSensitiveInlineVariables]
[., isEnteringNewCfgNode, (, c, ), &&, apply, (, c, ), ), {, return, true, ;, }, }, return, false, ;]
[), &&, apply, (, c, ), ), {, return, true, ;, }, }, return, false, ;, }, }, ;, public]
[), {, return, true, ;, }, }, return, false, ;, }, }, ;, public, FlowSensitiveInlineVariables, (, AbstractCompiler, compiler, ), {]
[), ), {, return, true, ;, }, }, return, false, ;, }, }, ;, public, FlowSensitiveInlineVariables, (, AbstractCompiler, compiler, )]
[;, }, }, return, false, ;, }, }, ;, public, FlowSensitiveInlineVariables, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[;, }, }, ;, public, FlowSensitiveInlineVariables, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override]
[=, compiler, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (]
[., compiler, =, compiler, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, .]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), )]
[), {, return, ;, }, if, (, LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <, t, ., getScope, (, ), ., getVarCount, (, )]
[., inGlobalScope, (, ), ), {, return, ;, }, if, (, LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <, t, ., getScope, (, )]
[), {, return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, Preconditions, .]
[<, t, ., getScope, (, ), ., getVarCount, (, ), ), {, return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis]
[., MAX_VARIABLES_TO_ANALYZE, <, t, ., getScope, (, ), ., getVarCount, (, ), ), {, return, ;, }, ControlFlowAnalysis, cfa, =]
[), {, return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, Preconditions, .]
[., getVarCount, (, ), ), {, return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true]
[., getScope, (, ), ., getVarCount, (, ), ), {, return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler]
[;, Preconditions, ., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), ), ;, cfa, ., process, (]
[,, false, ,, true, ), ;, Preconditions, ., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), )]
[,, true, ), ;, Preconditions, ., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), ), ;, cfa]
[), ;, Preconditions, ., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), ), ;, cfa, ., process]
[;, cfa, ., process, (, null, ,, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, cfg, =]
[., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), ), ;, cfa, ., process, (, null, ,]
[), ;, cfa, ., process, (, null, ,, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, cfg]
[., isFunction, (, ), ), ;, cfa, ., process, (, null, ,, t, ., getScopeRoot, (, ), ., getLastChild, (]
[., getScopeRoot, (, ), ., isFunction, (, ), ), ;, cfa, ., process, (, null, ,, t, ., getScopeRoot, (]
[;, cfg, =, cfa, ., getCfg, (, ), ;, reachingDef, =, new, MustBeReachingVariableDef, (, cfg, ,, t, ., getScope, (]
[., process, (, null, ,, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, cfg, =, cfa, .]
[,, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, cfg, =, cfa, ., getCfg, (, ), ;]
[), ;, cfg, =, cfa, ., getCfg, (, ), ;, reachingDef, =, new, MustBeReachingVariableDef, (, cfg, ,, t, ., getScope]
[., getLastChild, (, ), ), ;, cfg, =, cfa, ., getCfg, (, ), ;, reachingDef, =, new, MustBeReachingVariableDef, (, cfg]
[., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, cfg, =, cfa, ., getCfg, (, ), ;, reachingDef, =]
[=, cfa, ., getCfg, (, ), ;, reachingDef, =, new, MustBeReachingVariableDef, (, cfg, ,, t, ., getScope, (, ), ,]
[;, reachingDef, =, new, MustBeReachingVariableDef, (, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;, reachingDef, ., analyze]
[., getCfg, (, ), ;, reachingDef, =, new, MustBeReachingVariableDef, (, cfg, ,, t, ., getScope, (, ), ,, compiler, )]
[=, new, MustBeReachingVariableDef, (, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;, reachingDef, ., analyze, (, )]
[;, reachingDef, ., analyze, (, ), ;, candidates, =, Lists, ., newLinkedList, (, ), ;, new, NodeTraversal, (, compiler, ,]
[,, t, ., getScope, (, ), ,, compiler, ), ;, reachingDef, ., analyze, (, ), ;, candidates, =, Lists, .]
[,, compiler, ), ;, reachingDef, ., analyze, (, ), ;, candidates, =, Lists, ., newLinkedList, (, ), ;, new, NodeTraversal]
[., getScope, (, ), ,, compiler, ), ;, reachingDef, ., analyze, (, ), ;, candidates, =, Lists, ., newLinkedList, (]
[), ;, reachingDef, ., analyze, (, ), ;, candidates, =, Lists, ., newLinkedList, (, ), ;, new, NodeTraversal, (, compiler]
[;, candidates, =, Lists, ., newLinkedList, (, ), ;, new, NodeTraversal, (, compiler, ,, new, GatherCandiates, (, ), ), .]
[., analyze, (, ), ;, candidates, =, Lists, ., newLinkedList, (, ), ;, new, NodeTraversal, (, compiler, ,, new, GatherCandiates]
[=, Lists, ., newLinkedList, (, ), ;, new, NodeTraversal, (, compiler, ,, new, GatherCandiates, (, ), ), ., traverse, (]
[;, new, NodeTraversal, (, compiler, ,, new, GatherCandiates, (, ), ), ., traverse, (, t, ., getScopeRoot, (, ), .]
[., newLinkedList, (, ), ;, new, NodeTraversal, (, compiler, ,, new, GatherCandiates, (, ), ), ., traverse, (, t, .]
[;, reachingUses, =, new, MaybeReachingVariableUse, (, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;, reachingUses, ., analyze]
[., traverse, (, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, reachingUses, =, new, MaybeReachingVariableUse, (, cfg]
[,, new, GatherCandiates, (, ), ), ., traverse, (, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;]
[), ., traverse, (, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, reachingUses, =, new, MaybeReachingVariableUse, (]
[), ;, reachingUses, =, new, MaybeReachingVariableUse, (, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;, reachingUses, .]
[., getLastChild, (, ), ), ;, reachingUses, =, new, MaybeReachingVariableUse, (, cfg, ,, t, ., getScope, (, ), ,, compiler]
[., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, reachingUses, =, new, MaybeReachingVariableUse, (, cfg, ,, t, ., getScope]
[=, new, MaybeReachingVariableUse, (, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;, reachingUses, ., analyze, (, )]
[;, reachingUses, ., analyze, (, ), ;, for, (, Candidate, c, :, candidates, ), {, if, (, c, ., canInline]
[,, t, ., getScope, (, ), ,, compiler, ), ;, reachingUses, ., analyze, (, ), ;, for, (, Candidate, c]
[,, compiler, ), ;, reachingUses, ., analyze, (, ), ;, for, (, Candidate, c, :, candidates, ), {, if, (]
[., getScope, (, ), ,, compiler, ), ;, reachingUses, ., analyze, (, ), ;, for, (, Candidate, c, :, candidates]
[), ;, reachingUses, ., analyze, (, ), ;, for, (, Candidate, c, :, candidates, ), {, if, (, c, .]
[;, for, (, Candidate, c, :, candidates, ), {, if, (, c, ., canInline, (, t, ., getScope, (, )]
[., analyze, (, ), ;, for, (, Candidate, c, :, candidates, ), {, if, (, c, ., canInline, (, t]
[), {, if, (, c, ., canInline, (, t, ., getScope, (, ), ), ), {, c, ., inlineVariable, (]
[), {, c, ., inlineVariable, (, ), ;, if, (, !, c, ., defMetadata, ., depends, ., isEmpty, (, )]
[., canInline, (, t, ., getScope, (, ), ), ), {, c, ., inlineVariable, (, ), ;, if, (, !]
[), ), {, c, ., inlineVariable, (, ), ;, if, (, !, c, ., defMetadata, ., depends, ., isEmpty, (]
[., getScope, (, ), ), ), {, c, ., inlineVariable, (, ), ;, if, (, !, c, ., defMetadata, .]
[;, if, (, !, c, ., defMetadata, ., depends, ., isEmpty, (, ), ), {, inlinedNewDependencies, ., add, (, t]
[., inlineVariable, (, ), ;, if, (, !, c, ., defMetadata, ., depends, ., isEmpty, (, ), ), {, inlinedNewDependencies]
[), {, inlinedNewDependencies, ., add, (, t, ., getScope, (, ), ., getVar, (, c, ., varName, ), ), ;]
[), {, inlinedNewDependencies, ., add, (, t, ., getScope, (, ), ., getVar, (, c, ., varName, ), ), ;]
[., isEmpty, (, ), ), {, inlinedNewDependencies, ., add, (, t, ., getScope, (, ), ., getVar, (, c, .]
[., depends, ., isEmpty, (, ), ), {, inlinedNewDependencies, ., add, (, t, ., getScope, (, ), ., getVar, (]
[., defMetadata, ., depends, ., isEmpty, (, ), ), {, inlinedNewDependencies, ., add, (, t, ., getScope, (, ), .]
[;, }, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, void]
[., add, (, t, ., getScope, (, ), ., getVar, (, c, ., varName, ), ), ;, }, }, }]
[), ;, }, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public]
[., getVar, (, c, ., varName, ), ), ;, }, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal]
[., getScope, (, ), ., getVar, (, c, ., varName, ), ), ;, }, }, }, }, @, Override, public]
[), ), ;, }, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override]
[., varName, ), ), ;, }, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, }, private]
[., traverseRoots, (, externs, ,, root, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), ., traverseRoots, (, externs, ,, root, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[,, this, ), ), ., traverseRoots, (, externs, ,, root, ), ;, }, @, Override, public, void, visit, (, NodeTraversal]
[), ), ., traverseRoots, (, externs, ,, root, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[,, root, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, }]
[;, if, (, graphNode, ==, null, ), {, return, ;, }, FlowState, <, MustDef, >, state, =, graphNode, ., getAnnotation]
[., getDirectedGraphNode, (, n, ), ;, if, (, graphNode, ==, null, ), {, return, ;, }, FlowState, <, MustDef, >]
[), ;, if, (, graphNode, ==, null, ), {, return, ;, }, FlowState, <, MustDef, >, state, =, graphNode, .]
[), {, return, ;, }, FlowState, <, MustDef, >, state, =, graphNode, ., getAnnotation, (, ), ;, final, MustDef, defs]
[==, null, ), {, return, ;, }, FlowState, <, MustDef, >, state, =, graphNode, ., getAnnotation, (, ), ;, final]
[), {, return, ;, }, FlowState, <, MustDef, >, state, =, graphNode, ., getAnnotation, (, ), ;, final, MustDef, defs]
[;, final, MustDef, defs, =, state, ., getIn, (, ), ;, final, Node, cfgNode, =, n, ;, AbstractCfgNodeTraversalCallback, gatherCb, =]
[., getAnnotation, (, ), ;, final, MustDef, defs, =, state, ., getIn, (, ), ;, final, Node, cfgNode, =, n]
[;, final, Node, cfgNode, =, n, ;, AbstractCfgNodeTraversalCallback, gatherCb, =, new, AbstractCfgNodeTraversalCallback, (, ), {, @, Override, public, void, visit]
[., getIn, (, ), ;, final, Node, cfgNode, =, n, ;, AbstractCfgNodeTraversalCallback, gatherCb, =, new, AbstractCfgNodeTraversalCallback, (, ), {, @]
[;, AbstractCfgNodeTraversalCallback, gatherCb, =, new, AbstractCfgNodeTraversalCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ,, gatherCb, ), ;, }, }, private, class, Candidate, {, private, final]
[), {, if, (, parent, ==, null, ), {, return, ;, }, if, (, (, NodeUtil, ., isAssignmentOp, (, parent]
[., isName, (, ), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (, (, NodeUtil]
[), {, return, ;, }, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, )]
[==, null, ), {, return, ;, }, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild]
[), {, return, ;, }, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, )]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (, compiler, ., getCodingConvention, (]
[||, parent, ., isCatch, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;]
[||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), {, return, ;, }, String, name, =]
[||, parent, ., isDec, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), {]
[||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, parent, ., isParamList, (, ), ||, parent]
[||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, parent]
[), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||]
[&&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (]
[., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, )]
[), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, parent, ., isInc]
[), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||]
[==, n, ), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (]
[., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||]
[), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||]
[||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, parent, ., isParamList, (, ), ||, parent]
[., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, parent, ., isParamList]
[||, parent, ., isDec, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), {]
[., isInc, (, ), ||, parent, ., isDec, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch]
[||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), {, return, ;, }, String, name, =]
[., isDec, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), {, return, ;]
[||, parent, ., isCatch, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;]
[., isParamList, (, ), ||, parent, ., isCatch, (, ), ), {, return, ;, }, String, name, =, n, .]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (, compiler, ., getCodingConvention, (]
[., isCatch, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ), {, return, ;, }, Definition, def]
[., getString, (, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ), {, return]
[), {, return, ;, }, Definition, def, =, reachingDef, ., getDef, (, name, ,, cfgNode, ), ;, if, (, def]
[., isExported, (, name, ), ), {, return, ;, }, Definition, def, =, reachingDef, ., getDef, (, name, ,, cfgNode]
[., getCodingConvention, (, ), ., isExported, (, name, ), ), {, return, ;, }, Definition, def, =, reachingDef, ., getDef]
[), ), {, return, ;, }, Definition, def, =, reachingDef, ., getDef, (, name, ,, cfgNode, ), ;, if, (]
[;, if, (, def, !=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add, (]
[., getDef, (, name, ,, cfgNode, ), ;, if, (, def, !=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def]
[,, cfgNode, ), ;, if, (, def, !=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {, candidates]
[), ;, if, (, def, !=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add]
[), {, candidates, ., add, (, new, Candidate, (, name, ,, def, ,, n, ,, cfgNode, ), ), ;, }]
[&&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add, (, new, Candidate, (, name, ,, def]
[!=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add, (, new, Candidate, (, name]
[&&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add, (, new, Candidate, (, name, ,, def]
[), {, candidates, ., add, (, new, Candidate, (, name, ,, def, ,, n, ,, cfgNode, ), ), ;, }]
[), {, candidates, ., add, (, new, Candidate, (, name, ,, def, ,, n, ,, cfgNode, ), ), ;, }]
[., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add, (, new, Candidate, (, name, ,, def, ,, n, ,]
[), ), {, candidates, ., add, (, new, Candidate, (, name, ,, def, ,, n, ,, cfgNode, ), ), ;]
[;, }, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ,, gatherCb, ), ;, }, }, private]
[., add, (, new, Candidate, (, name, ,, def, ,, n, ,, cfgNode, ), ), ;, }, }, }, }]
[), ;, }, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ,, gatherCb, ), ;, }, }]
[,, def, ,, n, ,, cfgNode, ), ), ;, }, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, n, ,, cfgNode, ), ), ;, }, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ,]
[,, cfgNode, ), ), ;, }, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ,, gatherCb, )]
[), ), ;, }, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ,, gatherCb, ), ;, }]
[;, }, }, private, class, Candidate, {, private, final, String, varName, ;, private, Node, def, ;, private, final, Definition, defMetadata]
[., traverse, (, compiler, ,, cfgNode, ,, gatherCb, ), ;, }, }, private, class, Candidate, {, private, final, String, varName]
[,, cfgNode, ,, gatherCb, ), ;, }, }, private, class, Candidate, {, private, final, String, varName, ;, private, Node, def]
[,, gatherCb, ), ;, }, }, private, class, Candidate, {, private, final, String, varName, ;, private, Node, def, ;, private]
[), ;, }, }, private, class, Candidate, {, private, final, String, varName, ;, private, Node, def, ;, private, final, Definition]
[;, this, ., varName, =, varName, ;, this, ., defMetadata, =, defMetadata, ;, this, ., use, =, use, ;, this]
[., checkArgument, (, use, ., isName, (, ), ), ;, this, ., varName, =, varName, ;, this, ., defMetadata, =]
[), ;, this, ., varName, =, varName, ;, this, ., defMetadata, =, defMetadata, ;, this, ., use, =, use, ;]
[., isName, (, ), ), ;, this, ., varName, =, varName, ;, this, ., defMetadata, =, defMetadata, ;, this, .]
[=, varName, ;, this, ., defMetadata, =, defMetadata, ;, this, ., use, =, use, ;, this, ., useCfgNode, =, useCfgNode]
[., varName, =, varName, ;, this, ., defMetadata, =, defMetadata, ;, this, ., use, =, use, ;, this, ., useCfgNode]
[;, this, ., defMetadata, =, defMetadata, ;, this, ., use, =, use, ;, this, ., useCfgNode, =, useCfgNode, ;, }]
[=, defMetadata, ;, this, ., use, =, use, ;, this, ., useCfgNode, =, useCfgNode, ;, }, private, Node, getDefCfgNode, (]
[., defMetadata, =, defMetadata, ;, this, ., use, =, use, ;, this, ., useCfgNode, =, useCfgNode, ;, }, private, Node]
[;, this, ., use, =, use, ;, this, ., useCfgNode, =, useCfgNode, ;, }, private, Node, getDefCfgNode, (, ), {]
[=, use, ;, this, ., useCfgNode, =, useCfgNode, ;, }, private, Node, getDefCfgNode, (, ), {, return, defMetadata, ., node]
[., use, =, use, ;, this, ., useCfgNode, =, useCfgNode, ;, }, private, Node, getDefCfgNode, (, ), {, return, defMetadata]
[;, this, ., useCfgNode, =, useCfgNode, ;, }, private, Node, getDefCfgNode, (, ), {, return, defMetadata, ., node, ;, }]
[=, useCfgNode, ;, }, private, Node, getDefCfgNode, (, ), {, return, defMetadata, ., node, ;, }, private, boolean, canInline, (]
[., useCfgNode, =, useCfgNode, ;, }, private, Node, getDefCfgNode, (, ), {, return, defMetadata, ., node, ;, }, private, boolean]
[;, }, private, Node, getDefCfgNode, (, ), {, return, defMetadata, ., node, ;, }, private, boolean, canInline, (, final, Scope]
[;, }, private, boolean, canInline, (, final, Scope, scope, ), {, if, (, getDefCfgNode, (, ), ., isFunction, (, )]
[., node, ;, }, private, boolean, canInline, (, final, Scope, scope, ), {, if, (, getDefCfgNode, (, ), ., isFunction]
[), {, return, false, ;, }, for, (, Var, dependency, :, defMetadata, ., depends, ), {, if, (, inlinedNewDependencies, .]
[., isFunction, (, ), ), {, return, false, ;, }, for, (, Var, dependency, :, defMetadata, ., depends, ), {]
[;, }, for, (, Var, dependency, :, defMetadata, ., depends, ), {, if, (, inlinedNewDependencies, ., contains, (, dependency, )]
[), {, if, (, inlinedNewDependencies, ., contains, (, dependency, ), ), {, return, false, ;, }, }, getDefinition, (, getDefCfgNode]
[., depends, ), {, if, (, inlinedNewDependencies, ., contains, (, dependency, ), ), {, return, false, ;, }, }, getDefinition]
[), {, return, false, ;, }, }, getDefinition, (, getDefCfgNode, (, ), ,, null, ), ;, getNumUseInUseCfgNode, (, useCfgNode, ,]
[., contains, (, dependency, ), ), {, return, false, ;, }, }, getDefinition, (, getDefCfgNode, (, ), ,, null, )]
[), ), {, return, false, ;, }, }, getDefinition, (, getDefCfgNode, (, ), ,, null, ), ;, getNumUseInUseCfgNode, (, useCfgNode]
[;, }, }, getDefinition, (, getDefCfgNode, (, ), ,, null, ), ;, getNumUseInUseCfgNode, (, useCfgNode, ,, null, ), ;, if]
[;, getNumUseInUseCfgNode, (, useCfgNode, ,, null, ), ;, if, (, def, ==, null, ), {, return, false, ;, }, if]
[,, null, ), ;, getNumUseInUseCfgNode, (, useCfgNode, ,, null, ), ;, if, (, def, ==, null, ), {, return, false]
[), ;, getNumUseInUseCfgNode, (, useCfgNode, ,, null, ), ;, if, (, def, ==, null, ), {, return, false, ;, }]
[;, if, (, def, ==, null, ), {, return, false, ;, }, if, (, def, ., isAssign, (, ), &&]
[,, null, ), ;, if, (, def, ==, null, ), {, return, false, ;, }, if, (, def, ., isAssign]
[), ;, if, (, def, ==, null, ), {, return, false, ;, }, if, (, def, ., isAssign, (, )]
[), {, return, false, ;, }, if, (, def, ., isAssign, (, ), &&, !, NodeUtil, ., isExprAssign, (, def]
[==, null, ), {, return, false, ;, }, if, (, def, ., isAssign, (, ), &&, !, NodeUtil, ., isExprAssign]
[), {, return, false, ;, }, if, (, def, ., isAssign, (, ), &&, !, NodeUtil, ., isExprAssign, (, def]
[;, }, if, (, def, ., isAssign, (, ), &&, !, NodeUtil, ., isExprAssign, (, def, ., getParent, (, )]
[), {, return, false, ;, }, if, (, checkRightOf, (, def, ,, getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, ), ), {]
[&&, !, NodeUtil, ., isExprAssign, (, def, ., getParent, (, ), ), ), {, return, false, ;, }, if, (]
[., isAssign, (, ), &&, !, NodeUtil, ., isExprAssign, (, def, ., getParent, (, ), ), ), {, return, false]
[), {, return, false, ;, }, if, (, checkRightOf, (, def, ,, getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, ), ), {]
[), {, return, false, ;, }, if, (, checkRightOf, (, def, ,, getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, ), ), {]
[., isExprAssign, (, def, ., getParent, (, ), ), ), {, return, false, ;, }, if, (, checkRightOf, (, def]
[), ), {, return, false, ;, }, if, (, checkRightOf, (, def, ,, getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, ), )]
[., getParent, (, ), ), ), {, return, false, ;, }, if, (, checkRightOf, (, def, ,, getDefCfgNode, (, )]
[;, }, if, (, checkRightOf, (, def, ,, getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, if, (, checkLeftOf, (, use, ,, useCfgNode, ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false]
[,, getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (, checkLeftOf, (, use, ,, useCfgNode]
[,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (, checkLeftOf, (, use, ,, useCfgNode, ,, SIDE_EFFECT_PREDICATE, ), )]
[), ), {, return, false, ;, }, if, (, checkLeftOf, (, use, ,, useCfgNode, ,, SIDE_EFFECT_PREDICATE, ), ), {, return]
[;, }, if, (, checkLeftOf, (, use, ,, useCfgNode, ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (]
[), {, return, false, ;, }, if, (, NodeUtil, ., mayHaveSideEffects, (, def, ., getLastChild, (, ), ,, compiler, )]
[,, useCfgNode, ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (, NodeUtil, ., mayHaveSideEffects, (, def, ., getLastChild]
[,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (, NodeUtil, ., mayHaveSideEffects, (, def, ., getLastChild, (, )]
[), ), {, return, false, ;, }, if, (, NodeUtil, ., mayHaveSideEffects, (, def, ., getLastChild, (, ), ,, compiler]
[;, }, if, (, NodeUtil, ., mayHaveSideEffects, (, def, ., getLastChild, (, ), ,, compiler, ), ), {, return, false]
[), {, return, false, ;, }, if, (, numUseWithinUseCfgNode, !=, 1, ), {, return, false, ;, }, if, (, NodeUtil]
[., mayHaveSideEffects, (, def, ., getLastChild, (, ), ,, compiler, ), ), {, return, false, ;, }, if, (, numUseWithinUseCfgNode]
[,, compiler, ), ), {, return, false, ;, }, if, (, numUseWithinUseCfgNode, !=, 1, ), {, return, false, ;, }]
[., getLastChild, (, ), ,, compiler, ), ), {, return, false, ;, }, if, (, numUseWithinUseCfgNode, !=, 1, ), {]
[), ), {, return, false, ;, }, if, (, numUseWithinUseCfgNode, !=, 1, ), {, return, false, ;, }, if, (]
[;, }, if, (, numUseWithinUseCfgNode, !=, 1, ), {, return, false, ;, }, if, (, NodeUtil, ., isWithinLoop, (, use]
[), {, return, false, ;, }, if, (, NodeUtil, ., isWithinLoop, (, use, ), ), {, return, false, ;, }]
[!=, 1, ), {, return, false, ;, }, if, (, NodeUtil, ., isWithinLoop, (, use, ), ), {, return, false]
[), {, return, false, ;, }, if, (, NodeUtil, ., isWithinLoop, (, use, ), ), {, return, false, ;, }]
[;, }, if, (, NodeUtil, ., isWithinLoop, (, use, ), ), {, return, false, ;, }, Collection, <, Node, >]
[), {, return, false, ;, }, Collection, <, Node, >, uses, =, reachingUses, ., getUses, (, varName, ,, getDefCfgNode, (]
[., isWithinLoop, (, use, ), ), {, return, false, ;, }, Collection, <, Node, >, uses, =, reachingUses, ., getUses]
[), ), {, return, false, ;, }, Collection, <, Node, >, uses, =, reachingUses, ., getUses, (, varName, ,, getDefCfgNode]
[;, }, Collection, <, Node, >, uses, =, reachingUses, ., getUses, (, varName, ,, getDefCfgNode, (, ), ), ;, if]
[;, if, (, uses, ., size, (, ), !=, 1, ), {, return, false, ;, }, if, (, NodeUtil, .]
[., getUses, (, varName, ,, getDefCfgNode, (, ), ), ;, if, (, uses, ., size, (, ), !=, 1, )]
[,, getDefCfgNode, (, ), ), ;, if, (, uses, ., size, (, ), !=, 1, ), {, return, false, ;]
[), ;, if, (, uses, ., size, (, ), !=, 1, ), {, return, false, ;, }, if, (, NodeUtil]
[), {, return, false, ;, }, if, (, NodeUtil, ., has, (, def, ., getLastChild, (, ), ,, new, Predicate]
[!=, 1, ), {, return, false, ;, }, if, (, NodeUtil, ., has, (, def, ., getLastChild, (, ), ,]
[., size, (, ), !=, 1, ), {, return, false, ;, }, if, (, NodeUtil, ., has, (, def, .]
[), {, return, false, ;, }, if, (, NodeUtil, ., has, (, def, ., getLastChild, (, ), ,, new, Predicate]
[;, }, if, (, NodeUtil, ., has, (, def, ., getLastChild, (, ), ,, new, Predicate, <, Node, >, (]
[), {, return, false, ;, }, if, (, NodeUtil, ., isStatementBlock, (, getDefCfgNode, (, ), ., getParent, (, ), )]
[., has, (, def, ., getLastChild, (, ), ,, new, Predicate, <, Node, >, (, ), {, @, Override, public]
[,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, switch]
[., getLastChild, (, ), ,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node]
[,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return]
[), {, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, case, Token, ., ARRAYLIT, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, case, Token, ., ARRAYLIT]
[:, case, Token, ., GETPROP, :, case, Token, ., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP]
[., GETELEM, :, case, Token, ., GETPROP, :, case, Token, ., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case, Token]
[:, case, Token, ., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP, :, case, Token, ., NEW]
[., GETPROP, :, case, Token, ., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP, :, case, Token]
[:, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP, :, case, Token, ., NEW, :, return, true, ;, case]
[., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP, :, case, Token, ., NEW, :, return, true]
[:, case, Token, ., REGEXP, :, case, Token, ., NEW, :, return, true, ;, case, Token, ., NAME, :, Var]
[., OBJECTLIT, :, case, Token, ., REGEXP, :, case, Token, ., NEW, :, return, true, ;, case, Token, ., NAME]
[:, case, Token, ., NEW, :, return, true, ;, case, Token, ., NAME, :, Var, var, =, scope, ., getOwnSlot]
[., REGEXP, :, case, Token, ., NEW, :, return, true, ;, case, Token, ., NAME, :, Var, var, =, scope]
[:, return, true, ;, case, Token, ., NAME, :, Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (]
[., NEW, :, return, true, ;, case, Token, ., NAME, :, Var, var, =, scope, ., getOwnSlot, (, input, .]
[;, case, Token, ., NAME, :, Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;]
[:, Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (, var, !=, null]
[., NAME, :, Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (, var]
[;, if, (, var, !=, null, &&, var, ., getParentNode, (, ), ., isCatch, (, ), ), {, return, true]
[., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (, var, !=, null, &&, var, ., getParentNode, (]
[), ;, if, (, var, !=, null, &&, var, ., getParentNode, (, ), ., isCatch, (, ), ), {, return]
[., getString, (, ), ), ;, if, (, var, !=, null, &&, var, ., getParentNode, (, ), ., isCatch, (]
[), {, return, true, ;, }, }, return, false, ;, }, }, ,, new, Predicate, <, Node, >, (, )]
[&&, var, ., getParentNode, (, ), ., isCatch, (, ), ), {, return, true, ;, }, }, return, false, ;]
[!=, null, &&, var, ., getParentNode, (, ), ., isCatch, (, ), ), {, return, true, ;, }, }, return]
[&&, var, ., getParentNode, (, ), ., isCatch, (, ), ), {, return, true, ;, }, }, return, false, ;]
[), {, return, true, ;, }, }, return, false, ;, }, }, ,, new, Predicate, <, Node, >, (, )]
[., isCatch, (, ), ), {, return, true, ;, }, }, return, false, ;, }, }, ,, new, Predicate, <]
[., getParentNode, (, ), ., isCatch, (, ), ), {, return, true, ;, }, }, return, false, ;, }, }]
[;, }, }, return, false, ;, }, }, ,, new, Predicate, <, Node, >, (, ), {, @, Override, public]
[;, }, }, ,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input]
[), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatementBlock, (, getDefCfgNode, (, ), ., getParent, (, )]
[;, }, }, ), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatementBlock, (, getDefCfgNode, (, ), .]
[;, }, }, ), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatementBlock, (, getDefCfgNode, (, ), .]
[., isFunction, (, ), ;, }, }, ), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatementBlock, (]
[;, }, if, (, NodeUtil, ., isStatementBlock, (, getDefCfgNode, (, ), ., getParent, (, ), ), &&, getDefCfgNode, (, )]
[), {, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, pathCheck, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch]
[&&, getDefCfgNode, (, ), ., getNext, (, ), !=, useCfgNode, ), {, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >]
[., isStatementBlock, (, getDefCfgNode, (, ), ., getParent, (, ), ), &&, getDefCfgNode, (, ), ., getNext, (, ), !=]
[), &&, getDefCfgNode, (, ), ., getNext, (, ), !=, useCfgNode, ), {, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch]
[., getParent, (, ), ), &&, getDefCfgNode, (, ), ., getNext, (, ), !=, useCfgNode, ), {, CheckPathsBetweenNodes, <, Node]
[), {, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, pathCheck, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch]
[!=, useCfgNode, ), {, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, pathCheck, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph]
[., getNext, (, ), !=, useCfgNode, ), {, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, pathCheck, =, new, CheckPathsBetweenNodes]
[), {, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, pathCheck, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch]
[;, if, (, pathCheck, ., somePathsSatisfyPredicate, (, ), ), {, return, false, ;, }, }, return, true, ;, }, private]
[,, cfg, ., getDirectedGraphNode, (, getDefCfgNode, (, ), ), ,, cfg, ., getDirectedGraphNode, (, useCfgNode, ), ,, SIDE_EFFECT_PREDICATE, ,, Predicates]
[,, cfg, ., getDirectedGraphNode, (, useCfgNode, ), ,, SIDE_EFFECT_PREDICATE, ,, Predicates, ., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch]
[., getDirectedGraphNode, (, getDefCfgNode, (, ), ), ,, cfg, ., getDirectedGraphNode, (, useCfgNode, ), ,, SIDE_EFFECT_PREDICATE, ,, Predicates, ., <]
[), ,, cfg, ., getDirectedGraphNode, (, useCfgNode, ), ,, SIDE_EFFECT_PREDICATE, ,, Predicates, ., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, .]
[,, SIDE_EFFECT_PREDICATE, ,, Predicates, ., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, alwaysTrue, (, ), ,, false]
[., getDirectedGraphNode, (, useCfgNode, ), ,, SIDE_EFFECT_PREDICATE, ,, Predicates, ., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >]
[), ,, SIDE_EFFECT_PREDICATE, ,, Predicates, ., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, alwaysTrue, (, ), ,]
[,, Predicates, ., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, alwaysTrue, (, ), ,, false, ), ;]
[,, false, ), ;, if, (, pathCheck, ., somePathsSatisfyPredicate, (, ), ), {, return, false, ;, }, }, return, true]
[., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, alwaysTrue, (, ), ,, false, ), ;, if, (]
[), ;, if, (, pathCheck, ., somePathsSatisfyPredicate, (, ), ), {, return, false, ;, }, }, return, true, ;, }]
[), {, return, false, ;, }, }, return, true, ;, }, private, void, inlineVariable, (, ), {, Node, defParent, =]
[., somePathsSatisfyPredicate, (, ), ), {, return, false, ;, }, }, return, true, ;, }, private, void, inlineVariable, (, )]
[;, }, }, return, true, ;, }, private, void, inlineVariable, (, ), {, Node, defParent, =, def, ., getParent, (]
[;, }, private, void, inlineVariable, (, ), {, Node, defParent, =, def, ., getParent, (, ), ;, Node, useParent, =]
[;, Node, useParent, =, use, ., getParent, (, ), ;, if, (, def, ., isAssign, (, ), ), {, Node]
[., getParent, (, ), ;, Node, useParent, =, use, ., getParent, (, ), ;, if, (, def, ., isAssign, (]
[;, if, (, def, ., isAssign, (, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;, rhs]
[., getParent, (, ), ;, if, (, def, ., isAssign, (, ), ), {, Node, rhs, =, def, ., getLastChild]
[), {, Node, rhs, =, def, ., getLastChild, (, ), ;, rhs, ., detachFromParent, (, ), ;, Preconditions, ., checkState]
[., isAssign, (, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;, rhs, ., detachFromParent, (, )]
[;, rhs, ., detachFromParent, (, ), ;, Preconditions, ., checkState, (, defParent, ., isExprResult, (, ), ), ;, while, (]
[., getLastChild, (, ), ;, rhs, ., detachFromParent, (, ), ;, Preconditions, ., checkState, (, defParent, ., isExprResult, (, )]
[;, Preconditions, ., checkState, (, defParent, ., isExprResult, (, ), ), ;, while, (, defParent, ., getParent, (, ), .]
[., detachFromParent, (, ), ;, Preconditions, ., checkState, (, defParent, ., isExprResult, (, ), ), ;, while, (, defParent, .]
[;, while, (, defParent, ., getParent, (, ), ., isLabel, (, ), ), {, defParent, =, defParent, ., getParent, (]
[., checkState, (, defParent, ., isExprResult, (, ), ), ;, while, (, defParent, ., getParent, (, ), ., isLabel, (]
[), ;, while, (, defParent, ., getParent, (, ), ., isLabel, (, ), ), {, defParent, =, defParent, ., getParent]
[., isExprResult, (, ), ), ;, while, (, defParent, ., getParent, (, ), ., isLabel, (, ), ), {, defParent]
[), {, defParent, =, defParent, ., getParent, (, ), ;, }, defParent, ., detachFromParent, (, ), ;, useParent, ., replaceChild]
[., isLabel, (, ), ), {, defParent, =, defParent, ., getParent, (, ), ;, }, defParent, ., detachFromParent, (, )]
[., getParent, (, ), ., isLabel, (, ), ), {, defParent, =, defParent, ., getParent, (, ), ;, }, defParent]
[=, defParent, ., getParent, (, ), ;, }, defParent, ., detachFromParent, (, ), ;, useParent, ., replaceChild, (, use, ,]
[;, }, defParent, ., detachFromParent, (, ), ;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, if]
[., getParent, (, ), ;, }, defParent, ., detachFromParent, (, ), ;, useParent, ., replaceChild, (, use, ,, rhs, )]
[;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, if, (, defParent, ., isVar, (, ), )]
[., detachFromParent, (, ), ;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, if, (, defParent, .]
[;, }, else, if, (, defParent, ., isVar, (, ), ), {, Node, rhs, =, def, ., getLastChild, (, )]
[., replaceChild, (, use, ,, rhs, ), ;, }, else, if, (, defParent, ., isVar, (, ), ), {, Node]
[,, rhs, ), ;, }, else, if, (, defParent, ., isVar, (, ), ), {, Node, rhs, =, def, .]
[), ;, }, else, if, (, defParent, ., isVar, (, ), ), {, Node, rhs, =, def, ., getLastChild, (]
[), {, Node, rhs, =, def, ., getLastChild, (, ), ;, def, ., removeChild, (, rhs, ), ;, useParent, .]
[., isVar, (, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;, def, ., removeChild, (, rhs]
[;, def, ., removeChild, (, rhs, ), ;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, {]
[., getLastChild, (, ), ;, def, ., removeChild, (, rhs, ), ;, useParent, ., replaceChild, (, use, ,, rhs, )]
[;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, {, Preconditions, ., checkState, (, false, ,, "No other definitions can be inlined."]
[., removeChild, (, rhs, ), ;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, {, Preconditions, .]
[), ;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, {, Preconditions, ., checkState, (, false, ,]
[;, }, else, {, Preconditions, ., checkState, (, false, ,, "No other definitions can be inlined.", ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[., replaceChild, (, use, ,, rhs, ), ;, }, else, {, Preconditions, ., checkState, (, false, ,, "No other definitions can be inlined.", ), ;]
[,, rhs, ), ;, }, else, {, Preconditions, ., checkState, (, false, ,, "No other definitions can be inlined.", ), ;, }, compiler, ., reportCodeChange]
[), ;, }, else, {, Preconditions, ., checkState, (, false, ,, "No other definitions can be inlined.", ), ;, }, compiler, ., reportCodeChange, (, )]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, getDefinition, (, Node, n, ,, Node, parent, ), {]
[., checkState, (, false, ,, "No other definitions can be inlined.", ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, getDefinition, (]
[,, "No other definitions can be inlined.", ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, getDefinition, (, Node, n, ,, Node]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, getDefinition, (, Node, n, ,, Node, parent, )]
[;, }, private, void, getDefinition, (, Node, n, ,, Node, parent, ), {, AbstractCfgNodeTraversalCallback, gatherCb, =, new, AbstractCfgNodeTraversalCallback, (, )]
[., reportCodeChange, (, ), ;, }, private, void, getDefinition, (, Node, n, ,, Node, parent, ), {, AbstractCfgNodeTraversalCallback, gatherCb, =]
[;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, ), ;, }, private, void, getNumUseInUseCfgNode, (, Node, n, ,]
[), {, case, Token, ., NAME, :, if, (, n, ., getString, (, ), ., equals, (, varName, ), &&]
[., getType, (, ), ), {, case, Token, ., NAME, :, if, (, n, ., getString, (, ), ., equals]
[:, if, (, n, ., getString, (, ), ., equals, (, varName, ), &&, n, ., hasChildren, (, ), )]
[., NAME, :, if, (, n, ., getString, (, ), ., equals, (, varName, ), &&, n, ., hasChildren, (]
[), {, def, =, n, ;, }, return, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild]
[&&, n, ., hasChildren, (, ), ), {, def, =, n, ;, }, return, ;, case, Token, ., ASSIGN, :]
[., equals, (, varName, ), &&, n, ., hasChildren, (, ), ), {, def, =, n, ;, }, return, ;]
[., getString, (, ), ., equals, (, varName, ), &&, n, ., hasChildren, (, ), ), {, def, =, n]
[), &&, n, ., hasChildren, (, ), ), {, def, =, n, ;, }, return, ;, case, Token, ., ASSIGN]
[), {, def, =, n, ;, }, return, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild]
[., hasChildren, (, ), ), {, def, =, n, ;, }, return, ;, case, Token, ., ASSIGN, :, Node, lhs]
[=, n, ;, }, return, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;]
[;, }, return, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[:, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), &&, lhs, .]
[., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), &&]
[;, if, (, lhs, ., isName, (, ), &&, lhs, ., getString, (, ), ., equals, (, varName, ), )]
[., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), &&, lhs, ., getString, (, ), ., equals]
[), {, def, =, n, ;, }, return, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n]
[&&, lhs, ., getString, (, ), ., equals, (, varName, ), ), {, def, =, n, ;, }, return, ;]
[., isName, (, ), &&, lhs, ., getString, (, ), ., equals, (, varName, ), ), {, def, =, n]
[), {, def, =, n, ;, }, return, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n]
[., equals, (, varName, ), ), {, def, =, n, ;, }, return, ;, }, }, }, ;, NodeTraversal, .]
[., getString, (, ), ., equals, (, varName, ), ), {, def, =, n, ;, }, return, ;, }, }]
[), ), {, def, =, n, ;, }, return, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,]
[=, n, ;, }, return, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, )]
[;, }, return, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, ), ;, }]
[;, }, private, void, getNumUseInUseCfgNode, (, Node, n, ,, Node, parant, ), {, AbstractCfgNodeTraversalCallback, gatherCb, =, new, AbstractCfgNodeTraversalCallback, (, )]
[., traverse, (, compiler, ,, n, ,, gatherCb, ), ;, }, private, void, getNumUseInUseCfgNode, (, Node, n, ,, Node, parant]
[,, n, ,, gatherCb, ), ;, }, private, void, getNumUseInUseCfgNode, (, Node, n, ,, Node, parant, ), {, AbstractCfgNodeTraversalCallback, gatherCb]
[,, gatherCb, ), ;, }, private, void, getNumUseInUseCfgNode, (, Node, n, ,, Node, parant, ), {, AbstractCfgNodeTraversalCallback, gatherCb, =, new]
[), ;, }, private, void, getNumUseInUseCfgNode, (, Node, n, ,, Node, parant, ), {, AbstractCfgNodeTraversalCallback, gatherCb, =, new, AbstractCfgNodeTraversalCallback, (]
[;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, ), ;, }, }, private, static, boolean, checkRightOf, (, Node]
[), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, ), ;]
[&&, !, (, parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==, n, ), ), )]
[&&, n, ., getString, (, ), ., equals, (, varName, ), &&, !, (, parent, ., isAssign, (, ), &&]
[., isName, (, ), &&, n, ., getString, (, ), ., equals, (, varName, ), &&, !, (, parent, .]
[&&, !, (, parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==, n, ), ), )]
[., equals, (, varName, ), &&, !, (, parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, )]
[., getString, (, ), ., equals, (, varName, ), &&, !, (, parent, ., isAssign, (, ), &&, (, parent]
[), &&, !, (, parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==, n, ), )]
[), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, ), ;]
[), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, ), ;]
[), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, )]
[&&, (, parent, ., getFirstChild, (, ), ==, n, ), ), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;]
[., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==, n, ), ), ), {, numUseWithinUseCfgNode, ++, ;]
[), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, )]
[), ), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb]
[==, n, ), ), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n]
[., getFirstChild, (, ), ==, n, ), ), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse]
[), ), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb]
[;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, ), ;, }, }, private, static]
[++, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, ), ;, }, }, private]
[;, }, }, private, static, boolean, checkRightOf, (, Node, n, ,, Node, expressionRoot, ,, Predicate, <, Node, >, predicate, )]
[., traverse, (, compiler, ,, n, ,, gatherCb, ), ;, }, }, private, static, boolean, checkRightOf, (, Node, n, ,]
[,, n, ,, gatherCb, ), ;, }, }, private, static, boolean, checkRightOf, (, Node, n, ,, Node, expressionRoot, ,, Predicate]
[,, gatherCb, ), ;, }, }, private, static, boolean, checkRightOf, (, Node, n, ,, Node, expressionRoot, ,, Predicate, <, Node]
[), ;, }, }, private, static, boolean, checkRightOf, (, Node, n, ,, Node, expressionRoot, ,, Predicate, <, Node, >, predicate]
[;, p, !=, expressionRoot, ;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p]
[;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getNext, (, )]
[!=, expressionRoot, ;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getNext]
[;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getNext, (, )]
[=, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getNext, (, ), ;, cur]
[), {, for, (, Node, cur, =, p, ., getNext, (, ), ;, cur, !=, null, ;, cur, =, cur]
[., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getNext, (, ), ;, cur, !=, null]
[;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (]
[., getNext, (, ), ;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, if, (]
[;, cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, ), ), {]
[!=, null, ;, cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, )]
[;, cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, ), ), {]
[=, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, ), ), {, return, true]
[), {, if, (, predicate, ., apply, (, cur, ), ), {, return, true, ;, }, }, }, return, false]
[., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, }, return, false, ;, }, private, static, boolean, checkLeftOf, (, Node, n, ,]
[., apply, (, cur, ), ), {, return, true, ;, }, }, }, return, false, ;, }, private, static, boolean]
[), ), {, return, true, ;, }, }, }, return, false, ;, }, private, static, boolean, checkLeftOf, (, Node, n]
[;, }, }, }, return, false, ;, }, private, static, boolean, checkLeftOf, (, Node, n, ,, Node, expressionRoot, ,, Predicate]
[;, }, private, static, boolean, checkLeftOf, (, Node, n, ,, Node, expressionRoot, ,, Predicate, <, Node, >, predicate, ), {]
[;, p, !=, expressionRoot, ;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p]
[., getParent, (, ), ;, p, !=, expressionRoot, ;, p, =, p, ., getParent, (, ), ), {, for, (]
[;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getParent, (, )]
[!=, expressionRoot, ;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getParent]
[;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getParent, (, )]
[=, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getParent, (, ), ., getFirstChild]
[), {, for, (, Node, cur, =, p, ., getParent, (, ), ., getFirstChild, (, ), ;, cur, !=, p]
[., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getParent, (, ), ., getFirstChild, (, )]
[;, cur, !=, p, ;, cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (]
[., getFirstChild, (, ), ;, cur, !=, p, ;, cur, =, cur, ., getNext, (, ), ), {, if, (]
[., getParent, (, ), ., getFirstChild, (, ), ;, cur, !=, p, ;, cur, =, cur, ., getNext, (, )]
[;, cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, ), ), {]
[!=, p, ;, cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, )]
[;, cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, ), ), {]
[=, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, ), ), {, return, true]
[), {, if, (, predicate, ., apply, (, cur, ), ), {, return, true, ;, }, }, }, return, false]
[., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, }, return, false, ;, }, }]
[., apply, (, cur, ), ), {, return, true, ;, }, }, }, return, false, ;, }, }]
[), ), {, return, true, ;, }, }, }, return, false, ;, }, }]
[;, }, }, }, return, false, ;, }, }]
[;, }, }]
