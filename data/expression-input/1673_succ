[;, private, final, BaseRuleFactory, <, BigDecimal, >, legendreHighPrecision, =, new, LegendreHighPrecisionRuleFactory, (, ), ;, private, final, BaseRuleFactory, <, Double, >]
[;, private, final, BaseRuleFactory, <, Double, >, hermite, =, new, HermiteRuleFactory, (, ), ;, public, GaussIntegrator, legendre, (, int, numberOfPoints]
[;, public, GaussIntegrator, legendre, (, int, numberOfPoints, ), {, return, new, GaussIntegrator, (, getRule, (, legendre, ,, numberOfPoints, ), )]
[;, }, public, GaussIntegrator, legendre, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new]
[), ;, }, public, GaussIntegrator, legendre, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return]
[,, numberOfPoints, ), ), ;, }, public, GaussIntegrator, legendre, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws]
[), ), ;, }, public, GaussIntegrator, legendre, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {]
[;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, getRule, (, legendreHighPrecision, ,]
[), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, getRule, (, legendreHighPrecision]
[,, lowerBound, ,, upperBound, ), ), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, {, return, new]
[,, numberOfPoints, ), ,, lowerBound, ,, upperBound, ), ), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException]
[), ,, lowerBound, ,, upperBound, ), ), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, {, return]
[,, upperBound, ), ), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (]
[), ), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, getRule, (]
[;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new]
[), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return]
[,, numberOfPoints, ), ), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws]
[), ), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {]
[;, }, public, SymmetricGaussIntegrator, hermite, (, int, numberOfPoints, ), {, return, new, SymmetricGaussIntegrator, (, getRule, (, hermite, ,, numberOfPoints, )]
[), ;, }, public, SymmetricGaussIntegrator, hermite, (, int, numberOfPoints, ), {, return, new, SymmetricGaussIntegrator, (, getRule, (, hermite, ,, numberOfPoints]
[,, lowerBound, ,, upperBound, ), ), ;, }, public, SymmetricGaussIntegrator, hermite, (, int, numberOfPoints, ), {, return, new, SymmetricGaussIntegrator, (]
[,, numberOfPoints, ), ,, lowerBound, ,, upperBound, ), ), ;, }, public, SymmetricGaussIntegrator, hermite, (, int, numberOfPoints, ), {, return]
[), ,, lowerBound, ,, upperBound, ), ), ;, }, public, SymmetricGaussIntegrator, hermite, (, int, numberOfPoints, ), {, return, new, SymmetricGaussIntegrator]
[,, upperBound, ), ), ;, }, public, SymmetricGaussIntegrator, hermite, (, int, numberOfPoints, ), {, return, new, SymmetricGaussIntegrator, (, getRule, (]
[), ), ;, }, public, SymmetricGaussIntegrator, hermite, (, int, numberOfPoints, ), {, return, new, SymmetricGaussIntegrator, (, getRule, (, hermite, ,]
[;, }, private, static, Pair, <, double, [, ], ,, double, [, ], >, getRule, (, BaseRuleFactory, <, ?, extends]
[), ;, }, private, static, Pair, <, double, [, ], ,, double, [, ], >, getRule, (, BaseRuleFactory, <, ?]
[,, numberOfPoints, ), ), ;, }, private, static, Pair, <, double, [, ], ,, double, [, ], >, getRule, (]
[), ), ;, }, private, static, Pair, <, double, [, ], ,, double, [, ], >, getRule, (, BaseRuleFactory, <]
[;, }, private, static, Pair, <, double, [, ], ,, double, [, ], >, transform, (, Pair, <, double, []
[., getRule, (, numberOfPoints, ), ;, }, private, static, Pair, <, double, [, ], ,, double, [, ], >, transform]
[), ;, }, private, static, Pair, <, double, [, ], ,, double, [, ], >, transform, (, Pair, <, double]
[;, final, double, [, ], weights, =, rule, ., getSecond, (, ), ;, final, double, scale, =, (, b, -]
[., getFirst, (, ), ;, final, double, [, ], weights, =, rule, ., getSecond, (, ), ;, final, double, scale]
[;, final, double, scale, =, (, b, -, a, ), /, 2, ;, final, double, shift, =, a, +, scale]
[., getSecond, (, ), ;, final, double, scale, =, (, b, -, a, ), /, 2, ;, final, double, shift]
[;, final, double, shift, =, a, +, scale, ;, for, (, int, i, =, 0, ;, i, <, points, .]
[/, 2, ;, final, double, shift, =, a, +, scale, ;, for, (, int, i, =, 0, ;, i, <]
[), /, 2, ;, final, double, shift, =, a, +, scale, ;, for, (, int, i, =, 0, ;, i]
[-, a, ), /, 2, ;, final, double, shift, =, a, +, scale, ;, for, (, int, i, =, 0]
[), /, 2, ;, final, double, shift, =, a, +, scale, ;, for, (, int, i, =, 0, ;, i]
[;, final, double, shift, =, a, +, scale, ;, for, (, int, i, =, 0, ;, i, <, points, .]
[;, for, (, int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {, points, []
[+, scale, ;, for, (, int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {, points, []
[;, i, <, points, ., length, ;, i, ++, ), {, points, [, i, ], =, points, [, i, ]]
[;, i, ++, ), {, points, [, i, ], =, points, [, i, ], *, scale, +, shift, ;, weights]
[<, points, ., length, ;, i, ++, ), {, points, [, i, ], =, points, [, i, ], *, scale]
[;, i, ++, ), {, points, [, i, ], =, points, [, i, ], *, scale, +, shift, ;, weights]
[., length, ;, i, ++, ), {, points, [, i, ], =, points, [, i, ], *, scale, +, shift]
[), {, points, [, i, ], =, points, [, i, ], *, scale, +, shift, ;, weights, [, i, ]]
[++, ), {, points, [, i, ], =, points, [, i, ], *, scale, +, shift, ;, weights, [, i]
[=, points, [, i, ], *, scale, +, shift, ;, weights, [, i, ], *=, scale, ;, }, return, new]
[[, i, ], =, points, [, i, ], *, scale, +, shift, ;, weights, [, i, ], *=, scale, ;]
[], =, points, [, i, ], *, scale, +, shift, ;, weights, [, i, ], *=, scale, ;, }, return]
[;, weights, [, i, ], *=, scale, ;, }, return, new, Pair, <, double, [, ], ,, double, [, ]]
[+, shift, ;, weights, [, i, ], *=, scale, ;, }, return, new, Pair, <, double, [, ], ,, double]
[*, scale, +, shift, ;, weights, [, i, ], *=, scale, ;, }, return, new, Pair, <, double, [, ]]
[[, i, ], *, scale, +, shift, ;, weights, [, i, ], *=, scale, ;, }, return, new, Pair, <]
[], *, scale, +, shift, ;, weights, [, i, ], *=, scale, ;, }, return, new, Pair, <, double, []
[+, shift, ;, weights, [, i, ], *=, scale, ;, }, return, new, Pair, <, double, [, ], ,, double]
[;, weights, [, i, ], *=, scale, ;, }, return, new, Pair, <, double, [, ], ,, double, [, ]]
[*=, scale, ;, }, return, new, Pair, <, double, [, ], ,, double, [, ], >, (, points, ,, weights]
[[, i, ], *=, scale, ;, }, return, new, Pair, <, double, [, ], ,, double, [, ], >, (]
[], *=, scale, ;, }, return, new, Pair, <, double, [, ], ,, double, [, ], >, (, points, ,]
[;, }, return, new, Pair, <, double, [, ], ,, double, [, ], >, (, points, ,, weights, ), ;]
[;, }, }]
[,, weights, ), ;, }, }]
[), ;, }, }]
