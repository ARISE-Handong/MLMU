[;, private, static, final, long, serialVersionUID, =, -, 1221965979403477668L, ;, private, final, double, alpha, ;, private, final, double, beta, ;]
[;, private, final, double, alpha, ;, private, final, double, beta, ;, private, double, z, ;, private, final, double, solverAbsoluteAccuracy, ;]
[;, private, final, double, alpha, ;, private, final, double, beta, ;, private, double, z, ;, private, final, double, solverAbsoluteAccuracy, ;]
[,, beta, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, BetaDistribution, (, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, BetaDistribution, (, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, this, (]
[), ;, }, public, BetaDistribution, (, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c]
[,, alpha, ,, beta, ,, inverseCumAccuracy, ), ;, }, public, BetaDistribution, (, RandomGenerator, rng, ,, double, alpha, ,, double, beta]
[,, beta, ,, inverseCumAccuracy, ), ;, }, public, BetaDistribution, (, RandomGenerator, rng, ,, double, alpha, ,, double, beta, ,, double]
[,, inverseCumAccuracy, ), ;, }, public, BetaDistribution, (, RandomGenerator, rng, ,, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, )]
[), ;, }, public, BetaDistribution, (, RandomGenerator, rng, ,, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, super]
[), ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, z, =, Double, ., NaN, ;]
[=, alpha, ;, this, ., beta, =, beta, ;, z, =, Double, ., NaN, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }]
[., alpha, =, alpha, ;, this, ., beta, =, beta, ;, z, =, Double, ., NaN, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy]
[;, this, ., beta, =, beta, ;, z, =, Double, ., NaN, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double]
[=, beta, ;, z, =, Double, ., NaN, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getAlpha, (, ), {]
[., beta, =, beta, ;, z, =, Double, ., NaN, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getAlpha, (]
[;, z, =, Double, ., NaN, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getAlpha, (, ), {, return, alpha]
[=, Double, ., NaN, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getAlpha, (, ), {, return, alpha, ;, }]
[;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getAlpha, (, ), {, return, alpha, ;, }, public, double, getBeta, (]
[., NaN, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getAlpha, (, ), {, return, alpha, ;, }, public, double]
[=, inverseCumAccuracy, ;, }, public, double, getAlpha, (, ), {, return, alpha, ;, }, public, double, getBeta, (, ), {]
[;, }, public, double, getAlpha, (, ), {, return, alpha, ;, }, public, double, getBeta, (, ), {, return, beta]
[;, }, public, double, getBeta, (, ), {, return, beta, ;, }, private, void, recomputeZ, (, ), {, if, (]
[;, }, private, void, recomputeZ, (, ), {, if, (, Double, ., isNaN, (, z, ), ), {, z, =]
[), {, z, =, Gamma, ., logGamma, (, alpha, ), +, Gamma, ., logGamma, (, beta, ), -, Gamma, .]
[., isNaN, (, z, ), ), {, z, =, Gamma, ., logGamma, (, alpha, ), +, Gamma, ., logGamma, (]
[), ), {, z, =, Gamma, ., logGamma, (, alpha, ), +, Gamma, ., logGamma, (, beta, ), -, Gamma]
[=, Gamma, ., logGamma, (, alpha, ), +, Gamma, ., logGamma, (, beta, ), -, Gamma, ., logGamma, (, alpha]
[;, }, }, public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (, x, <, 0]
[-, Gamma, ., logGamma, (, alpha, +, beta, ), ;, }, }, public, double, density, (, double, x, ), {]
[+, Gamma, ., logGamma, (, beta, ), -, Gamma, ., logGamma, (, alpha, +, beta, ), ;, }, }, public]
[., logGamma, (, alpha, ), +, Gamma, ., logGamma, (, beta, ), -, Gamma, ., logGamma, (, alpha, +, beta]
[), +, Gamma, ., logGamma, (, beta, ), -, Gamma, ., logGamma, (, alpha, +, beta, ), ;, }, }]
[-, Gamma, ., logGamma, (, alpha, +, beta, ), ;, }, }, public, double, density, (, double, x, ), {]
[., logGamma, (, beta, ), -, Gamma, ., logGamma, (, alpha, +, beta, ), ;, }, }, public, double, density]
[), -, Gamma, ., logGamma, (, alpha, +, beta, ), ;, }, }, public, double, density, (, double, x, )]
[;, }, }, public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (, x, <, 0]
[., logGamma, (, alpha, +, beta, ), ;, }, }, public, double, density, (, double, x, ), {, recomputeZ, (]
[), ;, }, }, public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (, x, <]
[+, beta, ), ;, }, }, public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (]
[), ;, }, }, public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (, x, <]
[;, if, (, x, <, 0, ||, x, >, 1, ), {, return, 0, ;, }, else, if, (, x]
[), {, return, 0, ;, }, else, if, (, x, ==, 0, ), {, if, (, alpha, <, 1, )]
[||, x, >, 1, ), {, return, 0, ;, }, else, if, (, x, ==, 0, ), {, if, (]
[<, 0, ||, x, >, 1, ), {, return, 0, ;, }, else, if, (, x, ==, 0, ), {]
[||, x, >, 1, ), {, return, 0, ;, }, else, if, (, x, ==, 0, ), {, if, (]
[), {, return, 0, ;, }, else, if, (, x, ==, 0, ), {, if, (, alpha, <, 1, )]
[>, 1, ), {, return, 0, ;, }, else, if, (, x, ==, 0, ), {, if, (, alpha, <]
[), {, return, 0, ;, }, else, if, (, x, ==, 0, ), {, if, (, alpha, <, 1, )]
[;, }, else, if, (, x, ==, 0, ), {, if, (, alpha, <, 1, ), {, throw, new, NumberIsTooSmallException]
[), {, if, (, alpha, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,, 1]
[==, 0, ), {, if, (, alpha, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha]
[), {, if, (, alpha, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,, 1]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,, 1, ,, false, ), ;, }, return, 0]
[<, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,, 1, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,, 1, ,, false, ), ;, }, return, 0]
[;, }, return, 0, ;, }, else, if, (, x, ==, 1, ), {, if, (, beta, <, 1, )]
[,, alpha, ,, 1, ,, false, ), ;, }, return, 0, ;, }, else, if, (, x, ==, 1, )]
[., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,, 1, ,, false, ), ;, }, return, 0, ;, }, else, if, (, x, ==]
[,, 1, ,, false, ), ;, }, return, 0, ;, }, else, if, (, x, ==, 1, ), {, if]
[,, false, ), ;, }, return, 0, ;, }, else, if, (, x, ==, 1, ), {, if, (, beta]
[), ;, }, return, 0, ;, }, else, if, (, x, ==, 1, ), {, if, (, beta, <, 1]
[;, }, else, if, (, x, ==, 1, ), {, if, (, beta, <, 1, ), {, throw, new, NumberIsTooSmallException]
[), {, if, (, beta, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta, ,, 1]
[==, 1, ), {, if, (, beta, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta]
[), {, if, (, beta, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta, ,, 1]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta, ,, 1, ,, false, ), ;, }, return, 0]
[<, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta, ,, 1, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta, ,, 1, ,, false, ), ;, }, return, 0]
[;, }, return, 0, ;, }, else, {, double, logX, =, FastMath, ., log, (, x, ), ;, double, log1mX]
[,, beta, ,, 1, ,, false, ), ;, }, return, 0, ;, }, else, {, double, logX, =, FastMath, .]
[., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta, ,, 1, ,, false, ), ;, }, return, 0, ;, }, else, {, double, logX, =]
[,, 1, ,, false, ), ;, }, return, 0, ;, }, else, {, double, logX, =, FastMath, ., log, (]
[,, false, ), ;, }, return, 0, ;, }, else, {, double, logX, =, FastMath, ., log, (, x, )]
[), ;, }, return, 0, ;, }, else, {, double, logX, =, FastMath, ., log, (, x, ), ;, double]
[;, }, else, {, double, logX, =, FastMath, ., log, (, x, ), ;, double, log1mX, =, FastMath, ., log1p]
[;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return, FastMath, ., exp, (, (, alpha, -]
[., log, (, x, ), ;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return, FastMath, .]
[), ;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return, FastMath, ., exp, (, (, alpha]
[;, return, FastMath, ., exp, (, (, alpha, -, 1, ), *, logX, +, (, beta, -, 1, ), *]
[., log1p, (, -, x, ), ;, return, FastMath, ., exp, (, (, alpha, -, 1, ), *, logX, +]
[), ;, return, FastMath, ., exp, (, (, alpha, -, 1, ), *, logX, +, (, beta, -, 1, )]
[), ;, return, FastMath, ., exp, (, (, alpha, -, 1, ), *, logX, +, (, beta, -, 1, )]
[;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {, return, 0]
[., exp, (, (, alpha, -, 1, ), *, logX, +, (, beta, -, 1, ), *, log1mX, -, z]
[), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {, return]
[-, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, )]
[+, (, beta, -, 1, ), *, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x]
[*, logX, +, (, beta, -, 1, ), *, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability, (]
[), *, logX, +, (, beta, -, 1, ), *, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability]
[-, 1, ), *, logX, +, (, beta, -, 1, ), *, log1mX, -, z, ), ;, }, }, public]
[), *, logX, +, (, beta, -, 1, ), *, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability]
[+, (, beta, -, 1, ), *, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x]
[-, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, )]
[*, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=]
[), *, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x]
[-, 1, ), *, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if]
[), *, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x]
[-, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, )]
[), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {, return]
[), {, return, 0, ;, }, else, if, (, x, >=, 1, ), {, return, 1, ;, }, else, {]
[<=, 0, ), {, return, 0, ;, }, else, if, (, x, >=, 1, ), {, return, 1, ;, }]
[), {, return, 0, ;, }, else, if, (, x, >=, 1, ), {, return, 1, ;, }, else, {]
[;, }, else, if, (, x, >=, 1, ), {, return, 1, ;, }, else, {, return, Beta, ., regularizedBeta]
[), {, return, 1, ;, }, else, {, return, Beta, ., regularizedBeta, (, x, ,, alpha, ,, beta, ), ;]
[>=, 1, ), {, return, 1, ;, }, else, {, return, Beta, ., regularizedBeta, (, x, ,, alpha, ,, beta]
[), {, return, 1, ;, }, else, {, return, Beta, ., regularizedBeta, (, x, ,, alpha, ,, beta, ), ;]
[;, }, else, {, return, Beta, ., regularizedBeta, (, x, ,, alpha, ,, beta, ), ;, }, }, @, Override]
[;, }, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, )]
[., regularizedBeta, (, x, ,, alpha, ,, beta, ), ;, }, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {]
[,, alpha, ,, beta, ), ;, }, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }]
[,, beta, ), ;, }, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double]
[), ;, }, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (]
[;, }, public, double, getNumericalMean, (, ), {, final, double, a, =, getAlpha, (, ), ;, return, a, /, (]
[;, return, a, /, (, a, +, getBeta, (, ), ), ;, }, public, double, getNumericalVariance, (, ), {, final]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, a, =, getAlpha, (, ), ;, final, double, b, =]
[/, (, a, +, getBeta, (, ), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, a, =]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, a, =, getAlpha, (, ), ;, final, double, b, =]
[), ;, }, public, double, getNumericalVariance, (, ), {, final, double, a, =, getAlpha, (, ), ;, final, double, b]
[+, getBeta, (, ), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, a, =, getAlpha, (, )]
[), ;, }, public, double, getNumericalVariance, (, ), {, final, double, a, =, getAlpha, (, ), ;, final, double, b]
[;, final, double, b, =, getBeta, (, ), ;, final, double, alphabetasum, =, a, +, b, ;, return, (, a]
[;, final, double, alphabetasum, =, a, +, b, ;, return, (, a, *, b, ), /, (, (, alphabetasum, *]
[;, return, (, a, *, b, ), /, (, (, alphabetasum, *, alphabetasum, ), *, (, alphabetasum, +, 1, )]
[+, b, ;, return, (, a, *, b, ), /, (, (, alphabetasum, *, alphabetasum, ), *, (, alphabetasum, +]
[;, return, (, a, *, b, ), /, (, (, alphabetasum, *, alphabetasum, ), *, (, alphabetasum, +, 1, )]
[;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return, 1]
[/, (, (, alphabetasum, *, alphabetasum, ), *, (, alphabetasum, +, 1, ), ), ;, }, public, double, getSupportLowerBound, (]
[), /, (, (, alphabetasum, *, alphabetasum, ), *, (, alphabetasum, +, 1, ), ), ;, }, public, double, getSupportLowerBound]
[*, b, ), /, (, (, alphabetasum, *, alphabetasum, ), *, (, alphabetasum, +, 1, ), ), ;, }, public]
[), /, (, (, alphabetasum, *, alphabetasum, ), *, (, alphabetasum, +, 1, ), ), ;, }, public, double, getSupportLowerBound]
[;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return, 1]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[*, (, alphabetasum, +, 1, ), ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public]
[), *, (, alphabetasum, +, 1, ), ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }]
[*, alphabetasum, ), *, (, alphabetasum, +, 1, ), ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0]
[), *, (, alphabetasum, +, 1, ), ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[), ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {]
[+, 1, ), ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (]
[), ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {]
[;, }, public, double, getSupportUpperBound, (, ), {, return, 1, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[;, }, }]
