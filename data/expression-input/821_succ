[;, static, final, DiagnosticType, REDECLARED_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_REDECLARED_VARIABLE", ,, "Redeclared variable: {0}", ), ;, static, final, DiagnosticType, AMBIGUOUS_FUNCTION_DECL, =]
[., warning, (, "JSC_REFERENCE_BEFORE_DECLARE", ,, "Variable referenced before declaration: {0}", ), ;, static, final, DiagnosticType, REDECLARED_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_REDECLARED_VARIABLE", ,, "Redeclared variable: {0}"]
[,, "Variable referenced before declaration: {0}", ), ;, static, final, DiagnosticType, REDECLARED_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_REDECLARED_VARIABLE", ,, "Redeclared variable: {0}", ), ;, static, final]
[), ;, static, final, DiagnosticType, REDECLARED_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_REDECLARED_VARIABLE", ,, "Redeclared variable: {0}", ), ;, static, final, DiagnosticType, AMBIGUOUS_FUNCTION_DECL]
[;, static, final, DiagnosticType, AMBIGUOUS_FUNCTION_DECL, =, DiagnosticType, ., disabled, (, "AMBIGUOUS_FUNCTION_DECL", ,, "Ambiguous use of a named function: {0}.", ), ;, private, final, AbstractCompiler, compiler, ;]
[., warning, (, "JSC_REDECLARED_VARIABLE", ,, "Redeclared variable: {0}", ), ;, static, final, DiagnosticType, AMBIGUOUS_FUNCTION_DECL, =, DiagnosticType, ., disabled, (, "AMBIGUOUS_FUNCTION_DECL", ,, "Ambiguous use of a named function: {0}."]
[,, "Redeclared variable: {0}", ), ;, static, final, DiagnosticType, AMBIGUOUS_FUNCTION_DECL, =, DiagnosticType, ., disabled, (, "AMBIGUOUS_FUNCTION_DECL", ,, "Ambiguous use of a named function: {0}.", ), ;, private, final]
[), ;, static, final, DiagnosticType, AMBIGUOUS_FUNCTION_DECL, =, DiagnosticType, ., disabled, (, "AMBIGUOUS_FUNCTION_DECL", ,, "Ambiguous use of a named function: {0}.", ), ;, private, final, AbstractCompiler, compiler]
[;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, checkLevel, ;, private, final, Set, <, BasicBlock, >, blocksWithDeclarations, =, Sets]
[., disabled, (, "AMBIGUOUS_FUNCTION_DECL", ,, "Ambiguous use of a named function: {0}.", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, checkLevel, ;, private, final]
[,, "Ambiguous use of a named function: {0}.", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, checkLevel, ;, private, final, Set, <, BasicBlock, >]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, checkLevel, ;, private, final, Set, <, BasicBlock, >, blocksWithDeclarations, =]
[;, public, VariableReferenceCheck, (, AbstractCompiler, compiler, ,, CheckLevel, checkLevel, ), {, this, ., compiler, =, compiler, ;, this, ., checkLevel]
[., newHashSet, (, ), ;, public, VariableReferenceCheck, (, AbstractCompiler, compiler, ,, CheckLevel, checkLevel, ), {, this, ., compiler, =, compiler]
[=, compiler, ;, this, ., checkLevel, =, checkLevel, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., compiler, =, compiler, ;, this, ., checkLevel, =, checkLevel, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., checkLevel, =, checkLevel, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, checkLevel, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =]
[., checkLevel, =, checkLevel, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback]
[;, callback, ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,]
[,, new, ReferenceCheckingBehavior, (, ), ), ;, callback, ., process, (, externs, ,, root, ), ;, }, @, Override, public]
[), ;, callback, ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot]
[;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback]
[., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot]
[,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ReferenceCollectingCallback, callback]
[), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ReferenceCollectingCallback, callback, =, new]
[;, callback, ., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, private, class, ReferenceCheckingBehavior, implements, Behavior, {, @, Override, public]
[,, new, ReferenceCheckingBehavior, (, ), ), ;, callback, ., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, private, class, ReferenceCheckingBehavior]
[), ;, callback, ., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, private, class, ReferenceCheckingBehavior, implements, Behavior, {, @, Override]
[;, }, private, class, ReferenceCheckingBehavior, implements, Behavior, {, @, Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, )]
[., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, private, class, ReferenceCheckingBehavior, implements, Behavior, {, @, Override, public, void, afterExitScope]
[,, originalRoot, ), ;, }, private, class, ReferenceCheckingBehavior, implements, Behavior, {, @, Override, public, void, afterExitScope, (, NodeTraversal, t, ,]
[), ;, }, private, class, ReferenceCheckingBehavior, implements, Behavior, {, @, Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap]
[;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, checkVar, (]
[., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[;, ), {, Var, v, =, it, ., next, (, ), ;, checkVar, (, t, ,, v, ,, referenceMap, .]
[., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, checkVar, (, t, ,]
[;, checkVar, (, t, ,, v, ,, referenceMap, ., getReferences, (, v, ), ., references, ), ;, }, }, private]
[., next, (, ), ;, checkVar, (, t, ,, v, ,, referenceMap, ., getReferences, (, v, ), ., references, )]
[;, }, }, private, void, checkVar, (, NodeTraversal, t, ,, Var, v, ,, List, <, Reference, >, references, ), {]
[,, v, ,, referenceMap, ., getReferences, (, v, ), ., references, ), ;, }, }, private, void, checkVar, (, NodeTraversal]
[,, referenceMap, ., getReferences, (, v, ), ., references, ), ;, }, }, private, void, checkVar, (, NodeTraversal, t, ,]
[), ;, }, }, private, void, checkVar, (, NodeTraversal, t, ,, Var, v, ,, List, <, Reference, >, references, )]
[., references, ), ;, }, }, private, void, checkVar, (, NodeTraversal, t, ,, Var, v, ,, List, <, Reference, >]
[., getReferences, (, v, ), ., references, ), ;, }, }, private, void, checkVar, (, NodeTraversal, t, ,, Var, v]
[), ., references, ), ;, }, }, private, void, checkVar, (, NodeTraversal, t, ,, Var, v, ,, List, <, Reference]
[;, boolean, isDeclaredInScope, =, false, ;, boolean, isUnhoistedNamedFunction, =, false, ;, Reference, hoistedFn, =, null, ;, for, (, Reference, reference]
[., clear, (, ), ;, boolean, isDeclaredInScope, =, false, ;, boolean, isUnhoistedNamedFunction, =, false, ;, Reference, hoistedFn, =, null, ;]
[;, boolean, isUnhoistedNamedFunction, =, false, ;, Reference, hoistedFn, =, null, ;, for, (, Reference, reference, :, references, ), {, if]
[;, Reference, hoistedFn, =, null, ;, for, (, Reference, reference, :, references, ), {, if, (, reference, ., isHoistedFunction, (]
[;, for, (, Reference, reference, :, references, ), {, if, (, reference, ., isHoistedFunction, (, ), ), {, blocksWithDeclarations, .]
[), {, if, (, reference, ., isHoistedFunction, (, ), ), {, blocksWithDeclarations, ., add, (, reference, ., getBasicBlock, (, )]
[), {, blocksWithDeclarations, ., add, (, reference, ., getBasicBlock, (, ), ), ;, isDeclaredInScope, =, true, ;, hoistedFn, =, reference]
[., isHoistedFunction, (, ), ), {, blocksWithDeclarations, ., add, (, reference, ., getBasicBlock, (, ), ), ;, isDeclaredInScope, =, true]
[;, isDeclaredInScope, =, true, ;, hoistedFn, =, reference, ;, break, ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, reference]
[., add, (, reference, ., getBasicBlock, (, ), ), ;, isDeclaredInScope, =, true, ;, hoistedFn, =, reference, ;, break, ;]
[), ;, isDeclaredInScope, =, true, ;, hoistedFn, =, reference, ;, break, ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (]
[., getBasicBlock, (, ), ), ;, isDeclaredInScope, =, true, ;, hoistedFn, =, reference, ;, break, ;, }, else, if, (]
[=, true, ;, hoistedFn, =, reference, ;, break, ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, reference, ., getNode]
[;, hoistedFn, =, reference, ;, break, ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, reference, ., getNode, (, )]
[=, reference, ;, break, ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, reference, ., getNode, (, ), ., getParent]
[;, break, ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, reference, ., getNode, (, ), ., getParent, (, )]
[), {, isUnhoistedNamedFunction, =, true, ;, }, }, for, (, Reference, reference, :, references, ), {, if, (, reference, ==]
[., isFunctionDeclaration, (, reference, ., getNode, (, ), ., getParent, (, ), ), ), {, isUnhoistedNamedFunction, =, true, ;, }]
[), ), {, isUnhoistedNamedFunction, =, true, ;, }, }, for, (, Reference, reference, :, references, ), {, if, (, reference]
[., getParent, (, ), ), ), {, isUnhoistedNamedFunction, =, true, ;, }, }, for, (, Reference, reference, :, references, )]
[., getNode, (, ), ., getParent, (, ), ), ), {, isUnhoistedNamedFunction, =, true, ;, }, }, for, (, Reference]
[=, true, ;, }, }, for, (, Reference, reference, :, references, ), {, if, (, reference, ==, hoistedFn, ), {]
[;, }, }, for, (, Reference, reference, :, references, ), {, if, (, reference, ==, hoistedFn, ), {, continue, ;]
[), {, if, (, reference, ==, hoistedFn, ), {, continue, ;, }, BasicBlock, basicBlock, =, reference, ., getBasicBlock, (, )]
[), {, continue, ;, }, BasicBlock, basicBlock, =, reference, ., getBasicBlock, (, ), ;, boolean, isDeclaration, =, reference, ., isDeclaration]
[==, hoistedFn, ), {, continue, ;, }, BasicBlock, basicBlock, =, reference, ., getBasicBlock, (, ), ;, boolean, isDeclaration, =, reference]
[), {, continue, ;, }, BasicBlock, basicBlock, =, reference, ., getBasicBlock, (, ), ;, boolean, isDeclaration, =, reference, ., isDeclaration]
[;, boolean, isDeclaration, =, reference, ., isDeclaration, (, ), ;, boolean, allowDupe, =, SyntacticScopeCreator, ., hasDuplicateDeclarationSuppression, (, reference, ., getNode]
[., getBasicBlock, (, ), ;, boolean, isDeclaration, =, reference, ., isDeclaration, (, ), ;, boolean, allowDupe, =, SyntacticScopeCreator, ., hasDuplicateDeclarationSuppression]
[;, boolean, allowDupe, =, SyntacticScopeCreator, ., hasDuplicateDeclarationSuppression, (, reference, ., getNode, (, ), ,, v, ), ;, if, (, isDeclaration]
[., isDeclaration, (, ), ;, boolean, allowDupe, =, SyntacticScopeCreator, ., hasDuplicateDeclarationSuppression, (, reference, ., getNode, (, ), ,, v, )]
[;, if, (, isDeclaration, &&, !, allowDupe, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, declaredBlock]
[., hasDuplicateDeclarationSuppression, (, reference, ., getNode, (, ), ,, v, ), ;, if, (, isDeclaration, &&, !, allowDupe, ), {]
[,, v, ), ;, if, (, isDeclaration, &&, !, allowDupe, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {]
[., getNode, (, ), ,, v, ), ;, if, (, isDeclaration, &&, !, allowDupe, ), {, for, (, BasicBlock, declaredBlock]
[), ;, if, (, isDeclaration, &&, !, allowDupe, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (]
[), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {]
[&&, !, allowDupe, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, declaredBlock, ., provablyExecutesBefore, (, basicBlock]
[), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {]
[), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {]
[), {, if, (, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference]
[), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (]
[., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), )]
[), ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report]
[;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,, REDECLARED_VARIABLE]
[., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,]
[), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,]
[., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (]
[;, break, ;, }, }, }, if, (, isUnhoistedNamedFunction, &&, !, isDeclaration, &&, isDeclaredInScope, ), {, for, (, BasicBlock, declaredBlock]
[., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,, REDECLARED_VARIABLE, ,, v]
[), ;, break, ;, }, }, }, if, (, isUnhoistedNamedFunction, &&, !, isDeclaration, &&, isDeclaredInScope, ), {, for, (, BasicBlock]
[., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,, REDECLARED_VARIABLE, ,, v, ., name, ), )]
[,, reference, ., getNode, (, ), ,, checkLevel, ,, REDECLARED_VARIABLE, ,, v, ., name, ), ), ;, break, ;, }]
[,, checkLevel, ,, REDECLARED_VARIABLE, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (, isUnhoistedNamedFunction, &&]
[., getNode, (, ), ,, checkLevel, ,, REDECLARED_VARIABLE, ,, v, ., name, ), ), ;, break, ;, }, }, }]
[,, REDECLARED_VARIABLE, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (, isUnhoistedNamedFunction, &&, !, isDeclaration]
[,, v, ., name, ), ), ;, break, ;, }, }, }, if, (, isUnhoistedNamedFunction, &&, !, isDeclaration, &&, isDeclaredInScope]
[), ), ;, break, ;, }, }, }, if, (, isUnhoistedNamedFunction, &&, !, isDeclaration, &&, isDeclaredInScope, ), {, for, (]
[., name, ), ), ;, break, ;, }, }, }, if, (, isUnhoistedNamedFunction, &&, !, isDeclaration, &&, isDeclaredInScope, ), {]
[), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, !, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), )]
[&&, isDeclaredInScope, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, !, declaredBlock, ., provablyExecutesBefore, (, basicBlock]
[&&, !, isDeclaration, &&, isDeclaredInScope, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, !, declaredBlock, .]
[&&, isDeclaredInScope, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, !, declaredBlock, ., provablyExecutesBefore, (, basicBlock]
[&&, isDeclaredInScope, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, !, declaredBlock, ., provablyExecutesBefore, (, basicBlock]
[), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, !, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), )]
[), {, if, (, !, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (]
[), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (]
[), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (]
[., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), )]
[), ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report]
[;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, AMBIGUOUS_FUNCTION_DECL, ,, v]
[., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,]
[), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, AMBIGUOUS_FUNCTION_DECL, ,]
[., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (]
[;, break, ;, }, }, }, if, (, !, isDeclaration, &&, !, isDeclaredInScope, ), {, if, (, !, reference, .]
[., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, AMBIGUOUS_FUNCTION_DECL, ,, v, ., name]
[), ;, break, ;, }, }, }, if, (, !, isDeclaration, &&, !, isDeclaredInScope, ), {, if, (, !, reference]
[., make, (, filename, ,, reference, ., getNode, (, ), ,, AMBIGUOUS_FUNCTION_DECL, ,, v, ., name, ), ), ;, break]
[,, reference, ., getNode, (, ), ,, AMBIGUOUS_FUNCTION_DECL, ,, v, ., name, ), ), ;, break, ;, }, }, }]
[,, AMBIGUOUS_FUNCTION_DECL, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (, !, isDeclaration, &&, !]
[., getNode, (, ), ,, AMBIGUOUS_FUNCTION_DECL, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (]
[,, v, ., name, ), ), ;, break, ;, }, }, }, if, (, !, isDeclaration, &&, !, isDeclaredInScope, )]
[), ), ;, break, ;, }, }, }, if, (, !, isDeclaration, &&, !, isDeclaredInScope, ), {, if, (, !]
[., name, ), ), ;, break, ;, }, }, }, if, (, !, isDeclaration, &&, !, isDeclaredInScope, ), {, if]
[), {, if, (, !, reference, ., getNode, (, ), ., isFromExterns, (, ), ), {, Node, grandparent, =, reference]
[&&, !, isDeclaredInScope, ), {, if, (, !, reference, ., getNode, (, ), ., isFromExterns, (, ), ), {, Node]
[&&, !, isDeclaredInScope, ), {, if, (, !, reference, ., getNode, (, ), ., isFromExterns, (, ), ), {, Node]
[), {, if, (, !, reference, ., getNode, (, ), ., isFromExterns, (, ), ), {, Node, grandparent, =, reference]
[), {, if, (, !, reference, ., getNode, (, ), ., isFromExterns, (, ), ), {, Node, grandparent, =, reference]
[), {, Node, grandparent, =, reference, ., getGrandparent, (, ), ;, if, (, grandparent, ., isName, (, ), &&, grandparent]
[), {, Node, grandparent, =, reference, ., getGrandparent, (, ), ;, if, (, grandparent, ., isName, (, ), &&, grandparent]
[., isFromExterns, (, ), ), {, Node, grandparent, =, reference, ., getGrandparent, (, ), ;, if, (, grandparent, ., isName]
[., getNode, (, ), ., isFromExterns, (, ), ), {, Node, grandparent, =, reference, ., getGrandparent, (, ), ;, if]
[;, if, (, grandparent, ., isName, (, ), &&, grandparent, ., getString, (, ), ==, v, ., name, ), {]
[., getGrandparent, (, ), ;, if, (, grandparent, ., isName, (, ), &&, grandparent, ., getString, (, ), ==, v]
[), {, continue, ;, }, if, (, reference, ., getScope, (, ), ==, v, ., scope, ), {, String, filename]
[&&, grandparent, ., getString, (, ), ==, v, ., name, ), {, continue, ;, }, if, (, reference, ., getScope]
[., isName, (, ), &&, grandparent, ., getString, (, ), ==, v, ., name, ), {, continue, ;, }, if]
[), {, continue, ;, }, if, (, reference, ., getScope, (, ), ==, v, ., scope, ), {, String, filename]
[==, v, ., name, ), {, continue, ;, }, if, (, reference, ., getScope, (, ), ==, v, ., scope]
[., getString, (, ), ==, v, ., name, ), {, continue, ;, }, if, (, reference, ., getScope, (, )]
[), {, continue, ;, }, if, (, reference, ., getScope, (, ), ==, v, ., scope, ), {, String, filename]
[., name, ), {, continue, ;, }, if, (, reference, ., getScope, (, ), ==, v, ., scope, ), {]
[), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (]
[==, v, ., scope, ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;]
[., getScope, (, ), ==, v, ., scope, ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode]
[), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (]
[., scope, ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, .]
[;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,, UNDECLARED_REFERENCE]
[., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,]
[), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,]
[., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (]
[;, }, }, }, if, (, isDeclaration, ), {, blocksWithDeclarations, ., add, (, basicBlock, ), ;, isDeclaredInScope, =, true, ;]
[., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,, UNDECLARED_REFERENCE, ,, v]
[), ;, }, }, }, if, (, isDeclaration, ), {, blocksWithDeclarations, ., add, (, basicBlock, ), ;, isDeclaredInScope, =, true]
[., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,, UNDECLARED_REFERENCE, ,, v, ., name, ), )]
[,, reference, ., getNode, (, ), ,, checkLevel, ,, UNDECLARED_REFERENCE, ,, v, ., name, ), ), ;, }, }, }]
[,, checkLevel, ,, UNDECLARED_REFERENCE, ,, v, ., name, ), ), ;, }, }, }, if, (, isDeclaration, ), {, blocksWithDeclarations]
[., getNode, (, ), ,, checkLevel, ,, UNDECLARED_REFERENCE, ,, v, ., name, ), ), ;, }, }, }, if, (]
[,, UNDECLARED_REFERENCE, ,, v, ., name, ), ), ;, }, }, }, if, (, isDeclaration, ), {, blocksWithDeclarations, ., add]
[,, v, ., name, ), ), ;, }, }, }, if, (, isDeclaration, ), {, blocksWithDeclarations, ., add, (, basicBlock]
[), ), ;, }, }, }, if, (, isDeclaration, ), {, blocksWithDeclarations, ., add, (, basicBlock, ), ;, isDeclaredInScope, =]
[., name, ), ), ;, }, }, }, if, (, isDeclaration, ), {, blocksWithDeclarations, ., add, (, basicBlock, ), ;]
[), {, blocksWithDeclarations, ., add, (, basicBlock, ), ;, isDeclaredInScope, =, true, ;, }, }, }, }, }]
[;, isDeclaredInScope, =, true, ;, }, }, }, }, }]
[., add, (, basicBlock, ), ;, isDeclaredInScope, =, true, ;, }, }, }, }, }]
[), ;, isDeclaredInScope, =, true, ;, }, }, }, }, }]
[=, true, ;, }, }, }, }, }]
[;, }, }, }, }, }]
