[;, private, final, AbstractCompiler, compiler, ;, private, final, Pattern, pattern, ;, enum, Pattern, {, USE_GLOBAL_TEMP, (, "var t;", ., length, (]
[=, globalOverHead, ;, this, ., perExtractionOverhead, =, perExtractionOverhead, ;, this, ., perMemberOverhead, =, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler]
[., globalOverhead, =, globalOverHead, ;, this, ., perExtractionOverhead, =, perExtractionOverhead, ;, this, ., perMemberOverhead, =, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations]
[;, this, ., perExtractionOverhead, =, perExtractionOverhead, ;, this, ., perMemberOverhead, =, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,]
[=, perExtractionOverhead, ;, this, ., perMemberOverhead, =, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern, ), {]
[., perExtractionOverhead, =, perExtractionOverhead, ;, this, ., perMemberOverhead, =, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern]
[;, this, ., perMemberOverhead, =, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern, ), {, this, .]
[=, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern, ), {, this, ., compiler, =, compiler, ;]
[., perMemberOverhead, =, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern, ), {, this, ., compiler, =]
[;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern, ), {, this, ., compiler, =, compiler, ;, this, .]
[,, "t=y.prototype;", ., length, (, ), ,, "t.y=", ., length, (, ), -, "x[p].y=", ., length, (, ), ), ,]
[., length, (, ), ,, "t=y.prototype;", ., length, (, ), ,, "t.y=", ., length, (, ), -, "x[p].y=", ., length]
[,, "t.y=", ., length, (, ), -, "x[p].y=", ., length, (, ), ), ,, USE_ANON_FUNCTION, (, 0, ,, "(function(t){})(y.prototype);", .]
[., length, (, ), ,, "t.y=", ., length, (, ), -, "x[p].y=", ., length, (, ), ), ,, USE_ANON_FUNCTION, (]
[), ,, USE_ANON_FUNCTION, (, 0, ,, "(function(t){})(y.prototype);", ., length, (, ), ,, "t.y=", ., length, (, ), -, "x.prototype.y=", .]
[-, "x[p].y=", ., length, (, ), ), ,, USE_ANON_FUNCTION, (, 0, ,, "(function(t){})(y.prototype);", ., length, (, ), ,, "t.y=", .]
[., length, (, ), -, "x[p].y=", ., length, (, ), ), ,, USE_ANON_FUNCTION, (, 0, ,, "(function(t){})(y.prototype);", ., length, (]
[), ,, USE_ANON_FUNCTION, (, 0, ,, "(function(t){})(y.prototype);", ., length, (, ), ,, "t.y=", ., length, (, ), -, "x.prototype.y=", .]
[., length, (, ), ), ,, USE_ANON_FUNCTION, (, 0, ,, "(function(t){})(y.prototype);", ., length, (, ), ,, "t.y=", ., length, (]
[,, "(function(t){})(y.prototype);", ., length, (, ), ,, "t.y=", ., length, (, ), -, "x.prototype.y=", ., length, (, ), ), ;]
[,, "t.y=", ., length, (, ), -, "x.prototype.y=", ., length, (, ), ), ;, private, final, int, globalOverhead, ;, private]
[., length, (, ), ,, "t.y=", ., length, (, ), -, "x.prototype.y=", ., length, (, ), ), ;, private, final]
[), ;, private, final, int, globalOverhead, ;, private, final, int, perExtractionOverhead, ;, private, final, int, perMemberOverhead, ;, Pattern, (, int]
[-, "x.prototype.y=", ., length, (, ), ), ;, private, final, int, globalOverhead, ;, private, final, int, perExtractionOverhead, ;, private, final]
[., length, (, ), -, "x.prototype.y=", ., length, (, ), ), ;, private, final, int, globalOverhead, ;, private, final, int]
[), ;, private, final, int, globalOverhead, ;, private, final, int, perExtractionOverhead, ;, private, final, int, perMemberOverhead, ;, Pattern, (, int]
[., length, (, ), ), ;, private, final, int, globalOverhead, ;, private, final, int, perExtractionOverhead, ;, private, final, int, perMemberOverhead]
[=, compiler, ;, this, ., pattern, =, pattern, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., compiler, =, compiler, ;, this, ., pattern, =, pattern, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., pattern, =, pattern, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, pattern, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GatherExtractionInfo, extractionInfo, =]
[., pattern, =, pattern, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GatherExtractionInfo]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GatherExtractionInfo, extractionInfo, =, new, GatherExtractionInfo]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, extractionInfo, ), ;, if, (, extractionInfo, ., shouldExtract, (, ), )]
[;, if, (, extractionInfo, ., shouldExtract, (, ), ), {, doExtraction, (, extractionInfo, ), ;, compiler, ., reportCodeChange, (, )]
[., traverse, (, compiler, ,, root, ,, extractionInfo, ), ;, if, (, extractionInfo, ., shouldExtract, (, ), ), {, doExtraction]
[,, root, ,, extractionInfo, ), ;, if, (, extractionInfo, ., shouldExtract, (, ), ), {, doExtraction, (, extractionInfo, ), ;]
[,, extractionInfo, ), ;, if, (, extractionInfo, ., shouldExtract, (, ), ), {, doExtraction, (, extractionInfo, ), ;, compiler, .]
[), ;, if, (, extractionInfo, ., shouldExtract, (, ), ), {, doExtraction, (, extractionInfo, ), ;, compiler, ., reportCodeChange, (]
[), {, doExtraction, (, extractionInfo, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, doExtraction, (, GatherExtractionInfo]
[., shouldExtract, (, ), ), {, doExtraction, (, extractionInfo, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, doExtraction, (, GatherExtractionInfo, info, ), {, if, (, pattern]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, doExtraction, (, GatherExtractionInfo, info, ), {, if, (]
[;, }, }, private, void, doExtraction, (, GatherExtractionInfo, info, ), {, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {]
[., reportCodeChange, (, ), ;, }, }, private, void, doExtraction, (, GatherExtractionInfo, info, ), {, if, (, pattern, ==, Pattern]
[), {, Node, injectionPoint, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, prototypeAlias]
[==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, injectionPoint, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, Node, var, =, NodeUtil]
[), {, Node, injectionPoint, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, prototypeAlias]
[., USE_GLOBAL_TEMP, ), {, Node, injectionPoint, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, Node, var, =, NodeUtil, ., newVarNode]
[;, Node, var, =, NodeUtil, ., newVarNode, (, prototypeAlias, ,, null, ), ., copyInformationFromForTree, (, injectionPoint, ), ;, injectionPoint, .]
[., getNodeForCodeInsertion, (, null, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, prototypeAlias, ,, null, ), ., copyInformationFromForTree, (]
[), ;, Node, var, =, NodeUtil, ., newVarNode, (, prototypeAlias, ,, null, ), ., copyInformationFromForTree, (, injectionPoint, ), ;, injectionPoint]
[;, injectionPoint, ., addChildrenToFront, (, var, ), ;, }, for, (, ExtractionInstance, instance, :, info, ., instances, ), {, extractInstance]
[., copyInformationFromForTree, (, injectionPoint, ), ;, injectionPoint, ., addChildrenToFront, (, var, ), ;, }, for, (, ExtractionInstance, instance, :, info]
[., newVarNode, (, prototypeAlias, ,, null, ), ., copyInformationFromForTree, (, injectionPoint, ), ;, injectionPoint, ., addChildrenToFront, (, var, ), ;]
[,, null, ), ., copyInformationFromForTree, (, injectionPoint, ), ;, injectionPoint, ., addChildrenToFront, (, var, ), ;, }, for, (, ExtractionInstance]
[), ., copyInformationFromForTree, (, injectionPoint, ), ;, injectionPoint, ., addChildrenToFront, (, var, ), ;, }, for, (, ExtractionInstance, instance, :]
[), ;, injectionPoint, ., addChildrenToFront, (, var, ), ;, }, for, (, ExtractionInstance, instance, :, info, ., instances, ), {]
[;, }, for, (, ExtractionInstance, instance, :, info, ., instances, ), {, extractInstance, (, instance, ), ;, }, }, private]
[., addChildrenToFront, (, var, ), ;, }, for, (, ExtractionInstance, instance, :, info, ., instances, ), {, extractInstance, (, instance]
[), ;, }, for, (, ExtractionInstance, instance, :, info, ., instances, ), {, extractInstance, (, instance, ), ;, }, }]
[), {, extractInstance, (, instance, ), ;, }, }, private, void, extractInstance, (, ExtractionInstance, instance, ), {, PrototypeMemberDeclaration, first, =]
[., instances, ), {, extractInstance, (, instance, ), ;, }, }, private, void, extractInstance, (, ExtractionInstance, instance, ), {, PrototypeMemberDeclaration]
[;, }, }, private, void, extractInstance, (, ExtractionInstance, instance, ), {, PrototypeMemberDeclaration, first, =, instance, ., declarations, ., getFirst, (]
[), ;, }, }, private, void, extractInstance, (, ExtractionInstance, instance, ), {, PrototypeMemberDeclaration, first, =, instance, ., declarations, ., getFirst]
[;, String, className, =, first, ., qualifiedClassName, ;, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, stmt, =]
[., getFirst, (, ), ;, String, className, =, first, ., qualifiedClassName, ;, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, )]
[., declarations, ., getFirst, (, ), ;, String, className, =, first, ., qualifiedClassName, ;, if, (, pattern, ==, Pattern, .]
[;, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, stmt, =, new, Node, (, first, ., node, .]
[., qualifiedClassName, ;, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, stmt, =, new, Node, (, first, .]
[), {, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, IR, ., assign, (]
[==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,]
[), {, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, IR, ., assign, (]
[., USE_GLOBAL_TEMP, ), {, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, IR, .]
[;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, }, else, if, (, pattern, ==]
[., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, )]
[,, IR, ., assign, (, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (]
[., getType, (, ), ,, IR, ., assign, (, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (]
[., node, ., getType, (, ), ,, IR, ., assign, (, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, .]
[), ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node]
[., assign, (, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className]
[., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,]
[), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,]
[), ), ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, .]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype"]
[,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, .]
[., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ), .]
[,, instance, ., parent, ,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;, instance]
[+, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, )]
[,, instance, ., parent, ,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;, instance]
[,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore]
[., parent, ,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent]
[), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first]
[+, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt]
[), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first]
[), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, }, else, if, (, pattern]
[., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, }, else, if]
[;, }, else, if, (, pattern, ==, Pattern, ., USE_ANON_FUNCTION, ), {, Node, block, =, IR, ., block, (, )]
[., addChildBefore, (, stmt, ,, first, ., node, ), ;, }, else, if, (, pattern, ==, Pattern, ., USE_ANON_FUNCTION, )]
[., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, }, else, if, (, pattern, ==, Pattern, .]
[,, first, ., node, ), ;, }, else, if, (, pattern, ==, Pattern, ., USE_ANON_FUNCTION, ), {, Node, block, =]
[), ;, }, else, if, (, pattern, ==, Pattern, ., USE_ANON_FUNCTION, ), {, Node, block, =, IR, ., block, (]
[., node, ), ;, }, else, if, (, pattern, ==, Pattern, ., USE_ANON_FUNCTION, ), {, Node, block, =, IR, .]
[), {, Node, block, =, IR, ., block, (, ), ;, Node, func, =, IR, ., function, (, IR, .]
[==, Pattern, ., USE_ANON_FUNCTION, ), {, Node, block, =, IR, ., block, (, ), ;, Node, func, =, IR, .]
[), {, Node, block, =, IR, ., block, (, ), ;, Node, func, =, IR, ., function, (, IR, .]
[., USE_ANON_FUNCTION, ), {, Node, block, =, IR, ., block, (, ), ;, Node, func, =, IR, ., function, (]
[;, Node, func, =, IR, ., function, (, IR, ., name, (, "", ), ,, IR, ., paramList, (, IR]
[., block, (, ), ;, Node, func, =, IR, ., function, (, IR, ., name, (, "", ), ,, IR]
[;, Node, call, =, IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[., function, (, IR, ., name, (, "", ), ,, IR, ., paramList, (, IR, ., name, (, prototypeAlias, )]
[,, IR, ., paramList, (, IR, ., name, (, prototypeAlias, ), ), ,, block, ), ;, Node, call, =, IR]
[., name, (, "", ), ,, IR, ., paramList, (, IR, ., name, (, prototypeAlias, ), ), ,, block, )]
[), ,, IR, ., paramList, (, IR, ., name, (, prototypeAlias, ), ), ,, block, ), ;, Node, call, =]
[,, block, ), ;, Node, call, =, IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention]
[., paramList, (, IR, ., name, (, prototypeAlias, ), ), ,, block, ), ;, Node, call, =, IR, ., call]
[), ,, block, ), ;, Node, call, =, IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, .]
[., name, (, prototypeAlias, ), ), ,, block, ), ;, Node, call, =, IR, ., call, (, func, ,, NodeUtil]
[), ), ,, block, ), ;, Node, call, =, IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler]
[), ;, Node, call, =, IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, )]
[;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;, Node, stmt, =, new, Node, (, first, .]
[., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance]
[,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className]
[), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;, Node, stmt, =, new, Node, (, first]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype"]
[,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ;, call, ., putIntProp, (, Node]
[., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ;, call]
[,, instance, ., parent, ,, className, +, ".prototype", ), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1]
[+, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL]
[,, instance, ., parent, ,, className, +, ".prototype", ), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1]
[,, className, +, ".prototype", ), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;, Node, stmt]
[., parent, ,, className, +, ".prototype", ), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;]
[), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;, Node, stmt, =, new, Node, (]
[+, ".prototype", ), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;, Node, stmt, =, new]
[), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;, Node, stmt, =, new, Node, (]
[;, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, call, ), ;, stmt, .]
[., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;, Node, stmt, =, new, Node, (, first, ., node, .]
[,, 1, ), ;, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, call, )]
[., FREE_CALL, ,, 1, ), ;, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,]
[), ;, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, call, ), ;, stmt]
[;, stmt, ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, .]
[,, call, ), ;, stmt, ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt]
[., getType, (, ), ,, call, ), ;, stmt, ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent]
[., node, ., getType, (, ), ,, call, ), ;, stmt, ., copyInformationFromForTree, (, first, ., node, ), ;, instance]
[), ;, stmt, ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first]
[;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :, instance]
[., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, )]
[), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :]
[., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration]
[;, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {, block, ., addChildToBack, (, declar, ., node, ., detachFromParent]
[., addChildBefore, (, stmt, ,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {]
[., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations]
[,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {, block, ., addChildToBack, (]
[), ;, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {, block, ., addChildToBack, (, declar, ., node, .]
[., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {, block, ., addChildToBack, (, declar, .]
[), {, block, ., addChildToBack, (, declar, ., node, ., detachFromParent, (, ), ), ;, }, }, for, (, PrototypeMemberDeclaration]
[., declarations, ), {, block, ., addChildToBack, (, declar, ., node, ., detachFromParent, (, ), ), ;, }, }, for]
[;, }, }, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {, replacePrototypeMemberDeclaration, (, declar, ), ;, }, }]
[., addChildToBack, (, declar, ., node, ., detachFromParent, (, ), ), ;, }, }, for, (, PrototypeMemberDeclaration, declar, :, instance]
[), ;, }, }, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {, replacePrototypeMemberDeclaration, (, declar, ), ;, }]
[., detachFromParent, (, ), ), ;, }, }, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {, replacePrototypeMemberDeclaration, (]
[., node, ., detachFromParent, (, ), ), ;, }, }, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {]
[), {, replacePrototypeMemberDeclaration, (, declar, ), ;, }, }, private, void, replacePrototypeMemberDeclaration, (, PrototypeMemberDeclaration, declar, ), {, Node, assignment, =]
[., declarations, ), {, replacePrototypeMemberDeclaration, (, declar, ), ;, }, }, private, void, replacePrototypeMemberDeclaration, (, PrototypeMemberDeclaration, declar, ), {, Node]
[;, }, }, private, void, replacePrototypeMemberDeclaration, (, PrototypeMemberDeclaration, declar, ), {, Node, assignment, =, declar, ., node, ., getFirstChild, (]
[), ;, }, }, private, void, replacePrototypeMemberDeclaration, (, PrototypeMemberDeclaration, declar, ), {, Node, assignment, =, declar, ., node, ., getFirstChild]
[;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, name, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention]
[., getFirstChild, (, ), ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, name, =, NodeUtil, ., newQualifiedNameNode]
[., node, ., getFirstChild, (, ), ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, name, =, NodeUtil]
[;, Node, name, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, prototypeAlias, +, ".", +, declar, .]
[., getFirstChild, (, ), ;, Node, name, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, prototypeAlias, +]
[;, Node, accessNode, =, declar, ., lhs, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, Object, originalName, =, accessNode]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, prototypeAlias, +, ".", +, declar, ., memberName, ,, declar, ., node]
[,, prototypeAlias, +, ".", +, declar, ., memberName, ,, declar, ., node, ,, declar, ., memberName, ), ;, Node, accessNode]
[., getCodingConvention, (, ), ,, prototypeAlias, +, ".", +, declar, ., memberName, ,, declar, ., node, ,, declar, ., memberName]
[,, declar, ., node, ,, declar, ., memberName, ), ;, Node, accessNode, =, declar, ., lhs, ., getFirstChild, (, )]
[+, declar, ., memberName, ,, declar, ., node, ,, declar, ., memberName, ), ;, Node, accessNode, =, declar, ., lhs]
[+, ".", +, declar, ., memberName, ,, declar, ., node, ,, declar, ., memberName, ), ;, Node, accessNode, =, declar]
[+, declar, ., memberName, ,, declar, ., node, ,, declar, ., memberName, ), ;, Node, accessNode, =, declar, ., lhs]
[,, declar, ., node, ,, declar, ., memberName, ), ;, Node, accessNode, =, declar, ., lhs, ., getFirstChild, (, )]
[., memberName, ,, declar, ., node, ,, declar, ., memberName, ), ;, Node, accessNode, =, declar, ., lhs, ., getFirstChild]
[,, declar, ., memberName, ), ;, Node, accessNode, =, declar, ., lhs, ., getFirstChild, (, ), ., getFirstChild, (, )]
[., node, ,, declar, ., memberName, ), ;, Node, accessNode, =, declar, ., lhs, ., getFirstChild, (, ), ., getFirstChild]
[), ;, Node, accessNode, =, declar, ., lhs, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, Object, originalName, =]
[., memberName, ), ;, Node, accessNode, =, declar, ., lhs, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, Object]
[;, Object, originalName, =, accessNode, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ;, String, className, =, "?", ;, if, (]
[., getFirstChild, (, ), ;, Object, originalName, =, accessNode, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ;, String, className, =]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, Object, originalName, =, accessNode, ., getProp, (, Node, ., ORIGINALNAME_PROP, )]
[., lhs, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, Object, originalName, =, accessNode, ., getProp, (, Node, .]
[;, String, className, =, "?", ;, if, (, originalName, !=, null, ), {, className, =, originalName, ., toString, (, )]
[., getProp, (, Node, ., ORIGINALNAME_PROP, ), ;, String, className, =, "?", ;, if, (, originalName, !=, null, ), {]
[), ;, String, className, =, "?", ;, if, (, originalName, !=, null, ), {, className, =, originalName, ., toString, (]
[., ORIGINALNAME_PROP, ), ;, String, className, =, "?", ;, if, (, originalName, !=, null, ), {, className, =, originalName, .]
[;, if, (, originalName, !=, null, ), {, className, =, originalName, ., toString, (, ), ;, }, NodeUtil, ., setDebugInformation]
[), {, className, =, originalName, ., toString, (, ), ;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, )]
[!=, null, ), {, className, =, originalName, ., toString, (, ), ;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild]
[), {, className, =, originalName, ., toString, (, ), ;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, )]
[=, originalName, ., toString, (, ), ;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, ), ,, lhs, ,]
[;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, ), ,, lhs, ,, className, +, ".prototype", ), ;, assignment]
[., toString, (, ), ;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, ), ,, lhs, ,, className, +]
[;, assignment, ., replaceChild, (, lhs, ,, name, ), ;, }, private, class, GatherExtractionInfo, extends, AbstractShallowCallback, {, private, List, <]
[., setDebugInformation, (, name, ., getFirstChild, (, ), ,, lhs, ,, className, +, ".prototype", ), ;, assignment, ., replaceChild, (]
[,, lhs, ,, className, +, ".prototype", ), ;, assignment, ., replaceChild, (, lhs, ,, name, ), ;, }, private, class]
[., getFirstChild, (, ), ,, lhs, ,, className, +, ".prototype", ), ;, assignment, ., replaceChild, (, lhs, ,, name, )]
[,, className, +, ".prototype", ), ;, assignment, ., replaceChild, (, lhs, ,, name, ), ;, }, private, class, GatherExtractionInfo, extends]
[), ;, assignment, ., replaceChild, (, lhs, ,, name, ), ;, }, private, class, GatherExtractionInfo, extends, AbstractShallowCallback, {, private, List]
[+, ".prototype", ), ;, assignment, ., replaceChild, (, lhs, ,, name, ), ;, }, private, class, GatherExtractionInfo, extends, AbstractShallowCallback, {]
[), ;, assignment, ., replaceChild, (, lhs, ,, name, ), ;, }, private, class, GatherExtractionInfo, extends, AbstractShallowCallback, {, private, List]
[;, }, private, class, GatherExtractionInfo, extends, AbstractShallowCallback, {, private, List, <, ExtractionInstance, >, instances, =, Lists, ., newLinkedList, (, )]
[., replaceChild, (, lhs, ,, name, ), ;, }, private, class, GatherExtractionInfo, extends, AbstractShallowCallback, {, private, List, <, ExtractionInstance, >]
[,, name, ), ;, }, private, class, GatherExtractionInfo, extends, AbstractShallowCallback, {, private, List, <, ExtractionInstance, >, instances, =, Lists, .]
[), ;, }, private, class, GatherExtractionInfo, extends, AbstractShallowCallback, {, private, List, <, ExtractionInstance, >, instances, =, Lists, ., newLinkedList, (]
[;, private, int, totalDelta, =, pattern, ., globalOverhead, ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., newLinkedList, (, ), ;, private, int, totalDelta, =, pattern, ., globalOverhead, ;, @, Override, public, void, visit, (, NodeTraversal]
[;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[., globalOverhead, ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), {, return, ;, }, for, (, Node, cur, =, n, ., getFirstChild, (, ), ;, cur, !=, null, ;]
[&&, !, n, ., isBlock, (, ), ), {, return, ;, }, for, (, Node, cur, =, n, ., getFirstChild]
[&&, !, n, ., isBlock, (, ), ), {, return, ;, }, for, (, Node, cur, =, n, ., getFirstChild]
[., isScript, (, ), &&, !, n, ., isBlock, (, ), ), {, return, ;, }, for, (, Node, cur]
[), {, return, ;, }, for, (, Node, cur, =, n, ., getFirstChild, (, ), ;, cur, !=, null, ;]
[), {, return, ;, }, for, (, Node, cur, =, n, ., getFirstChild, (, ), ;, cur, !=, null, ;]
[., isBlock, (, ), ), {, return, ;, }, for, (, Node, cur, =, n, ., getFirstChild, (, ), ;]
[;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration]
[., getFirstChild, (, ), ;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember]
[;, cur, =, cur, ., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;]
[!=, null, ;, cur, =, cur, ., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur]
[;, cur, =, cur, ., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;]
[=, cur, ., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (]
[), {, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==, null, ), {, continue]
[., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==]
[;, if, (, prototypeMember, ==, null, ), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (, prototypeMember, ,, n]
[., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==, null, ), {, continue, ;, }, ExtractionInstance, instance, =, new]
[), ;, if, (, prototypeMember, ==, null, ), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (, prototypeMember, ,]
[), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (, prototypeMember, ,, n, ), ;, cur, =, instance, .]
[==, null, ), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (, prototypeMember, ,, n, ), ;, cur, =]
[), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (, prototypeMember, ,, n, ), ;, cur, =, instance, .]
[;, cur, =, instance, ., declarations, ., getLast, (, ), ., node, ;, if, (, instance, ., isFavorable, (, )]
[,, n, ), ;, cur, =, instance, ., declarations, ., getLast, (, ), ., node, ;, if, (, instance, .]
[), ;, cur, =, instance, ., declarations, ., getLast, (, ), ., node, ;, if, (, instance, ., isFavorable, (]
[=, instance, ., declarations, ., getLast, (, ), ., node, ;, if, (, instance, ., isFavorable, (, ), ), {]
[;, if, (, instance, ., isFavorable, (, ), ), {, instances, ., add, (, instance, ), ;, totalDelta, +=, instance]
[., node, ;, if, (, instance, ., isFavorable, (, ), ), {, instances, ., add, (, instance, ), ;, totalDelta]
[., getLast, (, ), ., node, ;, if, (, instance, ., isFavorable, (, ), ), {, instances, ., add, (]
[., declarations, ., getLast, (, ), ., node, ;, if, (, instance, ., isFavorable, (, ), ), {, instances, .]
[), {, instances, ., add, (, instance, ), ;, totalDelta, +=, instance, ., delta, ;, }, }, }, private, boolean]
[., isFavorable, (, ), ), {, instances, ., add, (, instance, ), ;, totalDelta, +=, instance, ., delta, ;, }]
[;, totalDelta, +=, instance, ., delta, ;, }, }, }, private, boolean, shouldExtract, (, ), {, return, totalDelta, <, 0]
[., add, (, instance, ), ;, totalDelta, +=, instance, ., delta, ;, }, }, }, private, boolean, shouldExtract, (, )]
[), ;, totalDelta, +=, instance, ., delta, ;, }, }, }, private, boolean, shouldExtract, (, ), {, return, totalDelta, <]
[+=, instance, ., delta, ;, }, }, }, private, boolean, shouldExtract, (, ), {, return, totalDelta, <, 0, ;, }]
[;, }, }, }, private, boolean, shouldExtract, (, ), {, return, totalDelta, <, 0, ;, }, }, private, class, ExtractionInstance]
[., delta, ;, }, }, }, private, boolean, shouldExtract, (, ), {, return, totalDelta, <, 0, ;, }, }, private]
[;, }, }, private, class, ExtractionInstance, {, LinkedList, <, PrototypeMemberDeclaration, >, declarations, =, Lists, ., newLinkedList, (, ), ;, private]
[<, 0, ;, }, }, private, class, ExtractionInstance, {, LinkedList, <, PrototypeMemberDeclaration, >, declarations, =, Lists, ., newLinkedList, (, )]
[;, }, }, private, class, ExtractionInstance, {, LinkedList, <, PrototypeMemberDeclaration, >, declarations, =, Lists, ., newLinkedList, (, ), ;, private]
[;, private, int, delta, =, 0, ;, private, final, Node, parent, ;, private, ExtractionInstance, (, PrototypeMemberDeclaration, head, ,, Node, parent]
[., newLinkedList, (, ), ;, private, int, delta, =, 0, ;, private, final, Node, parent, ;, private, ExtractionInstance, (, PrototypeMemberDeclaration]
[;, private, final, Node, parent, ;, private, ExtractionInstance, (, PrototypeMemberDeclaration, head, ,, Node, parent, ), {, this, ., parent, =]
[=, parent, ;, declarations, ., add, (, head, ), ;, delta, =, pattern, ., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;]
[., parent, =, parent, ;, declarations, ., add, (, head, ), ;, delta, =, pattern, ., perExtractionOverhead, +, pattern, .]
[;, declarations, ., add, (, head, ), ;, delta, =, pattern, ., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;, for, (]
[;, delta, =, pattern, ., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;, for, (, Node, cur, =, head, ., node, .]
[., add, (, head, ), ;, delta, =, pattern, ., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;, for, (, Node, cur]
[), ;, delta, =, pattern, ., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;, for, (, Node, cur, =, head, ., node]
[=, pattern, ., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;, for, (, Node, cur, =, head, ., node, ., getNext, (]
[;, for, (, Node, cur, =, head, ., node, ., getNext, (, ), ;, cur, !=, null, ;, cur, =]
[+, pattern, ., perMemberOverhead, ;, for, (, Node, cur, =, head, ., node, ., getNext, (, ), ;, cur, !=]
[., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;, for, (, Node, cur, =, head, ., node, ., getNext, (, ), ;]
[;, for, (, Node, cur, =, head, ., node, ., getNext, (, ), ;, cur, !=, null, ;, cur, =]
[., perMemberOverhead, ;, for, (, Node, cur, =, head, ., node, ., getNext, (, ), ;, cur, !=, null, ;]
[;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, if, (, cur, ., isFunction, (]
[., getNext, (, ), ;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, if, (]
[., node, ., getNext, (, ), ;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {]
[;, cur, =, cur, ., getNext, (, ), ), {, if, (, cur, ., isFunction, (, ), ), {, continue]
[!=, null, ;, cur, =, cur, ., getNext, (, ), ), {, if, (, cur, ., isFunction, (, ), )]
[;, cur, =, cur, ., getNext, (, ), ), {, if, (, cur, ., isFunction, (, ), ), {, continue]
[=, cur, ., getNext, (, ), ), {, if, (, cur, ., isFunction, (, ), ), {, continue, ;, }]
[), {, if, (, cur, ., isFunction, (, ), ), {, continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration]
[., getNext, (, ), ), {, if, (, cur, ., isFunction, (, ), ), {, continue, ;, }, PrototypeMemberDeclaration, prototypeMember]
[), {, continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==, null]
[., isFunction, (, ), ), {, continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if]
[;, if, (, prototypeMember, ==, null, ||, !, head, ., isSameClass, (, prototypeMember, ), ), {, break, ;, }, declarations]
[., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==, null, ||, !, head, ., isSameClass, (, prototypeMember, ), )]
[), ;, if, (, prototypeMember, ==, null, ||, !, head, ., isSameClass, (, prototypeMember, ), ), {, break, ;, }]
[), {, break, ;, }, declarations, ., add, (, prototypeMember, ), ;, delta, +=, pattern, ., perMemberOverhead, ;, }, }]
[||, !, head, ., isSameClass, (, prototypeMember, ), ), {, break, ;, }, declarations, ., add, (, prototypeMember, ), ;]
[==, null, ||, !, head, ., isSameClass, (, prototypeMember, ), ), {, break, ;, }, declarations, ., add, (, prototypeMember]
[||, !, head, ., isSameClass, (, prototypeMember, ), ), {, break, ;, }, declarations, ., add, (, prototypeMember, ), ;]
[), {, break, ;, }, declarations, ., add, (, prototypeMember, ), ;, delta, +=, pattern, ., perMemberOverhead, ;, }, }]
[), {, break, ;, }, declarations, ., add, (, prototypeMember, ), ;, delta, +=, pattern, ., perMemberOverhead, ;, }, }]
[., isSameClass, (, prototypeMember, ), ), {, break, ;, }, declarations, ., add, (, prototypeMember, ), ;, delta, +=, pattern]
[), ), {, break, ;, }, declarations, ., add, (, prototypeMember, ), ;, delta, +=, pattern, ., perMemberOverhead, ;, }]
[;, delta, +=, pattern, ., perMemberOverhead, ;, }, }, boolean, isFavorable, (, ), {, return, delta, <=, 0, ;, }]
[., add, (, prototypeMember, ), ;, delta, +=, pattern, ., perMemberOverhead, ;, }, }, boolean, isFavorable, (, ), {, return]
[), ;, delta, +=, pattern, ., perMemberOverhead, ;, }, }, boolean, isFavorable, (, ), {, return, delta, <=, 0, ;]
[+=, pattern, ., perMemberOverhead, ;, }, }, boolean, isFavorable, (, ), {, return, delta, <=, 0, ;, }, }, private]
[;, }, }, boolean, isFavorable, (, ), {, return, delta, <=, 0, ;, }, }, private, static, class, PrototypeMemberDeclaration, {]
[., perMemberOverhead, ;, }, }, boolean, isFavorable, (, ), {, return, delta, <=, 0, ;, }, }, private, static, class]
[;, }, }, private, static, class, PrototypeMemberDeclaration, {, final, String, memberName, ;, final, Node, node, ;, final, String, qualifiedClassName, ;]
[<=, 0, ;, }, }, private, static, class, PrototypeMemberDeclaration, {, final, String, memberName, ;, final, Node, node, ;, final, String]
[;, }, }, private, static, class, PrototypeMemberDeclaration, {, final, String, memberName, ;, final, Node, node, ;, final, String, qualifiedClassName, ;]
[=, lhs, ;, this, ., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =, node, ;]
[., lhs, =, lhs, ;, this, ., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =]
[;, this, ., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =, node, ;, this, .]
[=, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =, node, ;, this, ., qualifiedClassName, =, NodeUtil, .]
[., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =, node, ;, this, ., qualifiedClassName, =]
[;, this, ., node, =, node, ;, this, ., qualifiedClassName, =, NodeUtil, ., getPrototypeClassName, (, lhs, ), ., getQualifiedName, (]
[., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =, node, ;, this, ., qualifiedClassName, =, NodeUtil, ., getPrototypeClassName, (]
[), ;, this, ., node, =, node, ;, this, ., qualifiedClassName, =, NodeUtil, ., getPrototypeClassName, (, lhs, ), ., getQualifiedName]
[=, node, ;, this, ., qualifiedClassName, =, NodeUtil, ., getPrototypeClassName, (, lhs, ), ., getQualifiedName, (, ), ;, }, private]
[., node, =, node, ;, this, ., qualifiedClassName, =, NodeUtil, ., getPrototypeClassName, (, lhs, ), ., getQualifiedName, (, ), ;]
[;, this, ., qualifiedClassName, =, NodeUtil, ., getPrototypeClassName, (, lhs, ), ., getQualifiedName, (, ), ;, }, private, boolean, isSameClass]
[=, NodeUtil, ., getPrototypeClassName, (, lhs, ), ., getQualifiedName, (, ), ;, }, private, boolean, isSameClass, (, PrototypeMemberDeclaration, other, )]
[., qualifiedClassName, =, NodeUtil, ., getPrototypeClassName, (, lhs, ), ., getQualifiedName, (, ), ;, }, private, boolean, isSameClass, (, PrototypeMemberDeclaration]
[;, }, private, boolean, isSameClass, (, PrototypeMemberDeclaration, other, ), {, return, qualifiedClassName, ., equals, (, other, ., qualifiedClassName, ), ;]
[., getQualifiedName, (, ), ;, }, private, boolean, isSameClass, (, PrototypeMemberDeclaration, other, ), {, return, qualifiedClassName, ., equals, (, other]
[., getPrototypeClassName, (, lhs, ), ., getQualifiedName, (, ), ;, }, private, boolean, isSameClass, (, PrototypeMemberDeclaration, other, ), {, return]
[), ., getQualifiedName, (, ), ;, }, private, boolean, isSameClass, (, PrototypeMemberDeclaration, other, ), {, return, qualifiedClassName, ., equals, (]
[;, }, private, static, PrototypeMemberDeclaration, extractDeclaration, (, Node, n, ), {, if, (, !, NodeUtil, ., isPrototypePropertyDeclaration, (, n, )]
[., equals, (, other, ., qualifiedClassName, ), ;, }, private, static, PrototypeMemberDeclaration, extractDeclaration, (, Node, n, ), {, if, (]
[), ;, }, private, static, PrototypeMemberDeclaration, extractDeclaration, (, Node, n, ), {, if, (, !, NodeUtil, ., isPrototypePropertyDeclaration, (, n]
[., qualifiedClassName, ), ;, }, private, static, PrototypeMemberDeclaration, extractDeclaration, (, Node, n, ), {, if, (, !, NodeUtil, ., isPrototypePropertyDeclaration]
[), {, return, null, ;, }, Node, lhs, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, return]
[), {, return, null, ;, }, Node, lhs, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, return]
[., isPrototypePropertyDeclaration, (, n, ), ), {, return, null, ;, }, Node, lhs, =, n, ., getFirstChild, (, ), .]
[), ), {, return, null, ;, }, Node, lhs, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;]
[;, }, Node, lhs, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, return, new, PrototypeMemberDeclaration, (, lhs]
[;, return, new, PrototypeMemberDeclaration, (, lhs, ,, n, ), ;, }, }, }]
[., getFirstChild, (, ), ;, return, new, PrototypeMemberDeclaration, (, lhs, ,, n, ), ;, }, }, }]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, return, new, PrototypeMemberDeclaration, (, lhs, ,, n, ), ;, }, }]
[;, }, }, }]
[,, n, ), ;, }, }, }]
[), ;, }, }, }]
