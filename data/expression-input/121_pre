[java, ., util, ., Map, ;, public, class, ClosureReverseAbstractInterpreter, extends, ChainableReverseAbstractInterpreter, {, private, final, Visitor, <, JSType, >, restrictToArrayVisitor, =]
[JSType, >, restrictToArrayVisitor, =, new, RestrictByTrueTypeOfResultVisitor, (, ), {, @, Override, protected, JSType, caseTopType, (, JSType, topType, ), {, return]
[topType, ), {, return, topType, ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, JSType, arrayType, =]
[{, return, topType, ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, JSType, arrayType, =, getNativeType, (]
[}, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, JSType, arrayType, =, getNativeType, (, ARRAY_TYPE, ), ;, return]
[}, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, JSType, arrayType, =, getNativeType, (, ARRAY_TYPE, ), ;, return]
[}, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, JSType, arrayType, =, getNativeType, (, ARRAY_TYPE, ), ;, return]
[JSType, caseObjectType, (, ObjectType, type, ), {, JSType, arrayType, =, getNativeType, (, ARRAY_TYPE, ), ;, return, arrayType, ., isSubtype, (]
[ObjectType, type, ), {, JSType, arrayType, =, getNativeType, (, ARRAY_TYPE, ), ;, return, arrayType, ., isSubtype, (, type, ), ?]
[), {, JSType, arrayType, =, getNativeType, (, ARRAY_TYPE, ), ;, return, arrayType, ., isSubtype, (, type, ), ?, arrayType, :]
[isSubtype, (, type, ), ?, arrayType, :, null, ;, }, }, ;, private, final, Visitor, <, JSType, >, restrictToNotArrayVisitor, =]
[JSType, >, restrictToNotArrayVisitor, =, new, RestrictByFalseTypeOfResultVisitor, (, ), {, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return]
[JSType, >, restrictToNotArrayVisitor, =, new, RestrictByFalseTypeOfResultVisitor, (, ), {, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return]
[JSType, >, restrictToNotArrayVisitor, =, new, RestrictByFalseTypeOfResultVisitor, (, ), {, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return]
[new, RestrictByFalseTypeOfResultVisitor, (, ), {, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return, type, ., isSubtype, (]
[(, ), {, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return, type, ., isSubtype, (, getNativeType, (]
[Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return, type, ., isSubtype, (, getNativeType, (, ARRAY_TYPE, ), ), ?]
[JSType, caseObjectType, (, ObjectType, type, ), {, return, type, ., isSubtype, (, getNativeType, (, ARRAY_TYPE, ), ), ?, null, :]
[(, ARRAY_TYPE, ), ), ?, null, :, type, ;, }, }, ;, private, final, Visitor, <, JSType, >, restrictToObjectVisitor, =]
[JSType, >, restrictToObjectVisitor, =, new, RestrictByTrueTypeOfResultVisitor, (, ), {, @, Override, protected, JSType, caseTopType, (, JSType, topType, ), {, return]
[restrictToObjectVisitor, =, new, RestrictByTrueTypeOfResultVisitor, (, ), {, @, Override, protected, JSType, caseTopType, (, JSType, topType, ), {, return, getNativeType, (]
[), {, return, getNativeType, (, NO_OBJECT_TYPE, ), ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return]
[(, ObjectType, type, ), {, return, type, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return]
[caseFunctionType, (, FunctionType, type, ), {, return, type, ;, }, }, ;, private, final, Visitor, <, JSType, >, restrictToNotObjectVisitor, =]
[Visitor, <, JSType, >, restrictToNotObjectVisitor, =, new, RestrictByFalseTypeOfResultVisitor, (, ), {, @, Override, public, JSType, caseAllType, (, ), {, return]
[Visitor, <, JSType, >, restrictToNotObjectVisitor, =, new, RestrictByFalseTypeOfResultVisitor, (, ), {, @, Override, public, JSType, caseAllType, (, ), {, return]
[restrictToNotObjectVisitor, =, new, RestrictByFalseTypeOfResultVisitor, (, ), {, @, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (]
[new, RestrictByFalseTypeOfResultVisitor, (, ), {, @, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (, getNativeType, (]
[), {, @, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (, getNativeType, (, NUMBER_STRING_BOOLEAN, ), ,]
[@, Override, public, JSType, caseAllType, (, ), {, return, typeRegistry, ., createUnionType, (, getNativeType, (, NUMBER_STRING_BOOLEAN, ), ,, getNativeType, (]
[), ,, getNativeType, (, NULL_VOID, ), ), ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return]
[(, ObjectType, type, ), {, return, null, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return]
[TypeRestriction, ,, JSType, >, >, restricters, ;, public, ClosureReverseAbstractInterpreter, (, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (]
[JSType, >, >, restricters, ;, public, ClosureReverseAbstractInterpreter, (, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,]
[restricters, ;, public, ClosureReverseAbstractInterpreter, (, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;]
[restricters, ;, public, ClosureReverseAbstractInterpreter, (, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;]
[(, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, this, ., restricters, =]
[(, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, this, ., restricters, =]
[(, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, this, ., restricters, =]
[(, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, this, ., restricters, =]
[(, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, this, ., restricters, =]
[(, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, this, ., restricters, =]
[(, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, this, ., restricters, =]
[(, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, this, ., restricters, =]
[(, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, this, ., restricters, =]
[(, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, this, ., restricters, =]
[(, CodingConvention, convention, ,, final, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, this, ., restricters, =]
[=, new, ImmutableMap, ., Builder, <, String, ,, Function, <, TypeRestriction, ,, JSType, >, >, (, ), ., put, (]
[ImmutableMap, ., Builder, <, String, ,, Function, <, TypeRestriction, ,, JSType, >, >, (, ), ., put, (, "isDef", ,]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return]
[@, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (]
[@, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (]
[{, if, (, p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (, p, ., type, ), ;, }, else, {, return]
[{, if, (, p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (, p, ., type, ), ;, }, else, {, return]
[{, if, (, p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (, p, ., type, ), ;, }, else, {, return]
[{, if, (, p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (, p, ., type, ), ;, }, else, {, return]
[., outcome, ), {, return, getRestrictedWithoutUndefined, (, p, ., type, ), ;, }, else, {, return, p, ., type, !=]
[), {, return, getRestrictedWithoutUndefined, (, p, ., type, ), ;, }, else, {, return, p, ., type, !=, null, ?]
[), {, return, getRestrictedWithoutUndefined, (, p, ., type, ), ;, }, else, {, return, p, ., type, !=, null, ?]
[return, getRestrictedWithoutUndefined, (, p, ., type, ), ;, }, else, {, return, p, ., type, !=, null, ?, getNativeType, (]
[type, ), ;, }, else, {, return, p, ., type, !=, null, ?, getNativeType, (, VOID_TYPE, ), ., getGreatestSubtype, (]
[type, ), ;, }, else, {, return, p, ., type, !=, null, ?, getNativeType, (, VOID_TYPE, ), ., getGreatestSubtype, (]
[{, return, p, ., type, !=, null, ?, getNativeType, (, VOID_TYPE, ), ., getGreatestSubtype, (, p, ., type, ), :]
[(, VOID_TYPE, ), ., getGreatestSubtype, (, p, ., type, ), :, null, ;, }, }, }, ), ., put, (]
[), ., getGreatestSubtype, (, p, ., type, ), :, null, ;, }, }, }, ), ., put, (, "isNull", ,]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return]
[), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return]
[), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return]
[), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return]
[public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return, p, ., type, !=]
[apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return, p, ., type, !=, null, ?]
[apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return, p, ., type, !=, null, ?]
[TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return, p, ., type, !=, null, ?, getNativeType, (]
[(, p, ., outcome, ), {, return, p, ., type, !=, null, ?, getNativeType, (, NULL_TYPE, ), ., getGreatestSubtype, (]
[(, p, ., outcome, ), {, return, p, ., type, !=, null, ?, getNativeType, (, NULL_TYPE, ), ., getGreatestSubtype, (]
[{, return, p, ., type, !=, null, ?, getNativeType, (, NULL_TYPE, ), ., getGreatestSubtype, (, p, ., type, ), :]
[null, ?, getNativeType, (, NULL_TYPE, ), ., getGreatestSubtype, (, p, ., type, ), :, null, ;, }, else, {, return]
[getNativeType, (, NULL_TYPE, ), ., getGreatestSubtype, (, p, ., type, ), :, null, ;, }, else, {, return, getRestrictedWithoutNull, (]
[getNativeType, (, NULL_TYPE, ), ., getGreatestSubtype, (, p, ., type, ), :, null, ;, }, else, {, return, getRestrictedWithoutNull, (]
[null, ;, }, else, {, return, getRestrictedWithoutNull, (, p, ., type, ), ;, }, }, }, ), ., put, (]
[}, else, {, return, getRestrictedWithoutNull, (, p, ., type, ), ;, }, }, }, ), ., put, (, "isDefAndNotNull", ,]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return]
[@, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (]
[public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (, getRestrictedWithoutNull, (]
[public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (, getRestrictedWithoutNull, (]
[p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (, getRestrictedWithoutNull, (, p, ., type, ), ), ;, }, else, {, return]
[p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (, getRestrictedWithoutNull, (, p, ., type, ), ), ;, }, else, {, return]
[p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (, getRestrictedWithoutNull, (, p, ., type, ), ), ;, }, else, {, return]
[p, ., outcome, ), {, return, getRestrictedWithoutUndefined, (, getRestrictedWithoutNull, (, p, ., type, ), ), ;, }, else, {, return]
[{, return, getRestrictedWithoutUndefined, (, getRestrictedWithoutNull, (, p, ., type, ), ), ;, }, else, {, return, p, ., type, !=]
[getRestrictedWithoutUndefined, (, getRestrictedWithoutNull, (, p, ., type, ), ), ;, }, else, {, return, p, ., type, !=, null, ?]
[getRestrictedWithoutUndefined, (, getRestrictedWithoutNull, (, p, ., type, ), ), ;, }, else, {, return, p, ., type, !=, null, ?]
[getRestrictedWithoutNull, (, p, ., type, ), ), ;, }, else, {, return, p, ., type, !=, null, ?, getNativeType, (]
[), ), ;, }, else, {, return, p, ., type, !=, null, ?, getNativeType, (, NULL_VOID, ), ., getGreatestSubtype, (]
[), ), ;, }, else, {, return, p, ., type, !=, null, ?, getNativeType, (, NULL_VOID, ), ., getGreatestSubtype, (]
[{, return, p, ., type, !=, null, ?, getNativeType, (, NULL_VOID, ), ., getGreatestSubtype, (, p, ., type, ), :]
[(, NULL_VOID, ), ., getGreatestSubtype, (, p, ., type, ), :, null, ;, }, }, }, ), ., put, (]
[), ., getGreatestSubtype, (, p, ., type, ), :, null, ;, }, }, }, ), ., put, (, "isString", ,]
[Function, <, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return]
[TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (]
[TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (]
[(, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,]
[{, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,, "string", ,]
[{, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,, "string", ,]
[return, getRestrictedByTypeOfResult, (, p, ., type, ,, "string", ,, p, ., outcome, ), ;, }, }, ), ., put, (]
[(, p, ., type, ,, "string", ,, p, ., outcome, ), ;, }, }, ), ., put, (, "isBoolean", ,]
[Function, <, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return]
[TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (]
[TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (]
[(, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,]
[{, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,, "boolean", ,]
[{, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,, "boolean", ,]
[return, getRestrictedByTypeOfResult, (, p, ., type, ,, "boolean", ,, p, ., outcome, ), ;, }, }, ), ., put, (]
[(, p, ., type, ,, "boolean", ,, p, ., outcome, ), ;, }, }, ), ., put, (, "isNumber", ,]
[Function, <, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return]
[TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (]
[TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (]
[(, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,]
[{, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,, "number", ,]
[{, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,, "number", ,]
[return, getRestrictedByTypeOfResult, (, p, ., type, ,, "number", ,, p, ., outcome, ), ;, }, }, ), ., put, (]
[(, p, ., type, ,, "number", ,, p, ., outcome, ), ;, }, }, ), ., put, (, "isFunction", ,]
[Function, <, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return]
[TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (]
[TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (]
[(, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,]
[{, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,, "function", ,]
[{, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, return, getRestrictedByTypeOfResult, (, p, ., type, ,, "function", ,]
[return, getRestrictedByTypeOfResult, (, p, ., type, ,, "function", ,, p, ., outcome, ), ;, }, }, ), ., put, (]
[(, p, ., type, ,, "function", ,, p, ., outcome, ), ;, }, }, ), ., put, (, "isArray", ,]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[>, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., type, ==]
[@, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., type, ==, null, ), {, return]
[@, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., type, ==, null, ), {, return]
[@, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., type, ==, null, ), {, return]
[apply, (, TypeRestriction, p, ), {, if, (, p, ., type, ==, null, ), {, return, p, ., outcome, ?]
[TypeRestriction, p, ), {, if, (, p, ., type, ==, null, ), {, return, p, ., outcome, ?, getNativeType, (]
[{, if, (, p, ., type, ==, null, ), {, return, p, ., outcome, ?, getNativeType, (, ARRAY_TYPE, ), :]
[{, return, p, ., outcome, ?, getNativeType, (, ARRAY_TYPE, ), :, null, ;, }, Visitor, <, JSType, >, visitor, =]
[{, return, p, ., outcome, ?, getNativeType, (, ARRAY_TYPE, ), :, null, ;, }, Visitor, <, JSType, >, visitor, =]
[{, return, p, ., outcome, ?, getNativeType, (, ARRAY_TYPE, ), :, null, ;, }, Visitor, <, JSType, >, visitor, =]
[outcome, ?, getNativeType, (, ARRAY_TYPE, ), :, null, ;, }, Visitor, <, JSType, >, visitor, =, p, ., outcome, ?]
[getNativeType, (, ARRAY_TYPE, ), :, null, ;, }, Visitor, <, JSType, >, visitor, =, p, ., outcome, ?, restrictToArrayVisitor, :]
[), :, null, ;, }, Visitor, <, JSType, >, visitor, =, p, ., outcome, ?, restrictToArrayVisitor, :, restrictToNotArrayVisitor, ;, return]
[), :, null, ;, }, Visitor, <, JSType, >, visitor, =, p, ., outcome, ?, restrictToArrayVisitor, :, restrictToNotArrayVisitor, ;, return]
[), :, null, ;, }, Visitor, <, JSType, >, visitor, =, p, ., outcome, ?, restrictToArrayVisitor, :, restrictToNotArrayVisitor, ;, return]
[<, JSType, >, visitor, =, p, ., outcome, ?, restrictToArrayVisitor, :, restrictToNotArrayVisitor, ;, return, p, ., type, ., visit, (]
[restrictToArrayVisitor, :, restrictToNotArrayVisitor, ;, return, p, ., type, ., visit, (, visitor, ), ;, }, }, ), ., put, (]
[restrictToNotArrayVisitor, ;, return, p, ., type, ., visit, (, visitor, ), ;, }, }, ), ., put, (, "isObject", ,]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[<, TypeRestriction, ,, JSType, >, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (]
[>, (, ), {, @, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., type, ==]
[@, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., type, ==, null, ), {, return]
[@, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., type, ==, null, ), {, return]
[@, Override, public, JSType, apply, (, TypeRestriction, p, ), {, if, (, p, ., type, ==, null, ), {, return]
[apply, (, TypeRestriction, p, ), {, if, (, p, ., type, ==, null, ), {, return, p, ., outcome, ?]
[TypeRestriction, p, ), {, if, (, p, ., type, ==, null, ), {, return, p, ., outcome, ?, getNativeType, (]
[{, if, (, p, ., type, ==, null, ), {, return, p, ., outcome, ?, getNativeType, (, OBJECT_TYPE, ), :]
[{, return, p, ., outcome, ?, getNativeType, (, OBJECT_TYPE, ), :, null, ;, }, Visitor, <, JSType, >, visitor, =]
[{, return, p, ., outcome, ?, getNativeType, (, OBJECT_TYPE, ), :, null, ;, }, Visitor, <, JSType, >, visitor, =]
[{, return, p, ., outcome, ?, getNativeType, (, OBJECT_TYPE, ), :, null, ;, }, Visitor, <, JSType, >, visitor, =]
[outcome, ?, getNativeType, (, OBJECT_TYPE, ), :, null, ;, }, Visitor, <, JSType, >, visitor, =, p, ., outcome, ?]
[getNativeType, (, OBJECT_TYPE, ), :, null, ;, }, Visitor, <, JSType, >, visitor, =, p, ., outcome, ?, restrictToObjectVisitor, :]
[), :, null, ;, }, Visitor, <, JSType, >, visitor, =, p, ., outcome, ?, restrictToObjectVisitor, :, restrictToNotObjectVisitor, ;, return]
[), :, null, ;, }, Visitor, <, JSType, >, visitor, =, p, ., outcome, ?, restrictToObjectVisitor, :, restrictToNotObjectVisitor, ;, return]
[), :, null, ;, }, Visitor, <, JSType, >, visitor, =, p, ., outcome, ?, restrictToObjectVisitor, :, restrictToNotObjectVisitor, ;, return]
[<, JSType, >, visitor, =, p, ., outcome, ?, restrictToObjectVisitor, :, restrictToNotObjectVisitor, ;, return, p, ., type, ., visit, (]
[;, }, @, Override, public, FlowScope, getPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, if, (]
[;, }, @, Override, public, FlowScope, getPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, if, (]
[;, }, @, Override, public, FlowScope, getPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, if, (]
[getPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, if, (, condition, ., isCall, (, ), &&]
[getPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, if, (, condition, ., isCall, (, ), &&]
[getPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, if, (, condition, ., isCall, (, ), &&]
[blindScope, ,, boolean, outcome, ), {, if, (, condition, ., isCall, (, ), &&, condition, ., getChildCount, (, ), ==]
[if, (, condition, ., isCall, (, ), &&, condition, ., getChildCount, (, ), ==, 2, ), {, Node, callee, =]
[if, (, condition, ., isCall, (, ), &&, condition, ., getChildCount, (, ), ==, 2, ), {, Node, callee, =]
[., getChildCount, (, ), ==, 2, ), {, Node, callee, =, condition, ., getFirstChild, (, ), ;, Node, param, =]
[., getChildCount, (, ), ==, 2, ), {, Node, callee, =, condition, ., getFirstChild, (, ), ;, Node, param, =]
[Node, callee, =, condition, ., getFirstChild, (, ), ;, Node, param, =, condition, ., getLastChild, (, ), ;, if, (]
[Node, callee, =, condition, ., getFirstChild, (, ), ;, Node, param, =, condition, ., getLastChild, (, ), ;, if, (]
[Node, callee, =, condition, ., getFirstChild, (, ), ;, Node, param, =, condition, ., getLastChild, (, ), ;, if, (]
[(, ), ;, Node, param, =, condition, ., getLastChild, (, ), ;, if, (, callee, ., isGetProp, (, ), &&]
[(, ), ;, Node, param, =, condition, ., getLastChild, (, ), ;, if, (, callee, ., isGetProp, (, ), &&]
[), ;, if, (, callee, ., isGetProp, (, ), &&, param, ., isQualifiedName, (, ), ), {, JSType, paramType, =]
[if, (, callee, ., isGetProp, (, ), &&, param, ., isQualifiedName, (, ), ), {, JSType, paramType, =, getTypeIfRefinable, (]
[callee, ., isGetProp, (, ), &&, param, ., isQualifiedName, (, ), ), {, JSType, paramType, =, getTypeIfRefinable, (, param, ,]
[param, ., isQualifiedName, (, ), ), {, JSType, paramType, =, getTypeIfRefinable, (, param, ,, blindScope, ), ;, Node, left, =]
[param, ., isQualifiedName, (, ), ), {, JSType, paramType, =, getTypeIfRefinable, (, param, ,, blindScope, ), ;, Node, left, =]
[=, getTypeIfRefinable, (, param, ,, blindScope, ), ;, Node, left, =, callee, ., getFirstChild, (, ), ;, Node, right, =]
[=, getTypeIfRefinable, (, param, ,, blindScope, ), ;, Node, left, =, callee, ., getFirstChild, (, ), ;, Node, right, =]
[Node, left, =, callee, ., getFirstChild, (, ), ;, Node, right, =, callee, ., getLastChild, (, ), ;, if, (]
[Node, left, =, callee, ., getFirstChild, (, ), ;, Node, right, =, callee, ., getLastChild, (, ), ;, if, (]
[Node, left, =, callee, ., getFirstChild, (, ), ;, Node, right, =, callee, ., getLastChild, (, ), ;, if, (]
[Node, left, =, callee, ., getFirstChild, (, ), ;, Node, right, =, callee, ., getLastChild, (, ), ;, if, (]
[(, ), ;, Node, right, =, callee, ., getLastChild, (, ), ;, if, (, left, ., isName, (, ), &&]
[(, ), ;, Node, right, =, callee, ., getLastChild, (, ), ;, if, (, left, ., isName, (, ), &&]
[right, =, callee, ., getLastChild, (, ), ;, if, (, left, ., isName, (, ), &&, "goog", ., equals, (]
[right, =, callee, ., getLastChild, (, ), ;, if, (, left, ., isName, (, ), &&, "goog", ., equals, (]
[;, if, (, left, ., isName, (, ), &&, "goog", ., equals, (, left, ., getString, (, ), ), &&]
[;, if, (, left, ., isName, (, ), &&, "goog", ., equals, (, left, ., getString, (, ), ), &&]
[getString, (, ), ), &&, right, ., isString, (, ), ), {, Function, <, TypeRestriction, ,, JSType, >, restricter, =]
[getString, (, ), ), &&, right, ., isString, (, ), ), {, Function, <, TypeRestriction, ,, JSType, >, restricter, =]
[&&, right, ., isString, (, ), ), {, Function, <, TypeRestriction, ,, JSType, >, restricter, =, restricters, ., get, (]
[&&, right, ., isString, (, ), ), {, Function, <, TypeRestriction, ,, JSType, >, restricter, =, restricters, ., get, (]
[<, TypeRestriction, ,, JSType, >, restricter, =, restricters, ., get, (, right, ., getString, (, ), ), ;, if, (]
[<, TypeRestriction, ,, JSType, >, restricter, =, restricters, ., get, (, right, ., getString, (, ), ), ;, if, (]
[,, JSType, >, restricter, =, restricters, ., get, (, right, ., getString, (, ), ), ;, if, (, restricter, !=]
[=, restricters, ., get, (, right, ., getString, (, ), ), ;, if, (, restricter, !=, null, ), {, return]
[., get, (, right, ., getString, (, ), ), ;, if, (, restricter, !=, null, ), {, return, restrictParameter, (]
[(, right, ., getString, (, ), ), ;, if, (, restricter, !=, null, ), {, return, restrictParameter, (, param, ,]
[., getString, (, ), ), ;, if, (, restricter, !=, null, ), {, return, restrictParameter, (, param, ,, paramType, ,]
[(, ), ), ;, if, (, restricter, !=, null, ), {, return, restrictParameter, (, param, ,, paramType, ,, blindScope, ,]
[), ;, if, (, restricter, !=, null, ), {, return, restrictParameter, (, param, ,, paramType, ,, blindScope, ,, restricter, ,]
[{, return, restrictParameter, (, param, ,, paramType, ,, blindScope, ,, restricter, ,, outcome, ), ;, }, }, }, }, return]
[restrictParameter, (, param, ,, paramType, ,, blindScope, ,, restricter, ,, outcome, ), ;, }, }, }, }, return, nextPreciserScopeKnowingConditionOutcome, (]
[param, ,, paramType, ,, blindScope, ,, restricter, ,, outcome, ), ;, }, }, }, }, return, nextPreciserScopeKnowingConditionOutcome, (, condition, ,]
[paramType, ,, blindScope, ,, restricter, ,, outcome, ), ;, }, }, }, }, return, nextPreciserScopeKnowingConditionOutcome, (, condition, ,, blindScope, ,]
[parameter, ,, JSType, type, ,, FlowScope, blindScope, ,, Function, <, TypeRestriction, ,, JSType, >, restriction, ,, boolean, outcome, ), {]
[JSType, type, ,, FlowScope, blindScope, ,, Function, <, TypeRestriction, ,, JSType, >, restriction, ,, boolean, outcome, ), {, type, =]
[JSType, type, ,, FlowScope, blindScope, ,, Function, <, TypeRestriction, ,, JSType, >, restriction, ,, boolean, outcome, ), {, type, =]
[blindScope, ,, Function, <, TypeRestriction, ,, JSType, >, restriction, ,, boolean, outcome, ), {, type, =, restriction, ., apply, (]
[<, TypeRestriction, ,, JSType, >, restriction, ,, boolean, outcome, ), {, type, =, restriction, ., apply, (, new, TypeRestriction, (]
[,, JSType, >, restriction, ,, boolean, outcome, ), {, type, =, restriction, ., apply, (, new, TypeRestriction, (, type, ,]
[outcome, ), {, type, =, restriction, ., apply, (, new, TypeRestriction, (, type, ,, outcome, ), ), ;, if, (]
[outcome, ), {, type, =, restriction, ., apply, (, new, TypeRestriction, (, type, ,, outcome, ), ), ;, if, (]
[{, type, =, restriction, ., apply, (, new, TypeRestriction, (, type, ,, outcome, ), ), ;, if, (, type, !=]
[(, new, TypeRestriction, (, type, ,, outcome, ), ), ;, if, (, type, !=, null, ), {, FlowScope, informed, =]
[(, new, TypeRestriction, (, type, ,, outcome, ), ), ;, if, (, type, !=, null, ), {, FlowScope, informed, =]
[outcome, ), ), ;, if, (, type, !=, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;]
[), ;, if, (, type, !=, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (]
[if, (, type, !=, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,]
[type, !=, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, parameter, ,]
[{, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, parameter, ,, type, ), ;, return]
[createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, parameter, ,, type, ), ;, return, informed, ;, }, else, {, return]
[private, final, JSType, type, ;, private, final, boolean, outcome, ;, private, TypeRestriction, (, JSType, type, ,, boolean, outcome, ), {]
[private, final, JSType, type, ;, private, final, boolean, outcome, ;, private, TypeRestriction, (, JSType, type, ,, boolean, outcome, ), {]
[;, private, final, boolean, outcome, ;, private, TypeRestriction, (, JSType, type, ,, boolean, outcome, ), {, this, ., type, =]
[final, boolean, outcome, ;, private, TypeRestriction, (, JSType, type, ,, boolean, outcome, ), {, this, ., type, =, type, ;]
[final, boolean, outcome, ;, private, TypeRestriction, (, JSType, type, ,, boolean, outcome, ), {, this, ., type, =, type, ;]
[private, TypeRestriction, (, JSType, type, ,, boolean, outcome, ), {, this, ., type, =, type, ;, this, ., outcome, =]
