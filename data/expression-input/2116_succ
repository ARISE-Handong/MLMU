[;, private, static, final, double, GOLD, =, 1.618034, ;, private, final, double, growLimit, ;, private, final, Incrementor, evaluations, =, new]
[;, private, final, double, growLimit, ;, private, final, Incrementor, evaluations, =, new, Incrementor, (, ), ;, private, double, lo, ;]
[;, private, double, lo, ;, private, double, hi, ;, private, double, mid, ;, private, double, fLo, ;, private, double, fHi]
[,, 50, ), ;, }, public, BracketFinder, (, double, growLimit, ,, int, maxEvaluations, ), {, if, (, growLimit, <=, 0]
[), ;, }, public, BracketFinder, (, double, growLimit, ,, int, maxEvaluations, ), {, if, (, growLimit, <=, 0, ), {]
[), {, throw, new, NotStrictlyPositiveException, (, growLimit, ), ;, }, if, (, maxEvaluations, <=, 0, ), {, throw, new, NotStrictlyPositiveException]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, growLimit, ), ;, }, if, (, maxEvaluations, <=, 0, ), {, throw]
[), {, throw, new, NotStrictlyPositiveException, (, growLimit, ), ;, }, if, (, maxEvaluations, <=, 0, ), {, throw, new, NotStrictlyPositiveException]
[;, }, if, (, maxEvaluations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, maxEvaluations, ), ;, }, this, ., growLimit]
[), ;, }, if, (, maxEvaluations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, maxEvaluations, ), ;, }, this, .]
[), {, throw, new, NotStrictlyPositiveException, (, maxEvaluations, ), ;, }, this, ., growLimit, =, growLimit, ;, evaluations, ., setMaximalCount, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, maxEvaluations, ), ;, }, this, ., growLimit, =, growLimit, ;, evaluations, .]
[), {, throw, new, NotStrictlyPositiveException, (, maxEvaluations, ), ;, }, this, ., growLimit, =, growLimit, ;, evaluations, ., setMaximalCount, (]
[;, }, this, ., growLimit, =, growLimit, ;, evaluations, ., setMaximalCount, (, maxEvaluations, ), ;, }, public, void, search, (]
[), ;, }, this, ., growLimit, =, growLimit, ;, evaluations, ., setMaximalCount, (, maxEvaluations, ), ;, }, public, void, search]
[=, growLimit, ;, evaluations, ., setMaximalCount, (, maxEvaluations, ), ;, }, public, void, search, (, UnivariateFunction, func, ,, GoalType, goal]
[., growLimit, =, growLimit, ;, evaluations, ., setMaximalCount, (, maxEvaluations, ), ;, }, public, void, search, (, UnivariateFunction, func, ,]
[;, evaluations, ., setMaximalCount, (, maxEvaluations, ), ;, }, public, void, search, (, UnivariateFunction, func, ,, GoalType, goal, ,, double]
[;, }, public, void, search, (, UnivariateFunction, func, ,, GoalType, goal, ,, double, xA, ,, double, xB, ), {, evaluations]
[., setMaximalCount, (, maxEvaluations, ), ;, }, public, void, search, (, UnivariateFunction, func, ,, GoalType, goal, ,, double, xA, ,]
[), ;, }, public, void, search, (, UnivariateFunction, func, ,, GoalType, goal, ,, double, xA, ,, double, xB, ), {]
[;, final, boolean, isMinim, =, goal, ==, GoalType, ., MINIMIZE, ;, double, fA, =, eval, (, func, ,, xA, )]
[., resetCount, (, ), ;, final, boolean, isMinim, =, goal, ==, GoalType, ., MINIMIZE, ;, double, fA, =, eval, (]
[;, double, fA, =, eval, (, func, ,, xA, ), ;, double, fB, =, eval, (, func, ,, xB, )]
[==, GoalType, ., MINIMIZE, ;, double, fA, =, eval, (, func, ,, xA, ), ;, double, fB, =, eval, (]
[;, double, fA, =, eval, (, func, ,, xA, ), ;, double, fB, =, eval, (, func, ,, xB, )]
[., MINIMIZE, ;, double, fA, =, eval, (, func, ,, xA, ), ;, double, fB, =, eval, (, func, ,]
[;, double, fB, =, eval, (, func, ,, xB, ), ;, if, (, isMinim, ?, fA, <, fB, :, fA]
[,, xA, ), ;, double, fB, =, eval, (, func, ,, xB, ), ;, if, (, isMinim, ?, fA, <]
[), ;, double, fB, =, eval, (, func, ,, xB, ), ;, if, (, isMinim, ?, fA, <, fB, :]
[;, if, (, isMinim, ?, fA, <, fB, :, fA, >, fB, ), {, double, tmp, =, xA, ;, xA]
[,, xB, ), ;, if, (, isMinim, ?, fA, <, fB, :, fA, >, fB, ), {, double, tmp, =]
[), ;, if, (, isMinim, ?, fA, <, fB, :, fA, >, fB, ), {, double, tmp, =, xA, ;]
[), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp, ;, tmp, =, fA, ;, fA]
[?, fA, <, fB, :, fA, >, fB, ), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB]
[:, fA, >, fB, ), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp, ;, tmp]
[<, fB, :, fA, >, fB, ), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp]
[:, fA, >, fB, ), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp, ;, tmp]
[), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp, ;, tmp, =, fA, ;, fA]
[>, fB, ), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp, ;, tmp, =, fA]
[), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp, ;, tmp, =, fA, ;, fA]
[;, xA, =, xB, ;, xB, =, tmp, ;, tmp, =, fA, ;, fA, =, fB, ;, fB, =, tmp]
[=, xB, ;, xB, =, tmp, ;, tmp, =, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }]
[;, xB, =, tmp, ;, tmp, =, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC]
[=, tmp, ;, tmp, =, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =, xB]
[;, tmp, =, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =, xB, +, GOLD]
[=, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =, xB, +, GOLD, *, (]
[;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =, xB, +, GOLD, *, (, xB, -]
[=, fB, ;, fB, =, tmp, ;, }, double, xC, =, xB, +, GOLD, *, (, xB, -, xA, )]
[;, fB, =, tmp, ;, }, double, xC, =, xB, +, GOLD, *, (, xB, -, xA, ), ;, double]
[=, tmp, ;, }, double, xC, =, xB, +, GOLD, *, (, xB, -, xA, ), ;, double, fC, =]
[;, }, double, xC, =, xB, +, GOLD, *, (, xB, -, xA, ), ;, double, fC, =, eval, (]
[;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?, fC, <, fB, :, fC]
[+, GOLD, *, (, xB, -, xA, ), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while]
[;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?, fC, <, fB, :, fC]
[*, (, xB, -, xA, ), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim]
[;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?, fC, <, fB, :, fC]
[), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?, fC, <, fB, :]
[-, xA, ), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?, fC, <]
[), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?, fC, <, fB, :]
[;, while, (, isMinim, ?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =, (, xB, -]
[,, xC, ), ;, while, (, isMinim, ?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =]
[), ;, while, (, isMinim, ?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =, (, xB]
[), {, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =]
[?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =, (, xB, -, xA, ), *, (]
[:, fC, >, fB, ), {, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -, fC, )]
[<, fB, :, fC, >, fB, ), {, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -]
[:, fC, >, fB, ), {, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -, fC, )]
[), {, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =]
[>, fB, ), {, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -, fC, ), ;, double]
[), {, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =]
[;, double, tmp2, =, (, xB, -, xC, ), *, (, fB, -, fA, ), ;, double, val, =, tmp2]
[*, (, fB, -, fC, ), ;, double, tmp2, =, (, xB, -, xC, ), *, (, fB, -, fA]
[), *, (, fB, -, fC, ), ;, double, tmp2, =, (, xB, -, xC, ), *, (, fB, -]
[-, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =, (, xB, -, xC, ), *, (]
[), *, (, fB, -, fC, ), ;, double, tmp2, =, (, xB, -, xC, ), *, (, fB, -]
[;, double, tmp2, =, (, xB, -, xC, ), *, (, fB, -, fA, ), ;, double, val, =, tmp2]
[), ;, double, tmp2, =, (, xB, -, xC, ), *, (, fB, -, fA, ), ;, double, val, =]
[-, fC, ), ;, double, tmp2, =, (, xB, -, xC, ), *, (, fB, -, fA, ), ;, double]
[), ;, double, tmp2, =, (, xB, -, xC, ), *, (, fB, -, fA, ), ;, double, val, =]
[;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN, ?]
[*, (, fB, -, fA, ), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, ., abs]
[), *, (, fB, -, fA, ), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, .]
[-, xC, ), *, (, fB, -, fA, ), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =]
[), *, (, fB, -, fA, ), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, .]
[;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN, ?]
[), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN]
[-, fA, ), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (, val, )]
[), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN]
[;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val]
[-, tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2]
[;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val]
[;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -, (, xB, -, xA, )]
[?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -, xC, )]
[<, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -]
[., abs, (, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB]
[), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (, (, xB]
[?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -, xC, )]
[:, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -, (]
[*, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2]
[:, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -, (]
[;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -, (, xB, -, xA, )]
[*, val, ;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -, (, xB, -]
[;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -, (, xB, -, xA, )]
[;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (, (]
[-, (, (, xB, -, xC, ), *, tmp2, -, (, xB, -, xA, ), *, tmp1, ), /, denom]
[;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (, (]
[/, denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if]
[), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;]
[-, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (]
[*, tmp2, -, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +, growLimit]
[), *, tmp2, -, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +]
[-, xC, ), *, tmp2, -, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =]
[), *, tmp2, -, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +]
[-, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (]
[), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;]
[*, tmp1, ), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double]
[), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;]
[-, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB]
[), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;]
[), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;]
[;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (, (]
[;, double, fW, ;, if, (, (, w, -, xC, ), *, (, xB, -, w, ), >, 0, )]
[+, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (, (, w, -, xC, ), *]
[;, double, fW, ;, if, (, (, w, -, xC, ), *, (, xB, -, w, ), >, 0, )]
[*, (, xC, -, xB, ), ;, double, fW, ;, if, (, (, w, -, xC, ), *, (, xB]
[;, double, fW, ;, if, (, (, w, -, xC, ), *, (, xB, -, w, ), >, 0, )]
[), ;, double, fW, ;, if, (, (, w, -, xC, ), *, (, xB, -, w, ), >, 0]
[-, xB, ), ;, double, fW, ;, if, (, (, w, -, xC, ), *, (, xB, -, w, )]
[), ;, double, fW, ;, if, (, (, w, -, xC, ), *, (, xB, -, w, ), >, 0]
[), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW]
[>, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC]
[*, (, xB, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if]
[), *, (, xB, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;]
[-, xC, ), *, (, xB, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w]
[), *, (, xB, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;]
[>, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC]
[), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <]
[-, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?]
[), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <]
[), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW]
[=, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, )]
[;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xA, =, xB, ;, xB, =]
[,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xA, =, xB]
[), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xA, =, xB, ;, xB]
[), {, xA, =, xB, ;, xB, =, w, ;, fA, =, fB, ;, fB, =, fW, ;, break, ;]
[?, fW, <, fC, :, fW, >, fC, ), {, xA, =, xB, ;, xB, =, w, ;, fA, =]
[:, fW, >, fC, ), {, xA, =, xB, ;, xB, =, w, ;, fA, =, fB, ;, fB, =]
[<, fC, :, fW, >, fC, ), {, xA, =, xB, ;, xB, =, w, ;, fA, =, fB, ;]
[:, fW, >, fC, ), {, xA, =, xB, ;, xB, =, w, ;, fA, =, fB, ;, fB, =]
[), {, xA, =, xB, ;, xB, =, w, ;, fA, =, fB, ;, fB, =, fW, ;, break, ;]
[>, fC, ), {, xA, =, xB, ;, xB, =, w, ;, fA, =, fB, ;, fB, =, fW, ;]
[), {, xA, =, xB, ;, xB, =, w, ;, fA, =, fB, ;, fB, =, fW, ;, break, ;]
[=, xB, ;, xB, =, w, ;, fA, =, fB, ;, fB, =, fW, ;, break, ;, }, else, if]
[;, xB, =, w, ;, fA, =, fB, ;, fB, =, fW, ;, break, ;, }, else, if, (, isMinim]
[=, w, ;, fA, =, fB, ;, fB, =, fW, ;, break, ;, }, else, if, (, isMinim, ?, fW]
[;, fA, =, fB, ;, fB, =, fW, ;, break, ;, }, else, if, (, isMinim, ?, fW, >, fB]
[=, fB, ;, fB, =, fW, ;, break, ;, }, else, if, (, isMinim, ?, fW, >, fB, :, fW]
[;, fB, =, fW, ;, break, ;, }, else, if, (, isMinim, ?, fW, >, fB, :, fW, <, fB]
[=, fW, ;, break, ;, }, else, if, (, isMinim, ?, fW, >, fB, :, fW, <, fB, ), {]
[;, break, ;, }, else, if, (, isMinim, ?, fW, >, fB, :, fW, <, fB, ), {, xC, =]
[), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC, +, GOLD, *, (]
[?, fW, >, fB, :, fW, <, fB, ), {, xC, =, w, ;, fC, =, fW, ;, break, ;]
[:, fW, <, fB, ), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC]
[>, fB, :, fW, <, fB, ), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w]
[:, fW, <, fB, ), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC]
[), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC, +, GOLD, *, (]
[<, fB, ), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC, +, GOLD]
[), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC, +, GOLD, *, (]
[=, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC, +, GOLD, *, (, xC, -, xB]
[;, fC, =, fW, ;, break, ;, }, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;]
[=, fW, ;, break, ;, }, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =]
[;, break, ;, }, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =, eval, (]
[=, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;]
[;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *]
[+, GOLD, *, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, else]
[;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *]
[*, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (]
[;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *]
[), ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, )]
[-, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -]
[), ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, )]
[=, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (, wLim]
[;, }, else, if, (, (, w, -, wLim, ), *, (, wLim, -, xC, ), >=, 0, ), {]
[,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (, wLim, -, xC, ), >=]
[), ;, }, else, if, (, (, w, -, wLim, ), *, (, wLim, -, xC, ), >=, 0, )]
[), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (]
[>=, 0, ), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if]
[*, (, wLim, -, xC, ), >=, 0, ), {, w, =, wLim, ;, fW, =, eval, (, func, ,]
[), *, (, wLim, -, xC, ), >=, 0, ), {, w, =, wLim, ;, fW, =, eval, (, func]
[-, wLim, ), *, (, wLim, -, xC, ), >=, 0, ), {, w, =, wLim, ;, fW, =, eval]
[), *, (, wLim, -, xC, ), >=, 0, ), {, w, =, wLim, ;, fW, =, eval, (, func]
[>=, 0, ), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if]
[), >=, 0, ), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else]
[-, xC, ), >=, 0, ), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;]
[), >=, 0, ), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else]
[), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (]
[=, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim]
[;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *]
[=, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (, xC]
[;, }, else, if, (, (, w, -, wLim, ), *, (, xC, -, w, ), >, 0, ), {]
[,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (, xC, -, w, ), >]
[), ;, }, else, if, (, (, w, -, wLim, ), *, (, xC, -, w, ), >, 0, )]
[), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW]
[>, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC]
[*, (, xC, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if]
[), *, (, xC, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;]
[-, wLim, ), *, (, xC, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w]
[), *, (, xC, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;]
[>, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC]
[), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <]
[-, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?]
[), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <]
[), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW]
[=, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, )]
[;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xB, =, xC, ;, xC, =]
[,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xB, =, xC]
[), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xB, =, xC, ;, xC]
[), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *, (, xC, -, xB]
[?, fW, <, fC, :, fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =]
[:, fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *]
[<, fC, :, fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +]
[:, fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *]
[), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *, (, xC, -, xB]
[>, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *, (, xC]
[), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *, (, xC, -, xB]
[=, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fB]
[;, xC, =, w, ;, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fB, =, fC]
[=, w, ;, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fB, =, fC, ;, fC]
[;, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fB, =, fC, ;, fC, =, fW]
[=, xC, +, GOLD, *, (, xC, -, xB, ), ;, fB, =, fC, ;, fC, =, fW, ;, fW]
[;, fB, =, fC, ;, fC, =, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }, }]
[+, GOLD, *, (, xC, -, xB, ), ;, fB, =, fC, ;, fC, =, fW, ;, fW, =, eval]
[;, fB, =, fC, ;, fC, =, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }, }]
[*, (, xC, -, xB, ), ;, fB, =, fC, ;, fC, =, fW, ;, fW, =, eval, (, func]
[;, fB, =, fC, ;, fC, =, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }, }]
[), ;, fB, =, fC, ;, fC, =, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }]
[-, xB, ), ;, fB, =, fC, ;, fC, =, fW, ;, fW, =, eval, (, func, ,, w, )]
[), ;, fB, =, fC, ;, fC, =, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }]
[=, fC, ;, fC, =, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }, }, else, {]
[;, fC, =, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }, }, else, {, w, =]
[=, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }, }, else, {, w, =, xC, +]
[;, fW, =, eval, (, func, ,, w, ), ;, }, }, else, {, w, =, xC, +, GOLD, *]
[=, eval, (, func, ,, w, ), ;, }, }, else, {, w, =, xC, +, GOLD, *, (, xC]
[;, }, }, else, {, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =, eval]
[,, w, ), ;, }, }, else, {, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;]
[), ;, }, }, else, {, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =]
[=, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;]
[;, fW, =, eval, (, func, ,, w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;, xB]
[+, GOLD, *, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, xA]
[;, fW, =, eval, (, func, ,, w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;, xB]
[*, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, xA, =, xB]
[;, fW, =, eval, (, func, ,, w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;, xB]
[), ;, fW, =, eval, (, func, ,, w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;]
[-, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, xA, =, xB, ;, fA, =]
[), ;, fW, =, eval, (, func, ,, w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;]
[=, eval, (, func, ,, w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;, xB, =, xC]
[;, }, xA, =, xB, ;, fA, =, fB, ;, xB, =, xC, ;, fB, =, fC, ;, xC, =]
[,, w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;, xB, =, xC, ;, fB, =, fC]
[), ;, }, xA, =, xB, ;, fA, =, fB, ;, xB, =, xC, ;, fB, =, fC, ;, xC]
[=, xB, ;, fA, =, fB, ;, xB, =, xC, ;, fB, =, fC, ;, xC, =, w, ;, fC]
[;, fA, =, fB, ;, xB, =, xC, ;, fB, =, fC, ;, xC, =, w, ;, fC, =, fW]
[=, fB, ;, xB, =, xC, ;, fB, =, fC, ;, xC, =, w, ;, fC, =, fW, ;, }]
[;, xB, =, xC, ;, fB, =, fC, ;, xC, =, w, ;, fC, =, fW, ;, }, lo, =]
[=, xC, ;, fB, =, fC, ;, xC, =, w, ;, fC, =, fW, ;, }, lo, =, xA, ;]
[;, fB, =, fC, ;, xC, =, w, ;, fC, =, fW, ;, }, lo, =, xA, ;, fLo, =]
[=, fC, ;, xC, =, w, ;, fC, =, fW, ;, }, lo, =, xA, ;, fLo, =, fA, ;]
[;, xC, =, w, ;, fC, =, fW, ;, }, lo, =, xA, ;, fLo, =, fA, ;, mid, =]
[=, w, ;, fC, =, fW, ;, }, lo, =, xA, ;, fLo, =, fA, ;, mid, =, xB, ;]
[;, fC, =, fW, ;, }, lo, =, xA, ;, fLo, =, fA, ;, mid, =, xB, ;, fMid, =]
[=, fW, ;, }, lo, =, xA, ;, fLo, =, fA, ;, mid, =, xB, ;, fMid, =, fB, ;]
[;, }, lo, =, xA, ;, fLo, =, fA, ;, mid, =, xB, ;, fMid, =, fB, ;, hi, =]
[=, xA, ;, fLo, =, fA, ;, mid, =, xB, ;, fMid, =, fB, ;, hi, =, xC, ;, fHi]
[;, fLo, =, fA, ;, mid, =, xB, ;, fMid, =, fB, ;, hi, =, xC, ;, fHi, =, fC]
[=, fA, ;, mid, =, xB, ;, fMid, =, fB, ;, hi, =, xC, ;, fHi, =, fC, ;, if]
[;, mid, =, xB, ;, fMid, =, fB, ;, hi, =, xC, ;, fHi, =, fC, ;, if, (, lo]
[=, xB, ;, fMid, =, fB, ;, hi, =, xC, ;, fHi, =, fC, ;, if, (, lo, >, hi]
[;, fMid, =, fB, ;, hi, =, xC, ;, fHi, =, fC, ;, if, (, lo, >, hi, ), {]
[=, fB, ;, hi, =, xC, ;, fHi, =, fC, ;, if, (, lo, >, hi, ), {, double, tmp]
[;, hi, =, xC, ;, fHi, =, fC, ;, if, (, lo, >, hi, ), {, double, tmp, =, lo]
[=, xC, ;, fHi, =, fC, ;, if, (, lo, >, hi, ), {, double, tmp, =, lo, ;, lo]
[;, fHi, =, fC, ;, if, (, lo, >, hi, ), {, double, tmp, =, lo, ;, lo, =, hi]
[=, fC, ;, if, (, lo, >, hi, ), {, double, tmp, =, lo, ;, lo, =, hi, ;, hi]
[;, if, (, lo, >, hi, ), {, double, tmp, =, lo, ;, lo, =, hi, ;, hi, =, tmp]
[), {, double, tmp, =, lo, ;, lo, =, hi, ;, hi, =, tmp, ;, tmp, =, fLo, ;, fLo]
[>, hi, ), {, double, tmp, =, lo, ;, lo, =, hi, ;, hi, =, tmp, ;, tmp, =, fLo]
[), {, double, tmp, =, lo, ;, lo, =, hi, ;, hi, =, tmp, ;, tmp, =, fLo, ;, fLo]
[;, lo, =, hi, ;, hi, =, tmp, ;, tmp, =, fLo, ;, fLo, =, fHi, ;, fHi, =, tmp]
[=, hi, ;, hi, =, tmp, ;, tmp, =, fLo, ;, fLo, =, fHi, ;, fHi, =, tmp, ;, }]
[;, hi, =, tmp, ;, tmp, =, fLo, ;, fLo, =, fHi, ;, fHi, =, tmp, ;, }, }, public]
[=, tmp, ;, tmp, =, fLo, ;, fLo, =, fHi, ;, fHi, =, tmp, ;, }, }, public, int, getMaxEvaluations]
[;, tmp, =, fLo, ;, fLo, =, fHi, ;, fHi, =, tmp, ;, }, }, public, int, getMaxEvaluations, (, )]
[=, fLo, ;, fLo, =, fHi, ;, fHi, =, tmp, ;, }, }, public, int, getMaxEvaluations, (, ), {, return]
[;, fLo, =, fHi, ;, fHi, =, tmp, ;, }, }, public, int, getMaxEvaluations, (, ), {, return, evaluations, .]
[=, fHi, ;, fHi, =, tmp, ;, }, }, public, int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (]
[;, fHi, =, tmp, ;, }, }, public, int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;]
[=, tmp, ;, }, }, public, int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public]
[;, }, }, public, int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations]
[;, }, public, int, getEvaluations, (, ), {, return, evaluations, ., getCount, (, ), ;, }, public, double, getLo, (]
[., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return, evaluations, ., getCount, (, ), ;, }]
[;, }, public, double, getLo, (, ), {, return, lo, ;, }, public, double, getFLo, (, ), {, return, fLo]
[., getCount, (, ), ;, }, public, double, getLo, (, ), {, return, lo, ;, }, public, double, getFLo, (]
[;, }, public, double, getFLo, (, ), {, return, fLo, ;, }, public, double, getHi, (, ), {, return, hi]
[;, }, public, double, getHi, (, ), {, return, hi, ;, }, public, double, getFHi, (, ), {, return, fHi]
[;, }, public, double, getFHi, (, ), {, return, fHi, ;, }, public, double, getMid, (, ), {, return, mid]
[;, }, public, double, getMid, (, ), {, return, mid, ;, }, public, double, getFMid, (, ), {, return, fMid]
[;, }, public, double, getFMid, (, ), {, return, fMid, ;, }, private, double, eval, (, UnivariateFunction, f, ,, double]
[;, }, private, double, eval, (, UnivariateFunction, f, ,, double, x, ), {, try, {, evaluations, ., incrementCount, (, )]
[;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }]
[., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (]
[;, }, return, f, ., value, (, x, ), ;, }, }]
[), ;, }, return, f, ., value, (, x, ), ;, }, }]
[., getMax, (, ), ), ;, }, return, f, ., value, (, x, ), ;, }, }]
[;, }, }]
[., value, (, x, ), ;, }, }]
[), ;, }, }]
