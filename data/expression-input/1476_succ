[;, public, BrentSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, BrentSolver, (, double, absoluteAccuracy, ), {, super]
[), ;, }, public, BrentSolver, (, double, absoluteAccuracy, ), {, super, (, absoluteAccuracy, ), ;, }, public, BrentSolver, (, double]
[), ;, }, public, BrentSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;]
[,, absoluteAccuracy, ), ;, }, public, BrentSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ,, double, functionValueAccuracy, ), {, super, (]
[), ;, }, public, BrentSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ,, double, functionValueAccuracy, ), {, super, (, relativeAccuracy, ,]
[,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, }, @, Override, protected, double, doSolve, (, ), throws, NoBracketingException, ,, TooManyEvaluationsException, ,, NumberIsTooLargeException]
[,, functionValueAccuracy, ), ;, }, @, Override, protected, double, doSolve, (, ), throws, NoBracketingException, ,, TooManyEvaluationsException, ,, NumberIsTooLargeException, {, double]
[), ;, }, @, Override, protected, double, doSolve, (, ), throws, NoBracketingException, ,, TooManyEvaluationsException, ,, NumberIsTooLargeException, {, double, min, =]
[;, double, max, =, getMax, (, ), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =]
[;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min]
[;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,, max, ), ;, double, yInitial]
[;, verifySequence, (, min, ,, initial, ,, max, ), ;, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (]
[;, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy, )]
[,, initial, ,, max, ), ;, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (]
[,, max, ), ;, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, yInitial, )]
[), ;, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy]
[;, if, (, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, double, yMin, =]
[), ;, if, (, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, double, yMin]
[), {, return, initial, ;, }, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (]
[<=, functionValueAccuracy, ), {, return, initial, ;, }, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, .]
[., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, double, yMin, =, computeObjectiveValue, (, min, )]
[), <=, functionValueAccuracy, ), {, return, initial, ;, }, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath]
[), {, return, initial, ;, }, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (]
[;, }, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy]
[;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial]
[), ;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (]
[), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, brent, (, min, ,]
[<=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, brent, (]
[., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0]
[), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, brent]
[), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, brent, (, min, ,]
[;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, brent, (, min, ,, initial, ,, yMin, ,]
[), {, return, brent, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, double, yMax, =, computeObjectiveValue, (]
[<, 0, ), {, return, brent, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, double, yMax, =]
[*, yMin, <, 0, ), {, return, brent, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, double]
[<, 0, ), {, return, brent, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, double, yMax, =]
[), {, return, brent, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, double, yMax, =, computeObjectiveValue, (]
[;, }, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy]
[,, initial, ,, yMin, ,, yInitial, ), ;, }, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath]
[,, yMin, ,, yInitial, ), ;, }, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs]
[,, yInitial, ), ;, }, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, yMax]
[), ;, }, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, yMax, ), <=]
[;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial]
[), ;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (]
[), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, brent, (, initial, ,]
[<=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, brent, (]
[., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0]
[), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, brent]
[), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, brent, (, initial, ,]
[;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, brent, (, initial, ,, max, ,, yInitial, ,]
[), {, return, brent, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min]
[<, 0, ), {, return, brent, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException]
[*, yMax, <, 0, ), {, return, brent, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw]
[<, 0, ), {, return, brent, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException]
[), {, return, brent, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min]
[;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,, yMax, ), ;, }, private, double, brent, (]
[,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,, yMax]
[,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,, yMax, ), ;]
[,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,, yMax, ), ;, }, private]
[), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,, yMax, ), ;, }, private, double, brent]
[;, }, private, double, brent, (, double, lo, ,, double, hi, ,, double, fLo, ,, double, fHi, ), {, double]
[,, max, ,, yMin, ,, yMax, ), ;, }, private, double, brent, (, double, lo, ,, double, hi, ,, double]
[,, yMin, ,, yMax, ), ;, }, private, double, brent, (, double, lo, ,, double, hi, ,, double, fLo, ,]
[,, yMax, ), ;, }, private, double, brent, (, double, lo, ,, double, hi, ,, double, fLo, ,, double, fHi]
[), ;, }, private, double, brent, (, double, lo, ,, double, hi, ,, double, fLo, ,, double, fHi, ), {]
[;, double, fa, =, fLo, ;, double, b, =, hi, ;, double, fb, =, fHi, ;, double, c, =, a]
[;, double, b, =, hi, ;, double, fb, =, fHi, ;, double, c, =, a, ;, double, fc, =, fa]
[;, double, fb, =, fHi, ;, double, c, =, a, ;, double, fc, =, fa, ;, double, d, =, b]
[;, double, c, =, a, ;, double, fc, =, fa, ;, double, d, =, b, -, a, ;, double, e]
[;, double, fc, =, fa, ;, double, d, =, b, -, a, ;, double, e, =, d, ;, final, double]
[;, double, d, =, b, -, a, ;, double, e, =, d, ;, final, double, t, =, getAbsoluteAccuracy, (, )]
[;, double, e, =, d, ;, final, double, t, =, getAbsoluteAccuracy, (, ), ;, final, double, eps, =, getRelativeAccuracy, (]
[-, a, ;, double, e, =, d, ;, final, double, t, =, getAbsoluteAccuracy, (, ), ;, final, double, eps, =]
[;, double, e, =, d, ;, final, double, t, =, getAbsoluteAccuracy, (, ), ;, final, double, eps, =, getRelativeAccuracy, (]
[;, final, double, t, =, getAbsoluteAccuracy, (, ), ;, final, double, eps, =, getRelativeAccuracy, (, ), ;, while, (, true]
[;, final, double, eps, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, if, (, FastMath, ., abs, (]
[;, while, (, true, ), {, if, (, FastMath, ., abs, (, fc, ), <, FastMath, ., abs, (, fb]
[), {, if, (, FastMath, ., abs, (, fc, ), <, FastMath, ., abs, (, fb, ), ), {, a]
[), {, a, =, b, ;, b, =, c, ;, c, =, a, ;, fa, =, fb, ;, fb, =]
[<, FastMath, ., abs, (, fb, ), ), {, a, =, b, ;, b, =, c, ;, c, =, a]
[., abs, (, fc, ), <, FastMath, ., abs, (, fb, ), ), {, a, =, b, ;, b, =]
[), <, FastMath, ., abs, (, fb, ), ), {, a, =, b, ;, b, =, c, ;, c, =]
[), {, a, =, b, ;, b, =, c, ;, c, =, a, ;, fa, =, fb, ;, fb, =]
[., abs, (, fb, ), ), {, a, =, b, ;, b, =, c, ;, c, =, a, ;, fa]
[), ), {, a, =, b, ;, b, =, c, ;, c, =, a, ;, fa, =, fb, ;, fb]
[=, b, ;, b, =, c, ;, c, =, a, ;, fa, =, fb, ;, fb, =, fc, ;, fc]
[;, b, =, c, ;, c, =, a, ;, fa, =, fb, ;, fb, =, fc, ;, fc, =, fa]
[=, c, ;, c, =, a, ;, fa, =, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }]
[;, c, =, a, ;, fa, =, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }, final, double]
[=, a, ;, fa, =, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }, final, double, tol, =]
[;, fa, =, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }, final, double, tol, =, 2, *]
[=, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }, final, double, tol, =, 2, *, eps, *]
[;, fb, =, fc, ;, fc, =, fa, ;, }, final, double, tol, =, 2, *, eps, *, FastMath, .]
[=, fc, ;, fc, =, fa, ;, }, final, double, tol, =, 2, *, eps, *, FastMath, ., abs, (]
[;, fc, =, fa, ;, }, final, double, tol, =, 2, *, eps, *, FastMath, ., abs, (, b, )]
[=, fa, ;, }, final, double, tol, =, 2, *, eps, *, FastMath, ., abs, (, b, ), +, t]
[;, }, final, double, tol, =, 2, *, eps, *, FastMath, ., abs, (, b, ), +, t, ;, final]
[;, final, double, m, =, 0.5, *, (, c, -, b, ), ;, if, (, FastMath, ., abs, (, m]
[+, t, ;, final, double, m, =, 0.5, *, (, c, -, b, ), ;, if, (, FastMath, ., abs]
[*, FastMath, ., abs, (, b, ), +, t, ;, final, double, m, =, 0.5, *, (, c, -, b]
[*, eps, *, FastMath, ., abs, (, b, ), +, t, ;, final, double, m, =, 0.5, *, (, c]
[*, FastMath, ., abs, (, b, ), +, t, ;, final, double, m, =, 0.5, *, (, c, -, b]
[+, t, ;, final, double, m, =, 0.5, *, (, c, -, b, ), ;, if, (, FastMath, ., abs]
[., abs, (, b, ), +, t, ;, final, double, m, =, 0.5, *, (, c, -, b, ), ;]
[), +, t, ;, final, double, m, =, 0.5, *, (, c, -, b, ), ;, if, (, FastMath, .]
[;, final, double, m, =, 0.5, *, (, c, -, b, ), ;, if, (, FastMath, ., abs, (, m]
[;, if, (, FastMath, ., abs, (, m, ), <=, tol, ||, Precision, ., equals, (, fb, ,, 0, )]
[*, (, c, -, b, ), ;, if, (, FastMath, ., abs, (, m, ), <=, tol, ||, Precision, .]
[;, if, (, FastMath, ., abs, (, m, ), <=, tol, ||, Precision, ., equals, (, fb, ,, 0, )]
[), ;, if, (, FastMath, ., abs, (, m, ), <=, tol, ||, Precision, ., equals, (, fb, ,, 0]
[-, b, ), ;, if, (, FastMath, ., abs, (, m, ), <=, tol, ||, Precision, ., equals, (, fb]
[), ;, if, (, FastMath, ., abs, (, m, ), <=, tol, ||, Precision, ., equals, (, fb, ,, 0]
[), {, return, b, ;, }, if, (, FastMath, ., abs, (, e, ), <, tol, ||, FastMath, ., abs]
[||, Precision, ., equals, (, fb, ,, 0, ), ), {, return, b, ;, }, if, (, FastMath, ., abs]
[<=, tol, ||, Precision, ., equals, (, fb, ,, 0, ), ), {, return, b, ;, }, if, (, FastMath]
[., abs, (, m, ), <=, tol, ||, Precision, ., equals, (, fb, ,, 0, ), ), {, return, b]
[), <=, tol, ||, Precision, ., equals, (, fb, ,, 0, ), ), {, return, b, ;, }, if, (]
[||, Precision, ., equals, (, fb, ,, 0, ), ), {, return, b, ;, }, if, (, FastMath, ., abs]
[), {, return, b, ;, }, if, (, FastMath, ., abs, (, e, ), <, tol, ||, FastMath, ., abs]
[., equals, (, fb, ,, 0, ), ), {, return, b, ;, }, if, (, FastMath, ., abs, (, e]
[,, 0, ), ), {, return, b, ;, }, if, (, FastMath, ., abs, (, e, ), <, tol, ||]
[), ), {, return, b, ;, }, if, (, FastMath, ., abs, (, e, ), <, tol, ||, FastMath, .]
[;, }, if, (, FastMath, ., abs, (, e, ), <, tol, ||, FastMath, ., abs, (, fa, ), <=]
[), {, d, =, m, ;, e, =, d, ;, }, else, {, double, s, =, fb, /, fa, ;]
[||, FastMath, ., abs, (, fa, ), <=, FastMath, ., abs, (, fb, ), ), {, d, =, m, ;]
[<, tol, ||, FastMath, ., abs, (, fa, ), <=, FastMath, ., abs, (, fb, ), ), {, d, =]
[., abs, (, e, ), <, tol, ||, FastMath, ., abs, (, fa, ), <=, FastMath, ., abs, (, fb]
[), <, tol, ||, FastMath, ., abs, (, fa, ), <=, FastMath, ., abs, (, fb, ), ), {, d]
[||, FastMath, ., abs, (, fa, ), <=, FastMath, ., abs, (, fb, ), ), {, d, =, m, ;]
[), {, d, =, m, ;, e, =, d, ;, }, else, {, double, s, =, fb, /, fa, ;]
[<=, FastMath, ., abs, (, fb, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {]
[., abs, (, fa, ), <=, FastMath, ., abs, (, fb, ), ), {, d, =, m, ;, e, =]
[), <=, FastMath, ., abs, (, fb, ), ), {, d, =, m, ;, e, =, d, ;, }, else]
[), {, d, =, m, ;, e, =, d, ;, }, else, {, double, s, =, fb, /, fa, ;]
[., abs, (, fb, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {, double, s]
[), ), {, d, =, m, ;, e, =, d, ;, }, else, {, double, s, =, fb, /, fa]
[=, m, ;, e, =, d, ;, }, else, {, double, s, =, fb, /, fa, ;, double, p, ;]
[;, e, =, d, ;, }, else, {, double, s, =, fb, /, fa, ;, double, p, ;, double, q]
[=, d, ;, }, else, {, double, s, =, fb, /, fa, ;, double, p, ;, double, q, ;, if]
[;, }, else, {, double, s, =, fb, /, fa, ;, double, p, ;, double, q, ;, if, (, a]
[;, double, p, ;, double, q, ;, if, (, a, ==, c, ), {, p, =, 2, *, m, *]
[/, fa, ;, double, p, ;, double, q, ;, if, (, a, ==, c, ), {, p, =, 2, *]
[;, double, p, ;, double, q, ;, if, (, a, ==, c, ), {, p, =, 2, *, m, *]
[), {, p, =, 2, *, m, *, s, ;, q, =, 1, -, s, ;, }, else, {, q]
[==, c, ), {, p, =, 2, *, m, *, s, ;, q, =, 1, -, s, ;, }, else]
[), {, p, =, 2, *, m, *, s, ;, q, =, 1, -, s, ;, }, else, {, q]
[=, 2, *, m, *, s, ;, q, =, 1, -, s, ;, }, else, {, q, =, fa, /]
[;, q, =, 1, -, s, ;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =]
[*, s, ;, q, =, 1, -, s, ;, }, else, {, q, =, fa, /, fc, ;, final, double]
[*, m, *, s, ;, q, =, 1, -, s, ;, }, else, {, q, =, fa, /, fc, ;]
[*, s, ;, q, =, 1, -, s, ;, }, else, {, q, =, fa, /, fc, ;, final, double]
[;, q, =, 1, -, s, ;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =]
[=, 1, -, s, ;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =, fb, /]
[;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =]
[-, s, ;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;]
[;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =]
[=, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (, 2, *]
[;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (, 2, *, m, *, q, *]
[/, fc, ;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (, 2, *, m, *]
[;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (, 2, *, m, *, q, *]
[;, p, =, s, *, (, 2, *, m, *, q, *, (, q, -, r, ), -, (, b]
[/, fc, ;, p, =, s, *, (, 2, *, m, *, q, *, (, q, -, r, ), -]
[;, p, =, s, *, (, 2, *, m, *, q, *, (, q, -, r, ), -, (, b]
[=, s, *, (, 2, *, m, *, q, *, (, q, -, r, ), -, (, b, -, a]
[;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *, (, s, -, 1, )]
[*, (, 2, *, m, *, q, *, (, q, -, r, ), -, (, b, -, a, ), *]
[;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *, (, s, -, 1, )]
[), ;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *, (, s, -, 1]
[-, (, b, -, a, ), *, (, r, -, 1, ), ), ;, q, =, (, q, -, 1]
[*, (, q, -, r, ), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;]
[*, q, *, (, q, -, r, ), -, (, b, -, a, ), *, (, r, -, 1, )]
[*, m, *, q, *, (, q, -, r, ), -, (, b, -, a, ), *, (, r, -]
[*, q, *, (, q, -, r, ), -, (, b, -, a, ), *, (, r, -, 1, )]
[*, (, q, -, r, ), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;]
[-, (, b, -, a, ), *, (, r, -, 1, ), ), ;, q, =, (, q, -, 1]
[), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;, q, =, (, q, -]
[-, r, ), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;, q, =, (]
[), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;, q, =, (, q, -]
[), ;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *, (, s, -, 1]
[*, (, r, -, 1, ), ), ;, q, =, (, q, -, 1, ), *, (, r, -, 1]
[), *, (, r, -, 1, ), ), ;, q, =, (, q, -, 1, ), *, (, r, -]
[-, a, ), *, (, r, -, 1, ), ), ;, q, =, (, q, -, 1, ), *, (]
[), *, (, r, -, 1, ), ), ;, q, =, (, q, -, 1, ), *, (, r, -]
[), ;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *, (, s, -, 1]
[), ), ;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *, (, s, -]
[-, 1, ), ), ;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *, (]
[), ), ;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *, (, s, -]
[=, (, q, -, 1, ), *, (, r, -, 1, ), *, (, s, -, 1, ), ;, }]
[;, }, if, (, p, >, 0, ), {, q, =, -, q, ;, }, else, {, p, =, -]
[*, (, s, -, 1, ), ;, }, if, (, p, >, 0, ), {, q, =, -, q, ;]
[*, (, r, -, 1, ), *, (, s, -, 1, ), ;, }, if, (, p, >, 0, )]
[), *, (, r, -, 1, ), *, (, s, -, 1, ), ;, }, if, (, p, >, 0]
[-, 1, ), *, (, r, -, 1, ), *, (, s, -, 1, ), ;, }, if, (, p]
[), *, (, r, -, 1, ), *, (, s, -, 1, ), ;, }, if, (, p, >, 0]
[*, (, s, -, 1, ), ;, }, if, (, p, >, 0, ), {, q, =, -, q, ;]
[), *, (, s, -, 1, ), ;, }, if, (, p, >, 0, ), {, q, =, -, q]
[-, 1, ), *, (, s, -, 1, ), ;, }, if, (, p, >, 0, ), {, q, =]
[), *, (, s, -, 1, ), ;, }, if, (, p, >, 0, ), {, q, =, -, q]
[;, }, if, (, p, >, 0, ), {, q, =, -, q, ;, }, else, {, p, =, -]
[), ;, }, if, (, p, >, 0, ), {, q, =, -, q, ;, }, else, {, p, =]
[-, 1, ), ;, }, if, (, p, >, 0, ), {, q, =, -, q, ;, }, else, {]
[), ;, }, if, (, p, >, 0, ), {, q, =, -, q, ;, }, else, {, p, =]
[), {, q, =, -, q, ;, }, else, {, p, =, -, p, ;, }, s, =, e, ;]
[>, 0, ), {, q, =, -, q, ;, }, else, {, p, =, -, p, ;, }, s, =]
[), {, q, =, -, q, ;, }, else, {, p, =, -, p, ;, }, s, =, e, ;]
[=, -, q, ;, }, else, {, p, =, -, p, ;, }, s, =, e, ;, e, =, d]
[;, }, else, {, p, =, -, p, ;, }, s, =, e, ;, e, =, d, ;, if, (]
[;, }, else, {, p, =, -, p, ;, }, s, =, e, ;, e, =, d, ;, if, (]
[=, -, p, ;, }, s, =, e, ;, e, =, d, ;, if, (, p, >=, 1.5, *, m]
[;, }, s, =, e, ;, e, =, d, ;, if, (, p, >=, 1.5, *, m, *, q, -]
[;, }, s, =, e, ;, e, =, d, ;, if, (, p, >=, 1.5, *, m, *, q, -]
[=, e, ;, e, =, d, ;, if, (, p, >=, 1.5, *, m, *, q, -, FastMath, ., abs]
[;, e, =, d, ;, if, (, p, >=, 1.5, *, m, *, q, -, FastMath, ., abs, (, tol]
[=, d, ;, if, (, p, >=, 1.5, *, m, *, q, -, FastMath, ., abs, (, tol, *, q]
[;, if, (, p, >=, 1.5, *, m, *, q, -, FastMath, ., abs, (, tol, *, q, ), ||]
[), {, d, =, m, ;, e, =, d, ;, }, else, {, d, =, p, /, q, ;, }]
[||, p, >=, FastMath, ., abs, (, 0.5, *, s, *, q, ), ), {, d, =, m, ;, e]
[>=, 1.5, *, m, *, q, -, FastMath, ., abs, (, tol, *, q, ), ||, p, >=, FastMath, .]
[||, p, >=, FastMath, ., abs, (, 0.5, *, s, *, q, ), ), {, d, =, m, ;, e]
[-, FastMath, ., abs, (, tol, *, q, ), ||, p, >=, FastMath, ., abs, (, 0.5, *, s, *]
[*, q, -, FastMath, ., abs, (, tol, *, q, ), ||, p, >=, FastMath, ., abs, (, 0.5, *]
[*, m, *, q, -, FastMath, ., abs, (, tol, *, q, ), ||, p, >=, FastMath, ., abs, (]
[*, q, -, FastMath, ., abs, (, tol, *, q, ), ||, p, >=, FastMath, ., abs, (, 0.5, *]
[-, FastMath, ., abs, (, tol, *, q, ), ||, p, >=, FastMath, ., abs, (, 0.5, *, s, *]
[||, p, >=, FastMath, ., abs, (, 0.5, *, s, *, q, ), ), {, d, =, m, ;, e]
[., abs, (, tol, *, q, ), ||, p, >=, FastMath, ., abs, (, 0.5, *, s, *, q, )]
[), ||, p, >=, FastMath, ., abs, (, 0.5, *, s, *, q, ), ), {, d, =, m, ;]
[*, q, ), ||, p, >=, FastMath, ., abs, (, 0.5, *, s, *, q, ), ), {, d, =]
[), ||, p, >=, FastMath, ., abs, (, 0.5, *, s, *, q, ), ), {, d, =, m, ;]
[), {, d, =, m, ;, e, =, d, ;, }, else, {, d, =, p, /, q, ;, }]
[>=, FastMath, ., abs, (, 0.5, *, s, *, q, ), ), {, d, =, m, ;, e, =, d]
[), {, d, =, m, ;, e, =, d, ;, }, else, {, d, =, p, /, q, ;, }]
[., abs, (, 0.5, *, s, *, q, ), ), {, d, =, m, ;, e, =, d, ;, }]
[), ), {, d, =, m, ;, e, =, d, ;, }, else, {, d, =, p, /, q, ;]
[*, q, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {, d, =, p, /]
[*, s, *, q, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {, d, =]
[*, q, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {, d, =, p, /]
[), ), {, d, =, m, ;, e, =, d, ;, }, else, {, d, =, p, /, q, ;]
[=, m, ;, e, =, d, ;, }, else, {, d, =, p, /, q, ;, }, }, a, =]
[;, e, =, d, ;, }, else, {, d, =, p, /, q, ;, }, }, a, =, b, ;]
[=, d, ;, }, else, {, d, =, p, /, q, ;, }, }, a, =, b, ;, fa, =]
[;, }, else, {, d, =, p, /, q, ;, }, }, a, =, b, ;, fa, =, fb, ;]
[=, p, /, q, ;, }, }, a, =, b, ;, fa, =, fb, ;, if, (, FastMath, ., abs]
[;, }, }, a, =, b, ;, fa, =, fb, ;, if, (, FastMath, ., abs, (, d, ), >]
[/, q, ;, }, }, a, =, b, ;, fa, =, fb, ;, if, (, FastMath, ., abs, (, d]
[;, }, }, a, =, b, ;, fa, =, fb, ;, if, (, FastMath, ., abs, (, d, ), >]
[=, b, ;, fa, =, fb, ;, if, (, FastMath, ., abs, (, d, ), >, tol, ), {, b]
[;, fa, =, fb, ;, if, (, FastMath, ., abs, (, d, ), >, tol, ), {, b, +=, d]
[=, fb, ;, if, (, FastMath, ., abs, (, d, ), >, tol, ), {, b, +=, d, ;, }]
[;, if, (, FastMath, ., abs, (, d, ), >, tol, ), {, b, +=, d, ;, }, else, if]
[), {, b, +=, d, ;, }, else, if, (, m, >, 0, ), {, b, +=, tol, ;, }]
[>, tol, ), {, b, +=, d, ;, }, else, if, (, m, >, 0, ), {, b, +=, tol]
[., abs, (, d, ), >, tol, ), {, b, +=, d, ;, }, else, if, (, m, >, 0]
[), >, tol, ), {, b, +=, d, ;, }, else, if, (, m, >, 0, ), {, b, +=]
[), {, b, +=, d, ;, }, else, if, (, m, >, 0, ), {, b, +=, tol, ;, }]
[+=, d, ;, }, else, if, (, m, >, 0, ), {, b, +=, tol, ;, }, else, {, b]
[;, }, else, if, (, m, >, 0, ), {, b, +=, tol, ;, }, else, {, b, -=, tol]
[), {, b, +=, tol, ;, }, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, )]
[>, 0, ), {, b, +=, tol, ;, }, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (]
[), {, b, +=, tol, ;, }, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, )]
[+=, tol, ;, }, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (]
[;, }, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (, (, fb]
[-=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (, (, fb, >, 0, &&, fc, >]
[;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (, (, fb, >, 0, &&, fc, >, 0, )]
[=, computeObjectiveValue, (, b, ), ;, if, (, (, fb, >, 0, &&, fc, >, 0, ), ||, (, fb]
[;, if, (, (, fb, >, 0, &&, fc, >, 0, ), ||, (, fb, <=, 0, &&, fc, <=]
[), ;, if, (, (, fb, >, 0, &&, fc, >, 0, ), ||, (, fb, <=, 0, &&, fc]
[), {, c, =, a, ;, fc, =, fa, ;, d, =, b, -, a, ;, e, =, d, ;]
[||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa, ;]
[), ||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa]
[&&, fc, >, 0, ), ||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a]
[>, 0, &&, fc, >, 0, ), ||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c]
[&&, fc, >, 0, ), ||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a]
[), ||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa]
[>, 0, ), ||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a, ;, fc]
[), ||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa]
[), {, c, =, a, ;, fc, =, fa, ;, d, =, b, -, a, ;, e, =, d, ;]
[), ), {, c, =, a, ;, fc, =, fa, ;, d, =, b, -, a, ;, e, =, d]
[&&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa, ;, d, =, b, -, a]
[<=, 0, &&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa, ;, d, =, b]
[&&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa, ;, d, =, b, -, a]
[), ), {, c, =, a, ;, fc, =, fa, ;, d, =, b, -, a, ;, e, =, d]
[<=, 0, ), ), {, c, =, a, ;, fc, =, fa, ;, d, =, b, -, a, ;, e]
[), ), {, c, =, a, ;, fc, =, fa, ;, d, =, b, -, a, ;, e, =, d]
[=, a, ;, fc, =, fa, ;, d, =, b, -, a, ;, e, =, d, ;, }, }, }]
[;, fc, =, fa, ;, d, =, b, -, a, ;, e, =, d, ;, }, }, }, }]
[=, fa, ;, d, =, b, -, a, ;, e, =, d, ;, }, }, }, }]
[;, d, =, b, -, a, ;, e, =, d, ;, }, }, }, }]
[=, b, -, a, ;, e, =, d, ;, }, }, }, }]
[;, e, =, d, ;, }, }, }, }]
[-, a, ;, e, =, d, ;, }, }, }, }]
[;, e, =, d, ;, }, }, }, }]
[=, d, ;, }, }, }, }]
[;, }, }, }, }]
