[import, java, ., io, ., Serializable, ;, public, final, class, JSTypeExpression, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[private, final, Node, root, ;, private, final, String, sourceName, ;, public, JSTypeExpression, (, Node, root, ,, String, sourceName, ), {]
[private, final, Node, root, ;, private, final, String, sourceName, ;, public, JSTypeExpression, (, Node, root, ,, String, sourceName, ), {]
[;, private, final, String, sourceName, ;, public, JSTypeExpression, (, Node, root, ,, String, sourceName, ), {, this, ., root, =]
[final, String, sourceName, ;, public, JSTypeExpression, (, Node, root, ,, String, sourceName, ), {, this, ., root, =, root, ;]
[final, String, sourceName, ;, public, JSTypeExpression, (, Node, root, ,, String, sourceName, ), {, this, ., root, =, root, ;]
[public, JSTypeExpression, (, Node, root, ,, String, sourceName, ), {, this, ., root, =, root, ;, this, ., sourceName, =]
[root, ;, this, ., sourceName, =, sourceName, ;, }, public, static, JSTypeExpression, makeOptionalArg, (, JSTypeExpression, expr, ), {, if, (]
[root, ;, this, ., sourceName, =, sourceName, ;, }, public, static, JSTypeExpression, makeOptionalArg, (, JSTypeExpression, expr, ), {, if, (]
[root, ;, this, ., sourceName, =, sourceName, ;, }, public, static, JSTypeExpression, makeOptionalArg, (, JSTypeExpression, expr, ), {, if, (]
[sourceName, ;, }, public, static, JSTypeExpression, makeOptionalArg, (, JSTypeExpression, expr, ), {, if, (, expr, ., isOptionalArg, (, ), ||]
[sourceName, ;, }, public, static, JSTypeExpression, makeOptionalArg, (, JSTypeExpression, expr, ), {, if, (, expr, ., isOptionalArg, (, ), ||]
[JSTypeExpression, expr, ), {, if, (, expr, ., isOptionalArg, (, ), ||, expr, ., isVarArgs, (, ), ), {, return]
[expr, ., isOptionalArg, (, ), ||, expr, ., isVarArgs, (, ), ), {, return, expr, ;, }, else, {, return]
[(, ), ||, expr, ., isVarArgs, (, ), ), {, return, expr, ;, }, else, {, return, new, JSTypeExpression, (]
[expr, ., isVarArgs, (, ), ), {, return, expr, ;, }, else, {, return, new, JSTypeExpression, (, new, Node, (]
[expr, ., isVarArgs, (, ), ), {, return, expr, ;, }, else, {, return, new, JSTypeExpression, (, new, Node, (]
[), ), {, return, expr, ;, }, else, {, return, new, JSTypeExpression, (, new, Node, (, Token, ., EQUALS, ,]
[), ), {, return, expr, ;, }, else, {, return, new, JSTypeExpression, (, new, Node, (, Token, ., EQUALS, ,]
[;, }, else, {, return, new, JSTypeExpression, (, new, Node, (, Token, ., EQUALS, ,, expr, ., root, ), ,]
[;, }, else, {, return, new, JSTypeExpression, (, new, Node, (, Token, ., EQUALS, ,, expr, ., root, ), ,]
[,, expr, ., root, ), ,, expr, ., sourceName, ), ;, }, }, public, boolean, isOptionalArg, (, ), {, return]
[,, expr, ., root, ), ,, expr, ., sourceName, ), ;, }, }, public, boolean, isOptionalArg, (, ), {, return]
[,, expr, ., root, ), ,, expr, ., sourceName, ), ;, }, }, public, boolean, isOptionalArg, (, ), {, return]
[expr, ., sourceName, ), ;, }, }, public, boolean, isOptionalArg, (, ), {, return, root, ., getType, (, ), ==]
[expr, ., sourceName, ), ;, }, }, public, boolean, isOptionalArg, (, ), {, return, root, ., getType, (, ), ==]
[{, return, root, ., getType, (, ), ==, Token, ., EQUALS, ;, }, public, boolean, isVarArgs, (, ), {, return]
[{, return, root, ., getType, (, ), ==, Token, ., EQUALS, ;, }, public, boolean, isVarArgs, (, ), {, return]
[{, return, root, ., getType, (, ), ==, Token, ., EQUALS, ;, }, public, boolean, isVarArgs, (, ), {, return]
[), ==, Token, ., EQUALS, ;, }, public, boolean, isVarArgs, (, ), {, return, root, ., getType, (, ), ==]
[), ==, Token, ., EQUALS, ;, }, public, boolean, isVarArgs, (, ), {, return, root, ., getType, (, ), ==]
[ELLIPSIS, ;, }, public, JSType, evaluate, (, StaticScope, <, JSType, >, scope, ,, JSTypeRegistry, registry, ), {, JSType, type, =]
[ELLIPSIS, ;, }, public, JSType, evaluate, (, StaticScope, <, JSType, >, scope, ,, JSTypeRegistry, registry, ), {, JSType, type, =]
[JSType, evaluate, (, StaticScope, <, JSType, >, scope, ,, JSTypeRegistry, registry, ), {, JSType, type, =, registry, ., createFromTypeNodes, (]
[(, StaticScope, <, JSType, >, scope, ,, JSTypeRegistry, registry, ), {, JSType, type, =, registry, ., createFromTypeNodes, (, root, ,]
[<, JSType, >, scope, ,, JSTypeRegistry, registry, ), {, JSType, type, =, registry, ., createFromTypeNodes, (, root, ,, sourceName, ,]
[scope, ,, JSTypeRegistry, registry, ), {, JSType, type, =, registry, ., createFromTypeNodes, (, root, ,, sourceName, ,, scope, ), ;]
[scope, ,, JSTypeRegistry, registry, ), {, JSType, type, =, registry, ., createFromTypeNodes, (, root, ,, sourceName, ,, scope, ), ;]
[), {, JSType, type, =, registry, ., createFromTypeNodes, (, root, ,, sourceName, ,, scope, ), ;, root, ., setJSType, (]
[=, registry, ., createFromTypeNodes, (, root, ,, sourceName, ,, scope, ), ;, root, ., setJSType, (, type, ), ;, return]
[setJSType, (, type, ), ;, return, type, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return]
[setJSType, (, type, ), ;, return, type, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return]
[setJSType, (, type, ), ;, return, type, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return]
[;, return, type, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, other, instanceof, JSTypeExpression, &&]
[;, return, type, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, other, instanceof, JSTypeExpression, &&]
[;, return, type, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, other, instanceof, JSTypeExpression, &&]
[return, type, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, other, instanceof, JSTypeExpression, &&, (]
[}, @, Override, public, boolean, equals, (, Object, other, ), {, return, other, instanceof, JSTypeExpression, &&, (, (, JSTypeExpression, )]
[Object, other, ), {, return, other, instanceof, JSTypeExpression, &&, (, (, JSTypeExpression, ), other, ), ., root, ., isEquivalentTo, (]
[other, ), ., root, ., isEquivalentTo, (, root, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[other, ), ., root, ., isEquivalentTo, (, root, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[other, ), ., root, ., isEquivalentTo, (, root, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[{, return, root, ., toStringTree, (, ), ., hashCode, (, ), ;, }, public, Node, getRoot, (, ), {, return]
