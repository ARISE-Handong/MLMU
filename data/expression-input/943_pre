[util, ., FastMath, ;, @, Deprecated, public, class, LegendreGaussIntegrator, extends, BaseAbstractUnivariateIntegrator, {, private, static, final, double, [, ], ABSCISSAS_2, =]
[., FastMath, ;, @, Deprecated, public, class, LegendreGaussIntegrator, extends, BaseAbstractUnivariateIntegrator, {, private, static, final, double, [, ], ABSCISSAS_2, =, {]
[., FastMath, ;, @, Deprecated, public, class, LegendreGaussIntegrator, extends, BaseAbstractUnivariateIntegrator, {, private, static, final, double, [, ], ABSCISSAS_2, =, {]
[FastMath, ;, @, Deprecated, public, class, LegendreGaussIntegrator, extends, BaseAbstractUnivariateIntegrator, {, private, static, final, double, [, ], ABSCISSAS_2, =, {, -]
[@, Deprecated, public, class, LegendreGaussIntegrator, extends, BaseAbstractUnivariateIntegrator, {, private, static, final, double, [, ], ABSCISSAS_2, =, {, -, 1.0, /]
[@, Deprecated, public, class, LegendreGaussIntegrator, extends, BaseAbstractUnivariateIntegrator, {, private, static, final, double, [, ], ABSCISSAS_2, =, {, -, 1.0, /]
[LegendreGaussIntegrator, extends, BaseAbstractUnivariateIntegrator, {, private, static, final, double, [, ], ABSCISSAS_2, =, {, -, 1.0, /, FastMath, ., sqrt, (]
[{, private, static, final, double, [, ], ABSCISSAS_2, =, {, -, 1.0, /, FastMath, ., sqrt, (, 3.0, ), ,]
[{, private, static, final, double, [, ], ABSCISSAS_2, =, {, -, 1.0, /, FastMath, ., sqrt, (, 3.0, ), ,]
[static, final, double, [, ], ABSCISSAS_2, =, {, -, 1.0, /, FastMath, ., sqrt, (, 3.0, ), ,, 1.0, /]
[static, final, double, [, ], ABSCISSAS_2, =, {, -, 1.0, /, FastMath, ., sqrt, (, 3.0, ), ,, 1.0, /]
[], ABSCISSAS_2, =, {, -, 1.0, /, FastMath, ., sqrt, (, 3.0, ), ,, 1.0, /, FastMath, ., sqrt, (]
[), ,, 1.0, /, FastMath, ., sqrt, (, 3.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_2, =]
[,, 1.0, /, FastMath, ., sqrt, (, 3.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_2, =, {]
[/, FastMath, ., sqrt, (, 3.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_2, =, {, 1.0, ,]
[final, double, [, ], WEIGHTS_2, =, {, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], ABSCISSAS_3, =]
[double, [, ], WEIGHTS_2, =, {, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], ABSCISSAS_3, =, {]
[[, ], WEIGHTS_2, =, {, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], ABSCISSAS_3, =, {, -]
[[, ], WEIGHTS_2, =, {, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], ABSCISSAS_3, =, {, -]
[{, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], ABSCISSAS_3, =, {, -, FastMath, ., sqrt, (]
[1.0, }, ;, private, static, final, double, [, ], ABSCISSAS_3, =, {, -, FastMath, ., sqrt, (, 0.6, ), ,]
[;, private, static, final, double, [, ], ABSCISSAS_3, =, {, -, FastMath, ., sqrt, (, 0.6, ), ,, 0.0, ,]
[;, private, static, final, double, [, ], ABSCISSAS_3, =, {, -, FastMath, ., sqrt, (, 0.6, ), ,, 0.0, ,]
[double, [, ], ABSCISSAS_3, =, {, -, FastMath, ., sqrt, (, 0.6, ), ,, 0.0, ,, FastMath, ., sqrt, (]
[), ,, 0.0, ,, FastMath, ., sqrt, (, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =]
[,, 0.0, ,, FastMath, ., sqrt, (, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {]
[,, 0.0, ,, FastMath, ., sqrt, (, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {]
[,, FastMath, ., sqrt, (, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /]
[., sqrt, (, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /, 9.0, ,]
[., sqrt, (, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /, 9.0, ,]
[(, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /, 9.0, ,, 8.0, /]
[), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /, 9.0, ,, 8.0, /, 9.0, ,]
[), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /, 9.0, ,, 8.0, /, 9.0, ,]
[;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /, 9.0, ,, 8.0, /, 9.0, ,, 5.0, /]
[/, 9.0, ,, 8.0, /, 9.0, ,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =]
[9.0, ,, 8.0, /, 9.0, ,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {]
[,, 8.0, /, 9.0, ,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -]
[,, 8.0, /, 9.0, ,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -]
[,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (]
[,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (]
[5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (, (]
[5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (, (]
[9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (, (, 15.0, +]
[9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (, (, 15.0, +]
[;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *]
[;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *]
[double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (]
[=, {, -, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /]
[FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,]
[., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -]
[., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -]
[15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (]
[15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (]
[+, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (]
[+, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -]
[., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *]
[., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *]
[), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (]
[), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /]
[FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,]
[FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,]
[(, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (]
[(, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (]
[15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (]
[15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (]
[2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -]
[2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -]
[FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *]
[FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *]
[30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (]
[35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /]
[FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,]
[FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,]
[(, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (]
[(, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (]
[15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (]
[15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (]
[2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +]
[2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +]
[FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *]
[FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *]
[30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (]
[35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /]
[FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =]
[., sqrt, (, 30.0, ), ), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {]
[., sqrt, (, 30.0, ), ), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {]
[sqrt, (, 30.0, ), ), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (]
[sqrt, (, 30.0, ), ), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (]
[30.0, ), ), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -]
[30.0, ), ), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -]
[), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *]
[), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *]
[}, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (]
[final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /]
[[, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,]
[[, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,]
[], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[=, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +]
[=, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +]
[(, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *]
[(, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (]
[(, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /]
[), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,]
[), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,]
[), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +]
[180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +]
[(, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *]
[(, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (]
[(, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /]
[), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,]
[), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,]
[), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, -]
[180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, -]
[(, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, -, 5.0, *]
[(, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, -, 5.0, *]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (]
[(, 30.0, ), ), /, 180.0, ,, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =]
[FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {]
[., sqrt, (, 30.0, ), ), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -]
[., sqrt, (, 30.0, ), ), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -]
[), ), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (]
[), ), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (]
[), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (]
[), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (]
[180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (, 35.0, +]
[180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (, 35.0, +]
[;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *]
[;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *]
[double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (]
[=, {, -, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,]
[., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -]
[., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -]
[35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (]
[35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (]
[+, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (]
[+, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -]
[., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *]
[., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *]
[), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (]
[), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,]
[sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,]
[sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,]
[-, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (]
[-, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (]
[2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (]
[2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (]
[FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -]
[FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -]
[sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *]
[sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *]
[), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (]
[,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,]
[FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,]
[(, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (]
[(, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (]
[35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (, (]
[35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (, (]
[2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +]
[2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +]
[FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *]
[FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *]
[70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (]
[63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =]
[., sqrt, (, 70.0, ), ), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {]
[., sqrt, (, 70.0, ), ), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {]
[sqrt, (, 70.0, ), ), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (]
[sqrt, (, 70.0, ), ), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (]
[70.0, ), ), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -]
[70.0, ), ), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -]
[), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *]
[), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *]
[}, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (]
[final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[[, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,]
[[, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,]
[], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (]
[], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (]
[=, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, +]
[=, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, +]
[(, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, +, 13.0, *]
[(, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, +, 13.0, *]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (]
[(, 70.0, ), ), /, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[), ), /, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,]
[), ), /, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,]
[/, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /]
[,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,]
[,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,]
[(, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,, (]
[(, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,, (]
[+, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +]
[+, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *]
[(, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (]
[/, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,]
[,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,]
[128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (]
[128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (]
[225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, -]
[225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, -]
[(, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, -, 13.0, *]
[(, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, -, 13.0, *]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (]
[(, 70.0, ), ), /, 900.0, ,, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[double, absoluteAccuracy, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, MathIllegalArgumentException, ,, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (]
[,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, MathIllegalArgumentException, ,, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,]
[int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, MathIllegalArgumentException, ,, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,]
[,, final, int, maximalIterationCount, ), throws, MathIllegalArgumentException, ,, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,]
[throws, MathIllegalArgumentException, ,, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, switch, (]
[,, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, switch, (, n, ), {, case]
[{, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, switch, (, n, ), {, case, 2, :]
[(, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, switch, (, n, ), {, case, 2, :, abscissas, =]
[,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, switch, (, n, ), {, case, 2, :, abscissas, =, ABSCISSAS_2, ;]
[,, minimalIterationCount, ,, maximalIterationCount, ), ;, switch, (, n, ), {, case, 2, :, abscissas, =, ABSCISSAS_2, ;, weights, =]
[;, switch, (, n, ), {, case, 2, :, abscissas, =, ABSCISSAS_2, ;, weights, =, WEIGHTS_2, ;, break, ;, case]
[(, n, ), {, case, 2, :, abscissas, =, ABSCISSAS_2, ;, weights, =, WEIGHTS_2, ;, break, ;, case, 3, :]
[), {, case, 2, :, abscissas, =, ABSCISSAS_2, ;, weights, =, WEIGHTS_2, ;, break, ;, case, 3, :, abscissas, =]
[case, 2, :, abscissas, =, ABSCISSAS_2, ;, weights, =, WEIGHTS_2, ;, break, ;, case, 3, :, abscissas, =, ABSCISSAS_3, ;]
[:, abscissas, =, ABSCISSAS_2, ;, weights, =, WEIGHTS_2, ;, break, ;, case, 3, :, abscissas, =, ABSCISSAS_3, ;, weights, =]
[weights, =, WEIGHTS_2, ;, break, ;, case, 3, :, abscissas, =, ABSCISSAS_3, ;, weights, =, WEIGHTS_3, ;, break, ;, case]
[WEIGHTS_2, ;, break, ;, case, 3, :, abscissas, =, ABSCISSAS_3, ;, weights, =, WEIGHTS_3, ;, break, ;, case, 4, :]
[break, ;, case, 3, :, abscissas, =, ABSCISSAS_3, ;, weights, =, WEIGHTS_3, ;, break, ;, case, 4, :, abscissas, =]
[case, 3, :, abscissas, =, ABSCISSAS_3, ;, weights, =, WEIGHTS_3, ;, break, ;, case, 4, :, abscissas, =, ABSCISSAS_4, ;]
[:, abscissas, =, ABSCISSAS_3, ;, weights, =, WEIGHTS_3, ;, break, ;, case, 4, :, abscissas, =, ABSCISSAS_4, ;, weights, =]
[weights, =, WEIGHTS_3, ;, break, ;, case, 4, :, abscissas, =, ABSCISSAS_4, ;, weights, =, WEIGHTS_4, ;, break, ;, case]
[WEIGHTS_3, ;, break, ;, case, 4, :, abscissas, =, ABSCISSAS_4, ;, weights, =, WEIGHTS_4, ;, break, ;, case, 5, :]
[break, ;, case, 4, :, abscissas, =, ABSCISSAS_4, ;, weights, =, WEIGHTS_4, ;, break, ;, case, 5, :, abscissas, =]
[case, 4, :, abscissas, =, ABSCISSAS_4, ;, weights, =, WEIGHTS_4, ;, break, ;, case, 5, :, abscissas, =, ABSCISSAS_5, ;]
[:, abscissas, =, ABSCISSAS_4, ;, weights, =, WEIGHTS_4, ;, break, ;, case, 5, :, abscissas, =, ABSCISSAS_5, ;, weights, =]
[WEIGHTS_4, ;, break, ;, case, 5, :, abscissas, =, ABSCISSAS_5, ;, weights, =, WEIGHTS_5, ;, break, ;, default, :, throw]
[;, case, 5, :, abscissas, =, ABSCISSAS_5, ;, weights, =, WEIGHTS_5, ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (]
[;, case, 5, :, abscissas, =, ABSCISSAS_5, ;, weights, =, WEIGHTS_5, ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (]
[abscissas, =, ABSCISSAS_5, ;, weights, =, WEIGHTS_5, ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED, ,]
[ABSCISSAS_5, ;, weights, =, WEIGHTS_5, ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED, ,, n, ,]
[weights, =, WEIGHTS_5, ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED, ,, n, ,, 2, ,]
[public, LegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, MathIllegalArgumentException, {, this, (]
[(, final, int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, MathIllegalArgumentException, {, this, (, n, ,]
[int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, MathIllegalArgumentException, {, this, (, n, ,, relativeAccuracy, ,]
[,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, MathIllegalArgumentException, {, this, (, n, ,, relativeAccuracy, ,, absoluteAccuracy, ,]
[double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, MathIllegalArgumentException, {, this, (, n, ,, relativeAccuracy, ,, absoluteAccuracy, ,, DEFAULT_MIN_ITERATIONS_COUNT, ,]
[public, LegendreGaussIntegrator, (, final, int, n, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, MathIllegalArgumentException, {, this, (]
[(, final, int, n, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, MathIllegalArgumentException, {, this, (, n, ,]
[int, n, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, MathIllegalArgumentException, {, this, (, n, ,, DEFAULT_RELATIVE_ACCURACY, ,]
[,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, MathIllegalArgumentException, {, this, (, n, ,, DEFAULT_RELATIVE_ACCURACY, ,, DEFAULT_ABSOLUTE_ACCURACY, ,]
[int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, MathIllegalArgumentException, {, this, (, n, ,, DEFAULT_RELATIVE_ACCURACY, ,, DEFAULT_ABSOLUTE_ACCURACY, ,, minimalIterationCount, ,]
[), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =]
[}, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =, stage, (]
[(, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =, stage, (, 1, ), ;, int, n, =]
[,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =, stage, (, 1, ), ;, int, n, =, 2, ;, while, (]
[=, stage, (, 1, ), ;, int, n, =, 2, ;, while, (, true, ), {, final, double, t, =]
[(, 1, ), ;, int, n, =, 2, ;, while, (, true, ), {, final, double, t, =, stage, (]
[2, ;, while, (, true, ), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =]
[2, ;, while, (, true, ), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =]
[true, ), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =, FastMath, ., abs, (]
[true, ), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =, FastMath, ., abs, (]
[{, final, double, t, =, stage, (, n, ), ;, final, double, delta, =, FastMath, ., abs, (, t, -]
[n, ), ;, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, limit, =]
[n, ), ;, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, limit, =]
[double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, ., max, (]
[., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,]
[., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,]
[., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,]
[-, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *]
[oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (]
[oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (]
[oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (]
[double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (]
[FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +]
[FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +]
[getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (]
[getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *]
[FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (]
[FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (]
[., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, (]
[., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, (]
[., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, (]
[., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, (]
[FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, (, iterations, ., getCount, (, ), +]
[abs, (, t, ), ), *, 0.5, ), ;, if, (, (, iterations, ., getCount, (, ), +, 1, >=]
[*, 0.5, ), ;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), ), &&]
[0.5, ), ;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), ), &&, (]
[0.5, ), ;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), ), &&, (]
[;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), ), &&, (, delta, <=]
[., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), ), &&, (, delta, <=, limit, ), ), {, return]
[>=, getMinimalIterationCount, (, ), ), &&, (, delta, <=, limit, ), ), {, return, t, ;, }, double, ratio, =]
[>=, getMinimalIterationCount, (, ), ), &&, (, delta, <=, limit, ), ), {, return, t, ;, }, double, ratio, =]
[), &&, (, delta, <=, limit, ), ), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (]
[(, delta, <=, limit, ), ), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,]
[(, delta, <=, limit, ), ), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,]
[), ), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (]
[), ), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (]
[{, return, t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /]
[t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,]
[t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,]
[}, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /]
[}, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /]
[min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /, abscissas, ., length, ), ), ;]
[4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /, abscissas, ., length, ), ), ;, n, =]
[4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /, abscissas, ., length, ), ), ;, n, =]
[pow, (, delta, /, limit, ,, 0.5, /, abscissas, ., length, ), ), ;, n, =, FastMath, ., max, (]
[/, limit, ,, 0.5, /, abscissas, ., length, ), ), ;, n, =, FastMath, ., max, (, (, int, )]
[limit, ,, 0.5, /, abscissas, ., length, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (]
[limit, ,, 0.5, /, abscissas, ., length, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (]
[0.5, /, abscissas, ., length, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *]
[., length, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,]
[., length, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,]
[), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +]
[n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;]
[FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;, oldt, =]
[max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;, oldt, =, t, ;]
[max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;, oldt, =, t, ;]
[(, ), ;, }, }, private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {, final, double, step, =]
[(, ), ;, }, }, private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {, final, double, step, =]
[), ;, }, }, private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {, final, double, step, =, (]
[), ;, }, }, private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {, final, double, step, =, (]
[private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {, final, double, step, =, (, getMax, (, ), -]
[int, n, ), throws, TooManyEvaluationsException, {, final, double, step, =, (, getMax, (, ), -, getMin, (, ), ), /]
[final, double, step, =, (, getMax, (, ), -, getMin, (, ), ), /, n, ;, final, double, halfStep, =]
[final, double, step, =, (, getMax, (, ), -, getMin, (, ), ), /, n, ;, final, double, halfStep, =]
[step, =, (, getMax, (, ), -, getMin, (, ), ), /, n, ;, final, double, halfStep, =, step, /]
[), -, getMin, (, ), ), /, n, ;, final, double, halfStep, =, step, /, 2.0, ;, double, midPoint, =]
[), -, getMin, (, ), ), /, n, ;, final, double, halfStep, =, step, /, 2.0, ;, double, midPoint, =]
[), ), /, n, ;, final, double, halfStep, =, step, /, 2.0, ;, double, midPoint, =, getMin, (, ), +]
[final, double, halfStep, =, step, /, 2.0, ;, double, midPoint, =, getMin, (, ), +, halfStep, ;, double, sum, =]
[;, double, midPoint, =, getMin, (, ), +, halfStep, ;, double, sum, =, 0.0, ;, for, (, int, i, =]
[midPoint, =, getMin, (, ), +, halfStep, ;, double, sum, =, 0.0, ;, for, (, int, i, =, 0, ;]
[midPoint, =, getMin, (, ), +, halfStep, ;, double, sum, =, 0.0, ;, for, (, int, i, =, 0, ;]
[getMin, (, ), +, halfStep, ;, double, sum, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <]
[), +, halfStep, ;, double, sum, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[+, halfStep, ;, double, sum, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[=, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[<, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, abscissas, ., length, ;]
[n, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, abscissas, ., length, ;, ++]
[i, ), {, for, (, int, j, =, 0, ;, j, <, abscissas, ., length, ;, ++, j, ), {]
[{, for, (, int, j, =, 0, ;, j, <, abscissas, ., length, ;, ++, j, ), {, sum, +=]
[{, for, (, int, j, =, 0, ;, j, <, abscissas, ., length, ;, ++, j, ), {, sum, +=]
[{, for, (, int, j, =, 0, ;, j, <, abscissas, ., length, ;, ++, j, ), {, sum, +=]
[(, int, j, =, 0, ;, j, <, abscissas, ., length, ;, ++, j, ), {, sum, +=, weights, []
[=, 0, ;, j, <, abscissas, ., length, ;, ++, j, ), {, sum, +=, weights, [, j, ], *]
[;, j, <, abscissas, ., length, ;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (]
[;, j, <, abscissas, ., length, ;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (]
[<, abscissas, ., length, ;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +]
[<, abscissas, ., length, ;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +]
[., length, ;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *]
[., length, ;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *]
[;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, []
[sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, [, j, ], ), ;, }]
[weights, [, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, [, j, ], ), ;, }, midPoint, +=]
[*, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, [, j, ], ), ;, }, midPoint, +=, step, ;, }, return]
[*, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, [, j, ], ), ;, }, midPoint, +=, step, ;, }, return]
[(, midPoint, +, halfStep, *, abscissas, [, j, ], ), ;, }, midPoint, +=, step, ;, }, return, halfStep, *]
