[}, private, final, EnumSet, <, OPTION, >, options, ;, public, NumericEntityUnescaper, (, final, OPTION, ..., options, ), {, if, (]
[}, private, final, EnumSet, <, OPTION, >, options, ;, public, NumericEntityUnescaper, (, final, OPTION, ..., options, ), {, if, (]
[}, private, final, EnumSet, <, OPTION, >, options, ;, public, NumericEntityUnescaper, (, final, OPTION, ..., options, ), {, if, (]
[<, OPTION, >, options, ;, public, NumericEntityUnescaper, (, final, OPTION, ..., options, ), {, if, (, options, ., length, >]
[options, ;, public, NumericEntityUnescaper, (, final, OPTION, ..., options, ), {, if, (, options, ., length, >, 0, ), {]
[options, ;, public, NumericEntityUnescaper, (, final, OPTION, ..., options, ), {, if, (, options, ., length, >, 0, ), {]
[(, final, OPTION, ..., options, ), {, if, (, options, ., length, >, 0, ), {, this, ., options, =]
[(, final, OPTION, ..., options, ), {, if, (, options, ., length, >, 0, ), {, this, ., options, =]
[options, ), {, if, (, options, ., length, >, 0, ), {, this, ., options, =, EnumSet, ., copyOf, (]
[options, ), {, if, (, options, ., length, >, 0, ), {, this, ., options, =, EnumSet, ., copyOf, (]
[(, options, ., length, >, 0, ), {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (]
[{, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, options, ), ), ;, }, else, {]
[{, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, options, ), ), ;, }, else, {]
[=, EnumSet, ., copyOf, (, Arrays, ., asList, (, options, ), ), ;, }, else, {, this, ., options, =]
[=, EnumSet, ., copyOf, (, Arrays, ., asList, (, options, ), ), ;, }, else, {, this, ., options, =]
[(, Arrays, ., asList, (, options, ), ), ;, }, else, {, this, ., options, =, EnumSet, ., copyOf, (]
[(, Arrays, ., asList, (, options, ), ), ;, }, else, {, this, ., options, =, EnumSet, ., copyOf, (]
[(, options, ), ), ;, }, else, {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (]
[;, }, else, {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, new, OPTION, [, ]]
[}, else, {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, new, OPTION, [, ], {]
[}, else, {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, new, OPTION, [, ], {]
[{, OPTION, ., semiColonRequired, }, ), ), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return]
[{, OPTION, ., semiColonRequired, }, ), ), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return]
[{, OPTION, ., semiColonRequired, }, ), ), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return]
[., semiColonRequired, }, ), ), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return, options, ==]
[}, ), ), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return, options, ==, null, ?]
[), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return, options, ==, null, ?, false, :]
[), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return, options, ==, null, ?, false, :]
[public, boolean, isSet, (, final, OPTION, option, ), {, return, options, ==, null, ?, false, :, options, ., contains, (]
[(, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, final, int, seqEnd, =]
[(, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, final, int, seqEnd, =]
[,, final, Writer, out, ), throws, IOException, {, final, int, seqEnd, =, input, ., length, (, ), ;, if, (]
[,, final, Writer, out, ), throws, IOException, {, final, int, seqEnd, =, input, ., length, (, ), ;, if, (]
[,, final, Writer, out, ), throws, IOException, {, final, int, seqEnd, =, input, ., length, (, ), ;, if, (]
[,, final, Writer, out, ), throws, IOException, {, final, int, seqEnd, =, input, ., length, (, ), ;, if, (]
[,, final, Writer, out, ), throws, IOException, {, final, int, seqEnd, =, input, ., length, (, ), ;, if, (]
[), throws, IOException, {, final, int, seqEnd, =, input, ., length, (, ), ;, if, (, input, ., charAt, (]
[{, final, int, seqEnd, =, input, ., length, (, ), ;, if, (, input, ., charAt, (, index, ), ==]
[int, seqEnd, =, input, ., length, (, ), ;, if, (, input, ., charAt, (, index, ), ==, '&', &&]
[int, seqEnd, =, input, ., length, (, ), ;, if, (, input, ., charAt, (, index, ), ==, '&', &&]
[=, input, ., length, (, ), ;, if, (, input, ., charAt, (, index, ), ==, '&', &&, index, <]
[=, input, ., length, (, ), ;, if, (, input, ., charAt, (, index, ), ==, '&', &&, index, <]
[., length, (, ), ;, if, (, input, ., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -]
[(, ), ;, if, (, input, ., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -, 2, &&]
[(, ), ;, if, (, input, ., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -, 2, &&]
[(, ), ;, if, (, input, ., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -, 2, &&]
[(, input, ., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -, 2, &&, input, ., charAt, (]
[(, input, ., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -, 2, &&, input, ., charAt, (]
[., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -, 2, &&, input, ., charAt, (, index, +]
[index, ), ==, '&', &&, index, <, seqEnd, -, 2, &&, input, ., charAt, (, index, +, 1, ), ==]
[<, seqEnd, -, 2, &&, input, ., charAt, (, index, +, 1, ), ==, '#', ), {, int, start, =]
[<, seqEnd, -, 2, &&, input, ., charAt, (, index, +, 1, ), ==, '#', ), {, int, start, =]
[-, 2, &&, input, ., charAt, (, index, +, 1, ), ==, '#', ), {, int, start, =, index, +]
[charAt, (, index, +, 1, ), ==, '#', ), {, int, start, =, index, +, 2, ;, boolean, isHex, =]
[==, '#', ), {, int, start, =, index, +, 2, ;, boolean, isHex, =, false, ;, final, char, firstChar, =]
[==, '#', ), {, int, start, =, index, +, 2, ;, boolean, isHex, =, false, ;, final, char, firstChar, =]
[int, start, =, index, +, 2, ;, boolean, isHex, =, false, ;, final, char, firstChar, =, input, ., charAt, (]
[2, ;, boolean, isHex, =, false, ;, final, char, firstChar, =, input, ., charAt, (, start, ), ;, if, (]
[2, ;, boolean, isHex, =, false, ;, final, char, firstChar, =, input, ., charAt, (, start, ), ;, if, (]
[2, ;, boolean, isHex, =, false, ;, final, char, firstChar, =, input, ., charAt, (, start, ), ;, if, (]
[boolean, isHex, =, false, ;, final, char, firstChar, =, input, ., charAt, (, start, ), ;, if, (, firstChar, ==]
[=, false, ;, final, char, firstChar, =, input, ., charAt, (, start, ), ;, if, (, firstChar, ==, 'x', ||]
[=, false, ;, final, char, firstChar, =, input, ., charAt, (, start, ), ;, if, (, firstChar, ==, 'x', ||]
[;, final, char, firstChar, =, input, ., charAt, (, start, ), ;, if, (, firstChar, ==, 'x', ||, firstChar, ==]
[firstChar, =, input, ., charAt, (, start, ), ;, if, (, firstChar, ==, 'x', ||, firstChar, ==, 'X', ), {]
[firstChar, =, input, ., charAt, (, start, ), ;, if, (, firstChar, ==, 'x', ||, firstChar, ==, 'X', ), {]
[., charAt, (, start, ), ;, if, (, firstChar, ==, 'x', ||, firstChar, ==, 'X', ), {, start, ++, ;]
[(, start, ), ;, if, (, firstChar, ==, 'x', ||, firstChar, ==, 'X', ), {, start, ++, ;, isHex, =]
[if, (, firstChar, ==, 'x', ||, firstChar, ==, 'X', ), {, start, ++, ;, isHex, =, true, ;, if, (]
[if, (, firstChar, ==, 'x', ||, firstChar, ==, 'X', ), {, start, ++, ;, isHex, =, true, ;, if, (]
[firstChar, ==, 'x', ||, firstChar, ==, 'X', ), {, start, ++, ;, isHex, =, true, ;, if, (, start, ==]
[firstChar, ==, 'X', ), {, start, ++, ;, isHex, =, true, ;, if, (, start, ==, seqEnd, ), {, return]
[;, isHex, =, true, ;, if, (, start, ==, seqEnd, ), {, return, 0, ;, }, }, int, end, =]
[;, if, (, start, ==, seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (]
[;, if, (, start, ==, seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (]
[;, if, (, start, ==, seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (]
[(, start, ==, seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (, end, <]
[==, seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&]
[seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&, (]
[seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&, (]
[seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&, (]
[seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&, (]
[seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&, (]
[seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&, (]
[0, ;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&, (, input, ., charAt, (]
[}, int, end, =, start, ;, while, (, end, <, seqEnd, &&, (, input, ., charAt, (, end, ), >=]
[end, =, start, ;, while, (, end, <, seqEnd, &&, (, input, ., charAt, (, end, ), >=, '0', &&]
[end, =, start, ;, while, (, end, <, seqEnd, &&, (, input, ., charAt, (, end, ), >=, '0', &&]
[end, =, start, ;, while, (, end, <, seqEnd, &&, (, input, ., charAt, (, end, ), >=, '0', &&]
[while, (, end, <, seqEnd, &&, (, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (]
[<, seqEnd, &&, (, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=]
[&&, (, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||]
[&&, (, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||]
[&&, (, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||]
[&&, (, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||]
[charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (]
[), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=]
['0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&]
['0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&]
['0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&]
[charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (]
[), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=]
['9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||]
['9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||]
['9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||]
['9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||]
[charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (]
[), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=]
['a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&]
['a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&]
['a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&]
[charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (]
[), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=]
[input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F', ), ), {]
[input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F', ), ), {]
[&&, input, ., charAt, (, end, ), <=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =]
[&&, input, ., charAt, (, end, ), <=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =]
[&&, input, ., charAt, (, end, ), <=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =]
[., charAt, (, end, ), <=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=]
[(, end, ), <=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&]
[(, end, ), <=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&]
[(, end, ), <=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&]
['F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (]
[{, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (, end, ), ==]
[}, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (, end, ), ==, ';', ;, if, (]
[final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (, end, ), ==, ';', ;, if, (, !]
[!=, seqEnd, &&, input, ., charAt, (, end, ), ==, ';', ;, if, (, !, semiNext, ), {, if, (]
[&&, input, ., charAt, (, end, ), ==, ';', ;, if, (, !, semiNext, ), {, if, (, isSet, (]
[&&, input, ., charAt, (, end, ), ==, ';', ;, if, (, !, semiNext, ), {, if, (, isSet, (]
[==, ';', ;, if, (, !, semiNext, ), {, if, (, isSet, (, OPTION, ., semiColonRequired, ), ), {, return]
[semiNext, ), {, if, (, isSet, (, OPTION, ., semiColonRequired, ), ), {, return, 0, ;, }, else, if, (]
[{, if, (, isSet, (, OPTION, ., semiColonRequired, ), ), {, return, 0, ;, }, else, if, (, isSet, (]
[{, if, (, isSet, (, OPTION, ., semiColonRequired, ), ), {, return, 0, ;, }, else, if, (, isSet, (]
[semiColonRequired, ), ), {, return, 0, ;, }, else, if, (, isSet, (, OPTION, ., errorIfNoSemiColon, ), ), {, throw]
[{, return, 0, ;, }, else, if, (, isSet, (, OPTION, ., errorIfNoSemiColon, ), ), {, throw, new, IllegalArgumentException, (]
[errorIfNoSemiColon, ), ), {, throw, new, IllegalArgumentException, (, "Semi-colon required at end of numeric entity", ), ;, }, }, int, entityValue, ;, try, {, if, (]
[{, throw, new, IllegalArgumentException, (, "Semi-colon required at end of numeric entity", ), ;, }, }, int, entityValue, ;, try, {, if, (, isHex, ), {]
[new, IllegalArgumentException, (, "Semi-colon required at end of numeric entity", ), ;, }, }, int, entityValue, ;, try, {, if, (, isHex, ), {, entityValue, =]
[new, IllegalArgumentException, (, "Semi-colon required at end of numeric entity", ), ;, }, }, int, entityValue, ;, try, {, if, (, isHex, ), {, entityValue, =]
[), ;, }, }, int, entityValue, ;, try, {, if, (, isHex, ), {, entityValue, =, Integer, ., parseInt, (]
[), ;, }, }, int, entityValue, ;, try, {, if, (, isHex, ), {, entityValue, =, Integer, ., parseInt, (]
[), ;, }, }, int, entityValue, ;, try, {, if, (, isHex, ), {, entityValue, =, Integer, ., parseInt, (]
[int, entityValue, ;, try, {, if, (, isHex, ), {, entityValue, =, Integer, ., parseInt, (, input, ., subSequence, (]
[;, try, {, if, (, isHex, ), {, entityValue, =, Integer, ., parseInt, (, input, ., subSequence, (, start, ,]
[{, entityValue, =, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,]
[(, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 16, ), ;, }, else, {]
[., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 16, ), ;, }, else, {, entityValue, =]
[., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 16, ), ;, }, else, {, entityValue, =]
[,, end, ), ., toString, (, ), ,, 16, ), ;, }, else, {, entityValue, =, Integer, ., parseInt, (]
[,, end, ), ., toString, (, ), ,, 16, ), ;, }, else, {, entityValue, =, Integer, ., parseInt, (]
[,, end, ), ., toString, (, ), ,, 16, ), ;, }, else, {, entityValue, =, Integer, ., parseInt, (]
[toString, (, ), ,, 16, ), ;, }, else, {, entityValue, =, Integer, ., parseInt, (, input, ., subSequence, (]
[), ,, 16, ), ;, }, else, {, entityValue, =, Integer, ., parseInt, (, input, ., subSequence, (, start, ,]
[{, entityValue, =, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,]
[end, ), ., toString, (, ), ,, 10, ), ;, }, }, catch, (, final, NumberFormatException, nfe, ), {, return]
[), ,, 10, ), ;, }, }, catch, (, final, NumberFormatException, nfe, ), {, return, 0, ;, }, if, (]
[), ,, 10, ), ;, }, }, catch, (, final, NumberFormatException, nfe, ), {, return, 0, ;, }, if, (]
[10, ), ;, }, }, catch, (, final, NumberFormatException, nfe, ), {, return, 0, ;, }, if, (, entityValue, >]
[nfe, ), {, return, 0, ;, }, if, (, entityValue, >, 0xFFFF, ), {, final, char, [, ], chrs, =]
[nfe, ), {, return, 0, ;, }, if, (, entityValue, >, 0xFFFF, ), {, final, char, [, ], chrs, =]
[0, ;, }, if, (, entityValue, >, 0xFFFF, ), {, final, char, [, ], chrs, =, Character, ., toChars, (]
[if, (, entityValue, >, 0xFFFF, ), {, final, char, [, ], chrs, =, Character, ., toChars, (, entityValue, ), ;]
[if, (, entityValue, >, 0xFFFF, ), {, final, char, [, ], chrs, =, Character, ., toChars, (, entityValue, ), ;]
[0xFFFF, ), {, final, char, [, ], chrs, =, Character, ., toChars, (, entityValue, ), ;, out, ., write, (]
[0xFFFF, ), {, final, char, [, ], chrs, =, Character, ., toChars, (, entityValue, ), ;, out, ., write, (]
[{, final, char, [, ], chrs, =, Character, ., toChars, (, entityValue, ), ;, out, ., write, (, chrs, []
[], chrs, =, Character, ., toChars, (, entityValue, ), ;, out, ., write, (, chrs, [, 0, ], ), ;]
[], chrs, =, Character, ., toChars, (, entityValue, ), ;, out, ., write, (, chrs, [, 0, ], ), ;]
[., toChars, (, entityValue, ), ;, out, ., write, (, chrs, [, 0, ], ), ;, out, ., write, (]
[., toChars, (, entityValue, ), ;, out, ., write, (, chrs, [, 0, ], ), ;, out, ., write, (]
[(, entityValue, ), ;, out, ., write, (, chrs, [, 0, ], ), ;, out, ., write, (, chrs, []
[(, chrs, [, 0, ], ), ;, out, ., write, (, chrs, [, 1, ], ), ;, }, else, {]
[(, chrs, [, 0, ], ), ;, out, ., write, (, chrs, [, 1, ], ), ;, }, else, {]
[], ), ;, out, ., write, (, chrs, [, 1, ], ), ;, }, else, {, out, ., write, (]
[write, (, chrs, [, 1, ], ), ;, }, else, {, out, ., write, (, entityValue, ), ;, }, return]
[write, (, chrs, [, 1, ], ), ;, }, else, {, out, ., write, (, entityValue, ), ;, }, return]
[write, (, chrs, [, 1, ], ), ;, }, else, {, out, ., write, (, entityValue, ), ;, }, return]
[write, (, chrs, [, 1, ], ), ;, }, else, {, out, ., write, (, entityValue, ), ;, }, return]
[write, (, chrs, [, 1, ], ), ;, }, else, {, out, ., write, (, entityValue, ), ;, }, return]
[chrs, [, 1, ], ), ;, }, else, {, out, ., write, (, entityValue, ), ;, }, return, 2, +]
[1, ], ), ;, }, else, {, out, ., write, (, entityValue, ), ;, }, return, 2, +, end, -]
[), ;, }, else, {, out, ., write, (, entityValue, ), ;, }, return, 2, +, end, -, start, +]
[;, }, else, {, out, ., write, (, entityValue, ), ;, }, return, 2, +, end, -, start, +, (]
[;, }, else, {, out, ., write, (, entityValue, ), ;, }, return, 2, +, end, -, start, +, (]
[else, {, out, ., write, (, entityValue, ), ;, }, return, 2, +, end, -, start, +, (, isHex, ?]
[out, ., write, (, entityValue, ), ;, }, return, 2, +, end, -, start, +, (, isHex, ?, 1, :]
[(, entityValue, ), ;, }, return, 2, +, end, -, start, +, (, isHex, ?, 1, :, 0, ), +]
[entityValue, ), ;, }, return, 2, +, end, -, start, +, (, isHex, ?, 1, :, 0, ), +, (]
[entityValue, ), ;, }, return, 2, +, end, -, start, +, (, isHex, ?, 1, :, 0, ), +, (]
[;, }, return, 2, +, end, -, start, +, (, isHex, ?, 1, :, 0, ), +, (, semiNext, ?]
[return, 2, +, end, -, start, +, (, isHex, ?, 1, :, 0, ), +, (, semiNext, ?, 1, :]
[start, +, (, isHex, ?, 1, :, 0, ), +, (, semiNext, ?, 1, :, 0, ), ;, }, return]
