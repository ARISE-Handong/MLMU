[;, private, final, JSType, nullOrUndefined, ;, private, final, List, <, TypeMismatch, >, mismatches, =, Lists, ., newArrayList, (, ), ;]
[;, private, static, final, String, FOUND_REQUIRED, =, "{0}\n", +, "found   : {1}\n", +, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, .]
[., newArrayList, (, ), ;, private, static, final, String, FOUND_REQUIRED, =, "{0}\n", +, "found   : {1}\n", +, "required: {2}", ;, static, final, DiagnosticType]
[;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}", ), ;, static]
[+, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}", )]
[+, "found   : {1}\n", +, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +]
[+, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}", )]
[;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}", ), ;, static]
[;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", ), ;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING, =]
[., disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}", ), ;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning]
[,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}", ), ;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}"]
[), ;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", ), ;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING]
[+, "to  : {1}", ), ;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", ), ;, static, final]
[+, "from: {0}\n", +, "to  : {1}", ), ;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", ), ;]
[+, "to  : {1}", ), ;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", ), ;, static, final]
[), ;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", ), ;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING]
[;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING, =, DiagnosticType, ., warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}", ), ;, static, final, DiagnosticType, DUP_VAR_DECLARATION, =]
[., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", ), ;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING, =, DiagnosticType, ., warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}"]
[,, "{0}", ), ;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING, =, DiagnosticType, ., warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}", ), ;, static, final]
[), ;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING, =, DiagnosticType, ., warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}", ), ;, static, final, DiagnosticType, DUP_VAR_DECLARATION]
[;, static, final, DiagnosticType, DUP_VAR_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}", ), ;, static, final, DiagnosticType, DUP_VAR_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, "]
[,, "Missing @extends tag on type {0}", ), ;, static, final, DiagnosticType, DUP_VAR_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;]
[), ;, static, final, DiagnosticType, DUP_VAR_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final]
[;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", )]
[., warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH"]
[,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n"]
[), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}"]
[+, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n"]
[), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}"]
[;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =]
[., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType]
[,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED"]
[), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH]
[+, "override: {3}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final]
[+, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;]
[+, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}"]
[+, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;]
[+, "override: {3}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final]
[), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH]
[;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +, "override: {3}", )]
[., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type "]
[,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n"]
[), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +, "override: {3}"]
[;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS, =]
[., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType]
[,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE"]
[), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS]
[+, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;, static, final]
[+, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;]
[+, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}"]
[+, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;]
[+, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;, static, final]
[), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS]
[;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_ACCESS", ,, "Cannot do {0} access on a {1}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =]
[., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_ACCESS", ,, "Cannot do {0} access on a {1}"]
[,, "unknown type: {0}", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_ACCESS", ,, "Cannot do {0} access on a {1}", ), ;, static, final]
[), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_ACCESS", ,, "Cannot do {0} access on a {1}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS]
[;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,, MISSING_EXTENDS_TAG_WARNING, ,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,, INTERFACE_METHOD_NOT_IMPLEMENTED]
[., warning, (, "JSC_ILLEGAL_PROPERTY_ACCESS", ,, "Cannot do {0} access on a {1}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,]
[,, "Cannot do {0} access on a {1}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,, MISSING_EXTENDS_TAG_WARNING, ,, DUP_VAR_DECLARATION, ,]
[), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,, MISSING_EXTENDS_TAG_WARNING, ,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,]
[;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry]
[,, TYPE_MISMATCH_WARNING, ,, MISSING_EXTENDS_TAG_WARNING, ,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (]
[,, MISSING_EXTENDS_TAG_WARNING, ,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler]
[,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {]
[,, HIDDEN_PROPERTY_MISMATCH, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, .]
[,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, .]
[,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., typeRegistry, =]
[), ;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., typeRegistry, =, compiler, .]
[=, compiler, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., allValueTypes, =, typeRegistry, ., createUnionType]
[., compiler, =, compiler, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., allValueTypes, =, typeRegistry]
[;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE]
[=, compiler, ., getTypeRegistry, (, ), ;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE]
[., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE]
[;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;]
[., getTypeRegistry, (, ), ;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE]
[=, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;, this, ., nullOrUndefined, =]
[., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;, this, .]
[;, this, ., nullOrUndefined, =, typeRegistry, ., createUnionType, (, NULL_TYPE, ,, VOID_TYPE, ), ;, }, Iterable, <, TypeMismatch, >, getMismatches]
[., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;, this, ., nullOrUndefined, =, typeRegistry, .]
[,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;, this, ., nullOrUndefined, =, typeRegistry, ., createUnionType, (, NULL_TYPE, ,]
[,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;, this, ., nullOrUndefined, =, typeRegistry, ., createUnionType, (, NULL_TYPE, ,, VOID_TYPE, )]
[,, NULL_TYPE, ,, VOID_TYPE, ), ;, this, ., nullOrUndefined, =, typeRegistry, ., createUnionType, (, NULL_TYPE, ,, VOID_TYPE, ), ;, }]
[,, VOID_TYPE, ), ;, this, ., nullOrUndefined, =, typeRegistry, ., createUnionType, (, NULL_TYPE, ,, VOID_TYPE, ), ;, }, Iterable, <]
[), ;, this, ., nullOrUndefined, =, typeRegistry, ., createUnionType, (, NULL_TYPE, ,, VOID_TYPE, ), ;, }, Iterable, <, TypeMismatch, >]
[=, typeRegistry, ., createUnionType, (, NULL_TYPE, ,, VOID_TYPE, ), ;, }, Iterable, <, TypeMismatch, >, getMismatches, (, ), {, return]
[., nullOrUndefined, =, typeRegistry, ., createUnionType, (, NULL_TYPE, ,, VOID_TYPE, ), ;, }, Iterable, <, TypeMismatch, >, getMismatches, (, )]
[;, }, Iterable, <, TypeMismatch, >, getMismatches, (, ), {, return, mismatches, ;, }, void, setShouldReport, (, boolean, report, )]
[., createUnionType, (, NULL_TYPE, ,, VOID_TYPE, ), ;, }, Iterable, <, TypeMismatch, >, getMismatches, (, ), {, return, mismatches, ;]
[,, VOID_TYPE, ), ;, }, Iterable, <, TypeMismatch, >, getMismatches, (, ), {, return, mismatches, ;, }, void, setShouldReport, (]
[), ;, }, Iterable, <, TypeMismatch, >, getMismatches, (, ), {, return, mismatches, ;, }, void, setShouldReport, (, boolean, report]
[;, }, void, setShouldReport, (, boolean, report, ), {, this, ., shouldReport, =, report, ;, }, void, expectValidTypeofName, (, NodeTraversal]
[=, report, ;, }, void, expectValidTypeofName, (, NodeTraversal, t, ,, Node, n, ,, String, found, ), {, report, (, JSError]
[., shouldReport, =, report, ;, }, void, expectValidTypeofName, (, NodeTraversal, t, ,, Node, n, ,, String, found, ), {, report]
[;, }, void, expectValidTypeofName, (, NodeTraversal, t, ,, Node, n, ,, String, found, ), {, report, (, JSError, ., make]
[;, }, boolean, expectObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (]
[), ;, }, boolean, expectObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if]
[., make, (, t, ., getSourceName, (, ), ,, n, ,, UNKNOWN_TYPEOF_VALUE, ,, found, ), ), ;, }, boolean, expectObject]
[,, n, ,, UNKNOWN_TYPEOF_VALUE, ,, found, ), ), ;, }, boolean, expectObject, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[., getSourceName, (, ), ,, n, ,, UNKNOWN_TYPEOF_VALUE, ,, found, ), ), ;, }, boolean, expectObject, (, NodeTraversal, t, ,]
[,, UNKNOWN_TYPEOF_VALUE, ,, found, ), ), ;, }, boolean, expectObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,]
[,, found, ), ), ;, }, boolean, expectObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg]
[), ), ;, }, boolean, expectObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, OBJECT_TYPE, ), ;, return, false, ;, }, return]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, OBJECT_TYPE, ), ;, return, false, ;, }, return]
[., matchesObjectContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, OBJECT_TYPE, ), ;, return]
[;, return, false, ;, }, return, true, ;, }, void, expectActualObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type]
[,, n, ,, msg, ,, type, ,, OBJECT_TYPE, ), ;, return, false, ;, }, return, true, ;, }, void, expectActualObject]
[,, msg, ,, type, ,, OBJECT_TYPE, ), ;, return, false, ;, }, return, true, ;, }, void, expectActualObject, (, NodeTraversal]
[,, type, ,, OBJECT_TYPE, ), ;, return, false, ;, }, return, true, ;, }, void, expectActualObject, (, NodeTraversal, t, ,]
[,, OBJECT_TYPE, ), ;, return, false, ;, }, return, true, ;, }, void, expectActualObject, (, NodeTraversal, t, ,, Node, n]
[), ;, return, false, ;, }, return, true, ;, }, void, expectActualObject, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[;, }, return, true, ;, }, void, expectActualObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg]
[;, }, void, expectActualObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, OBJECT_TYPE, ), ;, }, }, void, expectAnyObject, (]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, OBJECT_TYPE, ), ;, }, }, void, expectAnyObject, (]
[., isObject, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, OBJECT_TYPE, ), ;, }]
[;, }, }, void, expectAnyObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, JSType]
[,, n, ,, msg, ,, type, ,, OBJECT_TYPE, ), ;, }, }, void, expectAnyObject, (, NodeTraversal, t, ,, Node, n]
[,, msg, ,, type, ,, OBJECT_TYPE, ), ;, }, }, void, expectAnyObject, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[,, type, ,, OBJECT_TYPE, ), ;, }, }, void, expectAnyObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,]
[,, OBJECT_TYPE, ), ;, }, }, void, expectAnyObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg]
[), ;, }, }, void, expectAnyObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {]
[;, if, (, !, anyObjectType, ., isSubtype, (, type, ), &&, !, type, ., isEmptyType, (, ), ), {, mismatch]
[), ;, if, (, !, anyObjectType, ., isSubtype, (, type, ), &&, !, type, ., isEmptyType, (, ), ), {]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, anyObjectType, ), ;, }, }, void, expectString, (]
[&&, !, type, ., isEmptyType, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, anyObjectType]
[&&, !, type, ., isEmptyType, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, anyObjectType]
[., isSubtype, (, type, ), &&, !, type, ., isEmptyType, (, ), ), {, mismatch, (, t, ,, n, ,]
[), &&, !, type, ., isEmptyType, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, anyObjectType, ), ;, }, }, void, expectString, (]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, anyObjectType, ), ;, }, }, void, expectString, (]
[., isEmptyType, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, anyObjectType, ), ;, }]
[;, }, }, void, expectString, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if]
[,, n, ,, msg, ,, type, ,, anyObjectType, ), ;, }, }, void, expectString, (, NodeTraversal, t, ,, Node, n]
[,, msg, ,, type, ,, anyObjectType, ), ;, }, }, void, expectString, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[,, type, ,, anyObjectType, ), ;, }, }, void, expectString, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,]
[,, anyObjectType, ), ;, }, }, void, expectString, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg]
[), ;, }, }, void, expectString, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, STRING_TYPE, ), ;, }, }, void, expectNumber, (]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, STRING_TYPE, ), ;, }, }, void, expectNumber, (]
[., matchesStringContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, STRING_TYPE, ), ;, }]
[;, }, }, void, expectNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if]
[,, n, ,, msg, ,, type, ,, STRING_TYPE, ), ;, }, }, void, expectNumber, (, NodeTraversal, t, ,, Node, n]
[,, msg, ,, type, ,, STRING_TYPE, ), ;, }, }, void, expectNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[,, type, ,, STRING_TYPE, ), ;, }, }, void, expectNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,]
[,, STRING_TYPE, ), ;, }, }, void, expectNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg]
[), ;, }, }, void, expectNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, NUMBER_TYPE, ), ;, }, }, void, expectBitwiseable, (]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, NUMBER_TYPE, ), ;, }, }, void, expectBitwiseable, (]
[., matchesNumberContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, NUMBER_TYPE, ), ;, }]
[;, }, }, void, expectBitwiseable, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if]
[,, n, ,, msg, ,, type, ,, NUMBER_TYPE, ), ;, }, }, void, expectBitwiseable, (, NodeTraversal, t, ,, Node, n]
[,, msg, ,, type, ,, NUMBER_TYPE, ), ;, }, }, void, expectBitwiseable, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[,, type, ,, NUMBER_TYPE, ), ;, }, }, void, expectBitwiseable, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,]
[,, NUMBER_TYPE, ), ;, }, }, void, expectBitwiseable, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg]
[), ;, }, }, void, expectBitwiseable, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, allValueTypes, ), ;, }, }, void, expectStringOrNumber, (]
[&&, !, type, ., isSubtype, (, allValueTypes, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[&&, !, type, ., isSubtype, (, allValueTypes, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[., matchesNumberContext, (, ), &&, !, type, ., isSubtype, (, allValueTypes, ), ), {, mismatch, (, t, ,, n, ,]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, allValueTypes, ), ;, }, }, void, expectStringOrNumber, (]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, allValueTypes, ), ;, }, }, void, expectStringOrNumber, (]
[., isSubtype, (, allValueTypes, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, allValueTypes, ), ;]
[), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, allValueTypes, ), ;, }, }, void, expectStringOrNumber]
[;, }, }, void, expectStringOrNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if]
[,, n, ,, msg, ,, type, ,, allValueTypes, ), ;, }, }, void, expectStringOrNumber, (, NodeTraversal, t, ,, Node, n]
[,, msg, ,, type, ,, allValueTypes, ), ;, }, }, void, expectStringOrNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[,, type, ,, allValueTypes, ), ;, }, }, void, expectStringOrNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,]
[,, allValueTypes, ), ;, }, }, void, expectStringOrNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg]
[), ;, }, }, void, expectStringOrNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, NUMBER_STRING, ), ;, }, }, boolean, expectNotNullOrUndefined, (]
[&&, !, type, ., matchesStringContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, NUMBER_STRING]
[&&, !, type, ., matchesStringContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, NUMBER_STRING]
[., matchesNumberContext, (, ), &&, !, type, ., matchesStringContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, NUMBER_STRING, ), ;, }, }, boolean, expectNotNullOrUndefined, (]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, NUMBER_STRING, ), ;, }, }, boolean, expectNotNullOrUndefined, (]
[., matchesStringContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, NUMBER_STRING, ), ;, }]
[;, }, }, boolean, expectNotNullOrUndefined, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ,, JSType, expectedType]
[,, n, ,, msg, ,, type, ,, NUMBER_STRING, ), ;, }, }, boolean, expectNotNullOrUndefined, (, NodeTraversal, t, ,, Node, n]
[,, msg, ,, type, ,, NUMBER_STRING, ), ;, }, }, boolean, expectNotNullOrUndefined, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[,, type, ,, NUMBER_STRING, ), ;, }, }, boolean, expectNotNullOrUndefined, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,]
[,, NUMBER_STRING, ), ;, }, }, boolean, expectNotNullOrUndefined, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg]
[), ;, }, }, boolean, expectNotNullOrUndefined, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ,, JSType]
[), {, if, (, n, ., isGetProp, (, ), &&, !, t, ., inGlobalScope, (, ), &&, type, ., isNullType]
[&&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (, n, ., isGetProp, (, ), &&, !, t, ., inGlobalScope]
[&&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (, n, ., isGetProp]
[&&, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, )]
[&&, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, )]
[., isNoType, (, ), &&, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&, !]
[&&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (, n, ., isGetProp]
[&&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (, n, ., isGetProp]
[., isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if]
[&&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (, n, ., isGetProp, (, ), &&, !, t, ., inGlobalScope]
[., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (, n, ., isGetProp, (, )]
[), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (, n, ., isGetProp, (, ), &&, !, t, .]
[), {, if, (, n, ., isGetProp, (, ), &&, !, t, ., inGlobalScope, (, ), &&, type, ., isNullType]
[), {, if, (, n, ., isGetProp, (, ), &&, !, t, ., inGlobalScope, (, ), &&, type, ., isNullType]
[), ), {, if, (, n, ., isGetProp, (, ), &&, !, t, ., inGlobalScope, (, ), &&, type, .]
[), {, return, true, ;, }, mismatch, (, t, ,, n, ,, msg, ,, type, ,, expectedType, ), ;, return]
[&&, type, ., isNullType, (, ), ), {, return, true, ;, }, mismatch, (, t, ,, n, ,, msg, ,]
[&&, !, t, ., inGlobalScope, (, ), &&, type, ., isNullType, (, ), ), {, return, true, ;, }, mismatch]
[., isGetProp, (, ), &&, !, t, ., inGlobalScope, (, ), &&, type, ., isNullType, (, ), ), {, return]
[&&, type, ., isNullType, (, ), ), {, return, true, ;, }, mismatch, (, t, ,, n, ,, msg, ,]
[&&, type, ., isNullType, (, ), ), {, return, true, ;, }, mismatch, (, t, ,, n, ,, msg, ,]
[., inGlobalScope, (, ), &&, type, ., isNullType, (, ), ), {, return, true, ;, }, mismatch, (, t, ,]
[), {, return, true, ;, }, mismatch, (, t, ,, n, ,, msg, ,, type, ,, expectedType, ), ;, return]
[., isNullType, (, ), ), {, return, true, ;, }, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[;, }, mismatch, (, t, ,, n, ,, msg, ,, type, ,, expectedType, ), ;, return, false, ;, }, return]
[;, return, false, ;, }, return, true, ;, }, private, boolean, containsForwardDeclaredUnresolvedName, (, JSType, type, ), {, if, (, type]
[,, n, ,, msg, ,, type, ,, expectedType, ), ;, return, false, ;, }, return, true, ;, }, private, boolean]
[,, msg, ,, type, ,, expectedType, ), ;, return, false, ;, }, return, true, ;, }, private, boolean, containsForwardDeclaredUnresolvedName, (]
[,, type, ,, expectedType, ), ;, return, false, ;, }, return, true, ;, }, private, boolean, containsForwardDeclaredUnresolvedName, (, JSType, type]
[,, expectedType, ), ;, return, false, ;, }, return, true, ;, }, private, boolean, containsForwardDeclaredUnresolvedName, (, JSType, type, ), {]
[), ;, return, false, ;, }, return, true, ;, }, private, boolean, containsForwardDeclaredUnresolvedName, (, JSType, type, ), {, if, (]
[;, }, return, true, ;, }, private, boolean, containsForwardDeclaredUnresolvedName, (, JSType, type, ), {, if, (, type, ., isUnionType, (]
[;, }, private, boolean, containsForwardDeclaredUnresolvedName, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {, for]
[), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, if, (]
[., isUnionType, (, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[), {, if, (, containsForwardDeclaredUnresolvedName, (, alt, ), ), {, return, true, ;, }, }, }, return, type, ., isNoResolvedType]
[., getAlternates, (, ), ), {, if, (, containsForwardDeclaredUnresolvedName, (, alt, ), ), {, return, true, ;, }, }, }]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, if, (, containsForwardDeclaredUnresolvedName, (, alt, ), ), {, return, true]
[), {, return, true, ;, }, }, }, return, type, ., isNoResolvedType, (, ), ;, }, void, expectSwitchMatchesCase, (, NodeTraversal]
[), ), {, return, true, ;, }, }, }, return, type, ., isNoResolvedType, (, ), ;, }, void, expectSwitchMatchesCase, (]
[;, }, }, }, return, type, ., isNoResolvedType, (, ), ;, }, void, expectSwitchMatchesCase, (, NodeTraversal, t, ,, Node, n]
[;, }, void, expectSwitchMatchesCase, (, NodeTraversal, t, ,, Node, n, ,, JSType, switchType, ,, JSType, caseType, ), {, if, (]
[., isNoResolvedType, (, ), ;, }, void, expectSwitchMatchesCase, (, NodeTraversal, t, ,, Node, n, ,, JSType, switchType, ,, JSType, caseType]
[), {, mismatch, (, t, ,, n, ., getFirstChild, (, ), ,, "case expression doesn't match switch", ,, caseType, ,, switchType, ), ;, }]
[&&, (, caseType, ., autoboxesTo, (, ), ==, null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType]
[&&, (, caseType, ., autoboxesTo, (, ), ==, null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType]
[., canTestForShallowEqualityWith, (, caseType, ), &&, (, caseType, ., autoboxesTo, (, ), ==, null, ||, !, caseType, ., autoboxesTo, (]
[), &&, (, caseType, ., autoboxesTo, (, ), ==, null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (]
[), {, mismatch, (, t, ,, n, ., getFirstChild, (, ), ,, "case expression doesn't match switch", ,, caseType, ,, switchType, ), ;, }]
[), ), {, mismatch, (, t, ,, n, ., getFirstChild, (, ), ,, "case expression doesn't match switch", ,, caseType, ,, switchType, ), ;]
[||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, ), ), ), {, mismatch, (, t, ,, n]
[==, null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, ), ), ), {, mismatch, (, t]
[., autoboxesTo, (, ), ==, null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, ), ), )]
[||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, ), ), ), {, mismatch, (, t, ,, n]
[), ), {, mismatch, (, t, ,, n, ., getFirstChild, (, ), ,, "case expression doesn't match switch", ,, caseType, ,, switchType, ), ;]
[), ), {, mismatch, (, t, ,, n, ., getFirstChild, (, ), ,, "case expression doesn't match switch", ,, caseType, ,, switchType, ), ;]
[., isSubtype, (, switchType, ), ), ), {, mismatch, (, t, ,, n, ., getFirstChild, (, ), ,, "case expression doesn't match switch", ,]
[., autoboxesTo, (, ), ., isSubtype, (, switchType, ), ), ), {, mismatch, (, t, ,, n, ., getFirstChild, (]
[), ), ), {, mismatch, (, t, ,, n, ., getFirstChild, (, ), ,, "case expression doesn't match switch", ,, caseType, ,, switchType, )]
[;, }, }, void, expectIndexMatch, (, NodeTraversal, t, ,, Node, n, ,, JSType, objType, ,, JSType, indexType, ), {, Preconditions]
[,, n, ., getFirstChild, (, ), ,, "case expression doesn't match switch", ,, caseType, ,, switchType, ), ;, }, }, void, expectIndexMatch, (, NodeTraversal]
[,, "case expression doesn't match switch", ,, caseType, ,, switchType, ), ;, }, }, void, expectIndexMatch, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[., getFirstChild, (, ), ,, "case expression doesn't match switch", ,, caseType, ,, switchType, ), ;, }, }, void, expectIndexMatch, (, NodeTraversal, t, ,]
[,, caseType, ,, switchType, ), ;, }, }, void, expectIndexMatch, (, NodeTraversal, t, ,, Node, n, ,, JSType, objType, ,]
[,, switchType, ), ;, }, }, void, expectIndexMatch, (, NodeTraversal, t, ,, Node, n, ,, JSType, objType, ,, JSType, indexType]
[), ;, }, }, void, expectIndexMatch, (, NodeTraversal, t, ,, Node, n, ,, JSType, objType, ,, JSType, indexType, ), {]
[;, Node, indexNode, =, n, ., getLastChild, (, ), ;, if, (, objType, ., isStruct, (, ), ), {, report]
[., checkState, (, n, ., isGetElem, (, ), ), ;, Node, indexNode, =, n, ., getLastChild, (, ), ;, if]
[), ;, Node, indexNode, =, n, ., getLastChild, (, ), ;, if, (, objType, ., isStruct, (, ), ), {]
[., isGetElem, (, ), ), ;, Node, indexNode, =, n, ., getLastChild, (, ), ;, if, (, objType, ., isStruct]
[;, if, (, objType, ., isStruct, (, ), ), {, report, (, JSError, ., make, (, t, ., getSourceName, (]
[., getLastChild, (, ), ;, if, (, objType, ., isStruct, (, ), ), {, report, (, JSError, ., make, (]
[), {, report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, indexNode, ,, ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,]
[., isStruct, (, ), ), {, report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, indexNode, ,]
[;, }, if, (, objType, ., isUnknownType, (, ), ), {, expectStringOrNumber, (, t, ,, indexNode, ,, indexType, ,, "property access"]
[), ;, }, if, (, objType, ., isUnknownType, (, ), ), {, expectStringOrNumber, (, t, ,, indexNode, ,, indexType, ,]
[., make, (, t, ., getSourceName, (, ), ,, indexNode, ,, ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,, "struct", ), ), ;, }]
[,, indexNode, ,, ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,, "struct", ), ), ;, }, if, (, objType, ., isUnknownType, (, ), )]
[., getSourceName, (, ), ,, indexNode, ,, ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,, "struct", ), ), ;, }, if, (, objType, .]
[,, ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,, "struct", ), ), ;, }, if, (, objType, ., isUnknownType, (, ), ), {, expectStringOrNumber]
[,, "'[]'", ,, "struct", ), ), ;, }, if, (, objType, ., isUnknownType, (, ), ), {, expectStringOrNumber, (, t]
[,, "struct", ), ), ;, }, if, (, objType, ., isUnknownType, (, ), ), {, expectStringOrNumber, (, t, ,, indexNode]
[), ), ;, }, if, (, objType, ., isUnknownType, (, ), ), {, expectStringOrNumber, (, t, ,, indexNode, ,, indexType]
[), {, expectStringOrNumber, (, t, ,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, ObjectType, dereferenced, =, objType]
[., isUnknownType, (, ), ), {, expectStringOrNumber, (, t, ,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {]
[;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;, if, (, dereferenced, !=, null, &&, dereferenced]
[,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;]
[,, indexType, ,, "property access", ), ;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;, if, (]
[,, "property access", ), ;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;, if, (, dereferenced, !=]
[), ;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;, if, (, dereferenced, !=, null, &&]
[;, if, (, dereferenced, !=, null, &&, dereferenced, ., getIndexType, (, ), !=, null, ), {, expectCanAssignTo, (, t, ,]
[., dereference, (, ), ;, if, (, dereferenced, !=, null, &&, dereferenced, ., getIndexType, (, ), !=, null, ), {]
[), {, expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }]
[&&, dereferenced, ., getIndexType, (, ), !=, null, ), {, expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,, dereferenced, .]
[!=, null, &&, dereferenced, ., getIndexType, (, ), !=, null, ), {, expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,]
[&&, dereferenced, ., getIndexType, (, ), !=, null, ), {, expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,, dereferenced, .]
[), {, expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }]
[!=, null, ), {, expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", )]
[., getIndexType, (, ), !=, null, ), {, expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (]
[), {, expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }]
[;, }, else, if, (, dereferenced, !=, null, &&, dereferenced, ., isArrayType, (, ), ), {, expectNumber, (, t, ,]
[,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }, else, if, (, dereferenced, !=]
[,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }, else, if, (, dereferenced, !=, null, &&]
[,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }, else, if, (, dereferenced, !=, null, &&, dereferenced, .]
[,, "restricted index type", ), ;, }, else, if, (, dereferenced, !=, null, &&, dereferenced, ., isArrayType, (, ), ), {, expectNumber]
[., getIndexType, (, ), ,, "restricted index type", ), ;, }, else, if, (, dereferenced, !=, null, &&, dereferenced, ., isArrayType, (]
[), ;, }, else, if, (, dereferenced, !=, null, &&, dereferenced, ., isArrayType, (, ), ), {, expectNumber, (, t]
[), {, expectNumber, (, t, ,, indexNode, ,, indexType, ,, "array access", ), ;, }, else, if, (, objType, ., matchesObjectContext]
[&&, dereferenced, ., isArrayType, (, ), ), {, expectNumber, (, t, ,, indexNode, ,, indexType, ,, "array access", ), ;, }]
[!=, null, &&, dereferenced, ., isArrayType, (, ), ), {, expectNumber, (, t, ,, indexNode, ,, indexType, ,, "array access", )]
[&&, dereferenced, ., isArrayType, (, ), ), {, expectNumber, (, t, ,, indexNode, ,, indexType, ,, "array access", ), ;, }]
[), {, expectNumber, (, t, ,, indexNode, ,, indexType, ,, "array access", ), ;, }, else, if, (, objType, ., matchesObjectContext]
[., isArrayType, (, ), ), {, expectNumber, (, t, ,, indexNode, ,, indexType, ,, "array access", ), ;, }, else, if]
[;, }, else, if, (, objType, ., matchesObjectContext, (, ), ), {, expectString, (, t, ,, indexNode, ,, indexType, ,]
[,, indexNode, ,, indexType, ,, "array access", ), ;, }, else, if, (, objType, ., matchesObjectContext, (, ), ), {, expectString]
[,, indexType, ,, "array access", ), ;, }, else, if, (, objType, ., matchesObjectContext, (, ), ), {, expectString, (, t]
[,, "array access", ), ;, }, else, if, (, objType, ., matchesObjectContext, (, ), ), {, expectString, (, t, ,, indexNode]
[), ;, }, else, if, (, objType, ., matchesObjectContext, (, ), ), {, expectString, (, t, ,, indexNode, ,, indexType]
[), {, expectString, (, t, ,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, mismatch, (, t, ,]
[., matchesObjectContext, (, ), ), {, expectString, (, t, ,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {]
[;, }, else, {, mismatch, (, t, ,, n, ,, "only arrays or objects can be accessed", ,, objType, ,, typeRegistry, ., createUnionType, (, ARRAY_TYPE, ,]
[,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, mismatch, (, t, ,, n, ,, "only arrays or objects can be accessed", ,, objType]
[,, indexType, ,, "property access", ), ;, }, else, {, mismatch, (, t, ,, n, ,, "only arrays or objects can be accessed", ,, objType, ,, typeRegistry]
[,, "property access", ), ;, }, else, {, mismatch, (, t, ,, n, ,, "only arrays or objects can be accessed", ,, objType, ,, typeRegistry, ., createUnionType]
[), ;, }, else, {, mismatch, (, t, ,, n, ,, "only arrays or objects can be accessed", ,, objType, ,, typeRegistry, ., createUnionType, (, ARRAY_TYPE]
[;, }, }, }, boolean, expectCanAssignToPropertyOf, (, NodeTraversal, t, ,, Node, n, ,, JSType, rightType, ,, JSType, leftType, ,, Node]
[,, n, ,, "only arrays or objects can be accessed", ,, objType, ,, typeRegistry, ., createUnionType, (, ARRAY_TYPE, ,, OBJECT_TYPE, ), ), ;, }, }, }]
[,, "only arrays or objects can be accessed", ,, objType, ,, typeRegistry, ., createUnionType, (, ARRAY_TYPE, ,, OBJECT_TYPE, ), ), ;, }, }, }, boolean, expectCanAssignToPropertyOf]
[,, objType, ,, typeRegistry, ., createUnionType, (, ARRAY_TYPE, ,, OBJECT_TYPE, ), ), ;, }, }, }, boolean, expectCanAssignToPropertyOf, (, NodeTraversal]
[,, typeRegistry, ., createUnionType, (, ARRAY_TYPE, ,, OBJECT_TYPE, ), ), ;, }, }, }, boolean, expectCanAssignToPropertyOf, (, NodeTraversal, t, ,]
[), ;, }, }, }, boolean, expectCanAssignToPropertyOf, (, NodeTraversal, t, ,, Node, n, ,, JSType, rightType, ,, JSType, leftType, ,]
[., createUnionType, (, ARRAY_TYPE, ,, OBJECT_TYPE, ), ), ;, }, }, }, boolean, expectCanAssignToPropertyOf, (, NodeTraversal, t, ,, Node, n]
[,, OBJECT_TYPE, ), ), ;, }, }, }, boolean, expectCanAssignToPropertyOf, (, NodeTraversal, t, ,, Node, n, ,, JSType, rightType, ,]
[), ), ;, }, }, }, boolean, expectCanAssignToPropertyOf, (, NodeTraversal, t, ,, Node, n, ,, JSType, rightType, ,, JSType, leftType]
[), {, JSType, ownerType, =, getJSType, (, owner, ), ;, if, (, ownerType, ., isFunctionPrototypeType, (, ), ), {, FunctionType]
[&&, !, rightType, ., isSubtype, (, leftType, ), ), {, JSType, ownerType, =, getJSType, (, owner, ), ;, if, (]
[&&, !, rightType, ., isSubtype, (, leftType, ), ), {, JSType, ownerType, =, getJSType, (, owner, ), ;, if, (]
[., isNoType, (, ), &&, !, rightType, ., isSubtype, (, leftType, ), ), {, JSType, ownerType, =, getJSType, (, owner]
[), {, JSType, ownerType, =, getJSType, (, owner, ), ;, if, (, ownerType, ., isFunctionPrototypeType, (, ), ), {, FunctionType]
[), {, JSType, ownerType, =, getJSType, (, owner, ), ;, if, (, ownerType, ., isFunctionPrototypeType, (, ), ), {, FunctionType]
[., isSubtype, (, leftType, ), ), {, JSType, ownerType, =, getJSType, (, owner, ), ;, if, (, ownerType, ., isFunctionPrototypeType]
[), ), {, JSType, ownerType, =, getJSType, (, owner, ), ;, if, (, ownerType, ., isFunctionPrototypeType, (, ), ), {]
[;, if, (, ownerType, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, ownerType, ., toObjectType, (, ), ., getOwnerFunction]
[), ;, if, (, ownerType, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, ownerType, ., toObjectType, (, ), .]
[), {, FunctionType, ownerFn, =, ownerType, ., toObjectType, (, ), ., getOwnerFunction, (, ), ;, if, (, ownerFn, ., isInterface]
[., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, ownerType, ., toObjectType, (, ), ., getOwnerFunction, (, ), ;, if]
[;, if, (, ownerFn, ., isInterface, (, ), &&, rightType, ., isFunctionType, (, ), &&, leftType, ., isFunctionType, (, )]
[., getOwnerFunction, (, ), ;, if, (, ownerFn, ., isInterface, (, ), &&, rightType, ., isFunctionType, (, ), &&, leftType]
[., toObjectType, (, ), ., getOwnerFunction, (, ), ;, if, (, ownerFn, ., isInterface, (, ), &&, rightType, ., isFunctionType]
[), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,, "assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName]
[&&, leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,, "assignment to property "]
[&&, rightType, ., isFunctionType, (, ), &&, leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch]
[., isInterface, (, ), &&, rightType, ., isFunctionType, (, ), &&, leftType, ., isFunctionType, (, ), ), {, return, true]
[&&, leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,, "assignment to property "]
[., isFunctionType, (, ), &&, leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (, t]
[), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,, "assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName]
[., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,, "assignment to property ", +, propName]
[;, }, }, mismatch, (, t, ,, n, ,, "assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName, (, owner, ,, true]
[;, return, false, ;, }, return, true, ;, }, boolean, expectCanAssignTo, (, NodeTraversal, t, ,, Node, n, ,, JSType, rightType]
[,, n, ,, "assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName, (, owner, ,, true, ), ,, rightType, ,, leftType, )]
[,, "assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName, (, owner, ,, true, ), ,, rightType, ,, leftType, ), ;, return]
[,, rightType, ,, leftType, ), ;, return, false, ;, }, return, true, ;, }, boolean, expectCanAssignTo, (, NodeTraversal, t, ,]
[+, getReadableJSTypeName, (, owner, ,, true, ), ,, rightType, ,, leftType, ), ;, return, false, ;, }, return, true, ;]
[+, " of ", +, getReadableJSTypeName, (, owner, ,, true, ), ,, rightType, ,, leftType, ), ;, return, false, ;, }, return]
[+, propName, +, " of ", +, getReadableJSTypeName, (, owner, ,, true, ), ,, rightType, ,, leftType, ), ;, return, false, ;]
[+, " of ", +, getReadableJSTypeName, (, owner, ,, true, ), ,, rightType, ,, leftType, ), ;, return, false, ;, }, return]
[+, getReadableJSTypeName, (, owner, ,, true, ), ,, rightType, ,, leftType, ), ;, return, false, ;, }, return, true, ;]
[,, rightType, ,, leftType, ), ;, return, false, ;, }, return, true, ;, }, boolean, expectCanAssignTo, (, NodeTraversal, t, ,]
[,, true, ), ,, rightType, ,, leftType, ), ;, return, false, ;, }, return, true, ;, }, boolean, expectCanAssignTo, (]
[), ,, rightType, ,, leftType, ), ;, return, false, ;, }, return, true, ;, }, boolean, expectCanAssignTo, (, NodeTraversal, t]
[,, leftType, ), ;, return, false, ;, }, return, true, ;, }, boolean, expectCanAssignTo, (, NodeTraversal, t, ,, Node, n]
[), ;, return, false, ;, }, return, true, ;, }, boolean, expectCanAssignTo, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[;, }, return, true, ;, }, boolean, expectCanAssignTo, (, NodeTraversal, t, ,, Node, n, ,, JSType, rightType, ,, JSType, leftType]
[;, }, boolean, expectCanAssignTo, (, NodeTraversal, t, ,, Node, n, ,, JSType, rightType, ,, JSType, leftType, ,, String, msg, )]
[), {, mismatch, (, t, ,, n, ,, msg, ,, rightType, ,, leftType, ), ;, return, false, ;, }, return]
[), {, mismatch, (, t, ,, n, ,, msg, ,, rightType, ,, leftType, ), ;, return, false, ;, }, return]
[., isSubtype, (, leftType, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, rightType, ,, leftType, ), ;]
[), ), {, mismatch, (, t, ,, n, ,, msg, ,, rightType, ,, leftType, ), ;, return, false, ;, }]
[;, return, false, ;, }, return, true, ;, }, void, expectArgumentMatchesParameter, (, NodeTraversal, t, ,, Node, n, ,, JSType, argType]
[,, n, ,, msg, ,, rightType, ,, leftType, ), ;, return, false, ;, }, return, true, ;, }, void, expectArgumentMatchesParameter]
[,, msg, ,, rightType, ,, leftType, ), ;, return, false, ;, }, return, true, ;, }, void, expectArgumentMatchesParameter, (, NodeTraversal]
[,, rightType, ,, leftType, ), ;, return, false, ;, }, return, true, ;, }, void, expectArgumentMatchesParameter, (, NodeTraversal, t, ,]
[,, leftType, ), ;, return, false, ;, }, return, true, ;, }, void, expectArgumentMatchesParameter, (, NodeTraversal, t, ,, Node, n]
[), ;, return, false, ;, }, return, true, ;, }, void, expectArgumentMatchesParameter, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[;, }, return, true, ;, }, void, expectArgumentMatchesParameter, (, NodeTraversal, t, ,, Node, n, ,, JSType, argType, ,, JSType, paramType]
[;, }, void, expectArgumentMatchesParameter, (, NodeTraversal, t, ,, Node, n, ,, JSType, argType, ,, JSType, paramType, ,, Node, callNode, ,]
[), {, mismatch, (, t, ,, n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (]
[), {, mismatch, (, t, ,, n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (]
[., isSubtype, (, paramType, ), ), {, mismatch, (, t, ,, n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter"]
[), ), {, mismatch, (, t, ,, n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName]
[;, }, }, void, expectCanOverride, (, NodeTraversal, t, ,, Node, n, ,, JSType, overridingType, ,, JSType, hiddenType, ,, String, propertyName]
[,, n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, )]
[,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,, false]
[,, argType, ,, paramType, ), ;, }, }, void, expectCanOverride, (, NodeTraversal, t, ,, Node, n, ,, JSType, overridingType, ,]
[., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,, false, ), )]
[,, ordinal, ,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,, false, ), ), ,, argType, ,, paramType, ), ;]
[+, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,, false, ), ), ,, argType, ,, paramType]
[,, ordinal, ,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,, false, ), ), ,, argType, ,, paramType, ), ;]
[,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,, false, ), ), ,, argType, ,, paramType, ), ;, }, }]
[), ,, argType, ,, paramType, ), ;, }, }, void, expectCanOverride, (, NodeTraversal, t, ,, Node, n, ,, JSType, overridingType]
[,, false, ), ), ,, argType, ,, paramType, ), ;, }, }, void, expectCanOverride, (, NodeTraversal, t, ,, Node, n]
[., getFirstChild, (, ), ,, false, ), ), ,, argType, ,, paramType, ), ;, }, }, void, expectCanOverride, (, NodeTraversal]
[), ), ,, argType, ,, paramType, ), ;, }, }, void, expectCanOverride, (, NodeTraversal, t, ,, Node, n, ,, JSType]
[,, paramType, ), ;, }, }, void, expectCanOverride, (, NodeTraversal, t, ,, Node, n, ,, JSType, overridingType, ,, JSType, hiddenType]
[), ;, }, }, void, expectCanOverride, (, NodeTraversal, t, ,, Node, n, ,, JSType, overridingType, ,, JSType, hiddenType, ,, String]
[), {, registerMismatch, (, overridingType, ,, hiddenType, ,, report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,]
[), {, registerMismatch, (, overridingType, ,, hiddenType, ,, report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,]
[., isSubtype, (, hiddenType, ), ), {, registerMismatch, (, overridingType, ,, hiddenType, ,, report, (, t, ., makeError, (, n]
[), ), {, registerMismatch, (, overridingType, ,, hiddenType, ,, report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName]
[;, }, }, void, expectSuperType, (, NodeTraversal, t, ,, Node, n, ,, ObjectType, superObject, ,, ObjectType, subObject, ), {, FunctionType]
[,, hiddenType, ,, report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,, ownerType, ., toString, (, )]
[,, report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,, ownerType, ., toString, (, ), ,, hiddenType]
[), ;, }, }, void, expectSuperType, (, NodeTraversal, t, ,, Node, n, ,, ObjectType, superObject, ,, ObjectType, subObject, ), {]
[), ), ;, }, }, void, expectSuperType, (, NodeTraversal, t, ,, Node, n, ,, ObjectType, superObject, ,, ObjectType, subObject, )]
[., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,, ownerType, ., toString, (, ), ,, hiddenType, ., toString, (, )]
[,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,, ownerType, ., toString, (, ), ,, hiddenType, ., toString, (, ), ,, overridingType, ., toString]
[,, propertyName, ,, ownerType, ., toString, (, ), ,, hiddenType, ., toString, (, ), ,, overridingType, ., toString, (, )]
[,, ownerType, ., toString, (, ), ,, hiddenType, ., toString, (, ), ,, overridingType, ., toString, (, ), ), )]
[,, hiddenType, ., toString, (, ), ,, overridingType, ., toString, (, ), ), ), ), ;, }, }, void, expectSuperType]
[., toString, (, ), ,, hiddenType, ., toString, (, ), ,, overridingType, ., toString, (, ), ), ), ), ;]
[,, overridingType, ., toString, (, ), ), ), ), ;, }, }, void, expectSuperType, (, NodeTraversal, t, ,, Node, n]
[., toString, (, ), ,, overridingType, ., toString, (, ), ), ), ), ;, }, }, void, expectSuperType, (, NodeTraversal]
[), ), ), ;, }, }, void, expectSuperType, (, NodeTraversal, t, ,, Node, n, ,, ObjectType, superObject, ,, ObjectType, subObject]
[., toString, (, ), ), ), ), ;, }, }, void, expectSuperType, (, NodeTraversal, t, ,, Node, n, ,, ObjectType]
[;, ObjectType, implicitProto, =, subObject, ., getImplicitPrototype, (, ), ;, ObjectType, declaredSuper, =, implicitProto, ==, null, ?, null, :, implicitProto]
[., getConstructor, (, ), ;, ObjectType, implicitProto, =, subObject, ., getImplicitPrototype, (, ), ;, ObjectType, declaredSuper, =, implicitProto, ==, null]
[;, ObjectType, declaredSuper, =, implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=]
[., getImplicitPrototype, (, ), ;, ObjectType, declaredSuper, =, implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;]
[;, if, (, declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (, superObject]
[?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType]
[==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&, !, (, superObject]
[?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType]
[:, implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType, ), &&]
[;, if, (, declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (, superObject]
[., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType, ), &&, !, declaredSuper]
[), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {, registerMismatch, (, superObject, ,, declaredSuper]
[&&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, )]
[&&, !, (, superObject, instanceof, UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if, (, declaredSuper]
[!=, null, &&, !, (, superObject, instanceof, UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if]
[&&, !, (, superObject, instanceof, UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if, (, declaredSuper]
[&&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, )]
[&&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, )]
[), &&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE]
[instanceof, UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType]
[), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {, registerMismatch, (, superObject, ,, declaredSuper]
[), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {, registerMismatch, (, superObject, ,, declaredSuper]
[., isEquivalentTo, (, superObject, ), ), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {]
[), ), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {, registerMismatch, (, superObject, ,]
[), {, registerMismatch, (, superObject, ,, declaredSuper, ,, report, (, t, ., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,, subObject, .]
[., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {, registerMismatch, (, superObject, ,, declaredSuper, ,, report, (, t, .]
[), ), {, registerMismatch, (, superObject, ,, declaredSuper, ,, report, (, t, ., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,, subObject]
[), ), ), {, registerMismatch, (, superObject, ,, declaredSuper, ,, report, (, t, ., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,]
[;, }, else, {, mismatch, (, t, ., getSourceName, (, ), ,, n, ,, "mismatch in declaration of superclass type", ,, superObject, ,, declaredSuper, )]
[,, declaredSuper, ,, report, (, t, ., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,, subObject, ., toString, (, ), ), )]
[,, report, (, t, ., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,, subObject, ., toString, (, ), ), ), ), ;]
[), ;, }, else, {, mismatch, (, t, ., getSourceName, (, ), ,, n, ,, "mismatch in declaration of superclass type", ,, superObject, ,, declaredSuper]
[), ), ;, }, else, {, mismatch, (, t, ., getSourceName, (, ), ,, n, ,, "mismatch in declaration of superclass type", ,, superObject, ,]
[., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,, subObject, ., toString, (, ), ), ), ), ;, }, else, {, mismatch]
[,, MISSING_EXTENDS_TAG_WARNING, ,, subObject, ., toString, (, ), ), ), ), ;, }, else, {, mismatch, (, t, ., getSourceName]
[,, subObject, ., toString, (, ), ), ), ), ;, }, else, {, mismatch, (, t, ., getSourceName, (, )]
[), ), ), ;, }, else, {, mismatch, (, t, ., getSourceName, (, ), ,, n, ,, "mismatch in declaration of superclass type", ,, superObject]
[., toString, (, ), ), ), ), ;, }, else, {, mismatch, (, t, ., getSourceName, (, ), ,, n]
[;, }, if, (, !, subCtor, ., hasCachedValues, (, ), ), {, subCtor, ., setPrototypeBasedOn, (, superObject, ), ;, }]
[,, n, ,, "mismatch in declaration of superclass type", ,, superObject, ,, declaredSuper, ), ;, }, if, (, !, subCtor, ., hasCachedValues, (, ), )]
[., getSourceName, (, ), ,, n, ,, "mismatch in declaration of superclass type", ,, superObject, ,, declaredSuper, ), ;, }, if, (, !, subCtor, .]
[,, "mismatch in declaration of superclass type", ,, superObject, ,, declaredSuper, ), ;, }, if, (, !, subCtor, ., hasCachedValues, (, ), ), {, subCtor]
[,, superObject, ,, declaredSuper, ), ;, }, if, (, !, subCtor, ., hasCachedValues, (, ), ), {, subCtor, ., setPrototypeBasedOn]
[,, declaredSuper, ), ;, }, if, (, !, subCtor, ., hasCachedValues, (, ), ), {, subCtor, ., setPrototypeBasedOn, (, superObject]
[), ;, }, if, (, !, subCtor, ., hasCachedValues, (, ), ), {, subCtor, ., setPrototypeBasedOn, (, superObject, ), ;]
[), {, subCtor, ., setPrototypeBasedOn, (, superObject, ), ;, }, }, }, void, expectCanCast, (, NodeTraversal, t, ,, Node, n]
[), {, subCtor, ., setPrototypeBasedOn, (, superObject, ), ;, }, }, }, void, expectCanCast, (, NodeTraversal, t, ,, Node, n]
[., hasCachedValues, (, ), ), {, subCtor, ., setPrototypeBasedOn, (, superObject, ), ;, }, }, }, void, expectCanCast, (, NodeTraversal]
[;, }, }, }, void, expectCanCast, (, NodeTraversal, t, ,, Node, n, ,, JSType, castType, ,, JSType, type, ), {]
[., setPrototypeBasedOn, (, superObject, ), ;, }, }, }, void, expectCanCast, (, NodeTraversal, t, ,, Node, n, ,, JSType, castType]
[), ;, }, }, }, void, expectCanCast, (, NodeTraversal, t, ,, Node, n, ,, JSType, castType, ,, JSType, type, )]
[), {, registerMismatch, (, type, ,, castType, ,, report, (, t, ., makeError, (, n, ,, INVALID_CAST, ,, type, .]
[), {, registerMismatch, (, type, ,, castType, ,, report, (, t, ., makeError, (, n, ,, INVALID_CAST, ,, type, .]
[., canCastTo, (, castType, ), ), {, registerMismatch, (, type, ,, castType, ,, report, (, t, ., makeError, (, n]
[), ), {, registerMismatch, (, type, ,, castType, ,, report, (, t, ., makeError, (, n, ,, INVALID_CAST, ,, type]
[;, }, }, Var, expectUndeclaredVariable, (, String, sourceName, ,, CompilerInput, input, ,, Node, n, ,, Node, parent, ,, Var, var]
[,, castType, ,, report, (, t, ., makeError, (, n, ,, INVALID_CAST, ,, type, ., toString, (, ), ,, castType]
[,, report, (, t, ., makeError, (, n, ,, INVALID_CAST, ,, type, ., toString, (, ), ,, castType, ., toString]
[), ;, }, }, Var, expectUndeclaredVariable, (, String, sourceName, ,, CompilerInput, input, ,, Node, n, ,, Node, parent, ,, Var]
[), ), ;, }, }, Var, expectUndeclaredVariable, (, String, sourceName, ,, CompilerInput, input, ,, Node, n, ,, Node, parent, ,]
[., makeError, (, n, ,, INVALID_CAST, ,, type, ., toString, (, ), ,, castType, ., toString, (, ), ), )]
[,, INVALID_CAST, ,, type, ., toString, (, ), ,, castType, ., toString, (, ), ), ), ), ;, }, }]
[,, type, ., toString, (, ), ,, castType, ., toString, (, ), ), ), ), ;, }, }, Var, expectUndeclaredVariable]
[,, castType, ., toString, (, ), ), ), ), ;, }, }, Var, expectUndeclaredVariable, (, String, sourceName, ,, CompilerInput, input]
[., toString, (, ), ,, castType, ., toString, (, ), ), ), ), ;, }, }, Var, expectUndeclaredVariable, (, String]
[), ), ), ;, }, }, Var, expectUndeclaredVariable, (, String, sourceName, ,, CompilerInput, input, ,, Node, n, ,, Node, parent]
[., toString, (, ), ), ), ), ;, }, }, Var, expectUndeclaredVariable, (, String, sourceName, ,, CompilerInput, input, ,, Node]
[;, boolean, allowDupe, =, false, ;, if, (, n, ., isGetProp, (, ), ||, NodeUtil, ., isObjectLitKey, (, n, ,]
[;, if, (, n, ., isGetProp, (, ), ||, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, JSDocInfo]
[), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =]
[||, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;]
[., isGetProp, (, ), ||, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, JSDocInfo, info, =, n, .]
[), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =]
[., isObjectLitKey, (, n, ,, parent, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[,, parent, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, )]
[), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info]
[;, if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =, info]
[., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;]
[), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =, info, !=, null, &&, info, ., getSuppressions]
[==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =, info, !=, null, &&, info]
[), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =, info, !=, null, &&, info, ., getSuppressions]
[=, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =, info, !=, null, &&, info, ., getSuppressions, (, ), .]
[;, }, allowDupe, =, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ;, }]
[., getJSDocInfo, (, ), ;, }, allowDupe, =, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (]
[=, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =]
[;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, &&, varType, !=, typeRegistry]
[&&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (]
[!=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =, var, .]
[&&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (]
[;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, &&, varType, !=, typeRegistry]
[., contains, (, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=]
[., getSuppressions, (, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (, ), ;]
[), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, &&, varType, !=]
[;, if, (, varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&]
[., getType, (, ), ;, if, (, varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&]
[), {, if, (, var, ., input, ==, null, ), {, Scope, s, =, var, ., getScope, (, ), ;]
[&&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input, ==, null, ), {]
[&&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input]
[&&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (]
[!=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=, typeRegistry, .]
[&&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (]
[&&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input]
[!=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[&&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input]
[., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {]
[), &&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, .]
[&&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input, ==, null, ), {]
[!=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input, ==, null]
[&&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input, ==, null, ), {]
[), {, if, (, var, ., input, ==, null, ), {, Scope, s, =, var, ., getScope, (, ), ;]
[!=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input, ==, null, ), {, Scope, s]
[), {, if, (, var, ., input, ==, null, ), {, Scope, s, =, var, ., getScope, (, ), ;]
[., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input, ==, null, ), {, Scope, s, =, var]
[), ), {, if, (, var, ., input, ==, null, ), {, Scope, s, =, var, ., getScope, (, )]
[), {, Scope, s, =, var, ., getScope, (, ), ;, s, ., undeclare, (, var, ), ;, newVar, =]
[==, null, ), {, Scope, s, =, var, ., getScope, (, ), ;, s, ., undeclare, (, var, ), ;]
[., input, ==, null, ), {, Scope, s, =, var, ., getScope, (, ), ;, s, ., undeclare, (, var]
[), {, Scope, s, =, var, ., getScope, (, ), ;, s, ., undeclare, (, var, ), ;, newVar, =]
[;, s, ., undeclare, (, var, ), ;, newVar, =, s, ., declare, (, variableName, ,, n, ,, varType, ,]
[., getScope, (, ), ;, s, ., undeclare, (, var, ), ;, newVar, =, s, ., declare, (, variableName, ,]
[;, newVar, =, s, ., declare, (, variableName, ,, n, ,, varType, ,, input, ,, false, ), ;, n, .]
[., undeclare, (, var, ), ;, newVar, =, s, ., declare, (, variableName, ,, n, ,, varType, ,, input, ,]
[), ;, newVar, =, s, ., declare, (, variableName, ,, n, ,, varType, ,, input, ,, false, ), ;, n]
[=, s, ., declare, (, variableName, ,, n, ,, varType, ,, input, ,, false, ), ;, n, ., setJSType, (]
[;, n, ., setJSType, (, varType, ), ;, if, (, parent, ., isVar, (, ), ), {, if, (, n]
[., declare, (, variableName, ,, n, ,, varType, ,, input, ,, false, ), ;, n, ., setJSType, (, varType, )]
[,, n, ,, varType, ,, input, ,, false, ), ;, n, ., setJSType, (, varType, ), ;, if, (, parent]
[,, varType, ,, input, ,, false, ), ;, n, ., setJSType, (, varType, ), ;, if, (, parent, ., isVar]
[,, input, ,, false, ), ;, n, ., setJSType, (, varType, ), ;, if, (, parent, ., isVar, (, )]
[,, false, ), ;, n, ., setJSType, (, varType, ), ;, if, (, parent, ., isVar, (, ), ), {]
[), ;, n, ., setJSType, (, varType, ), ;, if, (, parent, ., isVar, (, ), ), {, if, (]
[;, if, (, parent, ., isVar, (, ), ), {, if, (, n, ., getFirstChild, (, ), !=, null, )]
[., setJSType, (, varType, ), ;, if, (, parent, ., isVar, (, ), ), {, if, (, n, ., getFirstChild]
[), ;, if, (, parent, ., isVar, (, ), ), {, if, (, n, ., getFirstChild, (, ), !=, null]
[), {, if, (, n, ., getFirstChild, (, ), !=, null, ), {, n, ., getFirstChild, (, ), ., setJSType]
[., isVar, (, ), ), {, if, (, n, ., getFirstChild, (, ), !=, null, ), {, n, ., getFirstChild]
[), {, n, ., getFirstChild, (, ), ., setJSType, (, varType, ), ;, }, }, else, {, Preconditions, ., checkState]
[!=, null, ), {, n, ., getFirstChild, (, ), ., setJSType, (, varType, ), ;, }, }, else, {, Preconditions]
[., getFirstChild, (, ), !=, null, ), {, n, ., getFirstChild, (, ), ., setJSType, (, varType, ), ;, }]
[), {, n, ., getFirstChild, (, ), ., setJSType, (, varType, ), ;, }, }, else, {, Preconditions, ., checkState]
[;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;, parent, ., setJSType, (]
[., setJSType, (, varType, ), ;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), )]
[., getFirstChild, (, ), ., setJSType, (, varType, ), ;, }, }, else, {, Preconditions, ., checkState, (, parent, .]
[), ;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;, parent, ., setJSType]
[;, parent, ., setJSType, (, varType, ), ;, }, }, else, {, if, (, !, (, allowDupe, ||, var, .]
[., checkState, (, parent, ., isFunction, (, ), ), ;, parent, ., setJSType, (, varType, ), ;, }, }, else]
[), ;, parent, ., setJSType, (, varType, ), ;, }, }, else, {, if, (, !, (, allowDupe, ||, var]
[., isFunction, (, ), ), ;, parent, ., setJSType, (, varType, ), ;, }, }, else, {, if, (, !]
[;, }, }, else, {, if, (, !, (, allowDupe, ||, var, ., getParentNode, (, ), ., isExprResult, (, )]
[., setJSType, (, varType, ), ;, }, }, else, {, if, (, !, (, allowDupe, ||, var, ., getParentNode, (]
[), ;, }, }, else, {, if, (, !, (, allowDupe, ||, var, ., getParentNode, (, ), ., isExprResult, (]
[), {, report, (, JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (]
[||, !, newType, ., isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make, (, sourceName, ,, n, ,]
[||, !, newType, ., isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make, (, sourceName, ,, n, ,]
[), ||, !, newType, ., isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make, (, sourceName, ,, n]
[||, var, ., getParentNode, (, ), ., isExprResult, (, ), ), ||, !, newType, ., isEquivalentTo, (, varType, ), )]
[), ||, !, newType, ., isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make, (, sourceName, ,, n]
[., isExprResult, (, ), ), ||, !, newType, ., isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make]
[., getParentNode, (, ), ., isExprResult, (, ), ), ||, !, newType, ., isEquivalentTo, (, varType, ), ), {, report]
[), {, report, (, JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (]
[), {, report, (, JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (]
[., isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName]
[), ), {, report, (, JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString]
[;, }, }, }, return, newVar, ;, }, void, expectAllInterfaceProperties, (, NodeTraversal, t, ,, Node, n, ,, FunctionType, type, )]
[), ;, }, }, }, return, newVar, ;, }, void, expectAllInterfaceProperties, (, NodeTraversal, t, ,, Node, n, ,, FunctionType, type]
[., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,, var, ., getInputName]
[,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,, var, ., getInputName, (, ), ,, String]
[,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,, var, ., getInputName, (, ), ,, String, ., valueOf]
[,, variableName, ,, newType, ., toString, (, ), ,, var, ., getInputName, (, ), ,, String, ., valueOf, (, var]
[,, newType, ., toString, (, ), ,, var, ., getInputName, (, ), ,, String, ., valueOf, (, var, ., nameNode]
[,, var, ., getInputName, (, ), ,, String, ., valueOf, (, var, ., nameNode, ., getLineno, (, ), ), ,]
[., toString, (, ), ,, var, ., getInputName, (, ), ,, String, ., valueOf, (, var, ., nameNode, ., getLineno]
[,, String, ., valueOf, (, var, ., nameNode, ., getLineno, (, ), ), ,, varType, ., toString, (, ), )]
[., getInputName, (, ), ,, String, ., valueOf, (, var, ., nameNode, ., getLineno, (, ), ), ,, varType, .]
[,, varType, ., toString, (, ), ), ), ;, }, }, }, return, newVar, ;, }, void, expectAllInterfaceProperties, (, NodeTraversal]
[., valueOf, (, var, ., nameNode, ., getLineno, (, ), ), ,, varType, ., toString, (, ), ), ), ;]
[), ,, varType, ., toString, (, ), ), ), ;, }, }, }, return, newVar, ;, }, void, expectAllInterfaceProperties, (]
[., getLineno, (, ), ), ,, varType, ., toString, (, ), ), ), ;, }, }, }, return, newVar, ;]
[., nameNode, ., getLineno, (, ), ), ,, varType, ., toString, (, ), ), ), ;, }, }, }, return]
[), ), ;, }, }, }, return, newVar, ;, }, void, expectAllInterfaceProperties, (, NodeTraversal, t, ,, Node, n, ,, FunctionType]
[., toString, (, ), ), ), ;, }, }, }, return, newVar, ;, }, void, expectAllInterfaceProperties, (, NodeTraversal, t, ,]
[;, }, void, expectAllInterfaceProperties, (, NodeTraversal, t, ,, Node, n, ,, FunctionType, type, ), {, ObjectType, instance, =, type, .]
[;, for, (, ObjectType, implemented, :, type, ., getAllImplementedInterfaces, (, ), ), {, if, (, implemented, ., getImplicitPrototype, (, )]
[., getInstanceType, (, ), ;, for, (, ObjectType, implemented, :, type, ., getAllImplementedInterfaces, (, ), ), {, if, (, implemented]
[), {, if, (, implemented, ., getImplicitPrototype, (, ), !=, null, ), {, for, (, String, prop, :, implemented, .]
[., getAllImplementedInterfaces, (, ), ), {, if, (, implemented, ., getImplicitPrototype, (, ), !=, null, ), {, for, (, String]
[), {, for, (, String, prop, :, implemented, ., getImplicitPrototype, (, ), ., getOwnPropertyNames, (, ), ), {, expectInterfaceProperty, (]
[!=, null, ), {, for, (, String, prop, :, implemented, ., getImplicitPrototype, (, ), ., getOwnPropertyNames, (, ), ), {]
[., getImplicitPrototype, (, ), !=, null, ), {, for, (, String, prop, :, implemented, ., getImplicitPrototype, (, ), ., getOwnPropertyNames]
[), {, for, (, String, prop, :, implemented, ., getImplicitPrototype, (, ), ., getOwnPropertyNames, (, ), ), {, expectInterfaceProperty, (]
[), {, expectInterfaceProperty, (, t, ,, n, ,, instance, ,, implemented, ,, prop, ), ;, }, }, }, }, private]
[., getOwnPropertyNames, (, ), ), {, expectInterfaceProperty, (, t, ,, n, ,, instance, ,, implemented, ,, prop, ), ;, }]
[., getImplicitPrototype, (, ), ., getOwnPropertyNames, (, ), ), {, expectInterfaceProperty, (, t, ,, n, ,, instance, ,, implemented, ,]
[;, }, }, }, }, private, void, expectInterfaceProperty, (, NodeTraversal, t, ,, Node, n, ,, ObjectType, instance, ,, ObjectType, implementedInterface]
[,, n, ,, instance, ,, implemented, ,, prop, ), ;, }, }, }, }, private, void, expectInterfaceProperty, (, NodeTraversal, t]
[,, instance, ,, implemented, ,, prop, ), ;, }, }, }, }, private, void, expectInterfaceProperty, (, NodeTraversal, t, ,, Node]
[,, implemented, ,, prop, ), ;, }, }, }, }, private, void, expectInterfaceProperty, (, NodeTraversal, t, ,, Node, n, ,]
[,, prop, ), ;, }, }, }, }, private, void, expectInterfaceProperty, (, NodeTraversal, t, ,, Node, n, ,, ObjectType, instance]
[), ;, }, }, }, }, private, void, expectInterfaceProperty, (, NodeTraversal, t, ,, Node, n, ,, ObjectType, instance, ,, ObjectType]
[;, if, (, propSlot, ==, null, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =, sourceName]
[., getSlot, (, prop, ), ;, if, (, propSlot, ==, null, ), {, String, sourceName, =, n, ., getSourceFileName, (]
[), ;, if, (, propSlot, ==, null, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =]
[), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =, sourceName, ==, null, ?, "", :, sourceName]
[==, null, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =, sourceName, ==, null, ?, ""]
[), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =, sourceName, ==, null, ?, "", :, sourceName]
[;, sourceName, =, sourceName, ==, null, ?, "", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError]
[., getSourceFileName, (, ), ;, sourceName, =, sourceName, ==, null, ?, "", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface]
[=, sourceName, ==, null, ?, "", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make]
[;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop]
[?, "", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,, n]
[==, null, ?, "", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName]
[?, "", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,, n]
[:, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED]
[;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop]
[;, }, else, {, Node, propNode, =, propSlot, ., getDeclaration, (, ), ==, null, ?, null, :, propSlot, ., getDeclaration]
[,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,, implementedInterface, ., toString]
[,, report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,, implementedInterface, ., toString, (, )]
[), ;, }, else, {, Node, propNode, =, propSlot, ., getDeclaration, (, ), ==, null, ?, null, :, propSlot, .]
[), ), ;, }, else, {, Node, propNode, =, propSlot, ., getDeclaration, (, ), ==, null, ?, null, :, propSlot]
[., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,, implementedInterface, ., toString, (, ), ,, instance, ., toString]
[,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,, implementedInterface, ., toString, (, ), ,, instance, ., toString, (, ), ), )]
[,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,, implementedInterface, ., toString, (, ), ,, instance, ., toString, (, ), ), ), ), ;]
[,, prop, ,, implementedInterface, ., toString, (, ), ,, instance, ., toString, (, ), ), ), ), ;, }, else]
[,, implementedInterface, ., toString, (, ), ,, instance, ., toString, (, ), ), ), ), ;, }, else, {, Node]
[,, instance, ., toString, (, ), ), ), ), ;, }, else, {, Node, propNode, =, propSlot, ., getDeclaration, (]
[., toString, (, ), ,, instance, ., toString, (, ), ), ), ), ;, }, else, {, Node, propNode, =]
[), ), ), ;, }, else, {, Node, propNode, =, propSlot, ., getDeclaration, (, ), ==, null, ?, null, :]
[., toString, (, ), ), ), ), ;, }, else, {, Node, propNode, =, propSlot, ., getDeclaration, (, ), ==]
[;, propNode, =, propNode, ==, null, ?, n, :, propNode, ;, JSType, found, =, propSlot, ., getType, (, ), ;]
[?, null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;, propNode, =, propNode, ==, null, ?, n]
[==, null, ?, null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;, propNode, =, propNode, ==, null]
[., getDeclaration, (, ), ==, null, ?, null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;, propNode]
[?, null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;, propNode, =, propNode, ==, null, ?, n]
[:, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;, propNode, =, propNode, ==, null, ?, n, :, propNode]
[;, propNode, =, propNode, ==, null, ?, n, :, propNode, ;, JSType, found, =, propSlot, ., getType, (, ), ;]
[., getNode, (, ), ;, propNode, =, propNode, ==, null, ?, n, :, propNode, ;, JSType, found, =, propSlot, .]
[., getDeclaration, (, ), ., getNode, (, ), ;, propNode, =, propNode, ==, null, ?, n, :, propNode, ;, JSType]
[=, propNode, ==, null, ?, n, :, propNode, ;, JSType, found, =, propSlot, ., getType, (, ), ;, JSType, required]
[;, JSType, found, =, propSlot, ., getType, (, ), ;, JSType, required, =, implementedInterface, ., getImplicitPrototype, (, ), ., getPropertyType]
[?, n, :, propNode, ;, JSType, found, =, propSlot, ., getType, (, ), ;, JSType, required, =, implementedInterface, ., getImplicitPrototype]
[==, null, ?, n, :, propNode, ;, JSType, found, =, propSlot, ., getType, (, ), ;, JSType, required, =, implementedInterface]
[?, n, :, propNode, ;, JSType, found, =, propSlot, ., getType, (, ), ;, JSType, required, =, implementedInterface, ., getImplicitPrototype]
[:, propNode, ;, JSType, found, =, propSlot, ., getType, (, ), ;, JSType, required, =, implementedInterface, ., getImplicitPrototype, (, )]
[;, JSType, found, =, propSlot, ., getType, (, ), ;, JSType, required, =, implementedInterface, ., getImplicitPrototype, (, ), ., getPropertyType]
[;, JSType, required, =, implementedInterface, ., getImplicitPrototype, (, ), ., getPropertyType, (, prop, ), ;, found, =, found, ., restrictByNotNullOrUndefined]
[., getType, (, ), ;, JSType, required, =, implementedInterface, ., getImplicitPrototype, (, ), ., getPropertyType, (, prop, ), ;, found]
[;, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, !]
[., getPropertyType, (, prop, ), ;, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (]
[., getImplicitPrototype, (, ), ., getPropertyType, (, prop, ), ;, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =]
[), ;, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[=, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, found, .]
[;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, found, ., isSubtype, (, required, ), ), {]
[., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, found, ., isSubtype, (]
[=, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, found, ., isSubtype, (, required, ), ), {, FunctionType, constructor]
[;, if, (, !, found, ., isSubtype, (, required, ), ), {, FunctionType, constructor, =, implementedInterface, ., toObjectType, (, )]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, !, found, ., isSubtype, (, required, ), ), {, FunctionType, constructor, =, implementedInterface]
[), {, FunctionType, constructor, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, registerMismatch, (, found, ,, required]
[), {, FunctionType, constructor, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, registerMismatch, (, found, ,, required]
[., isSubtype, (, required, ), ), {, FunctionType, constructor, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;]
[), ), {, FunctionType, constructor, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, registerMismatch, (, found, ,]
[;, registerMismatch, (, found, ,, required, ,, report, (, t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,, constructor]
[., getConstructor, (, ), ;, registerMismatch, (, found, ,, required, ,, report, (, t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH]
[., toObjectType, (, ), ., getConstructor, (, ), ;, registerMismatch, (, found, ,, required, ,, report, (, t, ., makeError]
[;, }, }, }, private, void, mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType, found, ,]
[,, required, ,, report, (, t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,, constructor, ., getTopMostDefiningType, (, prop]
[,, report, (, t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,, constructor, ., getTopMostDefiningType, (, prop, ), .]
[), ;, }, }, }, private, void, mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType, found]
[), ), ;, }, }, }, private, void, mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType]
[., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,, constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,]
[,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,, constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,, required, ., toString, (]
[,, prop, ,, constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,, required, ., toString, (, ), ,]
[,, constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,, required, ., toString, (, ), ,, found, .]
[,, required, ., toString, (, ), ,, found, ., toString, (, ), ), ), ), ;, }, }, }, private]
[., toString, (, ), ,, required, ., toString, (, ), ,, found, ., toString, (, ), ), ), ), ;]
[., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,, required, ., toString, (, ), ,, found, ., toString, (]
[), ., toString, (, ), ,, required, ., toString, (, ), ,, found, ., toString, (, ), ), ), )]
[,, found, ., toString, (, ), ), ), ), ;, }, }, }, private, void, mismatch, (, NodeTraversal, t, ,]
[., toString, (, ), ,, found, ., toString, (, ), ), ), ), ;, }, }, }, private, void, mismatch]
[), ), ), ;, }, }, }, private, void, mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,]
[., toString, (, ), ), ), ), ;, }, }, }, private, void, mismatch, (, NodeTraversal, t, ,, Node, n]
[;, }, private, void, mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSTypeNative, required]
[,, n, ,, msg, ,, found, ,, required, ), ;, }, private, void, mismatch, (, NodeTraversal, t, ,, Node, n]
[., getSourceName, (, ), ,, n, ,, msg, ,, found, ,, required, ), ;, }, private, void, mismatch, (, NodeTraversal]
[,, msg, ,, found, ,, required, ), ;, }, private, void, mismatch, (, NodeTraversal, t, ,, Node, n, ,, String]
[,, found, ,, required, ), ;, }, private, void, mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,]
[,, required, ), ;, }, private, void, mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType, found]
[), ;, }, private, void, mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSTypeNative]
[;, }, private, void, mismatch, (, String, sourceName, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSType, required]
[,, n, ,, msg, ,, found, ,, getNativeType, (, required, ), ), ;, }, private, void, mismatch, (, String, sourceName]
[,, msg, ,, found, ,, getNativeType, (, required, ), ), ;, }, private, void, mismatch, (, String, sourceName, ,, Node]
[,, found, ,, getNativeType, (, required, ), ), ;, }, private, void, mismatch, (, String, sourceName, ,, Node, n, ,]
[,, getNativeType, (, required, ), ), ;, }, private, void, mismatch, (, String, sourceName, ,, Node, n, ,, String, msg]
[), ;, }, private, void, mismatch, (, String, sourceName, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSType]
[), ), ;, }, private, void, mismatch, (, String, sourceName, ,, Node, n, ,, String, msg, ,, JSType, found, ,]
[;, }, private, void, registerMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, found, =, found, .]
[,, required, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, TYPE_MISMATCH_WARNING, ,, formatFoundRequired, (, msg, ,, found]
[,, report, (, JSError, ., make, (, sourceName, ,, n, ,, TYPE_MISMATCH_WARNING, ,, formatFoundRequired, (, msg, ,, found, ,, required]
[), ;, }, private, void, registerMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, found, =, found]
[), ), ;, }, private, void, registerMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, found, =]
[., make, (, sourceName, ,, n, ,, TYPE_MISMATCH_WARNING, ,, formatFoundRequired, (, msg, ,, found, ,, required, ), ), ), )]
[,, n, ,, TYPE_MISMATCH_WARNING, ,, formatFoundRequired, (, msg, ,, found, ,, required, ), ), ), ), ;, }, private, void]
[,, TYPE_MISMATCH_WARNING, ,, formatFoundRequired, (, msg, ,, found, ,, required, ), ), ), ), ;, }, private, void, registerMismatch, (]
[,, formatFoundRequired, (, msg, ,, found, ,, required, ), ), ), ), ;, }, private, void, registerMismatch, (, JSType, found]
[), ), ), ;, }, private, void, registerMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, found]
[,, found, ,, required, ), ), ), ), ;, }, private, void, registerMismatch, (, JSType, found, ,, JSType, required, ,]
[,, required, ), ), ), ), ;, }, private, void, registerMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error]
[), ), ), ), ;, }, private, void, registerMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {]
[=, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, found, ., isSubtype]
[;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, found, ., isSubtype, (, required, ), ||, required, .]
[., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, found, ., isSubtype, (, required]
[=, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, found, ., isSubtype, (, required, ), ||, required, ., isSubtype, (]
[;, if, (, found, ., isSubtype, (, required, ), ||, required, ., isSubtype, (, found, ), ), {, return, ;]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, found, ., isSubtype, (, required, ), ||, required, ., isSubtype, (, found, )]
[), {, return, ;, }, mismatches, ., add, (, new, TypeMismatch, (, found, ,, required, ,, error, ), ), ;]
[||, required, ., isSubtype, (, found, ), ), {, return, ;, }, mismatches, ., add, (, new, TypeMismatch, (, found]
[., isSubtype, (, required, ), ||, required, ., isSubtype, (, found, ), ), {, return, ;, }, mismatches, ., add]
[), ||, required, ., isSubtype, (, found, ), ), {, return, ;, }, mismatches, ., add, (, new, TypeMismatch, (]
[), {, return, ;, }, mismatches, ., add, (, new, TypeMismatch, (, found, ,, required, ,, error, ), ), ;]
[., isSubtype, (, found, ), ), {, return, ;, }, mismatches, ., add, (, new, TypeMismatch, (, found, ,, required]
[), ), {, return, ;, }, mismatches, ., add, (, new, TypeMismatch, (, found, ,, required, ,, error, ), )]
[;, if, (, found, ., isFunctionType, (, ), &&, required, ., isFunctionType, (, ), ), {, FunctionType, fnTypeA, =, found]
[., add, (, new, TypeMismatch, (, found, ,, required, ,, error, ), ), ;, if, (, found, ., isFunctionType, (]
[), ;, if, (, found, ., isFunctionType, (, ), &&, required, ., isFunctionType, (, ), ), {, FunctionType, fnTypeA, =]
[,, required, ,, error, ), ), ;, if, (, found, ., isFunctionType, (, ), &&, required, ., isFunctionType, (, )]
[,, error, ), ), ;, if, (, found, ., isFunctionType, (, ), &&, required, ., isFunctionType, (, ), ), {]
[), ), ;, if, (, found, ., isFunctionType, (, ), &&, required, ., isFunctionType, (, ), ), {, FunctionType, fnTypeA]
[), {, FunctionType, fnTypeA, =, found, ., toMaybeFunctionType, (, ), ;, FunctionType, fnTypeB, =, required, ., toMaybeFunctionType, (, ), ;]
[&&, required, ., isFunctionType, (, ), ), {, FunctionType, fnTypeA, =, found, ., toMaybeFunctionType, (, ), ;, FunctionType, fnTypeB, =]
[., isFunctionType, (, ), &&, required, ., isFunctionType, (, ), ), {, FunctionType, fnTypeA, =, found, ., toMaybeFunctionType, (, )]
[), {, FunctionType, fnTypeA, =, found, ., toMaybeFunctionType, (, ), ;, FunctionType, fnTypeB, =, required, ., toMaybeFunctionType, (, ), ;]
[., isFunctionType, (, ), ), {, FunctionType, fnTypeA, =, found, ., toMaybeFunctionType, (, ), ;, FunctionType, fnTypeB, =, required, .]
[;, FunctionType, fnTypeB, =, required, ., toMaybeFunctionType, (, ), ;, Iterator, <, Node, >, paramItA, =, fnTypeA, ., getParameters, (]
[., toMaybeFunctionType, (, ), ;, FunctionType, fnTypeB, =, required, ., toMaybeFunctionType, (, ), ;, Iterator, <, Node, >, paramItA, =]
[;, Iterator, <, Node, >, paramItA, =, fnTypeA, ., getParameters, (, ), ., iterator, (, ), ;, Iterator, <, Node]
[., toMaybeFunctionType, (, ), ;, Iterator, <, Node, >, paramItA, =, fnTypeA, ., getParameters, (, ), ., iterator, (, )]
[;, Iterator, <, Node, >, paramItB, =, fnTypeB, ., getParameters, (, ), ., iterator, (, ), ;, while, (, paramItA]
[., iterator, (, ), ;, Iterator, <, Node, >, paramItB, =, fnTypeB, ., getParameters, (, ), ., iterator, (, )]
[., getParameters, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, paramItB, =, fnTypeB, ., getParameters, (, )]
[;, while, (, paramItA, ., hasNext, (, ), &&, paramItB, ., hasNext, (, ), ), {, registerIfMismatch, (, paramItA, .]
[., iterator, (, ), ;, while, (, paramItA, ., hasNext, (, ), &&, paramItB, ., hasNext, (, ), ), {]
[., getParameters, (, ), ., iterator, (, ), ;, while, (, paramItA, ., hasNext, (, ), &&, paramItB, ., hasNext]
[), {, registerIfMismatch, (, paramItA, ., next, (, ), ., getJSType, (, ), ,, paramItB, ., next, (, ), .]
[&&, paramItB, ., hasNext, (, ), ), {, registerIfMismatch, (, paramItA, ., next, (, ), ., getJSType, (, ), ,]
[., hasNext, (, ), &&, paramItB, ., hasNext, (, ), ), {, registerIfMismatch, (, paramItA, ., next, (, ), .]
[), {, registerIfMismatch, (, paramItA, ., next, (, ), ., getJSType, (, ), ,, paramItB, ., next, (, ), .]
[., hasNext, (, ), ), {, registerIfMismatch, (, paramItA, ., next, (, ), ., getJSType, (, ), ,, paramItB, .]
[;, }, registerIfMismatch, (, fnTypeA, ., getReturnType, (, ), ,, fnTypeB, ., getReturnType, (, ), ,, error, ), ;, }]
[,, paramItB, ., next, (, ), ., getJSType, (, ), ,, error, ), ;, }, registerIfMismatch, (, fnTypeA, ., getReturnType]
[., getJSType, (, ), ,, paramItB, ., next, (, ), ., getJSType, (, ), ,, error, ), ;, }, registerIfMismatch]
[., next, (, ), ., getJSType, (, ), ,, paramItB, ., next, (, ), ., getJSType, (, ), ,, error]
[,, error, ), ;, }, registerIfMismatch, (, fnTypeA, ., getReturnType, (, ), ,, fnTypeB, ., getReturnType, (, ), ,, error]
[., getJSType, (, ), ,, error, ), ;, }, registerIfMismatch, (, fnTypeA, ., getReturnType, (, ), ,, fnTypeB, ., getReturnType]
[., next, (, ), ., getJSType, (, ), ,, error, ), ;, }, registerIfMismatch, (, fnTypeA, ., getReturnType, (, )]
[), ;, }, registerIfMismatch, (, fnTypeA, ., getReturnType, (, ), ,, fnTypeB, ., getReturnType, (, ), ,, error, ), ;]
[;, }, }, private, void, registerIfMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, if, (, found]
[,, fnTypeB, ., getReturnType, (, ), ,, error, ), ;, }, }, private, void, registerIfMismatch, (, JSType, found, ,, JSType]
[., getReturnType, (, ), ,, fnTypeB, ., getReturnType, (, ), ,, error, ), ;, }, }, private, void, registerIfMismatch, (]
[,, error, ), ;, }, }, private, void, registerIfMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {]
[., getReturnType, (, ), ,, error, ), ;, }, }, private, void, registerIfMismatch, (, JSType, found, ,, JSType, required, ,]
[), ;, }, }, private, void, registerIfMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, if, (]
[), {, registerMismatch, (, found, ,, required, ,, error, ), ;, }, }, private, String, formatFoundRequired, (, String, description, ,]
[&&, !, found, ., isSubtype, (, required, ), ), {, registerMismatch, (, found, ,, required, ,, error, ), ;, }]
[&&, required, !=, null, &&, !, found, ., isSubtype, (, required, ), ), {, registerMismatch, (, found, ,, required, ,]
[!=, null, &&, required, !=, null, &&, !, found, ., isSubtype, (, required, ), ), {, registerMismatch, (, found, ,]
[&&, required, !=, null, &&, !, found, ., isSubtype, (, required, ), ), {, registerMismatch, (, found, ,, required, ,]
[&&, !, found, ., isSubtype, (, required, ), ), {, registerMismatch, (, found, ,, required, ,, error, ), ;, }]
[!=, null, &&, !, found, ., isSubtype, (, required, ), ), {, registerMismatch, (, found, ,, required, ,, error, )]
[&&, !, found, ., isSubtype, (, required, ), ), {, registerMismatch, (, found, ,, required, ,, error, ), ;, }]
[), {, registerMismatch, (, found, ,, required, ,, error, ), ;, }, }, private, String, formatFoundRequired, (, String, description, ,]
[), {, registerMismatch, (, found, ,, required, ,, error, ), ;, }, }, private, String, formatFoundRequired, (, String, description, ,]
[., isSubtype, (, required, ), ), {, registerMismatch, (, found, ,, required, ,, error, ), ;, }, }, private, String]
[), ), {, registerMismatch, (, found, ,, required, ,, error, ), ;, }, }, private, String, formatFoundRequired, (, String, description]
[;, }, }, private, String, formatFoundRequired, (, String, description, ,, JSType, found, ,, JSType, required, ), {, return, MessageFormat, .]
[,, required, ,, error, ), ;, }, }, private, String, formatFoundRequired, (, String, description, ,, JSType, found, ,, JSType, required]
[,, error, ), ;, }, }, private, String, formatFoundRequired, (, String, description, ,, JSType, found, ,, JSType, required, ), {]
[), ;, }, }, private, String, formatFoundRequired, (, String, description, ,, JSType, found, ,, JSType, required, ), {, return, MessageFormat]
[;, }, String, getReadableJSTypeName, (, Node, n, ,, boolean, dereference, ), {, if, (, n, ., isGetProp, (, ), )]
[., format, (, FOUND_REQUIRED, ,, description, ,, found, ,, required, ), ;, }, String, getReadableJSTypeName, (, Node, n, ,, boolean]
[,, description, ,, found, ,, required, ), ;, }, String, getReadableJSTypeName, (, Node, n, ,, boolean, dereference, ), {, if]
[,, found, ,, required, ), ;, }, String, getReadableJSTypeName, (, Node, n, ,, boolean, dereference, ), {, if, (, n]
[,, required, ), ;, }, String, getReadableJSTypeName, (, Node, n, ,, boolean, dereference, ), {, if, (, n, ., isGetProp]
[), ;, }, String, getReadableJSTypeName, (, Node, n, ,, boolean, dereference, ), {, if, (, n, ., isGetProp, (, )]
[), {, ObjectType, objectType, =, getJSType, (, n, ., getFirstChild, (, ), ), ., dereference, (, ), ;, if, (]
[., isGetProp, (, ), ), {, ObjectType, objectType, =, getJSType, (, n, ., getFirstChild, (, ), ), ., dereference, (]
[;, if, (, objectType, !=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, )]
[., dereference, (, ), ;, if, (, objectType, !=, null, ), {, String, propName, =, n, ., getLastChild, (, )]
[), ., dereference, (, ), ;, if, (, objectType, !=, null, ), {, String, propName, =, n, ., getLastChild, (]
[., getFirstChild, (, ), ), ., dereference, (, ), ;, if, (, objectType, !=, null, ), {, String, propName, =]
[), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objectType, ., getConstructor]
[!=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objectType]
[), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objectType, ., getConstructor]
[;, if, (, objectType, ., getConstructor, (, ), !=, null, &&, objectType, ., getConstructor, (, ), ., isInterface, (, )]
[., getString, (, ), ;, if, (, objectType, ., getConstructor, (, ), !=, null, &&, objectType, ., getConstructor, (, )]
[., getLastChild, (, ), ., getString, (, ), ;, if, (, objectType, ., getConstructor, (, ), !=, null, &&, objectType]
[), {, objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {, while, (, objectType, !=]
[&&, objectType, ., getConstructor, (, ), ., isInterface, (, ), ), {, objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,]
[!=, null, &&, objectType, ., getConstructor, (, ), ., isInterface, (, ), ), {, objectType, =, FunctionType, ., getTopDefiningInterface, (]
[., getConstructor, (, ), !=, null, &&, objectType, ., getConstructor, (, ), ., isInterface, (, ), ), {, objectType, =]
[&&, objectType, ., getConstructor, (, ), ., isInterface, (, ), ), {, objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,]
[), {, objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {, while, (, objectType, !=]
[., isInterface, (, ), ), {, objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {]
[., getConstructor, (, ), ., isInterface, (, ), ), {, objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, )]
[=, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {, while, (, objectType, !=, null, &&, !]
[;, }, else, {, while, (, objectType, !=, null, &&, !, objectType, ., hasOwnProperty, (, propName, ), ), {, objectType]
[., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {, while, (, objectType, !=, null, &&, !, objectType, .]
[,, propName, ), ;, }, else, {, while, (, objectType, !=, null, &&, !, objectType, ., hasOwnProperty, (, propName, )]
[), ;, }, else, {, while, (, objectType, !=, null, &&, !, objectType, ., hasOwnProperty, (, propName, ), ), {]
[), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&, (, objectType]
[&&, !, objectType, ., hasOwnProperty, (, propName, ), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }]
[!=, null, &&, !, objectType, ., hasOwnProperty, (, propName, ), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;]
[&&, !, objectType, ., hasOwnProperty, (, propName, ), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }]
[), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&, (, objectType]
[), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&, (, objectType]
[., hasOwnProperty, (, propName, ), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType]
[), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&, (]
[=, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&, (, objectType, ., getConstructor, (]
[;, }, }, if, (, objectType, !=, null, &&, (, objectType, ., getConstructor, (, ), !=, null, ||, objectType, .]
[., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&, (, objectType, ., getConstructor, (, ), !=]
[), {, return, objectType, ., toString, (, ), +, ".", +, propName, ;, }, }, }, JSType, type, =, getJSType]
[&&, (, objectType, ., getConstructor, (, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return, objectType]
[!=, null, &&, (, objectType, ., getConstructor, (, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, ), ), ), {]
[&&, (, objectType, ., getConstructor, (, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return, objectType]
[), {, return, objectType, ., toString, (, ), +, ".", +, propName, ;, }, }, }, JSType, type, =, getJSType]
[), ), {, return, objectType, ., toString, (, ), +, ".", +, propName, ;, }, }, }, JSType, type, =]
[||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return, objectType, ., toString, (, ), +, ".", +, propName, ;]
[!=, null, ||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return, objectType, ., toString, (, ), +, ".", +]
[., getConstructor, (, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return, objectType, ., toString, (]
[||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return, objectType, ., toString, (, ), +, ".", +, propName, ;]
[), ), {, return, objectType, ., toString, (, ), +, ".", +, propName, ;, }, }, }, JSType, type, =]
[., isFunctionPrototypeType, (, ), ), ), {, return, objectType, ., toString, (, ), +, ".", +, propName, ;, }, }]
[;, }, }, }, JSType, type, =, getJSType, (, n, ), ;, if, (, dereference, ), {, ObjectType, dereferenced, =]
[+, propName, ;, }, }, }, JSType, type, =, getJSType, (, n, ), ;, if, (, dereference, ), {, ObjectType]
[+, ".", +, propName, ;, }, }, }, JSType, type, =, getJSType, (, n, ), ;, if, (, dereference, )]
[., toString, (, ), +, ".", +, propName, ;, }, }, }, JSType, type, =, getJSType, (, n, ), ;]
[+, propName, ;, }, }, }, JSType, type, =, getJSType, (, n, ), ;, if, (, dereference, ), {, ObjectType]
[;, }, }, }, JSType, type, =, getJSType, (, n, ), ;, if, (, dereference, ), {, ObjectType, dereferenced, =]
[;, if, (, dereference, ), {, ObjectType, dereferenced, =, type, ., dereference, (, ), ;, if, (, dereferenced, !=, null]
[), ;, if, (, dereference, ), {, ObjectType, dereferenced, =, type, ., dereference, (, ), ;, if, (, dereferenced, !=]
[), {, ObjectType, dereferenced, =, type, ., dereference, (, ), ;, if, (, dereferenced, !=, null, ), {, type, =]
[;, if, (, dereferenced, !=, null, ), {, type, =, dereferenced, ;, }, }, String, qualifiedName, =, n, ., getQualifiedName]
[., dereference, (, ), ;, if, (, dereferenced, !=, null, ), {, type, =, dereferenced, ;, }, }, String, qualifiedName]
[), {, type, =, dereferenced, ;, }, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (, type]
[!=, null, ), {, type, =, dereferenced, ;, }, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if]
[), {, type, =, dereferenced, ;, }, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (, type]
[=, dereferenced, ;, }, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (, type, ., isFunctionPrototypeType, (]
[;, }, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||]
[;, if, (, type, ., isFunctionPrototypeType, (, ), ||, (, type, ., toObjectType, (, ), !=, null, &&, type, .]
[., getQualifiedName, (, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||, (, type, ., toObjectType, (, ), !=]
[), {, return, type, ., toString, (, ), ;, }, else, if, (, qualifiedName, !=, null, ), {, return, qualifiedName]
[||, (, type, ., toObjectType, (, ), !=, null, &&, type, ., toObjectType, (, ), ., getConstructor, (, ), !=]
[., isFunctionPrototypeType, (, ), ||, (, type, ., toObjectType, (, ), !=, null, &&, type, ., toObjectType, (, ), .]
[), {, return, type, ., toString, (, ), ;, }, else, if, (, qualifiedName, !=, null, ), {, return, qualifiedName]
[), ), {, return, type, ., toString, (, ), ;, }, else, if, (, qualifiedName, !=, null, ), {, return]
[&&, type, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, ), ), {, return, type, ., toString, (]
[!=, null, &&, type, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, ), ), {, return, type, .]
[., toObjectType, (, ), !=, null, &&, type, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, ), )]
[&&, type, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, ), ), {, return, type, ., toString, (]
[), ), {, return, type, ., toString, (, ), ;, }, else, if, (, qualifiedName, !=, null, ), {, return]
[!=, null, ), ), {, return, type, ., toString, (, ), ;, }, else, if, (, qualifiedName, !=, null, )]
[., getConstructor, (, ), !=, null, ), ), {, return, type, ., toString, (, ), ;, }, else, if, (]
[., toObjectType, (, ), ., getConstructor, (, ), !=, null, ), ), {, return, type, ., toString, (, ), ;]
[), ), {, return, type, ., toString, (, ), ;, }, else, if, (, qualifiedName, !=, null, ), {, return]
[;, }, else, if, (, qualifiedName, !=, null, ), {, return, qualifiedName, ;, }, else, if, (, type, ., isFunctionType]
[., toString, (, ), ;, }, else, if, (, qualifiedName, !=, null, ), {, return, qualifiedName, ;, }, else, if]
[), {, return, qualifiedName, ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, "function", ;, }]
[!=, null, ), {, return, qualifiedName, ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, "function"]
[), {, return, qualifiedName, ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, "function", ;, }]
[;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, "function", ;, }, else, {, return, type]
[), {, return, "function", ;, }, else, {, return, type, ., toString, (, ), ;, }, }, private, JSType, getJSType]
[., isFunctionType, (, ), ), {, return, "function", ;, }, else, {, return, type, ., toString, (, ), ;, }]
[;, }, else, {, return, type, ., toString, (, ), ;, }, }, private, JSType, getJSType, (, Node, n, )]
[;, }, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;]
[., toString, (, ), ;, }, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, .]
[;, if, (, jsType, ==, null, ), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;]
[., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else]
[), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (]
[==, null, ), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;, }, }, private, JSType]
[), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (]
[;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, .]
[), ;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry]
[;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, ., getNativeType, (, typeId, ), ;, }]
[;, }, private, JSError, report, (, JSError, error, ), {, if, (, shouldReport, ), {, compiler, ., report, (, error]
[., getNativeType, (, typeId, ), ;, }, private, JSError, report, (, JSError, error, ), {, if, (, shouldReport, ), {]
[), ;, }, private, JSError, report, (, JSError, error, ), {, if, (, shouldReport, ), {, compiler, ., report, (]
[), {, compiler, ., report, (, error, ), ;, }, return, error, ;, }, static, class, TypeMismatch, {, final, JSType]
[;, }, return, error, ;, }, static, class, TypeMismatch, {, final, JSType, typeA, ;, final, JSType, typeB, ;, final, JSError]
[., report, (, error, ), ;, }, return, error, ;, }, static, class, TypeMismatch, {, final, JSType, typeA, ;, final]
[), ;, }, return, error, ;, }, static, class, TypeMismatch, {, final, JSType, typeA, ;, final, JSType, typeB, ;, final]
[;, }, static, class, TypeMismatch, {, final, JSType, typeA, ;, final, JSType, typeB, ;, final, JSError, src, ;, TypeMismatch, (]
[=, a, ;, this, ., typeB, =, b, ;, this, ., src, =, src, ;, }, @, Override, public, boolean]
[., typeA, =, a, ;, this, ., typeB, =, b, ;, this, ., src, =, src, ;, }, @, Override]
[;, this, ., typeB, =, b, ;, this, ., src, =, src, ;, }, @, Override, public, boolean, equals, (]
[=, b, ;, this, ., src, =, src, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {]
[., typeB, =, b, ;, this, ., src, =, src, ;, }, @, Override, public, boolean, equals, (, Object, object]
[;, this, ., src, =, src, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (]
[=, src, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (, object, instanceof, TypeMismatch, )]
[., src, =, src, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (, object, instanceof]
[;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (, object, instanceof, TypeMismatch, ), {, TypeMismatch]
[), {, TypeMismatch, that, =, (, TypeMismatch, ), object, ;, return, (, that, ., typeA, ., isEquivalentTo, (, this, .]
[instanceof, TypeMismatch, ), {, TypeMismatch, that, =, (, TypeMismatch, ), object, ;, return, (, that, ., typeA, ., isEquivalentTo, (]
[;, return, (, that, ., typeA, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (]
[;, return, (, that, ., typeA, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, typeA]
[||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (, this]
[), ||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (]
[&&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||, (, that, ., typeB, ., isEquivalentTo, (]
[., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||]
[., typeA, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, )]
[), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||, (, that, ., typeB, ., isEquivalentTo]
[., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||, (, that, ., typeB]
[), ||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (]
[., isEquivalentTo, (, this, ., typeB, ), ), ||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, )]
[., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||, (, that, ., typeB, ., isEquivalentTo, (, this, .]
[), ), ||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo]
[., typeB, ), ), ||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, typeA]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (]
[&&, that, ., typeA, ., isEquivalentTo, (, this, ., typeB, ), ), ;, }, return, false, ;, }, @, Override]
[., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (, this, ., typeB, ), ), ;]
[., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (, this, ., typeB, )]
[), &&, that, ., typeA, ., isEquivalentTo, (, this, ., typeB, ), ), ;, }, return, false, ;, }, @]
[., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (, this, ., typeB, ), ), ;, }, return, false, ;]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (]
[., isEquivalentTo, (, this, ., typeB, ), ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (]
[., typeA, ., isEquivalentTo, (, this, ., typeB, ), ), ;, }, return, false, ;, }, @, Override, public, int]
[), ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode]
[., typeB, ), ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects]
[;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, typeA, ,, typeB, ), ;]
[;, }, @, Override, public, String, toString, (, ), {, return, "(", +, typeA, +, ", ", +, typeB, +, ")"]
[., hashCode, (, typeA, ,, typeB, ), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +]
[,, typeB, ), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +, typeA, +, ", ", +]
[), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +, typeA, +, ", ", +, typeB, +]
[;, }, }, }]
[+, ")", ;, }, }, }]
[+, typeB, +, ")", ;, }, }, }]
[+, ", ", +, typeB, +, ")", ;, }, }, }]
[+, typeA, +, ", ", +, typeB, +, ")", ;, }, }, }]
[+, ", ", +, typeB, +, ")", ;, }, }, }]
[+, typeB, +, ")", ;, }, }, }]
[+, ")", ;, }, }, }]
[;, }, }, }]
