[;, private, final, String, reference, ;, private, final, String, sourceName, ;, private, final, int, lineno, ;, private, final, int, charno]
[;, NamedType, (, JSTypeRegistry, registry, ,, String, reference, ,, String, sourceName, ,, int, lineno, ,, int, charno, ), {, super]
[,, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, Preconditions, ., checkNotNull, (, reference, ), ;, this, .]
[), ;, Preconditions, ., checkNotNull, (, reference, ), ;, this, ., reference, =, reference, ;, this, ., sourceName, =, sourceName]
[., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, Preconditions, ., checkNotNull, (, reference, ), ;, this, ., reference, =]
[), ), ;, Preconditions, ., checkNotNull, (, reference, ), ;, this, ., reference, =, reference, ;, this, ., sourceName, =]
[., UNKNOWN_TYPE, ), ), ;, Preconditions, ., checkNotNull, (, reference, ), ;, this, ., reference, =, reference, ;, this, .]
[;, this, ., reference, =, reference, ;, this, ., sourceName, =, sourceName, ;, this, ., lineno, =, lineno, ;, this]
[., checkNotNull, (, reference, ), ;, this, ., reference, =, reference, ;, this, ., sourceName, =, sourceName, ;, this, .]
[), ;, this, ., reference, =, reference, ;, this, ., sourceName, =, sourceName, ;, this, ., lineno, =, lineno, ;]
[=, reference, ;, this, ., sourceName, =, sourceName, ;, this, ., lineno, =, lineno, ;, this, ., charno, =, charno]
[., reference, =, reference, ;, this, ., sourceName, =, sourceName, ;, this, ., lineno, =, lineno, ;, this, ., charno]
[;, this, ., sourceName, =, sourceName, ;, this, ., lineno, =, lineno, ;, this, ., charno, =, charno, ;, }]
[=, sourceName, ;, this, ., lineno, =, lineno, ;, this, ., charno, =, charno, ;, }, @, Override, boolean, defineProperty]
[., sourceName, =, sourceName, ;, this, ., lineno, =, lineno, ;, this, ., charno, =, charno, ;, }, @, Override]
[;, this, ., lineno, =, lineno, ;, this, ., charno, =, charno, ;, }, @, Override, boolean, defineProperty, (, String]
[=, lineno, ;, this, ., charno, =, charno, ;, }, @, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type]
[., lineno, =, lineno, ;, this, ., charno, =, charno, ;, }, @, Override, boolean, defineProperty, (, String, propertyName, ,]
[;, this, ., charno, =, charno, ;, }, @, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,, boolean]
[=, charno, ;, }, @, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode]
[., charno, =, charno, ;, }, @, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,]
[;, }, @, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {]
[), {, if, (, propertyContinuations, ==, null, ), {, propertyContinuations, =, Lists, ., newArrayList, (, ), ;, }, propertyContinuations, .]
[), {, if, (, propertyContinuations, ==, null, ), {, propertyContinuations, =, Lists, ., newArrayList, (, ), ;, }, propertyContinuations, .]
[), {, propertyContinuations, =, Lists, ., newArrayList, (, ), ;, }, propertyContinuations, ., add, (, new, PropertyContinuation, (, propertyName, ,]
[==, null, ), {, propertyContinuations, =, Lists, ., newArrayList, (, ), ;, }, propertyContinuations, ., add, (, new, PropertyContinuation, (]
[), {, propertyContinuations, =, Lists, ., newArrayList, (, ), ;, }, propertyContinuations, ., add, (, new, PropertyContinuation, (, propertyName, ,]
[=, Lists, ., newArrayList, (, ), ;, }, propertyContinuations, ., add, (, new, PropertyContinuation, (, propertyName, ,, type, ,, inferred]
[;, }, propertyContinuations, ., add, (, new, PropertyContinuation, (, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ), ;, return]
[., newArrayList, (, ), ;, }, propertyContinuations, ., add, (, new, PropertyContinuation, (, propertyName, ,, type, ,, inferred, ,, propertyNode]
[;, return, true, ;, }, else, {, return, super, ., defineProperty, (, propertyName, ,, type, ,, inferred, ,, propertyNode, )]
[., add, (, new, PropertyContinuation, (, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ), ;, return, true, ;, }]
[), ;, return, true, ;, }, else, {, return, super, ., defineProperty, (, propertyName, ,, type, ,, inferred, ,, propertyNode]
[,, type, ,, inferred, ,, propertyNode, ), ), ;, return, true, ;, }, else, {, return, super, ., defineProperty, (]
[,, inferred, ,, propertyNode, ), ), ;, return, true, ;, }, else, {, return, super, ., defineProperty, (, propertyName, ,]
[,, propertyNode, ), ), ;, return, true, ;, }, else, {, return, super, ., defineProperty, (, propertyName, ,, type, ,]
[), ), ;, return, true, ;, }, else, {, return, super, ., defineProperty, (, propertyName, ,, type, ,, inferred, ,]
[;, }, else, {, return, super, ., defineProperty, (, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ;, }, }]
[;, }, }, private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal, (, ), ;, if, (, referencedObjType, !=]
[., defineProperty, (, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ;, }, }, private, void, finishPropertyContinuations, (, ), {]
[,, type, ,, inferred, ,, propertyNode, ), ;, }, }, private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal]
[,, inferred, ,, propertyNode, ), ;, }, }, private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal, (, )]
[,, propertyNode, ), ;, }, }, private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal, (, ), ;, if]
[), ;, }, }, private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal, (, ), ;, if, (, referencedObjType]
[;, if, (, referencedObjType, !=, null, &&, !, referencedObjType, ., isUnknownType, (, ), ), {, if, (, propertyContinuations, !=, null]
[), {, if, (, propertyContinuations, !=, null, ), {, for, (, PropertyContinuation, c, :, propertyContinuations, ), {, c, ., commit]
[&&, !, referencedObjType, ., isUnknownType, (, ), ), {, if, (, propertyContinuations, !=, null, ), {, for, (, PropertyContinuation, c]
[!=, null, &&, !, referencedObjType, ., isUnknownType, (, ), ), {, if, (, propertyContinuations, !=, null, ), {, for, (]
[&&, !, referencedObjType, ., isUnknownType, (, ), ), {, if, (, propertyContinuations, !=, null, ), {, for, (, PropertyContinuation, c]
[), {, if, (, propertyContinuations, !=, null, ), {, for, (, PropertyContinuation, c, :, propertyContinuations, ), {, c, ., commit]
[), {, if, (, propertyContinuations, !=, null, ), {, for, (, PropertyContinuation, c, :, propertyContinuations, ), {, c, ., commit]
[., isUnknownType, (, ), ), {, if, (, propertyContinuations, !=, null, ), {, for, (, PropertyContinuation, c, :, propertyContinuations, )]
[), {, for, (, PropertyContinuation, c, :, propertyContinuations, ), {, c, ., commit, (, this, ), ;, }, }, }]
[!=, null, ), {, for, (, PropertyContinuation, c, :, propertyContinuations, ), {, c, ., commit, (, this, ), ;, }]
[), {, for, (, PropertyContinuation, c, :, propertyContinuations, ), {, c, ., commit, (, this, ), ;, }, }, }]
[), {, c, ., commit, (, this, ), ;, }, }, }, propertyContinuations, =, null, ;, }, public, JSType, getReferencedType]
[;, }, }, }, propertyContinuations, =, null, ;, }, public, JSType, getReferencedType, (, ), {, return, getReferencedTypeInternal, (, ), ;]
[., commit, (, this, ), ;, }, }, }, propertyContinuations, =, null, ;, }, public, JSType, getReferencedType, (, ), {]
[), ;, }, }, }, propertyContinuations, =, null, ;, }, public, JSType, getReferencedType, (, ), {, return, getReferencedTypeInternal, (, )]
[=, null, ;, }, public, JSType, getReferencedType, (, ), {, return, getReferencedTypeInternal, (, ), ;, }, @, Override, public, String]
[;, }, public, JSType, getReferencedType, (, ), {, return, getReferencedTypeInternal, (, ), ;, }, @, Override, public, String, getReferenceName, (]
[;, }, @, Override, public, String, getReferenceName, (, ), {, return, reference, ;, }, @, Override, String, toStringHelper, (, boolean]
[;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, return, reference, ;, }, @, Override, public, boolean, hasReferenceName]
[;, }, @, Override, public, boolean, hasReferenceName, (, ), {, return, true, ;, }, @, Override, boolean, isNamedType, (, )]
[;, }, @, Override, boolean, isNamedType, (, ), {, return, true, ;, }, @, Override, public, boolean, isNominalType, (, )]
[;, }, @, Override, public, boolean, isNominalType, (, ), {, return, true, ;, }, @, Override, public, int, hashCode, (]
[;, }, @, Override, public, int, hashCode, (, ), {, return, reference, ., hashCode, (, ), ;, }, @, Override]
[;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, boolean, resolved, =]
[., hashCode, (, ), ;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, )]
[;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, if, (, resolved, ), {, super]
[,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, if, (, resolved]
[), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, if, (, resolved, ), {]
[), {, handleTypeCycle, (, t, ), ;, }, if, (, resolved, ), {, super, ., resolveInternal, (, t, ,, enclosing]
[;, }, if, (, resolved, ), {, super, ., resolveInternal, (, t, ,, enclosing, ), ;, finishPropertyContinuations, (, ), ;]
[), ;, }, if, (, resolved, ), {, super, ., resolveInternal, (, t, ,, enclosing, ), ;, finishPropertyContinuations, (, )]
[), {, super, ., resolveInternal, (, t, ,, enclosing, ), ;, finishPropertyContinuations, (, ), ;, return, registry, ., isLastGeneration, (]
[;, finishPropertyContinuations, (, ), ;, return, registry, ., isLastGeneration, (, ), ?, getReferencedType, (, ), :, this, ;, }, resolveViaProperties]
[., resolveInternal, (, t, ,, enclosing, ), ;, finishPropertyContinuations, (, ), ;, return, registry, ., isLastGeneration, (, ), ?, getReferencedType]
[,, enclosing, ), ;, finishPropertyContinuations, (, ), ;, return, registry, ., isLastGeneration, (, ), ?, getReferencedType, (, ), :, this]
[), ;, finishPropertyContinuations, (, ), ;, return, registry, ., isLastGeneration, (, ), ?, getReferencedType, (, ), :, this, ;, }]
[;, return, registry, ., isLastGeneration, (, ), ?, getReferencedType, (, ), :, this, ;, }, resolveViaProperties, (, t, ,, enclosing]
[;, }, resolveViaProperties, (, t, ,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, )]
[?, getReferencedType, (, ), :, this, ;, }, resolveViaProperties, (, t, ,, enclosing, ), ;, if, (, detectInheritanceCycle, (, )]
[., isLastGeneration, (, ), ?, getReferencedType, (, ), :, this, ;, }, resolveViaProperties, (, t, ,, enclosing, ), ;, if]
[:, this, ;, }, resolveViaProperties, (, t, ,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (]
[;, }, resolveViaProperties, (, t, ,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, )]
[;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, super, ., resolveInternal, (, t, ,]
[,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, super, ., resolveInternal]
[), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, super, ., resolveInternal, (, t]
[), {, handleTypeCycle, (, t, ), ;, }, super, ., resolveInternal, (, t, ,, enclosing, ), ;, if, (, isResolved]
[;, }, super, ., resolveInternal, (, t, ,, enclosing, ), ;, if, (, isResolved, (, ), ), {, finishPropertyContinuations, (]
[), ;, }, super, ., resolveInternal, (, t, ,, enclosing, ), ;, if, (, isResolved, (, ), ), {, finishPropertyContinuations]
[;, if, (, isResolved, (, ), ), {, finishPropertyContinuations, (, ), ;, }, return, registry, ., isLastGeneration, (, ), ?]
[., resolveInternal, (, t, ,, enclosing, ), ;, if, (, isResolved, (, ), ), {, finishPropertyContinuations, (, ), ;, }]
[,, enclosing, ), ;, if, (, isResolved, (, ), ), {, finishPropertyContinuations, (, ), ;, }, return, registry, ., isLastGeneration]
[), ;, if, (, isResolved, (, ), ), {, finishPropertyContinuations, (, ), ;, }, return, registry, ., isLastGeneration, (, )]
[), {, finishPropertyContinuations, (, ), ;, }, return, registry, ., isLastGeneration, (, ), ?, getReferencedType, (, ), :, this, ;]
[;, }, return, registry, ., isLastGeneration, (, ), ?, getReferencedType, (, ), :, this, ;, }, private, boolean, resolveViaRegistry, (]
[;, }, private, boolean, resolveViaRegistry, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, JSType, type, =, registry]
[?, getReferencedType, (, ), :, this, ;, }, private, boolean, resolveViaRegistry, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing]
[., isLastGeneration, (, ), ?, getReferencedType, (, ), :, this, ;, }, private, boolean, resolveViaRegistry, (, ErrorReporter, t, ,, StaticScope]
[:, this, ;, }, private, boolean, resolveViaRegistry, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, JSType, type]
[;, }, private, boolean, resolveViaRegistry, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, JSType, type, =, registry]
[;, if, (, type, !=, null, ), {, setReferencedAndResolvedType, (, type, ,, t, ,, enclosing, ), ;, return, true, ;]
[., getType, (, reference, ), ;, if, (, type, !=, null, ), {, setReferencedAndResolvedType, (, type, ,, t, ,, enclosing]
[), ;, if, (, type, !=, null, ), {, setReferencedAndResolvedType, (, type, ,, t, ,, enclosing, ), ;, return, true]
[), {, setReferencedAndResolvedType, (, type, ,, t, ,, enclosing, ), ;, return, true, ;, }, return, false, ;, }, private]
[!=, null, ), {, setReferencedAndResolvedType, (, type, ,, t, ,, enclosing, ), ;, return, true, ;, }, return, false, ;]
[), {, setReferencedAndResolvedType, (, type, ,, t, ,, enclosing, ), ;, return, true, ;, }, return, false, ;, }, private]
[;, return, true, ;, }, return, false, ;, }, private, void, resolveViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >]
[,, t, ,, enclosing, ), ;, return, true, ;, }, return, false, ;, }, private, void, resolveViaProperties, (, ErrorReporter, t]
[,, enclosing, ), ;, return, true, ;, }, return, false, ;, }, private, void, resolveViaProperties, (, ErrorReporter, t, ,, StaticScope]
[), ;, return, true, ;, }, return, false, ;, }, private, void, resolveViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType]
[;, }, return, false, ;, }, private, void, resolveViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {]
[;, }, private, void, resolveViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, JSType, value, =, lookupViaProperties]
[;, if, (, value, !=, null, &&, value, ., isFunctionType, (, ), &&, (, value, ., isConstructor, (, ), ||]
[,, enclosing, ), ;, if, (, value, !=, null, &&, value, ., isFunctionType, (, ), &&, (, value, ., isConstructor]
[), ;, if, (, value, !=, null, &&, value, ., isFunctionType, (, ), &&, (, value, ., isConstructor, (, )]
[), {, FunctionType, functionType, =, value, ., toMaybeFunctionType, (, ), ;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,, t]
[&&, (, value, ., isConstructor, (, ), ||, value, ., isInterface, (, ), ), ), {, FunctionType, functionType, =, value]
[&&, value, ., isFunctionType, (, ), &&, (, value, ., isConstructor, (, ), ||, value, ., isInterface, (, ), )]
[!=, null, &&, value, ., isFunctionType, (, ), &&, (, value, ., isConstructor, (, ), ||, value, ., isInterface, (]
[&&, value, ., isFunctionType, (, ), &&, (, value, ., isConstructor, (, ), ||, value, ., isInterface, (, ), )]
[&&, (, value, ., isConstructor, (, ), ||, value, ., isInterface, (, ), ), ), {, FunctionType, functionType, =, value]
[., isFunctionType, (, ), &&, (, value, ., isConstructor, (, ), ||, value, ., isInterface, (, ), ), ), {]
[), {, FunctionType, functionType, =, value, ., toMaybeFunctionType, (, ), ;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,, t]
[), ), {, FunctionType, functionType, =, value, ., toMaybeFunctionType, (, ), ;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,]
[||, value, ., isInterface, (, ), ), ), {, FunctionType, functionType, =, value, ., toMaybeFunctionType, (, ), ;, setReferencedAndResolvedType, (]
[., isConstructor, (, ), ||, value, ., isInterface, (, ), ), ), {, FunctionType, functionType, =, value, ., toMaybeFunctionType, (]
[), ), {, FunctionType, functionType, =, value, ., toMaybeFunctionType, (, ), ;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,]
[., isInterface, (, ), ), ), {, FunctionType, functionType, =, value, ., toMaybeFunctionType, (, ), ;, setReferencedAndResolvedType, (, functionType, .]
[;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, !=]
[., toMaybeFunctionType, (, ), ;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else]
[;, }, else, if, (, value, !=, null, &&, value, ., isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (, registry, .]
[,, t, ,, enclosing, ), ;, }, else, if, (, value, !=, null, &&, value, ., isNoObjectType, (, ), )]
[., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, !=, null, &&, value, .]
[,, enclosing, ), ;, }, else, if, (, value, !=, null, &&, value, ., isNoObjectType, (, ), ), {, setReferencedAndResolvedType]
[), ;, }, else, if, (, value, !=, null, &&, value, ., isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (, registry]
[), {, setReferencedAndResolvedType, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ., getInstanceType, (, ), ,, t, ,, enclosing]
[&&, value, ., isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ., getInstanceType]
[!=, null, &&, value, ., isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., NO_OBJECT_TYPE, )]
[&&, value, ., isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ., getInstanceType]
[), {, setReferencedAndResolvedType, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ., getInstanceType, (, ), ,, t, ,, enclosing]
[., isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ., getInstanceType, (, )]
[;, }, else, if, (, value, instanceof, EnumType, ), {, setReferencedAndResolvedType, (, (, (, EnumType, ), value, ), ., getElementsType]
[,, t, ,, enclosing, ), ;, }, else, if, (, value, instanceof, EnumType, ), {, setReferencedAndResolvedType, (, (, (, EnumType]
[., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, instanceof, EnumType, ), {, setReferencedAndResolvedType]
[., getNativeFunctionType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if]
[), ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, instanceof, EnumType, ), {]
[., NO_OBJECT_TYPE, ), ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, instanceof, EnumType]
[,, enclosing, ), ;, }, else, if, (, value, instanceof, EnumType, ), {, setReferencedAndResolvedType, (, (, (, EnumType, ), value]
[), ;, }, else, if, (, value, instanceof, EnumType, ), {, setReferencedAndResolvedType, (, (, (, EnumType, ), value, ), .]
[), {, setReferencedAndResolvedType, (, (, (, EnumType, ), value, ), ., getElementsType, (, ), ,, t, ,, enclosing, ), ;]
[instanceof, EnumType, ), {, setReferencedAndResolvedType, (, (, (, EnumType, ), value, ), ., getElementsType, (, ), ,, t, ,, enclosing]
[;, }, else, {, handleUnresolvedType, (, t, ,, value, ==, null, ||, value, ., isUnknownType, (, ), ), ;, }]
[,, t, ,, enclosing, ), ;, }, else, {, handleUnresolvedType, (, t, ,, value, ==, null, ||, value, ., isUnknownType]
[., getElementsType, (, ), ,, t, ,, enclosing, ), ;, }, else, {, handleUnresolvedType, (, t, ,, value, ==, null]
[), ., getElementsType, (, ), ,, t, ,, enclosing, ), ;, }, else, {, handleUnresolvedType, (, t, ,, value, ==]
[), ., getElementsType, (, ), ,, t, ,, enclosing, ), ;, }, else, {, handleUnresolvedType, (, t, ,, value, ==]
[,, enclosing, ), ;, }, else, {, handleUnresolvedType, (, t, ,, value, ==, null, ||, value, ., isUnknownType, (, )]
[), ;, }, else, {, handleUnresolvedType, (, t, ,, value, ==, null, ||, value, ., isUnknownType, (, ), ), ;]
[;, }, }, private, JSType, lookupViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, String, [, ]]
[,, value, ==, null, ||, value, ., isUnknownType, (, ), ), ;, }, }, private, JSType, lookupViaProperties, (, ErrorReporter, t]
[), ;, }, }, private, JSType, lookupViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, String, []
[||, value, ., isUnknownType, (, ), ), ;, }, }, private, JSType, lookupViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType]
[==, null, ||, value, ., isUnknownType, (, ), ), ;, }, }, private, JSType, lookupViaProperties, (, ErrorReporter, t, ,, StaticScope]
[||, value, ., isUnknownType, (, ), ), ;, }, }, private, JSType, lookupViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType]
[), ;, }, }, private, JSType, lookupViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, String, []
[., isUnknownType, (, ), ), ;, }, }, private, JSType, lookupViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing]
[;, if, (, componentNames, [, 0, ], ., length, (, ), ==, 0, ), {, return, null, ;, }, StaticSlot]
[., split, (, "\\.", ,, -, 1, ), ;, if, (, componentNames, [, 0, ], ., length, (, ), ==]
[,, -, 1, ), ;, if, (, componentNames, [, 0, ], ., length, (, ), ==, 0, ), {, return]
[), ;, if, (, componentNames, [, 0, ], ., length, (, ), ==, 0, ), {, return, null, ;, }]
[), ;, if, (, componentNames, [, 0, ], ., length, (, ), ==, 0, ), {, return, null, ;, }]
[), {, return, null, ;, }, StaticSlot, <, JSType, >, slot, =, enclosing, ., getSlot, (, componentNames, [, 0, ]]
[==, 0, ), {, return, null, ;, }, StaticSlot, <, JSType, >, slot, =, enclosing, ., getSlot, (, componentNames, []
[., length, (, ), ==, 0, ), {, return, null, ;, }, StaticSlot, <, JSType, >, slot, =, enclosing, .]
[[, 0, ], ., length, (, ), ==, 0, ), {, return, null, ;, }, StaticSlot, <, JSType, >, slot]
[], ., length, (, ), ==, 0, ), {, return, null, ;, }, StaticSlot, <, JSType, >, slot, =, enclosing]
[), {, return, null, ;, }, StaticSlot, <, JSType, >, slot, =, enclosing, ., getSlot, (, componentNames, [, 0, ]]
[;, }, StaticSlot, <, JSType, >, slot, =, enclosing, ., getSlot, (, componentNames, [, 0, ], ), ;, if, (]
[;, if, (, slot, ==, null, ), {, return, null, ;, }, JSType, slotType, =, slot, ., getType, (, )]
[., getSlot, (, componentNames, [, 0, ], ), ;, if, (, slot, ==, null, ), {, return, null, ;, }]
[), ;, if, (, slot, ==, null, ), {, return, null, ;, }, JSType, slotType, =, slot, ., getType, (]
[[, 0, ], ), ;, if, (, slot, ==, null, ), {, return, null, ;, }, JSType, slotType, =, slot]
[], ), ;, if, (, slot, ==, null, ), {, return, null, ;, }, JSType, slotType, =, slot, ., getType]
[), {, return, null, ;, }, JSType, slotType, =, slot, ., getType, (, ), ;, if, (, slotType, ==, null]
[==, null, ), {, return, null, ;, }, JSType, slotType, =, slot, ., getType, (, ), ;, if, (, slotType]
[), {, return, null, ;, }, JSType, slotType, =, slot, ., getType, (, ), ;, if, (, slotType, ==, null]
[;, }, JSType, slotType, =, slot, ., getType, (, ), ;, if, (, slotType, ==, null, ||, slotType, ., isAllType]
[;, if, (, slotType, ==, null, ||, slotType, ., isAllType, (, ), ||, slotType, ., isNoType, (, ), ), {]
[., getType, (, ), ;, if, (, slotType, ==, null, ||, slotType, ., isAllType, (, ), ||, slotType, ., isNoType]
[), {, return, null, ;, }, JSType, value, =, getTypedefType, (, t, ,, slot, ,, componentNames, [, 0, ], )]
[||, slotType, ., isNoType, (, ), ), {, return, null, ;, }, JSType, value, =, getTypedefType, (, t, ,, slot]
[||, slotType, ., isAllType, (, ), ||, slotType, ., isNoType, (, ), ), {, return, null, ;, }, JSType, value]
[==, null, ||, slotType, ., isAllType, (, ), ||, slotType, ., isNoType, (, ), ), {, return, null, ;, }]
[||, slotType, ., isAllType, (, ), ||, slotType, ., isNoType, (, ), ), {, return, null, ;, }, JSType, value]
[||, slotType, ., isNoType, (, ), ), {, return, null, ;, }, JSType, value, =, getTypedefType, (, t, ,, slot]
[., isAllType, (, ), ||, slotType, ., isNoType, (, ), ), {, return, null, ;, }, JSType, value, =, getTypedefType]
[), {, return, null, ;, }, JSType, value, =, getTypedefType, (, t, ,, slot, ,, componentNames, [, 0, ], )]
[., isNoType, (, ), ), {, return, null, ;, }, JSType, value, =, getTypedefType, (, t, ,, slot, ,, componentNames]
[;, }, JSType, value, =, getTypedefType, (, t, ,, slot, ,, componentNames, [, 0, ], ), ;, if, (, value]
[;, if, (, value, ==, null, ), {, return, null, ;, }, for, (, int, i, =, 1, ;, i]
[,, slot, ,, componentNames, [, 0, ], ), ;, if, (, value, ==, null, ), {, return, null, ;, }]
[,, componentNames, [, 0, ], ), ;, if, (, value, ==, null, ), {, return, null, ;, }, for, (]
[), ;, if, (, value, ==, null, ), {, return, null, ;, }, for, (, int, i, =, 1, ;]
[[, 0, ], ), ;, if, (, value, ==, null, ), {, return, null, ;, }, for, (, int, i]
[], ), ;, if, (, value, ==, null, ), {, return, null, ;, }, for, (, int, i, =, 1]
[), {, return, null, ;, }, for, (, int, i, =, 1, ;, i, <, componentNames, ., length, ;, i]
[==, null, ), {, return, null, ;, }, for, (, int, i, =, 1, ;, i, <, componentNames, ., length]
[), {, return, null, ;, }, for, (, int, i, =, 1, ;, i, <, componentNames, ., length, ;, i]
[;, }, for, (, int, i, =, 1, ;, i, <, componentNames, ., length, ;, i, ++, ), {, ObjectType]
[;, i, <, componentNames, ., length, ;, i, ++, ), {, ObjectType, parentClass, =, ObjectType, ., cast, (, value, )]
[;, i, ++, ), {, ObjectType, parentClass, =, ObjectType, ., cast, (, value, ), ;, if, (, parentClass, ==, null]
[<, componentNames, ., length, ;, i, ++, ), {, ObjectType, parentClass, =, ObjectType, ., cast, (, value, ), ;, if]
[;, i, ++, ), {, ObjectType, parentClass, =, ObjectType, ., cast, (, value, ), ;, if, (, parentClass, ==, null]
[., length, ;, i, ++, ), {, ObjectType, parentClass, =, ObjectType, ., cast, (, value, ), ;, if, (, parentClass]
[), {, ObjectType, parentClass, =, ObjectType, ., cast, (, value, ), ;, if, (, parentClass, ==, null, ), {, return]
[++, ), {, ObjectType, parentClass, =, ObjectType, ., cast, (, value, ), ;, if, (, parentClass, ==, null, ), {]
[;, if, (, parentClass, ==, null, ), {, return, null, ;, }, if, (, componentNames, [, i, ], ., length]
[., cast, (, value, ), ;, if, (, parentClass, ==, null, ), {, return, null, ;, }, if, (, componentNames]
[), ;, if, (, parentClass, ==, null, ), {, return, null, ;, }, if, (, componentNames, [, i, ], .]
[), {, return, null, ;, }, if, (, componentNames, [, i, ], ., length, (, ), ==, 0, ), {]
[==, null, ), {, return, null, ;, }, if, (, componentNames, [, i, ], ., length, (, ), ==, 0]
[), {, return, null, ;, }, if, (, componentNames, [, i, ], ., length, (, ), ==, 0, ), {]
[;, }, if, (, componentNames, [, i, ], ., length, (, ), ==, 0, ), {, return, null, ;, }]
[), {, return, null, ;, }, value, =, parentClass, ., getPropertyType, (, componentNames, [, i, ], ), ;, }, return]
[==, 0, ), {, return, null, ;, }, value, =, parentClass, ., getPropertyType, (, componentNames, [, i, ], ), ;]
[., length, (, ), ==, 0, ), {, return, null, ;, }, value, =, parentClass, ., getPropertyType, (, componentNames, []
[[, i, ], ., length, (, ), ==, 0, ), {, return, null, ;, }, value, =, parentClass, ., getPropertyType]
[], ., length, (, ), ==, 0, ), {, return, null, ;, }, value, =, parentClass, ., getPropertyType, (, componentNames]
[), {, return, null, ;, }, value, =, parentClass, ., getPropertyType, (, componentNames, [, i, ], ), ;, }, return]
[;, }, value, =, parentClass, ., getPropertyType, (, componentNames, [, i, ], ), ;, }, return, value, ;, }, private]
[=, parentClass, ., getPropertyType, (, componentNames, [, i, ], ), ;, }, return, value, ;, }, private, void, setReferencedAndResolvedType, (]
[;, }, return, value, ;, }, private, void, setReferencedAndResolvedType, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >]
[., getPropertyType, (, componentNames, [, i, ], ), ;, }, return, value, ;, }, private, void, setReferencedAndResolvedType, (, JSType, type]
[), ;, }, return, value, ;, }, private, void, setReferencedAndResolvedType, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType]
[[, i, ], ), ;, }, return, value, ;, }, private, void, setReferencedAndResolvedType, (, JSType, type, ,, ErrorReporter, t, ,]
[], ), ;, }, return, value, ;, }, private, void, setReferencedAndResolvedType, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <]
[;, }, private, void, setReferencedAndResolvedType, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, if]
[), {, validator, ., apply, (, type, ), ;, }, setReferencedType, (, type, ), ;, checkEnumElementCycle, (, t, ), ;]
[!=, null, ), {, validator, ., apply, (, type, ), ;, }, setReferencedType, (, type, ), ;, checkEnumElementCycle, (, t]
[), {, validator, ., apply, (, type, ), ;, }, setReferencedType, (, type, ), ;, checkEnumElementCycle, (, t, ), ;]
[;, }, setReferencedType, (, type, ), ;, checkEnumElementCycle, (, t, ), ;, checkProtoCycle, (, t, ), ;, setResolvedTypeInternal, (, getReferencedType]
[., apply, (, type, ), ;, }, setReferencedType, (, type, ), ;, checkEnumElementCycle, (, t, ), ;, checkProtoCycle, (, t]
[), ;, }, setReferencedType, (, type, ), ;, checkEnumElementCycle, (, t, ), ;, checkProtoCycle, (, t, ), ;, setResolvedTypeInternal, (]
[;, checkEnumElementCycle, (, t, ), ;, checkProtoCycle, (, t, ), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private]
[), ;, checkEnumElementCycle, (, t, ), ;, checkProtoCycle, (, t, ), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }]
[;, checkProtoCycle, (, t, ), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, handleTypeCycle, (, ErrorReporter, t]
[), ;, checkProtoCycle, (, t, ), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, handleTypeCycle, (, ErrorReporter]
[;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, handleTypeCycle, (, ErrorReporter, t, ), {, setReferencedType, (, registry]
[), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, handleTypeCycle, (, ErrorReporter, t, ), {, setReferencedType, (]
[;, }, private, void, handleTypeCycle, (, ErrorReporter, t, ), {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[), ;, }, private, void, handleTypeCycle, (, ErrorReporter, t, ), {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE]
[;, t, ., warning, (, "Cycle detected in inheritance chain of type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, setResolvedTypeInternal, (, getReferencedType, (]
[), ;, t, ., warning, (, "Cycle detected in inheritance chain of type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, setResolvedTypeInternal, (, getReferencedType]
[., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, t, ., warning, (, "Cycle detected in inheritance chain of type ", +, reference, ,, sourceName, ,, lineno]
[), ), ;, t, ., warning, (, "Cycle detected in inheritance chain of type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, setResolvedTypeInternal, (]
[., UNKNOWN_TYPE, ), ), ;, t, ., warning, (, "Cycle detected in inheritance chain of type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;]
[;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =]
[., warning, (, "Cycle detected in inheritance chain of type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, setResolvedTypeInternal, (, getReferencedType, (, ), )]
[,, sourceName, ,, lineno, ,, charno, ), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, checkEnumElementCycle, (]
[+, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void]
[,, sourceName, ,, lineno, ,, charno, ), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, checkEnumElementCycle, (]
[,, lineno, ,, charno, ), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, checkEnumElementCycle, (, ErrorReporter, t]
[,, charno, ), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, checkEnumElementCycle, (, ErrorReporter, t, ), {]
[), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType]
[;, }, private, void, checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (, referencedType]
[), ;, }, private, void, checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (]
[;, if, (, referencedType, instanceof, EnumElementType, &&, (, (, EnumElementType, ), referencedType, ), ., getPrimitiveType, (, ), ==, this, )]
[), {, handleTypeCycle, (, t, ), ;, }, }, private, void, checkProtoCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =]
[&&, (, (, EnumElementType, ), referencedType, ), ., getPrimitiveType, (, ), ==, this, ), {, handleTypeCycle, (, t, ), ;]
[instanceof, EnumElementType, &&, (, (, EnumElementType, ), referencedType, ), ., getPrimitiveType, (, ), ==, this, ), {, handleTypeCycle, (, t]
[), {, handleTypeCycle, (, t, ), ;, }, }, private, void, checkProtoCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =]
[==, this, ), {, handleTypeCycle, (, t, ), ;, }, }, private, void, checkProtoCycle, (, ErrorReporter, t, ), {, JSType]
[., getPrimitiveType, (, ), ==, this, ), {, handleTypeCycle, (, t, ), ;, }, }, private, void, checkProtoCycle, (, ErrorReporter]
[), ., getPrimitiveType, (, ), ==, this, ), {, handleTypeCycle, (, t, ), ;, }, }, private, void, checkProtoCycle, (]
[), ., getPrimitiveType, (, ), ==, this, ), {, handleTypeCycle, (, t, ), ;, }, }, private, void, checkProtoCycle, (]
[), {, handleTypeCycle, (, t, ), ;, }, }, private, void, checkProtoCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =]
[;, }, }, private, void, checkProtoCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (]
[), ;, }, }, private, void, checkProtoCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if]
[;, if, (, referencedType, ==, this, ), {, handleTypeCycle, (, t, ), ;, }, }, private, void, handleUnresolvedType, (, ErrorReporter]
[), {, handleTypeCycle, (, t, ), ;, }, }, private, void, handleUnresolvedType, (, ErrorReporter, t, ,, boolean, ignoreForwardReferencedTypes, ), {]
[==, this, ), {, handleTypeCycle, (, t, ), ;, }, }, private, void, handleUnresolvedType, (, ErrorReporter, t, ,, boolean, ignoreForwardReferencedTypes]
[), {, handleTypeCycle, (, t, ), ;, }, }, private, void, handleUnresolvedType, (, ErrorReporter, t, ,, boolean, ignoreForwardReferencedTypes, ), {]
[;, }, }, private, void, handleUnresolvedType, (, ErrorReporter, t, ,, boolean, ignoreForwardReferencedTypes, ), {, if, (, registry, ., isLastGeneration, (]
[), ;, }, }, private, void, handleUnresolvedType, (, ErrorReporter, t, ,, boolean, ignoreForwardReferencedTypes, ), {, if, (, registry, ., isLastGeneration]
[), {, boolean, isForwardDeclared, =, ignoreForwardReferencedTypes, &&, registry, ., isForwardDeclaredType, (, reference, ), ;, if, (, !, isForwardDeclared, &&, registry]
[., isLastGeneration, (, ), ), {, boolean, isForwardDeclared, =, ignoreForwardReferencedTypes, &&, registry, ., isForwardDeclaredType, (, reference, ), ;, if, (]
[;, if, (, !, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {, t, ., warning, (, "Bad type annotation. Unknown type ", +, reference]
[&&, registry, ., isForwardDeclaredType, (, reference, ), ;, if, (, !, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {]
[;, if, (, !, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {, t, ., warning, (, "Bad type annotation. Unknown type ", +, reference]
[., isForwardDeclaredType, (, reference, ), ;, if, (, !, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {, t, .]
[), ;, if, (, !, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {, t, ., warning, (, "Bad type annotation. Unknown type ", +]
[), {, t, ., warning, (, "Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, }, else, {]
[&&, registry, ., isLastGeneration, (, ), ), {, t, ., warning, (, "Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,]
[&&, registry, ., isLastGeneration, (, ), ), {, t, ., warning, (, "Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,]
[), {, t, ., warning, (, "Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, }, else, {]
[., isLastGeneration, (, ), ), {, t, ., warning, (, "Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,, charno, )]
[;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if, (, registry, .]
[., warning, (, "Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, }, else, {, setReferencedType, (, registry]
[,, sourceName, ,, lineno, ,, charno, ), ;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE]
[+, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative]
[,, sourceName, ,, lineno, ,, charno, ), ;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE]
[,, lineno, ,, charno, ), ;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), )]
[,, charno, ), ;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if]
[), ;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if, (, registry]
[;, if, (, registry, ., isLastGeneration, (, ), &&, validator, !=, null, ), {, validator, ., apply, (, getReferencedType, (]
[), ;, if, (, registry, ., isLastGeneration, (, ), &&, validator, !=, null, ), {, validator, ., apply, (, getReferencedType]
[., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if, (, registry, ., isLastGeneration, (, ), &&, validator, !=, null]
[), ), ;, if, (, registry, ., isLastGeneration, (, ), &&, validator, !=, null, ), {, validator, ., apply, (]
[., NO_RESOLVED_TYPE, ), ), ;, if, (, registry, ., isLastGeneration, (, ), &&, validator, !=, null, ), {, validator, .]
[), {, validator, ., apply, (, getReferencedType, (, ), ), ;, }, }, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;]
[&&, validator, !=, null, ), {, validator, ., apply, (, getReferencedType, (, ), ), ;, }, }, setResolvedTypeInternal, (, getReferencedType]
[., isLastGeneration, (, ), &&, validator, !=, null, ), {, validator, ., apply, (, getReferencedType, (, ), ), ;, }]
[), {, validator, ., apply, (, getReferencedType, (, ), ), ;, }, }, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;]
[!=, null, ), {, validator, ., apply, (, getReferencedType, (, ), ), ;, }, }, setResolvedTypeInternal, (, getReferencedType, (, )]
[), {, validator, ., apply, (, getReferencedType, (, ), ), ;, }, }, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;]
[;, }, }, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, else, {, setResolvedTypeInternal, (, this, ), ;, }, }]
[., apply, (, getReferencedType, (, ), ), ;, }, }, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, else, {]
[), ;, }, }, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, else, {, setResolvedTypeInternal, (, this, ), ;, }]
[;, }, else, {, setResolvedTypeInternal, (, this, ), ;, }, }, JSType, getTypedefType, (, ErrorReporter, t, ,, StaticSlot, <, JSType]
[), ;, }, else, {, setResolvedTypeInternal, (, this, ), ;, }, }, JSType, getTypedefType, (, ErrorReporter, t, ,, StaticSlot, <]
[;, }, }, JSType, getTypedefType, (, ErrorReporter, t, ,, StaticSlot, <, JSType, >, slot, ,, String, name, ), {, JSType]
[), ;, }, }, JSType, getTypedefType, (, ErrorReporter, t, ,, StaticSlot, <, JSType, >, slot, ,, String, name, ), {]
[;, if, (, type, !=, null, ), {, return, type, ;, }, handleUnresolvedType, (, t, ,, true, ), ;, return]
[., getType, (, ), ;, if, (, type, !=, null, ), {, return, type, ;, }, handleUnresolvedType, (, t, ,]
[), {, return, type, ;, }, handleUnresolvedType, (, t, ,, true, ), ;, return, null, ;, }, @, Override, public]
[!=, null, ), {, return, type, ;, }, handleUnresolvedType, (, t, ,, true, ), ;, return, null, ;, }, @]
[), {, return, type, ;, }, handleUnresolvedType, (, t, ,, true, ), ;, return, null, ;, }, @, Override, public]
[;, }, handleUnresolvedType, (, t, ,, true, ), ;, return, null, ;, }, @, Override, public, boolean, setValidator, (, Predicate]
[;, return, null, ;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, if, (]
[,, true, ), ;, return, null, ;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, )]
[), ;, return, null, ;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, if]
[;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, if, (, this, ., isResolved]
[), {, return, super, ., setValidator, (, validator, ), ;, }, else, {, this, ., validator, =, validator, ;, return]
[., isResolved, (, ), ), {, return, super, ., setValidator, (, validator, ), ;, }, else, {, this, ., validator]
[;, }, else, {, this, ., validator, =, validator, ;, return, true, ;, }, }, private, static, final, class, PropertyContinuation]
[., setValidator, (, validator, ), ;, }, else, {, this, ., validator, =, validator, ;, return, true, ;, }, }]
[), ;, }, else, {, this, ., validator, =, validator, ;, return, true, ;, }, }, private, static, final, class]
[=, validator, ;, return, true, ;, }, }, private, static, final, class, PropertyContinuation, {, private, final, String, propertyName, ;, private]
[., validator, =, validator, ;, return, true, ;, }, }, private, static, final, class, PropertyContinuation, {, private, final, String, propertyName]
[;, return, true, ;, }, }, private, static, final, class, PropertyContinuation, {, private, final, String, propertyName, ;, private, final, JSType]
[;, }, }, private, static, final, class, PropertyContinuation, {, private, final, String, propertyName, ;, private, final, JSType, type, ;, private]
[=, propertyName, ;, this, ., type, =, type, ;, this, ., inferred, =, inferred, ;, this, ., propertyNode, =, propertyNode]
[., propertyName, =, propertyName, ;, this, ., type, =, type, ;, this, ., inferred, =, inferred, ;, this, ., propertyNode]
[;, this, ., type, =, type, ;, this, ., inferred, =, inferred, ;, this, ., propertyNode, =, propertyNode, ;, }]
[=, type, ;, this, ., inferred, =, inferred, ;, this, ., propertyNode, =, propertyNode, ;, }, void, commit, (, ObjectType]
[., type, =, type, ;, this, ., inferred, =, inferred, ;, this, ., propertyNode, =, propertyNode, ;, }, void, commit]
[;, this, ., inferred, =, inferred, ;, this, ., propertyNode, =, propertyNode, ;, }, void, commit, (, ObjectType, target, )]
[=, inferred, ;, this, ., propertyNode, =, propertyNode, ;, }, void, commit, (, ObjectType, target, ), {, target, ., defineProperty]
[., inferred, =, inferred, ;, this, ., propertyNode, =, propertyNode, ;, }, void, commit, (, ObjectType, target, ), {, target]
[;, this, ., propertyNode, =, propertyNode, ;, }, void, commit, (, ObjectType, target, ), {, target, ., defineProperty, (, propertyName]
[=, propertyNode, ;, }, void, commit, (, ObjectType, target, ), {, target, ., defineProperty, (, propertyName, ,, type, ,, inferred]
[., propertyNode, =, propertyNode, ;, }, void, commit, (, ObjectType, target, ), {, target, ., defineProperty, (, propertyName, ,, type]
[;, }, void, commit, (, ObjectType, target, ), {, target, ., defineProperty, (, propertyName, ,, type, ,, inferred, ,, propertyNode]
[;, }, }, }]
[., defineProperty, (, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ;, }, }, }]
[,, type, ,, inferred, ,, propertyNode, ), ;, }, }, }]
[,, inferred, ,, propertyNode, ), ;, }, }, }]
[,, propertyNode, ), ;, }, }, }]
[), ;, }, }, }]
