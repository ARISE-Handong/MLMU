[commons, ., math3, ., random, ., Well19937c, ;, public, class, ExponentialDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =]
[public, class, ExponentialDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =]
[[, ], EXPONENTIAL_SA_QI, ;, private, final, double, mean, ;, private, final, double, solverAbsoluteAccuracy, ;, static, {, final, double, LN2, =]
[[, ], EXPONENTIAL_SA_QI, ;, private, final, double, mean, ;, private, final, double, solverAbsoluteAccuracy, ;, static, {, final, double, LN2, =]
[private, final, double, mean, ;, private, final, double, solverAbsoluteAccuracy, ;, static, {, final, double, LN2, =, FastMath, ., log, (]
[final, double, solverAbsoluteAccuracy, ;, static, {, final, double, LN2, =, FastMath, ., log, (, 2, ), ;, double, qi, =]
[{, final, double, LN2, =, FastMath, ., log, (, 2, ), ;, double, qi, =, 0, ;, int, i, =]
[., log, (, 2, ), ;, double, qi, =, 0, ;, int, i, =, 1, ;, final, ResizableDoubleArray, ra, =]
[2, ), ;, double, qi, =, 0, ;, int, i, =, 1, ;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (]
[=, 0, ;, int, i, =, 1, ;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (, 20, ), ;, while, (]
[=, 0, ;, int, i, =, 1, ;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (, 20, ), ;, while, (]
[;, int, i, =, 1, ;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (, 20, ), ;, while, (, qi, <]
[=, 1, ;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (, 20, ), ;, while, (, qi, <, 1, ), {]
[;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (, 20, ), ;, while, (, qi, <, 1, ), {, qi, +=]
[;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (, 20, ), ;, while, (, qi, <, 1, ), {, qi, +=]
[;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (, 20, ), ;, while, (, qi, <, 1, ), {, qi, +=]
[=, new, ResizableDoubleArray, (, 20, ), ;, while, (, qi, <, 1, ), {, qi, +=, FastMath, ., pow, (]
[ResizableDoubleArray, (, 20, ), ;, while, (, qi, <, 1, ), {, qi, +=, FastMath, ., pow, (, LN2, ,]
[), ;, while, (, qi, <, 1, ), {, qi, +=, FastMath, ., pow, (, LN2, ,, i, ), /]
[), ;, while, (, qi, <, 1, ), {, qi, +=, FastMath, ., pow, (, LN2, ,, i, ), /]
[qi, <, 1, ), {, qi, +=, FastMath, ., pow, (, LN2, ,, i, ), /, CombinatoricsUtils, ., factorial, (]
[), {, qi, +=, FastMath, ., pow, (, LN2, ,, i, ), /, CombinatoricsUtils, ., factorial, (, i, ), ;]
[), {, qi, +=, FastMath, ., pow, (, LN2, ,, i, ), /, CombinatoricsUtils, ., factorial, (, i, ), ;]
[FastMath, ., pow, (, LN2, ,, i, ), /, CombinatoricsUtils, ., factorial, (, i, ), ;, ra, ., addElement, (]
[(, LN2, ,, i, ), /, CombinatoricsUtils, ., factorial, (, i, ), ;, ra, ., addElement, (, qi, ), ;]
[LN2, ,, i, ), /, CombinatoricsUtils, ., factorial, (, i, ), ;, ra, ., addElement, (, qi, ), ;, ++]
[), /, CombinatoricsUtils, ., factorial, (, i, ), ;, ra, ., addElement, (, qi, ), ;, ++, i, ;, }]
[CombinatoricsUtils, ., factorial, (, i, ), ;, ra, ., addElement, (, qi, ), ;, ++, i, ;, }, EXPONENTIAL_SA_QI, =]
[CombinatoricsUtils, ., factorial, (, i, ), ;, ra, ., addElement, (, qi, ), ;, ++, i, ;, }, EXPONENTIAL_SA_QI, =]
[;, }, EXPONENTIAL_SA_QI, =, ra, ., getElements, (, ), ;, }, public, ExponentialDistribution, (, double, mean, ), {, this, (]
[EXPONENTIAL_SA_QI, =, ra, ., getElements, (, ), ;, }, public, ExponentialDistribution, (, double, mean, ), {, this, (, mean, ,]
[this, (, mean, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, ExponentialDistribution, (, double, mean, ,, double, inverseCumAccuracy, ), {, this, (]
[), ;, }, public, ExponentialDistribution, (, double, mean, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,]
[}, public, ExponentialDistribution, (, double, mean, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,, mean, ,]
[), ;, }, public, ExponentialDistribution, (, RandomGenerator, rng, ,, double, mean, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (]
[(, RandomGenerator, rng, ,, double, mean, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[(, RandomGenerator, rng, ,, double, mean, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[rng, ,, double, mean, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, mean, <=]
[,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, mean, <=, 0, ), {, throw]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, mean, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, mean, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[super, (, rng, ), ;, if, (, mean, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., MEAN, ,]
[;, if, (, mean, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., MEAN, ,, mean, ), ;, }]
[;, if, (, mean, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., MEAN, ,, mean, ), ;, }]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., MEAN, ,, mean, ), ;, }, this, ., mean, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., MEAN, ,, mean, ), ;, }, this, ., mean, =, mean, ;]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., MEAN, ,, mean, ), ;, }, this, ., mean, =, mean, ;, solverAbsoluteAccuracy, =]
[;, }, this, ., mean, =, mean, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return]
[public, double, getMean, (, ), {, return, mean, ;, }, public, double, density, (, double, x, ), {, if, (]
[public, double, getMean, (, ), {, return, mean, ;, }, public, double, density, (, double, x, ), {, if, (]
[getMean, (, ), {, return, mean, ;, }, public, double, density, (, double, x, ), {, if, (, x, <]
[return, mean, ;, }, public, double, density, (, double, x, ), {, if, (, x, <, 0, ), {, return]
[public, double, density, (, double, x, ), {, if, (, x, <, 0, ), {, return, 0, ;, }, return]
[public, double, density, (, double, x, ), {, if, (, x, <, 0, ), {, return, 0, ;, }, return]
[public, double, density, (, double, x, ), {, if, (, x, <, 0, ), {, return, 0, ;, }, return]
[double, x, ), {, if, (, x, <, 0, ), {, return, 0, ;, }, return, FastMath, ., exp, (]
[double, x, ), {, if, (, x, <, 0, ), {, return, 0, ;, }, return, FastMath, ., exp, (]
[x, ), {, if, (, x, <, 0, ), {, return, 0, ;, }, return, FastMath, ., exp, (, -]
[{, if, (, x, <, 0, ), {, return, 0, ;, }, return, FastMath, ., exp, (, -, x, /]
[x, <, 0, ), {, return, 0, ;, }, return, FastMath, ., exp, (, -, x, /, mean, ), /]
[/, mean, ), /, mean, ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (]
[/, mean, ), /, mean, ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (]
[), /, mean, ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0.0, ), {]
[public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0.0, ), {, ret, =]
[x, ), {, double, ret, ;, if, (, x, <=, 0.0, ), {, ret, =, 0.0, ;, }, else, {]
[{, double, ret, ;, if, (, x, <=, 0.0, ), {, ret, =, 0.0, ;, }, else, {, ret, =]
[{, double, ret, ;, if, (, x, <=, 0.0, ), {, ret, =, 0.0, ;, }, else, {, ret, =]
[ret, ;, if, (, x, <=, 0.0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, 1.0, -]
[ret, ;, if, (, x, <=, 0.0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, 1.0, -]
[x, <=, 0.0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, 1.0, -, FastMath, ., exp, (]
[x, <=, 0.0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, 1.0, -, FastMath, ., exp, (]
[<=, 0.0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, 1.0, -, FastMath, ., exp, (, -]
[), {, ret, =, 0.0, ;, }, else, {, ret, =, 1.0, -, FastMath, ., exp, (, -, x, /]
[;, }, else, {, ret, =, 1.0, -, FastMath, ., exp, (, -, x, /, mean, ), ;, }, return]
[ret, ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (]
[ret, ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (]
[ret, ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (]
[}, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p, <]
[Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p, <, 0.0, ||]
[Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p, <, 0.0, ||]
[double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p, <, 0.0, ||, p, >]
[p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw]
[OutOfRangeException, {, double, ret, ;, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (]
[double, ret, ;, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,]
[;, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0.0, ,]
[p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if, (]
[p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if, (]
[1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if, (, p, ==]
[throw, new, OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if, (, p, ==, 1.0, ), {]
[OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if, (, p, ==, 1.0, ), {, ret, =]
[OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if, (, p, ==, 1.0, ), {, ret, =]
[), ;, }, else, if, (, p, ==, 1.0, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {]
[}, else, if, (, p, ==, 1.0, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =]
[}, else, if, (, p, ==, 1.0, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =]
[else, if, (, p, ==, 1.0, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, -]
[(, p, ==, 1.0, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, -, mean, *]
[(, p, ==, 1.0, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, -, mean, *]
[), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, -, mean, *, FastMath, ., log, (]
[), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, -, mean, *, FastMath, ., log, (]
[ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, -, mean, *, FastMath, ., log, (, 1.0, -]
[;, }, else, {, ret, =, -, mean, *, FastMath, ., log, (, 1.0, -, p, ), ;, }, return]
[-, p, ), ;, }, return, ret, ;, }, @, Override, public, double, sample, (, ), {, double, a, =]
[return, ret, ;, }, @, Override, public, double, sample, (, ), {, double, a, =, 0, ;, double, u, =]
[return, ret, ;, }, @, Override, public, double, sample, (, ), {, double, a, =, 0, ;, double, u, =]
[sample, (, ), {, double, a, =, 0, ;, double, u, =, random, ., nextDouble, (, ), ;, while, (]
[sample, (, ), {, double, a, =, 0, ;, double, u, =, random, ., nextDouble, (, ), ;, while, (]
[), {, double, a, =, 0, ;, double, u, =, random, ., nextDouble, (, ), ;, while, (, u, <]
[a, =, 0, ;, double, u, =, random, ., nextDouble, (, ), ;, while, (, u, <, 0.5, ), {]
[0, ;, double, u, =, random, ., nextDouble, (, ), ;, while, (, u, <, 0.5, ), {, a, +=]
[0, ;, double, u, =, random, ., nextDouble, (, ), ;, while, (, u, <, 0.5, ), {, a, +=]
[double, u, =, random, ., nextDouble, (, ), ;, while, (, u, <, 0.5, ), {, a, +=, EXPONENTIAL_SA_QI, []
[random, ., nextDouble, (, ), ;, while, (, u, <, 0.5, ), {, a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;]
[nextDouble, (, ), ;, while, (, u, <, 0.5, ), {, a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=]
[;, while, (, u, <, 0.5, ), {, a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }]
[(, u, <, 0.5, ), {, a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }, u, +=]
[(, u, <, 0.5, ), {, a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }, u, +=]
[<, 0.5, ), {, a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }, u, +=, u, -]
[a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }, u, +=, u, -, 1, ;, if, (]
[a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }, u, +=, u, -, 1, ;, if, (]
[EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }, u, +=, u, -, 1, ;, if, (, u, <=]
[EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }, u, +=, u, -, 1, ;, if, (, u, <=]
[0, ], ;, u, *=, 2, ;, }, u, +=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, []
[2, ;, }, u, +=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return]
[2, ;, }, u, +=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return]
[}, u, +=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return, mean, *]
[u, +=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return, mean, *, (]
[u, +=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return, mean, *, (]
[u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return, mean, *, (, a, +]
[<=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return, mean, *, (, a, +, u, ), ;, }, int, i, =]
[), {, return, mean, *, (, a, +, u, ), ;, }, int, i, =, 0, ;, double, u2, =]
[), {, return, mean, *, (, a, +, u, ), ;, }, int, i, =, 0, ;, double, u2, =]
[), ;, }, int, i, =, 0, ;, double, u2, =, random, ., nextDouble, (, ), ;, double, umin, =]
[i, =, 0, ;, double, u2, =, random, ., nextDouble, (, ), ;, double, umin, =, u2, ;, do, {]
[=, 0, ;, double, u2, =, random, ., nextDouble, (, ), ;, double, umin, =, u2, ;, do, {, ++]
[;, double, u2, =, random, ., nextDouble, (, ), ;, double, umin, =, u2, ;, do, {, ++, i, ;]
[u2, =, random, ., nextDouble, (, ), ;, double, umin, =, u2, ;, do, {, ++, i, ;, u2, =]
[u2, =, random, ., nextDouble, (, ), ;, double, umin, =, u2, ;, do, {, ++, i, ;, u2, =]
[double, umin, =, u2, ;, do, {, ++, i, ;, u2, =, random, ., nextDouble, (, ), ;, if, (]
[double, umin, =, u2, ;, do, {, ++, i, ;, u2, =, random, ., nextDouble, (, ), ;, if, (]
[=, u2, ;, do, {, ++, i, ;, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, <]
[do, {, ++, i, ;, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, <, umin, ), {]
[++, i, ;, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, <, umin, ), {, umin, =]
[., nextDouble, (, ), ;, if, (, u2, <, umin, ), {, umin, =, u2, ;, }, }, while, (]
[., nextDouble, (, ), ;, if, (, u2, <, umin, ), {, umin, =, u2, ;, }, }, while, (]
[(, ), ;, if, (, u2, <, umin, ), {, umin, =, u2, ;, }, }, while, (, u, >]
[(, ), ;, if, (, u2, <, umin, ), {, umin, =, u2, ;, }, }, while, (, u, >]
[;, if, (, u2, <, umin, ), {, umin, =, u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, []
[umin, ), {, umin, =, u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return]
[umin, ), {, umin, =, u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return]
[{, umin, =, u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean, *]
[umin, =, u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean, *, (]
[umin, =, u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean, *, (]
[u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean, *, (, a, +]
[u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean, *, (, a, +]
[}, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean, *, (, a, +, umin, *]
[}, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean, *, (, a, +, umin, *]
[while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean, *, (, a, +, umin, *, EXPONENTIAL_SA_QI, []
[a, +, umin, *, EXPONENTIAL_SA_QI, [, 0, ], ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[}, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, return]
[getNumericalMean, (, ), {, return, getMean, (, ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, m, =]
[getMean, (, ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, m, =, getMean, (, ), ;, return]
[getMean, (, ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, m, =, getMean, (, ), ;, return]
[), ;, }, public, double, getNumericalVariance, (, ), {, final, double, m, =, getMean, (, ), ;, return, m, *]
[double, m, =, getMean, (, ), ;, return, m, *, m, ;, }, public, double, getSupportLowerBound, (, ), {, return]
[m, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[m, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return]
