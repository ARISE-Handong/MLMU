[;, private, final, Multimap, <, String, ,, Reference, >, refs, =, ArrayListMultimap, ., create, (, ), ;, private, final, Node]
[., newHashMap, (, ), ;, private, final, Multimap, <, String, ,, Reference, >, refs, =, ArrayListMultimap, ., create, (, )]
[;, private, final, Node, root, ;, PreprocessorSymbolTable, (, Node, root, ), {, this, ., root, =, root, ;, }, @]
[., create, (, ), ;, private, final, Node, root, ;, PreprocessorSymbolTable, (, Node, root, ), {, this, ., root, =]
[=, root, ;, }, @, Override, public, Node, getRootNode, (, ), {, return, root, ;, }, @, Override, public, JSType]
[., root, =, root, ;, }, @, Override, public, Node, getRootNode, (, ), {, return, root, ;, }, @, Override]
[;, }, @, Override, public, Node, getRootNode, (, ), {, return, root, ;, }, @, Override, public, JSType, getTypeOfThis, (]
[;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, null, ;, }, @, Override, public, StaticScope, <, JSType]
[;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, ), {, return, null, ;, }, @, Override, public]
[;, }, @, Override, public, SimpleSlot, getSlot, (, String, name, ), {, return, symbols, ., get, (, name, ), ;]
[;, }, @, Override, public, SimpleSlot, getOwnSlot, (, String, name, ), {, return, getSlot, (, name, ), ;, }, @]
[., get, (, name, ), ;, }, @, Override, public, SimpleSlot, getOwnSlot, (, String, name, ), {, return, getSlot, (]
[), ;, }, @, Override, public, SimpleSlot, getOwnSlot, (, String, name, ), {, return, getSlot, (, name, ), ;, }]
[;, }, @, Override, public, Iterable, <, Reference, >, getReferences, (, SimpleSlot, symbol, ), {, return, Collections, ., unmodifiableCollection, (]
[), ;, }, @, Override, public, Iterable, <, Reference, >, getReferences, (, SimpleSlot, symbol, ), {, return, Collections, ., unmodifiableCollection]
[;, }, @, Override, public, Iterable, <, SimpleSlot, >, getAllSymbols, (, ), {, return, Collections, ., unmodifiableCollection, (, symbols, .]
[., unmodifiableCollection, (, refs, ., get, (, symbol, ., getName, (, ), ), ), ;, }, @, Override, public, Iterable]
[), ;, }, @, Override, public, Iterable, <, SimpleSlot, >, getAllSymbols, (, ), {, return, Collections, ., unmodifiableCollection, (, symbols]
[., get, (, symbol, ., getName, (, ), ), ), ;, }, @, Override, public, Iterable, <, SimpleSlot, >, getAllSymbols]
[), ), ;, }, @, Override, public, Iterable, <, SimpleSlot, >, getAllSymbols, (, ), {, return, Collections, ., unmodifiableCollection, (]
[., getName, (, ), ), ), ;, }, @, Override, public, Iterable, <, SimpleSlot, >, getAllSymbols, (, ), {, return]
[;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, SimpleSlot, slot, ), {, return, this, ;, }, void]
[., unmodifiableCollection, (, symbols, ., values, (, ), ), ;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (]
[), ;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, SimpleSlot, slot, ), {, return, this, ;, }]
[., values, (, ), ), ;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, SimpleSlot, slot, ), {]
[;, }, void, addReference, (, Node, node, ), {, String, name, =, node, ., getQualifiedName, (, ), ;, Preconditions, .]
[;, Preconditions, ., checkNotNull, (, name, ), ;, if, (, !, symbols, ., containsKey, (, name, ), ), {, symbols]
[., getQualifiedName, (, ), ;, Preconditions, ., checkNotNull, (, name, ), ;, if, (, !, symbols, ., containsKey, (, name]
[;, if, (, !, symbols, ., containsKey, (, name, ), ), {, symbols, ., put, (, name, ,, new, SimpleSlot]
[., checkNotNull, (, name, ), ;, if, (, !, symbols, ., containsKey, (, name, ), ), {, symbols, ., put]
[), ;, if, (, !, symbols, ., containsKey, (, name, ), ), {, symbols, ., put, (, name, ,, new]
[), {, symbols, ., put, (, name, ,, new, SimpleSlot, (, name, ,, null, ,, true, ), ), ;, }]
[), {, symbols, ., put, (, name, ,, new, SimpleSlot, (, name, ,, null, ,, true, ), ), ;, }]
[., containsKey, (, name, ), ), {, symbols, ., put, (, name, ,, new, SimpleSlot, (, name, ,, null, ,]
[), ), {, symbols, ., put, (, name, ,, new, SimpleSlot, (, name, ,, null, ,, true, ), ), ;]
[;, }, refs, ., put, (, name, ,, new, Reference, (, symbols, ., get, (, name, ), ,, node, )]
[., put, (, name, ,, new, SimpleSlot, (, name, ,, null, ,, true, ), ), ;, }, refs, ., put]
[,, new, SimpleSlot, (, name, ,, null, ,, true, ), ), ;, }, refs, ., put, (, name, ,, new]
[), ;, }, refs, ., put, (, name, ,, new, Reference, (, symbols, ., get, (, name, ), ,, node]
[,, null, ,, true, ), ), ;, }, refs, ., put, (, name, ,, new, Reference, (, symbols, ., get]
[,, true, ), ), ;, }, refs, ., put, (, name, ,, new, Reference, (, symbols, ., get, (, name]
[), ), ;, }, refs, ., put, (, name, ,, new, Reference, (, symbols, ., get, (, name, ), ,]
[;, }, static, final, class, Reference, extends, SimpleReference, <, SimpleSlot, >, {, Reference, (, SimpleSlot, symbol, ,, Node, node, )]
[., put, (, name, ,, new, Reference, (, symbols, ., get, (, name, ), ,, node, ), ), ;, }]
[,, new, Reference, (, symbols, ., get, (, name, ), ,, node, ), ), ;, }, static, final, class, Reference]
[), ;, }, static, final, class, Reference, extends, SimpleReference, <, SimpleSlot, >, {, Reference, (, SimpleSlot, symbol, ,, Node, node]
[,, node, ), ), ;, }, static, final, class, Reference, extends, SimpleReference, <, SimpleSlot, >, {, Reference, (, SimpleSlot, symbol]
[., get, (, name, ), ,, node, ), ), ;, }, static, final, class, Reference, extends, SimpleReference, <, SimpleSlot, >]
[), ,, node, ), ), ;, }, static, final, class, Reference, extends, SimpleReference, <, SimpleSlot, >, {, Reference, (, SimpleSlot]
[), ), ;, }, static, final, class, Reference, extends, SimpleReference, <, SimpleSlot, >, {, Reference, (, SimpleSlot, symbol, ,, Node]
[,, node, ), ;, }, }, }]
[), ;, }, }, }]
