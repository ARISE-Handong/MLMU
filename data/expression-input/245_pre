[class, PeepholeOptimizationsPass, implements, CompilerPass, {, private, AbstractCompiler, compiler, ;, private, final, AbstractPeepholeOptimization, [, ], peepholeOptimizations, ;, private, StateStack, traversalState, =]
[private, final, AbstractPeepholeOptimization, [, ], peepholeOptimizations, ;, private, StateStack, traversalState, =, new, StateStack, (, ), ;, private, boolean, retraverseOnChange, =]
[boolean, retraverseOnChange, =, true, ;, static, private, class, ScopeState, {, boolean, changed, ;, boolean, traverseChildScopes, ;, ScopeState, (, ), {]
[boolean, changed, ;, boolean, traverseChildScopes, ;, ScopeState, (, ), {, reset, (, ), ;, }, void, reset, (, ), {]
[;, boolean, traverseChildScopes, ;, ScopeState, (, ), {, reset, (, ), ;, }, void, reset, (, ), {, changed, =]
[traverseChildScopes, ;, ScopeState, (, ), {, reset, (, ), ;, }, void, reset, (, ), {, changed, =, false, ;]
[ScopeState, (, ), {, reset, (, ), ;, }, void, reset, (, ), {, changed, =, false, ;, traverseChildScopes, =]
[false, ;, traverseChildScopes, =, true, ;, }, }, static, private, class, StateStack, {, private, ArrayList, <, ScopeState, >, states, =]
[false, ;, traverseChildScopes, =, true, ;, }, }, static, private, class, StateStack, {, private, ArrayList, <, ScopeState, >, states, =]
[class, StateStack, {, private, ArrayList, <, ScopeState, >, states, =, Lists, ., newArrayList, (, ), ;, private, int, currentDepth, =]
[ScopeState, >, states, =, Lists, ., newArrayList, (, ), ;, private, int, currentDepth, =, 0, ;, StateStack, (, ), {]
[ScopeState, >, states, =, Lists, ., newArrayList, (, ), ;, private, int, currentDepth, =, 0, ;, StateStack, (, ), {]
[Lists, ., newArrayList, (, ), ;, private, int, currentDepth, =, 0, ;, StateStack, (, ), {, states, ., add, (]
[(, ), {, states, ., add, (, new, ScopeState, (, ), ), ;, }, ScopeState, peek, (, ), {, return]
[(, ), {, states, ., add, (, new, ScopeState, (, ), ), ;, }, ScopeState, peek, (, ), {, return]
[., add, (, new, ScopeState, (, ), ), ;, }, ScopeState, peek, (, ), {, return, states, ., get, (]
[}, ScopeState, peek, (, ), {, return, states, ., get, (, currentDepth, ), ;, }, void, push, (, ), {]
[}, ScopeState, peek, (, ), {, return, states, ., get, (, currentDepth, ), ;, }, void, push, (, ), {]
[{, return, states, ., get, (, currentDepth, ), ;, }, void, push, (, ), {, currentDepth, ++, ;, if, (]
[{, return, states, ., get, (, currentDepth, ), ;, }, void, push, (, ), {, currentDepth, ++, ;, if, (]
[{, return, states, ., get, (, currentDepth, ), ;, }, void, push, (, ), {, currentDepth, ++, ;, if, (]
[currentDepth, ), ;, }, void, push, (, ), {, currentDepth, ++, ;, if, (, states, ., size, (, ), <=]
[}, void, push, (, ), {, currentDepth, ++, ;, if, (, states, ., size, (, ), <=, currentDepth, ), {]
[}, void, push, (, ), {, currentDepth, ++, ;, if, (, states, ., size, (, ), <=, currentDepth, ), {]
[), {, currentDepth, ++, ;, if, (, states, ., size, (, ), <=, currentDepth, ), {, states, ., add, (]
[size, (, ), <=, currentDepth, ), {, states, ., add, (, new, ScopeState, (, ), ), ;, }, else, {]
[size, (, ), <=, currentDepth, ), {, states, ., add, (, new, ScopeState, (, ), ), ;, }, else, {]
[size, (, ), <=, currentDepth, ), {, states, ., add, (, new, ScopeState, (, ), ), ;, }, else, {]
[currentDepth, ), {, states, ., add, (, new, ScopeState, (, ), ), ;, }, else, {, states, ., get, (]
[else, {, states, ., get, (, currentDepth, ), ., reset, (, ), ;, }, }, void, pop, (, ), {]
[else, {, states, ., get, (, currentDepth, ), ., reset, (, ), ;, }, }, void, pop, (, ), {]
[{, currentDepth, --, ;, }, }, private, class, PeepholeChangeHandler, implements, CodeChangeHandler, {, @, Override, public, void, reportChange, (, ), {]
[{, currentDepth, --, ;, }, }, private, class, PeepholeChangeHandler, implements, CodeChangeHandler, {, @, Override, public, void, reportChange, (, ), {]
[{, currentDepth, --, ;, }, }, private, class, PeepholeChangeHandler, implements, CodeChangeHandler, {, @, Override, public, void, reportChange, (, ), {]
[PeepholeChangeHandler, implements, CodeChangeHandler, {, @, Override, public, void, reportChange, (, ), {, traversalState, ., peek, (, ), ., changed, =]
[peek, (, ), ., changed, =, true, ;, }, }, PeepholeOptimizationsPass, (, AbstractCompiler, compiler, ,, AbstractPeepholeOptimization, ..., optimizations, ), {]
[peek, (, ), ., changed, =, true, ;, }, }, PeepholeOptimizationsPass, (, AbstractCompiler, compiler, ,, AbstractPeepholeOptimization, ..., optimizations, ), {]
[changed, =, true, ;, }, }, PeepholeOptimizationsPass, (, AbstractCompiler, compiler, ,, AbstractPeepholeOptimization, ..., optimizations, ), {, this, ., compiler, =]
[true, ;, }, }, PeepholeOptimizationsPass, (, AbstractCompiler, compiler, ,, AbstractPeepholeOptimization, ..., optimizations, ), {, this, ., compiler, =, compiler, ;]
[true, ;, }, }, PeepholeOptimizationsPass, (, AbstractCompiler, compiler, ,, AbstractPeepholeOptimization, ..., optimizations, ), {, this, ., compiler, =, compiler, ;]
[PeepholeOptimizationsPass, (, AbstractCompiler, compiler, ,, AbstractPeepholeOptimization, ..., optimizations, ), {, this, ., compiler, =, compiler, ;, this, ., peepholeOptimizations, =]
[this, ., compiler, =, compiler, ;, this, ., peepholeOptimizations, =, optimizations, ;, }, PeepholeOptimizationsPass, setRetraverseOnChange, (, boolean, retraverse, ), {]
[this, ., compiler, =, compiler, ;, this, ., peepholeOptimizations, =, optimizations, ;, }, PeepholeOptimizationsPass, setRetraverseOnChange, (, boolean, retraverse, ), {]
[compiler, ;, this, ., peepholeOptimizations, =, optimizations, ;, }, PeepholeOptimizationsPass, setRetraverseOnChange, (, boolean, retraverse, ), {, this, ., retraverseOnChange, =]
[., peepholeOptimizations, =, optimizations, ;, }, PeepholeOptimizationsPass, setRetraverseOnChange, (, boolean, retraverse, ), {, this, ., retraverseOnChange, =, retraverse, ;, return]
[retraverse, ), {, this, ., retraverseOnChange, =, retraverse, ;, return, this, ;, }, public, AbstractCompiler, getCompiler, (, ), {, return]
[return, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, PeepholeChangeHandler, handler, =]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, PeepholeChangeHandler, handler, =, new, PeepholeChangeHandler, (, ), ;]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, PeepholeChangeHandler, handler, =, new, PeepholeChangeHandler, (, ), ;]
[(, Node, externs, ,, Node, root, ), {, PeepholeChangeHandler, handler, =, new, PeepholeChangeHandler, (, ), ;, compiler, ., addChangeHandler, (]
[,, Node, root, ), {, PeepholeChangeHandler, handler, =, new, PeepholeChangeHandler, (, ), ;, compiler, ., addChangeHandler, (, handler, ), ;]
[{, PeepholeChangeHandler, handler, =, new, PeepholeChangeHandler, (, ), ;, compiler, ., addChangeHandler, (, handler, ), ;, beginTraversal, (, ), ;]
[handler, =, new, PeepholeChangeHandler, (, ), ;, compiler, ., addChangeHandler, (, handler, ), ;, beginTraversal, (, ), ;, traverse, (]
[PeepholeChangeHandler, (, ), ;, compiler, ., addChangeHandler, (, handler, ), ;, beginTraversal, (, ), ;, traverse, (, root, ), ;]
[compiler, ., addChangeHandler, (, handler, ), ;, beginTraversal, (, ), ;, traverse, (, root, ), ;, endTraversal, (, ), ;]
[compiler, ., addChangeHandler, (, handler, ), ;, beginTraversal, (, ), ;, traverse, (, root, ), ;, endTraversal, (, ), ;]
[handler, ), ;, beginTraversal, (, ), ;, traverse, (, root, ), ;, endTraversal, (, ), ;, compiler, ., removeChangeHandler, (]
[), ;, compiler, ., removeChangeHandler, (, handler, ), ;, }, private, void, traverse, (, Node, node, ), {, if, (]
[;, compiler, ., removeChangeHandler, (, handler, ), ;, }, private, void, traverse, (, Node, node, ), {, if, (, !]
[., removeChangeHandler, (, handler, ), ;, }, private, void, traverse, (, Node, node, ), {, if, (, !, shouldVisit, (]
[(, Node, node, ), {, if, (, !, shouldVisit, (, node, ), ), {, return, ;, }, int, visits, =]
[!, shouldVisit, (, node, ), ), {, return, ;, }, int, visits, =, 0, ;, do, {, Node, c, =]
[!, shouldVisit, (, node, ), ), {, return, ;, }, int, visits, =, 0, ;, do, {, Node, c, =]
[;, }, int, visits, =, 0, ;, do, {, Node, c, =, node, ., getFirstChild, (, ), ;, while, (]
[;, }, int, visits, =, 0, ;, do, {, Node, c, =, node, ., getFirstChild, (, ), ;, while, (]
[int, visits, =, 0, ;, do, {, Node, c, =, node, ., getFirstChild, (, ), ;, while, (, c, !=]
[{, Node, c, =, node, ., getFirstChild, (, ), ;, while, (, c, !=, null, ), {, Node, next, =]
[{, Node, c, =, node, ., getFirstChild, (, ), ;, while, (, c, !=, null, ), {, Node, next, =]
[getFirstChild, (, ), ;, while, (, c, !=, null, ), {, Node, next, =, c, ., getNext, (, ), ;]
[), ;, while, (, c, !=, null, ), {, Node, next, =, c, ., getNext, (, ), ;, traverse, (]
[(, c, !=, null, ), {, Node, next, =, c, ., getNext, (, ), ;, traverse, (, c, ), ;]
[!=, null, ), {, Node, next, =, c, ., getNext, (, ), ;, traverse, (, c, ), ;, c, =]
[{, Node, next, =, c, ., getNext, (, ), ;, traverse, (, c, ), ;, c, =, next, ;, }]
[next, =, c, ., getNext, (, ), ;, traverse, (, c, ), ;, c, =, next, ;, }, visit, (]
[., getNext, (, ), ;, traverse, (, c, ), ;, c, =, next, ;, }, visit, (, node, ), ;]
[., getNext, (, ), ;, traverse, (, c, ), ;, c, =, next, ;, }, visit, (, node, ), ;]
[), ;, traverse, (, c, ), ;, c, =, next, ;, }, visit, (, node, ), ;, visits, ++, ;]
[), ;, traverse, (, c, ), ;, c, =, next, ;, }, visit, (, node, ), ;, visits, ++, ;]
[c, ), ;, c, =, next, ;, }, visit, (, node, ), ;, visits, ++, ;, Preconditions, ., checkState, (]
[c, ), ;, c, =, next, ;, }, visit, (, node, ), ;, visits, ++, ;, Preconditions, ., checkState, (]
[;, c, =, next, ;, }, visit, (, node, ), ;, visits, ++, ;, Preconditions, ., checkState, (, visits, <]
[=, next, ;, }, visit, (, node, ), ;, visits, ++, ;, Preconditions, ., checkState, (, visits, <, 10000, ,]
[node, ), ;, visits, ++, ;, Preconditions, ., checkState, (, visits, <, 10000, ,, "too many interations", ), ;, }, while, (]
[;, visits, ++, ;, Preconditions, ., checkState, (, visits, <, 10000, ,, "too many interations", ), ;, }, while, (, shouldRetraverse, (]
[Preconditions, ., checkState, (, visits, <, 10000, ,, "too many interations", ), ;, }, while, (, shouldRetraverse, (, node, ), ), ;]
[checkState, (, visits, <, 10000, ,, "too many interations", ), ;, }, while, (, shouldRetraverse, (, node, ), ), ;, exitNode, (]
[node, ), ), ;, exitNode, (, node, ), ;, }, private, boolean, shouldRetraverse, (, Node, node, ), {, if, (]
[node, ), ), ;, exitNode, (, node, ), ;, }, private, boolean, shouldRetraverse, (, Node, node, ), {, if, (]
[node, ), ), ;, exitNode, (, node, ), ;, }, private, boolean, shouldRetraverse, (, Node, node, ), {, if, (]
[), ;, exitNode, (, node, ), ;, }, private, boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange, &&]
[), ;, exitNode, (, node, ), ;, }, private, boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange, &&]
[), ;, exitNode, (, node, ), ;, }, private, boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange, &&]
[;, }, private, boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange, &&, node, ., getParent, (, ), !=]
[private, boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange, &&, node, ., getParent, (, ), !=, null, &&]
[boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange, &&, node, ., getParent, (, ), !=, null, &&, (]
[boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange, &&, node, ., getParent, (, ), !=, null, &&, (]
[boolean, shouldRetraverse, (, Node, node, ), {, if, (, retraverseOnChange, &&, node, ., getParent, (, ), !=, null, &&, (]
[{, if, (, retraverseOnChange, &&, node, ., getParent, (, ), !=, null, &&, (, node, ., isFunction, (, ), ||]
[{, if, (, retraverseOnChange, &&, node, ., getParent, (, ), !=, null, &&, (, node, ., isFunction, (, ), ||]
[null, &&, (, node, ., isFunction, (, ), ||, node, ., isScript, (, ), ), ), {, ScopeState, state, =]
[null, &&, (, node, ., isFunction, (, ), ||, node, ., isScript, (, ), ), ), {, ScopeState, state, =]
[||, node, ., isScript, (, ), ), ), {, ScopeState, state, =, traversalState, ., peek, (, ), ;, if, (]
[||, node, ., isScript, (, ), ), ), {, ScopeState, state, =, traversalState, ., peek, (, ), ;, if, (]
[), ), ), {, ScopeState, state, =, traversalState, ., peek, (, ), ;, if, (, state, ., changed, ), {]
[), ), ), {, ScopeState, state, =, traversalState, ., peek, (, ), ;, if, (, state, ., changed, ), {]
[ScopeState, state, =, traversalState, ., peek, (, ), ;, if, (, state, ., changed, ), {, state, ., changed, =]
[=, traversalState, ., peek, (, ), ;, if, (, state, ., changed, ), {, state, ., changed, =, false, ;]
[=, traversalState, ., peek, (, ), ;, if, (, state, ., changed, ), {, state, ., changed, =, false, ;]
[(, ), ;, if, (, state, ., changed, ), {, state, ., changed, =, false, ;, state, ., traverseChildScopes, =]
[if, (, state, ., changed, ), {, state, ., changed, =, false, ;, state, ., traverseChildScopes, =, false, ;, return]
[), {, state, ., changed, =, false, ;, state, ., traverseChildScopes, =, false, ;, return, true, ;, }, }, return]
[;, return, true, ;, }, }, return, false, ;, }, private, boolean, shouldVisit, (, Node, node, ), {, if, (]
[;, return, true, ;, }, }, return, false, ;, }, private, boolean, shouldVisit, (, Node, node, ), {, if, (]
[;, return, true, ;, }, }, return, false, ;, }, private, boolean, shouldVisit, (, Node, node, ), {, if, (]
[return, false, ;, }, private, boolean, shouldVisit, (, Node, node, ), {, if, (, node, ., isFunction, (, ), ||]
[return, false, ;, }, private, boolean, shouldVisit, (, Node, node, ), {, if, (, node, ., isFunction, (, ), ||]
[), {, if, (, node, ., isFunction, (, ), ||, node, ., isScript, (, ), ), {, ScopeState, previous, =]
[), {, if, (, node, ., isFunction, (, ), ||, node, ., isScript, (, ), ), {, ScopeState, previous, =]
[), ||, node, ., isScript, (, ), ), {, ScopeState, previous, =, traversalState, ., peek, (, ), ;, if, (]
[||, node, ., isScript, (, ), ), {, ScopeState, previous, =, traversalState, ., peek, (, ), ;, if, (, !]
[||, node, ., isScript, (, ), ), {, ScopeState, previous, =, traversalState, ., peek, (, ), ;, if, (, !]
[), {, ScopeState, previous, =, traversalState, ., peek, (, ), ;, if, (, !, previous, ., traverseChildScopes, ), {, return]
[previous, =, traversalState, ., peek, (, ), ;, if, (, !, previous, ., traverseChildScopes, ), {, return, false, ;, }]
[previous, =, traversalState, ., peek, (, ), ;, if, (, !, previous, ., traverseChildScopes, ), {, return, false, ;, }]
[if, (, !, previous, ., traverseChildScopes, ), {, return, false, ;, }, traversalState, ., push, (, ), ;, }, return]
[., push, (, ), ;, }, return, true, ;, }, private, void, exitNode, (, Node, node, ), {, if, (]
[., push, (, ), ;, }, return, true, ;, }, private, void, exitNode, (, Node, node, ), {, if, (]
[., push, (, ), ;, }, return, true, ;, }, private, void, exitNode, (, Node, node, ), {, if, (]
[return, true, ;, }, private, void, exitNode, (, Node, node, ), {, if, (, node, ., isFunction, (, ), ||]
[return, true, ;, }, private, void, exitNode, (, Node, node, ), {, if, (, node, ., isFunction, (, ), ||]
[(, Node, node, ), {, if, (, node, ., isFunction, (, ), ||, node, ., isScript, (, ), ), {]
[(, Node, node, ), {, if, (, node, ., isFunction, (, ), ||, node, ., isScript, (, ), ), {]
[{, traversalState, ., pop, (, ), ;, }, }, public, void, visit, (, Node, n, ), {, Node, currentVersionOfNode, =]
[), ;, }, }, public, void, visit, (, Node, n, ), {, Node, currentVersionOfNode, =, n, ;, boolean, somethingChanged, =]
[public, void, visit, (, Node, n, ), {, Node, currentVersionOfNode, =, n, ;, boolean, somethingChanged, =, false, ;, do, {]
[visit, (, Node, n, ), {, Node, currentVersionOfNode, =, n, ;, boolean, somethingChanged, =, false, ;, do, {, somethingChanged, =]
[currentVersionOfNode, =, n, ;, boolean, somethingChanged, =, false, ;, do, {, somethingChanged, =, false, ;, for, (, AbstractPeepholeOptimization, optimization, :]
[=, false, ;, do, {, somethingChanged, =, false, ;, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, Node, newVersionOfNode, =]
[=, false, ;, do, {, somethingChanged, =, false, ;, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, Node, newVersionOfNode, =]
[{, somethingChanged, =, false, ;, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, Node, newVersionOfNode, =, optimization, ., optimizeSubtree, (]
[for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, Node, newVersionOfNode, =, optimization, ., optimizeSubtree, (, currentVersionOfNode, ), ;, if, (]
[for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, Node, newVersionOfNode, =, optimization, ., optimizeSubtree, (, currentVersionOfNode, ), ;, if, (]
[AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, Node, newVersionOfNode, =, optimization, ., optimizeSubtree, (, currentVersionOfNode, ), ;, if, (, newVersionOfNode, !=]
[peepholeOptimizations, ), {, Node, newVersionOfNode, =, optimization, ., optimizeSubtree, (, currentVersionOfNode, ), ;, if, (, newVersionOfNode, !=, currentVersionOfNode, ), {]
[{, Node, newVersionOfNode, =, optimization, ., optimizeSubtree, (, currentVersionOfNode, ), ;, if, (, newVersionOfNode, !=, currentVersionOfNode, ), {, somethingChanged, =]
[newVersionOfNode, =, optimization, ., optimizeSubtree, (, currentVersionOfNode, ), ;, if, (, newVersionOfNode, !=, currentVersionOfNode, ), {, somethingChanged, =, true, ;]
[optimization, ., optimizeSubtree, (, currentVersionOfNode, ), ;, if, (, newVersionOfNode, !=, currentVersionOfNode, ), {, somethingChanged, =, true, ;, currentVersionOfNode, =]
[), ;, if, (, newVersionOfNode, !=, currentVersionOfNode, ), {, somethingChanged, =, true, ;, currentVersionOfNode, =, newVersionOfNode, ;, }, if, (]
[), ;, if, (, newVersionOfNode, !=, currentVersionOfNode, ), {, somethingChanged, =, true, ;, currentVersionOfNode, =, newVersionOfNode, ;, }, if, (]
[if, (, newVersionOfNode, !=, currentVersionOfNode, ), {, somethingChanged, =, true, ;, currentVersionOfNode, =, newVersionOfNode, ;, }, if, (, currentVersionOfNode, ==]
[;, currentVersionOfNode, =, newVersionOfNode, ;, }, if, (, currentVersionOfNode, ==, null, ), {, return, ;, }, }, }, while, (]
[}, }, }, while, (, somethingChanged, ), ;, }, private, void, beginTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :]
[while, (, somethingChanged, ), ;, }, private, void, beginTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {]
[while, (, somethingChanged, ), ;, }, private, void, beginTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {]
[;, }, private, void, beginTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, optimization, ., beginTraversal, (]
[optimization, ., beginTraversal, (, compiler, ), ;, }, }, private, void, endTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :]
[(, compiler, ), ;, }, }, private, void, endTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {]
[(, compiler, ), ;, }, }, private, void, endTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {]
[}, }, private, void, endTraversal, (, ), {, for, (, AbstractPeepholeOptimization, optimization, :, peepholeOptimizations, ), {, optimization, ., endTraversal, (]
