[List, axesAtTop, ;, private, List, axesAtBottom, ;, private, List, axesAtLeft, ;, private, List, axesAtRight, ;, public, AxisCollection, (, ), {]
[List, axesAtTop, ;, private, List, axesAtBottom, ;, private, List, axesAtLeft, ;, private, List, axesAtRight, ;, public, AxisCollection, (, ), {]
[List, axesAtBottom, ;, private, List, axesAtLeft, ;, private, List, axesAtRight, ;, public, AxisCollection, (, ), {, this, ., axesAtTop, =]
[axesAtRight, ;, public, AxisCollection, (, ), {, this, ., axesAtTop, =, new, java, ., util, ., ArrayList, (, ), ;]
[axesAtRight, ;, public, AxisCollection, (, ), {, this, ., axesAtTop, =, new, java, ., util, ., ArrayList, (, ), ;]
[(, ), {, this, ., axesAtTop, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., axesAtBottom, =]
[., util, ., ArrayList, (, ), ;, this, ., axesAtBottom, =, new, java, ., util, ., ArrayList, (, ), ;]
[., util, ., ArrayList, (, ), ;, this, ., axesAtBottom, =, new, java, ., util, ., ArrayList, (, ), ;]
[(, ), ;, this, ., axesAtBottom, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., axesAtLeft, =]
[., util, ., ArrayList, (, ), ;, this, ., axesAtLeft, =, new, java, ., util, ., ArrayList, (, ), ;]
[., util, ., ArrayList, (, ), ;, this, ., axesAtLeft, =, new, java, ., util, ., ArrayList, (, ), ;]
[(, ), ;, this, ., axesAtLeft, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., axesAtRight, =]
[., axesAtRight, =, new, java, ., util, ., ArrayList, (, ), ;, }, public, List, getAxesAtTop, (, ), {, return]
[., axesAtRight, =, new, java, ., util, ., ArrayList, (, ), ;, }, public, List, getAxesAtTop, (, ), {, return]
[}, public, List, getAxesAtTop, (, ), {, return, this, ., axesAtTop, ;, }, public, List, getAxesAtBottom, (, ), {, return]
[}, public, List, getAxesAtTop, (, ), {, return, this, ., axesAtTop, ;, }, public, List, getAxesAtBottom, (, ), {, return]
[}, public, List, getAxesAtBottom, (, ), {, return, this, ., axesAtBottom, ;, }, public, List, getAxesAtLeft, (, ), {, return]
[}, public, List, getAxesAtBottom, (, ), {, return, this, ., axesAtBottom, ;, }, public, List, getAxesAtLeft, (, ), {, return]
[}, public, List, getAxesAtLeft, (, ), {, return, this, ., axesAtLeft, ;, }, public, List, getAxesAtRight, (, ), {, return]
[}, public, List, getAxesAtLeft, (, ), {, return, this, ., axesAtLeft, ;, }, public, List, getAxesAtRight, (, ), {, return]
[{, return, this, ., axesAtRight, ;, }, public, void, add, (, Axis, axis, ,, RectangleEdge, edge, ), {, if, (]
[{, return, this, ., axesAtRight, ;, }, public, void, add, (, Axis, axis, ,, RectangleEdge, edge, ), {, if, (]
[this, ., axesAtRight, ;, }, public, void, add, (, Axis, axis, ,, RectangleEdge, edge, ), {, if, (, axis, ==]
[}, public, void, add, (, Axis, axis, ,, RectangleEdge, edge, ), {, if, (, axis, ==, null, ), {, throw]
[add, (, Axis, axis, ,, RectangleEdge, edge, ), {, if, (, axis, ==, null, ), {, throw, new, IllegalArgumentException, (]
[edge, ), {, if, (, axis, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'axis' argument.", ), ;, }, if, (]
[edge, ), {, if, (, axis, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'axis' argument.", ), ;, }, if, (]
[{, if, (, axis, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'axis' argument.", ), ;, }, if, (, edge, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'axis' argument.", ), ;, }, if, (, edge, ==, null, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'axis' argument.", ), ;, }, if, (, edge, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ;, }, if, (, edge, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'edge' argument.", ), ;, }, if, (]
[), ;, }, if, (, edge, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'edge' argument.", ), ;, }, if, (]
[}, if, (, edge, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'edge' argument.", ), ;, }, if, (, edge, ==]
[}, if, (, edge, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'edge' argument.", ), ;, }, if, (, edge, ==]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'edge' argument.", ), ;, }, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'edge' argument.", ), ;, }, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'edge' argument.", ), ;, }, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[(, "Null 'edge' argument.", ), ;, }, if, (, edge, ==, RectangleEdge, ., TOP, ), {, this, ., axesAtTop, ., add, (]
[edge, ==, RectangleEdge, ., TOP, ), {, this, ., axesAtTop, ., add, (, axis, ), ;, }, else, if, (]
[edge, ==, RectangleEdge, ., TOP, ), {, this, ., axesAtTop, ., add, (, axis, ), ;, }, else, if, (]
[RectangleEdge, ., TOP, ), {, this, ., axesAtTop, ., add, (, axis, ), ;, }, else, if, (, edge, ==]
[RectangleEdge, ., TOP, ), {, this, ., axesAtTop, ., add, (, axis, ), ;, }, else, if, (, edge, ==]
[this, ., axesAtTop, ., add, (, axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[this, ., axesAtTop, ., add, (, axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[this, ., axesAtTop, ., add, (, axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, this, ., axesAtBottom, ., add, (]
[edge, ==, RectangleEdge, ., BOTTOM, ), {, this, ., axesAtBottom, ., add, (, axis, ), ;, }, else, if, (]
[edge, ==, RectangleEdge, ., BOTTOM, ), {, this, ., axesAtBottom, ., add, (, axis, ), ;, }, else, if, (]
[RectangleEdge, ., BOTTOM, ), {, this, ., axesAtBottom, ., add, (, axis, ), ;, }, else, if, (, edge, ==]
[RectangleEdge, ., BOTTOM, ), {, this, ., axesAtBottom, ., add, (, axis, ), ;, }, else, if, (, edge, ==]
[this, ., axesAtBottom, ., add, (, axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[this, ., axesAtBottom, ., add, (, axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[this, ., axesAtBottom, ., add, (, axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, this, ., axesAtLeft, ., add, (]
[edge, ==, RectangleEdge, ., LEFT, ), {, this, ., axesAtLeft, ., add, (, axis, ), ;, }, else, if, (]
[edge, ==, RectangleEdge, ., LEFT, ), {, this, ., axesAtLeft, ., add, (, axis, ), ;, }, else, if, (]
[RectangleEdge, ., LEFT, ), {, this, ., axesAtLeft, ., add, (, axis, ), ;, }, else, if, (, edge, ==]
[RectangleEdge, ., LEFT, ), {, this, ., axesAtLeft, ., add, (, axis, ), ;, }, else, if, (, edge, ==]
[this, ., axesAtLeft, ., add, (, axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[this, ., axesAtLeft, ., add, (, axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[this, ., axesAtLeft, ., add, (, axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[axis, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, this, ., axesAtRight, ., add, (]
