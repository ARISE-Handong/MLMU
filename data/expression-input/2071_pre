[rhino, ., Node, ;, class, ReorderConstantExpression, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (]
[rhino, ., Node, ;, class, ReorderConstantExpression, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (]
[rhino, ., Node, ;, class, ReorderConstantExpression, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (]
[class, ReorderConstantExpression, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, NodeUtil, ., isSymmetricOperation, (]
[AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, NodeUtil, ., isSymmetricOperation, (, subtree, ), ||]
[AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, NodeUtil, ., isSymmetricOperation, (, subtree, ), ||]
[Node, optimizeSubtree, (, Node, subtree, ), {, if, (, NodeUtil, ., isSymmetricOperation, (, subtree, ), ||, NodeUtil, ., isRelationalOperation, (]
[{, if, (, NodeUtil, ., isSymmetricOperation, (, subtree, ), ||, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, if, (]
[{, if, (, NodeUtil, ., isSymmetricOperation, (, subtree, ), ||, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, if, (]
[{, if, (, NodeUtil, ., isSymmetricOperation, (, subtree, ), ||, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, if, (]
[., isSymmetricOperation, (, subtree, ), ||, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, if, (, NodeUtil, ., isImmutableValue, (]
[., isSymmetricOperation, (, subtree, ), ||, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, if, (, NodeUtil, ., isImmutableValue, (]
[., isRelationalOperation, (, subtree, ), ), {, if, (, NodeUtil, ., isImmutableValue, (, subtree, ., getLastChild, (, ), ), &&]
[isRelationalOperation, (, subtree, ), ), {, if, (, NodeUtil, ., isImmutableValue, (, subtree, ., getLastChild, (, ), ), &&, !]
[isRelationalOperation, (, subtree, ), ), {, if, (, NodeUtil, ., isImmutableValue, (, subtree, ., getLastChild, (, ), ), &&, !]
[), {, if, (, NodeUtil, ., isImmutableValue, (, subtree, ., getLastChild, (, ), ), &&, !, NodeUtil, ., isImmutableValue, (]
[), {, if, (, NodeUtil, ., isImmutableValue, (, subtree, ., getLastChild, (, ), ), &&, !, NodeUtil, ., isImmutableValue, (]
[getLastChild, (, ), ), &&, !, NodeUtil, ., isImmutableValue, (, subtree, ., getFirstChild, (, ), ), ), {, if, (]
[getLastChild, (, ), ), &&, !, NodeUtil, ., isImmutableValue, (, subtree, ., getFirstChild, (, ), ), ), {, if, (]
[&&, !, NodeUtil, ., isImmutableValue, (, subtree, ., getFirstChild, (, ), ), ), {, if, (, NodeUtil, ., isRelationalOperation, (]
[., getFirstChild, (, ), ), ), {, if, (, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =]
[., getFirstChild, (, ), ), ), {, if, (, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =]
[), ), {, if, (, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (]
[), ), {, if, (, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (]
[isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (, subtree, ., getType, (, ), ), ;]
[isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (, subtree, ., getType, (, ), ), ;]
[), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (, subtree, ., getType, (, ), ), ;, subtree, ., setType, (]
[getInverseOperator, (, subtree, ., getType, (, ), ), ;, subtree, ., setType, (, inverseOperator, ), ;, }, Node, firstNode, =]
[getInverseOperator, (, subtree, ., getType, (, ), ), ;, subtree, ., setType, (, inverseOperator, ), ;, }, Node, firstNode, =]
[getInverseOperator, (, subtree, ., getType, (, ), ), ;, subtree, ., setType, (, inverseOperator, ), ;, }, Node, firstNode, =]
[inverseOperator, ), ;, }, Node, firstNode, =, subtree, ., getFirstChild, (, ), ., detachFromParent, (, ), ;, Node, lastNode, =]
[inverseOperator, ), ;, }, Node, firstNode, =, subtree, ., getFirstChild, (, ), ., detachFromParent, (, ), ;, Node, lastNode, =]
[inverseOperator, ), ;, }, Node, firstNode, =, subtree, ., getFirstChild, (, ), ., detachFromParent, (, ), ;, Node, lastNode, =]
[(, ), ., detachFromParent, (, ), ;, Node, lastNode, =, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;]
[(, ), ., detachFromParent, (, ), ;, Node, lastNode, =, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;]
[(, ), ;, Node, lastNode, =, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;, subtree, ., addChildrenToFront, (]
[Node, lastNode, =, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;, subtree, ., addChildrenToFront, (, lastNode, ), ;]
[Node, lastNode, =, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;, subtree, ., addChildrenToFront, (, lastNode, ), ;]
[., getLastChild, (, ), ., detachFromParent, (, ), ;, subtree, ., addChildrenToFront, (, lastNode, ), ;, subtree, ., addChildrenToBack, (]
[), ., detachFromParent, (, ), ;, subtree, ., addChildrenToFront, (, lastNode, ), ;, subtree, ., addChildrenToBack, (, firstNode, ), ;]
[., addChildrenToFront, (, lastNode, ), ;, subtree, ., addChildrenToBack, (, firstNode, ), ;, reportCodeChange, (, ), ;, }, }, return]
