[initialStep, ;, private, double, [, ], point, ;, @, Deprecated, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ), {, this, (]
[private, double, [, ], point, ;, @, Deprecated, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ), {, this, (, updateFormula, ,]
[), ), ;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (]
[;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (, updateFormula, ,]
[public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (, updateFormula, ,, checker, ,]
[updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (, updateFormula, ,, checker, ,, new, BrentSolver, (, ), ,]
[public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker, ,, final, UnivariateSolver, lineSearchSolver, ), {, this, (]
[(, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker, ,, final, UnivariateSolver, lineSearchSolver, ), {, this, (, updateFormula, ,]
[ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker, ,, final, UnivariateSolver, lineSearchSolver, ), {, this, (, updateFormula, ,, checker, ,]
[,, ConvergenceChecker, <, PointValuePair, >, checker, ,, final, UnivariateSolver, lineSearchSolver, ), {, this, (, updateFormula, ,, checker, ,, lineSearchSolver, ,]
[ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker, ,, final, UnivariateSolver, lineSearchSolver, ,, final, Preconditioner, preconditioner, ), {, super, (]
[ConvergenceChecker, <, PointValuePair, >, checker, ,, final, UnivariateSolver, lineSearchSolver, ,, final, Preconditioner, preconditioner, ), {, super, (, checker, ), ;]
[ConvergenceChecker, <, PointValuePair, >, checker, ,, final, UnivariateSolver, lineSearchSolver, ,, final, Preconditioner, preconditioner, ), {, super, (, checker, ), ;]
[checker, ,, final, UnivariateSolver, lineSearchSolver, ,, final, Preconditioner, preconditioner, ), {, super, (, checker, ), ;, this, ., updateFormula, =]
[final, UnivariateSolver, lineSearchSolver, ,, final, Preconditioner, preconditioner, ), {, super, (, checker, ), ;, this, ., updateFormula, =, updateFormula, ;]
[lineSearchSolver, ,, final, Preconditioner, preconditioner, ), {, super, (, checker, ), ;, this, ., updateFormula, =, updateFormula, ;, solver, =]
[final, Preconditioner, preconditioner, ), {, super, (, checker, ), ;, this, ., updateFormula, =, updateFormula, ;, solver, =, lineSearchSolver, ;]
[final, Preconditioner, preconditioner, ), {, super, (, checker, ), ;, this, ., updateFormula, =, updateFormula, ;, solver, =, lineSearchSolver, ;]
[{, super, (, checker, ), ;, this, ., updateFormula, =, updateFormula, ;, solver, =, lineSearchSolver, ;, this, ., preconditioner, =]
[(, checker, ), ;, this, ., updateFormula, =, updateFormula, ;, solver, =, lineSearchSolver, ;, this, ., preconditioner, =, preconditioner, ;]
[), ;, this, ., updateFormula, =, updateFormula, ;, solver, =, lineSearchSolver, ;, this, ., preconditioner, =, preconditioner, ;, initialStep, =]
[preconditioner, =, preconditioner, ;, initialStep, =, 1.0, ;, }, public, void, setInitialStep, (, final, double, initialStep, ), {, if, (]
[preconditioner, =, preconditioner, ;, initialStep, =, 1.0, ;, }, public, void, setInitialStep, (, final, double, initialStep, ), {, if, (]
[preconditioner, ;, initialStep, =, 1.0, ;, }, public, void, setInitialStep, (, final, double, initialStep, ), {, if, (, initialStep, <=]
[=, 1.0, ;, }, public, void, setInitialStep, (, final, double, initialStep, ), {, if, (, initialStep, <=, 0, ), {]
[=, 1.0, ;, }, public, void, setInitialStep, (, final, double, initialStep, ), {, if, (, initialStep, <=, 0, ), {]
[public, void, setInitialStep, (, final, double, initialStep, ), {, if, (, initialStep, <=, 0, ), {, this, ., initialStep, =]
[double, initialStep, ), {, if, (, initialStep, <=, 0, ), {, this, ., initialStep, =, 1.0, ;, }, else, {]
[double, initialStep, ), {, if, (, initialStep, <=, 0, ), {, this, ., initialStep, =, 1.0, ;, }, else, {]
[if, (, initialStep, <=, 0, ), {, this, ., initialStep, =, 1.0, ;, }, else, {, this, ., initialStep, =]
[=, initialStep, ;, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, ConvergenceChecker, <, PointValuePair, >, checker, =]
[}, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;]
[Override, protected, PointValuePair, doOptimize, (, ), {, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, point, =]
[ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, point, =, getStartPoint, (, ), ;, final, GoalType, goal, =]
[), ;, point, =, getStartPoint, (, ), ;, final, GoalType, goal, =, getGoalType, (, ), ;, final, int, n, =]
[), ;, point, =, getStartPoint, (, ), ;, final, GoalType, goal, =, getGoalType, (, ), ;, final, int, n, =]
[GoalType, goal, =, getGoalType, (, ), ;, final, int, n, =, point, ., length, ;, double, [, ], r, =]
[=, getGoalType, (, ), ;, final, int, n, =, point, ., length, ;, double, [, ], r, =, computeObjectiveGradient, (]
[final, int, n, =, point, ., length, ;, double, [, ], r, =, computeObjectiveGradient, (, point, ), ;, if, (]
[final, int, n, =, point, ., length, ;, double, [, ], r, =, computeObjectiveGradient, (, point, ), ;, if, (]
[n, =, point, ., length, ;, double, [, ], r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==]
[n, =, point, ., length, ;, double, [, ], r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==]
[=, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =]
[(, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;]
[(, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;]
[), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[(, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, []
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i, ], =]
[(, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i, ], =, -]
[(, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i, ], =, -]
[i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i, ], =, -, r, []
[), {, r, [, i, ], =, -, r, [, i, ], ;, }, }, double, [, ], steepestDescent, =]
[), {, r, [, i, ], =, -, r, [, i, ], ;, }, }, double, [, ], steepestDescent, =]
[i, ], =, -, r, [, i, ], ;, }, }, double, [, ], steepestDescent, =, preconditioner, ., precondition, (]
[=, -, r, [, i, ], ;, }, }, double, [, ], steepestDescent, =, preconditioner, ., precondition, (, point, ,]
[}, double, [, ], steepestDescent, =, preconditioner, ., precondition, (, point, ,, r, ), ;, double, [, ], searchDirection, =]
[}, double, [, ], steepestDescent, =, preconditioner, ., precondition, (, point, ,, r, ), ;, double, [, ], searchDirection, =]
[(, point, ,, r, ), ;, double, [, ], searchDirection, =, steepestDescent, ., clone, (, ), ;, double, delta, =]
[[, ], searchDirection, =, steepestDescent, ., clone, (, ), ;, double, delta, =, 0, ;, for, (, int, i, =]
[searchDirection, =, steepestDescent, ., clone, (, ), ;, double, delta, =, 0, ;, for, (, int, i, =, 0, ;]
[searchDirection, =, steepestDescent, ., clone, (, ), ;, double, delta, =, 0, ;, for, (, int, i, =, 0, ;]
[steepestDescent, ., clone, (, ), ;, double, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[clone, (, ), ;, double, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[(, ), ;, double, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[double, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=, r, []
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=, r, [, i, ], *]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=, r, [, i, ], *]
[=, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=, r, [, i, ], *, searchDirection, []
[++, i, ), {, delta, +=, r, [, i, ], *, searchDirection, [, i, ], ;, }, PointValuePair, current, =]
[+=, r, [, i, ], *, searchDirection, [, i, ], ;, }, PointValuePair, current, =, null, ;, int, iter, =]
[*, searchDirection, [, i, ], ;, }, PointValuePair, current, =, null, ;, int, iter, =, 0, ;, int, maxEval, =]
[}, PointValuePair, current, =, null, ;, int, iter, =, 0, ;, int, maxEval, =, getMaxEvaluations, (, ), ;, while, (]
[=, null, ;, int, iter, =, 0, ;, int, maxEval, =, getMaxEvaluations, (, ), ;, while, (, true, ), {]
[null, ;, int, iter, =, 0, ;, int, maxEval, =, getMaxEvaluations, (, ), ;, while, (, true, ), {, ++]
[;, int, maxEval, =, getMaxEvaluations, (, ), ;, while, (, true, ), {, ++, iter, ;, final, double, objective, =]
[maxEval, =, getMaxEvaluations, (, ), ;, while, (, true, ), {, ++, iter, ;, final, double, objective, =, computeObjectiveValue, (]
[while, (, true, ), {, ++, iter, ;, final, double, objective, =, computeObjectiveValue, (, point, ), ;, PointValuePair, previous, =]
[true, ), {, ++, iter, ;, final, double, objective, =, computeObjectiveValue, (, point, ), ;, PointValuePair, previous, =, current, ;]
[{, ++, iter, ;, final, double, objective, =, computeObjectiveValue, (, point, ), ;, PointValuePair, previous, =, current, ;, current, =]
[;, final, double, objective, =, computeObjectiveValue, (, point, ), ;, PointValuePair, previous, =, current, ;, current, =, new, PointValuePair, (]
[double, objective, =, computeObjectiveValue, (, point, ), ;, PointValuePair, previous, =, current, ;, current, =, new, PointValuePair, (, point, ,]
[point, ), ;, PointValuePair, previous, =, current, ;, current, =, new, PointValuePair, (, point, ,, objective, ), ;, if, (]
[point, ), ;, PointValuePair, previous, =, current, ;, current, =, new, PointValuePair, (, point, ,, objective, ), ;, if, (]
[point, ), ;, PointValuePair, previous, =, current, ;, current, =, new, PointValuePair, (, point, ,, objective, ), ;, if, (]
[;, PointValuePair, previous, =, current, ;, current, =, new, PointValuePair, (, point, ,, objective, ), ;, if, (, previous, !=]
[previous, =, current, ;, current, =, new, PointValuePair, (, point, ,, objective, ), ;, if, (, previous, !=, null, &&]
[previous, =, current, ;, current, =, new, PointValuePair, (, point, ,, objective, ), ;, if, (, previous, !=, null, &&]
[current, =, new, PointValuePair, (, point, ,, objective, ), ;, if, (, previous, !=, null, &&, checker, ., converged, (]
[new, PointValuePair, (, point, ,, objective, ), ;, if, (, previous, !=, null, &&, checker, ., converged, (, iter, ,]
[(, point, ,, objective, ), ;, if, (, previous, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,]
[;, if, (, previous, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return]
[checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return, current, ;, }, final, UnivariateFunction, lsf, =]
[(, iter, ,, previous, ,, current, ), ), {, return, current, ;, }, final, UnivariateFunction, lsf, =, new, LineSearchFunction, (]
[), {, return, current, ;, }, final, UnivariateFunction, lsf, =, new, LineSearchFunction, (, searchDirection, ), ;, final, double, uB, =]
[return, current, ;, }, final, UnivariateFunction, lsf, =, new, LineSearchFunction, (, searchDirection, ), ;, final, double, uB, =, findUpperBound, (]
[;, }, final, UnivariateFunction, lsf, =, new, LineSearchFunction, (, searchDirection, ), ;, final, double, uB, =, findUpperBound, (, lsf, ,]
[final, UnivariateFunction, lsf, =, new, LineSearchFunction, (, searchDirection, ), ;, final, double, uB, =, findUpperBound, (, lsf, ,, 0, ,]
[searchDirection, ), ;, final, double, uB, =, findUpperBound, (, lsf, ,, 0, ,, initialStep, ), ;, final, double, step, =]
[searchDirection, ), ;, final, double, uB, =, findUpperBound, (, lsf, ,, 0, ,, initialStep, ), ;, final, double, step, =]
[double, uB, =, findUpperBound, (, lsf, ,, 0, ,, initialStep, ), ;, final, double, step, =, solver, ., solve, (]
[=, findUpperBound, (, lsf, ,, 0, ,, initialStep, ), ;, final, double, step, =, solver, ., solve, (, maxEval, ,]
[(, lsf, ,, 0, ,, initialStep, ), ;, final, double, step, =, solver, ., solve, (, maxEval, ,, lsf, ,]
[,, 0, ,, initialStep, ), ;, final, double, step, =, solver, ., solve, (, maxEval, ,, lsf, ,, 0, ,]
[,, initialStep, ), ;, final, double, step, =, solver, ., solve, (, maxEval, ,, lsf, ,, 0, ,, uB, ,]
[;, final, double, step, =, solver, ., solve, (, maxEval, ,, lsf, ,, 0, ,, uB, ,, 1e-15, ), ;]
[double, step, =, solver, ., solve, (, maxEval, ,, lsf, ,, 0, ,, uB, ,, 1e-15, ), ;, maxEval, -=]
[double, step, =, solver, ., solve, (, maxEval, ,, lsf, ,, 0, ,, uB, ,, 1e-15, ), ;, maxEval, -=]
[0, ,, uB, ,, 1e-15, ), ;, maxEval, -=, solver, ., getEvaluations, (, ), ;, for, (, int, i, =]
[uB, ,, 1e-15, ), ;, maxEval, -=, solver, ., getEvaluations, (, ), ;, for, (, int, i, =, 0, ;]
[uB, ,, 1e-15, ), ;, maxEval, -=, solver, ., getEvaluations, (, ), ;, for, (, int, i, =, 0, ;]
[1e-15, ), ;, maxEval, -=, solver, ., getEvaluations, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[1e-15, ), ;, maxEval, -=, solver, ., getEvaluations, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[-=, solver, ., getEvaluations, (, ), ;, for, (, int, i, =, 0, ;, i, <, point, ., length, ;]
[solver, ., getEvaluations, (, ), ;, for, (, int, i, =, 0, ;, i, <, point, ., length, ;, ++]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, point, ., length, ;, ++, i, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, point, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, point, ., length, ;, ++, i, ), {, point, []
[int, i, =, 0, ;, i, <, point, ., length, ;, ++, i, ), {, point, [, i, ], +=]
[int, i, =, 0, ;, i, <, point, ., length, ;, ++, i, ), {, point, [, i, ], +=]
[=, 0, ;, i, <, point, ., length, ;, ++, i, ), {, point, [, i, ], +=, step, *]
[=, 0, ;, i, <, point, ., length, ;, ++, i, ), {, point, [, i, ], +=, step, *]
[;, i, <, point, ., length, ;, ++, i, ), {, point, [, i, ], +=, step, *, searchDirection, []
[., length, ;, ++, i, ), {, point, [, i, ], +=, step, *, searchDirection, [, i, ], ;, }]
[;, ++, i, ), {, point, [, i, ], +=, step, *, searchDirection, [, i, ], ;, }, r, =]
[i, ), {, point, [, i, ], +=, step, *, searchDirection, [, i, ], ;, }, r, =, computeObjectiveGradient, (]
[i, ], +=, step, *, searchDirection, [, i, ], ;, }, r, =, computeObjectiveGradient, (, point, ), ;, if, (]
[i, ], +=, step, *, searchDirection, [, i, ], ;, }, r, =, computeObjectiveGradient, (, point, ), ;, if, (]
[+=, step, *, searchDirection, [, i, ], ;, }, r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==]
[+=, step, *, searchDirection, [, i, ], ;, }, r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==]
[=, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =]
[(, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;]
[(, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;]
[), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[(, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, []
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i, ], =]
[(, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i, ], =, -]
[(, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i, ], =, -]
[i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i, ], =, -, r, []
[i, ), {, r, [, i, ], =, -, r, [, i, ], ;, }, }, final, double, deltaOld, =]
[-, r, [, i, ], ;, }, }, final, double, deltaOld, =, delta, ;, final, double, [, ], newSteepestDescent, =]
[-, r, [, i, ], ;, }, }, final, double, deltaOld, =, delta, ;, final, double, [, ], newSteepestDescent, =]
[], ;, }, }, final, double, deltaOld, =, delta, ;, final, double, [, ], newSteepestDescent, =, preconditioner, ., precondition, (]
[}, }, final, double, deltaOld, =, delta, ;, final, double, [, ], newSteepestDescent, =, preconditioner, ., precondition, (, point, ,]
[double, deltaOld, =, delta, ;, final, double, [, ], newSteepestDescent, =, preconditioner, ., precondition, (, point, ,, r, ), ;]
[=, delta, ;, final, double, [, ], newSteepestDescent, =, preconditioner, ., precondition, (, point, ,, r, ), ;, delta, =]
[newSteepestDescent, =, preconditioner, ., precondition, (, point, ,, r, ), ;, delta, =, 0, ;, for, (, int, i, =]
[preconditioner, ., precondition, (, point, ,, r, ), ;, delta, =, 0, ;, for, (, int, i, =, 0, ;]
[preconditioner, ., precondition, (, point, ,, r, ), ;, delta, =, 0, ;, for, (, int, i, =, 0, ;]
[precondition, (, point, ,, r, ), ;, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[point, ,, r, ), ;, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[,, r, ), ;, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[;, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=, r, []
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=, r, [, i, ], *]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=, r, [, i, ], *]
[=, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=, r, [, i, ], *, newSteepestDescent, []
[{, delta, +=, r, [, i, ], *, newSteepestDescent, [, i, ], ;, }, final, double, beta, ;, if, (]
[{, delta, +=, r, [, i, ], *, newSteepestDescent, [, i, ], ;, }, final, double, beta, ;, if, (]
[+=, r, [, i, ], *, newSteepestDescent, [, i, ], ;, }, final, double, beta, ;, if, (, updateFormula, ==]
[+=, r, [, i, ], *, newSteepestDescent, [, i, ], ;, }, final, double, beta, ;, if, (, updateFormula, ==]
[*, newSteepestDescent, [, i, ], ;, }, final, double, beta, ;, if, (, updateFormula, ==, ConjugateGradientFormula, ., FLETCHER_REEVES, ), {]
[[, i, ], ;, }, final, double, beta, ;, if, (, updateFormula, ==, ConjugateGradientFormula, ., FLETCHER_REEVES, ), {, beta, =]
[[, i, ], ;, }, final, double, beta, ;, if, (, updateFormula, ==, ConjugateGradientFormula, ., FLETCHER_REEVES, ), {, beta, =]
[], ;, }, final, double, beta, ;, if, (, updateFormula, ==, ConjugateGradientFormula, ., FLETCHER_REEVES, ), {, beta, =, delta, /]
[(, updateFormula, ==, ConjugateGradientFormula, ., FLETCHER_REEVES, ), {, beta, =, delta, /, deltaOld, ;, }, else, {, double, deltaMid, =]
[{, beta, =, delta, /, deltaOld, ;, }, else, {, double, deltaMid, =, 0, ;, for, (, int, i, =]
[=, delta, /, deltaOld, ;, }, else, {, double, deltaMid, =, 0, ;, for, (, int, i, =, 0, ;]
[=, delta, /, deltaOld, ;, }, else, {, double, deltaMid, =, 0, ;, for, (, int, i, =, 0, ;]
[/, deltaOld, ;, }, else, {, double, deltaMid, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[/, deltaOld, ;, }, else, {, double, deltaMid, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[else, {, double, deltaMid, =, 0, ;, for, (, int, i, =, 0, ;, i, <, r, ., length, ;]
[{, double, deltaMid, =, 0, ;, for, (, int, i, =, 0, ;, i, <, r, ., length, ;, ++]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, r, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, r, ., length, ;, ++, i, ), {, deltaMid, +=]
[;, for, (, int, i, =, 0, ;, i, <, r, ., length, ;, ++, i, ), {, deltaMid, +=]
[;, for, (, int, i, =, 0, ;, i, <, r, ., length, ;, ++, i, ), {, deltaMid, +=]
[(, int, i, =, 0, ;, i, <, r, ., length, ;, ++, i, ), {, deltaMid, +=, r, []
[=, 0, ;, i, <, r, ., length, ;, ++, i, ), {, deltaMid, +=, r, [, i, ], *]
[=, 0, ;, i, <, r, ., length, ;, ++, i, ), {, deltaMid, +=, r, [, i, ], *]
[;, i, <, r, ., length, ;, ++, i, ), {, deltaMid, +=, r, [, i, ], *, steepestDescent, []
[., length, ;, ++, i, ), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ], ;, }]
[;, ++, i, ), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ], ;, }, beta, =]
[;, ++, i, ), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ], ;, }, beta, =]
[++, i, ), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ], ;, }, beta, =, (]
[++, i, ), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ], ;, }, beta, =, (]
[), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ], ;, }, beta, =, (, delta, -]
[+=, r, [, i, ], *, steepestDescent, [, i, ], ;, }, beta, =, (, delta, -, deltaMid, ), /]
[i, ], *, steepestDescent, [, i, ], ;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }]
[*, steepestDescent, [, i, ], ;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =]
[], ;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (]
[], ;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (]
[], ;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (]
[], ;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (]
[}, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %]
[=, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==]
[delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||]
[delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||]
[deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||, beta, <]
[deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||, beta, <, 0, ), {]
[}, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||, beta, <, 0, ), {, searchDirection, =]
[}, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||, beta, <, 0, ), {, searchDirection, =]
[<, 0, ), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int, i, =]
[), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int, i, =, 0, ;]
[), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int, i, =, 0, ;]
[searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <]
[steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;]
[., clone, (, ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[}, else, {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, searchDirection, []
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, searchDirection, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, searchDirection, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, searchDirection, [, i, ], =]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, searchDirection, [, i, ], =, steepestDescent, []
[0, ;, i, <, n, ;, ++, i, ), {, searchDirection, [, i, ], =, steepestDescent, [, i, ], +]
[0, ;, i, <, n, ;, ++, i, ), {, searchDirection, [, i, ], =, steepestDescent, [, i, ], +]
[i, <, n, ;, ++, i, ), {, searchDirection, [, i, ], =, steepestDescent, [, i, ], +, beta, *]
[i, <, n, ;, ++, i, ), {, searchDirection, [, i, ], =, steepestDescent, [, i, ], +, beta, *]
[n, ;, ++, i, ), {, searchDirection, [, i, ], =, steepestDescent, [, i, ], +, beta, *, searchDirection, []
[double, findUpperBound, (, final, UnivariateFunction, f, ,, final, double, a, ,, final, double, h, ), {, final, double, yA, =]
[double, findUpperBound, (, final, UnivariateFunction, f, ,, final, double, a, ,, final, double, h, ), {, final, double, yA, =]
[UnivariateFunction, f, ,, final, double, a, ,, final, double, h, ), {, final, double, yA, =, f, ., value, (]
[,, final, double, h, ), {, final, double, yA, =, f, ., value, (, a, ), ;, double, yB, =]
[double, yA, =, f, ., value, (, a, ), ;, double, yB, =, yA, ;, for, (, double, step, =]
[=, f, ., value, (, a, ), ;, double, yB, =, yA, ;, for, (, double, step, =, h, ;]
[=, f, ., value, (, a, ), ;, double, yB, =, yA, ;, for, (, double, step, =, h, ;]
[., value, (, a, ), ;, double, yB, =, yA, ;, for, (, double, step, =, h, ;, step, <]
[., value, (, a, ), ;, double, yB, =, yA, ;, for, (, double, step, =, h, ;, step, <]
[), ;, double, yB, =, yA, ;, for, (, double, step, =, h, ;, step, <, Double, ., MAX_VALUE, ;]
[double, yB, =, yA, ;, for, (, double, step, =, h, ;, step, <, Double, ., MAX_VALUE, ;, step, *=]
[double, yB, =, yA, ;, for, (, double, step, =, h, ;, step, <, Double, ., MAX_VALUE, ;, step, *=]
[;, for, (, double, step, =, h, ;, step, <, Double, ., MAX_VALUE, ;, step, *=, FastMath, ., max, (]
[(, double, step, =, h, ;, step, <, Double, ., MAX_VALUE, ;, step, *=, FastMath, ., max, (, 2, ,]
[(, double, step, =, h, ;, step, <, Double, ., MAX_VALUE, ;, step, *=, FastMath, ., max, (, 2, ,]
[step, =, h, ;, step, <, Double, ., MAX_VALUE, ;, step, *=, FastMath, ., max, (, 2, ,, yA, /]
[MAX_VALUE, ;, step, *=, FastMath, ., max, (, 2, ,, yA, /, yB, ), ), {, final, double, b, =]
[MAX_VALUE, ;, step, *=, FastMath, ., max, (, 2, ,, yA, /, yB, ), ), {, final, double, b, =]
[step, *=, FastMath, ., max, (, 2, ,, yA, /, yB, ), ), {, final, double, b, =, a, +]
[FastMath, ., max, (, 2, ,, yA, /, yB, ), ), {, final, double, b, =, a, +, step, ;]
[max, (, 2, ,, yA, /, yB, ), ), {, final, double, b, =, a, +, step, ;, yB, =]
[max, (, 2, ,, yA, /, yB, ), ), {, final, double, b, =, a, +, step, ;, yB, =]
[yA, /, yB, ), ), {, final, double, b, =, a, +, step, ;, yB, =, f, ., value, (]
[{, final, double, b, =, a, +, step, ;, yB, =, f, ., value, (, b, ), ;, if, (]
[{, final, double, b, =, a, +, step, ;, yB, =, f, ., value, (, b, ), ;, if, (]
[{, final, double, b, =, a, +, step, ;, yB, =, f, ., value, (, b, ), ;, if, (]
[double, b, =, a, +, step, ;, yB, =, f, ., value, (, b, ), ;, if, (, yA, *]
[=, a, +, step, ;, yB, =, f, ., value, (, b, ), ;, if, (, yA, *, yB, <=]
[;, yB, =, f, ., value, (, b, ), ;, if, (, yA, *, yB, <=, 0, ), {, return]
[value, (, b, ), ;, if, (, yA, *, yB, <=, 0, ), {, return, b, ;, }, }, throw]
[), ;, if, (, yA, *, yB, <=, 0, ), {, return, b, ;, }, }, throw, new, MathIllegalStateException, (]
[), ;, if, (, yA, *, yB, <=, 0, ), {, return, b, ;, }, }, throw, new, MathIllegalStateException, (]
[Preconditioner, {, public, double, [, ], precondition, (, double, [, ], variables, ,, double, [, ], r, ), {, return]
[Preconditioner, {, public, double, [, ], precondition, (, double, [, ], variables, ,, double, [, ], r, ), {, return]
[implements, UnivariateFunction, {, private, final, double, [, ], searchDirection, ;, public, LineSearchFunction, (, final, double, [, ], searchDirection, ), {]
[implements, UnivariateFunction, {, private, final, double, [, ], searchDirection, ;, public, LineSearchFunction, (, final, double, [, ], searchDirection, ), {]
[final, double, [, ], searchDirection, ;, public, LineSearchFunction, (, final, double, [, ], searchDirection, ), {, this, ., searchDirection, =]
[., searchDirection, =, searchDirection, ;, }, public, double, value, (, double, x, ), {, final, double, [, ], shiftedPoint, =]
[., searchDirection, =, searchDirection, ;, }, public, double, value, (, double, x, ), {, final, double, [, ], shiftedPoint, =]
[x, ), {, final, double, [, ], shiftedPoint, =, point, ., clone, (, ), ;, for, (, int, i, =]
[{, final, double, [, ], shiftedPoint, =, point, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[{, final, double, [, ], shiftedPoint, =, point, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[double, [, ], shiftedPoint, =, point, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], shiftedPoint, =, point, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, point, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, shiftedPoint, ., length, ;]
[point, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, shiftedPoint, ., length, ;, ++]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, shiftedPoint, ., length, ;, ++, i, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, shiftedPoint, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, shiftedPoint, ., length, ;, ++, i, ), {, shiftedPoint, []
[int, i, =, 0, ;, i, <, shiftedPoint, ., length, ;, ++, i, ), {, shiftedPoint, [, i, ], +=]
[int, i, =, 0, ;, i, <, shiftedPoint, ., length, ;, ++, i, ), {, shiftedPoint, [, i, ], +=]
[=, 0, ;, i, <, shiftedPoint, ., length, ;, ++, i, ), {, shiftedPoint, [, i, ], +=, x, *]
[=, 0, ;, i, <, shiftedPoint, ., length, ;, ++, i, ), {, shiftedPoint, [, i, ], +=, x, *]
[;, i, <, shiftedPoint, ., length, ;, ++, i, ), {, shiftedPoint, [, i, ], +=, x, *, searchDirection, []
[{, shiftedPoint, [, i, ], +=, x, *, searchDirection, [, i, ], ;, }, final, double, [, ], gradient, =]
[[, i, ], +=, x, *, searchDirection, [, i, ], ;, }, final, double, [, ], gradient, =, computeObjectiveGradient, (]
[searchDirection, [, i, ], ;, }, final, double, [, ], gradient, =, computeObjectiveGradient, (, shiftedPoint, ), ;, double, dotProduct, =]
[double, [, ], gradient, =, computeObjectiveGradient, (, shiftedPoint, ), ;, double, dotProduct, =, 0, ;, for, (, int, i, =]
[], gradient, =, computeObjectiveGradient, (, shiftedPoint, ), ;, double, dotProduct, =, 0, ;, for, (, int, i, =, 0, ;]
[], gradient, =, computeObjectiveGradient, (, shiftedPoint, ), ;, double, dotProduct, =, 0, ;, for, (, int, i, =, 0, ;]
[=, computeObjectiveGradient, (, shiftedPoint, ), ;, double, dotProduct, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[=, computeObjectiveGradient, (, shiftedPoint, ), ;, double, dotProduct, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, double, dotProduct, =, 0, ;, for, (, int, i, =, 0, ;, i, <, gradient, ., length, ;]
[;, double, dotProduct, =, 0, ;, for, (, int, i, =, 0, ;, i, <, gradient, ., length, ;, ++]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, gradient, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, gradient, ., length, ;, ++, i, ), {, dotProduct, +=]
[;, for, (, int, i, =, 0, ;, i, <, gradient, ., length, ;, ++, i, ), {, dotProduct, +=]
[;, for, (, int, i, =, 0, ;, i, <, gradient, ., length, ;, ++, i, ), {, dotProduct, +=]
[(, int, i, =, 0, ;, i, <, gradient, ., length, ;, ++, i, ), {, dotProduct, +=, gradient, []
[=, 0, ;, i, <, gradient, ., length, ;, ++, i, ), {, dotProduct, +=, gradient, [, i, ], *]
[=, 0, ;, i, <, gradient, ., length, ;, ++, i, ), {, dotProduct, +=, gradient, [, i, ], *]
[;, i, <, gradient, ., length, ;, ++, i, ), {, dotProduct, +=, gradient, [, i, ], *, searchDirection, []
[length, ;, ++, i, ), {, dotProduct, +=, gradient, [, i, ], *, searchDirection, [, i, ], ;, }, return]
