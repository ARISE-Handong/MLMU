[;, public, MullerSolver2, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, MullerSolver2, (, double, absoluteAccuracy, ), {, super]
[), ;, }, public, MullerSolver2, (, double, absoluteAccuracy, ), {, super, (, absoluteAccuracy, ), ;, }, public, MullerSolver2, (, double]
[), ;, }, public, MullerSolver2, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;]
[,, absoluteAccuracy, ), ;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final]
[), ;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, min]
[;, final, double, max, =, getMax, (, ), ;, verifyInterval, (, min, ,, max, ), ;, final, double, relativeAccuracy, =]
[;, verifyInterval, (, min, ,, max, ), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double, absoluteAccuracy, =]
[;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy]
[,, max, ), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;]
[), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double]
[;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, double, x0, =]
[;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, double, x0, =, min, ;, double, y0, =, computeObjectiveValue, (, x0]
[;, double, x0, =, min, ;, double, y0, =, computeObjectiveValue, (, x0, ), ;, if, (, FastMath, ., abs, (]
[;, double, y0, =, computeObjectiveValue, (, x0, ), ;, if, (, FastMath, ., abs, (, y0, ), <, functionValueAccuracy, )]
[;, if, (, FastMath, ., abs, (, y0, ), <, functionValueAccuracy, ), {, return, x0, ;, }, double, x1, =]
[), ;, if, (, FastMath, ., abs, (, y0, ), <, functionValueAccuracy, ), {, return, x0, ;, }, double, x1]
[), {, return, x0, ;, }, double, x1, =, max, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, if]
[<, functionValueAccuracy, ), {, return, x0, ;, }, double, x1, =, max, ;, double, y1, =, computeObjectiveValue, (, x1, )]
[., abs, (, y0, ), <, functionValueAccuracy, ), {, return, x0, ;, }, double, x1, =, max, ;, double, y1]
[), <, functionValueAccuracy, ), {, return, x0, ;, }, double, x1, =, max, ;, double, y1, =, computeObjectiveValue, (, x1]
[), {, return, x0, ;, }, double, x1, =, max, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, if]
[;, }, double, x1, =, max, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, if, (, FastMath, ., abs]
[;, double, y1, =, computeObjectiveValue, (, x1, ), ;, if, (, FastMath, ., abs, (, y1, ), <, functionValueAccuracy, )]
[;, if, (, FastMath, ., abs, (, y1, ), <, functionValueAccuracy, ), {, return, x1, ;, }, if, (, y0]
[), ;, if, (, FastMath, ., abs, (, y1, ), <, functionValueAccuracy, ), {, return, x1, ;, }, if, (]
[), {, return, x1, ;, }, if, (, y0, *, y1, >, 0, ), {, throw, new, NoBracketingException, (, x0]
[<, functionValueAccuracy, ), {, return, x1, ;, }, if, (, y0, *, y1, >, 0, ), {, throw, new, NoBracketingException]
[., abs, (, y1, ), <, functionValueAccuracy, ), {, return, x1, ;, }, if, (, y0, *, y1, >, 0]
[), <, functionValueAccuracy, ), {, return, x1, ;, }, if, (, y0, *, y1, >, 0, ), {, throw, new]
[), {, return, x1, ;, }, if, (, y0, *, y1, >, 0, ), {, throw, new, NoBracketingException, (, x0]
[;, }, if, (, y0, *, y1, >, 0, ), {, throw, new, NoBracketingException, (, x0, ,, x1, ,, y0]
[), {, throw, new, NoBracketingException, (, x0, ,, x1, ,, y0, ,, y1, ), ;, }, double, x2, =, 0.5]
[>, 0, ), {, throw, new, NoBracketingException, (, x0, ,, x1, ,, y0, ,, y1, ), ;, }, double, x2]
[*, y1, >, 0, ), {, throw, new, NoBracketingException, (, x0, ,, x1, ,, y0, ,, y1, ), ;, }]
[>, 0, ), {, throw, new, NoBracketingException, (, x0, ,, x1, ,, y0, ,, y1, ), ;, }, double, x2]
[), {, throw, new, NoBracketingException, (, x0, ,, x1, ,, y0, ,, y1, ), ;, }, double, x2, =, 0.5]
[;, }, double, x2, =, 0.5, *, (, x0, +, x1, ), ;, double, y2, =, computeObjectiveValue, (, x2, )]
[,, x1, ,, y0, ,, y1, ), ;, }, double, x2, =, 0.5, *, (, x0, +, x1, ), ;]
[,, y0, ,, y1, ), ;, }, double, x2, =, 0.5, *, (, x0, +, x1, ), ;, double, y2]
[,, y1, ), ;, }, double, x2, =, 0.5, *, (, x0, +, x1, ), ;, double, y2, =, computeObjectiveValue]
[), ;, }, double, x2, =, 0.5, *, (, x0, +, x1, ), ;, double, y2, =, computeObjectiveValue, (, x2]
[;, double, y2, =, computeObjectiveValue, (, x2, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, )]
[*, (, x0, +, x1, ), ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, double, oldx, =, Double, .]
[;, double, y2, =, computeObjectiveValue, (, x2, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, )]
[), ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true]
[+, x1, ), ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while]
[), ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true]
[;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =, (, x2, -]
[), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =, (, x2]
[;, while, (, true, ), {, final, double, q, =, (, x2, -, x1, ), /, (, x1, -, x0]
[., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =, (, x2, -, x1, ), /, (, x1]
[), {, final, double, q, =, (, x2, -, x1, ), /, (, x1, -, x0, ), ;, final, double]
[;, final, double, a, =, q, *, (, y2, -, (, 1, +, q, ), *, y1, +, q, *]
[/, (, x1, -, x0, ), ;, final, double, a, =, q, *, (, y2, -, (, 1, +, q]
[), /, (, x1, -, x0, ), ;, final, double, a, =, q, *, (, y2, -, (, 1, +]
[-, x1, ), /, (, x1, -, x0, ), ;, final, double, a, =, q, *, (, y2, -, (]
[), /, (, x1, -, x0, ), ;, final, double, a, =, q, *, (, y2, -, (, 1, +]
[;, final, double, a, =, q, *, (, y2, -, (, 1, +, q, ), *, y1, +, q, *]
[), ;, final, double, a, =, q, *, (, y2, -, (, 1, +, q, ), *, y1, +, q]
[-, x0, ), ;, final, double, a, =, q, *, (, y2, -, (, 1, +, q, ), *, y1]
[), ;, final, double, a, =, q, *, (, y2, -, (, 1, +, q, ), *, y1, +, q]
[;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (, 1, +, q, )]
[*, (, y2, -, (, 1, +, q, ), *, y1, +, q, *, y0, ), ;, final, double, b]
[;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (, 1, +, q, )]
[), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (, 1, +, q]
[+, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -]
[-, (, 1, +, q, ), *, y1, +, q, *, y0, ), ;, final, double, b, =, (, 2]
[+, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -]
[*, y1, +, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *]
[), *, y1, +, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, )]
[+, q, ), *, y1, +, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +]
[), *, y1, +, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, )]
[+, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -]
[), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (, 1, +, q]
[*, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (, 1]
[), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (, 1, +, q]
[;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =, b, *, b]
[+, q, *, q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final]
[-, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +, q, *, q, *, y0]
[*, y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +, q, *, q]
[), *, y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +, q, *]
[+, 1, ), *, y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +]
[*, q, +, 1, ), *, y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *]
[+, 1, ), *, y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +]
[), *, y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +, q, *]
[-, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +, q, *, q, *, y0]
[+, q, *, q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final]
[*, y1, +, q, *, q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *, y2]
[*, (, 1, +, q, ), *, y1, +, q, *, q, *, y0, ;, final, double, c, =, (]
[), *, (, 1, +, q, ), *, y1, +, q, *, q, *, y0, ;, final, double, c, =]
[+, q, ), *, (, 1, +, q, ), *, y1, +, q, *, q, *, y0, ;, final, double]
[), *, (, 1, +, q, ), *, y1, +, q, *, q, *, y0, ;, final, double, c, =]
[*, y1, +, q, *, q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *, y2]
[), *, y1, +, q, *, q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *]
[+, q, ), *, y1, +, q, *, q, *, y0, ;, final, double, c, =, (, 1, +, q]
[), *, y1, +, q, *, q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *]
[+, q, *, q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final]
[;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =, b, *, b]
[*, y0, ;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =, b]
[*, q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta]
[*, y0, ;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =, b]
[;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =, b, *, b]
[;, final, double, delta, =, b, *, b, -, 4, *, a, *, c, ;, double, x, ;, final, double]
[*, y2, ;, final, double, delta, =, b, *, b, -, 4, *, a, *, c, ;, double, x, ;]
[), *, y2, ;, final, double, delta, =, b, *, b, -, 4, *, a, *, c, ;, double, x]
[+, q, ), *, y2, ;, final, double, delta, =, b, *, b, -, 4, *, a, *, c, ;]
[), *, y2, ;, final, double, delta, =, b, *, b, -, 4, *, a, *, c, ;, double, x]
[;, final, double, delta, =, b, *, b, -, 4, *, a, *, c, ;, double, x, ;, final, double]
[;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, ), {, double, dplus, =, b, +]
[-, 4, *, a, *, c, ;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, )]
[*, b, -, 4, *, a, *, c, ;, double, x, ;, final, double, denominator, ;, if, (, delta, >=]
[-, 4, *, a, *, c, ;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, )]
[;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, ), {, double, dplus, =, b, +]
[*, c, ;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, ), {, double, dplus, =]
[*, a, *, c, ;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, ), {, double]
[*, c, ;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, ), {, double, dplus, =]
[;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, ), {, double, dplus, =, b, +]
[), {, double, dplus, =, b, +, FastMath, ., sqrt, (, delta, ), ;, double, dminus, =, b, -, FastMath]
[>=, 0.0, ), {, double, dplus, =, b, +, FastMath, ., sqrt, (, delta, ), ;, double, dminus, =, b]
[), {, double, dplus, =, b, +, FastMath, ., sqrt, (, delta, ), ;, double, dminus, =, b, -, FastMath]
[;, double, dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;, denominator, =, FastMath, ., abs, (, dplus]
[+, FastMath, ., sqrt, (, delta, ), ;, double, dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;]
[;, double, dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;, denominator, =, FastMath, ., abs, (, dplus]
[., sqrt, (, delta, ), ;, double, dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;, denominator, =]
[), ;, double, dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;, denominator, =, FastMath, ., abs, (]
[;, denominator, =, FastMath, ., abs, (, dplus, ), >, FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus]
[-, FastMath, ., sqrt, (, delta, ), ;, denominator, =, FastMath, ., abs, (, dplus, ), >, FastMath, ., abs]
[;, denominator, =, FastMath, ., abs, (, dplus, ), >, FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus]
[., sqrt, (, delta, ), ;, denominator, =, FastMath, ., abs, (, dplus, ), >, FastMath, ., abs, (, dminus]
[), ;, denominator, =, FastMath, ., abs, (, dplus, ), >, FastMath, ., abs, (, dminus, ), ?, dplus, :]
[=, FastMath, ., abs, (, dplus, ), >, FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus, ;, }]
[;, }, else, {, denominator, =, FastMath, ., sqrt, (, b, *, b, -, delta, ), ;, }, if, (]
[?, dplus, :, dminus, ;, }, else, {, denominator, =, FastMath, ., sqrt, (, b, *, b, -, delta, )]
[>, FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus, ;, }, else, {, denominator, =, FastMath, ., sqrt]
[., abs, (, dplus, ), >, FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus, ;, }, else, {]
[), >, FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus, ;, }, else, {, denominator, =, FastMath, .]
[?, dplus, :, dminus, ;, }, else, {, denominator, =, FastMath, ., sqrt, (, b, *, b, -, delta, )]
[., abs, (, dminus, ), ?, dplus, :, dminus, ;, }, else, {, denominator, =, FastMath, ., sqrt, (, b]
[), ?, dplus, :, dminus, ;, }, else, {, denominator, =, FastMath, ., sqrt, (, b, *, b, -, delta]
[:, dminus, ;, }, else, {, denominator, =, FastMath, ., sqrt, (, b, *, b, -, delta, ), ;, }]
[;, }, else, {, denominator, =, FastMath, ., sqrt, (, b, *, b, -, delta, ), ;, }, if, (]
[=, FastMath, ., sqrt, (, b, *, b, -, delta, ), ;, }, if, (, denominator, !=, 0, ), {]
[;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *, c, *, (, x2, -]
[., sqrt, (, b, *, b, -, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =]
[), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *, c, *, (, x2]
[-, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *, c, *]
[*, b, -, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *]
[-, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *, c, *]
[), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *, c, *, (, x2]
[), {, x, =, x2, -, 2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;, while, (]
[!=, 0, ), {, x, =, x2, -, 2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;]
[), {, x, =, x2, -, 2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;, while, (]
[=, x2, -, 2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;, while, (, x, ==, x1]
[;, while, (, x, ==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {]
[-, 2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;, while, (, x, ==, x1, ||, x]
[;, while, (, x, ==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {]
[/, denominator, ;, while, (, x, ==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }]
[*, (, x2, -, x1, ), /, denominator, ;, while, (, x, ==, x1, ||, x, ==, x2, ), {]
[*, c, *, (, x2, -, x1, ), /, denominator, ;, while, (, x, ==, x1, ||, x, ==, x2]
[*, (, x2, -, x1, ), /, denominator, ;, while, (, x, ==, x1, ||, x, ==, x2, ), {]
[/, denominator, ;, while, (, x, ==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }]
[), /, denominator, ;, while, (, x, ==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }]
[-, x1, ), /, denominator, ;, while, (, x, ==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy]
[), /, denominator, ;, while, (, x, ==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }]
[;, while, (, x, ==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {]
[), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +, FastMath, ., random, (, ), *]
[||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +, FastMath, .]
[==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +]
[||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +, FastMath, .]
[), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +, FastMath, ., random, (, ), *]
[==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +, FastMath, ., random, (]
[), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +, FastMath, ., random, (, ), *]
[+=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +, FastMath, ., random, (, ), *, (, max, -]
[;, }, }, else, {, x, =, min, +, FastMath, ., random, (, ), *, (, max, -, min, )]
[=, min, +, FastMath, ., random, (, ), *, (, max, -, min, ), ;, oldx, =, Double, ., POSITIVE_INFINITY]
[;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance]
[+, FastMath, ., random, (, ), *, (, max, -, min, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }]
[;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance]
[*, (, max, -, min, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (]
[., random, (, ), *, (, max, -, min, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double]
[;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance]
[), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double]
[-, min, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;]
[), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double]
[=, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath]
[;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy]
[., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max]
[;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, )]
[), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy]
[;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y, )]
[., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs]
[,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs]
[*, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx]
[,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs]
[., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=]
[), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, .]
[), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y]
[), {, return, x, ;, }, x0, =, x1, ;, y0, =, y1, ;, x1, =, x2, ;, y1, =]
[||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =, x1, ;, y0]
[<=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =, x1]
[., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {]
[), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =]
[-, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }]
[), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =]
[||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =, x1, ;, y0]
[), {, return, x, ;, }, x0, =, x1, ;, y0, =, y1, ;, x1, =, x2, ;, y1, =]
[<=, functionValueAccuracy, ), {, return, x, ;, }, x0, =, x1, ;, y0, =, y1, ;, x1, =, x2, ;]
[., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =, x1, ;, y0, =, y1]
[), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =, x1, ;, y0, =, y1, ;, x1, =, x2]
[), {, return, x, ;, }, x0, =, x1, ;, y0, =, y1, ;, x1, =, x2, ;, y1, =]
[;, }, x0, =, x1, ;, y0, =, y1, ;, x1, =, x2, ;, y1, =, y2, ;, x2, =]
[=, x1, ;, y0, =, y1, ;, x1, =, x2, ;, y1, =, y2, ;, x2, =, x, ;, y2]
[;, y0, =, y1, ;, x1, =, x2, ;, y1, =, y2, ;, x2, =, x, ;, y2, =, y]
[=, y1, ;, x1, =, x2, ;, y1, =, y2, ;, x2, =, x, ;, y2, =, y, ;, oldx]
[;, x1, =, x2, ;, y1, =, y2, ;, x2, =, x, ;, y2, =, y, ;, oldx, =, x]
[=, x2, ;, y1, =, y2, ;, x2, =, x, ;, y2, =, y, ;, oldx, =, x, ;, }]
[;, y1, =, y2, ;, x2, =, x, ;, y2, =, y, ;, oldx, =, x, ;, }, }, }]
[=, y2, ;, x2, =, x, ;, y2, =, y, ;, oldx, =, x, ;, }, }, }]
[;, x2, =, x, ;, y2, =, y, ;, oldx, =, x, ;, }, }, }]
[=, x, ;, y2, =, y, ;, oldx, =, x, ;, }, }, }]
[;, y2, =, y, ;, oldx, =, x, ;, }, }, }]
[=, y, ;, oldx, =, x, ;, }, }, }]
[;, oldx, =, x, ;, }, }, }]
[=, x, ;, }, }, }]
[;, }, }, }]
