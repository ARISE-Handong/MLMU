[=, new, ArrayList, <, NestedLoops, >, (, ), ;, }, private, NestedLoops, (, final, Vector2D, [, ], loop, ), throws]
[;, }, private, NestedLoops, (, final, Vector2D, [, ], loop, ), throws, MathIllegalArgumentException, {, if, (, loop, [, 0, ]]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., OUTLINE_BOUNDARY_LOOP_OPEN, ), ;, }, this, ., loop, =, loop, ;, surrounded, =]
[==, null, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., OUTLINE_BOUNDARY_LOOP_OPEN, ), ;, }, this, ., loop, =, loop, ;]
[[, 0, ], ==, null, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., OUTLINE_BOUNDARY_LOOP_OPEN, ), ;, }, this, ., loop]
[], ==, null, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., OUTLINE_BOUNDARY_LOOP_OPEN, ), ;, }, this, ., loop, =, loop]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., OUTLINE_BOUNDARY_LOOP_OPEN, ), ;, }, this, ., loop, =, loop, ;, surrounded, =]
[;, }, this, ., loop, =, loop, ;, surrounded, =, new, ArrayList, <, NestedLoops, >, (, ), ;, final, ArrayList]
[), ;, }, this, ., loop, =, loop, ;, surrounded, =, new, ArrayList, <, NestedLoops, >, (, ), ;, final]
[., OUTLINE_BOUNDARY_LOOP_OPEN, ), ;, }, this, ., loop, =, loop, ;, surrounded, =, new, ArrayList, <, NestedLoops, >, (, )]
[=, loop, ;, surrounded, =, new, ArrayList, <, NestedLoops, >, (, ), ;, final, ArrayList, <, SubHyperplane, <, Euclidean2D, >]
[., loop, =, loop, ;, surrounded, =, new, ArrayList, <, NestedLoops, >, (, ), ;, final, ArrayList, <, SubHyperplane, <]
[;, surrounded, =, new, ArrayList, <, NestedLoops, >, (, ), ;, final, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >, edges]
[=, new, ArrayList, <, NestedLoops, >, (, ), ;, final, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >, edges, =, new]
[;, final, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >, edges, =, new, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >, (]
[;, Vector2D, current, =, loop, [, loop, ., length, -, 1, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, loop, ., length, ;, ++, i, ), {, final, Vector2D]
[[, loop, ., length, -, 1, ], ;, for, (, int, i, =, 0, ;, i, <, loop, ., length]
[], ;, for, (, int, i, =, 0, ;, i, <, loop, ., length, ;, ++, i, ), {, final]
[-, 1, ], ;, for, (, int, i, =, 0, ;, i, <, loop, ., length, ;, ++, i, )]
[., length, -, 1, ], ;, for, (, int, i, =, 0, ;, i, <, loop, ., length, ;, ++]
[], ;, for, (, int, i, =, 0, ;, i, <, loop, ., length, ;, ++, i, ), {, final]
[;, i, <, loop, ., length, ;, ++, i, ), {, final, Vector2D, previous, =, current, ;, current, =, loop]
[;, ++, i, ), {, final, Vector2D, previous, =, current, ;, current, =, loop, [, i, ], ;, final, Line]
[<, loop, ., length, ;, ++, i, ), {, final, Vector2D, previous, =, current, ;, current, =, loop, [, i]
[;, ++, i, ), {, final, Vector2D, previous, =, current, ;, current, =, loop, [, i, ], ;, final, Line]
[., length, ;, ++, i, ), {, final, Vector2D, previous, =, current, ;, current, =, loop, [, i, ], ;]
[), {, final, Vector2D, previous, =, current, ;, current, =, loop, [, i, ], ;, final, Line, line, =, new]
[), {, final, Vector2D, previous, =, current, ;, current, =, loop, [, i, ], ;, final, Line, line, =, new]
[;, current, =, loop, [, i, ], ;, final, Line, line, =, new, Line, (, previous, ,, current, ), ;]
[=, loop, [, i, ], ;, final, Line, line, =, new, Line, (, previous, ,, current, ), ;, final, IntervalsSet]
[;, final, Line, line, =, new, Line, (, previous, ,, current, ), ;, final, IntervalsSet, region, =, new, IntervalsSet, (]
[[, i, ], ;, final, Line, line, =, new, Line, (, previous, ,, current, ), ;, final, IntervalsSet, region, =]
[], ;, final, Line, line, =, new, Line, (, previous, ,, current, ), ;, final, IntervalsSet, region, =, new, IntervalsSet]
[;, final, IntervalsSet, region, =, new, IntervalsSet, (, line, ., toSubSpace, (, previous, ), ., getX, (, ), ,, line]
[,, current, ), ;, final, IntervalsSet, region, =, new, IntervalsSet, (, line, ., toSubSpace, (, previous, ), ., getX, (]
[), ;, final, IntervalsSet, region, =, new, IntervalsSet, (, line, ., toSubSpace, (, previous, ), ., getX, (, ), ,]
[;, edges, ., add, (, new, SubLine, (, line, ,, region, ), ), ;, }, polygon, =, new, PolygonsSet, (]
[,, line, ., toSubSpace, (, current, ), ., getX, (, ), ), ;, edges, ., add, (, new, SubLine, (]
[., getX, (, ), ,, line, ., toSubSpace, (, current, ), ., getX, (, ), ), ;, edges, ., add]
[., toSubSpace, (, previous, ), ., getX, (, ), ,, line, ., toSubSpace, (, current, ), ., getX, (, )]
[), ., getX, (, ), ,, line, ., toSubSpace, (, current, ), ., getX, (, ), ), ;, edges, .]
[), ;, edges, ., add, (, new, SubLine, (, line, ,, region, ), ), ;, }, polygon, =, new, PolygonsSet]
[., getX, (, ), ), ;, edges, ., add, (, new, SubLine, (, line, ,, region, ), ), ;, }]
[., toSubSpace, (, current, ), ., getX, (, ), ), ;, edges, ., add, (, new, SubLine, (, line, ,]
[), ., getX, (, ), ), ;, edges, ., add, (, new, SubLine, (, line, ,, region, ), ), ;]
[;, }, polygon, =, new, PolygonsSet, (, edges, ), ;, if, (, Double, ., isInfinite, (, polygon, ., getSize, (]
[., add, (, new, SubLine, (, line, ,, region, ), ), ;, }, polygon, =, new, PolygonsSet, (, edges, )]
[), ;, }, polygon, =, new, PolygonsSet, (, edges, ), ;, if, (, Double, ., isInfinite, (, polygon, ., getSize]
[,, region, ), ), ;, }, polygon, =, new, PolygonsSet, (, edges, ), ;, if, (, Double, ., isInfinite, (]
[), ), ;, }, polygon, =, new, PolygonsSet, (, edges, ), ;, if, (, Double, ., isInfinite, (, polygon, .]
[=, new, PolygonsSet, (, edges, ), ;, if, (, Double, ., isInfinite, (, polygon, ., getSize, (, ), ), )]
[;, if, (, Double, ., isInfinite, (, polygon, ., getSize, (, ), ), ), {, polygon, =, new, RegionFactory, <]
[), ;, if, (, Double, ., isInfinite, (, polygon, ., getSize, (, ), ), ), {, polygon, =, new, RegionFactory]
[), {, polygon, =, new, RegionFactory, <, Euclidean2D, >, (, ), ., getComplement, (, polygon, ), ;, originalIsClockwise, =, false]
[., isInfinite, (, polygon, ., getSize, (, ), ), ), {, polygon, =, new, RegionFactory, <, Euclidean2D, >, (, )]
[), ), {, polygon, =, new, RegionFactory, <, Euclidean2D, >, (, ), ., getComplement, (, polygon, ), ;, originalIsClockwise, =]
[., getSize, (, ), ), ), {, polygon, =, new, RegionFactory, <, Euclidean2D, >, (, ), ., getComplement, (, polygon]
[=, new, RegionFactory, <, Euclidean2D, >, (, ), ., getComplement, (, polygon, ), ;, originalIsClockwise, =, false, ;, }, else]
[;, originalIsClockwise, =, false, ;, }, else, {, originalIsClockwise, =, true, ;, }, }, public, void, add, (, final, Vector2D]
[., getComplement, (, polygon, ), ;, originalIsClockwise, =, false, ;, }, else, {, originalIsClockwise, =, true, ;, }, }, public]
[), ;, originalIsClockwise, =, false, ;, }, else, {, originalIsClockwise, =, true, ;, }, }, public, void, add, (, final]
[=, false, ;, }, else, {, originalIsClockwise, =, true, ;, }, }, public, void, add, (, final, Vector2D, [, ]]
[;, }, else, {, originalIsClockwise, =, true, ;, }, }, public, void, add, (, final, Vector2D, [, ], bLoop, )]
[=, true, ;, }, }, public, void, add, (, final, Vector2D, [, ], bLoop, ), throws, MathIllegalArgumentException, {, add, (]
[;, }, }, public, void, add, (, final, Vector2D, [, ], bLoop, ), throws, MathIllegalArgumentException, {, add, (, new, NestedLoops]
[;, }, private, void, add, (, final, NestedLoops, node, ), throws, MathIllegalArgumentException, {, for, (, final, NestedLoops, child, :, surrounded]
[), ;, }, private, void, add, (, final, NestedLoops, node, ), throws, MathIllegalArgumentException, {, for, (, final, NestedLoops, child, :]
[), ), ;, }, private, void, add, (, final, NestedLoops, node, ), throws, MathIllegalArgumentException, {, for, (, final, NestedLoops, child]
[), {, if, (, child, ., polygon, ., contains, (, node, ., polygon, ), ), {, child, ., add, (]
[), {, child, ., add, (, node, ), ;, return, ;, }, }, for, (, final, Iterator, <, NestedLoops, >]
[., contains, (, node, ., polygon, ), ), {, child, ., add, (, node, ), ;, return, ;, }, }]
[., polygon, ., contains, (, node, ., polygon, ), ), {, child, ., add, (, node, ), ;, return, ;]
[), ), {, child, ., add, (, node, ), ;, return, ;, }, }, for, (, final, Iterator, <, NestedLoops]
[., polygon, ), ), {, child, ., add, (, node, ), ;, return, ;, }, }, for, (, final, Iterator]
[;, return, ;, }, }, for, (, final, Iterator, <, NestedLoops, >, iterator, =, surrounded, ., iterator, (, ), ;]
[., add, (, node, ), ;, return, ;, }, }, for, (, final, Iterator, <, NestedLoops, >, iterator, =, surrounded]
[), ;, return, ;, }, }, for, (, final, Iterator, <, NestedLoops, >, iterator, =, surrounded, ., iterator, (, )]
[;, iterator, ., hasNext, (, ), ;, ), {, final, NestedLoops, child, =, iterator, ., next, (, ), ;, if]
[., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {, final, NestedLoops, child, =, iterator, ., next]
[;, ), {, final, NestedLoops, child, =, iterator, ., next, (, ), ;, if, (, node, ., polygon, ., contains]
[., hasNext, (, ), ;, ), {, final, NestedLoops, child, =, iterator, ., next, (, ), ;, if, (, node]
[;, if, (, node, ., polygon, ., contains, (, child, ., polygon, ), ), {, node, ., surrounded, ., add]
[., next, (, ), ;, if, (, node, ., polygon, ., contains, (, child, ., polygon, ), ), {, node]
[), {, node, ., surrounded, ., add, (, child, ), ;, iterator, ., remove, (, ), ;, }, }, RegionFactory]
[., contains, (, child, ., polygon, ), ), {, node, ., surrounded, ., add, (, child, ), ;, iterator, .]
[., polygon, ., contains, (, child, ., polygon, ), ), {, node, ., surrounded, ., add, (, child, ), ;]
[), ), {, node, ., surrounded, ., add, (, child, ), ;, iterator, ., remove, (, ), ;, }, }]
[., polygon, ), ), {, node, ., surrounded, ., add, (, child, ), ;, iterator, ., remove, (, ), ;]
[;, iterator, ., remove, (, ), ;, }, }, RegionFactory, <, Euclidean2D, >, factory, =, new, RegionFactory, <, Euclidean2D, >]
[., add, (, child, ), ;, iterator, ., remove, (, ), ;, }, }, RegionFactory, <, Euclidean2D, >, factory, =]
[., surrounded, ., add, (, child, ), ;, iterator, ., remove, (, ), ;, }, }, RegionFactory, <, Euclidean2D, >]
[), ;, iterator, ., remove, (, ), ;, }, }, RegionFactory, <, Euclidean2D, >, factory, =, new, RegionFactory, <, Euclidean2D]
[;, }, }, RegionFactory, <, Euclidean2D, >, factory, =, new, RegionFactory, <, Euclidean2D, >, (, ), ;, for, (, final]
[., remove, (, ), ;, }, }, RegionFactory, <, Euclidean2D, >, factory, =, new, RegionFactory, <, Euclidean2D, >, (, )]
[;, for, (, final, NestedLoops, child, :, surrounded, ), {, if, (, !, factory, ., intersection, (, node, ., polygon]
[), {, if, (, !, factory, ., intersection, (, node, ., polygon, ,, child, ., polygon, ), ., isEmpty, (]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CROSSING_BOUNDARY_LOOPS, ), ;, }, }, surrounded, ., add, (, node, ), ;]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CROSSING_BOUNDARY_LOOPS, ), ;, }, }, surrounded, ., add, (, node, ), ;]
[., isEmpty, (, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CROSSING_BOUNDARY_LOOPS, ), ;, }, }, surrounded, ., add]
[., intersection, (, node, ., polygon, ,, child, ., polygon, ), ., isEmpty, (, ), ), {, throw, new, MathIllegalArgumentException]
[,, child, ., polygon, ), ., isEmpty, (, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CROSSING_BOUNDARY_LOOPS, ), ;]
[., polygon, ,, child, ., polygon, ), ., isEmpty, (, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CROSSING_BOUNDARY_LOOPS]
[), ., isEmpty, (, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CROSSING_BOUNDARY_LOOPS, ), ;, }, }, surrounded, .]
[., polygon, ), ., isEmpty, (, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CROSSING_BOUNDARY_LOOPS, ), ;, }, }]
[;, }, }, surrounded, ., add, (, node, ), ;, }, public, void, correctOrientation, (, ), {, for, (, NestedLoops]
[), ;, }, }, surrounded, ., add, (, node, ), ;, }, public, void, correctOrientation, (, ), {, for, (]
[., CROSSING_BOUNDARY_LOOPS, ), ;, }, }, surrounded, ., add, (, node, ), ;, }, public, void, correctOrientation, (, ), {]
[;, }, public, void, correctOrientation, (, ), {, for, (, NestedLoops, child, :, surrounded, ), {, child, ., setClockWise, (]
[., add, (, node, ), ;, }, public, void, correctOrientation, (, ), {, for, (, NestedLoops, child, :, surrounded, )]
[), ;, }, public, void, correctOrientation, (, ), {, for, (, NestedLoops, child, :, surrounded, ), {, child, ., setClockWise]
[), {, child, ., setClockWise, (, true, ), ;, }, }, private, void, setClockWise, (, final, boolean, clockwise, ), {]
[;, }, }, private, void, setClockWise, (, final, boolean, clockwise, ), {, if, (, originalIsClockwise, ^, clockwise, ), {, int]
[., setClockWise, (, true, ), ;, }, }, private, void, setClockWise, (, final, boolean, clockwise, ), {, if, (, originalIsClockwise]
[), ;, }, }, private, void, setClockWise, (, final, boolean, clockwise, ), {, if, (, originalIsClockwise, ^, clockwise, ), {]
[), {, int, min, =, -, 1, ;, int, max, =, loop, ., length, ;, while, (, ++, min, <]
[^, clockwise, ), {, int, min, =, -, 1, ;, int, max, =, loop, ., length, ;, while, (, ++]
[), {, int, min, =, -, 1, ;, int, max, =, loop, ., length, ;, while, (, ++, min, <]
[;, int, max, =, loop, ., length, ;, while, (, ++, min, <, --, max, ), {, final, Vector2D, tmp]
[;, int, max, =, loop, ., length, ;, while, (, ++, min, <, --, max, ), {, final, Vector2D, tmp]
[;, while, (, ++, min, <, --, max, ), {, final, Vector2D, tmp, =, loop, [, min, ], ;, loop]
[., length, ;, while, (, ++, min, <, --, max, ), {, final, Vector2D, tmp, =, loop, [, min, ]]
[), {, final, Vector2D, tmp, =, loop, [, min, ], ;, loop, [, min, ], =, loop, [, max, ]]
[<, --, max, ), {, final, Vector2D, tmp, =, loop, [, min, ], ;, loop, [, min, ], =, loop]
[<, --, max, ), {, final, Vector2D, tmp, =, loop, [, min, ], ;, loop, [, min, ], =, loop]
[), {, final, Vector2D, tmp, =, loop, [, min, ], ;, loop, [, min, ], =, loop, [, max, ]]
[), {, final, Vector2D, tmp, =, loop, [, min, ], ;, loop, [, min, ], =, loop, [, max, ]]
[;, loop, [, min, ], =, loop, [, max, ], ;, loop, [, max, ], =, tmp, ;, }, }]
[[, min, ], ;, loop, [, min, ], =, loop, [, max, ], ;, loop, [, max, ], =, tmp]
[], ;, loop, [, min, ], =, loop, [, max, ], ;, loop, [, max, ], =, tmp, ;, }]
[=, loop, [, max, ], ;, loop, [, max, ], =, tmp, ;, }, }, for, (, final, NestedLoops, child]
[[, min, ], =, loop, [, max, ], ;, loop, [, max, ], =, tmp, ;, }, }, for, (]
[], =, loop, [, max, ], ;, loop, [, max, ], =, tmp, ;, }, }, for, (, final, NestedLoops]
[;, loop, [, max, ], =, tmp, ;, }, }, for, (, final, NestedLoops, child, :, surrounded, ), {, child]
[[, max, ], ;, loop, [, max, ], =, tmp, ;, }, }, for, (, final, NestedLoops, child, :, surrounded]
[], ;, loop, [, max, ], =, tmp, ;, }, }, for, (, final, NestedLoops, child, :, surrounded, ), {]
[=, tmp, ;, }, }, for, (, final, NestedLoops, child, :, surrounded, ), {, child, ., setClockWise, (, !, clockwise]
[[, max, ], =, tmp, ;, }, }, for, (, final, NestedLoops, child, :, surrounded, ), {, child, ., setClockWise]
[], =, tmp, ;, }, }, for, (, final, NestedLoops, child, :, surrounded, ), {, child, ., setClockWise, (, !]
[;, }, }, for, (, final, NestedLoops, child, :, surrounded, ), {, child, ., setClockWise, (, !, clockwise, ), ;]
[), {, child, ., setClockWise, (, !, clockwise, ), ;, }, }, }]
[;, }, }, }]
[., setClockWise, (, !, clockwise, ), ;, }, }, }]
[), ;, }, }, }]
[), ;, }, }, }]
