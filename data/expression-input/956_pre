[import, java, ., io, ., Serializable, ;, public, final, class, RangeType, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[java, ., io, ., Serializable, ;, public, final, class, RangeType, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[class, RangeType, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -, 9073319010650549239L, ;, public, static, final, RangeType, FULL, =]
[Serializable, {, private, static, final, long, serialVersionUID, =, -, 9073319010650549239L, ;, public, static, final, RangeType, FULL, =, new, RangeType, (]
[9073319010650549239L, ;, public, static, final, RangeType, FULL, =, new, RangeType, (, "RangeType.FULL", ), ;, public, static, final, RangeType, POSITIVE, =]
[static, final, RangeType, FULL, =, new, RangeType, (, "RangeType.FULL", ), ;, public, static, final, RangeType, POSITIVE, =, new, RangeType, (]
[), ;, public, static, final, RangeType, POSITIVE, =, new, RangeType, (, "RangeType.POSITIVE", ), ;, public, static, final, RangeType, NEGATIVE, =]
[static, final, RangeType, POSITIVE, =, new, RangeType, (, "RangeType.POSITIVE", ), ;, public, static, final, RangeType, NEGATIVE, =, new, RangeType, (]
[RangeType, NEGATIVE, =, new, RangeType, (, "RangeType.NEGATIVE", ), ;, private, String, name, ;, private, RangeType, (, String, name, ), {]
[RangeType, NEGATIVE, =, new, RangeType, (, "RangeType.NEGATIVE", ), ;, private, String, name, ;, private, RangeType, (, String, name, ), {]
[RangeType, (, "RangeType.NEGATIVE", ), ;, private, String, name, ;, private, RangeType, (, String, name, ), {, this, ., name, =]
[RangeType, (, String, name, ), {, this, ., name, =, name, ;, }, public, String, toString, (, ), {, return]
[RangeType, (, String, name, ), {, this, ., name, =, name, ;, }, public, String, toString, (, ), {, return]
[toString, (, ), {, return, this, ., name, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[toString, (, ), {, return, this, ., name, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), {, return, this, ., name, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[., name, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !, (]
[this, ==, obj, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, RangeType, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, RangeType, ), ), {, return, false, ;, }, RangeType, that, =]
[if, (, !, (, obj, instanceof, RangeType, ), ), {, return, false, ;, }, RangeType, that, =, (, RangeType, )]
[obj, instanceof, RangeType, ), ), {, return, false, ;, }, RangeType, that, =, (, RangeType, ), obj, ;, if, (]
[instanceof, RangeType, ), ), {, return, false, ;, }, RangeType, that, =, (, RangeType, ), obj, ;, if, (, !]
[instanceof, RangeType, ), ), {, return, false, ;, }, RangeType, that, =, (, RangeType, ), obj, ;, if, (, !]
[instanceof, RangeType, ), ), {, return, false, ;, }, RangeType, that, =, (, RangeType, ), obj, ;, if, (, !]
[false, ;, }, RangeType, that, =, (, RangeType, ), obj, ;, if, (, !, this, ., name, ., equals, (]
[false, ;, }, RangeType, that, =, (, RangeType, ), obj, ;, if, (, !, this, ., name, ., equals, (]
[obj, ;, if, (, !, this, ., name, ., equals, (, that, ., toString, (, ), ), ), {, return]
[!, this, ., name, ., equals, (, that, ., toString, (, ), ), ), {, return, false, ;, }, return]
[(, ), ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, return]
[(, ), ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, return]
[(, ), ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, return]
[return, this, ., name, ., hashCode, (, ), ;, }, private, Object, readResolve, (, ), throws, ObjectStreamException, {, if, (]
[return, this, ., name, ., hashCode, (, ), ;, }, private, Object, readResolve, (, ), throws, ObjectStreamException, {, if, (]
[., hashCode, (, ), ;, }, private, Object, readResolve, (, ), throws, ObjectStreamException, {, if, (, this, ., equals, (]
[., hashCode, (, ), ;, }, private, Object, readResolve, (, ), throws, ObjectStreamException, {, if, (, this, ., equals, (]
[Object, readResolve, (, ), throws, ObjectStreamException, {, if, (, this, ., equals, (, RangeType, ., FULL, ), ), {, return]
[Object, readResolve, (, ), throws, ObjectStreamException, {, if, (, this, ., equals, (, RangeType, ., FULL, ), ), {, return]
[(, this, ., equals, (, RangeType, ., FULL, ), ), {, return, RangeType, ., FULL, ;, }, else, if, (]
[(, this, ., equals, (, RangeType, ., FULL, ), ), {, return, RangeType, ., FULL, ;, }, else, if, (]
[(, RangeType, ., FULL, ), ), {, return, RangeType, ., FULL, ;, }, else, if, (, this, ., equals, (]
[(, RangeType, ., FULL, ), ), {, return, RangeType, ., FULL, ;, }, else, if, (, this, ., equals, (]
[return, RangeType, ., FULL, ;, }, else, if, (, this, ., equals, (, RangeType, ., POSITIVE, ), ), {, return]
[return, RangeType, ., FULL, ;, }, else, if, (, this, ., equals, (, RangeType, ., POSITIVE, ), ), {, return]
[(, this, ., equals, (, RangeType, ., POSITIVE, ), ), {, return, RangeType, ., POSITIVE, ;, }, else, if, (]
[(, this, ., equals, (, RangeType, ., POSITIVE, ), ), {, return, RangeType, ., POSITIVE, ;, }, else, if, (]
[(, RangeType, ., POSITIVE, ), ), {, return, RangeType, ., POSITIVE, ;, }, else, if, (, this, ., equals, (]
[(, RangeType, ., POSITIVE, ), ), {, return, RangeType, ., POSITIVE, ;, }, else, if, (, this, ., equals, (]
[return, RangeType, ., POSITIVE, ;, }, else, if, (, this, ., equals, (, RangeType, ., NEGATIVE, ), ), {, return]
[return, RangeType, ., POSITIVE, ;, }, else, if, (, this, ., equals, (, RangeType, ., NEGATIVE, ), ), {, return]
[else, if, (, this, ., equals, (, RangeType, ., NEGATIVE, ), ), {, return, RangeType, ., NEGATIVE, ;, }, return]
