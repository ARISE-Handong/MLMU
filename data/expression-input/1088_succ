[;, private, static, final, Function, <, TypePair, ,, TypePair, >, NE, =, new, Function, <, TypePair, ,, TypePair, >, (]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderEquality, (, p, ., typeB, ), ;, }, }]
[||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderEquality, (, p]
[==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderEquality]
[., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA]
[||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderEquality, (, p]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderEquality, (, p, ., typeB, ), ;, }, }]
[==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderEquality, (, p, ., typeB, ), ;]
[., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderEquality, (, p, ., typeB]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderEquality, (, p, ., typeB, ), ;, }, }]
[;, }, return, p, ., typeA, ., getTypesUnderEquality, (, p, ., typeB, ), ;, }, }, ;, private, static, final]
[;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, NE, =, new, Function, <, TypePair, ,]
[., getTypesUnderEquality, (, p, ., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >]
[., typeA, ., getTypesUnderEquality, (, p, ., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,]
[), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, NE, =, new, Function, <, TypePair]
[., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, NE, =, new, Function]
[;, private, static, final, Function, <, TypePair, ,, TypePair, >, SHEQ, =, new, Function, <, TypePair, ,, TypePair, >, (]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderInequality, (, p, ., typeB, ), ;, }, }]
[||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderInequality, (, p]
[==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderInequality]
[., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA]
[||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderInequality, (, p]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderInequality, (, p, ., typeB, ), ;, }, }]
[==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderInequality, (, p, ., typeB, ), ;]
[., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderInequality, (, p, ., typeB]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderInequality, (, p, ., typeB, ), ;, }, }]
[;, }, return, p, ., typeA, ., getTypesUnderInequality, (, p, ., typeB, ), ;, }, }, ;, private, static, final]
[;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, SHEQ, =, new, Function, <, TypePair, ,]
[., getTypesUnderInequality, (, p, ., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >]
[., typeA, ., getTypesUnderInequality, (, p, ., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,]
[), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, SHEQ, =, new, Function, <, TypePair]
[., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, SHEQ, =, new, Function]
[;, private, static, final, Function, <, TypePair, ,, TypePair, >, SHNE, =, new, Function, <, TypePair, ,, TypePair, >, (]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowEquality, (, p, ., typeB, ), ;, }, }]
[||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowEquality, (, p]
[==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowEquality]
[., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA]
[||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowEquality, (, p]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowEquality, (, p, ., typeB, ), ;, }, }]
[==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowEquality, (, p, ., typeB, ), ;]
[., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowEquality, (, p, ., typeB]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowEquality, (, p, ., typeB, ), ;, }, }]
[;, }, return, p, ., typeA, ., getTypesUnderShallowEquality, (, p, ., typeB, ), ;, }, }, ;, private, static, final]
[;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, SHNE, =, new, Function, <, TypePair, ,]
[., getTypesUnderShallowEquality, (, p, ., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >]
[., typeA, ., getTypesUnderShallowEquality, (, p, ., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,]
[), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, SHNE, =, new, Function, <, TypePair]
[., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, SHNE, =, new, Function]
[;, private, final, Function, <, TypePair, ,, TypePair, >, INEQ, =, new, Function, <, TypePair, ,, TypePair, >, (, )]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowInequality, (, p, ., typeB, ), ;, }, }]
[||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowInequality, (, p]
[==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowInequality]
[., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA]
[||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowInequality, (, p]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowInequality, (, p, ., typeB, ), ;, }, }]
[==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowInequality, (, p, ., typeB, ), ;]
[., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowInequality, (, p, ., typeB]
[), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowInequality, (, p, ., typeB, ), ;, }, }]
[;, }, return, p, ., typeA, ., getTypesUnderShallowInequality, (, p, ., typeB, ), ;, }, }, ;, private, final, Function]
[;, }, }, ;, private, final, Function, <, TypePair, ,, TypePair, >, INEQ, =, new, Function, <, TypePair, ,, TypePair]
[., getTypesUnderShallowInequality, (, p, ., typeB, ), ;, }, }, ;, private, final, Function, <, TypePair, ,, TypePair, >, INEQ]
[., typeA, ., getTypesUnderShallowInequality, (, p, ., typeB, ), ;, }, }, ;, private, final, Function, <, TypePair, ,, TypePair]
[), ;, }, }, ;, private, final, Function, <, TypePair, ,, TypePair, >, INEQ, =, new, Function, <, TypePair, ,]
[., typeB, ), ;, }, }, ;, private, final, Function, <, TypePair, ,, TypePair, >, INEQ, =, new, Function, <]
[;, public, SemanticReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, ), ;, }, @]
[;, }, }, ;, public, SemanticReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry, )]
[,, getRestrictedWithoutUndefined, (, p, ., typeB, ), ), ;, }, }, ;, public, SemanticReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry]
[), ,, getRestrictedWithoutUndefined, (, p, ., typeB, ), ), ;, }, }, ;, public, SemanticReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry]
[., typeA, ), ,, getRestrictedWithoutUndefined, (, p, ., typeB, ), ), ;, }, }, ;, public, SemanticReverseAbstractInterpreter, (, CodingConvention, convention]
[), ;, }, }, ;, public, SemanticReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,, typeRegistry]
[), ), ;, }, }, ;, public, SemanticReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,]
[., typeB, ), ), ;, }, }, ;, public, SemanticReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, super, (]
[,, typeRegistry, ), ;, }, @, Override, public, FlowScope, getPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, )]
[), ;, }, @, Override, public, FlowScope, getPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, int]
[;, switch, (, operatorToken, ), {, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ]
[., getType, (, ), ;, switch, (, operatorToken, ), {, case, Token, ., EQ, :, case, Token, ., NE, :]
[), {, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, .]
[:, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., CASE]
[., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token]
[:, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., CASE, :, Node, left, ;, Node]
[., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., CASE, :, Node, left]
[:, case, Token, ., SHNE, :, case, Token, ., CASE, :, Node, left, ;, Node, right, ;, if, (, operatorToken]
[., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., CASE, :, Node, left, ;, Node, right, ;, if]
[:, case, Token, ., CASE, :, Node, left, ;, Node, right, ;, if, (, operatorToken, ==, Token, ., CASE, )]
[., SHNE, :, case, Token, ., CASE, :, Node, left, ;, Node, right, ;, if, (, operatorToken, ==, Token, .]
[:, Node, left, ;, Node, right, ;, if, (, operatorToken, ==, Token, ., CASE, ), {, left, =, condition, .]
[., CASE, :, Node, left, ;, Node, right, ;, if, (, operatorToken, ==, Token, ., CASE, ), {, left, =]
[), {, left, =, condition, ., getParent, (, ), ., getFirstChild, (, ), ;, right, =, condition, ., getFirstChild, (]
[==, Token, ., CASE, ), {, left, =, condition, ., getParent, (, ), ., getFirstChild, (, ), ;, right, =]
[), {, left, =, condition, ., getParent, (, ), ., getFirstChild, (, ), ;, right, =, condition, ., getFirstChild, (]
[., CASE, ), {, left, =, condition, ., getParent, (, ), ., getFirstChild, (, ), ;, right, =, condition, .]
[=, condition, ., getParent, (, ), ., getFirstChild, (, ), ;, right, =, condition, ., getFirstChild, (, ), ;, }]
[;, right, =, condition, ., getFirstChild, (, ), ;, }, else, {, left, =, condition, ., getFirstChild, (, ), ;]
[., getFirstChild, (, ), ;, right, =, condition, ., getFirstChild, (, ), ;, }, else, {, left, =, condition, .]
[., getParent, (, ), ., getFirstChild, (, ), ;, right, =, condition, ., getFirstChild, (, ), ;, }, else, {]
[=, condition, ., getFirstChild, (, ), ;, }, else, {, left, =, condition, ., getFirstChild, (, ), ;, right, =]
[;, }, else, {, left, =, condition, ., getFirstChild, (, ), ;, right, =, condition, ., getLastChild, (, ), ;]
[., getFirstChild, (, ), ;, }, else, {, left, =, condition, ., getFirstChild, (, ), ;, right, =, condition, .]
[=, condition, ., getFirstChild, (, ), ;, right, =, condition, ., getLastChild, (, ), ;, }, Node, typeOfNode, =, null]
[;, right, =, condition, ., getLastChild, (, ), ;, }, Node, typeOfNode, =, null, ;, Node, stringNode, =, null, ;]
[., getFirstChild, (, ), ;, right, =, condition, ., getLastChild, (, ), ;, }, Node, typeOfNode, =, null, ;, Node]
[=, condition, ., getLastChild, (, ), ;, }, Node, typeOfNode, =, null, ;, Node, stringNode, =, null, ;, if, (]
[;, }, Node, typeOfNode, =, null, ;, Node, stringNode, =, null, ;, if, (, left, ., isTypeOf, (, ), &&]
[., getLastChild, (, ), ;, }, Node, typeOfNode, =, null, ;, Node, stringNode, =, null, ;, if, (, left, .]
[;, Node, stringNode, =, null, ;, if, (, left, ., isTypeOf, (, ), &&, right, ., isString, (, ), )]
[;, if, (, left, ., isTypeOf, (, ), &&, right, ., isString, (, ), ), {, typeOfNode, =, left, ;]
[), {, typeOfNode, =, left, ;, stringNode, =, right, ;, }, else, if, (, right, ., isTypeOf, (, ), &&]
[&&, right, ., isString, (, ), ), {, typeOfNode, =, left, ;, stringNode, =, right, ;, }, else, if, (]
[., isTypeOf, (, ), &&, right, ., isString, (, ), ), {, typeOfNode, =, left, ;, stringNode, =, right, ;]
[), {, typeOfNode, =, left, ;, stringNode, =, right, ;, }, else, if, (, right, ., isTypeOf, (, ), &&]
[., isString, (, ), ), {, typeOfNode, =, left, ;, stringNode, =, right, ;, }, else, if, (, right, .]
[=, left, ;, stringNode, =, right, ;, }, else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString]
[;, stringNode, =, right, ;, }, else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString, (, )]
[=, right, ;, }, else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {]
[;, }, else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {, typeOfNode, =]
[), {, typeOfNode, =, right, ;, stringNode, =, left, ;, }, if, (, typeOfNode, !=, null, &&, stringNode, !=, null]
[&&, left, ., isString, (, ), ), {, typeOfNode, =, right, ;, stringNode, =, left, ;, }, if, (, typeOfNode]
[., isTypeOf, (, ), &&, left, ., isString, (, ), ), {, typeOfNode, =, right, ;, stringNode, =, left, ;]
[), {, typeOfNode, =, right, ;, stringNode, =, left, ;, }, if, (, typeOfNode, !=, null, &&, stringNode, !=, null]
[., isString, (, ), ), {, typeOfNode, =, right, ;, stringNode, =, left, ;, }, if, (, typeOfNode, !=, null]
[=, right, ;, stringNode, =, left, ;, }, if, (, typeOfNode, !=, null, &&, stringNode, !=, null, ), {, Node]
[;, stringNode, =, left, ;, }, if, (, typeOfNode, !=, null, &&, stringNode, !=, null, ), {, Node, operandNode, =]
[=, left, ;, }, if, (, typeOfNode, !=, null, &&, stringNode, !=, null, ), {, Node, operandNode, =, typeOfNode, .]
[;, }, if, (, typeOfNode, !=, null, &&, stringNode, !=, null, ), {, Node, operandNode, =, typeOfNode, ., getFirstChild, (]
[), {, Node, operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, )]
[&&, stringNode, !=, null, ), {, Node, operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (]
[!=, null, &&, stringNode, !=, null, ), {, Node, operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =]
[&&, stringNode, !=, null, ), {, Node, operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (]
[), {, Node, operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, )]
[!=, null, ), {, Node, operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,]
[), {, Node, operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, )]
[;, JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, ), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue]
[., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, ), ;, if, (, operandType, !=, null]
[;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||, operatorToken, ==, Token]
[,, blindScope, ), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||]
[), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||, operatorToken, ==]
[), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==, Token]
[!=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken]
[), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==, Token]
[;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,]
[||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return]
[||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue]
[==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==, Token, ., CASE, ;, if, (, !]
[||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue]
[., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, )]
[||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return]
[==, Token, ., SHEQ, ||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =, !]
[||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return]
[., SHEQ, ||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;]
[;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,]
[==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (]
[;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,]
[., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,]
[), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,, stringNode, ., getString, (, )]
[), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,, stringNode, ., getString, (, )]
[=, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,, stringNode, ., getString, (, ), ,, resultEqualsValue, ,]
[;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,, stringNode, ., getString, (, ), ,, resultEqualsValue, ,, blindScope, ), ;]
[;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,, stringNode, ., getString, (, ), ,, resultEqualsValue, ,, blindScope, ), ;]
[;, }, }, }, switch, (, operatorToken, ), {, case, Token, ., AND, :, if, (, outcome, ), {, return]
[,, operandType, ,, stringNode, ., getString, (, ), ,, resultEqualsValue, ,, blindScope, ), ;, }, }, }, switch, (, operatorToken]
[,, stringNode, ., getString, (, ), ,, resultEqualsValue, ,, blindScope, ), ;, }, }, }, switch, (, operatorToken, ), {]
[,, resultEqualsValue, ,, blindScope, ), ;, }, }, }, switch, (, operatorToken, ), {, case, Token, ., AND, :, if]
[., getString, (, ), ,, resultEqualsValue, ,, blindScope, ), ;, }, }, }, switch, (, operatorToken, ), {, case, Token]
[,, blindScope, ), ;, }, }, }, switch, (, operatorToken, ), {, case, Token, ., AND, :, if, (, outcome]
[), ;, }, }, }, switch, (, operatorToken, ), {, case, Token, ., AND, :, if, (, outcome, ), {]
[), {, case, Token, ., AND, :, if, (, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, )]
[:, if, (, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, )]
[., AND, :, if, (, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild]
[), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, true]
[;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope]
[,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, .]
[., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, else, {, return]
[,, blindScope, ,, true, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, .]
[., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (]
[,, true, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (]
[), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,]
[;, }, case, Token, ., OR, :, if, (, !, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (]
[,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, case, Token, ., OR, :, if, (]
[., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, case, Token, .]
[,, blindScope, ,, true, ), ;, }, case, Token, ., OR, :, if, (, !, outcome, ), {, return, caseAndOrNotShortCircuiting]
[., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, case, Token, ., OR, :, if, (, !, outcome]
[,, true, ), ;, }, case, Token, ., OR, :, if, (, !, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition]
[), ;, }, case, Token, ., OR, :, if, (, !, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild]
[:, if, (, !, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (]
[., OR, :, if, (, !, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, .]
[), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, false]
[), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, false]
[;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope]
[,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, .]
[., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, else, {, return]
[,, blindScope, ,, false, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, .]
[., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (]
[,, false, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (]
[), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,]
[;, }, case, Token, ., EQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, EQ]
[,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, case, Token, ., EQ, :, if, (]
[., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, case, Token, .]
[,, blindScope, ,, false, ), ;, }, case, Token, ., EQ, :, if, (, outcome, ), {, return, caseEquality, (]
[., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, case, Token, ., EQ, :, if, (, outcome, )]
[,, false, ), ;, }, case, Token, ., EQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,]
[), ;, }, case, Token, ., EQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,]
[:, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, else, {, return]
[., EQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, else]
[), {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, else, {, return, caseEquality, (, condition, ,]
[;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, case, Token, ., NE, :]
[,, blindScope, ,, EQ, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }]
[,, EQ, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, case, Token]
[), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, case, Token, ., NE]
[;, }, case, Token, ., NE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, NE]
[,, blindScope, ,, NE, ), ;, }, case, Token, ., NE, :, if, (, outcome, ), {, return, caseEquality, (]
[,, NE, ), ;, }, case, Token, ., NE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,]
[), ;, }, case, Token, ., NE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,]
[:, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, else, {, return]
[., NE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, else]
[), {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, else, {, return, caseEquality, (, condition, ,]
[;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, case, Token, ., SHEQ, :]
[,, blindScope, ,, NE, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }]
[,, NE, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, case, Token]
[), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, case, Token, ., SHEQ]
[;, }, case, Token, ., SHEQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ]
[,, blindScope, ,, EQ, ), ;, }, case, Token, ., SHEQ, :, if, (, outcome, ), {, return, caseEquality, (]
[,, EQ, ), ;, }, case, Token, ., SHEQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,]
[), ;, }, case, Token, ., SHEQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,]
[:, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return]
[., SHEQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, else]
[), {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (, condition, ,]
[;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, case, Token, ., SHNE, :]
[,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }]
[,, SHEQ, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, case, Token]
[), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, case, Token, ., SHNE]
[;, }, case, Token, ., SHNE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE]
[,, blindScope, ,, SHNE, ), ;, }, case, Token, ., SHNE, :, if, (, outcome, ), {, return, caseEquality, (]
[,, SHNE, ), ;, }, case, Token, ., SHNE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,]
[), ;, }, case, Token, ., SHNE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,]
[:, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, else, {, return]
[., SHNE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, else]
[), {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, else, {, return, caseEquality, (, condition, ,]
[;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, case, Token, ., NAME, :]
[,, blindScope, ,, SHNE, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }]
[,, SHNE, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, case, Token]
[), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, case, Token, ., NAME]
[;, }, case, Token, ., NAME, :, case, Token, ., GETPROP, :, return, caseNameOrGetProp, (, condition, ,, blindScope, ,, outcome]
[,, blindScope, ,, SHEQ, ), ;, }, case, Token, ., NAME, :, case, Token, ., GETPROP, :, return, caseNameOrGetProp, (]
[,, SHEQ, ), ;, }, case, Token, ., NAME, :, case, Token, ., GETPROP, :, return, caseNameOrGetProp, (, condition, ,]
[), ;, }, case, Token, ., NAME, :, case, Token, ., GETPROP, :, return, caseNameOrGetProp, (, condition, ,, blindScope, ,]
[:, case, Token, ., GETPROP, :, return, caseNameOrGetProp, (, condition, ,, blindScope, ,, outcome, ), ;, case, Token, ., ASSIGN]
[., NAME, :, case, Token, ., GETPROP, :, return, caseNameOrGetProp, (, condition, ,, blindScope, ,, outcome, ), ;, case, Token]
[:, return, caseNameOrGetProp, (, condition, ,, blindScope, ,, outcome, ), ;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition]
[., GETPROP, :, return, caseNameOrGetProp, (, condition, ,, blindScope, ,, outcome, ), ;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome]
[;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild]
[,, blindScope, ,, outcome, ), ;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,]
[,, outcome, ), ;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (]
[), ;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (, condition, .]
[:, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ., getNext, (]
[., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), .]
[;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,, !, outcome, )]
[,, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ., getNext, (, ), ,, blindScope, ,, outcome, ), ,, outcome, )]
[., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ., getNext, (, ), ,, blindScope, ,, outcome]
[,, outcome, ), ;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,]
[,, blindScope, ,, outcome, ), ,, outcome, ), ;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild]
[., getNext, (, ), ,, blindScope, ,, outcome, ), ,, outcome, ), ;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome]
[., getFirstChild, (, ), ., getNext, (, ), ,, blindScope, ,, outcome, ), ,, outcome, ), ;, case, Token, .]
[,, outcome, ), ,, outcome, ), ;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, )]
[), ,, outcome, ), ;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope]
[), ;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,, !, outcome]
[:, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,, !, outcome, ), ;, case, Token, ., LE]
[., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,, !, outcome, ), ;, case, Token]
[;, case, Token, ., LE, :, case, Token, ., LT, :, case, Token, ., GE, :, case, Token, ., GT]
[,, blindScope, ,, !, outcome, ), ;, case, Token, ., LE, :, case, Token, ., LT, :, case, Token, .]
[., getFirstChild, (, ), ,, blindScope, ,, !, outcome, ), ;, case, Token, ., LE, :, case, Token, ., LT]
[,, !, outcome, ), ;, case, Token, ., LE, :, case, Token, ., LT, :, case, Token, ., GE, :]
[), ;, case, Token, ., LE, :, case, Token, ., LT, :, case, Token, ., GE, :, case, Token, .]
[), ;, case, Token, ., LE, :, case, Token, ., LT, :, case, Token, ., GE, :, case, Token, .]
[:, case, Token, ., LT, :, case, Token, ., GE, :, case, Token, ., GT, :, if, (, outcome, )]
[., LE, :, case, Token, ., LT, :, case, Token, ., GE, :, case, Token, ., GT, :, if, (]
[:, case, Token, ., GE, :, case, Token, ., GT, :, if, (, outcome, ), {, return, caseEquality, (, condition]
[., LT, :, case, Token, ., GE, :, case, Token, ., GT, :, if, (, outcome, ), {, return, caseEquality]
[:, case, Token, ., GT, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, INEQ, )]
[., GE, :, case, Token, ., GT, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,]
[:, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, INEQ, ), ;, }, break, ;, case]
[., GT, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, INEQ, ), ;, }, break]
[), {, return, caseEquality, (, condition, ,, blindScope, ,, INEQ, ), ;, }, break, ;, case, Token, ., INSTANCEOF, :]
[;, }, break, ;, case, Token, ., INSTANCEOF, :, return, caseInstanceOf, (, condition, ., getFirstChild, (, ), ,, condition, .]
[,, blindScope, ,, INEQ, ), ;, }, break, ;, case, Token, ., INSTANCEOF, :, return, caseInstanceOf, (, condition, ., getFirstChild]
[,, INEQ, ), ;, }, break, ;, case, Token, ., INSTANCEOF, :, return, caseInstanceOf, (, condition, ., getFirstChild, (, )]
[), ;, }, break, ;, case, Token, ., INSTANCEOF, :, return, caseInstanceOf, (, condition, ., getFirstChild, (, ), ,, condition]
[:, return, caseInstanceOf, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, outcome, )]
[., INSTANCEOF, :, return, caseInstanceOf, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,]
[;, case, Token, ., IN, :, if, (, outcome, &&, condition, ., getFirstChild, (, ), ., isString, (, ), )]
[,, condition, ., getLastChild, (, ), ,, blindScope, ,, outcome, ), ;, case, Token, ., IN, :, if, (, outcome]
[., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, outcome, ), ;, case, Token, ., IN]
[,, blindScope, ,, outcome, ), ;, case, Token, ., IN, :, if, (, outcome, &&, condition, ., getFirstChild, (, )]
[., getLastChild, (, ), ,, blindScope, ,, outcome, ), ;, case, Token, ., IN, :, if, (, outcome, &&, condition]
[,, outcome, ), ;, case, Token, ., IN, :, if, (, outcome, &&, condition, ., getFirstChild, (, ), ., isString]
[), ;, case, Token, ., IN, :, if, (, outcome, &&, condition, ., getFirstChild, (, ), ., isString, (, )]
[:, if, (, outcome, &&, condition, ., getFirstChild, (, ), ., isString, (, ), ), {, return, caseIn, (, condition]
[., IN, :, if, (, outcome, &&, condition, ., getFirstChild, (, ), ., isString, (, ), ), {, return, caseIn]
[), {, return, caseIn, (, condition, ., getLastChild, (, ), ,, condition, ., getFirstChild, (, ), ., getString, (, )]
[&&, condition, ., getFirstChild, (, ), ., isString, (, ), ), {, return, caseIn, (, condition, ., getLastChild, (, )]
[), {, return, caseIn, (, condition, ., getLastChild, (, ), ,, condition, ., getFirstChild, (, ), ., getString, (, )]
[., isString, (, ), ), {, return, caseIn, (, condition, ., getLastChild, (, ), ,, condition, ., getFirstChild, (, )]
[., getFirstChild, (, ), ., isString, (, ), ), {, return, caseIn, (, condition, ., getLastChild, (, ), ,, condition]
[;, }, break, ;, case, Token, ., CASE, :, Node, left, =, condition, ., getParent, (, ), ., getFirstChild, (]
[,, condition, ., getFirstChild, (, ), ., getString, (, ), ,, blindScope, ), ;, }, break, ;, case, Token, .]
[., getLastChild, (, ), ,, condition, ., getFirstChild, (, ), ., getString, (, ), ,, blindScope, ), ;, }, break]
[,, blindScope, ), ;, }, break, ;, case, Token, ., CASE, :, Node, left, =, condition, ., getParent, (, )]
[., getString, (, ), ,, blindScope, ), ;, }, break, ;, case, Token, ., CASE, :, Node, left, =, condition]
[., getFirstChild, (, ), ., getString, (, ), ,, blindScope, ), ;, }, break, ;, case, Token, ., CASE, :]
[), ;, }, break, ;, case, Token, ., CASE, :, Node, left, =, condition, ., getParent, (, ), ., getFirstChild]
[:, Node, left, =, condition, ., getParent, (, ), ., getFirstChild, (, ), ;, Node, right, =, condition, ., getFirstChild]
[., CASE, :, Node, left, =, condition, ., getParent, (, ), ., getFirstChild, (, ), ;, Node, right, =, condition]
[;, Node, right, =, condition, ., getFirstChild, (, ), ;, if, (, outcome, ), {, return, caseEquality, (, left, ,]
[., getFirstChild, (, ), ;, Node, right, =, condition, ., getFirstChild, (, ), ;, if, (, outcome, ), {, return]
[., getParent, (, ), ., getFirstChild, (, ), ;, Node, right, =, condition, ., getFirstChild, (, ), ;, if, (]
[;, if, (, outcome, ), {, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHEQ, ), ;, }, else]
[., getFirstChild, (, ), ;, if, (, outcome, ), {, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHEQ]
[), {, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (]
[;, }, else, {, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHNE, ), ;, }, }, return, nextPreciserScopeKnowingConditionOutcome]
[,, right, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (, left, ,, right, ,, blindScope, ,]
[,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHNE, )]
[,, SHEQ, ), ;, }, else, {, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHNE, ), ;, }]
[), ;, }, else, {, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHNE, ), ;, }, }, return]
[;, }, }, return, nextPreciserScopeKnowingConditionOutcome, (, condition, ,, blindScope, ,, outcome, ), ;, }, private, FlowScope, caseEquality, (, Node, condition]
[,, right, ,, blindScope, ,, SHNE, ), ;, }, }, return, nextPreciserScopeKnowingConditionOutcome, (, condition, ,, blindScope, ,, outcome, ), ;]
[,, blindScope, ,, SHNE, ), ;, }, }, return, nextPreciserScopeKnowingConditionOutcome, (, condition, ,, blindScope, ,, outcome, ), ;, }, private]
[,, SHNE, ), ;, }, }, return, nextPreciserScopeKnowingConditionOutcome, (, condition, ,, blindScope, ,, outcome, ), ;, }, private, FlowScope, caseEquality]
[), ;, }, }, return, nextPreciserScopeKnowingConditionOutcome, (, condition, ,, blindScope, ,, outcome, ), ;, }, private, FlowScope, caseEquality, (, Node]
[;, }, private, FlowScope, caseEquality, (, Node, condition, ,, FlowScope, blindScope, ,, Function, <, TypePair, ,, TypePair, >, merging, )]
[,, blindScope, ,, outcome, ), ;, }, private, FlowScope, caseEquality, (, Node, condition, ,, FlowScope, blindScope, ,, Function, <, TypePair]
[,, outcome, ), ;, }, private, FlowScope, caseEquality, (, Node, condition, ,, FlowScope, blindScope, ,, Function, <, TypePair, ,, TypePair]
[), ;, }, private, FlowScope, caseEquality, (, Node, condition, ,, FlowScope, blindScope, ,, Function, <, TypePair, ,, TypePair, >, merging]
[;, }, private, FlowScope, caseEquality, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, Function, <, TypePair, ,, TypePair]
[,, condition, ., getLastChild, (, ), ,, blindScope, ,, merging, ), ;, }, private, FlowScope, caseEquality, (, Node, left, ,]
[., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, merging, ), ;, }, private, FlowScope, caseEquality]
[,, blindScope, ,, merging, ), ;, }, private, FlowScope, caseEquality, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,]
[., getLastChild, (, ), ,, blindScope, ,, merging, ), ;, }, private, FlowScope, caseEquality, (, Node, left, ,, Node, right]
[,, merging, ), ;, }, private, FlowScope, caseEquality, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, Function, <]
[), ;, }, private, FlowScope, caseEquality, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, Function, <, TypePair, ,]
[;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =]
[,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else]
[), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable]
[), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, )]
[!=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType]
[), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, )]
[=, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;, }, JSType]
[;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;, }, JSType, rightType, =]
[=, false, ;, leftType, =, left, ., getJSType, (, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope]
[;, leftType, =, left, ., getJSType, (, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;]
[=, left, ., getJSType, (, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable]
[;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null]
[., getJSType, (, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if]
[;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =]
[,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else]
[), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable]
[), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, )]
[!=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType]
[), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, )]
[=, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;, }, TypePair]
[;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;, }, TypePair, merged, =]
[=, false, ;, rightType, =, right, ., getJSType, (, ), ;, }, TypePair, merged, =, merging, ., apply, (, new]
[;, rightType, =, right, ., getJSType, (, ), ;, }, TypePair, merged, =, merging, ., apply, (, new, TypePair, (]
[=, right, ., getJSType, (, ), ;, }, TypePair, merged, =, merging, ., apply, (, new, TypePair, (, leftType, ,]
[;, }, TypePair, merged, =, merging, ., apply, (, new, TypePair, (, leftType, ,, rightType, ), ), ;, if, (]
[., getJSType, (, ), ;, }, TypePair, merged, =, merging, ., apply, (, new, TypePair, (, leftType, ,, rightType, )]
[;, if, (, merged, !=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged]
[., apply, (, new, TypePair, (, leftType, ,, rightType, ), ), ;, if, (, merged, !=, null, ), {, return]
[), ;, if, (, merged, !=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?]
[,, rightType, ), ), ;, if, (, merged, !=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType]
[), ), ;, if, (, merged, !=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable]
[), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right]
[!=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null]
[), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right]
[;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrNotShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean]
[,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, merged]
[,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, merged, ., typeB]
[,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, merged, ., typeB, :, null]
[,, right, ,, rightType, ,, rightIsRefineable, ?, merged, ., typeB, :, null, ), ;, }, return, blindScope, ;, }, private]
[?, merged, ., typeA, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, merged, ., typeB, :, null, ), ;]
[:, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, merged, ., typeB, :, null, ), ;, }, return, blindScope, ;]
[., typeA, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, merged, ., typeB, :, null, ), ;, }, return]
[,, right, ,, rightType, ,, rightIsRefineable, ?, merged, ., typeB, :, null, ), ;, }, return, blindScope, ;, }, private]
[,, rightType, ,, rightIsRefineable, ?, merged, ., typeB, :, null, ), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrNotShortCircuiting]
[,, rightIsRefineable, ?, merged, ., typeB, :, null, ), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrNotShortCircuiting, (, Node]
[), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrNotShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,]
[?, merged, ., typeB, :, null, ), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrNotShortCircuiting, (, Node, left, ,]
[:, null, ), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrNotShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope]
[., typeB, :, null, ), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrNotShortCircuiting, (, Node, left, ,, Node, right]
[), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrNotShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,]
[;, }, private, FlowScope, caseAndOrNotShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, condition, ), {, JSType]
[;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =]
[,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else]
[), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable]
[), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, )]
[!=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType]
[), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, )]
[=, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;, blindScope, =]
[;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (]
[=, false, ;, leftType, =, left, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition]
[;, leftType, =, left, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;]
[=, left, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, }, JSType]
[;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =, (, leftType, ==, null]
[., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =]
[=, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =, (, leftType, ==, null, ), ?]
[;, }, JSType, restrictedLeftType, =, (, leftType, ==, null, ), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;]
[,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =, (, leftType, ==, null, ), ?, null, :, leftType, .]
[,, condition, ), ;, }, JSType, restrictedLeftType, =, (, leftType, ==, null, ), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (]
[), ;, }, JSType, restrictedLeftType, =, (, leftType, ==, null, ), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, )]
[;, if, (, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, JSType]
[?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (]
[), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome]
[==, null, ), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (, restrictedLeftType, ==, null, ), {]
[), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome]
[:, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,]
[;, if, (, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, JSType]
[., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,]
[), ;, if, (, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }]
[), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,]
[==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (]
[), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,]
[;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null]
[,, blindScope, ,, condition, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;]
[,, condition, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (]
[), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=]
[;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =]
[,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else]
[), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable]
[), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, )]
[!=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType]
[), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, )]
[=, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;, blindScope, =]
[;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (]
[=, false, ;, rightType, =, right, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition]
[;, rightType, =, right, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;]
[=, right, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, if]
[;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType]
[., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, if, (, condition]
[=, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =, (]
[;, }, if, (, condition, ), {, JSType, restrictedRightType, =, (, rightType, ==, null, ), ?, null, :, rightType, .]
[,, blindScope, ,, condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =, (, rightType, ==, null, )]
[,, condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =, (, rightType, ==, null, ), ?, null]
[), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =, (, rightType, ==, null, ), ?, null, :, rightType]
[), {, JSType, restrictedRightType, =, (, rightType, ==, null, ), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;]
[;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType, ,]
[?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable]
[), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,]
[==, null, ), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,]
[), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,]
[:, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType]
[;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType, ,]
[., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null]
[), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType]
[;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrMaybeShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean]
[,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, restrictedRightType, :, null]
[,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, restrictedRightType, :, null, ), ;]
[,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, restrictedRightType, :, null, ), ;, }, return]
[,, right, ,, rightType, ,, rightIsRefineable, ?, restrictedRightType, :, null, ), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrMaybeShortCircuiting]
[?, restrictedLeftType, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, restrictedRightType, :, null, ), ;, }, return, blindScope, ;]
[:, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, restrictedRightType, :, null, ), ;, }, return, blindScope, ;, }, private]
[,, right, ,, rightType, ,, rightIsRefineable, ?, restrictedRightType, :, null, ), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrMaybeShortCircuiting]
[,, rightType, ,, rightIsRefineable, ?, restrictedRightType, :, null, ), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrMaybeShortCircuiting, (, Node]
[,, rightIsRefineable, ?, restrictedRightType, :, null, ), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrMaybeShortCircuiting, (, Node, left, ,]
[), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrMaybeShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,]
[?, restrictedRightType, :, null, ), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrMaybeShortCircuiting, (, Node, left, ,, Node, right]
[:, null, ), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrMaybeShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope]
[), ;, }, return, blindScope, ;, }, private, FlowScope, caseAndOrMaybeShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,]
[;, }, private, FlowScope, caseAndOrMaybeShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, condition, ), {, FlowScope]
[;, StaticSlot, <, JSType, >, leftVar, =, leftScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, leftVar, ==, null, )]
[,, blindScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >, leftVar, =, leftScope, ., findUniqueRefinedSlot, (, blindScope, ), ;]
[,, !, condition, ), ;, StaticSlot, <, JSType, >, leftVar, =, leftScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (]
[), ;, StaticSlot, <, JSType, >, leftVar, =, leftScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, leftVar, ==, null]
[), ;, StaticSlot, <, JSType, >, leftVar, =, leftScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, leftVar, ==, null]
[;, if, (, leftVar, ==, null, ), {, return, blindScope, ;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope]
[., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, leftVar, ==, null, ), {, return, blindScope, ;, }, FlowScope, rightScope, =]
[), ;, if, (, leftVar, ==, null, ), {, return, blindScope, ;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,]
[), {, return, blindScope, ;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, rightScope, =]
[==, null, ), {, return, blindScope, ;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;]
[), {, return, blindScope, ;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, rightScope, =]
[;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,]
[;, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, rightScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >, rightVar, =, rightScope]
[,, blindScope, ,, condition, ), ;, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, rightScope, ,, !, condition, ), ;, StaticSlot, <]
[,, condition, ), ;, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, rightScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >]
[), ;, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, rightScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >, rightVar, =]
[=, firstPreciserScopeKnowingConditionOutcome, (, right, ,, rightScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot]
[;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, rightVar, ==, null, ||]
[,, rightScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;]
[,, !, condition, ), ;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (]
[), ;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, rightVar, ==, null]
[), ;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, rightVar, ==, null]
[;, if, (, rightVar, ==, null, ||, !, leftVar, ., getName, (, ), ., equals, (, rightVar, ., getName, (]
[., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, rightVar, ==, null, ||, !, leftVar, ., getName, (, ), ., equals]
[), ;, if, (, rightVar, ==, null, ||, !, leftVar, ., getName, (, ), ., equals, (, rightVar, ., getName]
[), {, return, blindScope, ;, }, JSType, type, =, leftVar, ., getType, (, ), ., getLeastSupertype, (, rightVar, ., getType]
[||, !, leftVar, ., getName, (, ), ., equals, (, rightVar, ., getName, (, ), ), ), {, return, blindScope]
[==, null, ||, !, leftVar, ., getName, (, ), ., equals, (, rightVar, ., getName, (, ), ), ), {]
[||, !, leftVar, ., getName, (, ), ., equals, (, rightVar, ., getName, (, ), ), ), {, return, blindScope]
[), {, return, blindScope, ;, }, JSType, type, =, leftVar, ., getType, (, ), ., getLeastSupertype, (, rightVar, ., getType]
[), {, return, blindScope, ;, }, JSType, type, =, leftVar, ., getType, (, ), ., getLeastSupertype, (, rightVar, ., getType]
[., equals, (, rightVar, ., getName, (, ), ), ), {, return, blindScope, ;, }, JSType, type, =, leftVar, .]
[., getName, (, ), ., equals, (, rightVar, ., getName, (, ), ), ), {, return, blindScope, ;, }, JSType]
[), ), {, return, blindScope, ;, }, JSType, type, =, leftVar, ., getType, (, ), ., getLeastSupertype, (, rightVar, .]
[., getName, (, ), ), ), {, return, blindScope, ;, }, JSType, type, =, leftVar, ., getType, (, ), .]
[;, }, JSType, type, =, leftVar, ., getType, (, ), ., getLeastSupertype, (, rightVar, ., getType, (, ), ), ;]
[;, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, informed, ., inferSlotType, (, leftVar, ., getName, (, ), ,]
[., getLeastSupertype, (, rightVar, ., getType, (, ), ), ;, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, informed]
[., getType, (, ), ., getLeastSupertype, (, rightVar, ., getType, (, ), ), ;, FlowScope, informed, =, blindScope, ., createChildFlowScope]
[), ;, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, informed, ., inferSlotType, (, leftVar, ., getName, (, )]
[., getType, (, ), ), ;, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, informed, ., inferSlotType, (, leftVar]
[;, informed, ., inferSlotType, (, leftVar, ., getName, (, ), ,, type, ), ;, return, informed, ;, }, private, FlowScope]
[., createChildFlowScope, (, ), ;, informed, ., inferSlotType, (, leftVar, ., getName, (, ), ,, type, ), ;, return, informed]
[;, return, informed, ;, }, private, FlowScope, maybeRestrictName, (, FlowScope, blindScope, ,, Node, node, ,, JSType, originalType, ,, JSType, restrictedType]
[., inferSlotType, (, leftVar, ., getName, (, ), ,, type, ), ;, return, informed, ;, }, private, FlowScope, maybeRestrictName, (]
[,, type, ), ;, return, informed, ;, }, private, FlowScope, maybeRestrictName, (, FlowScope, blindScope, ,, Node, node, ,, JSType, originalType]
[., getName, (, ), ,, type, ), ;, return, informed, ;, }, private, FlowScope, maybeRestrictName, (, FlowScope, blindScope, ,, Node]
[), ;, return, informed, ;, }, private, FlowScope, maybeRestrictName, (, FlowScope, blindScope, ,, Node, node, ,, JSType, originalType, ,, JSType]
[;, }, private, FlowScope, maybeRestrictName, (, FlowScope, blindScope, ,, Node, node, ,, JSType, originalType, ,, JSType, restrictedType, ), {, if]
[), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, node, ,, restrictedType, ), ;]
[&&, restrictedType, !=, originalType, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, node]
[!=, null, &&, restrictedType, !=, originalType, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed]
[&&, restrictedType, !=, originalType, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, node]
[), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, node, ,, restrictedType, ), ;]
[!=, originalType, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, node, ,, restrictedType]
[), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, node, ,, restrictedType, ), ;]
[;, declareNameInScope, (, informed, ,, node, ,, restrictedType, ), ;, return, informed, ;, }, return, blindScope, ;, }, private, FlowScope]
[., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, node, ,, restrictedType, ), ;, return, informed, ;, }, return, blindScope]
[;, return, informed, ;, }, return, blindScope, ;, }, private, FlowScope, maybeRestrictTwoNames, (, FlowScope, blindScope, ,, Node, left, ,, JSType]
[,, node, ,, restrictedType, ), ;, return, informed, ;, }, return, blindScope, ;, }, private, FlowScope, maybeRestrictTwoNames, (, FlowScope, blindScope]
[,, restrictedType, ), ;, return, informed, ;, }, return, blindScope, ;, }, private, FlowScope, maybeRestrictTwoNames, (, FlowScope, blindScope, ,, Node]
[), ;, return, informed, ;, }, return, blindScope, ;, }, private, FlowScope, maybeRestrictTwoNames, (, FlowScope, blindScope, ,, Node, left, ,]
[;, }, return, blindScope, ;, }, private, FlowScope, maybeRestrictTwoNames, (, FlowScope, blindScope, ,, Node, left, ,, JSType, originalLeftType, ,, JSType]
[;, }, private, FlowScope, maybeRestrictTwoNames, (, FlowScope, blindScope, ,, Node, left, ,, JSType, originalLeftType, ,, JSType, restrictedLeftType, ,, Node, right]
[;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope]
[&&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||]
[!=, null, &&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (]
[&&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||]
[;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope]
[!=, originalLeftType, ;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||, shouldRefineRight, )]
[;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope]
[;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if, (, shouldRefineLeft]
[&&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, )]
[!=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope]
[&&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, )]
[;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if, (, shouldRefineLeft]
[!=, originalRightType, ;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if]
[;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if, (, shouldRefineLeft]
[), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if, (, shouldRefineLeft, ), {, declareNameInScope, (, informed, ,]
[||, shouldRefineRight, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if, (, shouldRefineLeft, ), {, declareNameInScope, (]
[), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if, (, shouldRefineLeft, ), {, declareNameInScope, (, informed, ,]
[;, if, (, shouldRefineLeft, ), {, declareNameInScope, (, informed, ,, left, ,, restrictedLeftType, ), ;, }, if, (, shouldRefineRight, )]
[., createChildFlowScope, (, ), ;, if, (, shouldRefineLeft, ), {, declareNameInScope, (, informed, ,, left, ,, restrictedLeftType, ), ;, }]
[), {, declareNameInScope, (, informed, ,, left, ,, restrictedLeftType, ), ;, }, if, (, shouldRefineRight, ), {, declareNameInScope, (, informed]
[;, }, if, (, shouldRefineRight, ), {, declareNameInScope, (, informed, ,, right, ,, restrictedRightType, ), ;, }, return, informed, ;]
[,, left, ,, restrictedLeftType, ), ;, }, if, (, shouldRefineRight, ), {, declareNameInScope, (, informed, ,, right, ,, restrictedRightType, )]
[,, restrictedLeftType, ), ;, }, if, (, shouldRefineRight, ), {, declareNameInScope, (, informed, ,, right, ,, restrictedRightType, ), ;, }]
[), ;, }, if, (, shouldRefineRight, ), {, declareNameInScope, (, informed, ,, right, ,, restrictedRightType, ), ;, }, return, informed]
[), {, declareNameInScope, (, informed, ,, right, ,, restrictedRightType, ), ;, }, return, informed, ;, }, return, blindScope, ;, }]
[;, }, return, informed, ;, }, return, blindScope, ;, }, private, FlowScope, caseNameOrGetProp, (, Node, name, ,, FlowScope, blindScope, ,]
[,, right, ,, restrictedRightType, ), ;, }, return, informed, ;, }, return, blindScope, ;, }, private, FlowScope, caseNameOrGetProp, (, Node]
[,, restrictedRightType, ), ;, }, return, informed, ;, }, return, blindScope, ;, }, private, FlowScope, caseNameOrGetProp, (, Node, name, ,]
[), ;, }, return, informed, ;, }, return, blindScope, ;, }, private, FlowScope, caseNameOrGetProp, (, Node, name, ,, FlowScope, blindScope]
[;, }, return, blindScope, ;, }, private, FlowScope, caseNameOrGetProp, (, Node, name, ,, FlowScope, blindScope, ,, boolean, outcome, ), {]
[;, }, private, FlowScope, caseNameOrGetProp, (, Node, name, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType, type, =, getTypeIfRefinable]
[;, if, (, type, !=, null, ), {, return, maybeRestrictName, (, blindScope, ,, name, ,, type, ,, type, ., getRestrictedTypeGivenToBooleanOutcome]
[,, blindScope, ), ;, if, (, type, !=, null, ), {, return, maybeRestrictName, (, blindScope, ,, name, ,, type, ,]
[), ;, if, (, type, !=, null, ), {, return, maybeRestrictName, (, blindScope, ,, name, ,, type, ,, type, .]
[), {, return, maybeRestrictName, (, blindScope, ,, name, ,, type, ,, type, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }]
[!=, null, ), {, return, maybeRestrictName, (, blindScope, ,, name, ,, type, ,, type, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), )]
[), {, return, maybeRestrictName, (, blindScope, ,, name, ,, type, ,, type, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }]
[;, }, return, blindScope, ;, }, private, FlowScope, caseTypeOf, (, Node, node, ,, JSType, type, ,, String, value, ,, boolean]
[,, name, ,, type, ,, type, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }, return, blindScope, ;, }, private, FlowScope]
[,, type, ,, type, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }, return, blindScope, ;, }, private, FlowScope, caseTypeOf, (]
[,, type, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }, return, blindScope, ;, }, private, FlowScope, caseTypeOf, (, Node, node]
[), ;, }, return, blindScope, ;, }, private, FlowScope, caseTypeOf, (, Node, node, ,, JSType, type, ,, String, value, ,]
[., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }, return, blindScope, ;, }, private, FlowScope, caseTypeOf, (, Node, node, ,, JSType]
[), ), ;, }, return, blindScope, ;, }, private, FlowScope, caseTypeOf, (, Node, node, ,, JSType, type, ,, String, value]
[;, }, private, FlowScope, caseTypeOf, (, Node, node, ,, JSType, type, ,, String, value, ,, boolean, resultEqualsValue, ,, FlowScope, blindScope]
[;, }, private, FlowScope, caseInstanceOf, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType]
[,, node, ,, type, ,, getRestrictedByTypeOfResult, (, type, ,, value, ,, resultEqualsValue, ), ), ;, }, private, FlowScope, caseInstanceOf, (]
[,, type, ,, getRestrictedByTypeOfResult, (, type, ,, value, ,, resultEqualsValue, ), ), ;, }, private, FlowScope, caseInstanceOf, (, Node, left]
[,, getRestrictedByTypeOfResult, (, type, ,, value, ,, resultEqualsValue, ), ), ;, }, private, FlowScope, caseInstanceOf, (, Node, left, ,, Node]
[), ;, }, private, FlowScope, caseInstanceOf, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, outcome, ), {]
[,, value, ,, resultEqualsValue, ), ), ;, }, private, FlowScope, caseInstanceOf, (, Node, left, ,, Node, right, ,, FlowScope, blindScope]
[,, resultEqualsValue, ), ), ;, }, private, FlowScope, caseInstanceOf, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean]
[), ), ;, }, private, FlowScope, caseInstanceOf, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, outcome, )]
[;, if, (, leftType, ==, null, ), {, return, blindScope, ;, }, JSType, rightType, =, right, ., getJSType, (, )]
[,, blindScope, ), ;, if, (, leftType, ==, null, ), {, return, blindScope, ;, }, JSType, rightType, =, right, .]
[), ;, if, (, leftType, ==, null, ), {, return, blindScope, ;, }, JSType, rightType, =, right, ., getJSType, (]
[), {, return, blindScope, ;, }, JSType, rightType, =, right, ., getJSType, (, ), ;, ObjectType, targetType, =, typeRegistry, .]
[==, null, ), {, return, blindScope, ;, }, JSType, rightType, =, right, ., getJSType, (, ), ;, ObjectType, targetType, =]
[), {, return, blindScope, ;, }, JSType, rightType, =, right, ., getJSType, (, ), ;, ObjectType, targetType, =, typeRegistry, .]
[;, }, JSType, rightType, =, right, ., getJSType, (, ), ;, ObjectType, targetType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, .]
[;, ObjectType, targetType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (, rightType, !=, null, &&, rightType]
[., getJSType, (, ), ;, ObjectType, targetType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (, rightType]
[;, if, (, rightType, !=, null, &&, rightType, ., isFunctionType, (, ), ), {, targetType, =, rightType, ., toMaybeFunctionType, (]
[., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (, rightType, !=, null, &&, rightType, ., isFunctionType, (, ), )]
[), ;, if, (, rightType, !=, null, &&, rightType, ., isFunctionType, (, ), ), {, targetType, =, rightType, ., toMaybeFunctionType]
[., UNKNOWN_TYPE, ), ;, if, (, rightType, !=, null, &&, rightType, ., isFunctionType, (, ), ), {, targetType, =, rightType]
[), {, targetType, =, rightType, ., toMaybeFunctionType, (, ), ;, }, Visitor, <, JSType, >, visitor, ;, if, (, outcome]
[&&, rightType, ., isFunctionType, (, ), ), {, targetType, =, rightType, ., toMaybeFunctionType, (, ), ;, }, Visitor, <, JSType]
[!=, null, &&, rightType, ., isFunctionType, (, ), ), {, targetType, =, rightType, ., toMaybeFunctionType, (, ), ;, }, Visitor]
[&&, rightType, ., isFunctionType, (, ), ), {, targetType, =, rightType, ., toMaybeFunctionType, (, ), ;, }, Visitor, <, JSType]
[), {, targetType, =, rightType, ., toMaybeFunctionType, (, ), ;, }, Visitor, <, JSType, >, visitor, ;, if, (, outcome]
[., isFunctionType, (, ), ), {, targetType, =, rightType, ., toMaybeFunctionType, (, ), ;, }, Visitor, <, JSType, >, visitor]
[=, rightType, ., toMaybeFunctionType, (, ), ;, }, Visitor, <, JSType, >, visitor, ;, if, (, outcome, ), {, visitor]
[;, }, Visitor, <, JSType, >, visitor, ;, if, (, outcome, ), {, visitor, =, new, RestrictByTrueInstanceOfResultVisitor, (, targetType, )]
[., toMaybeFunctionType, (, ), ;, }, Visitor, <, JSType, >, visitor, ;, if, (, outcome, ), {, visitor, =, new]
[), {, visitor, =, new, RestrictByTrueInstanceOfResultVisitor, (, targetType, ), ;, }, else, {, visitor, =, new, RestrictByFalseInstanceOfResultVisitor, (, targetType, )]
[=, new, RestrictByTrueInstanceOfResultVisitor, (, targetType, ), ;, }, else, {, visitor, =, new, RestrictByFalseInstanceOfResultVisitor, (, targetType, ), ;, }, return]
[;, }, else, {, visitor, =, new, RestrictByFalseInstanceOfResultVisitor, (, targetType, ), ;, }, return, maybeRestrictName, (, blindScope, ,, left, ,]
[), ;, }, else, {, visitor, =, new, RestrictByFalseInstanceOfResultVisitor, (, targetType, ), ;, }, return, maybeRestrictName, (, blindScope, ,, left]
[=, new, RestrictByFalseInstanceOfResultVisitor, (, targetType, ), ;, }, return, maybeRestrictName, (, blindScope, ,, left, ,, leftType, ,, leftType, ., visit]
[;, }, return, maybeRestrictName, (, blindScope, ,, left, ,, leftType, ,, leftType, ., visit, (, visitor, ), ), ;, }]
[), ;, }, return, maybeRestrictName, (, blindScope, ,, left, ,, leftType, ,, leftType, ., visit, (, visitor, ), ), ;]
[;, }, private, FlowScope, caseIn, (, Node, object, ,, String, propertyName, ,, FlowScope, blindScope, ), {, JSType, jsType, =, object]
[,, left, ,, leftType, ,, leftType, ., visit, (, visitor, ), ), ;, }, private, FlowScope, caseIn, (, Node, object]
[,, leftType, ,, leftType, ., visit, (, visitor, ), ), ;, }, private, FlowScope, caseIn, (, Node, object, ,, String]
[,, leftType, ., visit, (, visitor, ), ), ;, }, private, FlowScope, caseIn, (, Node, object, ,, String, propertyName, ,]
[), ;, }, private, FlowScope, caseIn, (, Node, object, ,, String, propertyName, ,, FlowScope, blindScope, ), {, JSType, jsType, =]
[., visit, (, visitor, ), ), ;, }, private, FlowScope, caseIn, (, Node, object, ,, String, propertyName, ,, FlowScope, blindScope]
[), ), ;, }, private, FlowScope, caseIn, (, Node, object, ,, String, propertyName, ,, FlowScope, blindScope, ), {, JSType, jsType]
[;, jsType, =, this, ., getRestrictedWithoutNull, (, jsType, ), ;, jsType, =, this, ., getRestrictedWithoutUndefined, (, jsType, ), ;, boolean]
[., getJSType, (, ), ;, jsType, =, this, ., getRestrictedWithoutNull, (, jsType, ), ;, jsType, =, this, ., getRestrictedWithoutUndefined, (]
[=, this, ., getRestrictedWithoutNull, (, jsType, ), ;, jsType, =, this, ., getRestrictedWithoutUndefined, (, jsType, ), ;, boolean, hasProperty, =]
[;, jsType, =, this, ., getRestrictedWithoutUndefined, (, jsType, ), ;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =, ObjectType, .]
[., getRestrictedWithoutNull, (, jsType, ), ;, jsType, =, this, ., getRestrictedWithoutUndefined, (, jsType, ), ;, boolean, hasProperty, =, false, ;]
[), ;, jsType, =, this, ., getRestrictedWithoutUndefined, (, jsType, ), ;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =, ObjectType]
[=, this, ., getRestrictedWithoutUndefined, (, jsType, ), ;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =, ObjectType, ., cast, (]
[;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objectType, !=]
[., getRestrictedWithoutUndefined, (, jsType, ), ;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =, ObjectType, ., cast, (, jsType, )]
[), ;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objectType]
[;, ObjectType, objectType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objectType, !=, null, ), {, hasProperty, =]
[;, if, (, objectType, !=, null, ), {, hasProperty, =, objectType, ., hasProperty, (, propertyName, ), ;, }, if, (]
[., cast, (, jsType, ), ;, if, (, objectType, !=, null, ), {, hasProperty, =, objectType, ., hasProperty, (, propertyName]
[), ;, if, (, objectType, !=, null, ), {, hasProperty, =, objectType, ., hasProperty, (, propertyName, ), ;, }, if]
[), {, hasProperty, =, objectType, ., hasProperty, (, propertyName, ), ;, }, if, (, !, hasProperty, ), {, String, qualifiedName]
[!=, null, ), {, hasProperty, =, objectType, ., hasProperty, (, propertyName, ), ;, }, if, (, !, hasProperty, ), {]
[), {, hasProperty, =, objectType, ., hasProperty, (, propertyName, ), ;, }, if, (, !, hasProperty, ), {, String, qualifiedName]
[=, objectType, ., hasProperty, (, propertyName, ), ;, }, if, (, !, hasProperty, ), {, String, qualifiedName, =, object, .]
[;, }, if, (, !, hasProperty, ), {, String, qualifiedName, =, object, ., getQualifiedName, (, ), ;, if, (, qualifiedName]
[., hasProperty, (, propertyName, ), ;, }, if, (, !, hasProperty, ), {, String, qualifiedName, =, object, ., getQualifiedName, (]
[), ;, }, if, (, !, hasProperty, ), {, String, qualifiedName, =, object, ., getQualifiedName, (, ), ;, if, (]
[), {, String, qualifiedName, =, object, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName]
[), {, String, qualifiedName, =, object, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName]
[;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName, =, qualifiedName, +, ".", +, propertyName, ;, if, (, blindScope]
[., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName, =, qualifiedName, +, ".", +, propertyName]
[), {, String, propertyQualifiedName, =, qualifiedName, +, ".", +, propertyName, ;, if, (, blindScope, ., getSlot, (, propertyQualifiedName, ), ==]
[!=, null, ), {, String, propertyQualifiedName, =, qualifiedName, +, ".", +, propertyName, ;, if, (, blindScope, ., getSlot, (, propertyQualifiedName]
[), {, String, propertyQualifiedName, =, qualifiedName, +, ".", +, propertyName, ;, if, (, blindScope, ., getSlot, (, propertyQualifiedName, ), ==]
[;, if, (, blindScope, ., getSlot, (, propertyQualifiedName, ), ==, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (]
[+, propertyName, ;, if, (, blindScope, ., getSlot, (, propertyQualifiedName, ), ==, null, ), {, FlowScope, informed, =, blindScope, .]
[+, ".", +, propertyName, ;, if, (, blindScope, ., getSlot, (, propertyQualifiedName, ), ==, null, ), {, FlowScope, informed, =]
[+, propertyName, ;, if, (, blindScope, ., getSlot, (, propertyQualifiedName, ), ==, null, ), {, FlowScope, informed, =, blindScope, .]
[;, if, (, blindScope, ., getSlot, (, propertyQualifiedName, ), ==, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (]
[), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, JSType, unknownType, =, typeRegistry, ., getNativeType, (, JSTypeNative, .]
[==, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, JSType, unknownType, =, typeRegistry, ., getNativeType, (]
[., getSlot, (, propertyQualifiedName, ), ==, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, JSType, unknownType]
[), ==, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, JSType, unknownType, =, typeRegistry, ., getNativeType]
[), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, JSType, unknownType, =, typeRegistry, ., getNativeType, (, JSTypeNative, .]
[;, JSType, unknownType, =, typeRegistry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, informed, ., inferQualifiedSlot, (, object, ,, propertyQualifiedName]
[., createChildFlowScope, (, ), ;, JSType, unknownType, =, typeRegistry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, informed, ., inferQualifiedSlot]
[;, informed, ., inferQualifiedSlot, (, object, ,, propertyQualifiedName, ,, unknownType, ,, unknownType, ), ;, return, informed, ;, }, }, }]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, informed, ., inferQualifiedSlot, (, object, ,, propertyQualifiedName, ,, unknownType, ,, unknownType, )]
[), ;, informed, ., inferQualifiedSlot, (, object, ,, propertyQualifiedName, ,, unknownType, ,, unknownType, ), ;, return, informed, ;, }, }]
[., UNKNOWN_TYPE, ), ;, informed, ., inferQualifiedSlot, (, object, ,, propertyQualifiedName, ,, unknownType, ,, unknownType, ), ;, return, informed, ;]
[;, return, informed, ;, }, }, }, return, blindScope, ;, }, private, class, RestrictByTrueInstanceOfResultVisitor, extends, RestrictByTrueTypeOfResultVisitor, {, private, final, ObjectType]
[., inferQualifiedSlot, (, object, ,, propertyQualifiedName, ,, unknownType, ,, unknownType, ), ;, return, informed, ;, }, }, }, return, blindScope]
[,, propertyQualifiedName, ,, unknownType, ,, unknownType, ), ;, return, informed, ;, }, }, }, return, blindScope, ;, }, private, class]
[,, unknownType, ,, unknownType, ), ;, return, informed, ;, }, }, }, return, blindScope, ;, }, private, class, RestrictByTrueInstanceOfResultVisitor, extends]
[,, unknownType, ), ;, return, informed, ;, }, }, }, return, blindScope, ;, }, private, class, RestrictByTrueInstanceOfResultVisitor, extends, RestrictByTrueTypeOfResultVisitor, {]
[), ;, return, informed, ;, }, }, }, return, blindScope, ;, }, private, class, RestrictByTrueInstanceOfResultVisitor, extends, RestrictByTrueTypeOfResultVisitor, {, private, final]
[;, }, }, }, return, blindScope, ;, }, private, class, RestrictByTrueInstanceOfResultVisitor, extends, RestrictByTrueTypeOfResultVisitor, {, private, final, ObjectType, target, ;, RestrictByTrueInstanceOfResultVisitor]
[;, }, private, class, RestrictByTrueInstanceOfResultVisitor, extends, RestrictByTrueTypeOfResultVisitor, {, private, final, ObjectType, target, ;, RestrictByTrueInstanceOfResultVisitor, (, ObjectType, target, ), {, this]
[=, target, ;, }, @, Override, protected, JSType, caseTopType, (, JSType, type, ), {, return, applyCommonRestriction, (, type, ), ;]
[., target, =, target, ;, }, @, Override, protected, JSType, caseTopType, (, JSType, type, ), {, return, applyCommonRestriction, (, type]
[;, }, @, Override, protected, JSType, caseTopType, (, JSType, type, ), {, return, applyCommonRestriction, (, type, ), ;, }, @]
[;, }, @, Override, public, JSType, caseUnknownType, (, ), {, FunctionType, funcTarget, =, JSType, ., toMaybeFunctionType, (, target, ), ;]
[), ;, }, @, Override, public, JSType, caseUnknownType, (, ), {, FunctionType, funcTarget, =, JSType, ., toMaybeFunctionType, (, target, )]
[;, if, (, funcTarget, !=, null, &&, funcTarget, ., hasInstanceType, (, ), ), {, return, funcTarget, ., getInstanceType, (, )]
[., toMaybeFunctionType, (, target, ), ;, if, (, funcTarget, !=, null, &&, funcTarget, ., hasInstanceType, (, ), ), {, return]
[), ;, if, (, funcTarget, !=, null, &&, funcTarget, ., hasInstanceType, (, ), ), {, return, funcTarget, ., getInstanceType, (]
[), {, return, funcTarget, ., getInstanceType, (, ), ;, }, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public]
[&&, funcTarget, ., hasInstanceType, (, ), ), {, return, funcTarget, ., getInstanceType, (, ), ;, }, return, getNativeType, (, UNKNOWN_TYPE]
[!=, null, &&, funcTarget, ., hasInstanceType, (, ), ), {, return, funcTarget, ., getInstanceType, (, ), ;, }, return, getNativeType]
[&&, funcTarget, ., hasInstanceType, (, ), ), {, return, funcTarget, ., getInstanceType, (, ), ;, }, return, getNativeType, (, UNKNOWN_TYPE]
[), {, return, funcTarget, ., getInstanceType, (, ), ;, }, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public]
[., hasInstanceType, (, ), ), {, return, funcTarget, ., getInstanceType, (, ), ;, }, return, getNativeType, (, UNKNOWN_TYPE, ), ;]
[;, }, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return]
[., getInstanceType, (, ), ;, }, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType]
[;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return, applyCommonRestriction, (, type, ), ;, }, @]
[), ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return, applyCommonRestriction, (, type, ), ;, }]
[;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return, applyCommonRestriction, (, type, ), ;, }, @]
[), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return, applyCommonRestriction, (, type, ), ;, }]
[;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return, caseObjectType, (, type, ), ;, }, private]
[), ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return, caseObjectType, (, type, ), ;, }]
[;, }, private, JSType, applyCommonRestriction, (, JSType, type, ), {, if, (, target, ., isUnknownType, (, ), ), {, return]
[), ;, }, private, JSType, applyCommonRestriction, (, JSType, type, ), {, if, (, target, ., isUnknownType, (, ), ), {]
[), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType]
[., isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if]
[;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {]
[;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return, type, ., getGreatestSubtype, (, funcTarget, ., getInstanceType, (, )]
[., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return, type, ., getGreatestSubtype, (, funcTarget]
[), {, return, type, ., getGreatestSubtype, (, funcTarget, ., getInstanceType, (, ), ), ;, }, return, null, ;, }, }]
[., hasInstanceType, (, ), ), {, return, type, ., getGreatestSubtype, (, funcTarget, ., getInstanceType, (, ), ), ;, }, return]
[;, }, return, null, ;, }, }, private, class, RestrictByFalseInstanceOfResultVisitor, extends, RestrictByFalseTypeOfResultVisitor, {, private, final, ObjectType, target, ;, RestrictByFalseInstanceOfResultVisitor, (]
[., getGreatestSubtype, (, funcTarget, ., getInstanceType, (, ), ), ;, }, return, null, ;, }, }, private, class, RestrictByFalseInstanceOfResultVisitor, extends]
[), ;, }, return, null, ;, }, }, private, class, RestrictByFalseInstanceOfResultVisitor, extends, RestrictByFalseTypeOfResultVisitor, {, private, final, ObjectType, target, ;, RestrictByFalseInstanceOfResultVisitor]
[., getInstanceType, (, ), ), ;, }, return, null, ;, }, }, private, class, RestrictByFalseInstanceOfResultVisitor, extends, RestrictByFalseTypeOfResultVisitor, {, private, final]
[;, }, }, private, class, RestrictByFalseInstanceOfResultVisitor, extends, RestrictByFalseTypeOfResultVisitor, {, private, final, ObjectType, target, ;, RestrictByFalseInstanceOfResultVisitor, (, ObjectType, target, ), {]
[=, target, ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, if, (, target, ., isUnknownType, (]
[., target, =, target, ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, if, (, target, .]
[;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, if, (, target, ., isUnknownType, (, ), )]
[), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType]
[., isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if]
[;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {]
[;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, if, (, type, ., isSubtype, (, funcTarget, ., getInstanceType, (]
[., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, if, (, type, ., isSubtype, (]
[), {, if, (, type, ., isSubtype, (, funcTarget, ., getInstanceType, (, ), ), ), {, return, null, ;, }]
[., hasInstanceType, (, ), ), {, if, (, type, ., isSubtype, (, funcTarget, ., getInstanceType, (, ), ), ), {]
[), {, return, null, ;, }, return, type, ;, }, return, null, ;, }, @, Override, public, JSType, caseUnionType, (]
[., isSubtype, (, funcTarget, ., getInstanceType, (, ), ), ), {, return, null, ;, }, return, type, ;, }, return]
[), ), {, return, null, ;, }, return, type, ;, }, return, null, ;, }, @, Override, public, JSType, caseUnionType]
[., getInstanceType, (, ), ), ), {, return, null, ;, }, return, type, ;, }, return, null, ;, }, @]
[;, }, return, type, ;, }, return, null, ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {]
[;, }, return, null, ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, if, (, target, .]
[;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, if, (, target, ., isUnknownType, (, ), )]
[), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType]
[., isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if]
[;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {]
[;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return, type, ., getRestrictedUnion, (, funcTarget, ., getInstanceType, (, )]
[., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return, type, ., getRestrictedUnion, (, funcTarget]
[), {, return, type, ., getRestrictedUnion, (, funcTarget, ., getInstanceType, (, ), ), ;, }, return, null, ;, }, @]
[., hasInstanceType, (, ), ), {, return, type, ., getRestrictedUnion, (, funcTarget, ., getInstanceType, (, ), ), ;, }, return]
[;, }, return, null, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return, caseObjectType, (, type]
[., getRestrictedUnion, (, funcTarget, ., getInstanceType, (, ), ), ;, }, return, null, ;, }, @, Override, public, JSType, caseFunctionType]
[), ;, }, return, null, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return, caseObjectType, (]
[., getInstanceType, (, ), ), ;, }, return, null, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, )]
[;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return, caseObjectType, (, type, ), ;, }, }]
[;, }, }, }]
[), ;, }, }, }]
