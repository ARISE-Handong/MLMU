[;, private, double, top, ;, private, double, bottom, ;, private, double, left, ;, private, double, right, ;, public, AxisSpace, (]
[;, private, double, top, ;, private, double, bottom, ;, private, double, left, ;, private, double, right, ;, public, AxisSpace, (]
[=, 0.0, ;, this, ., bottom, =, 0.0, ;, this, ., left, =, 0.0, ;, this, ., right, =, 0.0]
[., top, =, 0.0, ;, this, ., bottom, =, 0.0, ;, this, ., left, =, 0.0, ;, this, ., right]
[;, this, ., bottom, =, 0.0, ;, this, ., left, =, 0.0, ;, this, ., right, =, 0.0, ;, }]
[=, 0.0, ;, this, ., left, =, 0.0, ;, this, ., right, =, 0.0, ;, }, public, double, getTop, (]
[., bottom, =, 0.0, ;, this, ., left, =, 0.0, ;, this, ., right, =, 0.0, ;, }, public, double]
[;, this, ., left, =, 0.0, ;, this, ., right, =, 0.0, ;, }, public, double, getTop, (, ), {]
[=, 0.0, ;, this, ., right, =, 0.0, ;, }, public, double, getTop, (, ), {, return, this, ., top]
[., left, =, 0.0, ;, this, ., right, =, 0.0, ;, }, public, double, getTop, (, ), {, return, this]
[;, this, ., right, =, 0.0, ;, }, public, double, getTop, (, ), {, return, this, ., top, ;, }]
[=, 0.0, ;, }, public, double, getTop, (, ), {, return, this, ., top, ;, }, public, void, setTop, (]
[., right, =, 0.0, ;, }, public, double, getTop, (, ), {, return, this, ., top, ;, }, public, void]
[;, }, public, double, getTop, (, ), {, return, this, ., top, ;, }, public, void, setTop, (, double, space]
[;, }, public, void, setTop, (, double, space, ), {, this, ., top, =, space, ;, }, public, double, getBottom]
[., top, ;, }, public, void, setTop, (, double, space, ), {, this, ., top, =, space, ;, }, public]
[=, space, ;, }, public, double, getBottom, (, ), {, return, this, ., bottom, ;, }, public, void, setBottom, (]
[., top, =, space, ;, }, public, double, getBottom, (, ), {, return, this, ., bottom, ;, }, public, void]
[;, }, public, double, getBottom, (, ), {, return, this, ., bottom, ;, }, public, void, setBottom, (, double, space]
[;, }, public, void, setBottom, (, double, space, ), {, this, ., bottom, =, space, ;, }, public, double, getLeft]
[., bottom, ;, }, public, void, setBottom, (, double, space, ), {, this, ., bottom, =, space, ;, }, public]
[=, space, ;, }, public, double, getLeft, (, ), {, return, this, ., left, ;, }, public, void, setLeft, (]
[., bottom, =, space, ;, }, public, double, getLeft, (, ), {, return, this, ., left, ;, }, public, void]
[;, }, public, double, getLeft, (, ), {, return, this, ., left, ;, }, public, void, setLeft, (, double, space]
[;, }, public, void, setLeft, (, double, space, ), {, this, ., left, =, space, ;, }, public, double, getRight]
[., left, ;, }, public, void, setLeft, (, double, space, ), {, this, ., left, =, space, ;, }, public]
[=, space, ;, }, public, double, getRight, (, ), {, return, this, ., right, ;, }, public, void, setRight, (]
[., left, =, space, ;, }, public, double, getRight, (, ), {, return, this, ., right, ;, }, public, void]
[;, }, public, double, getRight, (, ), {, return, this, ., right, ;, }, public, void, setRight, (, double, space]
[;, }, public, void, setRight, (, double, space, ), {, this, ., right, =, space, ;, }, public, void, add]
[., right, ;, }, public, void, setRight, (, double, space, ), {, this, ., right, =, space, ;, }, public]
[=, space, ;, }, public, void, add, (, double, space, ,, RectangleEdge, edge, ), {, if, (, edge, ==, null]
[., right, =, space, ;, }, public, void, add, (, double, space, ,, RectangleEdge, edge, ), {, if, (, edge]
[;, }, public, void, add, (, double, space, ,, RectangleEdge, edge, ), {, if, (, edge, ==, null, ), {]
[), {, throw, new, IllegalArgumentException, (, "Null 'edge' argument.", ), ;, }, if, (, edge, ==, RectangleEdge, ., TOP, ), {, this]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'edge' argument.", ), ;, }, if, (, edge, ==, RectangleEdge, ., TOP, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'edge' argument.", ), ;, }, if, (, edge, ==, RectangleEdge, ., TOP, ), {, this]
[;, }, if, (, edge, ==, RectangleEdge, ., TOP, ), {, this, ., top, +=, space, ;, }, else, if]
[), ;, }, if, (, edge, ==, RectangleEdge, ., TOP, ), {, this, ., top, +=, space, ;, }, else]
[), {, this, ., top, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, this]
[==, RectangleEdge, ., TOP, ), {, this, ., top, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, .]
[), {, this, ., top, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, this]
[., TOP, ), {, this, ., top, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[+=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, this, ., bottom, +=, space, ;]
[., top, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, this, ., bottom, +=]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, this, ., bottom, +=, space, ;, }, else]
[), {, this, ., bottom, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, this]
[==, RectangleEdge, ., BOTTOM, ), {, this, ., bottom, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, .]
[), {, this, ., bottom, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, this]
[., BOTTOM, ), {, this, ., bottom, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, )]
[+=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, this, ., left, +=, space, ;]
[., bottom, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, this, ., left, +=]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, this, ., left, +=, space, ;, }, else]
[), {, this, ., left, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, this]
[==, RectangleEdge, ., LEFT, ), {, this, ., left, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, .]
[), {, this, ., left, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, this]
[., LEFT, ), {, this, ., left, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[+=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, this, ., right, +=, space, ;]
[., left, +=, space, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, this, ., right, +=]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, this, ., right, +=, space, ;, }, else]
[), {, this, ., right, +=, space, ;, }, else, {, throw, new, IllegalStateException, (, "Unrecognised 'edge' argument.", ), ;, }, }]
[==, RectangleEdge, ., RIGHT, ), {, this, ., right, +=, space, ;, }, else, {, throw, new, IllegalStateException, (, "Unrecognised 'edge' argument."]
[), {, this, ., right, +=, space, ;, }, else, {, throw, new, IllegalStateException, (, "Unrecognised 'edge' argument.", ), ;, }, }]
[., RIGHT, ), {, this, ., right, +=, space, ;, }, else, {, throw, new, IllegalStateException, (, "Unrecognised 'edge' argument.", ), ;]
[+=, space, ;, }, else, {, throw, new, IllegalStateException, (, "Unrecognised 'edge' argument.", ), ;, }, }, public, void, ensureAtLeast, (, AxisSpace]
[., right, +=, space, ;, }, else, {, throw, new, IllegalStateException, (, "Unrecognised 'edge' argument.", ), ;, }, }, public, void, ensureAtLeast]
[;, }, else, {, throw, new, IllegalStateException, (, "Unrecognised 'edge' argument.", ), ;, }, }, public, void, ensureAtLeast, (, AxisSpace, space, )]
[;, }, }, public, void, ensureAtLeast, (, AxisSpace, space, ), {, this, ., top, =, Math, ., max, (, this]
[), ;, }, }, public, void, ensureAtLeast, (, AxisSpace, space, ), {, this, ., top, =, Math, ., max, (]
[=, Math, ., max, (, this, ., top, ,, space, ., top, ), ;, this, ., bottom, =, Math, .]
[., top, =, Math, ., max, (, this, ., top, ,, space, ., top, ), ;, this, ., bottom, =]
[;, this, ., bottom, =, Math, ., max, (, this, ., bottom, ,, space, ., bottom, ), ;, this, .]
[., max, (, this, ., top, ,, space, ., top, ), ;, this, ., bottom, =, Math, ., max, (]
[,, space, ., top, ), ;, this, ., bottom, =, Math, ., max, (, this, ., bottom, ,, space, .]
[., top, ,, space, ., top, ), ;, this, ., bottom, =, Math, ., max, (, this, ., bottom, ,]
[), ;, this, ., bottom, =, Math, ., max, (, this, ., bottom, ,, space, ., bottom, ), ;, this]
[., top, ), ;, this, ., bottom, =, Math, ., max, (, this, ., bottom, ,, space, ., bottom, )]
[=, Math, ., max, (, this, ., bottom, ,, space, ., bottom, ), ;, this, ., left, =, Math, .]
[., bottom, =, Math, ., max, (, this, ., bottom, ,, space, ., bottom, ), ;, this, ., left, =]
[;, this, ., left, =, Math, ., max, (, this, ., left, ,, space, ., left, ), ;, this, .]
[., max, (, this, ., bottom, ,, space, ., bottom, ), ;, this, ., left, =, Math, ., max, (]
[,, space, ., bottom, ), ;, this, ., left, =, Math, ., max, (, this, ., left, ,, space, .]
[., bottom, ,, space, ., bottom, ), ;, this, ., left, =, Math, ., max, (, this, ., left, ,]
[), ;, this, ., left, =, Math, ., max, (, this, ., left, ,, space, ., left, ), ;, this]
[., bottom, ), ;, this, ., left, =, Math, ., max, (, this, ., left, ,, space, ., left, )]
[=, Math, ., max, (, this, ., left, ,, space, ., left, ), ;, this, ., right, =, Math, .]
[., left, =, Math, ., max, (, this, ., left, ,, space, ., left, ), ;, this, ., right, =]
[;, this, ., right, =, Math, ., max, (, this, ., right, ,, space, ., right, ), ;, }, public]
[., max, (, this, ., left, ,, space, ., left, ), ;, this, ., right, =, Math, ., max, (]
[,, space, ., left, ), ;, this, ., right, =, Math, ., max, (, this, ., right, ,, space, .]
[., left, ,, space, ., left, ), ;, this, ., right, =, Math, ., max, (, this, ., right, ,]
[), ;, this, ., right, =, Math, ., max, (, this, ., right, ,, space, ., right, ), ;, }]
[., left, ), ;, this, ., right, =, Math, ., max, (, this, ., right, ,, space, ., right, )]
[=, Math, ., max, (, this, ., right, ,, space, ., right, ), ;, }, public, void, ensureAtLeast, (, double]
[., right, =, Math, ., max, (, this, ., right, ,, space, ., right, ), ;, }, public, void, ensureAtLeast]
[;, }, public, void, ensureAtLeast, (, double, space, ,, RectangleEdge, edge, ), {, if, (, edge, ==, RectangleEdge, ., TOP]
[., max, (, this, ., right, ,, space, ., right, ), ;, }, public, void, ensureAtLeast, (, double, space, ,]
[,, space, ., right, ), ;, }, public, void, ensureAtLeast, (, double, space, ,, RectangleEdge, edge, ), {, if, (]
[., right, ,, space, ., right, ), ;, }, public, void, ensureAtLeast, (, double, space, ,, RectangleEdge, edge, ), {]
[), ;, }, public, void, ensureAtLeast, (, double, space, ,, RectangleEdge, edge, ), {, if, (, edge, ==, RectangleEdge, .]
[., right, ), ;, }, public, void, ensureAtLeast, (, double, space, ,, RectangleEdge, edge, ), {, if, (, edge, ==]
[), {, if, (, this, ., top, <, space, ), {, this, ., top, =, space, ;, }, }, else]
[==, RectangleEdge, ., TOP, ), {, if, (, this, ., top, <, space, ), {, this, ., top, =, space]
[), {, if, (, this, ., top, <, space, ), {, this, ., top, =, space, ;, }, }, else]
[., TOP, ), {, if, (, this, ., top, <, space, ), {, this, ., top, =, space, ;, }]
[), {, this, ., top, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[<, space, ), {, this, ., top, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM]
[., top, <, space, ), {, this, ., top, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge]
[), {, this, ., top, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[=, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, if, (, this, ., bottom]
[., top, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, if, (, this]
[;, }, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, if, (, this, ., bottom, <, space]
[), {, if, (, this, ., bottom, <, space, ), {, this, ., bottom, =, space, ;, }, }, else]
[==, RectangleEdge, ., BOTTOM, ), {, if, (, this, ., bottom, <, space, ), {, this, ., bottom, =, space]
[), {, if, (, this, ., bottom, <, space, ), {, this, ., bottom, =, space, ;, }, }, else]
[., BOTTOM, ), {, if, (, this, ., bottom, <, space, ), {, this, ., bottom, =, space, ;, }]
[), {, this, ., bottom, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[<, space, ), {, this, ., bottom, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., LEFT]
[., bottom, <, space, ), {, this, ., bottom, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge]
[), {, this, ., bottom, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[=, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, if, (, this, ., left]
[., bottom, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, if, (, this]
[;, }, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, if, (, this, ., left, <, space]
[), {, if, (, this, ., left, <, space, ), {, this, ., left, =, space, ;, }, }, else]
[==, RectangleEdge, ., LEFT, ), {, if, (, this, ., left, <, space, ), {, this, ., left, =, space]
[), {, if, (, this, ., left, <, space, ), {, this, ., left, =, space, ;, }, }, else]
[., LEFT, ), {, if, (, this, ., left, <, space, ), {, this, ., left, =, space, ;, }]
[), {, this, ., left, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[<, space, ), {, this, ., left, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT]
[., left, <, space, ), {, this, ., left, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge]
[), {, this, ., left, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[=, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, if, (, this, ., right]
[., left, =, space, ;, }, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, if, (, this]
[;, }, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, if, (, this, ., right, <, space]
[), {, if, (, this, ., right, <, space, ), {, this, ., right, =, space, ;, }, }, else]
[==, RectangleEdge, ., RIGHT, ), {, if, (, this, ., right, <, space, ), {, this, ., right, =, space]
[), {, if, (, this, ., right, <, space, ), {, this, ., right, =, space, ;, }, }, else]
[., RIGHT, ), {, if, (, this, ., right, <, space, ), {, this, ., right, =, space, ;, }]
[), {, this, ., right, =, space, ;, }, }, else, {, throw, new, IllegalStateException, (, "AxisSpace.ensureAtLeast(): unrecognised AxisLocation.", ), ;, }]
[<, space, ), {, this, ., right, =, space, ;, }, }, else, {, throw, new, IllegalStateException, (, "AxisSpace.ensureAtLeast(): unrecognised AxisLocation.", )]
[., right, <, space, ), {, this, ., right, =, space, ;, }, }, else, {, throw, new, IllegalStateException, (]
[), {, this, ., right, =, space, ;, }, }, else, {, throw, new, IllegalStateException, (, "AxisSpace.ensureAtLeast(): unrecognised AxisLocation.", ), ;, }]
[=, space, ;, }, }, else, {, throw, new, IllegalStateException, (, "AxisSpace.ensureAtLeast(): unrecognised AxisLocation.", ), ;, }, }, public, Rectangle2D, shrink, (]
[., right, =, space, ;, }, }, else, {, throw, new, IllegalStateException, (, "AxisSpace.ensureAtLeast(): unrecognised AxisLocation.", ), ;, }, }, public, Rectangle2D]
[;, }, }, else, {, throw, new, IllegalStateException, (, "AxisSpace.ensureAtLeast(): unrecognised AxisLocation.", ), ;, }, }, public, Rectangle2D, shrink, (, Rectangle2D, area]
[;, }, }, public, Rectangle2D, shrink, (, Rectangle2D, area, ,, Rectangle2D, result, ), {, if, (, result, ==, null, )]
[), ;, }, }, public, Rectangle2D, shrink, (, Rectangle2D, area, ,, Rectangle2D, result, ), {, if, (, result, ==, null]
[), {, result, =, new, Rectangle2D, ., Double, (, ), ;, }, result, ., setRect, (, area, ., getX, (]
[==, null, ), {, result, =, new, Rectangle2D, ., Double, (, ), ;, }, result, ., setRect, (, area, .]
[), {, result, =, new, Rectangle2D, ., Double, (, ), ;, }, result, ., setRect, (, area, ., getX, (]
[=, new, Rectangle2D, ., Double, (, ), ;, }, result, ., setRect, (, area, ., getX, (, ), +, this]
[;, }, result, ., setRect, (, area, ., getX, (, ), +, this, ., left, ,, area, ., getY, (]
[;, return, result, ;, }, public, Rectangle2D, expand, (, Rectangle2D, area, ,, Rectangle2D, result, ), {, if, (, result, ==]
[., setRect, (, area, ., getX, (, ), +, this, ., left, ,, area, ., getY, (, ), +, this]
[,, area, ., getY, (, ), +, this, ., top, ,, area, ., getWidth, (, ), -, this, ., left]
[+, this, ., left, ,, area, ., getY, (, ), +, this, ., top, ,, area, ., getWidth, (, )]
[., getX, (, ), +, this, ., left, ,, area, ., getY, (, ), +, this, ., top, ,, area]
[,, area, ., getY, (, ), +, this, ., top, ,, area, ., getWidth, (, ), -, this, ., left]
[., left, ,, area, ., getY, (, ), +, this, ., top, ,, area, ., getWidth, (, ), -, this]
[,, area, ., getWidth, (, ), -, this, ., left, -, this, ., right, ,, area, ., getHeight, (, )]
[+, this, ., top, ,, area, ., getWidth, (, ), -, this, ., left, -, this, ., right, ,, area]
[., getY, (, ), +, this, ., top, ,, area, ., getWidth, (, ), -, this, ., left, -, this]
[,, area, ., getWidth, (, ), -, this, ., left, -, this, ., right, ,, area, ., getHeight, (, )]
[., top, ,, area, ., getWidth, (, ), -, this, ., left, -, this, ., right, ,, area, ., getHeight]
[,, area, ., getHeight, (, ), -, this, ., top, -, this, ., bottom, ), ;, return, result, ;, }]
[-, this, ., right, ,, area, ., getHeight, (, ), -, this, ., top, -, this, ., bottom, ), ;]
[-, this, ., left, -, this, ., right, ,, area, ., getHeight, (, ), -, this, ., top, -, this]
[., getWidth, (, ), -, this, ., left, -, this, ., right, ,, area, ., getHeight, (, ), -, this]
[-, this, ., right, ,, area, ., getHeight, (, ), -, this, ., top, -, this, ., bottom, ), ;]
[., left, -, this, ., right, ,, area, ., getHeight, (, ), -, this, ., top, -, this, ., bottom]
[,, area, ., getHeight, (, ), -, this, ., top, -, this, ., bottom, ), ;, return, result, ;, }]
[., right, ,, area, ., getHeight, (, ), -, this, ., top, -, this, ., bottom, ), ;, return, result]
[), ;, return, result, ;, }, public, Rectangle2D, expand, (, Rectangle2D, area, ,, Rectangle2D, result, ), {, if, (, result]
[-, this, ., bottom, ), ;, return, result, ;, }, public, Rectangle2D, expand, (, Rectangle2D, area, ,, Rectangle2D, result, )]
[-, this, ., top, -, this, ., bottom, ), ;, return, result, ;, }, public, Rectangle2D, expand, (, Rectangle2D, area]
[., getHeight, (, ), -, this, ., top, -, this, ., bottom, ), ;, return, result, ;, }, public, Rectangle2D]
[-, this, ., bottom, ), ;, return, result, ;, }, public, Rectangle2D, expand, (, Rectangle2D, area, ,, Rectangle2D, result, )]
[., top, -, this, ., bottom, ), ;, return, result, ;, }, public, Rectangle2D, expand, (, Rectangle2D, area, ,, Rectangle2D]
[), ;, return, result, ;, }, public, Rectangle2D, expand, (, Rectangle2D, area, ,, Rectangle2D, result, ), {, if, (, result]
[., bottom, ), ;, return, result, ;, }, public, Rectangle2D, expand, (, Rectangle2D, area, ,, Rectangle2D, result, ), {, if]
[;, }, public, Rectangle2D, expand, (, Rectangle2D, area, ,, Rectangle2D, result, ), {, if, (, result, ==, null, ), {]
[), {, result, =, new, Rectangle2D, ., Double, (, ), ;, }, result, ., setRect, (, area, ., getX, (]
[==, null, ), {, result, =, new, Rectangle2D, ., Double, (, ), ;, }, result, ., setRect, (, area, .]
[), {, result, =, new, Rectangle2D, ., Double, (, ), ;, }, result, ., setRect, (, area, ., getX, (]
[=, new, Rectangle2D, ., Double, (, ), ;, }, result, ., setRect, (, area, ., getX, (, ), -, this]
[;, }, result, ., setRect, (, area, ., getX, (, ), -, this, ., left, ,, area, ., getY, (]
[;, return, result, ;, }, public, Rectangle2D, reserved, (, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Rectangle2D, result, =, null]
[., setRect, (, area, ., getX, (, ), -, this, ., left, ,, area, ., getY, (, ), -, this]
[,, area, ., getY, (, ), -, this, ., top, ,, area, ., getWidth, (, ), +, this, ., left]
[-, this, ., left, ,, area, ., getY, (, ), -, this, ., top, ,, area, ., getWidth, (, )]
[., getX, (, ), -, this, ., left, ,, area, ., getY, (, ), -, this, ., top, ,, area]
[,, area, ., getY, (, ), -, this, ., top, ,, area, ., getWidth, (, ), +, this, ., left]
[., left, ,, area, ., getY, (, ), -, this, ., top, ,, area, ., getWidth, (, ), +, this]
[,, area, ., getWidth, (, ), +, this, ., left, +, this, ., right, ,, area, ., getHeight, (, )]
[-, this, ., top, ,, area, ., getWidth, (, ), +, this, ., left, +, this, ., right, ,, area]
[., getY, (, ), -, this, ., top, ,, area, ., getWidth, (, ), +, this, ., left, +, this]
[,, area, ., getWidth, (, ), +, this, ., left, +, this, ., right, ,, area, ., getHeight, (, )]
[., top, ,, area, ., getWidth, (, ), +, this, ., left, +, this, ., right, ,, area, ., getHeight]
[,, area, ., getHeight, (, ), +, this, ., top, +, this, ., bottom, ), ;, return, result, ;, }]
[+, this, ., right, ,, area, ., getHeight, (, ), +, this, ., top, +, this, ., bottom, ), ;]
[+, this, ., left, +, this, ., right, ,, area, ., getHeight, (, ), +, this, ., top, +, this]
[., getWidth, (, ), +, this, ., left, +, this, ., right, ,, area, ., getHeight, (, ), +, this]
[+, this, ., right, ,, area, ., getHeight, (, ), +, this, ., top, +, this, ., bottom, ), ;]
[., left, +, this, ., right, ,, area, ., getHeight, (, ), +, this, ., top, +, this, ., bottom]
[,, area, ., getHeight, (, ), +, this, ., top, +, this, ., bottom, ), ;, return, result, ;, }]
[., right, ,, area, ., getHeight, (, ), +, this, ., top, +, this, ., bottom, ), ;, return, result]
[), ;, return, result, ;, }, public, Rectangle2D, reserved, (, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Rectangle2D, result, =]
[+, this, ., bottom, ), ;, return, result, ;, }, public, Rectangle2D, reserved, (, Rectangle2D, area, ,, RectangleEdge, edge, )]
[+, this, ., top, +, this, ., bottom, ), ;, return, result, ;, }, public, Rectangle2D, reserved, (, Rectangle2D, area]
[., getHeight, (, ), +, this, ., top, +, this, ., bottom, ), ;, return, result, ;, }, public, Rectangle2D]
[+, this, ., bottom, ), ;, return, result, ;, }, public, Rectangle2D, reserved, (, Rectangle2D, area, ,, RectangleEdge, edge, )]
[., top, +, this, ., bottom, ), ;, return, result, ;, }, public, Rectangle2D, reserved, (, Rectangle2D, area, ,, RectangleEdge]
[), ;, return, result, ;, }, public, Rectangle2D, reserved, (, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Rectangle2D, result, =]
[., bottom, ), ;, return, result, ;, }, public, Rectangle2D, reserved, (, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Rectangle2D]
[;, }, public, Rectangle2D, reserved, (, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Rectangle2D, result, =, null, ;, if, (]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX]
[), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getY, (, )]
[==, RectangleEdge, ., TOP, ), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area]
[), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getY, (, )]
[., TOP, ), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getY]
[=, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getY, (, ), ,, area, .]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, =, new, Rectangle2D, ., Double, (, area]
[,, area, ., getY, (, ), ,, area, ., getWidth, (, ), ,, this, ., top, ), ;, }, else]
[., getX, (, ), ,, area, ., getY, (, ), ,, area, ., getWidth, (, ), ,, this, ., top]
[,, area, ., getWidth, (, ), ,, this, ., top, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[., getY, (, ), ,, area, ., getWidth, (, ), ,, this, ., top, ), ;, }, else, if, (]
[,, this, ., top, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, =, new]
[., getWidth, (, ), ,, this, ., top, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, =, new, Rectangle2D, ., Double, (]
[., top, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, =, new, Rectangle2D, .]
[), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getMaxY, (, )]
[==, RectangleEdge, ., BOTTOM, ), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area]
[), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getMaxY, (, )]
[., BOTTOM, ), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getMaxY]
[=, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getMaxY, (, ), -, this, .]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, =, new, Rectangle2D, ., Double, (, area]
[,, area, ., getMaxY, (, ), -, this, ., top, ,, area, ., getWidth, (, ), ,, this, ., bottom]
[., getX, (, ), ,, area, ., getMaxY, (, ), -, this, ., top, ,, area, ., getWidth, (, )]
[,, area, ., getWidth, (, ), ,, this, ., bottom, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[-, this, ., top, ,, area, ., getWidth, (, ), ,, this, ., bottom, ), ;, }, else, if, (]
[., getMaxY, (, ), -, this, ., top, ,, area, ., getWidth, (, ), ,, this, ., bottom, ), ;]
[,, area, ., getWidth, (, ), ,, this, ., bottom, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[., top, ,, area, ., getWidth, (, ), ,, this, ., bottom, ), ;, }, else, if, (, edge, ==]
[,, this, ., bottom, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, =, new]
[., getWidth, (, ), ,, this, ., bottom, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, )]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, =, new, Rectangle2D, ., Double, (]
[., bottom, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, =, new, Rectangle2D, .]
[), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getY, (, )]
[==, RectangleEdge, ., LEFT, ), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area]
[), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getY, (, )]
[., LEFT, ), {, result, =, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getY]
[=, new, Rectangle2D, ., Double, (, area, ., getX, (, ), ,, area, ., getY, (, ), ,, this, .]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, =, new, Rectangle2D, ., Double, (, area]
[,, area, ., getY, (, ), ,, this, ., left, ,, area, ., getHeight, (, ), ), ;, }, else]
[., getX, (, ), ,, area, ., getY, (, ), ,, this, ., left, ,, area, ., getHeight, (, )]
[,, this, ., left, ,, area, ., getHeight, (, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[., getY, (, ), ,, this, ., left, ,, area, ., getHeight, (, ), ), ;, }, else, if, (]
[,, area, ., getHeight, (, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result]
[., left, ,, area, ., getHeight, (, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, =, new, Rectangle2D, ., Double, (]
[., getHeight, (, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, =, new]
[), {, result, =, new, Rectangle2D, ., Double, (, area, ., getMaxX, (, ), -, this, ., right, ,, area]
[==, RectangleEdge, ., RIGHT, ), {, result, =, new, Rectangle2D, ., Double, (, area, ., getMaxX, (, ), -, this]
[), {, result, =, new, Rectangle2D, ., Double, (, area, ., getMaxX, (, ), -, this, ., right, ,, area]
[., RIGHT, ), {, result, =, new, Rectangle2D, ., Double, (, area, ., getMaxX, (, ), -, this, ., right]
[=, new, Rectangle2D, ., Double, (, area, ., getMaxX, (, ), -, this, ., right, ,, area, ., getY, (]
[;, }, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone, (, )]
[,, area, ., getY, (, ), ,, this, ., right, ,, area, ., getHeight, (, ), ), ;, }, return]
[-, this, ., right, ,, area, ., getY, (, ), ,, this, ., right, ,, area, ., getHeight, (, )]
[., getMaxX, (, ), -, this, ., right, ,, area, ., getY, (, ), ,, this, ., right, ,, area]
[,, area, ., getY, (, ), ,, this, ., right, ,, area, ., getHeight, (, ), ), ;, }, return]
[., right, ,, area, ., getY, (, ), ,, this, ., right, ,, area, ., getHeight, (, ), ), ;]
[,, this, ., right, ,, area, ., getHeight, (, ), ), ;, }, return, result, ;, }, public, Object, clone]
[., getY, (, ), ,, this, ., right, ,, area, ., getHeight, (, ), ), ;, }, return, result, ;]
[,, area, ., getHeight, (, ), ), ;, }, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException]
[., right, ,, area, ., getHeight, (, ), ), ;, }, return, result, ;, }, public, Object, clone, (, )]
[), ;, }, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone, (]
[., getHeight, (, ), ), ;, }, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return]
[;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, public, boolean]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[., clone, (, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, )]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, AxisSpace, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, AxisSpace, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, AxisSpace, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, AxisSpace, ), ), {, return, false, ;, }, AxisSpace, that, =, (]
[), {, return, false, ;, }, AxisSpace, that, =, (, AxisSpace, ), obj, ;, if, (, this, ., top, !=]
[), {, return, false, ;, }, AxisSpace, that, =, (, AxisSpace, ), obj, ;, if, (, this, ., top, !=]
[), ), {, return, false, ;, }, AxisSpace, that, =, (, AxisSpace, ), obj, ;, if, (, this, ., top]
[instanceof, AxisSpace, ), ), {, return, false, ;, }, AxisSpace, that, =, (, AxisSpace, ), obj, ;, if, (, this]
[;, }, AxisSpace, that, =, (, AxisSpace, ), obj, ;, if, (, this, ., top, !=, that, ., top, )]
[;, if, (, this, ., top, !=, that, ., top, ), {, return, false, ;, }, if, (, this, .]
[;, if, (, this, ., top, !=, that, ., top, ), {, return, false, ;, }, if, (, this, .]
[), {, return, false, ;, }, if, (, this, ., bottom, !=, that, ., bottom, ), {, return, false, ;]
[!=, that, ., top, ), {, return, false, ;, }, if, (, this, ., bottom, !=, that, ., bottom, )]
[., top, !=, that, ., top, ), {, return, false, ;, }, if, (, this, ., bottom, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., bottom, !=, that, ., bottom, ), {, return, false, ;]
[., top, ), {, return, false, ;, }, if, (, this, ., bottom, !=, that, ., bottom, ), {, return]
[;, }, if, (, this, ., bottom, !=, that, ., bottom, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., left, !=, that, ., left, ), {, return, false, ;]
[!=, that, ., bottom, ), {, return, false, ;, }, if, (, this, ., left, !=, that, ., left, )]
[., bottom, !=, that, ., bottom, ), {, return, false, ;, }, if, (, this, ., left, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., left, !=, that, ., left, ), {, return, false, ;]
[., bottom, ), {, return, false, ;, }, if, (, this, ., left, !=, that, ., left, ), {, return]
[;, }, if, (, this, ., left, !=, that, ., left, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., right, !=, that, ., right, ), {, return, false, ;]
[!=, that, ., left, ), {, return, false, ;, }, if, (, this, ., right, !=, that, ., right, )]
[., left, !=, that, ., left, ), {, return, false, ;, }, if, (, this, ., right, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., right, !=, that, ., right, ), {, return, false, ;]
[., left, ), {, return, false, ;, }, if, (, this, ., right, !=, that, ., right, ), {, return]
[;, }, if, (, this, ., right, !=, that, ., right, ), {, return, false, ;, }, return, true, ;]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, 23]
[!=, that, ., right, ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {]
[., right, !=, that, ., right, ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, 23]
[., right, ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result]
[;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, 23, ;, long, l, =]
[;, }, public, int, hashCode, (, ), {, int, result, =, 23, ;, long, l, =, Double, ., doubleToLongBits, (]
[;, long, l, =, Double, ., doubleToLongBits, (, this, ., top, ), ;, result, =, 37, *, result, +, (]
[;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, )]
[., doubleToLongBits, (, this, ., top, ), ;, result, =, 37, *, result, +, (, int, ), (, l, ^]
[), ;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32]
[., top, ), ;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >]
[=, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;]
[;, l, =, Double, ., doubleToLongBits, (, this, ., bottom, ), ;, result, =, 37, *, result, +, (, int]
[+, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, l, =, Double, .]
[*, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, l, =]
[+, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, l, =, Double, .]
[;, l, =, Double, ., doubleToLongBits, (, this, ., bottom, ), ;, result, =, 37, *, result, +, (, int]
[;, l, =, Double, ., doubleToLongBits, (, this, ., bottom, ), ;, result, =, 37, *, result, +, (, int]
[), ;, l, =, Double, ., doubleToLongBits, (, this, ., bottom, ), ;, result, =, 37, *, result, +, (]
[^, (, l, >, >, >, 32, ), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., bottom, )]
[), ;, l, =, Double, ., doubleToLongBits, (, this, ., bottom, ), ;, result, =, 37, *, result, +, (]
[), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., bottom, ), ;, result, =, 37, *, result, +]
[>, >, >, 32, ), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., bottom, ), ;, result, =]
[), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., bottom, ), ;, result, =, 37, *, result, +]
[=, Double, ., doubleToLongBits, (, this, ., bottom, ), ;, result, =, 37, *, result, +, (, int, ), (]
[;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, )]
[., doubleToLongBits, (, this, ., bottom, ), ;, result, =, 37, *, result, +, (, int, ), (, l, ^]
[), ;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32]
[., bottom, ), ;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >]
[=, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;]
[;, l, =, Double, ., doubleToLongBits, (, this, ., left, ), ;, result, =, 37, *, result, +, (, int]
[+, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, l, =, Double, .]
[*, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, l, =]
[+, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, l, =, Double, .]
[;, l, =, Double, ., doubleToLongBits, (, this, ., left, ), ;, result, =, 37, *, result, +, (, int]
[;, l, =, Double, ., doubleToLongBits, (, this, ., left, ), ;, result, =, 37, *, result, +, (, int]
[), ;, l, =, Double, ., doubleToLongBits, (, this, ., left, ), ;, result, =, 37, *, result, +, (]
[^, (, l, >, >, >, 32, ), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., left, )]
[), ;, l, =, Double, ., doubleToLongBits, (, this, ., left, ), ;, result, =, 37, *, result, +, (]
[), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., left, ), ;, result, =, 37, *, result, +]
[>, >, >, 32, ), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., left, ), ;, result, =]
[), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., left, ), ;, result, =, 37, *, result, +]
[=, Double, ., doubleToLongBits, (, this, ., left, ), ;, result, =, 37, *, result, +, (, int, ), (]
[;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, )]
[., doubleToLongBits, (, this, ., left, ), ;, result, =, 37, *, result, +, (, int, ), (, l, ^]
[), ;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32]
[., left, ), ;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >]
[=, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;]
[;, l, =, Double, ., doubleToLongBits, (, this, ., right, ), ;, result, =, 37, *, result, +, (, int]
[+, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, l, =, Double, .]
[*, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, l, =]
[+, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, l, =, Double, .]
[;, l, =, Double, ., doubleToLongBits, (, this, ., right, ), ;, result, =, 37, *, result, +, (, int]
[;, l, =, Double, ., doubleToLongBits, (, this, ., right, ), ;, result, =, 37, *, result, +, (, int]
[), ;, l, =, Double, ., doubleToLongBits, (, this, ., right, ), ;, result, =, 37, *, result, +, (]
[^, (, l, >, >, >, 32, ), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., right, )]
[), ;, l, =, Double, ., doubleToLongBits, (, this, ., right, ), ;, result, =, 37, *, result, +, (]
[), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., right, ), ;, result, =, 37, *, result, +]
[>, >, >, 32, ), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., right, ), ;, result, =]
[), ), ;, l, =, Double, ., doubleToLongBits, (, this, ., right, ), ;, result, =, 37, *, result, +]
[=, Double, ., doubleToLongBits, (, this, ., right, ), ;, result, =, 37, *, result, +, (, int, ), (]
[;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, )]
[., doubleToLongBits, (, this, ., right, ), ;, result, =, 37, *, result, +, (, int, ), (, l, ^]
[), ;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32]
[., right, ), ;, result, =, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >]
[=, 37, *, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;]
[;, return, result, ;, }, public, String, toString, (, ), {, return, super, ., toString, (, ), +, "[left=", +]
[+, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, return, result, ;, }]
[*, result, +, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, return, result]
[+, (, int, ), (, l, ^, (, l, >, >, >, 32, ), ), ;, return, result, ;, }]
[;, return, result, ;, }, public, String, toString, (, ), {, return, super, ., toString, (, ), +, "[left=", +]
[;, return, result, ;, }, public, String, toString, (, ), {, return, super, ., toString, (, ), +, "[left=", +]
[), ;, return, result, ;, }, public, String, toString, (, ), {, return, super, ., toString, (, ), +, "[left="]
[^, (, l, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {]
[), ;, return, result, ;, }, public, String, toString, (, ), {, return, super, ., toString, (, ), +, "[left="]
[), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, super, ., toString, (, ), +]
[>, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, super, .]
[), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, super, ., toString, (, ), +]
[;, }, public, String, toString, (, ), {, return, super, ., toString, (, ), +, "[left=", +, this, ., left]
[;, }, }]
[+, "]", ;, }, }]
[+, this, ., bottom, +, "]", ;, }, }]
[+, ",bottom=", +, this, ., bottom, +, "]", ;, }, }]
[+, this, ., top, +, ",bottom=", +, this, ., bottom, +, "]", ;, }, }]
[+, ",top=", +, this, ., top, +, ",bottom=", +, this, ., bottom, +, "]", ;, }, }]
[+, this, ., right, +, ",top=", +, this, ., top, +, ",bottom=", +, this, ., bottom, +, "]", ;, }]
[+, ",right=", +, this, ., right, +, ",top=", +, this, ., top, +, ",bottom=", +, this, ., bottom, +, "]"]
[+, this, ., left, +, ",right=", +, this, ., right, +, ",top=", +, this, ., top, +, ",bottom=", +, this]
[+, "[left=", +, this, ., left, +, ",right=", +, this, ., right, +, ",top=", +, this, ., top, +, ",bottom="]
[., toString, (, ), +, "[left=", +, this, ., left, +, ",right=", +, this, ., right, +, ",top=", +, this]
[+, this, ., left, +, ",right=", +, this, ., right, +, ",top=", +, this, ., top, +, ",bottom=", +, this]
[+, ",right=", +, this, ., right, +, ",top=", +, this, ., top, +, ",bottom=", +, this, ., bottom, +, "]"]
[., left, +, ",right=", +, this, ., right, +, ",top=", +, this, ., top, +, ",bottom=", +, this, ., bottom]
[+, this, ., right, +, ",top=", +, this, ., top, +, ",bottom=", +, this, ., bottom, +, "]", ;, }]
[+, ",top=", +, this, ., top, +, ",bottom=", +, this, ., bottom, +, "]", ;, }, }]
[., right, +, ",top=", +, this, ., top, +, ",bottom=", +, this, ., bottom, +, "]", ;, }, }]
[+, this, ., top, +, ",bottom=", +, this, ., bottom, +, "]", ;, }, }]
[+, ",bottom=", +, this, ., bottom, +, "]", ;, }, }]
[., top, +, ",bottom=", +, this, ., bottom, +, "]", ;, }, }]
[+, this, ., bottom, +, "]", ;, }, }]
[+, "]", ;, }, }]
[., bottom, +, "]", ;, }, }]
[;, }, }]
