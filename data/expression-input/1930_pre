[private, KeyedValueComparatorType, type, ;, private, SortOrder, order, ;, public, KeyedValueComparator, (, KeyedValueComparatorType, type, ,, SortOrder, order, ), {, if, (]
[private, KeyedValueComparatorType, type, ;, private, SortOrder, order, ;, public, KeyedValueComparator, (, KeyedValueComparatorType, type, ,, SortOrder, order, ), {, if, (]
[type, ;, private, SortOrder, order, ;, public, KeyedValueComparator, (, KeyedValueComparatorType, type, ,, SortOrder, order, ), {, if, (, order, ==]
[order, ;, public, KeyedValueComparator, (, KeyedValueComparatorType, type, ,, SortOrder, order, ), {, if, (, order, ==, null, ), {, throw]
[KeyedValueComparator, (, KeyedValueComparatorType, type, ,, SortOrder, order, ), {, if, (, order, ==, null, ), {, throw, new, IllegalArgumentException, (]
[,, SortOrder, order, ), {, if, (, order, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'order' argument.", ), ;, }]
[,, SortOrder, order, ), {, if, (, order, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'order' argument.", ), ;, }]
[{, if, (, order, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'order' argument.", ), ;, }, this, ., type, =]
[(, order, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'order' argument.", ), ;, }, this, ., type, =, type, ;]
[(, order, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'order' argument.", ), ;, }, this, ., type, =, type, ;]
[), {, throw, new, IllegalArgumentException, (, "Null 'order' argument.", ), ;, }, this, ., type, =, type, ;, this, ., order, =]
[this, ., type, =, type, ;, this, ., order, =, order, ;, }, public, KeyedValueComparatorType, getType, (, ), {, return]
[this, ., type, =, type, ;, this, ., order, =, order, ;, }, public, KeyedValueComparatorType, getType, (, ), {, return]
[}, public, KeyedValueComparatorType, getType, (, ), {, return, this, ., type, ;, }, public, SortOrder, getOrder, (, ), {, return]
[}, public, KeyedValueComparatorType, getType, (, ), {, return, this, ., type, ;, }, public, SortOrder, getOrder, (, ), {, return]
[{, return, this, ., order, ;, }, public, int, compare, (, Object, o1, ,, Object, o2, ), {, if, (]
[{, return, this, ., order, ;, }, public, int, compare, (, Object, o1, ,, Object, o2, ), {, if, (]
[this, ., order, ;, }, public, int, compare, (, Object, o1, ,, Object, o2, ), {, if, (, o2, ==]
[}, public, int, compare, (, Object, o1, ,, Object, o2, ), {, if, (, o2, ==, null, ), {, return]
[public, int, compare, (, Object, o1, ,, Object, o2, ), {, if, (, o2, ==, null, ), {, return, -]
[o1, ,, Object, o2, ), {, if, (, o2, ==, null, ), {, return, -, 1, ;, }, if, (]
[o1, ,, Object, o2, ), {, if, (, o2, ==, null, ), {, return, -, 1, ;, }, if, (]
[Object, o2, ), {, if, (, o2, ==, null, ), {, return, -, 1, ;, }, if, (, o1, ==]
[if, (, o2, ==, null, ), {, return, -, 1, ;, }, if, (, o1, ==, null, ), {, return]
[1, ;, }, if, (, o1, ==, null, ), {, return, 1, ;, }, int, result, ;, KeyedValue, kv1, =]
[if, (, o1, ==, null, ), {, return, 1, ;, }, int, result, ;, KeyedValue, kv1, =, (, KeyedValue, )]
[), {, return, 1, ;, }, int, result, ;, KeyedValue, kv1, =, (, KeyedValue, ), o1, ;, KeyedValue, kv2, =]
[1, ;, }, int, result, ;, KeyedValue, kv1, =, (, KeyedValue, ), o1, ;, KeyedValue, kv2, =, (, KeyedValue, )]
[result, ;, KeyedValue, kv1, =, (, KeyedValue, ), o1, ;, KeyedValue, kv2, =, (, KeyedValue, ), o2, ;, if, (]
[result, ;, KeyedValue, kv1, =, (, KeyedValue, ), o1, ;, KeyedValue, kv2, =, (, KeyedValue, ), o2, ;, if, (]
[result, ;, KeyedValue, kv1, =, (, KeyedValue, ), o1, ;, KeyedValue, kv2, =, (, KeyedValue, ), o2, ;, if, (]
[=, (, KeyedValue, ), o1, ;, KeyedValue, kv2, =, (, KeyedValue, ), o2, ;, if, (, this, ., type, ==]
[=, (, KeyedValue, ), o1, ;, KeyedValue, kv2, =, (, KeyedValue, ), o2, ;, if, (, this, ., type, ==]
[kv2, =, (, KeyedValue, ), o2, ;, if, (, this, ., type, ==, KeyedValueComparatorType, ., BY_KEY, ), {, if, (]
[kv2, =, (, KeyedValue, ), o2, ;, if, (, this, ., type, ==, KeyedValueComparatorType, ., BY_KEY, ), {, if, (]
[kv2, =, (, KeyedValue, ), o2, ;, if, (, this, ., type, ==, KeyedValueComparatorType, ., BY_KEY, ), {, if, (]
[;, if, (, this, ., type, ==, KeyedValueComparatorType, ., BY_KEY, ), {, if, (, this, ., order, ., equals, (]
[;, if, (, this, ., type, ==, KeyedValueComparatorType, ., BY_KEY, ), {, if, (, this, ., order, ., equals, (]
[==, KeyedValueComparatorType, ., BY_KEY, ), {, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {]
[., BY_KEY, ), {, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, result, =]
[., BY_KEY, ), {, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, result, =]
[., BY_KEY, ), {, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, result, =]
[order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, result, =, kv1, ., getKey, (, ), ., compareTo, (]
[order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, result, =, kv1, ., getKey, (, ), ., compareTo, (]
[=, kv1, ., getKey, (, ), ., compareTo, (, kv2, ., getKey, (, ), ), ;, }, else, if, (]
[=, kv1, ., getKey, (, ), ., compareTo, (, kv2, ., getKey, (, ), ), ;, }, else, if, (]
[=, kv1, ., getKey, (, ), ., compareTo, (, kv2, ., getKey, (, ), ), ;, }, else, if, (]
[., compareTo, (, kv2, ., getKey, (, ), ), ;, }, else, if, (, this, ., order, ., equals, (]
[., compareTo, (, kv2, ., getKey, (, ), ), ;, }, else, if, (, this, ., order, ., equals, (]
[(, ), ), ;, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {]
[), ;, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, result, =]
[), ;, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, result, =]
[), ;, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, result, =]
[order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, result, =, kv2, ., getKey, (, ), ., compareTo, (]
[order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, result, =, kv2, ., getKey, (, ), ., compareTo, (]
[=, kv2, ., getKey, (, ), ., compareTo, (, kv1, ., getKey, (, ), ), ;, }, else, {, throw]
[getKey, (, ), ., compareTo, (, kv1, ., getKey, (, ), ), ;, }, else, {, throw, new, IllegalArgumentException, (]
[getKey, (, ), ), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, if, (]
[getKey, (, ), ), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, if, (]
[getKey, (, ), ), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, if, (]
[;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, if, (, this, ., type, ==]
[;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, if, (, this, ., type, ==]
["Unrecognised sort order.", ), ;, }, }, else, if, (, this, ., type, ==, KeyedValueComparatorType, ., BY_VALUE, ), {, Number, n1, =]
["Unrecognised sort order.", ), ;, }, }, else, if, (, this, ., type, ==, KeyedValueComparatorType, ., BY_VALUE, ), {, Number, n1, =]
[., type, ==, KeyedValueComparatorType, ., BY_VALUE, ), {, Number, n1, =, kv1, ., getValue, (, ), ;, Number, n2, =]
[., type, ==, KeyedValueComparatorType, ., BY_VALUE, ), {, Number, n1, =, kv1, ., getValue, (, ), ;, Number, n2, =]
[Number, n1, =, kv1, ., getValue, (, ), ;, Number, n2, =, kv2, ., getValue, (, ), ;, if, (]
[Number, n1, =, kv1, ., getValue, (, ), ;, Number, n2, =, kv2, ., getValue, (, ), ;, if, (]
[=, kv1, ., getValue, (, ), ;, Number, n2, =, kv2, ., getValue, (, ), ;, if, (, n2, ==]
[(, ), ;, Number, n2, =, kv2, ., getValue, (, ), ;, if, (, n2, ==, null, ), {, return]
[), ;, Number, n2, =, kv2, ., getValue, (, ), ;, if, (, n2, ==, null, ), {, return, -]
[kv2, ., getValue, (, ), ;, if, (, n2, ==, null, ), {, return, -, 1, ;, }, if, (]
[kv2, ., getValue, (, ), ;, if, (, n2, ==, null, ), {, return, -, 1, ;, }, if, (]
[getValue, (, ), ;, if, (, n2, ==, null, ), {, return, -, 1, ;, }, if, (, n1, ==]
[if, (, n2, ==, null, ), {, return, -, 1, ;, }, if, (, n1, ==, null, ), {, return]
[{, return, -, 1, ;, }, if, (, n1, ==, null, ), {, return, 1, ;, }, double, d1, =]
[{, return, -, 1, ;, }, if, (, n1, ==, null, ), {, return, 1, ;, }, double, d1, =]
[==, null, ), {, return, 1, ;, }, double, d1, =, n1, ., doubleValue, (, ), ;, double, d2, =]
[==, null, ), {, return, 1, ;, }, double, d1, =, n1, ., doubleValue, (, ), ;, double, d2, =]
[double, d1, =, n1, ., doubleValue, (, ), ;, double, d2, =, n2, ., doubleValue, (, ), ;, if, (]
[double, d1, =, n1, ., doubleValue, (, ), ;, double, d2, =, n2, ., doubleValue, (, ), ;, if, (]
[double, d1, =, n1, ., doubleValue, (, ), ;, double, d2, =, n2, ., doubleValue, (, ), ;, if, (]
[(, ), ;, double, d2, =, n2, ., doubleValue, (, ), ;, if, (, this, ., order, ., equals, (]
[(, ), ;, double, d2, =, n2, ., doubleValue, (, ), ;, if, (, this, ., order, ., equals, (]
[doubleValue, (, ), ;, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, if, (]
[doubleValue, (, ), ;, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, if, (]
[), ;, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, if, (, d1, >]
[(, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, if, (, d1, >, d2, ), {]
[., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, if, (, d1, >, d2, ), {, result, =]
[., ASCENDING, ), ), {, if, (, d1, >, d2, ), {, result, =, 1, ;, }, else, if, (]
[., ASCENDING, ), ), {, if, (, d1, >, d2, ), {, result, =, 1, ;, }, else, if, (]
[), ), {, if, (, d1, >, d2, ), {, result, =, 1, ;, }, else, if, (, d1, <]
[if, (, d1, >, d2, ), {, result, =, 1, ;, }, else, if, (, d1, <, d2, ), {]
[d1, >, d2, ), {, result, =, 1, ;, }, else, if, (, d1, <, d2, ), {, result, =]
[>, d2, ), {, result, =, 1, ;, }, else, if, (, d1, <, d2, ), {, result, =, -]
[=, 1, ;, }, else, if, (, d1, <, d2, ), {, result, =, -, 1, ;, }, else, {]
[;, }, else, if, (, d1, <, d2, ), {, result, =, -, 1, ;, }, else, {, result, =]
[d2, ), {, result, =, -, 1, ;, }, else, {, result, =, 0, ;, }, }, else, if, (]
[d2, ), {, result, =, -, 1, ;, }, else, {, result, =, 0, ;, }, }, else, if, (]
[d2, ), {, result, =, -, 1, ;, }, else, {, result, =, 0, ;, }, }, else, if, (]
[1, ;, }, else, {, result, =, 0, ;, }, }, else, if, (, this, ., order, ., equals, (]
[1, ;, }, else, {, result, =, 0, ;, }, }, else, if, (, this, ., order, ., equals, (]
[;, }, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, if, (]
[;, }, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, if, (]
[}, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, if, (, d1, >]
[(, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, if, (, d1, >, d2, ), {]
[., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, if, (, d1, >, d2, ), {, result, =]
[order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, if, (, d1, >, d2, ), {, result, =, -]
[DESCENDING, ), ), {, if, (, d1, >, d2, ), {, result, =, -, 1, ;, }, else, if, (]
[DESCENDING, ), ), {, if, (, d1, >, d2, ), {, result, =, -, 1, ;, }, else, if, (]
[), {, if, (, d1, >, d2, ), {, result, =, -, 1, ;, }, else, if, (, d1, <]
[(, d1, >, d2, ), {, result, =, -, 1, ;, }, else, if, (, d1, <, d2, ), {]
[>, d2, ), {, result, =, -, 1, ;, }, else, if, (, d1, <, d2, ), {, result, =]
[=, -, 1, ;, }, else, if, (, d1, <, d2, ), {, result, =, 1, ;, }, else, {]
[1, ;, }, else, if, (, d1, <, d2, ), {, result, =, 1, ;, }, else, {, result, =]
[<, d2, ), {, result, =, 1, ;, }, else, {, result, =, 0, ;, }, }, else, {, throw]
[{, result, =, 1, ;, }, else, {, result, =, 0, ;, }, }, else, {, throw, new, IllegalArgumentException, (]
[result, =, 0, ;, }, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, {, throw]
[;, }, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, {, throw, new, IllegalArgumentException, (]
[throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised type.", ), ;, }, return]
