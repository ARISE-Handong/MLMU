[commons, ., math3, ., exception, ., TooManyEvaluationsException, ;, public, class, BisectionSolver, extends, AbstractUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =]
[class, BisectionSolver, extends, AbstractUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, public, BisectionSolver, (, ), {, this, (]
[public, BisectionSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, BisectionSolver, (, double, absoluteAccuracy, ), {, super, (]
[), {, super, (, absoluteAccuracy, ), ;, }, public, BisectionSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (]
[super, (, absoluteAccuracy, ), ;, }, public, BisectionSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,]
[(, relativeAccuracy, ,, absoluteAccuracy, ), ;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, {, double, min, =]
[@, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, {, double, min, =, getMin, (, ), ;, double, max, =]
[doSolve, (, ), throws, TooManyEvaluationsException, {, double, min, =, getMin, (, ), ;, double, max, =, getMax, (, ), ;]
[), throws, TooManyEvaluationsException, {, double, min, =, getMin, (, ), ;, double, max, =, getMax, (, ), ;, verifyInterval, (]
[TooManyEvaluationsException, {, double, min, =, getMin, (, ), ;, double, max, =, getMax, (, ), ;, verifyInterval, (, min, ,]
[), ;, double, max, =, getMax, (, ), ;, verifyInterval, (, min, ,, max, ), ;, final, double, absoluteAccuracy, =]
[;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, double, m, ;, double, fm, ;, double, fmin, ;, while, (]
[absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, double, m, ;, double, fm, ;, double, fmin, ;, while, (, true, ), {]
[getAbsoluteAccuracy, (, ), ;, double, m, ;, double, fm, ;, double, fmin, ;, while, (, true, ), {, m, =]
[getAbsoluteAccuracy, (, ), ;, double, m, ;, double, fm, ;, double, fmin, ;, while, (, true, ), {, m, =]
[double, m, ;, double, fm, ;, double, fmin, ;, while, (, true, ), {, m, =, UnivariateSolverUtils, ., midpoint, (]
[;, double, fm, ;, double, fmin, ;, while, (, true, ), {, m, =, UnivariateSolverUtils, ., midpoint, (, min, ,]
[;, double, fmin, ;, while, (, true, ), {, m, =, UnivariateSolverUtils, ., midpoint, (, min, ,, max, ), ;]
[fmin, ;, while, (, true, ), {, m, =, UnivariateSolverUtils, ., midpoint, (, min, ,, max, ), ;, fmin, =]
[while, (, true, ), {, m, =, UnivariateSolverUtils, ., midpoint, (, min, ,, max, ), ;, fmin, =, computeObjectiveValue, (]
[), {, m, =, UnivariateSolverUtils, ., midpoint, (, min, ,, max, ), ;, fmin, =, computeObjectiveValue, (, min, ), ;]
[m, =, UnivariateSolverUtils, ., midpoint, (, min, ,, max, ), ;, fmin, =, computeObjectiveValue, (, min, ), ;, fm, =]
[UnivariateSolverUtils, ., midpoint, (, min, ,, max, ), ;, fmin, =, computeObjectiveValue, (, min, ), ;, fm, =, computeObjectiveValue, (]
[,, max, ), ;, fmin, =, computeObjectiveValue, (, min, ), ;, fm, =, computeObjectiveValue, (, m, ), ;, if, (]
[,, max, ), ;, fmin, =, computeObjectiveValue, (, min, ), ;, fm, =, computeObjectiveValue, (, m, ), ;, if, (]
[,, max, ), ;, fmin, =, computeObjectiveValue, (, min, ), ;, fm, =, computeObjectiveValue, (, m, ), ;, if, (]
[), ;, fmin, =, computeObjectiveValue, (, min, ), ;, fm, =, computeObjectiveValue, (, m, ), ;, if, (, fm, *]
[fmin, =, computeObjectiveValue, (, min, ), ;, fm, =, computeObjectiveValue, (, m, ), ;, if, (, fm, *, fmin, >]
[(, min, ), ;, fm, =, computeObjectiveValue, (, m, ), ;, if, (, fm, *, fmin, >, 0, ), {]
[), ;, fm, =, computeObjectiveValue, (, m, ), ;, if, (, fm, *, fmin, >, 0, ), {, min, =]
[(, m, ), ;, if, (, fm, *, fmin, >, 0, ), {, min, =, m, ;, }, else, {]
[), ;, if, (, fm, *, fmin, >, 0, ), {, min, =, m, ;, }, else, {, max, =]
[*, fmin, >, 0, ), {, min, =, m, ;, }, else, {, max, =, m, ;, }, if, (]
[*, fmin, >, 0, ), {, min, =, m, ;, }, else, {, max, =, m, ;, }, if, (]
[*, fmin, >, 0, ), {, min, =, m, ;, }, else, {, max, =, m, ;, }, if, (]
[), {, min, =, m, ;, }, else, {, max, =, m, ;, }, if, (, FastMath, ., abs, (]
[), {, min, =, m, ;, }, else, {, max, =, m, ;, }, if, (, FastMath, ., abs, (]
[min, =, m, ;, }, else, {, max, =, m, ;, }, if, (, FastMath, ., abs, (, max, -]
[;, }, else, {, max, =, m, ;, }, if, (, FastMath, ., abs, (, max, -, min, ), <=]
[{, max, =, m, ;, }, if, (, FastMath, ., abs, (, max, -, min, ), <=, absoluteAccuracy, ), {]
[=, m, ;, }, if, (, FastMath, ., abs, (, max, -, min, ), <=, absoluteAccuracy, ), {, m, =]
[=, m, ;, }, if, (, FastMath, ., abs, (, max, -, min, ), <=, absoluteAccuracy, ), {, m, =]
[if, (, FastMath, ., abs, (, max, -, min, ), <=, absoluteAccuracy, ), {, m, =, UnivariateSolverUtils, ., midpoint, (]
[FastMath, ., abs, (, max, -, min, ), <=, absoluteAccuracy, ), {, m, =, UnivariateSolverUtils, ., midpoint, (, min, ,]
[max, -, min, ), <=, absoluteAccuracy, ), {, m, =, UnivariateSolverUtils, ., midpoint, (, min, ,, max, ), ;, return]
