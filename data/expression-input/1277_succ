[;, public, static, final, double, DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD, =, 1.0e-10, ;, private, double, [, ], [, ], lTData, ;, private, RealMatrix, cachedL]
[;, private, double, [, ], [, ], lTData, ;, private, RealMatrix, cachedL, ;, private, RealMatrix, cachedLT, ;, public, CholeskyDecomposition, (]
[,, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD, ,, DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD, ), ;, }, public, CholeskyDecomposition, (, final, RealMatrix, matrix, ,, final, double, relativeSymmetryThreshold, ,, final, double]
[,, DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD, ), ;, }, public, CholeskyDecomposition, (, final, RealMatrix, matrix, ,, final, double, relativeSymmetryThreshold, ,, final, double, absolutePositivityThreshold, )]
[), ;, }, public, CholeskyDecomposition, (, final, RealMatrix, matrix, ,, final, double, relativeSymmetryThreshold, ,, final, double, absolutePositivityThreshold, ), {, if]
[), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }]
[), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }]
[., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (]
[;, }, final, int, order, =, matrix, ., getRowDimension, (, ), ;, lTData, =, matrix, ., getData, (, ), ;]
[,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, order, =, matrix, ., getRowDimension, (, ), ;, lTData]
[., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, order, =, matrix, ., getRowDimension]
[), ;, }, final, int, order, =, matrix, ., getRowDimension, (, ), ;, lTData, =, matrix, ., getData, (, )]
[., getColumnDimension, (, ), ), ;, }, final, int, order, =, matrix, ., getRowDimension, (, ), ;, lTData, =, matrix]
[;, lTData, =, matrix, ., getData, (, ), ;, cachedL, =, null, ;, cachedLT, =, null, ;, for, (, int]
[., getRowDimension, (, ), ;, lTData, =, matrix, ., getData, (, ), ;, cachedL, =, null, ;, cachedLT, =, null]
[=, matrix, ., getData, (, ), ;, cachedL, =, null, ;, cachedLT, =, null, ;, for, (, int, i, =]
[;, cachedL, =, null, ;, cachedLT, =, null, ;, for, (, int, i, =, 0, ;, i, <, order, ;]
[., getData, (, ), ;, cachedL, =, null, ;, cachedLT, =, null, ;, for, (, int, i, =, 0, ;]
[=, null, ;, cachedLT, =, null, ;, for, (, int, i, =, 0, ;, i, <, order, ;, ++, i]
[;, cachedLT, =, null, ;, for, (, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {]
[=, null, ;, for, (, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {, final, double]
[;, for, (, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {, final, double, [, ]]
[;, i, <, order, ;, ++, i, ), {, final, double, [, ], lI, =, lTData, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], lI, =, lTData, [, i, ], ;, for, (, int, j]
[<, order, ;, ++, i, ), {, final, double, [, ], lI, =, lTData, [, i, ], ;, for, (]
[;, ++, i, ), {, final, double, [, ], lI, =, lTData, [, i, ], ;, for, (, int, j]
[), {, final, double, [, ], lI, =, lTData, [, i, ], ;, for, (, int, j, =, i, +]
[), {, final, double, [, ], lI, =, lTData, [, i, ], ;, for, (, int, j, =, i, +]
[;, for, (, int, j, =, i, +, 1, ;, j, <, order, ;, ++, j, ), {, final, double]
[[, i, ], ;, for, (, int, j, =, i, +, 1, ;, j, <, order, ;, ++, j, )]
[], ;, for, (, int, j, =, i, +, 1, ;, j, <, order, ;, ++, j, ), {, final]
[;, j, <, order, ;, ++, j, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;]
[+, 1, ;, j, <, order, ;, ++, j, ), {, final, double, [, ], lJ, =, lTData, [, j]
[;, j, <, order, ;, ++, j, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;]
[;, ++, j, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lIJ, =]
[<, order, ;, ++, j, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double]
[;, ++, j, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lIJ, =]
[), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lIJ, =, lI, [, j]
[), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lIJ, =, lI, [, j]
[;, final, double, lIJ, =, lI, [, j, ], ;, final, double, lJI, =, lJ, [, i, ], ;, final]
[[, j, ], ;, final, double, lIJ, =, lI, [, j, ], ;, final, double, lJI, =, lJ, [, i]
[], ;, final, double, lIJ, =, lI, [, j, ], ;, final, double, lJI, =, lJ, [, i, ], ;]
[;, final, double, lJI, =, lJ, [, i, ], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *, FastMath, ., max, (]
[[, j, ], ;, final, double, lJI, =, lJ, [, i, ], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *, FastMath]
[], ;, final, double, lJI, =, lJ, [, i, ], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *, FastMath, ., max]
[;, final, double, maxDelta, =, relativeSymmetryThreshold, *, FastMath, ., max, (, FastMath, ., abs, (, lIJ, ), ,, FastMath, .]
[[, i, ], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *, FastMath, ., max, (, FastMath, ., abs, (, lIJ, )]
[], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *, FastMath, ., max, (, FastMath, ., abs, (, lIJ, ), ,, FastMath]
[;, if, (, FastMath, ., abs, (, lIJ, -, lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i]
[*, FastMath, ., max, (, FastMath, ., abs, (, lIJ, ), ,, FastMath, ., abs, (, lJI, ), ), ;]
[;, if, (, FastMath, ., abs, (, lIJ, -, lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i]
[., max, (, FastMath, ., abs, (, lIJ, ), ,, FastMath, ., abs, (, lJI, ), ), ;, if, (]
[,, FastMath, ., abs, (, lJI, ), ), ;, if, (, FastMath, ., abs, (, lIJ, -, lJI, ), >]
[., abs, (, lIJ, ), ,, FastMath, ., abs, (, lJI, ), ), ;, if, (, FastMath, ., abs, (]
[), ,, FastMath, ., abs, (, lJI, ), ), ;, if, (, FastMath, ., abs, (, lIJ, -, lJI, )]
[), ;, if, (, FastMath, ., abs, (, lIJ, -, lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (]
[., abs, (, lJI, ), ), ;, if, (, FastMath, ., abs, (, lIJ, -, lJI, ), >, maxDelta, )]
[), ), ;, if, (, FastMath, ., abs, (, lIJ, -, lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException]
[), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeSymmetryThreshold, ), ;, }, lJ, [, i, ], =, 0]
[>, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeSymmetryThreshold, ), ;, }, lJ, [, i, ]]
[., abs, (, lIJ, -, lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeSymmetryThreshold]
[), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeSymmetryThreshold, ), ;, }, lJ, [, i]
[-, lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeSymmetryThreshold, ), ;, }, lJ]
[), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeSymmetryThreshold, ), ;, }, lJ, [, i]
[), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeSymmetryThreshold, ), ;, }, lJ, [, i, ], =, 0]
[;, }, lJ, [, i, ], =, 0, ;, }, }, for, (, int, i, =, 0, ;, i, <]
[,, j, ,, relativeSymmetryThreshold, ), ;, }, lJ, [, i, ], =, 0, ;, }, }, for, (, int, i]
[,, relativeSymmetryThreshold, ), ;, }, lJ, [, i, ], =, 0, ;, }, }, for, (, int, i, =, 0]
[), ;, }, lJ, [, i, ], =, 0, ;, }, }, for, (, int, i, =, 0, ;, i]
[=, 0, ;, }, }, for, (, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {]
[[, i, ], =, 0, ;, }, }, for, (, int, i, =, 0, ;, i, <, order, ;, ++]
[], =, 0, ;, }, }, for, (, int, i, =, 0, ;, i, <, order, ;, ++, i, )]
[;, }, }, for, (, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {, final, double]
[;, i, <, order, ;, ++, i, ), {, final, double, [, ], ltI, =, lTData, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], ltI, =, lTData, [, i, ], ;, if, (, ltI, []
[<, order, ;, ++, i, ), {, final, double, [, ], ltI, =, lTData, [, i, ], ;, if, (]
[;, ++, i, ), {, final, double, [, ], ltI, =, lTData, [, i, ], ;, if, (, ltI, []
[), {, final, double, [, ], ltI, =, lTData, [, i, ], ;, if, (, ltI, [, i, ], <=]
[), {, final, double, [, ], ltI, =, lTData, [, i, ], ;, if, (, ltI, [, i, ], <=]
[;, if, (, ltI, [, i, ], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,]
[[, i, ], ;, if, (, ltI, [, i, ], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, []
[], ;, if, (, ltI, [, i, ], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ]]
[), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }, ltI, [, i]
[<=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }, ltI]
[[, i, ], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, )]
[], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }]
[), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }, ltI, [, i]
[;, }, ltI, [, i, ], =, FastMath, ., sqrt, (, ltI, [, i, ], ), ;, final, double, inverse]
[,, i, ,, absolutePositivityThreshold, ), ;, }, ltI, [, i, ], =, FastMath, ., sqrt, (, ltI, [, i, ]]
[[, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }, ltI, [, i, ], =, FastMath, ., sqrt, (, ltI]
[], ,, i, ,, absolutePositivityThreshold, ), ;, }, ltI, [, i, ], =, FastMath, ., sqrt, (, ltI, [, i]
[,, absolutePositivityThreshold, ), ;, }, ltI, [, i, ], =, FastMath, ., sqrt, (, ltI, [, i, ], ), ;]
[), ;, }, ltI, [, i, ], =, FastMath, ., sqrt, (, ltI, [, i, ], ), ;, final, double]
[=, FastMath, ., sqrt, (, ltI, [, i, ], ), ;, final, double, inverse, =, 1.0, /, ltI, [, i]
[[, i, ], =, FastMath, ., sqrt, (, ltI, [, i, ], ), ;, final, double, inverse, =, 1.0, /]
[], =, FastMath, ., sqrt, (, ltI, [, i, ], ), ;, final, double, inverse, =, 1.0, /, ltI, []
[;, final, double, inverse, =, 1.0, /, ltI, [, i, ], ;, for, (, int, q, =, order, -, 1]
[., sqrt, (, ltI, [, i, ], ), ;, final, double, inverse, =, 1.0, /, ltI, [, i, ], ;]
[), ;, final, double, inverse, =, 1.0, /, ltI, [, i, ], ;, for, (, int, q, =, order, -]
[[, i, ], ), ;, final, double, inverse, =, 1.0, /, ltI, [, i, ], ;, for, (, int, q]
[], ), ;, final, double, inverse, =, 1.0, /, ltI, [, i, ], ;, for, (, int, q, =, order]
[;, for, (, int, q, =, order, -, 1, ;, q, >, i, ;, --, q, ), {, ltI, []
[/, ltI, [, i, ], ;, for, (, int, q, =, order, -, 1, ;, q, >, i, ;, --]
[;, for, (, int, q, =, order, -, 1, ;, q, >, i, ;, --, q, ), {, ltI, []
[[, i, ], ;, for, (, int, q, =, order, -, 1, ;, q, >, i, ;, --, q, )]
[], ;, for, (, int, q, =, order, -, 1, ;, q, >, i, ;, --, q, ), {, ltI]
[;, q, >, i, ;, --, q, ), {, ltI, [, q, ], *=, inverse, ;, final, double, [, ]]
[-, 1, ;, q, >, i, ;, --, q, ), {, ltI, [, q, ], *=, inverse, ;, final, double]
[;, q, >, i, ;, --, q, ), {, ltI, [, q, ], *=, inverse, ;, final, double, [, ]]
[;, --, q, ), {, ltI, [, q, ], *=, inverse, ;, final, double, [, ], ltQ, =, lTData, []
[>, i, ;, --, q, ), {, ltI, [, q, ], *=, inverse, ;, final, double, [, ], ltQ, =]
[;, --, q, ), {, ltI, [, q, ], *=, inverse, ;, final, double, [, ], ltQ, =, lTData, []
[), {, ltI, [, q, ], *=, inverse, ;, final, double, [, ], ltQ, =, lTData, [, q, ], ;]
[), {, ltI, [, q, ], *=, inverse, ;, final, double, [, ], ltQ, =, lTData, [, q, ], ;]
[*=, inverse, ;, final, double, [, ], ltQ, =, lTData, [, q, ], ;, for, (, int, p, =, q]
[[, q, ], *=, inverse, ;, final, double, [, ], ltQ, =, lTData, [, q, ], ;, for, (, int]
[], *=, inverse, ;, final, double, [, ], ltQ, =, lTData, [, q, ], ;, for, (, int, p, =]
[;, final, double, [, ], ltQ, =, lTData, [, q, ], ;, for, (, int, p, =, q, ;, p]
[;, for, (, int, p, =, q, ;, p, <, order, ;, ++, p, ), {, ltQ, [, p, ]]
[[, q, ], ;, for, (, int, p, =, q, ;, p, <, order, ;, ++, p, ), {, ltQ]
[], ;, for, (, int, p, =, q, ;, p, <, order, ;, ++, p, ), {, ltQ, [, p]
[;, p, <, order, ;, ++, p, ), {, ltQ, [, p, ], -=, ltI, [, q, ], *, ltI]
[;, ++, p, ), {, ltQ, [, p, ], -=, ltI, [, q, ], *, ltI, [, p, ], ;]
[<, order, ;, ++, p, ), {, ltQ, [, p, ], -=, ltI, [, q, ], *, ltI, [, p]
[;, ++, p, ), {, ltQ, [, p, ], -=, ltI, [, q, ], *, ltI, [, p, ], ;]
[), {, ltQ, [, p, ], -=, ltI, [, q, ], *, ltI, [, p, ], ;, }, }, }]
[), {, ltQ, [, p, ], -=, ltI, [, q, ], *, ltI, [, p, ], ;, }, }, }]
[-=, ltI, [, q, ], *, ltI, [, p, ], ;, }, }, }, }, public, RealMatrix, getL, (, )]
[[, p, ], -=, ltI, [, q, ], *, ltI, [, p, ], ;, }, }, }, }, public, RealMatrix]
[], -=, ltI, [, q, ], *, ltI, [, p, ], ;, }, }, }, }, public, RealMatrix, getL, (]
[;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (, cachedL, ==, null, ), {, cachedL, =]
[*, ltI, [, p, ], ;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (, cachedL, ==]
[[, q, ], *, ltI, [, p, ], ;, }, }, }, }, public, RealMatrix, getL, (, ), {, if]
[], *, ltI, [, p, ], ;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (, cachedL]
[;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (, cachedL, ==, null, ), {, cachedL, =]
[[, p, ], ;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (, cachedL, ==, null, )]
[], ;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (, cachedL, ==, null, ), {, cachedL]
[), {, cachedL, =, getLT, (, ), ., transpose, (, ), ;, }, return, cachedL, ;, }, public, RealMatrix, getLT]
[==, null, ), {, cachedL, =, getLT, (, ), ., transpose, (, ), ;, }, return, cachedL, ;, }, public]
[), {, cachedL, =, getLT, (, ), ., transpose, (, ), ;, }, return, cachedL, ;, }, public, RealMatrix, getLT]
[=, getLT, (, ), ., transpose, (, ), ;, }, return, cachedL, ;, }, public, RealMatrix, getLT, (, ), {]
[;, }, return, cachedL, ;, }, public, RealMatrix, getLT, (, ), {, if, (, cachedLT, ==, null, ), {, cachedLT]
[., transpose, (, ), ;, }, return, cachedL, ;, }, public, RealMatrix, getLT, (, ), {, if, (, cachedLT, ==]
[;, }, public, RealMatrix, getLT, (, ), {, if, (, cachedLT, ==, null, ), {, cachedLT, =, MatrixUtils, ., createRealMatrix]
[), {, cachedLT, =, MatrixUtils, ., createRealMatrix, (, lTData, ), ;, }, return, cachedLT, ;, }, public, double, getDeterminant, (]
[==, null, ), {, cachedLT, =, MatrixUtils, ., createRealMatrix, (, lTData, ), ;, }, return, cachedLT, ;, }, public, double]
[), {, cachedLT, =, MatrixUtils, ., createRealMatrix, (, lTData, ), ;, }, return, cachedLT, ;, }, public, double, getDeterminant, (]
[=, MatrixUtils, ., createRealMatrix, (, lTData, ), ;, }, return, cachedLT, ;, }, public, double, getDeterminant, (, ), {, double]
[;, }, return, cachedLT, ;, }, public, double, getDeterminant, (, ), {, double, determinant, =, 1.0, ;, for, (, int]
[., createRealMatrix, (, lTData, ), ;, }, return, cachedLT, ;, }, public, double, getDeterminant, (, ), {, double, determinant, =]
[), ;, }, return, cachedLT, ;, }, public, double, getDeterminant, (, ), {, double, determinant, =, 1.0, ;, for, (]
[;, }, public, double, getDeterminant, (, ), {, double, determinant, =, 1.0, ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, lTData, ., length, ;, ++, i, ), {, double, lTii]
[;, i, <, lTData, ., length, ;, ++, i, ), {, double, lTii, =, lTData, [, i, ], [, i]
[;, ++, i, ), {, double, lTii, =, lTData, [, i, ], [, i, ], ;, determinant, *=, lTii, *]
[<, lTData, ., length, ;, ++, i, ), {, double, lTii, =, lTData, [, i, ], [, i, ], ;]
[;, ++, i, ), {, double, lTii, =, lTData, [, i, ], [, i, ], ;, determinant, *=, lTii, *]
[., length, ;, ++, i, ), {, double, lTii, =, lTData, [, i, ], [, i, ], ;, determinant, *=]
[), {, double, lTii, =, lTData, [, i, ], [, i, ], ;, determinant, *=, lTii, *, lTii, ;, }]
[), {, double, lTii, =, lTData, [, i, ], [, i, ], ;, determinant, *=, lTii, *, lTii, ;, }]
[;, determinant, *=, lTii, *, lTii, ;, }, return, determinant, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new]
[[, i, ], ;, determinant, *=, lTii, *, lTii, ;, }, return, determinant, ;, }, public, DecompositionSolver, getSolver, (, )]
[[, i, ], [, i, ], ;, determinant, *=, lTii, *, lTii, ;, }, return, determinant, ;, }, public, DecompositionSolver]
[], [, i, ], ;, determinant, *=, lTii, *, lTii, ;, }, return, determinant, ;, }, public, DecompositionSolver, getSolver, (]
[], ;, determinant, *=, lTii, *, lTii, ;, }, return, determinant, ;, }, public, DecompositionSolver, getSolver, (, ), {, return]
[*=, lTii, *, lTii, ;, }, return, determinant, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (]
[;, }, return, determinant, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, lTData, ), ;, }]
[*, lTii, ;, }, return, determinant, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, lTData, )]
[;, }, return, determinant, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, lTData, ), ;, }]
[;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, lTData, ), ;, }, private, static, class, Solver]
[;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, double, [, ], [, ], lTData, ;, private, Solver]
[), ;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, double, [, ], [, ], lTData, ;, private]
[=, lTData, ;, }, public, boolean, isNonSingular, (, ), {, return, true, ;, }, public, RealVector, solve, (, final, RealVector]
[., lTData, =, lTData, ;, }, public, boolean, isNonSingular, (, ), {, return, true, ;, }, public, RealVector, solve, (]
[;, }, public, boolean, isNonSingular, (, ), {, return, true, ;, }, public, RealVector, solve, (, final, RealVector, b, )]
[;, }, public, RealVector, solve, (, final, RealVector, b, ), {, final, int, m, =, lTData, ., length, ;, if]
[;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (]
[., length, ;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, .]
[), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, final, double, [, ]]
[!=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, final, double]
[., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, )]
[), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, final, double, [, ]]
[;, }, final, double, [, ], x, =, b, ., toArray, (, ), ;, for, (, int, j, =, 0]
[,, m, ), ;, }, final, double, [, ], x, =, b, ., toArray, (, ), ;, for, (, int]
[., getDimension, (, ), ,, m, ), ;, }, final, double, [, ], x, =, b, ., toArray, (, )]
[), ;, }, final, double, [, ], x, =, b, ., toArray, (, ), ;, for, (, int, j, =]
[;, for, (, int, j, =, 0, ;, j, <, m, ;, j, ++, ), {, final, double, [, ]]
[., toArray, (, ), ;, for, (, int, j, =, 0, ;, j, <, m, ;, j, ++, ), {]
[;, j, <, m, ;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;]
[;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, x, [, j, ]]
[<, m, ;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, x, []
[;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, x, [, j, ]]
[), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, x, [, j, ], /=, lJ, []
[++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, x, [, j, ], /=, lJ]
[;, x, [, j, ], /=, lJ, [, j, ], ;, final, double, xJ, =, x, [, j, ], ;]
[[, j, ], ;, x, [, j, ], /=, lJ, [, j, ], ;, final, double, xJ, =, x, []
[], ;, x, [, j, ], /=, lJ, [, j, ], ;, final, double, xJ, =, x, [, j, ]]
[/=, lJ, [, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =]
[[, j, ], /=, lJ, [, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (]
[], /=, lJ, [, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i]
[;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, j, +, 1, ;, i]
[[, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, j, +]
[], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, j, +, 1, ;]
[;, for, (, int, i, =, j, +, 1, ;, i, <, m, ;, i, ++, ), {, x, []
[[, j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, m, ;, i, ++, )]
[], ;, for, (, int, i, =, j, +, 1, ;, i, <, m, ;, i, ++, ), {, x]
[;, i, <, m, ;, i, ++, ), {, x, [, i, ], -=, xJ, *, lJ, [, i, ]]
[+, 1, ;, i, <, m, ;, i, ++, ), {, x, [, i, ], -=, xJ, *, lJ, []
[;, i, <, m, ;, i, ++, ), {, x, [, i, ], -=, xJ, *, lJ, [, i, ]]
[;, i, ++, ), {, x, [, i, ], -=, xJ, *, lJ, [, i, ], ;, }, }, for]
[<, m, ;, i, ++, ), {, x, [, i, ], -=, xJ, *, lJ, [, i, ], ;, }]
[;, i, ++, ), {, x, [, i, ], -=, xJ, *, lJ, [, i, ], ;, }, }, for]
[), {, x, [, i, ], -=, xJ, *, lJ, [, i, ], ;, }, }, for, (, int, j]
[++, ), {, x, [, i, ], -=, xJ, *, lJ, [, i, ], ;, }, }, for, (, int]
[-=, xJ, *, lJ, [, i, ], ;, }, }, for, (, int, j, =, m, -, 1, ;, j]
[[, i, ], -=, xJ, *, lJ, [, i, ], ;, }, }, for, (, int, j, =, m, -]
[], -=, xJ, *, lJ, [, i, ], ;, }, }, for, (, int, j, =, m, -, 1, ;]
[;, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {]
[*, lJ, [, i, ], ;, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0]
[;, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {]
[[, i, ], ;, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;, j]
[], ;, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, )]
[;, j, >=, 0, ;, j, --, ), {, x, [, j, ], /=, lTData, [, j, ], [, j]
[-, 1, ;, j, >=, 0, ;, j, --, ), {, x, [, j, ], /=, lTData, [, j, ]]
[;, j, >=, 0, ;, j, --, ), {, x, [, j, ], /=, lTData, [, j, ], [, j]
[;, j, --, ), {, x, [, j, ], /=, lTData, [, j, ], [, j, ], ;, final, double]
[>=, 0, ;, j, --, ), {, x, [, j, ], /=, lTData, [, j, ], [, j, ], ;]
[;, j, --, ), {, x, [, j, ], /=, lTData, [, j, ], [, j, ], ;, final, double]
[), {, x, [, j, ], /=, lTData, [, j, ], [, j, ], ;, final, double, xJ, =, x]
[--, ), {, x, [, j, ], /=, lTData, [, j, ], [, j, ], ;, final, double, xJ, =]
[/=, lTData, [, j, ], [, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (]
[[, j, ], /=, lTData, [, j, ], [, j, ], ;, final, double, xJ, =, x, [, j, ]]
[], /=, lTData, [, j, ], [, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for]
[;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, 0, ;, i, <, j]
[[, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, 0, ;]
[[, j, ], [, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i]
[], [, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, 0]
[], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, x, [, i, ]]
[[, j, ], ;, for, (, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, x]
[], ;, for, (, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, x, [, i]
[;, i, <, j, ;, i, ++, ), {, x, [, i, ], -=, xJ, *, lTData, [, i, ]]
[;, i, ++, ), {, x, [, i, ], -=, xJ, *, lTData, [, i, ], [, j, ], ;]
[<, j, ;, i, ++, ), {, x, [, i, ], -=, xJ, *, lTData, [, i, ], [, j]
[;, i, ++, ), {, x, [, i, ], -=, xJ, *, lTData, [, i, ], [, j, ], ;]
[), {, x, [, i, ], -=, xJ, *, lTData, [, i, ], [, j, ], ;, }, }, return]
[++, ), {, x, [, i, ], -=, xJ, *, lTData, [, i, ], [, j, ], ;, }, }]
[-=, xJ, *, lTData, [, i, ], [, j, ], ;, }, }, return, new, ArrayRealVector, (, x, ,, false]
[[, i, ], -=, xJ, *, lTData, [, i, ], [, j, ], ;, }, }, return, new, ArrayRealVector, (]
[], -=, xJ, *, lTData, [, i, ], [, j, ], ;, }, }, return, new, ArrayRealVector, (, x, ,]
[;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, )]
[*, lTData, [, i, ], [, j, ], ;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;]
[;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, )]
[[, j, ], ;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (]
[[, i, ], [, j, ], ;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }, public]
[], [, j, ], ;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve]
[], ;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b]
[;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, m, =, lTData, ., length, ;, if, (]
[,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, m, =, lTData, ., length]
[), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, m, =, lTData, ., length, ;, if]
[;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (]
[., length, ;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, .]
[), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, final, int, nColB, =]
[!=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, final, int]
[., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, )]
[), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, final, int, nColB, =]
[;, }, final, int, nColB, =, b, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], x, =]
[,, m, ), ;, }, final, int, nColB, =, b, ., getColumnDimension, (, ), ;, final, double, [, ], []
[., getRowDimension, (, ), ,, m, ), ;, }, final, int, nColB, =, b, ., getColumnDimension, (, ), ;, final]
[), ;, }, final, int, nColB, =, b, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], x]
[;, final, double, [, ], [, ], x, =, b, ., getData, (, ), ;, for, (, int, j, =]
[., getColumnDimension, (, ), ;, final, double, [, ], [, ], x, =, b, ., getData, (, ), ;, for]
[;, for, (, int, j, =, 0, ;, j, <, m, ;, j, ++, ), {, final, double, [, ]]
[., getData, (, ), ;, for, (, int, j, =, 0, ;, j, <, m, ;, j, ++, ), {]
[;, j, <, m, ;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;]
[;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lJJ, =]
[<, m, ;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double]
[;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lJJ, =]
[), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lJJ, =, lJ, [, j]
[++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lJJ, =, lJ, []
[;, final, double, lJJ, =, lJ, [, j, ], ;, final, double, [, ], xJ, =, x, [, j, ]]
[[, j, ], ;, final, double, lJJ, =, lJ, [, j, ], ;, final, double, [, ], xJ, =, x]
[], ;, final, double, lJJ, =, lJ, [, j, ], ;, final, double, [, ], xJ, =, x, [, j]
[;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;, k]
[[, j, ], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =]
[], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;]
[;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xJ, [, k, ]]
[[, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xJ]
[], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xJ, [, k]
[;, k, <, nColB, ;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int]
[;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, j, +]
[<, nColB, ;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =]
[;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, j, +]
[), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, j, +, 1, ;, i]
[), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, j, +, 1, ;, i]
[/=, lJJ, ;, }, for, (, int, i, =, j, +, 1, ;, i, <, m, ;, i, ++, )]
[[, k, ], /=, lJJ, ;, }, for, (, int, i, =, j, +, 1, ;, i, <, m, ;]
[], /=, lJJ, ;, }, for, (, int, i, =, j, +, 1, ;, i, <, m, ;, i, ++]
[;, }, for, (, int, i, =, j, +, 1, ;, i, <, m, ;, i, ++, ), {, final]
[;, i, <, m, ;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;]
[+, 1, ;, i, <, m, ;, i, ++, ), {, final, double, [, ], xI, =, x, [, i]
[;, i, <, m, ;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;]
[;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lJI, =]
[<, m, ;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double]
[;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lJI, =]
[), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lJI, =, lJ, [, i]
[++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lJI, =, lJ, []
[;, final, double, lJI, =, lJ, [, i, ], ;, for, (, int, k, =, 0, ;, k, <, nColB]
[[, i, ], ;, final, double, lJI, =, lJ, [, i, ], ;, for, (, int, k, =, 0, ;]
[], ;, final, double, lJI, =, lJ, [, i, ], ;, for, (, int, k, =, 0, ;, k, <]
[;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ]]
[[, i, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI]
[], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k]
[;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=, xJ, [, k, ], *, lJI]
[;, ++, k, ), {, xI, [, k, ], -=, xJ, [, k, ], *, lJI, ;, }, }, }]
[<, nColB, ;, ++, k, ), {, xI, [, k, ], -=, xJ, [, k, ], *, lJI, ;, }]
[;, ++, k, ), {, xI, [, k, ], -=, xJ, [, k, ], *, lJI, ;, }, }, }]
[), {, xI, [, k, ], -=, xJ, [, k, ], *, lJI, ;, }, }, }, for, (, int]
[), {, xI, [, k, ], -=, xJ, [, k, ], *, lJI, ;, }, }, }, for, (, int]
[-=, xJ, [, k, ], *, lJI, ;, }, }, }, for, (, int, j, =, m, -, 1, ;]
[[, k, ], -=, xJ, [, k, ], *, lJI, ;, }, }, }, for, (, int, j, =, m]
[], -=, xJ, [, k, ], *, lJI, ;, }, }, }, for, (, int, j, =, m, -, 1]
[;, }, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, )]
[*, lJI, ;, }, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;, j]
[[, k, ], *, lJI, ;, }, }, }, for, (, int, j, =, m, -, 1, ;, j, >=]
[], *, lJI, ;, }, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;]
[;, }, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, )]
[;, j, >=, 0, ;, j, --, ), {, final, double, lJJ, =, lTData, [, j, ], [, j, ]]
[-, 1, ;, j, >=, 0, ;, j, --, ), {, final, double, lJJ, =, lTData, [, j, ], []
[;, j, >=, 0, ;, j, --, ), {, final, double, lJJ, =, lTData, [, j, ], [, j, ]]
[;, j, --, ), {, final, double, lJJ, =, lTData, [, j, ], [, j, ], ;, final, double, []
[>=, 0, ;, j, --, ), {, final, double, lJJ, =, lTData, [, j, ], [, j, ], ;, final]
[;, j, --, ), {, final, double, lJJ, =, lTData, [, j, ], [, j, ], ;, final, double, []
[), {, final, double, lJJ, =, lTData, [, j, ], [, j, ], ;, final, double, [, ], xJ, =]
[--, ), {, final, double, lJJ, =, lTData, [, j, ], [, j, ], ;, final, double, [, ], xJ]
[;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;, k]
[[, j, ], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =]
[[, j, ], [, j, ], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (]
[], [, j, ], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k]
[], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;]
[;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xJ, [, k, ]]
[[, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xJ]
[], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xJ, [, k]
[;, k, <, nColB, ;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int]
[;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, 0, ;]
[<, nColB, ;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =]
[;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, 0, ;]
[), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, 0, ;, i, <, j]
[), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, 0, ;, i, <, j]
[/=, lJJ, ;, }, for, (, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, final]
[[, k, ], /=, lJJ, ;, }, for, (, int, i, =, 0, ;, i, <, j, ;, i, ++]
[], /=, lJJ, ;, }, for, (, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {]
[;, }, for, (, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, final, double, []
[;, i, <, j, ;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;]
[;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lIJ, =]
[<, j, ;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double]
[;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lIJ, =]
[), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lIJ, =, lTData, [, i]
[++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lIJ, =, lTData, []
[;, final, double, lIJ, =, lTData, [, i, ], [, j, ], ;, for, (, int, k, =, 0, ;]
[[, i, ], ;, final, double, lIJ, =, lTData, [, i, ], [, j, ], ;, for, (, int, k]
[], ;, final, double, lIJ, =, lTData, [, i, ], [, j, ], ;, for, (, int, k, =, 0]
[;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ]]
[[, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI]
[[, i, ], [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k]
[], [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {]
[], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k]
[;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=, xJ, [, k, ], *, lIJ]
[;, ++, k, ), {, xI, [, k, ], -=, xJ, [, k, ], *, lIJ, ;, }, }, }]
[<, nColB, ;, ++, k, ), {, xI, [, k, ], -=, xJ, [, k, ], *, lIJ, ;, }]
[;, ++, k, ), {, xI, [, k, ], -=, xJ, [, k, ], *, lIJ, ;, }, }, }]
[), {, xI, [, k, ], -=, xJ, [, k, ], *, lIJ, ;, }, }, }, return, new, Array2DRowRealMatrix]
[), {, xI, [, k, ], -=, xJ, [, k, ], *, lIJ, ;, }, }, }, return, new, Array2DRowRealMatrix]
[-=, xJ, [, k, ], *, lIJ, ;, }, }, }, return, new, Array2DRowRealMatrix, (, x, ), ;, }, public]
[[, k, ], -=, xJ, [, k, ], *, lIJ, ;, }, }, }, return, new, Array2DRowRealMatrix, (, x, )]
[], -=, xJ, [, k, ], *, lIJ, ;, }, }, }, return, new, Array2DRowRealMatrix, (, x, ), ;, }]
[;, }, }, }, return, new, Array2DRowRealMatrix, (, x, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve]
[*, lIJ, ;, }, }, }, return, new, Array2DRowRealMatrix, (, x, ), ;, }, public, RealMatrix, getInverse, (, ), {]
[[, k, ], *, lIJ, ;, }, }, }, return, new, Array2DRowRealMatrix, (, x, ), ;, }, public, RealMatrix, getInverse]
[], *, lIJ, ;, }, }, }, return, new, Array2DRowRealMatrix, (, x, ), ;, }, public, RealMatrix, getInverse, (, )]
[;, }, }, }, return, new, Array2DRowRealMatrix, (, x, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve]
[;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (, lTData, ., length, ), )]
[), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (, lTData, ., length, )]
[;, }, }, }]
[), ;, }, }, }]
[., createRealIdentityMatrix, (, lTData, ., length, ), ), ;, }, }, }]
[), ), ;, }, }, }]
[., length, ), ), ;, }, }, }]
