[., util, ., FastMath, ;, public, abstract, class, AbstractRealDistribution, implements, RealDistribution, ,, Serializable, {, public, static, final, double, SOLVER_DEFAULT_ABSOLUTE_ACCURACY, =]
[AbstractRealDistribution, implements, RealDistribution, ,, Serializable, {, public, static, final, double, SOLVER_DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, private, static, final, long, serialVersionUID, =]
[implements, RealDistribution, ,, Serializable, {, public, static, final, double, SOLVER_DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, private, static, final, long, serialVersionUID, =, -]
[double, SOLVER_DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, private, static, final, long, serialVersionUID, =, -, 38038050983108802L, ;, @, Deprecated, protected, RandomDataImpl, randomData, =]
[@, Deprecated, protected, RandomDataImpl, randomData, =, new, RandomDataImpl, (, ), ;, protected, final, RandomGenerator, random, ;, private, double, solverAbsoluteAccuracy, =]
[), ;, protected, final, RandomGenerator, random, ;, private, double, solverAbsoluteAccuracy, =, SOLVER_DEFAULT_ABSOLUTE_ACCURACY, ;, @, Deprecated, protected, AbstractRealDistribution, (, ), {]
[protected, final, RandomGenerator, random, ;, private, double, solverAbsoluteAccuracy, =, SOLVER_DEFAULT_ABSOLUTE_ACCURACY, ;, @, Deprecated, protected, AbstractRealDistribution, (, ), {, random, =]
[;, @, Deprecated, protected, AbstractRealDistribution, (, ), {, random, =, null, ;, }, protected, AbstractRealDistribution, (, RandomGenerator, rng, ), {]
[Deprecated, protected, AbstractRealDistribution, (, ), {, random, =, null, ;, }, protected, AbstractRealDistribution, (, RandomGenerator, rng, ), {, random, =]
[=, rng, ;, }, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[;, }, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return, probability, (]
[@, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return, probability, (, x0, ,]
[(, x0, ,, x1, ), ;, }, public, double, probability, (, double, x0, ,, double, x1, ), {, if, (]
[(, x0, ,, x1, ), ;, }, public, double, probability, (, double, x0, ,, double, x1, ), {, if, (]
[,, x1, ), ;, }, public, double, probability, (, double, x0, ,, double, x1, ), {, if, (, x0, >]
[}, public, double, probability, (, double, x0, ,, double, x1, ), {, if, (, x0, >, x1, ), {, throw]
[probability, (, double, x0, ,, double, x1, ), {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (]
[probability, (, double, x0, ,, double, x1, ), {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (]
[,, double, x1, ), {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,]
[x1, ), {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,]
[{, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,]
[x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return]
[x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return]
[{, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability, (]
[NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -]
[LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (]
[-, cumulativeProbability, (, x0, ), ;, }, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[-, cumulativeProbability, (, x0, ), ;, }, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[-, cumulativeProbability, (, x0, ), ;, }, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[(, x0, ), ;, }, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <]
[), ;, }, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[), ;, }, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[}, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >]
[(, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw]
[p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (]
[throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,]
[{, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,]
[p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, double, lowerBound, =]
[new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, double, lowerBound, =, getSupportLowerBound, (, ), ;, if, (]
[new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, double, lowerBound, =, getSupportLowerBound, (, ), ;, if, (]
[(, p, ,, 0, ,, 1, ), ;, }, double, lowerBound, =, getSupportLowerBound, (, ), ;, if, (, p, ==]
[,, 1, ), ;, }, double, lowerBound, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return]
[lowerBound, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return, lowerBound, ;, }, double, upperBound, =]
[if, (, p, ==, 0.0, ), {, return, lowerBound, ;, }, double, upperBound, =, getSupportUpperBound, (, ), ;, if, (]
[if, (, p, ==, 0.0, ), {, return, lowerBound, ;, }, double, upperBound, =, getSupportUpperBound, (, ), ;, if, (]
[p, ==, 0.0, ), {, return, lowerBound, ;, }, double, upperBound, =, getSupportUpperBound, (, ), ;, if, (, p, ==]
[{, return, lowerBound, ;, }, double, upperBound, =, getSupportUpperBound, (, ), ;, if, (, p, ==, 1.0, ), {, return]
[=, getSupportUpperBound, (, ), ;, if, (, p, ==, 1.0, ), {, return, upperBound, ;, }, final, double, mu, =]
[==, 1.0, ), {, return, upperBound, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sig, =]
[==, 1.0, ), {, return, upperBound, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sig, =]
[return, upperBound, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sig, =, FastMath, ., sqrt, (]
[(, ), ;, final, double, sig, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;]
[;, final, double, sig, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =]
[final, double, sig, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !]
[double, sig, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (]
[double, sig, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (]
[double, sig, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (]
[double, sig, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (]
[double, sig, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (]
[., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (, Double, ., isInfinite, (]
[getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||]
[getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||]
[;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (]
[chebyshevApplies, ;, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||]
[chebyshevApplies, ;, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||]
[!, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (]
[., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sig, ), ||]
[., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sig, ), ||]
[), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sig, ), ||, Double, ., isNaN, (]
[mu, ), ||, Double, ., isInfinite, (, sig, ), ||, Double, ., isNaN, (, sig, ), ), ;, if, (]
[mu, ), ||, Double, ., isInfinite, (, sig, ), ||, Double, ., isNaN, (, sig, ), ), ;, if, (]
[||, Double, ., isInfinite, (, sig, ), ||, Double, ., isNaN, (, sig, ), ), ;, if, (, lowerBound, ==]
[||, Double, ., isInfinite, (, sig, ), ||, Double, ., isNaN, (, sig, ), ), ;, if, (, lowerBound, ==]
[||, Double, ., isNaN, (, sig, ), ), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[isNaN, (, sig, ), ), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {]
[sig, ), ), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =]
[sig, ), ), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =]
[), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -]
[), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -]
[if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *]
[if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *]
[Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *, FastMath, ., sqrt, (]
[Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *, FastMath, ., sqrt, (]
[., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *, FastMath, ., sqrt, (, (]
[., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *, FastMath, ., sqrt, (, (]
[), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *, FastMath, ., sqrt, (, (, 1., -]
[(, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *, FastMath, ., sqrt, (, (, 1., -, p, ), /]
[mu, -, sig, *, FastMath, ., sqrt, (, (, 1., -, p, ), /, p, ), ;, }, else, {]
[sig, *, FastMath, ., sqrt, (, (, 1., -, p, ), /, p, ), ;, }, else, {, lowerBound, =]
[*, FastMath, ., sqrt, (, (, 1., -, p, ), /, p, ), ;, }, else, {, lowerBound, =, -]
[(, (, 1., -, p, ), /, p, ), ;, }, else, {, lowerBound, =, -, 1.0, ;, while, (]
[(, (, 1., -, p, ), /, p, ), ;, }, else, {, lowerBound, =, -, 1.0, ;, while, (]
[1., -, p, ), /, p, ), ;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (]
[), /, p, ), ;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=]
[), ;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {]
[}, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {, lowerBound, *=]
[;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {, lowerBound, *=, 2.0, ;, }, }, }, if, (]
[;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {, lowerBound, *=, 2.0, ;, }, }, }, if, (]
[(, cumulativeProbability, (, lowerBound, ), >=, p, ), {, lowerBound, *=, 2.0, ;, }, }, }, if, (, upperBound, ==]
[(, cumulativeProbability, (, lowerBound, ), >=, p, ), {, lowerBound, *=, 2.0, ;, }, }, }, if, (, upperBound, ==]
[), {, lowerBound, *=, 2.0, ;, }, }, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[*=, 2.0, ;, }, }, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {]
[;, }, }, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =]
[;, }, }, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =]
[}, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +]
[}, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +]
[if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *]
[if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *]
[Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *, FastMath, ., sqrt, (]
[Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *, FastMath, ., sqrt, (]
[POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *, FastMath, ., sqrt, (, p, /]
[), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *, FastMath, ., sqrt, (, p, /, (]
[), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *, FastMath, ., sqrt, (, p, /, (]
[if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *, FastMath, ., sqrt, (, p, /, (, 1., -]
[mu, +, sig, *, FastMath, ., sqrt, (, p, /, (, 1., -, p, ), ), ;, }, else, {]
[sig, *, FastMath, ., sqrt, (, p, /, (, 1., -, p, ), ), ;, }, else, {, upperBound, =]
[sqrt, (, p, /, (, 1., -, p, ), ), ;, }, else, {, upperBound, =, 1.0, ;, while, (]
[sqrt, (, p, /, (, 1., -, p, ), ), ;, }, else, {, upperBound, =, 1.0, ;, while, (]
[p, /, (, 1., -, p, ), ), ;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (]
[1., -, p, ), ), ;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <]
[), ), ;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <, p, ), {]
[;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <, p, ), {, upperBound, *=]
[(, cumulativeProbability, (, upperBound, ), <, p, ), {, upperBound, *=, 2.0, ;, }, }, }, final, UnivariateFunction, toSolve, =]
[}, final, UnivariateFunction, toSolve, =, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return]
[}, final, UnivariateFunction, toSolve, =, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return]
[UnivariateFunction, toSolve, =, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return, cumulativeProbability, (]
[new, UnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return, cumulativeProbability, (, x, ), -]
[(, final, double, x, ), {, return, cumulativeProbability, (, x, ), -, p, ;, }, }, ;, double, x, =]
[(, final, double, x, ), {, return, cumulativeProbability, (, x, ), -, p, ;, }, }, ;, double, x, =]
[), {, return, cumulativeProbability, (, x, ), -, p, ;, }, }, ;, double, x, =, UnivariateSolverUtils, ., solve, (]
[return, cumulativeProbability, (, x, ), -, p, ;, }, }, ;, double, x, =, UnivariateSolverUtils, ., solve, (, toSolve, ,]
[(, x, ), -, p, ;, }, }, ;, double, x, =, UnivariateSolverUtils, ., solve, (, toSolve, ,, lowerBound, ,]
[), -, p, ;, }, }, ;, double, x, =, UnivariateSolverUtils, ., solve, (, toSolve, ,, lowerBound, ,, upperBound, ,]
[double, x, =, UnivariateSolverUtils, ., solve, (, toSolve, ,, lowerBound, ,, upperBound, ,, getSolverAbsoluteAccuracy, (, ), ), ;, if, (]
[x, =, UnivariateSolverUtils, ., solve, (, toSolve, ,, lowerBound, ,, upperBound, ,, getSolverAbsoluteAccuracy, (, ), ), ;, if, (, !]
[,, upperBound, ,, getSolverAbsoluteAccuracy, (, ), ), ;, if, (, !, isSupportConnected, (, ), ), {, final, double, dx, =]
[), ;, if, (, !, isSupportConnected, (, ), ), {, final, double, dx, =, getSolverAbsoluteAccuracy, (, ), ;, if, (]
[), ;, if, (, !, isSupportConnected, (, ), ), {, final, double, dx, =, getSolverAbsoluteAccuracy, (, ), ;, if, (]
[), ;, if, (, !, isSupportConnected, (, ), ), {, final, double, dx, =, getSolverAbsoluteAccuracy, (, ), ;, if, (]
[if, (, !, isSupportConnected, (, ), ), {, final, double, dx, =, getSolverAbsoluteAccuracy, (, ), ;, if, (, x, -]
[!, isSupportConnected, (, ), ), {, final, double, dx, =, getSolverAbsoluteAccuracy, (, ), ;, if, (, x, -, dx, >=]
[dx, =, getSolverAbsoluteAccuracy, (, ), ;, if, (, x, -, dx, >=, getSupportLowerBound, (, ), ), {, double, px, =]
[getSolverAbsoluteAccuracy, (, ), ;, if, (, x, -, dx, >=, getSupportLowerBound, (, ), ), {, double, px, =, cumulativeProbability, (]
[(, x, -, dx, >=, getSupportLowerBound, (, ), ), {, double, px, =, cumulativeProbability, (, x, ), ;, if, (]
[(, x, -, dx, >=, getSupportLowerBound, (, ), ), {, double, px, =, cumulativeProbability, (, x, ), ;, if, (]
[-, dx, >=, getSupportLowerBound, (, ), ), {, double, px, =, cumulativeProbability, (, x, ), ;, if, (, cumulativeProbability, (]
[-, dx, >=, getSupportLowerBound, (, ), ), {, double, px, =, cumulativeProbability, (, x, ), ;, if, (, cumulativeProbability, (]
[>=, getSupportLowerBound, (, ), ), {, double, px, =, cumulativeProbability, (, x, ), ;, if, (, cumulativeProbability, (, x, -]
[), ), {, double, px, =, cumulativeProbability, (, x, ), ;, if, (, cumulativeProbability, (, x, -, dx, ), ==]
[double, px, =, cumulativeProbability, (, x, ), ;, if, (, cumulativeProbability, (, x, -, dx, ), ==, px, ), {]
[=, cumulativeProbability, (, x, ), ;, if, (, cumulativeProbability, (, x, -, dx, ), ==, px, ), {, upperBound, =]
[), ;, if, (, cumulativeProbability, (, x, -, dx, ), ==, px, ), {, upperBound, =, x, ;, while, (]
[), ;, if, (, cumulativeProbability, (, x, -, dx, ), ==, px, ), {, upperBound, =, x, ;, while, (]
[), ;, if, (, cumulativeProbability, (, x, -, dx, ), ==, px, ), {, upperBound, =, x, ;, while, (]
[if, (, cumulativeProbability, (, x, -, dx, ), ==, px, ), {, upperBound, =, x, ;, while, (, upperBound, -]
[cumulativeProbability, (, x, -, dx, ), ==, px, ), {, upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >]
[px, ), {, upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double, midPoint, =]
[px, ), {, upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double, midPoint, =]
[{, upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double, midPoint, =, 0.5, *]
[upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double, midPoint, =, 0.5, *, (]
[upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double, midPoint, =, 0.5, *, (]
[x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double, midPoint, =, 0.5, *, (, lowerBound, +]
[-, lowerBound, >, dx, ), {, final, double, midPoint, =, 0.5, *, (, lowerBound, +, upperBound, ), ;, if, (]
[-, lowerBound, >, dx, ), {, final, double, midPoint, =, 0.5, *, (, lowerBound, +, upperBound, ), ;, if, (]
[>, dx, ), {, final, double, midPoint, =, 0.5, *, (, lowerBound, +, upperBound, ), ;, if, (, cumulativeProbability, (]
[{, final, double, midPoint, =, 0.5, *, (, lowerBound, +, upperBound, ), ;, if, (, cumulativeProbability, (, midPoint, ), <]
[midPoint, =, 0.5, *, (, lowerBound, +, upperBound, ), ;, if, (, cumulativeProbability, (, midPoint, ), <, px, ), {]
[0.5, *, (, lowerBound, +, upperBound, ), ;, if, (, cumulativeProbability, (, midPoint, ), <, px, ), {, lowerBound, =]
[upperBound, ), ;, if, (, cumulativeProbability, (, midPoint, ), <, px, ), {, lowerBound, =, midPoint, ;, }, else, {]
[;, if, (, cumulativeProbability, (, midPoint, ), <, px, ), {, lowerBound, =, midPoint, ;, }, else, {, upperBound, =]
[midPoint, ), <, px, ), {, lowerBound, =, midPoint, ;, }, else, {, upperBound, =, midPoint, ;, }, }, return]
[lowerBound, =, midPoint, ;, }, else, {, upperBound, =, midPoint, ;, }, }, return, upperBound, ;, }, }, }, return]
[;, }, }, return, upperBound, ;, }, }, }, return, x, ;, }, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[;, }, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {]
[;, }, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {]
[getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (]
[{, return, solverAbsoluteAccuracy, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed, ), ;]
[{, return, solverAbsoluteAccuracy, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed, ), ;]
[}, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed, ), ;, randomData, ., reSeed, (]
[setSeed, (, seed, ), ;, randomData, ., reSeed, (, seed, ), ;, }, public, double, sample, (, ), {, return]
[seed, ), ;, randomData, ., reSeed, (, seed, ), ;, }, public, double, sample, (, ), {, return, inverseCumulativeProbability, (]
[seed, ), ;, randomData, ., reSeed, (, seed, ), ;, }, public, double, sample, (, ), {, return, inverseCumulativeProbability, (]
[random, ., nextDouble, (, ), ), ;, }, public, double, [, ], sample, (, int, sampleSize, ), {, if, (]
[random, ., nextDouble, (, ), ), ;, }, public, double, [, ], sample, (, int, sampleSize, ), {, if, (]
[nextDouble, (, ), ), ;, }, public, double, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=]
[;, }, public, double, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw]
[double, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[double, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[(, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,]
[0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, double, [, ], out, =]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, double, [, ], out, =, new, double, []
[sampleSize, ), ;, }, double, [, ], out, =, new, double, [, sampleSize, ], ;, for, (, int, i, =]
[;, }, double, [, ], out, =, new, double, [, sampleSize, ], ;, for, (, int, i, =, 0, ;]
[;, }, double, [, ], out, =, new, double, [, sampleSize, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], out, =, new, double, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <]
[], out, =, new, double, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;]
[], out, =, new, double, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;]
[double, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {]
[double, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {]
[sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, []
[for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =]
[;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return]
[], =, sample, (, ), ;, }, return, out, ;, }, public, double, probability, (, double, x, ), {, return]
