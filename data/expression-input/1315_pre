[public, class, BlockContainer, extends, AbstractBlock, implements, Block, ,, Cloneable, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[long, serialVersionUID, =, 8199508075695195293L, ;, private, List, blocks, ;, private, Arrangement, arrangement, ;, public, BlockContainer, (, ), {, this, (]
[), {, this, (, new, BorderArrangement, (, ), ), ;, }, public, BlockContainer, (, Arrangement, arrangement, ), {, if, (]
[), {, this, (, new, BorderArrangement, (, ), ), ;, }, public, BlockContainer, (, Arrangement, arrangement, ), {, if, (]
[this, (, new, BorderArrangement, (, ), ), ;, }, public, BlockContainer, (, Arrangement, arrangement, ), {, if, (, arrangement, ==]
[(, ), ), ;, }, public, BlockContainer, (, Arrangement, arrangement, ), {, if, (, arrangement, ==, null, ), {, throw]
[;, }, public, BlockContainer, (, Arrangement, arrangement, ), {, if, (, arrangement, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Arrangement, arrangement, ), {, if, (, arrangement, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }]
[(, Arrangement, arrangement, ), {, if, (, arrangement, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }]
[{, if, (, arrangement, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }, this, ., arrangement, =]
[(, arrangement, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }, this, ., arrangement, =, arrangement, ;]
[(, arrangement, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }, this, ., arrangement, =, arrangement, ;]
[), {, throw, new, IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }, this, ., arrangement, =, arrangement, ;, this, ., blocks, =]
[=, arrangement, ;, this, ., blocks, =, new, ArrayList, (, ), ;, }, public, Arrangement, getArrangement, (, ), {, return]
[=, arrangement, ;, this, ., blocks, =, new, ArrayList, (, ), ;, }, public, Arrangement, getArrangement, (, ), {, return]
[getArrangement, (, ), {, return, this, ., arrangement, ;, }, public, void, setArrangement, (, Arrangement, arrangement, ), {, if, (]
[getArrangement, (, ), {, return, this, ., arrangement, ;, }, public, void, setArrangement, (, Arrangement, arrangement, ), {, if, (]
[), {, return, this, ., arrangement, ;, }, public, void, setArrangement, (, Arrangement, arrangement, ), {, if, (, arrangement, ==]
[., arrangement, ;, }, public, void, setArrangement, (, Arrangement, arrangement, ), {, if, (, arrangement, ==, null, ), {, throw]
[}, public, void, setArrangement, (, Arrangement, arrangement, ), {, if, (, arrangement, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Arrangement, arrangement, ), {, if, (, arrangement, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }]
[(, Arrangement, arrangement, ), {, if, (, arrangement, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }]
[{, if, (, arrangement, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }, this, ., arrangement, =]
[IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }, this, ., arrangement, =, arrangement, ;, }, public, boolean, isEmpty, (, ), {, return]
[IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }, this, ., arrangement, =, arrangement, ;, }, public, boolean, isEmpty, (, ), {, return]
[IllegalArgumentException, (, "Null 'arrangement' argument.", ), ;, }, this, ., arrangement, =, arrangement, ;, }, public, boolean, isEmpty, (, ), {, return]
[(, ), {, return, this, ., blocks, ., isEmpty, (, ), ;, }, public, List, getBlocks, (, ), {, return]
[(, ), {, return, this, ., blocks, ., isEmpty, (, ), ;, }, public, List, getBlocks, (, ), {, return]
[this, ., blocks, ., isEmpty, (, ), ;, }, public, List, getBlocks, (, ), {, return, Collections, ., unmodifiableList, (]
[this, ., blocks, ., isEmpty, (, ), ;, }, public, List, getBlocks, (, ), {, return, Collections, ., unmodifiableList, (]
[{, return, Collections, ., unmodifiableList, (, this, ., blocks, ), ;, }, public, void, add, (, Block, block, ), {]
[Collections, ., unmodifiableList, (, this, ., blocks, ), ;, }, public, void, add, (, Block, block, ), {, add, (]
[unmodifiableList, (, this, ., blocks, ), ;, }, public, void, add, (, Block, block, ), {, add, (, block, ,]
[{, add, (, block, ,, null, ), ;, }, public, void, add, (, Block, block, ,, Object, key, ), {]
[{, add, (, block, ,, null, ), ;, }, public, void, add, (, Block, block, ,, Object, key, ), {]
[{, add, (, block, ,, null, ), ;, }, public, void, add, (, Block, block, ,, Object, key, ), {]
[), ;, }, public, void, add, (, Block, block, ,, Object, key, ), {, this, ., blocks, ., add, (]
[public, void, add, (, Block, block, ,, Object, key, ), {, this, ., blocks, ., add, (, block, ), ;]
[public, void, add, (, Block, block, ,, Object, key, ), {, this, ., blocks, ., add, (, block, ), ;]
[public, void, add, (, Block, block, ,, Object, key, ), {, this, ., blocks, ., add, (, block, ), ;]
[,, Object, key, ), {, this, ., blocks, ., add, (, block, ), ;, this, ., arrangement, ., add, (]
[key, ), {, this, ., blocks, ., add, (, block, ), ;, this, ., arrangement, ., add, (, block, ,]
[), ;, this, ., arrangement, ., add, (, block, ,, key, ), ;, }, public, void, clear, (, ), {]
[), ;, this, ., arrangement, ., add, (, block, ,, key, ), ;, }, public, void, clear, (, ), {]
[), ;, this, ., arrangement, ., add, (, block, ,, key, ), ;, }, public, void, clear, (, ), {]
[block, ,, key, ), ;, }, public, void, clear, (, ), {, this, ., blocks, ., clear, (, ), ;]
[block, ,, key, ), ;, }, public, void, clear, (, ), {, this, ., blocks, ., clear, (, ), ;]
[block, ,, key, ), ;, }, public, void, clear, (, ), {, this, ., blocks, ., clear, (, ), ;]
[., arrangement, ., clear, (, ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return]
[., arrangement, ., clear, (, ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return]
[., arrangement, ., clear, (, ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return]
[;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, this, ., arrangement, ., arrange, (]
[public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, this, ., arrangement, ., arrange, (, this, ,]
[arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, this, ., arrangement, ., arrange, (, this, ,, g2, ,]
[(, this, ,, g2, ,, constraint, ), ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {]
[,, g2, ,, constraint, ), ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, draw, (]
[,, constraint, ), ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, draw, (, g2, ,]
[), ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, draw, (, g2, ,, area, ,]
[), ;, }, public, Object, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, EntityBlockParams, ebp, =]
[draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, EntityBlockParams, ebp, =, null, ;, StandardEntityCollection, sec, =]
[,, Rectangle2D, area, ,, Object, params, ), {, EntityBlockParams, ebp, =, null, ;, StandardEntityCollection, sec, =, null, ;, if, (]
[,, Rectangle2D, area, ,, Object, params, ), {, EntityBlockParams, ebp, =, null, ;, StandardEntityCollection, sec, =, null, ;, if, (]
[params, ), {, EntityBlockParams, ebp, =, null, ;, StandardEntityCollection, sec, =, null, ;, if, (, params, instanceof, EntityBlockParams, ), {]
[{, EntityBlockParams, ebp, =, null, ;, StandardEntityCollection, sec, =, null, ;, if, (, params, instanceof, EntityBlockParams, ), {, ebp, =]
[=, null, ;, StandardEntityCollection, sec, =, null, ;, if, (, params, instanceof, EntityBlockParams, ), {, ebp, =, (, EntityBlockParams, )]
[sec, =, null, ;, if, (, params, instanceof, EntityBlockParams, ), {, ebp, =, (, EntityBlockParams, ), params, ;, if, (]
[sec, =, null, ;, if, (, params, instanceof, EntityBlockParams, ), {, ebp, =, (, EntityBlockParams, ), params, ;, if, (]
[instanceof, EntityBlockParams, ), {, ebp, =, (, EntityBlockParams, ), params, ;, if, (, ebp, ., getGenerateEntities, (, ), ), {]
[), {, ebp, =, (, EntityBlockParams, ), params, ;, if, (, ebp, ., getGenerateEntities, (, ), ), {, sec, =]
[(, ebp, ., getGenerateEntities, (, ), ), {, sec, =, new, StandardEntityCollection, (, ), ;, }, }, Rectangle2D, contentArea, =]
[getGenerateEntities, (, ), ), {, sec, =, new, StandardEntityCollection, (, ), ;, }, }, Rectangle2D, contentArea, =, (, Rectangle2D, )]
[getGenerateEntities, (, ), ), {, sec, =, new, StandardEntityCollection, (, ), ;, }, }, Rectangle2D, contentArea, =, (, Rectangle2D, )]
[=, new, StandardEntityCollection, (, ), ;, }, }, Rectangle2D, contentArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;]
[StandardEntityCollection, (, ), ;, }, }, Rectangle2D, contentArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, contentArea, =]
[), ;, }, }, Rectangle2D, contentArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, contentArea, =, trimMargin, (]
[}, Rectangle2D, contentArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, contentArea, =, trimMargin, (, contentArea, ), ;]
[contentArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, contentArea, =, trimMargin, (, contentArea, ), ;, drawBorder, (]
[(, Rectangle2D, ), area, ., clone, (, ), ;, contentArea, =, trimMargin, (, contentArea, ), ;, drawBorder, (, g2, ,]
[area, ., clone, (, ), ;, contentArea, =, trimMargin, (, contentArea, ), ;, drawBorder, (, g2, ,, contentArea, ), ;]
[clone, (, ), ;, contentArea, =, trimMargin, (, contentArea, ), ;, drawBorder, (, g2, ,, contentArea, ), ;, contentArea, =]
[), ;, contentArea, =, trimMargin, (, contentArea, ), ;, drawBorder, (, g2, ,, contentArea, ), ;, contentArea, =, trimBorder, (]
[=, trimMargin, (, contentArea, ), ;, drawBorder, (, g2, ,, contentArea, ), ;, contentArea, =, trimBorder, (, contentArea, ), ;]
[(, contentArea, ), ;, drawBorder, (, g2, ,, contentArea, ), ;, contentArea, =, trimBorder, (, contentArea, ), ;, contentArea, =]
[), ;, drawBorder, (, g2, ,, contentArea, ), ;, contentArea, =, trimBorder, (, contentArea, ), ;, contentArea, =, trimPadding, (]
[contentArea, ), ;, contentArea, =, trimBorder, (, contentArea, ), ;, contentArea, =, trimPadding, (, contentArea, ), ;, Iterator, iterator, =]
[contentArea, ), ;, contentArea, =, trimBorder, (, contentArea, ), ;, contentArea, =, trimPadding, (, contentArea, ), ;, Iterator, iterator, =]
[contentArea, ), ;, contentArea, =, trimBorder, (, contentArea, ), ;, contentArea, =, trimPadding, (, contentArea, ), ;, Iterator, iterator, =]
[contentArea, =, trimPadding, (, contentArea, ), ;, Iterator, iterator, =, this, ., blocks, ., iterator, (, ), ;, while, (]
[contentArea, =, trimPadding, (, contentArea, ), ;, Iterator, iterator, =, this, ., blocks, ., iterator, (, ), ;, while, (]
[this, ., blocks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Block, block, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Block, block, =, (, Block, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Block, block, =, (, Block, )]
[hasNext, (, ), ), {, Block, block, =, (, Block, ), iterator, ., next, (, ), ;, Rectangle2D, bounds, =]
[hasNext, (, ), ), {, Block, block, =, (, Block, ), iterator, ., next, (, ), ;, Rectangle2D, bounds, =]
[Block, ), iterator, ., next, (, ), ;, Rectangle2D, bounds, =, block, ., getBounds, (, ), ;, Rectangle2D, drawArea, =]
[(, ), ;, Rectangle2D, bounds, =, block, ., getBounds, (, ), ;, Rectangle2D, drawArea, =, new, Rectangle2D, ., Double, (]
[(, ), ;, Rectangle2D, bounds, =, block, ., getBounds, (, ), ;, Rectangle2D, drawArea, =, new, Rectangle2D, ., Double, (]
[(, ), ;, Rectangle2D, bounds, =, block, ., getBounds, (, ), ;, Rectangle2D, drawArea, =, new, Rectangle2D, ., Double, (]
[block, ., getBounds, (, ), ;, Rectangle2D, drawArea, =, new, Rectangle2D, ., Double, (, bounds, ., getX, (, ), +]
[block, ., getBounds, (, ), ;, Rectangle2D, drawArea, =, new, Rectangle2D, ., Double, (, bounds, ., getX, (, ), +]
[Rectangle2D, drawArea, =, new, Rectangle2D, ., Double, (, bounds, ., getX, (, ), +, area, ., getX, (, ), ,]
[Rectangle2D, drawArea, =, new, Rectangle2D, ., Double, (, bounds, ., getX, (, ), +, area, ., getX, (, ), ,]
[Rectangle2D, drawArea, =, new, Rectangle2D, ., Double, (, bounds, ., getX, (, ), +, area, ., getX, (, ), ,]
[Double, (, bounds, ., getX, (, ), +, area, ., getX, (, ), ,, bounds, ., getY, (, ), +]
[Double, (, bounds, ., getX, (, ), +, area, ., getX, (, ), ,, bounds, ., getY, (, ), +]
[), +, area, ., getX, (, ), ,, bounds, ., getY, (, ), +, area, ., getY, (, ), ,]
[), +, area, ., getX, (, ), ,, bounds, ., getY, (, ), +, area, ., getY, (, ), ,]
[), ,, bounds, ., getY, (, ), +, area, ., getY, (, ), ,, bounds, ., getWidth, (, ), ,]
[), ,, bounds, ., getY, (, ), +, area, ., getY, (, ), ,, bounds, ., getWidth, (, ), ,]
[getY, (, ), ,, bounds, ., getWidth, (, ), ,, bounds, ., getHeight, (, ), ), ;, Object, r, =]
[getY, (, ), ,, bounds, ., getWidth, (, ), ,, bounds, ., getHeight, (, ), ), ;, Object, r, =]
[bounds, ., getWidth, (, ), ,, bounds, ., getHeight, (, ), ), ;, Object, r, =, block, ., draw, (]
[getWidth, (, ), ,, bounds, ., getHeight, (, ), ), ;, Object, r, =, block, ., draw, (, g2, ,]
[), ,, bounds, ., getHeight, (, ), ), ;, Object, r, =, block, ., draw, (, g2, ,, drawArea, ,]
[(, ), ), ;, Object, r, =, block, ., draw, (, g2, ,, drawArea, ,, params, ), ;, if, (]
[(, ), ), ;, Object, r, =, block, ., draw, (, g2, ,, drawArea, ,, params, ), ;, if, (]
[), ;, Object, r, =, block, ., draw, (, g2, ,, drawArea, ,, params, ), ;, if, (, sec, !=]
[block, ., draw, (, g2, ,, drawArea, ,, params, ), ;, if, (, sec, !=, null, ), {, if, (]
[block, ., draw, (, g2, ,, drawArea, ,, params, ), ;, if, (, sec, !=, null, ), {, if, (]
[params, ), ;, if, (, sec, !=, null, ), {, if, (, r, instanceof, EntityBlockResult, ), {, EntityBlockResult, ebr, =]
[if, (, sec, !=, null, ), {, if, (, r, instanceof, EntityBlockResult, ), {, EntityBlockResult, ebr, =, (, EntityBlockResult, )]
[), {, if, (, r, instanceof, EntityBlockResult, ), {, EntityBlockResult, ebr, =, (, EntityBlockResult, ), r, ;, EntityCollection, ec, =]
[), {, if, (, r, instanceof, EntityBlockResult, ), {, EntityBlockResult, ebr, =, (, EntityBlockResult, ), r, ;, EntityCollection, ec, =]
[EntityBlockResult, ), {, EntityBlockResult, ebr, =, (, EntityBlockResult, ), r, ;, EntityCollection, ec, =, ebr, ., getEntityCollection, (, ), ;]
[EntityBlockResult, ), {, EntityBlockResult, ebr, =, (, EntityBlockResult, ), r, ;, EntityCollection, ec, =, ebr, ., getEntityCollection, (, ), ;]
[ebr, =, (, EntityBlockResult, ), r, ;, EntityCollection, ec, =, ebr, ., getEntityCollection, (, ), ;, sec, ., addAll, (]
[=, ebr, ., getEntityCollection, (, ), ;, sec, ., addAll, (, ec, ), ;, }, }, }, BlockResult, result, =]
[(, ), ;, sec, ., addAll, (, ec, ), ;, }, }, }, BlockResult, result, =, null, ;, if, (]
[(, ), ;, sec, ., addAll, (, ec, ), ;, }, }, }, BlockResult, result, =, null, ;, if, (]
[;, sec, ., addAll, (, ec, ), ;, }, }, }, BlockResult, result, =, null, ;, if, (, sec, !=]
[addAll, (, ec, ), ;, }, }, }, BlockResult, result, =, null, ;, if, (, sec, !=, null, ), {]
[ec, ), ;, }, }, }, BlockResult, result, =, null, ;, if, (, sec, !=, null, ), {, result, =]
[}, BlockResult, result, =, null, ;, if, (, sec, !=, null, ), {, result, =, new, BlockResult, (, ), ;]
[}, BlockResult, result, =, null, ;, if, (, sec, !=, null, ), {, result, =, new, BlockResult, (, ), ;]
[null, ;, if, (, sec, !=, null, ), {, result, =, new, BlockResult, (, ), ;, result, ., setEntityCollection, (]
[!=, null, ), {, result, =, new, BlockResult, (, ), ;, result, ., setEntityCollection, (, sec, ), ;, }, return]
[setEntityCollection, (, sec, ), ;, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[setEntityCollection, (, sec, ), ;, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[sec, ), ;, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, BlockContainer, ), ), {, return]
[return, true, ;, }, if, (, !, (, obj, instanceof, BlockContainer, ), ), {, return, false, ;, }, if, (]
[true, ;, }, if, (, !, (, obj, instanceof, BlockContainer, ), ), {, return, false, ;, }, if, (, !]
[true, ;, }, if, (, !, (, obj, instanceof, BlockContainer, ), ), {, return, false, ;, }, if, (, !]
[(, !, (, obj, instanceof, BlockContainer, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (]
[BlockContainer, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, BlockContainer, that, =]
[(, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, BlockContainer, that, =, (, BlockContainer, )]
[equals, (, obj, ), ), {, return, false, ;, }, BlockContainer, that, =, (, BlockContainer, ), obj, ;, if, (]
[(, obj, ), ), {, return, false, ;, }, BlockContainer, that, =, (, BlockContainer, ), obj, ;, if, (, !]
[(, obj, ), ), {, return, false, ;, }, BlockContainer, that, =, (, BlockContainer, ), obj, ;, if, (, !]
[(, obj, ), ), {, return, false, ;, }, BlockContainer, that, =, (, BlockContainer, ), obj, ;, if, (, !]
[false, ;, }, BlockContainer, that, =, (, BlockContainer, ), obj, ;, if, (, !, this, ., arrangement, ., equals, (]
[false, ;, }, BlockContainer, that, =, (, BlockContainer, ), obj, ;, if, (, !, this, ., arrangement, ., equals, (]
[BlockContainer, ), obj, ;, if, (, !, this, ., arrangement, ., equals, (, that, ., arrangement, ), ), {, return]
[(, !, this, ., arrangement, ., equals, (, that, ., arrangement, ), ), {, return, false, ;, }, if, (]
[!, this, ., arrangement, ., equals, (, that, ., arrangement, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., arrangement, ., equals, (, that, ., arrangement, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., arrangement, ., equals, (, that, ., arrangement, ), ), {, return, false, ;, }, if, (, !]
[(, that, ., arrangement, ), ), {, return, false, ;, }, if, (, !, this, ., blocks, ., equals, (]
[(, that, ., arrangement, ), ), {, return, false, ;, }, if, (, !, this, ., blocks, ., equals, (]
[return, false, ;, }, if, (, !, this, ., blocks, ., equals, (, that, ., blocks, ), ), {, return]
[if, (, !, this, ., blocks, ., equals, (, that, ., blocks, ), ), {, return, false, ;, }, return]
[{, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, BlockContainer, clone, =]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, BlockContainer, clone, =, (, BlockContainer, )]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, BlockContainer, clone, =, (, BlockContainer, )]
[Object, clone, (, ), throws, CloneNotSupportedException, {, BlockContainer, clone, =, (, BlockContainer, ), super, ., clone, (, ), ;, return]
