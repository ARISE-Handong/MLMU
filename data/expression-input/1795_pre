[extends, AbstractPostOrderCallback, implements, CompilerPass, ,, ScopedCallback, {, private, final, AbstractCompiler, compiler, ;, private, final, Set, <, Var, >, inlinedNewDependencies, =]
[extends, AbstractPostOrderCallback, implements, CompilerPass, ,, ScopedCallback, {, private, final, AbstractCompiler, compiler, ;, private, final, Set, <, Var, >, inlinedNewDependencies, =]
[>, candidates, ;, private, MustBeReachingVariableDef, reachingDef, ;, private, MaybeReachingVariableUse, reachingUses, ;, private, static, final, Predicate, <, Node, >, SIDE_EFFECT_PREDICATE, =]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, if, (]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, if, (]
[<, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ==]
[), {, @, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ==, null, ), {, return]
[boolean, apply, (, Node, n, ), {, if, (, n, ==, null, ), {, return, false, ;, }, if, (]
[boolean, apply, (, Node, n, ), {, if, (, n, ==, null, ), {, return, false, ;, }, if, (]
[boolean, apply, (, Node, n, ), {, if, (, n, ==, null, ), {, return, false, ;, }, if, (]
[{, if, (, n, ==, null, ), {, return, false, ;, }, if, (, n, ., isCall, (, ), &&]
[{, if, (, n, ==, null, ), {, return, false, ;, }, if, (, n, ., isCall, (, ), &&]
[==, null, ), {, return, false, ;, }, if, (, n, ., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (]
[false, ;, }, if, (, n, ., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (, n, ), ), {, return]
[n, ., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (]
[n, ., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (]
[n, ., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (]
[NodeUtil, ., functionCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (, n, ., isNew, (, ), &&]
[NodeUtil, ., functionCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (, n, ., isNew, (, ), &&]
[n, ), ), {, return, true, ;, }, if, (, n, ., isNew, (, ), &&, NodeUtil, ., constructorCallHasSideEffects, (]
[true, ;, }, if, (, n, ., isNew, (, ), &&, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ), {, return]
[n, ., isNew, (, ), &&, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (]
[n, ., isNew, (, ), &&, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (]
[constructorCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (, n, ., isDelProp, (, ), ), {, return]
[;, }, if, (, n, ., isDelProp, (, ), ), {, return, true, ;, }, for, (, Node, c, =]
[;, }, if, (, n, ., isDelProp, (, ), ), {, return, true, ;, }, for, (, Node, c, =]
[isDelProp, (, ), ), {, return, true, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[isDelProp, (, ), ), {, return, true, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[), ), {, return, true, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[{, return, true, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[true, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[true, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, !]
[getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, !]
[c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (]
[;, c, =, c, ., getNext, (, ), ), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&]
[=, c, ., getNext, (, ), ), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&, apply, (]
[), ), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&, apply, (, c, ), ), {, return]
[!, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&, apply, (, c, ), ), {, return, true, ;, }, }, return]
[), {, return, true, ;, }, }, return, false, ;, }, }, ;, public, FlowSensitiveInlineVariables, (, AbstractCompiler, compiler, ), {]
[), {, return, true, ;, }, }, return, false, ;, }, }, ;, public, FlowSensitiveInlineVariables, (, AbstractCompiler, compiler, ), {]
[;, }, }, return, false, ;, }, }, ;, public, FlowSensitiveInlineVariables, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[{, this, ., compiler, =, compiler, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[{, this, ., compiler, =, compiler, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (]
[enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (]
[enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (]
[), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (, LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <]
[), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (, LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <]
[), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (, LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <]
[., MAX_VARIABLES_TO_ANALYZE, <, t, ., getScope, (, ), ., getVarCount, (, ), ), {, return, ;, }, ControlFlowAnalysis, cfa, =]
[t, ., getScope, (, ), ., getVarCount, (, ), ), {, return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (]
[getScope, (, ), ., getVarCount, (, ), ), {, return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,]
[), ., getVarCount, (, ), ), {, return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,]
[(, ), ), {, return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;]
[(, ), ), {, return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;]
[return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, Preconditions, ., checkState, (]
[return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, Preconditions, ., checkState, (]
[return, ;, }, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, Preconditions, ., checkState, (]
[false, ,, true, ), ;, Preconditions, ., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), ), ;]
[false, ,, true, ), ;, Preconditions, ., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), ), ;]
[;, Preconditions, ., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), ), ;, cfa, ., process, (]
[., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), ), ;, cfa, ., process, (, null, ,]
[., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), ), ;, cfa, ., process, (, null, ,]
[., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), ), ;, cfa, ., process, (, null, ,]
[), ), ;, cfa, ., process, (, null, ,, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;]
[;, cfa, ., process, (, null, ,, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, cfg, =]
[;, cfa, ., process, (, null, ,, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, cfg, =]
[,, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, cfg, =, cfa, ., getCfg, (, ), ;]
[., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, cfg, =, cfa, ., getCfg, (, ), ;, reachingDef, =]
[), ., getLastChild, (, ), ), ;, cfg, =, cfa, ., getCfg, (, ), ;, reachingDef, =, new, MustBeReachingVariableDef, (]
[getLastChild, (, ), ), ;, cfg, =, cfa, ., getCfg, (, ), ;, reachingDef, =, new, MustBeReachingVariableDef, (, cfg, ,]
[getLastChild, (, ), ), ;, cfg, =, cfa, ., getCfg, (, ), ;, reachingDef, =, new, MustBeReachingVariableDef, (, cfg, ,]
[=, cfa, ., getCfg, (, ), ;, reachingDef, =, new, MustBeReachingVariableDef, (, cfg, ,, t, ., getScope, (, ), ,]
[getCfg, (, ), ;, reachingDef, =, new, MustBeReachingVariableDef, (, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;]
[getCfg, (, ), ;, reachingDef, =, new, MustBeReachingVariableDef, (, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;]
[new, MustBeReachingVariableDef, (, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;, reachingDef, ., analyze, (, ), ;]
[(, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;, reachingDef, ., analyze, (, ), ;, candidates, =]
[(, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;, reachingDef, ., analyze, (, ), ;, candidates, =]
[(, ), ,, compiler, ), ;, reachingDef, ., analyze, (, ), ;, candidates, =, Lists, ., newLinkedList, (, ), ;]
[(, ), ,, compiler, ), ;, reachingDef, ., analyze, (, ), ;, candidates, =, Lists, ., newLinkedList, (, ), ;]
[compiler, ), ;, reachingDef, ., analyze, (, ), ;, candidates, =, Lists, ., newLinkedList, (, ), ;, new, NodeTraversal, (]
[;, reachingDef, ., analyze, (, ), ;, candidates, =, Lists, ., newLinkedList, (, ), ;, new, NodeTraversal, (, compiler, ,]
[=, Lists, ., newLinkedList, (, ), ;, new, NodeTraversal, (, compiler, ,, new, GatherCandiates, (, ), ), ., traverse, (]
[=, Lists, ., newLinkedList, (, ), ;, new, NodeTraversal, (, compiler, ,, new, GatherCandiates, (, ), ), ., traverse, (]
[=, Lists, ., newLinkedList, (, ), ;, new, NodeTraversal, (, compiler, ,, new, GatherCandiates, (, ), ), ., traverse, (]
[,, new, GatherCandiates, (, ), ), ., traverse, (, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;]
[GatherCandiates, (, ), ), ., traverse, (, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, reachingUses, =]
[), ., traverse, (, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, reachingUses, =, new, MaybeReachingVariableUse, (]
[traverse, (, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, reachingUses, =, new, MaybeReachingVariableUse, (, cfg, ,]
[traverse, (, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ), ;, reachingUses, =, new, MaybeReachingVariableUse, (, cfg, ,]
[), ., getLastChild, (, ), ), ;, reachingUses, =, new, MaybeReachingVariableUse, (, cfg, ,, t, ., getScope, (, ), ,]
[(, ), ), ;, reachingUses, =, new, MaybeReachingVariableUse, (, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;]
[(, ), ), ;, reachingUses, =, new, MaybeReachingVariableUse, (, cfg, ,, t, ., getScope, (, ), ,, compiler, ), ;]
[t, ., getScope, (, ), ,, compiler, ), ;, reachingUses, ., analyze, (, ), ;, for, (, Candidate, c, :]
[,, compiler, ), ;, reachingUses, ., analyze, (, ), ;, for, (, Candidate, c, :, candidates, ), {, if, (]
[,, compiler, ), ;, reachingUses, ., analyze, (, ), ;, for, (, Candidate, c, :, candidates, ), {, if, (]
[reachingUses, ., analyze, (, ), ;, for, (, Candidate, c, :, candidates, ), {, if, (, c, ., canInline, (]
[reachingUses, ., analyze, (, ), ;, for, (, Candidate, c, :, candidates, ), {, if, (, c, ., canInline, (]
[Candidate, c, :, candidates, ), {, if, (, c, ., canInline, (, t, ., getScope, (, ), ), ), {]
[Candidate, c, :, candidates, ), {, if, (, c, ., canInline, (, t, ., getScope, (, ), ), ), {]
[c, ., canInline, (, t, ., getScope, (, ), ), ), {, c, ., inlineVariable, (, ), ;, if, (]
[., canInline, (, t, ., getScope, (, ), ), ), {, c, ., inlineVariable, (, ), ;, if, (, !]
[., canInline, (, t, ., getScope, (, ), ), ), {, c, ., inlineVariable, (, ), ;, if, (, !]
[., canInline, (, t, ., getScope, (, ), ), ), {, c, ., inlineVariable, (, ), ;, if, (, !]
[., canInline, (, t, ., getScope, (, ), ), ), {, c, ., inlineVariable, (, ), ;, if, (, !]
[c, ., inlineVariable, (, ), ;, if, (, !, c, ., defMetadata, ., depends, ., isEmpty, (, ), ), {]
[c, ., inlineVariable, (, ), ;, if, (, !, c, ., defMetadata, ., depends, ., isEmpty, (, ), ), {]
[), ;, if, (, !, c, ., defMetadata, ., depends, ., isEmpty, (, ), ), {, inlinedNewDependencies, ., add, (]
[), ;, if, (, !, c, ., defMetadata, ., depends, ., isEmpty, (, ), ), {, inlinedNewDependencies, ., add, (]
[), ;, if, (, !, c, ., defMetadata, ., depends, ., isEmpty, (, ), ), {, inlinedNewDependencies, ., add, (]
[., depends, ., isEmpty, (, ), ), {, inlinedNewDependencies, ., add, (, t, ., getScope, (, ), ., getVar, (]
[., depends, ., isEmpty, (, ), ), {, inlinedNewDependencies, ., add, (, t, ., getScope, (, ), ., getVar, (]
[exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[(, NodeTraversal, t, ), {, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, (]
[), {, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, (, new, NodeTraversal, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, (, new, NodeTraversal, (, compiler, ,]
[(, Node, externs, ,, Node, root, ), {, (, new, NodeTraversal, (, compiler, ,, this, ), ), ., traverseRoots, (]
[externs, ,, Node, root, ), {, (, new, NodeTraversal, (, compiler, ,, this, ), ), ., traverseRoots, (, externs, ,]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, DiGraphNode, <, Node, ,, Branch, >, graphNode, =]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, DiGraphNode, <, Node, ,, Branch, >, graphNode, =]
[,, Node, n, ,, Node, parent, ), {, DiGraphNode, <, Node, ,, Branch, >, graphNode, =, cfg, ., getDirectedGraphNode, (]
[parent, ), {, DiGraphNode, <, Node, ,, Branch, >, graphNode, =, cfg, ., getDirectedGraphNode, (, n, ), ;, if, (]
[parent, ), {, DiGraphNode, <, Node, ,, Branch, >, graphNode, =, cfg, ., getDirectedGraphNode, (, n, ), ;, if, (]
[{, DiGraphNode, <, Node, ,, Branch, >, graphNode, =, cfg, ., getDirectedGraphNode, (, n, ), ;, if, (, graphNode, ==]
[(, n, ), ;, if, (, graphNode, ==, null, ), {, return, ;, }, FlowState, <, MustDef, >, state, =]
[(, n, ), ;, if, (, graphNode, ==, null, ), {, return, ;, }, FlowState, <, MustDef, >, state, =]
[{, return, ;, }, FlowState, <, MustDef, >, state, =, graphNode, ., getAnnotation, (, ), ;, final, MustDef, defs, =]
[{, return, ;, }, FlowState, <, MustDef, >, state, =, graphNode, ., getAnnotation, (, ), ;, final, MustDef, defs, =]
[graphNode, ., getAnnotation, (, ), ;, final, MustDef, defs, =, state, ., getIn, (, ), ;, final, Node, cfgNode, =]
[;, final, MustDef, defs, =, state, ., getIn, (, ), ;, final, Node, cfgNode, =, n, ;, AbstractCfgNodeTraversalCallback, gatherCb, =]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, if, (]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, if, (, parent, ==]
[(, n, ., isName, (, ), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (]
[(, n, ., isName, (, ), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (]
[(, n, ., isName, (, ), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (]
[(, n, ., isName, (, ), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (]
[(, n, ., isName, (, ), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (]
[(, n, ., isName, (, ), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (]
[n, ., isName, (, ), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (, (]
[n, ., isName, (, ), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (, (]
[n, ., isName, (, ), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (, (]
[), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (, (, NodeUtil, ., isAssignmentOp, (]
[if, (, parent, ==, null, ), {, return, ;, }, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[if, (, parent, ==, null, ), {, return, ;, }, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[if, (, parent, ==, null, ), {, return, ;, }, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[{, return, ;, }, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==]
[}, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||]
[}, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||]
[isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||]
[isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||]
[., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||]
[., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||]
[), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||]
[), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||]
[), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, parent, ., isParamList, (, ), ||]
[), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, parent, ., isParamList, (, ), ||]
[||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), {, return, ;, }, String, name, =]
[||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), {, return, ;, }, String, name, =]
[., isCatch, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[., isCatch, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[., isCatch, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[}, String, name, =, n, ., getString, (, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ), {, return, ;, }, Definition, def, =]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ), {, return, ;, }, Definition, def, =]
[getCodingConvention, (, ), ., isExported, (, name, ), ), {, return, ;, }, Definition, def, =, reachingDef, ., getDef, (]
[), ., isExported, (, name, ), ), {, return, ;, }, Definition, def, =, reachingDef, ., getDef, (, name, ,]
[), ), {, return, ;, }, Definition, def, =, reachingDef, ., getDef, (, name, ,, cfgNode, ), ;, if, (]
[), ), {, return, ;, }, Definition, def, =, reachingDef, ., getDef, (, name, ,, cfgNode, ), ;, if, (]
[), ), {, return, ;, }, Definition, def, =, reachingDef, ., getDef, (, name, ,, cfgNode, ), ;, if, (]
[{, return, ;, }, Definition, def, =, reachingDef, ., getDef, (, name, ,, cfgNode, ), ;, if, (, def, !=]
[;, }, Definition, def, =, reachingDef, ., getDef, (, name, ,, cfgNode, ), ;, if, (, def, !=, null, &&]
[}, Definition, def, =, reachingDef, ., getDef, (, name, ,, cfgNode, ), ;, if, (, def, !=, null, &&, !]
[}, Definition, def, =, reachingDef, ., getDef, (, name, ,, cfgNode, ), ;, if, (, def, !=, null, &&, !]
[reachingDef, ., getDef, (, name, ,, cfgNode, ), ;, if, (, def, !=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (]
[name, ,, cfgNode, ), ;, if, (, def, !=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {]
[name, ,, cfgNode, ), ;, if, (, def, !=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {]
[;, if, (, def, !=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add, (]
[def, !=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add, (, new, Candidate, (]
[null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add, (, new, Candidate, (, name, ,]
[!, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add, (, new, Candidate, (, name, ,, def, ,]
[., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add, (, new, Candidate, (, name, ,, def, ,, n, ,]
[add, (, new, Candidate, (, name, ,, def, ,, n, ,, cfgNode, ), ), ;, }, }, }, }, ;]
[add, (, new, Candidate, (, name, ,, def, ,, n, ,, cfgNode, ), ), ;, }, }, }, }, ;]
[(, name, ,, def, ,, n, ,, cfgNode, ), ), ;, }, }, }, }, ;, NodeTraversal, ., traverse, (]
[,, def, ,, n, ,, cfgNode, ), ), ;, }, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, n, ,, cfgNode, ), ), ;, }, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ,]
[;, private, int, numUseWithinUseCfgNode, ;, Candidate, (, String, varName, ,, Definition, defMetadata, ,, Node, use, ,, Node, useCfgNode, ), {]
[;, private, int, numUseWithinUseCfgNode, ;, Candidate, (, String, varName, ,, Definition, defMetadata, ,, Node, use, ,, Node, useCfgNode, ), {]
[;, Candidate, (, String, varName, ,, Definition, defMetadata, ,, Node, use, ,, Node, useCfgNode, ), {, Preconditions, ., checkArgument, (]
[;, Candidate, (, String, varName, ,, Definition, defMetadata, ,, Node, use, ,, Node, useCfgNode, ), {, Preconditions, ., checkArgument, (]
[defMetadata, ,, Node, use, ,, Node, useCfgNode, ), {, Preconditions, ., checkArgument, (, use, ., isName, (, ), ), ;]
[defMetadata, ,, Node, use, ,, Node, useCfgNode, ), {, Preconditions, ., checkArgument, (, use, ., isName, (, ), ), ;]
[,, Node, useCfgNode, ), {, Preconditions, ., checkArgument, (, use, ., isName, (, ), ), ;, this, ., varName, =]
[useCfgNode, ), {, Preconditions, ., checkArgument, (, use, ., isName, (, ), ), ;, this, ., varName, =, varName, ;]
[useCfgNode, ), {, Preconditions, ., checkArgument, (, use, ., isName, (, ), ), ;, this, ., varName, =, varName, ;]
[., checkArgument, (, use, ., isName, (, ), ), ;, this, ., varName, =, varName, ;, this, ., defMetadata, =]
[(, use, ., isName, (, ), ), ;, this, ., varName, =, varName, ;, this, ., defMetadata, =, defMetadata, ;]
[(, use, ., isName, (, ), ), ;, this, ., varName, =, varName, ;, this, ., defMetadata, =, defMetadata, ;]
[(, ), ), ;, this, ., varName, =, varName, ;, this, ., defMetadata, =, defMetadata, ;, this, ., use, =]
[), ;, this, ., varName, =, varName, ;, this, ., defMetadata, =, defMetadata, ;, this, ., use, =, use, ;]
[), ;, this, ., varName, =, varName, ;, this, ., defMetadata, =, defMetadata, ;, this, ., use, =, use, ;]
[varName, =, varName, ;, this, ., defMetadata, =, defMetadata, ;, this, ., use, =, use, ;, this, ., useCfgNode, =]
[this, ., use, =, use, ;, this, ., useCfgNode, =, useCfgNode, ;, }, private, Node, getDefCfgNode, (, ), {, return]
[this, ., use, =, use, ;, this, ., useCfgNode, =, useCfgNode, ;, }, private, Node, getDefCfgNode, (, ), {, return]
[(, ), {, return, defMetadata, ., node, ;, }, private, boolean, canInline, (, final, Scope, scope, ), {, if, (]
[(, ), {, return, defMetadata, ., node, ;, }, private, boolean, canInline, (, final, Scope, scope, ), {, if, (]
[boolean, canInline, (, final, Scope, scope, ), {, if, (, getDefCfgNode, (, ), ., isFunction, (, ), ), {, return]
[if, (, getDefCfgNode, (, ), ., isFunction, (, ), ), {, return, false, ;, }, for, (, Var, dependency, :]
[if, (, getDefCfgNode, (, ), ., isFunction, (, ), ), {, return, false, ;, }, for, (, Var, dependency, :]
[(, ), ), {, return, false, ;, }, for, (, Var, dependency, :, defMetadata, ., depends, ), {, if, (]
[(, ), ), {, return, false, ;, }, for, (, Var, dependency, :, defMetadata, ., depends, ), {, if, (]
[return, false, ;, }, for, (, Var, dependency, :, defMetadata, ., depends, ), {, if, (, inlinedNewDependencies, ., contains, (]
[(, Var, dependency, :, defMetadata, ., depends, ), {, if, (, inlinedNewDependencies, ., contains, (, dependency, ), ), {, return]
[defMetadata, ., depends, ), {, if, (, inlinedNewDependencies, ., contains, (, dependency, ), ), {, return, false, ;, }, }]
[depends, ), {, if, (, inlinedNewDependencies, ., contains, (, dependency, ), ), {, return, false, ;, }, }, getDefinition, (]
[(, inlinedNewDependencies, ., contains, (, dependency, ), ), {, return, false, ;, }, }, getDefinition, (, getDefCfgNode, (, ), ,]
[contains, (, dependency, ), ), {, return, false, ;, }, }, getDefinition, (, getDefCfgNode, (, ), ,, null, ), ;]
[dependency, ), ), {, return, false, ;, }, }, getDefinition, (, getDefCfgNode, (, ), ,, null, ), ;, getNumUseInUseCfgNode, (]
[), {, return, false, ;, }, }, getDefinition, (, getDefCfgNode, (, ), ,, null, ), ;, getNumUseInUseCfgNode, (, useCfgNode, ,]
[}, }, getDefinition, (, getDefCfgNode, (, ), ,, null, ), ;, getNumUseInUseCfgNode, (, useCfgNode, ,, null, ), ;, if, (]
[}, }, getDefinition, (, getDefCfgNode, (, ), ,, null, ), ;, getNumUseInUseCfgNode, (, useCfgNode, ,, null, ), ;, if, (]
[getDefinition, (, getDefCfgNode, (, ), ,, null, ), ;, getNumUseInUseCfgNode, (, useCfgNode, ,, null, ), ;, if, (, def, ==]
[), ,, null, ), ;, getNumUseInUseCfgNode, (, useCfgNode, ,, null, ), ;, if, (, def, ==, null, ), {, return]
[getNumUseInUseCfgNode, (, useCfgNode, ,, null, ), ;, if, (, def, ==, null, ), {, return, false, ;, }, if, (]
[getNumUseInUseCfgNode, (, useCfgNode, ,, null, ), ;, if, (, def, ==, null, ), {, return, false, ;, }, if, (]
[getNumUseInUseCfgNode, (, useCfgNode, ,, null, ), ;, if, (, def, ==, null, ), {, return, false, ;, }, if, (]
[;, if, (, def, ==, null, ), {, return, false, ;, }, if, (, def, ., isAssign, (, ), &&]
[if, (, def, ==, null, ), {, return, false, ;, }, if, (, def, ., isAssign, (, ), &&, !]
[if, (, def, ==, null, ), {, return, false, ;, }, if, (, def, ., isAssign, (, ), &&, !]
[null, ), {, return, false, ;, }, if, (, def, ., isAssign, (, ), &&, !, NodeUtil, ., isExprAssign, (]
[null, ), {, return, false, ;, }, if, (, def, ., isAssign, (, ), &&, !, NodeUtil, ., isExprAssign, (]
[def, ., isAssign, (, ), &&, !, NodeUtil, ., isExprAssign, (, def, ., getParent, (, ), ), ), {, return]
[&&, !, NodeUtil, ., isExprAssign, (, def, ., getParent, (, ), ), ), {, return, false, ;, }, if, (]
[NodeUtil, ., isExprAssign, (, def, ., getParent, (, ), ), ), {, return, false, ;, }, if, (, checkRightOf, (]
[isExprAssign, (, def, ., getParent, (, ), ), ), {, return, false, ;, }, if, (, checkRightOf, (, def, ,]
[getParent, (, ), ), ), {, return, false, ;, }, if, (, checkRightOf, (, def, ,, getDefCfgNode, (, ), ,]
[{, return, false, ;, }, if, (, checkRightOf, (, def, ,, getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, ), ), {, return]
[if, (, checkRightOf, (, def, ,, getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (]
[checkRightOf, (, def, ,, getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (, checkLeftOf, (]
[def, ,, getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (, checkLeftOf, (, use, ,]
[getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (, checkLeftOf, (, use, ,, useCfgNode, ,]
[), ), {, return, false, ;, }, if, (, checkLeftOf, (, use, ,, useCfgNode, ,, SIDE_EFFECT_PREDICATE, ), ), {, return]
[;, }, if, (, checkLeftOf, (, use, ,, useCfgNode, ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (]
[;, }, if, (, checkLeftOf, (, use, ,, useCfgNode, ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (]
[checkLeftOf, (, use, ,, useCfgNode, ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (, NodeUtil, ., mayHaveSideEffects, (]
[checkLeftOf, (, use, ,, useCfgNode, ,, SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (, NodeUtil, ., mayHaveSideEffects, (]
[SIDE_EFFECT_PREDICATE, ), ), {, return, false, ;, }, if, (, NodeUtil, ., mayHaveSideEffects, (, def, ., getLastChild, (, ), ,]
[false, ;, }, if, (, NodeUtil, ., mayHaveSideEffects, (, def, ., getLastChild, (, ), ,, compiler, ), ), {, return]
[NodeUtil, ., mayHaveSideEffects, (, def, ., getLastChild, (, ), ,, compiler, ), ), {, return, false, ;, }, if, (]
[NodeUtil, ., mayHaveSideEffects, (, def, ., getLastChild, (, ), ,, compiler, ), ), {, return, false, ;, }, if, (]
[mayHaveSideEffects, (, def, ., getLastChild, (, ), ,, compiler, ), ), {, return, false, ;, }, if, (, numUseWithinUseCfgNode, !=]
[getLastChild, (, ), ,, compiler, ), ), {, return, false, ;, }, if, (, numUseWithinUseCfgNode, !=, 1, ), {, return]
[), ), {, return, false, ;, }, if, (, numUseWithinUseCfgNode, !=, 1, ), {, return, false, ;, }, if, (]
[), ), {, return, false, ;, }, if, (, numUseWithinUseCfgNode, !=, 1, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, numUseWithinUseCfgNode, !=, 1, ), {, return, false, ;, }, if, (, NodeUtil, ., isWithinLoop, (]
[numUseWithinUseCfgNode, !=, 1, ), {, return, false, ;, }, if, (, NodeUtil, ., isWithinLoop, (, use, ), ), {, return]
[if, (, NodeUtil, ., isWithinLoop, (, use, ), ), {, return, false, ;, }, Collection, <, Node, >, uses, =]
[if, (, NodeUtil, ., isWithinLoop, (, use, ), ), {, return, false, ;, }, Collection, <, Node, >, uses, =]
[isWithinLoop, (, use, ), ), {, return, false, ;, }, Collection, <, Node, >, uses, =, reachingUses, ., getUses, (]
[use, ), ), {, return, false, ;, }, Collection, <, Node, >, uses, =, reachingUses, ., getUses, (, varName, ,]
[}, Collection, <, Node, >, uses, =, reachingUses, ., getUses, (, varName, ,, getDefCfgNode, (, ), ), ;, if, (]
[}, Collection, <, Node, >, uses, =, reachingUses, ., getUses, (, varName, ,, getDefCfgNode, (, ), ), ;, if, (]
[}, Collection, <, Node, >, uses, =, reachingUses, ., getUses, (, varName, ,, getDefCfgNode, (, ), ), ;, if, (]
[=, reachingUses, ., getUses, (, varName, ,, getDefCfgNode, (, ), ), ;, if, (, uses, ., size, (, ), !=]
[(, varName, ,, getDefCfgNode, (, ), ), ;, if, (, uses, ., size, (, ), !=, 1, ), {, return]
[), ), ;, if, (, uses, ., size, (, ), !=, 1, ), {, return, false, ;, }, if, (]
[), ), ;, if, (, uses, ., size, (, ), !=, 1, ), {, return, false, ;, }, if, (]
[(, uses, ., size, (, ), !=, 1, ), {, return, false, ;, }, if, (, NodeUtil, ., has, (]
[(, uses, ., size, (, ), !=, 1, ), {, return, false, ;, }, if, (, NodeUtil, ., has, (]
[!=, 1, ), {, return, false, ;, }, if, (, NodeUtil, ., has, (, def, ., getLastChild, (, ), ,]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, switch, (]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, switch, (]
[@, Override, public, boolean, apply, (, Node, input, ), {, switch, (, input, ., getType, (, ), ), {, case]
[@, Override, public, boolean, apply, (, Node, input, ), {, switch, (, input, ., getType, (, ), ), {, case]
[(, Node, input, ), {, switch, (, input, ., getType, (, ), ), {, case, Token, ., GETELEM, :, case]
[(, Node, input, ), {, switch, (, input, ., getType, (, ), ), {, case, Token, ., GETELEM, :, case]
[switch, (, input, ., getType, (, ), ), {, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, case]
[switch, (, input, ., getType, (, ), ), {, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, case]
[(, ), ), {, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, case, Token, ., ARRAYLIT, :, case]
[(, ), ), {, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, case, Token, ., ARRAYLIT, :, case]
[Token, ., GETELEM, :, case, Token, ., GETPROP, :, case, Token, ., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case]
[Token, ., GETELEM, :, case, Token, ., GETPROP, :, case, Token, ., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case]
[Token, ., GETPROP, :, case, Token, ., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP, :, case]
[Token, ., GETPROP, :, case, Token, ., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP, :, case]
[Token, ., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP, :, case, Token, ., NEW, :, return]
[:, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP, :, case, Token, ., NEW, :, return, true, ;, case]
[:, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP, :, case, Token, ., NEW, :, return, true, ;, case]
[Token, ., REGEXP, :, case, Token, ., NEW, :, return, true, ;, case, Token, ., NAME, :, Var, var, =]
[Token, ., REGEXP, :, case, Token, ., NEW, :, return, true, ;, case, Token, ., NAME, :, Var, var, =]
[case, Token, ., NEW, :, return, true, ;, case, Token, ., NAME, :, Var, var, =, scope, ., getOwnSlot, (]
[case, Token, ., NEW, :, return, true, ;, case, Token, ., NAME, :, Var, var, =, scope, ., getOwnSlot, (]
[Token, ., NAME, :, Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (]
[Token, ., NAME, :, Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (]
[Token, ., NAME, :, Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (]
[NAME, :, Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (, var, !=]
[Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (, var, !=, null, &&]
[Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (, var, !=, null, &&]
[Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (, var, !=, null, &&]
[), ;, if, (, var, !=, null, &&, var, ., getParentNode, (, ), ., isCatch, (, ), ), {, return]
[!=, null, &&, var, ., getParentNode, (, ), ., isCatch, (, ), ), {, return, true, ;, }, }, return]
[getParentNode, (, ), ., isCatch, (, ), ), {, return, true, ;, }, }, return, false, ;, }, }, ,]
[,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, !]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, !]
[apply, (, Node, input, ), {, return, !, input, ., isFunction, (, ), ;, }, }, ), ), {, return]
[{, return, !, input, ., isFunction, (, ), ;, }, }, ), ), {, return, false, ;, }, if, (]
[{, return, !, input, ., isFunction, (, ), ;, }, }, ), ), {, return, false, ;, }, if, (]
[{, return, !, input, ., isFunction, (, ), ;, }, }, ), ), {, return, false, ;, }, if, (]
[., isFunction, (, ), ;, }, }, ), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatementBlock, (]
[., isFunction, (, ), ;, }, }, ), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatementBlock, (]
[{, return, false, ;, }, if, (, NodeUtil, ., isStatementBlock, (, getDefCfgNode, (, ), ., getParent, (, ), ), &&]
[{, return, false, ;, }, if, (, NodeUtil, ., isStatementBlock, (, getDefCfgNode, (, ), ., getParent, (, ), ), &&]
[{, return, false, ;, }, if, (, NodeUtil, ., isStatementBlock, (, getDefCfgNode, (, ), ., getParent, (, ), ), &&]
[., isStatementBlock, (, getDefCfgNode, (, ), ., getParent, (, ), ), &&, getDefCfgNode, (, ), ., getNext, (, ), !=]
[(, ), ., getNext, (, ), !=, useCfgNode, ), {, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, pathCheck, =]
[CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, pathCheck, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (]
[Node, ,, ControlFlowGraph, ., Branch, >, pathCheck, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (, cfg, ,]
[Node, ,, ControlFlowGraph, ., Branch, >, pathCheck, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (, cfg, ,]
[Branch, >, pathCheck, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (, cfg, ,, cfg, ., getDirectedGraphNode, (]
[CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (, cfg, ,, cfg, ., getDirectedGraphNode, (, getDefCfgNode, (, ), ), ,]
[CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (, cfg, ,, cfg, ., getDirectedGraphNode, (, getDefCfgNode, (, ), ), ,]
[ControlFlowGraph, ., Branch, >, (, cfg, ,, cfg, ., getDirectedGraphNode, (, getDefCfgNode, (, ), ), ,, cfg, ., getDirectedGraphNode, (]
[>, (, cfg, ,, cfg, ., getDirectedGraphNode, (, getDefCfgNode, (, ), ), ,, cfg, ., getDirectedGraphNode, (, useCfgNode, ), ,]
[cfg, ,, cfg, ., getDirectedGraphNode, (, getDefCfgNode, (, ), ), ,, cfg, ., getDirectedGraphNode, (, useCfgNode, ), ,, SIDE_EFFECT_PREDICATE, ,]
[cfg, ,, cfg, ., getDirectedGraphNode, (, getDefCfgNode, (, ), ), ,, cfg, ., getDirectedGraphNode, (, useCfgNode, ), ,, SIDE_EFFECT_PREDICATE, ,]
[), ,, SIDE_EFFECT_PREDICATE, ,, Predicates, ., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, alwaysTrue, (, ), ,]
[., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, alwaysTrue, (, ), ,, false, ), ;, if, (]
[., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, alwaysTrue, (, ), ,, false, ), ;, if, (]
[Branch, >, >, alwaysTrue, (, ), ,, false, ), ;, if, (, pathCheck, ., somePathsSatisfyPredicate, (, ), ), {, return]
[), ,, false, ), ;, if, (, pathCheck, ., somePathsSatisfyPredicate, (, ), ), {, return, false, ;, }, }, return]
[), {, return, false, ;, }, }, return, true, ;, }, private, void, inlineVariable, (, ), {, Node, defParent, =]
[), {, return, false, ;, }, }, return, true, ;, }, private, void, inlineVariable, (, ), {, Node, defParent, =]
[;, }, private, void, inlineVariable, (, ), {, Node, defParent, =, def, ., getParent, (, ), ;, Node, useParent, =]
[;, }, private, void, inlineVariable, (, ), {, Node, defParent, =, def, ., getParent, (, ), ;, Node, useParent, =]
[Node, defParent, =, def, ., getParent, (, ), ;, Node, useParent, =, use, ., getParent, (, ), ;, if, (]
[Node, defParent, =, def, ., getParent, (, ), ;, Node, useParent, =, use, ., getParent, (, ), ;, if, (]
[useParent, =, use, ., getParent, (, ), ;, if, (, def, ., isAssign, (, ), ), {, Node, rhs, =]
[useParent, =, use, ., getParent, (, ), ;, if, (, def, ., isAssign, (, ), ), {, Node, rhs, =]
[), ;, if, (, def, ., isAssign, (, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;]
[), ;, if, (, def, ., isAssign, (, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;]
[isAssign, (, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;, rhs, ., detachFromParent, (, ), ;]
[isAssign, (, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;, rhs, ., detachFromParent, (, ), ;]
[{, Node, rhs, =, def, ., getLastChild, (, ), ;, rhs, ., detachFromParent, (, ), ;, Preconditions, ., checkState, (]
[{, Node, rhs, =, def, ., getLastChild, (, ), ;, rhs, ., detachFromParent, (, ), ;, Preconditions, ., checkState, (]
[;, rhs, ., detachFromParent, (, ), ;, Preconditions, ., checkState, (, defParent, ., isExprResult, (, ), ), ;, while, (]
[;, rhs, ., detachFromParent, (, ), ;, Preconditions, ., checkState, (, defParent, ., isExprResult, (, ), ), ;, while, (]
[;, rhs, ., detachFromParent, (, ), ;, Preconditions, ., checkState, (, defParent, ., isExprResult, (, ), ), ;, while, (]
[defParent, ., isExprResult, (, ), ), ;, while, (, defParent, ., getParent, (, ), ., isLabel, (, ), ), {]
[isExprResult, (, ), ), ;, while, (, defParent, ., getParent, (, ), ., isLabel, (, ), ), {, defParent, =]
[isExprResult, (, ), ), ;, while, (, defParent, ., getParent, (, ), ., isLabel, (, ), ), {, defParent, =]
[defParent, ., getParent, (, ), ., isLabel, (, ), ), {, defParent, =, defParent, ., getParent, (, ), ;, }]
[defParent, ., getParent, (, ), ., isLabel, (, ), ), {, defParent, =, defParent, ., getParent, (, ), ;, }]
[isLabel, (, ), ), {, defParent, =, defParent, ., getParent, (, ), ;, }, defParent, ., detachFromParent, (, ), ;]
[isLabel, (, ), ), {, defParent, =, defParent, ., getParent, (, ), ;, }, defParent, ., detachFromParent, (, ), ;]
[{, defParent, =, defParent, ., getParent, (, ), ;, }, defParent, ., detachFromParent, (, ), ;, useParent, ., replaceChild, (]
[=, defParent, ., getParent, (, ), ;, }, defParent, ., detachFromParent, (, ), ;, useParent, ., replaceChild, (, use, ,]
[}, defParent, ., detachFromParent, (, ), ;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, if, (]
[}, defParent, ., detachFromParent, (, ), ;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, if, (]
[(, use, ,, rhs, ), ;, }, else, if, (, defParent, ., isVar, (, ), ), {, Node, rhs, =]
[(, use, ,, rhs, ), ;, }, else, if, (, defParent, ., isVar, (, ), ), {, Node, rhs, =]
[}, else, if, (, defParent, ., isVar, (, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;]
[}, else, if, (, defParent, ., isVar, (, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;]
[defParent, ., isVar, (, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;, def, ., removeChild, (]
[(, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;, def, ., removeChild, (, rhs, ), ;]
[(, ), ), {, Node, rhs, =, def, ., getLastChild, (, ), ;, def, ., removeChild, (, rhs, ), ;]
[Node, rhs, =, def, ., getLastChild, (, ), ;, def, ., removeChild, (, rhs, ), ;, useParent, ., replaceChild, (]
[=, def, ., getLastChild, (, ), ;, def, ., removeChild, (, rhs, ), ;, useParent, ., replaceChild, (, use, ,]
[;, def, ., removeChild, (, rhs, ), ;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, {]
[;, def, ., removeChild, (, rhs, ), ;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, {]
[(, rhs, ), ;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, {, Preconditions, ., checkState, (]
[), ;, useParent, ., replaceChild, (, use, ,, rhs, ), ;, }, else, {, Preconditions, ., checkState, (, false, ,]
[replaceChild, (, use, ,, rhs, ), ;, }, else, {, Preconditions, ., checkState, (, false, ,, "No other definitions can be inlined.", ), ;, }]
[replaceChild, (, use, ,, rhs, ), ;, }, else, {, Preconditions, ., checkState, (, false, ,, "No other definitions can be inlined.", ), ;, }]
[., reportCodeChange, (, ), ;, }, private, void, getDefinition, (, Node, n, ,, Node, parent, ), {, AbstractCfgNodeTraversalCallback, gatherCb, =]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[getType, (, ), ), {, case, Token, ., NAME, :, if, (, n, ., getString, (, ), ., equals, (]
[), {, case, Token, ., NAME, :, if, (, n, ., getString, (, ), ., equals, (, varName, ), &&]
[), {, case, Token, ., NAME, :, if, (, n, ., getString, (, ), ., equals, (, varName, ), &&]
[if, (, n, ., getString, (, ), ., equals, (, varName, ), &&, n, ., hasChildren, (, ), ), {]
[n, ., getString, (, ), ., equals, (, varName, ), &&, n, ., hasChildren, (, ), ), {, def, =]
[equals, (, varName, ), &&, n, ., hasChildren, (, ), ), {, def, =, n, ;, }, return, ;, case]
[equals, (, varName, ), &&, n, ., hasChildren, (, ), ), {, def, =, n, ;, }, return, ;, case]
[hasChildren, (, ), ), {, def, =, n, ;, }, return, ;, case, Token, ., ASSIGN, :, Node, lhs, =]
[hasChildren, (, ), ), {, def, =, n, ;, }, return, ;, case, Token, ., ASSIGN, :, Node, lhs, =]
[;, }, return, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[;, }, return, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[;, }, return, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), &&]
[., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), &&]
[., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), &&]
[getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), &&, lhs, ., getString, (, ), ., equals, (]
[if, (, lhs, ., isName, (, ), &&, lhs, ., getString, (, ), ., equals, (, varName, ), ), {]
[lhs, ., isName, (, ), &&, lhs, ., getString, (, ), ., equals, (, varName, ), ), {, def, =]
[(, ), ., equals, (, varName, ), ), {, def, =, n, ;, }, return, ;, }, }, }, ;]
[(, ), ., equals, (, varName, ), ), {, def, =, n, ;, }, return, ;, }, }, }, ;]
[(, varName, ), ), {, def, =, n, ;, }, return, ;, }, }, }, ;, NodeTraversal, ., traverse, (]
[), ), {, def, =, n, ;, }, return, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,]
[{, def, =, n, ;, }, return, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,]
[n, ,, gatherCb, ), ;, }, private, void, getNumUseInUseCfgNode, (, Node, n, ,, Node, parant, ), {, AbstractCfgNodeTraversalCallback, gatherCb, =]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), &&]
[Node, parent, ), {, if, (, n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (]
[{, if, (, n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, varName, ), &&]
[if, (, n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, varName, ), &&, !]
[(, n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, varName, ), &&, !, (]
[(, n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, varName, ), &&, !, (]
[(, n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, varName, ), &&, !, (]
[&&, n, ., getString, (, ), ., equals, (, varName, ), &&, !, (, parent, ., isAssign, (, ), &&]
[n, ., getString, (, ), ., equals, (, varName, ), &&, !, (, parent, ., isAssign, (, ), &&, (]
[n, ., getString, (, ), ., equals, (, varName, ), &&, !, (, parent, ., isAssign, (, ), &&, (]
[n, ., getString, (, ), ., equals, (, varName, ), &&, !, (, parent, ., isAssign, (, ), &&, (]
[equals, (, varName, ), &&, !, (, parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==]
[!, (, parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==, n, ), ), ), {]
[!, (, parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==, n, ), ), ), {]
[&&, (, parent, ., getFirstChild, (, ), ==, n, ), ), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;]
[&&, (, parent, ., getFirstChild, (, ), ==, n, ), ), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;]
[getFirstChild, (, ), ==, n, ), ), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse, (]
[), ==, n, ), ), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,]
[n, ), ), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }, ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,]
[checkRightOf, (, Node, n, ,, Node, expressionRoot, ,, Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =]
[Node, n, ,, Node, expressionRoot, ,, Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =, n, ;]
[Node, n, ,, Node, expressionRoot, ,, Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =, n, ;]
[,, Node, expressionRoot, ,, Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =, n, ;, p, !=]
[expressionRoot, ,, Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =, n, ;, p, !=, expressionRoot, ;]
[Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =, n, ;, p, !=, expressionRoot, ;, p, =]
[Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =, n, ;, p, !=, expressionRoot, ;, p, =]
[n, ;, p, !=, expressionRoot, ;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =]
[n, ;, p, !=, expressionRoot, ;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =]
[p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getNext, (, ), ;]
[p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getNext, (, ), ;]
[p, ., getParent, (, ), ), {, for, (, Node, cur, =, p, ., getNext, (, ), ;, cur, !=]
[getParent, (, ), ), {, for, (, Node, cur, =, p, ., getNext, (, ), ;, cur, !=, null, ;]
[), ), {, for, (, Node, cur, =, p, ., getNext, (, ), ;, cur, !=, null, ;, cur, =]
[), ), {, for, (, Node, cur, =, p, ., getNext, (, ), ;, cur, !=, null, ;, cur, =]
[., getNext, (, ), ;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, if, (]
[., getNext, (, ), ;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, if, (]
[;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (]
[cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, ), ), {, return]
[), ), {, if, (, predicate, ., apply, (, cur, ), ), {, return, true, ;, }, }, }, return]
[checkLeftOf, (, Node, n, ,, Node, expressionRoot, ,, Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =]
[checkLeftOf, (, Node, n, ,, Node, expressionRoot, ,, Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =]
[expressionRoot, ,, Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =, n, ., getParent, (, ), ;]
[expressionRoot, ,, Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =, n, ., getParent, (, ), ;]
[Predicate, <, Node, >, predicate, ), {, for, (, Node, p, =, n, ., getParent, (, ), ;, p, !=]
[Node, >, predicate, ), {, for, (, Node, p, =, n, ., getParent, (, ), ;, p, !=, expressionRoot, ;]
[predicate, ), {, for, (, Node, p, =, n, ., getParent, (, ), ;, p, !=, expressionRoot, ;, p, =]
[predicate, ), {, for, (, Node, p, =, n, ., getParent, (, ), ;, p, !=, expressionRoot, ;, p, =]
[), ;, p, !=, expressionRoot, ;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =]
[), ;, p, !=, expressionRoot, ;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =]
[), ;, p, !=, expressionRoot, ;, p, =, p, ., getParent, (, ), ), {, for, (, Node, cur, =]
[getParent, (, ), ), {, for, (, Node, cur, =, p, ., getParent, (, ), ., getFirstChild, (, ), ;]
[getParent, (, ), ), {, for, (, Node, cur, =, p, ., getParent, (, ), ., getFirstChild, (, ), ;]
[), ), {, for, (, Node, cur, =, p, ., getParent, (, ), ., getFirstChild, (, ), ;, cur, !=]
[{, for, (, Node, cur, =, p, ., getParent, (, ), ., getFirstChild, (, ), ;, cur, !=, p, ;]
[(, Node, cur, =, p, ., getParent, (, ), ., getFirstChild, (, ), ;, cur, !=, p, ;, cur, =]
[(, Node, cur, =, p, ., getParent, (, ), ., getFirstChild, (, ), ;, cur, !=, p, ;, cur, =]
[., getFirstChild, (, ), ;, cur, !=, p, ;, cur, =, cur, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, cur, !=, p, ;, cur, =, cur, ., getNext, (, ), ), {, if, (]
[;, cur, !=, p, ;, cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (]
[cur, =, cur, ., getNext, (, ), ), {, if, (, predicate, ., apply, (, cur, ), ), {, return]
[), ), {, if, (, predicate, ., apply, (, cur, ), ), {, return, true, ;, }, }, }, return]
