[=, compiler, ;, }, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder]
[., compiler, =, compiler, ;, }, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, )]
[;, }, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =]
[;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }]
[), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;]
[;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs, ,]
[., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override]
[,, root, ), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (]
[), ;, process, (, externs, ,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, List, <]
[,, root, ,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder]
[,, defFinder, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, )]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, List]
[;, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (, !, defSite, ., inExterns, &&]
[., newArrayList, (, ), ;, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (, !]
[), {, if, (, !, defSite, ., inExterns, &&, !, callResultsMaybeUsed, (, definitions, ,, defSite, ), ), {, toOptimize, .]
[., getDefinitionSites, (, ), ), {, if, (, !, defSite, ., inExterns, &&, !, callResultsMaybeUsed, (, definitions, ,, defSite, )]
[), {, toOptimize, ., add, (, defSite, ., definition, ., getRValue, (, ), ), ;, }, }, for, (, Node]
[&&, !, callResultsMaybeUsed, (, definitions, ,, defSite, ), ), {, toOptimize, ., add, (, defSite, ., definition, ., getRValue, (]
[&&, !, callResultsMaybeUsed, (, definitions, ,, defSite, ), ), {, toOptimize, ., add, (, defSite, ., definition, ., getRValue, (]
[., inExterns, &&, !, callResultsMaybeUsed, (, definitions, ,, defSite, ), ), {, toOptimize, ., add, (, defSite, ., definition, .]
[), {, toOptimize, ., add, (, defSite, ., definition, ., getRValue, (, ), ), ;, }, }, for, (, Node]
[), {, toOptimize, ., add, (, defSite, ., definition, ., getRValue, (, ), ), ;, }, }, for, (, Node]
[,, defSite, ), ), {, toOptimize, ., add, (, defSite, ., definition, ., getRValue, (, ), ), ;, }, }]
[), ), {, toOptimize, ., add, (, defSite, ., definition, ., getRValue, (, ), ), ;, }, }, for, (]
[;, }, }, for, (, Node, node, :, toOptimize, ), {, rewriteReturns, (, definitions, ,, node, ), ;, }, }]
[., add, (, defSite, ., definition, ., getRValue, (, ), ), ;, }, }, for, (, Node, node, :, toOptimize]
[), ;, }, }, for, (, Node, node, :, toOptimize, ), {, rewriteReturns, (, definitions, ,, node, ), ;, }]
[., getRValue, (, ), ), ;, }, }, for, (, Node, node, :, toOptimize, ), {, rewriteReturns, (, definitions, ,]
[., definition, ., getRValue, (, ), ), ;, }, }, for, (, Node, node, :, toOptimize, ), {, rewriteReturns, (]
[), {, rewriteReturns, (, definitions, ,, node, ), ;, }, }, private, boolean, callResultsMaybeUsed, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite]
[;, }, }, private, boolean, callResultsMaybeUsed, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =, definitionSite, ., definition]
[,, node, ), ;, }, }, private, boolean, callResultsMaybeUsed, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =]
[), ;, }, }, private, boolean, callResultsMaybeUsed, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =, definitionSite, .]
[;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction]
[., definition, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue]
[;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ), {, return, true, ;, }, if]
[., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ), {, return]
[), {, return, true, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, true, ;]
[||, !, rValue, ., isFunction, (, ), ), {, return, true, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (]
[==, null, ||, !, rValue, ., isFunction, (, ), ), {, return, true, ;, }, if, (, !, SimpleDefinitionFinder, .]
[||, !, rValue, ., isFunction, (, ), ), {, return, true, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (]
[), {, return, true, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, true, ;]
[), {, return, true, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, true, ;]
[., isFunction, (, ), ), {, return, true, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), )]
[;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, true, ;, }, if, (, !]
[), {, return, true, ;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, true, ;]
[), {, return, true, ;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, true, ;]
[., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, true, ;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, )]
[), ), {, return, true, ;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, true]
[;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, true, ;, }, Collection, <, UseSite]
[), {, return, true, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for]
[), {, return, true, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for]
[., canModifyDefinition, (, definition, ), ), {, return, true, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites]
[), ), {, return, true, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;]
[;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :]
[;, for, (, UseSite, site, :, useSites, ), {, Node, useNodeParent, =, site, ., node, ., getParent, (, ), ;]
[., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Node, useNodeParent, =, site, ., node]
[), ;, for, (, UseSite, site, :, useSites, ), {, Node, useNodeParent, =, site, ., node, ., getParent, (, )]
[), {, Node, useNodeParent, =, site, ., node, ., getParent, (, ), ;, if, (, isCall, (, site, ), )]
[;, if, (, isCall, (, site, ), ), {, Node, callNode, =, useNodeParent, ;, Preconditions, ., checkState, (, callNode, .]
[., getParent, (, ), ;, if, (, isCall, (, site, ), ), {, Node, callNode, =, useNodeParent, ;, Preconditions, .]
[., node, ., getParent, (, ), ;, if, (, isCall, (, site, ), ), {, Node, callNode, =, useNodeParent, ;]
[), {, Node, callNode, =, useNodeParent, ;, Preconditions, ., checkState, (, callNode, ., isCall, (, ), ), ;, if, (]
[), ), {, Node, callNode, =, useNodeParent, ;, Preconditions, ., checkState, (, callNode, ., isCall, (, ), ), ;, if]
[;, Preconditions, ., checkState, (, callNode, ., isCall, (, ), ), ;, if, (, NodeUtil, ., isExpressionResultUsed, (, callNode, )]
[;, if, (, NodeUtil, ., isExpressionResultUsed, (, callNode, ), ), {, return, true, ;, }, }, else, {, if, (]
[., checkState, (, callNode, ., isCall, (, ), ), ;, if, (, NodeUtil, ., isExpressionResultUsed, (, callNode, ), ), {]
[), ;, if, (, NodeUtil, ., isExpressionResultUsed, (, callNode, ), ), {, return, true, ;, }, }, else, {, if]
[., isCall, (, ), ), ;, if, (, NodeUtil, ., isExpressionResultUsed, (, callNode, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, else, {, if, (, !, useNodeParent, ., isVar, (, ), ), {, return]
[., isExpressionResultUsed, (, callNode, ), ), {, return, true, ;, }, }, else, {, if, (, !, useNodeParent, ., isVar]
[), ), {, return, true, ;, }, }, else, {, if, (, !, useNodeParent, ., isVar, (, ), ), {]
[;, }, }, else, {, if, (, !, useNodeParent, ., isVar, (, ), ), {, return, true, ;, }, }]
[), {, return, true, ;, }, }, }, return, false, ;, }, private, void, rewriteReturns, (, final, SimpleDefinitionFinder, defFinder, ,]
[), {, return, true, ;, }, }, }, return, false, ;, }, private, void, rewriteReturns, (, final, SimpleDefinitionFinder, defFinder, ,]
[., isVar, (, ), ), {, return, true, ;, }, }, }, return, false, ;, }, private, void, rewriteReturns, (]
[;, }, }, }, return, false, ;, }, private, void, rewriteReturns, (, final, SimpleDefinitionFinder, defFinder, ,, Node, fnNode, ), {]
[;, }, private, void, rewriteReturns, (, final, SimpleDefinitionFinder, defFinder, ,, Node, fnNode, ), {, Preconditions, ., checkState, (, fnNode, .]
[;, NodeUtil, ., visitPostOrder, (, fnNode, ., getLastChild, (, ), ,, new, NodeUtil, ., Visitor, (, ), {, @, Override]
[., checkState, (, fnNode, ., isFunction, (, ), ), ;, NodeUtil, ., visitPostOrder, (, fnNode, ., getLastChild, (, ), ,]
[), ;, NodeUtil, ., visitPostOrder, (, fnNode, ., getLastChild, (, ), ,, new, NodeUtil, ., Visitor, (, ), {, @]
[., isFunction, (, ), ), ;, NodeUtil, ., visitPostOrder, (, fnNode, ., getLastChild, (, ), ,, new, NodeUtil, ., Visitor]
[;, }, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =, site, ., node, ;, Node, parent]
[., visitPostOrder, (, fnNode, ., getLastChild, (, ), ,, new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void]
[,, new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void, visit, (, Node, node, ), {, if, (]
[., getLastChild, (, ), ,, new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void, visit, (, Node, node]
[,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, }, private, static, boolean, isCall, (, UseSite, site, ), {, Node]
[), {, boolean, keepValue, =, NodeUtil, ., mayHaveSideEffects, (, node, ., getFirstChild, (, ), ,, compiler, ), ;, if, (]
[&&, node, ., hasOneChild, (, ), ), {, boolean, keepValue, =, NodeUtil, ., mayHaveSideEffects, (, node, ., getFirstChild, (, )]
[., isReturn, (, ), &&, node, ., hasOneChild, (, ), ), {, boolean, keepValue, =, NodeUtil, ., mayHaveSideEffects, (, node]
[), {, boolean, keepValue, =, NodeUtil, ., mayHaveSideEffects, (, node, ., getFirstChild, (, ), ,, compiler, ), ;, if, (]
[., hasOneChild, (, ), ), {, boolean, keepValue, =, NodeUtil, ., mayHaveSideEffects, (, node, ., getFirstChild, (, ), ,, compiler]
[;, if, (, !, keepValue, ), {, defFinder, ., removeReferences, (, node, ., getFirstChild, (, ), ), ;, }, Node]
[., mayHaveSideEffects, (, node, ., getFirstChild, (, ), ,, compiler, ), ;, if, (, !, keepValue, ), {, defFinder, .]
[,, compiler, ), ;, if, (, !, keepValue, ), {, defFinder, ., removeReferences, (, node, ., getFirstChild, (, ), )]
[., getFirstChild, (, ), ,, compiler, ), ;, if, (, !, keepValue, ), {, defFinder, ., removeReferences, (, node, .]
[), ;, if, (, !, keepValue, ), {, defFinder, ., removeReferences, (, node, ., getFirstChild, (, ), ), ;, }]
[), {, defFinder, ., removeReferences, (, node, ., getFirstChild, (, ), ), ;, }, Node, result, =, node, ., removeFirstChild]
[), {, defFinder, ., removeReferences, (, node, ., getFirstChild, (, ), ), ;, }, Node, result, =, node, ., removeFirstChild]
[;, }, Node, result, =, node, ., removeFirstChild, (, ), ;, if, (, keepValue, ), {, node, ., getParent, (]
[., removeReferences, (, node, ., getFirstChild, (, ), ), ;, }, Node, result, =, node, ., removeFirstChild, (, ), ;]
[), ;, }, Node, result, =, node, ., removeFirstChild, (, ), ;, if, (, keepValue, ), {, node, ., getParent]
[., getFirstChild, (, ), ), ;, }, Node, result, =, node, ., removeFirstChild, (, ), ;, if, (, keepValue, )]
[;, if, (, keepValue, ), {, node, ., getParent, (, ), ., addChildBefore, (, IR, ., exprResult, (, result, )]
[., removeFirstChild, (, ), ;, if, (, keepValue, ), {, node, ., getParent, (, ), ., addChildBefore, (, IR, .]
[), {, node, ., getParent, (, ), ., addChildBefore, (, IR, ., exprResult, (, result, ), ., srcref, (, result]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;]
[., addChildBefore, (, IR, ., exprResult, (, result, ), ., srcref, (, result, ), ,, node, ), ;, }, compiler]
[., getParent, (, ), ., addChildBefore, (, IR, ., exprResult, (, result, ), ., srcref, (, result, ), ,, node]
[,, node, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, ,, new, NodeUtil, ., MatchShallowStatement, (]
[., srcref, (, result, ), ,, node, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, ,]
[., exprResult, (, result, ), ., srcref, (, result, ), ,, node, ), ;, }, compiler, ., reportCodeChange, (, )]
[), ., srcref, (, result, ), ,, node, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[), ,, node, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, ,, new, NodeUtil, ., MatchShallowStatement]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, ,, new, NodeUtil, ., MatchShallowStatement, (, ), )]
[;, }, }, }, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, }, private, static, boolean, isCall, (, UseSite]
[., reportCodeChange, (, ), ;, }, }, }, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, }, private, static]
[), ;, }, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =, site, ., node, ;, Node]
[;, Node, parent, =, node, ., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==, node, )]
[., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==]
[;, return, (, parent, ., getFirstChild, (, ), ==, node, ), &&, parent, ., isCall, (, ), ;, }, }]
[., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==, node, ), &&, parent, ., isCall, (]
[;, }, }]
[&&, parent, ., isCall, (, ), ;, }, }]
[), &&, parent, ., isCall, (, ), ;, }, }]
[==, node, ), &&, parent, ., isCall, (, ), ;, }, }]
[., getFirstChild, (, ), ==, node, ), &&, parent, ., isCall, (, ), ;, }, }]
[), &&, parent, ., isCall, (, ), ;, }, }]
[;, }, }]
[., isCall, (, ), ;, }, }]
