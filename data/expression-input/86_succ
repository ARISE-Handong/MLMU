[;, }, public, static, UnivariateDifferentiableFunction, compose, (, final, UnivariateDifferentiableFunction, ..., f, ), {, return, new, UnivariateDifferentiableFunction, (, ), {, public]
[;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, )]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], .]
[;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, )]
[;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r]
[>=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }]
[;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r]
[), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, }]
[--, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }]
[=, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, }, ;, }, public]
[;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, compose, (, final, UnivariateDifferentiableFunction, ..., f, ), {]
[., value, (, r, ), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, compose, (, final]
[[, i, ], ., value, (, r, ), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction]
[], ., value, (, r, ), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, compose, (]
[), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, compose, (, final, UnivariateDifferentiableFunction, ..., f, )]
[;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, compose, (, final, UnivariateDifferentiableFunction, ..., f, ), {, return, new, UnivariateDifferentiableFunction, (]
[;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, compose, (, final, DifferentiableUnivariateFunction, ..., f, ), {, return, new, DifferentiableUnivariateFunction, (, )]
[;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, )]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], .]
[;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, )]
[;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r]
[>=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }]
[;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r]
[), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, public]
[--, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }]
[=, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (]
[;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, t, ;]
[., value, (, r, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {]
[[, i, ], ., value, (, r, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure]
[], ., value, (, r, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, )]
[), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, t]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, t, ;, for, (, int, i]
[;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, )]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], .]
[;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, )]
[;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r]
[>=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }]
[;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r]
[), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, }]
[--, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }]
[=, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, }, ;, }, @]
[;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, compose, (, final, DifferentiableUnivariateFunction, ..., f]
[., value, (, r, ), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, compose]
[[, i, ], ., value, (, r, ), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public]
[], ., value, (, r, ), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction]
[), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, compose, (, final, DifferentiableUnivariateFunction, ...]
[;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, compose, (, final, DifferentiableUnivariateFunction, ..., f, ), {, return, new]
[;, }, public, static, UnivariateFunction, add, (, final, UnivariateFunction, ..., f, ), {, return, new, UnivariateFunction, (, ), {, public]
[;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, )]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], .]
[;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, )]
[;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r]
[>=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }]
[;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r]
[), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, public]
[--, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }]
[=, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (]
[;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double]
[., value, (, r, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction]
[[, i, ], ., value, (, r, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {]
[], ., value, (, r, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new]
[), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public]
[;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x]
[;, }, }, ;, }, public, static, UnivariateFunction, add, (, final, UnivariateFunction, ..., f, ), {, return, new, UnivariateFunction, (]
[;, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0]
[;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, i, >=, 0, ;, i, --, ), {, p, *=, f, [, i, ], ., derivative, (, ), .]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, p, *=, f, [, i, ], ., derivative, (]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, p, *=, f, [, i, ], .]
[;, i, >=, 0, ;, i, --, ), {, p, *=, f, [, i, ], ., derivative, (, ), .]
[;, i, --, ), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (, r, )]
[>=, 0, ;, i, --, ), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (]
[;, i, --, ), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (, r, )]
[), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (, r, ), ;, r, =]
[--, ), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (, r, ), ;, r]
[*=, f, [, i, ], ., derivative, (, ), ., value, (, r, ), ;, r, =, f, [, i]
[;, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, p, ;, }, }, ;]
[., value, (, r, ), ;, r, =, f, [, i, ], ., value, (, r, ), ;, }, return]
[., derivative, (, ), ., value, (, r, ), ;, r, =, f, [, i, ], ., value, (, r]
[[, i, ], ., derivative, (, ), ., value, (, r, ), ;, r, =, f, [, i, ], .]
[], ., derivative, (, ), ., value, (, r, ), ;, r, =, f, [, i, ], ., value, (]
[), ;, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, p, ;, }, }]
[=, f, [, i, ], ., value, (, r, ), ;, }, return, p, ;, }, }, ;, }, }]
[;, }, return, p, ;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction, add, (, final, UnivariateFunction, ...]
[., value, (, r, ), ;, }, return, p, ;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction]
[[, i, ], ., value, (, r, ), ;, }, return, p, ;, }, }, ;, }, }, ;, }]
[], ., value, (, r, ), ;, }, return, p, ;, }, }, ;, }, }, ;, }, public, static]
[), ;, }, return, p, ;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction, add, (, final, UnivariateFunction]
[;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction, add, (, final, UnivariateFunction, ..., f, ), {, return]
[;, }, public, static, UnivariateDifferentiableFunction, add, (, final, UnivariateDifferentiableFunction, ..., f, ), {, return, new, UnivariateDifferentiableFunction, (, ), {, public]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i]
[[, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, .]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r]
[;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (]
[;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return, r]
[<, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, )]
[;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return, r]
[., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }]
[), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, }]
[++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }]
[+=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, public]
[;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, add, (, final, UnivariateDifferentiableFunction, ..., f, ), {]
[., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, add, (, final]
[[, i, ], ., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction]
[], ., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, add, (]
[), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, add, (, final, UnivariateDifferentiableFunction, ..., f, )]
[;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, add, (, final, UnivariateDifferentiableFunction, ..., f, ), {, return, new, UnivariateDifferentiableFunction, (]
[;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, add, (, final, DifferentiableUnivariateFunction, ..., f, ), {, return, new, DifferentiableUnivariateFunction, (, )]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i]
[[, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, .]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r]
[;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (]
[;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, t, ), ;, }, return, r]
[<, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, t, )]
[;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, t, ), ;, }, return, r]
[., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, t, ), ;, }]
[), {, r, +=, f, [, i, ], ., value, (, t, ), ;, }, return, r, ;, }, public]
[++, ), {, r, +=, f, [, i, ], ., value, (, t, ), ;, }, return, r, ;, }]
[+=, f, [, i, ], ., value, (, t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (]
[;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, DerivativeStructure, r, =]
[., value, (, t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws]
[[, i, ], ., value, (, t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure]
[], ., value, (, t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, )]
[), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, DerivativeStructure, r]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, DerivativeStructure, r, =, f, [, 0, ]]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =]
[., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i]
[[, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, .]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r]
[;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., add, (, f, [, i]
[;, i, ++, ), {, r, =, r, ., add, (, f, [, i, ], ., value, (, t, )]
[<, f, ., length, ;, i, ++, ), {, r, =, r, ., add, (, f, [, i, ], .]
[;, i, ++, ), {, r, =, r, ., add, (, f, [, i, ], ., value, (, t, )]
[., length, ;, i, ++, ), {, r, =, r, ., add, (, f, [, i, ], ., value, (]
[), {, r, =, r, ., add, (, f, [, i, ], ., value, (, t, ), ), ;, }]
[++, ), {, r, =, r, ., add, (, f, [, i, ], ., value, (, t, ), ), ;]
[=, r, ., add, (, f, [, i, ], ., value, (, t, ), ), ;, }, return, r, ;]
[;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, add, (, final, DifferentiableUnivariateFunction, ..., f]
[., add, (, f, [, i, ], ., value, (, t, ), ), ;, }, return, r, ;, }, }]
[), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, add, (, final, DifferentiableUnivariateFunction, ...]
[., value, (, t, ), ), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction]
[[, i, ], ., value, (, t, ), ), ;, }, return, r, ;, }, }, ;, }, @, Deprecated]
[], ., value, (, t, ), ), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static]
[), ), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, add, (, final, DifferentiableUnivariateFunction]
[;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, add, (, final, DifferentiableUnivariateFunction, ..., f, ), {, return, new]
[;, }, public, static, UnivariateFunction, multiply, (, final, UnivariateFunction, ..., f, ), {, return, new, UnivariateFunction, (, ), {, public]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i]
[[, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, .]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r]
[;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (]
[;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return, r]
[<, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, )]
[;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return, r]
[., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }]
[), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, public]
[++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }]
[+=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (]
[;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double]
[., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction]
[[, i, ], ., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {]
[], ., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new]
[), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public]
[;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x]
[;, }, }, ;, }, public, static, UnivariateFunction, multiply, (, final, UnivariateFunction, ..., f, ), {, return, new, UnivariateFunction, (]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=]
[., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i]
[., derivative, (, ), ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f]
[[, 0, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, i, =, 1, ;]
[], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <]
[), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r]
[;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., derivative, (]
[;, i, ++, ), {, r, +=, f, [, i, ], ., derivative, (, ), ., value, (, x, )]
[<, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., derivative, (, ), .]
[;, i, ++, ), {, r, +=, f, [, i, ], ., derivative, (, ), ., value, (, x, )]
[., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., derivative, (, ), ., value, (]
[), {, r, +=, f, [, i, ], ., derivative, (, ), ., value, (, x, ), ;, }, return]
[++, ), {, r, +=, f, [, i, ], ., derivative, (, ), ., value, (, x, ), ;, }]
[+=, f, [, i, ], ., derivative, (, ), ., value, (, x, ), ;, }, return, r, ;, }]
[;, }, return, r, ;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction, multiply, (, final, UnivariateFunction, ...]
[., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction]
[., derivative, (, ), ., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, }, ;]
[[, i, ], ., derivative, (, ), ., value, (, x, ), ;, }, return, r, ;, }, }, ;]
[], ., derivative, (, ), ., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, }]
[), ;, }, return, r, ;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction, multiply, (, final, UnivariateFunction]
[;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction, multiply, (, final, UnivariateFunction, ..., f, ), {, return]
[;, }, public, static, UnivariateDifferentiableFunction, multiply, (, final, UnivariateDifferentiableFunction, ..., f, ), {, return, new, UnivariateDifferentiableFunction, (, ), {, public]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i]
[[, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, .]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r]
[;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (]
[;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return, r]
[<, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, )]
[;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return, r]
[., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }]
[), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, }]
[++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }]
[*=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, public]
[;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, multiply, (, final, UnivariateDifferentiableFunction, ..., f, ), {]
[., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, multiply, (, final]
[[, i, ], ., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction]
[], ., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, multiply, (]
[), ;, }, return, r, ;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, multiply, (, final, UnivariateDifferentiableFunction, ..., f, )]
[;, }, }, ;, }, public, static, UnivariateDifferentiableFunction, multiply, (, final, UnivariateDifferentiableFunction, ..., f, ), {, return, new, UnivariateDifferentiableFunction, (]
[;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, multiply, (, final, DifferentiableUnivariateFunction, ..., f, ), {, return, new, DifferentiableUnivariateFunction, (, )]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i]
[[, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, .]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r]
[;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (]
[;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, t, ), ;, }, return, r]
[<, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, t, )]
[;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, t, ), ;, }, return, r]
[., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, t, ), ;, }]
[), {, r, *=, f, [, i, ], ., value, (, t, ), ;, }, return, r, ;, }, public]
[++, ), {, r, *=, f, [, i, ], ., value, (, t, ), ;, }, return, r, ;, }]
[*=, f, [, i, ], ., value, (, t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (]
[;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, f, []
[., value, (, t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {]
[[, i, ], ., value, (, t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure]
[], ., value, (, t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, )]
[), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, f]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, f, [, 0, ], ., value]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =]
[., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i]
[[, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, .]
[], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r]
[;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., multiply, (, f, [, i]
[;, i, ++, ), {, r, =, r, ., multiply, (, f, [, i, ], ., value, (, t, )]
[<, f, ., length, ;, i, ++, ), {, r, =, r, ., multiply, (, f, [, i, ], .]
[;, i, ++, ), {, r, =, r, ., multiply, (, f, [, i, ], ., value, (, t, )]
[., length, ;, i, ++, ), {, r, =, r, ., multiply, (, f, [, i, ], ., value, (]
[), {, r, =, r, ., multiply, (, f, [, i, ], ., value, (, t, ), ), ;, }]
[++, ), {, r, =, r, ., multiply, (, f, [, i, ], ., value, (, t, ), ), ;]
[=, r, ., multiply, (, f, [, i, ], ., value, (, t, ), ), ;, }, return, r, ;]
[;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, multiply, (, final, DifferentiableUnivariateFunction, ..., f]
[., multiply, (, f, [, i, ], ., value, (, t, ), ), ;, }, return, r, ;, }, }]
[), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, multiply, (, final, DifferentiableUnivariateFunction, ...]
[., value, (, t, ), ), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction]
[[, i, ], ., value, (, t, ), ), ;, }, return, r, ;, }, }, ;, }, @, Deprecated]
[], ., value, (, t, ), ), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static]
[), ), ;, }, return, r, ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, multiply, (, final, DifferentiableUnivariateFunction]
[;, }, }, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, multiply, (, final, DifferentiableUnivariateFunction, ..., f, ), {, return, new]
[;, }, public, static, UnivariateFunction, combine, (, final, BivariateFunction, combiner, ,, final, UnivariateFunction, f, ,, final, UnivariateFunction, g, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=]
[., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i]
[[, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, .]
[], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r]
[;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (]
[;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return, r]
[<, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, )]
[;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return, r]
[., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }]
[), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, public]
[++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }]
[*=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (]
[;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double]
[., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction]
[[, i, ], ., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {]
[], ., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new]
[), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public]
[;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x]
[;, }, }, ;, }, public, static, UnivariateFunction, combine, (, final, BivariateFunction, combiner, ,, final, UnivariateFunction, f, ,, final, UnivariateFunction]
[;, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, double, prod]
[;, i, <, f, ., length, ;, i, ++, ), {, double, prod, =, f, [, i, ], ., derivative]
[;, i, ++, ), {, double, prod, =, f, [, i, ], ., derivative, (, ), ., value, (, x]
[<, f, ., length, ;, i, ++, ), {, double, prod, =, f, [, i, ], ., derivative, (, )]
[;, i, ++, ), {, double, prod, =, f, [, i, ], ., derivative, (, ), ., value, (, x]
[., length, ;, i, ++, ), {, double, prod, =, f, [, i, ], ., derivative, (, ), ., value]
[), {, double, prod, =, f, [, i, ], ., derivative, (, ), ., value, (, x, ), ;, for]
[++, ), {, double, prod, =, f, [, i, ], ., derivative, (, ), ., value, (, x, ), ;]
[;, for, (, int, j, =, 0, ;, j, <, f, ., length, ;, j, ++, ), {, if, (]
[., value, (, x, ), ;, for, (, int, j, =, 0, ;, j, <, f, ., length, ;, j]
[., derivative, (, ), ., value, (, x, ), ;, for, (, int, j, =, 0, ;, j, <, f]
[[, i, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, j, =, 0, ;]
[], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, j, =, 0, ;, j, <]
[), ;, for, (, int, j, =, 0, ;, j, <, f, ., length, ;, j, ++, ), {, if]
[;, j, <, f, ., length, ;, j, ++, ), {, if, (, i, !=, j, ), {, prod, *=]
[;, j, ++, ), {, if, (, i, !=, j, ), {, prod, *=, f, [, j, ], ., value]
[<, f, ., length, ;, j, ++, ), {, if, (, i, !=, j, ), {, prod, *=, f, []
[;, j, ++, ), {, if, (, i, !=, j, ), {, prod, *=, f, [, j, ], ., value]
[., length, ;, j, ++, ), {, if, (, i, !=, j, ), {, prod, *=, f, [, j, ]]
[), {, if, (, i, !=, j, ), {, prod, *=, f, [, j, ], ., value, (, x, )]
[++, ), {, if, (, i, !=, j, ), {, prod, *=, f, [, j, ], ., value, (, x]
[), {, prod, *=, f, [, j, ], ., value, (, x, ), ;, }, }, sum, +=, prod, ;]
[!=, j, ), {, prod, *=, f, [, j, ], ., value, (, x, ), ;, }, }, sum, +=]
[), {, prod, *=, f, [, j, ], ., value, (, x, ), ;, }, }, sum, +=, prod, ;]
[*=, f, [, j, ], ., value, (, x, ), ;, }, }, sum, +=, prod, ;, }, return, sum]
[;, }, }, sum, +=, prod, ;, }, return, sum, ;, }, }, ;, }, }, ;, }, public, static]
[., value, (, x, ), ;, }, }, sum, +=, prod, ;, }, return, sum, ;, }, }, ;, }]
[[, j, ], ., value, (, x, ), ;, }, }, sum, +=, prod, ;, }, return, sum, ;, }]
[], ., value, (, x, ), ;, }, }, sum, +=, prod, ;, }, return, sum, ;, }, }, ;]
[), ;, }, }, sum, +=, prod, ;, }, return, sum, ;, }, }, ;, }, }, ;, }, public]
[+=, prod, ;, }, return, sum, ;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction, combine, (, final]
[;, }, return, sum, ;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction, combine, (, final, BivariateFunction, combiner]
[;, }, }, ;, }, }, ;, }, public, static, UnivariateFunction, combine, (, final, BivariateFunction, combiner, ,, final, UnivariateFunction, f]
[;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final, UnivariateFunction, f, ,, final, double, initialValue, ), {]
[;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final, UnivariateFunction, f, ,, final, double]
[., value, (, f, ., value, (, x, ), ,, g, ., value, (, x, ), ), ;, }, }]
[,, g, ., value, (, x, ), ), ;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction]
[., value, (, x, ), ,, g, ., value, (, x, ), ), ;, }, }, ;, }, public, static]
[), ,, g, ., value, (, x, ), ), ;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final]
[), ;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final, UnivariateFunction, f, ,, final]
[., value, (, x, ), ), ;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,]
[), ), ;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final, UnivariateFunction, f, ,]
[;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final, double, initialValue, ), {, return, collector, (, combiner]
[;, for, (, int, i, =, 1, ;, i, <, point, ., length, ;, i, ++, ), {, result, =]
[., value, (, initialValue, ,, f, ., value, (, point, [, 0, ], ), ), ;, for, (, int, i]
[,, f, ., value, (, point, [, 0, ], ), ), ;, for, (, int, i, =, 1, ;, i]
[), ;, for, (, int, i, =, 1, ;, i, <, point, ., length, ;, i, ++, ), {, result]
[., value, (, point, [, 0, ], ), ), ;, for, (, int, i, =, 1, ;, i, <, point]
[), ), ;, for, (, int, i, =, 1, ;, i, <, point, ., length, ;, i, ++, ), {]
[[, 0, ], ), ), ;, for, (, int, i, =, 1, ;, i, <, point, ., length, ;, i]
[], ), ), ;, for, (, int, i, =, 1, ;, i, <, point, ., length, ;, i, ++, )]
[;, i, <, point, ., length, ;, i, ++, ), {, result, =, combiner, ., value, (, result, ,, f]
[;, i, ++, ), {, result, =, combiner, ., value, (, result, ,, f, ., value, (, point, [, i]
[<, point, ., length, ;, i, ++, ), {, result, =, combiner, ., value, (, result, ,, f, ., value]
[;, i, ++, ), {, result, =, combiner, ., value, (, result, ,, f, ., value, (, point, [, i]
[., length, ;, i, ++, ), {, result, =, combiner, ., value, (, result, ,, f, ., value, (, point]
[), {, result, =, combiner, ., value, (, result, ,, f, ., value, (, point, [, i, ], ), )]
[++, ), {, result, =, combiner, ., value, (, result, ,, f, ., value, (, point, [, i, ], )]
[=, combiner, ., value, (, result, ,, f, ., value, (, point, [, i, ], ), ), ;, }, return]
[;, }, return, result, ;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final, double]
[., value, (, result, ,, f, ., value, (, point, [, i, ], ), ), ;, }, return, result, ;]
[,, f, ., value, (, point, [, i, ], ), ), ;, }, return, result, ;, }, }, ;, }]
[), ;, }, return, result, ;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final]
[., value, (, point, [, i, ], ), ), ;, }, return, result, ;, }, }, ;, }, public, static]
[), ), ;, }, return, result, ;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,]
[[, i, ], ), ), ;, }, return, result, ;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final]
[], ), ), ;, }, return, result, ;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner]
[;, }, }, ;, }, public, static, MultivariateFunction, collector, (, final, BivariateFunction, combiner, ,, final, double, initialValue, ), {, return]
[;, }, public, static, UnivariateFunction, fix1stArgument, (, final, BivariateFunction, f, ,, final, double, fixed, ), {, return, new, UnivariateFunction, (]
[,, new, Identity, (, ), ,, initialValue, ), ;, }, public, static, UnivariateFunction, fix1stArgument, (, final, BivariateFunction, f, ,, final]
[,, initialValue, ), ;, }, public, static, UnivariateFunction, fix1stArgument, (, final, BivariateFunction, f, ,, final, double, fixed, ), {, return]
[), ;, }, public, static, UnivariateFunction, fix1stArgument, (, final, BivariateFunction, f, ,, final, double, fixed, ), {, return, new, UnivariateFunction]
[;, }, public, static, UnivariateFunction, fix2ndArgument, (, final, BivariateFunction, f, ,, final, double, fixed, ), {, return, new, UnivariateFunction, (]
[;, }, }, ;, }, public, static, UnivariateFunction, fix2ndArgument, (, final, BivariateFunction, f, ,, final, double, fixed, ), {, return]
[., value, (, fixed, ,, x, ), ;, }, }, ;, }, public, static, UnivariateFunction, fix2ndArgument, (, final, BivariateFunction, f]
[,, x, ), ;, }, }, ;, }, public, static, UnivariateFunction, fix2ndArgument, (, final, BivariateFunction, f, ,, final, double, fixed]
[), ;, }, }, ;, }, public, static, UnivariateFunction, fix2ndArgument, (, final, BivariateFunction, f, ,, final, double, fixed, ), {]
[;, }, public, static, double, [, ], sample, (, UnivariateFunction, f, ,, double, min, ,, double, max, ,, int, n]
[;, }, }, ;, }, public, static, double, [, ], sample, (, UnivariateFunction, f, ,, double, min, ,, double, max]
[., value, (, x, ,, fixed, ), ;, }, }, ;, }, public, static, double, [, ], sample, (, UnivariateFunction]
[,, fixed, ), ;, }, }, ;, }, public, static, double, [, ], sample, (, UnivariateFunction, f, ,, double, min]
[), ;, }, }, ;, }, public, static, double, [, ], sample, (, UnivariateFunction, f, ,, double, min, ,, double]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, Integer, ., valueOf, (, n, ), ), ;, }, if]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, Integer, ., valueOf, (, n, ), ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, Integer, ., valueOf, (, n, ), ), ;, }, if]
[;, }, if, (, min, >=, max, ), {, throw, new, NumberIsTooLargeException, (, min, ,, max, ,, false, ), ;]
[,, Integer, ., valueOf, (, n, ), ), ;, }, if, (, min, >=, max, ), {, throw, new, NumberIsTooLargeException]
[., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, Integer, ., valueOf, (, n, ), ), ;, }, if, (, min, >=, max, ), {, throw]
[), ;, }, if, (, min, >=, max, ), {, throw, new, NumberIsTooLargeException, (, min, ,, max, ,, false, )]
[., valueOf, (, n, ), ), ;, }, if, (, min, >=, max, ), {, throw, new, NumberIsTooLargeException, (, min]
[), ), ;, }, if, (, min, >=, max, ), {, throw, new, NumberIsTooLargeException, (, min, ,, max, ,, false]
[), {, throw, new, NumberIsTooLargeException, (, min, ,, max, ,, false, ), ;, }, final, double, [, ], s, =]
[>=, max, ), {, throw, new, NumberIsTooLargeException, (, min, ,, max, ,, false, ), ;, }, final, double, [, ]]
[), {, throw, new, NumberIsTooLargeException, (, min, ,, max, ,, false, ), ;, }, final, double, [, ], s, =]
[;, }, final, double, [, ], s, =, new, double, [, n, ], ;, final, double, h, =, (, max]
[,, max, ,, false, ), ;, }, final, double, [, ], s, =, new, double, [, n, ], ;, final]
[,, false, ), ;, }, final, double, [, ], s, =, new, double, [, n, ], ;, final, double, h]
[), ;, }, final, double, [, ], s, =, new, double, [, n, ], ;, final, double, h, =, (]
[;, final, double, h, =, (, max, -, min, ), /, n, ;, for, (, int, i, =, 0, ;]
[], ;, final, double, h, =, (, max, -, min, ), /, n, ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, s, [, i, ]]
[/, n, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, s, []
[), /, n, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, s]
[-, min, ), /, n, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[), /, n, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, s]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, s, [, i, ]]
[;, i, <, n, ;, i, ++, ), {, s, [, i, ], =, f, ., value, (, min, +]
[;, i, ++, ), {, s, [, i, ], =, f, ., value, (, min, +, i, *, h, )]
[<, n, ;, i, ++, ), {, s, [, i, ], =, f, ., value, (, min, +, i, *]
[;, i, ++, ), {, s, [, i, ], =, f, ., value, (, min, +, i, *, h, )]
[), {, s, [, i, ], =, f, ., value, (, min, +, i, *, h, ), ;, }, return]
[++, ), {, s, [, i, ], =, f, ., value, (, min, +, i, *, h, ), ;, }]
[=, f, ., value, (, min, +, i, *, h, ), ;, }, return, s, ;, }, @, Deprecated, public]
[[, i, ], =, f, ., value, (, min, +, i, *, h, ), ;, }, return, s, ;, }]
[], =, f, ., value, (, min, +, i, *, h, ), ;, }, return, s, ;, }, @, Deprecated]
[;, }, return, s, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, toDifferentiableUnivariateFunction, (, final, UnivariateDifferentiableFunction, f, ), {, return, new]
[., value, (, min, +, i, *, h, ), ;, }, return, s, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction]
[), ;, }, return, s, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, toDifferentiableUnivariateFunction, (, final, UnivariateDifferentiableFunction, f, ), {, return]
[+, i, *, h, ), ;, }, return, s, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, toDifferentiableUnivariateFunction, (, final, UnivariateDifferentiableFunction]
[), ;, }, return, s, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, toDifferentiableUnivariateFunction, (, final, UnivariateDifferentiableFunction, f, ), {, return]
[*, h, ), ;, }, return, s, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, toDifferentiableUnivariateFunction, (, final, UnivariateDifferentiableFunction, f, )]
[), ;, }, return, s, ;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, toDifferentiableUnivariateFunction, (, final, UnivariateDifferentiableFunction, f, ), {, return]
[;, }, @, Deprecated, public, static, DifferentiableUnivariateFunction, toDifferentiableUnivariateFunction, (, final, UnivariateDifferentiableFunction, f, ), {, return, new, DifferentiableUnivariateFunction, (, ), {]
[;, }, @, Deprecated, public, static, UnivariateDifferentiableFunction, toUnivariateDifferential, (, final, DifferentiableUnivariateFunction, f, ), {, return, new, UnivariateDifferentiableFunction, (, ), {]
[;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, final, double]
[., value, (, x, ), ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public]
[), ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, final]
[;, }, }, ;, }, @, Deprecated, public, static, UnivariateDifferentiableFunction, toUnivariateDifferential, (, final, DifferentiableUnivariateFunction, f, ), {, return, new, UnivariateDifferentiableFunction]
[;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, UnivariateDifferentiableFunction, toUnivariateDifferential, (, final, DifferentiableUnivariateFunction, f, ), {]
[., getPartialDerivative, (, 1, ), ;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, UnivariateDifferentiableFunction, toUnivariateDifferential, (]
[., value, (, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, ), ), ., getPartialDerivative, (, 1, )]
[), ., getPartialDerivative, (, 1, ), ;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, UnivariateDifferentiableFunction, toUnivariateDifferential]
[,, 1, ,, 0, ,, x, ), ), ., getPartialDerivative, (, 1, ), ;, }, }, ;, }, }, ;]
[,, 0, ,, x, ), ), ., getPartialDerivative, (, 1, ), ;, }, }, ;, }, }, ;, }, @]
[,, x, ), ), ., getPartialDerivative, (, 1, ), ;, }, }, ;, }, }, ;, }, @, Deprecated, public]
[), ), ., getPartialDerivative, (, 1, ), ;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, UnivariateDifferentiableFunction]
[), ;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, UnivariateDifferentiableFunction, toUnivariateDifferential, (, final, DifferentiableUnivariateFunction, f, )]
[;, }, @, Deprecated, public, static, DifferentiableMultivariateFunction, toDifferentiableMultivariateFunction, (, final, MultivariateDifferentiableFunction, f, ), {, return, new, DifferentiableMultivariateFunction, (, ), {]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NumberIsTooLargeException, {, switch, (, t, ., getOrder, (, )]
[., value, (, x, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NumberIsTooLargeException, {, switch, (]
[), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NumberIsTooLargeException, {, switch, (, t, ., getOrder, (]
[), {, case, 0, :, return, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, 0, ,, f, ., value]
[., getOrder, (, ), ), {, case, 0, :, return, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, 0]
[:, return, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, 0, ,, f, ., value, (, t, ., getValue]
[;, case, 1, :, {, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives]
[,, 0, ,, f, ., value, (, t, ., getValue, (, ), ), ), ;, case, 1, :, {, final]
[., getFreeParameters, (, ), ,, 0, ,, f, ., value, (, t, ., getValue, (, ), ), ), ;, case]
[,, f, ., value, (, t, ., getValue, (, ), ), ), ;, case, 1, :, {, final, int, parameters]
[), ;, case, 1, :, {, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ]]
[., value, (, t, ., getValue, (, ), ), ), ;, case, 1, :, {, final, int, parameters, =, t]
[), ), ;, case, 1, :, {, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, []
[., getValue, (, ), ), ), ;, case, 1, :, {, final, int, parameters, =, t, ., getFreeParameters, (, )]
[:, {, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, new, double]
[;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =]
[., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives]
[;, derivatives, [, 0, ], =, f, ., value, (, t, ., getValue, (, ), ), ;, final, double, fPrime]
[], ;, derivatives, [, 0, ], =, f, ., value, (, t, ., getValue, (, ), ), ;, final, double]
[+, 1, ], ;, derivatives, [, 0, ], =, f, ., value, (, t, ., getValue, (, ), ), ;]
[], ;, derivatives, [, 0, ], =, f, ., value, (, t, ., getValue, (, ), ), ;, final, double]
[=, f, ., value, (, t, ., getValue, (, ), ), ;, final, double, fPrime, =, f, ., derivative, (]
[[, 0, ], =, f, ., value, (, t, ., getValue, (, ), ), ;, final, double, fPrime, =, f]
[], =, f, ., value, (, t, ., getValue, (, ), ), ;, final, double, fPrime, =, f, ., derivative]
[;, final, double, fPrime, =, f, ., derivative, (, ), ., value, (, t, ., getValue, (, ), ), ;]
[., value, (, t, ., getValue, (, ), ), ;, final, double, fPrime, =, f, ., derivative, (, ), .]
[), ;, final, double, fPrime, =, f, ., derivative, (, ), ., value, (, t, ., getValue, (, ), )]
[., getValue, (, ), ), ;, final, double, fPrime, =, f, ., derivative, (, ), ., value, (, t, .]
[;, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i]
[., value, (, t, ., getValue, (, ), ), ;, int, [, ], orders, =, new, int, [, parameters, ]]
[., derivative, (, ), ., value, (, t, ., getValue, (, ), ), ;, int, [, ], orders, =, new]
[), ;, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;]
[., getValue, (, ), ), ;, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i]
[;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +]
[;, ++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime]
[<, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +, 1, ]]
[;, ++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime]
[), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime, *, t, .]
[), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime, *, t, .]
[=, 1, ;, derivatives, [, i, +, 1, ], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;, orders]
[[, i, ], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime, *, t, ., getPartialDerivative, (, orders]
[], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;]
[;, derivatives, [, i, +, 1, ], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;, orders, [, i]
[=, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, new]
[[, i, +, 1, ], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =]
[], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return]
[+, 1, ], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;]
[], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return]
[;, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, ), ;]
[*, t, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (]
[;, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, ), ;]
[., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,]
[), ;, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, )]
[=, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, ), ;, }, default, :, throw, new]
[[, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, ), ;, }, default]
[], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, ), ;, }, default, :, throw]
[;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, ), ;, }, default, :, throw, new, NumberIsTooLargeException, (]
[;, }, default, :, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, 1, ,, true, ), ;, }]
[,, 1, ,, derivatives, ), ;, }, default, :, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, 1]
[,, derivatives, ), ;, }, default, :, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, 1, ,, true]
[), ;, }, default, :, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, 1, ,, true, ), ;]
[;, }, }, }, ;, }, @, Deprecated, public, static, DifferentiableMultivariateFunction, toDifferentiableMultivariateFunction, (, final, MultivariateDifferentiableFunction, f, ), {, return, new]
[,, 1, ,, true, ), ;, }, }, }, ;, }, @, Deprecated, public, static, DifferentiableMultivariateFunction, toDifferentiableMultivariateFunction, (, final, MultivariateDifferentiableFunction]
[., getOrder, (, ), ,, 1, ,, true, ), ;, }, }, }, ;, }, @, Deprecated, public, static, DifferentiableMultivariateFunction]
[,, true, ), ;, }, }, }, ;, }, @, Deprecated, public, static, DifferentiableMultivariateFunction, toDifferentiableMultivariateFunction, (, final, MultivariateDifferentiableFunction, f, )]
[), ;, }, }, }, ;, }, @, Deprecated, public, static, DifferentiableMultivariateFunction, toDifferentiableMultivariateFunction, (, final, MultivariateDifferentiableFunction, f, ), {, return]
[;, }, @, Deprecated, public, static, MultivariateDifferentiableFunction, toMultivariateDifferentiableFunction, (, final, DifferentiableMultivariateFunction, f, ), {, return, new, MultivariateDifferentiableFunction, (, ), {]
[;, }, public, MultivariateFunction, partialDerivative, (, final, int, k, ), {, return, new, MultivariateFunction, (, ), {, public, double, value]
[., value, (, x, ), ;, }, public, MultivariateFunction, partialDerivative, (, final, int, k, ), {, return, new, MultivariateFunction, (]
[), ;, }, public, MultivariateFunction, partialDerivative, (, final, int, k, ), {, return, new, MultivariateFunction, (, ), {, public, double]
[;, }, public, MultivariateVectorFunction, gradient, (, ), {, return, new, MultivariateVectorFunction, (, ), {, public, double, [, ], value, (]
[;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, i, ==]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, i]
[;, i, <, n, ;, ++, i, ), {, if, (, i, ==, k, ), {, dsX, [, i, ]]
[;, ++, i, ), {, if, (, i, ==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (]
[<, n, ;, ++, i, ), {, if, (, i, ==, k, ), {, dsX, [, i, ], =, new]
[;, ++, i, ), {, if, (, i, ==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (]
[), {, if, (, i, ==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1]
[), {, if, (, i, ==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1]
[), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, [, i, ]]
[==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, []
[), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, [, i, ]]
[=, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, [, i, ], ), ;, }, else, {, dsX]
[[, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, [, i, ], ), ;, }]
[], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, [, i, ], ), ;, }, else, {]
[;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, x, [, i, ]]
[,, 1, ,, 0, ,, x, [, i, ], ), ;, }, else, {, dsX, [, i, ], =, new]
[,, 0, ,, x, [, i, ], ), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (]
[,, x, [, i, ], ), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,]
[), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, x, [, i]
[[, i, ], ), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,]
[], ), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, x, []
[=, new, DerivativeStructure, (, 1, ,, 1, ,, x, [, i, ], ), ;, }, }, final, DerivativeStructure, y, =]
[[, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, x, [, i, ], ), ;, }, }, final]
[], =, new, DerivativeStructure, (, 1, ,, 1, ,, x, [, i, ], ), ;, }, }, final, DerivativeStructure, y]
[;, }, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, return, y, ., getPartialDerivative, (, 1]
[,, 1, ,, x, [, i, ], ), ;, }, }, final, DerivativeStructure, y, =, f, ., value, (, dsX]
[,, x, [, i, ], ), ;, }, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;]
[), ;, }, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, return, y, ., getPartialDerivative, (]
[[, i, ], ), ;, }, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, return, y]
[], ), ;, }, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, return, y, ., getPartialDerivative]
[;, return, y, ., getPartialDerivative, (, 1, ), ;, }, }, ;, }, public, MultivariateVectorFunction, gradient, (, ), {, return]
[., value, (, dsX, ), ;, return, y, ., getPartialDerivative, (, 1, ), ;, }, }, ;, }, public, MultivariateVectorFunction]
[), ;, return, y, ., getPartialDerivative, (, 1, ), ;, }, }, ;, }, public, MultivariateVectorFunction, gradient, (, ), {]
[;, }, }, ;, }, public, MultivariateVectorFunction, gradient, (, ), {, return, new, MultivariateVectorFunction, (, ), {, public, double, []
[., getPartialDerivative, (, 1, ), ;, }, }, ;, }, public, MultivariateVectorFunction, gradient, (, ), {, return, new, MultivariateVectorFunction, (]
[), ;, }, }, ;, }, public, MultivariateVectorFunction, gradient, (, ), {, return, new, MultivariateVectorFunction, (, ), {, public, double]
[;, }, }, ;, }, @, Deprecated, public, static, MultivariateDifferentiableFunction, toMultivariateDifferentiableFunction, (, final, DifferentiableMultivariateFunction, f, ), {, return, new, MultivariateDifferentiableFunction]
[;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i]
[;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1]
[;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x]
[<, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i]
[;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x]
[), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ]]
[), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ]]
[=, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, y]
[[, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }]
[], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure]
[;, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, final, double, [, ], gradient, =, new]
[,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, y, =, f, ., value, (]
[,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, )]
[,, x, [, i, ], ), ;, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, final]
[), ;, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, final, double, [, ], gradient, =]
[[, i, ], ), ;, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, final, double, []
[], ), ;, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, final, double, [, ], gradient]
[;, final, double, [, ], gradient, =, new, double, [, n, ], ;, final, int, [, ], orders, =, new]
[., value, (, dsX, ), ;, final, double, [, ], gradient, =, new, double, [, n, ], ;, final, int]
[), ;, final, double, [, ], gradient, =, new, double, [, n, ], ;, final, int, [, ], orders, =]
[;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;]
[], ;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, orders, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, orders, [, i]
[;, i, <, n, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, gradient, [, i, ]]
[;, ++, i, ), {, orders, [, i, ], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative]
[<, n, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, gradient, [, i, ], =, y]
[;, ++, i, ), {, orders, [, i, ], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative]
[), {, orders, [, i, ], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, )]
[), {, orders, [, i, ], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, )]
[=, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =]
[[, i, ], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, ), ;, orders, []
[], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ]]
[;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;]
[=, y, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, gradient, ;, }]
[[, i, ], =, y, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return]
[], =, y, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, gradient, ;]
[;, orders, [, i, ], =, 0, ;, }, return, gradient, ;, }, }, ;, }, }, ;, }, @]
[., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, gradient, ;, }, }, ;]
[), ;, orders, [, i, ], =, 0, ;, }, return, gradient, ;, }, }, ;, }, }, ;, }]
[=, 0, ;, }, return, gradient, ;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, MultivariateDifferentiableFunction, toMultivariateDifferentiableFunction]
[[, i, ], =, 0, ;, }, return, gradient, ;, }, }, ;, }, }, ;, }, @, Deprecated, public]
[], =, 0, ;, }, return, gradient, ;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, MultivariateDifferentiableFunction]
[;, }, return, gradient, ;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, MultivariateDifferentiableFunction, toMultivariateDifferentiableFunction, (, final]
[;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, MultivariateDifferentiableFunction, toMultivariateDifferentiableFunction, (, final, DifferentiableMultivariateFunction, f, ), {]
[;, }, @, Deprecated, public, static, DifferentiableMultivariateVectorFunction, toDifferentiableMultivariateVectorFunction, (, final, MultivariateDifferentiableVectorFunction, f, ), {, return, new, DifferentiableMultivariateVectorFunction, (, ), {]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int, parameters]
[., value, (, x, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,]
[), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int]
[;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, .]
[., getFreeParameters, (, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final, int]
[[, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, )]
[], ., getFreeParameters, (, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final]
[;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (]
[., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, ), {]
[[, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >]
[], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, )]
[;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }]
[., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, )]
[), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0]
[>, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i]
[), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0]
[;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, t]
[,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i]
[,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[;, i, <, n, ;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=]
[;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw]
[<, n, ;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, )]
[;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw]
[), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (]
[), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if]
[!=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;]
[., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, )]
[[, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], .]
[], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (]
[), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if]
[;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (]
[,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw]
[., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=]
[[, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder]
[], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, )]
[), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException]
[), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,, order, ), ;, }, }]
[!=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,, order, ), ;]
[., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, )]
[[, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], .]
[], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (]
[), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,, order, ), ;, }, }]
[;, }, }, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =]
[,, order, ), ;, }, }, final, double, [, ], point, =, new, double, [, n, ], ;, for, (]
[., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =, new, double, [, n]
[[, i, ], ., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =, new]
[], ., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =, new, double, []
[), ;, }, }, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i]
[;, i, <, n, ;, ++, i, ), {, point, [, i, ], =, t, [, i, ], ., getValue]
[;, ++, i, ), {, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }]
[<, n, ;, ++, i, ), {, point, [, i, ], =, t, [, i, ], ., getValue, (, )]
[;, ++, i, ), {, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }]
[), {, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, value]
[), {, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, value]
[=, t, [, i, ], ., getValue, (, ), ;, }, final, double, value, =, f, ., value, (, point]
[[, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, value, =, f, .]
[], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, value, =, f, ., value, (]
[;, }, final, double, value, =, f, ., value, (, point, ), ;, final, double, [, ], gradient, =, f]
[., getValue, (, ), ;, }, final, double, value, =, f, ., value, (, point, ), ;, final, double, []
[[, i, ], ., getValue, (, ), ;, }, final, double, value, =, f, ., value, (, point, ), ;]
[], ., getValue, (, ), ;, }, final, double, value, =, f, ., value, (, point, ), ;, final, double]
[;, final, double, [, ], gradient, =, f, ., gradient, (, ), ., value, (, point, ), ;, final, double]
[., value, (, point, ), ;, final, double, [, ], gradient, =, f, ., gradient, (, ), ., value, (]
[), ;, final, double, [, ], gradient, =, f, ., gradient, (, ), ., value, (, point, ), ;, final]
[;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =]
[., value, (, point, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;]
[., gradient, (, ), ., value, (, point, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters]
[), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ]]
[;, derivatives, [, 0, ], =, value, ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;]
[], ;, derivatives, [, 0, ], =, value, ;, final, int, [, ], orders, =, new, int, [, parameters, ]]
[+, 1, ], ;, derivatives, [, 0, ], =, value, ;, final, int, [, ], orders, =, new, int, []
[], ;, derivatives, [, 0, ], =, value, ;, final, int, [, ], orders, =, new, int, [, parameters, ]]
[=, value, ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =]
[[, 0, ], =, value, ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (]
[], =, value, ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i]
[;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i]
[;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j]
[;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j]
[<, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0]
[;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j]
[), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[=, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, []
[[, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, )]
[], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +]
[;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, gradient, [, j, ]]
[;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, gradient, [, j, ], *, t, [, j]
[<, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, gradient, [, j, ], *, t]
[;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, gradient, [, j, ], *, t, [, j]
[), {, derivatives, [, i, +, 1, ], +=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative]
[), {, derivatives, [, i, +, 1, ], +=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative]
[+=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i]
[[, i, +, 1, ], +=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, )]
[], +=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, []
[+, 1, ], +=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }]
[], +=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, []
[;, }, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, )]
[*, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }]
[[, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =]
[], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;]
[;, }, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, )]
[., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters]
[[, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, return, new]
[], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (]
[), ;, }, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives]
[=, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }, }, ;, }, @]
[[, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }, }]
[], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }, }, ;, }]
[;, }, return, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }, }, ;, }, @, Deprecated, public]
[;, }, }, ;, }, @, Deprecated, public, static, DifferentiableMultivariateVectorFunction, toDifferentiableMultivariateVectorFunction, (, final, MultivariateDifferentiableVectorFunction, f, ), {, return, new, DifferentiableMultivariateVectorFunction]
[,, order, ,, derivatives, ), ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableMultivariateVectorFunction, toDifferentiableMultivariateVectorFunction, (, final, MultivariateDifferentiableVectorFunction, f]
[,, derivatives, ), ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableMultivariateVectorFunction, toDifferentiableMultivariateVectorFunction, (, final, MultivariateDifferentiableVectorFunction, f, ), {]
[), ;, }, }, ;, }, @, Deprecated, public, static, DifferentiableMultivariateVectorFunction, toDifferentiableMultivariateVectorFunction, (, final, MultivariateDifferentiableVectorFunction, f, ), {, return, new]
[;, }, @, Deprecated, public, static, MultivariateDifferentiableVectorFunction, toMultivariateDifferentiableVectorFunction, (, final, DifferentiableMultivariateVectorFunction, f, ), {, return, new, MultivariateDifferentiableVectorFunction, (, ), {]
[;, }, public, MultivariateMatrixFunction, jacobian, (, ), {, return, new, MultivariateMatrixFunction, (, ), {, public, double, [, ], [, ]]
[., value, (, x, ), ;, }, public, MultivariateMatrixFunction, jacobian, (, ), {, return, new, MultivariateMatrixFunction, (, ), {, public]
[), ;, }, public, MultivariateMatrixFunction, jacobian, (, ), {, return, new, MultivariateMatrixFunction, (, ), {, public, double, [, ], []
[;, }, }, ;, }, @, Deprecated, public, static, MultivariateDifferentiableVectorFunction, toMultivariateDifferentiableVectorFunction, (, final, DifferentiableMultivariateVectorFunction, f, ), {, return, new, MultivariateDifferentiableVectorFunction]
[;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i]
[;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1]
[;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x]
[<, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i]
[;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x]
[), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ]]
[), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ]]
[=, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, []
[[, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }]
[], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure]
[;, }, final, DerivativeStructure, [, ], y, =, f, ., value, (, dsX, ), ;, final, double, [, ], []
[,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, [, ], y, =, f, .]
[,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, [, ], y, =, f, ., value, (]
[,, x, [, i, ], ), ;, }, final, DerivativeStructure, [, ], y, =, f, ., value, (, dsX, )]
[), ;, }, final, DerivativeStructure, [, ], y, =, f, ., value, (, dsX, ), ;, final, double, [, ]]
[[, i, ], ), ;, }, final, DerivativeStructure, [, ], y, =, f, ., value, (, dsX, ), ;, final]
[], ), ;, }, final, DerivativeStructure, [, ], y, =, f, ., value, (, dsX, ), ;, final, double, []
[;, final, double, [, ], [, ], jacobian, =, new, double, [, y, ., length, ], [, n, ], ;]
[., value, (, dsX, ), ;, final, double, [, ], [, ], jacobian, =, new, double, [, y, ., length]
[), ;, final, double, [, ], [, ], jacobian, =, new, double, [, y, ., length, ], [, n, ]]
[;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;]
[], [, n, ], ;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int]
[., length, ], [, n, ], ;, final, int, [, ], orders, =, new, int, [, n, ], ;, for]
[], ;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, y, ., length, ;, ++, i, ), {, for, (]
[], ;, for, (, int, i, =, 0, ;, i, <, y, ., length, ;, ++, i, ), {, for]
[;, i, <, y, ., length, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {]
[<, y, ., length, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {]
[., length, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j]
[), {, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, orders, [, j]
[), {, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, orders, [, j]
[;, j, <, n, ;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ]]
[;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =]
[<, n, ;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], [, j]
[;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =]
[), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =, y, [, i]
[), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =, y, [, i]
[=, 1, ;, jacobian, [, i, ], [, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders, )]
[[, j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =, y, [, i, ], ., getPartialDerivative]
[], =, 1, ;, jacobian, [, i, ], [, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders]
[;, jacobian, [, i, ], [, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders]
[=, y, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }]
[[, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0]
[[, i, ], [, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j]
[], [, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =]
[], =, y, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }]
[;, orders, [, j, ], =, 0, ;, }, }, return, jacobian, ;, }, }, ;, }, }, ;, }]
[., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return, jacobian, ;, }, }]
[[, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return, jacobian]
[], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return, jacobian, ;, }]
[), ;, orders, [, j, ], =, 0, ;, }, }, return, jacobian, ;, }, }, ;, }, }, ;]
[=, 0, ;, }, }, return, jacobian, ;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, MultivariateDifferentiableVectorFunction]
[[, j, ], =, 0, ;, }, }, return, jacobian, ;, }, }, ;, }, }, ;, }, @, Deprecated]
[], =, 0, ;, }, }, return, jacobian, ;, }, }, ;, }, }, ;, }, @, Deprecated, public, static]
[;, }, }, return, jacobian, ;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, MultivariateDifferentiableVectorFunction, toMultivariateDifferentiableVectorFunction, (]
[;, }, }, ;, }, }, ;, }, @, Deprecated, public, static, MultivariateDifferentiableVectorFunction, toMultivariateDifferentiableVectorFunction, (, final, DifferentiableMultivariateVectorFunction, f, ), {]
[;, }, }]
[;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final]
[., value, (, x, ), ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ], t, ), throws]
[), ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {]
[;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, .]
[., getFreeParameters, (, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final, int]
[[, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, )]
[], ., getFreeParameters, (, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final]
[;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (]
[., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, ), {]
[[, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >]
[], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, )]
[;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }]
[., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, )]
[), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0]
[>, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i]
[), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0]
[;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, t]
[,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i]
[,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (]
[;, i, <, n, ;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=]
[;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw]
[<, n, ;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, )]
[;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw]
[), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (]
[), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if]
[!=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;]
[., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, )]
[[, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], .]
[], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (]
[), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if]
[;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (]
[,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw]
[., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=]
[[, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder]
[], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, )]
[), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException]
[), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,, order, ), ;, }, }]
[!=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,, order, ), ;]
[., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, )]
[[, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], .]
[], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (]
[), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,, order, ), ;, }, }]
[;, }, }, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =]
[,, order, ), ;, }, }, final, double, [, ], point, =, new, double, [, n, ], ;, for, (]
[., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =, new, double, [, n]
[[, i, ], ., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =, new]
[], ., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =, new, double, []
[), ;, }, }, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i]
[;, i, <, n, ;, ++, i, ), {, point, [, i, ], =, t, [, i, ], ., getValue]
[;, ++, i, ), {, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }]
[<, n, ;, ++, i, ), {, point, [, i, ], =, t, [, i, ], ., getValue, (, )]
[;, ++, i, ), {, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }]
[), {, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, []
[), {, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, []
[=, t, [, i, ], ., getValue, (, ), ;, }, final, double, [, ], value, =, f, ., value]
[[, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, [, ], value, =]
[], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, [, ], value, =, f, .]
[;, }, final, double, [, ], value, =, f, ., value, (, point, ), ;, final, double, [, ], []
[., getValue, (, ), ;, }, final, double, [, ], value, =, f, ., value, (, point, ), ;, final]
[[, i, ], ., getValue, (, ), ;, }, final, double, [, ], value, =, f, ., value, (, point]
[], ., getValue, (, ), ;, }, final, double, [, ], value, =, f, ., value, (, point, ), ;]
[;, final, double, [, ], [, ], jacobian, =, f, ., jacobian, (, ), ., value, (, point, ), ;]
[., value, (, point, ), ;, final, double, [, ], [, ], jacobian, =, f, ., jacobian, (, ), .]
[), ;, final, double, [, ], [, ], jacobian, =, f, ., jacobian, (, ), ., value, (, point, )]
[;, final, DerivativeStructure, [, ], merged, =, new, DerivativeStructure, [, value, ., length, ], ;, for, (, int, k, =]
[., value, (, point, ), ;, final, DerivativeStructure, [, ], merged, =, new, DerivativeStructure, [, value, ., length, ], ;]
[., jacobian, (, ), ., value, (, point, ), ;, final, DerivativeStructure, [, ], merged, =, new, DerivativeStructure, [, value]
[), ;, final, DerivativeStructure, [, ], merged, =, new, DerivativeStructure, [, value, ., length, ], ;, for, (, int, k]
[;, for, (, int, k, =, 0, ;, k, <, merged, ., length, ;, ++, k, ), {, final, double]
[], ;, for, (, int, k, =, 0, ;, k, <, merged, ., length, ;, ++, k, ), {, final]
[., length, ], ;, for, (, int, k, =, 0, ;, k, <, merged, ., length, ;, ++, k, )]
[;, k, <, merged, ., length, ;, ++, k, ), {, final, double, [, ], derivatives, =, new, double, []
[;, ++, k, ), {, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives]
[<, merged, ., length, ;, ++, k, ), {, final, double, [, ], derivatives, =, new, double, [, parameters, +]
[;, ++, k, ), {, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives]
[., length, ;, ++, k, ), {, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ]]
[), {, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ]]
[), {, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ]]
[;, derivatives, [, 0, ], =, value, [, k, ], ;, final, int, [, ], orders, =, new, int, []
[], ;, derivatives, [, 0, ], =, value, [, k, ], ;, final, int, [, ], orders, =, new, int]
[+, 1, ], ;, derivatives, [, 0, ], =, value, [, k, ], ;, final, int, [, ], orders, =]
[], ;, derivatives, [, 0, ], =, value, [, k, ], ;, final, int, [, ], orders, =, new, int]
[=, value, [, k, ], ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (]
[[, 0, ], =, value, [, k, ], ;, final, int, [, ], orders, =, new, int, [, parameters, ]]
[], =, value, [, k, ], ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for]
[;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;]
[[, k, ], ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i]
[], ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i]
[;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j]
[;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j]
[<, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0]
[;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j]
[), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[=, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, []
[[, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, )]
[], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +]
[;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ]]
[;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ], [, j, ], *]
[<, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ], [, j]
[;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ], [, j, ], *]
[), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ], [, j, ], *, t, [, j]
[), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ], [, j, ], *, t, [, j]
[+=, jacobian, [, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }]
[[, i, +, 1, ], +=, jacobian, [, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative]
[], +=, jacobian, [, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;]
[+, 1, ], +=, jacobian, [, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders]
[], +=, jacobian, [, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;]
[;, }, orders, [, i, ], =, 0, ;, }, merged, [, k, ], =, new, DerivativeStructure, (, parameters, ,]
[*, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }]
[[, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =]
[[, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, []
[], [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ]]
[], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;]
[;, }, orders, [, i, ], =, 0, ;, }, merged, [, k, ], =, new, DerivativeStructure, (, parameters, ,]
[., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, merged, [, k, ], =]
[[, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, merged, []
[], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, merged, [, k, ]]
[), ;, }, orders, [, i, ], =, 0, ;, }, merged, [, k, ], =, new, DerivativeStructure, (, parameters]
[=, 0, ;, }, merged, [, k, ], =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }]
[[, i, ], =, 0, ;, }, merged, [, k, ], =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives]
[], =, 0, ;, }, merged, [, k, ], =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;]
[;, }, merged, [, k, ], =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }, return, merged]
[=, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }, return, merged, ;, }, }, ;, }, }]
[[, k, ], =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }, return, merged, ;, }, }]
[], =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }, return, merged, ;, }, }, ;, }]
[;, }, return, merged, ;, }, }, ;, }, }]
[,, order, ,, derivatives, ), ;, }, return, merged, ;, }, }, ;, }, }]
[,, derivatives, ), ;, }, return, merged, ;, }, }, ;, }, }]
[), ;, }, return, merged, ;, }, }, ;, }, }]
[;, }, }, ;, }, }]
